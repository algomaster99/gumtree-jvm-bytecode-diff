{"diffoscope-json-version": 1, "source1": "first/CSVFormat.class", "source2": "second/CSVFormat.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,269 +1,269 @@\n-  SHA-256 checksum 64a2b9d96b20abd215a2dc6fd058c14e90b58cfbeb0616afba2b704e75f14f77\n+  SHA-256 checksum 9e41654ed55ba538444b717ec2dbbc0612417b05bd88c944ae4f65af1b969229\n   Compiled from \"CSVFormat.java\"\n public final class org.apache.commons.csv.CSVFormat implements java.io.Serializable\n   minor version: 0\n   major version: 52\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n   this_class: #37                         // org/apache/commons/csv/CSVFormat\n   super_class: #103                       // java/lang/Object\n   interfaces: 1, fields: 32, methods: 122, attributes: 3\n Constant pool:\n-    #1 = Class              #476          // org/apache/commons/csv/Constants\n-    #2 = Methodref          #37.#477      // org/apache/commons/csv/CSVFormat.containsLineBreak:(Ljava/lang/String;)Z\n-    #3 = Methodref          #37.#478      // org/apache/commons/csv/CSVFormat.isLineBreak:(Ljava/lang/Character;)Z\n-    #4 = Methodref          #37.#479      // org/apache/commons/csv/CSVFormat.\"<init>\":(Lorg/apache/commons/csv/CSVFormat$Builder;)V\n-    #5 = Fieldref           #37.#480      // org/apache/commons/csv/CSVFormat.duplicateHeaderMode:Lorg/apache/commons/csv/DuplicateHeaderMode;\n-    #6 = Fieldref           #37.#481      // org/apache/commons/csv/CSVFormat.quotedNullString:Ljava/lang/String;\n-    #7 = Fieldref           #37.#482      // org/apache/commons/csv/CSVFormat.autoFlush:Z\n-    #8 = Fieldref           #37.#483      // org/apache/commons/csv/CSVFormat.trim:Z\n-    #9 = Fieldref           #37.#484      // org/apache/commons/csv/CSVFormat.trailingDelimiter:Z\n-   #10 = Fieldref           #37.#485      // org/apache/commons/csv/CSVFormat.ignoreHeaderCase:Z\n-   #11 = Fieldref           #37.#486      // org/apache/commons/csv/CSVFormat.skipHeaderRecord:Z\n-   #12 = Fieldref           #37.#487      // org/apache/commons/csv/CSVFormat.headers:[Ljava/lang/String;\n-   #13 = Fieldref           #37.#488      // org/apache/commons/csv/CSVFormat.headerComments:[Ljava/lang/String;\n-   #14 = Fieldref           #37.#489      // org/apache/commons/csv/CSVFormat.nullString:Ljava/lang/String;\n-   #15 = Fieldref           #37.#490      // org/apache/commons/csv/CSVFormat.recordSeparator:Ljava/lang/String;\n-   #16 = Fieldref           #37.#491      // org/apache/commons/csv/CSVFormat.ignoreEmptyLines:Z\n-   #17 = Fieldref           #37.#492      // org/apache/commons/csv/CSVFormat.allowMissingColumnNames:Z\n-   #18 = Fieldref           #37.#493      // org/apache/commons/csv/CSVFormat.ignoreSurroundingSpaces:Z\n-   #19 = Fieldref           #37.#494      // org/apache/commons/csv/CSVFormat.escapeCharacter:Ljava/lang/Character;\n-   #20 = Fieldref           #37.#495      // org/apache/commons/csv/CSVFormat.commentMarker:Ljava/lang/Character;\n-   #21 = Fieldref           #37.#496      // org/apache/commons/csv/CSVFormat.quoteMode:Lorg/apache/commons/csv/QuoteMode;\n-   #22 = Fieldref           #37.#497      // org/apache/commons/csv/CSVFormat.quoteCharacter:Ljava/lang/Character;\n-   #23 = Fieldref           #37.#498      // org/apache/commons/csv/CSVFormat.delimiter:Ljava/lang/String;\n-   #24 = Methodref          #499.#500     // \"[Ljava/lang/Object;\".clone:()Ljava/lang/Object;\n-   #25 = Class              #501          // \"[Ljava/lang/Object;\"\n-   #26 = String             #502          // source\n-   #27 = Methodref          #503.#504     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-   #28 = Class              #505          // java/lang/String\n-   #29 = Methodref          #28.#506      // java/lang/String.indexOf:(I)I\n-   #30 = Methodref          #37.#507      // org/apache/commons/csv/CSVFormat.contains:(Ljava/lang/String;C)Z\n-   #31 = Methodref          #28.#508      // java/lang/String.trim:()Ljava/lang/String;\n-   #32 = Methodref          #28.#509      // java/lang/String.isEmpty:()Z\n-   #33 = Methodref          #510.#511     // java/lang/Character.charValue:()C\n-   #34 = Methodref          #37.#512      // org/apache/commons/csv/CSVFormat.isLineBreak:(C)Z\n-   #35 = InterfaceMethodref #114.#513     // java/lang/CharSequence.charAt:(I)C\n-   #36 = Methodref          #37.#514      // org/apache/commons/csv/CSVFormat.isTrimChar:(C)Z\n-   #37 = Class              #515          // org/apache/commons/csv/CSVFormat\n-   #38 = Methodref          #28.#516      // java/lang/String.valueOf:(C)Ljava/lang/String;\n-   #39 = Fieldref           #517.#518     // org/apache/commons/csv/DuplicateHeaderMode.ALLOW_ALL:Lorg/apache/commons/csv/DuplicateHeaderMode;\n-   #40 = Methodref          #37.#519      // org/apache/commons/csv/CSVFormat.\"<init>\":(Ljava/lang/String;Ljava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZZLorg/apache/commons/csv/DuplicateHeaderMode;)V\n-   #41 = InvokeDynamic      #0:#525       // #0:apply:([Ljava/lang/Object;)Ljava/util/function/IntFunction;\n-   #42 = Methodref          #526.#527     // java/util/Arrays.setAll:([Ljava/lang/Object;Ljava/util/function/IntFunction;)V\n-   #43 = InterfaceMethodref #114.#528     // java/lang/CharSequence.length:()I\n-   #44 = Methodref          #37.#529      // org/apache/commons/csv/CSVFormat.isTrimChar:(Ljava/lang/CharSequence;I)Z\n-   #45 = InterfaceMethodref #114.#530     // java/lang/CharSequence.subSequence:(II)Ljava/lang/CharSequence;\n-   #46 = Methodref          #250.#531     // org/apache/commons/csv/CSVFormat$Predefined.valueOf:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Predefined;\n-   #47 = Methodref          #250.#532     // org/apache/commons/csv/CSVFormat$Predefined.getFormat:()Lorg/apache/commons/csv/CSVFormat;\n-   #48 = Methodref          #103.#533     // java/lang/Object.\"<init>\":()V\n-   #49 = Methodref          #252.#534     // org/apache/commons/csv/CSVFormat$Builder.access$2200:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/String;\n-   #50 = Methodref          #252.#535     // org/apache/commons/csv/CSVFormat$Builder.access$2300:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/Character;\n-   #51 = Methodref          #252.#536     // org/apache/commons/csv/CSVFormat$Builder.access$2400:(Lorg/apache/commons/csv/CSVFormat$Builder;)Lorg/apache/commons/csv/QuoteMode;\n-   #52 = Methodref          #252.#537     // org/apache/commons/csv/CSVFormat$Builder.access$2500:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/Character;\n-   #53 = Methodref          #252.#538     // org/apache/commons/csv/CSVFormat$Builder.access$2600:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/Character;\n-   #54 = Methodref          #252.#539     // org/apache/commons/csv/CSVFormat$Builder.access$2700:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n-   #55 = Methodref          #252.#540     // org/apache/commons/csv/CSVFormat$Builder.access$2800:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n-   #56 = Methodref          #252.#541     // org/apache/commons/csv/CSVFormat$Builder.access$2900:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n-   #57 = Methodref          #252.#542     // org/apache/commons/csv/CSVFormat$Builder.access$3000:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/String;\n-   #58 = Methodref          #252.#543     // org/apache/commons/csv/CSVFormat$Builder.access$3100:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/String;\n-   #59 = Methodref          #252.#544     // org/apache/commons/csv/CSVFormat$Builder.access$3200:(Lorg/apache/commons/csv/CSVFormat$Builder;)[Ljava/lang/String;\n-   #60 = Methodref          #252.#545     // org/apache/commons/csv/CSVFormat$Builder.access$3300:(Lorg/apache/commons/csv/CSVFormat$Builder;)[Ljava/lang/String;\n-   #61 = Methodref          #252.#546     // org/apache/commons/csv/CSVFormat$Builder.access$3400:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n-   #62 = Methodref          #252.#547     // org/apache/commons/csv/CSVFormat$Builder.access$3500:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n-   #63 = Methodref          #252.#548     // org/apache/commons/csv/CSVFormat$Builder.access$3600:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n-   #64 = Methodref          #252.#549     // org/apache/commons/csv/CSVFormat$Builder.access$3700:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n-   #65 = Methodref          #252.#550     // org/apache/commons/csv/CSVFormat$Builder.access$3800:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n-   #66 = Methodref          #252.#551     // org/apache/commons/csv/CSVFormat$Builder.access$3900:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/String;\n-   #67 = Methodref          #252.#552     // org/apache/commons/csv/CSVFormat$Builder.access$4000:(Lorg/apache/commons/csv/CSVFormat$Builder;)Lorg/apache/commons/csv/DuplicateHeaderMode;\n-   #68 = Methodref          #37.#553      // org/apache/commons/csv/CSVFormat.validate:()V\n-   #69 = Methodref          #37.#554      // org/apache/commons/csv/CSVFormat.toStringArray:([Ljava/lang/Object;)[Ljava/lang/String;\n-   #70 = Methodref          #37.#555      // org/apache/commons/csv/CSVFormat.clone:([Ljava/lang/Object;)[Ljava/lang/Object;\n+    #1 = Class              #465          // org/apache/commons/csv/Constants\n+    #2 = Methodref          #37.#466      // org/apache/commons/csv/CSVFormat.containsLineBreak:(Ljava/lang/String;)Z\n+    #3 = Methodref          #37.#467      // org/apache/commons/csv/CSVFormat.isLineBreak:(Ljava/lang/Character;)Z\n+    #4 = Methodref          #37.#468      // org/apache/commons/csv/CSVFormat.\"<init>\":(Lorg/apache/commons/csv/CSVFormat$Builder;)V\n+    #5 = Fieldref           #37.#469      // org/apache/commons/csv/CSVFormat.duplicateHeaderMode:Lorg/apache/commons/csv/DuplicateHeaderMode;\n+    #6 = Fieldref           #37.#470      // org/apache/commons/csv/CSVFormat.quotedNullString:Ljava/lang/String;\n+    #7 = Fieldref           #37.#471      // org/apache/commons/csv/CSVFormat.autoFlush:Z\n+    #8 = Fieldref           #37.#472      // org/apache/commons/csv/CSVFormat.trim:Z\n+    #9 = Fieldref           #37.#473      // org/apache/commons/csv/CSVFormat.trailingDelimiter:Z\n+   #10 = Fieldref           #37.#474      // org/apache/commons/csv/CSVFormat.ignoreHeaderCase:Z\n+   #11 = Fieldref           #37.#475      // org/apache/commons/csv/CSVFormat.skipHeaderRecord:Z\n+   #12 = Fieldref           #37.#476      // org/apache/commons/csv/CSVFormat.headers:[Ljava/lang/String;\n+   #13 = Fieldref           #37.#477      // org/apache/commons/csv/CSVFormat.headerComments:[Ljava/lang/String;\n+   #14 = Fieldref           #37.#478      // org/apache/commons/csv/CSVFormat.nullString:Ljava/lang/String;\n+   #15 = Fieldref           #37.#479      // org/apache/commons/csv/CSVFormat.recordSeparator:Ljava/lang/String;\n+   #16 = Fieldref           #37.#480      // org/apache/commons/csv/CSVFormat.ignoreEmptyLines:Z\n+   #17 = Fieldref           #37.#481      // org/apache/commons/csv/CSVFormat.allowMissingColumnNames:Z\n+   #18 = Fieldref           #37.#482      // org/apache/commons/csv/CSVFormat.ignoreSurroundingSpaces:Z\n+   #19 = Fieldref           #37.#483      // org/apache/commons/csv/CSVFormat.escapeCharacter:Ljava/lang/Character;\n+   #20 = Fieldref           #37.#484      // org/apache/commons/csv/CSVFormat.commentMarker:Ljava/lang/Character;\n+   #21 = Fieldref           #37.#485      // org/apache/commons/csv/CSVFormat.quoteMode:Lorg/apache/commons/csv/QuoteMode;\n+   #22 = Fieldref           #37.#486      // org/apache/commons/csv/CSVFormat.quoteCharacter:Ljava/lang/Character;\n+   #23 = Fieldref           #37.#487      // org/apache/commons/csv/CSVFormat.delimiter:Ljava/lang/String;\n+   #24 = Methodref          #488.#489     // \"[Ljava/lang/Object;\".clone:()Ljava/lang/Object;\n+   #25 = Class              #490          // \"[Ljava/lang/Object;\"\n+   #26 = String             #491          // source\n+   #27 = Methodref          #492.#493     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #28 = Class              #494          // java/lang/String\n+   #29 = Methodref          #28.#495      // java/lang/String.indexOf:(I)I\n+   #30 = Methodref          #37.#496      // org/apache/commons/csv/CSVFormat.contains:(Ljava/lang/String;C)Z\n+   #31 = Methodref          #28.#497      // java/lang/String.trim:()Ljava/lang/String;\n+   #32 = Methodref          #28.#498      // java/lang/String.isEmpty:()Z\n+   #33 = Methodref          #499.#500     // java/lang/Character.charValue:()C\n+   #34 = Methodref          #37.#501      // org/apache/commons/csv/CSVFormat.isLineBreak:(C)Z\n+   #35 = InterfaceMethodref #114.#502     // java/lang/CharSequence.charAt:(I)C\n+   #36 = Methodref          #37.#503      // org/apache/commons/csv/CSVFormat.isTrimChar:(C)Z\n+   #37 = Class              #504          // org/apache/commons/csv/CSVFormat\n+   #38 = Methodref          #28.#505      // java/lang/String.valueOf:(C)Ljava/lang/String;\n+   #39 = Fieldref           #403.#506     // org/apache/commons/csv/DuplicateHeaderMode.ALLOW_ALL:Lorg/apache/commons/csv/DuplicateHeaderMode;\n+   #40 = Methodref          #37.#507      // org/apache/commons/csv/CSVFormat.\"<init>\":(Ljava/lang/String;Ljava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZZLorg/apache/commons/csv/DuplicateHeaderMode;)V\n+   #41 = InvokeDynamic      #0:#513       // #0:apply:([Ljava/lang/Object;)Ljava/util/function/IntFunction;\n+   #42 = Methodref          #514.#515     // java/util/Arrays.setAll:([Ljava/lang/Object;Ljava/util/function/IntFunction;)V\n+   #43 = InterfaceMethodref #114.#516     // java/lang/CharSequence.length:()I\n+   #44 = Methodref          #37.#517      // org/apache/commons/csv/CSVFormat.isTrimChar:(Ljava/lang/CharSequence;I)Z\n+   #45 = InterfaceMethodref #114.#518     // java/lang/CharSequence.subSequence:(II)Ljava/lang/CharSequence;\n+   #46 = Methodref          #250.#519     // org/apache/commons/csv/CSVFormat$Predefined.valueOf:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Predefined;\n+   #47 = Methodref          #250.#520     // org/apache/commons/csv/CSVFormat$Predefined.getFormat:()Lorg/apache/commons/csv/CSVFormat;\n+   #48 = Methodref          #103.#521     // java/lang/Object.\"<init>\":()V\n+   #49 = Methodref          #252.#522     // org/apache/commons/csv/CSVFormat$Builder.access$2200:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/String;\n+   #50 = Methodref          #252.#523     // org/apache/commons/csv/CSVFormat$Builder.access$2300:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/Character;\n+   #51 = Methodref          #252.#524     // org/apache/commons/csv/CSVFormat$Builder.access$2400:(Lorg/apache/commons/csv/CSVFormat$Builder;)Lorg/apache/commons/csv/QuoteMode;\n+   #52 = Methodref          #252.#525     // org/apache/commons/csv/CSVFormat$Builder.access$2500:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/Character;\n+   #53 = Methodref          #252.#526     // org/apache/commons/csv/CSVFormat$Builder.access$2600:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/Character;\n+   #54 = Methodref          #252.#527     // org/apache/commons/csv/CSVFormat$Builder.access$2700:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n+   #55 = Methodref          #252.#528     // org/apache/commons/csv/CSVFormat$Builder.access$2800:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n+   #56 = Methodref          #252.#529     // org/apache/commons/csv/CSVFormat$Builder.access$2900:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n+   #57 = Methodref          #252.#530     // org/apache/commons/csv/CSVFormat$Builder.access$3000:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/String;\n+   #58 = Methodref          #252.#531     // org/apache/commons/csv/CSVFormat$Builder.access$3100:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/String;\n+   #59 = Methodref          #252.#532     // org/apache/commons/csv/CSVFormat$Builder.access$3200:(Lorg/apache/commons/csv/CSVFormat$Builder;)[Ljava/lang/String;\n+   #60 = Methodref          #252.#533     // org/apache/commons/csv/CSVFormat$Builder.access$3300:(Lorg/apache/commons/csv/CSVFormat$Builder;)[Ljava/lang/String;\n+   #61 = Methodref          #252.#534     // org/apache/commons/csv/CSVFormat$Builder.access$3400:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n+   #62 = Methodref          #252.#535     // org/apache/commons/csv/CSVFormat$Builder.access$3500:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n+   #63 = Methodref          #252.#536     // org/apache/commons/csv/CSVFormat$Builder.access$3600:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n+   #64 = Methodref          #252.#537     // org/apache/commons/csv/CSVFormat$Builder.access$3700:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n+   #65 = Methodref          #252.#538     // org/apache/commons/csv/CSVFormat$Builder.access$3800:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n+   #66 = Methodref          #252.#539     // org/apache/commons/csv/CSVFormat$Builder.access$3900:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/String;\n+   #67 = Methodref          #252.#540     // org/apache/commons/csv/CSVFormat$Builder.access$4000:(Lorg/apache/commons/csv/CSVFormat$Builder;)Lorg/apache/commons/csv/DuplicateHeaderMode;\n+   #68 = Methodref          #37.#541      // org/apache/commons/csv/CSVFormat.validate:()V\n+   #69 = Methodref          #37.#542      // org/apache/commons/csv/CSVFormat.toStringArray:([Ljava/lang/Object;)[Ljava/lang/String;\n+   #70 = Methodref          #37.#543      // org/apache/commons/csv/CSVFormat.clone:([Ljava/lang/Object;)[Ljava/lang/Object;\n    #71 = Class              #283          // \"[Ljava/lang/String;\"\n-   #72 = Class              #556          // java/lang/StringBuilder\n-   #73 = Methodref          #72.#533      // java/lang/StringBuilder.\"<init>\":()V\n-   #74 = Methodref          #72.#557      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #75 = Methodref          #72.#558      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #76 = Methodref          #72.#559      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #77 = InterfaceMethodref #560.#561     // java/lang/Appendable.append:(C)Ljava/lang/Appendable;\n-   #78 = InterfaceMethodref #560.#562     // java/lang/Appendable.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;\n-   #79 = Methodref          #252.#563     // org/apache/commons/csv/CSVFormat$Builder.create:(Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-   #80 = Methodref          #37.#564      // org/apache/commons/csv/CSVFormat.builder:()Lorg/apache/commons/csv/CSVFormat$Builder;\n-   #81 = Methodref          #252.#565     // org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n-   #82 = Methodref          #103.#566     // java/lang/Object.getClass:()Ljava/lang/Class;\n-   #83 = Methodref          #503.#567     // java/util/Objects.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z\n-   #84 = Methodref          #526.#568     // java/util/Arrays.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z\n-   #85 = Class              #569          // java/io/StringWriter\n-   #86 = Methodref          #85.#533      // java/io/StringWriter.\"<init>\":()V\n-   #87 = Class              #570          // org/apache/commons/csv/CSVPrinter\n-   #88 = Methodref          #87.#571      // org/apache/commons/csv/CSVPrinter.\"<init>\":(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V\n-   #89 = Methodref          #87.#572      // org/apache/commons/csv/CSVPrinter.printRecord:([Ljava/lang/Object;)V\n-   #90 = Methodref          #85.#559      // java/io/StringWriter.toString:()Ljava/lang/String;\n-   #91 = Methodref          #28.#528      // java/lang/String.length:()I\n-   #92 = Methodref          #28.#573      // java/lang/String.substring:(II)Ljava/lang/String;\n-   #93 = Methodref          #87.#574      // org/apache/commons/csv/CSVPrinter.close:()V\n-   #94 = Class              #575          // java/lang/Throwable\n-   #95 = Methodref          #94.#576      // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-   #96 = Class              #577          // java/io/IOException\n-   #97 = Class              #578          // java/lang/IllegalStateException\n-   #98 = Methodref          #97.#579      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n-   #99 = Methodref          #28.#513      // java/lang/String.charAt:(I)C\n-  #100 = Methodref          #580.#500     // \"[Ljava/lang/String;\".clone:()Ljava/lang/Object;\n-  #101 = Methodref          #581.#500     // \"[Ljava/lang/String;\".clone:()Ljava/lang/Object;\n-  #102 = Methodref          #526.#582     // java/util/Arrays.hashCode:([Ljava/lang/Object;)I\n-  #103 = Class              #583          // java/lang/Object\n-  #104 = Methodref          #584.#585     // java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;\n-  #105 = Methodref          #503.#586     // java/util/Objects.hash:([Ljava/lang/Object;)I\n-  #106 = Class              #587          // org/apache/commons/csv/CSVParser\n-  #107 = Methodref          #106.#588     // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n-  #108 = Class              #589          // java/io/OutputStreamWriter\n-  #109 = Class              #590          // java/io/FileOutputStream\n-  #110 = Methodref          #109.#591     // java/io/FileOutputStream.\"<init>\":(Ljava/io/File;)V\n-  #111 = Methodref          #108.#592     // java/io/OutputStreamWriter.\"<init>\":(Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V\n-  #112 = String             #593          //\n-  #113 = Fieldref           #594.#595     // org/apache/commons/csv/QuoteMode.ALL:Lorg/apache/commons/csv/QuoteMode;\n-  #114 = Class              #596          // java/lang/CharSequence\n-  #115 = Class              #597          // java/io/Reader\n-  #116 = Methodref          #37.#598      // org/apache/commons/csv/CSVFormat.print:(Ljava/io/Reader;Ljava/lang/Appendable;Z)V\n-  #117 = Methodref          #103.#559     // java/lang/Object.toString:()Ljava/lang/String;\n-  #118 = Methodref          #37.#599      // org/apache/commons/csv/CSVFormat.getTrim:()Z\n-  #119 = Methodref          #37.#600      // org/apache/commons/csv/CSVFormat.trim:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;\n-  #120 = Methodref          #37.#601      // org/apache/commons/csv/CSVFormat.print:(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n-  #121 = Methodref          #37.#602      // org/apache/commons/csv/CSVFormat.getDelimiterString:()Ljava/lang/String;\n-  #122 = Methodref          #37.#603      // org/apache/commons/csv/CSVFormat.isQuoteCharacterSet:()Z\n-  #123 = Methodref          #37.#604      // org/apache/commons/csv/CSVFormat.printWithQuotes:(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n-  #124 = Methodref          #37.#605      // org/apache/commons/csv/CSVFormat.isEscapeCharacterSet:()Z\n-  #125 = Methodref          #37.#606      // org/apache/commons/csv/CSVFormat.printWithEscapes:(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V\n-  #126 = InterfaceMethodref #560.#607     // java/lang/Appendable.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;\n-  #127 = Class              #608          // java/nio/file/OpenOption\n-  #128 = Methodref          #609.#610     // java/nio/file/Files.newBufferedWriter:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;\n-  #129 = Methodref          #37.#611      // org/apache/commons/csv/CSVFormat.print:(Ljava/lang/Appendable;)Lorg/apache/commons/csv/CSVPrinter;\n-  #130 = Methodref          #37.#612      // org/apache/commons/csv/CSVFormat.append:(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V\n-  #131 = Methodref          #37.#613      // org/apache/commons/csv/CSVFormat.printWithQuotes:(Ljava/io/Reader;Ljava/lang/Appendable;)V\n-  #132 = Methodref          #37.#614      // org/apache/commons/csv/CSVFormat.printWithEscapes:(Ljava/io/Reader;Ljava/lang/Appendable;)V\n-  #133 = Class              #615          // java/io/Writer\n-  #134 = Methodref          #145.#616     // org/apache/commons/csv/IOUtils.copyLarge:(Ljava/io/Reader;Ljava/io/Writer;)J\n-  #135 = Methodref          #145.#617     // org/apache/commons/csv/IOUtils.copy:(Ljava/io/Reader;Ljava/lang/Appendable;)J\n-  #136 = Fieldref           #618.#619     // java/lang/System.out:Ljava/io/PrintStream;\n-  #137 = Methodref          #37.#620      // org/apache/commons/csv/CSVFormat.getTrailingDelimiter:()Z\n-  #138 = Methodref          #37.#621      // org/apache/commons/csv/CSVFormat.print:(Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n-  #139 = Methodref          #37.#622      // org/apache/commons/csv/CSVFormat.println:(Ljava/lang/Appendable;)V\n-  #140 = Methodref          #28.#623      // java/lang/String.toCharArray:()[C\n-  #141 = Methodref          #37.#624      // org/apache/commons/csv/CSVFormat.getEscapeCharacter:()Ljava/lang/Character;\n-  #142 = Methodref          #37.#625      // org/apache/commons/csv/CSVFormat.isDelimiter:(CLjava/lang/CharSequence;I[CI)Z\n-  #143 = Class              #626          // org/apache/commons/csv/ExtendedBufferedReader\n-  #144 = Methodref          #143.#627     // org/apache/commons/csv/ExtendedBufferedReader.\"<init>\":(Ljava/io/Reader;)V\n-  #145 = Class              #628          // org/apache/commons/csv/IOUtils\n-  #146 = Methodref          #72.#629      // java/lang/StringBuilder.\"<init>\":(I)V\n-  #147 = Methodref          #143.#630     // org/apache/commons/csv/ExtendedBufferedReader.read:()I\n-  #148 = Methodref          #72.#631      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n-  #149 = Methodref          #143.#632     // org/apache/commons/csv/ExtendedBufferedReader.lookAhead:(I)[C\n-  #150 = Methodref          #28.#633      // java/lang/String.\"<init>\":([C)V\n-  #151 = Methodref          #72.#573      // java/lang/StringBuilder.substring:(II)Ljava/lang/String;\n-  #152 = Methodref          #72.#634      // java/lang/StringBuilder.setLength:(I)V\n-  #153 = Methodref          #37.#635      // org/apache/commons/csv/CSVFormat.append:(CLjava/lang/Appendable;)V\n-  #154 = Methodref          #37.#636      // org/apache/commons/csv/CSVFormat.getQuoteCharacter:()Ljava/lang/Character;\n-  #155 = Methodref          #37.#637      // org/apache/commons/csv/CSVFormat.getQuoteMode:()Lorg/apache/commons/csv/QuoteMode;\n-  #156 = Fieldref           #594.#638     // org/apache/commons/csv/QuoteMode.MINIMAL:Lorg/apache/commons/csv/QuoteMode;\n-  #157 = Fieldref           #248.#639     // org/apache/commons/csv/CSVFormat$1.$SwitchMap$org$apache$commons$csv$QuoteMode:[I\n-  #158 = Methodref          #594.#640     // org/apache/commons/csv/QuoteMode.ordinal:()I\n-  #159 = Class              #641          // java/lang/Number\n-  #160 = String             #642          // Unexpected Quote value:\n-  #161 = Methodref          #97.#643      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-  #162 = Fieldref           #594.#644     // org/apache/commons/csv/QuoteMode.NONE:Lorg/apache/commons/csv/QuoteMode;\n-  #163 = Methodref          #115.#630     // java/io/Reader.read:()I\n-  #164 = String             #645          // Delimiter=<\n-  #165 = String             #646          // Escape=<\n-  #166 = String             #647          // QuoteChar=<\n-  #167 = String             #648          // QuoteMode=<\n-  #168 = Methodref          #37.#649      // org/apache/commons/csv/CSVFormat.isCommentMarkerSet:()Z\n-  #169 = String             #650          // CommentStart=<\n-  #170 = Methodref          #37.#651      // org/apache/commons/csv/CSVFormat.isNullStringSet:()Z\n-  #171 = String             #652          // NullString=<\n-  #172 = String             #653          // RecordSeparator=<\n-  #173 = Methodref          #37.#654      // org/apache/commons/csv/CSVFormat.getIgnoreEmptyLines:()Z\n-  #174 = String             #655          //  EmptyLines:ignored\n-  #175 = Methodref          #37.#656      // org/apache/commons/csv/CSVFormat.getIgnoreSurroundingSpaces:()Z\n-  #176 = String             #657          //  SurroundingSpaces:ignored\n-  #177 = Methodref          #37.#658      // org/apache/commons/csv/CSVFormat.getIgnoreHeaderCase:()Z\n-  #178 = String             #659          //  IgnoreHeaderCase:ignored\n-  #179 = String             #660          //  SkipHeaderRecord:\n-  #180 = Methodref          #72.#661      // java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;\n-  #181 = String             #662          // HeaderComments:\n-  #182 = Methodref          #526.#663     // java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;\n-  #183 = String             #664          // Header:\n-  #184 = Class              #665          // java/lang/IllegalArgumentException\n-  #185 = String             #666          // The delimiter cannot be a line break\n-  #186 = Methodref          #184.#643     // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-  #187 = String             #667          // The quoteChar character and the delimiter cannot be the same (\\'\n-  #188 = String             #668          // \\')\n-  #189 = String             #669          // The escape character and the delimiter cannot be the same (\\'\n-  #190 = String             #670          // The comment start character and the delimiter cannot be the same (\\'\n-  #191 = Methodref          #510.#671     // java/lang/Character.equals:(Ljava/lang/Object;)Z\n-  #192 = String             #672          // The comment start character and the quoteChar cannot be the same (\\'\n-  #193 = String             #673          // The comment start and the escape character cannot be the same (\\'\n-  #194 = String             #674          // No quotes mode set but no escape character is set\n-  #195 = Class              #675          // java/util/HashSet\n-  #196 = Methodref          #195.#629     // java/util/HashSet.\"<init>\":(I)V\n-  #197 = Fieldref           #517.#676     // org/apache/commons/csv/DuplicateHeaderMode.ALLOW_EMPTY:Lorg/apache/commons/csv/DuplicateHeaderMode;\n-  #198 = Methodref          #37.#677      // org/apache/commons/csv/CSVFormat.isBlank:(Ljava/lang/String;)Z\n-  #199 = InterfaceMethodref #678.#679     // java/util/Set.add:(Ljava/lang/Object;)Z\n-  #200 = String             #680          // The header contains a duplicate name: \\\"%s\\\" in %s. If this is valid then use CSVFormat.Builder.setDuplicateHeaderMode().\n-  #201 = Methodref          #28.#681      // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #202 = Methodref          #252.#682     // org/apache/commons/csv/CSVFormat$Builder.setDuplicateHeaderMode:(Lorg/apache/commons/csv/DuplicateHeaderMode;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #203 = Methodref          #252.#683     // org/apache/commons/csv/CSVFormat$Builder.setAllowMissingColumnNames:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #204 = Methodref          #252.#684     // org/apache/commons/csv/CSVFormat$Builder.setAutoFlush:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #205 = Methodref          #252.#685     // org/apache/commons/csv/CSVFormat$Builder.setCommentMarker:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #206 = Methodref          #252.#686     // org/apache/commons/csv/CSVFormat$Builder.setCommentMarker:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #207 = Methodref          #252.#687     // org/apache/commons/csv/CSVFormat$Builder.setDelimiter:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #208 = Methodref          #252.#688     // org/apache/commons/csv/CSVFormat$Builder.setEscape:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #209 = Methodref          #252.#689     // org/apache/commons/csv/CSVFormat$Builder.setEscape:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #210 = Methodref          #252.#690     // org/apache/commons/csv/CSVFormat$Builder.setHeader:([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #211 = Methodref          #252.#691     // org/apache/commons/csv/CSVFormat$Builder.setSkipHeaderRecord:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #212 = Methodref          #252.#692     // org/apache/commons/csv/CSVFormat$Builder.setHeader:(Ljava/lang/Class;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #213 = Methodref          #252.#693     // org/apache/commons/csv/CSVFormat$Builder.setHeader:(Ljava/sql/ResultSet;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #214 = Methodref          #252.#694     // org/apache/commons/csv/CSVFormat$Builder.setHeader:(Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #215 = Methodref          #252.#695     // org/apache/commons/csv/CSVFormat$Builder.setHeaderComments:([Ljava/lang/Object;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #216 = Methodref          #252.#696     // org/apache/commons/csv/CSVFormat$Builder.setIgnoreEmptyLines:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #217 = Methodref          #252.#697     // org/apache/commons/csv/CSVFormat$Builder.setIgnoreHeaderCase:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #218 = Methodref          #252.#698     // org/apache/commons/csv/CSVFormat$Builder.setIgnoreSurroundingSpaces:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #219 = Methodref          #252.#699     // org/apache/commons/csv/CSVFormat$Builder.setNullString:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #220 = Methodref          #252.#700     // org/apache/commons/csv/CSVFormat$Builder.setQuote:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #221 = Methodref          #252.#701     // org/apache/commons/csv/CSVFormat$Builder.setQuote:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #222 = Methodref          #252.#702     // org/apache/commons/csv/CSVFormat$Builder.setQuoteMode:(Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #223 = Methodref          #252.#703     // org/apache/commons/csv/CSVFormat$Builder.setRecordSeparator:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #224 = Methodref          #252.#704     // org/apache/commons/csv/CSVFormat$Builder.setRecordSeparator:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #225 = Methodref          #618.#705     // java/lang/System.lineSeparator:()Ljava/lang/String;\n-  #226 = Methodref          #252.#706     // org/apache/commons/csv/CSVFormat$Builder.setTrailingDelimiter:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #227 = Methodref          #252.#707     // org/apache/commons/csv/CSVFormat$Builder.setTrim:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #228 = Methodref          #503.#708     // java/util/Objects.toString:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n-  #229 = String             #709          // ,\n-  #230 = Fieldref           #1.#710       // org/apache/commons/csv/Constants.DOUBLE_QUOTE_CHAR:Ljava/lang/Character;\n-  #231 = String             #711          // \\r\\n\n-  #232 = Fieldref           #37.#712      // org/apache/commons/csv/CSVFormat.DEFAULT:Lorg/apache/commons/csv/CSVFormat;\n-  #233 = Fieldref           #37.#713      // org/apache/commons/csv/CSVFormat.EXCEL:Lorg/apache/commons/csv/CSVFormat;\n-  #234 = Fieldref           #37.#714      // org/apache/commons/csv/CSVFormat.INFORMIX_UNLOAD:Lorg/apache/commons/csv/CSVFormat;\n-  #235 = Methodref          #252.#715     // org/apache/commons/csv/CSVFormat$Builder.setDelimiter:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #236 = Fieldref           #37.#716      // org/apache/commons/csv/CSVFormat.INFORMIX_UNLOAD_CSV:Lorg/apache/commons/csv/CSVFormat;\n-  #237 = Fieldref           #37.#717      // org/apache/commons/csv/CSVFormat.MONGODB_CSV:Lorg/apache/commons/csv/CSVFormat;\n-  #238 = Fieldref           #37.#718      // org/apache/commons/csv/CSVFormat.MONGODB_TSV:Lorg/apache/commons/csv/CSVFormat;\n-  #239 = String             #719          // \\\\N\n-  #240 = Fieldref           #594.#720     // org/apache/commons/csv/QuoteMode.ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n-  #241 = Fieldref           #37.#721      // org/apache/commons/csv/CSVFormat.MYSQL:Lorg/apache/commons/csv/CSVFormat;\n-  #242 = Fieldref           #37.#722      // org/apache/commons/csv/CSVFormat.ORACLE:Lorg/apache/commons/csv/CSVFormat;\n-  #243 = Fieldref           #37.#723      // org/apache/commons/csv/CSVFormat.POSTGRESQL_CSV:Lorg/apache/commons/csv/CSVFormat;\n-  #244 = Fieldref           #37.#724      // org/apache/commons/csv/CSVFormat.POSTGRESQL_TEXT:Lorg/apache/commons/csv/CSVFormat;\n-  #245 = Fieldref           #37.#725      // org/apache/commons/csv/CSVFormat.RFC4180:Lorg/apache/commons/csv/CSVFormat;\n-  #246 = Fieldref           #37.#726      // org/apache/commons/csv/CSVFormat.TDF:Lorg/apache/commons/csv/CSVFormat;\n-  #247 = Class              #727          // java/io/Serializable\n-  #248 = Class              #728          // org/apache/commons/csv/CSVFormat$1\n+   #72 = Class              #544          // java/lang/StringBuilder\n+   #73 = Methodref          #72.#521      // java/lang/StringBuilder.\"<init>\":()V\n+   #74 = Methodref          #72.#545      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #75 = Methodref          #72.#546      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #76 = Methodref          #72.#547      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #77 = InterfaceMethodref #390.#548     // java/lang/Appendable.append:(C)Ljava/lang/Appendable;\n+   #78 = InterfaceMethodref #390.#549     // java/lang/Appendable.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;\n+   #79 = Methodref          #252.#550     // org/apache/commons/csv/CSVFormat$Builder.create:(Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+   #80 = Methodref          #37.#551      // org/apache/commons/csv/CSVFormat.builder:()Lorg/apache/commons/csv/CSVFormat$Builder;\n+   #81 = Methodref          #252.#552     // org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n+   #82 = Methodref          #103.#553     // java/lang/Object.getClass:()Ljava/lang/Class;\n+   #83 = Methodref          #492.#554     // java/util/Objects.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+   #84 = Methodref          #514.#555     // java/util/Arrays.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z\n+   #85 = Class              #556          // java/io/StringWriter\n+   #86 = Methodref          #85.#521      // java/io/StringWriter.\"<init>\":()V\n+   #87 = Class              #557          // org/apache/commons/csv/CSVPrinter\n+   #88 = Methodref          #87.#558      // org/apache/commons/csv/CSVPrinter.\"<init>\":(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V\n+   #89 = Methodref          #87.#559      // org/apache/commons/csv/CSVPrinter.printRecord:([Ljava/lang/Object;)V\n+   #90 = Methodref          #85.#547      // java/io/StringWriter.toString:()Ljava/lang/String;\n+   #91 = Methodref          #28.#516      // java/lang/String.length:()I\n+   #92 = Methodref          #28.#560      // java/lang/String.substring:(II)Ljava/lang/String;\n+   #93 = Methodref          #87.#561      // org/apache/commons/csv/CSVPrinter.close:()V\n+   #94 = Class              #562          // java/lang/Throwable\n+   #95 = Methodref          #94.#563      // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+   #96 = Class              #564          // java/io/IOException\n+   #97 = Class              #565          // java/lang/IllegalStateException\n+   #98 = Methodref          #97.#566      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n+   #99 = Methodref          #28.#502      // java/lang/String.charAt:(I)C\n+  #100 = Methodref          #567.#489     // \"[Ljava/lang/String;\".clone:()Ljava/lang/Object;\n+  #101 = Methodref          #568.#489     // \"[Ljava/lang/String;\".clone:()Ljava/lang/Object;\n+  #102 = Methodref          #514.#569     // java/util/Arrays.hashCode:([Ljava/lang/Object;)I\n+  #103 = Class              #570          // java/lang/Object\n+  #104 = Methodref          #571.#572     // java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;\n+  #105 = Methodref          #492.#573     // java/util/Objects.hash:([Ljava/lang/Object;)I\n+  #106 = Class              #574          // org/apache/commons/csv/CSVParser\n+  #107 = Methodref          #106.#575     // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n+  #108 = Class              #576          // java/io/OutputStreamWriter\n+  #109 = Class              #577          // java/io/FileOutputStream\n+  #110 = Methodref          #109.#578     // java/io/FileOutputStream.\"<init>\":(Ljava/io/File;)V\n+  #111 = Methodref          #108.#579     // java/io/OutputStreamWriter.\"<init>\":(Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V\n+  #112 = String             #580          //\n+  #113 = Fieldref           #395.#581     // org/apache/commons/csv/QuoteMode.ALL:Lorg/apache/commons/csv/QuoteMode;\n+  #114 = Class              #582          // java/lang/CharSequence\n+  #115 = Class              #583          // java/io/Reader\n+  #116 = Methodref          #37.#584      // org/apache/commons/csv/CSVFormat.print:(Ljava/io/Reader;Ljava/lang/Appendable;Z)V\n+  #117 = Methodref          #103.#547     // java/lang/Object.toString:()Ljava/lang/String;\n+  #118 = Methodref          #37.#585      // org/apache/commons/csv/CSVFormat.getTrim:()Z\n+  #119 = Methodref          #37.#586      // org/apache/commons/csv/CSVFormat.trim:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;\n+  #120 = Methodref          #37.#587      // org/apache/commons/csv/CSVFormat.print:(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n+  #121 = Methodref          #37.#588      // org/apache/commons/csv/CSVFormat.getDelimiterString:()Ljava/lang/String;\n+  #122 = Methodref          #37.#589      // org/apache/commons/csv/CSVFormat.isQuoteCharacterSet:()Z\n+  #123 = Methodref          #37.#590      // org/apache/commons/csv/CSVFormat.printWithQuotes:(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n+  #124 = Methodref          #37.#591      // org/apache/commons/csv/CSVFormat.isEscapeCharacterSet:()Z\n+  #125 = Methodref          #37.#592      // org/apache/commons/csv/CSVFormat.printWithEscapes:(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V\n+  #126 = InterfaceMethodref #390.#593     // java/lang/Appendable.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;\n+  #127 = Class              #594          // java/nio/file/OpenOption\n+  #128 = Methodref          #595.#596     // java/nio/file/Files.newBufferedWriter:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;\n+  #129 = Methodref          #37.#597      // org/apache/commons/csv/CSVFormat.print:(Ljava/lang/Appendable;)Lorg/apache/commons/csv/CSVPrinter;\n+  #130 = Methodref          #37.#598      // org/apache/commons/csv/CSVFormat.append:(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V\n+  #131 = Methodref          #37.#599      // org/apache/commons/csv/CSVFormat.printWithQuotes:(Ljava/io/Reader;Ljava/lang/Appendable;)V\n+  #132 = Methodref          #37.#600      // org/apache/commons/csv/CSVFormat.printWithEscapes:(Ljava/io/Reader;Ljava/lang/Appendable;)V\n+  #133 = Class              #601          // java/io/Writer\n+  #134 = Methodref          #145.#602     // org/apache/commons/csv/IOUtils.copyLarge:(Ljava/io/Reader;Ljava/io/Writer;)J\n+  #135 = Methodref          #145.#603     // org/apache/commons/csv/IOUtils.copy:(Ljava/io/Reader;Ljava/lang/Appendable;)J\n+  #136 = Fieldref           #604.#605     // java/lang/System.out:Ljava/io/PrintStream;\n+  #137 = Methodref          #37.#606      // org/apache/commons/csv/CSVFormat.getTrailingDelimiter:()Z\n+  #138 = Methodref          #37.#607      // org/apache/commons/csv/CSVFormat.print:(Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n+  #139 = Methodref          #37.#608      // org/apache/commons/csv/CSVFormat.println:(Ljava/lang/Appendable;)V\n+  #140 = Methodref          #28.#609      // java/lang/String.toCharArray:()[C\n+  #141 = Methodref          #37.#610      // org/apache/commons/csv/CSVFormat.getEscapeCharacter:()Ljava/lang/Character;\n+  #142 = Methodref          #37.#611      // org/apache/commons/csv/CSVFormat.isDelimiter:(CLjava/lang/CharSequence;I[CI)Z\n+  #143 = Class              #612          // org/apache/commons/csv/ExtendedBufferedReader\n+  #144 = Methodref          #143.#613     // org/apache/commons/csv/ExtendedBufferedReader.\"<init>\":(Ljava/io/Reader;)V\n+  #145 = Class              #614          // org/apache/commons/csv/IOUtils\n+  #146 = Methodref          #72.#615      // java/lang/StringBuilder.\"<init>\":(I)V\n+  #147 = Methodref          #143.#616     // org/apache/commons/csv/ExtendedBufferedReader.read:()I\n+  #148 = Methodref          #72.#617      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+  #149 = Methodref          #143.#618     // org/apache/commons/csv/ExtendedBufferedReader.lookAhead:(I)[C\n+  #150 = Methodref          #28.#619      // java/lang/String.\"<init>\":([C)V\n+  #151 = Methodref          #72.#560      // java/lang/StringBuilder.substring:(II)Ljava/lang/String;\n+  #152 = Methodref          #72.#620      // java/lang/StringBuilder.setLength:(I)V\n+  #153 = Methodref          #37.#621      // org/apache/commons/csv/CSVFormat.append:(CLjava/lang/Appendable;)V\n+  #154 = Methodref          #37.#622      // org/apache/commons/csv/CSVFormat.getQuoteCharacter:()Ljava/lang/Character;\n+  #155 = Methodref          #37.#623      // org/apache/commons/csv/CSVFormat.getQuoteMode:()Lorg/apache/commons/csv/QuoteMode;\n+  #156 = Fieldref           #395.#624     // org/apache/commons/csv/QuoteMode.MINIMAL:Lorg/apache/commons/csv/QuoteMode;\n+  #157 = Fieldref           #248.#625     // org/apache/commons/csv/CSVFormat$1.$SwitchMap$org$apache$commons$csv$QuoteMode:[I\n+  #158 = Methodref          #395.#626     // org/apache/commons/csv/QuoteMode.ordinal:()I\n+  #159 = Class              #627          // java/lang/Number\n+  #160 = String             #628          // Unexpected Quote value:\n+  #161 = Methodref          #97.#629      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+  #162 = Fieldref           #395.#630     // org/apache/commons/csv/QuoteMode.NONE:Lorg/apache/commons/csv/QuoteMode;\n+  #163 = Methodref          #115.#616     // java/io/Reader.read:()I\n+  #164 = String             #631          // Delimiter=<\n+  #165 = String             #632          // Escape=<\n+  #166 = String             #633          // QuoteChar=<\n+  #167 = String             #634          // QuoteMode=<\n+  #168 = Methodref          #37.#635      // org/apache/commons/csv/CSVFormat.isCommentMarkerSet:()Z\n+  #169 = String             #636          // CommentStart=<\n+  #170 = Methodref          #37.#637      // org/apache/commons/csv/CSVFormat.isNullStringSet:()Z\n+  #171 = String             #638          // NullString=<\n+  #172 = String             #639          // RecordSeparator=<\n+  #173 = Methodref          #37.#640      // org/apache/commons/csv/CSVFormat.getIgnoreEmptyLines:()Z\n+  #174 = String             #641          //  EmptyLines:ignored\n+  #175 = Methodref          #37.#642      // org/apache/commons/csv/CSVFormat.getIgnoreSurroundingSpaces:()Z\n+  #176 = String             #643          //  SurroundingSpaces:ignored\n+  #177 = Methodref          #37.#644      // org/apache/commons/csv/CSVFormat.getIgnoreHeaderCase:()Z\n+  #178 = String             #645          //  IgnoreHeaderCase:ignored\n+  #179 = String             #646          //  SkipHeaderRecord:\n+  #180 = Methodref          #72.#647      // java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;\n+  #181 = String             #648          // HeaderComments:\n+  #182 = Methodref          #514.#649     // java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;\n+  #183 = String             #650          // Header:\n+  #184 = Class              #651          // java/lang/IllegalArgumentException\n+  #185 = String             #652          // The delimiter cannot be a line break\n+  #186 = Methodref          #184.#629     // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+  #187 = String             #653          // The quoteChar character and the delimiter cannot be the same (\\'\n+  #188 = String             #654          // \\')\n+  #189 = String             #655          // The escape character and the delimiter cannot be the same (\\'\n+  #190 = String             #656          // The comment start character and the delimiter cannot be the same (\\'\n+  #191 = Methodref          #499.#657     // java/lang/Character.equals:(Ljava/lang/Object;)Z\n+  #192 = String             #658          // The comment start character and the quoteChar cannot be the same (\\'\n+  #193 = String             #659          // The comment start and the escape character cannot be the same (\\'\n+  #194 = String             #660          // No quotes mode set but no escape character is set\n+  #195 = Class              #661          // java/util/HashSet\n+  #196 = Methodref          #195.#615     // java/util/HashSet.\"<init>\":(I)V\n+  #197 = Fieldref           #403.#662     // org/apache/commons/csv/DuplicateHeaderMode.ALLOW_EMPTY:Lorg/apache/commons/csv/DuplicateHeaderMode;\n+  #198 = Methodref          #37.#663      // org/apache/commons/csv/CSVFormat.isBlank:(Ljava/lang/String;)Z\n+  #199 = InterfaceMethodref #400.#664     // java/util/Set.add:(Ljava/lang/Object;)Z\n+  #200 = String             #665          // The header contains a duplicate name: \\\"%s\\\" in %s. If this is valid then use CSVFormat.Builder.setDuplicateHeaderMode().\n+  #201 = Methodref          #28.#666      // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #202 = Methodref          #252.#667     // org/apache/commons/csv/CSVFormat$Builder.setDuplicateHeaderMode:(Lorg/apache/commons/csv/DuplicateHeaderMode;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #203 = Methodref          #252.#668     // org/apache/commons/csv/CSVFormat$Builder.setAllowMissingColumnNames:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #204 = Methodref          #252.#669     // org/apache/commons/csv/CSVFormat$Builder.setAutoFlush:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #205 = Methodref          #252.#670     // org/apache/commons/csv/CSVFormat$Builder.setCommentMarker:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #206 = Methodref          #252.#671     // org/apache/commons/csv/CSVFormat$Builder.setCommentMarker:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #207 = Methodref          #252.#672     // org/apache/commons/csv/CSVFormat$Builder.setDelimiter:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #208 = Methodref          #252.#673     // org/apache/commons/csv/CSVFormat$Builder.setEscape:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #209 = Methodref          #252.#674     // org/apache/commons/csv/CSVFormat$Builder.setEscape:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #210 = Methodref          #252.#675     // org/apache/commons/csv/CSVFormat$Builder.setHeader:([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #211 = Methodref          #252.#676     // org/apache/commons/csv/CSVFormat$Builder.setSkipHeaderRecord:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #212 = Methodref          #252.#677     // org/apache/commons/csv/CSVFormat$Builder.setHeader:(Ljava/lang/Class;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #213 = Methodref          #252.#678     // org/apache/commons/csv/CSVFormat$Builder.setHeader:(Ljava/sql/ResultSet;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #214 = Methodref          #252.#679     // org/apache/commons/csv/CSVFormat$Builder.setHeader:(Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #215 = Methodref          #252.#680     // org/apache/commons/csv/CSVFormat$Builder.setHeaderComments:([Ljava/lang/Object;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #216 = Methodref          #252.#681     // org/apache/commons/csv/CSVFormat$Builder.setIgnoreEmptyLines:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #217 = Methodref          #252.#682     // org/apache/commons/csv/CSVFormat$Builder.setIgnoreHeaderCase:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #218 = Methodref          #252.#683     // org/apache/commons/csv/CSVFormat$Builder.setIgnoreSurroundingSpaces:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #219 = Methodref          #252.#684     // org/apache/commons/csv/CSVFormat$Builder.setNullString:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #220 = Methodref          #252.#685     // org/apache/commons/csv/CSVFormat$Builder.setQuote:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #221 = Methodref          #252.#686     // org/apache/commons/csv/CSVFormat$Builder.setQuote:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #222 = Methodref          #252.#687     // org/apache/commons/csv/CSVFormat$Builder.setQuoteMode:(Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #223 = Methodref          #252.#688     // org/apache/commons/csv/CSVFormat$Builder.setRecordSeparator:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #224 = Methodref          #252.#689     // org/apache/commons/csv/CSVFormat$Builder.setRecordSeparator:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #225 = Methodref          #604.#690     // java/lang/System.lineSeparator:()Ljava/lang/String;\n+  #226 = Methodref          #252.#691     // org/apache/commons/csv/CSVFormat$Builder.setTrailingDelimiter:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #227 = Methodref          #252.#692     // org/apache/commons/csv/CSVFormat$Builder.setTrim:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #228 = Methodref          #492.#693     // java/util/Objects.toString:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n+  #229 = String             #694          // ,\n+  #230 = Fieldref           #1.#695       // org/apache/commons/csv/Constants.DOUBLE_QUOTE_CHAR:Ljava/lang/Character;\n+  #231 = String             #696          // \\r\\n\n+  #232 = Fieldref           #37.#697      // org/apache/commons/csv/CSVFormat.DEFAULT:Lorg/apache/commons/csv/CSVFormat;\n+  #233 = Fieldref           #37.#698      // org/apache/commons/csv/CSVFormat.EXCEL:Lorg/apache/commons/csv/CSVFormat;\n+  #234 = Fieldref           #37.#699      // org/apache/commons/csv/CSVFormat.INFORMIX_UNLOAD:Lorg/apache/commons/csv/CSVFormat;\n+  #235 = Methodref          #252.#700     // org/apache/commons/csv/CSVFormat$Builder.setDelimiter:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #236 = Fieldref           #37.#701      // org/apache/commons/csv/CSVFormat.INFORMIX_UNLOAD_CSV:Lorg/apache/commons/csv/CSVFormat;\n+  #237 = Fieldref           #37.#702      // org/apache/commons/csv/CSVFormat.MONGODB_CSV:Lorg/apache/commons/csv/CSVFormat;\n+  #238 = Fieldref           #37.#703      // org/apache/commons/csv/CSVFormat.MONGODB_TSV:Lorg/apache/commons/csv/CSVFormat;\n+  #239 = String             #704          // \\\\N\n+  #240 = Fieldref           #395.#705     // org/apache/commons/csv/QuoteMode.ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n+  #241 = Fieldref           #37.#706      // org/apache/commons/csv/CSVFormat.MYSQL:Lorg/apache/commons/csv/CSVFormat;\n+  #242 = Fieldref           #37.#707      // org/apache/commons/csv/CSVFormat.ORACLE:Lorg/apache/commons/csv/CSVFormat;\n+  #243 = Fieldref           #37.#708      // org/apache/commons/csv/CSVFormat.POSTGRESQL_CSV:Lorg/apache/commons/csv/CSVFormat;\n+  #244 = Fieldref           #37.#709      // org/apache/commons/csv/CSVFormat.POSTGRESQL_TEXT:Lorg/apache/commons/csv/CSVFormat;\n+  #245 = Fieldref           #37.#710      // org/apache/commons/csv/CSVFormat.RFC4180:Lorg/apache/commons/csv/CSVFormat;\n+  #246 = Fieldref           #37.#711      // org/apache/commons/csv/CSVFormat.TDF:Lorg/apache/commons/csv/CSVFormat;\n+  #247 = Class              #712          // java/io/Serializable\n+  #248 = Class              #713          // org/apache/commons/csv/CSVFormat$1\n   #249 = Utf8               InnerClasses\n-  #250 = Class              #729          // org/apache/commons/csv/CSVFormat$Predefined\n+  #250 = Class              #714          // org/apache/commons/csv/CSVFormat$Predefined\n   #251 = Utf8               Predefined\n-  #252 = Class              #730          // org/apache/commons/csv/CSVFormat$Builder\n+  #252 = Class              #715          // org/apache/commons/csv/CSVFormat$Builder\n   #253 = Utf8               Builder\n   #254 = Utf8               DEFAULT\n   #255 = Utf8               Lorg/apache/commons/csv/CSVFormat;\n   #256 = Utf8               EXCEL\n   #257 = Utf8               INFORMIX_UNLOAD\n   #258 = Utf8               INFORMIX_UNLOAD_CSV\n   #259 = Utf8               MONGODB_CSV\n@@ -323,582 +323,567 @@\n   #314 = Utf8               isTrimChar\n   #315 = Utf8               (Ljava/lang/CharSequence;I)Z\n   #316 = Utf8               newFormat\n   #317 = Utf8               (C)Lorg/apache/commons/csv/CSVFormat;\n   #318 = Utf8               toStringArray\n   #319 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/String;\n   #320 = Utf8               (Ljava/lang/CharSequence;)Ljava/lang/CharSequence;\n-  #321 = Class              #596          // java/lang/CharSequence\n-  #322 = Utf8               valueOf\n-  #323 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n-  #324 = Utf8               <init>\n-  #325 = Utf8               (Lorg/apache/commons/csv/CSVFormat$Builder;)V\n-  #326 = Utf8               (Ljava/lang/String;Ljava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZZLorg/apache/commons/csv/DuplicateHeaderMode;)V\n-  #327 = Utf8               append\n-  #328 = Utf8               (CLjava/lang/Appendable;)V\n-  #329 = Utf8               Exceptions\n-  #330 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/Appendable;)V\n-  #331 = Utf8               builder\n-  #332 = Utf8               ()Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #333 = Utf8               copy\n-  #334 = Utf8               ()Lorg/apache/commons/csv/CSVFormat;\n-  #335 = Utf8               equals\n-  #336 = Utf8               (Ljava/lang/Object;)Z\n-  #337 = Class              #515          // org/apache/commons/csv/CSVFormat\n-  #338 = Utf8               format\n-  #339 = Utf8               ([Ljava/lang/Object;)Ljava/lang/String;\n-  #340 = Class              #569          // java/io/StringWriter\n-  #341 = Class              #570          // org/apache/commons/csv/CSVPrinter\n-  #342 = Class              #575          // java/lang/Throwable\n-  #343 = Class              #505          // java/lang/String\n-  #344 = Class              #577          // java/io/IOException\n-  #345 = Utf8               getAllowDuplicateHeaderNames\n-  #346 = Utf8               ()Z\n-  #347 = Utf8               Deprecated\n-  #348 = Utf8               Ljava/lang/Deprecated;\n-  #349 = Utf8               getAllowMissingColumnNames\n-  #350 = Utf8               getAutoFlush\n-  #351 = Utf8               getCommentMarker\n-  #352 = Utf8               ()Ljava/lang/Character;\n-  #353 = Utf8               getDelimiter\n-  #354 = Utf8               ()C\n-  #355 = Utf8               getDelimiterString\n-  #356 = Utf8               ()Ljava/lang/String;\n-  #357 = Utf8               getDuplicateHeaderMode\n-  #358 = Utf8               ()Lorg/apache/commons/csv/DuplicateHeaderMode;\n-  #359 = Utf8               getEscapeCharacter\n-  #360 = Utf8               getHeader\n-  #361 = Utf8               ()[Ljava/lang/String;\n-  #362 = Utf8               getHeaderComments\n-  #363 = Utf8               getIgnoreEmptyLines\n-  #364 = Utf8               getIgnoreHeaderCase\n-  #365 = Utf8               getIgnoreSurroundingSpaces\n-  #366 = Utf8               getNullString\n-  #367 = Utf8               getQuoteCharacter\n-  #368 = Utf8               getQuoteMode\n-  #369 = Utf8               ()Lorg/apache/commons/csv/QuoteMode;\n-  #370 = Utf8               getRecordSeparator\n-  #371 = Utf8               getSkipHeaderRecord\n-  #372 = Utf8               getTrailingDelimiter\n-  #373 = Utf8               getTrim\n-  #374 = Utf8               hashCode\n-  #375 = Utf8               ()I\n-  #376 = Utf8               isCommentMarkerSet\n-  #377 = Utf8               isDelimiter\n-  #378 = Utf8               (CLjava/lang/CharSequence;I[CI)Z\n-  #379 = Utf8               isEscapeCharacterSet\n-  #380 = Utf8               isNullStringSet\n-  #381 = Utf8               isQuoteCharacterSet\n-  #382 = Utf8               parse\n-  #383 = Utf8               (Ljava/io/Reader;)Lorg/apache/commons/csv/CSVParser;\n-  #384 = Utf8               print\n-  #385 = Utf8               (Ljava/lang/Appendable;)Lorg/apache/commons/csv/CSVPrinter;\n-  #386 = Utf8               (Ljava/io/File;Ljava/nio/charset/Charset;)Lorg/apache/commons/csv/CSVPrinter;\n-  #387 = Utf8               (Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n-  #388 = Utf8               (Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n-  #389 = Utf8               (Ljava/nio/file/Path;Ljava/nio/charset/Charset;)Lorg/apache/commons/csv/CSVPrinter;\n-  #390 = Utf8               (Ljava/io/Reader;Ljava/lang/Appendable;Z)V\n-  #391 = Utf8               printer\n-  #392 = Utf8               ()Lorg/apache/commons/csv/CSVPrinter;\n-  #393 = Utf8               println\n-  #394 = Utf8               (Ljava/lang/Appendable;)V\n-  #395 = Utf8               printRecord\n-  #396 = Utf8               (Ljava/lang/Appendable;[Ljava/lang/Object;)V\n-  #397 = Class              #731          // java/lang/Appendable\n-  #398 = Class              #583          // java/lang/Object\n-  #399 = Utf8               printWithEscapes\n-  #400 = Class              #732          // \"[C\"\n-  #401 = Utf8               (Ljava/io/Reader;Ljava/lang/Appendable;)V\n-  #402 = Class              #597          // java/io/Reader\n-  #403 = Class              #626          // org/apache/commons/csv/ExtendedBufferedReader\n-  #404 = Class              #556          // java/lang/StringBuilder\n-  #405 = Utf8               printWithQuotes\n-  #406 = Class              #733          // org/apache/commons/csv/QuoteMode\n-  #407 = Utf8               toString\n-  #408 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #409 = Utf8               validate\n-  #410 = Utf8               ()V\n-  #411 = Class              #734          // java/util/Set\n-  #412 = Utf8               withAllowDuplicateHeaderNames\n-  #413 = Utf8               (Z)Lorg/apache/commons/csv/CSVFormat;\n-  #414 = Class              #735          // org/apache/commons/csv/DuplicateHeaderMode\n-  #415 = Utf8               withAllowMissingColumnNames\n-  #416 = Utf8               withAutoFlush\n-  #417 = Utf8               withCommentMarker\n-  #418 = Utf8               (Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n-  #419 = Utf8               withDelimiter\n-  #420 = Utf8               withEscape\n-  #421 = Utf8               withFirstRecordAsHeader\n-  #422 = Utf8               withHeader\n-  #423 = Utf8               (Ljava/lang/Class;)Lorg/apache/commons/csv/CSVFormat;\n-  #424 = Utf8               (Ljava/lang/Class<+Ljava/lang/Enum<*>;>;)Lorg/apache/commons/csv/CSVFormat;\n-  #425 = Utf8               (Ljava/sql/ResultSet;)Lorg/apache/commons/csv/CSVFormat;\n-  #426 = Class              #736          // java/sql/SQLException\n-  #427 = Utf8               (Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat;\n-  #428 = Utf8               ([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n-  #429 = Utf8               withHeaderComments\n-  #430 = Utf8               ([Ljava/lang/Object;)Lorg/apache/commons/csv/CSVFormat;\n-  #431 = Utf8               withIgnoreEmptyLines\n-  #432 = Utf8               withIgnoreHeaderCase\n-  #433 = Utf8               withIgnoreSurroundingSpaces\n-  #434 = Utf8               withNullString\n-  #435 = Utf8               withQuote\n-  #436 = Utf8               withQuoteMode\n-  #437 = Utf8               (Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat;\n-  #438 = Utf8               withRecordSeparator\n-  #439 = Utf8               withSkipHeaderRecord\n-  #440 = Utf8               withSystemRecordSeparator\n-  #441 = Utf8               withTrailingDelimiter\n-  #442 = Utf8               withTrim\n-  #443 = Utf8               lambda$toStringArray$0\n-  #444 = Utf8               ([Ljava/lang/Object;I)Ljava/lang/String;\n-  #445 = Utf8               access$000\n-  #446 = Utf8               (Lorg/apache/commons/csv/CSVFormat;)Ljava/lang/String;\n-  #447 = Utf8               access$100\n-  #448 = Utf8               (Lorg/apache/commons/csv/CSVFormat;)Ljava/lang/Character;\n-  #449 = Utf8               access$200\n-  #450 = Utf8               (Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/QuoteMode;\n-  #451 = Utf8               access$300\n-  #452 = Utf8               access$400\n-  #453 = Utf8               access$500\n-  #454 = Utf8               (Lorg/apache/commons/csv/CSVFormat;)Z\n-  #455 = Utf8               access$600\n-  #456 = Utf8               access$700\n-  #457 = Utf8               access$800\n-  #458 = Utf8               access$900\n-  #459 = Utf8               access$1000\n-  #460 = Utf8               (Lorg/apache/commons/csv/CSVFormat;)[Ljava/lang/String;\n-  #461 = Utf8               access$1100\n-  #462 = Utf8               access$1200\n-  #463 = Utf8               access$1300\n-  #464 = Utf8               access$1400\n-  #465 = Utf8               access$1500\n-  #466 = Utf8               access$1600\n-  #467 = Utf8               access$1700\n-  #468 = Utf8               access$1800\n-  #469 = Utf8               (Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/DuplicateHeaderMode;\n-  #470 = Utf8               (Lorg/apache/commons/csv/CSVFormat$Builder;Lorg/apache/commons/csv/CSVFormat$1;)V\n-  #471 = Utf8               access$2000\n-  #472 = Utf8               access$2100\n-  #473 = Utf8               <clinit>\n-  #474 = Utf8               SourceFile\n-  #475 = Utf8               CSVFormat.java\n-  #476 = Utf8               org/apache/commons/csv/Constants\n-  #477 = NameAndType        #308:#309     // containsLineBreak:(Ljava/lang/String;)Z\n-  #478 = NameAndType        #311:#313     // isLineBreak:(Ljava/lang/Character;)Z\n-  #479 = NameAndType        #324:#325     // \"<init>\":(Lorg/apache/commons/csv/CSVFormat$Builder;)V\n-  #480 = NameAndType        #272:#273     // duplicateHeaderMode:Lorg/apache/commons/csv/DuplicateHeaderMode;\n-  #481 = NameAndType        #290:#280     // quotedNullString:Ljava/lang/String;\n-  #482 = NameAndType        #276:#275     // autoFlush:Z\n-  #483 = NameAndType        #296:#275     // trim:Z\n-  #484 = NameAndType        #295:#275     // trailingDelimiter:Z\n-  #485 = NameAndType        #286:#275     // ignoreHeaderCase:Z\n-  #486 = NameAndType        #294:#275     // skipHeaderRecord:Z\n-  #487 = NameAndType        #282:#283     // headers:[Ljava/lang/String;\n-  #488 = NameAndType        #284:#283     // headerComments:[Ljava/lang/String;\n-  #489 = NameAndType        #288:#280     // nullString:Ljava/lang/String;\n-  #490 = NameAndType        #293:#280     // recordSeparator:Ljava/lang/String;\n-  #491 = NameAndType        #285:#275     // ignoreEmptyLines:Z\n-  #492 = NameAndType        #274:#275     // allowMissingColumnNames:Z\n-  #493 = NameAndType        #287:#275     // ignoreSurroundingSpaces:Z\n-  #494 = NameAndType        #281:#278     // escapeCharacter:Ljava/lang/Character;\n-  #495 = NameAndType        #277:#278     // commentMarker:Ljava/lang/Character;\n-  #496 = NameAndType        #291:#292     // quoteMode:Lorg/apache/commons/csv/QuoteMode;\n-  #497 = NameAndType        #289:#278     // quoteCharacter:Ljava/lang/Character;\n-  #498 = NameAndType        #279:#280     // delimiter:Ljava/lang/String;\n-  #499 = Class              #501          // \"[Ljava/lang/Object;\"\n-  #500 = NameAndType        #297:#737     // clone:()Ljava/lang/Object;\n-  #501 = Utf8               [Ljava/lang/Object;\n-  #502 = Utf8               source\n-  #503 = Class              #738          // java/util/Objects\n-  #504 = NameAndType        #739:#740     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #505 = Utf8               java/lang/String\n-  #506 = NameAndType        #741:#742     // indexOf:(I)I\n-  #507 = NameAndType        #306:#307     // contains:(Ljava/lang/String;C)Z\n-  #508 = NameAndType        #296:#356     // trim:()Ljava/lang/String;\n-  #509 = NameAndType        #743:#346     // isEmpty:()Z\n-  #510 = Class              #744          // java/lang/Character\n-  #511 = NameAndType        #745:#354     // charValue:()C\n-  #512 = NameAndType        #311:#312     // isLineBreak:(C)Z\n-  #513 = NameAndType        #746:#747     // charAt:(I)C\n-  #514 = NameAndType        #314:#312     // isTrimChar:(C)Z\n-  #515 = Utf8               org/apache/commons/csv/CSVFormat\n-  #516 = NameAndType        #322:#748     // valueOf:(C)Ljava/lang/String;\n-  #517 = Class              #735          // org/apache/commons/csv/DuplicateHeaderMode\n-  #518 = NameAndType        #749:#273     // ALLOW_ALL:Lorg/apache/commons/csv/DuplicateHeaderMode;\n-  #519 = NameAndType        #324:#326     // \"<init>\":(Ljava/lang/String;Ljava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZZLorg/apache/commons/csv/DuplicateHeaderMode;)V\n-  #520 = Utf8               BootstrapMethods\n-  #521 = MethodHandle       6:#750        // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #522 = MethodType         #751          //  (I)Ljava/lang/Object;\n-  #523 = MethodHandle       6:#752        // REF_invokeStatic org/apache/commons/csv/CSVFormat.lambda$toStringArray$0:([Ljava/lang/Object;I)Ljava/lang/String;\n-  #524 = MethodType         #753          //  (I)Ljava/lang/String;\n-  #525 = NameAndType        #754:#755     // apply:([Ljava/lang/Object;)Ljava/util/function/IntFunction;\n-  #526 = Class              #756          // java/util/Arrays\n-  #527 = NameAndType        #757:#758     // setAll:([Ljava/lang/Object;Ljava/util/function/IntFunction;)V\n-  #528 = NameAndType        #759:#375     // length:()I\n-  #529 = NameAndType        #314:#315     // isTrimChar:(Ljava/lang/CharSequence;I)Z\n-  #530 = NameAndType        #760:#761     // subSequence:(II)Ljava/lang/CharSequence;\n-  #531 = NameAndType        #322:#762     // valueOf:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Predefined;\n-  #532 = NameAndType        #763:#334     // getFormat:()Lorg/apache/commons/csv/CSVFormat;\n-  #533 = NameAndType        #324:#410     // \"<init>\":()V\n-  #534 = NameAndType        #764:#765     // access$2200:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/String;\n-  #535 = NameAndType        #766:#767     // access$2300:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/Character;\n-  #536 = NameAndType        #768:#769     // access$2400:(Lorg/apache/commons/csv/CSVFormat$Builder;)Lorg/apache/commons/csv/QuoteMode;\n-  #537 = NameAndType        #770:#767     // access$2500:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/Character;\n-  #538 = NameAndType        #771:#767     // access$2600:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/Character;\n-  #539 = NameAndType        #772:#773     // access$2700:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n-  #540 = NameAndType        #774:#773     // access$2800:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n-  #541 = NameAndType        #775:#773     // access$2900:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n-  #542 = NameAndType        #776:#765     // access$3000:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/String;\n-  #543 = NameAndType        #777:#765     // access$3100:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/String;\n-  #544 = NameAndType        #778:#779     // access$3200:(Lorg/apache/commons/csv/CSVFormat$Builder;)[Ljava/lang/String;\n-  #545 = NameAndType        #780:#779     // access$3300:(Lorg/apache/commons/csv/CSVFormat$Builder;)[Ljava/lang/String;\n-  #546 = NameAndType        #781:#773     // access$3400:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n-  #547 = NameAndType        #782:#773     // access$3500:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n-  #548 = NameAndType        #783:#773     // access$3600:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n-  #549 = NameAndType        #784:#773     // access$3700:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n-  #550 = NameAndType        #785:#773     // access$3800:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n-  #551 = NameAndType        #786:#765     // access$3900:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/String;\n-  #552 = NameAndType        #787:#788     // access$4000:(Lorg/apache/commons/csv/CSVFormat$Builder;)Lorg/apache/commons/csv/DuplicateHeaderMode;\n-  #553 = NameAndType        #409:#410     // validate:()V\n-  #554 = NameAndType        #318:#319     // toStringArray:([Ljava/lang/Object;)[Ljava/lang/String;\n-  #555 = NameAndType        #297:#298     // clone:([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #556 = Utf8               java/lang/StringBuilder\n-  #557 = NameAndType        #327:#789     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #558 = NameAndType        #327:#790     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #559 = NameAndType        #407:#356     // toString:()Ljava/lang/String;\n-  #560 = Class              #731          // java/lang/Appendable\n-  #561 = NameAndType        #327:#791     // append:(C)Ljava/lang/Appendable;\n-  #562 = NameAndType        #327:#792     // append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;\n-  #563 = NameAndType        #793:#794     // create:(Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #564 = NameAndType        #331:#332     // builder:()Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #565 = NameAndType        #795:#334     // build:()Lorg/apache/commons/csv/CSVFormat;\n-  #566 = NameAndType        #796:#797     // getClass:()Ljava/lang/Class;\n-  #567 = NameAndType        #335:#798     // equals:(Ljava/lang/Object;Ljava/lang/Object;)Z\n-  #568 = NameAndType        #335:#799     // equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z\n-  #569 = Utf8               java/io/StringWriter\n-  #570 = Utf8               org/apache/commons/csv/CSVPrinter\n-  #571 = NameAndType        #324:#800     // \"<init>\":(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V\n-  #572 = NameAndType        #395:#801     // printRecord:([Ljava/lang/Object;)V\n-  #573 = NameAndType        #802:#803     // substring:(II)Ljava/lang/String;\n-  #574 = NameAndType        #804:#410     // close:()V\n-  #575 = Utf8               java/lang/Throwable\n-  #576 = NameAndType        #805:#806     // addSuppressed:(Ljava/lang/Throwable;)V\n-  #577 = Utf8               java/io/IOException\n-  #578 = Utf8               java/lang/IllegalStateException\n-  #579 = NameAndType        #324:#806     // \"<init>\":(Ljava/lang/Throwable;)V\n-  #580 = Class              #283          // \"[Ljava/lang/String;\"\n-  #581 = Class              #283          // \"[Ljava/lang/String;\"\n-  #582 = NameAndType        #374:#807     // hashCode:([Ljava/lang/Object;)I\n-  #583 = Utf8               java/lang/Object\n-  #584 = Class              #808          // java/lang/Boolean\n-  #585 = NameAndType        #322:#809     // valueOf:(Z)Ljava/lang/Boolean;\n-  #586 = NameAndType        #810:#807     // hash:([Ljava/lang/Object;)I\n-  #587 = Utf8               org/apache/commons/csv/CSVParser\n-  #588 = NameAndType        #324:#811     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n-  #589 = Utf8               java/io/OutputStreamWriter\n-  #590 = Utf8               java/io/FileOutputStream\n-  #591 = NameAndType        #324:#812     // \"<init>\":(Ljava/io/File;)V\n-  #592 = NameAndType        #324:#813     // \"<init>\":(Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V\n-  #593 = Utf8\n-  #594 = Class              #733          // org/apache/commons/csv/QuoteMode\n-  #595 = NameAndType        #814:#292     // ALL:Lorg/apache/commons/csv/QuoteMode;\n-  #596 = Utf8               java/lang/CharSequence\n-  #597 = Utf8               java/io/Reader\n-  #598 = NameAndType        #384:#390     // print:(Ljava/io/Reader;Ljava/lang/Appendable;Z)V\n-  #599 = NameAndType        #373:#346     // getTrim:()Z\n-  #600 = NameAndType        #296:#320     // trim:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;\n-  #601 = NameAndType        #384:#388     // print:(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n-  #602 = NameAndType        #355:#356     // getDelimiterString:()Ljava/lang/String;\n-  #603 = NameAndType        #381:#346     // isQuoteCharacterSet:()Z\n-  #604 = NameAndType        #405:#388     // printWithQuotes:(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n-  #605 = NameAndType        #379:#346     // isEscapeCharacterSet:()Z\n-  #606 = NameAndType        #399:#330     // printWithEscapes:(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V\n-  #607 = NameAndType        #327:#815     // append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;\n-  #608 = Utf8               java/nio/file/OpenOption\n-  #609 = Class              #816          // java/nio/file/Files\n-  #610 = NameAndType        #817:#818     // newBufferedWriter:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;\n-  #611 = NameAndType        #384:#385     // print:(Ljava/lang/Appendable;)Lorg/apache/commons/csv/CSVPrinter;\n-  #612 = NameAndType        #327:#330     // append:(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V\n-  #613 = NameAndType        #405:#401     // printWithQuotes:(Ljava/io/Reader;Ljava/lang/Appendable;)V\n-  #614 = NameAndType        #399:#401     // printWithEscapes:(Ljava/io/Reader;Ljava/lang/Appendable;)V\n-  #615 = Utf8               java/io/Writer\n-  #616 = NameAndType        #819:#820     // copyLarge:(Ljava/io/Reader;Ljava/io/Writer;)J\n-  #617 = NameAndType        #333:#821     // copy:(Ljava/io/Reader;Ljava/lang/Appendable;)J\n-  #618 = Class              #822          // java/lang/System\n-  #619 = NameAndType        #823:#824     // out:Ljava/io/PrintStream;\n-  #620 = NameAndType        #372:#346     // getTrailingDelimiter:()Z\n-  #621 = NameAndType        #384:#387     // print:(Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n-  #622 = NameAndType        #393:#394     // println:(Ljava/lang/Appendable;)V\n-  #623 = NameAndType        #825:#826     // toCharArray:()[C\n-  #624 = NameAndType        #359:#352     // getEscapeCharacter:()Ljava/lang/Character;\n-  #625 = NameAndType        #377:#378     // isDelimiter:(CLjava/lang/CharSequence;I[CI)Z\n-  #626 = Utf8               org/apache/commons/csv/ExtendedBufferedReader\n-  #627 = NameAndType        #324:#827     // \"<init>\":(Ljava/io/Reader;)V\n-  #628 = Utf8               org/apache/commons/csv/IOUtils\n-  #629 = NameAndType        #324:#828     // \"<init>\":(I)V\n-  #630 = NameAndType        #829:#375     // read:()I\n-  #631 = NameAndType        #327:#830     // append:(C)Ljava/lang/StringBuilder;\n-  #632 = NameAndType        #831:#832     // lookAhead:(I)[C\n-  #633 = NameAndType        #324:#833     // \"<init>\":([C)V\n-  #634 = NameAndType        #834:#828     // setLength:(I)V\n-  #635 = NameAndType        #327:#328     // append:(CLjava/lang/Appendable;)V\n-  #636 = NameAndType        #367:#352     // getQuoteCharacter:()Ljava/lang/Character;\n-  #637 = NameAndType        #368:#369     // getQuoteMode:()Lorg/apache/commons/csv/QuoteMode;\n-  #638 = NameAndType        #835:#292     // MINIMAL:Lorg/apache/commons/csv/QuoteMode;\n-  #639 = NameAndType        #836:#837     // $SwitchMap$org$apache$commons$csv$QuoteMode:[I\n-  #640 = NameAndType        #838:#375     // ordinal:()I\n-  #641 = Utf8               java/lang/Number\n-  #642 = Utf8               Unexpected Quote value:\n-  #643 = NameAndType        #324:#839     // \"<init>\":(Ljava/lang/String;)V\n-  #644 = NameAndType        #840:#292     // NONE:Lorg/apache/commons/csv/QuoteMode;\n-  #645 = Utf8               Delimiter=<\n-  #646 = Utf8               Escape=<\n-  #647 = Utf8               QuoteChar=<\n-  #648 = Utf8               QuoteMode=<\n-  #649 = NameAndType        #376:#346     // isCommentMarkerSet:()Z\n-  #650 = Utf8               CommentStart=<\n-  #651 = NameAndType        #380:#346     // isNullStringSet:()Z\n-  #652 = Utf8               NullString=<\n-  #653 = Utf8               RecordSeparator=<\n-  #654 = NameAndType        #363:#346     // getIgnoreEmptyLines:()Z\n-  #655 = Utf8                EmptyLines:ignored\n-  #656 = NameAndType        #365:#346     // getIgnoreSurroundingSpaces:()Z\n-  #657 = Utf8                SurroundingSpaces:ignored\n-  #658 = NameAndType        #364:#346     // getIgnoreHeaderCase:()Z\n-  #659 = Utf8                IgnoreHeaderCase:ignored\n-  #660 = Utf8                SkipHeaderRecord:\n-  #661 = NameAndType        #327:#841     // append:(Z)Ljava/lang/StringBuilder;\n-  #662 = Utf8               HeaderComments:\n-  #663 = NameAndType        #407:#339     // toString:([Ljava/lang/Object;)Ljava/lang/String;\n-  #664 = Utf8               Header:\n-  #665 = Utf8               java/lang/IllegalArgumentException\n-  #666 = Utf8               The delimiter cannot be a line break\n-  #667 = Utf8               The quoteChar character and the delimiter cannot be the same (\\'\n-  #668 = Utf8               \\')\n-  #669 = Utf8               The escape character and the delimiter cannot be the same (\\'\n-  #670 = Utf8               The comment start character and the delimiter cannot be the same (\\'\n-  #671 = NameAndType        #335:#336     // equals:(Ljava/lang/Object;)Z\n-  #672 = Utf8               The comment start character and the quoteChar cannot be the same (\\'\n-  #673 = Utf8               The comment start and the escape character cannot be the same (\\'\n-  #674 = Utf8               No quotes mode set but no escape character is set\n-  #675 = Utf8               java/util/HashSet\n-  #676 = NameAndType        #842:#273     // ALLOW_EMPTY:Lorg/apache/commons/csv/DuplicateHeaderMode;\n-  #677 = NameAndType        #310:#309     // isBlank:(Ljava/lang/String;)Z\n-  #678 = Class              #734          // java/util/Set\n-  #679 = NameAndType        #843:#336     // add:(Ljava/lang/Object;)Z\n-  #680 = Utf8               The header contains a duplicate name: \\\"%s\\\" in %s. If this is valid then use CSVFormat.Builder.setDuplicateHeaderMode().\n-  #681 = NameAndType        #338:#844     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #682 = NameAndType        #845:#846     // setDuplicateHeaderMode:(Lorg/apache/commons/csv/DuplicateHeaderMode;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #683 = NameAndType        #847:#848     // setAllowMissingColumnNames:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #684 = NameAndType        #849:#848     // setAutoFlush:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #685 = NameAndType        #850:#851     // setCommentMarker:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #686 = NameAndType        #850:#852     // setCommentMarker:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #687 = NameAndType        #853:#851     // setDelimiter:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #688 = NameAndType        #854:#851     // setEscape:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #689 = NameAndType        #854:#852     // setEscape:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #690 = NameAndType        #855:#856     // setHeader:([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #691 = NameAndType        #857:#848     // setSkipHeaderRecord:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #692 = NameAndType        #855:#858     // setHeader:(Ljava/lang/Class;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #693 = NameAndType        #855:#859     // setHeader:(Ljava/sql/ResultSet;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #694 = NameAndType        #855:#860     // setHeader:(Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #695 = NameAndType        #861:#862     // setHeaderComments:([Ljava/lang/Object;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #696 = NameAndType        #863:#848     // setIgnoreEmptyLines:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #697 = NameAndType        #864:#848     // setIgnoreHeaderCase:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #698 = NameAndType        #865:#848     // setIgnoreSurroundingSpaces:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #699 = NameAndType        #866:#867     // setNullString:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #700 = NameAndType        #868:#851     // setQuote:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #701 = NameAndType        #868:#852     // setQuote:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #702 = NameAndType        #869:#870     // setQuoteMode:(Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #703 = NameAndType        #871:#851     // setRecordSeparator:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #704 = NameAndType        #871:#867     // setRecordSeparator:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #705 = NameAndType        #872:#356     // lineSeparator:()Ljava/lang/String;\n-  #706 = NameAndType        #873:#848     // setTrailingDelimiter:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #707 = NameAndType        #874:#848     // setTrim:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #708 = NameAndType        #407:#875     // toString:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n-  #709 = Utf8               ,\n-  #710 = NameAndType        #876:#278     // DOUBLE_QUOTE_CHAR:Ljava/lang/Character;\n-  #711 = Utf8               \\r\\n\n-  #712 = NameAndType        #254:#255     // DEFAULT:Lorg/apache/commons/csv/CSVFormat;\n-  #713 = NameAndType        #256:#255     // EXCEL:Lorg/apache/commons/csv/CSVFormat;\n-  #714 = NameAndType        #257:#255     // INFORMIX_UNLOAD:Lorg/apache/commons/csv/CSVFormat;\n-  #715 = NameAndType        #853:#867     // setDelimiter:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #716 = NameAndType        #258:#255     // INFORMIX_UNLOAD_CSV:Lorg/apache/commons/csv/CSVFormat;\n-  #717 = NameAndType        #259:#255     // MONGODB_CSV:Lorg/apache/commons/csv/CSVFormat;\n-  #718 = NameAndType        #260:#255     // MONGODB_TSV:Lorg/apache/commons/csv/CSVFormat;\n-  #719 = Utf8               \\\\N\n-  #720 = NameAndType        #877:#292     // ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n-  #721 = NameAndType        #261:#255     // MYSQL:Lorg/apache/commons/csv/CSVFormat;\n-  #722 = NameAndType        #262:#255     // ORACLE:Lorg/apache/commons/csv/CSVFormat;\n-  #723 = NameAndType        #263:#255     // POSTGRESQL_CSV:Lorg/apache/commons/csv/CSVFormat;\n-  #724 = NameAndType        #264:#255     // POSTGRESQL_TEXT:Lorg/apache/commons/csv/CSVFormat;\n-  #725 = NameAndType        #265:#255     // RFC4180:Lorg/apache/commons/csv/CSVFormat;\n-  #726 = NameAndType        #271:#255     // TDF:Lorg/apache/commons/csv/CSVFormat;\n-  #727 = Utf8               java/io/Serializable\n-  #728 = Utf8               org/apache/commons/csv/CSVFormat$1\n-  #729 = Utf8               org/apache/commons/csv/CSVFormat$Predefined\n-  #730 = Utf8               org/apache/commons/csv/CSVFormat$Builder\n-  #731 = Utf8               java/lang/Appendable\n-  #732 = Utf8               [C\n-  #733 = Utf8               org/apache/commons/csv/QuoteMode\n-  #734 = Utf8               java/util/Set\n-  #735 = Utf8               org/apache/commons/csv/DuplicateHeaderMode\n-  #736 = Utf8               java/sql/SQLException\n-  #737 = Utf8               ()Ljava/lang/Object;\n-  #738 = Utf8               java/util/Objects\n-  #739 = Utf8               requireNonNull\n-  #740 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #741 = Utf8               indexOf\n-  #742 = Utf8               (I)I\n-  #743 = Utf8               isEmpty\n-  #744 = Utf8               java/lang/Character\n-  #745 = Utf8               charValue\n-  #746 = Utf8               charAt\n-  #747 = Utf8               (I)C\n-  #748 = Utf8               (C)Ljava/lang/String;\n-  #749 = Utf8               ALLOW_ALL\n-  #750 = Methodref          #878.#879     // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #751 = Utf8               (I)Ljava/lang/Object;\n-  #752 = Methodref          #37.#880      // org/apache/commons/csv/CSVFormat.lambda$toStringArray$0:([Ljava/lang/Object;I)Ljava/lang/String;\n-  #753 = Utf8               (I)Ljava/lang/String;\n-  #754 = Utf8               apply\n-  #755 = Utf8               ([Ljava/lang/Object;)Ljava/util/function/IntFunction;\n-  #756 = Utf8               java/util/Arrays\n-  #757 = Utf8               setAll\n-  #758 = Utf8               ([Ljava/lang/Object;Ljava/util/function/IntFunction;)V\n-  #759 = Utf8               length\n-  #760 = Utf8               subSequence\n-  #761 = Utf8               (II)Ljava/lang/CharSequence;\n-  #762 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Predefined;\n-  #763 = Utf8               getFormat\n-  #764 = Utf8               access$2200\n-  #765 = Utf8               (Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/String;\n-  #766 = Utf8               access$2300\n-  #767 = Utf8               (Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/Character;\n-  #768 = Utf8               access$2400\n-  #769 = Utf8               (Lorg/apache/commons/csv/CSVFormat$Builder;)Lorg/apache/commons/csv/QuoteMode;\n-  #770 = Utf8               access$2500\n-  #771 = Utf8               access$2600\n-  #772 = Utf8               access$2700\n-  #773 = Utf8               (Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n-  #774 = Utf8               access$2800\n-  #775 = Utf8               access$2900\n-  #776 = Utf8               access$3000\n-  #777 = Utf8               access$3100\n-  #778 = Utf8               access$3200\n-  #779 = Utf8               (Lorg/apache/commons/csv/CSVFormat$Builder;)[Ljava/lang/String;\n-  #780 = Utf8               access$3300\n-  #781 = Utf8               access$3400\n-  #782 = Utf8               access$3500\n-  #783 = Utf8               access$3600\n-  #784 = Utf8               access$3700\n-  #785 = Utf8               access$3800\n-  #786 = Utf8               access$3900\n-  #787 = Utf8               access$4000\n-  #788 = Utf8               (Lorg/apache/commons/csv/CSVFormat$Builder;)Lorg/apache/commons/csv/DuplicateHeaderMode;\n-  #789 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #790 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #791 = Utf8               (C)Ljava/lang/Appendable;\n-  #792 = Utf8               (Ljava/lang/CharSequence;)Ljava/lang/Appendable;\n-  #793 = Utf8               create\n-  #794 = Utf8               (Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #795 = Utf8               build\n-  #796 = Utf8               getClass\n-  #797 = Utf8               ()Ljava/lang/Class;\n-  #798 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z\n-  #799 = Utf8               ([Ljava/lang/Object;[Ljava/lang/Object;)Z\n-  #800 = Utf8               (Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V\n-  #801 = Utf8               ([Ljava/lang/Object;)V\n-  #802 = Utf8               substring\n-  #803 = Utf8               (II)Ljava/lang/String;\n-  #804 = Utf8               close\n-  #805 = Utf8               addSuppressed\n-  #806 = Utf8               (Ljava/lang/Throwable;)V\n-  #807 = Utf8               ([Ljava/lang/Object;)I\n-  #808 = Utf8               java/lang/Boolean\n-  #809 = Utf8               (Z)Ljava/lang/Boolean;\n-  #810 = Utf8               hash\n-  #811 = Utf8               (Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n-  #812 = Utf8               (Ljava/io/File;)V\n-  #813 = Utf8               (Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V\n-  #814 = Utf8               ALL\n-  #815 = Utf8               (Ljava/lang/CharSequence;II)Ljava/lang/Appendable;\n-  #816 = Utf8               java/nio/file/Files\n-  #817 = Utf8               newBufferedWriter\n-  #818 = Utf8               (Ljava/nio/file/Path;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;\n-  #819 = Utf8               copyLarge\n-  #820 = Utf8               (Ljava/io/Reader;Ljava/io/Writer;)J\n-  #821 = Utf8               (Ljava/io/Reader;Ljava/lang/Appendable;)J\n-  #822 = Utf8               java/lang/System\n-  #823 = Utf8               out\n-  #824 = Utf8               Ljava/io/PrintStream;\n-  #825 = Utf8               toCharArray\n-  #826 = Utf8               ()[C\n-  #827 = Utf8               (Ljava/io/Reader;)V\n-  #828 = Utf8               (I)V\n-  #829 = Utf8               read\n-  #830 = Utf8               (C)Ljava/lang/StringBuilder;\n-  #831 = Utf8               lookAhead\n-  #832 = Utf8               (I)[C\n-  #833 = Utf8               ([C)V\n-  #834 = Utf8               setLength\n-  #835 = Utf8               MINIMAL\n-  #836 = Utf8               $SwitchMap$org$apache$commons$csv$QuoteMode\n-  #837 = Utf8               [I\n-  #838 = Utf8               ordinal\n-  #839 = Utf8               (Ljava/lang/String;)V\n-  #840 = Utf8               NONE\n-  #841 = Utf8               (Z)Ljava/lang/StringBuilder;\n-  #842 = Utf8               ALLOW_EMPTY\n-  #843 = Utf8               add\n-  #844 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #845 = Utf8               setDuplicateHeaderMode\n-  #846 = Utf8               (Lorg/apache/commons/csv/DuplicateHeaderMode;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #847 = Utf8               setAllowMissingColumnNames\n-  #848 = Utf8               (Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #849 = Utf8               setAutoFlush\n-  #850 = Utf8               setCommentMarker\n-  #851 = Utf8               (C)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #852 = Utf8               (Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #853 = Utf8               setDelimiter\n-  #854 = Utf8               setEscape\n-  #855 = Utf8               setHeader\n-  #856 = Utf8               ([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #857 = Utf8               setSkipHeaderRecord\n-  #858 = Utf8               (Ljava/lang/Class;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #859 = Utf8               (Ljava/sql/ResultSet;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #860 = Utf8               (Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #861 = Utf8               setHeaderComments\n-  #862 = Utf8               ([Ljava/lang/Object;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #863 = Utf8               setIgnoreEmptyLines\n-  #864 = Utf8               setIgnoreHeaderCase\n-  #865 = Utf8               setIgnoreSurroundingSpaces\n-  #866 = Utf8               setNullString\n-  #867 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #868 = Utf8               setQuote\n-  #869 = Utf8               setQuoteMode\n-  #870 = Utf8               (Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #871 = Utf8               setRecordSeparator\n-  #872 = Utf8               lineSeparator\n-  #873 = Utf8               setTrailingDelimiter\n-  #874 = Utf8               setTrim\n-  #875 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n-  #876 = Utf8               DOUBLE_QUOTE_CHAR\n-  #877 = Utf8               ALL_NON_NULL\n-  #878 = Class              #881          // java/lang/invoke/LambdaMetafactory\n-  #879 = NameAndType        #882:#885     // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #880 = NameAndType        #443:#444     // lambda$toStringArray$0:([Ljava/lang/Object;I)Ljava/lang/String;\n-  #881 = Utf8               java/lang/invoke/LambdaMetafactory\n-  #882 = Utf8               metafactory\n-  #883 = Class              #887          // java/lang/invoke/MethodHandles$Lookup\n-  #884 = Utf8               Lookup\n-  #885 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #886 = Class              #888          // java/lang/invoke/MethodHandles\n-  #887 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #888 = Utf8               java/lang/invoke/MethodHandles\n+  #321 = Utf8               valueOf\n+  #322 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n+  #323 = Utf8               <init>\n+  #324 = Utf8               (Lorg/apache/commons/csv/CSVFormat$Builder;)V\n+  #325 = Utf8               (Ljava/lang/String;Ljava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZZLorg/apache/commons/csv/DuplicateHeaderMode;)V\n+  #326 = Utf8               append\n+  #327 = Utf8               (CLjava/lang/Appendable;)V\n+  #328 = Utf8               Exceptions\n+  #329 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/Appendable;)V\n+  #330 = Utf8               builder\n+  #331 = Utf8               ()Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #332 = Utf8               copy\n+  #333 = Utf8               ()Lorg/apache/commons/csv/CSVFormat;\n+  #334 = Utf8               equals\n+  #335 = Utf8               (Ljava/lang/Object;)Z\n+  #336 = Utf8               format\n+  #337 = Utf8               ([Ljava/lang/Object;)Ljava/lang/String;\n+  #338 = Utf8               getAllowDuplicateHeaderNames\n+  #339 = Utf8               ()Z\n+  #340 = Utf8               Deprecated\n+  #341 = Utf8               Ljava/lang/Deprecated;\n+  #342 = Utf8               getAllowMissingColumnNames\n+  #343 = Utf8               getAutoFlush\n+  #344 = Utf8               getCommentMarker\n+  #345 = Utf8               ()Ljava/lang/Character;\n+  #346 = Utf8               getDelimiter\n+  #347 = Utf8               ()C\n+  #348 = Utf8               getDelimiterString\n+  #349 = Utf8               ()Ljava/lang/String;\n+  #350 = Utf8               getDuplicateHeaderMode\n+  #351 = Utf8               ()Lorg/apache/commons/csv/DuplicateHeaderMode;\n+  #352 = Utf8               getEscapeCharacter\n+  #353 = Utf8               getHeader\n+  #354 = Utf8               ()[Ljava/lang/String;\n+  #355 = Utf8               getHeaderComments\n+  #356 = Utf8               getIgnoreEmptyLines\n+  #357 = Utf8               getIgnoreHeaderCase\n+  #358 = Utf8               getIgnoreSurroundingSpaces\n+  #359 = Utf8               getNullString\n+  #360 = Utf8               getQuoteCharacter\n+  #361 = Utf8               getQuoteMode\n+  #362 = Utf8               ()Lorg/apache/commons/csv/QuoteMode;\n+  #363 = Utf8               getRecordSeparator\n+  #364 = Utf8               getSkipHeaderRecord\n+  #365 = Utf8               getTrailingDelimiter\n+  #366 = Utf8               getTrim\n+  #367 = Utf8               hashCode\n+  #368 = Utf8               ()I\n+  #369 = Utf8               isCommentMarkerSet\n+  #370 = Utf8               isDelimiter\n+  #371 = Utf8               (CLjava/lang/CharSequence;I[CI)Z\n+  #372 = Utf8               isEscapeCharacterSet\n+  #373 = Utf8               isNullStringSet\n+  #374 = Utf8               isQuoteCharacterSet\n+  #375 = Utf8               parse\n+  #376 = Utf8               (Ljava/io/Reader;)Lorg/apache/commons/csv/CSVParser;\n+  #377 = Utf8               print\n+  #378 = Utf8               (Ljava/lang/Appendable;)Lorg/apache/commons/csv/CSVPrinter;\n+  #379 = Utf8               (Ljava/io/File;Ljava/nio/charset/Charset;)Lorg/apache/commons/csv/CSVPrinter;\n+  #380 = Utf8               (Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n+  #381 = Utf8               (Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n+  #382 = Utf8               (Ljava/nio/file/Path;Ljava/nio/charset/Charset;)Lorg/apache/commons/csv/CSVPrinter;\n+  #383 = Utf8               (Ljava/io/Reader;Ljava/lang/Appendable;Z)V\n+  #384 = Utf8               printer\n+  #385 = Utf8               ()Lorg/apache/commons/csv/CSVPrinter;\n+  #386 = Utf8               println\n+  #387 = Utf8               (Ljava/lang/Appendable;)V\n+  #388 = Utf8               printRecord\n+  #389 = Utf8               (Ljava/lang/Appendable;[Ljava/lang/Object;)V\n+  #390 = Class              #716          // java/lang/Appendable\n+  #391 = Utf8               printWithEscapes\n+  #392 = Class              #717          // \"[C\"\n+  #393 = Utf8               (Ljava/io/Reader;Ljava/lang/Appendable;)V\n+  #394 = Utf8               printWithQuotes\n+  #395 = Class              #718          // org/apache/commons/csv/QuoteMode\n+  #396 = Utf8               toString\n+  #397 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #398 = Utf8               validate\n+  #399 = Utf8               ()V\n+  #400 = Class              #719          // java/util/Set\n+  #401 = Utf8               withAllowDuplicateHeaderNames\n+  #402 = Utf8               (Z)Lorg/apache/commons/csv/CSVFormat;\n+  #403 = Class              #720          // org/apache/commons/csv/DuplicateHeaderMode\n+  #404 = Utf8               withAllowMissingColumnNames\n+  #405 = Utf8               withAutoFlush\n+  #406 = Utf8               withCommentMarker\n+  #407 = Utf8               (Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n+  #408 = Utf8               withDelimiter\n+  #409 = Utf8               withEscape\n+  #410 = Utf8               withFirstRecordAsHeader\n+  #411 = Utf8               withHeader\n+  #412 = Utf8               (Ljava/lang/Class;)Lorg/apache/commons/csv/CSVFormat;\n+  #413 = Utf8               (Ljava/lang/Class<+Ljava/lang/Enum<*>;>;)Lorg/apache/commons/csv/CSVFormat;\n+  #414 = Utf8               (Ljava/sql/ResultSet;)Lorg/apache/commons/csv/CSVFormat;\n+  #415 = Class              #721          // java/sql/SQLException\n+  #416 = Utf8               (Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat;\n+  #417 = Utf8               ([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n+  #418 = Utf8               withHeaderComments\n+  #419 = Utf8               ([Ljava/lang/Object;)Lorg/apache/commons/csv/CSVFormat;\n+  #420 = Utf8               withIgnoreEmptyLines\n+  #421 = Utf8               withIgnoreHeaderCase\n+  #422 = Utf8               withIgnoreSurroundingSpaces\n+  #423 = Utf8               withNullString\n+  #424 = Utf8               withQuote\n+  #425 = Utf8               withQuoteMode\n+  #426 = Utf8               (Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat;\n+  #427 = Utf8               withRecordSeparator\n+  #428 = Utf8               withSkipHeaderRecord\n+  #429 = Utf8               withSystemRecordSeparator\n+  #430 = Utf8               withTrailingDelimiter\n+  #431 = Utf8               withTrim\n+  #432 = Utf8               lambda$toStringArray$0\n+  #433 = Utf8               ([Ljava/lang/Object;I)Ljava/lang/String;\n+  #434 = Utf8               access$000\n+  #435 = Utf8               (Lorg/apache/commons/csv/CSVFormat;)Ljava/lang/String;\n+  #436 = Utf8               access$100\n+  #437 = Utf8               (Lorg/apache/commons/csv/CSVFormat;)Ljava/lang/Character;\n+  #438 = Utf8               access$200\n+  #439 = Utf8               (Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/QuoteMode;\n+  #440 = Utf8               access$300\n+  #441 = Utf8               access$400\n+  #442 = Utf8               access$500\n+  #443 = Utf8               (Lorg/apache/commons/csv/CSVFormat;)Z\n+  #444 = Utf8               access$600\n+  #445 = Utf8               access$700\n+  #446 = Utf8               access$800\n+  #447 = Utf8               access$900\n+  #448 = Utf8               access$1000\n+  #449 = Utf8               (Lorg/apache/commons/csv/CSVFormat;)[Ljava/lang/String;\n+  #450 = Utf8               access$1100\n+  #451 = Utf8               access$1200\n+  #452 = Utf8               access$1300\n+  #453 = Utf8               access$1400\n+  #454 = Utf8               access$1500\n+  #455 = Utf8               access$1600\n+  #456 = Utf8               access$1700\n+  #457 = Utf8               access$1800\n+  #458 = Utf8               (Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/DuplicateHeaderMode;\n+  #459 = Utf8               (Lorg/apache/commons/csv/CSVFormat$Builder;Lorg/apache/commons/csv/CSVFormat$1;)V\n+  #460 = Utf8               access$2000\n+  #461 = Utf8               access$2100\n+  #462 = Utf8               <clinit>\n+  #463 = Utf8               SourceFile\n+  #464 = Utf8               CSVFormat.java\n+  #465 = Utf8               org/apache/commons/csv/Constants\n+  #466 = NameAndType        #308:#309     // containsLineBreak:(Ljava/lang/String;)Z\n+  #467 = NameAndType        #311:#313     // isLineBreak:(Ljava/lang/Character;)Z\n+  #468 = NameAndType        #323:#324     // \"<init>\":(Lorg/apache/commons/csv/CSVFormat$Builder;)V\n+  #469 = NameAndType        #272:#273     // duplicateHeaderMode:Lorg/apache/commons/csv/DuplicateHeaderMode;\n+  #470 = NameAndType        #290:#280     // quotedNullString:Ljava/lang/String;\n+  #471 = NameAndType        #276:#275     // autoFlush:Z\n+  #472 = NameAndType        #296:#275     // trim:Z\n+  #473 = NameAndType        #295:#275     // trailingDelimiter:Z\n+  #474 = NameAndType        #286:#275     // ignoreHeaderCase:Z\n+  #475 = NameAndType        #294:#275     // skipHeaderRecord:Z\n+  #476 = NameAndType        #282:#283     // headers:[Ljava/lang/String;\n+  #477 = NameAndType        #284:#283     // headerComments:[Ljava/lang/String;\n+  #478 = NameAndType        #288:#280     // nullString:Ljava/lang/String;\n+  #479 = NameAndType        #293:#280     // recordSeparator:Ljava/lang/String;\n+  #480 = NameAndType        #285:#275     // ignoreEmptyLines:Z\n+  #481 = NameAndType        #274:#275     // allowMissingColumnNames:Z\n+  #482 = NameAndType        #287:#275     // ignoreSurroundingSpaces:Z\n+  #483 = NameAndType        #281:#278     // escapeCharacter:Ljava/lang/Character;\n+  #484 = NameAndType        #277:#278     // commentMarker:Ljava/lang/Character;\n+  #485 = NameAndType        #291:#292     // quoteMode:Lorg/apache/commons/csv/QuoteMode;\n+  #486 = NameAndType        #289:#278     // quoteCharacter:Ljava/lang/Character;\n+  #487 = NameAndType        #279:#280     // delimiter:Ljava/lang/String;\n+  #488 = Class              #490          // \"[Ljava/lang/Object;\"\n+  #489 = NameAndType        #297:#722     // clone:()Ljava/lang/Object;\n+  #490 = Utf8               [Ljava/lang/Object;\n+  #491 = Utf8               source\n+  #492 = Class              #723          // java/util/Objects\n+  #493 = NameAndType        #724:#725     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #494 = Utf8               java/lang/String\n+  #495 = NameAndType        #726:#727     // indexOf:(I)I\n+  #496 = NameAndType        #306:#307     // contains:(Ljava/lang/String;C)Z\n+  #497 = NameAndType        #296:#349     // trim:()Ljava/lang/String;\n+  #498 = NameAndType        #728:#339     // isEmpty:()Z\n+  #499 = Class              #729          // java/lang/Character\n+  #500 = NameAndType        #730:#347     // charValue:()C\n+  #501 = NameAndType        #311:#312     // isLineBreak:(C)Z\n+  #502 = NameAndType        #731:#732     // charAt:(I)C\n+  #503 = NameAndType        #314:#312     // isTrimChar:(C)Z\n+  #504 = Utf8               org/apache/commons/csv/CSVFormat\n+  #505 = NameAndType        #321:#733     // valueOf:(C)Ljava/lang/String;\n+  #506 = NameAndType        #734:#273     // ALLOW_ALL:Lorg/apache/commons/csv/DuplicateHeaderMode;\n+  #507 = NameAndType        #323:#325     // \"<init>\":(Ljava/lang/String;Ljava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZZLorg/apache/commons/csv/DuplicateHeaderMode;)V\n+  #508 = Utf8               BootstrapMethods\n+  #509 = MethodHandle       6:#735        // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #510 = MethodType         #736          //  (I)Ljava/lang/Object;\n+  #511 = MethodHandle       6:#737        // REF_invokeStatic org/apache/commons/csv/CSVFormat.lambda$toStringArray$0:([Ljava/lang/Object;I)Ljava/lang/String;\n+  #512 = MethodType         #738          //  (I)Ljava/lang/String;\n+  #513 = NameAndType        #739:#740     // apply:([Ljava/lang/Object;)Ljava/util/function/IntFunction;\n+  #514 = Class              #741          // java/util/Arrays\n+  #515 = NameAndType        #742:#743     // setAll:([Ljava/lang/Object;Ljava/util/function/IntFunction;)V\n+  #516 = NameAndType        #744:#368     // length:()I\n+  #517 = NameAndType        #314:#315     // isTrimChar:(Ljava/lang/CharSequence;I)Z\n+  #518 = NameAndType        #745:#746     // subSequence:(II)Ljava/lang/CharSequence;\n+  #519 = NameAndType        #321:#747     // valueOf:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Predefined;\n+  #520 = NameAndType        #748:#333     // getFormat:()Lorg/apache/commons/csv/CSVFormat;\n+  #521 = NameAndType        #323:#399     // \"<init>\":()V\n+  #522 = NameAndType        #749:#750     // access$2200:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/String;\n+  #523 = NameAndType        #751:#752     // access$2300:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/Character;\n+  #524 = NameAndType        #753:#754     // access$2400:(Lorg/apache/commons/csv/CSVFormat$Builder;)Lorg/apache/commons/csv/QuoteMode;\n+  #525 = NameAndType        #755:#752     // access$2500:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/Character;\n+  #526 = NameAndType        #756:#752     // access$2600:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/Character;\n+  #527 = NameAndType        #757:#758     // access$2700:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n+  #528 = NameAndType        #759:#758     // access$2800:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n+  #529 = NameAndType        #760:#758     // access$2900:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n+  #530 = NameAndType        #761:#750     // access$3000:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/String;\n+  #531 = NameAndType        #762:#750     // access$3100:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/String;\n+  #532 = NameAndType        #763:#764     // access$3200:(Lorg/apache/commons/csv/CSVFormat$Builder;)[Ljava/lang/String;\n+  #533 = NameAndType        #765:#764     // access$3300:(Lorg/apache/commons/csv/CSVFormat$Builder;)[Ljava/lang/String;\n+  #534 = NameAndType        #766:#758     // access$3400:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n+  #535 = NameAndType        #767:#758     // access$3500:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n+  #536 = NameAndType        #768:#758     // access$3600:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n+  #537 = NameAndType        #769:#758     // access$3700:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n+  #538 = NameAndType        #770:#758     // access$3800:(Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n+  #539 = NameAndType        #771:#750     // access$3900:(Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/String;\n+  #540 = NameAndType        #772:#773     // access$4000:(Lorg/apache/commons/csv/CSVFormat$Builder;)Lorg/apache/commons/csv/DuplicateHeaderMode;\n+  #541 = NameAndType        #398:#399     // validate:()V\n+  #542 = NameAndType        #318:#319     // toStringArray:([Ljava/lang/Object;)[Ljava/lang/String;\n+  #543 = NameAndType        #297:#298     // clone:([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #544 = Utf8               java/lang/StringBuilder\n+  #545 = NameAndType        #326:#774     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #546 = NameAndType        #326:#775     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #547 = NameAndType        #396:#349     // toString:()Ljava/lang/String;\n+  #548 = NameAndType        #326:#776     // append:(C)Ljava/lang/Appendable;\n+  #549 = NameAndType        #326:#777     // append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;\n+  #550 = NameAndType        #778:#779     // create:(Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #551 = NameAndType        #330:#331     // builder:()Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #552 = NameAndType        #780:#333     // build:()Lorg/apache/commons/csv/CSVFormat;\n+  #553 = NameAndType        #781:#782     // getClass:()Ljava/lang/Class;\n+  #554 = NameAndType        #334:#783     // equals:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+  #555 = NameAndType        #334:#784     // equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z\n+  #556 = Utf8               java/io/StringWriter\n+  #557 = Utf8               org/apache/commons/csv/CSVPrinter\n+  #558 = NameAndType        #323:#785     // \"<init>\":(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V\n+  #559 = NameAndType        #388:#786     // printRecord:([Ljava/lang/Object;)V\n+  #560 = NameAndType        #787:#788     // substring:(II)Ljava/lang/String;\n+  #561 = NameAndType        #789:#399     // close:()V\n+  #562 = Utf8               java/lang/Throwable\n+  #563 = NameAndType        #790:#791     // addSuppressed:(Ljava/lang/Throwable;)V\n+  #564 = Utf8               java/io/IOException\n+  #565 = Utf8               java/lang/IllegalStateException\n+  #566 = NameAndType        #323:#791     // \"<init>\":(Ljava/lang/Throwable;)V\n+  #567 = Class              #283          // \"[Ljava/lang/String;\"\n+  #568 = Class              #283          // \"[Ljava/lang/String;\"\n+  #569 = NameAndType        #367:#792     // hashCode:([Ljava/lang/Object;)I\n+  #570 = Utf8               java/lang/Object\n+  #571 = Class              #793          // java/lang/Boolean\n+  #572 = NameAndType        #321:#794     // valueOf:(Z)Ljava/lang/Boolean;\n+  #573 = NameAndType        #795:#792     // hash:([Ljava/lang/Object;)I\n+  #574 = Utf8               org/apache/commons/csv/CSVParser\n+  #575 = NameAndType        #323:#796     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n+  #576 = Utf8               java/io/OutputStreamWriter\n+  #577 = Utf8               java/io/FileOutputStream\n+  #578 = NameAndType        #323:#797     // \"<init>\":(Ljava/io/File;)V\n+  #579 = NameAndType        #323:#798     // \"<init>\":(Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V\n+  #580 = Utf8\n+  #581 = NameAndType        #799:#292     // ALL:Lorg/apache/commons/csv/QuoteMode;\n+  #582 = Utf8               java/lang/CharSequence\n+  #583 = Utf8               java/io/Reader\n+  #584 = NameAndType        #377:#383     // print:(Ljava/io/Reader;Ljava/lang/Appendable;Z)V\n+  #585 = NameAndType        #366:#339     // getTrim:()Z\n+  #586 = NameAndType        #296:#320     // trim:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;\n+  #587 = NameAndType        #377:#381     // print:(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n+  #588 = NameAndType        #348:#349     // getDelimiterString:()Ljava/lang/String;\n+  #589 = NameAndType        #374:#339     // isQuoteCharacterSet:()Z\n+  #590 = NameAndType        #394:#381     // printWithQuotes:(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n+  #591 = NameAndType        #372:#339     // isEscapeCharacterSet:()Z\n+  #592 = NameAndType        #391:#329     // printWithEscapes:(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V\n+  #593 = NameAndType        #326:#800     // append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;\n+  #594 = Utf8               java/nio/file/OpenOption\n+  #595 = Class              #801          // java/nio/file/Files\n+  #596 = NameAndType        #802:#803     // newBufferedWriter:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;\n+  #597 = NameAndType        #377:#378     // print:(Ljava/lang/Appendable;)Lorg/apache/commons/csv/CSVPrinter;\n+  #598 = NameAndType        #326:#329     // append:(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V\n+  #599 = NameAndType        #394:#393     // printWithQuotes:(Ljava/io/Reader;Ljava/lang/Appendable;)V\n+  #600 = NameAndType        #391:#393     // printWithEscapes:(Ljava/io/Reader;Ljava/lang/Appendable;)V\n+  #601 = Utf8               java/io/Writer\n+  #602 = NameAndType        #804:#805     // copyLarge:(Ljava/io/Reader;Ljava/io/Writer;)J\n+  #603 = NameAndType        #332:#806     // copy:(Ljava/io/Reader;Ljava/lang/Appendable;)J\n+  #604 = Class              #807          // java/lang/System\n+  #605 = NameAndType        #808:#809     // out:Ljava/io/PrintStream;\n+  #606 = NameAndType        #365:#339     // getTrailingDelimiter:()Z\n+  #607 = NameAndType        #377:#380     // print:(Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n+  #608 = NameAndType        #386:#387     // println:(Ljava/lang/Appendable;)V\n+  #609 = NameAndType        #810:#811     // toCharArray:()[C\n+  #610 = NameAndType        #352:#345     // getEscapeCharacter:()Ljava/lang/Character;\n+  #611 = NameAndType        #370:#371     // isDelimiter:(CLjava/lang/CharSequence;I[CI)Z\n+  #612 = Utf8               org/apache/commons/csv/ExtendedBufferedReader\n+  #613 = NameAndType        #323:#812     // \"<init>\":(Ljava/io/Reader;)V\n+  #614 = Utf8               org/apache/commons/csv/IOUtils\n+  #615 = NameAndType        #323:#813     // \"<init>\":(I)V\n+  #616 = NameAndType        #814:#368     // read:()I\n+  #617 = NameAndType        #326:#815     // append:(C)Ljava/lang/StringBuilder;\n+  #618 = NameAndType        #816:#817     // lookAhead:(I)[C\n+  #619 = NameAndType        #323:#818     // \"<init>\":([C)V\n+  #620 = NameAndType        #819:#813     // setLength:(I)V\n+  #621 = NameAndType        #326:#327     // append:(CLjava/lang/Appendable;)V\n+  #622 = NameAndType        #360:#345     // getQuoteCharacter:()Ljava/lang/Character;\n+  #623 = NameAndType        #361:#362     // getQuoteMode:()Lorg/apache/commons/csv/QuoteMode;\n+  #624 = NameAndType        #820:#292     // MINIMAL:Lorg/apache/commons/csv/QuoteMode;\n+  #625 = NameAndType        #821:#822     // $SwitchMap$org$apache$commons$csv$QuoteMode:[I\n+  #626 = NameAndType        #823:#368     // ordinal:()I\n+  #627 = Utf8               java/lang/Number\n+  #628 = Utf8               Unexpected Quote value:\n+  #629 = NameAndType        #323:#824     // \"<init>\":(Ljava/lang/String;)V\n+  #630 = NameAndType        #825:#292     // NONE:Lorg/apache/commons/csv/QuoteMode;\n+  #631 = Utf8               Delimiter=<\n+  #632 = Utf8               Escape=<\n+  #633 = Utf8               QuoteChar=<\n+  #634 = Utf8               QuoteMode=<\n+  #635 = NameAndType        #369:#339     // isCommentMarkerSet:()Z\n+  #636 = Utf8               CommentStart=<\n+  #637 = NameAndType        #373:#339     // isNullStringSet:()Z\n+  #638 = Utf8               NullString=<\n+  #639 = Utf8               RecordSeparator=<\n+  #640 = NameAndType        #356:#339     // getIgnoreEmptyLines:()Z\n+  #641 = Utf8                EmptyLines:ignored\n+  #642 = NameAndType        #358:#339     // getIgnoreSurroundingSpaces:()Z\n+  #643 = Utf8                SurroundingSpaces:ignored\n+  #644 = NameAndType        #357:#339     // getIgnoreHeaderCase:()Z\n+  #645 = Utf8                IgnoreHeaderCase:ignored\n+  #646 = Utf8                SkipHeaderRecord:\n+  #647 = NameAndType        #326:#826     // append:(Z)Ljava/lang/StringBuilder;\n+  #648 = Utf8               HeaderComments:\n+  #649 = NameAndType        #396:#337     // toString:([Ljava/lang/Object;)Ljava/lang/String;\n+  #650 = Utf8               Header:\n+  #651 = Utf8               java/lang/IllegalArgumentException\n+  #652 = Utf8               The delimiter cannot be a line break\n+  #653 = Utf8               The quoteChar character and the delimiter cannot be the same (\\'\n+  #654 = Utf8               \\')\n+  #655 = Utf8               The escape character and the delimiter cannot be the same (\\'\n+  #656 = Utf8               The comment start character and the delimiter cannot be the same (\\'\n+  #657 = NameAndType        #334:#335     // equals:(Ljava/lang/Object;)Z\n+  #658 = Utf8               The comment start character and the quoteChar cannot be the same (\\'\n+  #659 = Utf8               The comment start and the escape character cannot be the same (\\'\n+  #660 = Utf8               No quotes mode set but no escape character is set\n+  #661 = Utf8               java/util/HashSet\n+  #662 = NameAndType        #827:#273     // ALLOW_EMPTY:Lorg/apache/commons/csv/DuplicateHeaderMode;\n+  #663 = NameAndType        #310:#309     // isBlank:(Ljava/lang/String;)Z\n+  #664 = NameAndType        #828:#335     // add:(Ljava/lang/Object;)Z\n+  #665 = Utf8               The header contains a duplicate name: \\\"%s\\\" in %s. If this is valid then use CSVFormat.Builder.setDuplicateHeaderMode().\n+  #666 = NameAndType        #336:#829     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #667 = NameAndType        #830:#831     // setDuplicateHeaderMode:(Lorg/apache/commons/csv/DuplicateHeaderMode;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #668 = NameAndType        #832:#833     // setAllowMissingColumnNames:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #669 = NameAndType        #834:#833     // setAutoFlush:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #670 = NameAndType        #835:#836     // setCommentMarker:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #671 = NameAndType        #835:#837     // setCommentMarker:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #672 = NameAndType        #838:#836     // setDelimiter:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #673 = NameAndType        #839:#836     // setEscape:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #674 = NameAndType        #839:#837     // setEscape:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #675 = NameAndType        #840:#841     // setHeader:([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #676 = NameAndType        #842:#833     // setSkipHeaderRecord:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #677 = NameAndType        #840:#843     // setHeader:(Ljava/lang/Class;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #678 = NameAndType        #840:#844     // setHeader:(Ljava/sql/ResultSet;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #679 = NameAndType        #840:#845     // setHeader:(Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #680 = NameAndType        #846:#847     // setHeaderComments:([Ljava/lang/Object;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #681 = NameAndType        #848:#833     // setIgnoreEmptyLines:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #682 = NameAndType        #849:#833     // setIgnoreHeaderCase:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #683 = NameAndType        #850:#833     // setIgnoreSurroundingSpaces:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #684 = NameAndType        #851:#852     // setNullString:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #685 = NameAndType        #853:#836     // setQuote:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #686 = NameAndType        #853:#837     // setQuote:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #687 = NameAndType        #854:#855     // setQuoteMode:(Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #688 = NameAndType        #856:#836     // setRecordSeparator:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #689 = NameAndType        #856:#852     // setRecordSeparator:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #690 = NameAndType        #857:#349     // lineSeparator:()Ljava/lang/String;\n+  #691 = NameAndType        #858:#833     // setTrailingDelimiter:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #692 = NameAndType        #859:#833     // setTrim:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #693 = NameAndType        #396:#860     // toString:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n+  #694 = Utf8               ,\n+  #695 = NameAndType        #861:#278     // DOUBLE_QUOTE_CHAR:Ljava/lang/Character;\n+  #696 = Utf8               \\r\\n\n+  #697 = NameAndType        #254:#255     // DEFAULT:Lorg/apache/commons/csv/CSVFormat;\n+  #698 = NameAndType        #256:#255     // EXCEL:Lorg/apache/commons/csv/CSVFormat;\n+  #699 = NameAndType        #257:#255     // INFORMIX_UNLOAD:Lorg/apache/commons/csv/CSVFormat;\n+  #700 = NameAndType        #838:#852     // setDelimiter:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #701 = NameAndType        #258:#255     // INFORMIX_UNLOAD_CSV:Lorg/apache/commons/csv/CSVFormat;\n+  #702 = NameAndType        #259:#255     // MONGODB_CSV:Lorg/apache/commons/csv/CSVFormat;\n+  #703 = NameAndType        #260:#255     // MONGODB_TSV:Lorg/apache/commons/csv/CSVFormat;\n+  #704 = Utf8               \\\\N\n+  #705 = NameAndType        #862:#292     // ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n+  #706 = NameAndType        #261:#255     // MYSQL:Lorg/apache/commons/csv/CSVFormat;\n+  #707 = NameAndType        #262:#255     // ORACLE:Lorg/apache/commons/csv/CSVFormat;\n+  #708 = NameAndType        #263:#255     // POSTGRESQL_CSV:Lorg/apache/commons/csv/CSVFormat;\n+  #709 = NameAndType        #264:#255     // POSTGRESQL_TEXT:Lorg/apache/commons/csv/CSVFormat;\n+  #710 = NameAndType        #265:#255     // RFC4180:Lorg/apache/commons/csv/CSVFormat;\n+  #711 = NameAndType        #271:#255     // TDF:Lorg/apache/commons/csv/CSVFormat;\n+  #712 = Utf8               java/io/Serializable\n+  #713 = Utf8               org/apache/commons/csv/CSVFormat$1\n+  #714 = Utf8               org/apache/commons/csv/CSVFormat$Predefined\n+  #715 = Utf8               org/apache/commons/csv/CSVFormat$Builder\n+  #716 = Utf8               java/lang/Appendable\n+  #717 = Utf8               [C\n+  #718 = Utf8               org/apache/commons/csv/QuoteMode\n+  #719 = Utf8               java/util/Set\n+  #720 = Utf8               org/apache/commons/csv/DuplicateHeaderMode\n+  #721 = Utf8               java/sql/SQLException\n+  #722 = Utf8               ()Ljava/lang/Object;\n+  #723 = Utf8               java/util/Objects\n+  #724 = Utf8               requireNonNull\n+  #725 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #726 = Utf8               indexOf\n+  #727 = Utf8               (I)I\n+  #728 = Utf8               isEmpty\n+  #729 = Utf8               java/lang/Character\n+  #730 = Utf8               charValue\n+  #731 = Utf8               charAt\n+  #732 = Utf8               (I)C\n+  #733 = Utf8               (C)Ljava/lang/String;\n+  #734 = Utf8               ALLOW_ALL\n+  #735 = Methodref          #863.#864     // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #736 = Utf8               (I)Ljava/lang/Object;\n+  #737 = Methodref          #37.#865      // org/apache/commons/csv/CSVFormat.lambda$toStringArray$0:([Ljava/lang/Object;I)Ljava/lang/String;\n+  #738 = Utf8               (I)Ljava/lang/String;\n+  #739 = Utf8               apply\n+  #740 = Utf8               ([Ljava/lang/Object;)Ljava/util/function/IntFunction;\n+  #741 = Utf8               java/util/Arrays\n+  #742 = Utf8               setAll\n+  #743 = Utf8               ([Ljava/lang/Object;Ljava/util/function/IntFunction;)V\n+  #744 = Utf8               length\n+  #745 = Utf8               subSequence\n+  #746 = Utf8               (II)Ljava/lang/CharSequence;\n+  #747 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Predefined;\n+  #748 = Utf8               getFormat\n+  #749 = Utf8               access$2200\n+  #750 = Utf8               (Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/String;\n+  #751 = Utf8               access$2300\n+  #752 = Utf8               (Lorg/apache/commons/csv/CSVFormat$Builder;)Ljava/lang/Character;\n+  #753 = Utf8               access$2400\n+  #754 = Utf8               (Lorg/apache/commons/csv/CSVFormat$Builder;)Lorg/apache/commons/csv/QuoteMode;\n+  #755 = Utf8               access$2500\n+  #756 = Utf8               access$2600\n+  #757 = Utf8               access$2700\n+  #758 = Utf8               (Lorg/apache/commons/csv/CSVFormat$Builder;)Z\n+  #759 = Utf8               access$2800\n+  #760 = Utf8               access$2900\n+  #761 = Utf8               access$3000\n+  #762 = Utf8               access$3100\n+  #763 = Utf8               access$3200\n+  #764 = Utf8               (Lorg/apache/commons/csv/CSVFormat$Builder;)[Ljava/lang/String;\n+  #765 = Utf8               access$3300\n+  #766 = Utf8               access$3400\n+  #767 = Utf8               access$3500\n+  #768 = Utf8               access$3600\n+  #769 = Utf8               access$3700\n+  #770 = Utf8               access$3800\n+  #771 = Utf8               access$3900\n+  #772 = Utf8               access$4000\n+  #773 = Utf8               (Lorg/apache/commons/csv/CSVFormat$Builder;)Lorg/apache/commons/csv/DuplicateHeaderMode;\n+  #774 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #775 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #776 = Utf8               (C)Ljava/lang/Appendable;\n+  #777 = Utf8               (Ljava/lang/CharSequence;)Ljava/lang/Appendable;\n+  #778 = Utf8               create\n+  #779 = Utf8               (Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #780 = Utf8               build\n+  #781 = Utf8               getClass\n+  #782 = Utf8               ()Ljava/lang/Class;\n+  #783 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z\n+  #784 = Utf8               ([Ljava/lang/Object;[Ljava/lang/Object;)Z\n+  #785 = Utf8               (Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V\n+  #786 = Utf8               ([Ljava/lang/Object;)V\n+  #787 = Utf8               substring\n+  #788 = Utf8               (II)Ljava/lang/String;\n+  #789 = Utf8               close\n+  #790 = Utf8               addSuppressed\n+  #791 = Utf8               (Ljava/lang/Throwable;)V\n+  #792 = Utf8               ([Ljava/lang/Object;)I\n+  #793 = Utf8               java/lang/Boolean\n+  #794 = Utf8               (Z)Ljava/lang/Boolean;\n+  #795 = Utf8               hash\n+  #796 = Utf8               (Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n+  #797 = Utf8               (Ljava/io/File;)V\n+  #798 = Utf8               (Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V\n+  #799 = Utf8               ALL\n+  #800 = Utf8               (Ljava/lang/CharSequence;II)Ljava/lang/Appendable;\n+  #801 = Utf8               java/nio/file/Files\n+  #802 = Utf8               newBufferedWriter\n+  #803 = Utf8               (Ljava/nio/file/Path;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;\n+  #804 = Utf8               copyLarge\n+  #805 = Utf8               (Ljava/io/Reader;Ljava/io/Writer;)J\n+  #806 = Utf8               (Ljava/io/Reader;Ljava/lang/Appendable;)J\n+  #807 = Utf8               java/lang/System\n+  #808 = Utf8               out\n+  #809 = Utf8               Ljava/io/PrintStream;\n+  #810 = Utf8               toCharArray\n+  #811 = Utf8               ()[C\n+  #812 = Utf8               (Ljava/io/Reader;)V\n+  #813 = Utf8               (I)V\n+  #814 = Utf8               read\n+  #815 = Utf8               (C)Ljava/lang/StringBuilder;\n+  #816 = Utf8               lookAhead\n+  #817 = Utf8               (I)[C\n+  #818 = Utf8               ([C)V\n+  #819 = Utf8               setLength\n+  #820 = Utf8               MINIMAL\n+  #821 = Utf8               $SwitchMap$org$apache$commons$csv$QuoteMode\n+  #822 = Utf8               [I\n+  #823 = Utf8               ordinal\n+  #824 = Utf8               (Ljava/lang/String;)V\n+  #825 = Utf8               NONE\n+  #826 = Utf8               (Z)Ljava/lang/StringBuilder;\n+  #827 = Utf8               ALLOW_EMPTY\n+  #828 = Utf8               add\n+  #829 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #830 = Utf8               setDuplicateHeaderMode\n+  #831 = Utf8               (Lorg/apache/commons/csv/DuplicateHeaderMode;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #832 = Utf8               setAllowMissingColumnNames\n+  #833 = Utf8               (Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #834 = Utf8               setAutoFlush\n+  #835 = Utf8               setCommentMarker\n+  #836 = Utf8               (C)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #837 = Utf8               (Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #838 = Utf8               setDelimiter\n+  #839 = Utf8               setEscape\n+  #840 = Utf8               setHeader\n+  #841 = Utf8               ([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #842 = Utf8               setSkipHeaderRecord\n+  #843 = Utf8               (Ljava/lang/Class;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #844 = Utf8               (Ljava/sql/ResultSet;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #845 = Utf8               (Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #846 = Utf8               setHeaderComments\n+  #847 = Utf8               ([Ljava/lang/Object;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #848 = Utf8               setIgnoreEmptyLines\n+  #849 = Utf8               setIgnoreHeaderCase\n+  #850 = Utf8               setIgnoreSurroundingSpaces\n+  #851 = Utf8               setNullString\n+  #852 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #853 = Utf8               setQuote\n+  #854 = Utf8               setQuoteMode\n+  #855 = Utf8               (Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #856 = Utf8               setRecordSeparator\n+  #857 = Utf8               lineSeparator\n+  #858 = Utf8               setTrailingDelimiter\n+  #859 = Utf8               setTrim\n+  #860 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n+  #861 = Utf8               DOUBLE_QUOTE_CHAR\n+  #862 = Utf8               ALL_NON_NULL\n+  #863 = Class              #866          // java/lang/invoke/LambdaMetafactory\n+  #864 = NameAndType        #867:#870     // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #865 = NameAndType        #432:#433     // lambda$toStringArray$0:([Ljava/lang/Object;I)Ljava/lang/String;\n+  #866 = Utf8               java/lang/invoke/LambdaMetafactory\n+  #867 = Utf8               metafactory\n+  #868 = Class              #872          // java/lang/invoke/MethodHandles$Lookup\n+  #869 = Utf8               Lookup\n+  #870 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #871 = Class              #873          // java/lang/invoke/MethodHandles\n+  #872 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #873 = Utf8               java/lang/invoke/MethodHandles\n {\n   public static final org.apache.commons.csv.CSVFormat DEFAULT;\n     descriptor: Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n \n   public static final org.apache.commons.csv.CSVFormat EXCEL;\n     descriptor: Lorg/apache/commons/csv/CSVFormat;\n@@ -1765,141 +1750,102 @@\n         frame_type = 64 /* same_locals_1_stack_item */\n           stack = [ int ]\n \n   public java.lang.String format(java.lang.Object...);\n     descriptor: ([Ljava/lang/Object;)Ljava/lang/String;\n     flags: (0x0081) ACC_PUBLIC, ACC_VARARGS\n     Code:\n-      stack=4, locals=11, args_size=2\n+      stack=4, locals=7, args_size=2\n          0: new           #85                 // class java/io/StringWriter\n          3: dup\n          4: invokespecial #86                 // Method java/io/StringWriter.\"<init>\":()V\n          7: astore_2\n          8: new           #87                 // class org/apache/commons/csv/CSVPrinter\n         11: dup\n         12: aload_2\n         13: aload_0\n         14: invokespecial #88                 // Method org/apache/commons/csv/CSVPrinter.\"<init>\":(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V\n         17: astore_3\n-        18: aconst_null\n-        19: astore        4\n-        21: aload_3\n-        22: aload_1\n-        23: invokevirtual #89                 // Method org/apache/commons/csv/CSVPrinter.printRecord:([Ljava/lang/Object;)V\n-        26: aload_2\n-        27: invokevirtual #90                 // Method java/io/StringWriter.toString:()Ljava/lang/String;\n-        30: astore        5\n-        32: aload_0\n-        33: getfield      #15                 // Field recordSeparator:Ljava/lang/String;\n-        36: ifnull        55\n-        39: aload         5\n-        41: invokevirtual #91                 // Method java/lang/String.length:()I\n-        44: aload_0\n-        45: getfield      #15                 // Field recordSeparator:Ljava/lang/String;\n-        48: invokevirtual #91                 // Method java/lang/String.length:()I\n-        51: isub\n-        52: goto          60\n-        55: aload         5\n-        57: invokevirtual #91                 // Method java/lang/String.length:()I\n-        60: istore        6\n-        62: aload         5\n-        64: iconst_0\n-        65: iload         6\n-        67: invokevirtual #92                 // Method java/lang/String.substring:(II)Ljava/lang/String;\n-        70: astore        7\n-        72: aload_3\n-        73: ifnull        104\n-        76: aload         4\n-        78: ifnull        100\n-        81: aload_3\n-        82: invokevirtual #93                 // Method org/apache/commons/csv/CSVPrinter.close:()V\n-        85: goto          104\n-        88: astore        8\n-        90: aload         4\n-        92: aload         8\n-        94: invokevirtual #95                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-        97: goto          104\n-       100: aload_3\n-       101: invokevirtual #93                 // Method org/apache/commons/csv/CSVPrinter.close:()V\n-       104: aload         7\n-       106: areturn\n-       107: astore        5\n-       109: aload         5\n-       111: astore        4\n-       113: aload         5\n-       115: athrow\n-       116: astore        9\n-       118: aload_3\n-       119: ifnull        150\n-       122: aload         4\n-       124: ifnull        146\n-       127: aload_3\n-       128: invokevirtual #93                 // Method org/apache/commons/csv/CSVPrinter.close:()V\n-       131: goto          150\n-       134: astore        10\n-       136: aload         4\n-       138: aload         10\n-       140: invokevirtual #95                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-       143: goto          150\n-       146: aload_3\n-       147: invokevirtual #93                 // Method org/apache/commons/csv/CSVPrinter.close:()V\n-       150: aload         9\n-       152: athrow\n-       153: astore_3\n-       154: new           #97                 // class java/lang/IllegalStateException\n-       157: dup\n-       158: aload_3\n-       159: invokespecial #98                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n-       162: athrow\n+        18: aload_3\n+        19: aload_1\n+        20: invokevirtual #89                 // Method org/apache/commons/csv/CSVPrinter.printRecord:([Ljava/lang/Object;)V\n+        23: aload_2\n+        24: invokevirtual #90                 // Method java/io/StringWriter.toString:()Ljava/lang/String;\n+        27: astore        4\n+        29: aload_0\n+        30: getfield      #15                 // Field recordSeparator:Ljava/lang/String;\n+        33: ifnull        52\n+        36: aload         4\n+        38: invokevirtual #91                 // Method java/lang/String.length:()I\n+        41: aload_0\n+        42: getfield      #15                 // Field recordSeparator:Ljava/lang/String;\n+        45: invokevirtual #91                 // Method java/lang/String.length:()I\n+        48: isub\n+        49: goto          57\n+        52: aload         4\n+        54: invokevirtual #91                 // Method java/lang/String.length:()I\n+        57: istore        5\n+        59: aload         4\n+        61: iconst_0\n+        62: iload         5\n+        64: invokevirtual #92                 // Method java/lang/String.substring:(II)Ljava/lang/String;\n+        67: astore        6\n+        69: aload_3\n+        70: invokevirtual #93                 // Method org/apache/commons/csv/CSVPrinter.close:()V\n+        73: aload         6\n+        75: areturn\n+        76: astore        4\n+        78: aload_3\n+        79: invokevirtual #93                 // Method org/apache/commons/csv/CSVPrinter.close:()V\n+        82: goto          94\n+        85: astore        5\n+        87: aload         4\n+        89: aload         5\n+        91: invokevirtual #95                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+        94: aload         4\n+        96: athrow\n+        97: astore_3\n+        98: new           #97                 // class java/lang/IllegalStateException\n+       101: dup\n+       102: aload_3\n+       103: invokespecial #98                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n+       106: athrow\n       Exception table:\n          from    to  target type\n-            81    85    88   Class java/lang/Throwable\n-            21    72   107   Class java/lang/Throwable\n-            21    72   116   any\n-           127   131   134   Class java/lang/Throwable\n-           107   118   116   any\n-             8   104   153   Class java/io/IOException\n-           107   153   153   Class java/io/IOException\n+            18    69    76   Class java/lang/Throwable\n+            78    82    85   Class java/lang/Throwable\n+             8    73    97   Class java/io/IOException\n+            76    97    97   Class java/io/IOException\n       LineNumberTable:\n         line 1482: 0\n         line 1483: 8\n-        line 1484: 21\n-        line 1485: 26\n-        line 1486: 32\n-        line 1487: 62\n-        line 1488: 72\n-        line 1487: 104\n-        line 1483: 107\n-        line 1488: 116\n-        line 1490: 154\n-      StackMapTable: number_of_entries = 11\n-        frame_type = 255 /* full_frame */\n-          offset_delta = 55\n-          locals = [ class org/apache/commons/csv/CSVFormat, class \"[Ljava/lang/Object;\", class java/io/StringWriter, class org/apache/commons/csv/CSVPrinter, class java/lang/Throwable, class java/lang/String ]\n-          stack = []\n+        line 1484: 18\n+        line 1485: 23\n+        line 1486: 29\n+        line 1487: 59\n+        line 1488: 69\n+        line 1487: 73\n+        line 1483: 76\n+        line 1488: 97\n+        line 1490: 98\n+      StackMapTable: number_of_entries = 6\n+        frame_type = 254 /* append */\n+          offset_delta = 52\n+          locals = [ class java/io/StringWriter, class org/apache/commons/csv/CSVPrinter, class java/lang/String ]\n         frame_type = 68 /* same_locals_1_stack_item */\n           stack = [ int ]\n         frame_type = 255 /* full_frame */\n-          offset_delta = 27\n-          locals = [ class org/apache/commons/csv/CSVFormat, class \"[Ljava/lang/Object;\", class java/io/StringWriter, class org/apache/commons/csv/CSVPrinter, class java/lang/Throwable, class java/lang/String, int, class java/lang/String ]\n+          offset_delta = 18\n+          locals = [ class org/apache/commons/csv/CSVFormat, class \"[Ljava/lang/Object;\", class java/io/StringWriter, class org/apache/commons/csv/CSVPrinter ]\n           stack = [ class java/lang/Throwable ]\n-        frame_type = 11 /* same */\n-        frame_type = 3 /* same */\n         frame_type = 255 /* full_frame */\n-          offset_delta = 2\n+          offset_delta = 8\n           locals = [ class org/apache/commons/csv/CSVFormat, class \"[Ljava/lang/Object;\", class java/io/StringWriter, class org/apache/commons/csv/CSVPrinter, class java/lang/Throwable ]\n           stack = [ class java/lang/Throwable ]\n-        frame_type = 72 /* same_locals_1_stack_item */\n-          stack = [ class java/lang/Throwable ]\n-        frame_type = 255 /* full_frame */\n-          offset_delta = 17\n-          locals = [ class org/apache/commons/csv/CSVFormat, class \"[Ljava/lang/Object;\", class java/io/StringWriter, class org/apache/commons/csv/CSVPrinter, class java/lang/Throwable, top, top, top, top, class java/lang/Throwable ]\n-          stack = [ class java/lang/Throwable ]\n-        frame_type = 11 /* same */\n-        frame_type = 3 /* same */\n+        frame_type = 8 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 2\n           locals = [ class org/apache/commons/csv/CSVFormat, class \"[Ljava/lang/Object;\", class java/io/StringWriter ]\n           stack = [ class java/io/IOException ]\n \n   public boolean getAllowDuplicateHeaderNames();\n     descriptor: ()Z\n@@ -1918,15 +1864,15 @@\n         line 1503: 0\n       StackMapTable: number_of_entries = 2\n         frame_type = 14 /* same */\n         frame_type = 64 /* same_locals_1_stack_item */\n           stack = [ int ]\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public boolean getAllowMissingColumnNames();\n     descriptor: ()Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n@@ -1968,15 +1914,15 @@\n          4: iconst_0\n          5: invokevirtual #99                 // Method java/lang/String.charAt:(I)C\n          8: ireturn\n       LineNumberTable:\n         line 1542: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public java.lang.String getDelimiterString();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n@@ -4178,15 +4124,15 @@\n          7: invokevirtual #202                // Method org/apache/commons/csv/CSVFormat$Builder.setDuplicateHeaderMode:(Lorg/apache/commons/csv/DuplicateHeaderMode;)Lorg/apache/commons/csv/CSVFormat$Builder;\n         10: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         13: areturn\n       LineNumberTable:\n         line 2331: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withAllowDuplicateHeaderNames(boolean);\n     descriptor: (Z)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=3, args_size=2\n@@ -4207,15 +4153,15 @@\n         line 2345: 14\n       StackMapTable: number_of_entries = 2\n         frame_type = 10 /* same */\n         frame_type = 66 /* same_locals_1_stack_item */\n           stack = [ class org/apache/commons/csv/DuplicateHeaderMode ]\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withAllowMissingColumnNames();\n     descriptor: ()Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n@@ -4225,15 +4171,15 @@\n          5: invokevirtual #203                // Method org/apache/commons/csv/CSVFormat$Builder.setAllowMissingColumnNames:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2358: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withAllowMissingColumnNames(boolean);\n     descriptor: (Z)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -4243,15 +4189,15 @@\n          5: invokevirtual #203                // Method org/apache/commons/csv/CSVFormat$Builder.setAllowMissingColumnNames:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2371: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withAutoFlush(boolean);\n     descriptor: (Z)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -4261,15 +4207,15 @@\n          5: invokevirtual #204                // Method org/apache/commons/csv/CSVFormat$Builder.setAutoFlush:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2385: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withCommentMarker(char);\n     descriptor: (C)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -4279,15 +4225,15 @@\n          5: invokevirtual #205                // Method org/apache/commons/csv/CSVFormat$Builder.setCommentMarker:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2400: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withCommentMarker(java.lang.Character);\n     descriptor: (Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -4297,15 +4243,15 @@\n          5: invokevirtual #206                // Method org/apache/commons/csv/CSVFormat$Builder.setCommentMarker:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2415: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withDelimiter(char);\n     descriptor: (C)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -4315,15 +4261,15 @@\n          5: invokevirtual #207                // Method org/apache/commons/csv/CSVFormat$Builder.setDelimiter:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2428: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withEscape(char);\n     descriptor: (C)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -4333,15 +4279,15 @@\n          5: invokevirtual #208                // Method org/apache/commons/csv/CSVFormat$Builder.setEscape:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2441: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withEscape(java.lang.Character);\n     descriptor: (Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -4351,15 +4297,15 @@\n          5: invokevirtual #209                // Method org/apache/commons/csv/CSVFormat$Builder.setEscape:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2454: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withFirstRecordAsHeader();\n     descriptor: ()Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n@@ -4376,15 +4322,15 @@\n         line 2477: 0\n         line 2478: 8\n         line 2479: 12\n         line 2480: 15\n         line 2477: 18\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withHeader(java.lang.Class<? extends java.lang.Enum<?>>);\n     descriptor: (Ljava/lang/Class;)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -4393,17 +4339,17 @@\n          4: aload_1\n          5: invokevirtual #212                // Method org/apache/commons/csv/CSVFormat$Builder.setHeader:(Ljava/lang/Class;)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2511: 0\n     Deprecated: true\n-    Signature: #424                         // (Ljava/lang/Class<+Ljava/lang/Enum<*>;>;)Lorg/apache/commons/csv/CSVFormat;\n+    Signature: #413                         // (Ljava/lang/Class<+Ljava/lang/Enum<*>;>;)Lorg/apache/commons/csv/CSVFormat;\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withHeader(java.sql.ResultSet) throws java.sql.SQLException;\n     descriptor: (Ljava/sql/ResultSet;)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -4415,15 +4361,15 @@\n         11: areturn\n       LineNumberTable:\n         line 2539: 0\n     Exceptions:\n       throws java.sql.SQLException\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withHeader(java.sql.ResultSetMetaData) throws java.sql.SQLException;\n     descriptor: (Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -4435,15 +4381,15 @@\n         11: areturn\n       LineNumberTable:\n         line 2567: 0\n     Exceptions:\n       throws java.sql.SQLException\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withHeader(java.lang.String...);\n     descriptor: ([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0081) ACC_PUBLIC, ACC_VARARGS\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -4453,15 +4399,15 @@\n          5: invokevirtual #210                // Method org/apache/commons/csv/CSVFormat$Builder.setHeader:([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2594: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withHeaderComments(java.lang.Object...);\n     descriptor: ([Ljava/lang/Object;)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0081) ACC_PUBLIC, ACC_VARARGS\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -4471,15 +4417,15 @@\n          5: invokevirtual #215                // Method org/apache/commons/csv/CSVFormat$Builder.setHeaderComments:([Ljava/lang/Object;)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2613: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withIgnoreEmptyLines();\n     descriptor: ()Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n@@ -4489,15 +4435,15 @@\n          5: invokevirtual #216                // Method org/apache/commons/csv/CSVFormat$Builder.setIgnoreEmptyLines:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2626: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withIgnoreEmptyLines(boolean);\n     descriptor: (Z)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -4507,15 +4453,15 @@\n          5: invokevirtual #216                // Method org/apache/commons/csv/CSVFormat$Builder.setIgnoreEmptyLines:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2639: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withIgnoreHeaderCase();\n     descriptor: ()Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n@@ -4525,15 +4471,15 @@\n          5: invokevirtual #217                // Method org/apache/commons/csv/CSVFormat$Builder.setIgnoreHeaderCase:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2652: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withIgnoreHeaderCase(boolean);\n     descriptor: (Z)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -4543,15 +4489,15 @@\n          5: invokevirtual #217                // Method org/apache/commons/csv/CSVFormat$Builder.setIgnoreHeaderCase:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2665: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withIgnoreSurroundingSpaces();\n     descriptor: ()Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n@@ -4561,15 +4507,15 @@\n          5: invokevirtual #218                // Method org/apache/commons/csv/CSVFormat$Builder.setIgnoreSurroundingSpaces:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2678: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withIgnoreSurroundingSpaces(boolean);\n     descriptor: (Z)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -4579,15 +4525,15 @@\n          5: invokevirtual #218                // Method org/apache/commons/csv/CSVFormat$Builder.setIgnoreSurroundingSpaces:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2690: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withNullString(java.lang.String);\n     descriptor: (Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -4597,15 +4543,15 @@\n          5: invokevirtual #219                // Method org/apache/commons/csv/CSVFormat$Builder.setNullString:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2706: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withQuote(char);\n     descriptor: (C)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -4615,15 +4561,15 @@\n          5: invokevirtual #220                // Method org/apache/commons/csv/CSVFormat$Builder.setQuote:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2719: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withQuote(java.lang.Character);\n     descriptor: (Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -4633,15 +4579,15 @@\n          5: invokevirtual #221                // Method org/apache/commons/csv/CSVFormat$Builder.setQuote:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2732: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withQuoteMode(org.apache.commons.csv.QuoteMode);\n     descriptor: (Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -4651,15 +4597,15 @@\n          5: invokevirtual #222                // Method org/apache/commons/csv/CSVFormat$Builder.setQuoteMode:(Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2745: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withRecordSeparator(char);\n     descriptor: (C)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -4669,15 +4615,15 @@\n          5: invokevirtual #223                // Method org/apache/commons/csv/CSVFormat$Builder.setRecordSeparator:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2762: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withRecordSeparator(java.lang.String);\n     descriptor: (Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -4687,15 +4633,15 @@\n          5: invokevirtual #224                // Method org/apache/commons/csv/CSVFormat$Builder.setRecordSeparator:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2780: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withSkipHeaderRecord();\n     descriptor: ()Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n@@ -4705,15 +4651,15 @@\n          5: invokevirtual #211                // Method org/apache/commons/csv/CSVFormat$Builder.setSkipHeaderRecord:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2794: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withSkipHeaderRecord(boolean);\n     descriptor: (Z)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -4723,15 +4669,15 @@\n          5: invokevirtual #211                // Method org/apache/commons/csv/CSVFormat$Builder.setSkipHeaderRecord:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2807: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withSystemRecordSeparator();\n     descriptor: ()Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n@@ -4741,15 +4687,15 @@\n          7: invokevirtual #224                // Method org/apache/commons/csv/CSVFormat$Builder.setRecordSeparator:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n         10: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         13: areturn\n       LineNumberTable:\n         line 2825: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withTrailingDelimiter();\n     descriptor: ()Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n@@ -4759,15 +4705,15 @@\n          5: invokevirtual #226                // Method org/apache/commons/csv/CSVFormat$Builder.setTrailingDelimiter:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2837: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withTrailingDelimiter(boolean);\n     descriptor: (Z)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -4777,15 +4723,15 @@\n          5: invokevirtual #226                // Method org/apache/commons/csv/CSVFormat$Builder.setTrailingDelimiter:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2850: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withTrim();\n     descriptor: ()Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n@@ -4795,15 +4741,15 @@\n          5: invokevirtual #227                // Method org/apache/commons/csv/CSVFormat$Builder.setTrim:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2862: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   public org.apache.commons.csv.CSVFormat withTrim(boolean);\n     descriptor: (Z)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -4813,15 +4759,15 @@\n          5: invokevirtual #227                // Method org/apache/commons/csv/CSVFormat$Builder.setTrim:(Z)Lorg/apache/commons/csv/CSVFormat$Builder;\n          8: invokevirtual #81                 // Method org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n         11: areturn\n       LineNumberTable:\n         line 2875: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #348()\n+      0: #341()\n         java.lang.Deprecated\n \n   private static java.lang.String lambda$toStringArray$0(java.lang.Object[], int);\n     descriptor: ([Ljava/lang/Object;I)Ljava/lang/String;\n     flags: (0x100a) ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -5327,14 +5273,14 @@\n         line 1175: 422\n }\n SourceFile: \"CSVFormat.java\"\n InnerClasses:\n   static #248;                            // class org/apache/commons/csv/CSVFormat$1\n   public static final #251= #250 of #37;  // Predefined=class org/apache/commons/csv/CSVFormat$Predefined of class org/apache/commons/csv/CSVFormat\n   public static #253= #252 of #37;        // Builder=class org/apache/commons/csv/CSVFormat$Builder of class org/apache/commons/csv/CSVFormat\n-  public static final #884= #883 of #886; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n+  public static final #869= #868 of #871; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #521 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  0: #509 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #522 (I)Ljava/lang/Object;\n-      #523 REF_invokeStatic org/apache/commons/csv/CSVFormat.lambda$toStringArray$0:([Ljava/lang/Object;I)Ljava/lang/String;\n-      #524 (I)Ljava/lang/String;\n+      #510 (I)Ljava/lang/Object;\n+      #511 REF_invokeStatic org/apache/commons/csv/CSVFormat.lambda$toStringArray$0:([Ljava/lang/Object;I)Ljava/lang/String;\n+      #512 (I)Ljava/lang/String;\n"}]}
