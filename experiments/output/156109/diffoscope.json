{"diffoscope-json-version": 1, "source1": "first/FastDatePrinter.class", "source2": "second/FastDatePrinter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,20 +1,20 @@\n \n package org.apache.commons.lang3.time;\n \n-import java.util.concurrent.ConcurrentHashMap;\n import java.io.ObjectInputStream;\n import java.io.IOException;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import java.util.Calendar;\n import java.util.Date;\n import java.text.FieldPosition;\n import java.util.ArrayList;\n import java.text.DateFormatSymbols;\n import java.util.List;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n import java.util.Locale;\n import java.util.TimeZone;\n import java.io.Serializable;\n \n public class FastDatePrinter implements DatePrinter, Serializable\n {\n@@ -27,14 +27,18 @@\n     private final TimeZone mTimeZone;\n     private final Locale mLocale;\n     private transient FastDatePrinter.Rule[] mRules;\n     private transient int mMaxLengthEstimate;\n     private static final int MAX_DIGITS = 10;\n     private static final ConcurrentMap<FastDatePrinter.TimeZoneDisplayKey, String> cTimeZoneDisplayCache;\n     \n+    static {\n+        cTimeZoneDisplayCache = new ConcurrentHashMap<FastDatePrinter.TimeZoneDisplayKey, String>(7);\n+    }\n+    \n     protected FastDatePrinter(final String pattern, final TimeZone timeZone, final Locale locale) {\n         this.mPattern = pattern;\n         this.mTimeZone = timeZone;\n         this.mLocale = locale;\n         this.init();\n     }\n     \n@@ -355,15 +359,17 @@\n     @Deprecated\n     protected StringBuffer applyRules(final Calendar calendar, final StringBuffer buf) {\n         return this.applyRules(calendar, buf);\n     }\n     \n     private <B extends Appendable> B applyRules(final Calendar calendar, final B buf) {\n         try {\n-            for (final FastDatePrinter.Rule rule : this.mRules) {\n+            FastDatePrinter.Rule[] mRules;\n+            for (int length = (mRules = this.mRules).length, i = 0; i < length; ++i) {\n+                final FastDatePrinter.Rule rule = mRules[i];\n                 rule.appendTo((Appendable)buf, calendar);\n             }\n         }\n         catch (final IOException ioe) {\n             ExceptionUtils.rethrow((Throwable)ioe);\n         }\n         return buf;\n@@ -485,12 +491,8 @@\n             final String prior = (String)FastDatePrinter.cTimeZoneDisplayCache.putIfAbsent(key, value);\n             if (prior != null) {\n                 value = prior;\n             }\n         }\n         return value;\n     }\n-    \n-    static {\n-        cTimeZoneDisplayCache = new ConcurrentHashMap<FastDatePrinter.TimeZoneDisplayKey, String>(7);\n-    }\n }\n"}]}
