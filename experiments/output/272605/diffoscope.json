{"diffoscope-json-version": 1, "source1": "first/IllegalCatchCheck.class", "source2": "second/IllegalCatchCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -20,17 +20,17 @@\n     public static final String MSG_KEY = \"illegal.catch\";\n     private final Set<String> illegalClassNames;\n     \n     public IllegalCatchCheck() {\n         this.illegalClassNames = Arrays.stream(new String[] { \"Exception\", \"Error\", \"RuntimeException\", \"Throwable\", \"java.lang.Error\", \"java.lang.Exception\", \"java.lang.RuntimeException\", \"java.lang.Throwable\" }).collect((Collector<? super String, ?, Set<String>>)Collectors.toCollection((Supplier<R>)HashSet::new));\n     }\n     \n-    public void setIllegalClassNames(final String... classNames) {\n+    public void setIllegalClassNames(final String... array) {\n         this.illegalClassNames.clear();\n-        this.illegalClassNames.addAll(CheckUtil.parseClassNames(classNames));\n+        this.illegalClassNames.addAll(CheckUtil.parseClassNames(array));\n     }\n     \n     public int[] getDefaultTokens() {\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n@@ -38,18 +38,15 @@\n     }\n     \n     public int[] getAcceptableTokens() {\n         return this.getRequiredTokens();\n     }\n     \n     public void visitToken(final DetailAST detailAST) {\n-        final DetailAST parameterDef = detailAST.findFirstToken(21);\n-        final DetailAST excTypeParent = parameterDef.findFirstToken(13);\n-        for (DetailAST currentNode = excTypeParent.getFirstChild(); currentNode != null; currentNode = currentNode.getNextSibling()) {\n-            final FullIdent ident = FullIdent.createFullIdent(currentNode);\n-            final String identText = ident.getText();\n-            if (this.illegalClassNames.contains(identText)) {\n-                this.log(detailAST, \"illegal.catch\", new Object[] { identText });\n+        for (DetailAST detailAST2 = detailAST.findFirstToken(21).findFirstToken(13).getFirstChild(); detailAST2 != null; detailAST2 = detailAST2.getNextSibling()) {\n+            final String text = FullIdent.createFullIdent(detailAST2).getText();\n+            if (this.illegalClassNames.contains(text)) {\n+                this.log(detailAST, \"illegal.catch\", new Object[] { text });\n             }\n         }\n     }\n }\n"}]}
