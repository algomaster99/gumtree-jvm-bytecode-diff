{"diffoscope-json-version": 1, "source1": "first/AbstractImmutableNodeHandler.class", "source2": "second/AbstractImmutableNodeHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -22,15 +22,15 @@\n     }\n     \n     public <C> int getMatchingChildrenCount(final ImmutableNode node, final NodeMatcher<C> matcher, final C criterion) {\n         return this.getMatchingChildren(node, matcher, criterion).size();\n     }\n     \n     public <C> List<ImmutableNode> getMatchingChildren(final ImmutableNode node, final NodeMatcher<C> matcher, final C criterion) {\n-        return Collections.unmodifiableList((List<? extends ImmutableNode>)(List<? extends T>)node.stream().filter(c -> matcher.matches((Object)c, (NodeHandler)this, criterion)).collect((Collector<? super Object, ?, List<? extends T>>)Collectors.toList()));\n+        return Collections.unmodifiableList((List<? extends ImmutableNode>)(List<? extends T>)node.stream().filter(c -> nodeMatcher.matches((Object)c, (NodeHandler)this, o)).collect((Collector<? super Object, ?, List<? extends T>>)Collectors.toList()));\n     }\n     \n     public List<ImmutableNode> getChildren(final ImmutableNode node, final String name) {\n         return this.getMatchingChildren(node, (org.apache.commons.configuration2.tree.NodeMatcher<String>)NodeNameMatchers.EQUALS, name);\n     }\n     \n     public ImmutableNode getChild(final ImmutableNode node, final int index) {\n"}]}
