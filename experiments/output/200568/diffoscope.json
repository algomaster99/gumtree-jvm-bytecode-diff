{"diffoscope-json-version": 1, "source1": "first/Module.class", "source2": "second/Module.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -20,79 +20,84 @@\n     private ModuleProvides[] providesTable;\n     \n     Module(final int nameIndex, final int length, final DataInput input, final ConstantPool constantPool) throws IOException {\n         super((byte)22, nameIndex, length, constantPool);\n         this.moduleNameIndex = input.readUnsignedShort();\n         this.moduleFlags = input.readUnsignedShort();\n         this.moduleVersionIndex = input.readUnsignedShort();\n-        final int requiresCount = input.readUnsignedShort();\n-        this.requiresTable = new ModuleRequires[requiresCount];\n-        for (int i = 0; i < requiresCount; ++i) {\n+        final int unsignedShort = input.readUnsignedShort();\n+        this.requiresTable = new ModuleRequires[unsignedShort];\n+        for (int i = 0; i < unsignedShort; ++i) {\n             this.requiresTable[i] = new ModuleRequires(input);\n         }\n-        final int exportsCount = input.readUnsignedShort();\n-        this.exportsTable = new ModuleExports[exportsCount];\n-        for (int j = 0; j < exportsCount; ++j) {\n+        final int unsignedShort2 = input.readUnsignedShort();\n+        this.exportsTable = new ModuleExports[unsignedShort2];\n+        for (int j = 0; j < unsignedShort2; ++j) {\n             this.exportsTable[j] = new ModuleExports(input);\n         }\n-        final int opensCount = input.readUnsignedShort();\n-        this.opensTable = new ModuleOpens[opensCount];\n-        for (int k = 0; k < opensCount; ++k) {\n+        final int unsignedShort3 = input.readUnsignedShort();\n+        this.opensTable = new ModuleOpens[unsignedShort3];\n+        for (int k = 0; k < unsignedShort3; ++k) {\n             this.opensTable[k] = new ModuleOpens(input);\n         }\n         this.usesCount = input.readUnsignedShort();\n         this.usesIndex = new int[this.usesCount];\n-        for (int k = 0; k < this.usesCount; ++k) {\n-            this.usesIndex[k] = input.readUnsignedShort();\n+        for (int l = 0; l < this.usesCount; ++l) {\n+            this.usesIndex[l] = input.readUnsignedShort();\n         }\n-        final int providesCount = input.readUnsignedShort();\n-        this.providesTable = new ModuleProvides[providesCount];\n-        for (int l = 0; l < providesCount; ++l) {\n-            this.providesTable[l] = new ModuleProvides(input);\n+        final int unsignedShort4 = input.readUnsignedShort();\n+        this.providesTable = new ModuleProvides[unsignedShort4];\n+        for (int n = 0; n < unsignedShort4; ++n) {\n+            this.providesTable[n] = new ModuleProvides(input);\n         }\n     }\n     \n     public void accept(final Visitor v) {\n         v.visitModule(this);\n     }\n     \n     public Attribute copy(final ConstantPool constantPool) {\n-        final Module c = (Module)this.clone();\n-        Arrays.setAll(c.requiresTable = new ModuleRequires[this.requiresTable.length], i -> this.requiresTable[i].copy());\n-        Arrays.setAll(c.exportsTable = new ModuleExports[this.exportsTable.length], i -> this.exportsTable[i].copy());\n-        Arrays.setAll(c.opensTable = new ModuleOpens[this.opensTable.length], i -> this.opensTable[i].copy());\n-        Arrays.setAll(c.providesTable = new ModuleProvides[this.providesTable.length], i -> this.providesTable[i].copy());\n-        c.setConstantPool(constantPool);\n-        return c;\n+        final Module module = (Module)this.clone();\n+        Arrays.setAll(module.requiresTable = new ModuleRequires[this.requiresTable.length], i -> this.requiresTable[i].copy());\n+        Arrays.setAll(module.exportsTable = new ModuleExports[this.exportsTable.length], i -> this.exportsTable[i].copy());\n+        Arrays.setAll(module.opensTable = new ModuleOpens[this.opensTable.length], i -> this.opensTable[i].copy());\n+        Arrays.setAll(module.providesTable = new ModuleProvides[this.providesTable.length], i -> this.providesTable[i].copy());\n+        module.setConstantPool(constantPool);\n+        return module;\n     }\n     \n     public void dump(final DataOutputStream file) throws IOException {\n         super.dump(file);\n         file.writeShort(this.moduleNameIndex);\n         file.writeShort(this.moduleFlags);\n         file.writeShort(this.moduleVersionIndex);\n         file.writeShort(this.requiresTable.length);\n-        for (final ModuleRequires entry : this.requiresTable) {\n-            entry.dump(file);\n+        final ModuleRequires[] requiresTable = this.requiresTable;\n+        for (int length = requiresTable.length, i = 0; i < length; ++i) {\n+            requiresTable[i].dump(file);\n         }\n         file.writeShort(this.exportsTable.length);\n-        for (final ModuleExports entry2 : this.exportsTable) {\n-            entry2.dump(file);\n+        final ModuleExports[] exportsTable = this.exportsTable;\n+        for (int length2 = exportsTable.length, j = 0; j < length2; ++j) {\n+            exportsTable[j].dump(file);\n         }\n         file.writeShort(this.opensTable.length);\n-        for (final ModuleOpens entry3 : this.opensTable) {\n-            entry3.dump(file);\n+        final ModuleOpens[] opensTable = this.opensTable;\n+        for (int length3 = opensTable.length, k = 0; k < length3; ++k) {\n+            opensTable[k].dump(file);\n         }\n         file.writeShort(this.usesIndex.length);\n-        for (final int entry4 : this.usesIndex) {\n-            file.writeShort(entry4);\n+        final int[] usesIndex = this.usesIndex;\n+        for (int length4 = usesIndex.length, l = 0; l < length4; ++l) {\n+            file.writeShort(usesIndex[l]);\n         }\n         file.writeShort(this.providesTable.length);\n-        for (final ModuleProvides entry5 : this.providesTable) {\n-            entry5.dump(file);\n+        final ModuleProvides[] providesTable = this.providesTable;\n+        for (int length5 = providesTable.length, n = 0; n < length5; ++n) {\n+            providesTable[n].dump(file);\n         }\n     }\n     \n     public ModuleExports[] getExportsTable() {\n         return this.exportsTable;\n     }\n     \n@@ -105,38 +110,41 @@\n     }\n     \n     public ModuleRequires[] getRequiresTable() {\n         return this.requiresTable;\n     }\n     \n     public String toString() {\n-        final ConstantPool cp = super.getConstantPool();\n-        final StringBuilder buf = new StringBuilder();\n-        buf.append(\"Module:\\n\");\n-        buf.append(\"  name:    \").append(Utility.pathToPackage(cp.getConstantString(this.moduleNameIndex, (byte)19))).append(\"\\n\");\n-        buf.append(\"  flags:   \").append(String.format(\"%04x\", Integer.valueOf(this.moduleFlags))).append(\"\\n\");\n-        final String version = (this.moduleVersionIndex == 0) ? \"0\" : cp.getConstantString(this.moduleVersionIndex, (byte)1);\n-        buf.append(\"  version: \").append(version).append(\"\\n\");\n-        buf.append(\"  requires(\").append(this.requiresTable.length).append(\"):\\n\");\n-        for (final ModuleRequires module : this.requiresTable) {\n-            buf.append(\"    \").append(module.toString(cp)).append(\"\\n\");\n-        }\n-        buf.append(\"  exports(\").append(this.exportsTable.length).append(\"):\\n\");\n-        for (final ModuleExports module2 : this.exportsTable) {\n-            buf.append(\"    \").append(module2.toString(cp)).append(\"\\n\");\n-        }\n-        buf.append(\"  opens(\").append(this.opensTable.length).append(\"):\\n\");\n-        for (final ModuleOpens module3 : this.opensTable) {\n-            buf.append(\"    \").append(module3.toString(cp)).append(\"\\n\");\n-        }\n-        buf.append(\"  uses(\").append(this.usesIndex.length).append(\"):\\n\");\n-        for (final int index : this.usesIndex) {\n-            final String className = cp.getConstantString(index, (byte)7);\n-            buf.append(\"    \").append(Utility.compactClassName(className, false)).append(\"\\n\");\n-        }\n-        buf.append(\"  provides(\").append(this.providesTable.length).append(\"):\\n\");\n-        for (final ModuleProvides module4 : this.providesTable) {\n-            buf.append(\"    \").append(module4.toString(cp)).append(\"\\n\");\n+        final ConstantPool constantPool = super.getConstantPool();\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"Module:\\n\");\n+        sb.append(\"  name:    \").append(Utility.pathToPackage(constantPool.getConstantString(this.moduleNameIndex, (byte)19))).append(\"\\n\");\n+        sb.append(\"  flags:   \").append(String.format(\"%04x\", Integer.valueOf(this.moduleFlags))).append(\"\\n\");\n+        sb.append(\"  version: \").append((this.moduleVersionIndex == 0) ? \"0\" : constantPool.getConstantString(this.moduleVersionIndex, (byte)1)).append(\"\\n\");\n+        sb.append(\"  requires(\").append(this.requiresTable.length).append(\"):\\n\");\n+        final ModuleRequires[] requiresTable = this.requiresTable;\n+        for (int length = requiresTable.length, i = 0; i < length; ++i) {\n+            sb.append(\"    \").append(requiresTable[i].toString(constantPool)).append(\"\\n\");\n+        }\n+        sb.append(\"  exports(\").append(this.exportsTable.length).append(\"):\\n\");\n+        final ModuleExports[] exportsTable = this.exportsTable;\n+        for (int length2 = exportsTable.length, j = 0; j < length2; ++j) {\n+            sb.append(\"    \").append(exportsTable[j].toString(constantPool)).append(\"\\n\");\n+        }\n+        sb.append(\"  opens(\").append(this.opensTable.length).append(\"):\\n\");\n+        final ModuleOpens[] opensTable = this.opensTable;\n+        for (int length3 = opensTable.length, k = 0; k < length3; ++k) {\n+            sb.append(\"    \").append(opensTable[k].toString(constantPool)).append(\"\\n\");\n+        }\n+        sb.append(\"  uses(\").append(this.usesIndex.length).append(\"):\\n\");\n+        final int[] usesIndex = this.usesIndex;\n+        for (int length4 = usesIndex.length, l = 0; l < length4; ++l) {\n+            sb.append(\"    \").append(Utility.compactClassName(constantPool.getConstantString(usesIndex[l], (byte)7), false)).append(\"\\n\");\n+        }\n+        sb.append(\"  provides(\").append(this.providesTable.length).append(\"):\\n\");\n+        final ModuleProvides[] providesTable = this.providesTable;\n+        for (int length5 = providesTable.length, n = 0; n < length5; ++n) {\n+            sb.append(\"    \").append(providesTable[n].toString(constantPool)).append(\"\\n\");\n         }\n-        return buf.substring();\n+        return sb.substring();\n     }\n }\n"}]}
