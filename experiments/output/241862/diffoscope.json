{"diffoscope-json-version": 1, "source1": "first/VerifierFactory.class", "source2": "second/VerifierFactory.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,41 +11,41 @@\n {\n     private static final Map<String, Verifier> hashMap;\n     private static final List<VerifierFactoryObserver> observers;\n     \n     private VerifierFactory() {\n     }\n     \n-    public static Verifier getVerifier(final String fullyQualifiedClassName) {\n-        Verifier v = (Verifier)VerifierFactory.hashMap.get(fullyQualifiedClassName);\n-        if (v == null) {\n-            v = new Verifier(fullyQualifiedClassName);\n-            VerifierFactory.hashMap.put(fullyQualifiedClassName, v);\n-            notify(fullyQualifiedClassName);\n+    public static Verifier getVerifier(final String s) {\n+        Verifier verifier = (Verifier)VerifierFactory.hashMap.get(s);\n+        if (verifier == null) {\n+            verifier = new Verifier(s);\n+            VerifierFactory.hashMap.put(s, verifier);\n+            notify(s);\n         }\n-        return v;\n+        return verifier;\n     }\n     \n-    private static void notify(final String fullyQualifiedClassName) {\n-        for (final VerifierFactoryObserver vfo : VerifierFactory.observers) {\n-            vfo.update(fullyQualifiedClassName);\n+    private static void notify(final String s) {\n+        final Iterator<VerifierFactoryObserver> iterator = VerifierFactory.observers.iterator();\n+        while (iterator.hasNext()) {\n+            ((VerifierFactoryObserver)iterator.next()).update(s);\n         }\n     }\n     \n     public static Verifier[] getVerifiers() {\n-        final Verifier[] vs = new Verifier[VerifierFactory.hashMap.size()];\n-        return VerifierFactory.hashMap.values().toArray(vs);\n+        return VerifierFactory.hashMap.values().toArray(new Verifier[VerifierFactory.hashMap.size()]);\n     }\n     \n-    public static void attach(final VerifierFactoryObserver o) {\n-        VerifierFactory.observers.add(o);\n+    public static void attach(final VerifierFactoryObserver verifierFactoryObserver) {\n+        VerifierFactory.observers.add(verifierFactoryObserver);\n     }\n     \n-    public static void detach(final VerifierFactoryObserver o) {\n-        VerifierFactory.observers.remove(o);\n+    public static void detach(final VerifierFactoryObserver verifierFactoryObserver) {\n+        VerifierFactory.observers.remove(verifierFactoryObserver);\n     }\n     \n     static {\n         hashMap = new HashMap<String, Verifier>();\n         observers = new Vector<VerifierFactoryObserver>();\n     }\n }\n"}]}
