{"diffoscope-json-version": 1, "source1": "first/SerializationUtils.class", "source2": "second/SerializationUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,17 +14,28 @@\n {\n     public static <T extends Serializable> T clone(final T object) {\n         if (object == null) {\n             return null;\n         }\n         final byte[] objectData = serialize(object);\n         final ByteArrayInputStream bais = new ByteArrayInputStream(objectData);\n-        try (final SerializationUtils.ClassLoaderAwareObjectInputStream in = new SerializationUtils.ClassLoaderAwareObjectInputStream((InputStream)bais, object.getClass().getClassLoader())) {\n-            final T readObject = (T)in.readObject();\n-            return readObject;\n+        try {\n+            final SerializationUtils.ClassLoaderAwareObjectInputStream in = new SerializationUtils.ClassLoaderAwareObjectInputStream((InputStream)bais, object.getClass().getClassLoader());\n+            Throwable x0 = null;\n+            try {\n+                final T readObject = (T)in.readObject();\n+                return readObject;\n+            }\n+            catch (final Throwable t) {\n+                x0 = t;\n+                throw t;\n+            }\n+            finally {\n+                $closeResource(x0, (AutoCloseable)in);\n+            }\n         }\n         catch (final ClassNotFoundException ex) {\n             throw new SerializationException(\"ClassNotFoundException while reading cloned object data\", (Throwable)ex);\n         }\n         catch (final IOException ex2) {\n             throw new SerializationException(\"IOException while reading or closing cloned object data\", (Throwable)ex2);\n         }\n@@ -32,37 +43,73 @@\n     \n     public static <T extends Serializable> T roundtrip(final T msg) {\n         return deserialize(serialize((Serializable)msg));\n     }\n     \n     public static void serialize(final Serializable obj, final OutputStream outputStream) {\n         Validate.notNull((Object)outputStream, \"The OutputStream must not be null\", new Object[0]);\n-        try (final ObjectOutputStream out = new ObjectOutputStream(outputStream)) {\n-            out.writeObject(obj);\n+        try {\n+            final ObjectOutputStream out = new ObjectOutputStream(outputStream);\n+            Throwable x0 = null;\n+            try {\n+                out.writeObject(obj);\n+            }\n+            catch (final Throwable t) {\n+                x0 = t;\n+                throw t;\n+            }\n+            finally {\n+                $closeResource(x0, out);\n+            }\n         }\n         catch (final IOException ex) {\n             throw new SerializationException((Throwable)ex);\n         }\n     }\n     \n     public static byte[] serialize(final Serializable obj) {\n         final ByteArrayOutputStream baos = new ByteArrayOutputStream(512);\n         serialize(obj, baos);\n         return baos.toByteArray();\n     }\n     \n     public static <T> T deserialize(final InputStream inputStream) {\n         Validate.notNull((Object)inputStream, \"The InputStream must not be null\", new Object[0]);\n-        try (final ObjectInputStream in = new ObjectInputStream(inputStream)) {\n-            final T obj = (T)in.readObject();\n-            return obj;\n+        try {\n+            final ObjectInputStream in = new ObjectInputStream(inputStream);\n+            Throwable x0 = null;\n+            try {\n+                final T obj = (T)in.readObject();\n+                return obj;\n+            }\n+            catch (final Throwable t) {\n+                x0 = t;\n+                throw t;\n+            }\n+            finally {\n+                $closeResource(x0, in);\n+            }\n         }\n         catch (final ClassNotFoundException | IOException ex) {\n             throw new SerializationException((Throwable)ex);\n         }\n     }\n     \n     public static <T> T deserialize(final byte[] objectData) {\n         Validate.notNull((Object)objectData, \"The byte[] must not be null\", new Object[0]);\n         return deserialize(new ByteArrayInputStream(objectData));\n     }\n+    \n+    private static /* synthetic */ void $closeResource(final Throwable x0, final AutoCloseable x1) {\n+        if (x0 != null) {\n+            try {\n+                x1.close();\n+            }\n+            catch (final Throwable exception) {\n+                x0.addSuppressed(exception);\n+            }\n+        }\n+        else {\n+            x1.close();\n+        }\n+    }\n }\n"}]}
