{"diffoscope-json-version": 1, "source1": "first/PKWareExtraHeader$HashAlgorithm.class", "source2": "second/PKWareExtraHeader$HashAlgorithm.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,40 +14,42 @@\n     public static final enum HashAlgorithm RIPEND160;\n     public static final enum HashAlgorithm SHA256;\n     public static final enum HashAlgorithm SHA384;\n     public static final enum HashAlgorithm SHA512;\n     private static final Map<Integer, HashAlgorithm> codeToEnum;\n     private final int code;\n     \n-    public static HashAlgorithm valueOf(final String name) {\n-        return Enum.valueOf(HashAlgorithm.class, name);\n-    }\n-    \n-    public static HashAlgorithm getAlgorithmByCode(final int code) {\n-        return HashAlgorithm.codeToEnum.get(Integer.valueOf(code));\n-    }\n-    \n-    private HashAlgorithm(final int code) {\n-        this.code = code;\n-    }\n-    \n-    public int getCode() {\n-        return this.code;\n-    }\n-    \n     static {\n         HashAlgorithm.NONE = new HashAlgorithm(\"NONE\", 0, 0);\n         HashAlgorithm.CRC32 = new HashAlgorithm(\"CRC32\", 1, 1);\n         HashAlgorithm.MD5 = new HashAlgorithm(\"MD5\", 2, 32771);\n         HashAlgorithm.SHA1 = new HashAlgorithm(\"SHA1\", 3, 32772);\n         HashAlgorithm.RIPEND160 = new HashAlgorithm(\"RIPEND160\", 4, 32775);\n         HashAlgorithm.SHA256 = new HashAlgorithm(\"SHA256\", 5, 32780);\n         HashAlgorithm.SHA384 = new HashAlgorithm(\"SHA384\", 6, 32781);\n         HashAlgorithm.SHA512 = new HashAlgorithm(\"SHA512\", 7, 32782);\n-        HashAlgorithm.$VALUES = new HashAlgorithm[] { HashAlgorithm.NONE, HashAlgorithm.CRC32, HashAlgorithm.MD5, HashAlgorithm.SHA1, HashAlgorithm.RIPEND160, HashAlgorithm.SHA256, HashAlgorithm.SHA384, HashAlgorithm.SHA512 };\n+        HashAlgorithm.ENUM$VALUES = new HashAlgorithm[] { HashAlgorithm.NONE, HashAlgorithm.CRC32, HashAlgorithm.MD5, HashAlgorithm.SHA1, HashAlgorithm.RIPEND160, HashAlgorithm.SHA256, HashAlgorithm.SHA384, HashAlgorithm.SHA512 };\n         final Map<Integer, HashAlgorithm> cte = new HashMap<Integer, HashAlgorithm>();\n-        for (final HashAlgorithm method : values()) {\n+        HashAlgorithm[] values;\n+        for (int length = (values = values()).length, i = 0; i < length; ++i) {\n+            final HashAlgorithm method = values[i];\n             cte.put(Integer.valueOf(method.getCode()), method);\n         }\n         HashAlgorithm.codeToEnum = Collections.unmodifiableMap((Map<?, ?>)cte);\n     }\n+    \n+    public static HashAlgorithm getAlgorithmByCode(final int code) {\n+        return HashAlgorithm.codeToEnum.get(Integer.valueOf(code));\n+    }\n+    \n+    private HashAlgorithm(final String name, final int ordinal, final int code) {\n+        this.code = code;\n+    }\n+    \n+    public int getCode() {\n+        return this.code;\n+    }\n+    \n+    public static HashAlgorithm valueOf(final String name) {\n+        return Enum.valueOf(HashAlgorithm.class, name);\n+    }\n }\n"}]}
