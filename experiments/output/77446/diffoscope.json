{"diffoscope-json-version": 1, "source1": "first/SystemUtils.class", "source2": "second/SystemUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -117,111 +117,14 @@\n     public static final boolean IS_OS_WINDOWS_XP;\n     public static final boolean IS_OS_WINDOWS_VISTA;\n     public static final boolean IS_OS_WINDOWS_7;\n     public static final boolean IS_OS_WINDOWS_8;\n     public static final boolean IS_OS_WINDOWS_10;\n     public static final boolean IS_OS_ZOS;\n     \n-    public static String getEnvironmentVariable(final String name, final String defaultValue) {\n-        try {\n-            final String value = System.getenv(name);\n-            return (value == null) ? defaultValue : value;\n-        }\n-        catch (final SecurityException ex) {\n-            return defaultValue;\n-        }\n-    }\n-    \n-    public static String getHostName() {\n-        return SystemUtils.IS_OS_WINDOWS ? System.getenv(\"COMPUTERNAME\") : System.getenv(\"HOSTNAME\");\n-    }\n-    \n-    public static File getJavaHome() {\n-        return new File(System.getProperty(\"java.home\"));\n-    }\n-    \n-    public static File getJavaIoTmpDir() {\n-        return new File(System.getProperty(\"java.io.tmpdir\"));\n-    }\n-    \n-    private static boolean getJavaVersionMatches(final String versionPrefix) {\n-        return isJavaVersionMatch(SystemUtils.JAVA_SPECIFICATION_VERSION, versionPrefix);\n-    }\n-    \n-    private static boolean getOsMatches(final String osNamePrefix, final String osVersionPrefix) {\n-        return isOSMatch(SystemUtils.OS_NAME, SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);\n-    }\n-    \n-    private static boolean getOsMatchesName(final String osNamePrefix) {\n-        return isOSNameMatch(SystemUtils.OS_NAME, osNamePrefix);\n-    }\n-    \n-    private static String getSystemProperty(final String property) {\n-        try {\n-            return System.getProperty(property);\n-        }\n-        catch (final SecurityException ex) {\n-            return null;\n-        }\n-    }\n-    \n-    public static File getUserDir() {\n-        return new File(System.getProperty(\"user.dir\"));\n-    }\n-    \n-    public static File getUserHome() {\n-        return new File(System.getProperty(\"user.home\"));\n-    }\n-    \n-    public static String getUserName() {\n-        return System.getProperty(\"user.name\");\n-    }\n-    \n-    public static String getUserName(final String defaultValue) {\n-        return System.getProperty(\"user.name\", defaultValue);\n-    }\n-    \n-    public static boolean isJavaAwtHeadless() {\n-        return Boolean.TRUE.toString().equals(SystemUtils.JAVA_AWT_HEADLESS);\n-    }\n-    \n-    public static boolean isJavaVersionAtLeast(final JavaVersion requiredVersion) {\n-        return SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);\n-    }\n-    \n-    public static boolean isJavaVersionAtMost(final JavaVersion requiredVersion) {\n-        return SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.atMost(requiredVersion);\n-    }\n-    \n-    static boolean isJavaVersionMatch(final String version, final String versionPrefix) {\n-        return version != null && version.startsWith(versionPrefix);\n-    }\n-    \n-    static boolean isOSMatch(final String osName, final String osVersion, final String osNamePrefix, final String osVersionPrefix) {\n-        return osName != null && osVersion != null && isOSNameMatch(osName, osNamePrefix) && isOSVersionMatch(osVersion, osVersionPrefix);\n-    }\n-    \n-    static boolean isOSNameMatch(final String osName, final String osNamePrefix) {\n-        return osName != null && osName.startsWith(osNamePrefix);\n-    }\n-    \n-    static boolean isOSVersionMatch(final String osVersion, final String osVersionPrefix) {\n-        if (StringUtils.isEmpty((CharSequence)osVersion)) {\n-            return false;\n-        }\n-        final String[] versionPrefixParts = osVersionPrefix.split(\"\\\\.\");\n-        final String[] versionParts = osVersion.split(\"\\\\.\");\n-        for (int i = 0; i < Math.min(versionPrefixParts.length, versionParts.length); ++i) {\n-            if (!versionPrefixParts[i].equals(versionParts[i])) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-    \n     static {\n         AWT_TOOLKIT = getSystemProperty(\"awt.toolkit\");\n         FILE_ENCODING = getSystemProperty(\"file.encoding\");\n         FILE_SEPARATOR = getSystemProperty(\"file.separator\");\n         JAVA_AWT_FONTS = getSystemProperty(\"java.awt.fonts\");\n         JAVA_AWT_GRAPHICSENV = getSystemProperty(\"java.awt.graphicsenv\");\n         JAVA_AWT_HEADLESS = getSystemProperty(\"java.awt.headless\");\n@@ -321,8 +224,105 @@\n         IS_OS_WINDOWS_XP = getOsMatchesName(\"Windows XP\");\n         IS_OS_WINDOWS_VISTA = getOsMatchesName(\"Windows Vista\");\n         IS_OS_WINDOWS_7 = getOsMatchesName(\"Windows 7\");\n         IS_OS_WINDOWS_8 = getOsMatchesName(\"Windows 8\");\n         IS_OS_WINDOWS_10 = getOsMatchesName(\"Windows 10\");\n         IS_OS_ZOS = getOsMatchesName(\"z/OS\");\n     }\n+    \n+    public static String getEnvironmentVariable(final String name, final String defaultValue) {\n+        try {\n+            final String value = System.getenv(name);\n+            return (value == null) ? defaultValue : value;\n+        }\n+        catch (final SecurityException ex) {\n+            return defaultValue;\n+        }\n+    }\n+    \n+    public static String getHostName() {\n+        return SystemUtils.IS_OS_WINDOWS ? System.getenv(\"COMPUTERNAME\") : System.getenv(\"HOSTNAME\");\n+    }\n+    \n+    public static File getJavaHome() {\n+        return new File(System.getProperty(\"java.home\"));\n+    }\n+    \n+    public static File getJavaIoTmpDir() {\n+        return new File(System.getProperty(\"java.io.tmpdir\"));\n+    }\n+    \n+    private static boolean getJavaVersionMatches(final String versionPrefix) {\n+        return isJavaVersionMatch(SystemUtils.JAVA_SPECIFICATION_VERSION, versionPrefix);\n+    }\n+    \n+    private static boolean getOsMatches(final String osNamePrefix, final String osVersionPrefix) {\n+        return isOSMatch(SystemUtils.OS_NAME, SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);\n+    }\n+    \n+    private static boolean getOsMatchesName(final String osNamePrefix) {\n+        return isOSNameMatch(SystemUtils.OS_NAME, osNamePrefix);\n+    }\n+    \n+    private static String getSystemProperty(final String property) {\n+        try {\n+            return System.getProperty(property);\n+        }\n+        catch (final SecurityException ex) {\n+            return null;\n+        }\n+    }\n+    \n+    public static File getUserDir() {\n+        return new File(System.getProperty(\"user.dir\"));\n+    }\n+    \n+    public static File getUserHome() {\n+        return new File(System.getProperty(\"user.home\"));\n+    }\n+    \n+    public static String getUserName() {\n+        return System.getProperty(\"user.name\");\n+    }\n+    \n+    public static String getUserName(final String defaultValue) {\n+        return System.getProperty(\"user.name\", defaultValue);\n+    }\n+    \n+    public static boolean isJavaAwtHeadless() {\n+        return Boolean.TRUE.toString().equals(SystemUtils.JAVA_AWT_HEADLESS);\n+    }\n+    \n+    public static boolean isJavaVersionAtLeast(final JavaVersion requiredVersion) {\n+        return SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);\n+    }\n+    \n+    public static boolean isJavaVersionAtMost(final JavaVersion requiredVersion) {\n+        return SystemUtils.JAVA_SPECIFICATION_VERSION_AS_ENUM.atMost(requiredVersion);\n+    }\n+    \n+    static boolean isJavaVersionMatch(final String version, final String versionPrefix) {\n+        return version != null && version.startsWith(versionPrefix);\n+    }\n+    \n+    static boolean isOSMatch(final String osName, final String osVersion, final String osNamePrefix, final String osVersionPrefix) {\n+        return osName != null && osVersion != null && (isOSNameMatch(osName, osNamePrefix) && isOSVersionMatch(osVersion, osVersionPrefix));\n+    }\n+    \n+    static boolean isOSNameMatch(final String osName, final String osNamePrefix) {\n+        return osName != null && osName.startsWith(osNamePrefix);\n+    }\n+    \n+    static boolean isOSVersionMatch(final String osVersion, final String osVersionPrefix) {\n+        if (StringUtils.isEmpty((CharSequence)osVersion)) {\n+            return false;\n+        }\n+        final String[] versionPrefixParts = osVersionPrefix.split(\"\\\\.\");\n+        final String[] versionParts = osVersion.split(\"\\\\.\");\n+        for (int i = 0; i < Math.min(versionPrefixParts.length, versionParts.length); ++i) {\n+            if (!versionPrefixParts[i].equals(versionParts[i])) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n }\n"}]}
