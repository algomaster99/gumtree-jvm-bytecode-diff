{"diffoscope-json-version": 1, "source1": "first/Lang.class", "source2": "second/Lang.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -23,80 +23,77 @@\n     private final Languages languages;\n     private final List<Lang.LangRule> rules;\n     \n     public static Lang instance(final NameType nameType) {\n         return Lang.Langs.get(nameType);\n     }\n     \n-    public static Lang loadFromResource(final String languageRulesResourceName, final Languages languages) {\n-        final List<Lang.LangRule> rules = new ArrayList<Lang.LangRule>();\n-        try (final Scanner scanner = new Scanner(Resources.getInputStream(languageRulesResourceName), \"UTF-8\")) {\n-            boolean inExtendedComment = false;\n+    public static Lang loadFromResource(final String str, final Languages languages) {\n+        final ArrayList list = new ArrayList();\n+        try (final Scanner scanner = new Scanner(Resources.getInputStream(str), \"UTF-8\")) {\n+            int n = 0;\n             while (scanner.hasNextLine()) {\n-                String line;\n-                final String rawLine = line = scanner.nextLine();\n-                if (inExtendedComment) {\n-                    if (!line.endsWith(\"*/\")) {\n+                String s;\n+                final String str2 = s = scanner.nextLine();\n+                if (n != 0) {\n+                    if (!s.endsWith(\"*/\")) {\n                         continue;\n                     }\n-                    inExtendedComment = false;\n+                    n = 0;\n                 }\n-                else if (line.startsWith(\"/*\")) {\n-                    inExtendedComment = true;\n+                else if (s.startsWith(\"/*\")) {\n+                    n = 1;\n                 }\n                 else {\n-                    final int cmtI = line.indexOf(\"//\");\n-                    if (cmtI >= 0) {\n-                        line = line.substring(0, cmtI);\n+                    final int index = s.indexOf(\"//\");\n+                    if (index >= 0) {\n+                        s = s.substring(0, index);\n                     }\n-                    line = line.trim();\n-                    if (line.length() == 0) {\n+                    final String trim = s.trim();\n+                    if (trim.length() == 0) {\n                         continue;\n                     }\n-                    final String[] parts = line.split(\"\\\\s+\");\n-                    if (parts.length != 3) {\n-                        throw new IllegalArgumentException(\"Malformed line '\" + rawLine + \"' in language resource '\" + languageRulesResourceName + \"'\");\n+                    final String[] split = trim.split(\"\\\\s+\");\n+                    if (split.length != 3) {\n+                        throw new IllegalArgumentException(\"Malformed line '\" + str2 + \"' in language resource '\" + str + \"'\");\n                     }\n-                    final Pattern pattern = Pattern.compile(parts[0]);\n-                    final String[] langs = parts[1].split(\"\\\\+\");\n-                    final boolean accept = parts[2].equals(\"true\");\n-                    rules.add(new Lang.LangRule(pattern, (Set)new HashSet(Arrays.asList(langs)), accept, (Lang.Lang$1)null));\n+                    list.add(new Lang.LangRule(Pattern.compile(split[0]), new HashSet(Arrays.asList(split[1].split(\"\\\\+\"))), split[2].equals(\"true\"), (Lang.Lang$1)null));\n                 }\n             }\n         }\n-        return new Lang(rules, languages);\n+        return new Lang(list, languages);\n     }\n     \n-    private Lang(final List<Lang.LangRule> rules, final Languages languages) {\n-        this.rules = Collections.unmodifiableList((List<? extends Lang.LangRule>)rules);\n+    private Lang(final List<Lang.LangRule> list, final Languages languages) {\n+        this.rules = Collections.unmodifiableList((List<? extends Lang.LangRule>)list);\n         this.languages = languages;\n     }\n     \n-    public String guessLanguage(final String text) {\n-        final Languages.LanguageSet ls = this.guessLanguages(text);\n-        return ls.isSingleton() ? ls.getAny() : \"any\";\n+    public String guessLanguage(final String s) {\n+        final Languages.LanguageSet guessLanguages = this.guessLanguages(s);\n+        return guessLanguages.isSingleton() ? guessLanguages.getAny() : \"any\";\n     }\n     \n-    public Languages.LanguageSet guessLanguages(final String input) {\n-        final String text = input.toLowerCase(Locale.ENGLISH);\n-        final Set<String> langs = new HashSet<String>(this.languages.getLanguages());\n-        for (final Lang.LangRule rule : this.rules) {\n-            if (rule.matches(text)) {\n-                if (Lang.LangRule.access$100(rule)) {\n-                    langs.retainAll(Lang.LangRule.access$200(rule));\n+    public Languages.LanguageSet guessLanguages(final String s) {\n+        final String lowerCase = s.toLowerCase(Locale.ENGLISH);\n+        final HashSet set = new HashSet(this.languages.getLanguages());\n+        for (final Lang.LangRule langRule : this.rules) {\n+            if (langRule.matches(lowerCase)) {\n+                if (Lang.LangRule.access$100(langRule)) {\n+                    set.retainAll(Lang.LangRule.access$200(langRule));\n                 }\n                 else {\n-                    langs.removeAll(Lang.LangRule.access$200(rule));\n+                    set.removeAll(Lang.LangRule.access$200(langRule));\n                 }\n             }\n         }\n-        final Languages.LanguageSet ls = Languages.LanguageSet.from((Set)langs);\n-        return ls.equals(Languages.NO_LANGUAGES) ? Languages.ANY_LANGUAGE : ls;\n+        final Languages.LanguageSet from = Languages.LanguageSet.from((Set)set);\n+        return from.equals(Languages.NO_LANGUAGES) ? Languages.ANY_LANGUAGE : from;\n     }\n     \n     static {\n         Langs = new EnumMap<NameType, Lang>(NameType.class);\n-        for (final NameType s : NameType.values()) {\n-            Lang.Langs.put(s, loadFromResource(String.format(\"org/apache/commons/codec/language/bm/%s_lang.txt\", s.getName()), Languages.getInstance(s)));\n+        for (final NameType nameType : NameType.values()) {\n+            Lang.Langs.put(nameType, loadFromResource(String.format(\"org/apache/commons/codec/language/bm/%s_lang.txt\", nameType.getName()), Languages.getInstance(nameType)));\n         }\n     }\n }\n"}]}
