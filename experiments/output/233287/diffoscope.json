{"diffoscope-json-version": 1, "source1": "first/HomeDirectoryLocationStrategy.class", "source2": "second/HomeDirectoryLocationStrategy.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,50 +7,49 @@\n \n public class HomeDirectoryLocationStrategy implements FileLocationStrategy\n {\n     private static final String PROP_HOME = \"user.home\";\n     private final String homeDirectory;\n     private final boolean evaluateBasePath;\n     \n-    public HomeDirectoryLocationStrategy(final String homeDir, final boolean withBasePath) {\n-        this.homeDirectory = fetchHomeDirectory(homeDir);\n-        this.evaluateBasePath = withBasePath;\n+    public HomeDirectoryLocationStrategy(final String s, final boolean evaluateBasePath) {\n+        this.homeDirectory = fetchHomeDirectory(s);\n+        this.evaluateBasePath = evaluateBasePath;\n     }\n     \n-    public HomeDirectoryLocationStrategy(final boolean withBasePath) {\n-        this(null, withBasePath);\n+    public HomeDirectoryLocationStrategy(final boolean b) {\n+        this(null, b);\n     }\n     \n     public HomeDirectoryLocationStrategy() {\n         this(false);\n     }\n     \n     public String getHomeDirectory() {\n         return this.homeDirectory;\n     }\n     \n     public boolean isEvaluateBasePath() {\n         return this.evaluateBasePath;\n     }\n     \n-    public URL locate(final FileSystem fileSystem, final FileLocator locator) {\n-        if (StringUtils.isNotEmpty((CharSequence)locator.getFileName())) {\n-            final String basePath = this.fetchBasePath(locator);\n-            final File file = FileLocatorUtils.constructFile(basePath, locator.getFileName());\n-            if (file.isFile()) {\n-                return FileLocatorUtils.convertFileToURL(file);\n+    public URL locate(final FileSystem fileSystem, final FileLocator fileLocator) {\n+        if (StringUtils.isNotEmpty((CharSequence)fileLocator.getFileName())) {\n+            final File constructFile = FileLocatorUtils.constructFile(this.fetchBasePath(fileLocator), fileLocator.getFileName());\n+            if (constructFile.isFile()) {\n+                return FileLocatorUtils.convertFileToURL(constructFile);\n             }\n         }\n         return null;\n     }\n     \n-    private String fetchBasePath(final FileLocator locator) {\n-        if (this.isEvaluateBasePath() && StringUtils.isNotEmpty((CharSequence)locator.getBasePath())) {\n-            return FileLocatorUtils.appendPath(this.getHomeDirectory(), locator.getBasePath());\n+    private String fetchBasePath(final FileLocator fileLocator) {\n+        if (this.isEvaluateBasePath() && StringUtils.isNotEmpty((CharSequence)fileLocator.getBasePath())) {\n+            return FileLocatorUtils.appendPath(this.getHomeDirectory(), fileLocator.getBasePath());\n         }\n         return this.getHomeDirectory();\n     }\n     \n-    private static String fetchHomeDirectory(final String homeDir) {\n-        return (homeDir != null) ? homeDir : System.getProperty(\"user.home\");\n+    private static String fetchHomeDirectory(final String s) {\n+        return (s != null) ? s : System.getProperty(\"user.home\");\n     }\n }\n"}]}
