{"diffoscope-json-version": 1, "source1": "first/JSONPointer.class", "source2": "second/JSONPointer.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,124 +15,123 @@\n     private static final String ENCODING = \"utf-8\";\n     private final List<String> refTokens;\n     \n     public static JSONPointer.Builder builder() {\n         return new JSONPointer.Builder();\n     }\n     \n-    public JSONPointer(final String pointer) {\n-        if (pointer == null) {\n+    public JSONPointer(final String s) {\n+        if (s == null) {\n             throw new NullPointerException(\"pointer cannot be null\");\n         }\n-        if (pointer.isEmpty() || pointer.equals(\"#\")) {\n+        if (s.isEmpty() || s.equals(\"#\")) {\n             this.refTokens = Collections.emptyList();\n             return;\n         }\n-        String refs = null;\n+        String s2 = null;\n         Label_0105: {\n-            if (pointer.startsWith(\"#/\")) {\n-                refs = pointer.substring(2);\n+            if (s.startsWith(\"#/\")) {\n+                final String substring = s.substring(2);\n                 try {\n-                    refs = URLDecoder.decode(refs, \"utf-8\");\n+                    s2 = URLDecoder.decode(substring, \"utf-8\");\n                     break Label_0105;\n                 }\n-                catch (final UnsupportedEncodingException e) {\n-                    throw new RuntimeException(e);\n+                catch (final UnsupportedEncodingException cause) {\n+                    throw new RuntimeException(cause);\n                 }\n             }\n-            if (!pointer.startsWith(\"/\")) {\n+            if (!s.startsWith(\"/\")) {\n                 throw new IllegalArgumentException(\"a JSON pointer should start with '/' or '#/'\");\n             }\n-            refs = pointer.substring(1);\n+            s2 = s.substring(1);\n         }\n         this.refTokens = new ArrayList<String>();\n-        int slashIdx = -1;\n-        int prevSlashIdx = 0;\n+        int i = -1;\n         do {\n-            prevSlashIdx = slashIdx + 1;\n-            slashIdx = refs.indexOf(47, prevSlashIdx);\n-            if (prevSlashIdx == slashIdx || prevSlashIdx == refs.length()) {\n+            final int beginIndex = i + 1;\n+            i = s2.indexOf(47, beginIndex);\n+            if (beginIndex == i || beginIndex == s2.length()) {\n                 this.refTokens.add(\"\");\n             }\n-            else if (slashIdx >= 0) {\n-                final String token = refs.substring(prevSlashIdx, slashIdx);\n-                this.refTokens.add(unescape(token));\n+            else if (i >= 0) {\n+                this.refTokens.add(unescape(s2.substring(beginIndex, i)));\n             }\n             else {\n-                final String token = refs.substring(prevSlashIdx);\n-                this.refTokens.add(unescape(token));\n+                this.refTokens.add(unescape(s2.substring(beginIndex)));\n             }\n-        } while (slashIdx >= 0);\n+        } while (i >= 0);\n     }\n     \n-    public JSONPointer(final List<String> refTokens) {\n-        this.refTokens = new ArrayList<String>(refTokens);\n+    public JSONPointer(final List<String> c) {\n+        this.refTokens = new ArrayList<String>(c);\n     }\n     \n-    private static String unescape(final String token) {\n-        return token.replace(\"~1\", \"/\").replace(\"~0\", \"~\");\n+    private static String unescape(final String s) {\n+        return s.replace(\"~1\", \"/\").replace(\"~0\", \"~\");\n     }\n     \n-    public Object queryFrom(final Object document) throws JSONPointerException {\n+    public Object queryFrom(final Object o) throws JSONPointerException {\n         if (this.refTokens.isEmpty()) {\n-            return document;\n+            return o;\n         }\n-        Object current = document;\n-        for (final String token : this.refTokens) {\n-            if (current instanceof JSONObject) {\n-                current = ((JSONObject)current).opt(unescape(token));\n+        Object o2 = o;\n+        for (final String s : this.refTokens) {\n+            if (o2 instanceof JSONObject) {\n+                o2 = ((JSONObject)o2).opt(unescape(s));\n             }\n             else {\n-                if (!(current instanceof JSONArray)) {\n-                    throw new JSONPointerException(String.format(\"value [%s] is not an array or object therefore its key %s cannot be resolved\", current, token));\n+                if (!(o2 instanceof JSONArray)) {\n+                    throw new JSONPointerException(String.format(\"value [%s] is not an array or object therefore its key %s cannot be resolved\", o2, s));\n                 }\n-                current = readByIndexToken(current, token);\n+                o2 = readByIndexToken(o2, s);\n             }\n         }\n-        return current;\n+        return o2;\n     }\n     \n-    private static Object readByIndexToken(final Object current, final String indexToken) throws JSONPointerException {\n+    private static Object readByIndexToken(final Object o, final String s) throws JSONPointerException {\n         try {\n-            final int index = Integer.parseInt(indexToken);\n-            final JSONArray currentArr = (JSONArray)current;\n-            if (index >= currentArr.length()) {\n-                throw new JSONPointerException(String.format(\"index %s is out of bounds - the array has %d elements\", indexToken, Integer.valueOf(currentArr.length())));\n+            final int int1 = Integer.parseInt(s);\n+            final JSONArray jsonArray = (JSONArray)o;\n+            if (int1 >= jsonArray.length()) {\n+                throw new JSONPointerException(String.format(\"index %s is out of bounds - the array has %d elements\", s, Integer.valueOf(jsonArray.length())));\n             }\n             try {\n-                return currentArr.get(index);\n+                return jsonArray.get(int1);\n             }\n-            catch (final JSONException e) {\n-                throw new JSONPointerException(\"Error reading value at index position \" + index, (Throwable)e);\n+            catch (final JSONException ex) {\n+                throw new JSONPointerException(\"Error reading value at index position \" + int1, (Throwable)ex);\n             }\n         }\n-        catch (final NumberFormatException e2) {\n-            throw new JSONPointerException(String.format(\"%s is not an array index\", indexToken), (Throwable)e2);\n+        catch (final NumberFormatException ex2) {\n+            throw new JSONPointerException(String.format(\"%s is not an array index\", s), (Throwable)ex2);\n         }\n     }\n     \n     @Override\n     public String toString() {\n-        final StringBuilder rval = new StringBuilder(\"\");\n-        for (final String token : this.refTokens) {\n-            rval.append('/').append(escape(token));\n+        final StringBuilder sb = new StringBuilder(\"\");\n+        final Iterator<String> iterator = this.refTokens.iterator();\n+        while (iterator.hasNext()) {\n+            sb.append('/').append(escape((String)iterator.next()));\n         }\n-        return rval.toString();\n+        return sb.toString();\n     }\n     \n-    private static String escape(final String token) {\n-        return token.replace(\"~\", \"~0\").replace(\"/\", \"~1\");\n+    private static String escape(final String s) {\n+        return s.replace(\"~\", \"~0\").replace(\"/\", \"~1\");\n     }\n     \n     public String toURIFragment() {\n         try {\n-            final StringBuilder rval = new StringBuilder(\"#\");\n-            for (final String token : this.refTokens) {\n-                rval.append('/').append(URLEncoder.encode(token, \"utf-8\"));\n+            final StringBuilder sb = new StringBuilder(\"#\");\n+            final Iterator<String> iterator = this.refTokens.iterator();\n+            while (iterator.hasNext()) {\n+                sb.append('/').append(URLEncoder.encode((String)iterator.next(), \"utf-8\"));\n             }\n-            return rval.toString();\n+            return sb.toString();\n         }\n-        catch (final UnsupportedEncodingException e) {\n-            throw new RuntimeException(e);\n+        catch (final UnsupportedEncodingException cause) {\n+            throw new RuntimeException(cause);\n         }\n     }\n }\n"}]}
