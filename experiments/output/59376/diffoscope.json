{"diffoscope-json-version": 1, "source1": "first/Conversion.class", "source2": "second/Conversion.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,14 +18,35 @@\n     private static final boolean[] TFTF;\n     private static final boolean[] FFTF;\n     private static final boolean[] TTFF;\n     private static final boolean[] FTFF;\n     private static final boolean[] TFFF;\n     private static final boolean[] FFFF;\n     \n+    static {\n+        TTTT = new boolean[] { true, true, true, true };\n+        FTTT = new boolean[] { false, true, true, true };\n+        TFTT = new boolean[] { true, false, true, true };\n+        FFTT = new boolean[] { false, false, true, true };\n+        TTFT = new boolean[] { true, true, false, true };\n+        FTFT = new boolean[] { false, true, false, true };\n+        TFFT = new boolean[] { true, false, false, true };\n+        FFFT = new boolean[] { false, false, false, true };\n+        TTTF = new boolean[] { true, true, true, false };\n+        FTTF = new boolean[] { false, true, true, false };\n+        TFTF = new boolean[] { true, false, true, false };\n+        FFTF = new boolean[] { false, false, true, false };\n+        TTFF = new boolean[] { true, true, false, false };\n+        FTFF = new boolean[] { false, true, false, false };\n+        final boolean[] tfff = new boolean[4];\n+        tfff[0] = true;\n+        TFFF = tfff;\n+        FFFF = new boolean[4];\n+    }\n+    \n     public static int hexDigitToInt(final char hexDigit) {\n         final int digit = Character.digit(hexDigit, 16);\n         if (digit < 0) {\n             throw new IllegalArgumentException(\"Cannot interpret '\" + hexDigit + \"' as a hexadecimal digit\");\n         }\n         return digit;\n     }\n@@ -394,15 +415,15 @@\n             default: {\n                 throw new IllegalArgumentException(\"nibble value not between 0 and 15: \" + nibble);\n             }\n         }\n     }\n     \n     public static long intArrayToLong(final int[] src, final int srcPos, final long dstInit, final int dstPos, final int nInts) {\n-        if ((src.length == 0 && srcPos == 0) || 0 == nInts) {\n+        if ((src.length == 0 && srcPos == 0) || nInts == 0) {\n             return dstInit;\n         }\n         if ((nInts - 1) * 32 + dstPos >= 64) {\n             throw new IllegalArgumentException(\"(nInts-1)*32+dstPos is greater or equal to than 64\");\n         }\n         long out = dstInit;\n         for (int i = 0; i < nInts; ++i) {\n@@ -411,15 +432,15 @@\n             final long mask = 4294967295L << shift;\n             out = ((out & ~mask) | bits);\n         }\n         return out;\n     }\n     \n     public static long shortArrayToLong(final short[] src, final int srcPos, final long dstInit, final int dstPos, final int nShorts) {\n-        if ((src.length == 0 && srcPos == 0) || 0 == nShorts) {\n+        if ((src.length == 0 && srcPos == 0) || nShorts == 0) {\n             return dstInit;\n         }\n         if ((nShorts - 1) * 16 + dstPos >= 64) {\n             throw new IllegalArgumentException(\"(nShorts-1)*16+dstPos is greater or equal to than 64\");\n         }\n         long out = dstInit;\n         for (int i = 0; i < nShorts; ++i) {\n@@ -428,15 +449,15 @@\n             final long mask = 65535L << shift;\n             out = ((out & ~mask) | bits);\n         }\n         return out;\n     }\n     \n     public static int shortArrayToInt(final short[] src, final int srcPos, final int dstInit, final int dstPos, final int nShorts) {\n-        if ((src.length == 0 && srcPos == 0) || 0 == nShorts) {\n+        if ((src.length == 0 && srcPos == 0) || nShorts == 0) {\n             return dstInit;\n         }\n         if ((nShorts - 1) * 16 + dstPos >= 32) {\n             throw new IllegalArgumentException(\"(nShorts-1)*16+dstPos is greater or equal to than 32\");\n         }\n         int out = dstInit;\n         for (int i = 0; i < nShorts; ++i) {\n@@ -445,15 +466,15 @@\n             final int mask = 65535 << shift;\n             out = ((out & ~mask) | bits);\n         }\n         return out;\n     }\n     \n     public static long byteArrayToLong(final byte[] src, final int srcPos, final long dstInit, final int dstPos, final int nBytes) {\n-        if ((src.length == 0 && srcPos == 0) || 0 == nBytes) {\n+        if ((src.length == 0 && srcPos == 0) || nBytes == 0) {\n             return dstInit;\n         }\n         if ((nBytes - 1) * 8 + dstPos >= 64) {\n             throw new IllegalArgumentException(\"(nBytes-1)*8+dstPos is greater or equal to than 64\");\n         }\n         long out = dstInit;\n         for (int i = 0; i < nBytes; ++i) {\n@@ -462,15 +483,15 @@\n             final long mask = 255L << shift;\n             out = ((out & ~mask) | bits);\n         }\n         return out;\n     }\n     \n     public static int byteArrayToInt(final byte[] src, final int srcPos, final int dstInit, final int dstPos, final int nBytes) {\n-        if ((src.length == 0 && srcPos == 0) || 0 == nBytes) {\n+        if ((src.length == 0 && srcPos == 0) || nBytes == 0) {\n             return dstInit;\n         }\n         if ((nBytes - 1) * 8 + dstPos >= 32) {\n             throw new IllegalArgumentException(\"(nBytes-1)*8+dstPos is greater or equal to than 32\");\n         }\n         int out = dstInit;\n         for (int i = 0; i < nBytes; ++i) {\n@@ -479,15 +500,15 @@\n             final int mask = 255 << shift;\n             out = ((out & ~mask) | bits);\n         }\n         return out;\n     }\n     \n     public static short byteArrayToShort(final byte[] src, final int srcPos, final short dstInit, final int dstPos, final int nBytes) {\n-        if ((src.length == 0 && srcPos == 0) || 0 == nBytes) {\n+        if ((src.length == 0 && srcPos == 0) || nBytes == 0) {\n             return dstInit;\n         }\n         if ((nBytes - 1) * 8 + dstPos >= 16) {\n             throw new IllegalArgumentException(\"(nBytes-1)*8+dstPos is greater or equal to than 16\");\n         }\n         short out = dstInit;\n         for (int i = 0; i < nBytes; ++i) {\n@@ -496,15 +517,15 @@\n             final int mask = 255 << shift;\n             out = (short)((out & ~mask) | bits);\n         }\n         return out;\n     }\n     \n     public static long hexToLong(final String src, final int srcPos, final long dstInit, final int dstPos, final int nHex) {\n-        if (0 == nHex) {\n+        if (nHex == 0) {\n             return dstInit;\n         }\n         if ((nHex - 1) * 4 + dstPos >= 64) {\n             throw new IllegalArgumentException(\"(nHexs-1)*4+dstPos is greater or equal to than 64\");\n         }\n         long out = dstInit;\n         for (int i = 0; i < nHex; ++i) {\n@@ -513,15 +534,15 @@\n             final long mask = 15L << shift;\n             out = ((out & ~mask) | bits);\n         }\n         return out;\n     }\n     \n     public static int hexToInt(final String src, final int srcPos, final int dstInit, final int dstPos, final int nHex) {\n-        if (0 == nHex) {\n+        if (nHex == 0) {\n             return dstInit;\n         }\n         if ((nHex - 1) * 4 + dstPos >= 32) {\n             throw new IllegalArgumentException(\"(nHexs-1)*4+dstPos is greater or equal to than 32\");\n         }\n         int out = dstInit;\n         for (int i = 0; i < nHex; ++i) {\n@@ -530,15 +551,15 @@\n             final int mask = 15 << shift;\n             out = ((out & ~mask) | bits);\n         }\n         return out;\n     }\n     \n     public static short hexToShort(final String src, final int srcPos, final short dstInit, final int dstPos, final int nHex) {\n-        if (0 == nHex) {\n+        if (nHex == 0) {\n             return dstInit;\n         }\n         if ((nHex - 1) * 4 + dstPos >= 16) {\n             throw new IllegalArgumentException(\"(nHexs-1)*4+dstPos is greater or equal to than 16\");\n         }\n         short out = dstInit;\n         for (int i = 0; i < nHex; ++i) {\n@@ -547,15 +568,15 @@\n             final int mask = 15 << shift;\n             out = (short)((out & ~mask) | bits);\n         }\n         return out;\n     }\n     \n     public static byte hexToByte(final String src, final int srcPos, final byte dstInit, final int dstPos, final int nHex) {\n-        if (0 == nHex) {\n+        if (nHex == 0) {\n             return dstInit;\n         }\n         if ((nHex - 1) * 4 + dstPos >= 8) {\n             throw new IllegalArgumentException(\"(nHexs-1)*4+dstPos is greater or equal to than 8\");\n         }\n         byte out = dstInit;\n         for (int i = 0; i < nHex; ++i) {\n@@ -564,15 +585,15 @@\n             final int mask = 15 << shift;\n             out = (byte)((out & ~mask) | bits);\n         }\n         return out;\n     }\n     \n     public static long binaryToLong(final boolean[] src, final int srcPos, final long dstInit, final int dstPos, final int nBools) {\n-        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n+        if ((src.length == 0 && srcPos == 0) || nBools == 0) {\n             return dstInit;\n         }\n         if (nBools - 1 + dstPos >= 64) {\n             throw new IllegalArgumentException(\"nBools-1+dstPos is greater or equal to than 64\");\n         }\n         long out = dstInit;\n         for (int i = 0; i < nBools; ++i) {\n@@ -581,15 +602,15 @@\n             final long mask = 1L << shift;\n             out = ((out & ~mask) | bits);\n         }\n         return out;\n     }\n     \n     public static int binaryToInt(final boolean[] src, final int srcPos, final int dstInit, final int dstPos, final int nBools) {\n-        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n+        if ((src.length == 0 && srcPos == 0) || nBools == 0) {\n             return dstInit;\n         }\n         if (nBools - 1 + dstPos >= 32) {\n             throw new IllegalArgumentException(\"nBools-1+dstPos is greater or equal to than 32\");\n         }\n         int out = dstInit;\n         for (int i = 0; i < nBools; ++i) {\n@@ -598,15 +619,15 @@\n             final int mask = 1 << shift;\n             out = ((out & ~mask) | bits);\n         }\n         return out;\n     }\n     \n     public static short binaryToShort(final boolean[] src, final int srcPos, final short dstInit, final int dstPos, final int nBools) {\n-        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n+        if ((src.length == 0 && srcPos == 0) || nBools == 0) {\n             return dstInit;\n         }\n         if (nBools - 1 + dstPos >= 16) {\n             throw new IllegalArgumentException(\"nBools-1+dstPos is greater or equal to than 16\");\n         }\n         short out = dstInit;\n         for (int i = 0; i < nBools; ++i) {\n@@ -615,15 +636,15 @@\n             final int mask = 1 << shift;\n             out = (short)((out & ~mask) | bits);\n         }\n         return out;\n     }\n     \n     public static byte binaryToByte(final boolean[] src, final int srcPos, final byte dstInit, final int dstPos, final int nBools) {\n-        if ((src.length == 0 && srcPos == 0) || 0 == nBools) {\n+        if ((src.length == 0 && srcPos == 0) || nBools == 0) {\n             return dstInit;\n         }\n         if (nBools - 1 + dstPos >= 8) {\n             throw new IllegalArgumentException(\"nBools-1+dstPos is greater or equal to than 8\");\n         }\n         byte out = dstInit;\n         for (int i = 0; i < nBools; ++i) {\n@@ -632,99 +653,99 @@\n             final int mask = 1 << shift;\n             out = (byte)((out & ~mask) | bits);\n         }\n         return out;\n     }\n     \n     public static int[] longToIntArray(final long src, final int srcPos, final int[] dst, final int dstPos, final int nInts) {\n-        if (0 == nInts) {\n+        if (nInts == 0) {\n             return dst;\n         }\n         if ((nInts - 1) * 32 + srcPos >= 64) {\n             throw new IllegalArgumentException(\"(nInts-1)*32+srcPos is greater or equal to than 64\");\n         }\n         for (int i = 0; i < nInts; ++i) {\n             final int shift = i * 32 + srcPos;\n             dst[dstPos + i] = (int)(-1L & src >> shift);\n         }\n         return dst;\n     }\n     \n     public static short[] longToShortArray(final long src, final int srcPos, final short[] dst, final int dstPos, final int nShorts) {\n-        if (0 == nShorts) {\n+        if (nShorts == 0) {\n             return dst;\n         }\n         if ((nShorts - 1) * 16 + srcPos >= 64) {\n             throw new IllegalArgumentException(\"(nShorts-1)*16+srcPos is greater or equal to than 64\");\n         }\n         for (int i = 0; i < nShorts; ++i) {\n             final int shift = i * 16 + srcPos;\n             dst[dstPos + i] = (short)(0xFFFFL & src >> shift);\n         }\n         return dst;\n     }\n     \n     public static short[] intToShortArray(final int src, final int srcPos, final short[] dst, final int dstPos, final int nShorts) {\n-        if (0 == nShorts) {\n+        if (nShorts == 0) {\n             return dst;\n         }\n         if ((nShorts - 1) * 16 + srcPos >= 32) {\n             throw new IllegalArgumentException(\"(nShorts-1)*16+srcPos is greater or equal to than 32\");\n         }\n         for (int i = 0; i < nShorts; ++i) {\n             final int shift = i * 16 + srcPos;\n             dst[dstPos + i] = (short)(0xFFFF & src >> shift);\n         }\n         return dst;\n     }\n     \n     public static byte[] longToByteArray(final long src, final int srcPos, final byte[] dst, final int dstPos, final int nBytes) {\n-        if (0 == nBytes) {\n+        if (nBytes == 0) {\n             return dst;\n         }\n         if ((nBytes - 1) * 8 + srcPos >= 64) {\n             throw new IllegalArgumentException(\"(nBytes-1)*8+srcPos is greater or equal to than 64\");\n         }\n         for (int i = 0; i < nBytes; ++i) {\n             final int shift = i * 8 + srcPos;\n             dst[dstPos + i] = (byte)(0xFFL & src >> shift);\n         }\n         return dst;\n     }\n     \n     public static byte[] intToByteArray(final int src, final int srcPos, final byte[] dst, final int dstPos, final int nBytes) {\n-        if (0 == nBytes) {\n+        if (nBytes == 0) {\n             return dst;\n         }\n         if ((nBytes - 1) * 8 + srcPos >= 32) {\n             throw new IllegalArgumentException(\"(nBytes-1)*8+srcPos is greater or equal to than 32\");\n         }\n         for (int i = 0; i < nBytes; ++i) {\n             final int shift = i * 8 + srcPos;\n             dst[dstPos + i] = (byte)(0xFF & src >> shift);\n         }\n         return dst;\n     }\n     \n     public static byte[] shortToByteArray(final short src, final int srcPos, final byte[] dst, final int dstPos, final int nBytes) {\n-        if (0 == nBytes) {\n+        if (nBytes == 0) {\n             return dst;\n         }\n         if ((nBytes - 1) * 8 + srcPos >= 16) {\n             throw new IllegalArgumentException(\"(nBytes-1)*8+srcPos is greater or equal to than 16\");\n         }\n         for (int i = 0; i < nBytes; ++i) {\n             final int shift = i * 8 + srcPos;\n             dst[dstPos + i] = (byte)(0xFF & src >> shift);\n         }\n         return dst;\n     }\n     \n     public static String longToHex(final long src, final int srcPos, final String dstInit, final int dstPos, final int nHexs) {\n-        if (0 == nHexs) {\n+        if (nHexs == 0) {\n             return dstInit;\n         }\n         if ((nHexs - 1) * 4 + srcPos >= 64) {\n             throw new IllegalArgumentException(\"(nHexs-1)*4+srcPos is greater or equal to than 64\");\n         }\n         final StringBuilder sb = new StringBuilder(dstInit);\n         int append = sb.length();\n@@ -739,15 +760,15 @@\n                 sb.setCharAt();\n             }\n         }\n         return sb.toString();\n     }\n     \n     public static String intToHex(final int src, final int srcPos, final String dstInit, final int dstPos, final int nHexs) {\n-        if (0 == nHexs) {\n+        if (nHexs == 0) {\n             return dstInit;\n         }\n         if ((nHexs - 1) * 4 + srcPos >= 32) {\n             throw new IllegalArgumentException(\"(nHexs-1)*4+srcPos is greater or equal to than 32\");\n         }\n         final StringBuilder sb = new StringBuilder(dstInit);\n         int append = sb.length();\n@@ -762,15 +783,15 @@\n                 sb.setCharAt();\n             }\n         }\n         return sb.toString();\n     }\n     \n     public static String shortToHex(final short src, final int srcPos, final String dstInit, final int dstPos, final int nHexs) {\n-        if (0 == nHexs) {\n+        if (nHexs == 0) {\n             return dstInit;\n         }\n         if ((nHexs - 1) * 4 + srcPos >= 16) {\n             throw new IllegalArgumentException(\"(nHexs-1)*4+srcPos is greater or equal to than 16\");\n         }\n         final StringBuilder sb = new StringBuilder(dstInit);\n         int append = sb.length();\n@@ -785,15 +806,15 @@\n                 sb.setCharAt();\n             }\n         }\n         return sb.toString();\n     }\n     \n     public static String byteToHex(final byte src, final int srcPos, final String dstInit, final int dstPos, final int nHexs) {\n-        if (0 == nHexs) {\n+        if (nHexs == 0) {\n             return dstInit;\n         }\n         if ((nHexs - 1) * 4 + srcPos >= 8) {\n             throw new IllegalArgumentException(\"(nHexs-1)*4+srcPos is greater or equal to than 8\");\n         }\n         final StringBuilder sb = new StringBuilder(dstInit);\n         int append = sb.length();\n@@ -808,72 +829,72 @@\n                 sb.setCharAt();\n             }\n         }\n         return sb.toString();\n     }\n     \n     public static boolean[] longToBinary(final long src, final int srcPos, final boolean[] dst, final int dstPos, final int nBools) {\n-        if (0 == nBools) {\n+        if (nBools == 0) {\n             return dst;\n         }\n         if (nBools - 1 + srcPos >= 64) {\n             throw new IllegalArgumentException(\"nBools-1+srcPos is greater or equal to than 64\");\n         }\n         for (int i = 0; i < nBools; ++i) {\n             final int shift = i + srcPos;\n             dst[dstPos + i] = ((0x1L & src >> shift) != 0x0L);\n         }\n         return dst;\n     }\n     \n     public static boolean[] intToBinary(final int src, final int srcPos, final boolean[] dst, final int dstPos, final int nBools) {\n-        if (0 == nBools) {\n+        if (nBools == 0) {\n             return dst;\n         }\n         if (nBools - 1 + srcPos >= 32) {\n             throw new IllegalArgumentException(\"nBools-1+srcPos is greater or equal to than 32\");\n         }\n         for (int i = 0; i < nBools; ++i) {\n             final int shift = i + srcPos;\n             dst[dstPos + i] = ((0x1 & src >> shift) != 0x0);\n         }\n         return dst;\n     }\n     \n     public static boolean[] shortToBinary(final short src, final int srcPos, final boolean[] dst, final int dstPos, final int nBools) {\n-        if (0 == nBools) {\n+        if (nBools == 0) {\n             return dst;\n         }\n         if (nBools - 1 + srcPos >= 16) {\n             throw new IllegalArgumentException(\"nBools-1+srcPos is greater or equal to than 16\");\n         }\n         assert nBools - 1 < 16 - srcPos;\n         for (int i = 0; i < nBools; ++i) {\n             final int shift = i + srcPos;\n             dst[dstPos + i] = ((0x1 & src >> shift) != 0x0);\n         }\n         return dst;\n     }\n     \n     public static boolean[] byteToBinary(final byte src, final int srcPos, final boolean[] dst, final int dstPos, final int nBools) {\n-        if (0 == nBools) {\n+        if (nBools == 0) {\n             return dst;\n         }\n         if (nBools - 1 + srcPos >= 8) {\n             throw new IllegalArgumentException(\"nBools-1+srcPos is greater or equal to than 8\");\n         }\n         for (int i = 0; i < nBools; ++i) {\n             final int shift = i + srcPos;\n             dst[dstPos + i] = ((0x1 & src >> shift) != 0x0);\n         }\n         return dst;\n     }\n     \n     public static byte[] uuidToByteArray(final UUID src, final byte[] dst, final int dstPos, final int nBytes) {\n-        if (0 == nBytes) {\n+        if (nBytes == 0) {\n             return dst;\n         }\n         if (nBytes > 16) {\n             throw new IllegalArgumentException(\"nBytes is greater than 16\");\n         }\n         longToByteArray(src.getMostSignificantBits(), 0, dst, dstPos, (nBytes > 8) ? 8 : nBytes);\n         if (nBytes >= 8) {\n@@ -884,27 +905,8 @@\n     \n     public static UUID byteArrayToUuid(final byte[] src, final int srcPos) {\n         if (src.length - srcPos < 16) {\n             throw new IllegalArgumentException(\"Need at least 16 bytes for UUID\");\n         }\n         return new UUID(byteArrayToLong(src, srcPos, 0L, 0, 8), byteArrayToLong(src, srcPos + 8, 0L, 0, 8));\n     }\n-    \n-    static {\n-        TTTT = new boolean[] { true, true, true, true };\n-        FTTT = new boolean[] { false, true, true, true };\n-        TFTT = new boolean[] { true, false, true, true };\n-        FFTT = new boolean[] { false, false, true, true };\n-        TTFT = new boolean[] { true, true, false, true };\n-        FTFT = new boolean[] { false, true, false, true };\n-        TFFT = new boolean[] { true, false, false, true };\n-        FFFT = new boolean[] { false, false, false, true };\n-        TTTF = new boolean[] { true, true, true, false };\n-        FTTF = new boolean[] { false, true, true, false };\n-        TFTF = new boolean[] { true, false, true, false };\n-        FFTF = new boolean[] { false, false, true, false };\n-        TTFF = new boolean[] { true, true, false, false };\n-        FTFF = new boolean[] { false, true, false, false };\n-        TFFF = new boolean[] { true, false, false, false };\n-        FFFF = new boolean[] { false, false, false, false };\n-    }\n }\n"}]}
