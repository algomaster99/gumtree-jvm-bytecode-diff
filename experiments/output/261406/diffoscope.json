{"diffoscope-json-version": 1, "source1": "first/FailablePredicate.class", "source2": "second/FailablePredicate.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -2,34 +2,34 @@\n package org.apache.commons.lang3.function;\n \n import java.util.Objects;\n \n @FunctionalInterface\n public interface FailablePredicate<T, E extends Throwable>\n {\n-    public static final FailablePredicate FALSE = t -> false;\n-    public static final FailablePredicate TRUE = t -> true;\n+    public static final FailablePredicate FALSE = p0 -> false;\n+    public static final FailablePredicate TRUE = p0 -> true;\n     \n     default <T, E extends Throwable> FailablePredicate<T, E> falsePredicate() {\n         return FailablePredicate.FALSE;\n     }\n     \n     default <T, E extends Throwable> FailablePredicate<T, E> truePredicate() {\n         return FailablePredicate.TRUE;\n     }\n     \n-    default FailablePredicate<T, E> and(final FailablePredicate<? super T, E> other) {\n-        Objects.requireNonNull(other);\n-        return t -> this.test(t) && other.test(t);\n+    default FailablePredicate<T, E> and(final FailablePredicate<? super T, E> obj) {\n+        Objects.requireNonNull(obj);\n+        return o -> this.test(o) && failablePredicate.test(o);\n     }\n     \n     default FailablePredicate<T, E> negate() {\n-        return t -> !this.test(t);\n+        return o -> !this.test(o);\n     }\n     \n-    default FailablePredicate<T, E> or(final FailablePredicate<? super T, E> other) {\n-        Objects.requireNonNull(other);\n-        return t -> this.test(t) || other.test(t);\n+    default FailablePredicate<T, E> or(final FailablePredicate<? super T, E> obj) {\n+        Objects.requireNonNull(obj);\n+        return o -> this.test(o) || failablePredicate.test(o);\n     }\n     \n     boolean test(final T p0) throws E, Throwable;\n }\n"}]}
