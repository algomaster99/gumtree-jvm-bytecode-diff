{"diffoscope-json-version": 1, "source1": "first/TarUtils.class", "source2": "second/TarUtils.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,470 +1,470 @@\n-  SHA-256 checksum ec8e8fad3b7ce1eeeccfcfa0c6290aeec861e6581b48d4b42a3442b0a3845bf7\n+  SHA-256 checksum 8059037b8d05ce27273d7b390996b8c72aaadd1f63f95d6008ed873d475d7eb2\n   Compiled from \"TarUtils.java\"\n public class org.apache.commons.compress.archivers.tar.TarUtils\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #1                          // org/apache/commons/compress/archivers/tar/TarUtils\n-  super_class: #152                       // java/lang/Object\n+  super_class: #407                       // java/lang/Object\n   interfaces: 0, fields: 3, methods: 29, attributes: 2\n Constant pool:\n-    #1 = Class              #231          // org/apache/commons/compress/archivers/tar/TarUtils\n-    #2 = Class              #232          // java/lang/String\n-    #3 = Methodref          #233.#234     // java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n-    #4 = Methodref          #2.#235       // java/lang/String.\"<init>\":([BIILjava/nio/charset/Charset;)V\n-    #5 = String             #236          // \\u0000\n-    #6 = String             #237          // {NUL}\n-    #7 = Methodref          #2.#238       // java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n-    #8 = Class              #239          // java/lang/StringBuilder\n-    #9 = Methodref          #8.#240       // java/lang/StringBuilder.\"<init>\":()V\n-   #10 = String             #241          // Invalid byte\n-   #11 = Methodref          #8.#242       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #12 = Methodref          #8.#243       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #13 = String             #244          //  at offset\n-   #14 = String             #245          //  in \\'\n-   #15 = String             #246          // \\' len=\n-   #16 = Methodref          #8.#247       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #17 = Methodref          #56.#248      // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-   #18 = Methodref          #56.#249      // java/math/BigInteger.toByteArray:()[B\n-   #19 = Class              #250          // java/lang/IllegalArgumentException\n-   #20 = String             #251          // Value\n-   #21 = Methodref          #8.#252       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #22 = String             #253          //  is too large for\n-   #23 = String             #254          //  byte field.\n-   #24 = Methodref          #19.#255      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #25 = Methodref          #256.#257     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #26 = Methodref          #1.#258       // org/apache/commons/compress/archivers/tar/TarUtils.formatUnsignedOctalString:(J[BII)V\n-   #27 = Methodref          #259.#260     // java/lang/Math.abs:(J)J\n-   #28 = Long               255l\n-   #30 = Class              #261          // org/apache/commons/compress/archivers/tar/TarConstants\n-   #31 = Long               2097151l\n-   #33 = Long               8589934591l\n-   #35 = Methodref          #1.#262       // org/apache/commons/compress/archivers/tar/TarUtils.formatLongOctalBytes:(J[BII)I\n-   #36 = Methodref          #1.#263       // org/apache/commons/compress/archivers/tar/TarUtils.formatLongBinary:(J[BIIZ)V\n-   #37 = Methodref          #1.#264       // org/apache/commons/compress/archivers/tar/TarUtils.formatBigIntegerBinary:(J[BIIZ)V\n-   #38 = Fieldref           #1.#265       // org/apache/commons/compress/archivers/tar/TarUtils.DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #39 = Methodref          #1.#266       // org/apache/commons/compress/archivers/tar/TarUtils.formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n-   #40 = Class              #267          // java/io/IOException\n-   #41 = Fieldref           #1.#268       // org/apache/commons/compress/archivers/tar/TarUtils.FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #42 = Class              #269          // java/io/UncheckedIOException\n-   #43 = Methodref          #42.#270      // java/io/UncheckedIOException.\"<init>\":(Ljava/io/IOException;)V\n-   #44 = Methodref          #2.#271       // java/lang/String.length:()I\n-   #45 = InterfaceMethodref #272.#273     // org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-   #46 = Methodref          #179.#274     // java/nio/ByteBuffer.limit:()I\n-   #47 = Methodref          #2.#275       // java/lang/String.substring:(II)Ljava/lang/String;\n-   #48 = Methodref          #179.#276     // java/nio/ByteBuffer.position:()I\n-   #49 = Methodref          #179.#277     // java/nio/ByteBuffer.array:()[B\n-   #50 = Methodref          #179.#278     // java/nio/ByteBuffer.arrayOffset:()I\n-   #51 = Long               7l\n-   #53 = String             #279          // =\n-   #54 = Methodref          #215.#280     // java/lang/Long.toOctalString:(J)Ljava/lang/String;\n-   #55 = String             #281          //  will not fit in octal number buffer of length\n-   #56 = Class              #282          // java/math/BigInteger\n-   #57 = Methodref          #56.#283      // java/math/BigInteger.\"<init>\":([B)V\n-   #58 = Long               -1l\n-   #60 = Methodref          #56.#284      // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #61 = Methodref          #56.#285      // java/math/BigInteger.not:()Ljava/math/BigInteger;\n-   #62 = Methodref          #56.#286      // java/math/BigInteger.bitLength:()I\n-   #63 = String             #287          // At offset\n-   #64 = String             #288          // ,\n-   #65 = String             #289          //  byte binary number exceeds maximum signed long value\n-   #66 = Methodref          #56.#290      // java/math/BigInteger.longValue:()J\n-   #67 = Double             2.0d\n-   #69 = Double             8.0d\n-   #71 = Methodref          #259.#291     // java/lang/Math.pow:(DD)D\n-   #72 = Class              #292          // java/util/ArrayList\n-   #73 = Methodref          #72.#240      // java/util/ArrayList.\"<init>\":()V\n-   #74 = String             #293          // ,\n-   #75 = Methodref          #2.#294       // java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n-   #76 = String             #295          // Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n-   #77 = Methodref          #40.#255      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #78 = Methodref          #215.#296     // java/lang/Long.parseLong:(Ljava/lang/String;)J\n-   #79 = Class              #297          // java/lang/NumberFormatException\n-   #80 = String             #298          // Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n-   #81 = String             #299          // Corrupted TAR archive. Sparse struct offset contains negative value\n-   #82 = String             #300          // Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n-   #83 = String             #301          // Corrupted TAR archive. Sparse struct numbytes contains negative value\n-   #84 = Class              #302          // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-   #85 = Methodref          #84.#303      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-   #86 = InterfaceMethodref #191.#304     // java/util/List.add:(Ljava/lang/Object;)Z\n-   #87 = Methodref          #305.#306     // java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-   #88 = Methodref          #1.#307       // org/apache/commons/compress/archivers/tar/TarUtils.parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n-   #89 = InterfaceMethodref #272.#308     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-   #90 = String             #309          //\n-   #91 = String             #310          // Length\n-   #92 = String             #311          //  must be at least 2\n-   #93 = Methodref          #1.#312       // org/apache/commons/compress/archivers/tar/TarUtils.exceptionMessage:([BIIIB)Ljava/lang/String;\n-   #94 = Methodref          #1.#313       // org/apache/commons/compress/archivers/tar/TarUtils.parseOctal:([BII)J\n-   #95 = Methodref          #1.#314       // org/apache/commons/compress/archivers/tar/TarUtils.parseBinaryLong:([BIIZ)J\n-   #96 = Methodref          #1.#315       // org/apache/commons/compress/archivers/tar/TarUtils.parseBinaryBigInteger:([BIIZ)J\n-   #97 = Methodref          #1.#316       // org/apache/commons/compress/archivers/tar/TarUtils.parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n-   #98 = Methodref          #40.#317      // java/io/IOException.getMessage:()Ljava/lang/String;\n-   #99 = Methodref          #42.#318      // java/io/UncheckedIOException.\"<init>\":(Ljava/lang/String;Ljava/io/IOException;)V\n-  #100 = Methodref          #1.#319       // org/apache/commons/compress/archivers/tar/TarUtils.readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n-  #101 = String             #320          // Corrupted TAR archive. Negative value in sparse headers block\n-  #102 = String             #321          // Corrupted TAR archive. Sparse header block offset contains negative value\n-  #103 = String             #322          // Corrupted TAR archive. Sparse header block numbytes contains negative value\n-  #104 = Methodref          #323.#324     // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n-  #105 = Methodref          #1.#325       // org/apache/commons/compress/archivers/tar/TarUtils.parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n-  #106 = Class              #326          // java/util/HashMap\n-  #107 = Methodref          #106.#327     // java/util/HashMap.\"<init>\":(Ljava/util/Map;)V\n-  #108 = Methodref          #207.#328     // java/io/InputStream.read:()I\n-  #109 = Class              #329          // java/io/ByteArrayOutputStream\n-  #110 = Methodref          #109.#240     // java/io/ByteArrayOutputStream.\"<init>\":()V\n-  #111 = Class              #330          // org/apache/commons/compress/utils/CharsetNames\n-  #112 = String             #331          // UTF-8\n-  #113 = Methodref          #109.#332     // java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;\n-  #114 = InterfaceMethodref #214.#333     // java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #115 = String             #334          // Paxheader value size\n-  #116 = String             #335          //  exceeds size of header record\n-  #117 = Methodref          #323.#336     // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n-  #118 = String             #337          // Failed to read Paxheader. Expected\n-  #119 = String             #338          //  bytes, read\n-  #120 = String             #339          // Failed to read Paxheader.Value should end with a newline\n-  #121 = Fieldref           #340.#341     // java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;\n-  #122 = InterfaceMethodref #214.#342     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #123 = Class              #343          // org/apache/commons/compress/archivers/tar/TarGnuSparseKeys\n-  #124 = String             #344          // GNU.sparse.offset\n-  #125 = Methodref          #2.#345       // java/lang/String.equals:(Ljava/lang/Object;)Z\n-  #126 = Methodref          #215.#290     // java/lang/Long.longValue:()J\n-  #127 = Methodref          #215.#346     // java/lang/Long.valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n-  #128 = String             #347          // Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n-  #129 = String             #348          // Failed to read Paxheader.GNU.sparse.offset contains negative value\n-  #130 = String             #349          // GNU.sparse.numbytes\n-  #131 = String             #350          // Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n-  #132 = String             #351          // Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n-  #133 = String             #352          // Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n-  #134 = Methodref          #109.#353     // java/io/ByteArrayOutputStream.write:(I)V\n-  #135 = String             #354          // Failed to read Paxheader. Encountered a non-number while reading length\n-  #136 = Methodref          #1.#355       // org/apache/commons/compress/archivers/tar/TarUtils.parseOctalOrBinary:([BII)J\n-  #137 = String             #356          // Unexpected EOF when reading parse information of 1.X PAX format\n-  #138 = String             #357          // Corrupted TAR archive. Non-numeric value in sparse headers block\n-  #139 = Long               10l\n-  #141 = Methodref          #1.#358       // org/apache/commons/compress/archivers/tar/TarUtils.parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n-  #142 = Methodref          #84.#359      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n-  #143 = String             #360          // Corrupted TAR archive, sparse entry with negative offset\n-  #144 = Methodref          #84.#361      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n-  #145 = String             #362          // Corrupted TAR archive, sparse entry with negative numbytes\n-  #146 = String             #363          // Corrupted TAR archive, sparse entry is invalid\n-  #147 = Methodref          #40.#364      // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #148 = Methodref          #152.#240     // java/lang/Object.\"<init>\":()V\n-  #149 = Methodref          #365.#366     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #150 = Class              #367          // org/apache/commons/compress/archivers/tar/TarUtils$1\n-  #151 = Methodref          #150.#240     // org/apache/commons/compress/archivers/tar/TarUtils$1.\"<init>\":()V\n-  #152 = Class              #368          // java/lang/Object\n-  #153 = Utf8               InnerClasses\n-  #154 = Utf8               BYTE_MASK\n-  #155 = Utf8               I\n-  #156 = Utf8               ConstantValue\n-  #157 = Integer            255\n-  #158 = Utf8               DEFAULT_ENCODING\n-  #159 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #160 = Utf8               FALLBACK_ENCODING\n-  #161 = Utf8               computeCheckSum\n-  #162 = Utf8               ([B)J\n-  #163 = Utf8               Code\n-  #164 = Utf8               LineNumberTable\n-  #165 = Utf8               StackMapTable\n-  #166 = Class              #369          // \"[B\"\n-  #167 = Utf8               exceptionMessage\n-  #168 = Utf8               ([BIIIB)Ljava/lang/String;\n-  #169 = Utf8               formatBigIntegerBinary\n-  #170 = Utf8               (J[BIIZ)V\n-  #171 = Utf8               formatCheckSumOctalBytes\n-  #172 = Utf8               (J[BII)I\n-  #173 = Utf8               formatLongBinary\n-  #174 = Utf8               formatLongOctalBytes\n-  #175 = Utf8               formatLongOctalOrBinaryBytes\n-  #176 = Utf8               formatNameBytes\n-  #177 = Utf8               (Ljava/lang/String;[BII)I\n-  #178 = Utf8               (Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n-  #179 = Class              #370          // java/nio/ByteBuffer\n-  #180 = Utf8               Exceptions\n-  #181 = Utf8               formatOctalBytes\n-  #182 = Utf8               formatUnsignedOctalString\n-  #183 = Utf8               (J[BII)V\n-  #184 = Utf8               parseBinaryBigInteger\n-  #185 = Utf8               ([BIIZ)J\n-  #186 = Utf8               parseBinaryLong\n-  #187 = Utf8               parseBoolean\n-  #188 = Utf8               ([BI)Z\n-  #189 = Utf8               parseFromPAX01SparseHeaders\n-  #190 = Utf8               (Ljava/lang/String;)Ljava/util/List;\n-  #191 = Class              #371          // java/util/List\n-  #192 = Class              #372          // \"[Ljava/lang/String;\"\n-  #193 = Utf8               Signature\n-  #194 = Utf8               (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-  #195 = Utf8               parseName\n-  #196 = Utf8               ([BII)Ljava/lang/String;\n-  #197 = Utf8               ([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n-  #198 = Utf8               parseOctal\n-  #199 = Utf8               ([BII)J\n-  #200 = Utf8               parseOctalOrBinary\n-  #201 = Utf8               parsePAX01SparseHeaders\n-  #202 = Utf8               Deprecated\n-  #203 = Utf8               RuntimeVisibleAnnotations\n-  #204 = Utf8               Ljava/lang/Deprecated;\n-  #205 = Utf8               parsePAX1XSparseHeaders\n-  #206 = Utf8               (Ljava/io/InputStream;I)Ljava/util/List;\n-  #207 = Class              #373          // java/io/InputStream\n-  #208 = Class              #374          // \"[J\"\n-  #209 = Utf8               (Ljava/io/InputStream;I)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-  #210 = Utf8               parsePaxHeaders\n-  #211 = Utf8               (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;)Ljava/util/Map;\n-  #212 = Utf8               (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n-  #213 = Utf8               (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n-  #214 = Class              #375          // java/util/Map\n-  #215 = Class              #376          // java/lang/Long\n-  #216 = Utf8               (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;J)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n-  #217 = Utf8               parseSparse\n-  #218 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n-  #219 = Utf8               readLineOfNumberForPax1X\n-  #220 = Utf8               (Ljava/io/InputStream;)[J\n-  #221 = Utf8               readSparseStructs\n-  #222 = Utf8               ([BII)Ljava/util/List;\n-  #223 = Utf8               ([BII)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-  #224 = Utf8               verifyCheckSum\n-  #225 = Utf8               ([B)Z\n-  #226 = Utf8               <init>\n-  #227 = Utf8               ()V\n-  #228 = Utf8               <clinit>\n-  #229 = Utf8               SourceFile\n-  #230 = Utf8               TarUtils.java\n-  #231 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils\n-  #232 = Utf8               java/lang/String\n-  #233 = Class              #377          // java/nio/charset/Charset\n-  #234 = NameAndType        #378:#379     // defaultCharset:()Ljava/nio/charset/Charset;\n-  #235 = NameAndType        #226:#380     // \"<init>\":([BIILjava/nio/charset/Charset;)V\n-  #236 = Utf8               \\u0000\n-  #237 = Utf8               {NUL}\n-  #238 = NameAndType        #381:#382     // replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n-  #239 = Utf8               java/lang/StringBuilder\n-  #240 = NameAndType        #226:#227     // \"<init>\":()V\n-  #241 = Utf8               Invalid byte\n-  #242 = NameAndType        #383:#384     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #243 = NameAndType        #383:#385     // append:(I)Ljava/lang/StringBuilder;\n-  #244 = Utf8                at offset\n-  #245 = Utf8                in \\'\n-  #246 = Utf8               \\' len=\n-  #247 = NameAndType        #386:#387     // toString:()Ljava/lang/String;\n-  #248 = NameAndType        #388:#389     // valueOf:(J)Ljava/math/BigInteger;\n-  #249 = NameAndType        #390:#391     // toByteArray:()[B\n-  #250 = Utf8               java/lang/IllegalArgumentException\n-  #251 = Utf8               Value\n-  #252 = NameAndType        #383:#392     // append:(J)Ljava/lang/StringBuilder;\n-  #253 = Utf8                is too large for\n-  #254 = Utf8                byte field.\n-  #255 = NameAndType        #226:#393     // \"<init>\":(Ljava/lang/String;)V\n-  #256 = Class              #394          // java/lang/System\n-  #257 = NameAndType        #395:#396     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #258 = NameAndType        #182:#183     // formatUnsignedOctalString:(J[BII)V\n-  #259 = Class              #397          // java/lang/Math\n-  #260 = NameAndType        #398:#399     // abs:(J)J\n-  #261 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n-  #262 = NameAndType        #174:#172     // formatLongOctalBytes:(J[BII)I\n-  #263 = NameAndType        #173:#170     // formatLongBinary:(J[BIIZ)V\n-  #264 = NameAndType        #169:#170     // formatBigIntegerBinary:(J[BIIZ)V\n-  #265 = NameAndType        #158:#159     // DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #266 = NameAndType        #176:#178     // formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n-  #267 = Utf8               java/io/IOException\n-  #268 = NameAndType        #160:#159     // FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #269 = Utf8               java/io/UncheckedIOException\n-  #270 = NameAndType        #226:#400     // \"<init>\":(Ljava/io/IOException;)V\n-  #271 = NameAndType        #401:#402     // length:()I\n-  #272 = Class              #403          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #273 = NameAndType        #404:#405     // encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-  #274 = NameAndType        #406:#402     // limit:()I\n-  #275 = NameAndType        #407:#408     // substring:(II)Ljava/lang/String;\n-  #276 = NameAndType        #409:#402     // position:()I\n-  #277 = NameAndType        #410:#391     // array:()[B\n-  #278 = NameAndType        #411:#402     // arrayOffset:()I\n-  #279 = Utf8               =\n-  #280 = NameAndType        #412:#413     // toOctalString:(J)Ljava/lang/String;\n-  #281 = Utf8                will not fit in octal number buffer of length\n-  #282 = Utf8               java/math/BigInteger\n-  #283 = NameAndType        #226:#414     // \"<init>\":([B)V\n-  #284 = NameAndType        #415:#416     // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #285 = NameAndType        #417:#418     // not:()Ljava/math/BigInteger;\n-  #286 = NameAndType        #419:#402     // bitLength:()I\n-  #287 = Utf8               At offset\n-  #288 = Utf8               ,\n-  #289 = Utf8                byte binary number exceeds maximum signed long value\n-  #290 = NameAndType        #420:#421     // longValue:()J\n-  #291 = NameAndType        #422:#423     // pow:(DD)D\n-  #292 = Utf8               java/util/ArrayList\n-  #293 = Utf8               ,\n-  #294 = NameAndType        #424:#425     // split:(Ljava/lang/String;)[Ljava/lang/String;\n-  #295 = Utf8               Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n-  #296 = NameAndType        #426:#427     // parseLong:(Ljava/lang/String;)J\n-  #297 = Utf8               java/lang/NumberFormatException\n-  #298 = Utf8               Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n-  #299 = Utf8               Corrupted TAR archive. Sparse struct offset contains negative value\n-  #300 = Utf8               Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n-  #301 = Utf8               Corrupted TAR archive. Sparse struct numbytes contains negative value\n-  #302 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-  #303 = NameAndType        #226:#428     // \"<init>\":(JJ)V\n-  #304 = NameAndType        #415:#429     // add:(Ljava/lang/Object;)Z\n-  #305 = Class              #430          // java/util/Collections\n-  #306 = NameAndType        #431:#432     // unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-  #307 = NameAndType        #195:#197     // parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n-  #308 = NameAndType        #433:#434     // decode:([B)Ljava/lang/String;\n-  #309 = Utf8\n-  #310 = Utf8               Length\n-  #311 = Utf8                must be at least 2\n-  #312 = NameAndType        #167:#168     // exceptionMessage:([BIIIB)Ljava/lang/String;\n-  #313 = NameAndType        #198:#199     // parseOctal:([BII)J\n-  #314 = NameAndType        #186:#185     // parseBinaryLong:([BIIZ)J\n-  #315 = NameAndType        #184:#185     // parseBinaryBigInteger:([BIIZ)J\n-  #316 = NameAndType        #189:#190     // parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n-  #317 = NameAndType        #435:#387     // getMessage:()Ljava/lang/String;\n-  #318 = NameAndType        #226:#436     // \"<init>\":(Ljava/lang/String;Ljava/io/IOException;)V\n-  #319 = NameAndType        #219:#220     // readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n-  #320 = Utf8               Corrupted TAR archive. Negative value in sparse headers block\n-  #321 = Utf8               Corrupted TAR archive. Sparse header block offset contains negative value\n-  #322 = Utf8               Corrupted TAR archive. Sparse header block numbytes contains negative value\n-  #323 = Class              #437          // org/apache/commons/compress/utils/IOUtils\n-  #324 = NameAndType        #438:#439     // skip:(Ljava/io/InputStream;J)J\n-  #325 = NameAndType        #210:#213     // parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n-  #326 = Utf8               java/util/HashMap\n-  #327 = NameAndType        #226:#440     // \"<init>\":(Ljava/util/Map;)V\n-  #328 = NameAndType        #441:#402     // read:()I\n-  #329 = Utf8               java/io/ByteArrayOutputStream\n-  #330 = Utf8               org/apache/commons/compress/utils/CharsetNames\n-  #331 = Utf8               UTF-8\n-  #332 = NameAndType        #386:#442     // toString:(Ljava/lang/String;)Ljava/lang/String;\n-  #333 = NameAndType        #443:#444     // remove:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #334 = Utf8               Paxheader value size\n-  #335 = Utf8                exceeds size of header record\n-  #336 = NameAndType        #445:#446     // readRange:(Ljava/io/InputStream;I)[B\n-  #337 = Utf8               Failed to read Paxheader. Expected\n-  #338 = Utf8                bytes, read\n-  #339 = Utf8               Failed to read Paxheader.Value should end with a newline\n-  #340 = Class              #447          // java/nio/charset/StandardCharsets\n-  #341 = NameAndType        #448:#449     // UTF_8:Ljava/nio/charset/Charset;\n-  #342 = NameAndType        #450:#451     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #343 = Utf8               org/apache/commons/compress/archivers/tar/TarGnuSparseKeys\n-  #344 = Utf8               GNU.sparse.offset\n-  #345 = NameAndType        #452:#429     // equals:(Ljava/lang/Object;)Z\n-  #346 = NameAndType        #388:#453     // valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n-  #347 = Utf8               Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n-  #348 = Utf8               Failed to read Paxheader.GNU.sparse.offset contains negative value\n-  #349 = Utf8               GNU.sparse.numbytes\n-  #350 = Utf8               Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n-  #351 = Utf8               Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n-  #352 = Utf8               Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n-  #353 = NameAndType        #454:#455     // write:(I)V\n-  #354 = Utf8               Failed to read Paxheader. Encountered a non-number while reading length\n-  #355 = NameAndType        #200:#199     // parseOctalOrBinary:([BII)J\n-  #356 = Utf8               Unexpected EOF when reading parse information of 1.X PAX format\n-  #357 = Utf8               Corrupted TAR archive. Non-numeric value in sparse headers block\n-  #358 = NameAndType        #217:#218     // parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n-  #359 = NameAndType        #456:#421     // getOffset:()J\n-  #360 = Utf8               Corrupted TAR archive, sparse entry with negative offset\n-  #361 = NameAndType        #457:#421     // getNumbytes:()J\n-  #362 = Utf8               Corrupted TAR archive, sparse entry with negative numbytes\n-  #363 = Utf8               Corrupted TAR archive, sparse entry is invalid\n-  #364 = NameAndType        #226:#458     // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #365 = Class              #459          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #366 = NameAndType        #460:#461     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #367 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils$1\n-  #368 = Utf8               java/lang/Object\n-  #369 = Utf8               [B\n-  #370 = Utf8               java/nio/ByteBuffer\n-  #371 = Utf8               java/util/List\n-  #372 = Utf8               [Ljava/lang/String;\n-  #373 = Utf8               java/io/InputStream\n-  #374 = Utf8               [J\n-  #375 = Utf8               java/util/Map\n-  #376 = Utf8               java/lang/Long\n-  #377 = Utf8               java/nio/charset/Charset\n-  #378 = Utf8               defaultCharset\n-  #379 = Utf8               ()Ljava/nio/charset/Charset;\n-  #380 = Utf8               ([BIILjava/nio/charset/Charset;)V\n-  #381 = Utf8               replace\n-  #382 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n-  #383 = Utf8               append\n-  #384 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #385 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #386 = Utf8               toString\n-  #387 = Utf8               ()Ljava/lang/String;\n-  #388 = Utf8               valueOf\n-  #389 = Utf8               (J)Ljava/math/BigInteger;\n-  #390 = Utf8               toByteArray\n-  #391 = Utf8               ()[B\n-  #392 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #393 = Utf8               (Ljava/lang/String;)V\n-  #394 = Utf8               java/lang/System\n-  #395 = Utf8               arraycopy\n-  #396 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #397 = Utf8               java/lang/Math\n-  #398 = Utf8               abs\n-  #399 = Utf8               (J)J\n-  #400 = Utf8               (Ljava/io/IOException;)V\n-  #401 = Utf8               length\n-  #402 = Utf8               ()I\n-  #403 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #404 = Utf8               encode\n-  #405 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-  #406 = Utf8               limit\n-  #407 = Utf8               substring\n-  #408 = Utf8               (II)Ljava/lang/String;\n-  #409 = Utf8               position\n-  #410 = Utf8               array\n-  #411 = Utf8               arrayOffset\n-  #412 = Utf8               toOctalString\n-  #413 = Utf8               (J)Ljava/lang/String;\n-  #414 = Utf8               ([B)V\n-  #415 = Utf8               add\n-  #416 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #417 = Utf8               not\n-  #418 = Utf8               ()Ljava/math/BigInteger;\n-  #419 = Utf8               bitLength\n-  #420 = Utf8               longValue\n-  #421 = Utf8               ()J\n-  #422 = Utf8               pow\n-  #423 = Utf8               (DD)D\n-  #424 = Utf8               split\n-  #425 = Utf8               (Ljava/lang/String;)[Ljava/lang/String;\n-  #426 = Utf8               parseLong\n-  #427 = Utf8               (Ljava/lang/String;)J\n-  #428 = Utf8               (JJ)V\n-  #429 = Utf8               (Ljava/lang/Object;)Z\n-  #430 = Utf8               java/util/Collections\n-  #431 = Utf8               unmodifiableList\n-  #432 = Utf8               (Ljava/util/List;)Ljava/util/List;\n-  #433 = Utf8               decode\n-  #434 = Utf8               ([B)Ljava/lang/String;\n-  #435 = Utf8               getMessage\n-  #436 = Utf8               (Ljava/lang/String;Ljava/io/IOException;)V\n-  #437 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #438 = Utf8               skip\n-  #439 = Utf8               (Ljava/io/InputStream;J)J\n-  #440 = Utf8               (Ljava/util/Map;)V\n-  #441 = Utf8               read\n-  #442 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #443 = Utf8               remove\n-  #444 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #445 = Utf8               readRange\n-  #446 = Utf8               (Ljava/io/InputStream;I)[B\n-  #447 = Utf8               java/nio/charset/StandardCharsets\n-  #448 = Utf8               UTF_8\n-  #449 = Utf8               Ljava/nio/charset/Charset;\n-  #450 = Utf8               put\n-  #451 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #452 = Utf8               equals\n-  #453 = Utf8               (Ljava/lang/String;)Ljava/lang/Long;\n-  #454 = Utf8               write\n-  #455 = Utf8               (I)V\n-  #456 = Utf8               getOffset\n-  #457 = Utf8               getNumbytes\n-  #458 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #459 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #460 = Utf8               getZipEncoding\n-  #461 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/tar/TarUtils\n+    #2 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils\n+    #3 = Class              #4            // java/lang/String\n+    #4 = Utf8               java/lang/String\n+    #5 = Methodref          #6.#7         // java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n+    #6 = Class              #8            // java/nio/charset/Charset\n+    #7 = NameAndType        #9:#10        // defaultCharset:()Ljava/nio/charset/Charset;\n+    #8 = Utf8               java/nio/charset/Charset\n+    #9 = Utf8               defaultCharset\n+   #10 = Utf8               ()Ljava/nio/charset/Charset;\n+   #11 = Methodref          #3.#12        // java/lang/String.\"<init>\":([BIILjava/nio/charset/Charset;)V\n+   #12 = NameAndType        #13:#14       // \"<init>\":([BIILjava/nio/charset/Charset;)V\n+   #13 = Utf8               <init>\n+   #14 = Utf8               ([BIILjava/nio/charset/Charset;)V\n+   #15 = String             #16           // \\u0000\n+   #16 = Utf8               \\u0000\n+   #17 = String             #18           // {NUL}\n+   #18 = Utf8               {NUL}\n+   #19 = Methodref          #3.#20        // java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n+   #20 = NameAndType        #21:#22       // replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n+   #21 = Utf8               replace\n+   #22 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n+   #23 = Class              #24           // java/lang/StringBuilder\n+   #24 = Utf8               java/lang/StringBuilder\n+   #25 = Methodref          #23.#26       // java/lang/StringBuilder.\"<init>\":()V\n+   #26 = NameAndType        #13:#27       // \"<init>\":()V\n+   #27 = Utf8               ()V\n+   #28 = String             #29           // Invalid byte\n+   #29 = Utf8               Invalid byte\n+   #30 = Methodref          #23.#31       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #31 = NameAndType        #32:#33       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #32 = Utf8               append\n+   #33 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #34 = Methodref          #23.#35       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #35 = NameAndType        #32:#36       // append:(I)Ljava/lang/StringBuilder;\n+   #36 = Utf8               (I)Ljava/lang/StringBuilder;\n+   #37 = String             #38           //  at offset\n+   #38 = Utf8                at offset\n+   #39 = String             #40           //  in \\'\n+   #40 = Utf8                in \\'\n+   #41 = String             #42           // \\' len=\n+   #42 = Utf8               \\' len=\n+   #43 = Methodref          #23.#44       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #44 = NameAndType        #45:#46       // toString:()Ljava/lang/String;\n+   #45 = Utf8               toString\n+   #46 = Utf8               ()Ljava/lang/String;\n+   #47 = Methodref          #48.#49       // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+   #48 = Class              #50           // java/math/BigInteger\n+   #49 = NameAndType        #51:#52       // valueOf:(J)Ljava/math/BigInteger;\n+   #50 = Utf8               java/math/BigInteger\n+   #51 = Utf8               valueOf\n+   #52 = Utf8               (J)Ljava/math/BigInteger;\n+   #53 = Methodref          #48.#54       // java/math/BigInteger.toByteArray:()[B\n+   #54 = NameAndType        #55:#56       // toByteArray:()[B\n+   #55 = Utf8               toByteArray\n+   #56 = Utf8               ()[B\n+   #57 = Class              #58           // java/lang/IllegalArgumentException\n+   #58 = Utf8               java/lang/IllegalArgumentException\n+   #59 = String             #60           // Value\n+   #60 = Utf8               Value\n+   #61 = Methodref          #23.#62       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+   #62 = NameAndType        #32:#63       // append:(J)Ljava/lang/StringBuilder;\n+   #63 = Utf8               (J)Ljava/lang/StringBuilder;\n+   #64 = String             #65           //  is too large for\n+   #65 = Utf8                is too large for\n+   #66 = String             #67           //  byte field.\n+   #67 = Utf8                byte field.\n+   #68 = Methodref          #57.#69       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #69 = NameAndType        #13:#70       // \"<init>\":(Ljava/lang/String;)V\n+   #70 = Utf8               (Ljava/lang/String;)V\n+   #71 = Methodref          #72.#73       // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #72 = Class              #74           // java/lang/System\n+   #73 = NameAndType        #75:#76       // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #74 = Utf8               java/lang/System\n+   #75 = Utf8               arraycopy\n+   #76 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #77 = Methodref          #1.#78        // org/apache/commons/compress/archivers/tar/TarUtils.formatUnsignedOctalString:(J[BII)V\n+   #78 = NameAndType        #79:#80       // formatUnsignedOctalString:(J[BII)V\n+   #79 = Utf8               formatUnsignedOctalString\n+   #80 = Utf8               (J[BII)V\n+   #81 = Methodref          #82.#83       // java/lang/Math.abs:(J)J\n+   #82 = Class              #84           // java/lang/Math\n+   #83 = NameAndType        #85:#86       // abs:(J)J\n+   #84 = Utf8               java/lang/Math\n+   #85 = Utf8               abs\n+   #86 = Utf8               (J)J\n+   #87 = Long               255l\n+   #89 = Class              #90           // org/apache/commons/compress/archivers/tar/TarConstants\n+   #90 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n+   #91 = Long               2097151l\n+   #93 = Long               8589934591l\n+   #95 = Methodref          #1.#96        // org/apache/commons/compress/archivers/tar/TarUtils.formatLongOctalBytes:(J[BII)I\n+   #96 = NameAndType        #97:#98       // formatLongOctalBytes:(J[BII)I\n+   #97 = Utf8               formatLongOctalBytes\n+   #98 = Utf8               (J[BII)I\n+   #99 = Methodref          #1.#100       // org/apache/commons/compress/archivers/tar/TarUtils.formatLongBinary:(J[BIIZ)V\n+  #100 = NameAndType        #101:#102     // formatLongBinary:(J[BIIZ)V\n+  #101 = Utf8               formatLongBinary\n+  #102 = Utf8               (J[BIIZ)V\n+  #103 = Methodref          #1.#104       // org/apache/commons/compress/archivers/tar/TarUtils.formatBigIntegerBinary:(J[BIIZ)V\n+  #104 = NameAndType        #105:#102     // formatBigIntegerBinary:(J[BIIZ)V\n+  #105 = Utf8               formatBigIntegerBinary\n+  #106 = Fieldref           #1.#107       // org/apache/commons/compress/archivers/tar/TarUtils.DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #107 = NameAndType        #108:#109     // DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #108 = Utf8               DEFAULT_ENCODING\n+  #109 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #110 = Methodref          #1.#111       // org/apache/commons/compress/archivers/tar/TarUtils.formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+  #111 = NameAndType        #112:#113     // formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+  #112 = Utf8               formatNameBytes\n+  #113 = Utf8               (Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+  #114 = Class              #115          // java/io/IOException\n+  #115 = Utf8               java/io/IOException\n+  #116 = Fieldref           #1.#117       // org/apache/commons/compress/archivers/tar/TarUtils.FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #117 = NameAndType        #118:#109     // FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #118 = Utf8               FALLBACK_ENCODING\n+  #119 = Class              #120          // java/io/UncheckedIOException\n+  #120 = Utf8               java/io/UncheckedIOException\n+  #121 = Methodref          #119.#122     // java/io/UncheckedIOException.\"<init>\":(Ljava/io/IOException;)V\n+  #122 = NameAndType        #13:#123      // \"<init>\":(Ljava/io/IOException;)V\n+  #123 = Utf8               (Ljava/io/IOException;)V\n+  #124 = Methodref          #3.#125       // java/lang/String.length:()I\n+  #125 = NameAndType        #126:#127     // length:()I\n+  #126 = Utf8               length\n+  #127 = Utf8               ()I\n+  #128 = InterfaceMethodref #129.#130     // org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #129 = Class              #131          // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #130 = NameAndType        #132:#133     // encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #131 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #132 = Utf8               encode\n+  #133 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #134 = Methodref          #135.#136     // java/nio/ByteBuffer.limit:()I\n+  #135 = Class              #137          // java/nio/ByteBuffer\n+  #136 = NameAndType        #138:#127     // limit:()I\n+  #137 = Utf8               java/nio/ByteBuffer\n+  #138 = Utf8               limit\n+  #139 = Methodref          #3.#140       // java/lang/String.substring:(II)Ljava/lang/String;\n+  #140 = NameAndType        #141:#142     // substring:(II)Ljava/lang/String;\n+  #141 = Utf8               substring\n+  #142 = Utf8               (II)Ljava/lang/String;\n+  #143 = Methodref          #135.#144     // java/nio/ByteBuffer.position:()I\n+  #144 = NameAndType        #145:#127     // position:()I\n+  #145 = Utf8               position\n+  #146 = Methodref          #135.#147     // java/nio/ByteBuffer.array:()[B\n+  #147 = NameAndType        #148:#56      // array:()[B\n+  #148 = Utf8               array\n+  #149 = Methodref          #135.#150     // java/nio/ByteBuffer.arrayOffset:()I\n+  #150 = NameAndType        #151:#127     // arrayOffset:()I\n+  #151 = Utf8               arrayOffset\n+  #152 = Long               7l\n+  #154 = String             #155          // =\n+  #155 = Utf8               =\n+  #156 = Methodref          #157.#158     // java/lang/Long.toOctalString:(J)Ljava/lang/String;\n+  #157 = Class              #159          // java/lang/Long\n+  #158 = NameAndType        #160:#161     // toOctalString:(J)Ljava/lang/String;\n+  #159 = Utf8               java/lang/Long\n+  #160 = Utf8               toOctalString\n+  #161 = Utf8               (J)Ljava/lang/String;\n+  #162 = String             #163          //  will not fit in octal number buffer of length\n+  #163 = Utf8                will not fit in octal number buffer of length\n+  #164 = Methodref          #48.#165      // java/math/BigInteger.\"<init>\":([B)V\n+  #165 = NameAndType        #13:#166      // \"<init>\":([B)V\n+  #166 = Utf8               ([B)V\n+  #167 = Long               -1l\n+  #169 = Methodref          #48.#170      // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #170 = NameAndType        #171:#172     // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #171 = Utf8               add\n+  #172 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #173 = Methodref          #48.#174      // java/math/BigInteger.not:()Ljava/math/BigInteger;\n+  #174 = NameAndType        #175:#176     // not:()Ljava/math/BigInteger;\n+  #175 = Utf8               not\n+  #176 = Utf8               ()Ljava/math/BigInteger;\n+  #177 = Methodref          #48.#178      // java/math/BigInteger.bitLength:()I\n+  #178 = NameAndType        #179:#127     // bitLength:()I\n+  #179 = Utf8               bitLength\n+  #180 = String             #181          // At offset\n+  #181 = Utf8               At offset\n+  #182 = String             #183          // ,\n+  #183 = Utf8               ,\n+  #184 = String             #185          //  byte binary number exceeds maximum signed long value\n+  #185 = Utf8                byte binary number exceeds maximum signed long value\n+  #186 = Methodref          #48.#187      // java/math/BigInteger.longValue:()J\n+  #187 = NameAndType        #188:#189     // longValue:()J\n+  #188 = Utf8               longValue\n+  #189 = Utf8               ()J\n+  #190 = Double             2.0d\n+  #192 = Double             8.0d\n+  #194 = Methodref          #82.#195      // java/lang/Math.pow:(DD)D\n+  #195 = NameAndType        #196:#197     // pow:(DD)D\n+  #196 = Utf8               pow\n+  #197 = Utf8               (DD)D\n+  #198 = Class              #199          // java/util/ArrayList\n+  #199 = Utf8               java/util/ArrayList\n+  #200 = Methodref          #198.#26      // java/util/ArrayList.\"<init>\":()V\n+  #201 = String             #202          // ,\n+  #202 = Utf8               ,\n+  #203 = Methodref          #3.#204       // java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n+  #204 = NameAndType        #205:#206     // split:(Ljava/lang/String;)[Ljava/lang/String;\n+  #205 = Utf8               split\n+  #206 = Utf8               (Ljava/lang/String;)[Ljava/lang/String;\n+  #207 = String             #208          // Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n+  #208 = Utf8               Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n+  #209 = Methodref          #114.#69      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+  #210 = Methodref          #157.#211     // java/lang/Long.parseLong:(Ljava/lang/String;)J\n+  #211 = NameAndType        #212:#213     // parseLong:(Ljava/lang/String;)J\n+  #212 = Utf8               parseLong\n+  #213 = Utf8               (Ljava/lang/String;)J\n+  #214 = Class              #215          // java/lang/NumberFormatException\n+  #215 = Utf8               java/lang/NumberFormatException\n+  #216 = String             #217          // Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n+  #217 = Utf8               Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n+  #218 = String             #219          // Corrupted TAR archive. Sparse struct offset contains negative value\n+  #219 = Utf8               Corrupted TAR archive. Sparse struct offset contains negative value\n+  #220 = String             #221          // Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n+  #221 = Utf8               Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n+  #222 = String             #223          // Corrupted TAR archive. Sparse struct numbytes contains negative value\n+  #223 = Utf8               Corrupted TAR archive. Sparse struct numbytes contains negative value\n+  #224 = Class              #225          // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+  #225 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+  #226 = Methodref          #224.#227     // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+  #227 = NameAndType        #13:#228      // \"<init>\":(JJ)V\n+  #228 = Utf8               (JJ)V\n+  #229 = InterfaceMethodref #230.#231     // java/util/List.add:(Ljava/lang/Object;)Z\n+  #230 = Class              #232          // java/util/List\n+  #231 = NameAndType        #171:#233     // add:(Ljava/lang/Object;)Z\n+  #232 = Utf8               java/util/List\n+  #233 = Utf8               (Ljava/lang/Object;)Z\n+  #234 = Methodref          #235.#236     // java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+  #235 = Class              #237          // java/util/Collections\n+  #236 = NameAndType        #238:#239     // unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+  #237 = Utf8               java/util/Collections\n+  #238 = Utf8               unmodifiableList\n+  #239 = Utf8               (Ljava/util/List;)Ljava/util/List;\n+  #240 = Methodref          #1.#241       // org/apache/commons/compress/archivers/tar/TarUtils.parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+  #241 = NameAndType        #242:#243     // parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+  #242 = Utf8               parseName\n+  #243 = Utf8               ([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+  #244 = InterfaceMethodref #129.#245     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+  #245 = NameAndType        #246:#247     // decode:([B)Ljava/lang/String;\n+  #246 = Utf8               decode\n+  #247 = Utf8               ([B)Ljava/lang/String;\n+  #248 = String             #249          //\n+  #249 = Utf8\n+  #250 = String             #251          // Length\n+  #251 = Utf8               Length\n+  #252 = String             #253          //  must be at least 2\n+  #253 = Utf8                must be at least 2\n+  #254 = Methodref          #1.#255       // org/apache/commons/compress/archivers/tar/TarUtils.exceptionMessage:([BIIIB)Ljava/lang/String;\n+  #255 = NameAndType        #256:#257     // exceptionMessage:([BIIIB)Ljava/lang/String;\n+  #256 = Utf8               exceptionMessage\n+  #257 = Utf8               ([BIIIB)Ljava/lang/String;\n+  #258 = Methodref          #1.#259       // org/apache/commons/compress/archivers/tar/TarUtils.parseOctal:([BII)J\n+  #259 = NameAndType        #260:#261     // parseOctal:([BII)J\n+  #260 = Utf8               parseOctal\n+  #261 = Utf8               ([BII)J\n+  #262 = Methodref          #1.#263       // org/apache/commons/compress/archivers/tar/TarUtils.parseBinaryLong:([BIIZ)J\n+  #263 = NameAndType        #264:#265     // parseBinaryLong:([BIIZ)J\n+  #264 = Utf8               parseBinaryLong\n+  #265 = Utf8               ([BIIZ)J\n+  #266 = Methodref          #1.#267       // org/apache/commons/compress/archivers/tar/TarUtils.parseBinaryBigInteger:([BIIZ)J\n+  #267 = NameAndType        #268:#265     // parseBinaryBigInteger:([BIIZ)J\n+  #268 = Utf8               parseBinaryBigInteger\n+  #269 = Methodref          #1.#270       // org/apache/commons/compress/archivers/tar/TarUtils.parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n+  #270 = NameAndType        #271:#272     // parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n+  #271 = Utf8               parseFromPAX01SparseHeaders\n+  #272 = Utf8               (Ljava/lang/String;)Ljava/util/List;\n+  #273 = Methodref          #114.#274     // java/io/IOException.getMessage:()Ljava/lang/String;\n+  #274 = NameAndType        #275:#46      // getMessage:()Ljava/lang/String;\n+  #275 = Utf8               getMessage\n+  #276 = Methodref          #119.#277     // java/io/UncheckedIOException.\"<init>\":(Ljava/lang/String;Ljava/io/IOException;)V\n+  #277 = NameAndType        #13:#278      // \"<init>\":(Ljava/lang/String;Ljava/io/IOException;)V\n+  #278 = Utf8               (Ljava/lang/String;Ljava/io/IOException;)V\n+  #279 = Methodref          #1.#280       // org/apache/commons/compress/archivers/tar/TarUtils.readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+  #280 = NameAndType        #281:#282     // readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+  #281 = Utf8               readLineOfNumberForPax1X\n+  #282 = Utf8               (Ljava/io/InputStream;)[J\n+  #283 = String             #284          // Corrupted TAR archive. Negative value in sparse headers block\n+  #284 = Utf8               Corrupted TAR archive. Negative value in sparse headers block\n+  #285 = String             #286          // Corrupted TAR archive. Sparse header block offset contains negative value\n+  #286 = Utf8               Corrupted TAR archive. Sparse header block offset contains negative value\n+  #287 = String             #288          // Corrupted TAR archive. Sparse header block numbytes contains negative value\n+  #288 = Utf8               Corrupted TAR archive. Sparse header block numbytes contains negative value\n+  #289 = Methodref          #290.#291     // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+  #290 = Class              #292          // org/apache/commons/compress/utils/IOUtils\n+  #291 = NameAndType        #293:#294     // skip:(Ljava/io/InputStream;J)J\n+  #292 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #293 = Utf8               skip\n+  #294 = Utf8               (Ljava/io/InputStream;J)J\n+  #295 = Methodref          #1.#296       // org/apache/commons/compress/archivers/tar/TarUtils.parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+  #296 = NameAndType        #297:#298     // parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+  #297 = Utf8               parsePaxHeaders\n+  #298 = Utf8               (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+  #299 = Class              #300          // java/util/HashMap\n+  #300 = Utf8               java/util/HashMap\n+  #301 = Methodref          #299.#302     // java/util/HashMap.\"<init>\":(Ljava/util/Map;)V\n+  #302 = NameAndType        #13:#303      // \"<init>\":(Ljava/util/Map;)V\n+  #303 = Utf8               (Ljava/util/Map;)V\n+  #304 = Methodref          #305.#306     // java/io/InputStream.read:()I\n+  #305 = Class              #307          // java/io/InputStream\n+  #306 = NameAndType        #308:#127     // read:()I\n+  #307 = Utf8               java/io/InputStream\n+  #308 = Utf8               read\n+  #309 = Class              #310          // java/io/ByteArrayOutputStream\n+  #310 = Utf8               java/io/ByteArrayOutputStream\n+  #311 = Methodref          #309.#26      // java/io/ByteArrayOutputStream.\"<init>\":()V\n+  #312 = Class              #313          // org/apache/commons/compress/utils/CharsetNames\n+  #313 = Utf8               org/apache/commons/compress/utils/CharsetNames\n+  #314 = String             #315          // UTF-8\n+  #315 = Utf8               UTF-8\n+  #316 = Methodref          #309.#317     // java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;\n+  #317 = NameAndType        #45:#318      // toString:(Ljava/lang/String;)Ljava/lang/String;\n+  #318 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #319 = InterfaceMethodref #320.#321     // java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #320 = Class              #322          // java/util/Map\n+  #321 = NameAndType        #323:#324     // remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #322 = Utf8               java/util/Map\n+  #323 = Utf8               remove\n+  #324 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #325 = String             #326          // Paxheader value size\n+  #326 = Utf8               Paxheader value size\n+  #327 = String             #328          //  exceeds size of header record\n+  #328 = Utf8                exceeds size of header record\n+  #329 = Methodref          #290.#330     // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n+  #330 = NameAndType        #331:#332     // readRange:(Ljava/io/InputStream;I)[B\n+  #331 = Utf8               readRange\n+  #332 = Utf8               (Ljava/io/InputStream;I)[B\n+  #333 = String             #334          // Failed to read Paxheader. Expected\n+  #334 = Utf8               Failed to read Paxheader. Expected\n+  #335 = String             #336          //  bytes, read\n+  #336 = Utf8                bytes, read\n+  #337 = String             #338          // Failed to read Paxheader.Value should end with a newline\n+  #338 = Utf8               Failed to read Paxheader.Value should end with a newline\n+  #339 = Fieldref           #340.#341     // java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;\n+  #340 = Class              #342          // java/nio/charset/StandardCharsets\n+  #341 = NameAndType        #343:#344     // UTF_8:Ljava/nio/charset/Charset;\n+  #342 = Utf8               java/nio/charset/StandardCharsets\n+  #343 = Utf8               UTF_8\n+  #344 = Utf8               Ljava/nio/charset/Charset;\n+  #345 = InterfaceMethodref #320.#346     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #346 = NameAndType        #347:#348     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #347 = Utf8               put\n+  #348 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #349 = Class              #350          // org/apache/commons/compress/archivers/tar/TarGnuSparseKeys\n+  #350 = Utf8               org/apache/commons/compress/archivers/tar/TarGnuSparseKeys\n+  #351 = String             #352          // GNU.sparse.offset\n+  #352 = Utf8               GNU.sparse.offset\n+  #353 = Methodref          #3.#354       // java/lang/String.equals:(Ljava/lang/Object;)Z\n+  #354 = NameAndType        #355:#233     // equals:(Ljava/lang/Object;)Z\n+  #355 = Utf8               equals\n+  #356 = Methodref          #157.#187     // java/lang/Long.longValue:()J\n+  #357 = Methodref          #157.#358     // java/lang/Long.valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n+  #358 = NameAndType        #51:#359      // valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n+  #359 = Utf8               (Ljava/lang/String;)Ljava/lang/Long;\n+  #360 = String             #361          // Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n+  #361 = Utf8               Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n+  #362 = String             #363          // Failed to read Paxheader.GNU.sparse.offset contains negative value\n+  #363 = Utf8               Failed to read Paxheader.GNU.sparse.offset contains negative value\n+  #364 = String             #365          // GNU.sparse.numbytes\n+  #365 = Utf8               GNU.sparse.numbytes\n+  #366 = String             #367          // Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n+  #367 = Utf8               Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n+  #368 = String             #369          // Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n+  #369 = Utf8               Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n+  #370 = String             #371          // Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n+  #371 = Utf8               Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n+  #372 = Methodref          #309.#373     // java/io/ByteArrayOutputStream.write:(I)V\n+  #373 = NameAndType        #374:#375     // write:(I)V\n+  #374 = Utf8               write\n+  #375 = Utf8               (I)V\n+  #376 = String             #377          // Failed to read Paxheader. Encountered a non-number while reading length\n+  #377 = Utf8               Failed to read Paxheader. Encountered a non-number while reading length\n+  #378 = Methodref          #1.#379       // org/apache/commons/compress/archivers/tar/TarUtils.parseOctalOrBinary:([BII)J\n+  #379 = NameAndType        #380:#261     // parseOctalOrBinary:([BII)J\n+  #380 = Utf8               parseOctalOrBinary\n+  #381 = String             #382          // Unexpected EOF when reading parse information of 1.X PAX format\n+  #382 = Utf8               Unexpected EOF when reading parse information of 1.X PAX format\n+  #383 = String             #384          // Corrupted TAR archive. Non-numeric value in sparse headers block\n+  #384 = Utf8               Corrupted TAR archive. Non-numeric value in sparse headers block\n+  #385 = Long               10l\n+  #387 = Methodref          #1.#388       // org/apache/commons/compress/archivers/tar/TarUtils.parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+  #388 = NameAndType        #389:#390     // parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+  #389 = Utf8               parseSparse\n+  #390 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+  #391 = Methodref          #224.#392     // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+  #392 = NameAndType        #393:#189     // getOffset:()J\n+  #393 = Utf8               getOffset\n+  #394 = String             #395          // Corrupted TAR archive, sparse entry with negative offset\n+  #395 = Utf8               Corrupted TAR archive, sparse entry with negative offset\n+  #396 = Methodref          #224.#397     // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n+  #397 = NameAndType        #398:#189     // getNumbytes:()J\n+  #398 = Utf8               getNumbytes\n+  #399 = String             #400          // Corrupted TAR archive, sparse entry with negative numbytes\n+  #400 = Utf8               Corrupted TAR archive, sparse entry with negative numbytes\n+  #401 = String             #402          // Corrupted TAR archive, sparse entry is invalid\n+  #402 = Utf8               Corrupted TAR archive, sparse entry is invalid\n+  #403 = Methodref          #114.#404     // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #404 = NameAndType        #13:#405      // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #405 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #406 = Methodref          #407.#26      // java/lang/Object.\"<init>\":()V\n+  #407 = Class              #408          // java/lang/Object\n+  #408 = Utf8               java/lang/Object\n+  #409 = Methodref          #410.#411     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #410 = Class              #412          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #411 = NameAndType        #413:#414     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #412 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #413 = Utf8               getZipEncoding\n+  #414 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #415 = Class              #416          // org/apache/commons/compress/archivers/tar/TarUtils$1\n+  #416 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils$1\n+  #417 = Methodref          #415.#26      // org/apache/commons/compress/archivers/tar/TarUtils$1.\"<init>\":()V\n+  #418 = Utf8               BYTE_MASK\n+  #419 = Utf8               I\n+  #420 = Utf8               ConstantValue\n+  #421 = Integer            255\n+  #422 = Utf8               computeCheckSum\n+  #423 = Utf8               ([B)J\n+  #424 = Utf8               Code\n+  #425 = Utf8               LineNumberTable\n+  #426 = Utf8               StackMapTable\n+  #427 = Class              #428          // \"[B\"\n+  #428 = Utf8               [B\n+  #429 = Utf8               formatCheckSumOctalBytes\n+  #430 = Utf8               formatLongOctalOrBinaryBytes\n+  #431 = Utf8               (Ljava/lang/String;[BII)I\n+  #432 = Utf8               Exceptions\n+  #433 = Utf8               formatOctalBytes\n+  #434 = Utf8               parseBoolean\n+  #435 = Utf8               ([BI)Z\n+  #436 = Class              #437          // \"[Ljava/lang/String;\"\n+  #437 = Utf8               [Ljava/lang/String;\n+  #438 = Utf8               Signature\n+  #439 = Utf8               (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+  #440 = Utf8               ([BII)Ljava/lang/String;\n+  #441 = Utf8               parsePAX01SparseHeaders\n+  #442 = Utf8               Deprecated\n+  #443 = Utf8               RuntimeVisibleAnnotations\n+  #444 = Utf8               Ljava/lang/Deprecated;\n+  #445 = Utf8               parsePAX1XSparseHeaders\n+  #446 = Utf8               (Ljava/io/InputStream;I)Ljava/util/List;\n+  #447 = Class              #448          // \"[J\"\n+  #448 = Utf8               [J\n+  #449 = Utf8               (Ljava/io/InputStream;I)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+  #450 = Utf8               (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;)Ljava/util/Map;\n+  #451 = Utf8               (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+  #452 = Utf8               (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;J)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+  #453 = Utf8               readSparseStructs\n+  #454 = Utf8               ([BII)Ljava/util/List;\n+  #455 = Utf8               ([BII)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+  #456 = Utf8               verifyCheckSum\n+  #457 = Utf8               ([B)Z\n+  #458 = Utf8               <clinit>\n+  #459 = Utf8               SourceFile\n+  #460 = Utf8               TarUtils.java\n+  #461 = Utf8               InnerClasses\n {\n   private static final int BYTE_MASK = 255;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 255\n \n   static final org.apache.commons.compress.archivers.zip.ZipEncoding DEFAULT_ENCODING;\n@@ -522,104 +522,104 @@\n           offset_delta = 28\n \n   private static java.lang.String exceptionMessage(byte[], int, int, int, byte);\n     descriptor: ([BIIIB)Ljava/lang/String;\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=6, locals=6, args_size=5\n-         0: new           #2                  // class java/lang/String\n+         0: new           #3                  // class java/lang/String\n          3: dup\n          4: aload_0\n          5: iload_1\n          6: iload_2\n-         7: invokestatic  #3                  // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n-        10: invokespecial #4                  // Method java/lang/String.\"<init>\":([BIILjava/nio/charset/Charset;)V\n+         7: invokestatic  #5                  // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n+        10: invokespecial #11                 // Method java/lang/String.\"<init>\":([BIILjava/nio/charset/Charset;)V\n         13: astore        5\n         15: aload         5\n-        17: ldc           #5                  // String \\u0000\n-        19: ldc           #6                  // String {NUL}\n-        21: invokevirtual #7                  // Method java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n+        17: ldc           #15                 // String \\u0000\n+        19: ldc           #17                 // String {NUL}\n+        21: invokevirtual #19                 // Method java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n         24: astore        5\n-        26: new           #8                  // class java/lang/StringBuilder\n+        26: new           #23                 // class java/lang/StringBuilder\n         29: dup\n-        30: invokespecial #9                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        33: ldc           #10                 // String Invalid byte\n-        35: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        30: invokespecial #25                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        33: ldc           #28                 // String Invalid byte\n+        35: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         38: iload         4\n-        40: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        43: ldc           #13                 // String  at offset\n-        45: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        40: invokevirtual #34                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        43: ldc           #37                 // String  at offset\n+        45: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         48: iload_3\n         49: iload_1\n         50: isub\n-        51: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        54: ldc           #14                 // String  in \\'\n-        56: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        51: invokevirtual #34                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        54: ldc           #39                 // String  in \\'\n+        56: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         59: aload         5\n-        61: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        64: ldc           #15                 // String \\' len=\n-        66: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        61: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        64: ldc           #41                 // String \\' len=\n+        66: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         69: iload_2\n-        70: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        73: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        70: invokevirtual #34                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        73: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n         76: areturn\n       LineNumberTable:\n         line 115: 0\n         line 117: 15\n         line 118: 26\n \n   private static void formatBigIntegerBinary(long, byte[], int, int, boolean);\n     descriptor: (J[BIIZ)V\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=5, locals=12, args_size=5\n          0: lload_0\n-         1: invokestatic  #17                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+         1: invokestatic  #47                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n          4: astore        6\n          6: aload         6\n-         8: invokevirtual #18                 // Method java/math/BigInteger.toByteArray:()[B\n+         8: invokevirtual #53                 // Method java/math/BigInteger.toByteArray:()[B\n         11: astore        7\n         13: aload         7\n         15: arraylength\n         16: istore        8\n         18: iload         8\n         20: iload         4\n         22: iconst_1\n         23: isub\n         24: if_icmple     69\n-        27: new           #19                 // class java/lang/IllegalArgumentException\n+        27: new           #57                 // class java/lang/IllegalArgumentException\n         30: dup\n-        31: new           #8                  // class java/lang/StringBuilder\n+        31: new           #23                 // class java/lang/StringBuilder\n         34: dup\n-        35: invokespecial #9                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        38: ldc           #20                 // String Value\n-        40: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        35: invokespecial #25                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        38: ldc           #59                 // String Value\n+        40: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         43: lload_0\n-        44: invokevirtual #21                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-        47: ldc           #22                 // String  is too large for\n-        49: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        44: invokevirtual #61                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+        47: ldc           #64                 // String  is too large for\n+        49: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         52: iload         4\n-        54: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        57: ldc           #23                 // String  byte field.\n-        59: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        62: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        65: invokespecial #24                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        54: invokevirtual #34                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        57: ldc           #66                 // String  byte field.\n+        59: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        62: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        65: invokespecial #68                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         68: athrow\n         69: iload_3\n         70: iload         4\n         72: iadd\n         73: iload         8\n         75: isub\n         76: istore        9\n         78: aload         7\n         80: iconst_0\n         81: aload_2\n         82: iload         9\n         84: iload         8\n-        86: invokestatic  #25                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        86: invokestatic  #71                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         89: iload         5\n         91: ifeq          100\n         94: sipush        255\n         97: goto          101\n        100: iconst_0\n        101: i2b\n        102: istore        10\n@@ -674,15 +674,15 @@\n          2: iconst_2\n          3: isub\n          4: istore        5\n          6: lload_0\n          7: aload_2\n          8: iload_3\n          9: iload         5\n-        11: invokestatic  #26                 // Method formatUnsignedOctalString:(J[BII)V\n+        11: invokestatic  #77                 // Method formatUnsignedOctalString:(J[BII)V\n         14: aload_2\n         15: iload_3\n         16: iload         5\n         18: iinc          5, 1\n         21: iadd\n         22: iconst_0\n         23: bastore\n@@ -715,56 +715,56 @@\n          6: imul\n          7: istore        6\n          9: lconst_1\n         10: iload         6\n         12: lshl\n         13: lstore        7\n         15: lload_0\n-        16: invokestatic  #27                 // Method java/lang/Math.abs:(J)J\n+        16: invokestatic  #81                 // Method java/lang/Math.abs:(J)J\n         19: lstore        9\n         21: lload         9\n         23: lconst_0\n         24: lcmp\n         25: iflt          36\n         28: lload         9\n         30: lload         7\n         32: lcmp\n         33: iflt          78\n-        36: new           #19                 // class java/lang/IllegalArgumentException\n+        36: new           #57                 // class java/lang/IllegalArgumentException\n         39: dup\n-        40: new           #8                  // class java/lang/StringBuilder\n+        40: new           #23                 // class java/lang/StringBuilder\n         43: dup\n-        44: invokespecial #9                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        47: ldc           #20                 // String Value\n-        49: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        44: invokespecial #25                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        47: ldc           #59                 // String Value\n+        49: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         52: lload_0\n-        53: invokevirtual #21                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-        56: ldc           #22                 // String  is too large for\n-        58: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        53: invokevirtual #61                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+        56: ldc           #64                 // String  is too large for\n+        58: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         61: iload         4\n-        63: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        66: ldc           #23                 // String  byte field.\n-        68: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        71: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        74: invokespecial #24                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        63: invokevirtual #34                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        66: ldc           #66                 // String  byte field.\n+        68: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        71: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        74: invokespecial #68                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         77: athrow\n         78: iload         5\n         80: ifeq          109\n         83: lload         9\n         85: lload         7\n         87: lconst_1\n         88: lsub\n         89: lxor\n         90: lstore        9\n         92: lload         9\n         94: lconst_1\n         95: ladd\n         96: lstore        9\n         98: lload         9\n-       100: ldc2_w        #28                 // long 255l\n+       100: ldc2_w        #87                 // long 255l\n        103: iload         6\n        105: lshl\n        106: lor\n        107: lstore        9\n        109: iload_3\n        110: iload         4\n        112: iadd\n@@ -823,15 +823,15 @@\n          2: iconst_1\n          3: isub\n          4: istore        5\n          6: lload_0\n          7: aload_2\n          8: iload_3\n          9: iload         5\n-        11: invokestatic  #26                 // Method formatUnsignedOctalString:(J[BII)V\n+        11: invokestatic  #77                 // Method formatUnsignedOctalString:(J[BII)V\n         14: aload_2\n         15: iload_3\n         16: iload         5\n         18: iadd\n         19: bipush        32\n         21: bastore\n         22: iload_3\n@@ -848,17 +848,17 @@\n     descriptor: (J[BII)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=6, locals=8, args_size=4\n          0: iload         4\n          2: bipush        8\n          4: if_icmpne     13\n-         7: ldc2_w        #31                 // long 2097151l\n+         7: ldc2_w        #91                 // long 2097151l\n         10: goto          16\n-        13: ldc2_w        #33                 // long 8589934591l\n+        13: ldc2_w        #93                 // long 8589934591l\n         16: lstore        5\n         18: lload_0\n         19: lconst_0\n         20: lcmp\n         21: ifge          28\n         24: iconst_1\n         25: goto          29\n@@ -870,32 +870,32 @@\n         37: lload         5\n         39: lcmp\n         40: ifgt          52\n         43: lload_0\n         44: aload_2\n         45: iload_3\n         46: iload         4\n-        48: invokestatic  #35                 // Method formatLongOctalBytes:(J[BII)I\n+        48: invokestatic  #95                 // Method formatLongOctalBytes:(J[BII)I\n         51: ireturn\n         52: iload         4\n         54: bipush        9\n         56: if_icmpge     72\n         59: lload_0\n         60: aload_2\n         61: iload_3\n         62: iload         4\n         64: iload         7\n-        66: invokestatic  #36                 // Method formatLongBinary:(J[BIIZ)V\n+        66: invokestatic  #99                 // Method formatLongBinary:(J[BIIZ)V\n         69: goto          82\n         72: lload_0\n         73: aload_2\n         74: iload_3\n         75: iload         4\n         77: iload         7\n-        79: invokestatic  #37                 // Method formatBigIntegerBinary:(J[BIIZ)V\n+        79: invokestatic  #103                // Method formatBigIntegerBinary:(J[BIIZ)V\n         82: aload_2\n         83: iload_3\n         84: iload         7\n         86: ifeq          95\n         89: sipush        255\n         92: goto          98\n         95: sipush        128\n@@ -943,30 +943,30 @@\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=5, locals=6, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iload_3\n-         4: getstatic     #38                 // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-         7: invokestatic  #39                 // Method formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+         4: getstatic     #106                // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+         7: invokestatic  #110                // Method formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n         10: ireturn\n         11: astore        4\n         13: aload_0\n         14: aload_1\n         15: iload_2\n         16: iload_3\n-        17: getstatic     #41                 // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-        20: invokestatic  #39                 // Method formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+        17: getstatic     #116                // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        20: invokestatic  #110                // Method formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n         23: ireturn\n         24: astore        5\n-        26: new           #42                 // class java/io/UncheckedIOException\n+        26: new           #119                // class java/io/UncheckedIOException\n         29: dup\n         30: aload         5\n-        32: invokespecial #43                 // Method java/io/UncheckedIOException.\"<init>\":(Ljava/io/IOException;)V\n+        32: invokespecial #121                // Method java/io/UncheckedIOException.\"<init>\":(Ljava/io/IOException;)V\n         35: athrow\n       Exception table:\n          from    to  target type\n              0    10    11   Class java/io/IOException\n             13    23    24   Class java/io/IOException\n       LineNumberTable:\n         line 265: 0\n@@ -984,49 +984,49 @@\n \n   public static int formatNameBytes(java.lang.String, byte[], int, int, org.apache.commons.compress.archivers.zip.ZipEncoding) throws java.io.IOException;\n     descriptor: (Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=5, locals=9, args_size=5\n          0: aload_0\n-         1: invokevirtual #44                 // Method java/lang/String.length:()I\n+         1: invokevirtual #124                // Method java/lang/String.length:()I\n          4: istore        5\n          6: aload         4\n          8: aload_0\n-         9: invokeinterface #45,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+         9: invokeinterface #128,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n         14: astore        6\n         16: aload         6\n-        18: invokevirtual #46                 // Method java/nio/ByteBuffer.limit:()I\n+        18: invokevirtual #134                // Method java/nio/ByteBuffer.limit:()I\n         21: iload_3\n         22: if_icmple     52\n         25: iload         5\n         27: ifle          52\n         30: aload         4\n         32: aload_0\n         33: iconst_0\n         34: iinc          5, -1\n         37: iload         5\n-        39: invokevirtual #47                 // Method java/lang/String.substring:(II)Ljava/lang/String;\n-        42: invokeinterface #45,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+        39: invokevirtual #139                // Method java/lang/String.substring:(II)Ljava/lang/String;\n+        42: invokeinterface #128,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n         47: astore        6\n         49: goto          16\n         52: aload         6\n-        54: invokevirtual #46                 // Method java/nio/ByteBuffer.limit:()I\n+        54: invokevirtual #134                // Method java/nio/ByteBuffer.limit:()I\n         57: aload         6\n-        59: invokevirtual #48                 // Method java/nio/ByteBuffer.position:()I\n+        59: invokevirtual #143                // Method java/nio/ByteBuffer.position:()I\n         62: isub\n         63: istore        7\n         65: aload         6\n-        67: invokevirtual #49                 // Method java/nio/ByteBuffer.array:()[B\n+        67: invokevirtual #146                // Method java/nio/ByteBuffer.array:()[B\n         70: aload         6\n-        72: invokevirtual #50                 // Method java/nio/ByteBuffer.arrayOffset:()I\n+        72: invokevirtual #149                // Method java/nio/ByteBuffer.arrayOffset:()I\n         75: aload_1\n         76: iload_2\n         77: iload         7\n-        79: invokestatic  #25                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        79: invokestatic  #71                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         82: iload         7\n         84: istore        8\n         86: iload         8\n         88: iload_3\n         89: if_icmpge     105\n         92: aload_1\n         93: iload_2\n@@ -1073,15 +1073,15 @@\n          2: iconst_2\n          3: isub\n          4: istore        5\n          6: lload_0\n          7: aload_2\n          8: iload_3\n          9: iload         5\n-        11: invokestatic  #26                 // Method formatUnsignedOctalString:(J[BII)V\n+        11: invokestatic  #77                 // Method formatUnsignedOctalString:(J[BII)V\n         14: aload_2\n         15: iload_3\n         16: iload         5\n         18: iinc          5, 1\n         21: iadd\n         22: bipush        32\n         24: bastore\n@@ -1132,15 +1132,15 @@\n         39: ifeq          72\n         42: aload_2\n         43: iload_3\n         44: iload         5\n         46: iadd\n         47: bipush        48\n         49: lload         6\n-        51: ldc2_w        #51                 // long 7l\n+        51: ldc2_w        #152                // long 7l\n         54: land\n         55: l2i\n         56: i2b\n         57: iadd\n         58: i2b\n         59: bastore\n         60: lload         6\n@@ -1149,32 +1149,32 @@\n         64: lstore        6\n         66: iinc          5, -1\n         69: goto          30\n         72: lload         6\n         74: lconst_0\n         75: lcmp\n         76: ifeq          123\n-        79: new           #19                 // class java/lang/IllegalArgumentException\n+        79: new           #57                 // class java/lang/IllegalArgumentException\n         82: dup\n-        83: new           #8                  // class java/lang/StringBuilder\n+        83: new           #23                 // class java/lang/StringBuilder\n         86: dup\n-        87: invokespecial #9                  // Method java/lang/StringBuilder.\"<init>\":()V\n+        87: invokespecial #25                 // Method java/lang/StringBuilder.\"<init>\":()V\n         90: lload_0\n-        91: invokevirtual #21                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-        94: ldc           #53                 // String =\n-        96: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        91: invokevirtual #61                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+        94: ldc           #154                // String =\n+        96: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         99: lload_0\n-       100: invokestatic  #54                 // Method java/lang/Long.toOctalString:(J)Ljava/lang/String;\n-       103: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       106: ldc           #55                 // String  will not fit in octal number buffer of length\n-       108: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       100: invokestatic  #156                // Method java/lang/Long.toOctalString:(J)Ljava/lang/String;\n+       103: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       106: ldc           #162                // String  will not fit in octal number buffer of length\n+       108: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        111: iload         4\n-       113: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       116: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       119: invokespecial #24                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+       113: invokevirtual #34                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       116: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       119: invokespecial #68                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n        122: athrow\n        123: iload         5\n        125: iflt          142\n        128: aload_2\n        129: iload_3\n        130: iload         5\n        132: iadd\n@@ -1227,58 +1227,58 @@\n          9: iconst_1\n         10: iadd\n         11: aload         4\n         13: iconst_0\n         14: iload_2\n         15: iconst_1\n         16: isub\n-        17: invokestatic  #25                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-        20: new           #56                 // class java/math/BigInteger\n+        17: invokestatic  #71                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        20: new           #48                 // class java/math/BigInteger\n         23: dup\n         24: aload         4\n-        26: invokespecial #57                 // Method java/math/BigInteger.\"<init>\":([B)V\n+        26: invokespecial #164                // Method java/math/BigInteger.\"<init>\":([B)V\n         29: astore        5\n         31: iload_3\n         32: ifeq          51\n         35: aload         5\n-        37: ldc2_w        #58                 // long -1l\n-        40: invokestatic  #17                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-        43: invokevirtual #60                 // Method java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-        46: invokevirtual #61                 // Method java/math/BigInteger.not:()Ljava/math/BigInteger;\n+        37: ldc2_w        #167                // long -1l\n+        40: invokestatic  #47                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+        43: invokevirtual #169                // Method java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+        46: invokevirtual #173                // Method java/math/BigInteger.not:()Ljava/math/BigInteger;\n         49: astore        5\n         51: aload         5\n-        53: invokevirtual #62                 // Method java/math/BigInteger.bitLength:()I\n+        53: invokevirtual #177                // Method java/math/BigInteger.bitLength:()I\n         56: bipush        63\n         58: if_icmple     102\n-        61: new           #19                 // class java/lang/IllegalArgumentException\n+        61: new           #57                 // class java/lang/IllegalArgumentException\n         64: dup\n-        65: new           #8                  // class java/lang/StringBuilder\n+        65: new           #23                 // class java/lang/StringBuilder\n         68: dup\n-        69: invokespecial #9                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        72: ldc           #63                 // String At offset\n-        74: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        69: invokespecial #25                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        72: ldc           #180                // String At offset\n+        74: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         77: iload_1\n-        78: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        81: ldc           #64                 // String ,\n-        83: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        78: invokevirtual #34                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        81: ldc           #182                // String ,\n+        83: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         86: iload_2\n-        87: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        90: ldc           #65                 // String  byte binary number exceeds maximum signed long value\n-        92: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        95: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        98: invokespecial #24                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        87: invokevirtual #34                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        90: ldc           #184                // String  byte binary number exceeds maximum signed long value\n+        92: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        95: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        98: invokespecial #68                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n        101: athrow\n        102: iload_3\n        103: ifeq          115\n        106: aload         5\n-       108: invokevirtual #66                 // Method java/math/BigInteger.longValue:()J\n+       108: invokevirtual #186                // Method java/math/BigInteger.longValue:()J\n        111: lneg\n        112: goto          120\n        115: aload         5\n-       117: invokevirtual #66                 // Method java/math/BigInteger.longValue:()J\n+       117: invokevirtual #186                // Method java/math/BigInteger.longValue:()J\n        120: lreturn\n       LineNumberTable:\n         line 378: 0\n         line 379: 7\n         line 380: 20\n         line 381: 31\n         line 383: 35\n@@ -1298,31 +1298,31 @@\n     descriptor: ([BIIZ)J\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=8, locals=7, args_size=4\n          0: iload_2\n          1: bipush        9\n          3: if_icmplt     47\n-         6: new           #19                 // class java/lang/IllegalArgumentException\n+         6: new           #57                 // class java/lang/IllegalArgumentException\n          9: dup\n-        10: new           #8                  // class java/lang/StringBuilder\n+        10: new           #23                 // class java/lang/StringBuilder\n         13: dup\n-        14: invokespecial #9                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        17: ldc           #63                 // String At offset\n-        19: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        14: invokespecial #25                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        17: ldc           #180                // String At offset\n+        19: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         22: iload_1\n-        23: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        26: ldc           #64                 // String ,\n-        28: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        23: invokevirtual #34                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        26: ldc           #182                // String ,\n+        28: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         31: iload_2\n-        32: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        35: ldc           #65                 // String  byte binary number exceeds maximum signed long value\n-        37: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        40: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        43: invokespecial #24                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        32: invokevirtual #34                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        35: ldc           #184                // String  byte binary number exceeds maximum signed long value\n+        37: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        40: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        43: invokespecial #68                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         46: athrow\n         47: lconst_0\n         48: lstore        4\n         50: iconst_1\n         51: istore        6\n         53: iload         6\n         55: iload_2\n@@ -1345,22 +1345,22 @@\n         84: iload_3\n         85: ifeq          116\n         88: lload         4\n         90: lconst_1\n         91: lsub\n         92: lstore        4\n         94: lload         4\n-        96: ldc2_w        #67                 // double 2.0d\n+        96: ldc2_w        #190                // double 2.0d\n         99: iload_2\n        100: iconst_1\n        101: isub\n        102: i2d\n-       103: ldc2_w        #69                 // double 8.0d\n+       103: ldc2_w        #192                // double 8.0d\n        106: dmul\n-       107: invokestatic  #71                 // Method java/lang/Math.pow:(DD)D\n+       107: invokestatic  #194                // Method java/lang/Math.pow:(DD)D\n        110: d2l\n        111: lconst_1\n        112: lsub\n        113: lxor\n        114: lstore        4\n        116: iload_3\n        117: ifeq          126\n@@ -1414,95 +1414,95 @@\n           stack = [ int ]\n \n   protected static java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> parseFromPAX01SparseHeaders(java.lang.String) throws java.io.IOException;\n     descriptor: (Ljava/lang/String;)Ljava/util/List;\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=7, locals=9, args_size=1\n-         0: new           #72                 // class java/util/ArrayList\n+         0: new           #198                // class java/util/ArrayList\n          3: dup\n-         4: invokespecial #73                 // Method java/util/ArrayList.\"<init>\":()V\n+         4: invokespecial #200                // Method java/util/ArrayList.\"<init>\":()V\n          7: astore_1\n          8: aload_0\n-         9: ldc           #74                 // String ,\n-        11: invokevirtual #75                 // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n+         9: ldc           #201                // String ,\n+        11: invokevirtual #203                // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n         14: astore_2\n         15: aload_2\n         16: arraylength\n         17: iconst_2\n         18: irem\n         19: iconst_1\n         20: if_icmpne     33\n-        23: new           #40                 // class java/io/IOException\n+        23: new           #114                // class java/io/IOException\n         26: dup\n-        27: ldc           #76                 // String Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n-        29: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        27: ldc           #207                // String Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n+        29: invokespecial #209                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         32: athrow\n         33: iconst_0\n         34: istore_3\n         35: iload_3\n         36: aload_2\n         37: arraylength\n         38: if_icmpge     147\n         41: aload_2\n         42: iload_3\n         43: aaload\n-        44: invokestatic  #78                 // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n+        44: invokestatic  #210                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n         47: lstore        4\n         49: goto          64\n         52: astore        6\n-        54: new           #40                 // class java/io/IOException\n+        54: new           #114                // class java/io/IOException\n         57: dup\n-        58: ldc           #80                 // String Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n-        60: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        58: ldc           #216                // String Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n+        60: invokespecial #209                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         63: athrow\n         64: lload         4\n         66: lconst_0\n         67: lcmp\n         68: ifge          81\n-        71: new           #40                 // class java/io/IOException\n+        71: new           #114                // class java/io/IOException\n         74: dup\n-        75: ldc           #81                 // String Corrupted TAR archive. Sparse struct offset contains negative value\n-        77: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        75: ldc           #218                // String Corrupted TAR archive. Sparse struct offset contains negative value\n+        77: invokespecial #209                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         80: athrow\n         81: aload_2\n         82: iload_3\n         83: iconst_1\n         84: iadd\n         85: aaload\n-        86: invokestatic  #78                 // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n+        86: invokestatic  #210                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n         89: lstore        6\n         91: goto          106\n         94: astore        8\n-        96: new           #40                 // class java/io/IOException\n+        96: new           #114                // class java/io/IOException\n         99: dup\n-       100: ldc           #82                 // String Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n-       102: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       100: ldc           #220                // String Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n+       102: invokespecial #209                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        105: athrow\n        106: lload         6\n        108: lconst_0\n        109: lcmp\n        110: ifge          123\n-       113: new           #40                 // class java/io/IOException\n+       113: new           #114                // class java/io/IOException\n        116: dup\n-       117: ldc           #83                 // String Corrupted TAR archive. Sparse struct numbytes contains negative value\n-       119: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       117: ldc           #222                // String Corrupted TAR archive. Sparse struct numbytes contains negative value\n+       119: invokespecial #209                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        122: athrow\n        123: aload_1\n-       124: new           #84                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+       124: new           #224                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n        127: dup\n        128: lload         4\n        130: lload         6\n-       132: invokespecial #85                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-       135: invokeinterface #86,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       132: invokespecial #226                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+       135: invokeinterface #229,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n        140: pop\n        141: iinc          3, 2\n        144: goto          35\n        147: aload_1\n-       148: invokestatic  #87                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+       148: invokestatic  #234                // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n        151: areturn\n       Exception table:\n          from    to  target type\n             41    49    52   Class java/lang/NumberFormatException\n             81    91    94   Class java/lang/NumberFormatException\n       LineNumberTable:\n         line 441: 0\n@@ -1544,39 +1544,39 @@\n           offset_delta = 11\n           locals = [ long ]\n         frame_type = 16 /* same */\n         frame_type = 248 /* chop */\n           offset_delta = 23\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #194                         // (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #439                         // (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n \n   public static java.lang.String parseName(byte[], int, int);\n     descriptor: ([BII)Ljava/lang/String;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=5, args_size=3\n          0: aload_0\n          1: iload_1\n          2: iload_2\n-         3: getstatic     #38                 // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-         6: invokestatic  #88                 // Method parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+         3: getstatic     #106                // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+         6: invokestatic  #240                // Method parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n          9: areturn\n         10: astore_3\n         11: aload_0\n         12: iload_1\n         13: iload_2\n-        14: getstatic     #41                 // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-        17: invokestatic  #88                 // Method parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+        14: getstatic     #116                // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        17: invokestatic  #240                // Method parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n         20: areturn\n         21: astore        4\n-        23: new           #42                 // class java/io/UncheckedIOException\n+        23: new           #119                // class java/io/UncheckedIOException\n         26: dup\n         27: aload         4\n-        29: invokespecial #43                 // Method java/io/UncheckedIOException.\"<init>\":(Ljava/io/IOException;)V\n+        29: invokespecial #121                // Method java/io/UncheckedIOException.\"<init>\":(Ljava/io/IOException;)V\n         32: athrow\n       Exception table:\n          from    to  target type\n              0     9    10   Class java/io/IOException\n             11    20    21   Class java/io/IOException\n       LineNumberTable:\n         line 488: 0\n@@ -1617,20 +1617,20 @@\n         35: newarray       byte\n         37: astore        5\n         39: aload_0\n         40: iload_1\n         41: aload         5\n         43: iconst_0\n         44: iload         4\n-        46: invokestatic  #25                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        46: invokestatic  #71                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         49: aload_3\n         50: aload         5\n-        52: invokeinterface #89,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+        52: invokeinterface #244,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n         57: areturn\n-        58: ldc           #90                 // String\n+        58: ldc           #248                // String\n         60: areturn\n       LineNumberTable:\n         line 517: 0\n         line 518: 3\n         line 519: 19\n         line 518: 22\n         line 521: 28\n@@ -1660,27 +1660,27 @@\n          4: iadd\n          5: istore        5\n          7: iload_1\n          8: istore        6\n         10: iload_2\n         11: iconst_2\n         12: if_icmpge     47\n-        15: new           #19                 // class java/lang/IllegalArgumentException\n+        15: new           #57                 // class java/lang/IllegalArgumentException\n         18: dup\n-        19: new           #8                  // class java/lang/StringBuilder\n+        19: new           #23                 // class java/lang/StringBuilder\n         22: dup\n-        23: invokespecial #9                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        26: ldc           #91                 // String Length\n-        28: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        23: invokespecial #25                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        26: ldc           #250                // String Length\n+        28: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         31: iload_2\n-        32: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        35: ldc           #92                 // String  must be at least 2\n-        37: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        40: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        43: invokespecial #24                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        32: invokevirtual #34                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        35: ldc           #252                // String  must be at least 2\n+        37: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        40: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        43: invokespecial #68                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         46: athrow\n         47: aload_0\n         48: iload         6\n         50: baload\n         51: ifne          56\n         54: lconst_0\n         55: lreturn\n@@ -1726,23 +1726,23 @@\n        133: istore        8\n        135: iload         8\n        137: bipush        48\n        139: if_icmplt     149\n        142: iload         8\n        144: bipush        55\n        146: if_icmple     167\n-       149: new           #19                 // class java/lang/IllegalArgumentException\n+       149: new           #57                 // class java/lang/IllegalArgumentException\n        152: dup\n        153: aload_0\n        154: iload_1\n        155: iload_2\n        156: iload         6\n        158: iload         8\n-       160: invokestatic  #93                 // Method exceptionMessage:([BIIIB)Ljava/lang/String;\n-       163: invokespecial #24                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+       160: invokestatic  #254                // Method exceptionMessage:([BIIIB)Ljava/lang/String;\n+       163: invokespecial #68                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n        166: athrow\n        167: lload_3\n        168: iconst_3\n        169: lshl\n        170: iload         8\n        172: bipush        48\n        174: isub\n@@ -1805,15 +1805,15 @@\n          2: baload\n          3: sipush        128\n          6: iand\n          7: ifne          17\n         10: aload_0\n         11: iload_1\n         12: iload_2\n-        13: invokestatic  #94                 // Method parseOctal:([BII)J\n+        13: invokestatic  #258                // Method parseOctal:([BII)J\n         16: lreturn\n         17: aload_0\n         18: iload_1\n         19: baload\n         20: iconst_m1\n         21: if_icmpne     28\n         24: iconst_1\n@@ -1823,21 +1823,21 @@\n         30: iload_2\n         31: bipush        9\n         33: if_icmpge     44\n         36: aload_0\n         37: iload_1\n         38: iload_2\n         39: iload_3\n-        40: invokestatic  #95                 // Method parseBinaryLong:([BIIZ)J\n+        40: invokestatic  #262                // Method parseBinaryLong:([BIIZ)J\n         43: lreturn\n         44: aload_0\n         45: iload_1\n         46: iload_2\n         47: iload_3\n-        48: invokestatic  #96                 // Method parseBinaryBigInteger:([BIIZ)J\n+        48: invokestatic  #266                // Method parseBinaryBigInteger:([BIIZ)J\n         51: lreturn\n       LineNumberTable:\n         line 614: 0\n         line 615: 10\n         line 617: 17\n         line 618: 30\n         line 619: 36\n@@ -1853,496 +1853,496 @@\n \n   protected static java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> parsePAX01SparseHeaders(java.lang.String);\n     descriptor: (Ljava/lang/String;)Ljava/util/List;\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=4, locals=2, args_size=1\n          0: aload_0\n-         1: invokestatic  #97                 // Method parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n+         1: invokestatic  #269                // Method parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n          4: areturn\n          5: astore_1\n-         6: new           #42                 // class java/io/UncheckedIOException\n+         6: new           #119                // class java/io/UncheckedIOException\n          9: dup\n         10: aload_1\n-        11: invokevirtual #98                 // Method java/io/IOException.getMessage:()Ljava/lang/String;\n+        11: invokevirtual #273                // Method java/io/IOException.getMessage:()Ljava/lang/String;\n         14: aload_1\n-        15: invokespecial #99                 // Method java/io/UncheckedIOException.\"<init>\":(Ljava/lang/String;Ljava/io/IOException;)V\n+        15: invokespecial #276                // Method java/io/UncheckedIOException.\"<init>\":(Ljava/lang/String;Ljava/io/IOException;)V\n         18: athrow\n       Exception table:\n          from    to  target type\n              0     4     5   Class java/io/IOException\n       LineNumberTable:\n         line 639: 0\n         line 640: 5\n         line 641: 6\n       StackMapTable: number_of_entries = 1\n         frame_type = 69 /* same_locals_1_stack_item */\n           stack = [ class java/io/IOException ]\n     Deprecated: true\n-    Signature: #194                         // (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #439                         // (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n     RuntimeVisibleAnnotations:\n-      0: #204()\n+      0: #444()\n         java.lang.Deprecated\n \n   protected static java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> parsePAX1XSparseHeaders(java.io.InputStream, int) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;I)Ljava/util/List;\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=7, locals=12, args_size=2\n-         0: new           #72                 // class java/util/ArrayList\n+         0: new           #198                // class java/util/ArrayList\n          3: dup\n-         4: invokespecial #73                 // Method java/util/ArrayList.\"<init>\":()V\n+         4: invokespecial #200                // Method java/util/ArrayList.\"<init>\":()V\n          7: astore_2\n          8: lconst_0\n          9: lstore_3\n         10: aload_0\n-        11: invokestatic  #100                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+        11: invokestatic  #279                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n         14: astore        5\n         16: aload         5\n         18: iconst_0\n         19: laload\n         20: lstore        6\n         22: lload         6\n         24: lconst_0\n         25: lcmp\n-        26: ifge          39\n-        29: new           #40                 // class java/io/IOException\n+        26: ifge          40\n+        29: new           #114                // class java/io/IOException\n         32: dup\n-        33: ldc           #101                // String Corrupted TAR archive. Negative value in sparse headers block\n-        35: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        38: athrow\n-        39: lload_3\n-        40: aload         5\n-        42: iconst_1\n-        43: laload\n-        44: ladd\n-        45: lstore_3\n-        46: lload         6\n-        48: dup2\n-        49: lconst_1\n-        50: lsub\n-        51: lstore        6\n-        53: lconst_0\n-        54: lcmp\n-        55: ifle          151\n-        58: aload_0\n-        59: invokestatic  #100                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n-        62: astore        5\n-        64: aload         5\n-        66: iconst_0\n-        67: laload\n-        68: lstore        8\n-        70: lload         8\n-        72: lconst_0\n-        73: lcmp\n-        74: ifge          87\n-        77: new           #40                 // class java/io/IOException\n-        80: dup\n-        81: ldc           #102                // String Corrupted TAR archive. Sparse header block offset contains negative value\n-        83: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        86: athrow\n-        87: lload_3\n-        88: aload         5\n-        90: iconst_1\n-        91: laload\n-        92: ladd\n-        93: lstore_3\n-        94: aload_0\n-        95: invokestatic  #100                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n-        98: astore        5\n-       100: aload         5\n-       102: iconst_0\n-       103: laload\n-       104: lstore        10\n-       106: lload         10\n-       108: lconst_0\n-       109: lcmp\n-       110: ifge          123\n-       113: new           #40                 // class java/io/IOException\n-       116: dup\n-       117: ldc           #103                // String Corrupted TAR archive. Sparse header block numbytes contains negative value\n-       119: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       122: athrow\n-       123: lload_3\n-       124: aload         5\n-       126: iconst_1\n-       127: laload\n-       128: ladd\n-       129: lstore_3\n-       130: aload_2\n-       131: new           #84                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-       134: dup\n-       135: lload         8\n-       137: lload         10\n-       139: invokespecial #85                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-       142: invokeinterface #86,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-       147: pop\n-       148: goto          46\n-       151: iload_1\n-       152: i2l\n-       153: lload_3\n+        33: ldc_w         #283                // String Corrupted TAR archive. Negative value in sparse headers block\n+        36: invokespecial #209                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        39: athrow\n+        40: lload_3\n+        41: aload         5\n+        43: iconst_1\n+        44: laload\n+        45: ladd\n+        46: lstore_3\n+        47: lload         6\n+        49: dup2\n+        50: lconst_1\n+        51: lsub\n+        52: lstore        6\n+        54: lconst_0\n+        55: lcmp\n+        56: ifle          154\n+        59: aload_0\n+        60: invokestatic  #279                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+        63: astore        5\n+        65: aload         5\n+        67: iconst_0\n+        68: laload\n+        69: lstore        8\n+        71: lload         8\n+        73: lconst_0\n+        74: lcmp\n+        75: ifge          89\n+        78: new           #114                // class java/io/IOException\n+        81: dup\n+        82: ldc_w         #285                // String Corrupted TAR archive. Sparse header block offset contains negative value\n+        85: invokespecial #209                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        88: athrow\n+        89: lload_3\n+        90: aload         5\n+        92: iconst_1\n+        93: laload\n+        94: ladd\n+        95: lstore_3\n+        96: aload_0\n+        97: invokestatic  #279                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+       100: astore        5\n+       102: aload         5\n+       104: iconst_0\n+       105: laload\n+       106: lstore        10\n+       108: lload         10\n+       110: lconst_0\n+       111: lcmp\n+       112: ifge          126\n+       115: new           #114                // class java/io/IOException\n+       118: dup\n+       119: ldc_w         #287                // String Corrupted TAR archive. Sparse header block numbytes contains negative value\n+       122: invokespecial #209                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       125: athrow\n+       126: lload_3\n+       127: aload         5\n+       129: iconst_1\n+       130: laload\n+       131: ladd\n+       132: lstore_3\n+       133: aload_2\n+       134: new           #224                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+       137: dup\n+       138: lload         8\n+       140: lload         10\n+       142: invokespecial #226                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+       145: invokeinterface #229,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       150: pop\n+       151: goto          47\n        154: iload_1\n        155: i2l\n-       156: lrem\n-       157: lsub\n-       158: lstore        8\n-       160: aload_0\n-       161: lload         8\n-       163: invokestatic  #104                // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n-       166: pop2\n-       167: aload_2\n-       168: areturn\n+       156: lload_3\n+       157: iload_1\n+       158: i2l\n+       159: lrem\n+       160: lsub\n+       161: lstore        8\n+       163: aload_0\n+       164: lload         8\n+       166: invokestatic  #289                // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+       169: pop2\n+       170: aload_2\n+       171: areturn\n       LineNumberTable:\n         line 658: 0\n         line 659: 8\n         line 661: 10\n         line 662: 16\n         line 663: 22\n         line 665: 29\n-        line 667: 39\n-        line 668: 46\n-        line 669: 58\n-        line 670: 64\n-        line 671: 70\n-        line 672: 77\n-        line 675: 87\n-        line 677: 94\n-        line 678: 100\n-        line 679: 106\n-        line 680: 113\n-        line 683: 123\n-        line 684: 130\n-        line 685: 148\n-        line 688: 151\n-        line 689: 160\n-        line 690: 167\n+        line 667: 40\n+        line 668: 47\n+        line 669: 59\n+        line 670: 65\n+        line 671: 71\n+        line 672: 78\n+        line 675: 89\n+        line 677: 96\n+        line 678: 102\n+        line 679: 108\n+        line 680: 115\n+        line 683: 126\n+        line 684: 133\n+        line 685: 151\n+        line 688: 154\n+        line 689: 163\n+        line 690: 170\n       StackMapTable: number_of_entries = 5\n         frame_type = 255 /* full_frame */\n-          offset_delta = 39\n+          offset_delta = 40\n           locals = [ class java/io/InputStream, int, class java/util/List, long, class \"[J\", long ]\n           stack = []\n         frame_type = 6 /* same */\n         frame_type = 252 /* append */\n-          offset_delta = 40\n+          offset_delta = 41\n           locals = [ long ]\n         frame_type = 252 /* append */\n-          offset_delta = 35\n+          offset_delta = 36\n           locals = [ long ]\n         frame_type = 249 /* chop */\n           offset_delta = 27\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #209                         // (Ljava/io/InputStream;I)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #449                         // (Ljava/io/InputStream;I)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n \n   protected static java.util.Map<java.lang.String, java.lang.String> parsePaxHeaders(java.io.InputStream, java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse>, java.util.Map<java.lang.String, java.lang.String>) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;)Ljava/util/Map;\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=5, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: aload_2\n-         3: ldc2_w        #58                 // long -1l\n-         6: invokestatic  #105                // Method parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+         3: ldc2_w        #167                // long -1l\n+         6: invokestatic  #295                // Method parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n          9: areturn\n       LineNumberTable:\n         line 720: 0\n     Exceptions:\n       throws java.io.IOException\n     Deprecated: true\n-    Signature: #212                         // (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+    Signature: #451                         // (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n     RuntimeVisibleAnnotations:\n-      0: #204()\n+      0: #444()\n         java.lang.Deprecated\n \n   protected static java.util.Map<java.lang.String, java.lang.String> parsePaxHeaders(java.io.InputStream, java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse>, java.util.Map<java.lang.String, java.lang.String>, long) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=7, locals=20, args_size=4\n-         0: new           #106                // class java/util/HashMap\n+         0: new           #299                // class java/util/HashMap\n          3: dup\n          4: aload_2\n-         5: invokespecial #107                // Method java/util/HashMap.\"<init>\":(Ljava/util/Map;)V\n+         5: invokespecial #301                // Method java/util/HashMap.\"<init>\":(Ljava/util/Map;)V\n          8: astore        5\n         10: aconst_null\n         11: astore        6\n         13: iconst_0\n         14: istore        7\n         16: iconst_0\n         17: istore        9\n         19: iconst_0\n         20: istore        10\n         22: aload_0\n-        23: invokevirtual #108                // Method java/io/InputStream.read:()I\n+        23: invokevirtual #304                // Method java/io/InputStream.read:()I\n         26: dup\n         27: istore        8\n         29: iconst_m1\n-        30: if_icmpeq     538\n+        30: if_icmpeq     552\n         33: iinc          10, 1\n         36: iinc          7, 1\n         39: iload         8\n         41: bipush        10\n         43: if_icmpne     49\n-        46: goto          538\n+        46: goto          552\n         49: iload         8\n         51: bipush        32\n-        53: if_icmpne     494\n-        56: new           #109                // class java/io/ByteArrayOutputStream\n+        53: if_icmpne     507\n+        56: new           #309                // class java/io/ByteArrayOutputStream\n         59: dup\n-        60: invokespecial #110                // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n+        60: invokespecial #311                // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n         63: astore        11\n         65: aload_0\n-        66: invokevirtual #108                // Method java/io/InputStream.read:()I\n+        66: invokevirtual #304                // Method java/io/InputStream.read:()I\n         69: dup\n         70: istore        8\n         72: iconst_m1\n-        73: if_icmpeq     538\n+        73: if_icmpeq     552\n         76: iinc          10, 1\n         79: iinc          7, 1\n         82: iload         7\n-        84: iflt          538\n+        84: iflt          552\n         87: lload_3\n         88: lconst_0\n         89: lcmp\n         90: iflt          104\n         93: iload         7\n         95: i2l\n         96: lload_3\n         97: lcmp\n         98: iflt          104\n-       101: goto          538\n+       101: goto          552\n        104: iload         8\n        106: bipush        61\n-       108: if_icmpne     483\n+       108: if_icmpne     496\n        111: aload         11\n-       113: ldc           #112                // String UTF-8\n-       115: invokevirtual #113                // Method java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;\n-       118: astore        12\n-       120: iload         9\n-       122: iload         10\n-       124: isub\n-       125: istore        13\n-       127: iload         13\n-       129: iconst_1\n-       130: if_icmpgt     146\n-       133: aload         5\n-       135: aload         12\n-       137: invokeinterface #114,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n-       142: pop\n-       143: goto          538\n-       146: lload_3\n-       147: lconst_0\n-       148: lcmp\n-       149: iflt          197\n-       152: iload         13\n-       154: i2l\n-       155: lload_3\n-       156: iload         7\n-       158: i2l\n-       159: lsub\n-       160: lcmp\n-       161: ifle          197\n-       164: new           #40                 // class java/io/IOException\n-       167: dup\n-       168: new           #8                  // class java/lang/StringBuilder\n-       171: dup\n-       172: invokespecial #9                  // Method java/lang/StringBuilder.\"<init>\":()V\n-       175: ldc           #115                // String Paxheader value size\n-       177: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       180: iload         13\n-       182: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       185: ldc           #116                // String  exceeds size of header record\n-       187: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       190: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       193: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       196: athrow\n-       197: aload_0\n-       198: iload         13\n-       200: invokestatic  #117                // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n-       203: astore        14\n-       205: aload         14\n-       207: arraylength\n-       208: istore        15\n-       210: iload         15\n-       212: iload         13\n-       214: if_icmpeq     255\n-       217: new           #40                 // class java/io/IOException\n-       220: dup\n-       221: new           #8                  // class java/lang/StringBuilder\n-       224: dup\n-       225: invokespecial #9                  // Method java/lang/StringBuilder.\"<init>\":()V\n-       228: ldc           #118                // String Failed to read Paxheader. Expected\n-       230: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       233: iload         13\n-       235: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       238: ldc           #119                // String  bytes, read\n-       240: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       243: iload         15\n-       245: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       248: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       251: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       254: athrow\n-       255: iload         7\n-       257: iload         13\n-       259: iadd\n-       260: istore        7\n-       262: aload         14\n-       264: iload         13\n-       266: iconst_1\n-       267: isub\n-       268: baload\n-       269: bipush        10\n-       271: if_icmpeq     284\n-       274: new           #40                 // class java/io/IOException\n-       277: dup\n-       278: ldc           #120                // String Failed to read Paxheader.Value should end with a newline\n-       280: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       283: athrow\n-       284: new           #2                  // class java/lang/String\n-       287: dup\n-       288: aload         14\n-       290: iconst_0\n-       291: iload         13\n-       293: iconst_1\n-       294: isub\n-       295: getstatic     #121                // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;\n-       298: invokespecial #4                  // Method java/lang/String.\"<init>\":([BIILjava/nio/charset/Charset;)V\n-       301: astore        16\n-       303: aload         5\n-       305: aload         12\n-       307: aload         16\n-       309: invokeinterface #122,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-       314: pop\n-       315: aload         12\n-       317: ldc           #124                // String GNU.sparse.offset\n-       319: invokevirtual #125                // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n-       322: ifeq          392\n-       325: aload         6\n-       327: ifnull        350\n-       330: aload_1\n-       331: new           #84                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-       334: dup\n-       335: aload         6\n-       337: invokevirtual #126                // Method java/lang/Long.longValue:()J\n-       340: lconst_0\n-       341: invokespecial #85                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-       344: invokeinterface #86,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-       349: pop\n-       350: aload         16\n-       352: invokestatic  #127                // Method java/lang/Long.valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n-       355: astore        6\n-       357: goto          372\n-       360: astore        17\n-       362: new           #40                 // class java/io/IOException\n-       365: dup\n-       366: ldc           #128                // String Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n-       368: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       371: athrow\n-       372: aload         6\n-       374: invokevirtual #126                // Method java/lang/Long.longValue:()J\n-       377: lconst_0\n-       378: lcmp\n-       379: ifge          392\n-       382: new           #40                 // class java/io/IOException\n-       385: dup\n-       386: ldc           #129                // String Failed to read Paxheader.GNU.sparse.offset contains negative value\n-       388: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       391: athrow\n-       392: aload         12\n-       394: ldc           #130                // String GNU.sparse.numbytes\n-       396: invokevirtual #125                // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n-       399: ifeq          480\n-       402: aload         6\n-       404: ifnonnull     417\n-       407: new           #40                 // class java/io/IOException\n-       410: dup\n-       411: ldc           #131                // String Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n-       413: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       416: athrow\n-       417: aload         16\n-       419: invokestatic  #78                 // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n-       422: lstore        17\n-       424: goto          439\n-       427: astore        19\n-       429: new           #40                 // class java/io/IOException\n-       432: dup\n-       433: ldc           #132                // String Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n-       435: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       438: athrow\n-       439: lload         17\n-       441: lconst_0\n-       442: lcmp\n-       443: ifge          456\n-       446: new           #40                 // class java/io/IOException\n-       449: dup\n-       450: ldc           #133                // String Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n-       452: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       455: athrow\n-       456: aload_1\n-       457: new           #84                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-       460: dup\n-       461: aload         6\n-       463: invokevirtual #126                // Method java/lang/Long.longValue:()J\n-       466: lload         17\n-       468: invokespecial #85                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-       471: invokeinterface #86,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-       476: pop\n-       477: aconst_null\n-       478: astore        6\n-       480: goto          538\n-       483: aload         11\n-       485: iload         8\n-       487: i2b\n-       488: invokevirtual #134                // Method java/io/ByteArrayOutputStream.write:(I)V\n-       491: goto          65\n-       494: iload         8\n-       496: bipush        48\n-       498: if_icmplt     508\n-       501: iload         8\n-       503: bipush        57\n-       505: if_icmple     518\n-       508: new           #40                 // class java/io/IOException\n-       511: dup\n-       512: ldc           #135                // String Failed to read Paxheader. Encountered a non-number while reading length\n-       514: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       517: athrow\n-       518: iload         9\n-       520: bipush        10\n-       522: imul\n-       523: istore        9\n-       525: iload         9\n-       527: iload         8\n-       529: bipush        48\n-       531: isub\n-       532: iadd\n-       533: istore        9\n-       535: goto          22\n-       538: iload         8\n-       540: iconst_m1\n-       541: if_icmpne     547\n-       544: goto          550\n-       547: goto          16\n-       550: aload         6\n-       552: ifnull        575\n-       555: aload_1\n-       556: new           #84                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-       559: dup\n-       560: aload         6\n-       562: invokevirtual #126                // Method java/lang/Long.longValue:()J\n-       565: lconst_0\n-       566: invokespecial #85                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-       569: invokeinterface #86,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-       574: pop\n-       575: aload         5\n-       577: areturn\n+       113: ldc_w         #314                // String UTF-8\n+       116: invokevirtual #316                // Method java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;\n+       119: astore        12\n+       121: iload         9\n+       123: iload         10\n+       125: isub\n+       126: istore        13\n+       128: iload         13\n+       130: iconst_1\n+       131: if_icmpgt     147\n+       134: aload         5\n+       136: aload         12\n+       138: invokeinterface #319,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+       143: pop\n+       144: goto          552\n+       147: lload_3\n+       148: lconst_0\n+       149: lcmp\n+       150: iflt          200\n+       153: iload         13\n+       155: i2l\n+       156: lload_3\n+       157: iload         7\n+       159: i2l\n+       160: lsub\n+       161: lcmp\n+       162: ifle          200\n+       165: new           #114                // class java/io/IOException\n+       168: dup\n+       169: new           #23                 // class java/lang/StringBuilder\n+       172: dup\n+       173: invokespecial #25                 // Method java/lang/StringBuilder.\"<init>\":()V\n+       176: ldc_w         #325                // String Paxheader value size\n+       179: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       182: iload         13\n+       184: invokevirtual #34                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       187: ldc_w         #327                // String  exceeds size of header record\n+       190: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       193: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       196: invokespecial #209                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       199: athrow\n+       200: aload_0\n+       201: iload         13\n+       203: invokestatic  #329                // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n+       206: astore        14\n+       208: aload         14\n+       210: arraylength\n+       211: istore        15\n+       213: iload         15\n+       215: iload         13\n+       217: if_icmpeq     260\n+       220: new           #114                // class java/io/IOException\n+       223: dup\n+       224: new           #23                 // class java/lang/StringBuilder\n+       227: dup\n+       228: invokespecial #25                 // Method java/lang/StringBuilder.\"<init>\":()V\n+       231: ldc_w         #333                // String Failed to read Paxheader. Expected\n+       234: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       237: iload         13\n+       239: invokevirtual #34                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       242: ldc_w         #335                // String  bytes, read\n+       245: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       248: iload         15\n+       250: invokevirtual #34                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       253: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       256: invokespecial #209                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       259: athrow\n+       260: iload         7\n+       262: iload         13\n+       264: iadd\n+       265: istore        7\n+       267: aload         14\n+       269: iload         13\n+       271: iconst_1\n+       272: isub\n+       273: baload\n+       274: bipush        10\n+       276: if_icmpeq     290\n+       279: new           #114                // class java/io/IOException\n+       282: dup\n+       283: ldc_w         #337                // String Failed to read Paxheader.Value should end with a newline\n+       286: invokespecial #209                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       289: athrow\n+       290: new           #3                  // class java/lang/String\n+       293: dup\n+       294: aload         14\n+       296: iconst_0\n+       297: iload         13\n+       299: iconst_1\n+       300: isub\n+       301: getstatic     #339                // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;\n+       304: invokespecial #11                 // Method java/lang/String.\"<init>\":([BIILjava/nio/charset/Charset;)V\n+       307: astore        16\n+       309: aload         5\n+       311: aload         12\n+       313: aload         16\n+       315: invokeinterface #345,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+       320: pop\n+       321: aload         12\n+       323: ldc_w         #351                // String GNU.sparse.offset\n+       326: invokevirtual #353                // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n+       329: ifeq          401\n+       332: aload         6\n+       334: ifnull        357\n+       337: aload_1\n+       338: new           #224                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+       341: dup\n+       342: aload         6\n+       344: invokevirtual #356                // Method java/lang/Long.longValue:()J\n+       347: lconst_0\n+       348: invokespecial #226                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+       351: invokeinterface #229,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       356: pop\n+       357: aload         16\n+       359: invokestatic  #357                // Method java/lang/Long.valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n+       362: astore        6\n+       364: goto          380\n+       367: astore        17\n+       369: new           #114                // class java/io/IOException\n+       372: dup\n+       373: ldc_w         #360                // String Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n+       376: invokespecial #209                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       379: athrow\n+       380: aload         6\n+       382: invokevirtual #356                // Method java/lang/Long.longValue:()J\n+       385: lconst_0\n+       386: lcmp\n+       387: ifge          401\n+       390: new           #114                // class java/io/IOException\n+       393: dup\n+       394: ldc_w         #362                // String Failed to read Paxheader.GNU.sparse.offset contains negative value\n+       397: invokespecial #209                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       400: athrow\n+       401: aload         12\n+       403: ldc_w         #364                // String GNU.sparse.numbytes\n+       406: invokevirtual #353                // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n+       409: ifeq          493\n+       412: aload         6\n+       414: ifnonnull     428\n+       417: new           #114                // class java/io/IOException\n+       420: dup\n+       421: ldc_w         #366                // String Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n+       424: invokespecial #209                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       427: athrow\n+       428: aload         16\n+       430: invokestatic  #210                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n+       433: lstore        17\n+       435: goto          451\n+       438: astore        19\n+       440: new           #114                // class java/io/IOException\n+       443: dup\n+       444: ldc_w         #368                // String Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n+       447: invokespecial #209                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       450: athrow\n+       451: lload         17\n+       453: lconst_0\n+       454: lcmp\n+       455: ifge          469\n+       458: new           #114                // class java/io/IOException\n+       461: dup\n+       462: ldc_w         #370                // String Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n+       465: invokespecial #209                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       468: athrow\n+       469: aload_1\n+       470: new           #224                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+       473: dup\n+       474: aload         6\n+       476: invokevirtual #356                // Method java/lang/Long.longValue:()J\n+       479: lload         17\n+       481: invokespecial #226                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+       484: invokeinterface #229,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       489: pop\n+       490: aconst_null\n+       491: astore        6\n+       493: goto          552\n+       496: aload         11\n+       498: iload         8\n+       500: i2b\n+       501: invokevirtual #372                // Method java/io/ByteArrayOutputStream.write:(I)V\n+       504: goto          65\n+       507: iload         8\n+       509: bipush        48\n+       511: if_icmplt     521\n+       514: iload         8\n+       516: bipush        57\n+       518: if_icmple     532\n+       521: new           #114                // class java/io/IOException\n+       524: dup\n+       525: ldc_w         #376                // String Failed to read Paxheader. Encountered a non-number while reading length\n+       528: invokespecial #209                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       531: athrow\n+       532: iload         9\n+       534: bipush        10\n+       536: imul\n+       537: istore        9\n+       539: iload         9\n+       541: iload         8\n+       543: bipush        48\n+       545: isub\n+       546: iadd\n+       547: istore        9\n+       549: goto          22\n+       552: iload         8\n+       554: iconst_m1\n+       555: if_icmpne     561\n+       558: goto          564\n+       561: goto          16\n+       564: aload         6\n+       566: ifnull        589\n+       569: aload_1\n+       570: new           #224                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+       573: dup\n+       574: aload         6\n+       576: invokevirtual #356                // Method java/lang/Long.longValue:()J\n+       579: lconst_0\n+       580: invokespecial #226                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+       583: invokeinterface #229,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       588: pop\n+       589: aload         5\n+       591: areturn\n       Exception table:\n          from    to  target type\n-           350   357   360   Class java/lang/NumberFormatException\n-           417   424   427   Class java/lang/NumberFormatException\n+           357   364   367   Class java/lang/NumberFormatException\n+           428   435   438   Class java/lang/NumberFormatException\n       LineNumberTable:\n         line 751: 0\n         line 752: 10\n         line 754: 13\n         line 757: 16\n         line 758: 19\n         line 759: 22\n@@ -2355,60 +2355,60 @@\n         line 768: 65\n         line 769: 76\n         line 770: 79\n         line 771: 82\n         line 772: 101\n         line 774: 104\n         line 775: 111\n-        line 777: 120\n-        line 778: 127\n-        line 779: 133\n-        line 780: 146\n-        line 781: 164\n-        line 784: 197\n-        line 785: 205\n-        line 786: 210\n-        line 787: 217\n-        line 793: 255\n-        line 795: 262\n-        line 796: 274\n-        line 799: 284\n-        line 800: 303\n-        line 803: 315\n-        line 804: 325\n-        line 806: 330\n-        line 809: 350\n-        line 813: 357\n-        line 810: 360\n-        line 811: 362\n-        line 814: 372\n-        line 815: 382\n-        line 821: 392\n-        line 822: 402\n-        line 823: 407\n-        line 828: 417\n-        line 832: 424\n-        line 829: 427\n-        line 830: 429\n-        line 833: 439\n-        line 834: 446\n-        line 837: 456\n-        line 838: 477\n-        line 841: 480\n-        line 843: 483\n-        line 849: 494\n-        line 850: 508\n-        line 853: 518\n-        line 854: 525\n-        line 856: 538\n-        line 857: 544\n-        line 859: 547\n-        line 860: 550\n-        line 862: 555\n-        line 864: 575\n+        line 777: 121\n+        line 778: 128\n+        line 779: 134\n+        line 780: 147\n+        line 781: 165\n+        line 784: 200\n+        line 785: 208\n+        line 786: 213\n+        line 787: 220\n+        line 793: 260\n+        line 795: 267\n+        line 796: 279\n+        line 799: 290\n+        line 800: 309\n+        line 803: 321\n+        line 804: 332\n+        line 806: 337\n+        line 809: 357\n+        line 813: 364\n+        line 810: 367\n+        line 811: 369\n+        line 814: 380\n+        line 815: 390\n+        line 821: 401\n+        line 822: 412\n+        line 823: 417\n+        line 828: 428\n+        line 832: 435\n+        line 829: 438\n+        line 830: 440\n+        line 833: 451\n+        line 834: 458\n+        line 837: 469\n+        line 838: 490\n+        line 841: 493\n+        line 843: 496\n+        line 849: 507\n+        line 850: 521\n+        line 853: 532\n+        line 854: 539\n+        line 856: 552\n+        line 857: 558\n+        line 859: 561\n+        line 860: 564\n+        line 862: 569\n+        line 864: 589\n       StackMapTable: number_of_entries = 26\n         frame_type = 254 /* append */\n           offset_delta = 16\n           locals = [ class java/util/Map, class java/lang/Long, int ]\n         frame_type = 254 /* append */\n           offset_delta = 5\n           locals = [ top, int, int ]\n@@ -2417,76 +2417,76 @@\n           locals = [ class java/io/InputStream, class java/util/List, class java/util/Map, long, class java/util/Map, class java/lang/Long, int, int, int, int ]\n           stack = []\n         frame_type = 252 /* append */\n           offset_delta = 15\n           locals = [ class java/io/ByteArrayOutputStream ]\n         frame_type = 38 /* same */\n         frame_type = 253 /* append */\n-          offset_delta = 41\n+          offset_delta = 42\n           locals = [ class java/lang/String, int ]\n-        frame_type = 50 /* same */\n+        frame_type = 52 /* same */\n         frame_type = 253 /* append */\n-          offset_delta = 57\n+          offset_delta = 59\n           locals = [ class \"[B\", int ]\n-        frame_type = 28 /* same */\n+        frame_type = 29 /* same */\n         frame_type = 252 /* append */\n-          offset_delta = 65\n+          offset_delta = 66\n           locals = [ class java/lang/String ]\n         frame_type = 73 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NumberFormatException ]\n-        frame_type = 11 /* same */\n-        frame_type = 19 /* same */\n-        frame_type = 24 /* same */\n+        frame_type = 12 /* same */\n+        frame_type = 20 /* same */\n+        frame_type = 26 /* same */\n         frame_type = 73 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NumberFormatException ]\n         frame_type = 252 /* append */\n-          offset_delta = 11\n+          offset_delta = 12\n           locals = [ long ]\n-        frame_type = 16 /* same */\n+        frame_type = 17 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 23\n           locals = [ class java/io/InputStream, class java/util/List, class java/util/Map, long, class java/util/Map, class java/lang/Long, int, int, int, int, class java/io/ByteArrayOutputStream, class java/lang/String, int ]\n           stack = []\n         frame_type = 249 /* chop */\n           offset_delta = 2\n         frame_type = 250 /* chop */\n           offset_delta = 10\n         frame_type = 13 /* same */\n-        frame_type = 9 /* same */\n+        frame_type = 10 /* same */\n         frame_type = 19 /* same */\n         frame_type = 248 /* chop */\n           offset_delta = 8\n         frame_type = 2 /* same */\n         frame_type = 24 /* same */\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #216                         // (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;J)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+    Signature: #452                         // (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;J)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n \n   public static org.apache.commons.compress.archivers.tar.TarArchiveStructSparse parseSparse(byte[], int);\n     descriptor: ([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=6, locals=6, args_size=2\n          0: aload_0\n          1: iload_1\n          2: bipush        12\n-         4: invokestatic  #136                // Method parseOctalOrBinary:([BII)J\n+         4: invokestatic  #378                // Method parseOctalOrBinary:([BII)J\n          7: lstore_2\n          8: aload_0\n          9: iload_1\n         10: bipush        12\n         12: iadd\n         13: bipush        12\n-        15: invokestatic  #136                // Method parseOctalOrBinary:([BII)J\n+        15: invokestatic  #378                // Method parseOctalOrBinary:([BII)J\n         18: lstore        4\n-        20: new           #84                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+        20: new           #224                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n         23: dup\n         24: lload_2\n         25: lload         4\n-        27: invokespecial #85                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+        27: invokespecial #226                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n         30: areturn\n       LineNumberTable:\n         line 875: 0\n         line 876: 8\n         line 878: 20\n \n   private static long[] readLineOfNumberForPax1X(java.io.InputStream) throws java.io.IOException;\n@@ -2495,198 +2495,198 @@\n     Code:\n       stack=5, locals=6, args_size=1\n          0: lconst_0\n          1: lstore_2\n          2: lconst_0\n          3: lstore        4\n          5: aload_0\n-         6: invokevirtual #108                // Method java/io/InputStream.read:()I\n+         6: invokevirtual #304                // Method java/io/InputStream.read:()I\n          9: dup\n         10: istore_1\n         11: bipush        10\n-        13: if_icmpeq     74\n+        13: if_icmpeq     76\n         16: lload         4\n         18: lconst_1\n         19: ladd\n         20: lstore        4\n         22: iload_1\n         23: iconst_m1\n-        24: if_icmpne     37\n-        27: new           #40                 // class java/io/IOException\n+        24: if_icmpne     38\n+        27: new           #114                // class java/io/IOException\n         30: dup\n-        31: ldc           #137                // String Unexpected EOF when reading parse information of 1.X PAX format\n-        33: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        36: athrow\n-        37: iload_1\n-        38: bipush        48\n-        40: if_icmplt     49\n-        43: iload_1\n-        44: bipush        57\n-        46: if_icmple     59\n-        49: new           #40                 // class java/io/IOException\n-        52: dup\n-        53: ldc           #138                // String Corrupted TAR archive. Non-numeric value in sparse headers block\n-        55: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        58: athrow\n-        59: lload_2\n-        60: ldc2_w        #139                // long 10l\n-        63: lmul\n-        64: iload_1\n-        65: bipush        48\n-        67: isub\n-        68: i2l\n-        69: ladd\n-        70: lstore_2\n-        71: goto          5\n-        74: lload         4\n-        76: lconst_1\n-        77: ladd\n-        78: lstore        4\n-        80: iconst_2\n-        81: newarray       long\n-        83: dup\n-        84: iconst_0\n-        85: lload_2\n-        86: lastore\n-        87: dup\n-        88: iconst_1\n-        89: lload         4\n-        91: lastore\n-        92: areturn\n+        31: ldc_w         #381                // String Unexpected EOF when reading parse information of 1.X PAX format\n+        34: invokespecial #209                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        37: athrow\n+        38: iload_1\n+        39: bipush        48\n+        41: if_icmplt     50\n+        44: iload_1\n+        45: bipush        57\n+        47: if_icmple     61\n+        50: new           #114                // class java/io/IOException\n+        53: dup\n+        54: ldc_w         #383                // String Corrupted TAR archive. Non-numeric value in sparse headers block\n+        57: invokespecial #209                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        60: athrow\n+        61: lload_2\n+        62: ldc2_w        #385                // long 10l\n+        65: lmul\n+        66: iload_1\n+        67: bipush        48\n+        69: isub\n+        70: i2l\n+        71: ladd\n+        72: lstore_2\n+        73: goto          5\n+        76: lload         4\n+        78: lconst_1\n+        79: ladd\n+        80: lstore        4\n+        82: iconst_2\n+        83: newarray       long\n+        85: dup\n+        86: iconst_0\n+        87: lload_2\n+        88: lastore\n+        89: dup\n+        90: iconst_1\n+        91: lload         4\n+        93: lastore\n+        94: areturn\n       LineNumberTable:\n         line 891: 0\n         line 892: 2\n         line 894: 5\n         line 895: 16\n         line 896: 22\n         line 897: 27\n-        line 899: 37\n-        line 900: 49\n-        line 902: 59\n-        line 904: 74\n-        line 906: 80\n+        line 899: 38\n+        line 900: 50\n+        line 902: 61\n+        line 904: 76\n+        line 906: 82\n       StackMapTable: number_of_entries = 5\n         frame_type = 254 /* append */\n           offset_delta = 5\n           locals = [ top, long, long ]\n         frame_type = 255 /* full_frame */\n-          offset_delta = 31\n+          offset_delta = 32\n           locals = [ class java/io/InputStream, int, long, long ]\n           stack = []\n         frame_type = 11 /* same */\n-        frame_type = 9 /* same */\n+        frame_type = 10 /* same */\n         frame_type = 14 /* same */\n     Exceptions:\n       throws java.io.IOException\n \n   static java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> readSparseStructs(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)Ljava/util/List;\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=4, locals=6, args_size=3\n-         0: new           #72                 // class java/util/ArrayList\n+         0: new           #198                // class java/util/ArrayList\n          3: dup\n-         4: invokespecial #73                 // Method java/util/ArrayList.\"<init>\":()V\n+         4: invokespecial #200                // Method java/util/ArrayList.\"<init>\":()V\n          7: astore_3\n          8: iconst_0\n          9: istore        4\n         11: iload         4\n         13: iload_2\n-        14: if_icmpge     102\n+        14: if_icmpge     105\n         17: aload_0\n         18: iload_1\n         19: iload         4\n         21: bipush        24\n         23: imul\n         24: iadd\n-        25: invokestatic  #141                // Method parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+        25: invokestatic  #387                // Method parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n         28: astore        5\n         30: aload         5\n-        32: invokevirtual #142                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+        32: invokevirtual #391                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n         35: lconst_0\n         36: lcmp\n-        37: ifge          50\n-        40: new           #40                 // class java/io/IOException\n+        37: ifge          51\n+        40: new           #114                // class java/io/IOException\n         43: dup\n-        44: ldc           #143                // String Corrupted TAR archive, sparse entry with negative offset\n-        46: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        49: athrow\n-        50: aload         5\n-        52: invokevirtual #144                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n-        55: lconst_0\n-        56: lcmp\n-        57: ifge          70\n-        60: new           #40                 // class java/io/IOException\n-        63: dup\n-        64: ldc           #145                // String Corrupted TAR archive, sparse entry with negative numbytes\n-        66: invokespecial #77                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        69: athrow\n-        70: aload_3\n-        71: aload         5\n-        73: invokeinterface #86,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-        78: pop\n-        79: goto          96\n-        82: astore        5\n-        84: new           #40                 // class java/io/IOException\n-        87: dup\n-        88: ldc           #146                // String Corrupted TAR archive, sparse entry is invalid\n-        90: aload         5\n-        92: invokespecial #147                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-        95: athrow\n-        96: iinc          4, 1\n-        99: goto          11\n-       102: aload_3\n-       103: invokestatic  #87                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-       106: areturn\n+        44: ldc_w         #394                // String Corrupted TAR archive, sparse entry with negative offset\n+        47: invokespecial #209                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        50: athrow\n+        51: aload         5\n+        53: invokevirtual #396                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n+        56: lconst_0\n+        57: lcmp\n+        58: ifge          72\n+        61: new           #114                // class java/io/IOException\n+        64: dup\n+        65: ldc_w         #399                // String Corrupted TAR archive, sparse entry with negative numbytes\n+        68: invokespecial #209                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        71: athrow\n+        72: aload_3\n+        73: aload         5\n+        75: invokeinterface #229,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+        80: pop\n+        81: goto          99\n+        84: astore        5\n+        86: new           #114                // class java/io/IOException\n+        89: dup\n+        90: ldc_w         #401                // String Corrupted TAR archive, sparse entry is invalid\n+        93: aload         5\n+        95: invokespecial #403                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+        98: athrow\n+        99: iinc          4, 1\n+       102: goto          11\n+       105: aload_3\n+       106: invokestatic  #234                // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+       109: areturn\n       Exception table:\n          from    to  target type\n-            17    79    82   Class java/lang/IllegalArgumentException\n+            17    81    84   Class java/lang/IllegalArgumentException\n       LineNumberTable:\n         line 914: 0\n         line 915: 8\n         line 917: 17\n         line 918: 25\n         line 920: 30\n         line 921: 40\n-        line 923: 50\n-        line 924: 60\n-        line 926: 70\n-        line 930: 79\n-        line 927: 82\n-        line 929: 84\n-        line 915: 96\n-        line 932: 102\n+        line 923: 51\n+        line 924: 61\n+        line 926: 72\n+        line 930: 81\n+        line 927: 84\n+        line 929: 86\n+        line 915: 99\n+        line 932: 105\n       StackMapTable: number_of_entries = 6\n         frame_type = 253 /* append */\n           offset_delta = 11\n           locals = [ class java/util/List, int ]\n         frame_type = 252 /* append */\n-          offset_delta = 38\n+          offset_delta = 39\n           locals = [ class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse ]\n-        frame_type = 19 /* same */\n+        frame_type = 20 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 11\n           locals = [ class \"[B\", int, int, class java/util/List, int ]\n           stack = [ class java/lang/IllegalArgumentException ]\n-        frame_type = 13 /* same */\n+        frame_type = 14 /* same */\n         frame_type = 250 /* chop */\n           offset_delta = 5\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #223                         // ([BII)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #455                         // ([BII)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n \n   public static boolean verifyCheckSum(byte[]);\n     descriptor: ([B)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=9, args_size=1\n          0: aload_0\n          1: sipush        148\n          4: bipush        8\n-         6: invokestatic  #94                 // Method parseOctal:([BII)J\n+         6: invokestatic  #258                // Method parseOctal:([BII)J\n          9: lstore_1\n         10: lconst_0\n         11: lstore_3\n         12: lconst_0\n         13: lstore        5\n         15: iconst_0\n         16: istore        7\n@@ -2761,34 +2761,34 @@\n \n   private org.apache.commons.compress.archivers.tar.TarUtils();\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokespecial #148                // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #406                // Method java/lang/Object.\"<init>\":()V\n          4: return\n       LineNumberTable:\n         line 977: 0\n         line 978: 4\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=2, locals=0, args_size=0\n          0: aconst_null\n-         1: invokestatic  #149                // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-         4: putstatic     #38                 // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-         7: new           #150                // class org/apache/commons/compress/archivers/tar/TarUtils$1\n+         1: invokestatic  #409                // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+         4: putstatic     #106                // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+         7: new           #415                // class org/apache/commons/compress/archivers/tar/TarUtils$1\n         10: dup\n-        11: invokespecial #151                // Method org/apache/commons/compress/archivers/tar/TarUtils$1.\"<init>\":()V\n-        14: putstatic     #41                 // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        11: invokespecial #417                // Method org/apache/commons/compress/archivers/tar/TarUtils$1.\"<init>\":()V\n+        14: putstatic     #116                // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n         17: return\n       LineNumberTable:\n         line 50: 0\n         line 51: 1\n         line 57: 7\n }\n SourceFile: \"TarUtils.java\"\n InnerClasses:\n-  #150;                                   // class org/apache/commons/compress/archivers/tar/TarUtils$1\n+  #415;                                   // class org/apache/commons/compress/archivers/tar/TarUtils$1\n"}]}
