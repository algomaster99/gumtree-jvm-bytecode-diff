{"diffoscope-json-version": 1, "source1": "first/CompareToBuilder.class", "source2": "second/CompareToBuilder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -57,15 +57,15 @@\n         AccessibleObject.setAccessible(fields, true);\n         for (int i = 0; i < fields.length && builder.comparison == 0; ++i) {\n             final Field f = fields[i];\n             if (!ArrayUtils.contains((Object[])excludeFields, (Object)f.getName()) && !f.getName().contains(\"$\") && (useTransients || !Modifier.isTransient(f.getModifiers())) && !Modifier.isStatic(f.getModifiers())) {\n                 try {\n                     builder.append(f.get(lhs), f.get(rhs));\n                 }\n-                catch (final IllegalAccessException e) {\n+                catch (final IllegalAccessException ex) {\n                     throw new InternalError(\"Unexpected IllegalAccessException\");\n                 }\n             }\n         }\n     }\n     \n     public CompareToBuilder appendSuper(final int superCompareTo) {\n@@ -107,39 +107,39 @@\n             this.comparison = comparator2.compare(lhs, rhs);\n         }\n         return this;\n     }\n     \n     private void appendArray(final Object lhs, final Object rhs, final Comparator<?> comparator) {\n         if (lhs instanceof long[]) {\n-            this.append(lhs, (long[])(long[])rhs);\n+            this.append((long[])lhs, (long[])rhs);\n         }\n         else if (lhs instanceof int[]) {\n-            this.append(lhs, (int[])(int[])rhs);\n+            this.append((int[])lhs, (int[])rhs);\n         }\n         else if (lhs instanceof short[]) {\n-            this.append(lhs, (short[])(short[])rhs);\n+            this.append((short[])lhs, (short[])rhs);\n         }\n         else if (lhs instanceof char[]) {\n-            this.append(lhs, (char[])(char[])rhs);\n+            this.append((char[])lhs, (char[])rhs);\n         }\n         else if (lhs instanceof byte[]) {\n-            this.append(lhs, (byte[])(byte[])rhs);\n+            this.append((byte[])lhs, (byte[])rhs);\n         }\n         else if (lhs instanceof double[]) {\n-            this.append(lhs, (double[])(double[])rhs);\n+            this.append((double[])lhs, (double[])rhs);\n         }\n         else if (lhs instanceof float[]) {\n-            this.append(lhs, (float[])(float[])rhs);\n+            this.append((float[])lhs, (float[])rhs);\n         }\n         else if (lhs instanceof boolean[]) {\n-            this.append(lhs, (boolean[])(boolean[])rhs);\n+            this.append((boolean[])lhs, (boolean[])rhs);\n         }\n         else {\n-            this.append(lhs, (Object[])(Object[])rhs, comparator);\n+            this.append((Object[])lhs, (Object[])rhs, comparator);\n         }\n     }\n     \n     public CompareToBuilder append(final long lhs, final long rhs) {\n         if (this.comparison != 0) {\n             return this;\n         }\n"}]}
