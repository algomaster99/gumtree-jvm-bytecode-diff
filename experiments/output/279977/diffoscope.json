{"diffoscope-json-version": 1, "source1": "first/DefaultConversionHandler.class", "source2": "second/DefaultConversionHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,121 +13,119 @@\n     public static final DefaultConversionHandler INSTANCE;\n     public static final String DEFAULT_DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n     private static final AbstractListDelimiterHandler EXTRACTOR;\n     private static final ConfigurationInterpolator NULL_INTERPOLATOR;\n     private volatile String dateFormat;\n     \n     public String getDateFormat() {\n-        final String fmt = this.dateFormat;\n-        return (fmt != null) ? fmt : \"yyyy-MM-dd HH:mm:ss\";\n+        final String dateFormat = this.dateFormat;\n+        return (dateFormat != null) ? dateFormat : \"yyyy-MM-dd HH:mm:ss\";\n     }\n     \n     public void setDateFormat(final String dateFormat) {\n         this.dateFormat = dateFormat;\n     }\n     \n-    public <T> T to(final Object src, final Class<T> targetCls, final ConfigurationInterpolator ci) {\n-        final ConfigurationInterpolator interpolator = fetchInterpolator(ci);\n-        return (T)this.convert(interpolator.interpolate(src), (Class<Object>)targetCls, interpolator);\n+    public <T> T to(final Object o, final Class<T> clazz, final ConfigurationInterpolator configurationInterpolator) {\n+        final ConfigurationInterpolator fetchInterpolator = fetchInterpolator(configurationInterpolator);\n+        return (T)this.convert(fetchInterpolator.interpolate(o), (Class<Object>)clazz, fetchInterpolator);\n     }\n     \n-    public Object toArray(final Object src, final Class<?> elemClass, final ConfigurationInterpolator ci) {\n-        if (src == null) {\n+    public Object toArray(final Object o, final Class<?> componentType, final ConfigurationInterpolator configurationInterpolator) {\n+        if (o == null) {\n             return null;\n         }\n-        if (this.isEmptyElement(src)) {\n-            return Array.newInstance(elemClass, 0);\n+        if (this.isEmptyElement(o)) {\n+            return Array.newInstance(componentType, 0);\n         }\n-        final ConfigurationInterpolator interpolator = fetchInterpolator(ci);\n-        return elemClass.isPrimitive() ? this.toPrimitiveArray(src, elemClass, interpolator) : this.toObjectArray(src, elemClass, interpolator);\n+        final ConfigurationInterpolator fetchInterpolator = fetchInterpolator(configurationInterpolator);\n+        return componentType.isPrimitive() ? this.toPrimitiveArray(o, componentType, fetchInterpolator) : this.toObjectArray(o, componentType, fetchInterpolator);\n     }\n     \n-    public <T> void toCollection(final Object src, final Class<T> elemClass, final ConfigurationInterpolator ci, final Collection<T> dest) {\n-        if (dest == null) {\n+    public <T> void toCollection(final Object o, final Class<T> clazz, final ConfigurationInterpolator configurationInterpolator, final Collection<T> collection) {\n+        if (collection == null) {\n             throw new IllegalArgumentException(\"Target collection must not be null!\");\n         }\n-        if (src != null && !this.isEmptyElement(src)) {\n-            final ConfigurationInterpolator interpolator = fetchInterpolator(ci);\n-            this.convertToCollection(src, (Class<Object>)elemClass, interpolator, (Collection<Object>)dest);\n+        if (o != null && !this.isEmptyElement(o)) {\n+            this.convertToCollection(o, (Class<Object>)clazz, fetchInterpolator(configurationInterpolator), (Collection<Object>)collection);\n         }\n     }\n     \n-    protected boolean isComplexObject(final Object src) {\n-        return src instanceof Iterator || src instanceof Iterable || (src != null && src.getClass().isArray());\n+    protected boolean isComplexObject(final Object o) {\n+        return o instanceof Iterator || o instanceof Iterable || (o != null && o.getClass().isArray());\n     }\n     \n-    protected boolean isEmptyElement(final Object src) {\n-        return src instanceof CharSequence && ((CharSequence)src).length() == 0;\n+    protected boolean isEmptyElement(final Object o) {\n+        return o instanceof CharSequence && ((CharSequence)o).length() == 0;\n     }\n     \n-    protected <T> T convert(final Object src, final Class<T> targetCls, final ConfigurationInterpolator ci) {\n-        final Object conversionSrc = this.isComplexObject(src) ? this.extractConversionValue(src, targetCls, ci) : src;\n-        return (T)this.convertValue(ci.interpolate(conversionSrc), (Class<Object>)targetCls, ci);\n+    protected <T> T convert(final Object o, final Class<T> clazz, final ConfigurationInterpolator configurationInterpolator) {\n+        return (T)this.convertValue(configurationInterpolator.interpolate(this.isComplexObject(o) ? this.extractConversionValue(o, clazz, configurationInterpolator) : o), (Class<Object>)clazz, configurationInterpolator);\n     }\n     \n-    protected Collection<?> extractValues(final Object source, final int limit) {\n-        return DefaultConversionHandler.EXTRACTOR.flatten(source, limit);\n+    protected Collection<?> extractValues(final Object o, final int n) {\n+        return DefaultConversionHandler.EXTRACTOR.flatten(o, n);\n     }\n     \n-    protected Collection<?> extractValues(final Object source) {\n-        return this.extractValues(source, Integer.MAX_VALUE);\n+    protected Collection<?> extractValues(final Object o) {\n+        return this.extractValues(o, Integer.MAX_VALUE);\n     }\n     \n-    protected Object extractConversionValue(final Object container, final Class<?> targetCls, final ConfigurationInterpolator ci) {\n-        final Collection<?> values = this.extractValues(container, 1);\n-        return values.isEmpty() ? null : ci.interpolate((Object)values.iterator().next());\n+    protected Object extractConversionValue(final Object o, final Class<?> clazz, final ConfigurationInterpolator configurationInterpolator) {\n+        final Collection<?> values = this.extractValues(o, 1);\n+        return values.isEmpty() ? null : configurationInterpolator.interpolate((Object)values.iterator().next());\n     }\n     \n-    protected <T> T convertValue(final Object src, final Class<T> targetCls, final ConfigurationInterpolator ci) {\n-        if (src == null) {\n+    protected <T> T convertValue(final Object o, final Class<T> clazz, final ConfigurationInterpolator configurationInterpolator) {\n+        if (o == null) {\n             return null;\n         }\n-        final T result = (T)PropertyConverter.to((Class)targetCls, src, this);\n-        return result;\n+        return (T)PropertyConverter.to((Class)clazz, o, this);\n     }\n     \n-    private <T> T[] toObjectArray(final Object src, final Class<T> elemClass, final ConfigurationInterpolator ci) {\n-        final Collection<T> convertedCol = new LinkedList<T>();\n-        this.convertToCollection(src, elemClass, ci, convertedCol);\n-        final T[] result = (T[])Array.newInstance(elemClass, convertedCol.size());\n-        return convertedCol.toArray(result);\n+    private <T> T[] toObjectArray(final Object o, final Class<T> componentType, final ConfigurationInterpolator configurationInterpolator) {\n+        final LinkedList list = new LinkedList();\n+        this.convertToCollection(o, componentType, configurationInterpolator, list);\n+        return (T[])list.toArray((Object[])Array.newInstance(componentType, list.size()));\n     }\n     \n-    private Object toPrimitiveArray(final Object src, final Class<?> elemClass, final ConfigurationInterpolator ci) {\n-        if (src.getClass().isArray()) {\n-            if (src.getClass().getComponentType().equals(elemClass)) {\n-                return src;\n+    private Object toPrimitiveArray(final Object o, final Class<?> componentType, final ConfigurationInterpolator configurationInterpolator) {\n+        if (o.getClass().isArray()) {\n+            if (o.getClass().getComponentType().equals(componentType)) {\n+                return o;\n             }\n-            if (src.getClass().getComponentType().equals(ClassUtils.primitiveToWrapper((Class)elemClass))) {\n-                final int length = Array.getLength(src);\n-                final Object array = Array.newInstance(elemClass, length);\n+            if (o.getClass().getComponentType().equals(ClassUtils.primitiveToWrapper((Class)componentType))) {\n+                final int length = Array.getLength(o);\n+                final Object instance = Array.newInstance(componentType, length);\n                 for (int i = 0; i < length; ++i) {\n-                    Array.set(array, i, Array.get(src, i));\n+                    Array.set(instance, i, Array.get(o, i));\n                 }\n-                return array;\n+                return instance;\n             }\n         }\n-        final Collection<?> values = this.extractValues(src);\n-        final Class<?> targetClass = ClassUtils.primitiveToWrapper((Class)elemClass);\n-        final Object array2 = Array.newInstance(elemClass, values.size());\n-        int idx = 0;\n-        for (final Object value : values) {\n-            Array.set(array2, idx++, this.convertValue(ci.interpolate(value), (Class<Object>)targetClass, ci));\n+        final Collection<?> values = this.extractValues(o);\n+        final Class primitiveToWrapper = ClassUtils.primitiveToWrapper((Class)componentType);\n+        final Object instance2 = Array.newInstance(componentType, values.size());\n+        int n = 0;\n+        final Iterator iterator = values.iterator();\n+        while (iterator.hasNext()) {\n+            Array.set(instance2, n++, this.convertValue(configurationInterpolator.interpolate(iterator.next()), (Class<Object>)primitiveToWrapper, configurationInterpolator));\n         }\n-        return array2;\n+        return instance2;\n     }\n     \n-    private <T> void convertToCollection(final Object src, final Class<T> elemClass, final ConfigurationInterpolator ci, final Collection<T> dest) {\n-        for (final Object o : this.extractValues(ci.interpolate(src))) {\n-            dest.add(this.convert(o, elemClass, ci));\n+    private <T> void convertToCollection(final Object o, final Class<T> clazz, final ConfigurationInterpolator configurationInterpolator, final Collection<T> collection) {\n+        final Iterator<?> iterator = this.extractValues(configurationInterpolator.interpolate(o)).iterator();\n+        while (iterator.hasNext()) {\n+            collection.add(this.convert((Object)iterator.next(), clazz, configurationInterpolator));\n         }\n     }\n     \n-    private static ConfigurationInterpolator fetchInterpolator(final ConfigurationInterpolator ci) {\n-        return (ci != null) ? ci : DefaultConversionHandler.NULL_INTERPOLATOR;\n+    private static ConfigurationInterpolator fetchInterpolator(final ConfigurationInterpolator configurationInterpolator) {\n+        return (configurationInterpolator != null) ? configurationInterpolator : DefaultConversionHandler.NULL_INTERPOLATOR;\n     }\n     \n     static {\n         INSTANCE = new DefaultConversionHandler();\n         EXTRACTOR = (AbstractListDelimiterHandler)DisabledListDelimiterHandler.INSTANCE;\n         NULL_INTERPOLATOR = (ConfigurationInterpolator)new DefaultConversionHandler.DefaultConversionHandler$1();\n     }\n"}]}
