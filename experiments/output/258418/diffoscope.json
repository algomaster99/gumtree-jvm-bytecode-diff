{"diffoscope-json-version": 1, "source1": "first/DefaultConfigurationKey$KeyIterator.class", "source2": "second/DefaultConfigurationKey$KeyIterator.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,25 +18,25 @@\n         this.this$0 = this$0;\n     }\n     \n     public String nextKey() {\n         return this.nextKey(false);\n     }\n     \n-    public String nextKey(final boolean decorated) {\n+    public String nextKey(final boolean b) {\n         if (!this.hasNext()) {\n             throw new NoSuchElementException(\"No more key parts!\");\n         }\n         this.hasIndex = false;\n         this.indexValue = -1;\n-        final String key = this.findNextIndices();\n-        this.current = key;\n-        this.hasIndex = this.checkIndex(key);\n+        final String nextIndices = this.findNextIndices();\n+        this.current = nextIndices;\n+        this.hasIndex = this.checkIndex(nextIndices);\n         this.attribute = this.checkAttribute(this.current);\n-        return this.currentKey(decorated);\n+        return this.currentKey(b);\n     }\n     \n     @Override\n     public boolean hasNext() {\n         return this.endIndex < DefaultConfigurationKey.access$100(this.this$0).length();\n     }\n     \n@@ -50,16 +50,16 @@\n         throw new UnsupportedOperationException(\"Remove not supported!\");\n     }\n     \n     public String currentKey() {\n         return this.currentKey(false);\n     }\n     \n-    public String currentKey(final boolean decorated) {\n-        return (decorated && !this.isPropertyKey()) ? this.this$0.constructAttributeKey(this.current) : this.current;\n+    public String currentKey(final boolean b) {\n+        return (b && !this.isPropertyKey()) ? this.this$0.constructAttributeKey(this.current) : this.current;\n     }\n     \n     public boolean isAttribute() {\n         return this.attribute || (this.isAttributeEmulatingMode() && !this.hasNext());\n     }\n     \n     public boolean isPropertyKey() {\n@@ -74,15 +74,15 @@\n         return this.hasIndex;\n     }\n     \n     public Object clone() {\n         try {\n             return super.clone();\n         }\n-        catch (final CloneNotSupportedException cex) {\n+        catch (final CloneNotSupportedException ex) {\n             return null;\n         }\n     }\n     \n     private String findNextIndices() {\n         this.startIndex = this.endIndex;\n         while (this.startIndex < this.this$0.length() && DefaultConfigurationKey.access$200(this.this$0, DefaultConfigurationKey.access$100(this.this$0).substring())) {\n@@ -93,88 +93,88 @@\n             this.startIndex = this.endIndex - 1;\n             return DefaultConfigurationKey.access$100(this.this$0).substring();\n         }\n         return this.nextKeyPart();\n     }\n     \n     private String nextKeyPart() {\n-        int attrIdx = DefaultConfigurationKey.access$100(this.this$0).toString().indexOf(DefaultConfigurationKey.access$300(this.this$0).getAttributeStart(), this.startIndex);\n-        if (attrIdx < 0 || attrIdx == this.startIndex) {\n-            attrIdx = this.this$0.length();\n-        }\n-        int delIdx = this.nextDelimiterPos(DefaultConfigurationKey.access$100(this.this$0).toString(), this.startIndex, attrIdx);\n-        if (delIdx < 0) {\n-            delIdx = attrIdx;\n+        int a = DefaultConfigurationKey.access$100(this.this$0).toString().indexOf(DefaultConfigurationKey.access$300(this.this$0).getAttributeStart(), this.startIndex);\n+        if (a < 0 || a == this.startIndex) {\n+            a = this.this$0.length();\n+        }\n+        int nextDelimiterPos = this.nextDelimiterPos(DefaultConfigurationKey.access$100(this.this$0).toString(), this.startIndex, a);\n+        if (nextDelimiterPos < 0) {\n+            nextDelimiterPos = a;\n         }\n-        this.endIndex = Math.min(attrIdx, delIdx);\n+        this.endIndex = Math.min(a, nextDelimiterPos);\n         return DefaultConfigurationKey.access$400(this.this$0, DefaultConfigurationKey.access$100(this.this$0).substring());\n     }\n     \n-    private int nextDelimiterPos(final String key, final int pos, final int endPos) {\n-        int delimiterPos = pos;\n-        boolean found = false;\n+    private int nextDelimiterPos(final String s, final int n, final int n2) {\n+        int index = n;\n+        boolean b = false;\n         do {\n-            delimiterPos = key.indexOf(DefaultConfigurationKey.access$300(this.this$0).getPropertyDelimiter(), delimiterPos);\n-            if (delimiterPos < 0 || delimiterPos >= endPos) {\n+            index = s.indexOf(DefaultConfigurationKey.access$300(this.this$0).getPropertyDelimiter(), index);\n+            if (index < 0 || index >= n2) {\n                 return -1;\n             }\n-            final int escapePos = this.escapedPosition(key, delimiterPos);\n-            if (escapePos < 0) {\n-                found = true;\n+            final int escapedPosition = this.escapedPosition(s, index);\n+            if (escapedPosition < 0) {\n+                b = true;\n             }\n             else {\n-                delimiterPos = escapePos;\n+                index = escapedPosition;\n             }\n-        } while (!found);\n-        return delimiterPos;\n+        } while (!b);\n+        return index;\n     }\n     \n-    private int escapedPosition(final String key, final int pos) {\n+    private int escapedPosition(final String s, final int n) {\n         if (DefaultConfigurationKey.access$300(this.this$0).getEscapedDelimiter() == null) {\n             return -1;\n         }\n         final int escapeOffset = this.escapeOffset();\n-        if (escapeOffset < 0 || escapeOffset > pos) {\n+        if (escapeOffset < 0 || escapeOffset > n) {\n             return -1;\n         }\n-        final int escapePos = key.indexOf(DefaultConfigurationKey.access$300(this.this$0).getEscapedDelimiter(), pos - escapeOffset);\n-        if (escapePos <= pos && escapePos >= 0) {\n-            return escapePos + DefaultConfigurationKey.access$300(this.this$0).getEscapedDelimiter().length();\n+        final int index = s.indexOf(DefaultConfigurationKey.access$300(this.this$0).getEscapedDelimiter(), n - escapeOffset);\n+        if (index <= n && index >= 0) {\n+            return index + DefaultConfigurationKey.access$300(this.this$0).getEscapedDelimiter().length();\n         }\n         return -1;\n     }\n     \n     private int escapeOffset() {\n         return DefaultConfigurationKey.access$300(this.this$0).getEscapedDelimiter().indexOf(DefaultConfigurationKey.access$300(this.this$0).getPropertyDelimiter());\n     }\n     \n-    private boolean checkAttribute(final String key) {\n-        if (this.this$0.isAttributeKey(key)) {\n-            this.current = DefaultConfigurationKey.access$500(this.this$0, key);\n+    private boolean checkAttribute(final String s) {\n+        if (this.this$0.isAttributeKey(s)) {\n+            this.current = DefaultConfigurationKey.access$500(this.this$0, s);\n             return true;\n         }\n         return false;\n     }\n     \n-    private boolean checkIndex(final String key) {\n-        boolean result = false;\n+    private boolean checkIndex(final String s) {\n+        boolean b = false;\n         try {\n-            final int idx = key.lastIndexOf(DefaultConfigurationKey.access$300(this.this$0).getIndexStart());\n-            if (idx > 0) {\n-                final int endidx = key.indexOf(DefaultConfigurationKey.access$300(this.this$0).getIndexEnd(), idx);\n-                if (endidx > idx + 1) {\n-                    this.indexValue = Integer.parseInt(key.substring(idx + 1, endidx));\n-                    this.current = key.substring(0, idx);\n-                    result = true;\n+            final int lastIndex = s.lastIndexOf(DefaultConfigurationKey.access$300(this.this$0).getIndexStart());\n+            if (lastIndex > 0) {\n+                final int index = s.indexOf(DefaultConfigurationKey.access$300(this.this$0).getIndexEnd(), lastIndex);\n+                if (index > lastIndex + 1) {\n+                    this.indexValue = Integer.parseInt(s.substring(lastIndex + 1, index));\n+                    this.current = s.substring(0, lastIndex);\n+                    b = true;\n                 }\n             }\n         }\n-        catch (final NumberFormatException nfe) {\n-            result = false;\n+        catch (final NumberFormatException ex) {\n+            b = false;\n         }\n-        return result;\n+        return b;\n     }\n     \n     private boolean isAttributeEmulatingMode() {\n         return DefaultConfigurationKey.access$300(this.this$0).getAttributeEnd() == null && StringUtils.equals((CharSequence)DefaultConfigurationKey.access$300(this.this$0).getPropertyDelimiter(), (CharSequence)DefaultConfigurationKey.access$300(this.this$0).getAttributeStart());\n     }\n }\n"}]}
