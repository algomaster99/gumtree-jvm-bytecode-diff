{"diffoscope-json-version": 1, "source1": "first/TokenMgrError.class", "source2": "second/TokenMgrError.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,82 +6,82 @@\n     private static final long serialVersionUID = 1L;\n     static final int LEXICAL_ERROR = 0;\n     static final int STATIC_LEXER_ERROR = 1;\n     static final int INVALID_LEXICAL_STATE = 2;\n     static final int LOOP_DETECTED = 3;\n     int errorCode;\n     \n-    protected static final String addEscapes(final String str) {\n-        final StringBuffer retval = new StringBuffer();\n-        for (int i = 0; i < str.length(); ++i) {\n-            switch (str.charAt(i)) {\n+    protected static final String addEscapes(final String s) {\n+        final StringBuffer sb = new StringBuffer();\n+        for (int i = 0; i < s.length(); ++i) {\n+            switch (s.charAt(i)) {\n                 case '\\0': {\n                     break;\n                 }\n                 case '\\b': {\n-                    retval.append(\"\\\\b\");\n+                    sb.append(\"\\\\b\");\n                     break;\n                 }\n                 case '\\t': {\n-                    retval.append(\"\\\\t\");\n+                    sb.append(\"\\\\t\");\n                     break;\n                 }\n                 case '\\n': {\n-                    retval.append(\"\\\\n\");\n+                    sb.append(\"\\\\n\");\n                     break;\n                 }\n                 case '\\f': {\n-                    retval.append(\"\\\\f\");\n+                    sb.append(\"\\\\f\");\n                     break;\n                 }\n                 case '\\r': {\n-                    retval.append(\"\\\\r\");\n+                    sb.append(\"\\\\r\");\n                     break;\n                 }\n                 case '\\\"': {\n-                    retval.append(\"\\\\\\\"\");\n+                    sb.append(\"\\\\\\\"\");\n                     break;\n                 }\n                 case '\\'': {\n-                    retval.append(\"\\\\'\");\n+                    sb.append(\"\\\\'\");\n                     break;\n                 }\n                 case '\\\\': {\n-                    retval.append(\"\\\\\\\\\");\n+                    sb.append(\"\\\\\\\\\");\n                     break;\n                 }\n                 default: {\n-                    final char ch;\n-                    if ((ch = str.charAt(i)) < ' ' || ch > '~') {\n-                        final String s = \"0000\" + Integer.toString((int)ch, 16);\n-                        retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n+                    final char char1;\n+                    if ((char1 = s.charAt(i)) < ' ' || char1 > '~') {\n+                        final String string = \"0000\" + Integer.toString((int)char1, 16);\n+                        sb.append(\"\\\\u\" + string.substring(string.length() - 4, string.length()));\n                         break;\n                     }\n-                    retval.append(ch);\n+                    sb.append(char1);\n                     break;\n                 }\n             }\n         }\n-        return retval.toString();\n+        return sb.toString();\n     }\n     \n-    protected static String LexicalError(final boolean EOFSeen, final int lexState, final int errorLine, final int errorColumn, final String errorAfter, final char curChar) {\n-        return \"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\" + \" (\" + (int)curChar + \"), \")) + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\";\n+    protected static String LexicalError(final boolean b, final int n, final int i, final int j, final String s, final char c) {\n+        return \"Lexical error at line \" + i + \", column \" + j + \".  Encountered: \" + (b ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(c)) + \"\\\"\" + \" (\" + (int)c + \"), \")) + \"after : \\\"\" + addEscapes(s) + \"\\\"\";\n     }\n     \n     @Override\n     public String getMessage() {\n         return super.getMessage();\n     }\n     \n     public TokenMgrError() {\n     }\n     \n-    public TokenMgrError(final String message, final int reason) {\n+    public TokenMgrError(final String message, final int errorCode) {\n         super(message);\n-        this.errorCode = reason;\n+        this.errorCode = errorCode;\n     }\n     \n-    public TokenMgrError(final boolean EOFSeen, final int lexState, final int errorLine, final int errorColumn, final String errorAfter, final char curChar, final int reason) {\n-        this(LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason);\n+    public TokenMgrError(final boolean b, final int n, final int n2, final int n3, final String s, final char c, final int n4) {\n+        this(LexicalError(b, n, n2, n3, s, c), n4);\n     }\n }\n"}]}
