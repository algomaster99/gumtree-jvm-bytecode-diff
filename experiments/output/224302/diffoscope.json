{"diffoscope-json-version": 1, "source1": "first/JavadocUtil.class", "source2": "second/JavadocUtil.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,22 +1,21 @@\n \n package com.puppycrawl.tools.checkstyle.utils;\n \n import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;\n import com.puppycrawl.tools.checkstyle.api.DetailNode;\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n import java.util.Iterator;\n-import java.util.List;\n-import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo;\n import com.puppycrawl.tools.checkstyle.checks.javadoc.InvalidJavadocTag;\n import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTag;\n+import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagInfo;\n+import com.puppycrawl.tools.checkstyle.checks.javadoc.utils.TagInfo;\n import com.puppycrawl.tools.checkstyle.checks.javadoc.utils.InlineTagUtil;\n import java.util.Collection;\n import com.puppycrawl.tools.checkstyle.checks.javadoc.utils.BlockTagUtil;\n-import com.puppycrawl.tools.checkstyle.checks.javadoc.utils.TagInfo;\n import java.util.ArrayList;\n import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTags;\n import com.puppycrawl.tools.checkstyle.api.TextBlock;\n import java.util.regex.Pattern;\n import java.util.Map;\n \n public final class JavadocUtil\n@@ -27,162 +26,152 @@\n     private static final Pattern NEWLINE;\n     private static final Pattern RETURN;\n     private static final Pattern TAB;\n     \n     private JavadocUtil() {\n     }\n     \n-    public static JavadocTags getJavadocTags(final TextBlock textBlock, final JavadocUtil.JavadocTagType tagType) {\n-        final List<TagInfo> tags = new ArrayList<TagInfo>();\n-        final boolean isBlockTags = tagType == JavadocUtil.JavadocTagType.ALL || tagType == JavadocUtil.JavadocTagType.BLOCK;\n-        if (isBlockTags) {\n-            tags.addAll(BlockTagUtil.extractBlockTags(textBlock.getText()));\n-        }\n-        final boolean isInlineTags = tagType == JavadocUtil.JavadocTagType.ALL || tagType == JavadocUtil.JavadocTagType.INLINE;\n-        if (isInlineTags) {\n-            tags.addAll(InlineTagUtil.extractInlineTags(textBlock.getText()));\n-        }\n-        final List<JavadocTag> validTags = new ArrayList<JavadocTag>();\n-        final List<InvalidJavadocTag> invalidTags = new ArrayList<InvalidJavadocTag>();\n-        for (final TagInfo tag : tags) {\n-            final int col = tag.getPosition().getColumn();\n-            final int line = textBlock.getStartLineNo() + tag.getPosition().getLine() - 1;\n-            if (JavadocTagInfo.isValidName(tag.getName())) {\n-                validTags.add(new JavadocTag(line, col, tag.getName(), tag.getValue()));\n+    public static JavadocTags getJavadocTags(final TextBlock textBlock, final JavadocUtil.JavadocTagType javadocTagType) {\n+        final ArrayList list = new ArrayList();\n+        if (javadocTagType == JavadocUtil.JavadocTagType.ALL || javadocTagType == JavadocUtil.JavadocTagType.BLOCK) {\n+            list.addAll(BlockTagUtil.extractBlockTags(textBlock.getText()));\n+        }\n+        if (javadocTagType == JavadocUtil.JavadocTagType.ALL || javadocTagType == JavadocUtil.JavadocTagType.INLINE) {\n+            list.addAll(InlineTagUtil.extractInlineTags(textBlock.getText()));\n+        }\n+        final ArrayList list2 = new ArrayList();\n+        final ArrayList list3 = new ArrayList();\n+        for (final TagInfo tagInfo : list) {\n+            final int column = tagInfo.getPosition().getColumn();\n+            final int n = textBlock.getStartLineNo() + tagInfo.getPosition().getLine() - 1;\n+            if (JavadocTagInfo.isValidName(tagInfo.getName())) {\n+                list2.add(new JavadocTag(n, column, tagInfo.getName(), tagInfo.getValue()));\n             }\n             else {\n-                invalidTags.add(new InvalidJavadocTag(line, col, tag.getName()));\n+                list3.add(new InvalidJavadocTag(n, column, tagInfo.getName()));\n             }\n         }\n-        return new JavadocTags((Collection)validTags, (Collection)invalidTags);\n+        return new JavadocTags((Collection)list2, (Collection)list3);\n     }\n     \n-    public static boolean isJavadocComment(final String commentContent) {\n-        boolean result = false;\n-        if (!commentContent.isEmpty()) {\n-            final char docCommentIdentifier = commentContent.charAt(0);\n-            result = (docCommentIdentifier == '*');\n+    public static boolean isJavadocComment(final String s) {\n+        boolean b = false;\n+        if (!s.isEmpty()) {\n+            b = (s.charAt(0) == '*');\n         }\n-        return result;\n+        return b;\n     }\n     \n-    public static boolean isJavadocComment(final DetailAST blockCommentBegin) {\n-        final String commentContent = getBlockCommentContent(blockCommentBegin);\n-        return isJavadocComment(commentContent) && isCorrectJavadocPosition(blockCommentBegin);\n+    public static boolean isJavadocComment(final DetailAST detailAST) {\n+        return isJavadocComment(getBlockCommentContent(detailAST)) && isCorrectJavadocPosition(detailAST);\n     }\n     \n-    public static String getBlockCommentContent(final DetailAST blockCommentBegin) {\n-        final DetailAST commentContent = blockCommentBegin.getFirstChild();\n-        return commentContent.getText();\n+    public static String getBlockCommentContent(final DetailAST detailAST) {\n+        return detailAST.getFirstChild().getText();\n     }\n     \n-    public static String getJavadocCommentContent(final DetailAST javadocCommentBegin) {\n-        final DetailAST commentContent = javadocCommentBegin.getFirstChild();\n-        return commentContent.getText().substring(1);\n+    public static String getJavadocCommentContent(final DetailAST detailAST) {\n+        return detailAST.getFirstChild().getText().substring(1);\n     }\n     \n-    public static DetailNode findFirstToken(final DetailNode detailNode, final int type) {\n-        DetailNode returnValue = null;\n-        for (DetailNode node = getFirstChild(detailNode); node != null; node = getNextSibling(node)) {\n-            if (node.getType() == type) {\n-                returnValue = node;\n+    public static DetailNode findFirstToken(final DetailNode detailNode, final int n) {\n+        DetailNode detailNode2 = null;\n+        for (DetailNode detailNode3 = getFirstChild(detailNode); detailNode3 != null; detailNode3 = getNextSibling(detailNode3)) {\n+            if (detailNode3.getType() == n) {\n+                detailNode2 = detailNode3;\n                 break;\n             }\n         }\n-        return returnValue;\n+        return detailNode2;\n     }\n     \n-    public static DetailNode getFirstChild(final DetailNode node) {\n-        DetailNode resultNode = null;\n-        if (node.getChildren().length > 0) {\n-            resultNode = node.getChildren()[0];\n+    public static DetailNode getFirstChild(final DetailNode detailNode) {\n+        DetailNode detailNode2 = null;\n+        if (detailNode.getChildren().length > 0) {\n+            detailNode2 = detailNode.getChildren()[0];\n         }\n-        return resultNode;\n+        return detailNode2;\n     }\n     \n-    public static DetailNode getNextSibling(final DetailNode node) {\n-        DetailNode nextSibling = null;\n-        final DetailNode parent = node.getParent();\n+    public static DetailNode getNextSibling(final DetailNode detailNode) {\n+        DetailNode detailNode2 = null;\n+        final DetailNode parent = detailNode.getParent();\n         if (parent != null) {\n-            final int nextSiblingIndex = node.getIndex() + 1;\n+            final int n = detailNode.getIndex() + 1;\n             final DetailNode[] children = parent.getChildren();\n-            if (nextSiblingIndex <= children.length - 1) {\n-                nextSibling = children[nextSiblingIndex];\n+            if (n <= children.length - 1) {\n+                detailNode2 = children[n];\n             }\n         }\n-        return nextSibling;\n+        return detailNode2;\n     }\n     \n-    public static DetailNode getNextSibling(final DetailNode node, final int tokenType) {\n-        DetailNode nextSibling;\n-        for (nextSibling = getNextSibling(node); nextSibling != null && nextSibling.getType() != tokenType; nextSibling = getNextSibling(nextSibling)) {}\n-        return nextSibling;\n+    public static DetailNode getNextSibling(final DetailNode detailNode, final int n) {\n+        DetailNode detailNode2;\n+        for (detailNode2 = getNextSibling(detailNode); detailNode2 != null && detailNode2.getType() != n; detailNode2 = getNextSibling(detailNode2)) {}\n+        return detailNode2;\n     }\n     \n-    public static DetailNode getPreviousSibling(final DetailNode node) {\n-        DetailNode previousSibling = null;\n-        final int previousSiblingIndex = node.getIndex() - 1;\n-        if (previousSiblingIndex >= 0) {\n-            final DetailNode parent = node.getParent();\n-            final DetailNode[] children = parent.getChildren();\n-            previousSibling = children[previousSiblingIndex];\n+    public static DetailNode getPreviousSibling(final DetailNode detailNode) {\n+        DetailNode detailNode2 = null;\n+        final int n = detailNode.getIndex() - 1;\n+        if (n >= 0) {\n+            detailNode2 = detailNode.getParent().getChildren()[n];\n         }\n-        return previousSibling;\n+        return detailNode2;\n     }\n     \n-    public static String getTokenName(final int id) {\n-        final String name = (String)JavadocUtil.TOKEN_VALUE_TO_NAME.get(Integer.valueOf(id));\n-        if (name == null) {\n-            throw new IllegalArgumentException(\"Unknown javadoc token id. Given id: \" + id);\n+    public static String getTokenName(final int i) {\n+        final String s = (String)JavadocUtil.TOKEN_VALUE_TO_NAME.get(Integer.valueOf(i));\n+        if (s == null) {\n+            throw new IllegalArgumentException(\"Unknown javadoc token id. Given id: \" + i);\n         }\n-        return name;\n+        return s;\n     }\n     \n-    public static int getTokenId(final String name) {\n-        final Integer id = Integer.valueOf(JavadocUtil.TOKEN_NAME_TO_VALUE.get((Object)name));\n-        if (id == null) {\n-            throw new IllegalArgumentException(\"Unknown javadoc token name. Given name \" + name);\n+    public static int getTokenId(final String s) {\n+        final Integer n = Integer.valueOf(JavadocUtil.TOKEN_NAME_TO_VALUE.get((Object)s));\n+        if (n == null) {\n+            throw new IllegalArgumentException(\"Unknown javadoc token name. Given name \" + s);\n         }\n-        return id;\n+        return n;\n     }\n     \n-    public static String getTagName(final DetailNode javadocTagSection) {\n-        String javadocTagName;\n-        if (javadocTagSection.getType() == 10072) {\n-            javadocTagName = getNextSibling(getFirstChild(javadocTagSection)).getText();\n+    public static String getTagName(final DetailNode detailNode) {\n+        String s;\n+        if (detailNode.getType() == 10072) {\n+            s = getNextSibling(getFirstChild(detailNode)).getText();\n         }\n         else {\n-            javadocTagName = getFirstChild(javadocTagSection).getText();\n+            s = getFirstChild(detailNode).getText();\n         }\n-        return javadocTagName;\n+        return s;\n     }\n     \n-    public static String escapeAllControlChars(final String text) {\n-        final String textWithoutNewlines = JavadocUtil.NEWLINE.matcher(text).replaceAll(\"\\\\\\\\n\");\n-        final String textWithoutReturns = JavadocUtil.RETURN.matcher(textWithoutNewlines).replaceAll(\"\\\\\\\\r\");\n-        return JavadocUtil.TAB.matcher(textWithoutReturns).replaceAll(\"\\\\\\\\t\");\n+    public static String escapeAllControlChars(final String input) {\n+        return JavadocUtil.TAB.matcher(JavadocUtil.RETURN.matcher(JavadocUtil.NEWLINE.matcher(input).replaceAll(\"\\\\\\\\n\")).replaceAll(\"\\\\\\\\r\")).replaceAll(\"\\\\\\\\t\");\n     }\n     \n-    public static boolean isCorrectJavadocPosition(final DetailAST blockComment) {\n-        DetailAST sibling = blockComment.getNextSibling();\n-        while (sibling != null) {\n-            if (sibling.getType() == 145) {\n-                if (isJavadocComment(getBlockCommentContent(sibling))) {\n+    public static boolean isCorrectJavadocPosition(final DetailAST detailAST) {\n+        DetailAST detailAST2 = detailAST.getNextSibling();\n+        while (detailAST2 != null) {\n+            if (detailAST2.getType() == 145) {\n+                if (isJavadocComment(getBlockCommentContent(detailAST2))) {\n                     break;\n                 }\n-                sibling = sibling.getNextSibling();\n+                detailAST2 = detailAST2.getNextSibling();\n             }\n-            else if (sibling.getType() == 144) {\n-                sibling = sibling.getNextSibling();\n+            else if (detailAST2.getType() == 144) {\n+                detailAST2 = detailAST2.getNextSibling();\n             }\n             else {\n-                sibling = null;\n+                detailAST2 = null;\n             }\n         }\n-        return sibling == null && (BlockCommentPosition.isOnType(blockComment) || BlockCommentPosition.isOnMember(blockComment) || BlockCommentPosition.isOnPackage(blockComment));\n+        return detailAST2 == null && (BlockCommentPosition.isOnType(detailAST) || BlockCommentPosition.isOnMember(detailAST) || BlockCommentPosition.isOnPackage(detailAST));\n     }\n     \n     static {\n         NEWLINE = Pattern.compile(\"\\n\");\n         RETURN = Pattern.compile(\"\\r\");\n         TAB = Pattern.compile(\"\\t\");\n         TOKEN_NAME_TO_VALUE = TokenUtil.nameToValueMapFromPublicIntFields((Class)JavadocTokenTypes.class);\n"}]}
