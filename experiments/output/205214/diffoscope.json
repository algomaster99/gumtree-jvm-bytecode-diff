{"diffoscope-json-version": 1, "source1": "first/OverrideCombiner.class", "source2": "second/OverrideCombiner.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,45 +1,45 @@\n \n package org.apache.commons.configuration2.tree;\n \n import java.util.Iterator;\n \n public class OverrideCombiner extends NodeCombiner\n {\n-    public ImmutableNode combine(final ImmutableNode node1, final ImmutableNode node2) {\n-        final ImmutableNode.Builder result = new ImmutableNode.Builder();\n-        result.name(node1.getNodeName());\n-        for (final ImmutableNode child : node1.getChildren()) {\n-            final ImmutableNode child2 = this.canCombine(node1, node2, child);\n-            if (child2 != null) {\n-                result.addChild(this.combine(child, child2));\n+    public ImmutableNode combine(final ImmutableNode immutableNode, final ImmutableNode immutableNode2) {\n+        final ImmutableNode.Builder builder = new ImmutableNode.Builder();\n+        builder.name(immutableNode.getNodeName());\n+        for (final ImmutableNode immutableNode3 : immutableNode.getChildren()) {\n+            final ImmutableNode canCombine = this.canCombine(immutableNode, immutableNode2, immutableNode3);\n+            if (canCombine != null) {\n+                builder.addChild(this.combine(immutableNode3, canCombine));\n             }\n             else {\n-                result.addChild(child);\n+                builder.addChild(immutableNode3);\n             }\n         }\n-        for (final ImmutableNode child : node2.getChildren()) {\n-            if (OverrideCombiner.HANDLER.getChildrenCount((Object)node1, child.getNodeName()) < 1) {\n-                result.addChild(child);\n+        for (final ImmutableNode immutableNode4 : immutableNode2.getChildren()) {\n+            if (OverrideCombiner.HANDLER.getChildrenCount((Object)immutableNode, immutableNode4.getNodeName()) < 1) {\n+                builder.addChild(immutableNode4);\n             }\n         }\n-        this.addAttributes(result, node1, node2);\n-        result.value((node1.getValue() != null) ? node1.getValue() : node2.getValue());\n-        return result.create();\n+        this.addAttributes(builder, immutableNode, immutableNode2);\n+        builder.value((immutableNode.getValue() != null) ? immutableNode.getValue() : immutableNode2.getValue());\n+        return builder.create();\n     }\n     \n-    protected void addAttributes(final ImmutableNode.Builder result, final ImmutableNode node1, final ImmutableNode node2) {\n-        result.addAttributes(node1.getAttributes());\n-        for (final String attr : node2.getAttributes().keySet()) {\n-            if (!node1.getAttributes().containsKey(attr)) {\n-                result.addAttribute(attr, OverrideCombiner.HANDLER.getAttributeValue((Object)node2, attr));\n+    protected void addAttributes(final ImmutableNode.Builder builder, final ImmutableNode immutableNode, final ImmutableNode immutableNode2) {\n+        builder.addAttributes(immutableNode.getAttributes());\n+        for (final String s : immutableNode2.getAttributes().keySet()) {\n+            if (!immutableNode.getAttributes().containsKey(s)) {\n+                builder.addAttribute(s, OverrideCombiner.HANDLER.getAttributeValue((Object)immutableNode2, s));\n             }\n         }\n     }\n     \n-    protected ImmutableNode canCombine(final ImmutableNode node1, final ImmutableNode node2, final ImmutableNode child) {\n-        if (OverrideCombiner.HANDLER.getChildrenCount((Object)node2, child.getNodeName()) == 1 && OverrideCombiner.HANDLER.getChildrenCount((Object)node1, child.getNodeName()) == 1 && !this.isListNode(child)) {\n-            return OverrideCombiner.HANDLER.getChildren((Object)node2, child.getNodeName()).get(0);\n+    protected ImmutableNode canCombine(final ImmutableNode immutableNode, final ImmutableNode immutableNode2, final ImmutableNode immutableNode3) {\n+        if (OverrideCombiner.HANDLER.getChildrenCount((Object)immutableNode2, immutableNode3.getNodeName()) == 1 && OverrideCombiner.HANDLER.getChildrenCount((Object)immutableNode, immutableNode3.getNodeName()) == 1 && !this.isListNode(immutableNode3)) {\n+            return OverrideCombiner.HANDLER.getChildren((Object)immutableNode2, immutableNode3.getNodeName()).get(0);\n         }\n         return null;\n     }\n }\n"}]}
