{"diffoscope-json-version": 1, "source1": "first/UncheckedBufferedReader.class", "source2": "second/UncheckedBufferedReader.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -16,55 +16,55 @@\n     \n     private UncheckedBufferedReader(final Reader reader, final int bufferSize) {\n         super(reader, bufferSize);\n     }\n     \n     @Override\n     public void close() throws UncheckedIOException {\n-        Uncheck.run(() -> super.close());\n+        Uncheck.run(() -> uncheckedBufferedReader.close());\n     }\n     \n     @Override\n     public void mark(final int readAheadLimit) throws UncheckedIOException {\n-        Uncheck.accept(x$0 -> super.mark(x$0), (Object)Integer.valueOf(readAheadLimit));\n+        Uncheck.accept(readAheadLimit -> uncheckedBufferedReader.mark(readAheadLimit), (Object)Integer.valueOf(readAheadLimit));\n     }\n     \n     @Override\n     public int read() throws UncheckedIOException {\n-        return (int)Uncheck.get(() -> Integer.valueOf(super.read()));\n+        return (int)Uncheck.get(() -> uncheckedBufferedReader.read());\n     }\n     \n     @Override\n     public int read(final char[] cbuf) throws UncheckedIOException {\n-        return (int)Uncheck.apply(x$0 -> Integer.valueOf(super.read(x$0)), (Object)cbuf);\n+        return (int)Uncheck.apply(cbuf -> uncheckedBufferedReader.read(cbuf), (Object)cbuf);\n     }\n     \n     @Override\n     public int read(final char[] cbuf, final int off, final int len) throws UncheckedIOException {\n-        return (int)Uncheck.apply((x$0, x$1, x$2) -> Integer.valueOf(super.read(x$0, x$1, x$2)), (Object)cbuf, (Object)Integer.valueOf(off), (Object)Integer.valueOf(len));\n+        return (int)Uncheck.apply((cbuf, off, len) -> uncheckedBufferedReader.read(cbuf, off, len), (Object)cbuf, (Object)Integer.valueOf(off), (Object)Integer.valueOf(len));\n     }\n     \n     @Override\n     public int read(final CharBuffer target) throws UncheckedIOException {\n-        return (int)Uncheck.apply(x$0 -> Integer.valueOf(super.read(x$0)), (Object)target);\n+        return (int)Uncheck.apply(target -> uncheckedBufferedReader.read(target), (Object)target);\n     }\n     \n     @Override\n     public String readLine() throws UncheckedIOException {\n-        return (String)Uncheck.get(() -> super.readLine());\n+        return (String)Uncheck.get(() -> uncheckedBufferedReader.readLine());\n     }\n     \n     @Override\n     public boolean ready() throws UncheckedIOException {\n-        return (boolean)Uncheck.get(() -> Boolean.valueOf(super.ready()));\n+        return (boolean)Uncheck.get(() -> uncheckedBufferedReader.ready());\n     }\n     \n     @Override\n     public void reset() throws UncheckedIOException {\n-        Uncheck.run(() -> super.reset());\n+        Uncheck.run(() -> uncheckedBufferedReader.reset());\n     }\n     \n     @Override\n     public long skip(final long n) throws UncheckedIOException {\n-        return (long)Uncheck.apply(x$0 -> Long.valueOf(super.skip(x$0)), (Object)Long.valueOf(n));\n+        return (long)Uncheck.apply(n -> uncheckedBufferedReader.skip(n), (Object)Long.valueOf(n));\n     }\n }\n"}]}
