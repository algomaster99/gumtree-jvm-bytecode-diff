{"diffoscope-json-version": 1, "source1": "first/ThreadMonitor.class", "source2": "second/ThreadMonitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -4,27 +4,26 @@\n import java.time.Duration;\n \n class ThreadMonitor implements Runnable\n {\n     private final Thread thread;\n     private final Duration timeout;\n     \n-    static Thread start(final Duration timeout) {\n-        return start(Thread.currentThread(), timeout);\n+    static Thread start(final Duration duration) {\n+        return start(Thread.currentThread(), duration);\n     }\n     \n-    static Thread start(final Thread thread, final Duration timeout) {\n-        if (timeout.isZero() || timeout.isNegative()) {\n+    static Thread start(final Thread thread, final Duration duration) {\n+        if (duration.isZero() || duration.isNegative()) {\n             return null;\n         }\n-        final ThreadMonitor timout = new ThreadMonitor(thread, timeout);\n-        final Thread monitor = new Thread(timout, ThreadMonitor.class.getSimpleName());\n-        monitor.setDaemon(true);\n-        monitor.start();\n-        return monitor;\n+        final Thread thread2 = new Thread(new ThreadMonitor(thread, duration), ThreadMonitor.class.getSimpleName());\n+        thread2.setDaemon(true);\n+        thread2.start();\n+        return thread2;\n     }\n     \n     static void stop(final Thread thread) {\n         if (thread != null) {\n             thread.interrupt();\n         }\n     }\n@@ -41,15 +40,15 @@\n             this.thread.interrupt();\n         }\n         catch (final InterruptedException ex) {}\n     }\n     \n     private static void sleep(final Duration duration) throws InterruptedException {\n         final long millis = duration.toMillis();\n-        final long finishAtMillis = System.currentTimeMillis() + millis;\n-        long remainingMillis = millis;\n+        final long n = System.currentTimeMillis() + millis;\n+        long millis2 = millis;\n         do {\n-            Thread.sleep(remainingMillis);\n-            remainingMillis = finishAtMillis - System.currentTimeMillis();\n-        } while (remainingMillis > 0L);\n+            Thread.sleep(millis2);\n+            millis2 = n - System.currentTimeMillis();\n+        } while (millis2 > 0L);\n     }\n }\n"}]}
