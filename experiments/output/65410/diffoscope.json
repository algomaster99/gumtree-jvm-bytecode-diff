{"diffoscope-json-version": 1, "source1": "first/Expander.class", "source2": "second/Expander.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,14 +1,13 @@\n \n package org.apache.commons.compress.archivers.examples;\n \n import org.apache.commons.compress.utils.IOUtils;\n import java.io.OutputStream;\n import org.apache.commons.compress.archivers.ArchiveEntry;\n-import java.util.Objects;\n import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n import java.util.Enumeration;\n import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n import java.util.Iterator;\n import org.apache.commons.compress.archivers.sevenz.SevenZFile;\n import org.apache.commons.compress.archivers.zip.ZipFile;\n import org.apache.commons.compress.archivers.tar.TarFile;\n@@ -28,189 +27,278 @@\n import java.nio.file.OpenOption;\n import java.io.File;\n \n public class Expander\n {\n     public void expand(final File archive, final File targetDirectory) throws IOException, ArchiveException {\n         String format = null;\n-        final InputStream i = new BufferedInputStream(Files.newInputStream(archive.toPath(), new OpenOption[0]));\n-        Throwable x0 = null;\n+        Throwable t = null;\n         try {\n-            format = ArchiveStreamFactory.detect(i);\n-        }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n+            final InputStream i = new BufferedInputStream(Files.newInputStream(archive.toPath(), new OpenOption[0]));\n+            try {\n+                format = ArchiveStreamFactory.detect(i);\n+            }\n+            finally {\n+                if (i != null) {\n+                    i.close();\n+                }\n+            }\n         }\n         finally {\n-            $closeResource(x0, i);\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n         this.expand(format, archive, targetDirectory);\n     }\n     \n     public void expand(final String format, final File archive, final File targetDirectory) throws IOException, ArchiveException {\n         if (this.prefersSeekableByteChannel(format)) {\n-            final SeekableByteChannel c = FileChannel.open(archive.toPath(), StandardOpenOption.READ);\n-            Throwable x0 = null;\n+            Throwable t = null;\n             try {\n-                this.expand(format, c, targetDirectory, CloseableConsumer.CLOSING_CONSUMER);\n-            }\n-            catch (final Throwable t) {\n-                x0 = t;\n-                throw t;\n+                final SeekableByteChannel c = FileChannel.open(archive.toPath(), StandardOpenOption.READ);\n+                try {\n+                    this.expand(format, c, targetDirectory, CloseableConsumer.CLOSING_CONSUMER);\n+                }\n+                finally {\n+                    if (c != null) {\n+                        c.close();\n+                    }\n+                }\n             }\n             finally {\n-                if (c != null) {\n-                    $closeResource(x0, c);\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n                 }\n             }\n             return;\n         }\n-        final InputStream i = new BufferedInputStream(Files.newInputStream(archive.toPath(), new OpenOption[0]));\n-        Throwable x2 = null;\n+        Throwable t2 = null;\n         try {\n-            this.expand(format, i, targetDirectory, CloseableConsumer.CLOSING_CONSUMER);\n-        }\n-        catch (final Throwable t2) {\n-            x2 = t2;\n-            throw t2;\n+            final InputStream i = new BufferedInputStream(Files.newInputStream(archive.toPath(), new OpenOption[0]));\n+            try {\n+                this.expand(format, i, targetDirectory, CloseableConsumer.CLOSING_CONSUMER);\n+            }\n+            finally {\n+                if (i != null) {\n+                    i.close();\n+                }\n+            }\n         }\n         finally {\n-            $closeResource(x2, i);\n+            if (t2 == null) {\n+                final Throwable exception2;\n+                t2 = exception2;\n+            }\n+            else {\n+                final Throwable exception2;\n+                if (t2 != exception2) {\n+                    t2.addSuppressed(exception2);\n+                }\n+            }\n         }\n     }\n     \n     @Deprecated\n     public void expand(final InputStream archive, final File targetDirectory) throws IOException, ArchiveException {\n         this.expand(archive, targetDirectory, CloseableConsumer.NULL_CONSUMER);\n     }\n     \n     public void expand(final InputStream archive, final File targetDirectory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);\n-        Throwable x0 = null;\n+        Throwable t = null;\n         try {\n-            this.expand((ArchiveInputStream)c.track((Closeable)ArchiveStreamFactory.DEFAULT.createArchiveInputStream(archive)), targetDirectory);\n-        }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n+            final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);\n+            try {\n+                this.expand((ArchiveInputStream)c.track((Closeable)ArchiveStreamFactory.DEFAULT.createArchiveInputStream(archive)), targetDirectory);\n+            }\n+            finally {\n+                if (c != null) {\n+                    c.close();\n+                }\n+            }\n         }\n         finally {\n-            $closeResource(x0, (AutoCloseable)c);\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     @Deprecated\n     public void expand(final String format, final InputStream archive, final File targetDirectory) throws IOException, ArchiveException {\n         this.expand(format, archive, targetDirectory, CloseableConsumer.NULL_CONSUMER);\n     }\n     \n     public void expand(final String format, final InputStream archive, final File targetDirectory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);\n-        Throwable x0 = null;\n+        Throwable t = null;\n         try {\n-            this.expand((ArchiveInputStream)c.track((Closeable)ArchiveStreamFactory.DEFAULT.createArchiveInputStream(format, archive)), targetDirectory);\n-        }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n+            final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);\n+            try {\n+                this.expand((ArchiveInputStream)c.track((Closeable)ArchiveStreamFactory.DEFAULT.createArchiveInputStream(format, archive)), targetDirectory);\n+            }\n+            finally {\n+                if (c != null) {\n+                    c.close();\n+                }\n+            }\n         }\n         finally {\n-            $closeResource(x0, (AutoCloseable)c);\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     @Deprecated\n     public void expand(final String format, final SeekableByteChannel archive, final File targetDirectory) throws IOException, ArchiveException {\n         this.expand(format, archive, targetDirectory, CloseableConsumer.NULL_CONSUMER);\n     }\n     \n     public void expand(final String format, final SeekableByteChannel archive, final File targetDirectory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);\n-        Throwable x0 = null;\n+        Throwable t = null;\n         try {\n-            if (!this.prefersSeekableByteChannel(format)) {\n-                this.expand(format, (InputStream)c.track((Closeable)Channels.newInputStream(archive)), targetDirectory);\n+            final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);\n+            try {\n+                if (!this.prefersSeekableByteChannel(format)) {\n+                    this.expand(format, (InputStream)c.track((Closeable)Channels.newInputStream(archive)), targetDirectory);\n+                }\n+                else if (\"tar\".equalsIgnoreCase(format)) {\n+                    this.expand((TarFile)c.track((Closeable)new TarFile(archive)), targetDirectory);\n+                }\n+                else if (\"zip\".equalsIgnoreCase(format)) {\n+                    this.expand((ZipFile)c.track((Closeable)new ZipFile(archive)), targetDirectory);\n+                }\n+                else {\n+                    if (!\"7z\".equalsIgnoreCase(format)) {\n+                        throw new ArchiveException(\"Don't know how to handle format \" + format);\n+                    }\n+                    this.expand((SevenZFile)c.track((Closeable)new SevenZFile(archive)), targetDirectory);\n+                }\n             }\n-            else if (\"tar\".equalsIgnoreCase(format)) {\n-                this.expand((TarFile)c.track((Closeable)new TarFile(archive)), targetDirectory);\n+            finally {\n+                if (c != null) {\n+                    c.close();\n+                }\n             }\n-            else if (\"zip\".equalsIgnoreCase(format)) {\n-                this.expand((ZipFile)c.track((Closeable)new ZipFile(archive)), targetDirectory);\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n             }\n             else {\n-                if (!\"7z\".equalsIgnoreCase(format)) {\n-                    throw new ArchiveException(\"Don't know how to handle format \" + format);\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n                 }\n-                this.expand((SevenZFile)c.track((Closeable)new SevenZFile(archive)), targetDirectory);\n             }\n         }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n-        }\n-        finally {\n-            $closeResource(x0, (AutoCloseable)c);\n-        }\n     }\n     \n     public void expand(final ArchiveInputStream archive, final File targetDirectory) throws IOException, ArchiveException {\n         this.expand(() -> {\n             ArchiveEntry next;\n             for (next = archive.getNextEntry(); next != null && !archive.canReadEntryData(next); next = archive.getNextEntry()) {}\n             return next;\n         }, (entry, out) -> IOUtils.copy((InputStream)archive, out), targetDirectory);\n     }\n     \n     public void expand(final TarFile archive, final File targetDirectory) throws IOException, ArchiveException {\n         final Iterator<TarArchiveEntry> entryIterator = archive.getEntries().iterator();\n         this.expand(() -> entryIterator.hasNext() ? ((ArchiveEntry)entryIterator.next()) : null, (entry, out) -> {\n-            final InputStream in = archive.getInputStream((TarArchiveEntry)entry);\n-            Throwable x0 = null;\n+            Throwable t = null;\n             try {\n-                IOUtils.copy(in, out);\n-            }\n-            catch (final Throwable t) {\n-                x0 = t;\n-                throw t;\n+                final InputStream in = archive.getInputStream((TarArchiveEntry)entry);\n+                try {\n+                    IOUtils.copy(in, out);\n+                }\n+                finally {\n+                    if (in != null) {\n+                        in.close();\n+                    }\n+                }\n             }\n             finally {\n-                if (in != null) {\n-                    $closeResource(x0, in);\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n                 }\n             }\n         }, targetDirectory);\n     }\n     \n     public void expand(final ZipFile archive, final File targetDirectory) throws IOException, ArchiveException {\n         final Enumeration<ZipArchiveEntry> entries = archive.getEntries();\n         this.expand(() -> {\n             ZipArchiveEntry next;\n             for (next = (entries.hasMoreElements() ? ((ZipArchiveEntry)entries.nextElement()) : null); next != null && !archive.canReadEntryData(next); next = (entries.hasMoreElements() ? ((ZipArchiveEntry)entries.nextElement()) : null)) {}\n             return (ArchiveEntry)next;\n         }, (entry, out) -> {\n-            final InputStream in = archive.getInputStream((ZipArchiveEntry)entry);\n-            Throwable x0 = null;\n+            Throwable t = null;\n             try {\n-                IOUtils.copy(in, out);\n-            }\n-            catch (final Throwable t) {\n-                x0 = t;\n-                throw t;\n+                final InputStream in = archive.getInputStream((ZipArchiveEntry)entry);\n+                try {\n+                    IOUtils.copy(in, out);\n+                }\n+                finally {\n+                    if (in != null) {\n+                        in.close();\n+                    }\n+                }\n             }\n             finally {\n-                if (in != null) {\n-                    $closeResource(x0, in);\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n                 }\n             }\n         }, targetDirectory);\n     }\n     \n     public void expand(final SevenZFile archive, final File targetDirectory) throws IOException, ArchiveException {\n-        Objects.requireNonNull(archive);\n         this.expand(archive::getNextEntry, (entry, out) -> {\n             final byte[] buffer = new byte[8192];\n             int n;\n             while (-1 != (n = archive.read(buffer))) {\n                 out.write(buffer, 0, n);\n             }\n         }, targetDirectory);\n@@ -219,15 +307,15 @@\n     private boolean prefersSeekableByteChannel(final String format) {\n         return \"tar\".equalsIgnoreCase(format) || \"zip\".equalsIgnoreCase(format) || \"7z\".equalsIgnoreCase(format);\n     }\n     \n     private void expand(final Expander.ArchiveEntrySupplier supplier, final Expander.EntryWriter writer, final File targetDirectory) throws IOException {\n         String targetDirPath = targetDirectory.getCanonicalPath();\n         if (!targetDirPath.endsWith(File.separator)) {\n-            targetDirPath += File.separator;\n+            targetDirPath = String.valueOf(targetDirPath) + File.separator;\n         }\n         for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry != null; nextEntry = supplier.getNextReadableEntry()) {\n             final File f = new File(targetDirectory, nextEntry.getName());\n             if (!f.getCanonicalPath().startsWith(targetDirPath)) {\n                 throw new IOException(\"Expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory);\n             }\n             if (nextEntry.isDirectory()) {\n@@ -236,39 +324,35 @@\n                 }\n             }\n             else {\n                 final File parent = f.getParentFile();\n                 if (!parent.isDirectory() && !parent.mkdirs()) {\n                     throw new IOException(\"Failed to create directory \" + parent);\n                 }\n-                final OutputStream o = Files.newOutputStream(f.toPath(), new OpenOption[0]);\n-                Throwable x0 = null;\n+                Throwable t = null;\n                 try {\n-                    writer.writeEntryDataTo(nextEntry, o);\n-                }\n-                catch (final Throwable t) {\n-                    x0 = t;\n-                    throw t;\n+                    final OutputStream o = Files.newOutputStream(f.toPath(), new OpenOption[0]);\n+                    try {\n+                        writer.writeEntryDataTo(nextEntry, o);\n+                    }\n+                    finally {\n+                        if (o != null) {\n+                            o.close();\n+                        }\n+                    }\n                 }\n                 finally {\n-                    if (o != null) {\n-                        $closeResource(x0, o);\n+                    if (t == null) {\n+                        final Throwable exception;\n+                        t = exception;\n+                    }\n+                    else {\n+                        final Throwable exception;\n+                        if (t != exception) {\n+                            t.addSuppressed(exception);\n+                        }\n                     }\n                 }\n             }\n         }\n     }\n-    \n-    private static /* synthetic */ void $closeResource(final Throwable x0, final AutoCloseable x1) {\n-        if (x0 != null) {\n-            try {\n-                x1.close();\n-            }\n-            catch (final Throwable exception) {\n-                x0.addSuppressed(exception);\n-            }\n-        }\n-        else {\n-            x1.close();\n-        }\n-    }\n }\n"}]}
