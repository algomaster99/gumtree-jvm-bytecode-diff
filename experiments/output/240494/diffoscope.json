{"diffoscope-json-version": 1, "source1": "first/PrintCommandListener.class", "source2": "second/PrintCommandListener.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,94 +8,90 @@\n public class PrintCommandListener implements ProtocolCommandListener\n {\n     private final PrintWriter writer;\n     private final boolean nologin;\n     private final char eolMarker;\n     private final boolean directionMarker;\n     \n-    public PrintCommandListener(final PrintStream stream) {\n-        this(new PrintWriter((OutputStream)stream));\n+    public PrintCommandListener(final PrintStream out) {\n+        this(new PrintWriter((OutputStream)out));\n     }\n     \n-    public PrintCommandListener(final PrintStream stream, final boolean suppressLogin) {\n-        this(new PrintWriter((OutputStream)stream), suppressLogin);\n+    public PrintCommandListener(final PrintStream out, final boolean b) {\n+        this(new PrintWriter((OutputStream)out), b);\n     }\n     \n-    public PrintCommandListener(final PrintStream stream, final boolean suppressLogin, final char eolMarker) {\n-        this(new PrintWriter((OutputStream)stream), suppressLogin, eolMarker);\n+    public PrintCommandListener(final PrintStream out, final boolean b, final char c) {\n+        this(new PrintWriter((OutputStream)out), b, c);\n     }\n     \n-    public PrintCommandListener(final PrintStream stream, final boolean suppressLogin, final char eolMarker, final boolean showDirection) {\n-        this(new PrintWriter((OutputStream)stream), suppressLogin, eolMarker, showDirection);\n+    public PrintCommandListener(final PrintStream out, final boolean b, final char c, final boolean b2) {\n+        this(new PrintWriter((OutputStream)out), b, c, b2);\n     }\n     \n-    public PrintCommandListener(final PrintWriter writer) {\n-        this(writer, false);\n+    public PrintCommandListener(final PrintWriter printWriter) {\n+        this(printWriter, false);\n     }\n     \n-    public PrintCommandListener(final PrintWriter writer, final boolean suppressLogin) {\n-        this(writer, suppressLogin, '\\0');\n+    public PrintCommandListener(final PrintWriter printWriter, final boolean b) {\n+        this(printWriter, b, '\\0');\n     }\n     \n-    public PrintCommandListener(final PrintWriter writer, final boolean suppressLogin, final char eolMarker) {\n-        this(writer, suppressLogin, eolMarker, false);\n+    public PrintCommandListener(final PrintWriter printWriter, final boolean b, final char c) {\n+        this(printWriter, b, c, false);\n     }\n     \n-    public PrintCommandListener(final PrintWriter writer, final boolean suppressLogin, final char eolMarker, final boolean showDirection) {\n+    public PrintCommandListener(final PrintWriter writer, final boolean nologin, final char eolMarker, final boolean directionMarker) {\n         this.writer = writer;\n-        this.nologin = suppressLogin;\n+        this.nologin = nologin;\n         this.eolMarker = eolMarker;\n-        this.directionMarker = showDirection;\n+        this.directionMarker = directionMarker;\n     }\n     \n-    public void protocolCommandSent(final ProtocolCommandEvent event) {\n+    public void protocolCommandSent(final ProtocolCommandEvent protocolCommandEvent) {\n         if (this.directionMarker) {\n             this.writer.print(\"> \");\n         }\n         if (this.nologin) {\n-            final String cmd = event.getCommand();\n-            if (\"PASS\".equalsIgnoreCase(cmd) || \"USER\".equalsIgnoreCase(cmd)) {\n-                this.writer.print(cmd);\n+            final String command = protocolCommandEvent.getCommand();\n+            if (\"PASS\".equalsIgnoreCase(command) || \"USER\".equalsIgnoreCase(command)) {\n+                this.writer.print(command);\n+                this.writer.println(\" *******\");\n+            }\n+            else if (\"LOGIN\".equalsIgnoreCase(command)) {\n+                final String message = protocolCommandEvent.getMessage();\n+                this.writer.print(message.substring(0, message.indexOf(\"LOGIN\") + \"LOGIN\".length()));\n                 this.writer.println(\" *******\");\n             }\n             else {\n-                final String IMAP_LOGIN = \"LOGIN\";\n-                if (\"LOGIN\".equalsIgnoreCase(cmd)) {\n-                    String msg = event.getMessage();\n-                    msg = msg.substring(0, msg.indexOf(\"LOGIN\") + \"LOGIN\".length());\n-                    this.writer.print(msg);\n-                    this.writer.println(\" *******\");\n-                }\n-                else {\n-                    this.writer.print(this.getPrintableString(event.getMessage()));\n-                }\n+                this.writer.print(this.getPrintableString(protocolCommandEvent.getMessage()));\n             }\n         }\n         else {\n-            this.writer.print(this.getPrintableString(event.getMessage()));\n+            this.writer.print(this.getPrintableString(protocolCommandEvent.getMessage()));\n         }\n         this.writer.flush();\n     }\n     \n-    private String getPrintableString(final String msg) {\n+    private String getPrintableString(final String s) {\n         if (this.eolMarker == '\\0') {\n-            return msg;\n+            return s;\n         }\n-        final int pos = msg.indexOf(\"\\r\\n\");\n-        if (pos > 0) {\n+        final int index = s.indexOf(\"\\r\\n\");\n+        if (index > 0) {\n             final StringBuilder sb = new StringBuilder();\n-            sb.append(msg.substring(0, pos));\n+            sb.append(s.substring(0, index));\n             sb.append(this.eolMarker);\n-            sb.append(msg.substring(pos));\n+            sb.append(s.substring(index));\n             return sb.toString();\n         }\n-        return msg;\n+        return s;\n     }\n     \n-    public void protocolReplyReceived(final ProtocolCommandEvent event) {\n+    public void protocolReplyReceived(final ProtocolCommandEvent protocolCommandEvent) {\n         if (this.directionMarker) {\n             this.writer.print(\"< \");\n         }\n-        this.writer.print(event.getMessage());\n+        this.writer.print(protocolCommandEvent.getMessage());\n         this.writer.flush();\n     }\n }\n"}]}
