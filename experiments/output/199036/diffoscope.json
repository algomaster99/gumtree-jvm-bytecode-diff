{"diffoscope-json-version": 1, "source1": "first/InnerClasses.class", "source2": "second/InnerClasses.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,66 +5,68 @@\n import java.io.IOException;\n import java.io.DataInput;\n \n public final class InnerClasses extends Attribute\n {\n     private InnerClass[] innerClasses;\n     \n-    public InnerClasses(final InnerClasses c) {\n-        this(c.getNameIndex(), c.getLength(), c.getInnerClasses(), c.getConstantPool());\n+    public InnerClasses(final InnerClasses innerClasses) {\n+        this(innerClasses.getNameIndex(), innerClasses.getLength(), innerClasses.getInnerClasses(), innerClasses.getConstantPool());\n     }\n     \n-    public InnerClasses(final int name_index, final int length, final InnerClass[] innerClasses, final ConstantPool constant_pool) {\n-        super((byte)6, name_index, length, constant_pool);\n-        this.innerClasses = ((innerClasses != null) ? innerClasses : new InnerClass[0]);\n+    public InnerClasses(final int n, final int n2, final InnerClass[] array, final ConstantPool constantPool) {\n+        super((byte)6, n, n2, constantPool);\n+        this.innerClasses = ((array != null) ? array : new InnerClass[0]);\n     }\n     \n-    InnerClasses(final int name_index, final int length, final DataInput input, final ConstantPool constant_pool) throws IOException {\n-        this(name_index, length, (InnerClass[])null, constant_pool);\n-        final int number_of_classes = input.readUnsignedShort();\n-        this.innerClasses = new InnerClass[number_of_classes];\n-        for (int i = 0; i < number_of_classes; ++i) {\n-            this.innerClasses[i] = new InnerClass(input);\n+    InnerClasses(final int n, final int n2, final DataInput dataInput, final ConstantPool constantPool) throws IOException {\n+        this(n, n2, (InnerClass[])null, constantPool);\n+        final int unsignedShort = dataInput.readUnsignedShort();\n+        this.innerClasses = new InnerClass[unsignedShort];\n+        for (int i = 0; i < unsignedShort; ++i) {\n+            this.innerClasses[i] = new InnerClass(dataInput);\n         }\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitInnerClasses(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitInnerClasses(this);\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        super.dump(file);\n-        file.writeShort(this.innerClasses.length);\n-        for (final InnerClass inner_class : this.innerClasses) {\n-            inner_class.dump(file);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        super.dump(dataOutputStream);\n+        dataOutputStream.writeShort(this.innerClasses.length);\n+        final InnerClass[] innerClasses = this.innerClasses;\n+        for (int length = innerClasses.length, i = 0; i < length; ++i) {\n+            innerClasses[i].dump(dataOutputStream);\n         }\n     }\n     \n     public InnerClass[] getInnerClasses() {\n         return this.innerClasses;\n     }\n     \n-    public void setInnerClasses(final InnerClass[] innerClasses) {\n-        this.innerClasses = ((innerClasses != null) ? innerClasses : new InnerClass[0]);\n+    public void setInnerClasses(final InnerClass[] array) {\n+        this.innerClasses = ((array != null) ? array : new InnerClass[0]);\n     }\n     \n     public String toString() {\n-        final StringBuilder buf = new StringBuilder();\n-        buf.append(\"InnerClasses(\");\n-        buf.append(this.innerClasses.length);\n-        buf.append(\"):\\n\");\n-        for (final InnerClass inner_class : this.innerClasses) {\n-            buf.append(inner_class.toString(super.getConstantPool())).append(\"\\n\");\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"InnerClasses(\");\n+        sb.append(this.innerClasses.length);\n+        sb.append(\"):\\n\");\n+        final InnerClass[] innerClasses = this.innerClasses;\n+        for (int length = innerClasses.length, i = 0; i < length; ++i) {\n+            sb.append(innerClasses[i].toString(super.getConstantPool())).append(\"\\n\");\n         }\n-        return buf.substring();\n+        return sb.substring();\n     }\n     \n-    public Attribute copy(final ConstantPool _constant_pool) {\n-        final InnerClasses c = (InnerClasses)this.clone();\n-        c.innerClasses = new InnerClass[this.innerClasses.length];\n+    public Attribute copy(final ConstantPool constantPool) {\n+        final InnerClasses innerClasses = (InnerClasses)this.clone();\n+        innerClasses.innerClasses = new InnerClass[this.innerClasses.length];\n         for (int i = 0; i < this.innerClasses.length; ++i) {\n-            c.innerClasses[i] = this.innerClasses[i].copy();\n+            innerClasses.innerClasses[i] = this.innerClasses[i].copy();\n         }\n-        c.setConstantPool(_constant_pool);\n-        return c;\n+        innerClasses.setConstantPool(constantPool);\n+        return innerClasses;\n     }\n }\n"}]}
