{"diffoscope-json-version": 1, "source1": "first/ArchiveStreamFactory.class", "source2": "second/ArchiveStreamFactory.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -48,14 +48,18 @@\n     public static final String ZIP = \"zip\";\n     public static final String SEVEN_Z = \"7z\";\n     private final String encoding;\n     private volatile String entryEncoding;\n     private SortedMap<String, ArchiveStreamProvider> archiveInputStreamProviders;\n     private SortedMap<String, ArchiveStreamProvider> archiveOutputStreamProviders;\n     \n+    static {\n+        SINGLETON = new ArchiveStreamFactory();\n+    }\n+    \n     private static ArrayList<ArchiveStreamProvider> findArchiveStreamProviders() {\n         return Lists.newArrayList((Iterator)serviceLoaderIterator());\n     }\n     \n     static void putAll(final Set<String> names, final ArchiveStreamProvider provider, final TreeMap<String, ArchiveStreamProvider> map) {\n         for (final String name : names) {\n             map.put(toKey(name), provider);\n@@ -279,18 +283,21 @@\n             TarArchiveInputStream tais = null;\n             try {\n                 tais = new TarArchiveInputStream((InputStream)new ByteArrayInputStream(tarHeader));\n                 if (tais.getNextTarEntry().isCheckSumOK()) {\n                     return \"tar\";\n                 }\n             }\n-            catch (final Exception ex) {}\n+            catch (final Exception ex) {\n+                throw new ArchiveException(\"No Archiver found for the stream signature\");\n+            }\n             finally {\n                 IOUtils.closeQuietly((Closeable)tais);\n             }\n+            IOUtils.closeQuietly((Closeable)tais);\n         }\n         throw new ArchiveException(\"No Archiver found for the stream signature\");\n     }\n     \n     public SortedMap<String, ArchiveStreamProvider> getArchiveInputStreamProviders() {\n         if (this.archiveInputStreamProviders == null) {\n             this.archiveInputStreamProviders = Collections.unmodifiableSortedMap((SortedMap<String, ? extends ArchiveStreamProvider>)findAvailableArchiveInputStreamProviders());\n@@ -308,12 +315,8 @@\n     public Set<String> getInputStreamArchiveNames() {\n         return Sets.newHashSet((Object[])new String[] { \"ar\", \"arj\", \"zip\", \"tar\", \"jar\", \"cpio\", \"dump\", \"7z\" });\n     }\n     \n     public Set<String> getOutputStreamArchiveNames() {\n         return Sets.newHashSet((Object[])new String[] { \"ar\", \"zip\", \"tar\", \"jar\", \"cpio\", \"7z\" });\n     }\n-    \n-    static {\n-        SINGLETON = new ArchiveStreamFactory();\n-    }\n }\n"}]}
