{"diffoscope-json-version": 1, "source1": "first/FileSystem.class", "source2": "second/FileSystem.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -3,30 +3,36 @@\n \n import java.util.Arrays;\n import java.util.Objects;\n import java.util.Locale;\n \n public enum FileSystem\n {\n-    GENERIC(false, false, Integer.MAX_VALUE, Integer.MAX_VALUE, new char[] { '\\0' }, new String[0]), \n-    LINUX(true, true, 255, 4096, new char[] { '\\0', '/' }, new String[0]), \n-    MAC_OSX(true, true, 255, 1024, new char[] { '\\0', '/', ':' }, new String[0]), \n-    WINDOWS(false, true, 255, 32000, new char[] { '\\0', '\\u0001', '\\u0002', '\\u0003', '\\u0004', '\\u0005', '\\u0006', '\\u0007', '\\b', '\\t', '\\n', '\\u000b', '\\f', '\\r', '\\u000e', '\\u000f', '\\u0010', '\\u0011', '\\u0012', '\\u0013', '\\u0014', '\\u0015', '\\u0016', '\\u0017', '\\u0018', '\\u0019', '\\u001a', '\\u001b', '\\u001c', '\\u001d', '\\u001e', '\\u001f', '\\\"', '*', '/', ':', '<', '>', '?', '\\\\', '|' }, new String[] { \"AUX\", \"COM1\", \"COM2\", \"COM3\", \"COM4\", \"COM5\", \"COM6\", \"COM7\", \"COM8\", \"COM9\", \"CON\", \"LPT1\", \"LPT2\", \"LPT3\", \"LPT4\", \"LPT5\", \"LPT6\", \"LPT7\", \"LPT8\", \"LPT9\", \"NUL\", \"PRN\" });\n+    GENERIC(\"GENERIC\", 0, false, false, Integer.MAX_VALUE, Integer.MAX_VALUE, new char[1], new String[0]), \n+    LINUX(\"LINUX\", 1, true, true, 255, 4096, new char[] { '\\0', '/' }, new String[0]), \n+    MAC_OSX(\"MAC_OSX\", 2, true, true, 255, 1024, new char[] { '\\0', '/', ':' }, new String[0]), \n+    WINDOWS(\"WINDOWS\", 3, false, true, 255, 32000, new char[] { '\\0', '\\u0001', '\\u0002', '\\u0003', '\\u0004', '\\u0005', '\\u0006', '\\u0007', '\\b', '\\t', '\\n', '\\u000b', '\\f', '\\r', '\\u000e', '\\u000f', '\\u0010', '\\u0011', '\\u0012', '\\u0013', '\\u0014', '\\u0015', '\\u0016', '\\u0017', '\\u0018', '\\u0019', '\\u001a', '\\u001b', '\\u001c', '\\u001d', '\\u001e', '\\u001f', '\\\"', '*', '/', ':', '<', '>', '?', '\\\\', '|' }, new String[] { \"AUX\", \"COM1\", \"COM2\", \"COM3\", \"COM4\", \"COM5\", \"COM6\", \"COM7\", \"COM8\", \"COM9\", \"CON\", \"LPT1\", \"LPT2\", \"LPT3\", \"LPT4\", \"LPT5\", \"LPT6\", \"LPT7\", \"LPT8\", \"LPT9\", \"NUL\", \"PRN\" });\n     \n     private static final boolean IS_OS_LINUX;\n     private static final boolean IS_OS_MAC;\n     private static final String OS_NAME_WINDOWS_PREFIX = \"Windows\";\n     private static final boolean IS_OS_WINDOWS;\n     private final boolean casePreserving;\n     private final boolean caseSensitive;\n     private final char[] illegalFileNameChars;\n     private final int maxFileNameLength;\n     private final int maxPathLength;\n     private final String[] reservedFileNames;\n     \n+    static {\n+        IS_OS_LINUX = getOsMatchesName(\"Linux\");\n+        IS_OS_MAC = getOsMatchesName(\"Mac\");\n+        IS_OS_WINDOWS = getOsMatchesName(\"Windows\");\n+    }\n+    \n     public static FileSystem getCurrent() {\n         if (FileSystem.IS_OS_LINUX) {\n             return FileSystem.LINUX;\n         }\n         if (FileSystem.IS_OS_MAC) {\n             return FileSystem.MAC_OSX;\n         }\n@@ -50,15 +56,15 @@\n         }\n     }\n     \n     private static boolean isOsNameMatch(final String osName, final String osNamePrefix) {\n         return osName != null && osName.toUpperCase(Locale.ROOT).startsWith(osNamePrefix.toUpperCase(Locale.ROOT));\n     }\n     \n-    private FileSystem(final boolean caseSensitive, final boolean casePreserving, final int maxFileLength, final int maxPathLength, final char[] illegalFileNameChars, final String[] reservedFileNames) {\n+    private FileSystem(final String name, final int ordinal, final boolean caseSensitive, final boolean casePreserving, final int maxFileLength, final int maxPathLength, final char[] illegalFileNameChars, final String[] reservedFileNames) {\n         this.maxFileNameLength = maxFileLength;\n         this.maxPathLength = maxPathLength;\n         this.illegalFileNameChars = Objects.requireNonNull(illegalFileNameChars, \"illegalFileNameChars\");\n         this.reservedFileNames = Objects.requireNonNull(reservedFileNames, \"reservedFileNames\");\n         this.caseSensitive = caseSensitive;\n         this.casePreserving = casePreserving;\n     }\n@@ -121,14 +127,8 @@\n             if (this.isIllegalFileNameChar(charArray[i])) {\n                 charArray[i] = replacement;\n                 changed = true;\n             }\n         }\n         return changed ? String.valueOf(charArray) : truncated;\n     }\n-    \n-    static {\n-        IS_OS_LINUX = getOsMatchesName(\"Linux\");\n-        IS_OS_MAC = getOsMatchesName(\"Mac\");\n-        IS_OS_WINDOWS = getOsMatchesName(\"Windows\");\n-    }\n }\n"}]}
