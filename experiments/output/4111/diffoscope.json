{"diffoscope-json-version": 1, "source1": "first/CSVParser.class", "source2": "second/CSVParser.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,130 +1,130 @@\n-  SHA-256 checksum 763ee61c8dc049cc249b581190cc7a3e57a9e3162073751e519746574143dd81\n+  SHA-256 checksum 03fbd4926df526939e12eabc7c8e85e82195ba31a432a12b0258496ce61fc75c\n   Compiled from \"CSVParser.java\"\n public final class org.apache.commons.csv.CSVParser extends java.lang.Object implements java.lang.Iterable<org.apache.commons.csv.CSVRecord>, java.io.Closeable\n   minor version: 0\n   major version: 51\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n   this_class: #4                          // org/apache/commons/csv/CSVParser\n   super_class: #110                       // java/lang/Object\n   interfaces: 2, fields: 8, methods: 19, attributes: 3\n Constant pool:\n     #1 = String             #139          // file\n-    #2 = Methodref          #223.#224     // org/apache/commons/csv/Assertions.notNull:(Ljava/lang/Object;Ljava/lang/String;)V\n+    #2 = Methodref          #218.#219     // org/apache/commons/csv/Assertions.notNull:(Ljava/lang/Object;Ljava/lang/String;)V\n     #3 = String             #116          // format\n-    #4 = Class              #225          // org/apache/commons/csv/CSVParser\n-    #5 = Class              #226          // java/io/InputStreamReader\n-    #6 = Class              #227          // java/io/FileInputStream\n-    #7 = Methodref          #6.#228       // java/io/FileInputStream.\"<init>\":(Ljava/io/File;)V\n-    #8 = Methodref          #5.#229       // java/io/InputStreamReader.\"<init>\":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n-    #9 = Methodref          #4.#230       // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n+    #4 = Class              #220          // org/apache/commons/csv/CSVParser\n+    #5 = Class              #221          // java/io/InputStreamReader\n+    #6 = Class              #222          // java/io/FileInputStream\n+    #7 = Methodref          #6.#223       // java/io/FileInputStream.\"<init>\":(Ljava/io/File;)V\n+    #8 = Methodref          #5.#224       // java/io/InputStreamReader.\"<init>\":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n+    #9 = Methodref          #4.#225       // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n    #10 = String             #145          // inputStream\n-   #11 = Methodref          #4.#231       // org/apache/commons/csv/CSVParser.parse:(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+   #11 = Methodref          #4.#226       // org/apache/commons/csv/CSVParser.parse:(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n    #12 = String             #148          // path\n-   #13 = Class              #232          // java/nio/file/OpenOption\n-   #14 = Methodref          #233.#234     // java/nio/file/Files.newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n-   #15 = Methodref          #4.#235       // org/apache/commons/csv/CSVParser.parse:(Ljava/io/InputStream;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+   #13 = Class              #227          // java/nio/file/OpenOption\n+   #14 = Methodref          #228.#229     // java/nio/file/Files.newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+   #15 = Methodref          #4.#230       // org/apache/commons/csv/CSVParser.parse:(Ljava/io/InputStream;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n    #16 = String             #154          // string\n-   #17 = Class              #236          // java/io/StringReader\n-   #18 = Methodref          #17.#237      // java/io/StringReader.\"<init>\":(Ljava/lang/String;)V\n+   #17 = Class              #231          // java/io/StringReader\n+   #18 = Methodref          #17.#232      // java/io/StringReader.\"<init>\":(Ljava/lang/String;)V\n    #19 = String             #157          // url\n    #20 = String             #141          // charset\n-   #21 = Methodref          #238.#239     // java/net/URL.openStream:()Ljava/io/InputStream;\n-   #22 = Methodref          #4.#240       // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V\n-   #23 = Methodref          #110.#241     // java/lang/Object.\"<init>\":()V\n-   #24 = Class              #242          // java/util/ArrayList\n-   #25 = Methodref          #24.#241      // java/util/ArrayList.\"<init>\":()V\n-   #26 = Fieldref           #4.#243       // org/apache/commons/csv/CSVParser.recordList:Ljava/util/List;\n-   #27 = Class              #244          // org/apache/commons/csv/Token\n-   #28 = Methodref          #27.#241      // org/apache/commons/csv/Token.\"<init>\":()V\n-   #29 = Fieldref           #4.#245       // org/apache/commons/csv/CSVParser.reusableToken:Lorg/apache/commons/csv/Token;\n+   #21 = Methodref          #233.#234     // java/net/URL.openStream:()Ljava/io/InputStream;\n+   #22 = Methodref          #4.#235       // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V\n+   #23 = Methodref          #110.#236     // java/lang/Object.\"<init>\":()V\n+   #24 = Class              #237          // java/util/ArrayList\n+   #25 = Methodref          #24.#236      // java/util/ArrayList.\"<init>\":()V\n+   #26 = Fieldref           #4.#238       // org/apache/commons/csv/CSVParser.recordList:Ljava/util/List;\n+   #27 = Class              #239          // org/apache/commons/csv/Token\n+   #28 = Methodref          #27.#236      // org/apache/commons/csv/Token.\"<init>\":()V\n+   #29 = Fieldref           #4.#240       // org/apache/commons/csv/CSVParser.reusableToken:Lorg/apache/commons/csv/Token;\n    #30 = String             #151          // reader\n-   #31 = Fieldref           #4.#246       // org/apache/commons/csv/CSVParser.format:Lorg/apache/commons/csv/CSVFormat;\n-   #32 = Class              #247          // org/apache/commons/csv/Lexer\n-   #33 = Class              #248          // org/apache/commons/csv/ExtendedBufferedReader\n-   #34 = Methodref          #33.#249      // org/apache/commons/csv/ExtendedBufferedReader.\"<init>\":(Ljava/io/Reader;)V\n-   #35 = Methodref          #32.#250      // org/apache/commons/csv/Lexer.\"<init>\":(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n-   #36 = Fieldref           #4.#251       // org/apache/commons/csv/CSVParser.lexer:Lorg/apache/commons/csv/Lexer;\n-   #37 = Class              #252          // org/apache/commons/csv/CSVParser$CSVRecordIterator\n-   #38 = Methodref          #37.#253      // org/apache/commons/csv/CSVParser$CSVRecordIterator.\"<init>\":(Lorg/apache/commons/csv/CSVParser;)V\n-   #39 = Fieldref           #4.#254       // org/apache/commons/csv/CSVParser.csvRecordIterator:Lorg/apache/commons/csv/CSVParser$CSVRecordIterator;\n-   #40 = Methodref          #4.#255       // org/apache/commons/csv/CSVParser.initializeHeader:()Ljava/util/Map;\n-   #41 = Fieldref           #4.#256       // org/apache/commons/csv/CSVParser.headerMap:Ljava/util/Map;\n-   #42 = Fieldref           #4.#257       // org/apache/commons/csv/CSVParser.characterOffset:J\n-   #43 = Fieldref           #4.#258       // org/apache/commons/csv/CSVParser.recordNumber:J\n-   #44 = Fieldref           #27.#259      // org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n-   #45 = Methodref          #70.#260      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #46 = Methodref          #261.#262     // org/apache/commons/csv/CSVFormat.getTrim:()Z\n-   #47 = Methodref          #106.#263     // java/lang/String.trim:()Ljava/lang/String;\n-   #48 = Methodref          #106.#264     // java/lang/String.isEmpty:()Z\n-   #49 = Methodref          #261.#265     // org/apache/commons/csv/CSVFormat.getTrailingDelimiter:()Z\n-   #50 = Methodref          #261.#266     // org/apache/commons/csv/CSVFormat.getNullString:()Ljava/lang/String;\n-   #51 = Methodref          #106.#267     // java/lang/String.equals:(Ljava/lang/Object;)Z\n-   #52 = InterfaceMethodref #268.#269     // java/util/List.add:(Ljava/lang/Object;)Z\n-   #53 = Methodref          #32.#270      // org/apache/commons/csv/Lexer.close:()V\n-   #54 = Methodref          #32.#271      // org/apache/commons/csv/Lexer.getCurrentLineNumber:()J\n-   #55 = Methodref          #32.#272      // org/apache/commons/csv/Lexer.getFirstEol:()Ljava/lang/String;\n-   #56 = Class              #273          // java/util/LinkedHashMap\n-   #57 = Methodref          #56.#274      // java/util/LinkedHashMap.\"<init>\":(Ljava/util/Map;)V\n-   #58 = Methodref          #4.#275       // org/apache/commons/csv/CSVParser.nextRecord:()Lorg/apache/commons/csv/CSVRecord;\n-   #59 = Methodref          #261.#276     // org/apache/commons/csv/CSVFormat.getHeader:()[Ljava/lang/String;\n-   #60 = Methodref          #261.#277     // org/apache/commons/csv/CSVFormat.getIgnoreHeaderCase:()Z\n-   #61 = Class              #278          // java/util/TreeMap\n-   #62 = Fieldref           #106.#279     // java/lang/String.CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;\n-   #63 = Methodref          #61.#280      // java/util/TreeMap.\"<init>\":(Ljava/util/Comparator;)V\n-   #64 = Methodref          #56.#241      // java/util/LinkedHashMap.\"<init>\":()V\n-   #65 = Methodref          #104.#281     // org/apache/commons/csv/CSVRecord.values:()[Ljava/lang/String;\n-   #66 = Methodref          #261.#282     // org/apache/commons/csv/CSVFormat.getSkipHeaderRecord:()Z\n-   #67 = InterfaceMethodref #283.#284     // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n-   #68 = Methodref          #261.#285     // org/apache/commons/csv/CSVFormat.getAllowMissingColumnNames:()Z\n-   #69 = Class              #286          // java/lang/IllegalArgumentException\n-   #70 = Class              #287          // java/lang/StringBuilder\n-   #71 = Methodref          #70.#241      // java/lang/StringBuilder.\"<init>\":()V\n-   #72 = String             #288          // The header contains a duplicate name: \\\"\n-   #73 = Methodref          #70.#289      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #74 = String             #290          // \\\" in\n-   #75 = Methodref          #291.#292     // java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;\n-   #76 = Methodref          #69.#237      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #77 = Methodref          #293.#294     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #78 = InterfaceMethodref #283.#295     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #79 = Methodref          #32.#296      // org/apache/commons/csv/Lexer.isClosed:()Z\n-   #80 = InterfaceMethodref #268.#297     // java/util/List.clear:()V\n-   #81 = Methodref          #32.#298      // org/apache/commons/csv/Lexer.getCharacterPosition:()J\n-   #82 = Methodref          #27.#299      // org/apache/commons/csv/Token.reset:()V\n-   #83 = Methodref          #32.#300      // org/apache/commons/csv/Lexer.nextToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n-   #84 = Fieldref           #113.#301     // org/apache/commons/csv/CSVParser$1.$SwitchMap$org$apache$commons$csv$Token$Type:[I\n-   #85 = Fieldref           #27.#302      // org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n-   #86 = Methodref          #303.#304     // org/apache/commons/csv/Token$Type.ordinal:()I\n-   #87 = Methodref          #4.#305       // org/apache/commons/csv/CSVParser.addRecordValue:(Z)V\n-   #88 = Fieldref           #27.#306      // org/apache/commons/csv/Token.isReady:Z\n-   #89 = Class              #307          // java/io/IOException\n-   #90 = String             #308          // (line\n-   #91 = Methodref          #4.#271       // org/apache/commons/csv/CSVParser.getCurrentLineNumber:()J\n-   #92 = Methodref          #70.#309      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #93 = String             #310          // ) invalid parse sequence\n-   #94 = Methodref          #89.#237      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #95 = Class              #311          // org/apache/commons/csv/Constants\n-   #96 = Methodref          #70.#312      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n-   #97 = Methodref          #70.#313      // java/lang/StringBuilder.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n-   #98 = Fieldref           #303.#314     // org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n-   #99 = Class              #315          // java/lang/IllegalStateException\n-  #100 = String             #316          // Unexpected Token type:\n-  #101 = Methodref          #70.#317      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #102 = Methodref          #99.#237      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-  #103 = InterfaceMethodref #268.#264     // java/util/List.isEmpty:()Z\n-  #104 = Class              #318          // org/apache/commons/csv/CSVRecord\n-  #105 = InterfaceMethodref #268.#319     // java/util/List.size:()I\n-  #106 = Class              #320          // java/lang/String\n-  #107 = InterfaceMethodref #268.#321     // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #108 = Class              #203          // \"[Ljava/lang/String;\"\n-  #109 = Methodref          #104.#322     // org/apache/commons/csv/CSVRecord.\"<init>\":([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;JJ)V\n-  #110 = Class              #323          // java/lang/Object\n-  #111 = Class              #324          // java/lang/Iterable\n-  #112 = Class              #325          // java/io/Closeable\n-  #113 = Class              #326          // org/apache/commons/csv/CSVParser$1\n+   #31 = Fieldref           #4.#241       // org/apache/commons/csv/CSVParser.format:Lorg/apache/commons/csv/CSVFormat;\n+   #32 = Class              #242          // org/apache/commons/csv/Lexer\n+   #33 = Class              #243          // org/apache/commons/csv/ExtendedBufferedReader\n+   #34 = Methodref          #33.#244      // org/apache/commons/csv/ExtendedBufferedReader.\"<init>\":(Ljava/io/Reader;)V\n+   #35 = Methodref          #32.#245      // org/apache/commons/csv/Lexer.\"<init>\":(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n+   #36 = Fieldref           #4.#246       // org/apache/commons/csv/CSVParser.lexer:Lorg/apache/commons/csv/Lexer;\n+   #37 = Class              #247          // org/apache/commons/csv/CSVParser$CSVRecordIterator\n+   #38 = Methodref          #37.#248      // org/apache/commons/csv/CSVParser$CSVRecordIterator.\"<init>\":(Lorg/apache/commons/csv/CSVParser;)V\n+   #39 = Fieldref           #4.#249       // org/apache/commons/csv/CSVParser.csvRecordIterator:Lorg/apache/commons/csv/CSVParser$CSVRecordIterator;\n+   #40 = Methodref          #4.#250       // org/apache/commons/csv/CSVParser.initializeHeader:()Ljava/util/Map;\n+   #41 = Fieldref           #4.#251       // org/apache/commons/csv/CSVParser.headerMap:Ljava/util/Map;\n+   #42 = Fieldref           #4.#252       // org/apache/commons/csv/CSVParser.characterOffset:J\n+   #43 = Fieldref           #4.#253       // org/apache/commons/csv/CSVParser.recordNumber:J\n+   #44 = Fieldref           #27.#254      // org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+   #45 = Methodref          #70.#255      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #46 = Methodref          #256.#257     // org/apache/commons/csv/CSVFormat.getTrim:()Z\n+   #47 = Methodref          #106.#258     // java/lang/String.trim:()Ljava/lang/String;\n+   #48 = Methodref          #106.#259     // java/lang/String.isEmpty:()Z\n+   #49 = Methodref          #256.#260     // org/apache/commons/csv/CSVFormat.getTrailingDelimiter:()Z\n+   #50 = Methodref          #256.#261     // org/apache/commons/csv/CSVFormat.getNullString:()Ljava/lang/String;\n+   #51 = Methodref          #106.#262     // java/lang/String.equals:(Ljava/lang/Object;)Z\n+   #52 = InterfaceMethodref #172.#263     // java/util/List.add:(Ljava/lang/Object;)Z\n+   #53 = Methodref          #32.#264      // org/apache/commons/csv/Lexer.close:()V\n+   #54 = Methodref          #32.#265      // org/apache/commons/csv/Lexer.getCurrentLineNumber:()J\n+   #55 = Methodref          #32.#266      // org/apache/commons/csv/Lexer.getFirstEol:()Ljava/lang/String;\n+   #56 = Class              #267          // java/util/LinkedHashMap\n+   #57 = Methodref          #56.#268      // java/util/LinkedHashMap.\"<init>\":(Ljava/util/Map;)V\n+   #58 = Methodref          #4.#269       // org/apache/commons/csv/CSVParser.nextRecord:()Lorg/apache/commons/csv/CSVRecord;\n+   #59 = Methodref          #256.#270     // org/apache/commons/csv/CSVFormat.getHeader:()[Ljava/lang/String;\n+   #60 = Methodref          #256.#271     // org/apache/commons/csv/CSVFormat.getIgnoreHeaderCase:()Z\n+   #61 = Class              #272          // java/util/TreeMap\n+   #62 = Fieldref           #106.#273     // java/lang/String.CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;\n+   #63 = Methodref          #61.#274      // java/util/TreeMap.\"<init>\":(Ljava/util/Comparator;)V\n+   #64 = Methodref          #56.#236      // java/util/LinkedHashMap.\"<init>\":()V\n+   #65 = Methodref          #104.#275     // org/apache/commons/csv/CSVRecord.values:()[Ljava/lang/String;\n+   #66 = Methodref          #256.#276     // org/apache/commons/csv/CSVFormat.getSkipHeaderRecord:()Z\n+   #67 = InterfaceMethodref #202.#277     // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n+   #68 = Methodref          #256.#278     // org/apache/commons/csv/CSVFormat.getAllowMissingColumnNames:()Z\n+   #69 = Class              #279          // java/lang/IllegalArgumentException\n+   #70 = Class              #280          // java/lang/StringBuilder\n+   #71 = Methodref          #70.#236      // java/lang/StringBuilder.\"<init>\":()V\n+   #72 = String             #281          // The header contains a duplicate name: \\\"\n+   #73 = Methodref          #70.#282      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #74 = String             #283          // \\\" in\n+   #75 = Methodref          #284.#285     // java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;\n+   #76 = Methodref          #69.#232      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #77 = Methodref          #286.#287     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+   #78 = InterfaceMethodref #202.#288     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #79 = Methodref          #32.#289      // org/apache/commons/csv/Lexer.isClosed:()Z\n+   #80 = InterfaceMethodref #172.#290     // java/util/List.clear:()V\n+   #81 = Methodref          #32.#291      // org/apache/commons/csv/Lexer.getCharacterPosition:()J\n+   #82 = Methodref          #27.#292      // org/apache/commons/csv/Token.reset:()V\n+   #83 = Methodref          #32.#293      // org/apache/commons/csv/Lexer.nextToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n+   #84 = Fieldref           #113.#294     // org/apache/commons/csv/CSVParser$1.$SwitchMap$org$apache$commons$csv$Token$Type:[I\n+   #85 = Fieldref           #27.#295      // org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+   #86 = Methodref          #296.#297     // org/apache/commons/csv/Token$Type.ordinal:()I\n+   #87 = Methodref          #4.#298       // org/apache/commons/csv/CSVParser.addRecordValue:(Z)V\n+   #88 = Fieldref           #27.#299      // org/apache/commons/csv/Token.isReady:Z\n+   #89 = Class              #300          // java/io/IOException\n+   #90 = String             #301          // (line\n+   #91 = Methodref          #4.#265       // org/apache/commons/csv/CSVParser.getCurrentLineNumber:()J\n+   #92 = Methodref          #70.#302      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+   #93 = String             #303          // ) invalid parse sequence\n+   #94 = Methodref          #89.#232      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #95 = Class              #304          // org/apache/commons/csv/Constants\n+   #96 = Methodref          #70.#305      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+   #97 = Methodref          #70.#306      // java/lang/StringBuilder.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n+   #98 = Fieldref           #296.#307     // org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n+   #99 = Class              #308          // java/lang/IllegalStateException\n+  #100 = String             #309          // Unexpected Token type:\n+  #101 = Methodref          #70.#310      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #102 = Methodref          #99.#232      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+  #103 = InterfaceMethodref #172.#259     // java/util/List.isEmpty:()Z\n+  #104 = Class              #311          // org/apache/commons/csv/CSVRecord\n+  #105 = InterfaceMethodref #172.#312     // java/util/List.size:()I\n+  #106 = Class              #313          // java/lang/String\n+  #107 = InterfaceMethodref #172.#314     // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #108 = Class              #199          // \"[Ljava/lang/String;\"\n+  #109 = Methodref          #104.#315     // org/apache/commons/csv/CSVRecord.\"<init>\":([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;JJ)V\n+  #110 = Class              #316          // java/lang/Object\n+  #111 = Class              #317          // java/lang/Iterable\n+  #112 = Class              #318          // java/io/Closeable\n+  #113 = Class              #319          // org/apache/commons/csv/CSVParser$1\n   #114 = Utf8               InnerClasses\n   #115 = Utf8               CSVRecordIterator\n   #116 = Utf8               format\n   #117 = Utf8               Lorg/apache/commons/csv/CSVFormat;\n   #118 = Utf8               headerMap\n   #119 = Utf8               Ljava/util/Map;\n   #120 = Utf8               Signature\n@@ -175,242 +175,235 @@\n   #165 = Utf8               (Z)V\n   #166 = Utf8               lastRecord\n   #167 = Utf8               Z\n   #168 = Utf8               input\n   #169 = Utf8               inputClean\n   #170 = Utf8               nullString\n   #171 = Utf8               StackMapTable\n-  #172 = Class              #320          // java/lang/String\n-  #173 = Class              #225          // org/apache/commons/csv/CSVParser\n-  #174 = Class              #327          // java/util/List\n-  #175 = Utf8               close\n-  #176 = Utf8               ()V\n-  #177 = Utf8               getCurrentLineNumber\n-  #178 = Utf8               ()J\n-  #179 = Utf8               getFirstEndOfLine\n-  #180 = Utf8               ()Ljava/lang/String;\n-  #181 = Utf8               getHeaderMap\n-  #182 = Utf8               ()Ljava/util/Map;\n-  #183 = Class              #273          // java/util/LinkedHashMap\n-  #184 = Utf8               ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n-  #185 = Utf8               getRecordNumber\n-  #186 = Utf8               getRecords\n-  #187 = Utf8               ()Ljava/util/List;\n-  #188 = Utf8               rec\n-  #189 = Utf8               Lorg/apache/commons/csv/CSVRecord;\n-  #190 = Utf8               records\n-  #191 = Utf8               LocalVariableTypeTable\n-  #192 = Utf8               Ljava/util/List<Lorg/apache/commons/csv/CSVRecord;>;\n-  #193 = Class              #318          // org/apache/commons/csv/CSVRecord\n-  #194 = Utf8               ()Ljava/util/List<Lorg/apache/commons/csv/CSVRecord;>;\n-  #195 = Utf8               initializeHeader\n-  #196 = Utf8               nextRecord\n-  #197 = Utf8               header\n-  #198 = Utf8               containsHeader\n-  #199 = Utf8               emptyHeader\n-  #200 = Utf8               i\n-  #201 = Utf8               I\n-  #202 = Utf8               headerRecord\n-  #203 = Utf8               [Ljava/lang/String;\n-  #204 = Utf8               hdrMap\n-  #205 = Utf8               formatHeader\n-  #206 = Class              #328          // java/util/Map\n-  #207 = Class              #329          // java/util/AbstractMap\n-  #208 = Utf8               isClosed\n-  #209 = Utf8               ()Z\n-  #210 = Utf8               iterator\n-  #211 = Utf8               ()Ljava/util/Iterator;\n-  #212 = Utf8               ()Ljava/util/Iterator<Lorg/apache/commons/csv/CSVRecord;>;\n-  #213 = Utf8               ()Lorg/apache/commons/csv/CSVRecord;\n-  #214 = Utf8               comment\n-  #215 = Utf8               result\n-  #216 = Utf8               sb\n-  #217 = Utf8               Ljava/lang/StringBuilder;\n-  #218 = Utf8               startCharPosition\n-  #219 = Class              #287          // java/lang/StringBuilder\n-  #220 = Utf8               Ljava/lang/Object;Ljava/lang/Iterable<Lorg/apache/commons/csv/CSVRecord;>;Ljava/io/Closeable;\n-  #221 = Utf8               SourceFile\n-  #222 = Utf8               CSVParser.java\n-  #223 = Class              #330          // org/apache/commons/csv/Assertions\n-  #224 = NameAndType        #331:#332     // notNull:(Ljava/lang/Object;Ljava/lang/String;)V\n-  #225 = Utf8               org/apache/commons/csv/CSVParser\n-  #226 = Utf8               java/io/InputStreamReader\n-  #227 = Utf8               java/io/FileInputStream\n-  #228 = NameAndType        #159:#333     // \"<init>\":(Ljava/io/File;)V\n-  #229 = NameAndType        #159:#334     // \"<init>\":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n-  #230 = NameAndType        #159:#160     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n-  #231 = NameAndType        #134:#150     // parse:(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n-  #232 = Utf8               java/nio/file/OpenOption\n-  #233 = Class              #335          // java/nio/file/Files\n-  #234 = NameAndType        #336:#337     // newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n-  #235 = NameAndType        #134:#144     // parse:(Ljava/io/InputStream;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n-  #236 = Utf8               java/io/StringReader\n-  #237 = NameAndType        #159:#338     // \"<init>\":(Ljava/lang/String;)V\n-  #238 = Class              #339          // java/net/URL\n-  #239 = NameAndType        #340:#341     // openStream:()Ljava/io/InputStream;\n-  #240 = NameAndType        #159:#163     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V\n-  #241 = NameAndType        #159:#176     // \"<init>\":()V\n-  #242 = Utf8               java/util/ArrayList\n-  #243 = NameAndType        #126:#127     // recordList:Ljava/util/List;\n-  #244 = Utf8               org/apache/commons/csv/Token\n-  #245 = NameAndType        #132:#133     // reusableToken:Lorg/apache/commons/csv/Token;\n-  #246 = NameAndType        #116:#117     // format:Lorg/apache/commons/csv/CSVFormat;\n-  #247 = Utf8               org/apache/commons/csv/Lexer\n-  #248 = Utf8               org/apache/commons/csv/ExtendedBufferedReader\n-  #249 = NameAndType        #159:#342     // \"<init>\":(Ljava/io/Reader;)V\n-  #250 = NameAndType        #159:#343     // \"<init>\":(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n-  #251 = NameAndType        #122:#123     // lexer:Lorg/apache/commons/csv/Lexer;\n-  #252 = Utf8               org/apache/commons/csv/CSVParser$CSVRecordIterator\n-  #253 = NameAndType        #159:#344     // \"<init>\":(Lorg/apache/commons/csv/CSVParser;)V\n-  #254 = NameAndType        #124:#125     // csvRecordIterator:Lorg/apache/commons/csv/CSVParser$CSVRecordIterator;\n-  #255 = NameAndType        #195:#182     // initializeHeader:()Ljava/util/Map;\n-  #256 = NameAndType        #118:#119     // headerMap:Ljava/util/Map;\n-  #257 = NameAndType        #131:#130     // characterOffset:J\n-  #258 = NameAndType        #129:#130     // recordNumber:J\n-  #259 = NameAndType        #345:#217     // content:Ljava/lang/StringBuilder;\n-  #260 = NameAndType        #346:#180     // toString:()Ljava/lang/String;\n-  #261 = Class              #347          // org/apache/commons/csv/CSVFormat\n-  #262 = NameAndType        #348:#209     // getTrim:()Z\n-  #263 = NameAndType        #349:#180     // trim:()Ljava/lang/String;\n-  #264 = NameAndType        #350:#209     // isEmpty:()Z\n-  #265 = NameAndType        #351:#209     // getTrailingDelimiter:()Z\n-  #266 = NameAndType        #352:#180     // getNullString:()Ljava/lang/String;\n-  #267 = NameAndType        #353:#354     // equals:(Ljava/lang/Object;)Z\n-  #268 = Class              #327          // java/util/List\n-  #269 = NameAndType        #355:#354     // add:(Ljava/lang/Object;)Z\n-  #270 = NameAndType        #175:#176     // close:()V\n-  #271 = NameAndType        #177:#178     // getCurrentLineNumber:()J\n-  #272 = NameAndType        #356:#180     // getFirstEol:()Ljava/lang/String;\n-  #273 = Utf8               java/util/LinkedHashMap\n-  #274 = NameAndType        #159:#357     // \"<init>\":(Ljava/util/Map;)V\n-  #275 = NameAndType        #196:#213     // nextRecord:()Lorg/apache/commons/csv/CSVRecord;\n-  #276 = NameAndType        #358:#359     // getHeader:()[Ljava/lang/String;\n-  #277 = NameAndType        #360:#209     // getIgnoreHeaderCase:()Z\n-  #278 = Utf8               java/util/TreeMap\n-  #279 = NameAndType        #361:#362     // CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;\n-  #280 = NameAndType        #159:#363     // \"<init>\":(Ljava/util/Comparator;)V\n-  #281 = NameAndType        #364:#359     // values:()[Ljava/lang/String;\n-  #282 = NameAndType        #365:#209     // getSkipHeaderRecord:()Z\n-  #283 = Class              #328          // java/util/Map\n-  #284 = NameAndType        #366:#354     // containsKey:(Ljava/lang/Object;)Z\n-  #285 = NameAndType        #367:#209     // getAllowMissingColumnNames:()Z\n-  #286 = Utf8               java/lang/IllegalArgumentException\n-  #287 = Utf8               java/lang/StringBuilder\n-  #288 = Utf8               The header contains a duplicate name: \\\"\n-  #289 = NameAndType        #368:#369     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #290 = Utf8               \\\" in\n-  #291 = Class              #370          // java/util/Arrays\n-  #292 = NameAndType        #346:#371     // toString:([Ljava/lang/Object;)Ljava/lang/String;\n-  #293 = Class              #372          // java/lang/Integer\n-  #294 = NameAndType        #373:#374     // valueOf:(I)Ljava/lang/Integer;\n-  #295 = NameAndType        #375:#376     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #296 = NameAndType        #208:#209     // isClosed:()Z\n-  #297 = NameAndType        #377:#176     // clear:()V\n-  #298 = NameAndType        #378:#178     // getCharacterPosition:()J\n-  #299 = NameAndType        #379:#176     // reset:()V\n-  #300 = NameAndType        #380:#381     // nextToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n-  #301 = NameAndType        #382:#383     // $SwitchMap$org$apache$commons$csv$Token$Type:[I\n-  #302 = NameAndType        #384:#386     // type:Lorg/apache/commons/csv/Token$Type;\n-  #303 = Class              #387          // org/apache/commons/csv/Token$Type\n-  #304 = NameAndType        #388:#389     // ordinal:()I\n-  #305 = NameAndType        #164:#165     // addRecordValue:(Z)V\n-  #306 = NameAndType        #390:#167     // isReady:Z\n-  #307 = Utf8               java/io/IOException\n-  #308 = Utf8               (line\n-  #309 = NameAndType        #368:#391     // append:(J)Ljava/lang/StringBuilder;\n-  #310 = Utf8               ) invalid parse sequence\n-  #311 = Utf8               org/apache/commons/csv/Constants\n-  #312 = NameAndType        #368:#392     // append:(C)Ljava/lang/StringBuilder;\n-  #313 = NameAndType        #368:#393     // append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n-  #314 = NameAndType        #394:#386     // TOKEN:Lorg/apache/commons/csv/Token$Type;\n-  #315 = Utf8               java/lang/IllegalStateException\n-  #316 = Utf8               Unexpected Token type:\n-  #317 = NameAndType        #368:#395     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #318 = Utf8               org/apache/commons/csv/CSVRecord\n-  #319 = NameAndType        #396:#389     // size:()I\n-  #320 = Utf8               java/lang/String\n-  #321 = NameAndType        #397:#398     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #322 = NameAndType        #159:#399     // \"<init>\":([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;JJ)V\n-  #323 = Utf8               java/lang/Object\n-  #324 = Utf8               java/lang/Iterable\n-  #325 = Utf8               java/io/Closeable\n-  #326 = Utf8               org/apache/commons/csv/CSVParser$1\n-  #327 = Utf8               java/util/List\n-  #328 = Utf8               java/util/Map\n-  #329 = Utf8               java/util/AbstractMap\n-  #330 = Utf8               org/apache/commons/csv/Assertions\n-  #331 = Utf8               notNull\n-  #332 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)V\n-  #333 = Utf8               (Ljava/io/File;)V\n-  #334 = Utf8               (Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n-  #335 = Utf8               java/nio/file/Files\n-  #336 = Utf8               newInputStream\n-  #337 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n-  #338 = Utf8               (Ljava/lang/String;)V\n-  #339 = Utf8               java/net/URL\n-  #340 = Utf8               openStream\n-  #341 = Utf8               ()Ljava/io/InputStream;\n-  #342 = Utf8               (Ljava/io/Reader;)V\n-  #343 = Utf8               (Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n-  #344 = Utf8               (Lorg/apache/commons/csv/CSVParser;)V\n-  #345 = Utf8               content\n-  #346 = Utf8               toString\n-  #347 = Utf8               org/apache/commons/csv/CSVFormat\n-  #348 = Utf8               getTrim\n-  #349 = Utf8               trim\n-  #350 = Utf8               isEmpty\n-  #351 = Utf8               getTrailingDelimiter\n-  #352 = Utf8               getNullString\n-  #353 = Utf8               equals\n-  #354 = Utf8               (Ljava/lang/Object;)Z\n-  #355 = Utf8               add\n-  #356 = Utf8               getFirstEol\n-  #357 = Utf8               (Ljava/util/Map;)V\n-  #358 = Utf8               getHeader\n-  #359 = Utf8               ()[Ljava/lang/String;\n-  #360 = Utf8               getIgnoreHeaderCase\n-  #361 = Utf8               CASE_INSENSITIVE_ORDER\n-  #362 = Utf8               Ljava/util/Comparator;\n-  #363 = Utf8               (Ljava/util/Comparator;)V\n-  #364 = Utf8               values\n-  #365 = Utf8               getSkipHeaderRecord\n-  #366 = Utf8               containsKey\n-  #367 = Utf8               getAllowMissingColumnNames\n-  #368 = Utf8               append\n-  #369 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #370 = Utf8               java/util/Arrays\n-  #371 = Utf8               ([Ljava/lang/Object;)Ljava/lang/String;\n-  #372 = Utf8               java/lang/Integer\n-  #373 = Utf8               valueOf\n-  #374 = Utf8               (I)Ljava/lang/Integer;\n-  #375 = Utf8               put\n-  #376 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #377 = Utf8               clear\n-  #378 = Utf8               getCharacterPosition\n-  #379 = Utf8               reset\n-  #380 = Utf8               nextToken\n-  #381 = Utf8               (Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n-  #382 = Utf8               $SwitchMap$org$apache$commons$csv$Token$Type\n-  #383 = Utf8               [I\n-  #384 = Utf8               type\n-  #385 = Utf8               Type\n-  #386 = Utf8               Lorg/apache/commons/csv/Token$Type;\n-  #387 = Utf8               org/apache/commons/csv/Token$Type\n-  #388 = Utf8               ordinal\n-  #389 = Utf8               ()I\n-  #390 = Utf8               isReady\n-  #391 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #392 = Utf8               (C)Ljava/lang/StringBuilder;\n-  #393 = Utf8               (Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n-  #394 = Utf8               TOKEN\n-  #395 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #396 = Utf8               size\n-  #397 = Utf8               toArray\n-  #398 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #399 = Utf8               ([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;JJ)V\n+  #172 = Class              #320          // java/util/List\n+  #173 = Utf8               close\n+  #174 = Utf8               ()V\n+  #175 = Utf8               getCurrentLineNumber\n+  #176 = Utf8               ()J\n+  #177 = Utf8               getFirstEndOfLine\n+  #178 = Utf8               ()Ljava/lang/String;\n+  #179 = Utf8               getHeaderMap\n+  #180 = Utf8               ()Ljava/util/Map;\n+  #181 = Utf8               ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n+  #182 = Utf8               getRecordNumber\n+  #183 = Utf8               getRecords\n+  #184 = Utf8               ()Ljava/util/List;\n+  #185 = Utf8               rec\n+  #186 = Utf8               Lorg/apache/commons/csv/CSVRecord;\n+  #187 = Utf8               records\n+  #188 = Utf8               LocalVariableTypeTable\n+  #189 = Utf8               Ljava/util/List<Lorg/apache/commons/csv/CSVRecord;>;\n+  #190 = Utf8               ()Ljava/util/List<Lorg/apache/commons/csv/CSVRecord;>;\n+  #191 = Utf8               initializeHeader\n+  #192 = Utf8               nextRecord\n+  #193 = Utf8               header\n+  #194 = Utf8               containsHeader\n+  #195 = Utf8               emptyHeader\n+  #196 = Utf8               i\n+  #197 = Utf8               I\n+  #198 = Utf8               headerRecord\n+  #199 = Utf8               [Ljava/lang/String;\n+  #200 = Utf8               hdrMap\n+  #201 = Utf8               formatHeader\n+  #202 = Class              #321          // java/util/Map\n+  #203 = Class              #322          // java/util/AbstractMap\n+  #204 = Utf8               isClosed\n+  #205 = Utf8               ()Z\n+  #206 = Utf8               iterator\n+  #207 = Utf8               ()Ljava/util/Iterator;\n+  #208 = Utf8               ()Ljava/util/Iterator<Lorg/apache/commons/csv/CSVRecord;>;\n+  #209 = Utf8               ()Lorg/apache/commons/csv/CSVRecord;\n+  #210 = Utf8               comment\n+  #211 = Utf8               result\n+  #212 = Utf8               sb\n+  #213 = Utf8               Ljava/lang/StringBuilder;\n+  #214 = Utf8               startCharPosition\n+  #215 = Utf8               Ljava/lang/Object;Ljava/lang/Iterable<Lorg/apache/commons/csv/CSVRecord;>;Ljava/io/Closeable;\n+  #216 = Utf8               SourceFile\n+  #217 = Utf8               CSVParser.java\n+  #218 = Class              #323          // org/apache/commons/csv/Assertions\n+  #219 = NameAndType        #324:#325     // notNull:(Ljava/lang/Object;Ljava/lang/String;)V\n+  #220 = Utf8               org/apache/commons/csv/CSVParser\n+  #221 = Utf8               java/io/InputStreamReader\n+  #222 = Utf8               java/io/FileInputStream\n+  #223 = NameAndType        #159:#326     // \"<init>\":(Ljava/io/File;)V\n+  #224 = NameAndType        #159:#327     // \"<init>\":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n+  #225 = NameAndType        #159:#160     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n+  #226 = NameAndType        #134:#150     // parse:(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+  #227 = Utf8               java/nio/file/OpenOption\n+  #228 = Class              #328          // java/nio/file/Files\n+  #229 = NameAndType        #329:#330     // newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+  #230 = NameAndType        #134:#144     // parse:(Ljava/io/InputStream;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;\n+  #231 = Utf8               java/io/StringReader\n+  #232 = NameAndType        #159:#331     // \"<init>\":(Ljava/lang/String;)V\n+  #233 = Class              #332          // java/net/URL\n+  #234 = NameAndType        #333:#334     // openStream:()Ljava/io/InputStream;\n+  #235 = NameAndType        #159:#163     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V\n+  #236 = NameAndType        #159:#174     // \"<init>\":()V\n+  #237 = Utf8               java/util/ArrayList\n+  #238 = NameAndType        #126:#127     // recordList:Ljava/util/List;\n+  #239 = Utf8               org/apache/commons/csv/Token\n+  #240 = NameAndType        #132:#133     // reusableToken:Lorg/apache/commons/csv/Token;\n+  #241 = NameAndType        #116:#117     // format:Lorg/apache/commons/csv/CSVFormat;\n+  #242 = Utf8               org/apache/commons/csv/Lexer\n+  #243 = Utf8               org/apache/commons/csv/ExtendedBufferedReader\n+  #244 = NameAndType        #159:#335     // \"<init>\":(Ljava/io/Reader;)V\n+  #245 = NameAndType        #159:#336     // \"<init>\":(Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n+  #246 = NameAndType        #122:#123     // lexer:Lorg/apache/commons/csv/Lexer;\n+  #247 = Utf8               org/apache/commons/csv/CSVParser$CSVRecordIterator\n+  #248 = NameAndType        #159:#337     // \"<init>\":(Lorg/apache/commons/csv/CSVParser;)V\n+  #249 = NameAndType        #124:#125     // csvRecordIterator:Lorg/apache/commons/csv/CSVParser$CSVRecordIterator;\n+  #250 = NameAndType        #191:#180     // initializeHeader:()Ljava/util/Map;\n+  #251 = NameAndType        #118:#119     // headerMap:Ljava/util/Map;\n+  #252 = NameAndType        #131:#130     // characterOffset:J\n+  #253 = NameAndType        #129:#130     // recordNumber:J\n+  #254 = NameAndType        #338:#213     // content:Ljava/lang/StringBuilder;\n+  #255 = NameAndType        #339:#178     // toString:()Ljava/lang/String;\n+  #256 = Class              #340          // org/apache/commons/csv/CSVFormat\n+  #257 = NameAndType        #341:#205     // getTrim:()Z\n+  #258 = NameAndType        #342:#178     // trim:()Ljava/lang/String;\n+  #259 = NameAndType        #343:#205     // isEmpty:()Z\n+  #260 = NameAndType        #344:#205     // getTrailingDelimiter:()Z\n+  #261 = NameAndType        #345:#178     // getNullString:()Ljava/lang/String;\n+  #262 = NameAndType        #346:#347     // equals:(Ljava/lang/Object;)Z\n+  #263 = NameAndType        #348:#347     // add:(Ljava/lang/Object;)Z\n+  #264 = NameAndType        #173:#174     // close:()V\n+  #265 = NameAndType        #175:#176     // getCurrentLineNumber:()J\n+  #266 = NameAndType        #349:#178     // getFirstEol:()Ljava/lang/String;\n+  #267 = Utf8               java/util/LinkedHashMap\n+  #268 = NameAndType        #159:#350     // \"<init>\":(Ljava/util/Map;)V\n+  #269 = NameAndType        #192:#209     // nextRecord:()Lorg/apache/commons/csv/CSVRecord;\n+  #270 = NameAndType        #351:#352     // getHeader:()[Ljava/lang/String;\n+  #271 = NameAndType        #353:#205     // getIgnoreHeaderCase:()Z\n+  #272 = Utf8               java/util/TreeMap\n+  #273 = NameAndType        #354:#355     // CASE_INSENSITIVE_ORDER:Ljava/util/Comparator;\n+  #274 = NameAndType        #159:#356     // \"<init>\":(Ljava/util/Comparator;)V\n+  #275 = NameAndType        #357:#352     // values:()[Ljava/lang/String;\n+  #276 = NameAndType        #358:#205     // getSkipHeaderRecord:()Z\n+  #277 = NameAndType        #359:#347     // containsKey:(Ljava/lang/Object;)Z\n+  #278 = NameAndType        #360:#205     // getAllowMissingColumnNames:()Z\n+  #279 = Utf8               java/lang/IllegalArgumentException\n+  #280 = Utf8               java/lang/StringBuilder\n+  #281 = Utf8               The header contains a duplicate name: \\\"\n+  #282 = NameAndType        #361:#362     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #283 = Utf8               \\\" in\n+  #284 = Class              #363          // java/util/Arrays\n+  #285 = NameAndType        #339:#364     // toString:([Ljava/lang/Object;)Ljava/lang/String;\n+  #286 = Class              #365          // java/lang/Integer\n+  #287 = NameAndType        #366:#367     // valueOf:(I)Ljava/lang/Integer;\n+  #288 = NameAndType        #368:#369     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #289 = NameAndType        #204:#205     // isClosed:()Z\n+  #290 = NameAndType        #370:#174     // clear:()V\n+  #291 = NameAndType        #371:#176     // getCharacterPosition:()J\n+  #292 = NameAndType        #372:#174     // reset:()V\n+  #293 = NameAndType        #373:#374     // nextToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n+  #294 = NameAndType        #375:#376     // $SwitchMap$org$apache$commons$csv$Token$Type:[I\n+  #295 = NameAndType        #377:#379     // type:Lorg/apache/commons/csv/Token$Type;\n+  #296 = Class              #380          // org/apache/commons/csv/Token$Type\n+  #297 = NameAndType        #381:#382     // ordinal:()I\n+  #298 = NameAndType        #164:#165     // addRecordValue:(Z)V\n+  #299 = NameAndType        #383:#167     // isReady:Z\n+  #300 = Utf8               java/io/IOException\n+  #301 = Utf8               (line\n+  #302 = NameAndType        #361:#384     // append:(J)Ljava/lang/StringBuilder;\n+  #303 = Utf8               ) invalid parse sequence\n+  #304 = Utf8               org/apache/commons/csv/Constants\n+  #305 = NameAndType        #361:#385     // append:(C)Ljava/lang/StringBuilder;\n+  #306 = NameAndType        #361:#386     // append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n+  #307 = NameAndType        #387:#379     // TOKEN:Lorg/apache/commons/csv/Token$Type;\n+  #308 = Utf8               java/lang/IllegalStateException\n+  #309 = Utf8               Unexpected Token type:\n+  #310 = NameAndType        #361:#388     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #311 = Utf8               org/apache/commons/csv/CSVRecord\n+  #312 = NameAndType        #389:#382     // size:()I\n+  #313 = Utf8               java/lang/String\n+  #314 = NameAndType        #390:#391     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #315 = NameAndType        #159:#392     // \"<init>\":([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;JJ)V\n+  #316 = Utf8               java/lang/Object\n+  #317 = Utf8               java/lang/Iterable\n+  #318 = Utf8               java/io/Closeable\n+  #319 = Utf8               org/apache/commons/csv/CSVParser$1\n+  #320 = Utf8               java/util/List\n+  #321 = Utf8               java/util/Map\n+  #322 = Utf8               java/util/AbstractMap\n+  #323 = Utf8               org/apache/commons/csv/Assertions\n+  #324 = Utf8               notNull\n+  #325 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)V\n+  #326 = Utf8               (Ljava/io/File;)V\n+  #327 = Utf8               (Ljava/io/InputStream;Ljava/nio/charset/Charset;)V\n+  #328 = Utf8               java/nio/file/Files\n+  #329 = Utf8               newInputStream\n+  #330 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+  #331 = Utf8               (Ljava/lang/String;)V\n+  #332 = Utf8               java/net/URL\n+  #333 = Utf8               openStream\n+  #334 = Utf8               ()Ljava/io/InputStream;\n+  #335 = Utf8               (Ljava/io/Reader;)V\n+  #336 = Utf8               (Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n+  #337 = Utf8               (Lorg/apache/commons/csv/CSVParser;)V\n+  #338 = Utf8               content\n+  #339 = Utf8               toString\n+  #340 = Utf8               org/apache/commons/csv/CSVFormat\n+  #341 = Utf8               getTrim\n+  #342 = Utf8               trim\n+  #343 = Utf8               isEmpty\n+  #344 = Utf8               getTrailingDelimiter\n+  #345 = Utf8               getNullString\n+  #346 = Utf8               equals\n+  #347 = Utf8               (Ljava/lang/Object;)Z\n+  #348 = Utf8               add\n+  #349 = Utf8               getFirstEol\n+  #350 = Utf8               (Ljava/util/Map;)V\n+  #351 = Utf8               getHeader\n+  #352 = Utf8               ()[Ljava/lang/String;\n+  #353 = Utf8               getIgnoreHeaderCase\n+  #354 = Utf8               CASE_INSENSITIVE_ORDER\n+  #355 = Utf8               Ljava/util/Comparator;\n+  #356 = Utf8               (Ljava/util/Comparator;)V\n+  #357 = Utf8               values\n+  #358 = Utf8               getSkipHeaderRecord\n+  #359 = Utf8               containsKey\n+  #360 = Utf8               getAllowMissingColumnNames\n+  #361 = Utf8               append\n+  #362 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #363 = Utf8               java/util/Arrays\n+  #364 = Utf8               ([Ljava/lang/Object;)Ljava/lang/String;\n+  #365 = Utf8               java/lang/Integer\n+  #366 = Utf8               valueOf\n+  #367 = Utf8               (I)Ljava/lang/Integer;\n+  #368 = Utf8               put\n+  #369 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #370 = Utf8               clear\n+  #371 = Utf8               getCharacterPosition\n+  #372 = Utf8               reset\n+  #373 = Utf8               nextToken\n+  #374 = Utf8               (Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n+  #375 = Utf8               $SwitchMap$org$apache$commons$csv$Token$Type\n+  #376 = Utf8               [I\n+  #377 = Utf8               type\n+  #378 = Utf8               Type\n+  #379 = Utf8               Lorg/apache/commons/csv/Token$Type;\n+  #380 = Utf8               org/apache/commons/csv/Token$Type\n+  #381 = Utf8               ordinal\n+  #382 = Utf8               ()I\n+  #383 = Utf8               isReady\n+  #384 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #385 = Utf8               (C)Ljava/lang/StringBuilder;\n+  #386 = Utf8               (Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\n+  #387 = Utf8               TOKEN\n+  #388 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #389 = Utf8               size\n+  #390 = Utf8               toArray\n+  #391 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #392 = Utf8               ([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;JJ)V\n {\n   private final org.apache.commons.csv.CSVFormat format;\n     descriptor: Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final java.util.Map<java.lang.String, java.lang.Integer> headerMap;\n     descriptor: Ljava/util/Map;\n@@ -883,15 +876,15 @@\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      23     0  this   Lorg/apache/commons/csv/CSVParser;\n       StackMapTable: number_of_entries = 2\n         frame_type = 11 /* same */\n         frame_type = 74 /* same_locals_1_stack_item */\n           stack = [ class java/util/LinkedHashMap ]\n-    Signature: #184                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n+    Signature: #181                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n \n   public long getRecordNumber();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n@@ -943,15 +936,15 @@\n           locals = [ top, class java/util/List ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 19\n           locals = [ class org/apache/commons/csv/CSVParser, class org/apache/commons/csv/CSVRecord, class java/util/List ]\n           stack = []\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #194                         // ()Ljava/util/List<Lorg/apache/commons/csv/CSVRecord;>;\n+    Signature: #190                         // ()Ljava/util/List<Lorg/apache/commons/csv/CSVRecord;>;\n \n   private java.util.Map<java.lang.String, java.lang.Integer> initializeHeader() throws java.io.IOException;\n     descriptor: ()Ljava/util/Map;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=8, args_size=1\n          0: aconst_null\n@@ -1060,14 +1053,16 @@\n        222: aload_1\n        223: areturn\n       LineNumberTable:\n         line 464: 0\n         line 465: 2\n         line 466: 10\n         line 467: 14\n+        line 468: 24\n+        line 469: 37\n         line 471: 45\n         line 472: 47\n         line 474: 52\n         line 475: 58\n         line 476: 63\n         line 478: 69\n         line 479: 72\n@@ -1125,15 +1120,15 @@\n         frame_type = 39 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 19\n           locals = [ class org/apache/commons/csv/CSVParser, class java/util/Map, class \"[Ljava/lang/String;\" ]\n           stack = []\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #184                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n+    Signature: #181                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n \n   public boolean isClosed();\n     descriptor: ()Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -1155,15 +1150,15 @@\n          1: getfield      #39                 // Field csvRecordIterator:Lorg/apache/commons/csv/CSVParser$CSVRecordIterator;\n          4: areturn\n       LineNumberTable:\n         line 525: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/csv/CSVParser;\n-    Signature: #212                         // ()Ljava/util/Iterator<Lorg/apache/commons/csv/CSVRecord;>;\n+    Signature: #208                         // ()Ljava/util/Iterator<Lorg/apache/commons/csv/CSVRecord;>;\n \n   org.apache.commons.csv.CSVRecord nextRecord() throws java.io.IOException;\n     descriptor: ()Lorg/apache/commons/csv/CSVRecord;\n     flags: (0x0000)\n     Code:\n       stack=9, locals=6, args_size=1\n          0: aconst_null\n@@ -1364,13 +1359,13 @@\n         frame_type = 42 /* same */\n         frame_type = 67 /* same_locals_1_stack_item */\n           stack = [ class java/lang/String ]\n         frame_type = 44 /* same */\n     Exceptions:\n       throws java.io.IOException\n }\n-Signature: #220                         // Ljava/lang/Object;Ljava/lang/Iterable<Lorg/apache/commons/csv/CSVRecord;>;Ljava/io/Closeable;\n+Signature: #215                         // Ljava/lang/Object;Ljava/lang/Iterable<Lorg/apache/commons/csv/CSVRecord;>;Ljava/io/Closeable;\n SourceFile: \"CSVParser.java\"\n InnerClasses:\n   static #113;                            // class org/apache/commons/csv/CSVParser$1\n   #115= #37 of #4;                        // CSVRecordIterator=class org/apache/commons/csv/CSVParser$CSVRecordIterator of class org/apache/commons/csv/CSVParser\n-  static final #385= #303 of #27;         // Type=class org/apache/commons/csv/Token$Type of class org/apache/commons/csv/Token\n+  static final #378= #296 of #27;         // Type=class org/apache/commons/csv/Token$Type of class org/apache/commons/csv/Token\n"}]}
