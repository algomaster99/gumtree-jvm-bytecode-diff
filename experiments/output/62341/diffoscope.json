{"diffoscope-json-version": 1, "source1": "first/AuthenticatingIMAPClient.class", "source2": "second/AuthenticatingIMAPClient.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -41,23 +41,23 @@\n         super(proto, implicit, ctx);\n     }\n     \n     public boolean auth(final AuthenticatingIMAPClient.AUTH_METHOD method, final String username, final String password) throws IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {\n         if (!IMAPReply.isContinuation(this.sendCommand(IMAPCommand.AUTHENTICATE, method.getAuthName()))) {\n             return false;\n         }\n-        switch (AuthenticatingIMAPClient.AuthenticatingIMAPClient$1.$SwitchMap$org$apache$commons$net$imap$AuthenticatingIMAPClient$AUTH_METHOD[method.ordinal()]) {\n-            case 1: {\n+        switch (method) {\n+            case PLAIN: {\n                 final int result = this.sendData(Base64.encodeBase64StringUnChunked((\"\\u0000\" + username + \"\\u0000\" + password).getBytes(this.getCharset())));\n                 if (result == 0) {\n                     this.setState(IMAP.IMAPState.AUTH_STATE);\n                 }\n                 return result == 0;\n             }\n-            case 2: {\n+            case CRAM_MD5: {\n                 final byte[] serverChallenge = Base64.decodeBase64(this.getReplyString().substring(2).trim());\n                 final Mac hmac_md5 = Mac.getInstance(\"HmacMD5\");\n                 hmac_md5.init(new SecretKeySpec(password.getBytes(this.getCharset()), \"HmacMD5\"));\n                 final byte[] hmacResult = this.convertToHexString(hmac_md5.doFinal(serverChallenge)).getBytes(this.getCharset());\n                 final byte[] usernameBytes = username.getBytes(this.getCharset());\n                 final byte[] toEncode = new byte[usernameBytes.length + 1 + hmacResult.length];\n                 System.arraycopy(usernameBytes, 0, toEncode, 0, usernameBytes.length);\n@@ -65,26 +65,26 @@\n                 System.arraycopy(hmacResult, 0, toEncode, usernameBytes.length + 1, hmacResult.length);\n                 final int result2 = this.sendData(Base64.encodeBase64StringUnChunked(toEncode));\n                 if (result2 == 0) {\n                     this.setState(IMAP.IMAPState.AUTH_STATE);\n                 }\n                 return result2 == 0;\n             }\n-            case 3: {\n+            case LOGIN: {\n                 if (this.sendData(Base64.encodeBase64StringUnChunked(username.getBytes(this.getCharset()))) != 3) {\n                     return false;\n                 }\n                 final int result = this.sendData(Base64.encodeBase64StringUnChunked(password.getBytes(this.getCharset())));\n                 if (result == 0) {\n                     this.setState(IMAP.IMAPState.AUTH_STATE);\n                 }\n                 return result == 0;\n             }\n-            case 4:\n-            case 5: {\n+            case XOAUTH:\n+            case XOAUTH2: {\n                 final int result = this.sendData(username);\n                 if (result == 0) {\n                     this.setState(IMAP.IMAPState.AUTH_STATE);\n                 }\n                 return result == 0;\n             }\n             default: {\n"}]}
