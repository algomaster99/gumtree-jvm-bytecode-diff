{"diffoscope-json-version": 1, "source1": "first/NumericEntityUnescaper.class", "source2": "second/NumericEntityUnescaper.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,69 +9,69 @@\n import java.util.EnumSet;\n \n @Deprecated\n public class NumericEntityUnescaper extends CharSequenceTranslator\n {\n     private final EnumSet<NumericEntityUnescaper.OPTION> options;\n     \n-    public NumericEntityUnescaper(final NumericEntityUnescaper.OPTION... options) {\n-        if (options.length > 0) {\n-            this.options = EnumSet.copyOf(Arrays.asList(options));\n+    public NumericEntityUnescaper(final NumericEntityUnescaper.OPTION... a) {\n+        if (a.length > 0) {\n+            this.options = EnumSet.copyOf(Arrays.asList(a));\n         }\n         else {\n             this.options = EnumSet.copyOf(Collections.singletonList(NumericEntityUnescaper.OPTION.semiColonRequired));\n         }\n     }\n     \n-    public boolean isSet(final NumericEntityUnescaper.OPTION option) {\n-        return this.options != null && this.options.contains(option);\n+    public boolean isSet(final NumericEntityUnescaper.OPTION o) {\n+        return this.options != null && this.options.contains(o);\n     }\n     \n-    public int translate(final CharSequence input, final int index, final Writer out) throws IOException {\n-        final int seqEnd = input.length();\n-        if (input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n-            final char firstChar = input.charAt(start);\n-            if (firstChar == 'x' || firstChar == 'X') {\n-                ++start;\n-                isHex = true;\n-                if (start == seqEnd) {\n+    public int translate(final CharSequence charSequence, final int n, final Writer writer) throws IOException {\n+        final int length = charSequence.length();\n+        if (charSequence.charAt(n) == '&' && n < length - 2 && charSequence.charAt(n + 1) == '#') {\n+            int n2 = n + 2;\n+            int n3 = 0;\n+            final char char1 = charSequence.charAt(n2);\n+            if (char1 == 'x' || char1 == 'X') {\n+                ++n2;\n+                n3 = 1;\n+                if (n2 == length) {\n                     return 0;\n                 }\n             }\n-            int end;\n-            for (end = start; end < seqEnd && ((input.charAt(end) >= '0' && input.charAt(end) <= '9') || (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') || (input.charAt(end) >= 'A' && input.charAt(end) <= 'F')); ++end) {}\n-            final boolean semiNext = end != seqEnd && input.charAt(end) == ';';\n-            if (!semiNext) {\n+            int n4;\n+            for (n4 = n2; n4 < length && ((charSequence.charAt(n4) >= '0' && charSequence.charAt(n4) <= '9') || (charSequence.charAt(n4) >= 'a' && charSequence.charAt(n4) <= 'f') || (charSequence.charAt(n4) >= 'A' && charSequence.charAt(n4) <= 'F')); ++n4) {}\n+            final int n5 = (n4 != length && charSequence.charAt(n4) == ';') ? 1 : 0;\n+            if (n5 == 0) {\n                 if (this.isSet(NumericEntityUnescaper.OPTION.semiColonRequired)) {\n                     return 0;\n                 }\n                 if (this.isSet(NumericEntityUnescaper.OPTION.errorIfNoSemiColon)) {\n                     throw new IllegalArgumentException(\"Semi-colon required at end of numeric entity\");\n                 }\n             }\n-            int entityValue;\n+            int n6;\n             try {\n-                if (isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n+                if (n3 != 0) {\n+                    n6 = Integer.parseInt(charSequence.subSequence(n2, n4).toString(), 16);\n                 }\n                 else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n+                    n6 = Integer.parseInt(charSequence.subSequence(n2, n4).toString(), 10);\n                 }\n             }\n-            catch (final NumberFormatException nfe) {\n+            catch (final NumberFormatException ex) {\n                 return 0;\n             }\n-            if (entityValue > 65535) {\n-                final char[] chars = Character.toChars(entityValue);\n-                out.write(chars[0]);\n-                out.write(chars[1]);\n+            if (n6 > 65535) {\n+                final char[] chars = Character.toChars(n6);\n+                writer.write(chars[0]);\n+                writer.write(chars[1]);\n             }\n             else {\n-                out.write(entityValue);\n+                writer.write(n6);\n             }\n-            return 2 + end - start + (isHex ? 1 : 0) + (semiNext ? 1 : 0);\n+            return 2 + n4 - n2 + n3 + n5;\n         }\n         return 0;\n     }\n }\n"}]}
