{"diffoscope-json-version": 1, "source1": "first/JNDIConfiguration.class", "source2": "second/JNDIConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -73,14 +73,17 @@\n             }\n         }\n         finally {\n             if (elements != null) {\n                 elements.close();\n             }\n         }\n+        if (elements != null) {\n+            elements.close();\n+        }\n     }\n     \n     protected Iterator<String> getKeysInternal() {\n         return this.getKeysInternal(\"\");\n     }\n     \n     protected Iterator<String> getKeysInternal(final String prefix) {\n@@ -93,19 +96,19 @@\n                 this.recursiveGetKeys(keys, context, prefix, new HashSet<Context>());\n             }\n             else if (this.containsKey(prefix)) {\n                 keys.add(prefix);\n             }\n             return keys.iterator();\n         }\n-        catch (final NameNotFoundException e) {\n+        catch (final NameNotFoundException ex) {\n             return new ArrayList<String>().iterator();\n         }\n-        catch (final NamingException e2) {\n-            this.fireError(ConfigurationErrorEvent.READ, ConfigurationErrorEvent.READ, (String)null, (Object)null, (Throwable)e2);\n+        catch (final NamingException e) {\n+            this.fireError(ConfigurationErrorEvent.READ, ConfigurationErrorEvent.READ, (String)null, (Object)null, (Throwable)e);\n             return new ArrayList<String>().iterator();\n         }\n     }\n     \n     private Context getContext(final List<String> path, final Context context) throws NamingException {\n         if (path == null || path.isEmpty()) {\n             return context;\n@@ -125,14 +128,17 @@\n             }\n         }\n         finally {\n             if (elements != null) {\n                 elements.close();\n             }\n         }\n+        if (elements != null) {\n+            elements.close();\n+        }\n         return null;\n     }\n     \n     protected boolean isEmptyInternal() {\n         try {\n             NamingEnumeration<NameClassPair> enumeration = null;\n             try {\n@@ -164,19 +170,19 @@\n             return false;\n         }\n         key = key.replaceAll(\"\\\\.\", \"/\");\n         try {\n             this.getBaseContext().lookup(key);\n             return true;\n         }\n-        catch (final NameNotFoundException e) {\n+        catch (final NameNotFoundException ex) {\n             return false;\n         }\n-        catch (final NamingException e2) {\n-            this.fireError(ConfigurationErrorEvent.READ, ConfigurationErrorEvent.READ, key, (Object)null, (Throwable)e2);\n+        catch (final NamingException e) {\n+            this.fireError(ConfigurationErrorEvent.READ, ConfigurationErrorEvent.READ, key, (Object)null, (Throwable)e);\n             return false;\n         }\n     }\n     \n     public String getPrefix() {\n         return this.prefix;\n     }\n@@ -190,22 +196,22 @@\n         if (this.clearedProperties.contains(key)) {\n             return null;\n         }\n         try {\n             key = key.replaceAll(\"\\\\.\", \"/\");\n             return this.getBaseContext().lookup(key);\n         }\n-        catch (final NameNotFoundException e) {\n+        catch (final NameNotFoundException ex) {\n             return null;\n         }\n-        catch (final NotContextException nctxex) {\n+        catch (final NotContextException ex2) {\n             return null;\n         }\n-        catch (final NamingException e2) {\n-            this.fireError(ConfigurationErrorEvent.READ, ConfigurationErrorEvent.READ, key, (Object)null, (Throwable)e2);\n+        catch (final NamingException e) {\n+            this.fireError(ConfigurationErrorEvent.READ, ConfigurationErrorEvent.READ, key, (Object)null, (Throwable)e);\n             return null;\n         }\n     }\n     \n     protected void addPropertyDirect(final String key, final Object obj) {\n         throw new UnsupportedOperationException(\"This operation is not supported\");\n     }\n"}]}
