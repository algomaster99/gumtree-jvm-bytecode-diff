{"diffoscope-json-version": 1, "source1": "first/Synthetic.class", "source2": "second/Synthetic.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,61 +5,61 @@\n import java.io.IOException;\n import java.io.DataInput;\n \n public final class Synthetic extends Attribute\n {\n     private byte[] bytes;\n     \n-    public Synthetic(final Synthetic c) {\n-        this(c.getNameIndex(), c.getLength(), c.getBytes(), c.getConstantPool());\n+    public Synthetic(final Synthetic synthetic) {\n+        this(synthetic.getNameIndex(), synthetic.getLength(), synthetic.getBytes(), synthetic.getConstantPool());\n     }\n     \n-    public Synthetic(final int name_index, final int length, final byte[] bytes, final ConstantPool constant_pool) {\n-        super((byte)7, name_index, length, constant_pool);\n+    public Synthetic(final int n, final int n2, final byte[] bytes, final ConstantPool constantPool) {\n+        super((byte)7, n, n2, constantPool);\n         this.bytes = bytes;\n     }\n     \n-    Synthetic(final int name_index, final int length, final DataInput input, final ConstantPool constant_pool) throws IOException {\n-        this(name_index, length, (byte[])null, constant_pool);\n-        if (length > 0) {\n-            input.readFully(this.bytes = new byte[length]);\n+    Synthetic(final int n, final int n2, final DataInput dataInput, final ConstantPool constantPool) throws IOException {\n+        this(n, n2, (byte[])null, constantPool);\n+        if (n2 > 0) {\n+            dataInput.readFully(this.bytes = new byte[n2]);\n             println(\"Synthetic attribute with length > 0\");\n         }\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitSynthetic(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitSynthetic(this);\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        super.dump(file);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        super.dump(dataOutputStream);\n         if (super.getLength() > 0) {\n-            file.write(this.bytes, 0, super.getLength());\n+            dataOutputStream.write(this.bytes, 0, super.getLength());\n         }\n     }\n     \n     public byte[] getBytes() {\n         return this.bytes;\n     }\n     \n     public void setBytes(final byte[] bytes) {\n         this.bytes = bytes;\n     }\n     \n     public String toString() {\n-        final StringBuilder buf = new StringBuilder(\"Synthetic\");\n+        final StringBuilder sb = new StringBuilder(\"Synthetic\");\n         if (super.getLength() > 0) {\n-            buf.append(\" \").append(Utility.toHexString(this.bytes));\n+            sb.append(\" \").append(Utility.toHexString(this.bytes));\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n     \n-    public Attribute copy(final ConstantPool _constant_pool) {\n-        final Synthetic c = (Synthetic)this.clone();\n+    public Attribute copy(final ConstantPool constantPool) {\n+        final Synthetic synthetic = (Synthetic)this.clone();\n         if (this.bytes != null) {\n-            c.bytes = new byte[this.bytes.length];\n-            System.arraycopy(this.bytes, 0, c.bytes, 0, this.bytes.length);\n+            synthetic.bytes = new byte[this.bytes.length];\n+            System.arraycopy(this.bytes, 0, synthetic.bytes, 0, this.bytes.length);\n         }\n-        c.setConstantPool(_constant_pool);\n-        return c;\n+        synthetic.setConstantPool(constantPool);\n+        return synthetic;\n     }\n }\n"}]}
