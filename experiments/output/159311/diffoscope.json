{"diffoscope-json-version": 1, "source1": "first/ZipArchiveOutputStream.class", "source2": "second/ZipArchiveOutputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -179,15 +179,15 @@\n         OutputStream outputStream = null;\n         SeekableByteChannel channel = null;\n         StreamCompressor streamCompressor = null;\n         try {\n             channel = Files.newByteChannel(file, EnumSet.of(StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.READ, StandardOpenOption.TRUNCATE_EXISTING), (FileAttribute<?>[])new FileAttribute[0]);\n             streamCompressor = StreamCompressor.create(channel, this.def);\n         }\n-        catch (final IOException ex) {\n+        catch (final IOException e) {\n             IOUtils.closeQuietly((Closeable)channel);\n             channel = null;\n             outputStream = Files.newOutputStream(file, options);\n             streamCompressor = StreamCompressor.create(outputStream, this.def);\n         }\n         this.outputStream = outputStream;\n         this.channel = channel;\n@@ -873,14 +873,15 @@\n         final ByteBuffer data = this.zipEncoding.encode(this.comment);\n         final int dataLen = data.limit() - data.position();\n         this.writeCounted(ZipShort.getBytes(dataLen));\n         this.streamCompressor.writeCounted(data.array(), data.arrayOffset(), dataLen);\n     }\n     \n     private void writeCentralDirectoryInChunks() throws IOException {\n+        final int NUM_PER_WRITE = 1000;\n         final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(70000);\n         int count = 0;\n         for (final ZipArchiveEntry ze : this.entries) {\n             byteArrayOutputStream.write(this.createCentralFileHeader(ze));\n             if (++count > 1000) {\n                 this.writeCounted(byteArrayOutputStream.toByteArray());\n                 byteArrayOutputStream.reset();\n@@ -988,14 +989,15 @@\n         final byte[] numOfEntriesOnThisDiskData = ZipEightByteInteger.getBytes((long)numOfEntriesOnThisDisk);\n         this.writeOut(numOfEntriesOnThisDiskData);\n         final byte[] num = ZipEightByteInteger.getBytes((long)this.entries.size());\n         this.writeOut(num);\n         this.writeOut(ZipEightByteInteger.getBytes(this.cdLength));\n         this.writeOut(ZipEightByteInteger.getBytes(this.cdOffset));\n         if (this.isSplitZip) {\n+            final int zip64EOCDLOCLength = 20;\n             final long unsplittableContentSize = 20L + this.eocdLength;\n             ((ZipSplitOutputStream)this.outputStream).prepareToWriteUnsplittableContent(unsplittableContentSize);\n         }\n         this.writeOut(ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG);\n         this.writeOut(ZipLong.getBytes(diskNumberStart));\n         this.writeOut(ZipEightByteInteger.getBytes(offset));\n         if (this.isSplitZip) {\n"}]}
