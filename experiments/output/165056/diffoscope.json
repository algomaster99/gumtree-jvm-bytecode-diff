{"diffoscope-json-version": 1, "source1": "first/ExplodingInputStream.class", "source2": "second/ExplodingInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,67 +1,67 @@\n-  SHA-256 checksum 4dc073ba47104c4d9b72ddf3880621fe9e4e06f79a22ce911679b2435eb1438f\n+  SHA-256 checksum 6c0119f8941f06abd2ae3ce31cdf96d54e139784c4fe36332e93c572a709e51b\n   Compiled from \"ExplodingInputStream.java\"\n class org.apache.commons.compress.archivers.zip.ExplodingInputStream extends java.io.InputStream implements org.apache.commons.compress.utils.InputStreamStatistics\n   minor version: 0\n   major version: 52\n   flags: (0x0020) ACC_SUPER\n   this_class: #49                         // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n   super_class: #50                        // java/io/InputStream\n   interfaces: 1, fields: 11, methods: 7, attributes: 1\n Constant pool:\n-    #1 = Methodref          #50.#107      // java/io/InputStream.\"<init>\":()V\n-    #2 = Class              #108          // org/apache/commons/compress/archivers/zip/CircularBuffer\n+    #1 = Methodref          #50.#102      // java/io/InputStream.\"<init>\":()V\n+    #2 = Class              #103          // org/apache/commons/compress/archivers/zip/CircularBuffer\n     #3 = Integer            32768\n-    #4 = Methodref          #2.#109       // org/apache/commons/compress/archivers/zip/CircularBuffer.\"<init>\":(I)V\n-    #5 = Fieldref           #49.#110      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n-    #6 = Class              #111          // java/lang/IllegalArgumentException\n-    #7 = String             #112          // The dictionary size must be 4096 or 8192\n-    #8 = Methodref          #6.#113       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-    #9 = String             #114          // The number of trees must be 2 or 3\n-   #10 = Fieldref           #49.#115      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.dictionarySize:I\n-   #11 = Fieldref           #49.#116      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.numberOfTrees:I\n-   #12 = Fieldref           #49.#117      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.minimumMatchLength:I\n-   #13 = Fieldref           #49.#118      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.in:Ljava/io/InputStream;\n-   #14 = Fieldref           #49.#119      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n-   #15 = Class              #120          // org/apache/commons/compress/utils/CountingInputStream\n-   #16 = Class              #121          // org/apache/commons/compress/utils/CloseShieldFilterInputStream\n-   #17 = Methodref          #16.#122      // org/apache/commons/compress/utils/CloseShieldFilterInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #18 = Methodref          #15.#122      // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #19 = Methodref          #123.#124     // org/apache/commons/compress/archivers/zip/BinaryTree.decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-   #20 = Fieldref           #49.#125      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-   #21 = Fieldref           #49.#126      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.lengthTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-   #22 = Fieldref           #49.#127      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.distanceTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-   #23 = Fieldref           #49.#128      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.treeSizes:J\n-   #24 = Methodref          #15.#129      // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n-   #25 = Methodref          #15.#130      // org/apache/commons/compress/utils/CountingInputStream.close:()V\n-   #26 = Class              #131          // java/lang/Throwable\n-   #27 = Methodref          #26.#132      // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-   #28 = Class              #133          // org/apache/commons/compress/archivers/zip/BitStream\n-   #29 = Methodref          #28.#122      // org/apache/commons/compress/archivers/zip/BitStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #30 = Methodref          #2.#134       // org/apache/commons/compress/archivers/zip/CircularBuffer.available:()Z\n-   #31 = Methodref          #49.#135      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.fillBuffer:()V\n-   #32 = Class              #136          // java/io/IOException\n-   #33 = String             #137          // bad IMPLODE stream\n-   #34 = Methodref          #32.#138      // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #35 = Methodref          #2.#139       // org/apache/commons/compress/archivers/zip/CircularBuffer.get:()I\n-   #36 = Fieldref           #49.#140      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.uncompressedCount:J\n-   #37 = Methodref          #28.#129      // org/apache/commons/compress/archivers/zip/BitStream.getBytesRead:()J\n-   #38 = Methodref          #50.#130      // java/io/InputStream.close:()V\n-   #39 = Methodref          #49.#141      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.init:()V\n-   #40 = Methodref          #28.#142      // org/apache/commons/compress/archivers/zip/BitStream.nextBit:()I\n-   #41 = Methodref          #123.#143     // org/apache/commons/compress/archivers/zip/BinaryTree.read:(Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n-   #42 = Methodref          #28.#144      // org/apache/commons/compress/archivers/zip/BitStream.nextByte:()I\n-   #43 = Methodref          #2.#145       // org/apache/commons/compress/archivers/zip/CircularBuffer.put:(I)V\n-   #44 = Methodref          #28.#146      // org/apache/commons/compress/archivers/zip/BitStream.nextBits:(I)J\n+    #4 = Methodref          #2.#104       // org/apache/commons/compress/archivers/zip/CircularBuffer.\"<init>\":(I)V\n+    #5 = Fieldref           #49.#105      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n+    #6 = Class              #106          // java/lang/IllegalArgumentException\n+    #7 = String             #107          // The dictionary size must be 4096 or 8192\n+    #8 = Methodref          #6.#108       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+    #9 = String             #109          // The number of trees must be 2 or 3\n+   #10 = Fieldref           #49.#110      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.dictionarySize:I\n+   #11 = Fieldref           #49.#111      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.numberOfTrees:I\n+   #12 = Fieldref           #49.#112      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.minimumMatchLength:I\n+   #13 = Fieldref           #49.#113      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.in:Ljava/io/InputStream;\n+   #14 = Fieldref           #49.#114      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+   #15 = Class              #115          // org/apache/commons/compress/utils/CountingInputStream\n+   #16 = Class              #116          // org/apache/commons/compress/utils/CloseShieldFilterInputStream\n+   #17 = Methodref          #16.#117      // org/apache/commons/compress/utils/CloseShieldFilterInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #18 = Methodref          #15.#117      // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #19 = Methodref          #118.#119     // org/apache/commons/compress/archivers/zip/BinaryTree.decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+   #20 = Fieldref           #49.#120      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+   #21 = Fieldref           #49.#121      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.lengthTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+   #22 = Fieldref           #49.#122      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.distanceTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+   #23 = Fieldref           #49.#123      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.treeSizes:J\n+   #24 = Methodref          #15.#124      // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+   #25 = Methodref          #15.#125      // org/apache/commons/compress/utils/CountingInputStream.close:()V\n+   #26 = Class              #126          // java/lang/Throwable\n+   #27 = Methodref          #26.#127      // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+   #28 = Class              #128          // org/apache/commons/compress/archivers/zip/BitStream\n+   #29 = Methodref          #28.#117      // org/apache/commons/compress/archivers/zip/BitStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #30 = Methodref          #2.#129       // org/apache/commons/compress/archivers/zip/CircularBuffer.available:()Z\n+   #31 = Methodref          #49.#130      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.fillBuffer:()V\n+   #32 = Class              #131          // java/io/IOException\n+   #33 = String             #132          // bad IMPLODE stream\n+   #34 = Methodref          #32.#133      // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #35 = Methodref          #2.#134       // org/apache/commons/compress/archivers/zip/CircularBuffer.get:()I\n+   #36 = Fieldref           #49.#135      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.uncompressedCount:J\n+   #37 = Methodref          #28.#124      // org/apache/commons/compress/archivers/zip/BitStream.getBytesRead:()J\n+   #38 = Methodref          #50.#125      // java/io/InputStream.close:()V\n+   #39 = Methodref          #49.#136      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.init:()V\n+   #40 = Methodref          #28.#137      // org/apache/commons/compress/archivers/zip/BitStream.nextBit:()I\n+   #41 = Methodref          #118.#138     // org/apache/commons/compress/archivers/zip/BinaryTree.read:(Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n+   #42 = Methodref          #28.#139      // org/apache/commons/compress/archivers/zip/BitStream.nextByte:()I\n+   #43 = Methodref          #2.#140       // org/apache/commons/compress/archivers/zip/CircularBuffer.put:(I)V\n+   #44 = Methodref          #28.#141      // org/apache/commons/compress/archivers/zip/BitStream.nextBits:(I)J\n    #45 = Long               -1l\n-   #47 = Methodref          #147.#148     // org/apache/commons/compress/utils/ExactMath.add:(IJ)I\n-   #48 = Methodref          #2.#149       // org/apache/commons/compress/archivers/zip/CircularBuffer.copy:(II)V\n-   #49 = Class              #150          // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-   #50 = Class              #151          // java/io/InputStream\n-   #51 = Class              #152          // org/apache/commons/compress/utils/InputStreamStatistics\n+   #47 = Methodref          #142.#143     // org/apache/commons/compress/utils/ExactMath.add:(IJ)I\n+   #48 = Methodref          #2.#144       // org/apache/commons/compress/archivers/zip/CircularBuffer.copy:(II)V\n+   #49 = Class              #145          // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+   #50 = Class              #146          // java/io/InputStream\n+   #51 = Class              #147          // org/apache/commons/compress/utils/InputStreamStatistics\n    #52 = Utf8               in\n    #53 = Utf8               Ljava/io/InputStream;\n    #54 = Utf8               bits\n    #55 = Utf8               Lorg/apache/commons/compress/archivers/zip/BitStream;\n    #56 = Utf8               dictionarySize\n    #57 = Utf8               I\n    #58 = Utf8               numberOfTrees\n@@ -79,113 +79,108 @@\n    #70 = Utf8               (IILjava/io/InputStream;)V\n    #71 = Utf8               Code\n    #72 = Utf8               LineNumberTable\n    #73 = Utf8               LocalVariableTable\n    #74 = Utf8               this\n    #75 = Utf8               Lorg/apache/commons/compress/archivers/zip/ExplodingInputStream;\n    #76 = Utf8               StackMapTable\n-   #77 = Class              #150          // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-   #78 = Class              #151          // java/io/InputStream\n-   #79 = Utf8               init\n-   #80 = Utf8               ()V\n-   #81 = Utf8               i\n-   #82 = Utf8               Lorg/apache/commons/compress/utils/CountingInputStream;\n-   #83 = Class              #120          // org/apache/commons/compress/utils/CountingInputStream\n-   #84 = Class              #131          // java/lang/Throwable\n-   #85 = Utf8               Exceptions\n-   #86 = Utf8               read\n-   #87 = Utf8               ()I\n-   #88 = Utf8               ex\n-   #89 = Utf8               Ljava/lang/IllegalArgumentException;\n-   #90 = Utf8               ret\n-   #91 = Class              #111          // java/lang/IllegalArgumentException\n-   #92 = Utf8               getCompressedCount\n-   #93 = Utf8               ()J\n-   #94 = Utf8               getUncompressedCount\n-   #95 = Utf8               close\n-   #96 = Utf8               fillBuffer\n-   #97 = Utf8               literal\n-   #98 = Utf8               nextByte\n-   #99 = Utf8               distanceLowSize\n-  #100 = Utf8               distanceLow\n-  #101 = Utf8               distanceHigh\n-  #102 = Utf8               distance\n-  #103 = Utf8               length\n-  #104 = Utf8               bit\n-  #105 = Utf8               SourceFile\n-  #106 = Utf8               ExplodingInputStream.java\n-  #107 = NameAndType        #69:#80       // \"<init>\":()V\n-  #108 = Utf8               org/apache/commons/compress/archivers/zip/CircularBuffer\n-  #109 = NameAndType        #69:#153      // \"<init>\":(I)V\n-  #110 = NameAndType        #64:#65       // buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n-  #111 = Utf8               java/lang/IllegalArgumentException\n-  #112 = Utf8               The dictionary size must be 4096 or 8192\n-  #113 = NameAndType        #69:#154      // \"<init>\":(Ljava/lang/String;)V\n-  #114 = Utf8               The number of trees must be 2 or 3\n-  #115 = NameAndType        #56:#57       // dictionarySize:I\n-  #116 = NameAndType        #58:#57       // numberOfTrees:I\n-  #117 = NameAndType        #59:#57       // minimumMatchLength:I\n-  #118 = NameAndType        #52:#53       // in:Ljava/io/InputStream;\n-  #119 = NameAndType        #54:#55       // bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n-  #120 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n-  #121 = Utf8               org/apache/commons/compress/utils/CloseShieldFilterInputStream\n-  #122 = NameAndType        #69:#155      // \"<init>\":(Ljava/io/InputStream;)V\n-  #123 = Class              #156          // org/apache/commons/compress/archivers/zip/BinaryTree\n-  #124 = NameAndType        #157:#158     // decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-  #125 = NameAndType        #60:#61       // literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-  #126 = NameAndType        #62:#61       // lengthTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-  #127 = NameAndType        #63:#61       // distanceTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-  #128 = NameAndType        #68:#67       // treeSizes:J\n-  #129 = NameAndType        #159:#93      // getBytesRead:()J\n-  #130 = NameAndType        #95:#80       // close:()V\n-  #131 = Utf8               java/lang/Throwable\n-  #132 = NameAndType        #160:#161     // addSuppressed:(Ljava/lang/Throwable;)V\n-  #133 = Utf8               org/apache/commons/compress/archivers/zip/BitStream\n-  #134 = NameAndType        #162:#163     // available:()Z\n-  #135 = NameAndType        #96:#80       // fillBuffer:()V\n-  #136 = Utf8               java/io/IOException\n-  #137 = Utf8               bad IMPLODE stream\n-  #138 = NameAndType        #69:#164      // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #139 = NameAndType        #165:#87      // get:()I\n-  #140 = NameAndType        #66:#67       // uncompressedCount:J\n-  #141 = NameAndType        #79:#80       // init:()V\n-  #142 = NameAndType        #166:#87      // nextBit:()I\n-  #143 = NameAndType        #86:#167      // read:(Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n-  #144 = NameAndType        #98:#87       // nextByte:()I\n-  #145 = NameAndType        #168:#153     // put:(I)V\n-  #146 = NameAndType        #169:#170     // nextBits:(I)J\n-  #147 = Class              #171          // org/apache/commons/compress/utils/ExactMath\n-  #148 = NameAndType        #172:#173     // add:(IJ)I\n-  #149 = NameAndType        #174:#175     // copy:(II)V\n-  #150 = Utf8               org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-  #151 = Utf8               java/io/InputStream\n-  #152 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n-  #153 = Utf8               (I)V\n-  #154 = Utf8               (Ljava/lang/String;)V\n-  #155 = Utf8               (Ljava/io/InputStream;)V\n-  #156 = Utf8               org/apache/commons/compress/archivers/zip/BinaryTree\n-  #157 = Utf8               decode\n-  #158 = Utf8               (Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-  #159 = Utf8               getBytesRead\n-  #160 = Utf8               addSuppressed\n-  #161 = Utf8               (Ljava/lang/Throwable;)V\n-  #162 = Utf8               available\n-  #163 = Utf8               ()Z\n-  #164 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #165 = Utf8               get\n-  #166 = Utf8               nextBit\n-  #167 = Utf8               (Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n-  #168 = Utf8               put\n-  #169 = Utf8               nextBits\n-  #170 = Utf8               (I)J\n-  #171 = Utf8               org/apache/commons/compress/utils/ExactMath\n-  #172 = Utf8               add\n-  #173 = Utf8               (IJ)I\n-  #174 = Utf8               copy\n-  #175 = Utf8               (II)V\n+   #77 = Utf8               init\n+   #78 = Utf8               ()V\n+   #79 = Utf8               i\n+   #80 = Utf8               Lorg/apache/commons/compress/utils/CountingInputStream;\n+   #81 = Utf8               Exceptions\n+   #82 = Utf8               read\n+   #83 = Utf8               ()I\n+   #84 = Utf8               ex\n+   #85 = Utf8               Ljava/lang/IllegalArgumentException;\n+   #86 = Utf8               ret\n+   #87 = Utf8               getCompressedCount\n+   #88 = Utf8               ()J\n+   #89 = Utf8               getUncompressedCount\n+   #90 = Utf8               close\n+   #91 = Utf8               fillBuffer\n+   #92 = Utf8               literal\n+   #93 = Utf8               nextByte\n+   #94 = Utf8               distanceLowSize\n+   #95 = Utf8               distanceLow\n+   #96 = Utf8               distanceHigh\n+   #97 = Utf8               distance\n+   #98 = Utf8               length\n+   #99 = Utf8               bit\n+  #100 = Utf8               SourceFile\n+  #101 = Utf8               ExplodingInputStream.java\n+  #102 = NameAndType        #69:#78       // \"<init>\":()V\n+  #103 = Utf8               org/apache/commons/compress/archivers/zip/CircularBuffer\n+  #104 = NameAndType        #69:#148      // \"<init>\":(I)V\n+  #105 = NameAndType        #64:#65       // buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n+  #106 = Utf8               java/lang/IllegalArgumentException\n+  #107 = Utf8               The dictionary size must be 4096 or 8192\n+  #108 = NameAndType        #69:#149      // \"<init>\":(Ljava/lang/String;)V\n+  #109 = Utf8               The number of trees must be 2 or 3\n+  #110 = NameAndType        #56:#57       // dictionarySize:I\n+  #111 = NameAndType        #58:#57       // numberOfTrees:I\n+  #112 = NameAndType        #59:#57       // minimumMatchLength:I\n+  #113 = NameAndType        #52:#53       // in:Ljava/io/InputStream;\n+  #114 = NameAndType        #54:#55       // bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+  #115 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n+  #116 = Utf8               org/apache/commons/compress/utils/CloseShieldFilterInputStream\n+  #117 = NameAndType        #69:#150      // \"<init>\":(Ljava/io/InputStream;)V\n+  #118 = Class              #151          // org/apache/commons/compress/archivers/zip/BinaryTree\n+  #119 = NameAndType        #152:#153     // decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+  #120 = NameAndType        #60:#61       // literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+  #121 = NameAndType        #62:#61       // lengthTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+  #122 = NameAndType        #63:#61       // distanceTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+  #123 = NameAndType        #68:#67       // treeSizes:J\n+  #124 = NameAndType        #154:#88      // getBytesRead:()J\n+  #125 = NameAndType        #90:#78       // close:()V\n+  #126 = Utf8               java/lang/Throwable\n+  #127 = NameAndType        #155:#156     // addSuppressed:(Ljava/lang/Throwable;)V\n+  #128 = Utf8               org/apache/commons/compress/archivers/zip/BitStream\n+  #129 = NameAndType        #157:#158     // available:()Z\n+  #130 = NameAndType        #91:#78       // fillBuffer:()V\n+  #131 = Utf8               java/io/IOException\n+  #132 = Utf8               bad IMPLODE stream\n+  #133 = NameAndType        #69:#159      // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #134 = NameAndType        #160:#83      // get:()I\n+  #135 = NameAndType        #66:#67       // uncompressedCount:J\n+  #136 = NameAndType        #77:#78       // init:()V\n+  #137 = NameAndType        #161:#83      // nextBit:()I\n+  #138 = NameAndType        #82:#162      // read:(Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n+  #139 = NameAndType        #93:#83       // nextByte:()I\n+  #140 = NameAndType        #163:#148     // put:(I)V\n+  #141 = NameAndType        #164:#165     // nextBits:(I)J\n+  #142 = Class              #166          // org/apache/commons/compress/utils/ExactMath\n+  #143 = NameAndType        #167:#168     // add:(IJ)I\n+  #144 = NameAndType        #169:#170     // copy:(II)V\n+  #145 = Utf8               org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+  #146 = Utf8               java/io/InputStream\n+  #147 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n+  #148 = Utf8               (I)V\n+  #149 = Utf8               (Ljava/lang/String;)V\n+  #150 = Utf8               (Ljava/io/InputStream;)V\n+  #151 = Utf8               org/apache/commons/compress/archivers/zip/BinaryTree\n+  #152 = Utf8               decode\n+  #153 = Utf8               (Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+  #154 = Utf8               getBytesRead\n+  #155 = Utf8               addSuppressed\n+  #156 = Utf8               (Ljava/lang/Throwable;)V\n+  #157 = Utf8               available\n+  #158 = Utf8               ()Z\n+  #159 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #160 = Utf8               get\n+  #161 = Utf8               nextBit\n+  #162 = Utf8               (Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n+  #163 = Utf8               put\n+  #164 = Utf8               nextBits\n+  #165 = Utf8               (I)J\n+  #166 = Utf8               org/apache/commons/compress/utils/ExactMath\n+  #167 = Utf8               add\n+  #168 = Utf8               (IJ)I\n+  #169 = Utf8               copy\n+  #170 = Utf8               (II)V\n {\n   private final java.io.InputStream in;\n     descriptor: Ljava/io/InputStream;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private org.apache.commons.compress.archivers.zip.BitStream bits;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/BitStream;\n@@ -300,145 +295,107 @@\n           stack = []\n         frame_type = 19 /* same */\n \n   private void init() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n-      stack=5, locals=6, args_size=1\n+      stack=5, locals=4, args_size=1\n          0: aload_0\n          1: getfield      #14                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n-         4: ifnonnull     166\n+         4: ifnonnull     116\n          7: new           #15                 // class org/apache/commons/compress/utils/CountingInputStream\n         10: dup\n         11: new           #16                 // class org/apache/commons/compress/utils/CloseShieldFilterInputStream\n         14: dup\n         15: aload_0\n         16: getfield      #13                 // Field in:Ljava/io/InputStream;\n         19: invokespecial #17                 // Method org/apache/commons/compress/utils/CloseShieldFilterInputStream.\"<init>\":(Ljava/io/InputStream;)V\n         22: invokespecial #18                 // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n         25: astore_1\n-        26: aconst_null\n-        27: astore_2\n-        28: aload_0\n-        29: getfield      #11                 // Field numberOfTrees:I\n-        32: iconst_3\n-        33: if_icmpne     47\n-        36: aload_0\n-        37: aload_1\n-        38: sipush        256\n-        41: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-        44: putfield      #20                 // Field literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-        47: aload_0\n-        48: aload_1\n-        49: bipush        64\n-        51: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-        54: putfield      #21                 // Field lengthTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-        57: aload_0\n-        58: aload_1\n-        59: bipush        64\n-        61: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-        64: putfield      #22                 // Field distanceTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-        67: aload_0\n-        68: dup\n-        69: getfield      #23                 // Field treeSizes:J\n-        72: aload_1\n-        73: invokevirtual #24                 // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n-        76: ladd\n-        77: putfield      #23                 // Field treeSizes:J\n-        80: aload_1\n-        81: ifnull        151\n-        84: aload_2\n-        85: ifnull        104\n-        88: aload_1\n-        89: invokevirtual #25                 // Method org/apache/commons/compress/utils/CountingInputStream.close:()V\n-        92: goto          151\n-        95: astore_3\n-        96: aload_2\n-        97: aload_3\n-        98: invokevirtual #27                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-       101: goto          151\n-       104: aload_1\n-       105: invokevirtual #25                 // Method org/apache/commons/compress/utils/CountingInputStream.close:()V\n-       108: goto          151\n-       111: astore_3\n-       112: aload_3\n-       113: astore_2\n-       114: aload_3\n-       115: athrow\n-       116: astore        4\n-       118: aload_1\n-       119: ifnull        148\n-       122: aload_2\n-       123: ifnull        144\n-       126: aload_1\n-       127: invokevirtual #25                 // Method org/apache/commons/compress/utils/CountingInputStream.close:()V\n-       130: goto          148\n-       133: astore        5\n-       135: aload_2\n-       136: aload         5\n-       138: invokevirtual #27                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-       141: goto          148\n-       144: aload_1\n-       145: invokevirtual #25                 // Method org/apache/commons/compress/utils/CountingInputStream.close:()V\n-       148: aload         4\n-       150: athrow\n-       151: aload_0\n-       152: new           #28                 // class org/apache/commons/compress/archivers/zip/BitStream\n-       155: dup\n-       156: aload_0\n-       157: getfield      #13                 // Field in:Ljava/io/InputStream;\n-       160: invokespecial #29                 // Method org/apache/commons/compress/archivers/zip/BitStream.\"<init>\":(Ljava/io/InputStream;)V\n-       163: putfield      #14                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n-       166: return\n+        26: aload_0\n+        27: getfield      #11                 // Field numberOfTrees:I\n+        30: iconst_3\n+        31: if_icmpne     45\n+        34: aload_0\n+        35: aload_1\n+        36: sipush        256\n+        39: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+        42: putfield      #20                 // Field literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+        45: aload_0\n+        46: aload_1\n+        47: bipush        64\n+        49: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+        52: putfield      #21                 // Field lengthTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+        55: aload_0\n+        56: aload_1\n+        57: bipush        64\n+        59: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+        62: putfield      #22                 // Field distanceTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+        65: aload_0\n+        66: dup\n+        67: getfield      #23                 // Field treeSizes:J\n+        70: aload_1\n+        71: invokevirtual #24                 // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+        74: ladd\n+        75: putfield      #23                 // Field treeSizes:J\n+        78: aload_1\n+        79: invokevirtual #25                 // Method org/apache/commons/compress/utils/CountingInputStream.close:()V\n+        82: goto          101\n+        85: astore_2\n+        86: aload_1\n+        87: invokevirtual #25                 // Method org/apache/commons/compress/utils/CountingInputStream.close:()V\n+        90: goto          99\n+        93: astore_3\n+        94: aload_2\n+        95: aload_3\n+        96: invokevirtual #27                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+        99: aload_2\n+       100: athrow\n+       101: aload_0\n+       102: new           #28                 // class org/apache/commons/compress/archivers/zip/BitStream\n+       105: dup\n+       106: aload_0\n+       107: getfield      #13                 // Field in:Ljava/io/InputStream;\n+       110: invokespecial #29                 // Method org/apache/commons/compress/archivers/zip/BitStream.\"<init>\":(Ljava/io/InputStream;)V\n+       113: putfield      #14                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+       116: return\n       Exception table:\n          from    to  target type\n-            88    92    95   Class java/lang/Throwable\n-            28    80   111   Class java/lang/Throwable\n-            28    80   116   any\n-           126   130   133   Class java/lang/Throwable\n-           111   118   116   any\n+            26    78    85   Class java/lang/Throwable\n+            86    90    93   Class java/lang/Throwable\n       LineNumberTable:\n         line 100: 0\n         line 102: 7\n-        line 103: 28\n-        line 104: 36\n-        line 107: 47\n-        line 108: 57\n-        line 109: 67\n-        line 110: 80\n-        line 102: 111\n-        line 110: 116\n-        line 112: 151\n-        line 114: 166\n+        line 103: 26\n+        line 104: 34\n+        line 107: 45\n+        line 108: 55\n+        line 109: 65\n+        line 110: 78\n+        line 102: 85\n+        line 112: 101\n+        line 114: 116\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           26     125     1     i   Lorg/apache/commons/compress/utils/CountingInputStream;\n-            0     167     0  this   Lorg/apache/commons/compress/archivers/zip/ExplodingInputStream;\n-      StackMapTable: number_of_entries = 10\n-        frame_type = 253 /* append */\n-          offset_delta = 47\n-          locals = [ class org/apache/commons/compress/utils/CountingInputStream, class java/lang/Throwable ]\n-        frame_type = 111 /* same_locals_1_stack_item */\n-          stack = [ class java/lang/Throwable ]\n-        frame_type = 8 /* same */\n-        frame_type = 70 /* same_locals_1_stack_item */\n-          stack = [ class java/lang/Throwable ]\n-        frame_type = 68 /* same_locals_1_stack_item */\n+           26      75     1     i   Lorg/apache/commons/compress/utils/CountingInputStream;\n+            0     117     0  this   Lorg/apache/commons/compress/archivers/zip/ExplodingInputStream;\n+      StackMapTable: number_of_entries = 6\n+        frame_type = 252 /* append */\n+          offset_delta = 45\n+          locals = [ class org/apache/commons/compress/utils/CountingInputStream ]\n+        frame_type = 103 /* same_locals_1_stack_item */\n           stack = [ class java/lang/Throwable ]\n         frame_type = 255 /* full_frame */\n-          offset_delta = 16\n-          locals = [ class org/apache/commons/compress/archivers/zip/ExplodingInputStream, class org/apache/commons/compress/utils/CountingInputStream, class java/lang/Throwable, top, class java/lang/Throwable ]\n+          offset_delta = 7\n+          locals = [ class org/apache/commons/compress/archivers/zip/ExplodingInputStream, class org/apache/commons/compress/utils/CountingInputStream, class java/lang/Throwable ]\n           stack = [ class java/lang/Throwable ]\n-        frame_type = 10 /* same */\n-        frame_type = 3 /* same */\n-        frame_type = 255 /* full_frame */\n-          offset_delta = 2\n-          locals = [ class org/apache/commons/compress/archivers/zip/ExplodingInputStream ]\n-          stack = []\n+        frame_type = 5 /* same */\n+        frame_type = 249 /* chop */\n+          offset_delta = 1\n         frame_type = 14 /* same */\n     Exceptions:\n       throws java.io.IOException\n \n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n"}]}
