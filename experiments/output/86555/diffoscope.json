{"diffoscope-json-version": 1, "source1": "first/EventListenerSupport.class", "source2": "second/EventListenerSupport.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -83,23 +83,23 @@\n                 testObjectOutputStream = new ObjectOutputStream(new ByteArrayOutputStream());\n             }\n         }\n         objectOutputStream.writeObject(serializableListeners.toArray(this.prototypeArray));\n     }\n     \n     private void readObject(final ObjectInputStream objectInputStream) throws IOException, ClassNotFoundException {\n-        final L[] srcListeners = (L[])objectInputStream.readObject();\n-        this.listeners = new CopyOnWriteArrayList<L>(srcListeners);\n+        final Object[] srcListeners = (Object[])objectInputStream.readObject();\n+        this.listeners = new CopyOnWriteArrayList<L>((L[])srcListeners);\n         final Class<L> listenerInterface = (Class<L>)srcListeners.getClass().getComponentType();\n         this.initializeTransientFields(listenerInterface, Thread.currentThread().getContextClassLoader());\n     }\n     \n     private void initializeTransientFields(final Class<L> listenerInterface, final ClassLoader classLoader) {\n-        final L[] array = (L[])Array.newInstance(listenerInterface, 0);\n-        this.prototypeArray = array;\n+        final Object[] array = (Object[])Array.newInstance(listenerInterface, 0);\n+        this.prototypeArray = (L[])array;\n         this.createProxy(listenerInterface, classLoader);\n     }\n     \n     private void createProxy(final Class<L> listenerInterface, final ClassLoader classLoader) {\n         this.proxy = listenerInterface.cast(Proxy.newProxyInstance(classLoader, (Class<?>[])new Class[] { listenerInterface }, this.createInvocationHandler()));\n     }\n     \n"}]}
