{"diffoscope-json-version": 1, "source1": "first/Expander.class", "source2": "second/Expander.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -20,15 +20,15 @@\n import java.nio.file.Files;\n import java.nio.file.OpenOption;\n import java.io.File;\n \n public class Expander\n {\n     public void expand(final File file, final File file2) throws IOException, ArchiveException {\n-        String detect = null;\n+        String detect;\n         try (final BufferedInputStream bufferedInputStream = new BufferedInputStream(Files.newInputStream(file.toPath(), new OpenOption[0]))) {\n             new ArchiveStreamFactory();\n             detect = ArchiveStreamFactory.detect((InputStream)bufferedInputStream);\n         }\n         this.expand(detect, file, file2);\n     }\n     \n@@ -67,25 +67,25 @@\n     }\n     \n     @Deprecated\n     public void expand(final String s, final SeekableByteChannel seekableByteChannel, final File file) throws IOException, ArchiveException {\n         this.expand(s, seekableByteChannel, file, CloseableConsumer.NULL_CONSUMER);\n     }\n     \n-    public void expand(final String str, final SeekableByteChannel ch, final File file, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n+    public void expand(final String s, final SeekableByteChannel ch, final File file, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n         try (final CloseableConsumerAdapter closeableConsumerAdapter = new CloseableConsumerAdapter(closeableConsumer)) {\n-            if (!this.prefersSeekableByteChannel(str)) {\n-                this.expand(str, (InputStream)closeableConsumerAdapter.track((Closeable)Channels.newInputStream(ch)), file);\n+            if (!this.prefersSeekableByteChannel(s)) {\n+                this.expand(s, (InputStream)closeableConsumerAdapter.track((Closeable)Channels.newInputStream(ch)), file);\n             }\n-            else if (\"zip\".equalsIgnoreCase(str)) {\n+            else if (\"zip\".equalsIgnoreCase(s)) {\n                 this.expand((ZipFile)closeableConsumerAdapter.track((Closeable)new ZipFile(ch)), file);\n             }\n             else {\n-                if (!\"7z\".equalsIgnoreCase(str)) {\n-                    throw new ArchiveException(\"Don't know how to handle format \" + str);\n+                if (!\"7z\".equalsIgnoreCase(s)) {\n+                    throw new ArchiveException(\"Don't know how to handle format \" + s);\n                 }\n                 this.expand((SevenZFile)closeableConsumerAdapter.track((Closeable)new SevenZFile(ch)), file);\n             }\n         }\n     }\n     \n     public void expand(final ArchiveInputStream archiveInputStream, final File file) throws IOException, ArchiveException {\n@@ -100,34 +100,34 @@\n         this.expand((Expander.ArchiveEntrySupplier)new Expander.Expander$5(this, sevenZFile), (Expander.EntryWriter)new Expander.Expander$6(this, sevenZFile), file);\n     }\n     \n     private boolean prefersSeekableByteChannel(final String s) {\n         return \"zip\".equalsIgnoreCase(s) || \"7z\".equalsIgnoreCase(s);\n     }\n     \n-    private void expand(final Expander.ArchiveEntrySupplier archiveEntrySupplier, final Expander.EntryWriter entryWriter, final File file) throws IOException {\n-        String s = file.getCanonicalPath();\n-        if (!s.endsWith(File.separator)) {\n-            s += File.separator;\n+    private void expand(final Expander.ArchiveEntrySupplier archiveEntrySupplier, final Expander.EntryWriter entryWriter, final File parent) throws IOException {\n+        String canonicalPath = parent.getCanonicalPath();\n+        if (!canonicalPath.endsWith(File.separator)) {\n+            canonicalPath += File.separator;\n         }\n         for (ArchiveEntry archiveEntry = archiveEntrySupplier.getNextReadableEntry(); archiveEntry != null; archiveEntry = archiveEntrySupplier.getNextReadableEntry()) {\n-            final File obj = new File(file, archiveEntry.getName());\n-            if (!obj.getCanonicalPath().startsWith(s)) {\n-                throw new IOException(\"Expanding \" + archiveEntry.getName() + \" would create file outside of \" + file);\n+            final File file = new File(parent, archiveEntry.getName());\n+            if (!file.getCanonicalPath().startsWith(canonicalPath)) {\n+                throw new IOException(\"Expanding \" + archiveEntry.getName() + \" would create file outside of \" + parent);\n             }\n             if (archiveEntry.isDirectory()) {\n-                if (!obj.isDirectory() && !obj.mkdirs()) {\n-                    throw new IOException(\"Failed to create directory \" + obj);\n+                if (!file.isDirectory() && !file.mkdirs()) {\n+                    throw new IOException(\"Failed to create directory \" + file);\n                 }\n             }\n             else {\n-                final File parentFile = obj.getParentFile();\n+                final File parentFile = file.getParentFile();\n                 if (!parentFile.isDirectory() && !parentFile.mkdirs()) {\n                     throw new IOException(\"Failed to create directory \" + parentFile);\n                 }\n-                try (final OutputStream outputStream = Files.newOutputStream(obj.toPath(), new OpenOption[0])) {\n+                try (final OutputStream outputStream = Files.newOutputStream(file.toPath(), new OpenOption[0])) {\n                     entryWriter.writeEntryDataTo(archiveEntry, outputStream);\n                 }\n             }\n         }\n     }\n }\n"}]}
