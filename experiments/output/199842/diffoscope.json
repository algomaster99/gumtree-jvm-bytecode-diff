{"diffoscope-json-version": 1, "source1": "first/LocalVariables.class", "source2": "second/LocalVariables.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,43 +7,43 @@\n import java.util.Arrays;\n import org.apache.bcel.generic.Type;\n \n public class LocalVariables implements Cloneable\n {\n     private final Type[] locals;\n     \n-    public LocalVariables(final int localVariableCount) {\n-        Arrays.fill(this.locals = new Type[localVariableCount], Type.UNKNOWN);\n+    public LocalVariables(final int n) {\n+        Arrays.fill(this.locals = new Type[n], Type.UNKNOWN);\n     }\n     \n     public Object clone() {\n-        final LocalVariables lvs = new LocalVariables(this.locals.length);\n-        System.arraycopy(this.locals, 0, lvs.locals, 0, this.locals.length);\n-        return lvs;\n+        final LocalVariables localVariables = new LocalVariables(this.locals.length);\n+        System.arraycopy(this.locals, 0, localVariables.locals, 0, this.locals.length);\n+        return localVariables;\n     }\n     \n     @Override\n     public boolean equals(final Object o) {\n         if (!(o instanceof LocalVariables)) {\n             return false;\n         }\n-        final LocalVariables lv = (LocalVariables)o;\n-        if (this.locals.length != lv.locals.length) {\n+        final LocalVariables localVariables = (LocalVariables)o;\n+        if (this.locals.length != localVariables.locals.length) {\n             return false;\n         }\n         for (int i = 0; i < this.locals.length; ++i) {\n-            if (!this.locals[i].equals((Object)lv.locals[i])) {\n+            if (!this.locals[i].equals((Object)localVariables.locals[i])) {\n                 return false;\n             }\n         }\n         return true;\n     }\n     \n-    public Type get(final int slotIndex) {\n-        return this.locals[slotIndex];\n+    public Type get(final int n) {\n+        return this.locals[n];\n     }\n     \n     public LocalVariables getClone() {\n         return (LocalVariables)this.clone();\n     }\n     \n     @Override\n@@ -59,57 +59,57 @@\n         }\n     }\n     \n     public int maxLocals() {\n         return this.locals.length;\n     }\n     \n-    public void merge(final LocalVariables localVariable) {\n-        if (this.locals.length != localVariable.locals.length) {\n+    public void merge(final LocalVariables localVariables) {\n+        if (this.locals.length != localVariables.locals.length) {\n             throw new AssertionViolatedException(\"Merging LocalVariables of different size?!? From different methods or what?!?\");\n         }\n         for (int i = 0; i < this.locals.length; ++i) {\n-            this.merge(localVariable, i);\n+            this.merge(localVariables, i);\n         }\n     }\n     \n-    private void merge(final LocalVariables lv, final int i) {\n+    private void merge(final LocalVariables localVariables, final int n) {\n         try {\n-            if (!(this.locals[i] instanceof UninitializedObjectType) && lv.locals[i] instanceof UninitializedObjectType) {\n+            if (!(this.locals[n] instanceof UninitializedObjectType) && localVariables.locals[n] instanceof UninitializedObjectType) {\n                 throw new StructuralCodeConstraintException(\"Backwards branch with an uninitialized object in the local variables detected.\");\n             }\n-            if (!this.locals[i].equals((Object)lv.locals[i]) && this.locals[i] instanceof UninitializedObjectType && lv.locals[i] instanceof UninitializedObjectType) {\n+            if (!this.locals[n].equals((Object)localVariables.locals[n]) && this.locals[n] instanceof UninitializedObjectType && localVariables.locals[n] instanceof UninitializedObjectType) {\n                 throw new StructuralCodeConstraintException(\"Backwards branch with an uninitialized object in the local variables detected.\");\n             }\n-            if (this.locals[i] instanceof UninitializedObjectType && !(lv.locals[i] instanceof UninitializedObjectType)) {\n-                this.locals[i] = (Type)((UninitializedObjectType)this.locals[i]).getInitialized();\n+            if (this.locals[n] instanceof UninitializedObjectType && !(localVariables.locals[n] instanceof UninitializedObjectType)) {\n+                this.locals[n] = (Type)((UninitializedObjectType)this.locals[n]).getInitialized();\n             }\n-            if (this.locals[i] instanceof ReferenceType && lv.locals[i] instanceof ReferenceType) {\n-                if (!this.locals[i].equals((Object)lv.locals[i])) {\n-                    final Type sup = (Type)((ReferenceType)this.locals[i]).getFirstCommonSuperclass((ReferenceType)lv.locals[i]);\n-                    if (sup == null) {\n-                        throw new AssertionViolatedException(\"Could not load all the super classes of '\" + this.locals[i] + \"' and '\" + lv.locals[i] + \"'.\");\n+            if (this.locals[n] instanceof ReferenceType && localVariables.locals[n] instanceof ReferenceType) {\n+                if (!this.locals[n].equals((Object)localVariables.locals[n])) {\n+                    final ReferenceType firstCommonSuperclass = ((ReferenceType)this.locals[n]).getFirstCommonSuperclass((ReferenceType)localVariables.locals[n]);\n+                    if (firstCommonSuperclass == null) {\n+                        throw new AssertionViolatedException(\"Could not load all the super classes of '\" + this.locals[n] + \"' and '\" + localVariables.locals[n] + \"'.\");\n                     }\n-                    this.locals[i] = sup;\n+                    this.locals[n] = (Type)firstCommonSuperclass;\n                 }\n             }\n-            else if (!this.locals[i].equals((Object)lv.locals[i])) {\n-                this.locals[i] = Type.UNKNOWN;\n+            else if (!this.locals[n].equals((Object)localVariables.locals[n])) {\n+                this.locals[n] = Type.UNKNOWN;\n             }\n         }\n-        catch (final ClassNotFoundException e) {\n-            throw new AssertionViolatedException(\"Missing class: \" + e, (Throwable)e);\n+        catch (final ClassNotFoundException obj) {\n+            throw new AssertionViolatedException(\"Missing class: \" + obj, (Throwable)obj);\n         }\n     }\n     \n-    public void set(final int slotIndex, final Type type) {\n-        if (type == Type.BYTE || type == Type.SHORT || type == Type.BOOLEAN || type == Type.CHAR) {\n-            throw new AssertionViolatedException(\"LocalVariables do not know about '\" + type + \"'. Use Type.INT instead.\");\n+    public void set(final int n, final Type obj) {\n+        if (obj == Type.BYTE || obj == Type.SHORT || obj == Type.BOOLEAN || obj == Type.CHAR) {\n+            throw new AssertionViolatedException(\"LocalVariables do not know about '\" + obj + \"'. Use Type.INT instead.\");\n         }\n-        this.locals[slotIndex] = type;\n+        this.locals[n] = obj;\n     }\n     \n     @Override\n     public String toString() {\n         final StringBuilder sb = new StringBuilder();\n         for (int i = 0; i < this.locals.length; ++i) {\n             sb.append(Integer.toString(i));\n"}]}
