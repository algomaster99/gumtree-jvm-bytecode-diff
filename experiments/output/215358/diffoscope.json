{"diffoscope-json-version": 1, "source1": "first/AnnotationEntry.class", "source2": "second/AnnotationEntry.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,27 +13,27 @@\n public class AnnotationEntry implements Node\n {\n     private final int typeIndex;\n     private final ConstantPool constantPool;\n     private final boolean isRuntimeVisible;\n     private List<ElementValuePair> elementValuePairs;\n     \n-    public static AnnotationEntry read(final DataInput input, final ConstantPool constant_pool, final boolean isRuntimeVisible) throws IOException {\n-        final AnnotationEntry annotationEntry = new AnnotationEntry(input.readUnsignedShort(), constant_pool, isRuntimeVisible);\n-        final int num_element_value_pairs = input.readUnsignedShort();\n+    public static AnnotationEntry read(final DataInput dataInput, final ConstantPool constantPool, final boolean b) throws IOException {\n+        final AnnotationEntry annotationEntry = new AnnotationEntry(dataInput.readUnsignedShort(), constantPool, b);\n+        final int unsignedShort = dataInput.readUnsignedShort();\n         annotationEntry.elementValuePairs = new ArrayList<ElementValuePair>();\n-        for (int i = 0; i < num_element_value_pairs; ++i) {\n-            annotationEntry.elementValuePairs.add(new ElementValuePair(input.readUnsignedShort(), ElementValue.readElementValue(input, constant_pool), constant_pool));\n+        for (int i = 0; i < unsignedShort; ++i) {\n+            annotationEntry.elementValuePairs.add(new ElementValuePair(dataInput.readUnsignedShort(), ElementValue.readElementValue(dataInput, constantPool), constantPool));\n         }\n         return annotationEntry;\n     }\n     \n-    public AnnotationEntry(final int type_index, final ConstantPool constant_pool, final boolean isRuntimeVisible) {\n-        this.typeIndex = type_index;\n-        this.constantPool = constant_pool;\n+    public AnnotationEntry(final int typeIndex, final ConstantPool constantPool, final boolean isRuntimeVisible) {\n+        this.typeIndex = typeIndex;\n+        this.constantPool = constantPool;\n         this.isRuntimeVisible = isRuntimeVisible;\n     }\n     \n     public int getTypeIndex() {\n         return this.typeIndex;\n     }\n     \n@@ -41,71 +41,71 @@\n         return this.constantPool;\n     }\n     \n     public boolean isRuntimeVisible() {\n         return this.isRuntimeVisible;\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitAnnotationEntry(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitAnnotationEntry(this);\n     }\n     \n     public String getAnnotationType() {\n-        final ConstantUtf8 c = (ConstantUtf8)this.constantPool.getConstant(this.typeIndex, (byte)1);\n-        return c.getBytes();\n+        return ((ConstantUtf8)this.constantPool.getConstant(this.typeIndex, (byte)1)).getBytes();\n     }\n     \n     public int getAnnotationTypeIndex() {\n         return this.typeIndex;\n     }\n     \n     public final int getNumElementValuePairs() {\n         return this.elementValuePairs.size();\n     }\n     \n     public ElementValuePair[] getElementValuePairs() {\n         return this.elementValuePairs.toArray(new ElementValuePair[this.elementValuePairs.size()]);\n     }\n     \n-    public void dump(final DataOutputStream dos) throws IOException {\n-        dos.writeShort(this.typeIndex);\n-        dos.writeShort(this.elementValuePairs.size());\n-        for (final ElementValuePair envp : this.elementValuePairs) {\n-            envp.dump(dos);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.typeIndex);\n+        dataOutputStream.writeShort(this.elementValuePairs.size());\n+        final Iterator<ElementValuePair> iterator = this.elementValuePairs.iterator();\n+        while (iterator.hasNext()) {\n+            ((ElementValuePair)iterator.next()).dump(dataOutputStream);\n         }\n     }\n     \n-    public void addElementNameValuePair(final ElementValuePair elementNameValuePair) {\n-        this.elementValuePairs.add(elementNameValuePair);\n+    public void addElementNameValuePair(final ElementValuePair elementValuePair) {\n+        this.elementValuePairs.add(elementValuePair);\n     }\n     \n     public String toShortString() {\n-        final StringBuilder result = new StringBuilder();\n-        result.append(\"@\");\n-        result.append(this.getAnnotationType());\n-        final ElementValuePair[] evPairs = this.getElementValuePairs();\n-        if (evPairs.length > 0) {\n-            result.append(\"(\");\n-            for (final ElementValuePair element : evPairs) {\n-                result.append(element.toShortString());\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"@\");\n+        sb.append(this.getAnnotationType());\n+        final ElementValuePair[] elementValuePairs = this.getElementValuePairs();\n+        if (elementValuePairs.length > 0) {\n+            sb.append(\"(\");\n+            final ElementValuePair[] array = elementValuePairs;\n+            for (int length = array.length, i = 0; i < length; ++i) {\n+                sb.append(array[i].toShortString());\n             }\n-            result.append(\")\");\n+            sb.append(\")\");\n         }\n-        return result.toString();\n+        return sb.toString();\n     }\n     \n     @Override\n     public String toString() {\n         return this.toShortString();\n     }\n     \n-    public static AnnotationEntry[] createAnnotationEntries(final Attribute[] attrs) {\n-        final List<AnnotationEntry> accumulatedAnnotations = new ArrayList<AnnotationEntry>(attrs.length);\n-        for (final Attribute attribute : attrs) {\n+    public static AnnotationEntry[] createAnnotationEntries(final Attribute[] array) {\n+        final ArrayList c = new ArrayList(array.length);\n+        for (final Attribute attribute : array) {\n             if (attribute instanceof Annotations) {\n-                final Annotations runtimeAnnotations = (Annotations)attribute;\n-                Collections.addAll(accumulatedAnnotations, runtimeAnnotations.getAnnotationEntries());\n+                Collections.addAll(c, ((Annotations)attribute).getAnnotationEntries());\n             }\n         }\n-        return accumulatedAnnotations.toArray(new AnnotationEntry[accumulatedAnnotations.size()]);\n+        return (AnnotationEntry[])c.toArray(new AnnotationEntry[c.size()]);\n     }\n }\n"}]}
