{"diffoscope-json-version": 1, "source1": "first/ConfigurationLoader.class", "source2": "second/ConfigurationLoader.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,17 +1,15 @@\n \n package com.puppycrawl.tools.checkstyle;\n \n import java.util.Iterator;\n-import java.util.List;\n import java.util.Collection;\n import java.util.ArrayList;\n import org.xml.sax.SAXParseException;\n import java.util.Locale;\n-import java.net.URI;\n import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n import com.puppycrawl.tools.checkstyle.api.CheckstyleException;\n import java.io.IOException;\n import com.puppycrawl.tools.checkstyle.api.Configuration;\n import org.xml.sax.InputSource;\n import java.util.HashMap;\n import java.util.Map;\n@@ -37,133 +35,128 @@\n     private static final char DOLLAR_SIGN = '$';\n     private static final String DOLLAR_SIGN_STRING;\n     private final ConfigurationLoader.InternalLoader saxHandler;\n     private final PropertyResolver overridePropsResolver;\n     private final boolean omitIgnoredModules;\n     private final ThreadModeSettings threadModeSettings;\n     \n-    private ConfigurationLoader(final PropertyResolver overrideProps, final boolean omitIgnoredModules, final ThreadModeSettings threadModeSettings) throws ParserConfigurationException, SAXException {\n+    private ConfigurationLoader(final PropertyResolver overridePropsResolver, final boolean omitIgnoredModules, final ThreadModeSettings threadModeSettings) throws ParserConfigurationException, SAXException {\n         this.saxHandler = new ConfigurationLoader.InternalLoader(this);\n-        this.overridePropsResolver = overrideProps;\n+        this.overridePropsResolver = overridePropsResolver;\n         this.omitIgnoredModules = omitIgnoredModules;\n         this.threadModeSettings = threadModeSettings;\n     }\n     \n     private static Map<String, String> createIdToResourceNameMap() {\n-        final Map<String, String> map = new HashMap<String, String>();\n-        map.put(\"-//Puppy Crawl//DTD Check Configuration 1.0//EN\", \"com/puppycrawl/tools/checkstyle/configuration_1_0.dtd\");\n-        map.put(\"-//Puppy Crawl//DTD Check Configuration 1.1//EN\", \"com/puppycrawl/tools/checkstyle/configuration_1_1.dtd\");\n-        map.put(\"-//Puppy Crawl//DTD Check Configuration 1.2//EN\", \"com/puppycrawl/tools/checkstyle/configuration_1_2.dtd\");\n-        map.put(\"-//Puppy Crawl//DTD Check Configuration 1.3//EN\", \"com/puppycrawl/tools/checkstyle/configuration_1_3.dtd\");\n-        map.put(\"-//Checkstyle//DTD Checkstyle Configuration 1.0//EN\", \"com/puppycrawl/tools/checkstyle/configuration_1_0.dtd\");\n-        map.put(\"-//Checkstyle//DTD Checkstyle Configuration 1.1//EN\", \"com/puppycrawl/tools/checkstyle/configuration_1_1.dtd\");\n-        map.put(\"-//Checkstyle//DTD Checkstyle Configuration 1.2//EN\", \"com/puppycrawl/tools/checkstyle/configuration_1_2.dtd\");\n-        map.put(\"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\", \"com/puppycrawl/tools/checkstyle/configuration_1_3.dtd\");\n-        return map;\n+        final HashMap hashMap = new HashMap();\n+        hashMap.put(\"-//Puppy Crawl//DTD Check Configuration 1.0//EN\", \"com/puppycrawl/tools/checkstyle/configuration_1_0.dtd\");\n+        hashMap.put(\"-//Puppy Crawl//DTD Check Configuration 1.1//EN\", \"com/puppycrawl/tools/checkstyle/configuration_1_1.dtd\");\n+        hashMap.put(\"-//Puppy Crawl//DTD Check Configuration 1.2//EN\", \"com/puppycrawl/tools/checkstyle/configuration_1_2.dtd\");\n+        hashMap.put(\"-//Puppy Crawl//DTD Check Configuration 1.3//EN\", \"com/puppycrawl/tools/checkstyle/configuration_1_3.dtd\");\n+        hashMap.put(\"-//Checkstyle//DTD Checkstyle Configuration 1.0//EN\", \"com/puppycrawl/tools/checkstyle/configuration_1_0.dtd\");\n+        hashMap.put(\"-//Checkstyle//DTD Checkstyle Configuration 1.1//EN\", \"com/puppycrawl/tools/checkstyle/configuration_1_1.dtd\");\n+        hashMap.put(\"-//Checkstyle//DTD Checkstyle Configuration 1.2//EN\", \"com/puppycrawl/tools/checkstyle/configuration_1_2.dtd\");\n+        hashMap.put(\"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\", \"com/puppycrawl/tools/checkstyle/configuration_1_3.dtd\");\n+        return hashMap;\n     }\n     \n-    private Configuration parseInputSource(final InputSource source) throws IOException, SAXException {\n-        this.saxHandler.parseInputSource(source);\n+    private Configuration parseInputSource(final InputSource inputSource) throws IOException, SAXException {\n+        this.saxHandler.parseInputSource(inputSource);\n         return this.saxHandler.configuration;\n     }\n     \n-    public static Configuration loadConfiguration(final String config, final PropertyResolver overridePropsResolver) throws CheckstyleException {\n-        return loadConfiguration(config, overridePropsResolver, ConfigurationLoader.IgnoredModulesOptions.EXECUTE);\n+    public static Configuration loadConfiguration(final String s, final PropertyResolver propertyResolver) throws CheckstyleException {\n+        return loadConfiguration(s, propertyResolver, ConfigurationLoader.IgnoredModulesOptions.EXECUTE);\n     }\n     \n-    public static Configuration loadConfiguration(final String config, final PropertyResolver overridePropsResolver, final ThreadModeSettings threadModeSettings) throws CheckstyleException {\n-        return loadConfiguration(config, overridePropsResolver, ConfigurationLoader.IgnoredModulesOptions.EXECUTE, threadModeSettings);\n+    public static Configuration loadConfiguration(final String s, final PropertyResolver propertyResolver, final ThreadModeSettings threadModeSettings) throws CheckstyleException {\n+        return loadConfiguration(s, propertyResolver, ConfigurationLoader.IgnoredModulesOptions.EXECUTE, threadModeSettings);\n     }\n     \n-    public static Configuration loadConfiguration(final String config, final PropertyResolver overridePropsResolver, final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions) throws CheckstyleException {\n-        return loadConfiguration(config, overridePropsResolver, ignoredModulesOptions, ThreadModeSettings.SINGLE_THREAD_MODE_INSTANCE);\n+    public static Configuration loadConfiguration(final String s, final PropertyResolver propertyResolver, final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions) throws CheckstyleException {\n+        return loadConfiguration(s, propertyResolver, ignoredModulesOptions, ThreadModeSettings.SINGLE_THREAD_MODE_INSTANCE);\n     }\n     \n-    public static Configuration loadConfiguration(final String config, final PropertyResolver overridePropsResolver, final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions, final ThreadModeSettings threadModeSettings) throws CheckstyleException {\n-        final URI uri = CommonUtil.getUriByFilename(config);\n-        final InputSource source = new InputSource(uri.toString());\n-        return loadConfiguration(source, overridePropsResolver, ignoredModulesOptions, threadModeSettings);\n+    public static Configuration loadConfiguration(final String s, final PropertyResolver propertyResolver, final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions, final ThreadModeSettings threadModeSettings) throws CheckstyleException {\n+        return loadConfiguration(new InputSource(CommonUtil.getUriByFilename(s).toString()), propertyResolver, ignoredModulesOptions, threadModeSettings);\n     }\n     \n-    public static Configuration loadConfiguration(final InputSource configSource, final PropertyResolver overridePropsResolver, final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions) throws CheckstyleException {\n-        return loadConfiguration(configSource, overridePropsResolver, ignoredModulesOptions, ThreadModeSettings.SINGLE_THREAD_MODE_INSTANCE);\n+    public static Configuration loadConfiguration(final InputSource inputSource, final PropertyResolver propertyResolver, final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions) throws CheckstyleException {\n+        return loadConfiguration(inputSource, propertyResolver, ignoredModulesOptions, ThreadModeSettings.SINGLE_THREAD_MODE_INSTANCE);\n     }\n     \n-    public static Configuration loadConfiguration(final InputSource configSource, final PropertyResolver overridePropsResolver, final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions, final ThreadModeSettings threadModeSettings) throws CheckstyleException {\n+    public static Configuration loadConfiguration(final InputSource inputSource, final PropertyResolver propertyResolver, final ConfigurationLoader.IgnoredModulesOptions ignoredModulesOptions, final ThreadModeSettings threadModeSettings) throws CheckstyleException {\n         try {\n-            final boolean omitIgnoreModules = ignoredModulesOptions == ConfigurationLoader.IgnoredModulesOptions.OMIT;\n-            final ConfigurationLoader loader = new ConfigurationLoader(overridePropsResolver, omitIgnoreModules, threadModeSettings);\n-            return loader.parseInputSource(configSource);\n+            return new ConfigurationLoader(propertyResolver, ignoredModulesOptions == ConfigurationLoader.IgnoredModulesOptions.OMIT, threadModeSettings).parseInputSource(inputSource);\n         }\n         catch (final SAXParseException ex) {\n-            final String message = String.format(Locale.ROOT, \"%s - %s:%s:%s\", \"unable to parse configuration stream\", ex.getMessage(), Integer.valueOf(ex.getLineNumber()), Integer.valueOf(ex.getColumnNumber()));\n-            throw new CheckstyleException(message, (Throwable)ex);\n+            throw new CheckstyleException(String.format(Locale.ROOT, \"%s - %s:%s:%s\", \"unable to parse configuration stream\", ex.getMessage(), Integer.valueOf(ex.getLineNumber()), Integer.valueOf(ex.getColumnNumber())), (Throwable)ex);\n         }\n         catch (final ParserConfigurationException | IOException | SAXException ex2) {\n             throw new CheckstyleException(\"unable to parse configuration stream\", (Throwable)ex2);\n         }\n     }\n     \n-    private static String replaceProperties(final String value, final PropertyResolver props, final String defaultValue) throws CheckstyleException {\n-        final List<String> fragments = new ArrayList<String>();\n-        final List<String> propertyRefs = new ArrayList<String>();\n-        parsePropertyString(value, fragments, propertyRefs);\n+    private static String replaceProperties(final String s, final PropertyResolver propertyResolver, final String str) throws CheckstyleException {\n+        final ArrayList list = new ArrayList();\n+        final ArrayList list2 = new ArrayList();\n+        parsePropertyString(s, list, list2);\n         final StringBuilder sb = new StringBuilder(256);\n-        final Iterator<String> fragmentsIterator = fragments.iterator();\n-        final Iterator<String> propertyRefsIterator = propertyRefs.iterator();\n-        while (fragmentsIterator.hasNext()) {\n-            String fragment = (String)fragmentsIterator.next();\n-            if (fragment == null) {\n-                final String propertyName = (String)propertyRefsIterator.next();\n-                fragment = props.resolve(propertyName);\n-                if (fragment == null) {\n-                    if (defaultValue != null) {\n-                        sb.replace(0, sb.length(), defaultValue);\n+        final Iterator iterator = list.iterator();\n+        final Iterator iterator2 = list2.iterator();\n+        while (iterator.hasNext()) {\n+            String resolve = (String)iterator.next();\n+            if (resolve == null) {\n+                final String s2 = (String)iterator2.next();\n+                resolve = propertyResolver.resolve(s2);\n+                if (resolve == null) {\n+                    if (str != null) {\n+                        sb.replace(0, sb.length(), str);\n                         break;\n                     }\n-                    throw new CheckstyleException(\"Property ${\" + propertyName + \"} has not been set\");\n+                    throw new CheckstyleException(\"Property ${\" + s2 + \"} has not been set\");\n                 }\n             }\n-            sb.append(fragment);\n+            sb.append(resolve);\n         }\n         return sb.toString();\n     }\n     \n-    private static void parsePropertyString(final String value, final Collection<String> fragments, final Collection<String> propertyRefs) throws CheckstyleException {\n-        int prev = 0;\n-        for (int pos = value.indexOf(36, prev); pos >= 0; pos = value.indexOf(36, prev)) {\n-            if (pos > 0) {\n-                fragments.add(value.substring(prev, pos));\n+    private static void parsePropertyString(final String s, final Collection<String> collection, final Collection<String> collection2) throws CheckstyleException {\n+        int n = 0;\n+        for (int i = s.indexOf(36, n); i >= 0; i = s.indexOf(36, n)) {\n+            if (i > 0) {\n+                collection.add(s.substring(n, i));\n             }\n-            if (pos == value.length() - 1) {\n-                fragments.add(ConfigurationLoader.DOLLAR_SIGN_STRING);\n-                prev = pos + 1;\n+            if (i == s.length() - 1) {\n+                collection.add(ConfigurationLoader.DOLLAR_SIGN_STRING);\n+                n = i + 1;\n             }\n-            else if (value.charAt(pos + 1) == '{') {\n-                final int endName = value.indexOf(125, pos);\n-                if (endName == -1) {\n-                    throw new CheckstyleException(\"Syntax error in property: \" + value);\n+            else if (s.charAt(i + 1) == '{') {\n+                final int index = s.indexOf(125, i);\n+                if (index == -1) {\n+                    throw new CheckstyleException(\"Syntax error in property: \" + s);\n                 }\n-                final String propertyName = value.substring(pos + 2, endName);\n-                fragments.add(null);\n-                propertyRefs.add(propertyName);\n-                prev = endName + 1;\n+                final String substring = s.substring(i + 2, index);\n+                collection.add(null);\n+                collection2.add(substring);\n+                n = index + 1;\n             }\n             else {\n-                if (value.charAt(pos + 1) == '$') {\n-                    fragments.add(ConfigurationLoader.DOLLAR_SIGN_STRING);\n+                if (s.charAt(i + 1) == '$') {\n+                    collection.add(ConfigurationLoader.DOLLAR_SIGN_STRING);\n                 }\n                 else {\n-                    fragments.add(value.substring(pos, pos + 2));\n+                    collection.add(s.substring(i, i + 2));\n                 }\n-                prev = pos + 2;\n+                n = i + 2;\n             }\n         }\n-        if (prev < value.length()) {\n-            fragments.add(value.substring(prev));\n+        if (n < s.length()) {\n+            collection.add(s.substring(n));\n         }\n     }\n     \n     static {\n         DOLLAR_SIGN_STRING = String.valueOf('$');\n     }\n }\n"}]}
