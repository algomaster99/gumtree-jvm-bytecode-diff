{"diffoscope-json-version": 1, "source1": "first/BaseConfigurationBuilderProvider.class", "source2": "second/BaseConfigurationBuilderProvider.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,13 +1,12 @@\n \n package org.apache.commons.configuration2.builder.combined;\n \n import java.util.Map;\n import java.util.Collections;\n-import java.lang.reflect.Constructor;\n import org.apache.commons.configuration2.ConfigurationUtils;\n import org.apache.commons.configuration2.beanutils.BeanDeclaration;\n import java.util.Iterator;\n import java.util.ArrayList;\n import org.apache.commons.configuration2.builder.BasicConfigurationBuilder;\n import org.apache.commons.configuration2.builder.BuilderParameters;\n import org.apache.commons.configuration2.ex.ConfigurationException;\n@@ -19,25 +18,25 @@\n {\n     private static final Class<?>[] CTOR_PARAM_TYPES;\n     private final String builderClass;\n     private final String reloadingBuilderClass;\n     private final String configurationClass;\n     private final Collection<String> parameterClasses;\n     \n-    public BaseConfigurationBuilderProvider(final String bldrCls, final String reloadBldrCls, final String configCls, final Collection<String> paramCls) {\n-        if (bldrCls == null) {\n+    public BaseConfigurationBuilderProvider(final String builderClass, final String reloadingBuilderClass, final String configurationClass, final Collection<String> collection) {\n+        if (builderClass == null) {\n             throw new IllegalArgumentException(\"Builder class must not be null!\");\n         }\n-        if (configCls == null) {\n+        if (configurationClass == null) {\n             throw new IllegalArgumentException(\"Configuration class must not be null!\");\n         }\n-        this.builderClass = bldrCls;\n-        this.reloadingBuilderClass = reloadBldrCls;\n-        this.configurationClass = configCls;\n-        this.parameterClasses = initParameterClasses(paramCls);\n+        this.builderClass = builderClass;\n+        this.reloadingBuilderClass = reloadingBuilderClass;\n+        this.configurationClass = configurationClass;\n+        this.parameterClasses = initParameterClasses(collection);\n     }\n     \n     public String getBuilderClass() {\n         return this.builderClass;\n     }\n     \n     public String getReloadingBuilderClass() {\n@@ -48,86 +47,82 @@\n         return this.configurationClass;\n     }\n     \n     public Collection<String> getParameterClasses() {\n         return this.parameterClasses;\n     }\n     \n-    public ConfigurationBuilder<? extends Configuration> getConfigurationBuilder(final ConfigurationDeclaration decl) throws ConfigurationException {\n+    public ConfigurationBuilder<? extends Configuration> getConfigurationBuilder(final ConfigurationDeclaration configurationDeclaration) throws ConfigurationException {\n         try {\n-            final Collection<BuilderParameters> params = this.createParameterObjects();\n-            this.initializeParameterObjects(decl, params);\n-            final BasicConfigurationBuilder<? extends Configuration> builder = this.createBuilder(decl, params);\n-            this.configureBuilder(builder, decl, params);\n+            final Collection<BuilderParameters> parameterObjects = this.createParameterObjects();\n+            this.initializeParameterObjects(configurationDeclaration, parameterObjects);\n+            final BasicConfigurationBuilder<? extends Configuration> builder = this.createBuilder(configurationDeclaration, parameterObjects);\n+            this.configureBuilder(builder, configurationDeclaration, parameterObjects);\n             return (ConfigurationBuilder<? extends Configuration>)builder;\n         }\n-        catch (final ConfigurationException cex) {\n-            throw cex;\n+        catch (final ConfigurationException ex) {\n+            throw ex;\n         }\n-        catch (final Exception ex) {\n-            throw new ConfigurationException((Throwable)ex);\n+        catch (final Exception ex2) {\n+            throw new ConfigurationException((Throwable)ex2);\n         }\n     }\n     \n-    protected boolean isAllowFailOnInit(final ConfigurationDeclaration decl) {\n-        return decl.isOptional() && decl.isForceCreate();\n+    protected boolean isAllowFailOnInit(final ConfigurationDeclaration configurationDeclaration) {\n+        return configurationDeclaration.isOptional() && configurationDeclaration.isForceCreate();\n     }\n     \n     protected Collection<BuilderParameters> createParameterObjects() throws Exception {\n-        final Collection<BuilderParameters> params = new ArrayList<BuilderParameters>(this.getParameterClasses().size());\n-        for (final String paramcls : this.getParameterClasses()) {\n-            params.add(createParameterObject(paramcls));\n+        final ArrayList list = new ArrayList(this.getParameterClasses().size());\n+        final Iterator<String> iterator = this.getParameterClasses().iterator();\n+        while (iterator.hasNext()) {\n+            list.add(createParameterObject(iterator.next()));\n         }\n-        return params;\n+        return list;\n     }\n     \n-    protected void initializeParameterObjects(final ConfigurationDeclaration decl, final Collection<BuilderParameters> params) throws Exception {\n-        this.inheritParentBuilderProperties(decl, params);\n-        final MultiWrapDynaBean wrapBean = new MultiWrapDynaBean((Collection)params);\n-        decl.getConfigurationBuilder().initBean((Object)wrapBean, (BeanDeclaration)decl);\n+    protected void initializeParameterObjects(final ConfigurationDeclaration configurationDeclaration, final Collection<BuilderParameters> collection) throws Exception {\n+        this.inheritParentBuilderProperties(configurationDeclaration, collection);\n+        configurationDeclaration.getConfigurationBuilder().initBean((Object)new MultiWrapDynaBean((Collection)collection), (BeanDeclaration)configurationDeclaration);\n     }\n     \n-    protected void inheritParentBuilderProperties(final ConfigurationDeclaration decl, final Collection<BuilderParameters> params) {\n-        params.forEach(p -> decl.getConfigurationBuilder().initChildBuilderParameters(p));\n+    protected void inheritParentBuilderProperties(final ConfigurationDeclaration configurationDeclaration, final Collection<BuilderParameters> collection) {\n+        collection.forEach(builderParameters -> configurationDeclaration2.getConfigurationBuilder().initChildBuilderParameters(builderParameters));\n     }\n     \n-    protected BasicConfigurationBuilder<? extends Configuration> createBuilder(final ConfigurationDeclaration decl, final Collection<BuilderParameters> params) throws Exception {\n-        final Class<?> bldCls = ConfigurationUtils.loadClass(this.determineBuilderClass(decl));\n-        final Class<?> configCls = ConfigurationUtils.loadClass(this.determineConfigurationClass(decl, params));\n-        final Constructor<?> ctor = bldCls.getConstructor(BaseConfigurationBuilderProvider.CTOR_PARAM_TYPES);\n-        final BasicConfigurationBuilder<? extends Configuration> builder = (BasicConfigurationBuilder<? extends Configuration>)ctor.newInstance(configCls, null, Boolean.valueOf(this.isAllowFailOnInit(decl)));\n-        return builder;\n+    protected BasicConfigurationBuilder<? extends Configuration> createBuilder(final ConfigurationDeclaration configurationDeclaration, final Collection<BuilderParameters> collection) throws Exception {\n+        return (BasicConfigurationBuilder<? extends Configuration>)ConfigurationUtils.loadClass(this.determineBuilderClass(configurationDeclaration)).getConstructor(BaseConfigurationBuilderProvider.CTOR_PARAM_TYPES).newInstance(ConfigurationUtils.loadClass(this.determineConfigurationClass(configurationDeclaration, collection)), null, Boolean.valueOf(this.isAllowFailOnInit(configurationDeclaration)));\n     }\n     \n-    protected void configureBuilder(final BasicConfigurationBuilder<? extends Configuration> builder, final ConfigurationDeclaration decl, final Collection<BuilderParameters> params) throws Exception {\n-        builder.configure((BuilderParameters[])params.toArray(new BuilderParameters[params.size()]));\n+    protected void configureBuilder(final BasicConfigurationBuilder<? extends Configuration> basicConfigurationBuilder, final ConfigurationDeclaration configurationDeclaration, final Collection<BuilderParameters> collection) throws Exception {\n+        basicConfigurationBuilder.configure((BuilderParameters[])collection.toArray(new BuilderParameters[collection.size()]));\n     }\n     \n-    protected String determineBuilderClass(final ConfigurationDeclaration decl) throws ConfigurationException {\n-        if (!decl.isReload()) {\n+    protected String determineBuilderClass(final ConfigurationDeclaration configurationDeclaration) throws ConfigurationException {\n+        if (!configurationDeclaration.isReload()) {\n             return this.getBuilderClass();\n         }\n         if (this.getReloadingBuilderClass() == null) {\n             throw new ConfigurationException(\"No support for reloading for builder class \" + this.getBuilderClass());\n         }\n         return this.getReloadingBuilderClass();\n     }\n     \n-    protected String determineConfigurationClass(final ConfigurationDeclaration decl, final Collection<BuilderParameters> params) throws ConfigurationException {\n+    protected String determineConfigurationClass(final ConfigurationDeclaration configurationDeclaration, final Collection<BuilderParameters> collection) throws ConfigurationException {\n         return this.getConfigurationClass();\n     }\n     \n-    private static BuilderParameters createParameterObject(final String paramcls) throws ReflectiveOperationException {\n-        return ConfigurationUtils.loadClass(paramcls).newInstance();\n+    private static BuilderParameters createParameterObject(final String s) throws ReflectiveOperationException {\n+        return ConfigurationUtils.loadClass(s).newInstance();\n     }\n     \n-    private static Collection<String> initParameterClasses(final Collection<String> paramCls) {\n-        if (paramCls == null) {\n+    private static Collection<String> initParameterClasses(final Collection<String> c) {\n+        if (c == null) {\n             return (Collection<String>)Collections.emptySet();\n         }\n-        return Collections.unmodifiableCollection((Collection<? extends String>)new ArrayList<String>(paramCls));\n+        return Collections.unmodifiableCollection((Collection<? extends String>)new ArrayList<String>(c));\n     }\n     \n     static {\n         CTOR_PARAM_TYPES = new Class[] { Class.class, Map.class, Boolean.TYPE };\n     }\n }\n"}]}
