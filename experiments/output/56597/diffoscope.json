{"diffoscope-json-version": 1, "source1": "first/AbstractHierarchicalConfiguration.class", "source2": "second/AbstractHierarchicalConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -74,15 +74,15 @@\n     \n     protected Object getPropertyInternal(final String key) {\n         final List<QueryResult<T>> results = this.fetchNodeList(key);\n         if (results.isEmpty()) {\n             return null;\n         }\n         final NodeHandler<T> handler = (NodeHandler<T>)this.getModel().getNodeHandler();\n-        final List<Object> list = (List<Object>)results.stream().map(r -> this.valueFromResult((QueryResult<T>)r, (NodeHandler<T>)handler)).filter(Objects::nonNull).collect((Collector<? super Object, ?, List<Object>>)Collectors.toList());\n+        final List<Object> list = (List<Object>)results.stream().map(r -> this.valueFromResult((QueryResult<T>)r, (NodeHandler<T>)handler2)).filter(Objects::nonNull).collect((Collector<? super Object, ?, List<Object>>)Collectors.toList());\n         if (list.size() < 1) {\n             return null;\n         }\n         return (list.size() == 1) ? list.get(0) : list;\n     }\n     \n     protected void addPropertyInternal(final String key, final Object obj) {\n@@ -106,14 +106,15 @@\n             this.fireEvent(ConfigurationEvent.ADD_NODES, key, (Object)nodes, true);\n             this.addNodesInternal(key, nodes);\n             this.fireEvent(ConfigurationEvent.ADD_NODES, key, (Object)nodes, false);\n         }\n         finally {\n             this.endWrite();\n         }\n+        this.endWrite();\n     }\n     \n     protected void addNodesInternal(final String key, final Collection<? extends T> nodes) {\n         this.getModel().addNodes(key, (Collection)nodes, (NodeKeyResolver)this);\n     }\n     \n     protected boolean isEmptyInternal() {\n@@ -184,14 +185,15 @@\n         try {\n             this.fireEvent(ConfigurationEvent.CLEAR_TREE, key, (Object)null, true);\n             this.fireEvent(ConfigurationEvent.CLEAR_TREE, key, this.clearTreeInternal(key), false);\n         }\n         finally {\n             this.endWrite();\n         }\n+        this.endWrite();\n     }\n     \n     protected Object clearTreeInternal(final String key) {\n         return this.getModel().clearTree(key, (NodeKeyResolver)this);\n     }\n     \n     protected void clearPropertyDirect(final String key) {\n@@ -218,16 +220,16 @@\n         if (this.containsKey(prefix)) {\n             visitor.getKeyList().add(prefix);\n         }\n         final List<QueryResult<T>> results = this.fetchNodeList(prefix);\n         final NodeHandler<T> handler = (NodeHandler<T>)this.getModel().getNodeHandler();\n         results.forEach(result -> {\n             if (!result.isAttributeResult()) {\n-                handler.getChildren(result.getNode()).forEach(c -> NodeTreeWalker.INSTANCE.walkDFS(c, (ConfigurationNodeVisitor)visitor, handler));\n-                visitor.handleAttributeKeys(prefix, result.getNode(), handler);\n+                nodeHandler.getChildren(result.getNode()).forEach(c -> NodeTreeWalker.INSTANCE.walkDFS(c, (ConfigurationNodeVisitor)definedKeysVisitor2, nodeHandler2));\n+                definedKeysVisitor.handleAttributeKeys(s, result.getNode(), nodeHandler);\n             }\n             return;\n         });\n         return visitor.getKeyList().iterator();\n     }\n     \n     public final int getMaxIndex(final String key) {\n@@ -266,24 +268,24 @@\n     \n     protected List<QueryResult<T>> fetchNodeList(final String key) {\n         final NodeHandler<T> nodeHandler = (NodeHandler<T>)this.getModel().getNodeHandler();\n         return (List<QueryResult<T>>)this.resolveKey(nodeHandler.getRootNode(), key, (org.apache.commons.configuration2.tree.NodeHandler<Object>)nodeHandler);\n     }\n     \n     protected boolean nodeDefined(final T node) {\n-        final AbstractHierarchicalConfiguration.DefinedVisitor<T> visitor = (AbstractHierarchicalConfiguration.DefinedVisitor<T>)new AbstractHierarchicalConfiguration.DefinedVisitor((AbstractHierarchicalConfiguration.AbstractHierarchicalConfiguration$1)null);\n+        final AbstractHierarchicalConfiguration.DefinedVisitor<T> visitor = (AbstractHierarchicalConfiguration.DefinedVisitor<T>)new AbstractHierarchicalConfiguration.DefinedVisitor((AbstractHierarchicalConfiguration.DefinedVisitor)null);\n         NodeTreeWalker.INSTANCE.walkBFS((Object)node, (ConfigurationNodeVisitor)visitor, this.getModel().getNodeHandler());\n         return visitor.isDefined();\n     }\n     \n     protected NodeModel<T> getModel() {\n         return this.model;\n     }\n     \n     private Object valueFromResult(final QueryResult<T> result, final NodeHandler<T> handler) {\n         return result.isAttributeResult() ? result.getAttributeValue((NodeHandler)handler) : handler.getValue(result.getNode());\n     }\n     \n     public String toString() {\n-        return super.toString() + \"(\" + this.getRootElementNameInternal() + \")\";\n+        return String.valueOf(super.toString()) + \"(\" + this.getRootElementNameInternal() + \")\";\n     }\n }\n"}]}
