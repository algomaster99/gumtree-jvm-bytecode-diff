{"diffoscope-json-version": 1, "source1": "first/Zip64ExtendedInformationExtraField.class", "source2": "second/Zip64ExtendedInformationExtraField.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,55 +1,55 @@\n-  SHA-256 checksum 43b60738a0fbdc16729c90f59d09b765210116b1a6fdc6e6ca0ca72e37976ef2\n+  SHA-256 checksum df76a0fb4dc022d2cfd84eda51193bfeb88c0675e53ae509796ed23d74a71dc5\n   Compiled from \"Zip64ExtendedInformationExtraField.java\"\n public class org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField implements org.apache.commons.compress.archivers.zip.ZipExtraField\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #12                         // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n   super_class: #37                        // java/lang/Object\n   interfaces: 1, fields: 8, methods: 21, attributes: 1\n Constant pool:\n-    #1 = Class              #92           // org/apache/commons/compress/archivers/zip/ZipConstants\n-    #2 = Methodref          #37.#93       // java/lang/Object.\"<init>\":()V\n-    #3 = Methodref          #12.#94       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n-    #4 = Fieldref           #12.#95       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-    #5 = Fieldref           #12.#96       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-    #6 = Fieldref           #12.#97       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-    #7 = Fieldref           #12.#98       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-    #8 = Fieldref           #12.#99       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-    #9 = Class              #100          // org/apache/commons/compress/archivers/zip/ZipShort\n-   #10 = Methodref          #9.#101       // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-   #11 = Class              #102          // java/lang/IllegalArgumentException\n-   #12 = Class              #103          // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-   #13 = String             #104          // Zip64 extended information must contain both size values in the local file header.\n-   #14 = Methodref          #11.#105      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #15 = Methodref          #12.#106      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.addSizes:([B)I\n-   #16 = Fieldref           #12.#107      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.EMPTY:[B\n-   #17 = Methodref          #12.#108      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCentralDirectoryLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #18 = Methodref          #9.#109       // org/apache/commons/compress/archivers/zip/ZipShort.getValue:()I\n-   #19 = Methodref          #24.#110      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:()[B\n-   #20 = Methodref          #111.#112     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #21 = Methodref          #26.#110      // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n-   #22 = Class              #113          // java/util/zip/ZipException\n-   #23 = Methodref          #22.#105      // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-   #24 = Class              #114          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-   #25 = Methodref          #24.#115      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-   #26 = Class              #116          // org/apache/commons/compress/archivers/zip/ZipLong\n-   #27 = Methodref          #26.#115      // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n-   #28 = Fieldref           #12.#117      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.rawCentralDirectoryData:[B\n-   #29 = Methodref          #12.#118      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.parseFromLocalFileData:([BII)V\n-   #30 = Class              #119          // java/lang/StringBuilder\n-   #31 = Methodref          #30.#93       // java/lang/StringBuilder.\"<init>\":()V\n-   #32 = String             #120          // central directory zip64 extended information extra field\\'s length doesn\\'t match central directory data.  Expected length\n-   #33 = Methodref          #30.#121      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #34 = Methodref          #30.#122      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #35 = String             #123          //  but is\n-   #36 = Methodref          #30.#124      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #37 = Class              #125          // java/lang/Object\n-   #38 = Class              #126          // org/apache/commons/compress/archivers/zip/ZipExtraField\n+    #1 = Class              #91           // org/apache/commons/compress/archivers/zip/ZipConstants\n+    #2 = Methodref          #37.#92       // java/lang/Object.\"<init>\":()V\n+    #3 = Methodref          #12.#93       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+    #4 = Fieldref           #12.#94       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+    #5 = Fieldref           #12.#95       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+    #6 = Fieldref           #12.#96       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+    #7 = Fieldref           #12.#97       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+    #8 = Fieldref           #12.#98       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+    #9 = Class              #99           // org/apache/commons/compress/archivers/zip/ZipShort\n+   #10 = Methodref          #9.#100       // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+   #11 = Class              #101          // java/lang/IllegalArgumentException\n+   #12 = Class              #102          // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+   #13 = String             #103          // Zip64 extended information must contain both size values in the local file header.\n+   #14 = Methodref          #11.#104      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #15 = Methodref          #12.#105      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.addSizes:([B)I\n+   #16 = Fieldref           #12.#106      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.EMPTY:[B\n+   #17 = Methodref          #12.#107      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCentralDirectoryLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #18 = Methodref          #9.#108       // org/apache/commons/compress/archivers/zip/ZipShort.getValue:()I\n+   #19 = Methodref          #24.#109      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:()[B\n+   #20 = Methodref          #110.#111     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #21 = Methodref          #26.#109      // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n+   #22 = Class              #112          // java/util/zip/ZipException\n+   #23 = Methodref          #22.#104      // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+   #24 = Class              #113          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+   #25 = Methodref          #24.#114      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+   #26 = Class              #115          // org/apache/commons/compress/archivers/zip/ZipLong\n+   #27 = Methodref          #26.#114      // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n+   #28 = Fieldref           #12.#116      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.rawCentralDirectoryData:[B\n+   #29 = Methodref          #12.#117      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.parseFromLocalFileData:([BII)V\n+   #30 = Class              #118          // java/lang/StringBuilder\n+   #31 = Methodref          #30.#92       // java/lang/StringBuilder.\"<init>\":()V\n+   #32 = String             #119          // central directory zip64 extended information extra field\\'s length doesn\\'t match central directory data.  Expected length\n+   #33 = Methodref          #30.#120      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #34 = Methodref          #30.#121      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #35 = String             #122          //  but is\n+   #36 = Methodref          #30.#123      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #37 = Class              #124          // java/lang/Object\n+   #38 = Class              #125          // org/apache/commons/compress/archivers/zip/ZipExtraField\n    #39 = Utf8               HEADER_ID\n    #40 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n    #41 = Utf8               LFH_MUST_HAVE_BOTH_SIZES_MSG\n    #42 = Utf8               Ljava/lang/String;\n    #43 = Utf8               ConstantValue\n    #44 = Utf8               EMPTY\n    #45 = Utf8               [B\n@@ -66,92 +66,91 @@\n    #56 = Utf8               LineNumberTable\n    #57 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n    #58 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n    #59 = Utf8               getHeaderId\n    #60 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n    #61 = Utf8               getLocalFileDataLength\n    #62 = Utf8               StackMapTable\n-   #63 = Class              #103          // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-   #64 = Utf8               getCentralDirectoryLength\n-   #65 = Utf8               getLocalFileDataData\n-   #66 = Utf8               ()[B\n-   #67 = Utf8               getCentralDirectoryData\n-   #68 = Class              #45           // \"[B\"\n-   #69 = Utf8               parseFromLocalFileData\n-   #70 = Utf8               ([BII)V\n-   #71 = Utf8               Exceptions\n-   #72 = Utf8               parseFromCentralDirectoryData\n-   #73 = Utf8               reparseCentralDirectoryData\n-   #74 = Utf8               (ZZZZ)V\n-   #75 = Utf8               getSize\n-   #76 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #77 = Utf8               setSize\n-   #78 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #79 = Utf8               getCompressedSize\n-   #80 = Utf8               setCompressedSize\n-   #81 = Utf8               getRelativeHeaderOffset\n-   #82 = Utf8               setRelativeHeaderOffset\n-   #83 = Utf8               getDiskStartNumber\n-   #84 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #85 = Utf8               setDiskStartNumber\n-   #86 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n-   #87 = Utf8               addSizes\n-   #88 = Utf8               ([B)I\n-   #89 = Utf8               <clinit>\n-   #90 = Utf8               SourceFile\n-   #91 = Utf8               Zip64ExtendedInformationExtraField.java\n-   #92 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n-   #93 = NameAndType        #53:#54       // \"<init>\":()V\n-   #94 = NameAndType        #53:#58       // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n-   #95 = NameAndType        #46:#47       // size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #96 = NameAndType        #48:#47       // compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #97 = NameAndType        #49:#47       // relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #98 = NameAndType        #50:#51       // diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #99 = NameAndType        #39:#40       // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #100 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-  #101 = NameAndType        #53:#127      // \"<init>\":(I)V\n-  #102 = Utf8               java/lang/IllegalArgumentException\n-  #103 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-  #104 = Utf8               Zip64 extended information must contain both size values in the local file header.\n-  #105 = NameAndType        #53:#128      // \"<init>\":(Ljava/lang/String;)V\n-  #106 = NameAndType        #87:#88       // addSizes:([B)I\n-  #107 = NameAndType        #44:#45       // EMPTY:[B\n-  #108 = NameAndType        #64:#60       // getCentralDirectoryLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #109 = NameAndType        #129:#130     // getValue:()I\n-  #110 = NameAndType        #131:#66      // getBytes:()[B\n-  #111 = Class              #132          // java/lang/System\n-  #112 = NameAndType        #133:#134     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #113 = Utf8               java/util/zip/ZipException\n-  #114 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  #115 = NameAndType        #53:#135      // \"<init>\":([BI)V\n-  #116 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-  #117 = NameAndType        #52:#45       // rawCentralDirectoryData:[B\n-  #118 = NameAndType        #69:#70       // parseFromLocalFileData:([BII)V\n-  #119 = Utf8               java/lang/StringBuilder\n-  #120 = Utf8               central directory zip64 extended information extra field\\'s length doesn\\'t match central directory data.  Expected length\n-  #121 = NameAndType        #136:#137     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #122 = NameAndType        #136:#138     // append:(I)Ljava/lang/StringBuilder;\n-  #123 = Utf8                but is\n-  #124 = NameAndType        #139:#140     // toString:()Ljava/lang/String;\n-  #125 = Utf8               java/lang/Object\n-  #126 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n-  #127 = Utf8               (I)V\n-  #128 = Utf8               (Ljava/lang/String;)V\n-  #129 = Utf8               getValue\n-  #130 = Utf8               ()I\n-  #131 = Utf8               getBytes\n-  #132 = Utf8               java/lang/System\n-  #133 = Utf8               arraycopy\n-  #134 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #135 = Utf8               ([BI)V\n-  #136 = Utf8               append\n-  #137 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #138 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #139 = Utf8               toString\n-  #140 = Utf8               ()Ljava/lang/String;\n+   #63 = Utf8               getCentralDirectoryLength\n+   #64 = Utf8               getLocalFileDataData\n+   #65 = Utf8               ()[B\n+   #66 = Utf8               getCentralDirectoryData\n+   #67 = Class              #45           // \"[B\"\n+   #68 = Utf8               parseFromLocalFileData\n+   #69 = Utf8               ([BII)V\n+   #70 = Utf8               Exceptions\n+   #71 = Utf8               parseFromCentralDirectoryData\n+   #72 = Utf8               reparseCentralDirectoryData\n+   #73 = Utf8               (ZZZZ)V\n+   #74 = Utf8               getSize\n+   #75 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #76 = Utf8               setSize\n+   #77 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #78 = Utf8               getCompressedSize\n+   #79 = Utf8               setCompressedSize\n+   #80 = Utf8               getRelativeHeaderOffset\n+   #81 = Utf8               setRelativeHeaderOffset\n+   #82 = Utf8               getDiskStartNumber\n+   #83 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #84 = Utf8               setDiskStartNumber\n+   #85 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+   #86 = Utf8               addSizes\n+   #87 = Utf8               ([B)I\n+   #88 = Utf8               <clinit>\n+   #89 = Utf8               SourceFile\n+   #90 = Utf8               Zip64ExtendedInformationExtraField.java\n+   #91 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n+   #92 = NameAndType        #53:#54       // \"<init>\":()V\n+   #93 = NameAndType        #53:#58       // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+   #94 = NameAndType        #46:#47       // size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #95 = NameAndType        #48:#47       // compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #96 = NameAndType        #49:#47       // relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #97 = NameAndType        #50:#51       // diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #98 = NameAndType        #39:#40       // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #99 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+  #100 = NameAndType        #53:#126      // \"<init>\":(I)V\n+  #101 = Utf8               java/lang/IllegalArgumentException\n+  #102 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+  #103 = Utf8               Zip64 extended information must contain both size values in the local file header.\n+  #104 = NameAndType        #53:#127      // \"<init>\":(Ljava/lang/String;)V\n+  #105 = NameAndType        #86:#87       // addSizes:([B)I\n+  #106 = NameAndType        #44:#45       // EMPTY:[B\n+  #107 = NameAndType        #63:#60       // getCentralDirectoryLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #108 = NameAndType        #128:#129     // getValue:()I\n+  #109 = NameAndType        #130:#65      // getBytes:()[B\n+  #110 = Class              #131          // java/lang/System\n+  #111 = NameAndType        #132:#133     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #112 = Utf8               java/util/zip/ZipException\n+  #113 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+  #114 = NameAndType        #53:#134      // \"<init>\":([BI)V\n+  #115 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+  #116 = NameAndType        #52:#45       // rawCentralDirectoryData:[B\n+  #117 = NameAndType        #68:#69       // parseFromLocalFileData:([BII)V\n+  #118 = Utf8               java/lang/StringBuilder\n+  #119 = Utf8               central directory zip64 extended information extra field\\'s length doesn\\'t match central directory data.  Expected length\n+  #120 = NameAndType        #135:#136     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #121 = NameAndType        #135:#137     // append:(I)Ljava/lang/StringBuilder;\n+  #122 = Utf8                but is\n+  #123 = NameAndType        #138:#139     // toString:()Ljava/lang/String;\n+  #124 = Utf8               java/lang/Object\n+  #125 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n+  #126 = Utf8               (I)V\n+  #127 = Utf8               (Ljava/lang/String;)V\n+  #128 = Utf8               getValue\n+  #129 = Utf8               ()I\n+  #130 = Utf8               getBytes\n+  #131 = Utf8               java/lang/System\n+  #132 = Utf8               arraycopy\n+  #133 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #134 = Utf8               ([BI)V\n+  #135 = Utf8               append\n+  #136 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #137 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #138 = Utf8               toString\n+  #139 = Utf8               ()Ljava/lang/String;\n {\n   static final org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x0018) ACC_STATIC, ACC_FINAL\n \n   private static final java.lang.String LFH_MUST_HAVE_BOTH_SIZES_MSG = \"Zip64 extended information must contain both size values in the local file header.\";\n     descriptor: Ljava/lang/String;\n@@ -308,14 +307,18 @@\n         53: goto          57\n         56: iconst_0\n         57: iadd\n         58: invokespecial #10                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n         61: areturn\n       LineNumberTable:\n         line 118: 0\n+        line 119: 17\n+        line 120: 31\n+        line 121: 45\n+        line 118: 61\n       StackMapTable: number_of_entries = 8\n         frame_type = 255 /* full_frame */\n           offset_delta = 16\n           locals = [ class org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField ]\n           stack = [ uninitialized 0, uninitialized 0 ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 0\n@@ -730,14 +733,17 @@\n        194: invokespecial #27                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n        197: putfield      #7                  // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n        200: iinc          6, 4\n        203: return\n       LineNumberTable:\n         line 229: 0\n         line 230: 7\n+        line 231: 17\n+        line 232: 28\n+        line 233: 39\n         line 234: 52\n         line 235: 62\n         line 242: 103\n         line 243: 106\n         line 244: 110\n         line 245: 127\n         line 247: 130\n"}]}
