{"diffoscope-json-version": 1, "source1": "first/ParallelScatterZipCreator.class", "source2": "second/ParallelScatterZipCreator.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -72,20 +72,20 @@\n         });\n     }\n     \n     public final void submitStreamAwareCallable(final Callable<? extends ScatterZipOutputStream> callable) {\n         this.futures.add(this.es.submit(callable));\n     }\n     \n-    public final Callable<ScatterZipOutputStream> createCallable(final ZipArchiveEntry zipArchiveEntry2, final InputStreamSupplier inputStreamSupplier) {\n-        if (zipArchiveEntry2.getMethod() == -1) {\n-            throw new IllegalArgumentException(\"Method must be set on zipArchiveEntry: \" + zipArchiveEntry2);\n+    public final Callable<ScatterZipOutputStream> createCallable(final ZipArchiveEntry zipArchiveEntry, final InputStreamSupplier inputStreamSupplier) {\n+        if (zipArchiveEntry.getMethod() == -1) {\n+            throw new IllegalArgumentException(\"Method must be set on zipArchiveEntry: \" + String.valueOf((Object)zipArchiveEntry));\n         }\n         return () -> {\n-            ZipArchiveEntryRequest.createZipArchiveEntryRequest(zipArchiveEntry2, inputStreamSupplier2);\n+            ZipArchiveEntryRequest.createZipArchiveEntryRequest(zipArchiveEntry, inputStreamSupplier2);\n             final ScatterZipOutputStream scatterZipOutputStream = (ScatterZipOutputStream)this.tlScatterStreams.get();\n             scatterZipOutputStream.addArchiveEntry(zipArchiveEntryRequest);\n             return scatterZipOutputStream;\n         };\n     }\n     \n     public final Callable<ScatterZipOutputStream> createCallable(final ZipArchiveEntryRequestSupplier zipArchiveEntryRequestSupplier) {\n"}]}
