{"diffoscope-json-version": 1, "source1": "first/FTP.class", "source2": "second/FTP.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -90,32 +90,32 @@\n             throw new MalformedServerReplyException(\"Truncated server reply: \" + line);\n         }\n         String code = null;\n         try {\n             code = line.substring(0, 3);\n             this._replyCode = Integer.parseInt(code);\n         }\n-        catch (final NumberFormatException e) {\n+        catch (final NumberFormatException ex) {\n             throw new MalformedServerReplyException(\"Could not parse response code.\\nServer Reply: \" + line);\n         }\n         this._replyLines.add(line);\n         if (length > 3) {\n             final char sep = line.charAt(3);\n             if (sep == '-') {\n                 while (true) {\n                     line = this._controlInput_.readLine();\n                     if (line == null) {\n                         throw new FTPConnectionClosedException(\"Connection closed without indication.\");\n                     }\n                     this._replyLines.add(line);\n                     if (this.isStrictMultilineParsing()) {\n-                        if (this.__strictCheck(line, code)) {\n-                            continue;\n+                        if (!this.__strictCheck(line, code)) {\n+                            break;\n                         }\n-                        break;\n+                        continue;\n                     }\n                     else {\n                         if (!this.__lenientCheck(line)) {\n                             break;\n                         }\n                         continue;\n                     }\n@@ -167,14 +167,15 @@\n                 final IOException ioe = new IOException(\"Timed out waiting for initial connect reply\");\n                 ioe.initCause(e);\n                 throw ioe;\n             }\n             finally {\n                 this._socket_.setSoTimeout(original);\n             }\n+            this._socket_.setSoTimeout(original);\n         }\n         else {\n             this.__getReply();\n             if (FTPReply.isPositivePreliminary(this._replyCode)) {\n                 this.__getReply();\n             }\n         }\n@@ -416,31 +417,31 @@\n     }\n     \n     public int feat() throws IOException {\n         return this.sendCommand(FTPCmd.FEAT);\n     }\n     \n     public int allo(final int bytes, final int recordSize) throws IOException {\n-        return this.sendCommand(FTPCmd.ALLO, Integer.toString(bytes) + \" R \" + Integer.toString(recordSize));\n+        return this.sendCommand(FTPCmd.ALLO, String.valueOf(Integer.toString(bytes)) + \" R \" + Integer.toString(recordSize));\n     }\n     \n     public int allo(final long bytes, final int recordSize) throws IOException {\n-        return this.sendCommand(FTPCmd.ALLO, Long.toString(bytes) + \" R \" + Integer.toString(recordSize));\n+        return this.sendCommand(FTPCmd.ALLO, String.valueOf(Long.toString(bytes)) + \" R \" + Integer.toString(recordSize));\n     }\n     \n     public int rest(final String marker) throws IOException {\n         return this.sendCommand(FTPCmd.REST, marker);\n     }\n     \n     public int mdtm(final String file) throws IOException {\n         return this.sendCommand(FTPCmd.MDTM, file);\n     }\n     \n     public int mfmt(final String pathname, final String timeval) throws IOException {\n-        return this.sendCommand(FTPCmd.MFMT, timeval + \" \" + pathname);\n+        return this.sendCommand(FTPCmd.MFMT, String.valueOf(timeval) + \" \" + pathname);\n     }\n     \n     public int rnfr(final String pathname) throws IOException {\n         return this.sendCommand(FTPCmd.RNFR, pathname);\n     }\n     \n     public int rnto(final String pathname) throws IOException {\n"}]}
