{"diffoscope-json-version": 1, "source1": "first/ZstdUtils.class", "source2": "second/ZstdUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,59 +14,58 @@\n     }\n     \n     private static boolean internalIsZstdCompressionAvailable() {\n         try {\n             Class.forName(\"com.github.luben.zstd.ZstdInputStream\");\n             return true;\n         }\n-        catch (final NoClassDefFoundError | Exception error) {\n+        catch (final NoClassDefFoundError | Exception ex) {\n             return false;\n         }\n     }\n     \n     public static boolean isZstdCompressionAvailable() {\n-        final ZstdUtils.CachedAvailability cachedResult = ZstdUtils.cachedZstdAvailability;\n-        if (cachedResult != ZstdUtils.CachedAvailability.DONT_CACHE) {\n-            return cachedResult == ZstdUtils.CachedAvailability.CACHED_AVAILABLE;\n+        final ZstdUtils.CachedAvailability cachedZstdAvailability = ZstdUtils.cachedZstdAvailability;\n+        if (cachedZstdAvailability != ZstdUtils.CachedAvailability.DONT_CACHE) {\n+            return cachedZstdAvailability == ZstdUtils.CachedAvailability.CACHED_AVAILABLE;\n         }\n         return internalIsZstdCompressionAvailable();\n     }\n     \n-    public static boolean matches(final byte[] signature, final int length) {\n-        if (length < ZstdUtils.ZSTANDARD_FRAME_MAGIC.length) {\n+    public static boolean matches(final byte[] array, final int n) {\n+        if (n < ZstdUtils.ZSTANDARD_FRAME_MAGIC.length) {\n             return false;\n         }\n-        boolean isZstandard = true;\n+        boolean b = true;\n         for (int i = 0; i < ZstdUtils.ZSTANDARD_FRAME_MAGIC.length; ++i) {\n-            if (signature[i] != ZstdUtils.ZSTANDARD_FRAME_MAGIC[i]) {\n-                isZstandard = false;\n+            if (array[i] != ZstdUtils.ZSTANDARD_FRAME_MAGIC[i]) {\n+                b = false;\n                 break;\n             }\n         }\n-        if (isZstandard) {\n+        if (b) {\n             return true;\n         }\n-        if (0x50 == (signature[0] & 0xF0)) {\n-            for (int i = 0; i < ZstdUtils.SKIPPABLE_FRAME_MAGIC.length; ++i) {\n-                if (signature[i + 1] != ZstdUtils.SKIPPABLE_FRAME_MAGIC[i]) {\n+        if (0x50 == (array[0] & 0xF0)) {\n+            for (int j = 0; j < ZstdUtils.SKIPPABLE_FRAME_MAGIC.length; ++j) {\n+                if (array[j + 1] != ZstdUtils.SKIPPABLE_FRAME_MAGIC[j]) {\n                     return false;\n                 }\n             }\n             return true;\n         }\n         return false;\n     }\n     \n-    public static void setCacheZstdAvailablity(final boolean doCache) {\n-        if (!doCache) {\n+    public static void setCacheZstdAvailablity(final boolean b) {\n+        if (!b) {\n             ZstdUtils.cachedZstdAvailability = ZstdUtils.CachedAvailability.DONT_CACHE;\n         }\n         else if (ZstdUtils.cachedZstdAvailability == ZstdUtils.CachedAvailability.DONT_CACHE) {\n-            final boolean hasZstd = internalIsZstdCompressionAvailable();\n-            ZstdUtils.cachedZstdAvailability = (hasZstd ? ZstdUtils.CachedAvailability.CACHED_AVAILABLE : ZstdUtils.CachedAvailability.CACHED_UNAVAILABLE);\n+            ZstdUtils.cachedZstdAvailability = (internalIsZstdCompressionAvailable() ? ZstdUtils.CachedAvailability.CACHED_AVAILABLE : ZstdUtils.CachedAvailability.CACHED_UNAVAILABLE);\n         }\n     }\n     \n     private ZstdUtils() {\n     }\n     \n     static {\n"}]}
