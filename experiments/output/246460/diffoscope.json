{"diffoscope-json-version": 1, "source1": "first/NoWhitespaceBeforeCaseDefaultColonCheck.class", "source2": "second/NoWhitespaceBeforeCaseDefaultColonCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -23,72 +23,71 @@\n         return new int[] { 82 };\n     }\n     \n     public boolean isCommentNodesRequired() {\n         return true;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        if (isInSwitch(ast) && isWhiteSpaceBeforeColon(ast)) {\n-            this.log(ast, \"ws.preceded\", new Object[] { ast.getText() });\n+    public void visitToken(final DetailAST detailAST) {\n+        if (isInSwitch(detailAST) && isWhiteSpaceBeforeColon(detailAST)) {\n+            this.log(detailAST, \"ws.preceded\", new Object[] { detailAST.getText() });\n         }\n     }\n     \n-    private static boolean isInSwitch(final DetailAST colonAst) {\n-        return TokenUtil.isOfType(colonAst.getParent(), new int[] { 93, 94 });\n+    private static boolean isInSwitch(final DetailAST detailAST) {\n+        return TokenUtil.isOfType(detailAST.getParent(), new int[] { 93, 94 });\n     }\n     \n-    private static boolean isWhiteSpaceBeforeColon(final DetailAST colonAst) {\n-        final DetailAST parent = colonAst.getParent();\n-        boolean result;\n-        if (isOnDifferentLineWithPreviousToken(colonAst)) {\n-            result = true;\n+    private static boolean isWhiteSpaceBeforeColon(final DetailAST detailAST) {\n+        final DetailAST parent = detailAST.getParent();\n+        boolean b;\n+        if (isOnDifferentLineWithPreviousToken(detailAST)) {\n+            b = true;\n         }\n         else if (parent.getType() == 93) {\n-            result = isWhitespaceBeforeColonOfCase(colonAst);\n+            b = isWhitespaceBeforeColonOfCase(detailAST);\n         }\n         else {\n-            result = isWhitespaceBeforeColonOfDefault(colonAst);\n+            b = isWhitespaceBeforeColonOfDefault(detailAST);\n         }\n-        return result;\n+        return b;\n     }\n     \n-    private static boolean isWhitespaceBeforeColonOfCase(final DetailAST colonAst) {\n-        final DetailAST previousSibling = colonAst.getPreviousSibling();\n-        int offset = 0;\n+    private static boolean isWhitespaceBeforeColonOfCase(final DetailAST detailAST) {\n+        final DetailAST previousSibling = detailAST.getPreviousSibling();\n+        int n = 0;\n         if (previousSibling.getType() == 145) {\n-            offset = 1;\n+            n = 1;\n         }\n-        return colonAst.getColumnNo() != getLastColumnNumberOf(previousSibling) + offset;\n+        return detailAST.getColumnNo() != getLastColumnNumberOf(previousSibling) + n;\n     }\n     \n-    private static boolean isWhitespaceBeforeColonOfDefault(final DetailAST colonAst) {\n-        final DetailAST previousSibling = colonAst.getPreviousSibling();\n-        boolean result;\n+    private static boolean isWhitespaceBeforeColonOfDefault(final DetailAST detailAST) {\n+        final DetailAST previousSibling = detailAST.getPreviousSibling();\n+        boolean b;\n         if (previousSibling == null) {\n-            final DetailAST literalDefault = colonAst.getParent();\n-            result = (colonAst.getColumnNo() != literalDefault.getColumnNo() + literalDefault.getText().length());\n+            final DetailAST parent = detailAST.getParent();\n+            b = (detailAST.getColumnNo() != parent.getColumnNo() + parent.getText().length());\n         }\n         else {\n-            result = (colonAst.getColumnNo() != getLastColumnNumberOf(previousSibling) + 1);\n+            b = (detailAST.getColumnNo() != getLastColumnNumberOf(previousSibling) + 1);\n         }\n-        return result;\n+        return b;\n     }\n     \n-    private static boolean isOnDifferentLineWithPreviousToken(final DetailAST colonAst) {\n-        final DetailAST parent = colonAst.getParent();\n-        DetailAST previousSibling;\n-        if (parent.getType() == 93) {\n-            previousSibling = colonAst.getPreviousSibling();\n+    private static boolean isOnDifferentLineWithPreviousToken(final DetailAST detailAST) {\n+        DetailAST detailAST2;\n+        if (detailAST.getParent().getType() == 93) {\n+            detailAST2 = detailAST.getPreviousSibling();\n         }\n         else {\n-            previousSibling = colonAst.getParent();\n+            detailAST2 = detailAST.getParent();\n         }\n-        return !TokenUtil.areOnSameLine(previousSibling, colonAst);\n+        return !TokenUtil.areOnSameLine(detailAST2, detailAST);\n     }\n     \n-    private static int getLastColumnNumberOf(final DetailAST ast) {\n+    private static int getLastColumnNumberOf(final DetailAST detailAST) {\n         DetailAST lastChild;\n-        for (lastChild = ast; lastChild.hasChildren(); lastChild = lastChild.getLastChild()) {}\n+        for (lastChild = detailAST; lastChild.hasChildren(); lastChild = lastChild.getLastChild()) {}\n         return lastChild.getColumnNo() + lastChild.getText().length();\n     }\n }\n"}]}
