{"diffoscope-json-version": 1, "source1": "first/TFTPClient.class", "source2": "second/TFTPClient.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -20,20 +20,20 @@\n     \n     public TFTPClient() {\n         this.totalBytesReceived = 0L;\n         this.totalBytesSent = 0L;\n         this.maxTimeouts = 5;\n     }\n     \n-    public void setMaxTimeouts(final int numTimeouts) {\n-        if (numTimeouts < 1) {\n+    public void setMaxTimeouts(final int maxTimeouts) {\n+        if (maxTimeouts < 1) {\n             this.maxTimeouts = 1;\n         }\n         else {\n-            this.maxTimeouts = numTimeouts;\n+            this.maxTimeouts = maxTimeouts;\n         }\n     }\n     \n     public int getMaxTimeouts() {\n         return this.maxTimeouts;\n     }\n     \n@@ -41,239 +41,234 @@\n         return this.totalBytesReceived;\n     }\n     \n     public long getTotalBytesSent() {\n         return this.totalBytesSent;\n     }\n     \n-    public int receiveFile(final String fileName, final int mode, OutputStream output, InetAddress host, final int port) throws IOException {\n-        int bytesRead = 0;\n-        int lastBlock = 0;\n-        int block = 1;\n-        int hostPort = 0;\n-        int dataLength = 0;\n+    public int receiveFile(final String s, final int n, OutputStream outputStream, InetAddress inetAddress, final int n2) throws IOException {\n+        int n3 = 0;\n+        int blockNumber = 0;\n+        int n4 = 1;\n+        int port = 0;\n+        int i = 0;\n         this.totalBytesReceived = 0L;\n-        if (mode == 0) {\n-            output = (OutputStream)new FromNetASCIIOutputStream(output);\n+        if (n == 0) {\n+            outputStream = (OutputStream)new FromNetASCIIOutputStream(outputStream);\n         }\n-        TFTPPacket sent = (TFTPPacket)new TFTPReadRequestPacket(host, port, fileName, mode);\n-        final TFTPAckPacket ack = new TFTPAckPacket(host, port, 0);\n+        Object o = new TFTPReadRequestPacket(inetAddress, n2, s, n);\n+        final TFTPAckPacket tftpAckPacket = new TFTPAckPacket(inetAddress, n2, 0);\n         this.beginBufferedOps();\n-        boolean justStarted = true;\n+        int n5 = 1;\n         try {\n             do {\n-                this.bufferedSend(sent);\n-                boolean wantReply = true;\n-                int timeouts = 0;\n+                this.bufferedSend((TFTPPacket)o);\n+                boolean b = true;\n+                int n6 = 0;\n                 do {\n                     try {\n-                        final TFTPPacket received = this.bufferedReceive();\n-                        final int recdPort = received.getPort();\n-                        final InetAddress recdAddress = received.getAddress();\n-                        if (justStarted) {\n-                            justStarted = false;\n-                            if (recdPort == port) {\n-                                final TFTPErrorPacket error = new TFTPErrorPacket(recdAddress, recdPort, 5, \"INCORRECT SOURCE PORT\");\n-                                this.bufferedSend((TFTPPacket)error);\n-                                throw new IOException(\"Incorrect source port (\" + recdPort + \") in request reply.\");\n-                            }\n-                            hostPort = recdPort;\n-                            ack.setPort(hostPort);\n-                            if (!host.equals(recdAddress)) {\n-                                host = recdAddress;\n-                                ack.setAddress(host);\n-                                sent.setAddress(host);\n+                        final TFTPPacket bufferedReceive = this.bufferedReceive();\n+                        final int port2 = bufferedReceive.getPort();\n+                        final InetAddress address = bufferedReceive.getAddress();\n+                        if (n5 != 0) {\n+                            n5 = 0;\n+                            if (port2 == n2) {\n+                                this.bufferedSend((TFTPPacket)new TFTPErrorPacket(address, port2, 5, \"INCORRECT SOURCE PORT\"));\n+                                throw new IOException(\"Incorrect source port (\" + port2 + \") in request reply.\");\n+                            }\n+                            port = port2;\n+                            tftpAckPacket.setPort(port);\n+                            if (!inetAddress.equals(address)) {\n+                                inetAddress = address;\n+                                tftpAckPacket.setAddress(inetAddress);\n+                                ((TFTPPacket)o).setAddress(inetAddress);\n                             }\n                         }\n-                        if (host.equals(recdAddress) && recdPort == hostPort) {\n-                            switch (received.getType()) {\n+                        if (inetAddress.equals(address) && port2 == port) {\n+                            switch (bufferedReceive.getType()) {\n                                 case 5: {\n-                                    final TFTPErrorPacket error = (TFTPErrorPacket)received;\n-                                    throw new IOException(\"Error code \" + error.getError() + \" received: \" + error.getMessage());\n+                                    final TFTPErrorPacket tftpErrorPacket = (TFTPErrorPacket)bufferedReceive;\n+                                    throw new IOException(\"Error code \" + tftpErrorPacket.getError() + \" received: \" + tftpErrorPacket.getMessage());\n                                 }\n                                 case 3: {\n-                                    final TFTPDataPacket data = (TFTPDataPacket)received;\n-                                    dataLength = data.getDataLength();\n-                                    lastBlock = data.getBlockNumber();\n-                                    if (lastBlock == block) {\n+                                    final TFTPDataPacket tftpDataPacket = (TFTPDataPacket)bufferedReceive;\n+                                    i = tftpDataPacket.getDataLength();\n+                                    blockNumber = tftpDataPacket.getBlockNumber();\n+                                    if (blockNumber == n4) {\n                                         try {\n-                                            output.write(data.getData(), data.getDataOffset(), dataLength);\n+                                            outputStream.write(tftpDataPacket.getData(), tftpDataPacket.getDataOffset(), i);\n                                         }\n-                                        catch (final IOException e) {\n-                                            final TFTPErrorPacket error = new TFTPErrorPacket(host, hostPort, 3, \"File write failed.\");\n-                                            this.bufferedSend((TFTPPacket)error);\n-                                            throw e;\n+                                        catch (final IOException ex) {\n+                                            this.bufferedSend((TFTPPacket)new TFTPErrorPacket(inetAddress, port, 3, \"File write failed.\"));\n+                                            throw ex;\n                                         }\n-                                        if (++block > 65535) {\n-                                            block = 0;\n+                                        if (++n4 > 65535) {\n+                                            n4 = 0;\n                                         }\n-                                        wantReply = false;\n+                                        b = false;\n                                         break;\n                                     }\n                                     this.discardPackets();\n-                                    if (lastBlock == ((block == 0) ? 65535 : (block - 1))) {\n-                                        wantReply = false;\n+                                    if (blockNumber == ((n4 == 0) ? 65535 : (n4 - 1))) {\n+                                        b = false;\n                                         break;\n                                     }\n                                     break;\n                                 }\n                                 default: {\n-                                    throw new IOException(\"Received unexpected packet type (\" + received.getType() + \")\");\n+                                    throw new IOException(\"Received unexpected packet type (\" + bufferedReceive.getType() + \")\");\n                                 }\n                             }\n                         }\n                         else {\n-                            final TFTPErrorPacket error = new TFTPErrorPacket(recdAddress, recdPort, 5, \"Unexpected host or port.\");\n-                            this.bufferedSend((TFTPPacket)error);\n+                            this.bufferedSend((TFTPPacket)new TFTPErrorPacket(address, port2, 5, \"Unexpected host or port.\"));\n                         }\n                     }\n-                    catch (final SocketException e2) {\n-                        if (++timeouts >= this.maxTimeouts) {\n+                    catch (final SocketException ex2) {\n+                        if (++n6 >= this.maxTimeouts) {\n                             throw new IOException(\"Connection timed out.\");\n                         }\n                     }\n-                    catch (final InterruptedIOException e3) {\n-                        if (++timeouts >= this.maxTimeouts) {\n+                    catch (final InterruptedIOException ex3) {\n+                        if (++n6 >= this.maxTimeouts) {\n                             throw new IOException(\"Connection timed out.\");\n                         }\n                     }\n-                    catch (final TFTPPacketException e4) {\n-                        throw new IOException(\"Bad packet: \" + e4.getMessage());\n+                    catch (final TFTPPacketException ex4) {\n+                        throw new IOException(\"Bad packet: \" + ex4.getMessage());\n                     }\n-                } while (wantReply);\n-                ack.setBlockNumber(lastBlock);\n-                sent = (TFTPPacket)ack;\n-                bytesRead += dataLength;\n-                this.totalBytesReceived += dataLength;\n-            } while (dataLength == 512);\n-            this.bufferedSend(sent);\n+                } while (b);\n+                tftpAckPacket.setBlockNumber(blockNumber);\n+                o = tftpAckPacket;\n+                n3 += i;\n+                this.totalBytesReceived += i;\n+            } while (i == 512);\n+            this.bufferedSend((TFTPPacket)o);\n         }\n         finally {\n             this.endBufferedOps();\n         }\n-        return bytesRead;\n+        return n3;\n     }\n     \n-    public int receiveFile(final String fileName, final int mode, final OutputStream output, final String hostname, final int port) throws UnknownHostException, IOException {\n-        return this.receiveFile(fileName, mode, output, InetAddress.getByName(hostname), port);\n+    public int receiveFile(final String s, final int n, final OutputStream outputStream, final String host, final int n2) throws UnknownHostException, IOException {\n+        return this.receiveFile(s, n, outputStream, InetAddress.getByName(host), n2);\n     }\n     \n-    public int receiveFile(final String fileName, final int mode, final OutputStream output, final InetAddress host) throws IOException {\n-        return this.receiveFile(fileName, mode, output, host, 69);\n+    public int receiveFile(final String s, final int n, final OutputStream outputStream, final InetAddress inetAddress) throws IOException {\n+        return this.receiveFile(s, n, outputStream, inetAddress, 69);\n     }\n     \n-    public int receiveFile(final String fileName, final int mode, final OutputStream output, final String hostname) throws UnknownHostException, IOException {\n-        return this.receiveFile(fileName, mode, output, InetAddress.getByName(hostname), 69);\n+    public int receiveFile(final String s, final int n, final OutputStream outputStream, final String host) throws UnknownHostException, IOException {\n+        return this.receiveFile(s, n, outputStream, InetAddress.getByName(host), 69);\n     }\n     \n-    public void sendFile(final String fileName, final int mode, InputStream input, InetAddress host, final int port) throws IOException {\n-        int block = 0;\n-        int hostPort = 0;\n-        boolean justStarted = true;\n-        boolean lastAckWait = false;\n+    public void sendFile(final String s, final int n, InputStream inputStream, InetAddress inetAddress, final int n2) throws IOException {\n+        int blockNumber = 0;\n+        int port = 0;\n+        int n3 = 1;\n+        int n4 = 0;\n         this.totalBytesSent = 0L;\n-        if (mode == 0) {\n-            input = (InputStream)new ToNetASCIIInputStream(input);\n+        if (n == 0) {\n+            inputStream = (InputStream)new ToNetASCIIInputStream(inputStream);\n         }\n-        TFTPPacket sent = (TFTPPacket)new TFTPWriteRequestPacket(host, port, fileName, mode);\n-        final TFTPDataPacket data = new TFTPDataPacket(host, port, 0, this.sendBuffer, 4, 0);\n+        Object o = new TFTPWriteRequestPacket(inetAddress, n2, s, n);\n+        final TFTPDataPacket tftpDataPacket = new TFTPDataPacket(inetAddress, n2, 0, this.sendBuffer, 4, 0);\n         this.beginBufferedOps();\n         try {\n             while (true) {\n-                this.bufferedSend(sent);\n-                boolean wantReply = true;\n-                int timeouts = 0;\n+                this.bufferedSend((TFTPPacket)o);\n+                boolean b = true;\n+                int n5 = 0;\n                 do {\n                     try {\n-                        final TFTPPacket received = this.bufferedReceive();\n-                        final InetAddress recdAddress = received.getAddress();\n-                        final int recdPort = received.getPort();\n-                        if (justStarted) {\n-                            justStarted = false;\n-                            if (recdPort == port) {\n-                                final TFTPErrorPacket error = new TFTPErrorPacket(recdAddress, recdPort, 5, \"INCORRECT SOURCE PORT\");\n-                                this.bufferedSend((TFTPPacket)error);\n-                                throw new IOException(\"Incorrect source port (\" + recdPort + \") in request reply.\");\n-                            }\n-                            hostPort = recdPort;\n-                            data.setPort(hostPort);\n-                            if (!host.equals(recdAddress)) {\n-                                host = recdAddress;\n-                                data.setAddress(host);\n-                                sent.setAddress(host);\n+                        final TFTPPacket bufferedReceive = this.bufferedReceive();\n+                        final InetAddress address = bufferedReceive.getAddress();\n+                        final int port2 = bufferedReceive.getPort();\n+                        if (n3 != 0) {\n+                            n3 = 0;\n+                            if (port2 == n2) {\n+                                this.bufferedSend((TFTPPacket)new TFTPErrorPacket(address, port2, 5, \"INCORRECT SOURCE PORT\"));\n+                                throw new IOException(\"Incorrect source port (\" + port2 + \") in request reply.\");\n+                            }\n+                            port = port2;\n+                            tftpDataPacket.setPort(port);\n+                            if (!inetAddress.equals(address)) {\n+                                inetAddress = address;\n+                                tftpDataPacket.setAddress(inetAddress);\n+                                ((TFTPPacket)o).setAddress(inetAddress);\n                             }\n                         }\n-                        if (host.equals(recdAddress) && recdPort == hostPort) {\n-                            switch (received.getType()) {\n+                        if (inetAddress.equals(address) && port2 == port) {\n+                            switch (bufferedReceive.getType()) {\n                                 case 5: {\n-                                    final TFTPErrorPacket error = (TFTPErrorPacket)received;\n-                                    throw new IOException(\"Error code \" + error.getError() + \" received: \" + error.getMessage());\n+                                    final TFTPErrorPacket tftpErrorPacket = (TFTPErrorPacket)bufferedReceive;\n+                                    throw new IOException(\"Error code \" + tftpErrorPacket.getError() + \" received: \" + tftpErrorPacket.getMessage());\n                                 }\n                                 case 4: {\n-                                    final int lastBlock = ((TFTPAckPacket)received).getBlockNumber();\n-                                    if (lastBlock == block) {\n-                                        if (++block > 65535) {\n-                                            block = 0;\n+                                    if (((TFTPAckPacket)bufferedReceive).getBlockNumber() == blockNumber) {\n+                                        if (++blockNumber > 65535) {\n+                                            blockNumber = 0;\n                                         }\n-                                        wantReply = false;\n+                                        b = false;\n                                         break;\n                                     }\n                                     this.discardPackets();\n                                     break;\n                                 }\n                                 default: {\n                                     throw new IOException(\"Received unexpected packet type.\");\n                                 }\n                             }\n                         }\n                         else {\n-                            final TFTPErrorPacket error = new TFTPErrorPacket(recdAddress, recdPort, 5, \"Unexpected host or port.\");\n-                            this.bufferedSend((TFTPPacket)error);\n+                            this.bufferedSend((TFTPPacket)new TFTPErrorPacket(address, port2, 5, \"Unexpected host or port.\"));\n                         }\n                     }\n-                    catch (final SocketException e) {\n-                        if (++timeouts >= this.maxTimeouts) {\n+                    catch (final SocketException ex) {\n+                        if (++n5 >= this.maxTimeouts) {\n                             throw new IOException(\"Connection timed out.\");\n                         }\n                     }\n-                    catch (final InterruptedIOException e2) {\n-                        if (++timeouts >= this.maxTimeouts) {\n+                    catch (final InterruptedIOException ex2) {\n+                        if (++n5 >= this.maxTimeouts) {\n                             throw new IOException(\"Connection timed out.\");\n                         }\n                     }\n-                    catch (final TFTPPacketException e3) {\n-                        throw new IOException(\"Bad packet: \" + e3.getMessage());\n+                    catch (final TFTPPacketException ex3) {\n+                        throw new IOException(\"Bad packet: \" + ex3.getMessage());\n                     }\n-                } while (wantReply);\n-                if (lastAckWait) {\n+                } while (b);\n+                if (n4 != 0) {\n                     break;\n                 }\n-                int dataLength = 512;\n-                int offset = 4;\n-                int totalThisPacket = 0;\n-                for (int bytesRead = 0; dataLength > 0 && (bytesRead = input.read(this.sendBuffer, offset, dataLength)) > 0; offset += bytesRead, dataLength -= bytesRead, totalThisPacket += bytesRead) {}\n-                if (totalThisPacket < 512) {\n-                    lastAckWait = true;\n+                int len;\n+                int off;\n+                int n6;\n+                int read;\n+                for (len = 512, off = 4, n6 = 0; len > 0 && (read = inputStream.read(this.sendBuffer, off, len)) > 0; off += read, len -= read, n6 += read) {}\n+                if (n6 < 512) {\n+                    n4 = 1;\n                 }\n-                data.setBlockNumber(block);\n-                data.setData(this.sendBuffer, 4, totalThisPacket);\n-                sent = (TFTPPacket)data;\n-                this.totalBytesSent += totalThisPacket;\n+                tftpDataPacket.setBlockNumber(blockNumber);\n+                tftpDataPacket.setData(this.sendBuffer, 4, n6);\n+                o = tftpDataPacket;\n+                this.totalBytesSent += n6;\n             }\n         }\n         finally {\n             this.endBufferedOps();\n         }\n     }\n     \n-    public void sendFile(final String fileName, final int mode, final InputStream input, final String hostname, final int port) throws UnknownHostException, IOException {\n-        this.sendFile(fileName, mode, input, InetAddress.getByName(hostname), port);\n+    public void sendFile(final String s, final int n, final InputStream inputStream, final String host, final int n2) throws UnknownHostException, IOException {\n+        this.sendFile(s, n, inputStream, InetAddress.getByName(host), n2);\n     }\n     \n-    public void sendFile(final String fileName, final int mode, final InputStream input, final InetAddress host) throws IOException {\n-        this.sendFile(fileName, mode, input, host, 69);\n+    public void sendFile(final String s, final int n, final InputStream inputStream, final InetAddress inetAddress) throws IOException {\n+        this.sendFile(s, n, inputStream, inetAddress, 69);\n     }\n     \n-    public void sendFile(final String fileName, final int mode, final InputStream input, final String hostname) throws UnknownHostException, IOException {\n-        this.sendFile(fileName, mode, input, InetAddress.getByName(hostname), 69);\n+    public void sendFile(final String s, final int n, final InputStream inputStream, final String host) throws UnknownHostException, IOException {\n+        this.sendFile(s, n, inputStream, InetAddress.getByName(host), 69);\n     }\n }\n"}]}
