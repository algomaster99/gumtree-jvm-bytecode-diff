{"diffoscope-json-version": 1, "source1": "first/IMAPSClient.class", "source2": "second/IMAPSClient.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -34,45 +34,45 @@\n     private HostnameVerifier hostnameVerifier;\n     private boolean tlsEndpointChecking;\n     \n     public IMAPSClient() {\n         this(\"TLS\", false);\n     }\n     \n-    public IMAPSClient(final boolean implicit) {\n-        this(\"TLS\", implicit);\n+    public IMAPSClient(final boolean b) {\n+        this(\"TLS\", b);\n     }\n     \n-    public IMAPSClient(final String proto) {\n-        this(proto, false);\n+    public IMAPSClient(final String s) {\n+        this(s, false);\n     }\n     \n-    public IMAPSClient(final String proto, final boolean implicit) {\n-        this(proto, implicit, null);\n+    public IMAPSClient(final String s, final boolean b) {\n+        this(s, b, null);\n     }\n     \n-    public IMAPSClient(final String proto, final boolean implicit, final SSLContext ctx) {\n+    public IMAPSClient(final String protocol, final boolean isImplicit, final SSLContext context) {\n         this.context = null;\n         this.suites = null;\n         this.protocols = null;\n         this.trustManager = null;\n         this.keyManager = null;\n         this.hostnameVerifier = null;\n         this.setDefaultPort(993);\n-        this.protocol = proto;\n-        this.isImplicit = implicit;\n-        this.context = ctx;\n+        this.protocol = protocol;\n+        this.isImplicit = isImplicit;\n+        this.context = context;\n     }\n     \n-    public IMAPSClient(final boolean implicit, final SSLContext ctx) {\n-        this(\"TLS\", implicit, ctx);\n+    public IMAPSClient(final boolean b, final SSLContext sslContext) {\n+        this(\"TLS\", b, sslContext);\n     }\n     \n-    public IMAPSClient(final SSLContext context) {\n-        this(false, context);\n+    public IMAPSClient(final SSLContext sslContext) {\n+        this(false, sslContext);\n     }\n     \n     protected void _connectAction_() throws IOException {\n         if (this.isImplicit) {\n             this.performSSLNegotiation();\n         }\n         super._connectAction_();\n@@ -82,61 +82,60 @@\n         if (this.context == null) {\n             this.context = SSLContextUtils.createSSLContext(this.protocol, this.getKeyManager(), this.getTrustManager());\n         }\n     }\n     \n     private void performSSLNegotiation() throws IOException {\n         this.initSSLContext();\n-        final SSLSocketFactory ssf = this.context.getSocketFactory();\n-        final String host = (this._hostname_ != null) ? this._hostname_ : this.getRemoteAddress().getHostAddress();\n-        final int port = this.getRemotePort();\n-        final SSLSocket socket = (SSLSocket)ssf.createSocket(this._socket_, host, port, true);\n-        socket.setEnableSessionCreation(true);\n-        socket.setUseClientMode(true);\n+        final SSLSocketFactory socketFactory = this.context.getSocketFactory();\n+        final String s = (this._hostname_ != null) ? this._hostname_ : this.getRemoteAddress().getHostAddress();\n+        final SSLSocket socket_ = (SSLSocket)socketFactory.createSocket(this._socket_, s, this.getRemotePort(), true);\n+        socket_.setEnableSessionCreation(true);\n+        socket_.setUseClientMode(true);\n         if (this.tlsEndpointChecking) {\n-            SSLSocketUtils.enableEndpointNameVerification(socket);\n+            SSLSocketUtils.enableEndpointNameVerification(socket_);\n         }\n         if (this.protocols != null) {\n-            socket.setEnabledProtocols(this.protocols);\n+            socket_.setEnabledProtocols(this.protocols);\n         }\n         if (this.suites != null) {\n-            socket.setEnabledCipherSuites(this.suites);\n+            socket_.setEnabledCipherSuites(this.suites);\n         }\n-        socket.startHandshake();\n-        this._socket_ = socket;\n-        this._input_ = socket.getInputStream();\n-        this._output_ = socket.getOutputStream();\n+        socket_.startHandshake();\n+        this._socket_ = socket_;\n+        this._input_ = socket_.getInputStream();\n+        this._output_ = socket_.getOutputStream();\n         this._reader = (BufferedReader)new CRLFLineReader((Reader)new InputStreamReader(this._input_, \"ISO-8859-1\"));\n         this.__writer = new BufferedWriter(new OutputStreamWriter(this._output_, \"ISO-8859-1\"));\n-        if (this.hostnameVerifier != null && !this.hostnameVerifier.verify(host, socket.getSession())) {\n+        if (this.hostnameVerifier != null && !this.hostnameVerifier.verify(s, socket_.getSession())) {\n             throw new SSLHandshakeException(\"Hostname doesn't match certificate\");\n         }\n     }\n     \n     private KeyManager getKeyManager() {\n         return this.keyManager;\n     }\n     \n-    public void setKeyManager(final KeyManager newKeyManager) {\n-        this.keyManager = newKeyManager;\n+    public void setKeyManager(final KeyManager keyManager) {\n+        this.keyManager = keyManager;\n     }\n     \n-    public void setEnabledCipherSuites(final String[] cipherSuites) {\n-        System.arraycopy(cipherSuites, 0, this.suites = new String[cipherSuites.length], 0, cipherSuites.length);\n+    public void setEnabledCipherSuites(final String[] array) {\n+        System.arraycopy(array, 0, this.suites = new String[array.length], 0, array.length);\n     }\n     \n     public String[] getEnabledCipherSuites() {\n         if (this._socket_ instanceof SSLSocket) {\n             return ((SSLSocket)this._socket_).getEnabledCipherSuites();\n         }\n         return null;\n     }\n     \n-    public void setEnabledProtocols(final String[] protocolVersions) {\n-        System.arraycopy(protocolVersions, 0, this.protocols = new String[protocolVersions.length], 0, protocolVersions.length);\n+    public void setEnabledProtocols(final String[] array) {\n+        System.arraycopy(array, 0, this.protocols = new String[array.length], 0, array.length);\n     }\n     \n     public String[] getEnabledProtocols() {\n         if (this._socket_ instanceof SSLSocket) {\n             return ((SSLSocket)this._socket_).getEnabledProtocols();\n         }\n         return null;\n@@ -150,27 +149,27 @@\n         return true;\n     }\n     \n     public TrustManager getTrustManager() {\n         return this.trustManager;\n     }\n     \n-    public void setTrustManager(final TrustManager newTrustManager) {\n-        this.trustManager = newTrustManager;\n+    public void setTrustManager(final TrustManager trustManager) {\n+        this.trustManager = trustManager;\n     }\n     \n     public HostnameVerifier getHostnameVerifier() {\n         return this.hostnameVerifier;\n     }\n     \n-    public void setHostnameVerifier(final HostnameVerifier newHostnameVerifier) {\n-        this.hostnameVerifier = newHostnameVerifier;\n+    public void setHostnameVerifier(final HostnameVerifier hostnameVerifier) {\n+        this.hostnameVerifier = hostnameVerifier;\n     }\n     \n     public boolean isEndpointCheckingEnabled() {\n         return this.tlsEndpointChecking;\n     }\n     \n-    public void setEndpointCheckingEnabled(final boolean enable) {\n-        this.tlsEndpointChecking = enable;\n+    public void setEndpointCheckingEnabled(final boolean tlsEndpointChecking) {\n+        this.tlsEndpointChecking = tlsEndpointChecking;\n     }\n }\n"}]}
