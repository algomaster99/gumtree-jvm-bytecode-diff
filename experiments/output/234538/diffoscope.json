{"diffoscope-json-version": 1, "source1": "first/QueueOutputStream.class", "source2": "second/QueueOutputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,28 +12,28 @@\n {\n     private final BlockingQueue<Integer> blockingQueue;\n     \n     public QueueOutputStream() {\n         this(new LinkedBlockingQueue<Integer>());\n     }\n     \n-    public QueueOutputStream(final BlockingQueue<Integer> blockingQueue) {\n-        this.blockingQueue = Objects.requireNonNull(blockingQueue, \"blockingQueue\");\n+    public QueueOutputStream(final BlockingQueue<Integer> obj) {\n+        this.blockingQueue = Objects.requireNonNull(obj, \"blockingQueue\");\n     }\n     \n     public QueueInputStream newQueueInputStream() {\n         return new QueueInputStream((BlockingQueue)this.blockingQueue);\n     }\n     \n     @Override\n-    public void write(final int b) throws InterruptedIOException {\n+    public void write(final int n) throws InterruptedIOException {\n         try {\n-            this.blockingQueue.put(Integer.valueOf(0xFF & b));\n+            this.blockingQueue.put(Integer.valueOf(0xFF & n));\n         }\n-        catch (final InterruptedException e) {\n+        catch (final InterruptedException cause) {\n             Thread.currentThread().interrupt();\n-            final InterruptedIOException interruptedIoException = new InterruptedIOException();\n-            interruptedIoException.initCause(e);\n-            throw interruptedIoException;\n+            final InterruptedIOException ex = new InterruptedIOException();\n+            ex.initCause(cause);\n+            throw ex;\n         }\n     }\n }\n"}]}
