{"diffoscope-json-version": 1, "source1": "first/ModulePackages.class", "source2": "second/ModulePackages.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,76 +7,77 @@\n import java.io.IOException;\n import java.io.DataInput;\n \n public final class ModulePackages extends Attribute\n {\n     private int[] packageIndexTable;\n     \n-    ModulePackages(final int nameIndex, final int length, final DataInput input, final ConstantPool constantPool) throws IOException {\n-        this(nameIndex, length, (int[])null, constantPool);\n-        final int packageCount = input.readUnsignedShort();\n-        this.packageIndexTable = new int[packageCount];\n-        for (int i = 0; i < packageCount; ++i) {\n-            this.packageIndexTable[i] = input.readUnsignedShort();\n+    ModulePackages(final int n, final int n2, final DataInput dataInput, final ConstantPool constantPool) throws IOException {\n+        this(n, n2, (int[])null, constantPool);\n+        final int unsignedShort = dataInput.readUnsignedShort();\n+        this.packageIndexTable = new int[unsignedShort];\n+        for (int i = 0; i < unsignedShort; ++i) {\n+            this.packageIndexTable[i] = dataInput.readUnsignedShort();\n         }\n     }\n     \n-    public ModulePackages(final int nameIndex, final int length, final int[] packageIndexTable, final ConstantPool constantPool) {\n-        super((byte)23, nameIndex, length, constantPool);\n-        this.packageIndexTable = ((packageIndexTable != null) ? packageIndexTable : ArrayUtils.EMPTY_INT_ARRAY);\n+    public ModulePackages(final int n, final int n2, final int[] array, final ConstantPool constantPool) {\n+        super((byte)23, n, n2, constantPool);\n+        this.packageIndexTable = ((array != null) ? array : ArrayUtils.EMPTY_INT_ARRAY);\n     }\n     \n-    public ModulePackages(final ModulePackages c) {\n-        this(c.getNameIndex(), c.getLength(), c.getPackageIndexTable(), c.getConstantPool());\n+    public ModulePackages(final ModulePackages modulePackages) {\n+        this(modulePackages.getNameIndex(), modulePackages.getLength(), modulePackages.getPackageIndexTable(), modulePackages.getConstantPool());\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitModulePackages(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitModulePackages(this);\n     }\n     \n     public Attribute copy(final ConstantPool constantPool) {\n-        final ModulePackages c = (ModulePackages)this.clone();\n+        final ModulePackages modulePackages = (ModulePackages)this.clone();\n         if (this.packageIndexTable != null) {\n-            c.packageIndexTable = this.packageIndexTable.clone();\n+            modulePackages.packageIndexTable = this.packageIndexTable.clone();\n         }\n-        c.setConstantPool(constantPool);\n-        return c;\n+        modulePackages.setConstantPool(constantPool);\n+        return modulePackages;\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        super.dump(file);\n-        file.writeShort(this.packageIndexTable.length);\n-        for (final int index : this.packageIndexTable) {\n-            file.writeShort(index);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        super.dump(dataOutputStream);\n+        dataOutputStream.writeShort(this.packageIndexTable.length);\n+        final int[] packageIndexTable = this.packageIndexTable;\n+        for (int length = packageIndexTable.length, i = 0; i < length; ++i) {\n+            dataOutputStream.writeShort(packageIndexTable[i]);\n         }\n     }\n     \n     public int getNumberOfPackages() {\n         return (this.packageIndexTable == null) ? 0 : this.packageIndexTable.length;\n     }\n     \n     public int[] getPackageIndexTable() {\n         return this.packageIndexTable;\n     }\n     \n     public String[] getPackageNames() {\n-        final String[] names = new String[this.packageIndexTable.length];\n-        Arrays.setAll(names, i -> Utility.pathToPackage(super.getConstantPool().getConstantString(this.packageIndexTable[i], (byte)20)));\n-        return names;\n+        final String[] array = new String[this.packageIndexTable.length];\n+        Arrays.setAll(array, n2 -> Utility.pathToPackage(super.getConstantPool().getConstantString(this.packageIndexTable[n2], (byte)20)));\n+        return array;\n     }\n     \n-    public void setPackageIndexTable(final int[] packageIndexTable) {\n-        this.packageIndexTable = ((packageIndexTable != null) ? packageIndexTable : ArrayUtils.EMPTY_INT_ARRAY);\n+    public void setPackageIndexTable(final int[] array) {\n+        this.packageIndexTable = ((array != null) ? array : ArrayUtils.EMPTY_INT_ARRAY);\n     }\n     \n     public String toString() {\n-        final StringBuilder buf = new StringBuilder();\n-        buf.append(\"ModulePackages(\");\n-        buf.append(this.packageIndexTable.length);\n-        buf.append(\"):\\n\");\n-        for (final int index : this.packageIndexTable) {\n-            final String packageName = super.getConstantPool().getConstantString(index, (byte)20);\n-            buf.append(\"  \").append(Utility.compactClassName(packageName, false)).append(\"\\n\");\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"ModulePackages(\");\n+        sb.append(this.packageIndexTable.length);\n+        sb.append(\"):\\n\");\n+        final int[] packageIndexTable = this.packageIndexTable;\n+        for (int length = packageIndexTable.length, i = 0; i < length; ++i) {\n+            sb.append(\"  \").append(Utility.compactClassName(super.getConstantPool().getConstantString(packageIndexTable[i], (byte)20), false)).append(\"\\n\");\n         }\n-        return buf.substring();\n+        return sb.substring();\n     }\n }\n"}]}
