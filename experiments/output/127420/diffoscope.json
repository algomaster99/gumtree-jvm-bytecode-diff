{"diffoscope-json-version": 1, "source1": "first/CatalogResolver$Catalog.class", "source2": "second/CatalogResolver$Catalog.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -28,45 +28,49 @@\n         final Vector<String> catalogs = this.catalogManager.getCatalogFiles();\n         if (catalogs != null) {\n             for (int count = 0; count < catalogs.size(); ++count) {\n                 final String fileName = (String)catalogs.elementAt(count);\n                 URL url = null;\n                 InputStream inputStream = null;\n                 try {\n-                    url = CatalogResolver.access$000(this.fs, base, fileName);\n+                    url = CatalogResolver.access$0(this.fs, base, fileName);\n                     if (url != null) {\n                         inputStream = this.fs.getInputStream(url);\n                     }\n                 }\n                 catch (final ConfigurationException ce) {\n                     final String name = url.toString();\n                     this.catalogManager.debug.message(9, \"Unable to get input stream for \" + name + \". \" + ce.getMessage());\n                 }\n-                if (inputStream != null) {\n-                    final String mimeType = this.fileNameMap.getContentTypeFor(fileName);\n-                    try {\n-                        if (mimeType != null) {\n-                            this.parseCatalog(mimeType, inputStream);\n-                            continue;\n+                Label_0246: {\n+                    if (inputStream != null) {\n+                        final String mimeType = this.fileNameMap.getContentTypeFor(fileName);\n+                        try {\n+                            if (mimeType != null) {\n+                                this.parseCatalog(mimeType, inputStream);\n+                                continue;\n+                            }\n+                        }\n+                        catch (final Exception ex) {\n+                            this.catalogManager.debug.message(9, \"Exception caught parsing input stream for \" + fileName + \". \" + ex.getMessage());\n+                            break Label_0246;\n+                        }\n+                        finally {\n+                            inputStream.close();\n                         }\n-                    }\n-                    catch (final Exception ex) {\n-                        this.catalogManager.debug.message(9, \"Exception caught parsing input stream for \" + fileName + \". \" + ex.getMessage());\n-                    }\n-                    finally {\n                         inputStream.close();\n                     }\n                 }\n                 this.parseCatalog(base, fileName);\n             }\n         }\n     }\n     \n     public void parseCatalog(final String baseDir, final String fileName) throws IOException {\n-        this.base = CatalogResolver.access$000(this.fs, baseDir, fileName);\n+        this.base = CatalogResolver.access$0(this.fs, baseDir, fileName);\n         this.catalogCwd = this.base;\n         this.default_override = this.catalogManager.getPreferPublic();\n         this.catalogManager.debug.message(4, \"Parse catalog: \" + fileName);\n         boolean parsed = false;\n         for (int count = 0; !parsed && count < this.readerArr.size(); ++count) {\n             final CatalogReader reader = (CatalogReader)this.readerArr.get(count);\n             InputStream inputStream;\n@@ -94,23 +98,30 @@\n                 }\n                 try {\n                     inputStream.close();\n                 }\n                 catch (final IOException ioe) {\n                     inputStream = null;\n                 }\n+                continue;\n             }\n             finally {\n                 try {\n                     inputStream.close();\n                 }\n-                catch (final IOException ioe2) {\n+                catch (final IOException ioe) {\n                     inputStream = null;\n                 }\n             }\n+            try {\n+                inputStream.close();\n+            }\n+            catch (final IOException ioe) {\n+                inputStream = null;\n+            }\n         }\n         if (parsed) {\n             this.parsePendingCatalogs();\n         }\n     }\n     \n     protected String normalizeURI(final String uriref) {\n"}]}
