{"diffoscope-json-version": 1, "source1": "first/XmlMetaReader.class", "source2": "second/XmlMetaReader.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,18 +1,16 @@\n \n package com.puppycrawl.tools.checkstyle.meta;\n \n+import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n-import org.w3c.dom.Document;\n-import javax.xml.parsers.DocumentBuilder;\n import org.w3c.dom.Element;\n import javax.xml.parsers.DocumentBuilderFactory;\n import java.io.InputStream;\n import java.util.Iterator;\n-import java.util.Set;\n import org.xml.sax.SAXException;\n import java.io.IOException;\n import javax.xml.parsers.ParserConfigurationException;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.regex.Pattern;\n@@ -25,125 +23,116 @@\n {\n     private static final String XML_TAG_NAME = \"name\";\n     private static final String XML_TAG_DESCRIPTION = \"description\";\n     \n     private XmlMetaReader() {\n     }\n     \n-    public static List<ModuleDetails> readAllModulesIncludingThirdPartyIfAny(final String... thirdPartyPackages) {\n-        final Set<String> standardModuleFileNames = new Reflections(\"com.puppycrawl.tools.checkstyle.meta\", new Scanner[] { (Scanner)Scanners.Resources }).getResources(Pattern.compile(\".*\\\\.xml\"));\n-        final Set<String> allMetadataSources = new HashSet<String>(standardModuleFileNames);\n-        for (final String packageName : thirdPartyPackages) {\n-            final Set<String> thirdPartyModuleFileNames = new Reflections(packageName, new Scanner[] { (Scanner)Scanners.Resources }).getResources(Pattern.compile(\".*checkstylemeta-.*\\\\.xml\"));\n-            allMetadataSources.addAll(thirdPartyModuleFileNames);\n+    public static List<ModuleDetails> readAllModulesIncludingThirdPartyIfAny(final String... array) {\n+        final HashSet set = new HashSet(new Reflections(\"com.puppycrawl.tools.checkstyle.meta\", new Scanner[] { (Scanner)Scanners.Resources }).getResources(Pattern.compile(\".*\\\\.xml\")));\n+        for (int length = array.length, i = 0; i < length; ++i) {\n+            set.addAll(new Reflections(array[i], new Scanner[] { (Scanner)Scanners.Resources }).getResources(Pattern.compile(\".*checkstylemeta-.*\\\\.xml\")));\n         }\n-        final List<ModuleDetails> result = new ArrayList<ModuleDetails>(allMetadataSources.size());\n-        for (String fileName : allMetadataSources) {\n+        final ArrayList list = new ArrayList(set.size());\n+        for (String s : set) {\n             ModuleType moduleType;\n-            if (fileName.endsWith(\"FileFilter.xml\")) {\n+            if (s.endsWith(\"FileFilter.xml\")) {\n                 moduleType = ModuleType.FILEFILTER;\n             }\n-            else if (fileName.endsWith(\"Filter.xml\")) {\n+            else if (s.endsWith(\"Filter.xml\")) {\n                 moduleType = ModuleType.FILTER;\n             }\n             else {\n                 moduleType = ModuleType.CHECK;\n             }\n-            ModuleDetails moduleDetails;\n+            ModuleDetails read;\n             try {\n-                moduleDetails = read(XmlMetaReader.class.getResourceAsStream(\"/\" + fileName), moduleType);\n+                read = read(XmlMetaReader.class.getResourceAsStream(\"/\" + s), moduleType);\n             }\n-            catch (final ParserConfigurationException | IOException | SAXException ex) {\n-                throw new IllegalStateException(\"Problem to read all modules including third party if any. Problem detected at file: \" + fileName, (Throwable)ex);\n+            catch (final ParserConfigurationException | IOException | SAXException cause) {\n+                throw new IllegalStateException(\"Problem to read all modules including third party if any. Problem detected at file: \" + s, (Throwable)cause);\n             }\n-            result.add(moduleDetails);\n+            list.add((Object)read);\n         }\n-        return result;\n+        return (List<ModuleDetails>)list;\n     }\n     \n-    public static ModuleDetails read(final InputStream moduleMetadataStream, final ModuleType moduleType) throws ParserConfigurationException, IOException, SAXException {\n-        ModuleDetails result = null;\n+    public static ModuleDetails read(final InputStream is, final ModuleType moduleType) throws ParserConfigurationException, IOException, SAXException {\n+        ModuleDetails moduleDetails = null;\n         if (moduleType != null) {\n-            final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n-            factory.setAttribute(\"http://javax.xml.XMLConstants/property/accessExternalDTD\", \"\");\n-            factory.setAttribute(\"http://javax.xml.XMLConstants/property/accessExternalSchema\", \"\");\n-            final DocumentBuilder builder = factory.newDocumentBuilder();\n-            final Document document = builder.parse(moduleMetadataStream);\n-            final Element root = document.getDocumentElement();\n-            final Element element = (Element)getDirectChildsByTag(root, \"module\").get(0);\n-            final Element module = (Element)getDirectChildsByTag(element, moduleType.getLabel()).get(0);\n-            result = new ModuleDetails();\n-            result.setModuleType(moduleType);\n-            populateModule(module, result);\n-        }\n-        return result;\n-    }\n-    \n-    private static void populateModule(final Element mod, final ModuleDetails moduleDetails) {\n-        moduleDetails.setName(getAttributeValue(mod, \"name\"));\n-        moduleDetails.setFullQualifiedName(getAttributeValue(mod, \"fully-qualified-name\"));\n-        moduleDetails.setParent(getAttributeValue(mod, \"parent\"));\n-        moduleDetails.setDescription(((Element)getDirectChildsByTag(mod, \"description\").get(0)).getFirstChild().getNodeValue());\n-        final List<Element> properties = getDirectChildsByTag(mod, \"properties\");\n-        if (!properties.isEmpty()) {\n-            final List<ModulePropertyDetails> modulePropertyDetailsList = createProperties(properties.get(0));\n-            moduleDetails.addToProperties((List)modulePropertyDetailsList);\n-        }\n-        final List<String> messageKeys = getListContentByAttribute(mod, \"message-keys\", \"message-key\", \"key\");\n-        if (messageKeys != null) {\n-            moduleDetails.addToViolationMessages((List)messageKeys);\n-        }\n-    }\n-    \n-    private static List<ModulePropertyDetails> createProperties(final Element properties) {\n-        final NodeList propertyList = properties.getElementsByTagName(\"property\");\n-        final int propertyListLength = propertyList.getLength();\n-        final List<ModulePropertyDetails> result = new ArrayList<ModulePropertyDetails>(propertyListLength);\n-        for (int i = 0; i < propertyListLength; ++i) {\n-            final ModulePropertyDetails propertyDetails = new ModulePropertyDetails();\n-            final Element prop = (Element)propertyList.item(i);\n-            propertyDetails.setName(getAttributeValue(prop, \"name\"));\n-            propertyDetails.setType(getAttributeValue(prop, \"type\"));\n-            final String defaultValueTag = \"default-value\";\n-            if (prop.hasAttribute(\"default-value\")) {\n-                propertyDetails.setDefaultValue(getAttributeValue(prop, \"default-value\"));\n-            }\n-            final String validationTypeTag = \"validation-type\";\n-            if (prop.hasAttribute(\"validation-type\")) {\n-                propertyDetails.setValidationType(getAttributeValue(prop, \"validation-type\"));\n-            }\n-            propertyDetails.setDescription(((Element)getDirectChildsByTag(prop, \"description\").get(0)).getFirstChild().getNodeValue());\n-            result.add(propertyDetails);\n-        }\n-        return result;\n-    }\n-    \n-    private static List<String> getListContentByAttribute(final Element element, final String listParent, final String listOption, final String attribute) {\n-        final List<Element> children = getDirectChildsByTag(element, listParent);\n-        List<String> result = null;\n-        if (!children.isEmpty()) {\n-            final NodeList nodeList = ((Element)children.get(0)).getElementsByTagName(listOption);\n-            final int nodeListLength = nodeList.getLength();\n-            final List<String> listContent = new ArrayList<String>(nodeListLength);\n-            for (int j = 0; j < nodeListLength; ++j) {\n-                listContent.add(getAttributeValue((Element)nodeList.item(j), attribute));\n-            }\n-            result = listContent;\n-        }\n-        return result;\n-    }\n-    \n-    private static List<Element> getDirectChildsByTag(final Element element, final String sTagName) {\n-        final NodeList children = element.getElementsByTagName(sTagName);\n-        final List<Element> res = new ArrayList<Element>();\n-        for (int i = 0; i < children.getLength(); ++i) {\n-            if (children.item(i).getParentNode().equals(element)) {\n-                res.add((Element)children.item(i));\n+            final DocumentBuilderFactory instance = DocumentBuilderFactory.newInstance();\n+            instance.setAttribute(\"http://javax.xml.XMLConstants/property/accessExternalDTD\", \"\");\n+            instance.setAttribute(\"http://javax.xml.XMLConstants/property/accessExternalSchema\", \"\");\n+            final Element element = (Element)getDirectChildsByTag(getDirectChildsByTag(instance.newDocumentBuilder().parse(is).getDocumentElement(), \"module\").get(0), moduleType.getLabel()).get(0);\n+            moduleDetails = new ModuleDetails();\n+            moduleDetails.setModuleType(moduleType);\n+            populateModule(element, moduleDetails);\n+        }\n+        return moduleDetails;\n+    }\n+    \n+    private static void populateModule(final Element element, final ModuleDetails moduleDetails) {\n+        moduleDetails.setName(getAttributeValue(element, \"name\"));\n+        moduleDetails.setFullQualifiedName(getAttributeValue(element, \"fully-qualified-name\"));\n+        moduleDetails.setParent(getAttributeValue(element, \"parent\"));\n+        moduleDetails.setDescription(((Element)getDirectChildsByTag(element, \"description\").get(0)).getFirstChild().getNodeValue());\n+        final List<Element> directChildsByTag = getDirectChildsByTag(element, \"properties\");\n+        if (!directChildsByTag.isEmpty()) {\n+            moduleDetails.addToProperties((List)createProperties((Element)directChildsByTag.get(0)));\n+        }\n+        final List<String> listContentByAttribute = getListContentByAttribute(element, \"message-keys\", \"message-key\", \"key\");\n+        if (listContentByAttribute != null) {\n+            moduleDetails.addToViolationMessages((List)listContentByAttribute);\n+        }\n+    }\n+    \n+    private static List<ModulePropertyDetails> createProperties(final Element element) {\n+        final NodeList elementsByTagName = element.getElementsByTagName(\"property\");\n+        final int length = elementsByTagName.getLength();\n+        final ArrayList list = new ArrayList(length);\n+        for (int i = 0; i < length; ++i) {\n+            final ModulePropertyDetails modulePropertyDetails = new ModulePropertyDetails();\n+            final Element element2 = (Element)elementsByTagName.item(i);\n+            modulePropertyDetails.setName(getAttributeValue(element2, \"name\"));\n+            modulePropertyDetails.setType(getAttributeValue(element2, \"type\"));\n+            if (element2.hasAttribute(\"default-value\")) {\n+                modulePropertyDetails.setDefaultValue(getAttributeValue(element2, \"default-value\"));\n+            }\n+            if (element2.hasAttribute(\"validation-type\")) {\n+                modulePropertyDetails.setValidationType(getAttributeValue(element2, \"validation-type\"));\n+            }\n+            modulePropertyDetails.setDescription(((Element)getDirectChildsByTag(element2, \"description\").get(0)).getFirstChild().getNodeValue());\n+            list.add((Object)modulePropertyDetails);\n+        }\n+        return (List<ModulePropertyDetails>)list;\n+    }\n+    \n+    private static List<String> getListContentByAttribute(final Element element, final String s, final String s2, final String s3) {\n+        final List<Element> directChildsByTag = getDirectChildsByTag(element, s);\n+        List<String> list = null;\n+        if (!directChildsByTag.isEmpty()) {\n+            final NodeList elementsByTagName = ((Element)directChildsByTag.get(0)).getElementsByTagName(s2);\n+            final int length = elementsByTagName.getLength();\n+            final ArrayList list2 = new ArrayList(length);\n+            for (int i = 0; i < length; ++i) {\n+                list2.add((Object)getAttributeValue((Element)elementsByTagName.item(i), s3));\n+            }\n+            list = (List<String>)list2;\n+        }\n+        return list;\n+    }\n+    \n+    private static List<Element> getDirectChildsByTag(final Element obj, final String s) {\n+        final NodeList elementsByTagName = obj.getElementsByTagName(s);\n+        final ArrayList list = new ArrayList();\n+        for (int i = 0; i < elementsByTagName.getLength(); ++i) {\n+            if (elementsByTagName.item(i).getParentNode().equals(obj)) {\n+                list.add(elementsByTagName.item(i));\n             }\n         }\n-        return res;\n+        return list;\n     }\n     \n-    private static String getAttributeValue(final Element element, final String attribute) {\n-        return element.getAttributes().getNamedItem(attribute).getNodeValue();\n+    private static String getAttributeValue(final Element element, final String s) {\n+        return element.getAttributes().getNamedItem(s).getNodeValue();\n     }\n }\n"}]}
