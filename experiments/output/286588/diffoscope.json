{"diffoscope-json-version": 1, "source1": "first/BoundedSeekableByteChannelInputStream.class", "source2": "second/BoundedSeekableByteChannelInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,33 +1,33 @@\n-  SHA-256 checksum 3aab0575724a27892ebc1d1ee962bbf5efab8f44483788404f3c1fd42f263123\n+  SHA-256 checksum fcfb70ccdebefa968a14dc508cc03b10731c5d268235b15507d371900fe80321\n   Compiled from \"BoundedSeekableByteChannelInputStream.java\"\n class org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream extends java.io.InputStream\n   minor version: 0\n-  major version: 51\n+  major version: 53\n   flags: (0x0020) ACC_SUPER\n   this_class: #4                          // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream\n   super_class: #17                        // java/io/InputStream\n   interfaces: 0, fields: 4, methods: 5, attributes: 1\n Constant pool:\n-   #1 = Methodref          #17.#46        // java/io/InputStream.\"<init>\":()V\n-   #2 = Fieldref           #4.#47         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.channel:Ljava/nio/channels/SeekableByteChannel;\n-   #3 = Fieldref           #4.#48         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.bytesRemaining:J\n-   #4 = Class              #49            // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream\n+   #1 = Methodref          #17.#45        // java/io/InputStream.\"<init>\":()V\n+   #2 = Fieldref           #4.#46         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.channel:Ljava/nio/channels/SeekableByteChannel;\n+   #3 = Fieldref           #4.#47         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.bytesRemaining:J\n+   #4 = Class              #48            // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream\n    #5 = Long               8192l\n-   #7 = Methodref          #50.#51        // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-   #8 = Fieldref           #4.#52         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.buffer:Ljava/nio/ByteBuffer;\n-   #9 = Methodref          #4.#53         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.read:(I)I\n-  #10 = Methodref          #50.#54        // java/nio/ByteBuffer.get:()B\n-  #11 = Methodref          #50.#55        // java/nio/ByteBuffer.capacity:()I\n-  #12 = InterfaceMethodref #56.#57        // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n-  #13 = Methodref          #50.#58        // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n-  #14 = Methodref          #50.#59        // java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n-  #15 = Methodref          #50.#60        // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n-  #16 = Methodref          #61.#62        // java/nio/Buffer.limit:(I)Ljava/nio/Buffer;\n-  #17 = Class              #63            // java/io/InputStream\n+   #7 = Methodref          #39.#49        // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+   #8 = Fieldref           #4.#50         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.buffer:Ljava/nio/ByteBuffer;\n+   #9 = Methodref          #4.#51         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.read:(I)I\n+  #10 = Methodref          #39.#52        // java/nio/ByteBuffer.get:()B\n+  #11 = Methodref          #39.#53        // java/nio/ByteBuffer.capacity:()I\n+  #12 = InterfaceMethodref #33.#54        // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+  #13 = Methodref          #39.#55        // java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+  #14 = Methodref          #39.#56        // java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n+  #15 = Methodref          #39.#57        // java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+  #16 = Methodref          #39.#58        // java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n+  #17 = Class              #59            // java/io/InputStream\n   #18 = Utf8               MAX_BUF_LEN\n   #19 = Utf8               I\n   #20 = Utf8               ConstantValue\n   #21 = Integer            8192\n   #22 = Utf8               buffer\n   #23 = Utf8               Ljava/nio/ByteBuffer;\n   #24 = Utf8               channel\n@@ -35,61 +35,55 @@\n   #26 = Utf8               bytesRemaining\n   #27 = Utf8               J\n   #28 = Utf8               <init>\n   #29 = Utf8               (Ljava/nio/channels/SeekableByteChannel;J)V\n   #30 = Utf8               Code\n   #31 = Utf8               LineNumberTable\n   #32 = Utf8               StackMapTable\n-  #33 = Class              #49            // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream\n-  #34 = Class              #64            // java/nio/channels/SeekableByteChannel\n-  #35 = Utf8               read\n-  #36 = Utf8               ()I\n-  #37 = Utf8               Exceptions\n-  #38 = Class              #65            // java/io/IOException\n-  #39 = Utf8               ([BII)I\n-  #40 = Class              #66            // java/nio/ByteBuffer\n-  #41 = Utf8               (I)I\n-  #42 = Utf8               close\n-  #43 = Utf8               ()V\n-  #44 = Utf8               SourceFile\n-  #45 = Utf8               BoundedSeekableByteChannelInputStream.java\n-  #46 = NameAndType        #28:#43        // \"<init>\":()V\n-  #47 = NameAndType        #24:#25        // channel:Ljava/nio/channels/SeekableByteChannel;\n-  #48 = NameAndType        #26:#27        // bytesRemaining:J\n-  #49 = Utf8               org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream\n-  #50 = Class              #66            // java/nio/ByteBuffer\n-  #51 = NameAndType        #67:#68        // allocate:(I)Ljava/nio/ByteBuffer;\n-  #52 = NameAndType        #22:#23        // buffer:Ljava/nio/ByteBuffer;\n-  #53 = NameAndType        #35:#41        // read:(I)I\n-  #54 = NameAndType        #69:#70        // get:()B\n-  #55 = NameAndType        #71:#36        // capacity:()I\n-  #56 = Class              #64            // java/nio/channels/SeekableByteChannel\n-  #57 = NameAndType        #35:#72        // read:(Ljava/nio/ByteBuffer;)I\n-  #58 = NameAndType        #73:#74        // flip:()Ljava/nio/Buffer;\n-  #59 = NameAndType        #69:#75        // get:([BII)Ljava/nio/ByteBuffer;\n-  #60 = NameAndType        #76:#74        // rewind:()Ljava/nio/Buffer;\n-  #61 = Class              #77            // java/nio/Buffer\n-  #62 = NameAndType        #78:#79        // limit:(I)Ljava/nio/Buffer;\n-  #63 = Utf8               java/io/InputStream\n-  #64 = Utf8               java/nio/channels/SeekableByteChannel\n-  #65 = Utf8               java/io/IOException\n-  #66 = Utf8               java/nio/ByteBuffer\n-  #67 = Utf8               allocate\n-  #68 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #69 = Utf8               get\n-  #70 = Utf8               ()B\n-  #71 = Utf8               capacity\n-  #72 = Utf8               (Ljava/nio/ByteBuffer;)I\n-  #73 = Utf8               flip\n-  #74 = Utf8               ()Ljava/nio/Buffer;\n-  #75 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n-  #76 = Utf8               rewind\n-  #77 = Utf8               java/nio/Buffer\n-  #78 = Utf8               limit\n-  #79 = Utf8               (I)Ljava/nio/Buffer;\n+  #33 = Class              #60            // java/nio/channels/SeekableByteChannel\n+  #34 = Utf8               read\n+  #35 = Utf8               ()I\n+  #36 = Utf8               Exceptions\n+  #37 = Class              #61            // java/io/IOException\n+  #38 = Utf8               ([BII)I\n+  #39 = Class              #62            // java/nio/ByteBuffer\n+  #40 = Utf8               (I)I\n+  #41 = Utf8               close\n+  #42 = Utf8               ()V\n+  #43 = Utf8               SourceFile\n+  #44 = Utf8               BoundedSeekableByteChannelInputStream.java\n+  #45 = NameAndType        #28:#42        // \"<init>\":()V\n+  #46 = NameAndType        #24:#25        // channel:Ljava/nio/channels/SeekableByteChannel;\n+  #47 = NameAndType        #26:#27        // bytesRemaining:J\n+  #48 = Utf8               org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream\n+  #49 = NameAndType        #63:#64        // allocate:(I)Ljava/nio/ByteBuffer;\n+  #50 = NameAndType        #22:#23        // buffer:Ljava/nio/ByteBuffer;\n+  #51 = NameAndType        #34:#40        // read:(I)I\n+  #52 = NameAndType        #65:#66        // get:()B\n+  #53 = NameAndType        #67:#35        // capacity:()I\n+  #54 = NameAndType        #34:#68        // read:(Ljava/nio/ByteBuffer;)I\n+  #55 = NameAndType        #69:#70        // flip:()Ljava/nio/ByteBuffer;\n+  #56 = NameAndType        #65:#71        // get:([BII)Ljava/nio/ByteBuffer;\n+  #57 = NameAndType        #72:#70        // rewind:()Ljava/nio/ByteBuffer;\n+  #58 = NameAndType        #73:#64        // limit:(I)Ljava/nio/ByteBuffer;\n+  #59 = Utf8               java/io/InputStream\n+  #60 = Utf8               java/nio/channels/SeekableByteChannel\n+  #61 = Utf8               java/io/IOException\n+  #62 = Utf8               java/nio/ByteBuffer\n+  #63 = Utf8               allocate\n+  #64 = Utf8               (I)Ljava/nio/ByteBuffer;\n+  #65 = Utf8               get\n+  #66 = Utf8               ()B\n+  #67 = Utf8               capacity\n+  #68 = Utf8               (Ljava/nio/ByteBuffer;)I\n+  #69 = Utf8               flip\n+  #70 = Utf8               ()Ljava/nio/ByteBuffer;\n+  #71 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n+  #72 = Utf8               rewind\n+  #73 = Utf8               limit\n {\n   private static final int MAX_BUF_LEN = 8192;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 8192\n \n   private final java.nio.ByteBuffer buffer;\n@@ -246,15 +240,15 @@\n         72: astore        6\n         74: aload_0\n         75: getfield      #2                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n         78: aload         6\n         80: invokeinterface #12,  2           // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n         85: istore        5\n         87: aload         6\n-        89: invokevirtual #13                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+        89: invokevirtual #13                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n         92: pop\n         93: iload         5\n         95: iflt          120\n         98: aload         6\n        100: aload_1\n        101: iload_2\n        102: iload         5\n@@ -304,27 +298,27 @@\n   private int read(int) throws java.io.IOException;\n     descriptor: (I)I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=3, args_size=2\n          0: aload_0\n          1: getfield      #8                  // Field buffer:Ljava/nio/ByteBuffer;\n-         4: invokevirtual #15                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+         4: invokevirtual #15                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n          7: iload_1\n-         8: invokevirtual #16                 // Method java/nio/Buffer.limit:(I)Ljava/nio/Buffer;\n+         8: invokevirtual #16                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n         11: pop\n         12: aload_0\n         13: getfield      #2                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n         16: aload_0\n         17: getfield      #8                  // Field buffer:Ljava/nio/ByteBuffer;\n         20: invokeinterface #12,  2           // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n         25: istore_2\n         26: aload_0\n         27: getfield      #8                  // Field buffer:Ljava/nio/ByteBuffer;\n-        30: invokevirtual #13                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+        30: invokevirtual #13                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n         33: pop\n         34: iload_2\n         35: ireturn\n       LineNumberTable:\n         line 96: 0\n         line 97: 12\n         line 98: 26\n"}]}
