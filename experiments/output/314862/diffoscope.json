{"diffoscope-json-version": 1, "source1": "first/MagicNumberFileFilter.class", "source2": "second/MagicNumberFileFilter.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,216 +1,215 @@\n-  SHA-256 checksum 3e6dd60fa944b50b584d56d8b674ea0f78eab8f8319fe123ab2a2aad455a5855\n+  SHA-256 checksum 87a11ce4207dadc88e39fb87b2711a3f44bda0b41cd7ac9d863c10d98ab16251\n   Compiled from \"MagicNumberFileFilter.java\"\n public class org.apache.commons.io.filefilter.MagicNumberFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #52                         // org/apache/commons/io/filefilter/MagicNumberFileFilter\n-  super_class: #53                        // org/apache/commons/io/filefilter/AbstractFileFilter\n+  this_class: #2                          // org/apache/commons/io/filefilter/MagicNumberFileFilter\n+  super_class: #8                         // org/apache/commons/io/filefilter/AbstractFileFilter\n   interfaces: 1, fields: 3, methods: 7, attributes: 1\n Constant pool:\n-    #1 = Methodref          #52.#85       // org/apache/commons/io/filefilter/MagicNumberFileFilter.\"<init>\":([BJ)V\n-    #2 = Methodref          #53.#86       // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n-    #3 = String             #60           // magicNumbers\n-    #4 = Methodref          #87.#88       // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-    #5 = Class              #89           // java/lang/IllegalArgumentException\n-    #6 = String             #90           // The magic number must contain at least one byte\n-    #7 = Methodref          #5.#91        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-    #8 = String             #92           // The offset cannot be negative\n-    #9 = Methodref          #93.#94       // \"[B\".clone:()Ljava/lang/Object;\n-   #10 = Class              #61           // \"[B\"\n-   #11 = Fieldref           #52.#95       // org/apache/commons/io/filefilter/MagicNumberFileFilter.magicNumbers:[B\n-   #12 = Fieldref           #52.#96       // org/apache/commons/io/filefilter/MagicNumberFileFilter.byteOffset:J\n-   #13 = Methodref          #52.#97       // org/apache/commons/io/filefilter/MagicNumberFileFilter.\"<init>\":(Ljava/lang/String;J)V\n-   #14 = String             #98           // magicNumber\n-   #15 = Methodref          #46.#99       // java/lang/String.isEmpty:()Z\n-   #16 = Methodref          #100.#101     // java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n-   #17 = Methodref          #46.#102      // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n-   #18 = Methodref          #73.#103      // java/io/File.isFile:()Z\n-   #19 = Methodref          #73.#104      // java/io/File.canRead:()Z\n-   #20 = Fieldref           #105.#106     // org/apache/commons/io/RandomAccessFileMode.READ_ONLY:Lorg/apache/commons/io/RandomAccessFileMode;\n-   #21 = Methodref          #105.#107     // org/apache/commons/io/RandomAccessFileMode.create:(Ljava/io/File;)Ljava/io/RandomAccessFile;\n-   #22 = Methodref          #108.#109     // org/apache/commons/io/IOUtils.byteArray:(I)[B\n-   #23 = Methodref          #74.#110      // java/io/RandomAccessFile.seek:(J)V\n-   #24 = Methodref          #74.#111      // java/io/RandomAccessFile.read:([B)I\n-   #25 = Methodref          #74.#112      // java/io/RandomAccessFile.close:()V\n-   #26 = Methodref          #113.#114     // java/util/Arrays.equals:([B[B)Z\n-   #27 = Class              #115          // java/lang/Throwable\n-   #28 = Methodref          #27.#116      // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-   #29 = Class              #117          // java/io/IOException\n-   #30 = Class              #118          // java/nio/file/LinkOption\n-   #31 = Methodref          #119.#120     // java/nio/file/Files.isRegularFile:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n-   #32 = Methodref          #119.#121     // java/nio/file/Files.isReadable:(Ljava/nio/file/Path;)Z\n-   #33 = Class              #122          // java/nio/file/OpenOption\n-   #34 = Methodref          #78.#123      // java/nio/channels/FileChannel.open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;\n-   #35 = Methodref          #79.#124      // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-   #36 = Methodref          #78.#125      // java/nio/channels/FileChannel.read:(Ljava/nio/ByteBuffer;)I\n-   #37 = Fieldref           #80.#126      // java/nio/file/FileVisitResult.TERMINATE:Ljava/nio/file/FileVisitResult;\n-   #38 = Methodref          #78.#112      // java/nio/channels/FileChannel.close:()V\n-   #39 = Methodref          #79.#127      // java/nio/ByteBuffer.array:()[B\n-   #40 = Methodref          #52.#128      // org/apache/commons/io/filefilter/MagicNumberFileFilter.toFileVisitResult:(Z)Ljava/nio/file/FileVisitResult;\n-   #41 = Class              #129          // java/lang/StringBuilder\n-   #42 = Methodref          #53.#130      // org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n-   #43 = Methodref          #41.#91       // java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n-   #44 = String             #131          // (\n-   #45 = Methodref          #41.#132      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #46 = Class              #133          // java/lang/String\n-   #47 = Methodref          #46.#134      // java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n-   #48 = String             #135          // ,\n-   #49 = Methodref          #41.#136      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #50 = String             #137          // )\n-   #51 = Methodref          #41.#130      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #52 = Class              #138          // org/apache/commons/io/filefilter/MagicNumberFileFilter\n-   #53 = Class              #139          // org/apache/commons/io/filefilter/AbstractFileFilter\n-   #54 = Class              #140          // java/io/Serializable\n-   #55 = Utf8               serialVersionUID\n-   #56 = Utf8               J\n-   #57 = Utf8               ConstantValue\n-   #58 = Long               -547733176983104172l\n-   #60 = Utf8               magicNumbers\n-   #61 = Utf8               [B\n-   #62 = Utf8               byteOffset\n-   #63 = Utf8               <init>\n-   #64 = Utf8               ([B)V\n-   #65 = Utf8               Code\n-   #66 = Utf8               LineNumberTable\n-   #67 = Utf8               ([BJ)V\n-   #68 = Utf8               StackMapTable\n-   #69 = Utf8               (Ljava/lang/String;)V\n-   #70 = Utf8               (Ljava/lang/String;J)V\n-   #71 = Utf8               accept\n-   #72 = Utf8               (Ljava/io/File;)Z\n-   #73 = Class              #141          // java/io/File\n-   #74 = Class              #142          // java/io/RandomAccessFile\n-   #75 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-   #76 = Class              #143          // java/nio/file/Path\n-   #77 = Class              #144          // java/nio/file/attribute/BasicFileAttributes\n-   #78 = Class              #145          // java/nio/channels/FileChannel\n-   #79 = Class              #146          // java/nio/ByteBuffer\n-   #80 = Class              #147          // java/nio/file/FileVisitResult\n-   #81 = Utf8               toString\n-   #82 = Utf8               ()Ljava/lang/String;\n-   #83 = Utf8               SourceFile\n-   #84 = Utf8               MagicNumberFileFilter.java\n-   #85 = NameAndType        #63:#67       // \"<init>\":([BJ)V\n-   #86 = NameAndType        #63:#148      // \"<init>\":()V\n-   #87 = Class              #149          // java/util/Objects\n-   #88 = NameAndType        #150:#151     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-   #89 = Utf8               java/lang/IllegalArgumentException\n-   #90 = Utf8               The magic number must contain at least one byte\n-   #91 = NameAndType        #63:#69       // \"<init>\":(Ljava/lang/String;)V\n-   #92 = Utf8               The offset cannot be negative\n-   #93 = Class              #61           // \"[B\"\n-   #94 = NameAndType        #152:#153     // clone:()Ljava/lang/Object;\n-   #95 = NameAndType        #60:#61       // magicNumbers:[B\n-   #96 = NameAndType        #62:#56       // byteOffset:J\n-   #97 = NameAndType        #63:#70       // \"<init>\":(Ljava/lang/String;J)V\n-   #98 = Utf8               magicNumber\n-   #99 = NameAndType        #154:#155     // isEmpty:()Z\n-  #100 = Class              #156          // java/nio/charset/Charset\n-  #101 = NameAndType        #157:#158     // defaultCharset:()Ljava/nio/charset/Charset;\n-  #102 = NameAndType        #159:#160     // getBytes:(Ljava/nio/charset/Charset;)[B\n-  #103 = NameAndType        #161:#155     // isFile:()Z\n-  #104 = NameAndType        #162:#155     // canRead:()Z\n-  #105 = Class              #163          // org/apache/commons/io/RandomAccessFileMode\n-  #106 = NameAndType        #164:#165     // READ_ONLY:Lorg/apache/commons/io/RandomAccessFileMode;\n-  #107 = NameAndType        #166:#167     // create:(Ljava/io/File;)Ljava/io/RandomAccessFile;\n-  #108 = Class              #168          // org/apache/commons/io/IOUtils\n-  #109 = NameAndType        #169:#170     // byteArray:(I)[B\n-  #110 = NameAndType        #171:#172     // seek:(J)V\n-  #111 = NameAndType        #173:#174     // read:([B)I\n-  #112 = NameAndType        #175:#148     // close:()V\n-  #113 = Class              #176          // java/util/Arrays\n-  #114 = NameAndType        #177:#178     // equals:([B[B)Z\n-  #115 = Utf8               java/lang/Throwable\n-  #116 = NameAndType        #179:#180     // addSuppressed:(Ljava/lang/Throwable;)V\n-  #117 = Utf8               java/io/IOException\n-  #118 = Utf8               java/nio/file/LinkOption\n-  #119 = Class              #181          // java/nio/file/Files\n-  #120 = NameAndType        #182:#183     // isRegularFile:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n-  #121 = NameAndType        #184:#185     // isReadable:(Ljava/nio/file/Path;)Z\n-  #122 = Utf8               java/nio/file/OpenOption\n-  #123 = NameAndType        #186:#187     // open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;\n-  #124 = NameAndType        #188:#189     // allocate:(I)Ljava/nio/ByteBuffer;\n-  #125 = NameAndType        #173:#190     // read:(Ljava/nio/ByteBuffer;)I\n-  #126 = NameAndType        #191:#192     // TERMINATE:Ljava/nio/file/FileVisitResult;\n-  #127 = NameAndType        #193:#194     // array:()[B\n-  #128 = NameAndType        #195:#196     // toFileVisitResult:(Z)Ljava/nio/file/FileVisitResult;\n-  #129 = Utf8               java/lang/StringBuilder\n-  #130 = NameAndType        #81:#82       // toString:()Ljava/lang/String;\n-  #131 = Utf8               (\n-  #132 = NameAndType        #197:#198     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #133 = Utf8               java/lang/String\n-  #134 = NameAndType        #63:#199      // \"<init>\":([BLjava/nio/charset/Charset;)V\n-  #135 = Utf8               ,\n-  #136 = NameAndType        #197:#200     // append:(J)Ljava/lang/StringBuilder;\n-  #137 = Utf8               )\n-  #138 = Utf8               org/apache/commons/io/filefilter/MagicNumberFileFilter\n-  #139 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n-  #140 = Utf8               java/io/Serializable\n-  #141 = Utf8               java/io/File\n-  #142 = Utf8               java/io/RandomAccessFile\n-  #143 = Utf8               java/nio/file/Path\n-  #144 = Utf8               java/nio/file/attribute/BasicFileAttributes\n-  #145 = Utf8               java/nio/channels/FileChannel\n-  #146 = Utf8               java/nio/ByteBuffer\n-  #147 = Utf8               java/nio/file/FileVisitResult\n-  #148 = Utf8               ()V\n-  #149 = Utf8               java/util/Objects\n-  #150 = Utf8               requireNonNull\n-  #151 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #152 = Utf8               clone\n-  #153 = Utf8               ()Ljava/lang/Object;\n-  #154 = Utf8               isEmpty\n-  #155 = Utf8               ()Z\n-  #156 = Utf8               java/nio/charset/Charset\n-  #157 = Utf8               defaultCharset\n-  #158 = Utf8               ()Ljava/nio/charset/Charset;\n-  #159 = Utf8               getBytes\n-  #160 = Utf8               (Ljava/nio/charset/Charset;)[B\n-  #161 = Utf8               isFile\n-  #162 = Utf8               canRead\n-  #163 = Utf8               org/apache/commons/io/RandomAccessFileMode\n-  #164 = Utf8               READ_ONLY\n-  #165 = Utf8               Lorg/apache/commons/io/RandomAccessFileMode;\n-  #166 = Utf8               create\n-  #167 = Utf8               (Ljava/io/File;)Ljava/io/RandomAccessFile;\n-  #168 = Utf8               org/apache/commons/io/IOUtils\n-  #169 = Utf8               byteArray\n-  #170 = Utf8               (I)[B\n-  #171 = Utf8               seek\n-  #172 = Utf8               (J)V\n-  #173 = Utf8               read\n-  #174 = Utf8               ([B)I\n-  #175 = Utf8               close\n-  #176 = Utf8               java/util/Arrays\n-  #177 = Utf8               equals\n-  #178 = Utf8               ([B[B)Z\n-  #179 = Utf8               addSuppressed\n-  #180 = Utf8               (Ljava/lang/Throwable;)V\n-  #181 = Utf8               java/nio/file/Files\n-  #182 = Utf8               isRegularFile\n-  #183 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n-  #184 = Utf8               isReadable\n-  #185 = Utf8               (Ljava/nio/file/Path;)Z\n-  #186 = Utf8               open\n-  #187 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;\n-  #188 = Utf8               allocate\n-  #189 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #190 = Utf8               (Ljava/nio/ByteBuffer;)I\n-  #191 = Utf8               TERMINATE\n-  #192 = Utf8               Ljava/nio/file/FileVisitResult;\n-  #193 = Utf8               array\n-  #194 = Utf8               ()[B\n-  #195 = Utf8               toFileVisitResult\n-  #196 = Utf8               (Z)Ljava/nio/file/FileVisitResult;\n-  #197 = Utf8               append\n-  #198 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #199 = Utf8               ([BLjava/nio/charset/Charset;)V\n-  #200 = Utf8               (J)Ljava/lang/StringBuilder;\n+    #1 = Methodref          #2.#3         // org/apache/commons/io/filefilter/MagicNumberFileFilter.\"<init>\":([BJ)V\n+    #2 = Class              #4            // org/apache/commons/io/filefilter/MagicNumberFileFilter\n+    #3 = NameAndType        #5:#6         // \"<init>\":([BJ)V\n+    #4 = Utf8               org/apache/commons/io/filefilter/MagicNumberFileFilter\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ([BJ)V\n+    #7 = Methodref          #8.#9         // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n+    #8 = Class              #10           // org/apache/commons/io/filefilter/AbstractFileFilter\n+    #9 = NameAndType        #5:#11        // \"<init>\":()V\n+   #10 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n+   #11 = Utf8               ()V\n+   #12 = String             #13           // magicNumbers\n+   #13 = Utf8               magicNumbers\n+   #14 = Methodref          #15.#16       // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #15 = Class              #17           // java/util/Objects\n+   #16 = NameAndType        #18:#19       // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #17 = Utf8               java/util/Objects\n+   #18 = Utf8               requireNonNull\n+   #19 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #20 = Class              #21           // java/lang/IllegalArgumentException\n+   #21 = Utf8               java/lang/IllegalArgumentException\n+   #22 = String             #23           // The magic number must contain at least one byte\n+   #23 = Utf8               The magic number must contain at least one byte\n+   #24 = Methodref          #20.#25       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #25 = NameAndType        #5:#26        // \"<init>\":(Ljava/lang/String;)V\n+   #26 = Utf8               (Ljava/lang/String;)V\n+   #27 = String             #28           // The offset cannot be negative\n+   #28 = Utf8               The offset cannot be negative\n+   #29 = Methodref          #30.#31       // \"[B\".clone:()Ljava/lang/Object;\n+   #30 = Class              #32           // \"[B\"\n+   #31 = NameAndType        #33:#34       // clone:()Ljava/lang/Object;\n+   #32 = Utf8               [B\n+   #33 = Utf8               clone\n+   #34 = Utf8               ()Ljava/lang/Object;\n+   #35 = Fieldref           #2.#36        // org/apache/commons/io/filefilter/MagicNumberFileFilter.magicNumbers:[B\n+   #36 = NameAndType        #13:#32       // magicNumbers:[B\n+   #37 = Fieldref           #2.#38        // org/apache/commons/io/filefilter/MagicNumberFileFilter.byteOffset:J\n+   #38 = NameAndType        #39:#40       // byteOffset:J\n+   #39 = Utf8               byteOffset\n+   #40 = Utf8               J\n+   #41 = Methodref          #2.#42        // org/apache/commons/io/filefilter/MagicNumberFileFilter.\"<init>\":(Ljava/lang/String;J)V\n+   #42 = NameAndType        #5:#43        // \"<init>\":(Ljava/lang/String;J)V\n+   #43 = Utf8               (Ljava/lang/String;J)V\n+   #44 = String             #45           // magicNumber\n+   #45 = Utf8               magicNumber\n+   #46 = Methodref          #47.#48       // java/lang/String.isEmpty:()Z\n+   #47 = Class              #49           // java/lang/String\n+   #48 = NameAndType        #50:#51       // isEmpty:()Z\n+   #49 = Utf8               java/lang/String\n+   #50 = Utf8               isEmpty\n+   #51 = Utf8               ()Z\n+   #52 = Methodref          #53.#54       // java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n+   #53 = Class              #55           // java/nio/charset/Charset\n+   #54 = NameAndType        #56:#57       // defaultCharset:()Ljava/nio/charset/Charset;\n+   #55 = Utf8               java/nio/charset/Charset\n+   #56 = Utf8               defaultCharset\n+   #57 = Utf8               ()Ljava/nio/charset/Charset;\n+   #58 = Methodref          #47.#59       // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n+   #59 = NameAndType        #60:#61       // getBytes:(Ljava/nio/charset/Charset;)[B\n+   #60 = Utf8               getBytes\n+   #61 = Utf8               (Ljava/nio/charset/Charset;)[B\n+   #62 = Methodref          #63.#64       // java/io/File.isFile:()Z\n+   #63 = Class              #65           // java/io/File\n+   #64 = NameAndType        #66:#51       // isFile:()Z\n+   #65 = Utf8               java/io/File\n+   #66 = Utf8               isFile\n+   #67 = Methodref          #63.#68       // java/io/File.canRead:()Z\n+   #68 = NameAndType        #69:#51       // canRead:()Z\n+   #69 = Utf8               canRead\n+   #70 = Fieldref           #71.#72       // org/apache/commons/io/RandomAccessFileMode.READ_ONLY:Lorg/apache/commons/io/RandomAccessFileMode;\n+   #71 = Class              #73           // org/apache/commons/io/RandomAccessFileMode\n+   #72 = NameAndType        #74:#75       // READ_ONLY:Lorg/apache/commons/io/RandomAccessFileMode;\n+   #73 = Utf8               org/apache/commons/io/RandomAccessFileMode\n+   #74 = Utf8               READ_ONLY\n+   #75 = Utf8               Lorg/apache/commons/io/RandomAccessFileMode;\n+   #76 = Methodref          #71.#77       // org/apache/commons/io/RandomAccessFileMode.create:(Ljava/io/File;)Ljava/io/RandomAccessFile;\n+   #77 = NameAndType        #78:#79       // create:(Ljava/io/File;)Ljava/io/RandomAccessFile;\n+   #78 = Utf8               create\n+   #79 = Utf8               (Ljava/io/File;)Ljava/io/RandomAccessFile;\n+   #80 = Methodref          #81.#82       // org/apache/commons/io/IOUtils.byteArray:(I)[B\n+   #81 = Class              #83           // org/apache/commons/io/IOUtils\n+   #82 = NameAndType        #84:#85       // byteArray:(I)[B\n+   #83 = Utf8               org/apache/commons/io/IOUtils\n+   #84 = Utf8               byteArray\n+   #85 = Utf8               (I)[B\n+   #86 = Methodref          #87.#88       // java/io/RandomAccessFile.seek:(J)V\n+   #87 = Class              #89           // java/io/RandomAccessFile\n+   #88 = NameAndType        #90:#91       // seek:(J)V\n+   #89 = Utf8               java/io/RandomAccessFile\n+   #90 = Utf8               seek\n+   #91 = Utf8               (J)V\n+   #92 = Methodref          #87.#93       // java/io/RandomAccessFile.read:([B)I\n+   #93 = NameAndType        #94:#95       // read:([B)I\n+   #94 = Utf8               read\n+   #95 = Utf8               ([B)I\n+   #96 = Methodref          #87.#97       // java/io/RandomAccessFile.close:()V\n+   #97 = NameAndType        #98:#11       // close:()V\n+   #98 = Utf8               close\n+   #99 = Methodref          #100.#101     // java/util/Arrays.equals:([B[B)Z\n+  #100 = Class              #102          // java/util/Arrays\n+  #101 = NameAndType        #103:#104     // equals:([B[B)Z\n+  #102 = Utf8               java/util/Arrays\n+  #103 = Utf8               equals\n+  #104 = Utf8               ([B[B)Z\n+  #105 = Class              #106          // java/lang/Throwable\n+  #106 = Utf8               java/lang/Throwable\n+  #107 = Methodref          #105.#108     // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+  #108 = NameAndType        #109:#110     // addSuppressed:(Ljava/lang/Throwable;)V\n+  #109 = Utf8               addSuppressed\n+  #110 = Utf8               (Ljava/lang/Throwable;)V\n+  #111 = Class              #112          // java/io/IOException\n+  #112 = Utf8               java/io/IOException\n+  #113 = Class              #114          // java/nio/file/LinkOption\n+  #114 = Utf8               java/nio/file/LinkOption\n+  #115 = Methodref          #116.#117     // java/nio/file/Files.isRegularFile:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+  #116 = Class              #118          // java/nio/file/Files\n+  #117 = NameAndType        #119:#120     // isRegularFile:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+  #118 = Utf8               java/nio/file/Files\n+  #119 = Utf8               isRegularFile\n+  #120 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+  #121 = Methodref          #116.#122     // java/nio/file/Files.isReadable:(Ljava/nio/file/Path;)Z\n+  #122 = NameAndType        #123:#124     // isReadable:(Ljava/nio/file/Path;)Z\n+  #123 = Utf8               isReadable\n+  #124 = Utf8               (Ljava/nio/file/Path;)Z\n+  #125 = Class              #126          // java/nio/file/OpenOption\n+  #126 = Utf8               java/nio/file/OpenOption\n+  #127 = Methodref          #128.#129     // java/nio/channels/FileChannel.open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;\n+  #128 = Class              #130          // java/nio/channels/FileChannel\n+  #129 = NameAndType        #131:#132     // open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;\n+  #130 = Utf8               java/nio/channels/FileChannel\n+  #131 = Utf8               open\n+  #132 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;\n+  #133 = Methodref          #134.#135     // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+  #134 = Class              #136          // java/nio/ByteBuffer\n+  #135 = NameAndType        #137:#138     // allocate:(I)Ljava/nio/ByteBuffer;\n+  #136 = Utf8               java/nio/ByteBuffer\n+  #137 = Utf8               allocate\n+  #138 = Utf8               (I)Ljava/nio/ByteBuffer;\n+  #139 = Methodref          #128.#140     // java/nio/channels/FileChannel.read:(Ljava/nio/ByteBuffer;)I\n+  #140 = NameAndType        #94:#141      // read:(Ljava/nio/ByteBuffer;)I\n+  #141 = Utf8               (Ljava/nio/ByteBuffer;)I\n+  #142 = Fieldref           #143.#144     // java/nio/file/FileVisitResult.TERMINATE:Ljava/nio/file/FileVisitResult;\n+  #143 = Class              #145          // java/nio/file/FileVisitResult\n+  #144 = NameAndType        #146:#147     // TERMINATE:Ljava/nio/file/FileVisitResult;\n+  #145 = Utf8               java/nio/file/FileVisitResult\n+  #146 = Utf8               TERMINATE\n+  #147 = Utf8               Ljava/nio/file/FileVisitResult;\n+  #148 = Methodref          #128.#97      // java/nio/channels/FileChannel.close:()V\n+  #149 = Methodref          #134.#150     // java/nio/ByteBuffer.array:()[B\n+  #150 = NameAndType        #151:#152     // array:()[B\n+  #151 = Utf8               array\n+  #152 = Utf8               ()[B\n+  #153 = Methodref          #2.#154       // org/apache/commons/io/filefilter/MagicNumberFileFilter.toFileVisitResult:(Z)Ljava/nio/file/FileVisitResult;\n+  #154 = NameAndType        #155:#156     // toFileVisitResult:(Z)Ljava/nio/file/FileVisitResult;\n+  #155 = Utf8               toFileVisitResult\n+  #156 = Utf8               (Z)Ljava/nio/file/FileVisitResult;\n+  #157 = Class              #158          // java/lang/StringBuilder\n+  #158 = Utf8               java/lang/StringBuilder\n+  #159 = Methodref          #8.#160       // org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n+  #160 = NameAndType        #161:#162     // toString:()Ljava/lang/String;\n+  #161 = Utf8               toString\n+  #162 = Utf8               ()Ljava/lang/String;\n+  #163 = Methodref          #157.#25      // java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+  #164 = String             #165          // (\n+  #165 = Utf8               (\n+  #166 = Methodref          #157.#167     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #167 = NameAndType        #168:#169     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #168 = Utf8               append\n+  #169 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #170 = Methodref          #47.#171      // java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n+  #171 = NameAndType        #5:#172       // \"<init>\":([BLjava/nio/charset/Charset;)V\n+  #172 = Utf8               ([BLjava/nio/charset/Charset;)V\n+  #173 = String             #174          // ,\n+  #174 = Utf8               ,\n+  #175 = Methodref          #157.#176     // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+  #176 = NameAndType        #168:#177     // append:(J)Ljava/lang/StringBuilder;\n+  #177 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #178 = String             #179          // )\n+  #179 = Utf8               )\n+  #180 = Methodref          #157.#160     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #181 = Class              #182          // java/io/Serializable\n+  #182 = Utf8               java/io/Serializable\n+  #183 = Utf8               serialVersionUID\n+  #184 = Utf8               ConstantValue\n+  #185 = Long               -547733176983104172l\n+  #187 = Utf8               ([B)V\n+  #188 = Utf8               Code\n+  #189 = Utf8               LineNumberTable\n+  #190 = Utf8               StackMapTable\n+  #191 = Utf8               accept\n+  #192 = Utf8               (Ljava/io/File;)Z\n+  #193 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+  #194 = Class              #195          // java/nio/file/Path\n+  #195 = Utf8               java/nio/file/Path\n+  #196 = Class              #197          // java/nio/file/attribute/BasicFileAttributes\n+  #197 = Utf8               java/nio/file/attribute/BasicFileAttributes\n+  #198 = Utf8               SourceFile\n+  #199 = Utf8               MagicNumberFileFilter.java\n {\n   private static final long serialVersionUID = -547733176983104172l;\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long -547733176983104172l\n \n   private final byte[] magicNumbers;\n@@ -237,44 +236,44 @@\n \n   public org.apache.commons.io.filefilter.MagicNumberFileFilter(byte[], long);\n     descriptor: ([BJ)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=3\n          0: aload_0\n-         1: invokespecial #2                  // Method org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n+         1: invokespecial #7                  // Method org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n          4: aload_1\n-         5: ldc           #3                  // String magicNumbers\n-         7: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+         5: ldc           #12                 // String magicNumbers\n+         7: invokestatic  #14                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n         10: pop\n         11: aload_1\n         12: arraylength\n         13: ifne          26\n-        16: new           #5                  // class java/lang/IllegalArgumentException\n+        16: new           #20                 // class java/lang/IllegalArgumentException\n         19: dup\n-        20: ldc           #6                  // String The magic number must contain at least one byte\n-        22: invokespecial #7                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        20: ldc           #22                 // String The magic number must contain at least one byte\n+        22: invokespecial #24                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         25: athrow\n         26: lload_2\n         27: lconst_0\n         28: lcmp\n         29: ifge          42\n-        32: new           #5                  // class java/lang/IllegalArgumentException\n+        32: new           #20                 // class java/lang/IllegalArgumentException\n         35: dup\n-        36: ldc           #8                  // String The offset cannot be negative\n-        38: invokespecial #7                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        36: ldc           #27                 // String The offset cannot be negative\n+        38: invokespecial #24                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         41: athrow\n         42: aload_0\n         43: aload_1\n-        44: invokevirtual #9                  // Method \"[B\".clone:()Ljava/lang/Object;\n-        47: checkcast     #10                 // class \"[B\"\n-        50: putfield      #11                 // Field magicNumbers:[B\n+        44: invokevirtual #29                 // Method \"[B\".clone:()Ljava/lang/Object;\n+        47: checkcast     #30                 // class \"[B\"\n+        50: putfield      #35                 // Field magicNumbers:[B\n         53: aload_0\n         54: lload_2\n-        55: putfield      #12                 // Field byteOffset:J\n+        55: putfield      #37                 // Field byteOffset:J\n         58: return\n       LineNumberTable:\n         line 171: 0\n         line 172: 4\n         line 173: 11\n         line 174: 16\n         line 176: 26\n@@ -293,56 +292,56 @@\n     descriptor: (Ljava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: lconst_0\n-         3: invokespecial #13                 // Method \"<init>\":(Ljava/lang/String;J)V\n+         3: invokespecial #41                 // Method \"<init>\":(Ljava/lang/String;J)V\n          6: return\n       LineNumberTable:\n         line 206: 0\n         line 207: 6\n \n   public org.apache.commons.io.filefilter.MagicNumberFileFilter(java.lang.String, long);\n     descriptor: (Ljava/lang/String;J)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=3\n          0: aload_0\n-         1: invokespecial #2                  // Method org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n+         1: invokespecial #7                  // Method org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n          4: aload_1\n-         5: ldc           #14                 // String magicNumber\n-         7: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+         5: ldc           #44                 // String magicNumber\n+         7: invokestatic  #14                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n         10: pop\n         11: aload_1\n-        12: invokevirtual #15                 // Method java/lang/String.isEmpty:()Z\n+        12: invokevirtual #46                 // Method java/lang/String.isEmpty:()Z\n         15: ifeq          28\n-        18: new           #5                  // class java/lang/IllegalArgumentException\n+        18: new           #20                 // class java/lang/IllegalArgumentException\n         21: dup\n-        22: ldc           #6                  // String The magic number must contain at least one byte\n-        24: invokespecial #7                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        22: ldc           #22                 // String The magic number must contain at least one byte\n+        24: invokespecial #24                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         27: athrow\n         28: lload_2\n         29: lconst_0\n         30: lcmp\n         31: ifge          44\n-        34: new           #5                  // class java/lang/IllegalArgumentException\n+        34: new           #20                 // class java/lang/IllegalArgumentException\n         37: dup\n-        38: ldc           #8                  // String The offset cannot be negative\n-        40: invokespecial #7                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        38: ldc           #27                 // String The offset cannot be negative\n+        40: invokespecial #24                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         43: athrow\n         44: aload_0\n         45: aload_1\n-        46: invokestatic  #16                 // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n-        49: invokevirtual #17                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n-        52: putfield      #11                 // Field magicNumbers:[B\n+        46: invokestatic  #52                 // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n+        49: invokevirtual #58                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n+        52: putfield      #35                 // Field magicNumbers:[B\n         55: aload_0\n         56: lload_2\n-        57: putfield      #12                 // Field byteOffset:J\n+        57: putfield      #37                 // Field byteOffset:J\n         60: return\n       LineNumberTable:\n         line 229: 0\n         line 230: 4\n         line 231: 11\n         line 232: 18\n         line 234: 28\n@@ -361,70 +360,70 @@\n     descriptor: (Ljava/io/File;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=6, args_size=2\n          0: aload_1\n          1: ifnull        118\n          4: aload_1\n-         5: invokevirtual #18                 // Method java/io/File.isFile:()Z\n+         5: invokevirtual #62                 // Method java/io/File.isFile:()Z\n          8: ifeq          118\n         11: aload_1\n-        12: invokevirtual #19                 // Method java/io/File.canRead:()Z\n+        12: invokevirtual #67                 // Method java/io/File.canRead:()Z\n         15: ifeq          118\n-        18: getstatic     #20                 // Field org/apache/commons/io/RandomAccessFileMode.READ_ONLY:Lorg/apache/commons/io/RandomAccessFileMode;\n+        18: getstatic     #70                 // Field org/apache/commons/io/RandomAccessFileMode.READ_ONLY:Lorg/apache/commons/io/RandomAccessFileMode;\n         21: aload_1\n-        22: invokevirtual #21                 // Method org/apache/commons/io/RandomAccessFileMode.create:(Ljava/io/File;)Ljava/io/RandomAccessFile;\n+        22: invokevirtual #76                 // Method org/apache/commons/io/RandomAccessFileMode.create:(Ljava/io/File;)Ljava/io/RandomAccessFile;\n         25: astore_2\n         26: aload_0\n-        27: getfield      #11                 // Field magicNumbers:[B\n+        27: getfield      #35                 // Field magicNumbers:[B\n         30: arraylength\n-        31: invokestatic  #22                 // Method org/apache/commons/io/IOUtils.byteArray:(I)[B\n+        31: invokestatic  #80                 // Method org/apache/commons/io/IOUtils.byteArray:(I)[B\n         34: astore_3\n         35: aload_2\n         36: aload_0\n-        37: getfield      #12                 // Field byteOffset:J\n-        40: invokevirtual #23                 // Method java/io/RandomAccessFile.seek:(J)V\n+        37: getfield      #37                 // Field byteOffset:J\n+        40: invokevirtual #86                 // Method java/io/RandomAccessFile.seek:(J)V\n         43: aload_2\n         44: aload_3\n-        45: invokevirtual #24                 // Method java/io/RandomAccessFile.read:([B)I\n+        45: invokevirtual #92                 // Method java/io/RandomAccessFile.read:([B)I\n         48: istore        4\n         50: iload         4\n         52: aload_0\n-        53: getfield      #11                 // Field magicNumbers:[B\n+        53: getfield      #35                 // Field magicNumbers:[B\n         56: arraylength\n         57: if_icmpeq     74\n         60: iconst_0\n         61: istore        5\n         63: aload_2\n         64: ifnull        71\n         67: aload_2\n-        68: invokevirtual #25                 // Method java/io/RandomAccessFile.close:()V\n+        68: invokevirtual #96                 // Method java/io/RandomAccessFile.close:()V\n         71: iload         5\n         73: ireturn\n         74: aload_0\n-        75: getfield      #11                 // Field magicNumbers:[B\n+        75: getfield      #35                 // Field magicNumbers:[B\n         78: aload_3\n-        79: invokestatic  #26                 // Method java/util/Arrays.equals:([B[B)Z\n+        79: invokestatic  #99                 // Method java/util/Arrays.equals:([B[B)Z\n         82: istore        5\n         84: aload_2\n         85: ifnull        92\n         88: aload_2\n-        89: invokevirtual #25                 // Method java/io/RandomAccessFile.close:()V\n+        89: invokevirtual #96                 // Method java/io/RandomAccessFile.close:()V\n         92: iload         5\n         94: ireturn\n         95: astore_3\n         96: aload_2\n         97: ifnull        115\n        100: aload_2\n-       101: invokevirtual #25                 // Method java/io/RandomAccessFile.close:()V\n+       101: invokevirtual #96                 // Method java/io/RandomAccessFile.close:()V\n        104: goto          115\n        107: astore        4\n        109: aload_3\n        110: aload         4\n-       112: invokevirtual #28                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+       112: invokevirtual #107                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n        115: aload_3\n        116: athrow\n        117: astore_2\n        118: iconst_0\n        119: ireturn\n       Exception table:\n          from    to  target type\n@@ -480,75 +479,75 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=7, args_size=3\n          0: aload_1\n          1: ifnull        130\n          4: aload_1\n          5: iconst_0\n-         6: anewarray     #30                 // class java/nio/file/LinkOption\n-         9: invokestatic  #31                 // Method java/nio/file/Files.isRegularFile:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+         6: anewarray     #113                // class java/nio/file/LinkOption\n+         9: invokestatic  #115                // Method java/nio/file/Files.isRegularFile:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n         12: ifeq          130\n         15: aload_1\n-        16: invokestatic  #32                 // Method java/nio/file/Files.isReadable:(Ljava/nio/file/Path;)Z\n+        16: invokestatic  #121                // Method java/nio/file/Files.isReadable:(Ljava/nio/file/Path;)Z\n         19: ifeq          130\n         22: aload_1\n         23: iconst_0\n-        24: anewarray     #33                 // class java/nio/file/OpenOption\n-        27: invokestatic  #34                 // Method java/nio/channels/FileChannel.open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;\n+        24: anewarray     #125                // class java/nio/file/OpenOption\n+        27: invokestatic  #127                // Method java/nio/channels/FileChannel.open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;\n         30: astore_3\n         31: aload_0\n-        32: getfield      #11                 // Field magicNumbers:[B\n+        32: getfield      #35                 // Field magicNumbers:[B\n         35: arraylength\n-        36: invokestatic  #35                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+        36: invokestatic  #133                // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n         39: astore        4\n         41: aload_3\n         42: aload         4\n-        44: invokevirtual #36                 // Method java/nio/channels/FileChannel.read:(Ljava/nio/ByteBuffer;)I\n+        44: invokevirtual #139                // Method java/nio/channels/FileChannel.read:(Ljava/nio/ByteBuffer;)I\n         47: istore        5\n         49: iload         5\n         51: aload_0\n-        52: getfield      #11                 // Field magicNumbers:[B\n+        52: getfield      #35                 // Field magicNumbers:[B\n         55: arraylength\n         56: if_icmpeq     75\n-        59: getstatic     #37                 // Field java/nio/file/FileVisitResult.TERMINATE:Ljava/nio/file/FileVisitResult;\n+        59: getstatic     #142                // Field java/nio/file/FileVisitResult.TERMINATE:Ljava/nio/file/FileVisitResult;\n         62: astore        6\n         64: aload_3\n         65: ifnull        72\n         68: aload_3\n-        69: invokevirtual #38                 // Method java/nio/channels/FileChannel.close:()V\n+        69: invokevirtual #148                // Method java/nio/channels/FileChannel.close:()V\n         72: aload         6\n         74: areturn\n         75: aload_0\n         76: aload_0\n-        77: getfield      #11                 // Field magicNumbers:[B\n+        77: getfield      #35                 // Field magicNumbers:[B\n         80: aload         4\n-        82: invokevirtual #39                 // Method java/nio/ByteBuffer.array:()[B\n-        85: invokestatic  #26                 // Method java/util/Arrays.equals:([B[B)Z\n-        88: invokevirtual #40                 // Method toFileVisitResult:(Z)Ljava/nio/file/FileVisitResult;\n+        82: invokevirtual #149                // Method java/nio/ByteBuffer.array:()[B\n+        85: invokestatic  #99                 // Method java/util/Arrays.equals:([B[B)Z\n+        88: invokevirtual #153                // Method toFileVisitResult:(Z)Ljava/nio/file/FileVisitResult;\n         91: astore        6\n         93: aload_3\n         94: ifnull        101\n         97: aload_3\n-        98: invokevirtual #38                 // Method java/nio/channels/FileChannel.close:()V\n+        98: invokevirtual #148                // Method java/nio/channels/FileChannel.close:()V\n        101: aload         6\n        103: areturn\n        104: astore        4\n        106: aload_3\n        107: ifnull        126\n        110: aload_3\n-       111: invokevirtual #38                 // Method java/nio/channels/FileChannel.close:()V\n+       111: invokevirtual #148                // Method java/nio/channels/FileChannel.close:()V\n        114: goto          126\n        117: astore        5\n        119: aload         4\n        121: aload         5\n-       123: invokevirtual #28                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+       123: invokevirtual #107                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n        126: aload         4\n        128: athrow\n        129: astore_3\n-       130: getstatic     #37                 // Field java/nio/file/FileVisitResult.TERMINATE:Ljava/nio/file/FileVisitResult;\n+       130: getstatic     #142                // Field java/nio/file/FileVisitResult.TERMINATE:Ljava/nio/file/FileVisitResult;\n        133: areturn\n       Exception table:\n          from    to  target type\n             31    64   104   Class java/lang/Throwable\n             75    93   104   Class java/lang/Throwable\n            110   114   117   Class java/lang/Throwable\n             22    72   129   Class java/io/IOException\n@@ -595,48 +594,48 @@\n         frame_type = 0 /* same */\n \n   public java.lang.String toString();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=2, args_size=1\n-         0: new           #41                 // class java/lang/StringBuilder\n+         0: new           #157                // class java/lang/StringBuilder\n          3: dup\n          4: aload_0\n-         5: invokespecial #42                 // Method org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n-         8: invokespecial #43                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+         5: invokespecial #159                // Method org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n+         8: invokespecial #163                // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n         11: astore_1\n         12: aload_1\n-        13: ldc           #44                 // String (\n-        15: invokevirtual #45                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        13: ldc           #164                // String (\n+        15: invokevirtual #166                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         18: pop\n         19: aload_1\n-        20: new           #46                 // class java/lang/String\n+        20: new           #47                 // class java/lang/String\n         23: dup\n         24: aload_0\n-        25: getfield      #11                 // Field magicNumbers:[B\n-        28: invokestatic  #16                 // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n-        31: invokespecial #47                 // Method java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n-        34: invokevirtual #45                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        25: getfield      #35                 // Field magicNumbers:[B\n+        28: invokestatic  #52                 // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n+        31: invokespecial #170                // Method java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n+        34: invokevirtual #166                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         37: pop\n         38: aload_1\n-        39: ldc           #48                 // String ,\n-        41: invokevirtual #45                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        39: ldc           #173                // String ,\n+        41: invokevirtual #166                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         44: pop\n         45: aload_1\n         46: aload_0\n-        47: getfield      #12                 // Field byteOffset:J\n-        50: invokevirtual #49                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+        47: getfield      #37                 // Field byteOffset:J\n+        50: invokevirtual #175                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n         53: pop\n         54: aload_1\n-        55: ldc           #50                 // String )\n-        57: invokevirtual #45                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        55: ldc           #178                // String )\n+        57: invokevirtual #166                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         60: pop\n         61: aload_1\n-        62: invokevirtual #51                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        62: invokevirtual #180                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n         65: areturn\n       LineNumberTable:\n         line 324: 0\n         line 325: 12\n         line 326: 19\n         line 328: 38\n         line 329: 45\n"}]}
