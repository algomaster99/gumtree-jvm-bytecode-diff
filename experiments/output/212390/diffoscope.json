{"diffoscope-json-version": 1, "source1": "first/DefaultExceptionContext.class", "source2": "second/DefaultExceptionContext.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -16,93 +16,93 @@\n     private static final long serialVersionUID = 20110706L;\n     private final List<Pair<String, Object>> contextValues;\n     \n     public DefaultExceptionContext() {\n         this.contextValues = new ArrayList<Pair<String, Object>>();\n     }\n     \n-    public DefaultExceptionContext addContextValue(final String label, final Object value) {\n-        this.contextValues.add((Pair<String, Object>)new ImmutablePair((Object)label, value));\n+    public DefaultExceptionContext addContextValue(final String s, final Object o) {\n+        this.contextValues.add((Pair<String, Object>)new ImmutablePair((Object)s, o));\n         return this;\n     }\n     \n-    public DefaultExceptionContext setContextValue(final String label, final Object value) {\n-        final Iterator<Pair<String, Object>> iter = this.contextValues.iterator();\n-        while (iter.hasNext()) {\n-            final Pair<String, Object> p = (Pair<String, Object>)iter.next();\n-            if (StringUtils.equals((CharSequence)label, (CharSequence)p.getKey())) {\n-                iter.remove();\n+    public DefaultExceptionContext setContextValue(final String s, final Object o) {\n+        final Iterator<Pair<String, Object>> iterator = this.contextValues.iterator();\n+        while (iterator.hasNext()) {\n+            if (StringUtils.equals((CharSequence)s, (CharSequence)((Pair)iterator.next()).getKey())) {\n+                iterator.remove();\n             }\n         }\n-        this.addContextValue(label, value);\n+        this.addContextValue(s, o);\n         return this;\n     }\n     \n-    public List<Object> getContextValues(final String label) {\n-        final List<Object> values = new ArrayList<Object>();\n-        for (final Pair<String, Object> pair : this.contextValues) {\n-            if (StringUtils.equals((CharSequence)label, (CharSequence)pair.getKey())) {\n-                values.add(pair.getValue());\n+    public List<Object> getContextValues(final String s) {\n+        final ArrayList list = new ArrayList();\n+        for (final Pair pair : this.contextValues) {\n+            if (StringUtils.equals((CharSequence)s, (CharSequence)pair.getKey())) {\n+                list.add(pair.getValue());\n             }\n         }\n-        return values;\n+        return list;\n     }\n     \n-    public Object getFirstContextValue(final String label) {\n-        for (final Pair<String, Object> pair : this.contextValues) {\n-            if (StringUtils.equals((CharSequence)label, (CharSequence)pair.getKey())) {\n+    public Object getFirstContextValue(final String s) {\n+        for (final Pair pair : this.contextValues) {\n+            if (StringUtils.equals((CharSequence)s, (CharSequence)pair.getKey())) {\n                 return pair.getValue();\n             }\n         }\n         return null;\n     }\n     \n     public Set<String> getContextLabels() {\n-        final Set<String> labels = new HashSet<String>();\n-        for (final Pair<String, Object> pair : this.contextValues) {\n-            labels.add((String)pair.getKey());\n+        final HashSet set = new HashSet();\n+        final Iterator<Pair<String, Object>> iterator = this.contextValues.iterator();\n+        while (iterator.hasNext()) {\n+            set.add(((Pair)iterator.next()).getKey());\n         }\n-        return labels;\n+        return set;\n     }\n     \n     public List<Pair<String, Object>> getContextEntries() {\n         return this.contextValues;\n     }\n     \n-    public String getFormattedExceptionMessage(final String baseMessage) {\n-        final StringBuilder buffer = new StringBuilder(256);\n-        if (baseMessage != null) {\n-            buffer.append(baseMessage);\n+    public String getFormattedExceptionMessage(final String str) {\n+        final StringBuilder sb = new StringBuilder(256);\n+        if (str != null) {\n+            sb.append(str);\n         }\n         if (!this.contextValues.isEmpty()) {\n-            if (buffer.length() > 0) {\n-                buffer.append('\\n');\n+            if (sb.length() > 0) {\n+                sb.append('\\n');\n             }\n-            buffer.append(\"Exception Context:\\n\");\n-            int i = 0;\n-            for (final Pair<String, Object> pair : this.contextValues) {\n-                buffer.append(\"\\t[\");\n-                buffer.append(++i);\n-                buffer.append(':');\n-                buffer.append((String)pair.getKey());\n-                buffer.append(\"=\");\n+            sb.append(\"Exception Context:\\n\");\n+            int n = 0;\n+            for (final Pair pair : this.contextValues) {\n+                sb.append(\"\\t[\");\n+                sb.append(++n);\n+                sb.append(':');\n+                sb.append((String)pair.getKey());\n+                sb.append(\"=\");\n                 final Object value = pair.getValue();\n                 if (value == null) {\n-                    buffer.append(\"null\");\n+                    sb.append(\"null\");\n                 }\n                 else {\n-                    String valueStr;\n+                    String str2;\n                     try {\n-                        valueStr = value.toString();\n+                        str2 = value.toString();\n                     }\n-                    catch (final Exception e) {\n-                        valueStr = \"Exception thrown on toString(): \" + ExceptionUtils.getStackTrace((Throwable)e);\n+                    catch (final Exception ex) {\n+                        str2 = \"Exception thrown on toString(): \" + ExceptionUtils.getStackTrace((Throwable)ex);\n                     }\n-                    buffer.append(valueStr);\n+                    sb.append(str2);\n                 }\n-                buffer.append(\"]\\n\");\n+                sb.append(\"]\\n\");\n             }\n-            buffer.append(\"---------------------------------\");\n+            sb.append(\"---------------------------------\");\n         }\n-        return buffer.toString();\n+        return sb.toString();\n     }\n }\n"}]}
