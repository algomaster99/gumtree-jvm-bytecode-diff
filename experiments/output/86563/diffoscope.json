{"diffoscope-json-version": 1, "source1": "first/Failable.class", "source2": "second/Failable.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -48,51 +48,50 @@\n     }\n     \n     public static <E extends Throwable> double applyAsDouble(final FailableDoubleBinaryOperator<E> function, final double left, final double right) {\n         return getAsDouble((org.apache.commons.lang3.function.FailableDoubleSupplier<Throwable>)(() -> function.applyAsDouble(left, right)));\n     }\n     \n     public static <T, U> BiConsumer<T, U> asBiConsumer(final FailableBiConsumer<T, U, ?> consumer) {\n-        return (input1, input2) -> accept((org.apache.commons.lang3.function.FailableBiConsumer<Object, Object, Throwable>)consumer, input1, input2);\n+        return (input1, input2) -> accept((org.apache.commons.lang3.function.FailableBiConsumer<Object, Object, Throwable>)consumer2, input1, input2);\n     }\n     \n     public static <T, U, R> BiFunction<T, U, R> asBiFunction(final FailableBiFunction<T, U, R, ?> function) {\n-        return (BiFunction<T, U, R>)((input1, input2) -> apply((org.apache.commons.lang3.function.FailableBiFunction<Object, Object, Object, Throwable>)function, input1, input2));\n+        return (BiFunction<T, U, R>)((input1, input2) -> apply((org.apache.commons.lang3.function.FailableBiFunction<Object, Object, Object, Throwable>)function2, input1, input2));\n     }\n     \n     public static <T, U> BiPredicate<T, U> asBiPredicate(final FailableBiPredicate<T, U, ?> predicate) {\n-        return (input1, input2) -> test((org.apache.commons.lang3.function.FailableBiPredicate<Object, Object, Throwable>)predicate, input1, input2);\n+        return (input1, input2) -> test((org.apache.commons.lang3.function.FailableBiPredicate<Object, Object, Throwable>)predicate2, input1, input2);\n     }\n     \n     public static <V> Callable<V> asCallable(final FailableCallable<V, ?> callable) {\n-        return (Callable<V>)(() -> call((org.apache.commons.lang3.function.FailableCallable<Object, Throwable>)callable));\n+        return (Callable<V>)(() -> call((org.apache.commons.lang3.function.FailableCallable<Object, Throwable>)callable2));\n     }\n     \n     public static <T> Consumer<T> asConsumer(final FailableConsumer<T, ?> consumer) {\n-        return input -> accept((org.apache.commons.lang3.function.FailableConsumer<Object, Throwable>)consumer, input);\n+        return input -> accept((org.apache.commons.lang3.function.FailableConsumer<Object, Throwable>)consumer2, input);\n     }\n     \n     public static <T, R> Function<T, R> asFunction(final FailableFunction<T, R, ?> function) {\n-        return (Function<T, R>)(input -> apply((org.apache.commons.lang3.function.FailableFunction<Object, Object, Throwable>)function, input));\n+        return (Function<T, R>)(input -> apply((org.apache.commons.lang3.function.FailableFunction<Object, Object, Throwable>)function2, input));\n     }\n     \n     public static <T> Predicate<T> asPredicate(final FailablePredicate<T, ?> predicate) {\n-        return input -> test((org.apache.commons.lang3.function.FailablePredicate<Object, Throwable>)predicate, input);\n+        return input -> test((org.apache.commons.lang3.function.FailablePredicate<Object, Throwable>)predicate2, input);\n     }\n     \n     public static Runnable asRunnable(final FailableRunnable<?> runnable) {\n-        return () -> run((org.apache.commons.lang3.function.FailableRunnable<Throwable>)runnable);\n+        return () -> run((org.apache.commons.lang3.function.FailableRunnable<Throwable>)runnable2);\n     }\n     \n     public static <T> Supplier<T> asSupplier(final FailableSupplier<T, ?> supplier) {\n-        return (Supplier<T>)(() -> get((org.apache.commons.lang3.function.FailableSupplier<Object, Throwable>)supplier));\n+        return (Supplier<T>)(() -> get((org.apache.commons.lang3.function.FailableSupplier<Object, Throwable>)supplier2));\n     }\n     \n     public static <V, E extends Throwable> V call(final FailableCallable<V, E> callable) {\n-        Objects.requireNonNull(callable);\n         return get((org.apache.commons.lang3.function.FailableSupplier<V, Throwable>)callable::call);\n     }\n     \n     public static <T, E extends Throwable> T get(final FailableSupplier<T, E> supplier) {\n         try {\n             return (T)supplier.get();\n         }\n"}]}
