{"diffoscope-json-version": 1, "source1": "first/SarifLogger.class", "source2": "second/SarifLogger.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -96,24 +96,24 @@\n     }\n     \n     public void fileFinished(final AuditEvent event) {\n     }\n     \n     private static String renderSeverityLevel(final SeverityLevel severityLevel) {\n         String renderedSeverityLevel = null;\n-        switch (SarifLogger.SarifLogger$1.$SwitchMap$com$puppycrawl$tools$checkstyle$api$SeverityLevel[severityLevel.ordinal()]) {\n-            case 1: {\n+        switch (severityLevel) {\n+            case IGNORE: {\n                 renderedSeverityLevel = \"none\";\n                 break;\n             }\n-            case 2: {\n+            case INFO: {\n                 renderedSeverityLevel = \"note\";\n                 break;\n             }\n-            case 3: {\n+            case WARNING: {\n                 renderedSeverityLevel = \"warning\";\n                 break;\n             }\n             default: {\n                 renderedSeverityLevel = \"error\";\n                 break;\n             }\n@@ -174,20 +174,65 @@\n     \n     private static String escapeUnicode1F(final char chr) {\n         final String hexString = Integer.toHexString(chr);\n         return \"\\\\u\" + \"0\".repeat(4 - hexString.length()) + hexString.toUpperCase(Locale.US);\n     }\n     \n     public static String readResource(final String name) throws IOException {\n-        try (final InputStream inputStream = SarifLogger.class.getResourceAsStream(name);\n-             final ByteArrayOutputStream result = new ByteArrayOutputStream()) {\n-            if (inputStream == null) {\n-                throw new IOException(\"Cannot find the resource \" + name);\n-            }\n-            final byte[] buffer = new byte[1024];\n-            for (int length = inputStream.read(buffer); length != -1; length = inputStream.read(buffer)) {\n-                result.write(buffer, 0, length);\n+        Throwable t = null;\n+        try {\n+            final InputStream inputStream = SarifLogger.class.getResourceAsStream(name);\n+            try {\n+                final ByteArrayOutputStream result = new ByteArrayOutputStream();\n+                try {\n+                    if (inputStream == null) {\n+                        throw new IOException(\"Cannot find the resource \" + name);\n+                    }\n+                    final byte[] buffer = new byte[1024];\n+                    for (int length = inputStream.read(buffer); length != -1; length = inputStream.read(buffer)) {\n+                        result.write(buffer, 0, length);\n+                    }\n+                    final String string = result.toString(StandardCharsets.UTF_8);\n+                    if (result != null) {\n+                        result.close();\n+                    }\n+                    if (inputStream != null) {\n+                        inputStream.close();\n+                    }\n+                    return string;\n+                }\n+                finally {\n+                    if (result != null) {\n+                        result.close();\n+                    }\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n+                }\n+                if (inputStream != null) {\n+                    inputStream.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception2;\n+                t = exception2;\n+            }\n+            else {\n+                final Throwable exception2;\n+                if (t != exception2) {\n+                    t.addSuppressed(exception2);\n+                }\n             }\n-            return result.toString(StandardCharsets.UTF_8);\n         }\n     }\n }\n"}]}
