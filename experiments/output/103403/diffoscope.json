{"diffoscope-json-version": 1, "source1": "first/ZipArchiveEntry.class", "source2": "second/ZipArchiveEntry.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -4,15 +4,14 @@\n import java.nio.file.attribute.BasicFileAttributes;\n import java.util.NoSuchElementException;\n import org.apache.commons.compress.utils.ByteUtils;\n import java.util.Date;\n import java.util.Iterator;\n import java.util.Collection;\n import java.util.ArrayList;\n-import java.util.stream.Stream;\n import java.util.function.Predicate;\n import java.util.List;\n import java.util.Objects;\n import java.util.Arrays;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.zip.ZipException;\n@@ -52,24 +51,28 @@\n     private boolean isStreamContiguous;\n     private ZipArchiveEntry.NameSource nameSource;\n     private ZipArchiveEntry.CommentSource commentSource;\n     private long diskNumberStart;\n     private boolean lastModifiedDateSet;\n     private long time;\n     \n+    static {\n+        EMPTY_ARRAY = new ZipArchiveEntry[0];\n+    }\n+    \n     private static boolean canConvertToInfoZipExtendedTimestamp(final FileTime lastModifiedTime, final FileTime lastAccessTime, final FileTime creationTime) {\n         return TimeUtils.isUnixTime(lastModifiedTime) && TimeUtils.isUnixTime(lastAccessTime) && TimeUtils.isUnixTime(creationTime);\n     }\n     \n     protected ZipArchiveEntry() {\n         this(\"\");\n     }\n     \n     public ZipArchiveEntry(final File inputFile, final String entryName) {\n-        this((inputFile.isDirectory() && !entryName.endsWith(\"/\")) ? (entryName + \"/\") : entryName);\n+        this((inputFile.isDirectory() && !entryName.endsWith(\"/\")) ? (String.valueOf(entryName) + \"/\") : entryName);\n         try {\n             this.setAttributes(inputFile.toPath(), new LinkOption[0]);\n         }\n         catch (final IOException e) {\n             if (inputFile.isFile()) {\n                 this.setSize(inputFile.length());\n             }\n@@ -98,15 +101,15 @@\n             this.setExtra();\n         }\n         this.setMethod(entry.getMethod());\n         this.size = entry.getSize();\n     }\n     \n     public ZipArchiveEntry(final Path inputPath, final String entryName, final LinkOption... options) throws IOException {\n-        this((Files.isDirectory(inputPath, options) && !entryName.endsWith(\"/\")) ? (entryName + \"/\") : entryName);\n+        this((Files.isDirectory(inputPath, options) && !entryName.endsWith(\"/\")) ? (String.valueOf(entryName) + \"/\") : entryName);\n         this.setAttributes(inputPath, options);\n     }\n     \n     public ZipArchiveEntry(final String name) {\n         super(name);\n         this.method = -1;\n         this.size = -1L;\n@@ -216,22 +219,19 @@\n         if (otherComment == null) {\n             otherComment = \"\";\n         }\n         return Objects.equals(this.getLastModifiedTime(), other.getLastModifiedTime()) && Objects.equals(this.getLastAccessTime(), other.getLastAccessTime()) && Objects.equals(this.getCreationTime(), other.getCreationTime()) && myComment.equals(otherComment) && this.getInternalAttributes() == other.getInternalAttributes() && this.getPlatform() == other.getPlatform() && this.getExternalAttributes() == other.getExternalAttributes() && this.getMethod() == other.getMethod() && this.getSize() == other.getSize() && this.getCrc() == other.getCrc() && this.getCompressedSize() == other.getCompressedSize() && Arrays.equals(this.getCentralDirectoryExtra(), other.getCentralDirectoryExtra()) && Arrays.equals(this.getLocalFileDataExtra(), other.getLocalFileDataExtra()) && this.localHeaderOffset == other.localHeaderOffset && this.dataOffset == other.dataOffset && this.gpb.equals((Object)other.gpb);\n     }\n     \n     private ZipExtraField findMatching(final ZipShort headerId, final List<ZipExtraField> fs) {\n-        return fs.stream().filter(f -> headerId.equals((Object)f.getHeaderId())).findFirst().orElse(null);\n+        return fs.stream().filter(f -> zipShort.equals((Object)f.getHeaderId())).findFirst().orElse(null);\n     }\n     \n     private ZipExtraField findUnparseable(final List<ZipExtraField> fs) {\n-        final Stream<Object> stream = fs.stream();\n-        final Class<UnparseableExtraFieldData> obj = UnparseableExtraFieldData.class;\n-        Objects.requireNonNull(obj);\n-        return stream.filter((Predicate<? super ZipExtraField>)obj::isInstance).findFirst().orElse(null);\n+        return fs.stream().filter(UnparseableExtraFieldData.class::isInstance).findFirst().orElse(null);\n     }\n     \n     protected int getAlignment() {\n         return this.alignment;\n     }\n     \n     private ZipExtraField[] getAllExtraFields() {\n@@ -264,15 +264,17 @@\n     \n     public long getExternalAttributes() {\n         return this.externalAttributes;\n     }\n     \n     public ZipExtraField getExtraField(final ZipShort type) {\n         if (this.extraFields != null) {\n-            for (final ZipExtraField extraField : this.extraFields) {\n+            ZipExtraField[] extraFields;\n+            for (int length = (extraFields = this.extraFields).length, i = 0; i < length; ++i) {\n+                final ZipExtraField extraField = extraFields[i];\n                 if (type.equals((Object)extraField.getHeaderId())) {\n                     return extraField;\n                 }\n             }\n         }\n         return null;\n     }\n@@ -442,15 +444,17 @@\n     }\n     \n     private void internalRemoveExtraField(final ZipShort type) {\n         if (this.extraFields == null) {\n             return;\n         }\n         final List<ZipExtraField> newResult = new ArrayList<ZipExtraField>();\n-        for (final ZipExtraField extraField : this.extraFields) {\n+        ZipExtraField[] extraFields;\n+        for (int length = (extraFields = this.extraFields).length, i = 0; i < length; ++i) {\n+            final ZipExtraField extraField = extraFields[i];\n             if (!type.equals((Object)extraField.getHeaderId())) {\n                 newResult.add(extraField);\n             }\n         }\n         if (this.extraFields.length == newResult.size()) {\n             return;\n         }\n@@ -787,12 +791,8 @@\n             }\n             final FileTime creationTime = ntfsTimestamp.getCreateFileTime();\n             if (creationTime != null) {\n                 super.setCreationTime(creationTime);\n             }\n         }\n     }\n-    \n-    static {\n-        EMPTY_ARRAY = new ZipArchiveEntry[0];\n-    }\n }\n"}]}
