{"diffoscope-json-version": 1, "source1": "first/BeanHelper.class", "source2": "second/BeanHelper.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -25,14 +25,19 @@\n public final class BeanHelper\n {\n     public static final BeanHelper INSTANCE;\n     private static final BeanUtilsBean BEAN_UTILS_BEAN;\n     private final Map<String, BeanFactory> beanFactories;\n     private final BeanFactory defaultBeanFactory;\n     \n+    static {\n+        INSTANCE = new BeanHelper();\n+        BEAN_UTILS_BEAN = initBeanUtilsBean();\n+    }\n+    \n     public BeanHelper() {\n         this(null);\n     }\n     \n     public BeanHelper(final BeanFactory defaultBeanFactory) {\n         this.beanFactories = Collections.synchronizedMap(new HashMap<String, BeanFactory>());\n         this.defaultBeanFactory = (BeanFactory)((defaultBeanFactory != null) ? defaultBeanFactory : DefaultBeanFactory.INSTANCE);\n@@ -68,42 +73,42 @@\n                 final Collection<Object> coll = (Collection)bean;\n                 if (nestedBeans.size() == 1) {\n                     final Map.Entry<String, Object> e = (Map.Entry<String, Object>)nestedBeans.entrySet().iterator().next();\n                     final String propName = (String)e.getKey();\n                     final Class<?> defaultClass = getDefaultClass(bean, propName);\n                     if (e.getValue() instanceof List) {\n                         final List<BeanDeclaration> decls = (List<BeanDeclaration>)e.getValue();\n-                        decls.forEach(decl -> coll.add(this.createBean(decl, (Class<?>)defaultClass)));\n+                        decls.forEach(decl -> collection.add(this.createBean(decl, (Class<?>)defaultClass2)));\n                     }\n                     else {\n                         coll.add(this.createBean((BeanDeclaration)e.getValue(), defaultClass));\n                     }\n                 }\n             }\n             else {\n                 final String propName;\n                 nestedBeans.forEach((propName, prop) -> {\n-                    final Class<?> defaultClass2 = getDefaultClass(bean, propName);\n+                    final Class<?> defaultClass3 = getDefaultClass(bean2, propName);\n                     if (prop instanceof Collection) {\n-                        final Collection<Object> beanCollection = createPropertyCollection(propName, defaultClass2);\n-                        ((Collection)prop).forEach(elemDef -> beanCollection.add(this.createBean(elemDef)));\n-                        initProperty(bean, propName, beanCollection);\n+                        final Collection<Object> beanCollection = createPropertyCollection(propName, defaultClass3);\n+                        ((Collection)prop).forEach(elemDef -> collection2.add(this.createBean(elemDef)));\n+                        initProperty(bean2, propName, beanCollection);\n                     }\n                     else {\n-                        initProperty(bean, propName, this.createBean((BeanDeclaration)prop, defaultClass2));\n+                        initProperty(bean2, propName, this.createBean((BeanDeclaration)prop, defaultClass3));\n                     }\n                 });\n             }\n         }\n     }\n     \n     public static void initBeanProperties(final Object bean, final BeanDeclaration data) {\n         final Map<String, Object> properties = data.getBeanProperties();\n         if (properties != null) {\n-            properties.forEach((k, v) -> initProperty(bean, k, v));\n+            properties.forEach((k, v) -> initProperty(bean2, k, v));\n         }\n     }\n     \n     public static DynaBean createWrapDynaBean(final Object bean) {\n         if (bean == null) {\n             throw new IllegalArgumentException(\"Bean must not be null!\");\n         }\n@@ -220,21 +225,16 @@\n             throw new ConfigurationRuntimeException(\"Unknown bean factory: \" + factoryName);\n         }\n         return factory;\n     }\n     \n     private BeanCreationContext createBeanCreationContext(final BeanDeclaration data, final Class<?> defaultClass, final Object param, final BeanFactory factory) {\n         final Class<?> beanClass = fetchBeanClass(data, defaultClass, factory);\n-        return (BeanCreationContext)new BeanHelper.BeanCreationContextImpl(this, (Class)beanClass, data, param, (BeanHelper.BeanHelper$1)null);\n+        return (BeanCreationContext)new BeanHelper.BeanCreationContextImpl(this, (Class)beanClass, data, param, (BeanHelper.BeanCreationContextImpl)null);\n     }\n     \n     private static BeanUtilsBean initBeanUtilsBean() {\n         final PropertyUtilsBean propUtilsBean = new PropertyUtilsBean();\n         propUtilsBean.addBeanIntrospector((BeanIntrospector)new FluentPropertyBeanIntrospector());\n         return new BeanUtilsBean(new ConvertUtilsBean(), propUtilsBean);\n     }\n-    \n-    static {\n-        INSTANCE = new BeanHelper();\n-        BEAN_UTILS_BEAN = initBeanUtilsBean();\n-    }\n }\n"}]}
