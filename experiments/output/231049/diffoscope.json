{"diffoscope-json-version": 1, "source1": "first/ConstantValueAttribute.class", "source2": "second/ConstantValueAttribute.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,67 +7,64 @@\n \n public class ConstantValueAttribute extends Attribute\n {\n     private int constantIndex;\n     private final ClassFileEntry entry;\n     private static CPUTF8 attributeName;\n     \n-    public static void setAttributeName(final CPUTF8 cpUTF8Value) {\n-        ConstantValueAttribute.attributeName = cpUTF8Value;\n+    public static void setAttributeName(final CPUTF8 attributeName) {\n+        ConstantValueAttribute.attributeName = attributeName;\n     }\n     \n-    public ConstantValueAttribute(final ClassFileEntry entry) {\n+    public ConstantValueAttribute(final ClassFileEntry obj) {\n         super(ConstantValueAttribute.attributeName);\n-        this.entry = Objects.requireNonNull(entry, \"entry\");\n+        this.entry = Objects.requireNonNull(obj, \"entry\");\n     }\n     \n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n             return true;\n         }\n-        if (!super.equals(obj)) {\n+        if (!super.equals(o)) {\n             return false;\n         }\n-        if (this.getClass() != obj.getClass()) {\n+        if (this.getClass() != o.getClass()) {\n             return false;\n         }\n-        final ConstantValueAttribute other = (ConstantValueAttribute)obj;\n+        final ConstantValueAttribute constantValueAttribute = (ConstantValueAttribute)o;\n         if (this.entry == null) {\n-            if (other.entry != null) {\n+            if (constantValueAttribute.entry != null) {\n                 return false;\n             }\n         }\n-        else if (!this.entry.equals((Object)other.entry)) {\n+        else if (!this.entry.equals((Object)constantValueAttribute.entry)) {\n             return false;\n         }\n         return true;\n     }\n     \n     protected int getLength() {\n         return 2;\n     }\n     \n     protected ClassFileEntry[] getNestedClassFileEntries() {\n         return new ClassFileEntry[] { (ClassFileEntry)this.getAttributeName(), this.entry };\n     }\n     \n     public int hashCode() {\n-        final int PRIME = 31;\n-        int result = super.hashCode();\n-        result = 31 * result + ((this.entry == null) ? 0 : this.entry.hashCode());\n-        return result;\n+        return 31 * super.hashCode() + ((this.entry == null) ? 0 : this.entry.hashCode());\n     }\n     \n-    protected void resolve(final ClassConstantPool pool) {\n-        super.resolve(pool);\n-        this.entry.resolve(pool);\n-        this.constantIndex = pool.indexOf(this.entry);\n+    protected void resolve(final ClassConstantPool classConstantPool) {\n+        super.resolve(classConstantPool);\n+        this.entry.resolve(classConstantPool);\n+        this.constantIndex = classConstantPool.indexOf(this.entry);\n     }\n     \n     public String toString() {\n         return \"Constant:\" + this.entry;\n     }\n     \n-    protected void writeBody(final DataOutputStream dos) throws IOException {\n-        dos.writeShort(this.constantIndex);\n+    protected void writeBody(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.constantIndex);\n     }\n }\n"}]}
