{"diffoscope-json-version": 1, "source1": "first/AtclauseOrderCheck.class", "source2": "second/AtclauseOrderCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -17,14 +17,18 @@\n {\n     public static final String MSG_KEY = \"at.clause.order\";\n     private static final String[] DEFAULT_ORDER;\n     @XdocsPropertyType(PropertyType.TOKEN_ARRAY)\n     private BitSet target;\n     private List<String> tagOrder;\n     \n+    static {\n+        DEFAULT_ORDER = new String[] { \"@author\", \"@version\", \"@param\", \"@return\", \"@throws\", \"@exception\", \"@see\", \"@since\", \"@serial\", \"@serialField\", \"@serialData\", \"@deprecated\" };\n+    }\n+    \n     public AtclauseOrderCheck() {\n         this.target = TokenUtil.asBitSet(new int[] { 14, 15, 154, 9, 8, 10, 199, 203 });\n         this.tagOrder = Arrays.asList(AtclauseOrderCheck.DEFAULT_ORDER);\n     }\n     \n     public void setTarget(final String... targets) {\n         this.target = TokenUtil.asBitSet(targets);\n@@ -47,15 +51,17 @@\n         if (this.target.get(parentType)) {\n             this.checkOrderInTagSection(ast);\n         }\n     }\n     \n     private void checkOrderInTagSection(final DetailNode javadoc) {\n         int maxIndexOfPreviousTag = 0;\n-        for (final DetailNode node : javadoc.getChildren()) {\n+        DetailNode[] children;\n+        for (int length = (children = javadoc.getChildren()).length, i = 0; i < length; ++i) {\n+            final DetailNode node = children[i];\n             if (node.getType() == 10071) {\n                 final String tagText = JavadocUtil.getFirstChild(node).getText();\n                 final int indexOfCurrentTag = this.tagOrder.indexOf(tagText);\n                 if (indexOfCurrentTag != -1) {\n                     if (indexOfCurrentTag < maxIndexOfPreviousTag) {\n                         this.log(node.getLineNumber(), \"at.clause.order\", new Object[] { this.tagOrder.toString() });\n                     }\n@@ -74,12 +80,8 @@\n             result = parentNode.getParent().getType();\n         }\n         else if (parentNode.getParent() != null && parentNode.getParent().getType() == 5) {\n             result = parentNode.getParent().getParent().getType();\n         }\n         return result;\n     }\n-    \n-    static {\n-        DEFAULT_ORDER = new String[] { \"@author\", \"@version\", \"@param\", \"@return\", \"@throws\", \"@exception\", \"@see\", \"@since\", \"@serial\", \"@serialField\", \"@serialData\", \"@deprecated\" };\n-    }\n }\n"}]}
