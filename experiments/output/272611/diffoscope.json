{"diffoscope-json-version": 1, "source1": "first/InnerAssignmentCheck.class", "source2": "second/InnerAssignmentCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -26,62 +26,59 @@\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 80, 101, 98, 99, 100, 102, 103, 104, 105, 107, 108, 106 };\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        if (!isInContext(ast, InnerAssignmentCheck.ALLOWED_ASSIGNMENT_CONTEXT, CommonUtil.EMPTY_BIT_SET) && !isInNoBraceControlStatement(ast) && !isInLoopIdiom(ast)) {\n-            this.log(ast, \"assignment.inner.avoid\", new Object[0]);\n+    public void visitToken(final DetailAST detailAST) {\n+        if (!isInContext(detailAST, InnerAssignmentCheck.ALLOWED_ASSIGNMENT_CONTEXT, CommonUtil.EMPTY_BIT_SET) && !isInNoBraceControlStatement(detailAST) && !isInLoopIdiom(detailAST)) {\n+            this.log(detailAST, \"assignment.inner.avoid\", new Object[0]);\n         }\n     }\n     \n-    private static boolean isInNoBraceControlStatement(final DetailAST ast) {\n-        boolean result = false;\n-        if (isInContext(ast, InnerAssignmentCheck.CONTROL_CONTEXT, CommonUtil.EMPTY_BIT_SET)) {\n-            final DetailAST expr = ast.getParent();\n-            final DetailAST exprNext = expr.getNextSibling();\n-            result = (exprNext.getType() == 45);\n+    private static boolean isInNoBraceControlStatement(final DetailAST detailAST) {\n+        boolean b = false;\n+        if (isInContext(detailAST, InnerAssignmentCheck.CONTROL_CONTEXT, CommonUtil.EMPTY_BIT_SET)) {\n+            b = (detailAST.getParent().getNextSibling().getType() == 45);\n         }\n-        return result;\n+        return b;\n     }\n     \n-    private static boolean isInLoopIdiom(final DetailAST ast) {\n-        return isComparison(ast.getParent()) && isInContext(ast.getParent(), InnerAssignmentCheck.ALLOWED_ASSIGNMENT_IN_COMPARISON_CONTEXT, InnerAssignmentCheck.LOOP_IDIOM_IGNORED_PARENTS);\n+    private static boolean isInLoopIdiom(final DetailAST detailAST) {\n+        return isComparison(detailAST.getParent()) && isInContext(detailAST.getParent(), InnerAssignmentCheck.ALLOWED_ASSIGNMENT_IN_COMPARISON_CONTEXT, InnerAssignmentCheck.LOOP_IDIOM_IGNORED_PARENTS);\n     }\n     \n-    private static boolean isComparison(final DetailAST ast) {\n-        final int astType = ast.getType();\n-        return InnerAssignmentCheck.COMPARISON_TYPES.get(astType);\n+    private static boolean isComparison(final DetailAST detailAST) {\n+        return InnerAssignmentCheck.COMPARISON_TYPES.get(detailAST.getType());\n     }\n     \n-    private static boolean isInContext(final DetailAST ast, final int[][] contextSet, final BitSet skipTokens) {\n-        boolean found = false;\n-        for (final int[] element : contextSet) {\n-            DetailAST current = ast;\n-            for (final int anElement : element) {\n-                current = getParent(current, skipTokens);\n-                if (current.getType() != anElement) {\n-                    found = false;\n+    private static boolean isInContext(final DetailAST detailAST, final int[][] array, final BitSet set) {\n+        boolean b = false;\n+        for (final int[] array2 : array) {\n+            DetailAST parent = detailAST;\n+            for (final int n : array2) {\n+                parent = getParent(parent, set);\n+                if (parent.getType() != n) {\n+                    b = false;\n                     break;\n                 }\n-                found = true;\n+                b = true;\n             }\n-            if (found) {\n+            if (b) {\n                 break;\n             }\n         }\n-        return found;\n+        return b;\n     }\n     \n-    private static DetailAST getParent(final DetailAST ast, final BitSet skipTokens) {\n-        DetailAST result;\n-        for (result = ast.getParent(); skipTokens.get(result.getType()); result = result.getParent()) {}\n-        return result;\n+    private static DetailAST getParent(final DetailAST detailAST, final BitSet set) {\n+        DetailAST detailAST2;\n+        for (detailAST2 = detailAST.getParent(); set.get(detailAST2.getType()); detailAST2 = detailAST2.getParent()) {}\n+        return detailAST2;\n     }\n     \n     static {\n         ALLOWED_ASSIGNMENT_CONTEXT = new int[][] { { 28, 7 }, { 10 }, { 28, 34, 35 }, { 28, 34, 37 }, { 160 }, { 178, 177, 176 }, { 28, 181 } };\n         CONTROL_CONTEXT = new int[][] { { 28, 85 }, { 28, 91 }, { 28, 84 }, { 28, 83 }, { 28, 92 } };\n         ALLOWED_ASSIGNMENT_IN_COMPARISON_CONTEXT = new int[][] { { 28, 84 }, { 28, 36 }, { 28, 85 } };\n         COMPARISON_TYPES = TokenUtil.asBitSet(new int[] { 116, 120, 118, 119, 117, 115 });\n"}]}
