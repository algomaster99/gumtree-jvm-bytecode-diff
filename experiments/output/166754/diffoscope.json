{"diffoscope-json-version": 1, "source1": "first/JiraCsv93Test.class", "source2": "second/JiraCsv93Test.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,63 +1,63 @@\n-  SHA-256 checksum 0f354641c2e9874cb524e986cfbb68894b883be22dcbea9b26edbe42aa28abe7\n+  SHA-256 checksum 17f31da414654aa5a3ca60a7c0da4f54c9f7aea0ef9733cb1f40889bea4a149e\n   Compiled from \"JiraCsv93Test.java\"\n public class org.apache.commons.csv.issues.JiraCsv93Test\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #46                         // org/apache/commons/csv/issues/JiraCsv93Test\n   super_class: #44                        // java/lang/Object\n   interfaces: 0, fields: 2, methods: 6, attributes: 2\n Constant pool:\n-    #1 = Methodref          #44.#92       // java/lang/Object.\"<init>\":()V\n-    #2 = Methodref          #93.#94       // org/apache/commons/csv/CSVFormat.format:([Ljava/lang/Object;)Ljava/lang/String;\n-    #3 = Methodref          #95.#96       // org/junit/jupiter/api/Assertions.assertEquals:(Ljava/lang/Object;Ljava/lang/Object;)V\n-    #4 = Class              #97           // java/io/StringReader\n-    #5 = Methodref          #4.#98        // java/io/StringReader.\"<init>\":(Ljava/lang/String;)V\n-    #6 = Methodref          #93.#99       // org/apache/commons/csv/CSVFormat.parse:(Ljava/io/Reader;)Lorg/apache/commons/csv/CSVParser;\n-    #7 = Methodref          #100.#101     // org/apache/commons/csv/CSVParser.iterator:()Ljava/util/Iterator;\n-    #8 = InterfaceMethodref #102.#103     // java/util/Iterator.next:()Ljava/lang/Object;\n-    #9 = Class              #104          // org/apache/commons/csv/CSVRecord\n-   #10 = Methodref          #9.#105       // org/apache/commons/csv/CSVRecord.get:(I)Ljava/lang/String;\n-   #11 = Methodref          #100.#106     // org/apache/commons/csv/CSVParser.close:()V\n-   #12 = Class              #107          // java/lang/Throwable\n-   #13 = Methodref          #12.#108      // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-   #14 = Fieldref           #93.#109      // org/apache/commons/csv/CSVFormat.DEFAULT:Lorg/apache/commons/csv/CSVFormat;\n-   #15 = Fieldref           #46.#110      // org/apache/commons/csv/issues/JiraCsv93Test.objects1:[Ljava/lang/Object;\n-   #16 = String             #111          // abc,,,\\\"a,b,c\\\",123\n-   #17 = Class              #112          // java/lang/String\n-   #18 = String             #113          // abc\n-   #19 = String             #114          //\n-   #20 = String             #115          // a,b,c\n-   #21 = String             #116          // 123\n-   #22 = Methodref          #46.#117      // org/apache/commons/csv/issues/JiraCsv93Test.every:(Lorg/apache/commons/csv/CSVFormat;[Ljava/lang/Object;Ljava/lang/String;[Ljava/lang/String;)V\n-   #23 = Methodref          #93.#118      // org/apache/commons/csv/CSVFormat.builder:()Lorg/apache/commons/csv/CSVFormat$Builder;\n-   #24 = Fieldref           #119.#120     // org/apache/commons/csv/QuoteMode.ALL:Lorg/apache/commons/csv/QuoteMode;\n-   #25 = Methodref          #121.#122     // org/apache/commons/csv/CSVFormat$Builder.setQuoteMode:(Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-   #26 = Methodref          #121.#123     // org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n-   #27 = String             #124          // \\\"abc\\\",\\\"\\\",,\\\"a,b,c\\\",\\\"123\\\"\n-   #28 = Fieldref           #119.#125     // org/apache/commons/csv/QuoteMode.ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n-   #29 = Fieldref           #119.#126     // org/apache/commons/csv/QuoteMode.MINIMAL:Lorg/apache/commons/csv/QuoteMode;\n-   #30 = Methodref          #121.#127     // org/apache/commons/csv/CSVFormat$Builder.setEscape:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n-   #31 = Fieldref           #119.#128     // org/apache/commons/csv/QuoteMode.NONE:Lorg/apache/commons/csv/QuoteMode;\n-   #32 = String             #129          // abc,,,a?,b?,c,123\n-   #33 = Fieldref           #119.#130     // org/apache/commons/csv/QuoteMode.NON_NUMERIC:Lorg/apache/commons/csv/QuoteMode;\n-   #34 = String             #131          // \\\"abc\\\",\\\"\\\",,\\\"a,b,c\\\",123\n-   #35 = Methodref          #121.#132     // org/apache/commons/csv/CSVFormat$Builder.setNullString:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-   #36 = String             #133          // \\\"abc\\\",\\\"\\\",\\\"\\\",\\\"a,b,c\\\",\\\"123\\\"\n-   #37 = String             #134          // NULL\n-   #38 = Fieldref           #46.#135      // org/apache/commons/csv/issues/JiraCsv93Test.objects2:[Ljava/lang/Object;\n-   #39 = String             #136          // abc,NULL,NULL,\\\"a,b,c\\\",123\n-   #40 = String             #137          // \\\"abc\\\",\\\"NULL\\\",\\\"NULL\\\",\\\"a,b,c\\\",\\\"123\\\"\n-   #41 = String             #138          // \\\"abc\\\",\\\"NULL\\\",NULL,\\\"a,b,c\\\",\\\"123\\\"\n-   #42 = String             #139          // abc,NULL,NULL,a?,b?,c,123\n-   #43 = String             #140          // \\\"abc\\\",\\\"NULL\\\",NULL,\\\"a,b,c\\\",123\n-   #44 = Class              #141          // java/lang/Object\n-   #45 = Methodref          #142.#143     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #46 = Class              #144          // org/apache/commons/csv/issues/JiraCsv93Test\n+    #1 = Methodref          #44.#88       // java/lang/Object.\"<init>\":()V\n+    #2 = Methodref          #74.#89       // org/apache/commons/csv/CSVFormat.format:([Ljava/lang/Object;)Ljava/lang/String;\n+    #3 = Methodref          #90.#91       // org/junit/jupiter/api/Assertions.assertEquals:(Ljava/lang/Object;Ljava/lang/Object;)V\n+    #4 = Class              #92           // java/io/StringReader\n+    #5 = Methodref          #4.#93        // java/io/StringReader.\"<init>\":(Ljava/lang/String;)V\n+    #6 = Methodref          #74.#94       // org/apache/commons/csv/CSVFormat.parse:(Ljava/io/Reader;)Lorg/apache/commons/csv/CSVParser;\n+    #7 = Methodref          #77.#95       // org/apache/commons/csv/CSVParser.iterator:()Ljava/util/Iterator;\n+    #8 = InterfaceMethodref #96.#97       // java/util/Iterator.next:()Ljava/lang/Object;\n+    #9 = Class              #98           // org/apache/commons/csv/CSVRecord\n+   #10 = Methodref          #9.#99        // org/apache/commons/csv/CSVRecord.get:(I)Ljava/lang/String;\n+   #11 = Methodref          #77.#100      // org/apache/commons/csv/CSVParser.close:()V\n+   #12 = Class              #101          // java/lang/Throwable\n+   #13 = Methodref          #12.#102      // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+   #14 = Fieldref           #74.#103      // org/apache/commons/csv/CSVFormat.DEFAULT:Lorg/apache/commons/csv/CSVFormat;\n+   #15 = Fieldref           #46.#104      // org/apache/commons/csv/issues/JiraCsv93Test.objects1:[Ljava/lang/Object;\n+   #16 = String             #105          // abc,,,\\\"a,b,c\\\",123\n+   #17 = Class              #106          // java/lang/String\n+   #18 = String             #107          // abc\n+   #19 = String             #108          //\n+   #20 = String             #109          // a,b,c\n+   #21 = String             #110          // 123\n+   #22 = Methodref          #46.#111      // org/apache/commons/csv/issues/JiraCsv93Test.every:(Lorg/apache/commons/csv/CSVFormat;[Ljava/lang/Object;Ljava/lang/String;[Ljava/lang/String;)V\n+   #23 = Methodref          #74.#112      // org/apache/commons/csv/CSVFormat.builder:()Lorg/apache/commons/csv/CSVFormat$Builder;\n+   #24 = Fieldref           #113.#114     // org/apache/commons/csv/QuoteMode.ALL:Lorg/apache/commons/csv/QuoteMode;\n+   #25 = Methodref          #115.#116     // org/apache/commons/csv/CSVFormat$Builder.setQuoteMode:(Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+   #26 = Methodref          #115.#117     // org/apache/commons/csv/CSVFormat$Builder.build:()Lorg/apache/commons/csv/CSVFormat;\n+   #27 = String             #118          // \\\"abc\\\",\\\"\\\",,\\\"a,b,c\\\",\\\"123\\\"\n+   #28 = Fieldref           #113.#119     // org/apache/commons/csv/QuoteMode.ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n+   #29 = Fieldref           #113.#120     // org/apache/commons/csv/QuoteMode.MINIMAL:Lorg/apache/commons/csv/QuoteMode;\n+   #30 = Methodref          #115.#121     // org/apache/commons/csv/CSVFormat$Builder.setEscape:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n+   #31 = Fieldref           #113.#122     // org/apache/commons/csv/QuoteMode.NONE:Lorg/apache/commons/csv/QuoteMode;\n+   #32 = String             #123          // abc,,,a?,b?,c,123\n+   #33 = Fieldref           #113.#124     // org/apache/commons/csv/QuoteMode.NON_NUMERIC:Lorg/apache/commons/csv/QuoteMode;\n+   #34 = String             #125          // \\\"abc\\\",\\\"\\\",,\\\"a,b,c\\\",123\n+   #35 = Methodref          #115.#126     // org/apache/commons/csv/CSVFormat$Builder.setNullString:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+   #36 = String             #127          // \\\"abc\\\",\\\"\\\",\\\"\\\",\\\"a,b,c\\\",\\\"123\\\"\n+   #37 = String             #128          // NULL\n+   #38 = Fieldref           #46.#129      // org/apache/commons/csv/issues/JiraCsv93Test.objects2:[Ljava/lang/Object;\n+   #39 = String             #130          // abc,NULL,NULL,\\\"a,b,c\\\",123\n+   #40 = String             #131          // \\\"abc\\\",\\\"NULL\\\",\\\"NULL\\\",\\\"a,b,c\\\",\\\"123\\\"\n+   #41 = String             #132          // \\\"abc\\\",\\\"NULL\\\",NULL,\\\"a,b,c\\\",\\\"123\\\"\n+   #42 = String             #133          // abc,NULL,NULL,a?,b?,c,123\n+   #43 = String             #134          // \\\"abc\\\",\\\"NULL\\\",NULL,\\\"a,b,c\\\",123\n+   #44 = Class              #135          // java/lang/Object\n+   #45 = Methodref          #136.#137     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+   #46 = Class              #138          // org/apache/commons/csv/issues/JiraCsv93Test\n    #47 = Utf8               objects1\n    #48 = Utf8               [Ljava/lang/Object;\n    #49 = Utf8               objects2\n    #50 = Utf8               <init>\n    #51 = Utf8               ()V\n    #52 = Utf8               Code\n    #53 = Utf8               LineNumberTable\n@@ -77,129 +77,123 @@\n    #67 = Utf8               objects\n    #68 = Utf8               format\n    #69 = Utf8               Ljava/lang/String;\n    #70 = Utf8               data\n    #71 = Utf8               [Ljava/lang/String;\n    #72 = Utf8               source\n    #73 = Utf8               StackMapTable\n-   #74 = Class              #144          // org/apache/commons/csv/issues/JiraCsv93Test\n-   #75 = Class              #145          // org/apache/commons/csv/CSVFormat\n-   #76 = Class              #48           // \"[Ljava/lang/Object;\"\n-   #77 = Class              #112          // java/lang/String\n-   #78 = Class              #71           // \"[Ljava/lang/String;\"\n-   #79 = Class              #146          // org/apache/commons/csv/CSVParser\n-   #80 = Class              #107          // java/lang/Throwable\n-   #81 = Class              #104          // org/apache/commons/csv/CSVRecord\n-   #82 = Utf8               Exceptions\n-   #83 = Class              #147          // java/io/IOException\n-   #84 = Utf8               testWithNotSetNullString\n-   #85 = Utf8               RuntimeVisibleAnnotations\n-   #86 = Utf8               Lorg/junit/jupiter/api/Test;\n-   #87 = Utf8               testWithSetNullStringEmptyString\n-   #88 = Utf8               testWithSetNullStringNULL\n-   #89 = Utf8               <clinit>\n-   #90 = Utf8               SourceFile\n-   #91 = Utf8               JiraCsv93Test.java\n-   #92 = NameAndType        #50:#51       // \"<init>\":()V\n-   #93 = Class              #145          // org/apache/commons/csv/CSVFormat\n-   #94 = NameAndType        #68:#148      // format:([Ljava/lang/Object;)Ljava/lang/String;\n-   #95 = Class              #149          // org/junit/jupiter/api/Assertions\n-   #96 = NameAndType        #150:#151     // assertEquals:(Ljava/lang/Object;Ljava/lang/Object;)V\n-   #97 = Utf8               java/io/StringReader\n-   #98 = NameAndType        #50:#152      // \"<init>\":(Ljava/lang/String;)V\n-   #99 = NameAndType        #153:#154     // parse:(Ljava/io/Reader;)Lorg/apache/commons/csv/CSVParser;\n-  #100 = Class              #146          // org/apache/commons/csv/CSVParser\n-  #101 = NameAndType        #155:#156     // iterator:()Ljava/util/Iterator;\n-  #102 = Class              #157          // java/util/Iterator\n-  #103 = NameAndType        #158:#159     // next:()Ljava/lang/Object;\n-  #104 = Utf8               org/apache/commons/csv/CSVRecord\n-  #105 = NameAndType        #160:#161     // get:(I)Ljava/lang/String;\n-  #106 = NameAndType        #162:#51      // close:()V\n-  #107 = Utf8               java/lang/Throwable\n-  #108 = NameAndType        #163:#164     // addSuppressed:(Ljava/lang/Throwable;)V\n-  #109 = NameAndType        #165:#66      // DEFAULT:Lorg/apache/commons/csv/CSVFormat;\n-  #110 = NameAndType        #47:#48       // objects1:[Ljava/lang/Object;\n-  #111 = Utf8               abc,,,\\\"a,b,c\\\",123\n-  #112 = Utf8               java/lang/String\n-  #113 = Utf8               abc\n-  #114 = Utf8\n-  #115 = Utf8               a,b,c\n-  #116 = Utf8               123\n-  #117 = NameAndType        #57:#58       // every:(Lorg/apache/commons/csv/CSVFormat;[Ljava/lang/Object;Ljava/lang/String;[Ljava/lang/String;)V\n-  #118 = NameAndType        #166:#169     // builder:()Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #119 = Class              #170          // org/apache/commons/csv/QuoteMode\n-  #120 = NameAndType        #171:#172     // ALL:Lorg/apache/commons/csv/QuoteMode;\n-  #121 = Class              #173          // org/apache/commons/csv/CSVFormat$Builder\n-  #122 = NameAndType        #174:#175     // setQuoteMode:(Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #123 = NameAndType        #176:#177     // build:()Lorg/apache/commons/csv/CSVFormat;\n-  #124 = Utf8               \\\"abc\\\",\\\"\\\",,\\\"a,b,c\\\",\\\"123\\\"\n-  #125 = NameAndType        #178:#172     // ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n-  #126 = NameAndType        #179:#172     // MINIMAL:Lorg/apache/commons/csv/QuoteMode;\n-  #127 = NameAndType        #180:#181     // setEscape:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #128 = NameAndType        #182:#172     // NONE:Lorg/apache/commons/csv/QuoteMode;\n-  #129 = Utf8               abc,,,a?,b?,c,123\n-  #130 = NameAndType        #183:#172     // NON_NUMERIC:Lorg/apache/commons/csv/QuoteMode;\n-  #131 = Utf8               \\\"abc\\\",\\\"\\\",,\\\"a,b,c\\\",123\n-  #132 = NameAndType        #184:#185     // setNullString:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #133 = Utf8               \\\"abc\\\",\\\"\\\",\\\"\\\",\\\"a,b,c\\\",\\\"123\\\"\n-  #134 = Utf8               NULL\n-  #135 = NameAndType        #49:#48       // objects2:[Ljava/lang/Object;\n-  #136 = Utf8               abc,NULL,NULL,\\\"a,b,c\\\",123\n-  #137 = Utf8               \\\"abc\\\",\\\"NULL\\\",\\\"NULL\\\",\\\"a,b,c\\\",\\\"123\\\"\n-  #138 = Utf8               \\\"abc\\\",\\\"NULL\\\",NULL,\\\"a,b,c\\\",\\\"123\\\"\n-  #139 = Utf8               abc,NULL,NULL,a?,b?,c,123\n-  #140 = Utf8               \\\"abc\\\",\\\"NULL\\\",NULL,\\\"a,b,c\\\",123\n-  #141 = Utf8               java/lang/Object\n-  #142 = Class              #186          // java/lang/Integer\n-  #143 = NameAndType        #187:#188     // valueOf:(I)Ljava/lang/Integer;\n-  #144 = Utf8               org/apache/commons/csv/issues/JiraCsv93Test\n-  #145 = Utf8               org/apache/commons/csv/CSVFormat\n-  #146 = Utf8               org/apache/commons/csv/CSVParser\n-  #147 = Utf8               java/io/IOException\n-  #148 = Utf8               ([Ljava/lang/Object;)Ljava/lang/String;\n-  #149 = Utf8               org/junit/jupiter/api/Assertions\n-  #150 = Utf8               assertEquals\n-  #151 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)V\n-  #152 = Utf8               (Ljava/lang/String;)V\n-  #153 = Utf8               parse\n-  #154 = Utf8               (Ljava/io/Reader;)Lorg/apache/commons/csv/CSVParser;\n-  #155 = Utf8               iterator\n-  #156 = Utf8               ()Ljava/util/Iterator;\n-  #157 = Utf8               java/util/Iterator\n-  #158 = Utf8               next\n-  #159 = Utf8               ()Ljava/lang/Object;\n-  #160 = Utf8               get\n-  #161 = Utf8               (I)Ljava/lang/String;\n-  #162 = Utf8               close\n-  #163 = Utf8               addSuppressed\n-  #164 = Utf8               (Ljava/lang/Throwable;)V\n-  #165 = Utf8               DEFAULT\n-  #166 = Utf8               builder\n-  #167 = Utf8               Builder\n-  #168 = Utf8               InnerClasses\n-  #169 = Utf8               ()Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #170 = Utf8               org/apache/commons/csv/QuoteMode\n-  #171 = Utf8               ALL\n-  #172 = Utf8               Lorg/apache/commons/csv/QuoteMode;\n-  #173 = Utf8               org/apache/commons/csv/CSVFormat$Builder\n-  #174 = Utf8               setQuoteMode\n-  #175 = Utf8               (Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #176 = Utf8               build\n-  #177 = Utf8               ()Lorg/apache/commons/csv/CSVFormat;\n-  #178 = Utf8               ALL_NON_NULL\n-  #179 = Utf8               MINIMAL\n-  #180 = Utf8               setEscape\n-  #181 = Utf8               (C)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #182 = Utf8               NONE\n-  #183 = Utf8               NON_NUMERIC\n-  #184 = Utf8               setNullString\n-  #185 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n-  #186 = Utf8               java/lang/Integer\n-  #187 = Utf8               valueOf\n-  #188 = Utf8               (I)Ljava/lang/Integer;\n+   #74 = Class              #139          // org/apache/commons/csv/CSVFormat\n+   #75 = Class              #48           // \"[Ljava/lang/Object;\"\n+   #76 = Class              #71           // \"[Ljava/lang/String;\"\n+   #77 = Class              #140          // org/apache/commons/csv/CSVParser\n+   #78 = Utf8               Exceptions\n+   #79 = Class              #141          // java/io/IOException\n+   #80 = Utf8               testWithNotSetNullString\n+   #81 = Utf8               RuntimeVisibleAnnotations\n+   #82 = Utf8               Lorg/junit/jupiter/api/Test;\n+   #83 = Utf8               testWithSetNullStringEmptyString\n+   #84 = Utf8               testWithSetNullStringNULL\n+   #85 = Utf8               <clinit>\n+   #86 = Utf8               SourceFile\n+   #87 = Utf8               JiraCsv93Test.java\n+   #88 = NameAndType        #50:#51       // \"<init>\":()V\n+   #89 = NameAndType        #68:#142      // format:([Ljava/lang/Object;)Ljava/lang/String;\n+   #90 = Class              #143          // org/junit/jupiter/api/Assertions\n+   #91 = NameAndType        #144:#145     // assertEquals:(Ljava/lang/Object;Ljava/lang/Object;)V\n+   #92 = Utf8               java/io/StringReader\n+   #93 = NameAndType        #50:#146      // \"<init>\":(Ljava/lang/String;)V\n+   #94 = NameAndType        #147:#148     // parse:(Ljava/io/Reader;)Lorg/apache/commons/csv/CSVParser;\n+   #95 = NameAndType        #149:#150     // iterator:()Ljava/util/Iterator;\n+   #96 = Class              #151          // java/util/Iterator\n+   #97 = NameAndType        #152:#153     // next:()Ljava/lang/Object;\n+   #98 = Utf8               org/apache/commons/csv/CSVRecord\n+   #99 = NameAndType        #154:#155     // get:(I)Ljava/lang/String;\n+  #100 = NameAndType        #156:#51      // close:()V\n+  #101 = Utf8               java/lang/Throwable\n+  #102 = NameAndType        #157:#158     // addSuppressed:(Ljava/lang/Throwable;)V\n+  #103 = NameAndType        #159:#66      // DEFAULT:Lorg/apache/commons/csv/CSVFormat;\n+  #104 = NameAndType        #47:#48       // objects1:[Ljava/lang/Object;\n+  #105 = Utf8               abc,,,\\\"a,b,c\\\",123\n+  #106 = Utf8               java/lang/String\n+  #107 = Utf8               abc\n+  #108 = Utf8\n+  #109 = Utf8               a,b,c\n+  #110 = Utf8               123\n+  #111 = NameAndType        #57:#58       // every:(Lorg/apache/commons/csv/CSVFormat;[Ljava/lang/Object;Ljava/lang/String;[Ljava/lang/String;)V\n+  #112 = NameAndType        #160:#163     // builder:()Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #113 = Class              #164          // org/apache/commons/csv/QuoteMode\n+  #114 = NameAndType        #165:#166     // ALL:Lorg/apache/commons/csv/QuoteMode;\n+  #115 = Class              #167          // org/apache/commons/csv/CSVFormat$Builder\n+  #116 = NameAndType        #168:#169     // setQuoteMode:(Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #117 = NameAndType        #170:#171     // build:()Lorg/apache/commons/csv/CSVFormat;\n+  #118 = Utf8               \\\"abc\\\",\\\"\\\",,\\\"a,b,c\\\",\\\"123\\\"\n+  #119 = NameAndType        #172:#166     // ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n+  #120 = NameAndType        #173:#166     // MINIMAL:Lorg/apache/commons/csv/QuoteMode;\n+  #121 = NameAndType        #174:#175     // setEscape:(C)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #122 = NameAndType        #176:#166     // NONE:Lorg/apache/commons/csv/QuoteMode;\n+  #123 = Utf8               abc,,,a?,b?,c,123\n+  #124 = NameAndType        #177:#166     // NON_NUMERIC:Lorg/apache/commons/csv/QuoteMode;\n+  #125 = Utf8               \\\"abc\\\",\\\"\\\",,\\\"a,b,c\\\",123\n+  #126 = NameAndType        #178:#179     // setNullString:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #127 = Utf8               \\\"abc\\\",\\\"\\\",\\\"\\\",\\\"a,b,c\\\",\\\"123\\\"\n+  #128 = Utf8               NULL\n+  #129 = NameAndType        #49:#48       // objects2:[Ljava/lang/Object;\n+  #130 = Utf8               abc,NULL,NULL,\\\"a,b,c\\\",123\n+  #131 = Utf8               \\\"abc\\\",\\\"NULL\\\",\\\"NULL\\\",\\\"a,b,c\\\",\\\"123\\\"\n+  #132 = Utf8               \\\"abc\\\",\\\"NULL\\\",NULL,\\\"a,b,c\\\",\\\"123\\\"\n+  #133 = Utf8               abc,NULL,NULL,a?,b?,c,123\n+  #134 = Utf8               \\\"abc\\\",\\\"NULL\\\",NULL,\\\"a,b,c\\\",123\n+  #135 = Utf8               java/lang/Object\n+  #136 = Class              #180          // java/lang/Integer\n+  #137 = NameAndType        #181:#182     // valueOf:(I)Ljava/lang/Integer;\n+  #138 = Utf8               org/apache/commons/csv/issues/JiraCsv93Test\n+  #139 = Utf8               org/apache/commons/csv/CSVFormat\n+  #140 = Utf8               org/apache/commons/csv/CSVParser\n+  #141 = Utf8               java/io/IOException\n+  #142 = Utf8               ([Ljava/lang/Object;)Ljava/lang/String;\n+  #143 = Utf8               org/junit/jupiter/api/Assertions\n+  #144 = Utf8               assertEquals\n+  #145 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)V\n+  #146 = Utf8               (Ljava/lang/String;)V\n+  #147 = Utf8               parse\n+  #148 = Utf8               (Ljava/io/Reader;)Lorg/apache/commons/csv/CSVParser;\n+  #149 = Utf8               iterator\n+  #150 = Utf8               ()Ljava/util/Iterator;\n+  #151 = Utf8               java/util/Iterator\n+  #152 = Utf8               next\n+  #153 = Utf8               ()Ljava/lang/Object;\n+  #154 = Utf8               get\n+  #155 = Utf8               (I)Ljava/lang/String;\n+  #156 = Utf8               close\n+  #157 = Utf8               addSuppressed\n+  #158 = Utf8               (Ljava/lang/Throwable;)V\n+  #159 = Utf8               DEFAULT\n+  #160 = Utf8               builder\n+  #161 = Utf8               Builder\n+  #162 = Utf8               InnerClasses\n+  #163 = Utf8               ()Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #164 = Utf8               org/apache/commons/csv/QuoteMode\n+  #165 = Utf8               ALL\n+  #166 = Utf8               Lorg/apache/commons/csv/QuoteMode;\n+  #167 = Utf8               org/apache/commons/csv/CSVFormat$Builder\n+  #168 = Utf8               setQuoteMode\n+  #169 = Utf8               (Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #170 = Utf8               build\n+  #171 = Utf8               ()Lorg/apache/commons/csv/CSVFormat;\n+  #172 = Utf8               ALL_NON_NULL\n+  #173 = Utf8               MINIMAL\n+  #174 = Utf8               setEscape\n+  #175 = Utf8               (C)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #176 = Utf8               NONE\n+  #177 = Utf8               NON_NUMERIC\n+  #178 = Utf8               setNullString\n+  #179 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Builder;\n+  #180 = Utf8               java/lang/Integer\n+  #181 = Utf8               valueOf\n+  #182 = Utf8               (I)Ljava/lang/Integer;\n {\n   private static java.lang.Object[] objects1;\n     descriptor: [Ljava/lang/Object;\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n \n   private static java.lang.Object[] objects2;\n     descriptor: [Ljava/lang/Object;\n@@ -219,15 +213,15 @@\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/csv/issues/JiraCsv93Test;\n \n   private void every(org.apache.commons.csv.CSVFormat, java.lang.Object[], java.lang.String, java.lang.String[]) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/csv/CSVFormat;[Ljava/lang/Object;Ljava/lang/String;[Ljava/lang/String;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n-      stack=4, locals=12, args_size=5\n+      stack=4, locals=9, args_size=5\n          0: aload_1\n          1: aload_2\n          2: invokevirtual #2                  // Method org/apache/commons/csv/CSVFormat.format:([Ljava/lang/Object;)Ljava/lang/String;\n          5: astore        5\n          7: aload_3\n          8: aload_1\n          9: aload_2\n@@ -236,128 +230,94 @@\n         16: aload_1\n         17: new           #4                  // class java/io/StringReader\n         20: dup\n         21: aload         5\n         23: invokespecial #5                  // Method java/io/StringReader.\"<init>\":(Ljava/lang/String;)V\n         26: invokevirtual #6                  // Method org/apache/commons/csv/CSVFormat.parse:(Ljava/io/Reader;)Lorg/apache/commons/csv/CSVParser;\n         29: astore        6\n-        31: aconst_null\n-        32: astore        7\n-        34: aload         6\n-        36: invokevirtual #7                  // Method org/apache/commons/csv/CSVParser.iterator:()Ljava/util/Iterator;\n-        39: invokeinterface #8,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n-        44: checkcast     #9                  // class org/apache/commons/csv/CSVRecord\n-        47: astore        8\n-        49: iconst_0\n-        50: istore        9\n-        52: iload         9\n-        54: aload         4\n-        56: arraylength\n-        57: if_icmpge     81\n-        60: aload         8\n-        62: iload         9\n-        64: invokevirtual #10                 // Method org/apache/commons/csv/CSVRecord.get:(I)Ljava/lang/String;\n-        67: aload         4\n-        69: iload         9\n-        71: aaload\n-        72: invokestatic  #3                  // Method org/junit/jupiter/api/Assertions.assertEquals:(Ljava/lang/Object;Ljava/lang/Object;)V\n-        75: iinc          9, 1\n-        78: goto          52\n-        81: aload         6\n-        83: ifnull        168\n-        86: aload         7\n-        88: ifnull        111\n-        91: aload         6\n-        93: invokevirtual #11                 // Method org/apache/commons/csv/CSVParser.close:()V\n-        96: goto          168\n-        99: astore        8\n-       101: aload         7\n-       103: aload         8\n-       105: invokevirtual #13                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-       108: goto          168\n-       111: aload         6\n-       113: invokevirtual #11                 // Method org/apache/commons/csv/CSVParser.close:()V\n-       116: goto          168\n-       119: astore        8\n-       121: aload         8\n-       123: astore        7\n-       125: aload         8\n-       127: athrow\n-       128: astore        10\n-       130: aload         6\n-       132: ifnull        165\n-       135: aload         7\n-       137: ifnull        160\n-       140: aload         6\n-       142: invokevirtual #11                 // Method org/apache/commons/csv/CSVParser.close:()V\n-       145: goto          165\n-       148: astore        11\n-       150: aload         7\n-       152: aload         11\n-       154: invokevirtual #13                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-       157: goto          165\n-       160: aload         6\n-       162: invokevirtual #11                 // Method org/apache/commons/csv/CSVParser.close:()V\n-       165: aload         10\n-       167: athrow\n-       168: return\n+        31: aload         6\n+        33: invokevirtual #7                  // Method org/apache/commons/csv/CSVParser.iterator:()Ljava/util/Iterator;\n+        36: invokeinterface #8,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n+        41: checkcast     #9                  // class org/apache/commons/csv/CSVRecord\n+        44: astore        7\n+        46: iconst_0\n+        47: istore        8\n+        49: iload         8\n+        51: aload         4\n+        53: arraylength\n+        54: if_icmpge     78\n+        57: aload         7\n+        59: iload         8\n+        61: invokevirtual #10                 // Method org/apache/commons/csv/CSVRecord.get:(I)Ljava/lang/String;\n+        64: aload         4\n+        66: iload         8\n+        68: aaload\n+        69: invokestatic  #3                  // Method org/junit/jupiter/api/Assertions.assertEquals:(Ljava/lang/Object;Ljava/lang/Object;)V\n+        72: iinc          8, 1\n+        75: goto          49\n+        78: aload         6\n+        80: ifnull        118\n+        83: aload         6\n+        85: invokevirtual #11                 // Method org/apache/commons/csv/CSVParser.close:()V\n+        88: goto          118\n+        91: astore        7\n+        93: aload         6\n+        95: ifnull        115\n+        98: aload         6\n+       100: invokevirtual #11                 // Method org/apache/commons/csv/CSVParser.close:()V\n+       103: goto          115\n+       106: astore        8\n+       108: aload         7\n+       110: aload         8\n+       112: invokevirtual #13                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+       115: aload         7\n+       117: athrow\n+       118: return\n       Exception table:\n          from    to  target type\n-            91    96    99   Class java/lang/Throwable\n-            34    81   119   Class java/lang/Throwable\n-            34    81   128   any\n-           140   145   148   Class java/lang/Throwable\n-           119   130   128   any\n+            31    78    91   Class java/lang/Throwable\n+            98   103   106   Class java/lang/Throwable\n       LineNumberTable:\n         line 51: 0\n         line 52: 7\n         line 53: 16\n-        line 54: 34\n-        line 55: 49\n-        line 56: 60\n-        line 55: 75\n-        line 58: 81\n-        line 53: 119\n-        line 58: 128\n-        line 59: 168\n+        line 54: 31\n+        line 55: 46\n+        line 56: 57\n+        line 55: 72\n+        line 58: 78\n+        line 53: 91\n+        line 59: 118\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           52      29     9     i   I\n-           49      32     8 csvRecord   Lorg/apache/commons/csv/CSVRecord;\n-           31     137     6 csvParser   Lorg/apache/commons/csv/CSVParser;\n-            0     169     0  this   Lorg/apache/commons/csv/issues/JiraCsv93Test;\n-            0     169     1 csvFormat   Lorg/apache/commons/csv/CSVFormat;\n-            0     169     2 objects   [Ljava/lang/Object;\n-            0     169     3 format   Ljava/lang/String;\n-            0     169     4  data   [Ljava/lang/String;\n-            7     162     5 source   Ljava/lang/String;\n-      StackMapTable: number_of_entries = 10\n+           49      29     8     i   I\n+           46      32     7 csvRecord   Lorg/apache/commons/csv/CSVRecord;\n+           31      87     6 csvParser   Lorg/apache/commons/csv/CSVParser;\n+            0     119     0  this   Lorg/apache/commons/csv/issues/JiraCsv93Test;\n+            0     119     1 csvFormat   Lorg/apache/commons/csv/CSVFormat;\n+            0     119     2 objects   [Ljava/lang/Object;\n+            0     119     3 format   Ljava/lang/String;\n+            0     119     4  data   [Ljava/lang/String;\n+            7     112     5 source   Ljava/lang/String;\n+      StackMapTable: number_of_entries = 6\n         frame_type = 255 /* full_frame */\n-          offset_delta = 52\n-          locals = [ class org/apache/commons/csv/issues/JiraCsv93Test, class org/apache/commons/csv/CSVFormat, class \"[Ljava/lang/Object;\", class java/lang/String, class \"[Ljava/lang/String;\", class java/lang/String, class org/apache/commons/csv/CSVParser, class java/lang/Throwable, class org/apache/commons/csv/CSVRecord, int ]\n+          offset_delta = 49\n+          locals = [ class org/apache/commons/csv/issues/JiraCsv93Test, class org/apache/commons/csv/CSVFormat, class \"[Ljava/lang/Object;\", class java/lang/String, class \"[Ljava/lang/String;\", class java/lang/String, class org/apache/commons/csv/CSVParser, class org/apache/commons/csv/CSVRecord, int ]\n           stack = []\n         frame_type = 249 /* chop */\n           offset_delta = 28\n-        frame_type = 81 /* same_locals_1_stack_item */\n-          stack = [ class java/lang/Throwable ]\n-        frame_type = 11 /* same */\n-        frame_type = 71 /* same_locals_1_stack_item */\n-          stack = [ class java/lang/Throwable ]\n-        frame_type = 72 /* same_locals_1_stack_item */\n+        frame_type = 76 /* same_locals_1_stack_item */\n           stack = [ class java/lang/Throwable ]\n         frame_type = 255 /* full_frame */\n-          offset_delta = 19\n-          locals = [ class org/apache/commons/csv/issues/JiraCsv93Test, class org/apache/commons/csv/CSVFormat, class \"[Ljava/lang/Object;\", class java/lang/String, class \"[Ljava/lang/String;\", class java/lang/String, class org/apache/commons/csv/CSVParser, class java/lang/Throwable, top, top, class java/lang/Throwable ]\n+          offset_delta = 14\n+          locals = [ class org/apache/commons/csv/issues/JiraCsv93Test, class org/apache/commons/csv/CSVFormat, class \"[Ljava/lang/Object;\", class java/lang/String, class \"[Ljava/lang/String;\", class java/lang/String, class org/apache/commons/csv/CSVParser, class java/lang/Throwable ]\n           stack = [ class java/lang/Throwable ]\n-        frame_type = 11 /* same */\n-        frame_type = 4 /* same */\n-        frame_type = 255 /* full_frame */\n+        frame_type = 8 /* same */\n+        frame_type = 249 /* chop */\n           offset_delta = 2\n-          locals = [ class org/apache/commons/csv/issues/JiraCsv93Test, class org/apache/commons/csv/CSVFormat, class \"[Ljava/lang/Object;\", class java/lang/String, class \"[Ljava/lang/String;\", class java/lang/String ]\n-          stack = []\n     Exceptions:\n       throws java.io.IOException\n \n   public void testWithNotSetNullString() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n@@ -557,15 +517,15 @@\n         line 89: 309\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0     310     0  this   Lorg/apache/commons/csv/issues/JiraCsv93Test;\n     Exceptions:\n       throws java.io.IOException\n     RuntimeVisibleAnnotations:\n-      0: #86()\n+      0: #82()\n         org.junit.jupiter.api.Test\n \n   public void testWithSetNullStringEmptyString() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=8, locals=1, args_size=1\n@@ -778,15 +738,15 @@\n         line 119: 337\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0     338     0  this   Lorg/apache/commons/csv/issues/JiraCsv93Test;\n     Exceptions:\n       throws java.io.IOException\n     RuntimeVisibleAnnotations:\n-      0: #86()\n+      0: #82()\n         org.junit.jupiter.api.Test\n \n   public void testWithSetNullStringNULL() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=8, locals=1, args_size=1\n@@ -999,15 +959,15 @@\n         line 149: 337\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0     338     0  this   Lorg/apache/commons/csv/issues/JiraCsv93Test;\n     Exceptions:\n       throws java.io.IOException\n     RuntimeVisibleAnnotations:\n-      0: #86()\n+      0: #82()\n         org.junit.jupiter.api.Test\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=4, locals=0, args_size=0\n@@ -1062,8 +1022,8 @@\n         68: return\n       LineNumberTable:\n         line 45: 0\n         line 47: 34\n }\n SourceFile: \"JiraCsv93Test.java\"\n InnerClasses:\n-  public static #167= #121 of #93;        // Builder=class org/apache/commons/csv/CSVFormat$Builder of class org/apache/commons/csv/CSVFormat\n+  public static #161= #115 of #74;        // Builder=class org/apache/commons/csv/CSVFormat$Builder of class org/apache/commons/csv/CSVFormat\n"}]}
