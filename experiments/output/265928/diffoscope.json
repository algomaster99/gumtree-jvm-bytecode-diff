{"diffoscope-json-version": 1, "source1": "first/CPInstruction.class", "source2": "second/CPInstruction.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,16 +1,16 @@\n \n package org.apache.bcel.generic;\n \n import org.apache.bcel.classfile.Constant;\n import org.apache.bcel.Const;\n import org.apache.bcel.classfile.Utility;\n import org.apache.bcel.classfile.ConstantClass;\n-import org.apache.bcel.util.ByteSequence;\n import org.apache.bcel.classfile.ConstantPool;\n+import org.apache.bcel.util.ByteSequence;\n import java.io.IOException;\n import java.io.DataOutputStream;\n \n public abstract class CPInstruction extends Instruction implements TypedInstruction, IndexedInstruction\n {\n     @Deprecated\n     protected int index;\n@@ -29,20 +29,19 @@\n     }\n     \n     public final int getIndex() {\n         return this.index;\n     }\n     \n     public Type getType(final ConstantPoolGen cpg) {\n-        final ConstantPool cp = cpg.getConstantPool();\n-        String name = cp.getConstantString(this.index, (byte)7);\n-        if (!name.startsWith(\"[\")) {\n-            name = \"L\" + name + \";\";\n+        String str = cpg.getConstantPool().getConstantString(this.index, (byte)7);\n+        if (!str.startsWith(\"[\")) {\n+            str = \"L\" + str + \";\";\n         }\n-        return Type.getType(name);\n+        return Type.getType(str);\n     }\n     \n     protected void initFromFile(final ByteSequence bytes, final boolean wide) throws IOException {\n         this.setIndex(bytes.readUnsignedShort());\n         super.setLength(3);\n     }\n     \n@@ -54,15 +53,15 @@\n     }\n     \n     public String toString(final boolean verbose) {\n         return super.toString(verbose) + \" \" + this.index;\n     }\n     \n     public String toString(final ConstantPool cp) {\n-        final Constant c = cp.getConstant(this.index);\n-        String str = cp.constantToString(c);\n-        if (c instanceof ConstantClass) {\n+        final Constant constant = cp.getConstant(this.index);\n+        String str = cp.constantToString(constant);\n+        if (constant instanceof ConstantClass) {\n             str = Utility.packageToPath(str);\n         }\n         return Const.getOpcodeName((int)super.getOpcode()) + \" \" + str;\n     }\n }\n"}]}
