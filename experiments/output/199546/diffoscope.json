{"diffoscope-json-version": 1, "source1": "first/StackMapType.class", "source2": "second/StackMapType.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,45 +8,45 @@\n \n public final class StackMapType implements Cloneable\n {\n     private byte type;\n     private int index;\n     private ConstantPool constantPool;\n     \n-    public StackMapType(final byte type, final int index, final ConstantPool constant_pool) {\n+    public StackMapType(final byte b, final int index, final ConstantPool constantPool) {\n         this.index = -1;\n-        if (type < 0 || type > 8) {\n-            throw new IllegalArgumentException(\"Illegal type for StackMapType: \" + type);\n+        if (b < 0 || b > 8) {\n+            throw new IllegalArgumentException(\"Illegal type for StackMapType: \" + b);\n         }\n-        this.type = type;\n+        this.type = b;\n         this.index = index;\n-        this.constantPool = constant_pool;\n+        this.constantPool = constantPool;\n     }\n     \n-    StackMapType(final DataInput file, final ConstantPool constant_pool) throws IOException {\n-        this(file.readByte(), -1, constant_pool);\n+    StackMapType(final DataInput dataInput, final ConstantPool constantPool) throws IOException {\n+        this(dataInput.readByte(), -1, constantPool);\n         if (this.hasIndex()) {\n-            this.index = file.readShort();\n+            this.index = dataInput.readShort();\n         }\n-        this.constantPool = constant_pool;\n+        this.constantPool = constantPool;\n     }\n     \n     public StackMapType copy() {\n         try {\n             return (StackMapType)this.clone();\n         }\n         catch (final CloneNotSupportedException ex) {\n             return null;\n         }\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        file.writeByte(this.type);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeByte(this.type);\n         if (this.hasIndex()) {\n-            file.writeShort(this.getIndex());\n+            dataOutputStream.writeShort(this.getIndex());\n         }\n     }\n     \n     public ConstantPool getConstantPool() {\n         return this.constantPool;\n     }\n     \n@@ -77,23 +77,23 @@\n         }\n     }\n     \n     public void setConstantPool(final ConstantPool constantPool) {\n         this.constantPool = constantPool;\n     }\n     \n-    public void setIndex(final int t) {\n-        this.index = t;\n+    public void setIndex(final int index) {\n+        this.index = index;\n     }\n     \n-    public void setType(final byte t) {\n-        if (t < 0 || t > 8) {\n-            throw new IllegalArgumentException(\"Illegal type for StackMapType: \" + t);\n+    public void setType(final byte b) {\n+        if (b < 0 || b > 8) {\n+            throw new IllegalArgumentException(\"Illegal type for StackMapType: \" + b);\n         }\n-        this.type = t;\n+        this.type = b;\n     }\n     \n     @Override\n     public String toString() {\n         return \"(type=\" + Const.getItemName((int)this.type) + this.printIndex() + \")\";\n     }\n }\n"}]}
