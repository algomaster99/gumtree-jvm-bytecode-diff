{"diffoscope-json-version": 1, "source1": "first/Main.class", "source2": "second/Main.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,11 +1,10 @@\n \n package com.puppycrawl.tools.checkstyle;\n \n-import org.apache.commons.logging.LogFactory;\n import java.io.OutputStream;\n import java.nio.file.Path;\n import java.io.InputStream;\n import com.puppycrawl.tools.checkstyle.utils.ChainedPropertyUtil;\n import java.nio.file.Files;\n import java.nio.file.OpenOption;\n import com.puppycrawl.tools.checkstyle.api.AuditListener;\n@@ -14,93 +13,100 @@\n import com.puppycrawl.tools.checkstyle.api.Configuration;\n import java.util.logging.Handler;\n import java.util.logging.Filter;\n import java.util.logging.Level;\n import java.util.logging.ConsoleHandler;\n import java.util.logging.Logger;\n import com.puppycrawl.tools.checkstyle.utils.XpathUtil;\n+import java.util.Objects;\n import java.util.Iterator;\n import java.util.regex.Pattern;\n import java.util.Collection;\n import java.util.LinkedList;\n-import java.io.PrintStream;\n import java.io.File;\n import java.util.function.Consumer;\n-import java.util.Objects;\n import java.util.List;\n import java.io.IOException;\n import com.puppycrawl.tools.checkstyle.api.CheckstyleException;\n import picocli.CommandLine;\n+import org.apache.commons.logging.LogFactory;\n import org.apache.commons.logging.Log;\n \n public final class Main\n {\n     public static final String ERROR_COUNTER = \"Main.errorCounter\";\n     public static final String LOAD_PROPERTIES_EXCEPTION = \"Main.loadProperties\";\n     public static final String CREATE_LISTENER_EXCEPTION = \"Main.createListener\";\n     private static final Log LOG;\n     private static final int EXIT_WITH_INVALID_USER_INPUT_CODE = -1;\n     private static final int EXIT_WITH_CHECKSTYLE_EXCEPTION_CODE = -2;\n     \n+    static {\n+        LOG = LogFactory.getLog((Class)Main.class);\n+    }\n+    \n     private Main() {\n     }\n     \n     public static void main(final String... args) throws IOException {\n         final Main.CliOptions cliOptions = new Main.CliOptions();\n         final CommandLine commandLine = new CommandLine((Object)cliOptions);\n         commandLine.setUsageHelpWidth(100);\n         commandLine.setCaseInsensitiveEnumValuesAllowed(true);\n         int exitStatus = 0;\n         int errorCounter = 0;\n-        try {\n-            final CommandLine.ParseResult parseResult = commandLine.parseArgs(args);\n-            if (parseResult.isVersionHelpRequested()) {\n-                System.out.println(getVersionString());\n-            }\n-            else if (parseResult.isUsageHelpRequested()) {\n-                commandLine.usage(System.out);\n-            }\n-            else {\n+        Label_0277: {\n+            try {\n+                final CommandLine.ParseResult parseResult = commandLine.parseArgs(args);\n+                if (parseResult.isVersionHelpRequested()) {\n+                    System.out.println(getVersionString());\n+                    break Label_0277;\n+                }\n+                if (parseResult.isUsageHelpRequested()) {\n+                    commandLine.usage(System.out);\n+                    break Label_0277;\n+                }\n                 exitStatus = (errorCounter = execute(parseResult, cliOptions));\n             }\n-        }\n-        catch (final CommandLine.ParameterException ex) {\n-            exitStatus = -1;\n-            System.err.println(ex.getMessage());\n-            System.err.println(\"Usage: checkstyle [OPTIONS]... FILES...\");\n-            System.err.println(\"Try 'checkstyle --help' for more information.\");\n-        }\n-        catch (final CheckstyleException ex2) {\n-            exitStatus = -2;\n-            errorCounter = 1;\n-            ex2.printStackTrace();\n-        }\n-        finally {\n-            if (errorCounter > 0) {\n-                final LocalizedMessage errorCounterViolation = new LocalizedMessage(\"com.puppycrawl.tools.checkstyle.messages\", (Class)Main.class, \"Main.errorCounter\", new Object[] { String.valueOf(errorCounter) });\n-                System.err.println(errorCounterViolation.getMessage());\n+            catch (final CommandLine.ParameterException ex) {\n+                exitStatus = -1;\n+                System.err.println(ex.getMessage());\n+                System.err.println(\"Usage: checkstyle [OPTIONS]... FILES...\");\n+                System.err.println(\"Try 'checkstyle --help' for more information.\");\n+            }\n+            catch (final CheckstyleException ex2) {\n+                exitStatus = -2;\n+                errorCounter = 1;\n+                ex2.printStackTrace();\n+            }\n+            finally {\n+                if (errorCounter > 0) {\n+                    final LocalizedMessage errorCounterViolation = new LocalizedMessage(\"com.puppycrawl.tools.checkstyle.messages\", (Class)Main.class, \"Main.errorCounter\", new Object[] { String.valueOf(errorCounter) });\n+                    System.err.println(errorCounterViolation.getMessage());\n+                }\n             }\n         }\n+        if (errorCounter > 0) {\n+            final LocalizedMessage errorCounterViolation = new LocalizedMessage(\"com.puppycrawl.tools.checkstyle.messages\", (Class)Main.class, \"Main.errorCounter\", new Object[] { String.valueOf(errorCounter) });\n+            System.err.println(errorCounterViolation.getMessage());\n+        }\n         Runtime.getRuntime().exit(exitStatus);\n     }\n     \n     private static String getVersionString() {\n         return \"Checkstyle version: \" + Main.class.getPackage().getImplementationVersion();\n     }\n     \n     private static int execute(final CommandLine.ParseResult parseResult, final Main.CliOptions options) throws IOException, CheckstyleException {\n         final List<File> filesToProcess = getFilesToProcess(options);\n         final List<String> messages = options.validateCli(parseResult, (List)filesToProcess);\n         final boolean hasMessages = !messages.isEmpty();\n         int exitStatus;\n         if (hasMessages) {\n-            final List<String> list = messages;\n-            final PrintStream out = System.out;\n-            Objects.requireNonNull(out);\n-            list.forEach(out::println);\n+            messages.forEach(System.out::println);\n             exitStatus = -1;\n         }\n         else {\n             exitStatus = runCli(options, filesToProcess);\n         }\n         return exitStatus;\n     }\n@@ -116,15 +122,17 @@\n     \n     private static List<File> listFiles(final File node, final List<Pattern> patternsToExclude) {\n         final List<File> result = new LinkedList<File>();\n         if (node.canRead() && !isPathExcluded(node.getAbsolutePath(), patternsToExclude)) {\n             if (node.isDirectory()) {\n                 final File[] files = node.listFiles();\n                 if (files != null) {\n-                    for (final File element : files) {\n+                    File[] array;\n+                    for (int length = (array = files).length, i = 0; i < length; ++i) {\n+                        final File element = array[i];\n                         result.addAll(listFiles(element, patternsToExclude));\n                     }\n                 }\n             }\n             else if (node.isFile()) {\n                 result.add(node);\n             }\n@@ -182,15 +190,15 @@\n                 handler.setLevel(Level.FINEST);\n                 handler.setFilter((Filter)new Main.OnlyCheckstyleLoggersFilter());\n                 parentLogger.addHandler(handler);\n                 parentLogger.setLevel(Level.FINEST);\n             }\n             if (Main.LOG.isDebugEnabled()) {\n                 Main.LOG.debug((Object)\"Checkstyle debug logging enabled\");\n-                Main.LOG.debug(\"Running Checkstyle with version: \" + Main.class.getPackage().getImplementationVersion());\n+                Main.LOG.debug((Object)(\"Running Checkstyle with version: \" + Main.class.getPackage().getImplementationVersion()));\n             }\n             result = runCheckstyle(options, filesToProcess);\n         }\n         return result;\n     }\n     \n     private static int runCheckstyle(final Main.CliOptions options, final List<File> filesToProcess) throws CheckstyleException, IOException {\n@@ -231,21 +239,45 @@\n             rootModule.configure(config);\n             rootModule.addListener(listener);\n             errorCounter = rootModule.process((List)filesToProcess);\n         }\n         finally {\n             rootModule.destroy();\n         }\n+        rootModule.destroy();\n         return errorCounter;\n     }\n     \n     private static Properties loadProperties(final File file) throws CheckstyleException {\n         final Properties properties = new Properties();\n-        try (final InputStream stream = Files.newInputStream(file.toPath(), new OpenOption[0])) {\n-            properties.load(stream);\n+        try {\n+            Throwable t = null;\n+            try {\n+                final InputStream stream = Files.newInputStream(file.toPath(), new OpenOption[0]);\n+                try {\n+                    properties.load(stream);\n+                }\n+                finally {\n+                    if (stream != null) {\n+                        stream.close();\n+                    }\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n+                }\n+            }\n         }\n         catch (final IOException ex) {\n             final LocalizedMessage loadPropertiesExceptionMessage = new LocalizedMessage(\"com.puppycrawl.tools.checkstyle.messages\", (Class)Main.class, \"Main.loadProperties\", new Object[] { file.getAbsolutePath() });\n             throw new CheckstyleException(loadPropertiesExceptionMessage.getMessage(), (Throwable)ex);\n         }\n         return ChainedPropertyUtil.getResolvedProperties(properties);\n     }\n@@ -253,17 +285,18 @@\n     private static RootModule getRootModule(final String name, final ClassLoader moduleClassLoader) throws CheckstyleException {\n         final ModuleFactory factory = (ModuleFactory)new PackageObjectFactory(Checker.class.getPackage().getName(), moduleClassLoader);\n         return (RootModule)factory.createModule(name);\n     }\n     \n     private static Configuration getTreeWalkerConfig(final Configuration config) {\n         Configuration result = null;\n-        final Configuration[] children2;\n-        final Configuration[] children = children2 = config.getChildren();\n-        for (final Configuration child : children2) {\n+        final Configuration[] children = config.getChildren();\n+        Configuration[] array;\n+        for (int length = (array = children).length, i = 0; i < length; ++i) {\n+            final Configuration child = array[i];\n             if (\"TreeWalker\".equals(child.getName())) {\n                 result = child;\n                 break;\n             }\n         }\n         return result;\n     }\n@@ -291,12 +324,8 @@\n             result = AbstractAutomaticBean.OutputStreamOptions.NONE;\n         }\n         else {\n             result = AbstractAutomaticBean.OutputStreamOptions.CLOSE;\n         }\n         return result;\n     }\n-    \n-    static {\n-        LOG = LogFactory.getLog((Class)Main.class);\n-    }\n }\n"}]}
