{"diffoscope-json-version": 1, "source1": "first/SMTPSClient.class", "source2": "second/SMTPSClient.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -32,41 +32,41 @@\n     private HostnameVerifier hostnameVerifier;\n     private boolean tlsEndpointChecking;\n     \n     public SMTPSClient() {\n         this(\"TLS\", false);\n     }\n     \n-    public SMTPSClient(final boolean implicit) {\n-        this(\"TLS\", implicit);\n+    public SMTPSClient(final boolean b) {\n+        this(\"TLS\", b);\n     }\n     \n-    public SMTPSClient(final String proto) {\n-        this(proto, false);\n+    public SMTPSClient(final String s) {\n+        this(s, false);\n     }\n     \n-    public SMTPSClient(final String proto, final boolean implicit) {\n-        this.protocol = proto;\n-        this.isImplicit = implicit;\n+    public SMTPSClient(final String protocol, final boolean isImplicit) {\n+        this.protocol = protocol;\n+        this.isImplicit = isImplicit;\n     }\n     \n-    public SMTPSClient(final String proto, final boolean implicit, final String encoding) {\n-        super(encoding);\n-        this.protocol = proto;\n-        this.isImplicit = implicit;\n+    public SMTPSClient(final String protocol, final boolean isImplicit, final String s) {\n+        super(s);\n+        this.protocol = protocol;\n+        this.isImplicit = isImplicit;\n     }\n     \n-    public SMTPSClient(final boolean implicit, final SSLContext ctx) {\n-        this.isImplicit = implicit;\n-        this.context = ctx;\n+    public SMTPSClient(final boolean isImplicit, final SSLContext context) {\n+        this.isImplicit = isImplicit;\n+        this.context = context;\n         this.protocol = \"TLS\";\n     }\n     \n-    public SMTPSClient(final SSLContext context) {\n-        this(false, context);\n+    public SMTPSClient(final SSLContext sslContext) {\n+        this(false, sslContext);\n     }\n     \n     protected void _connectAction_() throws IOException {\n         if (this.isImplicit) {\n             this.applySocketAttributes();\n             this.performSSLNegotiation();\n         }\n@@ -77,61 +77,60 @@\n         if (this.context == null) {\n             this.context = SSLContextUtils.createSSLContext(this.protocol, this.getKeyManager(), this.getTrustManager());\n         }\n     }\n     \n     private void performSSLNegotiation() throws IOException {\n         this.initSSLContext();\n-        final SSLSocketFactory ssf = this.context.getSocketFactory();\n-        final String host = (this._hostname_ != null) ? this._hostname_ : this.getRemoteAddress().getHostAddress();\n-        final int port = this.getRemotePort();\n-        final SSLSocket socket = (SSLSocket)ssf.createSocket(this._socket_, host, port, true);\n-        socket.setEnableSessionCreation(true);\n-        socket.setUseClientMode(true);\n+        final SSLSocketFactory socketFactory = this.context.getSocketFactory();\n+        final String s = (this._hostname_ != null) ? this._hostname_ : this.getRemoteAddress().getHostAddress();\n+        final SSLSocket socket_ = (SSLSocket)socketFactory.createSocket(this._socket_, s, this.getRemotePort(), true);\n+        socket_.setEnableSessionCreation(true);\n+        socket_.setUseClientMode(true);\n         if (this.tlsEndpointChecking) {\n-            SSLSocketUtils.enableEndpointNameVerification(socket);\n+            SSLSocketUtils.enableEndpointNameVerification(socket_);\n         }\n         if (this.protocols != null) {\n-            socket.setEnabledProtocols(this.protocols);\n+            socket_.setEnabledProtocols(this.protocols);\n         }\n         if (this.suites != null) {\n-            socket.setEnabledCipherSuites(this.suites);\n+            socket_.setEnabledCipherSuites(this.suites);\n         }\n-        socket.startHandshake();\n-        this._socket_ = socket;\n-        this._input_ = socket.getInputStream();\n-        this._output_ = socket.getOutputStream();\n+        socket_.startHandshake();\n+        this._socket_ = socket_;\n+        this._input_ = socket_.getInputStream();\n+        this._output_ = socket_.getOutputStream();\n         this.reader = (BufferedReader)new CRLFLineReader((Reader)new InputStreamReader(this._input_, this.encoding));\n         this.writer = new BufferedWriter(new OutputStreamWriter(this._output_, this.encoding));\n-        if (this.hostnameVerifier != null && !this.hostnameVerifier.verify(host, socket.getSession())) {\n+        if (this.hostnameVerifier != null && !this.hostnameVerifier.verify(s, socket_.getSession())) {\n             throw new SSLHandshakeException(\"Hostname doesn't match certificate\");\n         }\n     }\n     \n     public KeyManager getKeyManager() {\n         return this.keyManager;\n     }\n     \n-    public void setKeyManager(final KeyManager newKeyManager) {\n-        this.keyManager = newKeyManager;\n+    public void setKeyManager(final KeyManager keyManager) {\n+        this.keyManager = keyManager;\n     }\n     \n-    public void setEnabledCipherSuites(final String[] cipherSuites) {\n-        this.suites = cipherSuites.clone();\n+    public void setEnabledCipherSuites(final String[] array) {\n+        this.suites = array.clone();\n     }\n     \n     public String[] getEnabledCipherSuites() {\n         if (this._socket_ instanceof SSLSocket) {\n             return ((SSLSocket)this._socket_).getEnabledCipherSuites();\n         }\n         return null;\n     }\n     \n-    public void setEnabledProtocols(final String[] protocolVersions) {\n-        this.protocols = protocolVersions.clone();\n+    public void setEnabledProtocols(final String[] array) {\n+        this.protocols = array.clone();\n     }\n     \n     public String[] getEnabledProtocols() {\n         if (this._socket_ instanceof SSLSocket) {\n             return ((SSLSocket)this._socket_).getEnabledProtocols();\n         }\n         return null;\n@@ -145,27 +144,27 @@\n         return true;\n     }\n     \n     public TrustManager getTrustManager() {\n         return this.trustManager;\n     }\n     \n-    public void setTrustManager(final TrustManager newTrustManager) {\n-        this.trustManager = newTrustManager;\n+    public void setTrustManager(final TrustManager trustManager) {\n+        this.trustManager = trustManager;\n     }\n     \n     public HostnameVerifier getHostnameVerifier() {\n         return this.hostnameVerifier;\n     }\n     \n-    public void setHostnameVerifier(final HostnameVerifier newHostnameVerifier) {\n-        this.hostnameVerifier = newHostnameVerifier;\n+    public void setHostnameVerifier(final HostnameVerifier hostnameVerifier) {\n+        this.hostnameVerifier = hostnameVerifier;\n     }\n     \n     public boolean isEndpointCheckingEnabled() {\n         return this.tlsEndpointChecking;\n     }\n     \n-    public void setEndpointCheckingEnabled(final boolean enable) {\n-        this.tlsEndpointChecking = enable;\n+    public void setEndpointCheckingEnabled(final boolean tlsEndpointChecking) {\n+        this.tlsEndpointChecking = tlsEndpointChecking;\n     }\n }\n"}]}
