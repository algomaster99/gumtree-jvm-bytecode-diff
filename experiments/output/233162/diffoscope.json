{"diffoscope-json-version": 1, "source1": "first/PatternSubtreeConfigurationWrapper.class", "source2": "second/PatternSubtreeConfigurationWrapper.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -30,176 +30,176 @@\n     public PatternSubtreeConfigurationWrapper(final HierarchicalConfiguration<ImmutableNode> config, final String path) {\n         this.config = config;\n         this.path = path;\n         this.trailing = path.endsWith(\"/\");\n         this.init = true;\n     }\n     \n-    protected void addPropertyInternal(final String key, final Object value) {\n-        this.config.addProperty(this.makePath(key), value);\n+    protected void addPropertyInternal(final String s, final Object o) {\n+        this.config.addProperty(this.makePath(s), o);\n     }\n     \n     protected void clearInternal() {\n         this.getConfig().clear();\n     }\n     \n-    protected void clearPropertyDirect(final String key) {\n-        this.config.clearProperty(this.makePath(key));\n+    protected void clearPropertyDirect(final String s) {\n+        this.config.clearProperty(this.makePath(s));\n     }\n     \n-    protected boolean containsKeyInternal(final String key) {\n-        return this.config.containsKey(this.makePath(key));\n+    protected boolean containsKeyInternal(final String s) {\n+        return this.config.containsKey(this.makePath(s));\n     }\n     \n-    public BigDecimal getBigDecimal(final String key, final BigDecimal defaultValue) {\n-        return this.config.getBigDecimal(this.makePath(key), defaultValue);\n+    public BigDecimal getBigDecimal(final String s, final BigDecimal bigDecimal) {\n+        return this.config.getBigDecimal(this.makePath(s), bigDecimal);\n     }\n     \n-    public BigDecimal getBigDecimal(final String key) {\n-        return this.config.getBigDecimal(this.makePath(key));\n+    public BigDecimal getBigDecimal(final String s) {\n+        return this.config.getBigDecimal(this.makePath(s));\n     }\n     \n-    public BigInteger getBigInteger(final String key, final BigInteger defaultValue) {\n-        return this.config.getBigInteger(this.makePath(key), defaultValue);\n+    public BigInteger getBigInteger(final String s, final BigInteger bigInteger) {\n+        return this.config.getBigInteger(this.makePath(s), bigInteger);\n     }\n     \n-    public BigInteger getBigInteger(final String key) {\n-        return this.config.getBigInteger(this.makePath(key));\n+    public BigInteger getBigInteger(final String s) {\n+        return this.config.getBigInteger(this.makePath(s));\n     }\n     \n-    public boolean getBoolean(final String key, final boolean defaultValue) {\n-        return this.config.getBoolean(this.makePath(key), defaultValue);\n+    public boolean getBoolean(final String s, final boolean b) {\n+        return this.config.getBoolean(this.makePath(s), b);\n     }\n     \n-    public Boolean getBoolean(final String key, final Boolean defaultValue) {\n-        return this.config.getBoolean(this.makePath(key), defaultValue);\n+    public Boolean getBoolean(final String s, final Boolean b) {\n+        return this.config.getBoolean(this.makePath(s), b);\n     }\n     \n-    public boolean getBoolean(final String key) {\n-        return this.config.getBoolean(this.makePath(key));\n+    public boolean getBoolean(final String s) {\n+        return this.config.getBoolean(this.makePath(s));\n     }\n     \n-    public byte getByte(final String key, final byte defaultValue) {\n-        return this.config.getByte(this.makePath(key), defaultValue);\n+    public byte getByte(final String s, final byte b) {\n+        return this.config.getByte(this.makePath(s), b);\n     }\n     \n-    public Byte getByte(final String key, final Byte defaultValue) {\n-        return this.config.getByte(this.makePath(key), defaultValue);\n+    public Byte getByte(final String s, final Byte b) {\n+        return this.config.getByte(this.makePath(s), b);\n     }\n     \n-    public byte getByte(final String key) {\n-        return this.config.getByte(this.makePath(key));\n+    public byte getByte(final String s) {\n+        return this.config.getByte(this.makePath(s));\n     }\n     \n-    public double getDouble(final String key, final double defaultValue) {\n-        return this.config.getDouble(this.makePath(key), defaultValue);\n+    public double getDouble(final String s, final double n) {\n+        return this.config.getDouble(this.makePath(s), n);\n     }\n     \n-    public Double getDouble(final String key, final Double defaultValue) {\n-        return this.config.getDouble(this.makePath(key), defaultValue);\n+    public Double getDouble(final String s, final Double n) {\n+        return this.config.getDouble(this.makePath(s), n);\n     }\n     \n-    public double getDouble(final String key) {\n-        return this.config.getDouble(this.makePath(key));\n+    public double getDouble(final String s) {\n+        return this.config.getDouble(this.makePath(s));\n     }\n     \n-    public float getFloat(final String key, final float defaultValue) {\n-        return this.config.getFloat(this.makePath(key), defaultValue);\n+    public float getFloat(final String s, final float n) {\n+        return this.config.getFloat(this.makePath(s), n);\n     }\n     \n-    public Float getFloat(final String key, final Float defaultValue) {\n-        return this.config.getFloat(this.makePath(key), defaultValue);\n+    public Float getFloat(final String s, final Float n) {\n+        return this.config.getFloat(this.makePath(s), n);\n     }\n     \n-    public float getFloat(final String key) {\n-        return this.config.getFloat(this.makePath(key));\n+    public float getFloat(final String s) {\n+        return this.config.getFloat(this.makePath(s));\n     }\n     \n-    public int getInt(final String key, final int defaultValue) {\n-        return this.config.getInt(this.makePath(key), defaultValue);\n+    public int getInt(final String s, final int n) {\n+        return this.config.getInt(this.makePath(s), n);\n     }\n     \n-    public int getInt(final String key) {\n-        return this.config.getInt(this.makePath(key));\n+    public int getInt(final String s) {\n+        return this.config.getInt(this.makePath(s));\n     }\n     \n-    public Integer getInteger(final String key, final Integer defaultValue) {\n-        return this.config.getInteger(this.makePath(key), defaultValue);\n+    public Integer getInteger(final String s, final Integer n) {\n+        return this.config.getInteger(this.makePath(s), n);\n     }\n     \n     protected Iterator<String> getKeysInternal() {\n         return this.config.getKeys(this.makePath());\n     }\n     \n-    protected Iterator<String> getKeysInternal(final String prefix) {\n-        return this.config.getKeys(this.makePath(prefix));\n+    protected Iterator<String> getKeysInternal(final String s) {\n+        return this.config.getKeys(this.makePath(s));\n     }\n     \n-    public List<Object> getList(final String key, final List<?> defaultValue) {\n-        return this.config.getList(this.makePath(key), (List)defaultValue);\n+    public List<Object> getList(final String s, final List<?> list) {\n+        return this.config.getList(this.makePath(s), (List)list);\n     }\n     \n-    public List<Object> getList(final String key) {\n-        return this.config.getList(this.makePath(key));\n+    public List<Object> getList(final String s) {\n+        return this.config.getList(this.makePath(s));\n     }\n     \n-    public long getLong(final String key, final long defaultValue) {\n-        return this.config.getLong(this.makePath(key), defaultValue);\n+    public long getLong(final String s, final long n) {\n+        return this.config.getLong(this.makePath(s), n);\n     }\n     \n-    public Long getLong(final String key, final Long defaultValue) {\n-        return this.config.getLong(this.makePath(key), defaultValue);\n+    public Long getLong(final String s, final Long n) {\n+        return this.config.getLong(this.makePath(s), n);\n     }\n     \n-    public long getLong(final String key) {\n-        return this.config.getLong(this.makePath(key));\n+    public long getLong(final String s) {\n+        return this.config.getLong(this.makePath(s));\n     }\n     \n-    public Properties getProperties(final String key) {\n-        return this.config.getProperties(this.makePath(key));\n+    public Properties getProperties(final String s) {\n+        return this.config.getProperties(this.makePath(s));\n     }\n     \n-    protected Object getPropertyInternal(final String key) {\n-        return this.config.getProperty(this.makePath(key));\n+    protected Object getPropertyInternal(final String s) {\n+        return this.config.getProperty(this.makePath(s));\n     }\n     \n-    public short getShort(final String key, final short defaultValue) {\n-        return this.config.getShort(this.makePath(key), defaultValue);\n+    public short getShort(final String s, final short n) {\n+        return this.config.getShort(this.makePath(s), n);\n     }\n     \n-    public Short getShort(final String key, final Short defaultValue) {\n-        return this.config.getShort(this.makePath(key), defaultValue);\n+    public Short getShort(final String s, final Short n) {\n+        return this.config.getShort(this.makePath(s), n);\n     }\n     \n-    public short getShort(final String key) {\n-        return this.config.getShort(this.makePath(key));\n+    public short getShort(final String s) {\n+        return this.config.getShort(this.makePath(s));\n     }\n     \n-    public String getString(final String key, final String defaultValue) {\n-        return this.config.getString(this.makePath(key), defaultValue);\n+    public String getString(final String s, final String s2) {\n+        return this.config.getString(this.makePath(s), s2);\n     }\n     \n-    public String getString(final String key) {\n-        return this.config.getString(this.makePath(key));\n+    public String getString(final String s) {\n+        return this.config.getString(this.makePath(s));\n     }\n     \n-    public String[] getStringArray(final String key) {\n-        return this.config.getStringArray(this.makePath(key));\n+    public String[] getStringArray(final String s) {\n+        return this.config.getStringArray(this.makePath(s));\n     }\n     \n     protected boolean isEmptyInternal() {\n         return this.getConfig().isEmpty();\n     }\n     \n-    protected void setPropertyInternal(final String key, final Object value) {\n-        this.getConfig().setProperty(key, value);\n+    protected void setPropertyInternal(final String s, final Object o) {\n+        this.getConfig().setProperty(s, o);\n     }\n     \n-    public Configuration subset(final String prefix) {\n-        return this.getConfig().subset(prefix);\n+    public Configuration subset(final String s) {\n+        return this.getConfig().subset(s);\n     }\n     \n     public ExpressionEngine getExpressionEngine() {\n         return this.config.getExpressionEngine();\n     }\n     \n     public void setExpressionEngine(final ExpressionEngine expressionEngine) {\n@@ -207,49 +207,49 @@\n             this.config.setExpressionEngine(expressionEngine);\n         }\n         else {\n             super.setExpressionEngine(expressionEngine);\n         }\n     }\n     \n-    protected void addNodesInternal(final String key, final Collection<? extends ImmutableNode> nodes) {\n-        this.getConfig().addNodes(key, (Collection)nodes);\n+    protected void addNodesInternal(final String s, final Collection<? extends ImmutableNode> collection) {\n+        this.getConfig().addNodes(s, (Collection)collection);\n     }\n     \n-    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String key, final boolean supportUpdates) {\n-        return (HierarchicalConfiguration<ImmutableNode>)this.config.configurationAt(this.makePath(key), supportUpdates);\n+    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String s, final boolean b) {\n+        return (HierarchicalConfiguration<ImmutableNode>)this.config.configurationAt(this.makePath(s), b);\n     }\n     \n-    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String key) {\n-        return (HierarchicalConfiguration<ImmutableNode>)this.config.configurationAt(this.makePath(key));\n+    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String s) {\n+        return (HierarchicalConfiguration<ImmutableNode>)this.config.configurationAt(this.makePath(s));\n     }\n     \n-    public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(final String key) {\n-        return this.config.configurationsAt(this.makePath(key));\n+    public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(final String s) {\n+        return this.config.configurationsAt(this.makePath(s));\n     }\n     \n-    protected Object clearTreeInternal(final String key) {\n-        this.config.clearTree(this.makePath(key));\n+    protected Object clearTreeInternal(final String s) {\n+        this.config.clearTree(this.makePath(s));\n         return Collections.emptyList();\n     }\n     \n-    protected int getMaxIndexInternal(final String key) {\n-        return this.config.getMaxIndex(this.makePath(key));\n+    protected int getMaxIndexInternal(final String s) {\n+        return this.config.getMaxIndex(this.makePath(s));\n     }\n     \n     public Configuration interpolatedConfiguration() {\n         return this.getConfig().interpolatedConfiguration();\n     }\n     \n-    public <T extends Event> void addEventListener(final EventType<T> eventType, final EventListener<? super T> listener) {\n-        this.getConfig().addEventListener((EventType)eventType, (EventListener)listener);\n+    public <T extends Event> void addEventListener(final EventType<T> eventType, final EventListener<? super T> eventListener) {\n+        this.getConfig().addEventListener((EventType)eventType, (EventListener)eventListener);\n     }\n     \n-    public <T extends Event> boolean removeEventListener(final EventType<T> eventType, final EventListener<? super T> listener) {\n-        return this.getConfig().removeEventListener((EventType)eventType, (EventListener)listener);\n+    public <T extends Event> boolean removeEventListener(final EventType<T> eventType, final EventListener<? super T> eventListener) {\n+        return this.getConfig().removeEventListener((EventType)eventType, (EventListener)eventListener);\n     }\n     \n     public <T extends Event> Collection<EventListener<? super T>> getEventListeners(final EventType<T> eventType) {\n         return this.getConfig().getEventListeners((EventType)eventType);\n     }\n     \n     public void clearEventListeners() {\n@@ -269,34 +269,33 @@\n     }\n     \n     private BaseHierarchicalConfiguration getConfig() {\n         return (BaseHierarchicalConfiguration)this.config.configurationAt(this.makePath());\n     }\n     \n     private String makePath() {\n-        final String pathPattern = this.trailing ? this.path.substring(0, this.path.length() - 1) : this.path;\n-        return this.substitute(pathPattern);\n+        return this.substitute(this.trailing ? this.path.substring(0, this.path.length() - 1) : this.path);\n     }\n     \n-    private String makePath(final String item) {\n-        String pathPattern;\n-        if ((item.isEmpty() || item.startsWith(\"/\")) && this.trailing) {\n-            pathPattern = this.path.substring(0, this.path.length() - 1);\n+    private String makePath(final String str) {\n+        String s;\n+        if ((str.isEmpty() || str.startsWith(\"/\")) && this.trailing) {\n+            s = this.path.substring(0, this.path.length() - 1);\n         }\n-        else if (!item.startsWith(\"/\") || !this.trailing) {\n-            pathPattern = this.path + \"/\";\n+        else if (!str.startsWith(\"/\") || !this.trailing) {\n+            s = this.path + \"/\";\n         }\n         else {\n-            pathPattern = this.path;\n+            s = this.path;\n         }\n-        return this.substitute(pathPattern) + item;\n+        return this.substitute(s) + str;\n     }\n     \n-    private String substitute(final String pattern) {\n-        return Objects.toString(this.getInterpolator().interpolate(pattern), null);\n+    private String substitute(final String s) {\n+        return Objects.toString(this.getInterpolator().interpolate(s), null);\n     }\n     \n     private FileBased fetchFileBased() throws ConfigurationException {\n         if (!(this.config instanceof FileBased)) {\n             throw new ConfigurationException(\"Wrapped configuration does not implement FileBased! No I/O operations are supported.\");\n         }\n         return (FileBased)this.config;\n"}]}
