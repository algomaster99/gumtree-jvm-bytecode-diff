{"diffoscope-json-version": 1, "source1": "first/NumberInput.class", "source2": "second/NumberInput.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,14 +10,19 @@\n {\n     @Deprecated\n     public static final String NASTY_SMALL_DOUBLE = \"2.2250738585072012e-308\";\n     static final long L_BILLION = 1000000000L;\n     static final String MIN_LONG_STR_NO_SIGN;\n     static final String MAX_LONG_STR;\n     \n+    static {\n+        MIN_LONG_STR_NO_SIGN = String.valueOf(Long.MIN_VALUE).substring(1);\n+        MAX_LONG_STR = String.valueOf(Long.MAX_VALUE);\n+    }\n+    \n     public static int parseInt(final char[] ch, int off, int len) {\n         if (len > 0 && ch[off] == '+') {\n             ++off;\n             --len;\n         }\n         int num = ch[off + len - 1] - '0';\n         switch (len) {\n@@ -170,18 +175,18 @@\n             len = s.length();\n         }\n         else if (sign == '-') {\n             i = 1;\n         }\n         while (i < len) {\n             final char c = s.charAt(i);\n-            Label_0098: {\n+            Label_0096: {\n                 if (c <= '9') {\n                     if (c >= '0') {\n-                        break Label_0098;\n+                        break Label_0096;\n                     }\n                 }\n                 try {\n                     return (int)parseDouble(s, true);\n                 }\n                 catch (final NumberFormatException e) {\n                     return def;\n@@ -213,18 +218,18 @@\n             len = s.length();\n         }\n         else if (sign == '-') {\n             i = 1;\n         }\n         while (i < len) {\n             final char c = s.charAt(i);\n-            Label_0102: {\n+            Label_0099: {\n                 if (c <= '9') {\n                     if (c >= '0') {\n-                        break Label_0102;\n+                        break Label_0099;\n                     }\n                 }\n                 try {\n                     return (long)parseDouble(s, true);\n                 }\n                 catch (final NumberFormatException e) {\n                     return def;\n@@ -314,13 +319,8 @@\n     \n     public static BigInteger parseBigIntegerWithRadix(final String s, final int radix, final boolean useFastParser) throws NumberFormatException {\n         if (useFastParser) {\n             return BigIntegerParser.parseWithFastParser(s, radix);\n         }\n         return new BigInteger(s, radix);\n     }\n-    \n-    static {\n-        MIN_LONG_STR_NO_SIGN = String.valueOf(Long.MIN_VALUE).substring(1);\n-        MAX_LONG_STR = String.valueOf(Long.MAX_VALUE);\n-    }\n }\n"}]}
