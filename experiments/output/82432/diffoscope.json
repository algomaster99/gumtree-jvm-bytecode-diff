{"diffoscope-json-version": 1, "source1": "first/PackingUtils.class", "source2": "second/PackingUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,12 +1,10 @@\n \n package org.apache.commons.compress.harmony.pack200;\n \n-import java.util.logging.Logger;\n-import java.util.logging.LogManager;\n import java.util.Iterator;\n import java.util.logging.Level;\n import java.io.ByteArrayOutputStream;\n import java.io.BufferedInputStream;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.jar.Manifest;\n@@ -19,83 +17,156 @@\n import java.io.OutputStream;\n import java.util.jar.JarFile;\n import java.io.IOException;\n import java.util.logging.Handler;\n import java.util.logging.Formatter;\n import java.util.logging.SimpleFormatter;\n import java.util.logging.FileHandler;\n+import java.util.logging.Logger;\n+import java.util.logging.LogManager;\n \n public class PackingUtils\n {\n     private static PackingUtils.PackingLogger packingLogger;\n     \n+    static {\n+        PackingUtils.packingLogger = new PackingUtils.PackingLogger(\"org.harmony.apache.pack200\", (String)null);\n+        LogManager.getLogManager().addLogger((Logger)PackingUtils.packingLogger);\n+    }\n+    \n     public static void config(final PackingOptions options) throws IOException {\n         final String logFileName = options.getLogFile();\n         if (logFileName != null) {\n             final FileHandler fileHandler = new FileHandler(logFileName, false);\n             fileHandler.setFormatter(new SimpleFormatter());\n             PackingUtils.packingLogger.addHandler((Handler)fileHandler);\n             PackingUtils.packingLogger.setUseParentHandlers(false);\n         }\n         PackingUtils.packingLogger.setVerbose(options.isVerbose());\n     }\n     \n     public static void copyThroughJar(final JarFile jarFile, final OutputStream outputStream) throws IOException {\n-        try (final JarOutputStream jarOutputStream = new JarOutputStream(outputStream)) {\n-            jarOutputStream.setComment(\"PACK200\");\n-            final byte[] bytes = new byte[16384];\n-            final Enumeration<JarEntry> entries = jarFile.entries();\n-            while (entries.hasMoreElements()) {\n-                final JarEntry jarEntry = (JarEntry)entries.nextElement();\n-                jarOutputStream.putNextEntry(jarEntry);\n-                try (final InputStream inputStream = jarFile.getInputStream(jarEntry)) {\n-                    int bytesRead;\n-                    while ((bytesRead = inputStream.read(bytes)) != -1) {\n-                        jarOutputStream.write(bytes, 0, bytesRead);\n-                    }\n-                    jarOutputStream.closeEntry();\n-                    log(\"Packed \" + jarEntry.getName());\n-                    if (inputStream == null) {\n-                        continue;\n+        Throwable t = null;\n+        try {\n+            final JarOutputStream jarOutputStream = new JarOutputStream(outputStream);\n+            try {\n+                jarOutputStream.setComment(\"PACK200\");\n+                final byte[] bytes = new byte[16384];\n+                final Enumeration<JarEntry> entries = jarFile.entries();\n+                while (entries.hasMoreElements()) {\n+                    final JarEntry jarEntry = (JarEntry)entries.nextElement();\n+                    jarOutputStream.putNextEntry(jarEntry);\n+                    try {\n+                        final InputStream inputStream = jarFile.getInputStream(jarEntry);\n+                        try {\n+                            int bytesRead;\n+                            while ((bytesRead = inputStream.read(bytes)) != -1) {\n+                                jarOutputStream.write(bytes, 0, bytesRead);\n+                            }\n+                            jarOutputStream.closeEntry();\n+                            log(\"Packed \" + jarEntry.getName());\n+                        }\n+                        finally {\n+                            if (inputStream != null) {\n+                                inputStream.close();\n+                            }\n+                        }\n                     }\n+                    finally {}\n+                }\n+                jarFile.close();\n+            }\n+            finally {\n+                if (jarOutputStream != null) {\n+                    jarOutputStream.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n                 }\n             }\n-            jarFile.close();\n         }\n     }\n     \n     public static void copyThroughJar(final JarInputStream jarInputStream, final OutputStream outputStream) throws IOException {\n         final Manifest manifest = jarInputStream.getManifest();\n-        try (final JarOutputStream jarOutputStream = new JarOutputStream(outputStream, manifest)) {\n-            jarOutputStream.setComment(\"PACK200\");\n-            log(\"Packed META-INF/MANIFEST.MF\");\n-            final byte[] bytes = new byte[16384];\n-            JarEntry jarEntry;\n-            while ((jarEntry = jarInputStream.getNextJarEntry()) != null) {\n-                jarOutputStream.putNextEntry(jarEntry);\n-                int bytesRead;\n-                while ((bytesRead = jarInputStream.read(bytes)) != -1) {\n-                    jarOutputStream.write(bytes, 0, bytesRead);\n+        Throwable t = null;\n+        try {\n+            final JarOutputStream jarOutputStream = new JarOutputStream(outputStream, manifest);\n+            try {\n+                jarOutputStream.setComment(\"PACK200\");\n+                log(\"Packed META-INF/MANIFEST.MF\");\n+                final byte[] bytes = new byte[16384];\n+                JarEntry jarEntry;\n+                while ((jarEntry = jarInputStream.getNextJarEntry()) != null) {\n+                    jarOutputStream.putNextEntry(jarEntry);\n+                    int bytesRead;\n+                    while ((bytesRead = jarInputStream.read(bytes)) != -1) {\n+                        jarOutputStream.write(bytes, 0, bytesRead);\n+                    }\n+                    log(\"Packed \" + jarEntry.getName());\n+                }\n+                jarInputStream.close();\n+            }\n+            finally {\n+                if (jarOutputStream != null) {\n+                    jarOutputStream.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n                 }\n-                log(\"Packed \" + jarEntry.getName());\n             }\n-            jarInputStream.close();\n         }\n     }\n     \n     public static List<Archive.PackingFile> getPackingFileListFromJar(final JarFile jarFile, final boolean keepFileOrder) throws IOException {\n         final List<Archive.PackingFile> packingFileList = new ArrayList<Archive.PackingFile>();\n         final Enumeration<JarEntry> jarEntries = jarFile.entries();\n         while (jarEntries.hasMoreElements()) {\n             final JarEntry jarEntry = (JarEntry)jarEntries.nextElement();\n-            try (final InputStream inputStream = jarFile.getInputStream(jarEntry)) {\n-                final byte[] bytes = readJarEntry(jarEntry, new BufferedInputStream(inputStream));\n-                packingFileList.add(new Archive.PackingFile(bytes, jarEntry));\n-                if (inputStream == null) {\n-                    continue;\n+            Throwable t = null;\n+            try {\n+                final InputStream inputStream = jarFile.getInputStream(jarEntry);\n+                try {\n+                    final byte[] bytes = readJarEntry(jarEntry, new BufferedInputStream(inputStream));\n+                    packingFileList.add(new Archive.PackingFile(bytes, jarEntry));\n+                }\n+                finally {\n+                    if (inputStream != null) {\n+                        inputStream.close();\n+                    }\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n                 }\n             }\n         }\n         if (!keepFileOrder) {\n             reorderPackingFiles(packingFileList);\n         }\n         return packingFileList;\n@@ -160,13 +231,8 @@\n                 return 1;\n             }\n             else {\n                 return fileName0.compareTo(fileName2);\n             }\n         });\n     }\n-    \n-    static {\n-        PackingUtils.packingLogger = new PackingUtils.PackingLogger(\"org.harmony.apache.pack200\", (String)null);\n-        LogManager.getLogManager().addLogger((Logger)PackingUtils.packingLogger);\n-    }\n }\n"}]}
