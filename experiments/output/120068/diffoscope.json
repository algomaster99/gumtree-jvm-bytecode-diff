{"diffoscope-json-version": 1, "source1": "first/JavadocDetailNodeParser.class", "source2": "second/JavadocDetailNodeParser.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -159,17 +159,18 @@\n         node.setChildren((DetailNode[])new JavadocNodeImpl[parseTree.getChildCount()]);\n         return node;\n     }\n     \n     private void adjustFirstLineToJavadocIndent(final DetailNode tree, final int javadocColumnNumber) {\n         if (tree.getLineNumber() == this.blockCommentLineNumber) {\n             ((JavadocNodeImpl)tree).setColumnNumber(tree.getColumnNumber() + javadocColumnNumber);\n-            final DetailNode[] children2;\n-            final DetailNode[] children = children2 = tree.getChildren();\n-            for (final DetailNode child : children2) {\n+            final DetailNode[] children = tree.getChildren();\n+            DetailNode[] array;\n+            for (int length = (array = children).length, i = 0; i < length; ++i) {\n+                final DetailNode child = array[i];\n                 this.adjustFirstLineToJavadocIndent(child, javadocColumnNumber);\n             }\n         }\n     }\n     \n     private static int getLine(final ParseTree tree) {\n         int line;\n@@ -198,15 +199,15 @@\n     private static ParseTree getNextSibling(final ParseTree node) {\n         ParseTree nextSibling = null;\n         if (node.getParent() != null) {\n             final ParseTree parent = node.getParent();\n             int index = 0;\n             while (true) {\n                 final ParseTree currentNode = parent.getChild(index);\n-                if (currentNode.equals((Object)node)) {\n+                if (currentNode.equals(node)) {\n                     break;\n                 }\n                 ++index;\n             }\n             nextSibling = parent.getChild(index + 1);\n         }\n         return nextSibling;\n@@ -275,15 +276,17 @@\n         }\n         return (Token)offendingToken;\n     }\n     \n     private static String convertUpperCamelToUpperUnderscore(final String text) {\n         final StringBuilder result = new StringBuilder(20);\n         boolean first = true;\n-        for (final char letter : text.toCharArray()) {\n+        char[] charArray;\n+        for (int length = (charArray = text.toCharArray()).length, i = 0; i < length; ++i) {\n+            final char letter = charArray[i];\n             if (!first && Character.isUpperCase(letter)) {\n                 result.append('_');\n             }\n             result.append(Character.toUpperCase(letter));\n             first = false;\n         }\n         return result.toString();\n"}]}
