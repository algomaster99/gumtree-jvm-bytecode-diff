{"diffoscope-json-version": 1, "source1": "first/FormatCache.class", "source2": "second/FormatCache.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -21,76 +21,75 @@\n         this.cInstanceCache = new ConcurrentHashMap<FormatCache.ArrayKey, F>(7);\n     }\n     \n     public F getInstance() {\n         return this.getDateTimeInstance(3, 3, TimeZone.getDefault(), Locale.getDefault());\n     }\n     \n-    public F getInstance(final String pattern, TimeZone timeZone, Locale locale) {\n-        Validate.notNull((Object)pattern, \"pattern\", new Object[0]);\n-        if (timeZone == null) {\n-            timeZone = TimeZone.getDefault();\n+    public F getInstance(final String s, TimeZone default1, Locale locale) {\n+        Validate.notNull((Object)s, \"pattern\", new Object[0]);\n+        if (default1 == null) {\n+            default1 = TimeZone.getDefault();\n         }\n         locale = LocaleUtils.toLocale(locale);\n-        final FormatCache.ArrayKey key = new FormatCache.ArrayKey(new Object[] { pattern, timeZone, locale });\n-        F format = (F)this.cInstanceCache.get(key);\n-        if (format == null) {\n-            format = this.createInstance(pattern, timeZone, locale);\n-            final F previousValue = (F)this.cInstanceCache.putIfAbsent(key, format);\n-            if (previousValue != null) {\n-                format = previousValue;\n+        final FormatCache.ArrayKey arrayKey = new FormatCache.ArrayKey(new Object[] { s, default1, locale });\n+        Format instance = (F)this.cInstanceCache.get(arrayKey);\n+        if (instance == null) {\n+            instance = this.createInstance(s, default1, locale);\n+            final Format format = (F)this.cInstanceCache.putIfAbsent(arrayKey, (F)instance);\n+            if (format != null) {\n+                instance = format;\n             }\n         }\n-        return format;\n+        return (F)instance;\n     }\n     \n     protected abstract F createInstance(final String p0, final TimeZone p1, final Locale p2);\n     \n-    private F getDateTimeInstance(final Integer dateStyle, final Integer timeStyle, final TimeZone timeZone, Locale locale) {\n+    private F getDateTimeInstance(final Integer n, final Integer n2, final TimeZone timeZone, Locale locale) {\n         locale = LocaleUtils.toLocale(locale);\n-        final String pattern = getPatternForStyle(dateStyle, timeStyle, locale);\n-        return this.getInstance(pattern, timeZone, locale);\n+        return this.getInstance(getPatternForStyle(n, n2, locale), timeZone, locale);\n     }\n     \n-    F getDateTimeInstance(final int dateStyle, final int timeStyle, final TimeZone timeZone, final Locale locale) {\n-        return this.getDateTimeInstance(Integer.valueOf(dateStyle), Integer.valueOf(timeStyle), timeZone, locale);\n+    F getDateTimeInstance(final int i, final int j, final TimeZone timeZone, final Locale locale) {\n+        return this.getDateTimeInstance(Integer.valueOf(i), Integer.valueOf(j), timeZone, locale);\n     }\n     \n-    F getDateInstance(final int dateStyle, final TimeZone timeZone, final Locale locale) {\n-        return this.getDateTimeInstance(Integer.valueOf(dateStyle), null, timeZone, locale);\n+    F getDateInstance(final int i, final TimeZone timeZone, final Locale locale) {\n+        return this.getDateTimeInstance(Integer.valueOf(i), null, timeZone, locale);\n     }\n     \n-    F getTimeInstance(final int timeStyle, final TimeZone timeZone, final Locale locale) {\n-        return this.getDateTimeInstance(null, Integer.valueOf(timeStyle), timeZone, locale);\n+    F getTimeInstance(final int i, final TimeZone timeZone, final Locale locale) {\n+        return this.getDateTimeInstance(null, Integer.valueOf(i), timeZone, locale);\n     }\n     \n-    static String getPatternForStyle(final Integer dateStyle, final Integer timeStyle, final Locale locale) {\n-        final Locale safeLocale = LocaleUtils.toLocale(locale);\n-        final FormatCache.ArrayKey key = new FormatCache.ArrayKey(new Object[] { dateStyle, timeStyle, safeLocale });\n-        String pattern = (String)FormatCache.cDateTimeInstanceCache.get(key);\n+    static String getPatternForStyle(final Integer n, final Integer n2, final Locale locale) {\n+        final Locale locale2 = LocaleUtils.toLocale(locale);\n+        final FormatCache.ArrayKey arrayKey = new FormatCache.ArrayKey(new Object[] { n, n2, locale2 });\n+        String pattern = (String)FormatCache.cDateTimeInstanceCache.get(arrayKey);\n         if (pattern == null) {\n             try {\n-                DateFormat formatter;\n-                if (dateStyle == null) {\n-                    formatter = DateFormat.getTimeInstance(timeStyle, safeLocale);\n+                DateFormat dateFormat;\n+                if (n == null) {\n+                    dateFormat = DateFormat.getTimeInstance(n2, locale2);\n                 }\n-                else if (timeStyle == null) {\n-                    formatter = DateFormat.getDateInstance(dateStyle, safeLocale);\n+                else if (n2 == null) {\n+                    dateFormat = DateFormat.getDateInstance(n, locale2);\n                 }\n                 else {\n-                    formatter = DateFormat.getDateTimeInstance(dateStyle, timeStyle, safeLocale);\n+                    dateFormat = DateFormat.getDateTimeInstance(n, n2, locale2);\n                 }\n-                pattern = ((SimpleDateFormat)formatter).toPattern();\n-                final String previous = (String)FormatCache.cDateTimeInstanceCache.putIfAbsent(key, pattern);\n-                if (previous != null) {\n-                    pattern = previous;\n+                pattern = ((SimpleDateFormat)dateFormat).toPattern();\n+                final String s = (String)FormatCache.cDateTimeInstanceCache.putIfAbsent(arrayKey, pattern);\n+                if (s != null) {\n+                    pattern = s;\n                 }\n             }\n             catch (final ClassCastException ex) {\n-                throw new IllegalArgumentException(\"No date time pattern for locale: \" + safeLocale);\n+                throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale2);\n             }\n         }\n         return pattern;\n     }\n     \n     static {\n         cDateTimeInstanceCache = new ConcurrentHashMap<FormatCache.ArrayKey, String>(7);\n"}]}
