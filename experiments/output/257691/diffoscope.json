{"diffoscope-json-version": 1, "source1": "first/BaseHierarchicalConfiguration$BuilderVisitor.class", "source2": "second/BaseHierarchicalConfiguration$BuilderVisitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,62 +1,60 @@\n \n package org.apache.commons.configuration2;\n \n-import java.util.List;\n import java.util.Iterator;\n import java.util.Collection;\n import java.util.LinkedList;\n import org.apache.commons.configuration2.tree.ReferenceNodeHandler;\n import org.apache.commons.configuration2.tree.NodeHandler;\n import org.apache.commons.configuration2.tree.ImmutableNode;\n import org.apache.commons.configuration2.tree.ConfigurationNodeVisitorAdapter;\n \n protected abstract static class BuilderVisitor extends ConfigurationNodeVisitorAdapter<ImmutableNode>\n {\n-    public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {\n-        final ReferenceNodeHandler refHandler = (ReferenceNodeHandler)handler;\n-        this.updateNode(node, refHandler);\n-        this.insertNewChildNodes(node, refHandler);\n+    public void visitBeforeChildren(final ImmutableNode immutableNode, final NodeHandler<ImmutableNode> nodeHandler) {\n+        final ReferenceNodeHandler referenceNodeHandler = (ReferenceNodeHandler)nodeHandler;\n+        this.updateNode(immutableNode, referenceNodeHandler);\n+        this.insertNewChildNodes(immutableNode, referenceNodeHandler);\n     }\n     \n     protected abstract void insert(final ImmutableNode p0, final ImmutableNode p1, final ImmutableNode p2, final ImmutableNode p3, final ReferenceNodeHandler p4);\n     \n     protected abstract void update(final ImmutableNode p0, final Object p1, final ReferenceNodeHandler p2);\n     \n-    private void updateNode(final ImmutableNode node, final ReferenceNodeHandler refHandler) {\n-        final Object reference = refHandler.getReference(node);\n+    private void updateNode(final ImmutableNode immutableNode, final ReferenceNodeHandler referenceNodeHandler) {\n+        final Object reference = referenceNodeHandler.getReference(immutableNode);\n         if (reference != null) {\n-            this.update(node, reference, refHandler);\n+            this.update(immutableNode, reference, referenceNodeHandler);\n         }\n     }\n     \n-    private void insertNewChildNodes(final ImmutableNode node, final ReferenceNodeHandler refHandler) {\n-        final Collection<ImmutableNode> subNodes = new LinkedList<ImmutableNode>(refHandler.getChildren((Object)node));\n-        final Iterator<ImmutableNode> children = subNodes.iterator();\n-        ImmutableNode nd = null;\n-        while (children.hasNext()) {\n-            ImmutableNode sibling1;\n+    private void insertNewChildNodes(final ImmutableNode immutableNode, final ReferenceNodeHandler referenceNodeHandler) {\n+        final Iterator iterator = new LinkedList(referenceNodeHandler.getChildren((Object)immutableNode)).iterator();\n+        ImmutableNode immutableNode2 = null;\n+        while (iterator.hasNext()) {\n+            ImmutableNode immutableNode3;\n             do {\n-                sibling1 = nd;\n-                nd = children.next();\n-            } while (refHandler.getReference(nd) != null && children.hasNext());\n-            if (refHandler.getReference(nd) == null) {\n-                final List<ImmutableNode> newNodes = new LinkedList<ImmutableNode>();\n-                newNodes.add(nd);\n-                while (children.hasNext()) {\n-                    nd = children.next();\n-                    if (refHandler.getReference(nd) != null) {\n+                immutableNode3 = immutableNode2;\n+                immutableNode2 = (ImmutableNode)iterator.next();\n+            } while (referenceNodeHandler.getReference(immutableNode2) != null && iterator.hasNext());\n+            if (referenceNodeHandler.getReference(immutableNode2) == null) {\n+                final LinkedList list = new LinkedList();\n+                list.add(immutableNode2);\n+                while (iterator.hasNext()) {\n+                    immutableNode2 = (ImmutableNode)iterator.next();\n+                    if (referenceNodeHandler.getReference(immutableNode2) != null) {\n                         break;\n                     }\n-                    newNodes.add(nd);\n+                    list.add(immutableNode2);\n                 }\n-                final ImmutableNode sibling2 = (refHandler.getReference(nd) == null) ? null : nd;\n-                for (final ImmutableNode insertNode : newNodes) {\n-                    if (refHandler.getReference(insertNode) == null) {\n-                        this.insert(insertNode, node, sibling1, sibling2, refHandler);\n-                        sibling1 = insertNode;\n+                final ImmutableNode immutableNode4 = (referenceNodeHandler.getReference(immutableNode2) == null) ? null : immutableNode2;\n+                for (final ImmutableNode immutableNode5 : list) {\n+                    if (referenceNodeHandler.getReference(immutableNode5) == null) {\n+                        this.insert(immutableNode5, immutableNode, immutableNode3, immutableNode4, referenceNodeHandler);\n+                        immutableNode3 = immutableNode5;\n                     }\n                 }\n             }\n         }\n     }\n }\n"}]}
