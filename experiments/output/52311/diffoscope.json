{"diffoscope-json-version": 1, "source1": "first/LZMACompressorInputStream.class", "source2": "second/LZMACompressorInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,235 +1,233 @@\n-  SHA-256 checksum 948b44137f29c1e4b978b6c11c9679520e5e76147321f4dd3a81c553b700010a\n+  SHA-256 checksum 7dcf30112607ccdd8d6a9feb951cd93caad4410b95574b5fb25db225977c0c12\n   Compiled from \"LZMACompressorInputStream.java\"\n public class org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream implements org.apache.commons.compress.utils.InputStreamStatistics\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #20                         // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream\n-  super_class: #21                        // org/apache/commons/compress/compressors/CompressorInputStream\n+  this_class: #1                          // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream\n+  super_class: #3                         // org/apache/commons/compress/compressors/CompressorInputStream\n   interfaces: 1, fields: 2, methods: 9, attributes: 1\n Constant pool:\n-    #1 = Methodref          #21.#69       // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n-    #2 = Class              #70           // org/tukaani/xz/LZMAInputStream\n-    #3 = Class              #71           // org/apache/commons/compress/utils/CountingInputStream\n-    #4 = Methodref          #3.#72        // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-    #5 = Fieldref           #20.#73       // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-    #6 = Methodref          #2.#74        // org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-    #7 = Fieldref           #20.#75       // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.in:Ljava/io/InputStream;\n-    #8 = Class              #76           // org/tukaani/xz/MemoryLimitException\n-    #9 = Class              #77           // org/apache/commons/compress/MemoryLimitException\n-   #10 = Methodref          #8.#78        // org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n-   #11 = Methodref          #8.#79        // org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n-   #12 = Methodref          #9.#80        // org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n-   #13 = Methodref          #81.#82       // java/io/InputStream.read:()I\n-   #14 = Methodref          #20.#83       // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.count:(I)V\n-   #15 = Methodref          #81.#84       // java/io/InputStream.read:([BII)I\n-   #16 = Methodref          #85.#86       // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n-   #17 = Methodref          #81.#87       // java/io/InputStream.available:()I\n-   #18 = Methodref          #81.#88       // java/io/InputStream.close:()V\n-   #19 = Methodref          #3.#89        // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n-   #20 = Class              #90           // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream\n-   #21 = Class              #91           // org/apache/commons/compress/compressors/CompressorInputStream\n-   #22 = Class              #92           // org/apache/commons/compress/utils/InputStreamStatistics\n-   #23 = Utf8               countingStream\n-   #24 = Utf8               Lorg/apache/commons/compress/utils/CountingInputStream;\n-   #25 = Utf8               in\n-   #26 = Utf8               Ljava/io/InputStream;\n-   #27 = Utf8               <init>\n-   #28 = Utf8               (Ljava/io/InputStream;)V\n-   #29 = Utf8               Code\n-   #30 = Utf8               LineNumberTable\n-   #31 = Utf8               LocalVariableTable\n-   #32 = Utf8               this\n-   #33 = Utf8               Lorg/apache/commons/compress/compressors/lzma/LZMACompressorInputStream;\n-   #34 = Utf8               inputStream\n-   #35 = Utf8               Exceptions\n-   #36 = Class              #93           // java/io/IOException\n-   #37 = Utf8               (Ljava/io/InputStream;I)V\n-   #38 = Utf8               e\n-   #39 = Utf8               Lorg/tukaani/xz/MemoryLimitException;\n-   #40 = Utf8               memoryLimitInKb\n-   #41 = Utf8               I\n-   #42 = Utf8               StackMapTable\n-   #43 = Class              #90           // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream\n-   #44 = Class              #94           // java/io/InputStream\n-   #45 = Class              #76           // org/tukaani/xz/MemoryLimitException\n-   #46 = Utf8               read\n-   #47 = Utf8               ()I\n-   #48 = Utf8               ret\n-   #49 = Utf8               ([BII)I\n-   #50 = Utf8               buf\n-   #51 = Utf8               [B\n-   #52 = Utf8               off\n-   #53 = Utf8               len\n-   #54 = Utf8               skip\n-   #55 = Utf8               (J)J\n-   #56 = Utf8               n\n-   #57 = Utf8               J\n-   #58 = Utf8               available\n-   #59 = Utf8               close\n-   #60 = Utf8               ()V\n-   #61 = Utf8               getCompressedCount\n-   #62 = Utf8               ()J\n-   #63 = Utf8               matches\n-   #64 = Utf8               ([BI)Z\n-   #65 = Utf8               signature\n-   #66 = Utf8               length\n-   #67 = Utf8               SourceFile\n-   #68 = Utf8               LZMACompressorInputStream.java\n-   #69 = NameAndType        #27:#60       // \"<init>\":()V\n-   #70 = Utf8               org/tukaani/xz/LZMAInputStream\n-   #71 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n-   #72 = NameAndType        #27:#28       // \"<init>\":(Ljava/io/InputStream;)V\n-   #73 = NameAndType        #23:#24       // countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-   #74 = NameAndType        #27:#37       // \"<init>\":(Ljava/io/InputStream;I)V\n-   #75 = NameAndType        #25:#26       // in:Ljava/io/InputStream;\n-   #76 = Utf8               org/tukaani/xz/MemoryLimitException\n-   #77 = Utf8               org/apache/commons/compress/MemoryLimitException\n-   #78 = NameAndType        #95:#47       // getMemoryNeeded:()I\n-   #79 = NameAndType        #96:#47       // getMemoryLimit:()I\n-   #80 = NameAndType        #27:#97       // \"<init>\":(JILjava/lang/Exception;)V\n-   #81 = Class              #94           // java/io/InputStream\n-   #82 = NameAndType        #46:#47       // read:()I\n-   #83 = NameAndType        #98:#99       // count:(I)V\n-   #84 = NameAndType        #46:#49       // read:([BII)I\n-   #85 = Class              #100          // org/apache/commons/compress/utils/IOUtils\n-   #86 = NameAndType        #54:#101      // skip:(Ljava/io/InputStream;J)J\n-   #87 = NameAndType        #58:#47       // available:()I\n-   #88 = NameAndType        #59:#60       // close:()V\n-   #89 = NameAndType        #102:#62      // getBytesRead:()J\n-   #90 = Utf8               org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream\n-   #91 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n-   #92 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n-   #93 = Utf8               java/io/IOException\n-   #94 = Utf8               java/io/InputStream\n-   #95 = Utf8               getMemoryNeeded\n-   #96 = Utf8               getMemoryLimit\n-   #97 = Utf8               (JILjava/lang/Exception;)V\n-   #98 = Utf8               count\n-   #99 = Utf8               (I)V\n-  #100 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #101 = Utf8               (Ljava/io/InputStream;J)J\n-  #102 = Utf8               getBytesRead\n+    #1 = Class              #2            // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream\n+    #2 = Utf8               org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream\n+    #3 = Class              #4            // org/apache/commons/compress/compressors/CompressorInputStream\n+    #4 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n+    #5 = Class              #6            // org/apache/commons/compress/utils/InputStreamStatistics\n+    #6 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n+    #7 = Utf8               countingStream\n+    #8 = Utf8               Lorg/apache/commons/compress/utils/CountingInputStream;\n+    #9 = Utf8               in\n+   #10 = Utf8               Ljava/io/InputStream;\n+   #11 = Utf8               <init>\n+   #12 = Utf8               (Ljava/io/InputStream;)V\n+   #13 = Utf8               Exceptions\n+   #14 = Class              #15           // java/io/IOException\n+   #15 = Utf8               java/io/IOException\n+   #16 = Utf8               Code\n+   #17 = Methodref          #3.#18        // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+   #18 = NameAndType        #11:#19       // \"<init>\":()V\n+   #19 = Utf8               ()V\n+   #20 = Class              #21           // org/tukaani/xz/LZMAInputStream\n+   #21 = Utf8               org/tukaani/xz/LZMAInputStream\n+   #22 = Class              #23           // org/apache/commons/compress/utils/CountingInputStream\n+   #23 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n+   #24 = Methodref          #22.#25       // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #25 = NameAndType        #11:#12       // \"<init>\":(Ljava/io/InputStream;)V\n+   #26 = Fieldref           #1.#27        // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+   #27 = NameAndType        #7:#8         // countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+   #28 = Methodref          #20.#29       // org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+   #29 = NameAndType        #11:#30       // \"<init>\":(Ljava/io/InputStream;I)V\n+   #30 = Utf8               (Ljava/io/InputStream;I)V\n+   #31 = Fieldref           #1.#32        // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.in:Ljava/io/InputStream;\n+   #32 = NameAndType        #9:#10        // in:Ljava/io/InputStream;\n+   #33 = Utf8               LineNumberTable\n+   #34 = Utf8               LocalVariableTable\n+   #35 = Utf8               this\n+   #36 = Utf8               Lorg/apache/commons/compress/compressors/lzma/LZMACompressorInputStream;\n+   #37 = Utf8               inputStream\n+   #38 = Class              #39           // org/apache/commons/compress/MemoryLimitException\n+   #39 = Utf8               org/apache/commons/compress/MemoryLimitException\n+   #40 = Methodref          #41.#43       // org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n+   #41 = Class              #42           // org/tukaani/xz/MemoryLimitException\n+   #42 = Utf8               org/tukaani/xz/MemoryLimitException\n+   #43 = NameAndType        #44:#45       // getMemoryNeeded:()I\n+   #44 = Utf8               getMemoryNeeded\n+   #45 = Utf8               ()I\n+   #46 = Methodref          #41.#47       // org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n+   #47 = NameAndType        #48:#45       // getMemoryLimit:()I\n+   #48 = Utf8               getMemoryLimit\n+   #49 = Methodref          #38.#50       // org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n+   #50 = NameAndType        #11:#51       // \"<init>\":(JILjava/lang/Exception;)V\n+   #51 = Utf8               (JILjava/lang/Exception;)V\n+   #52 = Utf8               memoryLimitInKb\n+   #53 = Utf8               I\n+   #54 = Utf8               e\n+   #55 = Utf8               Lorg/tukaani/xz/MemoryLimitException;\n+   #56 = Utf8               StackMapTable\n+   #57 = Class              #58           // java/io/InputStream\n+   #58 = Utf8               java/io/InputStream\n+   #59 = Utf8               read\n+   #60 = Methodref          #57.#61       // java/io/InputStream.read:()I\n+   #61 = NameAndType        #59:#45       // read:()I\n+   #62 = Methodref          #1.#63        // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.count:(I)V\n+   #63 = NameAndType        #64:#65       // count:(I)V\n+   #64 = Utf8               count\n+   #65 = Utf8               (I)V\n+   #66 = Utf8               ret\n+   #67 = Utf8               ([BII)I\n+   #68 = Methodref          #57.#69       // java/io/InputStream.read:([BII)I\n+   #69 = NameAndType        #59:#67       // read:([BII)I\n+   #70 = Utf8               buf\n+   #71 = Utf8               [B\n+   #72 = Utf8               off\n+   #73 = Utf8               len\n+   #74 = Utf8               skip\n+   #75 = Utf8               (J)J\n+   #76 = Methodref          #77.#79       // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+   #77 = Class              #78           // org/apache/commons/compress/utils/IOUtils\n+   #78 = Utf8               org/apache/commons/compress/utils/IOUtils\n+   #79 = NameAndType        #74:#80       // skip:(Ljava/io/InputStream;J)J\n+   #80 = Utf8               (Ljava/io/InputStream;J)J\n+   #81 = Utf8               n\n+   #82 = Utf8               J\n+   #83 = Utf8               available\n+   #84 = Methodref          #57.#85       // java/io/InputStream.available:()I\n+   #85 = NameAndType        #83:#45       // available:()I\n+   #86 = Utf8               close\n+   #87 = Methodref          #57.#88       // java/io/InputStream.close:()V\n+   #88 = NameAndType        #86:#19       // close:()V\n+   #89 = Utf8               getCompressedCount\n+   #90 = Utf8               ()J\n+   #91 = Methodref          #22.#92       // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+   #92 = NameAndType        #93:#90       // getBytesRead:()J\n+   #93 = Utf8               getBytesRead\n+   #94 = Utf8               matches\n+   #95 = Utf8               ([BI)Z\n+   #96 = Utf8               signature\n+   #97 = Utf8               length\n+   #98 = Utf8               SourceFile\n+   #99 = Utf8               LZMACompressorInputStream.java\n {\n   private final org.apache.commons.compress.utils.CountingInputStream countingStream;\n     descriptor: Lorg/apache/commons/compress/utils/CountingInputStream;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final java.io.InputStream in;\n     descriptor: Ljava/io/InputStream;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   public org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream(java.io.InputStream) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=7, locals=2, args_size=2\n          0: aload_0\n-         1: invokespecial #1                  // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+         1: invokespecial #17                 // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n          4: aload_0\n-         5: new           #2                  // class org/tukaani/xz/LZMAInputStream\n+         5: new           #20                 // class org/tukaani/xz/LZMAInputStream\n          8: dup\n          9: aload_0\n-        10: new           #3                  // class org/apache/commons/compress/utils/CountingInputStream\n+        10: new           #22                 // class org/apache/commons/compress/utils/CountingInputStream\n         13: dup\n         14: aload_1\n-        15: invokespecial #4                  // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+        15: invokespecial #24                 // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n         18: dup_x1\n-        19: putfield      #5                  // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        19: putfield      #26                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n         22: iconst_m1\n-        23: invokespecial #6                  // Method org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-        26: putfield      #7                  // Field in:Ljava/io/InputStream;\n+        23: invokespecial #28                 // Method org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+        26: putfield      #31                 // Field in:Ljava/io/InputStream;\n         29: return\n       LineNumberTable:\n-        line 55: 0\n+        line 54: 0\n         line 56: 4\n         line 57: 29\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      30     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorInputStream;\n             0      30     1 inputStream   Ljava/io/InputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream(java.io.InputStream, int) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;I)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=7, locals=4, args_size=3\n          0: aload_0\n-         1: invokespecial #1                  // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+         1: invokespecial #17                 // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n          4: aload_0\n-         5: new           #2                  // class org/tukaani/xz/LZMAInputStream\n+         5: new           #20                 // class org/tukaani/xz/LZMAInputStream\n          8: dup\n          9: aload_0\n-        10: new           #3                  // class org/apache/commons/compress/utils/CountingInputStream\n+        10: new           #22                 // class org/apache/commons/compress/utils/CountingInputStream\n         13: dup\n         14: aload_1\n-        15: invokespecial #4                  // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+        15: invokespecial #24                 // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n         18: dup_x1\n-        19: putfield      #5                  // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        19: putfield      #26                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n         22: iload_2\n-        23: invokespecial #6                  // Method org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-        26: putfield      #7                  // Field in:Ljava/io/InputStream;\n+        23: invokespecial #28                 // Method org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+        26: putfield      #31                 // Field in:Ljava/io/InputStream;\n         29: goto          51\n         32: astore_3\n-        33: new           #9                  // class org/apache/commons/compress/MemoryLimitException\n+        33: new           #38                 // class org/apache/commons/compress/MemoryLimitException\n         36: dup\n         37: aload_3\n-        38: invokevirtual #10                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n+        38: invokevirtual #40                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n         41: i2l\n         42: aload_3\n-        43: invokevirtual #11                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n+        43: invokevirtual #46                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n         46: aload_3\n-        47: invokespecial #12                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n+        47: invokespecial #49                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n         50: athrow\n         51: return\n       Exception table:\n          from    to  target type\n              4    29    32   Class org/tukaani/xz/MemoryLimitException\n       LineNumberTable:\n-        line 77: 0\n+        line 76: 0\n         line 79: 4\n-        line 83: 29\n-        line 80: 32\n+        line 80: 29\n         line 82: 33\n         line 84: 51\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           33      18     3     e   Lorg/tukaani/xz/MemoryLimitException;\n             0      52     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorInputStream;\n             0      52     1 inputStream   Ljava/io/InputStream;\n             0      52     2 memoryLimitInKb   I\n+           33      18     3     e   Lorg/tukaani/xz/MemoryLimitException;\n       StackMapTable: number_of_entries = 2\n         frame_type = 255 /* full_frame */\n           offset_delta = 32\n           locals = [ class org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream, class java/io/InputStream, int ]\n           stack = [ class org/tukaani/xz/MemoryLimitException ]\n         frame_type = 18 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field in:Ljava/io/InputStream;\n-         4: invokevirtual #13                 // Method java/io/InputStream.read:()I\n+         1: getfield      #31                 // Field in:Ljava/io/InputStream;\n+         4: invokevirtual #60                 // Method java/io/InputStream.read:()I\n          7: istore_1\n          8: aload_0\n          9: iload_1\n         10: iconst_m1\n         11: if_icmpne     18\n         14: iconst_0\n         15: goto          19\n         18: iconst_1\n-        19: invokevirtual #14                 // Method count:(I)V\n+        19: invokevirtual #62                 // Method count:(I)V\n         22: iload_1\n         23: ireturn\n       LineNumberTable:\n         line 89: 0\n         line 90: 8\n         line 91: 22\n       LocalVariableTable:\n@@ -241,149 +239,148 @@\n           offset_delta = 18\n           locals = [ class org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream, int ]\n           stack = [ class org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 0\n           locals = [ class org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream, int ]\n           stack = [ class org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream, int ]\n-    Exceptions:\n-      throws java.io.IOException\n \n   public int read(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=5, args_size=4\n          0: aload_0\n-         1: getfield      #7                  // Field in:Ljava/io/InputStream;\n+         1: getfield      #31                 // Field in:Ljava/io/InputStream;\n          4: aload_1\n          5: iload_2\n          6: iload_3\n-         7: invokevirtual #15                 // Method java/io/InputStream.read:([BII)I\n+         7: invokevirtual #68                 // Method java/io/InputStream.read:([BII)I\n         10: istore        4\n         12: aload_0\n         13: iload         4\n-        15: invokevirtual #14                 // Method count:(I)V\n+        15: invokevirtual #62                 // Method count:(I)V\n         18: iload         4\n         20: ireturn\n       LineNumberTable:\n         line 97: 0\n         line 98: 12\n         line 99: 18\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      21     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorInputStream;\n             0      21     1   buf   [B\n             0      21     2   off   I\n             0      21     3   len   I\n            12       9     4   ret   I\n-    Exceptions:\n-      throws java.io.IOException\n \n   public long skip(long) throws java.io.IOException;\n     descriptor: (J)J\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_0\n-         1: getfield      #7                  // Field in:Ljava/io/InputStream;\n+         1: getfield      #31                 // Field in:Ljava/io/InputStream;\n          4: lload_1\n-         5: invokestatic  #16                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+         5: invokestatic  #76                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n          8: lreturn\n       LineNumberTable:\n         line 105: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorInputStream;\n             0       9     1     n   J\n-    Exceptions:\n-      throws java.io.IOException\n \n   public int available() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field in:Ljava/io/InputStream;\n-         4: invokevirtual #17                 // Method java/io/InputStream.available:()I\n+         1: getfield      #31                 // Field in:Ljava/io/InputStream;\n+         4: invokevirtual #84                 // Method java/io/InputStream.available:()I\n          7: ireturn\n       LineNumberTable:\n         line 111: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorInputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field in:Ljava/io/InputStream;\n-         4: invokevirtual #18                 // Method java/io/InputStream.close:()V\n+         1: getfield      #31                 // Field in:Ljava/io/InputStream;\n+         4: invokevirtual #87                 // Method java/io/InputStream.close:()V\n          7: return\n       LineNumberTable:\n         line 117: 0\n         line 118: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorInputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public long getCompressedCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #5                  // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-         4: invokevirtual #19                 // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+         1: getfield      #26                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+         4: invokevirtual #91                 // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n          7: lreturn\n       LineNumberTable:\n         line 125: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorInputStream;\n \n   public static boolean matches(byte[], int);\n     descriptor: ([BI)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n-         1: ifnull        33\n+         1: ifnull        31\n          4: iload_1\n          5: iconst_3\n-         6: if_icmplt     33\n+         6: if_icmplt     31\n          9: aload_0\n         10: iconst_0\n         11: baload\n         12: bipush        93\n-        14: if_icmpne     33\n+        14: if_icmpne     31\n         17: aload_0\n         18: iconst_1\n         19: baload\n-        20: ifne          33\n+        20: ifne          31\n         23: aload_0\n         24: iconst_2\n         25: baload\n-        26: ifne          33\n+        26: ifne          31\n         29: iconst_1\n-        30: goto          34\n-        33: iconst_0\n-        34: ireturn\n+        30: ireturn\n+        31: iconst_0\n+        32: ireturn\n       LineNumberTable:\n         line 140: 0\n+        line 141: 9\n+        line 142: 23\n+        line 140: 29\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      35     0 signature   [B\n-            0      35     1 length   I\n-      StackMapTable: number_of_entries = 2\n-        frame_type = 33 /* same */\n-        frame_type = 64 /* same_locals_1_stack_item */\n-          stack = [ int ]\n+            0      33     0 signature   [B\n+            0      33     1 length   I\n+      StackMapTable: number_of_entries = 1\n+        frame_type = 31 /* same */\n }\n SourceFile: \"LZMACompressorInputStream.java\"\n"}]}
