{"diffoscope-json-version": 1, "source1": "first/PopulationCodec.class", "source2": "second/PopulationCodec.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,127 +8,125 @@\n {\n     private final Codec favouredCodec;\n     private Codec tokenCodec;\n     private final Codec unfavouredCodec;\n     private int l;\n     private int[] favoured;\n     \n-    public PopulationCodec(final Codec favouredCodec, final Codec tokenCodec, final Codec unvafouredCodec) {\n+    public PopulationCodec(final Codec favouredCodec, final Codec tokenCodec, final Codec unfavouredCodec) {\n         this.favouredCodec = favouredCodec;\n         this.tokenCodec = tokenCodec;\n-        this.unfavouredCodec = unvafouredCodec;\n+        this.unfavouredCodec = unfavouredCodec;\n     }\n     \n     public PopulationCodec(final Codec favouredCodec, final int l, final Codec unfavouredCodec) {\n         if (l >= 256 || l <= 0) {\n             throw new IllegalArgumentException(\"L must be between 1..255\");\n         }\n         this.favouredCodec = favouredCodec;\n         this.l = l;\n         this.unfavouredCodec = unfavouredCodec;\n     }\n     \n-    public int decode(final InputStream in) throws IOException, Pack200Exception {\n+    public int decode(final InputStream inputStream) throws IOException, Pack200Exception {\n         throw new Pack200Exception(\"Population encoding does not work unless the number of elements are known\");\n     }\n     \n-    public int decode(final InputStream in, final long last) throws IOException, Pack200Exception {\n+    public int decode(final InputStream inputStream, final long n) throws IOException, Pack200Exception {\n         throw new Pack200Exception(\"Population encoding does not work unless the number of elements are known\");\n     }\n     \n-    public int[] decodeInts(final int n, final InputStream in) throws IOException, Pack200Exception {\n+    public int[] decodeInts(final int n, final InputStream inputStream) throws IOException, Pack200Exception {\n         this.lastBandLength = 0;\n         this.favoured = new int[n];\n-        int smallest = Integer.MAX_VALUE;\n-        int last = 0;\n-        int value = 0;\n-        int k = -1;\n+        int a = Integer.MAX_VALUE;\n+        int n2 = 0;\n+        int n3 = -1;\n         while (true) {\n-            value = this.favouredCodec.decode(in, (long)last);\n-            if (k > -1 && (value == smallest || value == last)) {\n+            final int decode = this.favouredCodec.decode(inputStream, (long)n2);\n+            if (n3 > -1 && (decode == a || decode == n2)) {\n                 break;\n             }\n-            this.favoured[++k] = value;\n-            final int absoluteSmallest = Math.abs(smallest);\n-            final int absoluteValue = Math.abs(value);\n-            if (absoluteSmallest > absoluteValue) {\n-                smallest = value;\n+            this.favoured[++n3] = decode;\n+            final int abs = Math.abs(a);\n+            final int abs2 = Math.abs(decode);\n+            if (abs > abs2) {\n+                a = decode;\n             }\n-            else if (absoluteSmallest == absoluteValue) {\n-                smallest = absoluteSmallest;\n+            else if (abs == abs2) {\n+                a = abs;\n             }\n-            last = value;\n+            n2 = decode;\n         }\n-        this.lastBandLength += k;\n+        this.lastBandLength += n3;\n         if (this.tokenCodec == null) {\n-            if (k < 256) {\n+            if (n3 < 256) {\n                 this.tokenCodec = (Codec)Codec.BYTE1;\n             }\n             else {\n-                int b = 1;\n-                BHSDCodec codec = null;\n-                while (++b < 5) {\n-                    codec = new BHSDCodec(b, 256 - this.l, 0);\n-                    if (codec.encodes((long)k)) {\n-                        this.tokenCodec = (Codec)codec;\n+                int n4 = 1;\n+                while (++n4 < 5) {\n+                    final BHSDCodec tokenCodec = new BHSDCodec(n4, 256 - this.l, 0);\n+                    if (tokenCodec.encodes((long)n3)) {\n+                        this.tokenCodec = (Codec)tokenCodec;\n                         break;\n                     }\n                 }\n                 if (this.tokenCodec == null) {\n-                    throw new Pack200Exception(\"Cannot calculate token codec from \" + k + \" and \" + this.l);\n+                    throw new Pack200Exception(\"Cannot calculate token codec from \" + n3 + \" and \" + this.l);\n                 }\n             }\n         }\n         this.lastBandLength += n;\n-        final int[] result = this.tokenCodec.decodeInts(n, in);\n-        last = 0;\n+        final int[] decodeInts = this.tokenCodec.decodeInts(n, inputStream);\n+        int n5 = 0;\n         for (int i = 0; i < n; ++i) {\n-            final int index = result[i];\n-            if (index == 0) {\n+            final int n6 = decodeInts[i];\n+            if (n6 == 0) {\n                 ++this.lastBandLength;\n-                last = (result[i] = this.unfavouredCodec.decode(in, (long)last));\n+                n5 = (decodeInts[i] = this.unfavouredCodec.decode(inputStream, (long)n5));\n             }\n             else {\n-                result[i] = this.favoured[index - 1];\n+                decodeInts[i] = this.favoured[n6 - 1];\n             }\n         }\n-        return result;\n+        return decodeInts;\n     }\n     \n     public int[] getFavoured() {\n         return this.favoured;\n     }\n     \n     public Codec getFavouredCodec() {\n         return this.favouredCodec;\n     }\n     \n     public Codec getUnfavouredCodec() {\n         return this.unfavouredCodec;\n     }\n     \n-    public byte[] encode(final int value, final int last) throws Pack200Exception {\n+    public byte[] encode(final int n, final int n2) throws Pack200Exception {\n         throw new Pack200Exception(\"Population encoding does not work unless the number of elements are known\");\n     }\n     \n-    public byte[] encode(final int value) throws Pack200Exception {\n+    public byte[] encode(final int n) throws Pack200Exception {\n         throw new Pack200Exception(\"Population encoding does not work unless the number of elements are known\");\n     }\n     \n-    public byte[] encode(final int[] favoured, final int[] tokens, final int[] unfavoured) throws Pack200Exception {\n-        final int[] favoured2 = new int[favoured.length + 1];\n-        System.arraycopy(favoured, 0, favoured2, 0, favoured.length);\n-        favoured2[favoured2.length - 1] = favoured[favoured.length - 1];\n-        final byte[] favouredEncoded = this.favouredCodec.encode(favoured2);\n-        final byte[] tokensEncoded = this.tokenCodec.encode(tokens);\n-        final byte[] unfavouredEncoded = this.unfavouredCodec.encode(unfavoured);\n-        final byte[] band = new byte[favouredEncoded.length + tokensEncoded.length + unfavouredEncoded.length];\n-        System.arraycopy(favouredEncoded, 0, band, 0, favouredEncoded.length);\n-        System.arraycopy(tokensEncoded, 0, band, favouredEncoded.length, tokensEncoded.length);\n-        System.arraycopy(unfavouredEncoded, 0, band, favouredEncoded.length + tokensEncoded.length, unfavouredEncoded.length);\n-        return band;\n+    public byte[] encode(final int[] array, final int[] array2, final int[] array3) throws Pack200Exception {\n+        final int[] array4 = new int[array.length + 1];\n+        System.arraycopy(array, 0, array4, 0, array.length);\n+        array4[array4.length - 1] = array[array.length - 1];\n+        final byte[] encode = this.favouredCodec.encode(array4);\n+        final byte[] encode2 = this.tokenCodec.encode(array2);\n+        final byte[] encode3 = this.unfavouredCodec.encode(array3);\n+        final byte[] array5 = new byte[encode.length + encode2.length + encode3.length];\n+        System.arraycopy(encode, 0, array5, 0, encode.length);\n+        System.arraycopy(encode2, 0, array5, encode.length, encode2.length);\n+        System.arraycopy(encode3, 0, array5, encode.length + encode2.length, encode3.length);\n+        return array5;\n     }\n     \n     public Codec getTokenCodec() {\n         return this.tokenCodec;\n     }\n }\n"}]}
