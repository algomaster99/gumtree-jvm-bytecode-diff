{"diffoscope-json-version": 1, "source1": "first/INVOKEINTERFACE.class", "source2": "second/INVOKEINTERFACE.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,58 +10,58 @@\n public final class INVOKEINTERFACE extends InvokeInstruction\n {\n     private int nargs;\n     \n     INVOKEINTERFACE() {\n     }\n     \n-    public INVOKEINTERFACE(final int index, final int nargs) {\n-        super((short)185, index);\n+    public INVOKEINTERFACE(final int n, final int n2) {\n+        super((short)185, n);\n         super.setLength(5);\n-        if (nargs < 1) {\n-            throw new ClassGenException(\"Number of arguments must be > 0 \" + nargs);\n+        if (n2 < 1) {\n+            throw new ClassGenException(\"Number of arguments must be > 0 \" + n2);\n         }\n-        this.nargs = nargs;\n+        this.nargs = n2;\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitExceptionThrower((ExceptionThrower)this);\n-        v.visitTypedInstruction((TypedInstruction)this);\n-        v.visitStackConsumer((StackConsumer)this);\n-        v.visitStackProducer((StackProducer)this);\n-        v.visitLoadClass((LoadClass)this);\n-        v.visitCPInstruction((CPInstruction)this);\n-        v.visitFieldOrMethod((FieldOrMethod)this);\n-        v.visitInvokeInstruction((InvokeInstruction)this);\n-        v.visitINVOKEINTERFACE(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitExceptionThrower((ExceptionThrower)this);\n+        visitor.visitTypedInstruction((TypedInstruction)this);\n+        visitor.visitStackConsumer((StackConsumer)this);\n+        visitor.visitStackProducer((StackProducer)this);\n+        visitor.visitLoadClass((LoadClass)this);\n+        visitor.visitCPInstruction((CPInstruction)this);\n+        visitor.visitFieldOrMethod((FieldOrMethod)this);\n+        visitor.visitInvokeInstruction((InvokeInstruction)this);\n+        visitor.visitINVOKEINTERFACE(this);\n     }\n     \n-    public int consumeStack(final ConstantPoolGen cpg) {\n+    public int consumeStack(final ConstantPoolGen constantPoolGen) {\n         return this.nargs;\n     }\n     \n-    public void dump(final DataOutputStream out) throws IOException {\n-        out.writeByte(super.getOpcode());\n-        out.writeShort(super.getIndex());\n-        out.writeByte(this.nargs);\n-        out.writeByte(0);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeByte(super.getOpcode());\n+        dataOutputStream.writeShort(super.getIndex());\n+        dataOutputStream.writeByte(this.nargs);\n+        dataOutputStream.writeByte(0);\n     }\n     \n     public int getCount() {\n         return this.nargs;\n     }\n     \n     public Class<?>[] getExceptions() {\n         return ExceptionConst.createExceptions(ExceptionConst.EXCS.EXCS_INTERFACE_METHOD_RESOLUTION, new Class[] { ExceptionConst.UNSATISFIED_LINK_ERROR, ExceptionConst.ABSTRACT_METHOD_ERROR, ExceptionConst.ILLEGAL_ACCESS_ERROR, ExceptionConst.INCOMPATIBLE_CLASS_CHANGE_ERROR });\n     }\n     \n-    protected void initFromFile(final ByteSequence bytes, final boolean wide) throws IOException {\n-        super.initFromFile(bytes, wide);\n+    protected void initFromFile(final ByteSequence byteSequence, final boolean b) throws IOException {\n+        super.initFromFile(byteSequence, b);\n         super.setLength(5);\n-        this.nargs = bytes.readUnsignedByte();\n-        bytes.readByte();\n+        this.nargs = byteSequence.readUnsignedByte();\n+        byteSequence.readByte();\n     }\n     \n-    public String toString(final ConstantPool cp) {\n-        return super.toString(cp) + \" \" + this.nargs;\n+    public String toString(final ConstantPool constantPool) {\n+        return super.toString(constantPool) + \" \" + this.nargs;\n     }\n }\n"}]}
