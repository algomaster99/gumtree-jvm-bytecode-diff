{"diffoscope-json-version": 1, "source1": "first/MultiBackgroundInitializer$MultiBackgroundInitializerResults.class", "source2": "second/MultiBackgroundInitializer$MultiBackgroundInitializerResults.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,48 +8,48 @@\n \n public static class MultiBackgroundInitializerResults\n {\n     private final Map<String, BackgroundInitializer<?>> initializers;\n     private final Map<String, Object> resultObjects;\n     private final Map<String, ConcurrentException> exceptions;\n     \n-    private MultiBackgroundInitializerResults(final Map<String, BackgroundInitializer<?>> inits, final Map<String, Object> results, final Map<String, ConcurrentException> excepts) {\n-        this.initializers = inits;\n-        this.resultObjects = results;\n-        this.exceptions = excepts;\n+    private MultiBackgroundInitializerResults(final Map<String, BackgroundInitializer<?>> initializers, final Map<String, Object> resultObjects, final Map<String, ConcurrentException> exceptions) {\n+        this.initializers = initializers;\n+        this.resultObjects = resultObjects;\n+        this.exceptions = exceptions;\n     }\n     \n-    public BackgroundInitializer<?> getInitializer(final String name) {\n-        return (BackgroundInitializer<?>)this.checkName(name);\n+    public BackgroundInitializer<?> getInitializer(final String s) {\n+        return (BackgroundInitializer<?>)this.checkName(s);\n     }\n     \n-    public Object getResultObject(final String name) {\n-        this.checkName(name);\n-        return this.resultObjects.get(name);\n+    public Object getResultObject(final String s) {\n+        this.checkName(s);\n+        return this.resultObjects.get(s);\n     }\n     \n-    public boolean isException(final String name) {\n-        this.checkName(name);\n-        return this.exceptions.containsKey(name);\n+    public boolean isException(final String s) {\n+        this.checkName(s);\n+        return this.exceptions.containsKey(s);\n     }\n     \n-    public ConcurrentException getException(final String name) {\n-        this.checkName(name);\n-        return this.exceptions.get(name);\n+    public ConcurrentException getException(final String s) {\n+        this.checkName(s);\n+        return this.exceptions.get(s);\n     }\n     \n     public Set<String> initializerNames() {\n         return Collections.unmodifiableSet(this.initializers.keySet());\n     }\n     \n     public boolean isSuccessful() {\n         return this.exceptions.isEmpty();\n     }\n     \n-    private BackgroundInitializer<?> checkName(final String name) {\n-        final BackgroundInitializer<?> init = (BackgroundInitializer<?>)this.initializers.get(name);\n-        if (init == null) {\n-            throw new NoSuchElementException(\"No child initializer with name \" + name);\n+    private BackgroundInitializer<?> checkName(final String str) {\n+        final BackgroundInitializer backgroundInitializer = (BackgroundInitializer)this.initializers.get(str);\n+        if (backgroundInitializer == null) {\n+            throw new NoSuchElementException(\"No child initializer with name \" + str);\n         }\n-        return init;\n+        return (BackgroundInitializer<?>)backgroundInitializer;\n     }\n }\n"}]}
