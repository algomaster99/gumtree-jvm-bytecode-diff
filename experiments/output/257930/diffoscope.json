{"diffoscope-json-version": 1, "source1": "first/ConfigurationNodeIteratorBase.class", "source2": "second/ConfigurationNodeIteratorBase.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -21,17 +21,17 @@\n         this.reverse = reverse;\n     }\n     \n     public int getPosition() {\n         return this.position;\n     }\n     \n-    public boolean setPosition(final int pos) {\n-        this.position = pos;\n-        return pos >= 1 && pos <= this.getMaxPosition();\n+    public boolean setPosition(final int position) {\n+        this.position = position;\n+        return position >= 1 && position <= this.getMaxPosition();\n     }\n     \n     public NodePointer getNodePointer() {\n         if (this.getPosition() < 1 && !this.setPosition(1)) {\n             return null;\n         }\n         return this.createNodePointer(this.positionToIndex(this.getPosition()));\n@@ -59,23 +59,23 @@\n         }\n     }\n     \n     protected int getMaxPosition() {\n         return this.reverse ? (this.getStartOffset() + 1) : (this.size() - this.getStartOffset());\n     }\n     \n-    protected int positionToIndex(final int pos) {\n-        return (this.reverse ? (1 - pos) : (pos - 1)) + this.getStartOffset();\n+    protected int positionToIndex(final int n) {\n+        return (this.reverse ? (1 - n) : (n - 1)) + this.getStartOffset();\n     }\n     \n     protected abstract NodePointer createNodePointer(final int p0);\n     \n     protected abstract int size();\n     \n-    protected static String prefixName(final String prefix, final String name) {\n-        return String.format(\"%s:%s\", prefix, StringUtils.defaultString(name));\n+    protected static String prefixName(final String s, final String s2) {\n+        return String.format(\"%s:%s\", s, StringUtils.defaultString(s2));\n     }\n     \n-    protected static String qualifiedName(final QName name) {\n-        return (name.getPrefix() == null) ? name.getName() : prefixName(name.getPrefix(), name.getName());\n+    protected static String qualifiedName(final QName qName) {\n+        return (qName.getPrefix() == null) ? qName.getName() : prefixName(qName.getPrefix(), qName.getName());\n     }\n }\n"}]}
