{"diffoscope-json-version": 1, "source1": "first/Pack200CompressorInputStream.class", "source2": "second/Pack200CompressorInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,14 +13,19 @@\n public class Pack200CompressorInputStream extends CompressorInputStream\n {\n     private final InputStream originalInput;\n     private final StreamBridge streamBridge;\n     private static final byte[] CAFE_DOOD;\n     private static final int SIG_LENGTH;\n     \n+    static {\n+        CAFE_DOOD = new byte[] { -54, -2, -48, 13 };\n+        SIG_LENGTH = Pack200CompressorInputStream.CAFE_DOOD.length;\n+    }\n+    \n     public Pack200CompressorInputStream(final InputStream in) throws IOException {\n         this(in, Pack200Strategy.IN_MEMORY);\n     }\n     \n     public Pack200CompressorInputStream(final InputStream in, final Pack200Strategy mode) throws IOException {\n         this(in, null, mode, null);\n     }\n@@ -48,43 +53,45 @@\n     public Pack200CompressorInputStream(final File f, final Pack200Strategy mode, final Map<String, String> props) throws IOException {\n         this(null, f, mode, props);\n     }\n     \n     private Pack200CompressorInputStream(final InputStream in, final File f, final Pack200Strategy mode, final Map<String, String> props) throws IOException {\n         this.originalInput = in;\n         this.streamBridge = mode.newStreamBridge();\n-        final JarOutputStream jarOut = new JarOutputStream((OutputStream)this.streamBridge);\n         Throwable t = null;\n         try {\n-            final Pack200.Unpacker u = Pack200.newUnpacker();\n-            if (props != null) {\n-                u.properties().putAll(props);\n-            }\n-            if (f == null) {\n-                u.unpack((InputStream)new Pack200CompressorInputStream.Pack200CompressorInputStream$1(this, in), jarOut);\n+            final JarOutputStream jarOut = new JarOutputStream((OutputStream)this.streamBridge);\n+            try {\n+                final Pack200.Unpacker u = Pack200.newUnpacker();\n+                if (props != null) {\n+                    u.properties().putAll(props);\n+                }\n+                if (f == null) {\n+                    u.unpack((InputStream)new Pack200CompressorInputStream.Pack200CompressorInputStream$1(this, in), jarOut);\n+                }\n+                else {\n+                    u.unpack(f, jarOut);\n+                }\n             }\n-            else {\n-                u.unpack(f, jarOut);\n+            finally {\n+                if (jarOut != null) {\n+                    jarOut.close();\n+                }\n             }\n         }\n-        catch (final Throwable t2) {\n-            t = t2;\n-            throw t2;\n-        }\n         finally {\n-            if (t != null) {\n-                try {\n-                    jarOut.close();\n-                }\n-                catch (final Throwable exception) {\n-                    t.addSuppressed(exception);\n-                }\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n             }\n             else {\n-                jarOut.close();\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n             }\n         }\n     }\n     \n     public int read() throws IOException {\n         return this.streamBridge.getInput().read();\n     }\n@@ -132,26 +139,24 @@\n             this.streamBridge.stop();\n         }\n         finally {\n             if (this.originalInput != null) {\n                 this.originalInput.close();\n             }\n         }\n+        if (this.originalInput != null) {\n+            this.originalInput.close();\n+        }\n     }\n     \n     public static boolean matches(final byte[] signature, final int length) {\n         if (length < Pack200CompressorInputStream.SIG_LENGTH) {\n             return false;\n         }\n         for (int i = 0; i < Pack200CompressorInputStream.SIG_LENGTH; ++i) {\n             if (signature[i] != Pack200CompressorInputStream.CAFE_DOOD[i]) {\n                 return false;\n             }\n         }\n         return true;\n     }\n-    \n-    static {\n-        CAFE_DOOD = new byte[] { -54, -2, -48, 13 };\n-        SIG_LENGTH = Pack200CompressorInputStream.CAFE_DOOD.length;\n-    }\n }\n"}]}
