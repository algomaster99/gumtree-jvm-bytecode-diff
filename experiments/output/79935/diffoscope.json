{"diffoscope-json-version": 1, "source1": "first/DoubleToDecimal.class", "source2": "second/DoubleToDecimal.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,12 +1,12 @@\n \n package com.fasterxml.jackson.core.io.schubfach;\n \n-import java.util.function.Supplier;\n import java.io.IOException;\n+import java.util.function.Supplier;\n \n public final class DoubleToDecimal\n {\n     static final int P = 53;\n     private static final int W = 11;\n     static final int Q_MIN = -1074;\n     static final int Q_MAX = 971;\n@@ -29,14 +29,18 @@\n     private static final int NAN = 5;\n     private static final ThreadLocal<DoubleToDecimal> threadLocal;\n     public final int MAX_CHARS = 24;\n     private final byte[] bytes;\n     private final char[] chars;\n     private int index;\n     \n+    static {\n+        threadLocal = ThreadLocal.withInitial((Supplier<? extends DoubleToDecimal>)DoubleToDecimal::new);\n+    }\n+    \n     private DoubleToDecimal() {\n         this.bytes = new byte[24];\n         this.chars = new char[24];\n     }\n     \n     public static String toString(final double v) {\n         return threadLocalInstance().toDecimalString(v);\n@@ -116,15 +120,15 @@\n             this.index = -1;\n             if (bits < 0L) {\n                 this.append(45);\n             }\n             if (bq != 0) {\n                 final int mq = 1075 - bq;\n                 final long c = 0x10000000000000L | t;\n-                if (0 < mq & mq < 53) {\n+                if (mq > 0 & mq < 53) {\n                     final long f = c >> mq;\n                     if (f << mq == c) {\n                         return this.toChars(f, 0);\n                     }\n                 }\n                 return this.toDecimal(-mq, c, 0);\n             }\n@@ -197,15 +201,15 @@\n         }\n         f *= MathUtils.pow10(17 - len);\n         e += len;\n         final long hm = MathUtils.multiplyHigh(f, 193428131138340668L) >>> 20;\n         final int l = (int)(f - 100000000L * hm);\n         final int h = (int)(hm * 1441151881L >>> 57);\n         final int m = (int)(hm - 100000000 * h);\n-        if (0 < e && e <= 7) {\n+        if (e > 0 && e <= 7) {\n             return this.toChars1(h, m, l, e);\n         }\n         if (-3 < e && e <= 0) {\n             return this.toChars2(h, m, l, e);\n         }\n         return this.toChars3(h, m, l, e);\n     }\n@@ -308,12 +312,8 @@\n     private void appendDigit(final int d) {\n         this.bytes[++this.index] = (byte)(48 + d);\n     }\n     \n     private String charsToString() {\n         return new String(this.bytes, 0, 0, this.index + 1);\n     }\n-    \n-    static {\n-        threadLocal = ThreadLocal.withInitial((Supplier<? extends DoubleToDecimal>)DoubleToDecimal::new);\n-    }\n }\n"}]}
