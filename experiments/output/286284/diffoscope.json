{"diffoscope-json-version": 1, "source1": "first/UnshrinkingInputStream.class", "source2": "second/UnshrinkingInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,132 +1,131 @@\n-  SHA-256 checksum 63c173c696b3e7aef56daf02855a538730c6e3887dd100c77b118c63258c2d17\n+  SHA-256 checksum 7966ce8e117210fc45d08bf3dfc49fc5c42eb7cb12eb6fd9168572e5cc17721a\n   Compiled from \"UnshrinkingInputStream.java\"\n class org.apache.commons.compress.archivers.zip.UnshrinkingInputStream extends org.apache.commons.compress.compressors.lzw.LZWInputStream\n   minor version: 0\n   major version: 51\n   flags: (0x0020) ACC_SUPER\n   this_class: #1                          // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n   super_class: #4                         // org/apache/commons/compress/compressors/lzw/LZWInputStream\n   interfaces: 0, fields: 3, methods: 4, attributes: 1\n Constant pool:\n-    #1 = Class              #56           // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-    #2 = Fieldref           #57.#58       // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-    #3 = Methodref          #4.#59        // org/apache/commons/compress/compressors/lzw/LZWInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-    #4 = Class              #60           // org/apache/commons/compress/compressors/lzw/LZWInputStream\n-    #5 = Methodref          #1.#61        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setClearCode:(I)V\n-    #6 = Methodref          #1.#62        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.initializeTables:(I)V\n-    #7 = Methodref          #1.#63        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getPrefixesLength:()I\n-    #8 = Fieldref           #1.#64        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.isUsed:[Z\n-    #9 = Methodref          #1.#65        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getClearCode:()I\n-   #10 = Methodref          #1.#66        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setTableSize:(I)V\n-   #11 = Methodref          #1.#67        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getTableSize:()I\n-   #12 = Methodref          #1.#68        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.addEntry:(IBI)I\n-   #13 = Methodref          #1.#69        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getPrefix:(I)I\n-   #14 = Methodref          #1.#70        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setPrefix:(II)V\n-   #15 = Methodref          #1.#71        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.readNextCode:()I\n-   #16 = Class              #72           // java/io/IOException\n-   #17 = String             #73           // Unexpected EOF;\n-   #18 = Methodref          #16.#74       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #19 = Methodref          #1.#75        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getCodeSize:()I\n-   #20 = Methodref          #1.#76        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.incrementCodeSize:()V\n-   #21 = String             #77           // Attempt to increase code size beyond maximum\n-   #22 = Methodref          #1.#78        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.partialClear:()V\n-   #23 = Class              #79           // java/lang/StringBuilder\n-   #24 = Methodref          #23.#80       // java/lang/StringBuilder.\"<init>\":()V\n-   #25 = String             #81           // Invalid clear code subcode\n-   #26 = Methodref          #23.#82       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #27 = Methodref          #23.#83       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #28 = Methodref          #23.#84       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #29 = Methodref          #1.#85        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.addRepeatOfPreviousCode:()I\n-   #30 = Methodref          #1.#86        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.expandCodeToOutputStack:(IZ)I\n+    #1 = Class              #55           // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+    #2 = Fieldref           #56.#57       // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+    #3 = Methodref          #4.#58        // org/apache/commons/compress/compressors/lzw/LZWInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+    #4 = Class              #59           // org/apache/commons/compress/compressors/lzw/LZWInputStream\n+    #5 = Methodref          #1.#60        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setClearCode:(I)V\n+    #6 = Methodref          #1.#61        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.initializeTables:(I)V\n+    #7 = Methodref          #1.#62        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getPrefixesLength:()I\n+    #8 = Fieldref           #1.#63        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.isUsed:[Z\n+    #9 = Methodref          #1.#64        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getClearCode:()I\n+   #10 = Methodref          #1.#65        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setTableSize:(I)V\n+   #11 = Methodref          #1.#66        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getTableSize:()I\n+   #12 = Methodref          #1.#67        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.addEntry:(IBI)I\n+   #13 = Methodref          #1.#68        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getPrefix:(I)I\n+   #14 = Methodref          #1.#69        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setPrefix:(II)V\n+   #15 = Methodref          #1.#70        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.readNextCode:()I\n+   #16 = Class              #71           // java/io/IOException\n+   #17 = String             #72           // Unexpected EOF;\n+   #18 = Methodref          #16.#73       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #19 = Methodref          #1.#74        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getCodeSize:()I\n+   #20 = Methodref          #1.#75        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.incrementCodeSize:()V\n+   #21 = String             #76           // Attempt to increase code size beyond maximum\n+   #22 = Methodref          #1.#77        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.partialClear:()V\n+   #23 = Class              #78           // java/lang/StringBuilder\n+   #24 = Methodref          #23.#79       // java/lang/StringBuilder.\"<init>\":()V\n+   #25 = String             #80           // Invalid clear code subcode\n+   #26 = Methodref          #23.#81       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #27 = Methodref          #23.#82       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #28 = Methodref          #23.#83       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #29 = Methodref          #1.#84        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.addRepeatOfPreviousCode:()I\n+   #30 = Methodref          #1.#85        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.expandCodeToOutputStack:(IZ)I\n    #31 = Utf8               MAX_CODE_SIZE\n    #32 = Utf8               I\n    #33 = Utf8               ConstantValue\n    #34 = Integer            13\n    #35 = Utf8               MAX_TABLE_SIZE\n    #36 = Integer            8192\n    #37 = Utf8               isUsed\n    #38 = Utf8               [Z\n    #39 = Utf8               <init>\n    #40 = Utf8               (Ljava/io/InputStream;)V\n    #41 = Utf8               Code\n    #42 = Utf8               LineNumberTable\n    #43 = Utf8               StackMapTable\n-   #44 = Class              #56           // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-   #45 = Class              #87           // java/io/InputStream\n-   #46 = Utf8               Exceptions\n-   #47 = Utf8               addEntry\n-   #48 = Utf8               (IB)I\n-   #49 = Utf8               partialClear\n-   #50 = Utf8               ()V\n-   #51 = Class              #38           // \"[Z\"\n-   #52 = Utf8               decompressNextSymbol\n-   #53 = Utf8               ()I\n-   #54 = Utf8               SourceFile\n-   #55 = Utf8               UnshrinkingInputStream.java\n-   #56 = Utf8               org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-   #57 = Class              #88           // java/nio/ByteOrder\n-   #58 = NameAndType        #89:#90       // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-   #59 = NameAndType        #39:#91       // \"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-   #60 = Utf8               org/apache/commons/compress/compressors/lzw/LZWInputStream\n-   #61 = NameAndType        #92:#93       // setClearCode:(I)V\n-   #62 = NameAndType        #94:#93       // initializeTables:(I)V\n-   #63 = NameAndType        #95:#53       // getPrefixesLength:()I\n-   #64 = NameAndType        #37:#38       // isUsed:[Z\n-   #65 = NameAndType        #96:#53       // getClearCode:()I\n-   #66 = NameAndType        #97:#93       // setTableSize:(I)V\n-   #67 = NameAndType        #98:#53       // getTableSize:()I\n-   #68 = NameAndType        #47:#99       // addEntry:(IBI)I\n-   #69 = NameAndType        #100:#101     // getPrefix:(I)I\n-   #70 = NameAndType        #102:#103     // setPrefix:(II)V\n-   #71 = NameAndType        #104:#53      // readNextCode:()I\n-   #72 = Utf8               java/io/IOException\n-   #73 = Utf8               Unexpected EOF;\n-   #74 = NameAndType        #39:#105      // \"<init>\":(Ljava/lang/String;)V\n-   #75 = NameAndType        #106:#53      // getCodeSize:()I\n-   #76 = NameAndType        #107:#50      // incrementCodeSize:()V\n-   #77 = Utf8               Attempt to increase code size beyond maximum\n-   #78 = NameAndType        #49:#50       // partialClear:()V\n-   #79 = Utf8               java/lang/StringBuilder\n-   #80 = NameAndType        #39:#50       // \"<init>\":()V\n-   #81 = Utf8               Invalid clear code subcode\n-   #82 = NameAndType        #108:#109     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #83 = NameAndType        #108:#110     // append:(I)Ljava/lang/StringBuilder;\n-   #84 = NameAndType        #111:#112     // toString:()Ljava/lang/String;\n-   #85 = NameAndType        #113:#53      // addRepeatOfPreviousCode:()I\n-   #86 = NameAndType        #114:#115     // expandCodeToOutputStack:(IZ)I\n-   #87 = Utf8               java/io/InputStream\n-   #88 = Utf8               java/nio/ByteOrder\n-   #89 = Utf8               LITTLE_ENDIAN\n-   #90 = Utf8               Ljava/nio/ByteOrder;\n-   #91 = Utf8               (Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-   #92 = Utf8               setClearCode\n-   #93 = Utf8               (I)V\n-   #94 = Utf8               initializeTables\n-   #95 = Utf8               getPrefixesLength\n-   #96 = Utf8               getClearCode\n-   #97 = Utf8               setTableSize\n-   #98 = Utf8               getTableSize\n-   #99 = Utf8               (IBI)I\n-  #100 = Utf8               getPrefix\n-  #101 = Utf8               (I)I\n-  #102 = Utf8               setPrefix\n-  #103 = Utf8               (II)V\n-  #104 = Utf8               readNextCode\n-  #105 = Utf8               (Ljava/lang/String;)V\n-  #106 = Utf8               getCodeSize\n-  #107 = Utf8               incrementCodeSize\n-  #108 = Utf8               append\n-  #109 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #110 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #111 = Utf8               toString\n-  #112 = Utf8               ()Ljava/lang/String;\n-  #113 = Utf8               addRepeatOfPreviousCode\n-  #114 = Utf8               expandCodeToOutputStack\n-  #115 = Utf8               (IZ)I\n+   #44 = Class              #86           // java/io/InputStream\n+   #45 = Utf8               Exceptions\n+   #46 = Utf8               addEntry\n+   #47 = Utf8               (IB)I\n+   #48 = Utf8               partialClear\n+   #49 = Utf8               ()V\n+   #50 = Class              #38           // \"[Z\"\n+   #51 = Utf8               decompressNextSymbol\n+   #52 = Utf8               ()I\n+   #53 = Utf8               SourceFile\n+   #54 = Utf8               UnshrinkingInputStream.java\n+   #55 = Utf8               org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+   #56 = Class              #87           // java/nio/ByteOrder\n+   #57 = NameAndType        #88:#89       // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+   #58 = NameAndType        #39:#90       // \"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+   #59 = Utf8               org/apache/commons/compress/compressors/lzw/LZWInputStream\n+   #60 = NameAndType        #91:#92       // setClearCode:(I)V\n+   #61 = NameAndType        #93:#92       // initializeTables:(I)V\n+   #62 = NameAndType        #94:#52       // getPrefixesLength:()I\n+   #63 = NameAndType        #37:#38       // isUsed:[Z\n+   #64 = NameAndType        #95:#52       // getClearCode:()I\n+   #65 = NameAndType        #96:#92       // setTableSize:(I)V\n+   #66 = NameAndType        #97:#52       // getTableSize:()I\n+   #67 = NameAndType        #46:#98       // addEntry:(IBI)I\n+   #68 = NameAndType        #99:#100      // getPrefix:(I)I\n+   #69 = NameAndType        #101:#102     // setPrefix:(II)V\n+   #70 = NameAndType        #103:#52      // readNextCode:()I\n+   #71 = Utf8               java/io/IOException\n+   #72 = Utf8               Unexpected EOF;\n+   #73 = NameAndType        #39:#104      // \"<init>\":(Ljava/lang/String;)V\n+   #74 = NameAndType        #105:#52      // getCodeSize:()I\n+   #75 = NameAndType        #106:#49      // incrementCodeSize:()V\n+   #76 = Utf8               Attempt to increase code size beyond maximum\n+   #77 = NameAndType        #48:#49       // partialClear:()V\n+   #78 = Utf8               java/lang/StringBuilder\n+   #79 = NameAndType        #39:#49       // \"<init>\":()V\n+   #80 = Utf8               Invalid clear code subcode\n+   #81 = NameAndType        #107:#108     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #82 = NameAndType        #107:#109     // append:(I)Ljava/lang/StringBuilder;\n+   #83 = NameAndType        #110:#111     // toString:()Ljava/lang/String;\n+   #84 = NameAndType        #112:#52      // addRepeatOfPreviousCode:()I\n+   #85 = NameAndType        #113:#114     // expandCodeToOutputStack:(IZ)I\n+   #86 = Utf8               java/io/InputStream\n+   #87 = Utf8               java/nio/ByteOrder\n+   #88 = Utf8               LITTLE_ENDIAN\n+   #89 = Utf8               Ljava/nio/ByteOrder;\n+   #90 = Utf8               (Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+   #91 = Utf8               setClearCode\n+   #92 = Utf8               (I)V\n+   #93 = Utf8               initializeTables\n+   #94 = Utf8               getPrefixesLength\n+   #95 = Utf8               getClearCode\n+   #96 = Utf8               setTableSize\n+   #97 = Utf8               getTableSize\n+   #98 = Utf8               (IBI)I\n+   #99 = Utf8               getPrefix\n+  #100 = Utf8               (I)I\n+  #101 = Utf8               setPrefix\n+  #102 = Utf8               (II)V\n+  #103 = Utf8               readNextCode\n+  #104 = Utf8               (Ljava/lang/String;)V\n+  #105 = Utf8               getCodeSize\n+  #106 = Utf8               incrementCodeSize\n+  #107 = Utf8               append\n+  #108 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #109 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #110 = Utf8               toString\n+  #111 = Utf8               ()Ljava/lang/String;\n+  #112 = Utf8               addRepeatOfPreviousCode\n+  #113 = Utf8               expandCodeToOutputStack\n+  #114 = Utf8               (IZ)I\n {\n   private static final int MAX_CODE_SIZE = 13;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 13\n \n   private static final int MAX_TABLE_SIZE = 8192;\n"}]}
