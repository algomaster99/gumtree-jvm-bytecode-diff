{"diffoscope-json-version": 1, "source1": "first/RandomStringUtils.class", "source2": "second/RandomStringUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -3,155 +3,153 @@\n \n import java.util.Random;\n \n public class RandomStringUtils\n {\n     private static final Random RANDOM;\n     \n-    public static String random(final int count) {\n-        return random(count, false, false);\n+    public static String random(final int n) {\n+        return random(n, false, false);\n     }\n     \n-    public static String randomAscii(final int count) {\n-        return random(count, 32, 127, false, false);\n+    public static String randomAscii(final int n) {\n+        return random(n, 32, 127, false, false);\n     }\n     \n-    public static String randomAscii(final int minLengthInclusive, final int maxLengthExclusive) {\n-        return randomAscii(RandomUtils.nextInt(minLengthInclusive, maxLengthExclusive));\n+    public static String randomAscii(final int n, final int n2) {\n+        return randomAscii(RandomUtils.nextInt(n, n2));\n     }\n     \n-    public static String randomAlphabetic(final int count) {\n-        return random(count, true, false);\n+    public static String randomAlphabetic(final int n) {\n+        return random(n, true, false);\n     }\n     \n-    public static String randomAlphabetic(final int minLengthInclusive, final int maxLengthExclusive) {\n-        return randomAlphabetic(RandomUtils.nextInt(minLengthInclusive, maxLengthExclusive));\n+    public static String randomAlphabetic(final int n, final int n2) {\n+        return randomAlphabetic(RandomUtils.nextInt(n, n2));\n     }\n     \n-    public static String randomAlphanumeric(final int count) {\n-        return random(count, true, true);\n+    public static String randomAlphanumeric(final int n) {\n+        return random(n, true, true);\n     }\n     \n-    public static String randomAlphanumeric(final int minLengthInclusive, final int maxLengthExclusive) {\n-        return randomAlphanumeric(RandomUtils.nextInt(minLengthInclusive, maxLengthExclusive));\n+    public static String randomAlphanumeric(final int n, final int n2) {\n+        return randomAlphanumeric(RandomUtils.nextInt(n, n2));\n     }\n     \n-    public static String randomGraph(final int count) {\n-        return random(count, 33, 126, false, false);\n+    public static String randomGraph(final int n) {\n+        return random(n, 33, 126, false, false);\n     }\n     \n-    public static String randomGraph(final int minLengthInclusive, final int maxLengthExclusive) {\n-        return randomGraph(RandomUtils.nextInt(minLengthInclusive, maxLengthExclusive));\n+    public static String randomGraph(final int n, final int n2) {\n+        return randomGraph(RandomUtils.nextInt(n, n2));\n     }\n     \n-    public static String randomNumeric(final int count) {\n-        return random(count, false, true);\n+    public static String randomNumeric(final int n) {\n+        return random(n, false, true);\n     }\n     \n-    public static String randomNumeric(final int minLengthInclusive, final int maxLengthExclusive) {\n-        return randomNumeric(RandomUtils.nextInt(minLengthInclusive, maxLengthExclusive));\n+    public static String randomNumeric(final int n, final int n2) {\n+        return randomNumeric(RandomUtils.nextInt(n, n2));\n     }\n     \n-    public static String randomPrint(final int count) {\n-        return random(count, 32, 126, false, false);\n+    public static String randomPrint(final int n) {\n+        return random(n, 32, 126, false, false);\n     }\n     \n-    public static String randomPrint(final int minLengthInclusive, final int maxLengthExclusive) {\n-        return randomPrint(RandomUtils.nextInt(minLengthInclusive, maxLengthExclusive));\n+    public static String randomPrint(final int n, final int n2) {\n+        return randomPrint(RandomUtils.nextInt(n, n2));\n     }\n     \n-    public static String random(final int count, final boolean letters, final boolean numbers) {\n-        return random(count, 0, 0, letters, numbers);\n+    public static String random(final int n, final boolean b, final boolean b2) {\n+        return random(n, 0, 0, b, b2);\n     }\n     \n-    public static String random(final int count, final int start, final int end, final boolean letters, final boolean numbers) {\n-        return random(count, start, end, letters, numbers, null, RandomStringUtils.RANDOM);\n+    public static String random(final int n, final int n2, final int n3, final boolean b, final boolean b2) {\n+        return random(n, n2, n3, b, b2, null, RandomStringUtils.RANDOM);\n     }\n     \n-    public static String random(final int count, final int start, final int end, final boolean letters, final boolean numbers, final char... chars) {\n-        return random(count, start, end, letters, numbers, chars, RandomStringUtils.RANDOM);\n+    public static String random(final int n, final int n2, final int n3, final boolean b, final boolean b2, final char... array) {\n+        return random(n, n2, n3, b, b2, array, RandomStringUtils.RANDOM);\n     }\n     \n-    public static String random(int count, int start, int end, final boolean letters, final boolean numbers, final char[] chars, final Random random) {\n-        if (count == 0) {\n+    public static String random(int n, int i, int length, final boolean b, final boolean b2, final char[] array, final Random random) {\n+        if (n == 0) {\n             return \"\";\n         }\n-        if (count < 0) {\n-            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n+        if (n < 0) {\n+            throw new IllegalArgumentException(\"Requested random string length \" + n + \" is less than 0.\");\n         }\n-        if (chars != null && chars.length == 0) {\n+        if (array != null && array.length == 0) {\n             throw new IllegalArgumentException(\"The chars array must not be empty\");\n         }\n-        if (start == 0 && end == 0) {\n-            if (chars != null) {\n-                end = chars.length;\n+        if (i == 0 && length == 0) {\n+            if (array != null) {\n+                length = array.length;\n             }\n-            else if (!letters && !numbers) {\n-                end = 1114111;\n+            else if (!b && !b2) {\n+                length = 1114111;\n             }\n             else {\n-                end = 123;\n-                start = 32;\n+                length = 123;\n+                i = 32;\n             }\n         }\n-        else if (end <= start) {\n-            throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n+        else if (length <= i) {\n+            throw new IllegalArgumentException(\"Parameter end (\" + length + \") must be greater than start (\" + i + \")\");\n         }\n-        final int zero_digit_ascii = 48;\n-        final int first_letter_ascii = 65;\n-        if (chars == null && ((numbers && end <= 48) || (letters && end <= 65))) {\n-            throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater then (\" + 48 + \") for generating digits or greater then (\" + 65 + \") for generating letters.\");\n+        if (array == null && ((b2 && length <= 48) || (b && length <= 65))) {\n+            throw new IllegalArgumentException(\"Parameter end (\" + length + \") must be greater then (\" + 48 + \") for generating digits or greater then (\" + 65 + \") for generating letters.\");\n         }\n-        final StringBuilder builder = new StringBuilder(count);\n-        final int gap = end - start;\n-        while (count-- != 0) {\n+        final StringBuilder sb = new StringBuilder(n);\n+        final int n2 = length - i;\n+        while (n-- != 0) {\n             int codePoint;\n-            if (chars == null) {\n-                codePoint = random.nextInt(gap) + start;\n+            if (array == null) {\n+                codePoint = random.nextInt(n2) + i;\n                 switch (Character.getType(codePoint)) {\n                     case 0:\n                     case 18:\n                     case 19: {\n-                        ++count;\n+                        ++n;\n                         continue;\n                     }\n                 }\n             }\n             else {\n-                codePoint = chars[random.nextInt(gap) + start];\n+                codePoint = array[random.nextInt(n2) + i];\n             }\n-            final int numberOfChars = Character.charCount(codePoint);\n-            if (count == 0 && numberOfChars > 1) {\n-                ++count;\n-            }\n-            else if ((letters && Character.isLetter(codePoint)) || (numbers && Character.isDigit(codePoint)) || (!letters && !numbers)) {\n-                builder.appendCodePoint(codePoint);\n-                if (numberOfChars != 2) {\n+            final int charCount = Character.charCount(codePoint);\n+            if (n == 0 && charCount > 1) {\n+                ++n;\n+            }\n+            else if ((b && Character.isLetter(codePoint)) || (b2 && Character.isDigit(codePoint)) || (!b && !b2)) {\n+                sb.appendCodePoint(codePoint);\n+                if (charCount != 2) {\n                     continue;\n                 }\n-                --count;\n+                --n;\n             }\n             else {\n-                ++count;\n+                ++n;\n             }\n         }\n-        return builder.toString();\n+        return sb.toString();\n     }\n     \n-    public static String random(final int count, final String chars) {\n-        if (chars == null) {\n-            return random(count, 0, 0, false, false, null, RandomStringUtils.RANDOM);\n+    public static String random(final int n, final String s) {\n+        if (s == null) {\n+            return random(n, 0, 0, false, false, null, RandomStringUtils.RANDOM);\n         }\n-        return random(count, chars.toCharArray());\n+        return random(n, s.toCharArray());\n     }\n     \n-    public static String random(final int count, final char... chars) {\n-        if (chars == null) {\n-            return random(count, 0, 0, false, false, null, RandomStringUtils.RANDOM);\n+    public static String random(final int n, final char... array) {\n+        if (array == null) {\n+            return random(n, 0, 0, false, false, null, RandomStringUtils.RANDOM);\n         }\n-        return random(count, 0, chars.length, false, false, chars, RandomStringUtils.RANDOM);\n+        return random(n, 0, array.length, false, false, array, RandomStringUtils.RANDOM);\n     }\n     \n     static {\n         RANDOM = new Random();\n     }\n }\n"}]}
