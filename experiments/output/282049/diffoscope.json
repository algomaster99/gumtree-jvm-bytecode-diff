{"diffoscope-json-version": 1, "source1": "first/CharSequenceReader.class", "source2": "second/CharSequenceReader.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,44 +14,44 @@\n     private final int start;\n     private final Integer end;\n     \n     public CharSequenceReader(final CharSequence charSequence) {\n         this(charSequence, 0);\n     }\n     \n-    public CharSequenceReader(final CharSequence charSequence, final int start) {\n-        this(charSequence, start, Integer.MAX_VALUE);\n+    public CharSequenceReader(final CharSequence charSequence, final int n) {\n+        this(charSequence, n, Integer.MAX_VALUE);\n     }\n     \n-    public CharSequenceReader(final CharSequence charSequence, final int start, final int end) {\n-        if (start < 0) {\n-            throw new IllegalArgumentException(\"Start index is less than zero: \" + start);\n+    public CharSequenceReader(final CharSequence charSequence, final int mark, final int n) {\n+        if (mark < 0) {\n+            throw new IllegalArgumentException(\"Start index is less than zero: \" + mark);\n         }\n-        if (end < start) {\n-            throw new IllegalArgumentException(\"End index is less than start \" + start + \": \" + end);\n+        if (n < mark) {\n+            throw new IllegalArgumentException(\"End index is less than start \" + mark + \": \" + n);\n         }\n         this.charSequence = ((charSequence != null) ? charSequence : \"\");\n-        this.start = start;\n-        this.end = Integer.valueOf(end);\n-        this.idx = start;\n-        this.mark = start;\n+        this.start = mark;\n+        this.end = Integer.valueOf(n);\n+        this.idx = mark;\n+        this.mark = mark;\n     }\n     \n     @Override\n     public void close() {\n         this.idx = this.start;\n         this.mark = this.start;\n     }\n     \n     private int end() {\n         return Math.min(this.charSequence.length(), (this.end == null) ? Integer.MAX_VALUE : ((int)this.end));\n     }\n     \n     @Override\n-    public void mark(final int readAheadLimit) {\n+    public void mark(final int n) {\n         this.mark = this.idx;\n     }\n     \n     @Override\n     public boolean markSupported() {\n         return true;\n     }\n@@ -61,79 +61,78 @@\n         if (this.idx >= this.end()) {\n             return -1;\n         }\n         return this.charSequence.charAt(this.idx++);\n     }\n     \n     @Override\n-    public int read(final char[] array, final int offset, final int length) {\n+    public int read(final char[] dst, final int dstBegin, final int n) {\n         if (this.idx >= this.end()) {\n             return -1;\n         }\n-        Objects.requireNonNull(array, \"array\");\n-        if (length < 0 || offset < 0 || offset + length > array.length) {\n-            throw new IndexOutOfBoundsException(\"Array Size=\" + array.length + \", offset=\" + offset + \", length=\" + length);\n+        Objects.requireNonNull(dst, \"array\");\n+        if (n < 0 || dstBegin < 0 || dstBegin + n > dst.length) {\n+            throw new IndexOutOfBoundsException(\"Array Size=\" + dst.length + \", offset=\" + dstBegin + \", length=\" + n);\n         }\n         if (this.charSequence instanceof String) {\n-            final int count = Math.min(length, this.end() - this.idx);\n-            ((String)this.charSequence).getChars(this.idx, this.idx + count, array, offset);\n-            this.idx += count;\n-            return count;\n+            final int min = Math.min(n, this.end() - this.idx);\n+            ((String)this.charSequence).getChars(this.idx, this.idx + min, dst, dstBegin);\n+            this.idx += min;\n+            return min;\n         }\n         if (this.charSequence instanceof StringBuilder) {\n-            final int count = Math.min(length, this.end() - this.idx);\n+            final int min2 = Math.min(n, this.end() - this.idx);\n             ((StringBuilder)this.charSequence).getChars();\n-            this.idx += count;\n-            return count;\n+            this.idx += min2;\n+            return min2;\n         }\n         if (this.charSequence instanceof StringBuffer) {\n-            final int count = Math.min(length, this.end() - this.idx);\n-            ((StringBuffer)this.charSequence).getChars(this.idx, this.idx + count, array, offset);\n-            this.idx += count;\n-            return count;\n-        }\n-        int count = 0;\n-        for (int i = 0; i < length; ++i) {\n-            final int c = this.read();\n-            if (c == -1) {\n-                return count;\n+            final int min3 = Math.min(n, this.end() - this.idx);\n+            ((StringBuffer)this.charSequence).getChars(this.idx, this.idx + min3, dst, dstBegin);\n+            this.idx += min3;\n+            return min3;\n+        }\n+        int n2 = 0;\n+        for (int i = 0; i < n; ++i) {\n+            final int read = this.read();\n+            if (read == -1) {\n+                return n2;\n             }\n-            array[offset + i] = (char)c;\n-            ++count;\n+            dst[dstBegin + i] = (char)read;\n+            ++n2;\n         }\n-        return count;\n+        return n2;\n     }\n     \n     @Override\n     public boolean ready() {\n         return this.idx < this.end();\n     }\n     \n     @Override\n     public void reset() {\n         this.idx = this.mark;\n     }\n     \n     @Override\n-    public long skip(final long n) {\n-        if (n < 0L) {\n-            throw new IllegalArgumentException(\"Number of characters to skip is less than zero: \" + n);\n+    public long skip(final long lng) {\n+        if (lng < 0L) {\n+            throw new IllegalArgumentException(\"Number of characters to skip is less than zero: \" + lng);\n         }\n         if (this.idx >= this.end()) {\n             return 0L;\n         }\n-        final int dest = (int)Math.min(this.end(), (long)this.idx + n);\n-        final int count = dest - this.idx;\n-        this.idx = dest;\n-        return count;\n+        final int idx = (int)Math.min(this.end(), (long)this.idx + lng);\n+        final int n = idx - this.idx;\n+        this.idx = idx;\n+        return n;\n     }\n     \n     private int start() {\n         return Math.min(this.charSequence.length(), this.start);\n     }\n     \n     @Override\n     public String toString() {\n-        final CharSequence subSequence = this.charSequence.subSequence(this.start(), this.end());\n-        return subSequence.toString();\n+        return this.charSequence.subSequence(this.start(), this.end()).toString();\n     }\n }\n"}]}
