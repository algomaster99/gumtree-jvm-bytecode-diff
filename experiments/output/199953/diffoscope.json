{"diffoscope-json-version": 1, "source1": "first/ArrayElementValue.class", "source2": "second/ArrayElementValue.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -4,27 +4,28 @@\n import java.io.IOException;\n import java.io.DataOutputStream;\n \n public class ArrayElementValue extends ElementValue\n {\n     private final ElementValue[] elementValues;\n     \n-    public ArrayElementValue(final int type, final ElementValue[] datums, final ConstantPool cpool) {\n-        super(type, cpool);\n-        if (type != 91) {\n-            throw new IllegalArgumentException(\"Only element values of type array can be built with this ctor - type specified: \" + type);\n+    public ArrayElementValue(final int i, final ElementValue[] elementValues, final ConstantPool constantPool) {\n+        super(i, constantPool);\n+        if (i != 91) {\n+            throw new IllegalArgumentException(\"Only element values of type array can be built with this ctor - type specified: \" + i);\n         }\n-        this.elementValues = datums;\n+        this.elementValues = elementValues;\n     }\n     \n-    public void dump(final DataOutputStream dos) throws IOException {\n-        dos.writeByte(super.getType());\n-        dos.writeShort(this.elementValues.length);\n-        for (final ElementValue evalue : this.elementValues) {\n-            evalue.dump(dos);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeByte(super.getType());\n+        dataOutputStream.writeShort(this.elementValues.length);\n+        final ElementValue[] elementValues = this.elementValues;\n+        for (int length = elementValues.length, i = 0; i < length; ++i) {\n+            elementValues[i].dump(dataOutputStream);\n         }\n     }\n     \n     public ElementValue[] getElementValuesArray() {\n         return this.elementValues;\n     }\n     \n"}]}
