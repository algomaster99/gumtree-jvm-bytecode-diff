{"diffoscope-json-version": 1, "source1": "first/XZUtils.class", "source2": "second/XZUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,74 +11,73 @@\n     private static final FileNameUtil fileNameUtil;\n     private static final byte[] HEADER_MAGIC;\n     private static volatile XZUtils.CachedAvailability cachedXZAvailability;\n     \n     private XZUtils() {\n     }\n     \n-    public static boolean matches(final byte[] signature, final int length) {\n-        if (length < XZUtils.HEADER_MAGIC.length) {\n+    public static boolean matches(final byte[] array, final int n) {\n+        if (n < XZUtils.HEADER_MAGIC.length) {\n             return false;\n         }\n         for (int i = 0; i < XZUtils.HEADER_MAGIC.length; ++i) {\n-            if (signature[i] != XZUtils.HEADER_MAGIC[i]) {\n+            if (array[i] != XZUtils.HEADER_MAGIC[i]) {\n                 return false;\n             }\n         }\n         return true;\n     }\n     \n     public static boolean isXZCompressionAvailable() {\n-        final XZUtils.CachedAvailability cachedResult = XZUtils.cachedXZAvailability;\n-        if (cachedResult != XZUtils.CachedAvailability.DONT_CACHE) {\n-            return cachedResult == XZUtils.CachedAvailability.CACHED_AVAILABLE;\n+        final XZUtils.CachedAvailability cachedXZAvailability = XZUtils.cachedXZAvailability;\n+        if (cachedXZAvailability != XZUtils.CachedAvailability.DONT_CACHE) {\n+            return cachedXZAvailability == XZUtils.CachedAvailability.CACHED_AVAILABLE;\n         }\n         return internalIsXZCompressionAvailable();\n     }\n     \n     private static boolean internalIsXZCompressionAvailable() {\n         try {\n             XZCompressorInputStream.matches((byte[])null, 0);\n             return true;\n         }\n-        catch (final NoClassDefFoundError error) {\n+        catch (final NoClassDefFoundError noClassDefFoundError) {\n             return false;\n         }\n     }\n     \n-    public static boolean isCompressedFilename(final String fileName) {\n-        return XZUtils.fileNameUtil.isCompressedFilename(fileName);\n+    public static boolean isCompressedFilename(final String s) {\n+        return XZUtils.fileNameUtil.isCompressedFilename(s);\n     }\n     \n-    public static String getUncompressedFilename(final String fileName) {\n-        return XZUtils.fileNameUtil.getUncompressedFilename(fileName);\n+    public static String getUncompressedFilename(final String s) {\n+        return XZUtils.fileNameUtil.getUncompressedFilename(s);\n     }\n     \n-    public static String getCompressedFilename(final String fileName) {\n-        return XZUtils.fileNameUtil.getCompressedFilename(fileName);\n+    public static String getCompressedFilename(final String s) {\n+        return XZUtils.fileNameUtil.getCompressedFilename(s);\n     }\n     \n-    public static void setCacheXZAvailablity(final boolean doCache) {\n-        if (!doCache) {\n+    public static void setCacheXZAvailablity(final boolean b) {\n+        if (!b) {\n             XZUtils.cachedXZAvailability = XZUtils.CachedAvailability.DONT_CACHE;\n         }\n         else if (XZUtils.cachedXZAvailability == XZUtils.CachedAvailability.DONT_CACHE) {\n-            final boolean hasXz = internalIsXZCompressionAvailable();\n-            XZUtils.cachedXZAvailability = (hasXz ? XZUtils.CachedAvailability.CACHED_AVAILABLE : XZUtils.CachedAvailability.CACHED_UNAVAILABLE);\n+            XZUtils.cachedXZAvailability = (internalIsXZCompressionAvailable() ? XZUtils.CachedAvailability.CACHED_AVAILABLE : XZUtils.CachedAvailability.CACHED_UNAVAILABLE);\n         }\n     }\n     \n     static XZUtils.CachedAvailability getCachedXZAvailability() {\n         return XZUtils.cachedXZAvailability;\n     }\n     \n     static {\n         HEADER_MAGIC = new byte[] { -3, 55, 122, 88, 90, 0 };\n-        final Map<String, String> uncompressSuffix = new HashMap<String, String>();\n-        uncompressSuffix.put(\".txz\", \".tar\");\n-        uncompressSuffix.put(\".xz\", \"\");\n-        uncompressSuffix.put(\"-xz\", \"\");\n-        fileNameUtil = new FileNameUtil((Map)uncompressSuffix, \".xz\");\n+        final HashMap hashMap = new HashMap();\n+        hashMap.put(\".txz\", \".tar\");\n+        hashMap.put(\".xz\", \"\");\n+        hashMap.put(\"-xz\", \"\");\n+        fileNameUtil = new FileNameUtil((Map)hashMap, \".xz\");\n         XZUtils.cachedXZAvailability = XZUtils.CachedAvailability.DONT_CACHE;\n         setCacheXZAvailablity(!OsgiUtils.isRunningInOsgiEnvironment());\n     }\n }\n"}]}
