{"diffoscope-json-version": 1, "source1": "first/RegexFileFilter.class", "source2": "second/RegexFileFilter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,50 +14,50 @@\n \n public class RegexFileFilter extends AbstractFileFilter implements Serializable\n {\n     private static final long serialVersionUID = 4269646126155225062L;\n     private final Pattern pattern;\n     private final Function<Path, String> pathToString;\n     \n-    private static Pattern compile(final String pattern, final int flags) {\n-        Objects.requireNonNull(pattern, \"pattern\");\n-        return Pattern.compile(pattern, flags);\n+    private static Pattern compile(final String s, final int flags) {\n+        Objects.requireNonNull(s, \"pattern\");\n+        return Pattern.compile(s, flags);\n     }\n     \n     private static int toFlags(final IOCase ioCase) {\n         return IOCase.isCaseSensitive(ioCase) ? 0 : 2;\n     }\n     \n     public RegexFileFilter(final Pattern pattern) {\n-        this(pattern, (Function<Path, String>)(p -> p.getFileName().toString()));\n+        this(pattern, (Function<Path, String>)(path -> path.getFileName().toString()));\n     }\n     \n     public RegexFileFilter(final Pattern pattern, final Function<Path, String> pathToString) {\n         Objects.requireNonNull(pattern, \"pattern\");\n         this.pattern = pattern;\n         this.pathToString = pathToString;\n     }\n     \n-    public RegexFileFilter(final String pattern) {\n-        this(pattern, 0);\n+    public RegexFileFilter(final String s) {\n+        this(s, 0);\n     }\n     \n-    public RegexFileFilter(final String pattern, final int flags) {\n-        this(compile(pattern, flags));\n+    public RegexFileFilter(final String s, final int n) {\n+        this(compile(s, n));\n     }\n     \n-    public RegexFileFilter(final String pattern, final IOCase ioCase) {\n-        this(compile(pattern, toFlags(ioCase)));\n+    public RegexFileFilter(final String s, final IOCase ioCase) {\n+        this(compile(s, toFlags(ioCase)));\n     }\n     \n-    public boolean accept(final File dir, final String name) {\n-        return this.pattern.matcher(name).matches();\n+    public boolean accept(final File file, final String input) {\n+        return this.pattern.matcher(input).matches();\n     }\n     \n-    public FileVisitResult accept(final Path path, final BasicFileAttributes attributes) {\n+    public FileVisitResult accept(final Path path, final BasicFileAttributes basicFileAttributes) {\n         return this.toFileVisitResult(this.pattern.matcher(this.pathToString.apply(path)).matches());\n     }\n     \n     public String toString() {\n         return \"RegexFileFilter [pattern=\" + this.pattern + \"]\";\n     }\n }\n"}]}
