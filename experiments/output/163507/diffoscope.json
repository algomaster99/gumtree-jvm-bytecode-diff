{"diffoscope-json-version": 1, "source1": "first/ZipArchiveOutputStream.class", "source2": "second/ZipArchiveOutputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,306 +1,306 @@\n-  SHA-256 checksum a1be3faf51749fb4be43101d1a0ae435de768f7b8c5b835992576dd57244ce40\n+  SHA-256 checksum 02fe7ed2ac5aee2971c5c9b63eb7f40bae86cc7013bff632e9074d9220b460d0\n   Compiled from \"ZipArchiveOutputStream.java\"\n public class org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream extends org.apache.commons.compress.archivers.ArchiveOutputStream\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #10                         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n   super_class: #295                       // org/apache/commons/compress/archivers/ArchiveOutputStream\n   interfaces: 0, fields: 67, methods: 63, attributes: 2\n Constant pool:\n-     #1 = Class              #621         // java/util/zip/ZipEntry\n-     #2 = Class              #622         // java/util/zip/Deflater\n-     #3 = Class              #623         // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-     #4 = Class              #624         // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-     #5 = Class              #625         // org/apache/commons/compress/archivers/zip/ZipConstants\n-     #6 = Methodref          #295.#626    // org/apache/commons/compress/archivers/ArchiveOutputStream.\"<init>\":()V\n-     #7 = Fieldref           #10.#627     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.finished:Z\n-     #8 = String             #628         //\n-     #9 = Fieldref           #10.#629     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.comment:Ljava/lang/String;\n-    #10 = Class              #630         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-    #11 = Fieldref           #10.#631     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.level:I\n-    #12 = Fieldref           #10.#632     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.hasCompressionLevelChanged:Z\n-    #13 = Fieldref           #10.#633     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.method:I\n-    #14 = Class              #634         // java/util/LinkedList\n-    #15 = Methodref          #14.#626     // java/util/LinkedList.\"<init>\":()V\n-    #16 = Fieldref           #10.#635     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.entries:Ljava/util/List;\n-    #17 = Fieldref           #10.#636     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.cdOffset:J\n-    #18 = Fieldref           #10.#637     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.cdLength:J\n-    #19 = Class              #638         // java/util/HashMap\n-    #20 = Methodref          #19.#626     // java/util/HashMap.\"<init>\":()V\n-    #21 = Fieldref           #10.#639     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.metaData:Ljava/util/Map;\n-    #22 = String             #640         // UTF8\n-    #23 = Fieldref           #10.#641     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.encoding:Ljava/lang/String;\n-    #24 = Methodref          #3.#642      // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-    #25 = Fieldref           #10.#643     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-    #26 = Fieldref           #10.#644     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.useUTF8Flag:Z\n-    #27 = Fieldref           #10.#645     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.fallbackToUTF8:Z\n-    #28 = Fieldref           #300.#646    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy.NEVER:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n-    #29 = Fieldref           #10.#647     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.createUnicodeExtraFields:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n-    #30 = Fieldref           #10.#648     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.hasUsedZip64:Z\n-    #31 = Fieldref           #649.#650    // org/apache/commons/compress/archivers/zip/Zip64Mode.AsNeeded:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-    #32 = Fieldref           #10.#651     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.zip64Mode:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+     #1 = Class              #611         // java/util/zip/ZipEntry\n+     #2 = Class              #612         // java/util/zip/Deflater\n+     #3 = Class              #613         // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+     #4 = Class              #614         // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+     #5 = Class              #615         // org/apache/commons/compress/archivers/zip/ZipConstants\n+     #6 = Methodref          #295.#616    // org/apache/commons/compress/archivers/ArchiveOutputStream.\"<init>\":()V\n+     #7 = Fieldref           #10.#617     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.finished:Z\n+     #8 = String             #618         //\n+     #9 = Fieldref           #10.#619     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.comment:Ljava/lang/String;\n+    #10 = Class              #620         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+    #11 = Fieldref           #10.#621     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.level:I\n+    #12 = Fieldref           #10.#622     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.hasCompressionLevelChanged:Z\n+    #13 = Fieldref           #10.#623     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.method:I\n+    #14 = Class              #624         // java/util/LinkedList\n+    #15 = Methodref          #14.#616     // java/util/LinkedList.\"<init>\":()V\n+    #16 = Fieldref           #10.#625     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.entries:Ljava/util/List;\n+    #17 = Fieldref           #10.#626     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.cdOffset:J\n+    #18 = Fieldref           #10.#627     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.cdLength:J\n+    #19 = Class              #628         // java/util/HashMap\n+    #20 = Methodref          #19.#616     // java/util/HashMap.\"<init>\":()V\n+    #21 = Fieldref           #10.#629     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.metaData:Ljava/util/Map;\n+    #22 = String             #630         // UTF8\n+    #23 = Fieldref           #10.#631     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.encoding:Ljava/lang/String;\n+    #24 = Methodref          #3.#632      // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+    #25 = Fieldref           #10.#633     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+    #26 = Fieldref           #10.#634     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.useUTF8Flag:Z\n+    #27 = Fieldref           #10.#635     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.fallbackToUTF8:Z\n+    #28 = Fieldref           #300.#636    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy.NEVER:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n+    #29 = Fieldref           #10.#637     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.createUnicodeExtraFields:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n+    #30 = Fieldref           #10.#638     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.hasUsedZip64:Z\n+    #31 = Fieldref           #507.#639    // org/apache/commons/compress/archivers/zip/Zip64Mode.AsNeeded:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+    #32 = Fieldref           #10.#640     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.zip64Mode:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n     #33 = Integer            32768\n-    #34 = Fieldref           #10.#652     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.copyBuffer:[B\n-    #35 = Methodref          #653.#654    // java/util/Calendar.getInstance:()Ljava/util/Calendar;\n-    #36 = Fieldref           #10.#655     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.calendarInstance:Ljava/util/Calendar;\n-    #37 = Fieldref           #10.#656     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.out:Ljava/io/OutputStream;\n-    #38 = Fieldref           #10.#657     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.channel:Ljava/nio/channels/SeekableByteChannel;\n-    #39 = Methodref          #2.#658      // java/util/zip/Deflater.\"<init>\":(IZ)V\n-    #40 = Fieldref           #10.#659     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.def:Ljava/util/zip/Deflater;\n-    #41 = Methodref          #660.#661    // org/apache/commons/compress/archivers/zip/StreamCompressor.create:(Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-    #42 = Fieldref           #10.#662     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-    #43 = Methodref          #663.#664    // java/io/File.toPath:()Ljava/nio/file/Path;\n-    #44 = Fieldref           #665.#666    // java/nio/file/StandardOpenOption.CREATE:Ljava/nio/file/StandardOpenOption;\n-    #45 = Fieldref           #665.#667    // java/nio/file/StandardOpenOption.WRITE:Ljava/nio/file/StandardOpenOption;\n-    #46 = Fieldref           #665.#668    // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n-    #47 = Fieldref           #665.#669    // java/nio/file/StandardOpenOption.TRUNCATE_EXISTING:Ljava/nio/file/StandardOpenOption;\n-    #48 = Methodref          #670.#671    // java/util/EnumSet.of:(Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;\n-    #49 = Class              #672         // java/nio/file/attribute/FileAttribute\n-    #50 = Methodref          #673.#674    // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n-    #51 = Methodref          #660.#675    // org/apache/commons/compress/archivers/zip/StreamCompressor.create:(Ljava/nio/channels/SeekableByteChannel;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-    #52 = Class              #676         // java/io/IOException\n-    #53 = Methodref          #677.#678    // org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n-    #54 = Class              #679         // java/io/FileOutputStream\n-    #55 = Methodref          #54.#680     // java/io/FileOutputStream.\"<init>\":(Ljava/io/File;)V\n-    #56 = Methodref          #3.#681      // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.isUTF8:(Ljava/lang/String;)Z\n-    #57 = String             #682         // This archive has already been finished\n-    #58 = Methodref          #52.#683     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-    #59 = Fieldref           #10.#684     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.entry:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;\n-    #60 = String             #685         // This archive contains unclosed entries.\n-    #61 = Methodref          #660.#686    // org/apache/commons/compress/archivers/zip/StreamCompressor.getTotalBytesWritten:()J\n-    #62 = Methodref          #10.#687     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeCentralDirectoryInChunks:()V\n-    #63 = Methodref          #10.#688     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeZip64CentralDirectory:()V\n-    #64 = Methodref          #10.#689     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeCentralDirectoryEnd:()V\n-    #65 = InterfaceMethodref #690.#691    // java/util/Map.clear:()V\n-    #66 = InterfaceMethodref #692.#691    // java/util/List.clear:()V\n-    #67 = Methodref          #660.#693    // org/apache/commons/compress/archivers/zip/StreamCompressor.close:()V\n-    #68 = Class              #694         // java/io/ByteArrayOutputStream\n+    #34 = Fieldref           #10.#641     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.copyBuffer:[B\n+    #35 = Methodref          #642.#643    // java/util/Calendar.getInstance:()Ljava/util/Calendar;\n+    #36 = Fieldref           #10.#644     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.calendarInstance:Ljava/util/Calendar;\n+    #37 = Fieldref           #10.#645     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.out:Ljava/io/OutputStream;\n+    #38 = Fieldref           #10.#646     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.channel:Ljava/nio/channels/SeekableByteChannel;\n+    #39 = Methodref          #2.#647      // java/util/zip/Deflater.\"<init>\":(IZ)V\n+    #40 = Fieldref           #10.#648     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.def:Ljava/util/zip/Deflater;\n+    #41 = Methodref          #435.#649    // org/apache/commons/compress/archivers/zip/StreamCompressor.create:(Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+    #42 = Fieldref           #10.#650     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+    #43 = Methodref          #432.#651    // java/io/File.toPath:()Ljava/nio/file/Path;\n+    #44 = Fieldref           #652.#653    // java/nio/file/StandardOpenOption.CREATE:Ljava/nio/file/StandardOpenOption;\n+    #45 = Fieldref           #652.#654    // java/nio/file/StandardOpenOption.WRITE:Ljava/nio/file/StandardOpenOption;\n+    #46 = Fieldref           #652.#655    // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+    #47 = Fieldref           #652.#656    // java/nio/file/StandardOpenOption.TRUNCATE_EXISTING:Ljava/nio/file/StandardOpenOption;\n+    #48 = Methodref          #657.#658    // java/util/EnumSet.of:(Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;\n+    #49 = Class              #659         // java/nio/file/attribute/FileAttribute\n+    #50 = Methodref          #660.#661    // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+    #51 = Methodref          #435.#662    // org/apache/commons/compress/archivers/zip/StreamCompressor.create:(Ljava/nio/channels/SeekableByteChannel;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+    #52 = Class              #663         // java/io/IOException\n+    #53 = Methodref          #664.#665    // org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n+    #54 = Class              #666         // java/io/FileOutputStream\n+    #55 = Methodref          #54.#667     // java/io/FileOutputStream.\"<init>\":(Ljava/io/File;)V\n+    #56 = Methodref          #3.#668      // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.isUTF8:(Ljava/lang/String;)Z\n+    #57 = String             #669         // This archive has already been finished\n+    #58 = Methodref          #52.#670     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+    #59 = Fieldref           #10.#671     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.entry:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;\n+    #60 = String             #672         // This archive contains unclosed entries.\n+    #61 = Methodref          #435.#673    // org/apache/commons/compress/archivers/zip/StreamCompressor.getTotalBytesWritten:()J\n+    #62 = Methodref          #10.#674     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeCentralDirectoryInChunks:()V\n+    #63 = Methodref          #10.#675     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeZip64CentralDirectory:()V\n+    #64 = Methodref          #10.#676     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeCentralDirectoryEnd:()V\n+    #65 = InterfaceMethodref #677.#678    // java/util/Map.clear:()V\n+    #66 = InterfaceMethodref #679.#678    // java/util/List.clear:()V\n+    #67 = Methodref          #435.#680    // org/apache/commons/compress/archivers/zip/StreamCompressor.close:()V\n+    #68 = Class              #681         // java/io/ByteArrayOutputStream\n     #69 = Integer            70000\n-    #70 = Methodref          #68.#695     // java/io/ByteArrayOutputStream.\"<init>\":(I)V\n-    #71 = InterfaceMethodref #692.#696    // java/util/List.iterator:()Ljava/util/Iterator;\n-    #72 = InterfaceMethodref #697.#698    // java/util/Iterator.hasNext:()Z\n-    #73 = InterfaceMethodref #697.#699    // java/util/Iterator.next:()Ljava/lang/Object;\n-    #74 = Class              #700         // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-    #75 = Methodref          #10.#701     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.createCentralFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B\n-    #76 = Methodref          #68.#702     // java/io/ByteArrayOutputStream.write:([B)V\n-    #77 = Methodref          #68.#703     // java/io/ByteArrayOutputStream.toByteArray:()[B\n-    #78 = Methodref          #10.#704     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeCounted:([B)V\n-    #79 = Methodref          #68.#705     // java/io/ByteArrayOutputStream.reset:()V\n-    #80 = Methodref          #10.#706     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.preClose:()V\n-    #81 = Methodref          #10.#707     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.flushDeflater:()V\n-    #82 = Methodref          #162.#708    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$000:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n-    #83 = Methodref          #660.#709    // org/apache/commons/compress/archivers/zip/StreamCompressor.getCrc32:()J\n-    #84 = Methodref          #660.#710    // org/apache/commons/compress/archivers/zip/StreamCompressor.getBytesRead:()J\n-    #85 = Methodref          #162.#711    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$102:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n-    #86 = Methodref          #162.#712    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-    #87 = Methodref          #10.#713     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getEffectiveZip64Mode:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-    #88 = Methodref          #10.#714     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.handleSizesAndCrc:(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-    #89 = Methodref          #10.#715     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.closeEntry:(ZZ)V\n-    #90 = Methodref          #660.#705    // org/apache/commons/compress/archivers/zip/StreamCompressor.reset:()V\n-    #91 = Methodref          #74.#716     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n-    #92 = Methodref          #10.#717     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.checkIfNeedsZip64:(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-    #93 = Methodref          #10.#718     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.rewriteSizesAndCrc:(Z)V\n-    #94 = Methodref          #10.#719     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeDataDescriptor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-    #95 = String             #720         // Stream has already been finished\n-    #96 = String             #721         // No current entry to close\n-    #97 = Methodref          #162.#722    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n-    #98 = Fieldref           #10.#723     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EMPTY:[B\n-    #99 = Methodref          #10.#724     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.write:([BII)V\n-   #100 = Methodref          #74.#725     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #101 = Methodref          #10.#726     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.hasZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #102 = Fieldref           #280.#727    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #103 = Methodref          #74.#728     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.removeExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-   #104 = Methodref          #74.#729     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCrc:()J\n+    #70 = Methodref          #68.#682     // java/io/ByteArrayOutputStream.\"<init>\":(I)V\n+    #71 = InterfaceMethodref #679.#683    // java/util/List.iterator:()Ljava/util/Iterator;\n+    #72 = InterfaceMethodref #462.#684    // java/util/Iterator.hasNext:()Z\n+    #73 = InterfaceMethodref #462.#685    // java/util/Iterator.next:()Ljava/lang/Object;\n+    #74 = Class              #686         // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+    #75 = Methodref          #10.#687     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.createCentralFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B\n+    #76 = Methodref          #68.#688     // java/io/ByteArrayOutputStream.write:([B)V\n+    #77 = Methodref          #68.#689     // java/io/ByteArrayOutputStream.toByteArray:()[B\n+    #78 = Methodref          #10.#690     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeCounted:([B)V\n+    #79 = Methodref          #68.#691     // java/io/ByteArrayOutputStream.reset:()V\n+    #80 = Methodref          #10.#692     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.preClose:()V\n+    #81 = Methodref          #10.#693     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.flushDeflater:()V\n+    #82 = Methodref          #162.#694    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$000:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n+    #83 = Methodref          #435.#695    // org/apache/commons/compress/archivers/zip/StreamCompressor.getCrc32:()J\n+    #84 = Methodref          #435.#696    // org/apache/commons/compress/archivers/zip/StreamCompressor.getBytesRead:()J\n+    #85 = Methodref          #162.#697    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$102:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n+    #86 = Methodref          #162.#698    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+    #87 = Methodref          #10.#699     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getEffectiveZip64Mode:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+    #88 = Methodref          #10.#700     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.handleSizesAndCrc:(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+    #89 = Methodref          #10.#701     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.closeEntry:(ZZ)V\n+    #90 = Methodref          #435.#691    // org/apache/commons/compress/archivers/zip/StreamCompressor.reset:()V\n+    #91 = Methodref          #74.#702     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n+    #92 = Methodref          #10.#703     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.checkIfNeedsZip64:(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+    #93 = Methodref          #10.#704     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.rewriteSizesAndCrc:(Z)V\n+    #94 = Methodref          #10.#705     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeDataDescriptor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+    #95 = String             #706         // Stream has already been finished\n+    #96 = String             #707         // No current entry to close\n+    #97 = Methodref          #162.#708    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n+    #98 = Fieldref           #10.#709     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EMPTY:[B\n+    #99 = Methodref          #10.#710     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.write:([BII)V\n+   #100 = Methodref          #74.#711     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #101 = Methodref          #10.#712     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.hasZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #102 = Fieldref           #280.#713    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #103 = Methodref          #74.#714     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.removeExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+   #104 = Methodref          #74.#715     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCrc:()J\n    #105 = Long               -1l\n-   #107 = Class              #730         // org/apache/commons/compress/archivers/ArchiveEntry\n-   #108 = Methodref          #74.#731     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n-   #109 = Methodref          #10.#732     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V\n-   #110 = Methodref          #10.#733     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.copyFromZipInputStream:(Ljava/io/InputStream;)V\n-   #111 = Methodref          #10.#734     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.closeCopiedEntry:(Z)V\n-   #112 = Methodref          #74.#735     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-   #113 = Methodref          #660.#707    // org/apache/commons/compress/archivers/zip/StreamCompressor.flushDeflater:()V\n-   #114 = Methodref          #162.#736    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n-   #115 = Methodref          #74.#737     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n-   #116 = Methodref          #74.#738     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n-   #117 = Methodref          #74.#739     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCrc:(J)V\n-   #118 = Class              #740         // java/util/zip/ZipException\n-   #119 = Class              #741         // java/lang/StringBuilder\n-   #120 = Methodref          #119.#626    // java/lang/StringBuilder.\"<init>\":()V\n-   #121 = String             #742         // bad CRC checksum for entry\n-   #122 = Methodref          #119.#743    // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #123 = Methodref          #74.#744     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n-   #124 = String             #745         // :\n-   #125 = Methodref          #746.#747    // java/lang/Long.toHexString:(J)Ljava/lang/String;\n-   #126 = String             #748         //  instead of\n-   #127 = Methodref          #119.#749    // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #128 = Methodref          #118.#683    // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-   #129 = String             #750         // bad size for entry\n-   #130 = Methodref          #119.#751    // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #131 = Methodref          #10.#752     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.isZip64Required:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-   #132 = Fieldref           #649.#753    // org/apache/commons/compress/archivers/zip/Zip64Mode.Never:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-   #133 = Class              #754         // org/apache/commons/compress/archivers/zip/Zip64RequiredException\n-   #134 = Methodref          #133.#755    // org/apache/commons/compress/archivers/zip/Zip64RequiredException.getEntryTooBigMessage:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n-   #135 = Methodref          #133.#683    // org/apache/commons/compress/archivers/zip/Zip64RequiredException.\"<init>\":(Ljava/lang/String;)V\n-   #136 = Fieldref           #649.#756    // org/apache/commons/compress/archivers/zip/Zip64Mode.Always:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-   #137 = Methodref          #10.#757     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.isTooLageForZip32:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #107 = Class              #716         // org/apache/commons/compress/archivers/ArchiveEntry\n+   #108 = Methodref          #74.#717     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+   #109 = Methodref          #10.#718     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V\n+   #110 = Methodref          #10.#719     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.copyFromZipInputStream:(Ljava/io/InputStream;)V\n+   #111 = Methodref          #10.#720     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.closeCopiedEntry:(Z)V\n+   #112 = Methodref          #74.#721     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+   #113 = Methodref          #435.#693    // org/apache/commons/compress/archivers/zip/StreamCompressor.flushDeflater:()V\n+   #114 = Methodref          #162.#722    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n+   #115 = Methodref          #74.#723     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n+   #116 = Methodref          #74.#724     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n+   #117 = Methodref          #74.#725     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCrc:(J)V\n+   #118 = Class              #726         // java/util/zip/ZipException\n+   #119 = Class              #727         // java/lang/StringBuilder\n+   #120 = Methodref          #119.#616    // java/lang/StringBuilder.\"<init>\":()V\n+   #121 = String             #728         // bad CRC checksum for entry\n+   #122 = Methodref          #119.#729    // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #123 = Methodref          #74.#730     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n+   #124 = String             #731         // :\n+   #125 = Methodref          #732.#733    // java/lang/Long.toHexString:(J)Ljava/lang/String;\n+   #126 = String             #734         //  instead of\n+   #127 = Methodref          #119.#735    // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #128 = Methodref          #118.#670    // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+   #129 = String             #736         // bad size for entry\n+   #130 = Methodref          #119.#737    // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+   #131 = Methodref          #10.#738     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.isZip64Required:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+   #132 = Fieldref           #507.#739    // org/apache/commons/compress/archivers/zip/Zip64Mode.Never:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+   #133 = Class              #740         // org/apache/commons/compress/archivers/zip/Zip64RequiredException\n+   #134 = Methodref          #133.#741    // org/apache/commons/compress/archivers/zip/Zip64RequiredException.getEntryTooBigMessage:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n+   #135 = Methodref          #133.#670    // org/apache/commons/compress/archivers/zip/Zip64RequiredException.\"<init>\":(Ljava/lang/String;)V\n+   #136 = Fieldref           #507.#742    // org/apache/commons/compress/archivers/zip/Zip64Mode.Always:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+   #137 = Methodref          #10.#743     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.isTooLageForZip32:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n    #138 = Long               4294967295l\n-   #140 = InterfaceMethodref #758.#759    // java/nio/channels/SeekableByteChannel.position:()J\n-   #141 = Methodref          #162.#760    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$400:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n-   #142 = InterfaceMethodref #758.#761    // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n-   #143 = Methodref          #762.#763    // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:(J)[B\n-   #144 = Methodref          #10.#764     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeOut:([B)V\n-   #145 = Fieldref           #762.#765    // org/apache/commons/compress/archivers/zip/ZipLong.ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #146 = Methodref          #762.#766    // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n-   #147 = Methodref          #10.#767     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getName:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/nio/ByteBuffer;\n-   #148 = Methodref          #768.#769    // java/nio/ByteBuffer.limit:()I\n-   #149 = Methodref          #768.#770    // java/nio/ByteBuffer.position:()I\n+   #140 = InterfaceMethodref #434.#744    // java/nio/channels/SeekableByteChannel.position:()J\n+   #141 = Methodref          #162.#745    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$400:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n+   #142 = InterfaceMethodref #434.#746    // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+   #143 = Methodref          #747.#748    // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:(J)[B\n+   #144 = Methodref          #10.#749     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeOut:([B)V\n+   #145 = Fieldref           #747.#750    // org/apache/commons/compress/archivers/zip/ZipLong.ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #146 = Methodref          #747.#751    // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n+   #147 = Methodref          #10.#752     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getName:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/nio/ByteBuffer;\n+   #148 = Methodref          #538.#753    // java/nio/ByteBuffer.limit:()I\n+   #149 = Methodref          #538.#754    // java/nio/ByteBuffer.position:()I\n    #150 = Long               12l\n    #152 = Long               4l\n-   #154 = Methodref          #169.#763    // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:(J)[B\n+   #154 = Methodref          #169.#748    // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:(J)[B\n    #155 = Long               10l\n-   #157 = Methodref          #10.#771     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.versionNeededToExtract:(IZZ)I\n-   #158 = Methodref          #772.#773    // org/apache/commons/compress/archivers/zip/ZipShort.getBytes:(I)[B\n-   #159 = Methodref          #74.#774     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setExtra:()V\n-   #160 = Methodref          #162.#775    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$500:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n-   #161 = Methodref          #10.#776     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.closeArchiveEntry:()V\n-   #162 = Class              #777         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry\n-   #163 = Methodref          #162.#778    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n-   #164 = InterfaceMethodref #692.#779    // java/util/List.add:(Ljava/lang/Object;)Z\n-   #165 = Methodref          #10.#780     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.setDefaults:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #166 = Methodref          #10.#781     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.validateSizeInformation:(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V\n-   #167 = Methodref          #10.#782     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.shouldAddZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-   #168 = Methodref          #10.#783     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n-   #169 = Class              #784         // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-   #170 = Methodref          #169.#785    // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n-   #171 = Fieldref           #169.#786    // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #172 = Methodref          #280.#787    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #173 = Methodref          #280.#788    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #174 = Methodref          #2.#789      // java/util/zip/Deflater.setLevel:(I)V\n-   #175 = Methodref          #10.#790     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeLocalFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V\n-   #176 = Methodref          #74.#791     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setMethod:(I)V\n-   #177 = Methodref          #74.#792     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getTime:()J\n-   #178 = Methodref          #793.#794    // java/lang/System.currentTimeMillis:()J\n-   #179 = Methodref          #74.#795     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setTime:(J)V\n-   #180 = String             #796         // uncompressed size is required for STORED method when not writing to a file\n-   #181 = String             #797         // crc checksum is required for STORED method when not writing to a file\n-   #182 = Class              #798         // java/lang/IllegalArgumentException\n-   #183 = String             #799         // Invalid compression level:\n-   #184 = Methodref          #119.#800    // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #185 = Methodref          #182.#683    // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #186 = Fieldref           #801.#802    // org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #187 = Methodref          #801.#803    // org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n-   #188 = Fieldref           #801.#804    // org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #189 = Methodref          #805.#806    // org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #190 = Class              #807         // java/lang/IllegalStateException\n-   #191 = String             #808         // No current entry\n-   #192 = Methodref          #190.#683    // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-   #193 = Methodref          #805.#809    // org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #194 = Methodref          #660.#810    // org/apache/commons/compress/archivers/zip/StreamCompressor.write:([BIII)J\n-   #195 = Methodref          #10.#811     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.count:(J)V\n-   #196 = Methodref          #660.#704    // org/apache/commons/compress/archivers/zip/StreamCompressor.writeCounted:([B)V\n-   #197 = Methodref          #162.#812    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n-   #198 = Methodref          #813.#814    // java/io/InputStream.read:([B)I\n-   #199 = Methodref          #660.#815    // org/apache/commons/compress/archivers/zip/StreamCompressor.writeCounted:([BII)V\n-   #200 = Methodref          #10.#816     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.count:(I)V\n-   #201 = Methodref          #10.#817     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.finish:()V\n-   #202 = Methodref          #10.#818     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.destroy:()V\n-   #203 = Methodref          #819.#820    // java/io/OutputStream.flush:()V\n-   #204 = Methodref          #660.#821    // org/apache/commons/compress/archivers/zip/StreamCompressor.deflate:()V\n-   #205 = InterfaceMethodref #822.#823    // org/apache/commons/compress/archivers/zip/ZipEncoding.canEncode:(Ljava/lang/String;)Z\n-   #206 = Methodref          #10.#824     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.addUnicodeExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V\n-   #207 = Methodref          #10.#825     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.createLocalFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B\n-   #208 = Class              #826         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData\n-   #209 = Methodref          #10.#827     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.usesDataDescriptor:(IZ)Z\n-   #210 = Methodref          #208.#828    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData.\"<init>\":(JZLorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n-   #211 = InterfaceMethodref #690.#829    // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #157 = Methodref          #10.#755     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.versionNeededToExtract:(IZZ)I\n+   #158 = Methodref          #756.#757    // org/apache/commons/compress/archivers/zip/ZipShort.getBytes:(I)[B\n+   #159 = Methodref          #74.#758     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setExtra:()V\n+   #160 = Methodref          #162.#759    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$500:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n+   #161 = Methodref          #10.#760     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.closeArchiveEntry:()V\n+   #162 = Class              #761         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry\n+   #163 = Methodref          #162.#762    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n+   #164 = InterfaceMethodref #679.#763    // java/util/List.add:(Ljava/lang/Object;)Z\n+   #165 = Methodref          #10.#764     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.setDefaults:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #166 = Methodref          #10.#765     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.validateSizeInformation:(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V\n+   #167 = Methodref          #10.#766     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.shouldAddZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+   #168 = Methodref          #10.#767     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n+   #169 = Class              #768         // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+   #170 = Methodref          #169.#769    // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n+   #171 = Fieldref           #169.#770    // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #172 = Methodref          #280.#771    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #173 = Methodref          #280.#772    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #174 = Methodref          #2.#773      // java/util/zip/Deflater.setLevel:(I)V\n+   #175 = Methodref          #10.#774     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeLocalFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V\n+   #176 = Methodref          #74.#775     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setMethod:(I)V\n+   #177 = Methodref          #74.#776     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getTime:()J\n+   #178 = Methodref          #777.#778    // java/lang/System.currentTimeMillis:()J\n+   #179 = Methodref          #74.#779     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setTime:(J)V\n+   #180 = String             #780         // uncompressed size is required for STORED method when not writing to a file\n+   #181 = String             #781         // crc checksum is required for STORED method when not writing to a file\n+   #182 = Class              #782         // java/lang/IllegalArgumentException\n+   #183 = String             #783         // Invalid compression level:\n+   #184 = Methodref          #119.#784    // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #185 = Methodref          #182.#670    // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #186 = Fieldref           #785.#786    // org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #187 = Methodref          #785.#787    // org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+   #188 = Fieldref           #785.#788    // org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #189 = Methodref          #789.#790    // org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #190 = Class              #791         // java/lang/IllegalStateException\n+   #191 = String             #792         // No current entry\n+   #192 = Methodref          #190.#670    // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+   #193 = Methodref          #789.#793    // org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #194 = Methodref          #435.#794    // org/apache/commons/compress/archivers/zip/StreamCompressor.write:([BIII)J\n+   #195 = Methodref          #10.#795     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.count:(J)V\n+   #196 = Methodref          #435.#690    // org/apache/commons/compress/archivers/zip/StreamCompressor.writeCounted:([B)V\n+   #197 = Methodref          #162.#796    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n+   #198 = Methodref          #797.#798    // java/io/InputStream.read:([B)I\n+   #199 = Methodref          #435.#799    // org/apache/commons/compress/archivers/zip/StreamCompressor.writeCounted:([BII)V\n+   #200 = Methodref          #10.#800     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.count:(I)V\n+   #201 = Methodref          #10.#801     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.finish:()V\n+   #202 = Methodref          #10.#802     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.destroy:()V\n+   #203 = Methodref          #433.#803    // java/io/OutputStream.flush:()V\n+   #204 = Methodref          #435.#804    // org/apache/commons/compress/archivers/zip/StreamCompressor.deflate:()V\n+   #205 = InterfaceMethodref #604.#805    // org/apache/commons/compress/archivers/zip/ZipEncoding.canEncode:(Ljava/lang/String;)Z\n+   #206 = Methodref          #10.#806     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.addUnicodeExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V\n+   #207 = Methodref          #10.#807     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.createLocalFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B\n+   #208 = Class              #808         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData\n+   #209 = Methodref          #10.#809     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.usesDataDescriptor:(IZ)Z\n+   #210 = Methodref          #208.#810    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData.\"<init>\":(JZLorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n+   #211 = InterfaceMethodref #677.#811    // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n    #212 = Long               14l\n-   #214 = Methodref          #162.#830    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$402:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n-   #215 = Methodref          #162.#831    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$002:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n-   #216 = Fieldref           #218.#832    // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #217 = Methodref          #74.#833     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-   #218 = Class              #834         // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n-   #219 = Methodref          #74.#835     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getAlignment:()I\n-   #220 = Methodref          #218.#836    // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.getAlignment:()S\n-   #221 = Methodref          #218.#837    // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.allowMethodChange:()Z\n-   #222 = Methodref          #74.#838     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalFileDataExtra:()[B\n-   #223 = Class              #839         // org/apache/commons/compress/archivers/zip/ZipExtraField\n+   #214 = Methodref          #162.#812    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$402:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n+   #215 = Methodref          #162.#813    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$002:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n+   #216 = Fieldref           #218.#814    // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #217 = Methodref          #74.#815     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+   #218 = Class              #816         // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n+   #219 = Methodref          #74.#817     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getAlignment:()I\n+   #220 = Methodref          #218.#818    // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.getAlignment:()S\n+   #221 = Methodref          #218.#819    // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.allowMethodChange:()Z\n+   #222 = Methodref          #74.#820     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalFileDataExtra:()[B\n+   #223 = Class              #821         // org/apache/commons/compress/archivers/zip/ZipExtraField\n    #224 = Long               2l\n-   #226 = Methodref          #218.#840    // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.\"<init>\":(IZI)V\n-   #227 = Methodref          #74.#841     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.addExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n-   #228 = Fieldref           #10.#842     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n-   #229 = Methodref          #793.#843    // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #230 = Methodref          #772.#844    // org/apache/commons/compress/archivers/zip/ZipShort.putShort:(I[BI)V\n-   #231 = Methodref          #10.#845     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getGeneralPurposeBits:(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #232 = Methodref          #4.#846      // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.encode:([BI)V\n-   #233 = Methodref          #805.#847    // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(Ljava/util/Calendar;J[BI)V\n-   #234 = Methodref          #762.#848    // org/apache/commons/compress/archivers/zip/ZipLong.putLong:(J[BI)V\n-   #235 = Fieldref           #10.#849     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LZERO:[B\n-   #236 = Methodref          #762.#850    // org/apache/commons/compress/archivers/zip/ZipLong.putLong:([BI)V\n-   #237 = Methodref          #768.#851    // java/nio/ByteBuffer.array:()[B\n-   #238 = Methodref          #768.#852    // java/nio/ByteBuffer.arrayOffset:()I\n-   #239 = Fieldref           #300.#853    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy.ALWAYS:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n-   #240 = Class              #854         // org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n-   #241 = Methodref          #240.#855    // org/apache/commons/compress/archivers/zip/UnicodePathExtraField.\"<init>\":(Ljava/lang/String;[BII)V\n-   #242 = Methodref          #74.#856     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getComment:()Ljava/lang/String;\n-   #243 = Methodref          #857.#858    // java/lang/String.equals:(Ljava/lang/Object;)Z\n-   #244 = Methodref          #10.#859     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getEntryEncoding:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #245 = InterfaceMethodref #822.#860    // org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-   #246 = Class              #861         // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n-   #247 = Methodref          #246.#855    // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.\"<init>\":(Ljava/lang/String;[BII)V\n-   #248 = Fieldref           #10.#862     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n-   #249 = InterfaceMethodref #690.#863    // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #250 = Methodref          #208.#864    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData.access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)J\n-   #251 = String             #865         // archive\\'s size exceeds the limit of 4GByte.\n-   #252 = Methodref          #10.#866     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.handleZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V\n-   #253 = Methodref          #10.#867     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.createCentralFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B\n-   #254 = Methodref          #74.#868     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCentralDirectoryExtra:()[B\n-   #255 = Fieldref           #10.#869     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.CFH_SIG:[B\n-   #256 = Methodref          #74.#870     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getPlatform:()I\n-   #257 = Methodref          #208.#871    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData.access$900:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)Z\n-   #258 = Fieldref           #10.#872     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZERO:[B\n-   #259 = Methodref          #74.#873     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getInternalAttributes:()I\n-   #260 = Methodref          #74.#874     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExternalAttributes:()J\n-   #261 = Methodref          #875.#876    // java/lang/Math.min:(JJ)J\n-   #262 = Methodref          #280.#877    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setRelativeHeaderOffset:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #263 = Fieldref           #10.#878     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n-   #264 = InterfaceMethodref #692.#879    // java/util/List.size:()I\n+   #226 = Methodref          #218.#822    // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.\"<init>\":(IZI)V\n+   #227 = Methodref          #74.#823     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.addExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n+   #228 = Fieldref           #10.#824     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n+   #229 = Methodref          #777.#825    // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #230 = Methodref          #756.#826    // org/apache/commons/compress/archivers/zip/ZipShort.putShort:(I[BI)V\n+   #231 = Methodref          #10.#827     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getGeneralPurposeBits:(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+   #232 = Methodref          #4.#828      // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.encode:([BI)V\n+   #233 = Methodref          #789.#829    // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(Ljava/util/Calendar;J[BI)V\n+   #234 = Methodref          #747.#830    // org/apache/commons/compress/archivers/zip/ZipLong.putLong:(J[BI)V\n+   #235 = Fieldref           #10.#831     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LZERO:[B\n+   #236 = Methodref          #747.#832    // org/apache/commons/compress/archivers/zip/ZipLong.putLong:([BI)V\n+   #237 = Methodref          #538.#833    // java/nio/ByteBuffer.array:()[B\n+   #238 = Methodref          #538.#834    // java/nio/ByteBuffer.arrayOffset:()I\n+   #239 = Fieldref           #300.#835    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy.ALWAYS:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n+   #240 = Class              #836         // org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n+   #241 = Methodref          #240.#837    // org/apache/commons/compress/archivers/zip/UnicodePathExtraField.\"<init>\":(Ljava/lang/String;[BII)V\n+   #242 = Methodref          #74.#838     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getComment:()Ljava/lang/String;\n+   #243 = Methodref          #560.#839    // java/lang/String.equals:(Ljava/lang/Object;)Z\n+   #244 = Methodref          #10.#840     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getEntryEncoding:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #245 = InterfaceMethodref #604.#841    // org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+   #246 = Class              #842         // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n+   #247 = Methodref          #246.#837    // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.\"<init>\":(Ljava/lang/String;[BII)V\n+   #248 = Fieldref           #10.#843     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n+   #249 = InterfaceMethodref #677.#844    // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #250 = Methodref          #208.#845    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData.access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)J\n+   #251 = String             #846         // archive\\'s size exceeds the limit of 4GByte.\n+   #252 = Methodref          #10.#847     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.handleZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V\n+   #253 = Methodref          #10.#848     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.createCentralFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B\n+   #254 = Methodref          #74.#849     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCentralDirectoryExtra:()[B\n+   #255 = Fieldref           #10.#850     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.CFH_SIG:[B\n+   #256 = Methodref          #74.#851     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getPlatform:()I\n+   #257 = Methodref          #208.#852    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData.access$900:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)Z\n+   #258 = Fieldref           #10.#853     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZERO:[B\n+   #259 = Methodref          #74.#854     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getInternalAttributes:()I\n+   #260 = Methodref          #74.#855     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExternalAttributes:()J\n+   #261 = Methodref          #856.#857    // java/lang/Math.min:(JJ)J\n+   #262 = Methodref          #280.#858    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setRelativeHeaderOffset:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #263 = Fieldref           #10.#859     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n+   #264 = InterfaceMethodref #679.#860    // java/util/List.size:()I\n    #265 = Integer            65535\n-   #266 = String             #880         // archive contains more than 65535 entries.\n-   #267 = Methodref          #875.#881    // java/lang/Math.min:(II)I\n-   #268 = Fieldref           #10.#882     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_SIG:[B\n+   #266 = String             #861         // archive contains more than 65535 entries.\n+   #267 = Methodref          #856.#862    // java/lang/Math.min:(II)I\n+   #268 = Fieldref           #10.#863     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_SIG:[B\n    #269 = Long               44l\n-   #271 = Fieldref           #10.#883     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG:[B\n-   #272 = Fieldref           #10.#884     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ONE:[B\n-   #273 = Methodref          #660.#885    // org/apache/commons/compress/archivers/zip/StreamCompressor.writeOut:([BII)V\n-   #274 = Methodref          #4.#626      // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.\"<init>\":()V\n-   #275 = Methodref          #4.#886      // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.useUTF8ForNames:(Z)V\n-   #276 = Methodref          #4.#887      // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.useDataDescriptor:(Z)V\n-   #277 = Methodref          #10.#888     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.versionNeededToExtractMethod:(I)I\n-   #278 = Methodref          #74.#889     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-   #279 = Methodref          #162.#890    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$502:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n-   #280 = Class              #891         // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-   #281 = Methodref          #280.#626    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.\"<init>\":()V\n-   #282 = Methodref          #74.#892     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.addAsFirstExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n-   #283 = Fieldref           #3.#893      // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #284 = InterfaceMethodref #758.#693    // java/nio/channels/SeekableByteChannel.close:()V\n-   #285 = Methodref          #819.#693    // java/io/OutputStream.close:()V\n-   #286 = Fieldref           #762.#894    // org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #287 = Fieldref           #762.#895    // org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #288 = Fieldref           #762.#896    // org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #271 = Fieldref           #10.#864     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG:[B\n+   #272 = Fieldref           #10.#865     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ONE:[B\n+   #273 = Methodref          #435.#866    // org/apache/commons/compress/archivers/zip/StreamCompressor.writeOut:([BII)V\n+   #274 = Methodref          #4.#616      // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.\"<init>\":()V\n+   #275 = Methodref          #4.#867      // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.useUTF8ForNames:(Z)V\n+   #276 = Methodref          #4.#868      // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.useDataDescriptor:(Z)V\n+   #277 = Methodref          #10.#869     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.versionNeededToExtractMethod:(I)I\n+   #278 = Methodref          #74.#870     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+   #279 = Methodref          #162.#871    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$502:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n+   #280 = Class              #872         // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+   #281 = Methodref          #280.#616    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.\"<init>\":()V\n+   #282 = Methodref          #74.#873     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.addAsFirstExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n+   #283 = Fieldref           #3.#874      // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #284 = InterfaceMethodref #434.#680    // java/nio/channels/SeekableByteChannel.close:()V\n+   #285 = Methodref          #433.#680    // java/io/OutputStream.close:()V\n+   #286 = Fieldref           #747.#875    // org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #287 = Fieldref           #747.#876    // org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #288 = Fieldref           #747.#877    // org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n    #289 = Long               101010256l\n    #291 = Long               101075792l\n    #293 = Long               117853008l\n-   #295 = Class              #897         // org/apache/commons/compress/archivers/ArchiveOutputStream\n-   #296 = Class              #898         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1\n+   #295 = Class              #878         // org/apache/commons/compress/archivers/ArchiveOutputStream\n+   #296 = Class              #879         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1\n    #297 = Utf8               InnerClasses\n    #298 = Utf8               EntryMetaData\n    #299 = Utf8               CurrentEntry\n-   #300 = Class              #899         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy\n+   #300 = Class              #880         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy\n    #301 = Utf8               UnicodeExtraFieldPolicy\n    #302 = Utf8               BUFFER_SIZE\n    #303 = Utf8               I\n    #304 = Utf8               ConstantValue\n    #305 = Integer            512\n    #306 = Utf8               LFH_SIG_OFFSET\n    #307 = Integer            0\n@@ -424,659 +424,640 @@\n    #425 = Utf8               Ljava/io/IOException;\n    #426 = Utf8               file\n    #427 = Utf8               Ljava/io/File;\n    #428 = Utf8               o\n    #429 = Utf8               _channel\n    #430 = Utf8               _streamCompressor\n    #431 = Utf8               StackMapTable\n-   #432 = Class              #630         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-   #433 = Class              #900         // java/io/File\n-   #434 = Class              #901         // java/io/OutputStream\n-   #435 = Class              #902         // java/nio/channels/SeekableByteChannel\n-   #436 = Class              #903         // org/apache/commons/compress/archivers/zip/StreamCompressor\n-   #437 = Class              #676         // java/io/IOException\n-   #438 = Utf8               Exceptions\n-   #439 = Utf8               (Ljava/nio/channels/SeekableByteChannel;)V\n-   #440 = Utf8               isSeekable\n-   #441 = Utf8               ()Z\n-   #442 = Utf8               setEncoding\n-   #443 = Utf8               (Ljava/lang/String;)V\n-   #444 = Utf8               getEncoding\n-   #445 = Utf8               ()Ljava/lang/String;\n-   #446 = Utf8               setUseLanguageEncodingFlag\n-   #447 = Utf8               (Z)V\n-   #448 = Utf8               b\n-   #449 = Utf8               setCreateUnicodeExtraFields\n-   #450 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;)V\n-   #451 = Utf8               setFallbackToUTF8\n-   #452 = Utf8               setUseZip64\n-   #453 = Utf8               (Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V\n-   #454 = Utf8               mode\n-   #455 = Utf8               finish\n-   #456 = Utf8               ()V\n-   #457 = Utf8               writeCentralDirectoryInChunks\n-   #458 = Utf8               ze\n-   #459 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-   #460 = Utf8               NUM_PER_WRITE\n-   #461 = Utf8               byteArrayOutputStream\n-   #462 = Utf8               Ljava/io/ByteArrayOutputStream;\n-   #463 = Utf8               count\n-   #464 = Class              #694         // java/io/ByteArrayOutputStream\n-   #465 = Class              #904         // java/util/Iterator\n-   #466 = Utf8               closeArchiveEntry\n-   #467 = Utf8               bytesWritten\n-   #468 = Utf8               realCrc\n-   #469 = Utf8               effectiveMode\n-   #470 = Utf8               actuallyNeedsZip64\n-   #471 = Utf8               closeCopiedEntry\n-   #472 = Utf8               phased\n-   #473 = Utf8               closeEntry\n-   #474 = Utf8               (ZZ)V\n-   #475 = Utf8               preClose\n-   #476 = Utf8               addRawArchiveEntry\n-   #477 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n-   #478 = Utf8               rawStream\n-   #479 = Utf8               Ljava/io/InputStream;\n-   #480 = Utf8               ae\n-   #481 = Utf8               is2PhaseSource\n-   #482 = Class              #700         // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-   #483 = Utf8               flushDeflater\n-   #484 = Utf8               handleSizesAndCrc\n-   #485 = Utf8               (JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-   #486 = Utf8               crc\n-   #487 = Utf8               checkIfNeedsZip64\n-   #488 = Utf8               (Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-   #489 = Utf8               isZip64Required\n-   #490 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-   #491 = Utf8               entry1\n-   #492 = Utf8               requestedMode\n-   #493 = Utf8               isTooLageForZip32\n-   #494 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #495 = Utf8               zipArchiveEntry\n-   #496 = Utf8               rewriteSizesAndCrc\n-   #497 = Utf8               name\n-   #498 = Utf8               Ljava/nio/ByteBuffer;\n-   #499 = Utf8               nameLen\n-   #500 = Utf8               save\n-   #501 = Utf8               putArchiveEntry\n-   #502 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n-   #503 = Utf8               archiveEntry\n-   #504 = Utf8               Lorg/apache/commons/compress/archivers/ArchiveEntry;\n-   #505 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V\n-   #506 = Utf8               size\n-   #507 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #508 = Utf8               compressedSize\n-   #509 = Utf8               z64\n-   #510 = Utf8               Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n-   #511 = Class              #905         // org/apache/commons/compress/archivers/zip/Zip64Mode\n-   #512 = Class              #891         // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-   #513 = Class              #784         // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-   #514 = Utf8               setDefaults\n-   #515 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #516 = Utf8               validateSizeInformation\n-   #517 = Utf8               shouldAddZip64Extra\n-   #518 = Utf8               setComment\n-   #519 = Utf8               setLevel\n-   #520 = Utf8               (I)V\n-   #521 = Utf8               setMethod\n-   #522 = Utf8               canWriteEntryData\n-   #523 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z\n-   #524 = Utf8               zae\n-   #525 = Utf8               write\n-   #526 = Utf8               ([BII)V\n-   #527 = Utf8               offset\n-   #528 = Utf8               length\n-   #529 = Utf8               writtenThisTime\n-   #530 = Utf8               writeCounted\n-   #531 = Utf8               ([B)V\n-   #532 = Utf8               data\n-   #533 = Utf8               copyFromZipInputStream\n-   #534 = Utf8               (Ljava/io/InputStream;)V\n-   #535 = Utf8               src\n-   #536 = Utf8               close\n-   #537 = Utf8               flush\n-   #538 = Utf8               deflate\n-   #539 = Utf8               writeLocalFileHeader\n-   #540 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V\n-   #541 = Utf8               encodable\n-   #542 = Utf8               localHeaderStart\n-   #543 = Utf8               localHeader\n-   #544 = Class              #906         // java/nio/ByteBuffer\n-   #545 = Utf8               createLocalFileHeader\n-   #546 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B\n-   #547 = Utf8               oldLength\n-   #548 = Utf8               padding\n-   #549 = Utf8               archiveOffset\n-   #550 = Utf8               oldAlignmentEx\n-   #551 = Utf8               Lorg/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField;\n-   #552 = Utf8               alignment\n-   #553 = Utf8               extra\n-   #554 = Utf8               len\n-   #555 = Utf8               buf\n-   #556 = Utf8               zipMethod\n-   #557 = Utf8               dataDescriptor\n-   #558 = Utf8               generalPurposeBit\n-   #559 = Utf8               Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #560 = Class              #834         // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n-   #561 = Class              #369         // \"[B\"\n-   #562 = Class              #624         // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-   #563 = Utf8               addUnicodeExtraFields\n-   #564 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V\n-   #565 = Utf8               commentB\n-   #566 = Utf8               commentEncodable\n-   #567 = Utf8               comm\n-   #568 = Class              #907         // java/lang/String\n-   #569 = Utf8               writeDataDescriptor\n-   #570 = Utf8               writeCentralFileHeader\n-   #571 = Utf8               centralFileHeader\n-   #572 = Utf8               createCentralFileHeader\n-   #573 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B\n-   #574 = Utf8               entryMetaData\n-   #575 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;\n-   #576 = Utf8               needsZip64Extra\n-   #577 = Class              #826         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData\n-   #578 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B\n-   #579 = Utf8               commentLen\n-   #580 = Utf8               extraStart\n-   #581 = Utf8               commentStart\n-   #582 = Utf8               handleZip64Extra\n-   #583 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V\n-   #584 = Utf8               lfhOffset\n-   #585 = Utf8               writeCentralDirectoryEnd\n-   #586 = Utf8               numberOfEntries\n-   #587 = Utf8               num\n-   #588 = Utf8               dataLen\n-   #589 = Utf8               writeZip64CentralDirectory\n-   #590 = Utf8               writeOut\n-   #591 = Utf8               getGeneralPurposeBits\n-   #592 = Utf8               (ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #593 = Utf8               utfFallback\n-   #594 = Utf8               usesDataDescriptor\n-   #595 = Utf8               versionNeededToExtract\n-   #596 = Utf8               (IZZ)I\n-   #597 = Utf8               zip64\n-   #598 = Utf8               usedDataDescriptor\n-   #599 = Utf8               (IZ)Z\n-   #600 = Utf8               versionNeededToExtractMethod\n-   #601 = Utf8               (I)I\n-   #602 = Utf8               createArchiveEntry\n-   #603 = Utf8               (Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/ArchiveEntry;\n-   #604 = Utf8               inputFile\n-   #605 = Utf8               entryName\n-   #606 = Utf8               getZip64Extra\n-   #607 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n-   #608 = Class              #777         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry\n-   #609 = Utf8               hasZip64Extra\n-   #610 = Utf8               getEffectiveZip64Mode\n-   #611 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-   #612 = Utf8               getEntryEncoding\n-   #613 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #614 = Class              #908         // org/apache/commons/compress/archivers/zip/ZipEncoding\n-   #615 = Utf8               getName\n-   #616 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/nio/ByteBuffer;\n-   #617 = Utf8               destroy\n-   #618 = Utf8               <clinit>\n-   #619 = Utf8               SourceFile\n-   #620 = Utf8               ZipArchiveOutputStream.java\n-   #621 = Utf8               java/util/zip/ZipEntry\n-   #622 = Utf8               java/util/zip/Deflater\n-   #623 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-   #624 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-   #625 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n-   #626 = NameAndType        #416:#456    // \"<init>\":()V\n-   #627 = NameAndType        #355:#356    // finished:Z\n-   #628 = Utf8\n-   #629 = NameAndType        #372:#362    // comment:Ljava/lang/String;\n-   #630 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-   #631 = NameAndType        #373:#303    // level:I\n-   #632 = NameAndType        #374:#356    // hasCompressionLevelChanged:Z\n-   #633 = NameAndType        #375:#303    // method:I\n-   #634 = Utf8               java/util/LinkedList\n-   #635 = NameAndType        #376:#377    // entries:Ljava/util/List;\n-   #636 = NameAndType        #382:#383    // cdOffset:J\n-   #637 = NameAndType        #384:#383    // cdLength:J\n-   #638 = Utf8               java/util/HashMap\n-   #639 = NameAndType        #388:#389    // metaData:Ljava/util/Map;\n-   #640 = Utf8               UTF8\n-   #641 = NameAndType        #391:#362    // encoding:Ljava/lang/String;\n-   #642 = NameAndType        #909:#910    // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #643 = NameAndType        #392:#393    // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #644 = NameAndType        #400:#356    // useUTF8Flag:Z\n-   #645 = NameAndType        #401:#356    // fallbackToUTF8:Z\n-   #646 = NameAndType        #911:#403    // NEVER:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n-   #647 = NameAndType        #402:#403    // createUnicodeExtraFields:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n-   #648 = NameAndType        #404:#356    // hasUsedZip64:Z\n-   #649 = Class              #905         // org/apache/commons/compress/archivers/zip/Zip64Mode\n-   #650 = NameAndType        #912:#406    // AsNeeded:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-   #651 = NameAndType        #405:#406    // zip64Mode:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-   #652 = NameAndType        #407:#369    // copyBuffer:[B\n-   #653 = Class              #913         // java/util/Calendar\n-   #654 = NameAndType        #914:#915    // getInstance:()Ljava/util/Calendar;\n-   #655 = NameAndType        #408:#409    // calendarInstance:Ljava/util/Calendar;\n-   #656 = NameAndType        #398:#399    // out:Ljava/io/OutputStream;\n-   #657 = NameAndType        #396:#397    // channel:Ljava/nio/channels/SeekableByteChannel;\n-   #658 = NameAndType        #416:#916    // \"<init>\":(IZ)V\n-   #659 = NameAndType        #394:#395    // def:Ljava/util/zip/Deflater;\n-   #660 = Class              #903         // org/apache/commons/compress/archivers/zip/StreamCompressor\n-   #661 = NameAndType        #917:#918    // create:(Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-   #662 = NameAndType        #380:#381    // streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-   #663 = Class              #900         // java/io/File\n-   #664 = NameAndType        #919:#920    // toPath:()Ljava/nio/file/Path;\n-   #665 = Class              #921         // java/nio/file/StandardOpenOption\n-   #666 = NameAndType        #922:#923    // CREATE:Ljava/nio/file/StandardOpenOption;\n-   #667 = NameAndType        #924:#923    // WRITE:Ljava/nio/file/StandardOpenOption;\n-   #668 = NameAndType        #925:#923    // READ:Ljava/nio/file/StandardOpenOption;\n-   #669 = NameAndType        #926:#923    // TRUNCATE_EXISTING:Ljava/nio/file/StandardOpenOption;\n-   #670 = Class              #927         // java/util/EnumSet\n-   #671 = NameAndType        #928:#929    // of:(Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;\n-   #672 = Utf8               java/nio/file/attribute/FileAttribute\n-   #673 = Class              #930         // java/nio/file/Files\n-   #674 = NameAndType        #931:#932    // newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n-   #675 = NameAndType        #917:#933    // create:(Ljava/nio/channels/SeekableByteChannel;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-   #676 = Utf8               java/io/IOException\n-   #677 = Class              #934         // org/apache/commons/compress/utils/IOUtils\n-   #678 = NameAndType        #935:#936    // closeQuietly:(Ljava/io/Closeable;)V\n-   #679 = Utf8               java/io/FileOutputStream\n-   #680 = NameAndType        #416:#423    // \"<init>\":(Ljava/io/File;)V\n-   #681 = NameAndType        #937:#938    // isUTF8:(Ljava/lang/String;)Z\n-   #682 = Utf8               This archive has already been finished\n-   #683 = NameAndType        #416:#443    // \"<init>\":(Ljava/lang/String;)V\n-   #684 = NameAndType        #370:#371    // entry:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;\n-   #685 = Utf8               This archive contains unclosed entries.\n-   #686 = NameAndType        #939:#940    // getTotalBytesWritten:()J\n-   #687 = NameAndType        #457:#456    // writeCentralDirectoryInChunks:()V\n-   #688 = NameAndType        #589:#456    // writeZip64CentralDirectory:()V\n-   #689 = NameAndType        #585:#456    // writeCentralDirectoryEnd:()V\n-   #690 = Class              #941         // java/util/Map\n-   #691 = NameAndType        #942:#456    // clear:()V\n-   #692 = Class              #943         // java/util/List\n-   #693 = NameAndType        #536:#456    // close:()V\n-   #694 = Utf8               java/io/ByteArrayOutputStream\n-   #695 = NameAndType        #416:#520    // \"<init>\":(I)V\n-   #696 = NameAndType        #944:#945    // iterator:()Ljava/util/Iterator;\n-   #697 = Class              #904         // java/util/Iterator\n-   #698 = NameAndType        #946:#441    // hasNext:()Z\n-   #699 = NameAndType        #947:#948    // next:()Ljava/lang/Object;\n-   #700 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-   #701 = NameAndType        #572:#573    // createCentralFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B\n-   #702 = NameAndType        #525:#531    // write:([B)V\n-   #703 = NameAndType        #949:#950    // toByteArray:()[B\n-   #704 = NameAndType        #530:#531    // writeCounted:([B)V\n-   #705 = NameAndType        #951:#456    // reset:()V\n-   #706 = NameAndType        #475:#456    // preClose:()V\n-   #707 = NameAndType        #483:#456    // flushDeflater:()V\n-   #708 = NameAndType        #952:#953    // access$000:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n-   #709 = NameAndType        #954:#940    // getCrc32:()J\n-   #710 = NameAndType        #955:#940    // getBytesRead:()J\n-   #711 = NameAndType        #956:#957    // access$102:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n-   #712 = NameAndType        #958:#959    // access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-   #713 = NameAndType        #610:#611    // getEffectiveZip64Mode:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-   #714 = NameAndType        #484:#485    // handleSizesAndCrc:(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-   #715 = NameAndType        #473:#474    // closeEntry:(ZZ)V\n-   #716 = NameAndType        #960:#940    // getSize:()J\n-   #717 = NameAndType        #487:#488    // checkIfNeedsZip64:(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-   #718 = NameAndType        #496:#447    // rewriteSizesAndCrc:(Z)V\n-   #719 = NameAndType        #569:#515    // writeDataDescriptor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #720 = Utf8               Stream has already been finished\n-   #721 = Utf8               No current entry to close\n-   #722 = NameAndType        #961:#962    // access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n-   #723 = NameAndType        #368:#369    // EMPTY:[B\n-   #724 = NameAndType        #525:#526    // write:([BII)V\n-   #725 = NameAndType        #416:#515    // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #726 = NameAndType        #609:#494    // hasZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #727 = NameAndType        #963:#964    // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #728 = NameAndType        #965:#966    // removeExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-   #729 = NameAndType        #967:#940    // getCrc:()J\n-   #730 = Utf8               org/apache/commons/compress/archivers/ArchiveEntry\n-   #731 = NameAndType        #968:#940    // getCompressedSize:()J\n-   #732 = NameAndType        #501:#505    // putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V\n-   #733 = NameAndType        #533:#534    // copyFromZipInputStream:(Ljava/io/InputStream;)V\n-   #734 = NameAndType        #471:#447    // closeCopiedEntry:(Z)V\n-   #735 = NameAndType        #969:#970    // getMethod:()I\n-   #736 = NameAndType        #971:#953    // access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n-   #737 = NameAndType        #972:#973    // setSize:(J)V\n-   #738 = NameAndType        #974:#973    // setCompressedSize:(J)V\n-   #739 = NameAndType        #975:#973    // setCrc:(J)V\n-   #740 = Utf8               java/util/zip/ZipException\n-   #741 = Utf8               java/lang/StringBuilder\n-   #742 = Utf8               bad CRC checksum for entry\n-   #743 = NameAndType        #976:#977    // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #744 = NameAndType        #615:#445    // getName:()Ljava/lang/String;\n-   #745 = Utf8               :\n-   #746 = Class              #978         // java/lang/Long\n-   #747 = NameAndType        #979:#980    // toHexString:(J)Ljava/lang/String;\n-   #748 = Utf8                instead of\n-   #749 = NameAndType        #981:#445    // toString:()Ljava/lang/String;\n-   #750 = Utf8               bad size for entry\n-   #751 = NameAndType        #976:#982    // append:(J)Ljava/lang/StringBuilder;\n-   #752 = NameAndType        #489:#490    // isZip64Required:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-   #753 = NameAndType        #983:#406    // Never:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-   #754 = Utf8               org/apache/commons/compress/archivers/zip/Zip64RequiredException\n-   #755 = NameAndType        #984:#985    // getEntryTooBigMessage:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n-   #756 = NameAndType        #986:#406    // Always:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-   #757 = NameAndType        #493:#494    // isTooLageForZip32:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #758 = Class              #902         // java/nio/channels/SeekableByteChannel\n-   #759 = NameAndType        #987:#940    // position:()J\n-   #760 = NameAndType        #988:#953    // access$400:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n-   #761 = NameAndType        #987:#989    // position:(J)Ljava/nio/channels/SeekableByteChannel;\n-   #762 = Class              #990         // org/apache/commons/compress/archivers/zip/ZipLong\n-   #763 = NameAndType        #991:#992    // getBytes:(J)[B\n-   #764 = NameAndType        #590:#531    // writeOut:([B)V\n-   #765 = NameAndType        #993:#994    // ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #766 = NameAndType        #991:#950    // getBytes:()[B\n-   #767 = NameAndType        #615:#616    // getName:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/nio/ByteBuffer;\n-   #768 = Class              #906         // java/nio/ByteBuffer\n-   #769 = NameAndType        #995:#970    // limit:()I\n-   #770 = NameAndType        #987:#970    // position:()I\n-   #771 = NameAndType        #595:#596    // versionNeededToExtract:(IZZ)I\n-   #772 = Class              #996         // org/apache/commons/compress/archivers/zip/ZipShort\n-   #773 = NameAndType        #991:#997    // getBytes:(I)[B\n-   #774 = NameAndType        #998:#456    // setExtra:()V\n-   #775 = NameAndType        #999:#962    // access$500:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n-   #776 = NameAndType        #466:#456    // closeArchiveEntry:()V\n-   #777 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry\n-   #778 = NameAndType        #416:#1000   // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n-   #779 = NameAndType        #1001:#1002  // add:(Ljava/lang/Object;)Z\n-   #780 = NameAndType        #514:#515    // setDefaults:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #781 = NameAndType        #516:#453    // validateSizeInformation:(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V\n-   #782 = NameAndType        #517:#490    // shouldAddZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-   #783 = NameAndType        #606:#607    // getZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n-   #784 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-   #785 = NameAndType        #416:#973    // \"<init>\":(J)V\n-   #786 = NameAndType        #385:#507    // ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #787 = NameAndType        #972:#1003   // setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #788 = NameAndType        #974:#1003   // setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #789 = NameAndType        #519:#520    // setLevel:(I)V\n-   #790 = NameAndType        #539:#540    // writeLocalFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V\n-   #791 = NameAndType        #521:#520    // setMethod:(I)V\n-   #792 = NameAndType        #1004:#940   // getTime:()J\n-   #793 = Class              #1005        // java/lang/System\n-   #794 = NameAndType        #1006:#940   // currentTimeMillis:()J\n-   #795 = NameAndType        #1007:#973   // setTime:(J)V\n-   #796 = Utf8               uncompressed size is required for STORED method when not writing to a file\n-   #797 = Utf8               crc checksum is required for STORED method when not writing to a file\n-   #798 = Utf8               java/lang/IllegalArgumentException\n-   #799 = Utf8               Invalid compression level:\n-   #800 = NameAndType        #976:#1008   // append:(I)Ljava/lang/StringBuilder;\n-   #801 = Class              #1009        // org/apache/commons/compress/archivers/zip/ZipMethod\n-   #802 = NameAndType        #1010:#1011  // IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #803 = NameAndType        #1012:#970   // getCode:()I\n-   #804 = NameAndType        #1013:#1011  // UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #805 = Class              #1014        // org/apache/commons/compress/archivers/zip/ZipUtil\n-   #806 = NameAndType        #1015:#494   // canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #807 = Utf8               java/lang/IllegalStateException\n-   #808 = Utf8               No current entry\n-   #809 = NameAndType        #1016:#515   // checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #810 = NameAndType        #525:#1017   // write:([BIII)J\n-   #811 = NameAndType        #463:#973    // count:(J)V\n-   #812 = NameAndType        #1018:#1019  // access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n-   #813 = Class              #1020        // java/io/InputStream\n-   #814 = NameAndType        #1021:#1022  // read:([B)I\n-   #815 = NameAndType        #530:#526    // writeCounted:([BII)V\n-   #816 = NameAndType        #463:#520    // count:(I)V\n-   #817 = NameAndType        #455:#456    // finish:()V\n-   #818 = NameAndType        #617:#456    // destroy:()V\n-   #819 = Class              #901         // java/io/OutputStream\n-   #820 = NameAndType        #537:#456    // flush:()V\n-   #821 = NameAndType        #538:#456    // deflate:()V\n-   #822 = Class              #908         // org/apache/commons/compress/archivers/zip/ZipEncoding\n-   #823 = NameAndType        #1023:#938   // canEncode:(Ljava/lang/String;)Z\n-   #824 = NameAndType        #563:#564    // addUnicodeExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V\n-   #825 = NameAndType        #545:#546    // createLocalFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B\n-   #826 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData\n-   #827 = NameAndType        #594:#599    // usesDataDescriptor:(IZ)Z\n-   #828 = NameAndType        #416:#1024   // \"<init>\":(JZLorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n-   #829 = NameAndType        #1025:#1026  // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #830 = NameAndType        #1027:#957   // access$402:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n-   #831 = NameAndType        #1028:#957   // access$002:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n-   #832 = NameAndType        #1029:#964   // ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #833 = NameAndType        #1030:#1031  // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-   #834 = Utf8               org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n-   #835 = NameAndType        #1032:#970   // getAlignment:()I\n-   #836 = NameAndType        #1032:#1033  // getAlignment:()S\n-   #837 = NameAndType        #1034:#441   // allowMethodChange:()Z\n-   #838 = NameAndType        #1035:#950   // getLocalFileDataExtra:()[B\n-   #839 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n-   #840 = NameAndType        #416:#1036   // \"<init>\":(IZI)V\n-   #841 = NameAndType        #1037:#1038  // addExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n-   #842 = NameAndType        #410:#369    // LFH_SIG:[B\n-   #843 = NameAndType        #1039:#1040  // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #844 = NameAndType        #1041:#1042  // putShort:(I[BI)V\n-   #845 = NameAndType        #591:#592    // getGeneralPurposeBits:(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #846 = NameAndType        #1043:#1044  // encode:([BI)V\n-   #847 = NameAndType        #1045:#1046  // toDosTime:(Ljava/util/Calendar;J[BI)V\n-   #848 = NameAndType        #1047:#1048  // putLong:(J[BI)V\n-   #849 = NameAndType        #386:#369    // LZERO:[B\n-   #850 = NameAndType        #1047:#1044  // putLong:([BI)V\n-   #851 = NameAndType        #1049:#950   // array:()[B\n-   #852 = NameAndType        #1050:#970   // arrayOffset:()I\n-   #853 = NameAndType        #1051:#403   // ALWAYS:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n-   #854 = Utf8               org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n-   #855 = NameAndType        #416:#1052   // \"<init>\":(Ljava/lang/String;[BII)V\n-   #856 = NameAndType        #1053:#445   // getComment:()Ljava/lang/String;\n-   #857 = Class              #907         // java/lang/String\n-   #858 = NameAndType        #1054:#1002  // equals:(Ljava/lang/Object;)Z\n-   #859 = NameAndType        #612:#613    // getEntryEncoding:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #860 = NameAndType        #1043:#1055  // encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-   #861 = Utf8               org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n-   #862 = NameAndType        #411:#369    // DD_SIG:[B\n-   #863 = NameAndType        #1056:#1057  // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #864 = NameAndType        #1058:#1059  // access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)J\n-   #865 = Utf8               archive\\'s size exceeds the limit of 4GByte.\n-   #866 = NameAndType        #582:#583    // handleZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V\n-   #867 = NameAndType        #572:#578    // createCentralFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B\n-   #868 = NameAndType        #1060:#950   // getCentralDirectoryExtra:()[B\n-   #869 = NameAndType        #412:#369    // CFH_SIG:[B\n-   #870 = NameAndType        #1061:#970   // getPlatform:()I\n-   #871 = NameAndType        #1062:#1063  // access$900:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)Z\n-   #872 = NameAndType        #385:#369    // ZERO:[B\n-   #873 = NameAndType        #1064:#970   // getInternalAttributes:()I\n-   #874 = NameAndType        #1065:#940   // getExternalAttributes:()J\n-   #875 = Class              #1066        // java/lang/Math\n-   #876 = NameAndType        #1067:#1068  // min:(JJ)J\n-   #877 = NameAndType        #1069:#1003  // setRelativeHeaderOffset:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #878 = NameAndType        #413:#369    // EOCD_SIG:[B\n-   #879 = NameAndType        #506:#970    // size:()I\n-   #880 = Utf8               archive contains more than 65535 entries.\n-   #881 = NameAndType        #1067:#1070  // min:(II)I\n-   #882 = NameAndType        #414:#369    // ZIP64_EOCD_SIG:[B\n-   #883 = NameAndType        #415:#369    // ZIP64_EOCD_LOC_SIG:[B\n-   #884 = NameAndType        #387:#369    // ONE:[B\n-   #885 = NameAndType        #590:#526    // writeOut:([BII)V\n-   #886 = NameAndType        #1071:#447   // useUTF8ForNames:(Z)V\n-   #887 = NameAndType        #1072:#447   // useDataDescriptor:(Z)V\n-   #888 = NameAndType        #600:#601    // versionNeededToExtractMethod:(I)I\n-   #889 = NameAndType        #416:#1073   // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-   #890 = NameAndType        #1074:#1019  // access$502:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n-   #891 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-   #892 = NameAndType        #1075:#1038  // addAsFirstExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n-   #893 = NameAndType        #1076:#393   // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #894 = NameAndType        #410:#994    // LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #895 = NameAndType        #411:#994    // DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #896 = NameAndType        #412:#994    // CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #897 = Utf8               org/apache/commons/compress/archivers/ArchiveOutputStream\n-   #898 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1\n-   #899 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy\n-   #900 = Utf8               java/io/File\n-   #901 = Utf8               java/io/OutputStream\n-   #902 = Utf8               java/nio/channels/SeekableByteChannel\n-   #903 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor\n-   #904 = Utf8               java/util/Iterator\n-   #905 = Utf8               org/apache/commons/compress/archivers/zip/Zip64Mode\n-   #906 = Utf8               java/nio/ByteBuffer\n-   #907 = Utf8               java/lang/String\n-   #908 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-   #909 = Utf8               getZipEncoding\n-   #910 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #911 = Utf8               NEVER\n-   #912 = Utf8               AsNeeded\n-   #913 = Utf8               java/util/Calendar\n-   #914 = Utf8               getInstance\n-   #915 = Utf8               ()Ljava/util/Calendar;\n-   #916 = Utf8               (IZ)V\n-   #917 = Utf8               create\n-   #918 = Utf8               (Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-   #919 = Utf8               toPath\n-   #920 = Utf8               ()Ljava/nio/file/Path;\n-   #921 = Utf8               java/nio/file/StandardOpenOption\n-   #922 = Utf8               CREATE\n-   #923 = Utf8               Ljava/nio/file/StandardOpenOption;\n-   #924 = Utf8               WRITE\n-   #925 = Utf8               READ\n-   #926 = Utf8               TRUNCATE_EXISTING\n-   #927 = Utf8               java/util/EnumSet\n-   #928 = Utf8               of\n-   #929 = Utf8               (Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;\n-   #930 = Utf8               java/nio/file/Files\n-   #931 = Utf8               newByteChannel\n-   #932 = Utf8               (Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n-   #933 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-   #934 = Utf8               org/apache/commons/compress/utils/IOUtils\n-   #935 = Utf8               closeQuietly\n-   #936 = Utf8               (Ljava/io/Closeable;)V\n-   #937 = Utf8               isUTF8\n-   #938 = Utf8               (Ljava/lang/String;)Z\n-   #939 = Utf8               getTotalBytesWritten\n-   #940 = Utf8               ()J\n-   #941 = Utf8               java/util/Map\n-   #942 = Utf8               clear\n-   #943 = Utf8               java/util/List\n-   #944 = Utf8               iterator\n-   #945 = Utf8               ()Ljava/util/Iterator;\n-   #946 = Utf8               hasNext\n-   #947 = Utf8               next\n-   #948 = Utf8               ()Ljava/lang/Object;\n-   #949 = Utf8               toByteArray\n-   #950 = Utf8               ()[B\n-   #951 = Utf8               reset\n-   #952 = Utf8               access$000\n-   #953 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n-   #954 = Utf8               getCrc32\n-   #955 = Utf8               getBytesRead\n-   #956 = Utf8               access$102\n-   #957 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n-   #958 = Utf8               access$200\n-   #959 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-   #960 = Utf8               getSize\n-   #961 = Utf8               access$300\n-   #962 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n-   #963 = Utf8               HEADER_ID\n-   #964 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #965 = Utf8               removeExtraField\n-   #966 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-   #967 = Utf8               getCrc\n-   #968 = Utf8               getCompressedSize\n-   #969 = Utf8               getMethod\n-   #970 = Utf8               ()I\n-   #971 = Utf8               access$100\n-   #972 = Utf8               setSize\n-   #973 = Utf8               (J)V\n-   #974 = Utf8               setCompressedSize\n-   #975 = Utf8               setCrc\n-   #976 = Utf8               append\n-   #977 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #978 = Utf8               java/lang/Long\n-   #979 = Utf8               toHexString\n-   #980 = Utf8               (J)Ljava/lang/String;\n-   #981 = Utf8               toString\n-   #982 = Utf8               (J)Ljava/lang/StringBuilder;\n-   #983 = Utf8               Never\n-   #984 = Utf8               getEntryTooBigMessage\n-   #985 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n-   #986 = Utf8               Always\n-   #987 = Utf8               position\n-   #988 = Utf8               access$400\n-   #989 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n-   #990 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-   #991 = Utf8               getBytes\n-   #992 = Utf8               (J)[B\n-   #993 = Utf8               ZIP64_MAGIC\n-   #994 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #995 = Utf8               limit\n-   #996 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-   #997 = Utf8               (I)[B\n-   #998 = Utf8               setExtra\n-   #999 = Utf8               access$500\n-  #1000 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n-  #1001 = Utf8               add\n-  #1002 = Utf8               (Ljava/lang/Object;)Z\n-  #1003 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #1004 = Utf8               getTime\n-  #1005 = Utf8               java/lang/System\n-  #1006 = Utf8               currentTimeMillis\n-  #1007 = Utf8               setTime\n-  #1008 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #1009 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n-  #1010 = Utf8               IMPLODING\n-  #1011 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #1012 = Utf8               getCode\n-  #1013 = Utf8               UNSHRINKING\n-  #1014 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n-  #1015 = Utf8               canHandleEntryData\n-  #1016 = Utf8               checkRequestedFeatures\n-  #1017 = Utf8               ([BIII)J\n-  #1018 = Utf8               access$302\n-  #1019 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n-  #1020 = Utf8               java/io/InputStream\n-  #1021 = Utf8               read\n-  #1022 = Utf8               ([B)I\n-  #1023 = Utf8               canEncode\n-  #1024 = Utf8               (JZLorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n-  #1025 = Utf8               put\n-  #1026 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #1027 = Utf8               access$402\n-  #1028 = Utf8               access$002\n-  #1029 = Utf8               ID\n-  #1030 = Utf8               getExtraField\n-  #1031 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #1032 = Utf8               getAlignment\n-  #1033 = Utf8               ()S\n-  #1034 = Utf8               allowMethodChange\n-  #1035 = Utf8               getLocalFileDataExtra\n-  #1036 = Utf8               (IZI)V\n-  #1037 = Utf8               addExtraField\n-  #1038 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n-  #1039 = Utf8               arraycopy\n-  #1040 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #1041 = Utf8               putShort\n-  #1042 = Utf8               (I[BI)V\n-  #1043 = Utf8               encode\n-  #1044 = Utf8               ([BI)V\n-  #1045 = Utf8               toDosTime\n-  #1046 = Utf8               (Ljava/util/Calendar;J[BI)V\n-  #1047 = Utf8               putLong\n-  #1048 = Utf8               (J[BI)V\n-  #1049 = Utf8               array\n-  #1050 = Utf8               arrayOffset\n-  #1051 = Utf8               ALWAYS\n-  #1052 = Utf8               (Ljava/lang/String;[BII)V\n-  #1053 = Utf8               getComment\n-  #1054 = Utf8               equals\n-  #1055 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-  #1056 = Utf8               get\n-  #1057 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #1058 = Utf8               access$800\n-  #1059 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)J\n-  #1060 = Utf8               getCentralDirectoryExtra\n-  #1061 = Utf8               getPlatform\n-  #1062 = Utf8               access$900\n-  #1063 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)Z\n-  #1064 = Utf8               getInternalAttributes\n-  #1065 = Utf8               getExternalAttributes\n-  #1066 = Utf8               java/lang/Math\n-  #1067 = Utf8               min\n-  #1068 = Utf8               (JJ)J\n-  #1069 = Utf8               setRelativeHeaderOffset\n-  #1070 = Utf8               (II)I\n-  #1071 = Utf8               useUTF8ForNames\n-  #1072 = Utf8               useDataDescriptor\n-  #1073 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n-  #1074 = Utf8               access$502\n-  #1075 = Utf8               addAsFirstExtraField\n-  #1076 = Utf8               UTF8_ZIP_ENCODING\n+   #432 = Class              #881         // java/io/File\n+   #433 = Class              #882         // java/io/OutputStream\n+   #434 = Class              #883         // java/nio/channels/SeekableByteChannel\n+   #435 = Class              #884         // org/apache/commons/compress/archivers/zip/StreamCompressor\n+   #436 = Utf8               Exceptions\n+   #437 = Utf8               (Ljava/nio/channels/SeekableByteChannel;)V\n+   #438 = Utf8               isSeekable\n+   #439 = Utf8               ()Z\n+   #440 = Utf8               setEncoding\n+   #441 = Utf8               (Ljava/lang/String;)V\n+   #442 = Utf8               getEncoding\n+   #443 = Utf8               ()Ljava/lang/String;\n+   #444 = Utf8               setUseLanguageEncodingFlag\n+   #445 = Utf8               (Z)V\n+   #446 = Utf8               b\n+   #447 = Utf8               setCreateUnicodeExtraFields\n+   #448 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;)V\n+   #449 = Utf8               setFallbackToUTF8\n+   #450 = Utf8               setUseZip64\n+   #451 = Utf8               (Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V\n+   #452 = Utf8               mode\n+   #453 = Utf8               finish\n+   #454 = Utf8               ()V\n+   #455 = Utf8               writeCentralDirectoryInChunks\n+   #456 = Utf8               ze\n+   #457 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+   #458 = Utf8               NUM_PER_WRITE\n+   #459 = Utf8               byteArrayOutputStream\n+   #460 = Utf8               Ljava/io/ByteArrayOutputStream;\n+   #461 = Utf8               count\n+   #462 = Class              #885         // java/util/Iterator\n+   #463 = Utf8               closeArchiveEntry\n+   #464 = Utf8               bytesWritten\n+   #465 = Utf8               realCrc\n+   #466 = Utf8               effectiveMode\n+   #467 = Utf8               actuallyNeedsZip64\n+   #468 = Utf8               closeCopiedEntry\n+   #469 = Utf8               phased\n+   #470 = Utf8               closeEntry\n+   #471 = Utf8               (ZZ)V\n+   #472 = Utf8               preClose\n+   #473 = Utf8               addRawArchiveEntry\n+   #474 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n+   #475 = Utf8               rawStream\n+   #476 = Utf8               Ljava/io/InputStream;\n+   #477 = Utf8               ae\n+   #478 = Utf8               is2PhaseSource\n+   #479 = Utf8               flushDeflater\n+   #480 = Utf8               handleSizesAndCrc\n+   #481 = Utf8               (JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+   #482 = Utf8               crc\n+   #483 = Utf8               checkIfNeedsZip64\n+   #484 = Utf8               (Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+   #485 = Utf8               isZip64Required\n+   #486 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+   #487 = Utf8               entry1\n+   #488 = Utf8               requestedMode\n+   #489 = Utf8               isTooLageForZip32\n+   #490 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #491 = Utf8               zipArchiveEntry\n+   #492 = Utf8               rewriteSizesAndCrc\n+   #493 = Utf8               name\n+   #494 = Utf8               Ljava/nio/ByteBuffer;\n+   #495 = Utf8               nameLen\n+   #496 = Utf8               save\n+   #497 = Utf8               putArchiveEntry\n+   #498 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n+   #499 = Utf8               archiveEntry\n+   #500 = Utf8               Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+   #501 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V\n+   #502 = Utf8               size\n+   #503 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #504 = Utf8               compressedSize\n+   #505 = Utf8               z64\n+   #506 = Utf8               Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n+   #507 = Class              #886         // org/apache/commons/compress/archivers/zip/Zip64Mode\n+   #508 = Utf8               setDefaults\n+   #509 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #510 = Utf8               validateSizeInformation\n+   #511 = Utf8               shouldAddZip64Extra\n+   #512 = Utf8               setComment\n+   #513 = Utf8               setLevel\n+   #514 = Utf8               (I)V\n+   #515 = Utf8               setMethod\n+   #516 = Utf8               canWriteEntryData\n+   #517 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z\n+   #518 = Utf8               zae\n+   #519 = Utf8               write\n+   #520 = Utf8               ([BII)V\n+   #521 = Utf8               offset\n+   #522 = Utf8               length\n+   #523 = Utf8               writtenThisTime\n+   #524 = Utf8               writeCounted\n+   #525 = Utf8               ([B)V\n+   #526 = Utf8               data\n+   #527 = Utf8               copyFromZipInputStream\n+   #528 = Utf8               (Ljava/io/InputStream;)V\n+   #529 = Utf8               src\n+   #530 = Utf8               close\n+   #531 = Utf8               flush\n+   #532 = Utf8               deflate\n+   #533 = Utf8               writeLocalFileHeader\n+   #534 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V\n+   #535 = Utf8               encodable\n+   #536 = Utf8               localHeaderStart\n+   #537 = Utf8               localHeader\n+   #538 = Class              #887         // java/nio/ByteBuffer\n+   #539 = Utf8               createLocalFileHeader\n+   #540 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B\n+   #541 = Utf8               oldLength\n+   #542 = Utf8               padding\n+   #543 = Utf8               archiveOffset\n+   #544 = Utf8               oldAlignmentEx\n+   #545 = Utf8               Lorg/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField;\n+   #546 = Utf8               alignment\n+   #547 = Utf8               extra\n+   #548 = Utf8               len\n+   #549 = Utf8               buf\n+   #550 = Utf8               zipMethod\n+   #551 = Utf8               dataDescriptor\n+   #552 = Utf8               generalPurposeBit\n+   #553 = Utf8               Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+   #554 = Class              #369         // \"[B\"\n+   #555 = Utf8               addUnicodeExtraFields\n+   #556 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V\n+   #557 = Utf8               commentB\n+   #558 = Utf8               commentEncodable\n+   #559 = Utf8               comm\n+   #560 = Class              #888         // java/lang/String\n+   #561 = Utf8               writeDataDescriptor\n+   #562 = Utf8               writeCentralFileHeader\n+   #563 = Utf8               centralFileHeader\n+   #564 = Utf8               createCentralFileHeader\n+   #565 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B\n+   #566 = Utf8               entryMetaData\n+   #567 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;\n+   #568 = Utf8               needsZip64Extra\n+   #569 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B\n+   #570 = Utf8               commentLen\n+   #571 = Utf8               extraStart\n+   #572 = Utf8               commentStart\n+   #573 = Utf8               handleZip64Extra\n+   #574 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V\n+   #575 = Utf8               lfhOffset\n+   #576 = Utf8               writeCentralDirectoryEnd\n+   #577 = Utf8               numberOfEntries\n+   #578 = Utf8               num\n+   #579 = Utf8               dataLen\n+   #580 = Utf8               writeZip64CentralDirectory\n+   #581 = Utf8               writeOut\n+   #582 = Utf8               getGeneralPurposeBits\n+   #583 = Utf8               (ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+   #584 = Utf8               utfFallback\n+   #585 = Utf8               usesDataDescriptor\n+   #586 = Utf8               versionNeededToExtract\n+   #587 = Utf8               (IZZ)I\n+   #588 = Utf8               zip64\n+   #589 = Utf8               usedDataDescriptor\n+   #590 = Utf8               (IZ)Z\n+   #591 = Utf8               versionNeededToExtractMethod\n+   #592 = Utf8               (I)I\n+   #593 = Utf8               createArchiveEntry\n+   #594 = Utf8               (Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+   #595 = Utf8               inputFile\n+   #596 = Utf8               entryName\n+   #597 = Utf8               getZip64Extra\n+   #598 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n+   #599 = Utf8               hasZip64Extra\n+   #600 = Utf8               getEffectiveZip64Mode\n+   #601 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+   #602 = Utf8               getEntryEncoding\n+   #603 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #604 = Class              #889         // org/apache/commons/compress/archivers/zip/ZipEncoding\n+   #605 = Utf8               getName\n+   #606 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/nio/ByteBuffer;\n+   #607 = Utf8               destroy\n+   #608 = Utf8               <clinit>\n+   #609 = Utf8               SourceFile\n+   #610 = Utf8               ZipArchiveOutputStream.java\n+   #611 = Utf8               java/util/zip/ZipEntry\n+   #612 = Utf8               java/util/zip/Deflater\n+   #613 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+   #614 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+   #615 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n+   #616 = NameAndType        #416:#454    // \"<init>\":()V\n+   #617 = NameAndType        #355:#356    // finished:Z\n+   #618 = Utf8\n+   #619 = NameAndType        #372:#362    // comment:Ljava/lang/String;\n+   #620 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+   #621 = NameAndType        #373:#303    // level:I\n+   #622 = NameAndType        #374:#356    // hasCompressionLevelChanged:Z\n+   #623 = NameAndType        #375:#303    // method:I\n+   #624 = Utf8               java/util/LinkedList\n+   #625 = NameAndType        #376:#377    // entries:Ljava/util/List;\n+   #626 = NameAndType        #382:#383    // cdOffset:J\n+   #627 = NameAndType        #384:#383    // cdLength:J\n+   #628 = Utf8               java/util/HashMap\n+   #629 = NameAndType        #388:#389    // metaData:Ljava/util/Map;\n+   #630 = Utf8               UTF8\n+   #631 = NameAndType        #391:#362    // encoding:Ljava/lang/String;\n+   #632 = NameAndType        #890:#891    // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #633 = NameAndType        #392:#393    // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #634 = NameAndType        #400:#356    // useUTF8Flag:Z\n+   #635 = NameAndType        #401:#356    // fallbackToUTF8:Z\n+   #636 = NameAndType        #892:#403    // NEVER:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n+   #637 = NameAndType        #402:#403    // createUnicodeExtraFields:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n+   #638 = NameAndType        #404:#356    // hasUsedZip64:Z\n+   #639 = NameAndType        #893:#406    // AsNeeded:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+   #640 = NameAndType        #405:#406    // zip64Mode:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+   #641 = NameAndType        #407:#369    // copyBuffer:[B\n+   #642 = Class              #894         // java/util/Calendar\n+   #643 = NameAndType        #895:#896    // getInstance:()Ljava/util/Calendar;\n+   #644 = NameAndType        #408:#409    // calendarInstance:Ljava/util/Calendar;\n+   #645 = NameAndType        #398:#399    // out:Ljava/io/OutputStream;\n+   #646 = NameAndType        #396:#397    // channel:Ljava/nio/channels/SeekableByteChannel;\n+   #647 = NameAndType        #416:#897    // \"<init>\":(IZ)V\n+   #648 = NameAndType        #394:#395    // def:Ljava/util/zip/Deflater;\n+   #649 = NameAndType        #898:#899    // create:(Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #650 = NameAndType        #380:#381    // streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #651 = NameAndType        #900:#901    // toPath:()Ljava/nio/file/Path;\n+   #652 = Class              #902         // java/nio/file/StandardOpenOption\n+   #653 = NameAndType        #903:#904    // CREATE:Ljava/nio/file/StandardOpenOption;\n+   #654 = NameAndType        #905:#904    // WRITE:Ljava/nio/file/StandardOpenOption;\n+   #655 = NameAndType        #906:#904    // READ:Ljava/nio/file/StandardOpenOption;\n+   #656 = NameAndType        #907:#904    // TRUNCATE_EXISTING:Ljava/nio/file/StandardOpenOption;\n+   #657 = Class              #908         // java/util/EnumSet\n+   #658 = NameAndType        #909:#910    // of:(Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;\n+   #659 = Utf8               java/nio/file/attribute/FileAttribute\n+   #660 = Class              #911         // java/nio/file/Files\n+   #661 = NameAndType        #912:#913    // newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+   #662 = NameAndType        #898:#914    // create:(Ljava/nio/channels/SeekableByteChannel;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #663 = Utf8               java/io/IOException\n+   #664 = Class              #915         // org/apache/commons/compress/utils/IOUtils\n+   #665 = NameAndType        #916:#917    // closeQuietly:(Ljava/io/Closeable;)V\n+   #666 = Utf8               java/io/FileOutputStream\n+   #667 = NameAndType        #416:#423    // \"<init>\":(Ljava/io/File;)V\n+   #668 = NameAndType        #918:#919    // isUTF8:(Ljava/lang/String;)Z\n+   #669 = Utf8               This archive has already been finished\n+   #670 = NameAndType        #416:#441    // \"<init>\":(Ljava/lang/String;)V\n+   #671 = NameAndType        #370:#371    // entry:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;\n+   #672 = Utf8               This archive contains unclosed entries.\n+   #673 = NameAndType        #920:#921    // getTotalBytesWritten:()J\n+   #674 = NameAndType        #455:#454    // writeCentralDirectoryInChunks:()V\n+   #675 = NameAndType        #580:#454    // writeZip64CentralDirectory:()V\n+   #676 = NameAndType        #576:#454    // writeCentralDirectoryEnd:()V\n+   #677 = Class              #922         // java/util/Map\n+   #678 = NameAndType        #923:#454    // clear:()V\n+   #679 = Class              #924         // java/util/List\n+   #680 = NameAndType        #530:#454    // close:()V\n+   #681 = Utf8               java/io/ByteArrayOutputStream\n+   #682 = NameAndType        #416:#514    // \"<init>\":(I)V\n+   #683 = NameAndType        #925:#926    // iterator:()Ljava/util/Iterator;\n+   #684 = NameAndType        #927:#439    // hasNext:()Z\n+   #685 = NameAndType        #928:#929    // next:()Ljava/lang/Object;\n+   #686 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+   #687 = NameAndType        #564:#565    // createCentralFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B\n+   #688 = NameAndType        #519:#525    // write:([B)V\n+   #689 = NameAndType        #930:#931    // toByteArray:()[B\n+   #690 = NameAndType        #524:#525    // writeCounted:([B)V\n+   #691 = NameAndType        #932:#454    // reset:()V\n+   #692 = NameAndType        #472:#454    // preClose:()V\n+   #693 = NameAndType        #479:#454    // flushDeflater:()V\n+   #694 = NameAndType        #933:#934    // access$000:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n+   #695 = NameAndType        #935:#921    // getCrc32:()J\n+   #696 = NameAndType        #936:#921    // getBytesRead:()J\n+   #697 = NameAndType        #937:#938    // access$102:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n+   #698 = NameAndType        #939:#940    // access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+   #699 = NameAndType        #600:#601    // getEffectiveZip64Mode:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+   #700 = NameAndType        #480:#481    // handleSizesAndCrc:(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+   #701 = NameAndType        #470:#471    // closeEntry:(ZZ)V\n+   #702 = NameAndType        #941:#921    // getSize:()J\n+   #703 = NameAndType        #483:#484    // checkIfNeedsZip64:(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+   #704 = NameAndType        #492:#445    // rewriteSizesAndCrc:(Z)V\n+   #705 = NameAndType        #561:#509    // writeDataDescriptor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #706 = Utf8               Stream has already been finished\n+   #707 = Utf8               No current entry to close\n+   #708 = NameAndType        #942:#943    // access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n+   #709 = NameAndType        #368:#369    // EMPTY:[B\n+   #710 = NameAndType        #519:#520    // write:([BII)V\n+   #711 = NameAndType        #416:#509    // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #712 = NameAndType        #599:#490    // hasZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #713 = NameAndType        #944:#945    // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #714 = NameAndType        #946:#947    // removeExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+   #715 = NameAndType        #948:#921    // getCrc:()J\n+   #716 = Utf8               org/apache/commons/compress/archivers/ArchiveEntry\n+   #717 = NameAndType        #949:#921    // getCompressedSize:()J\n+   #718 = NameAndType        #497:#501    // putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V\n+   #719 = NameAndType        #527:#528    // copyFromZipInputStream:(Ljava/io/InputStream;)V\n+   #720 = NameAndType        #468:#445    // closeCopiedEntry:(Z)V\n+   #721 = NameAndType        #950:#951    // getMethod:()I\n+   #722 = NameAndType        #952:#934    // access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n+   #723 = NameAndType        #953:#954    // setSize:(J)V\n+   #724 = NameAndType        #955:#954    // setCompressedSize:(J)V\n+   #725 = NameAndType        #956:#954    // setCrc:(J)V\n+   #726 = Utf8               java/util/zip/ZipException\n+   #727 = Utf8               java/lang/StringBuilder\n+   #728 = Utf8               bad CRC checksum for entry\n+   #729 = NameAndType        #957:#958    // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #730 = NameAndType        #605:#443    // getName:()Ljava/lang/String;\n+   #731 = Utf8               :\n+   #732 = Class              #959         // java/lang/Long\n+   #733 = NameAndType        #960:#961    // toHexString:(J)Ljava/lang/String;\n+   #734 = Utf8                instead of\n+   #735 = NameAndType        #962:#443    // toString:()Ljava/lang/String;\n+   #736 = Utf8               bad size for entry\n+   #737 = NameAndType        #957:#963    // append:(J)Ljava/lang/StringBuilder;\n+   #738 = NameAndType        #485:#486    // isZip64Required:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+   #739 = NameAndType        #964:#406    // Never:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+   #740 = Utf8               org/apache/commons/compress/archivers/zip/Zip64RequiredException\n+   #741 = NameAndType        #965:#966    // getEntryTooBigMessage:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n+   #742 = NameAndType        #967:#406    // Always:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+   #743 = NameAndType        #489:#490    // isTooLageForZip32:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #744 = NameAndType        #968:#921    // position:()J\n+   #745 = NameAndType        #969:#934    // access$400:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n+   #746 = NameAndType        #968:#970    // position:(J)Ljava/nio/channels/SeekableByteChannel;\n+   #747 = Class              #971         // org/apache/commons/compress/archivers/zip/ZipLong\n+   #748 = NameAndType        #972:#973    // getBytes:(J)[B\n+   #749 = NameAndType        #581:#525    // writeOut:([B)V\n+   #750 = NameAndType        #974:#975    // ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #751 = NameAndType        #972:#931    // getBytes:()[B\n+   #752 = NameAndType        #605:#606    // getName:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/nio/ByteBuffer;\n+   #753 = NameAndType        #976:#951    // limit:()I\n+   #754 = NameAndType        #968:#951    // position:()I\n+   #755 = NameAndType        #586:#587    // versionNeededToExtract:(IZZ)I\n+   #756 = Class              #977         // org/apache/commons/compress/archivers/zip/ZipShort\n+   #757 = NameAndType        #972:#978    // getBytes:(I)[B\n+   #758 = NameAndType        #979:#454    // setExtra:()V\n+   #759 = NameAndType        #980:#943    // access$500:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n+   #760 = NameAndType        #463:#454    // closeArchiveEntry:()V\n+   #761 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry\n+   #762 = NameAndType        #416:#981    // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n+   #763 = NameAndType        #982:#983    // add:(Ljava/lang/Object;)Z\n+   #764 = NameAndType        #508:#509    // setDefaults:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #765 = NameAndType        #510:#451    // validateSizeInformation:(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V\n+   #766 = NameAndType        #511:#486    // shouldAddZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+   #767 = NameAndType        #597:#598    // getZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n+   #768 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+   #769 = NameAndType        #416:#954    // \"<init>\":(J)V\n+   #770 = NameAndType        #385:#503    // ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #771 = NameAndType        #953:#984    // setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #772 = NameAndType        #955:#984    // setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #773 = NameAndType        #513:#514    // setLevel:(I)V\n+   #774 = NameAndType        #533:#534    // writeLocalFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V\n+   #775 = NameAndType        #515:#514    // setMethod:(I)V\n+   #776 = NameAndType        #985:#921    // getTime:()J\n+   #777 = Class              #986         // java/lang/System\n+   #778 = NameAndType        #987:#921    // currentTimeMillis:()J\n+   #779 = NameAndType        #988:#954    // setTime:(J)V\n+   #780 = Utf8               uncompressed size is required for STORED method when not writing to a file\n+   #781 = Utf8               crc checksum is required for STORED method when not writing to a file\n+   #782 = Utf8               java/lang/IllegalArgumentException\n+   #783 = Utf8               Invalid compression level:\n+   #784 = NameAndType        #957:#989    // append:(I)Ljava/lang/StringBuilder;\n+   #785 = Class              #990         // org/apache/commons/compress/archivers/zip/ZipMethod\n+   #786 = NameAndType        #991:#992    // IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #787 = NameAndType        #993:#951    // getCode:()I\n+   #788 = NameAndType        #994:#992    // UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #789 = Class              #995         // org/apache/commons/compress/archivers/zip/ZipUtil\n+   #790 = NameAndType        #996:#490    // canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #791 = Utf8               java/lang/IllegalStateException\n+   #792 = Utf8               No current entry\n+   #793 = NameAndType        #997:#509    // checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #794 = NameAndType        #519:#998    // write:([BIII)J\n+   #795 = NameAndType        #461:#954    // count:(J)V\n+   #796 = NameAndType        #999:#1000   // access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n+   #797 = Class              #1001        // java/io/InputStream\n+   #798 = NameAndType        #1002:#1003  // read:([B)I\n+   #799 = NameAndType        #524:#520    // writeCounted:([BII)V\n+   #800 = NameAndType        #461:#514    // count:(I)V\n+   #801 = NameAndType        #453:#454    // finish:()V\n+   #802 = NameAndType        #607:#454    // destroy:()V\n+   #803 = NameAndType        #531:#454    // flush:()V\n+   #804 = NameAndType        #532:#454    // deflate:()V\n+   #805 = NameAndType        #1004:#919   // canEncode:(Ljava/lang/String;)Z\n+   #806 = NameAndType        #555:#556    // addUnicodeExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V\n+   #807 = NameAndType        #539:#540    // createLocalFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B\n+   #808 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData\n+   #809 = NameAndType        #585:#590    // usesDataDescriptor:(IZ)Z\n+   #810 = NameAndType        #416:#1005   // \"<init>\":(JZLorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n+   #811 = NameAndType        #1006:#1007  // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #812 = NameAndType        #1008:#938   // access$402:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n+   #813 = NameAndType        #1009:#938   // access$002:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n+   #814 = NameAndType        #1010:#945   // ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #815 = NameAndType        #1011:#1012  // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+   #816 = Utf8               org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n+   #817 = NameAndType        #1013:#951   // getAlignment:()I\n+   #818 = NameAndType        #1013:#1014  // getAlignment:()S\n+   #819 = NameAndType        #1015:#439   // allowMethodChange:()Z\n+   #820 = NameAndType        #1016:#931   // getLocalFileDataExtra:()[B\n+   #821 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n+   #822 = NameAndType        #416:#1017   // \"<init>\":(IZI)V\n+   #823 = NameAndType        #1018:#1019  // addExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n+   #824 = NameAndType        #410:#369    // LFH_SIG:[B\n+   #825 = NameAndType        #1020:#1021  // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #826 = NameAndType        #1022:#1023  // putShort:(I[BI)V\n+   #827 = NameAndType        #582:#583    // getGeneralPurposeBits:(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+   #828 = NameAndType        #1024:#1025  // encode:([BI)V\n+   #829 = NameAndType        #1026:#1027  // toDosTime:(Ljava/util/Calendar;J[BI)V\n+   #830 = NameAndType        #1028:#1029  // putLong:(J[BI)V\n+   #831 = NameAndType        #386:#369    // LZERO:[B\n+   #832 = NameAndType        #1028:#1025  // putLong:([BI)V\n+   #833 = NameAndType        #1030:#931   // array:()[B\n+   #834 = NameAndType        #1031:#951   // arrayOffset:()I\n+   #835 = NameAndType        #1032:#403   // ALWAYS:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n+   #836 = Utf8               org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n+   #837 = NameAndType        #416:#1033   // \"<init>\":(Ljava/lang/String;[BII)V\n+   #838 = NameAndType        #1034:#443   // getComment:()Ljava/lang/String;\n+   #839 = NameAndType        #1035:#983   // equals:(Ljava/lang/Object;)Z\n+   #840 = NameAndType        #602:#603    // getEntryEncoding:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #841 = NameAndType        #1024:#1036  // encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+   #842 = Utf8               org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n+   #843 = NameAndType        #411:#369    // DD_SIG:[B\n+   #844 = NameAndType        #1037:#1038  // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #845 = NameAndType        #1039:#1040  // access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)J\n+   #846 = Utf8               archive\\'s size exceeds the limit of 4GByte.\n+   #847 = NameAndType        #573:#574    // handleZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V\n+   #848 = NameAndType        #564:#569    // createCentralFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B\n+   #849 = NameAndType        #1041:#931   // getCentralDirectoryExtra:()[B\n+   #850 = NameAndType        #412:#369    // CFH_SIG:[B\n+   #851 = NameAndType        #1042:#951   // getPlatform:()I\n+   #852 = NameAndType        #1043:#1044  // access$900:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)Z\n+   #853 = NameAndType        #385:#369    // ZERO:[B\n+   #854 = NameAndType        #1045:#951   // getInternalAttributes:()I\n+   #855 = NameAndType        #1046:#921   // getExternalAttributes:()J\n+   #856 = Class              #1047        // java/lang/Math\n+   #857 = NameAndType        #1048:#1049  // min:(JJ)J\n+   #858 = NameAndType        #1050:#984   // setRelativeHeaderOffset:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #859 = NameAndType        #413:#369    // EOCD_SIG:[B\n+   #860 = NameAndType        #502:#951    // size:()I\n+   #861 = Utf8               archive contains more than 65535 entries.\n+   #862 = NameAndType        #1048:#1051  // min:(II)I\n+   #863 = NameAndType        #414:#369    // ZIP64_EOCD_SIG:[B\n+   #864 = NameAndType        #415:#369    // ZIP64_EOCD_LOC_SIG:[B\n+   #865 = NameAndType        #387:#369    // ONE:[B\n+   #866 = NameAndType        #581:#520    // writeOut:([BII)V\n+   #867 = NameAndType        #1052:#445   // useUTF8ForNames:(Z)V\n+   #868 = NameAndType        #1053:#445   // useDataDescriptor:(Z)V\n+   #869 = NameAndType        #591:#592    // versionNeededToExtractMethod:(I)I\n+   #870 = NameAndType        #416:#1054   // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+   #871 = NameAndType        #1055:#1000  // access$502:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n+   #872 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+   #873 = NameAndType        #1056:#1019  // addAsFirstExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n+   #874 = NameAndType        #1057:#393   // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #875 = NameAndType        #410:#975    // LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #876 = NameAndType        #411:#975    // DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #877 = NameAndType        #412:#975    // CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #878 = Utf8               org/apache/commons/compress/archivers/ArchiveOutputStream\n+   #879 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1\n+   #880 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy\n+   #881 = Utf8               java/io/File\n+   #882 = Utf8               java/io/OutputStream\n+   #883 = Utf8               java/nio/channels/SeekableByteChannel\n+   #884 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor\n+   #885 = Utf8               java/util/Iterator\n+   #886 = Utf8               org/apache/commons/compress/archivers/zip/Zip64Mode\n+   #887 = Utf8               java/nio/ByteBuffer\n+   #888 = Utf8               java/lang/String\n+   #889 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+   #890 = Utf8               getZipEncoding\n+   #891 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #892 = Utf8               NEVER\n+   #893 = Utf8               AsNeeded\n+   #894 = Utf8               java/util/Calendar\n+   #895 = Utf8               getInstance\n+   #896 = Utf8               ()Ljava/util/Calendar;\n+   #897 = Utf8               (IZ)V\n+   #898 = Utf8               create\n+   #899 = Utf8               (Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #900 = Utf8               toPath\n+   #901 = Utf8               ()Ljava/nio/file/Path;\n+   #902 = Utf8               java/nio/file/StandardOpenOption\n+   #903 = Utf8               CREATE\n+   #904 = Utf8               Ljava/nio/file/StandardOpenOption;\n+   #905 = Utf8               WRITE\n+   #906 = Utf8               READ\n+   #907 = Utf8               TRUNCATE_EXISTING\n+   #908 = Utf8               java/util/EnumSet\n+   #909 = Utf8               of\n+   #910 = Utf8               (Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;\n+   #911 = Utf8               java/nio/file/Files\n+   #912 = Utf8               newByteChannel\n+   #913 = Utf8               (Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+   #914 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #915 = Utf8               org/apache/commons/compress/utils/IOUtils\n+   #916 = Utf8               closeQuietly\n+   #917 = Utf8               (Ljava/io/Closeable;)V\n+   #918 = Utf8               isUTF8\n+   #919 = Utf8               (Ljava/lang/String;)Z\n+   #920 = Utf8               getTotalBytesWritten\n+   #921 = Utf8               ()J\n+   #922 = Utf8               java/util/Map\n+   #923 = Utf8               clear\n+   #924 = Utf8               java/util/List\n+   #925 = Utf8               iterator\n+   #926 = Utf8               ()Ljava/util/Iterator;\n+   #927 = Utf8               hasNext\n+   #928 = Utf8               next\n+   #929 = Utf8               ()Ljava/lang/Object;\n+   #930 = Utf8               toByteArray\n+   #931 = Utf8               ()[B\n+   #932 = Utf8               reset\n+   #933 = Utf8               access$000\n+   #934 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n+   #935 = Utf8               getCrc32\n+   #936 = Utf8               getBytesRead\n+   #937 = Utf8               access$102\n+   #938 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n+   #939 = Utf8               access$200\n+   #940 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+   #941 = Utf8               getSize\n+   #942 = Utf8               access$300\n+   #943 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n+   #944 = Utf8               HEADER_ID\n+   #945 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #946 = Utf8               removeExtraField\n+   #947 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+   #948 = Utf8               getCrc\n+   #949 = Utf8               getCompressedSize\n+   #950 = Utf8               getMethod\n+   #951 = Utf8               ()I\n+   #952 = Utf8               access$100\n+   #953 = Utf8               setSize\n+   #954 = Utf8               (J)V\n+   #955 = Utf8               setCompressedSize\n+   #956 = Utf8               setCrc\n+   #957 = Utf8               append\n+   #958 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #959 = Utf8               java/lang/Long\n+   #960 = Utf8               toHexString\n+   #961 = Utf8               (J)Ljava/lang/String;\n+   #962 = Utf8               toString\n+   #963 = Utf8               (J)Ljava/lang/StringBuilder;\n+   #964 = Utf8               Never\n+   #965 = Utf8               getEntryTooBigMessage\n+   #966 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n+   #967 = Utf8               Always\n+   #968 = Utf8               position\n+   #969 = Utf8               access$400\n+   #970 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n+   #971 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+   #972 = Utf8               getBytes\n+   #973 = Utf8               (J)[B\n+   #974 = Utf8               ZIP64_MAGIC\n+   #975 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #976 = Utf8               limit\n+   #977 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+   #978 = Utf8               (I)[B\n+   #979 = Utf8               setExtra\n+   #980 = Utf8               access$500\n+   #981 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n+   #982 = Utf8               add\n+   #983 = Utf8               (Ljava/lang/Object;)Z\n+   #984 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #985 = Utf8               getTime\n+   #986 = Utf8               java/lang/System\n+   #987 = Utf8               currentTimeMillis\n+   #988 = Utf8               setTime\n+   #989 = Utf8               (I)Ljava/lang/StringBuilder;\n+   #990 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n+   #991 = Utf8               IMPLODING\n+   #992 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #993 = Utf8               getCode\n+   #994 = Utf8               UNSHRINKING\n+   #995 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n+   #996 = Utf8               canHandleEntryData\n+   #997 = Utf8               checkRequestedFeatures\n+   #998 = Utf8               ([BIII)J\n+   #999 = Utf8               access$302\n+  #1000 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n+  #1001 = Utf8               java/io/InputStream\n+  #1002 = Utf8               read\n+  #1003 = Utf8               ([B)I\n+  #1004 = Utf8               canEncode\n+  #1005 = Utf8               (JZLorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n+  #1006 = Utf8               put\n+  #1007 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #1008 = Utf8               access$402\n+  #1009 = Utf8               access$002\n+  #1010 = Utf8               ID\n+  #1011 = Utf8               getExtraField\n+  #1012 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #1013 = Utf8               getAlignment\n+  #1014 = Utf8               ()S\n+  #1015 = Utf8               allowMethodChange\n+  #1016 = Utf8               getLocalFileDataExtra\n+  #1017 = Utf8               (IZI)V\n+  #1018 = Utf8               addExtraField\n+  #1019 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n+  #1020 = Utf8               arraycopy\n+  #1021 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #1022 = Utf8               putShort\n+  #1023 = Utf8               (I[BI)V\n+  #1024 = Utf8               encode\n+  #1025 = Utf8               ([BI)V\n+  #1026 = Utf8               toDosTime\n+  #1027 = Utf8               (Ljava/util/Calendar;J[BI)V\n+  #1028 = Utf8               putLong\n+  #1029 = Utf8               (J[BI)V\n+  #1030 = Utf8               array\n+  #1031 = Utf8               arrayOffset\n+  #1032 = Utf8               ALWAYS\n+  #1033 = Utf8               (Ljava/lang/String;[BII)V\n+  #1034 = Utf8               getComment\n+  #1035 = Utf8               equals\n+  #1036 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #1037 = Utf8               get\n+  #1038 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #1039 = Utf8               access$800\n+  #1040 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)J\n+  #1041 = Utf8               getCentralDirectoryExtra\n+  #1042 = Utf8               getPlatform\n+  #1043 = Utf8               access$900\n+  #1044 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)Z\n+  #1045 = Utf8               getInternalAttributes\n+  #1046 = Utf8               getExternalAttributes\n+  #1047 = Utf8               java/lang/Math\n+  #1048 = Utf8               min\n+  #1049 = Utf8               (JJ)J\n+  #1050 = Utf8               setRelativeHeaderOffset\n+  #1051 = Utf8               (II)I\n+  #1052 = Utf8               useUTF8ForNames\n+  #1053 = Utf8               useDataDescriptor\n+  #1054 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n+  #1055 = Utf8               access$502\n+  #1056 = Utf8               addAsFirstExtraField\n+  #1057 = Utf8               UTF8_ZIP_ENCODING\n {\n   static final int BUFFER_SIZE = 512;\n     descriptor: I\n     flags: (0x0018) ACC_STATIC, ACC_FINAL\n     ConstantValue: int 512\n \n   private static final int LFH_SIG_OFFSET = 0;\n@@ -5427,14 +5408,16 @@\n         28: goto          35\n         31: aload_0\n         32: getfield      #25                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n         35: areturn\n       LineNumberTable:\n         line 1583: 0\n         line 1584: 14\n+        line 1585: 25\n+        line 1584: 35\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      36     0  this   Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream;\n             0      36     1    ze   Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n            14      22     2 encodable   Z\n       StackMapTable: number_of_entries = 2\n         frame_type = 252 /* append */\n"}]}
