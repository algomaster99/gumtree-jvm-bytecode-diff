{"diffoscope-json-version": 1, "source1": "first/ZipArchiveEntry.class", "source2": "second/ZipArchiveEntry.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,15 +1,16 @@\n \n package org.apache.commons.compress.archivers.zip;\n \n-import java.util.Objects;\n import java.util.Date;\n import org.apache.commons.compress.utils.ByteUtils;\n import java.util.NoSuchElementException;\n+import java.util.stream.Stream;\n import java.util.function.Predicate;\n+import java.util.Objects;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Collection;\n import java.util.Arrays;\n import java.util.ArrayList;\n import java.nio.file.attribute.FileTime;\n import java.io.IOException;\n@@ -277,15 +278,18 @@\n     \n     private ZipExtraField[] getAllExtraFields() {\n         final ZipExtraField[] allExtraFieldsNoCopy = this.getAllExtraFieldsNoCopy();\n         return (allExtraFieldsNoCopy == this.extraFields) ? this.copyOf(allExtraFieldsNoCopy, allExtraFieldsNoCopy.length) : allExtraFieldsNoCopy;\n     }\n     \n     private ZipExtraField findUnparseable(final List<ZipExtraField> list) {\n-        return list.stream().filter(UnparseableExtraFieldData.class::isInstance).findFirst().orElse(null);\n+        final Stream<Object> stream = list.stream();\n+        final Class<UnparseableExtraFieldData> obj = UnparseableExtraFieldData.class;\n+        Objects.requireNonNull(obj);\n+        return stream.filter((Predicate<? super ZipExtraField>)obj::isInstance).findFirst().orElse(null);\n     }\n     \n     private ZipExtraField findMatching(final ZipShort zipShort, final List<ZipExtraField> list) {\n         return list.stream().filter(zipExtraField -> zipShort2.equals((Object)zipExtraField.getHeaderId())).findFirst().orElse(null);\n     }\n     \n     public void addExtraField(final ZipExtraField zipExtraField) {\n"}]}
