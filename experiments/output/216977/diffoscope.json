{"diffoscope-json-version": 1, "source1": "first/ArrayType.class", "source2": "second/ArrayType.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -17,40 +17,40 @@\n     public ArrayType(final Type type, final int dimensions) {\n         super((byte)13, \"<dummy>\");\n         if (dimensions < 1 || dimensions > 255) {\n             throw new ClassGenException(\"Invalid number of dimensions: \" + dimensions);\n         }\n         switch (type.getType()) {\n             case 13: {\n-                final ArrayType array = (ArrayType)type;\n-                this.dimensions = dimensions + array.dimensions;\n-                this.basicType = array.basicType;\n+                final ArrayType arrayType = (ArrayType)type;\n+                this.dimensions = dimensions + arrayType.dimensions;\n+                this.basicType = arrayType.basicType;\n                 break;\n             }\n             case 12: {\n                 throw new ClassGenException(\"Invalid type: void[]\");\n             }\n             default: {\n                 this.dimensions = dimensions;\n                 this.basicType = type;\n                 break;\n             }\n         }\n-        final StringBuilder buf = new StringBuilder();\n+        final StringBuilder sb = new StringBuilder();\n         for (int i = 0; i < this.dimensions; ++i) {\n-            buf.append('[');\n+            sb.append('[');\n         }\n-        buf.append(this.basicType.getSignature());\n-        super.setSignature(buf.toString());\n+        sb.append(this.basicType.getSignature());\n+        super.setSignature(sb.toString());\n     }\n     \n     public boolean equals(final Object type) {\n         if (type instanceof ArrayType) {\n-            final ArrayType array = (ArrayType)type;\n-            return array.dimensions == this.dimensions && array.basicType.equals((Object)this.basicType);\n+            final ArrayType arrayType = (ArrayType)type;\n+            return arrayType.dimensions == this.dimensions && arrayType.basicType.equals((Object)this.basicType);\n         }\n         return false;\n     }\n     \n     public Type getBasicType() {\n         return this.basicType;\n     }\n"}]}
