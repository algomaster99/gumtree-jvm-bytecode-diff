{"diffoscope-json-version": 1, "source1": "first/JsonGenerator.class", "source2": "second/JsonGenerator.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,33 +1,39 @@\n \n package com.fasterxml.jackson.core;\n \n-import com.fasterxml.jackson.core.util.JacksonFeature;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicInteger;\n import com.fasterxml.jackson.core.util.VersionUtil;\n import com.fasterxml.jackson.core.type.WritableTypeId;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.io.InputStream;\n import java.io.Reader;\n import java.io.IOException;\n import com.fasterxml.jackson.core.io.CharacterEscapes;\n+import com.fasterxml.jackson.core.util.JacksonFeature;\n import com.fasterxml.jackson.core.util.JacksonFeatureSet;\n import java.io.Flushable;\n import java.io.Closeable;\n \n public abstract class JsonGenerator implements Closeable, Flushable, Versioned\n {\n     protected static final JacksonFeatureSet<StreamWriteCapability> DEFAULT_WRITE_CAPABILITIES;\n     protected static final JacksonFeatureSet<StreamWriteCapability> DEFAULT_TEXTUAL_WRITE_CAPABILITIES;\n     protected static final JacksonFeatureSet<StreamWriteCapability> DEFAULT_BINARY_WRITE_CAPABILITIES;\n     protected PrettyPrinter _cfgPrettyPrinter;\n     \n+    static {\n+        DEFAULT_WRITE_CAPABILITIES = JacksonFeatureSet.fromDefaults((JacksonFeature[])StreamWriteCapability.values());\n+        DEFAULT_TEXTUAL_WRITE_CAPABILITIES = JsonGenerator.DEFAULT_WRITE_CAPABILITIES.with((JacksonFeature)StreamWriteCapability.CAN_WRITE_FORMATTED_NUMBERS);\n+        DEFAULT_BINARY_WRITE_CAPABILITIES = JsonGenerator.DEFAULT_WRITE_CAPABILITIES.with((JacksonFeature)StreamWriteCapability.CAN_WRITE_BINARY_NATIVELY);\n+    }\n+    \n     protected JsonGenerator() {\n     }\n     \n     public abstract JsonGenerator setCodec(final ObjectCodec p0);\n     \n     public abstract ObjectCodec getCodec();\n     \n@@ -369,27 +375,27 @@\n         else {\n             final String idStr = (id instanceof String) ? ((String)id) : String.valueOf(id);\n             typeIdDef.wrapperWritten = true;\n             WritableTypeId.Inclusion incl = typeIdDef.include;\n             if (valueShape != JsonToken.START_OBJECT && incl.requiresObjectContext()) {\n                 incl = (typeIdDef.include = WritableTypeId.Inclusion.WRAPPER_ARRAY);\n             }\n-            switch (JsonGenerator.JsonGenerator$1.$SwitchMap$com$fasterxml$jackson$core$type$WritableTypeId$Inclusion[incl.ordinal()]) {\n-                case 1: {\n+            switch (incl) {\n+                case PARENT_PROPERTY: {\n                     break;\n                 }\n-                case 2: {\n+                case PAYLOAD_PROPERTY: {\n                     break;\n                 }\n-                case 3: {\n+                case METADATA_PROPERTY: {\n                     this.writeStartObject(typeIdDef.forValue);\n                     this.writeStringField(typeIdDef.asProperty, idStr);\n                     return typeIdDef;\n                 }\n-                case 4: {\n+                case WRAPPER_OBJECT: {\n                     this.writeStartObject();\n                     this.writeFieldName(idStr);\n                     break;\n                 }\n                 default: {\n                     this.writeStartArray();\n                     this.writeString(idStr);\n@@ -411,27 +417,27 @@\n         if (valueShape == JsonToken.START_OBJECT) {\n             this.writeEndObject();\n         }\n         else if (valueShape == JsonToken.START_ARRAY) {\n             this.writeEndArray();\n         }\n         if (typeIdDef.wrapperWritten) {\n-            switch (JsonGenerator.JsonGenerator$1.$SwitchMap$com$fasterxml$jackson$core$type$WritableTypeId$Inclusion[typeIdDef.include.ordinal()]) {\n-                case 5: {\n+            switch (typeIdDef.include) {\n+                case WRAPPER_ARRAY: {\n                     this.writeEndArray();\n                     break;\n                 }\n-                case 1: {\n+                case PARENT_PROPERTY: {\n                     final Object id = typeIdDef.id;\n                     final String idStr = (id instanceof String) ? ((String)id) : String.valueOf(id);\n                     this.writeStringField(typeIdDef.asProperty, idStr);\n                     break;\n                 }\n-                case 2:\n-                case 3: {\n+                case METADATA_PROPERTY:\n+                case PAYLOAD_PROPERTY: {\n                     break;\n                 }\n                 default: {\n                     this.writeEndObject();\n                     break;\n                 }\n             }\n@@ -879,14 +885,8 @@\n             if (value instanceof AtomicBoolean) {\n                 this.writeBoolean(((AtomicBoolean)value).get());\n                 return;\n             }\n         }\n         throw new IllegalStateException(\"No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed \" + value.getClass().getName() + \")\");\n     }\n-    \n-    static {\n-        DEFAULT_WRITE_CAPABILITIES = JacksonFeatureSet.fromDefaults((JacksonFeature[])StreamWriteCapability.values());\n-        DEFAULT_TEXTUAL_WRITE_CAPABILITIES = JsonGenerator.DEFAULT_WRITE_CAPABILITIES.with((JacksonFeature)StreamWriteCapability.CAN_WRITE_FORMATTED_NUMBERS);\n-        DEFAULT_BINARY_WRITE_CAPABILITIES = JsonGenerator.DEFAULT_WRITE_CAPABILITIES.with((JacksonFeature)StreamWriteCapability.CAN_WRITE_BINARY_NATIVELY);\n-    }\n }\n"}]}
