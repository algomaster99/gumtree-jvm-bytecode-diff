{"diffoscope-json-version": 1, "source1": "first/StringUtils.class", "source2": "second/StringUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -23,14 +23,18 @@\n     public static final String EMPTY = \"\";\n     public static final String LF = \"\\n\";\n     public static final String CR = \"\\r\";\n     public static final int INDEX_NOT_FOUND = -1;\n     private static final int PAD_LIMIT = 8192;\n     private static final Pattern STRIP_ACCENTS_PATTERN;\n     \n+    static {\n+        STRIP_ACCENTS_PATTERN = Pattern.compile(\"\\\\p{InCombiningDiacriticalMarks}+\");\n+    }\n+    \n     public static String abbreviate(final String str, final int maxWidth) {\n         return abbreviate(str, \"...\", 0, maxWidth);\n     }\n     \n     public static String abbreviate(final String str, final int offset, final int maxWidth) {\n         return abbreviate(str, \"...\", offset, maxWidth);\n     }\n@@ -58,47 +62,47 @@\n         if (offset > str.length()) {\n             offset = str.length();\n         }\n         if (str.length() - offset < maxWidth - abbrevMarkerLength) {\n             offset = str.length() - (maxWidth - abbrevMarkerLength);\n         }\n         if (offset <= abbrevMarkerLength + 1) {\n-            return str.substring(0, maxWidth - abbrevMarkerLength) + abbrevMarker;\n+            return String.valueOf(str.substring(0, maxWidth - abbrevMarkerLength)) + abbrevMarker;\n         }\n         if (maxWidth < minAbbrevWidthOffset) {\n             throw new IllegalArgumentException(String.format(\"Minimum abbreviation width with offset is %d\", Integer.valueOf(minAbbrevWidthOffset)));\n         }\n         if (offset + maxWidth - abbrevMarkerLength < str.length()) {\n-            return abbrevMarker + abbreviate(str.substring(offset), abbrevMarker, maxWidth - abbrevMarkerLength);\n+            return String.valueOf(abbrevMarker) + abbreviate(str.substring(offset), abbrevMarker, maxWidth - abbrevMarkerLength);\n         }\n-        return abbrevMarker + str.substring(str.length() - (maxWidth - abbrevMarkerLength));\n+        return String.valueOf(abbrevMarker) + str.substring(str.length() - (maxWidth - abbrevMarkerLength));\n     }\n     \n     public static String abbreviateMiddle(final String str, final String middle, final int length) {\n         if (isAnyEmpty(str, middle) || length >= str.length() || length < middle.length() + 2) {\n             return str;\n         }\n         final int targetSting = length - middle.length();\n         final int startOffset = targetSting / 2 + targetSting % 2;\n         final int endOffset = str.length() - targetSting / 2;\n-        return str.substring(0, startOffset) + middle + str.substring(endOffset);\n+        return String.valueOf(str.substring(0, startOffset)) + middle + str.substring(endOffset);\n     }\n     \n     private static String appendIfMissing(final String str, final CharSequence suffix, final boolean ignoreCase, final CharSequence... suffixes) {\n         if (str == null || isEmpty(suffix) || endsWith(str, suffix, ignoreCase)) {\n             return str;\n         }\n         if (ArrayUtils.isNotEmpty((Object[])suffixes)) {\n             for (final CharSequence s : suffixes) {\n                 if (endsWith(str, s, ignoreCase)) {\n                     return str;\n                 }\n             }\n         }\n-        return str + suffix.toString();\n+        return String.valueOf(str) + suffix.toString();\n     }\n     \n     public static String appendIfMissing(final String str, final CharSequence suffix, final CharSequence... suffixes) {\n         return appendIfMissing(str, suffix, false, suffixes);\n     }\n     \n     public static String appendIfMissingIgnoreCase(final String str, final CharSequence suffix, final CharSequence... suffixes) {\n@@ -823,21 +827,21 @@\n             return -1;\n         }\n         final int csLen = cs.length();\n         final int csLast = csLen - 1;\n         final int searchLen = searchChars.length;\n         final int searchLast = searchLen - 1;\n         int i = 0;\n-    Label_0040:\n+    Label_0127:\n         while (i < csLen) {\n             final char ch = cs.charAt(i);\n             for (int j = 0; j < searchLen; ++j) {\n                 if (searchChars[j] == ch && (i >= csLast || j >= searchLast || !Character.isHighSurrogate(ch) || searchChars[j + 1] == cs.charAt(i + 1))) {\n                     ++i;\n-                    continue Label_0040;\n+                    continue Label_0127;\n                 }\n             }\n             return i;\n         }\n         return -1;\n     }\n     \n@@ -1820,29 +1824,29 @@\n             end = len;\n         }\n         if (start > end) {\n             final int temp = start;\n             start = end;\n             end = temp;\n         }\n-        return str.substring(0, start) + overlay + str.substring(end);\n+        return String.valueOf(str.substring(0, start)) + overlay + str.substring(end);\n     }\n     \n     private static String prependIfMissing(final String str, final CharSequence prefix, final boolean ignoreCase, final CharSequence... prefixes) {\n         if (str == null || isEmpty(prefix) || startsWith(str, prefix, ignoreCase)) {\n             return str;\n         }\n         if (ArrayUtils.isNotEmpty((Object[])prefixes)) {\n             for (final CharSequence p : prefixes) {\n                 if (startsWith(str, p, ignoreCase)) {\n                     return str;\n                 }\n             }\n         }\n-        return prefix.toString() + str;\n+        return String.valueOf(prefix.toString()) + str;\n     }\n     \n     public static String prependIfMissing(final String str, final CharSequence prefix, final CharSequence... prefixes) {\n         return prependIfMissing(str, prefix, false, prefixes);\n     }\n     \n     public static String prependIfMissingIgnoreCase(final String str, final CharSequence prefix, final CharSequence... prefixes) {\n@@ -1982,15 +1986,15 @@\n         }\n     }\n     \n     public static String repeat(final String str, final String separator, final int repeat) {\n         if (str == null || separator == null) {\n             return repeat(str, repeat);\n         }\n-        final String result = repeat(str + separator, repeat);\n+        final String result = repeat(String.valueOf(str) + separator, repeat);\n         return removeEnd(result, separator);\n     }\n     \n     public static String replace(final String text, final String searchString, final String replacement) {\n         return replace(text, searchString, replacement, -1);\n     }\n     \n@@ -2603,15 +2607,18 @@\n     \n     public static String stripEnd(final String str, final String stripChars) {\n         int end = length(str);\n         if (end == 0) {\n             return str;\n         }\n         if (stripChars == null) {\n-            while (end != 0 && Character.isWhitespace(str.charAt(end - 1))) {\n+            while (end != 0) {\n+                if (!Character.isWhitespace(str.charAt(end - 1))) {\n+                    break;\n+                }\n                 --end;\n             }\n         }\n         else {\n             if (stripChars.isEmpty()) {\n                 return str;\n             }\n@@ -2625,15 +2632,18 @@\n     public static String stripStart(final String str, final String stripChars) {\n         final int strLen = length(str);\n         if (strLen == 0) {\n             return str;\n         }\n         int start = 0;\n         if (stripChars == null) {\n-            while (start != strLen && Character.isWhitespace(str.charAt(start))) {\n+            while (start != strLen) {\n+                if (!Character.isWhitespace(str.charAt(start))) {\n+                    break;\n+                }\n                 ++start;\n             }\n         }\n         else {\n             if (stripChars.isEmpty()) {\n                 return str;\n             }\n@@ -2981,15 +2991,15 @@\n         return (value == null) ? null : String.valueOf(value);\n     }\n     \n     public static String wrap(final String str, final char wrapWith) {\n         if (isEmpty(str) || wrapWith == '\\0') {\n             return str;\n         }\n-        return wrapWith + str + wrapWith;\n+        return String.valueOf(wrapWith) + str + wrapWith;\n     }\n     \n     public static String wrap(final String str, final String wrapWith) {\n         if (isEmpty(str) || isEmpty(wrapWith)) {\n             return str;\n         }\n         return wrapWith.concat(str).concat(wrapWith);\n@@ -3030,12 +3040,8 @@\n         }\n         builder.append(str);\n         if (wrapEnd) {\n             builder.append(wrapWith);\n         }\n         return builder.toString();\n     }\n-    \n-    static {\n-        STRIP_ACCENTS_PATTERN = Pattern.compile(\"\\\\p{InCombiningDiacriticalMarks}+\");\n-    }\n }\n"}]}
