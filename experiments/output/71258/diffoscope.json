{"diffoscope-json-version": 1, "source1": "first/LZMACompressorOutputStream.class", "source2": "second/LZMACompressorOutputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,193 +1,193 @@\n-  SHA-256 checksum b039ae354760af64d9f0de77be530840bfbc9d4e5fd7f7d794c62dd67e7d6dbc\n+  SHA-256 checksum 88065cf20b718a754b1af899230637bed395e62ab1154c5f77982ae879beb980\n   Compiled from \"LZMACompressorOutputStream.java\"\n public class org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream extends org.apache.commons.compress.compressors.CompressorOutputStream\n   minor version: 0\n   major version: 53\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #18                         // org/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream\n-  super_class: #2                         // org/apache/commons/compress/compressors/CompressorOutputStream\n+  this_class: #1                          // org/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream\n+  super_class: #3                         // org/apache/commons/compress/compressors/CompressorOutputStream\n   interfaces: 0, fields: 1, methods: 6, attributes: 1\n Constant pool:\n-   #1 = Methodref          #2.#3          // org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n-   #2 = Class              #4             // org/apache/commons/compress/compressors/CompressorOutputStream\n-   #3 = NameAndType        #5:#6          // \"<init>\":()V\n+   #1 = Class              #2             // org/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream\n+   #2 = Utf8               org/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream\n+   #3 = Class              #4             // org/apache/commons/compress/compressors/CompressorOutputStream\n    #4 = Utf8               org/apache/commons/compress/compressors/CompressorOutputStream\n-   #5 = Utf8               <init>\n-   #6 = Utf8               ()V\n-   #7 = Class              #8             // org/tukaani/xz/LZMAOutputStream\n-   #8 = Utf8               org/tukaani/xz/LZMAOutputStream\n-   #9 = Class              #10            // org/tukaani/xz/LZMA2Options\n-  #10 = Utf8               org/tukaani/xz/LZMA2Options\n-  #11 = Methodref          #9.#3          // org/tukaani/xz/LZMA2Options.\"<init>\":()V\n-  #12 = Long               -1l\n-  #14 = Methodref          #7.#15         // org/tukaani/xz/LZMAOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/LZMA2Options;J)V\n-  #15 = NameAndType        #5:#16         // \"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/LZMA2Options;J)V\n-  #16 = Utf8               (Ljava/io/OutputStream;Lorg/tukaani/xz/LZMA2Options;J)V\n-  #17 = Fieldref           #18.#19        // org/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream.out:Lorg/tukaani/xz/LZMAOutputStream;\n-  #18 = Class              #20            // org/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream\n-  #19 = NameAndType        #21:#22        // out:Lorg/tukaani/xz/LZMAOutputStream;\n-  #20 = Utf8               org/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream\n-  #21 = Utf8               out\n-  #22 = Utf8               Lorg/tukaani/xz/LZMAOutputStream;\n-  #23 = Methodref          #7.#24         // org/tukaani/xz/LZMAOutputStream.write:(I)V\n-  #24 = NameAndType        #25:#26        // write:(I)V\n-  #25 = Utf8               write\n-  #26 = Utf8               (I)V\n-  #27 = Methodref          #7.#28         // org/tukaani/xz/LZMAOutputStream.write:([BII)V\n-  #28 = NameAndType        #25:#29        // write:([BII)V\n-  #29 = Utf8               ([BII)V\n-  #30 = Methodref          #7.#31         // org/tukaani/xz/LZMAOutputStream.finish:()V\n-  #31 = NameAndType        #32:#6         // finish:()V\n-  #32 = Utf8               finish\n-  #33 = Methodref          #7.#34         // org/tukaani/xz/LZMAOutputStream.close:()V\n-  #34 = NameAndType        #35:#6         // close:()V\n-  #35 = Utf8               close\n-  #36 = Utf8               (Ljava/io/OutputStream;)V\n-  #37 = Utf8               Code\n-  #38 = Utf8               LineNumberTable\n-  #39 = Utf8               LocalVariableTable\n-  #40 = Utf8               this\n-  #41 = Utf8               Lorg/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream;\n-  #42 = Utf8               outputStream\n-  #43 = Utf8               Ljava/io/OutputStream;\n-  #44 = Utf8               Exceptions\n-  #45 = Class              #46            // java/io/IOException\n-  #46 = Utf8               java/io/IOException\n-  #47 = Utf8               b\n-  #48 = Utf8               I\n-  #49 = Utf8               buf\n-  #50 = Utf8               [B\n-  #51 = Utf8               off\n-  #52 = Utf8               len\n-  #53 = Utf8               flush\n+   #5 = Utf8               out\n+   #6 = Utf8               Lorg/tukaani/xz/LZMAOutputStream;\n+   #7 = Utf8               <init>\n+   #8 = Utf8               (Ljava/io/OutputStream;)V\n+   #9 = Utf8               Exceptions\n+  #10 = Class              #11            // java/io/IOException\n+  #11 = Utf8               java/io/IOException\n+  #12 = Utf8               Code\n+  #13 = Methodref          #3.#14         // org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n+  #14 = NameAndType        #7:#15         // \"<init>\":()V\n+  #15 = Utf8               ()V\n+  #16 = Class              #17            // org/tukaani/xz/LZMAOutputStream\n+  #17 = Utf8               org/tukaani/xz/LZMAOutputStream\n+  #18 = Class              #19            // org/tukaani/xz/LZMA2Options\n+  #19 = Utf8               org/tukaani/xz/LZMA2Options\n+  #20 = Methodref          #18.#14        // org/tukaani/xz/LZMA2Options.\"<init>\":()V\n+  #21 = Long               -1l\n+  #23 = Methodref          #16.#24        // org/tukaani/xz/LZMAOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/LZMA2Options;J)V\n+  #24 = NameAndType        #7:#25         // \"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/LZMA2Options;J)V\n+  #25 = Utf8               (Ljava/io/OutputStream;Lorg/tukaani/xz/LZMA2Options;J)V\n+  #26 = Fieldref           #1.#27         // org/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream.out:Lorg/tukaani/xz/LZMAOutputStream;\n+  #27 = NameAndType        #5:#6          // out:Lorg/tukaani/xz/LZMAOutputStream;\n+  #28 = Utf8               LineNumberTable\n+  #29 = Utf8               LocalVariableTable\n+  #30 = Utf8               this\n+  #31 = Utf8               Lorg/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream;\n+  #32 = Utf8               outputStream\n+  #33 = Utf8               Ljava/io/OutputStream;\n+  #34 = Utf8               write\n+  #35 = Utf8               (I)V\n+  #36 = Methodref          #16.#37        // org/tukaani/xz/LZMAOutputStream.write:(I)V\n+  #37 = NameAndType        #34:#35        // write:(I)V\n+  #38 = Utf8               b\n+  #39 = Utf8               I\n+  #40 = Utf8               ([BII)V\n+  #41 = Methodref          #16.#42        // org/tukaani/xz/LZMAOutputStream.write:([BII)V\n+  #42 = NameAndType        #34:#40        // write:([BII)V\n+  #43 = Utf8               buf\n+  #44 = Utf8               [B\n+  #45 = Utf8               off\n+  #46 = Utf8               len\n+  #47 = Utf8               flush\n+  #48 = Utf8               finish\n+  #49 = Methodref          #16.#50        // org/tukaani/xz/LZMAOutputStream.finish:()V\n+  #50 = NameAndType        #48:#15        // finish:()V\n+  #51 = Utf8               close\n+  #52 = Methodref          #16.#53        // org/tukaani/xz/LZMAOutputStream.close:()V\n+  #53 = NameAndType        #51:#15        // close:()V\n   #54 = Utf8               SourceFile\n   #55 = Utf8               LZMACompressorOutputStream.java\n {\n   private final org.tukaani.xz.LZMAOutputStream out;\n     descriptor: Lorg/tukaani/xz/LZMAOutputStream;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   public org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream(java.io.OutputStream) throws java.io.IOException;\n     descriptor: (Ljava/io/OutputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=7, locals=2, args_size=2\n          0: aload_0\n-         1: invokespecial #1                  // Method org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n+         1: invokespecial #13                 // Method org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n          4: aload_0\n-         5: new           #7                  // class org/tukaani/xz/LZMAOutputStream\n+         5: new           #16                 // class org/tukaani/xz/LZMAOutputStream\n          8: dup\n          9: aload_1\n-        10: new           #9                  // class org/tukaani/xz/LZMA2Options\n+        10: new           #18                 // class org/tukaani/xz/LZMA2Options\n         13: dup\n-        14: invokespecial #11                 // Method org/tukaani/xz/LZMA2Options.\"<init>\":()V\n-        17: ldc2_w        #12                 // long -1l\n-        20: invokespecial #14                 // Method org/tukaani/xz/LZMAOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/LZMA2Options;J)V\n-        23: putfield      #17                 // Field out:Lorg/tukaani/xz/LZMAOutputStream;\n+        14: invokespecial #20                 // Method org/tukaani/xz/LZMA2Options.\"<init>\":()V\n+        17: ldc2_w        #21                 // long -1l\n+        20: invokespecial #23                 // Method org/tukaani/xz/LZMAOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/LZMA2Options;J)V\n+        23: putfield      #26                 // Field out:Lorg/tukaani/xz/LZMAOutputStream;\n         26: return\n       LineNumberTable:\n-        line 42: 0\n+        line 41: 0\n         line 43: 4\n         line 44: 26\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      27     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream;\n             0      27     1 outputStream   Ljava/io/OutputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void write(int) throws java.io.IOException;\n     descriptor: (I)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n-         1: getfield      #17                 // Field out:Lorg/tukaani/xz/LZMAOutputStream;\n+         1: getfield      #26                 // Field out:Lorg/tukaani/xz/LZMAOutputStream;\n          4: iload_1\n-         5: invokevirtual #23                 // Method org/tukaani/xz/LZMAOutputStream.write:(I)V\n+         5: invokevirtual #36                 // Method org/tukaani/xz/LZMAOutputStream.write:(I)V\n          8: return\n       LineNumberTable:\n         line 49: 0\n         line 50: 8\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream;\n             0       9     1     b   I\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void write(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n-         1: getfield      #17                 // Field out:Lorg/tukaani/xz/LZMAOutputStream;\n+         1: getfield      #26                 // Field out:Lorg/tukaani/xz/LZMAOutputStream;\n          4: aload_1\n          5: iload_2\n          6: iload_3\n-         7: invokevirtual #27                 // Method org/tukaani/xz/LZMAOutputStream.write:([BII)V\n+         7: invokevirtual #41                 // Method org/tukaani/xz/LZMAOutputStream.write:([BII)V\n         10: return\n       LineNumberTable:\n         line 55: 0\n         line 56: 10\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      11     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream;\n             0      11     1   buf   [B\n             0      11     2   off   I\n             0      11     3   len   I\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void flush() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=0, locals=1, args_size=1\n          0: return\n       LineNumberTable:\n         line 63: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       1     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void finish() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #17                 // Field out:Lorg/tukaani/xz/LZMAOutputStream;\n-         4: invokevirtual #30                 // Method org/tukaani/xz/LZMAOutputStream.finish:()V\n+         1: getfield      #26                 // Field out:Lorg/tukaani/xz/LZMAOutputStream;\n+         4: invokevirtual #49                 // Method org/tukaani/xz/LZMAOutputStream.finish:()V\n          7: return\n       LineNumberTable:\n         line 71: 0\n         line 72: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #17                 // Field out:Lorg/tukaani/xz/LZMAOutputStream;\n-         4: invokevirtual #33                 // Method org/tukaani/xz/LZMAOutputStream.close:()V\n+         1: getfield      #26                 // Field out:Lorg/tukaani/xz/LZMAOutputStream;\n+         4: invokevirtual #52                 // Method org/tukaani/xz/LZMAOutputStream.close:()V\n          7: return\n       LineNumberTable:\n         line 77: 0\n         line 78: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream;\n-    Exceptions:\n-      throws java.io.IOException\n }\n SourceFile: \"LZMACompressorOutputStream.java\"\n"}]}
