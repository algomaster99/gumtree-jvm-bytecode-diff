{"diffoscope-json-version": 1, "source1": "first/JSONObject.class", "source2": "second/JSONObject.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,351 +1,351 @@\n-  SHA-256 checksum f4a4b1d19a139a77614299641ef66e3ae7d3079f650d27b0a4a4b8dff0763663\n+  SHA-256 checksum d026e2574ed93757a430508553f797269c07d0635bf2e8ccab88d857bd34fe9a\n   Compiled from \"JSONObject.java\"\n public class org.json.JSONObject\n   minor version: 0\n   major version: 50\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #62                         // org/json/JSONObject\n   super_class: #203                       // java/lang/Object\n   interfaces: 0, fields: 3, methods: 109, attributes: 2\n Constant pool:\n-     #1 = Methodref          #203.#698    // java/lang/Object.\"<init>\":()V\n-     #2 = Class              #699         // java/util/HashMap\n-     #3 = Methodref          #2.#698      // java/util/HashMap.\"<init>\":()V\n-     #4 = Fieldref           #62.#700     // org/json/JSONObject.map:Ljava/util/Map;\n-     #5 = Methodref          #62.#701     // org/json/JSONObject.\"<init>\":(I)V\n-     #6 = Methodref          #62.#702     // org/json/JSONObject.opt:(Ljava/lang/String;)Ljava/lang/Object;\n-     #7 = Methodref          #62.#703     // org/json/JSONObject.putOnce:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-     #8 = Class              #704         // java/lang/Exception\n-     #9 = Methodref          #62.#698     // org/json/JSONObject.\"<init>\":()V\n-    #10 = Methodref          #49.#705     // org/json/JSONTokener.nextClean:()C\n-    #11 = String             #706         // A JSONObject text must begin with \\'{\\'\n-    #12 = Methodref          #49.#707     // org/json/JSONTokener.syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n-    #13 = Methodref          #49.#708     // org/json/JSONTokener.getPrevious:()C\n-    #14 = String             #709         // A JSONObject text must end with \\'}\\'\n-    #15 = String             #710         // A JSON Object can not directly nest another JSON Object or JSON Array.\n-    #16 = Methodref          #49.#711     // org/json/JSONTokener.back:()V\n-    #17 = Methodref          #49.#712     // org/json/JSONTokener.nextValue:()Ljava/lang/Object;\n-    #18 = Methodref          #203.#713    // java/lang/Object.toString:()Ljava/lang/String;\n-    #19 = String             #714         // Expected a \\':\\' after a key\n-    #20 = Class              #715         // java/lang/StringBuilder\n-    #21 = Methodref          #20.#698     // java/lang/StringBuilder.\"<init>\":()V\n-    #22 = String             #716         // Duplicate key \\\"\n-    #23 = Methodref          #20.#717     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-    #24 = String             #718         // \\\"\n-    #25 = Methodref          #20.#713     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-    #26 = Methodref          #62.#719     // org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-    #27 = String             #720         // Expected a \\',\\' or \\'}\\'\n-    #28 = InterfaceMethodref #306.#721    // java/util/Map.size:()I\n-    #29 = Methodref          #2.#701      // java/util/HashMap.\"<init>\":(I)V\n-    #30 = InterfaceMethodref #306.#722    // java/util/Map.entrySet:()Ljava/util/Set;\n-    #31 = InterfaceMethodref #723.#724    // java/util/Set.iterator:()Ljava/util/Iterator;\n-    #32 = InterfaceMethodref #725.#726    // java/util/Iterator.hasNext:()Z\n-    #33 = InterfaceMethodref #725.#727    // java/util/Iterator.next:()Ljava/lang/Object;\n-    #34 = Class              #728         // java/util/Map$Entry\n-    #35 = InterfaceMethodref #34.#729     // java/util/Map$Entry.getKey:()Ljava/lang/Object;\n-    #36 = Class              #730         // java/lang/NullPointerException\n-    #37 = String             #731         // Null key.\n-    #38 = Methodref          #36.#732     // java/lang/NullPointerException.\"<init>\":(Ljava/lang/String;)V\n-    #39 = InterfaceMethodref #34.#733     // java/util/Map$Entry.getValue:()Ljava/lang/Object;\n-    #40 = Methodref          #58.#734     // java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;\n-    #41 = Methodref          #62.#735     // org/json/JSONObject.wrap:(Ljava/lang/Object;)Ljava/lang/Object;\n-    #42 = InterfaceMethodref #306.#736    // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-    #43 = Methodref          #62.#737     // org/json/JSONObject.populateMap:(Ljava/lang/Object;)V\n-    #44 = Methodref          #62.#738     // org/json/JSONObject.populateMap:(Ljava/lang/Object;Ljava/util/Set;)V\n-    #45 = Methodref          #203.#739    // java/lang/Object.getClass:()Ljava/lang/Class;\n-    #46 = Methodref          #740.#741    // java/lang/Class.getField:(Ljava/lang/String;)Ljava/lang/reflect/Field;\n-    #47 = Methodref          #742.#743    // java/lang/reflect/Field.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-    #48 = Methodref          #62.#744     // org/json/JSONObject.putOpt:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-    #49 = Class              #745         // org/json/JSONTokener\n-    #50 = Methodref          #49.#732     // org/json/JSONTokener.\"<init>\":(Ljava/lang/String;)V\n-    #51 = Methodref          #62.#746     // org/json/JSONObject.\"<init>\":(Lorg/json/JSONTokener;)V\n-    #52 = Methodref          #747.#748    // java/lang/Thread.currentThread:()Ljava/lang/Thread;\n-    #53 = Methodref          #747.#749    // java/lang/Thread.getContextClassLoader:()Ljava/lang/ClassLoader;\n-    #54 = Methodref          #750.#751    // java/util/ResourceBundle.getBundle:(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;\n-    #55 = Methodref          #750.#752    // java/util/ResourceBundle.getKeys:()Ljava/util/Enumeration;\n-    #56 = InterfaceMethodref #753.#754    // java/util/Enumeration.hasMoreElements:()Z\n-    #57 = InterfaceMethodref #753.#755    // java/util/Enumeration.nextElement:()Ljava/lang/Object;\n-    #58 = Class              #756         // java/lang/String\n-    #59 = String             #757         // \\\\.\n-    #60 = Methodref          #58.#758     // java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n-    #61 = Methodref          #62.#759     // org/json/JSONObject.optJSONObject:(Ljava/lang/String;)Lorg/json/JSONObject;\n-    #62 = Class              #760         // org/json/JSONObject\n-    #63 = Methodref          #750.#761    // java/util/ResourceBundle.getString:(Ljava/lang/String;)Ljava/lang/String;\n-    #64 = Methodref          #62.#762     // org/json/JSONObject.testValidity:(Ljava/lang/Object;)V\n-    #65 = Class              #763         // org/json/JSONArray\n-    #66 = Methodref          #65.#698     // org/json/JSONArray.\"<init>\":()V\n-    #67 = Methodref          #65.#764     // org/json/JSONArray.put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n-    #68 = String             #765         // JSONArray\n-    #69 = Methodref          #62.#766     // org/json/JSONObject.wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-    #70 = Methodref          #138.#767    // java/lang/Double.isInfinite:(D)Z\n-    #71 = Methodref          #138.#768    // java/lang/Double.isNaN:(D)Z\n-    #72 = String             #769         // null\n-    #73 = Methodref          #138.#770    // java/lang/Double.toString:(D)Ljava/lang/String;\n-    #74 = Methodref          #58.#771     // java/lang/String.indexOf:(I)I\n-    #75 = String             #772         // 0\n-    #76 = Methodref          #58.#773     // java/lang/String.endsWith:(Ljava/lang/String;)Z\n-    #77 = Methodref          #58.#774     // java/lang/String.length:()I\n-    #78 = Methodref          #58.#775     // java/lang/String.substring:(II)Ljava/lang/String;\n-    #79 = String             #776         // .\n-    #80 = Class              #777         // org/json/JSONException\n-    #81 = Methodref          #80.#732     // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n-    #82 = String             #778         // JSONObject[\n-    #83 = Methodref          #62.#779     // org/json/JSONObject.quote:(Ljava/lang/String;)Ljava/lang/String;\n-    #84 = String             #780         // ] not found.\n-    #85 = Methodref          #62.#781     // org/json/JSONObject.optEnum:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-    #86 = String             #782         // enum of type\n-    #87 = Methodref          #740.#783    // java/lang/Class.getSimpleName:()Ljava/lang/String;\n-    #88 = Methodref          #62.#784     // org/json/JSONObject.wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-    #89 = Methodref          #62.#785     // org/json/JSONObject.get:(Ljava/lang/String;)Ljava/lang/Object;\n-    #90 = Fieldref           #159.#786    // java/lang/Boolean.FALSE:Ljava/lang/Boolean;\n-    #91 = Methodref          #203.#787    // java/lang/Object.equals:(Ljava/lang/Object;)Z\n-    #92 = String             #788         // false\n-    #93 = Methodref          #58.#789     // java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z\n-    #94 = Fieldref           #159.#790    // java/lang/Boolean.TRUE:Ljava/lang/Boolean;\n-    #95 = String             #791         // true\n-    #96 = String             #792         // Boolean\n-    #97 = Methodref          #62.#793     // org/json/JSONObject.objectToBigInteger:(Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-    #98 = String             #794         // BigInteger\n-    #99 = Methodref          #62.#795     // org/json/JSONObject.objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #100 = String             #796         // BigDecimal\n-   #101 = Class              #797         // java/lang/Number\n-   #102 = Methodref          #101.#798    // java/lang/Number.doubleValue:()D\n-   #103 = Methodref          #138.#799    // java/lang/Double.parseDouble:(Ljava/lang/String;)D\n-   #104 = String             #800         // double\n-   #105 = Methodref          #101.#801    // java/lang/Number.floatValue:()F\n-   #106 = Methodref          #135.#802    // java/lang/Float.parseFloat:(Ljava/lang/String;)F\n-   #107 = String             #803         // float\n-   #108 = Methodref          #62.#804     // org/json/JSONObject.stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n-   #109 = String             #494         // number\n-   #110 = Methodref          #101.#805    // java/lang/Number.intValue:()I\n-   #111 = Methodref          #127.#806    // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n-   #112 = String             #807         // int\n-   #113 = String             #808         // JSONObject\n-   #114 = Methodref          #101.#809    // java/lang/Number.longValue:()J\n-   #115 = Methodref          #129.#810    // java/lang/Long.parseLong:(Ljava/lang/String;)J\n-   #116 = String             #811         // long\n-   #117 = Methodref          #62.#812     // org/json/JSONObject.isEmpty:()Z\n-   #118 = Methodref          #62.#813     // org/json/JSONObject.keySet:()Ljava/util/Set;\n-   #119 = Methodref          #62.#774     // org/json/JSONObject.length:()I\n-   #120 = InterfaceMethodref #723.#814    // java/util/Set.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+     #1 = Methodref          #203.#671    // java/lang/Object.\"<init>\":()V\n+     #2 = Class              #672         // java/util/HashMap\n+     #3 = Methodref          #2.#671      // java/util/HashMap.\"<init>\":()V\n+     #4 = Fieldref           #62.#673     // org/json/JSONObject.map:Ljava/util/Map;\n+     #5 = Methodref          #62.#674     // org/json/JSONObject.\"<init>\":(I)V\n+     #6 = Methodref          #62.#675     // org/json/JSONObject.opt:(Ljava/lang/String;)Ljava/lang/Object;\n+     #7 = Methodref          #62.#676     // org/json/JSONObject.putOnce:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+     #8 = Class              #677         // java/lang/Exception\n+     #9 = Methodref          #62.#671     // org/json/JSONObject.\"<init>\":()V\n+    #10 = Methodref          #49.#678     // org/json/JSONTokener.nextClean:()C\n+    #11 = String             #679         // A JSONObject text must begin with \\'{\\'\n+    #12 = Methodref          #49.#680     // org/json/JSONTokener.syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n+    #13 = Methodref          #49.#681     // org/json/JSONTokener.getPrevious:()C\n+    #14 = String             #682         // A JSONObject text must end with \\'}\\'\n+    #15 = String             #683         // A JSON Object can not directly nest another JSON Object or JSON Array.\n+    #16 = Methodref          #49.#684     // org/json/JSONTokener.back:()V\n+    #17 = Methodref          #49.#685     // org/json/JSONTokener.nextValue:()Ljava/lang/Object;\n+    #18 = Methodref          #203.#686    // java/lang/Object.toString:()Ljava/lang/String;\n+    #19 = String             #687         // Expected a \\':\\' after a key\n+    #20 = Class              #688         // java/lang/StringBuilder\n+    #21 = Methodref          #20.#671     // java/lang/StringBuilder.\"<init>\":()V\n+    #22 = String             #689         // Duplicate key \\\"\n+    #23 = Methodref          #20.#690     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+    #24 = String             #691         // \\\"\n+    #25 = Methodref          #20.#686     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+    #26 = Methodref          #62.#692     // org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+    #27 = String             #693         // Expected a \\',\\' or \\'}\\'\n+    #28 = InterfaceMethodref #306.#694    // java/util/Map.size:()I\n+    #29 = Methodref          #2.#674      // java/util/HashMap.\"<init>\":(I)V\n+    #30 = InterfaceMethodref #306.#695    // java/util/Map.entrySet:()Ljava/util/Set;\n+    #31 = InterfaceMethodref #537.#696    // java/util/Set.iterator:()Ljava/util/Iterator;\n+    #32 = InterfaceMethodref #379.#697    // java/util/Iterator.hasNext:()Z\n+    #33 = InterfaceMethodref #379.#698    // java/util/Iterator.next:()Ljava/lang/Object;\n+    #34 = Class              #699         // java/util/Map$Entry\n+    #35 = InterfaceMethodref #34.#700     // java/util/Map$Entry.getKey:()Ljava/lang/Object;\n+    #36 = Class              #701         // java/lang/NullPointerException\n+    #37 = String             #702         // Null key.\n+    #38 = Methodref          #36.#703     // java/lang/NullPointerException.\"<init>\":(Ljava/lang/String;)V\n+    #39 = InterfaceMethodref #34.#704     // java/util/Map$Entry.getValue:()Ljava/lang/Object;\n+    #40 = Methodref          #58.#705     // java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;\n+    #41 = Methodref          #62.#706     // org/json/JSONObject.wrap:(Ljava/lang/Object;)Ljava/lang/Object;\n+    #42 = InterfaceMethodref #306.#707    // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+    #43 = Methodref          #62.#708     // org/json/JSONObject.populateMap:(Ljava/lang/Object;)V\n+    #44 = Methodref          #62.#709     // org/json/JSONObject.populateMap:(Ljava/lang/Object;Ljava/util/Set;)V\n+    #45 = Methodref          #203.#710    // java/lang/Object.getClass:()Ljava/lang/Class;\n+    #46 = Methodref          #393.#711    // java/lang/Class.getField:(Ljava/lang/String;)Ljava/lang/reflect/Field;\n+    #47 = Methodref          #712.#713    // java/lang/reflect/Field.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+    #48 = Methodref          #62.#714     // org/json/JSONObject.putOpt:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+    #49 = Class              #715         // org/json/JSONTokener\n+    #50 = Methodref          #49.#703     // org/json/JSONTokener.\"<init>\":(Ljava/lang/String;)V\n+    #51 = Methodref          #62.#716     // org/json/JSONObject.\"<init>\":(Lorg/json/JSONTokener;)V\n+    #52 = Methodref          #717.#718    // java/lang/Thread.currentThread:()Ljava/lang/Thread;\n+    #53 = Methodref          #717.#719    // java/lang/Thread.getContextClassLoader:()Ljava/lang/ClassLoader;\n+    #54 = Methodref          #411.#720    // java/util/ResourceBundle.getBundle:(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;\n+    #55 = Methodref          #411.#721    // java/util/ResourceBundle.getKeys:()Ljava/util/Enumeration;\n+    #56 = InterfaceMethodref #412.#722    // java/util/Enumeration.hasMoreElements:()Z\n+    #57 = InterfaceMethodref #412.#723    // java/util/Enumeration.nextElement:()Ljava/lang/Object;\n+    #58 = Class              #724         // java/lang/String\n+    #59 = String             #725         // \\\\.\n+    #60 = Methodref          #58.#726     // java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n+    #61 = Methodref          #62.#727     // org/json/JSONObject.optJSONObject:(Ljava/lang/String;)Lorg/json/JSONObject;\n+    #62 = Class              #728         // org/json/JSONObject\n+    #63 = Methodref          #411.#729    // java/util/ResourceBundle.getString:(Ljava/lang/String;)Ljava/lang/String;\n+    #64 = Methodref          #62.#730     // org/json/JSONObject.testValidity:(Ljava/lang/Object;)V\n+    #65 = Class              #731         // org/json/JSONArray\n+    #66 = Methodref          #65.#671     // org/json/JSONArray.\"<init>\":()V\n+    #67 = Methodref          #65.#732     // org/json/JSONArray.put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n+    #68 = String             #733         // JSONArray\n+    #69 = Methodref          #62.#734     // org/json/JSONObject.wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+    #70 = Methodref          #138.#735    // java/lang/Double.isInfinite:(D)Z\n+    #71 = Methodref          #138.#736    // java/lang/Double.isNaN:(D)Z\n+    #72 = String             #737         // null\n+    #73 = Methodref          #138.#738    // java/lang/Double.toString:(D)Ljava/lang/String;\n+    #74 = Methodref          #58.#739     // java/lang/String.indexOf:(I)I\n+    #75 = String             #740         // 0\n+    #76 = Methodref          #58.#741     // java/lang/String.endsWith:(Ljava/lang/String;)Z\n+    #77 = Methodref          #58.#742     // java/lang/String.length:()I\n+    #78 = Methodref          #58.#743     // java/lang/String.substring:(II)Ljava/lang/String;\n+    #79 = String             #744         // .\n+    #80 = Class              #745         // org/json/JSONException\n+    #81 = Methodref          #80.#703     // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n+    #82 = String             #746         // JSONObject[\n+    #83 = Methodref          #62.#747     // org/json/JSONObject.quote:(Ljava/lang/String;)Ljava/lang/String;\n+    #84 = String             #748         // ] not found.\n+    #85 = Methodref          #62.#749     // org/json/JSONObject.optEnum:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+    #86 = String             #750         // enum of type\n+    #87 = Methodref          #393.#751    // java/lang/Class.getSimpleName:()Ljava/lang/String;\n+    #88 = Methodref          #62.#752     // org/json/JSONObject.wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+    #89 = Methodref          #62.#753     // org/json/JSONObject.get:(Ljava/lang/String;)Ljava/lang/Object;\n+    #90 = Fieldref           #159.#754    // java/lang/Boolean.FALSE:Ljava/lang/Boolean;\n+    #91 = Methodref          #203.#755    // java/lang/Object.equals:(Ljava/lang/Object;)Z\n+    #92 = String             #756         // false\n+    #93 = Methodref          #58.#757     // java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z\n+    #94 = Fieldref           #159.#758    // java/lang/Boolean.TRUE:Ljava/lang/Boolean;\n+    #95 = String             #759         // true\n+    #96 = String             #760         // Boolean\n+    #97 = Methodref          #62.#761     // org/json/JSONObject.objectToBigInteger:(Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+    #98 = String             #762         // BigInteger\n+    #99 = Methodref          #62.#763     // org/json/JSONObject.objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+   #100 = String             #764         // BigDecimal\n+   #101 = Class              #765         // java/lang/Number\n+   #102 = Methodref          #101.#766    // java/lang/Number.doubleValue:()D\n+   #103 = Methodref          #138.#767    // java/lang/Double.parseDouble:(Ljava/lang/String;)D\n+   #104 = String             #768         // double\n+   #105 = Methodref          #101.#769    // java/lang/Number.floatValue:()F\n+   #106 = Methodref          #135.#770    // java/lang/Float.parseFloat:(Ljava/lang/String;)F\n+   #107 = String             #771         // float\n+   #108 = Methodref          #62.#772     // org/json/JSONObject.stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+   #109 = String             #484         // number\n+   #110 = Methodref          #101.#773    // java/lang/Number.intValue:()I\n+   #111 = Methodref          #127.#774    // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n+   #112 = String             #775         // int\n+   #113 = String             #776         // JSONObject\n+   #114 = Methodref          #101.#777    // java/lang/Number.longValue:()J\n+   #115 = Methodref          #129.#778    // java/lang/Long.parseLong:(Ljava/lang/String;)J\n+   #116 = String             #779         // long\n+   #117 = Methodref          #62.#780     // org/json/JSONObject.isEmpty:()Z\n+   #118 = Methodref          #62.#781     // org/json/JSONObject.keySet:()Ljava/util/Set;\n+   #119 = Methodref          #62.#742     // org/json/JSONObject.length:()I\n+   #120 = InterfaceMethodref #537.#782    // java/util/Set.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n    #121 = Class              #359         // \"[Ljava/lang/String;\"\n-   #122 = Methodref          #740.#815    // java/lang/Class.getFields:()[Ljava/lang/reflect/Field;\n-   #123 = Methodref          #742.#816    // java/lang/reflect/Field.getName:()Ljava/lang/String;\n-   #124 = String             #429         // string\n-   #125 = InterfaceMethodref #306.#817    // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n-   #126 = Methodref          #62.#818     // org/json/JSONObject.put:(Ljava/lang/String;I)Lorg/json/JSONObject;\n-   #127 = Class              #819         // java/lang/Integer\n-   #128 = Methodref          #127.#805    // java/lang/Integer.intValue:()I\n-   #129 = Class              #820         // java/lang/Long\n-   #130 = Methodref          #129.#809    // java/lang/Long.longValue:()J\n-   #131 = Methodref          #62.#821     // org/json/JSONObject.put:(Ljava/lang/String;J)Lorg/json/JSONObject;\n-   #132 = Class              #822         // java/math/BigInteger\n-   #133 = Fieldref           #132.#823    // java/math/BigInteger.ONE:Ljava/math/BigInteger;\n-   #134 = Methodref          #132.#824    // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #135 = Class              #825         // java/lang/Float\n-   #136 = Methodref          #135.#801    // java/lang/Float.floatValue:()F\n-   #137 = Methodref          #62.#826     // org/json/JSONObject.put:(Ljava/lang/String;F)Lorg/json/JSONObject;\n-   #138 = Class              #827         // java/lang/Double\n-   #139 = Methodref          #138.#798    // java/lang/Double.doubleValue:()D\n-   #140 = Methodref          #62.#828     // org/json/JSONObject.put:(Ljava/lang/String;D)Lorg/json/JSONObject;\n-   #141 = Class              #829         // java/math/BigDecimal\n-   #142 = Fieldref           #141.#830    // java/math/BigDecimal.ONE:Ljava/math/BigDecimal;\n-   #143 = Methodref          #141.#831    // java/math/BigDecimal.add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #144 = String             #832         // Unable to increment [\n-   #145 = String             #833         // ].\n-   #146 = Fieldref           #62.#834     // org/json/JSONObject.NULL:Ljava/lang/Object;\n-   #147 = InterfaceMethodref #306.#813    // java/util/Map.keySet:()Ljava/util/Set;\n-   #148 = InterfaceMethodref #306.#835    // java/util/Map.clear:()V\n-   #149 = InterfaceMethodref #306.#812    // java/util/Map.isEmpty:()Z\n-   #150 = Methodref          #65.#836     // org/json/JSONArray.\"<init>\":(Ljava/util/Collection;)V\n-   #151 = String             #837         // Null pointer\n-   #152 = InterfaceMethodref #306.#743    // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #153 = Methodref          #62.#838     // org/json/JSONObject.optEnum:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n-   #154 = Methodref          #740.#839    // java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z\n-   #155 = Class              #840         // java/lang/Enum\n-   #156 = Methodref          #155.#841    // java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-   #157 = Class              #842         // java/lang/IllegalArgumentException\n-   #158 = Methodref          #62.#843     // org/json/JSONObject.optBoolean:(Ljava/lang/String;Z)Z\n-   #159 = Class              #844         // java/lang/Boolean\n-   #160 = Methodref          #159.#845    // java/lang/Boolean.booleanValue:()Z\n-   #161 = Methodref          #62.#846     // org/json/JSONObject.getBoolean:(Ljava/lang/String;)Z\n-   #162 = Methodref          #62.#847     // org/json/JSONObject.objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;Z)Ljava/math/BigDecimal;\n-   #163 = Methodref          #141.#848    // java/math/BigDecimal.\"<init>\":(Ljava/math/BigInteger;)V\n-   #164 = Methodref          #62.#849     // org/json/JSONObject.numberIsFinite:(Ljava/lang/Number;)Z\n-   #165 = Methodref          #141.#850    // java/math/BigDecimal.\"<init>\":(D)V\n-   #166 = Methodref          #141.#732    // java/math/BigDecimal.\"<init>\":(Ljava/lang/String;)V\n-   #167 = Class              #851         // java/lang/Short\n-   #168 = Class              #852         // java/lang/Byte\n-   #169 = Methodref          #141.#853    // java/math/BigDecimal.\"<init>\":(J)V\n-   #170 = Methodref          #141.#854    // java/math/BigDecimal.toBigInteger:()Ljava/math/BigInteger;\n-   #171 = Methodref          #132.#855    // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-   #172 = Methodref          #62.#856     // org/json/JSONObject.isDecimalNotation:(Ljava/lang/String;)Z\n-   #173 = Methodref          #132.#732    // java/math/BigInteger.\"<init>\":(Ljava/lang/String;)V\n+   #122 = Methodref          #393.#783    // java/lang/Class.getFields:()[Ljava/lang/reflect/Field;\n+   #123 = Methodref          #712.#784    // java/lang/reflect/Field.getName:()Ljava/lang/String;\n+   #124 = String             #422         // string\n+   #125 = InterfaceMethodref #306.#785    // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n+   #126 = Methodref          #62.#786     // org/json/JSONObject.put:(Ljava/lang/String;I)Lorg/json/JSONObject;\n+   #127 = Class              #787         // java/lang/Integer\n+   #128 = Methodref          #127.#773    // java/lang/Integer.intValue:()I\n+   #129 = Class              #788         // java/lang/Long\n+   #130 = Methodref          #129.#777    // java/lang/Long.longValue:()J\n+   #131 = Methodref          #62.#789     // org/json/JSONObject.put:(Ljava/lang/String;J)Lorg/json/JSONObject;\n+   #132 = Class              #790         // java/math/BigInteger\n+   #133 = Fieldref           #132.#791    // java/math/BigInteger.ONE:Ljava/math/BigInteger;\n+   #134 = Methodref          #132.#792    // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #135 = Class              #793         // java/lang/Float\n+   #136 = Methodref          #135.#769    // java/lang/Float.floatValue:()F\n+   #137 = Methodref          #62.#794     // org/json/JSONObject.put:(Ljava/lang/String;F)Lorg/json/JSONObject;\n+   #138 = Class              #795         // java/lang/Double\n+   #139 = Methodref          #138.#766    // java/lang/Double.doubleValue:()D\n+   #140 = Methodref          #62.#796     // org/json/JSONObject.put:(Ljava/lang/String;D)Lorg/json/JSONObject;\n+   #141 = Class              #797         // java/math/BigDecimal\n+   #142 = Fieldref           #141.#798    // java/math/BigDecimal.ONE:Ljava/math/BigDecimal;\n+   #143 = Methodref          #141.#799    // java/math/BigDecimal.add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+   #144 = String             #800         // Unable to increment [\n+   #145 = String             #801         // ].\n+   #146 = Fieldref           #62.#802     // org/json/JSONObject.NULL:Ljava/lang/Object;\n+   #147 = InterfaceMethodref #306.#781    // java/util/Map.keySet:()Ljava/util/Set;\n+   #148 = InterfaceMethodref #306.#803    // java/util/Map.clear:()V\n+   #149 = InterfaceMethodref #306.#780    // java/util/Map.isEmpty:()Z\n+   #150 = Methodref          #65.#804     // org/json/JSONArray.\"<init>\":(Ljava/util/Collection;)V\n+   #151 = String             #805         // Null pointer\n+   #152 = InterfaceMethodref #306.#713    // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #153 = Methodref          #62.#806     // org/json/JSONObject.optEnum:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n+   #154 = Methodref          #393.#807    // java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z\n+   #155 = Class              #808         // java/lang/Enum\n+   #156 = Methodref          #155.#809    // java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+   #157 = Class              #810         // java/lang/IllegalArgumentException\n+   #158 = Methodref          #62.#811     // org/json/JSONObject.optBoolean:(Ljava/lang/String;Z)Z\n+   #159 = Class              #812         // java/lang/Boolean\n+   #160 = Methodref          #159.#813    // java/lang/Boolean.booleanValue:()Z\n+   #161 = Methodref          #62.#814     // org/json/JSONObject.getBoolean:(Ljava/lang/String;)Z\n+   #162 = Methodref          #62.#815     // org/json/JSONObject.objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;Z)Ljava/math/BigDecimal;\n+   #163 = Methodref          #141.#816    // java/math/BigDecimal.\"<init>\":(Ljava/math/BigInteger;)V\n+   #164 = Methodref          #62.#817     // org/json/JSONObject.numberIsFinite:(Ljava/lang/Number;)Z\n+   #165 = Methodref          #141.#818    // java/math/BigDecimal.\"<init>\":(D)V\n+   #166 = Methodref          #141.#703    // java/math/BigDecimal.\"<init>\":(Ljava/lang/String;)V\n+   #167 = Class              #819         // java/lang/Short\n+   #168 = Class              #820         // java/lang/Byte\n+   #169 = Methodref          #141.#821    // java/math/BigDecimal.\"<init>\":(J)V\n+   #170 = Methodref          #141.#822    // java/math/BigDecimal.toBigInteger:()Ljava/math/BigInteger;\n+   #171 = Methodref          #132.#823    // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+   #172 = Methodref          #62.#824     // org/json/JSONObject.isDecimalNotation:(Ljava/lang/String;)Z\n+   #173 = Methodref          #132.#703    // java/math/BigInteger.\"<init>\":(Ljava/lang/String;)V\n    #174 = Double             NaNd\n-   #176 = Methodref          #62.#857     // org/json/JSONObject.optDouble:(Ljava/lang/String;D)D\n-   #177 = Methodref          #62.#858     // org/json/JSONObject.optNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+   #176 = Methodref          #62.#825     // org/json/JSONObject.optDouble:(Ljava/lang/String;D)D\n+   #177 = Methodref          #62.#826     // org/json/JSONObject.optNumber:(Ljava/lang/String;)Ljava/lang/Number;\n    #178 = Float              NaNf\n-   #179 = Methodref          #62.#859     // org/json/JSONObject.optFloat:(Ljava/lang/String;F)F\n-   #180 = Methodref          #62.#860     // org/json/JSONObject.optInt:(Ljava/lang/String;I)I\n-   #181 = Methodref          #62.#861     // org/json/JSONObject.optNumber:(Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;\n-   #182 = Methodref          #62.#862     // org/json/JSONObject.optJSONObject:(Ljava/lang/String;Lorg/json/JSONObject;)Lorg/json/JSONObject;\n-   #183 = Methodref          #62.#863     // org/json/JSONObject.optLong:(Ljava/lang/String;J)J\n-   #184 = String             #864         //\n-   #185 = Methodref          #62.#865     // org/json/JSONObject.optString:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-   #186 = Class              #866         // java/util/IdentityHashMap\n-   #187 = Methodref          #186.#698    // java/util/IdentityHashMap.\"<init>\":()V\n-   #188 = Methodref          #867.#868    // java/util/Collections.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;\n-   #189 = Methodref          #740.#869    // java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;\n-   #190 = Methodref          #740.#870    // java/lang/Class.getMethods:()[Ljava/lang/reflect/Method;\n-   #191 = Methodref          #740.#871    // java/lang/Class.getDeclaredMethods:()[Ljava/lang/reflect/Method;\n-   #192 = Methodref          #872.#873    // java/lang/reflect/Method.getModifiers:()I\n-   #193 = Methodref          #874.#875    // java/lang/reflect/Modifier.isPublic:(I)Z\n-   #194 = Methodref          #874.#876    // java/lang/reflect/Modifier.isStatic:(I)Z\n-   #195 = Methodref          #872.#877    // java/lang/reflect/Method.getParameterTypes:()[Ljava/lang/Class;\n-   #196 = Methodref          #872.#878    // java/lang/reflect/Method.isBridge:()Z\n-   #197 = Methodref          #872.#879    // java/lang/reflect/Method.getReturnType:()Ljava/lang/Class;\n-   #198 = Fieldref           #880.#881    // java/lang/Void.TYPE:Ljava/lang/Class;\n-   #199 = Methodref          #872.#816    // java/lang/reflect/Method.getName:()Ljava/lang/String;\n-   #200 = Methodref          #62.#882     // org/json/JSONObject.isValidMethodName:(Ljava/lang/String;)Z\n-   #201 = Methodref          #62.#883     // org/json/JSONObject.getKeyNameFromMethod:(Ljava/lang/reflect/Method;)Ljava/lang/String;\n-   #202 = Methodref          #58.#812     // java/lang/String.isEmpty:()Z\n-   #203 = Class              #884         // java/lang/Object\n-   #204 = Methodref          #872.#885    // java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n-   #205 = InterfaceMethodref #723.#886    // java/util/Set.contains:(Ljava/lang/Object;)Z\n-   #206 = Methodref          #62.#887     // org/json/JSONObject.recursivelyDefinedObjectException:(Ljava/lang/String;)Lorg/json/JSONException;\n-   #207 = InterfaceMethodref #723.#888    // java/util/Set.add:(Ljava/lang/Object;)Z\n-   #208 = Methodref          #62.#889     // org/json/JSONObject.wrap:(Ljava/lang/Object;Ljava/util/Set;)Ljava/lang/Object;\n-   #209 = InterfaceMethodref #723.#890    // java/util/Set.remove:(Ljava/lang/Object;)Z\n-   #210 = Class              #891         // java/io/Closeable\n-   #211 = InterfaceMethodref #210.#892    // java/io/Closeable.close:()V\n-   #212 = Class              #893         // java/io/IOException\n-   #213 = Class              #894         // java/lang/IllegalAccessException\n-   #214 = Class              #895         // java/lang/reflect/InvocationTargetException\n-   #215 = String             #896         // getClass\n-   #216 = Methodref          #58.#787     // java/lang/String.equals:(Ljava/lang/Object;)Z\n-   #217 = String             #897         // getDeclaringClass\n-   #218 = Class              #898         // org/json/JSONPropertyIgnore\n-   #219 = Methodref          #62.#899     // org/json/JSONObject.getAnnotationDepth:(Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n-   #220 = Class              #900         // org/json/JSONPropertyName\n-   #221 = Methodref          #62.#901     // org/json/JSONObject.getAnnotation:(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n-   #222 = InterfaceMethodref #220.#902    // org/json/JSONPropertyName.value:()Ljava/lang/String;\n-   #223 = String             #430         // get\n-   #224 = Methodref          #58.#903     // java/lang/String.startsWith:(Ljava/lang/String;)Z\n-   #225 = Methodref          #58.#904     // java/lang/String.substring:(I)Ljava/lang/String;\n-   #226 = String             #905         // is\n-   #227 = Methodref          #58.#906     // java/lang/String.charAt:(I)C\n-   #228 = Methodref          #302.#907    // java/lang/Character.isLowerCase:(C)Z\n-   #229 = Fieldref           #908.#909    // java/util/Locale.ROOT:Ljava/util/Locale;\n-   #230 = Methodref          #58.#910     // java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;\n-   #231 = Methodref          #302.#911    // java/lang/Character.isUpperCase:(C)Z\n-   #232 = Methodref          #872.#912    // java/lang/reflect/Method.isAnnotationPresent:(Ljava/lang/Class;)Z\n-   #233 = Methodref          #872.#913    // java/lang/reflect/Method.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n-   #234 = Methodref          #872.#914    // java/lang/reflect/Method.getDeclaringClass:()Ljava/lang/Class;\n-   #235 = Methodref          #740.#915    // java/lang/Class.getSuperclass:()Ljava/lang/Class;\n-   #236 = Methodref          #740.#916    // java/lang/Class.getInterfaces:()[Ljava/lang/Class;\n-   #237 = Methodref          #740.#917    // java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n-   #238 = Class              #918         // java/lang/SecurityException\n-   #239 = Class              #919         // java/lang/NoSuchMethodException\n-   #240 = Methodref          #138.#920    // java/lang/Double.valueOf:(D)Ljava/lang/Double;\n-   #241 = Methodref          #135.#921    // java/lang/Float.valueOf:(F)Ljava/lang/Float;\n-   #242 = Methodref          #127.#922    // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #243 = Methodref          #129.#923    // java/lang/Long.valueOf:(J)Ljava/lang/Long;\n-   #244 = Methodref          #62.#924     // org/json/JSONObject.\"<init>\":(Ljava/util/Map;)V\n-   #245 = Methodref          #62.#925     // org/json/JSONObject.remove:(Ljava/lang/String;)Ljava/lang/Object;\n-   #246 = Class              #926         // org/json/JSONPointer\n-   #247 = Methodref          #246.#732    // org/json/JSONPointer.\"<init>\":(Ljava/lang/String;)V\n-   #248 = Methodref          #62.#927     // org/json/JSONObject.query:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n-   #249 = Methodref          #246.#928    // org/json/JSONPointer.queryFrom:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #250 = Methodref          #62.#929     // org/json/JSONObject.optQuery:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n-   #251 = Class              #930         // org/json/JSONPointerException\n-   #252 = Class              #931         // java/io/StringWriter\n-   #253 = Methodref          #252.#698    // java/io/StringWriter.\"<init>\":()V\n-   #254 = Methodref          #252.#932    // java/io/StringWriter.getBuffer:()Ljava/lang/StringBuffer;\n-   #255 = Methodref          #62.#933     // org/json/JSONObject.quote:(Ljava/lang/String;Ljava/io/Writer;)Ljava/io/Writer;\n-   #256 = String             #934         // \\\"\\\"\n-   #257 = Methodref          #935.#936    // java/io/Writer.write:(Ljava/lang/String;)V\n-   #258 = Methodref          #935.#937    // java/io/Writer.write:(I)V\n-   #259 = String             #938         // \\\\b\n-   #260 = String             #939         // \\\\t\n-   #261 = String             #940         // \\\\n\n-   #262 = String             #941         // \\\\f\n-   #263 = String             #942         // \\\\r\n-   #264 = String             #943         // \\\\u\n-   #265 = Methodref          #127.#944    // java/lang/Integer.toHexString:(I)Ljava/lang/String;\n-   #266 = String             #945         // 0000\n-   #267 = Methodref          #935.#946    // java/io/Writer.write:(Ljava/lang/String;II)V\n-   #268 = InterfaceMethodref #306.#947    // java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #269 = InterfaceMethodref #723.#787    // java/util/Set.equals:(Ljava/lang/Object;)Z\n-   #270 = Methodref          #62.#722     // org/json/JSONObject.entrySet:()Ljava/util/Set;\n-   #271 = Methodref          #62.#948     // org/json/JSONObject.similar:(Ljava/lang/Object;)Z\n-   #272 = Methodref          #65.#948     // org/json/JSONArray.similar:(Ljava/lang/Object;)Z\n-   #273 = Methodref          #62.#949     // org/json/JSONObject.isNumberSimilar:(Ljava/lang/Number;Ljava/lang/Number;)Z\n-   #274 = Class              #950         // java/lang/Throwable\n-   #275 = Class              #951         // java/lang/Comparable\n-   #276 = InterfaceMethodref #275.#952    // java/lang/Comparable.compareTo:(Ljava/lang/Object;)I\n-   #277 = Methodref          #141.#953    // java/math/BigDecimal.compareTo:(Ljava/math/BigDecimal;)I\n-   #278 = Methodref          #138.#954    // java/lang/Double.isInfinite:()Z\n-   #279 = Methodref          #138.#955    // java/lang/Double.isNaN:()Z\n-   #280 = Methodref          #135.#954    // java/lang/Float.isInfinite:()Z\n-   #281 = Methodref          #135.#955    // java/lang/Float.isNaN:()Z\n-   #282 = String             #956         // -0\n-   #283 = Fieldref           #141.#957    // java/math/BigDecimal.ZERO:Ljava/math/BigDecimal;\n+   #179 = Methodref          #62.#827     // org/json/JSONObject.optFloat:(Ljava/lang/String;F)F\n+   #180 = Methodref          #62.#828     // org/json/JSONObject.optInt:(Ljava/lang/String;I)I\n+   #181 = Methodref          #62.#829     // org/json/JSONObject.optNumber:(Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;\n+   #182 = Methodref          #62.#830     // org/json/JSONObject.optJSONObject:(Ljava/lang/String;Lorg/json/JSONObject;)Lorg/json/JSONObject;\n+   #183 = Methodref          #62.#831     // org/json/JSONObject.optLong:(Ljava/lang/String;J)J\n+   #184 = String             #832         //\n+   #185 = Methodref          #62.#833     // org/json/JSONObject.optString:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+   #186 = Class              #834         // java/util/IdentityHashMap\n+   #187 = Methodref          #186.#671    // java/util/IdentityHashMap.\"<init>\":()V\n+   #188 = Methodref          #835.#836    // java/util/Collections.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;\n+   #189 = Methodref          #393.#837    // java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;\n+   #190 = Methodref          #393.#838    // java/lang/Class.getMethods:()[Ljava/lang/reflect/Method;\n+   #191 = Methodref          #393.#839    // java/lang/Class.getDeclaredMethods:()[Ljava/lang/reflect/Method;\n+   #192 = Methodref          #538.#840    // java/lang/reflect/Method.getModifiers:()I\n+   #193 = Methodref          #841.#842    // java/lang/reflect/Modifier.isPublic:(I)Z\n+   #194 = Methodref          #841.#843    // java/lang/reflect/Modifier.isStatic:(I)Z\n+   #195 = Methodref          #538.#844    // java/lang/reflect/Method.getParameterTypes:()[Ljava/lang/Class;\n+   #196 = Methodref          #538.#845    // java/lang/reflect/Method.isBridge:()Z\n+   #197 = Methodref          #538.#846    // java/lang/reflect/Method.getReturnType:()Ljava/lang/Class;\n+   #198 = Fieldref           #847.#848    // java/lang/Void.TYPE:Ljava/lang/Class;\n+   #199 = Methodref          #538.#784    // java/lang/reflect/Method.getName:()Ljava/lang/String;\n+   #200 = Methodref          #62.#849     // org/json/JSONObject.isValidMethodName:(Ljava/lang/String;)Z\n+   #201 = Methodref          #62.#850     // org/json/JSONObject.getKeyNameFromMethod:(Ljava/lang/reflect/Method;)Ljava/lang/String;\n+   #202 = Methodref          #58.#780     // java/lang/String.isEmpty:()Z\n+   #203 = Class              #851         // java/lang/Object\n+   #204 = Methodref          #538.#852    // java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n+   #205 = InterfaceMethodref #537.#853    // java/util/Set.contains:(Ljava/lang/Object;)Z\n+   #206 = Methodref          #62.#854     // org/json/JSONObject.recursivelyDefinedObjectException:(Ljava/lang/String;)Lorg/json/JSONException;\n+   #207 = InterfaceMethodref #537.#855    // java/util/Set.add:(Ljava/lang/Object;)Z\n+   #208 = Methodref          #62.#856     // org/json/JSONObject.wrap:(Ljava/lang/Object;Ljava/util/Set;)Ljava/lang/Object;\n+   #209 = InterfaceMethodref #537.#857    // java/util/Set.remove:(Ljava/lang/Object;)Z\n+   #210 = Class              #858         // java/io/Closeable\n+   #211 = InterfaceMethodref #210.#859    // java/io/Closeable.close:()V\n+   #212 = Class              #860         // java/io/IOException\n+   #213 = Class              #861         // java/lang/IllegalAccessException\n+   #214 = Class              #862         // java/lang/reflect/InvocationTargetException\n+   #215 = String             #863         // getClass\n+   #216 = Methodref          #58.#755     // java/lang/String.equals:(Ljava/lang/Object;)Z\n+   #217 = String             #864         // getDeclaringClass\n+   #218 = Class              #865         // org/json/JSONPropertyIgnore\n+   #219 = Methodref          #62.#866     // org/json/JSONObject.getAnnotationDepth:(Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n+   #220 = Class              #867         // org/json/JSONPropertyName\n+   #221 = Methodref          #62.#868     // org/json/JSONObject.getAnnotation:(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n+   #222 = InterfaceMethodref #220.#869    // org/json/JSONPropertyName.value:()Ljava/lang/String;\n+   #223 = String             #423         // get\n+   #224 = Methodref          #58.#870     // java/lang/String.startsWith:(Ljava/lang/String;)Z\n+   #225 = Methodref          #58.#871     // java/lang/String.substring:(I)Ljava/lang/String;\n+   #226 = String             #872         // is\n+   #227 = Methodref          #58.#873     // java/lang/String.charAt:(I)C\n+   #228 = Methodref          #302.#874    // java/lang/Character.isLowerCase:(C)Z\n+   #229 = Fieldref           #410.#875    // java/util/Locale.ROOT:Ljava/util/Locale;\n+   #230 = Methodref          #58.#876     // java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;\n+   #231 = Methodref          #302.#877    // java/lang/Character.isUpperCase:(C)Z\n+   #232 = Methodref          #538.#878    // java/lang/reflect/Method.isAnnotationPresent:(Ljava/lang/Class;)Z\n+   #233 = Methodref          #538.#879    // java/lang/reflect/Method.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n+   #234 = Methodref          #538.#880    // java/lang/reflect/Method.getDeclaringClass:()Ljava/lang/Class;\n+   #235 = Methodref          #393.#881    // java/lang/Class.getSuperclass:()Ljava/lang/Class;\n+   #236 = Methodref          #393.#882    // java/lang/Class.getInterfaces:()[Ljava/lang/Class;\n+   #237 = Methodref          #393.#883    // java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n+   #238 = Class              #884         // java/lang/SecurityException\n+   #239 = Class              #885         // java/lang/NoSuchMethodException\n+   #240 = Methodref          #138.#886    // java/lang/Double.valueOf:(D)Ljava/lang/Double;\n+   #241 = Methodref          #135.#887    // java/lang/Float.valueOf:(F)Ljava/lang/Float;\n+   #242 = Methodref          #127.#888    // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+   #243 = Methodref          #129.#889    // java/lang/Long.valueOf:(J)Ljava/lang/Long;\n+   #244 = Methodref          #62.#890     // org/json/JSONObject.\"<init>\":(Ljava/util/Map;)V\n+   #245 = Methodref          #62.#891     // org/json/JSONObject.remove:(Ljava/lang/String;)Ljava/lang/Object;\n+   #246 = Class              #892         // org/json/JSONPointer\n+   #247 = Methodref          #246.#703    // org/json/JSONPointer.\"<init>\":(Ljava/lang/String;)V\n+   #248 = Methodref          #62.#893     // org/json/JSONObject.query:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n+   #249 = Methodref          #246.#894    // org/json/JSONPointer.queryFrom:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #250 = Methodref          #62.#895     // org/json/JSONObject.optQuery:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n+   #251 = Class              #896         // org/json/JSONPointerException\n+   #252 = Class              #897         // java/io/StringWriter\n+   #253 = Methodref          #252.#671    // java/io/StringWriter.\"<init>\":()V\n+   #254 = Methodref          #252.#898    // java/io/StringWriter.getBuffer:()Ljava/lang/StringBuffer;\n+   #255 = Methodref          #62.#899     // org/json/JSONObject.quote:(Ljava/lang/String;Ljava/io/Writer;)Ljava/io/Writer;\n+   #256 = String             #900         // \\\"\\\"\n+   #257 = Methodref          #591.#901    // java/io/Writer.write:(Ljava/lang/String;)V\n+   #258 = Methodref          #591.#902    // java/io/Writer.write:(I)V\n+   #259 = String             #903         // \\\\b\n+   #260 = String             #904         // \\\\t\n+   #261 = String             #905         // \\\\n\n+   #262 = String             #906         // \\\\f\n+   #263 = String             #907         // \\\\r\n+   #264 = String             #908         // \\\\u\n+   #265 = Methodref          #127.#909    // java/lang/Integer.toHexString:(I)Ljava/lang/String;\n+   #266 = String             #910         // 0000\n+   #267 = Methodref          #591.#911    // java/io/Writer.write:(Ljava/lang/String;II)V\n+   #268 = InterfaceMethodref #306.#912    // java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #269 = InterfaceMethodref #537.#755    // java/util/Set.equals:(Ljava/lang/Object;)Z\n+   #270 = Methodref          #62.#695     // org/json/JSONObject.entrySet:()Ljava/util/Set;\n+   #271 = Methodref          #62.#913     // org/json/JSONObject.similar:(Ljava/lang/Object;)Z\n+   #272 = Methodref          #65.#913     // org/json/JSONArray.similar:(Ljava/lang/Object;)Z\n+   #273 = Methodref          #62.#914     // org/json/JSONObject.isNumberSimilar:(Ljava/lang/Number;Ljava/lang/Number;)Z\n+   #274 = Class              #915         // java/lang/Throwable\n+   #275 = Class              #916         // java/lang/Comparable\n+   #276 = InterfaceMethodref #275.#917    // java/lang/Comparable.compareTo:(Ljava/lang/Object;)I\n+   #277 = Methodref          #141.#918    // java/math/BigDecimal.compareTo:(Ljava/math/BigDecimal;)I\n+   #278 = Methodref          #138.#919    // java/lang/Double.isInfinite:()Z\n+   #279 = Methodref          #138.#920    // java/lang/Double.isNaN:()Z\n+   #280 = Methodref          #135.#919    // java/lang/Float.isInfinite:()Z\n+   #281 = Methodref          #135.#920    // java/lang/Float.isNaN:()Z\n+   #282 = String             #921         // -0\n+   #283 = Fieldref           #141.#922    // java/math/BigDecimal.ZERO:Ljava/math/BigDecimal;\n    #284 = Double             -0.0d\n-   #286 = Class              #958         // java/lang/NumberFormatException\n-   #287 = Methodref          #138.#959    // java/lang/Double.valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n-   #288 = String             #960         // val [\n-   #289 = String             #961         // ] is not a valid number.\n-   #290 = Methodref          #286.#732    // java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n-   #291 = Methodref          #132.#962    // java/math/BigInteger.bitLength:()I\n-   #292 = Methodref          #132.#805    // java/math/BigInteger.intValue:()I\n-   #293 = Methodref          #132.#809    // java/math/BigInteger.longValue:()J\n-   #294 = String             #963         // JSON does not allow non-finite numbers.\n-   #295 = Methodref          #65.#812     // org/json/JSONArray.isEmpty:()Z\n-   #296 = Methodref          #65.#774     // org/json/JSONArray.length:()I\n-   #297 = Methodref          #65.#964     // org/json/JSONArray.getString:(I)Ljava/lang/String;\n-   #298 = Methodref          #62.#965     // org/json/JSONObject.toString:(I)Ljava/lang/String;\n-   #299 = Methodref          #62.#966     // org/json/JSONObject.write:(Ljava/io/Writer;II)Ljava/io/Writer;\n-   #300 = Methodref          #967.#968    // org/json/JSONWriter.valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n-   #301 = Class              #969         // org/json/JSONString\n-   #302 = Class              #970         // java/lang/Character\n-   #303 = Class              #971         // java/util/Collection\n-   #304 = Methodref          #740.#972    // java/lang/Class.isArray:()Z\n-   #305 = Methodref          #65.#973     // org/json/JSONArray.\"<init>\":(Ljava/lang/Object;)V\n-   #306 = Class              #974         // java/util/Map\n-   #307 = Methodref          #740.#975    // java/lang/Class.getPackage:()Ljava/lang/Package;\n-   #308 = Methodref          #976.#816    // java/lang/Package.getName:()Ljava/lang/String;\n-   #309 = String             #977         // java.\n-   #310 = String             #978         // javax.\n-   #311 = Methodref          #62.#979     // org/json/JSONObject.\"<init>\":(Ljava/lang/Object;Ljava/util/Set;)V\n-   #312 = Methodref          #62.#973     // org/json/JSONObject.\"<init>\":(Ljava/lang/Object;)V\n-   #313 = InterfaceMethodref #301.#980    // org/json/JSONString.toJSONString:()Ljava/lang/String;\n-   #314 = Methodref          #80.#981     // org/json/JSONException.\"<init>\":(Ljava/lang/Throwable;)V\n-   #315 = Methodref          #62.#982     // org/json/JSONObject.numberToString:(Ljava/lang/Number;)Ljava/lang/String;\n-   #316 = Fieldref           #62.#983     // org/json/JSONObject.NUMBER_PATTERN:Ljava/util/regex/Pattern;\n-   #317 = Methodref          #984.#985    // java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-   #318 = Methodref          #986.#987    // java/util/regex/Matcher.matches:()Z\n-   #319 = Methodref          #155.#988    // java/lang/Enum.name:()Ljava/lang/String;\n-   #320 = Methodref          #65.#966     // org/json/JSONArray.write:(Ljava/io/Writer;II)Ljava/io/Writer;\n-   #321 = Methodref          #62.#989     // org/json/JSONObject.writeValue:(Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n-   #322 = String             #990         // Unable to write JSONObject value for key:\n-   #323 = Methodref          #80.#991     // org/json/JSONException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #324 = Methodref          #62.#992     // org/json/JSONObject.indent:(Ljava/io/Writer;I)V\n-   #325 = Methodref          #62.#993     // org/json/JSONObject.toMap:()Ljava/util/Map;\n-   #326 = Methodref          #65.#994     // org/json/JSONArray.toList:()Ljava/util/List;\n-   #327 = String             #995         // ] is not a\n-   #328 = String             #996         //  (\n-   #329 = Methodref          #20.#997     // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #330 = String             #998         // ).\n-   #331 = String             #999         // JavaBean object contains recursively defined member variable of key\n-   #332 = String             #1000        // -?(?:0|[1-9]\\\\d*)(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?\n-   #333 = Methodref          #984.#1001   // java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n-   #334 = Class              #1002        // org/json/JSONObject$Null\n-   #335 = Methodref          #334.#1003   // org/json/JSONObject$Null.\"<init>\":(Lorg/json/JSONObject$1;)V\n-   #336 = Class              #1004        // org/json/JSONObject$1\n+   #286 = Class              #923         // java/lang/NumberFormatException\n+   #287 = Methodref          #138.#924    // java/lang/Double.valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n+   #288 = String             #925         // val [\n+   #289 = String             #926         // ] is not a valid number.\n+   #290 = Methodref          #286.#703    // java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n+   #291 = Methodref          #132.#927    // java/math/BigInteger.bitLength:()I\n+   #292 = Methodref          #132.#773    // java/math/BigInteger.intValue:()I\n+   #293 = Methodref          #132.#777    // java/math/BigInteger.longValue:()J\n+   #294 = String             #928         // JSON does not allow non-finite numbers.\n+   #295 = Methodref          #65.#780     // org/json/JSONArray.isEmpty:()Z\n+   #296 = Methodref          #65.#742     // org/json/JSONArray.length:()I\n+   #297 = Methodref          #65.#929     // org/json/JSONArray.getString:(I)Ljava/lang/String;\n+   #298 = Methodref          #62.#930     // org/json/JSONObject.toString:(I)Ljava/lang/String;\n+   #299 = Methodref          #62.#931     // org/json/JSONObject.write:(Ljava/io/Writer;II)Ljava/io/Writer;\n+   #300 = Methodref          #932.#933    // org/json/JSONWriter.valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n+   #301 = Class              #934         // org/json/JSONString\n+   #302 = Class              #935         // java/lang/Character\n+   #303 = Class              #936         // java/util/Collection\n+   #304 = Methodref          #393.#937    // java/lang/Class.isArray:()Z\n+   #305 = Methodref          #65.#938     // org/json/JSONArray.\"<init>\":(Ljava/lang/Object;)V\n+   #306 = Class              #939         // java/util/Map\n+   #307 = Methodref          #393.#940    // java/lang/Class.getPackage:()Ljava/lang/Package;\n+   #308 = Methodref          #643.#784    // java/lang/Package.getName:()Ljava/lang/String;\n+   #309 = String             #941         // java.\n+   #310 = String             #942         // javax.\n+   #311 = Methodref          #62.#943     // org/json/JSONObject.\"<init>\":(Ljava/lang/Object;Ljava/util/Set;)V\n+   #312 = Methodref          #62.#938     // org/json/JSONObject.\"<init>\":(Ljava/lang/Object;)V\n+   #313 = InterfaceMethodref #301.#944    // org/json/JSONString.toJSONString:()Ljava/lang/String;\n+   #314 = Methodref          #80.#945     // org/json/JSONException.\"<init>\":(Ljava/lang/Throwable;)V\n+   #315 = Methodref          #62.#946     // org/json/JSONObject.numberToString:(Ljava/lang/Number;)Ljava/lang/String;\n+   #316 = Fieldref           #62.#947     // org/json/JSONObject.NUMBER_PATTERN:Ljava/util/regex/Pattern;\n+   #317 = Methodref          #948.#949    // java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+   #318 = Methodref          #950.#951    // java/util/regex/Matcher.matches:()Z\n+   #319 = Methodref          #155.#952    // java/lang/Enum.name:()Ljava/lang/String;\n+   #320 = Methodref          #65.#931     // org/json/JSONArray.write:(Ljava/io/Writer;II)Ljava/io/Writer;\n+   #321 = Methodref          #62.#953     // org/json/JSONObject.writeValue:(Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n+   #322 = String             #954         // Unable to write JSONObject value for key:\n+   #323 = Methodref          #80.#955     // org/json/JSONException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #324 = Methodref          #62.#956     // org/json/JSONObject.indent:(Ljava/io/Writer;I)V\n+   #325 = Methodref          #62.#957     // org/json/JSONObject.toMap:()Ljava/util/Map;\n+   #326 = Methodref          #65.#958     // org/json/JSONArray.toList:()Ljava/util/List;\n+   #327 = String             #959         // ] is not a\n+   #328 = String             #960         //  (\n+   #329 = Methodref          #20.#961     // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #330 = String             #962         // ).\n+   #331 = String             #963         // JavaBean object contains recursively defined member variable of key\n+   #332 = String             #964         // -?(?:0|[1-9]\\\\d*)(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?\n+   #333 = Methodref          #948.#965    // java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n+   #334 = Class              #966         // org/json/JSONObject$Null\n+   #335 = Methodref          #334.#967    // org/json/JSONObject$Null.\"<init>\":(Lorg/json/JSONObject$1;)V\n+   #336 = Class              #968         // org/json/JSONObject$1\n    #337 = Utf8               InnerClasses\n    #338 = Utf8               Null\n    #339 = Utf8               NUMBER_PATTERN\n    #340 = Utf8               Ljava/util/regex/Pattern;\n    #341 = Utf8               map\n    #342 = Utf8               Ljava/util/Map;\n    #343 = Utf8               Signature\n@@ -362,814 +362,778 @@\n    #354 = Utf8               (Lorg/json/JSONObject;[Ljava/lang/String;)V\n    #355 = Utf8               i\n    #356 = Utf8               I\n    #357 = Utf8               jo\n    #358 = Utf8               names\n    #359 = Utf8               [Ljava/lang/String;\n    #360 = Utf8               StackMapTable\n-   #361 = Class              #760         // org/json/JSONObject\n-   #362 = Class              #704         // java/lang/Exception\n-   #363 = Utf8               (Lorg/json/JSONTokener;)V\n-   #364 = Utf8               value\n-   #365 = Utf8               prev\n-   #366 = Utf8               C\n-   #367 = Utf8               x\n-   #368 = Utf8               Lorg/json/JSONTokener;\n-   #369 = Utf8               c\n-   #370 = Utf8               key\n-   #371 = Utf8               Ljava/lang/String;\n-   #372 = Class              #745         // org/json/JSONTokener\n-   #373 = Class              #756         // java/lang/String\n-   #374 = Utf8               Exceptions\n-   #375 = Utf8               (Ljava/util/Map;)V\n-   #376 = Utf8               e\n-   #377 = Utf8               Entry\n-   #378 = Utf8               Ljava/util/Map$Entry;\n-   #379 = Utf8               m\n-   #380 = Utf8               LocalVariableTypeTable\n-   #381 = Utf8               Ljava/util/Map$Entry<**>;\n-   #382 = Utf8               Ljava/util/Map<**>;\n-   #383 = Class              #974         // java/util/Map\n-   #384 = Class              #1005        // java/util/Iterator\n-   #385 = Class              #728         // java/util/Map$Entry\n-   #386 = Utf8               (Ljava/util/Map<**>;)V\n-   #387 = Utf8               (Ljava/lang/Object;)V\n-   #388 = Utf8               bean\n-   #389 = Utf8               (Ljava/lang/Object;Ljava/util/Set;)V\n-   #390 = Utf8               objectsRecord\n-   #391 = Utf8               Ljava/util/Set;\n-   #392 = Utf8               Ljava/util/Set<Ljava/lang/Object;>;\n-   #393 = Utf8               (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)V\n-   #394 = Utf8               (Ljava/lang/Object;[Ljava/lang/String;)V\n-   #395 = Utf8               name\n-   #396 = Utf8               object\n-   #397 = Utf8               Ljava/lang/Class;\n-   #398 = Utf8               Ljava/lang/Class<*>;\n-   #399 = Class              #884         // java/lang/Object\n-   #400 = Class              #1006        // java/lang/Class\n-   #401 = Utf8               (Ljava/lang/String;)V\n-   #402 = Utf8               source\n-   #403 = Utf8               (Ljava/lang/String;Ljava/util/Locale;)V\n-   #404 = Utf8               segment\n-   #405 = Utf8               nextTarget\n-   #406 = Utf8               path\n-   #407 = Utf8               last\n-   #408 = Utf8               target\n-   #409 = Utf8               baseName\n-   #410 = Utf8               locale\n-   #411 = Utf8               Ljava/util/Locale;\n-   #412 = Utf8               bundle\n-   #413 = Utf8               Ljava/util/ResourceBundle;\n-   #414 = Utf8               keys\n-   #415 = Utf8               Ljava/util/Enumeration;\n-   #416 = Utf8               Ljava/util/Enumeration<Ljava/lang/String;>;\n-   #417 = Class              #1007        // java/util/Locale\n-   #418 = Class              #1008        // java/util/ResourceBundle\n-   #419 = Class              #1009        // java/util/Enumeration\n-   #420 = Utf8               (I)V\n-   #421 = Utf8               initialCapacity\n-   #422 = Utf8               accumulate\n-   #423 = Utf8               (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #424 = Utf8               append\n-   #425 = Utf8               doubleToString\n-   #426 = Utf8               (D)Ljava/lang/String;\n-   #427 = Utf8               d\n-   #428 = Utf8               D\n-   #429 = Utf8               string\n-   #430 = Utf8               get\n-   #431 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n-   #432 = Utf8               getEnum\n-   #433 = Utf8               (Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-   #434 = Utf8               clazz\n-   #435 = Utf8               val\n-   #436 = Utf8               Ljava/lang/Enum;\n-   #437 = Utf8               Ljava/lang/Class<TE;>;\n-   #438 = Utf8               TE;\n-   #439 = Class              #840         // java/lang/Enum\n-   #440 = Utf8               <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;)TE;\n-   #441 = Utf8               getBoolean\n-   #442 = Utf8               (Ljava/lang/String;)Z\n-   #443 = Utf8               getBigInteger\n-   #444 = Utf8               (Ljava/lang/String;)Ljava/math/BigInteger;\n-   #445 = Utf8               ret\n-   #446 = Utf8               Ljava/math/BigInteger;\n-   #447 = Class              #822         // java/math/BigInteger\n-   #448 = Utf8               getBigDecimal\n-   #449 = Utf8               (Ljava/lang/String;)Ljava/math/BigDecimal;\n-   #450 = Utf8               Ljava/math/BigDecimal;\n-   #451 = Class              #829         // java/math/BigDecimal\n-   #452 = Utf8               getDouble\n-   #453 = Utf8               (Ljava/lang/String;)D\n-   #454 = Utf8               Ljava/lang/Exception;\n-   #455 = Utf8               getFloat\n-   #456 = Utf8               (Ljava/lang/String;)F\n-   #457 = Utf8               getNumber\n-   #458 = Utf8               (Ljava/lang/String;)Ljava/lang/Number;\n-   #459 = Utf8               getInt\n-   #460 = Utf8               (Ljava/lang/String;)I\n-   #461 = Utf8               getJSONArray\n-   #462 = Utf8               (Ljava/lang/String;)Lorg/json/JSONArray;\n-   #463 = Utf8               getJSONObject\n-   #464 = Utf8               (Ljava/lang/String;)Lorg/json/JSONObject;\n-   #465 = Utf8               getLong\n-   #466 = Utf8               (Ljava/lang/String;)J\n-   #467 = Utf8               getNames\n-   #468 = Utf8               (Lorg/json/JSONObject;)[Ljava/lang/String;\n-   #469 = Utf8               (Ljava/lang/Object;)[Ljava/lang/String;\n-   #470 = Utf8               klass\n-   #471 = Utf8               fields\n-   #472 = Utf8               [Ljava/lang/reflect/Field;\n-   #473 = Utf8               length\n-   #474 = Class              #472         // \"[Ljava/lang/reflect/Field;\"\n-   #475 = Utf8               getString\n-   #476 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-   #477 = Utf8               has\n-   #478 = Utf8               increment\n-   #479 = Utf8               isNull\n-   #480 = Utf8               ()Ljava/util/Iterator;\n-   #481 = Utf8               ()Ljava/util/Iterator<Ljava/lang/String;>;\n-   #482 = Utf8               keySet\n-   #483 = Utf8               ()Ljava/util/Set;\n-   #484 = Utf8               ()Ljava/util/Set<Ljava/lang/String;>;\n-   #485 = Utf8               entrySet\n-   #486 = Utf8               ()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;>;\n-   #487 = Utf8               ()I\n-   #488 = Utf8               clear\n-   #489 = Utf8               isEmpty\n-   #490 = Utf8               ()Z\n-   #491 = Utf8               ()Lorg/json/JSONArray;\n-   #492 = Utf8               numberToString\n-   #493 = Utf8               (Ljava/lang/Number;)Ljava/lang/String;\n-   #494 = Utf8               number\n-   #495 = Utf8               Ljava/lang/Number;\n-   #496 = Utf8               opt\n-   #497 = Utf8               optEnum\n-   #498 = Utf8               (Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n-   #499 = Utf8               myE\n-   #500 = Utf8               Ljava/lang/IllegalArgumentException;\n-   #501 = Utf8               Ljava/lang/NullPointerException;\n-   #502 = Utf8               defaultValue\n-   #503 = Class              #842         // java/lang/IllegalArgumentException\n-   #504 = Class              #730         // java/lang/NullPointerException\n-   #505 = Utf8               <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;TE;)TE;\n-   #506 = Utf8               optBoolean\n-   #507 = Utf8               (Ljava/lang/String;Z)Z\n-   #508 = Utf8               Z\n-   #509 = Utf8               optBigDecimal\n-   #510 = Utf8               (Ljava/lang/String;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #511 = Utf8               objectToBigDecimal\n-   #512 = Utf8               (Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #513 = Utf8               (Ljava/lang/Object;Ljava/math/BigDecimal;Z)Ljava/math/BigDecimal;\n-   #514 = Utf8               exact\n-   #515 = Utf8               optBigInteger\n-   #516 = Utf8               (Ljava/lang/String;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #517 = Utf8               objectToBigInteger\n-   #518 = Utf8               (Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #519 = Utf8               valStr\n-   #520 = Utf8               optDouble\n-   #521 = Utf8               (Ljava/lang/String;D)D\n-   #522 = Utf8               doubleValue\n-   #523 = Class              #797         // java/lang/Number\n-   #524 = Utf8               optFloat\n-   #525 = Utf8               (Ljava/lang/String;F)F\n-   #526 = Utf8               F\n-   #527 = Utf8               floatValue\n-   #528 = Utf8               optInt\n-   #529 = Utf8               (Ljava/lang/String;I)I\n-   #530 = Utf8               optJSONArray\n-   #531 = Utf8               o\n-   #532 = Class              #763         // org/json/JSONArray\n-   #533 = Utf8               optJSONObject\n-   #534 = Utf8               (Ljava/lang/String;Lorg/json/JSONObject;)Lorg/json/JSONObject;\n-   #535 = Utf8               optLong\n-   #536 = Utf8               (Ljava/lang/String;J)J\n-   #537 = Utf8               J\n-   #538 = Utf8               optNumber\n-   #539 = Utf8               (Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;\n-   #540 = Utf8               optString\n-   #541 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-   #542 = Utf8               populateMap\n-   #543 = Utf8               result\n-   #544 = Utf8               modifiers\n-   #545 = Utf8               method\n-   #546 = Utf8               Ljava/lang/reflect/Method;\n-   #547 = Utf8               includeSuperClass\n-   #548 = Utf8               methods\n-   #549 = Utf8               [Ljava/lang/reflect/Method;\n-   #550 = Class              #549         // \"[Ljava/lang/reflect/Method;\"\n-   #551 = Class              #1010        // java/util/Set\n-   #552 = Class              #1011        // java/lang/reflect/Method\n-   #553 = Class              #893         // java/io/IOException\n-   #554 = Class              #894         // java/lang/IllegalAccessException\n-   #555 = Class              #895         // java/lang/reflect/InvocationTargetException\n-   #556 = Utf8               isValidMethodName\n-   #557 = Utf8               getKeyNameFromMethod\n-   #558 = Utf8               (Ljava/lang/reflect/Method;)Ljava/lang/String;\n-   #559 = Utf8               forcedNameDepth\n-   #560 = Utf8               ignoreDepth\n-   #561 = Utf8               annotation\n-   #562 = Utf8               Lorg/json/JSONPropertyName;\n-   #563 = Class              #900         // org/json/JSONPropertyName\n-   #564 = Utf8               getAnnotation\n-   #565 = Utf8               (Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n-   #566 = Utf8               im\n-   #567 = Utf8               ex\n-   #568 = Utf8               Ljava/lang/SecurityException;\n-   #569 = Utf8               Ljava/lang/NoSuchMethodException;\n-   #570 = Utf8               annotationClass\n-   #571 = Utf8               Ljava/lang/Class<TA;>;\n-   #572 = Class              #1012        // \"[Ljava/lang/Class;\"\n-   #573 = Class              #918         // java/lang/SecurityException\n-   #574 = Class              #919         // java/lang/NoSuchMethodException\n-   #575 = Utf8               <A::Ljava/lang/annotation/Annotation;>(Ljava/lang/reflect/Method;Ljava/lang/Class<TA;>;)TA;\n-   #576 = Utf8               getAnnotationDepth\n-   #577 = Utf8               (Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n-   #578 = Utf8               Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;\n-   #579 = Utf8               (Ljava/lang/reflect/Method;Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)I\n-   #580 = Utf8               put\n-   #581 = Utf8               (Ljava/lang/String;Z)Lorg/json/JSONObject;\n-   #582 = Class              #844         // java/lang/Boolean\n-   #583 = Utf8               (Ljava/lang/String;Ljava/util/Collection;)Lorg/json/JSONObject;\n-   #584 = Utf8               Ljava/util/Collection;\n-   #585 = Utf8               Ljava/util/Collection<*>;\n-   #586 = Utf8               (Ljava/lang/String;Ljava/util/Collection<*>;)Lorg/json/JSONObject;\n-   #587 = Utf8               (Ljava/lang/String;D)Lorg/json/JSONObject;\n-   #588 = Utf8               (Ljava/lang/String;F)Lorg/json/JSONObject;\n-   #589 = Utf8               (Ljava/lang/String;I)Lorg/json/JSONObject;\n-   #590 = Utf8               (Ljava/lang/String;J)Lorg/json/JSONObject;\n-   #591 = Utf8               (Ljava/lang/String;Ljava/util/Map;)Lorg/json/JSONObject;\n-   #592 = Utf8               (Ljava/lang/String;Ljava/util/Map<**>;)Lorg/json/JSONObject;\n-   #593 = Utf8               putOnce\n-   #594 = Utf8               putOpt\n-   #595 = Utf8               query\n-   #596 = Utf8               jsonPointer\n-   #597 = Utf8               (Lorg/json/JSONPointer;)Ljava/lang/Object;\n-   #598 = Utf8               Lorg/json/JSONPointer;\n-   #599 = Utf8               optQuery\n-   #600 = Utf8               Lorg/json/JSONPointerException;\n-   #601 = Class              #930         // org/json/JSONPointerException\n-   #602 = Utf8               quote\n-   #603 = Utf8               ignored\n-   #604 = Utf8               Ljava/io/IOException;\n-   #605 = Utf8               sw\n-   #606 = Utf8               Ljava/io/StringWriter;\n-   #607 = Class              #931         // java/io/StringWriter\n-   #608 = Class              #950         // java/lang/Throwable\n-   #609 = Utf8               (Ljava/lang/String;Ljava/io/Writer;)Ljava/io/Writer;\n-   #610 = Utf8               hhhh\n-   #611 = Utf8               b\n-   #612 = Utf8               w\n-   #613 = Utf8               Ljava/io/Writer;\n-   #614 = Utf8               len\n-   #615 = Class              #1013        // java/io/Writer\n-   #616 = Utf8               remove\n-   #617 = Utf8               similar\n-   #618 = Utf8               (Ljava/lang/Object;)Z\n-   #619 = Utf8               valueThis\n-   #620 = Utf8               valueOther\n-   #621 = Utf8               entry\n-   #622 = Utf8               exception\n-   #623 = Utf8               Ljava/lang/Throwable;\n-   #624 = Utf8               other\n-   #625 = Utf8               Ljava/util/Map$Entry<Ljava/lang/String;*>;\n-   #626 = Utf8               isNumberSimilar\n-   #627 = Utf8               (Ljava/lang/Number;Ljava/lang/Number;)Z\n-   #628 = Utf8               compareTo\n-   #629 = Utf8               l\n-   #630 = Utf8               r\n-   #631 = Utf8               lBigDecimal\n-   #632 = Utf8               rBigDecimal\n-   #633 = Utf8               numberIsFinite\n-   #634 = Utf8               (Ljava/lang/Number;)Z\n-   #635 = Utf8               n\n-   #636 = Utf8               isDecimalNotation\n-   #637 = Utf8               stringToNumber\n-   #638 = Utf8               bd\n-   #639 = Utf8               Ljava/lang/Double;\n-   #640 = Utf8               ignore\n-   #641 = Utf8               Ljava/lang/NumberFormatException;\n-   #642 = Utf8               retryAsDouble\n-   #643 = Utf8               at1\n-   #644 = Utf8               at2\n-   #645 = Utf8               bi\n-   #646 = Utf8               initial\n-   #647 = Class              #958         // java/lang/NumberFormatException\n-   #648 = Class              #827         // java/lang/Double\n-   #649 = Utf8               stringToValue\n-   #650 = Utf8               testValidity\n-   #651 = Utf8               toJSONArray\n-   #652 = Utf8               (Lorg/json/JSONArray;)Lorg/json/JSONArray;\n-   #653 = Utf8               Lorg/json/JSONArray;\n-   #654 = Utf8               ja\n-   #655 = Utf8               toString\n-   #656 = Utf8               ()Ljava/lang/String;\n-   #657 = Utf8               (I)Ljava/lang/String;\n-   #658 = Utf8               indentFactor\n-   #659 = Utf8               valueToString\n-   #660 = Utf8               (Ljava/lang/Object;)Ljava/lang/String;\n-   #661 = Utf8               wrap\n-   #662 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-   #663 = Utf8               (Ljava/lang/Object;Ljava/util/Set;)Ljava/lang/Object;\n-   #664 = Utf8               coll\n-   #665 = Utf8               objectPackage\n-   #666 = Utf8               Ljava/lang/Package;\n-   #667 = Utf8               objectPackageName\n-   #668 = Utf8               Lorg/json/JSONException;\n-   #669 = Class              #1014        // java/lang/Package\n-   #670 = Class              #777         // org/json/JSONException\n-   #671 = Utf8               (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)Ljava/lang/Object;\n-   #672 = Utf8               write\n-   #673 = Utf8               (Ljava/io/Writer;)Ljava/io/Writer;\n-   #674 = Utf8               writer\n-   #675 = Utf8               writeValue\n-   #676 = Utf8               (Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n-   #677 = Utf8               numberAsString\n-   #678 = Utf8               indent\n-   #679 = Utf8               (Ljava/io/Writer;I)V\n-   #680 = Utf8               (Ljava/io/Writer;II)Ljava/io/Writer;\n-   #681 = Utf8               newIndent\n-   #682 = Utf8               needsComma\n-   #683 = Utf8               toMap\n-   #684 = Utf8               ()Ljava/util/Map;\n-   #685 = Utf8               results\n-   #686 = Utf8               Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;\n-   #687 = Utf8               ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;\n-   #688 = Utf8               wrongValueFormatException\n-   #689 = Utf8               (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-   #690 = Utf8               valueType\n-   #691 = Utf8               cause\n-   #692 = Utf8               (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-   #693 = Utf8               recursivelyDefinedObjectException\n-   #694 = Utf8               (Ljava/lang/String;)Lorg/json/JSONException;\n-   #695 = Utf8               <clinit>\n-   #696 = Utf8               SourceFile\n-   #697 = Utf8               JSONObject.java\n-   #698 = NameAndType        #347:#348    // \"<init>\":()V\n-   #699 = Utf8               java/util/HashMap\n-   #700 = NameAndType        #341:#342    // map:Ljava/util/Map;\n-   #701 = NameAndType        #347:#420    // \"<init>\":(I)V\n-   #702 = NameAndType        #496:#431    // opt:(Ljava/lang/String;)Ljava/lang/Object;\n-   #703 = NameAndType        #593:#423    // putOnce:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #704 = Utf8               java/lang/Exception\n-   #705 = NameAndType        #1015:#1016  // nextClean:()C\n-   #706 = Utf8               A JSONObject text must begin with \\'{\\'\n-   #707 = NameAndType        #1017:#694   // syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n-   #708 = NameAndType        #1018:#1016  // getPrevious:()C\n-   #709 = Utf8               A JSONObject text must end with \\'}\\'\n-   #710 = Utf8               A JSON Object can not directly nest another JSON Object or JSON Array.\n-   #711 = NameAndType        #1019:#348   // back:()V\n-   #712 = NameAndType        #1020:#1021  // nextValue:()Ljava/lang/Object;\n-   #713 = NameAndType        #655:#656    // toString:()Ljava/lang/String;\n-   #714 = Utf8               Expected a \\':\\' after a key\n-   #715 = Utf8               java/lang/StringBuilder\n-   #716 = Utf8               Duplicate key \\\"\n-   #717 = NameAndType        #424:#1022   // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #718 = Utf8               \\\"\n-   #719 = NameAndType        #580:#423    // put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #720 = Utf8               Expected a \\',\\' or \\'}\\'\n-   #721 = NameAndType        #1023:#487   // size:()I\n-   #722 = NameAndType        #485:#483    // entrySet:()Ljava/util/Set;\n-   #723 = Class              #1010        // java/util/Set\n-   #724 = NameAndType        #1024:#480   // iterator:()Ljava/util/Iterator;\n-   #725 = Class              #1005        // java/util/Iterator\n-   #726 = NameAndType        #1025:#490   // hasNext:()Z\n-   #727 = NameAndType        #1026:#1021  // next:()Ljava/lang/Object;\n-   #728 = Utf8               java/util/Map$Entry\n-   #729 = NameAndType        #1027:#1021  // getKey:()Ljava/lang/Object;\n-   #730 = Utf8               java/lang/NullPointerException\n-   #731 = Utf8               Null key.\n-   #732 = NameAndType        #347:#401    // \"<init>\":(Ljava/lang/String;)V\n-   #733 = NameAndType        #1028:#1021  // getValue:()Ljava/lang/Object;\n-   #734 = NameAndType        #1029:#660   // valueOf:(Ljava/lang/Object;)Ljava/lang/String;\n-   #735 = NameAndType        #661:#662    // wrap:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #736 = NameAndType        #580:#1030   // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #737 = NameAndType        #542:#387    // populateMap:(Ljava/lang/Object;)V\n-   #738 = NameAndType        #542:#389    // populateMap:(Ljava/lang/Object;Ljava/util/Set;)V\n-   #739 = NameAndType        #896:#1031   // getClass:()Ljava/lang/Class;\n-   #740 = Class              #1006        // java/lang/Class\n-   #741 = NameAndType        #1032:#1033  // getField:(Ljava/lang/String;)Ljava/lang/reflect/Field;\n-   #742 = Class              #1034        // java/lang/reflect/Field\n-   #743 = NameAndType        #430:#662    // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #744 = NameAndType        #594:#423    // putOpt:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #745 = Utf8               org/json/JSONTokener\n-   #746 = NameAndType        #347:#363    // \"<init>\":(Lorg/json/JSONTokener;)V\n-   #747 = Class              #1035        // java/lang/Thread\n-   #748 = NameAndType        #1036:#1037  // currentThread:()Ljava/lang/Thread;\n-   #749 = NameAndType        #1038:#1039  // getContextClassLoader:()Ljava/lang/ClassLoader;\n-   #750 = Class              #1008        // java/util/ResourceBundle\n-   #751 = NameAndType        #1040:#1041  // getBundle:(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;\n-   #752 = NameAndType        #1042:#1043  // getKeys:()Ljava/util/Enumeration;\n-   #753 = Class              #1009        // java/util/Enumeration\n-   #754 = NameAndType        #1044:#490   // hasMoreElements:()Z\n-   #755 = NameAndType        #1045:#1021  // nextElement:()Ljava/lang/Object;\n-   #756 = Utf8               java/lang/String\n-   #757 = Utf8               \\\\.\n-   #758 = NameAndType        #1046:#1047  // split:(Ljava/lang/String;)[Ljava/lang/String;\n-   #759 = NameAndType        #533:#464    // optJSONObject:(Ljava/lang/String;)Lorg/json/JSONObject;\n-   #760 = Utf8               org/json/JSONObject\n-   #761 = NameAndType        #475:#476    // getString:(Ljava/lang/String;)Ljava/lang/String;\n-   #762 = NameAndType        #650:#387    // testValidity:(Ljava/lang/Object;)V\n-   #763 = Utf8               org/json/JSONArray\n-   #764 = NameAndType        #580:#1048   // put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n-   #765 = Utf8               JSONArray\n-   #766 = NameAndType        #688:#692    // wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-   #767 = NameAndType        #1049:#1050  // isInfinite:(D)Z\n-   #768 = NameAndType        #1051:#1050  // isNaN:(D)Z\n-   #769 = Utf8               null\n-   #770 = NameAndType        #655:#426    // toString:(D)Ljava/lang/String;\n-   #771 = NameAndType        #1052:#1053  // indexOf:(I)I\n-   #772 = Utf8               0\n-   #773 = NameAndType        #1054:#442   // endsWith:(Ljava/lang/String;)Z\n-   #774 = NameAndType        #473:#487    // length:()I\n-   #775 = NameAndType        #1055:#1056  // substring:(II)Ljava/lang/String;\n-   #776 = Utf8               .\n-   #777 = Utf8               org/json/JSONException\n-   #778 = Utf8               JSONObject[\n-   #779 = NameAndType        #602:#476    // quote:(Ljava/lang/String;)Ljava/lang/String;\n-   #780 = Utf8               ] not found.\n-   #781 = NameAndType        #497:#433    // optEnum:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-   #782 = Utf8               enum of type\n-   #783 = NameAndType        #1057:#656   // getSimpleName:()Ljava/lang/String;\n-   #784 = NameAndType        #688:#689    // wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-   #785 = NameAndType        #430:#431    // get:(Ljava/lang/String;)Ljava/lang/Object;\n-   #786 = NameAndType        #1058:#1059  // FALSE:Ljava/lang/Boolean;\n-   #787 = NameAndType        #1060:#618   // equals:(Ljava/lang/Object;)Z\n-   #788 = Utf8               false\n-   #789 = NameAndType        #1061:#442   // equalsIgnoreCase:(Ljava/lang/String;)Z\n-   #790 = NameAndType        #1062:#1059  // TRUE:Ljava/lang/Boolean;\n-   #791 = Utf8               true\n-   #792 = Utf8               Boolean\n-   #793 = NameAndType        #517:#518    // objectToBigInteger:(Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #794 = Utf8               BigInteger\n-   #795 = NameAndType        #511:#512    // objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #796 = Utf8               BigDecimal\n-   #797 = Utf8               java/lang/Number\n-   #798 = NameAndType        #522:#1063   // doubleValue:()D\n-   #799 = NameAndType        #1064:#453   // parseDouble:(Ljava/lang/String;)D\n-   #800 = Utf8               double\n-   #801 = NameAndType        #527:#1065   // floatValue:()F\n-   #802 = NameAndType        #1066:#456   // parseFloat:(Ljava/lang/String;)F\n-   #803 = Utf8               float\n-   #804 = NameAndType        #637:#458    // stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n-   #805 = NameAndType        #1067:#487   // intValue:()I\n-   #806 = NameAndType        #1068:#460   // parseInt:(Ljava/lang/String;)I\n-   #807 = Utf8               int\n-   #808 = Utf8               JSONObject\n-   #809 = NameAndType        #1069:#1070  // longValue:()J\n-   #810 = NameAndType        #1071:#466   // parseLong:(Ljava/lang/String;)J\n-   #811 = Utf8               long\n-   #812 = NameAndType        #489:#490    // isEmpty:()Z\n-   #813 = NameAndType        #482:#483    // keySet:()Ljava/util/Set;\n-   #814 = NameAndType        #1072:#1073  // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-   #815 = NameAndType        #1074:#1075  // getFields:()[Ljava/lang/reflect/Field;\n-   #816 = NameAndType        #1076:#656   // getName:()Ljava/lang/String;\n-   #817 = NameAndType        #1077:#618   // containsKey:(Ljava/lang/Object;)Z\n-   #818 = NameAndType        #580:#589    // put:(Ljava/lang/String;I)Lorg/json/JSONObject;\n-   #819 = Utf8               java/lang/Integer\n-   #820 = Utf8               java/lang/Long\n-   #821 = NameAndType        #580:#590    // put:(Ljava/lang/String;J)Lorg/json/JSONObject;\n-   #822 = Utf8               java/math/BigInteger\n-   #823 = NameAndType        #1078:#446   // ONE:Ljava/math/BigInteger;\n-   #824 = NameAndType        #1079:#1080  // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #825 = Utf8               java/lang/Float\n-   #826 = NameAndType        #580:#588    // put:(Ljava/lang/String;F)Lorg/json/JSONObject;\n-   #827 = Utf8               java/lang/Double\n-   #828 = NameAndType        #580:#587    // put:(Ljava/lang/String;D)Lorg/json/JSONObject;\n-   #829 = Utf8               java/math/BigDecimal\n-   #830 = NameAndType        #1078:#450   // ONE:Ljava/math/BigDecimal;\n-   #831 = NameAndType        #1079:#1081  // add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #832 = Utf8               Unable to increment [\n-   #833 = Utf8               ].\n-   #834 = NameAndType        #345:#346    // NULL:Ljava/lang/Object;\n-   #835 = NameAndType        #488:#348    // clear:()V\n-   #836 = NameAndType        #347:#1082   // \"<init>\":(Ljava/util/Collection;)V\n-   #837 = Utf8               Null pointer\n-   #838 = NameAndType        #497:#498    // optEnum:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n-   #839 = NameAndType        #1083:#1084  // isAssignableFrom:(Ljava/lang/Class;)Z\n-   #840 = Utf8               java/lang/Enum\n-   #841 = NameAndType        #1029:#433   // valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-   #842 = Utf8               java/lang/IllegalArgumentException\n-   #843 = NameAndType        #506:#507    // optBoolean:(Ljava/lang/String;Z)Z\n-   #844 = Utf8               java/lang/Boolean\n-   #845 = NameAndType        #1085:#490   // booleanValue:()Z\n-   #846 = NameAndType        #441:#442    // getBoolean:(Ljava/lang/String;)Z\n-   #847 = NameAndType        #511:#513    // objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;Z)Ljava/math/BigDecimal;\n-   #848 = NameAndType        #347:#1086   // \"<init>\":(Ljava/math/BigInteger;)V\n-   #849 = NameAndType        #633:#634    // numberIsFinite:(Ljava/lang/Number;)Z\n-   #850 = NameAndType        #347:#1087   // \"<init>\":(D)V\n-   #851 = Utf8               java/lang/Short\n-   #852 = Utf8               java/lang/Byte\n-   #853 = NameAndType        #347:#1088   // \"<init>\":(J)V\n-   #854 = NameAndType        #1089:#1090  // toBigInteger:()Ljava/math/BigInteger;\n-   #855 = NameAndType        #1029:#1091  // valueOf:(J)Ljava/math/BigInteger;\n-   #856 = NameAndType        #636:#442    // isDecimalNotation:(Ljava/lang/String;)Z\n-   #857 = NameAndType        #520:#521    // optDouble:(Ljava/lang/String;D)D\n-   #858 = NameAndType        #538:#458    // optNumber:(Ljava/lang/String;)Ljava/lang/Number;\n-   #859 = NameAndType        #524:#525    // optFloat:(Ljava/lang/String;F)F\n-   #860 = NameAndType        #528:#529    // optInt:(Ljava/lang/String;I)I\n-   #861 = NameAndType        #538:#539    // optNumber:(Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;\n-   #862 = NameAndType        #533:#534    // optJSONObject:(Ljava/lang/String;Lorg/json/JSONObject;)Lorg/json/JSONObject;\n-   #863 = NameAndType        #535:#536    // optLong:(Ljava/lang/String;J)J\n-   #864 = Utf8\n-   #865 = NameAndType        #540:#541    // optString:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-   #866 = Utf8               java/util/IdentityHashMap\n-   #867 = Class              #1092        // java/util/Collections\n-   #868 = NameAndType        #1093:#1094  // newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;\n-   #869 = NameAndType        #1095:#1039  // getClassLoader:()Ljava/lang/ClassLoader;\n-   #870 = NameAndType        #1096:#1097  // getMethods:()[Ljava/lang/reflect/Method;\n-   #871 = NameAndType        #1098:#1097  // getDeclaredMethods:()[Ljava/lang/reflect/Method;\n-   #872 = Class              #1011        // java/lang/reflect/Method\n-   #873 = NameAndType        #1099:#487   // getModifiers:()I\n-   #874 = Class              #1100        // java/lang/reflect/Modifier\n-   #875 = NameAndType        #1101:#1102  // isPublic:(I)Z\n-   #876 = NameAndType        #1103:#1102  // isStatic:(I)Z\n-   #877 = NameAndType        #1104:#1105  // getParameterTypes:()[Ljava/lang/Class;\n-   #878 = NameAndType        #1106:#490   // isBridge:()Z\n-   #879 = NameAndType        #1107:#1031  // getReturnType:()Ljava/lang/Class;\n-   #880 = Class              #1108        // java/lang/Void\n-   #881 = NameAndType        #1109:#397   // TYPE:Ljava/lang/Class;\n-   #882 = NameAndType        #556:#442    // isValidMethodName:(Ljava/lang/String;)Z\n-   #883 = NameAndType        #557:#558    // getKeyNameFromMethod:(Ljava/lang/reflect/Method;)Ljava/lang/String;\n-   #884 = Utf8               java/lang/Object\n-   #885 = NameAndType        #1110:#1111  // invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n-   #886 = NameAndType        #1112:#618   // contains:(Ljava/lang/Object;)Z\n-   #887 = NameAndType        #693:#694    // recursivelyDefinedObjectException:(Ljava/lang/String;)Lorg/json/JSONException;\n-   #888 = NameAndType        #1079:#618   // add:(Ljava/lang/Object;)Z\n-   #889 = NameAndType        #661:#663    // wrap:(Ljava/lang/Object;Ljava/util/Set;)Ljava/lang/Object;\n-   #890 = NameAndType        #616:#618    // remove:(Ljava/lang/Object;)Z\n-   #891 = Utf8               java/io/Closeable\n-   #892 = NameAndType        #1113:#348   // close:()V\n-   #893 = Utf8               java/io/IOException\n-   #894 = Utf8               java/lang/IllegalAccessException\n-   #895 = Utf8               java/lang/reflect/InvocationTargetException\n-   #896 = Utf8               getClass\n-   #897 = Utf8               getDeclaringClass\n-   #898 = Utf8               org/json/JSONPropertyIgnore\n-   #899 = NameAndType        #576:#577    // getAnnotationDepth:(Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n-   #900 = Utf8               org/json/JSONPropertyName\n-   #901 = NameAndType        #564:#565    // getAnnotation:(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n-   #902 = NameAndType        #364:#656    // value:()Ljava/lang/String;\n-   #903 = NameAndType        #1114:#442   // startsWith:(Ljava/lang/String;)Z\n-   #904 = NameAndType        #1055:#657   // substring:(I)Ljava/lang/String;\n-   #905 = Utf8               is\n-   #906 = NameAndType        #1115:#1116  // charAt:(I)C\n-   #907 = NameAndType        #1117:#1118  // isLowerCase:(C)Z\n-   #908 = Class              #1007        // java/util/Locale\n-   #909 = NameAndType        #1119:#411   // ROOT:Ljava/util/Locale;\n-   #910 = NameAndType        #1120:#1121  // toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;\n-   #911 = NameAndType        #1122:#1118  // isUpperCase:(C)Z\n-   #912 = NameAndType        #1123:#1084  // isAnnotationPresent:(Ljava/lang/Class;)Z\n-   #913 = NameAndType        #564:#1124   // getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n-   #914 = NameAndType        #897:#1031   // getDeclaringClass:()Ljava/lang/Class;\n-   #915 = NameAndType        #1125:#1031  // getSuperclass:()Ljava/lang/Class;\n-   #916 = NameAndType        #1126:#1105  // getInterfaces:()[Ljava/lang/Class;\n-   #917 = NameAndType        #1127:#1128  // getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n-   #918 = Utf8               java/lang/SecurityException\n-   #919 = Utf8               java/lang/NoSuchMethodException\n-   #920 = NameAndType        #1029:#1129  // valueOf:(D)Ljava/lang/Double;\n-   #921 = NameAndType        #1029:#1130  // valueOf:(F)Ljava/lang/Float;\n-   #922 = NameAndType        #1029:#1131  // valueOf:(I)Ljava/lang/Integer;\n-   #923 = NameAndType        #1029:#1132  // valueOf:(J)Ljava/lang/Long;\n-   #924 = NameAndType        #347:#375    // \"<init>\":(Ljava/util/Map;)V\n-   #925 = NameAndType        #616:#431    // remove:(Ljava/lang/String;)Ljava/lang/Object;\n-   #926 = Utf8               org/json/JSONPointer\n-   #927 = NameAndType        #595:#597    // query:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n-   #928 = NameAndType        #1133:#662   // queryFrom:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #929 = NameAndType        #599:#597    // optQuery:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n-   #930 = Utf8               org/json/JSONPointerException\n-   #931 = Utf8               java/io/StringWriter\n-   #932 = NameAndType        #1134:#1135  // getBuffer:()Ljava/lang/StringBuffer;\n-   #933 = NameAndType        #602:#609    // quote:(Ljava/lang/String;Ljava/io/Writer;)Ljava/io/Writer;\n-   #934 = Utf8               \\\"\\\"\n-   #935 = Class              #1013        // java/io/Writer\n-   #936 = NameAndType        #672:#401    // write:(Ljava/lang/String;)V\n-   #937 = NameAndType        #672:#420    // write:(I)V\n-   #938 = Utf8               \\\\b\n-   #939 = Utf8               \\\\t\n-   #940 = Utf8               \\\\n\n-   #941 = Utf8               \\\\f\n-   #942 = Utf8               \\\\r\n-   #943 = Utf8               \\\\u\n-   #944 = NameAndType        #1136:#657   // toHexString:(I)Ljava/lang/String;\n-   #945 = Utf8               0000\n-   #946 = NameAndType        #672:#1137   // write:(Ljava/lang/String;II)V\n-   #947 = NameAndType        #616:#662    // remove:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #948 = NameAndType        #617:#618    // similar:(Ljava/lang/Object;)Z\n-   #949 = NameAndType        #626:#627    // isNumberSimilar:(Ljava/lang/Number;Ljava/lang/Number;)Z\n-   #950 = Utf8               java/lang/Throwable\n-   #951 = Utf8               java/lang/Comparable\n-   #952 = NameAndType        #628:#1138   // compareTo:(Ljava/lang/Object;)I\n-   #953 = NameAndType        #628:#1139   // compareTo:(Ljava/math/BigDecimal;)I\n-   #954 = NameAndType        #1049:#490   // isInfinite:()Z\n-   #955 = NameAndType        #1051:#490   // isNaN:()Z\n-   #956 = Utf8               -0\n-   #957 = NameAndType        #1140:#450   // ZERO:Ljava/math/BigDecimal;\n-   #958 = Utf8               java/lang/NumberFormatException\n-   #959 = NameAndType        #1029:#1141  // valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n-   #960 = Utf8               val [\n-   #961 = Utf8               ] is not a valid number.\n-   #962 = NameAndType        #1142:#487   // bitLength:()I\n-   #963 = Utf8               JSON does not allow non-finite numbers.\n-   #964 = NameAndType        #475:#657    // getString:(I)Ljava/lang/String;\n-   #965 = NameAndType        #655:#657    // toString:(I)Ljava/lang/String;\n-   #966 = NameAndType        #672:#680    // write:(Ljava/io/Writer;II)Ljava/io/Writer;\n-   #967 = Class              #1143        // org/json/JSONWriter\n-   #968 = NameAndType        #659:#660    // valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n-   #969 = Utf8               org/json/JSONString\n-   #970 = Utf8               java/lang/Character\n-   #971 = Utf8               java/util/Collection\n-   #972 = NameAndType        #1144:#490   // isArray:()Z\n-   #973 = NameAndType        #347:#387    // \"<init>\":(Ljava/lang/Object;)V\n-   #974 = Utf8               java/util/Map\n-   #975 = NameAndType        #1145:#1146  // getPackage:()Ljava/lang/Package;\n-   #976 = Class              #1014        // java/lang/Package\n-   #977 = Utf8               java.\n-   #978 = Utf8               javax.\n-   #979 = NameAndType        #347:#389    // \"<init>\":(Ljava/lang/Object;Ljava/util/Set;)V\n-   #980 = NameAndType        #1147:#656   // toJSONString:()Ljava/lang/String;\n-   #981 = NameAndType        #347:#1148   // \"<init>\":(Ljava/lang/Throwable;)V\n-   #982 = NameAndType        #492:#493    // numberToString:(Ljava/lang/Number;)Ljava/lang/String;\n-   #983 = NameAndType        #339:#340    // NUMBER_PATTERN:Ljava/util/regex/Pattern;\n-   #984 = Class              #1149        // java/util/regex/Pattern\n-   #985 = NameAndType        #1150:#1151  // matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-   #986 = Class              #1152        // java/util/regex/Matcher\n-   #987 = NameAndType        #1153:#490   // matches:()Z\n-   #988 = NameAndType        #395:#656    // name:()Ljava/lang/String;\n-   #989 = NameAndType        #675:#676    // writeValue:(Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n-   #990 = Utf8               Unable to write JSONObject value for key:\n-   #991 = NameAndType        #347:#1154   // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #992 = NameAndType        #678:#679    // indent:(Ljava/io/Writer;I)V\n-   #993 = NameAndType        #683:#684    // toMap:()Ljava/util/Map;\n-   #994 = NameAndType        #1155:#1156  // toList:()Ljava/util/List;\n-   #995 = Utf8               ] is not a\n-   #996 = Utf8                (\n-   #997 = NameAndType        #424:#1157   // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #998 = Utf8               ).\n-   #999 = Utf8               JavaBean object contains recursively defined member variable of key\n-  #1000 = Utf8               -?(?:0|[1-9]\\\\d*)(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?\n-  #1001 = NameAndType        #1158:#1159  // compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n-  #1002 = Utf8               org/json/JSONObject$Null\n-  #1003 = NameAndType        #347:#1160   // \"<init>\":(Lorg/json/JSONObject$1;)V\n-  #1004 = Utf8               org/json/JSONObject$1\n-  #1005 = Utf8               java/util/Iterator\n-  #1006 = Utf8               java/lang/Class\n-  #1007 = Utf8               java/util/Locale\n-  #1008 = Utf8               java/util/ResourceBundle\n-  #1009 = Utf8               java/util/Enumeration\n-  #1010 = Utf8               java/util/Set\n-  #1011 = Utf8               java/lang/reflect/Method\n-  #1012 = Utf8               [Ljava/lang/Class;\n-  #1013 = Utf8               java/io/Writer\n-  #1014 = Utf8               java/lang/Package\n-  #1015 = Utf8               nextClean\n-  #1016 = Utf8               ()C\n-  #1017 = Utf8               syntaxError\n-  #1018 = Utf8               getPrevious\n-  #1019 = Utf8               back\n-  #1020 = Utf8               nextValue\n-  #1021 = Utf8               ()Ljava/lang/Object;\n-  #1022 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #1023 = Utf8               size\n-  #1024 = Utf8               iterator\n-  #1025 = Utf8               hasNext\n-  #1026 = Utf8               next\n-  #1027 = Utf8               getKey\n-  #1028 = Utf8               getValue\n-  #1029 = Utf8               valueOf\n-  #1030 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #1031 = Utf8               ()Ljava/lang/Class;\n-  #1032 = Utf8               getField\n-  #1033 = Utf8               (Ljava/lang/String;)Ljava/lang/reflect/Field;\n-  #1034 = Utf8               java/lang/reflect/Field\n-  #1035 = Utf8               java/lang/Thread\n-  #1036 = Utf8               currentThread\n-  #1037 = Utf8               ()Ljava/lang/Thread;\n-  #1038 = Utf8               getContextClassLoader\n-  #1039 = Utf8               ()Ljava/lang/ClassLoader;\n-  #1040 = Utf8               getBundle\n-  #1041 = Utf8               (Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;\n-  #1042 = Utf8               getKeys\n-  #1043 = Utf8               ()Ljava/util/Enumeration;\n-  #1044 = Utf8               hasMoreElements\n-  #1045 = Utf8               nextElement\n-  #1046 = Utf8               split\n-  #1047 = Utf8               (Ljava/lang/String;)[Ljava/lang/String;\n-  #1048 = Utf8               (Ljava/lang/Object;)Lorg/json/JSONArray;\n-  #1049 = Utf8               isInfinite\n-  #1050 = Utf8               (D)Z\n-  #1051 = Utf8               isNaN\n-  #1052 = Utf8               indexOf\n-  #1053 = Utf8               (I)I\n-  #1054 = Utf8               endsWith\n-  #1055 = Utf8               substring\n-  #1056 = Utf8               (II)Ljava/lang/String;\n-  #1057 = Utf8               getSimpleName\n-  #1058 = Utf8               FALSE\n-  #1059 = Utf8               Ljava/lang/Boolean;\n-  #1060 = Utf8               equals\n-  #1061 = Utf8               equalsIgnoreCase\n-  #1062 = Utf8               TRUE\n-  #1063 = Utf8               ()D\n-  #1064 = Utf8               parseDouble\n-  #1065 = Utf8               ()F\n-  #1066 = Utf8               parseFloat\n-  #1067 = Utf8               intValue\n-  #1068 = Utf8               parseInt\n-  #1069 = Utf8               longValue\n-  #1070 = Utf8               ()J\n-  #1071 = Utf8               parseLong\n-  #1072 = Utf8               toArray\n-  #1073 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #1074 = Utf8               getFields\n-  #1075 = Utf8               ()[Ljava/lang/reflect/Field;\n-  #1076 = Utf8               getName\n-  #1077 = Utf8               containsKey\n-  #1078 = Utf8               ONE\n-  #1079 = Utf8               add\n-  #1080 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #1081 = Utf8               (Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-  #1082 = Utf8               (Ljava/util/Collection;)V\n-  #1083 = Utf8               isAssignableFrom\n-  #1084 = Utf8               (Ljava/lang/Class;)Z\n-  #1085 = Utf8               booleanValue\n-  #1086 = Utf8               (Ljava/math/BigInteger;)V\n-  #1087 = Utf8               (D)V\n-  #1088 = Utf8               (J)V\n-  #1089 = Utf8               toBigInteger\n-  #1090 = Utf8               ()Ljava/math/BigInteger;\n-  #1091 = Utf8               (J)Ljava/math/BigInteger;\n-  #1092 = Utf8               java/util/Collections\n-  #1093 = Utf8               newSetFromMap\n-  #1094 = Utf8               (Ljava/util/Map;)Ljava/util/Set;\n-  #1095 = Utf8               getClassLoader\n-  #1096 = Utf8               getMethods\n-  #1097 = Utf8               ()[Ljava/lang/reflect/Method;\n-  #1098 = Utf8               getDeclaredMethods\n-  #1099 = Utf8               getModifiers\n-  #1100 = Utf8               java/lang/reflect/Modifier\n-  #1101 = Utf8               isPublic\n-  #1102 = Utf8               (I)Z\n-  #1103 = Utf8               isStatic\n-  #1104 = Utf8               getParameterTypes\n-  #1105 = Utf8               ()[Ljava/lang/Class;\n-  #1106 = Utf8               isBridge\n-  #1107 = Utf8               getReturnType\n-  #1108 = Utf8               java/lang/Void\n-  #1109 = Utf8               TYPE\n-  #1110 = Utf8               invoke\n-  #1111 = Utf8               (Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n-  #1112 = Utf8               contains\n-  #1113 = Utf8               close\n-  #1114 = Utf8               startsWith\n-  #1115 = Utf8               charAt\n-  #1116 = Utf8               (I)C\n-  #1117 = Utf8               isLowerCase\n-  #1118 = Utf8               (C)Z\n-  #1119 = Utf8               ROOT\n-  #1120 = Utf8               toLowerCase\n-  #1121 = Utf8               (Ljava/util/Locale;)Ljava/lang/String;\n-  #1122 = Utf8               isUpperCase\n-  #1123 = Utf8               isAnnotationPresent\n-  #1124 = Utf8               (Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n-  #1125 = Utf8               getSuperclass\n-  #1126 = Utf8               getInterfaces\n-  #1127 = Utf8               getMethod\n-  #1128 = Utf8               (Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n-  #1129 = Utf8               (D)Ljava/lang/Double;\n-  #1130 = Utf8               (F)Ljava/lang/Float;\n-  #1131 = Utf8               (I)Ljava/lang/Integer;\n-  #1132 = Utf8               (J)Ljava/lang/Long;\n-  #1133 = Utf8               queryFrom\n-  #1134 = Utf8               getBuffer\n-  #1135 = Utf8               ()Ljava/lang/StringBuffer;\n-  #1136 = Utf8               toHexString\n-  #1137 = Utf8               (Ljava/lang/String;II)V\n-  #1138 = Utf8               (Ljava/lang/Object;)I\n-  #1139 = Utf8               (Ljava/math/BigDecimal;)I\n-  #1140 = Utf8               ZERO\n-  #1141 = Utf8               (Ljava/lang/String;)Ljava/lang/Double;\n-  #1142 = Utf8               bitLength\n-  #1143 = Utf8               org/json/JSONWriter\n-  #1144 = Utf8               isArray\n-  #1145 = Utf8               getPackage\n-  #1146 = Utf8               ()Ljava/lang/Package;\n-  #1147 = Utf8               toJSONString\n-  #1148 = Utf8               (Ljava/lang/Throwable;)V\n-  #1149 = Utf8               java/util/regex/Pattern\n-  #1150 = Utf8               matcher\n-  #1151 = Utf8               (Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-  #1152 = Utf8               java/util/regex/Matcher\n-  #1153 = Utf8               matches\n-  #1154 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #1155 = Utf8               toList\n-  #1156 = Utf8               ()Ljava/util/List;\n-  #1157 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #1158 = Utf8               compile\n-  #1159 = Utf8               (Ljava/lang/String;)Ljava/util/regex/Pattern;\n-  #1160 = Utf8               (Lorg/json/JSONObject$1;)V\n+   #361 = Utf8               (Lorg/json/JSONTokener;)V\n+   #362 = Utf8               value\n+   #363 = Utf8               prev\n+   #364 = Utf8               C\n+   #365 = Utf8               x\n+   #366 = Utf8               Lorg/json/JSONTokener;\n+   #367 = Utf8               c\n+   #368 = Utf8               key\n+   #369 = Utf8               Ljava/lang/String;\n+   #370 = Utf8               Exceptions\n+   #371 = Utf8               (Ljava/util/Map;)V\n+   #372 = Utf8               e\n+   #373 = Utf8               Entry\n+   #374 = Utf8               Ljava/util/Map$Entry;\n+   #375 = Utf8               m\n+   #376 = Utf8               LocalVariableTypeTable\n+   #377 = Utf8               Ljava/util/Map$Entry<**>;\n+   #378 = Utf8               Ljava/util/Map<**>;\n+   #379 = Class              #969         // java/util/Iterator\n+   #380 = Utf8               (Ljava/util/Map<**>;)V\n+   #381 = Utf8               (Ljava/lang/Object;)V\n+   #382 = Utf8               bean\n+   #383 = Utf8               (Ljava/lang/Object;Ljava/util/Set;)V\n+   #384 = Utf8               objectsRecord\n+   #385 = Utf8               Ljava/util/Set;\n+   #386 = Utf8               Ljava/util/Set<Ljava/lang/Object;>;\n+   #387 = Utf8               (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)V\n+   #388 = Utf8               (Ljava/lang/Object;[Ljava/lang/String;)V\n+   #389 = Utf8               name\n+   #390 = Utf8               object\n+   #391 = Utf8               Ljava/lang/Class;\n+   #392 = Utf8               Ljava/lang/Class<*>;\n+   #393 = Class              #970         // java/lang/Class\n+   #394 = Utf8               (Ljava/lang/String;)V\n+   #395 = Utf8               source\n+   #396 = Utf8               (Ljava/lang/String;Ljava/util/Locale;)V\n+   #397 = Utf8               segment\n+   #398 = Utf8               nextTarget\n+   #399 = Utf8               path\n+   #400 = Utf8               last\n+   #401 = Utf8               target\n+   #402 = Utf8               baseName\n+   #403 = Utf8               locale\n+   #404 = Utf8               Ljava/util/Locale;\n+   #405 = Utf8               bundle\n+   #406 = Utf8               Ljava/util/ResourceBundle;\n+   #407 = Utf8               keys\n+   #408 = Utf8               Ljava/util/Enumeration;\n+   #409 = Utf8               Ljava/util/Enumeration<Ljava/lang/String;>;\n+   #410 = Class              #971         // java/util/Locale\n+   #411 = Class              #972         // java/util/ResourceBundle\n+   #412 = Class              #973         // java/util/Enumeration\n+   #413 = Utf8               (I)V\n+   #414 = Utf8               initialCapacity\n+   #415 = Utf8               accumulate\n+   #416 = Utf8               (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #417 = Utf8               append\n+   #418 = Utf8               doubleToString\n+   #419 = Utf8               (D)Ljava/lang/String;\n+   #420 = Utf8               d\n+   #421 = Utf8               D\n+   #422 = Utf8               string\n+   #423 = Utf8               get\n+   #424 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n+   #425 = Utf8               getEnum\n+   #426 = Utf8               (Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+   #427 = Utf8               clazz\n+   #428 = Utf8               val\n+   #429 = Utf8               Ljava/lang/Enum;\n+   #430 = Utf8               Ljava/lang/Class<TE;>;\n+   #431 = Utf8               TE;\n+   #432 = Utf8               <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;)TE;\n+   #433 = Utf8               getBoolean\n+   #434 = Utf8               (Ljava/lang/String;)Z\n+   #435 = Utf8               getBigInteger\n+   #436 = Utf8               (Ljava/lang/String;)Ljava/math/BigInteger;\n+   #437 = Utf8               ret\n+   #438 = Utf8               Ljava/math/BigInteger;\n+   #439 = Utf8               getBigDecimal\n+   #440 = Utf8               (Ljava/lang/String;)Ljava/math/BigDecimal;\n+   #441 = Utf8               Ljava/math/BigDecimal;\n+   #442 = Utf8               getDouble\n+   #443 = Utf8               (Ljava/lang/String;)D\n+   #444 = Utf8               Ljava/lang/Exception;\n+   #445 = Utf8               getFloat\n+   #446 = Utf8               (Ljava/lang/String;)F\n+   #447 = Utf8               getNumber\n+   #448 = Utf8               (Ljava/lang/String;)Ljava/lang/Number;\n+   #449 = Utf8               getInt\n+   #450 = Utf8               (Ljava/lang/String;)I\n+   #451 = Utf8               getJSONArray\n+   #452 = Utf8               (Ljava/lang/String;)Lorg/json/JSONArray;\n+   #453 = Utf8               getJSONObject\n+   #454 = Utf8               (Ljava/lang/String;)Lorg/json/JSONObject;\n+   #455 = Utf8               getLong\n+   #456 = Utf8               (Ljava/lang/String;)J\n+   #457 = Utf8               getNames\n+   #458 = Utf8               (Lorg/json/JSONObject;)[Ljava/lang/String;\n+   #459 = Utf8               (Ljava/lang/Object;)[Ljava/lang/String;\n+   #460 = Utf8               klass\n+   #461 = Utf8               fields\n+   #462 = Utf8               [Ljava/lang/reflect/Field;\n+   #463 = Utf8               length\n+   #464 = Class              #462         // \"[Ljava/lang/reflect/Field;\"\n+   #465 = Utf8               getString\n+   #466 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+   #467 = Utf8               has\n+   #468 = Utf8               increment\n+   #469 = Utf8               isNull\n+   #470 = Utf8               ()Ljava/util/Iterator;\n+   #471 = Utf8               ()Ljava/util/Iterator<Ljava/lang/String;>;\n+   #472 = Utf8               keySet\n+   #473 = Utf8               ()Ljava/util/Set;\n+   #474 = Utf8               ()Ljava/util/Set<Ljava/lang/String;>;\n+   #475 = Utf8               entrySet\n+   #476 = Utf8               ()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;>;\n+   #477 = Utf8               ()I\n+   #478 = Utf8               clear\n+   #479 = Utf8               isEmpty\n+   #480 = Utf8               ()Z\n+   #481 = Utf8               ()Lorg/json/JSONArray;\n+   #482 = Utf8               numberToString\n+   #483 = Utf8               (Ljava/lang/Number;)Ljava/lang/String;\n+   #484 = Utf8               number\n+   #485 = Utf8               Ljava/lang/Number;\n+   #486 = Utf8               opt\n+   #487 = Utf8               optEnum\n+   #488 = Utf8               (Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n+   #489 = Utf8               myE\n+   #490 = Utf8               Ljava/lang/IllegalArgumentException;\n+   #491 = Utf8               Ljava/lang/NullPointerException;\n+   #492 = Utf8               defaultValue\n+   #493 = Utf8               <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;TE;)TE;\n+   #494 = Utf8               optBoolean\n+   #495 = Utf8               (Ljava/lang/String;Z)Z\n+   #496 = Utf8               Z\n+   #497 = Utf8               optBigDecimal\n+   #498 = Utf8               (Ljava/lang/String;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+   #499 = Utf8               objectToBigDecimal\n+   #500 = Utf8               (Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+   #501 = Utf8               (Ljava/lang/Object;Ljava/math/BigDecimal;Z)Ljava/math/BigDecimal;\n+   #502 = Utf8               exact\n+   #503 = Utf8               optBigInteger\n+   #504 = Utf8               (Ljava/lang/String;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #505 = Utf8               objectToBigInteger\n+   #506 = Utf8               (Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #507 = Utf8               valStr\n+   #508 = Utf8               optDouble\n+   #509 = Utf8               (Ljava/lang/String;D)D\n+   #510 = Utf8               doubleValue\n+   #511 = Utf8               optFloat\n+   #512 = Utf8               (Ljava/lang/String;F)F\n+   #513 = Utf8               F\n+   #514 = Utf8               floatValue\n+   #515 = Utf8               optInt\n+   #516 = Utf8               (Ljava/lang/String;I)I\n+   #517 = Utf8               optJSONArray\n+   #518 = Utf8               o\n+   #519 = Utf8               optJSONObject\n+   #520 = Utf8               (Ljava/lang/String;Lorg/json/JSONObject;)Lorg/json/JSONObject;\n+   #521 = Utf8               optLong\n+   #522 = Utf8               (Ljava/lang/String;J)J\n+   #523 = Utf8               J\n+   #524 = Utf8               optNumber\n+   #525 = Utf8               (Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;\n+   #526 = Utf8               optString\n+   #527 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+   #528 = Utf8               populateMap\n+   #529 = Utf8               result\n+   #530 = Utf8               modifiers\n+   #531 = Utf8               method\n+   #532 = Utf8               Ljava/lang/reflect/Method;\n+   #533 = Utf8               includeSuperClass\n+   #534 = Utf8               methods\n+   #535 = Utf8               [Ljava/lang/reflect/Method;\n+   #536 = Class              #535         // \"[Ljava/lang/reflect/Method;\"\n+   #537 = Class              #974         // java/util/Set\n+   #538 = Class              #975         // java/lang/reflect/Method\n+   #539 = Utf8               isValidMethodName\n+   #540 = Utf8               getKeyNameFromMethod\n+   #541 = Utf8               (Ljava/lang/reflect/Method;)Ljava/lang/String;\n+   #542 = Utf8               forcedNameDepth\n+   #543 = Utf8               ignoreDepth\n+   #544 = Utf8               annotation\n+   #545 = Utf8               Lorg/json/JSONPropertyName;\n+   #546 = Utf8               getAnnotation\n+   #547 = Utf8               (Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n+   #548 = Utf8               im\n+   #549 = Utf8               ex\n+   #550 = Utf8               Ljava/lang/SecurityException;\n+   #551 = Utf8               Ljava/lang/NoSuchMethodException;\n+   #552 = Utf8               annotationClass\n+   #553 = Utf8               Ljava/lang/Class<TA;>;\n+   #554 = Class              #976         // \"[Ljava/lang/Class;\"\n+   #555 = Utf8               <A::Ljava/lang/annotation/Annotation;>(Ljava/lang/reflect/Method;Ljava/lang/Class<TA;>;)TA;\n+   #556 = Utf8               getAnnotationDepth\n+   #557 = Utf8               (Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n+   #558 = Utf8               Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;\n+   #559 = Utf8               (Ljava/lang/reflect/Method;Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)I\n+   #560 = Utf8               put\n+   #561 = Utf8               (Ljava/lang/String;Z)Lorg/json/JSONObject;\n+   #562 = Utf8               (Ljava/lang/String;Ljava/util/Collection;)Lorg/json/JSONObject;\n+   #563 = Utf8               Ljava/util/Collection;\n+   #564 = Utf8               Ljava/util/Collection<*>;\n+   #565 = Utf8               (Ljava/lang/String;Ljava/util/Collection<*>;)Lorg/json/JSONObject;\n+   #566 = Utf8               (Ljava/lang/String;D)Lorg/json/JSONObject;\n+   #567 = Utf8               (Ljava/lang/String;F)Lorg/json/JSONObject;\n+   #568 = Utf8               (Ljava/lang/String;I)Lorg/json/JSONObject;\n+   #569 = Utf8               (Ljava/lang/String;J)Lorg/json/JSONObject;\n+   #570 = Utf8               (Ljava/lang/String;Ljava/util/Map;)Lorg/json/JSONObject;\n+   #571 = Utf8               (Ljava/lang/String;Ljava/util/Map<**>;)Lorg/json/JSONObject;\n+   #572 = Utf8               putOnce\n+   #573 = Utf8               putOpt\n+   #574 = Utf8               query\n+   #575 = Utf8               jsonPointer\n+   #576 = Utf8               (Lorg/json/JSONPointer;)Ljava/lang/Object;\n+   #577 = Utf8               Lorg/json/JSONPointer;\n+   #578 = Utf8               optQuery\n+   #579 = Utf8               Lorg/json/JSONPointerException;\n+   #580 = Utf8               quote\n+   #581 = Utf8               ignored\n+   #582 = Utf8               Ljava/io/IOException;\n+   #583 = Utf8               sw\n+   #584 = Utf8               Ljava/io/StringWriter;\n+   #585 = Utf8               (Ljava/lang/String;Ljava/io/Writer;)Ljava/io/Writer;\n+   #586 = Utf8               hhhh\n+   #587 = Utf8               b\n+   #588 = Utf8               w\n+   #589 = Utf8               Ljava/io/Writer;\n+   #590 = Utf8               len\n+   #591 = Class              #977         // java/io/Writer\n+   #592 = Utf8               remove\n+   #593 = Utf8               similar\n+   #594 = Utf8               (Ljava/lang/Object;)Z\n+   #595 = Utf8               valueThis\n+   #596 = Utf8               valueOther\n+   #597 = Utf8               entry\n+   #598 = Utf8               exception\n+   #599 = Utf8               Ljava/lang/Throwable;\n+   #600 = Utf8               other\n+   #601 = Utf8               Ljava/util/Map$Entry<Ljava/lang/String;*>;\n+   #602 = Utf8               isNumberSimilar\n+   #603 = Utf8               (Ljava/lang/Number;Ljava/lang/Number;)Z\n+   #604 = Utf8               compareTo\n+   #605 = Utf8               l\n+   #606 = Utf8               r\n+   #607 = Utf8               lBigDecimal\n+   #608 = Utf8               rBigDecimal\n+   #609 = Utf8               numberIsFinite\n+   #610 = Utf8               (Ljava/lang/Number;)Z\n+   #611 = Utf8               n\n+   #612 = Utf8               isDecimalNotation\n+   #613 = Utf8               stringToNumber\n+   #614 = Utf8               bd\n+   #615 = Utf8               Ljava/lang/Double;\n+   #616 = Utf8               ignore\n+   #617 = Utf8               Ljava/lang/NumberFormatException;\n+   #618 = Utf8               retryAsDouble\n+   #619 = Utf8               at1\n+   #620 = Utf8               at2\n+   #621 = Utf8               bi\n+   #622 = Utf8               initial\n+   #623 = Utf8               stringToValue\n+   #624 = Utf8               testValidity\n+   #625 = Utf8               toJSONArray\n+   #626 = Utf8               (Lorg/json/JSONArray;)Lorg/json/JSONArray;\n+   #627 = Utf8               Lorg/json/JSONArray;\n+   #628 = Utf8               ja\n+   #629 = Utf8               toString\n+   #630 = Utf8               ()Ljava/lang/String;\n+   #631 = Utf8               (I)Ljava/lang/String;\n+   #632 = Utf8               indentFactor\n+   #633 = Utf8               valueToString\n+   #634 = Utf8               (Ljava/lang/Object;)Ljava/lang/String;\n+   #635 = Utf8               wrap\n+   #636 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+   #637 = Utf8               (Ljava/lang/Object;Ljava/util/Set;)Ljava/lang/Object;\n+   #638 = Utf8               coll\n+   #639 = Utf8               objectPackage\n+   #640 = Utf8               Ljava/lang/Package;\n+   #641 = Utf8               objectPackageName\n+   #642 = Utf8               Lorg/json/JSONException;\n+   #643 = Class              #978         // java/lang/Package\n+   #644 = Utf8               (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)Ljava/lang/Object;\n+   #645 = Utf8               write\n+   #646 = Utf8               (Ljava/io/Writer;)Ljava/io/Writer;\n+   #647 = Utf8               writer\n+   #648 = Utf8               writeValue\n+   #649 = Utf8               (Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n+   #650 = Utf8               numberAsString\n+   #651 = Utf8               indent\n+   #652 = Utf8               (Ljava/io/Writer;I)V\n+   #653 = Utf8               (Ljava/io/Writer;II)Ljava/io/Writer;\n+   #654 = Utf8               newIndent\n+   #655 = Utf8               needsComma\n+   #656 = Utf8               toMap\n+   #657 = Utf8               ()Ljava/util/Map;\n+   #658 = Utf8               results\n+   #659 = Utf8               Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;\n+   #660 = Utf8               ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;\n+   #661 = Utf8               wrongValueFormatException\n+   #662 = Utf8               (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+   #663 = Utf8               valueType\n+   #664 = Utf8               cause\n+   #665 = Utf8               (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+   #666 = Utf8               recursivelyDefinedObjectException\n+   #667 = Utf8               (Ljava/lang/String;)Lorg/json/JSONException;\n+   #668 = Utf8               <clinit>\n+   #669 = Utf8               SourceFile\n+   #670 = Utf8               JSONObject.java\n+   #671 = NameAndType        #347:#348    // \"<init>\":()V\n+   #672 = Utf8               java/util/HashMap\n+   #673 = NameAndType        #341:#342    // map:Ljava/util/Map;\n+   #674 = NameAndType        #347:#413    // \"<init>\":(I)V\n+   #675 = NameAndType        #486:#424    // opt:(Ljava/lang/String;)Ljava/lang/Object;\n+   #676 = NameAndType        #572:#416    // putOnce:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #677 = Utf8               java/lang/Exception\n+   #678 = NameAndType        #979:#980    // nextClean:()C\n+   #679 = Utf8               A JSONObject text must begin with \\'{\\'\n+   #680 = NameAndType        #981:#667    // syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n+   #681 = NameAndType        #982:#980    // getPrevious:()C\n+   #682 = Utf8               A JSONObject text must end with \\'}\\'\n+   #683 = Utf8               A JSON Object can not directly nest another JSON Object or JSON Array.\n+   #684 = NameAndType        #983:#348    // back:()V\n+   #685 = NameAndType        #984:#985    // nextValue:()Ljava/lang/Object;\n+   #686 = NameAndType        #629:#630    // toString:()Ljava/lang/String;\n+   #687 = Utf8               Expected a \\':\\' after a key\n+   #688 = Utf8               java/lang/StringBuilder\n+   #689 = Utf8               Duplicate key \\\"\n+   #690 = NameAndType        #417:#986    // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #691 = Utf8               \\\"\n+   #692 = NameAndType        #560:#416    // put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #693 = Utf8               Expected a \\',\\' or \\'}\\'\n+   #694 = NameAndType        #987:#477    // size:()I\n+   #695 = NameAndType        #475:#473    // entrySet:()Ljava/util/Set;\n+   #696 = NameAndType        #988:#470    // iterator:()Ljava/util/Iterator;\n+   #697 = NameAndType        #989:#480    // hasNext:()Z\n+   #698 = NameAndType        #990:#985    // next:()Ljava/lang/Object;\n+   #699 = Utf8               java/util/Map$Entry\n+   #700 = NameAndType        #991:#985    // getKey:()Ljava/lang/Object;\n+   #701 = Utf8               java/lang/NullPointerException\n+   #702 = Utf8               Null key.\n+   #703 = NameAndType        #347:#394    // \"<init>\":(Ljava/lang/String;)V\n+   #704 = NameAndType        #992:#985    // getValue:()Ljava/lang/Object;\n+   #705 = NameAndType        #993:#634    // valueOf:(Ljava/lang/Object;)Ljava/lang/String;\n+   #706 = NameAndType        #635:#636    // wrap:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #707 = NameAndType        #560:#994    // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #708 = NameAndType        #528:#381    // populateMap:(Ljava/lang/Object;)V\n+   #709 = NameAndType        #528:#383    // populateMap:(Ljava/lang/Object;Ljava/util/Set;)V\n+   #710 = NameAndType        #863:#995    // getClass:()Ljava/lang/Class;\n+   #711 = NameAndType        #996:#997    // getField:(Ljava/lang/String;)Ljava/lang/reflect/Field;\n+   #712 = Class              #998         // java/lang/reflect/Field\n+   #713 = NameAndType        #423:#636    // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #714 = NameAndType        #573:#416    // putOpt:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #715 = Utf8               org/json/JSONTokener\n+   #716 = NameAndType        #347:#361    // \"<init>\":(Lorg/json/JSONTokener;)V\n+   #717 = Class              #999         // java/lang/Thread\n+   #718 = NameAndType        #1000:#1001  // currentThread:()Ljava/lang/Thread;\n+   #719 = NameAndType        #1002:#1003  // getContextClassLoader:()Ljava/lang/ClassLoader;\n+   #720 = NameAndType        #1004:#1005  // getBundle:(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;\n+   #721 = NameAndType        #1006:#1007  // getKeys:()Ljava/util/Enumeration;\n+   #722 = NameAndType        #1008:#480   // hasMoreElements:()Z\n+   #723 = NameAndType        #1009:#985   // nextElement:()Ljava/lang/Object;\n+   #724 = Utf8               java/lang/String\n+   #725 = Utf8               \\\\.\n+   #726 = NameAndType        #1010:#1011  // split:(Ljava/lang/String;)[Ljava/lang/String;\n+   #727 = NameAndType        #519:#454    // optJSONObject:(Ljava/lang/String;)Lorg/json/JSONObject;\n+   #728 = Utf8               org/json/JSONObject\n+   #729 = NameAndType        #465:#466    // getString:(Ljava/lang/String;)Ljava/lang/String;\n+   #730 = NameAndType        #624:#381    // testValidity:(Ljava/lang/Object;)V\n+   #731 = Utf8               org/json/JSONArray\n+   #732 = NameAndType        #560:#1012   // put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n+   #733 = Utf8               JSONArray\n+   #734 = NameAndType        #661:#665    // wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+   #735 = NameAndType        #1013:#1014  // isInfinite:(D)Z\n+   #736 = NameAndType        #1015:#1014  // isNaN:(D)Z\n+   #737 = Utf8               null\n+   #738 = NameAndType        #629:#419    // toString:(D)Ljava/lang/String;\n+   #739 = NameAndType        #1016:#1017  // indexOf:(I)I\n+   #740 = Utf8               0\n+   #741 = NameAndType        #1018:#434   // endsWith:(Ljava/lang/String;)Z\n+   #742 = NameAndType        #463:#477    // length:()I\n+   #743 = NameAndType        #1019:#1020  // substring:(II)Ljava/lang/String;\n+   #744 = Utf8               .\n+   #745 = Utf8               org/json/JSONException\n+   #746 = Utf8               JSONObject[\n+   #747 = NameAndType        #580:#466    // quote:(Ljava/lang/String;)Ljava/lang/String;\n+   #748 = Utf8               ] not found.\n+   #749 = NameAndType        #487:#426    // optEnum:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+   #750 = Utf8               enum of type\n+   #751 = NameAndType        #1021:#630   // getSimpleName:()Ljava/lang/String;\n+   #752 = NameAndType        #661:#662    // wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+   #753 = NameAndType        #423:#424    // get:(Ljava/lang/String;)Ljava/lang/Object;\n+   #754 = NameAndType        #1022:#1023  // FALSE:Ljava/lang/Boolean;\n+   #755 = NameAndType        #1024:#594   // equals:(Ljava/lang/Object;)Z\n+   #756 = Utf8               false\n+   #757 = NameAndType        #1025:#434   // equalsIgnoreCase:(Ljava/lang/String;)Z\n+   #758 = NameAndType        #1026:#1023  // TRUE:Ljava/lang/Boolean;\n+   #759 = Utf8               true\n+   #760 = Utf8               Boolean\n+   #761 = NameAndType        #505:#506    // objectToBigInteger:(Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #762 = Utf8               BigInteger\n+   #763 = NameAndType        #499:#500    // objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+   #764 = Utf8               BigDecimal\n+   #765 = Utf8               java/lang/Number\n+   #766 = NameAndType        #510:#1027   // doubleValue:()D\n+   #767 = NameAndType        #1028:#443   // parseDouble:(Ljava/lang/String;)D\n+   #768 = Utf8               double\n+   #769 = NameAndType        #514:#1029   // floatValue:()F\n+   #770 = NameAndType        #1030:#446   // parseFloat:(Ljava/lang/String;)F\n+   #771 = Utf8               float\n+   #772 = NameAndType        #613:#448    // stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+   #773 = NameAndType        #1031:#477   // intValue:()I\n+   #774 = NameAndType        #1032:#450   // parseInt:(Ljava/lang/String;)I\n+   #775 = Utf8               int\n+   #776 = Utf8               JSONObject\n+   #777 = NameAndType        #1033:#1034  // longValue:()J\n+   #778 = NameAndType        #1035:#456   // parseLong:(Ljava/lang/String;)J\n+   #779 = Utf8               long\n+   #780 = NameAndType        #479:#480    // isEmpty:()Z\n+   #781 = NameAndType        #472:#473    // keySet:()Ljava/util/Set;\n+   #782 = NameAndType        #1036:#1037  // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+   #783 = NameAndType        #1038:#1039  // getFields:()[Ljava/lang/reflect/Field;\n+   #784 = NameAndType        #1040:#630   // getName:()Ljava/lang/String;\n+   #785 = NameAndType        #1041:#594   // containsKey:(Ljava/lang/Object;)Z\n+   #786 = NameAndType        #560:#568    // put:(Ljava/lang/String;I)Lorg/json/JSONObject;\n+   #787 = Utf8               java/lang/Integer\n+   #788 = Utf8               java/lang/Long\n+   #789 = NameAndType        #560:#569    // put:(Ljava/lang/String;J)Lorg/json/JSONObject;\n+   #790 = Utf8               java/math/BigInteger\n+   #791 = NameAndType        #1042:#438   // ONE:Ljava/math/BigInteger;\n+   #792 = NameAndType        #1043:#1044  // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #793 = Utf8               java/lang/Float\n+   #794 = NameAndType        #560:#567    // put:(Ljava/lang/String;F)Lorg/json/JSONObject;\n+   #795 = Utf8               java/lang/Double\n+   #796 = NameAndType        #560:#566    // put:(Ljava/lang/String;D)Lorg/json/JSONObject;\n+   #797 = Utf8               java/math/BigDecimal\n+   #798 = NameAndType        #1042:#441   // ONE:Ljava/math/BigDecimal;\n+   #799 = NameAndType        #1043:#1045  // add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+   #800 = Utf8               Unable to increment [\n+   #801 = Utf8               ].\n+   #802 = NameAndType        #345:#346    // NULL:Ljava/lang/Object;\n+   #803 = NameAndType        #478:#348    // clear:()V\n+   #804 = NameAndType        #347:#1046   // \"<init>\":(Ljava/util/Collection;)V\n+   #805 = Utf8               Null pointer\n+   #806 = NameAndType        #487:#488    // optEnum:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n+   #807 = NameAndType        #1047:#1048  // isAssignableFrom:(Ljava/lang/Class;)Z\n+   #808 = Utf8               java/lang/Enum\n+   #809 = NameAndType        #993:#426    // valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+   #810 = Utf8               java/lang/IllegalArgumentException\n+   #811 = NameAndType        #494:#495    // optBoolean:(Ljava/lang/String;Z)Z\n+   #812 = Utf8               java/lang/Boolean\n+   #813 = NameAndType        #1049:#480   // booleanValue:()Z\n+   #814 = NameAndType        #433:#434    // getBoolean:(Ljava/lang/String;)Z\n+   #815 = NameAndType        #499:#501    // objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;Z)Ljava/math/BigDecimal;\n+   #816 = NameAndType        #347:#1050   // \"<init>\":(Ljava/math/BigInteger;)V\n+   #817 = NameAndType        #609:#610    // numberIsFinite:(Ljava/lang/Number;)Z\n+   #818 = NameAndType        #347:#1051   // \"<init>\":(D)V\n+   #819 = Utf8               java/lang/Short\n+   #820 = Utf8               java/lang/Byte\n+   #821 = NameAndType        #347:#1052   // \"<init>\":(J)V\n+   #822 = NameAndType        #1053:#1054  // toBigInteger:()Ljava/math/BigInteger;\n+   #823 = NameAndType        #993:#1055   // valueOf:(J)Ljava/math/BigInteger;\n+   #824 = NameAndType        #612:#434    // isDecimalNotation:(Ljava/lang/String;)Z\n+   #825 = NameAndType        #508:#509    // optDouble:(Ljava/lang/String;D)D\n+   #826 = NameAndType        #524:#448    // optNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+   #827 = NameAndType        #511:#512    // optFloat:(Ljava/lang/String;F)F\n+   #828 = NameAndType        #515:#516    // optInt:(Ljava/lang/String;I)I\n+   #829 = NameAndType        #524:#525    // optNumber:(Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;\n+   #830 = NameAndType        #519:#520    // optJSONObject:(Ljava/lang/String;Lorg/json/JSONObject;)Lorg/json/JSONObject;\n+   #831 = NameAndType        #521:#522    // optLong:(Ljava/lang/String;J)J\n+   #832 = Utf8\n+   #833 = NameAndType        #526:#527    // optString:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+   #834 = Utf8               java/util/IdentityHashMap\n+   #835 = Class              #1056        // java/util/Collections\n+   #836 = NameAndType        #1057:#1058  // newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;\n+   #837 = NameAndType        #1059:#1003  // getClassLoader:()Ljava/lang/ClassLoader;\n+   #838 = NameAndType        #1060:#1061  // getMethods:()[Ljava/lang/reflect/Method;\n+   #839 = NameAndType        #1062:#1061  // getDeclaredMethods:()[Ljava/lang/reflect/Method;\n+   #840 = NameAndType        #1063:#477   // getModifiers:()I\n+   #841 = Class              #1064        // java/lang/reflect/Modifier\n+   #842 = NameAndType        #1065:#1066  // isPublic:(I)Z\n+   #843 = NameAndType        #1067:#1066  // isStatic:(I)Z\n+   #844 = NameAndType        #1068:#1069  // getParameterTypes:()[Ljava/lang/Class;\n+   #845 = NameAndType        #1070:#480   // isBridge:()Z\n+   #846 = NameAndType        #1071:#995   // getReturnType:()Ljava/lang/Class;\n+   #847 = Class              #1072        // java/lang/Void\n+   #848 = NameAndType        #1073:#391   // TYPE:Ljava/lang/Class;\n+   #849 = NameAndType        #539:#434    // isValidMethodName:(Ljava/lang/String;)Z\n+   #850 = NameAndType        #540:#541    // getKeyNameFromMethod:(Ljava/lang/reflect/Method;)Ljava/lang/String;\n+   #851 = Utf8               java/lang/Object\n+   #852 = NameAndType        #1074:#1075  // invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n+   #853 = NameAndType        #1076:#594   // contains:(Ljava/lang/Object;)Z\n+   #854 = NameAndType        #666:#667    // recursivelyDefinedObjectException:(Ljava/lang/String;)Lorg/json/JSONException;\n+   #855 = NameAndType        #1043:#594   // add:(Ljava/lang/Object;)Z\n+   #856 = NameAndType        #635:#637    // wrap:(Ljava/lang/Object;Ljava/util/Set;)Ljava/lang/Object;\n+   #857 = NameAndType        #592:#594    // remove:(Ljava/lang/Object;)Z\n+   #858 = Utf8               java/io/Closeable\n+   #859 = NameAndType        #1077:#348   // close:()V\n+   #860 = Utf8               java/io/IOException\n+   #861 = Utf8               java/lang/IllegalAccessException\n+   #862 = Utf8               java/lang/reflect/InvocationTargetException\n+   #863 = Utf8               getClass\n+   #864 = Utf8               getDeclaringClass\n+   #865 = Utf8               org/json/JSONPropertyIgnore\n+   #866 = NameAndType        #556:#557    // getAnnotationDepth:(Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n+   #867 = Utf8               org/json/JSONPropertyName\n+   #868 = NameAndType        #546:#547    // getAnnotation:(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n+   #869 = NameAndType        #362:#630    // value:()Ljava/lang/String;\n+   #870 = NameAndType        #1078:#434   // startsWith:(Ljava/lang/String;)Z\n+   #871 = NameAndType        #1019:#631   // substring:(I)Ljava/lang/String;\n+   #872 = Utf8               is\n+   #873 = NameAndType        #1079:#1080  // charAt:(I)C\n+   #874 = NameAndType        #1081:#1082  // isLowerCase:(C)Z\n+   #875 = NameAndType        #1083:#404   // ROOT:Ljava/util/Locale;\n+   #876 = NameAndType        #1084:#1085  // toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;\n+   #877 = NameAndType        #1086:#1082  // isUpperCase:(C)Z\n+   #878 = NameAndType        #1087:#1048  // isAnnotationPresent:(Ljava/lang/Class;)Z\n+   #879 = NameAndType        #546:#1088   // getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n+   #880 = NameAndType        #864:#995    // getDeclaringClass:()Ljava/lang/Class;\n+   #881 = NameAndType        #1089:#995   // getSuperclass:()Ljava/lang/Class;\n+   #882 = NameAndType        #1090:#1069  // getInterfaces:()[Ljava/lang/Class;\n+   #883 = NameAndType        #1091:#1092  // getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n+   #884 = Utf8               java/lang/SecurityException\n+   #885 = Utf8               java/lang/NoSuchMethodException\n+   #886 = NameAndType        #993:#1093   // valueOf:(D)Ljava/lang/Double;\n+   #887 = NameAndType        #993:#1094   // valueOf:(F)Ljava/lang/Float;\n+   #888 = NameAndType        #993:#1095   // valueOf:(I)Ljava/lang/Integer;\n+   #889 = NameAndType        #993:#1096   // valueOf:(J)Ljava/lang/Long;\n+   #890 = NameAndType        #347:#371    // \"<init>\":(Ljava/util/Map;)V\n+   #891 = NameAndType        #592:#424    // remove:(Ljava/lang/String;)Ljava/lang/Object;\n+   #892 = Utf8               org/json/JSONPointer\n+   #893 = NameAndType        #574:#576    // query:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n+   #894 = NameAndType        #1097:#636   // queryFrom:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #895 = NameAndType        #578:#576    // optQuery:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n+   #896 = Utf8               org/json/JSONPointerException\n+   #897 = Utf8               java/io/StringWriter\n+   #898 = NameAndType        #1098:#1099  // getBuffer:()Ljava/lang/StringBuffer;\n+   #899 = NameAndType        #580:#585    // quote:(Ljava/lang/String;Ljava/io/Writer;)Ljava/io/Writer;\n+   #900 = Utf8               \\\"\\\"\n+   #901 = NameAndType        #645:#394    // write:(Ljava/lang/String;)V\n+   #902 = NameAndType        #645:#413    // write:(I)V\n+   #903 = Utf8               \\\\b\n+   #904 = Utf8               \\\\t\n+   #905 = Utf8               \\\\n\n+   #906 = Utf8               \\\\f\n+   #907 = Utf8               \\\\r\n+   #908 = Utf8               \\\\u\n+   #909 = NameAndType        #1100:#631   // toHexString:(I)Ljava/lang/String;\n+   #910 = Utf8               0000\n+   #911 = NameAndType        #645:#1101   // write:(Ljava/lang/String;II)V\n+   #912 = NameAndType        #592:#636    // remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #913 = NameAndType        #593:#594    // similar:(Ljava/lang/Object;)Z\n+   #914 = NameAndType        #602:#603    // isNumberSimilar:(Ljava/lang/Number;Ljava/lang/Number;)Z\n+   #915 = Utf8               java/lang/Throwable\n+   #916 = Utf8               java/lang/Comparable\n+   #917 = NameAndType        #604:#1102   // compareTo:(Ljava/lang/Object;)I\n+   #918 = NameAndType        #604:#1103   // compareTo:(Ljava/math/BigDecimal;)I\n+   #919 = NameAndType        #1013:#480   // isInfinite:()Z\n+   #920 = NameAndType        #1015:#480   // isNaN:()Z\n+   #921 = Utf8               -0\n+   #922 = NameAndType        #1104:#441   // ZERO:Ljava/math/BigDecimal;\n+   #923 = Utf8               java/lang/NumberFormatException\n+   #924 = NameAndType        #993:#1105   // valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n+   #925 = Utf8               val [\n+   #926 = Utf8               ] is not a valid number.\n+   #927 = NameAndType        #1106:#477   // bitLength:()I\n+   #928 = Utf8               JSON does not allow non-finite numbers.\n+   #929 = NameAndType        #465:#631    // getString:(I)Ljava/lang/String;\n+   #930 = NameAndType        #629:#631    // toString:(I)Ljava/lang/String;\n+   #931 = NameAndType        #645:#653    // write:(Ljava/io/Writer;II)Ljava/io/Writer;\n+   #932 = Class              #1107        // org/json/JSONWriter\n+   #933 = NameAndType        #633:#634    // valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n+   #934 = Utf8               org/json/JSONString\n+   #935 = Utf8               java/lang/Character\n+   #936 = Utf8               java/util/Collection\n+   #937 = NameAndType        #1108:#480   // isArray:()Z\n+   #938 = NameAndType        #347:#381    // \"<init>\":(Ljava/lang/Object;)V\n+   #939 = Utf8               java/util/Map\n+   #940 = NameAndType        #1109:#1110  // getPackage:()Ljava/lang/Package;\n+   #941 = Utf8               java.\n+   #942 = Utf8               javax.\n+   #943 = NameAndType        #347:#383    // \"<init>\":(Ljava/lang/Object;Ljava/util/Set;)V\n+   #944 = NameAndType        #1111:#630   // toJSONString:()Ljava/lang/String;\n+   #945 = NameAndType        #347:#1112   // \"<init>\":(Ljava/lang/Throwable;)V\n+   #946 = NameAndType        #482:#483    // numberToString:(Ljava/lang/Number;)Ljava/lang/String;\n+   #947 = NameAndType        #339:#340    // NUMBER_PATTERN:Ljava/util/regex/Pattern;\n+   #948 = Class              #1113        // java/util/regex/Pattern\n+   #949 = NameAndType        #1114:#1115  // matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+   #950 = Class              #1116        // java/util/regex/Matcher\n+   #951 = NameAndType        #1117:#480   // matches:()Z\n+   #952 = NameAndType        #389:#630    // name:()Ljava/lang/String;\n+   #953 = NameAndType        #648:#649    // writeValue:(Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n+   #954 = Utf8               Unable to write JSONObject value for key:\n+   #955 = NameAndType        #347:#1118   // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #956 = NameAndType        #651:#652    // indent:(Ljava/io/Writer;I)V\n+   #957 = NameAndType        #656:#657    // toMap:()Ljava/util/Map;\n+   #958 = NameAndType        #1119:#1120  // toList:()Ljava/util/List;\n+   #959 = Utf8               ] is not a\n+   #960 = Utf8                (\n+   #961 = NameAndType        #417:#1121   // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #962 = Utf8               ).\n+   #963 = Utf8               JavaBean object contains recursively defined member variable of key\n+   #964 = Utf8               -?(?:0|[1-9]\\\\d*)(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?\n+   #965 = NameAndType        #1122:#1123  // compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n+   #966 = Utf8               org/json/JSONObject$Null\n+   #967 = NameAndType        #347:#1124   // \"<init>\":(Lorg/json/JSONObject$1;)V\n+   #968 = Utf8               org/json/JSONObject$1\n+   #969 = Utf8               java/util/Iterator\n+   #970 = Utf8               java/lang/Class\n+   #971 = Utf8               java/util/Locale\n+   #972 = Utf8               java/util/ResourceBundle\n+   #973 = Utf8               java/util/Enumeration\n+   #974 = Utf8               java/util/Set\n+   #975 = Utf8               java/lang/reflect/Method\n+   #976 = Utf8               [Ljava/lang/Class;\n+   #977 = Utf8               java/io/Writer\n+   #978 = Utf8               java/lang/Package\n+   #979 = Utf8               nextClean\n+   #980 = Utf8               ()C\n+   #981 = Utf8               syntaxError\n+   #982 = Utf8               getPrevious\n+   #983 = Utf8               back\n+   #984 = Utf8               nextValue\n+   #985 = Utf8               ()Ljava/lang/Object;\n+   #986 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #987 = Utf8               size\n+   #988 = Utf8               iterator\n+   #989 = Utf8               hasNext\n+   #990 = Utf8               next\n+   #991 = Utf8               getKey\n+   #992 = Utf8               getValue\n+   #993 = Utf8               valueOf\n+   #994 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #995 = Utf8               ()Ljava/lang/Class;\n+   #996 = Utf8               getField\n+   #997 = Utf8               (Ljava/lang/String;)Ljava/lang/reflect/Field;\n+   #998 = Utf8               java/lang/reflect/Field\n+   #999 = Utf8               java/lang/Thread\n+  #1000 = Utf8               currentThread\n+  #1001 = Utf8               ()Ljava/lang/Thread;\n+  #1002 = Utf8               getContextClassLoader\n+  #1003 = Utf8               ()Ljava/lang/ClassLoader;\n+  #1004 = Utf8               getBundle\n+  #1005 = Utf8               (Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;\n+  #1006 = Utf8               getKeys\n+  #1007 = Utf8               ()Ljava/util/Enumeration;\n+  #1008 = Utf8               hasMoreElements\n+  #1009 = Utf8               nextElement\n+  #1010 = Utf8               split\n+  #1011 = Utf8               (Ljava/lang/String;)[Ljava/lang/String;\n+  #1012 = Utf8               (Ljava/lang/Object;)Lorg/json/JSONArray;\n+  #1013 = Utf8               isInfinite\n+  #1014 = Utf8               (D)Z\n+  #1015 = Utf8               isNaN\n+  #1016 = Utf8               indexOf\n+  #1017 = Utf8               (I)I\n+  #1018 = Utf8               endsWith\n+  #1019 = Utf8               substring\n+  #1020 = Utf8               (II)Ljava/lang/String;\n+  #1021 = Utf8               getSimpleName\n+  #1022 = Utf8               FALSE\n+  #1023 = Utf8               Ljava/lang/Boolean;\n+  #1024 = Utf8               equals\n+  #1025 = Utf8               equalsIgnoreCase\n+  #1026 = Utf8               TRUE\n+  #1027 = Utf8               ()D\n+  #1028 = Utf8               parseDouble\n+  #1029 = Utf8               ()F\n+  #1030 = Utf8               parseFloat\n+  #1031 = Utf8               intValue\n+  #1032 = Utf8               parseInt\n+  #1033 = Utf8               longValue\n+  #1034 = Utf8               ()J\n+  #1035 = Utf8               parseLong\n+  #1036 = Utf8               toArray\n+  #1037 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #1038 = Utf8               getFields\n+  #1039 = Utf8               ()[Ljava/lang/reflect/Field;\n+  #1040 = Utf8               getName\n+  #1041 = Utf8               containsKey\n+  #1042 = Utf8               ONE\n+  #1043 = Utf8               add\n+  #1044 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #1045 = Utf8               (Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+  #1046 = Utf8               (Ljava/util/Collection;)V\n+  #1047 = Utf8               isAssignableFrom\n+  #1048 = Utf8               (Ljava/lang/Class;)Z\n+  #1049 = Utf8               booleanValue\n+  #1050 = Utf8               (Ljava/math/BigInteger;)V\n+  #1051 = Utf8               (D)V\n+  #1052 = Utf8               (J)V\n+  #1053 = Utf8               toBigInteger\n+  #1054 = Utf8               ()Ljava/math/BigInteger;\n+  #1055 = Utf8               (J)Ljava/math/BigInteger;\n+  #1056 = Utf8               java/util/Collections\n+  #1057 = Utf8               newSetFromMap\n+  #1058 = Utf8               (Ljava/util/Map;)Ljava/util/Set;\n+  #1059 = Utf8               getClassLoader\n+  #1060 = Utf8               getMethods\n+  #1061 = Utf8               ()[Ljava/lang/reflect/Method;\n+  #1062 = Utf8               getDeclaredMethods\n+  #1063 = Utf8               getModifiers\n+  #1064 = Utf8               java/lang/reflect/Modifier\n+  #1065 = Utf8               isPublic\n+  #1066 = Utf8               (I)Z\n+  #1067 = Utf8               isStatic\n+  #1068 = Utf8               getParameterTypes\n+  #1069 = Utf8               ()[Ljava/lang/Class;\n+  #1070 = Utf8               isBridge\n+  #1071 = Utf8               getReturnType\n+  #1072 = Utf8               java/lang/Void\n+  #1073 = Utf8               TYPE\n+  #1074 = Utf8               invoke\n+  #1075 = Utf8               (Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n+  #1076 = Utf8               contains\n+  #1077 = Utf8               close\n+  #1078 = Utf8               startsWith\n+  #1079 = Utf8               charAt\n+  #1080 = Utf8               (I)C\n+  #1081 = Utf8               isLowerCase\n+  #1082 = Utf8               (C)Z\n+  #1083 = Utf8               ROOT\n+  #1084 = Utf8               toLowerCase\n+  #1085 = Utf8               (Ljava/util/Locale;)Ljava/lang/String;\n+  #1086 = Utf8               isUpperCase\n+  #1087 = Utf8               isAnnotationPresent\n+  #1088 = Utf8               (Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n+  #1089 = Utf8               getSuperclass\n+  #1090 = Utf8               getInterfaces\n+  #1091 = Utf8               getMethod\n+  #1092 = Utf8               (Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n+  #1093 = Utf8               (D)Ljava/lang/Double;\n+  #1094 = Utf8               (F)Ljava/lang/Float;\n+  #1095 = Utf8               (I)Ljava/lang/Integer;\n+  #1096 = Utf8               (J)Ljava/lang/Long;\n+  #1097 = Utf8               queryFrom\n+  #1098 = Utf8               getBuffer\n+  #1099 = Utf8               ()Ljava/lang/StringBuffer;\n+  #1100 = Utf8               toHexString\n+  #1101 = Utf8               (Ljava/lang/String;II)V\n+  #1102 = Utf8               (Ljava/lang/Object;)I\n+  #1103 = Utf8               (Ljava/math/BigDecimal;)I\n+  #1104 = Utf8               ZERO\n+  #1105 = Utf8               (Ljava/lang/String;)Ljava/lang/Double;\n+  #1106 = Utf8               bitLength\n+  #1107 = Utf8               org/json/JSONWriter\n+  #1108 = Utf8               isArray\n+  #1109 = Utf8               getPackage\n+  #1110 = Utf8               ()Ljava/lang/Package;\n+  #1111 = Utf8               toJSONString\n+  #1112 = Utf8               (Ljava/lang/Throwable;)V\n+  #1113 = Utf8               java/util/regex/Pattern\n+  #1114 = Utf8               matcher\n+  #1115 = Utf8               (Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+  #1116 = Utf8               java/util/regex/Matcher\n+  #1117 = Utf8               matches\n+  #1118 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #1119 = Utf8               toList\n+  #1120 = Utf8               ()Ljava/util/List;\n+  #1121 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #1122 = Utf8               compile\n+  #1123 = Utf8               (Ljava/lang/String;)Ljava/util/regex/Pattern;\n+  #1124 = Utf8               (Lorg/json/JSONObject$1;)V\n {\n   static final java.util.regex.Pattern NUMBER_PATTERN;\n     descriptor: Ljava/util/regex/Pattern;\n     flags: (0x0018) ACC_STATIC, ACC_FINAL\n \n   private final java.util.Map<java.lang.String, java.lang.Object> map;\n     descriptor: Ljava/util/Map;\n@@ -1523,15 +1487,15 @@\n         frame_type = 252 /* append */\n           offset_delta = 37\n           locals = [ class java/util/Map$Entry ]\n         frame_type = 250 /* chop */\n           offset_delta = 36\n         frame_type = 250 /* chop */\n           offset_delta = 2\n-    Signature: #386                         // (Ljava/util/Map<**>;)V\n+    Signature: #380                         // (Ljava/util/Map<**>;)V\n \n   public org.json.JSONObject(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n@@ -1569,15 +1533,15 @@\n         Start  Length  Slot  Name   Signature\n             0      11     0  this   Lorg/json/JSONObject;\n             0      11     1  bean   Ljava/lang/Object;\n             0      11     2 objectsRecord   Ljava/util/Set;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      11     2 objectsRecord   Ljava/util/Set<Ljava/lang/Object;>;\n-    Signature: #393                         // (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)V\n+    Signature: #387                         // (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)V\n \n   public org.json.JSONObject(java.lang.Object, java.lang.String...);\n     descriptor: (Ljava/lang/Object;[Ljava/lang/String;)V\n     flags: (0x0081) ACC_PUBLIC, ACC_VARARGS\n     Code:\n       stack=4, locals=7, args_size=3\n          0: aload_0\n@@ -1883,15 +1847,16 @@\n         85: aload_0\n         86: areturn\n       LineNumberTable:\n         line 500: 0\n         line 501: 4\n         line 502: 10\n         line 503: 14\n-        line 504: 31\n+        line 504: 16\n+        line 505: 37\n         line 503: 38\n         line 506: 45\n         line 507: 52\n         line 509: 64\n         line 511: 85\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -2160,15 +2125,15 @@\n             7      37     3   val   TE;\n       StackMapTable: number_of_entries = 1\n         frame_type = 252 /* append */\n           offset_delta = 42\n           locals = [ class java/lang/Enum ]\n     Exceptions:\n       throws org.json.JSONException\n-    Signature: #440                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;)TE;\n+    Signature: #432                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;)TE;\n \n   public boolean getBoolean(java.lang.String) throws org.json.JSONException;\n     descriptor: (Ljava/lang/String;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_0\n@@ -2978,15 +2943,15 @@\n          4: invokeinterface #31,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;\n          9: areturn\n       LineNumberTable:\n         line 951: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/json/JSONObject;\n-    Signature: #481                         // ()Ljava/util/Iterator<Ljava/lang/String;>;\n+    Signature: #471                         // ()Ljava/util/Iterator<Ljava/lang/String;>;\n \n   public java.util.Set<java.lang.String> keySet();\n     descriptor: ()Ljava/util/Set;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -2994,15 +2959,15 @@\n          4: invokeinterface #147,  1          // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;\n          9: areturn\n       LineNumberTable:\n         line 963: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/json/JSONObject;\n-    Signature: #484                         // ()Ljava/util/Set<Ljava/lang/String;>;\n+    Signature: #474                         // ()Ljava/util/Set<Ljava/lang/String;>;\n \n   protected java.util.Set<java.util.Map$Entry<java.lang.String, java.lang.Object>> entrySet();\n     descriptor: ()Ljava/util/Set;\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -3010,15 +2975,15 @@\n          4: invokeinterface #30,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;\n          9: areturn\n       LineNumberTable:\n         line 979: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/json/JSONObject;\n-    Signature: #486                         // ()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;>;\n+    Signature: #476                         // ()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;>;\n \n   public int length();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -3214,15 +3179,15 @@\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/json/JSONObject;\n             0       8     1 clazz   Ljava/lang/Class;\n             0       8     2   key   Ljava/lang/String;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0       8     1 clazz   Ljava/lang/Class<TE;>;\n-    Signature: #440                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;)TE;\n+    Signature: #432                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;)TE;\n \n   public <E extends java.lang.Enum<E>> E optEnum(java.lang.Class<E>, java.lang.String, E);\n     descriptor: (Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=6, args_size=4\n          0: aload_0\n@@ -3298,15 +3263,15 @@\n         frame_type = 21 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 9\n           locals = [ class org/json/JSONObject, class java/lang/Class, class java/lang/String, class java/lang/Enum ]\n           stack = [ class java/lang/IllegalArgumentException ]\n         frame_type = 67 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NullPointerException ]\n-    Signature: #505                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;TE;)TE;\n+    Signature: #493                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;TE;)TE;\n \n   public boolean optBoolean(java.lang.String);\n     descriptor: (Ljava/lang/String;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n@@ -4321,15 +4286,15 @@\n           stack = [ class java/lang/IllegalArgumentException ]\n         frame_type = 68 /* same_locals_1_stack_item */\n           stack = [ class java/lang/reflect/InvocationTargetException ]\n         frame_type = 248 /* chop */\n           offset_delta = 1\n         frame_type = 248 /* chop */\n           offset_delta = 5\n-    Signature: #393                         // (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)V\n+    Signature: #387                         // (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)V\n \n   private static boolean isValidMethodName(java.lang.String);\n     descriptor: (Ljava/lang/String;)Z\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: ldc           #215                // String getClass\n@@ -4660,15 +4625,15 @@\n           offset_delta = 4\n         frame_type = 248 /* chop */\n           offset_delta = 5\n         frame_type = 83 /* same_locals_1_stack_item */\n           stack = [ class java/lang/SecurityException ]\n         frame_type = 66 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NoSuchMethodException ]\n-    Signature: #575                         // <A::Ljava/lang/annotation/Annotation;>(Ljava/lang/reflect/Method;Ljava/lang/Class<TA;>;)TA;\n+    Signature: #555                         // <A::Ljava/lang/annotation/Annotation;>(Ljava/lang/reflect/Method;Ljava/lang/Class<TA;>;)TA;\n \n   private static int getAnnotationDepth(java.lang.reflect.Method, java.lang.Class<? extends java.lang.annotation.Annotation>);\n     descriptor: (Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=3, locals=9, args_size=2\n          0: aload_0\n@@ -4835,15 +4800,15 @@\n           locals = [ int ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 1\n           locals = [ class java/lang/reflect/Method, class java/lang/Class, class java/lang/Class ]\n           stack = [ class java/lang/SecurityException ]\n         frame_type = 66 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NoSuchMethodException ]\n-    Signature: #579                         // (Ljava/lang/reflect/Method;Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)I\n+    Signature: #559                         // (Ljava/lang/reflect/Method;Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)I\n \n   public org.json.JSONObject put(java.lang.String, boolean) throws org.json.JSONException;\n     descriptor: (Ljava/lang/String;Z)Lorg/json/JSONObject;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n@@ -4895,15 +4860,15 @@\n             0      14     1   key   Ljava/lang/String;\n             0      14     2 value   Ljava/util/Collection;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      14     2 value   Ljava/util/Collection<*>;\n     Exceptions:\n       throws org.json.JSONException\n-    Signature: #586                         // (Ljava/lang/String;Ljava/util/Collection<*>;)Lorg/json/JSONObject;\n+    Signature: #565                         // (Ljava/lang/String;Ljava/util/Collection<*>;)Lorg/json/JSONObject;\n \n   public org.json.JSONObject put(java.lang.String, double) throws org.json.JSONException;\n     descriptor: (Ljava/lang/String;D)Lorg/json/JSONObject;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=3\n          0: aload_0\n@@ -5006,15 +4971,15 @@\n             0      14     1   key   Ljava/lang/String;\n             0      14     2 value   Ljava/util/Map;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      14     2 value   Ljava/util/Map<**>;\n     Exceptions:\n       throws org.json.JSONException\n-    Signature: #592                         // (Ljava/lang/String;Ljava/util/Map<**>;)Lorg/json/JSONObject;\n+    Signature: #571                         // (Ljava/lang/String;Ljava/util/Map<**>;)Lorg/json/JSONObject;\n \n   public org.json.JSONObject put(java.lang.String, java.lang.Object) throws org.json.JSONException;\n     descriptor: (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_1\n@@ -6568,15 +6533,15 @@\n         line 2487: 152\n         line 2488: 162\n         line 2490: 171\n         line 2491: 178\n         line 2492: 183\n         line 2494: 192\n         line 2495: 200\n-        line 2496: 205\n+        line 2496: 204\n         line 2497: 214\n         line 2498: 228\n         line 2499: 235\n         line 2500: 244\n         line 2502: 249\n         line 2503: 253\n         line 2506: 263\n@@ -6619,15 +6584,15 @@\n         frame_type = 13 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 8\n           locals = [ class java/lang/Object, class java/util/Set ]\n           stack = [ class org/json/JSONException ]\n         frame_type = 66 /* same_locals_1_stack_item */\n           stack = [ class java/lang/Exception ]\n-    Signature: #671                         // (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)Ljava/lang/Object;\n+    Signature: #644                         // (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)Ljava/lang/Object;\n \n   public java.io.Writer write(java.io.Writer) throws org.json.JSONException;\n     descriptor: (Ljava/io/Writer;)Ljava/io/Writer;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n@@ -7270,15 +7235,15 @@\n         frame_type = 28 /* same */\n         frame_type = 28 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 7\n           locals = [ class java/lang/Object ]\n         frame_type = 248 /* chop */\n           offset_delta = 17\n-    Signature: #687                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;\n+    Signature: #660                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;\n \n   private static org.json.JSONException wrongValueFormatException(java.lang.String, java.lang.String, java.lang.Throwable);\n     descriptor: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: new           #80                 // class org/json/JSONException\n@@ -7395,8 +7360,8 @@\n         line 162: 0\n         line 175: 9\n }\n SourceFile: \"JSONObject.java\"\n InnerClasses:\n   static #336;                            // class org/json/JSONObject$1\n   private static final #338= #334 of #62; // Null=class org/json/JSONObject$Null of class org/json/JSONObject\n-  public static #377= #34 of #306;        // Entry=class java/util/Map$Entry of class java/util/Map\n+  public static #373= #34 of #306;        // Entry=class java/util/Map$Entry of class java/util/Map\n"}]}
