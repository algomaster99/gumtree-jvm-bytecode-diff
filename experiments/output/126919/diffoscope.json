{"diffoscope-json-version": 1, "source1": "first/SeekableInMemoryByteChannel.class", "source2": "second/SeekableInMemoryByteChannel.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,140 +1,138 @@\n-  SHA-256 checksum 0707697c7158c291cd40049ccda8b4d4b1f2cf2bf96836ce1c6adf087561b601\n+  SHA-256 checksum 70cfaecfe252c068752c551e84778d95935fc377031c1989dcc399efb19a0b3c\n   Compiled from \"SeekableInMemoryByteChannel.java\"\n public class org.apache.commons.compress.utils.SeekableInMemoryByteChannel implements java.nio.channels.SeekableByteChannel\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #10                         // org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n-  super_class: #16                        // java/lang/Object\n+  this_class: #1                          // org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n+  super_class: #3                         // java/lang/Object\n   interfaces: 1, fields: 5, methods: 14, attributes: 1\n Constant pool:\n-    #1 = Class              #2            // java/lang/Integer\n-    #2 = Utf8               java/lang/Integer\n-    #3 = Fieldref           #4.#5         // org/apache/commons/compress/utils/ByteUtils.EMPTY_BYTE_ARRAY:[B\n-    #4 = Class              #6            // org/apache/commons/compress/utils/ByteUtils\n-    #5 = NameAndType        #7:#8         // EMPTY_BYTE_ARRAY:[B\n-    #6 = Utf8               org/apache/commons/compress/utils/ByteUtils\n-    #7 = Utf8               EMPTY_BYTE_ARRAY\n-    #8 = Utf8               [B\n-    #9 = Methodref          #10.#11       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n-   #10 = Class              #12           // org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n-   #11 = NameAndType        #13:#14       // \"<init>\":([B)V\n-   #12 = Utf8               org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n-   #13 = Utf8               <init>\n-   #14 = Utf8               ([B)V\n-   #15 = Methodref          #16.#17       // java/lang/Object.\"<init>\":()V\n-   #16 = Class              #18           // java/lang/Object\n-   #17 = NameAndType        #13:#19       // \"<init>\":()V\n-   #18 = Utf8               java/lang/Object\n-   #19 = Utf8               ()V\n-   #20 = Class              #21           // java/util/concurrent/atomic/AtomicBoolean\n-   #21 = Utf8               java/util/concurrent/atomic/AtomicBoolean\n-   #22 = Methodref          #20.#17       // java/util/concurrent/atomic/AtomicBoolean.\"<init>\":()V\n-   #23 = Fieldref           #10.#24       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n-   #24 = NameAndType        #25:#26       // closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n-   #25 = Utf8               closed\n-   #26 = Utf8               Ljava/util/concurrent/atomic/AtomicBoolean;\n-   #27 = Fieldref           #10.#28       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.data:[B\n-   #28 = NameAndType        #29:#8        // data:[B\n-   #29 = Utf8               data\n-   #30 = Fieldref           #10.#31       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.size:I\n-   #31 = NameAndType        #32:#33       // size:I\n-   #32 = Utf8               size\n-   #33 = Utf8               I\n-   #34 = Methodref          #20.#35       // java/util/concurrent/atomic/AtomicBoolean.set:(Z)V\n-   #35 = NameAndType        #36:#37       // set:(Z)V\n-   #36 = Utf8               set\n-   #37 = Utf8               (Z)V\n-   #38 = Methodref          #10.#39       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.isOpen:()Z\n-   #39 = NameAndType        #40:#41       // isOpen:()Z\n-   #40 = Utf8               isOpen\n-   #41 = Utf8               ()Z\n-   #42 = Class              #43           // java/nio/channels/ClosedChannelException\n-   #43 = Utf8               java/nio/channels/ClosedChannelException\n-   #44 = Methodref          #42.#17       // java/nio/channels/ClosedChannelException.\"<init>\":()V\n-   #45 = Methodref          #20.#46       // java/util/concurrent/atomic/AtomicBoolean.get:()Z\n-   #46 = NameAndType        #47:#41       // get:()Z\n-   #47 = Utf8               get\n-   #48 = Fieldref           #10.#49       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.position:I\n-   #49 = NameAndType        #50:#33       // position:I\n-   #50 = Utf8               position\n-   #51 = Methodref          #10.#52       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.ensureOpen:()V\n-   #52 = NameAndType        #53:#19       // ensureOpen:()V\n-   #53 = Utf8               ensureOpen\n-   #54 = Long               2147483647l\n-   #56 = Class              #57           // java/io/IOException\n-   #57 = Utf8               java/io/IOException\n-   #58 = String             #59           // Position has to be in range 0.. 2147483647\n-   #59 = Utf8               Position has to be in range 0.. 2147483647\n-   #60 = Methodref          #56.#61       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #61 = NameAndType        #13:#62       // \"<init>\":(Ljava/lang/String;)V\n-   #62 = Utf8               (Ljava/lang/String;)V\n-   #63 = Methodref          #64.#65       // java/nio/ByteBuffer.remaining:()I\n-   #64 = Class              #66           // java/nio/ByteBuffer\n-   #65 = NameAndType        #67:#68       // remaining:()I\n-   #66 = Utf8               java/nio/ByteBuffer\n-   #67 = Utf8               remaining\n-   #68 = Utf8               ()I\n-   #69 = Methodref          #64.#70       // java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n-   #70 = NameAndType        #71:#72       // put:([BII)Ljava/nio/ByteBuffer;\n-   #71 = Utf8               put\n-   #72 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n-   #73 = Integer            1073741823\n-   #74 = Methodref          #75.#76       // java/util/Arrays.copyOf:([BI)[B\n-   #75 = Class              #77           // java/util/Arrays\n-   #76 = NameAndType        #78:#79       // copyOf:([BI)[B\n-   #77 = Utf8               java/util/Arrays\n-   #78 = Utf8               copyOf\n-   #79 = Utf8               ([BI)[B\n-   #80 = Class              #81           // java/lang/IllegalArgumentException\n-   #81 = Utf8               java/lang/IllegalArgumentException\n-   #82 = String             #83           // Size has to be in range 0.. 2147483647\n-   #83 = Utf8               Size has to be in range 0.. 2147483647\n-   #84 = Methodref          #80.#61       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #85 = Integer            2147483647\n-   #86 = Methodref          #10.#87       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.resize:(I)V\n-   #87 = NameAndType        #88:#89       // resize:(I)V\n-   #88 = Utf8               resize\n-   #89 = Utf8               (I)V\n-   #90 = Methodref          #64.#91       // java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n-   #91 = NameAndType        #47:#72       // get:([BII)Ljava/nio/ByteBuffer;\n-   #92 = Class              #93           // java/nio/channels/SeekableByteChannel\n-   #93 = Utf8               java/nio/channels/SeekableByteChannel\n-   #94 = Utf8               NAIVE_RESIZE_LIMIT\n-   #95 = Utf8               ConstantValue\n-   #96 = Utf8               Code\n-   #97 = Utf8               LineNumberTable\n-   #98 = Utf8               LocalVariableTable\n-   #99 = Utf8               this\n-  #100 = Utf8               Lorg/apache/commons/compress/utils/SeekableInMemoryByteChannel;\n-  #101 = Utf8               array\n-  #102 = Utf8               ()[B\n-  #103 = Utf8               close\n-  #104 = Utf8               StackMapTable\n-  #105 = Utf8               Exceptions\n-  #106 = Utf8               ()J\n-  #107 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n-  #108 = Utf8               newPosition\n-  #109 = Utf8               J\n-  #110 = Utf8               read\n-  #111 = Utf8               (Ljava/nio/ByteBuffer;)I\n-  #112 = Utf8               buf\n-  #113 = Utf8               Ljava/nio/ByteBuffer;\n-  #114 = Utf8               wanted\n-  #115 = Utf8               possible\n-  #116 = Utf8               newLength\n-  #117 = Utf8               len\n-  #118 = Utf8               truncate\n-  #119 = Utf8               newSize\n-  #120 = Utf8               write\n-  #121 = Utf8               b\n-  #122 = Utf8               possibleWithoutResize\n-  #123 = Utf8               SourceFile\n-  #124 = Utf8               SeekableInMemoryByteChannel.java\n+    #1 = Class              #2            // org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n+    #2 = Utf8               org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n+    #3 = Class              #4            // java/lang/Object\n+    #4 = Utf8               java/lang/Object\n+    #5 = Class              #6            // java/nio/channels/SeekableByteChannel\n+    #6 = Utf8               java/nio/channels/SeekableByteChannel\n+    #7 = Utf8               NAIVE_RESIZE_LIMIT\n+    #8 = Utf8               I\n+    #9 = Utf8               ConstantValue\n+   #10 = Integer            1073741823\n+   #11 = Utf8               data\n+   #12 = Utf8               [B\n+   #13 = Utf8               closed\n+   #14 = Utf8               Ljava/util/concurrent/atomic/AtomicBoolean;\n+   #15 = Utf8               position\n+   #16 = Utf8               size\n+   #17 = Utf8               <init>\n+   #18 = Utf8               ()V\n+   #19 = Utf8               Code\n+   #20 = Fieldref           #21.#23       // org/apache/commons/compress/utils/ByteUtils.EMPTY_BYTE_ARRAY:[B\n+   #21 = Class              #22           // org/apache/commons/compress/utils/ByteUtils\n+   #22 = Utf8               org/apache/commons/compress/utils/ByteUtils\n+   #23 = NameAndType        #24:#12       // EMPTY_BYTE_ARRAY:[B\n+   #24 = Utf8               EMPTY_BYTE_ARRAY\n+   #25 = Methodref          #1.#26        // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n+   #26 = NameAndType        #17:#27       // \"<init>\":([B)V\n+   #27 = Utf8               ([B)V\n+   #28 = Utf8               LineNumberTable\n+   #29 = Utf8               LocalVariableTable\n+   #30 = Utf8               this\n+   #31 = Utf8               Lorg/apache/commons/compress/utils/SeekableInMemoryByteChannel;\n+   #32 = Methodref          #3.#33        // java/lang/Object.\"<init>\":()V\n+   #33 = NameAndType        #17:#18       // \"<init>\":()V\n+   #34 = Class              #35           // java/util/concurrent/atomic/AtomicBoolean\n+   #35 = Utf8               java/util/concurrent/atomic/AtomicBoolean\n+   #36 = Methodref          #34.#33       // java/util/concurrent/atomic/AtomicBoolean.\"<init>\":()V\n+   #37 = Fieldref           #1.#38        // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+   #38 = NameAndType        #13:#14       // closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+   #39 = Fieldref           #1.#40        // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.data:[B\n+   #40 = NameAndType        #11:#12       // data:[B\n+   #41 = Fieldref           #1.#42        // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.size:I\n+   #42 = NameAndType        #16:#8        // size:I\n+   #43 = Utf8               (I)V\n+   #44 = Utf8               array\n+   #45 = Utf8               ()[B\n+   #46 = Utf8               close\n+   #47 = Methodref          #34.#48       // java/util/concurrent/atomic/AtomicBoolean.set:(Z)V\n+   #48 = NameAndType        #49:#50       // set:(Z)V\n+   #49 = Utf8               set\n+   #50 = Utf8               (Z)V\n+   #51 = Utf8               ensureOpen\n+   #52 = Utf8               Exceptions\n+   #53 = Class              #54           // java/nio/channels/ClosedChannelException\n+   #54 = Utf8               java/nio/channels/ClosedChannelException\n+   #55 = Methodref          #1.#56        // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.isOpen:()Z\n+   #56 = NameAndType        #57:#58       // isOpen:()Z\n+   #57 = Utf8               isOpen\n+   #58 = Utf8               ()Z\n+   #59 = Methodref          #53.#33       // java/nio/channels/ClosedChannelException.\"<init>\":()V\n+   #60 = Utf8               StackMapTable\n+   #61 = Methodref          #34.#62       // java/util/concurrent/atomic/AtomicBoolean.get:()Z\n+   #62 = NameAndType        #63:#58       // get:()Z\n+   #63 = Utf8               get\n+   #64 = Utf8               ()J\n+   #65 = Fieldref           #1.#66        // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.position:I\n+   #66 = NameAndType        #15:#8        // position:I\n+   #67 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n+   #68 = Class              #69           // java/io/IOException\n+   #69 = Utf8               java/io/IOException\n+   #70 = Methodref          #1.#71        // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.ensureOpen:()V\n+   #71 = NameAndType        #51:#18       // ensureOpen:()V\n+   #72 = Long               2147483647l\n+   #74 = String             #75           // Position has to be in range 0.. 2147483647\n+   #75 = Utf8               Position has to be in range 0.. 2147483647\n+   #76 = Methodref          #68.#77       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #77 = NameAndType        #17:#78       // \"<init>\":(Ljava/lang/String;)V\n+   #78 = Utf8               (Ljava/lang/String;)V\n+   #79 = Utf8               newPosition\n+   #80 = Utf8               J\n+   #81 = Utf8               read\n+   #82 = Utf8               (Ljava/nio/ByteBuffer;)I\n+   #83 = Methodref          #84.#86       // java/nio/ByteBuffer.remaining:()I\n+   #84 = Class              #85           // java/nio/ByteBuffer\n+   #85 = Utf8               java/nio/ByteBuffer\n+   #86 = NameAndType        #87:#88       // remaining:()I\n+   #87 = Utf8               remaining\n+   #88 = Utf8               ()I\n+   #89 = Methodref          #84.#90       // java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n+   #90 = NameAndType        #91:#92       // put:([BII)Ljava/nio/ByteBuffer;\n+   #91 = Utf8               put\n+   #92 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n+   #93 = Utf8               buf\n+   #94 = Utf8               Ljava/nio/ByteBuffer;\n+   #95 = Utf8               wanted\n+   #96 = Utf8               possible\n+   #97 = Utf8               resize\n+   #98 = Methodref          #99.#101      // java/util/Arrays.copyOf:([BI)[B\n+   #99 = Class              #100          // java/util/Arrays\n+  #100 = Utf8               java/util/Arrays\n+  #101 = NameAndType        #102:#103     // copyOf:([BI)[B\n+  #102 = Utf8               copyOf\n+  #103 = Utf8               ([BI)[B\n+  #104 = Utf8               newLength\n+  #105 = Utf8               len\n+  #106 = Utf8               truncate\n+  #107 = Class              #108          // java/lang/IllegalArgumentException\n+  #108 = Utf8               java/lang/IllegalArgumentException\n+  #109 = String             #110          // Size has to be in range 0.. 2147483647\n+  #110 = Utf8               Size has to be in range 0.. 2147483647\n+  #111 = Methodref          #107.#77      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+  #112 = Utf8               newSize\n+  #113 = Utf8               write\n+  #114 = Integer            2147483647\n+  #115 = Methodref          #1.#116       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.resize:(I)V\n+  #116 = NameAndType        #97:#43       // resize:(I)V\n+  #117 = Methodref          #84.#118      // java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n+  #118 = NameAndType        #63:#92       // get:([BII)Ljava/nio/ByteBuffer;\n+  #119 = Utf8               b\n+  #120 = Utf8               possibleWithoutResize\n+  #121 = Utf8               SourceFile\n+  #122 = Utf8               SeekableInMemoryByteChannel.java\n {\n   private static final int NAIVE_RESIZE_LIMIT = 1073741823;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 1073741823\n \n   private byte[] data;\n@@ -155,43 +153,43 @@\n \n   public org.apache.commons.compress.utils.SeekableInMemoryByteChannel();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getstatic     #3                  // Field org/apache/commons/compress/utils/ByteUtils.EMPTY_BYTE_ARRAY:[B\n-         4: invokespecial #9                  // Method \"<init>\":([B)V\n+         1: getstatic     #20                 // Field org/apache/commons/compress/utils/ByteUtils.EMPTY_BYTE_ARRAY:[B\n+         4: invokespecial #25                 // Method \"<init>\":([B)V\n          7: return\n       LineNumberTable:\n         line 51: 0\n         line 52: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/utils/SeekableInMemoryByteChannel;\n \n   public org.apache.commons.compress.utils.SeekableInMemoryByteChannel(byte[]);\n     descriptor: ([B)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n-         1: invokespecial #15                 // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #32                 // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n-         5: new           #20                 // class java/util/concurrent/atomic/AtomicBoolean\n+         5: new           #34                 // class java/util/concurrent/atomic/AtomicBoolean\n          8: dup\n-         9: invokespecial #22                 // Method java/util/concurrent/atomic/AtomicBoolean.\"<init>\":()V\n-        12: putfield      #23                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+         9: invokespecial #36                 // Method java/util/concurrent/atomic/AtomicBoolean.\"<init>\":()V\n+        12: putfield      #37                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n         15: aload_0\n         16: aload_1\n-        17: putfield      #27                 // Field data:[B\n+        17: putfield      #39                 // Field data:[B\n         20: aload_0\n         21: aload_1\n         22: arraylength\n-        23: putfield      #30                 // Field size:I\n+        23: putfield      #41                 // Field size:I\n         26: return\n       LineNumberTable:\n         line 62: 0\n         line 44: 4\n         line 63: 15\n         line 64: 20\n         line 65: 26\n@@ -204,15 +202,15 @@\n     descriptor: (I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n          2: newarray       byte\n-         4: invokespecial #9                  // Method \"<init>\":([B)V\n+         4: invokespecial #25                 // Method \"<init>\":([B)V\n          7: return\n       LineNumberTable:\n         line 75: 0\n         line 76: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/utils/SeekableInMemoryByteChannel;\n@@ -220,76 +218,76 @@\n \n   public byte[] array();\n     descriptor: ()[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #27                 // Field data:[B\n+         1: getfield      #39                 // Field data:[B\n          4: areturn\n       LineNumberTable:\n         line 88: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/utils/SeekableInMemoryByteChannel;\n \n   public void close();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #23                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+         1: getfield      #37                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n          4: iconst_1\n-         5: invokevirtual #34                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V\n+         5: invokevirtual #47                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V\n          8: return\n       LineNumberTable:\n         line 93: 0\n         line 94: 8\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/utils/SeekableInMemoryByteChannel;\n \n   private void ensureOpen() throws java.nio.channels.ClosedChannelException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n+    Exceptions:\n+      throws java.nio.channels.ClosedChannelException\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: invokevirtual #38                 // Method isOpen:()Z\n+         1: invokevirtual #55                 // Method isOpen:()Z\n          4: ifne          15\n-         7: new           #42                 // class java/nio/channels/ClosedChannelException\n+         7: new           #53                 // class java/nio/channels/ClosedChannelException\n         10: dup\n-        11: invokespecial #44                 // Method java/nio/channels/ClosedChannelException.\"<init>\":()V\n+        11: invokespecial #59                 // Method java/nio/channels/ClosedChannelException.\"<init>\":()V\n         14: athrow\n         15: return\n       LineNumberTable:\n         line 97: 0\n         line 98: 7\n         line 100: 15\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      16     0  this   Lorg/apache/commons/compress/utils/SeekableInMemoryByteChannel;\n       StackMapTable: number_of_entries = 1\n         frame_type = 15 /* same */\n-    Exceptions:\n-      throws java.nio.channels.ClosedChannelException\n \n   public boolean isOpen();\n     descriptor: ()Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #23                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n-         4: invokevirtual #45                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z\n-         7: ifne          14\n-        10: iconst_1\n+         1: getfield      #37                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+         4: invokevirtual #61                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z\n+         7: ifeq          14\n+        10: iconst_0\n         11: goto          15\n-        14: iconst_0\n+        14: iconst_1\n         15: ireturn\n       LineNumberTable:\n         line 104: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      16     0  this   Lorg/apache/commons/compress/utils/SeekableInMemoryByteChannel;\n       StackMapTable: number_of_entries = 2\n@@ -299,47 +297,49 @@\n \n   public long position();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #48                 // Field position:I\n+         1: getfield      #65                 // Field position:I\n          4: i2l\n          5: lreturn\n       LineNumberTable:\n         line 116: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0  this   Lorg/apache/commons/compress/utils/SeekableInMemoryByteChannel;\n \n   public java.nio.channels.SeekableByteChannel position(long) throws java.io.IOException;\n     descriptor: (J)Ljava/nio/channels/SeekableByteChannel;\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=3, args_size=2\n          0: aload_0\n-         1: invokespecial #51                 // Method ensureOpen:()V\n+         1: invokespecial #70                 // Method ensureOpen:()V\n          4: lload_1\n          5: lconst_0\n          6: lcmp\n          7: iflt          18\n         10: lload_1\n-        11: ldc2_w        #54                 // long 2147483647l\n+        11: ldc2_w        #72                 // long 2147483647l\n         14: lcmp\n         15: ifle          28\n-        18: new           #56                 // class java/io/IOException\n+        18: new           #68                 // class java/io/IOException\n         21: dup\n-        22: ldc           #58                 // String Position has to be in range 0.. 2147483647\n-        24: invokespecial #60                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        22: ldc           #74                 // String Position has to be in range 0.. 2147483647\n+        24: invokespecial #76                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         27: athrow\n         28: aload_0\n         29: lload_1\n         30: l2i\n-        31: putfield      #48                 // Field position:I\n+        31: putfield      #65                 // Field position:I\n         34: aload_0\n         35: areturn\n       LineNumberTable:\n         line 121: 0\n         line 122: 4\n         line 123: 18\n         line 125: 28\n@@ -347,56 +347,56 @@\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      36     0  this   Lorg/apache/commons/compress/utils/SeekableInMemoryByteChannel;\n             0      36     1 newPosition   J\n       StackMapTable: number_of_entries = 2\n         frame_type = 18 /* same */\n         frame_type = 9 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   public int read(java.nio.ByteBuffer) throws java.io.IOException;\n     descriptor: (Ljava/nio/ByteBuffer;)I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=4, args_size=2\n          0: aload_0\n-         1: invokespecial #51                 // Method ensureOpen:()V\n+         1: invokespecial #70                 // Method ensureOpen:()V\n          4: aload_1\n-         5: invokevirtual #63                 // Method java/nio/ByteBuffer.remaining:()I\n+         5: invokevirtual #83                 // Method java/nio/ByteBuffer.remaining:()I\n          8: istore_2\n          9: aload_0\n-        10: getfield      #30                 // Field size:I\n+        10: getfield      #41                 // Field size:I\n         13: aload_0\n-        14: getfield      #48                 // Field position:I\n+        14: getfield      #65                 // Field position:I\n         17: isub\n         18: istore_3\n         19: iload_3\n         20: ifgt          25\n         23: iconst_m1\n         24: ireturn\n         25: iload_2\n         26: iload_3\n         27: if_icmple     32\n         30: iload_3\n         31: istore_2\n         32: aload_1\n         33: aload_0\n-        34: getfield      #27                 // Field data:[B\n+        34: getfield      #39                 // Field data:[B\n         37: aload_0\n-        38: getfield      #48                 // Field position:I\n+        38: getfield      #65                 // Field position:I\n         41: iload_2\n-        42: invokevirtual #69                 // Method java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n+        42: invokevirtual #89                 // Method java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n         45: pop\n         46: aload_0\n         47: dup\n-        48: getfield      #48                 // Field position:I\n+        48: getfield      #65                 // Field position:I\n         51: iload_2\n         52: iadd\n-        53: putfield      #48                 // Field position:I\n+        53: putfield      #65                 // Field position:I\n         56: iload_2\n         57: ireturn\n       LineNumberTable:\n         line 131: 0\n         line 132: 4\n         line 133: 9\n         line 134: 19\n@@ -413,80 +413,82 @@\n             9      49     2 wanted   I\n            19      39     3 possible   I\n       StackMapTable: number_of_entries = 2\n         frame_type = 253 /* append */\n           offset_delta = 25\n           locals = [ int, int ]\n         frame_type = 6 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   private void resize(int);\n     descriptor: (I)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_0\n-         1: getfield      #27                 // Field data:[B\n+         1: getfield      #39                 // Field data:[B\n          4: arraylength\n          5: istore_2\n          6: iload_2\n          7: ifgt          12\n         10: iconst_1\n         11: istore_2\n         12: iload_1\n-        13: ldc           #73                 // int 1073741823\n-        15: if_icmpge     30\n-        18: iload_2\n-        19: iload_1\n-        20: if_icmpge     32\n-        23: iload_2\n-        24: iconst_1\n-        25: ishl\n-        26: istore_2\n-        27: goto          18\n-        30: iload_1\n-        31: istore_2\n-        32: aload_0\n-        33: aload_0\n-        34: getfield      #27                 // Field data:[B\n-        37: iload_2\n-        38: invokestatic  #74                 // Method java/util/Arrays.copyOf:([BI)[B\n-        41: putfield      #27                 // Field data:[B\n-        44: return\n+        13: ldc           #10                 // int 1073741823\n+        15: if_icmpge     33\n+        18: goto          25\n+        21: iload_2\n+        22: iconst_1\n+        23: ishl\n+        24: istore_2\n+        25: iload_2\n+        26: iload_1\n+        27: if_icmplt     21\n+        30: goto          35\n+        33: iload_1\n+        34: istore_2\n+        35: aload_0\n+        36: aload_0\n+        37: getfield      #39                 // Field data:[B\n+        40: iload_2\n+        41: invokestatic  #98                 // Method java/util/Arrays.copyOf:([BI)[B\n+        44: putfield      #39                 // Field data:[B\n+        47: return\n       LineNumberTable:\n         line 146: 0\n         line 147: 6\n         line 148: 10\n         line 150: 12\n         line 151: 18\n-        line 152: 23\n-        line 155: 30\n-        line 157: 32\n-        line 158: 44\n+        line 152: 21\n+        line 151: 25\n+        line 154: 30\n+        line 155: 33\n+        line 157: 35\n+        line 158: 47\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      45     0  this   Lorg/apache/commons/compress/utils/SeekableInMemoryByteChannel;\n-            0      45     1 newLength   I\n-            6      39     2   len   I\n-      StackMapTable: number_of_entries = 4\n+            0      48     0  this   Lorg/apache/commons/compress/utils/SeekableInMemoryByteChannel;\n+            0      48     1 newLength   I\n+            6      42     2   len   I\n+      StackMapTable: number_of_entries = 5\n         frame_type = 252 /* append */\n           offset_delta = 12\n           locals = [ int ]\n-        frame_type = 5 /* same */\n-        frame_type = 11 /* same */\n+        frame_type = 8 /* same */\n+        frame_type = 3 /* same */\n+        frame_type = 7 /* same */\n         frame_type = 1 /* same */\n \n   public long size();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #30                 // Field size:I\n+         1: getfield      #41                 // Field size:I\n          4: i2l\n          5: lreturn\n       LineNumberTable:\n         line 168: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0  this   Lorg/apache/commons/compress/utils/SeekableInMemoryByteChannel;\n@@ -497,42 +499,42 @@\n     Code:\n       stack=4, locals=3, args_size=2\n          0: lload_1\n          1: lconst_0\n          2: lcmp\n          3: iflt          14\n          6: lload_1\n-         7: ldc2_w        #54                 // long 2147483647l\n+         7: ldc2_w        #72                 // long 2147483647l\n         10: lcmp\n         11: ifle          24\n-        14: new           #80                 // class java/lang/IllegalArgumentException\n+        14: new           #107                // class java/lang/IllegalArgumentException\n         17: dup\n-        18: ldc           #82                 // String Size has to be in range 0.. 2147483647\n-        20: invokespecial #84                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        18: ldc           #109                // String Size has to be in range 0.. 2147483647\n+        20: invokespecial #111                // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         23: athrow\n         24: aload_0\n-        25: getfield      #30                 // Field size:I\n+        25: getfield      #41                 // Field size:I\n         28: i2l\n         29: lload_1\n         30: lcmp\n         31: ifle          40\n         34: aload_0\n         35: lload_1\n         36: l2i\n-        37: putfield      #30                 // Field size:I\n+        37: putfield      #41                 // Field size:I\n         40: aload_0\n-        41: getfield      #48                 // Field position:I\n+        41: getfield      #65                 // Field position:I\n         44: i2l\n         45: lload_1\n         46: lcmp\n         47: ifle          56\n         50: aload_0\n         51: lload_1\n         52: l2i\n-        53: putfield      #48                 // Field position:I\n+        53: putfield      #65                 // Field position:I\n         56: aload_0\n         57: areturn\n       LineNumberTable:\n         line 181: 0\n         line 182: 14\n         line 184: 24\n         line 185: 34\n@@ -548,100 +550,101 @@\n         frame_type = 9 /* same */\n         frame_type = 15 /* same */\n         frame_type = 15 /* same */\n \n   public int write(java.nio.ByteBuffer) throws java.io.IOException;\n     descriptor: (Ljava/nio/ByteBuffer;)I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=5, args_size=2\n          0: aload_0\n-         1: invokespecial #51                 // Method ensureOpen:()V\n+         1: invokespecial #70                 // Method ensureOpen:()V\n          4: aload_1\n-         5: invokevirtual #63                 // Method java/nio/ByteBuffer.remaining:()I\n+         5: invokevirtual #83                 // Method java/nio/ByteBuffer.remaining:()I\n          8: istore_2\n          9: aload_0\n-        10: getfield      #30                 // Field size:I\n+        10: getfield      #41                 // Field size:I\n         13: aload_0\n-        14: getfield      #48                 // Field position:I\n+        14: getfield      #65                 // Field position:I\n         17: isub\n         18: istore_3\n         19: iload_2\n         20: iload_3\n         21: if_icmple     60\n         24: aload_0\n-        25: getfield      #48                 // Field position:I\n+        25: getfield      #65                 // Field position:I\n         28: iload_2\n         29: iadd\n         30: istore        4\n         32: iload         4\n         34: ifge          54\n         37: aload_0\n-        38: ldc           #85                 // int 2147483647\n-        40: invokespecial #86                 // Method resize:(I)V\n-        43: ldc           #85                 // int 2147483647\n+        38: ldc           #114                // int 2147483647\n+        40: invokespecial #115                // Method resize:(I)V\n+        43: ldc           #114                // int 2147483647\n         45: aload_0\n-        46: getfield      #48                 // Field position:I\n+        46: getfield      #65                 // Field position:I\n         49: isub\n         50: istore_2\n         51: goto          60\n         54: aload_0\n         55: iload         4\n-        57: invokespecial #86                 // Method resize:(I)V\n+        57: invokespecial #115                // Method resize:(I)V\n         60: aload_1\n         61: aload_0\n-        62: getfield      #27                 // Field data:[B\n+        62: getfield      #39                 // Field data:[B\n         65: aload_0\n-        66: getfield      #48                 // Field position:I\n+        66: getfield      #65                 // Field position:I\n         69: iload_2\n-        70: invokevirtual #90                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n+        70: invokevirtual #117                // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n         73: pop\n         74: aload_0\n         75: dup\n-        76: getfield      #48                 // Field position:I\n+        76: getfield      #65                 // Field position:I\n         79: iload_2\n         80: iadd\n-        81: putfield      #48                 // Field position:I\n+        81: putfield      #65                 // Field position:I\n         84: aload_0\n-        85: getfield      #30                 // Field size:I\n+        85: getfield      #41                 // Field size:I\n         88: aload_0\n-        89: getfield      #48                 // Field position:I\n+        89: getfield      #65                 // Field position:I\n         92: if_icmpge     103\n         95: aload_0\n         96: aload_0\n-        97: getfield      #48                 // Field position:I\n-       100: putfield      #30                 // Field size:I\n+        97: getfield      #65                 // Field position:I\n+       100: putfield      #41                 // Field size:I\n        103: iload_2\n        104: ireturn\n       LineNumberTable:\n         line 195: 0\n         line 196: 4\n         line 197: 9\n         line 198: 19\n         line 199: 24\n         line 200: 32\n         line 201: 37\n         line 202: 43\n+        line 203: 51\n         line 204: 54\n         line 207: 60\n         line 208: 74\n         line 209: 84\n         line 210: 95\n         line 212: 103\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           32      28     4 newSize   I\n             0     105     0  this   Lorg/apache/commons/compress/utils/SeekableInMemoryByteChannel;\n             0     105     1     b   Ljava/nio/ByteBuffer;\n             9      96     2 wanted   I\n            19      86     3 possibleWithoutResize   I\n+           32      28     4 newSize   I\n       StackMapTable: number_of_entries = 3\n         frame_type = 254 /* append */\n           offset_delta = 54\n           locals = [ int, int, int ]\n         frame_type = 250 /* chop */\n           offset_delta = 5\n         frame_type = 42 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n }\n SourceFile: \"SeekableInMemoryByteChannel.java\"\n"}]}
