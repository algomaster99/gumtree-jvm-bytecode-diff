{"diffoscope-json-version": 1, "source1": "first/SerializableFileTime.class", "source2": "second/SerializableFileTime.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,41 +13,34 @@\n \n class SerializableFileTime implements Serializable\n {\n     static final SerializableFileTime EPOCH;\n     private static final long serialVersionUID = 1L;\n     private FileTime fileTime;\n     \n-    public SerializableFileTime(final FileTime fileTime) {\n-        this.fileTime = Objects.requireNonNull(fileTime);\n+    public SerializableFileTime(final FileTime obj) {\n+        this.fileTime = Objects.requireNonNull(obj);\n     }\n     \n     public int compareTo(final FileTime other) {\n         return this.fileTime.compareTo(other);\n     }\n     \n     @Override\n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n-            return true;\n-        }\n-        if (!(obj instanceof SerializableFileTime)) {\n-            return false;\n-        }\n-        final SerializableFileTime other = (SerializableFileTime)obj;\n-        return Objects.equals(this.fileTime, other.fileTime);\n+    public boolean equals(final Object o) {\n+        return this == o || (o instanceof SerializableFileTime && Objects.equals(this.fileTime, ((SerializableFileTime)o).fileTime));\n     }\n     \n     @Override\n     public int hashCode() {\n         return this.fileTime.hashCode();\n     }\n     \n-    private void readObject(final ObjectInputStream ois) throws ClassNotFoundException, IOException {\n-        this.fileTime = FileTime.from((Instant)ois.readObject());\n+    private void readObject(final ObjectInputStream objectInputStream) throws ClassNotFoundException, IOException {\n+        this.fileTime = FileTime.from((Instant)objectInputStream.readObject());\n     }\n     \n     long to(final TimeUnit unit) {\n         return this.fileTime.to(unit);\n     }\n     \n     Instant toInstant() {\n@@ -63,15 +56,15 @@\n         return this.fileTime.toString();\n     }\n     \n     FileTime unwrap() {\n         return this.fileTime;\n     }\n     \n-    private void writeObject(final ObjectOutputStream oos) throws IOException {\n-        oos.writeObject(this.fileTime.toInstant());\n+    private void writeObject(final ObjectOutputStream objectOutputStream) throws IOException {\n+        objectOutputStream.writeObject(this.fileTime.toInstant());\n     }\n     \n     static {\n         EPOCH = new SerializableFileTime(FileTimes.EPOCH);\n     }\n }\n"}]}
