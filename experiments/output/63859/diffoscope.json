{"diffoscope-json-version": 1, "source1": "first/Base64.class", "source2": "second/Base64.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,14 +18,20 @@\n     private static final int MASK_2BITS = 3;\n     private final byte[] encodeTable;\n     private final byte[] decodeTable;\n     private final byte[] lineSeparator;\n     private final int decodeSize;\n     private final int encodeSize;\n     \n+    static {\n+        STANDARD_ENCODE_TABLE = new byte[] { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47 };\n+        URL_SAFE_ENCODE_TABLE = new byte[] { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 95 };\n+        DECODE_TABLE = new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, 62, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51 };\n+    }\n+    \n     public static byte[] decodeBase64(final byte[] base64Data) {\n         return new Base64().decode(base64Data);\n     }\n     \n     public static byte[] decodeBase64(final String base64String) {\n         return new Base64().decode(base64String);\n     }\n@@ -221,15 +227,15 @@\n     \n     void encode(final byte[] in, int inPos, final int inAvail, final BaseNCodec.Context context) {\n         if (context.eof) {\n             return;\n         }\n         if (inAvail < 0) {\n             context.eof = true;\n-            if (0 == context.modulus && this.lineLength == 0) {\n+            if (context.modulus == 0 && this.lineLength == 0) {\n                 return;\n             }\n             final byte[] buffer = this.ensureBufferSize(this.encodeSize, context);\n             final int savedPos = context.pos;\n             switch (context.modulus) {\n                 case 0: {\n                     break;\n@@ -269,15 +275,15 @@\n                 final byte[] buffer2 = this.ensureBufferSize(this.encodeSize, context);\n                 context.modulus = (context.modulus + 1) % 3;\n                 int b = in[inPos++];\n                 if (b < 0) {\n                     b += 256;\n                 }\n                 context.ibitWorkArea = (context.ibitWorkArea << 8) + b;\n-                if (0 == context.modulus) {\n+                if (context.modulus == 0) {\n                     buffer2[context.pos++] = this.encodeTable[context.ibitWorkArea >> 18 & 0x3F];\n                     buffer2[context.pos++] = this.encodeTable[context.ibitWorkArea >> 12 & 0x3F];\n                     buffer2[context.pos++] = this.encodeTable[context.ibitWorkArea >> 6 & 0x3F];\n                     buffer2[context.pos++] = this.encodeTable[context.ibitWorkArea & 0x3F];\n                     context.currentLinePos += 4;\n                     if (this.lineLength > 0 && this.lineLength <= context.currentLinePos) {\n                         System.arraycopy(this.lineSeparator, 0, buffer2, context.pos, this.lineSeparator.length);\n@@ -304,14 +310,8 @@\n     }\n     \n     private void validateTrailingCharacter() {\n         if (this.isStrictDecoding()) {\n             throw new IllegalArgumentException(\"Strict decoding: Last encoded character (before the paddings if any) is a valid base 64 alphabet but not a possible encoding. Decoding requires at least two trailing 6-bit characters to create bytes.\");\n         }\n     }\n-    \n-    static {\n-        STANDARD_ENCODE_TABLE = new byte[] { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47 };\n-        URL_SAFE_ENCODE_TABLE = new byte[] { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 95 };\n-        DECODE_TABLE = new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, 62, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51 };\n-    }\n }\n"}]}
