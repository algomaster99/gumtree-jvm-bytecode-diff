{"diffoscope-json-version": 1, "source1": "first/MultipleVariableDeclarationsCheck.class", "source2": "second/MultipleVariableDeclarationsCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -21,41 +21,37 @@\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 10 };\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        DetailAST nextNode = ast.getNextSibling();\n-        if (nextNode != null) {\n-            final boolean isCommaSeparated = nextNode.getType() == 74;\n-            if (isCommaSeparated || nextNode.getType() == 45) {\n-                nextNode = nextNode.getNextSibling();\n+    public void visitToken(final DetailAST detailAST) {\n+        DetailAST detailAST2 = detailAST.getNextSibling();\n+        if (detailAST2 != null) {\n+            final boolean b = detailAST2.getType() == 74;\n+            if (b || detailAST2.getType() == 45) {\n+                detailAST2 = detailAST2.getNextSibling();\n             }\n-            if (nextNode != null && nextNode.getType() == 10) {\n-                final DetailAST firstNode = CheckUtil.getFirstNode(ast);\n-                if (isCommaSeparated) {\n-                    if (ast.getParent().getType() != 35) {\n+            if (detailAST2 != null && detailAST2.getType() == 10) {\n+                final DetailAST firstNode = CheckUtil.getFirstNode(detailAST);\n+                if (b) {\n+                    if (detailAST.getParent().getType() != 35) {\n                         this.log(firstNode, \"multiple.variable.declarations.comma\", new Object[0]);\n                     }\n                 }\n-                else {\n-                    final DetailAST lastNode = getLastNode(ast);\n-                    final DetailAST firstNextNode = CheckUtil.getFirstNode(nextNode);\n-                    if (TokenUtil.areOnSameLine(firstNextNode, lastNode)) {\n-                        this.log(firstNode, \"multiple.variable.declarations\", new Object[0]);\n-                    }\n+                else if (TokenUtil.areOnSameLine(CheckUtil.getFirstNode(detailAST2), getLastNode(detailAST))) {\n+                    this.log(firstNode, \"multiple.variable.declarations\", new Object[0]);\n                 }\n             }\n         }\n     }\n     \n-    private static DetailAST getLastNode(final DetailAST node) {\n-        DetailAST currentNode = node;\n-        final DetailAST child = node.getLastChild();\n-        if (child != null) {\n-            currentNode = getLastNode(child);\n+    private static DetailAST getLastNode(final DetailAST detailAST) {\n+        DetailAST lastNode = detailAST;\n+        final DetailAST lastChild = detailAST.getLastChild();\n+        if (lastChild != null) {\n+            lastNode = getLastNode(lastChild);\n         }\n-        return currentNode;\n+        return lastNode;\n     }\n }\n"}]}
