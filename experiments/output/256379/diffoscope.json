{"diffoscope-json-version": 1, "source1": "first/ParallelScatterZipCreator$DefaultBackingStoreSupplier.class", "source2": "second/ParallelScatterZipCreator$DefaultBackingStoreSupplier.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,12 +1,11 @@\n \n package org.apache.commons.compress.archivers.zip;\n \n import java.io.IOException;\n-import java.nio.file.Path;\n import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;\n import java.nio.file.Files;\n import java.nio.file.attribute.FileAttribute;\n import org.apache.commons.compress.parallel.ScatterGatherBackingStore;\n import java.util.concurrent.atomic.AtomicInteger;\n import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;\n \n@@ -15,11 +14,10 @@\n     final AtomicInteger storeNum;\n     \n     private DefaultBackingStoreSupplier() {\n         this.storeNum = new AtomicInteger(0);\n     }\n     \n     public ScatterGatherBackingStore get() throws IOException {\n-        final Path tempFile = Files.createTempFile(\"parallelscatter\", \"n\" + this.storeNum.incrementAndGet(), (FileAttribute<?>[])new FileAttribute[0]);\n-        return (ScatterGatherBackingStore)new FileBasedScatterGatherBackingStore(tempFile);\n+        return (ScatterGatherBackingStore)new FileBasedScatterGatherBackingStore(Files.createTempFile(\"parallelscatter\", \"n\" + this.storeNum.incrementAndGet(), (FileAttribute<?>[])new FileAttribute[0]));\n     }\n }\n"}]}
