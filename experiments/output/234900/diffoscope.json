{"diffoscope-json-version": 1, "source1": "first/CountingInputStream.class", "source2": "second/CountingInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -4,49 +4,49 @@\n import java.io.IOException;\n import java.io.InputStream;\n \n public class CountingInputStream extends ProxyInputStream\n {\n     private long count;\n     \n-    public CountingInputStream(final InputStream in) {\n-        super(in);\n+    public CountingInputStream(final InputStream inputStream) {\n+        super(inputStream);\n     }\n     \n-    public synchronized long skip(final long length) throws IOException {\n-        final long skip = super.skip(length);\n+    public synchronized long skip(final long n) throws IOException {\n+        final long skip = super.skip(n);\n         this.count += skip;\n         return skip;\n     }\n     \n     protected synchronized void afterRead(final int n) {\n         if (n != -1) {\n             this.count += n;\n         }\n     }\n     \n     public int getCount() {\n-        final long result = this.getByteCount();\n-        if (result > 2147483647L) {\n-            throw new ArithmeticException(\"The byte count \" + result + \" is too large to be converted to an int\");\n+        final long byteCount = this.getByteCount();\n+        if (byteCount > 2147483647L) {\n+            throw new ArithmeticException(\"The byte count \" + byteCount + \" is too large to be converted to an int\");\n         }\n-        return (int)result;\n+        return (int)byteCount;\n     }\n     \n     public int resetCount() {\n-        final long result = this.resetByteCount();\n-        if (result > 2147483647L) {\n-            throw new ArithmeticException(\"The byte count \" + result + \" is too large to be converted to an int\");\n+        final long resetByteCount = this.resetByteCount();\n+        if (resetByteCount > 2147483647L) {\n+            throw new ArithmeticException(\"The byte count \" + resetByteCount + \" is too large to be converted to an int\");\n         }\n-        return (int)result;\n+        return (int)resetByteCount;\n     }\n     \n     public synchronized long getByteCount() {\n         return this.count;\n     }\n     \n     public synchronized long resetByteCount() {\n-        final long tmp = this.count;\n+        final long count = this.count;\n         this.count = 0L;\n-        return tmp;\n+        return count;\n     }\n }\n"}]}
