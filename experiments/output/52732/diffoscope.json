{"diffoscope-json-version": 1, "source1": "first/UnshrinkingInputStream.class", "source2": "second/UnshrinkingInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,149 +1,144 @@\n-  SHA-256 checksum fb5c2df47b638de8f37940a7c3c0a20e43ea1f542e3dbd684e09d2a36608a218\n+  SHA-256 checksum 3df1c8528c4e7966b730951c33345edb4047a1eee003cc4f0c5fa18adca5064a\n   Compiled from \"UnshrinkingInputStream.java\"\n class org.apache.commons.compress.archivers.zip.UnshrinkingInputStream extends org.apache.commons.compress.compressors.lzw.LZWInputStream\n   minor version: 0\n   major version: 52\n   flags: (0x0020) ACC_SUPER\n   this_class: #1                          // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-  super_class: #4                         // org/apache/commons/compress/compressors/lzw/LZWInputStream\n+  super_class: #3                         // org/apache/commons/compress/compressors/lzw/LZWInputStream\n   interfaces: 0, fields: 3, methods: 4, attributes: 1\n Constant pool:\n-    #1 = Class              #73           // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-    #2 = Fieldref           #74.#75       // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-    #3 = Methodref          #4.#76        // org/apache/commons/compress/compressors/lzw/LZWInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-    #4 = Class              #77           // org/apache/commons/compress/compressors/lzw/LZWInputStream\n-    #5 = Methodref          #1.#78        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setClearCode:(I)V\n-    #6 = Methodref          #1.#79        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.initializeTables:(I)V\n-    #7 = Methodref          #1.#80        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getPrefixesLength:()I\n-    #8 = Fieldref           #1.#81        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.isUsed:[Z\n-    #9 = Methodref          #1.#82        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getClearCode:()I\n-   #10 = Methodref          #1.#83        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setTableSize:(I)V\n-   #11 = Methodref          #1.#84        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getTableSize:()I\n-   #12 = Methodref          #1.#85        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.addEntry:(IBI)I\n-   #13 = Methodref          #1.#86        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getPrefix:(I)I\n-   #14 = Methodref          #1.#87        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setPrefix:(II)V\n-   #15 = Methodref          #1.#88        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.readNextCode:()I\n-   #16 = Methodref          #1.#89        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.addRepeatOfPreviousCode:()I\n-   #17 = Methodref          #1.#90        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.expandCodeToOutputStack:(IZ)I\n-   #18 = Class              #91           // java/io/IOException\n-   #19 = String             #92           // Unexpected EOF;\n-   #20 = Methodref          #18.#93       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #21 = Methodref          #1.#94        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getCodeSize:()I\n-   #22 = String             #95           // Attempt to increase code size beyond maximum\n-   #23 = Methodref          #1.#96        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.incrementCodeSize:()V\n-   #24 = Methodref          #1.#97        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.partialClear:()V\n-   #25 = Class              #98           // java/lang/StringBuilder\n-   #26 = Methodref          #25.#99       // java/lang/StringBuilder.\"<init>\":()V\n-   #27 = String             #100          // Invalid clear code subcode\n-   #28 = Methodref          #25.#101      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #29 = Methodref          #25.#102      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #30 = Methodref          #25.#103      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #31 = Utf8               MAX_CODE_SIZE\n-   #32 = Utf8               I\n-   #33 = Utf8               ConstantValue\n-   #34 = Integer            13\n-   #35 = Utf8               MAX_TABLE_SIZE\n-   #36 = Integer            8192\n-   #37 = Utf8               isUsed\n-   #38 = Utf8               [Z\n-   #39 = Utf8               <init>\n-   #40 = Utf8               (Ljava/io/InputStream;)V\n-   #41 = Utf8               Code\n-   #42 = Utf8               LineNumberTable\n-   #43 = Utf8               LocalVariableTable\n-   #44 = Utf8               i\n-   #45 = Utf8               this\n-   #46 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnshrinkingInputStream;\n-   #47 = Utf8               inputStream\n-   #48 = Utf8               Ljava/io/InputStream;\n-   #49 = Utf8               StackMapTable\n-   #50 = Class              #73           // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-   #51 = Class              #104          // java/io/InputStream\n-   #52 = Utf8               Exceptions\n-   #53 = Utf8               addEntry\n-   #54 = Utf8               (IB)I\n-   #55 = Utf8               previousCode\n-   #56 = Utf8               character\n-   #57 = Utf8               B\n-   #58 = Utf8               tableSize\n-   #59 = Utf8               idx\n-   #60 = Utf8               partialClear\n-   #61 = Utf8               ()V\n-   #62 = Utf8               isParent\n-   #63 = Class              #38           // \"[Z\"\n-   #64 = Utf8               decompressNextSymbol\n-   #65 = Utf8               ()I\n-   #66 = Utf8               addedUnfinishedEntry\n-   #67 = Utf8               Z\n-   #68 = Utf8               effectiveCode\n-   #69 = Utf8               code\n-   #70 = Utf8               subCode\n-   #71 = Utf8               SourceFile\n-   #72 = Utf8               UnshrinkingInputStream.java\n-   #73 = Utf8               org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-   #74 = Class              #105          // java/nio/ByteOrder\n-   #75 = NameAndType        #106:#107     // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-   #76 = NameAndType        #39:#108      // \"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-   #77 = Utf8               org/apache/commons/compress/compressors/lzw/LZWInputStream\n-   #78 = NameAndType        #109:#110     // setClearCode:(I)V\n-   #79 = NameAndType        #111:#110     // initializeTables:(I)V\n-   #80 = NameAndType        #112:#65      // getPrefixesLength:()I\n-   #81 = NameAndType        #37:#38       // isUsed:[Z\n-   #82 = NameAndType        #113:#65      // getClearCode:()I\n-   #83 = NameAndType        #114:#110     // setTableSize:(I)V\n-   #84 = NameAndType        #115:#65      // getTableSize:()I\n-   #85 = NameAndType        #53:#116      // addEntry:(IBI)I\n-   #86 = NameAndType        #117:#118     // getPrefix:(I)I\n-   #87 = NameAndType        #119:#120     // setPrefix:(II)V\n-   #88 = NameAndType        #121:#65      // readNextCode:()I\n-   #89 = NameAndType        #122:#65      // addRepeatOfPreviousCode:()I\n-   #90 = NameAndType        #123:#124     // expandCodeToOutputStack:(IZ)I\n-   #91 = Utf8               java/io/IOException\n-   #92 = Utf8               Unexpected EOF;\n-   #93 = NameAndType        #39:#125      // \"<init>\":(Ljava/lang/String;)V\n-   #94 = NameAndType        #126:#65      // getCodeSize:()I\n-   #95 = Utf8               Attempt to increase code size beyond maximum\n-   #96 = NameAndType        #127:#61      // incrementCodeSize:()V\n-   #97 = NameAndType        #60:#61       // partialClear:()V\n-   #98 = Utf8               java/lang/StringBuilder\n-   #99 = NameAndType        #39:#61       // \"<init>\":()V\n-  #100 = Utf8               Invalid clear code subcode\n-  #101 = NameAndType        #128:#129     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #102 = NameAndType        #128:#130     // append:(I)Ljava/lang/StringBuilder;\n-  #103 = NameAndType        #131:#132     // toString:()Ljava/lang/String;\n-  #104 = Utf8               java/io/InputStream\n-  #105 = Utf8               java/nio/ByteOrder\n-  #106 = Utf8               LITTLE_ENDIAN\n-  #107 = Utf8               Ljava/nio/ByteOrder;\n-  #108 = Utf8               (Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-  #109 = Utf8               setClearCode\n-  #110 = Utf8               (I)V\n-  #111 = Utf8               initializeTables\n-  #112 = Utf8               getPrefixesLength\n-  #113 = Utf8               getClearCode\n-  #114 = Utf8               setTableSize\n-  #115 = Utf8               getTableSize\n-  #116 = Utf8               (IBI)I\n-  #117 = Utf8               getPrefix\n-  #118 = Utf8               (I)I\n-  #119 = Utf8               setPrefix\n-  #120 = Utf8               (II)V\n-  #121 = Utf8               readNextCode\n-  #122 = Utf8               addRepeatOfPreviousCode\n-  #123 = Utf8               expandCodeToOutputStack\n-  #124 = Utf8               (IZ)I\n-  #125 = Utf8               (Ljava/lang/String;)V\n-  #126 = Utf8               getCodeSize\n-  #127 = Utf8               incrementCodeSize\n-  #128 = Utf8               append\n-  #129 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #130 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #131 = Utf8               toString\n-  #132 = Utf8               ()Ljava/lang/String;\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+    #2 = Utf8               org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+    #3 = Class              #4            // org/apache/commons/compress/compressors/lzw/LZWInputStream\n+    #4 = Utf8               org/apache/commons/compress/compressors/lzw/LZWInputStream\n+    #5 = Utf8               MAX_CODE_SIZE\n+    #6 = Utf8               I\n+    #7 = Utf8               ConstantValue\n+    #8 = Integer            13\n+    #9 = Utf8               MAX_TABLE_SIZE\n+   #10 = Integer            8192\n+   #11 = Utf8               isUsed\n+   #12 = Utf8               [Z\n+   #13 = Utf8               <init>\n+   #14 = Utf8               (Ljava/io/InputStream;)V\n+   #15 = Utf8               Exceptions\n+   #16 = Class              #17           // java/io/IOException\n+   #17 = Utf8               java/io/IOException\n+   #18 = Utf8               Code\n+   #19 = Fieldref           #20.#22       // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+   #20 = Class              #21           // java/nio/ByteOrder\n+   #21 = Utf8               java/nio/ByteOrder\n+   #22 = NameAndType        #23:#24       // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+   #23 = Utf8               LITTLE_ENDIAN\n+   #24 = Utf8               Ljava/nio/ByteOrder;\n+   #25 = Methodref          #3.#26        // org/apache/commons/compress/compressors/lzw/LZWInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+   #26 = NameAndType        #13:#27       // \"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+   #27 = Utf8               (Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+   #28 = Methodref          #1.#29        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setClearCode:(I)V\n+   #29 = NameAndType        #30:#31       // setClearCode:(I)V\n+   #30 = Utf8               setClearCode\n+   #31 = Utf8               (I)V\n+   #32 = Methodref          #1.#33        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.initializeTables:(I)V\n+   #33 = NameAndType        #34:#31       // initializeTables:(I)V\n+   #34 = Utf8               initializeTables\n+   #35 = Methodref          #1.#36        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getPrefixesLength:()I\n+   #36 = NameAndType        #37:#38       // getPrefixesLength:()I\n+   #37 = Utf8               getPrefixesLength\n+   #38 = Utf8               ()I\n+   #39 = Fieldref           #1.#40        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.isUsed:[Z\n+   #40 = NameAndType        #11:#12       // isUsed:[Z\n+   #41 = Methodref          #1.#42        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getClearCode:()I\n+   #42 = NameAndType        #43:#38       // getClearCode:()I\n+   #43 = Utf8               getClearCode\n+   #44 = Methodref          #1.#45        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setTableSize:(I)V\n+   #45 = NameAndType        #46:#31       // setTableSize:(I)V\n+   #46 = Utf8               setTableSize\n+   #47 = Utf8               LineNumberTable\n+   #48 = Utf8               LocalVariableTable\n+   #49 = Utf8               this\n+   #50 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnshrinkingInputStream;\n+   #51 = Utf8               inputStream\n+   #52 = Utf8               Ljava/io/InputStream;\n+   #53 = Utf8               i\n+   #54 = Utf8               StackMapTable\n+   #55 = Class              #56           // java/io/InputStream\n+   #56 = Utf8               java/io/InputStream\n+   #57 = Utf8               addEntry\n+   #58 = Utf8               (IB)I\n+   #59 = Methodref          #1.#60        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getTableSize:()I\n+   #60 = NameAndType        #61:#38       // getTableSize:()I\n+   #61 = Utf8               getTableSize\n+   #62 = Methodref          #1.#63        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.addEntry:(IBI)I\n+   #63 = NameAndType        #57:#64       // addEntry:(IBI)I\n+   #64 = Utf8               (IBI)I\n+   #65 = Utf8               previousCode\n+   #66 = Utf8               character\n+   #67 = Utf8               B\n+   #68 = Utf8               tableSize\n+   #69 = Utf8               idx\n+   #70 = Utf8               partialClear\n+   #71 = Utf8               ()V\n+   #72 = Methodref          #1.#73        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getPrefix:(I)I\n+   #73 = NameAndType        #74:#75       // getPrefix:(I)I\n+   #74 = Utf8               getPrefix\n+   #75 = Utf8               (I)I\n+   #76 = Methodref          #1.#77        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setPrefix:(II)V\n+   #77 = NameAndType        #78:#79       // setPrefix:(II)V\n+   #78 = Utf8               setPrefix\n+   #79 = Utf8               (II)V\n+   #80 = Utf8               isParent\n+   #81 = Class              #12           // \"[Z\"\n+   #82 = Utf8               decompressNextSymbol\n+   #83 = Methodref          #1.#84        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.readNextCode:()I\n+   #84 = NameAndType        #85:#38       // readNextCode:()I\n+   #85 = Utf8               readNextCode\n+   #86 = Methodref          #1.#87        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.addRepeatOfPreviousCode:()I\n+   #87 = NameAndType        #88:#38       // addRepeatOfPreviousCode:()I\n+   #88 = Utf8               addRepeatOfPreviousCode\n+   #89 = Methodref          #1.#90        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.expandCodeToOutputStack:(IZ)I\n+   #90 = NameAndType        #91:#92       // expandCodeToOutputStack:(IZ)I\n+   #91 = Utf8               expandCodeToOutputStack\n+   #92 = Utf8               (IZ)I\n+   #93 = String             #94           // Unexpected EOF;\n+   #94 = Utf8               Unexpected EOF;\n+   #95 = Methodref          #16.#96       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #96 = NameAndType        #13:#97       // \"<init>\":(Ljava/lang/String;)V\n+   #97 = Utf8               (Ljava/lang/String;)V\n+   #98 = Methodref          #1.#99        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getCodeSize:()I\n+   #99 = NameAndType        #100:#38      // getCodeSize:()I\n+  #100 = Utf8               getCodeSize\n+  #101 = String             #102          // Attempt to increase code size beyond maximum\n+  #102 = Utf8               Attempt to increase code size beyond maximum\n+  #103 = Methodref          #1.#104       // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.incrementCodeSize:()V\n+  #104 = NameAndType        #105:#71      // incrementCodeSize:()V\n+  #105 = Utf8               incrementCodeSize\n+  #106 = Methodref          #1.#107       // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.partialClear:()V\n+  #107 = NameAndType        #70:#71       // partialClear:()V\n+  #108 = Class              #109          // java/lang/StringBuilder\n+  #109 = Utf8               java/lang/StringBuilder\n+  #110 = String             #111          // Invalid clear code subcode\n+  #111 = Utf8               Invalid clear code subcode\n+  #112 = Methodref          #108.#96      // java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+  #113 = Methodref          #108.#114     // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+  #114 = NameAndType        #115:#116     // append:(I)Ljava/lang/StringBuilder;\n+  #115 = Utf8               append\n+  #116 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #117 = Methodref          #108.#118     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #118 = NameAndType        #119:#120     // toString:()Ljava/lang/String;\n+  #119 = Utf8               toString\n+  #120 = Utf8               ()Ljava/lang/String;\n+  #121 = Utf8               code\n+  #122 = Utf8               addedUnfinishedEntry\n+  #123 = Utf8               Z\n+  #124 = Utf8               effectiveCode\n+  #125 = Utf8               subCode\n+  #126 = Utf8               SourceFile\n+  #127 = Utf8               UnshrinkingInputStream.java\n {\n   private static final int MAX_CODE_SIZE = 13;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 13\n \n   private static final int MAX_TABLE_SIZE = 8192;\n@@ -154,314 +149,312 @@\n   private final boolean[] isUsed;\n     descriptor: [Z\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   public org.apache.commons.compress.archivers.zip.UnshrinkingInputStream(java.io.InputStream) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: getstatic     #2                  // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-         5: invokespecial #3                  // Method org/apache/commons/compress/compressors/lzw/LZWInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+         2: getstatic     #19                 // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+         5: invokespecial #25                 // Method org/apache/commons/compress/compressors/lzw/LZWInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n          8: aload_0\n          9: bipush        9\n-        11: invokevirtual #5                  // Method setClearCode:(I)V\n+        11: invokevirtual #28                 // Method setClearCode:(I)V\n         14: aload_0\n         15: bipush        13\n-        17: invokevirtual #6                  // Method initializeTables:(I)V\n+        17: invokevirtual #32                 // Method initializeTables:(I)V\n         20: aload_0\n         21: aload_0\n-        22: invokevirtual #7                  // Method getPrefixesLength:()I\n+        22: invokevirtual #35                 // Method getPrefixesLength:()I\n         25: newarray       boolean\n-        27: putfield      #8                  // Field isUsed:[Z\n+        27: putfield      #39                 // Field isUsed:[Z\n         30: iconst_0\n         31: istore_2\n-        32: iload_2\n-        33: sipush        256\n-        36: if_icmpge     52\n-        39: aload_0\n-        40: getfield      #8                  // Field isUsed:[Z\n-        43: iload_2\n-        44: iconst_1\n-        45: bastore\n-        46: iinc          2, 1\n-        49: goto          32\n+        32: goto          45\n+        35: aload_0\n+        36: getfield      #39                 // Field isUsed:[Z\n+        39: iload_2\n+        40: iconst_1\n+        41: bastore\n+        42: iinc          2, 1\n+        45: iload_2\n+        46: sipush        256\n+        49: if_icmplt     35\n         52: aload_0\n         53: aload_0\n-        54: invokevirtual #9                  // Method getClearCode:()I\n+        54: invokevirtual #41                 // Method getClearCode:()I\n         57: iconst_1\n         58: iadd\n-        59: invokevirtual #10                 // Method setTableSize:(I)V\n+        59: invokevirtual #44                 // Method setTableSize:(I)V\n         62: return\n       LineNumberTable:\n         line 44: 0\n         line 45: 8\n         line 46: 14\n         line 47: 20\n         line 48: 30\n-        line 49: 39\n-        line 48: 46\n+        line 49: 35\n+        line 48: 42\n         line 51: 52\n         line 52: 62\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           32      20     2     i   I\n             0      63     0  this   Lorg/apache/commons/compress/archivers/zip/UnshrinkingInputStream;\n             0      63     1 inputStream   Ljava/io/InputStream;\n+           32      20     2     i   I\n       StackMapTable: number_of_entries = 2\n         frame_type = 255 /* full_frame */\n-          offset_delta = 32\n+          offset_delta = 35\n           locals = [ class org/apache/commons/compress/archivers/zip/UnshrinkingInputStream, class java/io/InputStream, int ]\n           stack = []\n-        frame_type = 250 /* chop */\n-          offset_delta = 19\n-    Exceptions:\n-      throws java.io.IOException\n+        frame_type = 9 /* same */\n \n   protected int addEntry(int, byte) throws java.io.IOException;\n     descriptor: (IB)I\n     flags: (0x0004) ACC_PROTECTED\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=5, args_size=3\n          0: aload_0\n-         1: invokevirtual #11                 // Method getTableSize:()I\n+         1: invokevirtual #59                 // Method getTableSize:()I\n          4: istore_3\n-         5: iload_3\n-         6: sipush        8192\n-         9: if_icmpge     27\n-        12: aload_0\n-        13: getfield      #8                  // Field isUsed:[Z\n-        16: iload_3\n-        17: baload\n-        18: ifeq          27\n-        21: iinc          3, 1\n-        24: goto          5\n+         5: goto          11\n+         8: iinc          3, 1\n+        11: iload_3\n+        12: sipush        8192\n+        15: if_icmpge     27\n+        18: aload_0\n+        19: getfield      #39                 // Field isUsed:[Z\n+        22: iload_3\n+        23: baload\n+        24: ifne          8\n         27: aload_0\n         28: iload_3\n-        29: invokevirtual #10                 // Method setTableSize:(I)V\n+        29: invokevirtual #44                 // Method setTableSize:(I)V\n         32: aload_0\n         33: iload_1\n         34: iload_2\n         35: sipush        8192\n-        38: invokevirtual #12                 // Method addEntry:(IBI)I\n+        38: invokevirtual #62                 // Method addEntry:(IBI)I\n         41: istore        4\n         43: iload         4\n         45: iflt          56\n         48: aload_0\n-        49: getfield      #8                  // Field isUsed:[Z\n+        49: getfield      #39                 // Field isUsed:[Z\n         52: iload         4\n         54: iconst_1\n         55: bastore\n         56: iload         4\n         58: ireturn\n       LineNumberTable:\n         line 56: 0\n         line 57: 5\n-        line 58: 21\n+        line 58: 8\n+        line 57: 11\n         line 60: 27\n         line 61: 32\n         line 62: 43\n         line 63: 48\n         line 65: 56\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      59     0  this   Lorg/apache/commons/compress/archivers/zip/UnshrinkingInputStream;\n             0      59     1 previousCode   I\n             0      59     2 character   B\n             5      54     3 tableSize   I\n            43      16     4   idx   I\n-      StackMapTable: number_of_entries = 3\n+      StackMapTable: number_of_entries = 4\n         frame_type = 252 /* append */\n-          offset_delta = 5\n+          offset_delta = 8\n           locals = [ int ]\n-        frame_type = 21 /* same */\n+        frame_type = 2 /* same */\n+        frame_type = 15 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 28\n           locals = [ int ]\n-    Exceptions:\n-      throws java.io.IOException\n \n   private void partialClear();\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=3, args_size=1\n          0: sipush        8192\n          3: newarray       boolean\n          5: astore_1\n          6: iconst_0\n          7: istore_2\n-         8: iload_2\n-         9: aload_0\n-        10: getfield      #8                  // Field isUsed:[Z\n-        13: arraylength\n-        14: if_icmpge     49\n-        17: aload_0\n-        18: getfield      #8                  // Field isUsed:[Z\n+         8: goto          40\n+        11: aload_0\n+        12: getfield      #39                 // Field isUsed:[Z\n+        15: iload_2\n+        16: baload\n+        17: ifeq          37\n+        20: aload_0\n         21: iload_2\n-        22: baload\n-        23: ifeq          43\n-        26: aload_0\n-        27: iload_2\n-        28: invokevirtual #13                 // Method getPrefix:(I)I\n-        31: iconst_m1\n-        32: if_icmpeq     43\n-        35: aload_1\n-        36: aload_0\n-        37: iload_2\n-        38: invokevirtual #13                 // Method getPrefix:(I)I\n-        41: iconst_1\n-        42: bastore\n-        43: iinc          2, 1\n-        46: goto          8\n+        22: invokevirtual #72                 // Method getPrefix:(I)I\n+        25: iconst_m1\n+        26: if_icmpeq     37\n+        29: aload_1\n+        30: aload_0\n+        31: iload_2\n+        32: invokevirtual #72                 // Method getPrefix:(I)I\n+        35: iconst_1\n+        36: bastore\n+        37: iinc          2, 1\n+        40: iload_2\n+        41: aload_0\n+        42: getfield      #39                 // Field isUsed:[Z\n+        45: arraylength\n+        46: if_icmplt     11\n         49: aload_0\n-        50: invokevirtual #9                  // Method getClearCode:()I\n+        50: invokevirtual #41                 // Method getClearCode:()I\n         53: iconst_1\n         54: iadd\n         55: istore_2\n-        56: iload_2\n-        57: aload_1\n-        58: arraylength\n-        59: if_icmpge     87\n-        62: aload_1\n-        63: iload_2\n-        64: baload\n-        65: ifne          81\n-        68: aload_0\n-        69: getfield      #8                  // Field isUsed:[Z\n-        72: iload_2\n-        73: iconst_0\n-        74: bastore\n-        75: aload_0\n-        76: iload_2\n-        77: iconst_m1\n-        78: invokevirtual #14                 // Method setPrefix:(II)V\n-        81: iinc          2, 1\n-        84: goto          56\n+        56: goto          81\n+        59: aload_1\n+        60: iload_2\n+        61: baload\n+        62: ifne          78\n+        65: aload_0\n+        66: getfield      #39                 // Field isUsed:[Z\n+        69: iload_2\n+        70: iconst_0\n+        71: bastore\n+        72: aload_0\n+        73: iload_2\n+        74: iconst_m1\n+        75: invokevirtual #76                 // Method setPrefix:(II)V\n+        78: iinc          2, 1\n+        81: iload_2\n+        82: aload_1\n+        83: arraylength\n+        84: if_icmplt     59\n         87: return\n       LineNumberTable:\n         line 69: 0\n         line 70: 6\n-        line 71: 17\n-        line 72: 35\n-        line 70: 43\n+        line 71: 11\n+        line 72: 29\n+        line 70: 37\n         line 75: 49\n-        line 76: 62\n-        line 77: 68\n-        line 78: 75\n-        line 75: 81\n+        line 76: 59\n+        line 77: 65\n+        line 78: 72\n+        line 75: 78\n         line 81: 87\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            8      41     2     i   I\n-           56      31     2     i   I\n             0      88     0  this   Lorg/apache/commons/compress/archivers/zip/UnshrinkingInputStream;\n             6      82     1 isParent   [Z\n+            8      41     2     i   I\n+           56      31     2     i   I\n       StackMapTable: number_of_entries = 6\n         frame_type = 253 /* append */\n-          offset_delta = 8\n+          offset_delta = 11\n           locals = [ class \"[Z\", int ]\n-        frame_type = 34 /* same */\n-        frame_type = 250 /* chop */\n-          offset_delta = 5\n-        frame_type = 252 /* append */\n-          offset_delta = 6\n-          locals = [ int ]\n-        frame_type = 24 /* same */\n-        frame_type = 250 /* chop */\n-          offset_delta = 5\n+        frame_type = 25 /* same */\n+        frame_type = 2 /* same */\n+        frame_type = 18 /* same */\n+        frame_type = 18 /* same */\n+        frame_type = 2 /* same */\n \n   protected int decompressNextSymbol() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0004) ACC_PROTECTED\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n-      stack=4, locals=4, args_size=1\n+      stack=5, locals=4, args_size=1\n          0: aload_0\n-         1: invokevirtual #15                 // Method readNextCode:()I\n+         1: invokevirtual #83                 // Method readNextCode:()I\n          4: istore_1\n          5: iload_1\n          6: ifge          11\n          9: iconst_m1\n         10: ireturn\n         11: iload_1\n         12: aload_0\n-        13: invokevirtual #9                  // Method getClearCode:()I\n+        13: invokevirtual #41                 // Method getClearCode:()I\n         16: if_icmpeq     46\n         19: iconst_0\n         20: istore_2\n         21: iload_1\n         22: istore_3\n         23: aload_0\n-        24: getfield      #8                  // Field isUsed:[Z\n+        24: getfield      #39                 // Field isUsed:[Z\n         27: iload_1\n         28: baload\n         29: ifne          39\n         32: aload_0\n-        33: invokevirtual #16                 // Method addRepeatOfPreviousCode:()I\n+        33: invokevirtual #86                 // Method addRepeatOfPreviousCode:()I\n         36: istore_3\n         37: iconst_1\n         38: istore_2\n         39: aload_0\n         40: iload_3\n         41: iload_2\n-        42: invokevirtual #17                 // Method expandCodeToOutputStack:(IZ)I\n+        42: invokevirtual #89                 // Method expandCodeToOutputStack:(IZ)I\n         45: ireturn\n         46: aload_0\n-        47: invokevirtual #15                 // Method readNextCode:()I\n+        47: invokevirtual #83                 // Method readNextCode:()I\n         50: istore_2\n         51: iload_2\n         52: ifge          65\n-        55: new           #18                 // class java/io/IOException\n+        55: new           #16                 // class java/io/IOException\n         58: dup\n-        59: ldc           #19                 // String Unexpected EOF;\n-        61: invokespecial #20                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        59: ldc           #93                 // String Unexpected EOF;\n+        61: invokespecial #95                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         64: athrow\n         65: iload_2\n         66: iconst_1\n         67: if_icmpne     96\n         70: aload_0\n-        71: invokevirtual #21                 // Method getCodeSize:()I\n+        71: invokevirtual #98                 // Method getCodeSize:()I\n         74: bipush        13\n         76: if_icmplt     89\n-        79: new           #18                 // class java/io/IOException\n+        79: new           #16                 // class java/io/IOException\n         82: dup\n-        83: ldc           #22                 // String Attempt to increase code size beyond maximum\n-        85: invokespecial #20                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        83: ldc           #101                // String Attempt to increase code size beyond maximum\n+        85: invokespecial #95                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         88: athrow\n         89: aload_0\n-        90: invokevirtual #23                 // Method incrementCodeSize:()V\n-        93: goto          145\n+        90: invokevirtual #103                // Method incrementCodeSize:()V\n+        93: goto          142\n         96: iload_2\n         97: iconst_2\n         98: if_icmpne     118\n        101: aload_0\n-       102: invokespecial #24                 // Method partialClear:()V\n+       102: invokespecial #106                // Method partialClear:()V\n        105: aload_0\n        106: aload_0\n-       107: invokevirtual #9                  // Method getClearCode:()I\n+       107: invokevirtual #41                 // Method getClearCode:()I\n        110: iconst_1\n        111: iadd\n-       112: invokevirtual #10                 // Method setTableSize:(I)V\n-       115: goto          145\n-       118: new           #18                 // class java/io/IOException\n+       112: invokevirtual #44                 // Method setTableSize:(I)V\n+       115: goto          142\n+       118: new           #16                 // class java/io/IOException\n        121: dup\n-       122: new           #25                 // class java/lang/StringBuilder\n+       122: new           #108                // class java/lang/StringBuilder\n        125: dup\n-       126: invokespecial #26                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       129: ldc           #27                 // String Invalid clear code subcode\n-       131: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       134: iload_2\n-       135: invokevirtual #29                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       138: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       141: invokespecial #20                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       144: athrow\n-       145: iconst_0\n-       146: ireturn\n+       126: ldc           #110                // String Invalid clear code subcode\n+       128: invokespecial #112                // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+       131: iload_2\n+       132: invokevirtual #113                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       135: invokevirtual #117                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       138: invokespecial #95                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       141: athrow\n+       142: iconst_0\n+       143: ireturn\n       LineNumberTable:\n         line 97: 0\n         line 98: 5\n         line 99: 9\n         line 101: 11\n         line 102: 19\n         line 103: 21\n@@ -472,26 +465,27 @@\n         line 110: 46\n         line 111: 51\n         line 112: 55\n         line 114: 65\n         line 115: 70\n         line 116: 79\n         line 118: 89\n-        line 119: 96\n+        line 119: 93\n         line 120: 101\n         line 121: 105\n+        line 122: 115\n         line 123: 118\n-        line 125: 145\n+        line 125: 142\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n+            0     144     0  this   Lorg/apache/commons/compress/archivers/zip/UnshrinkingInputStream;\n+            5     139     1  code   I\n            21      25     2 addedUnfinishedEntry   Z\n            23      23     3 effectiveCode   I\n-            0     147     0  this   Lorg/apache/commons/compress/archivers/zip/UnshrinkingInputStream;\n-            5     142     1  code   I\n-           51      96     2 subCode   I\n+           51      93     2 subCode   I\n       StackMapTable: number_of_entries = 8\n         frame_type = 252 /* append */\n           offset_delta = 11\n           locals = [ int ]\n         frame_type = 253 /* append */\n           offset_delta = 27\n           locals = [ int, int ]\n@@ -499,12 +493,10 @@\n           offset_delta = 6\n         frame_type = 252 /* append */\n           offset_delta = 18\n           locals = [ int ]\n         frame_type = 23 /* same */\n         frame_type = 6 /* same */\n         frame_type = 21 /* same */\n-        frame_type = 26 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n+        frame_type = 23 /* same */\n }\n SourceFile: \"UnshrinkingInputStream.java\"\n"}]}
