{"diffoscope-json-version": 1, "source1": "first/ExplodingInputStream.class", "source2": "second/ExplodingInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -87,21 +87,42 @@\n     \n     public long getUncompressedCount() {\n         return this.uncompressedCount;\n     }\n     \n     private void init() throws IOException {\n         if (this.bits == null) {\n-            try (final CountingInputStream i = new CountingInputStream((InputStream)new CloseShieldFilterInputStream(this.in))) {\n-                if (this.numberOfTrees == 3) {\n-                    this.literalTree = BinaryTree.decode((InputStream)i, 256);\n+            Throwable t = null;\n+            try {\n+                final CountingInputStream i = new CountingInputStream((InputStream)new CloseShieldFilterInputStream(this.in));\n+                try {\n+                    if (this.numberOfTrees == 3) {\n+                        this.literalTree = BinaryTree.decode((InputStream)i, 256);\n+                    }\n+                    this.lengthTree = BinaryTree.decode((InputStream)i, 64);\n+                    this.distanceTree = BinaryTree.decode((InputStream)i, 64);\n+                    this.treeSizes += i.getBytesRead();\n+                }\n+                finally {\n+                    if (i != null) {\n+                        i.close();\n+                    }\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n                 }\n-                this.lengthTree = BinaryTree.decode((InputStream)i, 64);\n-                this.distanceTree = BinaryTree.decode((InputStream)i, 64);\n-                this.treeSizes += i.getBytesRead();\n             }\n             this.bits = new BitStream(this.in);\n         }\n     }\n     \n     @Override\n     public int read() throws IOException {\n"}]}
