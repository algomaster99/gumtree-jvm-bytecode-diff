{"diffoscope-json-version": 1, "source1": "first/CPClass.class", "source2": "second/CPClass.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,32 +9,22 @@\n {\n     private int index;\n     public String name;\n     private final CPUTF8 utf8;\n     private boolean hashcodeComputed;\n     private int cachedHashCode;\n     \n-    public CPClass(final CPUTF8 name, final int globalIndex) {\n-        super((byte)7, globalIndex);\n-        this.name = ((CPUTF8)Objects.requireNonNull(name, \"name\")).underlyingString();\n-        this.utf8 = name;\n+    public CPClass(final CPUTF8 cputf8, final int n) {\n+        super((byte)7, n);\n+        this.name = ((CPUTF8)Objects.requireNonNull(cputf8, \"name\")).underlyingString();\n+        this.utf8 = cputf8;\n     }\n     \n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n-            return true;\n-        }\n-        if (obj == null) {\n-            return false;\n-        }\n-        if (this.getClass() != obj.getClass()) {\n-            return false;\n-        }\n-        final CPClass other = (CPClass)obj;\n-        return this.utf8.equals((Object)other.utf8);\n+    public boolean equals(final Object o) {\n+        return this == o || (o != null && this.getClass() == o.getClass() && this.utf8.equals((Object)((CPClass)o).utf8));\n     }\n     \n     protected ClassFileEntry[] getNestedClassFileEntries() {\n         return new ClassFileEntry[] { (ClassFileEntry)this.utf8 };\n     }\n     \n     private void generateHashCode() {\n@@ -45,24 +35,24 @@\n     public int hashCode() {\n         if (!this.hashcodeComputed) {\n             this.generateHashCode();\n         }\n         return this.cachedHashCode;\n     }\n     \n-    protected void resolve(final ClassConstantPool pool) {\n-        super.resolve(pool);\n-        this.index = pool.indexOf((ClassFileEntry)this.utf8);\n+    protected void resolve(final ClassConstantPool classConstantPool) {\n+        super.resolve(classConstantPool);\n+        this.index = classConstantPool.indexOf((ClassFileEntry)this.utf8);\n     }\n     \n     public String toString() {\n         return \"Class: \" + this.getName();\n     }\n     \n     public String getName() {\n         return this.name;\n     }\n     \n-    protected void writeBody(final DataOutputStream dos) throws IOException {\n-        dos.writeShort(this.index);\n+    protected void writeBody(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.index);\n     }\n }\n"}]}
