{"diffoscope-json-version": 1, "source1": "first/FramedLZ4CompressorInputStream.class", "source2": "second/FramedLZ4CompressorInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -37,14 +37,19 @@\n     private InputStream currentBlock;\n     private boolean endReached;\n     private boolean inUncompressed;\n     private final XXHash32 contentHash;\n     private final XXHash32 blockHash;\n     private byte[] blockDependencyBuffer;\n     \n+    static {\n+        LZ4_SIGNATURE = new byte[] { 4, 34, 77, 24 };\n+        SKIPPABLE_FRAME_TRAILER = new byte[] { 42, 77, 24 };\n+    }\n+    \n     public FramedLZ4CompressorInputStream(final InputStream in) throws IOException {\n         this(in, false);\n     }\n     \n     public FramedLZ4CompressorInputStream(final InputStream in, final boolean decompressConcatenated) throws IOException {\n         this.oneByte = new byte[1];\n         this.supplier = this::readOneByte;\n@@ -65,14 +70,15 @@\n                 this.currentBlock.close();\n                 this.currentBlock = null;\n             }\n         }\n         finally {\n             this.inputStream.close();\n         }\n+        this.inputStream.close();\n     }\n     \n     public int read(final byte[] b, final int off, final int len) throws IOException {\n         if (len == 0) {\n             return 0;\n         }\n         if (this.endReached) {\n@@ -108,23 +114,23 @@\n     }\n     \n     private boolean readSignature(final boolean firstFrame) throws IOException {\n         final String garbageMessage = firstFrame ? \"Not a LZ4 frame stream\" : \"LZ4 frame stream followed by garbage\";\n         final byte[] b = new byte[4];\n         int read = IOUtils.readFully((InputStream)this.inputStream, b);\n         this.count(read);\n-        if (0 == read && !firstFrame) {\n+        if (read == 0 && !firstFrame) {\n             this.endReached = true;\n             return false;\n         }\n         if (4 != read) {\n             throw new IOException(garbageMessage);\n         }\n         read = this.skipSkippableFrame(b);\n-        if (0 == read && !firstFrame) {\n+        if (read == 0 && !firstFrame) {\n             this.endReached = true;\n             return false;\n         }\n         if (4 != read || !matches(b, 4)) {\n             throw new IOException(garbageMessage);\n         }\n         return true;\n@@ -235,15 +241,15 @@\n         final int read = IOUtils.readFully((InputStream)this.inputStream, checksum);\n         this.count(read);\n         if (4 != read) {\n             throw new IOException(\"Premature end of stream while reading \" + kind + \" checksum\");\n         }\n         final long expectedHash = hash.getValue();\n         if (expectedHash != ByteUtils.fromLittleEndian(checksum)) {\n-            throw new IOException(kind + \" checksum mismatch.\");\n+            throw new IOException(String.valueOf(kind) + \" checksum mismatch.\");\n         }\n     }\n     \n     private int readOneByte() throws IOException {\n         final int b = this.inputStream.read();\n         if (b != -1) {\n             this.count(1);\n@@ -313,13 +319,8 @@\n         byte[] shortenedSig = signature;\n         if (signature.length > FramedLZ4CompressorInputStream.LZ4_SIGNATURE.length) {\n             shortenedSig = new byte[FramedLZ4CompressorInputStream.LZ4_SIGNATURE.length];\n             System.arraycopy(signature, 0, shortenedSig, 0, FramedLZ4CompressorInputStream.LZ4_SIGNATURE.length);\n         }\n         return Arrays.equals(shortenedSig, FramedLZ4CompressorInputStream.LZ4_SIGNATURE);\n     }\n-    \n-    static {\n-        LZ4_SIGNATURE = new byte[] { 4, 34, 77, 24 };\n-        SKIPPABLE_FRAME_TRAILER = new byte[] { 42, 77, 24 };\n-    }\n }\n"}]}
