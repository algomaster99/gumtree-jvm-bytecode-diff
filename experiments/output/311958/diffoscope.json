{"diffoscope-json-version": 1, "source1": "first/ZipShort.class", "source2": "second/ZipShort.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,109 +1,109 @@\n-  SHA-256 checksum c72bc273f749a74878fdb9192460b6ef0daa6a65b7094b36497b5c2bf63fc69e\n+  SHA-256 checksum 575bfeae9f3cd166a81664580a16e7f47f582cec30db17d5cd4d06e3a86267ca\n   Compiled from \"ZipShort.java\"\n public final class org.apache.commons.compress.archivers.zip.ZipShort implements java.lang.Cloneable,java.io.Serializable\n   minor version: 0\n   major version: 52\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n-  this_class: #12                         // org/apache/commons/compress/archivers/zip/ZipShort\n-  super_class: #22                        // java/lang/Object\n+  this_class: #2                          // org/apache/commons/compress/archivers/zip/ZipShort\n+  super_class: #26                        // java/lang/Object\n   interfaces: 2, fields: 3, methods: 14, attributes: 1\n Constant pool:\n-   #1 = Methodref          #12.#61        // org/apache/commons/compress/archivers/zip/ZipShort.putShort:(I[BI)V\n-   #2 = Methodref          #12.#62        // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-   #3 = Methodref          #63.#64        // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n-   #4 = Methodref          #63.#65        // org/apache/commons/compress/utils/ByteUtils.toLittleEndian:([BJII)V\n-   #5 = Methodref          #12.#66        // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":([BI)V\n-   #6 = Methodref          #22.#67        // java/lang/Object.\"<init>\":()V\n-   #7 = Fieldref           #12.#68        // org/apache/commons/compress/archivers/zip/ZipShort.value:I\n-   #8 = Methodref          #22.#69        // java/lang/Object.clone:()Ljava/lang/Object;\n-   #9 = Class              #70            // java/lang/CloneNotSupportedException\n-  #10 = Class              #71            // java/lang/IllegalStateException\n-  #11 = Methodref          #10.#72        // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n-  #12 = Class              #73            // org/apache/commons/compress/archivers/zip/ZipShort\n-  #13 = Methodref          #12.#74        // org/apache/commons/compress/archivers/zip/ZipShort.getValue:()I\n-  #14 = Class              #75            // java/lang/StringBuilder\n-  #15 = Methodref          #14.#67        // java/lang/StringBuilder.\"<init>\":()V\n-  #16 = String             #76            // ZipShort value:\n-  #17 = Methodref          #14.#77        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #18 = Methodref          #14.#78        // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-  #19 = Methodref          #14.#79        // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-  #20 = Methodref          #12.#80        // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-  #21 = Fieldref           #12.#81        // org/apache/commons/compress/archivers/zip/ZipShort.ZERO:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #22 = Class              #82            // java/lang/Object\n-  #23 = Class              #83            // java/lang/Cloneable\n-  #24 = Class              #84            // java/io/Serializable\n-  #25 = Utf8               ZERO\n-  #26 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #27 = Utf8               serialVersionUID\n-  #28 = Utf8               J\n-  #29 = Utf8               ConstantValue\n-  #30 = Long               1l\n+   #1 = Methodref          #2.#3          // org/apache/commons/compress/archivers/zip/ZipShort.putShort:(I[BI)V\n+   #2 = Class              #4             // org/apache/commons/compress/archivers/zip/ZipShort\n+   #3 = NameAndType        #5:#6          // putShort:(I[BI)V\n+   #4 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+   #5 = Utf8               putShort\n+   #6 = Utf8               (I[BI)V\n+   #7 = Methodref          #2.#8          // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+   #8 = NameAndType        #9:#10         // getValue:([BI)I\n+   #9 = Utf8               getValue\n+  #10 = Utf8               ([BI)I\n+  #11 = Methodref          #12.#13        // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n+  #12 = Class              #14            // org/apache/commons/compress/utils/ByteUtils\n+  #13 = NameAndType        #15:#16        // fromLittleEndian:([BII)J\n+  #14 = Utf8               org/apache/commons/compress/utils/ByteUtils\n+  #15 = Utf8               fromLittleEndian\n+  #16 = Utf8               ([BII)J\n+  #17 = Methodref          #12.#18        // org/apache/commons/compress/utils/ByteUtils.toLittleEndian:([BJII)V\n+  #18 = NameAndType        #19:#20        // toLittleEndian:([BJII)V\n+  #19 = Utf8               toLittleEndian\n+  #20 = Utf8               ([BJII)V\n+  #21 = Methodref          #2.#22         // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":([BI)V\n+  #22 = NameAndType        #23:#24        // \"<init>\":([BI)V\n+  #23 = Utf8               <init>\n+  #24 = Utf8               ([BI)V\n+  #25 = Methodref          #26.#27        // java/lang/Object.\"<init>\":()V\n+  #26 = Class              #28            // java/lang/Object\n+  #27 = NameAndType        #23:#29        // \"<init>\":()V\n+  #28 = Utf8               java/lang/Object\n+  #29 = Utf8               ()V\n+  #30 = Fieldref           #2.#31         // org/apache/commons/compress/archivers/zip/ZipShort.value:I\n+  #31 = NameAndType        #32:#33        // value:I\n   #32 = Utf8               value\n   #33 = Utf8               I\n-  #34 = Utf8               getBytes\n-  #35 = Utf8               (I)[B\n-  #36 = Utf8               Code\n-  #37 = Utf8               LineNumberTable\n-  #38 = Utf8               getValue\n-  #39 = Utf8               ([B)I\n-  #40 = Utf8               ([BI)I\n-  #41 = Utf8               putShort\n-  #42 = Utf8               (I[BI)V\n-  #43 = Utf8               <init>\n-  #44 = Utf8               ([B)V\n-  #45 = Utf8               ([BI)V\n-  #46 = Utf8               (I)V\n-  #47 = Utf8               clone\n-  #48 = Utf8               ()Ljava/lang/Object;\n-  #49 = Utf8               StackMapTable\n-  #50 = Utf8               equals\n-  #51 = Utf8               (Ljava/lang/Object;)Z\n-  #52 = Utf8               ()[B\n-  #53 = Utf8               ()I\n-  #54 = Utf8               hashCode\n-  #55 = Utf8               toString\n-  #56 = Utf8               ()Ljava/lang/String;\n-  #57 = Utf8               <clinit>\n-  #58 = Utf8               ()V\n-  #59 = Utf8               SourceFile\n-  #60 = Utf8               ZipShort.java\n-  #61 = NameAndType        #41:#42        // putShort:(I[BI)V\n-  #62 = NameAndType        #38:#40        // getValue:([BI)I\n-  #63 = Class              #85            // org/apache/commons/compress/utils/ByteUtils\n-  #64 = NameAndType        #86:#87        // fromLittleEndian:([BII)J\n-  #65 = NameAndType        #88:#89        // toLittleEndian:([BJII)V\n-  #66 = NameAndType        #43:#45        // \"<init>\":([BI)V\n-  #67 = NameAndType        #43:#58        // \"<init>\":()V\n-  #68 = NameAndType        #32:#33        // value:I\n-  #69 = NameAndType        #47:#48        // clone:()Ljava/lang/Object;\n-  #70 = Utf8               java/lang/CloneNotSupportedException\n-  #71 = Utf8               java/lang/IllegalStateException\n-  #72 = NameAndType        #43:#90        // \"<init>\":(Ljava/lang/Throwable;)V\n-  #73 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-  #74 = NameAndType        #38:#53        // getValue:()I\n-  #75 = Utf8               java/lang/StringBuilder\n-  #76 = Utf8               ZipShort value:\n-  #77 = NameAndType        #91:#92        // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #78 = NameAndType        #91:#93        // append:(I)Ljava/lang/StringBuilder;\n-  #79 = NameAndType        #55:#56        // toString:()Ljava/lang/String;\n-  #80 = NameAndType        #43:#46        // \"<init>\":(I)V\n-  #81 = NameAndType        #25:#26        // ZERO:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #82 = Utf8               java/lang/Object\n-  #83 = Utf8               java/lang/Cloneable\n-  #84 = Utf8               java/io/Serializable\n-  #85 = Utf8               org/apache/commons/compress/utils/ByteUtils\n-  #86 = Utf8               fromLittleEndian\n-  #87 = Utf8               ([BII)J\n-  #88 = Utf8               toLittleEndian\n-  #89 = Utf8               ([BJII)V\n-  #90 = Utf8               (Ljava/lang/Throwable;)V\n-  #91 = Utf8               append\n-  #92 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #93 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #34 = Methodref          #26.#35        // java/lang/Object.clone:()Ljava/lang/Object;\n+  #35 = NameAndType        #36:#37        // clone:()Ljava/lang/Object;\n+  #36 = Utf8               clone\n+  #37 = Utf8               ()Ljava/lang/Object;\n+  #38 = Class              #39            // java/lang/CloneNotSupportedException\n+  #39 = Utf8               java/lang/CloneNotSupportedException\n+  #40 = Class              #41            // java/lang/IllegalStateException\n+  #41 = Utf8               java/lang/IllegalStateException\n+  #42 = Methodref          #40.#43        // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n+  #43 = NameAndType        #23:#44        // \"<init>\":(Ljava/lang/Throwable;)V\n+  #44 = Utf8               (Ljava/lang/Throwable;)V\n+  #45 = Methodref          #2.#46         // org/apache/commons/compress/archivers/zip/ZipShort.getValue:()I\n+  #46 = NameAndType        #9:#47         // getValue:()I\n+  #47 = Utf8               ()I\n+  #48 = Class              #49            // java/lang/StringBuilder\n+  #49 = Utf8               java/lang/StringBuilder\n+  #50 = Methodref          #48.#27        // java/lang/StringBuilder.\"<init>\":()V\n+  #51 = String             #52            // ZipShort value:\n+  #52 = Utf8               ZipShort value:\n+  #53 = Methodref          #48.#54        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #54 = NameAndType        #55:#56        // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #55 = Utf8               append\n+  #56 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #57 = Methodref          #48.#58        // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+  #58 = NameAndType        #55:#59        // append:(I)Ljava/lang/StringBuilder;\n+  #59 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #60 = Methodref          #48.#61        // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #61 = NameAndType        #62:#63        // toString:()Ljava/lang/String;\n+  #62 = Utf8               toString\n+  #63 = Utf8               ()Ljava/lang/String;\n+  #64 = Methodref          #2.#65         // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+  #65 = NameAndType        #23:#66        // \"<init>\":(I)V\n+  #66 = Utf8               (I)V\n+  #67 = Fieldref           #2.#68         // org/apache/commons/compress/archivers/zip/ZipShort.ZERO:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #68 = NameAndType        #69:#70        // ZERO:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #69 = Utf8               ZERO\n+  #70 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #71 = Class              #72            // java/lang/Cloneable\n+  #72 = Utf8               java/lang/Cloneable\n+  #73 = Class              #74            // java/io/Serializable\n+  #74 = Utf8               java/io/Serializable\n+  #75 = Utf8               serialVersionUID\n+  #76 = Utf8               J\n+  #77 = Utf8               ConstantValue\n+  #78 = Long               1l\n+  #80 = Utf8               getBytes\n+  #81 = Utf8               (I)[B\n+  #82 = Utf8               Code\n+  #83 = Utf8               LineNumberTable\n+  #84 = Utf8               ([B)I\n+  #85 = Utf8               ([B)V\n+  #86 = Utf8               StackMapTable\n+  #87 = Utf8               equals\n+  #88 = Utf8               (Ljava/lang/Object;)Z\n+  #89 = Utf8               ()[B\n+  #90 = Utf8               hashCode\n+  #91 = Utf8               <clinit>\n+  #92 = Utf8               SourceFile\n+  #93 = Utf8               ZipShort.java\n {\n   public static final org.apache.commons.compress.archivers.zip.ZipShort ZERO;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n \n   private static final long serialVersionUID = 1l;\n     descriptor: J\n@@ -136,28 +136,28 @@\n   public static int getValue(byte[]);\n     descriptor: ([B)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: iconst_0\n-         2: invokestatic  #2                  // Method getValue:([BI)I\n+         2: invokestatic  #7                  // Method getValue:([BI)I\n          5: ireturn\n       LineNumberTable:\n         line 55: 0\n \n   public static int getValue(byte[], int);\n     descriptor: ([BI)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n          2: iconst_2\n-         3: invokestatic  #3                  // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n+         3: invokestatic  #11                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n          6: l2i\n          7: ireturn\n       LineNumberTable:\n         line 65: 0\n \n   public static void putShort(int, byte[], int);\n     descriptor: (I[BI)V\n@@ -165,81 +165,81 @@\n     Code:\n       stack=5, locals=3, args_size=3\n          0: aload_1\n          1: iload_0\n          2: i2l\n          3: iload_2\n          4: iconst_2\n-         5: invokestatic  #4                  // Method org/apache/commons/compress/utils/ByteUtils.toLittleEndian:([BJII)V\n+         5: invokestatic  #17                 // Method org/apache/commons/compress/utils/ByteUtils.toLittleEndian:([BJII)V\n          8: return\n       LineNumberTable:\n         line 77: 0\n         line 78: 8\n \n   public org.apache.commons.compress.archivers.zip.ZipShort(byte[]);\n     descriptor: ([B)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n-         3: invokespecial #5                  // Method \"<init>\":([BI)V\n+         3: invokespecial #21                 // Method \"<init>\":([BI)V\n          6: return\n       LineNumberTable:\n         line 87: 0\n         line 88: 6\n \n   public org.apache.commons.compress.archivers.zip.ZipShort(byte[], int);\n     descriptor: ([BI)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n-         1: invokespecial #6                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #25                 // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n          5: aload_1\n          6: iload_2\n-         7: invokestatic  #2                  // Method getValue:([BI)I\n-        10: putfield      #7                  // Field value:I\n+         7: invokestatic  #7                  // Method getValue:([BI)I\n+        10: putfield      #30                 // Field value:I\n         13: return\n       LineNumberTable:\n         line 95: 0\n         line 96: 4\n         line 97: 13\n \n   public org.apache.commons.compress.archivers.zip.ZipShort(int);\n     descriptor: (I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n-         1: invokespecial #6                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #25                 // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n          5: iload_1\n-         6: putfield      #7                  // Field value:I\n+         6: putfield      #30                 // Field value:I\n          9: return\n       LineNumberTable:\n         line 103: 0\n         line 104: 4\n         line 105: 9\n \n   public java.lang.Object clone();\n     descriptor: ()Ljava/lang/Object;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: invokespecial #8                  // Method java/lang/Object.clone:()Ljava/lang/Object;\n+         1: invokespecial #34                 // Method java/lang/Object.clone:()Ljava/lang/Object;\n          4: areturn\n          5: astore_1\n-         6: new           #10                 // class java/lang/IllegalStateException\n+         6: new           #40                 // class java/lang/IllegalStateException\n          9: dup\n         10: aload_1\n-        11: invokespecial #11                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n+        11: invokespecial #42                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n         14: athrow\n       Exception table:\n          from    to  target type\n              0     4     5   Class java/lang/CloneNotSupportedException\n       LineNumberTable:\n         line 110: 0\n         line 111: 5\n@@ -250,23 +250,23 @@\n \n   public boolean equals(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n-         1: instanceof    #12                 // class org/apache/commons/compress/archivers/zip/ZipShort\n+         1: instanceof    #2                  // class org/apache/commons/compress/archivers/zip/ZipShort\n          4: ifne          9\n          7: iconst_0\n          8: ireturn\n          9: aload_0\n-        10: getfield      #7                  // Field value:I\n+        10: getfield      #30                 // Field value:I\n         13: aload_1\n-        14: checkcast     #12                 // class org/apache/commons/compress/archivers/zip/ZipShort\n-        17: invokevirtual #13                 // Method getValue:()I\n+        14: checkcast     #2                  // class org/apache/commons/compress/archivers/zip/ZipShort\n+        17: invokevirtual #45                 // Method getValue:()I\n         20: if_icmpne     27\n         23: iconst_1\n         24: goto          28\n         27: iconst_0\n         28: ireturn\n       LineNumberTable:\n         line 124: 0\n@@ -284,74 +284,74 @@\n     Code:\n       stack=5, locals=2, args_size=1\n          0: iconst_2\n          1: newarray       byte\n          3: astore_1\n          4: aload_1\n          5: aload_0\n-         6: getfield      #7                  // Field value:I\n+         6: getfield      #30                 // Field value:I\n          9: i2l\n         10: iconst_0\n         11: iconst_2\n-        12: invokestatic  #4                  // Method org/apache/commons/compress/utils/ByteUtils.toLittleEndian:([BJII)V\n+        12: invokestatic  #17                 // Method org/apache/commons/compress/utils/ByteUtils.toLittleEndian:([BJII)V\n         15: aload_1\n         16: areturn\n       LineNumberTable:\n         line 135: 0\n         line 136: 4\n         line 137: 15\n \n   public int getValue();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field value:I\n+         1: getfield      #30                 // Field value:I\n          4: ireturn\n       LineNumberTable:\n         line 145: 0\n \n   public int hashCode();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field value:I\n+         1: getfield      #30                 // Field value:I\n          4: ireturn\n       LineNumberTable:\n         line 154: 0\n \n   public java.lang.String toString();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n-         0: new           #14                 // class java/lang/StringBuilder\n+         0: new           #48                 // class java/lang/StringBuilder\n          3: dup\n-         4: invokespecial #15                 // Method java/lang/StringBuilder.\"<init>\":()V\n-         7: ldc           #16                 // String ZipShort value:\n-         9: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+         4: invokespecial #50                 // Method java/lang/StringBuilder.\"<init>\":()V\n+         7: ldc           #51                 // String ZipShort value:\n+         9: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         12: aload_0\n-        13: getfield      #7                  // Field value:I\n-        16: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        19: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        13: getfield      #30                 // Field value:I\n+        16: invokevirtual #57                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        19: invokevirtual #60                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n         22: areturn\n       LineNumberTable:\n         line 159: 0\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=3, locals=0, args_size=0\n-         0: new           #12                 // class org/apache/commons/compress/archivers/zip/ZipShort\n+         0: new           #2                  // class org/apache/commons/compress/archivers/zip/ZipShort\n          3: dup\n          4: iconst_0\n-         5: invokespecial #20                 // Method \"<init>\":(I)V\n-         8: putstatic     #21                 // Field ZERO:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+         5: invokespecial #64                 // Method \"<init>\":(I)V\n+         8: putstatic     #67                 // Field ZERO:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n         11: return\n       LineNumberTable:\n         line 34: 0\n }\n SourceFile: \"ZipShort.java\"\n"}]}
