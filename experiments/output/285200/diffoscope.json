{"diffoscope-json-version": 1, "source1": "first/StackMapEntry.class", "source2": "second/StackMapEntry.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,268 +1,263 @@\n-  SHA-256 checksum 0188bfad650e8365d1bd825091a6d128f192786eae89cc923c6473827a8547bc\n+  SHA-256 checksum 526465e979a64322306252191096117060ee073ce3ec8ded2c4a4e428b01b1ec\n   Compiled from \"StackMapEntry.java\"\n public final class org.apache.bcel.classfile.StackMapEntry implements org.apache.bcel.classfile.Node,java.lang.Cloneable\n   minor version: 0\n   major version: 52\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n   this_class: #24                         // org/apache/bcel/classfile/StackMapEntry\n   super_class: #64                        // java/lang/Object\n   interfaces: 2, fields: 6, methods: 26, attributes: 3\n Constant pool:\n-    #1 = InterfaceMethodref #132.#133     // java/io/DataInput.readByte:()B\n-    #2 = Methodref          #24.#134      // org/apache/bcel/classfile/StackMapEntry.\"<init>\":(II[Lorg/apache/bcel/classfile/StackMapType;[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n-    #3 = Fieldref           #24.#135      // org/apache/bcel/classfile/StackMapEntry.frameType:I\n-    #4 = Class              #136          // org/apache/bcel/Const\n-    #5 = Fieldref           #24.#137      // org/apache/bcel/classfile/StackMapEntry.byteCodeOffset:I\n-    #6 = Class              #138          // org/apache/bcel/classfile/StackMapType\n-    #7 = Fieldref           #24.#139      // org/apache/bcel/classfile/StackMapEntry.typesOfStackItems:[Lorg/apache/bcel/classfile/StackMapType;\n-    #8 = Methodref          #6.#140       // org/apache/bcel/classfile/StackMapType.\"<init>\":(Ljava/io/DataInput;Lorg/apache/bcel/classfile/ConstantPool;)V\n-    #9 = InterfaceMethodref #132.#141     // java/io/DataInput.readShort:()S\n-   #10 = Fieldref           #24.#142      // org/apache/bcel/classfile/StackMapEntry.typesOfLocals:[Lorg/apache/bcel/classfile/StackMapType;\n-   #11 = Class              #143          // org/apache/bcel/classfile/ClassFormatException\n-   #12 = Class              #144          // java/lang/StringBuilder\n-   #13 = Methodref          #12.#145      // java/lang/StringBuilder.\"<init>\":()V\n-   #14 = String             #146          // Invalid frame type found while parsing stack map table:\n-   #15 = Methodref          #12.#147      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #16 = Methodref          #12.#148      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #17 = Methodref          #12.#149      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #18 = Methodref          #11.#150      // org/apache/bcel/classfile/ClassFormatException.\"<init>\":(Ljava/lang/String;)V\n-   #19 = Methodref          #64.#145      // java/lang/Object.\"<init>\":()V\n-   #20 = Fieldref           #24.#151      // org/apache/bcel/classfile/StackMapEntry.EMPTY_STACK_MAP_TYPE_ARRAY:[Lorg/apache/bcel/classfile/StackMapType;\n-   #21 = Fieldref           #24.#152      // org/apache/bcel/classfile/StackMapEntry.constantPool:Lorg/apache/bcel/classfile/ConstantPool;\n-   #22 = InterfaceMethodref #153.#154     // org/apache/bcel/classfile/Visitor.visitStackMapEntry:(Lorg/apache/bcel/classfile/StackMapEntry;)V\n-   #23 = Methodref          #64.#155      // java/lang/Object.clone:()Ljava/lang/Object;\n-   #24 = Class              #156          // org/apache/bcel/classfile/StackMapEntry\n-   #25 = Class              #157          // java/lang/CloneNotSupportedException\n-   #26 = Class              #158          // java/lang/Error\n-   #27 = String             #159          // Clone Not Supported\n-   #28 = Methodref          #26.#150      // java/lang/Error.\"<init>\":(Ljava/lang/String;)V\n-   #29 = InvokeDynamic      #0:#165       // #0:apply:(Lorg/apache/bcel/classfile/StackMapEntry;)Ljava/util/function/IntFunction;\n-   #30 = Methodref          #166.#167     // java/util/Arrays.setAll:([Ljava/lang/Object;Ljava/util/function/IntFunction;)V\n-   #31 = InvokeDynamic      #1:#165       // #1:apply:(Lorg/apache/bcel/classfile/StackMapEntry;)Ljava/util/function/IntFunction;\n-   #32 = Methodref          #169.#170     // java/io/DataOutputStream.write:(I)V\n-   #33 = Methodref          #6.#171       // org/apache/bcel/classfile/StackMapType.dump:(Ljava/io/DataOutputStream;)V\n-   #34 = Methodref          #169.#172     // java/io/DataOutputStream.writeShort:(I)V\n-   #35 = String             #173          // Invalid Stack map table tag:\n-   #36 = Methodref          #6.#174       // org/apache/bcel/classfile/StackMapType.hasIndex:()Z\n-   #37 = Class              #175          // java/lang/IllegalStateException\n-   #38 = String             #176          // Invalid StackMap frameType:\n-   #39 = Methodref          #37.#150      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-   #40 = Class              #177          // java/lang/IllegalArgumentException\n-   #41 = String             #178          // Invalid StackMap offset:\n-   #42 = Methodref          #40.#150      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #43 = String             #179          // Invalid StackMap frameType\n-   #44 = Methodref          #12.#180      // java/lang/StringBuilder.\"<init>\":(I)V\n-   #45 = String             #181          // (\n-   #46 = String             #182          // SAME\n-   #47 = String             #183          // SAME_LOCALS_1_STACK\n-   #48 = String             #184          // SAME_LOCALS_1_STACK_EXTENDED\n-   #49 = String             #185          // CHOP\n-   #50 = Methodref          #186.#187     // java/lang/String.valueOf:(I)Ljava/lang/String;\n-   #51 = String             #188          // SAME_EXTENDED\n-   #52 = String             #189          // APPEND\n-   #53 = String             #190          // FULL\n-   #54 = String             #191          // UNKNOWN (\n-   #55 = String             #192          // )\n-   #56 = String             #193          // , offset delta=\n-   #57 = String             #194          // , locals={\n-   #58 = Methodref          #12.#195      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #59 = String             #196          // ,\n-   #60 = String             #197          // }\n-   #61 = String             #198          // , stack items={\n-   #62 = Methodref          #24.#199      // org/apache/bcel/classfile/StackMapEntry.setByteCodeOffset:(I)V\n-   #63 = Methodref          #6.#200       // org/apache/bcel/classfile/StackMapType.copy:()Lorg/apache/bcel/classfile/StackMapType;\n-   #64 = Class              #201          // java/lang/Object\n-   #65 = Class              #202          // org/apache/bcel/classfile/Node\n-   #66 = Class              #203          // java/lang/Cloneable\n+    #1 = InterfaceMethodref #81.#128      // java/io/DataInput.readByte:()B\n+    #2 = Methodref          #24.#129      // org/apache/bcel/classfile/StackMapEntry.\"<init>\":(II[Lorg/apache/bcel/classfile/StackMapType;[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n+    #3 = Fieldref           #24.#130      // org/apache/bcel/classfile/StackMapEntry.frameType:I\n+    #4 = Class              #131          // org/apache/bcel/Const\n+    #5 = Fieldref           #24.#132      // org/apache/bcel/classfile/StackMapEntry.byteCodeOffset:I\n+    #6 = Class              #133          // org/apache/bcel/classfile/StackMapType\n+    #7 = Fieldref           #24.#134      // org/apache/bcel/classfile/StackMapEntry.typesOfStackItems:[Lorg/apache/bcel/classfile/StackMapType;\n+    #8 = Methodref          #6.#135       // org/apache/bcel/classfile/StackMapType.\"<init>\":(Ljava/io/DataInput;Lorg/apache/bcel/classfile/ConstantPool;)V\n+    #9 = InterfaceMethodref #81.#136      // java/io/DataInput.readShort:()S\n+   #10 = Fieldref           #24.#137      // org/apache/bcel/classfile/StackMapEntry.typesOfLocals:[Lorg/apache/bcel/classfile/StackMapType;\n+   #11 = Class              #138          // org/apache/bcel/classfile/ClassFormatException\n+   #12 = Class              #139          // java/lang/StringBuilder\n+   #13 = Methodref          #12.#140      // java/lang/StringBuilder.\"<init>\":()V\n+   #14 = String             #141          // Invalid frame type found while parsing stack map table:\n+   #15 = Methodref          #12.#142      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #16 = Methodref          #12.#143      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #17 = Methodref          #12.#144      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #18 = Methodref          #11.#145      // org/apache/bcel/classfile/ClassFormatException.\"<init>\":(Ljava/lang/String;)V\n+   #19 = Methodref          #64.#140      // java/lang/Object.\"<init>\":()V\n+   #20 = Fieldref           #24.#146      // org/apache/bcel/classfile/StackMapEntry.EMPTY_STACK_MAP_TYPE_ARRAY:[Lorg/apache/bcel/classfile/StackMapType;\n+   #21 = Fieldref           #24.#147      // org/apache/bcel/classfile/StackMapEntry.constantPool:Lorg/apache/bcel/classfile/ConstantPool;\n+   #22 = InterfaceMethodref #148.#149     // org/apache/bcel/classfile/Visitor.visitStackMapEntry:(Lorg/apache/bcel/classfile/StackMapEntry;)V\n+   #23 = Methodref          #64.#150      // java/lang/Object.clone:()Ljava/lang/Object;\n+   #24 = Class              #151          // org/apache/bcel/classfile/StackMapEntry\n+   #25 = Class              #152          // java/lang/CloneNotSupportedException\n+   #26 = Class              #153          // java/lang/Error\n+   #27 = String             #154          // Clone Not Supported\n+   #28 = Methodref          #26.#145      // java/lang/Error.\"<init>\":(Ljava/lang/String;)V\n+   #29 = InvokeDynamic      #0:#160       // #0:apply:(Lorg/apache/bcel/classfile/StackMapEntry;)Ljava/util/function/IntFunction;\n+   #30 = Methodref          #161.#162     // java/util/Arrays.setAll:([Ljava/lang/Object;Ljava/util/function/IntFunction;)V\n+   #31 = InvokeDynamic      #1:#160       // #1:apply:(Lorg/apache/bcel/classfile/StackMapEntry;)Ljava/util/function/IntFunction;\n+   #32 = Methodref          #164.#165     // java/io/DataOutputStream.write:(I)V\n+   #33 = Methodref          #6.#166       // org/apache/bcel/classfile/StackMapType.dump:(Ljava/io/DataOutputStream;)V\n+   #34 = Methodref          #164.#167     // java/io/DataOutputStream.writeShort:(I)V\n+   #35 = String             #168          // Invalid Stack map table tag:\n+   #36 = Methodref          #6.#169       // org/apache/bcel/classfile/StackMapType.hasIndex:()Z\n+   #37 = Class              #170          // java/lang/IllegalStateException\n+   #38 = String             #171          // Invalid StackMap frameType:\n+   #39 = Methodref          #37.#145      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+   #40 = Class              #172          // java/lang/IllegalArgumentException\n+   #41 = String             #173          // Invalid StackMap offset:\n+   #42 = Methodref          #40.#145      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #43 = String             #174          // Invalid StackMap frameType\n+   #44 = Methodref          #12.#175      // java/lang/StringBuilder.\"<init>\":(I)V\n+   #45 = String             #176          // (\n+   #46 = String             #177          // SAME\n+   #47 = String             #178          // SAME_LOCALS_1_STACK\n+   #48 = String             #179          // SAME_LOCALS_1_STACK_EXTENDED\n+   #49 = String             #180          // CHOP\n+   #50 = Methodref          #181.#182     // java/lang/String.valueOf:(I)Ljava/lang/String;\n+   #51 = String             #183          // SAME_EXTENDED\n+   #52 = String             #184          // APPEND\n+   #53 = String             #185          // FULL\n+   #54 = String             #186          // UNKNOWN (\n+   #55 = String             #187          // )\n+   #56 = String             #188          // , offset delta=\n+   #57 = String             #189          // , locals={\n+   #58 = Methodref          #12.#190      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #59 = String             #191          // ,\n+   #60 = String             #192          // }\n+   #61 = String             #193          // , stack items={\n+   #62 = Methodref          #24.#194      // org/apache/bcel/classfile/StackMapEntry.setByteCodeOffset:(I)V\n+   #63 = Methodref          #6.#195       // org/apache/bcel/classfile/StackMapType.copy:()Lorg/apache/bcel/classfile/StackMapType;\n+   #64 = Class              #196          // java/lang/Object\n+   #65 = Class              #197          // org/apache/bcel/classfile/Node\n+   #66 = Class              #198          // java/lang/Cloneable\n    #67 = Utf8               EMPTY_STACK_MAP_TYPE_ARRAY\n    #68 = Utf8               [Lorg/apache/bcel/classfile/StackMapType;\n    #69 = Utf8               frameType\n    #70 = Utf8               I\n    #71 = Utf8               byteCodeOffset\n    #72 = Utf8               typesOfLocals\n    #73 = Utf8               typesOfStackItems\n    #74 = Utf8               constantPool\n    #75 = Utf8               Lorg/apache/bcel/classfile/ConstantPool;\n    #76 = Utf8               <init>\n    #77 = Utf8               (Ljava/io/DataInput;Lorg/apache/bcel/classfile/ConstantPool;)V\n    #78 = Utf8               Code\n    #79 = Utf8               LineNumberTable\n    #80 = Utf8               StackMapTable\n-   #81 = Class              #156          // org/apache/bcel/classfile/StackMapEntry\n-   #82 = Class              #204          // java/io/DataInput\n-   #83 = Class              #205          // org/apache/bcel/classfile/ConstantPool\n-   #84 = Utf8               Exceptions\n-   #85 = Class              #206          // java/io/IOException\n-   #86 = Utf8               (II[Lorg/apache/bcel/classfile/StackMapType;I[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n-   #87 = Class              #68           // \"[Lorg/apache/bcel/classfile/StackMapType;\"\n-   #88 = Utf8               Deprecated\n-   #89 = Utf8               RuntimeVisibleAnnotations\n-   #90 = Utf8               Ljava/lang/Deprecated;\n-   #91 = Utf8               (II[Lorg/apache/bcel/classfile/StackMapType;[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n-   #92 = Utf8               accept\n-   #93 = Utf8               (Lorg/apache/bcel/classfile/Visitor;)V\n-   #94 = Utf8               copy\n-   #95 = Utf8               ()Lorg/apache/bcel/classfile/StackMapEntry;\n-   #96 = Class              #157          // java/lang/CloneNotSupportedException\n-   #97 = Utf8               dump\n-   #98 = Utf8               (Ljava/io/DataOutputStream;)V\n-   #99 = Utf8               getByteCodeOffset\n-  #100 = Utf8               ()I\n-  #101 = Utf8               getConstantPool\n-  #102 = Utf8               ()Lorg/apache/bcel/classfile/ConstantPool;\n-  #103 = Utf8               getFrameType\n-  #104 = Utf8               getMapEntrySize\n-  #105 = Class              #138          // org/apache/bcel/classfile/StackMapType\n-  #106 = Utf8               getNumberOfLocals\n-  #107 = Utf8               getNumberOfStackItems\n-  #108 = Utf8               getTypesOfLocals\n-  #109 = Utf8               ()[Lorg/apache/bcel/classfile/StackMapType;\n-  #110 = Utf8               getTypesOfStackItems\n-  #111 = Utf8               setByteCodeOffset\n-  #112 = Utf8               (I)V\n-  #113 = Utf8               setConstantPool\n-  #114 = Utf8               (Lorg/apache/bcel/classfile/ConstantPool;)V\n-  #115 = Utf8               setFrameType\n-  #116 = Utf8               setNumberOfLocals\n-  #117 = Utf8               setNumberOfStackItems\n-  #118 = Utf8               setTypesOfLocals\n-  #119 = Utf8               ([Lorg/apache/bcel/classfile/StackMapType;)V\n-  #120 = Utf8               setTypesOfStackItems\n-  #121 = Utf8               toString\n-  #122 = Utf8               ()Ljava/lang/String;\n-  #123 = Class              #144          // java/lang/StringBuilder\n-  #124 = Utf8               updateByteCodeOffset\n-  #125 = Utf8               lambda$copy$1\n-  #126 = Utf8               (I)Lorg/apache/bcel/classfile/StackMapType;\n-  #127 = Utf8               lambda$copy$0\n-  #128 = Utf8               <clinit>\n-  #129 = Utf8               ()V\n-  #130 = Utf8               SourceFile\n-  #131 = Utf8               StackMapEntry.java\n-  #132 = Class              #204          // java/io/DataInput\n-  #133 = NameAndType        #207:#208     // readByte:()B\n-  #134 = NameAndType        #76:#91       // \"<init>\":(II[Lorg/apache/bcel/classfile/StackMapType;[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n-  #135 = NameAndType        #69:#70       // frameType:I\n-  #136 = Utf8               org/apache/bcel/Const\n-  #137 = NameAndType        #71:#70       // byteCodeOffset:I\n-  #138 = Utf8               org/apache/bcel/classfile/StackMapType\n-  #139 = NameAndType        #73:#68       // typesOfStackItems:[Lorg/apache/bcel/classfile/StackMapType;\n-  #140 = NameAndType        #76:#77       // \"<init>\":(Ljava/io/DataInput;Lorg/apache/bcel/classfile/ConstantPool;)V\n-  #141 = NameAndType        #209:#210     // readShort:()S\n-  #142 = NameAndType        #72:#68       // typesOfLocals:[Lorg/apache/bcel/classfile/StackMapType;\n-  #143 = Utf8               org/apache/bcel/classfile/ClassFormatException\n-  #144 = Utf8               java/lang/StringBuilder\n-  #145 = NameAndType        #76:#129      // \"<init>\":()V\n-  #146 = Utf8               Invalid frame type found while parsing stack map table:\n-  #147 = NameAndType        #211:#212     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #148 = NameAndType        #211:#213     // append:(I)Ljava/lang/StringBuilder;\n-  #149 = NameAndType        #121:#122     // toString:()Ljava/lang/String;\n-  #150 = NameAndType        #76:#214      // \"<init>\":(Ljava/lang/String;)V\n-  #151 = NameAndType        #67:#68       // EMPTY_STACK_MAP_TYPE_ARRAY:[Lorg/apache/bcel/classfile/StackMapType;\n-  #152 = NameAndType        #74:#75       // constantPool:Lorg/apache/bcel/classfile/ConstantPool;\n-  #153 = Class              #215          // org/apache/bcel/classfile/Visitor\n-  #154 = NameAndType        #216:#217     // visitStackMapEntry:(Lorg/apache/bcel/classfile/StackMapEntry;)V\n-  #155 = NameAndType        #218:#219     // clone:()Ljava/lang/Object;\n-  #156 = Utf8               org/apache/bcel/classfile/StackMapEntry\n-  #157 = Utf8               java/lang/CloneNotSupportedException\n-  #158 = Utf8               java/lang/Error\n-  #159 = Utf8               Clone Not Supported\n-  #160 = Utf8               BootstrapMethods\n-  #161 = MethodHandle       6:#220        // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #162 = MethodType         #221          //  (I)Ljava/lang/Object;\n-  #163 = MethodHandle       7:#222        // REF_invokeSpecial org/apache/bcel/classfile/StackMapEntry.lambda$copy$0:(I)Lorg/apache/bcel/classfile/StackMapType;\n-  #164 = MethodType         #126          //  (I)Lorg/apache/bcel/classfile/StackMapType;\n-  #165 = NameAndType        #223:#224     // apply:(Lorg/apache/bcel/classfile/StackMapEntry;)Ljava/util/function/IntFunction;\n-  #166 = Class              #225          // java/util/Arrays\n-  #167 = NameAndType        #226:#227     // setAll:([Ljava/lang/Object;Ljava/util/function/IntFunction;)V\n-  #168 = MethodHandle       7:#228        // REF_invokeSpecial org/apache/bcel/classfile/StackMapEntry.lambda$copy$1:(I)Lorg/apache/bcel/classfile/StackMapType;\n-  #169 = Class              #229          // java/io/DataOutputStream\n-  #170 = NameAndType        #230:#112     // write:(I)V\n-  #171 = NameAndType        #97:#98       // dump:(Ljava/io/DataOutputStream;)V\n-  #172 = NameAndType        #231:#112     // writeShort:(I)V\n-  #173 = Utf8               Invalid Stack map table tag:\n-  #174 = NameAndType        #232:#233     // hasIndex:()Z\n-  #175 = Utf8               java/lang/IllegalStateException\n-  #176 = Utf8               Invalid StackMap frameType:\n-  #177 = Utf8               java/lang/IllegalArgumentException\n-  #178 = Utf8               Invalid StackMap offset:\n-  #179 = Utf8               Invalid StackMap frameType\n-  #180 = NameAndType        #76:#112      // \"<init>\":(I)V\n-  #181 = Utf8               (\n-  #182 = Utf8               SAME\n-  #183 = Utf8               SAME_LOCALS_1_STACK\n-  #184 = Utf8               SAME_LOCALS_1_STACK_EXTENDED\n-  #185 = Utf8               CHOP\n-  #186 = Class              #234          // java/lang/String\n-  #187 = NameAndType        #235:#236     // valueOf:(I)Ljava/lang/String;\n-  #188 = Utf8               SAME_EXTENDED\n-  #189 = Utf8               APPEND\n-  #190 = Utf8               FULL\n-  #191 = Utf8               UNKNOWN (\n-  #192 = Utf8               )\n-  #193 = Utf8               , offset delta=\n-  #194 = Utf8               , locals={\n-  #195 = NameAndType        #211:#237     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #196 = Utf8               ,\n-  #197 = Utf8               }\n-  #198 = Utf8               , stack items={\n-  #199 = NameAndType        #111:#112     // setByteCodeOffset:(I)V\n-  #200 = NameAndType        #94:#238      // copy:()Lorg/apache/bcel/classfile/StackMapType;\n-  #201 = Utf8               java/lang/Object\n-  #202 = Utf8               org/apache/bcel/classfile/Node\n-  #203 = Utf8               java/lang/Cloneable\n-  #204 = Utf8               java/io/DataInput\n-  #205 = Utf8               org/apache/bcel/classfile/ConstantPool\n-  #206 = Utf8               java/io/IOException\n-  #207 = Utf8               readByte\n-  #208 = Utf8               ()B\n-  #209 = Utf8               readShort\n-  #210 = Utf8               ()S\n-  #211 = Utf8               append\n-  #212 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #213 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #214 = Utf8               (Ljava/lang/String;)V\n-  #215 = Utf8               org/apache/bcel/classfile/Visitor\n-  #216 = Utf8               visitStackMapEntry\n-  #217 = Utf8               (Lorg/apache/bcel/classfile/StackMapEntry;)V\n-  #218 = Utf8               clone\n-  #219 = Utf8               ()Ljava/lang/Object;\n-  #220 = Methodref          #239.#240     // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #221 = Utf8               (I)Ljava/lang/Object;\n-  #222 = Methodref          #24.#241      // org/apache/bcel/classfile/StackMapEntry.lambda$copy$0:(I)Lorg/apache/bcel/classfile/StackMapType;\n-  #223 = Utf8               apply\n-  #224 = Utf8               (Lorg/apache/bcel/classfile/StackMapEntry;)Ljava/util/function/IntFunction;\n-  #225 = Utf8               java/util/Arrays\n-  #226 = Utf8               setAll\n-  #227 = Utf8               ([Ljava/lang/Object;Ljava/util/function/IntFunction;)V\n-  #228 = Methodref          #24.#242      // org/apache/bcel/classfile/StackMapEntry.lambda$copy$1:(I)Lorg/apache/bcel/classfile/StackMapType;\n-  #229 = Utf8               java/io/DataOutputStream\n-  #230 = Utf8               write\n-  #231 = Utf8               writeShort\n-  #232 = Utf8               hasIndex\n-  #233 = Utf8               ()Z\n-  #234 = Utf8               java/lang/String\n-  #235 = Utf8               valueOf\n-  #236 = Utf8               (I)Ljava/lang/String;\n-  #237 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #238 = Utf8               ()Lorg/apache/bcel/classfile/StackMapType;\n-  #239 = Class              #243          // java/lang/invoke/LambdaMetafactory\n-  #240 = NameAndType        #244:#248     // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #241 = NameAndType        #127:#126     // lambda$copy$0:(I)Lorg/apache/bcel/classfile/StackMapType;\n-  #242 = NameAndType        #125:#126     // lambda$copy$1:(I)Lorg/apache/bcel/classfile/StackMapType;\n-  #243 = Utf8               java/lang/invoke/LambdaMetafactory\n-  #244 = Utf8               metafactory\n-  #245 = Class              #250          // java/lang/invoke/MethodHandles$Lookup\n-  #246 = Utf8               Lookup\n-  #247 = Utf8               InnerClasses\n-  #248 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #249 = Class              #251          // java/lang/invoke/MethodHandles\n-  #250 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #251 = Utf8               java/lang/invoke/MethodHandles\n+   #81 = Class              #199          // java/io/DataInput\n+   #82 = Class              #200          // org/apache/bcel/classfile/ConstantPool\n+   #83 = Utf8               Exceptions\n+   #84 = Class              #201          // java/io/IOException\n+   #85 = Utf8               (II[Lorg/apache/bcel/classfile/StackMapType;I[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n+   #86 = Class              #68           // \"[Lorg/apache/bcel/classfile/StackMapType;\"\n+   #87 = Utf8               Deprecated\n+   #88 = Utf8               RuntimeVisibleAnnotations\n+   #89 = Utf8               Ljava/lang/Deprecated;\n+   #90 = Utf8               (II[Lorg/apache/bcel/classfile/StackMapType;[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n+   #91 = Utf8               accept\n+   #92 = Utf8               (Lorg/apache/bcel/classfile/Visitor;)V\n+   #93 = Utf8               copy\n+   #94 = Utf8               ()Lorg/apache/bcel/classfile/StackMapEntry;\n+   #95 = Utf8               dump\n+   #96 = Utf8               (Ljava/io/DataOutputStream;)V\n+   #97 = Utf8               getByteCodeOffset\n+   #98 = Utf8               ()I\n+   #99 = Utf8               getConstantPool\n+  #100 = Utf8               ()Lorg/apache/bcel/classfile/ConstantPool;\n+  #101 = Utf8               getFrameType\n+  #102 = Utf8               getMapEntrySize\n+  #103 = Utf8               getNumberOfLocals\n+  #104 = Utf8               getNumberOfStackItems\n+  #105 = Utf8               getTypesOfLocals\n+  #106 = Utf8               ()[Lorg/apache/bcel/classfile/StackMapType;\n+  #107 = Utf8               getTypesOfStackItems\n+  #108 = Utf8               setByteCodeOffset\n+  #109 = Utf8               (I)V\n+  #110 = Utf8               setConstantPool\n+  #111 = Utf8               (Lorg/apache/bcel/classfile/ConstantPool;)V\n+  #112 = Utf8               setFrameType\n+  #113 = Utf8               setNumberOfLocals\n+  #114 = Utf8               setNumberOfStackItems\n+  #115 = Utf8               setTypesOfLocals\n+  #116 = Utf8               ([Lorg/apache/bcel/classfile/StackMapType;)V\n+  #117 = Utf8               setTypesOfStackItems\n+  #118 = Utf8               toString\n+  #119 = Utf8               ()Ljava/lang/String;\n+  #120 = Utf8               updateByteCodeOffset\n+  #121 = Utf8               lambda$copy$1\n+  #122 = Utf8               (I)Lorg/apache/bcel/classfile/StackMapType;\n+  #123 = Utf8               lambda$copy$0\n+  #124 = Utf8               <clinit>\n+  #125 = Utf8               ()V\n+  #126 = Utf8               SourceFile\n+  #127 = Utf8               StackMapEntry.java\n+  #128 = NameAndType        #202:#203     // readByte:()B\n+  #129 = NameAndType        #76:#90       // \"<init>\":(II[Lorg/apache/bcel/classfile/StackMapType;[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n+  #130 = NameAndType        #69:#70       // frameType:I\n+  #131 = Utf8               org/apache/bcel/Const\n+  #132 = NameAndType        #71:#70       // byteCodeOffset:I\n+  #133 = Utf8               org/apache/bcel/classfile/StackMapType\n+  #134 = NameAndType        #73:#68       // typesOfStackItems:[Lorg/apache/bcel/classfile/StackMapType;\n+  #135 = NameAndType        #76:#77       // \"<init>\":(Ljava/io/DataInput;Lorg/apache/bcel/classfile/ConstantPool;)V\n+  #136 = NameAndType        #204:#205     // readShort:()S\n+  #137 = NameAndType        #72:#68       // typesOfLocals:[Lorg/apache/bcel/classfile/StackMapType;\n+  #138 = Utf8               org/apache/bcel/classfile/ClassFormatException\n+  #139 = Utf8               java/lang/StringBuilder\n+  #140 = NameAndType        #76:#125      // \"<init>\":()V\n+  #141 = Utf8               Invalid frame type found while parsing stack map table:\n+  #142 = NameAndType        #206:#207     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #143 = NameAndType        #206:#208     // append:(I)Ljava/lang/StringBuilder;\n+  #144 = NameAndType        #118:#119     // toString:()Ljava/lang/String;\n+  #145 = NameAndType        #76:#209      // \"<init>\":(Ljava/lang/String;)V\n+  #146 = NameAndType        #67:#68       // EMPTY_STACK_MAP_TYPE_ARRAY:[Lorg/apache/bcel/classfile/StackMapType;\n+  #147 = NameAndType        #74:#75       // constantPool:Lorg/apache/bcel/classfile/ConstantPool;\n+  #148 = Class              #210          // org/apache/bcel/classfile/Visitor\n+  #149 = NameAndType        #211:#212     // visitStackMapEntry:(Lorg/apache/bcel/classfile/StackMapEntry;)V\n+  #150 = NameAndType        #213:#214     // clone:()Ljava/lang/Object;\n+  #151 = Utf8               org/apache/bcel/classfile/StackMapEntry\n+  #152 = Utf8               java/lang/CloneNotSupportedException\n+  #153 = Utf8               java/lang/Error\n+  #154 = Utf8               Clone Not Supported\n+  #155 = Utf8               BootstrapMethods\n+  #156 = MethodHandle       6:#215        // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #157 = MethodType         #216          //  (I)Ljava/lang/Object;\n+  #158 = MethodHandle       7:#217        // REF_invokeSpecial org/apache/bcel/classfile/StackMapEntry.lambda$copy$0:(I)Lorg/apache/bcel/classfile/StackMapType;\n+  #159 = MethodType         #122          //  (I)Lorg/apache/bcel/classfile/StackMapType;\n+  #160 = NameAndType        #218:#219     // apply:(Lorg/apache/bcel/classfile/StackMapEntry;)Ljava/util/function/IntFunction;\n+  #161 = Class              #220          // java/util/Arrays\n+  #162 = NameAndType        #221:#222     // setAll:([Ljava/lang/Object;Ljava/util/function/IntFunction;)V\n+  #163 = MethodHandle       7:#223        // REF_invokeSpecial org/apache/bcel/classfile/StackMapEntry.lambda$copy$1:(I)Lorg/apache/bcel/classfile/StackMapType;\n+  #164 = Class              #224          // java/io/DataOutputStream\n+  #165 = NameAndType        #225:#109     // write:(I)V\n+  #166 = NameAndType        #95:#96       // dump:(Ljava/io/DataOutputStream;)V\n+  #167 = NameAndType        #226:#109     // writeShort:(I)V\n+  #168 = Utf8               Invalid Stack map table tag:\n+  #169 = NameAndType        #227:#228     // hasIndex:()Z\n+  #170 = Utf8               java/lang/IllegalStateException\n+  #171 = Utf8               Invalid StackMap frameType:\n+  #172 = Utf8               java/lang/IllegalArgumentException\n+  #173 = Utf8               Invalid StackMap offset:\n+  #174 = Utf8               Invalid StackMap frameType\n+  #175 = NameAndType        #76:#109      // \"<init>\":(I)V\n+  #176 = Utf8               (\n+  #177 = Utf8               SAME\n+  #178 = Utf8               SAME_LOCALS_1_STACK\n+  #179 = Utf8               SAME_LOCALS_1_STACK_EXTENDED\n+  #180 = Utf8               CHOP\n+  #181 = Class              #229          // java/lang/String\n+  #182 = NameAndType        #230:#231     // valueOf:(I)Ljava/lang/String;\n+  #183 = Utf8               SAME_EXTENDED\n+  #184 = Utf8               APPEND\n+  #185 = Utf8               FULL\n+  #186 = Utf8               UNKNOWN (\n+  #187 = Utf8               )\n+  #188 = Utf8               , offset delta=\n+  #189 = Utf8               , locals={\n+  #190 = NameAndType        #206:#232     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #191 = Utf8               ,\n+  #192 = Utf8               }\n+  #193 = Utf8               , stack items={\n+  #194 = NameAndType        #108:#109     // setByteCodeOffset:(I)V\n+  #195 = NameAndType        #93:#233      // copy:()Lorg/apache/bcel/classfile/StackMapType;\n+  #196 = Utf8               java/lang/Object\n+  #197 = Utf8               org/apache/bcel/classfile/Node\n+  #198 = Utf8               java/lang/Cloneable\n+  #199 = Utf8               java/io/DataInput\n+  #200 = Utf8               org/apache/bcel/classfile/ConstantPool\n+  #201 = Utf8               java/io/IOException\n+  #202 = Utf8               readByte\n+  #203 = Utf8               ()B\n+  #204 = Utf8               readShort\n+  #205 = Utf8               ()S\n+  #206 = Utf8               append\n+  #207 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #208 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #209 = Utf8               (Ljava/lang/String;)V\n+  #210 = Utf8               org/apache/bcel/classfile/Visitor\n+  #211 = Utf8               visitStackMapEntry\n+  #212 = Utf8               (Lorg/apache/bcel/classfile/StackMapEntry;)V\n+  #213 = Utf8               clone\n+  #214 = Utf8               ()Ljava/lang/Object;\n+  #215 = Methodref          #234.#235     // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #216 = Utf8               (I)Ljava/lang/Object;\n+  #217 = Methodref          #24.#236      // org/apache/bcel/classfile/StackMapEntry.lambda$copy$0:(I)Lorg/apache/bcel/classfile/StackMapType;\n+  #218 = Utf8               apply\n+  #219 = Utf8               (Lorg/apache/bcel/classfile/StackMapEntry;)Ljava/util/function/IntFunction;\n+  #220 = Utf8               java/util/Arrays\n+  #221 = Utf8               setAll\n+  #222 = Utf8               ([Ljava/lang/Object;Ljava/util/function/IntFunction;)V\n+  #223 = Methodref          #24.#237      // org/apache/bcel/classfile/StackMapEntry.lambda$copy$1:(I)Lorg/apache/bcel/classfile/StackMapType;\n+  #224 = Utf8               java/io/DataOutputStream\n+  #225 = Utf8               write\n+  #226 = Utf8               writeShort\n+  #227 = Utf8               hasIndex\n+  #228 = Utf8               ()Z\n+  #229 = Utf8               java/lang/String\n+  #230 = Utf8               valueOf\n+  #231 = Utf8               (I)Ljava/lang/String;\n+  #232 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #233 = Utf8               ()Lorg/apache/bcel/classfile/StackMapType;\n+  #234 = Class              #238          // java/lang/invoke/LambdaMetafactory\n+  #235 = NameAndType        #239:#243     // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #236 = NameAndType        #123:#122     // lambda$copy$0:(I)Lorg/apache/bcel/classfile/StackMapType;\n+  #237 = NameAndType        #121:#122     // lambda$copy$1:(I)Lorg/apache/bcel/classfile/StackMapType;\n+  #238 = Utf8               java/lang/invoke/LambdaMetafactory\n+  #239 = Utf8               metafactory\n+  #240 = Class              #245          // java/lang/invoke/MethodHandles$Lookup\n+  #241 = Utf8               Lookup\n+  #242 = Utf8               InnerClasses\n+  #243 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #244 = Class              #246          // java/lang/invoke/MethodHandles\n+  #245 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #246 = Utf8               java/lang/invoke/MethodHandles\n {\n   private static final org.apache.bcel.classfile.StackMapType[] EMPTY_STACK_MAP_TYPE_ARRAY;\n     descriptor: [Lorg/apache/bcel/classfile/StackMapType;\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n \n   private int frameType;\n     descriptor: I\n@@ -608,15 +603,15 @@\n           stack = [ class org/apache/bcel/classfile/StackMapEntry ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 2\n           locals = [ class org/apache/bcel/classfile/StackMapEntry, int, int, class \"[Lorg/apache/bcel/classfile/StackMapType;\", int, class \"[Lorg/apache/bcel/classfile/StackMapType;\", class org/apache/bcel/classfile/ConstantPool ]\n           stack = [ class org/apache/bcel/classfile/StackMapEntry, class \"[Lorg/apache/bcel/classfile/StackMapType;\" ]\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #90()\n+      0: #89()\n         java.lang.Deprecated\n \n   public org.apache.bcel.classfile.StackMapEntry(int, int, org.apache.bcel.classfile.StackMapType[], org.apache.bcel.classfile.StackMapType[], org.apache.bcel.classfile.ConstantPool);\n     descriptor: (II[Lorg/apache/bcel/classfile/StackMapType;[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=6, args_size=6\n@@ -1572,28 +1567,28 @@\n     Code:\n       stack=0, locals=2, args_size=2\n          0: return\n       LineNumberTable:\n         line 327: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #90()\n+      0: #89()\n         java.lang.Deprecated\n \n   public void setNumberOfStackItems(int);\n     descriptor: (I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=0, locals=2, args_size=2\n          0: return\n       LineNumberTable:\n         line 335: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #90()\n+      0: #89()\n         java.lang.Deprecated\n \n   public void setTypesOfLocals(org.apache.bcel.classfile.StackMapType[]);\n     descriptor: ([Lorg/apache/bcel/classfile/StackMapType;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -1962,19 +1957,19 @@\n          4: putstatic     #20                 // Field EMPTY_STACK_MAP_TYPE_ARRAY:[Lorg/apache/bcel/classfile/StackMapType;\n          7: return\n       LineNumberTable:\n         line 39: 0\n }\n SourceFile: \"StackMapEntry.java\"\n InnerClasses:\n-  public static final #246= #245 of #249; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n+  public static final #241= #240 of #244; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #161 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  0: #156 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #162 (I)Ljava/lang/Object;\n-      #163 REF_invokeSpecial org/apache/bcel/classfile/StackMapEntry.lambda$copy$0:(I)Lorg/apache/bcel/classfile/StackMapType;\n-      #164 (I)Lorg/apache/bcel/classfile/StackMapType;\n-  1: #161 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+      #157 (I)Ljava/lang/Object;\n+      #158 REF_invokeSpecial org/apache/bcel/classfile/StackMapEntry.lambda$copy$0:(I)Lorg/apache/bcel/classfile/StackMapType;\n+      #159 (I)Lorg/apache/bcel/classfile/StackMapType;\n+  1: #156 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #162 (I)Ljava/lang/Object;\n-      #168 REF_invokeSpecial org/apache/bcel/classfile/StackMapEntry.lambda$copy$1:(I)Lorg/apache/bcel/classfile/StackMapType;\n-      #164 (I)Lorg/apache/bcel/classfile/StackMapType;\n+      #157 (I)Ljava/lang/Object;\n+      #163 REF_invokeSpecial org/apache/bcel/classfile/StackMapEntry.lambda$copy$1:(I)Lorg/apache/bcel/classfile/StackMapType;\n+      #159 (I)Lorg/apache/bcel/classfile/StackMapType;\n"}]}
