{"diffoscope-json-version": 1, "source1": "first/LZMADecoder.class", "source2": "second/LZMADecoder.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,395 +1,396 @@\n-  SHA-256 checksum 0ae8f12e1db4f038e7d882cdbf6f227a89a6d4a439429e28d7e712d6985d3e40\n+  SHA-256 checksum 54b237df7a14c6279fa12a15075624c19933642837b8ba4c8356a8032a261d87\n   Compiled from \"LZMADecoder.java\"\n class org.apache.commons.compress.archivers.sevenz.LZMADecoder extends org.apache.commons.compress.archivers.sevenz.AbstractCoder\n   minor version: 0\n   major version: 52\n   flags: (0x0020) ACC_SUPER\n-  this_class: #29                         // org/apache/commons/compress/archivers/sevenz/LZMADecoder\n-  super_class: #8                         // org/apache/commons/compress/archivers/sevenz/AbstractCoder\n+  this_class: #1                          // org/apache/commons/compress/archivers/sevenz/LZMADecoder\n+  super_class: #3                         // org/apache/commons/compress/archivers/sevenz/AbstractCoder\n   interfaces: 0, fields: 0, methods: 8, attributes: 1\n Constant pool:\n-    #1 = Class              #2            // java/lang/Class\n-    #2 = Utf8               java/lang/Class\n-    #3 = Class              #4            // org/tukaani/xz/LZMA2Options\n-    #4 = Utf8               org/tukaani/xz/LZMA2Options\n-    #5 = Class              #6            // java/lang/Number\n-    #6 = Utf8               java/lang/Number\n-    #7 = Methodref          #8.#9         // org/apache/commons/compress/archivers/sevenz/AbstractCoder.\"<init>\":([Ljava/lang/Class;)V\n-    #8 = Class              #10           // org/apache/commons/compress/archivers/sevenz/AbstractCoder\n-    #9 = NameAndType        #11:#12       // \"<init>\":([Ljava/lang/Class;)V\n-   #10 = Utf8               org/apache/commons/compress/archivers/sevenz/AbstractCoder\n-   #11 = Utf8               <init>\n-   #12 = Utf8               ([Ljava/lang/Class;)V\n-   #13 = Fieldref           #14.#15       // org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n-   #14 = Class              #16           // org/apache/commons/compress/archivers/sevenz/Coder\n-   #15 = NameAndType        #17:#18       // properties:[B\n-   #16 = Utf8               org/apache/commons/compress/archivers/sevenz/Coder\n-   #17 = Utf8               properties\n-   #18 = Utf8               [B\n-   #19 = Class              #20           // java/io/IOException\n-   #20 = Utf8               java/io/IOException\n-   #21 = String             #22           // Missing LZMA properties\n-   #22 = Utf8               Missing LZMA properties\n-   #23 = Methodref          #19.#24       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #24 = NameAndType        #11:#25       // \"<init>\":(Ljava/lang/String;)V\n-   #25 = Utf8               (Ljava/lang/String;)V\n-   #26 = String             #27           // LZMA properties too short\n-   #27 = Utf8               LZMA properties too short\n-   #28 = Methodref          #29.#30       // org/apache/commons/compress/archivers/sevenz/LZMADecoder.getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n-   #29 = Class              #31           // org/apache/commons/compress/archivers/sevenz/LZMADecoder\n-   #30 = NameAndType        #32:#33       // getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n-   #31 = Utf8               org/apache/commons/compress/archivers/sevenz/LZMADecoder\n-   #32 = Utf8               getDictionarySize\n-   #33 = Utf8               (Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n-   #34 = Class              #35           // org/tukaani/xz/LZMAInputStream\n-   #35 = Utf8               org/tukaani/xz/LZMAInputStream\n-   #36 = Integer            2147483632\n-   #37 = Class              #38           // java/lang/StringBuilder\n-   #38 = Utf8               java/lang/StringBuilder\n-   #39 = Methodref          #37.#40       // java/lang/StringBuilder.\"<init>\":()V\n-   #40 = NameAndType        #11:#41       // \"<init>\":()V\n-   #41 = Utf8               ()V\n-   #42 = String             #43           // Dictionary larger than 4GiB maximum size used in\n-   #43 = Utf8               Dictionary larger than 4GiB maximum size used in\n-   #44 = Methodref          #37.#45       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #45 = NameAndType        #46:#47       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #46 = Utf8               append\n-   #47 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #48 = Methodref          #37.#49       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #49 = NameAndType        #50:#51       // toString:()Ljava/lang/String;\n-   #50 = Utf8               toString\n-   #51 = Utf8               ()Ljava/lang/String;\n-   #52 = Methodref          #34.#53       // org/tukaani/xz/LZMAInputStream.getMemoryUsage:(IB)I\n-   #53 = NameAndType        #54:#55       // getMemoryUsage:(IB)I\n-   #54 = Utf8               getMemoryUsage\n-   #55 = Utf8               (IB)I\n-   #56 = Class              #57           // org/apache/commons/compress/MemoryLimitException\n-   #57 = Utf8               org/apache/commons/compress/MemoryLimitException\n-   #58 = Methodref          #56.#59       // org/apache/commons/compress/MemoryLimitException.\"<init>\":(JI)V\n-   #59 = NameAndType        #11:#60       // \"<init>\":(JI)V\n-   #60 = Utf8               (JI)V\n-   #61 = Methodref          #34.#62       // org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;JBI)V\n-   #62 = NameAndType        #11:#63       // \"<init>\":(Ljava/io/InputStream;JBI)V\n-   #63 = Utf8               (Ljava/io/InputStream;JBI)V\n-   #64 = Methodref          #34.#65       // org/tukaani/xz/LZMAInputStream.enableRelaxedEndCondition:()V\n-   #65 = NameAndType        #66:#41       // enableRelaxedEndCondition:()V\n-   #66 = Utf8               enableRelaxedEndCondition\n-   #67 = Class              #68           // org/apache/commons/compress/utils/FlushShieldFilterOutputStream\n-   #68 = Utf8               org/apache/commons/compress/utils/FlushShieldFilterOutputStream\n-   #69 = Class              #70           // org/tukaani/xz/LZMAOutputStream\n-   #70 = Utf8               org/tukaani/xz/LZMAOutputStream\n-   #71 = Methodref          #29.#72       // org/apache/commons/compress/archivers/sevenz/LZMADecoder.getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n-   #72 = NameAndType        #73:#74       // getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n-   #73 = Utf8               getOptions\n-   #74 = Utf8               (Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n-   #75 = Methodref          #69.#76       // org/tukaani/xz/LZMAOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/LZMA2Options;Z)V\n-   #76 = NameAndType        #11:#77       // \"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/LZMA2Options;Z)V\n-   #77 = Utf8               (Ljava/io/OutputStream;Lorg/tukaani/xz/LZMA2Options;Z)V\n-   #78 = Methodref          #67.#79       // org/apache/commons/compress/utils/FlushShieldFilterOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n-   #79 = NameAndType        #11:#80       // \"<init>\":(Ljava/io/OutputStream;)V\n-   #80 = Utf8               (Ljava/io/OutputStream;)V\n-   #81 = Methodref          #82.#83       // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n-   #82 = Class              #84           // org/apache/commons/compress/utils/ByteUtils\n-   #83 = NameAndType        #85:#86       // fromLittleEndian:([BII)J\n-   #84 = Utf8               org/apache/commons/compress/utils/ByteUtils\n-   #85 = Utf8               fromLittleEndian\n-   #86 = Utf8               ([BII)J\n-   #87 = Methodref          #3.#40        // org/tukaani/xz/LZMA2Options.\"<init>\":()V\n-   #88 = Methodref          #29.#89       // org/apache/commons/compress/archivers/sevenz/LZMADecoder.numberOptionOrDefault:(Ljava/lang/Object;)I\n-   #89 = NameAndType        #90:#91       // numberOptionOrDefault:(Ljava/lang/Object;)I\n-   #90 = Utf8               numberOptionOrDefault\n-   #91 = Utf8               (Ljava/lang/Object;)I\n-   #92 = Methodref          #3.#93        // org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n-   #93 = NameAndType        #94:#95       // setDictSize:(I)V\n-   #94 = Utf8               setDictSize\n-   #95 = Utf8               (I)V\n-   #96 = Methodref          #3.#97        // org/tukaani/xz/LZMA2Options.getPb:()I\n-   #97 = NameAndType        #98:#99       // getPb:()I\n-   #98 = Utf8               getPb\n-   #99 = Utf8               ()I\n-  #100 = Methodref          #3.#101       // org/tukaani/xz/LZMA2Options.getLp:()I\n-  #101 = NameAndType        #102:#99      // getLp:()I\n-  #102 = Utf8               getLp\n-  #103 = Methodref          #3.#104       // org/tukaani/xz/LZMA2Options.getLc:()I\n-  #104 = NameAndType        #105:#99      // getLc:()I\n-  #105 = Utf8               getLc\n-  #106 = Methodref          #3.#107       // org/tukaani/xz/LZMA2Options.getDictSize:()I\n-  #107 = NameAndType        #108:#99      // getDictSize:()I\n-  #108 = Utf8               getDictSize\n-  #109 = Methodref          #82.#110      // org/apache/commons/compress/utils/ByteUtils.toLittleEndian:([BJII)V\n-  #110 = NameAndType        #111:#112     // toLittleEndian:([BJII)V\n-  #111 = Utf8               toLittleEndian\n-  #112 = Utf8               ([BJII)V\n-  #113 = Methodref          #3.#114       // org/tukaani/xz/LZMA2Options.setPb:(I)V\n-  #114 = NameAndType        #115:#95      // setPb:(I)V\n-  #115 = Utf8               setPb\n-  #116 = Methodref          #3.#117       // org/tukaani/xz/LZMA2Options.setLcLp:(II)V\n-  #117 = NameAndType        #118:#119     // setLcLp:(II)V\n-  #118 = Utf8               setLcLp\n-  #119 = Utf8               (II)V\n-  #120 = Integer            8388608\n-  #121 = Methodref          #29.#122      // org/apache/commons/compress/archivers/sevenz/LZMADecoder.toInt:(Ljava/lang/Object;I)I\n-  #122 = NameAndType        #123:#124     // toInt:(Ljava/lang/Object;I)I\n-  #123 = Utf8               toInt\n-  #124 = Utf8               (Ljava/lang/Object;I)I\n-  #125 = Utf8               Code\n-  #126 = Utf8               LineNumberTable\n-  #127 = Utf8               LocalVariableTable\n-  #128 = Utf8               this\n-  #129 = Utf8               Lorg/apache/commons/compress/archivers/sevenz/LZMADecoder;\n-  #130 = Utf8               decode\n-  #131 = Utf8               (Ljava/lang/String;Ljava/io/InputStream;JLorg/apache/commons/compress/archivers/sevenz/Coder;[BI)Ljava/io/InputStream;\n-  #132 = Utf8               archiveName\n-  #133 = Utf8               Ljava/lang/String;\n-  #134 = Utf8               in\n-  #135 = Utf8               Ljava/io/InputStream;\n-  #136 = Utf8               uncompressedLength\n-  #137 = Utf8               J\n-  #138 = Utf8               coder\n-  #139 = Utf8               Lorg/apache/commons/compress/archivers/sevenz/Coder;\n-  #140 = Utf8               password\n-  #141 = Utf8               maxMemoryLimitInKb\n-  #142 = Utf8               I\n-  #143 = Utf8               propsByte\n-  #144 = Utf8               B\n-  #145 = Utf8               dictSize\n-  #146 = Utf8               memoryUsageInKb\n-  #147 = Utf8               lzmaIn\n-  #148 = Utf8               Lorg/tukaani/xz/LZMAInputStream;\n-  #149 = Utf8               StackMapTable\n-  #150 = Utf8               Exceptions\n-  #151 = Utf8               encode\n-  #152 = Utf8               (Ljava/io/OutputStream;Ljava/lang/Object;)Ljava/io/OutputStream;\n-  #153 = Utf8               out\n-  #154 = Utf8               Ljava/io/OutputStream;\n-  #155 = Utf8               opts\n-  #156 = Utf8               Ljava/lang/Object;\n-  #157 = Class              #158          // java/lang/IllegalArgumentException\n-  #158 = Utf8               java/lang/IllegalArgumentException\n-  #159 = Utf8               options\n-  #160 = Utf8               Lorg/tukaani/xz/LZMA2Options;\n-  #161 = Utf8               getOptionsAsProperties\n-  #162 = Utf8               (Ljava/lang/Object;)[B\n-  #163 = Utf8               props\n-  #164 = Utf8               o\n-  #165 = Utf8               getOptionsFromCoder\n-  #166 = Utf8               (Lorg/apache/commons/compress/archivers/sevenz/Coder;Ljava/io/InputStream;)Ljava/lang/Object;\n-  #167 = Utf8               pb\n-  #168 = Utf8               lp\n-  #169 = Utf8               lc\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/sevenz/LZMADecoder\n+    #2 = Utf8               org/apache/commons/compress/archivers/sevenz/LZMADecoder\n+    #3 = Class              #4            // org/apache/commons/compress/archivers/sevenz/AbstractCoder\n+    #4 = Utf8               org/apache/commons/compress/archivers/sevenz/AbstractCoder\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ()V\n+    #7 = Utf8               Code\n+    #8 = Class              #9            // java/lang/Class\n+    #9 = Utf8               java/lang/Class\n+   #10 = Class              #11           // org/tukaani/xz/LZMA2Options\n+   #11 = Utf8               org/tukaani/xz/LZMA2Options\n+   #12 = Class              #13           // java/lang/Number\n+   #13 = Utf8               java/lang/Number\n+   #14 = Methodref          #3.#15        // org/apache/commons/compress/archivers/sevenz/AbstractCoder.\"<init>\":([Ljava/lang/Class;)V\n+   #15 = NameAndType        #5:#16        // \"<init>\":([Ljava/lang/Class;)V\n+   #16 = Utf8               ([Ljava/lang/Class;)V\n+   #17 = Utf8               LineNumberTable\n+   #18 = Utf8               LocalVariableTable\n+   #19 = Utf8               this\n+   #20 = Utf8               Lorg/apache/commons/compress/archivers/sevenz/LZMADecoder;\n+   #21 = Utf8               decode\n+   #22 = Utf8               (Ljava/lang/String;Ljava/io/InputStream;JLorg/apache/commons/compress/archivers/sevenz/Coder;[BI)Ljava/io/InputStream;\n+   #23 = Utf8               Exceptions\n+   #24 = Class              #25           // java/io/IOException\n+   #25 = Utf8               java/io/IOException\n+   #26 = Fieldref           #27.#29       // org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n+   #27 = Class              #28           // org/apache/commons/compress/archivers/sevenz/Coder\n+   #28 = Utf8               org/apache/commons/compress/archivers/sevenz/Coder\n+   #29 = NameAndType        #30:#31       // properties:[B\n+   #30 = Utf8               properties\n+   #31 = Utf8               [B\n+   #32 = String             #33           // Missing LZMA properties\n+   #33 = Utf8               Missing LZMA properties\n+   #34 = Methodref          #24.#35       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #35 = NameAndType        #5:#36        // \"<init>\":(Ljava/lang/String;)V\n+   #36 = Utf8               (Ljava/lang/String;)V\n+   #37 = String             #38           // LZMA properties too short\n+   #38 = Utf8               LZMA properties too short\n+   #39 = Methodref          #1.#40        // org/apache/commons/compress/archivers/sevenz/LZMADecoder.getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+   #40 = NameAndType        #41:#42       // getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+   #41 = Utf8               getDictionarySize\n+   #42 = Utf8               (Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+   #43 = Integer            2147483632\n+   #44 = Class              #45           // java/lang/StringBuilder\n+   #45 = Utf8               java/lang/StringBuilder\n+   #46 = String             #47           // Dictionary larger than 4GiB maximum size used in\n+   #47 = Utf8               Dictionary larger than 4GiB maximum size used in\n+   #48 = Methodref          #44.#35       // java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+   #49 = Methodref          #44.#50       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #50 = NameAndType        #51:#52       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #51 = Utf8               append\n+   #52 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #53 = Methodref          #44.#54       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #54 = NameAndType        #55:#56       // toString:()Ljava/lang/String;\n+   #55 = Utf8               toString\n+   #56 = Utf8               ()Ljava/lang/String;\n+   #57 = Methodref          #58.#60       // org/tukaani/xz/LZMAInputStream.getMemoryUsage:(IB)I\n+   #58 = Class              #59           // org/tukaani/xz/LZMAInputStream\n+   #59 = Utf8               org/tukaani/xz/LZMAInputStream\n+   #60 = NameAndType        #61:#62       // getMemoryUsage:(IB)I\n+   #61 = Utf8               getMemoryUsage\n+   #62 = Utf8               (IB)I\n+   #63 = Class              #64           // org/apache/commons/compress/MemoryLimitException\n+   #64 = Utf8               org/apache/commons/compress/MemoryLimitException\n+   #65 = Methodref          #63.#66       // org/apache/commons/compress/MemoryLimitException.\"<init>\":(JI)V\n+   #66 = NameAndType        #5:#67        // \"<init>\":(JI)V\n+   #67 = Utf8               (JI)V\n+   #68 = Methodref          #58.#69       // org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;JBI)V\n+   #69 = NameAndType        #5:#70        // \"<init>\":(Ljava/io/InputStream;JBI)V\n+   #70 = Utf8               (Ljava/io/InputStream;JBI)V\n+   #71 = Methodref          #58.#72       // org/tukaani/xz/LZMAInputStream.enableRelaxedEndCondition:()V\n+   #72 = NameAndType        #73:#6        // enableRelaxedEndCondition:()V\n+   #73 = Utf8               enableRelaxedEndCondition\n+   #74 = Utf8               archiveName\n+   #75 = Utf8               Ljava/lang/String;\n+   #76 = Utf8               in\n+   #77 = Utf8               Ljava/io/InputStream;\n+   #78 = Utf8               uncompressedLength\n+   #79 = Utf8               J\n+   #80 = Utf8               coder\n+   #81 = Utf8               Lorg/apache/commons/compress/archivers/sevenz/Coder;\n+   #82 = Utf8               password\n+   #83 = Utf8               maxMemoryLimitInKb\n+   #84 = Utf8               I\n+   #85 = Utf8               propsByte\n+   #86 = Utf8               B\n+   #87 = Utf8               dictSize\n+   #88 = Utf8               memoryUsageInKb\n+   #89 = Utf8               lzmaIn\n+   #90 = Utf8               Lorg/tukaani/xz/LZMAInputStream;\n+   #91 = Utf8               StackMapTable\n+   #92 = Utf8               encode\n+   #93 = Utf8               (Ljava/io/OutputStream;Ljava/lang/Object;)Ljava/io/OutputStream;\n+   #94 = Class              #95           // org/apache/commons/compress/utils/FlushShieldFilterOutputStream\n+   #95 = Utf8               org/apache/commons/compress/utils/FlushShieldFilterOutputStream\n+   #96 = Class              #97           // org/tukaani/xz/LZMAOutputStream\n+   #97 = Utf8               org/tukaani/xz/LZMAOutputStream\n+   #98 = Methodref          #1.#99        // org/apache/commons/compress/archivers/sevenz/LZMADecoder.getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n+   #99 = NameAndType        #100:#101     // getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n+  #100 = Utf8               getOptions\n+  #101 = Utf8               (Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n+  #102 = Methodref          #96.#103      // org/tukaani/xz/LZMAOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/LZMA2Options;Z)V\n+  #103 = NameAndType        #5:#104       // \"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/LZMA2Options;Z)V\n+  #104 = Utf8               (Ljava/io/OutputStream;Lorg/tukaani/xz/LZMA2Options;Z)V\n+  #105 = Methodref          #94.#106      // org/apache/commons/compress/utils/FlushShieldFilterOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n+  #106 = NameAndType        #5:#107       // \"<init>\":(Ljava/io/OutputStream;)V\n+  #107 = Utf8               (Ljava/io/OutputStream;)V\n+  #108 = Utf8               out\n+  #109 = Utf8               Ljava/io/OutputStream;\n+  #110 = Utf8               opts\n+  #111 = Utf8               Ljava/lang/Object;\n+  #112 = Class              #113          // java/lang/IllegalArgumentException\n+  #113 = Utf8               java/lang/IllegalArgumentException\n+  #114 = Methodref          #115.#117     // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n+  #115 = Class              #116          // org/apache/commons/compress/utils/ByteUtils\n+  #116 = Utf8               org/apache/commons/compress/utils/ByteUtils\n+  #117 = NameAndType        #118:#119     // fromLittleEndian:([BII)J\n+  #118 = Utf8               fromLittleEndian\n+  #119 = Utf8               ([BII)J\n+  #120 = Methodref          #10.#121      // org/tukaani/xz/LZMA2Options.\"<init>\":()V\n+  #121 = NameAndType        #5:#6         // \"<init>\":()V\n+  #122 = Methodref          #1.#123       // org/apache/commons/compress/archivers/sevenz/LZMADecoder.numberOptionOrDefault:(Ljava/lang/Object;)I\n+  #123 = NameAndType        #124:#125     // numberOptionOrDefault:(Ljava/lang/Object;)I\n+  #124 = Utf8               numberOptionOrDefault\n+  #125 = Utf8               (Ljava/lang/Object;)I\n+  #126 = Methodref          #10.#127      // org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n+  #127 = NameAndType        #128:#129     // setDictSize:(I)V\n+  #128 = Utf8               setDictSize\n+  #129 = Utf8               (I)V\n+  #130 = Utf8               options\n+  #131 = Utf8               Lorg/tukaani/xz/LZMA2Options;\n+  #132 = Utf8               getOptionsAsProperties\n+  #133 = Utf8               (Ljava/lang/Object;)[B\n+  #134 = Methodref          #10.#135      // org/tukaani/xz/LZMA2Options.getPb:()I\n+  #135 = NameAndType        #136:#137     // getPb:()I\n+  #136 = Utf8               getPb\n+  #137 = Utf8               ()I\n+  #138 = Methodref          #10.#139      // org/tukaani/xz/LZMA2Options.getLp:()I\n+  #139 = NameAndType        #140:#137     // getLp:()I\n+  #140 = Utf8               getLp\n+  #141 = Methodref          #10.#142      // org/tukaani/xz/LZMA2Options.getLc:()I\n+  #142 = NameAndType        #143:#137     // getLc:()I\n+  #143 = Utf8               getLc\n+  #144 = Methodref          #10.#145      // org/tukaani/xz/LZMA2Options.getDictSize:()I\n+  #145 = NameAndType        #146:#137     // getDictSize:()I\n+  #146 = Utf8               getDictSize\n+  #147 = Methodref          #115.#148     // org/apache/commons/compress/utils/ByteUtils.toLittleEndian:([BJII)V\n+  #148 = NameAndType        #149:#150     // toLittleEndian:([BJII)V\n+  #149 = Utf8               toLittleEndian\n+  #150 = Utf8               ([BJII)V\n+  #151 = Utf8               props\n+  #152 = Utf8               o\n+  #153 = Utf8               getOptionsFromCoder\n+  #154 = Utf8               (Lorg/apache/commons/compress/archivers/sevenz/Coder;Ljava/io/InputStream;)Ljava/lang/Object;\n+  #155 = Methodref          #10.#156      // org/tukaani/xz/LZMA2Options.setPb:(I)V\n+  #156 = NameAndType        #157:#129     // setPb:(I)V\n+  #157 = Utf8               setPb\n+  #158 = Methodref          #10.#159      // org/tukaani/xz/LZMA2Options.setLcLp:(II)V\n+  #159 = NameAndType        #160:#161     // setLcLp:(II)V\n+  #160 = Utf8               setLcLp\n+  #161 = Utf8               (II)V\n+  #162 = Utf8               pb\n+  #163 = Utf8               lp\n+  #164 = Utf8               lc\n+  #165 = Integer            8388608\n+  #166 = Methodref          #1.#167       // org/apache/commons/compress/archivers/sevenz/LZMADecoder.toInt:(Ljava/lang/Object;I)I\n+  #167 = NameAndType        #168:#169     // toInt:(Ljava/lang/Object;I)I\n+  #168 = Utf8               toInt\n+  #169 = Utf8               (Ljava/lang/Object;I)I\n   #170 = Utf8               SourceFile\n   #171 = Utf8               LZMADecoder.java\n {\n   org.apache.commons.compress.archivers.sevenz.LZMADecoder();\n     descriptor: ()V\n     flags: (0x0000)\n     Code:\n       stack=5, locals=1, args_size=1\n          0: aload_0\n          1: iconst_2\n-         2: anewarray     #1                  // class java/lang/Class\n+         2: anewarray     #8                  // class java/lang/Class\n          5: dup\n          6: iconst_0\n-         7: ldc           #3                  // class org/tukaani/xz/LZMA2Options\n+         7: ldc           #10                 // class org/tukaani/xz/LZMA2Options\n          9: aastore\n         10: dup\n         11: iconst_1\n-        12: ldc           #5                  // class java/lang/Number\n+        12: ldc           #12                 // class java/lang/Number\n         14: aastore\n-        15: invokespecial #7                  // Method org/apache/commons/compress/archivers/sevenz/AbstractCoder.\"<init>\":([Ljava/lang/Class;)V\n+        15: invokespecial #14                 // Method org/apache/commons/compress/archivers/sevenz/AbstractCoder.\"<init>\":([Ljava/lang/Class;)V\n         18: return\n       LineNumberTable:\n         line 33: 0\n         line 34: 18\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      19     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMADecoder;\n \n   java.io.InputStream decode(java.lang.String, java.io.InputStream, long, org.apache.commons.compress.archivers.sevenz.Coder, byte[], int) throws java.io.IOException;\n     descriptor: (Ljava/lang/String;Ljava/io/InputStream;JLorg/apache/commons/compress/archivers/sevenz/Coder;[BI)Ljava/io/InputStream;\n     flags: (0x0000)\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=7, locals=12, args_size=7\n          0: aload         5\n-         2: getfield      #13                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n+         2: getfield      #26                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n          5: ifnonnull     18\n-         8: new           #19                 // class java/io/IOException\n+         8: new           #24                 // class java/io/IOException\n         11: dup\n-        12: ldc           #21                 // String Missing LZMA properties\n-        14: invokespecial #23                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        12: ldc           #32                 // String Missing LZMA properties\n+        14: invokespecial #34                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         17: athrow\n         18: aload         5\n-        20: getfield      #13                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n+        20: getfield      #26                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n         23: arraylength\n         24: iconst_1\n         25: if_icmpge     38\n-        28: new           #19                 // class java/io/IOException\n+        28: new           #24                 // class java/io/IOException\n         31: dup\n-        32: ldc           #26                 // String LZMA properties too short\n-        34: invokespecial #23                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        32: ldc           #37                 // String LZMA properties too short\n+        34: invokespecial #34                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         37: athrow\n         38: aload         5\n-        40: getfield      #13                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n+        40: getfield      #26                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n         43: iconst_0\n         44: baload\n         45: istore        8\n         47: aload_0\n         48: aload         5\n-        50: invokespecial #28                 // Method getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+        50: invokespecial #39                 // Method getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n         53: istore        9\n         55: iload         9\n-        57: ldc           #36                 // int 2147483632\n-        59: if_icmple     89\n-        62: new           #19                 // class java/io/IOException\n+        57: ldc           #43                 // int 2147483632\n+        59: if_icmple     86\n+        62: new           #24                 // class java/io/IOException\n         65: dup\n-        66: new           #37                 // class java/lang/StringBuilder\n+        66: new           #44                 // class java/lang/StringBuilder\n         69: dup\n-        70: invokespecial #39                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        73: ldc           #42                 // String Dictionary larger than 4GiB maximum size used in\n-        75: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        78: aload_1\n-        79: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        82: invokevirtual #48                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        85: invokespecial #23                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        88: athrow\n-        89: iload         9\n-        91: iload         8\n-        93: invokestatic  #52                 // Method org/tukaani/xz/LZMAInputStream.getMemoryUsage:(IB)I\n-        96: istore        10\n-        98: iload         10\n-       100: iload         7\n-       102: if_icmple     118\n-       105: new           #56                 // class org/apache/commons/compress/MemoryLimitException\n-       108: dup\n-       109: iload         10\n-       111: i2l\n-       112: iload         7\n-       114: invokespecial #58                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JI)V\n-       117: athrow\n-       118: new           #34                 // class org/tukaani/xz/LZMAInputStream\n-       121: dup\n-       122: aload_2\n-       123: lload_3\n-       124: iload         8\n-       126: iload         9\n-       128: invokespecial #61                 // Method org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;JBI)V\n-       131: astore        11\n-       133: aload         11\n-       135: invokevirtual #64                 // Method org/tukaani/xz/LZMAInputStream.enableRelaxedEndCondition:()V\n-       138: aload         11\n-       140: areturn\n+        70: ldc           #46                 // String Dictionary larger than 4GiB maximum size used in\n+        72: invokespecial #48                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+        75: aload_1\n+        76: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        79: invokevirtual #53                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        82: invokespecial #34                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        85: athrow\n+        86: iload         9\n+        88: iload         8\n+        90: invokestatic  #57                 // Method org/tukaani/xz/LZMAInputStream.getMemoryUsage:(IB)I\n+        93: istore        10\n+        95: iload         10\n+        97: iload         7\n+        99: if_icmple     115\n+       102: new           #63                 // class org/apache/commons/compress/MemoryLimitException\n+       105: dup\n+       106: iload         10\n+       108: i2l\n+       109: iload         7\n+       111: invokespecial #65                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JI)V\n+       114: athrow\n+       115: new           #58                 // class org/tukaani/xz/LZMAInputStream\n+       118: dup\n+       119: aload_2\n+       120: lload_3\n+       121: iload         8\n+       123: iload         9\n+       125: invokespecial #68                 // Method org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;JBI)V\n+       128: astore        11\n+       130: aload         11\n+       132: invokevirtual #71                 // Method org/tukaani/xz/LZMAInputStream.enableRelaxedEndCondition:()V\n+       135: aload         11\n+       137: areturn\n       LineNumberTable:\n         line 39: 0\n         line 40: 8\n         line 42: 18\n         line 43: 28\n         line 45: 38\n         line 46: 47\n         line 47: 55\n         line 48: 62\n-        line 50: 89\n-        line 51: 98\n-        line 52: 105\n-        line 54: 118\n-        line 55: 133\n-        line 56: 138\n+        line 50: 86\n+        line 51: 95\n+        line 52: 102\n+        line 54: 115\n+        line 55: 130\n+        line 56: 135\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0     141     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMADecoder;\n-            0     141     1 archiveName   Ljava/lang/String;\n-            0     141     2    in   Ljava/io/InputStream;\n-            0     141     3 uncompressedLength   J\n-            0     141     5 coder   Lorg/apache/commons/compress/archivers/sevenz/Coder;\n-            0     141     6 password   [B\n-            0     141     7 maxMemoryLimitInKb   I\n-           47      94     8 propsByte   B\n-           55      86     9 dictSize   I\n-           98      43    10 memoryUsageInKb   I\n-          133       8    11 lzmaIn   Lorg/tukaani/xz/LZMAInputStream;\n+            0     138     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMADecoder;\n+            0     138     1 archiveName   Ljava/lang/String;\n+            0     138     2    in   Ljava/io/InputStream;\n+            0     138     3 uncompressedLength   J\n+            0     138     5 coder   Lorg/apache/commons/compress/archivers/sevenz/Coder;\n+            0     138     6 password   [B\n+            0     138     7 maxMemoryLimitInKb   I\n+           47      91     8 propsByte   B\n+           55      83     9 dictSize   I\n+           95      43    10 memoryUsageInKb   I\n+          130       8    11 lzmaIn   Lorg/tukaani/xz/LZMAInputStream;\n       StackMapTable: number_of_entries = 4\n         frame_type = 18 /* same */\n         frame_type = 19 /* same */\n         frame_type = 253 /* append */\n-          offset_delta = 50\n+          offset_delta = 47\n           locals = [ int, int ]\n         frame_type = 252 /* append */\n           offset_delta = 28\n           locals = [ int ]\n-    Exceptions:\n-      throws java.io.IOException\n \n   java.io.OutputStream encode(java.io.OutputStream, java.lang.Object) throws java.io.IOException;\n     descriptor: (Ljava/io/OutputStream;Ljava/lang/Object;)Ljava/io/OutputStream;\n     flags: (0x0000)\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=7, locals=3, args_size=3\n-         0: new           #67                 // class org/apache/commons/compress/utils/FlushShieldFilterOutputStream\n+         0: new           #94                 // class org/apache/commons/compress/utils/FlushShieldFilterOutputStream\n          3: dup\n-         4: new           #69                 // class org/tukaani/xz/LZMAOutputStream\n+         4: new           #96                 // class org/tukaani/xz/LZMAOutputStream\n          7: dup\n          8: aload_1\n          9: aload_0\n         10: aload_2\n-        11: invokespecial #71                 // Method getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n+        11: invokespecial #98                 // Method getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n         14: iconst_0\n-        15: invokespecial #75                 // Method org/tukaani/xz/LZMAOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/LZMA2Options;Z)V\n-        18: invokespecial #78                 // Method org/apache/commons/compress/utils/FlushShieldFilterOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n+        15: invokespecial #102                // Method org/tukaani/xz/LZMAOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/LZMA2Options;Z)V\n+        18: invokespecial #105                // Method org/apache/commons/compress/utils/FlushShieldFilterOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n         21: areturn\n       LineNumberTable:\n         line 63: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      22     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMADecoder;\n             0      22     1   out   Ljava/io/OutputStream;\n             0      22     2  opts   Ljava/lang/Object;\n-    Exceptions:\n-      throws java.io.IOException\n \n   private int getDictionarySize(org.apache.commons.compress.archivers.sevenz.Coder) throws java.lang.IllegalArgumentException;\n     descriptor: (Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n     flags: (0x0002) ACC_PRIVATE\n+    Exceptions:\n+      throws java.lang.IllegalArgumentException\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_1\n-         1: getfield      #13                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n+         1: getfield      #26                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n          4: iconst_1\n          5: iconst_4\n-         6: invokestatic  #81                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n+         6: invokestatic  #114                // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n          9: l2i\n         10: ireturn\n       LineNumberTable:\n         line 67: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      11     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMADecoder;\n             0      11     1 coder   Lorg/apache/commons/compress/archivers/sevenz/Coder;\n-    Exceptions:\n-      throws java.lang.IllegalArgumentException\n \n   private org.tukaani.xz.LZMA2Options getOptions(java.lang.Object) throws java.io.IOException;\n     descriptor: (Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n     flags: (0x0002) ACC_PRIVATE\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_1\n-         1: instanceof    #3                  // class org/tukaani/xz/LZMA2Options\n+         1: instanceof    #10                 // class org/tukaani/xz/LZMA2Options\n          4: ifeq          12\n          7: aload_1\n-         8: checkcast     #3                  // class org/tukaani/xz/LZMA2Options\n+         8: checkcast     #10                 // class org/tukaani/xz/LZMA2Options\n         11: areturn\n-        12: new           #3                  // class org/tukaani/xz/LZMA2Options\n+        12: new           #10                 // class org/tukaani/xz/LZMA2Options\n         15: dup\n-        16: invokespecial #87                 // Method org/tukaani/xz/LZMA2Options.\"<init>\":()V\n+        16: invokespecial #120                // Method org/tukaani/xz/LZMA2Options.\"<init>\":()V\n         19: astore_2\n         20: aload_2\n         21: aload_0\n         22: aload_1\n-        23: invokespecial #88                 // Method numberOptionOrDefault:(Ljava/lang/Object;)I\n-        26: invokevirtual #92                 // Method org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n+        23: invokespecial #122                // Method numberOptionOrDefault:(Ljava/lang/Object;)I\n+        26: invokevirtual #126                // Method org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n         29: aload_2\n         30: areturn\n       LineNumberTable:\n         line 71: 0\n         line 72: 7\n         line 74: 12\n         line 75: 20\n@@ -397,56 +398,56 @@\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      31     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMADecoder;\n             0      31     1  opts   Ljava/lang/Object;\n            20      11     2 options   Lorg/tukaani/xz/LZMA2Options;\n       StackMapTable: number_of_entries = 1\n         frame_type = 12 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   byte[] getOptionsAsProperties(java.lang.Object) throws java.io.IOException;\n     descriptor: (Ljava/lang/Object;)[B\n     flags: (0x0000)\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=6, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #71                 // Method getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n+         2: invokespecial #98                 // Method getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n          5: astore_2\n          6: aload_2\n-         7: invokevirtual #96                 // Method org/tukaani/xz/LZMA2Options.getPb:()I\n+         7: invokevirtual #134                // Method org/tukaani/xz/LZMA2Options.getPb:()I\n         10: iconst_5\n         11: imul\n         12: aload_2\n-        13: invokevirtual #100                // Method org/tukaani/xz/LZMA2Options.getLp:()I\n+        13: invokevirtual #138                // Method org/tukaani/xz/LZMA2Options.getLp:()I\n         16: iadd\n         17: bipush        9\n         19: imul\n         20: aload_2\n-        21: invokevirtual #103                // Method org/tukaani/xz/LZMA2Options.getLc:()I\n+        21: invokevirtual #141                // Method org/tukaani/xz/LZMA2Options.getLc:()I\n         24: iadd\n         25: i2b\n         26: istore_3\n         27: aload_2\n-        28: invokevirtual #106                // Method org/tukaani/xz/LZMA2Options.getDictSize:()I\n+        28: invokevirtual #144                // Method org/tukaani/xz/LZMA2Options.getDictSize:()I\n         31: istore        4\n         33: iconst_5\n         34: newarray       byte\n         36: astore        5\n         38: aload         5\n         40: iconst_0\n         41: iload_3\n         42: bastore\n         43: aload         5\n         45: iload         4\n         47: i2l\n         48: iconst_1\n         49: iconst_4\n-        50: invokestatic  #109                // Method org/apache/commons/compress/utils/ByteUtils.toLittleEndian:([BJII)V\n+        50: invokestatic  #147                // Method org/apache/commons/compress/utils/ByteUtils.toLittleEndian:([BJII)V\n         53: aload         5\n         55: areturn\n       LineNumberTable:\n         line 81: 0\n         line 82: 6\n         line 83: 27\n         line 84: 33\n@@ -457,42 +458,42 @@\n         Start  Length  Slot  Name   Signature\n             0      56     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMADecoder;\n             0      56     1  opts   Ljava/lang/Object;\n             6      50     2 options   Lorg/tukaani/xz/LZMA2Options;\n            27      29     3 props   B\n            33      23     4 dictSize   I\n            38      18     5     o   [B\n-    Exceptions:\n-      throws java.io.IOException\n \n   java.lang.Object getOptionsFromCoder(org.apache.commons.compress.archivers.sevenz.Coder, java.io.InputStream) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/sevenz/Coder;Ljava/io/InputStream;)Ljava/lang/Object;\n     flags: (0x0000)\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=3, locals=9, args_size=3\n          0: aload_1\n-         1: getfield      #13                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n+         1: getfield      #26                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n          4: ifnonnull     17\n-         7: new           #19                 // class java/io/IOException\n+         7: new           #24                 // class java/io/IOException\n         10: dup\n-        11: ldc           #21                 // String Missing LZMA properties\n-        13: invokespecial #23                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        11: ldc           #32                 // String Missing LZMA properties\n+        13: invokespecial #34                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         16: athrow\n         17: aload_1\n-        18: getfield      #13                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n+        18: getfield      #26                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n         21: arraylength\n         22: iconst_1\n         23: if_icmpge     36\n-        26: new           #19                 // class java/io/IOException\n+        26: new           #24                 // class java/io/IOException\n         29: dup\n-        30: ldc           #26                 // String LZMA properties too short\n-        32: invokespecial #23                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        30: ldc           #37                 // String LZMA properties too short\n+        32: invokespecial #34                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         35: athrow\n         36: aload_1\n-        37: getfield      #13                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n+        37: getfield      #26                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n         40: iconst_0\n         41: baload\n         42: istore_3\n         43: iload_3\n         44: sipush        255\n         47: iand\n         48: istore        4\n@@ -514,30 +515,30 @@\n         74: istore        6\n         76: iload         4\n         78: iload         6\n         80: bipush        9\n         82: imul\n         83: isub\n         84: istore        7\n-        86: new           #3                  // class org/tukaani/xz/LZMA2Options\n+        86: new           #10                 // class org/tukaani/xz/LZMA2Options\n         89: dup\n-        90: invokespecial #87                 // Method org/tukaani/xz/LZMA2Options.\"<init>\":()V\n+        90: invokespecial #120                // Method org/tukaani/xz/LZMA2Options.\"<init>\":()V\n         93: astore        8\n         95: aload         8\n         97: iload         5\n-        99: invokevirtual #113                // Method org/tukaani/xz/LZMA2Options.setPb:(I)V\n+        99: invokevirtual #155                // Method org/tukaani/xz/LZMA2Options.setPb:(I)V\n        102: aload         8\n        104: iload         7\n        106: iload         6\n-       108: invokevirtual #116                // Method org/tukaani/xz/LZMA2Options.setLcLp:(II)V\n+       108: invokevirtual #158                // Method org/tukaani/xz/LZMA2Options.setLcLp:(II)V\n        111: aload         8\n        113: aload_0\n        114: aload_1\n-       115: invokespecial #28                 // Method getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n-       118: invokevirtual #92                 // Method org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n+       115: invokespecial #39                 // Method getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+       118: invokevirtual #126                // Method org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n        121: aload         8\n        123: areturn\n       LineNumberTable:\n         line 92: 0\n         line 93: 7\n         line 95: 17\n         line 96: 26\n@@ -562,25 +563,23 @@\n            57      67     5    pb   I\n            76      48     6    lp   I\n            86      38     7    lc   I\n            95      29     8  opts   Lorg/tukaani/xz/LZMA2Options;\n       StackMapTable: number_of_entries = 2\n         frame_type = 17 /* same */\n         frame_type = 18 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   private int numberOptionOrDefault(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n-         1: ldc           #120                // int 8388608\n-         3: invokestatic  #121                // Method toInt:(Ljava/lang/Object;I)I\n+         1: ldc           #165                // int 8388608\n+         3: invokestatic  #166                // Method toInt:(Ljava/lang/Object;I)I\n          6: ireturn\n       LineNumberTable:\n         line 112: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMADecoder;\n             0       7     1  opts   Ljava/lang/Object;\n"}]}
