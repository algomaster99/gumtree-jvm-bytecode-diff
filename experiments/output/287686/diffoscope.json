{"diffoscope-json-version": 1, "source1": "first/CpioArchiveOutputStream.class", "source2": "second/CpioArchiveOutputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,142 +1,142 @@\n-  SHA-256 checksum 865a2ad998bd5abb5af01d848e490fa0ee7f0433ad8198ca9dfec4356053b8c8\n+  SHA-256 checksum dd0ac7cccd558b7e6f9bbc6310379fca4a43bb6263e0fea4227172aff979e4a6\n   Compiled from \"CpioArchiveOutputStream.java\"\n public class org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream extends org.apache.commons.compress.archivers.ArchiveOutputStream implements org.apache.commons.compress.archivers.cpio.CpioConstants\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #133                        // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream\n   super_class: #134                       // org/apache/commons/compress/archivers/ArchiveOutputStream\n   interfaces: 1, fields: 12, methods: 22, attributes: 1\n Constant pool:\n-    #1 = Class              #204          // org/apache/commons/compress/archivers/cpio/CpioConstants\n-    #2 = Class              #205          // org/apache/commons/compress/utils/CharsetNames\n-    #3 = String             #206          // US-ASCII\n-    #4 = Methodref          #133.#207     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.\"<init>\":(Ljava/io/OutputStream;SILjava/lang/String;)V\n-    #5 = Methodref          #134.#208     // org/apache/commons/compress/archivers/ArchiveOutputStream.\"<init>\":()V\n-    #6 = Class              #209          // java/util/HashMap\n-    #7 = Methodref          #6.#208       // java/util/HashMap.\"<init>\":()V\n-    #8 = Fieldref           #133.#210     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.names:Ljava/util/HashMap;\n-    #9 = Fieldref           #133.#211     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.nextArtificalDeviceAndInode:J\n-   #10 = Fieldref           #133.#212     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.out:Ljava/io/OutputStream;\n-   #11 = Class              #213          // java/lang/IllegalArgumentException\n-   #12 = Class              #214          // java/lang/StringBuilder\n-   #13 = Methodref          #12.#208      // java/lang/StringBuilder.\"<init>\":()V\n-   #14 = String             #215          // Unknown format:\n-   #15 = Methodref          #12.#216      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #16 = Methodref          #12.#217      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #17 = Methodref          #12.#218      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #18 = Methodref          #11.#219      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #19 = Fieldref           #133.#220     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.entryFormat:S\n-   #20 = Fieldref           #133.#221     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.blockSize:I\n-   #21 = Fieldref           #133.#222     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.encoding:Ljava/lang/String;\n-   #22 = Methodref          #223.#224     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #23 = Fieldref           #133.#225     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #24 = Methodref          #133.#226     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.\"<init>\":(Ljava/io/OutputStream;S)V\n-   #25 = Fieldref           #133.#227     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.closed:Z\n-   #26 = Class              #228          // java/io/IOException\n-   #27 = String             #229          // Stream closed\n-   #28 = Methodref          #26.#219      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #29 = Fieldref           #133.#230     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.finished:Z\n-   #30 = String             #231          // Stream has already been finished\n-   #31 = Class              #232          // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry\n-   #32 = Methodref          #133.#233     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.ensureOpen:()V\n-   #33 = Fieldref           #133.#234     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.entry:Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;\n-   #34 = Methodref          #133.#235     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.closeArchiveEntry:()V\n-   #35 = Methodref          #31.#236      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getTime:()J\n+    #1 = Class              #201          // org/apache/commons/compress/archivers/cpio/CpioConstants\n+    #2 = Class              #202          // org/apache/commons/compress/utils/CharsetNames\n+    #3 = String             #203          // US-ASCII\n+    #4 = Methodref          #133.#204     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.\"<init>\":(Ljava/io/OutputStream;SILjava/lang/String;)V\n+    #5 = Methodref          #134.#205     // org/apache/commons/compress/archivers/ArchiveOutputStream.\"<init>\":()V\n+    #6 = Class              #206          // java/util/HashMap\n+    #7 = Methodref          #6.#205       // java/util/HashMap.\"<init>\":()V\n+    #8 = Fieldref           #133.#207     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.names:Ljava/util/HashMap;\n+    #9 = Fieldref           #133.#208     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.nextArtificalDeviceAndInode:J\n+   #10 = Fieldref           #133.#209     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.out:Ljava/io/OutputStream;\n+   #11 = Class              #210          // java/lang/IllegalArgumentException\n+   #12 = Class              #211          // java/lang/StringBuilder\n+   #13 = Methodref          #12.#205      // java/lang/StringBuilder.\"<init>\":()V\n+   #14 = String             #212          // Unknown format:\n+   #15 = Methodref          #12.#213      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #16 = Methodref          #12.#214      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #17 = Methodref          #12.#215      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #18 = Methodref          #11.#216      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #19 = Fieldref           #133.#217     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.entryFormat:S\n+   #20 = Fieldref           #133.#218     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.blockSize:I\n+   #21 = Fieldref           #133.#219     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.encoding:Ljava/lang/String;\n+   #22 = Methodref          #220.#221     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #23 = Fieldref           #133.#222     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #24 = Methodref          #133.#223     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.\"<init>\":(Ljava/io/OutputStream;S)V\n+   #25 = Fieldref           #133.#224     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.closed:Z\n+   #26 = Class              #225          // java/io/IOException\n+   #27 = String             #226          // Stream closed\n+   #28 = Methodref          #26.#216      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #29 = Fieldref           #133.#227     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.finished:Z\n+   #30 = String             #228          // Stream has already been finished\n+   #31 = Class              #229          // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry\n+   #32 = Methodref          #133.#230     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.ensureOpen:()V\n+   #33 = Fieldref           #133.#231     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.entry:Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;\n+   #34 = Methodref          #133.#232     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.closeArchiveEntry:()V\n+   #35 = Methodref          #31.#233      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getTime:()J\n    #36 = Long               -1l\n-   #38 = Methodref          #237.#238     // java/lang/System.currentTimeMillis:()J\n+   #38 = Methodref          #234.#235     // java/lang/System.currentTimeMillis:()J\n    #39 = Long               1000l\n-   #41 = Methodref          #31.#239      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.setTime:(J)V\n-   #42 = Methodref          #31.#240      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getFormat:()S\n-   #43 = String             #241          // Header format:\n-   #44 = String             #242          //  does not match existing format:\n-   #45 = Methodref          #31.#243      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getName:()Ljava/lang/String;\n-   #46 = Methodref          #6.#244       // java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #47 = String             #245          // Duplicate entry:\n-   #48 = Methodref          #133.#246     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.writeHeader:(Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;)V\n-   #49 = Fieldref           #133.#247     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.written:J\n-   #50 = String             #248          // 070701\n-   #51 = Methodref          #249.#250     // org/apache/commons/compress/utils/ArchiveUtils.toAsciiBytes:(Ljava/lang/String;)[B\n-   #52 = Methodref          #251.#252     // java/io/OutputStream.write:([B)V\n-   #53 = Methodref          #133.#253     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.count:(I)V\n-   #54 = Methodref          #133.#254     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.writeNewEntry:(Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;)V\n-   #55 = String             #255          // 070702\n-   #56 = String             #256          // 070707\n-   #57 = Methodref          #133.#257     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.writeOldAsciiEntry:(Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;)V\n+   #41 = Methodref          #31.#236      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.setTime:(J)V\n+   #42 = Methodref          #31.#237      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getFormat:()S\n+   #43 = String             #238          // Header format:\n+   #44 = String             #239          //  does not match existing format:\n+   #45 = Methodref          #31.#240      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getName:()Ljava/lang/String;\n+   #46 = Methodref          #6.#241       // java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #47 = String             #242          // Duplicate entry:\n+   #48 = Methodref          #133.#243     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.writeHeader:(Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;)V\n+   #49 = Fieldref           #133.#244     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.written:J\n+   #50 = String             #245          // 070701\n+   #51 = Methodref          #246.#247     // org/apache/commons/compress/utils/ArchiveUtils.toAsciiBytes:(Ljava/lang/String;)[B\n+   #52 = Methodref          #165.#248     // java/io/OutputStream.write:([B)V\n+   #53 = Methodref          #133.#249     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.count:(I)V\n+   #54 = Methodref          #133.#250     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.writeNewEntry:(Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;)V\n+   #55 = String             #251          // 070702\n+   #56 = String             #252          // 070707\n+   #57 = Methodref          #133.#253     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.writeOldAsciiEntry:(Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;)V\n    #58 = Long               29127l\n-   #60 = Methodref          #133.#258     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.writeBinaryLong:(JIZ)V\n-   #61 = Methodref          #133.#259     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.writeOldBinaryEntry:(Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;Z)V\n-   #62 = String             #260          // Unknown format\n-   #63 = Methodref          #31.#261      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getInode:()J\n-   #64 = Methodref          #31.#262      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getDeviceMin:()J\n-   #65 = String             #263          // TRAILER!!!\n-   #66 = Methodref          #264.#265     // java/lang/String.equals:(Ljava/lang/Object;)Z\n+   #60 = Methodref          #133.#254     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.writeBinaryLong:(JIZ)V\n+   #61 = Methodref          #133.#255     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.writeOldBinaryEntry:(Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;Z)V\n+   #62 = String             #256          // Unknown format\n+   #63 = Methodref          #31.#257      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getInode:()J\n+   #64 = Methodref          #31.#258      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getDeviceMin:()J\n+   #65 = String             #259          // TRAILER!!!\n+   #66 = Methodref          #166.#260     // java/lang/String.equals:(Ljava/lang/Object;)Z\n    #67 = Long               4294967296l\n-   #69 = Methodref          #266.#267     // java/lang/Math.max:(JJ)J\n-   #70 = Methodref          #133.#268     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.writeAsciiLong:(JII)V\n-   #71 = Methodref          #31.#269      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getMode:()J\n-   #72 = Methodref          #31.#270      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getUID:()J\n-   #73 = Methodref          #31.#271      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getGID:()J\n-   #74 = Methodref          #31.#272      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getNumberOfLinks:()J\n-   #75 = Methodref          #31.#273      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getSize:()J\n-   #76 = Methodref          #31.#274      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getDeviceMaj:()J\n-   #77 = Methodref          #31.#275      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getRemoteDeviceMaj:()J\n-   #78 = Methodref          #31.#276      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getRemoteDeviceMin:()J\n-   #79 = Methodref          #133.#277     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.encode:(Ljava/lang/String;)[B\n-   #80 = Methodref          #31.#278      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getChksum:()J\n-   #81 = Methodref          #133.#279     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.writeCString:([B)V\n-   #82 = Methodref          #31.#280      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getHeaderPadCount:(J)I\n-   #83 = Methodref          #133.#281     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.pad:(I)V\n-   #84 = Methodref          #31.#282      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getDevice:()J\n+   #69 = Methodref          #261.#262     // java/lang/Math.max:(JJ)J\n+   #70 = Methodref          #133.#263     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.writeAsciiLong:(JII)V\n+   #71 = Methodref          #31.#264      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getMode:()J\n+   #72 = Methodref          #31.#265      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getUID:()J\n+   #73 = Methodref          #31.#266      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getGID:()J\n+   #74 = Methodref          #31.#267      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getNumberOfLinks:()J\n+   #75 = Methodref          #31.#268      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getSize:()J\n+   #76 = Methodref          #31.#269      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getDeviceMaj:()J\n+   #77 = Methodref          #31.#270      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getRemoteDeviceMaj:()J\n+   #78 = Methodref          #31.#271      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getRemoteDeviceMin:()J\n+   #79 = Methodref          #133.#272     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.encode:(Ljava/lang/String;)[B\n+   #80 = Methodref          #31.#273      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getChksum:()J\n+   #81 = Methodref          #133.#274     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.writeCString:([B)V\n+   #82 = Methodref          #31.#275      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getHeaderPadCount:(J)I\n+   #83 = Methodref          #133.#276     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.pad:(I)V\n+   #84 = Methodref          #31.#277      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getDevice:()J\n    #85 = Long               262143l\n    #87 = Long               262144l\n-   #89 = Methodref          #31.#283      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getRemoteDevice:()J\n+   #89 = Methodref          #31.#278      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getRemoteDevice:()J\n    #90 = Long               65535l\n    #92 = Long               65536l\n-   #94 = String             #284          // Trying to close non-existent entry\n-   #95 = String             #285          // Invalid entry size (expected\n-   #96 = Methodref          #12.#286      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #97 = String             #287          //  but got\n-   #98 = String             #288          //  bytes)\n-   #99 = Methodref          #31.#289      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getDataPadCount:()I\n-  #100 = Fieldref           #133.#290     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.crc:J\n-  #101 = String             #291          // CRC Error\n-  #102 = Class              #292          // java/lang/IndexOutOfBoundsException\n-  #103 = Methodref          #102.#208     // java/lang/IndexOutOfBoundsException.\"<init>\":()V\n-  #104 = String             #293          // No current CPIO entry\n-  #105 = String             #294          // Attempt to write past end of STORED entry\n-  #106 = Methodref          #251.#295     // java/io/OutputStream.write:([BII)V\n+   #94 = String             #279          // Trying to close non-existent entry\n+   #95 = String             #280          // Invalid entry size (expected\n+   #96 = Methodref          #12.#281      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+   #97 = String             #282          //  but got\n+   #98 = String             #283          //  bytes)\n+   #99 = Methodref          #31.#284      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.getDataPadCount:()I\n+  #100 = Fieldref           #133.#285     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.crc:J\n+  #101 = String             #286          // CRC Error\n+  #102 = Class              #287          // java/lang/IndexOutOfBoundsException\n+  #103 = Methodref          #102.#205     // java/lang/IndexOutOfBoundsException.\"<init>\":()V\n+  #104 = String             #288          // No current CPIO entry\n+  #105 = String             #289          // Attempt to write past end of STORED entry\n+  #106 = Methodref          #165.#290     // java/io/OutputStream.write:([BII)V\n   #107 = Long               4294967295l\n-  #109 = String             #296          // This archive has already been finished\n-  #110 = String             #297          // This archive contains unclosed entries.\n-  #111 = Methodref          #31.#298      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.\"<init>\":(S)V\n-  #112 = Methodref          #31.#299      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.setName:(Ljava/lang/String;)V\n-  #113 = Methodref          #31.#300      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.setNumberOfLinks:(J)V\n-  #114 = Methodref          #133.#301     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.getBytesWritten:()J\n-  #115 = Methodref          #133.#302     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.finish:()V\n-  #116 = Methodref          #251.#303     // java/io/OutputStream.close:()V\n-  #117 = Methodref          #304.#305     // org/apache/commons/compress/archivers/cpio/CpioUtil.long2byteArray:(JIZ)[B\n-  #118 = Methodref          #306.#307     // java/lang/Long.toHexString:(J)Ljava/lang/String;\n-  #119 = Methodref          #306.#308     // java/lang/Long.toOctalString:(J)Ljava/lang/String;\n-  #120 = Methodref          #12.#309      // java/lang/StringBuilder.length:()I\n-  #121 = String             #310          // 0\n-  #122 = Methodref          #12.#311      // java/lang/StringBuilder.insert:(ILjava/lang/String;)Ljava/lang/StringBuilder;\n-  #123 = Methodref          #12.#312      // java/lang/StringBuilder.substring:(I)Ljava/lang/String;\n-  #124 = InterfaceMethodref #313.#314     // org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-  #125 = Methodref          #315.#316     // java/nio/ByteBuffer.limit:()I\n-  #126 = Methodref          #315.#317     // java/nio/ByteBuffer.position:()I\n-  #127 = Methodref          #315.#318     // java/nio/ByteBuffer.array:()[B\n-  #128 = Methodref          #315.#319     // java/nio/ByteBuffer.arrayOffset:()I\n-  #129 = Methodref          #320.#321     // java/util/Arrays.copyOfRange:([BII)[B\n-  #130 = Methodref          #251.#322     // java/io/OutputStream.write:(I)V\n-  #131 = Methodref          #31.#323      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-  #132 = Methodref          #31.#324      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n-  #133 = Class              #325          // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream\n-  #134 = Class              #326          // org/apache/commons/compress/archivers/ArchiveOutputStream\n+  #109 = String             #291          // This archive has already been finished\n+  #110 = String             #292          // This archive contains unclosed entries.\n+  #111 = Methodref          #31.#293      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.\"<init>\":(S)V\n+  #112 = Methodref          #31.#294      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.setName:(Ljava/lang/String;)V\n+  #113 = Methodref          #31.#295      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.setNumberOfLinks:(J)V\n+  #114 = Methodref          #133.#296     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.getBytesWritten:()J\n+  #115 = Methodref          #133.#297     // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.finish:()V\n+  #116 = Methodref          #165.#298     // java/io/OutputStream.close:()V\n+  #117 = Methodref          #299.#300     // org/apache/commons/compress/archivers/cpio/CpioUtil.long2byteArray:(JIZ)[B\n+  #118 = Methodref          #301.#302     // java/lang/Long.toHexString:(J)Ljava/lang/String;\n+  #119 = Methodref          #301.#303     // java/lang/Long.toOctalString:(J)Ljava/lang/String;\n+  #120 = Methodref          #12.#304      // java/lang/StringBuilder.length:()I\n+  #121 = String             #305          // 0\n+  #122 = Methodref          #12.#306      // java/lang/StringBuilder.insert:(ILjava/lang/String;)Ljava/lang/StringBuilder;\n+  #123 = Methodref          #12.#307      // java/lang/StringBuilder.substring:(I)Ljava/lang/String;\n+  #124 = InterfaceMethodref #308.#309     // org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #125 = Methodref          #310.#311     // java/nio/ByteBuffer.limit:()I\n+  #126 = Methodref          #310.#312     // java/nio/ByteBuffer.position:()I\n+  #127 = Methodref          #310.#313     // java/nio/ByteBuffer.array:()[B\n+  #128 = Methodref          #310.#314     // java/nio/ByteBuffer.arrayOffset:()I\n+  #129 = Methodref          #315.#316     // java/util/Arrays.copyOfRange:([BII)[B\n+  #130 = Methodref          #165.#317     // java/io/OutputStream.write:(I)V\n+  #131 = Methodref          #31.#318      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+  #132 = Methodref          #31.#319      // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n+  #133 = Class              #320          // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream\n+  #134 = Class              #321          // org/apache/commons/compress/archivers/ArchiveOutputStream\n   #135 = Utf8               entry\n   #136 = Utf8               Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;\n   #137 = Utf8               closed\n   #138 = Utf8               Z\n   #139 = Utf8               finished\n   #140 = Utf8               entryFormat\n   #141 = Utf8               S\n@@ -159,254 +159,249 @@\n   #158 = Utf8               <init>\n   #159 = Utf8               (Ljava/io/OutputStream;S)V\n   #160 = Utf8               Code\n   #161 = Utf8               LineNumberTable\n   #162 = Utf8               (Ljava/io/OutputStream;SI)V\n   #163 = Utf8               (Ljava/io/OutputStream;SILjava/lang/String;)V\n   #164 = Utf8               StackMapTable\n-  #165 = Class              #325          // org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream\n-  #166 = Class              #327          // java/io/OutputStream\n-  #167 = Class              #328          // java/lang/String\n-  #168 = Utf8               (Ljava/io/OutputStream;)V\n-  #169 = Utf8               (Ljava/io/OutputStream;Ljava/lang/String;)V\n-  #170 = Utf8               ensureOpen\n-  #171 = Utf8               ()V\n-  #172 = Utf8               Exceptions\n-  #173 = Utf8               putArchiveEntry\n-  #174 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n-  #175 = Class              #232          // org/apache/commons/compress/archivers/cpio/CpioArchiveEntry\n-  #176 = Utf8               writeHeader\n-  #177 = Utf8               (Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;)V\n-  #178 = Utf8               writeNewEntry\n-  #179 = Utf8               writeOldAsciiEntry\n-  #180 = Utf8               writeOldBinaryEntry\n-  #181 = Utf8               (Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;Z)V\n-  #182 = Utf8               closeArchiveEntry\n-  #183 = Utf8               write\n-  #184 = Utf8               ([BII)V\n-  #185 = Utf8               finish\n-  #186 = Utf8               close\n-  #187 = Class              #329          // java/lang/Throwable\n-  #188 = Utf8               pad\n-  #189 = Utf8               (I)V\n-  #190 = Utf8               writeBinaryLong\n-  #191 = Utf8               (JIZ)V\n-  #192 = Utf8               writeAsciiLong\n-  #193 = Utf8               (JII)V\n-  #194 = Class              #214          // java/lang/StringBuilder\n-  #195 = Utf8               encode\n-  #196 = Utf8               (Ljava/lang/String;)[B\n-  #197 = Utf8               writeCString\n-  #198 = Utf8               ([B)V\n-  #199 = Utf8               createArchiveEntry\n-  #200 = Utf8               (Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/ArchiveEntry;\n-  #201 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Lorg/apache/commons/compress/archivers/ArchiveEntry;\n-  #202 = Utf8               SourceFile\n-  #203 = Utf8               CpioArchiveOutputStream.java\n-  #204 = Utf8               org/apache/commons/compress/archivers/cpio/CpioConstants\n-  #205 = Utf8               org/apache/commons/compress/utils/CharsetNames\n-  #206 = Utf8               US-ASCII\n-  #207 = NameAndType        #158:#163     // \"<init>\":(Ljava/io/OutputStream;SILjava/lang/String;)V\n-  #208 = NameAndType        #158:#171     // \"<init>\":()V\n-  #209 = Utf8               java/util/HashMap\n-  #210 = NameAndType        #142:#143     // names:Ljava/util/HashMap;\n-  #211 = NameAndType        #153:#147     // nextArtificalDeviceAndInode:J\n-  #212 = NameAndType        #149:#150     // out:Ljava/io/OutputStream;\n-  #213 = Utf8               java/lang/IllegalArgumentException\n-  #214 = Utf8               java/lang/StringBuilder\n-  #215 = Utf8               Unknown format:\n-  #216 = NameAndType        #330:#331     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #217 = NameAndType        #330:#332     // append:(I)Ljava/lang/StringBuilder;\n-  #218 = NameAndType        #333:#334     // toString:()Ljava/lang/String;\n-  #219 = NameAndType        #158:#335     // \"<init>\":(Ljava/lang/String;)V\n-  #220 = NameAndType        #140:#141     // entryFormat:S\n-  #221 = NameAndType        #151:#152     // blockSize:I\n-  #222 = NameAndType        #156:#157     // encoding:Ljava/lang/String;\n-  #223 = Class              #336          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #224 = NameAndType        #337:#338     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #225 = NameAndType        #154:#155     // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #226 = NameAndType        #158:#159     // \"<init>\":(Ljava/io/OutputStream;S)V\n-  #227 = NameAndType        #137:#138     // closed:Z\n-  #228 = Utf8               java/io/IOException\n-  #229 = Utf8               Stream closed\n-  #230 = NameAndType        #139:#138     // finished:Z\n-  #231 = Utf8               Stream has already been finished\n-  #232 = Utf8               org/apache/commons/compress/archivers/cpio/CpioArchiveEntry\n-  #233 = NameAndType        #170:#171     // ensureOpen:()V\n-  #234 = NameAndType        #135:#136     // entry:Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;\n-  #235 = NameAndType        #182:#171     // closeArchiveEntry:()V\n-  #236 = NameAndType        #339:#340     // getTime:()J\n-  #237 = Class              #341          // java/lang/System\n-  #238 = NameAndType        #342:#340     // currentTimeMillis:()J\n-  #239 = NameAndType        #343:#344     // setTime:(J)V\n-  #240 = NameAndType        #345:#346     // getFormat:()S\n-  #241 = Utf8               Header format:\n-  #242 = Utf8                does not match existing format:\n-  #243 = NameAndType        #347:#334     // getName:()Ljava/lang/String;\n-  #244 = NameAndType        #348:#349     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #245 = Utf8               Duplicate entry:\n-  #246 = NameAndType        #176:#177     // writeHeader:(Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;)V\n-  #247 = NameAndType        #148:#147     // written:J\n-  #248 = Utf8               070701\n-  #249 = Class              #350          // org/apache/commons/compress/utils/ArchiveUtils\n-  #250 = NameAndType        #351:#196     // toAsciiBytes:(Ljava/lang/String;)[B\n-  #251 = Class              #327          // java/io/OutputStream\n-  #252 = NameAndType        #183:#198     // write:([B)V\n-  #253 = NameAndType        #352:#189     // count:(I)V\n-  #254 = NameAndType        #178:#177     // writeNewEntry:(Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;)V\n-  #255 = Utf8               070702\n-  #256 = Utf8               070707\n-  #257 = NameAndType        #179:#177     // writeOldAsciiEntry:(Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;)V\n-  #258 = NameAndType        #190:#191     // writeBinaryLong:(JIZ)V\n-  #259 = NameAndType        #180:#181     // writeOldBinaryEntry:(Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;Z)V\n-  #260 = Utf8               Unknown format\n-  #261 = NameAndType        #353:#340     // getInode:()J\n-  #262 = NameAndType        #354:#340     // getDeviceMin:()J\n-  #263 = Utf8               TRAILER!!!\n-  #264 = Class              #328          // java/lang/String\n-  #265 = NameAndType        #355:#356     // equals:(Ljava/lang/Object;)Z\n-  #266 = Class              #357          // java/lang/Math\n-  #267 = NameAndType        #358:#359     // max:(JJ)J\n-  #268 = NameAndType        #192:#193     // writeAsciiLong:(JII)V\n-  #269 = NameAndType        #360:#340     // getMode:()J\n-  #270 = NameAndType        #361:#340     // getUID:()J\n-  #271 = NameAndType        #362:#340     // getGID:()J\n-  #272 = NameAndType        #363:#340     // getNumberOfLinks:()J\n-  #273 = NameAndType        #364:#340     // getSize:()J\n-  #274 = NameAndType        #365:#340     // getDeviceMaj:()J\n-  #275 = NameAndType        #366:#340     // getRemoteDeviceMaj:()J\n-  #276 = NameAndType        #367:#340     // getRemoteDeviceMin:()J\n-  #277 = NameAndType        #195:#196     // encode:(Ljava/lang/String;)[B\n-  #278 = NameAndType        #368:#340     // getChksum:()J\n-  #279 = NameAndType        #197:#198     // writeCString:([B)V\n-  #280 = NameAndType        #369:#370     // getHeaderPadCount:(J)I\n-  #281 = NameAndType        #188:#189     // pad:(I)V\n-  #282 = NameAndType        #371:#340     // getDevice:()J\n-  #283 = NameAndType        #372:#340     // getRemoteDevice:()J\n-  #284 = Utf8               Trying to close non-existent entry\n-  #285 = Utf8               Invalid entry size (expected\n-  #286 = NameAndType        #330:#373     // append:(J)Ljava/lang/StringBuilder;\n-  #287 = Utf8                but got\n-  #288 = Utf8                bytes)\n-  #289 = NameAndType        #374:#375     // getDataPadCount:()I\n-  #290 = NameAndType        #146:#147     // crc:J\n-  #291 = Utf8               CRC Error\n-  #292 = Utf8               java/lang/IndexOutOfBoundsException\n-  #293 = Utf8               No current CPIO entry\n-  #294 = Utf8               Attempt to write past end of STORED entry\n-  #295 = NameAndType        #183:#184     // write:([BII)V\n-  #296 = Utf8               This archive has already been finished\n-  #297 = Utf8               This archive contains unclosed entries.\n-  #298 = NameAndType        #158:#376     // \"<init>\":(S)V\n-  #299 = NameAndType        #377:#335     // setName:(Ljava/lang/String;)V\n-  #300 = NameAndType        #378:#344     // setNumberOfLinks:(J)V\n-  #301 = NameAndType        #379:#340     // getBytesWritten:()J\n-  #302 = NameAndType        #185:#171     // finish:()V\n-  #303 = NameAndType        #186:#171     // close:()V\n-  #304 = Class              #380          // org/apache/commons/compress/archivers/cpio/CpioUtil\n-  #305 = NameAndType        #381:#382     // long2byteArray:(JIZ)[B\n-  #306 = Class              #383          // java/lang/Long\n-  #307 = NameAndType        #384:#385     // toHexString:(J)Ljava/lang/String;\n-  #308 = NameAndType        #386:#385     // toOctalString:(J)Ljava/lang/String;\n-  #309 = NameAndType        #387:#375     // length:()I\n-  #310 = Utf8               0\n-  #311 = NameAndType        #388:#389     // insert:(ILjava/lang/String;)Ljava/lang/StringBuilder;\n-  #312 = NameAndType        #390:#391     // substring:(I)Ljava/lang/String;\n-  #313 = Class              #392          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #314 = NameAndType        #195:#393     // encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-  #315 = Class              #394          // java/nio/ByteBuffer\n-  #316 = NameAndType        #395:#375     // limit:()I\n-  #317 = NameAndType        #396:#375     // position:()I\n-  #318 = NameAndType        #397:#398     // array:()[B\n-  #319 = NameAndType        #399:#375     // arrayOffset:()I\n-  #320 = Class              #400          // java/util/Arrays\n-  #321 = NameAndType        #401:#402     // copyOfRange:([BII)[B\n-  #322 = NameAndType        #183:#189     // write:(I)V\n-  #323 = NameAndType        #158:#403     // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-  #324 = NameAndType        #158:#404     // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n-  #325 = Utf8               org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream\n-  #326 = Utf8               org/apache/commons/compress/archivers/ArchiveOutputStream\n-  #327 = Utf8               java/io/OutputStream\n-  #328 = Utf8               java/lang/String\n-  #329 = Utf8               java/lang/Throwable\n-  #330 = Utf8               append\n-  #331 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #332 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #333 = Utf8               toString\n-  #334 = Utf8               ()Ljava/lang/String;\n-  #335 = Utf8               (Ljava/lang/String;)V\n-  #336 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #337 = Utf8               getZipEncoding\n-  #338 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #339 = Utf8               getTime\n-  #340 = Utf8               ()J\n-  #341 = Utf8               java/lang/System\n-  #342 = Utf8               currentTimeMillis\n-  #343 = Utf8               setTime\n-  #344 = Utf8               (J)V\n-  #345 = Utf8               getFormat\n-  #346 = Utf8               ()S\n-  #347 = Utf8               getName\n-  #348 = Utf8               put\n-  #349 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #350 = Utf8               org/apache/commons/compress/utils/ArchiveUtils\n-  #351 = Utf8               toAsciiBytes\n-  #352 = Utf8               count\n-  #353 = Utf8               getInode\n-  #354 = Utf8               getDeviceMin\n-  #355 = Utf8               equals\n-  #356 = Utf8               (Ljava/lang/Object;)Z\n-  #357 = Utf8               java/lang/Math\n-  #358 = Utf8               max\n-  #359 = Utf8               (JJ)J\n-  #360 = Utf8               getMode\n-  #361 = Utf8               getUID\n-  #362 = Utf8               getGID\n-  #363 = Utf8               getNumberOfLinks\n-  #364 = Utf8               getSize\n-  #365 = Utf8               getDeviceMaj\n-  #366 = Utf8               getRemoteDeviceMaj\n-  #367 = Utf8               getRemoteDeviceMin\n-  #368 = Utf8               getChksum\n-  #369 = Utf8               getHeaderPadCount\n-  #370 = Utf8               (J)I\n-  #371 = Utf8               getDevice\n-  #372 = Utf8               getRemoteDevice\n-  #373 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #374 = Utf8               getDataPadCount\n-  #375 = Utf8               ()I\n-  #376 = Utf8               (S)V\n-  #377 = Utf8               setName\n-  #378 = Utf8               setNumberOfLinks\n-  #379 = Utf8               getBytesWritten\n-  #380 = Utf8               org/apache/commons/compress/archivers/cpio/CpioUtil\n-  #381 = Utf8               long2byteArray\n-  #382 = Utf8               (JIZ)[B\n-  #383 = Utf8               java/lang/Long\n-  #384 = Utf8               toHexString\n-  #385 = Utf8               (J)Ljava/lang/String;\n-  #386 = Utf8               toOctalString\n-  #387 = Utf8               length\n-  #388 = Utf8               insert\n-  #389 = Utf8               (ILjava/lang/String;)Ljava/lang/StringBuilder;\n-  #390 = Utf8               substring\n-  #391 = Utf8               (I)Ljava/lang/String;\n-  #392 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #393 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-  #394 = Utf8               java/nio/ByteBuffer\n-  #395 = Utf8               limit\n-  #396 = Utf8               position\n-  #397 = Utf8               array\n-  #398 = Utf8               ()[B\n-  #399 = Utf8               arrayOffset\n-  #400 = Utf8               java/util/Arrays\n-  #401 = Utf8               copyOfRange\n-  #402 = Utf8               ([BII)[B\n-  #403 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n-  #404 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n+  #165 = Class              #322          // java/io/OutputStream\n+  #166 = Class              #323          // java/lang/String\n+  #167 = Utf8               (Ljava/io/OutputStream;)V\n+  #168 = Utf8               (Ljava/io/OutputStream;Ljava/lang/String;)V\n+  #169 = Utf8               ensureOpen\n+  #170 = Utf8               ()V\n+  #171 = Utf8               Exceptions\n+  #172 = Utf8               putArchiveEntry\n+  #173 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n+  #174 = Utf8               writeHeader\n+  #175 = Utf8               (Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;)V\n+  #176 = Utf8               writeNewEntry\n+  #177 = Utf8               writeOldAsciiEntry\n+  #178 = Utf8               writeOldBinaryEntry\n+  #179 = Utf8               (Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;Z)V\n+  #180 = Utf8               closeArchiveEntry\n+  #181 = Utf8               write\n+  #182 = Utf8               ([BII)V\n+  #183 = Utf8               finish\n+  #184 = Utf8               close\n+  #185 = Class              #324          // java/lang/Throwable\n+  #186 = Utf8               pad\n+  #187 = Utf8               (I)V\n+  #188 = Utf8               writeBinaryLong\n+  #189 = Utf8               (JIZ)V\n+  #190 = Utf8               writeAsciiLong\n+  #191 = Utf8               (JII)V\n+  #192 = Utf8               encode\n+  #193 = Utf8               (Ljava/lang/String;)[B\n+  #194 = Utf8               writeCString\n+  #195 = Utf8               ([B)V\n+  #196 = Utf8               createArchiveEntry\n+  #197 = Utf8               (Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+  #198 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+  #199 = Utf8               SourceFile\n+  #200 = Utf8               CpioArchiveOutputStream.java\n+  #201 = Utf8               org/apache/commons/compress/archivers/cpio/CpioConstants\n+  #202 = Utf8               org/apache/commons/compress/utils/CharsetNames\n+  #203 = Utf8               US-ASCII\n+  #204 = NameAndType        #158:#163     // \"<init>\":(Ljava/io/OutputStream;SILjava/lang/String;)V\n+  #205 = NameAndType        #158:#170     // \"<init>\":()V\n+  #206 = Utf8               java/util/HashMap\n+  #207 = NameAndType        #142:#143     // names:Ljava/util/HashMap;\n+  #208 = NameAndType        #153:#147     // nextArtificalDeviceAndInode:J\n+  #209 = NameAndType        #149:#150     // out:Ljava/io/OutputStream;\n+  #210 = Utf8               java/lang/IllegalArgumentException\n+  #211 = Utf8               java/lang/StringBuilder\n+  #212 = Utf8               Unknown format:\n+  #213 = NameAndType        #325:#326     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #214 = NameAndType        #325:#327     // append:(I)Ljava/lang/StringBuilder;\n+  #215 = NameAndType        #328:#329     // toString:()Ljava/lang/String;\n+  #216 = NameAndType        #158:#330     // \"<init>\":(Ljava/lang/String;)V\n+  #217 = NameAndType        #140:#141     // entryFormat:S\n+  #218 = NameAndType        #151:#152     // blockSize:I\n+  #219 = NameAndType        #156:#157     // encoding:Ljava/lang/String;\n+  #220 = Class              #331          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #221 = NameAndType        #332:#333     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #222 = NameAndType        #154:#155     // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #223 = NameAndType        #158:#159     // \"<init>\":(Ljava/io/OutputStream;S)V\n+  #224 = NameAndType        #137:#138     // closed:Z\n+  #225 = Utf8               java/io/IOException\n+  #226 = Utf8               Stream closed\n+  #227 = NameAndType        #139:#138     // finished:Z\n+  #228 = Utf8               Stream has already been finished\n+  #229 = Utf8               org/apache/commons/compress/archivers/cpio/CpioArchiveEntry\n+  #230 = NameAndType        #169:#170     // ensureOpen:()V\n+  #231 = NameAndType        #135:#136     // entry:Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;\n+  #232 = NameAndType        #180:#170     // closeArchiveEntry:()V\n+  #233 = NameAndType        #334:#335     // getTime:()J\n+  #234 = Class              #336          // java/lang/System\n+  #235 = NameAndType        #337:#335     // currentTimeMillis:()J\n+  #236 = NameAndType        #338:#339     // setTime:(J)V\n+  #237 = NameAndType        #340:#341     // getFormat:()S\n+  #238 = Utf8               Header format:\n+  #239 = Utf8                does not match existing format:\n+  #240 = NameAndType        #342:#329     // getName:()Ljava/lang/String;\n+  #241 = NameAndType        #343:#344     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #242 = Utf8               Duplicate entry:\n+  #243 = NameAndType        #174:#175     // writeHeader:(Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;)V\n+  #244 = NameAndType        #148:#147     // written:J\n+  #245 = Utf8               070701\n+  #246 = Class              #345          // org/apache/commons/compress/utils/ArchiveUtils\n+  #247 = NameAndType        #346:#193     // toAsciiBytes:(Ljava/lang/String;)[B\n+  #248 = NameAndType        #181:#195     // write:([B)V\n+  #249 = NameAndType        #347:#187     // count:(I)V\n+  #250 = NameAndType        #176:#175     // writeNewEntry:(Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;)V\n+  #251 = Utf8               070702\n+  #252 = Utf8               070707\n+  #253 = NameAndType        #177:#175     // writeOldAsciiEntry:(Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;)V\n+  #254 = NameAndType        #188:#189     // writeBinaryLong:(JIZ)V\n+  #255 = NameAndType        #178:#179     // writeOldBinaryEntry:(Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;Z)V\n+  #256 = Utf8               Unknown format\n+  #257 = NameAndType        #348:#335     // getInode:()J\n+  #258 = NameAndType        #349:#335     // getDeviceMin:()J\n+  #259 = Utf8               TRAILER!!!\n+  #260 = NameAndType        #350:#351     // equals:(Ljava/lang/Object;)Z\n+  #261 = Class              #352          // java/lang/Math\n+  #262 = NameAndType        #353:#354     // max:(JJ)J\n+  #263 = NameAndType        #190:#191     // writeAsciiLong:(JII)V\n+  #264 = NameAndType        #355:#335     // getMode:()J\n+  #265 = NameAndType        #356:#335     // getUID:()J\n+  #266 = NameAndType        #357:#335     // getGID:()J\n+  #267 = NameAndType        #358:#335     // getNumberOfLinks:()J\n+  #268 = NameAndType        #359:#335     // getSize:()J\n+  #269 = NameAndType        #360:#335     // getDeviceMaj:()J\n+  #270 = NameAndType        #361:#335     // getRemoteDeviceMaj:()J\n+  #271 = NameAndType        #362:#335     // getRemoteDeviceMin:()J\n+  #272 = NameAndType        #192:#193     // encode:(Ljava/lang/String;)[B\n+  #273 = NameAndType        #363:#335     // getChksum:()J\n+  #274 = NameAndType        #194:#195     // writeCString:([B)V\n+  #275 = NameAndType        #364:#365     // getHeaderPadCount:(J)I\n+  #276 = NameAndType        #186:#187     // pad:(I)V\n+  #277 = NameAndType        #366:#335     // getDevice:()J\n+  #278 = NameAndType        #367:#335     // getRemoteDevice:()J\n+  #279 = Utf8               Trying to close non-existent entry\n+  #280 = Utf8               Invalid entry size (expected\n+  #281 = NameAndType        #325:#368     // append:(J)Ljava/lang/StringBuilder;\n+  #282 = Utf8                but got\n+  #283 = Utf8                bytes)\n+  #284 = NameAndType        #369:#370     // getDataPadCount:()I\n+  #285 = NameAndType        #146:#147     // crc:J\n+  #286 = Utf8               CRC Error\n+  #287 = Utf8               java/lang/IndexOutOfBoundsException\n+  #288 = Utf8               No current CPIO entry\n+  #289 = Utf8               Attempt to write past end of STORED entry\n+  #290 = NameAndType        #181:#182     // write:([BII)V\n+  #291 = Utf8               This archive has already been finished\n+  #292 = Utf8               This archive contains unclosed entries.\n+  #293 = NameAndType        #158:#371     // \"<init>\":(S)V\n+  #294 = NameAndType        #372:#330     // setName:(Ljava/lang/String;)V\n+  #295 = NameAndType        #373:#339     // setNumberOfLinks:(J)V\n+  #296 = NameAndType        #374:#335     // getBytesWritten:()J\n+  #297 = NameAndType        #183:#170     // finish:()V\n+  #298 = NameAndType        #184:#170     // close:()V\n+  #299 = Class              #375          // org/apache/commons/compress/archivers/cpio/CpioUtil\n+  #300 = NameAndType        #376:#377     // long2byteArray:(JIZ)[B\n+  #301 = Class              #378          // java/lang/Long\n+  #302 = NameAndType        #379:#380     // toHexString:(J)Ljava/lang/String;\n+  #303 = NameAndType        #381:#380     // toOctalString:(J)Ljava/lang/String;\n+  #304 = NameAndType        #382:#370     // length:()I\n+  #305 = Utf8               0\n+  #306 = NameAndType        #383:#384     // insert:(ILjava/lang/String;)Ljava/lang/StringBuilder;\n+  #307 = NameAndType        #385:#386     // substring:(I)Ljava/lang/String;\n+  #308 = Class              #387          // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #309 = NameAndType        #192:#388     // encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #310 = Class              #389          // java/nio/ByteBuffer\n+  #311 = NameAndType        #390:#370     // limit:()I\n+  #312 = NameAndType        #391:#370     // position:()I\n+  #313 = NameAndType        #392:#393     // array:()[B\n+  #314 = NameAndType        #394:#370     // arrayOffset:()I\n+  #315 = Class              #395          // java/util/Arrays\n+  #316 = NameAndType        #396:#397     // copyOfRange:([BII)[B\n+  #317 = NameAndType        #181:#187     // write:(I)V\n+  #318 = NameAndType        #158:#398     // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+  #319 = NameAndType        #158:#399     // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n+  #320 = Utf8               org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream\n+  #321 = Utf8               org/apache/commons/compress/archivers/ArchiveOutputStream\n+  #322 = Utf8               java/io/OutputStream\n+  #323 = Utf8               java/lang/String\n+  #324 = Utf8               java/lang/Throwable\n+  #325 = Utf8               append\n+  #326 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #327 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #328 = Utf8               toString\n+  #329 = Utf8               ()Ljava/lang/String;\n+  #330 = Utf8               (Ljava/lang/String;)V\n+  #331 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #332 = Utf8               getZipEncoding\n+  #333 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #334 = Utf8               getTime\n+  #335 = Utf8               ()J\n+  #336 = Utf8               java/lang/System\n+  #337 = Utf8               currentTimeMillis\n+  #338 = Utf8               setTime\n+  #339 = Utf8               (J)V\n+  #340 = Utf8               getFormat\n+  #341 = Utf8               ()S\n+  #342 = Utf8               getName\n+  #343 = Utf8               put\n+  #344 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #345 = Utf8               org/apache/commons/compress/utils/ArchiveUtils\n+  #346 = Utf8               toAsciiBytes\n+  #347 = Utf8               count\n+  #348 = Utf8               getInode\n+  #349 = Utf8               getDeviceMin\n+  #350 = Utf8               equals\n+  #351 = Utf8               (Ljava/lang/Object;)Z\n+  #352 = Utf8               java/lang/Math\n+  #353 = Utf8               max\n+  #354 = Utf8               (JJ)J\n+  #355 = Utf8               getMode\n+  #356 = Utf8               getUID\n+  #357 = Utf8               getGID\n+  #358 = Utf8               getNumberOfLinks\n+  #359 = Utf8               getSize\n+  #360 = Utf8               getDeviceMaj\n+  #361 = Utf8               getRemoteDeviceMaj\n+  #362 = Utf8               getRemoteDeviceMin\n+  #363 = Utf8               getChksum\n+  #364 = Utf8               getHeaderPadCount\n+  #365 = Utf8               (J)I\n+  #366 = Utf8               getDevice\n+  #367 = Utf8               getRemoteDevice\n+  #368 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #369 = Utf8               getDataPadCount\n+  #370 = Utf8               ()I\n+  #371 = Utf8               (S)V\n+  #372 = Utf8               setName\n+  #373 = Utf8               setNumberOfLinks\n+  #374 = Utf8               getBytesWritten\n+  #375 = Utf8               org/apache/commons/compress/archivers/cpio/CpioUtil\n+  #376 = Utf8               long2byteArray\n+  #377 = Utf8               (JIZ)[B\n+  #378 = Utf8               java/lang/Long\n+  #379 = Utf8               toHexString\n+  #380 = Utf8               (J)Ljava/lang/String;\n+  #381 = Utf8               toOctalString\n+  #382 = Utf8               length\n+  #383 = Utf8               insert\n+  #384 = Utf8               (ILjava/lang/String;)Ljava/lang/StringBuilder;\n+  #385 = Utf8               substring\n+  #386 = Utf8               (I)Ljava/lang/String;\n+  #387 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #388 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #389 = Utf8               java/nio/ByteBuffer\n+  #390 = Utf8               limit\n+  #391 = Utf8               position\n+  #392 = Utf8               array\n+  #393 = Utf8               ()[B\n+  #394 = Utf8               arrayOffset\n+  #395 = Utf8               java/util/Arrays\n+  #396 = Utf8               copyOfRange\n+  #397 = Utf8               ([BII)[B\n+  #398 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n+  #399 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n {\n   private org.apache.commons.compress.archivers.cpio.CpioArchiveEntry entry;\n     descriptor: Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;\n     flags: (0x0002) ACC_PRIVATE\n \n   private boolean closed;\n     descriptor: Z\n"}]}
