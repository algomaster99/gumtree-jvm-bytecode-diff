{"diffoscope-json-version": 1, "source1": "first/IOUtils.class", "source2": "second/IOUtils.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,62 +1,62 @@\n-  SHA-256 checksum 65bc3a0bf9c5074ff23373385e0da1878e57389fc8d8ce55a88497f3d6442c6d\n+  SHA-256 checksum 6d91d34979f8caa73fb475182f22a434e377a9f21f23ed9632d1cc11ec59b5e1\n   Compiled from \"IOUtils.java\"\n public final class org.apache.commons.compress.utils.IOUtils\n   minor version: 0\n   major version: 52\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n   this_class: #5                          // org/apache/commons/compress/utils/IOUtils\n   super_class: #46                        // java/lang/Object\n   interfaces: 0, fields: 4, methods: 16, attributes: 1\n Constant pool:\n-    #1 = InterfaceMethodref #129.#130     // java/io/Closeable.close:()V\n-    #2 = Class              #131          // java/io/IOException\n-    #3 = Methodref          #132.#133     // java/io/File.toPath:()Ljava/nio/file/Path;\n-    #4 = Methodref          #134.#135     // java/nio/file/Files.copy:(Ljava/nio/file/Path;Ljava/io/OutputStream;)J\n-    #5 = Class              #136          // org/apache/commons/compress/utils/IOUtils\n-    #6 = Methodref          #5.#137       // org/apache/commons/compress/utils/IOUtils.copy:(Ljava/io/InputStream;Ljava/io/OutputStream;I)J\n-    #7 = Class              #138          // java/lang/IllegalArgumentException\n-    #8 = String             #139          // buffersize must be bigger than 0\n-    #9 = Methodref          #7.#140       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #10 = Methodref          #141.#142     // java/io/InputStream.read:([B)I\n-   #11 = Methodref          #143.#144     // java/io/OutputStream.write:([BII)V\n-   #12 = Methodref          #5.#145       // org/apache/commons/compress/utils/IOUtils.copyRange:(Ljava/io/InputStream;JLjava/io/OutputStream;I)J\n-   #13 = Methodref          #146.#147     // java/lang/Math.min:(JJ)J\n-   #14 = Methodref          #141.#148     // java/io/InputStream.read:([BII)I\n-   #15 = Class              #149          // java/nio/file/OpenOption\n-   #16 = Methodref          #134.#150     // java/nio/file/Files.newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n-   #17 = Methodref          #5.#151       // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[BII)I\n-   #18 = Methodref          #141.#130     // java/io/InputStream.close:()V\n-   #19 = Class              #152          // java/lang/Throwable\n-   #20 = Methodref          #19.#153      // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-   #21 = Class              #154          // java/lang/IndexOutOfBoundsException\n-   #22 = Methodref          #21.#155      // java/lang/IndexOutOfBoundsException.\"<init>\":()V\n-   #23 = Methodref          #156.#157     // java/nio/ByteBuffer.remaining:()I\n-   #24 = InterfaceMethodref #158.#159     // java/nio/channels/ReadableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n-   #25 = Class              #160          // java/io/EOFException\n-   #26 = Methodref          #25.#155      // java/io/EOFException.\"<init>\":()V\n-   #27 = Class              #161          // java/io/ByteArrayOutputStream\n-   #28 = Methodref          #27.#155      // java/io/ByteArrayOutputStream.\"<init>\":()V\n-   #29 = Methodref          #5.#162       // org/apache/commons/compress/utils/IOUtils.copyRange:(Ljava/io/InputStream;JLjava/io/OutputStream;)J\n-   #30 = Methodref          #27.#163      // java/io/ByteArrayOutputStream.toByteArray:()[B\n-   #31 = Methodref          #146.#164     // java/lang/Math.min:(II)I\n-   #32 = Methodref          #156.#165     // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-   #33 = Methodref          #156.#166     // java/nio/ByteBuffer.capacity:()I\n-   #34 = Methodref          #156.#167     // java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;\n-   #35 = Methodref          #156.#168     // java/nio/ByteBuffer.array:()[B\n-   #36 = Methodref          #27.#144      // java/io/ByteArrayOutputStream.write:([BII)V\n-   #37 = Methodref          #156.#169     // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n-   #38 = Methodref          #141.#170     // java/io/InputStream.skip:(J)J\n-   #39 = Fieldref           #5.#171       // org/apache/commons/compress/utils/IOUtils.SKIP_BUF:[B\n+    #1 = InterfaceMethodref #126.#127     // java/io/Closeable.close:()V\n+    #2 = Class              #128          // java/io/IOException\n+    #3 = Methodref          #93.#129      // java/io/File.toPath:()Ljava/nio/file/Path;\n+    #4 = Methodref          #130.#131     // java/nio/file/Files.copy:(Ljava/nio/file/Path;Ljava/io/OutputStream;)J\n+    #5 = Class              #132          // org/apache/commons/compress/utils/IOUtils\n+    #6 = Methodref          #5.#133       // org/apache/commons/compress/utils/IOUtils.copy:(Ljava/io/InputStream;Ljava/io/OutputStream;I)J\n+    #7 = Class              #134          // java/lang/IllegalArgumentException\n+    #8 = String             #135          // buffersize must be bigger than 0\n+    #9 = Methodref          #7.#136       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #10 = Methodref          #92.#137      // java/io/InputStream.read:([B)I\n+   #11 = Methodref          #138.#139     // java/io/OutputStream.write:([BII)V\n+   #12 = Methodref          #5.#140       // org/apache/commons/compress/utils/IOUtils.copyRange:(Ljava/io/InputStream;JLjava/io/OutputStream;I)J\n+   #13 = Methodref          #141.#142     // java/lang/Math.min:(JJ)J\n+   #14 = Methodref          #92.#143      // java/io/InputStream.read:([BII)I\n+   #15 = Class              #144          // java/nio/file/OpenOption\n+   #16 = Methodref          #130.#145     // java/nio/file/Files.newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+   #17 = Methodref          #5.#146       // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[BII)I\n+   #18 = Methodref          #92.#127      // java/io/InputStream.close:()V\n+   #19 = Class              #147          // java/lang/Throwable\n+   #20 = Methodref          #19.#148      // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+   #21 = Class              #149          // java/lang/IndexOutOfBoundsException\n+   #22 = Methodref          #21.#150      // java/lang/IndexOutOfBoundsException.\"<init>\":()V\n+   #23 = Methodref          #111.#151     // java/nio/ByteBuffer.remaining:()I\n+   #24 = InterfaceMethodref #152.#153     // java/nio/channels/ReadableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+   #25 = Class              #154          // java/io/EOFException\n+   #26 = Methodref          #25.#150      // java/io/EOFException.\"<init>\":()V\n+   #27 = Class              #155          // java/io/ByteArrayOutputStream\n+   #28 = Methodref          #27.#150      // java/io/ByteArrayOutputStream.\"<init>\":()V\n+   #29 = Methodref          #5.#156       // org/apache/commons/compress/utils/IOUtils.copyRange:(Ljava/io/InputStream;JLjava/io/OutputStream;)J\n+   #30 = Methodref          #27.#157      // java/io/ByteArrayOutputStream.toByteArray:()[B\n+   #31 = Methodref          #141.#158     // java/lang/Math.min:(II)I\n+   #32 = Methodref          #111.#159     // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+   #33 = Methodref          #111.#160     // java/nio/ByteBuffer.capacity:()I\n+   #34 = Methodref          #111.#161     // java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;\n+   #35 = Methodref          #111.#162     // java/nio/ByteBuffer.array:()[B\n+   #36 = Methodref          #27.#139      // java/io/ByteArrayOutputStream.write:([BII)V\n+   #37 = Methodref          #111.#163     // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+   #38 = Methodref          #92.#164      // java/io/InputStream.skip:(J)J\n+   #39 = Fieldref           #5.#165       // org/apache/commons/compress/utils/IOUtils.SKIP_BUF:[B\n    #40 = Long               4096l\n-   #42 = Methodref          #5.#172       // org/apache/commons/compress/utils/IOUtils.copy:(Ljava/io/InputStream;Ljava/io/OutputStream;)J\n-   #43 = Methodref          #46.#155      // java/lang/Object.\"<init>\":()V\n-   #44 = Class              #173          // java/nio/file/LinkOption\n-   #45 = Fieldref           #5.#174       // org/apache/commons/compress/utils/IOUtils.EMPTY_LINK_OPTIONS:[Ljava/nio/file/LinkOption;\n-   #46 = Class              #175          // java/lang/Object\n+   #42 = Methodref          #5.#166       // org/apache/commons/compress/utils/IOUtils.copy:(Ljava/io/InputStream;Ljava/io/OutputStream;)J\n+   #43 = Methodref          #46.#150      // java/lang/Object.\"<init>\":()V\n+   #44 = Class              #167          // java/nio/file/LinkOption\n+   #45 = Fieldref           #5.#168       // org/apache/commons/compress/utils/IOUtils.EMPTY_LINK_OPTIONS:[Ljava/nio/file/LinkOption;\n+   #46 = Class              #169          // java/lang/Object\n    #47 = Utf8               COPY_BUF_SIZE\n    #48 = Utf8               I\n    #49 = Utf8               ConstantValue\n    #50 = Integer            8024\n    #51 = Utf8               SKIP_BUF_SIZE\n    #52 = Integer            4096\n    #53 = Utf8               EMPTY_LINK_OPTIONS\n@@ -67,161 +67,155 @@\n    #58 = Utf8               (Ljava/io/Closeable;)V\n    #59 = Utf8               Code\n    #60 = Utf8               LineNumberTable\n    #61 = Utf8               LocalVariableTable\n    #62 = Utf8               c\n    #63 = Utf8               Ljava/io/Closeable;\n    #64 = Utf8               StackMapTable\n-   #65 = Class              #131          // java/io/IOException\n-   #66 = Utf8               copy\n-   #67 = Utf8               (Ljava/io/File;Ljava/io/OutputStream;)V\n-   #68 = Utf8               sourceFile\n-   #69 = Utf8               Ljava/io/File;\n-   #70 = Utf8               outputStream\n-   #71 = Utf8               Ljava/io/OutputStream;\n-   #72 = Utf8               Exceptions\n-   #73 = Utf8               (Ljava/io/InputStream;Ljava/io/OutputStream;)J\n-   #74 = Utf8               input\n-   #75 = Utf8               Ljava/io/InputStream;\n-   #76 = Utf8               output\n-   #77 = Utf8               (Ljava/io/InputStream;Ljava/io/OutputStream;I)J\n-   #78 = Utf8               buffersize\n-   #79 = Utf8               buffer\n-   #80 = Utf8               n\n-   #81 = Utf8               count\n-   #82 = Utf8               J\n-   #83 = Class              #56           // \"[B\"\n-   #84 = Utf8               copyRange\n-   #85 = Utf8               (Ljava/io/InputStream;JLjava/io/OutputStream;)J\n-   #86 = Utf8               len\n-   #87 = Utf8               (Ljava/io/InputStream;JLjava/io/OutputStream;I)J\n-   #88 = Utf8               read\n-   #89 = Utf8               (Ljava/io/File;[B)I\n-   #90 = Utf8               inputStream\n-   #91 = Utf8               file\n-   #92 = Utf8               array\n-   #93 = Class              #176          // java/io/File\n-   #94 = Class              #177          // java/io/InputStream\n-   #95 = Class              #152          // java/lang/Throwable\n-   #96 = Utf8               readFully\n-   #97 = Utf8               (Ljava/io/InputStream;[B)I\n-   #98 = Utf8               (Ljava/io/InputStream;[BII)I\n-   #99 = Utf8               offset\n-  #100 = Utf8               x\n-  #101 = Utf8               (Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n-  #102 = Utf8               readNow\n-  #103 = Utf8               channel\n-  #104 = Utf8               Ljava/nio/channels/ReadableByteChannel;\n-  #105 = Utf8               byteBuffer\n-  #106 = Utf8               Ljava/nio/ByteBuffer;\n-  #107 = Utf8               expectedLength\n-  #108 = Utf8               readRange\n-  #109 = Utf8               (Ljava/io/InputStream;I)[B\n-  #110 = Utf8               Ljava/io/ByteArrayOutputStream;\n-  #111 = Utf8               (Ljava/nio/channels/ReadableByteChannel;I)[B\n-  #112 = Utf8               b\n-  #113 = Class              #161          // java/io/ByteArrayOutputStream\n-  #114 = Class              #178          // java/nio/ByteBuffer\n-  #115 = Utf8               skip\n-  #116 = Utf8               (Ljava/io/InputStream;J)J\n-  #117 = Utf8               skipped\n-  #118 = Utf8               numToSkip\n-  #119 = Utf8               available\n-  #120 = Utf8               toByteArray\n-  #121 = Utf8               (Ljava/io/InputStream;)[B\n-  #122 = Utf8               <init>\n-  #123 = Utf8               ()V\n-  #124 = Utf8               this\n-  #125 = Utf8               Lorg/apache/commons/compress/utils/IOUtils;\n-  #126 = Utf8               <clinit>\n-  #127 = Utf8               SourceFile\n-  #128 = Utf8               IOUtils.java\n-  #129 = Class              #179          // java/io/Closeable\n-  #130 = NameAndType        #180:#123     // close:()V\n-  #131 = Utf8               java/io/IOException\n-  #132 = Class              #176          // java/io/File\n-  #133 = NameAndType        #181:#182     // toPath:()Ljava/nio/file/Path;\n-  #134 = Class              #183          // java/nio/file/Files\n-  #135 = NameAndType        #66:#184      // copy:(Ljava/nio/file/Path;Ljava/io/OutputStream;)J\n-  #136 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #137 = NameAndType        #66:#77       // copy:(Ljava/io/InputStream;Ljava/io/OutputStream;I)J\n-  #138 = Utf8               java/lang/IllegalArgumentException\n-  #139 = Utf8               buffersize must be bigger than 0\n-  #140 = NameAndType        #122:#185     // \"<init>\":(Ljava/lang/String;)V\n-  #141 = Class              #177          // java/io/InputStream\n-  #142 = NameAndType        #88:#186      // read:([B)I\n-  #143 = Class              #187          // java/io/OutputStream\n-  #144 = NameAndType        #188:#189     // write:([BII)V\n-  #145 = NameAndType        #84:#87       // copyRange:(Ljava/io/InputStream;JLjava/io/OutputStream;I)J\n-  #146 = Class              #190          // java/lang/Math\n-  #147 = NameAndType        #191:#192     // min:(JJ)J\n-  #148 = NameAndType        #88:#193      // read:([BII)I\n-  #149 = Utf8               java/nio/file/OpenOption\n-  #150 = NameAndType        #194:#195     // newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n-  #151 = NameAndType        #96:#98       // readFully:(Ljava/io/InputStream;[BII)I\n-  #152 = Utf8               java/lang/Throwable\n-  #153 = NameAndType        #196:#197     // addSuppressed:(Ljava/lang/Throwable;)V\n-  #154 = Utf8               java/lang/IndexOutOfBoundsException\n-  #155 = NameAndType        #122:#123     // \"<init>\":()V\n-  #156 = Class              #178          // java/nio/ByteBuffer\n-  #157 = NameAndType        #198:#199     // remaining:()I\n-  #158 = Class              #200          // java/nio/channels/ReadableByteChannel\n-  #159 = NameAndType        #88:#201      // read:(Ljava/nio/ByteBuffer;)I\n-  #160 = Utf8               java/io/EOFException\n-  #161 = Utf8               java/io/ByteArrayOutputStream\n-  #162 = NameAndType        #84:#85       // copyRange:(Ljava/io/InputStream;JLjava/io/OutputStream;)J\n-  #163 = NameAndType        #120:#202     // toByteArray:()[B\n-  #164 = NameAndType        #191:#203     // min:(II)I\n-  #165 = NameAndType        #204:#205     // allocate:(I)Ljava/nio/ByteBuffer;\n-  #166 = NameAndType        #206:#199     // capacity:()I\n-  #167 = NameAndType        #207:#208     // limit:(I)Ljava/nio/Buffer;\n-  #168 = NameAndType        #92:#202      // array:()[B\n-  #169 = NameAndType        #209:#210     // rewind:()Ljava/nio/Buffer;\n-  #170 = NameAndType        #115:#211     // skip:(J)J\n-  #171 = NameAndType        #55:#56       // SKIP_BUF:[B\n-  #172 = NameAndType        #66:#73       // copy:(Ljava/io/InputStream;Ljava/io/OutputStream;)J\n-  #173 = Utf8               java/nio/file/LinkOption\n-  #174 = NameAndType        #53:#54       // EMPTY_LINK_OPTIONS:[Ljava/nio/file/LinkOption;\n-  #175 = Utf8               java/lang/Object\n-  #176 = Utf8               java/io/File\n-  #177 = Utf8               java/io/InputStream\n-  #178 = Utf8               java/nio/ByteBuffer\n-  #179 = Utf8               java/io/Closeable\n-  #180 = Utf8               close\n-  #181 = Utf8               toPath\n-  #182 = Utf8               ()Ljava/nio/file/Path;\n-  #183 = Utf8               java/nio/file/Files\n-  #184 = Utf8               (Ljava/nio/file/Path;Ljava/io/OutputStream;)J\n-  #185 = Utf8               (Ljava/lang/String;)V\n-  #186 = Utf8               ([B)I\n-  #187 = Utf8               java/io/OutputStream\n-  #188 = Utf8               write\n-  #189 = Utf8               ([BII)V\n-  #190 = Utf8               java/lang/Math\n-  #191 = Utf8               min\n-  #192 = Utf8               (JJ)J\n-  #193 = Utf8               ([BII)I\n-  #194 = Utf8               newInputStream\n-  #195 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n-  #196 = Utf8               addSuppressed\n-  #197 = Utf8               (Ljava/lang/Throwable;)V\n-  #198 = Utf8               remaining\n-  #199 = Utf8               ()I\n-  #200 = Utf8               java/nio/channels/ReadableByteChannel\n-  #201 = Utf8               (Ljava/nio/ByteBuffer;)I\n-  #202 = Utf8               ()[B\n-  #203 = Utf8               (II)I\n-  #204 = Utf8               allocate\n-  #205 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #206 = Utf8               capacity\n-  #207 = Utf8               limit\n-  #208 = Utf8               (I)Ljava/nio/Buffer;\n-  #209 = Utf8               rewind\n-  #210 = Utf8               ()Ljava/nio/Buffer;\n-  #211 = Utf8               (J)J\n+   #65 = Utf8               copy\n+   #66 = Utf8               (Ljava/io/File;Ljava/io/OutputStream;)V\n+   #67 = Utf8               sourceFile\n+   #68 = Utf8               Ljava/io/File;\n+   #69 = Utf8               outputStream\n+   #70 = Utf8               Ljava/io/OutputStream;\n+   #71 = Utf8               Exceptions\n+   #72 = Utf8               (Ljava/io/InputStream;Ljava/io/OutputStream;)J\n+   #73 = Utf8               input\n+   #74 = Utf8               Ljava/io/InputStream;\n+   #75 = Utf8               output\n+   #76 = Utf8               (Ljava/io/InputStream;Ljava/io/OutputStream;I)J\n+   #77 = Utf8               buffersize\n+   #78 = Utf8               buffer\n+   #79 = Utf8               n\n+   #80 = Utf8               count\n+   #81 = Utf8               J\n+   #82 = Class              #56           // \"[B\"\n+   #83 = Utf8               copyRange\n+   #84 = Utf8               (Ljava/io/InputStream;JLjava/io/OutputStream;)J\n+   #85 = Utf8               len\n+   #86 = Utf8               (Ljava/io/InputStream;JLjava/io/OutputStream;I)J\n+   #87 = Utf8               read\n+   #88 = Utf8               (Ljava/io/File;[B)I\n+   #89 = Utf8               inputStream\n+   #90 = Utf8               file\n+   #91 = Utf8               array\n+   #92 = Class              #170          // java/io/InputStream\n+   #93 = Class              #171          // java/io/File\n+   #94 = Utf8               readFully\n+   #95 = Utf8               (Ljava/io/InputStream;[B)I\n+   #96 = Utf8               (Ljava/io/InputStream;[BII)I\n+   #97 = Utf8               offset\n+   #98 = Utf8               x\n+   #99 = Utf8               (Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+  #100 = Utf8               readNow\n+  #101 = Utf8               channel\n+  #102 = Utf8               Ljava/nio/channels/ReadableByteChannel;\n+  #103 = Utf8               byteBuffer\n+  #104 = Utf8               Ljava/nio/ByteBuffer;\n+  #105 = Utf8               expectedLength\n+  #106 = Utf8               readRange\n+  #107 = Utf8               (Ljava/io/InputStream;I)[B\n+  #108 = Utf8               Ljava/io/ByteArrayOutputStream;\n+  #109 = Utf8               (Ljava/nio/channels/ReadableByteChannel;I)[B\n+  #110 = Utf8               b\n+  #111 = Class              #172          // java/nio/ByteBuffer\n+  #112 = Utf8               skip\n+  #113 = Utf8               (Ljava/io/InputStream;J)J\n+  #114 = Utf8               skipped\n+  #115 = Utf8               numToSkip\n+  #116 = Utf8               available\n+  #117 = Utf8               toByteArray\n+  #118 = Utf8               (Ljava/io/InputStream;)[B\n+  #119 = Utf8               <init>\n+  #120 = Utf8               ()V\n+  #121 = Utf8               this\n+  #122 = Utf8               Lorg/apache/commons/compress/utils/IOUtils;\n+  #123 = Utf8               <clinit>\n+  #124 = Utf8               SourceFile\n+  #125 = Utf8               IOUtils.java\n+  #126 = Class              #173          // java/io/Closeable\n+  #127 = NameAndType        #174:#120     // close:()V\n+  #128 = Utf8               java/io/IOException\n+  #129 = NameAndType        #175:#176     // toPath:()Ljava/nio/file/Path;\n+  #130 = Class              #177          // java/nio/file/Files\n+  #131 = NameAndType        #65:#178      // copy:(Ljava/nio/file/Path;Ljava/io/OutputStream;)J\n+  #132 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #133 = NameAndType        #65:#76       // copy:(Ljava/io/InputStream;Ljava/io/OutputStream;I)J\n+  #134 = Utf8               java/lang/IllegalArgumentException\n+  #135 = Utf8               buffersize must be bigger than 0\n+  #136 = NameAndType        #119:#179     // \"<init>\":(Ljava/lang/String;)V\n+  #137 = NameAndType        #87:#180      // read:([B)I\n+  #138 = Class              #181          // java/io/OutputStream\n+  #139 = NameAndType        #182:#183     // write:([BII)V\n+  #140 = NameAndType        #83:#86       // copyRange:(Ljava/io/InputStream;JLjava/io/OutputStream;I)J\n+  #141 = Class              #184          // java/lang/Math\n+  #142 = NameAndType        #185:#186     // min:(JJ)J\n+  #143 = NameAndType        #87:#187      // read:([BII)I\n+  #144 = Utf8               java/nio/file/OpenOption\n+  #145 = NameAndType        #188:#189     // newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+  #146 = NameAndType        #94:#96       // readFully:(Ljava/io/InputStream;[BII)I\n+  #147 = Utf8               java/lang/Throwable\n+  #148 = NameAndType        #190:#191     // addSuppressed:(Ljava/lang/Throwable;)V\n+  #149 = Utf8               java/lang/IndexOutOfBoundsException\n+  #150 = NameAndType        #119:#120     // \"<init>\":()V\n+  #151 = NameAndType        #192:#193     // remaining:()I\n+  #152 = Class              #194          // java/nio/channels/ReadableByteChannel\n+  #153 = NameAndType        #87:#195      // read:(Ljava/nio/ByteBuffer;)I\n+  #154 = Utf8               java/io/EOFException\n+  #155 = Utf8               java/io/ByteArrayOutputStream\n+  #156 = NameAndType        #83:#84       // copyRange:(Ljava/io/InputStream;JLjava/io/OutputStream;)J\n+  #157 = NameAndType        #117:#196     // toByteArray:()[B\n+  #158 = NameAndType        #185:#197     // min:(II)I\n+  #159 = NameAndType        #198:#199     // allocate:(I)Ljava/nio/ByteBuffer;\n+  #160 = NameAndType        #200:#193     // capacity:()I\n+  #161 = NameAndType        #201:#202     // limit:(I)Ljava/nio/Buffer;\n+  #162 = NameAndType        #91:#196      // array:()[B\n+  #163 = NameAndType        #203:#204     // rewind:()Ljava/nio/Buffer;\n+  #164 = NameAndType        #112:#205     // skip:(J)J\n+  #165 = NameAndType        #55:#56       // SKIP_BUF:[B\n+  #166 = NameAndType        #65:#72       // copy:(Ljava/io/InputStream;Ljava/io/OutputStream;)J\n+  #167 = Utf8               java/nio/file/LinkOption\n+  #168 = NameAndType        #53:#54       // EMPTY_LINK_OPTIONS:[Ljava/nio/file/LinkOption;\n+  #169 = Utf8               java/lang/Object\n+  #170 = Utf8               java/io/InputStream\n+  #171 = Utf8               java/io/File\n+  #172 = Utf8               java/nio/ByteBuffer\n+  #173 = Utf8               java/io/Closeable\n+  #174 = Utf8               close\n+  #175 = Utf8               toPath\n+  #176 = Utf8               ()Ljava/nio/file/Path;\n+  #177 = Utf8               java/nio/file/Files\n+  #178 = Utf8               (Ljava/nio/file/Path;Ljava/io/OutputStream;)J\n+  #179 = Utf8               (Ljava/lang/String;)V\n+  #180 = Utf8               ([B)I\n+  #181 = Utf8               java/io/OutputStream\n+  #182 = Utf8               write\n+  #183 = Utf8               ([BII)V\n+  #184 = Utf8               java/lang/Math\n+  #185 = Utf8               min\n+  #186 = Utf8               (JJ)J\n+  #187 = Utf8               ([BII)I\n+  #188 = Utf8               newInputStream\n+  #189 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+  #190 = Utf8               addSuppressed\n+  #191 = Utf8               (Ljava/lang/Throwable;)V\n+  #192 = Utf8               remaining\n+  #193 = Utf8               ()I\n+  #194 = Utf8               java/nio/channels/ReadableByteChannel\n+  #195 = Utf8               (Ljava/nio/ByteBuffer;)I\n+  #196 = Utf8               ()[B\n+  #197 = Utf8               (II)I\n+  #198 = Utf8               allocate\n+  #199 = Utf8               (I)Ljava/nio/ByteBuffer;\n+  #200 = Utf8               capacity\n+  #201 = Utf8               limit\n+  #202 = Utf8               (I)Ljava/nio/Buffer;\n+  #203 = Utf8               rewind\n+  #204 = Utf8               ()Ljava/nio/Buffer;\n+  #205 = Utf8               (J)J\n {\n   private static final int COPY_BUF_SIZE = 8024;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 8024\n \n   private static final int SKIP_BUF_SIZE = 4096;\n@@ -487,106 +481,74 @@\n     Exceptions:\n       throws java.io.IOException\n \n   public static int read(java.io.File, byte[]) throws java.io.IOException;\n     descriptor: (Ljava/io/File;[B)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n-      stack=4, locals=8, args_size=2\n+      stack=4, locals=5, args_size=2\n          0: aload_0\n          1: invokevirtual #3                  // Method java/io/File.toPath:()Ljava/nio/file/Path;\n          4: iconst_0\n          5: anewarray     #15                 // class java/nio/file/OpenOption\n          8: invokestatic  #16                 // Method java/nio/file/Files.newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n         11: astore_2\n-        12: aconst_null\n-        13: astore_3\n-        14: aload_2\n+        12: aload_2\n+        13: aload_1\n+        14: iconst_0\n         15: aload_1\n-        16: iconst_0\n-        17: aload_1\n-        18: arraylength\n-        19: invokestatic  #17                 // Method readFully:(Ljava/io/InputStream;[BII)I\n-        22: istore        4\n-        24: aload_2\n-        25: ifnull        54\n-        28: aload_3\n-        29: ifnull        50\n+        16: arraylength\n+        17: invokestatic  #17                 // Method readFully:(Ljava/io/InputStream;[BII)I\n+        20: istore_3\n+        21: aload_2\n+        22: ifnull        29\n+        25: aload_2\n+        26: invokevirtual #18                 // Method java/io/InputStream.close:()V\n+        29: iload_3\n+        30: ireturn\n+        31: astore_3\n         32: aload_2\n-        33: invokevirtual #18                 // Method java/io/InputStream.close:()V\n-        36: goto          54\n-        39: astore        5\n-        41: aload_3\n-        42: aload         5\n-        44: invokevirtual #20                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-        47: goto          54\n-        50: aload_2\n-        51: invokevirtual #18                 // Method java/io/InputStream.close:()V\n-        54: iload         4\n-        56: ireturn\n-        57: astore        4\n-        59: aload         4\n-        61: astore_3\n-        62: aload         4\n-        64: athrow\n-        65: astore        6\n-        67: aload_2\n-        68: ifnull        97\n-        71: aload_3\n-        72: ifnull        93\n-        75: aload_2\n-        76: invokevirtual #18                 // Method java/io/InputStream.close:()V\n-        79: goto          97\n-        82: astore        7\n-        84: aload_3\n-        85: aload         7\n-        87: invokevirtual #20                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-        90: goto          97\n-        93: aload_2\n-        94: invokevirtual #18                 // Method java/io/InputStream.close:()V\n-        97: aload         6\n-        99: athrow\n+        33: ifnull        51\n+        36: aload_2\n+        37: invokevirtual #18                 // Method java/io/InputStream.close:()V\n+        40: goto          51\n+        43: astore        4\n+        45: aload_3\n+        46: aload         4\n+        48: invokevirtual #20                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+        51: aload_3\n+        52: athrow\n       Exception table:\n          from    to  target type\n-            32    36    39   Class java/lang/Throwable\n-            14    24    57   Class java/lang/Throwable\n-            14    24    65   any\n-            75    79    82   Class java/lang/Throwable\n-            57    67    65   any\n+            12    21    31   Class java/lang/Throwable\n+            36    40    43   Class java/lang/Throwable\n       LineNumberTable:\n         line 194: 0\n-        line 195: 14\n-        line 196: 24\n-        line 195: 54\n-        line 194: 57\n-        line 196: 65\n+        line 195: 12\n+        line 196: 21\n+        line 195: 29\n+        line 194: 31\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           12      88     2 inputStream   Ljava/io/InputStream;\n-            0     100     0  file   Ljava/io/File;\n-            0     100     1 array   [B\n-      StackMapTable: number_of_entries = 8\n+           12      41     2 inputStream   Ljava/io/InputStream;\n+            0      53     0  file   Ljava/io/File;\n+            0      53     1 array   [B\n+      StackMapTable: number_of_entries = 4\n+        frame_type = 253 /* append */\n+          offset_delta = 29\n+          locals = [ class java/io/InputStream, int ]\n         frame_type = 255 /* full_frame */\n-          offset_delta = 39\n-          locals = [ class java/io/File, class \"[B\", class java/io/InputStream, class java/lang/Throwable, int ]\n+          offset_delta = 1\n+          locals = [ class java/io/File, class \"[B\", class java/io/InputStream ]\n           stack = [ class java/lang/Throwable ]\n-        frame_type = 10 /* same */\n-        frame_type = 3 /* same */\n         frame_type = 255 /* full_frame */\n-          offset_delta = 2\n+          offset_delta = 11\n           locals = [ class java/io/File, class \"[B\", class java/io/InputStream, class java/lang/Throwable ]\n           stack = [ class java/lang/Throwable ]\n-        frame_type = 71 /* same_locals_1_stack_item */\n-          stack = [ class java/lang/Throwable ]\n-        frame_type = 255 /* full_frame */\n-          offset_delta = 16\n-          locals = [ class java/io/File, class \"[B\", class java/io/InputStream, class java/lang/Throwable, top, top, class java/lang/Throwable ]\n-          stack = [ class java/lang/Throwable ]\n-        frame_type = 10 /* same */\n-        frame_type = 3 /* same */\n+        frame_type = 7 /* same */\n     Exceptions:\n       throws java.io.IOException\n \n   public static int readFully(java.io.InputStream, byte[]) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;[B)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n"}]}
