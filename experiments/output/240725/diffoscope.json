{"diffoscope-json-version": 1, "source1": "first/RCommandClient.class", "source2": "second/RCommandClient.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,89 +14,88 @@\n public class RCommandClient extends RExecClient\n {\n     public static final int DEFAULT_PORT = 514;\n     public static final int MIN_CLIENT_PORT = 512;\n     public static final int MAX_CLIENT_PORT = 1023;\n     \n     InputStream createErrorStream() throws IOException {\n-        int localPort = 1023;\n-        ServerSocket server = null;\n-        localPort = 1023;\n-        while (localPort >= 512) {\n+        ServerSocket serverSocket = null;\n+        int i = 1023;\n+        while (i >= 512) {\n             try {\n-                server = this._serverSocketFactory_.createServerSocket(localPort, 1, this.getLocalAddress());\n+                serverSocket = this._serverSocketFactory_.createServerSocket(i, 1, this.getLocalAddress());\n             }\n-            catch (final SocketException e) {\n-                --localPort;\n+            catch (final SocketException ex) {\n+                --i;\n                 continue;\n             }\n             break;\n         }\n-        if (server == null) {\n+        if (serverSocket == null) {\n             throw new BindException(\"All ports in use.\");\n         }\n-        this._output_.write(Integer.toString(server.getLocalPort()).getBytes(\"UTF-8\"));\n+        this._output_.write(Integer.toString(serverSocket.getLocalPort()).getBytes(\"UTF-8\"));\n         this._output_.write(0);\n         this._output_.flush();\n-        final Socket socket = server.accept();\n-        server.close();\n-        if (this.isRemoteVerificationEnabled() && !this.verifyRemote(socket)) {\n-            socket.close();\n-            throw new IOException(\"Security violation: unexpected connection attempt by \" + socket.getInetAddress().getHostAddress());\n+        final Socket accept = serverSocket.accept();\n+        serverSocket.close();\n+        if (this.isRemoteVerificationEnabled() && !this.verifyRemote(accept)) {\n+            accept.close();\n+            throw new IOException(\"Security violation: unexpected connection attempt by \" + accept.getInetAddress().getHostAddress());\n         }\n-        return (InputStream)new SocketInputStream(socket, socket.getInputStream());\n+        return (InputStream)new SocketInputStream(accept, accept.getInputStream());\n     }\n     \n     public RCommandClient() {\n         this.setDefaultPort(514);\n     }\n     \n-    public void connect(final InetAddress host, final int port, final InetAddress localAddr) throws SocketException, BindException, IOException {\n-        int localPort;\n-        for (localPort = 1023, localPort = 1023; localPort >= 512; --localPort) {\n+    public void connect(final InetAddress inetAddress, final int n, final InetAddress inetAddress2) throws SocketException, BindException, IOException {\n+        int i;\n+        for (i = 1023; i >= 512; --i) {\n             try {\n-                this._socket_ = this._socketFactory_.createSocket(host, port, localAddr, localPort);\n+                this._socket_ = this._socketFactory_.createSocket(inetAddress, n, inetAddress2, i);\n                 break;\n             }\n-            catch (final BindException be) {}\n-            catch (final SocketException e) {}\n+            catch (final BindException ex) {}\n+            catch (final SocketException ex2) {}\n         }\n-        if (localPort < 512) {\n+        if (i < 512) {\n             throw new BindException(\"All ports in use or insufficient permssion.\");\n         }\n         this._connectAction_();\n     }\n     \n-    public void connect(final InetAddress host, final int port) throws SocketException, IOException {\n-        this.connect(host, port, InetAddress.getLocalHost());\n+    public void connect(final InetAddress inetAddress, final int n) throws SocketException, IOException {\n+        this.connect(inetAddress, n, InetAddress.getLocalHost());\n     }\n     \n-    public void connect(final String hostname, final int port) throws SocketException, IOException, UnknownHostException {\n-        this.connect(InetAddress.getByName(hostname), port, InetAddress.getLocalHost());\n+    public void connect(final String host, final int n) throws SocketException, IOException, UnknownHostException {\n+        this.connect(InetAddress.getByName(host), n, InetAddress.getLocalHost());\n     }\n     \n-    public void connect(final String hostname, final int port, final InetAddress localAddr) throws SocketException, IOException {\n-        this.connect(InetAddress.getByName(hostname), port, localAddr);\n+    public void connect(final String host, final int n, final InetAddress inetAddress) throws SocketException, IOException {\n+        this.connect(InetAddress.getByName(host), n, inetAddress);\n     }\n     \n-    public void connect(final InetAddress host, final int port, final InetAddress localAddr, final int localPort) throws SocketException, IOException, IllegalArgumentException {\n-        if (localPort < 512 || localPort > 1023) {\n-            throw new IllegalArgumentException(\"Invalid port number \" + localPort);\n+    public void connect(final InetAddress inetAddress, final int n, final InetAddress inetAddress2, final int i) throws SocketException, IOException, IllegalArgumentException {\n+        if (i < 512 || i > 1023) {\n+            throw new IllegalArgumentException(\"Invalid port number \" + i);\n         }\n-        super.connect(host, port, localAddr, localPort);\n+        super.connect(inetAddress, n, inetAddress2, i);\n     }\n     \n-    public void connect(final String hostname, final int port, final InetAddress localAddr, final int localPort) throws SocketException, IOException, IllegalArgumentException, UnknownHostException {\n-        if (localPort < 512 || localPort > 1023) {\n-            throw new IllegalArgumentException(\"Invalid port number \" + localPort);\n+    public void connect(final String s, final int n, final InetAddress inetAddress, final int i) throws SocketException, IOException, IllegalArgumentException, UnknownHostException {\n+        if (i < 512 || i > 1023) {\n+            throw new IllegalArgumentException(\"Invalid port number \" + i);\n         }\n-        super.connect(hostname, port, localAddr, localPort);\n+        super.connect(s, n, inetAddress, i);\n     }\n     \n-    public void rcommand(final String localUsername, final String remoteUsername, final String command, final boolean separateErrorStream) throws IOException {\n-        this.rexec(localUsername, remoteUsername, command, separateErrorStream);\n+    public void rcommand(final String s, final String s2, final String s3, final boolean b) throws IOException {\n+        this.rexec(s, s2, s3, b);\n     }\n     \n-    public void rcommand(final String localUsername, final String remoteUsername, final String command) throws IOException {\n-        this.rcommand(localUsername, remoteUsername, command, false);\n+    public void rcommand(final String s, final String s2, final String s3) throws IOException {\n+        this.rcommand(s, s2, s3, false);\n     }\n }\n"}]}
