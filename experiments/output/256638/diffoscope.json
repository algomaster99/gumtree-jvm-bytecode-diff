{"diffoscope-json-version": 1, "source1": "first/ClassFile.class", "source2": "second/ClassFile.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,40 +18,44 @@\n     public ClassFileEntry[] methods;\n     public Attribute[] attributes;\n     \n     public ClassFile() {\n         this.pool = new ClassConstantPool();\n     }\n     \n-    public void write(final DataOutputStream dos) throws IOException {\n-        dos.writeInt(-889275714);\n-        dos.writeShort(this.minor);\n-        dos.writeShort(this.major);\n-        dos.writeShort(this.pool.size() + 1);\n+    public void write(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeInt(-889275714);\n+        dataOutputStream.writeShort(this.minor);\n+        dataOutputStream.writeShort(this.major);\n+        dataOutputStream.writeShort(this.pool.size() + 1);\n         for (int i = 1; i <= this.pool.size(); ++i) {\n-            final ConstantPoolEntry entry;\n-            (entry = (ConstantPoolEntry)this.pool.get(i)).doWrite(dos);\n-            if (entry.getTag() == 6 || entry.getTag() == 5) {\n+            final ConstantPoolEntry constantPoolEntry;\n+            (constantPoolEntry = (ConstantPoolEntry)this.pool.get(i)).doWrite(dataOutputStream);\n+            if (constantPoolEntry.getTag() == 6 || constantPoolEntry.getTag() == 5) {\n                 ++i;\n             }\n         }\n-        dos.writeShort(this.accessFlags);\n-        dos.writeShort(this.thisClass);\n-        dos.writeShort(this.superClass);\n-        dos.writeShort(this.interfaces.length);\n-        for (final int element : this.interfaces) {\n-            dos.writeShort(element);\n+        dataOutputStream.writeShort(this.accessFlags);\n+        dataOutputStream.writeShort(this.thisClass);\n+        dataOutputStream.writeShort(this.superClass);\n+        dataOutputStream.writeShort(this.interfaces.length);\n+        final int[] interfaces = this.interfaces;\n+        for (int length = interfaces.length, j = 0; j < length; ++j) {\n+            dataOutputStream.writeShort(interfaces[j]);\n         }\n-        dos.writeShort(this.fields.length);\n-        for (final ClassFileEntry field : this.fields) {\n-            field.write(dos);\n+        dataOutputStream.writeShort(this.fields.length);\n+        final ClassFileEntry[] fields = this.fields;\n+        for (int length2 = fields.length, k = 0; k < length2; ++k) {\n+            fields[k].write(dataOutputStream);\n         }\n-        dos.writeShort(this.methods.length);\n-        for (final ClassFileEntry method : this.methods) {\n-            method.write(dos);\n+        dataOutputStream.writeShort(this.methods.length);\n+        final ClassFileEntry[] methods = this.methods;\n+        for (int length3 = methods.length, l = 0; l < length3; ++l) {\n+            methods[l].write(dataOutputStream);\n         }\n-        dos.writeShort(this.attributes.length);\n-        for (final Attribute attribute : this.attributes) {\n-            attribute.write(dos);\n+        dataOutputStream.writeShort(this.attributes.length);\n+        final Attribute[] attributes = this.attributes;\n+        for (int length4 = attributes.length, n = 0; n < length4; ++n) {\n+            attributes[n].write(dataOutputStream);\n         }\n     }\n }\n"}]}
