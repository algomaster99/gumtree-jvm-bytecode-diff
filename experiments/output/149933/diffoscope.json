{"diffoscope-json-version": 1, "source1": "first/CompressorStreamFactory.class", "source2": "second/CompressorStreamFactory.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -64,14 +64,21 @@\n     private static final String YOU_NEED_ZSTD_JNI;\n     private final Boolean decompressUntilEOF;\n     private SortedMap<String, CompressorStreamProvider> compressorInputStreamProviders;\n     private SortedMap<String, CompressorStreamProvider> compressorOutputStreamProviders;\n     private volatile boolean decompressConcatenated;\n     private final int memoryLimitInKb;\n     \n+    static {\n+        SINGLETON = new CompressorStreamFactory();\n+        YOU_NEED_BROTLI_DEC = youNeed(\"Google Brotli Dec\", \"https://github.com/google/brotli/\");\n+        YOU_NEED_XZ_JAVA = youNeed(\"XZ for Java\", \"https://tukaani.org/xz/java.html\");\n+        YOU_NEED_ZSTD_JNI = youNeed(\"Zstd JNI\", \"https://github.com/luben/zstd-jni\");\n+    }\n+    \n     private static Iterable<CompressorStreamProvider> archiveStreamProviderIterable() {\n         return ServiceLoader.load(CompressorStreamProvider.class, ClassLoader.getSystemClassLoader());\n     }\n     \n     public static String detect(final InputStream inputStream) throws CompressorException {\n         if (inputStream == null) {\n             throw new IllegalArgumentException(\"Stream must not be null.\");\n@@ -122,24 +129,24 @@\n         throw new CompressorException(\"No Compressor found for the stream signature.\");\n     }\n     \n     public static SortedMap<String, CompressorStreamProvider> findAvailableCompressorInputStreamProviders() {\n         return AccessController.doPrivileged(() -> {\n             final TreeMap<String, CompressorStreamProvider> map = new TreeMap<String, CompressorStreamProvider>();\n             putAll(CompressorStreamFactory.SINGLETON.getInputStreamCompressorNames(), (CompressorStreamProvider)CompressorStreamFactory.SINGLETON, map);\n-            archiveStreamProviderIterable().forEach(provider -> putAll(provider.getInputStreamCompressorNames(), provider, map));\n+            archiveStreamProviderIterable().forEach(provider -> putAll(provider.getInputStreamCompressorNames(), provider, map2));\n             return map;\n         });\n     }\n     \n     public static SortedMap<String, CompressorStreamProvider> findAvailableCompressorOutputStreamProviders() {\n         return AccessController.doPrivileged(() -> {\n             final TreeMap<String, CompressorStreamProvider> map = new TreeMap<String, CompressorStreamProvider>();\n             putAll(CompressorStreamFactory.SINGLETON.getOutputStreamCompressorNames(), (CompressorStreamProvider)CompressorStreamFactory.SINGLETON, map);\n-            archiveStreamProviderIterable().forEach(provider -> putAll(provider.getOutputStreamCompressorNames(), provider, map));\n+            archiveStreamProviderIterable().forEach(provider -> putAll(provider.getOutputStreamCompressorNames(), provider, map2));\n             return map;\n         });\n     }\n     \n     public static String getBrotli() {\n         return \"br\";\n     }\n@@ -197,15 +204,15 @@\n     }\n     \n     public static String getZstandard() {\n         return \"zstd\";\n     }\n     \n     static void putAll(final Set<String> names, final CompressorStreamProvider provider, final TreeMap<String, CompressorStreamProvider> map) {\n-        names.forEach(name -> map.put(toKey(name), provider));\n+        names.forEach(name -> treeMap.put(toKey(name), value));\n     }\n     \n     private static String toKey(final String name) {\n         return name.toUpperCase(Locale.ROOT);\n     }\n     \n     private static String youNeed(final String name, final String url) {\n@@ -386,15 +393,8 @@\n     @Deprecated\n     public void setDecompressConcatenated(final boolean decompressConcatenated) {\n         if (this.decompressUntilEOF != null) {\n             throw new IllegalStateException(\"Cannot override the setting defined by the constructor\");\n         }\n         this.decompressConcatenated = decompressConcatenated;\n     }\n-    \n-    static {\n-        SINGLETON = new CompressorStreamFactory();\n-        YOU_NEED_BROTLI_DEC = youNeed(\"Google Brotli Dec\", \"https://github.com/google/brotli/\");\n-        YOU_NEED_XZ_JAVA = youNeed(\"XZ for Java\", \"https://tukaani.org/xz/java.html\");\n-        YOU_NEED_ZSTD_JNI = youNeed(\"Zstd JNI\", \"https://github.com/luben/zstd-jni\");\n-    }\n }\n"}]}
