{"diffoscope-json-version": 1, "source1": "first/X0017_StrongEncryptionHeader.class", "source2": "second/X0017_StrongEncryptionHeader.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,197 +1,196 @@\n-  SHA-256 checksum 237f0d977a59c8587f43e3919cf69e3882e0c8840f33ae2d184aa2703fa8fbb3\n+  SHA-256 checksum 0dc26e51a3041b9b8b8eb497cc73a07f054d99a6b26161f18078c144dc50b8f1\n   Compiled from \"X0017_StrongEncryptionHeader.java\"\n public class org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader extends org.apache.commons.compress.archivers.zip.PKWareExtraHeader\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #48                         // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader\n-  super_class: #49                        // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+  this_class: #1                          // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader\n+  super_class: #3                         // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n   interfaces: 0, fields: 13, methods: 9, attributes: 2\n Constant pool:\n-    #1 = Class              #108          // org/apache/commons/compress/archivers/zip/ZipShort\n-    #2 = Methodref          #1.#109       // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-    #3 = Methodref          #49.#110      // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-    #4 = Fieldref           #48.#111      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.rcount:J\n-    #5 = Fieldref           #48.#112      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-    #6 = Fieldref           #48.#113      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-    #7 = Methodref          #48.#114      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.assertMinimalLength:(II)V\n-    #8 = Methodref          #1.#115       // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-    #9 = Fieldref           #48.#116      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.format:I\n-   #10 = Methodref          #53.#117      // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-   #11 = Fieldref           #48.#118      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.bitlen:I\n-   #12 = Fieldref           #48.#119      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.flags:I\n-   #13 = Methodref          #120.#121     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-   #14 = Methodref          #62.#122      // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-   #15 = Fieldref           #48.#123      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.hashSize:I\n-   #16 = String             #96           // ivSize\n-   #17 = Methodref          #48.#124      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.assertDynamicLengthFits:(Ljava/lang/String;III)V\n-   #18 = Methodref          #125.#126     // java/util/Arrays.copyOfRange:([BII)[B\n-   #19 = Fieldref           #48.#127      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.ivData:[B\n-   #20 = String             #97           // erdSize\n-   #21 = Fieldref           #48.#128      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.erdData:[B\n-   #22 = String             #94           // vSize\n-   #23 = Class              #129          // java/util/zip/ZipException\n-   #24 = Class              #130          // java/lang/StringBuilder\n-   #25 = Methodref          #24.#131      // java/lang/StringBuilder.\"<init>\":()V\n-   #26 = String             #132          // Invalid X0017_StrongEncryptionHeader: vSize\n-   #27 = Methodref          #24.#133      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #28 = Methodref          #24.#134      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #29 = String             #135          //  is too small to hold CRC\n-   #30 = Methodref          #24.#136      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #31 = Methodref          #23.#137      // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-   #32 = Fieldref           #48.#138      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.vData:[B\n-   #33 = Fieldref           #48.#139      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.vCRC32:[B\n-   #34 = String             #140          // Invalid X0017_StrongEncryptionHeader: resize\n-   #35 = String             #141          //  is too small to hold hashSize\n-   #36 = Fieldref           #48.#142      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.recipientKeyHash:[B\n-   #37 = Fieldref           #48.#143      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.keyBlob:[B\n-   #38 = String             #95           // resize\n-   #39 = Methodref          #144.#145     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #40 = Methodref          #49.#146      // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromLocalFileData:([BII)V\n-   #41 = Methodref          #48.#147      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.parseFileFormat:([BII)V\n-   #42 = Methodref          #49.#148      // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromCentralDirectoryData:([BII)V\n-   #43 = Methodref          #48.#149      // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.parseCentralDirectoryFormat:([BII)V\n-   #44 = String             #150          // Invalid X0017_StrongEncryptionHeader:\n-   #45 = String             #151          //\n-   #46 = String             #152          //  doesn\\'t fit into\n-   #47 = String             #153          //  bytes of data at position\n-   #48 = Class              #154          // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader\n-   #49 = Class              #155          // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n-   #50 = Utf8               format\n-   #51 = Utf8               I\n-   #52 = Utf8               algId\n-   #53 = Class              #156          // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm\n-   #54 = Utf8               EncryptionAlgorithm\n-   #55 = Utf8               InnerClasses\n-   #56 = Utf8               Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-   #57 = Utf8               bitlen\n-   #58 = Utf8               flags\n-   #59 = Utf8               rcount\n-   #60 = Utf8               J\n-   #61 = Utf8               hashAlg\n-   #62 = Class              #157          // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n-   #63 = Utf8               HashAlgorithm\n-   #64 = Utf8               Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-   #65 = Utf8               hashSize\n-   #66 = Utf8               ivData\n-   #67 = Utf8               [B\n-   #68 = Utf8               erdData\n-   #69 = Utf8               recipientKeyHash\n-   #70 = Utf8               keyBlob\n-   #71 = Utf8               vData\n-   #72 = Utf8               vCRC32\n-   #73 = Utf8               <init>\n-   #74 = Utf8               ()V\n-   #75 = Utf8               Code\n-   #76 = Utf8               LineNumberTable\n-   #77 = Utf8               LocalVariableTable\n-   #78 = Utf8               this\n-   #79 = Utf8               Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n-   #80 = Utf8               getRecordCount\n-   #81 = Utf8               ()J\n-   #82 = Utf8               getHashAlgorithm\n-   #83 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-   #84 = Utf8               getEncryptionAlgorithm\n-   #85 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-   #86 = Utf8               parseCentralDirectoryFormat\n-   #87 = Utf8               ([BII)V\n-   #88 = Utf8               data\n-   #89 = Utf8               offset\n-   #90 = Utf8               length\n-   #91 = Utf8               StackMapTable\n-   #92 = Utf8               Exceptions\n-   #93 = Utf8               parseFileFormat\n-   #94 = Utf8               vSize\n-   #95 = Utf8               resize\n-   #96 = Utf8               ivSize\n-   #97 = Utf8               erdSize\n-   #98 = Utf8               parseFromLocalFileData\n-   #99 = Utf8               parseFromCentralDirectoryData\n-  #100 = Utf8               assertDynamicLengthFits\n-  #101 = Utf8               (Ljava/lang/String;III)V\n-  #102 = Utf8               what\n-  #103 = Utf8               Ljava/lang/String;\n-  #104 = Utf8               dynamicLength\n-  #105 = Utf8               prefixLength\n-  #106 = Utf8               SourceFile\n-  #107 = Utf8               X0017_StrongEncryptionHeader.java\n-  #108 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-  #109 = NameAndType        #73:#158      // \"<init>\":(I)V\n-  #110 = NameAndType        #73:#159      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-  #111 = NameAndType        #59:#60       // rcount:J\n-  #112 = NameAndType        #61:#64       // hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-  #113 = NameAndType        #52:#56       // algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-  #114 = NameAndType        #160:#161     // assertMinimalLength:(II)V\n-  #115 = NameAndType        #162:#163     // getValue:([BI)I\n-  #116 = NameAndType        #50:#51       // format:I\n-  #117 = NameAndType        #164:#165     // getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-  #118 = NameAndType        #57:#51       // bitlen:I\n-  #119 = NameAndType        #58:#51       // flags:I\n-  #120 = Class              #166          // org/apache/commons/compress/archivers/zip/ZipLong\n-  #121 = NameAndType        #162:#167     // getValue:([BI)J\n-  #122 = NameAndType        #164:#168     // getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-  #123 = NameAndType        #65:#51       // hashSize:I\n-  #124 = NameAndType        #100:#101     // assertDynamicLengthFits:(Ljava/lang/String;III)V\n-  #125 = Class              #169          // java/util/Arrays\n-  #126 = NameAndType        #170:#171     // copyOfRange:([BII)[B\n-  #127 = NameAndType        #66:#67       // ivData:[B\n-  #128 = NameAndType        #68:#67       // erdData:[B\n-  #129 = Utf8               java/util/zip/ZipException\n-  #130 = Utf8               java/lang/StringBuilder\n-  #131 = NameAndType        #73:#74       // \"<init>\":()V\n-  #132 = Utf8               Invalid X0017_StrongEncryptionHeader: vSize\n-  #133 = NameAndType        #172:#173     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #134 = NameAndType        #172:#174     // append:(I)Ljava/lang/StringBuilder;\n-  #135 = Utf8                is too small to hold CRC\n-  #136 = NameAndType        #175:#176     // toString:()Ljava/lang/String;\n-  #137 = NameAndType        #73:#177      // \"<init>\":(Ljava/lang/String;)V\n-  #138 = NameAndType        #71:#67       // vData:[B\n-  #139 = NameAndType        #72:#67       // vCRC32:[B\n-  #140 = Utf8               Invalid X0017_StrongEncryptionHeader: resize\n-  #141 = Utf8                is too small to hold hashSize\n-  #142 = NameAndType        #69:#67       // recipientKeyHash:[B\n-  #143 = NameAndType        #70:#67       // keyBlob:[B\n-  #144 = Class              #178          // java/lang/System\n-  #145 = NameAndType        #179:#180     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #146 = NameAndType        #98:#87       // parseFromLocalFileData:([BII)V\n-  #147 = NameAndType        #93:#87       // parseFileFormat:([BII)V\n-  #148 = NameAndType        #99:#87       // parseFromCentralDirectoryData:([BII)V\n-  #149 = NameAndType        #86:#87       // parseCentralDirectoryFormat:([BII)V\n-  #150 = Utf8               Invalid X0017_StrongEncryptionHeader:\n-  #151 = Utf8\n-  #152 = Utf8                doesn\\'t fit into\n-  #153 = Utf8                bytes of data at position\n-  #154 = Utf8               org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader\n-  #155 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n-  #156 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm\n-  #157 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n-  #158 = Utf8               (I)V\n-  #159 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-  #160 = Utf8               assertMinimalLength\n-  #161 = Utf8               (II)V\n-  #162 = Utf8               getValue\n-  #163 = Utf8               ([BI)I\n-  #164 = Utf8               getAlgorithmByCode\n-  #165 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-  #166 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-  #167 = Utf8               ([BI)J\n-  #168 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-  #169 = Utf8               java/util/Arrays\n-  #170 = Utf8               copyOfRange\n-  #171 = Utf8               ([BII)[B\n-  #172 = Utf8               append\n-  #173 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #174 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #175 = Utf8               toString\n-  #176 = Utf8               ()Ljava/lang/String;\n-  #177 = Utf8               (Ljava/lang/String;)V\n-  #178 = Utf8               java/lang/System\n-  #179 = Utf8               arraycopy\n-  #180 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader\n+    #2 = Utf8               org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader\n+    #3 = Class              #4            // org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+    #4 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+    #5 = Utf8               format\n+    #6 = Utf8               I\n+    #7 = Utf8               algId\n+    #8 = Utf8               Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+    #9 = Utf8               bitlen\n+   #10 = Utf8               flags\n+   #11 = Utf8               rcount\n+   #12 = Utf8               J\n+   #13 = Utf8               hashAlg\n+   #14 = Utf8               Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+   #15 = Utf8               hashSize\n+   #16 = Utf8               ivData\n+   #17 = Utf8               [B\n+   #18 = Utf8               erdData\n+   #19 = Utf8               recipientKeyHash\n+   #20 = Utf8               keyBlob\n+   #21 = Utf8               vData\n+   #22 = Utf8               vCRC32\n+   #23 = Utf8               <init>\n+   #24 = Utf8               ()V\n+   #25 = Utf8               Code\n+   #26 = Class              #27           // org/apache/commons/compress/archivers/zip/ZipShort\n+   #27 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+   #28 = Methodref          #26.#29       // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+   #29 = NameAndType        #23:#30       // \"<init>\":(I)V\n+   #30 = Utf8               (I)V\n+   #31 = Methodref          #3.#32        // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+   #32 = NameAndType        #23:#33       // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+   #33 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+   #34 = Utf8               LineNumberTable\n+   #35 = Utf8               LocalVariableTable\n+   #36 = Utf8               this\n+   #37 = Utf8               Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n+   #38 = Utf8               getRecordCount\n+   #39 = Utf8               ()J\n+   #40 = Fieldref           #1.#41        // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.rcount:J\n+   #41 = NameAndType        #11:#12       // rcount:J\n+   #42 = Utf8               getHashAlgorithm\n+   #43 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+   #44 = Fieldref           #1.#45        // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+   #45 = NameAndType        #13:#14       // hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+   #46 = Utf8               getEncryptionAlgorithm\n+   #47 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+   #48 = Fieldref           #1.#49        // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+   #49 = NameAndType        #7:#8         // algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+   #50 = Utf8               parseCentralDirectoryFormat\n+   #51 = Utf8               ([BII)V\n+   #52 = Utf8               Exceptions\n+   #53 = Class              #54           // java/util/zip/ZipException\n+   #54 = Utf8               java/util/zip/ZipException\n+   #55 = Methodref          #1.#56        // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.assertMinimalLength:(II)V\n+   #56 = NameAndType        #57:#58       // assertMinimalLength:(II)V\n+   #57 = Utf8               assertMinimalLength\n+   #58 = Utf8               (II)V\n+   #59 = Methodref          #26.#60       // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+   #60 = NameAndType        #61:#62       // getValue:([BI)I\n+   #61 = Utf8               getValue\n+   #62 = Utf8               ([BI)I\n+   #63 = Fieldref           #1.#64        // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.format:I\n+   #64 = NameAndType        #5:#6         // format:I\n+   #65 = Methodref          #66.#68       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+   #66 = Class              #67           // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm\n+   #67 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm\n+   #68 = NameAndType        #69:#70       // getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+   #69 = Utf8               getAlgorithmByCode\n+   #70 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+   #71 = Fieldref           #1.#72        // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.bitlen:I\n+   #72 = NameAndType        #9:#6         // bitlen:I\n+   #73 = Fieldref           #1.#74        // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.flags:I\n+   #74 = NameAndType        #10:#6        // flags:I\n+   #75 = Methodref          #76.#78       // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+   #76 = Class              #77           // org/apache/commons/compress/archivers/zip/ZipLong\n+   #77 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+   #78 = NameAndType        #61:#79       // getValue:([BI)J\n+   #79 = Utf8               ([BI)J\n+   #80 = Methodref          #81.#83       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+   #81 = Class              #82           // org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n+   #82 = Utf8               org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm\n+   #83 = NameAndType        #69:#84       // getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+   #84 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+   #85 = Fieldref           #1.#86        // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.hashSize:I\n+   #86 = NameAndType        #15:#6        // hashSize:I\n+   #87 = Utf8               data\n+   #88 = Utf8               offset\n+   #89 = Utf8               length\n+   #90 = Utf8               StackMapTable\n+   #91 = Utf8               parseFileFormat\n+   #92 = String             #93           // ivSize\n+   #93 = Utf8               ivSize\n+   #94 = Methodref          #1.#95        // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.assertDynamicLengthFits:(Ljava/lang/String;III)V\n+   #95 = NameAndType        #96:#97       // assertDynamicLengthFits:(Ljava/lang/String;III)V\n+   #96 = Utf8               assertDynamicLengthFits\n+   #97 = Utf8               (Ljava/lang/String;III)V\n+   #98 = Methodref          #99.#101      // java/util/Arrays.copyOfRange:([BII)[B\n+   #99 = Class              #100          // java/util/Arrays\n+  #100 = Utf8               java/util/Arrays\n+  #101 = NameAndType        #102:#103     // copyOfRange:([BII)[B\n+  #102 = Utf8               copyOfRange\n+  #103 = Utf8               ([BII)[B\n+  #104 = Fieldref           #1.#105       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.ivData:[B\n+  #105 = NameAndType        #16:#17       // ivData:[B\n+  #106 = String             #107          // erdSize\n+  #107 = Utf8               erdSize\n+  #108 = Fieldref           #1.#109       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.erdData:[B\n+  #109 = NameAndType        #18:#17       // erdData:[B\n+  #110 = String             #111          // vSize\n+  #111 = Utf8               vSize\n+  #112 = Class              #113          // java/lang/StringBuilder\n+  #113 = Utf8               java/lang/StringBuilder\n+  #114 = String             #115          // Invalid X0017_StrongEncryptionHeader: vSize\n+  #115 = Utf8               Invalid X0017_StrongEncryptionHeader: vSize\n+  #116 = Methodref          #112.#117     // java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+  #117 = NameAndType        #23:#118      // \"<init>\":(Ljava/lang/String;)V\n+  #118 = Utf8               (Ljava/lang/String;)V\n+  #119 = Methodref          #112.#120     // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+  #120 = NameAndType        #121:#122     // append:(I)Ljava/lang/StringBuilder;\n+  #121 = Utf8               append\n+  #122 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #123 = String             #124          //  is too small to hold CRC\n+  #124 = Utf8                is too small to hold CRC\n+  #125 = Methodref          #112.#126     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #126 = NameAndType        #121:#127     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #127 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #128 = Methodref          #112.#129     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #129 = NameAndType        #130:#131     // toString:()Ljava/lang/String;\n+  #130 = Utf8               toString\n+  #131 = Utf8               ()Ljava/lang/String;\n+  #132 = Methodref          #53.#117      // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+  #133 = Fieldref           #1.#134       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.vData:[B\n+  #134 = NameAndType        #21:#17       // vData:[B\n+  #135 = Fieldref           #1.#136       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.vCRC32:[B\n+  #136 = NameAndType        #22:#17       // vCRC32:[B\n+  #137 = String             #138          // Invalid X0017_StrongEncryptionHeader: resize\n+  #138 = Utf8               Invalid X0017_StrongEncryptionHeader: resize\n+  #139 = String             #140          //  is too small to hold hashSize\n+  #140 = Utf8                is too small to hold hashSize\n+  #141 = Fieldref           #1.#142       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.recipientKeyHash:[B\n+  #142 = NameAndType        #19:#17       // recipientKeyHash:[B\n+  #143 = Fieldref           #1.#144       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.keyBlob:[B\n+  #144 = NameAndType        #20:#17       // keyBlob:[B\n+  #145 = String             #146          // resize\n+  #146 = Utf8               resize\n+  #147 = Methodref          #148.#150     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #148 = Class              #149          // java/lang/System\n+  #149 = Utf8               java/lang/System\n+  #150 = NameAndType        #151:#152     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #151 = Utf8               arraycopy\n+  #152 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #153 = Utf8               parseFromLocalFileData\n+  #154 = Methodref          #3.#155       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromLocalFileData:([BII)V\n+  #155 = NameAndType        #153:#51      // parseFromLocalFileData:([BII)V\n+  #156 = Methodref          #1.#157       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.parseFileFormat:([BII)V\n+  #157 = NameAndType        #91:#51       // parseFileFormat:([BII)V\n+  #158 = Utf8               parseFromCentralDirectoryData\n+  #159 = Methodref          #3.#160       // org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromCentralDirectoryData:([BII)V\n+  #160 = NameAndType        #158:#51      // parseFromCentralDirectoryData:([BII)V\n+  #161 = Methodref          #1.#162       // org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.parseCentralDirectoryFormat:([BII)V\n+  #162 = NameAndType        #50:#51       // parseCentralDirectoryFormat:([BII)V\n+  #163 = String             #164          // Invalid X0017_StrongEncryptionHeader:\n+  #164 = Utf8               Invalid X0017_StrongEncryptionHeader:\n+  #165 = String             #166          //\n+  #166 = Utf8\n+  #167 = String             #168          //  doesn\\'t fit into\n+  #168 = Utf8                doesn\\'t fit into\n+  #169 = String             #170          //  bytes of data at position\n+  #170 = Utf8                bytes of data at position\n+  #171 = Utf8               what\n+  #172 = Utf8               Ljava/lang/String;\n+  #173 = Utf8               dynamicLength\n+  #174 = Utf8               prefixLength\n+  #175 = Utf8               SourceFile\n+  #176 = Utf8               X0017_StrongEncryptionHeader.java\n+  #177 = Utf8               InnerClasses\n+  #178 = Utf8               EncryptionAlgorithm\n+  #179 = Utf8               HashAlgorithm\n {\n   private int format;\n     descriptor: I\n     flags: (0x0002) ACC_PRIVATE\n \n   private org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm algId;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n@@ -243,136 +242,138 @@\n \n   public org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n-         1: new           #1                  // class org/apache/commons/compress/archivers/zip/ZipShort\n+         1: new           #26                 // class org/apache/commons/compress/archivers/zip/ZipShort\n          4: dup\n          5: bipush        23\n-         7: invokespecial #2                  // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-        10: invokespecial #3                  // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+         7: invokespecial #28                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+        10: invokespecial #31                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n         13: return\n       LineNumberTable:\n         line 251: 0\n         line 252: 13\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      14     0  this   Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n \n   public long getRecordCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #4                  // Field rcount:J\n+         1: getfield      #40                 // Field rcount:J\n          4: lreturn\n       LineNumberTable:\n         line 279: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n \n   public org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm getHashAlgorithm();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #5                  // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+         1: getfield      #44                 // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n          4: areturn\n       LineNumberTable:\n         line 287: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n \n   public org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm getEncryptionAlgorithm();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #6                  // Field algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+         1: getfield      #48                 // Field algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n          4: areturn\n       LineNumberTable:\n         line 295: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n \n   public void parseCentralDirectoryFormat(byte[], int, int) throws java.util.zip.ZipException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.util.zip.ZipException\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n          1: bipush        12\n          3: iload_3\n-         4: invokevirtual #7                  // Method assertMinimalLength:(II)V\n+         4: invokevirtual #55                 // Method assertMinimalLength:(II)V\n          7: aload_0\n          8: aload_1\n          9: iload_2\n-        10: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        13: putfield      #9                  // Field format:I\n+        10: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        13: putfield      #63                 // Field format:I\n         16: aload_0\n         17: aload_1\n         18: iload_2\n         19: iconst_2\n         20: iadd\n-        21: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        24: invokestatic  #10                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-        27: putfield      #6                  // Field algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+        21: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        24: invokestatic  #65                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+        27: putfield      #48                 // Field algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n         30: aload_0\n         31: aload_1\n         32: iload_2\n         33: iconst_4\n         34: iadd\n-        35: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        38: putfield      #11                 // Field bitlen:I\n+        35: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        38: putfield      #71                 // Field bitlen:I\n         41: aload_0\n         42: aload_1\n         43: iload_2\n         44: bipush        6\n         46: iadd\n-        47: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        50: putfield      #12                 // Field flags:I\n+        47: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        50: putfield      #73                 // Field flags:I\n         53: aload_0\n         54: aload_1\n         55: iload_2\n         56: bipush        8\n         58: iadd\n-        59: invokestatic  #13                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-        62: putfield      #4                  // Field rcount:J\n+        59: invokestatic  #75                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+        62: putfield      #40                 // Field rcount:J\n         65: aload_0\n-        66: getfield      #4                  // Field rcount:J\n+        66: getfield      #40                 // Field rcount:J\n         69: lconst_0\n         70: lcmp\n         71: ifle          108\n         74: aload_0\n         75: bipush        16\n         77: iload_3\n-        78: invokevirtual #7                  // Method assertMinimalLength:(II)V\n+        78: invokevirtual #55                 // Method assertMinimalLength:(II)V\n         81: aload_0\n         82: aload_1\n         83: iload_2\n         84: bipush        12\n         86: iadd\n-        87: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        90: invokestatic  #14                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-        93: putfield      #5                  // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+        87: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        90: invokestatic  #80                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+        93: putfield      #44                 // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n         96: aload_0\n         97: aload_1\n         98: iload_2\n         99: bipush        14\n        101: iadd\n-       102: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       105: putfield      #15                 // Field hashSize:I\n+       102: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       105: putfield      #85                 // Field hashSize:I\n        108: return\n       LineNumberTable:\n         line 308: 0\n         line 310: 7\n         line 311: 16\n         line 312: 30\n         line 313: 41\n@@ -387,474 +388,471 @@\n             0     109     0  this   Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n             0     109     1  data   [B\n             0     109     2 offset   I\n             0     109     3 length   I\n       StackMapTable: number_of_entries = 1\n         frame_type = 251 /* same_frame_extended */\n           offset_delta = 108\n-    Exceptions:\n-      throws java.util.zip.ZipException\n \n   public void parseFileFormat(byte[], int, int) throws java.util.zip.ZipException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.util.zip.ZipException\n     Code:\n       stack=6, locals=8, args_size=4\n          0: aload_0\n          1: iconst_4\n          2: iload_3\n-         3: invokevirtual #7                  // Method assertMinimalLength:(II)V\n+         3: invokevirtual #55                 // Method assertMinimalLength:(II)V\n          6: aload_1\n          7: iload_2\n-         8: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+         8: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n         11: istore        4\n         13: aload_0\n-        14: ldc           #16                 // String ivSize\n+        14: ldc           #92                 // String ivSize\n         16: iload         4\n         18: iconst_4\n         19: iload_3\n-        20: invokespecial #17                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n+        20: invokespecial #94                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n         23: aload_0\n         24: iload_2\n         25: iconst_4\n         26: iadd\n         27: iload         4\n-        29: invokevirtual #7                  // Method assertMinimalLength:(II)V\n+        29: invokevirtual #55                 // Method assertMinimalLength:(II)V\n         32: aload_0\n         33: aload_1\n         34: iload_2\n         35: iconst_4\n         36: iadd\n         37: iload         4\n-        39: invokestatic  #18                 // Method java/util/Arrays.copyOfRange:([BII)[B\n-        42: putfield      #19                 // Field ivData:[B\n+        39: invokestatic  #98                 // Method java/util/Arrays.copyOfRange:([BII)[B\n+        42: putfield      #104                // Field ivData:[B\n         45: aload_0\n         46: bipush        16\n         48: iload         4\n         50: iadd\n         51: iload_3\n-        52: invokevirtual #7                  // Method assertMinimalLength:(II)V\n+        52: invokevirtual #55                 // Method assertMinimalLength:(II)V\n         55: aload_0\n         56: aload_1\n         57: iload_2\n         58: iload         4\n         60: iadd\n         61: bipush        6\n         63: iadd\n-        64: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        67: putfield      #9                  // Field format:I\n+        64: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        67: putfield      #63                 // Field format:I\n         70: aload_0\n         71: aload_1\n         72: iload_2\n         73: iload         4\n         75: iadd\n         76: bipush        8\n         78: iadd\n-        79: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        82: invokestatic  #10                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n-        85: putfield      #6                  // Field algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+        79: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        82: invokestatic  #65                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n+        85: putfield      #48                 // Field algId:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm;\n         88: aload_0\n         89: aload_1\n         90: iload_2\n         91: iload         4\n         93: iadd\n         94: bipush        10\n         96: iadd\n-        97: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       100: putfield      #11                 // Field bitlen:I\n+        97: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       100: putfield      #71                 // Field bitlen:I\n        103: aload_0\n        104: aload_1\n        105: iload_2\n        106: iload         4\n        108: iadd\n        109: bipush        12\n        111: iadd\n-       112: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       115: putfield      #12                 // Field flags:I\n+       112: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       115: putfield      #73                 // Field flags:I\n        118: aload_1\n        119: iload_2\n        120: iload         4\n        122: iadd\n        123: bipush        14\n        125: iadd\n-       126: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       126: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        129: istore        5\n        131: aload_0\n-       132: ldc           #20                 // String erdSize\n+       132: ldc           #106                // String erdSize\n        134: iload         5\n        136: iload         4\n        138: bipush        16\n        140: iadd\n        141: iload_3\n-       142: invokespecial #17                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n+       142: invokespecial #94                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n        145: aload_0\n        146: iload_2\n        147: iload         4\n        149: iadd\n        150: bipush        16\n        152: iadd\n        153: iload         5\n-       155: invokevirtual #7                  // Method assertMinimalLength:(II)V\n+       155: invokevirtual #55                 // Method assertMinimalLength:(II)V\n        158: aload_0\n        159: aload_1\n        160: iload_2\n        161: iload         4\n        163: iadd\n        164: bipush        16\n        166: iadd\n        167: iload         5\n-       169: invokestatic  #18                 // Method java/util/Arrays.copyOfRange:([BII)[B\n-       172: putfield      #21                 // Field erdData:[B\n+       169: invokestatic  #98                 // Method java/util/Arrays.copyOfRange:([BII)[B\n+       172: putfield      #108                // Field erdData:[B\n        175: aload_0\n        176: bipush        20\n        178: iload         4\n        180: iadd\n        181: iload         5\n        183: iadd\n        184: iload_3\n-       185: invokevirtual #7                  // Method assertMinimalLength:(II)V\n+       185: invokevirtual #55                 // Method assertMinimalLength:(II)V\n        188: aload_0\n        189: aload_1\n        190: iload_2\n        191: iload         4\n        193: iadd\n        194: bipush        16\n        196: iadd\n        197: iload         5\n        199: iadd\n-       200: invokestatic  #13                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       203: putfield      #4                  // Field rcount:J\n+       200: invokestatic  #75                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       203: putfield      #40                 // Field rcount:J\n        206: aload_0\n-       207: getfield      #4                  // Field rcount:J\n+       207: getfield      #40                 // Field rcount:J\n        210: lconst_0\n        211: lcmp\n-       212: ifne          389\n+       212: ifne          386\n        215: aload_0\n        216: iload         4\n        218: bipush        20\n        220: iadd\n        221: iload         5\n        223: iadd\n        224: iconst_2\n        225: iadd\n        226: iload_3\n-       227: invokevirtual #7                  // Method assertMinimalLength:(II)V\n+       227: invokevirtual #55                 // Method assertMinimalLength:(II)V\n        230: aload_1\n        231: iload_2\n        232: iload         4\n        234: iadd\n        235: bipush        20\n        237: iadd\n        238: iload         5\n        240: iadd\n-       241: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       241: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        244: istore        6\n        246: aload_0\n-       247: ldc           #22                 // String vSize\n+       247: ldc           #110                // String vSize\n        249: iload         6\n        251: iload         4\n        253: bipush        22\n        255: iadd\n        256: iload         5\n        258: iadd\n        259: iload_3\n-       260: invokespecial #17                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n+       260: invokespecial #94                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n        263: iload         6\n        265: iconst_4\n-       266: if_icmpge     302\n-       269: new           #23                 // class java/util/zip/ZipException\n+       266: if_icmpge     299\n+       269: new           #53                 // class java/util/zip/ZipException\n        272: dup\n-       273: new           #24                 // class java/lang/StringBuilder\n+       273: new           #112                // class java/lang/StringBuilder\n        276: dup\n-       277: invokespecial #25                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       280: ldc           #26                 // String Invalid X0017_StrongEncryptionHeader: vSize\n-       282: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       285: iload         6\n-       287: invokevirtual #28                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       290: ldc           #29                 // String  is too small to hold CRC\n-       292: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       295: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       298: invokespecial #31                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-       301: athrow\n-       302: aload_0\n-       303: iload_2\n-       304: iload         4\n+       277: ldc           #114                // String Invalid X0017_StrongEncryptionHeader: vSize\n+       279: invokespecial #116                // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+       282: iload         6\n+       284: invokevirtual #119                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       287: ldc           #123                // String  is too small to hold CRC\n+       289: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       292: invokevirtual #128                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       295: invokespecial #132                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       298: athrow\n+       299: aload_0\n+       300: iload_2\n+       301: iload         4\n+       303: iadd\n+       304: bipush        22\n        306: iadd\n-       307: bipush        22\n+       307: iload         5\n        309: iadd\n-       310: iload         5\n-       312: iadd\n-       313: iload         6\n-       315: iconst_4\n-       316: isub\n-       317: invokevirtual #7                  // Method assertMinimalLength:(II)V\n-       320: aload_0\n-       321: aload_1\n-       322: iload_2\n-       323: iload         4\n+       310: iload         6\n+       312: iconst_4\n+       313: isub\n+       314: invokevirtual #55                 // Method assertMinimalLength:(II)V\n+       317: aload_0\n+       318: aload_1\n+       319: iload_2\n+       320: iload         4\n+       322: iadd\n+       323: bipush        22\n        325: iadd\n-       326: bipush        22\n+       326: iload         5\n        328: iadd\n-       329: iload         5\n-       331: iadd\n-       332: iload         6\n-       334: iconst_4\n-       335: isub\n-       336: invokestatic  #18                 // Method java/util/Arrays.copyOfRange:([BII)[B\n-       339: putfield      #32                 // Field vData:[B\n-       342: aload_0\n-       343: iload_2\n-       344: iload         4\n+       329: iload         6\n+       331: iconst_4\n+       332: isub\n+       333: invokestatic  #98                 // Method java/util/Arrays.copyOfRange:([BII)[B\n+       336: putfield      #133                // Field vData:[B\n+       339: aload_0\n+       340: iload_2\n+       341: iload         4\n+       343: iadd\n+       344: bipush        22\n        346: iadd\n-       347: bipush        22\n+       347: iload         5\n        349: iadd\n-       350: iload         5\n+       350: iload         6\n        352: iadd\n-       353: iload         6\n-       355: iadd\n-       356: iconst_4\n-       357: isub\n-       358: iconst_4\n-       359: invokevirtual #7                  // Method assertMinimalLength:(II)V\n-       362: aload_0\n-       363: aload_1\n-       364: iload_2\n-       365: iload         4\n+       353: iconst_4\n+       354: isub\n+       355: iconst_4\n+       356: invokevirtual #55                 // Method assertMinimalLength:(II)V\n+       359: aload_0\n+       360: aload_1\n+       361: iload_2\n+       362: iload         4\n+       364: iadd\n+       365: bipush        22\n        367: iadd\n-       368: bipush        22\n+       368: iload         5\n        370: iadd\n-       371: iload         5\n+       371: iload         6\n        373: iadd\n-       374: iload         6\n-       376: iadd\n-       377: iconst_4\n-       378: isub\n-       379: iconst_4\n-       380: invokestatic  #18                 // Method java/util/Arrays.copyOfRange:([BII)[B\n-       383: putfield      #33                 // Field vCRC32:[B\n-       386: goto          770\n-       389: aload_0\n-       390: iload         4\n-       392: bipush        20\n+       374: iconst_4\n+       375: isub\n+       376: iconst_4\n+       377: invokestatic  #98                 // Method java/util/Arrays.copyOfRange:([BII)[B\n+       380: putfield      #135                // Field vCRC32:[B\n+       383: goto          761\n+       386: aload_0\n+       387: iload         4\n+       389: bipush        20\n+       391: iadd\n+       392: iload         5\n        394: iadd\n-       395: iload         5\n+       395: bipush        6\n        397: iadd\n-       398: bipush        6\n-       400: iadd\n-       401: iload_3\n-       402: invokevirtual #7                  // Method assertMinimalLength:(II)V\n-       405: aload_0\n-       406: aload_1\n-       407: iload_2\n-       408: iload         4\n+       398: iload_3\n+       399: invokevirtual #55                 // Method assertMinimalLength:(II)V\n+       402: aload_0\n+       403: aload_1\n+       404: iload_2\n+       405: iload         4\n+       407: iadd\n+       408: bipush        20\n        410: iadd\n-       411: bipush        20\n+       411: iload         5\n        413: iadd\n-       414: iload         5\n-       416: iadd\n-       417: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       420: invokestatic  #14                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-       423: putfield      #5                  // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n-       426: aload_0\n-       427: aload_1\n-       428: iload_2\n-       429: iload         4\n+       414: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       417: invokestatic  #80                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode:(I)Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+       420: putfield      #44                 // Field hashAlg:Lorg/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm;\n+       423: aload_0\n+       424: aload_1\n+       425: iload_2\n+       426: iload         4\n+       428: iadd\n+       429: bipush        22\n        431: iadd\n-       432: bipush        22\n+       432: iload         5\n        434: iadd\n-       435: iload         5\n-       437: iadd\n-       438: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       441: putfield      #15                 // Field hashSize:I\n-       444: aload_1\n-       445: iload_2\n-       446: iload         4\n+       435: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       438: putfield      #85                 // Field hashSize:I\n+       441: aload_1\n+       442: iload_2\n+       443: iload         4\n+       445: iadd\n+       446: bipush        24\n        448: iadd\n-       449: bipush        24\n+       449: iload         5\n        451: iadd\n-       452: iload         5\n-       454: iadd\n-       455: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       458: istore        6\n-       460: iload         6\n-       462: aload_0\n-       463: getfield      #15                 // Field hashSize:I\n-       466: if_icmpge     509\n-       469: new           #23                 // class java/util/zip/ZipException\n-       472: dup\n-       473: new           #24                 // class java/lang/StringBuilder\n-       476: dup\n-       477: invokespecial #25                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       480: ldc           #34                 // String Invalid X0017_StrongEncryptionHeader: resize\n-       482: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       485: iload         6\n-       487: invokevirtual #28                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       490: ldc           #35                 // String  is too small to hold hashSize\n-       492: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       495: aload_0\n-       496: getfield      #15                 // Field hashSize:I\n-       499: invokevirtual #28                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       502: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       505: invokespecial #31                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-       508: athrow\n-       509: aload_0\n-       510: aload_0\n-       511: getfield      #15                 // Field hashSize:I\n-       514: newarray       byte\n-       516: putfield      #36                 // Field recipientKeyHash:[B\n-       519: aload_0\n-       520: iload         6\n-       522: aload_0\n-       523: getfield      #15                 // Field hashSize:I\n-       526: isub\n-       527: newarray       byte\n-       529: putfield      #37                 // Field keyBlob:[B\n-       532: aload_0\n-       533: ldc           #38                 // String resize\n-       535: iload         6\n-       537: iload         4\n-       539: bipush        24\n-       541: iadd\n-       542: iload         5\n-       544: iadd\n-       545: iload_3\n-       546: invokespecial #17                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n-       549: aload_1\n-       550: iload_2\n-       551: iload         4\n+       452: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       455: istore        6\n+       457: iload         6\n+       459: aload_0\n+       460: getfield      #85                 // Field hashSize:I\n+       463: if_icmpge     503\n+       466: new           #53                 // class java/util/zip/ZipException\n+       469: dup\n+       470: new           #112                // class java/lang/StringBuilder\n+       473: dup\n+       474: ldc           #137                // String Invalid X0017_StrongEncryptionHeader: resize\n+       476: invokespecial #116                // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+       479: iload         6\n+       481: invokevirtual #119                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       484: ldc           #139                // String  is too small to hold hashSize\n+       486: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       489: aload_0\n+       490: getfield      #85                 // Field hashSize:I\n+       493: invokevirtual #119                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       496: invokevirtual #128                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       499: invokespecial #132                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       502: athrow\n+       503: aload_0\n+       504: aload_0\n+       505: getfield      #85                 // Field hashSize:I\n+       508: newarray       byte\n+       510: putfield      #141                // Field recipientKeyHash:[B\n+       513: aload_0\n+       514: iload         6\n+       516: aload_0\n+       517: getfield      #85                 // Field hashSize:I\n+       520: isub\n+       521: newarray       byte\n+       523: putfield      #143                // Field keyBlob:[B\n+       526: aload_0\n+       527: ldc           #145                // String resize\n+       529: iload         6\n+       531: iload         4\n+       533: bipush        24\n+       535: iadd\n+       536: iload         5\n+       538: iadd\n+       539: iload_3\n+       540: invokespecial #94                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n+       543: aload_1\n+       544: iload_2\n+       545: iload         4\n+       547: iadd\n+       548: bipush        24\n+       550: iadd\n+       551: iload         5\n        553: iadd\n-       554: bipush        24\n-       556: iadd\n-       557: iload         5\n-       559: iadd\n-       560: aload_0\n-       561: getfield      #36                 // Field recipientKeyHash:[B\n-       564: iconst_0\n-       565: aload_0\n-       566: getfield      #15                 // Field hashSize:I\n-       569: invokestatic  #39                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-       572: aload_1\n-       573: iload_2\n-       574: iload         4\n+       554: aload_0\n+       555: getfield      #141                // Field recipientKeyHash:[B\n+       558: iconst_0\n+       559: aload_0\n+       560: getfield      #85                 // Field hashSize:I\n+       563: invokestatic  #147                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+       566: aload_1\n+       567: iload_2\n+       568: iload         4\n+       570: iadd\n+       571: bipush        24\n+       573: iadd\n+       574: iload         5\n        576: iadd\n-       577: bipush        24\n-       579: iadd\n-       580: iload         5\n-       582: iadd\n-       583: aload_0\n-       584: getfield      #15                 // Field hashSize:I\n-       587: iadd\n-       588: aload_0\n-       589: getfield      #37                 // Field keyBlob:[B\n-       592: iconst_0\n-       593: iload         6\n-       595: aload_0\n-       596: getfield      #15                 // Field hashSize:I\n-       599: isub\n-       600: invokestatic  #39                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-       603: aload_0\n-       604: iload         4\n-       606: bipush        26\n+       577: aload_0\n+       578: getfield      #85                 // Field hashSize:I\n+       581: iadd\n+       582: aload_0\n+       583: getfield      #143                // Field keyBlob:[B\n+       586: iconst_0\n+       587: iload         6\n+       589: aload_0\n+       590: getfield      #85                 // Field hashSize:I\n+       593: isub\n+       594: invokestatic  #147                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+       597: aload_0\n+       598: iload         4\n+       600: bipush        26\n+       602: iadd\n+       603: iload         5\n+       605: iadd\n+       606: iload         6\n        608: iadd\n-       609: iload         5\n-       611: iadd\n-       612: iload         6\n-       614: iadd\n-       615: iconst_2\n-       616: iadd\n-       617: iload_3\n-       618: invokevirtual #7                  // Method assertMinimalLength:(II)V\n-       621: aload_1\n-       622: iload_2\n-       623: iload         4\n+       609: iconst_2\n+       610: iadd\n+       611: iload_3\n+       612: invokevirtual #55                 // Method assertMinimalLength:(II)V\n+       615: aload_1\n+       616: iload_2\n+       617: iload         4\n+       619: iadd\n+       620: bipush        26\n+       622: iadd\n+       623: iload         5\n        625: iadd\n-       626: bipush        26\n+       626: iload         6\n        628: iadd\n-       629: iload         5\n-       631: iadd\n-       632: iload         6\n-       634: iadd\n-       635: invokestatic  #8                  // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       638: istore        7\n-       640: iload         7\n-       642: iconst_4\n-       643: if_icmpge     679\n-       646: new           #23                 // class java/util/zip/ZipException\n-       649: dup\n-       650: new           #24                 // class java/lang/StringBuilder\n-       653: dup\n-       654: invokespecial #25                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       657: ldc           #26                 // String Invalid X0017_StrongEncryptionHeader: vSize\n-       659: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       662: iload         7\n-       664: invokevirtual #28                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       667: ldc           #29                 // String  is too small to hold CRC\n-       669: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       672: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       675: invokespecial #31                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-       678: athrow\n-       679: aload_0\n-       680: ldc           #22                 // String vSize\n-       682: iload         7\n-       684: iload         4\n-       686: bipush        22\n-       688: iadd\n-       689: iload         5\n-       691: iadd\n-       692: iload         6\n-       694: iadd\n-       695: iload_3\n-       696: invokespecial #17                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n-       699: aload_0\n-       700: iload         7\n-       702: iconst_4\n-       703: isub\n-       704: newarray       byte\n-       706: putfield      #32                 // Field vData:[B\n-       709: aload_0\n-       710: iconst_4\n-       711: newarray       byte\n-       713: putfield      #33                 // Field vCRC32:[B\n-       716: aload_1\n-       717: iload_2\n-       718: iload         4\n+       629: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       632: istore        7\n+       634: iload         7\n+       636: iconst_4\n+       637: if_icmpge     670\n+       640: new           #53                 // class java/util/zip/ZipException\n+       643: dup\n+       644: new           #112                // class java/lang/StringBuilder\n+       647: dup\n+       648: ldc           #114                // String Invalid X0017_StrongEncryptionHeader: vSize\n+       650: invokespecial #116                // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+       653: iload         7\n+       655: invokevirtual #119                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       658: ldc           #123                // String  is too small to hold CRC\n+       660: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       663: invokevirtual #128                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       666: invokespecial #132                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       669: athrow\n+       670: aload_0\n+       671: ldc           #110                // String vSize\n+       673: iload         7\n+       675: iload         4\n+       677: bipush        22\n+       679: iadd\n+       680: iload         5\n+       682: iadd\n+       683: iload         6\n+       685: iadd\n+       686: iload_3\n+       687: invokespecial #94                 // Method assertDynamicLengthFits:(Ljava/lang/String;III)V\n+       690: aload_0\n+       691: iload         7\n+       693: iconst_4\n+       694: isub\n+       695: newarray       byte\n+       697: putfield      #133                // Field vData:[B\n+       700: aload_0\n+       701: iconst_4\n+       702: newarray       byte\n+       704: putfield      #135                // Field vCRC32:[B\n+       707: aload_1\n+       708: iload_2\n+       709: iload         4\n+       711: iadd\n+       712: bipush        22\n+       714: iadd\n+       715: iload         5\n+       717: iadd\n+       718: iload         6\n        720: iadd\n-       721: bipush        22\n-       723: iadd\n-       724: iload         5\n-       726: iadd\n-       727: iload         6\n-       729: iadd\n-       730: aload_0\n-       731: getfield      #32                 // Field vData:[B\n-       734: iconst_0\n-       735: iload         7\n-       737: iconst_4\n-       738: isub\n-       739: invokestatic  #39                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-       742: aload_1\n-       743: iload_2\n-       744: iload         4\n+       721: aload_0\n+       722: getfield      #133                // Field vData:[B\n+       725: iconst_0\n+       726: iload         7\n+       728: iconst_4\n+       729: isub\n+       730: invokestatic  #147                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+       733: aload_1\n+       734: iload_2\n+       735: iload         4\n+       737: iadd\n+       738: bipush        22\n+       740: iadd\n+       741: iload         5\n+       743: iadd\n+       744: iload         6\n        746: iadd\n-       747: bipush        22\n+       747: iload         7\n        749: iadd\n-       750: iload         5\n-       752: iadd\n-       753: iload         6\n-       755: iadd\n-       756: iload         7\n-       758: iadd\n-       759: iconst_4\n-       760: isub\n-       761: aload_0\n-       762: getfield      #33                 // Field vCRC32:[B\n-       765: iconst_0\n-       766: iconst_4\n-       767: invokestatic  #39                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-       770: return\n+       750: iconst_4\n+       751: isub\n+       752: aload_0\n+       753: getfield      #135                // Field vCRC32:[B\n+       756: iconst_0\n+       757: iconst_4\n+       758: invokestatic  #147                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+       761: return\n       LineNumberTable:\n         line 335: 0\n         line 336: 6\n         line 337: 13\n         line 338: 23\n         line 340: 32\n         line 342: 45\n@@ -870,174 +868,180 @@\n         line 355: 188\n         line 356: 206\n         line 357: 215\n         line 358: 230\n         line 359: 246\n         line 360: 263\n         line 361: 269\n-        line 364: 302\n-        line 365: 320\n-        line 366: 342\n-        line 367: 362\n-        line 368: 386\n-        line 369: 389\n-        line 370: 405\n-        line 371: 426\n-        line 372: 444\n-        line 374: 460\n-        line 375: 469\n-        line 378: 509\n-        line 379: 519\n-        line 381: 532\n-        line 383: 549\n-        line 384: 572\n-        line 386: 603\n-        line 387: 621\n-        line 388: 640\n-        line 389: 646\n-        line 393: 679\n-        line 395: 699\n-        line 396: 709\n-        line 397: 716\n-        line 398: 742\n-        line 402: 770\n+        line 362: 287\n+        line 361: 295\n+        line 364: 299\n+        line 365: 317\n+        line 366: 339\n+        line 367: 359\n+        line 368: 383\n+        line 369: 386\n+        line 370: 402\n+        line 371: 423\n+        line 372: 441\n+        line 374: 457\n+        line 375: 466\n+        line 376: 484\n+        line 375: 499\n+        line 378: 503\n+        line 379: 513\n+        line 381: 526\n+        line 383: 543\n+        line 384: 566\n+        line 386: 597\n+        line 387: 615\n+        line 388: 634\n+        line 389: 640\n+        line 390: 658\n+        line 389: 666\n+        line 393: 670\n+        line 395: 690\n+        line 396: 700\n+        line 397: 707\n+        line 398: 733\n+        line 402: 761\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-          246     140     6 vSize   I\n-          460     310     6 resize   I\n-          640     130     7 vSize   I\n-            0     771     0  this   Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n-            0     771     1  data   [B\n-            0     771     2 offset   I\n-            0     771     3 length   I\n-           13     758     4 ivSize   I\n-          131     640     5 erdSize   I\n+            0     762     0  this   Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n+            0     762     1  data   [B\n+            0     762     2 offset   I\n+            0     762     3 length   I\n+           13     749     4 ivSize   I\n+          131     631     5 erdSize   I\n+          246     137     6 vSize   I\n+          457     304     6 resize   I\n+          634     127     7 vSize   I\n       StackMapTable: number_of_entries = 5\n         frame_type = 254 /* append */\n-          offset_delta = 302\n+          offset_delta = 299\n           locals = [ int, int, int ]\n         frame_type = 250 /* chop */\n           offset_delta = 86\n         frame_type = 252 /* append */\n-          offset_delta = 119\n+          offset_delta = 116\n           locals = [ int ]\n         frame_type = 252 /* append */\n-          offset_delta = 169\n+          offset_delta = 166\n           locals = [ int ]\n         frame_type = 249 /* chop */\n           offset_delta = 90\n-    Exceptions:\n-      throws java.util.zip.ZipException\n \n   public void parseFromLocalFileData(byte[], int, int) throws java.util.zip.ZipException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.util.zip.ZipException\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iload_3\n-         4: invokespecial #40                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromLocalFileData:([BII)V\n+         4: invokespecial #154                // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromLocalFileData:([BII)V\n          7: aload_0\n          8: aload_1\n          9: iload_2\n         10: iload_3\n-        11: invokevirtual #41                 // Method parseFileFormat:([BII)V\n+        11: invokevirtual #156                // Method parseFileFormat:([BII)V\n         14: return\n       LineNumberTable:\n         line 407: 0\n         line 408: 7\n         line 409: 14\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      15     0  this   Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n             0      15     1  data   [B\n             0      15     2 offset   I\n             0      15     3 length   I\n-    Exceptions:\n-      throws java.util.zip.ZipException\n \n   public void parseFromCentralDirectoryData(byte[], int, int) throws java.util.zip.ZipException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.util.zip.ZipException\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iload_3\n-         4: invokespecial #42                 // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromCentralDirectoryData:([BII)V\n+         4: invokespecial #159                // Method org/apache/commons/compress/archivers/zip/PKWareExtraHeader.parseFromCentralDirectoryData:([BII)V\n          7: aload_0\n          8: aload_1\n          9: iload_2\n         10: iload_3\n-        11: invokevirtual #43                 // Method parseCentralDirectoryFormat:([BII)V\n+        11: invokevirtual #161                // Method parseCentralDirectoryFormat:([BII)V\n         14: return\n       LineNumberTable:\n         line 414: 0\n         line 415: 7\n         line 416: 14\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      15     0  this   Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n             0      15     1  data   [B\n             0      15     2 offset   I\n             0      15     3 length   I\n-    Exceptions:\n-      throws java.util.zip.ZipException\n \n   private void assertDynamicLengthFits(java.lang.String, int, int, int) throws java.util.zip.ZipException;\n     descriptor: (Ljava/lang/String;III)V\n     flags: (0x0002) ACC_PRIVATE\n+    Exceptions:\n+      throws java.util.zip.ZipException\n     Code:\n-      stack=4, locals=5, args_size=5\n+      stack=5, locals=5, args_size=5\n          0: iload_3\n          1: iload_2\n          2: iadd\n          3: iload         4\n-         5: if_icmple     63\n-         8: new           #23                 // class java/util/zip/ZipException\n+         5: if_icmple     60\n+         8: new           #53                 // class java/util/zip/ZipException\n         11: dup\n-        12: new           #24                 // class java/lang/StringBuilder\n+        12: new           #112                // class java/lang/StringBuilder\n         15: dup\n-        16: invokespecial #25                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        19: ldc           #44                 // String Invalid X0017_StrongEncryptionHeader:\n-        21: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        24: aload_1\n-        25: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        28: ldc           #45                 // String\n-        30: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        33: iload_2\n-        34: invokevirtual #28                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        37: ldc           #46                 // String  doesn\\'t fit into\n-        39: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        42: iload         4\n-        44: invokevirtual #28                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        47: ldc           #47                 // String  bytes of data at position\n-        49: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        52: iload_3\n-        53: invokevirtual #28                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        56: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        59: invokespecial #31                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-        62: athrow\n-        63: return\n+        16: ldc           #163                // String Invalid X0017_StrongEncryptionHeader:\n+        18: invokespecial #116                // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+        21: aload_1\n+        22: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        25: ldc           #165                // String\n+        27: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        30: iload_2\n+        31: invokevirtual #119                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        34: ldc           #167                // String  doesn\\'t fit into\n+        36: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        39: iload         4\n+        41: invokevirtual #119                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        44: ldc           #169                // String  bytes of data at position\n+        46: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        49: iload_3\n+        50: invokevirtual #119                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        53: invokevirtual #128                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        56: invokespecial #132                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        59: athrow\n+        60: return\n       LineNumberTable:\n         line 420: 0\n         line 421: 8\n-        line 425: 63\n+        line 422: 30\n+        line 423: 49\n+        line 421: 56\n+        line 425: 60\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      64     0  this   Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n-            0      64     1  what   Ljava/lang/String;\n-            0      64     2 dynamicLength   I\n-            0      64     3 prefixLength   I\n-            0      64     4 length   I\n+            0      61     0  this   Lorg/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader;\n+            0      61     1  what   Ljava/lang/String;\n+            0      61     2 dynamicLength   I\n+            0      61     3 prefixLength   I\n+            0      61     4 length   I\n       StackMapTable: number_of_entries = 1\n-        frame_type = 63 /* same */\n-    Exceptions:\n-      throws java.util.zip.ZipException\n+        frame_type = 60 /* same */\n }\n SourceFile: \"X0017_StrongEncryptionHeader.java\"\n InnerClasses:\n-  public static final #54= #53 of #49;    // EncryptionAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n-  public static final #63= #62 of #49;    // HashAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+  public static final #178= #66 of #3;    // EncryptionAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n+  public static final #179= #81 of #3;    // HashAlgorithm=class org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm of class org/apache/commons/compress/archivers/zip/PKWareExtraHeader\n"}]}
