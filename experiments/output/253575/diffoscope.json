{"diffoscope-json-version": 1, "source1": "first/HeaderCheck.class", "source2": "second/HeaderCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,24 +14,24 @@\n     public static final String MSG_MISMATCH = \"header.mismatch\";\n     private BitSet ignoreLines;\n     \n     public HeaderCheck() {\n         this.ignoreLines = new BitSet();\n     }\n     \n-    private boolean isIgnoreLine(final int lineNo) {\n-        return this.ignoreLines.get(lineNo);\n+    private boolean isIgnoreLine(final int bitIndex) {\n+        return this.ignoreLines.get(bitIndex);\n     }\n     \n-    private boolean isMatch(final int lineNumber, final String line) {\n-        return this.isIgnoreLine(lineNumber + 1) || ((String)this.getHeaderLines().get(lineNumber)).equals(line);\n+    private boolean isMatch(final int n, final String anObject) {\n+        return this.isIgnoreLine(n + 1) || ((String)this.getHeaderLines().get(n)).equals(anObject);\n     }\n     \n-    public void setIgnoreLines(final int... lines) {\n-        this.ignoreLines = TokenUtil.asBitSet(lines);\n+    public void setIgnoreLines(final int... array) {\n+        this.ignoreLines = TokenUtil.asBitSet(array);\n     }\n     \n     protected void processFiltered(final File file, final FileText fileText) {\n         if (this.getHeaderLines().size() > fileText.size()) {\n             this.log(1, \"header.missing\", new Object[0]);\n         }\n         else {\n"}]}
