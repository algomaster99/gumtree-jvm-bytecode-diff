{"diffoscope-json-version": 1, "source1": "first/StackMapEntry.class", "source2": "second/StackMapEntry.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,276 +1,271 @@\n-  SHA-256 checksum eaad10814ee59f7500c006e95d32f2353b4ce5f52c62b2f89267f1b98ee8b44d\n+  SHA-256 checksum c78c601e7e49d02914b0b67f1a4559a9e048645ea6420c944ee6090624a56596\n   Compiled from \"StackMapEntry.java\"\n public final class org.apache.bcel.classfile.StackMapEntry implements org.apache.bcel.classfile.Node,java.lang.Cloneable\n   minor version: 0\n   major version: 52\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n   this_class: #28                         // org/apache/bcel/classfile/StackMapEntry\n   super_class: #67                        // java/lang/Object\n   interfaces: 2, fields: 6, methods: 27, attributes: 3\n Constant pool:\n-    #1 = InterfaceMethodref #137.#138     // java/io/DataInput.readByte:()B\n-    #2 = Methodref          #28.#139      // org/apache/bcel/classfile/StackMapEntry.\"<init>\":(II[Lorg/apache/bcel/classfile/StackMapType;[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n-    #3 = Fieldref           #28.#140      // org/apache/bcel/classfile/StackMapEntry.frameType:I\n-    #4 = Class              #141          // org/apache/bcel/Const\n-    #5 = Fieldref           #28.#142      // org/apache/bcel/classfile/StackMapEntry.byteCodeOffset:I\n-    #6 = Class              #143          // org/apache/bcel/classfile/StackMapType\n-    #7 = Fieldref           #28.#144      // org/apache/bcel/classfile/StackMapEntry.typesOfStackItems:[Lorg/apache/bcel/classfile/StackMapType;\n-    #8 = Methodref          #6.#145       // org/apache/bcel/classfile/StackMapType.\"<init>\":(Ljava/io/DataInput;Lorg/apache/bcel/classfile/ConstantPool;)V\n-    #9 = InterfaceMethodref #137.#146     // java/io/DataInput.readShort:()S\n-   #10 = Fieldref           #28.#147      // org/apache/bcel/classfile/StackMapEntry.typesOfLocals:[Lorg/apache/bcel/classfile/StackMapType;\n-   #11 = Class              #148          // org/apache/bcel/classfile/ClassFormatException\n-   #12 = Class              #149          // java/lang/StringBuilder\n-   #13 = Methodref          #12.#150      // java/lang/StringBuilder.\"<init>\":()V\n-   #14 = String             #151          // Invalid frame type found while parsing stack map table:\n-   #15 = Methodref          #12.#152      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #16 = Methodref          #12.#153      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #17 = Methodref          #12.#154      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #18 = Methodref          #11.#155      // org/apache/bcel/classfile/ClassFormatException.\"<init>\":(Ljava/lang/String;)V\n-   #19 = Methodref          #67.#150      // java/lang/Object.\"<init>\":()V\n-   #20 = Fieldref           #28.#156      // org/apache/bcel/classfile/StackMapEntry.EMPTY_STACK_MAP_TYPE_ARRAY:[Lorg/apache/bcel/classfile/StackMapType;\n-   #21 = Fieldref           #28.#157      // org/apache/bcel/classfile/StackMapEntry.constantPool:Lorg/apache/bcel/classfile/ConstantPool;\n-   #22 = Class              #158          // java/lang/IllegalArgumentException\n-   #23 = String             #159          // numberOfLocals < 0\n-   #24 = Methodref          #22.#155      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #25 = String             #160          // numberOfStackItems < 0\n-   #26 = InterfaceMethodref #161.#162     // org/apache/bcel/classfile/Visitor.visitStackMapEntry:(Lorg/apache/bcel/classfile/StackMapEntry;)V\n-   #27 = Methodref          #67.#163      // java/lang/Object.clone:()Ljava/lang/Object;\n-   #28 = Class              #164          // org/apache/bcel/classfile/StackMapEntry\n-   #29 = Class              #165          // java/lang/CloneNotSupportedException\n-   #30 = Class              #166          // java/lang/Error\n-   #31 = String             #167          // Clone Not Supported\n-   #32 = Methodref          #30.#155      // java/lang/Error.\"<init>\":(Ljava/lang/String;)V\n-   #33 = InvokeDynamic      #0:#173       // #0:apply:(Lorg/apache/bcel/classfile/StackMapEntry;)Ljava/util/function/IntFunction;\n-   #34 = Methodref          #174.#175     // java/util/Arrays.setAll:([Ljava/lang/Object;Ljava/util/function/IntFunction;)V\n-   #35 = InvokeDynamic      #1:#173       // #1:apply:(Lorg/apache/bcel/classfile/StackMapEntry;)Ljava/util/function/IntFunction;\n-   #36 = Methodref          #177.#178     // java/io/DataOutputStream.write:(I)V\n-   #37 = Methodref          #6.#179       // org/apache/bcel/classfile/StackMapType.dump:(Ljava/io/DataOutputStream;)V\n-   #38 = Methodref          #177.#180     // java/io/DataOutputStream.writeShort:(I)V\n-   #39 = String             #181          // Invalid Stack map table tag:\n-   #40 = Methodref          #6.#182       // org/apache/bcel/classfile/StackMapType.hasIndex:()Z\n-   #41 = Class              #183          // java/lang/IllegalStateException\n-   #42 = String             #184          // Invalid StackMap frameType:\n-   #43 = Methodref          #41.#155      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-   #44 = String             #185          // Invalid StackMap offset:\n-   #45 = Methodref          #28.#186      // org/apache/bcel/classfile/StackMapEntry.invalidFrameType:(I)Z\n-   #46 = String             #187          // Invalid StackMap frameType\n-   #47 = Methodref          #12.#188      // java/lang/StringBuilder.\"<init>\":(I)V\n-   #48 = String             #189          // (\n-   #49 = String             #190          // SAME\n-   #50 = String             #191          // SAME_LOCALS_1_STACK\n-   #51 = String             #192          // SAME_LOCALS_1_STACK_EXTENDED\n-   #52 = String             #193          // CHOP\n-   #53 = Methodref          #194.#195     // java/lang/String.valueOf:(I)Ljava/lang/String;\n-   #54 = String             #196          // SAME_EXTENDED\n-   #55 = String             #197          // APPEND\n-   #56 = String             #198          // FULL\n-   #57 = String             #199          // UNKNOWN (\n-   #58 = String             #200          // )\n-   #59 = String             #201          // , offset delta=\n-   #60 = String             #202          // , locals={\n-   #61 = Methodref          #12.#203      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #62 = String             #204          // ,\n-   #63 = String             #205          // }\n-   #64 = String             #206          // , stack items={\n-   #65 = Methodref          #28.#207      // org/apache/bcel/classfile/StackMapEntry.setByteCodeOffset:(I)V\n-   #66 = Methodref          #6.#208       // org/apache/bcel/classfile/StackMapType.copy:()Lorg/apache/bcel/classfile/StackMapType;\n-   #67 = Class              #209          // java/lang/Object\n-   #68 = Class              #210          // org/apache/bcel/classfile/Node\n-   #69 = Class              #211          // java/lang/Cloneable\n+    #1 = InterfaceMethodref #84.#133      // java/io/DataInput.readByte:()B\n+    #2 = Methodref          #28.#134      // org/apache/bcel/classfile/StackMapEntry.\"<init>\":(II[Lorg/apache/bcel/classfile/StackMapType;[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n+    #3 = Fieldref           #28.#135      // org/apache/bcel/classfile/StackMapEntry.frameType:I\n+    #4 = Class              #136          // org/apache/bcel/Const\n+    #5 = Fieldref           #28.#137      // org/apache/bcel/classfile/StackMapEntry.byteCodeOffset:I\n+    #6 = Class              #138          // org/apache/bcel/classfile/StackMapType\n+    #7 = Fieldref           #28.#139      // org/apache/bcel/classfile/StackMapEntry.typesOfStackItems:[Lorg/apache/bcel/classfile/StackMapType;\n+    #8 = Methodref          #6.#140       // org/apache/bcel/classfile/StackMapType.\"<init>\":(Ljava/io/DataInput;Lorg/apache/bcel/classfile/ConstantPool;)V\n+    #9 = InterfaceMethodref #84.#141      // java/io/DataInput.readShort:()S\n+   #10 = Fieldref           #28.#142      // org/apache/bcel/classfile/StackMapEntry.typesOfLocals:[Lorg/apache/bcel/classfile/StackMapType;\n+   #11 = Class              #143          // org/apache/bcel/classfile/ClassFormatException\n+   #12 = Class              #144          // java/lang/StringBuilder\n+   #13 = Methodref          #12.#145      // java/lang/StringBuilder.\"<init>\":()V\n+   #14 = String             #146          // Invalid frame type found while parsing stack map table:\n+   #15 = Methodref          #12.#147      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #16 = Methodref          #12.#148      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #17 = Methodref          #12.#149      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #18 = Methodref          #11.#150      // org/apache/bcel/classfile/ClassFormatException.\"<init>\":(Ljava/lang/String;)V\n+   #19 = Methodref          #67.#145      // java/lang/Object.\"<init>\":()V\n+   #20 = Fieldref           #28.#151      // org/apache/bcel/classfile/StackMapEntry.EMPTY_STACK_MAP_TYPE_ARRAY:[Lorg/apache/bcel/classfile/StackMapType;\n+   #21 = Fieldref           #28.#152      // org/apache/bcel/classfile/StackMapEntry.constantPool:Lorg/apache/bcel/classfile/ConstantPool;\n+   #22 = Class              #153          // java/lang/IllegalArgumentException\n+   #23 = String             #154          // numberOfLocals < 0\n+   #24 = Methodref          #22.#150      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #25 = String             #155          // numberOfStackItems < 0\n+   #26 = InterfaceMethodref #156.#157     // org/apache/bcel/classfile/Visitor.visitStackMapEntry:(Lorg/apache/bcel/classfile/StackMapEntry;)V\n+   #27 = Methodref          #67.#158      // java/lang/Object.clone:()Ljava/lang/Object;\n+   #28 = Class              #159          // org/apache/bcel/classfile/StackMapEntry\n+   #29 = Class              #160          // java/lang/CloneNotSupportedException\n+   #30 = Class              #161          // java/lang/Error\n+   #31 = String             #162          // Clone Not Supported\n+   #32 = Methodref          #30.#150      // java/lang/Error.\"<init>\":(Ljava/lang/String;)V\n+   #33 = InvokeDynamic      #0:#168       // #0:apply:(Lorg/apache/bcel/classfile/StackMapEntry;)Ljava/util/function/IntFunction;\n+   #34 = Methodref          #169.#170     // java/util/Arrays.setAll:([Ljava/lang/Object;Ljava/util/function/IntFunction;)V\n+   #35 = InvokeDynamic      #1:#168       // #1:apply:(Lorg/apache/bcel/classfile/StackMapEntry;)Ljava/util/function/IntFunction;\n+   #36 = Methodref          #172.#173     // java/io/DataOutputStream.write:(I)V\n+   #37 = Methodref          #6.#174       // org/apache/bcel/classfile/StackMapType.dump:(Ljava/io/DataOutputStream;)V\n+   #38 = Methodref          #172.#175     // java/io/DataOutputStream.writeShort:(I)V\n+   #39 = String             #176          // Invalid Stack map table tag:\n+   #40 = Methodref          #6.#177       // org/apache/bcel/classfile/StackMapType.hasIndex:()Z\n+   #41 = Class              #178          // java/lang/IllegalStateException\n+   #42 = String             #179          // Invalid StackMap frameType:\n+   #43 = Methodref          #41.#150      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+   #44 = String             #180          // Invalid StackMap offset:\n+   #45 = Methodref          #28.#181      // org/apache/bcel/classfile/StackMapEntry.invalidFrameType:(I)Z\n+   #46 = String             #182          // Invalid StackMap frameType\n+   #47 = Methodref          #12.#183      // java/lang/StringBuilder.\"<init>\":(I)V\n+   #48 = String             #184          // (\n+   #49 = String             #185          // SAME\n+   #50 = String             #186          // SAME_LOCALS_1_STACK\n+   #51 = String             #187          // SAME_LOCALS_1_STACK_EXTENDED\n+   #52 = String             #188          // CHOP\n+   #53 = Methodref          #189.#190     // java/lang/String.valueOf:(I)Ljava/lang/String;\n+   #54 = String             #191          // SAME_EXTENDED\n+   #55 = String             #192          // APPEND\n+   #56 = String             #193          // FULL\n+   #57 = String             #194          // UNKNOWN (\n+   #58 = String             #195          // )\n+   #59 = String             #196          // , offset delta=\n+   #60 = String             #197          // , locals={\n+   #61 = Methodref          #12.#198      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #62 = String             #199          // ,\n+   #63 = String             #200          // }\n+   #64 = String             #201          // , stack items={\n+   #65 = Methodref          #28.#202      // org/apache/bcel/classfile/StackMapEntry.setByteCodeOffset:(I)V\n+   #66 = Methodref          #6.#203       // org/apache/bcel/classfile/StackMapType.copy:()Lorg/apache/bcel/classfile/StackMapType;\n+   #67 = Class              #204          // java/lang/Object\n+   #68 = Class              #205          // org/apache/bcel/classfile/Node\n+   #69 = Class              #206          // java/lang/Cloneable\n    #70 = Utf8               EMPTY_STACK_MAP_TYPE_ARRAY\n    #71 = Utf8               [Lorg/apache/bcel/classfile/StackMapType;\n    #72 = Utf8               frameType\n    #73 = Utf8               I\n    #74 = Utf8               byteCodeOffset\n    #75 = Utf8               typesOfLocals\n    #76 = Utf8               typesOfStackItems\n    #77 = Utf8               constantPool\n    #78 = Utf8               Lorg/apache/bcel/classfile/ConstantPool;\n    #79 = Utf8               <init>\n    #80 = Utf8               (Ljava/io/DataInput;Lorg/apache/bcel/classfile/ConstantPool;)V\n    #81 = Utf8               Code\n    #82 = Utf8               LineNumberTable\n    #83 = Utf8               StackMapTable\n-   #84 = Class              #164          // org/apache/bcel/classfile/StackMapEntry\n-   #85 = Class              #212          // java/io/DataInput\n-   #86 = Class              #213          // org/apache/bcel/classfile/ConstantPool\n-   #87 = Utf8               Exceptions\n-   #88 = Class              #214          // java/io/IOException\n-   #89 = Utf8               (II[Lorg/apache/bcel/classfile/StackMapType;I[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n-   #90 = Class              #71           // \"[Lorg/apache/bcel/classfile/StackMapType;\"\n-   #91 = Utf8               Deprecated\n-   #92 = Utf8               RuntimeVisibleAnnotations\n-   #93 = Utf8               Ljava/lang/Deprecated;\n-   #94 = Utf8               (II[Lorg/apache/bcel/classfile/StackMapType;[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n-   #95 = Utf8               accept\n-   #96 = Utf8               (Lorg/apache/bcel/classfile/Visitor;)V\n-   #97 = Utf8               copy\n-   #98 = Utf8               ()Lorg/apache/bcel/classfile/StackMapEntry;\n-   #99 = Class              #165          // java/lang/CloneNotSupportedException\n-  #100 = Utf8               dump\n-  #101 = Utf8               (Ljava/io/DataOutputStream;)V\n-  #102 = Utf8               getByteCodeOffset\n-  #103 = Utf8               ()I\n-  #104 = Utf8               getConstantPool\n-  #105 = Utf8               ()Lorg/apache/bcel/classfile/ConstantPool;\n-  #106 = Utf8               getFrameType\n-  #107 = Utf8               getMapEntrySize\n-  #108 = Class              #143          // org/apache/bcel/classfile/StackMapType\n-  #109 = Utf8               getNumberOfLocals\n-  #110 = Utf8               getNumberOfStackItems\n-  #111 = Utf8               getTypesOfLocals\n-  #112 = Utf8               ()[Lorg/apache/bcel/classfile/StackMapType;\n-  #113 = Utf8               getTypesOfStackItems\n-  #114 = Utf8               invalidFrameType\n-  #115 = Utf8               (I)Z\n-  #116 = Utf8               setByteCodeOffset\n-  #117 = Utf8               (I)V\n-  #118 = Utf8               setConstantPool\n-  #119 = Utf8               (Lorg/apache/bcel/classfile/ConstantPool;)V\n-  #120 = Utf8               setFrameType\n-  #121 = Utf8               setNumberOfLocals\n-  #122 = Utf8               setNumberOfStackItems\n-  #123 = Utf8               setTypesOfLocals\n-  #124 = Utf8               ([Lorg/apache/bcel/classfile/StackMapType;)V\n-  #125 = Utf8               setTypesOfStackItems\n-  #126 = Utf8               toString\n-  #127 = Utf8               ()Ljava/lang/String;\n-  #128 = Class              #149          // java/lang/StringBuilder\n-  #129 = Utf8               updateByteCodeOffset\n-  #130 = Utf8               lambda$copy$1\n-  #131 = Utf8               (I)Lorg/apache/bcel/classfile/StackMapType;\n-  #132 = Utf8               lambda$copy$0\n-  #133 = Utf8               <clinit>\n-  #134 = Utf8               ()V\n-  #135 = Utf8               SourceFile\n-  #136 = Utf8               StackMapEntry.java\n-  #137 = Class              #212          // java/io/DataInput\n-  #138 = NameAndType        #215:#216     // readByte:()B\n-  #139 = NameAndType        #79:#94       // \"<init>\":(II[Lorg/apache/bcel/classfile/StackMapType;[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n-  #140 = NameAndType        #72:#73       // frameType:I\n-  #141 = Utf8               org/apache/bcel/Const\n-  #142 = NameAndType        #74:#73       // byteCodeOffset:I\n-  #143 = Utf8               org/apache/bcel/classfile/StackMapType\n-  #144 = NameAndType        #76:#71       // typesOfStackItems:[Lorg/apache/bcel/classfile/StackMapType;\n-  #145 = NameAndType        #79:#80       // \"<init>\":(Ljava/io/DataInput;Lorg/apache/bcel/classfile/ConstantPool;)V\n-  #146 = NameAndType        #217:#218     // readShort:()S\n-  #147 = NameAndType        #75:#71       // typesOfLocals:[Lorg/apache/bcel/classfile/StackMapType;\n-  #148 = Utf8               org/apache/bcel/classfile/ClassFormatException\n-  #149 = Utf8               java/lang/StringBuilder\n-  #150 = NameAndType        #79:#134      // \"<init>\":()V\n-  #151 = Utf8               Invalid frame type found while parsing stack map table:\n-  #152 = NameAndType        #219:#220     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #153 = NameAndType        #219:#221     // append:(I)Ljava/lang/StringBuilder;\n-  #154 = NameAndType        #126:#127     // toString:()Ljava/lang/String;\n-  #155 = NameAndType        #79:#222      // \"<init>\":(Ljava/lang/String;)V\n-  #156 = NameAndType        #70:#71       // EMPTY_STACK_MAP_TYPE_ARRAY:[Lorg/apache/bcel/classfile/StackMapType;\n-  #157 = NameAndType        #77:#78       // constantPool:Lorg/apache/bcel/classfile/ConstantPool;\n-  #158 = Utf8               java/lang/IllegalArgumentException\n-  #159 = Utf8               numberOfLocals < 0\n-  #160 = Utf8               numberOfStackItems < 0\n-  #161 = Class              #223          // org/apache/bcel/classfile/Visitor\n-  #162 = NameAndType        #224:#225     // visitStackMapEntry:(Lorg/apache/bcel/classfile/StackMapEntry;)V\n-  #163 = NameAndType        #226:#227     // clone:()Ljava/lang/Object;\n-  #164 = Utf8               org/apache/bcel/classfile/StackMapEntry\n-  #165 = Utf8               java/lang/CloneNotSupportedException\n-  #166 = Utf8               java/lang/Error\n-  #167 = Utf8               Clone Not Supported\n-  #168 = Utf8               BootstrapMethods\n-  #169 = MethodHandle       6:#228        // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #170 = MethodType         #229          //  (I)Ljava/lang/Object;\n-  #171 = MethodHandle       7:#230        // REF_invokeSpecial org/apache/bcel/classfile/StackMapEntry.lambda$copy$0:(I)Lorg/apache/bcel/classfile/StackMapType;\n-  #172 = MethodType         #131          //  (I)Lorg/apache/bcel/classfile/StackMapType;\n-  #173 = NameAndType        #231:#232     // apply:(Lorg/apache/bcel/classfile/StackMapEntry;)Ljava/util/function/IntFunction;\n-  #174 = Class              #233          // java/util/Arrays\n-  #175 = NameAndType        #234:#235     // setAll:([Ljava/lang/Object;Ljava/util/function/IntFunction;)V\n-  #176 = MethodHandle       7:#236        // REF_invokeSpecial org/apache/bcel/classfile/StackMapEntry.lambda$copy$1:(I)Lorg/apache/bcel/classfile/StackMapType;\n-  #177 = Class              #237          // java/io/DataOutputStream\n-  #178 = NameAndType        #238:#117     // write:(I)V\n-  #179 = NameAndType        #100:#101     // dump:(Ljava/io/DataOutputStream;)V\n-  #180 = NameAndType        #239:#117     // writeShort:(I)V\n-  #181 = Utf8               Invalid Stack map table tag:\n-  #182 = NameAndType        #240:#241     // hasIndex:()Z\n-  #183 = Utf8               java/lang/IllegalStateException\n-  #184 = Utf8               Invalid StackMap frameType:\n-  #185 = Utf8               Invalid StackMap offset:\n-  #186 = NameAndType        #114:#115     // invalidFrameType:(I)Z\n-  #187 = Utf8               Invalid StackMap frameType\n-  #188 = NameAndType        #79:#117      // \"<init>\":(I)V\n-  #189 = Utf8               (\n-  #190 = Utf8               SAME\n-  #191 = Utf8               SAME_LOCALS_1_STACK\n-  #192 = Utf8               SAME_LOCALS_1_STACK_EXTENDED\n-  #193 = Utf8               CHOP\n-  #194 = Class              #242          // java/lang/String\n-  #195 = NameAndType        #243:#244     // valueOf:(I)Ljava/lang/String;\n-  #196 = Utf8               SAME_EXTENDED\n-  #197 = Utf8               APPEND\n-  #198 = Utf8               FULL\n-  #199 = Utf8               UNKNOWN (\n-  #200 = Utf8               )\n-  #201 = Utf8               , offset delta=\n-  #202 = Utf8               , locals={\n-  #203 = NameAndType        #219:#245     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #204 = Utf8               ,\n-  #205 = Utf8               }\n-  #206 = Utf8               , stack items={\n-  #207 = NameAndType        #116:#117     // setByteCodeOffset:(I)V\n-  #208 = NameAndType        #97:#246      // copy:()Lorg/apache/bcel/classfile/StackMapType;\n-  #209 = Utf8               java/lang/Object\n-  #210 = Utf8               org/apache/bcel/classfile/Node\n-  #211 = Utf8               java/lang/Cloneable\n-  #212 = Utf8               java/io/DataInput\n-  #213 = Utf8               org/apache/bcel/classfile/ConstantPool\n-  #214 = Utf8               java/io/IOException\n-  #215 = Utf8               readByte\n-  #216 = Utf8               ()B\n-  #217 = Utf8               readShort\n-  #218 = Utf8               ()S\n-  #219 = Utf8               append\n-  #220 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #221 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #222 = Utf8               (Ljava/lang/String;)V\n-  #223 = Utf8               org/apache/bcel/classfile/Visitor\n-  #224 = Utf8               visitStackMapEntry\n-  #225 = Utf8               (Lorg/apache/bcel/classfile/StackMapEntry;)V\n-  #226 = Utf8               clone\n-  #227 = Utf8               ()Ljava/lang/Object;\n-  #228 = Methodref          #247.#248     // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #229 = Utf8               (I)Ljava/lang/Object;\n-  #230 = Methodref          #28.#249      // org/apache/bcel/classfile/StackMapEntry.lambda$copy$0:(I)Lorg/apache/bcel/classfile/StackMapType;\n-  #231 = Utf8               apply\n-  #232 = Utf8               (Lorg/apache/bcel/classfile/StackMapEntry;)Ljava/util/function/IntFunction;\n-  #233 = Utf8               java/util/Arrays\n-  #234 = Utf8               setAll\n-  #235 = Utf8               ([Ljava/lang/Object;Ljava/util/function/IntFunction;)V\n-  #236 = Methodref          #28.#250      // org/apache/bcel/classfile/StackMapEntry.lambda$copy$1:(I)Lorg/apache/bcel/classfile/StackMapType;\n-  #237 = Utf8               java/io/DataOutputStream\n-  #238 = Utf8               write\n-  #239 = Utf8               writeShort\n-  #240 = Utf8               hasIndex\n-  #241 = Utf8               ()Z\n-  #242 = Utf8               java/lang/String\n-  #243 = Utf8               valueOf\n-  #244 = Utf8               (I)Ljava/lang/String;\n-  #245 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #246 = Utf8               ()Lorg/apache/bcel/classfile/StackMapType;\n-  #247 = Class              #251          // java/lang/invoke/LambdaMetafactory\n-  #248 = NameAndType        #252:#256     // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #249 = NameAndType        #132:#131     // lambda$copy$0:(I)Lorg/apache/bcel/classfile/StackMapType;\n-  #250 = NameAndType        #130:#131     // lambda$copy$1:(I)Lorg/apache/bcel/classfile/StackMapType;\n-  #251 = Utf8               java/lang/invoke/LambdaMetafactory\n-  #252 = Utf8               metafactory\n-  #253 = Class              #258          // java/lang/invoke/MethodHandles$Lookup\n-  #254 = Utf8               Lookup\n-  #255 = Utf8               InnerClasses\n-  #256 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #257 = Class              #259          // java/lang/invoke/MethodHandles\n-  #258 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #259 = Utf8               java/lang/invoke/MethodHandles\n+   #84 = Class              #207          // java/io/DataInput\n+   #85 = Class              #208          // org/apache/bcel/classfile/ConstantPool\n+   #86 = Utf8               Exceptions\n+   #87 = Class              #209          // java/io/IOException\n+   #88 = Utf8               (II[Lorg/apache/bcel/classfile/StackMapType;I[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n+   #89 = Class              #71           // \"[Lorg/apache/bcel/classfile/StackMapType;\"\n+   #90 = Utf8               Deprecated\n+   #91 = Utf8               RuntimeVisibleAnnotations\n+   #92 = Utf8               Ljava/lang/Deprecated;\n+   #93 = Utf8               (II[Lorg/apache/bcel/classfile/StackMapType;[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n+   #94 = Utf8               accept\n+   #95 = Utf8               (Lorg/apache/bcel/classfile/Visitor;)V\n+   #96 = Utf8               copy\n+   #97 = Utf8               ()Lorg/apache/bcel/classfile/StackMapEntry;\n+   #98 = Utf8               dump\n+   #99 = Utf8               (Ljava/io/DataOutputStream;)V\n+  #100 = Utf8               getByteCodeOffset\n+  #101 = Utf8               ()I\n+  #102 = Utf8               getConstantPool\n+  #103 = Utf8               ()Lorg/apache/bcel/classfile/ConstantPool;\n+  #104 = Utf8               getFrameType\n+  #105 = Utf8               getMapEntrySize\n+  #106 = Utf8               getNumberOfLocals\n+  #107 = Utf8               getNumberOfStackItems\n+  #108 = Utf8               getTypesOfLocals\n+  #109 = Utf8               ()[Lorg/apache/bcel/classfile/StackMapType;\n+  #110 = Utf8               getTypesOfStackItems\n+  #111 = Utf8               invalidFrameType\n+  #112 = Utf8               (I)Z\n+  #113 = Utf8               setByteCodeOffset\n+  #114 = Utf8               (I)V\n+  #115 = Utf8               setConstantPool\n+  #116 = Utf8               (Lorg/apache/bcel/classfile/ConstantPool;)V\n+  #117 = Utf8               setFrameType\n+  #118 = Utf8               setNumberOfLocals\n+  #119 = Utf8               setNumberOfStackItems\n+  #120 = Utf8               setTypesOfLocals\n+  #121 = Utf8               ([Lorg/apache/bcel/classfile/StackMapType;)V\n+  #122 = Utf8               setTypesOfStackItems\n+  #123 = Utf8               toString\n+  #124 = Utf8               ()Ljava/lang/String;\n+  #125 = Utf8               updateByteCodeOffset\n+  #126 = Utf8               lambda$copy$1\n+  #127 = Utf8               (I)Lorg/apache/bcel/classfile/StackMapType;\n+  #128 = Utf8               lambda$copy$0\n+  #129 = Utf8               <clinit>\n+  #130 = Utf8               ()V\n+  #131 = Utf8               SourceFile\n+  #132 = Utf8               StackMapEntry.java\n+  #133 = NameAndType        #210:#211     // readByte:()B\n+  #134 = NameAndType        #79:#93       // \"<init>\":(II[Lorg/apache/bcel/classfile/StackMapType;[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n+  #135 = NameAndType        #72:#73       // frameType:I\n+  #136 = Utf8               org/apache/bcel/Const\n+  #137 = NameAndType        #74:#73       // byteCodeOffset:I\n+  #138 = Utf8               org/apache/bcel/classfile/StackMapType\n+  #139 = NameAndType        #76:#71       // typesOfStackItems:[Lorg/apache/bcel/classfile/StackMapType;\n+  #140 = NameAndType        #79:#80       // \"<init>\":(Ljava/io/DataInput;Lorg/apache/bcel/classfile/ConstantPool;)V\n+  #141 = NameAndType        #212:#213     // readShort:()S\n+  #142 = NameAndType        #75:#71       // typesOfLocals:[Lorg/apache/bcel/classfile/StackMapType;\n+  #143 = Utf8               org/apache/bcel/classfile/ClassFormatException\n+  #144 = Utf8               java/lang/StringBuilder\n+  #145 = NameAndType        #79:#130      // \"<init>\":()V\n+  #146 = Utf8               Invalid frame type found while parsing stack map table:\n+  #147 = NameAndType        #214:#215     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #148 = NameAndType        #214:#216     // append:(I)Ljava/lang/StringBuilder;\n+  #149 = NameAndType        #123:#124     // toString:()Ljava/lang/String;\n+  #150 = NameAndType        #79:#217      // \"<init>\":(Ljava/lang/String;)V\n+  #151 = NameAndType        #70:#71       // EMPTY_STACK_MAP_TYPE_ARRAY:[Lorg/apache/bcel/classfile/StackMapType;\n+  #152 = NameAndType        #77:#78       // constantPool:Lorg/apache/bcel/classfile/ConstantPool;\n+  #153 = Utf8               java/lang/IllegalArgumentException\n+  #154 = Utf8               numberOfLocals < 0\n+  #155 = Utf8               numberOfStackItems < 0\n+  #156 = Class              #218          // org/apache/bcel/classfile/Visitor\n+  #157 = NameAndType        #219:#220     // visitStackMapEntry:(Lorg/apache/bcel/classfile/StackMapEntry;)V\n+  #158 = NameAndType        #221:#222     // clone:()Ljava/lang/Object;\n+  #159 = Utf8               org/apache/bcel/classfile/StackMapEntry\n+  #160 = Utf8               java/lang/CloneNotSupportedException\n+  #161 = Utf8               java/lang/Error\n+  #162 = Utf8               Clone Not Supported\n+  #163 = Utf8               BootstrapMethods\n+  #164 = MethodHandle       6:#223        // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #165 = MethodType         #224          //  (I)Ljava/lang/Object;\n+  #166 = MethodHandle       7:#225        // REF_invokeSpecial org/apache/bcel/classfile/StackMapEntry.lambda$copy$0:(I)Lorg/apache/bcel/classfile/StackMapType;\n+  #167 = MethodType         #127          //  (I)Lorg/apache/bcel/classfile/StackMapType;\n+  #168 = NameAndType        #226:#227     // apply:(Lorg/apache/bcel/classfile/StackMapEntry;)Ljava/util/function/IntFunction;\n+  #169 = Class              #228          // java/util/Arrays\n+  #170 = NameAndType        #229:#230     // setAll:([Ljava/lang/Object;Ljava/util/function/IntFunction;)V\n+  #171 = MethodHandle       7:#231        // REF_invokeSpecial org/apache/bcel/classfile/StackMapEntry.lambda$copy$1:(I)Lorg/apache/bcel/classfile/StackMapType;\n+  #172 = Class              #232          // java/io/DataOutputStream\n+  #173 = NameAndType        #233:#114     // write:(I)V\n+  #174 = NameAndType        #98:#99       // dump:(Ljava/io/DataOutputStream;)V\n+  #175 = NameAndType        #234:#114     // writeShort:(I)V\n+  #176 = Utf8               Invalid Stack map table tag:\n+  #177 = NameAndType        #235:#236     // hasIndex:()Z\n+  #178 = Utf8               java/lang/IllegalStateException\n+  #179 = Utf8               Invalid StackMap frameType:\n+  #180 = Utf8               Invalid StackMap offset:\n+  #181 = NameAndType        #111:#112     // invalidFrameType:(I)Z\n+  #182 = Utf8               Invalid StackMap frameType\n+  #183 = NameAndType        #79:#114      // \"<init>\":(I)V\n+  #184 = Utf8               (\n+  #185 = Utf8               SAME\n+  #186 = Utf8               SAME_LOCALS_1_STACK\n+  #187 = Utf8               SAME_LOCALS_1_STACK_EXTENDED\n+  #188 = Utf8               CHOP\n+  #189 = Class              #237          // java/lang/String\n+  #190 = NameAndType        #238:#239     // valueOf:(I)Ljava/lang/String;\n+  #191 = Utf8               SAME_EXTENDED\n+  #192 = Utf8               APPEND\n+  #193 = Utf8               FULL\n+  #194 = Utf8               UNKNOWN (\n+  #195 = Utf8               )\n+  #196 = Utf8               , offset delta=\n+  #197 = Utf8               , locals={\n+  #198 = NameAndType        #214:#240     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #199 = Utf8               ,\n+  #200 = Utf8               }\n+  #201 = Utf8               , stack items={\n+  #202 = NameAndType        #113:#114     // setByteCodeOffset:(I)V\n+  #203 = NameAndType        #96:#241      // copy:()Lorg/apache/bcel/classfile/StackMapType;\n+  #204 = Utf8               java/lang/Object\n+  #205 = Utf8               org/apache/bcel/classfile/Node\n+  #206 = Utf8               java/lang/Cloneable\n+  #207 = Utf8               java/io/DataInput\n+  #208 = Utf8               org/apache/bcel/classfile/ConstantPool\n+  #209 = Utf8               java/io/IOException\n+  #210 = Utf8               readByte\n+  #211 = Utf8               ()B\n+  #212 = Utf8               readShort\n+  #213 = Utf8               ()S\n+  #214 = Utf8               append\n+  #215 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #216 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #217 = Utf8               (Ljava/lang/String;)V\n+  #218 = Utf8               org/apache/bcel/classfile/Visitor\n+  #219 = Utf8               visitStackMapEntry\n+  #220 = Utf8               (Lorg/apache/bcel/classfile/StackMapEntry;)V\n+  #221 = Utf8               clone\n+  #222 = Utf8               ()Ljava/lang/Object;\n+  #223 = Methodref          #242.#243     // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #224 = Utf8               (I)Ljava/lang/Object;\n+  #225 = Methodref          #28.#244      // org/apache/bcel/classfile/StackMapEntry.lambda$copy$0:(I)Lorg/apache/bcel/classfile/StackMapType;\n+  #226 = Utf8               apply\n+  #227 = Utf8               (Lorg/apache/bcel/classfile/StackMapEntry;)Ljava/util/function/IntFunction;\n+  #228 = Utf8               java/util/Arrays\n+  #229 = Utf8               setAll\n+  #230 = Utf8               ([Ljava/lang/Object;Ljava/util/function/IntFunction;)V\n+  #231 = Methodref          #28.#245      // org/apache/bcel/classfile/StackMapEntry.lambda$copy$1:(I)Lorg/apache/bcel/classfile/StackMapType;\n+  #232 = Utf8               java/io/DataOutputStream\n+  #233 = Utf8               write\n+  #234 = Utf8               writeShort\n+  #235 = Utf8               hasIndex\n+  #236 = Utf8               ()Z\n+  #237 = Utf8               java/lang/String\n+  #238 = Utf8               valueOf\n+  #239 = Utf8               (I)Ljava/lang/String;\n+  #240 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #241 = Utf8               ()Lorg/apache/bcel/classfile/StackMapType;\n+  #242 = Class              #246          // java/lang/invoke/LambdaMetafactory\n+  #243 = NameAndType        #247:#251     // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #244 = NameAndType        #128:#127     // lambda$copy$0:(I)Lorg/apache/bcel/classfile/StackMapType;\n+  #245 = NameAndType        #126:#127     // lambda$copy$1:(I)Lorg/apache/bcel/classfile/StackMapType;\n+  #246 = Utf8               java/lang/invoke/LambdaMetafactory\n+  #247 = Utf8               metafactory\n+  #248 = Class              #253          // java/lang/invoke/MethodHandles$Lookup\n+  #249 = Utf8               Lookup\n+  #250 = Utf8               InnerClasses\n+  #251 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #252 = Class              #254          // java/lang/invoke/MethodHandles\n+  #253 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #254 = Utf8               java/lang/invoke/MethodHandles\n {\n   private static final org.apache.bcel.classfile.StackMapType[] EMPTY_STACK_MAP_TYPE_ARRAY;\n     descriptor: [Lorg/apache/bcel/classfile/StackMapType;\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n \n   private int frameType;\n     descriptor: I\n@@ -636,15 +631,15 @@\n           offset_delta = 2\n           locals = [ class org/apache/bcel/classfile/StackMapEntry, int, int, class \"[Lorg/apache/bcel/classfile/StackMapType;\", int, class \"[Lorg/apache/bcel/classfile/StackMapType;\", class org/apache/bcel/classfile/ConstantPool ]\n           stack = [ class org/apache/bcel/classfile/StackMapEntry, class \"[Lorg/apache/bcel/classfile/StackMapType;\" ]\n         frame_type = 22 /* same */\n         frame_type = 14 /* same */\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #93()\n+      0: #92()\n         java.lang.Deprecated\n \n   public org.apache.bcel.classfile.StackMapEntry(int, int, org.apache.bcel.classfile.StackMapType[], org.apache.bcel.classfile.StackMapType[], org.apache.bcel.classfile.ConstantPool);\n     descriptor: (II[Lorg/apache/bcel/classfile/StackMapType;[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=6, args_size=6\n@@ -1570,28 +1565,28 @@\n     Code:\n       stack=0, locals=2, args_size=2\n          0: return\n       LineNumberTable:\n         line 331: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #93()\n+      0: #92()\n         java.lang.Deprecated\n \n   public void setNumberOfStackItems(int);\n     descriptor: (I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=0, locals=2, args_size=2\n          0: return\n       LineNumberTable:\n         line 339: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #93()\n+      0: #92()\n         java.lang.Deprecated\n \n   public void setTypesOfLocals(org.apache.bcel.classfile.StackMapType[]);\n     descriptor: ([Lorg/apache/bcel/classfile/StackMapType;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n@@ -1960,19 +1955,19 @@\n          4: putstatic     #20                 // Field EMPTY_STACK_MAP_TYPE_ARRAY:[Lorg/apache/bcel/classfile/StackMapType;\n          7: return\n       LineNumberTable:\n         line 39: 0\n }\n SourceFile: \"StackMapEntry.java\"\n InnerClasses:\n-  public static final #254= #253 of #257; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n+  public static final #249= #248 of #252; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #169 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  0: #164 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #170 (I)Ljava/lang/Object;\n-      #171 REF_invokeSpecial org/apache/bcel/classfile/StackMapEntry.lambda$copy$0:(I)Lorg/apache/bcel/classfile/StackMapType;\n-      #172 (I)Lorg/apache/bcel/classfile/StackMapType;\n-  1: #169 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+      #165 (I)Ljava/lang/Object;\n+      #166 REF_invokeSpecial org/apache/bcel/classfile/StackMapEntry.lambda$copy$0:(I)Lorg/apache/bcel/classfile/StackMapType;\n+      #167 (I)Lorg/apache/bcel/classfile/StackMapType;\n+  1: #164 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #170 (I)Ljava/lang/Object;\n-      #176 REF_invokeSpecial org/apache/bcel/classfile/StackMapEntry.lambda$copy$1:(I)Lorg/apache/bcel/classfile/StackMapType;\n-      #172 (I)Lorg/apache/bcel/classfile/StackMapType;\n+      #165 (I)Ljava/lang/Object;\n+      #171 REF_invokeSpecial org/apache/bcel/classfile/StackMapEntry.lambda$copy$1:(I)Lorg/apache/bcel/classfile/StackMapType;\n+      #167 (I)Lorg/apache/bcel/classfile/StackMapType;\n"}]}
