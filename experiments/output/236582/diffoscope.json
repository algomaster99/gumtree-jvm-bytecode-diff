{"diffoscope-json-version": 1, "source1": "first/NameFileFilter.class", "source2": "second/NameFileFilter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,84 +12,85 @@\n \n public class NameFileFilter extends AbstractFileFilter implements Serializable\n {\n     private static final long serialVersionUID = 176844364689077340L;\n     private final String[] names;\n     private final IOCase caseSensitivity;\n     \n-    public NameFileFilter(final List<String> names) {\n-        this(names, null);\n+    public NameFileFilter(final List<String> list) {\n+        this(list, null);\n     }\n     \n-    public NameFileFilter(final List<String> names, final IOCase caseSensitivity) {\n-        if (names == null) {\n+    public NameFileFilter(final List<String> list, final IOCase ioCase) {\n+        if (list == null) {\n             throw new IllegalArgumentException(\"The list of names must not be null\");\n         }\n-        this.names = names.toArray(NameFileFilter.EMPTY_STRING_ARRAY);\n-        this.caseSensitivity = this.toIOCase(caseSensitivity);\n+        this.names = list.toArray(NameFileFilter.EMPTY_STRING_ARRAY);\n+        this.caseSensitivity = this.toIOCase(ioCase);\n     }\n     \n-    public NameFileFilter(final String name) {\n-        this(name, IOCase.SENSITIVE);\n+    public NameFileFilter(final String s) {\n+        this(s, IOCase.SENSITIVE);\n     }\n     \n-    public NameFileFilter(final String... names) {\n-        this(names, IOCase.SENSITIVE);\n+    public NameFileFilter(final String... array) {\n+        this(array, IOCase.SENSITIVE);\n     }\n     \n-    public NameFileFilter(final String name, final IOCase caseSensitivity) {\n-        if (name == null) {\n+    public NameFileFilter(final String s, final IOCase ioCase) {\n+        if (s == null) {\n             throw new IllegalArgumentException(\"The wildcard must not be null\");\n         }\n-        this.names = new String[] { name };\n-        this.caseSensitivity = this.toIOCase(caseSensitivity);\n+        this.names = new String[] { s };\n+        this.caseSensitivity = this.toIOCase(ioCase);\n     }\n     \n-    public NameFileFilter(final String[] names, final IOCase caseSensitivity) {\n-        if (names == null) {\n+    public NameFileFilter(final String[] array, final IOCase ioCase) {\n+        if (array == null) {\n             throw new IllegalArgumentException(\"The array of names must not be null\");\n         }\n-        System.arraycopy(names, 0, this.names = new String[names.length], 0, names.length);\n-        this.caseSensitivity = this.toIOCase(caseSensitivity);\n+        System.arraycopy(array, 0, this.names = new String[array.length], 0, array.length);\n+        this.caseSensitivity = this.toIOCase(ioCase);\n     }\n     \n     public boolean accept(final File file) {\n         return this.acceptBaseName(file.getName());\n     }\n     \n-    public boolean accept(final File dir, final String name) {\n-        return this.acceptBaseName(name);\n+    public boolean accept(final File file, final String s) {\n+        return this.acceptBaseName(s);\n     }\n     \n-    public FileVisitResult accept(final Path file, final BasicFileAttributes attributes) {\n-        return toFileVisitResult(this.acceptBaseName(Objects.toString((Object)file.getFileName(), (String)null)), file);\n+    public FileVisitResult accept(final Path path, final BasicFileAttributes basicFileAttributes) {\n+        return toFileVisitResult(this.acceptBaseName(Objects.toString((Object)path.getFileName(), (String)null)), path);\n     }\n     \n-    private boolean acceptBaseName(final String baseName) {\n-        for (final String testName : this.names) {\n-            if (this.caseSensitivity.checkEquals(baseName, testName)) {\n+    private boolean acceptBaseName(final String s) {\n+        final String[] names = this.names;\n+        for (int length = names.length, i = 0; i < length; ++i) {\n+            if (this.caseSensitivity.checkEquals(s, names[i])) {\n                 return true;\n             }\n         }\n         return false;\n     }\n     \n-    private IOCase toIOCase(final IOCase caseSensitivity) {\n-        return (caseSensitivity == null) ? IOCase.SENSITIVE : caseSensitivity;\n+    private IOCase toIOCase(final IOCase ioCase) {\n+        return (ioCase == null) ? IOCase.SENSITIVE : ioCase;\n     }\n     \n     public String toString() {\n-        final StringBuilder buffer = new StringBuilder();\n-        buffer.append(super.toString());\n-        buffer.append(\"(\");\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(super.toString());\n+        sb.append(\"(\");\n         if (this.names != null) {\n             for (int i = 0; i < this.names.length; ++i) {\n                 if (i > 0) {\n-                    buffer.append(\",\");\n+                    sb.append(\",\");\n                 }\n-                buffer.append(this.names[i]);\n+                sb.append(this.names[i]);\n             }\n         }\n-        buffer.append(\")\");\n-        return buffer.toString();\n+        sb.append(\")\");\n+        return sb.toString();\n     }\n }\n"}]}
