{"diffoscope-json-version": 1, "source1": "first/FastDateParser$PatternStrategy.class", "source2": "second/FastDateParser$PatternStrategy.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,32 +10,32 @@\n {\n     private Pattern pattern;\n     \n     private PatternStrategy() {\n         super((FastDateParser.FastDateParser$1)null);\n     }\n     \n-    void createPattern(final StringBuilder regex) {\n-        this.createPattern(regex.toString());\n+    void createPattern(final StringBuilder sb) {\n+        this.createPattern(sb.toString());\n     }\n     \n     void createPattern(final String regex) {\n         this.pattern = Pattern.compile(regex);\n     }\n     \n     boolean isNumber() {\n         return false;\n     }\n     \n-    boolean parse(final FastDateParser parser, final Calendar calendar, final String source, final ParsePosition pos, final int maxWidth) {\n-        final Matcher matcher = this.pattern.matcher(source.substring(pos.getIndex()));\n+    boolean parse(final FastDateParser fastDateParser, final Calendar calendar, final String s, final ParsePosition parsePosition, final int n) {\n+        final Matcher matcher = this.pattern.matcher(s.substring(parsePosition.getIndex()));\n         if (!matcher.lookingAt()) {\n-            pos.setErrorIndex(pos.getIndex());\n+            parsePosition.setErrorIndex(parsePosition.getIndex());\n             return false;\n         }\n-        pos.setIndex(pos.getIndex() + matcher.end(1));\n-        this.setCalendar(parser, calendar, matcher.group(1));\n+        parsePosition.setIndex(parsePosition.getIndex() + matcher.end(1));\n+        this.setCalendar(fastDateParser, calendar, matcher.group(1));\n         return true;\n     }\n     \n     abstract void setCalendar(final FastDateParser p0, final Calendar p1, final String p2);\n }\n"}]}
