{"diffoscope-json-version": 1, "source1": "first/FieldGen.class", "source2": "second/FieldGen.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,33 +19,38 @@\n \n public class FieldGen extends FieldGenOrMethodGen\n {\n     private static BCELComparator bcelComparator;\n     private Object value;\n     private List<FieldObserver> observers;\n     \n+    static {\n+        FieldGen.bcelComparator = (BCELComparator)new FieldGen.FieldGen$1();\n+    }\n+    \n     public static BCELComparator getComparator() {\n         return FieldGen.bcelComparator;\n     }\n     \n     public static void setComparator(final BCELComparator comparator) {\n         FieldGen.bcelComparator = comparator;\n     }\n     \n     public FieldGen(final Field field, final ConstantPoolGen cp) {\n         this(field.getAccessFlags(), Type.getType(field.getSignature()), field.getName(), cp);\n-        final Attribute[] attributes;\n-        final Attribute[] attrs = attributes = field.getAttributes();\n-        for (final Attribute attr : attributes) {\n+        final Attribute[] attrs = field.getAttributes();\n+        Attribute[] array;\n+        for (int length = (array = attrs).length, i = 0; i < length; ++i) {\n+            final Attribute attr = array[i];\n             if (attr instanceof ConstantValue) {\n                 this.setValue(((ConstantValue)attr).getConstantValueIndex());\n             }\n             else if (attr instanceof Annotations) {\n                 final Annotations runtimeAnnotations = (Annotations)attr;\n-                runtimeAnnotations.forEach(element -> this.addAnnotationEntry(new AnnotationEntryGen(element, cp, false)));\n+                runtimeAnnotations.forEach(element -> this.addAnnotationEntry(new AnnotationEntryGen(element, constantPoolGen, false)));\n             }\n             else {\n                 this.addAttribute(attr);\n             }\n         }\n     }\n     \n@@ -222,15 +227,15 @@\n         final ConstantPool cp = super.getConstantPool().getConstantPool();\n         final Constant c = cp.getConstant(index);\n         this.value = ((ConstantObject)c).getConstantValue(cp);\n     }\n     \n     public final String toString() {\n         String access = Utility.accessToString(super.getAccessFlags());\n-        access = (access.isEmpty() ? \"\" : (access + \" \"));\n+        access = (access.isEmpty() ? \"\" : (String.valueOf(access) + \" \"));\n         final String signature = super.getType().toString();\n         final String name = this.getName();\n         final StringBuilder buf = new StringBuilder(32);\n         buf.append(access).append(signature).append(\" \").append(name);\n         final String value = this.getInitValue();\n         if (value != null) {\n             buf.append(\" = \").append(value);\n@@ -241,12 +246,8 @@\n     public void update() {\n         if (this.observers != null) {\n             for (final FieldObserver observer : this.observers) {\n                 observer.notify(this);\n             }\n         }\n     }\n-    \n-    static {\n-        FieldGen.bcelComparator = (BCELComparator)new FieldGen.FieldGen$1();\n-    }\n }\n"}]}
