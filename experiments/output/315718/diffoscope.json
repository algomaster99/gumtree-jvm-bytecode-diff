{"diffoscope-json-version": 1, "source1": "first/DirectoryStreamFilter.class", "source2": "second/DirectoryStreamFilter.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,115 +1,115 @@\n-  SHA-256 checksum 39b60d76ccfa5683f80d06b4e6d5a33ea3c67413b0e1b334ad9ecfabf561f5da\n+  SHA-256 checksum d97687ae5b8eab04974b0378f0297b8cdbcde2e6cf2274c5cf98abff3fcec8f3\n   Compiled from \"DirectoryStreamFilter.java\"\n public class org.apache.commons.io.file.DirectoryStreamFilter extends java.lang.Object implements java.nio.file.DirectoryStream$Filter<java.nio.file.Path>\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #11                         // org/apache/commons/io/file/DirectoryStreamFilter\n-  super_class: #12                        // java/lang/Object\n+  this_class: #18                         // org/apache/commons/io/file/DirectoryStreamFilter\n+  super_class: #2                         // java/lang/Object\n   interfaces: 1, fields: 1, methods: 4, attributes: 3\n Constant pool:\n-   #1 = Methodref          #12.#34        // java/lang/Object.\"<init>\":()V\n-   #2 = String             #14            // pathFilter\n-   #3 = Methodref          #35.#36        // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-   #4 = Class              #37            // org/apache/commons/io/file/PathFilter\n-   #5 = Fieldref           #11.#38        // org/apache/commons/io/file/DirectoryStreamFilter.pathFilter:Lorg/apache/commons/io/file/PathFilter;\n-   #6 = Methodref          #39.#40        // org/apache/commons/io/file/PathUtils.readBasicFileAttributes:(Ljava/nio/file/Path;)Ljava/nio/file/attribute/BasicFileAttributes;\n-   #7 = InterfaceMethodref #4.#41         // org/apache/commons/io/file/PathFilter.accept:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-   #8 = Fieldref           #42.#43        // java/nio/file/FileVisitResult.CONTINUE:Ljava/nio/file/FileVisitResult;\n-   #9 = Class              #44            // java/nio/file/Path\n-  #10 = Methodref          #11.#45        // org/apache/commons/io/file/DirectoryStreamFilter.accept:(Ljava/nio/file/Path;)Z\n-  #11 = Class              #46            // org/apache/commons/io/file/DirectoryStreamFilter\n-  #12 = Class              #47            // java/lang/Object\n-  #13 = Class              #49            // java/nio/file/DirectoryStream$Filter\n-  #14 = Utf8               pathFilter\n-  #15 = Utf8               Lorg/apache/commons/io/file/PathFilter;\n-  #16 = Utf8               <init>\n-  #17 = Utf8               (Lorg/apache/commons/io/file/PathFilter;)V\n-  #18 = Utf8               Code\n-  #19 = Utf8               LineNumberTable\n-  #20 = Utf8               accept\n-  #21 = Utf8               (Ljava/nio/file/Path;)Z\n-  #22 = Utf8               StackMapTable\n-  #23 = Utf8               Exceptions\n-  #24 = Class              #50            // java/io/IOException\n-  #25 = Utf8               getPathFilter\n-  #26 = Utf8               ()Lorg/apache/commons/io/file/PathFilter;\n-  #27 = Utf8               (Ljava/lang/Object;)Z\n-  #28 = Utf8               Signature\n-  #29 = Utf8               Filter\n-  #30 = Utf8               InnerClasses\n-  #31 = Utf8               Ljava/lang/Object;Ljava/nio/file/DirectoryStream$Filter<Ljava/nio/file/Path;>;\n-  #32 = Utf8               SourceFile\n-  #33 = Utf8               DirectoryStreamFilter.java\n-  #34 = NameAndType        #16:#51        // \"<init>\":()V\n-  #35 = Class              #52            // java/util/Objects\n-  #36 = NameAndType        #53:#54        // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #37 = Utf8               org/apache/commons/io/file/PathFilter\n-  #38 = NameAndType        #14:#15        // pathFilter:Lorg/apache/commons/io/file/PathFilter;\n-  #39 = Class              #55            // org/apache/commons/io/file/PathUtils\n-  #40 = NameAndType        #56:#57        // readBasicFileAttributes:(Ljava/nio/file/Path;)Ljava/nio/file/attribute/BasicFileAttributes;\n-  #41 = NameAndType        #20:#58        // accept:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-  #42 = Class              #59            // java/nio/file/FileVisitResult\n-  #43 = NameAndType        #60:#61        // CONTINUE:Ljava/nio/file/FileVisitResult;\n-  #44 = Utf8               java/nio/file/Path\n-  #45 = NameAndType        #20:#21        // accept:(Ljava/nio/file/Path;)Z\n-  #46 = Utf8               org/apache/commons/io/file/DirectoryStreamFilter\n-  #47 = Utf8               java/lang/Object\n-  #48 = Class              #62            // java/nio/file/DirectoryStream\n-  #49 = Utf8               java/nio/file/DirectoryStream$Filter\n-  #50 = Utf8               java/io/IOException\n-  #51 = Utf8               ()V\n-  #52 = Utf8               java/util/Objects\n-  #53 = Utf8               requireNonNull\n-  #54 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #55 = Utf8               org/apache/commons/io/file/PathUtils\n-  #56 = Utf8               readBasicFileAttributes\n-  #57 = Utf8               (Ljava/nio/file/Path;)Ljava/nio/file/attribute/BasicFileAttributes;\n-  #58 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-  #59 = Utf8               java/nio/file/FileVisitResult\n-  #60 = Utf8               CONTINUE\n-  #61 = Utf8               Ljava/nio/file/FileVisitResult;\n-  #62 = Utf8               java/nio/file/DirectoryStream\n+   #1 = Methodref          #2.#3          // java/lang/Object.\"<init>\":()V\n+   #2 = Class              #4             // java/lang/Object\n+   #3 = NameAndType        #5:#6          // \"<init>\":()V\n+   #4 = Utf8               java/lang/Object\n+   #5 = Utf8               <init>\n+   #6 = Utf8               ()V\n+   #7 = String             #8             // pathFilter\n+   #8 = Utf8               pathFilter\n+   #9 = Methodref          #10.#11        // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #10 = Class              #12            // java/util/Objects\n+  #11 = NameAndType        #13:#14        // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #12 = Utf8               java/util/Objects\n+  #13 = Utf8               requireNonNull\n+  #14 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #15 = Class              #16            // org/apache/commons/io/file/PathFilter\n+  #16 = Utf8               org/apache/commons/io/file/PathFilter\n+  #17 = Fieldref           #18.#19        // org/apache/commons/io/file/DirectoryStreamFilter.pathFilter:Lorg/apache/commons/io/file/PathFilter;\n+  #18 = Class              #20            // org/apache/commons/io/file/DirectoryStreamFilter\n+  #19 = NameAndType        #8:#21         // pathFilter:Lorg/apache/commons/io/file/PathFilter;\n+  #20 = Utf8               org/apache/commons/io/file/DirectoryStreamFilter\n+  #21 = Utf8               Lorg/apache/commons/io/file/PathFilter;\n+  #22 = Methodref          #23.#24        // org/apache/commons/io/file/PathUtils.readBasicFileAttributes:(Ljava/nio/file/Path;)Ljava/nio/file/attribute/BasicFileAttributes;\n+  #23 = Class              #25            // org/apache/commons/io/file/PathUtils\n+  #24 = NameAndType        #26:#27        // readBasicFileAttributes:(Ljava/nio/file/Path;)Ljava/nio/file/attribute/BasicFileAttributes;\n+  #25 = Utf8               org/apache/commons/io/file/PathUtils\n+  #26 = Utf8               readBasicFileAttributes\n+  #27 = Utf8               (Ljava/nio/file/Path;)Ljava/nio/file/attribute/BasicFileAttributes;\n+  #28 = InterfaceMethodref #15.#29        // org/apache/commons/io/file/PathFilter.accept:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+  #29 = NameAndType        #30:#31        // accept:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+  #30 = Utf8               accept\n+  #31 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+  #32 = Fieldref           #33.#34        // java/nio/file/FileVisitResult.CONTINUE:Ljava/nio/file/FileVisitResult;\n+  #33 = Class              #35            // java/nio/file/FileVisitResult\n+  #34 = NameAndType        #36:#37        // CONTINUE:Ljava/nio/file/FileVisitResult;\n+  #35 = Utf8               java/nio/file/FileVisitResult\n+  #36 = Utf8               CONTINUE\n+  #37 = Utf8               Ljava/nio/file/FileVisitResult;\n+  #38 = Class              #39            // java/nio/file/Path\n+  #39 = Utf8               java/nio/file/Path\n+  #40 = Methodref          #18.#41        // org/apache/commons/io/file/DirectoryStreamFilter.accept:(Ljava/nio/file/Path;)Z\n+  #41 = NameAndType        #30:#42        // accept:(Ljava/nio/file/Path;)Z\n+  #42 = Utf8               (Ljava/nio/file/Path;)Z\n+  #43 = Class              #44            // java/nio/file/DirectoryStream$Filter\n+  #44 = Utf8               java/nio/file/DirectoryStream$Filter\n+  #45 = Utf8               (Lorg/apache/commons/io/file/PathFilter;)V\n+  #46 = Utf8               Code\n+  #47 = Utf8               LineNumberTable\n+  #48 = Utf8               StackMapTable\n+  #49 = Utf8               Exceptions\n+  #50 = Class              #51            // java/io/IOException\n+  #51 = Utf8               java/io/IOException\n+  #52 = Utf8               getPathFilter\n+  #53 = Utf8               ()Lorg/apache/commons/io/file/PathFilter;\n+  #54 = Utf8               (Ljava/lang/Object;)Z\n+  #55 = Utf8               Signature\n+  #56 = Utf8               Ljava/lang/Object;Ljava/nio/file/DirectoryStream$Filter<Ljava/nio/file/Path;>;\n+  #57 = Utf8               SourceFile\n+  #58 = Utf8               DirectoryStreamFilter.java\n+  #59 = Utf8               InnerClasses\n+  #60 = Class              #61            // java/nio/file/DirectoryStream\n+  #61 = Utf8               java/nio/file/DirectoryStream\n+  #62 = Utf8               Filter\n {\n   private final org.apache.commons.io.file.PathFilter pathFilter;\n     descriptor: Lorg/apache/commons/io/file/PathFilter;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   public org.apache.commons.io.file.DirectoryStreamFilter(org.apache.commons.io.file.PathFilter);\n     descriptor: (Lorg/apache/commons/io/file/PathFilter;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n          5: aload_1\n-         6: ldc           #2                  // String pathFilter\n-         8: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-        11: checkcast     #4                  // class org/apache/commons/io/file/PathFilter\n-        14: putfield      #5                  // Field pathFilter:Lorg/apache/commons/io/file/PathFilter;\n+         6: ldc           #7                  // String pathFilter\n+         8: invokestatic  #9                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+        11: checkcast     #15                 // class org/apache/commons/io/file/PathFilter\n+        14: putfield      #17                 // Field pathFilter:Lorg/apache/commons/io/file/PathFilter;\n         17: return\n       LineNumberTable:\n         line 44: 0\n         line 46: 4\n         line 47: 17\n \n   public boolean accept(java.nio.file.Path) throws java.io.IOException;\n     descriptor: (Ljava/nio/file/Path;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n-         1: getfield      #5                  // Field pathFilter:Lorg/apache/commons/io/file/PathFilter;\n+         1: getfield      #17                 // Field pathFilter:Lorg/apache/commons/io/file/PathFilter;\n          4: aload_1\n          5: aload_1\n-         6: invokestatic  #6                  // Method org/apache/commons/io/file/PathUtils.readBasicFileAttributes:(Ljava/nio/file/Path;)Ljava/nio/file/attribute/BasicFileAttributes;\n-         9: invokeinterface #7,  3            // InterfaceMethod org/apache/commons/io/file/PathFilter.accept:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-        14: getstatic     #8                  // Field java/nio/file/FileVisitResult.CONTINUE:Ljava/nio/file/FileVisitResult;\n+         6: invokestatic  #22                 // Method org/apache/commons/io/file/PathUtils.readBasicFileAttributes:(Ljava/nio/file/Path;)Ljava/nio/file/attribute/BasicFileAttributes;\n+         9: invokeinterface #28,  3           // InterfaceMethod org/apache/commons/io/file/PathFilter.accept:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+        14: getstatic     #32                 // Field java/nio/file/FileVisitResult.CONTINUE:Ljava/nio/file/FileVisitResult;\n         17: if_acmpne     24\n         20: iconst_1\n         21: goto          25\n         24: iconst_0\n         25: ireturn\n       LineNumberTable:\n         line 51: 0\n@@ -122,31 +122,31 @@\n \n   public org.apache.commons.io.file.PathFilter getPathFilter();\n     descriptor: ()Lorg/apache/commons/io/file/PathFilter;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #5                  // Field pathFilter:Lorg/apache/commons/io/file/PathFilter;\n+         1: getfield      #17                 // Field pathFilter:Lorg/apache/commons/io/file/PathFilter;\n          4: areturn\n       LineNumberTable:\n         line 60: 0\n \n   public boolean accept(java.lang.Object) throws java.io.IOException;\n     descriptor: (Ljava/lang/Object;)Z\n     flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: checkcast     #9                  // class java/nio/file/Path\n-         5: invokevirtual #10                 // Method accept:(Ljava/nio/file/Path;)Z\n+         2: checkcast     #38                 // class java/nio/file/Path\n+         5: invokevirtual #40                 // Method accept:(Ljava/nio/file/Path;)Z\n          8: ireturn\n       LineNumberTable:\n         line 35: 0\n     Exceptions:\n       throws java.io.IOException\n }\n-Signature: #31                          // Ljava/lang/Object;Ljava/nio/file/DirectoryStream$Filter<Ljava/nio/file/Path;>;\n+Signature: #56                          // Ljava/lang/Object;Ljava/nio/file/DirectoryStream$Filter<Ljava/nio/file/Path;>;\n SourceFile: \"DirectoryStreamFilter.java\"\n InnerClasses:\n-  public static #29= #13 of #48;          // Filter=class java/nio/file/DirectoryStream$Filter of class java/nio/file/DirectoryStream\n+  public static #62= #43 of #60;          // Filter=class java/nio/file/DirectoryStream$Filter of class java/nio/file/DirectoryStream\n"}]}
