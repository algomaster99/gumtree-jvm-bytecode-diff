{"diffoscope-json-version": 1, "source1": "first/UnshrinkingInputStream.class", "source2": "second/UnshrinkingInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,132 +1,133 @@\n-  SHA-256 checksum 63c173c696b3e7aef56daf02855a538730c6e3887dd100c77b118c63258c2d17\n+  SHA-256 checksum 0774570095be5fcde556bd6167ee697250855a34ed2e7152953f86b8e0539aad\n   Compiled from \"UnshrinkingInputStream.java\"\n class org.apache.commons.compress.archivers.zip.UnshrinkingInputStream extends org.apache.commons.compress.compressors.lzw.LZWInputStream\n   minor version: 0\n-  major version: 51\n+  major version: 53\n   flags: (0x0020) ACC_SUPER\n   this_class: #1                          // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n   super_class: #4                         // org/apache/commons/compress/compressors/lzw/LZWInputStream\n-  interfaces: 0, fields: 3, methods: 4, attributes: 1\n+  interfaces: 0, fields: 3, methods: 4, attributes: 3\n Constant pool:\n-    #1 = Class              #56           // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-    #2 = Fieldref           #57.#58       // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-    #3 = Methodref          #4.#59        // org/apache/commons/compress/compressors/lzw/LZWInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-    #4 = Class              #60           // org/apache/commons/compress/compressors/lzw/LZWInputStream\n-    #5 = Methodref          #1.#61        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setClearCode:(I)V\n-    #6 = Methodref          #1.#62        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.initializeTables:(I)V\n-    #7 = Methodref          #1.#63        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getPrefixesLength:()I\n-    #8 = Fieldref           #1.#64        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.isUsed:[Z\n-    #9 = Methodref          #1.#65        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getClearCode:()I\n-   #10 = Methodref          #1.#66        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setTableSize:(I)V\n-   #11 = Methodref          #1.#67        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getTableSize:()I\n-   #12 = Methodref          #1.#68        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.addEntry:(IBI)I\n-   #13 = Methodref          #1.#69        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getPrefix:(I)I\n-   #14 = Methodref          #1.#70        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setPrefix:(II)V\n-   #15 = Methodref          #1.#71        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.readNextCode:()I\n-   #16 = Class              #72           // java/io/IOException\n-   #17 = String             #73           // Unexpected EOF;\n-   #18 = Methodref          #16.#74       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #19 = Methodref          #1.#75        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getCodeSize:()I\n-   #20 = Methodref          #1.#76        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.incrementCodeSize:()V\n-   #21 = String             #77           // Attempt to increase code size beyond maximum\n-   #22 = Methodref          #1.#78        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.partialClear:()V\n-   #23 = Class              #79           // java/lang/StringBuilder\n-   #24 = Methodref          #23.#80       // java/lang/StringBuilder.\"<init>\":()V\n-   #25 = String             #81           // Invalid clear code subcode\n-   #26 = Methodref          #23.#82       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #27 = Methodref          #23.#83       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #28 = Methodref          #23.#84       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #29 = Methodref          #1.#85        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.addRepeatOfPreviousCode:()I\n-   #30 = Methodref          #1.#86        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.expandCodeToOutputStack:(IZ)I\n-   #31 = Utf8               MAX_CODE_SIZE\n-   #32 = Utf8               I\n-   #33 = Utf8               ConstantValue\n-   #34 = Integer            13\n-   #35 = Utf8               MAX_TABLE_SIZE\n-   #36 = Integer            8192\n-   #37 = Utf8               isUsed\n-   #38 = Utf8               [Z\n-   #39 = Utf8               <init>\n-   #40 = Utf8               (Ljava/io/InputStream;)V\n-   #41 = Utf8               Code\n-   #42 = Utf8               LineNumberTable\n-   #43 = Utf8               StackMapTable\n-   #44 = Class              #56           // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-   #45 = Class              #87           // java/io/InputStream\n-   #46 = Utf8               Exceptions\n-   #47 = Utf8               addEntry\n-   #48 = Utf8               (IB)I\n-   #49 = Utf8               partialClear\n-   #50 = Utf8               ()V\n-   #51 = Class              #38           // \"[Z\"\n-   #52 = Utf8               decompressNextSymbol\n-   #53 = Utf8               ()I\n-   #54 = Utf8               SourceFile\n-   #55 = Utf8               UnshrinkingInputStream.java\n-   #56 = Utf8               org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-   #57 = Class              #88           // java/nio/ByteOrder\n-   #58 = NameAndType        #89:#90       // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-   #59 = NameAndType        #39:#91       // \"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-   #60 = Utf8               org/apache/commons/compress/compressors/lzw/LZWInputStream\n-   #61 = NameAndType        #92:#93       // setClearCode:(I)V\n-   #62 = NameAndType        #94:#93       // initializeTables:(I)V\n-   #63 = NameAndType        #95:#53       // getPrefixesLength:()I\n-   #64 = NameAndType        #37:#38       // isUsed:[Z\n-   #65 = NameAndType        #96:#53       // getClearCode:()I\n-   #66 = NameAndType        #97:#93       // setTableSize:(I)V\n-   #67 = NameAndType        #98:#53       // getTableSize:()I\n-   #68 = NameAndType        #47:#99       // addEntry:(IBI)I\n-   #69 = NameAndType        #100:#101     // getPrefix:(I)I\n-   #70 = NameAndType        #102:#103     // setPrefix:(II)V\n-   #71 = NameAndType        #104:#53      // readNextCode:()I\n-   #72 = Utf8               java/io/IOException\n-   #73 = Utf8               Unexpected EOF;\n-   #74 = NameAndType        #39:#105      // \"<init>\":(Ljava/lang/String;)V\n-   #75 = NameAndType        #106:#53      // getCodeSize:()I\n-   #76 = NameAndType        #107:#50      // incrementCodeSize:()V\n-   #77 = Utf8               Attempt to increase code size beyond maximum\n-   #78 = NameAndType        #49:#50       // partialClear:()V\n-   #79 = Utf8               java/lang/StringBuilder\n-   #80 = NameAndType        #39:#50       // \"<init>\":()V\n-   #81 = Utf8               Invalid clear code subcode\n-   #82 = NameAndType        #108:#109     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #83 = NameAndType        #108:#110     // append:(I)Ljava/lang/StringBuilder;\n-   #84 = NameAndType        #111:#112     // toString:()Ljava/lang/String;\n-   #85 = NameAndType        #113:#53      // addRepeatOfPreviousCode:()I\n-   #86 = NameAndType        #114:#115     // expandCodeToOutputStack:(IZ)I\n-   #87 = Utf8               java/io/InputStream\n-   #88 = Utf8               java/nio/ByteOrder\n-   #89 = Utf8               LITTLE_ENDIAN\n-   #90 = Utf8               Ljava/nio/ByteOrder;\n-   #91 = Utf8               (Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-   #92 = Utf8               setClearCode\n-   #93 = Utf8               (I)V\n-   #94 = Utf8               initializeTables\n-   #95 = Utf8               getPrefixesLength\n-   #96 = Utf8               getClearCode\n-   #97 = Utf8               setTableSize\n-   #98 = Utf8               getTableSize\n-   #99 = Utf8               (IBI)I\n-  #100 = Utf8               getPrefix\n-  #101 = Utf8               (I)I\n-  #102 = Utf8               setPrefix\n-  #103 = Utf8               (II)V\n-  #104 = Utf8               readNextCode\n-  #105 = Utf8               (Ljava/lang/String;)V\n-  #106 = Utf8               getCodeSize\n-  #107 = Utf8               incrementCodeSize\n-  #108 = Utf8               append\n-  #109 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #110 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #111 = Utf8               toString\n-  #112 = Utf8               ()Ljava/lang/String;\n-  #113 = Utf8               addRepeatOfPreviousCode\n-  #114 = Utf8               expandCodeToOutputStack\n-  #115 = Utf8               (IZ)I\n+    #1 = Class              #50           // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+    #2 = Fieldref           #51.#52       // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+    #3 = Methodref          #4.#53        // org/apache/commons/compress/compressors/lzw/LZWInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+    #4 = Class              #54           // org/apache/commons/compress/compressors/lzw/LZWInputStream\n+    #5 = Methodref          #1.#55        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setClearCode:(I)V\n+    #6 = Methodref          #1.#56        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.initializeTables:(I)V\n+    #7 = Methodref          #1.#57        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getPrefixesLength:()I\n+    #8 = Fieldref           #1.#58        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.isUsed:[Z\n+    #9 = Methodref          #1.#59        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getClearCode:()I\n+   #10 = Methodref          #1.#60        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setTableSize:(I)V\n+   #11 = Methodref          #1.#61        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getTableSize:()I\n+   #12 = Methodref          #1.#62        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.addEntry:(IBI)I\n+   #13 = Methodref          #1.#63        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getPrefix:(I)I\n+   #14 = Methodref          #1.#64        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setPrefix:(II)V\n+   #15 = Methodref          #1.#65        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.readNextCode:()I\n+   #16 = Class              #66           // java/io/IOException\n+   #17 = String             #67           // Unexpected EOF;\n+   #18 = Methodref          #16.#68       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #19 = Methodref          #1.#69        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getCodeSize:()I\n+   #20 = Methodref          #1.#70        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.incrementCodeSize:()V\n+   #21 = String             #71           // Attempt to increase code size beyond maximum\n+   #22 = Methodref          #1.#72        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.partialClear:()V\n+   #23 = InvokeDynamic      #0:#76        // #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+   #24 = Methodref          #1.#77        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.addRepeatOfPreviousCode:()I\n+   #25 = Methodref          #1.#78        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.expandCodeToOutputStack:(IZ)I\n+   #26 = Utf8               MAX_CODE_SIZE\n+   #27 = Utf8               I\n+   #28 = Utf8               ConstantValue\n+   #29 = Integer            13\n+   #30 = Utf8               MAX_TABLE_SIZE\n+   #31 = Integer            8192\n+   #32 = Utf8               isUsed\n+   #33 = Utf8               [Z\n+   #34 = Utf8               <init>\n+   #35 = Utf8               (Ljava/io/InputStream;)V\n+   #36 = Utf8               Code\n+   #37 = Utf8               LineNumberTable\n+   #38 = Utf8               StackMapTable\n+   #39 = Class              #79           // java/io/InputStream\n+   #40 = Utf8               Exceptions\n+   #41 = Utf8               addEntry\n+   #42 = Utf8               (IB)I\n+   #43 = Utf8               partialClear\n+   #44 = Utf8               ()V\n+   #45 = Class              #33           // \"[Z\"\n+   #46 = Utf8               decompressNextSymbol\n+   #47 = Utf8               ()I\n+   #48 = Utf8               SourceFile\n+   #49 = Utf8               UnshrinkingInputStream.java\n+   #50 = Utf8               org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+   #51 = Class              #80           // java/nio/ByteOrder\n+   #52 = NameAndType        #81:#82       // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+   #53 = NameAndType        #34:#83       // \"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+   #54 = Utf8               org/apache/commons/compress/compressors/lzw/LZWInputStream\n+   #55 = NameAndType        #84:#85       // setClearCode:(I)V\n+   #56 = NameAndType        #86:#85       // initializeTables:(I)V\n+   #57 = NameAndType        #87:#47       // getPrefixesLength:()I\n+   #58 = NameAndType        #32:#33       // isUsed:[Z\n+   #59 = NameAndType        #88:#47       // getClearCode:()I\n+   #60 = NameAndType        #89:#85       // setTableSize:(I)V\n+   #61 = NameAndType        #90:#47       // getTableSize:()I\n+   #62 = NameAndType        #41:#91       // addEntry:(IBI)I\n+   #63 = NameAndType        #92:#93       // getPrefix:(I)I\n+   #64 = NameAndType        #94:#95       // setPrefix:(II)V\n+   #65 = NameAndType        #96:#47       // readNextCode:()I\n+   #66 = Utf8               java/io/IOException\n+   #67 = Utf8               Unexpected EOF;\n+   #68 = NameAndType        #34:#97       // \"<init>\":(Ljava/lang/String;)V\n+   #69 = NameAndType        #98:#47       // getCodeSize:()I\n+   #70 = NameAndType        #99:#44       // incrementCodeSize:()V\n+   #71 = Utf8               Attempt to increase code size beyond maximum\n+   #72 = NameAndType        #43:#44       // partialClear:()V\n+   #73 = Utf8               BootstrapMethods\n+   #74 = MethodHandle       6:#100        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+   #75 = String             #101          // Invalid clear code subcode \\u0001\n+   #76 = NameAndType        #102:#103     // makeConcatWithConstants:(I)Ljava/lang/String;\n+   #77 = NameAndType        #104:#47      // addRepeatOfPreviousCode:()I\n+   #78 = NameAndType        #105:#106     // expandCodeToOutputStack:(IZ)I\n+   #79 = Utf8               java/io/InputStream\n+   #80 = Utf8               java/nio/ByteOrder\n+   #81 = Utf8               LITTLE_ENDIAN\n+   #82 = Utf8               Ljava/nio/ByteOrder;\n+   #83 = Utf8               (Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+   #84 = Utf8               setClearCode\n+   #85 = Utf8               (I)V\n+   #86 = Utf8               initializeTables\n+   #87 = Utf8               getPrefixesLength\n+   #88 = Utf8               getClearCode\n+   #89 = Utf8               setTableSize\n+   #90 = Utf8               getTableSize\n+   #91 = Utf8               (IBI)I\n+   #92 = Utf8               getPrefix\n+   #93 = Utf8               (I)I\n+   #94 = Utf8               setPrefix\n+   #95 = Utf8               (II)V\n+   #96 = Utf8               readNextCode\n+   #97 = Utf8               (Ljava/lang/String;)V\n+   #98 = Utf8               getCodeSize\n+   #99 = Utf8               incrementCodeSize\n+  #100 = Methodref          #107.#108     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #101 = Utf8               Invalid clear code subcode \\u0001\n+  #102 = Utf8               makeConcatWithConstants\n+  #103 = Utf8               (I)Ljava/lang/String;\n+  #104 = Utf8               addRepeatOfPreviousCode\n+  #105 = Utf8               expandCodeToOutputStack\n+  #106 = Utf8               (IZ)I\n+  #107 = Class              #109          // java/lang/invoke/StringConcatFactory\n+  #108 = NameAndType        #102:#113     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #109 = Utf8               java/lang/invoke/StringConcatFactory\n+  #110 = Class              #115          // java/lang/invoke/MethodHandles$Lookup\n+  #111 = Utf8               Lookup\n+  #112 = Utf8               InnerClasses\n+  #113 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #114 = Class              #116          // java/lang/invoke/MethodHandles\n+  #115 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #116 = Utf8               java/lang/invoke/MethodHandles\n {\n   private static final int MAX_CODE_SIZE = 13;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 13\n \n   private static final int MAX_TABLE_SIZE = 8192;\n@@ -337,26 +338,26 @@\n         frame_type = 250 /* chop */\n           offset_delta = 5\n \n   protected int decompressNextSymbol() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n-      stack=4, locals=4, args_size=1\n+      stack=3, locals=4, args_size=1\n          0: aload_0\n          1: invokevirtual #15                 // Method readNextCode:()I\n          4: istore_1\n          5: iload_1\n          6: ifge          11\n          9: iconst_m1\n         10: ireturn\n         11: iload_1\n         12: aload_0\n         13: invokevirtual #9                  // Method getClearCode:()I\n-        16: if_icmpne     120\n+        16: if_icmpne     107\n         19: aload_0\n         20: invokevirtual #15                 // Method readNextCode:()I\n         23: istore_2\n         24: iload_2\n         25: ifge          38\n         28: new           #16                 // class java/io/IOException\n         31: dup\n@@ -368,15 +369,15 @@\n         40: if_icmpne     69\n         43: aload_0\n         44: invokevirtual #19                 // Method getCodeSize:()I\n         47: bipush        13\n         49: if_icmpge     59\n         52: aload_0\n         53: invokevirtual #20                 // Method incrementCodeSize:()V\n-        56: goto          118\n+        56: goto          105\n         59: new           #16                 // class java/io/IOException\n         62: dup\n         63: ldc           #21                 // String Attempt to increase code size beyond maximum\n         65: invokespecial #18                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         68: athrow\n         69: iload_2\n         70: iconst_2\n@@ -385,48 +386,42 @@\n         75: invokespecial #22                 // Method partialClear:()V\n         78: aload_0\n         79: aload_0\n         80: invokevirtual #9                  // Method getClearCode:()I\n         83: iconst_1\n         84: iadd\n         85: invokevirtual #10                 // Method setTableSize:(I)V\n-        88: goto          118\n+        88: goto          105\n         91: new           #16                 // class java/io/IOException\n         94: dup\n-        95: new           #23                 // class java/lang/StringBuilder\n-        98: dup\n-        99: invokespecial #24                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       102: ldc           #25                 // String Invalid clear code subcode\n-       104: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       107: iload_2\n-       108: invokevirtual #27                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       111: invokevirtual #28                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       114: invokespecial #18                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       117: athrow\n-       118: iconst_0\n-       119: ireturn\n-       120: iconst_0\n-       121: istore_2\n-       122: iload_1\n-       123: istore_3\n-       124: aload_0\n-       125: getfield      #8                  // Field isUsed:[Z\n-       128: iload_1\n-       129: baload\n-       130: ifne          140\n-       133: aload_0\n-       134: invokevirtual #29                 // Method addRepeatOfPreviousCode:()I\n-       137: istore_3\n-       138: iconst_1\n-       139: istore_2\n-       140: aload_0\n-       141: iload_3\n-       142: iload_2\n-       143: invokevirtual #30                 // Method expandCodeToOutputStack:(IZ)I\n-       146: ireturn\n+        95: iload_2\n+        96: invokedynamic #23,  0             // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+       101: invokespecial #18                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       104: athrow\n+       105: iconst_0\n+       106: ireturn\n+       107: iconst_0\n+       108: istore_2\n+       109: iload_1\n+       110: istore_3\n+       111: aload_0\n+       112: getfield      #8                  // Field isUsed:[Z\n+       115: iload_1\n+       116: baload\n+       117: ifne          127\n+       120: aload_0\n+       121: invokevirtual #24                 // Method addRepeatOfPreviousCode:()I\n+       124: istore_3\n+       125: iconst_1\n+       126: istore_2\n+       127: aload_0\n+       128: iload_3\n+       129: iload_2\n+       130: invokevirtual #25                 // Method expandCodeToOutputStack:(IZ)I\n+       133: ireturn\n       LineNumberTable:\n         line 97: 0\n         line 98: 5\n         line 99: 9\n         line 100: 11\n         line 101: 19\n         line 102: 24\n@@ -435,34 +430,40 @@\n         line 105: 43\n         line 106: 52\n         line 108: 59\n         line 110: 69\n         line 111: 74\n         line 112: 78\n         line 114: 91\n-        line 116: 118\n-        line 118: 120\n-        line 119: 122\n-        line 120: 124\n-        line 121: 133\n-        line 122: 138\n-        line 124: 140\n+        line 116: 105\n+        line 118: 107\n+        line 119: 109\n+        line 120: 111\n+        line 121: 120\n+        line 122: 125\n+        line 124: 127\n       StackMapTable: number_of_entries = 8\n         frame_type = 252 /* append */\n           offset_delta = 11\n           locals = [ int ]\n         frame_type = 252 /* append */\n           offset_delta = 26\n           locals = [ int ]\n         frame_type = 20 /* same */\n         frame_type = 9 /* same */\n         frame_type = 21 /* same */\n-        frame_type = 26 /* same */\n+        frame_type = 13 /* same */\n         frame_type = 250 /* chop */\n           offset_delta = 1\n         frame_type = 253 /* append */\n           offset_delta = 19\n           locals = [ int, int ]\n     Exceptions:\n       throws java.io.IOException\n }\n SourceFile: \"UnshrinkingInputStream.java\"\n+InnerClasses:\n+  public static final #111= #110 of #114; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n+BootstrapMethods:\n+  0: #74 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+    Method arguments:\n+      #75 Invalid clear code subcode \\u0001\n"}]}
