{"diffoscope-json-version": 1, "source1": "first/RedundantImportCheck.class", "source2": "second/RedundantImportCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,15 +19,15 @@\n     private String pkgName;\n     \n     public RedundantImportCheck() {\n         this.imports = new HashSet<FullIdent>();\n         this.staticImports = new HashSet<FullIdent>();\n     }\n     \n-    public void beginTree(final DetailAST aRootAST) {\n+    public void beginTree(final DetailAST detailAST) {\n         this.pkgName = null;\n         this.imports.clear();\n         this.staticImports.clear();\n     }\n     \n     public int[] getDefaultTokens() {\n         return this.getRequiredTokens();\n@@ -37,36 +37,34 @@\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 30, 152, 16 };\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        if (ast.getType() == 16) {\n-            this.pkgName = FullIdent.createFullIdent(ast.getLastChild().getPreviousSibling()).getText();\n+    public void visitToken(final DetailAST detailAST) {\n+        if (detailAST.getType() == 16) {\n+            this.pkgName = FullIdent.createFullIdent(detailAST.getLastChild().getPreviousSibling()).getText();\n         }\n-        else if (ast.getType() == 30) {\n-            final FullIdent imp = FullIdent.createFullIdentBelow(ast);\n-            final String importText = imp.getText();\n-            if (isFromPackage(importText, \"java.lang\")) {\n-                this.log(ast, \"import.lang\", new Object[] { importText });\n+        else if (detailAST.getType() == 30) {\n+            final FullIdent fullIdentBelow = FullIdent.createFullIdentBelow(detailAST);\n+            final String text = fullIdentBelow.getText();\n+            if (isFromPackage(text, \"java.lang\")) {\n+                this.log(detailAST, \"import.lang\", new Object[] { text });\n             }\n-            else if (this.pkgName != null && isFromPackage(importText, this.pkgName)) {\n-                this.log(ast, \"import.same\", new Object[] { importText });\n+            else if (this.pkgName != null && isFromPackage(text, this.pkgName)) {\n+                this.log(detailAST, \"import.same\", new Object[] { text });\n             }\n-            this.imports.stream().filter(full -> importText.equals(full.getText())).forEach(full -> this.log(ast, \"import.duplicate\", new Object[] { Integer.valueOf(full.getLineNo()), importText }));\n-            this.imports.add(imp);\n+            this.imports.stream().filter(fullIdent2 -> s.equals(fullIdent2.getText())).forEach(fullIdent3 -> this.log(detailAST2, \"import.duplicate\", new Object[] { Integer.valueOf(fullIdent3.getLineNo()), s2 }));\n+            this.imports.add(fullIdentBelow);\n         }\n         else {\n-            final FullIdent imp = FullIdent.createFullIdent(ast.getLastChild().getPreviousSibling());\n-            this.staticImports.stream().filter(full -> imp.getText().equals(full.getText())).forEach(full -> this.log(ast, \"import.duplicate\", new Object[] { Integer.valueOf(full.getLineNo()), imp.getText() }));\n-            this.staticImports.add(imp);\n+            final FullIdent fullIdent = FullIdent.createFullIdent(detailAST.getLastChild().getPreviousSibling());\n+            this.staticImports.stream().filter(fullIdent5 -> fullIdent4.getText().equals(fullIdent5.getText())).forEach(fullIdent7 -> this.log(detailAST3, \"import.duplicate\", new Object[] { Integer.valueOf(fullIdent7.getLineNo()), fullIdent6.getText() }));\n+            this.staticImports.add(fullIdent);\n         }\n     }\n     \n-    private static boolean isFromPackage(final String importName, final String pkg) {\n-        final int index = importName.lastIndexOf(46);\n-        final String front = importName.substring(0, index);\n-        return pkg.equals(front);\n+    private static boolean isFromPackage(final String s, final String s2) {\n+        return s2.equals(s.substring(0, s.lastIndexOf(46)));\n     }\n }\n"}]}
