{"diffoscope-json-version": 1, "source1": "first/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.class", "source2": "second/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,125 +1,120 @@\n-  SHA-256 checksum 22e79c275850cb7555a337a3aec9c8836b4f636e13382581e1e7659372abb686\n+  SHA-256 checksum 88d778f4b57b1995a1ac42b85325bb7d4f55f9eb5d2746f78789a3a2852ba529\n   Compiled from \"FixedLengthBlockOutputStream.java\"\n class org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel implements java.nio.channels.WritableByteChannel\n   minor version: 0\n   major version: 53\n   flags: (0x0020) ACC_SUPER\n-  this_class: #2                          // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel\n-  super_class: #8                         // java/lang/Object\n+  this_class: #1                          // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel\n+  super_class: #3                         // java/lang/Object\n   interfaces: 1, fields: 2, methods: 5, attributes: 2\n Constant pool:\n-    #1 = Methodref          #2.#3         // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.\"<init>\":(Ljava/io/OutputStream;)V\n-    #2 = Class              #4            // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel\n-    #3 = NameAndType        #5:#6         // \"<init>\":(Ljava/io/OutputStream;)V\n-    #4 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel\n-    #5 = Utf8               <init>\n-    #6 = Utf8               (Ljava/io/OutputStream;)V\n-    #7 = Methodref          #8.#9         // java/lang/Object.\"<init>\":()V\n-    #8 = Class              #10           // java/lang/Object\n-    #9 = NameAndType        #5:#11        // \"<init>\":()V\n-   #10 = Utf8               java/lang/Object\n-   #11 = Utf8               ()V\n-   #12 = Class              #13           // java/util/concurrent/atomic/AtomicBoolean\n-   #13 = Utf8               java/util/concurrent/atomic/AtomicBoolean\n-   #14 = Methodref          #12.#15       // java/util/concurrent/atomic/AtomicBoolean.\"<init>\":(Z)V\n-   #15 = NameAndType        #5:#16        // \"<init>\":(Z)V\n-   #16 = Utf8               (Z)V\n-   #17 = Fieldref           #2.#18        // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n-   #18 = NameAndType        #19:#20       // closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n-   #19 = Utf8               closed\n-   #20 = Utf8               Ljava/util/concurrent/atomic/AtomicBoolean;\n-   #21 = Fieldref           #2.#22        // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.out:Ljava/io/OutputStream;\n-   #22 = NameAndType        #23:#24       // out:Ljava/io/OutputStream;\n-   #23 = Utf8               out\n-   #24 = Utf8               Ljava/io/OutputStream;\n-   #25 = Methodref          #2.#26        // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.isOpen:()Z\n-   #26 = NameAndType        #27:#28       // isOpen:()Z\n-   #27 = Utf8               isOpen\n-   #28 = Utf8               ()Z\n-   #29 = Class              #30           // java/nio/channels/ClosedChannelException\n-   #30 = Utf8               java/nio/channels/ClosedChannelException\n-   #31 = Methodref          #29.#9        // java/nio/channels/ClosedChannelException.\"<init>\":()V\n-   #32 = Methodref          #33.#34       // java/nio/ByteBuffer.hasArray:()Z\n-   #33 = Class              #35           // java/nio/ByteBuffer\n-   #34 = NameAndType        #36:#28       // hasArray:()Z\n-   #35 = Utf8               java/nio/ByteBuffer\n-   #36 = Utf8               hasArray\n-   #37 = Class              #38           // java/lang/IllegalArgumentException\n-   #38 = Utf8               java/lang/IllegalArgumentException\n-   #39 = String             #40           // Direct buffer somehow written to BufferAtATimeOutputChannel\n-   #40 = Utf8               Direct buffer somehow written to BufferAtATimeOutputChannel\n-   #41 = Methodref          #37.#42       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #42 = NameAndType        #5:#43        // \"<init>\":(Ljava/lang/String;)V\n-   #43 = Utf8               (Ljava/lang/String;)V\n-   #44 = Methodref          #33.#45       // java/nio/ByteBuffer.position:()I\n-   #45 = NameAndType        #46:#47       // position:()I\n-   #46 = Utf8               position\n-   #47 = Utf8               ()I\n-   #48 = Methodref          #33.#49       // java/nio/ByteBuffer.limit:()I\n-   #49 = NameAndType        #50:#47       // limit:()I\n-   #50 = Utf8               limit\n-   #51 = Methodref          #33.#52       // java/nio/ByteBuffer.array:()[B\n-   #52 = NameAndType        #53:#54       // array:()[B\n-   #53 = Utf8               array\n-   #54 = Utf8               ()[B\n-   #55 = Methodref          #33.#56       // java/nio/ByteBuffer.arrayOffset:()I\n-   #56 = NameAndType        #57:#47       // arrayOffset:()I\n-   #57 = Utf8               arrayOffset\n-   #58 = Methodref          #59.#60       // java/io/OutputStream.write:([BII)V\n-   #59 = Class              #61           // java/io/OutputStream\n-   #60 = NameAndType        #62:#63       // write:([BII)V\n-   #61 = Utf8               java/io/OutputStream\n-   #62 = Utf8               write\n-   #63 = Utf8               ([BII)V\n-   #64 = Methodref          #33.#65       // java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n-   #65 = NameAndType        #46:#66       // position:(I)Ljava/nio/ByteBuffer;\n-   #66 = Utf8               (I)Ljava/nio/ByteBuffer;\n-   #67 = Class              #68           // java/io/IOException\n-   #68 = Utf8               java/io/IOException\n-   #69 = Methodref          #2.#70        // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.close:()V\n-   #70 = NameAndType        #71:#11       // close:()V\n-   #71 = Utf8               close\n-   #72 = Methodref          #12.#73       // java/util/concurrent/atomic/AtomicBoolean.get:()Z\n-   #73 = NameAndType        #74:#28       // get:()Z\n-   #74 = Utf8               get\n-   #75 = Methodref          #12.#76       // java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z\n-   #76 = NameAndType        #77:#78       // compareAndSet:(ZZ)Z\n-   #77 = Utf8               compareAndSet\n-   #78 = Utf8               (ZZ)Z\n-   #79 = Methodref          #59.#70       // java/io/OutputStream.close:()V\n-   #80 = Class              #81           // java/nio/channels/WritableByteChannel\n-   #81 = Utf8               java/nio/channels/WritableByteChannel\n-   #82 = Utf8               Code\n-   #83 = Utf8               LineNumberTable\n-   #84 = Utf8               LocalVariableTable\n-   #85 = Utf8               this\n-   #86 = Utf8               Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel;\n-   #87 = Utf8               (Ljava/nio/ByteBuffer;)I\n-   #88 = Utf8               pos\n-   #89 = Utf8               I\n-   #90 = Utf8               len\n-   #91 = Utf8               e\n-   #92 = Utf8               Ljava/io/IOException;\n-   #93 = Utf8               buffer\n-   #94 = Utf8               Ljava/nio/ByteBuffer;\n-   #95 = Utf8               StackMapTable\n-   #96 = Utf8               Exceptions\n-   #97 = Utf8               (Ljava/io/OutputStream;Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$1;)V\n-   #98 = Utf8               x0\n-   #99 = Utf8               x1\n-  #100 = Utf8               Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$1;\n-  #101 = Utf8               SourceFile\n-  #102 = Utf8               FixedLengthBlockOutputStream.java\n-  #103 = Utf8               InnerClasses\n-  #104 = Class              #105          // org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n-  #105 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n-  #106 = Utf8               BufferAtATimeOutputChannel\n-  #107 = Class              #108          // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$1\n-  #108 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream$1\n+    #1 = Class              #2            // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel\n+    #2 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel\n+    #3 = Class              #4            // java/lang/Object\n+    #4 = Utf8               java/lang/Object\n+    #5 = Class              #6            // java/nio/channels/WritableByteChannel\n+    #6 = Utf8               java/nio/channels/WritableByteChannel\n+    #7 = Utf8               out\n+    #8 = Utf8               Ljava/io/OutputStream;\n+    #9 = Utf8               closed\n+   #10 = Utf8               Ljava/util/concurrent/atomic/AtomicBoolean;\n+   #11 = Utf8               <init>\n+   #12 = Utf8               (Ljava/io/OutputStream;)V\n+   #13 = Utf8               Code\n+   #14 = Methodref          #3.#15        // java/lang/Object.\"<init>\":()V\n+   #15 = NameAndType        #11:#16       // \"<init>\":()V\n+   #16 = Utf8               ()V\n+   #17 = Class              #18           // java/util/concurrent/atomic/AtomicBoolean\n+   #18 = Utf8               java/util/concurrent/atomic/AtomicBoolean\n+   #19 = Methodref          #17.#20       // java/util/concurrent/atomic/AtomicBoolean.\"<init>\":(Z)V\n+   #20 = NameAndType        #11:#21       // \"<init>\":(Z)V\n+   #21 = Utf8               (Z)V\n+   #22 = Fieldref           #1.#23        // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+   #23 = NameAndType        #9:#10        // closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+   #24 = Fieldref           #1.#25        // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.out:Ljava/io/OutputStream;\n+   #25 = NameAndType        #7:#8         // out:Ljava/io/OutputStream;\n+   #26 = Utf8               LineNumberTable\n+   #27 = Utf8               LocalVariableTable\n+   #28 = Utf8               this\n+   #29 = Utf8               Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel;\n+   #30 = Utf8               write\n+   #31 = Utf8               (Ljava/nio/ByteBuffer;)I\n+   #32 = Utf8               Exceptions\n+   #33 = Class              #34           // java/io/IOException\n+   #34 = Utf8               java/io/IOException\n+   #35 = Methodref          #1.#36        // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.isOpen:()Z\n+   #36 = NameAndType        #37:#38       // isOpen:()Z\n+   #37 = Utf8               isOpen\n+   #38 = Utf8               ()Z\n+   #39 = Class              #40           // java/nio/channels/ClosedChannelException\n+   #40 = Utf8               java/nio/channels/ClosedChannelException\n+   #41 = Methodref          #39.#15       // java/nio/channels/ClosedChannelException.\"<init>\":()V\n+   #42 = Methodref          #43.#45       // java/nio/ByteBuffer.hasArray:()Z\n+   #43 = Class              #44           // java/nio/ByteBuffer\n+   #44 = Utf8               java/nio/ByteBuffer\n+   #45 = NameAndType        #46:#38       // hasArray:()Z\n+   #46 = Utf8               hasArray\n+   #47 = Class              #48           // java/lang/IllegalArgumentException\n+   #48 = Utf8               java/lang/IllegalArgumentException\n+   #49 = String             #50           // Direct buffer somehow written to BufferAtATimeOutputChannel\n+   #50 = Utf8               Direct buffer somehow written to BufferAtATimeOutputChannel\n+   #51 = Methodref          #47.#52       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #52 = NameAndType        #11:#53       // \"<init>\":(Ljava/lang/String;)V\n+   #53 = Utf8               (Ljava/lang/String;)V\n+   #54 = Methodref          #43.#55       // java/nio/ByteBuffer.position:()I\n+   #55 = NameAndType        #56:#57       // position:()I\n+   #56 = Utf8               position\n+   #57 = Utf8               ()I\n+   #58 = Methodref          #43.#59       // java/nio/ByteBuffer.limit:()I\n+   #59 = NameAndType        #60:#57       // limit:()I\n+   #60 = Utf8               limit\n+   #61 = Methodref          #43.#62       // java/nio/ByteBuffer.array:()[B\n+   #62 = NameAndType        #63:#64       // array:()[B\n+   #63 = Utf8               array\n+   #64 = Utf8               ()[B\n+   #65 = Methodref          #43.#66       // java/nio/ByteBuffer.arrayOffset:()I\n+   #66 = NameAndType        #67:#57       // arrayOffset:()I\n+   #67 = Utf8               arrayOffset\n+   #68 = Methodref          #69.#71       // java/io/OutputStream.write:([BII)V\n+   #69 = Class              #70           // java/io/OutputStream\n+   #70 = Utf8               java/io/OutputStream\n+   #71 = NameAndType        #30:#72       // write:([BII)V\n+   #72 = Utf8               ([BII)V\n+   #73 = Methodref          #43.#74       // java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n+   #74 = NameAndType        #56:#75       // position:(I)Ljava/nio/ByteBuffer;\n+   #75 = Utf8               (I)Ljava/nio/ByteBuffer;\n+   #76 = Methodref          #1.#77        // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.close:()V\n+   #77 = NameAndType        #78:#16       // close:()V\n+   #78 = Utf8               close\n+   #79 = Utf8               buffer\n+   #80 = Utf8               Ljava/nio/ByteBuffer;\n+   #81 = Utf8               pos\n+   #82 = Utf8               I\n+   #83 = Utf8               len\n+   #84 = Utf8               e\n+   #85 = Utf8               Ljava/io/IOException;\n+   #86 = Utf8               StackMapTable\n+   #87 = Methodref          #17.#88       // java/util/concurrent/atomic/AtomicBoolean.get:()Z\n+   #88 = NameAndType        #89:#38       // get:()Z\n+   #89 = Utf8               get\n+   #90 = Methodref          #17.#91       // java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z\n+   #91 = NameAndType        #92:#93       // compareAndSet:(ZZ)Z\n+   #92 = Utf8               compareAndSet\n+   #93 = Utf8               (ZZ)Z\n+   #94 = Methodref          #69.#77       // java/io/OutputStream.close:()V\n+   #95 = Utf8               (Ljava/io/OutputStream;Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel;)V\n+   #96 = Methodref          #1.#97        // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.\"<init>\":(Ljava/io/OutputStream;)V\n+   #97 = NameAndType        #11:#12       // \"<init>\":(Ljava/io/OutputStream;)V\n+   #98 = Utf8               SourceFile\n+   #99 = Utf8               FixedLengthBlockOutputStream.java\n+  #100 = Utf8               InnerClasses\n+  #101 = Class              #102          // org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n+  #102 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n+  #103 = Utf8               BufferAtATimeOutputChannel\n {\n   private final java.io.OutputStream out;\n     descriptor: Ljava/io/OutputStream;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final java.util.concurrent.atomic.AtomicBoolean closed;\n     descriptor: Ljava/util/concurrent/atomic/AtomicBoolean;\n@@ -127,83 +122,85 @@\n \n   private org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel(java.io.OutputStream);\n     descriptor: (Ljava/io/OutputStream;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n-         1: invokespecial #7                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #14                 // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n-         5: new           #12                 // class java/util/concurrent/atomic/AtomicBoolean\n+         5: new           #17                 // class java/util/concurrent/atomic/AtomicBoolean\n          8: dup\n          9: iconst_0\n-        10: invokespecial #14                 // Method java/util/concurrent/atomic/AtomicBoolean.\"<init>\":(Z)V\n-        13: putfield      #17                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+        10: invokespecial #19                 // Method java/util/concurrent/atomic/AtomicBoolean.\"<init>\":(Z)V\n+        13: putfield      #22                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n         16: aload_0\n         17: aload_1\n-        18: putfield      #21                 // Field out:Ljava/io/OutputStream;\n+        18: putfield      #24                 // Field out:Ljava/io/OutputStream;\n         21: return\n       LineNumberTable:\n         line 228: 0\n         line 226: 4\n         line 229: 16\n         line 230: 21\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      22     0  this   Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel;\n             0      22     1   out   Ljava/io/OutputStream;\n \n   public int write(java.nio.ByteBuffer) throws java.io.IOException;\n     descriptor: (Ljava/nio/ByteBuffer;)I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=4, args_size=2\n          0: aload_0\n-         1: invokevirtual #25                 // Method isOpen:()Z\n+         1: invokevirtual #35                 // Method isOpen:()Z\n          4: ifne          15\n-         7: new           #29                 // class java/nio/channels/ClosedChannelException\n+         7: new           #39                 // class java/nio/channels/ClosedChannelException\n         10: dup\n-        11: invokespecial #31                 // Method java/nio/channels/ClosedChannelException.\"<init>\":()V\n+        11: invokespecial #41                 // Method java/nio/channels/ClosedChannelException.\"<init>\":()V\n         14: athrow\n         15: aload_1\n-        16: invokevirtual #32                 // Method java/nio/ByteBuffer.hasArray:()Z\n+        16: invokevirtual #42                 // Method java/nio/ByteBuffer.hasArray:()Z\n         19: ifne          32\n-        22: new           #37                 // class java/lang/IllegalArgumentException\n+        22: new           #47                 // class java/lang/IllegalArgumentException\n         25: dup\n-        26: ldc           #39                 // String Direct buffer somehow written to BufferAtATimeOutputChannel\n-        28: invokespecial #41                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        26: ldc           #49                 // String Direct buffer somehow written to BufferAtATimeOutputChannel\n+        28: invokespecial #51                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         31: athrow\n         32: aload_1\n-        33: invokevirtual #44                 // Method java/nio/ByteBuffer.position:()I\n+        33: invokevirtual #54                 // Method java/nio/ByteBuffer.position:()I\n         36: istore_2\n         37: aload_1\n-        38: invokevirtual #48                 // Method java/nio/ByteBuffer.limit:()I\n+        38: invokevirtual #58                 // Method java/nio/ByteBuffer.limit:()I\n         41: iload_2\n         42: isub\n         43: istore_3\n         44: aload_0\n-        45: getfield      #21                 // Field out:Ljava/io/OutputStream;\n+        45: getfield      #24                 // Field out:Ljava/io/OutputStream;\n         48: aload_1\n-        49: invokevirtual #51                 // Method java/nio/ByteBuffer.array:()[B\n+        49: invokevirtual #61                 // Method java/nio/ByteBuffer.array:()[B\n         52: aload_1\n-        53: invokevirtual #55                 // Method java/nio/ByteBuffer.arrayOffset:()I\n+        53: invokevirtual #65                 // Method java/nio/ByteBuffer.arrayOffset:()I\n         56: iload_2\n         57: iadd\n         58: iload_3\n-        59: invokevirtual #58                 // Method java/io/OutputStream.write:([BII)V\n+        59: invokevirtual #68                 // Method java/io/OutputStream.write:([BII)V\n         62: aload_1\n         63: aload_1\n-        64: invokevirtual #48                 // Method java/nio/ByteBuffer.limit:()I\n-        67: invokevirtual #64                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n+        64: invokevirtual #58                 // Method java/nio/ByteBuffer.limit:()I\n+        67: invokevirtual #73                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/ByteBuffer;\n         70: pop\n         71: iload_3\n         72: ireturn\n         73: astore_2\n         74: aload_0\n-        75: invokevirtual #69                 // Method close:()V\n+        75: invokevirtual #76                 // Method close:()V\n         78: goto          82\n         81: astore_3\n         82: aload_2\n         83: athrow\n       Exception table:\n          from    to  target type\n             32    72    73   Class java/io/IOException\n@@ -216,101 +213,94 @@\n         line 242: 32\n         line 243: 37\n         line 244: 44\n         line 245: 62\n         line 246: 71\n         line 247: 73\n         line 249: 74\n-        line 251: 78\n-        line 250: 81\n+        line 250: 78\n         line 252: 82\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n+            0      84     0  this   Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel;\n+            0      84     1 buffer   Ljava/nio/ByteBuffer;\n            37      36     2   pos   I\n            44      29     3   len   I\n            74      10     2     e   Ljava/io/IOException;\n-            0      84     0  this   Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel;\n-            0      84     1 buffer   Ljava/nio/ByteBuffer;\n       StackMapTable: number_of_entries = 5\n         frame_type = 15 /* same */\n         frame_type = 16 /* same */\n         frame_type = 104 /* same_locals_1_stack_item */\n           stack = [ class java/io/IOException ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 7\n           locals = [ class org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel, class java/nio/ByteBuffer, class java/io/IOException ]\n           stack = [ class java/io/IOException ]\n         frame_type = 0 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   public boolean isOpen();\n     descriptor: ()Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #17                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n-         4: invokevirtual #72                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z\n-         7: ifne          14\n-        10: iconst_1\n+         1: getfield      #22                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+         4: invokevirtual #87                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z\n+         7: ifeq          14\n+        10: iconst_0\n         11: goto          15\n-        14: iconst_0\n+        14: iconst_1\n         15: ireturn\n       LineNumberTable:\n         line 258: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      16     0  this   Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel;\n       StackMapTable: number_of_entries = 2\n         frame_type = 14 /* same */\n         frame_type = 64 /* same_locals_1_stack_item */\n           stack = [ int ]\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #17                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+         1: getfield      #22                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n          4: iconst_0\n          5: iconst_1\n-         6: invokevirtual #75                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z\n+         6: invokevirtual #90                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z\n          9: ifeq          19\n         12: aload_0\n-        13: getfield      #21                 // Field out:Ljava/io/OutputStream;\n-        16: invokevirtual #79                 // Method java/io/OutputStream.close:()V\n+        13: getfield      #24                 // Field out:Ljava/io/OutputStream;\n+        16: invokevirtual #94                 // Method java/io/OutputStream.close:()V\n         19: return\n       LineNumberTable:\n         line 263: 0\n         line 264: 12\n         line 266: 19\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      20     0  this   Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel;\n       StackMapTable: number_of_entries = 1\n         frame_type = 19 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n-  org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel(java.io.OutputStream, org.apache.commons.compress.utils.FixedLengthBlockOutputStream$1);\n-    descriptor: (Ljava/io/OutputStream;Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$1;)V\n+  org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel(java.io.OutputStream, org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel);\n+    descriptor: (Ljava/io/OutputStream;Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel;)V\n     flags: (0x1000) ACC_SYNTHETIC\n     Code:\n       stack=2, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #1                  // Method \"<init>\":(Ljava/io/OutputStream;)V\n+         2: invokespecial #96                 // Method \"<init>\":(Ljava/io/OutputStream;)V\n          5: return\n       LineNumberTable:\n-        line 223: 0\n+        line 228: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0       6     0  this   Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel;\n-            0       6     1    x0   Ljava/io/OutputStream;\n-            0       6     2    x1   Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$1;\n }\n SourceFile: \"FixedLengthBlockOutputStream.java\"\n InnerClasses:\n-  private static #106= #2 of #104;        // BufferAtATimeOutputChannel=class org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel of class org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n-  static #107;                            // class org/apache/commons/compress/utils/FixedLengthBlockOutputStream$1\n+  private static #103= #1 of #101;        // BufferAtATimeOutputChannel=class org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel of class org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n"}]}
