{"diffoscope-json-version": 1, "source1": "first/ZstdCompressorInputStream.class", "source2": "second/ZstdCompressorInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,55 +10,55 @@\n import org.apache.commons.compress.compressors.CompressorInputStream;\n \n public class ZstdCompressorInputStream extends CompressorInputStream implements InputStreamStatistics\n {\n     private final CountingInputStream countingStream;\n     private final ZstdInputStream decIS;\n     \n-    public ZstdCompressorInputStream(final InputStream in) throws IOException {\n-        this.decIS = new ZstdInputStream((InputStream)(this.countingStream = new CountingInputStream(in)));\n+    public ZstdCompressorInputStream(final InputStream inputStream) throws IOException {\n+        this.decIS = new ZstdInputStream((InputStream)(this.countingStream = new CountingInputStream(inputStream)));\n     }\n     \n     public int available() throws IOException {\n         return this.decIS.available();\n     }\n     \n     public void close() throws IOException {\n         this.decIS.close();\n     }\n     \n-    public int read(final byte[] b) throws IOException {\n-        return this.read(b, 0, b.length);\n+    public int read(final byte[] array) throws IOException {\n+        return this.read(array, 0, array.length);\n     }\n     \n     public long skip(final long n) throws IOException {\n         return IOUtils.skip((InputStream)this.decIS, n);\n     }\n     \n-    public synchronized void mark(final int readlimit) {\n-        this.decIS.mark(readlimit);\n+    public synchronized void mark(final int n) {\n+        this.decIS.mark(n);\n     }\n     \n     public boolean markSupported() {\n         return this.decIS.markSupported();\n     }\n     \n     public int read() throws IOException {\n-        final int ret = this.decIS.read();\n-        this.count((int)((ret != -1) ? 1 : 0));\n-        return ret;\n+        final int read = this.decIS.read();\n+        this.count((int)((read != -1) ? 1 : 0));\n+        return read;\n     }\n     \n-    public int read(final byte[] buf, final int off, final int len) throws IOException {\n-        if (len == 0) {\n+    public int read(final byte[] array, final int n, final int n2) throws IOException {\n+        if (n2 == 0) {\n             return 0;\n         }\n-        final int ret = this.decIS.read(buf, off, len);\n-        this.count(ret);\n-        return ret;\n+        final int read = this.decIS.read(array, n, n2);\n+        this.count(read);\n+        return read;\n     }\n     \n     public String toString() {\n         return this.decIS.toString();\n     }\n     \n     public synchronized void reset() throws IOException {\n"}]}
