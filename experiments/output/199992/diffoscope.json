{"diffoscope-json-version": 1, "source1": "first/Field.class", "source2": "second/Field.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,40 +12,40 @@\n     private static BCELComparator bcelComparator;\n     static final Field[] EMPTY_FIELD_ARRAY;\n     \n     public static BCELComparator getComparator() {\n         return Field.bcelComparator;\n     }\n     \n-    public static void setComparator(final BCELComparator comparator) {\n-        Field.bcelComparator = comparator;\n+    public static void setComparator(final BCELComparator bcelComparator) {\n+        Field.bcelComparator = bcelComparator;\n     }\n     \n-    Field(final DataInput file, final ConstantPool constantPool) throws IOException, ClassFormatException {\n-        super(file, constantPool);\n+    Field(final DataInput dataInput, final ConstantPool constantPool) throws IOException, ClassFormatException {\n+        super(dataInput, constantPool);\n     }\n     \n-    public Field(final Field c) {\n-        super((FieldOrMethod)c);\n+    public Field(final Field field) {\n+        super((FieldOrMethod)field);\n     }\n     \n-    public Field(final int accessFlags, final int nameIndex, final int signatureIndex, final Attribute[] attributes, final ConstantPool constantPool) {\n-        super(accessFlags, nameIndex, signatureIndex, attributes, constantPool);\n+    public Field(final int n, final int n2, final int n3, final Attribute[] array, final ConstantPool constantPool) {\n+        super(n, n2, n3, array, constantPool);\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitField(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitField(this);\n     }\n     \n     public Field copy(final ConstantPool constantPool) {\n         return (Field)this.copy_(constantPool);\n     }\n     \n-    public boolean equals(final Object obj) {\n-        return Field.bcelComparator.equals((Object)this, obj);\n+    public boolean equals(final Object o) {\n+        return Field.bcelComparator.equals((Object)this, o);\n     }\n     \n     public ConstantValue getConstantValue() {\n         for (final Attribute attribute : super.getAttributes()) {\n             if (attribute.getTag() == 1) {\n                 return (ConstantValue)attribute;\n             }\n@@ -58,30 +58,30 @@\n     }\n     \n     public int hashCode() {\n         return Field.bcelComparator.hashCode((Object)this);\n     }\n     \n     public String toString() {\n-        String access = Utility.accessToString(super.getAccessFlags());\n-        access = (access.isEmpty() ? \"\" : (access + \" \"));\n-        final String signature = Utility.signatureToString(this.getSignature());\n+        final String accessToString = Utility.accessToString(super.getAccessFlags());\n+        final String str = accessToString.isEmpty() ? \"\" : (accessToString + \" \");\n+        final String signatureToString = Utility.signatureToString(this.getSignature());\n         final String name = this.getName();\n-        final StringBuilder buf = new StringBuilder(64);\n-        buf.append(access).append(signature).append(\" \").append(name);\n-        final ConstantValue cv = this.getConstantValue();\n-        if (cv != null) {\n-            buf.append(\" = \").append(cv);\n+        final StringBuilder sb = new StringBuilder(64);\n+        sb.append(str).append(signatureToString).append(\" \").append(name);\n+        final ConstantValue constantValue = this.getConstantValue();\n+        if (constantValue != null) {\n+            sb.append(\" = \").append(constantValue);\n         }\n-        for (final Attribute attribute : super.getAttributes()) {\n-            if (!(attribute instanceof ConstantValue)) {\n-                buf.append(\" [\").append(attribute).append(\"]\");\n+        for (final Attribute obj : super.getAttributes()) {\n+            if (!(obj instanceof ConstantValue)) {\n+                sb.append(\" [\").append(obj).append(\"]\");\n             }\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n     \n     static {\n         EMPTY_ARRAY = new Field[0];\n         Field.bcelComparator = (BCELComparator)new Field.Field$1();\n         EMPTY_FIELD_ARRAY = new Field[0];\n     }\n"}]}
