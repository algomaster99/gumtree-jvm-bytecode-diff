{"diffoscope-json-version": 1, "source1": "first/Messages.class", "source2": "second/Messages.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,108 +8,106 @@\n import java.util.MissingResourceException;\n import java.util.ResourceBundle;\n \n public class Messages\n {\n     private static ResourceBundle bundle;\n     \n-    public static String getString(final String msg) {\n+    public static String getString(final String s) {\n         if (Messages.bundle == null) {\n-            return msg;\n+            return s;\n         }\n         try {\n-            return Messages.bundle.getString(msg);\n+            return Messages.bundle.getString(s);\n         }\n-        catch (final MissingResourceException e) {\n-            return \"Missing message: \" + msg;\n+        catch (final MissingResourceException ex) {\n+            return \"Missing message: \" + s;\n         }\n     }\n     \n-    public static String getString(final String msg, final Object arg) {\n-        return getString(msg, new Object[] { arg });\n+    public static String getString(final String s, final Object o) {\n+        return getString(s, new Object[] { o });\n     }\n     \n-    public static String getString(final String msg, final int arg) {\n-        return getString(msg, new Object[] { Integer.toString(arg) });\n+    public static String getString(final String s, final int i) {\n+        return getString(s, new Object[] { Integer.toString(i) });\n     }\n     \n-    public static String getString(final String msg, final char arg) {\n-        return getString(msg, new Object[] { String.valueOf(arg) });\n+    public static String getString(final String s, final char c) {\n+        return getString(s, new Object[] { String.valueOf(c) });\n     }\n     \n-    public static String getString(final String msg, final Object arg1, final Object arg2) {\n-        return getString(msg, new Object[] { arg1, arg2 });\n+    public static String getString(final String s, final Object o, final Object o2) {\n+        return getString(s, new Object[] { o, o2 });\n     }\n     \n-    public static String getString(final String msg, final Object[] args) {\n-        String format = msg;\n+    public static String getString(final String key, final Object[] array) {\n+        String string = key;\n         if (Messages.bundle != null) {\n             try {\n-                format = Messages.bundle.getString(msg);\n+                string = Messages.bundle.getString(key);\n             }\n             catch (final MissingResourceException ex) {}\n         }\n-        return format(format, args);\n+        return format(string, array);\n     }\n     \n-    public static String format(final String format, final Object[] args) {\n-        final StringBuilder answer = new StringBuilder(format.length() + args.length * 20);\n-        final String[] argStrings = new String[args.length];\n-        int i = 0;\n-        Arrays.setAll(argStrings, i -> Objects.toString(args[i], \"<null>\"));\n-        int lastI;\n-        for (lastI = 0, i = format.indexOf(123, 0); i >= 0; i = format.indexOf(123, lastI)) {\n-            if (i != 0 && format.charAt(i - 1) == '\\\\') {\n+    public static String format(final String s, final Object[] array) {\n+        final StringBuilder sb = new StringBuilder(s.length() + array.length * 20);\n+        final String[] array2 = new String[array.length];\n+        Arrays.setAll(array2, n2 -> Objects.toString(array3[n2], \"<null>\"));\n+        int length = 0;\n+        for (int i = s.indexOf(123, 0); i >= 0; i = s.indexOf(123, length)) {\n+            if (i != 0 && s.charAt(i - 1) == '\\\\') {\n                 if (i != 1) {\n-                    answer.append(format.substring(lastI, i - 1));\n+                    sb.append(s.substring(length, i - 1));\n                 }\n-                answer.append('{');\n-                lastI = i + 1;\n+                sb.append('{');\n+                length = i + 1;\n             }\n-            else if (i > format.length() - 3) {\n-                answer.append(format.substring(lastI));\n-                lastI = format.length();\n+            else if (i > s.length() - 3) {\n+                sb.append(s.substring(length));\n+                length = s.length();\n             }\n             else {\n-                final int argnum = (byte)Character.digit(format.charAt(i + 1), 10);\n-                if (argnum < 0 || format.charAt(i + 2) != '}') {\n-                    answer.append(format.substring(lastI, i + 1));\n-                    lastI = i + 1;\n+                final byte b = (byte)Character.digit(s.charAt(i + 1), 10);\n+                if (b < 0 || s.charAt(i + 2) != '}') {\n+                    sb.append(s.substring(length, i + 1));\n+                    length = i + 1;\n                 }\n                 else {\n-                    answer.append(format.substring(lastI, i));\n-                    if (argnum >= argStrings.length) {\n-                        answer.append(\"<missing argument>\");\n+                    sb.append(s.substring(length, i));\n+                    if (b >= array2.length) {\n+                        sb.append(\"<missing argument>\");\n                     }\n                     else {\n-                        answer.append(argStrings[argnum]);\n+                        sb.append(array2[b]);\n                     }\n-                    lastI = i + 3;\n+                    length = i + 3;\n                 }\n             }\n         }\n-        if (lastI < format.length()) {\n-            answer.append(format.substring(lastI));\n+        if (length < s.length()) {\n+            sb.append(s.substring(length));\n         }\n-        return answer.toString();\n+        return sb.toString();\n     }\n     \n-    public static ResourceBundle setLocale(final Locale locale, final String resource) {\n+    public static ResourceBundle setLocale(final Locale locale, final String s) {\n         try {\n-            final ClassLoader loader = null;\n-            return AccessController.doPrivileged(() -> ResourceBundle.getBundle(resource, locale, (loader != null) ? loader : ClassLoader.getSystemClassLoader()));\n+            return AccessController.doPrivileged(() -> ResourceBundle.getBundle(baseName, locale2, (classLoader != null) ? classLoader : ClassLoader.getSystemClassLoader()));\n         }\n         catch (final MissingResourceException ex) {\n             return null;\n         }\n     }\n     \n     static {\n         Messages.bundle = null;\n         try {\n             Messages.bundle = setLocale(Locale.getDefault(), \"org.apache.commons.compress.harmony.archive.internal.nls.messages\");\n         }\n-        catch (final Throwable e) {\n-            e.printStackTrace();\n+        catch (final Throwable t) {\n+            t.printStackTrace();\n         }\n     }\n }\n"}]}
