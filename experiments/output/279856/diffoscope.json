{"diffoscope-json-version": 1, "source1": "first/TestServletRequestConfiguration.class", "source2": "second/TestServletRequestConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -2,62 +2,58 @@\n package org.apache.commons.configuration2.web;\n \n import java.util.List;\n import org.junit.Assert;\n import org.junit.Test;\n import org.apache.commons.configuration2.BaseConfiguration;\n import org.apache.commons.configuration2.AbstractConfiguration;\n-import javax.servlet.ServletRequest;\n import org.apache.commons.configuration2.convert.ListDelimiterHandler;\n import org.apache.commons.configuration2.convert.DefaultListDelimiterHandler;\n+import javax.servlet.ServletRequest;\n import org.apache.commons.configuration2.Configuration;\n import org.apache.commons.configuration2.TestAbstractConfiguration;\n \n public class TestServletRequestConfiguration extends TestAbstractConfiguration\n {\n-    private ServletRequestConfiguration createConfiguration(final Configuration base) {\n-        final ServletRequest request = (ServletRequest)new TestServletRequestConfiguration.TestServletRequestConfiguration$1(this, base);\n-        final ServletRequestConfiguration config = new ServletRequestConfiguration(request);\n-        config.setListDelimiterHandler((ListDelimiterHandler)new DefaultListDelimiterHandler(','));\n-        return config;\n+    private ServletRequestConfiguration createConfiguration(final Configuration configuration) {\n+        final ServletRequestConfiguration servletRequestConfiguration = new ServletRequestConfiguration((ServletRequest)new TestServletRequestConfiguration.TestServletRequestConfiguration$1(this, configuration));\n+        servletRequestConfiguration.setListDelimiterHandler((ListDelimiterHandler)new DefaultListDelimiterHandler(','));\n+        return servletRequestConfiguration;\n     }\n     \n     protected AbstractConfiguration getConfiguration() {\n-        final Configuration configuration = (Configuration)new BaseConfiguration();\n-        configuration.setProperty(\"key1\", (Object)\"value1\");\n-        configuration.setProperty(\"key2\", (Object)\"value2\");\n-        configuration.addProperty(\"list\", (Object)\"value1\");\n-        configuration.addProperty(\"list\", (Object)\"value2\");\n-        configuration.addProperty(\"listesc\", (Object)\"value1\\\\,value2\");\n-        return (AbstractConfiguration)this.createConfiguration(configuration);\n+        final BaseConfiguration baseConfiguration = new BaseConfiguration();\n+        ((Configuration)baseConfiguration).setProperty(\"key1\", (Object)\"value1\");\n+        ((Configuration)baseConfiguration).setProperty(\"key2\", (Object)\"value2\");\n+        ((Configuration)baseConfiguration).addProperty(\"list\", (Object)\"value1\");\n+        ((Configuration)baseConfiguration).addProperty(\"list\", (Object)\"value2\");\n+        ((Configuration)baseConfiguration).addProperty(\"listesc\", (Object)\"value1\\\\,value2\");\n+        return (AbstractConfiguration)this.createConfiguration((Configuration)baseConfiguration);\n     }\n     \n     protected AbstractConfiguration getEmptyConfiguration() {\n-        final ServletRequest request = (ServletRequest)new TestServletRequestConfiguration.TestServletRequestConfiguration$2(this);\n-        return (AbstractConfiguration)new ServletRequestConfiguration(request);\n+        return (AbstractConfiguration)new ServletRequestConfiguration((ServletRequest)new TestServletRequestConfiguration.TestServletRequestConfiguration$2(this));\n     }\n     \n     @Test(expected = UnsupportedOperationException.class)\n     public void testAddPropertyDirect() {\n         super.testAddPropertyDirect();\n     }\n     \n     @Test(expected = UnsupportedOperationException.class)\n     public void testClearProperty() {\n         super.testClearProperty();\n     }\n     \n     @Test\n     public void testListWithEscapedElements() {\n-        final String[] values = { \"test1\", \"test2\\\\,test3\", \"test4\\\\,test5\" };\n-        final String listKey = \"test.list\";\n-        final BaseConfiguration config = new BaseConfiguration();\n-        config.addProperty(\"test.list\", (Object)values);\n-        Assert.assertEquals(\"Wrong number of list elements\", (long)values.length, (long)config.getList(\"test.list\").size());\n-        final Configuration c = (Configuration)this.createConfiguration((Configuration)config);\n-        final List<?> v = c.getList(\"test.list\");\n-        Assert.assertEquals(\"Wrong number of elements in list\", (long)values.length, (long)v.size());\n-        for (int i = 0; i < values.length; ++i) {\n-            Assert.assertEquals(\"Wrong value at index \" + i, (Object)values[i].replace(\"\\\\\", \"\"), (Object)v.get(i));\n+        final String[] array = { \"test1\", \"test2\\\\,test3\", \"test4\\\\,test5\" };\n+        final BaseConfiguration baseConfiguration = new BaseConfiguration();\n+        baseConfiguration.addProperty(\"test.list\", (Object)array);\n+        Assert.assertEquals(\"Wrong number of list elements\", (long)array.length, (long)baseConfiguration.getList(\"test.list\").size());\n+        final List list = ((Configuration)this.createConfiguration((Configuration)baseConfiguration)).getList(\"test.list\");\n+        Assert.assertEquals(\"Wrong number of elements in list\", (long)array.length, (long)list.size());\n+        for (int i = 0; i < array.length; ++i) {\n+            Assert.assertEquals(\"Wrong value at index \" + i, (Object)array[i].replace(\"\\\\\", \"\"), list.get(i));\n         }\n     }\n }\n"}]}
