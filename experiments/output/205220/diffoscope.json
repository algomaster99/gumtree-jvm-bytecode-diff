{"diffoscope-json-version": 1, "source1": "first/TreeUtils.class", "source2": "second/TreeUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,37 +6,38 @@\n import java.io.PrintStream;\n \n public final class TreeUtils\n {\n     private TreeUtils() {\n     }\n     \n-    public static void printTree(final PrintStream stream, final ImmutableNode result) {\n-        if (stream != null) {\n-            printTree(stream, \"\", result);\n+    public static void printTree(final PrintStream printStream, final ImmutableNode immutableNode) {\n+        if (printStream != null) {\n+            printTree(printStream, \"\", immutableNode);\n         }\n     }\n     \n-    private static void printTree(final PrintStream stream, final String indent, final ImmutableNode result) {\n-        final StringBuilder buffer = new StringBuilder(indent).append(\"<\").append(result.getNodeName());\n-        for (final Map.Entry<String, Object> e : result.getAttributes().entrySet()) {\n-            buffer.append(' ').append(e.getKey()).append(\"='\").append(e.getValue()).append(\"'\");\n+    private static void printTree(final PrintStream printStream, final String s, final ImmutableNode immutableNode) {\n+        final StringBuilder append = new StringBuilder(s).append(\"<\").append(immutableNode.getNodeName());\n+        for (final Map.Entry entry : immutableNode.getAttributes().entrySet()) {\n+            append.append(' ').append((String)entry.getKey()).append(\"='\").append(entry.getValue()).append(\"'\");\n         }\n-        buffer.append(\">\");\n-        stream.print(buffer.toString());\n-        if (result.getValue() != null) {\n-            stream.print(result.getValue());\n+        append.append(\">\");\n+        printStream.print(append.toString());\n+        if (immutableNode.getValue() != null) {\n+            printStream.print(immutableNode.getValue());\n         }\n-        boolean newline = false;\n-        if (!result.getChildren().isEmpty()) {\n-            stream.print(\"\\n\");\n-            for (final ImmutableNode child : result.getChildren()) {\n-                printTree(stream, indent + \"  \", child);\n+        boolean b = false;\n+        if (!immutableNode.getChildren().isEmpty()) {\n+            printStream.print(\"\\n\");\n+            final Iterator iterator2 = immutableNode.getChildren().iterator();\n+            while (iterator2.hasNext()) {\n+                printTree(printStream, s + \"  \", (ImmutableNode)iterator2.next());\n             }\n-            newline = true;\n+            b = true;\n         }\n-        if (newline) {\n-            stream.print(indent);\n+        if (b) {\n+            printStream.print(s);\n         }\n-        stream.println(\"</\" + result.getNodeName() + \">\");\n+        printStream.println(\"</\" + immutableNode.getNodeName() + \">\");\n     }\n }\n"}]}
