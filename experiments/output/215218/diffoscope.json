{"diffoscope-json-version": 1, "source1": "first/VerifierAppFrame.class", "source2": "second/VerifierAppFrame.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -103,16 +103,16 @@\n         this.jMenu2 = new JMenu();\n         this.whatisMenuItem = new JMenuItem();\n         this.aboutMenuItem = new JMenuItem();\n         this.enableEvents(64L);\n         try {\n             this.jbInit();\n         }\n-        catch (final Exception e) {\n-            e.printStackTrace();\n+        catch (final Exception ex) {\n+            ex.printStackTrace();\n         }\n     }\n     \n     private void jbInit() throws Exception {\n         (this.contentPane = (JPanel)this.getContentPane()).setLayout(this.cardLayout1);\n         this.setJMenuBar(this.jMenuBar1);\n         this.setSize(new Dimension(708, 451));\n@@ -128,15 +128,15 @@\n         this.messagesPanel.setMinimumSize(new Dimension(100, 100));\n         this.messagesPanel.setLayout(this.gridLayout3);\n         this.jPanel2.setMinimumSize(new Dimension(200, 100));\n         this.jMenu1.setText(\"File\");\n         this.jScrollPane1.getViewport().setBackground(Color.red);\n         this.messagesScrollPane.getViewport().setBackground(Color.red);\n         this.messagesScrollPane.setPreferredSize(new Dimension(10, 10));\n-        this.classNamesJList.addListSelectionListener(e -> this.classNamesJList_valueChanged(e));\n+        this.classNamesJList.addListSelectionListener(listSelectionEvent2 -> this.classNamesJList_valueChanged(listSelectionEvent2));\n         this.classNamesJList.setSelectionMode(0);\n         this.jScrollPane3.setBorder(BorderFactory.createLineBorder(Color.black));\n         this.jScrollPane3.setPreferredSize(new Dimension(100, 100));\n         this.gridLayout4.setRows(4);\n         this.gridLayout4.setColumns(1);\n         this.gridLayout4.setHgap(1);\n         this.jScrollPane4.setBorder(BorderFactory.createLineBorder(Color.black));\n@@ -146,24 +146,24 @@\n         this.pass1TextPane.setEditable(false);\n         this.pass2TextPane.setBorder(BorderFactory.createRaisedBevelBorder());\n         this.pass2TextPane.setEditable(false);\n         this.messagesTextPane.setBorder(BorderFactory.createRaisedBevelBorder());\n         this.messagesTextPane.setEditable(false);\n         this.newFileMenuItem.setText(\"New...\");\n         this.newFileMenuItem.setAccelerator(KeyStroke.getKeyStroke(78, 2, true));\n-        this.newFileMenuItem.addActionListener(e -> this.newFileMenuItem_actionPerformed(e));\n+        this.newFileMenuItem.addActionListener(actionEvent2 -> this.newFileMenuItem_actionPerformed(actionEvent2));\n         this.pass3aTextPane.setEditable(false);\n         this.pass3bTextPane.setEditable(false);\n-        this.pass3aJList.addListSelectionListener(e -> this.pass3aJList_valueChanged(e));\n-        this.pass3bJList.addListSelectionListener(e -> this.pass3bJList_valueChanged(e));\n+        this.pass3aJList.addListSelectionListener(listSelectionEvent4 -> this.pass3aJList_valueChanged(listSelectionEvent4));\n+        this.pass3bJList.addListSelectionListener(listSelectionEvent6 -> this.pass3bJList_valueChanged(listSelectionEvent6));\n         this.jMenu2.setText(\"Help\");\n         this.whatisMenuItem.setText(\"What is...\");\n-        this.whatisMenuItem.addActionListener(e -> this.whatisMenuItem_actionPerformed(e));\n+        this.whatisMenuItem.addActionListener(actionEvent4 -> this.whatisMenuItem_actionPerformed(actionEvent4));\n         this.aboutMenuItem.setText(\"About\");\n-        this.aboutMenuItem.addActionListener(e -> this.aboutMenuItem_actionPerformed(e));\n+        this.aboutMenuItem.addActionListener(actionEvent6 -> this.aboutMenuItem_actionPerformed(actionEvent6));\n         this.jSplitPane2.add(this.messagesPanel, \"bottom\");\n         this.messagesPanel.add(this.messagesScrollPane, null);\n         this.messagesScrollPane.getViewport().add(this.messagesTextPane, null);\n         this.jSplitPane2.add(this.jPanel3, \"top\");\n         this.jPanel3.add(this.jScrollPane3, null);\n         this.jScrollPane3.getViewport().add(this.pass1TextPane, null);\n         this.jPanel3.add(this.jScrollPane4, null);\n@@ -198,156 +198,152 @@\n     protected void processWindowEvent(final WindowEvent e) {\n         super.processWindowEvent(e);\n         if (e.getID() == 201) {\n             System.exit(0);\n         }\n     }\n     \n-    synchronized void classNamesJList_valueChanged(final ListSelectionEvent e) {\n-        if (e.getValueIsAdjusting()) {\n+    synchronized void classNamesJList_valueChanged(final ListSelectionEvent listSelectionEvent) {\n+        if (listSelectionEvent.getValueIsAdjusting()) {\n             return;\n         }\n         this.current_class = this.classNamesJList.getSelectedValue();\n         try {\n             this.verify();\n         }\n         catch (final ClassNotFoundException ex) {\n             ex.printStackTrace();\n         }\n         this.classNamesJList.setSelectedValue(this.current_class, true);\n     }\n     \n     private void verify() throws ClassNotFoundException {\n         this.setTitle(\"PLEASE WAIT\");\n-        final Verifier v = VerifierFactory.getVerifier(this.current_class);\n-        v.flush();\n-        VerificationResult vr = v.doPass1();\n-        if (vr.getStatus() == 2) {\n-            this.pass1TextPane.setText(vr.getMessage());\n+        final Verifier verifier = VerifierFactory.getVerifier(this.current_class);\n+        verifier.flush();\n+        final VerificationResult doPass1 = verifier.doPass1();\n+        if (doPass1.getStatus() == 2) {\n+            this.pass1TextPane.setText(doPass1.getMessage());\n             this.pass1TextPane.setBackground(Color.red);\n             this.pass2TextPane.setText(\"\");\n             this.pass2TextPane.setBackground(Color.yellow);\n             this.pass3aTextPane.setText(\"\");\n             this.pass3aJList.setListData(new String[0]);\n             this.pass3aTextPane.setBackground(Color.yellow);\n             this.pass3bTextPane.setText(\"\");\n             this.pass3bJList.setListData(new String[0]);\n             this.pass3bTextPane.setBackground(Color.yellow);\n         }\n         else {\n             this.pass1TextPane.setBackground(Color.green);\n-            this.pass1TextPane.setText(vr.getMessage());\n-            vr = v.doPass2();\n-            if (vr.getStatus() == 2) {\n-                this.pass2TextPane.setText(vr.getMessage());\n+            this.pass1TextPane.setText(doPass1.getMessage());\n+            final VerificationResult doPass2 = verifier.doPass2();\n+            if (doPass2.getStatus() == 2) {\n+                this.pass2TextPane.setText(doPass2.getMessage());\n                 this.pass2TextPane.setBackground(Color.red);\n                 this.pass3aTextPane.setText(\"\");\n                 this.pass3aTextPane.setBackground(Color.yellow);\n                 this.pass3aJList.setListData(new String[0]);\n                 this.pass3bTextPane.setText(\"\");\n                 this.pass3bTextPane.setBackground(Color.yellow);\n                 this.pass3bJList.setListData(new String[0]);\n             }\n             else {\n-                this.pass2TextPane.setText(vr.getMessage());\n+                this.pass2TextPane.setText(doPass2.getMessage());\n                 this.pass2TextPane.setBackground(Color.green);\n-                final JavaClass jc = Repository.lookupClass(this.current_class);\n-                final String[] methodnames = new String[jc.getMethods().length];\n-                for (int i = 0; i < jc.getMethods().length; ++i) {\n-                    methodnames[i] = jc.getMethods()[i].toString().replace('\\n', ' ').replace('\\t', ' ');\n-                }\n-                this.pass3aJList.setListData(methodnames);\n-                this.pass3aJList.setSelectionInterval(0, jc.getMethods().length - 1);\n-                this.pass3bJList.setListData(methodnames);\n-                this.pass3bJList.setSelectionInterval(0, jc.getMethods().length - 1);\n+                final JavaClass lookupClass = Repository.lookupClass(this.current_class);\n+                final String[] array = new String[lookupClass.getMethods().length];\n+                for (int i = 0; i < lookupClass.getMethods().length; ++i) {\n+                    array[i] = lookupClass.getMethods()[i].toString().replace('\\n', ' ').replace('\\t', ' ');\n+                }\n+                this.pass3aJList.setListData(array);\n+                this.pass3aJList.setSelectionInterval(0, lookupClass.getMethods().length - 1);\n+                this.pass3bJList.setListData(array);\n+                this.pass3bJList.setSelectionInterval(0, lookupClass.getMethods().length - 1);\n             }\n         }\n-        final String[] msgs = v.getMessages();\n-        this.messagesTextPane.setBackground((msgs.length == 0) ? Color.green : Color.yellow);\n-        final StringBuilder allmsgs = new StringBuilder();\n-        for (int i = 0; i < msgs.length; ++i) {\n-            msgs[i] = msgs[i].replace('\\n', ' ');\n-            allmsgs.append(msgs[i]).append(\"\\n\\n\");\n+        final String[] messages = verifier.getMessages();\n+        this.messagesTextPane.setBackground((messages.length == 0) ? Color.green : Color.yellow);\n+        final StringBuilder sb = new StringBuilder();\n+        for (int j = 0; j < messages.length; ++j) {\n+            messages[j] = messages[j].replace('\\n', ' ');\n+            sb.append(messages[j]).append(\"\\n\\n\");\n         }\n-        this.messagesTextPane.setText(allmsgs.toString());\n+        this.messagesTextPane.setText(sb.toString());\n         this.setTitle(this.current_class + \" - \" + \"JustIce by Enver Haase\");\n     }\n     \n-    void newFileMenuItem_actionPerformed(final ActionEvent e) {\n-        final String classname = JOptionPane.showInputDialog(\"Please enter the fully qualified name of a class or interface to verify:\");\n-        if (classname == null || classname.isEmpty()) {\n+    void newFileMenuItem_actionPerformed(final ActionEvent actionEvent) {\n+        final String showInputDialog = JOptionPane.showInputDialog(\"Please enter the fully qualified name of a class or interface to verify:\");\n+        if (showInputDialog == null || showInputDialog.isEmpty()) {\n             return;\n         }\n-        VerifierFactory.getVerifier(classname);\n-        this.classNamesJList.setSelectedValue(classname, true);\n+        VerifierFactory.getVerifier(showInputDialog);\n+        this.classNamesJList.setSelectedValue(showInputDialog, true);\n     }\n     \n-    synchronized void pass3aJList_valueChanged(final ListSelectionEvent e) {\n-        if (e.getValueIsAdjusting()) {\n+    synchronized void pass3aJList_valueChanged(final ListSelectionEvent listSelectionEvent) {\n+        if (listSelectionEvent.getValueIsAdjusting()) {\n             return;\n         }\n-        final Verifier v = VerifierFactory.getVerifier(this.current_class);\n-        final StringBuilder all3amsg = new StringBuilder();\n-        boolean all3aok = true;\n-        boolean rejected = false;\n+        final Verifier verifier = VerifierFactory.getVerifier(this.current_class);\n+        final StringBuilder sb = new StringBuilder();\n+        boolean b = true;\n+        boolean b2 = false;\n         for (int i = 0; i < this.pass3aJList.getModel().getSize(); ++i) {\n             if (this.pass3aJList.isSelectedIndex(i)) {\n-                final VerificationResult vr = v.doPass3a(i);\n-                if (vr.getStatus() == 2) {\n-                    all3aok = false;\n-                    rejected = true;\n+                final VerificationResult doPass3a = verifier.doPass3a(i);\n+                if (doPass3a.getStatus() == 2) {\n+                    b = false;\n+                    b2 = true;\n                 }\n-                JavaClass jc = null;\n                 try {\n-                    jc = Repository.lookupClass(v.getClassName());\n-                    all3amsg.append(\"Method '\").append(jc.getMethods()[i]).append(\"': \").append(vr.getMessage().replace('\\n', ' ')).append(\"\\n\\n\");\n+                    sb.append(\"Method '\").append(Repository.lookupClass(verifier.getClassName()).getMethods()[i]).append(\"': \").append(doPass3a.getMessage().replace('\\n', ' ')).append(\"\\n\\n\");\n                 }\n                 catch (final ClassNotFoundException ex) {\n                     ex.printStackTrace();\n                 }\n             }\n         }\n-        this.pass3aTextPane.setText(all3amsg.toString());\n-        this.pass3aTextPane.setBackground(all3aok ? Color.green : (rejected ? Color.red : Color.yellow));\n+        this.pass3aTextPane.setText(sb.toString());\n+        this.pass3aTextPane.setBackground(b ? Color.green : (b2 ? Color.red : Color.yellow));\n     }\n     \n-    synchronized void pass3bJList_valueChanged(final ListSelectionEvent e) {\n-        if (e.getValueIsAdjusting()) {\n+    synchronized void pass3bJList_valueChanged(final ListSelectionEvent listSelectionEvent) {\n+        if (listSelectionEvent.getValueIsAdjusting()) {\n             return;\n         }\n-        final Verifier v = VerifierFactory.getVerifier(this.current_class);\n-        final StringBuilder all3bmsg = new StringBuilder();\n-        boolean all3bok = true;\n-        boolean rejected = false;\n+        final Verifier verifier = VerifierFactory.getVerifier(this.current_class);\n+        final StringBuilder sb = new StringBuilder();\n+        boolean b = true;\n+        boolean b2 = false;\n         for (int i = 0; i < this.pass3bJList.getModel().getSize(); ++i) {\n             if (this.pass3bJList.isSelectedIndex(i)) {\n-                final VerificationResult vr = v.doPass3b(i);\n-                if (vr.getStatus() == 2) {\n-                    all3bok = false;\n-                    rejected = true;\n+                final VerificationResult doPass3b = verifier.doPass3b(i);\n+                if (doPass3b.getStatus() == 2) {\n+                    b = false;\n+                    b2 = true;\n                 }\n-                JavaClass jc = null;\n                 try {\n-                    jc = Repository.lookupClass(v.getClassName());\n-                    all3bmsg.append(\"Method '\").append(jc.getMethods()[i]).append(\"': \").append(vr.getMessage().replace('\\n', ' ')).append(\"\\n\\n\");\n+                    sb.append(\"Method '\").append(Repository.lookupClass(verifier.getClassName()).getMethods()[i]).append(\"': \").append(doPass3b.getMessage().replace('\\n', ' ')).append(\"\\n\\n\");\n                 }\n                 catch (final ClassNotFoundException ex) {\n                     ex.printStackTrace();\n                 }\n             }\n         }\n-        this.pass3bTextPane.setText(all3bmsg.toString());\n-        this.pass3bTextPane.setBackground(all3bok ? Color.green : (rejected ? Color.red : Color.yellow));\n+        this.pass3bTextPane.setText(sb.toString());\n+        this.pass3bTextPane.setBackground(b ? Color.green : (b2 ? Color.red : Color.yellow));\n     }\n     \n-    void aboutMenuItem_actionPerformed(final ActionEvent e) {\n+    void aboutMenuItem_actionPerformed(final ActionEvent actionEvent) {\n         JOptionPane.showMessageDialog(this, \"JustIce is a Java class file verifier.\\nIt was implemented by Enver Haase in 2001, 2002.\\n<https://commons.apache.org/bcel/>\", \"JustIce by Enver Haase\", 1);\n     }\n     \n-    void whatisMenuItem_actionPerformed(final ActionEvent e) {\n+    void whatisMenuItem_actionPerformed(final ActionEvent actionEvent) {\n         JOptionPane.showMessageDialog(this, \"The upper four boxes to the right reflect verification passes according to The Java Virtual Machine Specification.\\nThese are (in that order): Pass one, Pass two, Pass three (before data flow analysis), Pass three (data flow analysis).\\nThe bottom box to the right shows (warning) messages; warnings do not cause a class to be rejected.\", \"JustIce by Enver Haase\", 1);\n     }\n     \n     JList<String> getClassNamesJList() {\n         return this.classNamesJList;\n     }\n }\n"}]}
