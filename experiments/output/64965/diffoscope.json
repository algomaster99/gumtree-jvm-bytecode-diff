{"diffoscope-json-version": 1, "source1": "first/UnshrinkingInputStream.class", "source2": "second/UnshrinkingInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,150 +1,144 @@\n-  SHA-256 checksum 8a96aabb6530dc71f51e30244c10434c70f36b36f6b4df2d3bbe3d3cb4f35755\n+  SHA-256 checksum 4b55e6f97e0b29a71d5a9924154659f643a4513ce8e95c8d52989eee893106a2\n   Compiled from \"UnshrinkingInputStream.java\"\n class org.apache.commons.compress.archivers.zip.UnshrinkingInputStream extends org.apache.commons.compress.compressors.lzw.LZWInputStream\n   minor version: 0\n-  major version: 53\n+  major version: 51\n   flags: (0x0020) ACC_SUPER\n   this_class: #1                          // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-  super_class: #4                         // org/apache/commons/compress/compressors/lzw/LZWInputStream\n-  interfaces: 0, fields: 3, methods: 4, attributes: 3\n+  super_class: #3                         // org/apache/commons/compress/compressors/lzw/LZWInputStream\n+  interfaces: 0, fields: 3, methods: 4, attributes: 1\n Constant pool:\n-    #1 = Class              #67           // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-    #2 = Fieldref           #68.#69       // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-    #3 = Methodref          #4.#70        // org/apache/commons/compress/compressors/lzw/LZWInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-    #4 = Class              #71           // org/apache/commons/compress/compressors/lzw/LZWInputStream\n-    #5 = Methodref          #1.#72        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setClearCode:(I)V\n-    #6 = Methodref          #1.#73        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.initializeTables:(I)V\n-    #7 = Methodref          #1.#74        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getPrefixesLength:()I\n-    #8 = Fieldref           #1.#75        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.isUsed:[Z\n-    #9 = Methodref          #1.#76        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getClearCode:()I\n-   #10 = Methodref          #1.#77        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setTableSize:(I)V\n-   #11 = Methodref          #1.#78        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getTableSize:()I\n-   #12 = Methodref          #1.#79        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.addEntry:(IBI)I\n-   #13 = Methodref          #1.#80        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getPrefix:(I)I\n-   #14 = Methodref          #1.#81        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setPrefix:(II)V\n-   #15 = Methodref          #1.#82        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.readNextCode:()I\n-   #16 = Class              #83           // java/io/IOException\n-   #17 = String             #84           // Unexpected EOF;\n-   #18 = Methodref          #16.#85       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #19 = Methodref          #1.#86        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getCodeSize:()I\n-   #20 = Methodref          #1.#87        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.incrementCodeSize:()V\n-   #21 = String             #88           // Attempt to increase code size beyond maximum\n-   #22 = Methodref          #1.#89        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.partialClear:()V\n-   #23 = InvokeDynamic      #0:#93        // #0:makeConcatWithConstants:(I)Ljava/lang/String;\n-   #24 = Methodref          #1.#94        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.addRepeatOfPreviousCode:()I\n-   #25 = Methodref          #1.#95        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.expandCodeToOutputStack:(IZ)I\n-   #26 = Utf8               MAX_CODE_SIZE\n-   #27 = Utf8               I\n-   #28 = Utf8               ConstantValue\n-   #29 = Integer            13\n-   #30 = Utf8               MAX_TABLE_SIZE\n-   #31 = Integer            8192\n-   #32 = Utf8               isUsed\n-   #33 = Utf8               [Z\n-   #34 = Utf8               <init>\n-   #35 = Utf8               (Ljava/io/InputStream;)V\n-   #36 = Utf8               Code\n-   #37 = Utf8               LineNumberTable\n-   #38 = Utf8               LocalVariableTable\n-   #39 = Utf8               i\n-   #40 = Utf8               this\n-   #41 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnshrinkingInputStream;\n-   #42 = Utf8               inputStream\n-   #43 = Utf8               Ljava/io/InputStream;\n-   #44 = Utf8               StackMapTable\n-   #45 = Class              #96           // java/io/InputStream\n-   #46 = Utf8               Exceptions\n-   #47 = Utf8               addEntry\n-   #48 = Utf8               (IB)I\n-   #49 = Utf8               previousCode\n-   #50 = Utf8               character\n-   #51 = Utf8               B\n-   #52 = Utf8               tableSize\n-   #53 = Utf8               idx\n-   #54 = Utf8               partialClear\n-   #55 = Utf8               ()V\n-   #56 = Utf8               isParent\n-   #57 = Class              #33           // \"[Z\"\n-   #58 = Utf8               decompressNextSymbol\n-   #59 = Utf8               ()I\n-   #60 = Utf8               subCode\n-   #61 = Utf8               addedUnfinishedEntry\n-   #62 = Utf8               Z\n-   #63 = Utf8               effectiveCode\n-   #64 = Utf8               code\n-   #65 = Utf8               SourceFile\n-   #66 = Utf8               UnshrinkingInputStream.java\n-   #67 = Utf8               org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-   #68 = Class              #97           // java/nio/ByteOrder\n-   #69 = NameAndType        #98:#99       // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-   #70 = NameAndType        #34:#100      // \"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-   #71 = Utf8               org/apache/commons/compress/compressors/lzw/LZWInputStream\n-   #72 = NameAndType        #101:#102     // setClearCode:(I)V\n-   #73 = NameAndType        #103:#102     // initializeTables:(I)V\n-   #74 = NameAndType        #104:#59      // getPrefixesLength:()I\n-   #75 = NameAndType        #32:#33       // isUsed:[Z\n-   #76 = NameAndType        #105:#59      // getClearCode:()I\n-   #77 = NameAndType        #106:#102     // setTableSize:(I)V\n-   #78 = NameAndType        #107:#59      // getTableSize:()I\n-   #79 = NameAndType        #47:#108      // addEntry:(IBI)I\n-   #80 = NameAndType        #109:#110     // getPrefix:(I)I\n-   #81 = NameAndType        #111:#112     // setPrefix:(II)V\n-   #82 = NameAndType        #113:#59      // readNextCode:()I\n-   #83 = Utf8               java/io/IOException\n-   #84 = Utf8               Unexpected EOF;\n-   #85 = NameAndType        #34:#114      // \"<init>\":(Ljava/lang/String;)V\n-   #86 = NameAndType        #115:#59      // getCodeSize:()I\n-   #87 = NameAndType        #116:#55      // incrementCodeSize:()V\n-   #88 = Utf8               Attempt to increase code size beyond maximum\n-   #89 = NameAndType        #54:#55       // partialClear:()V\n-   #90 = Utf8               BootstrapMethods\n-   #91 = MethodHandle       6:#117        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-   #92 = String             #118          // Invalid clear code subcode \\u0001\n-   #93 = NameAndType        #119:#120     // makeConcatWithConstants:(I)Ljava/lang/String;\n-   #94 = NameAndType        #121:#59      // addRepeatOfPreviousCode:()I\n-   #95 = NameAndType        #122:#123     // expandCodeToOutputStack:(IZ)I\n-   #96 = Utf8               java/io/InputStream\n-   #97 = Utf8               java/nio/ByteOrder\n-   #98 = Utf8               LITTLE_ENDIAN\n-   #99 = Utf8               Ljava/nio/ByteOrder;\n-  #100 = Utf8               (Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-  #101 = Utf8               setClearCode\n-  #102 = Utf8               (I)V\n-  #103 = Utf8               initializeTables\n-  #104 = Utf8               getPrefixesLength\n-  #105 = Utf8               getClearCode\n-  #106 = Utf8               setTableSize\n-  #107 = Utf8               getTableSize\n-  #108 = Utf8               (IBI)I\n-  #109 = Utf8               getPrefix\n-  #110 = Utf8               (I)I\n-  #111 = Utf8               setPrefix\n-  #112 = Utf8               (II)V\n-  #113 = Utf8               readNextCode\n-  #114 = Utf8               (Ljava/lang/String;)V\n-  #115 = Utf8               getCodeSize\n-  #116 = Utf8               incrementCodeSize\n-  #117 = Methodref          #124.#125     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #118 = Utf8               Invalid clear code subcode \\u0001\n-  #119 = Utf8               makeConcatWithConstants\n-  #120 = Utf8               (I)Ljava/lang/String;\n-  #121 = Utf8               addRepeatOfPreviousCode\n-  #122 = Utf8               expandCodeToOutputStack\n-  #123 = Utf8               (IZ)I\n-  #124 = Class              #126          // java/lang/invoke/StringConcatFactory\n-  #125 = NameAndType        #119:#130     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #126 = Utf8               java/lang/invoke/StringConcatFactory\n-  #127 = Class              #132          // java/lang/invoke/MethodHandles$Lookup\n-  #128 = Utf8               Lookup\n-  #129 = Utf8               InnerClasses\n-  #130 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #131 = Class              #133          // java/lang/invoke/MethodHandles\n-  #132 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #133 = Utf8               java/lang/invoke/MethodHandles\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+    #2 = Utf8               org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+    #3 = Class              #4            // org/apache/commons/compress/compressors/lzw/LZWInputStream\n+    #4 = Utf8               org/apache/commons/compress/compressors/lzw/LZWInputStream\n+    #5 = Utf8               MAX_CODE_SIZE\n+    #6 = Utf8               I\n+    #7 = Utf8               ConstantValue\n+    #8 = Integer            13\n+    #9 = Utf8               MAX_TABLE_SIZE\n+   #10 = Integer            8192\n+   #11 = Utf8               isUsed\n+   #12 = Utf8               [Z\n+   #13 = Utf8               <init>\n+   #14 = Utf8               (Ljava/io/InputStream;)V\n+   #15 = Utf8               Exceptions\n+   #16 = Class              #17           // java/io/IOException\n+   #17 = Utf8               java/io/IOException\n+   #18 = Utf8               Code\n+   #19 = Fieldref           #20.#22       // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+   #20 = Class              #21           // java/nio/ByteOrder\n+   #21 = Utf8               java/nio/ByteOrder\n+   #22 = NameAndType        #23:#24       // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+   #23 = Utf8               LITTLE_ENDIAN\n+   #24 = Utf8               Ljava/nio/ByteOrder;\n+   #25 = Methodref          #3.#26        // org/apache/commons/compress/compressors/lzw/LZWInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+   #26 = NameAndType        #13:#27       // \"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+   #27 = Utf8               (Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+   #28 = Methodref          #1.#29        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setClearCode:(I)V\n+   #29 = NameAndType        #30:#31       // setClearCode:(I)V\n+   #30 = Utf8               setClearCode\n+   #31 = Utf8               (I)V\n+   #32 = Methodref          #1.#33        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.initializeTables:(I)V\n+   #33 = NameAndType        #34:#31       // initializeTables:(I)V\n+   #34 = Utf8               initializeTables\n+   #35 = Methodref          #1.#36        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getPrefixesLength:()I\n+   #36 = NameAndType        #37:#38       // getPrefixesLength:()I\n+   #37 = Utf8               getPrefixesLength\n+   #38 = Utf8               ()I\n+   #39 = Fieldref           #1.#40        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.isUsed:[Z\n+   #40 = NameAndType        #11:#12       // isUsed:[Z\n+   #41 = Methodref          #1.#42        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getClearCode:()I\n+   #42 = NameAndType        #43:#38       // getClearCode:()I\n+   #43 = Utf8               getClearCode\n+   #44 = Methodref          #1.#45        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setTableSize:(I)V\n+   #45 = NameAndType        #46:#31       // setTableSize:(I)V\n+   #46 = Utf8               setTableSize\n+   #47 = Utf8               LineNumberTable\n+   #48 = Utf8               LocalVariableTable\n+   #49 = Utf8               this\n+   #50 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnshrinkingInputStream;\n+   #51 = Utf8               inputStream\n+   #52 = Utf8               Ljava/io/InputStream;\n+   #53 = Utf8               i\n+   #54 = Utf8               StackMapTable\n+   #55 = Class              #56           // java/io/InputStream\n+   #56 = Utf8               java/io/InputStream\n+   #57 = Utf8               addEntry\n+   #58 = Utf8               (IB)I\n+   #59 = Methodref          #1.#60        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getTableSize:()I\n+   #60 = NameAndType        #61:#38       // getTableSize:()I\n+   #61 = Utf8               getTableSize\n+   #62 = Methodref          #1.#63        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.addEntry:(IBI)I\n+   #63 = NameAndType        #57:#64       // addEntry:(IBI)I\n+   #64 = Utf8               (IBI)I\n+   #65 = Utf8               previousCode\n+   #66 = Utf8               character\n+   #67 = Utf8               B\n+   #68 = Utf8               tableSize\n+   #69 = Utf8               idx\n+   #70 = Utf8               partialClear\n+   #71 = Utf8               ()V\n+   #72 = Methodref          #1.#73        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getPrefix:(I)I\n+   #73 = NameAndType        #74:#75       // getPrefix:(I)I\n+   #74 = Utf8               getPrefix\n+   #75 = Utf8               (I)I\n+   #76 = Methodref          #1.#77        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setPrefix:(II)V\n+   #77 = NameAndType        #78:#79       // setPrefix:(II)V\n+   #78 = Utf8               setPrefix\n+   #79 = Utf8               (II)V\n+   #80 = Utf8               isParent\n+   #81 = Class              #12           // \"[Z\"\n+   #82 = Utf8               decompressNextSymbol\n+   #83 = Methodref          #1.#84        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.readNextCode:()I\n+   #84 = NameAndType        #85:#38       // readNextCode:()I\n+   #85 = Utf8               readNextCode\n+   #86 = String             #87           // Unexpected EOF;\n+   #87 = Utf8               Unexpected EOF;\n+   #88 = Methodref          #16.#89       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #89 = NameAndType        #13:#90       // \"<init>\":(Ljava/lang/String;)V\n+   #90 = Utf8               (Ljava/lang/String;)V\n+   #91 = Methodref          #1.#92        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getCodeSize:()I\n+   #92 = NameAndType        #93:#38       // getCodeSize:()I\n+   #93 = Utf8               getCodeSize\n+   #94 = Methodref          #1.#95        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.incrementCodeSize:()V\n+   #95 = NameAndType        #96:#71       // incrementCodeSize:()V\n+   #96 = Utf8               incrementCodeSize\n+   #97 = String             #98           // Attempt to increase code size beyond maximum\n+   #98 = Utf8               Attempt to increase code size beyond maximum\n+   #99 = Methodref          #1.#100       // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.partialClear:()V\n+  #100 = NameAndType        #70:#71       // partialClear:()V\n+  #101 = Class              #102          // java/lang/StringBuilder\n+  #102 = Utf8               java/lang/StringBuilder\n+  #103 = String             #104          // Invalid clear code subcode\n+  #104 = Utf8               Invalid clear code subcode\n+  #105 = Methodref          #101.#89      // java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+  #106 = Methodref          #101.#107     // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+  #107 = NameAndType        #108:#109     // append:(I)Ljava/lang/StringBuilder;\n+  #108 = Utf8               append\n+  #109 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #110 = Methodref          #101.#111     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #111 = NameAndType        #112:#113     // toString:()Ljava/lang/String;\n+  #112 = Utf8               toString\n+  #113 = Utf8               ()Ljava/lang/String;\n+  #114 = Methodref          #1.#115       // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.addRepeatOfPreviousCode:()I\n+  #115 = NameAndType        #116:#38      // addRepeatOfPreviousCode:()I\n+  #116 = Utf8               addRepeatOfPreviousCode\n+  #117 = Methodref          #1.#118       // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.expandCodeToOutputStack:(IZ)I\n+  #118 = NameAndType        #119:#120     // expandCodeToOutputStack:(IZ)I\n+  #119 = Utf8               expandCodeToOutputStack\n+  #120 = Utf8               (IZ)I\n+  #121 = Utf8               code\n+  #122 = Utf8               subCode\n+  #123 = Utf8               addedUnfinishedEntry\n+  #124 = Utf8               Z\n+  #125 = Utf8               effectiveCode\n+  #126 = Utf8               SourceFile\n+  #127 = Utf8               UnshrinkingInputStream.java\n {\n   private static final int MAX_CODE_SIZE = 13;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 13\n \n   private static final int MAX_TABLE_SIZE = 8192;\n@@ -155,357 +149,355 @@\n   private final boolean[] isUsed;\n     descriptor: [Z\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   public org.apache.commons.compress.archivers.zip.UnshrinkingInputStream(java.io.InputStream) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: getstatic     #2                  // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-         5: invokespecial #3                  // Method org/apache/commons/compress/compressors/lzw/LZWInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+         2: getstatic     #19                 // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+         5: invokespecial #25                 // Method org/apache/commons/compress/compressors/lzw/LZWInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n          8: aload_0\n          9: bipush        9\n-        11: invokevirtual #5                  // Method setClearCode:(I)V\n+        11: invokevirtual #28                 // Method setClearCode:(I)V\n         14: aload_0\n         15: bipush        13\n-        17: invokevirtual #6                  // Method initializeTables:(I)V\n+        17: invokevirtual #32                 // Method initializeTables:(I)V\n         20: aload_0\n         21: aload_0\n-        22: invokevirtual #7                  // Method getPrefixesLength:()I\n+        22: invokevirtual #35                 // Method getPrefixesLength:()I\n         25: newarray       boolean\n-        27: putfield      #8                  // Field isUsed:[Z\n+        27: putfield      #39                 // Field isUsed:[Z\n         30: iconst_0\n         31: istore_2\n-        32: iload_2\n-        33: sipush        256\n-        36: if_icmpge     52\n-        39: aload_0\n-        40: getfield      #8                  // Field isUsed:[Z\n-        43: iload_2\n-        44: iconst_1\n-        45: bastore\n-        46: iinc          2, 1\n-        49: goto          32\n+        32: goto          45\n+        35: aload_0\n+        36: getfield      #39                 // Field isUsed:[Z\n+        39: iload_2\n+        40: iconst_1\n+        41: bastore\n+        42: iinc          2, 1\n+        45: iload_2\n+        46: sipush        256\n+        49: if_icmplt     35\n         52: aload_0\n         53: aload_0\n-        54: invokevirtual #9                  // Method getClearCode:()I\n+        54: invokevirtual #41                 // Method getClearCode:()I\n         57: iconst_1\n         58: iadd\n-        59: invokevirtual #10                 // Method setTableSize:(I)V\n+        59: invokevirtual #44                 // Method setTableSize:(I)V\n         62: return\n       LineNumberTable:\n         line 44: 0\n         line 45: 8\n         line 46: 14\n         line 47: 20\n         line 48: 30\n-        line 49: 39\n-        line 48: 46\n+        line 49: 35\n+        line 48: 42\n         line 51: 52\n         line 52: 62\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           32      20     2     i   I\n             0      63     0  this   Lorg/apache/commons/compress/archivers/zip/UnshrinkingInputStream;\n             0      63     1 inputStream   Ljava/io/InputStream;\n+           32      20     2     i   I\n       StackMapTable: number_of_entries = 2\n         frame_type = 255 /* full_frame */\n-          offset_delta = 32\n+          offset_delta = 35\n           locals = [ class org/apache/commons/compress/archivers/zip/UnshrinkingInputStream, class java/io/InputStream, int ]\n           stack = []\n-        frame_type = 250 /* chop */\n-          offset_delta = 19\n-    Exceptions:\n-      throws java.io.IOException\n+        frame_type = 9 /* same */\n \n   protected int addEntry(int, byte) throws java.io.IOException;\n     descriptor: (IB)I\n     flags: (0x0004) ACC_PROTECTED\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=5, args_size=3\n          0: aload_0\n-         1: invokevirtual #11                 // Method getTableSize:()I\n+         1: invokevirtual #59                 // Method getTableSize:()I\n          4: istore_3\n-         5: iload_3\n-         6: sipush        8192\n-         9: if_icmpge     27\n-        12: aload_0\n-        13: getfield      #8                  // Field isUsed:[Z\n-        16: iload_3\n-        17: baload\n-        18: ifeq          27\n-        21: iinc          3, 1\n-        24: goto          5\n+         5: goto          11\n+         8: iinc          3, 1\n+        11: iload_3\n+        12: sipush        8192\n+        15: if_icmpge     27\n+        18: aload_0\n+        19: getfield      #39                 // Field isUsed:[Z\n+        22: iload_3\n+        23: baload\n+        24: ifne          8\n         27: aload_0\n         28: iload_3\n-        29: invokevirtual #10                 // Method setTableSize:(I)V\n+        29: invokevirtual #44                 // Method setTableSize:(I)V\n         32: aload_0\n         33: iload_1\n         34: iload_2\n         35: sipush        8192\n-        38: invokevirtual #12                 // Method addEntry:(IBI)I\n+        38: invokevirtual #62                 // Method addEntry:(IBI)I\n         41: istore        4\n         43: iload         4\n         45: iflt          56\n         48: aload_0\n-        49: getfield      #8                  // Field isUsed:[Z\n+        49: getfield      #39                 // Field isUsed:[Z\n         52: iload         4\n         54: iconst_1\n         55: bastore\n         56: iload         4\n         58: ireturn\n       LineNumberTable:\n         line 56: 0\n         line 57: 5\n-        line 58: 21\n+        line 58: 8\n+        line 57: 11\n         line 60: 27\n         line 61: 32\n         line 62: 43\n         line 63: 48\n         line 65: 56\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      59     0  this   Lorg/apache/commons/compress/archivers/zip/UnshrinkingInputStream;\n             0      59     1 previousCode   I\n             0      59     2 character   B\n             5      54     3 tableSize   I\n            43      16     4   idx   I\n-      StackMapTable: number_of_entries = 3\n+      StackMapTable: number_of_entries = 4\n         frame_type = 252 /* append */\n-          offset_delta = 5\n+          offset_delta = 8\n           locals = [ int ]\n-        frame_type = 21 /* same */\n+        frame_type = 2 /* same */\n+        frame_type = 15 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 28\n           locals = [ int ]\n-    Exceptions:\n-      throws java.io.IOException\n \n   private void partialClear();\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=3, args_size=1\n          0: sipush        8192\n          3: newarray       boolean\n          5: astore_1\n          6: iconst_0\n          7: istore_2\n-         8: iload_2\n-         9: aload_0\n-        10: getfield      #8                  // Field isUsed:[Z\n-        13: arraylength\n-        14: if_icmpge     49\n-        17: aload_0\n-        18: getfield      #8                  // Field isUsed:[Z\n+         8: goto          40\n+        11: aload_0\n+        12: getfield      #39                 // Field isUsed:[Z\n+        15: iload_2\n+        16: baload\n+        17: ifeq          37\n+        20: aload_0\n         21: iload_2\n-        22: baload\n-        23: ifeq          43\n-        26: aload_0\n-        27: iload_2\n-        28: invokevirtual #13                 // Method getPrefix:(I)I\n-        31: iconst_m1\n-        32: if_icmpeq     43\n-        35: aload_1\n-        36: aload_0\n-        37: iload_2\n-        38: invokevirtual #13                 // Method getPrefix:(I)I\n-        41: iconst_1\n-        42: bastore\n-        43: iinc          2, 1\n-        46: goto          8\n+        22: invokevirtual #72                 // Method getPrefix:(I)I\n+        25: iconst_m1\n+        26: if_icmpeq     37\n+        29: aload_1\n+        30: aload_0\n+        31: iload_2\n+        32: invokevirtual #72                 // Method getPrefix:(I)I\n+        35: iconst_1\n+        36: bastore\n+        37: iinc          2, 1\n+        40: iload_2\n+        41: aload_0\n+        42: getfield      #39                 // Field isUsed:[Z\n+        45: arraylength\n+        46: if_icmplt     11\n         49: aload_0\n-        50: invokevirtual #9                  // Method getClearCode:()I\n+        50: invokevirtual #41                 // Method getClearCode:()I\n         53: iconst_1\n         54: iadd\n         55: istore_2\n-        56: iload_2\n-        57: aload_1\n-        58: arraylength\n-        59: if_icmpge     87\n-        62: aload_1\n-        63: iload_2\n-        64: baload\n-        65: ifne          81\n-        68: aload_0\n-        69: getfield      #8                  // Field isUsed:[Z\n-        72: iload_2\n-        73: iconst_0\n-        74: bastore\n-        75: aload_0\n-        76: iload_2\n-        77: iconst_m1\n-        78: invokevirtual #14                 // Method setPrefix:(II)V\n-        81: iinc          2, 1\n-        84: goto          56\n+        56: goto          81\n+        59: aload_1\n+        60: iload_2\n+        61: baload\n+        62: ifne          78\n+        65: aload_0\n+        66: getfield      #39                 // Field isUsed:[Z\n+        69: iload_2\n+        70: iconst_0\n+        71: bastore\n+        72: aload_0\n+        73: iload_2\n+        74: iconst_m1\n+        75: invokevirtual #76                 // Method setPrefix:(II)V\n+        78: iinc          2, 1\n+        81: iload_2\n+        82: aload_1\n+        83: arraylength\n+        84: if_icmplt     59\n         87: return\n       LineNumberTable:\n         line 69: 0\n         line 70: 6\n-        line 71: 17\n-        line 72: 35\n-        line 70: 43\n+        line 71: 11\n+        line 72: 29\n+        line 70: 37\n         line 75: 49\n-        line 76: 62\n-        line 77: 68\n-        line 78: 75\n-        line 75: 81\n+        line 76: 59\n+        line 77: 65\n+        line 78: 72\n+        line 75: 78\n         line 81: 87\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            8      41     2     i   I\n-           56      31     2     i   I\n             0      88     0  this   Lorg/apache/commons/compress/archivers/zip/UnshrinkingInputStream;\n             6      82     1 isParent   [Z\n+            8      41     2     i   I\n+           56      31     2     i   I\n       StackMapTable: number_of_entries = 6\n         frame_type = 253 /* append */\n-          offset_delta = 8\n+          offset_delta = 11\n           locals = [ class \"[Z\", int ]\n-        frame_type = 34 /* same */\n-        frame_type = 250 /* chop */\n-          offset_delta = 5\n-        frame_type = 252 /* append */\n-          offset_delta = 6\n-          locals = [ int ]\n-        frame_type = 24 /* same */\n-        frame_type = 250 /* chop */\n-          offset_delta = 5\n+        frame_type = 25 /* same */\n+        frame_type = 2 /* same */\n+        frame_type = 18 /* same */\n+        frame_type = 18 /* same */\n+        frame_type = 2 /* same */\n \n   protected int decompressNextSymbol() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0004) ACC_PROTECTED\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n-      stack=3, locals=4, args_size=1\n+      stack=5, locals=4, args_size=1\n          0: aload_0\n-         1: invokevirtual #15                 // Method readNextCode:()I\n+         1: invokevirtual #83                 // Method readNextCode:()I\n          4: istore_1\n          5: iload_1\n          6: ifge          11\n          9: iconst_m1\n         10: ireturn\n         11: iload_1\n         12: aload_0\n-        13: invokevirtual #9                  // Method getClearCode:()I\n-        16: if_icmpne     107\n+        13: invokevirtual #41                 // Method getClearCode:()I\n+        16: if_icmpne     117\n         19: aload_0\n-        20: invokevirtual #15                 // Method readNextCode:()I\n+        20: invokevirtual #83                 // Method readNextCode:()I\n         23: istore_2\n         24: iload_2\n         25: ifge          38\n         28: new           #16                 // class java/io/IOException\n         31: dup\n-        32: ldc           #17                 // String Unexpected EOF;\n-        34: invokespecial #18                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        32: ldc           #86                 // String Unexpected EOF;\n+        34: invokespecial #88                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         37: athrow\n         38: iload_2\n         39: iconst_1\n         40: if_icmpne     69\n         43: aload_0\n-        44: invokevirtual #19                 // Method getCodeSize:()I\n+        44: invokevirtual #91                 // Method getCodeSize:()I\n         47: bipush        13\n         49: if_icmpge     59\n         52: aload_0\n-        53: invokevirtual #20                 // Method incrementCodeSize:()V\n-        56: goto          105\n+        53: invokevirtual #94                 // Method incrementCodeSize:()V\n+        56: goto          115\n         59: new           #16                 // class java/io/IOException\n         62: dup\n-        63: ldc           #21                 // String Attempt to increase code size beyond maximum\n-        65: invokespecial #18                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        63: ldc           #97                 // String Attempt to increase code size beyond maximum\n+        65: invokespecial #88                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         68: athrow\n         69: iload_2\n         70: iconst_2\n         71: if_icmpne     91\n         74: aload_0\n-        75: invokespecial #22                 // Method partialClear:()V\n+        75: invokespecial #99                 // Method partialClear:()V\n         78: aload_0\n         79: aload_0\n-        80: invokevirtual #9                  // Method getClearCode:()I\n+        80: invokevirtual #41                 // Method getClearCode:()I\n         83: iconst_1\n         84: iadd\n-        85: invokevirtual #10                 // Method setTableSize:(I)V\n-        88: goto          105\n+        85: invokevirtual #44                 // Method setTableSize:(I)V\n+        88: goto          115\n         91: new           #16                 // class java/io/IOException\n         94: dup\n-        95: iload_2\n-        96: invokedynamic #23,  0             // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;\n-       101: invokespecial #18                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       104: athrow\n-       105: iconst_0\n-       106: ireturn\n-       107: iconst_0\n-       108: istore_2\n-       109: iload_1\n-       110: istore_3\n-       111: aload_0\n-       112: getfield      #8                  // Field isUsed:[Z\n-       115: iload_1\n-       116: baload\n-       117: ifne          127\n-       120: aload_0\n-       121: invokevirtual #24                 // Method addRepeatOfPreviousCode:()I\n-       124: istore_3\n-       125: iconst_1\n-       126: istore_2\n-       127: aload_0\n-       128: iload_3\n-       129: iload_2\n-       130: invokevirtual #25                 // Method expandCodeToOutputStack:(IZ)I\n-       133: ireturn\n+        95: new           #101                // class java/lang/StringBuilder\n+        98: dup\n+        99: ldc           #103                // String Invalid clear code subcode\n+       101: invokespecial #105                // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+       104: iload_2\n+       105: invokevirtual #106                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       108: invokevirtual #110                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       111: invokespecial #88                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       114: athrow\n+       115: iconst_0\n+       116: ireturn\n+       117: iconst_0\n+       118: istore_2\n+       119: iload_1\n+       120: istore_3\n+       121: aload_0\n+       122: getfield      #39                 // Field isUsed:[Z\n+       125: iload_1\n+       126: baload\n+       127: ifne          137\n+       130: aload_0\n+       131: invokevirtual #114                // Method addRepeatOfPreviousCode:()I\n+       134: istore_3\n+       135: iconst_1\n+       136: istore_2\n+       137: aload_0\n+       138: iload_3\n+       139: iload_2\n+       140: invokevirtual #117                // Method expandCodeToOutputStack:(IZ)I\n+       143: ireturn\n       LineNumberTable:\n         line 97: 0\n         line 98: 5\n         line 99: 9\n         line 100: 11\n         line 101: 19\n         line 102: 24\n         line 103: 28\n         line 104: 38\n         line 105: 43\n         line 106: 52\n+        line 107: 56\n         line 108: 59\n         line 110: 69\n         line 111: 74\n         line 112: 78\n+        line 113: 88\n         line 114: 91\n-        line 116: 105\n-        line 118: 107\n-        line 119: 109\n-        line 120: 111\n-        line 121: 120\n-        line 122: 125\n-        line 124: 127\n+        line 116: 115\n+        line 118: 117\n+        line 119: 119\n+        line 120: 121\n+        line 121: 130\n+        line 122: 135\n+        line 124: 137\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           24      83     2 subCode   I\n-          109      25     2 addedUnfinishedEntry   Z\n-          111      23     3 effectiveCode   I\n-            0     134     0  this   Lorg/apache/commons/compress/archivers/zip/UnshrinkingInputStream;\n-            5     129     1  code   I\n+            0     144     0  this   Lorg/apache/commons/compress/archivers/zip/UnshrinkingInputStream;\n+            5     139     1  code   I\n+           24      93     2 subCode   I\n+          119      25     2 addedUnfinishedEntry   Z\n+          121      23     3 effectiveCode   I\n       StackMapTable: number_of_entries = 8\n         frame_type = 252 /* append */\n           offset_delta = 11\n           locals = [ int ]\n         frame_type = 252 /* append */\n           offset_delta = 26\n           locals = [ int ]\n         frame_type = 20 /* same */\n         frame_type = 9 /* same */\n         frame_type = 21 /* same */\n-        frame_type = 13 /* same */\n+        frame_type = 23 /* same */\n         frame_type = 250 /* chop */\n           offset_delta = 1\n         frame_type = 253 /* append */\n           offset_delta = 19\n           locals = [ int, int ]\n-    Exceptions:\n-      throws java.io.IOException\n }\n SourceFile: \"UnshrinkingInputStream.java\"\n-InnerClasses:\n-  public static final #128= #127 of #131; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n-BootstrapMethods:\n-  0: #91 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-    Method arguments:\n-      #92 Invalid clear code subcode \\u0001\n"}]}
