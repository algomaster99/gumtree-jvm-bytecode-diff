{"diffoscope-json-version": 1, "source1": "first/JavadocDetailNodeParser$DescriptiveErrorListener.class", "source2": "second/JavadocDetailNodeParser$DescriptiveErrorListener.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,19 +15,16 @@\n         return this.errorMessage;\n     }\n     \n     public void setOffset(final int offset) {\n         this.offset = offset;\n     }\n     \n-    public void syntaxError(final Recognizer<?, ?> recognizer, final Object offendingSymbol, final int line, final int charPositionInLine, final String msg, final RecognitionException ex) {\n-        final int lineNumber = this.offset + line;\n-        if (\"javadoc.wrong.singleton.html.tag\".equals(msg)) {\n-            this.errorMessage = new JavadocDetailNodeParser.ParseErrorMessage(lineNumber, \"javadoc.wrong.singleton.html.tag\", new Object[] { Integer.valueOf(charPositionInLine), ((Token)offendingSymbol).getText() });\n-            throw new IllegalArgumentException(msg);\n+    public void syntaxError(final Recognizer<?, ?> recognizer, final Object o, final int n, final int n2, final String s, final RecognitionException ex) {\n+        final int n3 = this.offset + n;\n+        if (\"javadoc.wrong.singleton.html.tag\".equals(s)) {\n+            this.errorMessage = new JavadocDetailNodeParser.ParseErrorMessage(n3, \"javadoc.wrong.singleton.html.tag\", new Object[] { Integer.valueOf(n2), ((Token)o).getText() });\n+            throw new IllegalArgumentException(s);\n         }\n-        final int ruleIndex = ex.getCtx().getRuleIndex();\n-        final String ruleName = recognizer.getRuleNames()[ruleIndex];\n-        final String upperCaseRuleName = JavadocDetailNodeParser.convertUpperCamelToUpperUnderscore(ruleName);\n-        this.errorMessage = new JavadocDetailNodeParser.ParseErrorMessage(lineNumber, \"javadoc.parse.rule.error\", new Object[] { Integer.valueOf(charPositionInLine), msg, upperCaseRuleName });\n+        this.errorMessage = new JavadocDetailNodeParser.ParseErrorMessage(n3, \"javadoc.parse.rule.error\", new Object[] { Integer.valueOf(n2), s, JavadocDetailNodeParser.convertUpperCamelToUpperUnderscore(recognizer.getRuleNames()[ex.getCtx().getRuleIndex()]) });\n     }\n }\n"}]}
