{"diffoscope-json-version": 1, "source1": "first/FileSystem.class", "source2": "second/FileSystem.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -33,37 +33,37 @@\n         }\n         if (FileSystem.IS_OS_WINDOWS) {\n             return FileSystem.WINDOWS;\n         }\n         return FileSystem.GENERIC;\n     }\n     \n-    private static boolean getOsMatchesName(final String osNamePrefix) {\n-        return isOsNameMatch(getSystemProperty(\"os.name\"), osNamePrefix);\n+    private static boolean getOsMatchesName(final String s) {\n+        return isOsNameMatch(getSystemProperty(\"os.name\"), s);\n     }\n     \n-    private static String getSystemProperty(final String property) {\n+    private static String getSystemProperty(final String s) {\n         try {\n-            return System.getProperty(property);\n+            return System.getProperty(s);\n         }\n         catch (final SecurityException ex) {\n-            System.err.println(\"Caught a SecurityException reading the system property '\" + property + \"'; the SystemUtils property value will default to null.\");\n+            System.err.println(\"Caught a SecurityException reading the system property '\" + s + \"'; the SystemUtils property value will default to null.\");\n             return null;\n         }\n     }\n     \n-    private static boolean isOsNameMatch(final String osName, final String osNamePrefix) {\n-        return osName != null && osName.toUpperCase(Locale.ROOT).startsWith(osNamePrefix.toUpperCase(Locale.ROOT));\n+    private static boolean isOsNameMatch(final String s, final String s2) {\n+        return s != null && s.toUpperCase(Locale.ROOT).startsWith(s2.toUpperCase(Locale.ROOT));\n     }\n     \n-    private FileSystem(final boolean caseSensitive, final boolean casePreserving, final int maxFileLength, final int maxPathLength, final char[] illegalFileNameChars, final String[] reservedFileNames, final boolean supportsDriveLetter) {\n-        this.maxFileNameLength = maxFileLength;\n+    private FileSystem(final boolean caseSensitive, final boolean casePreserving, final int maxFileNameLength, final int maxPathLength, final char[] obj, final String[] obj2, final boolean supportsDriveLetter) {\n+        this.maxFileNameLength = maxFileNameLength;\n         this.maxPathLength = maxPathLength;\n-        this.illegalFileNameChars = Objects.requireNonNull(illegalFileNameChars, \"illegalFileNameChars\");\n-        this.reservedFileNames = Objects.requireNonNull(reservedFileNames, \"reservedFileNames\");\n+        this.illegalFileNameChars = Objects.requireNonNull(obj, \"illegalFileNameChars\");\n+        this.reservedFileNames = Objects.requireNonNull(obj2, \"reservedFileNames\");\n         this.caseSensitive = caseSensitive;\n         this.casePreserving = casePreserving;\n         this.supportsDriveLetter = supportsDriveLetter;\n     }\n     \n     public char[] getIllegalFileNameChars() {\n         return this.illegalFileNameChars.clone();\n@@ -85,55 +85,55 @@\n         return this.casePreserving;\n     }\n     \n     public boolean isCaseSensitive() {\n         return this.caseSensitive;\n     }\n     \n-    private boolean isIllegalFileNameChar(final char c) {\n-        return Arrays.binarySearch(this.illegalFileNameChars, c) >= 0;\n+    private boolean isIllegalFileNameChar(final char key) {\n+        return Arrays.binarySearch(this.illegalFileNameChars, key) >= 0;\n     }\n     \n-    public boolean isLegalFileName(final CharSequence candidate) {\n-        if (candidate == null || candidate.length() == 0 || candidate.length() > this.maxFileNameLength) {\n+    public boolean isLegalFileName(final CharSequence charSequence) {\n+        if (charSequence == null || charSequence.length() == 0 || charSequence.length() > this.maxFileNameLength) {\n             return false;\n         }\n-        if (this.isReservedFileName(candidate)) {\n+        if (this.isReservedFileName(charSequence)) {\n             return false;\n         }\n-        for (int i = 0; i < candidate.length(); ++i) {\n-            if (this.isIllegalFileNameChar(candidate.charAt(i))) {\n+        for (int i = 0; i < charSequence.length(); ++i) {\n+            if (this.isIllegalFileNameChar(charSequence.charAt(i))) {\n                 return false;\n             }\n         }\n         return true;\n     }\n     \n-    public boolean isReservedFileName(final CharSequence candidate) {\n-        return Arrays.binarySearch(this.reservedFileNames, candidate) >= 0;\n+    public boolean isReservedFileName(final CharSequence key) {\n+        return Arrays.binarySearch(this.reservedFileNames, key) >= 0;\n     }\n     \n     public boolean supportsDriveLetter() {\n         return this.supportsDriveLetter;\n     }\n     \n-    public String toLegalFileName(final String candidate, final char replacement) {\n-        if (this.isIllegalFileNameChar(replacement)) {\n-            throw new IllegalArgumentException(String.format(\"The replacement character '%s' cannot be one of the %s illegal characters: %s\", (replacement == '\\0') ? \"\\\\0\" : Character.valueOf(replacement), this.name(), Arrays.toString(this.illegalFileNameChars)));\n-        }\n-        final String truncated = (candidate.length() > this.maxFileNameLength) ? candidate.substring(0, this.maxFileNameLength) : candidate;\n-        boolean changed = false;\n-        final char[] charArray = truncated.toCharArray();\n+    public String toLegalFileName(final String s, final char c) {\n+        if (this.isIllegalFileNameChar(c)) {\n+            throw new IllegalArgumentException(String.format(\"The replacement character '%s' cannot be one of the %s illegal characters: %s\", (c == '\\0') ? \"\\\\0\" : Character.valueOf(c), this.name(), Arrays.toString(this.illegalFileNameChars)));\n+        }\n+        final String s2 = (s.length() > this.maxFileNameLength) ? s.substring(0, this.maxFileNameLength) : s;\n+        boolean b = false;\n+        final char[] charArray = s2.toCharArray();\n         for (int i = 0; i < charArray.length; ++i) {\n             if (this.isIllegalFileNameChar(charArray[i])) {\n-                charArray[i] = replacement;\n-                changed = true;\n+                charArray[i] = c;\n+                b = true;\n             }\n         }\n-        return changed ? String.valueOf(charArray) : truncated;\n+        return b ? String.valueOf(charArray) : s2;\n     }\n     \n     static {\n         IS_OS_LINUX = getOsMatchesName(\"Linux\");\n         IS_OS_MAC = getOsMatchesName(\"Mac\");\n         IS_OS_WINDOWS = getOsMatchesName(\"Windows\");\n     }\n"}]}
