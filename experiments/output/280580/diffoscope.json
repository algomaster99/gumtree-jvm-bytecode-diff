{"diffoscope-json-version": 1, "source1": "first/VFSFileHandlerReloadingDetector.class", "source2": "second/VFSFileHandlerReloadingDetector.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,11 +1,10 @@\n \n package org.apache.commons.configuration2.reloading;\n \n-import org.apache.commons.configuration2.io.FileSystem;\n import java.io.File;\n import org.apache.commons.vfs2.FileSystemManager;\n import org.apache.commons.configuration2.ex.ConfigurationRuntimeException;\n import org.apache.commons.vfs2.VFS;\n import org.apache.commons.vfs2.FileObject;\n import org.apache.commons.vfs2.FileSystemException;\n import org.apache.commons.configuration2.io.FileHandler;\n@@ -16,55 +15,54 @@\n {\n     private final Log log;\n     \n     public VFSFileHandlerReloadingDetector() {\n         this.log = LogFactory.getLog((Class)this.getClass());\n     }\n     \n-    public VFSFileHandlerReloadingDetector(final FileHandler handler, final long refreshDelay) {\n-        super(handler, refreshDelay);\n+    public VFSFileHandlerReloadingDetector(final FileHandler fileHandler, final long n) {\n+        super(fileHandler, n);\n         this.log = LogFactory.getLog((Class)this.getClass());\n     }\n     \n-    public VFSFileHandlerReloadingDetector(final FileHandler handler) {\n-        super(handler);\n+    public VFSFileHandlerReloadingDetector(final FileHandler fileHandler) {\n+        super(fileHandler);\n         this.log = LogFactory.getLog((Class)this.getClass());\n     }\n     \n     protected long getLastModificationDate() {\n-        final FileObject file = this.getFileObject();\n+        final FileObject fileObject = this.getFileObject();\n         try {\n-            if (file == null || !file.exists()) {\n+            if (fileObject == null || !fileObject.exists()) {\n                 return 0L;\n             }\n-            return file.getContent().getLastModifiedTime();\n+            return fileObject.getContent().getLastModifiedTime();\n         }\n         catch (final FileSystemException ex) {\n-            this.log.error((Object)(\"Unable to get last modified time for\" + file.getName().getURI()), (Throwable)ex);\n+            this.log.error((Object)(\"Unable to get last modified time for\" + fileObject.getName().getURI()), (Throwable)ex);\n             return 0L;\n         }\n     }\n     \n     protected FileObject getFileObject() {\n         if (!this.getFileHandler().isLocationDefined()) {\n             return null;\n         }\n         try {\n-            final FileSystemManager fsManager = VFS.getManager();\n-            final String uri = this.resolveFileURI();\n-            if (uri == null) {\n+            final FileSystemManager manager = VFS.getManager();\n+            final String resolveFileURI = this.resolveFileURI();\n+            if (resolveFileURI == null) {\n                 throw new ConfigurationRuntimeException(\"Unable to determine file to monitor\");\n             }\n-            return fsManager.resolveFile(uri);\n+            return manager.resolveFile(resolveFileURI);\n         }\n-        catch (final FileSystemException fse) {\n-            final String msg = \"Unable to monitor \" + this.getFileHandler().getURL().toString();\n-            this.log.error((Object)msg);\n-            throw new ConfigurationRuntimeException(msg, (Throwable)fse);\n+        catch (final FileSystemException ex) {\n+            final String string = \"Unable to monitor \" + this.getFileHandler().getURL().toString();\n+            this.log.error((Object)string);\n+            throw new ConfigurationRuntimeException(string, (Throwable)ex);\n         }\n     }\n     \n     protected String resolveFileURI() {\n-        final FileSystem fs = this.getFileHandler().getFileSystem();\n-        return fs.getPath((File)null, this.getFileHandler().getURL(), this.getFileHandler().getBasePath(), this.getFileHandler().getFileName());\n+        return this.getFileHandler().getFileSystem().getPath((File)null, this.getFileHandler().getURL(), this.getFileHandler().getBasePath(), this.getFileHandler().getFileName());\n     }\n }\n"}]}
