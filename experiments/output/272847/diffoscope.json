{"diffoscope-json-version": 1, "source1": "first/SingleSpaceSeparatorCheck.class", "source2": "second/SingleSpaceSeparatorCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -30,54 +30,52 @@\n         return CommonUtil.EMPTY_INT_ARRAY;\n     }\n     \n     public boolean isCommentNodesRequired() {\n         return this.validateComments;\n     }\n     \n-    public void beginTree(final DetailAST rootAST) {\n-        if (rootAST != null) {\n-            this.visitEachToken(rootAST);\n+    public void beginTree(final DetailAST detailAST) {\n+        if (detailAST != null) {\n+            this.visitEachToken(detailAST);\n         }\n     }\n     \n-    private void visitEachToken(final DetailAST node) {\n-        DetailAST currentNode = node;\n+    private void visitEachToken(final DetailAST detailAST) {\n+        DetailAST detailAST2 = detailAST;\n         do {\n-            final int columnNo = currentNode.getColumnNo() - 1;\n-            final int minSecondWhitespaceColumnNo = 2;\n-            if (columnNo >= 2 && !this.isTextSeparatedCorrectlyFromPrevious(this.getLineCodePoints(currentNode.getLineNo() - 1), columnNo)) {\n-                this.log(currentNode, \"single.space.separator\", new Object[0]);\n+            final int n = detailAST2.getColumnNo() - 1;\n+            if (n >= 2 && !this.isTextSeparatedCorrectlyFromPrevious(this.getLineCodePoints(detailAST2.getLineNo() - 1), n)) {\n+                this.log(detailAST2, \"single.space.separator\", new Object[0]);\n             }\n-            if (currentNode.hasChildren()) {\n-                currentNode = currentNode.getFirstChild();\n+            if (detailAST2.hasChildren()) {\n+                detailAST2 = detailAST2.getFirstChild();\n             }\n             else {\n-                while (currentNode.getNextSibling() == null && currentNode.getParent() != null) {\n-                    currentNode = currentNode.getParent();\n+                while (detailAST2.getNextSibling() == null && detailAST2.getParent() != null) {\n+                    detailAST2 = detailAST2.getParent();\n                 }\n-                currentNode = currentNode.getNextSibling();\n+                detailAST2 = detailAST2.getNextSibling();\n             }\n-        } while (currentNode != null);\n+        } while (detailAST2 != null);\n     }\n     \n-    private boolean isTextSeparatedCorrectlyFromPrevious(final int[] line, final int columnNo) {\n-        return isSingleSpace(line, columnNo) || !CommonUtil.isCodePointWhitespace(line, columnNo) || isFirstInLine(line, columnNo) || (!this.validateComments && isBlockCommentEnd(line, columnNo));\n+    private boolean isTextSeparatedCorrectlyFromPrevious(final int[] array, final int n) {\n+        return isSingleSpace(array, n) || !CommonUtil.isCodePointWhitespace(array, n) || isFirstInLine(array, n) || (!this.validateComments && isBlockCommentEnd(array, n));\n     }\n     \n-    private static boolean isSingleSpace(final int[] line, final int columnNo) {\n-        return isSpace(line, columnNo) && !CommonUtil.isCodePointWhitespace(line, columnNo - 1);\n+    private static boolean isSingleSpace(final int[] array, final int n) {\n+        return isSpace(array, n) && !CommonUtil.isCodePointWhitespace(array, n - 1);\n     }\n     \n-    private static boolean isSpace(final int[] line, final int columnNo) {\n-        return line[columnNo] == 32;\n+    private static boolean isSpace(final int[] array, final int n) {\n+        return array[n] == 32;\n     }\n     \n-    private static boolean isFirstInLine(final int[] line, final int columnNo) {\n-        return CodePointUtil.isBlank(Arrays.copyOfRange(line, 0, columnNo));\n+    private static boolean isFirstInLine(final int[] original, final int to) {\n+        return CodePointUtil.isBlank(Arrays.copyOfRange(original, 0, to));\n     }\n     \n-    private static boolean isBlockCommentEnd(final int[] line, final int columnNo) {\n-        final int[] strippedLine = CodePointUtil.stripTrailing(Arrays.copyOfRange(line, 0, columnNo));\n-        return CodePointUtil.endsWith(strippedLine, \"*/\");\n+    private static boolean isBlockCommentEnd(final int[] original, final int to) {\n+        return CodePointUtil.endsWith(CodePointUtil.stripTrailing(Arrays.copyOfRange(original, 0, to)), \"*/\");\n     }\n }\n"}]}
