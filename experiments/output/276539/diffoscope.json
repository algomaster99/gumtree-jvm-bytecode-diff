{"diffoscope-json-version": 1, "source1": "first/SuppressWithPlainTextCommentFilter.class", "source2": "second/SuppressWithPlainTextCommentFilter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -2,18 +2,18 @@\n package com.puppycrawl.tools.checkstyle.filters;\n \n import java.util.regex.Matcher;\n import java.util.Optional;\n import java.util.function.Consumer;\n import java.util.Objects;\n import java.util.ArrayList;\n+import java.util.List;\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.io.File;\n-import java.util.List;\n import com.puppycrawl.tools.checkstyle.api.FileText;\n import java.util.Collection;\n import com.puppycrawl.tools.checkstyle.api.AuditEvent;\n import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n import com.puppycrawl.tools.checkstyle.PropertyType;\n import com.puppycrawl.tools.checkstyle.XdocsPropertyType;\n import java.util.regex.Pattern;\n@@ -36,86 +36,84 @@\n     \n     public SuppressWithPlainTextCommentFilter() {\n         this.offCommentFormat = CommonUtil.createPattern(\"// CHECKSTYLE:OFF\");\n         this.onCommentFormat = CommonUtil.createPattern(\"// CHECKSTYLE:ON\");\n         this.checkFormat = \".*\";\n     }\n     \n-    public final void setOffCommentFormat(final Pattern pattern) {\n-        this.offCommentFormat = pattern;\n+    public final void setOffCommentFormat(final Pattern offCommentFormat) {\n+        this.offCommentFormat = offCommentFormat;\n     }\n     \n-    public final void setOnCommentFormat(final Pattern pattern) {\n-        this.onCommentFormat = pattern;\n+    public final void setOnCommentFormat(final Pattern onCommentFormat) {\n+        this.onCommentFormat = onCommentFormat;\n     }\n     \n-    public final void setCheckFormat(final String format) {\n-        this.checkFormat = format;\n+    public final void setCheckFormat(final String checkFormat) {\n+        this.checkFormat = checkFormat;\n     }\n     \n-    public final void setMessageFormat(final String format) {\n-        this.messageFormat = format;\n+    public final void setMessageFormat(final String messageFormat) {\n+        this.messageFormat = messageFormat;\n     }\n     \n-    public final void setIdFormat(final String format) {\n-        this.idFormat = format;\n+    public final void setIdFormat(final String idFormat) {\n+        this.idFormat = idFormat;\n     }\n     \n-    public boolean accept(final AuditEvent event) {\n-        boolean accepted = true;\n-        if (event.getViolation() != null) {\n-            final FileText fileText = getFileText(event.getFileName());\n+    public boolean accept(final AuditEvent auditEvent) {\n+        boolean b = true;\n+        if (auditEvent.getViolation() != null) {\n+            final FileText fileText = getFileText(auditEvent.getFileName());\n             if (fileText != null) {\n-                final List<SuppressWithPlainTextCommentFilter.Suppression> suppressions = this.getSuppressions(fileText);\n-                accepted = (getNearestSuppression(suppressions, event) == null);\n+                b = (getNearestSuppression(this.getSuppressions(fileText), auditEvent) == null);\n             }\n         }\n-        return accepted;\n+        return b;\n     }\n     \n     protected void finishLocalSetup() {\n     }\n     \n-    private static FileText getFileText(final String fileName) {\n-        final File file = new File(fileName);\n-        FileText result = null;\n+    private static FileText getFileText(final String pathname) {\n+        final File file = new File(pathname);\n+        FileText fileText = null;\n         if (!file.isDirectory()) {\n             try {\n-                result = new FileText(file, StandardCharsets.UTF_8.name());\n+                fileText = new FileText(file, StandardCharsets.UTF_8.name());\n             }\n-            catch (final IOException ex) {\n-                throw new IllegalStateException(\"Cannot read source file: \" + fileName, (Throwable)ex);\n+            catch (final IOException cause) {\n+                throw new IllegalStateException(\"Cannot read source file: \" + pathname, (Throwable)cause);\n             }\n         }\n-        return result;\n+        return fileText;\n     }\n     \n     private List<SuppressWithPlainTextCommentFilter.Suppression> getSuppressions(final FileText fileText) {\n-        final List<SuppressWithPlainTextCommentFilter.Suppression> suppressions = new ArrayList<SuppressWithPlainTextCommentFilter.Suppression>();\n-        for (int lineNo = 0; lineNo < fileText.size(); ++lineNo) {\n-            final Optional<SuppressWithPlainTextCommentFilter.Suppression> suppression2;\n-            final Optional<SuppressWithPlainTextCommentFilter.Suppression> suppression = suppression2 = this.getSuppression(fileText, lineNo);\n-            final List<SuppressWithPlainTextCommentFilter.Suppression> obj = suppressions;\n-            Objects.requireNonNull((ArrayList)obj);\n-            suppression2.ifPresent(obj::add);\n+        final ArrayList list = new ArrayList();\n+        for (int i = 0; i < fileText.size(); ++i) {\n+            final Optional<SuppressWithPlainTextCommentFilter.Suppression> suppression = this.getSuppression(fileText, i);\n+            final ArrayList obj = list;\n+            Objects.requireNonNull(obj);\n+            suppression.ifPresent(obj::add);\n         }\n-        return suppressions;\n+        return list;\n     }\n     \n-    private Optional<SuppressWithPlainTextCommentFilter.Suppression> getSuppression(final FileText fileText, final int lineNo) {\n-        final String line = fileText.get(lineNo);\n-        final Matcher onCommentMatcher = this.onCommentFormat.matcher(line);\n-        final Matcher offCommentMatcher = this.offCommentFormat.matcher(line);\n-        SuppressWithPlainTextCommentFilter.Suppression suppression = null;\n-        if (onCommentMatcher.find()) {\n-            suppression = new SuppressWithPlainTextCommentFilter.Suppression(onCommentMatcher.group(0), lineNo + 1, onCommentMatcher.start(), SuppressWithPlainTextCommentFilter.SuppressionType.ON, this);\n+    private Optional<SuppressWithPlainTextCommentFilter.Suppression> getSuppression(final FileText fileText, final int n) {\n+        final String value = fileText.get(n);\n+        final Matcher matcher = this.onCommentFormat.matcher(value);\n+        final Matcher matcher2 = this.offCommentFormat.matcher(value);\n+        SuppressWithPlainTextCommentFilter.Suppression value2 = null;\n+        if (matcher.find()) {\n+            value2 = new SuppressWithPlainTextCommentFilter.Suppression(matcher.group(0), n + 1, matcher.start(), SuppressWithPlainTextCommentFilter.SuppressionType.ON, this);\n         }\n-        if (offCommentMatcher.find()) {\n-            suppression = new SuppressWithPlainTextCommentFilter.Suppression(offCommentMatcher.group(0), lineNo + 1, offCommentMatcher.start(), SuppressWithPlainTextCommentFilter.SuppressionType.OFF, this);\n+        if (matcher2.find()) {\n+            value2 = new SuppressWithPlainTextCommentFilter.Suppression(matcher2.group(0), n + 1, matcher2.start(), SuppressWithPlainTextCommentFilter.SuppressionType.OFF, this);\n         }\n-        return Optional.ofNullable(suppression);\n+        return Optional.ofNullable(value2);\n     }\n     \n-    private static SuppressWithPlainTextCommentFilter.Suppression getNearestSuppression(final Collection<SuppressWithPlainTextCommentFilter.Suppression> suppressions, final AuditEvent event) {\n-        return suppressions.stream().filter(suppression -> suppression.isMatch(event)).reduce((first, second) -> second).filter(suppression -> suppression.suppressionType != SuppressWithPlainTextCommentFilter.SuppressionType.ON).orElse(null);\n+    private static SuppressWithPlainTextCommentFilter.Suppression getNearestSuppression(final Collection<SuppressWithPlainTextCommentFilter.Suppression> collection, final AuditEvent auditEvent) {\n+        return collection.stream().filter(suppression -> suppression.isMatch(auditEvent2)).reduce((p0, suppression3) -> suppression3).filter(suppression5 -> suppression5.suppressionType != SuppressWithPlainTextCommentFilter.SuppressionType.ON).orElse(null);\n     }\n }\n"}]}
