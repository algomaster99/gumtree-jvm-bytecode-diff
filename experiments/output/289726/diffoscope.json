{"diffoscope-json-version": 1, "source1": "first/NotFileFilter.class", "source2": "second/NotFileFilter.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,94 +1,91 @@\n-  SHA-256 checksum a7e445189cc83dfea3b7ba8d4edab394dae8760da1a3846b43dde13c1e2e9714\n+  SHA-256 checksum 011f7a3ea70de5a4a49d751de4b086099750b35876f42d35a24b9577ae5ab591\n   Compiled from \"NotFileFilter.java\"\n public class org.apache.commons.io.filefilter.NotFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #19                         // org/apache/commons/io/filefilter/NotFileFilter\n   super_class: #20                        // org/apache/commons/io/filefilter/AbstractFileFilter\n   interfaces: 1, fields: 2, methods: 6, attributes: 1\n Constant pool:\n-   #1 = Methodref          #20.#47        // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n-   #2 = Class              #48            // java/lang/IllegalArgumentException\n-   #3 = String             #49            // The filter must not be null\n-   #4 = Methodref          #2.#50         // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #5 = Fieldref           #19.#51        // org/apache/commons/io/filefilter/NotFileFilter.filter:Lorg/apache/commons/io/filefilter/IOFileFilter;\n-   #6 = InterfaceMethodref #52.#53        // org/apache/commons/io/filefilter/IOFileFilter.accept:(Ljava/io/File;)Z\n-   #7 = InterfaceMethodref #52.#54        // org/apache/commons/io/filefilter/IOFileFilter.accept:(Ljava/io/File;Ljava/lang/String;)Z\n-   #8 = InterfaceMethodref #52.#55        // org/apache/commons/io/filefilter/IOFileFilter.accept:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-   #9 = Methodref          #19.#56        // org/apache/commons/io/filefilter/NotFileFilter.not:(Ljava/nio/file/FileVisitResult;)Ljava/nio/file/FileVisitResult;\n-  #10 = Fieldref           #57.#58        // java/nio/file/FileVisitResult.CONTINUE:Ljava/nio/file/FileVisitResult;\n-  #11 = Fieldref           #57.#59        // java/nio/file/FileVisitResult.TERMINATE:Ljava/nio/file/FileVisitResult;\n-  #12 = Class              #60            // java/lang/StringBuilder\n-  #13 = Methodref          #12.#47        // java/lang/StringBuilder.\"<init>\":()V\n-  #14 = String             #61            // NOT (\n-  #15 = Methodref          #12.#62        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #16 = Methodref          #63.#64        // java/lang/Object.toString:()Ljava/lang/String;\n-  #17 = String             #65            // )\n-  #18 = Methodref          #12.#64        // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-  #19 = Class              #66            // org/apache/commons/io/filefilter/NotFileFilter\n-  #20 = Class              #67            // org/apache/commons/io/filefilter/AbstractFileFilter\n-  #21 = Class              #68            // java/io/Serializable\n+   #1 = Methodref          #20.#46        // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n+   #2 = Class              #47            // java/lang/IllegalArgumentException\n+   #3 = String             #48            // The filter must not be null\n+   #4 = Methodref          #2.#49         // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #5 = Fieldref           #19.#50        // org/apache/commons/io/filefilter/NotFileFilter.filter:Lorg/apache/commons/io/filefilter/IOFileFilter;\n+   #6 = InterfaceMethodref #34.#51        // org/apache/commons/io/filefilter/IOFileFilter.accept:(Ljava/io/File;)Z\n+   #7 = InterfaceMethodref #34.#52        // org/apache/commons/io/filefilter/IOFileFilter.accept:(Ljava/io/File;Ljava/lang/String;)Z\n+   #8 = InterfaceMethodref #34.#53        // org/apache/commons/io/filefilter/IOFileFilter.accept:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+   #9 = Methodref          #19.#54        // org/apache/commons/io/filefilter/NotFileFilter.not:(Ljava/nio/file/FileVisitResult;)Ljava/nio/file/FileVisitResult;\n+  #10 = Fieldref           #41.#55        // java/nio/file/FileVisitResult.CONTINUE:Ljava/nio/file/FileVisitResult;\n+  #11 = Fieldref           #41.#56        // java/nio/file/FileVisitResult.TERMINATE:Ljava/nio/file/FileVisitResult;\n+  #12 = Class              #57            // java/lang/StringBuilder\n+  #13 = Methodref          #12.#46        // java/lang/StringBuilder.\"<init>\":()V\n+  #14 = String             #58            // NOT (\n+  #15 = Methodref          #12.#59        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #16 = Methodref          #60.#61        // java/lang/Object.toString:()Ljava/lang/String;\n+  #17 = String             #62            // )\n+  #18 = Methodref          #12.#61        // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #19 = Class              #63            // org/apache/commons/io/filefilter/NotFileFilter\n+  #20 = Class              #64            // org/apache/commons/io/filefilter/AbstractFileFilter\n+  #21 = Class              #65            // java/io/Serializable\n   #22 = Utf8               serialVersionUID\n   #23 = Utf8               J\n   #24 = Utf8               ConstantValue\n   #25 = Long               6131563330944994230l\n   #27 = Utf8               filter\n   #28 = Utf8               Lorg/apache/commons/io/filefilter/IOFileFilter;\n   #29 = Utf8               <init>\n   #30 = Utf8               (Lorg/apache/commons/io/filefilter/IOFileFilter;)V\n   #31 = Utf8               Code\n   #32 = Utf8               LineNumberTable\n   #33 = Utf8               StackMapTable\n-  #34 = Class              #66            // org/apache/commons/io/filefilter/NotFileFilter\n-  #35 = Class              #69            // org/apache/commons/io/filefilter/IOFileFilter\n-  #36 = Utf8               accept\n-  #37 = Utf8               (Ljava/io/File;)Z\n-  #38 = Utf8               (Ljava/io/File;Ljava/lang/String;)Z\n-  #39 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-  #40 = Utf8               not\n-  #41 = Utf8               (Ljava/nio/file/FileVisitResult;)Ljava/nio/file/FileVisitResult;\n-  #42 = Class              #70            // java/nio/file/FileVisitResult\n-  #43 = Utf8               toString\n-  #44 = Utf8               ()Ljava/lang/String;\n-  #45 = Utf8               SourceFile\n-  #46 = Utf8               NotFileFilter.java\n-  #47 = NameAndType        #29:#71        // \"<init>\":()V\n-  #48 = Utf8               java/lang/IllegalArgumentException\n-  #49 = Utf8               The filter must not be null\n-  #50 = NameAndType        #29:#72        // \"<init>\":(Ljava/lang/String;)V\n-  #51 = NameAndType        #27:#28        // filter:Lorg/apache/commons/io/filefilter/IOFileFilter;\n-  #52 = Class              #69            // org/apache/commons/io/filefilter/IOFileFilter\n-  #53 = NameAndType        #36:#37        // accept:(Ljava/io/File;)Z\n-  #54 = NameAndType        #36:#38        // accept:(Ljava/io/File;Ljava/lang/String;)Z\n-  #55 = NameAndType        #36:#39        // accept:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-  #56 = NameAndType        #40:#41        // not:(Ljava/nio/file/FileVisitResult;)Ljava/nio/file/FileVisitResult;\n-  #57 = Class              #70            // java/nio/file/FileVisitResult\n-  #58 = NameAndType        #73:#74        // CONTINUE:Ljava/nio/file/FileVisitResult;\n-  #59 = NameAndType        #75:#74        // TERMINATE:Ljava/nio/file/FileVisitResult;\n-  #60 = Utf8               java/lang/StringBuilder\n-  #61 = Utf8               NOT (\n-  #62 = NameAndType        #76:#77        // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #63 = Class              #78            // java/lang/Object\n-  #64 = NameAndType        #43:#44        // toString:()Ljava/lang/String;\n-  #65 = Utf8               )\n-  #66 = Utf8               org/apache/commons/io/filefilter/NotFileFilter\n-  #67 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n-  #68 = Utf8               java/io/Serializable\n-  #69 = Utf8               org/apache/commons/io/filefilter/IOFileFilter\n-  #70 = Utf8               java/nio/file/FileVisitResult\n-  #71 = Utf8               ()V\n-  #72 = Utf8               (Ljava/lang/String;)V\n-  #73 = Utf8               CONTINUE\n-  #74 = Utf8               Ljava/nio/file/FileVisitResult;\n-  #75 = Utf8               TERMINATE\n-  #76 = Utf8               append\n-  #77 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #78 = Utf8               java/lang/Object\n+  #34 = Class              #66            // org/apache/commons/io/filefilter/IOFileFilter\n+  #35 = Utf8               accept\n+  #36 = Utf8               (Ljava/io/File;)Z\n+  #37 = Utf8               (Ljava/io/File;Ljava/lang/String;)Z\n+  #38 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+  #39 = Utf8               not\n+  #40 = Utf8               (Ljava/nio/file/FileVisitResult;)Ljava/nio/file/FileVisitResult;\n+  #41 = Class              #67            // java/nio/file/FileVisitResult\n+  #42 = Utf8               toString\n+  #43 = Utf8               ()Ljava/lang/String;\n+  #44 = Utf8               SourceFile\n+  #45 = Utf8               NotFileFilter.java\n+  #46 = NameAndType        #29:#68        // \"<init>\":()V\n+  #47 = Utf8               java/lang/IllegalArgumentException\n+  #48 = Utf8               The filter must not be null\n+  #49 = NameAndType        #29:#69        // \"<init>\":(Ljava/lang/String;)V\n+  #50 = NameAndType        #27:#28        // filter:Lorg/apache/commons/io/filefilter/IOFileFilter;\n+  #51 = NameAndType        #35:#36        // accept:(Ljava/io/File;)Z\n+  #52 = NameAndType        #35:#37        // accept:(Ljava/io/File;Ljava/lang/String;)Z\n+  #53 = NameAndType        #35:#38        // accept:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+  #54 = NameAndType        #39:#40        // not:(Ljava/nio/file/FileVisitResult;)Ljava/nio/file/FileVisitResult;\n+  #55 = NameAndType        #70:#71        // CONTINUE:Ljava/nio/file/FileVisitResult;\n+  #56 = NameAndType        #72:#71        // TERMINATE:Ljava/nio/file/FileVisitResult;\n+  #57 = Utf8               java/lang/StringBuilder\n+  #58 = Utf8               NOT (\n+  #59 = NameAndType        #73:#74        // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #60 = Class              #75            // java/lang/Object\n+  #61 = NameAndType        #42:#43        // toString:()Ljava/lang/String;\n+  #62 = Utf8               )\n+  #63 = Utf8               org/apache/commons/io/filefilter/NotFileFilter\n+  #64 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n+  #65 = Utf8               java/io/Serializable\n+  #66 = Utf8               org/apache/commons/io/filefilter/IOFileFilter\n+  #67 = Utf8               java/nio/file/FileVisitResult\n+  #68 = Utf8               ()V\n+  #69 = Utf8               (Ljava/lang/String;)V\n+  #70 = Utf8               CONTINUE\n+  #71 = Utf8               Ljava/nio/file/FileVisitResult;\n+  #72 = Utf8               TERMINATE\n+  #73 = Utf8               append\n+  #74 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #75 = Utf8               java/lang/Object\n {\n   private static final long serialVersionUID = 6131563330944994230l;\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long 6131563330944994230l\n \n   private final org.apache.commons.io.filefilter.IOFileFilter filter;\n@@ -194,14 +191,16 @@\n          4: if_acmpne     13\n          7: getstatic     #11                 // Field java/nio/file/FileVisitResult.TERMINATE:Ljava/nio/file/FileVisitResult;\n         10: goto          16\n         13: getstatic     #10                 // Field java/nio/file/FileVisitResult.CONTINUE:Ljava/nio/file/FileVisitResult;\n         16: areturn\n       LineNumberTable:\n         line 87: 0\n+        line 88: 13\n+        line 87: 16\n       StackMapTable: number_of_entries = 2\n         frame_type = 13 /* same */\n         frame_type = 66 /* same_locals_1_stack_item */\n           stack = [ class java/nio/file/FileVisitResult ]\n \n   public java.lang.String toString();\n     descriptor: ()Ljava/lang/String;\n"}]}
