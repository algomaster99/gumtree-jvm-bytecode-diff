{"diffoscope-json-version": 1, "source1": "first/NewAttributeBands$Integral.class", "source2": "second/NewAttributeBands$Integral.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -32,106 +32,95 @@\n         this.previousIntegral = previousIntegral;\n     }\n     \n     public String getTag() {\n         return this.tag;\n     }\n     \n-    public void addAttributeToBand(final NewAttribute attribute, final InputStream stream) {\n-        Object val = null;\n-        int value = 0;\n+    public void addAttributeToBand(final NewAttribute newAttribute, final InputStream inputStream) {\n+        Object o = null;\n+        int n = 0;\n         if (this.tag.equals(\"B\") || this.tag.equals(\"FB\")) {\n-            value = (NewAttributeBands.access$500(this.this$0, 1, stream) & 0xFF);\n+            n = (NewAttributeBands.access$500(this.this$0, 1, inputStream) & 0xFF);\n         }\n         else if (this.tag.equals(\"SB\")) {\n-            value = NewAttributeBands.access$500(this.this$0, 1, stream);\n+            n = NewAttributeBands.access$500(this.this$0, 1, inputStream);\n         }\n         else if (this.tag.equals(\"H\") || this.tag.equals(\"FH\")) {\n-            value = (NewAttributeBands.access$500(this.this$0, 2, stream) & 0xFFFF);\n+            n = (NewAttributeBands.access$500(this.this$0, 2, inputStream) & 0xFFFF);\n         }\n         else if (this.tag.equals(\"SH\")) {\n-            value = NewAttributeBands.access$500(this.this$0, 2, stream);\n+            n = NewAttributeBands.access$500(this.this$0, 2, inputStream);\n         }\n         else if (this.tag.equals(\"I\") || this.tag.equals(\"FI\")) {\n-            value = NewAttributeBands.access$500(this.this$0, 4, stream);\n+            n = NewAttributeBands.access$500(this.this$0, 4, inputStream);\n         }\n         else if (this.tag.equals(\"SI\")) {\n-            value = NewAttributeBands.access$500(this.this$0, 4, stream);\n+            n = NewAttributeBands.access$500(this.this$0, 4, inputStream);\n         }\n         else if (!this.tag.equals(\"V\") && !this.tag.equals(\"FV\")) {\n             if (!this.tag.equals(\"SV\")) {\n                 if (this.tag.startsWith(\"PO\") || this.tag.startsWith(\"OS\")) {\n-                    final char uint_type = this.tag.substring(2).toCharArray()[0];\n-                    final int length = this.getLength(uint_type);\n-                    value = NewAttributeBands.access$500(this.this$0, length, stream);\n-                    value += this.previousIntegral.previousPValue;\n-                    val = attribute.getLabel(value);\n-                    this.previousPValue = value;\n+                    n = NewAttributeBands.access$500(this.this$0, this.getLength(this.tag.substring(2).toCharArray()[0]), inputStream) + this.previousIntegral.previousPValue;\n+                    o = newAttribute.getLabel(n);\n+                    this.previousPValue = n;\n                 }\n                 else if (this.tag.startsWith(\"P\")) {\n-                    final char uint_type = this.tag.substring(1).toCharArray()[0];\n-                    final int length = this.getLength(uint_type);\n-                    value = NewAttributeBands.access$500(this.this$0, length, stream);\n-                    val = attribute.getLabel(value);\n-                    this.previousPValue = value;\n+                    n = NewAttributeBands.access$500(this.this$0, this.getLength(this.tag.substring(1).toCharArray()[0]), inputStream);\n+                    o = newAttribute.getLabel(n);\n+                    this.previousPValue = n;\n                 }\n                 else if (this.tag.startsWith(\"O\")) {\n-                    final char uint_type = this.tag.substring(1).toCharArray()[0];\n-                    final int length = this.getLength(uint_type);\n-                    value = NewAttributeBands.access$500(this.this$0, length, stream);\n-                    value += this.previousIntegral.previousPValue;\n-                    val = attribute.getLabel(value);\n-                    this.previousPValue = value;\n+                    n = NewAttributeBands.access$500(this.this$0, this.getLength(this.tag.substring(1).toCharArray()[0]), inputStream) + this.previousIntegral.previousPValue;\n+                    o = newAttribute.getLabel(n);\n+                    this.previousPValue = n;\n                 }\n             }\n         }\n-        if (val == null) {\n-            val = Integer.valueOf(value);\n+        if (o == null) {\n+            o = Integer.valueOf(n);\n         }\n-        this.band.add(val);\n+        this.band.add(o);\n     }\n     \n-    public void pack(final OutputStream out) throws IOException, Pack200Exception {\n+    public void pack(final OutputStream outputStream) throws IOException, Pack200Exception {\n         PackingUtils.log(\"Writing new attribute bands...\");\n-        final byte[] encodedBand = this.this$0.encodeBandInt(this.tag, this.this$0.integerListToArray(this.band), this.defaultCodec);\n-        out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + this.tag + \"[\" + this.band.size());\n+        final byte[] encodeBandInt = this.this$0.encodeBandInt(this.tag, this.this$0.integerListToArray(this.band), this.defaultCodec);\n+        outputStream.write(encodeBandInt);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt.length + \" bytes from \" + this.tag + \"[\" + this.band.size());\n     }\n     \n     public int latestValue() {\n         return Integer.valueOf(this.band.get(this.band.size() - 1));\n     }\n     \n-    public void renumberBci(final IntList bciRenumbering, final Map labelsToOffsets) {\n+    public void renumberBci(final IntList list, final Map map) {\n         if (this.tag.startsWith(\"O\") || this.tag.startsWith(\"PO\")) {\n-            this.renumberOffsetBci(this.previousIntegral.band, bciRenumbering, labelsToOffsets);\n+            this.renumberOffsetBci(this.previousIntegral.band, list, map);\n         }\n         else if (this.tag.startsWith(\"P\")) {\n             for (int i = this.band.size() - 1; i >= 0; --i) {\n-                final Object label = this.band.get(i);\n-                if (label instanceof Integer) {\n+                final Object value = this.band.get(i);\n+                if (value instanceof Integer) {\n                     break;\n                 }\n-                if (label instanceof Label) {\n+                if (value instanceof Label) {\n                     this.band.remove(i);\n-                    final Integer bytecodeIndex = Integer.valueOf(labelsToOffsets.get(label));\n-                    this.band.add(i, Integer.valueOf(bciRenumbering.get((int)bytecodeIndex)));\n+                    this.band.add(i, Integer.valueOf(list.get((int)(Integer)map.get(value))));\n                 }\n             }\n         }\n     }\n     \n-    private void renumberOffsetBci(final List relative, final IntList bciRenumbering, final Map labelsToOffsets) {\n+    private void renumberOffsetBci(final List list, final IntList list2, final Map map) {\n         for (int i = this.band.size() - 1; i >= 0; --i) {\n-            final Object label = this.band.get(i);\n-            if (label instanceof Integer) {\n+            final Object value = this.band.get(i);\n+            if (value instanceof Integer) {\n                 break;\n             }\n-            if (label instanceof Label) {\n+            if (value instanceof Label) {\n                 this.band.remove(i);\n-                final Integer bytecodeIndex = Integer.valueOf(labelsToOffsets.get(label));\n-                final Integer renumberedOffset = Integer.valueOf(bciRenumbering.get((int)bytecodeIndex) - (int)Integer.valueOf(relative.get(i)));\n-                this.band.add(i, renumberedOffset);\n+                this.band.add(i, Integer.valueOf(list2.get((int)(Integer)map.get(value)) - (int)Integer.valueOf(list.get(i))));\n             }\n         }\n     }\n }\n"}]}
