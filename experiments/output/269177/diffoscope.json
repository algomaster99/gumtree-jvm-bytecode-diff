{"diffoscope-json-version": 1, "source1": "first/AbstractNameCheck.class", "source2": "second/AbstractNameCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,26 +9,26 @@\n \n @StatelessCheck\n public abstract class AbstractNameCheck extends AbstractCheck\n {\n     public static final String MSG_INVALID_PATTERN = \"name.invalidPattern\";\n     private Pattern format;\n     \n-    protected AbstractNameCheck(final String format) {\n-        this.format = CommonUtil.createPattern(format);\n+    protected AbstractNameCheck(final String s) {\n+        this.format = CommonUtil.createPattern(s);\n     }\n     \n     protected abstract boolean mustCheckName(final DetailAST p0);\n     \n-    public final void setFormat(final Pattern pattern) {\n-        this.format = pattern;\n+    public final void setFormat(final Pattern format) {\n+        this.format = format;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        if (this.mustCheckName(ast)) {\n-            final DetailAST nameAST = ast.findFirstToken(58);\n-            if (!this.format.matcher(nameAST.getText()).find()) {\n-                this.log(nameAST, \"name.invalidPattern\", new Object[] { nameAST.getText(), this.format.pattern() });\n+    public void visitToken(final DetailAST detailAST) {\n+        if (this.mustCheckName(detailAST)) {\n+            final DetailAST firstToken = detailAST.findFirstToken(58);\n+            if (!this.format.matcher(firstToken.getText()).find()) {\n+                this.log(firstToken, \"name.invalidPattern\", new Object[] { firstToken.getText(), this.format.pattern() });\n             }\n         }\n     }\n }\n"}]}
