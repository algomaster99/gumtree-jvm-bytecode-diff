{"diffoscope-json-version": 1, "source1": "first/RedundantModifierCheck.class", "source2": "second/RedundantModifierCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,12 +1,11 @@\n \n package com.puppycrawl.tools.checkstyle.checks.modifier;\n \n import java.util.function.Consumer;\n-import java.util.Objects;\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Optional;\n import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n@@ -15,14 +14,18 @@\n \n @StatelessCheck\n public class RedundantModifierCheck extends AbstractCheck\n {\n     public static final String MSG_KEY = \"redundantModifier\";\n     private static final int[] TOKENS_FOR_INTERFACE_MODIFIERS;\n     \n+    static {\n+        TOKENS_FOR_INTERFACE_MODIFIERS = new int[] { 64, 40 };\n+    }\n+    \n     public int[] getDefaultTokens() {\n         return this.getAcceptableTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return CommonUtil.EMPTY_INT_ARRAY;\n     }\n@@ -79,15 +82,17 @@\n         else {\n             this.checkClassConstructorModifiers(ctorDefAst);\n         }\n     }\n     \n     private void checkInterfaceModifiers(final DetailAST ast) {\n         final DetailAST modifiers = ast.findFirstToken(5);\n-        for (final int tokenType : RedundantModifierCheck.TOKENS_FOR_INTERFACE_MODIFIERS) {\n+        int[] tokens_FOR_INTERFACE_MODIFIERS;\n+        for (int length = (tokens_FOR_INTERFACE_MODIFIERS = RedundantModifierCheck.TOKENS_FOR_INTERFACE_MODIFIERS).length, i = 0; i < length; ++i) {\n+            final int tokenType = tokens_FOR_INTERFACE_MODIFIERS[i];\n             final DetailAST modifier = modifiers.findFirstToken(tokenType);\n             if (modifier != null) {\n                 this.log(modifier, \"redundantModifier\", new Object[] { modifier.getText() });\n             }\n         }\n     }\n     \n@@ -151,15 +156,15 @@\n     private void processResources(final DetailAST ast) {\n         this.checkForRedundantModifier(ast, 39);\n     }\n     \n     private void checkForRedundantModifier(final DetailAST ast, final int... modifierTypes) {\n         Optional.ofNullable(ast.findFirstToken(5)).ifPresent(modifiers -> {\n             for (DetailAST childAst = modifiers.getFirstChild(); childAst != null; childAst = childAst.getNextSibling()) {\n-                if (TokenUtil.isOfType(childAst, modifierTypes)) {\n+                if (TokenUtil.isOfType(childAst, array)) {\n                     this.log(childAst, \"redundantModifier\", new Object[] { childAst.getText() });\n                 }\n             }\n         });\n     }\n     \n     private static boolean isClassProtected(final DetailAST classDef) {\n@@ -204,20 +209,12 @@\n             }\n         }\n         return result;\n     }\n     \n     private static List<DetailAST> getMethodAnnotationsList(final DetailAST methodDef) {\n         final List<DetailAST> annotationsList = new ArrayList<DetailAST>();\n-        final DetailAST firstToken;\n-        final DetailAST modifiers = firstToken = methodDef.findFirstToken(5);\n-        final int n = 159;\n-        final List<DetailAST> obj = annotationsList;\n-        Objects.requireNonNull((ArrayList)obj);\n-        TokenUtil.forEachChild(firstToken, n, (Consumer)obj::add);\n+        final DetailAST modifiers = methodDef.findFirstToken(5);\n+        TokenUtil.forEachChild(modifiers, 159, (Consumer)annotationsList::add);\n         return annotationsList;\n     }\n-    \n-    static {\n-        TOKENS_FOR_INTERFACE_MODIFIERS = new int[] { 64, 40 };\n-    }\n }\n"}]}
