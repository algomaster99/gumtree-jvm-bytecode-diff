{"diffoscope-json-version": 1, "source1": "first/NumberUtils.class", "source2": "second/NumberUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -28,14 +28,38 @@\n     public static final Double DOUBLE_MINUS_ONE;\n     public static final Float FLOAT_ZERO;\n     public static final Float FLOAT_ONE;\n     public static final Float FLOAT_MINUS_ONE;\n     public static final Long LONG_INT_MAX_VALUE;\n     public static final Long LONG_INT_MIN_VALUE;\n     \n+    static {\n+        LONG_ZERO = Long.valueOf(0L);\n+        LONG_ONE = Long.valueOf(1L);\n+        LONG_MINUS_ONE = Long.valueOf(-1L);\n+        INTEGER_ZERO = Integer.valueOf(0);\n+        INTEGER_ONE = Integer.valueOf(1);\n+        INTEGER_TWO = Integer.valueOf(2);\n+        INTEGER_MINUS_ONE = Integer.valueOf(-1);\n+        SHORT_ZERO = Short.valueOf((short)0);\n+        SHORT_ONE = Short.valueOf((short)1);\n+        SHORT_MINUS_ONE = Short.valueOf((short)(-1));\n+        BYTE_ZERO = Byte.valueOf((byte)0);\n+        BYTE_ONE = Byte.valueOf((byte)1);\n+        BYTE_MINUS_ONE = Byte.valueOf((byte)(-1));\n+        DOUBLE_ZERO = Double.valueOf(0.0);\n+        DOUBLE_ONE = Double.valueOf(1.0);\n+        DOUBLE_MINUS_ONE = Double.valueOf(-1.0);\n+        FLOAT_ZERO = Float.valueOf(0.0f);\n+        FLOAT_ONE = Float.valueOf(1.0f);\n+        FLOAT_MINUS_ONE = Float.valueOf(-1.0f);\n+        LONG_INT_MAX_VALUE = Long.valueOf(2147483647L);\n+        LONG_INT_MIN_VALUE = Long.valueOf(-2147483648L);\n+    }\n+    \n     public static int toInt(final String str) {\n         return toInt(str, 0);\n     }\n     \n     public static int toInt(final String str, final int defaultValue) {\n         if (str == null) {\n             return defaultValue;\n@@ -186,15 +210,17 @@\n         }\n         if (StringUtils.isBlank((CharSequence)str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }\n         final String[] hex_prefixes = { \"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\" };\n         final int length = str.length();\n         int pfxLen = 0;\n-        for (final String pfx : hex_prefixes) {\n+        String[] array;\n+        for (int length2 = (array = hex_prefixes).length, j = 0; j < length2; ++j) {\n+            final String pfx = array[j];\n             if (str.startsWith(pfx)) {\n                 pfxLen += pfx.length();\n                 break;\n             }\n         }\n         if (pfxLen > 0) {\n             char firstSigDigit = '\\0';\n@@ -219,27 +245,27 @@\n             final int decPos = str.indexOf(46);\n             final int expPos = str.indexOf(101) + str.indexOf(69) + 1;\n             String dec;\n             String mant;\n             if (decPos > -1) {\n                 if (expPos > -1) {\n                     if (expPos < decPos || expPos > length) {\n-                        throw new NumberFormatException(str + \" is not a valid number.\");\n+                        throw new NumberFormatException(String.valueOf(str) + \" is not a valid number.\");\n                     }\n                     dec = str.substring(decPos + 1, expPos);\n                 }\n                 else {\n                     dec = str.substring(decPos + 1);\n                 }\n                 mant = getMantissa(str, decPos);\n             }\n             else {\n                 if (expPos > -1) {\n                     if (expPos > length) {\n-                        throw new NumberFormatException(str + \" is not a valid number.\");\n+                        throw new NumberFormatException(String.valueOf(str) + \" is not a valid number.\");\n                     }\n                     mant = getMantissa(str, expPos);\n                 }\n                 else {\n                     mant = getMantissa(str);\n                 }\n                 dec = null;\n@@ -256,25 +282,25 @@\n                 final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 switch (lastChar) {\n                     case 'L':\n                     case 'l': {\n                         if (dec == null && exp == null) {\n                             if (numeric.isEmpty() || numeric.charAt(0) != '-' || !isDigits(numeric.substring(1))) {\n                                 if (!isDigits(numeric)) {\n-                                    throw new NumberFormatException(str + \" is not a valid number.\");\n+                                    throw new NumberFormatException(String.valueOf(str) + \" is not a valid number.\");\n                                 }\n                             }\n                             try {\n                                 return createLong(numeric);\n                             }\n                             catch (final NumberFormatException ex) {\n                                 return createBigInteger(numeric);\n                             }\n                         }\n-                        throw new NumberFormatException(str + \" is not a valid number.\");\n+                        throw new NumberFormatException(String.valueOf(str) + \" is not a valid number.\");\n                     }\n                     case 'F':\n                     case 'f': {\n                         try {\n                             final Float f = createFloat(str);\n                             if (!f.isInfinite() && (f != 0.0f || allZeros)) {\n                                 return f;\n@@ -294,15 +320,15 @@\n                         try {\n                             return createBigDecimal(numeric);\n                         }\n                         catch (final NumberFormatException ex4) {}\n                         break;\n                     }\n                 }\n-                throw new NumberFormatException(str + \" is not a valid number.\");\n+                throw new NumberFormatException(String.valueOf(str) + \" is not a valid number.\");\n             }\n             String exp;\n             if (expPos > -1 && expPos < length - 1) {\n                 exp = str.substring(expPos + 1);\n             }\n             else {\n                 exp = null;\n@@ -760,15 +786,15 @@\n         }\n         if (chars[i] == '.') {\n             return !hasDecPoint && !hasExp && foundDigit;\n         }\n         if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {\n             return foundDigit;\n         }\n-        return (chars[i] == 'l' || chars[i] == 'L') && foundDigit && !hasExp && !hasDecPoint;\n+        return (chars[i] == 'l' || chars[i] == 'L') && (foundDigit && !hasExp && !hasDecPoint);\n     }\n     \n     public static boolean isParsable(final String str) {\n         if (StringUtils.isEmpty((CharSequence)str)) {\n             return false;\n         }\n         if (str.charAt(str.length() - 1) == '.') {\n@@ -817,32 +843,8 @@\n         }\n         return (x < y) ? -1 : 1;\n     }\n     \n     public static int compare(final byte x, final byte y) {\n         return x - y;\n     }\n-    \n-    static {\n-        LONG_ZERO = Long.valueOf(0L);\n-        LONG_ONE = Long.valueOf(1L);\n-        LONG_MINUS_ONE = Long.valueOf(-1L);\n-        INTEGER_ZERO = Integer.valueOf(0);\n-        INTEGER_ONE = Integer.valueOf(1);\n-        INTEGER_TWO = Integer.valueOf(2);\n-        INTEGER_MINUS_ONE = Integer.valueOf(-1);\n-        SHORT_ZERO = Short.valueOf((short)0);\n-        SHORT_ONE = Short.valueOf((short)1);\n-        SHORT_MINUS_ONE = Short.valueOf((short)(-1));\n-        BYTE_ZERO = Byte.valueOf((byte)0);\n-        BYTE_ONE = Byte.valueOf((byte)1);\n-        BYTE_MINUS_ONE = Byte.valueOf((byte)(-1));\n-        DOUBLE_ZERO = Double.valueOf(0.0);\n-        DOUBLE_ONE = Double.valueOf(1.0);\n-        DOUBLE_MINUS_ONE = Double.valueOf(-1.0);\n-        FLOAT_ZERO = Float.valueOf(0.0f);\n-        FLOAT_ONE = Float.valueOf(1.0f);\n-        FLOAT_MINUS_ONE = Float.valueOf(-1.0f);\n-        LONG_INT_MAX_VALUE = Long.valueOf(2147483647L);\n-        LONG_INT_MIN_VALUE = Long.valueOf(-2147483648L);\n-    }\n }\n"}]}
