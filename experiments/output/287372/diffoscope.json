{"diffoscope-json-version": 1, "source1": "first/PackingOptions.class", "source2": "second/PackingOptions.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -87,73 +87,73 @@\n         return this.deflateHint;\n     }\n     \n     public boolean isKeepDeflateHint() {\n         return \"keep\".equals(this.deflateHint);\n     }\n     \n-    public void setDeflateHint(final String deflateHint) {\n-        if (!\"keep\".equals(deflateHint) && !\"true\".equals(deflateHint) && !\"false\".equals(deflateHint)) {\n-            throw new IllegalArgumentException(\"Bad argument: -H \" + deflateHint + \" ? deflate hint should be either true, false or keep (default)\");\n+    public void setDeflateHint(final String s) {\n+        if (!\"keep\".equals(s) && !\"true\".equals(s) && !\"false\".equals(s)) {\n+            throw new IllegalArgumentException(\"Bad argument: -H \" + s + \" ? deflate hint should be either true, false or keep (default)\");\n         }\n-        this.deflateHint = deflateHint;\n+        this.deflateHint = s;\n     }\n     \n     public String getModificationTime() {\n         return this.modificationTime;\n     }\n     \n-    public void setModificationTime(final String s) {\n-        if (!\"keep\".equals(s) && !\"latest\".equals(s)) {\n-            throw new IllegalArgumentException(\"Bad argument: -m \" + s + \" ? transmit modtimes should be either latest or keep (default)\");\n+    public void setModificationTime(final String modificationTime) {\n+        if (!\"keep\".equals(modificationTime) && !\"latest\".equals(modificationTime)) {\n+            throw new IllegalArgumentException(\"Bad argument: -m \" + modificationTime + \" ? transmit modtimes should be either latest or keep (default)\");\n         }\n-        this.modificationTime = s;\n+        this.modificationTime = modificationTime;\n     }\n     \n     public boolean isPassFile(final String s) {\n         if (this.passFiles != null) {\n-            for (String string : this.passFiles) {\n-                if (s.equals(string)) {\n+            for (String s2 : this.passFiles) {\n+                if (s.equals(s2)) {\n                     return true;\n                 }\n-                if (!string.endsWith(\".class\")) {\n-                    if (!string.endsWith(\"/\")) {\n-                        string += \"/\";\n+                if (!s2.endsWith(\".class\")) {\n+                    if (!s2.endsWith(\"/\")) {\n+                        s2 = s2;\n                     }\n-                    return s.startsWith(string);\n+                    return s.startsWith(s2);\n                 }\n             }\n         }\n         return false;\n     }\n     \n     public void addPassFile(String replaceAll) {\n         if (this.passFiles == null) {\n             this.passFiles = new ArrayList();\n         }\n-        String s = System.getProperty(\"file.separator\");\n-        if (s.equals(\"\\\\\")) {\n-            s += \"\\\\\";\n+        String property = System.getProperty(\"file.separator\");\n+        if (property.equals(\"\\\\\")) {\n+            property = property;\n         }\n-        replaceAll = replaceAll.replaceAll(s, \"/\");\n+        replaceAll = replaceAll.replaceAll(property, \"/\");\n         this.passFiles.add(replaceAll);\n     }\n     \n     public void removePassFile(final String s) {\n         this.passFiles.remove(s);\n     }\n     \n     public String getUnknownAttributeAction() {\n         return this.unknownAttributeAction;\n     }\n     \n-    public void setUnknownAttributeAction(final String str) {\n-        this.unknownAttributeAction = str;\n-        if (!\"pass\".equals(str) && !\"error\".equals(str) && !\"strip\".equals(str)) {\n-            throw new RuntimeException(\"Incorrect option for -U, \" + str);\n+    public void setUnknownAttributeAction(final String s) {\n+        this.unknownAttributeAction = s;\n+        if (!\"pass\".equals(s) && !\"error\".equals(s) && !\"strip\".equals(s)) {\n+            throw new RuntimeException(\"Incorrect option for -U, \" + s);\n         }\n     }\n     \n     public void addClassAttributeAction(final String s, final String s2) {\n         if (this.classAttributeActions == null) {\n             this.classAttributeActions = new HashMap();\n         }\n"}]}
