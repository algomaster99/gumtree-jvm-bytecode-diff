{"diffoscope-json-version": 1, "source1": "first/ExceptionConst.class", "source2": "second/ExceptionConst.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -26,43 +26,43 @@\n     public static final Class<IllegalMonitorStateException> ILLEGAL_MONITOR_STATE;\n     private static final Class<?>[] EXCS_CLASS_AND_INTERFACE_RESOLUTION;\n     private static final Class<?>[] EXCS_FIELD_AND_METHOD_RESOLUTION;\n     private static final Class<?>[] EXCS_INTERFACE_METHOD_RESOLUTION;\n     private static final Class<?>[] EXCS_STRING_RESOLUTION;\n     private static final Class<?>[] EXCS_ARRAY_EXCEPTION;\n     \n-    private static Class<?>[] mergeExceptions(final Class<?>[] input, final Class<?>... extraClasses) {\n-        final int extraLen = (extraClasses == null) ? 0 : extraClasses.length;\n-        final Class<?>[] excs = new Class[input.length + extraLen];\n-        System.arraycopy(input, 0, excs, 0, input.length);\n-        if (extraLen > 0) {\n-            System.arraycopy(extraClasses, 0, excs, input.length, extraLen);\n+    private static Class<?>[] mergeExceptions(final Class<?>[] array, final Class<?>... array2) {\n+        final int n = (array2 == null) ? 0 : array2.length;\n+        final Class[] array3 = new Class[array.length + n];\n+        System.arraycopy(array, 0, array3, 0, array.length);\n+        if (n > 0) {\n+            System.arraycopy(array2, 0, array3, array.length, n);\n         }\n-        return excs;\n+        return array3;\n     }\n     \n-    public static Class<?>[] createExceptions(final ExceptionConst.EXCS type, final Class<?>... extraClasses) {\n-        switch (ExceptionConst.ExceptionConst$1.$SwitchMap$org$apache$bcel$ExceptionConst$EXCS[type.ordinal()]) {\n+    public static Class<?>[] createExceptions(final ExceptionConst.EXCS obj, final Class<?>... array) {\n+        switch (ExceptionConst.ExceptionConst$1.$SwitchMap$org$apache$bcel$ExceptionConst$EXCS[obj.ordinal()]) {\n             case 1: {\n-                return mergeExceptions(ExceptionConst.EXCS_CLASS_AND_INTERFACE_RESOLUTION, extraClasses);\n+                return mergeExceptions(ExceptionConst.EXCS_CLASS_AND_INTERFACE_RESOLUTION, array);\n             }\n             case 2: {\n-                return mergeExceptions(ExceptionConst.EXCS_ARRAY_EXCEPTION, extraClasses);\n+                return mergeExceptions(ExceptionConst.EXCS_ARRAY_EXCEPTION, array);\n             }\n             case 3: {\n-                return mergeExceptions(ExceptionConst.EXCS_FIELD_AND_METHOD_RESOLUTION, extraClasses);\n+                return mergeExceptions(ExceptionConst.EXCS_FIELD_AND_METHOD_RESOLUTION, array);\n             }\n             case 4: {\n-                return mergeExceptions(ExceptionConst.EXCS_INTERFACE_METHOD_RESOLUTION, extraClasses);\n+                return mergeExceptions(ExceptionConst.EXCS_INTERFACE_METHOD_RESOLUTION, array);\n             }\n             case 5: {\n-                return mergeExceptions(ExceptionConst.EXCS_STRING_RESOLUTION, extraClasses);\n+                return mergeExceptions(ExceptionConst.EXCS_STRING_RESOLUTION, array);\n             }\n             default: {\n-                throw new AssertionError((Object)(\"Cannot happen; unexpected enum value: \" + type));\n+                throw new AssertionError((Object)(\"Cannot happen; unexpected enum value: \" + obj));\n             }\n         }\n     }\n     \n     static {\n         THROWABLE = Throwable.class;\n         RUNTIME_EXCEPTION = RuntimeException.class;\n"}]}
