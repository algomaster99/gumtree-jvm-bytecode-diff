{"diffoscope-json-version": 1, "source1": "first/DurationUtils.class", "source2": "second/DurationUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,30 +11,30 @@\n import org.apache.commons.lang3.function.FailableBiConsumer;\n import org.apache.commons.lang3.Range;\n \n public class DurationUtils\n {\n     static final Range<Long> LONG_TO_INT_RANGE;\n     \n-    public static <T extends Throwable> void accept(final FailableBiConsumer<Long, Integer, T> consumer, final Duration duration) throws T, Throwable {\n-        if (consumer != null && duration != null) {\n-            consumer.accept((Object)Long.valueOf(duration.toMillis()), (Object)Integer.valueOf(getNanosOfMiili(duration)));\n+    public static <T extends Throwable> void accept(final FailableBiConsumer<Long, Integer, T> failableBiConsumer, final Duration duration) throws T, Throwable {\n+        if (failableBiConsumer != null && duration != null) {\n+            failableBiConsumer.accept((Object)Long.valueOf(duration.toMillis()), (Object)Integer.valueOf(getNanosOfMiili(duration)));\n         }\n     }\n     \n     public static int getNanosOfMiili(final Duration duration) {\n         return duration.getNano() % 1000000;\n     }\n     \n     public static boolean isPositive(final Duration duration) {\n         return !duration.isNegative() && !duration.isZero();\n     }\n     \n-    static ChronoUnit toChronoUnit(final TimeUnit timeUnit) {\n-        switch (DurationUtils.DurationUtils$1.$SwitchMap$java$util$concurrent$TimeUnit[((TimeUnit)Objects.requireNonNull(timeUnit)).ordinal()]) {\n+    static ChronoUnit toChronoUnit(final TimeUnit obj) {\n+        switch (DurationUtils.DurationUtils$1.$SwitchMap$java$util$concurrent$TimeUnit[((TimeUnit)Objects.requireNonNull(obj)).ordinal()]) {\n             case 1: {\n                 return ChronoUnit.NANOS;\n             }\n             case 2: {\n                 return ChronoUnit.MICROS;\n             }\n             case 3: {\n@@ -49,26 +49,26 @@\n             case 6: {\n                 return ChronoUnit.HOURS;\n             }\n             case 7: {\n                 return ChronoUnit.DAYS;\n             }\n             default: {\n-                throw new IllegalArgumentException(timeUnit.toString());\n+                throw new IllegalArgumentException(obj.toString());\n             }\n         }\n     }\n     \n     public static Duration toDuration(final long amount, final TimeUnit timeUnit) {\n         return Duration.of(amount, toChronoUnit(timeUnit));\n     }\n     \n-    public static int toMillisInt(final Duration duration) {\n-        Objects.requireNonNull(duration, \"duration\");\n-        return ((Long)DurationUtils.LONG_TO_INT_RANGE.fit((Object)Long.valueOf(duration.toMillis()))).intValue();\n+    public static int toMillisInt(final Duration obj) {\n+        Objects.requireNonNull(obj, \"duration\");\n+        return ((Long)DurationUtils.LONG_TO_INT_RANGE.fit((Object)Long.valueOf(obj.toMillis()))).intValue();\n     }\n     \n     public static Duration zeroIfNull(final Duration duration) {\n         return (Duration)ObjectUtils.defaultIfNull((Object)duration, (Object)Duration.ZERO);\n     }\n     \n     static {\n"}]}
