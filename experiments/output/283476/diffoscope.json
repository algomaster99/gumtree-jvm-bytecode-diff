{"diffoscope-json-version": 1, "source1": "first/ComparableUtils.class", "source2": "second/ComparableUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,38 +1,38 @@\n \n package org.apache.commons.lang3.compare;\n \n import java.util.function.Predicate;\n \n public class ComparableUtils\n {\n-    public static <A extends Comparable<A>> Predicate<A> between(final A b, final A c) {\n-        return a -> is(a).between(b, c);\n+    public static <A extends Comparable<A>> Predicate<A> between(final A a, final A a2) {\n+        return comparable3 -> is(comparable3).between(comparable, comparable2);\n     }\n     \n-    public static <A extends Comparable<A>> Predicate<A> betweenExclusive(final A b, final A c) {\n-        return a -> is(a).betweenExclusive(b, c);\n+    public static <A extends Comparable<A>> Predicate<A> betweenExclusive(final A a, final A a2) {\n+        return comparable3 -> is(comparable3).betweenExclusive(comparable, comparable2);\n     }\n     \n-    public static <A extends Comparable<A>> Predicate<A> ge(final A b) {\n-        return a -> is(a).greaterThanOrEqualTo(b);\n+    public static <A extends Comparable<A>> Predicate<A> ge(final A a) {\n+        return comparable2 -> is(comparable2).greaterThanOrEqualTo(comparable);\n     }\n     \n-    public static <A extends Comparable<A>> Predicate<A> gt(final A b) {\n-        return a -> is(a).greaterThan(b);\n+    public static <A extends Comparable<A>> Predicate<A> gt(final A a) {\n+        return comparable2 -> is(comparable2).greaterThan(comparable);\n     }\n     \n     public static <A extends Comparable<A>> ComparableUtils.ComparableCheckBuilder<A> is(final A a) {\n         return (ComparableUtils.ComparableCheckBuilder<A>)new ComparableUtils.ComparableCheckBuilder((Comparable)a, (ComparableUtils.ComparableUtils$1)null);\n     }\n     \n-    public static <A extends Comparable<A>> Predicate<A> le(final A b) {\n-        return a -> is(a).lessThanOrEqualTo(b);\n+    public static <A extends Comparable<A>> Predicate<A> le(final A a) {\n+        return comparable2 -> is(comparable2).lessThanOrEqualTo(comparable);\n     }\n     \n-    public static <A extends Comparable<A>> Predicate<A> lt(final A b) {\n-        return a -> is(a).lessThan(b);\n+    public static <A extends Comparable<A>> Predicate<A> lt(final A a) {\n+        return comparable2 -> is(comparable2).lessThan(comparable);\n     }\n     \n     private ComparableUtils() {\n     }\n }\n"}]}
