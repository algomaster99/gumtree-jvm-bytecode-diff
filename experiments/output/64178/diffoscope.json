{"diffoscope-json-version": 1, "source1": "first/LZMA2Decoder.class", "source2": "second/LZMA2Decoder.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,263 +1,263 @@\n-  SHA-256 checksum 7abf24653bbf85d92b0617a596962839c98541932dfa104d72fc0806d803a422\n+  SHA-256 checksum d9f53e81a6dfec68f498778227d6d9414b1be28ff3e64ff9568f9dbfe755906e\n   Compiled from \"LZMA2Decoder.java\"\n class org.apache.commons.compress.archivers.sevenz.LZMA2Decoder extends org.apache.commons.compress.archivers.sevenz.CoderBase\n   minor version: 0\n-  major version: 53\n+  major version: 51\n   flags: (0x0020) ACC_SUPER\n-  this_class: #29                         // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder\n-  super_class: #30                        // org/apache/commons/compress/archivers/sevenz/CoderBase\n+  this_class: #1                          // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder\n+  super_class: #3                         // org/apache/commons/compress/archivers/sevenz/CoderBase\n   interfaces: 0, fields: 0, methods: 9, attributes: 1\n Constant pool:\n-    #1 = Class              #83           // java/lang/Class\n-    #2 = Class              #84           // org/tukaani/xz/LZMA2Options\n-    #3 = Class              #85           // java/lang/Number\n-    #4 = Methodref          #30.#86       // org/apache/commons/compress/archivers/sevenz/CoderBase.\"<init>\":([Ljava/lang/Class;)V\n-    #5 = Methodref          #29.#87       // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n-    #6 = Class              #88           // org/tukaani/xz/LZMA2InputStream\n-    #7 = Methodref          #6.#89        // org/tukaani/xz/LZMA2InputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-    #8 = Class              #90           // java/lang/IllegalArgumentException\n-    #9 = Class              #91           // java/io/IOException\n-   #10 = Methodref          #8.#92        // java/lang/IllegalArgumentException.getMessage:()Ljava/lang/String;\n-   #11 = Methodref          #9.#93        // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #12 = Methodref          #29.#94       // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n-   #13 = Class              #95           // org/tukaani/xz/FinishableWrapperOutputStream\n-   #14 = Methodref          #13.#96       // org/tukaani/xz/FinishableWrapperOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n-   #15 = Methodref          #2.#97        // org/tukaani/xz/LZMA2Options.getOutputStream:(Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n-   #16 = Methodref          #29.#98       // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.getDictSize:(Ljava/lang/Object;)I\n-   #17 = Methodref          #99.#100      // java/lang/Integer.numberOfLeadingZeros:(I)I\n-   #18 = Methodref          #99.#101      // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #19 = Methodref          #2.#102       // org/tukaani/xz/LZMA2Options.getDictSize:()I\n-   #20 = Methodref          #29.#103      // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.numberOptionOrDefault:(Ljava/lang/Object;)I\n-   #21 = Fieldref           #104.#105     // org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n-   #22 = String             #106          // Unsupported LZMA2 property bits\n-   #23 = Methodref          #8.#93        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #24 = String             #107          // Dictionary larger than 4GiB maximum size\n-   #25 = Methodref          #2.#108       // org/tukaani/xz/LZMA2Options.\"<init>\":()V\n-   #26 = Methodref          #2.#109       // org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n-   #27 = Integer            8388608\n-   #28 = Methodref          #29.#110      // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.numberOptionOrDefault:(Ljava/lang/Object;I)I\n-   #29 = Class              #111          // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder\n-   #30 = Class              #112          // org/apache/commons/compress/archivers/sevenz/CoderBase\n-   #31 = Utf8               <init>\n-   #32 = Utf8               ()V\n-   #33 = Utf8               Code\n-   #34 = Utf8               LineNumberTable\n-   #35 = Utf8               LocalVariableTable\n-   #36 = Utf8               this\n-   #37 = Utf8               Lorg/apache/commons/compress/archivers/sevenz/LZMA2Decoder;\n-   #38 = Utf8               decode\n-   #39 = Utf8               (Ljava/lang/String;Ljava/io/InputStream;JLorg/apache/commons/compress/archivers/sevenz/Coder;[B)Ljava/io/InputStream;\n-   #40 = Utf8               dictionarySize\n-   #41 = Utf8               I\n-   #42 = Utf8               ex\n-   #43 = Utf8               Ljava/lang/IllegalArgumentException;\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder\n+    #2 = Utf8               org/apache/commons/compress/archivers/sevenz/LZMA2Decoder\n+    #3 = Class              #4            // org/apache/commons/compress/archivers/sevenz/CoderBase\n+    #4 = Utf8               org/apache/commons/compress/archivers/sevenz/CoderBase\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ()V\n+    #7 = Utf8               Code\n+    #8 = Class              #9            // java/lang/Class\n+    #9 = Utf8               java/lang/Class\n+   #10 = Class              #11           // org/tukaani/xz/LZMA2Options\n+   #11 = Utf8               org/tukaani/xz/LZMA2Options\n+   #12 = Class              #13           // java/lang/Number\n+   #13 = Utf8               java/lang/Number\n+   #14 = Methodref          #3.#15        // org/apache/commons/compress/archivers/sevenz/CoderBase.\"<init>\":([Ljava/lang/Class;)V\n+   #15 = NameAndType        #5:#16        // \"<init>\":([Ljava/lang/Class;)V\n+   #16 = Utf8               ([Ljava/lang/Class;)V\n+   #17 = Utf8               LineNumberTable\n+   #18 = Utf8               LocalVariableTable\n+   #19 = Utf8               this\n+   #20 = Utf8               Lorg/apache/commons/compress/archivers/sevenz/LZMA2Decoder;\n+   #21 = Utf8               decode\n+   #22 = Utf8               (Ljava/lang/String;Ljava/io/InputStream;JLorg/apache/commons/compress/archivers/sevenz/Coder;[B)Ljava/io/InputStream;\n+   #23 = Utf8               Exceptions\n+   #24 = Class              #25           // java/io/IOException\n+   #25 = Utf8               java/io/IOException\n+   #26 = Methodref          #1.#27        // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+   #27 = NameAndType        #28:#29       // getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+   #28 = Utf8               getDictionarySize\n+   #29 = Utf8               (Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+   #30 = Class              #31           // org/tukaani/xz/LZMA2InputStream\n+   #31 = Utf8               org/tukaani/xz/LZMA2InputStream\n+   #32 = Methodref          #30.#33       // org/tukaani/xz/LZMA2InputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+   #33 = NameAndType        #5:#34        // \"<init>\":(Ljava/io/InputStream;I)V\n+   #34 = Utf8               (Ljava/io/InputStream;I)V\n+   #35 = Methodref          #36.#38       // java/lang/IllegalArgumentException.getMessage:()Ljava/lang/String;\n+   #36 = Class              #37           // java/lang/IllegalArgumentException\n+   #37 = Utf8               java/lang/IllegalArgumentException\n+   #38 = NameAndType        #39:#40       // getMessage:()Ljava/lang/String;\n+   #39 = Utf8               getMessage\n+   #40 = Utf8               ()Ljava/lang/String;\n+   #41 = Methodref          #24.#42       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #42 = NameAndType        #5:#43        // \"<init>\":(Ljava/lang/String;)V\n+   #43 = Utf8               (Ljava/lang/String;)V\n    #44 = Utf8               archiveName\n    #45 = Utf8               Ljava/lang/String;\n    #46 = Utf8               in\n    #47 = Utf8               Ljava/io/InputStream;\n    #48 = Utf8               uncompressedLength\n    #49 = Utf8               J\n    #50 = Utf8               coder\n    #51 = Utf8               Lorg/apache/commons/compress/archivers/sevenz/Coder;\n    #52 = Utf8               password\n    #53 = Utf8               [B\n-   #54 = Utf8               StackMapTable\n-   #55 = Utf8               Exceptions\n-   #56 = Utf8               encode\n-   #57 = Utf8               (Ljava/io/OutputStream;Ljava/lang/Object;)Ljava/io/OutputStream;\n-   #58 = Utf8               out\n-   #59 = Utf8               Ljava/io/OutputStream;\n-   #60 = Utf8               opts\n-   #61 = Utf8               Ljava/lang/Object;\n-   #62 = Utf8               options\n-   #63 = Utf8               Lorg/tukaani/xz/LZMA2Options;\n-   #64 = Utf8               wrapped\n-   #65 = Utf8               Lorg/tukaani/xz/FinishableOutputStream;\n-   #66 = Utf8               getOptionsAsProperties\n-   #67 = Utf8               (Ljava/lang/Object;)[B\n-   #68 = Utf8               dictSize\n-   #69 = Utf8               lead\n-   #70 = Utf8               secondBit\n-   #71 = Utf8               getOptionsFromCoder\n-   #72 = Utf8               (Lorg/apache/commons/compress/archivers/sevenz/Coder;Ljava/io/InputStream;)Ljava/lang/Object;\n-   #73 = Utf8               getDictSize\n-   #74 = Utf8               (Ljava/lang/Object;)I\n-   #75 = Utf8               getDictionarySize\n-   #76 = Utf8               (Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n-   #77 = Utf8               dictionarySizeBits\n-   #78 = Utf8               getOptions\n-   #79 = Utf8               (Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n-   #80 = Utf8               numberOptionOrDefault\n-   #81 = Utf8               SourceFile\n-   #82 = Utf8               LZMA2Decoder.java\n-   #83 = Utf8               java/lang/Class\n-   #84 = Utf8               org/tukaani/xz/LZMA2Options\n-   #85 = Utf8               java/lang/Number\n-   #86 = NameAndType        #31:#113      // \"<init>\":([Ljava/lang/Class;)V\n-   #87 = NameAndType        #75:#76       // getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n-   #88 = Utf8               org/tukaani/xz/LZMA2InputStream\n-   #89 = NameAndType        #31:#114      // \"<init>\":(Ljava/io/InputStream;I)V\n-   #90 = Utf8               java/lang/IllegalArgumentException\n-   #91 = Utf8               java/io/IOException\n-   #92 = NameAndType        #115:#116     // getMessage:()Ljava/lang/String;\n-   #93 = NameAndType        #31:#117      // \"<init>\":(Ljava/lang/String;)V\n-   #94 = NameAndType        #78:#79       // getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n-   #95 = Utf8               org/tukaani/xz/FinishableWrapperOutputStream\n-   #96 = NameAndType        #31:#118      // \"<init>\":(Ljava/io/OutputStream;)V\n-   #97 = NameAndType        #119:#120     // getOutputStream:(Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n-   #98 = NameAndType        #73:#74       // getDictSize:(Ljava/lang/Object;)I\n-   #99 = Class              #121          // java/lang/Integer\n-  #100 = NameAndType        #122:#123     // numberOfLeadingZeros:(I)I\n-  #101 = NameAndType        #124:#125     // valueOf:(I)Ljava/lang/Integer;\n-  #102 = NameAndType        #73:#126      // getDictSize:()I\n-  #103 = NameAndType        #80:#74       // numberOptionOrDefault:(Ljava/lang/Object;)I\n-  #104 = Class              #127          // org/apache/commons/compress/archivers/sevenz/Coder\n-  #105 = NameAndType        #128:#53      // properties:[B\n-  #106 = Utf8               Unsupported LZMA2 property bits\n-  #107 = Utf8               Dictionary larger than 4GiB maximum size\n-  #108 = NameAndType        #31:#32       // \"<init>\":()V\n-  #109 = NameAndType        #129:#130     // setDictSize:(I)V\n-  #110 = NameAndType        #80:#131      // numberOptionOrDefault:(Ljava/lang/Object;I)I\n-  #111 = Utf8               org/apache/commons/compress/archivers/sevenz/LZMA2Decoder\n-  #112 = Utf8               org/apache/commons/compress/archivers/sevenz/CoderBase\n-  #113 = Utf8               ([Ljava/lang/Class;)V\n-  #114 = Utf8               (Ljava/io/InputStream;I)V\n-  #115 = Utf8               getMessage\n-  #116 = Utf8               ()Ljava/lang/String;\n-  #117 = Utf8               (Ljava/lang/String;)V\n-  #118 = Utf8               (Ljava/io/OutputStream;)V\n-  #119 = Utf8               getOutputStream\n-  #120 = Utf8               (Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n-  #121 = Utf8               java/lang/Integer\n-  #122 = Utf8               numberOfLeadingZeros\n-  #123 = Utf8               (I)I\n-  #124 = Utf8               valueOf\n-  #125 = Utf8               (I)Ljava/lang/Integer;\n-  #126 = Utf8               ()I\n-  #127 = Utf8               org/apache/commons/compress/archivers/sevenz/Coder\n-  #128 = Utf8               properties\n-  #129 = Utf8               setDictSize\n-  #130 = Utf8               (I)V\n-  #131 = Utf8               (Ljava/lang/Object;I)I\n+   #54 = Utf8               dictionarySize\n+   #55 = Utf8               I\n+   #56 = Utf8               ex\n+   #57 = Utf8               Ljava/lang/IllegalArgumentException;\n+   #58 = Utf8               StackMapTable\n+   #59 = Utf8               encode\n+   #60 = Utf8               (Ljava/io/OutputStream;Ljava/lang/Object;)Ljava/io/OutputStream;\n+   #61 = Methodref          #1.#62        // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n+   #62 = NameAndType        #63:#64       // getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n+   #63 = Utf8               getOptions\n+   #64 = Utf8               (Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n+   #65 = Class              #66           // org/tukaani/xz/FinishableWrapperOutputStream\n+   #66 = Utf8               org/tukaani/xz/FinishableWrapperOutputStream\n+   #67 = Methodref          #65.#68       // org/tukaani/xz/FinishableWrapperOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n+   #68 = NameAndType        #5:#69        // \"<init>\":(Ljava/io/OutputStream;)V\n+   #69 = Utf8               (Ljava/io/OutputStream;)V\n+   #70 = Methodref          #10.#71       // org/tukaani/xz/LZMA2Options.getOutputStream:(Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n+   #71 = NameAndType        #72:#73       // getOutputStream:(Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n+   #72 = Utf8               getOutputStream\n+   #73 = Utf8               (Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n+   #74 = Utf8               out\n+   #75 = Utf8               Ljava/io/OutputStream;\n+   #76 = Utf8               opts\n+   #77 = Utf8               Ljava/lang/Object;\n+   #78 = Utf8               options\n+   #79 = Utf8               Lorg/tukaani/xz/LZMA2Options;\n+   #80 = Utf8               wrapped\n+   #81 = Utf8               Lorg/tukaani/xz/FinishableOutputStream;\n+   #82 = Utf8               getOptionsAsProperties\n+   #83 = Utf8               (Ljava/lang/Object;)[B\n+   #84 = Methodref          #1.#85        // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.getDictSize:(Ljava/lang/Object;)I\n+   #85 = NameAndType        #86:#87       // getDictSize:(Ljava/lang/Object;)I\n+   #86 = Utf8               getDictSize\n+   #87 = Utf8               (Ljava/lang/Object;)I\n+   #88 = Methodref          #89.#91       // java/lang/Integer.numberOfLeadingZeros:(I)I\n+   #89 = Class              #90           // java/lang/Integer\n+   #90 = Utf8               java/lang/Integer\n+   #91 = NameAndType        #92:#93       // numberOfLeadingZeros:(I)I\n+   #92 = Utf8               numberOfLeadingZeros\n+   #93 = Utf8               (I)I\n+   #94 = Utf8               dictSize\n+   #95 = Utf8               lead\n+   #96 = Utf8               secondBit\n+   #97 = Utf8               getOptionsFromCoder\n+   #98 = Utf8               (Lorg/apache/commons/compress/archivers/sevenz/Coder;Ljava/io/InputStream;)Ljava/lang/Object;\n+   #99 = Methodref          #89.#100      // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+  #100 = NameAndType        #101:#102     // valueOf:(I)Ljava/lang/Integer;\n+  #101 = Utf8               valueOf\n+  #102 = Utf8               (I)Ljava/lang/Integer;\n+  #103 = Methodref          #10.#104      // org/tukaani/xz/LZMA2Options.getDictSize:()I\n+  #104 = NameAndType        #86:#105      // getDictSize:()I\n+  #105 = Utf8               ()I\n+  #106 = Methodref          #1.#107       // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.numberOptionOrDefault:(Ljava/lang/Object;)I\n+  #107 = NameAndType        #108:#87      // numberOptionOrDefault:(Ljava/lang/Object;)I\n+  #108 = Utf8               numberOptionOrDefault\n+  #109 = Fieldref           #110.#112     // org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n+  #110 = Class              #111          // org/apache/commons/compress/archivers/sevenz/Coder\n+  #111 = Utf8               org/apache/commons/compress/archivers/sevenz/Coder\n+  #112 = NameAndType        #113:#53      // properties:[B\n+  #113 = Utf8               properties\n+  #114 = String             #115          // Unsupported LZMA2 property bits\n+  #115 = Utf8               Unsupported LZMA2 property bits\n+  #116 = Methodref          #36.#42       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+  #117 = String             #118          // Dictionary larger than 4GiB maximum size\n+  #118 = Utf8               Dictionary larger than 4GiB maximum size\n+  #119 = Utf8               dictionarySizeBits\n+  #120 = Methodref          #10.#121      // org/tukaani/xz/LZMA2Options.\"<init>\":()V\n+  #121 = NameAndType        #5:#6         // \"<init>\":()V\n+  #122 = Methodref          #10.#123      // org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n+  #123 = NameAndType        #124:#125     // setDictSize:(I)V\n+  #124 = Utf8               setDictSize\n+  #125 = Utf8               (I)V\n+  #126 = Integer            8388608\n+  #127 = Methodref          #1.#128       // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.numberOptionOrDefault:(Ljava/lang/Object;I)I\n+  #128 = NameAndType        #108:#129     // numberOptionOrDefault:(Ljava/lang/Object;I)I\n+  #129 = Utf8               (Ljava/lang/Object;I)I\n+  #130 = Utf8               SourceFile\n+  #131 = Utf8               LZMA2Decoder.java\n {\n   org.apache.commons.compress.archivers.sevenz.LZMA2Decoder();\n     descriptor: ()V\n     flags: (0x0000)\n     Code:\n       stack=5, locals=1, args_size=1\n          0: aload_0\n          1: iconst_2\n-         2: anewarray     #1                  // class java/lang/Class\n+         2: anewarray     #8                  // class java/lang/Class\n          5: dup\n          6: iconst_0\n-         7: ldc           #2                  // class org/tukaani/xz/LZMA2Options\n+         7: ldc           #10                 // class org/tukaani/xz/LZMA2Options\n          9: aastore\n         10: dup\n         11: iconst_1\n-        12: ldc           #3                  // class java/lang/Number\n+        12: ldc           #12                 // class java/lang/Number\n         14: aastore\n-        15: invokespecial #4                  // Method org/apache/commons/compress/archivers/sevenz/CoderBase.\"<init>\":([Ljava/lang/Class;)V\n+        15: invokespecial #14                 // Method org/apache/commons/compress/archivers/sevenz/CoderBase.\"<init>\":([Ljava/lang/Class;)V\n         18: return\n       LineNumberTable:\n         line 31: 0\n         line 32: 18\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      19     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMA2Decoder;\n \n   java.io.InputStream decode(java.lang.String, java.io.InputStream, long, org.apache.commons.compress.archivers.sevenz.Coder, byte[]) throws java.io.IOException;\n     descriptor: (Ljava/lang/String;Ljava/io/InputStream;JLorg/apache/commons/compress/archivers/sevenz/Coder;[B)Ljava/io/InputStream;\n     flags: (0x0000)\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=8, args_size=6\n          0: aload_0\n          1: aload         5\n-         3: invokespecial #5                  // Method getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+         3: invokespecial #26                 // Method getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n          6: istore        7\n-         8: new           #6                  // class org/tukaani/xz/LZMA2InputStream\n+         8: new           #30                 // class org/tukaani/xz/LZMA2InputStream\n         11: dup\n         12: aload_2\n         13: iload         7\n-        15: invokespecial #7                  // Method org/tukaani/xz/LZMA2InputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+        15: invokespecial #32                 // Method org/tukaani/xz/LZMA2InputStream.\"<init>\":(Ljava/io/InputStream;I)V\n         18: areturn\n         19: astore        7\n-        21: new           #9                  // class java/io/IOException\n+        21: new           #24                 // class java/io/IOException\n         24: dup\n         25: aload         7\n-        27: invokevirtual #10                 // Method java/lang/IllegalArgumentException.getMessage:()Ljava/lang/String;\n-        30: invokespecial #11                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        27: invokevirtual #35                 // Method java/lang/IllegalArgumentException.getMessage:()Ljava/lang/String;\n+        30: invokespecial #41                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         33: athrow\n       Exception table:\n          from    to  target type\n              0    18    19   Class java/lang/IllegalArgumentException\n       LineNumberTable:\n         line 38: 0\n         line 39: 8\n         line 40: 19\n         line 41: 21\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            8      11     7 dictionarySize   I\n-           21      13     7    ex   Ljava/lang/IllegalArgumentException;\n             0      34     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMA2Decoder;\n             0      34     1 archiveName   Ljava/lang/String;\n             0      34     2    in   Ljava/io/InputStream;\n             0      34     3 uncompressedLength   J\n             0      34     5 coder   Lorg/apache/commons/compress/archivers/sevenz/Coder;\n             0      34     6 password   [B\n+            8      11     7 dictionarySize   I\n+           21      13     7    ex   Ljava/lang/IllegalArgumentException;\n       StackMapTable: number_of_entries = 1\n         frame_type = 83 /* same_locals_1_stack_item */\n           stack = [ class java/lang/IllegalArgumentException ]\n-    Exceptions:\n-      throws java.io.IOException\n \n   java.io.OutputStream encode(java.io.OutputStream, java.lang.Object) throws java.io.IOException;\n     descriptor: (Ljava/io/OutputStream;Ljava/lang/Object;)Ljava/io/OutputStream;\n     flags: (0x0000)\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=3, locals=5, args_size=3\n          0: aload_0\n          1: aload_2\n-         2: invokespecial #12                 // Method getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n+         2: invokespecial #61                 // Method getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n          5: astore_3\n-         6: new           #13                 // class org/tukaani/xz/FinishableWrapperOutputStream\n+         6: new           #65                 // class org/tukaani/xz/FinishableWrapperOutputStream\n          9: dup\n         10: aload_1\n-        11: invokespecial #14                 // Method org/tukaani/xz/FinishableWrapperOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n+        11: invokespecial #67                 // Method org/tukaani/xz/FinishableWrapperOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n         14: astore        4\n         16: aload_3\n         17: aload         4\n-        19: invokevirtual #15                 // Method org/tukaani/xz/LZMA2Options.getOutputStream:(Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n+        19: invokevirtual #70                 // Method org/tukaani/xz/LZMA2Options.getOutputStream:(Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n         22: areturn\n       LineNumberTable:\n         line 48: 0\n         line 49: 6\n         line 50: 16\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      23     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMA2Decoder;\n             0      23     1   out   Ljava/io/OutputStream;\n             0      23     2  opts   Ljava/lang/Object;\n             6      17     3 options   Lorg/tukaani/xz/LZMA2Options;\n            16       7     4 wrapped   Lorg/tukaani/xz/FinishableOutputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   byte[] getOptionsAsProperties(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)[B\n     flags: (0x0000)\n     Code:\n       stack=5, locals=5, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #16                 // Method getDictSize:(Ljava/lang/Object;)I\n+         2: invokespecial #84                 // Method getDictSize:(Ljava/lang/Object;)I\n          5: istore_2\n          6: iload_2\n-         7: invokestatic  #17                 // Method java/lang/Integer.numberOfLeadingZeros:(I)I\n+         7: invokestatic  #88                 // Method java/lang/Integer.numberOfLeadingZeros:(I)I\n         10: istore_3\n         11: iload_2\n         12: bipush        30\n         14: iload_3\n         15: isub\n         16: iushr\n         17: iconst_2\n@@ -278,14 +278,16 @@\n         36: bastore\n         37: areturn\n       LineNumberTable:\n         line 55: 0\n         line 56: 6\n         line 57: 11\n         line 58: 21\n+        line 59: 26\n+        line 58: 37\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      38     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMA2Decoder;\n             0      38     1  opts   Ljava/lang/Object;\n             6      32     2 dictSize   I\n            11      27     3  lead   I\n            21      17     4 secondBit   I\n@@ -293,16 +295,16 @@\n   java.lang.Object getOptionsFromCoder(org.apache.commons.compress.archivers.sevenz.Coder, java.io.InputStream);\n     descriptor: (Lorg/apache/commons/compress/archivers/sevenz/Coder;Ljava/io/InputStream;)Ljava/lang/Object;\n     flags: (0x0000)\n     Code:\n       stack=2, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #5                  // Method getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n-         5: invokestatic  #18                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+         2: invokespecial #26                 // Method getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+         5: invokestatic  #99                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n          8: areturn\n       LineNumberTable:\n         line 65: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMA2Decoder;\n             0       9     1 coder   Lorg/apache/commons/compress/archivers/sevenz/Coder;\n@@ -310,23 +312,23 @@\n \n   private int getDictSize(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n-         1: instanceof    #2                  // class org/tukaani/xz/LZMA2Options\n+         1: instanceof    #10                 // class org/tukaani/xz/LZMA2Options\n          4: ifeq          15\n          7: aload_1\n-         8: checkcast     #2                  // class org/tukaani/xz/LZMA2Options\n-        11: invokevirtual #19                 // Method org/tukaani/xz/LZMA2Options.getDictSize:()I\n+         8: checkcast     #10                 // class org/tukaani/xz/LZMA2Options\n+        11: invokevirtual #103                // Method org/tukaani/xz/LZMA2Options.getDictSize:()I\n         14: ireturn\n         15: aload_0\n         16: aload_1\n-        17: invokespecial #20                 // Method numberOptionOrDefault:(Ljava/lang/Object;)I\n+        17: invokespecial #106                // Method numberOptionOrDefault:(Ljava/lang/Object;)I\n         20: ireturn\n       LineNumberTable:\n         line 69: 0\n         line 70: 7\n         line 72: 15\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -334,39 +336,41 @@\n             0      21     1  opts   Ljava/lang/Object;\n       StackMapTable: number_of_entries = 1\n         frame_type = 15 /* same */\n \n   private int getDictionarySize(org.apache.commons.compress.archivers.sevenz.Coder) throws java.lang.IllegalArgumentException;\n     descriptor: (Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n     flags: (0x0002) ACC_PRIVATE\n+    Exceptions:\n+      throws java.lang.IllegalArgumentException\n     Code:\n       stack=3, locals=3, args_size=2\n          0: sipush        255\n          3: aload_1\n-         4: getfield      #21                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n+         4: getfield      #109                // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n          7: iconst_0\n          8: baload\n          9: iand\n         10: istore_2\n         11: iload_2\n         12: bipush        -64\n         14: iand\n         15: ifeq          28\n-        18: new           #8                  // class java/lang/IllegalArgumentException\n+        18: new           #36                 // class java/lang/IllegalArgumentException\n         21: dup\n-        22: ldc           #22                 // String Unsupported LZMA2 property bits\n-        24: invokespecial #23                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        22: ldc           #114                // String Unsupported LZMA2 property bits\n+        24: invokespecial #116                // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         27: athrow\n         28: iload_2\n         29: bipush        40\n         31: if_icmple     44\n-        34: new           #8                  // class java/lang/IllegalArgumentException\n+        34: new           #36                 // class java/lang/IllegalArgumentException\n         37: dup\n-        38: ldc           #24                 // String Dictionary larger than 4GiB maximum size\n-        40: invokespecial #23                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        38: ldc           #117                // String Dictionary larger than 4GiB maximum size\n+        40: invokespecial #116                // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         43: athrow\n         44: iload_2\n         45: bipush        40\n         47: if_icmpne     52\n         50: iconst_m1\n         51: ireturn\n         52: iconst_2\n@@ -397,37 +401,37 @@\n            11      54     2 dictionarySizeBits   I\n       StackMapTable: number_of_entries = 3\n         frame_type = 252 /* append */\n           offset_delta = 28\n           locals = [ int ]\n         frame_type = 15 /* same */\n         frame_type = 7 /* same */\n-    Exceptions:\n-      throws java.lang.IllegalArgumentException\n \n   private org.tukaani.xz.LZMA2Options getOptions(java.lang.Object) throws java.io.IOException;\n     descriptor: (Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n     flags: (0x0002) ACC_PRIVATE\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_1\n-         1: instanceof    #2                  // class org/tukaani/xz/LZMA2Options\n+         1: instanceof    #10                 // class org/tukaani/xz/LZMA2Options\n          4: ifeq          12\n          7: aload_1\n-         8: checkcast     #2                  // class org/tukaani/xz/LZMA2Options\n+         8: checkcast     #10                 // class org/tukaani/xz/LZMA2Options\n         11: areturn\n-        12: new           #2                  // class org/tukaani/xz/LZMA2Options\n+        12: new           #10                 // class org/tukaani/xz/LZMA2Options\n         15: dup\n-        16: invokespecial #25                 // Method org/tukaani/xz/LZMA2Options.\"<init>\":()V\n+        16: invokespecial #120                // Method org/tukaani/xz/LZMA2Options.\"<init>\":()V\n         19: astore_2\n         20: aload_2\n         21: aload_0\n         22: aload_1\n-        23: invokespecial #20                 // Method numberOptionOrDefault:(Ljava/lang/Object;)I\n-        26: invokevirtual #26                 // Method org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n+        23: invokespecial #106                // Method numberOptionOrDefault:(Ljava/lang/Object;)I\n+        26: invokevirtual #122                // Method org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n         29: aload_2\n         30: areturn\n       LineNumberTable:\n         line 90: 0\n         line 91: 7\n         line 93: 12\n         line 94: 20\n@@ -435,25 +439,23 @@\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      31     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMA2Decoder;\n             0      31     1  opts   Ljava/lang/Object;\n            20      11     2 options   Lorg/tukaani/xz/LZMA2Options;\n       StackMapTable: number_of_entries = 1\n         frame_type = 12 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   private int numberOptionOrDefault(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n-         1: ldc           #27                 // int 8388608\n-         3: invokestatic  #28                 // Method numberOptionOrDefault:(Ljava/lang/Object;I)I\n+         1: ldc           #126                // int 8388608\n+         3: invokestatic  #127                // Method numberOptionOrDefault:(Ljava/lang/Object;I)I\n          6: ireturn\n       LineNumberTable:\n         line 99: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMA2Decoder;\n             0       7     1  opts   Ljava/lang/Object;\n"}]}
