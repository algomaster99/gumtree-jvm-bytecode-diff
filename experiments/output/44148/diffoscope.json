{"diffoscope-json-version": 1, "source1": "first/OverrideCombiner.class", "source2": "second/OverrideCombiner.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,29 +5,29 @@\n \n public class OverrideCombiner extends NodeCombiner\n {\n     public ImmutableNode combine(final ImmutableNode node1, final ImmutableNode node2) {\n         final ImmutableNode.Builder result = new ImmutableNode.Builder();\n         result.name(node1.getNodeName());\n         node1.forEach(child -> {\n-            final ImmutableNode child2 = this.canCombine(node1, node2, child);\n-            result.addChild((child2 != null) ? this.combine(child, child2) : child);\n+            final ImmutableNode child2 = this.canCombine(node3, node4, child);\n+            builder.addChild((child2 != null) ? this.combine(child, child2) : child);\n             return;\n         });\n-        node2.stream().filter(child -> OverrideCombiner.HANDLER.getChildrenCount((Object)node1, child.getNodeName()) < 1).forEach(result::addChild);\n+        node2.stream().filter(child -> OverrideCombiner.HANDLER.getChildrenCount((Object)immutableNode, child.getNodeName()) < 1).forEach(result::addChild);\n         this.addAttributes(result, node1, node2);\n         result.value((node1.getValue() != null) ? node1.getValue() : node2.getValue());\n         return result.create();\n     }\n     \n     protected void addAttributes(final ImmutableNode.Builder result, final ImmutableNode node1, final ImmutableNode node2) {\n         result.addAttributes(node1.getAttributes());\n         node2.getAttributes().keySet().forEach(attr -> {\n-            if (!node1.getAttributes().containsKey(attr)) {\n-                result.addAttribute(attr, OverrideCombiner.HANDLER.getAttributeValue((Object)node2, attr));\n+            if (!immutableNode.getAttributes().containsKey(attr)) {\n+                builder.addAttribute(attr, OverrideCombiner.HANDLER.getAttributeValue((Object)immutableNode2, attr));\n             }\n         });\n     }\n     \n     protected ImmutableNode canCombine(final ImmutableNode node1, final ImmutableNode node2, final ImmutableNode child) {\n         if (OverrideCombiner.HANDLER.getChildrenCount((Object)node2, child.getNodeName()) == 1 && OverrideCombiner.HANDLER.getChildrenCount((Object)node1, child.getNodeName()) == 1 && !this.isListNode(child)) {\n             return OverrideCombiner.HANDLER.getChildren((Object)node2, child.getNodeName()).get(0);\n"}]}
