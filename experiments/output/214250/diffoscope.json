{"diffoscope-json-version": 1, "source1": "first/Cookie.class", "source2": "second/Cookie.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,126 +1,127 @@\n \n package org.json;\n \n import java.util.Iterator;\n+import java.io.Serializable;\n import java.util.Locale;\n \n public class Cookie\n {\n-    public static String escape(final String string) {\n-        final String s = string.trim();\n-        final int length = s.length();\n+    public static String escape(final String s) {\n+        final String trim = s.trim();\n+        final int length = trim.length();\n         final StringBuilder sb = new StringBuilder(length);\n         for (int i = 0; i < length; ++i) {\n-            final char c = s.charAt(i);\n-            if (c < ' ' || c == '+' || c == '%' || c == '=' || c == ';') {\n+            final char char1 = trim.charAt(i);\n+            if (char1 < ' ' || char1 == '+' || char1 == '%' || char1 == '=' || char1 == ';') {\n                 sb.append('%');\n-                sb.append(Character.forDigit((int)(c >>> 4 & 0xF), 16));\n-                sb.append(Character.forDigit((int)(c & '\\u000f'), 16));\n+                sb.append(Character.forDigit((int)(char1 >>> 4 & 0xF), 16));\n+                sb.append(Character.forDigit((int)(char1 & '\\u000f'), 16));\n             }\n             else {\n-                sb.append(c);\n+                sb.append(char1);\n             }\n         }\n         return sb.toString();\n     }\n     \n-    public static JSONObject toJSONObject(final String string) {\n-        final JSONObject jo = new JSONObject();\n-        final JSONTokener x = new JSONTokener(string);\n-        String name = unescape(x.nextTo('=').trim());\n-        if (\"\".equals(name)) {\n+    public static JSONObject toJSONObject(final String s) {\n+        final JSONObject jsonObject = new JSONObject();\n+        final JSONTokener jsonTokener = new JSONTokener(s);\n+        final String unescape = unescape(jsonTokener.nextTo('=').trim());\n+        if (\"\".equals(unescape)) {\n             throw new JSONException(\"Cookies must have a 'name'\");\n         }\n-        jo.put(\"name\", (Object)name);\n-        x.next('=');\n-        jo.put(\"value\", (Object)unescape(x.nextTo(';')).trim());\n-        x.next();\n-        while (x.more()) {\n-            name = unescape(x.nextTo(\"=;\")).trim().toLowerCase(Locale.ROOT);\n-            if (\"name\".equalsIgnoreCase(name)) {\n+        jsonObject.put(\"name\", (Object)unescape);\n+        jsonTokener.next('=');\n+        jsonObject.put(\"value\", (Object)unescape(jsonTokener.nextTo(';')).trim());\n+        jsonTokener.next();\n+        while (jsonTokener.more()) {\n+            final String lowerCase = unescape(jsonTokener.nextTo(\"=;\")).trim().toLowerCase(Locale.ROOT);\n+            if (\"name\".equalsIgnoreCase(lowerCase)) {\n                 throw new JSONException(\"Illegal attribute name: 'name'\");\n             }\n-            if (\"value\".equalsIgnoreCase(name)) {\n+            if (\"value\".equalsIgnoreCase(lowerCase)) {\n                 throw new JSONException(\"Illegal attribute name: 'value'\");\n             }\n-            Object value;\n-            if (x.next() != '=') {\n-                value = Boolean.TRUE;\n+            Serializable anObject;\n+            if (jsonTokener.next() != '=') {\n+                anObject = Boolean.TRUE;\n             }\n             else {\n-                value = unescape(x.nextTo(';')).trim();\n-                x.next();\n+                anObject = unescape(jsonTokener.nextTo(';')).trim();\n+                jsonTokener.next();\n             }\n-            if (\"\".equals(name) || \"\".equals(value)) {\n+            if (\"\".equals(lowerCase) || \"\".equals(anObject)) {\n                 continue;\n             }\n-            jo.put(name, value);\n+            jsonObject.put(lowerCase, (Object)anObject);\n         }\n-        return jo;\n+        return jsonObject;\n     }\n     \n-    public static String toString(final JSONObject jo) throws JSONException {\n+    public static String toString(final JSONObject jsonObject) throws JSONException {\n         final StringBuilder sb = new StringBuilder();\n-        String name = null;\n-        Object value = null;\n-        for (final String key : jo.keySet()) {\n-            if (\"name\".equalsIgnoreCase(key)) {\n-                name = jo.getString(key).trim();\n+        String trim = null;\n+        String trim2 = null;\n+        for (final String s : jsonObject.keySet()) {\n+            if (\"name\".equalsIgnoreCase(s)) {\n+                trim = jsonObject.getString(s).trim();\n             }\n-            if (\"value\".equalsIgnoreCase(key)) {\n-                value = jo.getString(key).trim();\n+            if (\"value\".equalsIgnoreCase(s)) {\n+                trim2 = jsonObject.getString(s).trim();\n             }\n-            if (name != null && value != null) {\n+            if (trim != null && trim2 != null) {\n                 break;\n             }\n         }\n-        if (name == null || \"\".equals(name.trim())) {\n+        if (trim == null || \"\".equals(trim.trim())) {\n             throw new JSONException(\"Cookie does not have a name\");\n         }\n-        if (value == null) {\n-            value = \"\";\n+        if (trim2 == null) {\n+            trim2 = \"\";\n         }\n-        sb.append(escape(name));\n+        sb.append(escape(trim));\n         sb.append(\"=\");\n-        sb.append(escape((String)value));\n-        for (final String key : jo.keySet()) {\n-            if (!\"name\".equalsIgnoreCase(key)) {\n-                if (\"value\".equalsIgnoreCase(key)) {\n+        sb.append(escape((String)trim2));\n+        for (final String s2 : jsonObject.keySet()) {\n+            if (!\"name\".equalsIgnoreCase(s2)) {\n+                if (\"value\".equalsIgnoreCase(s2)) {\n                     continue;\n                 }\n-                value = jo.opt(key);\n-                if (value instanceof Boolean) {\n-                    if (!Boolean.TRUE.equals(value)) {\n+                final Object opt = jsonObject.opt(s2);\n+                if (opt instanceof Boolean) {\n+                    if (!Boolean.TRUE.equals(opt)) {\n                         continue;\n                     }\n-                    sb.append(';').append(escape(key));\n+                    sb.append(';').append(escape(s2));\n                 }\n                 else {\n-                    sb.append(';').append(escape(key)).append('=').append(escape(value.toString()));\n+                    sb.append(';').append(escape(s2)).append('=').append(escape(opt.toString()));\n                 }\n             }\n         }\n         return sb.toString();\n     }\n     \n-    public static String unescape(final String string) {\n-        final int length = string.length();\n+    public static String unescape(final String s) {\n+        final int length = s.length();\n         final StringBuilder sb = new StringBuilder(length);\n         for (int i = 0; i < length; ++i) {\n-            char c = string.charAt(i);\n-            if (c == '+') {\n-                c = ' ';\n-            }\n-            else if (c == '%' && i + 2 < length) {\n-                final int d = JSONTokener.dehexchar(string.charAt(i + 1));\n-                final int e = JSONTokener.dehexchar(string.charAt(i + 2));\n-                if (d >= 0 && e >= 0) {\n-                    c = (char)(d * 16 + e);\n+            char char1 = s.charAt(i);\n+            if (char1 == '+') {\n+                char1 = ' ';\n+            }\n+            else if (char1 == '%' && i + 2 < length) {\n+                final int dehexchar = JSONTokener.dehexchar(s.charAt(i + 1));\n+                final int dehexchar2 = JSONTokener.dehexchar(s.charAt(i + 2));\n+                if (dehexchar >= 0 && dehexchar2 >= 0) {\n+                    char1 = (char)(dehexchar * 16 + dehexchar2);\n                     i += 2;\n                 }\n             }\n-            sb.append(c);\n+            sb.append(char1);\n         }\n         return sb.toString();\n     }\n }\n"}]}
