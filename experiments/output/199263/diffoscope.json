{"diffoscope-json-version": 1, "source1": "first/ObjectType.class", "source2": "second/ObjectType.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -4,73 +4,65 @@\n import org.apache.bcel.classfile.JavaClass;\n import org.apache.bcel.Repository;\n \n public class ObjectType extends ReferenceType\n {\n     private final String className;\n     \n-    public static ObjectType getInstance(final String className) {\n-        return new ObjectType(className);\n+    public static ObjectType getInstance(final String s) {\n+        return new ObjectType(s);\n     }\n     \n-    public ObjectType(final String className) {\n-        super((byte)14, \"L\" + className.replace('.', '/') + \";\");\n-        this.className = className.replace('/', '.');\n+    public ObjectType(final String s) {\n+        super((byte)14, \"L\" + s.replace('.', '/') + \";\");\n+        this.className = s.replace('/', '.');\n     }\n     \n     public String getClassName() {\n         return this.className;\n     }\n     \n     public int hashCode() {\n         return this.className.hashCode();\n     }\n     \n-    public boolean equals(final Object type) {\n-        return type instanceof ObjectType && ((ObjectType)type).className.equals(this.className);\n+    public boolean equals(final Object o) {\n+        return o instanceof ObjectType && ((ObjectType)o).className.equals(this.className);\n     }\n     \n     @Deprecated\n     public boolean referencesClass() {\n         try {\n-            final JavaClass jc = Repository.lookupClass(this.className);\n-            return jc.isClass();\n+            return Repository.lookupClass(this.className).isClass();\n         }\n-        catch (final ClassNotFoundException e) {\n+        catch (final ClassNotFoundException ex) {\n             return false;\n         }\n     }\n     \n     @Deprecated\n     public boolean referencesInterface() {\n         try {\n-            final JavaClass jc = Repository.lookupClass(this.className);\n-            return !jc.isClass();\n+            return !Repository.lookupClass(this.className).isClass();\n         }\n-        catch (final ClassNotFoundException e) {\n+        catch (final ClassNotFoundException ex) {\n             return false;\n         }\n     }\n     \n     public boolean referencesClassExact() throws ClassNotFoundException {\n-        final JavaClass jc = Repository.lookupClass(this.className);\n-        return jc.isClass();\n+        return Repository.lookupClass(this.className).isClass();\n     }\n     \n     public boolean referencesInterfaceExact() throws ClassNotFoundException {\n-        final JavaClass jc = Repository.lookupClass(this.className);\n-        return !jc.isClass();\n+        return !Repository.lookupClass(this.className).isClass();\n     }\n     \n-    public boolean subclassOf(final ObjectType superclass) throws ClassNotFoundException {\n-        return !this.referencesInterfaceExact() && !superclass.referencesInterfaceExact() && Repository.instanceOf(this.className, superclass.className);\n+    public boolean subclassOf(final ObjectType objectType) throws ClassNotFoundException {\n+        return !this.referencesInterfaceExact() && !objectType.referencesInterfaceExact() && Repository.instanceOf(this.className, objectType.className);\n     }\n     \n-    public boolean accessibleTo(final ObjectType accessor) throws ClassNotFoundException {\n-        final JavaClass jc = Repository.lookupClass(this.className);\n-        if (jc.isPublic()) {\n-            return true;\n-        }\n-        final JavaClass acc = Repository.lookupClass(accessor.className);\n-        return acc.getPackageName().equals(jc.getPackageName());\n+    public boolean accessibleTo(final ObjectType objectType) throws ClassNotFoundException {\n+        final JavaClass lookupClass = Repository.lookupClass(this.className);\n+        return lookupClass.isPublic() || Repository.lookupClass(objectType.className).getPackageName().equals(lookupClass.getPackageName());\n     }\n }\n"}]}
