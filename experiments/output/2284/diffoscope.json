{"diffoscope-json-version": 1, "source1": "first/Archiver.class", "source2": "second/Archiver.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,55 +18,95 @@\n import java.nio.file.OpenOption;\n import java.io.File;\n \n public class Archiver\n {\n     public void create(final String format, final File target, final File directory) throws IOException, ArchiveException {\n         if (this.prefersSeekableByteChannel(format)) {\n-            try (final SeekableByteChannel c = FileChannel.open(target.toPath(), StandardOpenOption.WRITE, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING)) {\n+            final SeekableByteChannel c = FileChannel.open(target.toPath(), StandardOpenOption.WRITE, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);\n+            Throwable x0 = null;\n+            try {\n                 this.create(format, c, directory, CloseableConsumer.CLOSING_CONSUMER);\n             }\n+            catch (final Throwable t) {\n+                x0 = t;\n+                throw t;\n+            }\n+            finally {\n+                if (c != null) {\n+                    $closeResource(x0, c);\n+                }\n+            }\n             return;\n         }\n-        try (final OutputStream o = Files.newOutputStream(target.toPath(), new OpenOption[0])) {\n+        final OutputStream o = Files.newOutputStream(target.toPath(), new OpenOption[0]);\n+        Throwable x2 = null;\n+        try {\n             this.create(format, o, directory, CloseableConsumer.CLOSING_CONSUMER);\n         }\n+        catch (final Throwable t2) {\n+            x2 = t2;\n+            throw t2;\n+        }\n+        finally {\n+            if (o != null) {\n+                $closeResource(x2, o);\n+            }\n+        }\n     }\n     \n     @Deprecated\n     public void create(final String format, final OutputStream target, final File directory) throws IOException, ArchiveException {\n         this.create(format, target, directory, CloseableConsumer.NULL_CONSUMER);\n     }\n     \n     public void create(final String format, final OutputStream target, final File directory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        try (final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer)) {\n+        final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);\n+        Throwable x0 = null;\n+        try {\n             this.create((ArchiveOutputStream)c.track((Closeable)new ArchiveStreamFactory().createArchiveOutputStream(format, target)), directory);\n         }\n+        catch (final Throwable t) {\n+            x0 = t;\n+            throw t;\n+        }\n+        finally {\n+            $closeResource(x0, (AutoCloseable)c);\n+        }\n     }\n     \n     @Deprecated\n     public void create(final String format, final SeekableByteChannel target, final File directory) throws IOException, ArchiveException {\n         this.create(format, target, directory, CloseableConsumer.NULL_CONSUMER);\n     }\n     \n     public void create(final String format, final SeekableByteChannel target, final File directory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        try (final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer)) {\n+        final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);\n+        Throwable x0 = null;\n+        try {\n             if (!this.prefersSeekableByteChannel(format)) {\n                 this.create(format, (OutputStream)c.track((Closeable)Channels.newOutputStream(target)), directory);\n             }\n             else if (\"zip\".equalsIgnoreCase(format)) {\n                 this.create((ArchiveOutputStream)c.track((Closeable)new ZipArchiveOutputStream(target)), directory);\n             }\n             else {\n                 if (!\"7z\".equalsIgnoreCase(format)) {\n                     throw new ArchiveException(\"Don't know how to handle format \" + format);\n                 }\n                 this.create((SevenZOutputFile)c.track((Closeable)new SevenZOutputFile(target)), directory);\n             }\n         }\n+        catch (final Throwable t) {\n+            x0 = t;\n+            throw t;\n+        }\n+        finally {\n+            $closeResource(x0, (AutoCloseable)c);\n+        }\n     }\n     \n     public void create(final ArchiveOutputStream target, final File directory) throws IOException, ArchiveException {\n         this.create(directory, (Archiver.ArchiveEntryCreator)new Archiver.Archiver$1(this, target), (Archiver.ArchiveEntryConsumer)new Archiver.Archiver$2(this, target), (Archiver.Finisher)new Archiver.Archiver$3(this, target));\n     }\n     \n     public void create(final SevenZOutputFile target, final File directory) throws IOException {\n@@ -83,16 +123,32 @@\n     }\n     \n     private void create(final String prefix, final File directory, final Archiver.ArchiveEntryCreator creator, final Archiver.ArchiveEntryConsumer consumer) throws IOException {\n         final File[] children = directory.listFiles();\n         if (children == null) {\n             return;\n         }\n-        for (final File f : children) {\n+        final File[] array = children;\n+        for (int length = array.length, i = 0; i < length; ++i) {\n+            final File f = array[i];\n             final String entryName = prefix + f.getName() + (f.isDirectory() ? \"/\" : \"\");\n             consumer.accept(f, creator.create(f, entryName));\n             if (f.isDirectory()) {\n                 this.create(entryName, f, creator, consumer);\n             }\n         }\n     }\n+    \n+    private static /* synthetic */ void $closeResource(final Throwable x0, final AutoCloseable x1) {\n+        if (x0 != null) {\n+            try {\n+                x1.close();\n+            }\n+            catch (final Throwable exception) {\n+                x0.addSuppressed(exception);\n+            }\n+        }\n+        else {\n+            x1.close();\n+        }\n+    }\n }\n"}]}
