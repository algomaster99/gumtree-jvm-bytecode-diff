{"diffoscope-json-version": 1, "source1": "first/StringUtils.class", "source2": "second/StringUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -4,118 +4,118 @@\n import java.io.UnsupportedEncodingException;\n import java.nio.charset.StandardCharsets;\n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n \n public class StringUtils\n {\n-    public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n-        if (cs1 == cs2) {\n+    public static boolean equals(final CharSequence charSequence, final CharSequence obj) {\n+        if (charSequence == obj) {\n             return true;\n         }\n-        if (cs1 == null || cs2 == null) {\n+        if (charSequence == null || obj == null) {\n             return false;\n         }\n-        if (cs1 instanceof String && cs2 instanceof String) {\n-            return cs1.equals(cs2);\n+        if (charSequence instanceof String && obj instanceof String) {\n+            return charSequence.equals(obj);\n         }\n-        return cs1.length() == cs2.length() && CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, cs1.length());\n+        return charSequence.length() == obj.length() && CharSequenceUtils.regionMatches(charSequence, false, 0, obj, 0, charSequence.length());\n     }\n     \n-    private static ByteBuffer getByteBuffer(final String string, final Charset charset) {\n-        if (string == null) {\n+    private static ByteBuffer getByteBuffer(final String s, final Charset charset) {\n+        if (s == null) {\n             return null;\n         }\n-        return ByteBuffer.wrap(string.getBytes(charset));\n+        return ByteBuffer.wrap(s.getBytes(charset));\n     }\n     \n-    public static ByteBuffer getByteBufferUtf8(final String string) {\n-        return getByteBuffer(string, StandardCharsets.UTF_8);\n+    public static ByteBuffer getByteBufferUtf8(final String s) {\n+        return getByteBuffer(s, StandardCharsets.UTF_8);\n     }\n     \n-    private static byte[] getBytes(final String string, final Charset charset) {\n-        if (string == null) {\n+    private static byte[] getBytes(final String s, final Charset charset) {\n+        if (s == null) {\n             return null;\n         }\n-        return string.getBytes(charset);\n+        return s.getBytes(charset);\n     }\n     \n-    public static byte[] getBytesIso8859_1(final String string) {\n-        return getBytes(string, StandardCharsets.ISO_8859_1);\n+    public static byte[] getBytesIso8859_1(final String s) {\n+        return getBytes(s, StandardCharsets.ISO_8859_1);\n     }\n     \n-    public static byte[] getBytesUnchecked(final String string, final String charsetName) {\n-        if (string == null) {\n+    public static byte[] getBytesUnchecked(final String s, final String charsetName) {\n+        if (s == null) {\n             return null;\n         }\n         try {\n-            return string.getBytes(charsetName);\n+            return s.getBytes(charsetName);\n         }\n-        catch (final UnsupportedEncodingException e) {\n-            throw newIllegalStateException(charsetName, e);\n+        catch (final UnsupportedEncodingException ex) {\n+            throw newIllegalStateException(charsetName, ex);\n         }\n     }\n     \n-    public static byte[] getBytesUsAscii(final String string) {\n-        return getBytes(string, StandardCharsets.US_ASCII);\n+    public static byte[] getBytesUsAscii(final String s) {\n+        return getBytes(s, StandardCharsets.US_ASCII);\n     }\n     \n-    public static byte[] getBytesUtf16(final String string) {\n-        return getBytes(string, StandardCharsets.UTF_16);\n+    public static byte[] getBytesUtf16(final String s) {\n+        return getBytes(s, StandardCharsets.UTF_16);\n     }\n     \n-    public static byte[] getBytesUtf16Be(final String string) {\n-        return getBytes(string, StandardCharsets.UTF_16BE);\n+    public static byte[] getBytesUtf16Be(final String s) {\n+        return getBytes(s, StandardCharsets.UTF_16BE);\n     }\n     \n-    public static byte[] getBytesUtf16Le(final String string) {\n-        return getBytes(string, StandardCharsets.UTF_16LE);\n+    public static byte[] getBytesUtf16Le(final String s) {\n+        return getBytes(s, StandardCharsets.UTF_16LE);\n     }\n     \n-    public static byte[] getBytesUtf8(final String string) {\n-        return getBytes(string, StandardCharsets.UTF_8);\n+    public static byte[] getBytesUtf8(final String s) {\n+        return getBytes(s, StandardCharsets.UTF_8);\n     }\n     \n-    private static IllegalStateException newIllegalStateException(final String charsetName, final UnsupportedEncodingException e) {\n-        return new IllegalStateException(charsetName + \": \" + e);\n+    private static IllegalStateException newIllegalStateException(final String str, final UnsupportedEncodingException obj) {\n+        return new IllegalStateException(str + \": \" + obj);\n     }\n     \n     private static String newString(final byte[] bytes, final Charset charset) {\n         return (bytes == null) ? null : new String(bytes, charset);\n     }\n     \n     public static String newString(final byte[] bytes, final String charsetName) {\n         if (bytes == null) {\n             return null;\n         }\n         try {\n             return new String(bytes, charsetName);\n         }\n-        catch (final UnsupportedEncodingException e) {\n-            throw newIllegalStateException(charsetName, e);\n+        catch (final UnsupportedEncodingException ex) {\n+            throw newIllegalStateException(charsetName, ex);\n         }\n     }\n     \n-    public static String newStringIso8859_1(final byte[] bytes) {\n-        return newString(bytes, StandardCharsets.ISO_8859_1);\n+    public static String newStringIso8859_1(final byte[] array) {\n+        return newString(array, StandardCharsets.ISO_8859_1);\n     }\n     \n-    public static String newStringUsAscii(final byte[] bytes) {\n-        return newString(bytes, StandardCharsets.US_ASCII);\n+    public static String newStringUsAscii(final byte[] array) {\n+        return newString(array, StandardCharsets.US_ASCII);\n     }\n     \n-    public static String newStringUtf16(final byte[] bytes) {\n-        return newString(bytes, StandardCharsets.UTF_16);\n+    public static String newStringUtf16(final byte[] array) {\n+        return newString(array, StandardCharsets.UTF_16);\n     }\n     \n-    public static String newStringUtf16Be(final byte[] bytes) {\n-        return newString(bytes, StandardCharsets.UTF_16BE);\n+    public static String newStringUtf16Be(final byte[] array) {\n+        return newString(array, StandardCharsets.UTF_16BE);\n     }\n     \n-    public static String newStringUtf16Le(final byte[] bytes) {\n-        return newString(bytes, StandardCharsets.UTF_16LE);\n+    public static String newStringUtf16Le(final byte[] array) {\n+        return newString(array, StandardCharsets.UTF_16LE);\n     }\n     \n-    public static String newStringUtf8(final byte[] bytes) {\n-        return newString(bytes, StandardCharsets.UTF_8);\n+    public static String newStringUtf8(final byte[] array) {\n+        return newString(array, StandardCharsets.UTF_8);\n     }\n }\n"}]}
