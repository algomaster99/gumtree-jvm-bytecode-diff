{"diffoscope-json-version": 1, "source1": "first/NullInputStream.class", "source2": "second/NullInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,16 +15,16 @@\n     private final boolean throwEofException;\n     private final boolean markSupported;\n     \n     public NullInputStream() {\n         this(0L, true, false);\n     }\n     \n-    public NullInputStream(final long size) {\n-        this(size, true, false);\n+    public NullInputStream(final long n) {\n+        this(n, true, false);\n     }\n     \n     public NullInputStream(final long size, final boolean markSupported, final boolean throwEofException) {\n         this.mark = -1L;\n         this.size = size;\n         this.markSupported = markSupported;\n         this.throwEofException = throwEofException;\n@@ -36,38 +36,38 @@\n     \n     public long getSize() {\n         return this.size;\n     }\n     \n     @Override\n     public int available() {\n-        final long avail = this.size - this.position;\n-        if (avail <= 0L) {\n+        final long n = this.size - this.position;\n+        if (n <= 0L) {\n             return 0;\n         }\n-        if (avail > 2147483647L) {\n+        if (n > 2147483647L) {\n             return Integer.MAX_VALUE;\n         }\n-        return (int)avail;\n+        return (int)n;\n     }\n     \n     @Override\n     public void close() throws IOException {\n         this.eof = false;\n         this.position = 0L;\n         this.mark = -1L;\n     }\n     \n     @Override\n-    public synchronized void mark(final int readlimit) {\n+    public synchronized void mark(final int n) {\n         if (!this.markSupported) {\n             throw new UnsupportedOperationException(\"Mark not supported\");\n         }\n         this.mark = this.position;\n-        this.readlimit = readlimit;\n+        this.readlimit = n;\n     }\n     \n     @Override\n     public boolean markSupported() {\n         return this.markSupported;\n     }\n     \n@@ -80,34 +80,34 @@\n             return this.doEndOfFile();\n         }\n         ++this.position;\n         return this.processByte();\n     }\n     \n     @Override\n-    public int read(final byte[] bytes) throws IOException {\n-        return this.read(bytes, 0, bytes.length);\n+    public int read(final byte[] array) throws IOException {\n+        return this.read(array, 0, array.length);\n     }\n     \n     @Override\n-    public int read(final byte[] bytes, final int offset, final int length) throws IOException {\n+    public int read(final byte[] array, final int n, final int n2) throws IOException {\n         if (this.eof) {\n             throw new IOException(\"Read after end of file\");\n         }\n         if (this.position == this.size) {\n             return this.doEndOfFile();\n         }\n-        this.position += length;\n-        int returnLength = length;\n+        this.position += n2;\n+        int n3 = n2;\n         if (this.position > this.size) {\n-            returnLength = length - (int)(this.position - this.size);\n+            n3 = n2 - (int)(this.position - this.size);\n             this.position = this.size;\n         }\n-        this.processBytes(bytes, offset, returnLength);\n-        return returnLength;\n+        this.processBytes(array, n, n3);\n+        return n3;\n     }\n     \n     @Override\n     public synchronized void reset() throws IOException {\n         if (!this.markSupported) {\n             throw new UnsupportedOperationException(\"Mark not supported\");\n         }\n@@ -118,35 +118,35 @@\n             throw new IOException(\"Marked position [\" + this.mark + \"] is no longer valid - passed the read limit [\" + this.readlimit + \"]\");\n         }\n         this.position = this.mark;\n         this.eof = false;\n     }\n     \n     @Override\n-    public long skip(final long numberOfBytes) throws IOException {\n+    public long skip(final long n) throws IOException {\n         if (this.eof) {\n             throw new IOException(\"Skip after end of file\");\n         }\n         if (this.position == this.size) {\n             return this.doEndOfFile();\n         }\n-        this.position += numberOfBytes;\n-        long returnLength = numberOfBytes;\n+        this.position += n;\n+        long n2 = n;\n         if (this.position > this.size) {\n-            returnLength = numberOfBytes - (this.position - this.size);\n+            n2 = n - (this.position - this.size);\n             this.position = this.size;\n         }\n-        return returnLength;\n+        return n2;\n     }\n     \n     protected int processByte() {\n         return 0;\n     }\n     \n-    protected void processBytes(final byte[] bytes, final int offset, final int length) {\n+    protected void processBytes(final byte[] array, final int n, final int n2) {\n     }\n     \n     private int doEndOfFile() throws EOFException {\n         this.eof = true;\n         if (this.throwEofException) {\n             throw new EOFException();\n         }\n"}]}
