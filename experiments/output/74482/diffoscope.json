{"diffoscope-json-version": 1, "source1": "first/ConfigurationPropertiesFactoryBean.class", "source2": "second/ConfigurationPropertiesFactoryBean.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,13 +1,12 @@\n \n package org.apache.commons.configuration2.spring;\n \n import org.apache.commons.configuration2.builder.fluent.Configurations;\n import java.util.function.Consumer;\n-import java.util.Objects;\n import java.util.stream.Stream;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.configuration2.ConfigurationConverter;\n import org.springframework.util.Assert;\n import org.springframework.core.io.Resource;\n import org.apache.commons.configuration2.Configuration;\n import org.apache.commons.configuration2.CompositeConfiguration;\n@@ -49,21 +48,20 @@\n             throw new IllegalArgumentException(\"no configuration object or location specified\");\n         }\n         if (this.compositeConfiguration == null) {\n             this.compositeConfiguration = new CompositeConfiguration();\n         }\n         this.compositeConfiguration.setThrowExceptionOnMissing(this.throwExceptionOnMissing);\n         if (this.configurations != null) {\n-            final Stream<Configuration> of = Stream.of(this.configurations);\n-            final CompositeConfiguration compositeConfiguration = this.compositeConfiguration;\n-            Objects.requireNonNull(compositeConfiguration);\n-            of.forEach(compositeConfiguration::addConfiguration);\n+            Stream.of(this.configurations).forEach(this.compositeConfiguration::addConfiguration);\n         }\n         if (this.locations != null) {\n-            for (final Resource location : this.locations) {\n+            Resource[] locations;\n+            for (int length = (locations = this.locations).length, i = 0; i < length; ++i) {\n+                final Resource location = locations[i];\n                 this.compositeConfiguration.addConfiguration((Configuration)new Configurations().properties(location.getURL()));\n             }\n         }\n     }\n     \n     public Configuration[] getConfigurations() {\n         return defensiveCopy(this.configurations);\n"}]}
