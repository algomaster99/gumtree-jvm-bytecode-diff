{"diffoscope-json-version": 1, "source1": "first/SizeFileFilter.class", "source2": "second/SizeFileFilter.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,45 +1,45 @@\n-  SHA-256 checksum adcebb276983236859f35e6b4b0ed9d43e06c1d886101fdf6074df61a760ee8d\n+  SHA-256 checksum 958b6635430e881f183809e10bb3c2e5d5ec13dcbb4a212665b51d3d440e833a\n   Compiled from \"SizeFileFilter.java\"\n public class org.apache.commons.io.filefilter.SizeFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #26                         // org/apache/commons/io/filefilter/SizeFileFilter\n   super_class: #27                        // org/apache/commons/io/filefilter/AbstractFileFilter\n   interfaces: 1, fields: 3, methods: 8, attributes: 1\n Constant pool:\n-    #1 = Methodref          #26.#71       // org/apache/commons/io/filefilter/SizeFileFilter.\"<init>\":(JZ)V\n-    #2 = Methodref          #27.#72       // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n-    #3 = Class              #73           // java/lang/IllegalArgumentException\n-    #4 = String             #74           // The size must be non-negative\n-    #5 = Methodref          #3.#75        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-    #6 = Fieldref           #26.#76       // org/apache/commons/io/filefilter/SizeFileFilter.size:J\n-    #7 = Fieldref           #26.#77       // org/apache/commons/io/filefilter/SizeFileFilter.acceptLarger:Z\n-    #8 = Methodref          #78.#79       // java/io/File.length:()J\n-    #9 = Methodref          #26.#80       // org/apache/commons/io/filefilter/SizeFileFilter.accept:(J)Z\n-   #10 = Methodref          #81.#82       // java/nio/file/Files.size:(Ljava/nio/file/Path;)J\n-   #11 = Methodref          #26.#83       // org/apache/commons/io/filefilter/SizeFileFilter.toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n-   #12 = Class              #84           // java/io/IOException\n-   #13 = Methodref          #26.#85       // org/apache/commons/io/filefilter/SizeFileFilter.handle:(Ljava/lang/Throwable;)Ljava/nio/file/FileVisitResult;\n-   #14 = String             #86           // >=\n-   #15 = String             #87           // <\n-   #16 = Class              #88           // java/lang/StringBuilder\n-   #17 = Methodref          #16.#72       // java/lang/StringBuilder.\"<init>\":()V\n-   #18 = Methodref          #27.#89       // org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n-   #19 = Methodref          #16.#90       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #20 = String             #91           // (\n-   #21 = Methodref          #16.#92       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #22 = String             #93           // )\n-   #23 = Methodref          #16.#89       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #24 = Class              #94           // java/nio/file/Path\n-   #25 = Methodref          #26.#95       // org/apache/commons/io/filefilter/SizeFileFilter.visitFile:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-   #26 = Class              #96           // org/apache/commons/io/filefilter/SizeFileFilter\n-   #27 = Class              #97           // org/apache/commons/io/filefilter/AbstractFileFilter\n-   #28 = Class              #98           // java/io/Serializable\n+    #1 = Methodref          #26.#69       // org/apache/commons/io/filefilter/SizeFileFilter.\"<init>\":(JZ)V\n+    #2 = Methodref          #27.#70       // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n+    #3 = Class              #71           // java/lang/IllegalArgumentException\n+    #4 = String             #72           // The size must be non-negative\n+    #5 = Methodref          #3.#73        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+    #6 = Fieldref           #26.#74       // org/apache/commons/io/filefilter/SizeFileFilter.size:J\n+    #7 = Fieldref           #26.#75       // org/apache/commons/io/filefilter/SizeFileFilter.acceptLarger:Z\n+    #8 = Methodref          #76.#77       // java/io/File.length:()J\n+    #9 = Methodref          #26.#78       // org/apache/commons/io/filefilter/SizeFileFilter.accept:(J)Z\n+   #10 = Methodref          #79.#80       // java/nio/file/Files.size:(Ljava/nio/file/Path;)J\n+   #11 = Methodref          #26.#81       // org/apache/commons/io/filefilter/SizeFileFilter.toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+   #12 = Class              #82           // java/io/IOException\n+   #13 = Methodref          #26.#83       // org/apache/commons/io/filefilter/SizeFileFilter.handle:(Ljava/lang/Throwable;)Ljava/nio/file/FileVisitResult;\n+   #14 = String             #84           // >=\n+   #15 = String             #85           // <\n+   #16 = Class              #86           // java/lang/StringBuilder\n+   #17 = Methodref          #16.#70       // java/lang/StringBuilder.\"<init>\":()V\n+   #18 = Methodref          #27.#87       // org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n+   #19 = Methodref          #16.#88       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #20 = String             #89           // (\n+   #21 = Methodref          #16.#90       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+   #22 = String             #91           // )\n+   #23 = Methodref          #16.#87       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #24 = Class              #92           // java/nio/file/Path\n+   #25 = Methodref          #26.#93       // org/apache/commons/io/filefilter/SizeFileFilter.visitFile:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+   #26 = Class              #94           // org/apache/commons/io/filefilter/SizeFileFilter\n+   #27 = Class              #95           // org/apache/commons/io/filefilter/AbstractFileFilter\n+   #28 = Class              #96           // java/io/Serializable\n    #29 = Utf8               serialVersionUID\n    #30 = Utf8               J\n    #31 = Utf8               ConstantValue\n    #32 = Long               7388077430788600069l\n    #34 = Utf8               acceptLarger\n    #35 = Utf8               Z\n    #36 = Utf8               size\n@@ -48,81 +48,79 @@\n    #39 = Utf8               Code\n    #40 = Utf8               LineNumberTable\n    #41 = Utf8               LocalVariableTable\n    #42 = Utf8               this\n    #43 = Utf8               Lorg/apache/commons/io/filefilter/SizeFileFilter;\n    #44 = Utf8               (JZ)V\n    #45 = Utf8               StackMapTable\n-   #46 = Class              #96           // org/apache/commons/io/filefilter/SizeFileFilter\n-   #47 = Utf8               accept\n-   #48 = Utf8               (Ljava/io/File;)Z\n-   #49 = Utf8               file\n-   #50 = Utf8               Ljava/io/File;\n-   #51 = Utf8               (J)Z\n-   #52 = Utf8               length\n-   #53 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-   #54 = Utf8               e\n-   #55 = Utf8               Ljava/io/IOException;\n-   #56 = Utf8               Ljava/nio/file/Path;\n-   #57 = Utf8               attributes\n-   #58 = Utf8               Ljava/nio/file/attribute/BasicFileAttributes;\n-   #59 = Class              #84           // java/io/IOException\n-   #60 = Utf8               toString\n-   #61 = Utf8               ()Ljava/lang/String;\n-   #62 = Utf8               condition\n-   #63 = Utf8               Ljava/lang/String;\n-   #64 = Class              #99           // java/lang/String\n-   #65 = Utf8               visitFile\n-   #66 = Utf8               attrs\n-   #67 = Utf8               Exceptions\n-   #68 = Utf8               (Ljava/lang/Object;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-   #69 = Utf8               SourceFile\n-   #70 = Utf8               SizeFileFilter.java\n-   #71 = NameAndType        #37:#44       // \"<init>\":(JZ)V\n-   #72 = NameAndType        #37:#100      // \"<init>\":()V\n-   #73 = Utf8               java/lang/IllegalArgumentException\n-   #74 = Utf8               The size must be non-negative\n-   #75 = NameAndType        #37:#101      // \"<init>\":(Ljava/lang/String;)V\n-   #76 = NameAndType        #36:#30       // size:J\n-   #77 = NameAndType        #34:#35       // acceptLarger:Z\n-   #78 = Class              #102          // java/io/File\n-   #79 = NameAndType        #52:#103      // length:()J\n-   #80 = NameAndType        #47:#51       // accept:(J)Z\n-   #81 = Class              #104          // java/nio/file/Files\n-   #82 = NameAndType        #36:#105      // size:(Ljava/nio/file/Path;)J\n-   #83 = NameAndType        #106:#107     // toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n-   #84 = Utf8               java/io/IOException\n-   #85 = NameAndType        #108:#109     // handle:(Ljava/lang/Throwable;)Ljava/nio/file/FileVisitResult;\n-   #86 = Utf8               >=\n-   #87 = Utf8               <\n-   #88 = Utf8               java/lang/StringBuilder\n-   #89 = NameAndType        #60:#61       // toString:()Ljava/lang/String;\n-   #90 = NameAndType        #110:#111     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #91 = Utf8               (\n-   #92 = NameAndType        #110:#112     // append:(J)Ljava/lang/StringBuilder;\n-   #93 = Utf8               )\n-   #94 = Utf8               java/nio/file/Path\n-   #95 = NameAndType        #65:#53       // visitFile:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-   #96 = Utf8               org/apache/commons/io/filefilter/SizeFileFilter\n-   #97 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n-   #98 = Utf8               java/io/Serializable\n-   #99 = Utf8               java/lang/String\n-  #100 = Utf8               ()V\n-  #101 = Utf8               (Ljava/lang/String;)V\n-  #102 = Utf8               java/io/File\n-  #103 = Utf8               ()J\n-  #104 = Utf8               java/nio/file/Files\n-  #105 = Utf8               (Ljava/nio/file/Path;)J\n-  #106 = Utf8               toFileVisitResult\n-  #107 = Utf8               (ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n-  #108 = Utf8               handle\n-  #109 = Utf8               (Ljava/lang/Throwable;)Ljava/nio/file/FileVisitResult;\n-  #110 = Utf8               append\n-  #111 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #112 = Utf8               (J)Ljava/lang/StringBuilder;\n+   #46 = Utf8               accept\n+   #47 = Utf8               (Ljava/io/File;)Z\n+   #48 = Utf8               file\n+   #49 = Utf8               Ljava/io/File;\n+   #50 = Utf8               (J)Z\n+   #51 = Utf8               length\n+   #52 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+   #53 = Utf8               e\n+   #54 = Utf8               Ljava/io/IOException;\n+   #55 = Utf8               Ljava/nio/file/Path;\n+   #56 = Utf8               attributes\n+   #57 = Utf8               Ljava/nio/file/attribute/BasicFileAttributes;\n+   #58 = Utf8               toString\n+   #59 = Utf8               ()Ljava/lang/String;\n+   #60 = Utf8               condition\n+   #61 = Utf8               Ljava/lang/String;\n+   #62 = Class              #97           // java/lang/String\n+   #63 = Utf8               visitFile\n+   #64 = Utf8               attrs\n+   #65 = Utf8               Exceptions\n+   #66 = Utf8               (Ljava/lang/Object;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+   #67 = Utf8               SourceFile\n+   #68 = Utf8               SizeFileFilter.java\n+   #69 = NameAndType        #37:#44       // \"<init>\":(JZ)V\n+   #70 = NameAndType        #37:#98       // \"<init>\":()V\n+   #71 = Utf8               java/lang/IllegalArgumentException\n+   #72 = Utf8               The size must be non-negative\n+   #73 = NameAndType        #37:#99       // \"<init>\":(Ljava/lang/String;)V\n+   #74 = NameAndType        #36:#30       // size:J\n+   #75 = NameAndType        #34:#35       // acceptLarger:Z\n+   #76 = Class              #100          // java/io/File\n+   #77 = NameAndType        #51:#101      // length:()J\n+   #78 = NameAndType        #46:#50       // accept:(J)Z\n+   #79 = Class              #102          // java/nio/file/Files\n+   #80 = NameAndType        #36:#103      // size:(Ljava/nio/file/Path;)J\n+   #81 = NameAndType        #104:#105     // toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+   #82 = Utf8               java/io/IOException\n+   #83 = NameAndType        #106:#107     // handle:(Ljava/lang/Throwable;)Ljava/nio/file/FileVisitResult;\n+   #84 = Utf8               >=\n+   #85 = Utf8               <\n+   #86 = Utf8               java/lang/StringBuilder\n+   #87 = NameAndType        #58:#59       // toString:()Ljava/lang/String;\n+   #88 = NameAndType        #108:#109     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #89 = Utf8               (\n+   #90 = NameAndType        #108:#110     // append:(J)Ljava/lang/StringBuilder;\n+   #91 = Utf8               )\n+   #92 = Utf8               java/nio/file/Path\n+   #93 = NameAndType        #63:#52       // visitFile:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+   #94 = Utf8               org/apache/commons/io/filefilter/SizeFileFilter\n+   #95 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n+   #96 = Utf8               java/io/Serializable\n+   #97 = Utf8               java/lang/String\n+   #98 = Utf8               ()V\n+   #99 = Utf8               (Ljava/lang/String;)V\n+  #100 = Utf8               java/io/File\n+  #101 = Utf8               ()J\n+  #102 = Utf8               java/nio/file/Files\n+  #103 = Utf8               (Ljava/nio/file/Path;)J\n+  #104 = Utf8               toFileVisitResult\n+  #105 = Utf8               (ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+  #106 = Utf8               handle\n+  #107 = Utf8               (Ljava/lang/Throwable;)Ljava/nio/file/FileVisitResult;\n+  #108 = Utf8               append\n+  #109 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #110 = Utf8               (J)Ljava/lang/StringBuilder;\n {\n   private static final long serialVersionUID = 7388077430788600069l;\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long 7388077430788600069l\n \n   private final boolean acceptLarger;\n"}]}
