{"diffoscope-json-version": 1, "source1": "first/Lister.class", "source2": "second/Lister.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -3,162 +3,163 @@\n \n import java.util.Iterator;\n import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n import org.apache.commons.compress.archivers.tar.TarFile;\n import java.util.Enumeration;\n import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n import org.apache.commons.compress.archivers.zip.ZipFile;\n+import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;\n import org.apache.commons.compress.archivers.sevenz.SevenZFile;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.BufferedInputStream;\n import java.nio.file.Files;\n import java.nio.file.OpenOption;\n import java.io.File;\n \n public final class Lister\n {\n     private static final ArchiveStreamFactory FACTORY;\n     \n-    public static void main(final String[] args) throws Exception {\n-        if (args.length == 0) {\n+    public static void main(final String[] array) throws Exception {\n+        if (array.length == 0) {\n             usage();\n             return;\n         }\n-        System.out.println(\"Analysing \" + args[0]);\n-        final File f = new File(args[0]);\n-        if (!f.isFile()) {\n-            System.err.println(f + \" doesn't exist or is a directory\");\n-        }\n-        final String format = (args.length > 1) ? args[1] : detectFormat(f);\n-        if (\"7z\".equalsIgnoreCase(format)) {\n-            list7z(f);\n+        System.out.println(\"Analysing \" + array[0]);\n+        final File file = new File(array[0]);\n+        if (!file.isFile()) {\n+            System.err.println(file + \" doesn't exist or is a directory\");\n+        }\n+        final String anObject = (array.length > 1) ? array[1] : detectFormat(file);\n+        if (\"7z\".equalsIgnoreCase(anObject)) {\n+            list7z(file);\n         }\n-        else if (\"zipfile\".equals(format)) {\n-            listZipUsingZipFile(f);\n+        else if (\"zipfile\".equals(anObject)) {\n+            listZipUsingZipFile(file);\n         }\n-        else if (\"tarfile\".equals(format)) {\n-            listZipUsingTarFile(f);\n+        else if (\"tarfile\".equals(anObject)) {\n+            listZipUsingTarFile(file);\n         }\n         else {\n-            listStream(f, args);\n+            listStream(file, array);\n         }\n     }\n     \n-    private static void listStream(final File f, final String[] args) throws ArchiveException, IOException {\n-        final InputStream fis = new BufferedInputStream(Files.newInputStream(f.toPath(), new OpenOption[0]));\n+    private static void listStream(final File file, final String[] array) throws ArchiveException, IOException {\n+        final BufferedInputStream bufferedInputStream = new BufferedInputStream(Files.newInputStream(file.toPath(), new OpenOption[0]));\n         try {\n-            final ArchiveInputStream ais = createArchiveInputStream(args, fis);\n+            final ArchiveInputStream archiveInputStream = createArchiveInputStream(array, bufferedInputStream);\n             try {\n-                System.out.println(\"Created \" + ais.toString());\n-                ArchiveEntry ae;\n-                while ((ae = ais.getNextEntry()) != null) {\n-                    System.out.println(ae.getName());\n+                System.out.println(\"Created \" + archiveInputStream.toString());\n+                ArchiveEntry nextEntry;\n+                while ((nextEntry = archiveInputStream.getNextEntry()) != null) {\n+                    System.out.println(nextEntry.getName());\n                 }\n-                if (ais != null) {\n-                    ais.close();\n+                if (archiveInputStream != null) {\n+                    archiveInputStream.close();\n                 }\n             }\n             catch (final Throwable t) {\n-                if (ais != null) {\n+                if (archiveInputStream != null) {\n                     try {\n-                        ais.close();\n+                        archiveInputStream.close();\n                     }\n                     catch (final Throwable exception) {\n                         t.addSuppressed(exception);\n                     }\n                 }\n                 throw t;\n             }\n-            fis.close();\n+            bufferedInputStream.close();\n         }\n         catch (final Throwable t2) {\n             try {\n-                fis.close();\n+                bufferedInputStream.close();\n             }\n             catch (final Throwable exception2) {\n                 t2.addSuppressed(exception2);\n             }\n             throw t2;\n         }\n     }\n     \n-    private static ArchiveInputStream createArchiveInputStream(final String[] args, final InputStream fis) throws ArchiveException {\n-        if (args.length > 1) {\n-            return Lister.FACTORY.createArchiveInputStream(args[1], fis);\n+    private static ArchiveInputStream createArchiveInputStream(final String[] array, final InputStream inputStream) throws ArchiveException {\n+        if (array.length > 1) {\n+            return Lister.FACTORY.createArchiveInputStream(array[1], inputStream);\n         }\n-        return Lister.FACTORY.createArchiveInputStream(fis);\n+        return Lister.FACTORY.createArchiveInputStream(inputStream);\n     }\n     \n-    private static String detectFormat(final File f) throws ArchiveException, IOException {\n-        try (final InputStream fis = new BufferedInputStream(Files.newInputStream(f.toPath(), new OpenOption[0]))) {\n-            return ArchiveStreamFactory.detect(fis);\n+    private static String detectFormat(final File file) throws ArchiveException, IOException {\n+        try (final BufferedInputStream bufferedInputStream = new BufferedInputStream(Files.newInputStream(file.toPath(), new OpenOption[0]))) {\n+            return ArchiveStreamFactory.detect((InputStream)bufferedInputStream);\n         }\n     }\n     \n-    private static void list7z(final File f) throws ArchiveException, IOException {\n-        final SevenZFile z = new SevenZFile(f);\n+    private static void list7z(final File file) throws ArchiveException, IOException {\n+        final SevenZFile sevenZFile = new SevenZFile(file);\n         try {\n-            System.out.println(\"Created \" + z.toString());\n-            ArchiveEntry ae;\n-            while ((ae = (ArchiveEntry)z.getNextEntry()) != null) {\n-                final String name = (ae.getName() == null) ? (z.getDefaultName() + \" (entry name was null)\") : ae.getName();\n-                System.out.println(name);\n+            System.out.println(\"Created \" + sevenZFile.toString());\n+            SevenZArchiveEntry nextEntry;\n+            while ((nextEntry = sevenZFile.getNextEntry()) != null) {\n+                System.out.println((((ArchiveEntry)nextEntry).getName() == null) ? (sevenZFile.getDefaultName() + \" (entry name was null)\") : ((ArchiveEntry)nextEntry).getName());\n             }\n-            z.close();\n+            sevenZFile.close();\n         }\n         catch (final Throwable t) {\n             try {\n-                z.close();\n+                sevenZFile.close();\n             }\n             catch (final Throwable exception) {\n                 t.addSuppressed(exception);\n             }\n             throw t;\n         }\n     }\n     \n-    private static void listZipUsingZipFile(final File f) throws ArchiveException, IOException {\n-        final ZipFile z = new ZipFile(f);\n+    private static void listZipUsingZipFile(final File file) throws ArchiveException, IOException {\n+        final ZipFile zipFile = new ZipFile(file);\n         try {\n-            System.out.println(\"Created \" + z.toString());\n-            final Enumeration<ZipArchiveEntry> en = z.getEntries();\n-            while (en.hasMoreElements()) {\n-                System.out.println(((ZipArchiveEntry)en.nextElement()).getName());\n+            System.out.println(\"Created \" + zipFile.toString());\n+            final Enumeration entries = zipFile.getEntries();\n+            while (entries.hasMoreElements()) {\n+                System.out.println(((ZipArchiveEntry)entries.nextElement()).getName());\n             }\n-            z.close();\n+            zipFile.close();\n         }\n         catch (final Throwable t) {\n             try {\n-                z.close();\n+                zipFile.close();\n             }\n             catch (final Throwable exception) {\n                 t.addSuppressed(exception);\n             }\n             throw t;\n         }\n     }\n     \n-    private static void listZipUsingTarFile(final File f) throws ArchiveException, IOException {\n-        final TarFile t = new TarFile(f);\n+    private static void listZipUsingTarFile(final File file) throws ArchiveException, IOException {\n+        final TarFile tarFile = new TarFile(file);\n         try {\n-            System.out.println(\"Created \" + t.toString());\n-            for (final TarArchiveEntry en : t.getEntries()) {\n-                System.out.println(en.getName());\n+            System.out.println(\"Created \" + tarFile.toString());\n+            final Iterator iterator = tarFile.getEntries().iterator();\n+            while (iterator.hasNext()) {\n+                System.out.println(((TarArchiveEntry)iterator.next()).getName());\n             }\n-            t.close();\n+            tarFile.close();\n         }\n-        catch (final Throwable t2) {\n+        catch (final Throwable t) {\n             try {\n-                t.close();\n+                tarFile.close();\n             }\n             catch (final Throwable exception) {\n-                t2.addSuppressed(exception);\n+                t.addSuppressed(exception);\n             }\n-            throw t2;\n+            throw t;\n         }\n     }\n     \n     private static void usage() {\n         System.out.println(\"Parameters: archive-name [archive-type]\\n\");\n         System.out.println(\"the magic archive-type 'zipfile' prefers ZipFile over ZipArchiveInputStream\");\n         System.out.println(\"the magic archive-type 'tarfile' prefers TarFile over TarArchiveInputStream\");\n"}]}
