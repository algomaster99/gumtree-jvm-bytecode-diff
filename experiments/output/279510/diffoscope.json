{"diffoscope-json-version": 1, "source1": "first/InnerClassesAttribute$InnerClassesEntry.class", "source2": "second/InnerClassesAttribute$InnerClassesEntry.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,49 +10,49 @@\n     CPClass outerClassInfo;\n     CPUTF8 innerClassName;\n     int innerClassInfoIndex;\n     int outerClassInfoIndex;\n     int innerNameIndex;\n     int innerClassAccessFlags;\n     \n-    public InnerClassesEntry(final CPClass innerClass, final CPClass outerClass, final CPUTF8 innerName, final int flags) {\n+    public InnerClassesEntry(final CPClass innerClassInfo, final CPClass outerClassInfo, final CPUTF8 innerClassName, final int innerClassAccessFlags) {\n         this.innerClassInfoIndex = -1;\n         this.outerClassInfoIndex = -1;\n         this.innerNameIndex = -1;\n         this.innerClassAccessFlags = -1;\n-        this.innerClassInfo = innerClass;\n-        this.outerClassInfo = outerClass;\n-        this.innerClassName = innerName;\n-        this.innerClassAccessFlags = flags;\n+        this.innerClassInfo = innerClassInfo;\n+        this.outerClassInfo = outerClassInfo;\n+        this.innerClassName = innerClassName;\n+        this.innerClassAccessFlags = innerClassAccessFlags;\n     }\n     \n-    public void resolve(final ClassConstantPool pool) {\n+    public void resolve(final ClassConstantPool classConstantPool) {\n         if (this.innerClassInfo != null) {\n-            this.innerClassInfo.resolve(pool);\n-            this.innerClassInfoIndex = pool.indexOf((ClassFileEntry)this.innerClassInfo);\n+            this.innerClassInfo.resolve(classConstantPool);\n+            this.innerClassInfoIndex = classConstantPool.indexOf((ClassFileEntry)this.innerClassInfo);\n         }\n         else {\n             this.innerClassInfoIndex = 0;\n         }\n         if (this.innerClassName != null) {\n-            this.innerClassName.resolve(pool);\n-            this.innerNameIndex = pool.indexOf((ClassFileEntry)this.innerClassName);\n+            this.innerClassName.resolve(classConstantPool);\n+            this.innerNameIndex = classConstantPool.indexOf((ClassFileEntry)this.innerClassName);\n         }\n         else {\n             this.innerNameIndex = 0;\n         }\n         if (this.outerClassInfo != null) {\n-            this.outerClassInfo.resolve(pool);\n-            this.outerClassInfoIndex = pool.indexOf((ClassFileEntry)this.outerClassInfo);\n+            this.outerClassInfo.resolve(classConstantPool);\n+            this.outerClassInfoIndex = classConstantPool.indexOf((ClassFileEntry)this.outerClassInfo);\n         }\n         else {\n             this.outerClassInfoIndex = 0;\n         }\n     }\n     \n-    public void write(final DataOutputStream dos) throws IOException {\n-        dos.writeShort(this.innerClassInfoIndex);\n-        dos.writeShort(this.outerClassInfoIndex);\n-        dos.writeShort(this.innerNameIndex);\n-        dos.writeShort(this.innerClassAccessFlags);\n+    public void write(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.innerClassInfoIndex);\n+        dataOutputStream.writeShort(this.outerClassInfoIndex);\n+        dataOutputStream.writeShort(this.innerNameIndex);\n+        dataOutputStream.writeShort(this.innerClassAccessFlags);\n     }\n }\n"}]}
