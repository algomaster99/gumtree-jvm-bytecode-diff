{"diffoscope-json-version": 1, "source1": "first/WildcardFilter.class", "source2": "second/WildcardFilter.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,37 +1,37 @@\n-  SHA-256 checksum 8aa4a814eca76a470fed40b51137cca339d1c22121edce07d6e66ddbf3fe2d38\n+  SHA-256 checksum 7deed5648b24d3a07023aae2c92795112b74e6fea70ec9c449d4f642e66077e6\n   Compiled from \"WildcardFilter.java\"\n public class org.apache.commons.io.filefilter.WildcardFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #18                         // org/apache/commons/io/filefilter/WildcardFilter\n   super_class: #19                        // org/apache/commons/io/filefilter/AbstractFileFilter\n   interfaces: 1, fields: 2, methods: 5, attributes: 3\n Constant pool:\n-   #1 = Methodref          #19.#60        // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n-   #2 = Class              #61            // java/lang/IllegalArgumentException\n-   #3 = String             #62            // The wildcard must not be null\n-   #4 = Methodref          #2.#63         // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #5 = Class              #64            // java/lang/String\n-   #6 = Fieldref           #18.#65        // org/apache/commons/io/filefilter/WildcardFilter.wildcards:[Ljava/lang/String;\n-   #7 = String             #66            // The wildcard array must not be null\n-   #8 = Methodref          #67.#68        // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #9 = String             #69            // The wildcard list must not be null\n-  #10 = Fieldref           #18.#70        // org/apache/commons/io/filefilter/WildcardFilter.EMPTY_STRING_ARRAY:[Ljava/lang/String;\n-  #11 = InterfaceMethodref #71.#72        // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+   #1 = Methodref          #19.#58        // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n+   #2 = Class              #59            // java/lang/IllegalArgumentException\n+   #3 = String             #60            // The wildcard must not be null\n+   #4 = Methodref          #2.#61         // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #5 = Class              #62            // java/lang/String\n+   #6 = Fieldref           #18.#63        // org/apache/commons/io/filefilter/WildcardFilter.wildcards:[Ljava/lang/String;\n+   #7 = String             #64            // The wildcard array must not be null\n+   #8 = Methodref          #65.#66        // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #9 = String             #67            // The wildcard list must not be null\n+  #10 = Fieldref           #18.#68        // org/apache/commons/io/filefilter/WildcardFilter.EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+  #11 = InterfaceMethodref #43.#69        // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n   #12 = Class              #27            // \"[Ljava/lang/String;\"\n-  #13 = Class              #73            // java/io/File\n-  #14 = Methodref          #13.#74        // java/io/File.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-  #15 = Methodref          #13.#75        // java/io/File.isDirectory:()Z\n-  #16 = Methodref          #76.#77        // org/apache/commons/io/FilenameUtils.wildcardMatch:(Ljava/lang/String;Ljava/lang/String;)Z\n-  #17 = Methodref          #13.#78        // java/io/File.getName:()Ljava/lang/String;\n-  #18 = Class              #79            // org/apache/commons/io/filefilter/WildcardFilter\n-  #19 = Class              #80            // org/apache/commons/io/filefilter/AbstractFileFilter\n-  #20 = Class              #81            // java/io/Serializable\n+  #13 = Class              #70            // java/io/File\n+  #14 = Methodref          #13.#71        // java/io/File.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+  #15 = Methodref          #13.#72        // java/io/File.isDirectory:()Z\n+  #16 = Methodref          #73.#74        // org/apache/commons/io/FilenameUtils.wildcardMatch:(Ljava/lang/String;Ljava/lang/String;)Z\n+  #17 = Methodref          #13.#75        // java/io/File.getName:()Ljava/lang/String;\n+  #18 = Class              #76            // org/apache/commons/io/filefilter/WildcardFilter\n+  #19 = Class              #77            // org/apache/commons/io/filefilter/AbstractFileFilter\n+  #20 = Class              #78            // java/io/Serializable\n   #21 = Utf8               serialVersionUID\n   #22 = Utf8               J\n   #23 = Utf8               ConstantValue\n   #24 = Long               -5037645902506953517l\n   #26 = Utf8               wildcards\n   #27 = Utf8               [Ljava/lang/String;\n   #28 = Utf8               <init>\n@@ -40,74 +40,71 @@\n   #31 = Utf8               LineNumberTable\n   #32 = Utf8               LocalVariableTable\n   #33 = Utf8               this\n   #34 = Utf8               Lorg/apache/commons/io/filefilter/WildcardFilter;\n   #35 = Utf8               wildcard\n   #36 = Utf8               Ljava/lang/String;\n   #37 = Utf8               StackMapTable\n-  #38 = Class              #79            // org/apache/commons/io/filefilter/WildcardFilter\n-  #39 = Class              #64            // java/lang/String\n-  #40 = Utf8               ([Ljava/lang/String;)V\n-  #41 = Utf8               (Ljava/util/List;)V\n-  #42 = Utf8               Ljava/util/List;\n-  #43 = Utf8               LocalVariableTypeTable\n-  #44 = Utf8               Ljava/util/List<Ljava/lang/String;>;\n-  #45 = Class              #82            // java/util/List\n-  #46 = Utf8               Signature\n-  #47 = Utf8               (Ljava/util/List<Ljava/lang/String;>;)V\n-  #48 = Utf8               accept\n-  #49 = Utf8               (Ljava/io/File;Ljava/lang/String;)Z\n-  #50 = Utf8               dir\n-  #51 = Utf8               Ljava/io/File;\n-  #52 = Utf8               name\n-  #53 = Utf8               (Ljava/io/File;)Z\n-  #54 = Utf8               file\n-  #55 = Utf8               SourceFile\n-  #56 = Utf8               WildcardFilter.java\n-  #57 = Utf8               Deprecated\n-  #58 = Utf8               RuntimeVisibleAnnotations\n-  #59 = Utf8               Ljava/lang/Deprecated;\n-  #60 = NameAndType        #28:#83        // \"<init>\":()V\n-  #61 = Utf8               java/lang/IllegalArgumentException\n-  #62 = Utf8               The wildcard must not be null\n-  #63 = NameAndType        #28:#29        // \"<init>\":(Ljava/lang/String;)V\n-  #64 = Utf8               java/lang/String\n-  #65 = NameAndType        #26:#27        // wildcards:[Ljava/lang/String;\n-  #66 = Utf8               The wildcard array must not be null\n-  #67 = Class              #84            // java/lang/System\n-  #68 = NameAndType        #85:#86        // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #69 = Utf8               The wildcard list must not be null\n-  #70 = NameAndType        #87:#27        // EMPTY_STRING_ARRAY:[Ljava/lang/String;\n-  #71 = Class              #82            // java/util/List\n-  #72 = NameAndType        #88:#89        // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #73 = Utf8               java/io/File\n-  #74 = NameAndType        #28:#90        // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-  #75 = NameAndType        #91:#92        // isDirectory:()Z\n-  #76 = Class              #93            // org/apache/commons/io/FilenameUtils\n-  #77 = NameAndType        #94:#95        // wildcardMatch:(Ljava/lang/String;Ljava/lang/String;)Z\n-  #78 = NameAndType        #96:#97        // getName:()Ljava/lang/String;\n-  #79 = Utf8               org/apache/commons/io/filefilter/WildcardFilter\n-  #80 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n-  #81 = Utf8               java/io/Serializable\n-  #82 = Utf8               java/util/List\n-  #83 = Utf8               ()V\n-  #84 = Utf8               java/lang/System\n-  #85 = Utf8               arraycopy\n-  #86 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #87 = Utf8               EMPTY_STRING_ARRAY\n-  #88 = Utf8               toArray\n-  #89 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #90 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n-  #91 = Utf8               isDirectory\n-  #92 = Utf8               ()Z\n-  #93 = Utf8               org/apache/commons/io/FilenameUtils\n-  #94 = Utf8               wildcardMatch\n-  #95 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Z\n-  #96 = Utf8               getName\n-  #97 = Utf8               ()Ljava/lang/String;\n+  #38 = Utf8               ([Ljava/lang/String;)V\n+  #39 = Utf8               (Ljava/util/List;)V\n+  #40 = Utf8               Ljava/util/List;\n+  #41 = Utf8               LocalVariableTypeTable\n+  #42 = Utf8               Ljava/util/List<Ljava/lang/String;>;\n+  #43 = Class              #79            // java/util/List\n+  #44 = Utf8               Signature\n+  #45 = Utf8               (Ljava/util/List<Ljava/lang/String;>;)V\n+  #46 = Utf8               accept\n+  #47 = Utf8               (Ljava/io/File;Ljava/lang/String;)Z\n+  #48 = Utf8               dir\n+  #49 = Utf8               Ljava/io/File;\n+  #50 = Utf8               name\n+  #51 = Utf8               (Ljava/io/File;)Z\n+  #52 = Utf8               file\n+  #53 = Utf8               SourceFile\n+  #54 = Utf8               WildcardFilter.java\n+  #55 = Utf8               Deprecated\n+  #56 = Utf8               RuntimeVisibleAnnotations\n+  #57 = Utf8               Ljava/lang/Deprecated;\n+  #58 = NameAndType        #28:#80        // \"<init>\":()V\n+  #59 = Utf8               java/lang/IllegalArgumentException\n+  #60 = Utf8               The wildcard must not be null\n+  #61 = NameAndType        #28:#29        // \"<init>\":(Ljava/lang/String;)V\n+  #62 = Utf8               java/lang/String\n+  #63 = NameAndType        #26:#27        // wildcards:[Ljava/lang/String;\n+  #64 = Utf8               The wildcard array must not be null\n+  #65 = Class              #81            // java/lang/System\n+  #66 = NameAndType        #82:#83        // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #67 = Utf8               The wildcard list must not be null\n+  #68 = NameAndType        #84:#27        // EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+  #69 = NameAndType        #85:#86        // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #70 = Utf8               java/io/File\n+  #71 = NameAndType        #28:#87        // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+  #72 = NameAndType        #88:#89        // isDirectory:()Z\n+  #73 = Class              #90            // org/apache/commons/io/FilenameUtils\n+  #74 = NameAndType        #91:#92        // wildcardMatch:(Ljava/lang/String;Ljava/lang/String;)Z\n+  #75 = NameAndType        #93:#94        // getName:()Ljava/lang/String;\n+  #76 = Utf8               org/apache/commons/io/filefilter/WildcardFilter\n+  #77 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n+  #78 = Utf8               java/io/Serializable\n+  #79 = Utf8               java/util/List\n+  #80 = Utf8               ()V\n+  #81 = Utf8               java/lang/System\n+  #82 = Utf8               arraycopy\n+  #83 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #84 = Utf8               EMPTY_STRING_ARRAY\n+  #85 = Utf8               toArray\n+  #86 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #87 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n+  #88 = Utf8               isDirectory\n+  #89 = Utf8               ()Z\n+  #90 = Utf8               org/apache/commons/io/FilenameUtils\n+  #91 = Utf8               wildcardMatch\n+  #92 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Z\n+  #93 = Utf8               getName\n+  #94 = Utf8               ()Ljava/lang/String;\n {\n   private static final long serialVersionUID = -5037645902506953517l;\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long -5037645902506953517l\n \n   private final java.lang.String[] wildcards;\n@@ -233,15 +230,15 @@\n         Start  Length  Slot  Name   Signature\n             0      35     1 wildcards   Ljava/util/List<Ljava/lang/String;>;\n       StackMapTable: number_of_entries = 1\n         frame_type = 255 /* full_frame */\n           offset_delta = 18\n           locals = [ class org/apache/commons/io/filefilter/WildcardFilter, class java/util/List ]\n           stack = []\n-    Signature: #47                          // (Ljava/util/List<Ljava/lang/String;>;)V\n+    Signature: #45                          // (Ljava/util/List<Ljava/lang/String;>;)V\n \n   public boolean accept(java.io.File, java.lang.String);\n     descriptor: (Ljava/io/File;Ljava/lang/String;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=7, args_size=3\n          0: aload_1\n@@ -360,9 +357,9 @@\n         frame_type = 25 /* same */\n         frame_type = 248 /* chop */\n           offset_delta = 5\n }\n SourceFile: \"WildcardFilter.java\"\n Deprecated: true\n RuntimeVisibleAnnotations:\n-  0: #59()\n+  0: #57()\n     java.lang.Deprecated\n"}]}
