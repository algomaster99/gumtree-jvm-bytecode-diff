{"diffoscope-json-version": 1, "source1": "first/ArArchiveInputStream.class", "source2": "second/ArArchiveInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,8 +1,8 @@\n-  SHA-256 checksum 06c6d0051751217e41c8d1d25bb879f0798b4670464fd690e63f498ac313144d\n+  SHA-256 checksum d6be359229c9c1b4206a3d75a32c5091e81882cc32120f59631bdf67540a415e\n   Compiled from \"ArArchiveInputStream.java\"\n public class org.apache.commons.compress.archivers.ar.ArArchiveInputStream extends org.apache.commons.compress.archivers.ArchiveInputStream\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #1                          // org/apache/commons/compress/archivers/ar/ArArchiveInputStream\n   super_class: #86                        // org/apache/commons/compress/archivers/ArchiveInputStream\n@@ -40,62 +40,62 @@\n    #32 = Methodref          #222.#223     // java/io/InputStream.read:()I\n    #33 = Methodref          #202.#224     // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[B)I\n    #34 = String             #225          // Truncated ar archive\n    #35 = String             #226          // `\\n\n    #36 = String             #227          // Failed to read entry trailer. Occurred at byte:\n    #37 = String             #228          // Invalid entry trailer. not read the content? Occurred at byte:\n    #38 = Methodref          #207.#229     // org/apache/commons/compress/utils/ArchiveUtils.toAsciiString:([BII)Ljava/lang/String;\n-   #39 = Methodref          #230.#231     // java/lang/String.trim:()Ljava/lang/String;\n-   #40 = Methodref          #1.#232       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.isGNUStringTable:(Ljava/lang/String;)Z\n-   #41 = Methodref          #1.#233       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.readGNUStringTable:([BII)Lorg/apache/commons/compress/archivers/ar/ArArchiveEntry;\n-   #42 = Methodref          #1.#234       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.getNextArEntry:()Lorg/apache/commons/compress/archivers/ar/ArArchiveEntry;\n-   #43 = Methodref          #1.#235       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.asLong:([BII)J\n-   #44 = String             #236          // /\n-   #45 = Methodref          #230.#237     // java/lang/String.endsWith:(Ljava/lang/String;)Z\n-   #46 = Methodref          #230.#238     // java/lang/String.length:()I\n-   #47 = Methodref          #230.#239     // java/lang/String.substring:(II)Ljava/lang/String;\n-   #48 = Methodref          #1.#240       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.isGNULongName:(Ljava/lang/String;)Z\n-   #49 = Methodref          #230.#241     // java/lang/String.substring:(I)Ljava/lang/String;\n-   #50 = Methodref          #242.#243     // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n-   #51 = Methodref          #1.#244       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.getExtendedName:(I)Ljava/lang/String;\n-   #52 = Methodref          #1.#245       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.isBSDLongName:(Ljava/lang/String;)Z\n-   #53 = Methodref          #1.#246       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.getBSDLongName:(Ljava/lang/String;)Ljava/lang/String;\n-   #54 = String             #247          // broken archive, entry with negative size\n-   #55 = Methodref          #1.#248       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.asInt:([BIIZ)I\n-   #56 = Methodref          #1.#249       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.asInt:([BIII)I\n-   #57 = Methodref          #14.#250      // org/apache/commons/compress/archivers/ar/ArArchiveEntry.\"<init>\":(Ljava/lang/String;JIIIJ)V\n-   #58 = Fieldref           #1.#251       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.namebuffer:[B\n-   #59 = String             #252          // Cannot process GNU long filename as no // record was found\n-   #60 = String             #253          // Failed to read entry:\n-   #61 = Methodref          #19.#254      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #62 = Methodref          #255.#256     // java/lang/Long.parseLong:(Ljava/lang/String;)J\n-   #63 = Methodref          #1.#257       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.asInt:([BIIIZ)I\n-   #64 = Methodref          #230.#258     // java/lang/String.isEmpty:()Z\n-   #65 = Methodref          #242.#259     // java/lang/Integer.parseInt:(Ljava/lang/String;I)I\n-   #66 = Methodref          #222.#260     // java/io/InputStream.close:()V\n-   #67 = Class              #261          // java/lang/IllegalStateException\n-   #68 = String             #262          // No current ar entry\n+   #39 = Methodref          #150.#230     // java/lang/String.trim:()Ljava/lang/String;\n+   #40 = Methodref          #1.#231       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.isGNUStringTable:(Ljava/lang/String;)Z\n+   #41 = Methodref          #1.#232       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.readGNUStringTable:([BII)Lorg/apache/commons/compress/archivers/ar/ArArchiveEntry;\n+   #42 = Methodref          #1.#233       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.getNextArEntry:()Lorg/apache/commons/compress/archivers/ar/ArArchiveEntry;\n+   #43 = Methodref          #1.#234       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.asLong:([BII)J\n+   #44 = String             #235          // /\n+   #45 = Methodref          #150.#236     // java/lang/String.endsWith:(Ljava/lang/String;)Z\n+   #46 = Methodref          #150.#237     // java/lang/String.length:()I\n+   #47 = Methodref          #150.#238     // java/lang/String.substring:(II)Ljava/lang/String;\n+   #48 = Methodref          #1.#239       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.isGNULongName:(Ljava/lang/String;)Z\n+   #49 = Methodref          #150.#240     // java/lang/String.substring:(I)Ljava/lang/String;\n+   #50 = Methodref          #241.#242     // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n+   #51 = Methodref          #1.#243       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.getExtendedName:(I)Ljava/lang/String;\n+   #52 = Methodref          #1.#244       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.isBSDLongName:(Ljava/lang/String;)Z\n+   #53 = Methodref          #1.#245       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.getBSDLongName:(Ljava/lang/String;)Ljava/lang/String;\n+   #54 = String             #246          // broken archive, entry with negative size\n+   #55 = Methodref          #1.#247       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.asInt:([BIIZ)I\n+   #56 = Methodref          #1.#248       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.asInt:([BIII)I\n+   #57 = Methodref          #14.#249      // org/apache/commons/compress/archivers/ar/ArArchiveEntry.\"<init>\":(Ljava/lang/String;JIIIJ)V\n+   #58 = Fieldref           #1.#250       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.namebuffer:[B\n+   #59 = String             #251          // Cannot process GNU long filename as no // record was found\n+   #60 = String             #252          // Failed to read entry:\n+   #61 = Methodref          #19.#253      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #62 = Methodref          #254.#255     // java/lang/Long.parseLong:(Ljava/lang/String;)J\n+   #63 = Methodref          #1.#256       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.asInt:([BIIIZ)I\n+   #64 = Methodref          #150.#257     // java/lang/String.isEmpty:()Z\n+   #65 = Methodref          #241.#258     // java/lang/Integer.parseInt:(Ljava/lang/String;I)I\n+   #66 = Methodref          #222.#259     // java/io/InputStream.close:()V\n+   #67 = Class              #260          // java/lang/IllegalStateException\n+   #68 = String             #261          // No current ar entry\n    #69 = Methodref          #67.#217      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-   #70 = Methodref          #263.#264     // java/lang/Math.min:(JJ)J\n-   #71 = Methodref          #222.#265     // java/io/InputStream.read:([BII)I\n-   #72 = String             #266          // ^#1/\\\\d+\n-   #73 = Methodref          #230.#267     // java/lang/String.matches:(Ljava/lang/String;)Z\n-   #74 = Fieldref           #1.#268       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.BSD_LONGNAME_PREFIX_LEN:I\n-   #75 = Class              #269          // java/io/EOFException\n+   #70 = Methodref          #262.#263     // java/lang/Math.min:(JJ)J\n+   #71 = Methodref          #222.#264     // java/io/InputStream.read:([BII)I\n+   #72 = String             #265          // ^#1/\\\\d+\n+   #73 = Methodref          #150.#266     // java/lang/String.matches:(Ljava/lang/String;)Z\n+   #74 = Fieldref           #1.#267       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.BSD_LONGNAME_PREFIX_LEN:I\n+   #75 = Class              #268          // java/io/EOFException\n    #76 = Methodref          #75.#194      // java/io/EOFException.\"<init>\":()V\n-   #77 = String             #270          // //\n-   #78 = Methodref          #230.#271     // java/lang/String.equals:(Ljava/lang/Object;)Z\n-   #79 = Methodref          #1.#272       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.count:(J)V\n-   #80 = Methodref          #1.#273       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.asInt:([BII)I\n-   #81 = String             #274          // Failed to read complete // record: expected=\n-   #82 = String             #275          //  read=\n-   #83 = Methodref          #14.#276      // org/apache/commons/compress/archivers/ar/ArArchiveEntry.\"<init>\":(Ljava/lang/String;J)V\n-   #84 = String             #277          // ^/\\\\d+\n-   #85 = String             #278          // #1/\n-   #86 = Class              #279          // org/apache/commons/compress/archivers/ArchiveInputStream\n+   #77 = String             #269          // //\n+   #78 = Methodref          #150.#270     // java/lang/String.equals:(Ljava/lang/Object;)Z\n+   #79 = Methodref          #1.#271       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.count:(J)V\n+   #80 = Methodref          #1.#272       // org/apache/commons/compress/archivers/ar/ArArchiveInputStream.asInt:([BII)I\n+   #81 = String             #273          // Failed to read complete // record: expected=\n+   #82 = String             #274          //  read=\n+   #83 = Methodref          #14.#275      // org/apache/commons/compress/archivers/ar/ArArchiveEntry.\"<init>\":(Ljava/lang/String;J)V\n+   #84 = String             #276          // ^/\\\\d+\n+   #85 = String             #277          // #1/\n+   #86 = Class              #278          // org/apache/commons/compress/archivers/ArchiveInputStream\n    #87 = Utf8               input\n    #88 = Utf8               Ljava/io/InputStream;\n    #89 = Utf8               offset\n    #90 = Utf8               J\n    #91 = Utf8               closed\n    #92 = Utf8               Z\n    #93 = Utf8               currentEntry\n@@ -151,15 +151,15 @@\n   #143 = Utf8               read\n   #144 = Utf8               off\n   #145 = Utf8               nameLen\n   #146 = Utf8               temp\n   #147 = Utf8               len\n   #148 = Utf8               StackMapTable\n   #149 = Class              #96           // \"[B\"\n-  #150 = Class              #280          // java/lang/String\n+  #150 = Class              #279          // java/lang/String\n   #151 = Utf8               Exceptions\n   #152 = Utf8               getExtendedName\n   #153 = Utf8               (I)Ljava/lang/String;\n   #154 = Utf8               i\n   #155 = Utf8               asLong\n   #156 = Utf8               ([BII)J\n   #157 = Utf8               byteArray\n@@ -201,143 +201,142 @@\n   #193 = Utf8               org/apache/commons/compress/archivers/ar/ArArchiveInputStream\n   #194 = NameAndType        #129:#169     // \"<init>\":()V\n   #195 = NameAndType        #97:#90       // entryOffset:J\n   #196 = NameAndType        #122:#96      // metaData:[B\n   #197 = NameAndType        #87:#88       // input:Ljava/io/InputStream;\n   #198 = NameAndType        #91:#92       // closed:Z\n   #199 = NameAndType        #93:#94       // currentEntry:Lorg/apache/commons/compress/archivers/ar/ArArchiveEntry;\n-  #200 = NameAndType        #281:#282     // getLength:()J\n+  #200 = NameAndType        #280:#281     // getLength:()J\n   #201 = NameAndType        #89:#90       // offset:J\n-  #202 = Class              #283          // org/apache/commons/compress/utils/IOUtils\n-  #203 = NameAndType        #284:#285     // skip:(Ljava/io/InputStream;J)J\n+  #202 = Class              #282          // org/apache/commons/compress/utils/IOUtils\n+  #203 = NameAndType        #283:#284     // skip:(Ljava/io/InputStream;J)J\n   #204 = NameAndType        #184:#185     // trackReadBytes:(J)V\n   #205 = Utf8               org/apache/commons/compress/archivers/ar/ArArchiveEntry\n   #206 = Utf8               !<arch>\\n\n-  #207 = Class              #286          // org/apache/commons/compress/utils/ArchiveUtils\n-  #208 = NameAndType        #287:#288     // toAsciiBytes:(Ljava/lang/String;)[B\n-  #209 = NameAndType        #289:#290     // readRange:(Ljava/io/InputStream;I)[B\n+  #207 = Class              #285          // org/apache/commons/compress/utils/ArchiveUtils\n+  #208 = NameAndType        #286:#287     // toAsciiBytes:(Ljava/lang/String;)[B\n+  #209 = NameAndType        #288:#289     // readRange:(Ljava/io/InputStream;I)[B\n   #210 = Utf8               java/io/IOException\n   #211 = Utf8               java/lang/StringBuilder\n   #212 = Utf8               Failed to read header. Occurred at byte:\n-  #213 = NameAndType        #291:#292     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #214 = NameAndType        #293:#282     // getBytesRead:()J\n-  #215 = NameAndType        #291:#294     // append:(J)Ljava/lang/StringBuilder;\n-  #216 = NameAndType        #295:#296     // toString:()Ljava/lang/String;\n-  #217 = NameAndType        #129:#297     // \"<init>\":(Ljava/lang/String;)V\n-  #218 = Class              #298          // java/util/Arrays\n-  #219 = NameAndType        #299:#300     // equals:([B[B)Z\n+  #213 = NameAndType        #290:#291     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #214 = NameAndType        #292:#281     // getBytesRead:()J\n+  #215 = NameAndType        #290:#293     // append:(J)Ljava/lang/StringBuilder;\n+  #216 = NameAndType        #294:#295     // toString:()Ljava/lang/String;\n+  #217 = NameAndType        #129:#296     // \"<init>\":(Ljava/lang/String;)V\n+  #218 = Class              #297          // java/util/Arrays\n+  #219 = NameAndType        #298:#299     // equals:([B[B)Z\n   #220 = Utf8               Invalid header\n-  #221 = NameAndType        #301:#302     // toAsciiString:([B)Ljava/lang/String;\n-  #222 = Class              #303          // java/io/InputStream\n-  #223 = NameAndType        #143:#304     // read:()I\n-  #224 = NameAndType        #305:#306     // readFully:(Ljava/io/InputStream;[B)I\n+  #221 = NameAndType        #300:#301     // toAsciiString:([B)Ljava/lang/String;\n+  #222 = Class              #302          // java/io/InputStream\n+  #223 = NameAndType        #143:#303     // read:()I\n+  #224 = NameAndType        #304:#305     // readFully:(Ljava/io/InputStream;[B)I\n   #225 = Utf8               Truncated ar archive\n   #226 = Utf8               `\\n\n   #227 = Utf8               Failed to read entry trailer. Occurred at byte:\n   #228 = Utf8               Invalid entry trailer. not read the content? Occurred at byte:\n-  #229 = NameAndType        #301:#307     // toAsciiString:([BII)Ljava/lang/String;\n-  #230 = Class              #280          // java/lang/String\n-  #231 = NameAndType        #308:#296     // trim:()Ljava/lang/String;\n-  #232 = NameAndType        #183:#178     // isGNUStringTable:(Ljava/lang/String;)Z\n-  #233 = NameAndType        #186:#187     // readGNUStringTable:([BII)Lorg/apache/commons/compress/archivers/ar/ArArchiveEntry;\n-  #234 = NameAndType        #137:#138     // getNextArEntry:()Lorg/apache/commons/compress/archivers/ar/ArArchiveEntry;\n-  #235 = NameAndType        #155:#156     // asLong:([BII)J\n-  #236 = Utf8               /\n-  #237 = NameAndType        #309:#178     // endsWith:(Ljava/lang/String;)Z\n-  #238 = NameAndType        #176:#304     // length:()I\n-  #239 = NameAndType        #310:#311     // substring:(II)Ljava/lang/String;\n-  #240 = NameAndType        #189:#178     // isGNULongName:(Ljava/lang/String;)Z\n-  #241 = NameAndType        #310:#153     // substring:(I)Ljava/lang/String;\n-  #242 = Class              #312          // java/lang/Integer\n-  #243 = NameAndType        #313:#314     // parseInt:(Ljava/lang/String;)I\n-  #244 = NameAndType        #152:#153     // getExtendedName:(I)Ljava/lang/String;\n-  #245 = NameAndType        #177:#178     // isBSDLongName:(Ljava/lang/String;)Z\n-  #246 = NameAndType        #180:#181     // getBSDLongName:(Ljava/lang/String;)Ljava/lang/String;\n-  #247 = Utf8               broken archive, entry with negative size\n-  #248 = NameAndType        #158:#160     // asInt:([BIIZ)I\n-  #249 = NameAndType        #158:#162     // asInt:([BIII)I\n-  #250 = NameAndType        #129:#315     // \"<init>\":(Ljava/lang/String;JIIIJ)V\n-  #251 = NameAndType        #95:#96       // namebuffer:[B\n-  #252 = Utf8               Cannot process GNU long filename as no // record was found\n-  #253 = Utf8               Failed to read entry:\n-  #254 = NameAndType        #291:#316     // append:(I)Ljava/lang/StringBuilder;\n-  #255 = Class              #317          // java/lang/Long\n-  #256 = NameAndType        #318:#319     // parseLong:(Ljava/lang/String;)J\n-  #257 = NameAndType        #158:#164     // asInt:([BIIIZ)I\n-  #258 = NameAndType        #320:#321     // isEmpty:()Z\n-  #259 = NameAndType        #313:#322     // parseInt:(Ljava/lang/String;I)I\n-  #260 = NameAndType        #168:#169     // close:()V\n-  #261 = Utf8               java/lang/IllegalStateException\n-  #262 = Utf8               No current ar entry\n-  #263 = Class              #323          // java/lang/Math\n-  #264 = NameAndType        #324:#325     // min:(JJ)J\n-  #265 = NameAndType        #143:#159     // read:([BII)I\n-  #266 = Utf8               ^#1/\\\\d+\n-  #267 = NameAndType        #173:#178     // matches:(Ljava/lang/String;)Z\n-  #268 = NameAndType        #125:#99      // BSD_LONGNAME_PREFIX_LEN:I\n-  #269 = Utf8               java/io/EOFException\n-  #270 = Utf8               //\n-  #271 = NameAndType        #299:#326     // equals:(Ljava/lang/Object;)Z\n-  #272 = NameAndType        #327:#185     // count:(J)V\n-  #273 = NameAndType        #158:#159     // asInt:([BII)I\n-  #274 = Utf8               Failed to read complete // record: expected=\n-  #275 = Utf8                read=\n-  #276 = NameAndType        #129:#328     // \"<init>\":(Ljava/lang/String;J)V\n-  #277 = Utf8               ^/\\\\d+\n-  #278 = Utf8               #1/\n-  #279 = Utf8               org/apache/commons/compress/archivers/ArchiveInputStream\n-  #280 = Utf8               java/lang/String\n-  #281 = Utf8               getLength\n-  #282 = Utf8               ()J\n-  #283 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #284 = Utf8               skip\n-  #285 = Utf8               (Ljava/io/InputStream;J)J\n-  #286 = Utf8               org/apache/commons/compress/utils/ArchiveUtils\n-  #287 = Utf8               toAsciiBytes\n-  #288 = Utf8               (Ljava/lang/String;)[B\n-  #289 = Utf8               readRange\n-  #290 = Utf8               (Ljava/io/InputStream;I)[B\n-  #291 = Utf8               append\n-  #292 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #293 = Utf8               getBytesRead\n-  #294 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #295 = Utf8               toString\n-  #296 = Utf8               ()Ljava/lang/String;\n-  #297 = Utf8               (Ljava/lang/String;)V\n-  #298 = Utf8               java/util/Arrays\n-  #299 = Utf8               equals\n-  #300 = Utf8               ([B[B)Z\n-  #301 = Utf8               toAsciiString\n-  #302 = Utf8               ([B)Ljava/lang/String;\n-  #303 = Utf8               java/io/InputStream\n-  #304 = Utf8               ()I\n-  #305 = Utf8               readFully\n-  #306 = Utf8               (Ljava/io/InputStream;[B)I\n-  #307 = Utf8               ([BII)Ljava/lang/String;\n-  #308 = Utf8               trim\n-  #309 = Utf8               endsWith\n-  #310 = Utf8               substring\n-  #311 = Utf8               (II)Ljava/lang/String;\n-  #312 = Utf8               java/lang/Integer\n-  #313 = Utf8               parseInt\n-  #314 = Utf8               (Ljava/lang/String;)I\n-  #315 = Utf8               (Ljava/lang/String;JIIIJ)V\n-  #316 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #317 = Utf8               java/lang/Long\n-  #318 = Utf8               parseLong\n-  #319 = Utf8               (Ljava/lang/String;)J\n-  #320 = Utf8               isEmpty\n-  #321 = Utf8               ()Z\n-  #322 = Utf8               (Ljava/lang/String;I)I\n-  #323 = Utf8               java/lang/Math\n-  #324 = Utf8               min\n-  #325 = Utf8               (JJ)J\n-  #326 = Utf8               (Ljava/lang/Object;)Z\n-  #327 = Utf8               count\n-  #328 = Utf8               (Ljava/lang/String;J)V\n+  #229 = NameAndType        #300:#306     // toAsciiString:([BII)Ljava/lang/String;\n+  #230 = NameAndType        #307:#295     // trim:()Ljava/lang/String;\n+  #231 = NameAndType        #183:#178     // isGNUStringTable:(Ljava/lang/String;)Z\n+  #232 = NameAndType        #186:#187     // readGNUStringTable:([BII)Lorg/apache/commons/compress/archivers/ar/ArArchiveEntry;\n+  #233 = NameAndType        #137:#138     // getNextArEntry:()Lorg/apache/commons/compress/archivers/ar/ArArchiveEntry;\n+  #234 = NameAndType        #155:#156     // asLong:([BII)J\n+  #235 = Utf8               /\n+  #236 = NameAndType        #308:#178     // endsWith:(Ljava/lang/String;)Z\n+  #237 = NameAndType        #176:#303     // length:()I\n+  #238 = NameAndType        #309:#310     // substring:(II)Ljava/lang/String;\n+  #239 = NameAndType        #189:#178     // isGNULongName:(Ljava/lang/String;)Z\n+  #240 = NameAndType        #309:#153     // substring:(I)Ljava/lang/String;\n+  #241 = Class              #311          // java/lang/Integer\n+  #242 = NameAndType        #312:#313     // parseInt:(Ljava/lang/String;)I\n+  #243 = NameAndType        #152:#153     // getExtendedName:(I)Ljava/lang/String;\n+  #244 = NameAndType        #177:#178     // isBSDLongName:(Ljava/lang/String;)Z\n+  #245 = NameAndType        #180:#181     // getBSDLongName:(Ljava/lang/String;)Ljava/lang/String;\n+  #246 = Utf8               broken archive, entry with negative size\n+  #247 = NameAndType        #158:#160     // asInt:([BIIZ)I\n+  #248 = NameAndType        #158:#162     // asInt:([BIII)I\n+  #249 = NameAndType        #129:#314     // \"<init>\":(Ljava/lang/String;JIIIJ)V\n+  #250 = NameAndType        #95:#96       // namebuffer:[B\n+  #251 = Utf8               Cannot process GNU long filename as no // record was found\n+  #252 = Utf8               Failed to read entry:\n+  #253 = NameAndType        #290:#315     // append:(I)Ljava/lang/StringBuilder;\n+  #254 = Class              #316          // java/lang/Long\n+  #255 = NameAndType        #317:#318     // parseLong:(Ljava/lang/String;)J\n+  #256 = NameAndType        #158:#164     // asInt:([BIIIZ)I\n+  #257 = NameAndType        #319:#320     // isEmpty:()Z\n+  #258 = NameAndType        #312:#321     // parseInt:(Ljava/lang/String;I)I\n+  #259 = NameAndType        #168:#169     // close:()V\n+  #260 = Utf8               java/lang/IllegalStateException\n+  #261 = Utf8               No current ar entry\n+  #262 = Class              #322          // java/lang/Math\n+  #263 = NameAndType        #323:#324     // min:(JJ)J\n+  #264 = NameAndType        #143:#159     // read:([BII)I\n+  #265 = Utf8               ^#1/\\\\d+\n+  #266 = NameAndType        #173:#178     // matches:(Ljava/lang/String;)Z\n+  #267 = NameAndType        #125:#99      // BSD_LONGNAME_PREFIX_LEN:I\n+  #268 = Utf8               java/io/EOFException\n+  #269 = Utf8               //\n+  #270 = NameAndType        #298:#325     // equals:(Ljava/lang/Object;)Z\n+  #271 = NameAndType        #326:#185     // count:(J)V\n+  #272 = NameAndType        #158:#159     // asInt:([BII)I\n+  #273 = Utf8               Failed to read complete // record: expected=\n+  #274 = Utf8                read=\n+  #275 = NameAndType        #129:#327     // \"<init>\":(Ljava/lang/String;J)V\n+  #276 = Utf8               ^/\\\\d+\n+  #277 = Utf8               #1/\n+  #278 = Utf8               org/apache/commons/compress/archivers/ArchiveInputStream\n+  #279 = Utf8               java/lang/String\n+  #280 = Utf8               getLength\n+  #281 = Utf8               ()J\n+  #282 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #283 = Utf8               skip\n+  #284 = Utf8               (Ljava/io/InputStream;J)J\n+  #285 = Utf8               org/apache/commons/compress/utils/ArchiveUtils\n+  #286 = Utf8               toAsciiBytes\n+  #287 = Utf8               (Ljava/lang/String;)[B\n+  #288 = Utf8               readRange\n+  #289 = Utf8               (Ljava/io/InputStream;I)[B\n+  #290 = Utf8               append\n+  #291 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #292 = Utf8               getBytesRead\n+  #293 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #294 = Utf8               toString\n+  #295 = Utf8               ()Ljava/lang/String;\n+  #296 = Utf8               (Ljava/lang/String;)V\n+  #297 = Utf8               java/util/Arrays\n+  #298 = Utf8               equals\n+  #299 = Utf8               ([B[B)Z\n+  #300 = Utf8               toAsciiString\n+  #301 = Utf8               ([B)Ljava/lang/String;\n+  #302 = Utf8               java/io/InputStream\n+  #303 = Utf8               ()I\n+  #304 = Utf8               readFully\n+  #305 = Utf8               (Ljava/io/InputStream;[B)I\n+  #306 = Utf8               ([BII)Ljava/lang/String;\n+  #307 = Utf8               trim\n+  #308 = Utf8               endsWith\n+  #309 = Utf8               substring\n+  #310 = Utf8               (II)Ljava/lang/String;\n+  #311 = Utf8               java/lang/Integer\n+  #312 = Utf8               parseInt\n+  #313 = Utf8               (Ljava/lang/String;)I\n+  #314 = Utf8               (Ljava/lang/String;JIIIJ)V\n+  #315 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #316 = Utf8               java/lang/Long\n+  #317 = Utf8               parseLong\n+  #318 = Utf8               (Ljava/lang/String;)J\n+  #319 = Utf8               isEmpty\n+  #320 = Utf8               ()Z\n+  #321 = Utf8               (Ljava/lang/String;I)I\n+  #322 = Utf8               java/lang/Math\n+  #323 = Utf8               min\n+  #324 = Utf8               (JJ)J\n+  #325 = Utf8               (Ljava/lang/Object;)Z\n+  #326 = Utf8               count\n+  #327 = Utf8               (Ljava/lang/String;J)V\n {\n   private final java.io.InputStream input;\n     descriptor: Ljava/io/InputStream;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private long offset;\n     descriptor: J\n"}]}
