{"diffoscope-json-version": 1, "source1": "first/NewAttributeBands$Integral.class", "source2": "second/NewAttributeBands$Integral.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,74 +12,67 @@\n     private int[] band;\n     \n     public Integral(final NewAttributeBands this$0, final String tag) {\n         super(this.this$0 = this$0, (NewAttributeBands.NewAttributeBands$1)null);\n         this.tag = tag;\n     }\n     \n-    public void readBands(final InputStream in, final int count) throws IOException, Pack200Exception {\n-        this.band = this.this$0.decodeBandInt(NewAttributeBands.access$400(this.this$0).getName() + \"_\" + this.tag, in, this.this$0.getCodec(this.tag), count);\n+    public void readBands(final InputStream inputStream, final int n) throws IOException, Pack200Exception {\n+        this.band = this.this$0.decodeBandInt(NewAttributeBands.access$400(this.this$0).getName() + \"_\" + this.tag, inputStream, this.this$0.getCodec(this.tag), n);\n     }\n     \n-    public void addToAttribute(final int n, final NewAttribute attribute) {\n-        long value = (long)this.band[n];\n+    public void addToAttribute(final int n, final NewAttribute newAttribute) {\n+        long n2 = (long)this.band[n];\n         if (this.tag.equals(\"B\") || this.tag.equals(\"FB\")) {\n-            attribute.addInteger(1, value);\n+            newAttribute.addInteger(1, n2);\n         }\n         else if (this.tag.equals(\"SB\")) {\n-            attribute.addInteger(1, (long)(byte)value);\n+            newAttribute.addInteger(1, (long)(byte)n2);\n         }\n         else if (this.tag.equals(\"H\") || this.tag.equals(\"FH\")) {\n-            attribute.addInteger(2, value);\n+            newAttribute.addInteger(2, n2);\n         }\n         else if (this.tag.equals(\"SH\")) {\n-            attribute.addInteger(2, (long)(short)value);\n+            newAttribute.addInteger(2, (long)(short)n2);\n         }\n         else if (this.tag.equals(\"I\") || this.tag.equals(\"FI\")) {\n-            attribute.addInteger(4, value);\n+            newAttribute.addInteger(4, n2);\n         }\n         else if (this.tag.equals(\"SI\")) {\n-            attribute.addInteger(4, (long)(int)value);\n+            newAttribute.addInteger(4, (long)(int)n2);\n         }\n         else if (!this.tag.equals(\"V\") && !this.tag.equals(\"FV\")) {\n             if (!this.tag.equals(\"SV\")) {\n                 if (this.tag.startsWith(\"PO\")) {\n-                    final char uint_type = this.tag.substring(2).toCharArray()[0];\n-                    final int length = this.getLength(uint_type);\n-                    attribute.addBCOffset(length, (int)value);\n+                    newAttribute.addBCOffset(this.getLength(this.tag.substring(2).toCharArray()[0]), (int)n2);\n                 }\n                 else if (this.tag.startsWith(\"P\")) {\n-                    final char uint_type = this.tag.substring(1).toCharArray()[0];\n-                    final int length = this.getLength(uint_type);\n-                    attribute.addBCIndex(length, (int)value);\n+                    newAttribute.addBCIndex(this.getLength(this.tag.substring(1).toCharArray()[0]), (int)n2);\n                 }\n                 else if (this.tag.startsWith(\"OS\")) {\n-                    final char uint_type = this.tag.substring(2).toCharArray()[0];\n-                    final int length = this.getLength(uint_type);\n+                    final int length = this.getLength(this.tag.substring(2).toCharArray()[0]);\n                     if (length == 1) {\n-                        value = (byte)value;\n+                        n2 = (byte)n2;\n                     }\n                     else if (length == 2) {\n-                        value = (short)value;\n+                        n2 = (short)n2;\n                     }\n                     else if (length == 4) {\n-                        value = (int)value;\n+                        n2 = (int)n2;\n                     }\n-                    attribute.addBCLength(length, (int)value);\n+                    newAttribute.addBCLength(length, (int)n2);\n                 }\n                 else if (this.tag.startsWith(\"O\")) {\n-                    final char uint_type = this.tag.substring(1).toCharArray()[0];\n-                    final int length = this.getLength(uint_type);\n-                    attribute.addBCLength(length, (int)value);\n+                    newAttribute.addBCLength(this.getLength(this.tag.substring(1).toCharArray()[0]), (int)n2);\n                 }\n             }\n         }\n     }\n     \n-    long getValue(final int index) {\n-        return this.band[index];\n+    long getValue(final int n) {\n+        return this.band[n];\n     }\n     \n     public String getTag() {\n         return this.tag;\n     }\n }\n"}]}
