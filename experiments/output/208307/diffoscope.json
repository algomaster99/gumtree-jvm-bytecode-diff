{"diffoscope-json-version": 1, "source1": "first/UncheckedIOSpliterator.class", "source2": "second/UncheckedIOSpliterator.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,51 +6,51 @@\n import java.util.Objects;\n import java.util.Spliterator;\n \n final class UncheckedIOSpliterator<T> implements Spliterator<T>\n {\n     private final IOSpliterator<T> delegate;\n     \n-    UncheckedIOSpliterator(final IOSpliterator<T> delegate) {\n-        this.delegate = Objects.requireNonNull(delegate, \"delegate\");\n+    UncheckedIOSpliterator(final IOSpliterator<T> obj) {\n+        this.delegate = Objects.requireNonNull(obj, \"delegate\");\n     }\n     \n     @Override\n     public int characteristics() {\n         return this.delegate.characteristics();\n     }\n     \n     @Override\n     public long estimateSize() {\n         return this.delegate.estimateSize();\n     }\n     \n     @Override\n-    public void forEachRemaining(final Consumer<? super T> action) {\n-        Uncheck.accept(this.delegate::forEachRemaining, (Object)action::accept);\n+    public void forEachRemaining(final Consumer<? super T> consumer) {\n+        Uncheck.accept(this.delegate::forEachRemaining, (Object)consumer::accept);\n     }\n     \n     @Override\n     public Comparator<? super T> getComparator() {\n         return this.delegate.getComparator().asComparator();\n     }\n     \n     @Override\n     public long getExactSizeIfKnown() {\n         return this.delegate.getExactSizeIfKnown();\n     }\n     \n     @Override\n-    public boolean hasCharacteristics(final int characteristics) {\n-        return this.delegate.hasCharacteristics(characteristics);\n+    public boolean hasCharacteristics(final int n) {\n+        return this.delegate.hasCharacteristics(n);\n     }\n     \n     @Override\n-    public boolean tryAdvance(final Consumer<? super T> action) {\n-        return (boolean)Uncheck.apply(this.delegate::tryAdvance, (Object)action::accept);\n+    public boolean tryAdvance(final Consumer<? super T> consumer) {\n+        return (boolean)Uncheck.apply(this.delegate::tryAdvance, (Object)consumer::accept);\n     }\n     \n     @Override\n     public Spliterator<T> trySplit() {\n         return ((IOSpliterator)Uncheck.get(this.delegate::trySplit)).unwrap();\n     }\n }\n"}]}
