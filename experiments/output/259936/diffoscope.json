{"diffoscope-json-version": 1, "source1": "first/QueueInputStream.class", "source2": "second/QueueInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -23,17 +23,17 @@\n     }\n     \n     @Deprecated\n     public QueueInputStream(final BlockingQueue<Integer> blockingQueue) {\n         this(blockingQueue, Duration.ZERO);\n     }\n     \n-    private QueueInputStream(final BlockingQueue<Integer> blockingQueue, final Duration timeout) {\n-        this.blockingQueue = Objects.requireNonNull(blockingQueue, \"blockingQueue\");\n-        this.timeoutNanos = ((Duration)Objects.requireNonNull(timeout, \"timeout\")).toNanos();\n+    private QueueInputStream(final BlockingQueue<Integer> obj, final Duration obj2) {\n+        this.blockingQueue = Objects.requireNonNull(obj, \"blockingQueue\");\n+        this.timeoutNanos = ((Duration)Objects.requireNonNull(obj2, \"timeout\")).toNanos();\n     }\n     \n     BlockingQueue<Integer> getBlockingQueue() {\n         return this.blockingQueue;\n     }\n     \n     Duration getTimeout() {\n@@ -43,16 +43,16 @@\n     public QueueOutputStream newQueueOutputStream() {\n         return new QueueOutputStream((BlockingQueue)this.blockingQueue);\n     }\n     \n     @Override\n     public int read() {\n         try {\n-            final Integer value = Integer.valueOf(this.blockingQueue.poll(this.timeoutNanos, TimeUnit.NANOSECONDS));\n-            return (value == null) ? -1 : (0xFF & value);\n+            final Integer n = Integer.valueOf(this.blockingQueue.poll(this.timeoutNanos, TimeUnit.NANOSECONDS));\n+            return (n == null) ? -1 : (0xFF & n);\n         }\n-        catch (final InterruptedException e) {\n+        catch (final InterruptedException cause) {\n             Thread.currentThread().interrupt();\n-            throw new IllegalStateException(e);\n+            throw new IllegalStateException(cause);\n         }\n     }\n }\n"}]}
