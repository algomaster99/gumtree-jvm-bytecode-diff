{"diffoscope-json-version": 1, "source1": "first/ThrowsCountCheck.class", "source2": "second/ThrowsCountCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -35,47 +35,44 @@\n         this.ignorePrivateMethods = ignorePrivateMethods;\n     }\n     \n     public void setMax(final int max) {\n         this.max = max;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        if (ast.getType() == 81) {\n-            this.visitLiteralThrows(ast);\n+    public void visitToken(final DetailAST detailAST) {\n+        if (detailAST.getType() == 81) {\n+            this.visitLiteralThrows(detailAST);\n             return;\n         }\n-        throw new IllegalStateException(ast.toString());\n+        throw new IllegalStateException(detailAST.toString());\n     }\n     \n-    private void visitLiteralThrows(final DetailAST ast) {\n-        if ((!this.ignorePrivateMethods || !isInPrivateMethod(ast)) && !isOverriding(ast)) {\n-            final int count = (ast.getChildCount() + 1) / 2;\n-            if (count > this.max) {\n-                this.log(ast, \"throws.count\", new Object[] { Integer.valueOf(count), Integer.valueOf(this.max) });\n+    private void visitLiteralThrows(final DetailAST detailAST) {\n+        if ((!this.ignorePrivateMethods || !isInPrivateMethod(detailAST)) && !isOverriding(detailAST)) {\n+            final int i = (detailAST.getChildCount() + 1) / 2;\n+            if (i > this.max) {\n+                this.log(detailAST, \"throws.count\", new Object[] { Integer.valueOf(i), Integer.valueOf(this.max) });\n             }\n         }\n     }\n     \n-    private static boolean isOverriding(final DetailAST ast) {\n-        final DetailAST modifiers = ast.getParent().findFirstToken(5);\n-        boolean isOverriding = false;\n-        for (DetailAST child = modifiers.getFirstChild(); child != null; child = child.getNextSibling()) {\n-            if (child.getType() == 159 && \"Override\".equals(getAnnotationName(child))) {\n-                isOverriding = true;\n+    private static boolean isOverriding(final DetailAST detailAST) {\n+        final DetailAST firstToken = detailAST.getParent().findFirstToken(5);\n+        boolean b = false;\n+        for (DetailAST detailAST2 = firstToken.getFirstChild(); detailAST2 != null; detailAST2 = detailAST2.getNextSibling()) {\n+            if (detailAST2.getType() == 159 && \"Override\".equals(getAnnotationName(detailAST2))) {\n+                b = true;\n                 break;\n             }\n         }\n-        return isOverriding;\n+        return b;\n     }\n     \n-    private static String getAnnotationName(final DetailAST annotation) {\n-        final DetailAST dotAst = annotation.findFirstToken(59);\n-        final DetailAST parent = (DetailAST)Objects.requireNonNullElse(dotAst, annotation);\n-        return parent.findFirstToken(58).getText();\n+    private static String getAnnotationName(final DetailAST defaultObj) {\n+        return ((DetailAST)Objects.requireNonNullElse(defaultObj.findFirstToken(59), defaultObj)).findFirstToken(58).getText();\n     }\n     \n-    private static boolean isInPrivateMethod(final DetailAST ast) {\n-        final DetailAST methodModifiers = ast.getParent().findFirstToken(5);\n-        return methodModifiers.findFirstToken(61) != null;\n+    private static boolean isInPrivateMethod(final DetailAST detailAST) {\n+        return detailAST.getParent().findFirstToken(5).findFirstToken(61) != null;\n     }\n }\n"}]}
