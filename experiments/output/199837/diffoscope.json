{"diffoscope-json-version": 1, "source1": "first/ExceptionHandlers.class", "source2": "second/ExceptionHandlers.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,32 +10,30 @@\n import java.util.Map;\n \n public class ExceptionHandlers\n {\n     private static final ExceptionHandler[] EMPTY_ARRAY;\n     private final Map<InstructionHandle, Set<ExceptionHandler>> exceptionHandlers;\n     \n-    public ExceptionHandlers(final MethodGen mg) {\n+    public ExceptionHandlers(final MethodGen methodGen) {\n         this.exceptionHandlers = new HashMap<InstructionHandle, Set<ExceptionHandler>>();\n-        final CodeExceptionGen[] exceptionHandlers;\n-        final CodeExceptionGen[] cegs = exceptionHandlers = mg.getExceptionHandlers();\n-        for (final CodeExceptionGen ceg : exceptionHandlers) {\n-            final ExceptionHandler eh = new ExceptionHandler(ceg.getCatchType(), ceg.getHandlerPC());\n-            for (InstructionHandle ih = ceg.getStartPC(); ih != ceg.getEndPC().getNext(); ih = ih.getNext()) {\n-                ((Set<ExceptionHandler>)this.exceptionHandlers.computeIfAbsent(ih, k -> new HashSet())).add(eh);\n-                ((Set<ExceptionHandler>)this.exceptionHandlers.computeIfAbsent(ih, k -> new HashSet())).add(eh);\n+        for (final CodeExceptionGen codeExceptionGen : methodGen.getExceptionHandlers()) {\n+            final ExceptionHandler exceptionHandler = new ExceptionHandler(codeExceptionGen.getCatchType(), codeExceptionGen.getHandlerPC());\n+            for (InstructionHandle instructionHandle = codeExceptionGen.getStartPC(); instructionHandle != codeExceptionGen.getEndPC().getNext(); instructionHandle = instructionHandle.getNext()) {\n+                ((Set<ExceptionHandler>)this.exceptionHandlers.computeIfAbsent(instructionHandle, p0 -> new HashSet())).add(exceptionHandler);\n+                ((Set<ExceptionHandler>)this.exceptionHandlers.computeIfAbsent(instructionHandle, p0 -> new HashSet())).add(exceptionHandler);\n             }\n         }\n     }\n     \n-    public ExceptionHandler[] getExceptionHandlers(final InstructionHandle ih) {\n-        final Set<ExceptionHandler> hsSet = (Set<ExceptionHandler>)this.exceptionHandlers.get(ih);\n-        if (hsSet == null) {\n+    public ExceptionHandler[] getExceptionHandlers(final InstructionHandle instructionHandle) {\n+        final Set set = (Set)this.exceptionHandlers.get(instructionHandle);\n+        if (set == null) {\n             return ExceptionHandlers.EMPTY_ARRAY;\n         }\n-        return hsSet.toArray(ExceptionHandler.EMPTY_ARRAY);\n+        return (ExceptionHandler[])set.toArray(ExceptionHandler.EMPTY_ARRAY);\n     }\n     \n     static {\n         EMPTY_ARRAY = new ExceptionHandler[0];\n     }\n }\n"}]}
