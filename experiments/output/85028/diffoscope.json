{"diffoscope-json-version": 1, "source1": "first/IOPredicate.class", "source2": "second/IOPredicate.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,30 +13,30 @@\n     }\n     \n     default <T> IOPredicate<T> alwaysTrue() {\n         return Constants.IO_PREDICATE_TRUE;\n     }\n     \n     default <T> IOPredicate<T> isEqual(final Object target) {\n-        return (null == target) ? Objects::isNull : (object -> target.equals(object));\n+        return (target == null) ? Objects::isNull : (object -> o.equals(object));\n     }\n     \n     default IOPredicate<T> and(final IOPredicate<? super T> other) {\n         Objects.requireNonNull(other);\n-        return t -> this.test(t) && other.test(t);\n+        return t -> this.test(t) && ioPredicate.test(t);\n     }\n     \n     default Predicate<T> asPredicate() {\n         return t -> Uncheck.test(this, t);\n     }\n     \n     default IOPredicate<T> negate() {\n         return t -> !this.test(t);\n     }\n     \n     default IOPredicate<T> or(final IOPredicate<? super T> other) {\n         Objects.requireNonNull(other);\n-        return t -> this.test(t) || other.test(t);\n+        return t -> this.test(t) || ioPredicate.test(t);\n     }\n     \n     boolean test(final T p0) throws IOException;\n }\n"}]}
