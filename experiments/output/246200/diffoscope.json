{"diffoscope-json-version": 1, "source1": "first/RightCurlyCheck$Details.class", "source2": "second/RightCurlyCheck$Details.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,151 +15,147 @@\n     private Details(final DetailAST lcurly, final DetailAST rcurly, final DetailAST nextToken, final boolean shouldCheckLastRcurly) {\n         this.lcurly = lcurly;\n         this.rcurly = rcurly;\n         this.nextToken = nextToken;\n         this.shouldCheckLastRcurly = shouldCheckLastRcurly;\n     }\n     \n-    private static Details getDetails(final DetailAST ast) {\n+    private static Details getDetails(final DetailAST detailAST) {\n         Details details = null;\n-        switch (ast.getType()) {\n+        switch (detailAST.getType()) {\n             case 95:\n             case 96: {\n-                details = getDetailsForTryCatch(ast);\n+                details = getDetailsForTryCatch(detailAST);\n                 break;\n             }\n             case 83: {\n-                details = getDetailsForIf(ast);\n+                details = getDetailsForIf(detailAST);\n                 break;\n             }\n             case 85: {\n-                details = getDetailsForDoLoops(ast);\n+                details = getDetailsForDoLoops(detailAST);\n                 break;\n             }\n             case 89: {\n-                details = getDetailsForSwitch(ast);\n+                details = getDetailsForSwitch(detailAST);\n                 break;\n             }\n             default: {\n-                details = getDetailsForOthers(ast);\n+                details = getDetailsForOthers(detailAST);\n                 break;\n             }\n         }\n         return details;\n     }\n     \n-    private static Details getDetailsForSwitch(final DetailAST switchNode) {\n-        final DetailAST lcurly = switchNode.findFirstToken(72);\n+    private static Details getDetailsForSwitch(final DetailAST detailAST) {\n+        final DetailAST firstToken = detailAST.findFirstToken(72);\n         DetailAST nextToken = null;\n-        DetailAST rcurly;\n-        if (isSwitchExpression(switchNode)) {\n-            rcurly = null;\n+        DetailAST lastChild;\n+        if (isSwitchExpression(detailAST)) {\n+            lastChild = null;\n         }\n         else {\n-            rcurly = switchNode.getLastChild();\n-            nextToken = getNextToken(switchNode);\n+            lastChild = detailAST.getLastChild();\n+            nextToken = getNextToken(detailAST);\n         }\n-        return new Details(lcurly, rcurly, nextToken, true);\n+        return new Details(firstToken, lastChild, nextToken, true);\n     }\n     \n-    private static boolean isSwitchExpression(final DetailAST switchNode) {\n-        DetailAST currentNode = switchNode;\n-        boolean ans = false;\n-        while (currentNode != null) {\n-            if (currentNode.getType() == 28) {\n-                ans = true;\n+    private static boolean isSwitchExpression(final DetailAST detailAST) {\n+        DetailAST parent = detailAST;\n+        boolean b = false;\n+        while (parent != null) {\n+            if (parent.getType() == 28) {\n+                b = true;\n             }\n-            currentNode = currentNode.getParent();\n+            parent = parent.getParent();\n         }\n-        return ans;\n+        return b;\n     }\n     \n-    private static Details getDetailsForTryCatch(final DetailAST ast) {\n-        final int tokenType = ast.getType();\n-        DetailAST lcurly;\n-        DetailAST nextToken;\n-        if (tokenType == 95) {\n-            if (ast.getFirstChild().getType() == 176) {\n-                lcurly = ast.getFirstChild().getNextSibling();\n+    private static Details getDetailsForTryCatch(final DetailAST detailAST) {\n+        DetailAST detailAST2;\n+        DetailAST detailAST3;\n+        if (detailAST.getType() == 95) {\n+            if (detailAST.getFirstChild().getType() == 176) {\n+                detailAST2 = detailAST.getFirstChild().getNextSibling();\n             }\n             else {\n-                lcurly = ast.getFirstChild();\n+                detailAST2 = detailAST.getFirstChild();\n             }\n-            nextToken = lcurly.getNextSibling();\n+            detailAST3 = detailAST2.getNextSibling();\n         }\n         else {\n-            nextToken = ast.getNextSibling();\n-            lcurly = ast.getLastChild();\n+            detailAST3 = detailAST.getNextSibling();\n+            detailAST2 = detailAST.getLastChild();\n         }\n-        boolean shouldCheckLastRcurly;\n-        if (nextToken == null) {\n-            shouldCheckLastRcurly = true;\n-            nextToken = getNextToken(ast);\n+        boolean b;\n+        if (detailAST3 == null) {\n+            b = true;\n+            detailAST3 = getNextToken(detailAST);\n         }\n         else {\n-            shouldCheckLastRcurly = false;\n+            b = false;\n         }\n-        final DetailAST rcurly = lcurly.getLastChild();\n-        return new Details(lcurly, rcurly, nextToken, shouldCheckLastRcurly);\n+        return new Details(detailAST2, detailAST2.getLastChild(), detailAST3, b);\n     }\n     \n-    private static Details getDetailsForIf(final DetailAST ast) {\n-        DetailAST nextToken = ast.findFirstToken(92);\n-        boolean shouldCheckLastRcurly;\n-        DetailAST lcurly;\n-        if (nextToken == null) {\n-            shouldCheckLastRcurly = true;\n-            nextToken = getNextToken(ast);\n-            lcurly = ast.getLastChild();\n+    private static Details getDetailsForIf(final DetailAST detailAST) {\n+        DetailAST detailAST2 = detailAST.findFirstToken(92);\n+        boolean b;\n+        DetailAST detailAST3;\n+        if (detailAST2 == null) {\n+            b = true;\n+            detailAST2 = getNextToken(detailAST);\n+            detailAST3 = detailAST.getLastChild();\n         }\n         else {\n-            shouldCheckLastRcurly = false;\n-            lcurly = nextToken.getPreviousSibling();\n+            b = false;\n+            detailAST3 = detailAST2.getPreviousSibling();\n         }\n-        DetailAST rcurly = null;\n-        if (lcurly.getType() == 7) {\n-            rcurly = lcurly.getLastChild();\n-        }\n-        return new Details(lcurly, rcurly, nextToken, shouldCheckLastRcurly);\n-    }\n-    \n-    private static Details getDetailsForOthers(final DetailAST ast) {\n-        DetailAST rcurly = null;\n-        final int tokenType = ast.getType();\n-        DetailAST lcurly;\n-        if (isTokenWithNoChildSlist(tokenType)) {\n-            final DetailAST child = lcurly = ast.getLastChild();\n-            rcurly = child.getLastChild();\n+        DetailAST lastChild = null;\n+        if (detailAST3.getType() == 7) {\n+            lastChild = detailAST3.getLastChild();\n+        }\n+        return new Details(detailAST3, lastChild, detailAST2, b);\n+    }\n+    \n+    private static Details getDetailsForOthers(final DetailAST detailAST) {\n+        DetailAST detailAST2 = null;\n+        DetailAST detailAST3;\n+        if (isTokenWithNoChildSlist(detailAST.getType())) {\n+            detailAST2 = (detailAST3 = detailAST.getLastChild()).getLastChild();\n         }\n         else {\n-            lcurly = ast.findFirstToken(7);\n-            if (lcurly != null) {\n-                rcurly = lcurly.getLastChild();\n+            detailAST3 = detailAST.findFirstToken(7);\n+            if (detailAST3 != null) {\n+                detailAST2 = detailAST3.getLastChild();\n             }\n         }\n-        return new Details(lcurly, rcurly, getNextToken(ast), true);\n+        return new Details(detailAST3, detailAST2, getNextToken(detailAST), true);\n     }\n     \n-    private static boolean isTokenWithNoChildSlist(final int tokenType) {\n+    private static boolean isTokenWithNoChildSlist(final int n) {\n         return Arrays.stream(Details.TOKENS_WITH_NO_CHILD_SLIST).anyMatch(Details::lambda$isTokenWithNoChildSlist$0);\n     }\n     \n-    private static Details getDetailsForDoLoops(final DetailAST ast) {\n-        final DetailAST lcurly = ast.findFirstToken(7);\n-        final DetailAST nextToken = ast.findFirstToken(175);\n-        DetailAST rcurly = null;\n-        if (lcurly != null) {\n-            rcurly = lcurly.getLastChild();\n-        }\n-        return new Details(lcurly, rcurly, nextToken, false);\n+    private static Details getDetailsForDoLoops(final DetailAST detailAST) {\n+        final DetailAST firstToken = detailAST.findFirstToken(7);\n+        final DetailAST firstToken2 = detailAST.findFirstToken(175);\n+        DetailAST lastChild = null;\n+        if (firstToken != null) {\n+            lastChild = firstToken.getLastChild();\n+        }\n+        return new Details(firstToken, lastChild, firstToken2, false);\n     }\n     \n-    private static DetailAST getNextToken(final DetailAST ast) {\n-        DetailAST next = null;\n-        for (DetailAST parent = ast; next == null && parent != null; next = parent.getNextSibling(), parent = parent.getParent()) {}\n-        return next;\n+    private static DetailAST getNextToken(final DetailAST detailAST) {\n+        DetailAST nextSibling = null;\n+        for (DetailAST parent = detailAST; nextSibling == null && parent != null; nextSibling = parent.getNextSibling(), parent = parent.getParent()) {}\n+        return nextSibling;\n     }\n     \n     static {\n         Details.TOKENS_WITH_NO_CHILD_SLIST = new int[] { 14, 154, 157, 15, 199 };\n     }\n }\n"}]}
