{"diffoscope-json-version": 1, "source1": "first/EnumUtils.class", "source2": "second/EnumUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,140 +14,140 @@\n public class EnumUtils\n {\n     private static final String NULL_ELEMENTS_NOT_PERMITTED = \"null elements not permitted\";\n     private static final String CANNOT_STORE_S_S_VALUES_IN_S_BITS = \"Cannot store %s %s values in %s bits\";\n     private static final String S_DOES_NOT_SEEM_TO_BE_AN_ENUM_TYPE = \"%s does not seem to be an Enum type\";\n     private static final String ENUM_CLASS_MUST_BE_DEFINED = \"EnumClass must be defined.\";\n     \n-    private static <E extends Enum<E>> Class<E> asEnum(final Class<E> enumClass) {\n-        Validate.notNull((Object)enumClass, \"EnumClass must be defined.\", new Object[0]);\n-        Validate.isTrue(enumClass.isEnum(), \"%s does not seem to be an Enum type\", new Object[] { enumClass });\n-        return enumClass;\n+    private static <E extends Enum<E>> Class<E> asEnum(final Class<E> clazz) {\n+        Validate.notNull((Object)clazz, \"EnumClass must be defined.\", new Object[0]);\n+        Validate.isTrue(clazz.isEnum(), \"%s does not seem to be an Enum type\", new Object[] { clazz });\n+        return clazz;\n     }\n     \n-    private static <E extends Enum<E>> Class<E> checkBitVectorable(final Class<E> enumClass) {\n-        final E[] constants = (E[])asEnum((Class<Enum>)enumClass).getEnumConstants();\n-        Validate.isTrue(constants.length <= 64, \"Cannot store %s %s values in %s bits\", new Object[] { Integer.valueOf(constants.length), enumClass.getSimpleName(), Integer.valueOf(64) });\n-        return enumClass;\n+    private static <E extends Enum<E>> Class<E> checkBitVectorable(final Class<E> clazz) {\n+        final Enum[] array = (Enum[])asEnum((Class<Enum>)clazz).getEnumConstants();\n+        Validate.isTrue(array.length <= 64, \"Cannot store %s %s values in %s bits\", new Object[] { Integer.valueOf(array.length), clazz.getSimpleName(), Integer.valueOf(64) });\n+        return clazz;\n     }\n     \n     @SafeVarargs\n-    public static <E extends Enum<E>> long generateBitVector(final Class<E> enumClass, final E... values) {\n-        Validate.noNullElements((Object[])values);\n-        return generateBitVector(enumClass, (Iterable<? extends E>)Arrays.asList(values));\n+    public static <E extends Enum<E>> long generateBitVector(final Class<E> clazz, final E... a) {\n+        Validate.noNullElements((Object[])a);\n+        return generateBitVector(clazz, (Iterable<? extends E>)Arrays.asList(a));\n     }\n     \n-    public static <E extends Enum<E>> long generateBitVector(final Class<E> enumClass, final Iterable<? extends E> values) {\n-        checkBitVectorable(enumClass);\n-        Validate.notNull((Object)values);\n-        long total = 0L;\n-        for (final E constant : values) {\n-            Validate.notNull((Object)constant, \"null elements not permitted\", new Object[0]);\n-            total |= 1L << constant.ordinal();\n+    public static <E extends Enum<E>> long generateBitVector(final Class<E> clazz, final Iterable<? extends E> iterable) {\n+        checkBitVectorable(clazz);\n+        Validate.notNull((Object)iterable);\n+        long n = 0L;\n+        for (final Enum enum1 : iterable) {\n+            Validate.notNull((Object)enum1, \"null elements not permitted\", new Object[0]);\n+            n |= 1L << enum1.ordinal();\n         }\n-        return total;\n+        return n;\n     }\n     \n     @SafeVarargs\n-    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final E... values) {\n-        asEnum(enumClass);\n-        Validate.noNullElements((Object[])values);\n-        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n-        Collections.addAll(condensed, values);\n-        final long[] result = new long[(((Enum[])enumClass.getEnumConstants()).length - 1) / 64 + 1];\n-        for (final E value : condensed) {\n-            final long[] array = result;\n-            final int n = value.ordinal() / 64;\n-            array[n] |= 1L << value.ordinal() % 64;\n-        }\n-        ArrayUtils.reverse(result);\n-        return result;\n-    }\n-    \n-    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> enumClass, final Iterable<? extends E> values) {\n-        asEnum(enumClass);\n-        Validate.notNull((Object)values);\n-        final EnumSet<E> condensed = EnumSet.noneOf(enumClass);\n-        for (final E constant : values) {\n-            Validate.notNull((Object)constant, \"null elements not permitted\", new Object[0]);\n-            condensed.add(constant);\n-        }\n-        final long[] result = new long[(((Enum[])enumClass.getEnumConstants()).length - 1) / 64 + 1];\n-        for (final E value : condensed) {\n-            final long[] array = result;\n-            final int n = value.ordinal() / 64;\n-            array[n] |= 1L << value.ordinal() % 64;\n-        }\n-        ArrayUtils.reverse(result);\n-        return result;\n-    }\n-    \n-    public static <E extends Enum<E>> E getEnum(final Class<E> enumClass, final String enumName) {\n-        return getEnum(enumClass, enumName, (E)null);\n-    }\n-    \n-    public static <E extends Enum<E>> E getEnum(final Class<E> enumClass, final String enumName, final E defaultEnum) {\n-        if (enumName == null) {\n-            return defaultEnum;\n+    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> elementType, final E... elements) {\n+        asEnum(elementType);\n+        Validate.noNullElements((Object[])elements);\n+        final EnumSet<E> none = EnumSet.noneOf(elementType);\n+        Collections.addAll(none, elements);\n+        final long[] array = new long[(((Enum[])elementType.getEnumConstants()).length - 1) / 64 + 1];\n+        for (final Enum enum1 : none) {\n+            final long[] array2 = array;\n+            final int n = enum1.ordinal() / 64;\n+            array2[n] |= 1L << enum1.ordinal() % 64;\n+        }\n+        ArrayUtils.reverse(array);\n+        return array;\n+    }\n+    \n+    public static <E extends Enum<E>> long[] generateBitVectors(final Class<E> elementType, final Iterable<? extends E> iterable) {\n+        asEnum(elementType);\n+        Validate.notNull((Object)iterable);\n+        final EnumSet<E> none = EnumSet.noneOf(elementType);\n+        for (final Enum<E> e : iterable) {\n+            Validate.notNull((Object)e, \"null elements not permitted\", new Object[0]);\n+            none.add((E)e);\n+        }\n+        final long[] array = new long[(((Enum[])elementType.getEnumConstants()).length - 1) / 64 + 1];\n+        for (final Enum enum1 : none) {\n+            final long[] array2 = array;\n+            final int n = enum1.ordinal() / 64;\n+            array2[n] |= 1L << enum1.ordinal() % 64;\n+        }\n+        ArrayUtils.reverse(array);\n+        return array;\n+    }\n+    \n+    public static <E extends Enum<E>> E getEnum(final Class<E> clazz, final String s) {\n+        return getEnum(clazz, s, (E)null);\n+    }\n+    \n+    public static <E extends Enum<E>> E getEnum(final Class<E> enumClass, final String name, final E e) {\n+        if (name == null) {\n+            return e;\n         }\n         try {\n-            return Enum.valueOf(enumClass, enumName);\n+            return Enum.valueOf(enumClass, name);\n         }\n         catch (final IllegalArgumentException ex) {\n-            return defaultEnum;\n+            return e;\n         }\n     }\n     \n-    public static <E extends Enum<E>> E getEnumIgnoreCase(final Class<E> enumClass, final String enumName) {\n-        return getEnumIgnoreCase(enumClass, enumName, (E)null);\n+    public static <E extends Enum<E>> E getEnumIgnoreCase(final Class<E> clazz, final String s) {\n+        return getEnumIgnoreCase(clazz, s, (E)null);\n     }\n     \n-    public static <E extends Enum<E>> E getEnumIgnoreCase(final Class<E> enumClass, final String enumName, final E defaultEnum) {\n-        if (enumName == null || !enumClass.isEnum()) {\n-            return defaultEnum;\n+    public static <E extends Enum<E>> E getEnumIgnoreCase(final Class<E> clazz, final String anotherString, final E e) {\n+        if (anotherString == null || !clazz.isEnum()) {\n+            return e;\n         }\n-        for (final E each : (E[])enumClass.getEnumConstants()) {\n-            if (each.name().equalsIgnoreCase(enumName)) {\n-                return each;\n+        for (final Enum enum1 : (Enum[])clazz.getEnumConstants()) {\n+            if (enum1.name().equalsIgnoreCase(anotherString)) {\n+                return (E)enum1;\n             }\n         }\n-        return defaultEnum;\n+        return e;\n     }\n     \n-    public static <E extends Enum<E>> List<E> getEnumList(final Class<E> enumClass) {\n-        return new ArrayList<E>((Collection<? extends E>)Arrays.asList((E[])enumClass.getEnumConstants()));\n+    public static <E extends Enum<E>> List<E> getEnumList(final Class<E> clazz) {\n+        return new ArrayList<E>((Collection<? extends E>)Arrays.asList((E[])clazz.getEnumConstants()));\n     }\n     \n-    public static <E extends Enum<E>> Map<String, E> getEnumMap(final Class<E> enumClass) {\n-        final Map<String, E> map = new LinkedHashMap<String, E>();\n-        for (final E e : (E[])enumClass.getEnumConstants()) {\n-            map.put(e.name(), e);\n+    public static <E extends Enum<E>> Map<String, E> getEnumMap(final Class<E> clazz) {\n+        final LinkedHashMap linkedHashMap = new LinkedHashMap();\n+        for (final Enum<E> enum1 : (E[])clazz.getEnumConstants()) {\n+            linkedHashMap.put(enum1.name(), enum1);\n         }\n-        return map;\n+        return linkedHashMap;\n     }\n     \n-    public static <E extends Enum<E>> boolean isValidEnum(final Class<E> enumClass, final String enumName) {\n-        return getEnum(enumClass, enumName) != null;\n+    public static <E extends Enum<E>> boolean isValidEnum(final Class<E> clazz, final String s) {\n+        return getEnum(clazz, s) != null;\n     }\n     \n-    public static <E extends Enum<E>> boolean isValidEnumIgnoreCase(final Class<E> enumClass, final String enumName) {\n-        return getEnumIgnoreCase(enumClass, enumName) != null;\n+    public static <E extends Enum<E>> boolean isValidEnumIgnoreCase(final Class<E> clazz, final String s) {\n+        return getEnumIgnoreCase(clazz, s) != null;\n     }\n     \n-    public static <E extends Enum<E>> EnumSet<E> processBitVector(final Class<E> enumClass, final long value) {\n-        checkBitVectorable(enumClass).getEnumConstants();\n-        return processBitVectors(enumClass, value);\n+    public static <E extends Enum<E>> EnumSet<E> processBitVector(final Class<E> clazz, final long n) {\n+        checkBitVectorable(clazz).getEnumConstants();\n+        return processBitVectors(clazz, n);\n     }\n     \n-    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> enumClass, final long... values) {\n-        final EnumSet<E> results = EnumSet.noneOf((Class<E>)asEnum((Class<E>)enumClass));\n-        final long[] lvalues = ArrayUtils.clone((long[])Validate.notNull((Object)values));\n-        ArrayUtils.reverse(lvalues);\n-        for (final E constant : (E[])enumClass.getEnumConstants()) {\n-            final int block = constant.ordinal() / 64;\n-            if (block < lvalues.length && (lvalues[block] & 1L << constant.ordinal() % 64) != 0x0L) {\n-                results.add(constant);\n+    public static <E extends Enum<E>> EnumSet<E> processBitVectors(final Class<E> clazz, final long... array) {\n+        final EnumSet<Enum> none = (EnumSet<Enum>)EnumSet.noneOf((Class<E>)asEnum((Class<E>)clazz));\n+        final long[] clone = ArrayUtils.clone((long[])Validate.notNull((Object)array));\n+        ArrayUtils.reverse(clone);\n+        for (final Enum<E> e : (E[])clazz.getEnumConstants()) {\n+            final int n = e.ordinal() / 64;\n+            if (n < clone.length && (clone[n] & 1L << e.ordinal() % 64) != 0x0L) {\n+                none.add(e);\n             }\n         }\n-        return results;\n+        return (EnumSet<E>)none;\n     }\n }\n"}]}
