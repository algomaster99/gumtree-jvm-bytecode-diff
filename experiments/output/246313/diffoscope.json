{"diffoscope-json-version": 1, "source1": "first/AnnotationArrayInitHandler.class", "source2": "second/AnnotationArrayInitHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -3,39 +3,37 @@\n \n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n \n public class AnnotationArrayInitHandler extends BlockParentHandler\n {\n     private static final int NOT_EXIST = -1;\n     \n-    public AnnotationArrayInitHandler(final IndentationCheck indentCheck, final DetailAST ast, final AbstractExpressionHandler parent) {\n-        super(indentCheck, \"annotation array initialization\", ast, parent);\n+    public AnnotationArrayInitHandler(final IndentationCheck indentationCheck, final DetailAST detailAST, final AbstractExpressionHandler abstractExpressionHandler) {\n+        super(indentationCheck, \"annotation array initialization\", detailAST, abstractExpressionHandler);\n     }\n     \n     protected IndentLevel getIndentImpl() {\n-        final DetailAST parentAST = this.getMainAst().getParent();\n-        return new IndentLevel(this.getLineStart(parentAST));\n+        return new IndentLevel(this.getLineStart(this.getMainAst().getParent()));\n     }\n     \n     protected DetailAST getTopLevelAst() {\n         return null;\n     }\n     \n     protected DetailAST getLeftCurly() {\n         return this.getMainAst();\n     }\n     \n     protected IndentLevel curlyIndent() {\n-        int offset = 0;\n-        final DetailAST lcurly = this.getLeftCurly();\n-        if (this.isOnStartOfLine(lcurly)) {\n-            offset = this.getBraceAdjustment();\n+        int braceAdjustment = 0;\n+        if (this.isOnStartOfLine(this.getLeftCurly())) {\n+            braceAdjustment = this.getBraceAdjustment();\n         }\n-        final IndentLevel level = new IndentLevel(this.getIndent(), new int[] { offset });\n-        return IndentLevel.addAcceptable(level, new int[] { level.getLastIndentLevel() + this.getLineWrappingIndentation() });\n+        final IndentLevel indentLevel = new IndentLevel(this.getIndent(), new int[] { braceAdjustment });\n+        return IndentLevel.addAcceptable(indentLevel, new int[] { indentLevel.getLastIndentLevel() + this.getLineWrappingIndentation() });\n     }\n     \n     protected DetailAST getRightCurly() {\n         return this.getMainAst().findFirstToken(73);\n     }\n     \n     protected boolean canChildrenBeNested() {\n@@ -43,37 +41,37 @@\n     }\n     \n     protected DetailAST getListChild() {\n         return this.getMainAst();\n     }\n     \n     protected IndentLevel getChildrenExpectedIndent() {\n-        IndentLevel expectedIndent = new IndentLevel(this.getIndent(), new int[] { this.getArrayInitIndentation(), this.getLineWrappingIndentation() });\n+        IndentLevel indentLevel = new IndentLevel(this.getIndent(), new int[] { this.getArrayInitIndentation(), this.getLineWrappingIndentation() });\n         final DetailAST leftCurly = this.getLeftCurly();\n         final int firstLine = getFirstLine(this.getListChild());\n-        final int lcurlyPos = this.expandedTabsColumnNo(leftCurly);\n-        final int firstChildPos = this.getNextFirstNonBlankOnLineAfter(firstLine, lcurlyPos);\n-        if (firstChildPos == -1 && lcurlyPos == this.getLineStart(leftCurly)) {\n-            expectedIndent = IndentLevel.addAcceptable(expectedIndent, new int[] { lcurlyPos + this.getLineWrappingIndentation() });\n+        final int expandedTabsColumnNo = this.expandedTabsColumnNo(leftCurly);\n+        final int nextFirstNonBlankOnLineAfter = this.getNextFirstNonBlankOnLineAfter(firstLine, expandedTabsColumnNo);\n+        if (nextFirstNonBlankOnLineAfter == -1 && expandedTabsColumnNo == this.getLineStart(leftCurly)) {\n+            indentLevel = IndentLevel.addAcceptable(indentLevel, new int[] { expandedTabsColumnNo + this.getLineWrappingIndentation() });\n         }\n-        if (firstChildPos != -1) {\n-            expectedIndent = IndentLevel.addAcceptable(expectedIndent, new int[] { firstChildPos, lcurlyPos + this.getLineWrappingIndentation() });\n+        if (nextFirstNonBlankOnLineAfter != -1) {\n+            indentLevel = IndentLevel.addAcceptable(indentLevel, new int[] { nextFirstNonBlankOnLineAfter, expandedTabsColumnNo + this.getLineWrappingIndentation() });\n         }\n-        return expectedIndent;\n+        return indentLevel;\n     }\n     \n-    private int getNextFirstNonBlankOnLineAfter(final int lineNo, final int columnNo) {\n-        int realColumnNo;\n-        String line;\n-        int lineLength;\n-        for (realColumnNo = columnNo + 1, line = this.getIndentCheck().getLines()[lineNo - 1], lineLength = line.length(); realColumnNo < lineLength && Character.isWhitespace(line.charAt(realColumnNo)); ++realColumnNo) {}\n-        if (realColumnNo == lineLength) {\n-            realColumnNo = -1;\n+    private int getNextFirstNonBlankOnLineAfter(final int n, final int n2) {\n+        int index;\n+        String s;\n+        int length;\n+        for (index = n2 + 1, s = this.getIndentCheck().getLines()[n - 1], length = s.length(); index < length && Character.isWhitespace(s.charAt(index)); ++index) {}\n+        if (index == length) {\n+            index = -1;\n         }\n-        return realColumnNo;\n+        return index;\n     }\n     \n     private int getLineWrappingIndentation() {\n         return this.getIndentCheck().getLineWrappingIndentation();\n     }\n     \n     private int getArrayInitIndentation() {\n"}]}
