{"diffoscope-json-version": 1, "source1": "first/FileContents.class", "source2": "second/FileContents.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,14 +18,18 @@\n     private static final String MATCH_SINGLELINE_COMMENT_PAT = \"^\\\\s*//.*$\";\n     private static final Pattern MATCH_SINGLELINE_COMMENT;\n     private final FileText text;\n     private final Map<Integer, TextBlock> javadocComments;\n     private final Map<Integer, TextBlock> cppComments;\n     private final Map<Integer, List<TextBlock>> clangComments;\n     \n+    static {\n+        MATCH_SINGLELINE_COMMENT = Pattern.compile(\"^\\\\s*//.*$\");\n+    }\n+    \n     public FileContents(final FileText text) {\n         this.javadocComments = new HashMap<Integer, TextBlock>();\n         this.cppComments = new HashMap<Integer, TextBlock>();\n         this.clangComments = new HashMap<Integer, List<TextBlock>>();\n         this.text = new FileText(text);\n     }\n     \n@@ -107,15 +111,15 @@\n     \n     public boolean hasIntersectionWithComment(final int startLineNo, final int startColNo, final int endLineNo, final int endColNo) {\n         return this.hasIntersectionWithBlockComment(startLineNo, startColNo, endLineNo, endColNo) || this.hasIntersectionWithSingleLineComment(startLineNo, startColNo, endLineNo, endColNo);\n     }\n     \n     private boolean hasIntersectionWithBlockComment(final int startLineNo, final int startColNo, final int endLineNo, final int endColNo) {\n         final Collection<List<TextBlock>> values = this.clangComments.values();\n-        return values.stream().flatMap((Function<? super List<TextBlock>, ? extends Stream<?>>)Collection::stream).anyMatch(comment -> comment.intersects(startLineNo, startColNo, endLineNo, endColNo));\n+        return values.stream().flatMap((Function<? super List<TextBlock>, ? extends Stream<?>>)Collection::stream).anyMatch(comment -> comment.intersects(n, n2, n3, n4));\n     }\n     \n     private boolean hasIntersectionWithSingleLineComment(final int startLineNo, final int startColNo, final int endLineNo, final int endColNo) {\n         boolean hasIntersection = false;\n         for (int lineNumber = startLineNo; lineNumber <= endLineNo; ++lineNumber) {\n             final TextBlock comment = (TextBlock)this.cppComments.get(Integer.valueOf(lineNumber));\n             if (comment != null && comment.intersects(startLineNo, startColNo, endLineNo, endColNo)) {\n@@ -134,12 +138,8 @@\n         return Collections.unmodifiableMap((Map<? extends Integer, ? extends List<TextBlock>>)this.clangComments);\n     }\n     \n     @Deprecated(since = \"10.2\")\n     public boolean inPackageInfo() {\n         return \"package-info.java\".equals(this.text.getFile().getName());\n     }\n-    \n-    static {\n-        MATCH_SINGLELINE_COMMENT = Pattern.compile(\"^\\\\s*//.*$\");\n-    }\n }\n"}]}
