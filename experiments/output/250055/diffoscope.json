{"diffoscope-json-version": 1, "source1": "first/LambdaBodyLengthCheck.class", "source2": "second/LambdaBodyLengthCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,64 +12,64 @@\n     private static final int DEFAULT_MAX = 10;\n     private int max;\n     \n     public LambdaBodyLengthCheck() {\n         this.max = 10;\n     }\n     \n-    public void setMax(final int length) {\n-        this.max = length;\n+    public void setMax(final int max) {\n+        this.max = max;\n     }\n     \n     public int[] getDefaultTokens() {\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getAcceptableTokens() {\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 181 };\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        if (ast.getParent().getType() != 208) {\n-            final int length = getLength(ast);\n+    public void visitToken(final DetailAST detailAST) {\n+        if (detailAST.getParent().getType() != 208) {\n+            final int length = getLength(detailAST);\n             if (length > this.max) {\n-                this.log(ast, \"maxLen.lambdaBody\", new Object[] { Integer.valueOf(length), Integer.valueOf(this.max) });\n+                this.log(detailAST, \"maxLen.lambdaBody\", new Object[] { Integer.valueOf(length), Integer.valueOf(this.max) });\n             }\n         }\n     }\n     \n-    private static int getLength(final DetailAST ast) {\n-        final DetailAST lambdaBody = ast.getLastChild();\n-        int length;\n-        if (lambdaBody.getType() == 7) {\n-            length = lambdaBody.getLastChild().getLineNo() - lambdaBody.getLineNo();\n+    private static int getLength(final DetailAST detailAST) {\n+        final DetailAST lastChild = detailAST.getLastChild();\n+        int n;\n+        if (lastChild.getType() == 7) {\n+            n = lastChild.getLastChild().getLineNo() - lastChild.getLineNo();\n         }\n         else {\n-            length = getLastNodeLineNumber(lambdaBody) - getFirstNodeLineNumber(lambdaBody);\n+            n = getLastNodeLineNumber(lastChild) - getFirstNodeLineNumber(lastChild);\n         }\n-        return length + 1;\n+        return n + 1;\n     }\n     \n-    private static int getLastNodeLineNumber(final DetailAST lambdaBody) {\n-        DetailAST node = lambdaBody;\n-        int result;\n+    private static int getLastNodeLineNumber(final DetailAST detailAST) {\n+        DetailAST lastChild = detailAST;\n+        int lineNo;\n         do {\n-            result = node.getLineNo();\n-            node = node.getLastChild();\n-        } while (node != null);\n-        return result;\n+            lineNo = lastChild.getLineNo();\n+            lastChild = lastChild.getLastChild();\n+        } while (lastChild != null);\n+        return lineNo;\n     }\n     \n-    private static int getFirstNodeLineNumber(final DetailAST lambdaBody) {\n-        DetailAST node = lambdaBody;\n-        int result;\n+    private static int getFirstNodeLineNumber(final DetailAST detailAST) {\n+        DetailAST firstChild = detailAST;\n+        int lineNo;\n         do {\n-            result = node.getLineNo();\n-            node = node.getFirstChild();\n-        } while (node != null);\n-        return result;\n+            lineNo = firstChild.getLineNo();\n+            firstChild = firstChild.getFirstChild();\n+        } while (firstChild != null);\n+        return lineNo;\n     }\n }\n"}]}
