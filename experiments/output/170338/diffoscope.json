{"diffoscope-json-version": 1, "source1": "first/JSONObject.class", "source2": "second/JSONObject.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,349 +1,349 @@\n-  SHA-256 checksum 01d6e57052b172d2ead9ee26a8d47b675617131f635ae16b0a42801461ee934b\n+  SHA-256 checksum f85bb16a49be71b9daa9a12e178b2f961396207a083e60ec651640ca55250f11\n   Compiled from \"JSONObject.java\"\n public class org.json.JSONObject\n   minor version: 0\n   major version: 50\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #60                         // org/json/JSONObject\n   super_class: #201                       // java/lang/Object\n   interfaces: 0, fields: 3, methods: 109, attributes: 2\n Constant pool:\n-     #1 = Methodref          #201.#695    // java/lang/Object.\"<init>\":()V\n-     #2 = Class              #696         // java/util/HashMap\n-     #3 = Methodref          #2.#695      // java/util/HashMap.\"<init>\":()V\n-     #4 = Fieldref           #60.#697     // org/json/JSONObject.map:Ljava/util/Map;\n-     #5 = Methodref          #60.#698     // org/json/JSONObject.\"<init>\":(I)V\n-     #6 = Methodref          #60.#699     // org/json/JSONObject.opt:(Ljava/lang/String;)Ljava/lang/Object;\n-     #7 = Methodref          #60.#700     // org/json/JSONObject.putOnce:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-     #8 = Class              #701         // java/lang/Exception\n-     #9 = Methodref          #60.#695     // org/json/JSONObject.\"<init>\":()V\n-    #10 = Methodref          #47.#702     // org/json/JSONTokener.nextClean:()C\n-    #11 = String             #703         // A JSONObject text must begin with \\'{\\'\n-    #12 = Methodref          #47.#704     // org/json/JSONTokener.syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n-    #13 = String             #705         // A JSONObject text must end with \\'}\\'\n-    #14 = Methodref          #47.#706     // org/json/JSONTokener.back:()V\n-    #15 = Methodref          #47.#707     // org/json/JSONTokener.nextValue:()Ljava/lang/Object;\n-    #16 = Methodref          #201.#708    // java/lang/Object.toString:()Ljava/lang/String;\n-    #17 = String             #709         // Expected a \\':\\' after a key\n-    #18 = Class              #710         // java/lang/StringBuilder\n-    #19 = Methodref          #18.#695     // java/lang/StringBuilder.\"<init>\":()V\n-    #20 = String             #711         // Duplicate key \\\"\n-    #21 = Methodref          #18.#712     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-    #22 = String             #713         // \\\"\n-    #23 = Methodref          #18.#708     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-    #24 = Methodref          #60.#714     // org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-    #25 = String             #715         // Expected a \\',\\' or \\'}\\'\n-    #26 = InterfaceMethodref #304.#716    // java/util/Map.size:()I\n-    #27 = Methodref          #2.#698      // java/util/HashMap.\"<init>\":(I)V\n-    #28 = InterfaceMethodref #304.#717    // java/util/Map.entrySet:()Ljava/util/Set;\n-    #29 = InterfaceMethodref #718.#719    // java/util/Set.iterator:()Ljava/util/Iterator;\n-    #30 = InterfaceMethodref #720.#721    // java/util/Iterator.hasNext:()Z\n-    #31 = InterfaceMethodref #720.#722    // java/util/Iterator.next:()Ljava/lang/Object;\n-    #32 = Class              #723         // java/util/Map$Entry\n-    #33 = InterfaceMethodref #32.#724     // java/util/Map$Entry.getKey:()Ljava/lang/Object;\n-    #34 = Class              #725         // java/lang/NullPointerException\n-    #35 = String             #726         // Null key.\n-    #36 = Methodref          #34.#727     // java/lang/NullPointerException.\"<init>\":(Ljava/lang/String;)V\n-    #37 = InterfaceMethodref #32.#728     // java/util/Map$Entry.getValue:()Ljava/lang/Object;\n-    #38 = Methodref          #56.#729     // java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;\n-    #39 = Methodref          #60.#730     // org/json/JSONObject.wrap:(Ljava/lang/Object;)Ljava/lang/Object;\n-    #40 = InterfaceMethodref #304.#731    // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-    #41 = Methodref          #60.#732     // org/json/JSONObject.populateMap:(Ljava/lang/Object;)V\n-    #42 = Methodref          #60.#733     // org/json/JSONObject.populateMap:(Ljava/lang/Object;Ljava/util/Set;)V\n-    #43 = Methodref          #201.#734    // java/lang/Object.getClass:()Ljava/lang/Class;\n-    #44 = Methodref          #735.#736    // java/lang/Class.getField:(Ljava/lang/String;)Ljava/lang/reflect/Field;\n-    #45 = Methodref          #737.#738    // java/lang/reflect/Field.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-    #46 = Methodref          #60.#739     // org/json/JSONObject.putOpt:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-    #47 = Class              #740         // org/json/JSONTokener\n-    #48 = Methodref          #47.#727     // org/json/JSONTokener.\"<init>\":(Ljava/lang/String;)V\n-    #49 = Methodref          #60.#741     // org/json/JSONObject.\"<init>\":(Lorg/json/JSONTokener;)V\n-    #50 = Methodref          #742.#743    // java/lang/Thread.currentThread:()Ljava/lang/Thread;\n-    #51 = Methodref          #742.#744    // java/lang/Thread.getContextClassLoader:()Ljava/lang/ClassLoader;\n-    #52 = Methodref          #745.#746    // java/util/ResourceBundle.getBundle:(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;\n-    #53 = Methodref          #745.#747    // java/util/ResourceBundle.getKeys:()Ljava/util/Enumeration;\n-    #54 = InterfaceMethodref #748.#749    // java/util/Enumeration.hasMoreElements:()Z\n-    #55 = InterfaceMethodref #748.#750    // java/util/Enumeration.nextElement:()Ljava/lang/Object;\n-    #56 = Class              #751         // java/lang/String\n-    #57 = String             #752         // \\\\.\n-    #58 = Methodref          #56.#753     // java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n-    #59 = Methodref          #60.#754     // org/json/JSONObject.optJSONObject:(Ljava/lang/String;)Lorg/json/JSONObject;\n-    #60 = Class              #755         // org/json/JSONObject\n-    #61 = Methodref          #745.#756    // java/util/ResourceBundle.getString:(Ljava/lang/String;)Ljava/lang/String;\n-    #62 = Methodref          #60.#757     // org/json/JSONObject.testValidity:(Ljava/lang/Object;)V\n-    #63 = Class              #758         // org/json/JSONArray\n-    #64 = Methodref          #63.#695     // org/json/JSONArray.\"<init>\":()V\n-    #65 = Methodref          #63.#759     // org/json/JSONArray.put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n-    #66 = String             #760         // JSONArray\n-    #67 = Methodref          #60.#761     // org/json/JSONObject.wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-    #68 = Methodref          #136.#762    // java/lang/Double.isInfinite:(D)Z\n-    #69 = Methodref          #136.#763    // java/lang/Double.isNaN:(D)Z\n-    #70 = String             #764         // null\n-    #71 = Methodref          #136.#765    // java/lang/Double.toString:(D)Ljava/lang/String;\n-    #72 = Methodref          #56.#766     // java/lang/String.indexOf:(I)I\n-    #73 = String             #767         // 0\n-    #74 = Methodref          #56.#768     // java/lang/String.endsWith:(Ljava/lang/String;)Z\n-    #75 = Methodref          #56.#769     // java/lang/String.length:()I\n-    #76 = Methodref          #56.#770     // java/lang/String.substring:(II)Ljava/lang/String;\n-    #77 = String             #771         // .\n-    #78 = Class              #772         // org/json/JSONException\n-    #79 = Methodref          #78.#727     // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n-    #80 = String             #773         // JSONObject[\n-    #81 = Methodref          #60.#774     // org/json/JSONObject.quote:(Ljava/lang/String;)Ljava/lang/String;\n-    #82 = String             #775         // ] not found.\n-    #83 = Methodref          #60.#776     // org/json/JSONObject.optEnum:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-    #84 = String             #777         // enum of type\n-    #85 = Methodref          #735.#778    // java/lang/Class.getSimpleName:()Ljava/lang/String;\n-    #86 = Methodref          #60.#779     // org/json/JSONObject.wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-    #87 = Methodref          #60.#780     // org/json/JSONObject.get:(Ljava/lang/String;)Ljava/lang/Object;\n-    #88 = Fieldref           #157.#781    // java/lang/Boolean.FALSE:Ljava/lang/Boolean;\n-    #89 = Methodref          #201.#782    // java/lang/Object.equals:(Ljava/lang/Object;)Z\n-    #90 = String             #783         // false\n-    #91 = Methodref          #56.#784     // java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z\n-    #92 = Fieldref           #157.#785    // java/lang/Boolean.TRUE:Ljava/lang/Boolean;\n-    #93 = String             #786         // true\n-    #94 = String             #787         // Boolean\n-    #95 = Methodref          #60.#788     // org/json/JSONObject.objectToBigInteger:(Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-    #96 = String             #789         // BigInteger\n-    #97 = Methodref          #60.#790     // org/json/JSONObject.objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-    #98 = String             #791         // BigDecimal\n-    #99 = Class              #792         // java/lang/Number\n-   #100 = Methodref          #99.#793     // java/lang/Number.doubleValue:()D\n-   #101 = Methodref          #136.#794    // java/lang/Double.parseDouble:(Ljava/lang/String;)D\n-   #102 = String             #795         // double\n-   #103 = Methodref          #99.#796     // java/lang/Number.floatValue:()F\n-   #104 = Methodref          #133.#797    // java/lang/Float.parseFloat:(Ljava/lang/String;)F\n-   #105 = String             #798         // float\n-   #106 = Methodref          #60.#799     // org/json/JSONObject.stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n-   #107 = String             #491         // number\n-   #108 = Methodref          #99.#800     // java/lang/Number.intValue:()I\n-   #109 = Methodref          #125.#801    // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n-   #110 = String             #802         // int\n-   #111 = String             #803         // JSONObject\n-   #112 = Methodref          #99.#804     // java/lang/Number.longValue:()J\n-   #113 = Methodref          #127.#805    // java/lang/Long.parseLong:(Ljava/lang/String;)J\n-   #114 = String             #806         // long\n-   #115 = Methodref          #60.#807     // org/json/JSONObject.isEmpty:()Z\n-   #116 = Methodref          #60.#808     // org/json/JSONObject.keySet:()Ljava/util/Set;\n-   #117 = Methodref          #60.#769     // org/json/JSONObject.length:()I\n-   #118 = InterfaceMethodref #718.#809    // java/util/Set.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+     #1 = Methodref          #201.#668    // java/lang/Object.\"<init>\":()V\n+     #2 = Class              #669         // java/util/HashMap\n+     #3 = Methodref          #2.#668      // java/util/HashMap.\"<init>\":()V\n+     #4 = Fieldref           #60.#670     // org/json/JSONObject.map:Ljava/util/Map;\n+     #5 = Methodref          #60.#671     // org/json/JSONObject.\"<init>\":(I)V\n+     #6 = Methodref          #60.#672     // org/json/JSONObject.opt:(Ljava/lang/String;)Ljava/lang/Object;\n+     #7 = Methodref          #60.#673     // org/json/JSONObject.putOnce:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+     #8 = Class              #674         // java/lang/Exception\n+     #9 = Methodref          #60.#668     // org/json/JSONObject.\"<init>\":()V\n+    #10 = Methodref          #47.#675     // org/json/JSONTokener.nextClean:()C\n+    #11 = String             #676         // A JSONObject text must begin with \\'{\\'\n+    #12 = Methodref          #47.#677     // org/json/JSONTokener.syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n+    #13 = String             #678         // A JSONObject text must end with \\'}\\'\n+    #14 = Methodref          #47.#679     // org/json/JSONTokener.back:()V\n+    #15 = Methodref          #47.#680     // org/json/JSONTokener.nextValue:()Ljava/lang/Object;\n+    #16 = Methodref          #201.#681    // java/lang/Object.toString:()Ljava/lang/String;\n+    #17 = String             #682         // Expected a \\':\\' after a key\n+    #18 = Class              #683         // java/lang/StringBuilder\n+    #19 = Methodref          #18.#668     // java/lang/StringBuilder.\"<init>\":()V\n+    #20 = String             #684         // Duplicate key \\\"\n+    #21 = Methodref          #18.#685     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+    #22 = String             #686         // \\\"\n+    #23 = Methodref          #18.#681     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+    #24 = Methodref          #60.#687     // org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+    #25 = String             #688         // Expected a \\',\\' or \\'}\\'\n+    #26 = InterfaceMethodref #304.#689    // java/util/Map.size:()I\n+    #27 = Methodref          #2.#671      // java/util/HashMap.\"<init>\":(I)V\n+    #28 = InterfaceMethodref #304.#690    // java/util/Map.entrySet:()Ljava/util/Set;\n+    #29 = InterfaceMethodref #534.#691    // java/util/Set.iterator:()Ljava/util/Iterator;\n+    #30 = InterfaceMethodref #376.#692    // java/util/Iterator.hasNext:()Z\n+    #31 = InterfaceMethodref #376.#693    // java/util/Iterator.next:()Ljava/lang/Object;\n+    #32 = Class              #694         // java/util/Map$Entry\n+    #33 = InterfaceMethodref #32.#695     // java/util/Map$Entry.getKey:()Ljava/lang/Object;\n+    #34 = Class              #696         // java/lang/NullPointerException\n+    #35 = String             #697         // Null key.\n+    #36 = Methodref          #34.#698     // java/lang/NullPointerException.\"<init>\":(Ljava/lang/String;)V\n+    #37 = InterfaceMethodref #32.#699     // java/util/Map$Entry.getValue:()Ljava/lang/Object;\n+    #38 = Methodref          #56.#700     // java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;\n+    #39 = Methodref          #60.#701     // org/json/JSONObject.wrap:(Ljava/lang/Object;)Ljava/lang/Object;\n+    #40 = InterfaceMethodref #304.#702    // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+    #41 = Methodref          #60.#703     // org/json/JSONObject.populateMap:(Ljava/lang/Object;)V\n+    #42 = Methodref          #60.#704     // org/json/JSONObject.populateMap:(Ljava/lang/Object;Ljava/util/Set;)V\n+    #43 = Methodref          #201.#705    // java/lang/Object.getClass:()Ljava/lang/Class;\n+    #44 = Methodref          #390.#706    // java/lang/Class.getField:(Ljava/lang/String;)Ljava/lang/reflect/Field;\n+    #45 = Methodref          #707.#708    // java/lang/reflect/Field.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+    #46 = Methodref          #60.#709     // org/json/JSONObject.putOpt:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+    #47 = Class              #710         // org/json/JSONTokener\n+    #48 = Methodref          #47.#698     // org/json/JSONTokener.\"<init>\":(Ljava/lang/String;)V\n+    #49 = Methodref          #60.#711     // org/json/JSONObject.\"<init>\":(Lorg/json/JSONTokener;)V\n+    #50 = Methodref          #712.#713    // java/lang/Thread.currentThread:()Ljava/lang/Thread;\n+    #51 = Methodref          #712.#714    // java/lang/Thread.getContextClassLoader:()Ljava/lang/ClassLoader;\n+    #52 = Methodref          #408.#715    // java/util/ResourceBundle.getBundle:(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;\n+    #53 = Methodref          #408.#716    // java/util/ResourceBundle.getKeys:()Ljava/util/Enumeration;\n+    #54 = InterfaceMethodref #409.#717    // java/util/Enumeration.hasMoreElements:()Z\n+    #55 = InterfaceMethodref #409.#718    // java/util/Enumeration.nextElement:()Ljava/lang/Object;\n+    #56 = Class              #719         // java/lang/String\n+    #57 = String             #720         // \\\\.\n+    #58 = Methodref          #56.#721     // java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n+    #59 = Methodref          #60.#722     // org/json/JSONObject.optJSONObject:(Ljava/lang/String;)Lorg/json/JSONObject;\n+    #60 = Class              #723         // org/json/JSONObject\n+    #61 = Methodref          #408.#724    // java/util/ResourceBundle.getString:(Ljava/lang/String;)Ljava/lang/String;\n+    #62 = Methodref          #60.#725     // org/json/JSONObject.testValidity:(Ljava/lang/Object;)V\n+    #63 = Class              #726         // org/json/JSONArray\n+    #64 = Methodref          #63.#668     // org/json/JSONArray.\"<init>\":()V\n+    #65 = Methodref          #63.#727     // org/json/JSONArray.put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n+    #66 = String             #728         // JSONArray\n+    #67 = Methodref          #60.#729     // org/json/JSONObject.wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+    #68 = Methodref          #136.#730    // java/lang/Double.isInfinite:(D)Z\n+    #69 = Methodref          #136.#731    // java/lang/Double.isNaN:(D)Z\n+    #70 = String             #732         // null\n+    #71 = Methodref          #136.#733    // java/lang/Double.toString:(D)Ljava/lang/String;\n+    #72 = Methodref          #56.#734     // java/lang/String.indexOf:(I)I\n+    #73 = String             #735         // 0\n+    #74 = Methodref          #56.#736     // java/lang/String.endsWith:(Ljava/lang/String;)Z\n+    #75 = Methodref          #56.#737     // java/lang/String.length:()I\n+    #76 = Methodref          #56.#738     // java/lang/String.substring:(II)Ljava/lang/String;\n+    #77 = String             #739         // .\n+    #78 = Class              #740         // org/json/JSONException\n+    #79 = Methodref          #78.#698     // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n+    #80 = String             #741         // JSONObject[\n+    #81 = Methodref          #60.#742     // org/json/JSONObject.quote:(Ljava/lang/String;)Ljava/lang/String;\n+    #82 = String             #743         // ] not found.\n+    #83 = Methodref          #60.#744     // org/json/JSONObject.optEnum:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+    #84 = String             #745         // enum of type\n+    #85 = Methodref          #390.#746    // java/lang/Class.getSimpleName:()Ljava/lang/String;\n+    #86 = Methodref          #60.#747     // org/json/JSONObject.wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+    #87 = Methodref          #60.#748     // org/json/JSONObject.get:(Ljava/lang/String;)Ljava/lang/Object;\n+    #88 = Fieldref           #157.#749    // java/lang/Boolean.FALSE:Ljava/lang/Boolean;\n+    #89 = Methodref          #201.#750    // java/lang/Object.equals:(Ljava/lang/Object;)Z\n+    #90 = String             #751         // false\n+    #91 = Methodref          #56.#752     // java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z\n+    #92 = Fieldref           #157.#753    // java/lang/Boolean.TRUE:Ljava/lang/Boolean;\n+    #93 = String             #754         // true\n+    #94 = String             #755         // Boolean\n+    #95 = Methodref          #60.#756     // org/json/JSONObject.objectToBigInteger:(Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+    #96 = String             #757         // BigInteger\n+    #97 = Methodref          #60.#758     // org/json/JSONObject.objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+    #98 = String             #759         // BigDecimal\n+    #99 = Class              #760         // java/lang/Number\n+   #100 = Methodref          #99.#761     // java/lang/Number.doubleValue:()D\n+   #101 = Methodref          #136.#762    // java/lang/Double.parseDouble:(Ljava/lang/String;)D\n+   #102 = String             #763         // double\n+   #103 = Methodref          #99.#764     // java/lang/Number.floatValue:()F\n+   #104 = Methodref          #133.#765    // java/lang/Float.parseFloat:(Ljava/lang/String;)F\n+   #105 = String             #766         // float\n+   #106 = Methodref          #60.#767     // org/json/JSONObject.stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+   #107 = String             #481         // number\n+   #108 = Methodref          #99.#768     // java/lang/Number.intValue:()I\n+   #109 = Methodref          #125.#769    // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n+   #110 = String             #770         // int\n+   #111 = String             #771         // JSONObject\n+   #112 = Methodref          #99.#772     // java/lang/Number.longValue:()J\n+   #113 = Methodref          #127.#773    // java/lang/Long.parseLong:(Ljava/lang/String;)J\n+   #114 = String             #774         // long\n+   #115 = Methodref          #60.#775     // org/json/JSONObject.isEmpty:()Z\n+   #116 = Methodref          #60.#776     // org/json/JSONObject.keySet:()Ljava/util/Set;\n+   #117 = Methodref          #60.#737     // org/json/JSONObject.length:()I\n+   #118 = InterfaceMethodref #534.#777    // java/util/Set.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n    #119 = Class              #357         // \"[Ljava/lang/String;\"\n-   #120 = Methodref          #735.#810    // java/lang/Class.getFields:()[Ljava/lang/reflect/Field;\n-   #121 = Methodref          #737.#811    // java/lang/reflect/Field.getName:()Ljava/lang/String;\n-   #122 = String             #426         // string\n-   #123 = InterfaceMethodref #304.#812    // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n-   #124 = Methodref          #60.#813     // org/json/JSONObject.put:(Ljava/lang/String;I)Lorg/json/JSONObject;\n-   #125 = Class              #814         // java/lang/Integer\n-   #126 = Methodref          #125.#800    // java/lang/Integer.intValue:()I\n-   #127 = Class              #815         // java/lang/Long\n-   #128 = Methodref          #127.#804    // java/lang/Long.longValue:()J\n-   #129 = Methodref          #60.#816     // org/json/JSONObject.put:(Ljava/lang/String;J)Lorg/json/JSONObject;\n-   #130 = Class              #817         // java/math/BigInteger\n-   #131 = Fieldref           #130.#818    // java/math/BigInteger.ONE:Ljava/math/BigInteger;\n-   #132 = Methodref          #130.#819    // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #133 = Class              #820         // java/lang/Float\n-   #134 = Methodref          #133.#796    // java/lang/Float.floatValue:()F\n-   #135 = Methodref          #60.#821     // org/json/JSONObject.put:(Ljava/lang/String;F)Lorg/json/JSONObject;\n-   #136 = Class              #822         // java/lang/Double\n-   #137 = Methodref          #136.#793    // java/lang/Double.doubleValue:()D\n-   #138 = Methodref          #60.#823     // org/json/JSONObject.put:(Ljava/lang/String;D)Lorg/json/JSONObject;\n-   #139 = Class              #824         // java/math/BigDecimal\n-   #140 = Fieldref           #139.#825    // java/math/BigDecimal.ONE:Ljava/math/BigDecimal;\n-   #141 = Methodref          #139.#826    // java/math/BigDecimal.add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #142 = String             #827         // Unable to increment [\n-   #143 = String             #828         // ].\n-   #144 = Fieldref           #60.#829     // org/json/JSONObject.NULL:Ljava/lang/Object;\n-   #145 = InterfaceMethodref #304.#808    // java/util/Map.keySet:()Ljava/util/Set;\n-   #146 = InterfaceMethodref #304.#830    // java/util/Map.clear:()V\n-   #147 = InterfaceMethodref #304.#807    // java/util/Map.isEmpty:()Z\n-   #148 = Methodref          #63.#831     // org/json/JSONArray.\"<init>\":(Ljava/util/Collection;)V\n-   #149 = String             #832         // Null pointer\n-   #150 = InterfaceMethodref #304.#738    // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #151 = Methodref          #60.#833     // org/json/JSONObject.optEnum:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n-   #152 = Methodref          #735.#834    // java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z\n-   #153 = Class              #835         // java/lang/Enum\n-   #154 = Methodref          #153.#836    // java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-   #155 = Class              #837         // java/lang/IllegalArgumentException\n-   #156 = Methodref          #60.#838     // org/json/JSONObject.optBoolean:(Ljava/lang/String;Z)Z\n-   #157 = Class              #839         // java/lang/Boolean\n-   #158 = Methodref          #157.#840    // java/lang/Boolean.booleanValue:()Z\n-   #159 = Methodref          #60.#841     // org/json/JSONObject.getBoolean:(Ljava/lang/String;)Z\n-   #160 = Methodref          #60.#842     // org/json/JSONObject.objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;Z)Ljava/math/BigDecimal;\n-   #161 = Methodref          #139.#843    // java/math/BigDecimal.\"<init>\":(Ljava/math/BigInteger;)V\n-   #162 = Methodref          #60.#844     // org/json/JSONObject.numberIsFinite:(Ljava/lang/Number;)Z\n-   #163 = Methodref          #139.#845    // java/math/BigDecimal.\"<init>\":(D)V\n-   #164 = Methodref          #139.#727    // java/math/BigDecimal.\"<init>\":(Ljava/lang/String;)V\n-   #165 = Class              #846         // java/lang/Short\n-   #166 = Class              #847         // java/lang/Byte\n-   #167 = Methodref          #139.#848    // java/math/BigDecimal.\"<init>\":(J)V\n-   #168 = Methodref          #139.#849    // java/math/BigDecimal.toBigInteger:()Ljava/math/BigInteger;\n-   #169 = Methodref          #130.#850    // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-   #170 = Methodref          #60.#851     // org/json/JSONObject.isDecimalNotation:(Ljava/lang/String;)Z\n-   #171 = Methodref          #130.#727    // java/math/BigInteger.\"<init>\":(Ljava/lang/String;)V\n+   #120 = Methodref          #390.#778    // java/lang/Class.getFields:()[Ljava/lang/reflect/Field;\n+   #121 = Methodref          #707.#779    // java/lang/reflect/Field.getName:()Ljava/lang/String;\n+   #122 = String             #419         // string\n+   #123 = InterfaceMethodref #304.#780    // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n+   #124 = Methodref          #60.#781     // org/json/JSONObject.put:(Ljava/lang/String;I)Lorg/json/JSONObject;\n+   #125 = Class              #782         // java/lang/Integer\n+   #126 = Methodref          #125.#768    // java/lang/Integer.intValue:()I\n+   #127 = Class              #783         // java/lang/Long\n+   #128 = Methodref          #127.#772    // java/lang/Long.longValue:()J\n+   #129 = Methodref          #60.#784     // org/json/JSONObject.put:(Ljava/lang/String;J)Lorg/json/JSONObject;\n+   #130 = Class              #785         // java/math/BigInteger\n+   #131 = Fieldref           #130.#786    // java/math/BigInteger.ONE:Ljava/math/BigInteger;\n+   #132 = Methodref          #130.#787    // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #133 = Class              #788         // java/lang/Float\n+   #134 = Methodref          #133.#764    // java/lang/Float.floatValue:()F\n+   #135 = Methodref          #60.#789     // org/json/JSONObject.put:(Ljava/lang/String;F)Lorg/json/JSONObject;\n+   #136 = Class              #790         // java/lang/Double\n+   #137 = Methodref          #136.#761    // java/lang/Double.doubleValue:()D\n+   #138 = Methodref          #60.#791     // org/json/JSONObject.put:(Ljava/lang/String;D)Lorg/json/JSONObject;\n+   #139 = Class              #792         // java/math/BigDecimal\n+   #140 = Fieldref           #139.#793    // java/math/BigDecimal.ONE:Ljava/math/BigDecimal;\n+   #141 = Methodref          #139.#794    // java/math/BigDecimal.add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+   #142 = String             #795         // Unable to increment [\n+   #143 = String             #796         // ].\n+   #144 = Fieldref           #60.#797     // org/json/JSONObject.NULL:Ljava/lang/Object;\n+   #145 = InterfaceMethodref #304.#776    // java/util/Map.keySet:()Ljava/util/Set;\n+   #146 = InterfaceMethodref #304.#798    // java/util/Map.clear:()V\n+   #147 = InterfaceMethodref #304.#775    // java/util/Map.isEmpty:()Z\n+   #148 = Methodref          #63.#799     // org/json/JSONArray.\"<init>\":(Ljava/util/Collection;)V\n+   #149 = String             #800         // Null pointer\n+   #150 = InterfaceMethodref #304.#708    // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #151 = Methodref          #60.#801     // org/json/JSONObject.optEnum:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n+   #152 = Methodref          #390.#802    // java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z\n+   #153 = Class              #803         // java/lang/Enum\n+   #154 = Methodref          #153.#804    // java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+   #155 = Class              #805         // java/lang/IllegalArgumentException\n+   #156 = Methodref          #60.#806     // org/json/JSONObject.optBoolean:(Ljava/lang/String;Z)Z\n+   #157 = Class              #807         // java/lang/Boolean\n+   #158 = Methodref          #157.#808    // java/lang/Boolean.booleanValue:()Z\n+   #159 = Methodref          #60.#809     // org/json/JSONObject.getBoolean:(Ljava/lang/String;)Z\n+   #160 = Methodref          #60.#810     // org/json/JSONObject.objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;Z)Ljava/math/BigDecimal;\n+   #161 = Methodref          #139.#811    // java/math/BigDecimal.\"<init>\":(Ljava/math/BigInteger;)V\n+   #162 = Methodref          #60.#812     // org/json/JSONObject.numberIsFinite:(Ljava/lang/Number;)Z\n+   #163 = Methodref          #139.#813    // java/math/BigDecimal.\"<init>\":(D)V\n+   #164 = Methodref          #139.#698    // java/math/BigDecimal.\"<init>\":(Ljava/lang/String;)V\n+   #165 = Class              #814         // java/lang/Short\n+   #166 = Class              #815         // java/lang/Byte\n+   #167 = Methodref          #139.#816    // java/math/BigDecimal.\"<init>\":(J)V\n+   #168 = Methodref          #139.#817    // java/math/BigDecimal.toBigInteger:()Ljava/math/BigInteger;\n+   #169 = Methodref          #130.#818    // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+   #170 = Methodref          #60.#819     // org/json/JSONObject.isDecimalNotation:(Ljava/lang/String;)Z\n+   #171 = Methodref          #130.#698    // java/math/BigInteger.\"<init>\":(Ljava/lang/String;)V\n    #172 = Double             NaNd\n-   #174 = Methodref          #60.#852     // org/json/JSONObject.optDouble:(Ljava/lang/String;D)D\n-   #175 = Methodref          #60.#853     // org/json/JSONObject.optNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+   #174 = Methodref          #60.#820     // org/json/JSONObject.optDouble:(Ljava/lang/String;D)D\n+   #175 = Methodref          #60.#821     // org/json/JSONObject.optNumber:(Ljava/lang/String;)Ljava/lang/Number;\n    #176 = Float              NaNf\n-   #177 = Methodref          #60.#854     // org/json/JSONObject.optFloat:(Ljava/lang/String;F)F\n-   #178 = Methodref          #60.#855     // org/json/JSONObject.optInt:(Ljava/lang/String;I)I\n-   #179 = Methodref          #60.#856     // org/json/JSONObject.optNumber:(Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;\n-   #180 = Methodref          #60.#857     // org/json/JSONObject.optJSONObject:(Ljava/lang/String;Lorg/json/JSONObject;)Lorg/json/JSONObject;\n-   #181 = Methodref          #60.#858     // org/json/JSONObject.optLong:(Ljava/lang/String;J)J\n-   #182 = String             #859         //\n-   #183 = Methodref          #60.#860     // org/json/JSONObject.optString:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-   #184 = Class              #861         // java/util/IdentityHashMap\n-   #185 = Methodref          #184.#695    // java/util/IdentityHashMap.\"<init>\":()V\n-   #186 = Methodref          #862.#863    // java/util/Collections.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;\n-   #187 = Methodref          #735.#864    // java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;\n-   #188 = Methodref          #735.#865    // java/lang/Class.getMethods:()[Ljava/lang/reflect/Method;\n-   #189 = Methodref          #735.#866    // java/lang/Class.getDeclaredMethods:()[Ljava/lang/reflect/Method;\n-   #190 = Methodref          #867.#868    // java/lang/reflect/Method.getModifiers:()I\n-   #191 = Methodref          #869.#870    // java/lang/reflect/Modifier.isPublic:(I)Z\n-   #192 = Methodref          #869.#871    // java/lang/reflect/Modifier.isStatic:(I)Z\n-   #193 = Methodref          #867.#872    // java/lang/reflect/Method.getParameterTypes:()[Ljava/lang/Class;\n-   #194 = Methodref          #867.#873    // java/lang/reflect/Method.isBridge:()Z\n-   #195 = Methodref          #867.#874    // java/lang/reflect/Method.getReturnType:()Ljava/lang/Class;\n-   #196 = Fieldref           #875.#876    // java/lang/Void.TYPE:Ljava/lang/Class;\n-   #197 = Methodref          #867.#811    // java/lang/reflect/Method.getName:()Ljava/lang/String;\n-   #198 = Methodref          #60.#877     // org/json/JSONObject.isValidMethodName:(Ljava/lang/String;)Z\n-   #199 = Methodref          #60.#878     // org/json/JSONObject.getKeyNameFromMethod:(Ljava/lang/reflect/Method;)Ljava/lang/String;\n-   #200 = Methodref          #56.#807     // java/lang/String.isEmpty:()Z\n-   #201 = Class              #879         // java/lang/Object\n-   #202 = Methodref          #867.#880    // java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n-   #203 = InterfaceMethodref #718.#881    // java/util/Set.contains:(Ljava/lang/Object;)Z\n-   #204 = Methodref          #60.#882     // org/json/JSONObject.recursivelyDefinedObjectException:(Ljava/lang/String;)Lorg/json/JSONException;\n-   #205 = InterfaceMethodref #718.#883    // java/util/Set.add:(Ljava/lang/Object;)Z\n-   #206 = Methodref          #60.#884     // org/json/JSONObject.wrap:(Ljava/lang/Object;Ljava/util/Set;)Ljava/lang/Object;\n-   #207 = InterfaceMethodref #718.#885    // java/util/Set.remove:(Ljava/lang/Object;)Z\n-   #208 = Class              #886         // java/io/Closeable\n-   #209 = InterfaceMethodref #208.#887    // java/io/Closeable.close:()V\n-   #210 = Class              #888         // java/io/IOException\n-   #211 = Class              #889         // java/lang/IllegalAccessException\n-   #212 = Class              #890         // java/lang/reflect/InvocationTargetException\n-   #213 = String             #891         // getClass\n-   #214 = Methodref          #56.#782     // java/lang/String.equals:(Ljava/lang/Object;)Z\n-   #215 = String             #892         // getDeclaringClass\n-   #216 = Class              #893         // org/json/JSONPropertyIgnore\n-   #217 = Methodref          #60.#894     // org/json/JSONObject.getAnnotationDepth:(Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n-   #218 = Class              #895         // org/json/JSONPropertyName\n-   #219 = Methodref          #60.#896     // org/json/JSONObject.getAnnotation:(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n-   #220 = InterfaceMethodref #218.#897    // org/json/JSONPropertyName.value:()Ljava/lang/String;\n-   #221 = String             #427         // get\n-   #222 = Methodref          #56.#898     // java/lang/String.startsWith:(Ljava/lang/String;)Z\n-   #223 = Methodref          #56.#899     // java/lang/String.substring:(I)Ljava/lang/String;\n-   #224 = String             #900         // is\n-   #225 = Methodref          #56.#901     // java/lang/String.charAt:(I)C\n-   #226 = Methodref          #300.#902    // java/lang/Character.isLowerCase:(C)Z\n-   #227 = Fieldref           #903.#904    // java/util/Locale.ROOT:Ljava/util/Locale;\n-   #228 = Methodref          #56.#905     // java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;\n-   #229 = Methodref          #300.#906    // java/lang/Character.isUpperCase:(C)Z\n-   #230 = Methodref          #867.#907    // java/lang/reflect/Method.isAnnotationPresent:(Ljava/lang/Class;)Z\n-   #231 = Methodref          #867.#908    // java/lang/reflect/Method.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n-   #232 = Methodref          #867.#909    // java/lang/reflect/Method.getDeclaringClass:()Ljava/lang/Class;\n-   #233 = Methodref          #735.#910    // java/lang/Class.getSuperclass:()Ljava/lang/Class;\n-   #234 = Methodref          #735.#911    // java/lang/Class.getInterfaces:()[Ljava/lang/Class;\n-   #235 = Methodref          #735.#912    // java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n-   #236 = Class              #913         // java/lang/SecurityException\n-   #237 = Class              #914         // java/lang/NoSuchMethodException\n-   #238 = Methodref          #136.#915    // java/lang/Double.valueOf:(D)Ljava/lang/Double;\n-   #239 = Methodref          #133.#916    // java/lang/Float.valueOf:(F)Ljava/lang/Float;\n-   #240 = Methodref          #125.#917    // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #241 = Methodref          #127.#918    // java/lang/Long.valueOf:(J)Ljava/lang/Long;\n-   #242 = Methodref          #60.#919     // org/json/JSONObject.\"<init>\":(Ljava/util/Map;)V\n-   #243 = Methodref          #60.#920     // org/json/JSONObject.remove:(Ljava/lang/String;)Ljava/lang/Object;\n-   #244 = Class              #921         // org/json/JSONPointer\n-   #245 = Methodref          #244.#727    // org/json/JSONPointer.\"<init>\":(Ljava/lang/String;)V\n-   #246 = Methodref          #60.#922     // org/json/JSONObject.query:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n-   #247 = Methodref          #244.#923    // org/json/JSONPointer.queryFrom:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #248 = Methodref          #60.#924     // org/json/JSONObject.optQuery:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n-   #249 = Class              #925         // org/json/JSONPointerException\n-   #250 = Class              #926         // java/io/StringWriter\n-   #251 = Methodref          #250.#695    // java/io/StringWriter.\"<init>\":()V\n-   #252 = Methodref          #250.#927    // java/io/StringWriter.getBuffer:()Ljava/lang/StringBuffer;\n-   #253 = Methodref          #60.#928     // org/json/JSONObject.quote:(Ljava/lang/String;Ljava/io/Writer;)Ljava/io/Writer;\n-   #254 = String             #929         // \\\"\\\"\n-   #255 = Methodref          #930.#931    // java/io/Writer.write:(Ljava/lang/String;)V\n-   #256 = Methodref          #930.#932    // java/io/Writer.write:(I)V\n-   #257 = String             #933         // \\\\b\n-   #258 = String             #934         // \\\\t\n-   #259 = String             #935         // \\\\n\n-   #260 = String             #936         // \\\\f\n-   #261 = String             #937         // \\\\r\n-   #262 = String             #938         // \\\\u\n-   #263 = Methodref          #125.#939    // java/lang/Integer.toHexString:(I)Ljava/lang/String;\n-   #264 = String             #940         // 0000\n-   #265 = Methodref          #930.#941    // java/io/Writer.write:(Ljava/lang/String;II)V\n-   #266 = InterfaceMethodref #304.#942    // java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #267 = InterfaceMethodref #718.#782    // java/util/Set.equals:(Ljava/lang/Object;)Z\n-   #268 = Methodref          #60.#717     // org/json/JSONObject.entrySet:()Ljava/util/Set;\n-   #269 = Methodref          #60.#943     // org/json/JSONObject.similar:(Ljava/lang/Object;)Z\n-   #270 = Methodref          #63.#943     // org/json/JSONArray.similar:(Ljava/lang/Object;)Z\n-   #271 = Methodref          #60.#944     // org/json/JSONObject.isNumberSimilar:(Ljava/lang/Number;Ljava/lang/Number;)Z\n-   #272 = Class              #945         // java/lang/Throwable\n-   #273 = Class              #946         // java/lang/Comparable\n-   #274 = InterfaceMethodref #273.#947    // java/lang/Comparable.compareTo:(Ljava/lang/Object;)I\n-   #275 = Methodref          #139.#948    // java/math/BigDecimal.compareTo:(Ljava/math/BigDecimal;)I\n-   #276 = Methodref          #136.#949    // java/lang/Double.isInfinite:()Z\n-   #277 = Methodref          #136.#950    // java/lang/Double.isNaN:()Z\n-   #278 = Methodref          #133.#949    // java/lang/Float.isInfinite:()Z\n-   #279 = Methodref          #133.#950    // java/lang/Float.isNaN:()Z\n-   #280 = String             #951         // -0\n-   #281 = Fieldref           #139.#952    // java/math/BigDecimal.ZERO:Ljava/math/BigDecimal;\n+   #177 = Methodref          #60.#822     // org/json/JSONObject.optFloat:(Ljava/lang/String;F)F\n+   #178 = Methodref          #60.#823     // org/json/JSONObject.optInt:(Ljava/lang/String;I)I\n+   #179 = Methodref          #60.#824     // org/json/JSONObject.optNumber:(Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;\n+   #180 = Methodref          #60.#825     // org/json/JSONObject.optJSONObject:(Ljava/lang/String;Lorg/json/JSONObject;)Lorg/json/JSONObject;\n+   #181 = Methodref          #60.#826     // org/json/JSONObject.optLong:(Ljava/lang/String;J)J\n+   #182 = String             #827         //\n+   #183 = Methodref          #60.#828     // org/json/JSONObject.optString:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+   #184 = Class              #829         // java/util/IdentityHashMap\n+   #185 = Methodref          #184.#668    // java/util/IdentityHashMap.\"<init>\":()V\n+   #186 = Methodref          #830.#831    // java/util/Collections.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;\n+   #187 = Methodref          #390.#832    // java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;\n+   #188 = Methodref          #390.#833    // java/lang/Class.getMethods:()[Ljava/lang/reflect/Method;\n+   #189 = Methodref          #390.#834    // java/lang/Class.getDeclaredMethods:()[Ljava/lang/reflect/Method;\n+   #190 = Methodref          #535.#835    // java/lang/reflect/Method.getModifiers:()I\n+   #191 = Methodref          #836.#837    // java/lang/reflect/Modifier.isPublic:(I)Z\n+   #192 = Methodref          #836.#838    // java/lang/reflect/Modifier.isStatic:(I)Z\n+   #193 = Methodref          #535.#839    // java/lang/reflect/Method.getParameterTypes:()[Ljava/lang/Class;\n+   #194 = Methodref          #535.#840    // java/lang/reflect/Method.isBridge:()Z\n+   #195 = Methodref          #535.#841    // java/lang/reflect/Method.getReturnType:()Ljava/lang/Class;\n+   #196 = Fieldref           #842.#843    // java/lang/Void.TYPE:Ljava/lang/Class;\n+   #197 = Methodref          #535.#779    // java/lang/reflect/Method.getName:()Ljava/lang/String;\n+   #198 = Methodref          #60.#844     // org/json/JSONObject.isValidMethodName:(Ljava/lang/String;)Z\n+   #199 = Methodref          #60.#845     // org/json/JSONObject.getKeyNameFromMethod:(Ljava/lang/reflect/Method;)Ljava/lang/String;\n+   #200 = Methodref          #56.#775     // java/lang/String.isEmpty:()Z\n+   #201 = Class              #846         // java/lang/Object\n+   #202 = Methodref          #535.#847    // java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n+   #203 = InterfaceMethodref #534.#848    // java/util/Set.contains:(Ljava/lang/Object;)Z\n+   #204 = Methodref          #60.#849     // org/json/JSONObject.recursivelyDefinedObjectException:(Ljava/lang/String;)Lorg/json/JSONException;\n+   #205 = InterfaceMethodref #534.#850    // java/util/Set.add:(Ljava/lang/Object;)Z\n+   #206 = Methodref          #60.#851     // org/json/JSONObject.wrap:(Ljava/lang/Object;Ljava/util/Set;)Ljava/lang/Object;\n+   #207 = InterfaceMethodref #534.#852    // java/util/Set.remove:(Ljava/lang/Object;)Z\n+   #208 = Class              #853         // java/io/Closeable\n+   #209 = InterfaceMethodref #208.#854    // java/io/Closeable.close:()V\n+   #210 = Class              #855         // java/io/IOException\n+   #211 = Class              #856         // java/lang/IllegalAccessException\n+   #212 = Class              #857         // java/lang/reflect/InvocationTargetException\n+   #213 = String             #858         // getClass\n+   #214 = Methodref          #56.#750     // java/lang/String.equals:(Ljava/lang/Object;)Z\n+   #215 = String             #859         // getDeclaringClass\n+   #216 = Class              #860         // org/json/JSONPropertyIgnore\n+   #217 = Methodref          #60.#861     // org/json/JSONObject.getAnnotationDepth:(Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n+   #218 = Class              #862         // org/json/JSONPropertyName\n+   #219 = Methodref          #60.#863     // org/json/JSONObject.getAnnotation:(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n+   #220 = InterfaceMethodref #218.#864    // org/json/JSONPropertyName.value:()Ljava/lang/String;\n+   #221 = String             #420         // get\n+   #222 = Methodref          #56.#865     // java/lang/String.startsWith:(Ljava/lang/String;)Z\n+   #223 = Methodref          #56.#866     // java/lang/String.substring:(I)Ljava/lang/String;\n+   #224 = String             #867         // is\n+   #225 = Methodref          #56.#868     // java/lang/String.charAt:(I)C\n+   #226 = Methodref          #300.#869    // java/lang/Character.isLowerCase:(C)Z\n+   #227 = Fieldref           #407.#870    // java/util/Locale.ROOT:Ljava/util/Locale;\n+   #228 = Methodref          #56.#871     // java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;\n+   #229 = Methodref          #300.#872    // java/lang/Character.isUpperCase:(C)Z\n+   #230 = Methodref          #535.#873    // java/lang/reflect/Method.isAnnotationPresent:(Ljava/lang/Class;)Z\n+   #231 = Methodref          #535.#874    // java/lang/reflect/Method.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n+   #232 = Methodref          #535.#875    // java/lang/reflect/Method.getDeclaringClass:()Ljava/lang/Class;\n+   #233 = Methodref          #390.#876    // java/lang/Class.getSuperclass:()Ljava/lang/Class;\n+   #234 = Methodref          #390.#877    // java/lang/Class.getInterfaces:()[Ljava/lang/Class;\n+   #235 = Methodref          #390.#878    // java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n+   #236 = Class              #879         // java/lang/SecurityException\n+   #237 = Class              #880         // java/lang/NoSuchMethodException\n+   #238 = Methodref          #136.#881    // java/lang/Double.valueOf:(D)Ljava/lang/Double;\n+   #239 = Methodref          #133.#882    // java/lang/Float.valueOf:(F)Ljava/lang/Float;\n+   #240 = Methodref          #125.#883    // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+   #241 = Methodref          #127.#884    // java/lang/Long.valueOf:(J)Ljava/lang/Long;\n+   #242 = Methodref          #60.#885     // org/json/JSONObject.\"<init>\":(Ljava/util/Map;)V\n+   #243 = Methodref          #60.#886     // org/json/JSONObject.remove:(Ljava/lang/String;)Ljava/lang/Object;\n+   #244 = Class              #887         // org/json/JSONPointer\n+   #245 = Methodref          #244.#698    // org/json/JSONPointer.\"<init>\":(Ljava/lang/String;)V\n+   #246 = Methodref          #60.#888     // org/json/JSONObject.query:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n+   #247 = Methodref          #244.#889    // org/json/JSONPointer.queryFrom:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #248 = Methodref          #60.#890     // org/json/JSONObject.optQuery:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n+   #249 = Class              #891         // org/json/JSONPointerException\n+   #250 = Class              #892         // java/io/StringWriter\n+   #251 = Methodref          #250.#668    // java/io/StringWriter.\"<init>\":()V\n+   #252 = Methodref          #250.#893    // java/io/StringWriter.getBuffer:()Ljava/lang/StringBuffer;\n+   #253 = Methodref          #60.#894     // org/json/JSONObject.quote:(Ljava/lang/String;Ljava/io/Writer;)Ljava/io/Writer;\n+   #254 = String             #895         // \\\"\\\"\n+   #255 = Methodref          #588.#896    // java/io/Writer.write:(Ljava/lang/String;)V\n+   #256 = Methodref          #588.#897    // java/io/Writer.write:(I)V\n+   #257 = String             #898         // \\\\b\n+   #258 = String             #899         // \\\\t\n+   #259 = String             #900         // \\\\n\n+   #260 = String             #901         // \\\\f\n+   #261 = String             #902         // \\\\r\n+   #262 = String             #903         // \\\\u\n+   #263 = Methodref          #125.#904    // java/lang/Integer.toHexString:(I)Ljava/lang/String;\n+   #264 = String             #905         // 0000\n+   #265 = Methodref          #588.#906    // java/io/Writer.write:(Ljava/lang/String;II)V\n+   #266 = InterfaceMethodref #304.#907    // java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #267 = InterfaceMethodref #534.#750    // java/util/Set.equals:(Ljava/lang/Object;)Z\n+   #268 = Methodref          #60.#690     // org/json/JSONObject.entrySet:()Ljava/util/Set;\n+   #269 = Methodref          #60.#908     // org/json/JSONObject.similar:(Ljava/lang/Object;)Z\n+   #270 = Methodref          #63.#908     // org/json/JSONArray.similar:(Ljava/lang/Object;)Z\n+   #271 = Methodref          #60.#909     // org/json/JSONObject.isNumberSimilar:(Ljava/lang/Number;Ljava/lang/Number;)Z\n+   #272 = Class              #910         // java/lang/Throwable\n+   #273 = Class              #911         // java/lang/Comparable\n+   #274 = InterfaceMethodref #273.#912    // java/lang/Comparable.compareTo:(Ljava/lang/Object;)I\n+   #275 = Methodref          #139.#913    // java/math/BigDecimal.compareTo:(Ljava/math/BigDecimal;)I\n+   #276 = Methodref          #136.#914    // java/lang/Double.isInfinite:()Z\n+   #277 = Methodref          #136.#915    // java/lang/Double.isNaN:()Z\n+   #278 = Methodref          #133.#914    // java/lang/Float.isInfinite:()Z\n+   #279 = Methodref          #133.#915    // java/lang/Float.isNaN:()Z\n+   #280 = String             #916         // -0\n+   #281 = Fieldref           #139.#917    // java/math/BigDecimal.ZERO:Ljava/math/BigDecimal;\n    #282 = Double             -0.0d\n-   #284 = Class              #953         // java/lang/NumberFormatException\n-   #285 = Methodref          #136.#954    // java/lang/Double.valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n-   #286 = String             #955         // val [\n-   #287 = String             #956         // ] is not a valid number.\n-   #288 = Methodref          #284.#727    // java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n-   #289 = Methodref          #130.#957    // java/math/BigInteger.bitLength:()I\n-   #290 = Methodref          #130.#800    // java/math/BigInteger.intValue:()I\n-   #291 = Methodref          #130.#804    // java/math/BigInteger.longValue:()J\n-   #292 = String             #958         // JSON does not allow non-finite numbers.\n-   #293 = Methodref          #63.#807     // org/json/JSONArray.isEmpty:()Z\n-   #294 = Methodref          #63.#769     // org/json/JSONArray.length:()I\n-   #295 = Methodref          #63.#959     // org/json/JSONArray.getString:(I)Ljava/lang/String;\n-   #296 = Methodref          #60.#960     // org/json/JSONObject.toString:(I)Ljava/lang/String;\n-   #297 = Methodref          #60.#961     // org/json/JSONObject.write:(Ljava/io/Writer;II)Ljava/io/Writer;\n-   #298 = Methodref          #962.#963    // org/json/JSONWriter.valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n-   #299 = Class              #964         // org/json/JSONString\n-   #300 = Class              #965         // java/lang/Character\n-   #301 = Class              #966         // java/util/Collection\n-   #302 = Methodref          #735.#967    // java/lang/Class.isArray:()Z\n-   #303 = Methodref          #63.#968     // org/json/JSONArray.\"<init>\":(Ljava/lang/Object;)V\n-   #304 = Class              #969         // java/util/Map\n-   #305 = Methodref          #735.#970    // java/lang/Class.getPackage:()Ljava/lang/Package;\n-   #306 = Methodref          #971.#811    // java/lang/Package.getName:()Ljava/lang/String;\n-   #307 = String             #972         // java.\n-   #308 = String             #973         // javax.\n-   #309 = Methodref          #60.#974     // org/json/JSONObject.\"<init>\":(Ljava/lang/Object;Ljava/util/Set;)V\n-   #310 = Methodref          #60.#968     // org/json/JSONObject.\"<init>\":(Ljava/lang/Object;)V\n-   #311 = InterfaceMethodref #299.#975    // org/json/JSONString.toJSONString:()Ljava/lang/String;\n-   #312 = Methodref          #78.#976     // org/json/JSONException.\"<init>\":(Ljava/lang/Throwable;)V\n-   #313 = Methodref          #60.#977     // org/json/JSONObject.numberToString:(Ljava/lang/Number;)Ljava/lang/String;\n-   #314 = Fieldref           #60.#978     // org/json/JSONObject.NUMBER_PATTERN:Ljava/util/regex/Pattern;\n-   #315 = Methodref          #979.#980    // java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-   #316 = Methodref          #981.#982    // java/util/regex/Matcher.matches:()Z\n-   #317 = Methodref          #153.#983    // java/lang/Enum.name:()Ljava/lang/String;\n-   #318 = Methodref          #63.#961     // org/json/JSONArray.write:(Ljava/io/Writer;II)Ljava/io/Writer;\n-   #319 = Methodref          #60.#984     // org/json/JSONObject.writeValue:(Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n-   #320 = String             #985         // Unable to write JSONObject value for key:\n-   #321 = Methodref          #78.#986     // org/json/JSONException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #322 = Methodref          #60.#987     // org/json/JSONObject.indent:(Ljava/io/Writer;I)V\n-   #323 = Methodref          #60.#988     // org/json/JSONObject.toMap:()Ljava/util/Map;\n-   #324 = Methodref          #63.#989     // org/json/JSONArray.toList:()Ljava/util/List;\n-   #325 = String             #990         // ] is not a\n-   #326 = String             #991         //  (\n-   #327 = Methodref          #18.#992     // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #328 = String             #993         // ).\n-   #329 = String             #994         // JavaBean object contains recursively defined member variable of key\n-   #330 = String             #995         // -?(?:0|[1-9]\\\\d*)(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?\n-   #331 = Methodref          #979.#996    // java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n-   #332 = Class              #997         // org/json/JSONObject$Null\n-   #333 = Methodref          #332.#998    // org/json/JSONObject$Null.\"<init>\":(Lorg/json/JSONObject$1;)V\n-   #334 = Class              #999         // org/json/JSONObject$1\n+   #284 = Class              #918         // java/lang/NumberFormatException\n+   #285 = Methodref          #136.#919    // java/lang/Double.valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n+   #286 = String             #920         // val [\n+   #287 = String             #921         // ] is not a valid number.\n+   #288 = Methodref          #284.#698    // java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n+   #289 = Methodref          #130.#922    // java/math/BigInteger.bitLength:()I\n+   #290 = Methodref          #130.#768    // java/math/BigInteger.intValue:()I\n+   #291 = Methodref          #130.#772    // java/math/BigInteger.longValue:()J\n+   #292 = String             #923         // JSON does not allow non-finite numbers.\n+   #293 = Methodref          #63.#775     // org/json/JSONArray.isEmpty:()Z\n+   #294 = Methodref          #63.#737     // org/json/JSONArray.length:()I\n+   #295 = Methodref          #63.#924     // org/json/JSONArray.getString:(I)Ljava/lang/String;\n+   #296 = Methodref          #60.#925     // org/json/JSONObject.toString:(I)Ljava/lang/String;\n+   #297 = Methodref          #60.#926     // org/json/JSONObject.write:(Ljava/io/Writer;II)Ljava/io/Writer;\n+   #298 = Methodref          #927.#928    // org/json/JSONWriter.valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n+   #299 = Class              #929         // org/json/JSONString\n+   #300 = Class              #930         // java/lang/Character\n+   #301 = Class              #931         // java/util/Collection\n+   #302 = Methodref          #390.#932    // java/lang/Class.isArray:()Z\n+   #303 = Methodref          #63.#933     // org/json/JSONArray.\"<init>\":(Ljava/lang/Object;)V\n+   #304 = Class              #934         // java/util/Map\n+   #305 = Methodref          #390.#935    // java/lang/Class.getPackage:()Ljava/lang/Package;\n+   #306 = Methodref          #640.#779    // java/lang/Package.getName:()Ljava/lang/String;\n+   #307 = String             #936         // java.\n+   #308 = String             #937         // javax.\n+   #309 = Methodref          #60.#938     // org/json/JSONObject.\"<init>\":(Ljava/lang/Object;Ljava/util/Set;)V\n+   #310 = Methodref          #60.#933     // org/json/JSONObject.\"<init>\":(Ljava/lang/Object;)V\n+   #311 = InterfaceMethodref #299.#939    // org/json/JSONString.toJSONString:()Ljava/lang/String;\n+   #312 = Methodref          #78.#940     // org/json/JSONException.\"<init>\":(Ljava/lang/Throwable;)V\n+   #313 = Methodref          #60.#941     // org/json/JSONObject.numberToString:(Ljava/lang/Number;)Ljava/lang/String;\n+   #314 = Fieldref           #60.#942     // org/json/JSONObject.NUMBER_PATTERN:Ljava/util/regex/Pattern;\n+   #315 = Methodref          #943.#944    // java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+   #316 = Methodref          #945.#946    // java/util/regex/Matcher.matches:()Z\n+   #317 = Methodref          #153.#947    // java/lang/Enum.name:()Ljava/lang/String;\n+   #318 = Methodref          #63.#926     // org/json/JSONArray.write:(Ljava/io/Writer;II)Ljava/io/Writer;\n+   #319 = Methodref          #60.#948     // org/json/JSONObject.writeValue:(Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n+   #320 = String             #949         // Unable to write JSONObject value for key:\n+   #321 = Methodref          #78.#950     // org/json/JSONException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #322 = Methodref          #60.#951     // org/json/JSONObject.indent:(Ljava/io/Writer;I)V\n+   #323 = Methodref          #60.#952     // org/json/JSONObject.toMap:()Ljava/util/Map;\n+   #324 = Methodref          #63.#953     // org/json/JSONArray.toList:()Ljava/util/List;\n+   #325 = String             #954         // ] is not a\n+   #326 = String             #955         //  (\n+   #327 = Methodref          #18.#956     // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #328 = String             #957         // ).\n+   #329 = String             #958         // JavaBean object contains recursively defined member variable of key\n+   #330 = String             #959         // -?(?:0|[1-9]\\\\d*)(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?\n+   #331 = Methodref          #943.#960    // java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n+   #332 = Class              #961         // org/json/JSONObject$Null\n+   #333 = Methodref          #332.#962    // org/json/JSONObject$Null.\"<init>\":(Lorg/json/JSONObject$1;)V\n+   #334 = Class              #963         // org/json/JSONObject$1\n    #335 = Utf8               InnerClasses\n    #336 = Utf8               Null\n    #337 = Utf8               NUMBER_PATTERN\n    #338 = Utf8               Ljava/util/regex/Pattern;\n    #339 = Utf8               map\n    #340 = Utf8               Ljava/util/Map;\n    #341 = Utf8               Signature\n@@ -360,810 +360,774 @@\n    #352 = Utf8               (Lorg/json/JSONObject;[Ljava/lang/String;)V\n    #353 = Utf8               i\n    #354 = Utf8               I\n    #355 = Utf8               jo\n    #356 = Utf8               names\n    #357 = Utf8               [Ljava/lang/String;\n    #358 = Utf8               StackMapTable\n-   #359 = Class              #755         // org/json/JSONObject\n-   #360 = Class              #701         // java/lang/Exception\n-   #361 = Utf8               (Lorg/json/JSONTokener;)V\n-   #362 = Utf8               value\n-   #363 = Utf8               x\n-   #364 = Utf8               Lorg/json/JSONTokener;\n-   #365 = Utf8               c\n-   #366 = Utf8               C\n-   #367 = Utf8               key\n-   #368 = Utf8               Ljava/lang/String;\n-   #369 = Class              #740         // org/json/JSONTokener\n-   #370 = Class              #751         // java/lang/String\n-   #371 = Utf8               Exceptions\n-   #372 = Utf8               (Ljava/util/Map;)V\n-   #373 = Utf8               e\n-   #374 = Utf8               Entry\n-   #375 = Utf8               Ljava/util/Map$Entry;\n-   #376 = Utf8               m\n-   #377 = Utf8               LocalVariableTypeTable\n-   #378 = Utf8               Ljava/util/Map$Entry<**>;\n-   #379 = Utf8               Ljava/util/Map<**>;\n-   #380 = Class              #969         // java/util/Map\n-   #381 = Class              #1000        // java/util/Iterator\n-   #382 = Class              #723         // java/util/Map$Entry\n-   #383 = Utf8               (Ljava/util/Map<**>;)V\n-   #384 = Utf8               (Ljava/lang/Object;)V\n-   #385 = Utf8               bean\n-   #386 = Utf8               (Ljava/lang/Object;Ljava/util/Set;)V\n-   #387 = Utf8               objectsRecord\n-   #388 = Utf8               Ljava/util/Set;\n-   #389 = Utf8               Ljava/util/Set<Ljava/lang/Object;>;\n-   #390 = Utf8               (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)V\n-   #391 = Utf8               (Ljava/lang/Object;[Ljava/lang/String;)V\n-   #392 = Utf8               name\n-   #393 = Utf8               object\n-   #394 = Utf8               Ljava/lang/Class;\n-   #395 = Utf8               Ljava/lang/Class<*>;\n-   #396 = Class              #879         // java/lang/Object\n-   #397 = Class              #1001        // java/lang/Class\n-   #398 = Utf8               (Ljava/lang/String;)V\n-   #399 = Utf8               source\n-   #400 = Utf8               (Ljava/lang/String;Ljava/util/Locale;)V\n-   #401 = Utf8               segment\n-   #402 = Utf8               nextTarget\n-   #403 = Utf8               path\n-   #404 = Utf8               last\n-   #405 = Utf8               target\n-   #406 = Utf8               baseName\n-   #407 = Utf8               locale\n-   #408 = Utf8               Ljava/util/Locale;\n-   #409 = Utf8               bundle\n-   #410 = Utf8               Ljava/util/ResourceBundle;\n-   #411 = Utf8               keys\n-   #412 = Utf8               Ljava/util/Enumeration;\n-   #413 = Utf8               Ljava/util/Enumeration<Ljava/lang/String;>;\n-   #414 = Class              #1002        // java/util/Locale\n-   #415 = Class              #1003        // java/util/ResourceBundle\n-   #416 = Class              #1004        // java/util/Enumeration\n-   #417 = Utf8               (I)V\n-   #418 = Utf8               initialCapacity\n-   #419 = Utf8               accumulate\n-   #420 = Utf8               (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #421 = Utf8               append\n-   #422 = Utf8               doubleToString\n-   #423 = Utf8               (D)Ljava/lang/String;\n-   #424 = Utf8               d\n-   #425 = Utf8               D\n-   #426 = Utf8               string\n-   #427 = Utf8               get\n-   #428 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n-   #429 = Utf8               getEnum\n-   #430 = Utf8               (Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-   #431 = Utf8               clazz\n-   #432 = Utf8               val\n-   #433 = Utf8               Ljava/lang/Enum;\n-   #434 = Utf8               Ljava/lang/Class<TE;>;\n-   #435 = Utf8               TE;\n-   #436 = Class              #835         // java/lang/Enum\n-   #437 = Utf8               <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;)TE;\n-   #438 = Utf8               getBoolean\n-   #439 = Utf8               (Ljava/lang/String;)Z\n-   #440 = Utf8               getBigInteger\n-   #441 = Utf8               (Ljava/lang/String;)Ljava/math/BigInteger;\n-   #442 = Utf8               ret\n-   #443 = Utf8               Ljava/math/BigInteger;\n-   #444 = Class              #817         // java/math/BigInteger\n-   #445 = Utf8               getBigDecimal\n-   #446 = Utf8               (Ljava/lang/String;)Ljava/math/BigDecimal;\n-   #447 = Utf8               Ljava/math/BigDecimal;\n-   #448 = Class              #824         // java/math/BigDecimal\n-   #449 = Utf8               getDouble\n-   #450 = Utf8               (Ljava/lang/String;)D\n-   #451 = Utf8               Ljava/lang/Exception;\n-   #452 = Utf8               getFloat\n-   #453 = Utf8               (Ljava/lang/String;)F\n-   #454 = Utf8               getNumber\n-   #455 = Utf8               (Ljava/lang/String;)Ljava/lang/Number;\n-   #456 = Utf8               getInt\n-   #457 = Utf8               (Ljava/lang/String;)I\n-   #458 = Utf8               getJSONArray\n-   #459 = Utf8               (Ljava/lang/String;)Lorg/json/JSONArray;\n-   #460 = Utf8               getJSONObject\n-   #461 = Utf8               (Ljava/lang/String;)Lorg/json/JSONObject;\n-   #462 = Utf8               getLong\n-   #463 = Utf8               (Ljava/lang/String;)J\n-   #464 = Utf8               getNames\n-   #465 = Utf8               (Lorg/json/JSONObject;)[Ljava/lang/String;\n-   #466 = Utf8               (Ljava/lang/Object;)[Ljava/lang/String;\n-   #467 = Utf8               klass\n-   #468 = Utf8               fields\n-   #469 = Utf8               [Ljava/lang/reflect/Field;\n-   #470 = Utf8               length\n-   #471 = Class              #469         // \"[Ljava/lang/reflect/Field;\"\n-   #472 = Utf8               getString\n-   #473 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-   #474 = Utf8               has\n-   #475 = Utf8               increment\n-   #476 = Utf8               isNull\n-   #477 = Utf8               ()Ljava/util/Iterator;\n-   #478 = Utf8               ()Ljava/util/Iterator<Ljava/lang/String;>;\n-   #479 = Utf8               keySet\n-   #480 = Utf8               ()Ljava/util/Set;\n-   #481 = Utf8               ()Ljava/util/Set<Ljava/lang/String;>;\n-   #482 = Utf8               entrySet\n-   #483 = Utf8               ()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;>;\n-   #484 = Utf8               ()I\n-   #485 = Utf8               clear\n-   #486 = Utf8               isEmpty\n-   #487 = Utf8               ()Z\n-   #488 = Utf8               ()Lorg/json/JSONArray;\n-   #489 = Utf8               numberToString\n-   #490 = Utf8               (Ljava/lang/Number;)Ljava/lang/String;\n-   #491 = Utf8               number\n-   #492 = Utf8               Ljava/lang/Number;\n-   #493 = Utf8               opt\n-   #494 = Utf8               optEnum\n-   #495 = Utf8               (Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n-   #496 = Utf8               myE\n-   #497 = Utf8               Ljava/lang/IllegalArgumentException;\n-   #498 = Utf8               Ljava/lang/NullPointerException;\n-   #499 = Utf8               defaultValue\n-   #500 = Class              #837         // java/lang/IllegalArgumentException\n-   #501 = Class              #725         // java/lang/NullPointerException\n-   #502 = Utf8               <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;TE;)TE;\n-   #503 = Utf8               optBoolean\n-   #504 = Utf8               (Ljava/lang/String;Z)Z\n-   #505 = Utf8               Z\n-   #506 = Utf8               optBigDecimal\n-   #507 = Utf8               (Ljava/lang/String;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #508 = Utf8               objectToBigDecimal\n-   #509 = Utf8               (Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #510 = Utf8               (Ljava/lang/Object;Ljava/math/BigDecimal;Z)Ljava/math/BigDecimal;\n-   #511 = Utf8               exact\n-   #512 = Utf8               optBigInteger\n-   #513 = Utf8               (Ljava/lang/String;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #514 = Utf8               objectToBigInteger\n-   #515 = Utf8               (Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #516 = Utf8               valStr\n-   #517 = Utf8               optDouble\n-   #518 = Utf8               (Ljava/lang/String;D)D\n-   #519 = Utf8               doubleValue\n-   #520 = Class              #792         // java/lang/Number\n-   #521 = Utf8               optFloat\n-   #522 = Utf8               (Ljava/lang/String;F)F\n-   #523 = Utf8               F\n-   #524 = Utf8               floatValue\n-   #525 = Utf8               optInt\n-   #526 = Utf8               (Ljava/lang/String;I)I\n-   #527 = Utf8               optJSONArray\n-   #528 = Utf8               o\n-   #529 = Class              #758         // org/json/JSONArray\n-   #530 = Utf8               optJSONObject\n-   #531 = Utf8               (Ljava/lang/String;Lorg/json/JSONObject;)Lorg/json/JSONObject;\n-   #532 = Utf8               optLong\n-   #533 = Utf8               (Ljava/lang/String;J)J\n-   #534 = Utf8               J\n-   #535 = Utf8               optNumber\n-   #536 = Utf8               (Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;\n-   #537 = Utf8               optString\n-   #538 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-   #539 = Utf8               populateMap\n-   #540 = Utf8               result\n-   #541 = Utf8               modifiers\n-   #542 = Utf8               method\n-   #543 = Utf8               Ljava/lang/reflect/Method;\n-   #544 = Utf8               includeSuperClass\n-   #545 = Utf8               methods\n-   #546 = Utf8               [Ljava/lang/reflect/Method;\n-   #547 = Class              #546         // \"[Ljava/lang/reflect/Method;\"\n-   #548 = Class              #1005        // java/util/Set\n-   #549 = Class              #1006        // java/lang/reflect/Method\n-   #550 = Class              #888         // java/io/IOException\n-   #551 = Class              #889         // java/lang/IllegalAccessException\n-   #552 = Class              #890         // java/lang/reflect/InvocationTargetException\n-   #553 = Utf8               isValidMethodName\n-   #554 = Utf8               getKeyNameFromMethod\n-   #555 = Utf8               (Ljava/lang/reflect/Method;)Ljava/lang/String;\n-   #556 = Utf8               forcedNameDepth\n-   #557 = Utf8               ignoreDepth\n-   #558 = Utf8               annotation\n-   #559 = Utf8               Lorg/json/JSONPropertyName;\n-   #560 = Class              #895         // org/json/JSONPropertyName\n-   #561 = Utf8               getAnnotation\n-   #562 = Utf8               (Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n-   #563 = Utf8               im\n-   #564 = Utf8               ex\n-   #565 = Utf8               Ljava/lang/SecurityException;\n-   #566 = Utf8               Ljava/lang/NoSuchMethodException;\n-   #567 = Utf8               annotationClass\n-   #568 = Utf8               Ljava/lang/Class<TA;>;\n-   #569 = Class              #1007        // \"[Ljava/lang/Class;\"\n-   #570 = Class              #913         // java/lang/SecurityException\n-   #571 = Class              #914         // java/lang/NoSuchMethodException\n-   #572 = Utf8               <A::Ljava/lang/annotation/Annotation;>(Ljava/lang/reflect/Method;Ljava/lang/Class<TA;>;)TA;\n-   #573 = Utf8               getAnnotationDepth\n-   #574 = Utf8               (Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n-   #575 = Utf8               Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;\n-   #576 = Utf8               (Ljava/lang/reflect/Method;Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)I\n-   #577 = Utf8               put\n-   #578 = Utf8               (Ljava/lang/String;Z)Lorg/json/JSONObject;\n-   #579 = Class              #839         // java/lang/Boolean\n-   #580 = Utf8               (Ljava/lang/String;Ljava/util/Collection;)Lorg/json/JSONObject;\n-   #581 = Utf8               Ljava/util/Collection;\n-   #582 = Utf8               Ljava/util/Collection<*>;\n-   #583 = Utf8               (Ljava/lang/String;Ljava/util/Collection<*>;)Lorg/json/JSONObject;\n-   #584 = Utf8               (Ljava/lang/String;D)Lorg/json/JSONObject;\n-   #585 = Utf8               (Ljava/lang/String;F)Lorg/json/JSONObject;\n-   #586 = Utf8               (Ljava/lang/String;I)Lorg/json/JSONObject;\n-   #587 = Utf8               (Ljava/lang/String;J)Lorg/json/JSONObject;\n-   #588 = Utf8               (Ljava/lang/String;Ljava/util/Map;)Lorg/json/JSONObject;\n-   #589 = Utf8               (Ljava/lang/String;Ljava/util/Map<**>;)Lorg/json/JSONObject;\n-   #590 = Utf8               putOnce\n-   #591 = Utf8               putOpt\n-   #592 = Utf8               query\n-   #593 = Utf8               jsonPointer\n-   #594 = Utf8               (Lorg/json/JSONPointer;)Ljava/lang/Object;\n-   #595 = Utf8               Lorg/json/JSONPointer;\n-   #596 = Utf8               optQuery\n-   #597 = Utf8               Lorg/json/JSONPointerException;\n-   #598 = Class              #925         // org/json/JSONPointerException\n-   #599 = Utf8               quote\n-   #600 = Utf8               ignored\n-   #601 = Utf8               Ljava/io/IOException;\n-   #602 = Utf8               sw\n-   #603 = Utf8               Ljava/io/StringWriter;\n-   #604 = Class              #926         // java/io/StringWriter\n-   #605 = Class              #945         // java/lang/Throwable\n-   #606 = Utf8               (Ljava/lang/String;Ljava/io/Writer;)Ljava/io/Writer;\n-   #607 = Utf8               hhhh\n-   #608 = Utf8               b\n-   #609 = Utf8               w\n-   #610 = Utf8               Ljava/io/Writer;\n-   #611 = Utf8               len\n-   #612 = Class              #1008        // java/io/Writer\n-   #613 = Utf8               remove\n-   #614 = Utf8               similar\n-   #615 = Utf8               (Ljava/lang/Object;)Z\n-   #616 = Utf8               valueThis\n-   #617 = Utf8               valueOther\n-   #618 = Utf8               entry\n-   #619 = Utf8               exception\n-   #620 = Utf8               Ljava/lang/Throwable;\n-   #621 = Utf8               other\n-   #622 = Utf8               Ljava/util/Map$Entry<Ljava/lang/String;*>;\n-   #623 = Utf8               isNumberSimilar\n-   #624 = Utf8               (Ljava/lang/Number;Ljava/lang/Number;)Z\n-   #625 = Utf8               compareTo\n-   #626 = Utf8               l\n-   #627 = Utf8               r\n-   #628 = Utf8               lBigDecimal\n-   #629 = Utf8               rBigDecimal\n-   #630 = Utf8               numberIsFinite\n-   #631 = Utf8               (Ljava/lang/Number;)Z\n-   #632 = Utf8               n\n-   #633 = Utf8               isDecimalNotation\n-   #634 = Utf8               stringToNumber\n-   #635 = Utf8               bd\n-   #636 = Utf8               Ljava/lang/Double;\n-   #637 = Utf8               ignore\n-   #638 = Utf8               Ljava/lang/NumberFormatException;\n-   #639 = Utf8               retryAsDouble\n-   #640 = Utf8               at1\n-   #641 = Utf8               at2\n-   #642 = Utf8               bi\n-   #643 = Utf8               initial\n-   #644 = Class              #953         // java/lang/NumberFormatException\n-   #645 = Class              #822         // java/lang/Double\n-   #646 = Utf8               stringToValue\n-   #647 = Utf8               testValidity\n-   #648 = Utf8               toJSONArray\n-   #649 = Utf8               (Lorg/json/JSONArray;)Lorg/json/JSONArray;\n-   #650 = Utf8               Lorg/json/JSONArray;\n-   #651 = Utf8               ja\n-   #652 = Utf8               toString\n-   #653 = Utf8               ()Ljava/lang/String;\n-   #654 = Utf8               (I)Ljava/lang/String;\n-   #655 = Utf8               indentFactor\n-   #656 = Utf8               valueToString\n-   #657 = Utf8               (Ljava/lang/Object;)Ljava/lang/String;\n-   #658 = Utf8               wrap\n-   #659 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-   #660 = Utf8               (Ljava/lang/Object;Ljava/util/Set;)Ljava/lang/Object;\n-   #661 = Utf8               coll\n-   #662 = Utf8               objectPackage\n-   #663 = Utf8               Ljava/lang/Package;\n-   #664 = Utf8               objectPackageName\n-   #665 = Utf8               Lorg/json/JSONException;\n-   #666 = Class              #1009        // java/lang/Package\n-   #667 = Class              #772         // org/json/JSONException\n-   #668 = Utf8               (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)Ljava/lang/Object;\n-   #669 = Utf8               write\n-   #670 = Utf8               (Ljava/io/Writer;)Ljava/io/Writer;\n-   #671 = Utf8               writer\n-   #672 = Utf8               writeValue\n-   #673 = Utf8               (Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n-   #674 = Utf8               numberAsString\n-   #675 = Utf8               indent\n-   #676 = Utf8               (Ljava/io/Writer;I)V\n-   #677 = Utf8               (Ljava/io/Writer;II)Ljava/io/Writer;\n-   #678 = Utf8               newIndent\n-   #679 = Utf8               needsComma\n-   #680 = Utf8               toMap\n-   #681 = Utf8               ()Ljava/util/Map;\n-   #682 = Utf8               results\n-   #683 = Utf8               Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;\n-   #684 = Utf8               ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;\n-   #685 = Utf8               wrongValueFormatException\n-   #686 = Utf8               (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-   #687 = Utf8               valueType\n-   #688 = Utf8               cause\n-   #689 = Utf8               (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-   #690 = Utf8               recursivelyDefinedObjectException\n-   #691 = Utf8               (Ljava/lang/String;)Lorg/json/JSONException;\n-   #692 = Utf8               <clinit>\n-   #693 = Utf8               SourceFile\n-   #694 = Utf8               JSONObject.java\n-   #695 = NameAndType        #345:#346    // \"<init>\":()V\n-   #696 = Utf8               java/util/HashMap\n-   #697 = NameAndType        #339:#340    // map:Ljava/util/Map;\n-   #698 = NameAndType        #345:#417    // \"<init>\":(I)V\n-   #699 = NameAndType        #493:#428    // opt:(Ljava/lang/String;)Ljava/lang/Object;\n-   #700 = NameAndType        #590:#420    // putOnce:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #701 = Utf8               java/lang/Exception\n-   #702 = NameAndType        #1010:#1011  // nextClean:()C\n-   #703 = Utf8               A JSONObject text must begin with \\'{\\'\n-   #704 = NameAndType        #1012:#691   // syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n-   #705 = Utf8               A JSONObject text must end with \\'}\\'\n-   #706 = NameAndType        #1013:#346   // back:()V\n-   #707 = NameAndType        #1014:#1015  // nextValue:()Ljava/lang/Object;\n-   #708 = NameAndType        #652:#653    // toString:()Ljava/lang/String;\n-   #709 = Utf8               Expected a \\':\\' after a key\n-   #710 = Utf8               java/lang/StringBuilder\n-   #711 = Utf8               Duplicate key \\\"\n-   #712 = NameAndType        #421:#1016   // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #713 = Utf8               \\\"\n-   #714 = NameAndType        #577:#420    // put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #715 = Utf8               Expected a \\',\\' or \\'}\\'\n-   #716 = NameAndType        #1017:#484   // size:()I\n-   #717 = NameAndType        #482:#480    // entrySet:()Ljava/util/Set;\n-   #718 = Class              #1005        // java/util/Set\n-   #719 = NameAndType        #1018:#477   // iterator:()Ljava/util/Iterator;\n-   #720 = Class              #1000        // java/util/Iterator\n-   #721 = NameAndType        #1019:#487   // hasNext:()Z\n-   #722 = NameAndType        #1020:#1015  // next:()Ljava/lang/Object;\n-   #723 = Utf8               java/util/Map$Entry\n-   #724 = NameAndType        #1021:#1015  // getKey:()Ljava/lang/Object;\n-   #725 = Utf8               java/lang/NullPointerException\n-   #726 = Utf8               Null key.\n-   #727 = NameAndType        #345:#398    // \"<init>\":(Ljava/lang/String;)V\n-   #728 = NameAndType        #1022:#1015  // getValue:()Ljava/lang/Object;\n-   #729 = NameAndType        #1023:#657   // valueOf:(Ljava/lang/Object;)Ljava/lang/String;\n-   #730 = NameAndType        #658:#659    // wrap:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #731 = NameAndType        #577:#1024   // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #732 = NameAndType        #539:#384    // populateMap:(Ljava/lang/Object;)V\n-   #733 = NameAndType        #539:#386    // populateMap:(Ljava/lang/Object;Ljava/util/Set;)V\n-   #734 = NameAndType        #891:#1025   // getClass:()Ljava/lang/Class;\n-   #735 = Class              #1001        // java/lang/Class\n-   #736 = NameAndType        #1026:#1027  // getField:(Ljava/lang/String;)Ljava/lang/reflect/Field;\n-   #737 = Class              #1028        // java/lang/reflect/Field\n-   #738 = NameAndType        #427:#659    // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #739 = NameAndType        #591:#420    // putOpt:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #740 = Utf8               org/json/JSONTokener\n-   #741 = NameAndType        #345:#361    // \"<init>\":(Lorg/json/JSONTokener;)V\n-   #742 = Class              #1029        // java/lang/Thread\n-   #743 = NameAndType        #1030:#1031  // currentThread:()Ljava/lang/Thread;\n-   #744 = NameAndType        #1032:#1033  // getContextClassLoader:()Ljava/lang/ClassLoader;\n-   #745 = Class              #1003        // java/util/ResourceBundle\n-   #746 = NameAndType        #1034:#1035  // getBundle:(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;\n-   #747 = NameAndType        #1036:#1037  // getKeys:()Ljava/util/Enumeration;\n-   #748 = Class              #1004        // java/util/Enumeration\n-   #749 = NameAndType        #1038:#487   // hasMoreElements:()Z\n-   #750 = NameAndType        #1039:#1015  // nextElement:()Ljava/lang/Object;\n-   #751 = Utf8               java/lang/String\n-   #752 = Utf8               \\\\.\n-   #753 = NameAndType        #1040:#1041  // split:(Ljava/lang/String;)[Ljava/lang/String;\n-   #754 = NameAndType        #530:#461    // optJSONObject:(Ljava/lang/String;)Lorg/json/JSONObject;\n-   #755 = Utf8               org/json/JSONObject\n-   #756 = NameAndType        #472:#473    // getString:(Ljava/lang/String;)Ljava/lang/String;\n-   #757 = NameAndType        #647:#384    // testValidity:(Ljava/lang/Object;)V\n-   #758 = Utf8               org/json/JSONArray\n-   #759 = NameAndType        #577:#1042   // put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n-   #760 = Utf8               JSONArray\n-   #761 = NameAndType        #685:#689    // wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-   #762 = NameAndType        #1043:#1044  // isInfinite:(D)Z\n-   #763 = NameAndType        #1045:#1044  // isNaN:(D)Z\n-   #764 = Utf8               null\n-   #765 = NameAndType        #652:#423    // toString:(D)Ljava/lang/String;\n-   #766 = NameAndType        #1046:#1047  // indexOf:(I)I\n-   #767 = Utf8               0\n-   #768 = NameAndType        #1048:#439   // endsWith:(Ljava/lang/String;)Z\n-   #769 = NameAndType        #470:#484    // length:()I\n-   #770 = NameAndType        #1049:#1050  // substring:(II)Ljava/lang/String;\n-   #771 = Utf8               .\n-   #772 = Utf8               org/json/JSONException\n-   #773 = Utf8               JSONObject[\n-   #774 = NameAndType        #599:#473    // quote:(Ljava/lang/String;)Ljava/lang/String;\n-   #775 = Utf8               ] not found.\n-   #776 = NameAndType        #494:#430    // optEnum:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-   #777 = Utf8               enum of type\n-   #778 = NameAndType        #1051:#653   // getSimpleName:()Ljava/lang/String;\n-   #779 = NameAndType        #685:#686    // wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-   #780 = NameAndType        #427:#428    // get:(Ljava/lang/String;)Ljava/lang/Object;\n-   #781 = NameAndType        #1052:#1053  // FALSE:Ljava/lang/Boolean;\n-   #782 = NameAndType        #1054:#615   // equals:(Ljava/lang/Object;)Z\n-   #783 = Utf8               false\n-   #784 = NameAndType        #1055:#439   // equalsIgnoreCase:(Ljava/lang/String;)Z\n-   #785 = NameAndType        #1056:#1053  // TRUE:Ljava/lang/Boolean;\n-   #786 = Utf8               true\n-   #787 = Utf8               Boolean\n-   #788 = NameAndType        #514:#515    // objectToBigInteger:(Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #789 = Utf8               BigInteger\n-   #790 = NameAndType        #508:#509    // objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #791 = Utf8               BigDecimal\n-   #792 = Utf8               java/lang/Number\n-   #793 = NameAndType        #519:#1057   // doubleValue:()D\n-   #794 = NameAndType        #1058:#450   // parseDouble:(Ljava/lang/String;)D\n-   #795 = Utf8               double\n-   #796 = NameAndType        #524:#1059   // floatValue:()F\n-   #797 = NameAndType        #1060:#453   // parseFloat:(Ljava/lang/String;)F\n-   #798 = Utf8               float\n-   #799 = NameAndType        #634:#455    // stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n-   #800 = NameAndType        #1061:#484   // intValue:()I\n-   #801 = NameAndType        #1062:#457   // parseInt:(Ljava/lang/String;)I\n-   #802 = Utf8               int\n-   #803 = Utf8               JSONObject\n-   #804 = NameAndType        #1063:#1064  // longValue:()J\n-   #805 = NameAndType        #1065:#463   // parseLong:(Ljava/lang/String;)J\n-   #806 = Utf8               long\n-   #807 = NameAndType        #486:#487    // isEmpty:()Z\n-   #808 = NameAndType        #479:#480    // keySet:()Ljava/util/Set;\n-   #809 = NameAndType        #1066:#1067  // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-   #810 = NameAndType        #1068:#1069  // getFields:()[Ljava/lang/reflect/Field;\n-   #811 = NameAndType        #1070:#653   // getName:()Ljava/lang/String;\n-   #812 = NameAndType        #1071:#615   // containsKey:(Ljava/lang/Object;)Z\n-   #813 = NameAndType        #577:#586    // put:(Ljava/lang/String;I)Lorg/json/JSONObject;\n-   #814 = Utf8               java/lang/Integer\n-   #815 = Utf8               java/lang/Long\n-   #816 = NameAndType        #577:#587    // put:(Ljava/lang/String;J)Lorg/json/JSONObject;\n-   #817 = Utf8               java/math/BigInteger\n-   #818 = NameAndType        #1072:#443   // ONE:Ljava/math/BigInteger;\n-   #819 = NameAndType        #1073:#1074  // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #820 = Utf8               java/lang/Float\n-   #821 = NameAndType        #577:#585    // put:(Ljava/lang/String;F)Lorg/json/JSONObject;\n-   #822 = Utf8               java/lang/Double\n-   #823 = NameAndType        #577:#584    // put:(Ljava/lang/String;D)Lorg/json/JSONObject;\n-   #824 = Utf8               java/math/BigDecimal\n-   #825 = NameAndType        #1072:#447   // ONE:Ljava/math/BigDecimal;\n-   #826 = NameAndType        #1073:#1075  // add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #827 = Utf8               Unable to increment [\n-   #828 = Utf8               ].\n-   #829 = NameAndType        #343:#344    // NULL:Ljava/lang/Object;\n-   #830 = NameAndType        #485:#346    // clear:()V\n-   #831 = NameAndType        #345:#1076   // \"<init>\":(Ljava/util/Collection;)V\n-   #832 = Utf8               Null pointer\n-   #833 = NameAndType        #494:#495    // optEnum:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n-   #834 = NameAndType        #1077:#1078  // isAssignableFrom:(Ljava/lang/Class;)Z\n-   #835 = Utf8               java/lang/Enum\n-   #836 = NameAndType        #1023:#430   // valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n-   #837 = Utf8               java/lang/IllegalArgumentException\n-   #838 = NameAndType        #503:#504    // optBoolean:(Ljava/lang/String;Z)Z\n-   #839 = Utf8               java/lang/Boolean\n-   #840 = NameAndType        #1079:#487   // booleanValue:()Z\n-   #841 = NameAndType        #438:#439    // getBoolean:(Ljava/lang/String;)Z\n-   #842 = NameAndType        #508:#510    // objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;Z)Ljava/math/BigDecimal;\n-   #843 = NameAndType        #345:#1080   // \"<init>\":(Ljava/math/BigInteger;)V\n-   #844 = NameAndType        #630:#631    // numberIsFinite:(Ljava/lang/Number;)Z\n-   #845 = NameAndType        #345:#1081   // \"<init>\":(D)V\n-   #846 = Utf8               java/lang/Short\n-   #847 = Utf8               java/lang/Byte\n-   #848 = NameAndType        #345:#1082   // \"<init>\":(J)V\n-   #849 = NameAndType        #1083:#1084  // toBigInteger:()Ljava/math/BigInteger;\n-   #850 = NameAndType        #1023:#1085  // valueOf:(J)Ljava/math/BigInteger;\n-   #851 = NameAndType        #633:#439    // isDecimalNotation:(Ljava/lang/String;)Z\n-   #852 = NameAndType        #517:#518    // optDouble:(Ljava/lang/String;D)D\n-   #853 = NameAndType        #535:#455    // optNumber:(Ljava/lang/String;)Ljava/lang/Number;\n-   #854 = NameAndType        #521:#522    // optFloat:(Ljava/lang/String;F)F\n-   #855 = NameAndType        #525:#526    // optInt:(Ljava/lang/String;I)I\n-   #856 = NameAndType        #535:#536    // optNumber:(Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;\n-   #857 = NameAndType        #530:#531    // optJSONObject:(Ljava/lang/String;Lorg/json/JSONObject;)Lorg/json/JSONObject;\n-   #858 = NameAndType        #532:#533    // optLong:(Ljava/lang/String;J)J\n-   #859 = Utf8\n-   #860 = NameAndType        #537:#538    // optString:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-   #861 = Utf8               java/util/IdentityHashMap\n-   #862 = Class              #1086        // java/util/Collections\n-   #863 = NameAndType        #1087:#1088  // newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;\n-   #864 = NameAndType        #1089:#1033  // getClassLoader:()Ljava/lang/ClassLoader;\n-   #865 = NameAndType        #1090:#1091  // getMethods:()[Ljava/lang/reflect/Method;\n-   #866 = NameAndType        #1092:#1091  // getDeclaredMethods:()[Ljava/lang/reflect/Method;\n-   #867 = Class              #1006        // java/lang/reflect/Method\n-   #868 = NameAndType        #1093:#484   // getModifiers:()I\n-   #869 = Class              #1094        // java/lang/reflect/Modifier\n-   #870 = NameAndType        #1095:#1096  // isPublic:(I)Z\n-   #871 = NameAndType        #1097:#1096  // isStatic:(I)Z\n-   #872 = NameAndType        #1098:#1099  // getParameterTypes:()[Ljava/lang/Class;\n-   #873 = NameAndType        #1100:#487   // isBridge:()Z\n-   #874 = NameAndType        #1101:#1025  // getReturnType:()Ljava/lang/Class;\n-   #875 = Class              #1102        // java/lang/Void\n-   #876 = NameAndType        #1103:#394   // TYPE:Ljava/lang/Class;\n-   #877 = NameAndType        #553:#439    // isValidMethodName:(Ljava/lang/String;)Z\n-   #878 = NameAndType        #554:#555    // getKeyNameFromMethod:(Ljava/lang/reflect/Method;)Ljava/lang/String;\n-   #879 = Utf8               java/lang/Object\n-   #880 = NameAndType        #1104:#1105  // invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n-   #881 = NameAndType        #1106:#615   // contains:(Ljava/lang/Object;)Z\n-   #882 = NameAndType        #690:#691    // recursivelyDefinedObjectException:(Ljava/lang/String;)Lorg/json/JSONException;\n-   #883 = NameAndType        #1073:#615   // add:(Ljava/lang/Object;)Z\n-   #884 = NameAndType        #658:#660    // wrap:(Ljava/lang/Object;Ljava/util/Set;)Ljava/lang/Object;\n-   #885 = NameAndType        #613:#615    // remove:(Ljava/lang/Object;)Z\n-   #886 = Utf8               java/io/Closeable\n-   #887 = NameAndType        #1107:#346   // close:()V\n-   #888 = Utf8               java/io/IOException\n-   #889 = Utf8               java/lang/IllegalAccessException\n-   #890 = Utf8               java/lang/reflect/InvocationTargetException\n-   #891 = Utf8               getClass\n-   #892 = Utf8               getDeclaringClass\n-   #893 = Utf8               org/json/JSONPropertyIgnore\n-   #894 = NameAndType        #573:#574    // getAnnotationDepth:(Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n-   #895 = Utf8               org/json/JSONPropertyName\n-   #896 = NameAndType        #561:#562    // getAnnotation:(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n-   #897 = NameAndType        #362:#653    // value:()Ljava/lang/String;\n-   #898 = NameAndType        #1108:#439   // startsWith:(Ljava/lang/String;)Z\n-   #899 = NameAndType        #1049:#654   // substring:(I)Ljava/lang/String;\n-   #900 = Utf8               is\n-   #901 = NameAndType        #1109:#1110  // charAt:(I)C\n-   #902 = NameAndType        #1111:#1112  // isLowerCase:(C)Z\n-   #903 = Class              #1002        // java/util/Locale\n-   #904 = NameAndType        #1113:#408   // ROOT:Ljava/util/Locale;\n-   #905 = NameAndType        #1114:#1115  // toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;\n-   #906 = NameAndType        #1116:#1112  // isUpperCase:(C)Z\n-   #907 = NameAndType        #1117:#1078  // isAnnotationPresent:(Ljava/lang/Class;)Z\n-   #908 = NameAndType        #561:#1118   // getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n-   #909 = NameAndType        #892:#1025   // getDeclaringClass:()Ljava/lang/Class;\n-   #910 = NameAndType        #1119:#1025  // getSuperclass:()Ljava/lang/Class;\n-   #911 = NameAndType        #1120:#1099  // getInterfaces:()[Ljava/lang/Class;\n-   #912 = NameAndType        #1121:#1122  // getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n-   #913 = Utf8               java/lang/SecurityException\n-   #914 = Utf8               java/lang/NoSuchMethodException\n-   #915 = NameAndType        #1023:#1123  // valueOf:(D)Ljava/lang/Double;\n-   #916 = NameAndType        #1023:#1124  // valueOf:(F)Ljava/lang/Float;\n-   #917 = NameAndType        #1023:#1125  // valueOf:(I)Ljava/lang/Integer;\n-   #918 = NameAndType        #1023:#1126  // valueOf:(J)Ljava/lang/Long;\n-   #919 = NameAndType        #345:#372    // \"<init>\":(Ljava/util/Map;)V\n-   #920 = NameAndType        #613:#428    // remove:(Ljava/lang/String;)Ljava/lang/Object;\n-   #921 = Utf8               org/json/JSONPointer\n-   #922 = NameAndType        #592:#594    // query:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n-   #923 = NameAndType        #1127:#659   // queryFrom:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #924 = NameAndType        #596:#594    // optQuery:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n-   #925 = Utf8               org/json/JSONPointerException\n-   #926 = Utf8               java/io/StringWriter\n-   #927 = NameAndType        #1128:#1129  // getBuffer:()Ljava/lang/StringBuffer;\n-   #928 = NameAndType        #599:#606    // quote:(Ljava/lang/String;Ljava/io/Writer;)Ljava/io/Writer;\n-   #929 = Utf8               \\\"\\\"\n-   #930 = Class              #1008        // java/io/Writer\n-   #931 = NameAndType        #669:#398    // write:(Ljava/lang/String;)V\n-   #932 = NameAndType        #669:#417    // write:(I)V\n-   #933 = Utf8               \\\\b\n-   #934 = Utf8               \\\\t\n-   #935 = Utf8               \\\\n\n-   #936 = Utf8               \\\\f\n-   #937 = Utf8               \\\\r\n-   #938 = Utf8               \\\\u\n-   #939 = NameAndType        #1130:#654   // toHexString:(I)Ljava/lang/String;\n-   #940 = Utf8               0000\n-   #941 = NameAndType        #669:#1131   // write:(Ljava/lang/String;II)V\n-   #942 = NameAndType        #613:#659    // remove:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #943 = NameAndType        #614:#615    // similar:(Ljava/lang/Object;)Z\n-   #944 = NameAndType        #623:#624    // isNumberSimilar:(Ljava/lang/Number;Ljava/lang/Number;)Z\n-   #945 = Utf8               java/lang/Throwable\n-   #946 = Utf8               java/lang/Comparable\n-   #947 = NameAndType        #625:#1132   // compareTo:(Ljava/lang/Object;)I\n-   #948 = NameAndType        #625:#1133   // compareTo:(Ljava/math/BigDecimal;)I\n-   #949 = NameAndType        #1043:#487   // isInfinite:()Z\n-   #950 = NameAndType        #1045:#487   // isNaN:()Z\n-   #951 = Utf8               -0\n-   #952 = NameAndType        #1134:#447   // ZERO:Ljava/math/BigDecimal;\n-   #953 = Utf8               java/lang/NumberFormatException\n-   #954 = NameAndType        #1023:#1135  // valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n-   #955 = Utf8               val [\n-   #956 = Utf8               ] is not a valid number.\n-   #957 = NameAndType        #1136:#484   // bitLength:()I\n-   #958 = Utf8               JSON does not allow non-finite numbers.\n-   #959 = NameAndType        #472:#654    // getString:(I)Ljava/lang/String;\n-   #960 = NameAndType        #652:#654    // toString:(I)Ljava/lang/String;\n-   #961 = NameAndType        #669:#677    // write:(Ljava/io/Writer;II)Ljava/io/Writer;\n-   #962 = Class              #1137        // org/json/JSONWriter\n-   #963 = NameAndType        #656:#657    // valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n-   #964 = Utf8               org/json/JSONString\n-   #965 = Utf8               java/lang/Character\n-   #966 = Utf8               java/util/Collection\n-   #967 = NameAndType        #1138:#487   // isArray:()Z\n-   #968 = NameAndType        #345:#384    // \"<init>\":(Ljava/lang/Object;)V\n-   #969 = Utf8               java/util/Map\n-   #970 = NameAndType        #1139:#1140  // getPackage:()Ljava/lang/Package;\n-   #971 = Class              #1009        // java/lang/Package\n-   #972 = Utf8               java.\n-   #973 = Utf8               javax.\n-   #974 = NameAndType        #345:#386    // \"<init>\":(Ljava/lang/Object;Ljava/util/Set;)V\n-   #975 = NameAndType        #1141:#653   // toJSONString:()Ljava/lang/String;\n-   #976 = NameAndType        #345:#1142   // \"<init>\":(Ljava/lang/Throwable;)V\n-   #977 = NameAndType        #489:#490    // numberToString:(Ljava/lang/Number;)Ljava/lang/String;\n-   #978 = NameAndType        #337:#338    // NUMBER_PATTERN:Ljava/util/regex/Pattern;\n-   #979 = Class              #1143        // java/util/regex/Pattern\n-   #980 = NameAndType        #1144:#1145  // matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-   #981 = Class              #1146        // java/util/regex/Matcher\n-   #982 = NameAndType        #1147:#487   // matches:()Z\n-   #983 = NameAndType        #392:#653    // name:()Ljava/lang/String;\n-   #984 = NameAndType        #672:#673    // writeValue:(Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n-   #985 = Utf8               Unable to write JSONObject value for key:\n-   #986 = NameAndType        #345:#1148   // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #987 = NameAndType        #675:#676    // indent:(Ljava/io/Writer;I)V\n-   #988 = NameAndType        #680:#681    // toMap:()Ljava/util/Map;\n-   #989 = NameAndType        #1149:#1150  // toList:()Ljava/util/List;\n-   #990 = Utf8               ] is not a\n-   #991 = Utf8                (\n-   #992 = NameAndType        #421:#1151   // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #993 = Utf8               ).\n-   #994 = Utf8               JavaBean object contains recursively defined member variable of key\n-   #995 = Utf8               -?(?:0|[1-9]\\\\d*)(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?\n-   #996 = NameAndType        #1152:#1153  // compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n-   #997 = Utf8               org/json/JSONObject$Null\n-   #998 = NameAndType        #345:#1154   // \"<init>\":(Lorg/json/JSONObject$1;)V\n-   #999 = Utf8               org/json/JSONObject$1\n-  #1000 = Utf8               java/util/Iterator\n-  #1001 = Utf8               java/lang/Class\n-  #1002 = Utf8               java/util/Locale\n-  #1003 = Utf8               java/util/ResourceBundle\n-  #1004 = Utf8               java/util/Enumeration\n-  #1005 = Utf8               java/util/Set\n-  #1006 = Utf8               java/lang/reflect/Method\n-  #1007 = Utf8               [Ljava/lang/Class;\n-  #1008 = Utf8               java/io/Writer\n-  #1009 = Utf8               java/lang/Package\n-  #1010 = Utf8               nextClean\n-  #1011 = Utf8               ()C\n-  #1012 = Utf8               syntaxError\n-  #1013 = Utf8               back\n-  #1014 = Utf8               nextValue\n-  #1015 = Utf8               ()Ljava/lang/Object;\n-  #1016 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #1017 = Utf8               size\n-  #1018 = Utf8               iterator\n-  #1019 = Utf8               hasNext\n-  #1020 = Utf8               next\n-  #1021 = Utf8               getKey\n-  #1022 = Utf8               getValue\n-  #1023 = Utf8               valueOf\n-  #1024 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #1025 = Utf8               ()Ljava/lang/Class;\n-  #1026 = Utf8               getField\n-  #1027 = Utf8               (Ljava/lang/String;)Ljava/lang/reflect/Field;\n-  #1028 = Utf8               java/lang/reflect/Field\n-  #1029 = Utf8               java/lang/Thread\n-  #1030 = Utf8               currentThread\n-  #1031 = Utf8               ()Ljava/lang/Thread;\n-  #1032 = Utf8               getContextClassLoader\n-  #1033 = Utf8               ()Ljava/lang/ClassLoader;\n-  #1034 = Utf8               getBundle\n-  #1035 = Utf8               (Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;\n-  #1036 = Utf8               getKeys\n-  #1037 = Utf8               ()Ljava/util/Enumeration;\n-  #1038 = Utf8               hasMoreElements\n-  #1039 = Utf8               nextElement\n-  #1040 = Utf8               split\n-  #1041 = Utf8               (Ljava/lang/String;)[Ljava/lang/String;\n-  #1042 = Utf8               (Ljava/lang/Object;)Lorg/json/JSONArray;\n-  #1043 = Utf8               isInfinite\n-  #1044 = Utf8               (D)Z\n-  #1045 = Utf8               isNaN\n-  #1046 = Utf8               indexOf\n-  #1047 = Utf8               (I)I\n-  #1048 = Utf8               endsWith\n-  #1049 = Utf8               substring\n-  #1050 = Utf8               (II)Ljava/lang/String;\n-  #1051 = Utf8               getSimpleName\n-  #1052 = Utf8               FALSE\n-  #1053 = Utf8               Ljava/lang/Boolean;\n-  #1054 = Utf8               equals\n-  #1055 = Utf8               equalsIgnoreCase\n-  #1056 = Utf8               TRUE\n-  #1057 = Utf8               ()D\n-  #1058 = Utf8               parseDouble\n-  #1059 = Utf8               ()F\n-  #1060 = Utf8               parseFloat\n-  #1061 = Utf8               intValue\n-  #1062 = Utf8               parseInt\n-  #1063 = Utf8               longValue\n-  #1064 = Utf8               ()J\n-  #1065 = Utf8               parseLong\n-  #1066 = Utf8               toArray\n-  #1067 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #1068 = Utf8               getFields\n-  #1069 = Utf8               ()[Ljava/lang/reflect/Field;\n-  #1070 = Utf8               getName\n-  #1071 = Utf8               containsKey\n-  #1072 = Utf8               ONE\n-  #1073 = Utf8               add\n-  #1074 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #1075 = Utf8               (Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-  #1076 = Utf8               (Ljava/util/Collection;)V\n-  #1077 = Utf8               isAssignableFrom\n-  #1078 = Utf8               (Ljava/lang/Class;)Z\n-  #1079 = Utf8               booleanValue\n-  #1080 = Utf8               (Ljava/math/BigInteger;)V\n-  #1081 = Utf8               (D)V\n-  #1082 = Utf8               (J)V\n-  #1083 = Utf8               toBigInteger\n-  #1084 = Utf8               ()Ljava/math/BigInteger;\n-  #1085 = Utf8               (J)Ljava/math/BigInteger;\n-  #1086 = Utf8               java/util/Collections\n-  #1087 = Utf8               newSetFromMap\n-  #1088 = Utf8               (Ljava/util/Map;)Ljava/util/Set;\n-  #1089 = Utf8               getClassLoader\n-  #1090 = Utf8               getMethods\n-  #1091 = Utf8               ()[Ljava/lang/reflect/Method;\n-  #1092 = Utf8               getDeclaredMethods\n-  #1093 = Utf8               getModifiers\n-  #1094 = Utf8               java/lang/reflect/Modifier\n-  #1095 = Utf8               isPublic\n-  #1096 = Utf8               (I)Z\n-  #1097 = Utf8               isStatic\n-  #1098 = Utf8               getParameterTypes\n-  #1099 = Utf8               ()[Ljava/lang/Class;\n-  #1100 = Utf8               isBridge\n-  #1101 = Utf8               getReturnType\n-  #1102 = Utf8               java/lang/Void\n-  #1103 = Utf8               TYPE\n-  #1104 = Utf8               invoke\n-  #1105 = Utf8               (Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n-  #1106 = Utf8               contains\n-  #1107 = Utf8               close\n-  #1108 = Utf8               startsWith\n-  #1109 = Utf8               charAt\n-  #1110 = Utf8               (I)C\n-  #1111 = Utf8               isLowerCase\n-  #1112 = Utf8               (C)Z\n-  #1113 = Utf8               ROOT\n-  #1114 = Utf8               toLowerCase\n-  #1115 = Utf8               (Ljava/util/Locale;)Ljava/lang/String;\n-  #1116 = Utf8               isUpperCase\n-  #1117 = Utf8               isAnnotationPresent\n-  #1118 = Utf8               (Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n-  #1119 = Utf8               getSuperclass\n-  #1120 = Utf8               getInterfaces\n-  #1121 = Utf8               getMethod\n-  #1122 = Utf8               (Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n-  #1123 = Utf8               (D)Ljava/lang/Double;\n-  #1124 = Utf8               (F)Ljava/lang/Float;\n-  #1125 = Utf8               (I)Ljava/lang/Integer;\n-  #1126 = Utf8               (J)Ljava/lang/Long;\n-  #1127 = Utf8               queryFrom\n-  #1128 = Utf8               getBuffer\n-  #1129 = Utf8               ()Ljava/lang/StringBuffer;\n-  #1130 = Utf8               toHexString\n-  #1131 = Utf8               (Ljava/lang/String;II)V\n-  #1132 = Utf8               (Ljava/lang/Object;)I\n-  #1133 = Utf8               (Ljava/math/BigDecimal;)I\n-  #1134 = Utf8               ZERO\n-  #1135 = Utf8               (Ljava/lang/String;)Ljava/lang/Double;\n-  #1136 = Utf8               bitLength\n-  #1137 = Utf8               org/json/JSONWriter\n-  #1138 = Utf8               isArray\n-  #1139 = Utf8               getPackage\n-  #1140 = Utf8               ()Ljava/lang/Package;\n-  #1141 = Utf8               toJSONString\n-  #1142 = Utf8               (Ljava/lang/Throwable;)V\n-  #1143 = Utf8               java/util/regex/Pattern\n-  #1144 = Utf8               matcher\n-  #1145 = Utf8               (Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-  #1146 = Utf8               java/util/regex/Matcher\n-  #1147 = Utf8               matches\n-  #1148 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #1149 = Utf8               toList\n-  #1150 = Utf8               ()Ljava/util/List;\n-  #1151 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #1152 = Utf8               compile\n-  #1153 = Utf8               (Ljava/lang/String;)Ljava/util/regex/Pattern;\n-  #1154 = Utf8               (Lorg/json/JSONObject$1;)V\n+   #359 = Utf8               (Lorg/json/JSONTokener;)V\n+   #360 = Utf8               value\n+   #361 = Utf8               x\n+   #362 = Utf8               Lorg/json/JSONTokener;\n+   #363 = Utf8               c\n+   #364 = Utf8               C\n+   #365 = Utf8               key\n+   #366 = Utf8               Ljava/lang/String;\n+   #367 = Utf8               Exceptions\n+   #368 = Utf8               (Ljava/util/Map;)V\n+   #369 = Utf8               e\n+   #370 = Utf8               Entry\n+   #371 = Utf8               Ljava/util/Map$Entry;\n+   #372 = Utf8               m\n+   #373 = Utf8               LocalVariableTypeTable\n+   #374 = Utf8               Ljava/util/Map$Entry<**>;\n+   #375 = Utf8               Ljava/util/Map<**>;\n+   #376 = Class              #964         // java/util/Iterator\n+   #377 = Utf8               (Ljava/util/Map<**>;)V\n+   #378 = Utf8               (Ljava/lang/Object;)V\n+   #379 = Utf8               bean\n+   #380 = Utf8               (Ljava/lang/Object;Ljava/util/Set;)V\n+   #381 = Utf8               objectsRecord\n+   #382 = Utf8               Ljava/util/Set;\n+   #383 = Utf8               Ljava/util/Set<Ljava/lang/Object;>;\n+   #384 = Utf8               (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)V\n+   #385 = Utf8               (Ljava/lang/Object;[Ljava/lang/String;)V\n+   #386 = Utf8               name\n+   #387 = Utf8               object\n+   #388 = Utf8               Ljava/lang/Class;\n+   #389 = Utf8               Ljava/lang/Class<*>;\n+   #390 = Class              #965         // java/lang/Class\n+   #391 = Utf8               (Ljava/lang/String;)V\n+   #392 = Utf8               source\n+   #393 = Utf8               (Ljava/lang/String;Ljava/util/Locale;)V\n+   #394 = Utf8               segment\n+   #395 = Utf8               nextTarget\n+   #396 = Utf8               path\n+   #397 = Utf8               last\n+   #398 = Utf8               target\n+   #399 = Utf8               baseName\n+   #400 = Utf8               locale\n+   #401 = Utf8               Ljava/util/Locale;\n+   #402 = Utf8               bundle\n+   #403 = Utf8               Ljava/util/ResourceBundle;\n+   #404 = Utf8               keys\n+   #405 = Utf8               Ljava/util/Enumeration;\n+   #406 = Utf8               Ljava/util/Enumeration<Ljava/lang/String;>;\n+   #407 = Class              #966         // java/util/Locale\n+   #408 = Class              #967         // java/util/ResourceBundle\n+   #409 = Class              #968         // java/util/Enumeration\n+   #410 = Utf8               (I)V\n+   #411 = Utf8               initialCapacity\n+   #412 = Utf8               accumulate\n+   #413 = Utf8               (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #414 = Utf8               append\n+   #415 = Utf8               doubleToString\n+   #416 = Utf8               (D)Ljava/lang/String;\n+   #417 = Utf8               d\n+   #418 = Utf8               D\n+   #419 = Utf8               string\n+   #420 = Utf8               get\n+   #421 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n+   #422 = Utf8               getEnum\n+   #423 = Utf8               (Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+   #424 = Utf8               clazz\n+   #425 = Utf8               val\n+   #426 = Utf8               Ljava/lang/Enum;\n+   #427 = Utf8               Ljava/lang/Class<TE;>;\n+   #428 = Utf8               TE;\n+   #429 = Utf8               <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;)TE;\n+   #430 = Utf8               getBoolean\n+   #431 = Utf8               (Ljava/lang/String;)Z\n+   #432 = Utf8               getBigInteger\n+   #433 = Utf8               (Ljava/lang/String;)Ljava/math/BigInteger;\n+   #434 = Utf8               ret\n+   #435 = Utf8               Ljava/math/BigInteger;\n+   #436 = Utf8               getBigDecimal\n+   #437 = Utf8               (Ljava/lang/String;)Ljava/math/BigDecimal;\n+   #438 = Utf8               Ljava/math/BigDecimal;\n+   #439 = Utf8               getDouble\n+   #440 = Utf8               (Ljava/lang/String;)D\n+   #441 = Utf8               Ljava/lang/Exception;\n+   #442 = Utf8               getFloat\n+   #443 = Utf8               (Ljava/lang/String;)F\n+   #444 = Utf8               getNumber\n+   #445 = Utf8               (Ljava/lang/String;)Ljava/lang/Number;\n+   #446 = Utf8               getInt\n+   #447 = Utf8               (Ljava/lang/String;)I\n+   #448 = Utf8               getJSONArray\n+   #449 = Utf8               (Ljava/lang/String;)Lorg/json/JSONArray;\n+   #450 = Utf8               getJSONObject\n+   #451 = Utf8               (Ljava/lang/String;)Lorg/json/JSONObject;\n+   #452 = Utf8               getLong\n+   #453 = Utf8               (Ljava/lang/String;)J\n+   #454 = Utf8               getNames\n+   #455 = Utf8               (Lorg/json/JSONObject;)[Ljava/lang/String;\n+   #456 = Utf8               (Ljava/lang/Object;)[Ljava/lang/String;\n+   #457 = Utf8               klass\n+   #458 = Utf8               fields\n+   #459 = Utf8               [Ljava/lang/reflect/Field;\n+   #460 = Utf8               length\n+   #461 = Class              #459         // \"[Ljava/lang/reflect/Field;\"\n+   #462 = Utf8               getString\n+   #463 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+   #464 = Utf8               has\n+   #465 = Utf8               increment\n+   #466 = Utf8               isNull\n+   #467 = Utf8               ()Ljava/util/Iterator;\n+   #468 = Utf8               ()Ljava/util/Iterator<Ljava/lang/String;>;\n+   #469 = Utf8               keySet\n+   #470 = Utf8               ()Ljava/util/Set;\n+   #471 = Utf8               ()Ljava/util/Set<Ljava/lang/String;>;\n+   #472 = Utf8               entrySet\n+   #473 = Utf8               ()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;>;\n+   #474 = Utf8               ()I\n+   #475 = Utf8               clear\n+   #476 = Utf8               isEmpty\n+   #477 = Utf8               ()Z\n+   #478 = Utf8               ()Lorg/json/JSONArray;\n+   #479 = Utf8               numberToString\n+   #480 = Utf8               (Ljava/lang/Number;)Ljava/lang/String;\n+   #481 = Utf8               number\n+   #482 = Utf8               Ljava/lang/Number;\n+   #483 = Utf8               opt\n+   #484 = Utf8               optEnum\n+   #485 = Utf8               (Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n+   #486 = Utf8               myE\n+   #487 = Utf8               Ljava/lang/IllegalArgumentException;\n+   #488 = Utf8               Ljava/lang/NullPointerException;\n+   #489 = Utf8               defaultValue\n+   #490 = Utf8               <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;TE;)TE;\n+   #491 = Utf8               optBoolean\n+   #492 = Utf8               (Ljava/lang/String;Z)Z\n+   #493 = Utf8               Z\n+   #494 = Utf8               optBigDecimal\n+   #495 = Utf8               (Ljava/lang/String;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+   #496 = Utf8               objectToBigDecimal\n+   #497 = Utf8               (Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+   #498 = Utf8               (Ljava/lang/Object;Ljava/math/BigDecimal;Z)Ljava/math/BigDecimal;\n+   #499 = Utf8               exact\n+   #500 = Utf8               optBigInteger\n+   #501 = Utf8               (Ljava/lang/String;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #502 = Utf8               objectToBigInteger\n+   #503 = Utf8               (Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #504 = Utf8               valStr\n+   #505 = Utf8               optDouble\n+   #506 = Utf8               (Ljava/lang/String;D)D\n+   #507 = Utf8               doubleValue\n+   #508 = Utf8               optFloat\n+   #509 = Utf8               (Ljava/lang/String;F)F\n+   #510 = Utf8               F\n+   #511 = Utf8               floatValue\n+   #512 = Utf8               optInt\n+   #513 = Utf8               (Ljava/lang/String;I)I\n+   #514 = Utf8               optJSONArray\n+   #515 = Utf8               o\n+   #516 = Utf8               optJSONObject\n+   #517 = Utf8               (Ljava/lang/String;Lorg/json/JSONObject;)Lorg/json/JSONObject;\n+   #518 = Utf8               optLong\n+   #519 = Utf8               (Ljava/lang/String;J)J\n+   #520 = Utf8               J\n+   #521 = Utf8               optNumber\n+   #522 = Utf8               (Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;\n+   #523 = Utf8               optString\n+   #524 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+   #525 = Utf8               populateMap\n+   #526 = Utf8               result\n+   #527 = Utf8               modifiers\n+   #528 = Utf8               method\n+   #529 = Utf8               Ljava/lang/reflect/Method;\n+   #530 = Utf8               includeSuperClass\n+   #531 = Utf8               methods\n+   #532 = Utf8               [Ljava/lang/reflect/Method;\n+   #533 = Class              #532         // \"[Ljava/lang/reflect/Method;\"\n+   #534 = Class              #969         // java/util/Set\n+   #535 = Class              #970         // java/lang/reflect/Method\n+   #536 = Utf8               isValidMethodName\n+   #537 = Utf8               getKeyNameFromMethod\n+   #538 = Utf8               (Ljava/lang/reflect/Method;)Ljava/lang/String;\n+   #539 = Utf8               forcedNameDepth\n+   #540 = Utf8               ignoreDepth\n+   #541 = Utf8               annotation\n+   #542 = Utf8               Lorg/json/JSONPropertyName;\n+   #543 = Utf8               getAnnotation\n+   #544 = Utf8               (Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n+   #545 = Utf8               im\n+   #546 = Utf8               ex\n+   #547 = Utf8               Ljava/lang/SecurityException;\n+   #548 = Utf8               Ljava/lang/NoSuchMethodException;\n+   #549 = Utf8               annotationClass\n+   #550 = Utf8               Ljava/lang/Class<TA;>;\n+   #551 = Class              #971         // \"[Ljava/lang/Class;\"\n+   #552 = Utf8               <A::Ljava/lang/annotation/Annotation;>(Ljava/lang/reflect/Method;Ljava/lang/Class<TA;>;)TA;\n+   #553 = Utf8               getAnnotationDepth\n+   #554 = Utf8               (Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n+   #555 = Utf8               Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;\n+   #556 = Utf8               (Ljava/lang/reflect/Method;Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)I\n+   #557 = Utf8               put\n+   #558 = Utf8               (Ljava/lang/String;Z)Lorg/json/JSONObject;\n+   #559 = Utf8               (Ljava/lang/String;Ljava/util/Collection;)Lorg/json/JSONObject;\n+   #560 = Utf8               Ljava/util/Collection;\n+   #561 = Utf8               Ljava/util/Collection<*>;\n+   #562 = Utf8               (Ljava/lang/String;Ljava/util/Collection<*>;)Lorg/json/JSONObject;\n+   #563 = Utf8               (Ljava/lang/String;D)Lorg/json/JSONObject;\n+   #564 = Utf8               (Ljava/lang/String;F)Lorg/json/JSONObject;\n+   #565 = Utf8               (Ljava/lang/String;I)Lorg/json/JSONObject;\n+   #566 = Utf8               (Ljava/lang/String;J)Lorg/json/JSONObject;\n+   #567 = Utf8               (Ljava/lang/String;Ljava/util/Map;)Lorg/json/JSONObject;\n+   #568 = Utf8               (Ljava/lang/String;Ljava/util/Map<**>;)Lorg/json/JSONObject;\n+   #569 = Utf8               putOnce\n+   #570 = Utf8               putOpt\n+   #571 = Utf8               query\n+   #572 = Utf8               jsonPointer\n+   #573 = Utf8               (Lorg/json/JSONPointer;)Ljava/lang/Object;\n+   #574 = Utf8               Lorg/json/JSONPointer;\n+   #575 = Utf8               optQuery\n+   #576 = Utf8               Lorg/json/JSONPointerException;\n+   #577 = Utf8               quote\n+   #578 = Utf8               ignored\n+   #579 = Utf8               Ljava/io/IOException;\n+   #580 = Utf8               sw\n+   #581 = Utf8               Ljava/io/StringWriter;\n+   #582 = Utf8               (Ljava/lang/String;Ljava/io/Writer;)Ljava/io/Writer;\n+   #583 = Utf8               hhhh\n+   #584 = Utf8               b\n+   #585 = Utf8               w\n+   #586 = Utf8               Ljava/io/Writer;\n+   #587 = Utf8               len\n+   #588 = Class              #972         // java/io/Writer\n+   #589 = Utf8               remove\n+   #590 = Utf8               similar\n+   #591 = Utf8               (Ljava/lang/Object;)Z\n+   #592 = Utf8               valueThis\n+   #593 = Utf8               valueOther\n+   #594 = Utf8               entry\n+   #595 = Utf8               exception\n+   #596 = Utf8               Ljava/lang/Throwable;\n+   #597 = Utf8               other\n+   #598 = Utf8               Ljava/util/Map$Entry<Ljava/lang/String;*>;\n+   #599 = Utf8               isNumberSimilar\n+   #600 = Utf8               (Ljava/lang/Number;Ljava/lang/Number;)Z\n+   #601 = Utf8               compareTo\n+   #602 = Utf8               l\n+   #603 = Utf8               r\n+   #604 = Utf8               lBigDecimal\n+   #605 = Utf8               rBigDecimal\n+   #606 = Utf8               numberIsFinite\n+   #607 = Utf8               (Ljava/lang/Number;)Z\n+   #608 = Utf8               n\n+   #609 = Utf8               isDecimalNotation\n+   #610 = Utf8               stringToNumber\n+   #611 = Utf8               bd\n+   #612 = Utf8               Ljava/lang/Double;\n+   #613 = Utf8               ignore\n+   #614 = Utf8               Ljava/lang/NumberFormatException;\n+   #615 = Utf8               retryAsDouble\n+   #616 = Utf8               at1\n+   #617 = Utf8               at2\n+   #618 = Utf8               bi\n+   #619 = Utf8               initial\n+   #620 = Utf8               stringToValue\n+   #621 = Utf8               testValidity\n+   #622 = Utf8               toJSONArray\n+   #623 = Utf8               (Lorg/json/JSONArray;)Lorg/json/JSONArray;\n+   #624 = Utf8               Lorg/json/JSONArray;\n+   #625 = Utf8               ja\n+   #626 = Utf8               toString\n+   #627 = Utf8               ()Ljava/lang/String;\n+   #628 = Utf8               (I)Ljava/lang/String;\n+   #629 = Utf8               indentFactor\n+   #630 = Utf8               valueToString\n+   #631 = Utf8               (Ljava/lang/Object;)Ljava/lang/String;\n+   #632 = Utf8               wrap\n+   #633 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+   #634 = Utf8               (Ljava/lang/Object;Ljava/util/Set;)Ljava/lang/Object;\n+   #635 = Utf8               coll\n+   #636 = Utf8               objectPackage\n+   #637 = Utf8               Ljava/lang/Package;\n+   #638 = Utf8               objectPackageName\n+   #639 = Utf8               Lorg/json/JSONException;\n+   #640 = Class              #973         // java/lang/Package\n+   #641 = Utf8               (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)Ljava/lang/Object;\n+   #642 = Utf8               write\n+   #643 = Utf8               (Ljava/io/Writer;)Ljava/io/Writer;\n+   #644 = Utf8               writer\n+   #645 = Utf8               writeValue\n+   #646 = Utf8               (Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n+   #647 = Utf8               numberAsString\n+   #648 = Utf8               indent\n+   #649 = Utf8               (Ljava/io/Writer;I)V\n+   #650 = Utf8               (Ljava/io/Writer;II)Ljava/io/Writer;\n+   #651 = Utf8               newIndent\n+   #652 = Utf8               needsComma\n+   #653 = Utf8               toMap\n+   #654 = Utf8               ()Ljava/util/Map;\n+   #655 = Utf8               results\n+   #656 = Utf8               Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;\n+   #657 = Utf8               ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;\n+   #658 = Utf8               wrongValueFormatException\n+   #659 = Utf8               (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+   #660 = Utf8               valueType\n+   #661 = Utf8               cause\n+   #662 = Utf8               (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+   #663 = Utf8               recursivelyDefinedObjectException\n+   #664 = Utf8               (Ljava/lang/String;)Lorg/json/JSONException;\n+   #665 = Utf8               <clinit>\n+   #666 = Utf8               SourceFile\n+   #667 = Utf8               JSONObject.java\n+   #668 = NameAndType        #345:#346    // \"<init>\":()V\n+   #669 = Utf8               java/util/HashMap\n+   #670 = NameAndType        #339:#340    // map:Ljava/util/Map;\n+   #671 = NameAndType        #345:#410    // \"<init>\":(I)V\n+   #672 = NameAndType        #483:#421    // opt:(Ljava/lang/String;)Ljava/lang/Object;\n+   #673 = NameAndType        #569:#413    // putOnce:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #674 = Utf8               java/lang/Exception\n+   #675 = NameAndType        #974:#975    // nextClean:()C\n+   #676 = Utf8               A JSONObject text must begin with \\'{\\'\n+   #677 = NameAndType        #976:#664    // syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n+   #678 = Utf8               A JSONObject text must end with \\'}\\'\n+   #679 = NameAndType        #977:#346    // back:()V\n+   #680 = NameAndType        #978:#979    // nextValue:()Ljava/lang/Object;\n+   #681 = NameAndType        #626:#627    // toString:()Ljava/lang/String;\n+   #682 = Utf8               Expected a \\':\\' after a key\n+   #683 = Utf8               java/lang/StringBuilder\n+   #684 = Utf8               Duplicate key \\\"\n+   #685 = NameAndType        #414:#980    // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #686 = Utf8               \\\"\n+   #687 = NameAndType        #557:#413    // put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #688 = Utf8               Expected a \\',\\' or \\'}\\'\n+   #689 = NameAndType        #981:#474    // size:()I\n+   #690 = NameAndType        #472:#470    // entrySet:()Ljava/util/Set;\n+   #691 = NameAndType        #982:#467    // iterator:()Ljava/util/Iterator;\n+   #692 = NameAndType        #983:#477    // hasNext:()Z\n+   #693 = NameAndType        #984:#979    // next:()Ljava/lang/Object;\n+   #694 = Utf8               java/util/Map$Entry\n+   #695 = NameAndType        #985:#979    // getKey:()Ljava/lang/Object;\n+   #696 = Utf8               java/lang/NullPointerException\n+   #697 = Utf8               Null key.\n+   #698 = NameAndType        #345:#391    // \"<init>\":(Ljava/lang/String;)V\n+   #699 = NameAndType        #986:#979    // getValue:()Ljava/lang/Object;\n+   #700 = NameAndType        #987:#631    // valueOf:(Ljava/lang/Object;)Ljava/lang/String;\n+   #701 = NameAndType        #632:#633    // wrap:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #702 = NameAndType        #557:#988    // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #703 = NameAndType        #525:#378    // populateMap:(Ljava/lang/Object;)V\n+   #704 = NameAndType        #525:#380    // populateMap:(Ljava/lang/Object;Ljava/util/Set;)V\n+   #705 = NameAndType        #858:#989    // getClass:()Ljava/lang/Class;\n+   #706 = NameAndType        #990:#991    // getField:(Ljava/lang/String;)Ljava/lang/reflect/Field;\n+   #707 = Class              #992         // java/lang/reflect/Field\n+   #708 = NameAndType        #420:#633    // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #709 = NameAndType        #570:#413    // putOpt:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #710 = Utf8               org/json/JSONTokener\n+   #711 = NameAndType        #345:#359    // \"<init>\":(Lorg/json/JSONTokener;)V\n+   #712 = Class              #993         // java/lang/Thread\n+   #713 = NameAndType        #994:#995    // currentThread:()Ljava/lang/Thread;\n+   #714 = NameAndType        #996:#997    // getContextClassLoader:()Ljava/lang/ClassLoader;\n+   #715 = NameAndType        #998:#999    // getBundle:(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;\n+   #716 = NameAndType        #1000:#1001  // getKeys:()Ljava/util/Enumeration;\n+   #717 = NameAndType        #1002:#477   // hasMoreElements:()Z\n+   #718 = NameAndType        #1003:#979   // nextElement:()Ljava/lang/Object;\n+   #719 = Utf8               java/lang/String\n+   #720 = Utf8               \\\\.\n+   #721 = NameAndType        #1004:#1005  // split:(Ljava/lang/String;)[Ljava/lang/String;\n+   #722 = NameAndType        #516:#451    // optJSONObject:(Ljava/lang/String;)Lorg/json/JSONObject;\n+   #723 = Utf8               org/json/JSONObject\n+   #724 = NameAndType        #462:#463    // getString:(Ljava/lang/String;)Ljava/lang/String;\n+   #725 = NameAndType        #621:#378    // testValidity:(Ljava/lang/Object;)V\n+   #726 = Utf8               org/json/JSONArray\n+   #727 = NameAndType        #557:#1006   // put:(Ljava/lang/Object;)Lorg/json/JSONArray;\n+   #728 = Utf8               JSONArray\n+   #729 = NameAndType        #658:#662    // wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+   #730 = NameAndType        #1007:#1008  // isInfinite:(D)Z\n+   #731 = NameAndType        #1009:#1008  // isNaN:(D)Z\n+   #732 = Utf8               null\n+   #733 = NameAndType        #626:#416    // toString:(D)Ljava/lang/String;\n+   #734 = NameAndType        #1010:#1011  // indexOf:(I)I\n+   #735 = Utf8               0\n+   #736 = NameAndType        #1012:#431   // endsWith:(Ljava/lang/String;)Z\n+   #737 = NameAndType        #460:#474    // length:()I\n+   #738 = NameAndType        #1013:#1014  // substring:(II)Ljava/lang/String;\n+   #739 = Utf8               .\n+   #740 = Utf8               org/json/JSONException\n+   #741 = Utf8               JSONObject[\n+   #742 = NameAndType        #577:#463    // quote:(Ljava/lang/String;)Ljava/lang/String;\n+   #743 = Utf8               ] not found.\n+   #744 = NameAndType        #484:#423    // optEnum:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+   #745 = Utf8               enum of type\n+   #746 = NameAndType        #1015:#627   // getSimpleName:()Ljava/lang/String;\n+   #747 = NameAndType        #658:#659    // wrongValueFormatException:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+   #748 = NameAndType        #420:#421    // get:(Ljava/lang/String;)Ljava/lang/Object;\n+   #749 = NameAndType        #1016:#1017  // FALSE:Ljava/lang/Boolean;\n+   #750 = NameAndType        #1018:#591   // equals:(Ljava/lang/Object;)Z\n+   #751 = Utf8               false\n+   #752 = NameAndType        #1019:#431   // equalsIgnoreCase:(Ljava/lang/String;)Z\n+   #753 = NameAndType        #1020:#1017  // TRUE:Ljava/lang/Boolean;\n+   #754 = Utf8               true\n+   #755 = Utf8               Boolean\n+   #756 = NameAndType        #502:#503    // objectToBigInteger:(Ljava/lang/Object;Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #757 = Utf8               BigInteger\n+   #758 = NameAndType        #496:#497    // objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+   #759 = Utf8               BigDecimal\n+   #760 = Utf8               java/lang/Number\n+   #761 = NameAndType        #507:#1021   // doubleValue:()D\n+   #762 = NameAndType        #1022:#440   // parseDouble:(Ljava/lang/String;)D\n+   #763 = Utf8               double\n+   #764 = NameAndType        #511:#1023   // floatValue:()F\n+   #765 = NameAndType        #1024:#443   // parseFloat:(Ljava/lang/String;)F\n+   #766 = Utf8               float\n+   #767 = NameAndType        #610:#445    // stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+   #768 = NameAndType        #1025:#474   // intValue:()I\n+   #769 = NameAndType        #1026:#447   // parseInt:(Ljava/lang/String;)I\n+   #770 = Utf8               int\n+   #771 = Utf8               JSONObject\n+   #772 = NameAndType        #1027:#1028  // longValue:()J\n+   #773 = NameAndType        #1029:#453   // parseLong:(Ljava/lang/String;)J\n+   #774 = Utf8               long\n+   #775 = NameAndType        #476:#477    // isEmpty:()Z\n+   #776 = NameAndType        #469:#470    // keySet:()Ljava/util/Set;\n+   #777 = NameAndType        #1030:#1031  // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+   #778 = NameAndType        #1032:#1033  // getFields:()[Ljava/lang/reflect/Field;\n+   #779 = NameAndType        #1034:#627   // getName:()Ljava/lang/String;\n+   #780 = NameAndType        #1035:#591   // containsKey:(Ljava/lang/Object;)Z\n+   #781 = NameAndType        #557:#565    // put:(Ljava/lang/String;I)Lorg/json/JSONObject;\n+   #782 = Utf8               java/lang/Integer\n+   #783 = Utf8               java/lang/Long\n+   #784 = NameAndType        #557:#566    // put:(Ljava/lang/String;J)Lorg/json/JSONObject;\n+   #785 = Utf8               java/math/BigInteger\n+   #786 = NameAndType        #1036:#435   // ONE:Ljava/math/BigInteger;\n+   #787 = NameAndType        #1037:#1038  // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #788 = Utf8               java/lang/Float\n+   #789 = NameAndType        #557:#564    // put:(Ljava/lang/String;F)Lorg/json/JSONObject;\n+   #790 = Utf8               java/lang/Double\n+   #791 = NameAndType        #557:#563    // put:(Ljava/lang/String;D)Lorg/json/JSONObject;\n+   #792 = Utf8               java/math/BigDecimal\n+   #793 = NameAndType        #1036:#438   // ONE:Ljava/math/BigDecimal;\n+   #794 = NameAndType        #1037:#1039  // add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+   #795 = Utf8               Unable to increment [\n+   #796 = Utf8               ].\n+   #797 = NameAndType        #343:#344    // NULL:Ljava/lang/Object;\n+   #798 = NameAndType        #475:#346    // clear:()V\n+   #799 = NameAndType        #345:#1040   // \"<init>\":(Ljava/util/Collection;)V\n+   #800 = Utf8               Null pointer\n+   #801 = NameAndType        #484:#485    // optEnum:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n+   #802 = NameAndType        #1041:#1042  // isAssignableFrom:(Ljava/lang/Class;)Z\n+   #803 = Utf8               java/lang/Enum\n+   #804 = NameAndType        #987:#423    // valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n+   #805 = Utf8               java/lang/IllegalArgumentException\n+   #806 = NameAndType        #491:#492    // optBoolean:(Ljava/lang/String;Z)Z\n+   #807 = Utf8               java/lang/Boolean\n+   #808 = NameAndType        #1043:#477   // booleanValue:()Z\n+   #809 = NameAndType        #430:#431    // getBoolean:(Ljava/lang/String;)Z\n+   #810 = NameAndType        #496:#498    // objectToBigDecimal:(Ljava/lang/Object;Ljava/math/BigDecimal;Z)Ljava/math/BigDecimal;\n+   #811 = NameAndType        #345:#1044   // \"<init>\":(Ljava/math/BigInteger;)V\n+   #812 = NameAndType        #606:#607    // numberIsFinite:(Ljava/lang/Number;)Z\n+   #813 = NameAndType        #345:#1045   // \"<init>\":(D)V\n+   #814 = Utf8               java/lang/Short\n+   #815 = Utf8               java/lang/Byte\n+   #816 = NameAndType        #345:#1046   // \"<init>\":(J)V\n+   #817 = NameAndType        #1047:#1048  // toBigInteger:()Ljava/math/BigInteger;\n+   #818 = NameAndType        #987:#1049   // valueOf:(J)Ljava/math/BigInteger;\n+   #819 = NameAndType        #609:#431    // isDecimalNotation:(Ljava/lang/String;)Z\n+   #820 = NameAndType        #505:#506    // optDouble:(Ljava/lang/String;D)D\n+   #821 = NameAndType        #521:#445    // optNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+   #822 = NameAndType        #508:#509    // optFloat:(Ljava/lang/String;F)F\n+   #823 = NameAndType        #512:#513    // optInt:(Ljava/lang/String;I)I\n+   #824 = NameAndType        #521:#522    // optNumber:(Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;\n+   #825 = NameAndType        #516:#517    // optJSONObject:(Ljava/lang/String;Lorg/json/JSONObject;)Lorg/json/JSONObject;\n+   #826 = NameAndType        #518:#519    // optLong:(Ljava/lang/String;J)J\n+   #827 = Utf8\n+   #828 = NameAndType        #523:#524    // optString:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+   #829 = Utf8               java/util/IdentityHashMap\n+   #830 = Class              #1050        // java/util/Collections\n+   #831 = NameAndType        #1051:#1052  // newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;\n+   #832 = NameAndType        #1053:#997   // getClassLoader:()Ljava/lang/ClassLoader;\n+   #833 = NameAndType        #1054:#1055  // getMethods:()[Ljava/lang/reflect/Method;\n+   #834 = NameAndType        #1056:#1055  // getDeclaredMethods:()[Ljava/lang/reflect/Method;\n+   #835 = NameAndType        #1057:#474   // getModifiers:()I\n+   #836 = Class              #1058        // java/lang/reflect/Modifier\n+   #837 = NameAndType        #1059:#1060  // isPublic:(I)Z\n+   #838 = NameAndType        #1061:#1060  // isStatic:(I)Z\n+   #839 = NameAndType        #1062:#1063  // getParameterTypes:()[Ljava/lang/Class;\n+   #840 = NameAndType        #1064:#477   // isBridge:()Z\n+   #841 = NameAndType        #1065:#989   // getReturnType:()Ljava/lang/Class;\n+   #842 = Class              #1066        // java/lang/Void\n+   #843 = NameAndType        #1067:#388   // TYPE:Ljava/lang/Class;\n+   #844 = NameAndType        #536:#431    // isValidMethodName:(Ljava/lang/String;)Z\n+   #845 = NameAndType        #537:#538    // getKeyNameFromMethod:(Ljava/lang/reflect/Method;)Ljava/lang/String;\n+   #846 = Utf8               java/lang/Object\n+   #847 = NameAndType        #1068:#1069  // invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n+   #848 = NameAndType        #1070:#591   // contains:(Ljava/lang/Object;)Z\n+   #849 = NameAndType        #663:#664    // recursivelyDefinedObjectException:(Ljava/lang/String;)Lorg/json/JSONException;\n+   #850 = NameAndType        #1037:#591   // add:(Ljava/lang/Object;)Z\n+   #851 = NameAndType        #632:#634    // wrap:(Ljava/lang/Object;Ljava/util/Set;)Ljava/lang/Object;\n+   #852 = NameAndType        #589:#591    // remove:(Ljava/lang/Object;)Z\n+   #853 = Utf8               java/io/Closeable\n+   #854 = NameAndType        #1071:#346   // close:()V\n+   #855 = Utf8               java/io/IOException\n+   #856 = Utf8               java/lang/IllegalAccessException\n+   #857 = Utf8               java/lang/reflect/InvocationTargetException\n+   #858 = Utf8               getClass\n+   #859 = Utf8               getDeclaringClass\n+   #860 = Utf8               org/json/JSONPropertyIgnore\n+   #861 = NameAndType        #553:#554    // getAnnotationDepth:(Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n+   #862 = Utf8               org/json/JSONPropertyName\n+   #863 = NameAndType        #543:#544    // getAnnotation:(Ljava/lang/reflect/Method;Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n+   #864 = NameAndType        #360:#627    // value:()Ljava/lang/String;\n+   #865 = NameAndType        #1072:#431   // startsWith:(Ljava/lang/String;)Z\n+   #866 = NameAndType        #1013:#628   // substring:(I)Ljava/lang/String;\n+   #867 = Utf8               is\n+   #868 = NameAndType        #1073:#1074  // charAt:(I)C\n+   #869 = NameAndType        #1075:#1076  // isLowerCase:(C)Z\n+   #870 = NameAndType        #1077:#401   // ROOT:Ljava/util/Locale;\n+   #871 = NameAndType        #1078:#1079  // toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;\n+   #872 = NameAndType        #1080:#1076  // isUpperCase:(C)Z\n+   #873 = NameAndType        #1081:#1042  // isAnnotationPresent:(Ljava/lang/Class;)Z\n+   #874 = NameAndType        #543:#1082   // getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n+   #875 = NameAndType        #859:#989    // getDeclaringClass:()Ljava/lang/Class;\n+   #876 = NameAndType        #1083:#989   // getSuperclass:()Ljava/lang/Class;\n+   #877 = NameAndType        #1084:#1063  // getInterfaces:()[Ljava/lang/Class;\n+   #878 = NameAndType        #1085:#1086  // getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n+   #879 = Utf8               java/lang/SecurityException\n+   #880 = Utf8               java/lang/NoSuchMethodException\n+   #881 = NameAndType        #987:#1087   // valueOf:(D)Ljava/lang/Double;\n+   #882 = NameAndType        #987:#1088   // valueOf:(F)Ljava/lang/Float;\n+   #883 = NameAndType        #987:#1089   // valueOf:(I)Ljava/lang/Integer;\n+   #884 = NameAndType        #987:#1090   // valueOf:(J)Ljava/lang/Long;\n+   #885 = NameAndType        #345:#368    // \"<init>\":(Ljava/util/Map;)V\n+   #886 = NameAndType        #589:#421    // remove:(Ljava/lang/String;)Ljava/lang/Object;\n+   #887 = Utf8               org/json/JSONPointer\n+   #888 = NameAndType        #571:#573    // query:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n+   #889 = NameAndType        #1091:#633   // queryFrom:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #890 = NameAndType        #575:#573    // optQuery:(Lorg/json/JSONPointer;)Ljava/lang/Object;\n+   #891 = Utf8               org/json/JSONPointerException\n+   #892 = Utf8               java/io/StringWriter\n+   #893 = NameAndType        #1092:#1093  // getBuffer:()Ljava/lang/StringBuffer;\n+   #894 = NameAndType        #577:#582    // quote:(Ljava/lang/String;Ljava/io/Writer;)Ljava/io/Writer;\n+   #895 = Utf8               \\\"\\\"\n+   #896 = NameAndType        #642:#391    // write:(Ljava/lang/String;)V\n+   #897 = NameAndType        #642:#410    // write:(I)V\n+   #898 = Utf8               \\\\b\n+   #899 = Utf8               \\\\t\n+   #900 = Utf8               \\\\n\n+   #901 = Utf8               \\\\f\n+   #902 = Utf8               \\\\r\n+   #903 = Utf8               \\\\u\n+   #904 = NameAndType        #1094:#628   // toHexString:(I)Ljava/lang/String;\n+   #905 = Utf8               0000\n+   #906 = NameAndType        #642:#1095   // write:(Ljava/lang/String;II)V\n+   #907 = NameAndType        #589:#633    // remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #908 = NameAndType        #590:#591    // similar:(Ljava/lang/Object;)Z\n+   #909 = NameAndType        #599:#600    // isNumberSimilar:(Ljava/lang/Number;Ljava/lang/Number;)Z\n+   #910 = Utf8               java/lang/Throwable\n+   #911 = Utf8               java/lang/Comparable\n+   #912 = NameAndType        #601:#1096   // compareTo:(Ljava/lang/Object;)I\n+   #913 = NameAndType        #601:#1097   // compareTo:(Ljava/math/BigDecimal;)I\n+   #914 = NameAndType        #1007:#477   // isInfinite:()Z\n+   #915 = NameAndType        #1009:#477   // isNaN:()Z\n+   #916 = Utf8               -0\n+   #917 = NameAndType        #1098:#438   // ZERO:Ljava/math/BigDecimal;\n+   #918 = Utf8               java/lang/NumberFormatException\n+   #919 = NameAndType        #987:#1099   // valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n+   #920 = Utf8               val [\n+   #921 = Utf8               ] is not a valid number.\n+   #922 = NameAndType        #1100:#474   // bitLength:()I\n+   #923 = Utf8               JSON does not allow non-finite numbers.\n+   #924 = NameAndType        #462:#628    // getString:(I)Ljava/lang/String;\n+   #925 = NameAndType        #626:#628    // toString:(I)Ljava/lang/String;\n+   #926 = NameAndType        #642:#650    // write:(Ljava/io/Writer;II)Ljava/io/Writer;\n+   #927 = Class              #1101        // org/json/JSONWriter\n+   #928 = NameAndType        #630:#631    // valueToString:(Ljava/lang/Object;)Ljava/lang/String;\n+   #929 = Utf8               org/json/JSONString\n+   #930 = Utf8               java/lang/Character\n+   #931 = Utf8               java/util/Collection\n+   #932 = NameAndType        #1102:#477   // isArray:()Z\n+   #933 = NameAndType        #345:#378    // \"<init>\":(Ljava/lang/Object;)V\n+   #934 = Utf8               java/util/Map\n+   #935 = NameAndType        #1103:#1104  // getPackage:()Ljava/lang/Package;\n+   #936 = Utf8               java.\n+   #937 = Utf8               javax.\n+   #938 = NameAndType        #345:#380    // \"<init>\":(Ljava/lang/Object;Ljava/util/Set;)V\n+   #939 = NameAndType        #1105:#627   // toJSONString:()Ljava/lang/String;\n+   #940 = NameAndType        #345:#1106   // \"<init>\":(Ljava/lang/Throwable;)V\n+   #941 = NameAndType        #479:#480    // numberToString:(Ljava/lang/Number;)Ljava/lang/String;\n+   #942 = NameAndType        #337:#338    // NUMBER_PATTERN:Ljava/util/regex/Pattern;\n+   #943 = Class              #1107        // java/util/regex/Pattern\n+   #944 = NameAndType        #1108:#1109  // matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+   #945 = Class              #1110        // java/util/regex/Matcher\n+   #946 = NameAndType        #1111:#477   // matches:()Z\n+   #947 = NameAndType        #386:#627    // name:()Ljava/lang/String;\n+   #948 = NameAndType        #645:#646    // writeValue:(Ljava/io/Writer;Ljava/lang/Object;II)Ljava/io/Writer;\n+   #949 = Utf8               Unable to write JSONObject value for key:\n+   #950 = NameAndType        #345:#1112   // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #951 = NameAndType        #648:#649    // indent:(Ljava/io/Writer;I)V\n+   #952 = NameAndType        #653:#654    // toMap:()Ljava/util/Map;\n+   #953 = NameAndType        #1113:#1114  // toList:()Ljava/util/List;\n+   #954 = Utf8               ] is not a\n+   #955 = Utf8                (\n+   #956 = NameAndType        #414:#1115   // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #957 = Utf8               ).\n+   #958 = Utf8               JavaBean object contains recursively defined member variable of key\n+   #959 = Utf8               -?(?:0|[1-9]\\\\d*)(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?\n+   #960 = NameAndType        #1116:#1117  // compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n+   #961 = Utf8               org/json/JSONObject$Null\n+   #962 = NameAndType        #345:#1118   // \"<init>\":(Lorg/json/JSONObject$1;)V\n+   #963 = Utf8               org/json/JSONObject$1\n+   #964 = Utf8               java/util/Iterator\n+   #965 = Utf8               java/lang/Class\n+   #966 = Utf8               java/util/Locale\n+   #967 = Utf8               java/util/ResourceBundle\n+   #968 = Utf8               java/util/Enumeration\n+   #969 = Utf8               java/util/Set\n+   #970 = Utf8               java/lang/reflect/Method\n+   #971 = Utf8               [Ljava/lang/Class;\n+   #972 = Utf8               java/io/Writer\n+   #973 = Utf8               java/lang/Package\n+   #974 = Utf8               nextClean\n+   #975 = Utf8               ()C\n+   #976 = Utf8               syntaxError\n+   #977 = Utf8               back\n+   #978 = Utf8               nextValue\n+   #979 = Utf8               ()Ljava/lang/Object;\n+   #980 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #981 = Utf8               size\n+   #982 = Utf8               iterator\n+   #983 = Utf8               hasNext\n+   #984 = Utf8               next\n+   #985 = Utf8               getKey\n+   #986 = Utf8               getValue\n+   #987 = Utf8               valueOf\n+   #988 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #989 = Utf8               ()Ljava/lang/Class;\n+   #990 = Utf8               getField\n+   #991 = Utf8               (Ljava/lang/String;)Ljava/lang/reflect/Field;\n+   #992 = Utf8               java/lang/reflect/Field\n+   #993 = Utf8               java/lang/Thread\n+   #994 = Utf8               currentThread\n+   #995 = Utf8               ()Ljava/lang/Thread;\n+   #996 = Utf8               getContextClassLoader\n+   #997 = Utf8               ()Ljava/lang/ClassLoader;\n+   #998 = Utf8               getBundle\n+   #999 = Utf8               (Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;\n+  #1000 = Utf8               getKeys\n+  #1001 = Utf8               ()Ljava/util/Enumeration;\n+  #1002 = Utf8               hasMoreElements\n+  #1003 = Utf8               nextElement\n+  #1004 = Utf8               split\n+  #1005 = Utf8               (Ljava/lang/String;)[Ljava/lang/String;\n+  #1006 = Utf8               (Ljava/lang/Object;)Lorg/json/JSONArray;\n+  #1007 = Utf8               isInfinite\n+  #1008 = Utf8               (D)Z\n+  #1009 = Utf8               isNaN\n+  #1010 = Utf8               indexOf\n+  #1011 = Utf8               (I)I\n+  #1012 = Utf8               endsWith\n+  #1013 = Utf8               substring\n+  #1014 = Utf8               (II)Ljava/lang/String;\n+  #1015 = Utf8               getSimpleName\n+  #1016 = Utf8               FALSE\n+  #1017 = Utf8               Ljava/lang/Boolean;\n+  #1018 = Utf8               equals\n+  #1019 = Utf8               equalsIgnoreCase\n+  #1020 = Utf8               TRUE\n+  #1021 = Utf8               ()D\n+  #1022 = Utf8               parseDouble\n+  #1023 = Utf8               ()F\n+  #1024 = Utf8               parseFloat\n+  #1025 = Utf8               intValue\n+  #1026 = Utf8               parseInt\n+  #1027 = Utf8               longValue\n+  #1028 = Utf8               ()J\n+  #1029 = Utf8               parseLong\n+  #1030 = Utf8               toArray\n+  #1031 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #1032 = Utf8               getFields\n+  #1033 = Utf8               ()[Ljava/lang/reflect/Field;\n+  #1034 = Utf8               getName\n+  #1035 = Utf8               containsKey\n+  #1036 = Utf8               ONE\n+  #1037 = Utf8               add\n+  #1038 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #1039 = Utf8               (Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+  #1040 = Utf8               (Ljava/util/Collection;)V\n+  #1041 = Utf8               isAssignableFrom\n+  #1042 = Utf8               (Ljava/lang/Class;)Z\n+  #1043 = Utf8               booleanValue\n+  #1044 = Utf8               (Ljava/math/BigInteger;)V\n+  #1045 = Utf8               (D)V\n+  #1046 = Utf8               (J)V\n+  #1047 = Utf8               toBigInteger\n+  #1048 = Utf8               ()Ljava/math/BigInteger;\n+  #1049 = Utf8               (J)Ljava/math/BigInteger;\n+  #1050 = Utf8               java/util/Collections\n+  #1051 = Utf8               newSetFromMap\n+  #1052 = Utf8               (Ljava/util/Map;)Ljava/util/Set;\n+  #1053 = Utf8               getClassLoader\n+  #1054 = Utf8               getMethods\n+  #1055 = Utf8               ()[Ljava/lang/reflect/Method;\n+  #1056 = Utf8               getDeclaredMethods\n+  #1057 = Utf8               getModifiers\n+  #1058 = Utf8               java/lang/reflect/Modifier\n+  #1059 = Utf8               isPublic\n+  #1060 = Utf8               (I)Z\n+  #1061 = Utf8               isStatic\n+  #1062 = Utf8               getParameterTypes\n+  #1063 = Utf8               ()[Ljava/lang/Class;\n+  #1064 = Utf8               isBridge\n+  #1065 = Utf8               getReturnType\n+  #1066 = Utf8               java/lang/Void\n+  #1067 = Utf8               TYPE\n+  #1068 = Utf8               invoke\n+  #1069 = Utf8               (Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;\n+  #1070 = Utf8               contains\n+  #1071 = Utf8               close\n+  #1072 = Utf8               startsWith\n+  #1073 = Utf8               charAt\n+  #1074 = Utf8               (I)C\n+  #1075 = Utf8               isLowerCase\n+  #1076 = Utf8               (C)Z\n+  #1077 = Utf8               ROOT\n+  #1078 = Utf8               toLowerCase\n+  #1079 = Utf8               (Ljava/util/Locale;)Ljava/lang/String;\n+  #1080 = Utf8               isUpperCase\n+  #1081 = Utf8               isAnnotationPresent\n+  #1082 = Utf8               (Ljava/lang/Class;)Ljava/lang/annotation/Annotation;\n+  #1083 = Utf8               getSuperclass\n+  #1084 = Utf8               getInterfaces\n+  #1085 = Utf8               getMethod\n+  #1086 = Utf8               (Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;\n+  #1087 = Utf8               (D)Ljava/lang/Double;\n+  #1088 = Utf8               (F)Ljava/lang/Float;\n+  #1089 = Utf8               (I)Ljava/lang/Integer;\n+  #1090 = Utf8               (J)Ljava/lang/Long;\n+  #1091 = Utf8               queryFrom\n+  #1092 = Utf8               getBuffer\n+  #1093 = Utf8               ()Ljava/lang/StringBuffer;\n+  #1094 = Utf8               toHexString\n+  #1095 = Utf8               (Ljava/lang/String;II)V\n+  #1096 = Utf8               (Ljava/lang/Object;)I\n+  #1097 = Utf8               (Ljava/math/BigDecimal;)I\n+  #1098 = Utf8               ZERO\n+  #1099 = Utf8               (Ljava/lang/String;)Ljava/lang/Double;\n+  #1100 = Utf8               bitLength\n+  #1101 = Utf8               org/json/JSONWriter\n+  #1102 = Utf8               isArray\n+  #1103 = Utf8               getPackage\n+  #1104 = Utf8               ()Ljava/lang/Package;\n+  #1105 = Utf8               toJSONString\n+  #1106 = Utf8               (Ljava/lang/Throwable;)V\n+  #1107 = Utf8               java/util/regex/Pattern\n+  #1108 = Utf8               matcher\n+  #1109 = Utf8               (Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+  #1110 = Utf8               java/util/regex/Matcher\n+  #1111 = Utf8               matches\n+  #1112 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #1113 = Utf8               toList\n+  #1114 = Utf8               ()Ljava/util/List;\n+  #1115 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #1116 = Utf8               compile\n+  #1117 = Utf8               (Ljava/lang/String;)Ljava/util/regex/Pattern;\n+  #1118 = Utf8               (Lorg/json/JSONObject$1;)V\n {\n   static final java.util.regex.Pattern NUMBER_PATTERN;\n     descriptor: Ljava/util/regex/Pattern;\n     flags: (0x0018) ACC_STATIC, ACC_FINAL\n \n   private final java.util.Map<java.lang.String, java.lang.Object> map;\n     descriptor: Ljava/util/Map;\n@@ -1495,15 +1459,15 @@\n         frame_type = 252 /* append */\n           offset_delta = 37\n           locals = [ class java/util/Map$Entry ]\n         frame_type = 250 /* chop */\n           offset_delta = 36\n         frame_type = 250 /* chop */\n           offset_delta = 2\n-    Signature: #383                         // (Ljava/util/Map<**>;)V\n+    Signature: #377                         // (Ljava/util/Map<**>;)V\n \n   public org.json.JSONObject(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n@@ -1541,15 +1505,15 @@\n         Start  Length  Slot  Name   Signature\n             0      11     0  this   Lorg/json/JSONObject;\n             0      11     1  bean   Ljava/lang/Object;\n             0      11     2 objectsRecord   Ljava/util/Set;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      11     2 objectsRecord   Ljava/util/Set<Ljava/lang/Object;>;\n-    Signature: #390                         // (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)V\n+    Signature: #384                         // (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)V\n \n   public org.json.JSONObject(java.lang.Object, java.lang.String...);\n     descriptor: (Ljava/lang/Object;[Ljava/lang/String;)V\n     flags: (0x0081) ACC_PUBLIC, ACC_VARARGS\n     Code:\n       stack=4, locals=7, args_size=3\n          0: aload_0\n@@ -1855,15 +1819,16 @@\n         85: aload_0\n         86: areturn\n       LineNumberTable:\n         line 493: 0\n         line 494: 4\n         line 495: 10\n         line 496: 14\n-        line 497: 31\n+        line 497: 16\n+        line 498: 37\n         line 496: 38\n         line 499: 45\n         line 500: 52\n         line 502: 64\n         line 504: 85\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -2132,15 +2097,15 @@\n             7      37     3   val   TE;\n       StackMapTable: number_of_entries = 1\n         frame_type = 252 /* append */\n           offset_delta = 42\n           locals = [ class java/lang/Enum ]\n     Exceptions:\n       throws org.json.JSONException\n-    Signature: #437                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;)TE;\n+    Signature: #429                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;)TE;\n \n   public boolean getBoolean(java.lang.String) throws org.json.JSONException;\n     descriptor: (Ljava/lang/String;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_0\n@@ -2950,15 +2915,15 @@\n          4: invokeinterface #29,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;\n          9: areturn\n       LineNumberTable:\n         line 944: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/json/JSONObject;\n-    Signature: #478                         // ()Ljava/util/Iterator<Ljava/lang/String;>;\n+    Signature: #468                         // ()Ljava/util/Iterator<Ljava/lang/String;>;\n \n   public java.util.Set<java.lang.String> keySet();\n     descriptor: ()Ljava/util/Set;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -2966,15 +2931,15 @@\n          4: invokeinterface #145,  1          // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;\n          9: areturn\n       LineNumberTable:\n         line 956: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/json/JSONObject;\n-    Signature: #481                         // ()Ljava/util/Set<Ljava/lang/String;>;\n+    Signature: #471                         // ()Ljava/util/Set<Ljava/lang/String;>;\n \n   protected java.util.Set<java.util.Map$Entry<java.lang.String, java.lang.Object>> entrySet();\n     descriptor: ()Ljava/util/Set;\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -2982,15 +2947,15 @@\n          4: invokeinterface #28,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;\n          9: areturn\n       LineNumberTable:\n         line 972: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/json/JSONObject;\n-    Signature: #483                         // ()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;>;\n+    Signature: #473                         // ()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Object;>;>;\n \n   public int length();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -3186,15 +3151,15 @@\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/json/JSONObject;\n             0       8     1 clazz   Ljava/lang/Class;\n             0       8     2   key   Ljava/lang/String;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0       8     1 clazz   Ljava/lang/Class<TE;>;\n-    Signature: #437                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;)TE;\n+    Signature: #429                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;)TE;\n \n   public <E extends java.lang.Enum<E>> E optEnum(java.lang.Class<E>, java.lang.String, E);\n     descriptor: (Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Enum;)Ljava/lang/Enum;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=6, args_size=4\n          0: aload_0\n@@ -3270,15 +3235,15 @@\n         frame_type = 21 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 9\n           locals = [ class org/json/JSONObject, class java/lang/Class, class java/lang/String, class java/lang/Enum ]\n           stack = [ class java/lang/IllegalArgumentException ]\n         frame_type = 67 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NullPointerException ]\n-    Signature: #502                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;TE;)TE;\n+    Signature: #490                         // <E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Ljava/lang/String;TE;)TE;\n \n   public boolean optBoolean(java.lang.String);\n     descriptor: (Ljava/lang/String;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n@@ -4293,15 +4258,15 @@\n           stack = [ class java/lang/IllegalArgumentException ]\n         frame_type = 68 /* same_locals_1_stack_item */\n           stack = [ class java/lang/reflect/InvocationTargetException ]\n         frame_type = 248 /* chop */\n           offset_delta = 1\n         frame_type = 248 /* chop */\n           offset_delta = 5\n-    Signature: #390                         // (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)V\n+    Signature: #384                         // (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)V\n \n   private static boolean isValidMethodName(java.lang.String);\n     descriptor: (Ljava/lang/String;)Z\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: ldc           #213                // String getClass\n@@ -4632,15 +4597,15 @@\n           offset_delta = 4\n         frame_type = 248 /* chop */\n           offset_delta = 5\n         frame_type = 83 /* same_locals_1_stack_item */\n           stack = [ class java/lang/SecurityException ]\n         frame_type = 66 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NoSuchMethodException ]\n-    Signature: #572                         // <A::Ljava/lang/annotation/Annotation;>(Ljava/lang/reflect/Method;Ljava/lang/Class<TA;>;)TA;\n+    Signature: #552                         // <A::Ljava/lang/annotation/Annotation;>(Ljava/lang/reflect/Method;Ljava/lang/Class<TA;>;)TA;\n \n   private static int getAnnotationDepth(java.lang.reflect.Method, java.lang.Class<? extends java.lang.annotation.Annotation>);\n     descriptor: (Ljava/lang/reflect/Method;Ljava/lang/Class;)I\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=3, locals=9, args_size=2\n          0: aload_0\n@@ -4807,15 +4772,15 @@\n           locals = [ int ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 1\n           locals = [ class java/lang/reflect/Method, class java/lang/Class, class java/lang/Class ]\n           stack = [ class java/lang/SecurityException ]\n         frame_type = 66 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NoSuchMethodException ]\n-    Signature: #576                         // (Ljava/lang/reflect/Method;Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)I\n+    Signature: #556                         // (Ljava/lang/reflect/Method;Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)I\n \n   public org.json.JSONObject put(java.lang.String, boolean) throws org.json.JSONException;\n     descriptor: (Ljava/lang/String;Z)Lorg/json/JSONObject;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n@@ -4867,15 +4832,15 @@\n             0      14     1   key   Ljava/lang/String;\n             0      14     2 value   Ljava/util/Collection;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      14     2 value   Ljava/util/Collection<*>;\n     Exceptions:\n       throws org.json.JSONException\n-    Signature: #583                         // (Ljava/lang/String;Ljava/util/Collection<*>;)Lorg/json/JSONObject;\n+    Signature: #562                         // (Ljava/lang/String;Ljava/util/Collection<*>;)Lorg/json/JSONObject;\n \n   public org.json.JSONObject put(java.lang.String, double) throws org.json.JSONException;\n     descriptor: (Ljava/lang/String;D)Lorg/json/JSONObject;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=3\n          0: aload_0\n@@ -4978,15 +4943,15 @@\n             0      14     1   key   Ljava/lang/String;\n             0      14     2 value   Ljava/util/Map;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      14     2 value   Ljava/util/Map<**>;\n     Exceptions:\n       throws org.json.JSONException\n-    Signature: #589                         // (Ljava/lang/String;Ljava/util/Map<**>;)Lorg/json/JSONObject;\n+    Signature: #568                         // (Ljava/lang/String;Ljava/util/Map<**>;)Lorg/json/JSONObject;\n \n   public org.json.JSONObject put(java.lang.String, java.lang.Object) throws org.json.JSONException;\n     descriptor: (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_1\n@@ -6540,15 +6505,15 @@\n         line 2480: 152\n         line 2481: 162\n         line 2483: 171\n         line 2484: 178\n         line 2485: 183\n         line 2487: 192\n         line 2488: 200\n-        line 2489: 205\n+        line 2489: 204\n         line 2490: 214\n         line 2491: 228\n         line 2492: 235\n         line 2493: 244\n         line 2495: 249\n         line 2496: 253\n         line 2499: 263\n@@ -6591,15 +6556,15 @@\n         frame_type = 13 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 8\n           locals = [ class java/lang/Object, class java/util/Set ]\n           stack = [ class org/json/JSONException ]\n         frame_type = 66 /* same_locals_1_stack_item */\n           stack = [ class java/lang/Exception ]\n-    Signature: #668                         // (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)Ljava/lang/Object;\n+    Signature: #641                         // (Ljava/lang/Object;Ljava/util/Set<Ljava/lang/Object;>;)Ljava/lang/Object;\n \n   public java.io.Writer write(java.io.Writer) throws org.json.JSONException;\n     descriptor: (Ljava/io/Writer;)Ljava/io/Writer;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n@@ -7242,15 +7207,15 @@\n         frame_type = 28 /* same */\n         frame_type = 28 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 7\n           locals = [ class java/lang/Object ]\n         frame_type = 248 /* chop */\n           offset_delta = 17\n-    Signature: #684                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;\n+    Signature: #657                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;\n \n   private static org.json.JSONException wrongValueFormatException(java.lang.String, java.lang.String, java.lang.Throwable);\n     descriptor: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: new           #78                 // class org/json/JSONException\n@@ -7367,8 +7332,8 @@\n         line 162: 0\n         line 175: 9\n }\n SourceFile: \"JSONObject.java\"\n InnerClasses:\n   static #334;                            // class org/json/JSONObject$1\n   private static final #336= #332 of #60; // Null=class org/json/JSONObject$Null of class org/json/JSONObject\n-  public static #374= #32 of #304;        // Entry=class java/util/Map$Entry of class java/util/Map\n+  public static #370= #32 of #304;        // Entry=class java/util/Map$Entry of class java/util/Map\n"}]}
