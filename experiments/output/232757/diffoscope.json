{"diffoscope-json-version": 1, "source1": "first/FileHandler.class", "source2": "second/FileHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -32,117 +32,112 @@\n     private final AtomicReference<FileLocator> fileLocator;\n     private final List<FileHandlerListener> listeners;\n     \n     public FileHandler() {\n         this(null);\n     }\n     \n-    public FileHandler(final FileBased obj) {\n-        this(obj, emptyFileLocator());\n+    public FileHandler(final FileBased fileBased) {\n+        this(fileBased, emptyFileLocator());\n     }\n     \n-    public FileHandler(final FileBased obj, final FileHandler c) {\n-        this(obj, checkSourceHandler(c).getFileLocator());\n+    public FileHandler(final FileBased fileBased, final FileHandler fileHandler) {\n+        this(fileBased, checkSourceHandler(fileHandler).getFileLocator());\n     }\n     \n-    private FileHandler(final FileBased obj, final FileLocator locator) {\n+    private FileHandler(final FileBased content, final FileLocator initialValue) {\n         this.listeners = new CopyOnWriteArrayList<FileHandlerListener>();\n-        this.content = obj;\n-        this.fileLocator = new AtomicReference<FileLocator>(locator);\n+        this.content = content;\n+        this.fileLocator = new AtomicReference<FileLocator>(initialValue);\n     }\n     \n     public static FileHandler fromMap(final Map<String, ?> map) {\n         return new FileHandler(null, FileLocatorUtils.fromMap((Map)map));\n     }\n     \n     public final FileBased getContent() {\n         return this.content;\n     }\n     \n-    public void addFileHandlerListener(final FileHandlerListener l) {\n-        if (l == null) {\n+    public void addFileHandlerListener(final FileHandlerListener fileHandlerListener) {\n+        if (fileHandlerListener == null) {\n             throw new IllegalArgumentException(\"Listener must not be null!\");\n         }\n-        this.listeners.add(l);\n+        this.listeners.add(fileHandlerListener);\n     }\n     \n-    public void removeFileHandlerListener(final FileHandlerListener l) {\n-        this.listeners.remove(l);\n+    public void removeFileHandlerListener(final FileHandlerListener fileHandlerListener) {\n+        this.listeners.remove(fileHandlerListener);\n     }\n     \n     public String getFileName() {\n-        final FileLocator locator = this.getFileLocator();\n-        if (locator.getFileName() != null) {\n-            return locator.getFileName();\n+        final FileLocator fileLocator = this.getFileLocator();\n+        if (fileLocator.getFileName() != null) {\n+            return fileLocator.getFileName();\n         }\n-        if (locator.getSourceURL() != null) {\n-            return FileLocatorUtils.getFileName(locator.getSourceURL());\n+        if (fileLocator.getSourceURL() != null) {\n+            return FileLocatorUtils.getFileName(fileLocator.getSourceURL());\n         }\n         return null;\n     }\n     \n-    public void setFileName(final String fileName) {\n-        final String name = normalizeFileURL(fileName);\n-        new FileHandler.FileHandler$2(this, name).update();\n+    public void setFileName(final String s) {\n+        new FileHandler.FileHandler$2(this, normalizeFileURL(s)).update();\n     }\n     \n     public String getBasePath() {\n-        final FileLocator locator = this.getFileLocator();\n-        if (locator.getBasePath() != null) {\n-            return locator.getBasePath();\n+        final FileLocator fileLocator = this.getFileLocator();\n+        if (fileLocator.getBasePath() != null) {\n+            return fileLocator.getBasePath();\n         }\n-        if (locator.getSourceURL() != null) {\n-            return FileLocatorUtils.getBasePath(locator.getSourceURL());\n+        if (fileLocator.getSourceURL() != null) {\n+            return FileLocatorUtils.getBasePath(fileLocator.getSourceURL());\n         }\n         return null;\n     }\n     \n-    public void setBasePath(final String basePath) {\n-        final String path = normalizeFileURL(basePath);\n-        new FileHandler.FileHandler$3(this, path).update();\n+    public void setBasePath(final String s) {\n+        new FileHandler.FileHandler$3(this, normalizeFileURL(s)).update();\n     }\n     \n     public File getFile() {\n         return createFile(this.getFileLocator());\n     }\n     \n     public void setFile(final File file) {\n-        final String fileName = file.getName();\n-        final String basePath = (file.getParentFile() != null) ? file.getParentFile().getAbsolutePath() : null;\n-        new FileHandler.FileHandler$4(this, fileName, basePath).update();\n+        new FileHandler.FileHandler$4(this, file.getName(), (file.getParentFile() != null) ? file.getParentFile().getAbsolutePath() : null).update();\n     }\n     \n     public String getPath() {\n-        final FileLocator locator = this.getFileLocator();\n-        final File file = createFile(locator);\n-        return FileLocatorUtils.obtainFileSystem(locator).getPath(file, locator.getSourceURL(), locator.getBasePath(), locator.getFileName());\n+        final FileLocator fileLocator = this.getFileLocator();\n+        return FileLocatorUtils.obtainFileSystem(fileLocator).getPath(createFile(fileLocator), fileLocator.getSourceURL(), fileLocator.getBasePath(), fileLocator.getFileName());\n     }\n     \n-    public void setPath(final String path) {\n-        this.setFile(new File(path));\n+    public void setPath(final String pathname) {\n+        this.setFile(new File(pathname));\n     }\n     \n     public URL getURL() {\n-        final FileLocator locator = this.getFileLocator();\n-        return (locator.getSourceURL() != null) ? locator.getSourceURL() : FileLocatorUtils.locate(locator);\n+        final FileLocator fileLocator = this.getFileLocator();\n+        return (fileLocator.getSourceURL() != null) ? fileLocator.getSourceURL() : FileLocatorUtils.locate(fileLocator);\n     }\n     \n     public void setURL(final URL url) {\n         new FileHandler.FileHandler$5(this, url).update();\n     }\n     \n     public FileLocator getFileLocator() {\n         return this.fileLocator.get();\n     }\n     \n-    public void setFileLocator(final FileLocator locator) {\n-        if (locator == null) {\n+    public void setFileLocator(final FileLocator newValue) {\n+        if (newValue == null) {\n             throw new IllegalArgumentException(\"FileLocator must not be null!\");\n         }\n-        this.fileLocator.set(locator);\n+        this.fileLocator.set(newValue);\n         this.fireLocationChangedEvent();\n     }\n     \n     public boolean isLocationDefined() {\n         return FileLocatorUtils.isLocationDefined(this.getFileLocator());\n     }\n     \n@@ -150,16 +145,16 @@\n         new FileHandler.FileHandler$6(this).update();\n     }\n     \n     public String getEncoding() {\n         return this.getFileLocator().getEncoding();\n     }\n     \n-    public void setEncoding(final String encoding) {\n-        new FileHandler.FileHandler$7(this, encoding).update();\n+    public void setEncoding(final String s) {\n+        new FileHandler.FileHandler$7(this, s).update();\n     }\n     \n     public FileSystem getFileSystem() {\n         return FileLocatorUtils.obtainFileSystem(this.getFileLocator());\n     }\n     \n     public void setFileSystem(final FileSystem fileSystem) {\n@@ -170,401 +165,401 @@\n         this.setFileSystem(null);\n     }\n     \n     public FileLocationStrategy getLocationStrategy() {\n         return FileLocatorUtils.obtainLocationStrategy(this.getFileLocator());\n     }\n     \n-    public void setLocationStrategy(final FileLocationStrategy strategy) {\n-        new FileHandler.FileHandler$9(this, strategy).update();\n+    public void setLocationStrategy(final FileLocationStrategy fileLocationStrategy) {\n+        new FileHandler.FileHandler$9(this, fileLocationStrategy).update();\n     }\n     \n     public boolean locate() {\n-        boolean done;\n-        boolean result;\n+        FileLocator fileLocator;\n+        FileLocator fullyInitializedLocator;\n+        boolean b;\n         do {\n-            final FileLocator locator = this.getFileLocator();\n-            FileLocator fullLocator = FileLocatorUtils.fullyInitializedLocator(locator);\n-            if (fullLocator == null) {\n-                result = false;\n-                fullLocator = locator;\n+            fileLocator = this.getFileLocator();\n+            fullyInitializedLocator = FileLocatorUtils.fullyInitializedLocator(fileLocator);\n+            if (fullyInitializedLocator == null) {\n+                b = false;\n+                fullyInitializedLocator = fileLocator;\n             }\n             else {\n-                result = (fullLocator != locator || FileLocatorUtils.isFullyInitialized(locator));\n+                b = (fullyInitializedLocator != fileLocator || FileLocatorUtils.isFullyInitialized(fileLocator));\n             }\n-            done = this.fileLocator.compareAndSet(locator, fullLocator);\n-        } while (!done);\n-        return result;\n+        } while (!this.fileLocator.compareAndSet(fileLocator, fullyInitializedLocator));\n+        return b;\n     }\n     \n     public void load() throws ConfigurationException {\n         this.load(this.checkContentAndGetLocator());\n     }\n     \n-    public void load(final String fileName) throws ConfigurationException {\n-        this.load(fileName, this.checkContentAndGetLocator());\n+    public void load(final String s) throws ConfigurationException {\n+        this.load(s, this.checkContentAndGetLocator());\n     }\n     \n-    public void load(final File file) throws ConfigurationException {\n+    public void load(final File obj) throws ConfigurationException {\n         URL url;\n         try {\n-            url = FileLocatorUtils.toURL(file);\n+            url = FileLocatorUtils.toURL(obj);\n         }\n-        catch (final MalformedURLException e1) {\n-            throw new ConfigurationException(\"Cannot create URL from file \" + file);\n+        catch (final MalformedURLException ex) {\n+            throw new ConfigurationException(\"Cannot create URL from file \" + obj);\n         }\n         this.load(url);\n     }\n     \n     public void load(final URL url) throws ConfigurationException {\n         this.load(url, this.checkContentAndGetLocator());\n     }\n     \n-    public void load(final InputStream in) throws ConfigurationException {\n-        this.load(in, this.checkContentAndGetLocator());\n+    public void load(final InputStream inputStream) throws ConfigurationException {\n+        this.load(inputStream, this.checkContentAndGetLocator());\n     }\n     \n-    public void load(final InputStream in, final String encoding) throws ConfigurationException {\n-        this.loadFromStream(in, encoding, null);\n+    public void load(final InputStream inputStream, final String s) throws ConfigurationException {\n+        this.loadFromStream(inputStream, s, null);\n     }\n     \n-    public void load(final Reader in) throws ConfigurationException {\n+    public void load(final Reader reader) throws ConfigurationException {\n         this.checkContent();\n         this.injectNullFileLocator();\n-        this.loadFromReader(in);\n+        this.loadFromReader(reader);\n     }\n     \n     public void save() throws ConfigurationException {\n         this.save(this.checkContentAndGetLocator());\n     }\n     \n-    public void save(final String fileName) throws ConfigurationException {\n-        this.save(fileName, this.checkContentAndGetLocator());\n+    public void save(final String s) throws ConfigurationException {\n+        this.save(s, this.checkContentAndGetLocator());\n     }\n     \n     public void save(final URL url) throws ConfigurationException {\n         this.save(url, this.checkContentAndGetLocator());\n     }\n     \n     public void save(final File file) throws ConfigurationException {\n         this.save(file, this.checkContentAndGetLocator());\n     }\n     \n-    public void save(final OutputStream out) throws ConfigurationException {\n-        this.save(out, this.checkContentAndGetLocator());\n+    public void save(final OutputStream outputStream) throws ConfigurationException {\n+        this.save(outputStream, this.checkContentAndGetLocator());\n     }\n     \n-    public void save(final OutputStream out, final String encoding) throws ConfigurationException {\n-        this.saveToStream(out, encoding, null);\n+    public void save(final OutputStream outputStream, final String s) throws ConfigurationException {\n+        this.saveToStream(outputStream, s, null);\n     }\n     \n-    public void save(final Writer out) throws ConfigurationException {\n+    public void save(final Writer writer) throws ConfigurationException {\n         this.checkContent();\n         this.injectNullFileLocator();\n-        this.saveToWriter(out);\n+        this.saveToWriter(writer);\n     }\n     \n     private FileLocator.FileLocatorBuilder prepareNullLocatorBuilder() {\n         return FileLocatorUtils.fileLocator(this.getFileLocator()).sourceURL((URL)null).basePath((String)null).fileName((String)null);\n     }\n     \n     private void injectNullFileLocator() {\n         if (this.getContent() instanceof FileLocatorAware) {\n-            final FileLocator locator = this.prepareNullLocatorBuilder().create();\n-            ((FileLocatorAware)this.getContent()).initFileLocator(locator);\n+            ((FileLocatorAware)this.getContent()).initFileLocator(this.prepareNullLocatorBuilder().create());\n         }\n     }\n     \n     private void injectFileLocator(final URL url) {\n         if (url == null) {\n             this.injectNullFileLocator();\n         }\n         else if (this.getContent() instanceof FileLocatorAware) {\n-            final FileLocator locator = this.prepareNullLocatorBuilder().sourceURL(url).create();\n-            ((FileLocatorAware)this.getContent()).initFileLocator(locator);\n+            ((FileLocatorAware)this.getContent()).initFileLocator(this.prepareNullLocatorBuilder().sourceURL(url).create());\n         }\n     }\n     \n     private SynchronizerSupport fetchSynchronizerSupport() {\n         if (this.getContent() instanceof SynchronizerSupport) {\n             return (SynchronizerSupport)this.getContent();\n         }\n         return FileHandler.DUMMY_SYNC_SUPPORT;\n     }\n     \n-    private void load(final FileLocator locator) throws ConfigurationException {\n-        final URL url = FileLocatorUtils.locateOrThrow(locator);\n-        this.load(url, locator);\n+    private void load(final FileLocator fileLocator) throws ConfigurationException {\n+        this.load(FileLocatorUtils.locateOrThrow(fileLocator), fileLocator);\n     }\n     \n-    private void load(final URL url, final FileLocator locator) throws ConfigurationException {\n-        InputStream in = null;\n+    private void load(final URL obj, final FileLocator fileLocator) throws ConfigurationException {\n+        InputStream inputStream = null;\n         try {\n-            in = FileLocatorUtils.obtainFileSystem(locator).getInputStream(url);\n-            this.loadFromStream(in, locator.getEncoding(), url);\n+            inputStream = FileLocatorUtils.obtainFileSystem(fileLocator).getInputStream(obj);\n+            this.loadFromStream(inputStream, fileLocator.getEncoding(), obj);\n         }\n-        catch (final ConfigurationException e) {\n-            throw e;\n+        catch (final ConfigurationException ex) {\n+            throw ex;\n         }\n-        catch (final Exception e2) {\n-            throw new ConfigurationException(\"Unable to load the configuration from the URL \" + url, (Throwable)e2);\n+        catch (final Exception ex2) {\n+            throw new ConfigurationException(\"Unable to load the configuration from the URL \" + obj, (Throwable)ex2);\n         }\n         finally {\n-            closeSilent(in);\n+            closeSilent(inputStream);\n         }\n     }\n     \n-    private void load(final String fileName, final FileLocator locator) throws ConfigurationException {\n-        final FileLocator locFileName = this.createLocatorWithFileName(fileName, locator);\n-        final URL url = FileLocatorUtils.locateOrThrow(locFileName);\n-        this.load(url, locator);\n+    private void load(final String s, final FileLocator fileLocator) throws ConfigurationException {\n+        this.load(FileLocatorUtils.locateOrThrow(this.createLocatorWithFileName(s, fileLocator)), fileLocator);\n     }\n     \n-    private void load(final InputStream in, final FileLocator locator) throws ConfigurationException {\n-        this.load(in, locator.getEncoding());\n+    private void load(final InputStream inputStream, final FileLocator fileLocator) throws ConfigurationException {\n+        this.load(inputStream, fileLocator.getEncoding());\n     }\n     \n-    private void loadFromStream(final InputStream in, final String encoding, final URL url) throws ConfigurationException {\n+    private void loadFromStream(final InputStream inputStream, final String s, final URL url) throws ConfigurationException {\n         this.checkContent();\n-        final SynchronizerSupport syncSupport = this.fetchSynchronizerSupport();\n-        syncSupport.lock(LockMode.WRITE);\n+        final SynchronizerSupport fetchSynchronizerSupport = this.fetchSynchronizerSupport();\n+        fetchSynchronizerSupport.lock(LockMode.WRITE);\n         try {\n             this.injectFileLocator(url);\n             if (this.getContent() instanceof InputStreamSupport) {\n-                this.loadFromStreamDirectly(in);\n+                this.loadFromStreamDirectly(inputStream);\n             }\n             else {\n-                this.loadFromTransformedStream(in, encoding);\n+                this.loadFromTransformedStream(inputStream, s);\n             }\n         }\n         finally {\n-            syncSupport.unlock(LockMode.WRITE);\n+            fetchSynchronizerSupport.unlock(LockMode.WRITE);\n         }\n     }\n     \n-    private void loadFromStreamDirectly(final InputStream in) throws ConfigurationException {\n+    private void loadFromStreamDirectly(final InputStream inputStream) throws ConfigurationException {\n         try {\n-            ((InputStreamSupport)this.getContent()).read(in);\n+            ((InputStreamSupport)this.getContent()).read(inputStream);\n         }\n-        catch (final IOException e) {\n-            throw new ConfigurationException((Throwable)e);\n+        catch (final IOException ex) {\n+            throw new ConfigurationException((Throwable)ex);\n         }\n     }\n     \n-    private void loadFromTransformedStream(final InputStream in, final String encoding) throws ConfigurationException {\n+    private void loadFromTransformedStream(final InputStream inputStream, final String charsetName) throws ConfigurationException {\n         Reader reader = null;\n-        if (encoding != null) {\n+        if (charsetName != null) {\n             try {\n-                reader = new InputStreamReader(in, encoding);\n+                reader = new InputStreamReader(inputStream, charsetName);\n             }\n-            catch (final UnsupportedEncodingException e) {\n-                throw new ConfigurationException(\"The requested encoding is not supported, try the default encoding.\", (Throwable)e);\n+            catch (final UnsupportedEncodingException ex) {\n+                throw new ConfigurationException(\"The requested encoding is not supported, try the default encoding.\", (Throwable)ex);\n             }\n         }\n         if (reader == null) {\n-            reader = new InputStreamReader(in);\n+            reader = new InputStreamReader(inputStream);\n         }\n         this.loadFromReader(reader);\n     }\n     \n-    private void loadFromReader(final Reader in) throws ConfigurationException {\n+    private void loadFromReader(final Reader reader) throws ConfigurationException {\n         this.fireLoadingEvent();\n         try {\n-            this.getContent().read(in);\n+            this.getContent().read(reader);\n         }\n-        catch (final IOException ioex) {\n-            throw new ConfigurationException((Throwable)ioex);\n+        catch (final IOException ex) {\n+            throw new ConfigurationException((Throwable)ex);\n         }\n         finally {\n             this.fireLoadedEvent();\n         }\n     }\n     \n-    private void save(final FileLocator locator) throws ConfigurationException {\n-        if (!FileLocatorUtils.isLocationDefined(locator)) {\n+    private void save(final FileLocator fileLocator) throws ConfigurationException {\n+        if (!FileLocatorUtils.isLocationDefined(fileLocator)) {\n             throw new ConfigurationException(\"No file location has been set!\");\n         }\n-        if (locator.getSourceURL() != null) {\n-            this.save(locator.getSourceURL(), locator);\n+        if (fileLocator.getSourceURL() != null) {\n+            this.save(fileLocator.getSourceURL(), fileLocator);\n         }\n         else {\n-            this.save(locator.getFileName(), locator);\n+            this.save(fileLocator.getFileName(), fileLocator);\n         }\n     }\n     \n-    private void save(final String fileName, final FileLocator locator) throws ConfigurationException {\n+    private void save(final String str, final FileLocator fileLocator) throws ConfigurationException {\n         URL url;\n         try {\n-            url = FileLocatorUtils.obtainFileSystem(locator).getURL(locator.getBasePath(), fileName);\n+            url = FileLocatorUtils.obtainFileSystem(fileLocator).getURL(fileLocator.getBasePath(), str);\n         }\n-        catch (final MalformedURLException e) {\n-            throw new ConfigurationException((Throwable)e);\n+        catch (final MalformedURLException ex) {\n+            throw new ConfigurationException((Throwable)ex);\n         }\n         if (url == null) {\n-            throw new ConfigurationException(\"Cannot locate configuration source \" + fileName);\n+            throw new ConfigurationException(\"Cannot locate configuration source \" + str);\n         }\n-        this.save(url, locator);\n+        this.save(url, fileLocator);\n     }\n     \n-    private void save(final URL url, final FileLocator locator) throws ConfigurationException {\n-        OutputStream out = null;\n+    private void save(final URL url, final FileLocator fileLocator) throws ConfigurationException {\n+        Object outputStream = null;\n         try {\n-            out = FileLocatorUtils.obtainFileSystem(locator).getOutputStream(url);\n-            this.saveToStream(out, locator.getEncoding(), url);\n-            if (out instanceof VerifiableOutputStream) {\n+            outputStream = FileLocatorUtils.obtainFileSystem(fileLocator).getOutputStream(url);\n+            this.saveToStream((OutputStream)outputStream, fileLocator.getEncoding(), url);\n+            if (outputStream instanceof VerifiableOutputStream) {\n                 try {\n-                    ((VerifiableOutputStream)out).verify();\n+                    ((VerifiableOutputStream)outputStream).verify();\n                 }\n-                catch (final IOException e) {\n-                    throw new ConfigurationException((Throwable)e);\n+                catch (final IOException ex) {\n+                    throw new ConfigurationException((Throwable)ex);\n                 }\n             }\n         }\n         finally {\n-            closeSilent(out);\n+            closeSilent((Closeable)outputStream);\n         }\n     }\n     \n-    private void save(final File file, final FileLocator locator) throws ConfigurationException {\n-        OutputStream out = null;\n+    private void save(final File file, final FileLocator fileLocator) throws ConfigurationException {\n+        OutputStream outputStream = null;\n         try {\n-            out = FileLocatorUtils.obtainFileSystem(locator).getOutputStream(file);\n-            this.saveToStream(out, locator.getEncoding(), file.toURI().toURL());\n+            outputStream = FileLocatorUtils.obtainFileSystem(fileLocator).getOutputStream(file);\n+            this.saveToStream(outputStream, fileLocator.getEncoding(), file.toURI().toURL());\n         }\n-        catch (final MalformedURLException muex) {\n-            throw new ConfigurationException((Throwable)muex);\n+        catch (final MalformedURLException ex) {\n+            throw new ConfigurationException((Throwable)ex);\n         }\n         finally {\n-            closeSilent(out);\n+            closeSilent(outputStream);\n         }\n     }\n     \n-    private void save(final OutputStream out, final FileLocator locator) throws ConfigurationException {\n-        this.save(out, locator.getEncoding());\n+    private void save(final OutputStream outputStream, final FileLocator fileLocator) throws ConfigurationException {\n+        this.save(outputStream, fileLocator.getEncoding());\n     }\n     \n-    private void saveToStream(final OutputStream out, final String encoding, final URL url) throws ConfigurationException {\n+    private void saveToStream(final OutputStream outputStream, final String charsetName, final URL url) throws ConfigurationException {\n         this.checkContent();\n-        final SynchronizerSupport syncSupport = this.fetchSynchronizerSupport();\n-        syncSupport.lock(LockMode.WRITE);\n+        final SynchronizerSupport fetchSynchronizerSupport = this.fetchSynchronizerSupport();\n+        fetchSynchronizerSupport.lock(LockMode.WRITE);\n         try {\n             this.injectFileLocator(url);\n             Writer writer = null;\n-            if (encoding != null) {\n+            if (charsetName != null) {\n                 try {\n-                    writer = new OutputStreamWriter(out, encoding);\n+                    writer = new OutputStreamWriter(outputStream, charsetName);\n                 }\n-                catch (final UnsupportedEncodingException e) {\n-                    throw new ConfigurationException(\"The requested encoding is not supported, try the default encoding.\", (Throwable)e);\n+                catch (final UnsupportedEncodingException ex) {\n+                    throw new ConfigurationException(\"The requested encoding is not supported, try the default encoding.\", (Throwable)ex);\n                 }\n             }\n             if (writer == null) {\n-                writer = new OutputStreamWriter(out);\n+                writer = new OutputStreamWriter(outputStream);\n             }\n             this.saveToWriter(writer);\n         }\n         finally {\n-            syncSupport.unlock(LockMode.WRITE);\n+            fetchSynchronizerSupport.unlock(LockMode.WRITE);\n         }\n     }\n     \n-    private void saveToWriter(final Writer out) throws ConfigurationException {\n+    private void saveToWriter(final Writer writer) throws ConfigurationException {\n         this.fireSavingEvent();\n         try {\n-            this.getContent().write(out);\n+            this.getContent().write(writer);\n         }\n-        catch (final IOException ioex) {\n-            throw new ConfigurationException((Throwable)ioex);\n+        catch (final IOException ex) {\n+            throw new ConfigurationException((Throwable)ex);\n         }\n         finally {\n             this.fireSavedEvent();\n         }\n     }\n     \n-    private FileLocator createLocatorWithFileName(final String fileName, final FileLocator locator) {\n-        return FileLocatorUtils.fileLocator(locator).sourceURL((URL)null).fileName(fileName).create();\n+    private FileLocator createLocatorWithFileName(final String s, final FileLocator fileLocator) {\n+        return FileLocatorUtils.fileLocator(fileLocator).sourceURL((URL)null).fileName(s).create();\n     }\n     \n     private void checkContent() throws ConfigurationException {\n         if (this.getContent() == null) {\n             throw new ConfigurationException(\"No content available!\");\n         }\n     }\n     \n     private FileLocator checkContentAndGetLocator() throws ConfigurationException {\n         this.checkContent();\n         return this.getFileLocator();\n     }\n     \n     private void fireLoadingEvent() {\n-        for (final FileHandlerListener l : this.listeners) {\n-            l.loading(this);\n+        final Iterator<FileHandlerListener> iterator = this.listeners.iterator();\n+        while (iterator.hasNext()) {\n+            ((FileHandlerListener)iterator.next()).loading(this);\n         }\n     }\n     \n     private void fireLoadedEvent() {\n-        for (final FileHandlerListener l : this.listeners) {\n-            l.loaded(this);\n+        final Iterator<FileHandlerListener> iterator = this.listeners.iterator();\n+        while (iterator.hasNext()) {\n+            ((FileHandlerListener)iterator.next()).loaded(this);\n         }\n     }\n     \n     private void fireSavingEvent() {\n-        for (final FileHandlerListener l : this.listeners) {\n-            l.saving(this);\n+        final Iterator<FileHandlerListener> iterator = this.listeners.iterator();\n+        while (iterator.hasNext()) {\n+            ((FileHandlerListener)iterator.next()).saving(this);\n         }\n     }\n     \n     private void fireSavedEvent() {\n-        for (final FileHandlerListener l : this.listeners) {\n-            l.saved(this);\n+        final Iterator<FileHandlerListener> iterator = this.listeners.iterator();\n+        while (iterator.hasNext()) {\n+            ((FileHandlerListener)iterator.next()).saved(this);\n         }\n     }\n     \n     private void fireLocationChangedEvent() {\n-        for (final FileHandlerListener l : this.listeners) {\n-            l.locationChanged(this);\n+        final Iterator<FileHandlerListener> iterator = this.listeners.iterator();\n+        while (iterator.hasNext()) {\n+            ((FileHandlerListener)iterator.next()).locationChanged(this);\n         }\n     }\n     \n-    private static String normalizeFileURL(String fileName) {\n-        if (fileName != null && fileName.startsWith(\"file:\") && !fileName.startsWith(\"file://\")) {\n-            fileName = \"file://\" + fileName.substring(\"file:\".length());\n+    private static String normalizeFileURL(String string) {\n+        if (string != null && string.startsWith(\"file:\") && !string.startsWith(\"file://\")) {\n+            string = \"file://\" + string.substring(\"file:\".length());\n         }\n-        return fileName;\n+        return string;\n     }\n     \n-    private static void closeSilent(final Closeable cl) {\n+    private static void closeSilent(final Closeable obj) {\n         try {\n-            if (cl != null) {\n-                cl.close();\n+            if (obj != null) {\n+                obj.close();\n             }\n         }\n-        catch (final IOException e) {\n-            LogFactory.getLog((Class)FileHandler.class).warn((Object)(\"Exception when closing \" + cl), (Throwable)e);\n+        catch (final IOException ex) {\n+            LogFactory.getLog((Class)FileHandler.class).warn((Object)(\"Exception when closing \" + obj), (Throwable)ex);\n         }\n     }\n     \n-    private static File createFile(final FileLocator loc) {\n-        if (loc.getFileName() == null && loc.getSourceURL() == null) {\n+    private static File createFile(final FileLocator fileLocator) {\n+        if (fileLocator.getFileName() == null && fileLocator.getSourceURL() == null) {\n             return null;\n         }\n-        if (loc.getSourceURL() != null) {\n-            return FileLocatorUtils.fileFromURL(loc.getSourceURL());\n+        if (fileLocator.getSourceURL() != null) {\n+            return FileLocatorUtils.fileFromURL(fileLocator.getSourceURL());\n         }\n-        return FileLocatorUtils.getFile(loc.getBasePath(), loc.getFileName());\n+        return FileLocatorUtils.getFile(fileLocator.getBasePath(), fileLocator.getFileName());\n     }\n     \n     private static FileLocator emptyFileLocator() {\n         return FileLocatorUtils.fileLocator().create();\n     }\n     \n-    private static FileHandler checkSourceHandler(final FileHandler c) {\n-        if (c == null) {\n+    private static FileHandler checkSourceHandler(final FileHandler fileHandler) {\n+        if (fileHandler == null) {\n             throw new IllegalArgumentException(\"FileHandler to assign must not be null!\");\n         }\n-        return c;\n+        return fileHandler;\n     }\n     \n     static {\n         DUMMY_SYNC_SUPPORT = (SynchronizerSupport)new FileHandler.FileHandler$1();\n     }\n }\n"}]}
