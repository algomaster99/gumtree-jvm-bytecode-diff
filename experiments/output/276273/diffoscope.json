{"diffoscope-json-version": 1, "source1": "first/FallThroughCheck.class", "source2": "second/FallThroughCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -33,165 +33,160 @@\n         return this.getRequiredTokens();\n     }\n     \n     public boolean isCommentNodesRequired() {\n         return true;\n     }\n     \n-    public void setReliefPattern(final Pattern pattern) {\n-        this.reliefPattern = pattern;\n+    public void setReliefPattern(final Pattern reliefPattern) {\n+        this.reliefPattern = reliefPattern;\n     }\n     \n-    public void setCheckLastCaseGroup(final boolean value) {\n-        this.checkLastCaseGroup = value;\n+    public void setCheckLastCaseGroup(final boolean checkLastCaseGroup) {\n+        this.checkLastCaseGroup = checkLastCaseGroup;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        final DetailAST nextGroup = ast.getNextSibling();\n-        final boolean isLastGroup = nextGroup.getType() != 33;\n-        if (!isLastGroup || this.checkLastCaseGroup) {\n-            final DetailAST slist = ast.findFirstToken(7);\n-            if (slist != null && !this.isTerminated(slist, true, true) && !this.hasFallThroughComment(ast)) {\n-                if (isLastGroup) {\n-                    this.log(ast, \"fall.through.last\", new Object[0]);\n+    public void visitToken(final DetailAST detailAST) {\n+        final DetailAST nextSibling = detailAST.getNextSibling();\n+        final boolean b = nextSibling.getType() != 33;\n+        if (!b || this.checkLastCaseGroup) {\n+            final DetailAST firstToken = detailAST.findFirstToken(7);\n+            if (firstToken != null && !this.isTerminated(firstToken, true, true) && !this.hasFallThroughComment(detailAST)) {\n+                if (b) {\n+                    this.log(detailAST, \"fall.through.last\", new Object[0]);\n                 }\n                 else {\n-                    this.log(nextGroup, \"fall.through\", new Object[0]);\n+                    this.log(nextSibling, \"fall.through\", new Object[0]);\n                 }\n             }\n         }\n     }\n     \n-    private boolean isTerminated(final DetailAST ast, final boolean useBreak, final boolean useContinue) {\n-        boolean terminated = false;\n-        switch (ast.getType()) {\n+    private boolean isTerminated(final DetailAST detailAST, final boolean b, final boolean b2) {\n+        boolean b3 = false;\n+        switch (detailAST.getType()) {\n             case 88:\n             case 90:\n             case 207: {\n-                terminated = true;\n+                b3 = true;\n                 break;\n             }\n             case 86: {\n-                terminated = useBreak;\n+                b3 = b;\n                 break;\n             }\n             case 87: {\n-                terminated = useContinue;\n+                b3 = b2;\n                 break;\n             }\n             case 7: {\n-                terminated = this.checkSlist(ast, useBreak, useContinue);\n+                b3 = this.checkSlist(detailAST, b, b2);\n                 break;\n             }\n             case 83: {\n-                terminated = this.checkIf(ast, useBreak, useContinue);\n+                b3 = this.checkIf(detailAST, b, b2);\n                 break;\n             }\n             case 84:\n             case 85:\n             case 91: {\n-                terminated = this.checkLoop(ast);\n+                b3 = this.checkLoop(detailAST);\n                 break;\n             }\n             case 95: {\n-                terminated = this.checkTry(ast, useBreak, useContinue);\n+                b3 = this.checkTry(detailAST, b, b2);\n                 break;\n             }\n             case 89: {\n-                terminated = this.checkSwitch(ast, useContinue);\n+                b3 = this.checkSwitch(detailAST, b2);\n                 break;\n             }\n             case 67: {\n-                terminated = this.checkSynchronized(ast, useBreak, useContinue);\n+                b3 = this.checkSynchronized(detailAST, b, b2);\n                 break;\n             }\n             default: {\n-                terminated = false;\n+                b3 = false;\n                 break;\n             }\n         }\n-        return terminated;\n+        return b3;\n     }\n     \n-    private boolean checkSlist(final DetailAST slistAst, final boolean useBreak, final boolean useContinue) {\n-        DetailAST lastStmt = slistAst.getLastChild();\n-        if (lastStmt.getType() == 73) {\n-            lastStmt = lastStmt.getPreviousSibling();\n+    private boolean checkSlist(final DetailAST detailAST, final boolean b, final boolean b2) {\n+        DetailAST detailAST2 = detailAST.getLastChild();\n+        if (detailAST2.getType() == 73) {\n+            detailAST2 = detailAST2.getPreviousSibling();\n         }\n-        while (TokenUtil.isOfType(lastStmt, new int[] { 144, 145 })) {\n-            lastStmt = lastStmt.getPreviousSibling();\n+        while (TokenUtil.isOfType(detailAST2, new int[] { 144, 145 })) {\n+            detailAST2 = detailAST2.getPreviousSibling();\n         }\n-        return lastStmt != null && this.isTerminated(lastStmt, useBreak, useContinue);\n+        return detailAST2 != null && this.isTerminated(detailAST2, b, b2);\n     }\n     \n-    private boolean checkIf(final DetailAST ast, final boolean useBreak, final boolean useContinue) {\n-        final DetailAST thenStmt = getNextNonCommentAst(ast.findFirstToken(77));\n-        final DetailAST elseStmt = getNextNonCommentAst(thenStmt);\n-        return elseStmt != null && this.isTerminated(thenStmt, useBreak, useContinue) && this.isTerminated(elseStmt.getLastChild(), useBreak, useContinue);\n+    private boolean checkIf(final DetailAST detailAST, final boolean b, final boolean b2) {\n+        final DetailAST nextNonCommentAst = getNextNonCommentAst(detailAST.findFirstToken(77));\n+        final DetailAST nextNonCommentAst2 = getNextNonCommentAst(nextNonCommentAst);\n+        return nextNonCommentAst2 != null && this.isTerminated(nextNonCommentAst, b, b2) && this.isTerminated(nextNonCommentAst2.getLastChild(), b, b2);\n     }\n     \n-    private static DetailAST getNextNonCommentAst(final DetailAST ast) {\n-        DetailAST nextSibling;\n-        for (nextSibling = ast.getNextSibling(); TokenUtil.isOfType(nextSibling, new int[] { 144, 145 }); nextSibling = nextSibling.getNextSibling()) {}\n-        return nextSibling;\n+    private static DetailAST getNextNonCommentAst(final DetailAST detailAST) {\n+        DetailAST detailAST2;\n+        for (detailAST2 = detailAST.getNextSibling(); TokenUtil.isOfType(detailAST2, new int[] { 144, 145 }); detailAST2 = detailAST2.getNextSibling()) {}\n+        return detailAST2;\n     }\n     \n-    private boolean checkLoop(final DetailAST ast) {\n-        DetailAST loopBody;\n-        if (ast.getType() == 85) {\n-            final DetailAST lparen = ast.findFirstToken(175);\n-            loopBody = lparen.getPreviousSibling();\n+    private boolean checkLoop(final DetailAST detailAST) {\n+        DetailAST detailAST2;\n+        if (detailAST.getType() == 85) {\n+            detailAST2 = detailAST.findFirstToken(175).getPreviousSibling();\n         }\n         else {\n-            final DetailAST rparen = ast.findFirstToken(77);\n-            loopBody = rparen.getNextSibling();\n+            detailAST2 = detailAST.findFirstToken(77).getNextSibling();\n         }\n-        return this.isTerminated(loopBody, false, false);\n+        return this.isTerminated(detailAST2, false, false);\n     }\n     \n-    private boolean checkTry(final DetailAST ast, final boolean useBreak, final boolean useContinue) {\n-        final DetailAST finalStmt = ast.getLastChild();\n-        boolean isTerminated = finalStmt.getType() == 97 && this.isTerminated(finalStmt.findFirstToken(7), useBreak, useContinue);\n-        if (!isTerminated) {\n-            DetailAST firstChild = ast.getFirstChild();\n-            if (firstChild.getType() == 176) {\n-                firstChild = firstChild.getNextSibling();\n-            }\n-            isTerminated = this.isTerminated(firstChild, useBreak, useContinue);\n-            DetailAST catchBody;\n-            for (DetailAST catchStmt = ast.findFirstToken(96); catchStmt != null && isTerminated && catchStmt.getType() == 96; isTerminated = this.isTerminated(catchBody, useBreak, useContinue), catchStmt = catchStmt.getNextSibling()) {\n-                catchBody = catchStmt.findFirstToken(7);\n+    private boolean checkTry(final DetailAST detailAST, final boolean b, final boolean b2) {\n+        final DetailAST lastChild = detailAST.getLastChild();\n+        boolean b3 = lastChild.getType() == 97 && this.isTerminated(lastChild.findFirstToken(7), b, b2);\n+        if (!b3) {\n+            DetailAST detailAST2 = detailAST.getFirstChild();\n+            if (detailAST2.getType() == 176) {\n+                detailAST2 = detailAST2.getNextSibling();\n             }\n+            b3 = this.isTerminated(detailAST2, b, b2);\n+            for (DetailAST detailAST3 = detailAST.findFirstToken(96); detailAST3 != null && b3 && detailAST3.getType() == 96; b3 = this.isTerminated(detailAST3.findFirstToken(7), b, b2), detailAST3 = detailAST3.getNextSibling()) {}\n         }\n-        return isTerminated;\n+        return b3;\n     }\n     \n-    private boolean checkSwitch(final DetailAST literalSwitchAst, final boolean useContinue) {\n-        DetailAST caseGroup;\n-        boolean isTerminated;\n-        DetailAST caseBody;\n-        for (caseGroup = literalSwitchAst.findFirstToken(33), isTerminated = (caseGroup != null); isTerminated && caseGroup.getType() != 73; isTerminated = (caseBody != null && this.isTerminated(caseBody, false, useContinue)), caseGroup = caseGroup.getNextSibling()) {\n-            caseBody = caseGroup.findFirstToken(7);\n+    private boolean checkSwitch(final DetailAST detailAST, final boolean b) {\n+        DetailAST detailAST2;\n+        boolean b2;\n+        DetailAST firstToken;\n+        for (detailAST2 = detailAST.findFirstToken(33), b2 = (detailAST2 != null); b2 && detailAST2.getType() != 73; b2 = (firstToken != null && this.isTerminated(firstToken, false, b)), detailAST2 = detailAST2.getNextSibling()) {\n+            firstToken = detailAST2.findFirstToken(7);\n         }\n-        return isTerminated;\n+        return b2;\n     }\n     \n-    private boolean checkSynchronized(final DetailAST synchronizedAst, final boolean useBreak, final boolean useContinue) {\n-        return this.isTerminated(synchronizedAst.findFirstToken(7), useBreak, useContinue);\n+    private boolean checkSynchronized(final DetailAST detailAST, final boolean b, final boolean b2) {\n+        return this.isTerminated(detailAST.findFirstToken(7), b, b2);\n     }\n     \n-    private boolean hasFallThroughComment(final DetailAST currentCase) {\n-        final DetailAST nextSibling = currentCase.getNextSibling();\n-        DetailAST ast;\n+    private boolean hasFallThroughComment(final DetailAST detailAST) {\n+        final DetailAST nextSibling = detailAST.getNextSibling();\n+        DetailAST firstChild;\n         if (nextSibling.getType() == 33) {\n-            ast = nextSibling.getFirstChild();\n+            firstChild = nextSibling.getFirstChild();\n         }\n         else {\n-            ast = currentCase;\n+            firstChild = detailAST;\n         }\n-        return this.hasReliefComment(ast);\n+        return this.hasReliefComment(firstChild);\n     }\n     \n-    private boolean hasReliefComment(final DetailAST ast) {\n-        return Boolean.valueOf(Optional.ofNullable(getNextNonCommentAst(ast)).map((Function<? super DetailAST, ?>)DetailAST::getPreviousSibling).map(previous -> previous.getFirstChild().getText()).map(text -> Boolean.valueOf(this.reliefPattern.matcher(text).find())).orElse(Boolean.FALSE));\n+    private boolean hasReliefComment(final DetailAST detailAST) {\n+        return Boolean.valueOf(Optional.ofNullable(getNextNonCommentAst(detailAST)).map((Function<? super DetailAST, ?>)DetailAST::getPreviousSibling).map(detailAST2 -> detailAST2.getFirstChild().getText()).map(input -> Boolean.valueOf(this.reliefPattern.matcher(input).find())).orElse(Boolean.FALSE));\n     }\n }\n"}]}
