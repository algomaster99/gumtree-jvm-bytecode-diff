{"diffoscope-json-version": 1, "source1": "first/NodeSelector.class", "source2": "second/NodeSelector.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,66 +9,58 @@\n import java.util.Collections;\n import java.util.List;\n \n public class NodeSelector\n {\n     private final List<String> nodeKeys;\n     \n-    public NodeSelector(final String key) {\n-        this(Collections.singletonList(key));\n+    public NodeSelector(final String o) {\n+        this(Collections.singletonList(o));\n     }\n     \n-    private NodeSelector(final List<String> keys) {\n-        this.nodeKeys = keys;\n+    private NodeSelector(final List<String> nodeKeys) {\n+        this.nodeKeys = nodeKeys;\n     }\n     \n-    public ImmutableNode select(final ImmutableNode root, final NodeKeyResolver<ImmutableNode> resolver, final NodeHandler<ImmutableNode> handler) {\n-        List<ImmutableNode> nodes = new LinkedList<ImmutableNode>();\n-        final Iterator<String> itKeys = this.nodeKeys.iterator();\n-        this.getFilteredResults(root, resolver, handler, itKeys.next(), nodes);\n-        while (itKeys.hasNext()) {\n-            final String currentKey = (String)itKeys.next();\n-            final List<ImmutableNode> currentResults = new LinkedList<ImmutableNode>();\n-            nodes.forEach(currentRoot -> this.getFilteredResults(currentRoot, resolver, (NodeHandler<ImmutableNode>)handler, currentKey, (List<ImmutableNode>)currentResults));\n-            nodes = currentResults;\n+    public ImmutableNode select(final ImmutableNode immutableNode, final NodeKeyResolver<ImmutableNode> nodeKeyResolver, final NodeHandler<ImmutableNode> nodeHandler) {\n+        LinkedList list = new LinkedList();\n+        final Iterator<String> iterator = this.nodeKeys.iterator();\n+        this.getFilteredResults(immutableNode, nodeKeyResolver, nodeHandler, iterator.next(), list);\n+        while (iterator.hasNext()) {\n+            final String s = (String)iterator.next();\n+            final LinkedList list2 = new LinkedList();\n+            list.forEach(immutableNode2 -> this.getFilteredResults(immutableNode2, nodeKeyResolver2, (NodeHandler<ImmutableNode>)nodeHandler2, s2, (List<ImmutableNode>)list3));\n+            list = list2;\n         }\n-        return (nodes.size() == 1) ? ((ImmutableNode)nodes.get(0)) : null;\n+        return (list.size() == 1) ? ((ImmutableNode)list.get(0)) : null;\n     }\n     \n-    public NodeSelector subSelector(final String subKey) {\n-        final List<String> keys = new ArrayList<String>(this.nodeKeys.size() + 1);\n-        keys.addAll(this.nodeKeys);\n-        keys.add(subKey);\n-        return new NodeSelector(keys);\n+    public NodeSelector subSelector(final String s) {\n+        final ArrayList list = new ArrayList(this.nodeKeys.size() + 1);\n+        list.addAll(this.nodeKeys);\n+        list.add(s);\n+        return new NodeSelector(list);\n     }\n     \n     @Override\n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n-            return true;\n-        }\n-        if (!(obj instanceof NodeSelector)) {\n-            return false;\n-        }\n-        final NodeSelector c = (NodeSelector)obj;\n-        return this.nodeKeys.equals(c.nodeKeys);\n+    public boolean equals(final Object o) {\n+        return this == o || (o instanceof NodeSelector && this.nodeKeys.equals(((NodeSelector)o).nodeKeys));\n     }\n     \n     @Override\n     public int hashCode() {\n         return this.nodeKeys.hashCode();\n     }\n     \n     @Override\n     public String toString() {\n         return new ToStringBuilder((Object)this).append(\"keys\", (Object)this.nodeKeys).toString();\n     }\n     \n-    private void getFilteredResults(final ImmutableNode root, final NodeKeyResolver<ImmutableNode> resolver, final NodeHandler<ImmutableNode> handler, final String key, final List<ImmutableNode> nodes) {\n-        final List<QueryResult<ImmutableNode>> results = resolver.resolveKey((Object)root, key, (NodeHandler)handler);\n-        results.forEach(result -> {\n-            if (!result.isAttributeResult()) {\n-                nodes.add(result.getNode());\n+    private void getFilteredResults(final ImmutableNode immutableNode, final NodeKeyResolver<ImmutableNode> nodeKeyResolver, final NodeHandler<ImmutableNode> nodeHandler, final String s, final List<ImmutableNode> list) {\n+        nodeKeyResolver.resolveKey((Object)immutableNode, s, (NodeHandler)nodeHandler).forEach(queryResult -> {\n+            if (!queryResult.isAttributeResult()) {\n+                list2.add(queryResult.getNode());\n             }\n         });\n     }\n }\n"}]}
