{"diffoscope-json-version": 1, "source1": "first/MissingJavadocMethodCheck.class", "source2": "second/MissingJavadocMethodCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,15 +1,12 @@\n \n package com.puppycrawl.tools.checkstyle.checks.javadoc;\n \n-import java.util.regex.Matcher;\n import com.puppycrawl.tools.checkstyle.utils.AnnotationUtil;\n import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n-import com.puppycrawl.tools.checkstyle.api.TextBlock;\n-import com.puppycrawl.tools.checkstyle.api.FileContents;\n import com.puppycrawl.tools.checkstyle.utils.ScopeUtil;\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n import java.util.Set;\n import java.util.regex.Pattern;\n import com.puppycrawl.tools.checkstyle.api.Scope;\n import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n@@ -29,28 +26,28 @@\n     \n     public MissingJavadocMethodCheck() {\n         this.scope = Scope.PUBLIC;\n         this.minLineCount = -1;\n         this.allowedAnnotations = Set.of(\"Override\");\n     }\n     \n-    public void setAllowedAnnotations(final String... userAnnotations) {\n-        this.allowedAnnotations = Set.of(userAnnotations);\n+    public void setAllowedAnnotations(final String... elements) {\n+        this.allowedAnnotations = Set.of(elements);\n     }\n     \n-    public void setIgnoreMethodNamesRegex(final Pattern pattern) {\n-        this.ignoreMethodNamesRegex = pattern;\n+    public void setIgnoreMethodNamesRegex(final Pattern ignoreMethodNamesRegex) {\n+        this.ignoreMethodNamesRegex = ignoreMethodNamesRegex;\n     }\n     \n-    public void setMinLineCount(final int value) {\n-        this.minLineCount = value;\n+    public void setMinLineCount(final int minLineCount) {\n+        this.minLineCount = minLineCount;\n     }\n     \n-    public void setAllowMissingPropertyJavadoc(final boolean flag) {\n-        this.allowMissingPropertyJavadoc = flag;\n+    public void setAllowMissingPropertyJavadoc(final boolean allowMissingPropertyJavadoc) {\n+        this.allowMissingPropertyJavadoc = allowMissingPropertyJavadoc;\n     }\n     \n     public void setScope(final Scope scope) {\n         this.scope = scope;\n     }\n     \n     public void setExcludeScope(final Scope excludeScope) {\n@@ -65,57 +62,47 @@\n         return this.getAcceptableTokens();\n     }\n     \n     public int[] getAcceptableTokens() {\n         return new int[] { 9, 8, 161, 203 };\n     }\n     \n-    public final void visitToken(final DetailAST ast) {\n-        final Scope theScope = ScopeUtil.getScope(ast);\n-        if (this.shouldCheck(ast, theScope)) {\n-            final FileContents contents = this.getFileContents();\n-            final TextBlock textBlock = contents.getJavadocBefore(ast.getLineNo());\n-            if (textBlock == null && !this.isMissingJavadocAllowed(ast)) {\n-                this.log(ast, \"javadoc.missing\", new Object[0]);\n-            }\n+    public final void visitToken(final DetailAST detailAST) {\n+        if (this.shouldCheck(detailAST, ScopeUtil.getScope(detailAST)) && this.getFileContents().getJavadocBefore(detailAST.getLineNo()) == null && !this.isMissingJavadocAllowed(detailAST)) {\n+            this.log(detailAST, \"javadoc.missing\", new Object[0]);\n         }\n     }\n     \n-    private static int getMethodsNumberOfLine(final DetailAST methodDef) {\n-        final DetailAST lcurly = methodDef.getLastChild();\n-        final DetailAST rcurly = lcurly.getLastChild();\n-        int numberOfLines;\n-        if (lcurly.getFirstChild() == rcurly) {\n-            numberOfLines = 1;\n+    private static int getMethodsNumberOfLine(final DetailAST detailAST) {\n+        final DetailAST lastChild = detailAST.getLastChild();\n+        final DetailAST lastChild2 = lastChild.getLastChild();\n+        int n;\n+        if (lastChild.getFirstChild() == lastChild2) {\n+            n = 1;\n         }\n         else {\n-            numberOfLines = rcurly.getLineNo() - lcurly.getLineNo() - 1;\n+            n = lastChild2.getLineNo() - lastChild.getLineNo() - 1;\n         }\n-        return numberOfLines;\n+        return n;\n     }\n     \n-    private boolean isMissingJavadocAllowed(final DetailAST ast) {\n-        return (this.allowMissingPropertyJavadoc && (CheckUtil.isSetterMethod(ast) || CheckUtil.isGetterMethod(ast))) || this.matchesSkipRegex(ast) || this.isContentsAllowMissingJavadoc(ast);\n+    private boolean isMissingJavadocAllowed(final DetailAST detailAST) {\n+        return (this.allowMissingPropertyJavadoc && (CheckUtil.isSetterMethod(detailAST) || CheckUtil.isGetterMethod(detailAST))) || this.matchesSkipRegex(detailAST) || this.isContentsAllowMissingJavadoc(detailAST);\n     }\n     \n-    private boolean isContentsAllowMissingJavadoc(final DetailAST ast) {\n-        return (ast.getType() == 9 || ast.getType() == 8 || ast.getType() == 203) && (getMethodsNumberOfLine(ast) <= this.minLineCount || AnnotationUtil.containsAnnotation(ast, (Set)this.allowedAnnotations));\n+    private boolean isContentsAllowMissingJavadoc(final DetailAST detailAST) {\n+        return (detailAST.getType() == 9 || detailAST.getType() == 8 || detailAST.getType() == 203) && (getMethodsNumberOfLine(detailAST) <= this.minLineCount || AnnotationUtil.containsAnnotation(detailAST, (Set)this.allowedAnnotations));\n     }\n     \n-    private boolean matchesSkipRegex(final DetailAST methodDef) {\n-        boolean result = false;\n-        if (this.ignoreMethodNamesRegex != null) {\n-            final DetailAST ident = methodDef.findFirstToken(58);\n-            final String methodName = ident.getText();\n-            final Matcher matcher = this.ignoreMethodNamesRegex.matcher(methodName);\n-            if (matcher.matches()) {\n-                result = true;\n-            }\n+    private boolean matchesSkipRegex(final DetailAST detailAST) {\n+        boolean b = false;\n+        if (this.ignoreMethodNamesRegex != null && this.ignoreMethodNamesRegex.matcher(detailAST.findFirstToken(58).getText()).matches()) {\n+            b = true;\n         }\n-        return result;\n+        return b;\n     }\n     \n-    private boolean shouldCheck(final DetailAST ast, final Scope nodeScope) {\n-        final Scope surroundingScope = ScopeUtil.getSurroundingScope(ast);\n-        return (this.excludeScope == null || (nodeScope != this.excludeScope && surroundingScope != this.excludeScope)) && nodeScope.isIn(this.scope) && surroundingScope.isIn(this.scope);\n+    private boolean shouldCheck(final DetailAST detailAST, final Scope scope) {\n+        final Scope surroundingScope = ScopeUtil.getSurroundingScope(detailAST);\n+        return (this.excludeScope == null || (scope != this.excludeScope && surroundingScope != this.excludeScope)) && scope.isIn(this.scope) && surroundingScope.isIn(this.scope);\n     }\n }\n"}]}
