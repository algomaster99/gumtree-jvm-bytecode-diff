{"diffoscope-json-version": 1, "source1": "first/FileContents.class", "source2": "second/FileContents.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,116 +18,111 @@\n     private static final String MATCH_SINGLELINE_COMMENT_PAT = \"^\\\\s*//.*$\";\n     private static final Pattern MATCH_SINGLELINE_COMMENT;\n     private final FileText text;\n     private final Map<Integer, TextBlock> javadocComments;\n     private final Map<Integer, TextBlock> cppComments;\n     private final Map<Integer, List<TextBlock>> clangComments;\n     \n-    public FileContents(final FileText text) {\n+    public FileContents(final FileText fileText) {\n         this.javadocComments = new HashMap<Integer, TextBlock>();\n         this.cppComments = new HashMap<Integer, TextBlock>();\n         this.clangComments = new HashMap<Integer, List<TextBlock>>();\n-        this.text = new FileText(text);\n+        this.text = new FileText(fileText);\n     }\n     \n     public FileText getText() {\n         return new FileText(this.text);\n     }\n     \n     public String[] getLines() {\n         return this.text.toLinesArray();\n     }\n     \n-    public String getLine(final int index) {\n-        return this.text.get(index);\n+    public String getLine(final int n) {\n+        return this.text.get(n);\n     }\n     \n     public String getFileName() {\n         return this.text.getFile().toString();\n     }\n     \n-    public void reportSingleLineComment(final String type, final int startLineNo, final int startColNo) {\n-        this.reportSingleLineComment(startLineNo, startColNo);\n+    public void reportSingleLineComment(final String s, final int n, final int n2) {\n+        this.reportSingleLineComment(n, n2);\n     }\n     \n-    public void reportSingleLineComment(final int startLineNo, final int startColNo) {\n-        final String line = this.line(startLineNo - 1);\n-        final String[] txt = { line.substring(startColNo) };\n-        final Comment comment = new Comment(txt, startColNo, startLineNo, line.length() - 1);\n-        this.cppComments.put(Integer.valueOf(startLineNo), (TextBlock)comment);\n+    public void reportSingleLineComment(final int i, final int beginIndex) {\n+        final String line = this.line(i - 1);\n+        this.cppComments.put(Integer.valueOf(i), (TextBlock)new Comment(new String[] { line.substring(beginIndex) }, beginIndex, i, line.length() - 1));\n     }\n     \n-    public void reportBlockComment(final String type, final int startLineNo, final int startColNo, final int endLineNo, final int endColNo) {\n-        this.reportBlockComment(startLineNo, startColNo, endLineNo, endColNo);\n+    public void reportBlockComment(final String s, final int n, final int n2, final int n3, final int n4) {\n+        this.reportBlockComment(n, n2, n3, n4);\n     }\n     \n-    public void reportBlockComment(final int startLineNo, final int startColNo, final int endLineNo, final int endColNo) {\n-        final String[] cComment = this.extractBlockComment(startLineNo, startColNo, endLineNo, endColNo);\n-        final Comment comment = new Comment(cComment, startColNo, endLineNo, endColNo);\n-        final List<TextBlock> entries = (List<TextBlock>)this.clangComments.computeIfAbsent(Integer.valueOf(startLineNo), empty -> new ArrayList());\n-        entries.add((TextBlock)comment);\n-        final String firstLine = this.line(startLineNo - 1);\n-        if (firstLine.contains(\"/**\") && !firstLine.contains(\"/**/\")) {\n-            this.javadocComments.put(Integer.valueOf(endLineNo - 1), (TextBlock)comment);\n+    public void reportBlockComment(final int i, final int n, final int n2, final int n3) {\n+        final Comment comment = new Comment(this.extractBlockComment(i, n, n2, n3), n, n2, n3);\n+        ((List<TextBlock>)this.clangComments.computeIfAbsent(Integer.valueOf(i), p0 -> new ArrayList())).add((TextBlock)comment);\n+        final String line = this.line(i - 1);\n+        if (line.contains(\"/**\") && !line.contains(\"/**/\")) {\n+            this.javadocComments.put(Integer.valueOf(n2 - 1), (TextBlock)comment);\n         }\n     }\n     \n-    private String[] extractBlockComment(final int startLineNo, final int startColNo, final int endLineNo, final int endColNo) {\n-        String[] returnValue;\n-        if (startLineNo == endLineNo) {\n-            returnValue = new String[] { this.line(startLineNo - 1).substring(startColNo, endColNo + 1) };\n+    private String[] extractBlockComment(final int n, final int n2, final int n3, final int n4) {\n+        String[] array;\n+        if (n == n3) {\n+            array = new String[] { this.line(n - 1).substring(n2, n4 + 1) };\n         }\n         else {\n-            returnValue = new String[endLineNo - startLineNo + 1];\n-            returnValue[0] = this.line(startLineNo - 1).substring(startColNo);\n-            for (int i = startLineNo; i < endLineNo; ++i) {\n-                returnValue[i - startLineNo + 1] = this.line(i);\n+            array = new String[n3 - n + 1];\n+            array[0] = this.line(n - 1).substring(n2);\n+            for (int i = n; i < n3; ++i) {\n+                array[i - n + 1] = this.line(i);\n             }\n-            returnValue[returnValue.length - 1] = this.line(endLineNo - 1).substring(0, endColNo + 1);\n+            array[array.length - 1] = this.line(n3 - 1).substring(0, n4 + 1);\n         }\n-        return returnValue;\n+        return array;\n     }\n     \n-    private String line(final int lineNo) {\n-        return this.text.get(lineNo);\n+    private String line(final int n) {\n+        return this.text.get(n);\n     }\n     \n-    public TextBlock getJavadocBefore(final int lineNoBefore) {\n-        int lineNo;\n-        for (lineNo = lineNoBefore - 2; lineNo > 0 && (this.lineIsBlank(lineNo) || this.lineIsComment(lineNo)); --lineNo) {}\n-        return this.javadocComments.get(Integer.valueOf(lineNo));\n+    public TextBlock getJavadocBefore(final int n) {\n+        int i;\n+        for (i = n - 2; i > 0 && (this.lineIsBlank(i) || this.lineIsComment(i)); --i) {}\n+        return this.javadocComments.get(Integer.valueOf(i));\n     }\n     \n-    public boolean lineIsBlank(final int lineNo) {\n-        return CommonUtil.isBlank(this.line(lineNo));\n+    public boolean lineIsBlank(final int n) {\n+        return CommonUtil.isBlank(this.line(n));\n     }\n     \n-    public boolean lineIsComment(final int lineNo) {\n-        return FileContents.MATCH_SINGLELINE_COMMENT.matcher(this.line(lineNo)).matches();\n+    public boolean lineIsComment(final int n) {\n+        return FileContents.MATCH_SINGLELINE_COMMENT.matcher(this.line(n)).matches();\n     }\n     \n-    public boolean hasIntersectionWithComment(final int startLineNo, final int startColNo, final int endLineNo, final int endColNo) {\n-        return this.hasIntersectionWithBlockComment(startLineNo, startColNo, endLineNo, endColNo) || this.hasIntersectionWithSingleLineComment(startLineNo, startColNo, endLineNo, endColNo);\n+    public boolean hasIntersectionWithComment(final int n, final int n2, final int n3, final int n4) {\n+        return this.hasIntersectionWithBlockComment(n, n2, n3, n4) || this.hasIntersectionWithSingleLineComment(n, n2, n3, n4);\n     }\n     \n-    private boolean hasIntersectionWithBlockComment(final int startLineNo, final int startColNo, final int endLineNo, final int endColNo) {\n-        final Collection<List<TextBlock>> values = this.clangComments.values();\n-        return values.stream().flatMap((Function<? super List<TextBlock>, ? extends Stream<?>>)Collection::stream).anyMatch(comment -> comment.intersects(startLineNo, startColNo, endLineNo, endColNo));\n+    private boolean hasIntersectionWithBlockComment(final int n, final int n2, final int n3, final int n4) {\n+        return this.clangComments.values().stream().flatMap((Function<? super List<TextBlock>, ? extends Stream<?>>)Collection::stream).anyMatch(textBlock -> textBlock.intersects(n5, n6, n7, n8));\n     }\n     \n-    private boolean hasIntersectionWithSingleLineComment(final int startLineNo, final int startColNo, final int endLineNo, final int endColNo) {\n-        boolean hasIntersection = false;\n-        for (int lineNumber = startLineNo; lineNumber <= endLineNo; ++lineNumber) {\n-            final TextBlock comment = (TextBlock)this.cppComments.get(Integer.valueOf(lineNumber));\n-            if (comment != null && comment.intersects(startLineNo, startColNo, endLineNo, endColNo)) {\n-                hasIntersection = true;\n+    private boolean hasIntersectionWithSingleLineComment(final int n, final int n2, final int n3, final int n4) {\n+        boolean b = false;\n+        for (int i = n; i <= n3; ++i) {\n+            final TextBlock textBlock = (TextBlock)this.cppComments.get(Integer.valueOf(i));\n+            if (textBlock != null && textBlock.intersects(n, n2, n3, n4)) {\n+                b = true;\n                 break;\n             }\n         }\n-        return hasIntersection;\n+        return b;\n     }\n     \n     public Map<Integer, TextBlock> getSingleLineComments() {\n         return Collections.unmodifiableMap((Map<? extends Integer, ? extends TextBlock>)this.cppComments);\n     }\n     \n     public Map<Integer, List<TextBlock>> getBlockComments() {\n"}]}
