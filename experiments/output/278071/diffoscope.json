{"diffoscope-json-version": 1, "source1": "first/Segment$SegmentMethodVisitor.class", "source2": "second/Segment$SegmentMethodVisitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,145 +8,145 @@\n \n public class SegmentMethodVisitor implements MethodVisitor\n {\n     public SegmentMethodVisitor(final Segment this$0) {\n         this.this$0 = this$0;\n     }\n     \n-    public AnnotationVisitor visitAnnotation(final String desc, final boolean visible) {\n-        return (AnnotationVisitor)new Segment.SegmentAnnotationVisitor(this.this$0, 2, desc, visible);\n+    public AnnotationVisitor visitAnnotation(final String s, final boolean b) {\n+        return (AnnotationVisitor)new Segment.SegmentAnnotationVisitor(this.this$0, 2, s, b);\n     }\n     \n     public AnnotationVisitor visitAnnotationDefault() {\n         return (AnnotationVisitor)new Segment.SegmentAnnotationVisitor(this.this$0, 2);\n     }\n     \n     public void visitAttribute(final Attribute attribute) {\n         if (attribute.isUnknown()) {\n-            final String action = Segment.access$000(this.this$0).getUnknownAttributeAction();\n-            if (action.equals(\"pass\")) {\n+            final String unknownAttributeAction = Segment.access$000(this.this$0).getUnknownAttributeAction();\n+            if (unknownAttributeAction.equals(\"pass\")) {\n                 Segment.access$100(this.this$0);\n             }\n-            else if (action.equals(\"error\")) {\n+            else if (unknownAttributeAction.equals(\"error\")) {\n                 throw new Error(\"Unknown attribute encountered\");\n             }\n         }\n         else {\n             if (!(attribute instanceof NewAttribute)) {\n                 throw new RuntimeException(\"Unexpected attribute encountered: \" + attribute.type);\n             }\n             final NewAttribute newAttribute = (NewAttribute)attribute;\n             if (attribute.isCodeAttribute()) {\n                 if (newAttribute.isUnknown(3)) {\n-                    final String action2 = Segment.access$000(this.this$0).getUnknownCodeAttributeAction(newAttribute.type);\n-                    if (action2.equals(\"pass\")) {\n+                    final String unknownCodeAttributeAction = Segment.access$000(this.this$0).getUnknownCodeAttributeAction(newAttribute.type);\n+                    if (unknownCodeAttributeAction.equals(\"pass\")) {\n                         Segment.access$100(this.this$0);\n                     }\n-                    else if (action2.equals(\"error\")) {\n+                    else if (unknownCodeAttributeAction.equals(\"error\")) {\n                         throw new Error(\"Unknown attribute encountered\");\n                     }\n                 }\n                 Segment.access$200(this.this$0).addCodeAttribute(newAttribute);\n             }\n             else {\n                 if (newAttribute.isUnknown(2)) {\n-                    final String action2 = Segment.access$000(this.this$0).getUnknownMethodAttributeAction(newAttribute.type);\n-                    if (action2.equals(\"pass\")) {\n+                    final String unknownMethodAttributeAction = Segment.access$000(this.this$0).getUnknownMethodAttributeAction(newAttribute.type);\n+                    if (unknownMethodAttributeAction.equals(\"pass\")) {\n                         Segment.access$100(this.this$0);\n                     }\n-                    else if (action2.equals(\"error\")) {\n+                    else if (unknownMethodAttributeAction.equals(\"error\")) {\n                         throw new Error(\"Unknown attribute encountered\");\n                     }\n                 }\n                 Segment.access$200(this.this$0).addMethodAttribute(newAttribute);\n             }\n         }\n     }\n     \n     public void visitCode() {\n         Segment.access$200(this.this$0).addCode();\n     }\n     \n-    public void visitFrame(final int arg0, final int arg1, final Object[] arg2, final int arg3, final Object[] arg4) {\n+    public void visitFrame(final int n, final int n2, final Object[] array, final int n3, final Object[] array2) {\n     }\n     \n     public void visitLabel(final Label label) {\n         Segment.access$300(this.this$0).visitLabel(label);\n     }\n     \n-    public void visitLineNumber(final int line, final Label start) {\n+    public void visitLineNumber(final int n, final Label label) {\n         if (!Segment.access$400(this.this$0)) {\n-            Segment.access$200(this.this$0).addLineNumber(line, start);\n+            Segment.access$200(this.this$0).addLineNumber(n, label);\n         }\n     }\n     \n-    public void visitLocalVariable(final String name, final String desc, final String signature, final Label start, final Label end, final int index) {\n+    public void visitLocalVariable(final String s, final String s2, final String s3, final Label label, final Label label2, final int n) {\n         if (!Segment.access$400(this.this$0)) {\n-            Segment.access$200(this.this$0).addLocalVariable(name, desc, signature, start, end, index);\n+            Segment.access$200(this.this$0).addLocalVariable(s, s2, s3, label, label2, n);\n         }\n     }\n     \n-    public void visitMaxs(final int maxStack, final int maxLocals) {\n-        Segment.access$200(this.this$0).addMaxStack(maxStack, maxLocals);\n+    public void visitMaxs(final int n, final int n2) {\n+        Segment.access$200(this.this$0).addMaxStack(n, n2);\n     }\n     \n-    public AnnotationVisitor visitParameterAnnotation(final int parameter, final String desc, final boolean visible) {\n-        return (AnnotationVisitor)new Segment.SegmentAnnotationVisitor(this.this$0, 2, parameter, desc, visible);\n+    public AnnotationVisitor visitParameterAnnotation(final int n, final String s, final boolean b) {\n+        return (AnnotationVisitor)new Segment.SegmentAnnotationVisitor(this.this$0, 2, n, s, b);\n     }\n     \n-    public void visitTryCatchBlock(final Label start, final Label end, final Label handler, final String type) {\n-        Segment.access$200(this.this$0).addHandler(start, end, handler, type);\n+    public void visitTryCatchBlock(final Label label, final Label label2, final Label label3, final String s) {\n+        Segment.access$200(this.this$0).addHandler(label, label2, label3, s);\n     }\n     \n     public void visitEnd() {\n         Segment.access$200(this.this$0).endOfMethod();\n         Segment.access$300(this.this$0).visitEnd();\n     }\n     \n-    public void visitFieldInsn(final int opcode, final String owner, final String name, final String desc) {\n-        Segment.access$300(this.this$0).visitFieldInsn(opcode, owner, name, desc);\n+    public void visitFieldInsn(final int n, final String s, final String s2, final String s3) {\n+        Segment.access$300(this.this$0).visitFieldInsn(n, s, s2, s3);\n     }\n     \n-    public void visitIincInsn(final int var, final int increment) {\n-        Segment.access$300(this.this$0).visitIincInsn(var, increment);\n+    public void visitIincInsn(final int n, final int n2) {\n+        Segment.access$300(this.this$0).visitIincInsn(n, n2);\n     }\n     \n-    public void visitInsn(final int opcode) {\n-        Segment.access$300(this.this$0).visitInsn(opcode);\n+    public void visitInsn(final int n) {\n+        Segment.access$300(this.this$0).visitInsn(n);\n     }\n     \n-    public void visitIntInsn(final int opcode, final int operand) {\n-        Segment.access$300(this.this$0).visitIntInsn(opcode, operand);\n+    public void visitIntInsn(final int n, final int n2) {\n+        Segment.access$300(this.this$0).visitIntInsn(n, n2);\n     }\n     \n-    public void visitJumpInsn(final int opcode, final Label label) {\n-        Segment.access$300(this.this$0).visitJumpInsn(opcode, label);\n+    public void visitJumpInsn(final int n, final Label label) {\n+        Segment.access$300(this.this$0).visitJumpInsn(n, label);\n     }\n     \n-    public void visitLdcInsn(final Object cst) {\n-        Segment.access$300(this.this$0).visitLdcInsn(cst);\n+    public void visitLdcInsn(final Object o) {\n+        Segment.access$300(this.this$0).visitLdcInsn(o);\n     }\n     \n-    public void visitLookupSwitchInsn(final Label dflt, final int[] keys, final Label[] labels) {\n-        Segment.access$300(this.this$0).visitLookupSwitchInsn(dflt, keys, labels);\n+    public void visitLookupSwitchInsn(final Label label, final int[] array, final Label[] array2) {\n+        Segment.access$300(this.this$0).visitLookupSwitchInsn(label, array, array2);\n     }\n     \n-    public void visitMethodInsn(final int opcode, final String owner, final String name, final String desc) {\n-        Segment.access$300(this.this$0).visitMethodInsn(opcode, owner, name, desc);\n+    public void visitMethodInsn(final int n, final String s, final String s2, final String s3) {\n+        Segment.access$300(this.this$0).visitMethodInsn(n, s, s2, s3);\n     }\n     \n-    public void visitMultiANewArrayInsn(final String desc, final int dimensions) {\n-        Segment.access$300(this.this$0).visitMultiANewArrayInsn(desc, dimensions);\n+    public void visitMultiANewArrayInsn(final String s, final int n) {\n+        Segment.access$300(this.this$0).visitMultiANewArrayInsn(s, n);\n     }\n     \n-    public void visitTableSwitchInsn(final int min, final int max, final Label dflt, final Label[] labels) {\n-        Segment.access$300(this.this$0).visitTableSwitchInsn(min, max, dflt, labels);\n+    public void visitTableSwitchInsn(final int n, final int n2, final Label label, final Label[] array) {\n+        Segment.access$300(this.this$0).visitTableSwitchInsn(n, n2, label, array);\n     }\n     \n-    public void visitTypeInsn(final int opcode, final String type) {\n-        Segment.access$300(this.this$0).visitTypeInsn(opcode, type);\n+    public void visitTypeInsn(final int n, final String s) {\n+        Segment.access$300(this.this$0).visitTypeInsn(n, s);\n     }\n     \n-    public void visitVarInsn(final int opcode, final int var) {\n-        Segment.access$300(this.this$0).visitVarInsn(opcode, var);\n+    public void visitVarInsn(final int n, final int n2) {\n+        Segment.access$300(this.this$0).visitVarInsn(n, n2);\n     }\n }\n"}]}
