{"diffoscope-json-version": 1, "source1": "first/CoderBase.class", "source2": "second/CoderBase.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,38 +10,39 @@\n     private final Class<?>[] acceptableOptions;\n     private static final byte[] NONE;\n     \n     protected CoderBase(final Class<?>... acceptableOptions) {\n         this.acceptableOptions = acceptableOptions;\n     }\n     \n-    boolean canAcceptOptions(final Object opts) {\n-        for (final Class<?> c : this.acceptableOptions) {\n-            if (c.isInstance(opts)) {\n+    boolean canAcceptOptions(final Object o) {\n+        final Class<?>[] acceptableOptions = this.acceptableOptions;\n+        for (int length = acceptableOptions.length, i = 0; i < length; ++i) {\n+            if (acceptableOptions[i].isInstance(o)) {\n                 return true;\n             }\n         }\n         return false;\n     }\n     \n-    byte[] getOptionsAsProperties(final Object options) throws IOException {\n+    byte[] getOptionsAsProperties(final Object o) throws IOException {\n         return CoderBase.NONE;\n     }\n     \n-    Object getOptionsFromCoder(final Coder coder, final InputStream in) throws IOException {\n+    Object getOptionsFromCoder(final Coder coder, final InputStream inputStream) throws IOException {\n         return null;\n     }\n     \n     abstract InputStream decode(final String p0, final InputStream p1, final long p2, final Coder p3, final byte[] p4, final int p5) throws IOException;\n     \n-    OutputStream encode(final OutputStream out, final Object options) throws IOException {\n+    OutputStream encode(final OutputStream outputStream, final Object o) throws IOException {\n         throw new UnsupportedOperationException(\"Method doesn't support writing\");\n     }\n     \n-    protected static int numberOptionOrDefault(final Object options, final int defaultValue) {\n-        return (options instanceof Number) ? ((Number)options).intValue() : defaultValue;\n+    protected static int numberOptionOrDefault(final Object o, final int n) {\n+        return (o instanceof Number) ? ((Number)o).intValue() : n;\n     }\n     \n     static {\n         NONE = new byte[0];\n     }\n }\n"}]}
