{"diffoscope-json-version": 1, "source1": "first/SevenZOutputFile.class", "source2": "second/SevenZOutputFile.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -76,14 +76,15 @@\n             if (!this.finished) {\n                 this.finish();\n             }\n         }\n         finally {\n             this.channel.close();\n         }\n+        this.channel.close();\n     }\n     \n     public SevenZArchiveEntry createArchiveEntry(final File inputFile, final String entryName) throws IOException {\n         final SevenZArchiveEntry entry = new SevenZArchiveEntry();\n         entry.setDirectory(inputFile.isDirectory());\n         entry.setName(entryName);\n         entry.setLastModifiedDate(new Date(inputFile.lastModified()));\n@@ -157,16 +158,37 @@\n         int n = 0;\n         while (-1 != (n = inputStream.read(buffer))) {\n             this.write(buffer, 0, n);\n         }\n     }\n     \n     public void write(final Path path, final OpenOption... options) throws IOException {\n-        try (final InputStream in = new BufferedInputStream(Files.newInputStream(path, options))) {\n-            this.write(in);\n+        Throwable t = null;\n+        try {\n+            final InputStream in = new BufferedInputStream(Files.newInputStream(path, options));\n+            try {\n+                this.write(in);\n+            }\n+            finally {\n+                if (in != null) {\n+                    in.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public void finish() throws IOException {\n         if (this.finished) {\n             throw new IOException(\"This archive has already been finished\");\n         }\n@@ -200,15 +222,15 @@\n         return (OutputStream)this.currentOutputStream;\n     }\n     \n     private CountingOutputStream setupFileOutputStream() throws IOException {\n         if (this.files.isEmpty()) {\n             throw new IllegalStateException(\"No current 7z entry\");\n         }\n-        OutputStream out = (OutputStream)new SevenZOutputFile.OutputStreamWrapper(this, (SevenZOutputFile.SevenZOutputFile$1)null);\n+        OutputStream out = (OutputStream)new SevenZOutputFile.OutputStreamWrapper(this, (SevenZOutputFile.OutputStreamWrapper)null);\n         final ArrayList<CountingOutputStream> moreStreams = new ArrayList<CountingOutputStream>();\n         boolean first = true;\n         for (final SevenZMethodConfiguration m : this.getContentMethods(this.files.get(this.files.size() - 1))) {\n             if (!first) {\n                 final CountingOutputStream cos = new CountingOutputStream(out);\n                 moreStreams.add(cos);\n                 out = (OutputStream)cos;\n@@ -275,15 +297,17 @@\n             }\n         }\n         header.write(12);\n         for (final SevenZArchiveEntry entry : this.files) {\n             if (entry.hasStream()) {\n                 final long[] moreSizes = (long[])this.additionalSizes.get(entry);\n                 if (moreSizes != null) {\n-                    for (final long s : moreSizes) {\n+                    long[] array;\n+                    for (int length = (array = moreSizes).length, i = 0; i < length; ++i) {\n+                        final long s = array[i];\n                         this.writeUint64(header, s);\n                     }\n                 }\n                 this.writeUint64(header, entry.getSize());\n             }\n         }\n         header.write(10);\n"}]}
