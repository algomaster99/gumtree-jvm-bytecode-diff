{"diffoscope-json-version": 1, "source1": "first/ZipArchiveInputStream$BoundedInputStream.class", "source2": "second/ZipArchiveInputStream$BoundedInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -28,16 +28,17 @@\n     @Override\n     public int read() throws IOException {\n         if (this.max >= 0L && this.pos >= this.max) {\n             return -1;\n         }\n         final int result = this.in.read();\n         ++this.pos;\n-        ZipArchiveInputStream.access$000(this.this$0, 1);\n-        ZipArchiveInputStream.CurrentEntry.access$208(ZipArchiveInputStream.access$100(this.this$0));\n+        ZipArchiveInputStream.access$0(this.this$0, 1);\n+        final ZipArchiveInputStream.CurrentEntry access$1 = ZipArchiveInputStream.access$1(this.this$0);\n+        ZipArchiveInputStream.CurrentEntry.access$1(access$1, ZipArchiveInputStream.CurrentEntry.access$0(access$1) + 1L);\n         return result;\n     }\n     \n     @Override\n     public int read(final byte[] b) throws IOException {\n         return this.read(b, 0, b.length);\n     }\n@@ -52,16 +53,17 @@\n         }\n         final long maxRead = (this.max >= 0L) ? Math.min(len, this.max - this.pos) : ((long)len);\n         final int bytesRead = this.in.read(b, off, (int)maxRead);\n         if (bytesRead == -1) {\n             return -1;\n         }\n         this.pos += bytesRead;\n-        ZipArchiveInputStream.access$300(this.this$0, bytesRead);\n-        ZipArchiveInputStream.CurrentEntry.access$214(ZipArchiveInputStream.access$100(this.this$0), (long)bytesRead);\n+        ZipArchiveInputStream.access$0(this.this$0, bytesRead);\n+        final ZipArchiveInputStream.CurrentEntry access$1 = ZipArchiveInputStream.access$1(this.this$0);\n+        ZipArchiveInputStream.CurrentEntry.access$1(access$1, ZipArchiveInputStream.CurrentEntry.access$0(access$1) + (long)bytesRead);\n         return bytesRead;\n     }\n     \n     @Override\n     public long skip(final long n) throws IOException {\n         final long toSkip = (this.max >= 0L) ? Math.min(n, this.max - this.pos) : n;\n         final long skippedBytes = IOUtils.skip(this.in, toSkip);\n"}]}
