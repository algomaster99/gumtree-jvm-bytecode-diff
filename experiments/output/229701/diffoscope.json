{"diffoscope-json-version": 1, "source1": "first/GzipCompressorOutputStream.class", "source2": "second/GzipCompressorOutputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,90 +15,90 @@\n     private static final int FCOMMENT = 16;\n     private final OutputStream out;\n     private final Deflater deflater;\n     private final byte[] deflateBuffer;\n     private boolean closed;\n     private final CRC32 crc;\n     \n-    public GzipCompressorOutputStream(final OutputStream out) throws IOException {\n-        this(out, new GzipParameters());\n+    public GzipCompressorOutputStream(final OutputStream outputStream) throws IOException {\n+        this(outputStream, new GzipParameters());\n     }\n     \n-    public GzipCompressorOutputStream(final OutputStream out, final GzipParameters parameters) throws IOException {\n+    public GzipCompressorOutputStream(final OutputStream out, final GzipParameters gzipParameters) throws IOException {\n         this.deflateBuffer = new byte[512];\n         this.crc = new CRC32();\n         this.out = out;\n-        this.deflater = new Deflater(parameters.getCompressionLevel(), true);\n-        this.writeHeader(parameters);\n+        this.deflater = new Deflater(gzipParameters.getCompressionLevel(), true);\n+        this.writeHeader(gzipParameters);\n     }\n     \n-    private void writeHeader(final GzipParameters parameters) throws IOException {\n-        final String filename = parameters.getFilename();\n-        final String comment = parameters.getComment();\n-        final ByteBuffer buffer = ByteBuffer.allocate(10);\n-        buffer.order(ByteOrder.LITTLE_ENDIAN);\n-        buffer.putShort((short)(-29921));\n-        buffer.put((byte)8);\n-        buffer.put((byte)(((filename != null) ? 8 : 0) | ((comment != null) ? 16 : 0)));\n-        buffer.putInt((int)(parameters.getModificationTime() / 1000L));\n-        final int compressionLevel = parameters.getCompressionLevel();\n+    private void writeHeader(final GzipParameters gzipParameters) throws IOException {\n+        final String filename = gzipParameters.getFilename();\n+        final String comment = gzipParameters.getComment();\n+        final ByteBuffer allocate = ByteBuffer.allocate(10);\n+        allocate.order(ByteOrder.LITTLE_ENDIAN);\n+        allocate.putShort((short)(-29921));\n+        allocate.put((byte)8);\n+        allocate.put((byte)(((filename != null) ? 8 : 0) | ((comment != null) ? 16 : 0)));\n+        allocate.putInt((int)(gzipParameters.getModificationTime() / 1000L));\n+        final int compressionLevel = gzipParameters.getCompressionLevel();\n         if (compressionLevel == 9) {\n-            buffer.put((byte)2);\n+            allocate.put((byte)2);\n         }\n         else if (compressionLevel == 1) {\n-            buffer.put((byte)4);\n+            allocate.put((byte)4);\n         }\n         else {\n-            buffer.put((byte)0);\n+            allocate.put((byte)0);\n         }\n-        buffer.put((byte)parameters.getOperatingSystem());\n-        this.out.write(buffer.array());\n+        allocate.put((byte)gzipParameters.getOperatingSystem());\n+        this.out.write(allocate.array());\n         if (filename != null) {\n             this.out.write(filename.getBytes(\"ISO-8859-1\"));\n             this.out.write(0);\n         }\n         if (comment != null) {\n             this.out.write(comment.getBytes(\"ISO-8859-1\"));\n             this.out.write(0);\n         }\n     }\n     \n     private void writeTrailer() throws IOException {\n-        final ByteBuffer buffer = ByteBuffer.allocate(8);\n-        buffer.order(ByteOrder.LITTLE_ENDIAN);\n-        buffer.putInt((int)this.crc.getValue());\n-        buffer.putInt(this.deflater.getTotalIn());\n-        this.out.write(buffer.array());\n+        final ByteBuffer allocate = ByteBuffer.allocate(8);\n+        allocate.order(ByteOrder.LITTLE_ENDIAN);\n+        allocate.putInt((int)this.crc.getValue());\n+        allocate.putInt(this.deflater.getTotalIn());\n+        this.out.write(allocate.array());\n     }\n     \n-    public void write(final int b) throws IOException {\n-        this.write(new byte[] { (byte)(b & 0xFF) }, 0, 1);\n+    public void write(final int n) throws IOException {\n+        this.write(new byte[] { (byte)(n & 0xFF) }, 0, 1);\n     }\n     \n-    public void write(final byte[] buffer) throws IOException {\n-        this.write(buffer, 0, buffer.length);\n+    public void write(final byte[] array) throws IOException {\n+        this.write(array, 0, array.length);\n     }\n     \n-    public void write(final byte[] buffer, final int offset, final int length) throws IOException {\n+    public void write(final byte[] array, final int n, final int n2) throws IOException {\n         if (this.deflater.finished()) {\n             throw new IOException(\"Cannot write more data, the end of the compressed data stream has been reached\");\n         }\n-        if (length > 0) {\n-            this.deflater.setInput(buffer, offset, length);\n+        if (n2 > 0) {\n+            this.deflater.setInput(array, n, n2);\n             while (!this.deflater.needsInput()) {\n                 this.deflate();\n             }\n-            this.crc.update(buffer, offset, length);\n+            this.crc.update(array, n, n2);\n         }\n     }\n     \n     private void deflate() throws IOException {\n-        final int length = this.deflater.deflate(this.deflateBuffer, 0, this.deflateBuffer.length);\n-        if (length > 0) {\n-            this.out.write(this.deflateBuffer, 0, length);\n+        final int deflate = this.deflater.deflate(this.deflateBuffer, 0, this.deflateBuffer.length);\n+        if (deflate > 0) {\n+            this.out.write(this.deflateBuffer, 0, deflate);\n         }\n     }\n     \n     public void finish() throws IOException {\n         if (!this.deflater.finished()) {\n             this.deflater.finish();\n             while (!this.deflater.finished()) {\n"}]}
