{"diffoscope-json-version": 1, "source1": "first/IndentLevel.class", "source2": "second/IndentLevel.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -3,80 +3,80 @@\n \n import java.util.BitSet;\n \n public class IndentLevel\n {\n     private final BitSet levels;\n     \n-    public IndentLevel(final int indent) {\n-        (this.levels = new BitSet()).set(indent);\n+    public IndentLevel(final int bitIndex) {\n+        (this.levels = new BitSet()).set(bitIndex);\n     }\n     \n-    public IndentLevel(final IndentLevel base, final int... offsets) {\n+    public IndentLevel(final IndentLevel indentLevel, final int... array) {\n         this.levels = new BitSet();\n-        final BitSet src = base.levels;\n-        for (int i = src.nextSetBit(0); i >= 0; i = src.nextSetBit(i + 1)) {\n-            for (final int offset : offsets) {\n-                this.levels.set(i + offset);\n+        final BitSet levels = indentLevel.levels;\n+        for (int i = levels.nextSetBit(0); i >= 0; i = levels.nextSetBit(i + 1)) {\n+            for (int length = array.length, j = 0; j < length; ++j) {\n+                this.levels.set(i + array[j]);\n             }\n         }\n     }\n     \n     private IndentLevel() {\n         this.levels = new BitSet();\n     }\n     \n     public final boolean isMultiLevel() {\n         return this.levels.cardinality() > 1;\n     }\n     \n-    public boolean isAcceptable(final int indent) {\n-        return this.levels.get(indent);\n+    public boolean isAcceptable(final int bitIndex) {\n+        return this.levels.get(bitIndex);\n     }\n     \n-    public boolean isGreaterThan(final int indent) {\n-        return this.levels.nextSetBit(0) > indent;\n+    public boolean isGreaterThan(final int n) {\n+        return this.levels.nextSetBit(0) > n;\n     }\n     \n-    public static IndentLevel addAcceptable(final IndentLevel base, final int... additions) {\n-        final IndentLevel result = new IndentLevel();\n-        result.levels.or(base.levels);\n-        for (final int addition : additions) {\n-            result.levels.set(addition);\n+    public static IndentLevel addAcceptable(final IndentLevel indentLevel, final int... array) {\n+        final IndentLevel indentLevel2 = new IndentLevel();\n+        indentLevel2.levels.or(indentLevel.levels);\n+        for (int length = array.length, i = 0; i < length; ++i) {\n+            indentLevel2.levels.set(array[i]);\n         }\n-        return result;\n+        return indentLevel2;\n     }\n     \n-    public static IndentLevel addAcceptable(final IndentLevel base, final IndentLevel addition) {\n-        final IndentLevel result = new IndentLevel();\n-        result.levels.or(base.levels);\n-        result.levels.or(addition.levels);\n-        return result;\n+    public static IndentLevel addAcceptable(final IndentLevel indentLevel, final IndentLevel indentLevel2) {\n+        final IndentLevel indentLevel3 = new IndentLevel();\n+        indentLevel3.levels.or(indentLevel.levels);\n+        indentLevel3.levels.or(indentLevel2.levels);\n+        return indentLevel3;\n     }\n     \n     public int getFirstIndentLevel() {\n         return this.levels.nextSetBit(0);\n     }\n     \n     public int getLastIndentLevel() {\n         return this.levels.length() - 1;\n     }\n     \n     @Override\n     public String toString() {\n-        String result;\n+        String s;\n         if (this.levels.cardinality() == 1) {\n-            result = String.valueOf(this.levels.nextSetBit(0));\n+            s = String.valueOf(this.levels.nextSetBit(0));\n         }\n         else {\n             final StringBuilder sb = new StringBuilder(50);\n             for (int i = this.levels.nextSetBit(0); i >= 0; i = this.levels.nextSetBit(i + 1)) {\n                 if (sb.length() > 0) {\n                     sb.append(\", \");\n                 }\n                 sb.append(i);\n             }\n-            result = sb.toString();\n+            s = sb.toString();\n         }\n-        return result;\n+        return s;\n     }\n }\n"}]}
