{"diffoscope-json-version": 1, "source1": "first/SubnetUtils$SubnetInfo.class", "source2": "second/SubnetUtils$SubnetInfo.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,19 +6,19 @@\n     private static final long UNSIGNED_INT_MASK = 4294967295L;\n     \n     private SubnetInfo(final SubnetUtils this$0) {\n         this.this$0 = this$0;\n     }\n     \n     public int asInteger(final String address) {\n-        return SubnetUtils.access$000(address);\n+        return SubnetUtils.access$0(address);\n     }\n     \n     private long broadcastLong() {\n-        return (long)SubnetUtils.access$100(this.this$0) & 0xFFFFFFFFL;\n+        return (long)SubnetUtils.access$1(this.this$0) & 0xFFFFFFFFL;\n     }\n     \n     private String format(final int[] octets) {\n         final int last = octets.length - 1;\n         final StringBuilder builder = new StringBuilder();\n         int i = 0;\n         while (true) {\n@@ -29,15 +29,15 @@\n             builder.append('.');\n             ++i;\n         }\n         return builder.toString();\n     }\n     \n     public String getAddress() {\n-        return this.format(this.toArray(SubnetUtils.access$200(this.this$0)));\n+        return this.format(this.toArray(SubnetUtils.access$2(this.this$0)));\n     }\n     \n     @Deprecated\n     public int getAddressCount() {\n         final long countLong = this.getAddressCountLong();\n         if (countLong > 2147483647L) {\n             throw new RuntimeException(\"Count is larger than an integer: \" + countLong);\n@@ -61,69 +61,69 @@\n         for (int add = this.low(), j = 0; add <= this.high(); ++add, ++j) {\n             addresses[j] = this.format(this.toArray(add));\n         }\n         return addresses;\n     }\n     \n     public String getBroadcastAddress() {\n-        return this.format(this.toArray(SubnetUtils.access$100(this.this$0)));\n+        return this.format(this.toArray(SubnetUtils.access$1(this.this$0)));\n     }\n     \n     public String getCidrSignature() {\n-        return this.format(this.toArray(SubnetUtils.access$200(this.this$0))) + \"/\" + Integer.bitCount(SubnetUtils.access$300(this.this$0));\n+        return String.valueOf(this.format(this.toArray(SubnetUtils.access$2(this.this$0)))) + \"/\" + Integer.bitCount(SubnetUtils.access$3(this.this$0));\n     }\n     \n     public String getHighAddress() {\n         return this.format(this.toArray(this.high()));\n     }\n     \n     public String getLowAddress() {\n         return this.format(this.toArray(this.low()));\n     }\n     \n     public String getNetmask() {\n-        return this.format(this.toArray(SubnetUtils.access$300(this.this$0)));\n+        return this.format(this.toArray(SubnetUtils.access$3(this.this$0)));\n     }\n     \n     public String getNetworkAddress() {\n-        return this.format(this.toArray(SubnetUtils.access$400(this.this$0)));\n+        return this.format(this.toArray(SubnetUtils.access$4(this.this$0)));\n     }\n     \n     public String getNextAddress() {\n-        return this.format(this.toArray(SubnetUtils.access$200(this.this$0) + 1));\n+        return this.format(this.toArray(SubnetUtils.access$2(this.this$0) + 1));\n     }\n     \n     public String getPreviousAddress() {\n-        return this.format(this.toArray(SubnetUtils.access$200(this.this$0) - 1));\n+        return this.format(this.toArray(SubnetUtils.access$2(this.this$0) - 1));\n     }\n     \n     private int high() {\n-        return this.this$0.isInclusiveHostCount() ? SubnetUtils.access$100(this.this$0) : ((this.broadcastLong() - this.networkLong() > 1L) ? (SubnetUtils.access$100(this.this$0) - 1) : 0);\n+        return this.this$0.isInclusiveHostCount() ? SubnetUtils.access$1(this.this$0) : ((this.broadcastLong() - this.networkLong() > 1L) ? (SubnetUtils.access$1(this.this$0) - 1) : 0);\n     }\n     \n     public boolean isInRange(final int address) {\n         if (address == 0) {\n             return false;\n         }\n         final long addLong = (long)address & 0xFFFFFFFFL;\n         final long lowLong = (long)this.low() & 0xFFFFFFFFL;\n         final long highLong = (long)this.high() & 0xFFFFFFFFL;\n         return addLong >= lowLong && addLong <= highLong;\n     }\n     \n     public boolean isInRange(final String address) {\n-        return this.isInRange(SubnetUtils.access$000(address));\n+        return this.isInRange(SubnetUtils.access$0(address));\n     }\n     \n     private int low() {\n-        return this.this$0.isInclusiveHostCount() ? SubnetUtils.access$400(this.this$0) : ((this.broadcastLong() - this.networkLong() > 1L) ? (SubnetUtils.access$400(this.this$0) + 1) : 0);\n+        return this.this$0.isInclusiveHostCount() ? SubnetUtils.access$4(this.this$0) : ((this.broadcastLong() - this.networkLong() > 1L) ? (SubnetUtils.access$4(this.this$0) + 1) : 0);\n     }\n     \n     private long networkLong() {\n-        return (long)SubnetUtils.access$400(this.this$0) & 0xFFFFFFFFL;\n+        return (long)SubnetUtils.access$4(this.this$0) & 0xFFFFFFFFL;\n     }\n     \n     private int[] toArray(final int val) {\n         final int[] ret = new int[4];\n         for (int j = 3; j >= 0; --j) {\n             final int[] array = ret;\n             final int n = j;\n"}]}
