{"diffoscope-json-version": 1, "source1": "first/CharSetUtils.class", "source2": "second/CharSetUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,106 +1,105 @@\n \n package org.apache.commons.lang3;\n \n public class CharSetUtils\n {\n-    public static String squeeze(final String str, final String... set) {\n-        if (StringUtils.isEmpty((CharSequence)str) || deepEmpty(set)) {\n-            return str;\n-        }\n-        final CharSet chars = CharSet.getInstance(set);\n-        final StringBuilder buffer = new StringBuilder(str.length());\n-        final char[] chrs = str.toCharArray();\n-        final int sz = chrs.length;\n-        char lastChar = chrs[0];\n-        char ch = ' ';\n-        Character inChars = null;\n-        Character notInChars = null;\n-        buffer.append(lastChar);\n-        for (int i = 1; i < sz; ++i) {\n-            ch = chrs[i];\n-            if (ch == lastChar) {\n-                if (inChars != null && ch == inChars) {\n+    public static String squeeze(final String s, final String... array) {\n+        if (StringUtils.isEmpty((CharSequence)s) || deepEmpty(array)) {\n+            return s;\n+        }\n+        final CharSet instance = CharSet.getInstance(array);\n+        final StringBuilder sb = new StringBuilder(s.length());\n+        final char[] charArray = s.toCharArray();\n+        final int length = charArray.length;\n+        char c = charArray[0];\n+        Character value = null;\n+        Character value2 = null;\n+        sb.append(c);\n+        for (int i = 1; i < length; ++i) {\n+            final char c2 = charArray[i];\n+            if (c2 == c) {\n+                if (value != null && c2 == value) {\n                     continue;\n                 }\n-                if (notInChars == null || ch != notInChars) {\n-                    if (chars.contains(ch)) {\n-                        inChars = Character.valueOf(ch);\n+                if (value2 == null || c2 != value2) {\n+                    if (instance.contains(c2)) {\n+                        value = Character.valueOf(c2);\n                         continue;\n                     }\n-                    notInChars = Character.valueOf(ch);\n+                    value2 = Character.valueOf(c2);\n                 }\n             }\n-            buffer.append(ch);\n-            lastChar = ch;\n+            sb.append(c2);\n+            c = c2;\n         }\n-        return buffer.toString();\n+        return sb.toString();\n     }\n     \n-    public static boolean containsAny(final String str, final String... set) {\n-        if (StringUtils.isEmpty((CharSequence)str) || deepEmpty(set)) {\n+    public static boolean containsAny(final String s, final String... array) {\n+        if (StringUtils.isEmpty((CharSequence)s) || deepEmpty(array)) {\n             return false;\n         }\n-        final CharSet chars = CharSet.getInstance(set);\n-        for (final char c : str.toCharArray()) {\n-            if (chars.contains(c)) {\n+        final CharSet instance = CharSet.getInstance(array);\n+        final char[] charArray = s.toCharArray();\n+        for (int length = charArray.length, i = 0; i < length; ++i) {\n+            if (instance.contains(charArray[i])) {\n                 return true;\n             }\n         }\n         return false;\n     }\n     \n-    public static int count(final String str, final String... set) {\n-        if (StringUtils.isEmpty((CharSequence)str) || deepEmpty(set)) {\n+    public static int count(final String s, final String... array) {\n+        if (StringUtils.isEmpty((CharSequence)s) || deepEmpty(array)) {\n             return 0;\n         }\n-        final CharSet chars = CharSet.getInstance(set);\n-        int count = 0;\n-        for (final char c : str.toCharArray()) {\n-            if (chars.contains(c)) {\n-                ++count;\n+        final CharSet instance = CharSet.getInstance(array);\n+        int n = 0;\n+        final char[] charArray = s.toCharArray();\n+        for (int length = charArray.length, i = 0; i < length; ++i) {\n+            if (instance.contains(charArray[i])) {\n+                ++n;\n             }\n         }\n-        return count;\n+        return n;\n     }\n     \n-    public static String keep(final String str, final String... set) {\n-        if (str == null) {\n+    public static String keep(final String s, final String... array) {\n+        if (s == null) {\n             return null;\n         }\n-        if (str.isEmpty() || deepEmpty(set)) {\n+        if (s.isEmpty() || deepEmpty(array)) {\n             return \"\";\n         }\n-        return modify(str, set, true);\n+        return modify(s, array, true);\n     }\n     \n-    public static String delete(final String str, final String... set) {\n-        if (StringUtils.isEmpty((CharSequence)str) || deepEmpty(set)) {\n-            return str;\n+    public static String delete(final String s, final String... array) {\n+        if (StringUtils.isEmpty((CharSequence)s) || deepEmpty(array)) {\n+            return s;\n         }\n-        return modify(str, set, false);\n+        return modify(s, array, false);\n     }\n     \n-    private static String modify(final String str, final String[] set, final boolean expect) {\n-        final CharSet chars = CharSet.getInstance(set);\n-        final StringBuilder buffer = new StringBuilder(str.length());\n-        final char[] charArray;\n-        final char[] chrs = charArray = str.toCharArray();\n-        for (final char chr : charArray) {\n-            if (chars.contains(chr) == expect) {\n-                buffer.append(chr);\n+    private static String modify(final String s, final String[] array, final boolean b) {\n+        final CharSet instance = CharSet.getInstance(array);\n+        final StringBuilder sb = new StringBuilder(s.length());\n+        for (final char c : s.toCharArray()) {\n+            if (instance.contains(c) == b) {\n+                sb.append(c);\n             }\n         }\n-        return buffer.toString();\n+        return sb.toString();\n     }\n     \n-    private static boolean deepEmpty(final String[] strings) {\n-        if (strings != null) {\n-            for (final String s : strings) {\n-                if (StringUtils.isNotEmpty((CharSequence)s)) {\n+    private static boolean deepEmpty(final String[] array) {\n+        if (array != null) {\n+            for (int length = array.length, i = 0; i < length; ++i) {\n+                if (StringUtils.isNotEmpty((CharSequence)array[i])) {\n                     return false;\n                 }\n             }\n         }\n         return true;\n     }\n }\n"}]}
