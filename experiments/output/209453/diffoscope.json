{"diffoscope-json-version": 1, "source1": "first/DeletingPathVisitor.class", "source2": "second/DeletingPathVisitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -21,81 +21,77 @@\n         return new DeletingPathVisitor(Counters.bigIntegerPathCounters(), new String[0]);\n     }\n     \n     public static DeletingPathVisitor withLongCounters() {\n         return new DeletingPathVisitor(Counters.longPathCounters(), new String[0]);\n     }\n     \n-    public DeletingPathVisitor(final Counters.PathCounters pathCounter, final DeleteOption[] deleteOption, final String... skip) {\n-        this(pathCounter, PathUtils.NOFOLLOW_LINK_OPTION_ARRAY, deleteOption, skip);\n+    public DeletingPathVisitor(final Counters.PathCounters pathCounters, final DeleteOption[] array, final String... array2) {\n+        this(pathCounters, PathUtils.NOFOLLOW_LINK_OPTION_ARRAY, array, array2);\n     }\n     \n-    public DeletingPathVisitor(final Counters.PathCounters pathCounter, final LinkOption[] linkOptions, final DeleteOption[] deleteOption, final String... skip) {\n-        super(pathCounter);\n-        final String[] temp = (skip != null) ? ((String[])skip.clone()) : DeletingPathVisitor.EMPTY_STRING_ARRAY;\n-        Arrays.sort(temp);\n-        this.skip = temp;\n-        this.overrideReadOnly = StandardDeleteOption.overrideReadOnly(deleteOption);\n-        this.linkOptions = ((linkOptions == null) ? PathUtils.NOFOLLOW_LINK_OPTION_ARRAY : ((LinkOption[])linkOptions.clone()));\n+    public DeletingPathVisitor(final Counters.PathCounters pathCounters, final LinkOption[] array, final DeleteOption[] array2, final String... array3) {\n+        super(pathCounters);\n+        final String[] array4 = (array3 != null) ? ((String[])array3.clone()) : DeletingPathVisitor.EMPTY_STRING_ARRAY;\n+        Arrays.sort(array4);\n+        this.skip = array4;\n+        this.overrideReadOnly = StandardDeleteOption.overrideReadOnly(array2);\n+        this.linkOptions = ((array == null) ? PathUtils.NOFOLLOW_LINK_OPTION_ARRAY : ((LinkOption[])array.clone()));\n     }\n     \n-    public DeletingPathVisitor(final Counters.PathCounters pathCounter, final String... skip) {\n-        this(pathCounter, PathUtils.EMPTY_DELETE_OPTION_ARRAY, skip);\n+    public DeletingPathVisitor(final Counters.PathCounters pathCounters, final String... array) {\n+        this(pathCounters, PathUtils.EMPTY_DELETE_OPTION_ARRAY, array);\n     }\n     \n     private boolean accept(final Path path) {\n         return Arrays.binarySearch(this.skip, Objects.toString(path.getFileName(), null)) < 0;\n     }\n     \n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n             return true;\n         }\n-        if (!super.equals(obj)) {\n+        if (!super.equals(o)) {\n             return false;\n         }\n-        if (this.getClass() != obj.getClass()) {\n+        if (this.getClass() != o.getClass()) {\n             return false;\n         }\n-        final DeletingPathVisitor other = (DeletingPathVisitor)obj;\n-        return this.overrideReadOnly == other.overrideReadOnly && Arrays.equals(this.skip, other.skip);\n+        final DeletingPathVisitor deletingPathVisitor = (DeletingPathVisitor)o;\n+        return this.overrideReadOnly == deletingPathVisitor.overrideReadOnly && Arrays.equals(this.skip, deletingPathVisitor.skip);\n     }\n     \n     public int hashCode() {\n-        final int prime = 31;\n-        int result = super.hashCode();\n-        result = 31 * result + Arrays.hashCode(this.skip);\n-        result = 31 * result + Objects.hash(Boolean.valueOf(this.overrideReadOnly));\n-        return result;\n+        return 31 * (31 * super.hashCode() + Arrays.hashCode(this.skip)) + Objects.hash(Boolean.valueOf(this.overrideReadOnly));\n     }\n     \n-    public FileVisitResult postVisitDirectory(final Path dir, final IOException exc) throws IOException {\n-        if (PathUtils.isEmptyDirectory(dir)) {\n-            Files.deleteIfExists(dir);\n+    public FileVisitResult postVisitDirectory(final Path path, final IOException ex) throws IOException {\n+        if (PathUtils.isEmptyDirectory(path)) {\n+            Files.deleteIfExists(path);\n         }\n-        return super.postVisitDirectory(dir, exc);\n+        return super.postVisitDirectory(path, ex);\n     }\n     \n-    public FileVisitResult preVisitDirectory(final Path dir, final BasicFileAttributes attrs) throws IOException {\n-        super.preVisitDirectory(dir, attrs);\n-        return this.accept(dir) ? FileVisitResult.CONTINUE : FileVisitResult.SKIP_SUBTREE;\n+    public FileVisitResult preVisitDirectory(final Path path, final BasicFileAttributes basicFileAttributes) throws IOException {\n+        super.preVisitDirectory(path, basicFileAttributes);\n+        return this.accept(path) ? FileVisitResult.CONTINUE : FileVisitResult.SKIP_SUBTREE;\n     }\n     \n-    public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {\n-        if (this.accept(file)) {\n-            if (Files.exists(file, this.linkOptions)) {\n+    public FileVisitResult visitFile(final Path path, final BasicFileAttributes basicFileAttributes) throws IOException {\n+        if (this.accept(path)) {\n+            if (Files.exists(path, this.linkOptions)) {\n                 if (this.overrideReadOnly) {\n-                    PathUtils.setReadOnly(file, false, this.linkOptions);\n+                    PathUtils.setReadOnly(path, false, this.linkOptions);\n                 }\n-                Files.deleteIfExists(file);\n+                Files.deleteIfExists(path);\n             }\n-            if (Files.isSymbolicLink(file)) {\n+            if (Files.isSymbolicLink(path)) {\n                 try {\n-                    Files.delete(file);\n+                    Files.delete(path);\n                 }\n                 catch (final NoSuchFileException ex) {}\n             }\n         }\n-        this.updateFileCounters(file, attrs);\n+        this.updateFileCounters(path, basicFileAttributes);\n         return FileVisitResult.CONTINUE;\n     }\n }\n"}]}
