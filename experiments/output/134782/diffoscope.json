{"diffoscope-json-version": 1, "source1": "first/ConstantUtf8.class", "source2": "second/ConstantUtf8.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,37 +12,51 @@\n     private static volatile int hits;\n     private static volatile int skipped;\n     private static final String SYS_PROP_CACHE_MAX_ENTRIES = \"bcel.maxcached\";\n     private static final String SYS_PROP_CACHE_MAX_ENTRY_SIZE = \"bcel.maxcached.size\";\n     private static final String SYS_PROP_STATISTICS = \"bcel.statistics\";\n     private final String value;\n     \n+    static {\n+        ConstantUtf8.considered = 0;\n+        ConstantUtf8.created = 0;\n+        ConstantUtf8.hits = 0;\n+        ConstantUtf8.skipped = 0;\n+        if (ConstantUtf8.Cache.access$0()) {\n+            Runtime.getRuntime().addShutdownHook((Thread)new ConstantUtf8.ConstantUtf8$1());\n+        }\n+    }\n+    \n     public static synchronized void clearCache() {\n-        ConstantUtf8.Cache.access$200().clear();\n+        ConstantUtf8.Cache.access$2().clear();\n     }\n     \n     static synchronized void clearStats() {\n         ConstantUtf8.hits = (ConstantUtf8.considered = (ConstantUtf8.skipped = (ConstantUtf8.created = 0)));\n     }\n     \n     public static ConstantUtf8 getCachedInstance(final String value) {\n-        if (value.length() > ConstantUtf8.Cache.access$300()) {\n+        if (value.length() > ConstantUtf8.Cache.access$3()) {\n             ++ConstantUtf8.skipped;\n             return new ConstantUtf8(value);\n         }\n         ++ConstantUtf8.considered;\n         synchronized (ConstantUtf8.class) {\n-            ConstantUtf8 result = (ConstantUtf8)ConstantUtf8.Cache.access$200().get(value);\n+            ConstantUtf8 result = (ConstantUtf8)ConstantUtf8.Cache.access$2().get(value);\n             if (result != null) {\n                 ++ConstantUtf8.hits;\n-                return result;\n+                final ConstantUtf8 constantUtf8 = result;\n+                monitorexit(ConstantUtf8.class);\n+                return constantUtf8;\n             }\n             result = new ConstantUtf8(value);\n-            ConstantUtf8.Cache.access$200().put(value, result);\n-            return result;\n+            ConstantUtf8.Cache.access$2().put(value, result);\n+            final ConstantUtf8 constantUtf9 = result;\n+            monitorexit(ConstantUtf8.class);\n+            return constantUtf9;\n         }\n     }\n     \n     public static ConstantUtf8 getInstance(final DataInput dataInput) throws IOException {\n         return getInstance(dataInput.readUTF());\n     }\n     \n@@ -50,15 +64,15 @@\n         return ConstantUtf8.Cache.isEnabled() ? getCachedInstance(value) : new ConstantUtf8(value);\n     }\n     \n     static void printStats() {\n         final String prefix = \"[Apache Commons BCEL]\";\n         System.err.printf(\"%s Cache hit %,d/%,d, %d skipped.%n\", \"[Apache Commons BCEL]\", Integer.valueOf(ConstantUtf8.hits), Integer.valueOf(ConstantUtf8.considered), Integer.valueOf(ConstantUtf8.skipped));\n         System.err.printf(\"%s Total of %,d ConstantUtf8 objects created.%n\", \"[Apache Commons BCEL]\", Integer.valueOf(ConstantUtf8.created));\n-        System.err.printf(\"%s Configuration: %s=%,d, %s=%,d.%n\", \"[Apache Commons BCEL]\", \"bcel.maxcached\", Integer.valueOf(ConstantUtf8.Cache.access$000()), \"bcel.maxcached.size\", Integer.valueOf(ConstantUtf8.Cache.access$300()));\n+        System.err.printf(\"%s Configuration: %s=%,d, %s=%,d.%n\", \"[Apache Commons BCEL]\", \"bcel.maxcached\", Integer.valueOf(ConstantUtf8.Cache.access$1()), \"bcel.maxcached.size\", Integer.valueOf(ConstantUtf8.Cache.access$3()));\n     }\n     \n     public ConstantUtf8(final ConstantUtf8 constantUtf8) {\n         this(constantUtf8.getBytes());\n     }\n     \n     ConstantUtf8(final DataInput dataInput) throws IOException {\n@@ -91,20 +105,10 @@\n     \n     @Deprecated\n     public void setBytes(final String bytes) {\n         throw new UnsupportedOperationException();\n     }\n     \n     public String toString() {\n-        return super.toString() + \"(\\\"\" + Utility.replace(this.value, \"\\n\", \"\\\\n\") + \"\\\")\";\n-    }\n-    \n-    static {\n-        ConstantUtf8.considered = 0;\n-        ConstantUtf8.created = 0;\n-        ConstantUtf8.hits = 0;\n-        ConstantUtf8.skipped = 0;\n-        if (ConstantUtf8.Cache.access$100()) {\n-            Runtime.getRuntime().addShutdownHook((Thread)new ConstantUtf8.ConstantUtf8$1());\n-        }\n+        return String.valueOf(super.toString()) + \"(\\\"\" + Utility.replace(this.value, \"\\n\", \"\\\\n\") + \"\\\")\";\n     }\n }\n"}]}
