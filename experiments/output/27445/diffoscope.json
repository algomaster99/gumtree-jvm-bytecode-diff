{"diffoscope-json-version": 1, "source1": "first/ZipSplitOutputStream.class", "source2": "second/ZipSplitOutputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,229 +1,229 @@\n-  SHA-256 checksum a57a2ade7998a40fad6dab108bd718ce83d77f3c069711fbffa2a5d362859dd2\n+  SHA-256 checksum 808214ad542b3bd127d43ca5b14b5d941c01404e92a84d7fc904e7c9e6626b59\n   Compiled from \"ZipSplitOutputStream.java\"\n class org.apache.commons.compress.archivers.zip.ZipSplitOutputStream extends java.io.OutputStream\n   minor version: 0\n   major version: 53\n   flags: (0x0020) ACC_SUPER\n-  this_class: #3                          // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream\n-  super_class: #52                        // java/io/OutputStream\n+  this_class: #8                          // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream\n+  super_class: #2                         // java/io/OutputStream\n   interfaces: 0, fields: 9, methods: 12, attributes: 3\n Constant pool:\n-    #1 = Methodref          #52.#114      // java/io/OutputStream.\"<init>\":()V\n-    #2 = Fieldref           #3.#115       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.singleByte:[B\n-    #3 = Class              #116          // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream\n-    #4 = Long               65536l\n-    #6 = Long               4294967295l\n-    #8 = Class              #117          // java/lang/IllegalArgumentException\n-    #9 = String             #118          // zip split segment size should between 64K and 4,294,967,295\n-   #10 = Methodref          #8.#119       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #11 = Fieldref           #3.#120       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.zipFile:Ljava/io/File;\n-   #12 = Fieldref           #3.#121       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.splitSize:J\n-   #13 = Methodref          #31.#122      // java/io/File.toPath:()Ljava/nio/file/Path;\n-   #14 = Class              #123          // java/nio/file/OpenOption\n-   #15 = Methodref          #124.#125     // java/nio/file/Files.newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n-   #16 = Fieldref           #3.#126       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.outputStream:Ljava/io/OutputStream;\n-   #17 = Methodref          #3.#127       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.writeZipSplitSignature:()V\n-   #18 = String             #128          // The unsplittable content size is bigger than the split segment size\n-   #19 = Fieldref           #3.#129       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.currentSplitSegmentBytesWritten:J\n-   #20 = Methodref          #3.#130       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.openNewSplitSegment:()V\n-   #21 = Methodref          #3.#131       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.write:([B)V\n-   #22 = Methodref          #3.#132       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.write:([BII)V\n-   #23 = Methodref          #52.#132      // java/io/OutputStream.write:([BII)V\n-   #24 = Fieldref           #3.#133       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.finished:Z\n-   #25 = Methodref          #3.#134       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.finish:()V\n-   #26 = Class              #135          // java/io/IOException\n-   #27 = String             #136          // This archive has already been finished\n-   #28 = Methodref          #26.#119      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #29 = Methodref          #31.#137      // java/io/File.getName:()Ljava/lang/String;\n-   #30 = Methodref          #138.#139     // org/apache/commons/compress/utils/FileNameUtils.getBaseName:(Ljava/lang/String;)Ljava/lang/String;\n-   #31 = Class              #140          // java/io/File\n-   #32 = Methodref          #31.#141      // java/io/File.getParentFile:()Ljava/io/File;\n-   #33 = InvokeDynamic      #0:#145       // #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n-   #34 = Methodref          #31.#146      // java/io/File.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-   #35 = Methodref          #52.#147      // java/io/OutputStream.close:()V\n-   #36 = Methodref          #31.#148      // java/io/File.renameTo:(Ljava/io/File;)Z\n-   #37 = InvokeDynamic      #1:#150       // #1:makeConcatWithConstants:(Ljava/io/File;Ljava/io/File;)Ljava/lang/String;\n-   #38 = Fieldref           #3.#151       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.currentSplitSegmentIndex:I\n-   #39 = Methodref          #152.#153     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #40 = Methodref          #3.#154       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.createNewSplitSegmentFile:(Ljava/lang/Integer;)Ljava/io/File;\n-   #41 = Fieldref           #155.#156     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n-   #42 = Methodref          #52.#131      // java/io/OutputStream.write:([B)V\n-   #43 = Methodref          #152.#157     // java/lang/Integer.intValue:()I\n-   #44 = String             #158          // .z\n-   #45 = InvokeDynamic      #2:#160       // #2:makeConcatWithConstants:(Ljava/lang/String;I)Ljava/lang/String;\n-   #46 = InvokeDynamic      #3:#160       // #3:makeConcatWithConstants:(Ljava/lang/String;I)Ljava/lang/String;\n-   #47 = Methodref          #31.#162      // java/io/File.getParent:()Ljava/lang/String;\n-   #48 = InvokeDynamic      #3:#163       // #3:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-   #49 = Methodref          #31.#164      // java/io/File.\"<init>\":(Ljava/lang/String;Ljava/lang/String;)V\n-   #50 = Methodref          #31.#165      // java/io/File.exists:()Z\n-   #51 = InvokeDynamic      #4:#163       // #4:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-   #52 = Class              #167          // java/io/OutputStream\n-   #53 = Utf8               outputStream\n-   #54 = Utf8               Ljava/io/OutputStream;\n-   #55 = Utf8               zipFile\n-   #56 = Utf8               Ljava/io/File;\n-   #57 = Utf8               splitSize\n-   #58 = Utf8               J\n-   #59 = Utf8               currentSplitSegmentIndex\n-   #60 = Utf8               I\n-   #61 = Utf8               currentSplitSegmentBytesWritten\n-   #62 = Utf8               finished\n-   #63 = Utf8               Z\n-   #64 = Utf8               singleByte\n-   #65 = Utf8               [B\n-   #66 = Utf8               ZIP_SEGMENT_MIN_SIZE\n-   #67 = Utf8               ConstantValue\n-   #68 = Utf8               ZIP_SEGMENT_MAX_SIZE\n-   #69 = Utf8               <init>\n-   #70 = Utf8               (Ljava/io/File;J)V\n-   #71 = Utf8               Code\n-   #72 = Utf8               LineNumberTable\n-   #73 = Utf8               LocalVariableTable\n-   #74 = Utf8               this\n-   #75 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipSplitOutputStream;\n-   #76 = Utf8               StackMapTable\n-   #77 = Utf8               Exceptions\n-   #78 = Utf8               prepareToWriteUnsplittableContent\n-   #79 = Utf8               (J)V\n-   #80 = Utf8               unsplittableContentSize\n-   #81 = Utf8               bytesRemainingInThisSegment\n-   #82 = Utf8               write\n-   #83 = Utf8               (I)V\n-   #84 = Utf8               i\n-   #85 = Utf8               ([B)V\n-   #86 = Utf8               b\n-   #87 = Utf8               ([BII)V\n-   #88 = Utf8               bytesToWriteForThisSegment\n-   #89 = Utf8               off\n-   #90 = Utf8               len\n-   #91 = Utf8               close\n-   #92 = Utf8               ()V\n-   #93 = Utf8               finish\n-   #94 = Utf8               zipFileBaseName\n-   #95 = Utf8               Ljava/lang/String;\n-   #96 = Utf8               lastZipSplitSegmentFile\n-   #97 = Class              #168          // java/lang/String\n-   #98 = Utf8               openNewSplitSegment\n-   #99 = Utf8               newFile\n-  #100 = Utf8               writeZipSplitSignature\n-  #101 = Utf8               createNewSplitSegmentFile\n-  #102 = Utf8               (Ljava/lang/Integer;)Ljava/io/File;\n-  #103 = Utf8               zipSplitSegmentSuffixIndex\n-  #104 = Utf8               Ljava/lang/Integer;\n-  #105 = Utf8               newZipSplitSegmentSuffixIndex\n-  #106 = Utf8               baseName\n-  #107 = Utf8               extension\n-  #108 = Utf8               getCurrentSplitSegmentIndex\n-  #109 = Utf8               ()I\n-  #110 = Utf8               getCurrentSplitSegmentBytesWritten\n-  #111 = Utf8               ()J\n-  #112 = Utf8               SourceFile\n-  #113 = Utf8               ZipSplitOutputStream.java\n-  #114 = NameAndType        #69:#92       // \"<init>\":()V\n-  #115 = NameAndType        #64:#65       // singleByte:[B\n-  #116 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitOutputStream\n-  #117 = Utf8               java/lang/IllegalArgumentException\n-  #118 = Utf8               zip split segment size should between 64K and 4,294,967,295\n-  #119 = NameAndType        #69:#169      // \"<init>\":(Ljava/lang/String;)V\n-  #120 = NameAndType        #55:#56       // zipFile:Ljava/io/File;\n-  #121 = NameAndType        #57:#58       // splitSize:J\n-  #122 = NameAndType        #170:#171     // toPath:()Ljava/nio/file/Path;\n-  #123 = Utf8               java/nio/file/OpenOption\n-  #124 = Class              #172          // java/nio/file/Files\n-  #125 = NameAndType        #173:#174     // newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n-  #126 = NameAndType        #53:#54       // outputStream:Ljava/io/OutputStream;\n-  #127 = NameAndType        #100:#92      // writeZipSplitSignature:()V\n-  #128 = Utf8               The unsplittable content size is bigger than the split segment size\n-  #129 = NameAndType        #61:#58       // currentSplitSegmentBytesWritten:J\n-  #130 = NameAndType        #98:#92       // openNewSplitSegment:()V\n-  #131 = NameAndType        #82:#85       // write:([B)V\n-  #132 = NameAndType        #82:#87       // write:([BII)V\n-  #133 = NameAndType        #62:#63       // finished:Z\n-  #134 = NameAndType        #93:#92       // finish:()V\n-  #135 = Utf8               java/io/IOException\n-  #136 = Utf8               This archive has already been finished\n-  #137 = NameAndType        #175:#176     // getName:()Ljava/lang/String;\n-  #138 = Class              #177          // org/apache/commons/compress/utils/FileNameUtils\n-  #139 = NameAndType        #178:#179     // getBaseName:(Ljava/lang/String;)Ljava/lang/String;\n-  #140 = Utf8               java/io/File\n-  #141 = NameAndType        #180:#181     // getParentFile:()Ljava/io/File;\n-  #142 = Utf8               BootstrapMethods\n-  #143 = MethodHandle       6:#182        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #144 = String             #183          // \\u0001.zip\n-  #145 = NameAndType        #184:#179     // makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n-  #146 = NameAndType        #69:#185      // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-  #147 = NameAndType        #91:#92       // close:()V\n-  #148 = NameAndType        #186:#187     // renameTo:(Ljava/io/File;)Z\n-  #149 = String             #188          // Failed to rename \\u0001 to \\u0001\n-  #150 = NameAndType        #184:#189     // makeConcatWithConstants:(Ljava/io/File;Ljava/io/File;)Ljava/lang/String;\n-  #151 = NameAndType        #59:#60       // currentSplitSegmentIndex:I\n-  #152 = Class              #190          // java/lang/Integer\n-  #153 = NameAndType        #191:#192     // valueOf:(I)Ljava/lang/Integer;\n-  #154 = NameAndType        #101:#102     // createNewSplitSegmentFile:(Ljava/lang/Integer;)Ljava/io/File;\n-  #155 = Class              #193          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-  #156 = NameAndType        #194:#65      // DD_SIG:[B\n-  #157 = NameAndType        #195:#109     // intValue:()I\n-  #158 = Utf8               .z\n-  #159 = String             #196          // \\u00010\\u0001\n-  #160 = NameAndType        #184:#197     // makeConcatWithConstants:(Ljava/lang/String;I)Ljava/lang/String;\n-  #161 = String             #198          // \\u0001\\u0001\n-  #162 = NameAndType        #199:#176     // getParent:()Ljava/lang/String;\n-  #163 = NameAndType        #184:#200     // makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-  #164 = NameAndType        #69:#201      // \"<init>\":(Ljava/lang/String;Ljava/lang/String;)V\n-  #165 = NameAndType        #202:#203     // exists:()Z\n-  #166 = String             #204          // split zip segment \\u0001\\u0001 already exists\n-  #167 = Utf8               java/io/OutputStream\n-  #168 = Utf8               java/lang/String\n-  #169 = Utf8               (Ljava/lang/String;)V\n-  #170 = Utf8               toPath\n-  #171 = Utf8               ()Ljava/nio/file/Path;\n-  #172 = Utf8               java/nio/file/Files\n-  #173 = Utf8               newOutputStream\n-  #174 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n-  #175 = Utf8               getName\n-  #176 = Utf8               ()Ljava/lang/String;\n-  #177 = Utf8               org/apache/commons/compress/utils/FileNameUtils\n-  #178 = Utf8               getBaseName\n-  #179 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #180 = Utf8               getParentFile\n-  #181 = Utf8               ()Ljava/io/File;\n-  #182 = Methodref          #205.#206     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #183 = Utf8               \\u0001.zip\n-  #184 = Utf8               makeConcatWithConstants\n-  #185 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n-  #186 = Utf8               renameTo\n-  #187 = Utf8               (Ljava/io/File;)Z\n-  #188 = Utf8               Failed to rename \\u0001 to \\u0001\n-  #189 = Utf8               (Ljava/io/File;Ljava/io/File;)Ljava/lang/String;\n-  #190 = Utf8               java/lang/Integer\n-  #191 = Utf8               valueOf\n-  #192 = Utf8               (I)Ljava/lang/Integer;\n-  #193 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-  #194 = Utf8               DD_SIG\n-  #195 = Utf8               intValue\n-  #196 = Utf8               \\u00010\\u0001\n-  #197 = Utf8               (Ljava/lang/String;I)Ljava/lang/String;\n-  #198 = Utf8               \\u0001\\u0001\n-  #199 = Utf8               getParent\n-  #200 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-  #201 = Utf8               (Ljava/lang/String;Ljava/lang/String;)V\n-  #202 = Utf8               exists\n-  #203 = Utf8               ()Z\n-  #204 = Utf8               split zip segment \\u0001\\u0001 already exists\n-  #205 = Class              #207          // java/lang/invoke/StringConcatFactory\n-  #206 = NameAndType        #184:#211     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #207 = Utf8               java/lang/invoke/StringConcatFactory\n-  #208 = Class              #213          // java/lang/invoke/MethodHandles$Lookup\n-  #209 = Utf8               Lookup\n-  #210 = Utf8               InnerClasses\n-  #211 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #212 = Class              #214          // java/lang/invoke/MethodHandles\n-  #213 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #214 = Utf8               java/lang/invoke/MethodHandles\n+    #1 = Methodref          #2.#3         // java/io/OutputStream.\"<init>\":()V\n+    #2 = Class              #4            // java/io/OutputStream\n+    #3 = NameAndType        #5:#6         // \"<init>\":()V\n+    #4 = Utf8               java/io/OutputStream\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ()V\n+    #7 = Fieldref           #8.#9         // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.singleByte:[B\n+    #8 = Class              #10           // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream\n+    #9 = NameAndType        #11:#12       // singleByte:[B\n+   #10 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitOutputStream\n+   #11 = Utf8               singleByte\n+   #12 = Utf8               [B\n+   #13 = Long               65536l\n+   #15 = Long               4294967295l\n+   #17 = Class              #18           // java/lang/IllegalArgumentException\n+   #18 = Utf8               java/lang/IllegalArgumentException\n+   #19 = String             #20           // zip split segment size should between 64K and 4,294,967,295\n+   #20 = Utf8               zip split segment size should between 64K and 4,294,967,295\n+   #21 = Methodref          #17.#22       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #22 = NameAndType        #5:#23        // \"<init>\":(Ljava/lang/String;)V\n+   #23 = Utf8               (Ljava/lang/String;)V\n+   #24 = Fieldref           #8.#25        // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.zipFile:Ljava/io/File;\n+   #25 = NameAndType        #26:#27       // zipFile:Ljava/io/File;\n+   #26 = Utf8               zipFile\n+   #27 = Utf8               Ljava/io/File;\n+   #28 = Fieldref           #8.#29        // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.splitSize:J\n+   #29 = NameAndType        #30:#31       // splitSize:J\n+   #30 = Utf8               splitSize\n+   #31 = Utf8               J\n+   #32 = Methodref          #33.#34       // java/io/File.toPath:()Ljava/nio/file/Path;\n+   #33 = Class              #35           // java/io/File\n+   #34 = NameAndType        #36:#37       // toPath:()Ljava/nio/file/Path;\n+   #35 = Utf8               java/io/File\n+   #36 = Utf8               toPath\n+   #37 = Utf8               ()Ljava/nio/file/Path;\n+   #38 = Class              #39           // java/nio/file/OpenOption\n+   #39 = Utf8               java/nio/file/OpenOption\n+   #40 = Methodref          #41.#42       // java/nio/file/Files.newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n+   #41 = Class              #43           // java/nio/file/Files\n+   #42 = NameAndType        #44:#45       // newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n+   #43 = Utf8               java/nio/file/Files\n+   #44 = Utf8               newOutputStream\n+   #45 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n+   #46 = Fieldref           #8.#47        // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.outputStream:Ljava/io/OutputStream;\n+   #47 = NameAndType        #48:#49       // outputStream:Ljava/io/OutputStream;\n+   #48 = Utf8               outputStream\n+   #49 = Utf8               Ljava/io/OutputStream;\n+   #50 = Methodref          #8.#51        // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.writeZipSplitSignature:()V\n+   #51 = NameAndType        #52:#6        // writeZipSplitSignature:()V\n+   #52 = Utf8               writeZipSplitSignature\n+   #53 = String             #54           // The unsplittable content size is bigger than the split segment size\n+   #54 = Utf8               The unsplittable content size is bigger than the split segment size\n+   #55 = Fieldref           #8.#56        // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.currentSplitSegmentBytesWritten:J\n+   #56 = NameAndType        #57:#31       // currentSplitSegmentBytesWritten:J\n+   #57 = Utf8               currentSplitSegmentBytesWritten\n+   #58 = Methodref          #8.#59        // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.openNewSplitSegment:()V\n+   #59 = NameAndType        #60:#6        // openNewSplitSegment:()V\n+   #60 = Utf8               openNewSplitSegment\n+   #61 = Methodref          #8.#62        // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.write:([B)V\n+   #62 = NameAndType        #63:#64       // write:([B)V\n+   #63 = Utf8               write\n+   #64 = Utf8               ([B)V\n+   #65 = Methodref          #8.#66        // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.write:([BII)V\n+   #66 = NameAndType        #63:#67       // write:([BII)V\n+   #67 = Utf8               ([BII)V\n+   #68 = Methodref          #2.#66        // java/io/OutputStream.write:([BII)V\n+   #69 = Fieldref           #8.#70        // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.finished:Z\n+   #70 = NameAndType        #71:#72       // finished:Z\n+   #71 = Utf8               finished\n+   #72 = Utf8               Z\n+   #73 = Methodref          #8.#74        // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.finish:()V\n+   #74 = NameAndType        #75:#6        // finish:()V\n+   #75 = Utf8               finish\n+   #76 = Class              #77           // java/io/IOException\n+   #77 = Utf8               java/io/IOException\n+   #78 = String             #79           // This archive has already been finished\n+   #79 = Utf8               This archive has already been finished\n+   #80 = Methodref          #76.#22       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #81 = Methodref          #33.#82       // java/io/File.getName:()Ljava/lang/String;\n+   #82 = NameAndType        #83:#84       // getName:()Ljava/lang/String;\n+   #83 = Utf8               getName\n+   #84 = Utf8               ()Ljava/lang/String;\n+   #85 = Methodref          #86.#87       // org/apache/commons/compress/utils/FileNameUtils.getBaseName:(Ljava/lang/String;)Ljava/lang/String;\n+   #86 = Class              #88           // org/apache/commons/compress/utils/FileNameUtils\n+   #87 = NameAndType        #89:#90       // getBaseName:(Ljava/lang/String;)Ljava/lang/String;\n+   #88 = Utf8               org/apache/commons/compress/utils/FileNameUtils\n+   #89 = Utf8               getBaseName\n+   #90 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+   #91 = Methodref          #33.#92       // java/io/File.getParentFile:()Ljava/io/File;\n+   #92 = NameAndType        #93:#94       // getParentFile:()Ljava/io/File;\n+   #93 = Utf8               getParentFile\n+   #94 = Utf8               ()Ljava/io/File;\n+   #95 = InvokeDynamic      #0:#96        // #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n+   #96 = NameAndType        #97:#90       // makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n+   #97 = Utf8               makeConcatWithConstants\n+   #98 = Methodref          #33.#99       // java/io/File.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+   #99 = NameAndType        #5:#100       // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+  #100 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n+  #101 = Methodref          #2.#102       // java/io/OutputStream.close:()V\n+  #102 = NameAndType        #103:#6       // close:()V\n+  #103 = Utf8               close\n+  #104 = Methodref          #33.#105      // java/io/File.renameTo:(Ljava/io/File;)Z\n+  #105 = NameAndType        #106:#107     // renameTo:(Ljava/io/File;)Z\n+  #106 = Utf8               renameTo\n+  #107 = Utf8               (Ljava/io/File;)Z\n+  #108 = InvokeDynamic      #1:#109       // #1:makeConcatWithConstants:(Ljava/io/File;Ljava/io/File;)Ljava/lang/String;\n+  #109 = NameAndType        #97:#110      // makeConcatWithConstants:(Ljava/io/File;Ljava/io/File;)Ljava/lang/String;\n+  #110 = Utf8               (Ljava/io/File;Ljava/io/File;)Ljava/lang/String;\n+  #111 = Fieldref           #8.#112       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.currentSplitSegmentIndex:I\n+  #112 = NameAndType        #113:#114     // currentSplitSegmentIndex:I\n+  #113 = Utf8               currentSplitSegmentIndex\n+  #114 = Utf8               I\n+  #115 = Methodref          #116.#117     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+  #116 = Class              #118          // java/lang/Integer\n+  #117 = NameAndType        #119:#120     // valueOf:(I)Ljava/lang/Integer;\n+  #118 = Utf8               java/lang/Integer\n+  #119 = Utf8               valueOf\n+  #120 = Utf8               (I)Ljava/lang/Integer;\n+  #121 = Methodref          #8.#122       // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.createNewSplitSegmentFile:(Ljava/lang/Integer;)Ljava/io/File;\n+  #122 = NameAndType        #123:#124     // createNewSplitSegmentFile:(Ljava/lang/Integer;)Ljava/io/File;\n+  #123 = Utf8               createNewSplitSegmentFile\n+  #124 = Utf8               (Ljava/lang/Integer;)Ljava/io/File;\n+  #125 = Fieldref           #126.#127     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n+  #126 = Class              #128          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+  #127 = NameAndType        #129:#12      // DD_SIG:[B\n+  #128 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+  #129 = Utf8               DD_SIG\n+  #130 = Methodref          #2.#62        // java/io/OutputStream.write:([B)V\n+  #131 = Methodref          #116.#132     // java/lang/Integer.intValue:()I\n+  #132 = NameAndType        #133:#134     // intValue:()I\n+  #133 = Utf8               intValue\n+  #134 = Utf8               ()I\n+  #135 = String             #136          // .z\n+  #136 = Utf8               .z\n+  #137 = InvokeDynamic      #2:#138       // #2:makeConcatWithConstants:(Ljava/lang/String;I)Ljava/lang/String;\n+  #138 = NameAndType        #97:#139      // makeConcatWithConstants:(Ljava/lang/String;I)Ljava/lang/String;\n+  #139 = Utf8               (Ljava/lang/String;I)Ljava/lang/String;\n+  #140 = InvokeDynamic      #3:#138       // #3:makeConcatWithConstants:(Ljava/lang/String;I)Ljava/lang/String;\n+  #141 = Methodref          #33.#142      // java/io/File.getParent:()Ljava/lang/String;\n+  #142 = NameAndType        #143:#84      // getParent:()Ljava/lang/String;\n+  #143 = Utf8               getParent\n+  #144 = InvokeDynamic      #3:#145       // #3:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+  #145 = NameAndType        #97:#146      // makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+  #146 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+  #147 = Methodref          #33.#148      // java/io/File.\"<init>\":(Ljava/lang/String;Ljava/lang/String;)V\n+  #148 = NameAndType        #5:#149       // \"<init>\":(Ljava/lang/String;Ljava/lang/String;)V\n+  #149 = Utf8               (Ljava/lang/String;Ljava/lang/String;)V\n+  #150 = Methodref          #33.#151      // java/io/File.exists:()Z\n+  #151 = NameAndType        #152:#153     // exists:()Z\n+  #152 = Utf8               exists\n+  #153 = Utf8               ()Z\n+  #154 = InvokeDynamic      #4:#145       // #4:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+  #155 = Utf8               ZIP_SEGMENT_MIN_SIZE\n+  #156 = Utf8               ConstantValue\n+  #157 = Utf8               ZIP_SEGMENT_MAX_SIZE\n+  #158 = Utf8               (Ljava/io/File;J)V\n+  #159 = Utf8               Code\n+  #160 = Utf8               LineNumberTable\n+  #161 = Utf8               LocalVariableTable\n+  #162 = Utf8               this\n+  #163 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipSplitOutputStream;\n+  #164 = Utf8               StackMapTable\n+  #165 = Utf8               Exceptions\n+  #166 = Utf8               prepareToWriteUnsplittableContent\n+  #167 = Utf8               (J)V\n+  #168 = Utf8               unsplittableContentSize\n+  #169 = Utf8               bytesRemainingInThisSegment\n+  #170 = Utf8               (I)V\n+  #171 = Utf8               i\n+  #172 = Utf8               b\n+  #173 = Utf8               bytesToWriteForThisSegment\n+  #174 = Utf8               off\n+  #175 = Utf8               len\n+  #176 = Utf8               zipFileBaseName\n+  #177 = Utf8               Ljava/lang/String;\n+  #178 = Utf8               lastZipSplitSegmentFile\n+  #179 = Class              #180          // java/lang/String\n+  #180 = Utf8               java/lang/String\n+  #181 = Utf8               newFile\n+  #182 = Utf8               zipSplitSegmentSuffixIndex\n+  #183 = Utf8               Ljava/lang/Integer;\n+  #184 = Utf8               newZipSplitSegmentSuffixIndex\n+  #185 = Utf8               baseName\n+  #186 = Utf8               extension\n+  #187 = Utf8               getCurrentSplitSegmentIndex\n+  #188 = Utf8               getCurrentSplitSegmentBytesWritten\n+  #189 = Utf8               ()J\n+  #190 = Utf8               SourceFile\n+  #191 = Utf8               ZipSplitOutputStream.java\n+  #192 = Utf8               BootstrapMethods\n+  #193 = MethodHandle       6:#194        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #194 = Methodref          #195.#196     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #195 = Class              #197          // java/lang/invoke/StringConcatFactory\n+  #196 = NameAndType        #97:#198      // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #197 = Utf8               java/lang/invoke/StringConcatFactory\n+  #198 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #199 = String             #200          // \\u0001.zip\n+  #200 = Utf8               \\u0001.zip\n+  #201 = String             #202          // Failed to rename \\u0001 to \\u0001\n+  #202 = Utf8               Failed to rename \\u0001 to \\u0001\n+  #203 = String             #204          // \\u00010\\u0001\n+  #204 = Utf8               \\u00010\\u0001\n+  #205 = String             #206          // \\u0001\\u0001\n+  #206 = Utf8               \\u0001\\u0001\n+  #207 = String             #208          // split zip segment \\u0001\\u0001 already exists\n+  #208 = Utf8               split zip segment \\u0001\\u0001 already exists\n+  #209 = Utf8               InnerClasses\n+  #210 = Class              #211          // java/lang/invoke/MethodHandles$Lookup\n+  #211 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #212 = Class              #213          // java/lang/invoke/MethodHandles\n+  #213 = Utf8               java/lang/invoke/MethodHandles\n+  #214 = Utf8               Lookup\n {\n   private java.io.OutputStream outputStream;\n     descriptor: Ljava/io/OutputStream;\n     flags: (0x0002) ACC_PRIVATE\n \n   private java.io.File zipFile;\n     descriptor: Ljava/io/File;\n@@ -265,43 +265,43 @@\n     Code:\n       stack=4, locals=4, args_size=3\n          0: aload_0\n          1: invokespecial #1                  // Method java/io/OutputStream.\"<init>\":()V\n          4: aload_0\n          5: iconst_1\n          6: newarray       byte\n-         8: putfield      #2                  // Field singleByte:[B\n+         8: putfield      #7                  // Field singleByte:[B\n         11: lload_2\n-        12: ldc2_w        #4                  // long 65536l\n+        12: ldc2_w        #13                 // long 65536l\n         15: lcmp\n         16: iflt          27\n         19: lload_2\n-        20: ldc2_w        #6                  // long 4294967295l\n+        20: ldc2_w        #15                 // long 4294967295l\n         23: lcmp\n         24: ifle          37\n-        27: new           #8                  // class java/lang/IllegalArgumentException\n+        27: new           #17                 // class java/lang/IllegalArgumentException\n         30: dup\n-        31: ldc           #9                  // String zip split segment size should between 64K and 4,294,967,295\n-        33: invokespecial #10                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        31: ldc           #19                 // String zip split segment size should between 64K and 4,294,967,295\n+        33: invokespecial #21                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         36: athrow\n         37: aload_0\n         38: aload_1\n-        39: putfield      #11                 // Field zipFile:Ljava/io/File;\n+        39: putfield      #24                 // Field zipFile:Ljava/io/File;\n         42: aload_0\n         43: lload_2\n-        44: putfield      #12                 // Field splitSize:J\n+        44: putfield      #28                 // Field splitSize:J\n         47: aload_0\n         48: aload_1\n-        49: invokevirtual #13                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+        49: invokevirtual #32                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n         52: iconst_0\n-        53: anewarray     #14                 // class java/nio/file/OpenOption\n-        56: invokestatic  #15                 // Method java/nio/file/Files.newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n-        59: putfield      #16                 // Field outputStream:Ljava/io/OutputStream;\n+        53: anewarray     #38                 // class java/nio/file/OpenOption\n+        56: invokestatic  #40                 // Method java/nio/file/Files.newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n+        59: putfield      #46                 // Field outputStream:Ljava/io/OutputStream;\n         62: aload_0\n-        63: invokespecial #17                 // Method writeZipSplitSignature:()V\n+        63: invokespecial #50                 // Method writeZipSplitSignature:()V\n         66: return\n       LineNumberTable:\n         line 60: 0\n         line 39: 4\n         line 61: 11\n         line 62: 27\n         line 65: 37\n@@ -326,34 +326,34 @@\n   public void prepareToWriteUnsplittableContent(long) throws java.lang.IllegalArgumentException, java.io.IOException;\n     descriptor: (J)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=5, args_size=2\n          0: lload_1\n          1: aload_0\n-         2: getfield      #12                 // Field splitSize:J\n+         2: getfield      #28                 // Field splitSize:J\n          5: lcmp\n          6: ifle          19\n-         9: new           #8                  // class java/lang/IllegalArgumentException\n+         9: new           #17                 // class java/lang/IllegalArgumentException\n         12: dup\n-        13: ldc           #18                 // String The unsplittable content size is bigger than the split segment size\n-        15: invokespecial #10                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        13: ldc           #53                 // String The unsplittable content size is bigger than the split segment size\n+        15: invokespecial #21                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         18: athrow\n         19: aload_0\n-        20: getfield      #12                 // Field splitSize:J\n+        20: getfield      #28                 // Field splitSize:J\n         23: aload_0\n-        24: getfield      #19                 // Field currentSplitSegmentBytesWritten:J\n+        24: getfield      #55                 // Field currentSplitSegmentBytesWritten:J\n         27: lsub\n         28: lstore_3\n         29: lload_3\n         30: lload_1\n         31: lcmp\n         32: ifge          39\n         35: aload_0\n-        36: invokespecial #20                 // Method openNewSplitSegment:()V\n+        36: invokespecial #58                 // Method openNewSplitSegment:()V\n         39: return\n       LineNumberTable:\n         line 85: 0\n         line 86: 9\n         line 89: 19\n         line 90: 29\n         line 91: 35\n@@ -373,25 +373,25 @@\n \n   public void write(int) throws java.io.IOException;\n     descriptor: (I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n-         1: getfield      #2                  // Field singleByte:[B\n+         1: getfield      #7                  // Field singleByte:[B\n          4: iconst_0\n          5: iload_1\n          6: sipush        255\n          9: iand\n         10: i2b\n         11: bastore\n         12: aload_0\n         13: aload_0\n-        14: getfield      #2                  // Field singleByte:[B\n-        17: invokevirtual #21                 // Method write:([B)V\n+        14: getfield      #7                  // Field singleByte:[B\n+        17: invokevirtual #61                 // Method write:([B)V\n         20: return\n       LineNumberTable:\n         line 97: 0\n         line 98: 12\n         line 99: 20\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -406,15 +406,15 @@\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n          3: aload_1\n          4: arraylength\n-         5: invokevirtual #22                 // Method write:([BII)V\n+         5: invokevirtual #65                 // Method write:([BII)V\n          8: return\n       LineNumberTable:\n         line 103: 0\n         line 104: 8\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/archivers/zip/ZipSplitOutputStream;\n@@ -427,74 +427,74 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=5, args_size=4\n          0: iload_3\n          1: ifgt          5\n          4: return\n          5: aload_0\n-         6: getfield      #19                 // Field currentSplitSegmentBytesWritten:J\n+         6: getfield      #55                 // Field currentSplitSegmentBytesWritten:J\n          9: aload_0\n-        10: getfield      #12                 // Field splitSize:J\n+        10: getfield      #28                 // Field splitSize:J\n         13: lcmp\n         14: iflt          31\n         17: aload_0\n-        18: invokespecial #20                 // Method openNewSplitSegment:()V\n+        18: invokespecial #58                 // Method openNewSplitSegment:()V\n         21: aload_0\n         22: aload_1\n         23: iload_2\n         24: iload_3\n-        25: invokevirtual #22                 // Method write:([BII)V\n+        25: invokevirtual #65                 // Method write:([BII)V\n         28: goto          108\n         31: aload_0\n-        32: getfield      #19                 // Field currentSplitSegmentBytesWritten:J\n+        32: getfield      #55                 // Field currentSplitSegmentBytesWritten:J\n         35: iload_3\n         36: i2l\n         37: ladd\n         38: aload_0\n-        39: getfield      #12                 // Field splitSize:J\n+        39: getfield      #28                 // Field splitSize:J\n         42: lcmp\n         43: ifle          87\n         46: aload_0\n-        47: getfield      #12                 // Field splitSize:J\n+        47: getfield      #28                 // Field splitSize:J\n         50: l2i\n         51: aload_0\n-        52: getfield      #19                 // Field currentSplitSegmentBytesWritten:J\n+        52: getfield      #55                 // Field currentSplitSegmentBytesWritten:J\n         55: l2i\n         56: isub\n         57: istore        4\n         59: aload_0\n         60: aload_1\n         61: iload_2\n         62: iload         4\n-        64: invokevirtual #22                 // Method write:([BII)V\n+        64: invokevirtual #65                 // Method write:([BII)V\n         67: aload_0\n-        68: invokespecial #20                 // Method openNewSplitSegment:()V\n+        68: invokespecial #58                 // Method openNewSplitSegment:()V\n         71: aload_0\n         72: aload_1\n         73: iload_2\n         74: iload         4\n         76: iadd\n         77: iload_3\n         78: iload         4\n         80: isub\n-        81: invokevirtual #22                 // Method write:([BII)V\n+        81: invokevirtual #65                 // Method write:([BII)V\n         84: goto          108\n         87: aload_0\n-        88: getfield      #16                 // Field outputStream:Ljava/io/OutputStream;\n+        88: getfield      #46                 // Field outputStream:Ljava/io/OutputStream;\n         91: aload_1\n         92: iload_2\n         93: iload_3\n-        94: invokevirtual #23                 // Method java/io/OutputStream.write:([BII)V\n+        94: invokevirtual #68                 // Method java/io/OutputStream.write:([BII)V\n         97: aload_0\n         98: dup\n-        99: getfield      #19                 // Field currentSplitSegmentBytesWritten:J\n+        99: getfield      #55                 // Field currentSplitSegmentBytesWritten:J\n        102: iload_3\n        103: i2l\n        104: ladd\n-       105: putfield      #19                 // Field currentSplitSegmentBytesWritten:J\n+       105: putfield      #55                 // Field currentSplitSegmentBytesWritten:J\n        108: return\n       LineNumberTable:\n         line 117: 0\n         line 118: 4\n         line 121: 5\n         line 122: 17\n         line 123: 21\n@@ -524,18 +524,18 @@\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #24                 // Field finished:Z\n+         1: getfield      #69                 // Field finished:Z\n          4: ifne          11\n          7: aload_0\n-         8: invokespecial #25                 // Method finish:()V\n+         8: invokespecial #73                 // Method finish:()V\n         11: return\n       LineNumberTable:\n         line 137: 0\n         line 138: 7\n         line 140: 11\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -547,54 +547,54 @@\n \n   private void finish() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=3, args_size=1\n          0: aload_0\n-         1: getfield      #24                 // Field finished:Z\n+         1: getfield      #69                 // Field finished:Z\n          4: ifeq          17\n-         7: new           #26                 // class java/io/IOException\n+         7: new           #76                 // class java/io/IOException\n         10: dup\n-        11: ldc           #27                 // String This archive has already been finished\n-        13: invokespecial #28                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        11: ldc           #78                 // String This archive has already been finished\n+        13: invokespecial #80                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         16: athrow\n         17: aload_0\n-        18: getfield      #11                 // Field zipFile:Ljava/io/File;\n-        21: invokevirtual #29                 // Method java/io/File.getName:()Ljava/lang/String;\n-        24: invokestatic  #30                 // Method org/apache/commons/compress/utils/FileNameUtils.getBaseName:(Ljava/lang/String;)Ljava/lang/String;\n+        18: getfield      #24                 // Field zipFile:Ljava/io/File;\n+        21: invokevirtual #81                 // Method java/io/File.getName:()Ljava/lang/String;\n+        24: invokestatic  #85                 // Method org/apache/commons/compress/utils/FileNameUtils.getBaseName:(Ljava/lang/String;)Ljava/lang/String;\n         27: astore_1\n-        28: new           #31                 // class java/io/File\n+        28: new           #33                 // class java/io/File\n         31: dup\n         32: aload_0\n-        33: getfield      #11                 // Field zipFile:Ljava/io/File;\n-        36: invokevirtual #32                 // Method java/io/File.getParentFile:()Ljava/io/File;\n+        33: getfield      #24                 // Field zipFile:Ljava/io/File;\n+        36: invokevirtual #91                 // Method java/io/File.getParentFile:()Ljava/io/File;\n         39: aload_1\n-        40: invokedynamic #33,  0             // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n-        45: invokespecial #34                 // Method java/io/File.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+        40: invokedynamic #95,  0             // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n+        45: invokespecial #98                 // Method java/io/File.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n         48: astore_2\n         49: aload_0\n-        50: getfield      #16                 // Field outputStream:Ljava/io/OutputStream;\n-        53: invokevirtual #35                 // Method java/io/OutputStream.close:()V\n+        50: getfield      #46                 // Field outputStream:Ljava/io/OutputStream;\n+        53: invokevirtual #101                // Method java/io/OutputStream.close:()V\n         56: aload_0\n-        57: getfield      #11                 // Field zipFile:Ljava/io/File;\n+        57: getfield      #24                 // Field zipFile:Ljava/io/File;\n         60: aload_2\n-        61: invokevirtual #36                 // Method java/io/File.renameTo:(Ljava/io/File;)Z\n+        61: invokevirtual #104                // Method java/io/File.renameTo:(Ljava/io/File;)Z\n         64: ifne          85\n-        67: new           #26                 // class java/io/IOException\n+        67: new           #76                 // class java/io/IOException\n         70: dup\n         71: aload_0\n-        72: getfield      #11                 // Field zipFile:Ljava/io/File;\n+        72: getfield      #24                 // Field zipFile:Ljava/io/File;\n         75: aload_2\n-        76: invokedynamic #37,  0             // InvokeDynamic #1:makeConcatWithConstants:(Ljava/io/File;Ljava/io/File;)Ljava/lang/String;\n-        81: invokespecial #28                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        76: invokedynamic #108,  0            // InvokeDynamic #1:makeConcatWithConstants:(Ljava/io/File;Ljava/io/File;)Ljava/lang/String;\n+        81: invokespecial #80                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         84: athrow\n         85: aload_0\n         86: iconst_1\n-        87: putfield      #24                 // Field finished:Z\n+        87: putfield      #69                 // Field finished:Z\n         90: return\n       LineNumberTable:\n         line 148: 0\n         line 149: 7\n         line 152: 17\n         line 153: 28\n         line 154: 49\n@@ -617,63 +617,63 @@\n \n   private void openNewSplitSegment() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #38                 // Field currentSplitSegmentIndex:I\n+         1: getfield      #111                // Field currentSplitSegmentIndex:I\n          4: ifne          52\n          7: aload_0\n-         8: getfield      #16                 // Field outputStream:Ljava/io/OutputStream;\n-        11: invokevirtual #35                 // Method java/io/OutputStream.close:()V\n+         8: getfield      #46                 // Field outputStream:Ljava/io/OutputStream;\n+        11: invokevirtual #101                // Method java/io/OutputStream.close:()V\n         14: aload_0\n         15: iconst_1\n-        16: invokestatic  #39                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-        19: invokespecial #40                 // Method createNewSplitSegmentFile:(Ljava/lang/Integer;)Ljava/io/File;\n+        16: invokestatic  #115                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+        19: invokespecial #121                // Method createNewSplitSegmentFile:(Ljava/lang/Integer;)Ljava/io/File;\n         22: astore_1\n         23: aload_0\n-        24: getfield      #11                 // Field zipFile:Ljava/io/File;\n+        24: getfield      #24                 // Field zipFile:Ljava/io/File;\n         27: aload_1\n-        28: invokevirtual #36                 // Method java/io/File.renameTo:(Ljava/io/File;)Z\n+        28: invokevirtual #104                // Method java/io/File.renameTo:(Ljava/io/File;)Z\n         31: ifne          52\n-        34: new           #26                 // class java/io/IOException\n+        34: new           #76                 // class java/io/IOException\n         37: dup\n         38: aload_0\n-        39: getfield      #11                 // Field zipFile:Ljava/io/File;\n+        39: getfield      #24                 // Field zipFile:Ljava/io/File;\n         42: aload_1\n-        43: invokedynamic #37,  0             // InvokeDynamic #1:makeConcatWithConstants:(Ljava/io/File;Ljava/io/File;)Ljava/lang/String;\n-        48: invokespecial #28                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        43: invokedynamic #108,  0            // InvokeDynamic #1:makeConcatWithConstants:(Ljava/io/File;Ljava/io/File;)Ljava/lang/String;\n+        48: invokespecial #80                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         51: athrow\n         52: aload_0\n         53: aconst_null\n-        54: invokespecial #40                 // Method createNewSplitSegmentFile:(Ljava/lang/Integer;)Ljava/io/File;\n+        54: invokespecial #121                // Method createNewSplitSegmentFile:(Ljava/lang/Integer;)Ljava/io/File;\n         57: astore_1\n         58: aload_0\n-        59: getfield      #16                 // Field outputStream:Ljava/io/OutputStream;\n-        62: invokevirtual #35                 // Method java/io/OutputStream.close:()V\n+        59: getfield      #46                 // Field outputStream:Ljava/io/OutputStream;\n+        62: invokevirtual #101                // Method java/io/OutputStream.close:()V\n         65: aload_0\n         66: aload_1\n-        67: invokevirtual #13                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+        67: invokevirtual #32                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n         70: iconst_0\n-        71: anewarray     #14                 // class java/nio/file/OpenOption\n-        74: invokestatic  #15                 // Method java/nio/file/Files.newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n-        77: putfield      #16                 // Field outputStream:Ljava/io/OutputStream;\n+        71: anewarray     #38                 // class java/nio/file/OpenOption\n+        74: invokestatic  #40                 // Method java/nio/file/Files.newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n+        77: putfield      #46                 // Field outputStream:Ljava/io/OutputStream;\n         80: aload_0\n         81: lconst_0\n-        82: putfield      #19                 // Field currentSplitSegmentBytesWritten:J\n+        82: putfield      #55                 // Field currentSplitSegmentBytesWritten:J\n         85: aload_0\n         86: aload_1\n-        87: putfield      #11                 // Field zipFile:Ljava/io/File;\n+        87: putfield      #24                 // Field zipFile:Ljava/io/File;\n         90: aload_0\n         91: dup\n-        92: getfield      #38                 // Field currentSplitSegmentIndex:I\n+        92: getfield      #111                // Field currentSplitSegmentIndex:I\n         95: iconst_1\n         96: iadd\n-        97: putfield      #38                 // Field currentSplitSegmentIndex:I\n+        97: putfield      #111                // Field currentSplitSegmentIndex:I\n        100: return\n       LineNumberTable:\n         line 168: 0\n         line 169: 7\n         line 170: 14\n         line 171: 23\n         line 172: 34\n@@ -696,25 +696,25 @@\n \n   private void writeZipSplitSignature() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #16                 // Field outputStream:Ljava/io/OutputStream;\n-         4: getstatic     #41                 // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n-         7: invokevirtual #42                 // Method java/io/OutputStream.write:([B)V\n+         1: getfield      #46                 // Field outputStream:Ljava/io/OutputStream;\n+         4: getstatic     #125                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n+         7: invokevirtual #130                // Method java/io/OutputStream.write:([B)V\n         10: aload_0\n         11: dup\n-        12: getfield      #19                 // Field currentSplitSegmentBytesWritten:J\n-        15: getstatic     #41                 // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n+        12: getfield      #55                 // Field currentSplitSegmentBytesWritten:J\n+        15: getstatic     #125                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n         18: arraylength\n         19: i2l\n         20: ladd\n-        21: putfield      #19                 // Field currentSplitSegmentBytesWritten:J\n+        21: putfield      #55                 // Field currentSplitSegmentBytesWritten:J\n         24: return\n       LineNumberTable:\n         line 192: 0\n         line 193: 10\n         line 194: 24\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -726,59 +726,59 @@\n     descriptor: (Ljava/lang/Integer;)Ljava/io/File;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=6, args_size=2\n          0: aload_1\n          1: ifnonnull     13\n          4: aload_0\n-         5: getfield      #38                 // Field currentSplitSegmentIndex:I\n+         5: getfield      #111                // Field currentSplitSegmentIndex:I\n          8: iconst_2\n          9: iadd\n         10: goto          17\n         13: aload_1\n-        14: invokevirtual #43                 // Method java/lang/Integer.intValue:()I\n+        14: invokevirtual #131                // Method java/lang/Integer.intValue:()I\n         17: istore_2\n         18: aload_0\n-        19: getfield      #11                 // Field zipFile:Ljava/io/File;\n-        22: invokevirtual #29                 // Method java/io/File.getName:()Ljava/lang/String;\n-        25: invokestatic  #30                 // Method org/apache/commons/compress/utils/FileNameUtils.getBaseName:(Ljava/lang/String;)Ljava/lang/String;\n+        19: getfield      #24                 // Field zipFile:Ljava/io/File;\n+        22: invokevirtual #81                 // Method java/io/File.getName:()Ljava/lang/String;\n+        25: invokestatic  #85                 // Method org/apache/commons/compress/utils/FileNameUtils.getBaseName:(Ljava/lang/String;)Ljava/lang/String;\n         28: astore_3\n-        29: ldc           #44                 // String .z\n+        29: ldc           #135                // String .z\n         31: astore        4\n         33: iload_2\n         34: bipush        9\n         36: if_icmpgt     52\n         39: aload         4\n         41: iload_2\n-        42: invokedynamic #45,  0             // InvokeDynamic #2:makeConcatWithConstants:(Ljava/lang/String;I)Ljava/lang/String;\n+        42: invokedynamic #137,  0            // InvokeDynamic #2:makeConcatWithConstants:(Ljava/lang/String;I)Ljava/lang/String;\n         47: astore        4\n         49: goto          62\n         52: aload         4\n         54: iload_2\n-        55: invokedynamic #46,  0             // InvokeDynamic #3:makeConcatWithConstants:(Ljava/lang/String;I)Ljava/lang/String;\n+        55: invokedynamic #140,  0            // InvokeDynamic #3:makeConcatWithConstants:(Ljava/lang/String;I)Ljava/lang/String;\n         60: astore        4\n-        62: new           #31                 // class java/io/File\n+        62: new           #33                 // class java/io/File\n         65: dup\n         66: aload_0\n-        67: getfield      #11                 // Field zipFile:Ljava/io/File;\n-        70: invokevirtual #47                 // Method java/io/File.getParent:()Ljava/lang/String;\n+        67: getfield      #24                 // Field zipFile:Ljava/io/File;\n+        70: invokevirtual #141                // Method java/io/File.getParent:()Ljava/lang/String;\n         73: aload_3\n         74: aload         4\n-        76: invokedynamic #48,  0             // InvokeDynamic #3:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-        81: invokespecial #49                 // Method java/io/File.\"<init>\":(Ljava/lang/String;Ljava/lang/String;)V\n+        76: invokedynamic #144,  0            // InvokeDynamic #3:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+        81: invokespecial #147                // Method java/io/File.\"<init>\":(Ljava/lang/String;Ljava/lang/String;)V\n         84: astore        5\n         86: aload         5\n-        88: invokevirtual #50                 // Method java/io/File.exists:()Z\n+        88: invokevirtual #150                // Method java/io/File.exists:()Z\n         91: ifeq          110\n-        94: new           #26                 // class java/io/IOException\n+        94: new           #76                 // class java/io/IOException\n         97: dup\n         98: aload_3\n         99: aload         4\n-       101: invokedynamic #51,  0             // InvokeDynamic #4:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-       106: invokespecial #28                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       101: invokedynamic #154,  0            // InvokeDynamic #4:makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+       106: invokespecial #80                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        109: athrow\n        110: aload         5\n        112: areturn\n       LineNumberTable:\n         line 219: 0\n         line 220: 18\n         line 221: 29\n@@ -813,48 +813,48 @@\n \n   public int getCurrentSplitSegmentIndex();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #38                 // Field currentSplitSegmentIndex:I\n+         1: getfield      #111                // Field currentSplitSegmentIndex:I\n          4: ireturn\n       LineNumberTable:\n         line 237: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/ZipSplitOutputStream;\n \n   public long getCurrentSplitSegmentBytesWritten();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #19                 // Field currentSplitSegmentBytesWritten:J\n+         1: getfield      #55                 // Field currentSplitSegmentBytesWritten:J\n          4: lreturn\n       LineNumberTable:\n         line 241: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/ZipSplitOutputStream;\n }\n SourceFile: \"ZipSplitOutputStream.java\"\n-InnerClasses:\n-  public static final #209= #208 of #212; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #143 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  0: #193 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #144 \\u0001.zip\n-  1: #143 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+      #199 \\u0001.zip\n+  1: #193 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #149 Failed to rename \\u0001 to \\u0001\n-  2: #143 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+      #201 Failed to rename \\u0001 to \\u0001\n+  2: #193 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #159 \\u00010\\u0001\n-  3: #143 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+      #203 \\u00010\\u0001\n+  3: #193 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #161 \\u0001\\u0001\n-  4: #143 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+      #205 \\u0001\\u0001\n+  4: #193 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #166 split zip segment \\u0001\\u0001 already exists\n+      #207 split zip segment \\u0001\\u0001 already exists\n+InnerClasses:\n+  public static final #214= #210 of #212; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n"}]}
