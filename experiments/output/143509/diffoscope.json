{"diffoscope-json-version": 1, "source1": "first/InnerAssignmentCheck.class", "source2": "second/InnerAssignmentCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,27 +1,35 @@\n \n package com.puppycrawl.tools.checkstyle.checks.coding;\n \n-import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n import java.util.BitSet;\n import com.puppycrawl.tools.checkstyle.StatelessCheck;\n import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n \n @StatelessCheck\n public class InnerAssignmentCheck extends AbstractCheck\n {\n     public static final String MSG_KEY = \"assignment.inner.avoid\";\n     private static final int[][] ALLOWED_ASSIGNMENT_CONTEXT;\n     private static final int[][] CONTROL_CONTEXT;\n     private static final int[][] ALLOWED_ASSIGNMENT_IN_COMPARISON_CONTEXT;\n     private static final BitSet COMPARISON_TYPES;\n     private static final BitSet LOOP_IDIOM_IGNORED_PARENTS;\n     \n+    static {\n+        ALLOWED_ASSIGNMENT_CONTEXT = new int[][] { { 28, 7 }, { 10 }, { 28, 34, 35 }, { 28, 34, 37 }, { 160 }, { 178, 177, 176 }, { 28, 181 } };\n+        CONTROL_CONTEXT = new int[][] { { 28, 85 }, { 28, 91 }, { 28, 84 }, { 28, 83 }, { 28, 92 } };\n+        ALLOWED_ASSIGNMENT_IN_COMPARISON_CONTEXT = new int[][] { { 28, 84 }, { 28, 36 }, { 28, 85 } };\n+        COMPARISON_TYPES = TokenUtil.asBitSet(new int[] { 116, 120, 118, 119, 117, 115 });\n+        LOOP_IDIOM_IGNORED_PARENTS = TokenUtil.asBitSet(new int[] { 111, 110, 132, 112, 114 });\n+    }\n+    \n     public int[] getDefaultTokens() {\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getAcceptableTokens() {\n         return this.getRequiredTokens();\n     }\n@@ -55,15 +63,17 @@\n         return InnerAssignmentCheck.COMPARISON_TYPES.get(astType);\n     }\n     \n     private static boolean isInContext(final DetailAST ast, final int[][] contextSet, final BitSet skipTokens) {\n         boolean found = false;\n         for (final int[] element : contextSet) {\n             DetailAST current = ast;\n-            for (final int anElement : element) {\n+            int[] array;\n+            for (int length2 = (array = element).length, j = 0; j < length2; ++j) {\n+                final int anElement = array[j];\n                 current = getParent(current, skipTokens);\n                 if (current.getType() != anElement) {\n                     found = false;\n                     break;\n                 }\n                 found = true;\n             }\n@@ -75,16 +85,8 @@\n     }\n     \n     private static DetailAST getParent(final DetailAST ast, final BitSet skipTokens) {\n         DetailAST result;\n         for (result = ast.getParent(); skipTokens.get(result.getType()); result = result.getParent()) {}\n         return result;\n     }\n-    \n-    static {\n-        ALLOWED_ASSIGNMENT_CONTEXT = new int[][] { { 28, 7 }, { 10 }, { 28, 34, 35 }, { 28, 34, 37 }, { 160 }, { 178, 177, 176 }, { 28, 181 } };\n-        CONTROL_CONTEXT = new int[][] { { 28, 85 }, { 28, 91 }, { 28, 84 }, { 28, 83 }, { 28, 92 } };\n-        ALLOWED_ASSIGNMENT_IN_COMPARISON_CONTEXT = new int[][] { { 28, 84 }, { 28, 36 }, { 28, 85 } };\n-        COMPARISON_TYPES = TokenUtil.asBitSet(new int[] { 116, 120, 118, 119, 117, 115 });\n-        LOOP_IDIOM_IGNORED_PARENTS = TokenUtil.asBitSet(new int[] { 111, 110, 132, 112, 114 });\n-    }\n }\n"}]}
