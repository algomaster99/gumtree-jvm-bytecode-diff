{"diffoscope-json-version": 1, "source1": "first/DiffBuilder.class", "source2": "second/DiffBuilder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,279 +11,279 @@\n {\n     private final List<Diff<?>> diffs;\n     private final boolean objectsTriviallyEqual;\n     private final Object left;\n     private final Object right;\n     private final ToStringStyle style;\n     \n-    public DiffBuilder(final Object lhs, final Object rhs, final ToStringStyle style, final boolean testTriviallyEqual) {\n-        Validate.isTrue(lhs != null, \"lhs cannot be null\", new Object[0]);\n-        Validate.isTrue(rhs != null, \"rhs cannot be null\", new Object[0]);\n+    public DiffBuilder(final Object left, final Object o, final ToStringStyle style, final boolean b) {\n+        Validate.isTrue(left != null, \"lhs cannot be null\", new Object[0]);\n+        Validate.isTrue(o != null, \"rhs cannot be null\", new Object[0]);\n         this.diffs = new ArrayList<Diff<?>>();\n-        this.left = lhs;\n-        this.right = rhs;\n+        this.left = left;\n+        this.right = o;\n         this.style = style;\n-        this.objectsTriviallyEqual = (testTriviallyEqual && (lhs == rhs || lhs.equals(rhs)));\n+        this.objectsTriviallyEqual = (b && (left == o || left.equals(o)));\n     }\n     \n-    public DiffBuilder(final Object lhs, final Object rhs, final ToStringStyle style) {\n-        this(lhs, rhs, style, true);\n+    public DiffBuilder(final Object o, final Object o2, final ToStringStyle toStringStyle) {\n+        this(o, o2, toStringStyle, true);\n     }\n     \n-    public DiffBuilder append(final String fieldName, final boolean lhs, final boolean rhs) {\n-        this.validateFieldNameNotNull(fieldName);\n+    public DiffBuilder append(final String s, final boolean b, final boolean b2) {\n+        this.validateFieldNameNotNull(s);\n         if (this.objectsTriviallyEqual) {\n             return this;\n         }\n-        if (lhs != rhs) {\n-            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$1(this, fieldName, lhs, rhs));\n+        if (b != b2) {\n+            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$1(this, s, b, b2));\n         }\n         return this;\n     }\n     \n-    public DiffBuilder append(final String fieldName, final boolean[] lhs, final boolean[] rhs) {\n-        this.validateFieldNameNotNull(fieldName);\n+    public DiffBuilder append(final String s, final boolean[] a, final boolean[] a2) {\n+        this.validateFieldNameNotNull(s);\n         if (this.objectsTriviallyEqual) {\n             return this;\n         }\n-        if (!Arrays.equals(lhs, rhs)) {\n-            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$2(this, fieldName, lhs, rhs));\n+        if (!Arrays.equals(a, a2)) {\n+            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$2(this, s, a, a2));\n         }\n         return this;\n     }\n     \n-    public DiffBuilder append(final String fieldName, final byte lhs, final byte rhs) {\n-        this.validateFieldNameNotNull(fieldName);\n+    public DiffBuilder append(final String s, final byte b, final byte b2) {\n+        this.validateFieldNameNotNull(s);\n         if (this.objectsTriviallyEqual) {\n             return this;\n         }\n-        if (lhs != rhs) {\n-            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$3(this, fieldName, lhs, rhs));\n+        if (b != b2) {\n+            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$3(this, s, b, b2));\n         }\n         return this;\n     }\n     \n-    public DiffBuilder append(final String fieldName, final byte[] lhs, final byte[] rhs) {\n-        this.validateFieldNameNotNull(fieldName);\n+    public DiffBuilder append(final String s, final byte[] a, final byte[] a2) {\n+        this.validateFieldNameNotNull(s);\n         if (this.objectsTriviallyEqual) {\n             return this;\n         }\n-        if (!Arrays.equals(lhs, rhs)) {\n-            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$4(this, fieldName, lhs, rhs));\n+        if (!Arrays.equals(a, a2)) {\n+            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$4(this, s, a, a2));\n         }\n         return this;\n     }\n     \n-    public DiffBuilder append(final String fieldName, final char lhs, final char rhs) {\n-        this.validateFieldNameNotNull(fieldName);\n+    public DiffBuilder append(final String s, final char c, final char c2) {\n+        this.validateFieldNameNotNull(s);\n         if (this.objectsTriviallyEqual) {\n             return this;\n         }\n-        if (lhs != rhs) {\n-            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$5(this, fieldName, lhs, rhs));\n+        if (c != c2) {\n+            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$5(this, s, c, c2));\n         }\n         return this;\n     }\n     \n-    public DiffBuilder append(final String fieldName, final char[] lhs, final char[] rhs) {\n-        this.validateFieldNameNotNull(fieldName);\n+    public DiffBuilder append(final String s, final char[] a, final char[] a2) {\n+        this.validateFieldNameNotNull(s);\n         if (this.objectsTriviallyEqual) {\n             return this;\n         }\n-        if (!Arrays.equals(lhs, rhs)) {\n-            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$6(this, fieldName, lhs, rhs));\n+        if (!Arrays.equals(a, a2)) {\n+            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$6(this, s, a, a2));\n         }\n         return this;\n     }\n     \n-    public DiffBuilder append(final String fieldName, final double lhs, final double rhs) {\n-        this.validateFieldNameNotNull(fieldName);\n+    public DiffBuilder append(final String s, final double value, final double value2) {\n+        this.validateFieldNameNotNull(s);\n         if (this.objectsTriviallyEqual) {\n             return this;\n         }\n-        if (Double.doubleToLongBits(lhs) != Double.doubleToLongBits(rhs)) {\n-            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$7(this, fieldName, lhs, rhs));\n+        if (Double.doubleToLongBits(value) != Double.doubleToLongBits(value2)) {\n+            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$7(this, s, value, value2));\n         }\n         return this;\n     }\n     \n-    public DiffBuilder append(final String fieldName, final double[] lhs, final double[] rhs) {\n-        this.validateFieldNameNotNull(fieldName);\n+    public DiffBuilder append(final String s, final double[] a, final double[] a2) {\n+        this.validateFieldNameNotNull(s);\n         if (this.objectsTriviallyEqual) {\n             return this;\n         }\n-        if (!Arrays.equals(lhs, rhs)) {\n-            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$8(this, fieldName, lhs, rhs));\n+        if (!Arrays.equals(a, a2)) {\n+            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$8(this, s, a, a2));\n         }\n         return this;\n     }\n     \n-    public DiffBuilder append(final String fieldName, final float lhs, final float rhs) {\n-        this.validateFieldNameNotNull(fieldName);\n+    public DiffBuilder append(final String s, final float value, final float value2) {\n+        this.validateFieldNameNotNull(s);\n         if (this.objectsTriviallyEqual) {\n             return this;\n         }\n-        if (Float.floatToIntBits(lhs) != Float.floatToIntBits(rhs)) {\n-            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$9(this, fieldName, lhs, rhs));\n+        if (Float.floatToIntBits(value) != Float.floatToIntBits(value2)) {\n+            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$9(this, s, value, value2));\n         }\n         return this;\n     }\n     \n-    public DiffBuilder append(final String fieldName, final float[] lhs, final float[] rhs) {\n-        this.validateFieldNameNotNull(fieldName);\n+    public DiffBuilder append(final String s, final float[] a, final float[] a2) {\n+        this.validateFieldNameNotNull(s);\n         if (this.objectsTriviallyEqual) {\n             return this;\n         }\n-        if (!Arrays.equals(lhs, rhs)) {\n-            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$10(this, fieldName, lhs, rhs));\n+        if (!Arrays.equals(a, a2)) {\n+            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$10(this, s, a, a2));\n         }\n         return this;\n     }\n     \n-    public DiffBuilder append(final String fieldName, final int lhs, final int rhs) {\n-        this.validateFieldNameNotNull(fieldName);\n+    public DiffBuilder append(final String s, final int n, final int n2) {\n+        this.validateFieldNameNotNull(s);\n         if (this.objectsTriviallyEqual) {\n             return this;\n         }\n-        if (lhs != rhs) {\n-            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$11(this, fieldName, lhs, rhs));\n+        if (n != n2) {\n+            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$11(this, s, n, n2));\n         }\n         return this;\n     }\n     \n-    public DiffBuilder append(final String fieldName, final int[] lhs, final int[] rhs) {\n-        this.validateFieldNameNotNull(fieldName);\n+    public DiffBuilder append(final String s, final int[] a, final int[] a2) {\n+        this.validateFieldNameNotNull(s);\n         if (this.objectsTriviallyEqual) {\n             return this;\n         }\n-        if (!Arrays.equals(lhs, rhs)) {\n-            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$12(this, fieldName, lhs, rhs));\n+        if (!Arrays.equals(a, a2)) {\n+            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$12(this, s, a, a2));\n         }\n         return this;\n     }\n     \n-    public DiffBuilder append(final String fieldName, final long lhs, final long rhs) {\n-        this.validateFieldNameNotNull(fieldName);\n+    public DiffBuilder append(final String s, final long n, final long n2) {\n+        this.validateFieldNameNotNull(s);\n         if (this.objectsTriviallyEqual) {\n             return this;\n         }\n-        if (lhs != rhs) {\n-            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$13(this, fieldName, lhs, rhs));\n+        if (n != n2) {\n+            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$13(this, s, n, n2));\n         }\n         return this;\n     }\n     \n-    public DiffBuilder append(final String fieldName, final long[] lhs, final long[] rhs) {\n-        this.validateFieldNameNotNull(fieldName);\n+    public DiffBuilder append(final String s, final long[] a, final long[] a2) {\n+        this.validateFieldNameNotNull(s);\n         if (this.objectsTriviallyEqual) {\n             return this;\n         }\n-        if (!Arrays.equals(lhs, rhs)) {\n-            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$14(this, fieldName, lhs, rhs));\n+        if (!Arrays.equals(a, a2)) {\n+            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$14(this, s, a, a2));\n         }\n         return this;\n     }\n     \n-    public DiffBuilder append(final String fieldName, final short lhs, final short rhs) {\n-        this.validateFieldNameNotNull(fieldName);\n+    public DiffBuilder append(final String s, final short n, final short n2) {\n+        this.validateFieldNameNotNull(s);\n         if (this.objectsTriviallyEqual) {\n             return this;\n         }\n-        if (lhs != rhs) {\n-            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$15(this, fieldName, lhs, rhs));\n+        if (n != n2) {\n+            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$15(this, s, n, n2));\n         }\n         return this;\n     }\n     \n-    public DiffBuilder append(final String fieldName, final short[] lhs, final short[] rhs) {\n-        this.validateFieldNameNotNull(fieldName);\n+    public DiffBuilder append(final String s, final short[] a, final short[] a2) {\n+        this.validateFieldNameNotNull(s);\n         if (this.objectsTriviallyEqual) {\n             return this;\n         }\n-        if (!Arrays.equals(lhs, rhs)) {\n-            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$16(this, fieldName, lhs, rhs));\n+        if (!Arrays.equals(a, a2)) {\n+            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$16(this, s, a, a2));\n         }\n         return this;\n     }\n     \n-    public DiffBuilder append(final String fieldName, final Object lhs, final Object rhs) {\n-        this.validateFieldNameNotNull(fieldName);\n+    public DiffBuilder append(final String s, final Object o, final Object obj) {\n+        this.validateFieldNameNotNull(s);\n         if (this.objectsTriviallyEqual) {\n             return this;\n         }\n-        if (lhs == rhs) {\n+        if (o == obj) {\n             return this;\n         }\n-        Object objectToTest;\n-        if (lhs != null) {\n-            objectToTest = lhs;\n+        Object o2;\n+        if (o != null) {\n+            o2 = o;\n         }\n         else {\n-            objectToTest = rhs;\n+            o2 = obj;\n         }\n-        if (objectToTest.getClass().isArray()) {\n-            if (objectToTest instanceof boolean[]) {\n-                return this.append(fieldName, lhs, (boolean[])(boolean[])rhs);\n+        if (o2.getClass().isArray()) {\n+            if (o2 instanceof boolean[]) {\n+                return this.append(s, o, (boolean[])(boolean[])obj);\n             }\n-            if (objectToTest instanceof byte[]) {\n-                return this.append(fieldName, lhs, (byte[])(byte[])rhs);\n+            if (o2 instanceof byte[]) {\n+                return this.append(s, o, (byte[])(byte[])obj);\n             }\n-            if (objectToTest instanceof char[]) {\n-                return this.append(fieldName, lhs, (char[])(char[])rhs);\n+            if (o2 instanceof char[]) {\n+                return this.append(s, o, (char[])(char[])obj);\n             }\n-            if (objectToTest instanceof double[]) {\n-                return this.append(fieldName, lhs, (double[])(double[])rhs);\n+            if (o2 instanceof double[]) {\n+                return this.append(s, o, (double[])(double[])obj);\n             }\n-            if (objectToTest instanceof float[]) {\n-                return this.append(fieldName, lhs, (float[])(float[])rhs);\n+            if (o2 instanceof float[]) {\n+                return this.append(s, o, (float[])(float[])obj);\n             }\n-            if (objectToTest instanceof int[]) {\n-                return this.append(fieldName, lhs, (int[])(int[])rhs);\n+            if (o2 instanceof int[]) {\n+                return this.append(s, o, (int[])(int[])obj);\n             }\n-            if (objectToTest instanceof long[]) {\n-                return this.append(fieldName, lhs, (long[])(long[])rhs);\n+            if (o2 instanceof long[]) {\n+                return this.append(s, o, (long[])(long[])obj);\n             }\n-            if (objectToTest instanceof short[]) {\n-                return this.append(fieldName, lhs, (short[])(short[])rhs);\n+            if (o2 instanceof short[]) {\n+                return this.append(s, o, (short[])(short[])obj);\n             }\n-            return this.append(fieldName, lhs, (Object[])(Object[])rhs);\n+            return this.append(s, o, (Object[])(Object[])obj);\n         }\n         else {\n-            if (lhs != null && lhs.equals(rhs)) {\n+            if (o != null && o.equals(obj)) {\n                 return this;\n             }\n-            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$17(this, fieldName, lhs, rhs));\n+            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$17(this, s, o, obj));\n             return this;\n         }\n     }\n     \n-    public DiffBuilder append(final String fieldName, final Object[] lhs, final Object[] rhs) {\n-        this.validateFieldNameNotNull(fieldName);\n+    public DiffBuilder append(final String s, final Object[] a, final Object[] a2) {\n+        this.validateFieldNameNotNull(s);\n         if (this.objectsTriviallyEqual) {\n             return this;\n         }\n-        if (!Arrays.equals(lhs, rhs)) {\n-            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$18(this, fieldName, lhs, rhs));\n+        if (!Arrays.equals(a, a2)) {\n+            this.diffs.add((Diff<?>)new DiffBuilder.DiffBuilder$18(this, s, a, a2));\n         }\n         return this;\n     }\n     \n-    public DiffBuilder append(final String fieldName, final DiffResult diffResult) {\n-        this.validateFieldNameNotNull(fieldName);\n+    public DiffBuilder append(final String str, final DiffResult diffResult) {\n+        this.validateFieldNameNotNull(str);\n         Validate.isTrue(diffResult != null, \"Diff result cannot be null\", new Object[0]);\n         if (this.objectsTriviallyEqual) {\n             return this;\n         }\n-        for (final Diff<?> diff : diffResult.getDiffs()) {\n-            this.append(fieldName + \".\" + diff.getFieldName(), diff.getLeft(), diff.getRight());\n+        for (final Diff diff : diffResult.getDiffs()) {\n+            this.append(str + \".\" + diff.getFieldName(), diff.getLeft(), diff.getRight());\n         }\n         return this;\n     }\n     \n     public DiffResult build() {\n         return new DiffResult(this.left, this.right, (List)this.diffs, this.style);\n     }\n     \n-    private void validateFieldNameNotNull(final String fieldName) {\n-        Validate.isTrue(fieldName != null, \"Field name cannot be null\", new Object[0]);\n+    private void validateFieldNameNotNull(final String s) {\n+        Validate.isTrue(s != null, \"Field name cannot be null\", new Object[0]);\n     }\n }\n"}]}
