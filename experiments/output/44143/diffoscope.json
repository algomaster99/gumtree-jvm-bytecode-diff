{"diffoscope-json-version": 1, "source1": "first/NodeSelector.class", "source2": "second/NodeSelector.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -24,15 +24,15 @@\n     public ImmutableNode select(final ImmutableNode root, final NodeKeyResolver<ImmutableNode> resolver, final NodeHandler<ImmutableNode> handler) {\n         List<ImmutableNode> nodes = new LinkedList<ImmutableNode>();\n         final Iterator<String> itKeys = this.nodeKeys.iterator();\n         this.getFilteredResults(root, resolver, handler, itKeys.next(), nodes);\n         while (itKeys.hasNext()) {\n             final String currentKey = (String)itKeys.next();\n             final List<ImmutableNode> currentResults = new LinkedList<ImmutableNode>();\n-            nodes.forEach(currentRoot -> this.getFilteredResults(currentRoot, resolver, (NodeHandler<ImmutableNode>)handler, currentKey, (List<ImmutableNode>)currentResults));\n+            nodes.forEach(currentRoot -> this.getFilteredResults(currentRoot, resolver2, (NodeHandler<ImmutableNode>)handler2, key, (List<ImmutableNode>)nodes2));\n             nodes = currentResults;\n         }\n         return (nodes.size() == 1) ? ((ImmutableNode)nodes.get(0)) : null;\n     }\n     \n     public NodeSelector subSelector(final String subKey) {\n         final List<String> keys = new ArrayList<String>(this.nodeKeys.size() + 1);\n@@ -63,12 +63,12 @@\n         return new ToStringBuilder((Object)this).append(\"keys\", (Object)this.nodeKeys).toString();\n     }\n     \n     private void getFilteredResults(final ImmutableNode root, final NodeKeyResolver<ImmutableNode> resolver, final NodeHandler<ImmutableNode> handler, final String key, final List<ImmutableNode> nodes) {\n         final List<QueryResult<ImmutableNode>> results = resolver.resolveKey((Object)root, key, (NodeHandler)handler);\n         results.forEach(result -> {\n             if (!result.isAttributeResult()) {\n-                nodes.add(result.getNode());\n+                list.add(result.getNode());\n             }\n         });\n     }\n }\n"}]}
