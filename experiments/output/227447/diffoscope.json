{"diffoscope-json-version": 1, "source1": "first/LambdaHandler.class", "source2": "second/LambdaHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -3,76 +3,73 @@\n \n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n \n public class LambdaHandler extends AbstractExpressionHandler\n {\n     private boolean isLambdaCorrectlyIndented;\n     \n-    public LambdaHandler(final IndentationCheck indentCheck, final DetailAST ast, final AbstractExpressionHandler parent) {\n-        super(indentCheck, \"lambda\", ast, parent);\n+    public LambdaHandler(final IndentationCheck indentationCheck, final DetailAST detailAST, final AbstractExpressionHandler abstractExpressionHandler) {\n+        super(indentationCheck, \"lambda\", detailAST, abstractExpressionHandler);\n         this.isLambdaCorrectlyIndented = true;\n     }\n     \n-    public IndentLevel getSuggestedChildIndent(final AbstractExpressionHandler child) {\n-        IndentLevel childIndent = this.getIndent();\n+    public IndentLevel getSuggestedChildIndent(final AbstractExpressionHandler abstractExpressionHandler) {\n+        IndentLevel indentLevel = this.getIndent();\n         if (this.isLambdaCorrectlyIndented) {\n-            childIndent = IndentLevel.addAcceptable(childIndent, new int[] { this.getLineStart(this.getMainAst()), this.getLineStart(this.getMainAst().getFirstChild()) });\n+            indentLevel = IndentLevel.addAcceptable(indentLevel, new int[] { this.getLineStart(this.getMainAst()), this.getLineStart(this.getMainAst().getFirstChild()) });\n         }\n-        return childIndent;\n+        return indentLevel;\n     }\n     \n     protected IndentLevel getIndentImpl() {\n         if (this.getParent() instanceof MethodCallHandler) {\n             return this.getParent().getSuggestedChildIndent((AbstractExpressionHandler)this);\n         }\n-        DetailAST parent = this.getMainAst().getParent();\n+        DetailAST detailAST = this.getMainAst().getParent();\n         if (this.getParent() instanceof NewHandler) {\n-            parent = parent.getParent();\n+            detailAST = detailAST.getParent();\n         }\n-        IndentLevel level = new IndentLevel(this.getLineStart(parent));\n+        IndentLevel indentLevel = new IndentLevel(this.getLineStart(detailAST));\n         final DetailAST firstChild = this.getMainAst().getFirstChild();\n         if (this.getLineStart(firstChild) == this.expandedTabsColumnNo(firstChild)) {\n-            level = new IndentLevel(level, new int[] { this.getIndentCheck().getLineWrappingIndentation() });\n+            indentLevel = new IndentLevel(indentLevel, new int[] { this.getIndentCheck().getLineWrappingIndentation() });\n         }\n-        return level;\n+        return indentLevel;\n     }\n     \n     public void checkIndentation() {\n         final DetailAST mainAst = this.getMainAst();\n         final DetailAST firstChild = mainAst.getFirstChild();\n-        final boolean isSwitchRuleLambda = firstChild == null;\n-        if (!isSwitchRuleLambda && this.getLineStart(firstChild) == this.expandedTabsColumnNo(firstChild)) {\n-            final int firstChildColumnNo = this.expandedTabsColumnNo(firstChild);\n-            final IndentLevel level = this.getIndent();\n-            if (this.isNonAcceptableIndent(firstChildColumnNo, level)) {\n+        final boolean b = firstChild == null;\n+        if (!b && this.getLineStart(firstChild) == this.expandedTabsColumnNo(firstChild)) {\n+            final int expandedTabsColumnNo = this.expandedTabsColumnNo(firstChild);\n+            final IndentLevel indent = this.getIndent();\n+            if (this.isNonAcceptableIndent(expandedTabsColumnNo, indent)) {\n                 this.isLambdaCorrectlyIndented = false;\n-                this.logError(firstChild, \"arguments\", firstChildColumnNo, level);\n+                this.logError(firstChild, \"arguments\", expandedTabsColumnNo, indent);\n             }\n         }\n-        final int mainAstColumnNo = this.expandedTabsColumnNo(mainAst);\n-        final boolean isLineWrappedLambda = mainAstColumnNo == this.getLineStart(mainAst);\n-        if (isLineWrappedLambda) {\n-            this.checkLineWrappedLambda(isSwitchRuleLambda, mainAstColumnNo);\n+        final int expandedTabsColumnNo2 = this.expandedTabsColumnNo(mainAst);\n+        if (expandedTabsColumnNo2 == this.getLineStart(mainAst)) {\n+            this.checkLineWrappedLambda(b, expandedTabsColumnNo2);\n         }\n     }\n     \n-    private boolean isNonAcceptableIndent(final int astColumnNo, final IndentLevel level) {\n-        return astColumnNo < level.getFirstIndentLevel() || (this.getIndentCheck().isForceStrictCondition() && !level.isAcceptable(astColumnNo));\n+    private boolean isNonAcceptableIndent(final int n, final IndentLevel indentLevel) {\n+        return n < indentLevel.getFirstIndentLevel() || (this.getIndentCheck().isForceStrictCondition() && !indentLevel.isAcceptable(n));\n     }\n     \n-    private void checkLineWrappedLambda(final boolean isSwitchRuleLambda, final int mainAstColumnNo) {\n+    private void checkLineWrappedLambda(final boolean b, final int n) {\n         final DetailAST mainAst = this.getMainAst();\n-        IndentLevel level;\n-        if (isSwitchRuleLambda) {\n-            final DetailAST previousSibling = mainAst.getPreviousSibling();\n-            final int previousLineStart = this.getLineStart(previousSibling);\n-            level = new IndentLevel(new IndentLevel(previousLineStart), new int[] { this.getIndentCheck().getLineWrappingIndentation() });\n+        IndentLevel indentLevel;\n+        if (b) {\n+            indentLevel = new IndentLevel(new IndentLevel(this.getLineStart(mainAst.getPreviousSibling())), new int[] { this.getIndentCheck().getLineWrappingIndentation() });\n         }\n         else {\n-            level = new IndentLevel(this.getIndent(), new int[] { this.getIndentCheck().getLineWrappingIndentation() });\n+            indentLevel = new IndentLevel(this.getIndent(), new int[] { this.getIndentCheck().getLineWrappingIndentation() });\n         }\n-        if (this.isNonAcceptableIndent(mainAstColumnNo, level)) {\n+        if (this.isNonAcceptableIndent(n, indentLevel)) {\n             this.isLambdaCorrectlyIndented = false;\n-            this.logError(mainAst, \"\", mainAstColumnNo, level);\n+            this.logError(mainAst, \"\", n, indentLevel);\n         }\n     }\n }\n"}]}
