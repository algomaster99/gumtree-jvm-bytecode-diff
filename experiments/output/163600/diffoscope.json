{"diffoscope-json-version": 1, "source1": "first/TarArchiveInputStream.class", "source2": "second/TarArchiveInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,133 +1,133 @@\n-  SHA-256 checksum e98c54f9a608831f78aaa6722484527af216e0144dcad20f26a25b7aed30b5a3\n+  SHA-256 checksum b877966b1f8b61a686d9fd57d805d78f0ff34bd8e68185e4b0f1b7329c5ac590\n   Compiled from \"TarArchiveInputStream.java\"\n public class org.apache.commons.compress.archivers.tar.TarArchiveInputStream extends org.apache.commons.compress.archivers.ArchiveInputStream\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #5                          // org/apache/commons/compress/archivers/tar/TarArchiveInputStream\n   super_class: #118                       // org/apache/commons/compress/archivers/ArchiveInputStream\n   interfaces: 0, fields: 12, methods: 35, attributes: 1\n Constant pool:\n-    #1 = Class              #257          // org/apache/commons/compress/archivers/tar/TarConstants\n-    #2 = Methodref          #5.#258       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.\"<init>\":(Ljava/io/InputStream;II)V\n-    #3 = Methodref          #5.#259       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.\"<init>\":(Ljava/io/InputStream;IILjava/lang/String;)V\n-    #4 = Methodref          #118.#260     // org/apache/commons/compress/archivers/ArchiveInputStream.\"<init>\":()V\n-    #5 = Class              #261          // org/apache/commons/compress/archivers/tar/TarArchiveInputStream\n-    #6 = Fieldref           #5.#262       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.smallBuf:[B\n-    #7 = Class              #263          // java/util/HashMap\n-    #8 = Methodref          #7.#260       // java/util/HashMap.\"<init>\":()V\n-    #9 = Fieldref           #5.#264       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.globalPaxHeaders:Ljava/util/Map;\n-   #10 = Fieldref           #5.#265       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.is:Ljava/io/InputStream;\n-   #11 = Fieldref           #5.#266       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.hasHitEOF:Z\n-   #12 = Fieldref           #5.#267       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.encoding:Ljava/lang/String;\n-   #13 = Methodref          #268.#269     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #14 = Fieldref           #5.#270       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #15 = Fieldref           #5.#271       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.recordSize:I\n-   #16 = Fieldref           #5.#272       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.blockSize:I\n-   #17 = Methodref          #273.#274     // java/io/InputStream.close:()V\n-   #18 = Methodref          #5.#275       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.isDirectory:()Z\n-   #19 = Fieldref           #5.#276       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.entrySize:J\n-   #20 = Fieldref           #5.#277       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.entryOffset:J\n-   #21 = Class              #278          // java/lang/Integer\n+    #1 = Class              #252          // org/apache/commons/compress/archivers/tar/TarConstants\n+    #2 = Methodref          #5.#253       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.\"<init>\":(Ljava/io/InputStream;II)V\n+    #3 = Methodref          #5.#254       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.\"<init>\":(Ljava/io/InputStream;IILjava/lang/String;)V\n+    #4 = Methodref          #118.#255     // org/apache/commons/compress/archivers/ArchiveInputStream.\"<init>\":()V\n+    #5 = Class              #256          // org/apache/commons/compress/archivers/tar/TarArchiveInputStream\n+    #6 = Fieldref           #5.#257       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.smallBuf:[B\n+    #7 = Class              #258          // java/util/HashMap\n+    #8 = Methodref          #7.#255       // java/util/HashMap.\"<init>\":()V\n+    #9 = Fieldref           #5.#259       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.globalPaxHeaders:Ljava/util/Map;\n+   #10 = Fieldref           #5.#260       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.is:Ljava/io/InputStream;\n+   #11 = Fieldref           #5.#261       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.hasHitEOF:Z\n+   #12 = Fieldref           #5.#262       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.encoding:Ljava/lang/String;\n+   #13 = Methodref          #263.#264     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #14 = Fieldref           #5.#265       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #15 = Fieldref           #5.#266       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.recordSize:I\n+   #16 = Fieldref           #5.#267       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.blockSize:I\n+   #17 = Methodref          #213.#268     // java/io/InputStream.close:()V\n+   #18 = Methodref          #5.#269       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.isDirectory:()Z\n+   #19 = Fieldref           #5.#270       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.entrySize:J\n+   #20 = Fieldref           #5.#271       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.entryOffset:J\n+   #21 = Class              #272          // java/lang/Integer\n    #22 = Long               2147483647l\n    #24 = Integer            2147483647\n-   #25 = Methodref          #279.#280     // java/lang/Math.min:(JJ)J\n-   #26 = Methodref          #273.#281     // java/io/InputStream.skip:(J)J\n-   #27 = Methodref          #5.#282       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.count:(J)V\n-   #28 = Methodref          #5.#283       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.isAtEOF:()Z\n-   #29 = Fieldref           #5.#284       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-   #30 = Class              #285          // java/lang/Long\n+   #25 = Methodref          #273.#274     // java/lang/Math.min:(JJ)J\n+   #26 = Methodref          #213.#275     // java/io/InputStream.skip:(J)J\n+   #27 = Methodref          #5.#276       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.count:(J)V\n+   #28 = Methodref          #5.#277       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.isAtEOF:()Z\n+   #29 = Fieldref           #5.#278       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+   #30 = Class              #279          // java/lang/Long\n    #31 = Long               9223372036854775807l\n-   #33 = Methodref          #286.#287     // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n-   #34 = Methodref          #5.#288       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.skipRecordPadding:()V\n-   #35 = Methodref          #5.#289       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.getRecord:()[B\n-   #36 = Class              #290          // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-   #37 = Methodref          #36.#291      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;)V\n-   #38 = Class              #292          // java/lang/IllegalArgumentException\n-   #39 = Class              #293          // java/io/IOException\n-   #40 = String             #294          // Error detected parsing the header\n-   #41 = Methodref          #39.#295      // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #42 = Methodref          #36.#296      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n-   #43 = Methodref          #36.#297      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongLinkEntry:()Z\n-   #44 = Methodref          #5.#298       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.getLongNameData:()[B\n-   #45 = InterfaceMethodref #299.#300     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-   #46 = Methodref          #36.#301      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setLinkName:(Ljava/lang/String;)V\n-   #47 = Methodref          #36.#302      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongNameEntry:()Z\n-   #48 = Methodref          #36.#303      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setName:(Ljava/lang/String;)V\n-   #49 = Methodref          #36.#304      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGlobalPaxHeader:()Z\n-   #50 = Methodref          #5.#305       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.readGlobalPaxHeaders:()V\n-   #51 = Methodref          #36.#306      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxHeader:()Z\n-   #52 = Methodref          #5.#307       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.paxHeaders:()V\n-   #53 = InterfaceMethodref #308.#309     // java/util/Map.isEmpty:()Z\n-   #54 = Methodref          #5.#310       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.applyPaxHeadersToCurrentEntry:(Ljava/util/Map;)V\n-   #55 = Methodref          #36.#311      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isOldGNUSparse:()Z\n-   #56 = Methodref          #5.#312       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.readOldGNUSparse:()V\n-   #57 = Class              #313          // java/io/ByteArrayOutputStream\n-   #58 = Methodref          #57.#260      // java/io/ByteArrayOutputStream.\"<init>\":()V\n-   #59 = Methodref          #5.#314       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.read:([B)I\n-   #60 = Methodref          #57.#315      // java/io/ByteArrayOutputStream.write:([BII)V\n-   #61 = Methodref          #5.#316       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.getNextEntry:()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n-   #62 = Methodref          #57.#317      // java/io/ByteArrayOutputStream.toByteArray:()[B\n-   #63 = Methodref          #318.#319     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #64 = Methodref          #5.#320       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.readRecord:()[B\n-   #65 = Methodref          #5.#321       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.isEOFRecord:([B)Z\n-   #66 = Methodref          #5.#322       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.setAtEOF:(Z)V\n-   #67 = Methodref          #5.#323       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.tryToConsumeSecondEOFRecord:()V\n-   #68 = Methodref          #5.#324       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.consumeRemainderOfLastBlock:()V\n-   #69 = Methodref          #325.#326     // org/apache/commons/compress/utils/ArchiveUtils.isArrayZero:([BI)Z\n-   #70 = Methodref          #286.#327     // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[B)I\n-   #71 = Methodref          #5.#328       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.count:(I)V\n-   #72 = Methodref          #5.#329       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.parsePaxHeaders:(Ljava/io/InputStream;)Ljava/util/Map;\n-   #73 = Methodref          #7.#330       // java/util/HashMap.\"<init>\":(Ljava/util/Map;)V\n-   #74 = Methodref          #273.#331     // java/io/InputStream.read:()I\n-   #75 = Class              #332          // org/apache/commons/compress/utils/CharsetNames\n-   #76 = String             #333          // UTF-8\n-   #77 = Methodref          #57.#334      // java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;\n-   #78 = InterfaceMethodref #308.#335     // java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #79 = Class              #336          // java/lang/StringBuilder\n-   #80 = Methodref          #79.#260      // java/lang/StringBuilder.\"<init>\":()V\n-   #81 = String             #337          // Failed to read Paxheader. Expected\n-   #82 = Methodref          #79.#338      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #83 = Methodref          #79.#339      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #84 = String             #340          //  bytes, read\n-   #85 = Methodref          #79.#341      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #86 = Methodref          #39.#342      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #87 = Class              #343          // java/lang/String\n-   #88 = Methodref          #87.#344      // java/lang/String.\"<init>\":([BIILjava/lang/String;)V\n-   #89 = InterfaceMethodref #308.#345     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #90 = Methodref          #57.#346      // java/io/ByteArrayOutputStream.write:(I)V\n-   #91 = Methodref          #36.#347      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.updateEntryFromPaxHeaders:(Ljava/util/Map;)V\n-   #92 = Methodref          #36.#348      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isExtended:()Z\n-   #93 = Class              #349          // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry\n-   #94 = Methodref          #93.#350      // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.\"<init>\":([B)V\n-   #95 = Methodref          #93.#348      // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.isExtended:()Z\n-   #96 = Methodref          #36.#275      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n-   #97 = Methodref          #5.#351       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-   #98 = Methodref          #273.#352     // java/io/InputStream.markSupported:()Z\n-   #99 = Methodref          #273.#353     // java/io/InputStream.mark:(I)V\n-  #100 = Methodref          #5.#354       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.pushedBackBytes:(J)V\n-  #101 = Methodref          #273.#355     // java/io/InputStream.reset:()V\n-  #102 = Class              #356          // java/lang/IllegalStateException\n-  #103 = String             #357          // No current tar entry\n-  #104 = Methodref          #102.#342     // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-  #105 = Methodref          #5.#358       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.available:()I\n-  #106 = Methodref          #279.#359     // java/lang/Math.min:(II)I\n-  #107 = Methodref          #273.#360     // java/io/InputStream.read:([BII)I\n-  #108 = String             #361          // Truncated TAR archive\n-  #109 = Methodref          #36.#362      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSparse:()Z\n-  #110 = Methodref          #5.#363       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.getBytesRead:()J\n-  #111 = String             #364          // ustar\\u0000\n-  #112 = Methodref          #325.#365     // org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n-  #113 = String             #366          // 00\n-  #114 = String             #367          // ustar\n-  #115 = String             #368          //  \\u0000\n-  #116 = String             #369          // 0\\u0000\n-  #117 = String             #370          // \\u0000\\u0000\n-  #118 = Class              #371          // org/apache/commons/compress/archivers/ArchiveInputStream\n+   #33 = Methodref          #280.#281     // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+   #34 = Methodref          #5.#282       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.skipRecordPadding:()V\n+   #35 = Methodref          #5.#283       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.getRecord:()[B\n+   #36 = Class              #284          // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+   #37 = Methodref          #36.#285      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;)V\n+   #38 = Class              #286          // java/lang/IllegalArgumentException\n+   #39 = Class              #287          // java/io/IOException\n+   #40 = String             #288          // Error detected parsing the header\n+   #41 = Methodref          #39.#289      // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #42 = Methodref          #36.#290      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+   #43 = Methodref          #36.#291      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongLinkEntry:()Z\n+   #44 = Methodref          #5.#292       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.getLongNameData:()[B\n+   #45 = InterfaceMethodref #293.#294     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+   #46 = Methodref          #36.#295      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setLinkName:(Ljava/lang/String;)V\n+   #47 = Methodref          #36.#296      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongNameEntry:()Z\n+   #48 = Methodref          #36.#297      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setName:(Ljava/lang/String;)V\n+   #49 = Methodref          #36.#298      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGlobalPaxHeader:()Z\n+   #50 = Methodref          #5.#299       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.readGlobalPaxHeaders:()V\n+   #51 = Methodref          #36.#300      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxHeader:()Z\n+   #52 = Methodref          #5.#301       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.paxHeaders:()V\n+   #53 = InterfaceMethodref #212.#302     // java/util/Map.isEmpty:()Z\n+   #54 = Methodref          #5.#303       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.applyPaxHeadersToCurrentEntry:(Ljava/util/Map;)V\n+   #55 = Methodref          #36.#304      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isOldGNUSparse:()Z\n+   #56 = Methodref          #5.#305       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.readOldGNUSparse:()V\n+   #57 = Class              #306          // java/io/ByteArrayOutputStream\n+   #58 = Methodref          #57.#255      // java/io/ByteArrayOutputStream.\"<init>\":()V\n+   #59 = Methodref          #5.#307       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.read:([B)I\n+   #60 = Methodref          #57.#308      // java/io/ByteArrayOutputStream.write:([BII)V\n+   #61 = Methodref          #5.#309       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.getNextEntry:()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+   #62 = Methodref          #57.#310      // java/io/ByteArrayOutputStream.toByteArray:()[B\n+   #63 = Methodref          #311.#312     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #64 = Methodref          #5.#313       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.readRecord:()[B\n+   #65 = Methodref          #5.#314       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.isEOFRecord:([B)Z\n+   #66 = Methodref          #5.#315       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.setAtEOF:(Z)V\n+   #67 = Methodref          #5.#316       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.tryToConsumeSecondEOFRecord:()V\n+   #68 = Methodref          #5.#317       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.consumeRemainderOfLastBlock:()V\n+   #69 = Methodref          #318.#319     // org/apache/commons/compress/utils/ArchiveUtils.isArrayZero:([BI)Z\n+   #70 = Methodref          #280.#320     // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[B)I\n+   #71 = Methodref          #5.#321       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.count:(I)V\n+   #72 = Methodref          #5.#322       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.parsePaxHeaders:(Ljava/io/InputStream;)Ljava/util/Map;\n+   #73 = Methodref          #7.#323       // java/util/HashMap.\"<init>\":(Ljava/util/Map;)V\n+   #74 = Methodref          #213.#324     // java/io/InputStream.read:()I\n+   #75 = Class              #325          // org/apache/commons/compress/utils/CharsetNames\n+   #76 = String             #326          // UTF-8\n+   #77 = Methodref          #57.#327      // java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;\n+   #78 = InterfaceMethodref #212.#328     // java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #79 = Class              #329          // java/lang/StringBuilder\n+   #80 = Methodref          #79.#255      // java/lang/StringBuilder.\"<init>\":()V\n+   #81 = String             #330          // Failed to read Paxheader. Expected\n+   #82 = Methodref          #79.#331      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #83 = Methodref          #79.#332      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #84 = String             #333          //  bytes, read\n+   #85 = Methodref          #79.#334      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #86 = Methodref          #39.#335      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #87 = Class              #336          // java/lang/String\n+   #88 = Methodref          #87.#337      // java/lang/String.\"<init>\":([BIILjava/lang/String;)V\n+   #89 = InterfaceMethodref #212.#338     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #90 = Methodref          #57.#339      // java/io/ByteArrayOutputStream.write:(I)V\n+   #91 = Methodref          #36.#340      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.updateEntryFromPaxHeaders:(Ljava/util/Map;)V\n+   #92 = Methodref          #36.#341      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isExtended:()Z\n+   #93 = Class              #342          // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry\n+   #94 = Methodref          #93.#343      // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.\"<init>\":([B)V\n+   #95 = Methodref          #93.#341      // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.isExtended:()Z\n+   #96 = Methodref          #36.#269      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n+   #97 = Methodref          #5.#344       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+   #98 = Methodref          #213.#345     // java/io/InputStream.markSupported:()Z\n+   #99 = Methodref          #213.#346     // java/io/InputStream.mark:(I)V\n+  #100 = Methodref          #5.#347       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.pushedBackBytes:(J)V\n+  #101 = Methodref          #213.#348     // java/io/InputStream.reset:()V\n+  #102 = Class              #349          // java/lang/IllegalStateException\n+  #103 = String             #350          // No current tar entry\n+  #104 = Methodref          #102.#335     // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+  #105 = Methodref          #5.#351       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.available:()I\n+  #106 = Methodref          #273.#352     // java/lang/Math.min:(II)I\n+  #107 = Methodref          #213.#353     // java/io/InputStream.read:([BII)I\n+  #108 = String             #354          // Truncated TAR archive\n+  #109 = Methodref          #36.#355      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSparse:()Z\n+  #110 = Methodref          #5.#356       // org/apache/commons/compress/archivers/tar/TarArchiveInputStream.getBytesRead:()J\n+  #111 = String             #357          // ustar\\u0000\n+  #112 = Methodref          #318.#358     // org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n+  #113 = String             #359          // 00\n+  #114 = String             #360          // ustar\n+  #115 = String             #361          //  \\u0000\n+  #116 = String             #362          // 0\\u0000\n+  #117 = String             #363          // \\u0000\\u0000\n+  #118 = Class              #364          // org/apache/commons/compress/archivers/ArchiveInputStream\n   #119 = Utf8               SMALL_BUFFER_SIZE\n   #120 = Utf8               I\n   #121 = Utf8               ConstantValue\n   #122 = Integer            256\n   #123 = Utf8               smallBuf\n   #124 = Utf8               [B\n   #125 = Utf8               recordSize\n@@ -182,265 +182,258 @@\n   #174 = Utf8               ()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n   #175 = Utf8               e\n   #176 = Utf8               Ljava/lang/IllegalArgumentException;\n   #177 = Utf8               longLinkData\n   #178 = Utf8               longNameData\n   #179 = Utf8               headerBuf\n   #180 = Class              #124          // \"[B\"\n-  #181 = Class              #292          // java/lang/IllegalArgumentException\n-  #182 = Utf8               skipRecordPadding\n-  #183 = Utf8               numRecords\n-  #184 = Utf8               padding\n-  #185 = Utf8               getLongNameData\n-  #186 = Utf8               ()[B\n-  #187 = Utf8               l\n-  #188 = Utf8               longName\n-  #189 = Utf8               Ljava/io/ByteArrayOutputStream;\n-  #190 = Utf8               length\n-  #191 = Class              #313          // java/io/ByteArrayOutputStream\n-  #192 = Utf8               getRecord\n-  #193 = Utf8               isEOFRecord\n-  #194 = Utf8               ([B)Z\n-  #195 = Utf8               record\n-  #196 = Utf8               readRecord\n-  #197 = Utf8               readNow\n-  #198 = Utf8               readGlobalPaxHeaders\n-  #199 = Utf8               paxHeaders\n-  #200 = Utf8               headers\n-  #201 = Utf8               LocalVariableTypeTable\n-  #202 = Utf8               parsePaxHeaders\n-  #203 = Utf8               (Ljava/io/InputStream;)Ljava/util/Map;\n-  #204 = Utf8               rest\n-  #205 = Utf8               got\n-  #206 = Utf8               value\n-  #207 = Utf8               keyword\n-  #208 = Utf8               restLen\n-  #209 = Utf8               coll\n-  #210 = Utf8               ch\n-  #211 = Utf8               len\n-  #212 = Utf8               read\n-  #213 = Utf8               i\n-  #214 = Class              #372          // java/util/Map\n-  #215 = Class              #261          // org/apache/commons/compress/archivers/tar/TarArchiveInputStream\n-  #216 = Class              #373          // java/io/InputStream\n-  #217 = Class              #343          // java/lang/String\n-  #218 = Utf8               (Ljava/io/InputStream;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n-  #219 = Utf8               applyPaxHeadersToCurrentEntry\n-  #220 = Utf8               (Ljava/util/Map;)V\n-  #221 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n-  #222 = Utf8               readOldGNUSparse\n-  #223 = Utf8               entry\n-  #224 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveSparseEntry;\n-  #225 = Utf8               isDirectory\n-  #226 = Utf8               getNextEntry\n-  #227 = Utf8               ()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n-  #228 = Utf8               tryToConsumeSecondEOFRecord\n-  #229 = Utf8               shouldReset\n-  #230 = Utf8               marked\n-  #231 = Class              #374          // java/lang/Throwable\n-  #232 = Utf8               ([BII)I\n-  #233 = Utf8               buf\n-  #234 = Utf8               offset\n-  #235 = Utf8               numToRead\n-  #236 = Utf8               totalRead\n-  #237 = Utf8               canReadEntryData\n-  #238 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z\n-  #239 = Utf8               te\n-  #240 = Utf8               ae\n-  #241 = Utf8               Lorg/apache/commons/compress/archivers/ArchiveEntry;\n-  #242 = Class              #290          // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-  #243 = Utf8               getCurrentEntry\n-  #244 = Utf8               setCurrentEntry\n-  #245 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n-  #246 = Utf8               isAtEOF\n-  #247 = Utf8               setAtEOF\n-  #248 = Utf8               (Z)V\n-  #249 = Utf8               b\n-  #250 = Utf8               consumeRemainderOfLastBlock\n-  #251 = Utf8               bytesReadOfLastBlock\n-  #252 = Utf8               matches\n-  #253 = Utf8               ([BI)Z\n-  #254 = Utf8               signature\n-  #255 = Utf8               SourceFile\n-  #256 = Utf8               TarArchiveInputStream.java\n-  #257 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n-  #258 = NameAndType        #144:#154     // \"<init>\":(Ljava/io/InputStream;II)V\n-  #259 = NameAndType        #144:#155     // \"<init>\":(Ljava/io/InputStream;IILjava/lang/String;)V\n-  #260 = NameAndType        #144:#157     // \"<init>\":()V\n-  #261 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveInputStream\n-  #262 = NameAndType        #123:#124     // smallBuf:[B\n-  #263 = Utf8               java/util/HashMap\n-  #264 = NameAndType        #140:#141     // globalPaxHeaders:Ljava/util/Map;\n-  #265 = NameAndType        #132:#133     // is:Ljava/io/InputStream;\n-  #266 = NameAndType        #127:#128     // hasHitEOF:Z\n-  #267 = NameAndType        #138:#139     // encoding:Ljava/lang/String;\n-  #268 = Class              #375          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #269 = NameAndType        #376:#377     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #270 = NameAndType        #136:#137     // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #271 = NameAndType        #125:#120     // recordSize:I\n-  #272 = NameAndType        #126:#120     // blockSize:I\n-  #273 = Class              #373          // java/io/InputStream\n-  #274 = NameAndType        #156:#157     // close:()V\n-  #275 = NameAndType        #225:#168     // isDirectory:()Z\n-  #276 = NameAndType        #129:#130     // entrySize:J\n-  #277 = NameAndType        #131:#130     // entryOffset:J\n-  #278 = Utf8               java/lang/Integer\n-  #279 = Class              #378          // java/lang/Math\n-  #280 = NameAndType        #379:#380     // min:(JJ)J\n-  #281 = NameAndType        #163:#164     // skip:(J)J\n-  #282 = NameAndType        #381:#382     // count:(J)V\n-  #283 = NameAndType        #246:#168     // isAtEOF:()Z\n-  #284 = NameAndType        #134:#135     // currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-  #285 = Utf8               java/lang/Long\n-  #286 = Class              #383          // org/apache/commons/compress/utils/IOUtils\n-  #287 = NameAndType        #163:#384     // skip:(Ljava/io/InputStream;J)J\n-  #288 = NameAndType        #182:#157     // skipRecordPadding:()V\n-  #289 = NameAndType        #192:#186     // getRecord:()[B\n-  #290 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-  #291 = NameAndType        #144:#385     // \"<init>\":([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;)V\n-  #292 = Utf8               java/lang/IllegalArgumentException\n-  #293 = Utf8               java/io/IOException\n-  #294 = Utf8               Error detected parsing the header\n-  #295 = NameAndType        #144:#386     // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #296 = NameAndType        #387:#388     // getSize:()J\n-  #297 = NameAndType        #389:#168     // isGNULongLinkEntry:()Z\n-  #298 = NameAndType        #185:#186     // getLongNameData:()[B\n-  #299 = Class              #390          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #300 = NameAndType        #391:#392     // decode:([B)Ljava/lang/String;\n-  #301 = NameAndType        #393:#394     // setLinkName:(Ljava/lang/String;)V\n-  #302 = NameAndType        #395:#168     // isGNULongNameEntry:()Z\n-  #303 = NameAndType        #396:#394     // setName:(Ljava/lang/String;)V\n-  #304 = NameAndType        #397:#168     // isGlobalPaxHeader:()Z\n-  #305 = NameAndType        #198:#157     // readGlobalPaxHeaders:()V\n-  #306 = NameAndType        #398:#168     // isPaxHeader:()Z\n-  #307 = NameAndType        #199:#157     // paxHeaders:()V\n-  #308 = Class              #372          // java/util/Map\n-  #309 = NameAndType        #399:#168     // isEmpty:()Z\n-  #310 = NameAndType        #219:#220     // applyPaxHeadersToCurrentEntry:(Ljava/util/Map;)V\n-  #311 = NameAndType        #400:#168     // isOldGNUSparse:()Z\n-  #312 = NameAndType        #222:#157     // readOldGNUSparse:()V\n-  #313 = Utf8               java/io/ByteArrayOutputStream\n-  #314 = NameAndType        #212:#401     // read:([B)I\n-  #315 = NameAndType        #402:#403     // write:([BII)V\n-  #316 = NameAndType        #226:#227     // getNextEntry:()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n-  #317 = NameAndType        #404:#186     // toByteArray:()[B\n-  #318 = Class              #405          // java/lang/System\n-  #319 = NameAndType        #406:#407     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #320 = NameAndType        #196:#186     // readRecord:()[B\n-  #321 = NameAndType        #193:#194     // isEOFRecord:([B)Z\n-  #322 = NameAndType        #247:#248     // setAtEOF:(Z)V\n-  #323 = NameAndType        #228:#157     // tryToConsumeSecondEOFRecord:()V\n-  #324 = NameAndType        #250:#157     // consumeRemainderOfLastBlock:()V\n-  #325 = Class              #408          // org/apache/commons/compress/utils/ArchiveUtils\n-  #326 = NameAndType        #409:#253     // isArrayZero:([BI)Z\n-  #327 = NameAndType        #410:#411     // readFully:(Ljava/io/InputStream;[B)I\n-  #328 = NameAndType        #381:#170     // count:(I)V\n-  #329 = NameAndType        #202:#203     // parsePaxHeaders:(Ljava/io/InputStream;)Ljava/util/Map;\n-  #330 = NameAndType        #144:#220     // \"<init>\":(Ljava/util/Map;)V\n-  #331 = NameAndType        #212:#160     // read:()I\n-  #332 = Utf8               org/apache/commons/compress/utils/CharsetNames\n-  #333 = Utf8               UTF-8\n-  #334 = NameAndType        #412:#413     // toString:(Ljava/lang/String;)Ljava/lang/String;\n-  #335 = NameAndType        #414:#415     // remove:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #336 = Utf8               java/lang/StringBuilder\n-  #337 = Utf8               Failed to read Paxheader. Expected\n-  #338 = NameAndType        #416:#417     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #339 = NameAndType        #416:#418     // append:(I)Ljava/lang/StringBuilder;\n-  #340 = Utf8                bytes, read\n-  #341 = NameAndType        #412:#419     // toString:()Ljava/lang/String;\n-  #342 = NameAndType        #144:#394     // \"<init>\":(Ljava/lang/String;)V\n-  #343 = Utf8               java/lang/String\n-  #344 = NameAndType        #144:#420     // \"<init>\":([BIILjava/lang/String;)V\n-  #345 = NameAndType        #421:#422     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #346 = NameAndType        #402:#170     // write:(I)V\n-  #347 = NameAndType        #423:#220     // updateEntryFromPaxHeaders:(Ljava/util/Map;)V\n-  #348 = NameAndType        #424:#168     // isExtended:()Z\n-  #349 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry\n-  #350 = NameAndType        #144:#425     // \"<init>\":([B)V\n-  #351 = NameAndType        #173:#174     // getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-  #352 = NameAndType        #167:#168     // markSupported:()Z\n-  #353 = NameAndType        #169:#170     // mark:(I)V\n-  #354 = NameAndType        #426:#382     // pushedBackBytes:(J)V\n-  #355 = NameAndType        #172:#157     // reset:()V\n-  #356 = Utf8               java/lang/IllegalStateException\n-  #357 = Utf8               No current tar entry\n-  #358 = NameAndType        #161:#160     // available:()I\n-  #359 = NameAndType        #379:#427     // min:(II)I\n-  #360 = NameAndType        #212:#232     // read:([BII)I\n-  #361 = Utf8               Truncated TAR archive\n-  #362 = NameAndType        #428:#168     // isSparse:()Z\n-  #363 = NameAndType        #429:#388     // getBytesRead:()J\n-  #364 = Utf8               ustar\\u0000\n-  #365 = NameAndType        #430:#431     // matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n-  #366 = Utf8               00\n-  #367 = Utf8               ustar\n-  #368 = Utf8                \\u0000\n-  #369 = Utf8               0\\u0000\n-  #370 = Utf8               \\u0000\\u0000\n-  #371 = Utf8               org/apache/commons/compress/archivers/ArchiveInputStream\n-  #372 = Utf8               java/util/Map\n-  #373 = Utf8               java/io/InputStream\n-  #374 = Utf8               java/lang/Throwable\n-  #375 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #376 = Utf8               getZipEncoding\n-  #377 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #378 = Utf8               java/lang/Math\n-  #379 = Utf8               min\n-  #380 = Utf8               (JJ)J\n-  #381 = Utf8               count\n-  #382 = Utf8               (J)V\n-  #383 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #384 = Utf8               (Ljava/io/InputStream;J)J\n-  #385 = Utf8               ([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;)V\n-  #386 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #387 = Utf8               getSize\n-  #388 = Utf8               ()J\n-  #389 = Utf8               isGNULongLinkEntry\n-  #390 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #391 = Utf8               decode\n-  #392 = Utf8               ([B)Ljava/lang/String;\n-  #393 = Utf8               setLinkName\n-  #394 = Utf8               (Ljava/lang/String;)V\n-  #395 = Utf8               isGNULongNameEntry\n-  #396 = Utf8               setName\n-  #397 = Utf8               isGlobalPaxHeader\n-  #398 = Utf8               isPaxHeader\n-  #399 = Utf8               isEmpty\n-  #400 = Utf8               isOldGNUSparse\n-  #401 = Utf8               ([B)I\n-  #402 = Utf8               write\n-  #403 = Utf8               ([BII)V\n-  #404 = Utf8               toByteArray\n-  #405 = Utf8               java/lang/System\n-  #406 = Utf8               arraycopy\n-  #407 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #408 = Utf8               org/apache/commons/compress/utils/ArchiveUtils\n-  #409 = Utf8               isArrayZero\n-  #410 = Utf8               readFully\n-  #411 = Utf8               (Ljava/io/InputStream;[B)I\n-  #412 = Utf8               toString\n-  #413 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #414 = Utf8               remove\n-  #415 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #416 = Utf8               append\n-  #417 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #418 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #419 = Utf8               ()Ljava/lang/String;\n-  #420 = Utf8               ([BIILjava/lang/String;)V\n-  #421 = Utf8               put\n-  #422 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #423 = Utf8               updateEntryFromPaxHeaders\n-  #424 = Utf8               isExtended\n-  #425 = Utf8               ([B)V\n-  #426 = Utf8               pushedBackBytes\n-  #427 = Utf8               (II)I\n-  #428 = Utf8               isSparse\n-  #429 = Utf8               getBytesRead\n-  #430 = Utf8               matchAsciiBuffer\n-  #431 = Utf8               (Ljava/lang/String;[BII)Z\n+  #181 = Utf8               skipRecordPadding\n+  #182 = Utf8               numRecords\n+  #183 = Utf8               padding\n+  #184 = Utf8               getLongNameData\n+  #185 = Utf8               ()[B\n+  #186 = Utf8               l\n+  #187 = Utf8               longName\n+  #188 = Utf8               Ljava/io/ByteArrayOutputStream;\n+  #189 = Utf8               length\n+  #190 = Utf8               getRecord\n+  #191 = Utf8               isEOFRecord\n+  #192 = Utf8               ([B)Z\n+  #193 = Utf8               record\n+  #194 = Utf8               readRecord\n+  #195 = Utf8               readNow\n+  #196 = Utf8               readGlobalPaxHeaders\n+  #197 = Utf8               paxHeaders\n+  #198 = Utf8               headers\n+  #199 = Utf8               LocalVariableTypeTable\n+  #200 = Utf8               parsePaxHeaders\n+  #201 = Utf8               (Ljava/io/InputStream;)Ljava/util/Map;\n+  #202 = Utf8               rest\n+  #203 = Utf8               got\n+  #204 = Utf8               value\n+  #205 = Utf8               keyword\n+  #206 = Utf8               restLen\n+  #207 = Utf8               coll\n+  #208 = Utf8               ch\n+  #209 = Utf8               len\n+  #210 = Utf8               read\n+  #211 = Utf8               i\n+  #212 = Class              #365          // java/util/Map\n+  #213 = Class              #366          // java/io/InputStream\n+  #214 = Utf8               (Ljava/io/InputStream;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+  #215 = Utf8               applyPaxHeadersToCurrentEntry\n+  #216 = Utf8               (Ljava/util/Map;)V\n+  #217 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n+  #218 = Utf8               readOldGNUSparse\n+  #219 = Utf8               entry\n+  #220 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveSparseEntry;\n+  #221 = Utf8               isDirectory\n+  #222 = Utf8               getNextEntry\n+  #223 = Utf8               ()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+  #224 = Utf8               tryToConsumeSecondEOFRecord\n+  #225 = Utf8               shouldReset\n+  #226 = Utf8               marked\n+  #227 = Class              #367          // java/lang/Throwable\n+  #228 = Utf8               ([BII)I\n+  #229 = Utf8               buf\n+  #230 = Utf8               offset\n+  #231 = Utf8               numToRead\n+  #232 = Utf8               totalRead\n+  #233 = Utf8               canReadEntryData\n+  #234 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z\n+  #235 = Utf8               te\n+  #236 = Utf8               ae\n+  #237 = Utf8               Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+  #238 = Utf8               getCurrentEntry\n+  #239 = Utf8               setCurrentEntry\n+  #240 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+  #241 = Utf8               isAtEOF\n+  #242 = Utf8               setAtEOF\n+  #243 = Utf8               (Z)V\n+  #244 = Utf8               b\n+  #245 = Utf8               consumeRemainderOfLastBlock\n+  #246 = Utf8               bytesReadOfLastBlock\n+  #247 = Utf8               matches\n+  #248 = Utf8               ([BI)Z\n+  #249 = Utf8               signature\n+  #250 = Utf8               SourceFile\n+  #251 = Utf8               TarArchiveInputStream.java\n+  #252 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n+  #253 = NameAndType        #144:#154     // \"<init>\":(Ljava/io/InputStream;II)V\n+  #254 = NameAndType        #144:#155     // \"<init>\":(Ljava/io/InputStream;IILjava/lang/String;)V\n+  #255 = NameAndType        #144:#157     // \"<init>\":()V\n+  #256 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveInputStream\n+  #257 = NameAndType        #123:#124     // smallBuf:[B\n+  #258 = Utf8               java/util/HashMap\n+  #259 = NameAndType        #140:#141     // globalPaxHeaders:Ljava/util/Map;\n+  #260 = NameAndType        #132:#133     // is:Ljava/io/InputStream;\n+  #261 = NameAndType        #127:#128     // hasHitEOF:Z\n+  #262 = NameAndType        #138:#139     // encoding:Ljava/lang/String;\n+  #263 = Class              #368          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #264 = NameAndType        #369:#370     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #265 = NameAndType        #136:#137     // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #266 = NameAndType        #125:#120     // recordSize:I\n+  #267 = NameAndType        #126:#120     // blockSize:I\n+  #268 = NameAndType        #156:#157     // close:()V\n+  #269 = NameAndType        #221:#168     // isDirectory:()Z\n+  #270 = NameAndType        #129:#130     // entrySize:J\n+  #271 = NameAndType        #131:#130     // entryOffset:J\n+  #272 = Utf8               java/lang/Integer\n+  #273 = Class              #371          // java/lang/Math\n+  #274 = NameAndType        #372:#373     // min:(JJ)J\n+  #275 = NameAndType        #163:#164     // skip:(J)J\n+  #276 = NameAndType        #374:#375     // count:(J)V\n+  #277 = NameAndType        #241:#168     // isAtEOF:()Z\n+  #278 = NameAndType        #134:#135     // currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+  #279 = Utf8               java/lang/Long\n+  #280 = Class              #376          // org/apache/commons/compress/utils/IOUtils\n+  #281 = NameAndType        #163:#377     // skip:(Ljava/io/InputStream;J)J\n+  #282 = NameAndType        #181:#157     // skipRecordPadding:()V\n+  #283 = NameAndType        #190:#185     // getRecord:()[B\n+  #284 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+  #285 = NameAndType        #144:#378     // \"<init>\":([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;)V\n+  #286 = Utf8               java/lang/IllegalArgumentException\n+  #287 = Utf8               java/io/IOException\n+  #288 = Utf8               Error detected parsing the header\n+  #289 = NameAndType        #144:#379     // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #290 = NameAndType        #380:#381     // getSize:()J\n+  #291 = NameAndType        #382:#168     // isGNULongLinkEntry:()Z\n+  #292 = NameAndType        #184:#185     // getLongNameData:()[B\n+  #293 = Class              #383          // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #294 = NameAndType        #384:#385     // decode:([B)Ljava/lang/String;\n+  #295 = NameAndType        #386:#387     // setLinkName:(Ljava/lang/String;)V\n+  #296 = NameAndType        #388:#168     // isGNULongNameEntry:()Z\n+  #297 = NameAndType        #389:#387     // setName:(Ljava/lang/String;)V\n+  #298 = NameAndType        #390:#168     // isGlobalPaxHeader:()Z\n+  #299 = NameAndType        #196:#157     // readGlobalPaxHeaders:()V\n+  #300 = NameAndType        #391:#168     // isPaxHeader:()Z\n+  #301 = NameAndType        #197:#157     // paxHeaders:()V\n+  #302 = NameAndType        #392:#168     // isEmpty:()Z\n+  #303 = NameAndType        #215:#216     // applyPaxHeadersToCurrentEntry:(Ljava/util/Map;)V\n+  #304 = NameAndType        #393:#168     // isOldGNUSparse:()Z\n+  #305 = NameAndType        #218:#157     // readOldGNUSparse:()V\n+  #306 = Utf8               java/io/ByteArrayOutputStream\n+  #307 = NameAndType        #210:#394     // read:([B)I\n+  #308 = NameAndType        #395:#396     // write:([BII)V\n+  #309 = NameAndType        #222:#223     // getNextEntry:()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+  #310 = NameAndType        #397:#185     // toByteArray:()[B\n+  #311 = Class              #398          // java/lang/System\n+  #312 = NameAndType        #399:#400     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #313 = NameAndType        #194:#185     // readRecord:()[B\n+  #314 = NameAndType        #191:#192     // isEOFRecord:([B)Z\n+  #315 = NameAndType        #242:#243     // setAtEOF:(Z)V\n+  #316 = NameAndType        #224:#157     // tryToConsumeSecondEOFRecord:()V\n+  #317 = NameAndType        #245:#157     // consumeRemainderOfLastBlock:()V\n+  #318 = Class              #401          // org/apache/commons/compress/utils/ArchiveUtils\n+  #319 = NameAndType        #402:#248     // isArrayZero:([BI)Z\n+  #320 = NameAndType        #403:#404     // readFully:(Ljava/io/InputStream;[B)I\n+  #321 = NameAndType        #374:#170     // count:(I)V\n+  #322 = NameAndType        #200:#201     // parsePaxHeaders:(Ljava/io/InputStream;)Ljava/util/Map;\n+  #323 = NameAndType        #144:#216     // \"<init>\":(Ljava/util/Map;)V\n+  #324 = NameAndType        #210:#160     // read:()I\n+  #325 = Utf8               org/apache/commons/compress/utils/CharsetNames\n+  #326 = Utf8               UTF-8\n+  #327 = NameAndType        #405:#406     // toString:(Ljava/lang/String;)Ljava/lang/String;\n+  #328 = NameAndType        #407:#408     // remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #329 = Utf8               java/lang/StringBuilder\n+  #330 = Utf8               Failed to read Paxheader. Expected\n+  #331 = NameAndType        #409:#410     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #332 = NameAndType        #409:#411     // append:(I)Ljava/lang/StringBuilder;\n+  #333 = Utf8                bytes, read\n+  #334 = NameAndType        #405:#412     // toString:()Ljava/lang/String;\n+  #335 = NameAndType        #144:#387     // \"<init>\":(Ljava/lang/String;)V\n+  #336 = Utf8               java/lang/String\n+  #337 = NameAndType        #144:#413     // \"<init>\":([BIILjava/lang/String;)V\n+  #338 = NameAndType        #414:#415     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #339 = NameAndType        #395:#170     // write:(I)V\n+  #340 = NameAndType        #416:#216     // updateEntryFromPaxHeaders:(Ljava/util/Map;)V\n+  #341 = NameAndType        #417:#168     // isExtended:()Z\n+  #342 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry\n+  #343 = NameAndType        #144:#418     // \"<init>\":([B)V\n+  #344 = NameAndType        #173:#174     // getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+  #345 = NameAndType        #167:#168     // markSupported:()Z\n+  #346 = NameAndType        #169:#170     // mark:(I)V\n+  #347 = NameAndType        #419:#375     // pushedBackBytes:(J)V\n+  #348 = NameAndType        #172:#157     // reset:()V\n+  #349 = Utf8               java/lang/IllegalStateException\n+  #350 = Utf8               No current tar entry\n+  #351 = NameAndType        #161:#160     // available:()I\n+  #352 = NameAndType        #372:#420     // min:(II)I\n+  #353 = NameAndType        #210:#228     // read:([BII)I\n+  #354 = Utf8               Truncated TAR archive\n+  #355 = NameAndType        #421:#168     // isSparse:()Z\n+  #356 = NameAndType        #422:#381     // getBytesRead:()J\n+  #357 = Utf8               ustar\\u0000\n+  #358 = NameAndType        #423:#424     // matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n+  #359 = Utf8               00\n+  #360 = Utf8               ustar\n+  #361 = Utf8                \\u0000\n+  #362 = Utf8               0\\u0000\n+  #363 = Utf8               \\u0000\\u0000\n+  #364 = Utf8               org/apache/commons/compress/archivers/ArchiveInputStream\n+  #365 = Utf8               java/util/Map\n+  #366 = Utf8               java/io/InputStream\n+  #367 = Utf8               java/lang/Throwable\n+  #368 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #369 = Utf8               getZipEncoding\n+  #370 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #371 = Utf8               java/lang/Math\n+  #372 = Utf8               min\n+  #373 = Utf8               (JJ)J\n+  #374 = Utf8               count\n+  #375 = Utf8               (J)V\n+  #376 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #377 = Utf8               (Ljava/io/InputStream;J)J\n+  #378 = Utf8               ([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;)V\n+  #379 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #380 = Utf8               getSize\n+  #381 = Utf8               ()J\n+  #382 = Utf8               isGNULongLinkEntry\n+  #383 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #384 = Utf8               decode\n+  #385 = Utf8               ([B)Ljava/lang/String;\n+  #386 = Utf8               setLinkName\n+  #387 = Utf8               (Ljava/lang/String;)V\n+  #388 = Utf8               isGNULongNameEntry\n+  #389 = Utf8               setName\n+  #390 = Utf8               isGlobalPaxHeader\n+  #391 = Utf8               isPaxHeader\n+  #392 = Utf8               isEmpty\n+  #393 = Utf8               isOldGNUSparse\n+  #394 = Utf8               ([B)I\n+  #395 = Utf8               write\n+  #396 = Utf8               ([BII)V\n+  #397 = Utf8               toByteArray\n+  #398 = Utf8               java/lang/System\n+  #399 = Utf8               arraycopy\n+  #400 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #401 = Utf8               org/apache/commons/compress/utils/ArchiveUtils\n+  #402 = Utf8               isArrayZero\n+  #403 = Utf8               readFully\n+  #404 = Utf8               (Ljava/io/InputStream;[B)I\n+  #405 = Utf8               toString\n+  #406 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #407 = Utf8               remove\n+  #408 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #409 = Utf8               append\n+  #410 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #411 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #412 = Utf8               ()Ljava/lang/String;\n+  #413 = Utf8               ([BIILjava/lang/String;)V\n+  #414 = Utf8               put\n+  #415 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #416 = Utf8               updateEntryFromPaxHeaders\n+  #417 = Utf8               isExtended\n+  #418 = Utf8               ([B)V\n+  #419 = Utf8               pushedBackBytes\n+  #420 = Utf8               (II)I\n+  #421 = Utf8               isSparse\n+  #422 = Utf8               getBytesRead\n+  #423 = Utf8               matchAsciiBuffer\n+  #424 = Utf8               (Ljava/lang/String;[BII)Z\n {\n   private static final int SMALL_BUFFER_SIZE = 256;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 256\n \n   private final byte[] smallBuf;\n@@ -1557,15 +1550,15 @@\n           offset_delta = 9\n         frame_type = 18 /* same */\n         frame_type = 248 /* chop */\n           offset_delta = 7\n         frame_type = 2 /* same */\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #218                         // (Ljava/io/InputStream;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+    Signature: #214                         // (Ljava/io/InputStream;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n \n   private void applyPaxHeadersToCurrentEntry(java.util.Map<java.lang.String, java.lang.String>);\n     descriptor: (Ljava/util/Map;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n@@ -1579,15 +1572,15 @@\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/archivers/tar/TarArchiveInputStream;\n             0       9     1 headers   Ljava/util/Map;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0       9     1 headers   Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n-    Signature: #221                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n+    Signature: #217                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n \n   private void readOldGNUSparse() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=3, args_size=1\n          0: aload_0\n"}]}
