{"diffoscope-json-version": 1, "source1": "first/ThreadUtils.class", "source2": "second/ThreadUtils.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,81 +1,81 @@\n-  SHA-256 checksum 76c10d4b8ccce34bca00af2783eba9879cd8199dbc1dbc6e9d9dc2b1dac44823\n+  SHA-256 checksum b1fcd7fdb8ecc15656681ddbe7712769d8723fbb535a8b999268793db2110ebc\n   Compiled from \"ThreadUtils.java\"\n public final class org.apache.commons.io.ThreadUtils\n   minor version: 0\n   major version: 52\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n-  this_class: #11                         // org/apache/commons/io/ThreadUtils\n-  super_class: #12                        // java/lang/Object\n+  this_class: #29                         // org/apache/commons/io/ThreadUtils\n+  super_class: #2                         // java/lang/Object\n   interfaces: 0, fields: 0, methods: 3, attributes: 1\n Constant pool:\n-   #1 = Methodref          #12.#36        // java/lang/Object.\"<init>\":()V\n-   #2 = Methodref          #31.#37        // java/time/Duration.getNano:()I\n-   #3 = Integer            1000000\n-   #4 = Methodref          #30.#38        // java/time/Instant.now:()Ljava/time/Instant;\n-   #5 = Methodref          #30.#39        // java/time/Instant.plus:(Ljava/time/temporal/TemporalAmount;)Ljava/time/Instant;\n-   #6 = Methodref          #31.#40        // java/time/Duration.toMillis:()J\n-   #7 = Methodref          #11.#41        // org/apache/commons/io/ThreadUtils.getNanosOfMilli:(Ljava/time/Duration;)I\n-   #8 = Methodref          #42.#43        // java/lang/Thread.sleep:(JI)V\n-   #9 = Methodref          #31.#44        // java/time/Duration.between:(Ljava/time/temporal/Temporal;Ljava/time/temporal/Temporal;)Ljava/time/Duration;\n-  #10 = Methodref          #31.#45        // java/time/Duration.isNegative:()Z\n-  #11 = Class              #46            // org/apache/commons/io/ThreadUtils\n-  #12 = Class              #47            // java/lang/Object\n-  #13 = Utf8               <init>\n-  #14 = Utf8               ()V\n-  #15 = Utf8               Code\n-  #16 = Utf8               LineNumberTable\n-  #17 = Utf8               LocalVariableTable\n-  #18 = Utf8               this\n-  #19 = Utf8               Lorg/apache/commons/io/ThreadUtils;\n-  #20 = Utf8               getNanosOfMilli\n-  #21 = Utf8               (Ljava/time/Duration;)I\n-  #22 = Utf8               duration\n-  #23 = Utf8               Ljava/time/Duration;\n-  #24 = Utf8               sleep\n-  #25 = Utf8               (Ljava/time/Duration;)V\n-  #26 = Utf8               finishInstant\n-  #27 = Utf8               Ljava/time/Instant;\n-  #28 = Utf8               remainingDuration\n-  #29 = Utf8               StackMapTable\n-  #30 = Class              #48            // java/time/Instant\n-  #31 = Class              #49            // java/time/Duration\n-  #32 = Utf8               Exceptions\n-  #33 = Class              #50            // java/lang/InterruptedException\n-  #34 = Utf8               SourceFile\n-  #35 = Utf8               ThreadUtils.java\n-  #36 = NameAndType        #13:#14        // \"<init>\":()V\n-  #37 = NameAndType        #51:#52        // getNano:()I\n-  #38 = NameAndType        #53:#54        // now:()Ljava/time/Instant;\n-  #39 = NameAndType        #55:#56        // plus:(Ljava/time/temporal/TemporalAmount;)Ljava/time/Instant;\n-  #40 = NameAndType        #57:#58        // toMillis:()J\n-  #41 = NameAndType        #20:#21        // getNanosOfMilli:(Ljava/time/Duration;)I\n-  #42 = Class              #59            // java/lang/Thread\n-  #43 = NameAndType        #24:#60        // sleep:(JI)V\n-  #44 = NameAndType        #61:#62        // between:(Ljava/time/temporal/Temporal;Ljava/time/temporal/Temporal;)Ljava/time/Duration;\n-  #45 = NameAndType        #63:#64        // isNegative:()Z\n-  #46 = Utf8               org/apache/commons/io/ThreadUtils\n-  #47 = Utf8               java/lang/Object\n-  #48 = Utf8               java/time/Instant\n-  #49 = Utf8               java/time/Duration\n-  #50 = Utf8               java/lang/InterruptedException\n-  #51 = Utf8               getNano\n-  #52 = Utf8               ()I\n-  #53 = Utf8               now\n-  #54 = Utf8               ()Ljava/time/Instant;\n-  #55 = Utf8               plus\n-  #56 = Utf8               (Ljava/time/temporal/TemporalAmount;)Ljava/time/Instant;\n-  #57 = Utf8               toMillis\n-  #58 = Utf8               ()J\n-  #59 = Utf8               java/lang/Thread\n-  #60 = Utf8               (JI)V\n-  #61 = Utf8               between\n-  #62 = Utf8               (Ljava/time/temporal/Temporal;Ljava/time/temporal/Temporal;)Ljava/time/Duration;\n-  #63 = Utf8               isNegative\n-  #64 = Utf8               ()Z\n+   #1 = Methodref          #2.#3          // java/lang/Object.\"<init>\":()V\n+   #2 = Class              #4             // java/lang/Object\n+   #3 = NameAndType        #5:#6          // \"<init>\":()V\n+   #4 = Utf8               java/lang/Object\n+   #5 = Utf8               <init>\n+   #6 = Utf8               ()V\n+   #7 = Methodref          #8.#9          // java/time/Duration.getNano:()I\n+   #8 = Class              #10            // java/time/Duration\n+   #9 = NameAndType        #11:#12        // getNano:()I\n+  #10 = Utf8               java/time/Duration\n+  #11 = Utf8               getNano\n+  #12 = Utf8               ()I\n+  #13 = Integer            1000000\n+  #14 = Methodref          #15.#16        // java/time/Instant.now:()Ljava/time/Instant;\n+  #15 = Class              #17            // java/time/Instant\n+  #16 = NameAndType        #18:#19        // now:()Ljava/time/Instant;\n+  #17 = Utf8               java/time/Instant\n+  #18 = Utf8               now\n+  #19 = Utf8               ()Ljava/time/Instant;\n+  #20 = Methodref          #15.#21        // java/time/Instant.plus:(Ljava/time/temporal/TemporalAmount;)Ljava/time/Instant;\n+  #21 = NameAndType        #22:#23        // plus:(Ljava/time/temporal/TemporalAmount;)Ljava/time/Instant;\n+  #22 = Utf8               plus\n+  #23 = Utf8               (Ljava/time/temporal/TemporalAmount;)Ljava/time/Instant;\n+  #24 = Methodref          #8.#25         // java/time/Duration.toMillis:()J\n+  #25 = NameAndType        #26:#27        // toMillis:()J\n+  #26 = Utf8               toMillis\n+  #27 = Utf8               ()J\n+  #28 = Methodref          #29.#30        // org/apache/commons/io/ThreadUtils.getNanosOfMilli:(Ljava/time/Duration;)I\n+  #29 = Class              #31            // org/apache/commons/io/ThreadUtils\n+  #30 = NameAndType        #32:#33        // getNanosOfMilli:(Ljava/time/Duration;)I\n+  #31 = Utf8               org/apache/commons/io/ThreadUtils\n+  #32 = Utf8               getNanosOfMilli\n+  #33 = Utf8               (Ljava/time/Duration;)I\n+  #34 = Methodref          #35.#36        // java/lang/Thread.sleep:(JI)V\n+  #35 = Class              #37            // java/lang/Thread\n+  #36 = NameAndType        #38:#39        // sleep:(JI)V\n+  #37 = Utf8               java/lang/Thread\n+  #38 = Utf8               sleep\n+  #39 = Utf8               (JI)V\n+  #40 = Methodref          #8.#41         // java/time/Duration.between:(Ljava/time/temporal/Temporal;Ljava/time/temporal/Temporal;)Ljava/time/Duration;\n+  #41 = NameAndType        #42:#43        // between:(Ljava/time/temporal/Temporal;Ljava/time/temporal/Temporal;)Ljava/time/Duration;\n+  #42 = Utf8               between\n+  #43 = Utf8               (Ljava/time/temporal/Temporal;Ljava/time/temporal/Temporal;)Ljava/time/Duration;\n+  #44 = Methodref          #8.#45         // java/time/Duration.isNegative:()Z\n+  #45 = NameAndType        #46:#47        // isNegative:()Z\n+  #46 = Utf8               isNegative\n+  #47 = Utf8               ()Z\n+  #48 = Utf8               Code\n+  #49 = Utf8               LineNumberTable\n+  #50 = Utf8               LocalVariableTable\n+  #51 = Utf8               this\n+  #52 = Utf8               Lorg/apache/commons/io/ThreadUtils;\n+  #53 = Utf8               duration\n+  #54 = Utf8               Ljava/time/Duration;\n+  #55 = Utf8               (Ljava/time/Duration;)V\n+  #56 = Utf8               finishInstant\n+  #57 = Utf8               Ljava/time/Instant;\n+  #58 = Utf8               remainingDuration\n+  #59 = Utf8               StackMapTable\n+  #60 = Utf8               Exceptions\n+  #61 = Class              #62            // java/lang/InterruptedException\n+  #62 = Utf8               java/lang/InterruptedException\n+  #63 = Utf8               SourceFile\n+  #64 = Utf8               ThreadUtils.java\n {\n   public org.apache.commons.io.ThreadUtils();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -89,46 +89,46 @@\n \n   private static int getNanosOfMilli(java.time.Duration);\n     descriptor: (Ljava/time/Duration;)I\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: invokevirtual #2                  // Method java/time/Duration.getNano:()I\n-         4: ldc           #3                  // int 1000000\n+         1: invokevirtual #7                  // Method java/time/Duration.getNano:()I\n+         4: ldc           #13                 // int 1000000\n          6: irem\n          7: ireturn\n       LineNumberTable:\n         line 30: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0 duration   Ljava/time/Duration;\n \n   public static void sleep(java.time.Duration) throws java.lang.InterruptedException;\n     descriptor: (Ljava/time/Duration;)V\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=3, locals=3, args_size=1\n-         0: invokestatic  #4                  // Method java/time/Instant.now:()Ljava/time/Instant;\n+         0: invokestatic  #14                 // Method java/time/Instant.now:()Ljava/time/Instant;\n          3: aload_0\n-         4: invokevirtual #5                  // Method java/time/Instant.plus:(Ljava/time/temporal/TemporalAmount;)Ljava/time/Instant;\n+         4: invokevirtual #20                 // Method java/time/Instant.plus:(Ljava/time/temporal/TemporalAmount;)Ljava/time/Instant;\n          7: astore_1\n          8: aload_0\n          9: astore_2\n         10: aload_2\n-        11: invokevirtual #6                  // Method java/time/Duration.toMillis:()J\n+        11: invokevirtual #24                 // Method java/time/Duration.toMillis:()J\n         14: aload_2\n-        15: invokestatic  #7                  // Method getNanosOfMilli:(Ljava/time/Duration;)I\n-        18: invokestatic  #8                  // Method java/lang/Thread.sleep:(JI)V\n-        21: invokestatic  #4                  // Method java/time/Instant.now:()Ljava/time/Instant;\n+        15: invokestatic  #28                 // Method getNanosOfMilli:(Ljava/time/Duration;)I\n+        18: invokestatic  #34                 // Method java/lang/Thread.sleep:(JI)V\n+        21: invokestatic  #14                 // Method java/time/Instant.now:()Ljava/time/Instant;\n         24: aload_1\n-        25: invokestatic  #9                  // Method java/time/Duration.between:(Ljava/time/temporal/Temporal;Ljava/time/temporal/Temporal;)Ljava/time/Duration;\n+        25: invokestatic  #40                 // Method java/time/Duration.between:(Ljava/time/temporal/Temporal;Ljava/time/temporal/Temporal;)Ljava/time/Duration;\n         28: astore_2\n         29: aload_2\n-        30: invokevirtual #10                 // Method java/time/Duration.isNegative:()Z\n+        30: invokevirtual #44                 // Method java/time/Duration.isNegative:()Z\n         33: ifeq          10\n         36: return\n       LineNumberTable:\n         line 46: 0\n         line 47: 8\n         line 49: 10\n         line 50: 21\n"}]}
