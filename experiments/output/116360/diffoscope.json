{"diffoscope-json-version": 1, "source1": "first/FinalLocalVariableCheck.class", "source2": "second/FinalLocalVariableCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,20 +1,19 @@\n \n package com.puppycrawl.tools.checkstyle.checks.coding;\n \n-import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n import java.util.function.Consumer;\n-import java.util.Objects;\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.Map;\n import java.util.Optional;\n import com.puppycrawl.tools.checkstyle.utils.CheckUtil;\n import com.puppycrawl.tools.checkstyle.utils.ScopeUtil;\n import java.util.ArrayDeque;\n+import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n import java.util.Deque;\n import java.util.BitSet;\n import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n \n @FileStatefulCheck\n@@ -24,14 +23,19 @@\n     private static final BitSet ASSIGN_OPERATOR_TYPES;\n     private static final BitSet LOOP_TYPES;\n     private final Deque<FinalLocalVariableCheck.ScopeData> scopeStack;\n     private final Deque<Deque<DetailAST>> prevScopeUninitializedVariables;\n     private final Deque<Deque<DetailAST>> currentScopeAssignedVariables;\n     private boolean validateEnhancedForLoopVariable;\n     \n+    static {\n+        ASSIGN_OPERATOR_TYPES = TokenUtil.asBitSet(new int[] { 25, 26, 80, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 129, 130 });\n+        LOOP_TYPES = TokenUtil.asBitSet(new int[] { 91, 84, 85 });\n+    }\n+    \n     public FinalLocalVariableCheck() {\n         this.scopeStack = new ArrayDeque<FinalLocalVariableCheck.ScopeData>();\n         this.prevScopeUninitializedVariables = new ArrayDeque<Deque<DetailAST>>();\n         this.currentScopeAssignedVariables = new ArrayDeque<Deque<DetailAST>>();\n     }\n     \n     public final void setValidateEnhancedForLoopVariable(final boolean validateEnhancedForLoopVariable) {\n@@ -199,18 +203,15 @@\n         }\n         return result;\n     }\n     \n     private void storePrevScopeUninitializedVariableData() {\n         final FinalLocalVariableCheck.ScopeData scopeData = (FinalLocalVariableCheck.ScopeData)this.scopeStack.peek();\n         final Deque<DetailAST> prevScopeUninitializedVariableData = new ArrayDeque<DetailAST>();\n-        final Deque uninitializedVariables = scopeData.uninitializedVariables;\n-        final Deque<DetailAST> obj = prevScopeUninitializedVariableData;\n-        Objects.requireNonNull((ArrayDeque)obj);\n-        uninitializedVariables.forEach(obj::push);\n+        scopeData.uninitializedVariables.forEach(prevScopeUninitializedVariableData::push);\n         this.prevScopeUninitializedVariables.push(prevScopeUninitializedVariableData);\n     }\n     \n     private void updateAllUninitializedVariables(final Deque<DetailAST> prevScopeUninitializedVariableData) {\n         final boolean hasSomeScopes = !this.currentScopeAssignedVariables.isEmpty();\n         if (hasSomeScopes) {\n             this.updateUninitializedVariables(prevScopeUninitializedVariableData);\n@@ -378,13 +379,8 @@\n         final DetailAST classOrMethodOfAst2 = findFirstUpperNamedBlock(ast2);\n         return classOrMethodOfAst1 == classOrMethodOfAst2 && ast1.getText().equals(ast2.getText());\n     }\n     \n     private static boolean isLoopAst(final int ast) {\n         return FinalLocalVariableCheck.LOOP_TYPES.get(ast);\n     }\n-    \n-    static {\n-        ASSIGN_OPERATOR_TYPES = TokenUtil.asBitSet(new int[] { 25, 26, 80, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 129, 130 });\n-        LOOP_TYPES = TokenUtil.asBitSet(new int[] { 91, 84, 85 });\n-    }\n }\n"}]}
