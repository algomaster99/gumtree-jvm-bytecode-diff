{"diffoscope-json-version": 1, "source1": "first/PackingUtils.class", "source2": "second/PackingUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,22 +1,22 @@\n \n package org.apache.commons.compress.harmony.pack200;\n \n import java.util.logging.Logger;\n import java.util.logging.LogManager;\n import java.util.Iterator;\n+import java.util.jar.Manifest;\n import java.io.BufferedInputStream;\n import java.io.ByteArrayOutputStream;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.InputStream;\n import java.util.Enumeration;\n import java.util.jar.JarFile;\n import java.util.jar.JarEntry;\n-import java.util.jar.Manifest;\n import java.util.zip.ZipEntry;\n import java.util.jar.JarOutputStream;\n import java.io.OutputStream;\n import java.util.jar.JarInputStream;\n import java.util.logging.Level;\n import java.io.IOException;\n import java.util.logging.Handler;\n@@ -24,147 +24,145 @@\n import java.util.logging.SimpleFormatter;\n import java.util.logging.FileHandler;\n \n public class PackingUtils\n {\n     private static PackingUtils.PackingLogger packingLogger;\n     \n-    public static void config(final PackingOptions options) throws IOException {\n-        final String logFileName = options.getLogFile();\n-        if (logFileName != null) {\n-            final FileHandler fileHandler = new FileHandler(logFileName, false);\n+    public static void config(final PackingOptions packingOptions) throws IOException {\n+        final String logFile = packingOptions.getLogFile();\n+        if (logFile != null) {\n+            final FileHandler fileHandler = new FileHandler(logFile, false);\n             fileHandler.setFormatter(new SimpleFormatter());\n             PackingUtils.packingLogger.addHandler((Handler)fileHandler);\n             PackingUtils.packingLogger.setUseParentHandlers(false);\n         }\n-        PackingUtils.packingLogger.setVerbose(options.isVerbose());\n+        PackingUtils.packingLogger.setVerbose(packingOptions.isVerbose());\n     }\n     \n-    public static void log(final String message) {\n-        PackingUtils.packingLogger.log(Level.INFO, message);\n+    public static void log(final String s) {\n+        PackingUtils.packingLogger.log(Level.INFO, s);\n     }\n     \n-    public static void copyThroughJar(final JarInputStream jarInputStream, final OutputStream outputStream) throws IOException {\n-        final Manifest manifest = jarInputStream.getManifest();\n-        try (final JarOutputStream jarOutputStream = new JarOutputStream(outputStream, manifest)) {\n+    public static void copyThroughJar(final JarInputStream jarInputStream, final OutputStream out) throws IOException {\n+        try (final JarOutputStream jarOutputStream = new JarOutputStream(out, jarInputStream.getManifest())) {\n             jarOutputStream.setComment(\"PACK200\");\n             log(\"Packed META-INF/MANIFEST.MF\");\n-            final byte[] bytes = new byte[16384];\n-            JarEntry jarEntry;\n-            while ((jarEntry = jarInputStream.getNextJarEntry()) != null) {\n-                jarOutputStream.putNextEntry(jarEntry);\n-                int bytesRead;\n-                while ((bytesRead = jarInputStream.read(bytes)) != -1) {\n-                    jarOutputStream.write(bytes, 0, bytesRead);\n+            final byte[] array = new byte[16384];\n+            JarEntry nextJarEntry;\n+            while ((nextJarEntry = jarInputStream.getNextJarEntry()) != null) {\n+                jarOutputStream.putNextEntry(nextJarEntry);\n+                int read;\n+                while ((read = jarInputStream.read(array)) != -1) {\n+                    jarOutputStream.write(array, 0, read);\n                 }\n-                log(\"Packed \" + jarEntry.getName());\n+                log(\"Packed \" + nextJarEntry.getName());\n             }\n             jarInputStream.close();\n         }\n     }\n     \n-    public static void copyThroughJar(final JarFile jarFile, final OutputStream outputStream) throws IOException {\n-        try (final JarOutputStream jarOutputStream = new JarOutputStream(outputStream)) {\n+    public static void copyThroughJar(final JarFile jarFile, final OutputStream out) throws IOException {\n+        try (final JarOutputStream jarOutputStream = new JarOutputStream(out)) {\n             jarOutputStream.setComment(\"PACK200\");\n-            final byte[] bytes = new byte[16384];\n+            final byte[] array = new byte[16384];\n             final Enumeration<JarEntry> entries = jarFile.entries();\n             while (entries.hasMoreElements()) {\n                 final JarEntry jarEntry = (JarEntry)entries.nextElement();\n                 jarOutputStream.putNextEntry(jarEntry);\n                 try (final InputStream inputStream = jarFile.getInputStream(jarEntry)) {\n-                    int bytesRead;\n-                    while ((bytesRead = inputStream.read(bytes)) != -1) {\n-                        jarOutputStream.write(bytes, 0, bytesRead);\n+                    int read;\n+                    while ((read = inputStream.read(array)) != -1) {\n+                        jarOutputStream.write(array, 0, read);\n                     }\n                     jarOutputStream.closeEntry();\n                     log(\"Packed \" + jarEntry.getName());\n                     if (inputStream == null) {\n                         continue;\n                     }\n                 }\n             }\n             jarFile.close();\n         }\n     }\n     \n-    public static List<Archive.PackingFile> getPackingFileListFromJar(final JarInputStream jarInputStream, final boolean keepFileOrder) throws IOException {\n-        final List<Archive.PackingFile> packingFileList = new ArrayList<Archive.PackingFile>();\n-        final Manifest manifest = jarInputStream.getManifest();\n+    public static List<Archive.PackingFile> getPackingFileListFromJar(final JarInputStream in, final boolean b) throws IOException {\n+        final ArrayList list = new ArrayList();\n+        final Manifest manifest = in.getManifest();\n         if (manifest != null) {\n-            final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-            manifest.write(baos);\n-            packingFileList.add(new Archive.PackingFile(\"META-INF/MANIFEST.MF\", baos.toByteArray(), 0L));\n-        }\n-        JarEntry jarEntry;\n-        while ((jarEntry = jarInputStream.getNextJarEntry()) != null) {\n-            final byte[] bytes = readJarEntry(jarEntry, new BufferedInputStream(jarInputStream));\n-            packingFileList.add(new Archive.PackingFile(bytes, jarEntry));\n-        }\n-        if (!keepFileOrder) {\n-            reorderPackingFiles(packingFileList);\n-        }\n-        return packingFileList;\n-    }\n-    \n-    public static List<Archive.PackingFile> getPackingFileListFromJar(final JarFile jarFile, final boolean keepFileOrder) throws IOException {\n-        final List<Archive.PackingFile> packingFileList = new ArrayList<Archive.PackingFile>();\n-        final Enumeration<JarEntry> jarEntries = jarFile.entries();\n-        while (jarEntries.hasMoreElements()) {\n-            final JarEntry jarEntry = (JarEntry)jarEntries.nextElement();\n-            try (final InputStream inputStream = jarFile.getInputStream(jarEntry)) {\n-                final byte[] bytes = readJarEntry(jarEntry, new BufferedInputStream(inputStream));\n-                packingFileList.add(new Archive.PackingFile(bytes, jarEntry));\n+            final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+            manifest.write(out);\n+            list.add(new Archive.PackingFile(\"META-INF/MANIFEST.MF\", out.toByteArray(), 0L));\n+        }\n+        JarEntry nextJarEntry;\n+        while ((nextJarEntry = in.getNextJarEntry()) != null) {\n+            list.add(new Archive.PackingFile(readJarEntry(nextJarEntry, new BufferedInputStream(in)), nextJarEntry));\n+        }\n+        if (!b) {\n+            reorderPackingFiles(list);\n+        }\n+        return list;\n+    }\n+    \n+    public static List<Archive.PackingFile> getPackingFileListFromJar(final JarFile jarFile, final boolean b) throws IOException {\n+        final ArrayList list = new ArrayList();\n+        final Enumeration<JarEntry> entries = jarFile.entries();\n+        while (entries.hasMoreElements()) {\n+            final JarEntry ze = (JarEntry)entries.nextElement();\n+            try (final InputStream inputStream = jarFile.getInputStream(ze)) {\n+                list.add(new Archive.PackingFile(readJarEntry(ze, new BufferedInputStream(inputStream)), ze));\n                 if (inputStream == null) {\n                     continue;\n                 }\n             }\n         }\n-        if (!keepFileOrder) {\n-            reorderPackingFiles(packingFileList);\n+        if (!b) {\n+            reorderPackingFiles(list);\n         }\n-        return packingFileList;\n+        return list;\n     }\n     \n     private static byte[] readJarEntry(final JarEntry jarEntry, final InputStream inputStream) throws IOException {\n         long size = jarEntry.getSize();\n         if (size > 2147483647L) {\n             throw new IllegalArgumentException(\"Large Class!\");\n         }\n         if (size < 0L) {\n             size = 0L;\n         }\n-        final byte[] bytes = new byte[(int)size];\n-        if (inputStream.read(bytes) != size) {\n+        final byte[] b = new byte[(int)size];\n+        if (inputStream.read(b) != size) {\n             throw new IllegalArgumentException(\"Error reading from stream\");\n         }\n-        return bytes;\n+        return b;\n     }\n     \n-    private static void reorderPackingFiles(final List<Archive.PackingFile> packingFileList) {\n-        final Iterator<Archive.PackingFile> iterator = packingFileList.iterator();\n+    private static void reorderPackingFiles(final List<Archive.PackingFile> list) {\n+        final Iterator<Archive.PackingFile> iterator = list.iterator();\n         while (iterator.hasNext()) {\n-            final Archive.PackingFile packingFile = (Archive.PackingFile)iterator.next();\n-            if (packingFile.isDirectory()) {\n+            if (((Archive.PackingFile)iterator.next()).isDirectory()) {\n                 iterator.remove();\n             }\n         }\n-        packingFileList.sort((arg0, arg1) -> {\n-            final String fileName0 = arg0.getName();\n-            final String fileName2 = arg1.getName();\n-            if (fileName0.equals(fileName2)) {\n+        list.sort((packingFile, packingFile2) -> {\n+            packingFile.getName();\n+            packingFile2.getName();\n+            final String anObject;\n+            final String anotherString;\n+            if (anObject.equals(anotherString)) {\n                 return 0;\n             }\n-            else if (\"META-INF/MANIFEST.MF\".equals(fileName0)) {\n+            else if (\"META-INF/MANIFEST.MF\".equals(anObject)) {\n                 return -1;\n             }\n-            else if (\"META-INF/MANIFEST.MF\".equals(fileName2)) {\n+            else if (\"META-INF/MANIFEST.MF\".equals(anotherString)) {\n                 return 1;\n             }\n             else {\n-                return fileName0.compareTo(fileName2);\n+                return anObject.compareTo(anotherString);\n             }\n         });\n     }\n     \n     static {\n         PackingUtils.packingLogger = new PackingUtils.PackingLogger(\"org.harmony.apache.pack200\", (String)null);\n         LogManager.getLogManager().addLogger((Logger)PackingUtils.packingLogger);\n"}]}
