{"diffoscope-json-version": 1, "source1": "first/ColognePhonetic.class", "source2": "second/ColognePhonetic.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,144 +13,142 @@\n     private static final char[] GKQ;\n     private static final char[] CKQ;\n     private static final char[] AHKLOQRUX;\n     private static final char[] SZ;\n     private static final char[] AHOUKQX;\n     private static final char[] TDX;\n     \n-    private static boolean arrayContains(final char[] arr, final char key) {\n-        for (final char element : arr) {\n-            if (element == key) {\n+    private static boolean arrayContains(final char[] array, final char c) {\n+        for (int length = array.length, i = 0; i < length; ++i) {\n+            if (array[i] == c) {\n                 return true;\n             }\n         }\n         return false;\n     }\n     \n-    public String colognePhonetic(final String text) {\n-        if (text == null) {\n+    public String colognePhonetic(final String s) {\n+        if (s == null) {\n             return null;\n         }\n-        final ColognePhonetic.CologneInputBuffer input = new ColognePhonetic.CologneInputBuffer(this, this.preprocess(text));\n-        final ColognePhonetic.CologneOutputBuffer output = new ColognePhonetic.CologneOutputBuffer(this, input.length() * 2);\n-        final char CHAR_FIRST_POS = '/';\n-        final char CHAR_IGNORE = '-';\n-        char lastChar = '-';\n-        char lastCode = '/';\n-        while (input.length() > 0) {\n-            final char chr = input.removeNext();\n+        final ColognePhonetic.CologneInputBuffer cologneInputBuffer = new ColognePhonetic.CologneInputBuffer(this, this.preprocess(s));\n+        final ColognePhonetic.CologneOutputBuffer cologneOutputBuffer = new ColognePhonetic.CologneOutputBuffer(this, cologneInputBuffer.length() * 2);\n+        char c = '-';\n+        char c2 = '/';\n+        while (cologneInputBuffer.length() > 0) {\n+            final char removeNext = cologneInputBuffer.removeNext();\n             char nextChar;\n-            if (input.length() > 0) {\n-                nextChar = input.getNextChar();\n+            if (cologneInputBuffer.length() > 0) {\n+                nextChar = cologneInputBuffer.getNextChar();\n             }\n             else {\n                 nextChar = '-';\n             }\n-            if (chr != 'H' && chr >= 'A') {\n-                if (chr > 'Z') {\n+            if (removeNext != 'H' && removeNext >= 'A') {\n+                if (removeNext > 'Z') {\n                     continue;\n                 }\n-                char code;\n-                if (arrayContains(ColognePhonetic.AEIJOUY, chr)) {\n-                    code = '0';\n+                char c3;\n+                if (arrayContains(ColognePhonetic.AEIJOUY, removeNext)) {\n+                    c3 = '0';\n                 }\n-                else if (chr == 'B' || (chr == 'P' && nextChar != 'H')) {\n-                    code = '1';\n+                else if (removeNext == 'B' || (removeNext == 'P' && nextChar != 'H')) {\n+                    c3 = '1';\n                 }\n-                else if ((chr == 'D' || chr == 'T') && !arrayContains(ColognePhonetic.SCZ, nextChar)) {\n-                    code = '2';\n+                else if ((removeNext == 'D' || removeNext == 'T') && !arrayContains(ColognePhonetic.SCZ, nextChar)) {\n+                    c3 = '2';\n                 }\n-                else if (arrayContains(ColognePhonetic.WFPV, chr)) {\n-                    code = '3';\n+                else if (arrayContains(ColognePhonetic.WFPV, removeNext)) {\n+                    c3 = '3';\n                 }\n-                else if (arrayContains(ColognePhonetic.GKQ, chr)) {\n-                    code = '4';\n+                else if (arrayContains(ColognePhonetic.GKQ, removeNext)) {\n+                    c3 = '4';\n                 }\n-                else if (chr == 'X' && !arrayContains(ColognePhonetic.CKQ, lastChar)) {\n-                    code = '4';\n-                    input.addLeft('S');\n+                else if (removeNext == 'X' && !arrayContains(ColognePhonetic.CKQ, c)) {\n+                    c3 = '4';\n+                    cologneInputBuffer.addLeft('S');\n                 }\n-                else if (chr == 'S' || chr == 'Z') {\n-                    code = '8';\n+                else if (removeNext == 'S' || removeNext == 'Z') {\n+                    c3 = '8';\n                 }\n-                else if (chr == 'C') {\n-                    if (lastCode == '/') {\n+                else if (removeNext == 'C') {\n+                    if (c2 == '/') {\n                         if (arrayContains(ColognePhonetic.AHKLOQRUX, nextChar)) {\n-                            code = '4';\n+                            c3 = '4';\n                         }\n                         else {\n-                            code = '8';\n+                            c3 = '8';\n                         }\n                     }\n-                    else if (arrayContains(ColognePhonetic.SZ, lastChar) || !arrayContains(ColognePhonetic.AHOUKQX, nextChar)) {\n-                        code = '8';\n+                    else if (arrayContains(ColognePhonetic.SZ, c) || !arrayContains(ColognePhonetic.AHOUKQX, nextChar)) {\n+                        c3 = '8';\n                     }\n                     else {\n-                        code = '4';\n+                        c3 = '4';\n                     }\n                 }\n-                else if (arrayContains(ColognePhonetic.TDX, chr)) {\n-                    code = '8';\n+                else if (arrayContains(ColognePhonetic.TDX, removeNext)) {\n+                    c3 = '8';\n                 }\n-                else if (chr == 'R') {\n-                    code = '7';\n+                else if (removeNext == 'R') {\n+                    c3 = '7';\n                 }\n-                else if (chr == 'L') {\n-                    code = '5';\n+                else if (removeNext == 'L') {\n+                    c3 = '5';\n                 }\n-                else if (chr == 'M' || chr == 'N') {\n-                    code = '6';\n+                else if (removeNext == 'M' || removeNext == 'N') {\n+                    c3 = '6';\n                 }\n                 else {\n-                    code = chr;\n+                    c3 = removeNext;\n                 }\n-                if (code != '-' && ((lastCode != code && (code != '0' || lastCode == '/')) || code < '0' || code > '8')) {\n-                    output.addRight(code);\n+                if (c3 != '-' && ((c2 != c3 && (c3 != '0' || c2 == '/')) || c3 < '0' || c3 > '8')) {\n+                    cologneOutputBuffer.addRight(c3);\n                 }\n-                lastChar = chr;\n-                lastCode = code;\n+                c = removeNext;\n+                c2 = c3;\n             }\n         }\n-        return output.toString();\n+        return cologneOutputBuffer.toString();\n     }\n     \n-    public Object encode(final Object object) throws EncoderException {\n-        if (!(object instanceof String)) {\n-            throw new EncoderException(\"This method's parameter was expected to be of the type \" + String.class.getName() + \". But actually it was of the type \" + object.getClass().getName() + \".\");\n+    public Object encode(final Object o) throws EncoderException {\n+        if (!(o instanceof String)) {\n+            throw new EncoderException(\"This method's parameter was expected to be of the type \" + String.class.getName() + \". But actually it was of the type \" + o.getClass().getName() + \".\");\n         }\n-        return this.encode((String)object);\n+        return this.encode((String)o);\n     }\n     \n-    public String encode(final String text) {\n-        return this.colognePhonetic(text);\n+    public String encode(final String s) {\n+        return this.colognePhonetic(s);\n     }\n     \n-    public boolean isEncodeEqual(final String text1, final String text2) {\n-        return this.colognePhonetic(text1).equals(this.colognePhonetic(text2));\n+    public boolean isEncodeEqual(final String s, final String s2) {\n+        return this.colognePhonetic(s).equals(this.colognePhonetic(s2));\n     }\n     \n-    private char[] preprocess(final String text) {\n-        final char[] chrs = text.toUpperCase(Locale.GERMAN).toCharArray();\n-        for (int index = 0; index < chrs.length; ++index) {\n-            switch (chrs[index]) {\n+    private char[] preprocess(final String s) {\n+        final char[] charArray = s.toUpperCase(Locale.GERMAN).toCharArray();\n+        for (int i = 0; i < charArray.length; ++i) {\n+            switch (charArray[i]) {\n                 case '\\u00c4': {\n-                    chrs[index] = 'A';\n+                    charArray[i] = 'A';\n                     break;\n                 }\n                 case '\\u00dc': {\n-                    chrs[index] = 'U';\n+                    charArray[i] = 'U';\n                     break;\n                 }\n                 case '\\u00d6': {\n-                    chrs[index] = 'O';\n+                    charArray[i] = 'O';\n                     break;\n                 }\n             }\n         }\n-        return chrs;\n+        return charArray;\n     }\n     \n     static {\n         AEIJOUY = new char[] { 'A', 'E', 'I', 'J', 'O', 'U', 'Y' };\n         SCZ = new char[] { 'S', 'C', 'Z' };\n         WFPV = new char[] { 'W', 'F', 'P', 'V' };\n         GKQ = new char[] { 'G', 'K', 'Q' };\n"}]}
