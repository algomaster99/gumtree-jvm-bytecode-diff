{"diffoscope-json-version": 1, "source1": "first/AbstractHeaderCheck.class", "source2": "second/AbstractHeaderCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -29,14 +29,18 @@\n {\n     private static final Pattern ESCAPED_LINE_FEED_PATTERN;\n     private final List<String> readerLines;\n     private URI headerFile;\n     @XdocsPropertyType(PropertyType.STRING)\n     private Charset charset;\n     \n+    static {\n+        ESCAPED_LINE_FEED_PATTERN = Pattern.compile(\"\\\\\\\\n\");\n+    }\n+    \n     public AbstractHeaderCheck() {\n         this.readerLines = new ArrayList<String>();\n         this.charset = createCharset(System.getProperty(\"file.encoding\", StandardCharsets.UTF_8.name()));\n     }\n     \n     protected abstract void postProcessHeaderLines();\n     \n@@ -53,59 +57,126 @@\n             throw new CheckstyleException(\"property 'headerFile' is missing or invalid in module \" + this.getConfiguration().getName());\n         }\n         this.headerFile = uri;\n     }\n     \n     private void loadHeaderFile() throws CheckstyleException {\n         this.checkHeaderNotInitialized();\n-        try (final Reader headerReader = new InputStreamReader(new BufferedInputStream(this.headerFile.toURL().openStream()), this.charset)) {\n-            this.loadHeader(headerReader);\n+        try {\n+            Throwable t = null;\n+            try {\n+                final Reader headerReader = new InputStreamReader(new BufferedInputStream(this.headerFile.toURL().openStream()), this.charset);\n+                try {\n+                    this.loadHeader(headerReader);\n+                }\n+                finally {\n+                    if (headerReader != null) {\n+                        headerReader.close();\n+                    }\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n+                }\n+            }\n         }\n         catch (final IOException ex) {\n             throw new CheckstyleException(\"unable to load header file \" + this.headerFile, (Throwable)ex);\n         }\n     }\n     \n     private void checkHeaderNotInitialized() {\n         if (!this.readerLines.isEmpty()) {\n             throw new IllegalArgumentException(\"header has already been set - set either header or headerFile, not both\");\n         }\n     }\n     \n     private static Charset createCharset(final String name) {\n         if (!Charset.isSupported(name)) {\n-            final String message = \"unsupported charset: '\" + name;\n+            final String message = \"unsupported charset: '\" + name + \"'\";\n             throw new UnsupportedCharsetException(message);\n         }\n         return Charset.forName(name);\n     }\n     \n     public void setHeader(final String header) {\n         if (!CommonUtil.isBlank(header)) {\n             this.checkHeaderNotInitialized();\n             final String headerExpandedNewLines = AbstractHeaderCheck.ESCAPED_LINE_FEED_PATTERN.matcher(header).replaceAll(\"\\n\");\n-            try (final Reader headerReader = new StringReader(headerExpandedNewLines)) {\n-                this.loadHeader(headerReader);\n+            try {\n+                Throwable t = null;\n+                try {\n+                    final Reader headerReader = new StringReader(headerExpandedNewLines);\n+                    try {\n+                        this.loadHeader(headerReader);\n+                    }\n+                    finally {\n+                        if (headerReader != null) {\n+                            headerReader.close();\n+                        }\n+                    }\n+                }\n+                finally {\n+                    if (t == null) {\n+                        final Throwable exception;\n+                        t = exception;\n+                    }\n+                    else {\n+                        final Throwable exception;\n+                        if (t != exception) {\n+                            t.addSuppressed(exception);\n+                        }\n+                    }\n+                }\n             }\n             catch (final IOException ex) {\n                 throw new IllegalArgumentException(\"unable to load header\", ex);\n             }\n         }\n     }\n     \n     private void loadHeader(final Reader headerReader) throws IOException {\n-        try (final LineNumberReader lnr = new LineNumberReader(headerReader)) {\n-            String line;\n-            do {\n-                line = lnr.readLine();\n-                if (line != null) {\n-                    this.readerLines.add(line);\n+        Throwable t = null;\n+        try {\n+            final LineNumberReader lnr = new LineNumberReader(headerReader);\n+            try {\n+                String line;\n+                do {\n+                    line = lnr.readLine();\n+                    if (line != null) {\n+                        this.readerLines.add(line);\n+                    }\n+                } while (line != null);\n+                this.postProcessHeaderLines();\n+            }\n+            finally {\n+                if (lnr != null) {\n+                    lnr.close();\n                 }\n-            } while (line != null);\n-            this.postProcessHeaderLines();\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     protected final void finishLocalSetup() throws CheckstyleException {\n         if (this.headerFile != null) {\n             this.loadHeaderFile();\n         }\n@@ -117,12 +188,8 @@\n             result = Collections.emptySet();\n         }\n         else {\n             result = Collections.singleton(this.headerFile.toString());\n         }\n         return result;\n     }\n-    \n-    static {\n-        ESCAPED_LINE_FEED_PATTERN = Pattern.compile(\"\\\\\\\\n\");\n-    }\n }\n"}]}
