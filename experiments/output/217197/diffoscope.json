{"diffoscope-json-version": 1, "source1": "first/CodeHTML.class", "source2": "second/CodeHTML.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -29,75 +29,75 @@\n     private final ConstantPool constantPool;\n     private final ConstantHTML constantHtml;\n     \n     CodeHTML(final String dir, final String className, final Method[] methods, final ConstantPool constantPool, final ConstantHTML constantHtml, final Charset charset) throws IOException {\n         this.className = className;\n         this.constantPool = constantPool;\n         this.constantHtml = constantHtml;\n-        try (final PrintWriter newPrintWriter = new PrintWriter(dir + className + \"_code.html\", charset.name())) {\n-            (this.printWriter = newPrintWriter).print(\"<HTML><head><meta charset=\\\"\");\n+        try (final PrintWriter printWriter = new PrintWriter(dir + className + \"_code.html\", charset.name())) {\n+            (this.printWriter = printWriter).print(\"<HTML><head><meta charset=\\\"\");\n             this.printWriter.print(charset.name());\n             this.printWriter.println(\"\\\"></head>\");\n             this.printWriter.println(\"<BODY BGCOLOR=\\\"#C0C0C0\\\">\");\n             for (int i = 0; i < methods.length; ++i) {\n                 this.writeMethod(methods[i], i);\n             }\n             this.printWriter.println(\"</BODY></HTML>\");\n         }\n     }\n     \n     private String codeToHTML(final ByteSequence bytes, final int methodNumber) throws IOException {\n-        final short opcode = (short)bytes.readUnsignedByte();\n-        int defaultOffset = 0;\n-        int noPadBytes = 0;\n-        final StringBuilder buf = new StringBuilder(256);\n-        buf.append(\"<TT>\").append(Const.getOpcodeName((int)opcode)).append(\"</TT></TD><TD>\");\n-        if (opcode == 170 || opcode == 171) {\n-            final int remainder = bytes.getIndex() % 4;\n-            noPadBytes = ((remainder == 0) ? 0 : (4 - remainder));\n-            for (int i = 0; i < noPadBytes; ++i) {\n+        final short n = (short)bytes.readUnsignedByte();\n+        int int1 = 0;\n+        int n2 = 0;\n+        final StringBuilder sb = new StringBuilder(256);\n+        sb.append(\"<TT>\").append(Const.getOpcodeName((int)n)).append(\"</TT></TD><TD>\");\n+        if (n == 170 || n == 171) {\n+            final int n3 = bytes.getIndex() % 4;\n+            n2 = ((n3 == 0) ? 0 : (4 - n3));\n+            for (int i = 0; i < n2; ++i) {\n                 bytes.readByte();\n             }\n-            defaultOffset = bytes.readInt();\n+            int1 = bytes.readInt();\n         }\n-        switch (opcode) {\n+        switch (n) {\n             case 170: {\n-                final int low = bytes.readInt();\n-                final int high = bytes.readInt();\n-                final int offset = bytes.getIndex() - 12 - noPadBytes - 1;\n-                defaultOffset += offset;\n-                buf.append(\"<TABLE BORDER=1><TR>\");\n-                final int[] jumpTable = new int[high - low + 1];\n-                for (int j = 0; j < jumpTable.length; ++j) {\n-                    jumpTable[j] = offset + bytes.readInt();\n-                    buf.append(\"<TH>\").append(low + j).append(\"</TH>\");\n-                }\n-                buf.append(\"<TH>default</TH></TR>\\n<TR>\");\n-                for (final int element : jumpTable) {\n-                    buf.append(\"<TD><A HREF=\\\"#code\").append(methodNumber).append(\"@\").append(element).append(\"\\\">\").append(element).append(\"</A></TD>\");\n+                final int int2 = bytes.readInt();\n+                final int int3 = bytes.readInt();\n+                final int n4 = bytes.getIndex() - 12 - n2 - 1;\n+                final int n5 = int1 + n4;\n+                sb.append(\"<TABLE BORDER=1><TR>\");\n+                final int[] array = new int[int3 - int2 + 1];\n+                for (int j = 0; j < array.length; ++j) {\n+                    array[j] = n4 + bytes.readInt();\n+                    sb.append(\"<TH>\").append(int2 + j).append(\"</TH>\");\n+                }\n+                sb.append(\"<TH>default</TH></TR>\\n<TR>\");\n+                for (final int n6 : array) {\n+                    sb.append(\"<TD><A HREF=\\\"#code\").append(methodNumber).append(\"@\").append(n6).append(\"\\\">\").append(n6).append(\"</A></TD>\");\n                 }\n-                buf.append(\"<TD><A HREF=\\\"#code\").append(methodNumber).append(\"@\").append(defaultOffset).append(\"\\\">\").append(defaultOffset).append(\"</A></TD></TR>\\n</TABLE>\\n\");\n+                sb.append(\"<TD><A HREF=\\\"#code\").append(methodNumber).append(\"@\").append(n5).append(\"\\\">\").append(n5).append(\"</A></TD></TR>\\n</TABLE>\\n\");\n                 break;\n             }\n             case 171: {\n-                final int npairs = bytes.readInt();\n-                final int offset = bytes.getIndex() - 8 - noPadBytes - 1;\n-                final int[] jumpTable = new int[npairs];\n-                defaultOffset += offset;\n-                buf.append(\"<TABLE BORDER=1><TR>\");\n-                for (int i = 0; i < npairs; ++i) {\n-                    final int match = bytes.readInt();\n-                    jumpTable[i] = offset + bytes.readInt();\n-                    buf.append(\"<TH>\").append(match).append(\"</TH>\");\n-                }\n-                buf.append(\"<TH>default</TH></TR>\\n<TR>\");\n-                for (int i = 0; i < npairs; ++i) {\n-                    buf.append(\"<TD><A HREF=\\\"#code\").append(methodNumber).append(\"@\").append(jumpTable[i]).append(\"\\\">\").append(jumpTable[i]).append(\"</A></TD>\");\n+                final int int4 = bytes.readInt();\n+                final int n7 = bytes.getIndex() - 8 - n2 - 1;\n+                final int[] array3 = new int[int4];\n+                final int n8 = int1 + n7;\n+                sb.append(\"<TABLE BORDER=1><TR>\");\n+                for (int l = 0; l < int4; ++l) {\n+                    final int int5 = bytes.readInt();\n+                    array3[l] = n7 + bytes.readInt();\n+                    sb.append(\"<TH>\").append(int5).append(\"</TH>\");\n+                }\n+                sb.append(\"<TH>default</TH></TR>\\n<TR>\");\n+                for (int n9 = 0; n9 < int4; ++n9) {\n+                    sb.append(\"<TD><A HREF=\\\"#code\").append(methodNumber).append(\"@\").append(array3[n9]).append(\"\\\">\").append(array3[n9]).append(\"</A></TD>\");\n                 }\n-                buf.append(\"<TD><A HREF=\\\"#code\").append(methodNumber).append(\"@\").append(defaultOffset).append(\"\\\">\").append(defaultOffset).append(\"</A></TD></TR>\\n</TABLE>\\n\");\n+                sb.append(\"<TD><A HREF=\\\"#code\").append(methodNumber).append(\"@\").append(n8).append(\"\\\">\").append(n8).append(\"</A></TD></TR>\\n</TABLE>\\n\");\n                 break;\n             }\n             case 153:\n             case 154:\n             case 155:\n             case 156:\n             case 157:\n@@ -110,247 +110,232 @@\n             case 164:\n             case 165:\n             case 166:\n             case 167:\n             case 168:\n             case 198:\n             case 199: {\n-                final int index = bytes.getIndex() + bytes.readShort() - 1;\n-                buf.append(\"<A HREF=\\\"#code\").append(methodNumber).append(\"@\").append(index).append(\"\\\">\").append(index).append(\"</A>\");\n+                final int n10 = bytes.getIndex() + bytes.readShort() - 1;\n+                sb.append(\"<A HREF=\\\"#code\").append(methodNumber).append(\"@\").append(n10).append(\"\\\">\").append(n10).append(\"</A>\");\n                 break;\n             }\n             case 200:\n             case 201: {\n-                final int windex = bytes.getIndex() + bytes.readInt() - 1;\n-                buf.append(\"<A HREF=\\\"#code\").append(methodNumber).append(\"@\").append(windex).append(\"\\\">\").append(windex).append(\"</A>\");\n+                final int n11 = bytes.getIndex() + bytes.readInt() - 1;\n+                sb.append(\"<A HREF=\\\"#code\").append(methodNumber).append(\"@\").append(n11).append(\"\\\">\").append(n11).append(\"</A>\");\n                 break;\n             }\n             case 21:\n             case 22:\n             case 23:\n             case 24:\n             case 25:\n             case 54:\n             case 55:\n             case 56:\n             case 57:\n             case 58:\n             case 169: {\n-                int vindex;\n+                int m;\n                 if (CodeHTML.wide) {\n-                    vindex = bytes.readShort();\n+                    m = bytes.readShort();\n                     CodeHTML.wide = false;\n                 }\n                 else {\n-                    vindex = bytes.readUnsignedByte();\n+                    m = bytes.readUnsignedByte();\n                 }\n-                buf.append(\"%\").append(vindex);\n+                sb.append(\"%\").append(m);\n                 break;\n             }\n             case 196: {\n                 CodeHTML.wide = true;\n-                buf.append(\"(wide)\");\n+                sb.append(\"(wide)\");\n                 break;\n             }\n             case 188: {\n-                buf.append(\"<FONT COLOR=\\\"#00FF00\\\">\").append(Const.getTypeName((int)bytes.readByte())).append(\"</FONT>\");\n+                sb.append(\"<FONT COLOR=\\\"#00FF00\\\">\").append(Const.getTypeName((int)bytes.readByte())).append(\"</FONT>\");\n                 break;\n             }\n             case 178:\n             case 179:\n             case 180:\n             case 181: {\n-                int index = bytes.readShort();\n-                final ConstantFieldref c1 = (ConstantFieldref)this.constantPool.getConstant(index, (byte)9, (Class)ConstantFieldref.class);\n-                final int classIndex = c1.getClassIndex();\n-                String name = this.constantPool.getConstantString(classIndex, (byte)7);\n-                name = Utility.compactClassName(name, false);\n-                index = c1.getNameAndTypeIndex();\n-                final String fieldName = this.constantPool.constantToString(index, (byte)12);\n-                if (name.equals(this.className)) {\n-                    buf.append(\"<A HREF=\\\"\").append(this.className).append(\"_methods.html#field\").append(fieldName).append(\"\\\" TARGET=Methods>\").append(fieldName).append(\"</A>\\n\");\n+                final ConstantFieldref constantFieldref = (ConstantFieldref)this.constantPool.getConstant((int)bytes.readShort(), (byte)9, (Class)ConstantFieldref.class);\n+                final int classIndex = constantFieldref.getClassIndex();\n+                final String compactClassName = Utility.compactClassName(this.constantPool.getConstantString(classIndex, (byte)7), false);\n+                final String constantToString = this.constantPool.constantToString(constantFieldref.getNameAndTypeIndex(), (byte)12);\n+                if (compactClassName.equals(this.className)) {\n+                    sb.append(\"<A HREF=\\\"\").append(this.className).append(\"_methods.html#field\").append(constantToString).append(\"\\\" TARGET=Methods>\").append(constantToString).append(\"</A>\\n\");\n                     break;\n                 }\n-                buf.append(this.constantHtml.referenceConstant(classIndex)).append(\".\").append(fieldName);\n+                sb.append(this.constantHtml.referenceConstant(classIndex)).append(\".\").append(constantToString);\n                 break;\n             }\n             case 187:\n             case 192:\n             case 193: {\n-                final int index = bytes.readShort();\n-                buf.append(this.constantHtml.referenceConstant(index));\n+                sb.append(this.constantHtml.referenceConstant((int)bytes.readShort()));\n                 break;\n             }\n             case 182:\n             case 183:\n             case 184:\n             case 185:\n             case 186: {\n-                final int mIndex = bytes.readShort();\n-                int index;\n-                String name;\n-                if (opcode == 185) {\n+                final short short1 = bytes.readShort();\n+                int n12;\n+                String str;\n+                if (n == 185) {\n                     bytes.readUnsignedByte();\n                     bytes.readUnsignedByte();\n-                    final ConstantInterfaceMethodref c2 = (ConstantInterfaceMethodref)this.constantPool.getConstant(mIndex, (byte)11, (Class)ConstantInterfaceMethodref.class);\n-                    final int classIndex = c2.getClassIndex();\n-                    index = c2.getNameAndTypeIndex();\n-                    name = Class2HTML.referenceClass(classIndex);\n+                    final ConstantInterfaceMethodref constantInterfaceMethodref = (ConstantInterfaceMethodref)this.constantPool.getConstant((int)short1, (byte)11, (Class)ConstantInterfaceMethodref.class);\n+                    final int classIndex2 = constantInterfaceMethodref.getClassIndex();\n+                    n12 = constantInterfaceMethodref.getNameAndTypeIndex();\n+                    str = Class2HTML.referenceClass(classIndex2);\n                 }\n-                else if (opcode == 186) {\n+                else if (n == 186) {\n                     bytes.readUnsignedByte();\n                     bytes.readUnsignedByte();\n-                    final ConstantInvokeDynamic c3 = (ConstantInvokeDynamic)this.constantPool.getConstant(mIndex, (byte)18, (Class)ConstantInvokeDynamic.class);\n-                    index = c3.getNameAndTypeIndex();\n-                    name = \"#\" + c3.getBootstrapMethodAttrIndex();\n+                    final ConstantInvokeDynamic constantInvokeDynamic = (ConstantInvokeDynamic)this.constantPool.getConstant((int)short1, (byte)18, (Class)ConstantInvokeDynamic.class);\n+                    n12 = constantInvokeDynamic.getNameAndTypeIndex();\n+                    str = \"#\" + constantInvokeDynamic.getBootstrapMethodAttrIndex();\n                 }\n                 else {\n-                    final ConstantMethodref c4 = (ConstantMethodref)this.constantPool.getConstant(mIndex, (byte)10, (Class)ConstantMethodref.class);\n-                    final int classIndex = c4.getClassIndex();\n-                    index = c4.getNameAndTypeIndex();\n-                    name = Class2HTML.referenceClass(classIndex);\n-                }\n-                final String str = Class2HTML.toHTML(this.constantPool.constantToString(this.constantPool.getConstant(index, (byte)12)));\n-                final ConstantNameAndType c5 = (ConstantNameAndType)this.constantPool.getConstant(index, (byte)12, (Class)ConstantNameAndType.class);\n-                final String signature = this.constantPool.constantToString(c5.getSignatureIndex(), (byte)1);\n-                final String[] args = Utility.methodSignatureArgumentTypes(signature, false);\n-                final String type = Utility.methodSignatureReturnType(signature, false);\n-                buf.append(name).append(\".<A HREF=\\\"\").append(this.className).append(\"_cp.html#cp\").append(mIndex).append(\"\\\" TARGET=ConstantPool>\").append(str).append(\"</A>\").append(\"(\");\n-                for (int k = 0; k < args.length; ++k) {\n-                    buf.append(Class2HTML.referenceType(args[k]));\n-                    if (k < args.length - 1) {\n-                        buf.append(\", \");\n+                    final ConstantMethodref constantMethodref = (ConstantMethodref)this.constantPool.getConstant((int)short1, (byte)10, (Class)ConstantMethodref.class);\n+                    final int classIndex3 = constantMethodref.getClassIndex();\n+                    n12 = constantMethodref.getNameAndTypeIndex();\n+                    str = Class2HTML.referenceClass(classIndex3);\n+                }\n+                final String html = Class2HTML.toHTML(this.constantPool.constantToString(this.constantPool.getConstant(n12, (byte)12)));\n+                final String constantToString2 = this.constantPool.constantToString(((ConstantNameAndType)this.constantPool.getConstant(n12, (byte)12, (Class)ConstantNameAndType.class)).getSignatureIndex(), (byte)1);\n+                final String[] methodSignatureArgumentTypes = Utility.methodSignatureArgumentTypes(constantToString2, false);\n+                final String methodSignatureReturnType = Utility.methodSignatureReturnType(constantToString2, false);\n+                sb.append(str).append(\".<A HREF=\\\"\").append(this.className).append(\"_cp.html#cp\").append(short1).append(\"\\\" TARGET=ConstantPool>\").append(html).append(\"</A>\").append(\"(\");\n+                for (int n13 = 0; n13 < methodSignatureArgumentTypes.length; ++n13) {\n+                    sb.append(Class2HTML.referenceType(methodSignatureArgumentTypes[n13]));\n+                    if (n13 < methodSignatureArgumentTypes.length - 1) {\n+                        sb.append(\", \");\n                     }\n                 }\n-                buf.append(\"):\").append(Class2HTML.referenceType(type));\n+                sb.append(\"):\").append(Class2HTML.referenceType(methodSignatureReturnType));\n                 break;\n             }\n             case 19:\n             case 20: {\n-                final int index = bytes.readShort();\n-                buf.append(\"<A HREF=\\\"\").append(this.className).append(\"_cp.html#cp\").append(index).append(\"\\\" TARGET=\\\"ConstantPool\\\">\").append(Class2HTML.toHTML(this.constantPool.constantToString(index, this.constantPool.getConstant(index).getTag()))).append(\"</a>\");\n+                final short short2 = bytes.readShort();\n+                sb.append(\"<A HREF=\\\"\").append(this.className).append(\"_cp.html#cp\").append(short2).append(\"\\\" TARGET=\\\"ConstantPool\\\">\").append(Class2HTML.toHTML(this.constantPool.constantToString((int)short2, this.constantPool.getConstant((int)short2).getTag()))).append(\"</a>\");\n                 break;\n             }\n             case 18: {\n-                final int index = bytes.readUnsignedByte();\n-                buf.append(\"<A HREF=\\\"\").append(this.className).append(\"_cp.html#cp\").append(index).append(\"\\\" TARGET=\\\"ConstantPool\\\">\").append(Class2HTML.toHTML(this.constantPool.constantToString(index, this.constantPool.getConstant(index).getTag()))).append(\"</a>\");\n+                final int unsignedByte = bytes.readUnsignedByte();\n+                sb.append(\"<A HREF=\\\"\").append(this.className).append(\"_cp.html#cp\").append(unsignedByte).append(\"\\\" TARGET=\\\"ConstantPool\\\">\").append(Class2HTML.toHTML(this.constantPool.constantToString(unsignedByte, this.constantPool.getConstant(unsignedByte).getTag()))).append(\"</a>\");\n                 break;\n             }\n             case 189: {\n-                final int index = bytes.readShort();\n-                buf.append(this.constantHtml.referenceConstant(index));\n+                sb.append(this.constantHtml.referenceConstant((int)bytes.readShort()));\n                 break;\n             }\n             case 197: {\n-                final int index = bytes.readShort();\n-                final int dimensions = bytes.readByte();\n-                buf.append(this.constantHtml.referenceConstant(index)).append(\":\").append(dimensions).append(\"-dimensional\");\n+                sb.append(this.constantHtml.referenceConstant((int)bytes.readShort())).append(\":\").append(bytes.readByte()).append(\"-dimensional\");\n                 break;\n             }\n             case 132: {\n-                int vindex;\n-                int constant;\n+                int i2;\n+                short i3;\n                 if (CodeHTML.wide) {\n-                    vindex = bytes.readShort();\n-                    constant = bytes.readShort();\n+                    i2 = bytes.readShort();\n+                    i3 = bytes.readShort();\n                     CodeHTML.wide = false;\n                 }\n                 else {\n-                    vindex = bytes.readUnsignedByte();\n-                    constant = bytes.readByte();\n+                    i2 = bytes.readUnsignedByte();\n+                    i3 = bytes.readByte();\n                 }\n-                buf.append(\"%\").append(vindex).append(\" \").append(constant);\n+                sb.append(\"%\").append(i2).append(\" \").append(i3);\n                 break;\n             }\n             default: {\n-                if (Const.getNoOfOperands((int)opcode) > 0) {\n-                    for (int l = 0; l < Const.getOperandTypeCount((int)opcode); ++l) {\n-                        switch (Const.getOperandType((int)opcode, l)) {\n+                if (Const.getNoOfOperands((int)n) > 0) {\n+                    for (int n14 = 0; n14 < Const.getOperandTypeCount((int)n); ++n14) {\n+                        switch (Const.getOperandType((int)n, n14)) {\n                             case 8: {\n-                                buf.append(bytes.readUnsignedByte());\n+                                sb.append(bytes.readUnsignedByte());\n                                 break;\n                             }\n                             case 9: {\n-                                buf.append(bytes.readShort());\n+                                sb.append(bytes.readShort());\n                                 break;\n                             }\n                             case 10: {\n-                                buf.append(bytes.readInt());\n+                                sb.append(bytes.readInt());\n                                 break;\n                             }\n                             default: {\n-                                throw new IllegalStateException(\"Unreachable default case reached! \" + Const.getOperandType((int)opcode, l));\n+                                throw new IllegalStateException(\"Unreachable default case reached! \" + Const.getOperandType((int)n, n14));\n                             }\n                         }\n-                        buf.append(\"&nbsp;\");\n+                        sb.append(\"&nbsp;\");\n                     }\n                     break;\n                 }\n                 break;\n             }\n         }\n-        buf.append(\"</TD>\");\n-        return buf.toString();\n+        sb.append(\"</TD>\");\n+        return sb.toString();\n     }\n     \n     private void findGotos(final ByteSequence bytes, final Code code) throws IOException {\n         this.gotoSet = new BitSet(bytes.available());\n         if (code != null) {\n-            final CodeException[] exceptionTable;\n-            final CodeException[] ce = exceptionTable = code.getExceptionTable();\n-            for (final CodeException cex : exceptionTable) {\n-                this.gotoSet.set(cex.getStartPC());\n-                this.gotoSet.set(cex.getEndPC());\n-                this.gotoSet.set(cex.getHandlerPC());\n-            }\n-            final Attribute[] attributes2;\n-            final Attribute[] attributes = attributes2 = code.getAttributes();\n-            for (final Attribute attribute : attributes2) {\n+            for (final CodeException ex : code.getExceptionTable()) {\n+                this.gotoSet.set(ex.getStartPC());\n+                this.gotoSet.set(ex.getEndPC());\n+                this.gotoSet.set(ex.getHandlerPC());\n+            }\n+            for (final Attribute attribute : code.getAttributes()) {\n                 if (attribute.getTag() == 5) {\n-                    ((LocalVariableTable)attribute).forEach(var -> {\n-                        final int start = var.getStartPC();\n-                        this.gotoSet.set(start);\n-                        this.gotoSet.set(start + var.getLength());\n+                    ((LocalVariableTable)attribute).forEach(localVariable -> {\n+                        localVariable.getStartPC();\n+                        final int bitIndex;\n+                        this.gotoSet.set(bitIndex);\n+                        this.gotoSet.set(bitIndex + localVariable.getLength());\n                         return;\n                     });\n                     break;\n                 }\n             }\n         }\n         while (bytes.available() > 0) {\n-            final int opcode = bytes.readUnsignedByte();\n-            switch (opcode) {\n+            final int unsignedByte = bytes.readUnsignedByte();\n+            switch (unsignedByte) {\n                 case 170:\n                 case 171: {\n-                    final int remainder = bytes.getIndex() % 4;\n-                    final int noPadBytes = (remainder == 0) ? 0 : (4 - remainder);\n-                    for (int j = 0; j < noPadBytes; ++j) {\n+                    final int n = bytes.getIndex() % 4;\n+                    final int n2 = (n == 0) ? 0 : (4 - n);\n+                    for (int k = 0; k < n2; ++k) {\n                         bytes.readByte();\n                     }\n-                    int defaultOffset = bytes.readInt();\n-                    if (opcode == 170) {\n-                        final int low = bytes.readInt();\n-                        final int high = bytes.readInt();\n-                        final int offset = bytes.getIndex() - 12 - noPadBytes - 1;\n-                        defaultOffset += offset;\n-                        this.gotoSet.set(defaultOffset);\n-                        for (int i = 0; i < high - low + 1; ++i) {\n-                            final int index = offset + bytes.readInt();\n-                            this.gotoSet.set(index);\n+                    final int int1 = bytes.readInt();\n+                    if (unsignedByte == 170) {\n+                        final int int2 = bytes.readInt();\n+                        final int int3 = bytes.readInt();\n+                        final int n3 = bytes.getIndex() - 12 - n2 - 1;\n+                        this.gotoSet.set(int1 + n3);\n+                        for (int l = 0; l < int3 - int2 + 1; ++l) {\n+                            this.gotoSet.set(n3 + bytes.readInt());\n                         }\n                         continue;\n                     }\n-                    final int npairs = bytes.readInt();\n-                    final int offset = bytes.getIndex() - 8 - noPadBytes - 1;\n-                    defaultOffset += offset;\n-                    this.gotoSet.set(defaultOffset);\n-                    for (int k = 0; k < npairs; ++k) {\n+                    final int int4 = bytes.readInt();\n+                    final int n4 = bytes.getIndex() - 8 - n2 - 1;\n+                    this.gotoSet.set(int1 + n4);\n+                    for (int n5 = 0; n5 < int4; ++n5) {\n                         bytes.readInt();\n-                        final int index = offset + bytes.readInt();\n-                        this.gotoSet.set(index);\n+                        this.gotoSet.set(n4 + bytes.readInt());\n                     }\n                     continue;\n                 }\n                 case 153:\n                 case 154:\n                 case 155:\n                 case 156:\n@@ -364,97 +349,92 @@\n                 case 164:\n                 case 165:\n                 case 166:\n                 case 167:\n                 case 168:\n                 case 198:\n                 case 199: {\n-                    final int index = bytes.getIndex() + bytes.readShort() - 1;\n-                    this.gotoSet.set(index);\n+                    this.gotoSet.set(bytes.getIndex() + bytes.readShort() - 1);\n                     continue;\n                 }\n                 case 200:\n                 case 201: {\n-                    final int index = bytes.getIndex() + bytes.readInt() - 1;\n-                    this.gotoSet.set(index);\n+                    this.gotoSet.set(bytes.getIndex() + bytes.readInt() - 1);\n                     continue;\n                 }\n                 default: {\n                     bytes.unreadByte();\n                     this.codeToHTML(bytes, 0);\n                     continue;\n                 }\n             }\n         }\n     }\n     \n     private void writeMethod(final Method method, final int methodNumber) throws IOException {\n         final String signature = method.getSignature();\n-        final String[] args = Utility.methodSignatureArgumentTypes(signature, false);\n-        final String type = Utility.methodSignatureReturnType(signature, false);\n-        final String name = method.getName();\n-        final String htmlName = Class2HTML.toHTML(name);\n-        String access = Utility.accessToString(method.getAccessFlags());\n-        access = Utility.replace(access, \" \", \"&nbsp;\");\n+        final String[] methodSignatureArgumentTypes = Utility.methodSignatureArgumentTypes(signature, false);\n+        final String methodSignatureReturnType = Utility.methodSignatureReturnType(signature, false);\n+        final String html = Class2HTML.toHTML(method.getName());\n+        final String replace = Utility.replace(Utility.accessToString(method.getAccessFlags()), \" \", \"&nbsp;\");\n         final Attribute[] attributes = method.getAttributes();\n-        this.printWriter.print(\"<P><B><FONT COLOR=\\\"#FF0000\\\">\" + access + \"</FONT>&nbsp;<A NAME=method\" + methodNumber + \">\" + Class2HTML.referenceType(type) + \"</A>&nbsp<A HREF=\\\"\" + this.className + \"_methods.html#method\" + methodNumber + \"\\\" TARGET=Methods>\" + htmlName + \"</A>(\");\n-        for (int i = 0; i < args.length; ++i) {\n-            this.printWriter.print(Class2HTML.referenceType(args[i]));\n-            if (i < args.length - 1) {\n+        this.printWriter.print(\"<P><B><FONT COLOR=\\\"#FF0000\\\">\" + replace + \"</FONT>&nbsp;<A NAME=method\" + methodNumber + \">\" + Class2HTML.referenceType(methodSignatureReturnType) + \"</A>&nbsp<A HREF=\\\"\" + this.className + \"_methods.html#method\" + methodNumber + \"\\\" TARGET=Methods>\" + html + \"</A>(\");\n+        for (int i = 0; i < methodSignatureArgumentTypes.length; ++i) {\n+            this.printWriter.print(Class2HTML.referenceType(methodSignatureArgumentTypes[i]));\n+            if (i < methodSignatureArgumentTypes.length - 1) {\n                 this.printWriter.print(\",&nbsp;\");\n             }\n         }\n         this.printWriter.println(\")</B></P>\");\n-        Code c = null;\n-        byte[] code = null;\n+        Code code = null;\n+        byte[] code2 = null;\n         if (attributes.length > 0) {\n             this.printWriter.print(\"<H4>Attributes</H4><UL>\\n\");\n             for (int j = 0; j < attributes.length; ++j) {\n-                byte tag = attributes[j].getTag();\n+                final byte tag = attributes[j].getTag();\n                 if (tag != -1) {\n                     this.printWriter.print(\"<LI><A HREF=\\\"\" + this.className + \"_attributes.html#method\" + methodNumber + \"@\" + j + \"\\\" TARGET=Attributes>\" + Const.getAttributeName((int)tag) + \"</A></LI>\\n\");\n                 }\n                 else {\n                     this.printWriter.print(\"<LI>\" + attributes[j] + \"</LI>\");\n                 }\n                 if (tag == 2) {\n-                    c = (Code)attributes[j];\n-                    final Attribute[] attributes2 = c.getAttributes();\n-                    code = c.getCode();\n+                    code = (Code)attributes[j];\n+                    final Attribute[] attributes2 = code.getAttributes();\n+                    code2 = code.getCode();\n                     this.printWriter.print(\"<UL>\");\n                     for (int k = 0; k < attributes2.length; ++k) {\n-                        tag = attributes2[k].getTag();\n-                        this.printWriter.print(\"<LI><A HREF=\\\"\" + this.className + \"_attributes.html#method\" + methodNumber + \"@\" + j + \"@\" + k + \"\\\" TARGET=Attributes>\" + Const.getAttributeName((int)tag) + \"</A></LI>\\n\");\n+                        this.printWriter.print(\"<LI><A HREF=\\\"\" + this.className + \"_attributes.html#method\" + methodNumber + \"@\" + j + \"@\" + k + \"\\\" TARGET=Attributes>\" + Const.getAttributeName((int)attributes2[k].getTag()) + \"</A></LI>\\n\");\n                     }\n                     this.printWriter.print(\"</UL>\");\n                 }\n             }\n             this.printWriter.println(\"</UL>\");\n         }\n-        if (code != null) {\n-            try (final ByteSequence stream = new ByteSequence(code)) {\n-                stream.mark(stream.available());\n-                this.findGotos(stream, c);\n-                stream.reset();\n+        if (code2 != null) {\n+            try (final ByteSequence byteSequence = new ByteSequence(code2)) {\n+                byteSequence.mark(byteSequence.available());\n+                this.findGotos(byteSequence, code);\n+                byteSequence.reset();\n                 this.printWriter.println(\"<TABLE BORDER=0><TR><TH ALIGN=LEFT>Byte<BR>offset</TH><TH ALIGN=LEFT>Instruction</TH><TH ALIGN=LEFT>Argument</TH>\");\n-                while (stream.available() > 0) {\n-                    final int offset = stream.getIndex();\n-                    final String str = this.codeToHTML(stream, methodNumber);\n-                    String anchor = \"\";\n-                    if (this.gotoSet.get(offset)) {\n-                        anchor = \"<A NAME=code\" + methodNumber + \"@\" + offset + \"></A>\";\n+                while (byteSequence.available() > 0) {\n+                    final int index = byteSequence.getIndex();\n+                    final String codeToHTML = this.codeToHTML(byteSequence, methodNumber);\n+                    String string = \"\";\n+                    if (this.gotoSet.get(index)) {\n+                        string = \"<A NAME=code\" + methodNumber + \"@\" + index + \"></A>\";\n                     }\n-                    String anchor2;\n-                    if (stream.getIndex() == code.length) {\n-                        anchor2 = \"<A NAME=code\" + methodNumber + \"@\" + code.length + \">\" + offset + \"</A>\";\n+                    String str;\n+                    if (byteSequence.getIndex() == code2.length) {\n+                        str = \"<A NAME=code\" + methodNumber + \"@\" + code2.length + \">\" + index + \"</A>\";\n                     }\n                     else {\n-                        anchor2 = \"\" + offset;\n+                        str = \"\" + index;\n                     }\n-                    this.printWriter.println(\"<TR VALIGN=TOP><TD>\" + anchor2 + \"</TD><TD>\" + anchor + str + \"</TR>\");\n+                    this.printWriter.println(\"<TR VALIGN=TOP><TD>\" + str + \"</TD><TD>\" + string + codeToHTML + \"</TR>\");\n                 }\n             }\n             this.printWriter.println(\"<TR><TD> </A></TD></TR>\");\n             this.printWriter.println(\"</TABLE>\");\n         }\n     }\n }\n"}]}
