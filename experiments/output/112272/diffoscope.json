{"diffoscope-json-version": 1, "source1": "first/Pass2Verifier.class", "source2": "second/Pass2Verifier.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -74,15 +74,15 @@\n     public Pass2Verifier(final Verifier owner) {\n         this.myOwner = owner;\n     }\n     \n     private void constant_pool_entries_satisfy_static_constraints() {\n         try {\n             final JavaClass jc = Repository.lookupClass(this.myOwner.getClassName());\n-            new Pass2Verifier.CPESSC_Visitor(this, jc, (Pass2Verifier.Pass2Verifier$1)null);\n+            new Pass2Verifier.CPESSC_Visitor(this, jc, (Pass2Verifier.CPESSC_Visitor)null);\n         }\n         catch (final ClassNotFoundException e) {\n             throw new AssertionViolatedException(\"Missing class: \" + e, (Throwable)e);\n         }\n     }\n     \n     public VerificationResult do_verify() {\n@@ -144,39 +144,40 @@\n             throw new AssertionViolatedException(\"Missing class: \" + e, (Throwable)e);\n         }\n     }\n     \n     private void field_and_method_refs_are_valid() {\n         try {\n             final JavaClass jc = Repository.lookupClass(this.myOwner.getClassName());\n-            final DescendingVisitor v = new DescendingVisitor(jc, (Visitor)new Pass2Verifier.FAMRAV_Visitor(this, jc, (Pass2Verifier.Pass2Verifier$1)null));\n+            final DescendingVisitor v = new DescendingVisitor(jc, (Visitor)new Pass2Verifier.FAMRAV_Visitor(this, jc, (Pass2Verifier.FAMRAV_Visitor)null));\n             v.visit();\n         }\n         catch (final ClassNotFoundException e) {\n             throw new AssertionViolatedException(\"Missing class: \" + e, (Throwable)e);\n         }\n     }\n     \n     private void final_methods_are_not_overridden() {\n         try {\n             final Map<String, String> hashmap = new HashMap<String, String>();\n             JavaClass jc = Repository.lookupClass(this.myOwner.getClassName());\n             int supidx = -1;\n             while (supidx != 0) {\n                 supidx = jc.getSuperclassNameIndex();\n-                final Method[] methods2;\n-                final Method[] methods = methods2 = jc.getMethods();\n-                for (final Method method : methods2) {\n-                    final String nameAndSig = method.getName() + method.getSignature();\n+                final Method[] methods = jc.getMethods();\n+                Method[] array;\n+                for (int length = (array = methods).length, i = 0; i < length; ++i) {\n+                    final Method method = array[i];\n+                    final String nameAndSig = String.valueOf(method.getName()) + method.getSignature();\n                     if (hashmap.containsKey(nameAndSig)) {\n                         if (method.isFinal()) {\n                             if (!method.isPrivate()) {\n                                 throw new ClassConstraintException(\"Method '\" + nameAndSig + \"' in class '\" + hashmap.get(nameAndSig) + \"' overrides the final (not-overridable) definition in class '\" + jc.getClassName() + \"'.\");\n                             }\n-                            this.addMessage(\"Method '\" + nameAndSig + \"' in class '\" + hashmap.get(nameAndSig) + \"' overrides the final (not-overridable) definition in class '\" + jc.getClassName() + \"'. This is okay, as the original definition was private; however this constraint leverage was introduced by JLS 8.4.6 (not vmspec2) and the behavior of the Sun verifiers.\");\n+                            this.addMessage(\"Method '\" + nameAndSig + \"' in class '\" + hashmap.get(nameAndSig) + \"' overrides the final (not-overridable) definition in class '\" + jc.getClassName() + \"'. This is okay, as the original definition was private; however this constraint leverage\" + \" was introduced by JLS 8.4.6 (not vmspec2) and the behavior of the Sun verifiers.\");\n                         }\n                         else if (!method.isStatic()) {\n                             hashmap.put(nameAndSig, jc.getClassName());\n                         }\n                     }\n                     else if (!method.isStatic()) {\n                         hashmap.put(nameAndSig, jc.getClassName());\n"}]}
