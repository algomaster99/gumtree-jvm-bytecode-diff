{"diffoscope-json-version": 1, "source1": "first/JavaVersion.class", "source2": "second/JavaVersion.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -26,158 +26,158 @@\n     JAVA_16(16.0f, \"16\"), \n     JAVA_17(17.0f, \"17\"), \n     JAVA_RECENT(maxVersion(), Float.toString(maxVersion()));\n     \n     private final float value;\n     private final String name;\n     \n-    private JavaVersion(final float value, final String name) {\n+    private JavaVersion(final float value, final String name2) {\n         this.value = value;\n-        this.name = name;\n+        this.name = name2;\n     }\n     \n-    public boolean atLeast(final JavaVersion requiredVersion) {\n-        return this.value >= requiredVersion.value;\n+    public boolean atLeast(final JavaVersion javaVersion) {\n+        return this.value >= javaVersion.value;\n     }\n     \n-    public boolean atMost(final JavaVersion requiredVersion) {\n-        return this.value <= requiredVersion.value;\n+    public boolean atMost(final JavaVersion javaVersion) {\n+        return this.value <= javaVersion.value;\n     }\n     \n-    static JavaVersion getJavaVersion(final String nom) {\n-        return get(nom);\n+    static JavaVersion getJavaVersion(final String s) {\n+        return get(s);\n     }\n     \n-    static JavaVersion get(final String versionStr) {\n-        if (versionStr == null) {\n+    static JavaVersion get(final String s) {\n+        if (s == null) {\n             return null;\n         }\n         int n = -1;\n-        switch (versionStr.hashCode()) {\n+        switch (s.hashCode()) {\n             case 47611: {\n-                if (versionStr.equals(\"0.9\")) {\n+                if (s.equals(\"0.9\")) {\n                     n = 0;\n                     break;\n                 }\n                 break;\n             }\n             case 48564: {\n-                if (versionStr.equals(\"1.1\")) {\n+                if (s.equals(\"1.1\")) {\n                     n = 1;\n                     break;\n                 }\n                 break;\n             }\n             case 48565: {\n-                if (versionStr.equals(\"1.2\")) {\n+                if (s.equals(\"1.2\")) {\n                     n = 2;\n                     break;\n                 }\n                 break;\n             }\n             case 48566: {\n-                if (versionStr.equals(\"1.3\")) {\n+                if (s.equals(\"1.3\")) {\n                     n = 3;\n                     break;\n                 }\n                 break;\n             }\n             case 48567: {\n-                if (versionStr.equals(\"1.4\")) {\n+                if (s.equals(\"1.4\")) {\n                     n = 4;\n                     break;\n                 }\n                 break;\n             }\n             case 48568: {\n-                if (versionStr.equals(\"1.5\")) {\n+                if (s.equals(\"1.5\")) {\n                     n = 5;\n                     break;\n                 }\n                 break;\n             }\n             case 48569: {\n-                if (versionStr.equals(\"1.6\")) {\n+                if (s.equals(\"1.6\")) {\n                     n = 6;\n                     break;\n                 }\n                 break;\n             }\n             case 48570: {\n-                if (versionStr.equals(\"1.7\")) {\n+                if (s.equals(\"1.7\")) {\n                     n = 7;\n                     break;\n                 }\n                 break;\n             }\n             case 48571: {\n-                if (versionStr.equals(\"1.8\")) {\n+                if (s.equals(\"1.8\")) {\n                     n = 8;\n                     break;\n                 }\n                 break;\n             }\n             case 57: {\n-                if (versionStr.equals(\"9\")) {\n+                if (s.equals(\"9\")) {\n                     n = 9;\n                     break;\n                 }\n                 break;\n             }\n             case 1567: {\n-                if (versionStr.equals(\"10\")) {\n+                if (s.equals(\"10\")) {\n                     n = 10;\n                     break;\n                 }\n                 break;\n             }\n             case 1568: {\n-                if (versionStr.equals(\"11\")) {\n+                if (s.equals(\"11\")) {\n                     n = 11;\n                     break;\n                 }\n                 break;\n             }\n             case 1569: {\n-                if (versionStr.equals(\"12\")) {\n+                if (s.equals(\"12\")) {\n                     n = 12;\n                     break;\n                 }\n                 break;\n             }\n             case 1570: {\n-                if (versionStr.equals(\"13\")) {\n+                if (s.equals(\"13\")) {\n                     n = 13;\n                     break;\n                 }\n                 break;\n             }\n             case 1571: {\n-                if (versionStr.equals(\"14\")) {\n+                if (s.equals(\"14\")) {\n                     n = 14;\n                     break;\n                 }\n                 break;\n             }\n             case 1572: {\n-                if (versionStr.equals(\"15\")) {\n+                if (s.equals(\"15\")) {\n                     n = 15;\n                     break;\n                 }\n                 break;\n             }\n             case 1573: {\n-                if (versionStr.equals(\"16\")) {\n+                if (s.equals(\"16\")) {\n                     n = 16;\n                     break;\n                 }\n                 break;\n             }\n             case 1574: {\n-                if (versionStr.equals(\"17\")) {\n+                if (s.equals(\"17\")) {\n                     n = 17;\n                     break;\n                 }\n                 break;\n             }\n         }\n         switch (n) {\n@@ -232,48 +232,46 @@\n             case 16: {\n                 return JavaVersion.JAVA_16;\n             }\n             case 17: {\n                 return JavaVersion.JAVA_17;\n             }\n             default: {\n-                final float v = toFloatVersion(versionStr);\n-                if (v - 1.0 < 1.0) {\n-                    final int firstComma = Math.max(versionStr.indexOf(46), versionStr.indexOf(44));\n-                    final int end = Math.max(versionStr.length(), versionStr.indexOf(44, firstComma));\n-                    if (Float.parseFloat(versionStr.substring(firstComma + 1, end)) > 0.9f) {\n+                final float floatVersion = toFloatVersion(s);\n+                if (floatVersion - 1.0 < 1.0) {\n+                    final int max = Math.max(s.indexOf(46), s.indexOf(44));\n+                    if (Float.parseFloat(s.substring(max + 1, Math.max(s.length(), s.indexOf(44, max)))) > 0.9f) {\n                         return JavaVersion.JAVA_RECENT;\n                     }\n                 }\n-                else if (v > 10.0f) {\n+                else if (floatVersion > 10.0f) {\n                     return JavaVersion.JAVA_RECENT;\n                 }\n                 return null;\n             }\n         }\n     }\n     \n     @Override\n     public String toString() {\n         return this.name;\n     }\n     \n     private static float maxVersion() {\n-        final float v = toFloatVersion(System.getProperty(\"java.specification.version\", \"99.0\"));\n-        if (v > 0.0f) {\n-            return v;\n+        final float floatVersion = toFloatVersion(System.getProperty(\"java.specification.version\", \"99.0\"));\n+        if (floatVersion > 0.0f) {\n+            return floatVersion;\n         }\n         return 99.0f;\n     }\n     \n-    private static float toFloatVersion(final String value) {\n-        final int defaultReturnValue = -1;\n-        if (!value.contains(\".\")) {\n-            return NumberUtils.toFloat(value, -1.0f);\n-        }\n-        final String[] toParse = value.split(\"\\\\.\");\n-        if (toParse.length >= 2) {\n-            return NumberUtils.toFloat(toParse[0] + '.' + toParse[1], -1.0f);\n+    private static float toFloatVersion(final String s) {\n+        if (!s.contains(\".\")) {\n+            return NumberUtils.toFloat(s, -1.0f);\n+        }\n+        final String[] split = s.split(\"\\\\.\");\n+        if (split.length >= 2) {\n+            return NumberUtils.toFloat(split[0] + '.' + split[1], -1.0f);\n         }\n         return -1.0f;\n     }\n }\n"}]}
