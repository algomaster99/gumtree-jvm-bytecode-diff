{"diffoscope-json-version": 1, "source1": "first/QuotedPrintableCodec.class", "source2": "second/QuotedPrintableCodec.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -28,16 +28,16 @@\n     private static final byte LF = 10;\n     private static final int SAFE_LENGTH = 73;\n     \n     public QuotedPrintableCodec() {\n         this(StandardCharsets.UTF_8, false);\n     }\n     \n-    public QuotedPrintableCodec(final boolean strict) {\n-        this(StandardCharsets.UTF_8, strict);\n+    public QuotedPrintableCodec(final boolean b) {\n+        this(StandardCharsets.UTF_8, b);\n     }\n     \n     public QuotedPrintableCodec(final Charset charset) {\n         this(charset, false);\n     }\n     \n     public QuotedPrintableCodec(final Charset charset, final boolean strict) {\n@@ -45,212 +45,206 @@\n         this.strict = strict;\n     }\n     \n     public QuotedPrintableCodec(final String charsetName) throws IllegalCharsetNameException, IllegalArgumentException, UnsupportedCharsetException {\n         this(Charset.forName(charsetName), false);\n     }\n     \n-    private static final int encodeQuotedPrintable(final int b, final ByteArrayOutputStream buffer) {\n-        buffer.write(61);\n-        final char hex1 = Utils.hexDigit(b >> 4);\n-        final char hex2 = Utils.hexDigit(b);\n-        buffer.write(hex1);\n-        buffer.write(hex2);\n+    private static final int encodeQuotedPrintable(final int n, final ByteArrayOutputStream byteArrayOutputStream) {\n+        byteArrayOutputStream.write(61);\n+        final char hexDigit = Utils.hexDigit(n >> 4);\n+        final char hexDigit2 = Utils.hexDigit(n);\n+        byteArrayOutputStream.write(hexDigit);\n+        byteArrayOutputStream.write(hexDigit2);\n         return 3;\n     }\n     \n-    private static int getUnsignedOctet(final int index, final byte[] bytes) {\n-        int b = bytes[index];\n-        if (b < 0) {\n-            b += 256;\n+    private static int getUnsignedOctet(final int n, final byte[] array) {\n+        int n2 = array[n];\n+        if (n2 < 0) {\n+            n2 += 256;\n         }\n-        return b;\n+        return n2;\n     }\n     \n-    private static int encodeByte(final int b, final boolean encode, final ByteArrayOutputStream buffer) {\n-        if (encode) {\n-            return encodeQuotedPrintable(b, buffer);\n+    private static int encodeByte(final int b, final boolean b2, final ByteArrayOutputStream byteArrayOutputStream) {\n+        if (b2) {\n+            return encodeQuotedPrintable(b, byteArrayOutputStream);\n         }\n-        buffer.write(b);\n+        byteArrayOutputStream.write(b);\n         return 1;\n     }\n     \n-    private static boolean isWhitespace(final int b) {\n-        return b == 32 || b == 9;\n+    private static boolean isWhitespace(final int n) {\n+        return n == 32 || n == 9;\n     }\n     \n-    public static final byte[] encodeQuotedPrintable(final BitSet printable, final byte[] bytes) {\n-        return encodeQuotedPrintable(printable, bytes, false);\n+    public static final byte[] encodeQuotedPrintable(final BitSet set, final byte[] array) {\n+        return encodeQuotedPrintable(set, array, false);\n     }\n     \n-    public static final byte[] encodeQuotedPrintable(BitSet printable, final byte[] bytes, final boolean strict) {\n-        if (bytes == null) {\n+    public static final byte[] encodeQuotedPrintable(BitSet printable_CHARS, final byte[] array, final boolean b) {\n+        if (array == null) {\n             return null;\n         }\n-        if (printable == null) {\n-            printable = QuotedPrintableCodec.PRINTABLE_CHARS;\n+        if (printable_CHARS == null) {\n+            printable_CHARS = QuotedPrintableCodec.PRINTABLE_CHARS;\n         }\n-        final ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n-        if (strict) {\n-            int pos = 1;\n-            for (int i = 0; i < bytes.length - 3; ++i) {\n-                final int b = getUnsignedOctet(i, bytes);\n-                if (pos < 73) {\n-                    pos += encodeByte(b, !printable.get(b), buffer);\n+        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+        if (b) {\n+            int n = 1;\n+            for (int i = 0; i < array.length - 3; ++i) {\n+                final int unsignedOctet = getUnsignedOctet(i, array);\n+                if (n < 73) {\n+                    n += encodeByte(unsignedOctet, !printable_CHARS.get(unsignedOctet), byteArrayOutputStream);\n                 }\n                 else {\n-                    encodeByte(b, !printable.get(b) || isWhitespace(b), buffer);\n-                    buffer.write(61);\n-                    buffer.write(13);\n-                    buffer.write(10);\n-                    pos = 1;\n-                }\n-            }\n-            int b2 = getUnsignedOctet(bytes.length - 3, bytes);\n-            boolean encode = !printable.get(b2) || (isWhitespace(b2) && pos > 68);\n-            pos += encodeByte(b2, encode, buffer);\n-            if (pos > 71) {\n-                buffer.write(61);\n-                buffer.write(13);\n-                buffer.write(10);\n-            }\n-            for (int j = bytes.length - 2; j < bytes.length; ++j) {\n-                b2 = getUnsignedOctet(j, bytes);\n-                encode = (!printable.get(b2) || (j > bytes.length - 2 && isWhitespace(b2)));\n-                encodeByte(b2, encode, buffer);\n+                    encodeByte(unsignedOctet, !printable_CHARS.get(unsignedOctet) || isWhitespace(unsignedOctet), byteArrayOutputStream);\n+                    byteArrayOutputStream.write(61);\n+                    byteArrayOutputStream.write(13);\n+                    byteArrayOutputStream.write(10);\n+                    n = 1;\n+                }\n+            }\n+            final int unsignedOctet2 = getUnsignedOctet(array.length - 3, array);\n+            if (n + encodeByte(unsignedOctet2, !printable_CHARS.get(unsignedOctet2) || (isWhitespace(unsignedOctet2) && n > 68), byteArrayOutputStream) > 71) {\n+                byteArrayOutputStream.write(61);\n+                byteArrayOutputStream.write(13);\n+                byteArrayOutputStream.write(10);\n+            }\n+            for (int j = array.length - 2; j < array.length; ++j) {\n+                final int unsignedOctet3 = getUnsignedOctet(j, array);\n+                encodeByte(unsignedOctet3, !printable_CHARS.get(unsignedOctet3) || (j > array.length - 2 && isWhitespace(unsignedOctet3)), byteArrayOutputStream);\n             }\n         }\n         else {\n-            for (int b3 : bytes) {\n-                final byte c = (byte)b3;\n-                if (b3 < 0) {\n-                    b3 += 256;\n+            for (int n2 : array) {\n+                if (n2 < 0) {\n+                    n2 += 256;\n                 }\n-                if (printable.get(b3)) {\n-                    buffer.write(b3);\n+                if (printable_CHARS.get(n2)) {\n+                    byteArrayOutputStream.write(n2);\n                 }\n                 else {\n-                    encodeQuotedPrintable(b3, buffer);\n+                    encodeQuotedPrintable(n2, byteArrayOutputStream);\n                 }\n             }\n         }\n-        return buffer.toByteArray();\n+        return byteArrayOutputStream.toByteArray();\n     }\n     \n-    public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws DecoderException {\n-        if (bytes == null) {\n+    public static final byte[] decodeQuotedPrintable(final byte[] array) throws DecoderException {\n+        if (array == null) {\n             return null;\n         }\n-        final ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n-        for (int i = 0; i < bytes.length; ++i) {\n-            final int b = bytes[i];\n+        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+        for (int i = 0; i < array.length; ++i) {\n+            final byte b = array[i];\n             if (b == 61) {\n                 try {\n-                    if (bytes[++i] == 13) {\n+                    if (array[++i] == 13) {\n                         continue;\n                     }\n-                    final int u = Utils.digit16(bytes[i]);\n-                    final int l = Utils.digit16(bytes[++i]);\n-                    buffer.write((u << 4) + l);\n+                    byteArrayOutputStream.write((Utils.digit16(array[i]) << 4) + Utils.digit16(array[++i]));\n                     continue;\n                 }\n-                catch (final ArrayIndexOutOfBoundsException e) {\n-                    throw new DecoderException(\"Invalid quoted-printable encoding\", (Throwable)e);\n+                catch (final ArrayIndexOutOfBoundsException ex) {\n+                    throw new DecoderException(\"Invalid quoted-printable encoding\", (Throwable)ex);\n                 }\n             }\n             if (b != 13 && b != 10) {\n-                buffer.write(b);\n+                byteArrayOutputStream.write(b);\n             }\n         }\n-        return buffer.toByteArray();\n+        return byteArrayOutputStream.toByteArray();\n     }\n     \n-    public byte[] encode(final byte[] bytes) {\n-        return encodeQuotedPrintable(QuotedPrintableCodec.PRINTABLE_CHARS, bytes, this.strict);\n+    public byte[] encode(final byte[] array) {\n+        return encodeQuotedPrintable(QuotedPrintableCodec.PRINTABLE_CHARS, array, this.strict);\n     }\n     \n-    public byte[] decode(final byte[] bytes) throws DecoderException {\n-        return decodeQuotedPrintable(bytes);\n+    public byte[] decode(final byte[] array) throws DecoderException {\n+        return decodeQuotedPrintable(array);\n     }\n     \n-    public String encode(final String sourceStr) throws EncoderException {\n-        return this.encode(sourceStr, this.getCharset());\n+    public String encode(final String s) throws EncoderException {\n+        return this.encode(s, this.getCharset());\n     }\n     \n-    public String decode(final String sourceStr, final Charset sourceCharset) throws DecoderException {\n-        if (sourceStr == null) {\n+    public String decode(final String s, final Charset charset) throws DecoderException {\n+        if (s == null) {\n             return null;\n         }\n-        return new String(this.decode(StringUtils.getBytesUsAscii(sourceStr)), sourceCharset);\n+        return new String(this.decode(StringUtils.getBytesUsAscii(s)), charset);\n     }\n     \n-    public String decode(final String sourceStr, final String sourceCharset) throws DecoderException, UnsupportedEncodingException {\n-        if (sourceStr == null) {\n+    public String decode(final String s, final String charsetName) throws DecoderException, UnsupportedEncodingException {\n+        if (s == null) {\n             return null;\n         }\n-        return new String(this.decode(StringUtils.getBytesUsAscii(sourceStr)), sourceCharset);\n+        return new String(this.decode(StringUtils.getBytesUsAscii(s)), charsetName);\n     }\n     \n-    public String decode(final String sourceStr) throws DecoderException {\n-        return this.decode(sourceStr, this.getCharset());\n+    public String decode(final String s) throws DecoderException {\n+        return this.decode(s, this.getCharset());\n     }\n     \n-    public Object encode(final Object obj) throws EncoderException {\n-        if (obj == null) {\n+    public Object encode(final Object o) throws EncoderException {\n+        if (o == null) {\n             return null;\n         }\n-        if (obj instanceof byte[]) {\n-            return this.encode((byte[])obj);\n+        if (o instanceof byte[]) {\n+            return this.encode((byte[])o);\n         }\n-        if (obj instanceof String) {\n-            return this.encode((String)obj);\n+        if (o instanceof String) {\n+            return this.encode((String)o);\n         }\n-        throw new EncoderException(\"Objects of type \" + obj.getClass().getName() + \" cannot be quoted-printable encoded\");\n+        throw new EncoderException(\"Objects of type \" + o.getClass().getName() + \" cannot be quoted-printable encoded\");\n     }\n     \n-    public Object decode(final Object obj) throws DecoderException {\n-        if (obj == null) {\n+    public Object decode(final Object o) throws DecoderException {\n+        if (o == null) {\n             return null;\n         }\n-        if (obj instanceof byte[]) {\n-            return this.decode((byte[])obj);\n+        if (o instanceof byte[]) {\n+            return this.decode((byte[])o);\n         }\n-        if (obj instanceof String) {\n-            return this.decode((String)obj);\n+        if (o instanceof String) {\n+            return this.decode((String)o);\n         }\n-        throw new DecoderException(\"Objects of type \" + obj.getClass().getName() + \" cannot be quoted-printable decoded\");\n+        throw new DecoderException(\"Objects of type \" + o.getClass().getName() + \" cannot be quoted-printable decoded\");\n     }\n     \n     public Charset getCharset() {\n         return this.charset;\n     }\n     \n     public String getDefaultCharset() {\n         return this.charset.name();\n     }\n     \n-    public String encode(final String sourceStr, final Charset sourceCharset) {\n-        if (sourceStr == null) {\n+    public String encode(final String s, final Charset charset) {\n+        if (s == null) {\n             return null;\n         }\n-        return StringUtils.newStringUsAscii(this.encode(sourceStr.getBytes(sourceCharset)));\n+        return StringUtils.newStringUsAscii(this.encode(s.getBytes(charset)));\n     }\n     \n-    public String encode(final String sourceStr, final String sourceCharset) throws UnsupportedEncodingException {\n-        if (sourceStr == null) {\n+    public String encode(final String s, final String charsetName) throws UnsupportedEncodingException {\n+        if (s == null) {\n             return null;\n         }\n-        return StringUtils.newStringUsAscii(this.encode(sourceStr.getBytes(sourceCharset)));\n+        return StringUtils.newStringUsAscii(this.encode(s.getBytes(charsetName)));\n     }\n     \n     static {\n         PRINTABLE_CHARS = new BitSet(256);\n         for (int i = 33; i <= 60; ++i) {\n             QuotedPrintableCodec.PRINTABLE_CHARS.set(i);\n         }\n-        for (int i = 62; i <= 126; ++i) {\n-            QuotedPrintableCodec.PRINTABLE_CHARS.set(i);\n+        for (int j = 62; j <= 126; ++j) {\n+            QuotedPrintableCodec.PRINTABLE_CHARS.set(j);\n         }\n         QuotedPrintableCodec.PRINTABLE_CHARS.set(9);\n         QuotedPrintableCodec.PRINTABLE_CHARS.set(32);\n     }\n }\n"}]}
