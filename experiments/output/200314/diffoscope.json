{"diffoscope-json-version": 1, "source1": "first/ControlFlowGraph$InstructionContextImpl.class", "source2": "second/ControlFlowGraph$InstructionContextImpl.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -24,173 +24,168 @@\n {\n     private int TAG;\n     private final InstructionHandle instruction;\n     private final Map<InstructionContext, Frame> inFrames;\n     private final Map<InstructionContext, Frame> outFrames;\n     private List<InstructionContext> executionPredecessors;\n     \n-    public InstructionContextImpl(final ControlFlowGraph this$0, final InstructionHandle inst) {\n+    public InstructionContextImpl(final ControlFlowGraph this$0, final InstructionHandle instruction) {\n         this.this$0 = this$0;\n-        if (inst == null) {\n+        if (instruction == null) {\n             throw new AssertionViolatedException(\"Cannot instantiate InstructionContextImpl from NULL.\");\n         }\n-        this.instruction = inst;\n+        this.instruction = instruction;\n         this.inFrames = new HashMap();\n         this.outFrames = new HashMap();\n     }\n     \n     private InstructionHandle[] _getSuccessors() {\n-        final InstructionHandle[] single = { null };\n-        final Instruction inst = this.getInstruction().getInstruction();\n-        if (inst instanceof RET) {\n-            final Subroutine s = ControlFlowGraph.access$000(this.this$0).subroutineOf(this.getInstruction());\n-            if (s == null) {\n+        final InstructionHandle[] array = { null };\n+        final Instruction instruction = this.getInstruction().getInstruction();\n+        if (instruction instanceof RET) {\n+            final Subroutine subroutine = ControlFlowGraph.access$000(this.this$0).subroutineOf(this.getInstruction());\n+            if (subroutine == null) {\n                 throw new AssertionViolatedException(\"Asking for successors of a RET in dead code?!\");\n             }\n-            final InstructionHandle[] jsrs = s.getEnteringJsrInstructions();\n-            final InstructionHandle[] ret = new InstructionHandle[jsrs.length];\n-            Arrays.setAll(ret, InstructionContextImpl::lambda$_getSuccessors$0);\n-            return ret;\n+            final InstructionHandle[] enteringJsrInstructions = subroutine.getEnteringJsrInstructions();\n+            final InstructionHandle[] array2 = new InstructionHandle[enteringJsrInstructions.length];\n+            Arrays.setAll(array2, InstructionContextImpl::lambda$_getSuccessors$0);\n+            return array2;\n         }\n         else {\n-            if (inst instanceof ReturnInstruction || inst instanceof ATHROW) {\n+            if (instruction instanceof ReturnInstruction || instruction instanceof ATHROW) {\n                 return InstructionHandle.EMPTY_ARRAY;\n             }\n-            if (inst instanceof JsrInstruction) {\n-                single[0] = ((JsrInstruction)inst).getTarget();\n-                return single;\n+            if (instruction instanceof JsrInstruction) {\n+                array[0] = ((JsrInstruction)instruction).getTarget();\n+                return array;\n             }\n-            if (inst instanceof GotoInstruction) {\n-                single[0] = ((GotoInstruction)inst).getTarget();\n-                return single;\n+            if (instruction instanceof GotoInstruction) {\n+                array[0] = ((GotoInstruction)instruction).getTarget();\n+                return array;\n             }\n-            if (!(inst instanceof BranchInstruction)) {\n-                single[0] = this.getInstruction().getNext();\n-                return single;\n+            if (!(instruction instanceof BranchInstruction)) {\n+                array[0] = this.getInstruction().getNext();\n+                return array;\n             }\n-            if (inst instanceof Select) {\n-                final InstructionHandle[] matchTargets = ((Select)inst).getTargets();\n-                final InstructionHandle[] ret2 = new InstructionHandle[matchTargets.length + 1];\n-                ret2[0] = ((Select)inst).getTarget();\n-                System.arraycopy(matchTargets, 0, ret2, 1, matchTargets.length);\n-                return ret2;\n+            if (instruction instanceof Select) {\n+                final InstructionHandle[] targets = ((Select)instruction).getTargets();\n+                final InstructionHandle[] array3 = new InstructionHandle[targets.length + 1];\n+                array3[0] = ((Select)instruction).getTarget();\n+                System.arraycopy(targets, 0, array3, 1, targets.length);\n+                return array3;\n             }\n-            final InstructionHandle[] pair = { this.getInstruction().getNext(), ((BranchInstruction)inst).getTarget() };\n-            return pair;\n+            return new InstructionHandle[] { this.getInstruction().getNext(), ((BranchInstruction)instruction).getTarget() };\n         }\n     }\n     \n-    public boolean execute(final Frame inFrame, final ArrayList<InstructionContext> execPreds, final InstConstraintVisitor icv, final ExecutionVisitor ev) {\n-        final List<InstructionContext> clone = (List)execPreds.clone();\n-        this.executionPredecessors = clone;\n+    public boolean execute(final Frame frame, final ArrayList<InstructionContext> list, final InstConstraintVisitor instConstraintVisitor, final ExecutionVisitor executionVisitor) {\n+        this.executionPredecessors = (List)list.clone();\n         if ((this.lastExecutionJSR() == null && ControlFlowGraph.access$000(this.this$0).subroutineOf(this.getInstruction()) != ControlFlowGraph.access$000(this.this$0).getTopLevel()) || (this.lastExecutionJSR() != null && ControlFlowGraph.access$000(this.this$0).subroutineOf(this.getInstruction()) == ControlFlowGraph.access$000(this.this$0).getTopLevel())) {\n             throw new AssertionViolatedException(\"Huh?! Am I '\" + this + \"' part of a subroutine or not?\");\n         }\n-        Frame inF = (Frame)this.inFrames.get(this.lastExecutionJSR());\n-        if (inF == null) {\n-            this.inFrames.put(this.lastExecutionJSR(), inFrame);\n-            inF = inFrame;\n+        Frame frame2 = (Frame)this.inFrames.get(this.lastExecutionJSR());\n+        if (frame2 == null) {\n+            this.inFrames.put(this.lastExecutionJSR(), frame);\n+            frame2 = frame;\n         }\n-        else if (inF.equals((Object)inFrame) || !this.mergeInFrames(inFrame)) {\n+        else if (frame2.equals((Object)frame) || !this.mergeInFrames(frame)) {\n             return false;\n         }\n-        final Frame workingFrame = inF.getClone();\n+        final Frame clone = frame2.getClone();\n         try {\n-            icv.setFrame(workingFrame);\n-            this.getInstruction().accept((Visitor)icv);\n+            instConstraintVisitor.setFrame(clone);\n+            this.getInstruction().accept((Visitor)instConstraintVisitor);\n         }\n-        catch (final StructuralCodeConstraintException ce) {\n-            ce.extendMessage(\"\", \"\\nInstructionHandle: \" + this.getInstruction() + \"\\n\");\n-            ce.extendMessage(\"\", \"\\nExecution Frame:\\n\" + workingFrame);\n-            this.extendMessageWithFlow(ce);\n-            throw ce;\n-        }\n-        ev.setFrame(workingFrame);\n-        this.getInstruction().accept((Visitor)ev);\n-        this.outFrames.put(this.lastExecutionJSR(), workingFrame);\n+        catch (final StructuralCodeConstraintException ex) {\n+            ex.extendMessage(\"\", \"\\nInstructionHandle: \" + this.getInstruction() + \"\\n\");\n+            ex.extendMessage(\"\", \"\\nExecution Frame:\\n\" + clone);\n+            this.extendMessageWithFlow(ex);\n+            throw ex;\n+        }\n+        executionVisitor.setFrame(clone);\n+        this.getInstruction().accept((Visitor)executionVisitor);\n+        this.outFrames.put(this.lastExecutionJSR(), clone);\n         return true;\n     }\n     \n-    private void extendMessageWithFlow(final StructuralCodeConstraintException e) {\n-        final String s = \"Execution flow:\\n\";\n-        e.extendMessage(\"\", \"Execution flow:\\n\" + this.getExecutionChain());\n+    private void extendMessageWithFlow(final StructuralCodeConstraintException ex) {\n+        ex.extendMessage(\"\", \"Execution flow:\\n\" + this.getExecutionChain());\n     }\n     \n     public ExceptionHandler[] getExceptionHandlers() {\n         return ControlFlowGraph.access$100(this.this$0).getExceptionHandlers(this.getInstruction());\n     }\n     \n     private String getExecutionChain() {\n-        final StringBuilder s = new StringBuilder(this.toString());\n+        final StringBuilder sb = new StringBuilder(this.toString());\n         for (int i = this.executionPredecessors.size() - 1; i >= 0; --i) {\n-            s.insert(0, this.executionPredecessors.get(i) + \"\\n\");\n+            sb.insert(0, this.executionPredecessors.get(i) + \"\\n\");\n         }\n-        return s.toString();\n+        return sb.toString();\n     }\n     \n     public Frame getInFrame() {\n-        final InstructionContext jsr = (InstructionContext)this.lastExecutionJSR();\n-        final Frame org = (Frame)this.inFrames.get(jsr);\n-        if (org == null) {\n+        final Frame frame = (Frame)this.inFrames.get(this.lastExecutionJSR());\n+        if (frame == null) {\n             throw new AssertionViolatedException(\"inFrame not set! This:\\n\" + this + \"\\nInFrames: '\" + this.inFrames + \"'.\");\n         }\n-        return org.getClone();\n+        return frame.getClone();\n     }\n     \n     public InstructionHandle getInstruction() {\n         return this.instruction;\n     }\n     \n-    public Frame getOutFrame(final ArrayList<InstructionContext> execChain) {\n-        this.executionPredecessors = execChain;\n-        final InstructionContext jsr = (InstructionContext)this.lastExecutionJSR();\n-        final Frame org = (Frame)this.outFrames.get(jsr);\n-        if (org == null) {\n+    public Frame getOutFrame(final ArrayList<InstructionContext> executionPredecessors) {\n+        this.executionPredecessors = executionPredecessors;\n+        final Frame frame = (Frame)this.outFrames.get(this.lastExecutionJSR());\n+        if (frame == null) {\n             throw new AssertionViolatedException(\"outFrame not set! This:\\n\" + this + \"\\nExecutionChain: \" + this.getExecutionChain() + \"\\nOutFrames: '\" + this.outFrames + \"'.\");\n         }\n-        return org.getClone();\n+        return frame.getClone();\n     }\n     \n     public InstructionContext[] getSuccessors() {\n         return this.this$0.contextsOf(this._getSuccessors());\n     }\n     \n     public int getTag() {\n         return this.TAG;\n     }\n     \n     private InstructionContextImpl lastExecutionJSR() {\n         final int size = this.executionPredecessors.size();\n-        int retcount = 0;\n+        int n = 0;\n         for (int i = size - 1; i >= 0; --i) {\n-            final InstructionContextImpl current = (InstructionContextImpl)this.executionPredecessors.get(i);\n-            final Instruction currentlast = current.getInstruction().getInstruction();\n-            if (currentlast instanceof RET) {\n-                ++retcount;\n+            final InstructionContextImpl instructionContextImpl = (InstructionContextImpl)this.executionPredecessors.get(i);\n+            final Instruction instruction = instructionContextImpl.getInstruction().getInstruction();\n+            if (instruction instanceof RET) {\n+                ++n;\n             }\n-            if (currentlast instanceof JsrInstruction && --retcount == -1) {\n-                return current;\n+            if (instruction instanceof JsrInstruction && --n == -1) {\n+                return instructionContextImpl;\n             }\n         }\n         return null;\n     }\n     \n-    private boolean mergeInFrames(final Frame inFrame) {\n-        final Frame inF = (Frame)this.inFrames.get(this.lastExecutionJSR());\n-        final OperandStack oldstack = inF.getStack().getClone();\n-        final LocalVariables oldlocals = inF.getLocals().getClone();\n+    private boolean mergeInFrames(final Frame frame) {\n+        final Frame frame2 = (Frame)this.inFrames.get(this.lastExecutionJSR());\n+        final OperandStack clone = frame2.getStack().getClone();\n+        final LocalVariables clone2 = frame2.getLocals().getClone();\n         try {\n-            inF.getStack().merge(inFrame.getStack());\n-            inF.getLocals().merge(inFrame.getLocals());\n+            frame2.getStack().merge(frame.getStack());\n+            frame2.getLocals().merge(frame.getLocals());\n         }\n-        catch (final StructuralCodeConstraintException sce) {\n-            this.extendMessageWithFlow(sce);\n-            throw sce;\n+        catch (final StructuralCodeConstraintException ex) {\n+            this.extendMessageWithFlow(ex);\n+            throw ex;\n         }\n-        return !oldstack.equals((Object)inF.getStack()) || !oldlocals.equals((Object)inF.getLocals());\n+        return !clone.equals((Object)frame2.getStack()) || !clone2.equals((Object)frame2.getLocals());\n     }\n     \n     public void setTag(final int tag) {\n         this.TAG = tag;\n     }\n     \n     @Override\n"}]}
