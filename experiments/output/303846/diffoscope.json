{"diffoscope-json-version": 1, "source1": "first/BeforeExecutionExclusionFileFilter.class", "source2": "second/BeforeExecutionExclusionFileFilter.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,53 +1,53 @@\n-  SHA-256 checksum d587ca59d9cc0be90c643c54697c34e7d1fbb928225c4315fd9631409cb15558\n+  SHA-256 checksum 738e15b93a9c3b498dfe629a7455e4f318d55533b12fd54a2eb4243ec78f02ca\n   Compiled from \"BeforeExecutionExclusionFileFilter.java\"\n public final class com.puppycrawl.tools.checkstyle.filefilters.BeforeExecutionExclusionFileFilter extends com.puppycrawl.tools.checkstyle.AbstractAutomaticBean implements com.puppycrawl.tools.checkstyle.api.BeforeExecutionFileFilter\n   minor version: 0\n   major version: 55\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n-  this_class: #5                          // com/puppycrawl/tools/checkstyle/filefilters/BeforeExecutionExclusionFileFilter\n-  super_class: #6                         // com/puppycrawl/tools/checkstyle/AbstractAutomaticBean\n+  this_class: #8                          // com/puppycrawl/tools/checkstyle/filefilters/BeforeExecutionExclusionFileFilter\n+  super_class: #2                         // com/puppycrawl/tools/checkstyle/AbstractAutomaticBean\n   interfaces: 1, fields: 1, methods: 4, attributes: 1\n Constant pool:\n-   #1 = Methodref          #6.#22         // com/puppycrawl/tools/checkstyle/AbstractAutomaticBean.\"<init>\":()V\n-   #2 = Fieldref           #5.#23         // com/puppycrawl/tools/checkstyle/filefilters/BeforeExecutionExclusionFileFilter.fileNamePattern:Ljava/util/regex/Pattern;\n-   #3 = Methodref          #24.#25        // java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-   #4 = Methodref          #26.#27        // java/util/regex/Matcher.find:()Z\n-   #5 = Class              #28            // com/puppycrawl/tools/checkstyle/filefilters/BeforeExecutionExclusionFileFilter\n-   #6 = Class              #29            // com/puppycrawl/tools/checkstyle/AbstractAutomaticBean\n-   #7 = Class              #30            // com/puppycrawl/tools/checkstyle/api/BeforeExecutionFileFilter\n-   #8 = Utf8               fileNamePattern\n-   #9 = Utf8               Ljava/util/regex/Pattern;\n-  #10 = Utf8               <init>\n-  #11 = Utf8               ()V\n-  #12 = Utf8               Code\n-  #13 = Utf8               LineNumberTable\n-  #14 = Utf8               setFileNamePattern\n-  #15 = Utf8               (Ljava/util/regex/Pattern;)V\n-  #16 = Utf8               finishLocalSetup\n-  #17 = Utf8               accept\n-  #18 = Utf8               (Ljava/lang/String;)Z\n-  #19 = Utf8               StackMapTable\n-  #20 = Utf8               SourceFile\n-  #21 = Utf8               BeforeExecutionExclusionFileFilter.java\n-  #22 = NameAndType        #10:#11        // \"<init>\":()V\n-  #23 = NameAndType        #8:#9          // fileNamePattern:Ljava/util/regex/Pattern;\n-  #24 = Class              #31            // java/util/regex/Pattern\n-  #25 = NameAndType        #32:#33        // matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-  #26 = Class              #34            // java/util/regex/Matcher\n-  #27 = NameAndType        #35:#36        // find:()Z\n-  #28 = Utf8               com/puppycrawl/tools/checkstyle/filefilters/BeforeExecutionExclusionFileFilter\n-  #29 = Utf8               com/puppycrawl/tools/checkstyle/AbstractAutomaticBean\n-  #30 = Utf8               com/puppycrawl/tools/checkstyle/api/BeforeExecutionFileFilter\n-  #31 = Utf8               java/util/regex/Pattern\n-  #32 = Utf8               matcher\n-  #33 = Utf8               (Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-  #34 = Utf8               java/util/regex/Matcher\n-  #35 = Utf8               find\n-  #36 = Utf8               ()Z\n+   #1 = Methodref          #2.#3          // com/puppycrawl/tools/checkstyle/AbstractAutomaticBean.\"<init>\":()V\n+   #2 = Class              #4             // com/puppycrawl/tools/checkstyle/AbstractAutomaticBean\n+   #3 = NameAndType        #5:#6          // \"<init>\":()V\n+   #4 = Utf8               com/puppycrawl/tools/checkstyle/AbstractAutomaticBean\n+   #5 = Utf8               <init>\n+   #6 = Utf8               ()V\n+   #7 = Fieldref           #8.#9          // com/puppycrawl/tools/checkstyle/filefilters/BeforeExecutionExclusionFileFilter.fileNamePattern:Ljava/util/regex/Pattern;\n+   #8 = Class              #10            // com/puppycrawl/tools/checkstyle/filefilters/BeforeExecutionExclusionFileFilter\n+   #9 = NameAndType        #11:#12        // fileNamePattern:Ljava/util/regex/Pattern;\n+  #10 = Utf8               com/puppycrawl/tools/checkstyle/filefilters/BeforeExecutionExclusionFileFilter\n+  #11 = Utf8               fileNamePattern\n+  #12 = Utf8               Ljava/util/regex/Pattern;\n+  #13 = Methodref          #14.#15        // java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+  #14 = Class              #16            // java/util/regex/Pattern\n+  #15 = NameAndType        #17:#18        // matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+  #16 = Utf8               java/util/regex/Pattern\n+  #17 = Utf8               matcher\n+  #18 = Utf8               (Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+  #19 = Methodref          #20.#21        // java/util/regex/Matcher.find:()Z\n+  #20 = Class              #22            // java/util/regex/Matcher\n+  #21 = NameAndType        #23:#24        // find:()Z\n+  #22 = Utf8               java/util/regex/Matcher\n+  #23 = Utf8               find\n+  #24 = Utf8               ()Z\n+  #25 = Class              #26            // com/puppycrawl/tools/checkstyle/api/BeforeExecutionFileFilter\n+  #26 = Utf8               com/puppycrawl/tools/checkstyle/api/BeforeExecutionFileFilter\n+  #27 = Utf8               Code\n+  #28 = Utf8               LineNumberTable\n+  #29 = Utf8               setFileNamePattern\n+  #30 = Utf8               (Ljava/util/regex/Pattern;)V\n+  #31 = Utf8               finishLocalSetup\n+  #32 = Utf8               accept\n+  #33 = Utf8               (Ljava/lang/String;)Z\n+  #34 = Utf8               StackMapTable\n+  #35 = Utf8               SourceFile\n+  #36 = Utf8               BeforeExecutionExclusionFileFilter.java\n {\n   private java.util.regex.Pattern fileNamePattern;\n     descriptor: Ljava/util/regex/Pattern;\n     flags: (0x0002) ACC_PRIVATE\n \n   public com.puppycrawl.tools.checkstyle.filefilters.BeforeExecutionExclusionFileFilter();\n     descriptor: ()V\n@@ -63,15 +63,15 @@\n   public void setFileNamePattern(java.util.regex.Pattern);\n     descriptor: (Ljava/util/regex/Pattern;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: putfield      #2                  // Field fileNamePattern:Ljava/util/regex/Pattern;\n+         2: putfield      #7                  // Field fileNamePattern:Ljava/util/regex/Pattern;\n          5: return\n       LineNumberTable:\n         line 73: 0\n         line 74: 5\n \n   protected void finishLocalSetup();\n     descriptor: ()V\n@@ -84,21 +84,21 @@\n \n   public boolean accept(java.lang.String);\n     descriptor: (Ljava/lang/String;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n-         1: getfield      #2                  // Field fileNamePattern:Ljava/util/regex/Pattern;\n+         1: getfield      #7                  // Field fileNamePattern:Ljava/util/regex/Pattern;\n          4: ifnull        21\n          7: aload_0\n-         8: getfield      #2                  // Field fileNamePattern:Ljava/util/regex/Pattern;\n+         8: getfield      #7                  // Field fileNamePattern:Ljava/util/regex/Pattern;\n         11: aload_1\n-        12: invokevirtual #3                  // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-        15: invokevirtual #4                  // Method java/util/regex/Matcher.find:()Z\n+        12: invokevirtual #13                 // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+        15: invokevirtual #19                 // Method java/util/regex/Matcher.find:()Z\n         18: ifne          25\n         21: iconst_1\n         22: goto          26\n         25: iconst_0\n         26: ireturn\n       LineNumberTable:\n         line 83: 0\n"}]}
