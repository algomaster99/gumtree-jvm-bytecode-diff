{"diffoscope-json-version": 1, "source1": "first/WildcardFileFilter.class", "source2": "second/WildcardFileFilter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,78 +9,80 @@\n \n public class WildcardFileFilter extends AbstractFileFilter implements Serializable\n {\n     private static final long serialVersionUID = -7426486598995782105L;\n     private final String[] wildcards;\n     private final IOCase caseSensitivity;\n     \n-    public WildcardFileFilter(final String wildcard) {\n-        this(wildcard, IOCase.SENSITIVE);\n+    public WildcardFileFilter(final String s) {\n+        this(s, IOCase.SENSITIVE);\n     }\n     \n-    public WildcardFileFilter(final String wildcard, final IOCase caseSensitivity) {\n-        if (wildcard == null) {\n+    public WildcardFileFilter(final String s, final IOCase ioCase) {\n+        if (s == null) {\n             throw new IllegalArgumentException(\"The wildcard must not be null\");\n         }\n-        this.wildcards = new String[] { wildcard };\n-        this.caseSensitivity = ((caseSensitivity == null) ? IOCase.SENSITIVE : caseSensitivity);\n+        this.wildcards = new String[] { s };\n+        this.caseSensitivity = ((ioCase == null) ? IOCase.SENSITIVE : ioCase);\n     }\n     \n-    public WildcardFileFilter(final String... wildcards) {\n-        this(wildcards, IOCase.SENSITIVE);\n+    public WildcardFileFilter(final String... array) {\n+        this(array, IOCase.SENSITIVE);\n     }\n     \n-    public WildcardFileFilter(final String[] wildcards, final IOCase caseSensitivity) {\n-        if (wildcards == null) {\n+    public WildcardFileFilter(final String[] array, final IOCase ioCase) {\n+        if (array == null) {\n             throw new IllegalArgumentException(\"The wildcard array must not be null\");\n         }\n-        System.arraycopy(wildcards, 0, this.wildcards = new String[wildcards.length], 0, wildcards.length);\n-        this.caseSensitivity = ((caseSensitivity == null) ? IOCase.SENSITIVE : caseSensitivity);\n+        System.arraycopy(array, 0, this.wildcards = new String[array.length], 0, array.length);\n+        this.caseSensitivity = ((ioCase == null) ? IOCase.SENSITIVE : ioCase);\n     }\n     \n-    public WildcardFileFilter(final List<String> wildcards) {\n-        this(wildcards, IOCase.SENSITIVE);\n+    public WildcardFileFilter(final List<String> list) {\n+        this(list, IOCase.SENSITIVE);\n     }\n     \n-    public WildcardFileFilter(final List<String> wildcards, final IOCase caseSensitivity) {\n-        if (wildcards == null) {\n+    public WildcardFileFilter(final List<String> list, final IOCase ioCase) {\n+        if (list == null) {\n             throw new IllegalArgumentException(\"The wildcard list must not be null\");\n         }\n-        this.wildcards = wildcards.toArray(WildcardFileFilter.EMPTY_STRING_ARRAY);\n-        this.caseSensitivity = ((caseSensitivity == null) ? IOCase.SENSITIVE : caseSensitivity);\n+        this.wildcards = list.toArray(WildcardFileFilter.EMPTY_STRING_ARRAY);\n+        this.caseSensitivity = ((ioCase == null) ? IOCase.SENSITIVE : ioCase);\n     }\n     \n-    public boolean accept(final File dir, final String name) {\n-        for (final String wildcard : this.wildcards) {\n-            if (FilenameUtils.wildcardMatch(name, wildcard, this.caseSensitivity)) {\n+    public boolean accept(final File file, final String s) {\n+        final String[] wildcards = this.wildcards;\n+        for (int length = wildcards.length, i = 0; i < length; ++i) {\n+            if (FilenameUtils.wildcardMatch(s, wildcards[i], this.caseSensitivity)) {\n                 return true;\n             }\n         }\n         return false;\n     }\n     \n     public boolean accept(final File file) {\n         final String name = file.getName();\n-        for (final String wildcard : this.wildcards) {\n-            if (FilenameUtils.wildcardMatch(name, wildcard, this.caseSensitivity)) {\n+        final String[] wildcards = this.wildcards;\n+        for (int length = wildcards.length, i = 0; i < length; ++i) {\n+            if (FilenameUtils.wildcardMatch(name, wildcards[i], this.caseSensitivity)) {\n                 return true;\n             }\n         }\n         return false;\n     }\n     \n     public String toString() {\n-        final StringBuilder buffer = new StringBuilder();\n-        buffer.append(super.toString());\n-        buffer.append(\"(\");\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(super.toString());\n+        sb.append(\"(\");\n         if (this.wildcards != null) {\n             for (int i = 0; i < this.wildcards.length; ++i) {\n                 if (i > 0) {\n-                    buffer.append(\",\");\n+                    sb.append(\",\");\n                 }\n-                buffer.append(this.wildcards[i]);\n+                sb.append(this.wildcards[i]);\n             }\n         }\n-        buffer.append(\")\");\n-        return buffer.toString();\n+        sb.append(\")\");\n+        return sb.toString();\n     }\n }\n"}]}
