{"diffoscope-json-version": 1, "source1": "first/SevenZFile$ArchiveStatistics.class", "source2": "second/SevenZFile$ArchiveStatistics.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,24 +13,24 @@\n     private long numberOfInStreams;\n     private long numberOfUnpackSubStreams;\n     private int numberOfFolders;\n     private BitSet folderHasCrc;\n     private int numberOfEntries;\n     private int numberOfEntriesWithStream;\n     \n-    void assertValidity(final int maxMemoryLimitInKb) throws IOException {\n+    void assertValidity(final int n) throws IOException {\n         if (this.numberOfEntriesWithStream > 0 && this.numberOfFolders == 0) {\n             throw new IOException(\"archive with entries but no folders\");\n         }\n         if (this.numberOfEntriesWithStream > this.numberOfUnpackSubStreams) {\n             throw new IOException(\"archive doesn't contain enough substreams for entries\");\n         }\n-        final long memoryNeededInKb = this.estimateSize() / 1024L;\n-        if (maxMemoryLimitInKb < memoryNeededInKb) {\n-            throw new MemoryLimitException(memoryNeededInKb, maxMemoryLimitInKb);\n+        final long n2 = this.estimateSize() / 1024L;\n+        if (n < n2) {\n+            throw new MemoryLimitException(n2, n);\n         }\n     }\n     \n     private long bindPairSize() {\n         return 16L;\n     }\n     \n@@ -39,16 +39,15 @@\n     }\n     \n     private long entrySize() {\n         return 100L;\n     }\n     \n     long estimateSize() {\n-        final long lowerBound = 16L * this.numberOfPackedStreams + this.numberOfPackedStreams / 8 + this.numberOfFolders * this.folderSize() + this.numberOfCoders * this.coderSize() + (this.numberOfOutStreams - this.numberOfFolders) * this.bindPairSize() + 8L * (this.numberOfInStreams - this.numberOfOutStreams + this.numberOfFolders) + 8L * this.numberOfOutStreams + this.numberOfEntries * this.entrySize() + this.streamMapSize();\n-        return 2L * lowerBound;\n+        return 2L * (16L * this.numberOfPackedStreams + this.numberOfPackedStreams / 8 + this.numberOfFolders * this.folderSize() + this.numberOfCoders * this.coderSize() + (this.numberOfOutStreams - this.numberOfFolders) * this.bindPairSize() + 8L * (this.numberOfInStreams - this.numberOfOutStreams + this.numberOfFolders) + 8L * this.numberOfOutStreams + this.numberOfEntries * this.entrySize() + this.streamMapSize());\n     }\n     \n     private long folderSize() {\n         return 30L;\n     }\n     \n     private long streamMapSize() {\n"}]}
