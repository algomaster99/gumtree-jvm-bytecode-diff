{"diffoscope-json-version": 1, "source1": "first/Tailer$Builder.class", "source2": "second/Tailer$Builder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,28 +18,32 @@\n     private TailerListener tailerListener;\n     private Duration delayDuration;\n     private boolean end;\n     private boolean reOpen;\n     private boolean startThread;\n     private ExecutorService executorService;\n     \n+    static {\n+        Builder.DEFAULT_DELAY_DURATION = Duration.ofMillis(1000L);\n+    }\n+    \n     public Builder() {\n         this.delayDuration = Builder.DEFAULT_DELAY_DURATION;\n         this.startThread = true;\n         this.executorService = Executors.newSingleThreadExecutor(Builder::newDaemonThread);\n     }\n     \n     private static Thread newDaemonThread(final Runnable runnable) {\n         final Thread thread = new Thread(runnable, \"commons-io-tailer\");\n         thread.setDaemon(true);\n         return thread;\n     }\n     \n     public Tailer get() {\n-        final Tailer tailer = new Tailer(this.tailable, this.getCharset(), this.tailerListener, this.delayDuration, this.end, this.reOpen, this.getBufferSize(), (Tailer.Tailer$1)null);\n+        final Tailer tailer = new Tailer(this.tailable, this.getCharset(), this.tailerListener, this.delayDuration, this.end, this.reOpen, this.getBufferSize(), (Tailer)null);\n         if (this.startThread) {\n             this.executorService.submit((Runnable)tailer);\n         }\n         return tailer;\n     }\n     \n     public Builder setDelayDuration(final Duration delayDuration) {\n@@ -49,15 +53,15 @@\n     \n     public Builder setExecutorService(final ExecutorService executorService) {\n         this.executorService = Objects.requireNonNull(executorService, \"executorService\");\n         return this;\n     }\n     \n     protected Builder setOrigin(final AbstractOrigin<?, ?> origin) {\n-        this.setTailable((Tailer.Tailable)new Tailer.TailablePath(origin.getPath(), new LinkOption[0], (Tailer.Tailer$1)null));\n+        this.setTailable((Tailer.Tailable)new Tailer.TailablePath(origin.getPath(), new LinkOption[0], (Tailer.TailablePath)null));\n         return (Builder)super.setOrigin((AbstractOrigin)origin);\n     }\n     \n     public Builder setReOpen(final boolean reOpen) {\n         this.reOpen = reOpen;\n         return this;\n     }\n@@ -77,12 +81,8 @@\n         return this;\n     }\n     \n     public Builder setTailFromEnd(final boolean end) {\n         this.end = end;\n         return this;\n     }\n-    \n-    static {\n-        Builder.DEFAULT_DELAY_DURATION = Duration.ofMillis(1000L);\n-    }\n }\n"}]}
