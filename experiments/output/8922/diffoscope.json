{"diffoscope-json-version": 1, "source1": "first/XXHash32Test.class", "source2": "second/XXHash32Test.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -43,53 +43,35 @@\n     }\n     \n     @ParameterizedTest\n     @MethodSource({ \"data\" })\n     public void verifyChecksum(final String path, final String c) throws IOException {\n         this.initData(path, c);\n         final XXHash32 h = new XXHash32();\n-        final FileInputStream s = new FileInputStream(this.file);\n-        Throwable x0 = null;\n-        try {\n+        try (final FileInputStream s = new FileInputStream(this.file)) {\n             final byte[] b = toByteArray(s);\n             h.update(b, 0, b.length);\n         }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n-        }\n-        finally {\n-            $closeResource(x0, s);\n-        }\n         Assertions.assertEquals((Object)this.expectedChecksum, (Object)Long.toHexString(h.getValue()), \"checksum for \" + this.file.getName());\n     }\n     \n     @ParameterizedTest\n     @MethodSource({ \"data\" })\n     public void verifyIncrementalChecksum(final String path, final String c) throws IOException {\n         this.initData(path, c);\n         final XXHash32 h = new XXHash32();\n-        final FileInputStream s = new FileInputStream(this.file);\n-        Throwable x0 = null;\n-        try {\n+        try (final FileInputStream s = new FileInputStream(this.file)) {\n             final byte[] b = toByteArray(s);\n             h.update((int)b[0]);\n             h.reset();\n             h.update((int)b[0]);\n             h.update(b, 1, b.length - 2);\n             h.update(b, b.length - 1, 1);\n             h.update(b, 0, -1);\n         }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n-        }\n-        finally {\n-            $closeResource(x0, s);\n-        }\n         Assertions.assertEquals((Object)this.expectedChecksum, (Object)Long.toHexString(h.getValue()), \"checksum for \" + this.file.getName());\n     }\n     \n     private static byte[] toByteArray(final InputStream input) throws IOException {\n         final ByteArrayOutputStream output = new ByteArrayOutputStream();\n         copy(input, output, 10240);\n         return output.toByteArray();\n@@ -101,22 +83,8 @@\n         long count = 0L;\n         while (-1 != (n = input.read(buffer))) {\n             output.write(buffer, 0, n);\n             count += n;\n         }\n         return count;\n     }\n-    \n-    private static /* synthetic */ void $closeResource(final Throwable x0, final AutoCloseable x1) {\n-        if (x0 != null) {\n-            try {\n-                x1.close();\n-            }\n-            catch (final Throwable exception) {\n-                x0.addSuppressed(exception);\n-            }\n-        }\n-        else {\n-            x1.close();\n-        }\n-    }\n }\n"}]}
