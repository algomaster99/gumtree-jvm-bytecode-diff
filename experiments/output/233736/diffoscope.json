{"diffoscope-json-version": 1, "source1": "first/FileBasedConfigurationBuilder.class", "source2": "second/FileBasedConfigurationBuilder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,116 +19,117 @@\n public class FileBasedConfigurationBuilder<T extends FileBasedConfiguration> extends BasicConfigurationBuilder<T>\n {\n     private static final Map<Class<?>, String> DEFAULT_ENCODINGS;\n     private FileHandler currentFileHandler;\n     private AutoSaveListener autoSaveListener;\n     private boolean resetParameters;\n     \n-    public FileBasedConfigurationBuilder(final Class<? extends T> resCls) {\n-        super((Class)resCls);\n+    public FileBasedConfigurationBuilder(final Class<? extends T> clazz) {\n+        super((Class)clazz);\n     }\n     \n-    public FileBasedConfigurationBuilder(final Class<? extends T> resCls, final Map<String, Object> params) {\n-        super((Class)resCls, (Map)params);\n+    public FileBasedConfigurationBuilder(final Class<? extends T> clazz, final Map<String, Object> map) {\n+        super((Class)clazz, (Map)map);\n     }\n     \n-    public FileBasedConfigurationBuilder(final Class<? extends T> resCls, final Map<String, Object> params, final boolean allowFailOnInit) {\n-        super((Class)resCls, (Map)params, allowFailOnInit);\n+    public FileBasedConfigurationBuilder(final Class<? extends T> clazz, final Map<String, Object> map, final boolean b) {\n+        super((Class)clazz, (Map)map, b);\n     }\n     \n-    public static String getDefaultEncoding(final Class<?> configClass) {\n-        String enc = (String)FileBasedConfigurationBuilder.DEFAULT_ENCODINGS.get(configClass);\n-        if (enc != null || configClass == null) {\n-            return enc;\n+    public static String getDefaultEncoding(final Class<?> clazz) {\n+        final String s = (String)FileBasedConfigurationBuilder.DEFAULT_ENCODINGS.get(clazz);\n+        if (s != null || clazz == null) {\n+            return s;\n         }\n-        for (final Class<?> cls : ClassUtils.getAllSuperclasses((Class)configClass)) {\n-            enc = FileBasedConfigurationBuilder.DEFAULT_ENCODINGS.get(cls);\n-            if (enc != null) {\n-                return enc;\n+        final Iterator iterator = ClassUtils.getAllSuperclasses((Class)clazz).iterator();\n+        while (iterator.hasNext()) {\n+            final String s2 = (String)FileBasedConfigurationBuilder.DEFAULT_ENCODINGS.get(iterator.next());\n+            if (s2 != null) {\n+                return s2;\n             }\n         }\n-        for (final Class<?> cls : ClassUtils.getAllInterfaces((Class)configClass)) {\n-            enc = FileBasedConfigurationBuilder.DEFAULT_ENCODINGS.get(cls);\n-            if (enc != null) {\n-                return enc;\n+        final Iterator iterator2 = ClassUtils.getAllInterfaces((Class)clazz).iterator();\n+        while (iterator2.hasNext()) {\n+            final String s3 = (String)FileBasedConfigurationBuilder.DEFAULT_ENCODINGS.get(iterator2.next());\n+            if (s3 != null) {\n+                return s3;\n             }\n         }\n         return null;\n     }\n     \n-    public static void setDefaultEncoding(final Class<?> configClass, final String encoding) {\n-        if (configClass == null) {\n+    public static void setDefaultEncoding(final Class<?> clazz, final String s) {\n+        if (clazz == null) {\n             throw new IllegalArgumentException(\"Configuration class must not be null!\");\n         }\n-        if (encoding == null) {\n-            FileBasedConfigurationBuilder.DEFAULT_ENCODINGS.remove(configClass);\n+        if (s == null) {\n+            FileBasedConfigurationBuilder.DEFAULT_ENCODINGS.remove(clazz);\n         }\n         else {\n-            FileBasedConfigurationBuilder.DEFAULT_ENCODINGS.put(configClass, encoding);\n+            FileBasedConfigurationBuilder.DEFAULT_ENCODINGS.put(clazz, s);\n         }\n     }\n     \n-    public FileBasedConfigurationBuilder<T> configure(final BuilderParameters... params) {\n-        super.configure(params);\n+    public FileBasedConfigurationBuilder<T> configure(final BuilderParameters... array) {\n+        super.configure(array);\n         return this;\n     }\n     \n     public synchronized FileHandler getFileHandler() {\n         return (this.currentFileHandler != null) ? this.currentFileHandler : this.fetchFileHandlerFromParameters();\n     }\n     \n-    public synchronized BasicConfigurationBuilder<T> setParameters(final Map<String, Object> params) {\n-        super.setParameters((Map)params);\n+    public synchronized BasicConfigurationBuilder<T> setParameters(final Map<String, Object> parameters) {\n+        super.setParameters((Map)parameters);\n         this.resetParameters = true;\n         return this;\n     }\n     \n     public void save() throws ConfigurationException {\n         this.getFileHandler().save();\n     }\n     \n     public synchronized boolean isAutoSave() {\n         return this.autoSaveListener != null;\n     }\n     \n-    public synchronized void setAutoSave(final boolean enabled) {\n-        if (enabled) {\n+    public synchronized void setAutoSave(final boolean b) {\n+        if (b) {\n             this.installAutoSaveListener();\n         }\n         else {\n             this.removeAutoSaveListener();\n         }\n     }\n     \n-    protected void initResultInstance(final T obj) throws ConfigurationException {\n-        super.initResultInstance((ImmutableConfiguration)obj);\n-        final FileHandler srcHandler = (this.currentFileHandler != null && !this.resetParameters) ? this.currentFileHandler : this.fetchFileHandlerFromParameters();\n-        this.currentFileHandler = new FileHandler((FileBased)obj, srcHandler);\n+    protected void initResultInstance(final T t) throws ConfigurationException {\n+        super.initResultInstance((ImmutableConfiguration)t);\n+        this.currentFileHandler = new FileHandler((FileBased)t, (this.currentFileHandler != null && !this.resetParameters) ? this.currentFileHandler : this.fetchFileHandlerFromParameters());\n         if (this.autoSaveListener != null) {\n             this.autoSaveListener.updateFileHandler(this.currentFileHandler);\n         }\n         this.initFileHandler(this.currentFileHandler);\n         this.resetParameters = false;\n     }\n     \n-    protected void initFileHandler(final FileHandler handler) throws ConfigurationException {\n-        this.initEncoding(handler);\n-        if (handler.isLocationDefined()) {\n-            handler.locate();\n-            handler.load();\n+    protected void initFileHandler(final FileHandler fileHandler) throws ConfigurationException {\n+        this.initEncoding(fileHandler);\n+        if (fileHandler.isLocationDefined()) {\n+            fileHandler.locate();\n+            fileHandler.load();\n         }\n     }\n     \n     private FileHandler fetchFileHandlerFromParameters() {\n-        FileBasedBuilderParametersImpl fileParams = FileBasedBuilderParametersImpl.fromParameters(this.getParameters(), false);\n-        if (fileParams == null) {\n-            fileParams = new FileBasedBuilderParametersImpl();\n-            this.addParameters(fileParams.getParameters());\n+        FileBasedBuilderParametersImpl fromParameters = FileBasedBuilderParametersImpl.fromParameters(this.getParameters(), false);\n+        if (fromParameters == null) {\n+            fromParameters = new FileBasedBuilderParametersImpl();\n+            this.addParameters(fromParameters.getParameters());\n         }\n-        return fileParams.getFileHandler();\n+        return fromParameters.getFileHandler();\n     }\n     \n     private void installAutoSaveListener() {\n         if (this.autoSaveListener == null) {\n             this.autoSaveListener = new AutoSaveListener(this);\n             this.addEventListener(ConfigurationEvent.ANY, (EventListener)this.autoSaveListener);\n             this.autoSaveListener.updateFileHandler(this.getFileHandler());\n@@ -139,27 +140,27 @@\n         if (this.autoSaveListener != null) {\n             this.removeEventListener(ConfigurationEvent.ANY, (EventListener)this.autoSaveListener);\n             this.autoSaveListener.updateFileHandler((FileHandler)null);\n             this.autoSaveListener = null;\n         }\n     }\n     \n-    private void initEncoding(final FileHandler handler) {\n-        if (StringUtils.isEmpty((CharSequence)handler.getEncoding())) {\n-            final String encoding = getDefaultEncoding(this.getResultClass());\n-            if (encoding != null) {\n-                handler.setEncoding(encoding);\n+    private void initEncoding(final FileHandler fileHandler) {\n+        if (StringUtils.isEmpty((CharSequence)fileHandler.getEncoding())) {\n+            final String defaultEncoding = getDefaultEncoding(this.getResultClass());\n+            if (defaultEncoding != null) {\n+                fileHandler.setEncoding(defaultEncoding);\n             }\n         }\n     }\n     \n     private static Map<Class<?>, String> initializeDefaultEncodings() {\n-        final Map<Class<?>, String> enc = new ConcurrentHashMap<Class<?>, String>();\n-        enc.put(PropertiesConfiguration.class, \"ISO-8859-1\");\n-        enc.put(XMLPropertiesConfiguration.class, \"UTF-8\");\n-        return enc;\n+        final ConcurrentHashMap concurrentHashMap = new ConcurrentHashMap();\n+        concurrentHashMap.put(PropertiesConfiguration.class, \"ISO-8859-1\");\n+        concurrentHashMap.put(XMLPropertiesConfiguration.class, \"UTF-8\");\n+        return concurrentHashMap;\n     }\n     \n     static {\n         DEFAULT_ENCODINGS = initializeDefaultEncodings();\n     }\n }\n"}]}
