{"diffoscope-json-version": 1, "source1": "first/JSONWriter.class", "source2": "second/JSONWriter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,39 +10,39 @@\n     private static final int maxdepth = 200;\n     private boolean comma;\n     protected char mode;\n     private final JSONObject[] stack;\n     private int top;\n     protected Appendable writer;\n     \n-    public JSONWriter(final Appendable w) {\n+    public JSONWriter(final Appendable writer) {\n         this.comma = false;\n         this.mode = 'i';\n         this.stack = new JSONObject[200];\n         this.top = 0;\n-        this.writer = w;\n+        this.writer = writer;\n     }\n     \n-    private JSONWriter append(final String string) throws JSONException {\n-        if (string == null) {\n+    private JSONWriter append(final String s) throws JSONException {\n+        if (s == null) {\n             throw new JSONException(\"Null pointer\");\n         }\n         if (this.mode != 'o') {\n             if (this.mode != 'a') {\n                 throw new JSONException(\"Value out of sequence.\");\n             }\n         }\n         try {\n             if (this.comma && this.mode == 'a') {\n                 this.writer.append(',');\n             }\n-            this.writer.append(string);\n+            this.writer.append(s);\n         }\n-        catch (final IOException e) {\n-            throw new JSONException((Throwable)e);\n+        catch (final IOException ex) {\n+            throw new JSONException((Throwable)ex);\n         }\n         if (this.mode == 'o') {\n             this.mode = 'k';\n         }\n         this.comma = true;\n         return this;\n     }\n@@ -53,59 +53,59 @@\n             this.append(\"[\");\n             this.comma = false;\n             return this;\n         }\n         throw new JSONException(\"Misplaced array.\");\n     }\n     \n-    private JSONWriter end(final char m, final char c) throws JSONException {\n-        if (this.mode != m) {\n-            throw new JSONException((m == 'a') ? \"Misplaced endArray.\" : \"Misplaced endObject.\");\n+    private JSONWriter end(final char c, final char c2) throws JSONException {\n+        if (this.mode != c) {\n+            throw new JSONException((c == 'a') ? \"Misplaced endArray.\" : \"Misplaced endObject.\");\n         }\n-        this.pop(m);\n+        this.pop(c);\n         try {\n-            this.writer.append(c);\n+            this.writer.append(c2);\n         }\n-        catch (final IOException e) {\n-            throw new JSONException((Throwable)e);\n+        catch (final IOException ex) {\n+            throw new JSONException((Throwable)ex);\n         }\n         this.comma = true;\n         return this;\n     }\n     \n     public JSONWriter endArray() throws JSONException {\n         return this.end('a', ']');\n     }\n     \n     public JSONWriter endObject() throws JSONException {\n         return this.end('k', '}');\n     }\n     \n-    public JSONWriter key(final String string) throws JSONException {\n-        if (string == null) {\n+    public JSONWriter key(final String str) throws JSONException {\n+        if (str == null) {\n             throw new JSONException(\"Null key.\");\n         }\n         if (this.mode == 'k') {\n             try {\n-                final JSONObject topObject = this.stack[this.top - 1];\n-                if (topObject.has(string)) {\n-                    throw new JSONException(\"Duplicate key \\\"\" + string + \"\\\"\");\n+                final JSONObject jsonObject = this.stack[this.top - 1];\n+                if (jsonObject.has(str)) {\n+                    throw new JSONException(\"Duplicate key \\\"\" + str + \"\\\"\");\n                 }\n-                topObject.put(string, true);\n+                jsonObject.put(str, true);\n                 if (this.comma) {\n                     this.writer.append(',');\n                 }\n-                this.writer.append(JSONObject.quote(string));\n+                this.writer.append(JSONObject.quote(str));\n                 this.writer.append(':');\n                 this.comma = false;\n                 this.mode = 'o';\n                 return this;\n             }\n-            catch (final IOException e) {\n-                throw new JSONException((Throwable)e);\n+            catch (final IOException ex) {\n+                throw new JSONException((Throwable)ex);\n             }\n         }\n         throw new JSONException(\"Misplaced key.\");\n     }\n     \n     public JSONWriter object() throws JSONException {\n         if (this.mode == 'i') {\n@@ -120,86 +120,83 @@\n         throw new JSONException(\"Misplaced object.\");\n     }\n     \n     private void pop(final char c) throws JSONException {\n         if (this.top <= 0) {\n             throw new JSONException(\"Nesting error.\");\n         }\n-        final char m = (this.stack[this.top - 1] == null) ? 'a' : 'k';\n-        if (m != c) {\n+        if (((this.stack[this.top - 1] == null) ? 'a' : 'k') != c) {\n             throw new JSONException(\"Nesting error.\");\n         }\n         --this.top;\n         this.mode = ((this.top == 0) ? 'd' : ((this.stack[this.top - 1] == null) ? 'a' : 'k'));\n     }\n     \n-    private void push(final JSONObject jo) throws JSONException {\n+    private void push(final JSONObject jsonObject) throws JSONException {\n         if (this.top >= 200) {\n             throw new JSONException(\"Nesting too deep.\");\n         }\n-        this.stack[this.top] = jo;\n-        this.mode = ((jo == null) ? 'a' : 'k');\n+        this.stack[this.top] = jsonObject;\n+        this.mode = ((jsonObject == null) ? 'a' : 'k');\n         ++this.top;\n     }\n     \n-    public static String valueToString(final Object value) throws JSONException {\n-        if (value == null || value.equals(null)) {\n+    public static String valueToString(final Object o) throws JSONException {\n+        if (o == null || o.equals(null)) {\n             return \"null\";\n         }\n-        if (value instanceof JSONString) {\n-            String object;\n+        if (o instanceof JSONString) {\n+            String jsonString;\n             try {\n-                object = ((JSONString)value).toJSONString();\n+                jsonString = ((JSONString)o).toJSONString();\n             }\n-            catch (final Exception e) {\n-                throw new JSONException((Throwable)e);\n+            catch (final Exception ex) {\n+                throw new JSONException((Throwable)ex);\n             }\n-            if (object != null) {\n-                return object;\n+            if (jsonString != null) {\n+                return jsonString;\n             }\n-            throw new JSONException(\"Bad value from toJSONString: \" + object);\n+            throw new JSONException(\"Bad value from toJSONString: \" + jsonString);\n         }\n-        else if (value instanceof Number) {\n-            final String numberAsString = JSONObject.numberToString((Number)value);\n-            if (JSONObject.NUMBER_PATTERN.matcher(numberAsString).matches()) {\n-                return numberAsString;\n+        else if (o instanceof Number) {\n+            final String numberToString = JSONObject.numberToString((Number)o);\n+            if (JSONObject.NUMBER_PATTERN.matcher(numberToString).matches()) {\n+                return numberToString;\n             }\n-            return JSONObject.quote(numberAsString);\n+            return JSONObject.quote(numberToString);\n         }\n         else {\n-            if (value instanceof Boolean || value instanceof JSONObject || value instanceof JSONArray) {\n-                return value.toString();\n+            if (o instanceof Boolean || o instanceof JSONObject || o instanceof JSONArray) {\n+                return o.toString();\n             }\n-            if (value instanceof Map) {\n-                final Map<?, ?> map = (Map)value;\n-                return new JSONObject((Map)map).toString();\n+            if (o instanceof Map) {\n+                return new JSONObject((Map)o).toString();\n             }\n-            if (value instanceof Collection) {\n-                final Collection<?> coll = (Collection)value;\n-                return new JSONArray((Collection)coll).toString();\n+            if (o instanceof Collection) {\n+                return new JSONArray((Collection)o).toString();\n             }\n-            if (value.getClass().isArray()) {\n-                return new JSONArray(value).toString();\n+            if (o.getClass().isArray()) {\n+                return new JSONArray(o).toString();\n             }\n-            if (value instanceof Enum) {\n-                return JSONObject.quote(((Enum)value).name());\n+            if (o instanceof Enum) {\n+                return JSONObject.quote(((Enum)o).name());\n             }\n-            return JSONObject.quote(value.toString());\n+            return JSONObject.quote(o.toString());\n         }\n     }\n     \n     public JSONWriter value(final boolean b) throws JSONException {\n         return this.append(b ? \"true\" : \"false\");\n     }\n     \n     public JSONWriter value(final double d) throws JSONException {\n         return this.value(Double.valueOf(d));\n     }\n     \n-    public JSONWriter value(final long l) throws JSONException {\n-        return this.append(Long.toString(l));\n+    public JSONWriter value(final long i) throws JSONException {\n+        return this.append(Long.toString(i));\n     }\n     \n-    public JSONWriter value(final Object object) throws JSONException {\n-        return this.append(valueToString(object));\n+    public JSONWriter value(final Object o) throws JSONException {\n+        return this.append(valueToString(o));\n     }\n }\n"}]}
