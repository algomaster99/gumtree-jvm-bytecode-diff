{"diffoscope-json-version": 1, "source1": "first/HexDump.class", "source2": "second/HexDump.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,14 +11,20 @@\n public class HexDump\n {\n     @Deprecated\n     public static final String EOL;\n     private static final char[] HEX_CODES;\n     private static final int[] SHIFTS;\n     \n+    static {\n+        EOL = System.lineSeparator();\n+        HEX_CODES = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };\n+        SHIFTS = new int[] { 28, 24, 20, 16, 12, 8, 4, 0 };\n+    }\n+    \n     public static void dump(final byte[] data, final Appendable appendable) throws IOException {\n         dump(data, 0L, appendable, 0, data.length);\n     }\n     \n     public static void dump(final byte[] data, final long offset, final Appendable appendable, final int index, final int length) throws IOException, ArrayIndexOutOfBoundsException {\n         Objects.requireNonNull(appendable, \"appendable\");\n         if (index < 0 || index >= data.length) {\n@@ -57,16 +63,37 @@\n             buffer.setLength();\n             display_offset += chars_read;\n         }\n     }\n     \n     public static void dump(final byte[] data, final long offset, final OutputStream stream, final int index) throws IOException, ArrayIndexOutOfBoundsException {\n         Objects.requireNonNull(stream, \"stream\");\n-        try (final OutputStreamWriter out = new OutputStreamWriter((OutputStream)CloseShieldOutputStream.wrap(stream), Charset.defaultCharset())) {\n-            dump(data, offset, out, index, data.length - index);\n+        Throwable t = null;\n+        try {\n+            final OutputStreamWriter out = new OutputStreamWriter((OutputStream)CloseShieldOutputStream.wrap(stream), Charset.defaultCharset());\n+            try {\n+                dump(data, offset, out, index, data.length - index);\n+            }\n+            finally {\n+                if (out != null) {\n+                    out.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     private static StringBuilder dump(final StringBuilder _cbuffer, final byte value) {\n         for (int j = 0; j < 2; ++j) {\n             _cbuffer.append(HexDump.HEX_CODES[value >> HexDump.SHIFTS[j + 6] & 0xF]);\n         }\n@@ -75,14 +102,8 @@\n     \n     private static StringBuilder dump(final StringBuilder _lbuffer, final long value) {\n         for (int j = 0; j < 8; ++j) {\n             _lbuffer.append(HexDump.HEX_CODES[(int)(value >> HexDump.SHIFTS[j]) & 0xF]);\n         }\n         return _lbuffer;\n     }\n-    \n-    static {\n-        EOL = System.lineSeparator();\n-        HEX_CODES = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };\n-        SHIFTS = new int[] { 28, 24, 20, 16, 12, 8, 4, 0 };\n-    }\n }\n"}]}
