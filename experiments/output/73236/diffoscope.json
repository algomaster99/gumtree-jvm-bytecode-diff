{"diffoscope-json-version": 1, "source1": "first/NewAttributeBands.class", "source2": "second/NewAttributeBands.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -184,20 +184,20 @@\n                 }\n                 return (NewAttributeBands.LayoutElement)new NewAttributeBands.Integral(this, \"OS\" + (char)reader.read(), this.lastPIntegral);\n             }\n             case 78: {\n                 final char uint_type = (char)reader.read();\n                 reader.read();\n                 final String str = this.readUpToMatchingBracket(reader);\n-                return (NewAttributeBands.LayoutElement)new NewAttributeBands.Replication(this, \"\" + uint_type, str);\n+                return (NewAttributeBands.LayoutElement)new NewAttributeBands.Replication(this, new StringBuilder().append(uint_type).toString(), str);\n             }\n             case 84: {\n                 String int_type = String.valueOf((char)reader.read());\n                 if (int_type.equals(\"S\")) {\n-                    int_type += (char)reader.read();\n+                    int_type = String.valueOf(int_type) + (char)reader.read();\n                 }\n                 final List<NewAttributeBands.UnionCase> unionCases = new ArrayList<NewAttributeBands.UnionCase>();\n                 NewAttributeBands.UnionCase c;\n                 while ((c = this.readNextUnionCase(reader)) != null) {\n                     unionCases.add(c);\n                 }\n                 reader.read();\n@@ -281,15 +281,15 @@\n             return null;\n         }\n         final char[] digits = new char[length];\n         final int read = stream.read(digits);\n         if (read != digits.length) {\n             throw new IOException(\"Error reading from the input stream\");\n         }\n-        return Integer.valueOf(Integer.parseInt((negative ? \"-\" : \"\") + new String(digits)));\n+        return Integer.valueOf(Integer.parseInt(String.valueOf(negative ? \"-\" : \"\") + new String(digits)));\n     }\n     \n     private String readUpToMatchingBracket(final StringReader reader) throws IOException {\n         final StringBuilder sb = new StringBuilder();\n         int foundBracket = -1;\n         while (foundBracket != 0) {\n             final int read = reader.read();\n@@ -318,38 +318,38 @@\n     }\n     \n     private void resolveCalls() {\n         for (int i = 0; i < this.attributeLayoutElements.size(); ++i) {\n             final NewAttributeBands.AttributeLayoutElement element = (NewAttributeBands.AttributeLayoutElement)this.attributeLayoutElements.get(i);\n             if (element instanceof NewAttributeBands.Callable) {\n                 final NewAttributeBands.Callable callable = (NewAttributeBands.Callable)element;\n-                final List<NewAttributeBands.LayoutElement> body = NewAttributeBands.Callable.access$500(callable);\n+                final List<NewAttributeBands.LayoutElement> body = NewAttributeBands.Callable.access$0(callable);\n                 for (final NewAttributeBands.LayoutElement layoutElement : body) {\n                     this.resolveCallsForElement(i, callable, layoutElement);\n                 }\n             }\n         }\n         int backwardsCallableIndex = 0;\n         for (final NewAttributeBands.AttributeLayoutElement attributeLayoutElement : this.attributeLayoutElements) {\n             if (attributeLayoutElement instanceof NewAttributeBands.Callable) {\n                 final NewAttributeBands.Callable callable2 = (NewAttributeBands.Callable)attributeLayoutElement;\n-                if (!NewAttributeBands.Callable.access$600(callable2)) {\n+                if (!NewAttributeBands.Callable.access$1(callable2)) {\n                     continue;\n                 }\n                 callable2.setBackwardsCallableIndex(backwardsCallableIndex);\n                 ++backwardsCallableIndex;\n             }\n         }\n         this.backwardsCallCounts = new int[backwardsCallableIndex];\n     }\n     \n     private void resolveCallsForElement(final int i, final NewAttributeBands.Callable currentCallable, final NewAttributeBands.LayoutElement layoutElement) {\n         if (layoutElement instanceof NewAttributeBands.Call) {\n             final NewAttributeBands.Call call = (NewAttributeBands.Call)layoutElement;\n-            int index = NewAttributeBands.Call.access$700(call);\n+            int index = NewAttributeBands.Call.access$0(call);\n             if (index == 0) {\n                 call.setCallable(currentCallable);\n             }\n             else if (index > 0) {\n                 for (int k = i + 1; k < this.attributeLayoutElements.size(); ++k) {\n                     final NewAttributeBands.AttributeLayoutElement el = (NewAttributeBands.AttributeLayoutElement)this.attributeLayoutElements.get(k);\n                     if (el instanceof NewAttributeBands.Callable && --index == 0) {\n@@ -365,14 +365,14 @@\n                         call.setCallable((NewAttributeBands.Callable)el);\n                         break;\n                     }\n                 }\n             }\n         }\n         else if (layoutElement instanceof NewAttributeBands.Replication) {\n-            final List<NewAttributeBands.LayoutElement> children = NewAttributeBands.Replication.access$800((NewAttributeBands.Replication)layoutElement);\n+            final List<NewAttributeBands.LayoutElement> children = NewAttributeBands.Replication.access$0((NewAttributeBands.Replication)layoutElement);\n             for (final NewAttributeBands.LayoutElement child : children) {\n                 this.resolveCallsForElement(i, currentCallable, child);\n             }\n         }\n     }\n }\n"}]}
