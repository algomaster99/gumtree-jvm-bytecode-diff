{"diffoscope-json-version": 1, "source1": "first/TeeInputStream.class", "source2": "second/TeeInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,20 +6,20 @@\n import java.io.OutputStream;\n \n public class TeeInputStream extends ProxyInputStream\n {\n     private final OutputStream branch;\n     private final boolean closeBranch;\n     \n-    public TeeInputStream(final InputStream input, final OutputStream branch) {\n-        this(input, branch, false);\n+    public TeeInputStream(final InputStream inputStream, final OutputStream outputStream) {\n+        this(inputStream, outputStream, false);\n     }\n     \n-    public TeeInputStream(final InputStream input, final OutputStream branch, final boolean closeBranch) {\n-        super(input);\n+    public TeeInputStream(final InputStream inputStream, final OutputStream branch, final boolean closeBranch) {\n+        super(inputStream);\n         this.branch = branch;\n         this.closeBranch = closeBranch;\n     }\n     \n     public void close() throws IOException {\n         try {\n             super.close();\n@@ -28,30 +28,30 @@\n             if (this.closeBranch) {\n                 this.branch.close();\n             }\n         }\n     }\n     \n     public int read() throws IOException {\n-        final int ch = super.read();\n-        if (ch != -1) {\n-            this.branch.write(ch);\n+        final int read = super.read();\n+        if (read != -1) {\n+            this.branch.write(read);\n         }\n-        return ch;\n+        return read;\n     }\n     \n-    public int read(final byte[] bts, final int st, final int end) throws IOException {\n-        final int n = super.read(bts, st, end);\n-        if (n != -1) {\n-            this.branch.write(bts, st, n);\n+    public int read(final byte[] b, final int off, final int n) throws IOException {\n+        final int read = super.read(b, off, n);\n+        if (read != -1) {\n+            this.branch.write(b, off, read);\n         }\n-        return n;\n+        return read;\n     }\n     \n-    public int read(final byte[] bts) throws IOException {\n-        final int n = super.read(bts);\n-        if (n != -1) {\n-            this.branch.write(bts, 0, n);\n+    public int read(final byte[] b) throws IOException {\n+        final int read = super.read(b);\n+        if (read != -1) {\n+            this.branch.write(b, 0, read);\n         }\n-        return n;\n+        return read;\n     }\n }\n"}]}
