{"diffoscope-json-version": 1, "source1": "first/ZipArchiveOutputStream.class", "source2": "second/ZipArchiveOutputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,306 +1,306 @@\n-  SHA-256 checksum fa2e68d19af756a0ade6a777f83a8ceec5286f35d6998e4df339897e874f9918\n+  SHA-256 checksum 8430baa3fd44f3e3d8c4d94401623741aefe3c82ced28c7c2a1c28dd46510e10\n   Compiled from \"ZipArchiveOutputStream.java\"\n public class org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream extends org.apache.commons.compress.archivers.ArchiveOutputStream\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #10                         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n   super_class: #295                       // org/apache/commons/compress/archivers/ArchiveOutputStream\n   interfaces: 0, fields: 67, methods: 63, attributes: 2\n Constant pool:\n-    #1 = Class              #538          // java/util/zip/ZipEntry\n-    #2 = Class              #539          // java/util/zip/Deflater\n-    #3 = Class              #540          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-    #4 = Class              #541          // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-    #5 = Class              #542          // org/apache/commons/compress/archivers/zip/ZipConstants\n-    #6 = Methodref          #295.#543     // org/apache/commons/compress/archivers/ArchiveOutputStream.\"<init>\":()V\n-    #7 = Fieldref           #10.#544      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.finished:Z\n-    #8 = String             #545          //\n-    #9 = Fieldref           #10.#546      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.comment:Ljava/lang/String;\n-   #10 = Class              #547          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-   #11 = Fieldref           #10.#548      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.level:I\n-   #12 = Fieldref           #10.#549      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.hasCompressionLevelChanged:Z\n-   #13 = Fieldref           #10.#550      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.method:I\n-   #14 = Class              #551          // java/util/LinkedList\n-   #15 = Methodref          #14.#543      // java/util/LinkedList.\"<init>\":()V\n-   #16 = Fieldref           #10.#552      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.entries:Ljava/util/List;\n-   #17 = Fieldref           #10.#553      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.cdOffset:J\n-   #18 = Fieldref           #10.#554      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.cdLength:J\n-   #19 = Class              #555          // java/util/HashMap\n-   #20 = Methodref          #19.#543      // java/util/HashMap.\"<init>\":()V\n-   #21 = Fieldref           #10.#556      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.metaData:Ljava/util/Map;\n-   #22 = String             #557          // UTF8\n-   #23 = Fieldref           #10.#558      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.encoding:Ljava/lang/String;\n-   #24 = Methodref          #3.#559       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #25 = Fieldref           #10.#560      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #26 = Fieldref           #10.#561      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.useUTF8Flag:Z\n-   #27 = Fieldref           #10.#562      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.fallbackToUTF8:Z\n-   #28 = Fieldref           #300.#563     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy.NEVER:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n-   #29 = Fieldref           #10.#564      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.createUnicodeExtraFields:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n-   #30 = Fieldref           #10.#565      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.hasUsedZip64:Z\n-   #31 = Fieldref           #566.#567     // org/apache/commons/compress/archivers/zip/Zip64Mode.AsNeeded:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-   #32 = Fieldref           #10.#568      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.zip64Mode:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+    #1 = Class              #528          // java/util/zip/ZipEntry\n+    #2 = Class              #529          // java/util/zip/Deflater\n+    #3 = Class              #530          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+    #4 = Class              #531          // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+    #5 = Class              #532          // org/apache/commons/compress/archivers/zip/ZipConstants\n+    #6 = Methodref          #295.#533     // org/apache/commons/compress/archivers/ArchiveOutputStream.\"<init>\":()V\n+    #7 = Fieldref           #10.#534      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.finished:Z\n+    #8 = String             #535          //\n+    #9 = Fieldref           #10.#536      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.comment:Ljava/lang/String;\n+   #10 = Class              #537          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+   #11 = Fieldref           #10.#538      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.level:I\n+   #12 = Fieldref           #10.#539      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.hasCompressionLevelChanged:Z\n+   #13 = Fieldref           #10.#540      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.method:I\n+   #14 = Class              #541          // java/util/LinkedList\n+   #15 = Methodref          #14.#533      // java/util/LinkedList.\"<init>\":()V\n+   #16 = Fieldref           #10.#542      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.entries:Ljava/util/List;\n+   #17 = Fieldref           #10.#543      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.cdOffset:J\n+   #18 = Fieldref           #10.#544      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.cdLength:J\n+   #19 = Class              #545          // java/util/HashMap\n+   #20 = Methodref          #19.#533      // java/util/HashMap.\"<init>\":()V\n+   #21 = Fieldref           #10.#546      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.metaData:Ljava/util/Map;\n+   #22 = String             #547          // UTF8\n+   #23 = Fieldref           #10.#548      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.encoding:Ljava/lang/String;\n+   #24 = Methodref          #3.#549       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #25 = Fieldref           #10.#550      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #26 = Fieldref           #10.#551      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.useUTF8Flag:Z\n+   #27 = Fieldref           #10.#552      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.fallbackToUTF8:Z\n+   #28 = Fieldref           #300.#553     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy.NEVER:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n+   #29 = Fieldref           #10.#554      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.createUnicodeExtraFields:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n+   #30 = Fieldref           #10.#555      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.hasUsedZip64:Z\n+   #31 = Fieldref           #465.#556     // org/apache/commons/compress/archivers/zip/Zip64Mode.AsNeeded:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+   #32 = Fieldref           #10.#557      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.zip64Mode:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n    #33 = Integer            32768\n-   #34 = Fieldref           #10.#569      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.copyBuffer:[B\n-   #35 = Methodref          #570.#571     // java/util/Calendar.getInstance:()Ljava/util/Calendar;\n-   #36 = Fieldref           #10.#572      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.calendarInstance:Ljava/util/Calendar;\n-   #37 = Fieldref           #10.#573      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.out:Ljava/io/OutputStream;\n-   #38 = Fieldref           #10.#574      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.channel:Ljava/nio/channels/SeekableByteChannel;\n-   #39 = Methodref          #2.#575       // java/util/zip/Deflater.\"<init>\":(IZ)V\n-   #40 = Fieldref           #10.#576      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.def:Ljava/util/zip/Deflater;\n-   #41 = Methodref          #577.#578     // org/apache/commons/compress/archivers/zip/StreamCompressor.create:(Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-   #42 = Fieldref           #10.#579      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-   #43 = Methodref          #580.#581     // java/io/File.toPath:()Ljava/nio/file/Path;\n-   #44 = Fieldref           #582.#583     // java/nio/file/StandardOpenOption.CREATE:Ljava/nio/file/StandardOpenOption;\n-   #45 = Fieldref           #582.#584     // java/nio/file/StandardOpenOption.WRITE:Ljava/nio/file/StandardOpenOption;\n-   #46 = Fieldref           #582.#585     // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n-   #47 = Fieldref           #582.#586     // java/nio/file/StandardOpenOption.TRUNCATE_EXISTING:Ljava/nio/file/StandardOpenOption;\n-   #48 = Methodref          #587.#588     // java/util/EnumSet.of:(Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;\n-   #49 = Class              #589          // java/nio/file/attribute/FileAttribute\n-   #50 = Methodref          #590.#591     // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n-   #51 = Methodref          #577.#592     // org/apache/commons/compress/archivers/zip/StreamCompressor.create:(Ljava/nio/channels/SeekableByteChannel;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-   #52 = Class              #593          // java/io/IOException\n-   #53 = Methodref          #594.#595     // org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n-   #54 = Class              #596          // java/io/FileOutputStream\n-   #55 = Methodref          #54.#597      // java/io/FileOutputStream.\"<init>\":(Ljava/io/File;)V\n-   #56 = Methodref          #3.#598       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.isUTF8:(Ljava/lang/String;)Z\n-   #57 = String             #599          // This archive has already been finished\n-   #58 = Methodref          #52.#600      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #59 = Fieldref           #10.#601      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.entry:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;\n-   #60 = String             #602          // This archive contains unclosed entries.\n-   #61 = Methodref          #577.#603     // org/apache/commons/compress/archivers/zip/StreamCompressor.getTotalBytesWritten:()J\n-   #62 = Methodref          #10.#604      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeCentralDirectoryInChunks:()V\n-   #63 = Methodref          #10.#605      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeZip64CentralDirectory:()V\n-   #64 = Methodref          #10.#606      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeCentralDirectoryEnd:()V\n-   #65 = InterfaceMethodref #607.#608     // java/util/Map.clear:()V\n-   #66 = InterfaceMethodref #609.#608     // java/util/List.clear:()V\n-   #67 = Methodref          #577.#610     // org/apache/commons/compress/archivers/zip/StreamCompressor.close:()V\n-   #68 = Class              #611          // java/io/ByteArrayOutputStream\n+   #34 = Fieldref           #10.#558      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.copyBuffer:[B\n+   #35 = Methodref          #559.#560     // java/util/Calendar.getInstance:()Ljava/util/Calendar;\n+   #36 = Fieldref           #10.#561      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.calendarInstance:Ljava/util/Calendar;\n+   #37 = Fieldref           #10.#562      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.out:Ljava/io/OutputStream;\n+   #38 = Fieldref           #10.#563      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.channel:Ljava/nio/channels/SeekableByteChannel;\n+   #39 = Methodref          #2.#564       // java/util/zip/Deflater.\"<init>\":(IZ)V\n+   #40 = Fieldref           #10.#565      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.def:Ljava/util/zip/Deflater;\n+   #41 = Methodref          #425.#566     // org/apache/commons/compress/archivers/zip/StreamCompressor.create:(Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #42 = Fieldref           #10.#567      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #43 = Methodref          #422.#568     // java/io/File.toPath:()Ljava/nio/file/Path;\n+   #44 = Fieldref           #569.#570     // java/nio/file/StandardOpenOption.CREATE:Ljava/nio/file/StandardOpenOption;\n+   #45 = Fieldref           #569.#571     // java/nio/file/StandardOpenOption.WRITE:Ljava/nio/file/StandardOpenOption;\n+   #46 = Fieldref           #569.#572     // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+   #47 = Fieldref           #569.#573     // java/nio/file/StandardOpenOption.TRUNCATE_EXISTING:Ljava/nio/file/StandardOpenOption;\n+   #48 = Methodref          #574.#575     // java/util/EnumSet.of:(Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;\n+   #49 = Class              #576          // java/nio/file/attribute/FileAttribute\n+   #50 = Methodref          #577.#578     // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+   #51 = Methodref          #425.#579     // org/apache/commons/compress/archivers/zip/StreamCompressor.create:(Ljava/nio/channels/SeekableByteChannel;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #52 = Class              #580          // java/io/IOException\n+   #53 = Methodref          #581.#582     // org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n+   #54 = Class              #583          // java/io/FileOutputStream\n+   #55 = Methodref          #54.#584      // java/io/FileOutputStream.\"<init>\":(Ljava/io/File;)V\n+   #56 = Methodref          #3.#585       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.isUTF8:(Ljava/lang/String;)Z\n+   #57 = String             #586          // This archive has already been finished\n+   #58 = Methodref          #52.#587      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #59 = Fieldref           #10.#588      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.entry:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;\n+   #60 = String             #589          // This archive contains unclosed entries.\n+   #61 = Methodref          #425.#590     // org/apache/commons/compress/archivers/zip/StreamCompressor.getTotalBytesWritten:()J\n+   #62 = Methodref          #10.#591      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeCentralDirectoryInChunks:()V\n+   #63 = Methodref          #10.#592      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeZip64CentralDirectory:()V\n+   #64 = Methodref          #10.#593      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeCentralDirectoryEnd:()V\n+   #65 = InterfaceMethodref #594.#595     // java/util/Map.clear:()V\n+   #66 = InterfaceMethodref #596.#595     // java/util/List.clear:()V\n+   #67 = Methodref          #425.#597     // org/apache/commons/compress/archivers/zip/StreamCompressor.close:()V\n+   #68 = Class              #598          // java/io/ByteArrayOutputStream\n    #69 = Integer            70000\n-   #70 = Methodref          #68.#612      // java/io/ByteArrayOutputStream.\"<init>\":(I)V\n-   #71 = InterfaceMethodref #609.#613     // java/util/List.iterator:()Ljava/util/Iterator;\n-   #72 = InterfaceMethodref #614.#615     // java/util/Iterator.hasNext:()Z\n-   #73 = InterfaceMethodref #614.#616     // java/util/Iterator.next:()Ljava/lang/Object;\n-   #74 = Class              #617          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-   #75 = Methodref          #10.#618      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.createCentralFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B\n-   #76 = Methodref          #68.#619      // java/io/ByteArrayOutputStream.write:([B)V\n-   #77 = Methodref          #68.#620      // java/io/ByteArrayOutputStream.toByteArray:()[B\n-   #78 = Methodref          #10.#621      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeCounted:([B)V\n-   #79 = Methodref          #68.#622      // java/io/ByteArrayOutputStream.reset:()V\n-   #80 = Methodref          #10.#623      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.preClose:()V\n-   #81 = Methodref          #10.#624      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.flushDeflater:()V\n-   #82 = Methodref          #162.#625     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$000:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n-   #83 = Methodref          #577.#626     // org/apache/commons/compress/archivers/zip/StreamCompressor.getCrc32:()J\n-   #84 = Methodref          #577.#627     // org/apache/commons/compress/archivers/zip/StreamCompressor.getBytesRead:()J\n-   #85 = Methodref          #162.#628     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$102:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n-   #86 = Methodref          #162.#629     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-   #87 = Methodref          #10.#630      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getEffectiveZip64Mode:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-   #88 = Methodref          #10.#631      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.handleSizesAndCrc:(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-   #89 = Methodref          #10.#632      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.closeEntry:(ZZ)V\n-   #90 = Methodref          #577.#622     // org/apache/commons/compress/archivers/zip/StreamCompressor.reset:()V\n-   #91 = Methodref          #74.#633      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n-   #92 = Methodref          #10.#634      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.checkIfNeedsZip64:(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-   #93 = Methodref          #10.#635      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.rewriteSizesAndCrc:(Z)V\n-   #94 = Methodref          #10.#636      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeDataDescriptor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #95 = String             #637          // Stream has already been finished\n-   #96 = String             #638          // No current entry to close\n-   #97 = Methodref          #162.#639     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n-   #98 = Fieldref           #10.#640      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EMPTY:[B\n-   #99 = Methodref          #10.#641      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.write:([BII)V\n-  #100 = Methodref          #74.#642      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #101 = Methodref          #10.#643      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.hasZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #102 = Fieldref           #280.#644     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #103 = Methodref          #74.#645      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.removeExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-  #104 = Methodref          #74.#646      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCrc:()J\n+   #70 = Methodref          #68.#599      // java/io/ByteArrayOutputStream.\"<init>\":(I)V\n+   #71 = InterfaceMethodref #596.#600     // java/util/List.iterator:()Ljava/util/Iterator;\n+   #72 = InterfaceMethodref #444.#601     // java/util/Iterator.hasNext:()Z\n+   #73 = InterfaceMethodref #444.#602     // java/util/Iterator.next:()Ljava/lang/Object;\n+   #74 = Class              #603          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+   #75 = Methodref          #10.#604      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.createCentralFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B\n+   #76 = Methodref          #68.#605      // java/io/ByteArrayOutputStream.write:([B)V\n+   #77 = Methodref          #68.#606      // java/io/ByteArrayOutputStream.toByteArray:()[B\n+   #78 = Methodref          #10.#607      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeCounted:([B)V\n+   #79 = Methodref          #68.#608      // java/io/ByteArrayOutputStream.reset:()V\n+   #80 = Methodref          #10.#609      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.preClose:()V\n+   #81 = Methodref          #10.#610      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.flushDeflater:()V\n+   #82 = Methodref          #162.#611     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$000:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n+   #83 = Methodref          #425.#612     // org/apache/commons/compress/archivers/zip/StreamCompressor.getCrc32:()J\n+   #84 = Methodref          #425.#613     // org/apache/commons/compress/archivers/zip/StreamCompressor.getBytesRead:()J\n+   #85 = Methodref          #162.#614     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$102:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n+   #86 = Methodref          #162.#615     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+   #87 = Methodref          #10.#616      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getEffectiveZip64Mode:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+   #88 = Methodref          #10.#617      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.handleSizesAndCrc:(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+   #89 = Methodref          #10.#618      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.closeEntry:(ZZ)V\n+   #90 = Methodref          #425.#608     // org/apache/commons/compress/archivers/zip/StreamCompressor.reset:()V\n+   #91 = Methodref          #74.#619      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n+   #92 = Methodref          #10.#620      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.checkIfNeedsZip64:(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+   #93 = Methodref          #10.#621      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.rewriteSizesAndCrc:(Z)V\n+   #94 = Methodref          #10.#622      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeDataDescriptor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #95 = String             #623          // Stream has already been finished\n+   #96 = String             #624          // No current entry to close\n+   #97 = Methodref          #162.#625     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n+   #98 = Fieldref           #10.#626      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EMPTY:[B\n+   #99 = Methodref          #10.#627      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.write:([BII)V\n+  #100 = Methodref          #74.#628      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #101 = Methodref          #10.#629      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.hasZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #102 = Fieldref           #280.#630     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #103 = Methodref          #74.#631      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.removeExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+  #104 = Methodref          #74.#632      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCrc:()J\n   #105 = Long               -1l\n-  #107 = Class              #647          // org/apache/commons/compress/archivers/ArchiveEntry\n-  #108 = Methodref          #74.#648      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n-  #109 = Methodref          #10.#649      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V\n-  #110 = Methodref          #10.#650      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.copyFromZipInputStream:(Ljava/io/InputStream;)V\n-  #111 = Methodref          #10.#651      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.closeCopiedEntry:(Z)V\n-  #112 = Methodref          #74.#652      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-  #113 = Methodref          #577.#624     // org/apache/commons/compress/archivers/zip/StreamCompressor.flushDeflater:()V\n-  #114 = Methodref          #162.#653     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n-  #115 = Methodref          #74.#654      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n-  #116 = Methodref          #74.#655      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n-  #117 = Methodref          #74.#656      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCrc:(J)V\n-  #118 = Class              #657          // java/util/zip/ZipException\n-  #119 = Class              #658          // java/lang/StringBuilder\n-  #120 = Methodref          #119.#543     // java/lang/StringBuilder.\"<init>\":()V\n-  #121 = String             #659          // bad CRC checksum for entry\n-  #122 = Methodref          #119.#660     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #123 = Methodref          #74.#661      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n-  #124 = String             #662          // :\n-  #125 = Methodref          #663.#664     // java/lang/Long.toHexString:(J)Ljava/lang/String;\n-  #126 = String             #665          //  instead of\n-  #127 = Methodref          #119.#666     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-  #128 = Methodref          #118.#600     // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-  #129 = String             #667          // bad size for entry\n-  #130 = Methodref          #119.#668     // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-  #131 = Methodref          #10.#669      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.isZip64Required:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-  #132 = Fieldref           #566.#670     // org/apache/commons/compress/archivers/zip/Zip64Mode.Never:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-  #133 = Class              #671          // org/apache/commons/compress/archivers/zip/Zip64RequiredException\n-  #134 = Methodref          #133.#672     // org/apache/commons/compress/archivers/zip/Zip64RequiredException.getEntryTooBigMessage:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n-  #135 = Methodref          #133.#600     // org/apache/commons/compress/archivers/zip/Zip64RequiredException.\"<init>\":(Ljava/lang/String;)V\n-  #136 = Fieldref           #566.#673     // org/apache/commons/compress/archivers/zip/Zip64Mode.Always:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-  #137 = Methodref          #10.#674      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.isTooLageForZip32:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #107 = Class              #633          // org/apache/commons/compress/archivers/ArchiveEntry\n+  #108 = Methodref          #74.#634      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+  #109 = Methodref          #10.#635      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V\n+  #110 = Methodref          #10.#636      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.copyFromZipInputStream:(Ljava/io/InputStream;)V\n+  #111 = Methodref          #10.#637      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.closeCopiedEntry:(Z)V\n+  #112 = Methodref          #74.#638      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+  #113 = Methodref          #425.#610     // org/apache/commons/compress/archivers/zip/StreamCompressor.flushDeflater:()V\n+  #114 = Methodref          #162.#639     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n+  #115 = Methodref          #74.#640      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n+  #116 = Methodref          #74.#641      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n+  #117 = Methodref          #74.#642      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCrc:(J)V\n+  #118 = Class              #643          // java/util/zip/ZipException\n+  #119 = Class              #644          // java/lang/StringBuilder\n+  #120 = Methodref          #119.#533     // java/lang/StringBuilder.\"<init>\":()V\n+  #121 = String             #645          // bad CRC checksum for entry\n+  #122 = Methodref          #119.#646     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #123 = Methodref          #74.#647      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n+  #124 = String             #648          // :\n+  #125 = Methodref          #649.#650     // java/lang/Long.toHexString:(J)Ljava/lang/String;\n+  #126 = String             #651          //  instead of\n+  #127 = Methodref          #119.#652     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #128 = Methodref          #118.#587     // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+  #129 = String             #653          // bad size for entry\n+  #130 = Methodref          #119.#654     // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+  #131 = Methodref          #10.#655      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.isZip64Required:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+  #132 = Fieldref           #465.#656     // org/apache/commons/compress/archivers/zip/Zip64Mode.Never:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+  #133 = Class              #657          // org/apache/commons/compress/archivers/zip/Zip64RequiredException\n+  #134 = Methodref          #133.#658     // org/apache/commons/compress/archivers/zip/Zip64RequiredException.getEntryTooBigMessage:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n+  #135 = Methodref          #133.#587     // org/apache/commons/compress/archivers/zip/Zip64RequiredException.\"<init>\":(Ljava/lang/String;)V\n+  #136 = Fieldref           #465.#659     // org/apache/commons/compress/archivers/zip/Zip64Mode.Always:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+  #137 = Methodref          #10.#660      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.isTooLageForZip32:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n   #138 = Long               4294967295l\n-  #140 = InterfaceMethodref #675.#676     // java/nio/channels/SeekableByteChannel.position:()J\n-  #141 = Methodref          #162.#677     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$400:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n-  #142 = InterfaceMethodref #675.#678     // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n-  #143 = Methodref          #679.#680     // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:(J)[B\n-  #144 = Methodref          #10.#681      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeOut:([B)V\n-  #145 = Fieldref           #679.#682     // org/apache/commons/compress/archivers/zip/ZipLong.ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #146 = Methodref          #679.#683     // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n-  #147 = Methodref          #10.#684      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getName:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/nio/ByteBuffer;\n-  #148 = Methodref          #685.#686     // java/nio/ByteBuffer.limit:()I\n-  #149 = Methodref          #685.#687     // java/nio/ByteBuffer.position:()I\n+  #140 = InterfaceMethodref #424.#661     // java/nio/channels/SeekableByteChannel.position:()J\n+  #141 = Methodref          #162.#662     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$400:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n+  #142 = InterfaceMethodref #424.#663     // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+  #143 = Methodref          #664.#665     // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:(J)[B\n+  #144 = Methodref          #10.#666      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeOut:([B)V\n+  #145 = Fieldref           #664.#667     // org/apache/commons/compress/archivers/zip/ZipLong.ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #146 = Methodref          #664.#668     // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n+  #147 = Methodref          #10.#669      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getName:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/nio/ByteBuffer;\n+  #148 = Methodref          #487.#670     // java/nio/ByteBuffer.limit:()I\n+  #149 = Methodref          #487.#671     // java/nio/ByteBuffer.position:()I\n   #150 = Long               12l\n   #152 = Long               4l\n-  #154 = Methodref          #169.#680     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:(J)[B\n+  #154 = Methodref          #169.#665     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:(J)[B\n   #155 = Long               10l\n-  #157 = Methodref          #10.#688      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.versionNeededToExtract:(IZZ)I\n-  #158 = Methodref          #689.#690     // org/apache/commons/compress/archivers/zip/ZipShort.getBytes:(I)[B\n-  #159 = Methodref          #74.#691      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setExtra:()V\n-  #160 = Methodref          #162.#692     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$500:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n-  #161 = Methodref          #10.#693      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.closeArchiveEntry:()V\n-  #162 = Class              #694          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry\n-  #163 = Methodref          #162.#695     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n-  #164 = InterfaceMethodref #609.#696     // java/util/List.add:(Ljava/lang/Object;)Z\n-  #165 = Methodref          #10.#697      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.setDefaults:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #166 = Methodref          #10.#698      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.validateSizeInformation:(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V\n-  #167 = Methodref          #10.#699      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.shouldAddZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-  #168 = Methodref          #10.#700      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n-  #169 = Class              #701          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  #170 = Methodref          #169.#702     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n-  #171 = Fieldref           #169.#703     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #172 = Methodref          #280.#704     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #173 = Methodref          #280.#705     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #174 = Methodref          #2.#706       // java/util/zip/Deflater.setLevel:(I)V\n-  #175 = Methodref          #10.#707      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeLocalFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V\n-  #176 = Methodref          #74.#708      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setMethod:(I)V\n-  #177 = Methodref          #74.#709      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getTime:()J\n-  #178 = Methodref          #710.#711     // java/lang/System.currentTimeMillis:()J\n-  #179 = Methodref          #74.#712      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setTime:(J)V\n-  #180 = String             #713          // uncompressed size is required for STORED method when not writing to a file\n-  #181 = String             #714          // crc checksum is required for STORED method when not writing to a file\n-  #182 = Class              #715          // java/lang/IllegalArgumentException\n-  #183 = String             #716          // Invalid compression level:\n-  #184 = Methodref          #119.#717     // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-  #185 = Methodref          #182.#600     // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-  #186 = Fieldref           #718.#719     // org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #187 = Methodref          #718.#720     // org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n-  #188 = Fieldref           #718.#721     // org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #189 = Methodref          #722.#723     // org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #190 = Class              #724          // java/lang/IllegalStateException\n-  #191 = String             #725          // No current entry\n-  #192 = Methodref          #190.#600     // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-  #193 = Methodref          #722.#726     // org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #194 = Methodref          #577.#727     // org/apache/commons/compress/archivers/zip/StreamCompressor.write:([BIII)J\n-  #195 = Methodref          #10.#728      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.count:(J)V\n-  #196 = Methodref          #577.#621     // org/apache/commons/compress/archivers/zip/StreamCompressor.writeCounted:([B)V\n-  #197 = Methodref          #162.#729     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n-  #198 = Methodref          #730.#731     // java/io/InputStream.read:([B)I\n-  #199 = Methodref          #577.#732     // org/apache/commons/compress/archivers/zip/StreamCompressor.writeCounted:([BII)V\n-  #200 = Methodref          #10.#733      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.count:(I)V\n-  #201 = Methodref          #10.#734      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.finish:()V\n-  #202 = Methodref          #10.#735      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.destroy:()V\n-  #203 = Methodref          #736.#737     // java/io/OutputStream.flush:()V\n-  #204 = Methodref          #577.#738     // org/apache/commons/compress/archivers/zip/StreamCompressor.deflate:()V\n-  #205 = InterfaceMethodref #739.#740     // org/apache/commons/compress/archivers/zip/ZipEncoding.canEncode:(Ljava/lang/String;)Z\n-  #206 = Methodref          #10.#741      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.addUnicodeExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V\n-  #207 = Methodref          #10.#742      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.createLocalFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B\n-  #208 = Class              #743          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData\n-  #209 = Methodref          #10.#744      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.usesDataDescriptor:(IZ)Z\n-  #210 = Methodref          #208.#745     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData.\"<init>\":(JZLorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n-  #211 = InterfaceMethodref #607.#746     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #157 = Methodref          #10.#672      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.versionNeededToExtract:(IZZ)I\n+  #158 = Methodref          #673.#674     // org/apache/commons/compress/archivers/zip/ZipShort.getBytes:(I)[B\n+  #159 = Methodref          #74.#675      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setExtra:()V\n+  #160 = Methodref          #162.#676     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$500:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n+  #161 = Methodref          #10.#677      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.closeArchiveEntry:()V\n+  #162 = Class              #678          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry\n+  #163 = Methodref          #162.#679     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n+  #164 = InterfaceMethodref #596.#680     // java/util/List.add:(Ljava/lang/Object;)Z\n+  #165 = Methodref          #10.#681      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.setDefaults:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #166 = Methodref          #10.#682      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.validateSizeInformation:(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V\n+  #167 = Methodref          #10.#683      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.shouldAddZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+  #168 = Methodref          #10.#684      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n+  #169 = Class              #685          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+  #170 = Methodref          #169.#686     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n+  #171 = Fieldref           #169.#687     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #172 = Methodref          #280.#688     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #173 = Methodref          #280.#689     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #174 = Methodref          #2.#690       // java/util/zip/Deflater.setLevel:(I)V\n+  #175 = Methodref          #10.#691      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeLocalFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V\n+  #176 = Methodref          #74.#692      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setMethod:(I)V\n+  #177 = Methodref          #74.#693      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getTime:()J\n+  #178 = Methodref          #694.#695     // java/lang/System.currentTimeMillis:()J\n+  #179 = Methodref          #74.#696      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setTime:(J)V\n+  #180 = String             #697          // uncompressed size is required for STORED method when not writing to a file\n+  #181 = String             #698          // crc checksum is required for STORED method when not writing to a file\n+  #182 = Class              #699          // java/lang/IllegalArgumentException\n+  #183 = String             #700          // Invalid compression level:\n+  #184 = Methodref          #119.#701     // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+  #185 = Methodref          #182.#587     // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+  #186 = Fieldref           #702.#703     // org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #187 = Methodref          #702.#704     // org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+  #188 = Fieldref           #702.#705     // org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #189 = Methodref          #706.#707     // org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #190 = Class              #708          // java/lang/IllegalStateException\n+  #191 = String             #709          // No current entry\n+  #192 = Methodref          #190.#587     // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+  #193 = Methodref          #706.#710     // org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #194 = Methodref          #425.#711     // org/apache/commons/compress/archivers/zip/StreamCompressor.write:([BIII)J\n+  #195 = Methodref          #10.#712      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.count:(J)V\n+  #196 = Methodref          #425.#607     // org/apache/commons/compress/archivers/zip/StreamCompressor.writeCounted:([B)V\n+  #197 = Methodref          #162.#713     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n+  #198 = Methodref          #714.#715     // java/io/InputStream.read:([B)I\n+  #199 = Methodref          #425.#716     // org/apache/commons/compress/archivers/zip/StreamCompressor.writeCounted:([BII)V\n+  #200 = Methodref          #10.#717      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.count:(I)V\n+  #201 = Methodref          #10.#718      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.finish:()V\n+  #202 = Methodref          #10.#719      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.destroy:()V\n+  #203 = Methodref          #423.#720     // java/io/OutputStream.flush:()V\n+  #204 = Methodref          #425.#721     // org/apache/commons/compress/archivers/zip/StreamCompressor.deflate:()V\n+  #205 = InterfaceMethodref #521.#722     // org/apache/commons/compress/archivers/zip/ZipEncoding.canEncode:(Ljava/lang/String;)Z\n+  #206 = Methodref          #10.#723      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.addUnicodeExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V\n+  #207 = Methodref          #10.#724      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.createLocalFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B\n+  #208 = Class              #725          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData\n+  #209 = Methodref          #10.#726      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.usesDataDescriptor:(IZ)Z\n+  #210 = Methodref          #208.#727     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData.\"<init>\":(JZLorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n+  #211 = InterfaceMethodref #594.#728     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n   #212 = Long               14l\n-  #214 = Methodref          #162.#747     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$402:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n-  #215 = Methodref          #162.#748     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$002:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n-  #216 = Fieldref           #218.#749     // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #217 = Methodref          #74.#750      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #218 = Class              #751          // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n-  #219 = Methodref          #74.#752      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getAlignment:()I\n-  #220 = Methodref          #218.#753     // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.getAlignment:()S\n-  #221 = Methodref          #218.#754     // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.allowMethodChange:()Z\n-  #222 = Methodref          #74.#755      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalFileDataExtra:()[B\n-  #223 = Class              #756          // org/apache/commons/compress/archivers/zip/ZipExtraField\n+  #214 = Methodref          #162.#729     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$402:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n+  #215 = Methodref          #162.#730     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$002:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n+  #216 = Fieldref           #218.#731     // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #217 = Methodref          #74.#732      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #218 = Class              #733          // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n+  #219 = Methodref          #74.#734      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getAlignment:()I\n+  #220 = Methodref          #218.#735     // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.getAlignment:()S\n+  #221 = Methodref          #218.#736     // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.allowMethodChange:()Z\n+  #222 = Methodref          #74.#737      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalFileDataExtra:()[B\n+  #223 = Class              #738          // org/apache/commons/compress/archivers/zip/ZipExtraField\n   #224 = Long               2l\n-  #226 = Methodref          #218.#757     // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.\"<init>\":(IZI)V\n-  #227 = Methodref          #74.#758      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.addExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n-  #228 = Fieldref           #10.#759      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n-  #229 = Methodref          #710.#760     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #230 = Methodref          #689.#761     // org/apache/commons/compress/archivers/zip/ZipShort.putShort:(I[BI)V\n-  #231 = Methodref          #10.#762      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getGeneralPurposeBits:(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #232 = Methodref          #4.#763       // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.encode:([BI)V\n-  #233 = Methodref          #722.#764     // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(Ljava/util/Calendar;J[BI)V\n-  #234 = Methodref          #679.#765     // org/apache/commons/compress/archivers/zip/ZipLong.putLong:(J[BI)V\n-  #235 = Fieldref           #10.#766      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LZERO:[B\n-  #236 = Methodref          #679.#767     // org/apache/commons/compress/archivers/zip/ZipLong.putLong:([BI)V\n-  #237 = Methodref          #685.#768     // java/nio/ByteBuffer.array:()[B\n-  #238 = Methodref          #685.#769     // java/nio/ByteBuffer.arrayOffset:()I\n-  #239 = Fieldref           #300.#770     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy.ALWAYS:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n-  #240 = Class              #771          // org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n-  #241 = Methodref          #240.#772     // org/apache/commons/compress/archivers/zip/UnicodePathExtraField.\"<init>\":(Ljava/lang/String;[BII)V\n-  #242 = Methodref          #74.#773      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getComment:()Ljava/lang/String;\n-  #243 = Methodref          #774.#775     // java/lang/String.equals:(Ljava/lang/Object;)Z\n-  #244 = Methodref          #10.#776      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getEntryEncoding:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #245 = InterfaceMethodref #739.#777     // org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-  #246 = Class              #778          // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n-  #247 = Methodref          #246.#772     // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.\"<init>\":(Ljava/lang/String;[BII)V\n-  #248 = Fieldref           #10.#779      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n-  #249 = InterfaceMethodref #607.#780     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #250 = Methodref          #208.#781     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData.access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)J\n-  #251 = String             #782          // archive\\'s size exceeds the limit of 4GByte.\n-  #252 = Methodref          #10.#783      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.handleZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V\n-  #253 = Methodref          #10.#784      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.createCentralFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B\n-  #254 = Methodref          #74.#785      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCentralDirectoryExtra:()[B\n-  #255 = Fieldref           #10.#786      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.CFH_SIG:[B\n-  #256 = Methodref          #74.#787      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getPlatform:()I\n-  #257 = Methodref          #208.#788     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData.access$900:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)Z\n-  #258 = Fieldref           #10.#789      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZERO:[B\n-  #259 = Methodref          #74.#790      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getInternalAttributes:()I\n-  #260 = Methodref          #74.#791      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExternalAttributes:()J\n-  #261 = Methodref          #792.#793     // java/lang/Math.min:(JJ)J\n-  #262 = Methodref          #280.#794     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setRelativeHeaderOffset:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #263 = Fieldref           #10.#795      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n-  #264 = InterfaceMethodref #609.#796     // java/util/List.size:()I\n+  #226 = Methodref          #218.#739     // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.\"<init>\":(IZI)V\n+  #227 = Methodref          #74.#740      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.addExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n+  #228 = Fieldref           #10.#741      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n+  #229 = Methodref          #694.#742     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #230 = Methodref          #673.#743     // org/apache/commons/compress/archivers/zip/ZipShort.putShort:(I[BI)V\n+  #231 = Methodref          #10.#744      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getGeneralPurposeBits:(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #232 = Methodref          #4.#745       // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.encode:([BI)V\n+  #233 = Methodref          #706.#746     // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(Ljava/util/Calendar;J[BI)V\n+  #234 = Methodref          #664.#747     // org/apache/commons/compress/archivers/zip/ZipLong.putLong:(J[BI)V\n+  #235 = Fieldref           #10.#748      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LZERO:[B\n+  #236 = Methodref          #664.#749     // org/apache/commons/compress/archivers/zip/ZipLong.putLong:([BI)V\n+  #237 = Methodref          #487.#750     // java/nio/ByteBuffer.array:()[B\n+  #238 = Methodref          #487.#751     // java/nio/ByteBuffer.arrayOffset:()I\n+  #239 = Fieldref           #300.#752     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy.ALWAYS:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n+  #240 = Class              #753          // org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n+  #241 = Methodref          #240.#754     // org/apache/commons/compress/archivers/zip/UnicodePathExtraField.\"<init>\":(Ljava/lang/String;[BII)V\n+  #242 = Methodref          #74.#755      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getComment:()Ljava/lang/String;\n+  #243 = Methodref          #493.#756     // java/lang/String.equals:(Ljava/lang/Object;)Z\n+  #244 = Methodref          #10.#757      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getEntryEncoding:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #245 = InterfaceMethodref #521.#758     // org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #246 = Class              #759          // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n+  #247 = Methodref          #246.#754     // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.\"<init>\":(Ljava/lang/String;[BII)V\n+  #248 = Fieldref           #10.#760      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n+  #249 = InterfaceMethodref #594.#761     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #250 = Methodref          #208.#762     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData.access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)J\n+  #251 = String             #763          // archive\\'s size exceeds the limit of 4GByte.\n+  #252 = Methodref          #10.#764      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.handleZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V\n+  #253 = Methodref          #10.#765      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.createCentralFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B\n+  #254 = Methodref          #74.#766      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCentralDirectoryExtra:()[B\n+  #255 = Fieldref           #10.#767      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.CFH_SIG:[B\n+  #256 = Methodref          #74.#768      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getPlatform:()I\n+  #257 = Methodref          #208.#769     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData.access$900:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)Z\n+  #258 = Fieldref           #10.#770      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZERO:[B\n+  #259 = Methodref          #74.#771      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getInternalAttributes:()I\n+  #260 = Methodref          #74.#772      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExternalAttributes:()J\n+  #261 = Methodref          #773.#774     // java/lang/Math.min:(JJ)J\n+  #262 = Methodref          #280.#775     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setRelativeHeaderOffset:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #263 = Fieldref           #10.#776      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n+  #264 = InterfaceMethodref #596.#777     // java/util/List.size:()I\n   #265 = Integer            65535\n-  #266 = String             #797          // archive contains more than 65535 entries.\n-  #267 = Methodref          #792.#798     // java/lang/Math.min:(II)I\n-  #268 = Fieldref           #10.#799      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_SIG:[B\n+  #266 = String             #778          // archive contains more than 65535 entries.\n+  #267 = Methodref          #773.#779     // java/lang/Math.min:(II)I\n+  #268 = Fieldref           #10.#780      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_SIG:[B\n   #269 = Long               44l\n-  #271 = Fieldref           #10.#800      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG:[B\n-  #272 = Fieldref           #10.#801      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ONE:[B\n-  #273 = Methodref          #577.#802     // org/apache/commons/compress/archivers/zip/StreamCompressor.writeOut:([BII)V\n-  #274 = Methodref          #4.#543       // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.\"<init>\":()V\n-  #275 = Methodref          #4.#803       // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.useUTF8ForNames:(Z)V\n-  #276 = Methodref          #4.#804       // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.useDataDescriptor:(Z)V\n-  #277 = Methodref          #10.#805      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.versionNeededToExtractMethod:(I)I\n-  #278 = Methodref          #74.#806      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-  #279 = Methodref          #162.#807     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$502:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n-  #280 = Class              #808          // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-  #281 = Methodref          #280.#543     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.\"<init>\":()V\n-  #282 = Methodref          #74.#809      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.addAsFirstExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n-  #283 = Fieldref           #3.#810       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #284 = InterfaceMethodref #675.#610     // java/nio/channels/SeekableByteChannel.close:()V\n-  #285 = Methodref          #736.#610     // java/io/OutputStream.close:()V\n-  #286 = Fieldref           #679.#811     // org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #287 = Fieldref           #679.#812     // org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #288 = Fieldref           #679.#813     // org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #271 = Fieldref           #10.#781      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG:[B\n+  #272 = Fieldref           #10.#782      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ONE:[B\n+  #273 = Methodref          #425.#783     // org/apache/commons/compress/archivers/zip/StreamCompressor.writeOut:([BII)V\n+  #274 = Methodref          #4.#533       // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.\"<init>\":()V\n+  #275 = Methodref          #4.#784       // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.useUTF8ForNames:(Z)V\n+  #276 = Methodref          #4.#785       // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.useDataDescriptor:(Z)V\n+  #277 = Methodref          #10.#786      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.versionNeededToExtractMethod:(I)I\n+  #278 = Methodref          #74.#787      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+  #279 = Methodref          #162.#788     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$502:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n+  #280 = Class              #789          // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+  #281 = Methodref          #280.#533     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.\"<init>\":()V\n+  #282 = Methodref          #74.#790      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.addAsFirstExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n+  #283 = Fieldref           #3.#791       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #284 = InterfaceMethodref #424.#597     // java/nio/channels/SeekableByteChannel.close:()V\n+  #285 = Methodref          #423.#597     // java/io/OutputStream.close:()V\n+  #286 = Fieldref           #664.#792     // org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #287 = Fieldref           #664.#793     // org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #288 = Fieldref           #664.#794     // org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n   #289 = Long               101010256l\n   #291 = Long               101075792l\n   #293 = Long               117853008l\n-  #295 = Class              #814          // org/apache/commons/compress/archivers/ArchiveOutputStream\n-  #296 = Class              #815          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1\n+  #295 = Class              #795          // org/apache/commons/compress/archivers/ArchiveOutputStream\n+  #296 = Class              #796          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1\n   #297 = Utf8               InnerClasses\n   #298 = Utf8               EntryMetaData\n   #299 = Utf8               CurrentEntry\n-  #300 = Class              #816          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy\n+  #300 = Class              #797          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy\n   #301 = Utf8               UnicodeExtraFieldPolicy\n   #302 = Utf8               BUFFER_SIZE\n   #303 = Utf8               I\n   #304 = Utf8               ConstantValue\n   #305 = Integer            512\n   #306 = Utf8               LFH_SIG_OFFSET\n   #307 = Integer            0\n@@ -414,589 +414,570 @@\n   #415 = Utf8               ZIP64_EOCD_LOC_SIG\n   #416 = Utf8               <init>\n   #417 = Utf8               (Ljava/io/OutputStream;)V\n   #418 = Utf8               Code\n   #419 = Utf8               LineNumberTable\n   #420 = Utf8               (Ljava/io/File;)V\n   #421 = Utf8               StackMapTable\n-  #422 = Class              #547          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-  #423 = Class              #817          // java/io/File\n-  #424 = Class              #818          // java/io/OutputStream\n-  #425 = Class              #819          // java/nio/channels/SeekableByteChannel\n-  #426 = Class              #820          // org/apache/commons/compress/archivers/zip/StreamCompressor\n-  #427 = Class              #593          // java/io/IOException\n-  #428 = Utf8               Exceptions\n-  #429 = Utf8               (Ljava/nio/channels/SeekableByteChannel;)V\n-  #430 = Utf8               isSeekable\n-  #431 = Utf8               ()Z\n-  #432 = Utf8               setEncoding\n-  #433 = Utf8               (Ljava/lang/String;)V\n-  #434 = Utf8               getEncoding\n-  #435 = Utf8               ()Ljava/lang/String;\n-  #436 = Utf8               setUseLanguageEncodingFlag\n-  #437 = Utf8               (Z)V\n-  #438 = Utf8               setCreateUnicodeExtraFields\n-  #439 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;)V\n-  #440 = Utf8               setFallbackToUTF8\n-  #441 = Utf8               setUseZip64\n-  #442 = Utf8               (Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V\n-  #443 = Utf8               finish\n-  #444 = Utf8               ()V\n-  #445 = Utf8               writeCentralDirectoryInChunks\n-  #446 = Class              #611          // java/io/ByteArrayOutputStream\n-  #447 = Class              #821          // java/util/Iterator\n-  #448 = Utf8               closeArchiveEntry\n-  #449 = Utf8               closeCopiedEntry\n-  #450 = Utf8               closeEntry\n-  #451 = Utf8               (ZZ)V\n-  #452 = Utf8               preClose\n-  #453 = Utf8               addRawArchiveEntry\n-  #454 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n-  #455 = Class              #617          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #456 = Utf8               flushDeflater\n-  #457 = Utf8               handleSizesAndCrc\n-  #458 = Utf8               (JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-  #459 = Utf8               checkIfNeedsZip64\n-  #460 = Utf8               (Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-  #461 = Utf8               isZip64Required\n-  #462 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-  #463 = Utf8               isTooLageForZip32\n-  #464 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #465 = Utf8               rewriteSizesAndCrc\n-  #466 = Utf8               putArchiveEntry\n-  #467 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n-  #468 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V\n-  #469 = Class              #822          // org/apache/commons/compress/archivers/zip/Zip64Mode\n-  #470 = Class              #808          // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-  #471 = Class              #701          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  #472 = Utf8               setDefaults\n-  #473 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #474 = Utf8               validateSizeInformation\n-  #475 = Utf8               shouldAddZip64Extra\n-  #476 = Utf8               setComment\n-  #477 = Utf8               setLevel\n-  #478 = Utf8               (I)V\n-  #479 = Utf8               setMethod\n-  #480 = Utf8               canWriteEntryData\n-  #481 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z\n-  #482 = Utf8               write\n-  #483 = Utf8               ([BII)V\n-  #484 = Utf8               writeCounted\n-  #485 = Utf8               ([B)V\n-  #486 = Utf8               copyFromZipInputStream\n-  #487 = Utf8               (Ljava/io/InputStream;)V\n-  #488 = Utf8               close\n-  #489 = Utf8               flush\n-  #490 = Utf8               deflate\n-  #491 = Utf8               writeLocalFileHeader\n-  #492 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V\n-  #493 = Class              #823          // java/nio/ByteBuffer\n-  #494 = Utf8               createLocalFileHeader\n-  #495 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B\n-  #496 = Class              #751          // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n-  #497 = Class              #369          // \"[B\"\n-  #498 = Class              #541          // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-  #499 = Utf8               addUnicodeExtraFields\n-  #500 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V\n-  #501 = Class              #824          // java/lang/String\n-  #502 = Utf8               writeDataDescriptor\n-  #503 = Utf8               writeCentralFileHeader\n-  #504 = Utf8               createCentralFileHeader\n-  #505 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B\n-  #506 = Class              #743          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData\n-  #507 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B\n-  #508 = Utf8               handleZip64Extra\n-  #509 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V\n-  #510 = Utf8               writeCentralDirectoryEnd\n-  #511 = Utf8               writeZip64CentralDirectory\n-  #512 = Utf8               writeOut\n-  #513 = Utf8               getGeneralPurposeBits\n-  #514 = Utf8               (ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #515 = Utf8               versionNeededToExtract\n-  #516 = Utf8               (IZZ)I\n-  #517 = Utf8               usesDataDescriptor\n-  #518 = Utf8               (IZ)Z\n-  #519 = Utf8               versionNeededToExtractMethod\n-  #520 = Utf8               (I)I\n-  #521 = Utf8               createArchiveEntry\n-  #522 = Utf8               (Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/ArchiveEntry;\n-  #523 = Utf8               getZip64Extra\n-  #524 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n-  #525 = Class              #694          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry\n-  #526 = Utf8               hasZip64Extra\n-  #527 = Utf8               getEffectiveZip64Mode\n-  #528 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-  #529 = Utf8               getEntryEncoding\n-  #530 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #531 = Class              #825          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #532 = Utf8               getName\n-  #533 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/nio/ByteBuffer;\n-  #534 = Utf8               destroy\n-  #535 = Utf8               <clinit>\n-  #536 = Utf8               SourceFile\n-  #537 = Utf8               ZipArchiveOutputStream.java\n-  #538 = Utf8               java/util/zip/ZipEntry\n-  #539 = Utf8               java/util/zip/Deflater\n-  #540 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #541 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-  #542 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n-  #543 = NameAndType        #416:#444     // \"<init>\":()V\n-  #544 = NameAndType        #355:#356     // finished:Z\n-  #545 = Utf8\n-  #546 = NameAndType        #372:#362     // comment:Ljava/lang/String;\n-  #547 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-  #548 = NameAndType        #373:#303     // level:I\n-  #549 = NameAndType        #374:#356     // hasCompressionLevelChanged:Z\n-  #550 = NameAndType        #375:#303     // method:I\n-  #551 = Utf8               java/util/LinkedList\n-  #552 = NameAndType        #376:#377     // entries:Ljava/util/List;\n-  #553 = NameAndType        #382:#383     // cdOffset:J\n-  #554 = NameAndType        #384:#383     // cdLength:J\n-  #555 = Utf8               java/util/HashMap\n-  #556 = NameAndType        #388:#389     // metaData:Ljava/util/Map;\n-  #557 = Utf8               UTF8\n-  #558 = NameAndType        #391:#362     // encoding:Ljava/lang/String;\n-  #559 = NameAndType        #826:#827     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #560 = NameAndType        #392:#393     // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #561 = NameAndType        #400:#356     // useUTF8Flag:Z\n-  #562 = NameAndType        #401:#356     // fallbackToUTF8:Z\n-  #563 = NameAndType        #828:#403     // NEVER:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n-  #564 = NameAndType        #402:#403     // createUnicodeExtraFields:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n-  #565 = NameAndType        #404:#356     // hasUsedZip64:Z\n-  #566 = Class              #822          // org/apache/commons/compress/archivers/zip/Zip64Mode\n-  #567 = NameAndType        #829:#406     // AsNeeded:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-  #568 = NameAndType        #405:#406     // zip64Mode:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-  #569 = NameAndType        #407:#369     // copyBuffer:[B\n-  #570 = Class              #830          // java/util/Calendar\n-  #571 = NameAndType        #831:#832     // getInstance:()Ljava/util/Calendar;\n-  #572 = NameAndType        #408:#409     // calendarInstance:Ljava/util/Calendar;\n-  #573 = NameAndType        #398:#399     // out:Ljava/io/OutputStream;\n-  #574 = NameAndType        #396:#397     // channel:Ljava/nio/channels/SeekableByteChannel;\n-  #575 = NameAndType        #416:#833     // \"<init>\":(IZ)V\n-  #576 = NameAndType        #394:#395     // def:Ljava/util/zip/Deflater;\n-  #577 = Class              #820          // org/apache/commons/compress/archivers/zip/StreamCompressor\n-  #578 = NameAndType        #834:#835     // create:(Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-  #579 = NameAndType        #380:#381     // streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-  #580 = Class              #817          // java/io/File\n-  #581 = NameAndType        #836:#837     // toPath:()Ljava/nio/file/Path;\n-  #582 = Class              #838          // java/nio/file/StandardOpenOption\n-  #583 = NameAndType        #839:#840     // CREATE:Ljava/nio/file/StandardOpenOption;\n-  #584 = NameAndType        #841:#840     // WRITE:Ljava/nio/file/StandardOpenOption;\n-  #585 = NameAndType        #842:#840     // READ:Ljava/nio/file/StandardOpenOption;\n-  #586 = NameAndType        #843:#840     // TRUNCATE_EXISTING:Ljava/nio/file/StandardOpenOption;\n-  #587 = Class              #844          // java/util/EnumSet\n-  #588 = NameAndType        #845:#846     // of:(Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;\n-  #589 = Utf8               java/nio/file/attribute/FileAttribute\n-  #590 = Class              #847          // java/nio/file/Files\n-  #591 = NameAndType        #848:#849     // newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n-  #592 = NameAndType        #834:#850     // create:(Ljava/nio/channels/SeekableByteChannel;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-  #593 = Utf8               java/io/IOException\n-  #594 = Class              #851          // org/apache/commons/compress/utils/IOUtils\n-  #595 = NameAndType        #852:#853     // closeQuietly:(Ljava/io/Closeable;)V\n-  #596 = Utf8               java/io/FileOutputStream\n-  #597 = NameAndType        #416:#420     // \"<init>\":(Ljava/io/File;)V\n-  #598 = NameAndType        #854:#855     // isUTF8:(Ljava/lang/String;)Z\n-  #599 = Utf8               This archive has already been finished\n-  #600 = NameAndType        #416:#433     // \"<init>\":(Ljava/lang/String;)V\n-  #601 = NameAndType        #370:#371     // entry:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;\n-  #602 = Utf8               This archive contains unclosed entries.\n-  #603 = NameAndType        #856:#857     // getTotalBytesWritten:()J\n-  #604 = NameAndType        #445:#444     // writeCentralDirectoryInChunks:()V\n-  #605 = NameAndType        #511:#444     // writeZip64CentralDirectory:()V\n-  #606 = NameAndType        #510:#444     // writeCentralDirectoryEnd:()V\n-  #607 = Class              #858          // java/util/Map\n-  #608 = NameAndType        #859:#444     // clear:()V\n-  #609 = Class              #860          // java/util/List\n-  #610 = NameAndType        #488:#444     // close:()V\n-  #611 = Utf8               java/io/ByteArrayOutputStream\n-  #612 = NameAndType        #416:#478     // \"<init>\":(I)V\n-  #613 = NameAndType        #861:#862     // iterator:()Ljava/util/Iterator;\n-  #614 = Class              #821          // java/util/Iterator\n-  #615 = NameAndType        #863:#431     // hasNext:()Z\n-  #616 = NameAndType        #864:#865     // next:()Ljava/lang/Object;\n-  #617 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #618 = NameAndType        #504:#505     // createCentralFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B\n-  #619 = NameAndType        #482:#485     // write:([B)V\n-  #620 = NameAndType        #866:#867     // toByteArray:()[B\n-  #621 = NameAndType        #484:#485     // writeCounted:([B)V\n-  #622 = NameAndType        #868:#444     // reset:()V\n-  #623 = NameAndType        #452:#444     // preClose:()V\n-  #624 = NameAndType        #456:#444     // flushDeflater:()V\n-  #625 = NameAndType        #869:#870     // access$000:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n-  #626 = NameAndType        #871:#857     // getCrc32:()J\n-  #627 = NameAndType        #872:#857     // getBytesRead:()J\n-  #628 = NameAndType        #873:#874     // access$102:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n-  #629 = NameAndType        #875:#876     // access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #630 = NameAndType        #527:#528     // getEffectiveZip64Mode:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-  #631 = NameAndType        #457:#458     // handleSizesAndCrc:(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-  #632 = NameAndType        #450:#451     // closeEntry:(ZZ)V\n-  #633 = NameAndType        #877:#857     // getSize:()J\n-  #634 = NameAndType        #459:#460     // checkIfNeedsZip64:(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-  #635 = NameAndType        #465:#437     // rewriteSizesAndCrc:(Z)V\n-  #636 = NameAndType        #502:#473     // writeDataDescriptor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #637 = Utf8               Stream has already been finished\n-  #638 = Utf8               No current entry to close\n-  #639 = NameAndType        #878:#879     // access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n-  #640 = NameAndType        #368:#369     // EMPTY:[B\n-  #641 = NameAndType        #482:#483     // write:([BII)V\n-  #642 = NameAndType        #416:#473     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #643 = NameAndType        #526:#464     // hasZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #644 = NameAndType        #880:#881     // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #645 = NameAndType        #882:#883     // removeExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-  #646 = NameAndType        #884:#857     // getCrc:()J\n-  #647 = Utf8               org/apache/commons/compress/archivers/ArchiveEntry\n-  #648 = NameAndType        #885:#857     // getCompressedSize:()J\n-  #649 = NameAndType        #466:#468     // putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V\n-  #650 = NameAndType        #486:#487     // copyFromZipInputStream:(Ljava/io/InputStream;)V\n-  #651 = NameAndType        #449:#437     // closeCopiedEntry:(Z)V\n-  #652 = NameAndType        #886:#887     // getMethod:()I\n-  #653 = NameAndType        #888:#870     // access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n-  #654 = NameAndType        #889:#890     // setSize:(J)V\n-  #655 = NameAndType        #891:#890     // setCompressedSize:(J)V\n-  #656 = NameAndType        #892:#890     // setCrc:(J)V\n-  #657 = Utf8               java/util/zip/ZipException\n-  #658 = Utf8               java/lang/StringBuilder\n-  #659 = Utf8               bad CRC checksum for entry\n-  #660 = NameAndType        #893:#894     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #661 = NameAndType        #532:#435     // getName:()Ljava/lang/String;\n-  #662 = Utf8               :\n-  #663 = Class              #895          // java/lang/Long\n-  #664 = NameAndType        #896:#897     // toHexString:(J)Ljava/lang/String;\n-  #665 = Utf8                instead of\n-  #666 = NameAndType        #898:#435     // toString:()Ljava/lang/String;\n-  #667 = Utf8               bad size for entry\n-  #668 = NameAndType        #893:#899     // append:(J)Ljava/lang/StringBuilder;\n-  #669 = NameAndType        #461:#462     // isZip64Required:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-  #670 = NameAndType        #900:#406     // Never:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-  #671 = Utf8               org/apache/commons/compress/archivers/zip/Zip64RequiredException\n-  #672 = NameAndType        #901:#902     // getEntryTooBigMessage:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n-  #673 = NameAndType        #903:#406     // Always:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-  #674 = NameAndType        #463:#464     // isTooLageForZip32:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #675 = Class              #819          // java/nio/channels/SeekableByteChannel\n-  #676 = NameAndType        #904:#857     // position:()J\n-  #677 = NameAndType        #905:#870     // access$400:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n-  #678 = NameAndType        #904:#906     // position:(J)Ljava/nio/channels/SeekableByteChannel;\n-  #679 = Class              #907          // org/apache/commons/compress/archivers/zip/ZipLong\n-  #680 = NameAndType        #908:#909     // getBytes:(J)[B\n-  #681 = NameAndType        #512:#485     // writeOut:([B)V\n-  #682 = NameAndType        #910:#911     // ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #683 = NameAndType        #908:#867     // getBytes:()[B\n-  #684 = NameAndType        #532:#533     // getName:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/nio/ByteBuffer;\n-  #685 = Class              #823          // java/nio/ByteBuffer\n-  #686 = NameAndType        #912:#887     // limit:()I\n-  #687 = NameAndType        #904:#887     // position:()I\n-  #688 = NameAndType        #515:#516     // versionNeededToExtract:(IZZ)I\n-  #689 = Class              #913          // org/apache/commons/compress/archivers/zip/ZipShort\n-  #690 = NameAndType        #908:#914     // getBytes:(I)[B\n-  #691 = NameAndType        #915:#444     // setExtra:()V\n-  #692 = NameAndType        #916:#879     // access$500:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n-  #693 = NameAndType        #448:#444     // closeArchiveEntry:()V\n-  #694 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry\n-  #695 = NameAndType        #416:#917     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n-  #696 = NameAndType        #918:#919     // add:(Ljava/lang/Object;)Z\n-  #697 = NameAndType        #472:#473     // setDefaults:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #698 = NameAndType        #474:#442     // validateSizeInformation:(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V\n-  #699 = NameAndType        #475:#462     // shouldAddZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-  #700 = NameAndType        #523:#524     // getZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n-  #701 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  #702 = NameAndType        #416:#890     // \"<init>\":(J)V\n-  #703 = NameAndType        #385:#920     // ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #704 = NameAndType        #889:#921     // setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #705 = NameAndType        #891:#921     // setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #706 = NameAndType        #477:#478     // setLevel:(I)V\n-  #707 = NameAndType        #491:#492     // writeLocalFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V\n-  #708 = NameAndType        #479:#478     // setMethod:(I)V\n-  #709 = NameAndType        #922:#857     // getTime:()J\n-  #710 = Class              #923          // java/lang/System\n-  #711 = NameAndType        #924:#857     // currentTimeMillis:()J\n-  #712 = NameAndType        #925:#890     // setTime:(J)V\n-  #713 = Utf8               uncompressed size is required for STORED method when not writing to a file\n-  #714 = Utf8               crc checksum is required for STORED method when not writing to a file\n-  #715 = Utf8               java/lang/IllegalArgumentException\n-  #716 = Utf8               Invalid compression level:\n-  #717 = NameAndType        #893:#926     // append:(I)Ljava/lang/StringBuilder;\n-  #718 = Class              #927          // org/apache/commons/compress/archivers/zip/ZipMethod\n-  #719 = NameAndType        #928:#929     // IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #720 = NameAndType        #930:#887     // getCode:()I\n-  #721 = NameAndType        #931:#929     // UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #722 = Class              #932          // org/apache/commons/compress/archivers/zip/ZipUtil\n-  #723 = NameAndType        #933:#464     // canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #724 = Utf8               java/lang/IllegalStateException\n-  #725 = Utf8               No current entry\n-  #726 = NameAndType        #934:#473     // checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #727 = NameAndType        #482:#935     // write:([BIII)J\n-  #728 = NameAndType        #936:#890     // count:(J)V\n-  #729 = NameAndType        #937:#938     // access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n-  #730 = Class              #939          // java/io/InputStream\n-  #731 = NameAndType        #940:#941     // read:([B)I\n-  #732 = NameAndType        #484:#483     // writeCounted:([BII)V\n-  #733 = NameAndType        #936:#478     // count:(I)V\n-  #734 = NameAndType        #443:#444     // finish:()V\n-  #735 = NameAndType        #534:#444     // destroy:()V\n-  #736 = Class              #818          // java/io/OutputStream\n-  #737 = NameAndType        #489:#444     // flush:()V\n-  #738 = NameAndType        #490:#444     // deflate:()V\n-  #739 = Class              #825          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #740 = NameAndType        #942:#855     // canEncode:(Ljava/lang/String;)Z\n-  #741 = NameAndType        #499:#500     // addUnicodeExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V\n-  #742 = NameAndType        #494:#495     // createLocalFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B\n-  #743 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData\n-  #744 = NameAndType        #517:#518     // usesDataDescriptor:(IZ)Z\n-  #745 = NameAndType        #416:#943     // \"<init>\":(JZLorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n-  #746 = NameAndType        #944:#945     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #747 = NameAndType        #946:#874     // access$402:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n-  #748 = NameAndType        #947:#874     // access$002:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n-  #749 = NameAndType        #948:#881     // ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #750 = NameAndType        #949:#950     // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #751 = Utf8               org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n-  #752 = NameAndType        #951:#887     // getAlignment:()I\n-  #753 = NameAndType        #951:#952     // getAlignment:()S\n-  #754 = NameAndType        #953:#431     // allowMethodChange:()Z\n-  #755 = NameAndType        #954:#867     // getLocalFileDataExtra:()[B\n-  #756 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n-  #757 = NameAndType        #416:#955     // \"<init>\":(IZI)V\n-  #758 = NameAndType        #956:#957     // addExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n-  #759 = NameAndType        #410:#369     // LFH_SIG:[B\n-  #760 = NameAndType        #958:#959     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #761 = NameAndType        #960:#961     // putShort:(I[BI)V\n-  #762 = NameAndType        #513:#514     // getGeneralPurposeBits:(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #763 = NameAndType        #962:#963     // encode:([BI)V\n-  #764 = NameAndType        #964:#965     // toDosTime:(Ljava/util/Calendar;J[BI)V\n-  #765 = NameAndType        #966:#967     // putLong:(J[BI)V\n-  #766 = NameAndType        #386:#369     // LZERO:[B\n-  #767 = NameAndType        #966:#963     // putLong:([BI)V\n-  #768 = NameAndType        #968:#867     // array:()[B\n-  #769 = NameAndType        #969:#887     // arrayOffset:()I\n-  #770 = NameAndType        #970:#403     // ALWAYS:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n-  #771 = Utf8               org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n-  #772 = NameAndType        #416:#971     // \"<init>\":(Ljava/lang/String;[BII)V\n-  #773 = NameAndType        #972:#435     // getComment:()Ljava/lang/String;\n-  #774 = Class              #824          // java/lang/String\n-  #775 = NameAndType        #973:#919     // equals:(Ljava/lang/Object;)Z\n-  #776 = NameAndType        #529:#530     // getEntryEncoding:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #777 = NameAndType        #962:#974     // encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-  #778 = Utf8               org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n-  #779 = NameAndType        #411:#369     // DD_SIG:[B\n-  #780 = NameAndType        #975:#976     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #781 = NameAndType        #977:#978     // access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)J\n-  #782 = Utf8               archive\\'s size exceeds the limit of 4GByte.\n-  #783 = NameAndType        #508:#509     // handleZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V\n-  #784 = NameAndType        #504:#507     // createCentralFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B\n-  #785 = NameAndType        #979:#867     // getCentralDirectoryExtra:()[B\n-  #786 = NameAndType        #412:#369     // CFH_SIG:[B\n-  #787 = NameAndType        #980:#887     // getPlatform:()I\n-  #788 = NameAndType        #981:#982     // access$900:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)Z\n-  #789 = NameAndType        #385:#369     // ZERO:[B\n-  #790 = NameAndType        #983:#887     // getInternalAttributes:()I\n-  #791 = NameAndType        #984:#857     // getExternalAttributes:()J\n-  #792 = Class              #985          // java/lang/Math\n-  #793 = NameAndType        #986:#987     // min:(JJ)J\n-  #794 = NameAndType        #988:#921     // setRelativeHeaderOffset:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #795 = NameAndType        #413:#369     // EOCD_SIG:[B\n-  #796 = NameAndType        #989:#887     // size:()I\n-  #797 = Utf8               archive contains more than 65535 entries.\n-  #798 = NameAndType        #986:#990     // min:(II)I\n-  #799 = NameAndType        #414:#369     // ZIP64_EOCD_SIG:[B\n-  #800 = NameAndType        #415:#369     // ZIP64_EOCD_LOC_SIG:[B\n-  #801 = NameAndType        #387:#369     // ONE:[B\n-  #802 = NameAndType        #512:#483     // writeOut:([BII)V\n-  #803 = NameAndType        #991:#437     // useUTF8ForNames:(Z)V\n-  #804 = NameAndType        #992:#437     // useDataDescriptor:(Z)V\n-  #805 = NameAndType        #519:#520     // versionNeededToExtractMethod:(I)I\n-  #806 = NameAndType        #416:#993     // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-  #807 = NameAndType        #994:#938     // access$502:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n-  #808 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-  #809 = NameAndType        #995:#957     // addAsFirstExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n-  #810 = NameAndType        #996:#393     // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #811 = NameAndType        #410:#911     // LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #812 = NameAndType        #411:#911     // DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #813 = NameAndType        #412:#911     // CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #814 = Utf8               org/apache/commons/compress/archivers/ArchiveOutputStream\n-  #815 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1\n-  #816 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy\n-  #817 = Utf8               java/io/File\n-  #818 = Utf8               java/io/OutputStream\n-  #819 = Utf8               java/nio/channels/SeekableByteChannel\n-  #820 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor\n-  #821 = Utf8               java/util/Iterator\n-  #822 = Utf8               org/apache/commons/compress/archivers/zip/Zip64Mode\n-  #823 = Utf8               java/nio/ByteBuffer\n-  #824 = Utf8               java/lang/String\n-  #825 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #826 = Utf8               getZipEncoding\n-  #827 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #828 = Utf8               NEVER\n-  #829 = Utf8               AsNeeded\n-  #830 = Utf8               java/util/Calendar\n-  #831 = Utf8               getInstance\n-  #832 = Utf8               ()Ljava/util/Calendar;\n-  #833 = Utf8               (IZ)V\n-  #834 = Utf8               create\n-  #835 = Utf8               (Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-  #836 = Utf8               toPath\n-  #837 = Utf8               ()Ljava/nio/file/Path;\n-  #838 = Utf8               java/nio/file/StandardOpenOption\n-  #839 = Utf8               CREATE\n-  #840 = Utf8               Ljava/nio/file/StandardOpenOption;\n-  #841 = Utf8               WRITE\n-  #842 = Utf8               READ\n-  #843 = Utf8               TRUNCATE_EXISTING\n-  #844 = Utf8               java/util/EnumSet\n-  #845 = Utf8               of\n-  #846 = Utf8               (Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;\n-  #847 = Utf8               java/nio/file/Files\n-  #848 = Utf8               newByteChannel\n-  #849 = Utf8               (Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n-  #850 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-  #851 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #852 = Utf8               closeQuietly\n-  #853 = Utf8               (Ljava/io/Closeable;)V\n-  #854 = Utf8               isUTF8\n-  #855 = Utf8               (Ljava/lang/String;)Z\n-  #856 = Utf8               getTotalBytesWritten\n-  #857 = Utf8               ()J\n-  #858 = Utf8               java/util/Map\n-  #859 = Utf8               clear\n-  #860 = Utf8               java/util/List\n-  #861 = Utf8               iterator\n-  #862 = Utf8               ()Ljava/util/Iterator;\n-  #863 = Utf8               hasNext\n-  #864 = Utf8               next\n-  #865 = Utf8               ()Ljava/lang/Object;\n-  #866 = Utf8               toByteArray\n-  #867 = Utf8               ()[B\n-  #868 = Utf8               reset\n-  #869 = Utf8               access$000\n-  #870 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n-  #871 = Utf8               getCrc32\n-  #872 = Utf8               getBytesRead\n-  #873 = Utf8               access$102\n-  #874 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n-  #875 = Utf8               access$200\n-  #876 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #877 = Utf8               getSize\n-  #878 = Utf8               access$300\n-  #879 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n-  #880 = Utf8               HEADER_ID\n-  #881 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #882 = Utf8               removeExtraField\n-  #883 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-  #884 = Utf8               getCrc\n-  #885 = Utf8               getCompressedSize\n-  #886 = Utf8               getMethod\n-  #887 = Utf8               ()I\n-  #888 = Utf8               access$100\n-  #889 = Utf8               setSize\n-  #890 = Utf8               (J)V\n-  #891 = Utf8               setCompressedSize\n-  #892 = Utf8               setCrc\n-  #893 = Utf8               append\n-  #894 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #895 = Utf8               java/lang/Long\n-  #896 = Utf8               toHexString\n-  #897 = Utf8               (J)Ljava/lang/String;\n-  #898 = Utf8               toString\n-  #899 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #900 = Utf8               Never\n-  #901 = Utf8               getEntryTooBigMessage\n-  #902 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n-  #903 = Utf8               Always\n-  #904 = Utf8               position\n-  #905 = Utf8               access$400\n-  #906 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n-  #907 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-  #908 = Utf8               getBytes\n-  #909 = Utf8               (J)[B\n-  #910 = Utf8               ZIP64_MAGIC\n-  #911 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #912 = Utf8               limit\n-  #913 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-  #914 = Utf8               (I)[B\n-  #915 = Utf8               setExtra\n-  #916 = Utf8               access$500\n-  #917 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n-  #918 = Utf8               add\n-  #919 = Utf8               (Ljava/lang/Object;)Z\n-  #920 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #921 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #922 = Utf8               getTime\n-  #923 = Utf8               java/lang/System\n-  #924 = Utf8               currentTimeMillis\n-  #925 = Utf8               setTime\n-  #926 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #927 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n-  #928 = Utf8               IMPLODING\n-  #929 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #930 = Utf8               getCode\n-  #931 = Utf8               UNSHRINKING\n-  #932 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n-  #933 = Utf8               canHandleEntryData\n-  #934 = Utf8               checkRequestedFeatures\n-  #935 = Utf8               ([BIII)J\n-  #936 = Utf8               count\n-  #937 = Utf8               access$302\n-  #938 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n-  #939 = Utf8               java/io/InputStream\n-  #940 = Utf8               read\n-  #941 = Utf8               ([B)I\n-  #942 = Utf8               canEncode\n-  #943 = Utf8               (JZLorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n-  #944 = Utf8               put\n-  #945 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #946 = Utf8               access$402\n-  #947 = Utf8               access$002\n-  #948 = Utf8               ID\n-  #949 = Utf8               getExtraField\n-  #950 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #951 = Utf8               getAlignment\n-  #952 = Utf8               ()S\n-  #953 = Utf8               allowMethodChange\n-  #954 = Utf8               getLocalFileDataExtra\n-  #955 = Utf8               (IZI)V\n-  #956 = Utf8               addExtraField\n-  #957 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n-  #958 = Utf8               arraycopy\n-  #959 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #960 = Utf8               putShort\n-  #961 = Utf8               (I[BI)V\n-  #962 = Utf8               encode\n-  #963 = Utf8               ([BI)V\n-  #964 = Utf8               toDosTime\n-  #965 = Utf8               (Ljava/util/Calendar;J[BI)V\n-  #966 = Utf8               putLong\n-  #967 = Utf8               (J[BI)V\n-  #968 = Utf8               array\n-  #969 = Utf8               arrayOffset\n-  #970 = Utf8               ALWAYS\n-  #971 = Utf8               (Ljava/lang/String;[BII)V\n-  #972 = Utf8               getComment\n-  #973 = Utf8               equals\n-  #974 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-  #975 = Utf8               get\n-  #976 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #977 = Utf8               access$800\n-  #978 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)J\n-  #979 = Utf8               getCentralDirectoryExtra\n-  #980 = Utf8               getPlatform\n-  #981 = Utf8               access$900\n-  #982 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)Z\n-  #983 = Utf8               getInternalAttributes\n-  #984 = Utf8               getExternalAttributes\n-  #985 = Utf8               java/lang/Math\n-  #986 = Utf8               min\n-  #987 = Utf8               (JJ)J\n-  #988 = Utf8               setRelativeHeaderOffset\n-  #989 = Utf8               size\n-  #990 = Utf8               (II)I\n-  #991 = Utf8               useUTF8ForNames\n-  #992 = Utf8               useDataDescriptor\n-  #993 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n-  #994 = Utf8               access$502\n-  #995 = Utf8               addAsFirstExtraField\n-  #996 = Utf8               UTF8_ZIP_ENCODING\n+  #422 = Class              #798          // java/io/File\n+  #423 = Class              #799          // java/io/OutputStream\n+  #424 = Class              #800          // java/nio/channels/SeekableByteChannel\n+  #425 = Class              #801          // org/apache/commons/compress/archivers/zip/StreamCompressor\n+  #426 = Utf8               Exceptions\n+  #427 = Utf8               (Ljava/nio/channels/SeekableByteChannel;)V\n+  #428 = Utf8               isSeekable\n+  #429 = Utf8               ()Z\n+  #430 = Utf8               setEncoding\n+  #431 = Utf8               (Ljava/lang/String;)V\n+  #432 = Utf8               getEncoding\n+  #433 = Utf8               ()Ljava/lang/String;\n+  #434 = Utf8               setUseLanguageEncodingFlag\n+  #435 = Utf8               (Z)V\n+  #436 = Utf8               setCreateUnicodeExtraFields\n+  #437 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;)V\n+  #438 = Utf8               setFallbackToUTF8\n+  #439 = Utf8               setUseZip64\n+  #440 = Utf8               (Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V\n+  #441 = Utf8               finish\n+  #442 = Utf8               ()V\n+  #443 = Utf8               writeCentralDirectoryInChunks\n+  #444 = Class              #802          // java/util/Iterator\n+  #445 = Utf8               closeArchiveEntry\n+  #446 = Utf8               closeCopiedEntry\n+  #447 = Utf8               closeEntry\n+  #448 = Utf8               (ZZ)V\n+  #449 = Utf8               preClose\n+  #450 = Utf8               addRawArchiveEntry\n+  #451 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n+  #452 = Utf8               flushDeflater\n+  #453 = Utf8               handleSizesAndCrc\n+  #454 = Utf8               (JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+  #455 = Utf8               checkIfNeedsZip64\n+  #456 = Utf8               (Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+  #457 = Utf8               isZip64Required\n+  #458 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+  #459 = Utf8               isTooLageForZip32\n+  #460 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #461 = Utf8               rewriteSizesAndCrc\n+  #462 = Utf8               putArchiveEntry\n+  #463 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n+  #464 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V\n+  #465 = Class              #803          // org/apache/commons/compress/archivers/zip/Zip64Mode\n+  #466 = Utf8               setDefaults\n+  #467 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #468 = Utf8               validateSizeInformation\n+  #469 = Utf8               shouldAddZip64Extra\n+  #470 = Utf8               setComment\n+  #471 = Utf8               setLevel\n+  #472 = Utf8               (I)V\n+  #473 = Utf8               setMethod\n+  #474 = Utf8               canWriteEntryData\n+  #475 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z\n+  #476 = Utf8               write\n+  #477 = Utf8               ([BII)V\n+  #478 = Utf8               writeCounted\n+  #479 = Utf8               ([B)V\n+  #480 = Utf8               copyFromZipInputStream\n+  #481 = Utf8               (Ljava/io/InputStream;)V\n+  #482 = Utf8               close\n+  #483 = Utf8               flush\n+  #484 = Utf8               deflate\n+  #485 = Utf8               writeLocalFileHeader\n+  #486 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V\n+  #487 = Class              #804          // java/nio/ByteBuffer\n+  #488 = Utf8               createLocalFileHeader\n+  #489 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B\n+  #490 = Class              #369          // \"[B\"\n+  #491 = Utf8               addUnicodeExtraFields\n+  #492 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V\n+  #493 = Class              #805          // java/lang/String\n+  #494 = Utf8               writeDataDescriptor\n+  #495 = Utf8               writeCentralFileHeader\n+  #496 = Utf8               createCentralFileHeader\n+  #497 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B\n+  #498 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B\n+  #499 = Utf8               handleZip64Extra\n+  #500 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V\n+  #501 = Utf8               writeCentralDirectoryEnd\n+  #502 = Utf8               writeZip64CentralDirectory\n+  #503 = Utf8               writeOut\n+  #504 = Utf8               getGeneralPurposeBits\n+  #505 = Utf8               (ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #506 = Utf8               versionNeededToExtract\n+  #507 = Utf8               (IZZ)I\n+  #508 = Utf8               usesDataDescriptor\n+  #509 = Utf8               (IZ)Z\n+  #510 = Utf8               versionNeededToExtractMethod\n+  #511 = Utf8               (I)I\n+  #512 = Utf8               createArchiveEntry\n+  #513 = Utf8               (Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+  #514 = Utf8               getZip64Extra\n+  #515 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n+  #516 = Utf8               hasZip64Extra\n+  #517 = Utf8               getEffectiveZip64Mode\n+  #518 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+  #519 = Utf8               getEntryEncoding\n+  #520 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #521 = Class              #806          // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #522 = Utf8               getName\n+  #523 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/nio/ByteBuffer;\n+  #524 = Utf8               destroy\n+  #525 = Utf8               <clinit>\n+  #526 = Utf8               SourceFile\n+  #527 = Utf8               ZipArchiveOutputStream.java\n+  #528 = Utf8               java/util/zip/ZipEntry\n+  #529 = Utf8               java/util/zip/Deflater\n+  #530 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #531 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+  #532 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n+  #533 = NameAndType        #416:#442     // \"<init>\":()V\n+  #534 = NameAndType        #355:#356     // finished:Z\n+  #535 = Utf8\n+  #536 = NameAndType        #372:#362     // comment:Ljava/lang/String;\n+  #537 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+  #538 = NameAndType        #373:#303     // level:I\n+  #539 = NameAndType        #374:#356     // hasCompressionLevelChanged:Z\n+  #540 = NameAndType        #375:#303     // method:I\n+  #541 = Utf8               java/util/LinkedList\n+  #542 = NameAndType        #376:#377     // entries:Ljava/util/List;\n+  #543 = NameAndType        #382:#383     // cdOffset:J\n+  #544 = NameAndType        #384:#383     // cdLength:J\n+  #545 = Utf8               java/util/HashMap\n+  #546 = NameAndType        #388:#389     // metaData:Ljava/util/Map;\n+  #547 = Utf8               UTF8\n+  #548 = NameAndType        #391:#362     // encoding:Ljava/lang/String;\n+  #549 = NameAndType        #807:#808     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #550 = NameAndType        #392:#393     // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #551 = NameAndType        #400:#356     // useUTF8Flag:Z\n+  #552 = NameAndType        #401:#356     // fallbackToUTF8:Z\n+  #553 = NameAndType        #809:#403     // NEVER:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n+  #554 = NameAndType        #402:#403     // createUnicodeExtraFields:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n+  #555 = NameAndType        #404:#356     // hasUsedZip64:Z\n+  #556 = NameAndType        #810:#406     // AsNeeded:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+  #557 = NameAndType        #405:#406     // zip64Mode:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+  #558 = NameAndType        #407:#369     // copyBuffer:[B\n+  #559 = Class              #811          // java/util/Calendar\n+  #560 = NameAndType        #812:#813     // getInstance:()Ljava/util/Calendar;\n+  #561 = NameAndType        #408:#409     // calendarInstance:Ljava/util/Calendar;\n+  #562 = NameAndType        #398:#399     // out:Ljava/io/OutputStream;\n+  #563 = NameAndType        #396:#397     // channel:Ljava/nio/channels/SeekableByteChannel;\n+  #564 = NameAndType        #416:#814     // \"<init>\":(IZ)V\n+  #565 = NameAndType        #394:#395     // def:Ljava/util/zip/Deflater;\n+  #566 = NameAndType        #815:#816     // create:(Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+  #567 = NameAndType        #380:#381     // streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+  #568 = NameAndType        #817:#818     // toPath:()Ljava/nio/file/Path;\n+  #569 = Class              #819          // java/nio/file/StandardOpenOption\n+  #570 = NameAndType        #820:#821     // CREATE:Ljava/nio/file/StandardOpenOption;\n+  #571 = NameAndType        #822:#821     // WRITE:Ljava/nio/file/StandardOpenOption;\n+  #572 = NameAndType        #823:#821     // READ:Ljava/nio/file/StandardOpenOption;\n+  #573 = NameAndType        #824:#821     // TRUNCATE_EXISTING:Ljava/nio/file/StandardOpenOption;\n+  #574 = Class              #825          // java/util/EnumSet\n+  #575 = NameAndType        #826:#827     // of:(Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;\n+  #576 = Utf8               java/nio/file/attribute/FileAttribute\n+  #577 = Class              #828          // java/nio/file/Files\n+  #578 = NameAndType        #829:#830     // newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+  #579 = NameAndType        #815:#831     // create:(Ljava/nio/channels/SeekableByteChannel;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+  #580 = Utf8               java/io/IOException\n+  #581 = Class              #832          // org/apache/commons/compress/utils/IOUtils\n+  #582 = NameAndType        #833:#834     // closeQuietly:(Ljava/io/Closeable;)V\n+  #583 = Utf8               java/io/FileOutputStream\n+  #584 = NameAndType        #416:#420     // \"<init>\":(Ljava/io/File;)V\n+  #585 = NameAndType        #835:#836     // isUTF8:(Ljava/lang/String;)Z\n+  #586 = Utf8               This archive has already been finished\n+  #587 = NameAndType        #416:#431     // \"<init>\":(Ljava/lang/String;)V\n+  #588 = NameAndType        #370:#371     // entry:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;\n+  #589 = Utf8               This archive contains unclosed entries.\n+  #590 = NameAndType        #837:#838     // getTotalBytesWritten:()J\n+  #591 = NameAndType        #443:#442     // writeCentralDirectoryInChunks:()V\n+  #592 = NameAndType        #502:#442     // writeZip64CentralDirectory:()V\n+  #593 = NameAndType        #501:#442     // writeCentralDirectoryEnd:()V\n+  #594 = Class              #839          // java/util/Map\n+  #595 = NameAndType        #840:#442     // clear:()V\n+  #596 = Class              #841          // java/util/List\n+  #597 = NameAndType        #482:#442     // close:()V\n+  #598 = Utf8               java/io/ByteArrayOutputStream\n+  #599 = NameAndType        #416:#472     // \"<init>\":(I)V\n+  #600 = NameAndType        #842:#843     // iterator:()Ljava/util/Iterator;\n+  #601 = NameAndType        #844:#429     // hasNext:()Z\n+  #602 = NameAndType        #845:#846     // next:()Ljava/lang/Object;\n+  #603 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  #604 = NameAndType        #496:#497     // createCentralFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B\n+  #605 = NameAndType        #476:#479     // write:([B)V\n+  #606 = NameAndType        #847:#848     // toByteArray:()[B\n+  #607 = NameAndType        #478:#479     // writeCounted:([B)V\n+  #608 = NameAndType        #849:#442     // reset:()V\n+  #609 = NameAndType        #449:#442     // preClose:()V\n+  #610 = NameAndType        #452:#442     // flushDeflater:()V\n+  #611 = NameAndType        #850:#851     // access$000:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n+  #612 = NameAndType        #852:#838     // getCrc32:()J\n+  #613 = NameAndType        #853:#838     // getBytesRead:()J\n+  #614 = NameAndType        #854:#855     // access$102:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n+  #615 = NameAndType        #856:#857     // access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #616 = NameAndType        #517:#518     // getEffectiveZip64Mode:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+  #617 = NameAndType        #453:#454     // handleSizesAndCrc:(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+  #618 = NameAndType        #447:#448     // closeEntry:(ZZ)V\n+  #619 = NameAndType        #858:#838     // getSize:()J\n+  #620 = NameAndType        #455:#456     // checkIfNeedsZip64:(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+  #621 = NameAndType        #461:#435     // rewriteSizesAndCrc:(Z)V\n+  #622 = NameAndType        #494:#467     // writeDataDescriptor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #623 = Utf8               Stream has already been finished\n+  #624 = Utf8               No current entry to close\n+  #625 = NameAndType        #859:#860     // access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n+  #626 = NameAndType        #368:#369     // EMPTY:[B\n+  #627 = NameAndType        #476:#477     // write:([BII)V\n+  #628 = NameAndType        #416:#467     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #629 = NameAndType        #516:#460     // hasZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #630 = NameAndType        #861:#862     // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #631 = NameAndType        #863:#864     // removeExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+  #632 = NameAndType        #865:#838     // getCrc:()J\n+  #633 = Utf8               org/apache/commons/compress/archivers/ArchiveEntry\n+  #634 = NameAndType        #866:#838     // getCompressedSize:()J\n+  #635 = NameAndType        #462:#464     // putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V\n+  #636 = NameAndType        #480:#481     // copyFromZipInputStream:(Ljava/io/InputStream;)V\n+  #637 = NameAndType        #446:#435     // closeCopiedEntry:(Z)V\n+  #638 = NameAndType        #867:#868     // getMethod:()I\n+  #639 = NameAndType        #869:#851     // access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n+  #640 = NameAndType        #870:#871     // setSize:(J)V\n+  #641 = NameAndType        #872:#871     // setCompressedSize:(J)V\n+  #642 = NameAndType        #873:#871     // setCrc:(J)V\n+  #643 = Utf8               java/util/zip/ZipException\n+  #644 = Utf8               java/lang/StringBuilder\n+  #645 = Utf8               bad CRC checksum for entry\n+  #646 = NameAndType        #874:#875     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #647 = NameAndType        #522:#433     // getName:()Ljava/lang/String;\n+  #648 = Utf8               :\n+  #649 = Class              #876          // java/lang/Long\n+  #650 = NameAndType        #877:#878     // toHexString:(J)Ljava/lang/String;\n+  #651 = Utf8                instead of\n+  #652 = NameAndType        #879:#433     // toString:()Ljava/lang/String;\n+  #653 = Utf8               bad size for entry\n+  #654 = NameAndType        #874:#880     // append:(J)Ljava/lang/StringBuilder;\n+  #655 = NameAndType        #457:#458     // isZip64Required:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+  #656 = NameAndType        #881:#406     // Never:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+  #657 = Utf8               org/apache/commons/compress/archivers/zip/Zip64RequiredException\n+  #658 = NameAndType        #882:#883     // getEntryTooBigMessage:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n+  #659 = NameAndType        #884:#406     // Always:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+  #660 = NameAndType        #459:#460     // isTooLageForZip32:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #661 = NameAndType        #885:#838     // position:()J\n+  #662 = NameAndType        #886:#851     // access$400:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n+  #663 = NameAndType        #885:#887     // position:(J)Ljava/nio/channels/SeekableByteChannel;\n+  #664 = Class              #888          // org/apache/commons/compress/archivers/zip/ZipLong\n+  #665 = NameAndType        #889:#890     // getBytes:(J)[B\n+  #666 = NameAndType        #503:#479     // writeOut:([B)V\n+  #667 = NameAndType        #891:#892     // ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #668 = NameAndType        #889:#848     // getBytes:()[B\n+  #669 = NameAndType        #522:#523     // getName:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/nio/ByteBuffer;\n+  #670 = NameAndType        #893:#868     // limit:()I\n+  #671 = NameAndType        #885:#868     // position:()I\n+  #672 = NameAndType        #506:#507     // versionNeededToExtract:(IZZ)I\n+  #673 = Class              #894          // org/apache/commons/compress/archivers/zip/ZipShort\n+  #674 = NameAndType        #889:#895     // getBytes:(I)[B\n+  #675 = NameAndType        #896:#442     // setExtra:()V\n+  #676 = NameAndType        #897:#860     // access$500:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n+  #677 = NameAndType        #445:#442     // closeArchiveEntry:()V\n+  #678 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry\n+  #679 = NameAndType        #416:#898     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n+  #680 = NameAndType        #899:#900     // add:(Ljava/lang/Object;)Z\n+  #681 = NameAndType        #466:#467     // setDefaults:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #682 = NameAndType        #468:#440     // validateSizeInformation:(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V\n+  #683 = NameAndType        #469:#458     // shouldAddZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+  #684 = NameAndType        #514:#515     // getZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n+  #685 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+  #686 = NameAndType        #416:#871     // \"<init>\":(J)V\n+  #687 = NameAndType        #385:#901     // ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #688 = NameAndType        #870:#902     // setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #689 = NameAndType        #872:#902     // setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #690 = NameAndType        #471:#472     // setLevel:(I)V\n+  #691 = NameAndType        #485:#486     // writeLocalFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V\n+  #692 = NameAndType        #473:#472     // setMethod:(I)V\n+  #693 = NameAndType        #903:#838     // getTime:()J\n+  #694 = Class              #904          // java/lang/System\n+  #695 = NameAndType        #905:#838     // currentTimeMillis:()J\n+  #696 = NameAndType        #906:#871     // setTime:(J)V\n+  #697 = Utf8               uncompressed size is required for STORED method when not writing to a file\n+  #698 = Utf8               crc checksum is required for STORED method when not writing to a file\n+  #699 = Utf8               java/lang/IllegalArgumentException\n+  #700 = Utf8               Invalid compression level:\n+  #701 = NameAndType        #874:#907     // append:(I)Ljava/lang/StringBuilder;\n+  #702 = Class              #908          // org/apache/commons/compress/archivers/zip/ZipMethod\n+  #703 = NameAndType        #909:#910     // IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #704 = NameAndType        #911:#868     // getCode:()I\n+  #705 = NameAndType        #912:#910     // UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #706 = Class              #913          // org/apache/commons/compress/archivers/zip/ZipUtil\n+  #707 = NameAndType        #914:#460     // canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #708 = Utf8               java/lang/IllegalStateException\n+  #709 = Utf8               No current entry\n+  #710 = NameAndType        #915:#467     // checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #711 = NameAndType        #476:#916     // write:([BIII)J\n+  #712 = NameAndType        #917:#871     // count:(J)V\n+  #713 = NameAndType        #918:#919     // access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n+  #714 = Class              #920          // java/io/InputStream\n+  #715 = NameAndType        #921:#922     // read:([B)I\n+  #716 = NameAndType        #478:#477     // writeCounted:([BII)V\n+  #717 = NameAndType        #917:#472     // count:(I)V\n+  #718 = NameAndType        #441:#442     // finish:()V\n+  #719 = NameAndType        #524:#442     // destroy:()V\n+  #720 = NameAndType        #483:#442     // flush:()V\n+  #721 = NameAndType        #484:#442     // deflate:()V\n+  #722 = NameAndType        #923:#836     // canEncode:(Ljava/lang/String;)Z\n+  #723 = NameAndType        #491:#492     // addUnicodeExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V\n+  #724 = NameAndType        #488:#489     // createLocalFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B\n+  #725 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData\n+  #726 = NameAndType        #508:#509     // usesDataDescriptor:(IZ)Z\n+  #727 = NameAndType        #416:#924     // \"<init>\":(JZLorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n+  #728 = NameAndType        #925:#926     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #729 = NameAndType        #927:#855     // access$402:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n+  #730 = NameAndType        #928:#855     // access$002:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n+  #731 = NameAndType        #929:#862     // ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #732 = NameAndType        #930:#931     // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #733 = Utf8               org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n+  #734 = NameAndType        #932:#868     // getAlignment:()I\n+  #735 = NameAndType        #932:#933     // getAlignment:()S\n+  #736 = NameAndType        #934:#429     // allowMethodChange:()Z\n+  #737 = NameAndType        #935:#848     // getLocalFileDataExtra:()[B\n+  #738 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n+  #739 = NameAndType        #416:#936     // \"<init>\":(IZI)V\n+  #740 = NameAndType        #937:#938     // addExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n+  #741 = NameAndType        #410:#369     // LFH_SIG:[B\n+  #742 = NameAndType        #939:#940     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #743 = NameAndType        #941:#942     // putShort:(I[BI)V\n+  #744 = NameAndType        #504:#505     // getGeneralPurposeBits:(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #745 = NameAndType        #943:#944     // encode:([BI)V\n+  #746 = NameAndType        #945:#946     // toDosTime:(Ljava/util/Calendar;J[BI)V\n+  #747 = NameAndType        #947:#948     // putLong:(J[BI)V\n+  #748 = NameAndType        #386:#369     // LZERO:[B\n+  #749 = NameAndType        #947:#944     // putLong:([BI)V\n+  #750 = NameAndType        #949:#848     // array:()[B\n+  #751 = NameAndType        #950:#868     // arrayOffset:()I\n+  #752 = NameAndType        #951:#403     // ALWAYS:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n+  #753 = Utf8               org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n+  #754 = NameAndType        #416:#952     // \"<init>\":(Ljava/lang/String;[BII)V\n+  #755 = NameAndType        #953:#433     // getComment:()Ljava/lang/String;\n+  #756 = NameAndType        #954:#900     // equals:(Ljava/lang/Object;)Z\n+  #757 = NameAndType        #519:#520     // getEntryEncoding:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #758 = NameAndType        #943:#955     // encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #759 = Utf8               org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n+  #760 = NameAndType        #411:#369     // DD_SIG:[B\n+  #761 = NameAndType        #956:#957     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #762 = NameAndType        #958:#959     // access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)J\n+  #763 = Utf8               archive\\'s size exceeds the limit of 4GByte.\n+  #764 = NameAndType        #499:#500     // handleZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V\n+  #765 = NameAndType        #496:#498     // createCentralFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B\n+  #766 = NameAndType        #960:#848     // getCentralDirectoryExtra:()[B\n+  #767 = NameAndType        #412:#369     // CFH_SIG:[B\n+  #768 = NameAndType        #961:#868     // getPlatform:()I\n+  #769 = NameAndType        #962:#963     // access$900:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)Z\n+  #770 = NameAndType        #385:#369     // ZERO:[B\n+  #771 = NameAndType        #964:#868     // getInternalAttributes:()I\n+  #772 = NameAndType        #965:#838     // getExternalAttributes:()J\n+  #773 = Class              #966          // java/lang/Math\n+  #774 = NameAndType        #967:#968     // min:(JJ)J\n+  #775 = NameAndType        #969:#902     // setRelativeHeaderOffset:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #776 = NameAndType        #413:#369     // EOCD_SIG:[B\n+  #777 = NameAndType        #970:#868     // size:()I\n+  #778 = Utf8               archive contains more than 65535 entries.\n+  #779 = NameAndType        #967:#971     // min:(II)I\n+  #780 = NameAndType        #414:#369     // ZIP64_EOCD_SIG:[B\n+  #781 = NameAndType        #415:#369     // ZIP64_EOCD_LOC_SIG:[B\n+  #782 = NameAndType        #387:#369     // ONE:[B\n+  #783 = NameAndType        #503:#477     // writeOut:([BII)V\n+  #784 = NameAndType        #972:#435     // useUTF8ForNames:(Z)V\n+  #785 = NameAndType        #973:#435     // useDataDescriptor:(Z)V\n+  #786 = NameAndType        #510:#511     // versionNeededToExtractMethod:(I)I\n+  #787 = NameAndType        #416:#974     // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+  #788 = NameAndType        #975:#919     // access$502:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n+  #789 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+  #790 = NameAndType        #976:#938     // addAsFirstExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n+  #791 = NameAndType        #977:#393     // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #792 = NameAndType        #410:#892     // LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #793 = NameAndType        #411:#892     // DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #794 = NameAndType        #412:#892     // CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #795 = Utf8               org/apache/commons/compress/archivers/ArchiveOutputStream\n+  #796 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1\n+  #797 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy\n+  #798 = Utf8               java/io/File\n+  #799 = Utf8               java/io/OutputStream\n+  #800 = Utf8               java/nio/channels/SeekableByteChannel\n+  #801 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor\n+  #802 = Utf8               java/util/Iterator\n+  #803 = Utf8               org/apache/commons/compress/archivers/zip/Zip64Mode\n+  #804 = Utf8               java/nio/ByteBuffer\n+  #805 = Utf8               java/lang/String\n+  #806 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #807 = Utf8               getZipEncoding\n+  #808 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #809 = Utf8               NEVER\n+  #810 = Utf8               AsNeeded\n+  #811 = Utf8               java/util/Calendar\n+  #812 = Utf8               getInstance\n+  #813 = Utf8               ()Ljava/util/Calendar;\n+  #814 = Utf8               (IZ)V\n+  #815 = Utf8               create\n+  #816 = Utf8               (Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+  #817 = Utf8               toPath\n+  #818 = Utf8               ()Ljava/nio/file/Path;\n+  #819 = Utf8               java/nio/file/StandardOpenOption\n+  #820 = Utf8               CREATE\n+  #821 = Utf8               Ljava/nio/file/StandardOpenOption;\n+  #822 = Utf8               WRITE\n+  #823 = Utf8               READ\n+  #824 = Utf8               TRUNCATE_EXISTING\n+  #825 = Utf8               java/util/EnumSet\n+  #826 = Utf8               of\n+  #827 = Utf8               (Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;\n+  #828 = Utf8               java/nio/file/Files\n+  #829 = Utf8               newByteChannel\n+  #830 = Utf8               (Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+  #831 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+  #832 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #833 = Utf8               closeQuietly\n+  #834 = Utf8               (Ljava/io/Closeable;)V\n+  #835 = Utf8               isUTF8\n+  #836 = Utf8               (Ljava/lang/String;)Z\n+  #837 = Utf8               getTotalBytesWritten\n+  #838 = Utf8               ()J\n+  #839 = Utf8               java/util/Map\n+  #840 = Utf8               clear\n+  #841 = Utf8               java/util/List\n+  #842 = Utf8               iterator\n+  #843 = Utf8               ()Ljava/util/Iterator;\n+  #844 = Utf8               hasNext\n+  #845 = Utf8               next\n+  #846 = Utf8               ()Ljava/lang/Object;\n+  #847 = Utf8               toByteArray\n+  #848 = Utf8               ()[B\n+  #849 = Utf8               reset\n+  #850 = Utf8               access$000\n+  #851 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n+  #852 = Utf8               getCrc32\n+  #853 = Utf8               getBytesRead\n+  #854 = Utf8               access$102\n+  #855 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n+  #856 = Utf8               access$200\n+  #857 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #858 = Utf8               getSize\n+  #859 = Utf8               access$300\n+  #860 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n+  #861 = Utf8               HEADER_ID\n+  #862 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #863 = Utf8               removeExtraField\n+  #864 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+  #865 = Utf8               getCrc\n+  #866 = Utf8               getCompressedSize\n+  #867 = Utf8               getMethod\n+  #868 = Utf8               ()I\n+  #869 = Utf8               access$100\n+  #870 = Utf8               setSize\n+  #871 = Utf8               (J)V\n+  #872 = Utf8               setCompressedSize\n+  #873 = Utf8               setCrc\n+  #874 = Utf8               append\n+  #875 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #876 = Utf8               java/lang/Long\n+  #877 = Utf8               toHexString\n+  #878 = Utf8               (J)Ljava/lang/String;\n+  #879 = Utf8               toString\n+  #880 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #881 = Utf8               Never\n+  #882 = Utf8               getEntryTooBigMessage\n+  #883 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n+  #884 = Utf8               Always\n+  #885 = Utf8               position\n+  #886 = Utf8               access$400\n+  #887 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n+  #888 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+  #889 = Utf8               getBytes\n+  #890 = Utf8               (J)[B\n+  #891 = Utf8               ZIP64_MAGIC\n+  #892 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #893 = Utf8               limit\n+  #894 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+  #895 = Utf8               (I)[B\n+  #896 = Utf8               setExtra\n+  #897 = Utf8               access$500\n+  #898 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n+  #899 = Utf8               add\n+  #900 = Utf8               (Ljava/lang/Object;)Z\n+  #901 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #902 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #903 = Utf8               getTime\n+  #904 = Utf8               java/lang/System\n+  #905 = Utf8               currentTimeMillis\n+  #906 = Utf8               setTime\n+  #907 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #908 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n+  #909 = Utf8               IMPLODING\n+  #910 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #911 = Utf8               getCode\n+  #912 = Utf8               UNSHRINKING\n+  #913 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n+  #914 = Utf8               canHandleEntryData\n+  #915 = Utf8               checkRequestedFeatures\n+  #916 = Utf8               ([BIII)J\n+  #917 = Utf8               count\n+  #918 = Utf8               access$302\n+  #919 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n+  #920 = Utf8               java/io/InputStream\n+  #921 = Utf8               read\n+  #922 = Utf8               ([B)I\n+  #923 = Utf8               canEncode\n+  #924 = Utf8               (JZLorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n+  #925 = Utf8               put\n+  #926 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #927 = Utf8               access$402\n+  #928 = Utf8               access$002\n+  #929 = Utf8               ID\n+  #930 = Utf8               getExtraField\n+  #931 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #932 = Utf8               getAlignment\n+  #933 = Utf8               ()S\n+  #934 = Utf8               allowMethodChange\n+  #935 = Utf8               getLocalFileDataExtra\n+  #936 = Utf8               (IZI)V\n+  #937 = Utf8               addExtraField\n+  #938 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n+  #939 = Utf8               arraycopy\n+  #940 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #941 = Utf8               putShort\n+  #942 = Utf8               (I[BI)V\n+  #943 = Utf8               encode\n+  #944 = Utf8               ([BI)V\n+  #945 = Utf8               toDosTime\n+  #946 = Utf8               (Ljava/util/Calendar;J[BI)V\n+  #947 = Utf8               putLong\n+  #948 = Utf8               (J[BI)V\n+  #949 = Utf8               array\n+  #950 = Utf8               arrayOffset\n+  #951 = Utf8               ALWAYS\n+  #952 = Utf8               (Ljava/lang/String;[BII)V\n+  #953 = Utf8               getComment\n+  #954 = Utf8               equals\n+  #955 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #956 = Utf8               get\n+  #957 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #958 = Utf8               access$800\n+  #959 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)J\n+  #960 = Utf8               getCentralDirectoryExtra\n+  #961 = Utf8               getPlatform\n+  #962 = Utf8               access$900\n+  #963 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)Z\n+  #964 = Utf8               getInternalAttributes\n+  #965 = Utf8               getExternalAttributes\n+  #966 = Utf8               java/lang/Math\n+  #967 = Utf8               min\n+  #968 = Utf8               (JJ)J\n+  #969 = Utf8               setRelativeHeaderOffset\n+  #970 = Utf8               size\n+  #971 = Utf8               (II)I\n+  #972 = Utf8               useUTF8ForNames\n+  #973 = Utf8               useDataDescriptor\n+  #974 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n+  #975 = Utf8               access$502\n+  #976 = Utf8               addAsFirstExtraField\n+  #977 = Utf8               UTF8_ZIP_ENCODING\n {\n   static final int BUFFER_SIZE = 512;\n     descriptor: I\n     flags: (0x0018) ACC_STATIC, ACC_FINAL\n     ConstantValue: int 512\n \n   private static final int LFH_SIG_OFFSET = 0;\n@@ -5020,14 +5001,16 @@\n         28: goto          35\n         31: aload_0\n         32: getfield      #25                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n         35: areturn\n       LineNumberTable:\n         line 1583: 0\n         line 1584: 14\n+        line 1585: 25\n+        line 1584: 35\n       StackMapTable: number_of_entries = 2\n         frame_type = 252 /* append */\n           offset_delta = 31\n           locals = [ int ]\n         frame_type = 67 /* same_locals_1_stack_item */\n           stack = [ class org/apache/commons/compress/archivers/zip/ZipEncoding ]\n \n"}]}
