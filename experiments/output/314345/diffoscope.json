{"diffoscope-json-version": 1, "source1": "first/MagicNumberFileFilter.class", "source2": "second/MagicNumberFileFilter.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,205 +1,205 @@\n-  SHA-256 checksum e0acf725738ea740f1ce2869a41a2040c95a083bc269eaec0966f96f5da01707\n+  SHA-256 checksum 900983cb5b17c38687f3f7ed9336980094d152d1c77fba128ff60a781d702236\n   Compiled from \"MagicNumberFileFilter.java\"\n public class org.apache.commons.io.filefilter.MagicNumberFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #50                         // org/apache/commons/io/filefilter/MagicNumberFileFilter\n-  super_class: #51                        // org/apache/commons/io/filefilter/AbstractFileFilter\n+  this_class: #2                          // org/apache/commons/io/filefilter/MagicNumberFileFilter\n+  super_class: #8                         // org/apache/commons/io/filefilter/AbstractFileFilter\n   interfaces: 1, fields: 3, methods: 7, attributes: 1\n Constant pool:\n-    #1 = Methodref          #50.#83       // org/apache/commons/io/filefilter/MagicNumberFileFilter.\"<init>\":([BJ)V\n-    #2 = Methodref          #51.#84       // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n-    #3 = Class              #85           // java/lang/IllegalArgumentException\n-    #4 = String             #86           // The magic number cannot be null\n-    #5 = Methodref          #3.#87        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-    #6 = String             #88           // The magic number must contain at least one byte\n-    #7 = String             #89           // The offset cannot be negative\n-    #8 = Methodref          #90.#91       // org/apache/commons/io/IOUtils.byteArray:(I)[B\n-    #9 = Fieldref           #50.#92       // org/apache/commons/io/filefilter/MagicNumberFileFilter.magicNumbers:[B\n-   #10 = Methodref          #93.#94       // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #11 = Fieldref           #50.#95       // org/apache/commons/io/filefilter/MagicNumberFileFilter.byteOffset:J\n-   #12 = Methodref          #50.#96       // org/apache/commons/io/filefilter/MagicNumberFileFilter.\"<init>\":(Ljava/lang/String;J)V\n-   #13 = Methodref          #44.#97       // java/lang/String.isEmpty:()Z\n-   #14 = Methodref          #98.#99       // java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n-   #15 = Methodref          #44.#100      // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n-   #16 = Methodref          #72.#101      // java/io/File.isFile:()Z\n-   #17 = Methodref          #72.#102      // java/io/File.canRead:()Z\n-   #18 = Class              #103          // java/io/RandomAccessFile\n-   #19 = String             #104          // r\n-   #20 = Methodref          #18.#105      // java/io/RandomAccessFile.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-   #21 = Methodref          #18.#106      // java/io/RandomAccessFile.seek:(J)V\n-   #22 = Methodref          #18.#107      // java/io/RandomAccessFile.read:([B)I\n-   #23 = Methodref          #18.#108      // java/io/RandomAccessFile.close:()V\n-   #24 = Methodref          #109.#110     // java/util/Arrays.equals:([B[B)Z\n-   #25 = Class              #111          // java/lang/Throwable\n-   #26 = Methodref          #25.#112      // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-   #27 = Class              #113          // java/io/IOException\n-   #28 = Class              #114          // java/nio/file/LinkOption\n-   #29 = Methodref          #115.#116     // java/nio/file/Files.isRegularFile:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n-   #30 = Methodref          #115.#117     // java/nio/file/Files.isReadable:(Ljava/nio/file/Path;)Z\n-   #31 = Class              #118          // java/nio/file/OpenOption\n-   #32 = Methodref          #76.#119      // java/nio/channels/FileChannel.open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;\n-   #33 = Methodref          #77.#120      // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-   #34 = Methodref          #76.#121      // java/nio/channels/FileChannel.read:(Ljava/nio/ByteBuffer;)I\n-   #35 = Fieldref           #78.#122      // java/nio/file/FileVisitResult.TERMINATE:Ljava/nio/file/FileVisitResult;\n-   #36 = Methodref          #76.#108      // java/nio/channels/FileChannel.close:()V\n-   #37 = Methodref          #77.#123      // java/nio/ByteBuffer.array:()[B\n-   #38 = Methodref          #50.#124      // org/apache/commons/io/filefilter/MagicNumberFileFilter.toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n-   #39 = Class              #125          // java/lang/StringBuilder\n-   #40 = Methodref          #51.#126      // org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n-   #41 = Methodref          #39.#87       // java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n-   #42 = String             #127          // (\n-   #43 = Methodref          #39.#128      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #44 = Class              #129          // java/lang/String\n-   #45 = Methodref          #44.#130      // java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n-   #46 = String             #131          // ,\n-   #47 = Methodref          #39.#132      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #48 = String             #133          // )\n-   #49 = Methodref          #39.#126      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #50 = Class              #134          // org/apache/commons/io/filefilter/MagicNumberFileFilter\n-   #51 = Class              #135          // org/apache/commons/io/filefilter/AbstractFileFilter\n-   #52 = Class              #136          // java/io/Serializable\n-   #53 = Utf8               serialVersionUID\n-   #54 = Utf8               J\n-   #55 = Utf8               ConstantValue\n-   #56 = Long               -547733176983104172l\n-   #58 = Utf8               magicNumbers\n-   #59 = Utf8               [B\n-   #60 = Utf8               byteOffset\n-   #61 = Utf8               <init>\n-   #62 = Utf8               ([B)V\n-   #63 = Utf8               Code\n-   #64 = Utf8               LineNumberTable\n-   #65 = Utf8               ([BJ)V\n-   #66 = Utf8               StackMapTable\n-   #67 = Class              #59           // \"[B\"\n-   #68 = Utf8               (Ljava/lang/String;)V\n-   #69 = Utf8               (Ljava/lang/String;J)V\n-   #70 = Utf8               accept\n-   #71 = Utf8               (Ljava/io/File;)Z\n-   #72 = Class              #137          // java/io/File\n-   #73 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-   #74 = Class              #138          // java/nio/file/Path\n-   #75 = Class              #139          // java/nio/file/attribute/BasicFileAttributes\n-   #76 = Class              #140          // java/nio/channels/FileChannel\n-   #77 = Class              #141          // java/nio/ByteBuffer\n-   #78 = Class              #142          // java/nio/file/FileVisitResult\n-   #79 = Utf8               toString\n-   #80 = Utf8               ()Ljava/lang/String;\n-   #81 = Utf8               SourceFile\n-   #82 = Utf8               MagicNumberFileFilter.java\n-   #83 = NameAndType        #61:#65       // \"<init>\":([BJ)V\n-   #84 = NameAndType        #61:#143      // \"<init>\":()V\n-   #85 = Utf8               java/lang/IllegalArgumentException\n-   #86 = Utf8               The magic number cannot be null\n-   #87 = NameAndType        #61:#68       // \"<init>\":(Ljava/lang/String;)V\n-   #88 = Utf8               The magic number must contain at least one byte\n-   #89 = Utf8               The offset cannot be negative\n-   #90 = Class              #144          // org/apache/commons/io/IOUtils\n-   #91 = NameAndType        #145:#146     // byteArray:(I)[B\n-   #92 = NameAndType        #58:#59       // magicNumbers:[B\n-   #93 = Class              #147          // java/lang/System\n-   #94 = NameAndType        #148:#149     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #95 = NameAndType        #60:#54       // byteOffset:J\n-   #96 = NameAndType        #61:#69       // \"<init>\":(Ljava/lang/String;J)V\n-   #97 = NameAndType        #150:#151     // isEmpty:()Z\n-   #98 = Class              #152          // java/nio/charset/Charset\n-   #99 = NameAndType        #153:#154     // defaultCharset:()Ljava/nio/charset/Charset;\n-  #100 = NameAndType        #155:#156     // getBytes:(Ljava/nio/charset/Charset;)[B\n-  #101 = NameAndType        #157:#151     // isFile:()Z\n-  #102 = NameAndType        #158:#151     // canRead:()Z\n-  #103 = Utf8               java/io/RandomAccessFile\n-  #104 = Utf8               r\n-  #105 = NameAndType        #61:#159      // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-  #106 = NameAndType        #160:#161     // seek:(J)V\n-  #107 = NameAndType        #162:#163     // read:([B)I\n-  #108 = NameAndType        #164:#143     // close:()V\n-  #109 = Class              #165          // java/util/Arrays\n-  #110 = NameAndType        #166:#167     // equals:([B[B)Z\n-  #111 = Utf8               java/lang/Throwable\n-  #112 = NameAndType        #168:#169     // addSuppressed:(Ljava/lang/Throwable;)V\n-  #113 = Utf8               java/io/IOException\n-  #114 = Utf8               java/nio/file/LinkOption\n-  #115 = Class              #170          // java/nio/file/Files\n-  #116 = NameAndType        #171:#172     // isRegularFile:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n-  #117 = NameAndType        #173:#174     // isReadable:(Ljava/nio/file/Path;)Z\n-  #118 = Utf8               java/nio/file/OpenOption\n-  #119 = NameAndType        #175:#176     // open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;\n-  #120 = NameAndType        #177:#178     // allocate:(I)Ljava/nio/ByteBuffer;\n-  #121 = NameAndType        #162:#179     // read:(Ljava/nio/ByteBuffer;)I\n-  #122 = NameAndType        #180:#181     // TERMINATE:Ljava/nio/file/FileVisitResult;\n-  #123 = NameAndType        #182:#183     // array:()[B\n-  #124 = NameAndType        #184:#185     // toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n-  #125 = Utf8               java/lang/StringBuilder\n-  #126 = NameAndType        #79:#80       // toString:()Ljava/lang/String;\n-  #127 = Utf8               (\n-  #128 = NameAndType        #186:#187     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #129 = Utf8               java/lang/String\n-  #130 = NameAndType        #61:#188      // \"<init>\":([BLjava/nio/charset/Charset;)V\n-  #131 = Utf8               ,\n-  #132 = NameAndType        #186:#189     // append:(J)Ljava/lang/StringBuilder;\n-  #133 = Utf8               )\n-  #134 = Utf8               org/apache/commons/io/filefilter/MagicNumberFileFilter\n-  #135 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n-  #136 = Utf8               java/io/Serializable\n-  #137 = Utf8               java/io/File\n-  #138 = Utf8               java/nio/file/Path\n-  #139 = Utf8               java/nio/file/attribute/BasicFileAttributes\n-  #140 = Utf8               java/nio/channels/FileChannel\n-  #141 = Utf8               java/nio/ByteBuffer\n-  #142 = Utf8               java/nio/file/FileVisitResult\n-  #143 = Utf8               ()V\n-  #144 = Utf8               org/apache/commons/io/IOUtils\n-  #145 = Utf8               byteArray\n-  #146 = Utf8               (I)[B\n-  #147 = Utf8               java/lang/System\n-  #148 = Utf8               arraycopy\n-  #149 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #150 = Utf8               isEmpty\n-  #151 = Utf8               ()Z\n-  #152 = Utf8               java/nio/charset/Charset\n-  #153 = Utf8               defaultCharset\n-  #154 = Utf8               ()Ljava/nio/charset/Charset;\n-  #155 = Utf8               getBytes\n-  #156 = Utf8               (Ljava/nio/charset/Charset;)[B\n-  #157 = Utf8               isFile\n-  #158 = Utf8               canRead\n-  #159 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n-  #160 = Utf8               seek\n-  #161 = Utf8               (J)V\n-  #162 = Utf8               read\n-  #163 = Utf8               ([B)I\n-  #164 = Utf8               close\n-  #165 = Utf8               java/util/Arrays\n-  #166 = Utf8               equals\n-  #167 = Utf8               ([B[B)Z\n-  #168 = Utf8               addSuppressed\n-  #169 = Utf8               (Ljava/lang/Throwable;)V\n-  #170 = Utf8               java/nio/file/Files\n-  #171 = Utf8               isRegularFile\n-  #172 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n-  #173 = Utf8               isReadable\n-  #174 = Utf8               (Ljava/nio/file/Path;)Z\n-  #175 = Utf8               open\n-  #176 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;\n-  #177 = Utf8               allocate\n-  #178 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #179 = Utf8               (Ljava/nio/ByteBuffer;)I\n-  #180 = Utf8               TERMINATE\n-  #181 = Utf8               Ljava/nio/file/FileVisitResult;\n-  #182 = Utf8               array\n-  #183 = Utf8               ()[B\n-  #184 = Utf8               toFileVisitResult\n-  #185 = Utf8               (ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n-  #186 = Utf8               append\n-  #187 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #188 = Utf8               ([BLjava/nio/charset/Charset;)V\n-  #189 = Utf8               (J)Ljava/lang/StringBuilder;\n+    #1 = Methodref          #2.#3         // org/apache/commons/io/filefilter/MagicNumberFileFilter.\"<init>\":([BJ)V\n+    #2 = Class              #4            // org/apache/commons/io/filefilter/MagicNumberFileFilter\n+    #3 = NameAndType        #5:#6         // \"<init>\":([BJ)V\n+    #4 = Utf8               org/apache/commons/io/filefilter/MagicNumberFileFilter\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ([BJ)V\n+    #7 = Methodref          #8.#9         // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n+    #8 = Class              #10           // org/apache/commons/io/filefilter/AbstractFileFilter\n+    #9 = NameAndType        #5:#11        // \"<init>\":()V\n+   #10 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n+   #11 = Utf8               ()V\n+   #12 = Class              #13           // java/lang/IllegalArgumentException\n+   #13 = Utf8               java/lang/IllegalArgumentException\n+   #14 = String             #15           // The magic number cannot be null\n+   #15 = Utf8               The magic number cannot be null\n+   #16 = Methodref          #12.#17       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #17 = NameAndType        #5:#18        // \"<init>\":(Ljava/lang/String;)V\n+   #18 = Utf8               (Ljava/lang/String;)V\n+   #19 = String             #20           // The magic number must contain at least one byte\n+   #20 = Utf8               The magic number must contain at least one byte\n+   #21 = String             #22           // The offset cannot be negative\n+   #22 = Utf8               The offset cannot be negative\n+   #23 = Methodref          #24.#25       // org/apache/commons/io/IOUtils.byteArray:(I)[B\n+   #24 = Class              #26           // org/apache/commons/io/IOUtils\n+   #25 = NameAndType        #27:#28       // byteArray:(I)[B\n+   #26 = Utf8               org/apache/commons/io/IOUtils\n+   #27 = Utf8               byteArray\n+   #28 = Utf8               (I)[B\n+   #29 = Fieldref           #2.#30        // org/apache/commons/io/filefilter/MagicNumberFileFilter.magicNumbers:[B\n+   #30 = NameAndType        #31:#32       // magicNumbers:[B\n+   #31 = Utf8               magicNumbers\n+   #32 = Utf8               [B\n+   #33 = Methodref          #34.#35       // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #34 = Class              #36           // java/lang/System\n+   #35 = NameAndType        #37:#38       // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #36 = Utf8               java/lang/System\n+   #37 = Utf8               arraycopy\n+   #38 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #39 = Fieldref           #2.#40        // org/apache/commons/io/filefilter/MagicNumberFileFilter.byteOffset:J\n+   #40 = NameAndType        #41:#42       // byteOffset:J\n+   #41 = Utf8               byteOffset\n+   #42 = Utf8               J\n+   #43 = Methodref          #2.#44        // org/apache/commons/io/filefilter/MagicNumberFileFilter.\"<init>\":(Ljava/lang/String;J)V\n+   #44 = NameAndType        #5:#45        // \"<init>\":(Ljava/lang/String;J)V\n+   #45 = Utf8               (Ljava/lang/String;J)V\n+   #46 = Methodref          #47.#48       // java/lang/String.isEmpty:()Z\n+   #47 = Class              #49           // java/lang/String\n+   #48 = NameAndType        #50:#51       // isEmpty:()Z\n+   #49 = Utf8               java/lang/String\n+   #50 = Utf8               isEmpty\n+   #51 = Utf8               ()Z\n+   #52 = Methodref          #53.#54       // java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n+   #53 = Class              #55           // java/nio/charset/Charset\n+   #54 = NameAndType        #56:#57       // defaultCharset:()Ljava/nio/charset/Charset;\n+   #55 = Utf8               java/nio/charset/Charset\n+   #56 = Utf8               defaultCharset\n+   #57 = Utf8               ()Ljava/nio/charset/Charset;\n+   #58 = Methodref          #47.#59       // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n+   #59 = NameAndType        #60:#61       // getBytes:(Ljava/nio/charset/Charset;)[B\n+   #60 = Utf8               getBytes\n+   #61 = Utf8               (Ljava/nio/charset/Charset;)[B\n+   #62 = Methodref          #63.#64       // java/io/File.isFile:()Z\n+   #63 = Class              #65           // java/io/File\n+   #64 = NameAndType        #66:#51       // isFile:()Z\n+   #65 = Utf8               java/io/File\n+   #66 = Utf8               isFile\n+   #67 = Methodref          #63.#68       // java/io/File.canRead:()Z\n+   #68 = NameAndType        #69:#51       // canRead:()Z\n+   #69 = Utf8               canRead\n+   #70 = Class              #71           // java/io/RandomAccessFile\n+   #71 = Utf8               java/io/RandomAccessFile\n+   #72 = String             #73           // r\n+   #73 = Utf8               r\n+   #74 = Methodref          #70.#75       // java/io/RandomAccessFile.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+   #75 = NameAndType        #5:#76        // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+   #76 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n+   #77 = Methodref          #70.#78       // java/io/RandomAccessFile.seek:(J)V\n+   #78 = NameAndType        #79:#80       // seek:(J)V\n+   #79 = Utf8               seek\n+   #80 = Utf8               (J)V\n+   #81 = Methodref          #70.#82       // java/io/RandomAccessFile.read:([B)I\n+   #82 = NameAndType        #83:#84       // read:([B)I\n+   #83 = Utf8               read\n+   #84 = Utf8               ([B)I\n+   #85 = Methodref          #70.#86       // java/io/RandomAccessFile.close:()V\n+   #86 = NameAndType        #87:#11       // close:()V\n+   #87 = Utf8               close\n+   #88 = Methodref          #89.#90       // java/util/Arrays.equals:([B[B)Z\n+   #89 = Class              #91           // java/util/Arrays\n+   #90 = NameAndType        #92:#93       // equals:([B[B)Z\n+   #91 = Utf8               java/util/Arrays\n+   #92 = Utf8               equals\n+   #93 = Utf8               ([B[B)Z\n+   #94 = Class              #95           // java/lang/Throwable\n+   #95 = Utf8               java/lang/Throwable\n+   #96 = Methodref          #94.#97       // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+   #97 = NameAndType        #98:#99       // addSuppressed:(Ljava/lang/Throwable;)V\n+   #98 = Utf8               addSuppressed\n+   #99 = Utf8               (Ljava/lang/Throwable;)V\n+  #100 = Class              #101          // java/io/IOException\n+  #101 = Utf8               java/io/IOException\n+  #102 = Class              #103          // java/nio/file/LinkOption\n+  #103 = Utf8               java/nio/file/LinkOption\n+  #104 = Methodref          #105.#106     // java/nio/file/Files.isRegularFile:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+  #105 = Class              #107          // java/nio/file/Files\n+  #106 = NameAndType        #108:#109     // isRegularFile:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+  #107 = Utf8               java/nio/file/Files\n+  #108 = Utf8               isRegularFile\n+  #109 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+  #110 = Methodref          #105.#111     // java/nio/file/Files.isReadable:(Ljava/nio/file/Path;)Z\n+  #111 = NameAndType        #112:#113     // isReadable:(Ljava/nio/file/Path;)Z\n+  #112 = Utf8               isReadable\n+  #113 = Utf8               (Ljava/nio/file/Path;)Z\n+  #114 = Class              #115          // java/nio/file/OpenOption\n+  #115 = Utf8               java/nio/file/OpenOption\n+  #116 = Methodref          #117.#118     // java/nio/channels/FileChannel.open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;\n+  #117 = Class              #119          // java/nio/channels/FileChannel\n+  #118 = NameAndType        #120:#121     // open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;\n+  #119 = Utf8               java/nio/channels/FileChannel\n+  #120 = Utf8               open\n+  #121 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;\n+  #122 = Methodref          #123.#124     // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+  #123 = Class              #125          // java/nio/ByteBuffer\n+  #124 = NameAndType        #126:#127     // allocate:(I)Ljava/nio/ByteBuffer;\n+  #125 = Utf8               java/nio/ByteBuffer\n+  #126 = Utf8               allocate\n+  #127 = Utf8               (I)Ljava/nio/ByteBuffer;\n+  #128 = Methodref          #117.#129     // java/nio/channels/FileChannel.read:(Ljava/nio/ByteBuffer;)I\n+  #129 = NameAndType        #83:#130      // read:(Ljava/nio/ByteBuffer;)I\n+  #130 = Utf8               (Ljava/nio/ByteBuffer;)I\n+  #131 = Fieldref           #132.#133     // java/nio/file/FileVisitResult.TERMINATE:Ljava/nio/file/FileVisitResult;\n+  #132 = Class              #134          // java/nio/file/FileVisitResult\n+  #133 = NameAndType        #135:#136     // TERMINATE:Ljava/nio/file/FileVisitResult;\n+  #134 = Utf8               java/nio/file/FileVisitResult\n+  #135 = Utf8               TERMINATE\n+  #136 = Utf8               Ljava/nio/file/FileVisitResult;\n+  #137 = Methodref          #117.#86      // java/nio/channels/FileChannel.close:()V\n+  #138 = Methodref          #123.#139     // java/nio/ByteBuffer.array:()[B\n+  #139 = NameAndType        #140:#141     // array:()[B\n+  #140 = Utf8               array\n+  #141 = Utf8               ()[B\n+  #142 = Methodref          #2.#143       // org/apache/commons/io/filefilter/MagicNumberFileFilter.toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+  #143 = NameAndType        #144:#145     // toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+  #144 = Utf8               toFileVisitResult\n+  #145 = Utf8               (ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+  #146 = Class              #147          // java/lang/StringBuilder\n+  #147 = Utf8               java/lang/StringBuilder\n+  #148 = Methodref          #8.#149       // org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n+  #149 = NameAndType        #150:#151     // toString:()Ljava/lang/String;\n+  #150 = Utf8               toString\n+  #151 = Utf8               ()Ljava/lang/String;\n+  #152 = Methodref          #146.#17      // java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+  #153 = String             #154          // (\n+  #154 = Utf8               (\n+  #155 = Methodref          #146.#156     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #156 = NameAndType        #157:#158     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #157 = Utf8               append\n+  #158 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #159 = Methodref          #47.#160      // java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n+  #160 = NameAndType        #5:#161       // \"<init>\":([BLjava/nio/charset/Charset;)V\n+  #161 = Utf8               ([BLjava/nio/charset/Charset;)V\n+  #162 = String             #163          // ,\n+  #163 = Utf8               ,\n+  #164 = Methodref          #146.#165     // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+  #165 = NameAndType        #157:#166     // append:(J)Ljava/lang/StringBuilder;\n+  #166 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #167 = String             #168          // )\n+  #168 = Utf8               )\n+  #169 = Methodref          #146.#149     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #170 = Class              #171          // java/io/Serializable\n+  #171 = Utf8               java/io/Serializable\n+  #172 = Utf8               serialVersionUID\n+  #173 = Utf8               ConstantValue\n+  #174 = Long               -547733176983104172l\n+  #176 = Utf8               ([B)V\n+  #177 = Utf8               Code\n+  #178 = Utf8               LineNumberTable\n+  #179 = Utf8               StackMapTable\n+  #180 = Class              #32           // \"[B\"\n+  #181 = Utf8               accept\n+  #182 = Utf8               (Ljava/io/File;)Z\n+  #183 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+  #184 = Class              #185          // java/nio/file/Path\n+  #185 = Utf8               java/nio/file/Path\n+  #186 = Class              #187          // java/nio/file/attribute/BasicFileAttributes\n+  #187 = Utf8               java/nio/file/attribute/BasicFileAttributes\n+  #188 = Utf8               SourceFile\n+  #189 = Utf8               MagicNumberFileFilter.java\n {\n   private static final long serialVersionUID = -547733176983104172l;\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long -547733176983104172l\n \n   private final byte[] magicNumbers;\n@@ -226,55 +226,55 @@\n \n   public org.apache.commons.io.filefilter.MagicNumberFileFilter(byte[], long);\n     descriptor: ([BJ)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=4, args_size=3\n          0: aload_0\n-         1: invokespecial #2                  // Method org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n+         1: invokespecial #7                  // Method org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n          4: aload_1\n          5: ifnonnull     18\n-         8: new           #3                  // class java/lang/IllegalArgumentException\n+         8: new           #12                 // class java/lang/IllegalArgumentException\n         11: dup\n-        12: ldc           #4                  // String The magic number cannot be null\n-        14: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        12: ldc           #14                 // String The magic number cannot be null\n+        14: invokespecial #16                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         17: athrow\n         18: aload_1\n         19: arraylength\n         20: ifne          33\n-        23: new           #3                  // class java/lang/IllegalArgumentException\n+        23: new           #12                 // class java/lang/IllegalArgumentException\n         26: dup\n-        27: ldc           #6                  // String The magic number must contain at least one byte\n-        29: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        27: ldc           #19                 // String The magic number must contain at least one byte\n+        29: invokespecial #16                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         32: athrow\n         33: lload_2\n         34: lconst_0\n         35: lcmp\n         36: ifge          49\n-        39: new           #3                  // class java/lang/IllegalArgumentException\n+        39: new           #12                 // class java/lang/IllegalArgumentException\n         42: dup\n-        43: ldc           #7                  // String The offset cannot be negative\n-        45: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        43: ldc           #21                 // String The offset cannot be negative\n+        45: invokespecial #16                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         48: athrow\n         49: aload_0\n         50: aload_1\n         51: arraylength\n-        52: invokestatic  #8                  // Method org/apache/commons/io/IOUtils.byteArray:(I)[B\n-        55: putfield      #9                  // Field magicNumbers:[B\n+        52: invokestatic  #23                 // Method org/apache/commons/io/IOUtils.byteArray:(I)[B\n+        55: putfield      #29                 // Field magicNumbers:[B\n         58: aload_1\n         59: iconst_0\n         60: aload_0\n-        61: getfield      #9                  // Field magicNumbers:[B\n+        61: getfield      #29                 // Field magicNumbers:[B\n         64: iconst_0\n         65: aload_1\n         66: arraylength\n-        67: invokestatic  #10                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        67: invokestatic  #33                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         70: aload_0\n         71: lload_2\n-        72: putfield      #11                 // Field byteOffset:J\n+        72: putfield      #39                 // Field byteOffset:J\n         75: return\n       LineNumberTable:\n         line 165: 0\n         line 166: 4\n         line 167: 8\n         line 169: 18\n         line 170: 23\n@@ -296,59 +296,59 @@\n     descriptor: (Ljava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: lconst_0\n-         3: invokespecial #12                 // Method \"<init>\":(Ljava/lang/String;J)V\n+         3: invokespecial #43                 // Method \"<init>\":(Ljava/lang/String;J)V\n          6: return\n       LineNumberTable:\n         line 203: 0\n         line 204: 6\n \n   public org.apache.commons.io.filefilter.MagicNumberFileFilter(java.lang.String, long);\n     descriptor: (Ljava/lang/String;J)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=3\n          0: aload_0\n-         1: invokespecial #2                  // Method org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n+         1: invokespecial #7                  // Method org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n          4: aload_1\n          5: ifnonnull     18\n-         8: new           #3                  // class java/lang/IllegalArgumentException\n+         8: new           #12                 // class java/lang/IllegalArgumentException\n         11: dup\n-        12: ldc           #4                  // String The magic number cannot be null\n-        14: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        12: ldc           #14                 // String The magic number cannot be null\n+        14: invokespecial #16                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         17: athrow\n         18: aload_1\n-        19: invokevirtual #13                 // Method java/lang/String.isEmpty:()Z\n+        19: invokevirtual #46                 // Method java/lang/String.isEmpty:()Z\n         22: ifeq          35\n-        25: new           #3                  // class java/lang/IllegalArgumentException\n+        25: new           #12                 // class java/lang/IllegalArgumentException\n         28: dup\n-        29: ldc           #6                  // String The magic number must contain at least one byte\n-        31: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        29: ldc           #19                 // String The magic number must contain at least one byte\n+        31: invokespecial #16                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         34: athrow\n         35: lload_2\n         36: lconst_0\n         37: lcmp\n         38: ifge          51\n-        41: new           #3                  // class java/lang/IllegalArgumentException\n+        41: new           #12                 // class java/lang/IllegalArgumentException\n         44: dup\n-        45: ldc           #7                  // String The offset cannot be negative\n-        47: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        45: ldc           #21                 // String The offset cannot be negative\n+        47: invokespecial #16                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         50: athrow\n         51: aload_0\n         52: aload_1\n-        53: invokestatic  #14                 // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n-        56: invokevirtual #15                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n-        59: putfield      #9                  // Field magicNumbers:[B\n+        53: invokestatic  #52                 // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n+        56: invokevirtual #58                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n+        59: putfield      #29                 // Field magicNumbers:[B\n         62: aload_0\n         63: lload_2\n-        64: putfield      #11                 // Field byteOffset:J\n+        64: putfield      #39                 // Field byteOffset:J\n         67: return\n       LineNumberTable:\n         line 226: 0\n         line 227: 4\n         line 228: 8\n         line 230: 18\n         line 231: 25\n@@ -369,66 +369,66 @@\n     descriptor: (Ljava/io/File;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=6, args_size=2\n          0: aload_1\n          1: ifnull        109\n          4: aload_1\n-         5: invokevirtual #16                 // Method java/io/File.isFile:()Z\n+         5: invokevirtual #62                 // Method java/io/File.isFile:()Z\n          8: ifeq          109\n         11: aload_1\n-        12: invokevirtual #17                 // Method java/io/File.canRead:()Z\n+        12: invokevirtual #67                 // Method java/io/File.canRead:()Z\n         15: ifeq          109\n-        18: new           #18                 // class java/io/RandomAccessFile\n+        18: new           #70                 // class java/io/RandomAccessFile\n         21: dup\n         22: aload_1\n-        23: ldc           #19                 // String r\n-        25: invokespecial #20                 // Method java/io/RandomAccessFile.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+        23: ldc           #72                 // String r\n+        25: invokespecial #74                 // Method java/io/RandomAccessFile.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n         28: astore_2\n         29: aload_0\n-        30: getfield      #9                  // Field magicNumbers:[B\n+        30: getfield      #29                 // Field magicNumbers:[B\n         33: arraylength\n-        34: invokestatic  #8                  // Method org/apache/commons/io/IOUtils.byteArray:(I)[B\n+        34: invokestatic  #23                 // Method org/apache/commons/io/IOUtils.byteArray:(I)[B\n         37: astore_3\n         38: aload_2\n         39: aload_0\n-        40: getfield      #11                 // Field byteOffset:J\n-        43: invokevirtual #21                 // Method java/io/RandomAccessFile.seek:(J)V\n+        40: getfield      #39                 // Field byteOffset:J\n+        43: invokevirtual #77                 // Method java/io/RandomAccessFile.seek:(J)V\n         46: aload_2\n         47: aload_3\n-        48: invokevirtual #22                 // Method java/io/RandomAccessFile.read:([B)I\n+        48: invokevirtual #81                 // Method java/io/RandomAccessFile.read:([B)I\n         51: istore        4\n         53: iload         4\n         55: aload_0\n-        56: getfield      #9                  // Field magicNumbers:[B\n+        56: getfield      #29                 // Field magicNumbers:[B\n         59: arraylength\n         60: if_icmpeq     73\n         63: iconst_0\n         64: istore        5\n         66: aload_2\n-        67: invokevirtual #23                 // Method java/io/RandomAccessFile.close:()V\n+        67: invokevirtual #85                 // Method java/io/RandomAccessFile.close:()V\n         70: iload         5\n         72: ireturn\n         73: aload_0\n-        74: getfield      #9                  // Field magicNumbers:[B\n+        74: getfield      #29                 // Field magicNumbers:[B\n         77: aload_3\n-        78: invokestatic  #24                 // Method java/util/Arrays.equals:([B[B)Z\n+        78: invokestatic  #88                 // Method java/util/Arrays.equals:([B[B)Z\n         81: istore        5\n         83: aload_2\n-        84: invokevirtual #23                 // Method java/io/RandomAccessFile.close:()V\n+        84: invokevirtual #85                 // Method java/io/RandomAccessFile.close:()V\n         87: iload         5\n         89: ireturn\n         90: astore_3\n         91: aload_2\n-        92: invokevirtual #23                 // Method java/io/RandomAccessFile.close:()V\n+        92: invokevirtual #85                 // Method java/io/RandomAccessFile.close:()V\n         95: goto          106\n         98: astore        4\n        100: aload_3\n        101: aload         4\n-       103: invokevirtual #26                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+       103: invokevirtual #96                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n        106: aload_3\n        107: athrow\n        108: astore_2\n        109: iconst_0\n        110: ireturn\n       Exception table:\n          from    to  target type\n@@ -478,75 +478,75 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=7, args_size=3\n          0: aload_1\n          1: ifnull        130\n          4: aload_1\n          5: iconst_0\n-         6: anewarray     #28                 // class java/nio/file/LinkOption\n-         9: invokestatic  #29                 // Method java/nio/file/Files.isRegularFile:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+         6: anewarray     #102                // class java/nio/file/LinkOption\n+         9: invokestatic  #104                // Method java/nio/file/Files.isRegularFile:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n         12: ifeq          130\n         15: aload_1\n-        16: invokestatic  #30                 // Method java/nio/file/Files.isReadable:(Ljava/nio/file/Path;)Z\n+        16: invokestatic  #110                // Method java/nio/file/Files.isReadable:(Ljava/nio/file/Path;)Z\n         19: ifeq          130\n         22: aload_1\n         23: iconst_0\n-        24: anewarray     #31                 // class java/nio/file/OpenOption\n-        27: invokestatic  #32                 // Method java/nio/channels/FileChannel.open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;\n+        24: anewarray     #114                // class java/nio/file/OpenOption\n+        27: invokestatic  #116                // Method java/nio/channels/FileChannel.open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;\n         30: astore_3\n         31: aload_0\n-        32: getfield      #9                  // Field magicNumbers:[B\n+        32: getfield      #29                 // Field magicNumbers:[B\n         35: arraylength\n-        36: invokestatic  #33                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+        36: invokestatic  #122                // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n         39: astore        4\n         41: aload_3\n         42: aload         4\n-        44: invokevirtual #34                 // Method java/nio/channels/FileChannel.read:(Ljava/nio/ByteBuffer;)I\n+        44: invokevirtual #128                // Method java/nio/channels/FileChannel.read:(Ljava/nio/ByteBuffer;)I\n         47: istore        5\n         49: iload         5\n         51: aload_0\n-        52: getfield      #9                  // Field magicNumbers:[B\n+        52: getfield      #29                 // Field magicNumbers:[B\n         55: arraylength\n         56: if_icmpeq     75\n-        59: getstatic     #35                 // Field java/nio/file/FileVisitResult.TERMINATE:Ljava/nio/file/FileVisitResult;\n+        59: getstatic     #131                // Field java/nio/file/FileVisitResult.TERMINATE:Ljava/nio/file/FileVisitResult;\n         62: astore        6\n         64: aload_3\n         65: ifnull        72\n         68: aload_3\n-        69: invokevirtual #36                 // Method java/nio/channels/FileChannel.close:()V\n+        69: invokevirtual #137                // Method java/nio/channels/FileChannel.close:()V\n         72: aload         6\n         74: areturn\n         75: aload_0\n-        76: getfield      #9                  // Field magicNumbers:[B\n+        76: getfield      #29                 // Field magicNumbers:[B\n         79: aload         4\n-        81: invokevirtual #37                 // Method java/nio/ByteBuffer.array:()[B\n-        84: invokestatic  #24                 // Method java/util/Arrays.equals:([B[B)Z\n+        81: invokevirtual #138                // Method java/nio/ByteBuffer.array:()[B\n+        84: invokestatic  #88                 // Method java/util/Arrays.equals:([B[B)Z\n         87: aload_1\n-        88: invokestatic  #38                 // Method toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+        88: invokestatic  #142                // Method toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n         91: astore        6\n         93: aload_3\n         94: ifnull        101\n         97: aload_3\n-        98: invokevirtual #36                 // Method java/nio/channels/FileChannel.close:()V\n+        98: invokevirtual #137                // Method java/nio/channels/FileChannel.close:()V\n        101: aload         6\n        103: areturn\n        104: astore        4\n        106: aload_3\n        107: ifnull        126\n        110: aload_3\n-       111: invokevirtual #36                 // Method java/nio/channels/FileChannel.close:()V\n+       111: invokevirtual #137                // Method java/nio/channels/FileChannel.close:()V\n        114: goto          126\n        117: astore        5\n        119: aload         4\n        121: aload         5\n-       123: invokevirtual #26                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+       123: invokevirtual #96                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n        126: aload         4\n        128: athrow\n        129: astore_3\n-       130: getstatic     #35                 // Field java/nio/file/FileVisitResult.TERMINATE:Ljava/nio/file/FileVisitResult;\n+       130: getstatic     #131                // Field java/nio/file/FileVisitResult.TERMINATE:Ljava/nio/file/FileVisitResult;\n        133: areturn\n       Exception table:\n          from    to  target type\n             31    64   104   Class java/lang/Throwable\n             75    93   104   Class java/lang/Throwable\n            110   114   117   Class java/lang/Throwable\n             22    72   129   Class java/io/IOException\n@@ -593,48 +593,48 @@\n         frame_type = 0 /* same */\n \n   public java.lang.String toString();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=2, args_size=1\n-         0: new           #39                 // class java/lang/StringBuilder\n+         0: new           #146                // class java/lang/StringBuilder\n          3: dup\n          4: aload_0\n-         5: invokespecial #40                 // Method org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n-         8: invokespecial #41                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+         5: invokespecial #148                // Method org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n+         8: invokespecial #152                // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n         11: astore_1\n         12: aload_1\n-        13: ldc           #42                 // String (\n-        15: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        13: ldc           #153                // String (\n+        15: invokevirtual #155                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         18: pop\n         19: aload_1\n-        20: new           #44                 // class java/lang/String\n+        20: new           #47                 // class java/lang/String\n         23: dup\n         24: aload_0\n-        25: getfield      #9                  // Field magicNumbers:[B\n-        28: invokestatic  #14                 // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n-        31: invokespecial #45                 // Method java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n-        34: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        25: getfield      #29                 // Field magicNumbers:[B\n+        28: invokestatic  #52                 // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n+        31: invokespecial #159                // Method java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n+        34: invokevirtual #155                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         37: pop\n         38: aload_1\n-        39: ldc           #46                 // String ,\n-        41: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        39: ldc           #162                // String ,\n+        41: invokevirtual #155                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         44: pop\n         45: aload_1\n         46: aload_0\n-        47: getfield      #11                 // Field byteOffset:J\n-        50: invokevirtual #47                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+        47: getfield      #39                 // Field byteOffset:J\n+        50: invokevirtual #164                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n         53: pop\n         54: aload_1\n-        55: ldc           #48                 // String )\n-        57: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        55: ldc           #167                // String )\n+        57: invokevirtual #155                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         60: pop\n         61: aload_1\n-        62: invokevirtual #49                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        62: invokevirtual #169                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n         65: areturn\n       LineNumberTable:\n         line 324: 0\n         line 325: 12\n         line 326: 19\n         line 328: 38\n         line 329: 45\n"}]}
