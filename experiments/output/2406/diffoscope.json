{"diffoscope-json-version": 1, "source1": "first/ZipFile.class", "source2": "second/ZipFile.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,930 +1,921 @@\n-  SHA-256 checksum 737d51ebe6aa37cea76504cd8f3c83a303828fa4945c902e9815540b75b8584a\n+  SHA-256 checksum 8bc3a1eac462bc7ac5bde64e5283e3954926422d69b2c923a1143820fe1cf324\n   Compiled from \"ZipFile.java\"\n public class org.apache.commons.compress.archivers.zip.ZipFile implements java.io.Closeable\n   minor version: 0\n-  major version: 51\n+  major version: 53\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #1                          // org/apache/commons/compress/archivers/zip/ZipFile\n-  super_class: #248                       // java/lang/Object\n-  interfaces: 1, fields: 39, methods: 42, attributes: 2\n+  super_class: #244                       // java/lang/Object\n+  interfaces: 1, fields: 39, methods: 42, attributes: 3\n Constant pool:\n-    #1 = Class              #502          // org/apache/commons/compress/archivers/zip/ZipFile\n-    #2 = Class              #503          // org/apache/commons/compress/archivers/zip/ZipConstants\n-    #3 = Fieldref           #1.#504       // org/apache/commons/compress/archivers/zip/ZipFile.archive:Ljava/nio/channels/SeekableByteChannel;\n-    #4 = Class              #505          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-    #5 = String             #506          // UTF8\n-    #6 = Methodref          #1.#507       // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-    #7 = Class              #508          // java/io/File\n-    #8 = Methodref          #7.#509       // java/io/File.\"<init>\":(Ljava/lang/String;)V\n-    #9 = Methodref          #1.#510       // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/io/File;Ljava/lang/String;Z)V\n-   #10 = Methodref          #1.#511       // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/io/File;Ljava/lang/String;ZZ)V\n-   #11 = Methodref          #7.#512       // java/io/File.toPath:()Ljava/nio/file/Path;\n-   #12 = Fieldref           #513.#514     // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n-   #13 = Methodref          #515.#516     // java/util/EnumSet.of:(Ljava/lang/Enum;)Ljava/util/EnumSet;\n-   #14 = Class              #517          // java/nio/file/attribute/FileAttribute\n-   #15 = Methodref          #518.#519     // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n-   #16 = Methodref          #7.#520       // java/io/File.getAbsolutePath:()Ljava/lang/String;\n-   #17 = Methodref          #1.#521       // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n-   #18 = String             #522          // unknown archive\n-   #19 = Methodref          #1.#523       // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n-   #20 = Methodref          #248.#524     // java/lang/Object.\"<init>\":()V\n-   #21 = Class              #525          // java/util/LinkedList\n-   #22 = Methodref          #21.#524      // java/util/LinkedList.\"<init>\":()V\n-   #23 = Fieldref           #1.#526       // org/apache/commons/compress/archivers/zip/ZipFile.entries:Ljava/util/List;\n-   #24 = Class              #527          // java/util/HashMap\n-   #25 = Methodref          #24.#528      // java/util/HashMap.\"<init>\":(I)V\n-   #26 = Fieldref           #1.#529       // org/apache/commons/compress/archivers/zip/ZipFile.nameMap:Ljava/util/Map;\n-   #27 = Fieldref           #1.#530       // org/apache/commons/compress/archivers/zip/ZipFile.closed:Z\n-   #28 = Fieldref           #1.#531       // org/apache/commons/compress/archivers/zip/ZipFile.dwordBuf:[B\n-   #29 = Fieldref           #1.#532       // org/apache/commons/compress/archivers/zip/ZipFile.wordBuf:[B\n-   #30 = Fieldref           #1.#533       // org/apache/commons/compress/archivers/zip/ZipFile.cfhBuf:[B\n-   #31 = Fieldref           #1.#534       // org/apache/commons/compress/archivers/zip/ZipFile.shortBuf:[B\n-   #32 = Methodref          #535.#536     // java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n-   #33 = Fieldref           #1.#537       // org/apache/commons/compress/archivers/zip/ZipFile.dwordBbuf:Ljava/nio/ByteBuffer;\n-   #34 = Fieldref           #1.#538       // org/apache/commons/compress/archivers/zip/ZipFile.wordBbuf:Ljava/nio/ByteBuffer;\n-   #35 = Fieldref           #1.#539       // org/apache/commons/compress/archivers/zip/ZipFile.cfhBbuf:Ljava/nio/ByteBuffer;\n-   #36 = Fieldref           #1.#540       // org/apache/commons/compress/archivers/zip/ZipFile.shortBbuf:Ljava/nio/ByteBuffer;\n-   #37 = Class              #541          // org/apache/commons/compress/archivers/zip/ZipFile$2\n-   #38 = Methodref          #37.#542      // org/apache/commons/compress/archivers/zip/ZipFile$2.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;)V\n-   #39 = Fieldref           #1.#543       // org/apache/commons/compress/archivers/zip/ZipFile.offsetComparator:Ljava/util/Comparator;\n-   #40 = Class              #544          // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n-   #41 = Fieldref           #1.#545       // org/apache/commons/compress/archivers/zip/ZipFile.isSplitZipArchive:Z\n-   #42 = Fieldref           #1.#546       // org/apache/commons/compress/archivers/zip/ZipFile.archiveName:Ljava/lang/String;\n-   #43 = Fieldref           #1.#547       // org/apache/commons/compress/archivers/zip/ZipFile.encoding:Ljava/lang/String;\n-   #44 = Methodref          #4.#548       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #45 = Fieldref           #1.#549       // org/apache/commons/compress/archivers/zip/ZipFile.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #46 = Fieldref           #1.#550       // org/apache/commons/compress/archivers/zip/ZipFile.useUnicodeExtraFields:Z\n-   #47 = Methodref          #1.#551       // org/apache/commons/compress/archivers/zip/ZipFile.populateFromCentralDirectory:()Ljava/util/Map;\n-   #48 = Methodref          #1.#552       // org/apache/commons/compress/archivers/zip/ZipFile.resolveLocalFileHeaderData:(Ljava/util/Map;)V\n-   #49 = Methodref          #1.#553       // org/apache/commons/compress/archivers/zip/ZipFile.fillNameMap:()V\n-   #50 = Methodref          #554.#555     // org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n-   #51 = InterfaceMethodref #556.#557     // java/nio/channels/SeekableByteChannel.close:()V\n-   #52 = Methodref          #558.#559     // java/util/Collections.enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n-   #53 = InterfaceMethodref #61.#560      // java/util/List.size:()I\n-   #54 = Class              #561          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-   #55 = InterfaceMethodref #61.#562      // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-   #56 = Class              #373          // \"[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\"\n-   #57 = Methodref          #563.#564     // java/util/Arrays.sort:([Ljava/lang/Object;Ljava/util/Comparator;)V\n-   #58 = Methodref          #563.#565     // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n-   #59 = InterfaceMethodref #566.#567     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #60 = Methodref          #21.#568      // java/util/LinkedList.getFirst:()Ljava/lang/Object;\n-   #61 = Class              #569          // java/util/List\n-   #62 = Methodref          #558.#570     // java/util/Collections.emptyList:()Ljava/util/List;\n-   #63 = InterfaceMethodref #566.#571     // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n-   #64 = Methodref          #21.#562      // java/util/LinkedList.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-   #65 = Methodref          #572.#573     // org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #66 = Class              #574          // org/apache/commons/compress/archivers/zip/ZipFile$Entry\n-   #67 = Methodref          #54.#575      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDataOffset:()J\n-   #68 = Class              #576          // org/apache/commons/compress/archivers/EntryStreamOffsets\n+    #1 = Class              #489          // org/apache/commons/compress/archivers/zip/ZipFile\n+    #2 = Class              #490          // org/apache/commons/compress/archivers/zip/ZipConstants\n+    #3 = Fieldref           #1.#491       // org/apache/commons/compress/archivers/zip/ZipFile.archive:Ljava/nio/channels/SeekableByteChannel;\n+    #4 = Class              #492          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+    #5 = String             #493          // UTF8\n+    #6 = Methodref          #1.#494       // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+    #7 = Class              #495          // java/io/File\n+    #8 = Methodref          #7.#496       // java/io/File.\"<init>\":(Ljava/lang/String;)V\n+    #9 = Methodref          #1.#497       // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/io/File;Ljava/lang/String;Z)V\n+   #10 = Methodref          #1.#498       // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/io/File;Ljava/lang/String;ZZ)V\n+   #11 = Methodref          #7.#499       // java/io/File.toPath:()Ljava/nio/file/Path;\n+   #12 = Fieldref           #500.#501     // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+   #13 = Methodref          #502.#503     // java/util/EnumSet.of:(Ljava/lang/Enum;)Ljava/util/EnumSet;\n+   #14 = Class              #504          // java/nio/file/attribute/FileAttribute\n+   #15 = Methodref          #505.#506     // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+   #16 = Methodref          #7.#507       // java/io/File.getAbsolutePath:()Ljava/lang/String;\n+   #17 = Methodref          #1.#508       // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n+   #18 = String             #509          // unknown archive\n+   #19 = Methodref          #1.#510       // org/apache/commons/compress/archivers/zip/ZipFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n+   #20 = Methodref          #244.#511     // java/lang/Object.\"<init>\":()V\n+   #21 = Class              #512          // java/util/LinkedList\n+   #22 = Methodref          #21.#511      // java/util/LinkedList.\"<init>\":()V\n+   #23 = Fieldref           #1.#513       // org/apache/commons/compress/archivers/zip/ZipFile.entries:Ljava/util/List;\n+   #24 = Class              #514          // java/util/HashMap\n+   #25 = Methodref          #24.#515      // java/util/HashMap.\"<init>\":(I)V\n+   #26 = Fieldref           #1.#516       // org/apache/commons/compress/archivers/zip/ZipFile.nameMap:Ljava/util/Map;\n+   #27 = Fieldref           #1.#517       // org/apache/commons/compress/archivers/zip/ZipFile.closed:Z\n+   #28 = Fieldref           #1.#518       // org/apache/commons/compress/archivers/zip/ZipFile.dwordBuf:[B\n+   #29 = Fieldref           #1.#519       // org/apache/commons/compress/archivers/zip/ZipFile.wordBuf:[B\n+   #30 = Fieldref           #1.#520       // org/apache/commons/compress/archivers/zip/ZipFile.cfhBuf:[B\n+   #31 = Fieldref           #1.#521       // org/apache/commons/compress/archivers/zip/ZipFile.shortBuf:[B\n+   #32 = Methodref          #522.#523     // java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n+   #33 = Fieldref           #1.#524       // org/apache/commons/compress/archivers/zip/ZipFile.dwordBbuf:Ljava/nio/ByteBuffer;\n+   #34 = Fieldref           #1.#525       // org/apache/commons/compress/archivers/zip/ZipFile.wordBbuf:Ljava/nio/ByteBuffer;\n+   #35 = Fieldref           #1.#526       // org/apache/commons/compress/archivers/zip/ZipFile.cfhBbuf:Ljava/nio/ByteBuffer;\n+   #36 = Fieldref           #1.#527       // org/apache/commons/compress/archivers/zip/ZipFile.shortBbuf:Ljava/nio/ByteBuffer;\n+   #37 = Class              #528          // org/apache/commons/compress/archivers/zip/ZipFile$2\n+   #38 = Methodref          #37.#529      // org/apache/commons/compress/archivers/zip/ZipFile$2.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;)V\n+   #39 = Fieldref           #1.#530       // org/apache/commons/compress/archivers/zip/ZipFile.offsetComparator:Ljava/util/Comparator;\n+   #40 = Class              #531          // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+   #41 = Fieldref           #1.#532       // org/apache/commons/compress/archivers/zip/ZipFile.isSplitZipArchive:Z\n+   #42 = Fieldref           #1.#533       // org/apache/commons/compress/archivers/zip/ZipFile.archiveName:Ljava/lang/String;\n+   #43 = Fieldref           #1.#534       // org/apache/commons/compress/archivers/zip/ZipFile.encoding:Ljava/lang/String;\n+   #44 = Methodref          #4.#535       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #45 = Fieldref           #1.#536       // org/apache/commons/compress/archivers/zip/ZipFile.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #46 = Fieldref           #1.#537       // org/apache/commons/compress/archivers/zip/ZipFile.useUnicodeExtraFields:Z\n+   #47 = Methodref          #1.#538       // org/apache/commons/compress/archivers/zip/ZipFile.populateFromCentralDirectory:()Ljava/util/Map;\n+   #48 = Methodref          #1.#539       // org/apache/commons/compress/archivers/zip/ZipFile.resolveLocalFileHeaderData:(Ljava/util/Map;)V\n+   #49 = Methodref          #1.#540       // org/apache/commons/compress/archivers/zip/ZipFile.fillNameMap:()V\n+   #50 = Methodref          #541.#542     // org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n+   #51 = InterfaceMethodref #352.#543     // java/nio/channels/SeekableByteChannel.close:()V\n+   #52 = Methodref          #544.#545     // java/util/Collections.enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n+   #53 = InterfaceMethodref #61.#546      // java/util/List.size:()I\n+   #54 = Class              #547          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+   #55 = InterfaceMethodref #61.#548      // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+   #56 = Class              #367          // \"[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\"\n+   #57 = Methodref          #549.#550     // java/util/Arrays.sort:([Ljava/lang/Object;Ljava/util/Comparator;)V\n+   #58 = Methodref          #549.#551     // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n+   #59 = InterfaceMethodref #354.#552     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #60 = Methodref          #21.#553      // java/util/LinkedList.getFirst:()Ljava/lang/Object;\n+   #61 = Class              #554          // java/util/List\n+   #62 = Methodref          #544.#555     // java/util/Collections.emptyList:()Ljava/util/List;\n+   #63 = InterfaceMethodref #354.#556     // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n+   #64 = Methodref          #21.#548      // java/util/LinkedList.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+   #65 = Methodref          #557.#558     // org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #66 = Class              #559          // org/apache/commons/compress/archivers/zip/ZipFile$Entry\n+   #67 = Methodref          #54.#560      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDataOffset:()J\n+   #68 = Class              #561          // org/apache/commons/compress/archivers/EntryStreamOffsets\n    #69 = Long               -1l\n-   #71 = Methodref          #54.#577      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n-   #72 = Methodref          #1.#578       // org/apache/commons/compress/archivers/zip/ZipFile.createBoundedInputStream:(JJ)Lorg/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream;\n-   #73 = Methodref          #1.#579       // org/apache/commons/compress/archivers/zip/ZipFile.getEntriesInPhysicalOrder:()Ljava/util/Enumeration;\n-   #74 = InterfaceMethodref #580.#581     // java/util/Enumeration.hasMoreElements:()Z\n-   #75 = InterfaceMethodref #580.#582     // java/util/Enumeration.nextElement:()Ljava/lang/Object;\n-   #76 = InterfaceMethodref #583.#584     // org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate.test:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #77 = Methodref          #1.#585       // org/apache/commons/compress/archivers/zip/ZipFile.getRawInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-   #78 = Methodref          #586.#587     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n-   #79 = Methodref          #572.#588     // org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #80 = Methodref          #1.#589       // org/apache/commons/compress/archivers/zip/ZipFile.getDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n-   #81 = Class              #590          // java/io/BufferedInputStream\n-   #82 = Methodref          #81.#591      // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #83 = Fieldref           #250.#592     // org/apache/commons/compress/archivers/zip/ZipFile$3.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n-   #84 = Methodref          #54.#593      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-   #85 = Methodref          #594.#595     // org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #86 = Methodref          #594.#596     // org/apache/commons/compress/archivers/zip/ZipMethod.ordinal:()I\n-   #87 = Class              #597          // org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream\n-   #88 = Methodref          #87.#591      // org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #89 = Class              #598          // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-   #90 = Methodref          #89.#591      // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #91 = Class              #599          // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-   #92 = Methodref          #54.#600      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #93 = Methodref          #601.#602     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getSlidingDictionarySize:()I\n-   #94 = Methodref          #601.#603     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getNumberOfShannonFanoTrees:()I\n-   #95 = Methodref          #91.#604      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.\"<init>\":(IILjava/io/InputStream;)V\n-   #96 = Class              #605          // java/util/zip/Inflater\n-   #97 = Methodref          #96.#606      // java/util/zip/Inflater.\"<init>\":(Z)V\n-   #98 = Class              #607          // org/apache/commons/compress/archivers/zip/ZipFile$1\n-   #99 = Class              #608          // java/io/SequenceInputStream\n-  #100 = Class              #609          // java/io/ByteArrayInputStream\n-  #101 = Fieldref           #1.#610       // org/apache/commons/compress/archivers/zip/ZipFile.ONE_ZERO_BYTE:[B\n-  #102 = Methodref          #100.#611     // java/io/ByteArrayInputStream.\"<init>\":([B)V\n-  #103 = Methodref          #99.#612      // java/io/SequenceInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/io/InputStream;)V\n-  #104 = Methodref          #98.#613      // org/apache/commons/compress/archivers/zip/ZipFile$1.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n-  #105 = Class              #614          // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n-  #106 = Methodref          #105.#591     // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-  #107 = Class              #615          // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n-  #108 = Methodref          #107.#591     // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-  #109 = Class              #616          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-  #110 = Methodref          #109.#617     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #111 = Methodref          #54.#618      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.isUnixSymlink:()Z\n-  #112 = Methodref          #1.#619       // org/apache/commons/compress/archivers/zip/ZipFile.getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-  #113 = Methodref          #554.#620     // org/apache/commons/compress/utils/IOUtils.toByteArray:(Ljava/io/InputStream;)[B\n-  #114 = InterfaceMethodref #621.#622     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-  #115 = Methodref          #623.#557     // java/io/InputStream.close:()V\n-  #116 = Class              #624          // java/lang/Throwable\n-  #117 = Methodref          #116.#625     // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-  #118 = Fieldref           #626.#627     // java/lang/System.err:Ljava/io/PrintStream;\n-  #119 = Class              #628          // java/lang/StringBuilder\n-  #120 = Methodref          #119.#524     // java/lang/StringBuilder.\"<init>\":()V\n-  #121 = String             #629          // Cleaning up unclosed ZipFile for archive\n-  #122 = Methodref          #119.#630     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #123 = Methodref          #119.#631     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-  #124 = Methodref          #632.#633     // java/io/PrintStream.println:(Ljava/lang/String;)V\n-  #125 = Methodref          #1.#557       // org/apache/commons/compress/archivers/zip/ZipFile.close:()V\n-  #126 = Methodref          #248.#634     // java/lang/Object.finalize:()V\n-  #127 = Methodref          #24.#524      // java/util/HashMap.\"<init>\":()V\n-  #128 = Methodref          #1.#635       // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory:()V\n-  #129 = Methodref          #535.#636     // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n-  #130 = Methodref          #554.#637     // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n-  #131 = Methodref          #638.#639     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n-  #132 = Fieldref           #1.#640       // org/apache/commons/compress/archivers/zip/ZipFile.CFH_SIG:J\n-  #133 = Methodref          #1.#641       // org/apache/commons/compress/archivers/zip/ZipFile.startsWithLocalFileHeader:()Z\n-  #134 = Class              #642          // java/io/IOException\n-  #135 = String             #643          // Central directory is empty, can\\'t expand corrupt archive.\n-  #136 = Methodref          #134.#509     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-  #137 = Methodref          #1.#644       // org/apache/commons/compress/archivers/zip/ZipFile.readCentralDirectoryEntry:(Ljava/util/Map;)V\n-  #138 = Methodref          #66.#524      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.\"<init>\":()V\n-  #139 = Methodref          #645.#646     // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-  #140 = Methodref          #66.#647      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionMadeBy:(I)V\n-  #141 = Methodref          #66.#648      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setPlatform:(I)V\n-  #142 = Methodref          #66.#649      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionRequired:(I)V\n-  #143 = Methodref          #601.#650     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #144 = Methodref          #601.#651     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesUTF8ForNames:()Z\n-  #145 = Fieldref           #4.#652       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #146 = Fieldref           #653.#654     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-  #147 = Methodref          #66.#655      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-  #148 = Methodref          #66.#656      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n-  #149 = Methodref          #66.#657      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setRawFlag:(I)V\n-  #150 = Methodref          #66.#658      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setMethod:(I)V\n-  #151 = Methodref          #638.#659     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-  #152 = Methodref          #572.#660     // org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n-  #153 = Methodref          #66.#661      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setTime:(J)V\n-  #154 = Methodref          #66.#662      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCrc:(J)V\n-  #155 = Methodref          #66.#663      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCompressedSize:(J)V\n-  #156 = Methodref          #66.#664      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setSize:(J)V\n-  #157 = Methodref          #66.#665      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setDiskNumberStart:(J)V\n-  #158 = Methodref          #66.#666      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setInternalAttributes:(I)V\n-  #159 = Methodref          #66.#667      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExternalAttributes:(J)V\n-  #160 = Methodref          #66.#668      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setName:(Ljava/lang/String;[B)V\n-  #161 = Methodref          #66.#669      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setLocalHeaderOffset:(J)V\n-  #162 = InterfaceMethodref #61.#670      // java/util/List.add:(Ljava/lang/Object;)Z\n-  #163 = Methodref          #66.#671      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCentralDirectoryExtra:([B)V\n-  #164 = Methodref          #1.#672       // org/apache/commons/compress/archivers/zip/ZipFile.setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #165 = Methodref          #66.#673      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setComment:(Ljava/lang/String;)V\n-  #166 = Class              #674          // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n-  #167 = Methodref          #166.#675     // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.\"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n-  #168 = InterfaceMethodref #566.#676     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #169 = Methodref          #66.#677      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setStreamContiguous:(Z)V\n-  #170 = Fieldref           #172.#678     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #171 = Methodref          #54.#679      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #172 = Class              #680          // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-  #173 = Methodref          #54.#681      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n-  #174 = Long               4294967295l\n-  #176 = Methodref          #54.#682      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n-  #177 = Methodref          #54.#683      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n-  #178 = Long               65535l\n-  #180 = Methodref          #172.#684     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.reparseCentralDirectoryData:(ZZZZ)V\n-  #181 = Methodref          #172.#685     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #182 = Methodref          #184.#686     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n-  #183 = Methodref          #54.#664      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n-  #184 = Class              #687          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  #185 = Methodref          #184.#688     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n-  #186 = Methodref          #172.#689     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #187 = Methodref          #172.#690     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #188 = Methodref          #54.#663      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n-  #189 = Methodref          #172.#691     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #190 = Methodref          #172.#692     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #191 = Methodref          #54.#669      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setLocalHeaderOffset:(J)V\n-  #192 = Methodref          #172.#693     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getDiskStartNumber:()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #193 = Methodref          #638.#694     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n-  #194 = Methodref          #54.#665      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDiskNumberStart:(J)V\n-  #195 = Methodref          #1.#695       // org/apache/commons/compress/archivers/zip/ZipFile.positionAtEndOfCentralDirectoryRecord:()V\n-  #196 = InterfaceMethodref #556.#696     // java/nio/channels/SeekableByteChannel.position:()J\n-  #197 = Long               20l\n-  #199 = InterfaceMethodref #556.#697     // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n-  #200 = Fieldref           #586.#698     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG:[B\n-  #201 = Methodref          #563.#699     // java/util/Arrays.equals:([B[B)Z\n-  #202 = Methodref          #1.#700       // org/apache/commons/compress/archivers/zip/ZipFile.skipBytes:(I)V\n-  #203 = Methodref          #1.#701       // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory32:()V\n-  #204 = Methodref          #1.#702       // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory64:()V\n-  #205 = Methodref          #184.#703     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n-  #206 = Methodref          #40.#704      // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n-  #207 = Fieldref           #586.#705     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_SIG:[B\n-  #208 = Class              #706          // java/util/zip/ZipException\n-  #209 = String             #707          // Archive\\'s ZIP64 end of central directory locator is corrupt.\n-  #210 = Methodref          #208.#509     // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-  #211 = Methodref          #645.#708     // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n-  #212 = Long               22l\n-  #214 = Long               65557l\n-  #216 = Fieldref           #586.#709     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n-  #217 = Methodref          #1.#710       // org/apache/commons/compress/archivers/zip/ZipFile.tryToLocateSignature:(JJ[B)Z\n-  #218 = String             #711          // Archive is not a ZIP archive\n-  #219 = InterfaceMethodref #556.#712     // java/nio/channels/SeekableByteChannel.size:()J\n-  #220 = Methodref          #713.#714     // java/lang/Math.max:(JJ)J\n-  #221 = Methodref          #535.#715     // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n-  #222 = Class              #716          // java/io/EOFException\n-  #223 = Methodref          #535.#717     // java/nio/ByteBuffer.get:()B\n-  #224 = Methodref          #222.#524     // java/io/EOFException.\"<init>\":()V\n-  #225 = InterfaceMethodref #61.#718      // java/util/List.iterator:()Ljava/util/Iterator;\n-  #226 = InterfaceMethodref #719.#720     // java/util/Iterator.hasNext:()Z\n-  #227 = InterfaceMethodref #719.#721     // java/util/Iterator.next:()Ljava/lang/Object;\n-  #228 = Methodref          #1.#722       // org/apache/commons/compress/archivers/zip/ZipFile.setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n-  #229 = Methodref          #66.#723      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExtra:([B)V\n-  #230 = Methodref          #166.#724     // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-  #231 = Methodref          #166.#725     // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-  #232 = Methodref          #572.#726     // org/apache/commons/compress/archivers/zip/ZipUtil.setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-  #233 = Methodref          #54.#727      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n-  #234 = Methodref          #21.#728      // java/util/LinkedList.addLast:(Ljava/lang/Object;)V\n-  #235 = Long               26l\n-  #237 = Methodref          #535.#729     // java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;\n-  #238 = Long               2l\n-  #240 = Methodref          #54.#730      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDataOffset:(J)V\n-  #241 = Fieldref           #586.#731     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n-  #242 = Class              #732          // java/nio/channels/FileChannel\n-  #243 = Class              #733          // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n-  #244 = Methodref          #243.#734     // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n-  #245 = Class              #735          // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream\n-  #246 = Methodref          #245.#734     // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n-  #247 = Fieldref           #586.#736     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.CFH_SIG:[B\n-  #248 = Class              #737          // java/lang/Object\n-  #249 = Class              #738          // java/io/Closeable\n-  #250 = Class              #739          // org/apache/commons/compress/archivers/zip/ZipFile$3\n-  #251 = Utf8               InnerClasses\n-  #252 = Utf8               StoredStatisticsStream\n-  #253 = Utf8               Entry\n-  #254 = Utf8               NameAndComment\n-  #255 = Utf8               BoundedFileChannelInputStream\n-  #256 = Utf8               BoundedInputStream\n-  #257 = Utf8               HASH_SIZE\n-  #258 = Utf8               I\n-  #259 = Utf8               ConstantValue\n-  #260 = Integer            509\n-  #261 = Utf8               NIBLET_MASK\n-  #262 = Integer            15\n-  #263 = Utf8               BYTE_SHIFT\n-  #264 = Integer            8\n-  #265 = Utf8               POS_0\n-  #266 = Integer            0\n-  #267 = Utf8               POS_1\n-  #268 = Integer            1\n-  #269 = Utf8               POS_2\n-  #270 = Integer            2\n-  #271 = Utf8               POS_3\n-  #272 = Integer            3\n-  #273 = Utf8               ONE_ZERO_BYTE\n-  #274 = Utf8               [B\n-  #275 = Utf8               entries\n-  #276 = Utf8               Ljava/util/List;\n-  #277 = Utf8               Signature\n-  #278 = Utf8               Ljava/util/List<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n-  #279 = Utf8               nameMap\n-  #280 = Utf8               Ljava/util/Map;\n-  #281 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;>;\n-  #282 = Utf8               encoding\n-  #283 = Utf8               Ljava/lang/String;\n-  #284 = Utf8               zipEncoding\n-  #285 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #286 = Utf8               archiveName\n-  #287 = Utf8               archive\n-  #288 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n-  #289 = Utf8               useUnicodeExtraFields\n-  #290 = Utf8               Z\n-  #291 = Utf8               closed\n-  #292 = Utf8               isSplitZipArchive\n-  #293 = Utf8               dwordBuf\n-  #294 = Utf8               wordBuf\n-  #295 = Utf8               cfhBuf\n-  #296 = Utf8               shortBuf\n-  #297 = Utf8               dwordBbuf\n-  #298 = Utf8               Ljava/nio/ByteBuffer;\n-  #299 = Utf8               wordBbuf\n-  #300 = Utf8               cfhBbuf\n-  #301 = Utf8               shortBbuf\n-  #302 = Utf8               CFH_LEN\n-  #303 = Integer            42\n-  #304 = Utf8               CFH_SIG\n-  #305 = Utf8               J\n-  #306 = Utf8               MIN_EOCD_SIZE\n-  #307 = Integer            22\n-  #308 = Utf8               MAX_EOCD_SIZE\n-  #309 = Integer            65557\n-  #310 = Utf8               CFD_LOCATOR_OFFSET\n-  #311 = Integer            16\n-  #312 = Utf8               CFD_DISK_OFFSET\n-  #313 = Integer            6\n-  #314 = Utf8               CFD_LOCATOR_RELATIVE_OFFSET\n-  #315 = Utf8               ZIP64_EOCDL_LENGTH\n-  #316 = Integer            20\n-  #317 = Utf8               ZIP64_EOCDL_LOCATOR_OFFSET\n-  #318 = Utf8               ZIP64_EOCD_CFD_LOCATOR_OFFSET\n-  #319 = Integer            48\n-  #320 = Utf8               ZIP64_EOCD_CFD_DISK_OFFSET\n-  #321 = Utf8               ZIP64_EOCD_CFD_LOCATOR_RELATIVE_OFFSET\n-  #322 = Integer            24\n-  #323 = Utf8               LFH_OFFSET_FOR_FILENAME_LENGTH\n-  #324 = Utf8               offsetComparator\n-  #325 = Utf8               Ljava/util/Comparator;\n-  #326 = Utf8               Ljava/util/Comparator<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n-  #327 = Utf8               <init>\n-  #328 = Utf8               (Ljava/io/File;)V\n-  #329 = Utf8               Code\n-  #330 = Utf8               LineNumberTable\n-  #331 = Utf8               LocalVariableTable\n-  #332 = Utf8               this\n-  #333 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile;\n-  #334 = Utf8               f\n-  #335 = Utf8               Ljava/io/File;\n-  #336 = Utf8               Exceptions\n-  #337 = Utf8               (Ljava/lang/String;)V\n-  #338 = Utf8               name\n-  #339 = Utf8               (Ljava/lang/String;Ljava/lang/String;)V\n-  #340 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n-  #341 = Utf8               (Ljava/io/File;Ljava/lang/String;Z)V\n-  #342 = Utf8               (Ljava/io/File;Ljava/lang/String;ZZ)V\n-  #343 = Utf8               ignoreLocalFileHeader\n-  #344 = Utf8               (Ljava/nio/channels/SeekableByteChannel;)V\n-  #345 = Utf8               channel\n-  #346 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;)V\n-  #347 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n-  #348 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZ)V\n-  #349 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n-  #350 = Utf8               entriesWithoutUTF8Flag\n-  #351 = Utf8               closeOnError\n-  #352 = Utf8               success\n-  #353 = Utf8               LocalVariableTypeTable\n-  #354 = Utf8               Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n-  #355 = Utf8               StackMapTable\n-  #356 = Class              #502          // org/apache/commons/compress/archivers/zip/ZipFile\n-  #357 = Class              #740          // java/nio/channels/SeekableByteChannel\n-  #358 = Class              #741          // java/lang/String\n-  #359 = Class              #742          // java/util/Map\n-  #360 = Class              #624          // java/lang/Throwable\n-  #361 = Utf8               getEncoding\n-  #362 = Utf8               ()Ljava/lang/String;\n-  #363 = Utf8               close\n-  #364 = Utf8               ()V\n-  #365 = Utf8               closeQuietly\n-  #366 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)V\n-  #367 = Utf8               zipfile\n-  #368 = Utf8               getEntries\n-  #369 = Utf8               ()Ljava/util/Enumeration;\n-  #370 = Utf8               ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n-  #371 = Utf8               getEntriesInPhysicalOrder\n-  #372 = Utf8               allEntries\n-  #373 = Utf8               [Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #374 = Utf8               getEntry\n-  #375 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #376 = Utf8               entriesOfThatName\n-  #377 = Utf8               Ljava/util/LinkedList;\n-  #378 = Utf8               Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n-  #379 = Class              #525          // java/util/LinkedList\n-  #380 = Class              #561          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #381 = Utf8               (Ljava/lang/String;)Ljava/lang/Iterable;\n-  #382 = Class              #569          // java/util/List\n-  #383 = Utf8               (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n-  #384 = Utf8               canReadEntryData\n-  #385 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #386 = Utf8               ze\n-  #387 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #388 = Utf8               getRawInputStream\n-  #389 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-  #390 = Utf8               start\n-  #391 = Utf8               copyRawEntries\n-  #392 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate;)V\n-  #393 = Utf8               entry\n-  #394 = Utf8               target\n-  #395 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream;\n-  #396 = Utf8               predicate\n-  #397 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate;\n-  #398 = Utf8               src\n-  #399 = Utf8               Ljava/util/Enumeration;\n-  #400 = Utf8               Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n-  #401 = Class              #743          // java/util/Enumeration\n-  #402 = Utf8               getInputStream\n-  #403 = Utf8               inflater\n-  #404 = Utf8               Ljava/util/zip/Inflater;\n-  #405 = Utf8               is\n-  #406 = Utf8               Ljava/io/InputStream;\n-  #407 = Class              #744          // java/io/InputStream\n-  #408 = Utf8               getUnixSymlink\n-  #409 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n-  #410 = Utf8               in\n-  #411 = Utf8               finalize\n-  #412 = Utf8               populateFromCentralDirectory\n-  #413 = Utf8               ()Ljava/util/Map;\n-  #414 = Utf8               noUTF8Flag\n-  #415 = Utf8               Ljava/util/HashMap;\n-  #416 = Utf8               sig\n-  #417 = Utf8               Ljava/util/HashMap<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n-  #418 = Class              #527          // java/util/HashMap\n-  #419 = Utf8               ()Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n-  #420 = Utf8               readCentralDirectoryEntry\n-  #421 = Utf8               (Ljava/util/Map;)V\n-  #422 = Utf8               off\n-  #423 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile$Entry;\n-  #424 = Utf8               versionMadeBy\n-  #425 = Utf8               gpFlag\n-  #426 = Utf8               Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #427 = Utf8               hasUTF8Flag\n-  #428 = Utf8               entryEncoding\n-  #429 = Utf8               time\n-  #430 = Utf8               fileNameLen\n-  #431 = Utf8               extraLen\n-  #432 = Utf8               commentLen\n-  #433 = Utf8               fileName\n-  #434 = Utf8               cdExtraData\n-  #435 = Utf8               comment\n-  #436 = Class              #574          // org/apache/commons/compress/archivers/zip/ZipFile$Entry\n-  #437 = Class              #745          // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-  #438 = Class              #746          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #439 = Class              #274          // \"[B\"\n-  #440 = Utf8               (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n-  #441 = Utf8               setSizesAndOffsetFromZip64Extra\n-  #442 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #443 = Utf8               hasUncompressedSize\n-  #444 = Utf8               hasCompressedSize\n-  #445 = Utf8               hasRelativeHeaderOffset\n-  #446 = Utf8               hasDiskStart\n-  #447 = Utf8               z64\n-  #448 = Utf8               Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n-  #449 = Class              #680          // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-  #450 = Utf8               positionAtCentralDirectory\n-  #451 = Utf8               found\n-  #452 = Utf8               searchedForZip64EOCD\n-  #453 = Utf8               positionAtCentralDirectory64\n-  #454 = Utf8               diskNumberOfEOCD\n-  #455 = Utf8               relativeOffsetOfEOCD\n-  #456 = Utf8               diskNumberOfCFD\n-  #457 = Utf8               relativeOffsetOfCFD\n-  #458 = Utf8               positionAtCentralDirectory32\n-  #459 = Utf8               positionAtEndOfCentralDirectoryRecord\n-  #460 = Utf8               tryToLocateSignature\n-  #461 = Utf8               (JJ[B)Z\n-  #462 = Utf8               ex\n-  #463 = Utf8               Ljava/io/EOFException;\n-  #464 = Utf8               curr\n-  #465 = Utf8               minDistanceFromEnd\n-  #466 = Utf8               maxDistanceFromEnd\n-  #467 = Utf8               stopSearching\n-  #468 = Class              #716          // java/io/EOFException\n-  #469 = Utf8               skipBytes\n-  #470 = Utf8               (I)V\n-  #471 = Utf8               count\n-  #472 = Utf8               currentPosition\n-  #473 = Utf8               newPosition\n-  #474 = Utf8               resolveLocalFileHeaderData\n-  #475 = Utf8               nc\n-  #476 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;\n-  #477 = Utf8               lens\n-  #478 = Utf8               [I\n-  #479 = Utf8               extraFieldLen\n-  #480 = Utf8               localExtraData\n-  #481 = Utf8               zipArchiveEntry\n-  #482 = Class              #747          // java/util/Iterator\n-  #483 = Utf8               fillNameMap\n-  #484 = Utf8               setDataOffset\n-  #485 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n-  #486 = Utf8               offset\n-  #487 = Utf8               getDataOffset\n-  #488 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n-  #489 = Utf8               s\n-  #490 = Utf8               startsWithLocalFileHeader\n-  #491 = Utf8               ()Z\n-  #492 = Utf8               createBoundedInputStream\n-  #493 = Utf8               (JJ)Lorg/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream;\n-  #494 = Utf8               remaining\n-  #495 = Class              #735          // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream\n-  #496 = Utf8               access$300\n-  #497 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n-  #498 = Utf8               x0\n-  #499 = Utf8               <clinit>\n-  #500 = Utf8               SourceFile\n-  #501 = Utf8               ZipFile.java\n-  #502 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile\n-  #503 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n-  #504 = NameAndType        #287:#288     // archive:Ljava/nio/channels/SeekableByteChannel;\n-  #505 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #506 = Utf8               UTF8\n-  #507 = NameAndType        #327:#340     // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-  #508 = Utf8               java/io/File\n-  #509 = NameAndType        #327:#337     // \"<init>\":(Ljava/lang/String;)V\n-  #510 = NameAndType        #327:#341     // \"<init>\":(Ljava/io/File;Ljava/lang/String;Z)V\n-  #511 = NameAndType        #327:#342     // \"<init>\":(Ljava/io/File;Ljava/lang/String;ZZ)V\n-  #512 = NameAndType        #748:#749     // toPath:()Ljava/nio/file/Path;\n-  #513 = Class              #750          // java/nio/file/StandardOpenOption\n-  #514 = NameAndType        #751:#752     // READ:Ljava/nio/file/StandardOpenOption;\n-  #515 = Class              #753          // java/util/EnumSet\n-  #516 = NameAndType        #754:#755     // of:(Ljava/lang/Enum;)Ljava/util/EnumSet;\n-  #517 = Utf8               java/nio/file/attribute/FileAttribute\n-  #518 = Class              #756          // java/nio/file/Files\n-  #519 = NameAndType        #757:#758     // newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n-  #520 = NameAndType        #759:#362     // getAbsolutePath:()Ljava/lang/String;\n-  #521 = NameAndType        #327:#349     // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n-  #522 = Utf8               unknown archive\n-  #523 = NameAndType        #327:#347     // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n-  #524 = NameAndType        #327:#364     // \"<init>\":()V\n-  #525 = Utf8               java/util/LinkedList\n-  #526 = NameAndType        #275:#276     // entries:Ljava/util/List;\n-  #527 = Utf8               java/util/HashMap\n-  #528 = NameAndType        #327:#470     // \"<init>\":(I)V\n-  #529 = NameAndType        #279:#280     // nameMap:Ljava/util/Map;\n-  #530 = NameAndType        #291:#290     // closed:Z\n-  #531 = NameAndType        #293:#274     // dwordBuf:[B\n-  #532 = NameAndType        #294:#274     // wordBuf:[B\n-  #533 = NameAndType        #295:#274     // cfhBuf:[B\n-  #534 = NameAndType        #296:#274     // shortBuf:[B\n-  #535 = Class              #760          // java/nio/ByteBuffer\n-  #536 = NameAndType        #761:#762     // wrap:([B)Ljava/nio/ByteBuffer;\n-  #537 = NameAndType        #297:#298     // dwordBbuf:Ljava/nio/ByteBuffer;\n-  #538 = NameAndType        #299:#298     // wordBbuf:Ljava/nio/ByteBuffer;\n-  #539 = NameAndType        #300:#298     // cfhBbuf:Ljava/nio/ByteBuffer;\n-  #540 = NameAndType        #301:#298     // shortBbuf:Ljava/nio/ByteBuffer;\n-  #541 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$2\n-  #542 = NameAndType        #327:#366     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;)V\n-  #543 = NameAndType        #324:#325     // offsetComparator:Ljava/util/Comparator;\n-  #544 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n-  #545 = NameAndType        #292:#290     // isSplitZipArchive:Z\n-  #546 = NameAndType        #286:#283     // archiveName:Ljava/lang/String;\n-  #547 = NameAndType        #282:#283     // encoding:Ljava/lang/String;\n-  #548 = NameAndType        #763:#764     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #549 = NameAndType        #284:#285     // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #550 = NameAndType        #289:#290     // useUnicodeExtraFields:Z\n-  #551 = NameAndType        #412:#413     // populateFromCentralDirectory:()Ljava/util/Map;\n-  #552 = NameAndType        #474:#421     // resolveLocalFileHeaderData:(Ljava/util/Map;)V\n-  #553 = NameAndType        #483:#364     // fillNameMap:()V\n-  #554 = Class              #765          // org/apache/commons/compress/utils/IOUtils\n-  #555 = NameAndType        #365:#766     // closeQuietly:(Ljava/io/Closeable;)V\n-  #556 = Class              #740          // java/nio/channels/SeekableByteChannel\n-  #557 = NameAndType        #363:#364     // close:()V\n-  #558 = Class              #767          // java/util/Collections\n-  #559 = NameAndType        #768:#769     // enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n-  #560 = NameAndType        #770:#771     // size:()I\n-  #561 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #562 = NameAndType        #772:#773     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #563 = Class              #774          // java/util/Arrays\n-  #564 = NameAndType        #775:#776     // sort:([Ljava/lang/Object;Ljava/util/Comparator;)V\n-  #565 = NameAndType        #777:#778     // asList:([Ljava/lang/Object;)Ljava/util/List;\n-  #566 = Class              #742          // java/util/Map\n-  #567 = NameAndType        #779:#780     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #568 = NameAndType        #781:#782     // getFirst:()Ljava/lang/Object;\n-  #569 = Utf8               java/util/List\n-  #570 = NameAndType        #783:#784     // emptyList:()Ljava/util/List;\n-  #571 = NameAndType        #785:#786     // containsKey:(Ljava/lang/Object;)Z\n-  #572 = Class              #787          // org/apache/commons/compress/archivers/zip/ZipUtil\n-  #573 = NameAndType        #788:#385     // canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #574 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$Entry\n-  #575 = NameAndType        #487:#789     // getDataOffset:()J\n-  #576 = Utf8               org/apache/commons/compress/archivers/EntryStreamOffsets\n-  #577 = NameAndType        #790:#789     // getCompressedSize:()J\n-  #578 = NameAndType        #492:#493     // createBoundedInputStream:(JJ)Lorg/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream;\n-  #579 = NameAndType        #371:#369     // getEntriesInPhysicalOrder:()Ljava/util/Enumeration;\n-  #580 = Class              #743          // java/util/Enumeration\n-  #581 = NameAndType        #791:#491     // hasMoreElements:()Z\n-  #582 = NameAndType        #792:#782     // nextElement:()Ljava/lang/Object;\n-  #583 = Class              #793          // org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate\n-  #584 = NameAndType        #794:#385     // test:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #585 = NameAndType        #388:#389     // getRawInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-  #586 = Class              #795          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-  #587 = NameAndType        #796:#797     // addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n-  #588 = NameAndType        #798:#442     // checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #589 = NameAndType        #487:#488     // getDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n-  #590 = Utf8               java/io/BufferedInputStream\n-  #591 = NameAndType        #327:#799     // \"<init>\":(Ljava/io/InputStream;)V\n-  #592 = NameAndType        #800:#478     // $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n-  #593 = NameAndType        #801:#771     // getMethod:()I\n-  #594 = Class              #802          // org/apache/commons/compress/archivers/zip/ZipMethod\n-  #595 = NameAndType        #803:#804     // getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #596 = NameAndType        #805:#771     // ordinal:()I\n-  #597 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream\n-  #598 = Utf8               org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-  #599 = Utf8               org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-  #600 = NameAndType        #806:#807     // getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #601 = Class              #745          // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-  #602 = NameAndType        #808:#771     // getSlidingDictionarySize:()I\n-  #603 = NameAndType        #809:#771     // getNumberOfShannonFanoTrees:()I\n-  #604 = NameAndType        #327:#810     // \"<init>\":(IILjava/io/InputStream;)V\n-  #605 = Utf8               java/util/zip/Inflater\n-  #606 = NameAndType        #327:#811     // \"<init>\":(Z)V\n-  #607 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$1\n-  #608 = Utf8               java/io/SequenceInputStream\n-  #609 = Utf8               java/io/ByteArrayInputStream\n-  #610 = NameAndType        #273:#274     // ONE_ZERO_BYTE:[B\n-  #611 = NameAndType        #327:#812     // \"<init>\":([B)V\n-  #612 = NameAndType        #327:#813     // \"<init>\":(Ljava/io/InputStream;Ljava/io/InputStream;)V\n-  #613 = NameAndType        #327:#814     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n-  #614 = Utf8               org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n-  #615 = Utf8               org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n-  #616 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-  #617 = NameAndType        #327:#815     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #618 = NameAndType        #816:#491     // isUnixSymlink:()Z\n-  #619 = NameAndType        #402:#389     // getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n-  #620 = NameAndType        #817:#818     // toByteArray:(Ljava/io/InputStream;)[B\n-  #621 = Class              #746          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #622 = NameAndType        #819:#820     // decode:([B)Ljava/lang/String;\n-  #623 = Class              #744          // java/io/InputStream\n-  #624 = Utf8               java/lang/Throwable\n-  #625 = NameAndType        #821:#822     // addSuppressed:(Ljava/lang/Throwable;)V\n-  #626 = Class              #823          // java/lang/System\n-  #627 = NameAndType        #824:#825     // err:Ljava/io/PrintStream;\n-  #628 = Utf8               java/lang/StringBuilder\n-  #629 = Utf8               Cleaning up unclosed ZipFile for archive\n-  #630 = NameAndType        #826:#827     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #631 = NameAndType        #828:#362     // toString:()Ljava/lang/String;\n-  #632 = Class              #829          // java/io/PrintStream\n-  #633 = NameAndType        #830:#337     // println:(Ljava/lang/String;)V\n-  #634 = NameAndType        #411:#364     // finalize:()V\n-  #635 = NameAndType        #450:#364     // positionAtCentralDirectory:()V\n-  #636 = NameAndType        #831:#832     // rewind:()Ljava/nio/Buffer;\n-  #637 = NameAndType        #833:#834     // readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n-  #638 = Class              #835          // org/apache/commons/compress/archivers/zip/ZipLong\n-  #639 = NameAndType        #836:#837     // getValue:([B)J\n-  #640 = NameAndType        #304:#305     // CFH_SIG:J\n-  #641 = NameAndType        #490:#491     // startsWithLocalFileHeader:()Z\n-  #642 = Utf8               java/io/IOException\n-  #643 = Utf8               Central directory is empty, can\\'t expand corrupt archive.\n-  #644 = NameAndType        #420:#421     // readCentralDirectoryEntry:(Ljava/util/Map;)V\n-  #645 = Class              #838          // org/apache/commons/compress/archivers/zip/ZipShort\n-  #646 = NameAndType        #836:#839     // getValue:([BI)I\n-  #647 = NameAndType        #840:#470     // setVersionMadeBy:(I)V\n-  #648 = NameAndType        #841:#470     // setPlatform:(I)V\n-  #649 = NameAndType        #842:#470     // setVersionRequired:(I)V\n-  #650 = NameAndType        #843:#844     // parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #651 = NameAndType        #845:#491     // usesUTF8ForNames:()Z\n-  #652 = NameAndType        #846:#285     // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #653 = Class              #847          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n-  #654 = NameAndType        #849:#850     // NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-  #655 = NameAndType        #851:#852     // setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-  #656 = NameAndType        #853:#854     // setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n-  #657 = NameAndType        #855:#470     // setRawFlag:(I)V\n-  #658 = NameAndType        #856:#470     // setMethod:(I)V\n-  #659 = NameAndType        #836:#857     // getValue:([BI)J\n-  #660 = NameAndType        #858:#859     // dosToJavaTime:(J)J\n-  #661 = NameAndType        #860:#861     // setTime:(J)V\n-  #662 = NameAndType        #862:#861     // setCrc:(J)V\n-  #663 = NameAndType        #863:#861     // setCompressedSize:(J)V\n-  #664 = NameAndType        #864:#861     // setSize:(J)V\n-  #665 = NameAndType        #865:#861     // setDiskNumberStart:(J)V\n-  #666 = NameAndType        #866:#470     // setInternalAttributes:(I)V\n-  #667 = NameAndType        #867:#861     // setExternalAttributes:(J)V\n-  #668 = NameAndType        #868:#869     // setName:(Ljava/lang/String;[B)V\n-  #669 = NameAndType        #870:#861     // setLocalHeaderOffset:(J)V\n-  #670 = NameAndType        #871:#786     // add:(Ljava/lang/Object;)Z\n-  #671 = NameAndType        #872:#812     // setCentralDirectoryExtra:([B)V\n-  #672 = NameAndType        #441:#442     // setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #673 = NameAndType        #873:#337     // setComment:(Ljava/lang/String;)V\n-  #674 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n-  #675 = NameAndType        #327:#874     // \"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n-  #676 = NameAndType        #875:#876     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #677 = NameAndType        #877:#811     // setStreamContiguous:(Z)V\n-  #678 = NameAndType        #878:#879     // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #679 = NameAndType        #880:#881     // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #680 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-  #681 = NameAndType        #882:#789     // getSize:()J\n-  #682 = NameAndType        #883:#789     // getLocalHeaderOffset:()J\n-  #683 = NameAndType        #884:#789     // getDiskNumberStart:()J\n-  #684 = NameAndType        #885:#886     // reparseCentralDirectoryData:(ZZZZ)V\n-  #685 = NameAndType        #882:#887     // getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #686 = NameAndType        #888:#789     // getLongValue:()J\n-  #687 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  #688 = NameAndType        #327:#861     // \"<init>\":(J)V\n-  #689 = NameAndType        #864:#889     // setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #690 = NameAndType        #790:#887     // getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #691 = NameAndType        #863:#889     // setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #692 = NameAndType        #890:#887     // getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #693 = NameAndType        #891:#892     // getDiskStartNumber:()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #694 = NameAndType        #836:#789     // getValue:()J\n-  #695 = NameAndType        #459:#364     // positionAtEndOfCentralDirectoryRecord:()V\n-  #696 = NameAndType        #893:#789     // position:()J\n-  #697 = NameAndType        #893:#894     // position:(J)Ljava/nio/channels/SeekableByteChannel;\n-  #698 = NameAndType        #895:#274     // ZIP64_EOCD_LOC_SIG:[B\n-  #699 = NameAndType        #896:#897     // equals:([B[B)Z\n-  #700 = NameAndType        #469:#470     // skipBytes:(I)V\n-  #701 = NameAndType        #458:#364     // positionAtCentralDirectory32:()V\n-  #702 = NameAndType        #453:#364     // positionAtCentralDirectory64:()V\n-  #703 = NameAndType        #888:#837     // getLongValue:([B)J\n-  #704 = NameAndType        #893:#898     // position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n-  #705 = NameAndType        #899:#274     // ZIP64_EOCD_SIG:[B\n-  #706 = Utf8               java/util/zip/ZipException\n-  #707 = Utf8               Archive\\'s ZIP64 end of central directory locator is corrupt.\n-  #708 = NameAndType        #836:#900     // getValue:([B)I\n-  #709 = NameAndType        #901:#274     // EOCD_SIG:[B\n-  #710 = NameAndType        #460:#461     // tryToLocateSignature:(JJ[B)Z\n-  #711 = Utf8               Archive is not a ZIP archive\n-  #712 = NameAndType        #770:#789     // size:()J\n-  #713 = Class              #902          // java/lang/Math\n-  #714 = NameAndType        #903:#904     // max:(JJ)J\n-  #715 = NameAndType        #905:#832     // flip:()Ljava/nio/Buffer;\n-  #716 = Utf8               java/io/EOFException\n-  #717 = NameAndType        #779:#906     // get:()B\n-  #718 = NameAndType        #907:#908     // iterator:()Ljava/util/Iterator;\n-  #719 = Class              #747          // java/util/Iterator\n-  #720 = NameAndType        #909:#491     // hasNext:()Z\n-  #721 = NameAndType        #910:#782     // next:()Ljava/lang/Object;\n-  #722 = NameAndType        #484:#485     // setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n-  #723 = NameAndType        #911:#812     // setExtra:([B)V\n-  #724 = NameAndType        #912:#913     // access$100:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-  #725 = NameAndType        #914:#913     // access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-  #726 = NameAndType        #915:#916     // setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-  #727 = NameAndType        #917:#362     // getName:()Ljava/lang/String;\n-  #728 = NameAndType        #918:#919     // addLast:(Ljava/lang/Object;)V\n-  #729 = NameAndType        #779:#762     // get:([B)Ljava/nio/ByteBuffer;\n-  #730 = NameAndType        #484:#861     // setDataOffset:(J)V\n-  #731 = NameAndType        #920:#274     // LFH_SIG:[B\n-  #732 = Utf8               java/nio/channels/FileChannel\n-  #733 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n-  #734 = NameAndType        #327:#921     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n-  #735 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream\n-  #736 = NameAndType        #304:#274     // CFH_SIG:[B\n-  #737 = Utf8               java/lang/Object\n-  #738 = Utf8               java/io/Closeable\n-  #739 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$3\n-  #740 = Utf8               java/nio/channels/SeekableByteChannel\n-  #741 = Utf8               java/lang/String\n-  #742 = Utf8               java/util/Map\n-  #743 = Utf8               java/util/Enumeration\n-  #744 = Utf8               java/io/InputStream\n-  #745 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-  #746 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #747 = Utf8               java/util/Iterator\n-  #748 = Utf8               toPath\n-  #749 = Utf8               ()Ljava/nio/file/Path;\n-  #750 = Utf8               java/nio/file/StandardOpenOption\n-  #751 = Utf8               READ\n-  #752 = Utf8               Ljava/nio/file/StandardOpenOption;\n-  #753 = Utf8               java/util/EnumSet\n-  #754 = Utf8               of\n-  #755 = Utf8               (Ljava/lang/Enum;)Ljava/util/EnumSet;\n-  #756 = Utf8               java/nio/file/Files\n-  #757 = Utf8               newByteChannel\n-  #758 = Utf8               (Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n-  #759 = Utf8               getAbsolutePath\n-  #760 = Utf8               java/nio/ByteBuffer\n-  #761 = Utf8               wrap\n-  #762 = Utf8               ([B)Ljava/nio/ByteBuffer;\n-  #763 = Utf8               getZipEncoding\n-  #764 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #765 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #766 = Utf8               (Ljava/io/Closeable;)V\n-  #767 = Utf8               java/util/Collections\n-  #768 = Utf8               enumeration\n-  #769 = Utf8               (Ljava/util/Collection;)Ljava/util/Enumeration;\n-  #770 = Utf8               size\n-  #771 = Utf8               ()I\n-  #772 = Utf8               toArray\n-  #773 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #774 = Utf8               java/util/Arrays\n-  #775 = Utf8               sort\n-  #776 = Utf8               ([Ljava/lang/Object;Ljava/util/Comparator;)V\n-  #777 = Utf8               asList\n-  #778 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;\n-  #779 = Utf8               get\n-  #780 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #781 = Utf8               getFirst\n-  #782 = Utf8               ()Ljava/lang/Object;\n-  #783 = Utf8               emptyList\n-  #784 = Utf8               ()Ljava/util/List;\n-  #785 = Utf8               containsKey\n-  #786 = Utf8               (Ljava/lang/Object;)Z\n-  #787 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n-  #788 = Utf8               canHandleEntryData\n-  #789 = Utf8               ()J\n-  #790 = Utf8               getCompressedSize\n-  #791 = Utf8               hasMoreElements\n-  #792 = Utf8               nextElement\n-  #793 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate\n-  #794 = Utf8               test\n-  #795 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-  #796 = Utf8               addRawArchiveEntry\n-  #797 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n-  #798 = Utf8               checkRequestedFeatures\n-  #799 = Utf8               (Ljava/io/InputStream;)V\n-  #800 = Utf8               $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod\n-  #801 = Utf8               getMethod\n-  #802 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n-  #803 = Utf8               getMethodByCode\n-  #804 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #805 = Utf8               ordinal\n-  #806 = Utf8               getGeneralPurposeBit\n-  #807 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #808 = Utf8               getSlidingDictionarySize\n-  #809 = Utf8               getNumberOfShannonFanoTrees\n-  #810 = Utf8               (IILjava/io/InputStream;)V\n-  #811 = Utf8               (Z)V\n-  #812 = Utf8               ([B)V\n-  #813 = Utf8               (Ljava/io/InputStream;Ljava/io/InputStream;)V\n-  #814 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n-  #815 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #816 = Utf8               isUnixSymlink\n-  #817 = Utf8               toByteArray\n-  #818 = Utf8               (Ljava/io/InputStream;)[B\n-  #819 = Utf8               decode\n-  #820 = Utf8               ([B)Ljava/lang/String;\n-  #821 = Utf8               addSuppressed\n-  #822 = Utf8               (Ljava/lang/Throwable;)V\n-  #823 = Utf8               java/lang/System\n-  #824 = Utf8               err\n-  #825 = Utf8               Ljava/io/PrintStream;\n-  #826 = Utf8               append\n-  #827 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #828 = Utf8               toString\n-  #829 = Utf8               java/io/PrintStream\n-  #830 = Utf8               println\n-  #831 = Utf8               rewind\n-  #832 = Utf8               ()Ljava/nio/Buffer;\n-  #833 = Utf8               readFully\n-  #834 = Utf8               (Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n-  #835 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-  #836 = Utf8               getValue\n-  #837 = Utf8               ([B)J\n-  #838 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-  #839 = Utf8               ([BI)I\n-  #840 = Utf8               setVersionMadeBy\n-  #841 = Utf8               setPlatform\n-  #842 = Utf8               setVersionRequired\n-  #843 = Utf8               parse\n-  #844 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #845 = Utf8               usesUTF8ForNames\n-  #846 = Utf8               UTF8_ZIP_ENCODING\n-  #847 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n-  #848 = Utf8               NameSource\n-  #849 = Utf8               NAME_WITH_EFS_FLAG\n-  #850 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-  #851 = Utf8               setNameSource\n-  #852 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-  #853 = Utf8               setGeneralPurposeBit\n-  #854 = Utf8               (Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n-  #855 = Utf8               setRawFlag\n-  #856 = Utf8               setMethod\n-  #857 = Utf8               ([BI)J\n-  #858 = Utf8               dosToJavaTime\n-  #859 = Utf8               (J)J\n-  #860 = Utf8               setTime\n-  #861 = Utf8               (J)V\n-  #862 = Utf8               setCrc\n-  #863 = Utf8               setCompressedSize\n-  #864 = Utf8               setSize\n-  #865 = Utf8               setDiskNumberStart\n-  #866 = Utf8               setInternalAttributes\n-  #867 = Utf8               setExternalAttributes\n-  #868 = Utf8               setName\n-  #869 = Utf8               (Ljava/lang/String;[B)V\n-  #870 = Utf8               setLocalHeaderOffset\n-  #871 = Utf8               add\n-  #872 = Utf8               setCentralDirectoryExtra\n-  #873 = Utf8               setComment\n-  #874 = Utf8               ([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n-  #875 = Utf8               put\n-  #876 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #877 = Utf8               setStreamContiguous\n-  #878 = Utf8               HEADER_ID\n-  #879 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #880 = Utf8               getExtraField\n-  #881 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #882 = Utf8               getSize\n-  #883 = Utf8               getLocalHeaderOffset\n-  #884 = Utf8               getDiskNumberStart\n-  #885 = Utf8               reparseCentralDirectoryData\n-  #886 = Utf8               (ZZZZ)V\n-  #887 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #888 = Utf8               getLongValue\n-  #889 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #890 = Utf8               getRelativeHeaderOffset\n-  #891 = Utf8               getDiskStartNumber\n-  #892 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #893 = Utf8               position\n-  #894 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n-  #895 = Utf8               ZIP64_EOCD_LOC_SIG\n-  #896 = Utf8               equals\n-  #897 = Utf8               ([B[B)Z\n-  #898 = Utf8               (JJ)Ljava/nio/channels/SeekableByteChannel;\n-  #899 = Utf8               ZIP64_EOCD_SIG\n-  #900 = Utf8               ([B)I\n-  #901 = Utf8               EOCD_SIG\n-  #902 = Utf8               java/lang/Math\n-  #903 = Utf8               max\n-  #904 = Utf8               (JJ)J\n-  #905 = Utf8               flip\n-  #906 = Utf8               ()B\n-  #907 = Utf8               iterator\n-  #908 = Utf8               ()Ljava/util/Iterator;\n-  #909 = Utf8               hasNext\n-  #910 = Utf8               next\n-  #911 = Utf8               setExtra\n-  #912 = Utf8               access$100\n-  #913 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-  #914 = Utf8               access$200\n-  #915 = Utf8               setNameAndCommentFromExtraFields\n-  #916 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-  #917 = Utf8               getName\n-  #918 = Utf8               addLast\n-  #919 = Utf8               (Ljava/lang/Object;)V\n-  #920 = Utf8               LFH_SIG\n-  #921 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n+   #71 = Methodref          #54.#562      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+   #72 = Methodref          #1.#563       // org/apache/commons/compress/archivers/zip/ZipFile.createBoundedInputStream:(JJ)Lorg/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream;\n+   #73 = Methodref          #1.#564       // org/apache/commons/compress/archivers/zip/ZipFile.getEntriesInPhysicalOrder:()Ljava/util/Enumeration;\n+   #74 = InterfaceMethodref #393.#565     // java/util/Enumeration.hasMoreElements:()Z\n+   #75 = InterfaceMethodref #393.#566     // java/util/Enumeration.nextElement:()Ljava/lang/Object;\n+   #76 = InterfaceMethodref #567.#568     // org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate.test:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #77 = Methodref          #1.#569       // org/apache/commons/compress/archivers/zip/ZipFile.getRawInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+   #78 = Methodref          #570.#571     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n+   #79 = Methodref          #557.#572     // org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #80 = Methodref          #1.#573       // org/apache/commons/compress/archivers/zip/ZipFile.getDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n+   #81 = Class              #574          // java/io/BufferedInputStream\n+   #82 = Methodref          #81.#575      // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #83 = Fieldref           #246.#576     // org/apache/commons/compress/archivers/zip/ZipFile$3.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n+   #84 = Methodref          #54.#577      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+   #85 = Methodref          #578.#579     // org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #86 = Methodref          #578.#580     // org/apache/commons/compress/archivers/zip/ZipMethod.ordinal:()I\n+   #87 = Class              #581          // org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream\n+   #88 = Methodref          #87.#575      // org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #89 = Class              #582          // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+   #90 = Methodref          #89.#575      // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #91 = Class              #583          // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+   #92 = Methodref          #54.#584      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+   #93 = Methodref          #427.#585     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getSlidingDictionarySize:()I\n+   #94 = Methodref          #427.#586     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getNumberOfShannonFanoTrees:()I\n+   #95 = Methodref          #91.#587      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.\"<init>\":(IILjava/io/InputStream;)V\n+   #96 = Class              #588          // java/util/zip/Inflater\n+   #97 = Methodref          #96.#589      // java/util/zip/Inflater.\"<init>\":(Z)V\n+   #98 = Class              #590          // org/apache/commons/compress/archivers/zip/ZipFile$1\n+   #99 = Class              #591          // java/io/SequenceInputStream\n+  #100 = Class              #592          // java/io/ByteArrayInputStream\n+  #101 = Fieldref           #1.#593       // org/apache/commons/compress/archivers/zip/ZipFile.ONE_ZERO_BYTE:[B\n+  #102 = Methodref          #100.#594     // java/io/ByteArrayInputStream.\"<init>\":([B)V\n+  #103 = Methodref          #99.#595      // java/io/SequenceInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/io/InputStream;)V\n+  #104 = Methodref          #98.#596      // org/apache/commons/compress/archivers/zip/ZipFile$1.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n+  #105 = Class              #597          // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n+  #106 = Methodref          #105.#575     // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+  #107 = Class              #598          // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+  #108 = Methodref          #107.#575     // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+  #109 = Class              #599          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+  #110 = Methodref          #109.#600     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #111 = Methodref          #54.#601      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.isUnixSymlink:()Z\n+  #112 = Methodref          #1.#602       // org/apache/commons/compress/archivers/zip/ZipFile.getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+  #113 = Methodref          #541.#603     // org/apache/commons/compress/utils/IOUtils.toByteArray:(Ljava/io/InputStream;)[B\n+  #114 = InterfaceMethodref #428.#604     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+  #115 = Methodref          #399.#543     // java/io/InputStream.close:()V\n+  #116 = Class              #605          // java/lang/Throwable\n+  #117 = Methodref          #116.#606     // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+  #118 = Fieldref           #607.#608     // java/lang/System.err:Ljava/io/PrintStream;\n+  #119 = InvokeDynamic      #0:#612       // #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n+  #120 = Methodref          #613.#614     // java/io/PrintStream.println:(Ljava/lang/String;)V\n+  #121 = Methodref          #1.#543       // org/apache/commons/compress/archivers/zip/ZipFile.close:()V\n+  #122 = Methodref          #244.#615     // java/lang/Object.finalize:()V\n+  #123 = Methodref          #24.#511      // java/util/HashMap.\"<init>\":()V\n+  #124 = Methodref          #1.#616       // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory:()V\n+  #125 = Methodref          #522.#617     // java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+  #126 = Methodref          #541.#618     // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+  #127 = Methodref          #619.#620     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+  #128 = Fieldref           #1.#621       // org/apache/commons/compress/archivers/zip/ZipFile.CFH_SIG:J\n+  #129 = Methodref          #1.#622       // org/apache/commons/compress/archivers/zip/ZipFile.startsWithLocalFileHeader:()Z\n+  #130 = Class              #623          // java/io/IOException\n+  #131 = String             #624          // Central directory is empty, can\\'t expand corrupt archive.\n+  #132 = Methodref          #130.#496     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+  #133 = Methodref          #1.#625       // org/apache/commons/compress/archivers/zip/ZipFile.readCentralDirectoryEntry:(Ljava/util/Map;)V\n+  #134 = Methodref          #66.#511      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.\"<init>\":()V\n+  #135 = Methodref          #626.#627     // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+  #136 = Methodref          #66.#628      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionMadeBy:(I)V\n+  #137 = Methodref          #66.#629      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setPlatform:(I)V\n+  #138 = Methodref          #66.#630      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionRequired:(I)V\n+  #139 = Methodref          #427.#631     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #140 = Methodref          #427.#632     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesUTF8ForNames:()Z\n+  #141 = Fieldref           #4.#633       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #142 = Fieldref           #634.#635     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+  #143 = Methodref          #66.#636      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+  #144 = Methodref          #66.#637      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+  #145 = Methodref          #66.#638      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setRawFlag:(I)V\n+  #146 = Methodref          #66.#639      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setMethod:(I)V\n+  #147 = Methodref          #619.#640     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+  #148 = Methodref          #557.#641     // org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n+  #149 = Methodref          #66.#642      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setTime:(J)V\n+  #150 = Methodref          #66.#643      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCrc:(J)V\n+  #151 = Methodref          #66.#644      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCompressedSize:(J)V\n+  #152 = Methodref          #66.#645      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setSize:(J)V\n+  #153 = Methodref          #66.#646      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setDiskNumberStart:(J)V\n+  #154 = Methodref          #66.#647      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setInternalAttributes:(I)V\n+  #155 = Methodref          #66.#648      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExternalAttributes:(J)V\n+  #156 = Methodref          #66.#649      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setName:(Ljava/lang/String;[B)V\n+  #157 = Methodref          #66.#650      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setLocalHeaderOffset:(J)V\n+  #158 = InterfaceMethodref #61.#651      // java/util/List.add:(Ljava/lang/Object;)Z\n+  #159 = Methodref          #66.#652      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCentralDirectoryExtra:([B)V\n+  #160 = Methodref          #1.#653       // org/apache/commons/compress/archivers/zip/ZipFile.setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #161 = Methodref          #66.#654      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setComment:(Ljava/lang/String;)V\n+  #162 = Class              #655          // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n+  #163 = Methodref          #162.#656     // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.\"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n+  #164 = InterfaceMethodref #354.#657     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #165 = Methodref          #66.#658      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setStreamContiguous:(Z)V\n+  #166 = Fieldref           #168.#659     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #167 = Methodref          #54.#660      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #168 = Class              #661          // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+  #169 = Methodref          #54.#662      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n+  #170 = Long               4294967295l\n+  #172 = Methodref          #54.#663      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n+  #173 = Methodref          #54.#664      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n+  #174 = Long               65535l\n+  #176 = Methodref          #168.#665     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.reparseCentralDirectoryData:(ZZZZ)V\n+  #177 = Methodref          #168.#666     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #178 = Methodref          #180.#667     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n+  #179 = Methodref          #54.#645      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n+  #180 = Class              #668          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+  #181 = Methodref          #180.#669     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n+  #182 = Methodref          #168.#670     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #183 = Methodref          #168.#671     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #184 = Methodref          #54.#644      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n+  #185 = Methodref          #168.#672     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #186 = Methodref          #168.#673     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #187 = Methodref          #54.#650      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setLocalHeaderOffset:(J)V\n+  #188 = Methodref          #168.#674     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getDiskStartNumber:()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #189 = Methodref          #619.#675     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+  #190 = Methodref          #54.#646      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDiskNumberStart:(J)V\n+  #191 = Methodref          #1.#676       // org/apache/commons/compress/archivers/zip/ZipFile.positionAtEndOfCentralDirectoryRecord:()V\n+  #192 = InterfaceMethodref #352.#677     // java/nio/channels/SeekableByteChannel.position:()J\n+  #193 = Long               20l\n+  #195 = InterfaceMethodref #352.#678     // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+  #196 = Fieldref           #570.#679     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG:[B\n+  #197 = Methodref          #549.#680     // java/util/Arrays.equals:([B[B)Z\n+  #198 = Methodref          #1.#681       // org/apache/commons/compress/archivers/zip/ZipFile.skipBytes:(I)V\n+  #199 = Methodref          #1.#682       // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory32:()V\n+  #200 = Methodref          #1.#683       // org/apache/commons/compress/archivers/zip/ZipFile.positionAtCentralDirectory64:()V\n+  #201 = Methodref          #180.#684     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n+  #202 = Methodref          #40.#685      // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n+  #203 = Fieldref           #570.#686     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_SIG:[B\n+  #204 = Class              #687          // java/util/zip/ZipException\n+  #205 = String             #688          // Archive\\'s ZIP64 end of central directory locator is corrupt.\n+  #206 = Methodref          #204.#496     // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+  #207 = Methodref          #626.#689     // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n+  #208 = Long               22l\n+  #210 = Long               65557l\n+  #212 = Fieldref           #570.#690     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n+  #213 = Methodref          #1.#691       // org/apache/commons/compress/archivers/zip/ZipFile.tryToLocateSignature:(JJ[B)Z\n+  #214 = String             #692          // Archive is not a ZIP archive\n+  #215 = InterfaceMethodref #352.#693     // java/nio/channels/SeekableByteChannel.size:()J\n+  #216 = Methodref          #694.#695     // java/lang/Math.max:(JJ)J\n+  #217 = Methodref          #522.#696     // java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+  #218 = Class              #697          // java/io/EOFException\n+  #219 = Methodref          #522.#698     // java/nio/ByteBuffer.get:()B\n+  #220 = Methodref          #218.#511     // java/io/EOFException.\"<init>\":()V\n+  #221 = InterfaceMethodref #61.#699      // java/util/List.iterator:()Ljava/util/Iterator;\n+  #222 = InterfaceMethodref #470.#700     // java/util/Iterator.hasNext:()Z\n+  #223 = InterfaceMethodref #470.#701     // java/util/Iterator.next:()Ljava/lang/Object;\n+  #224 = Methodref          #1.#702       // org/apache/commons/compress/archivers/zip/ZipFile.setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n+  #225 = Methodref          #66.#703      // org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExtra:([B)V\n+  #226 = Methodref          #162.#704     // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+  #227 = Methodref          #162.#705     // org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+  #228 = Methodref          #557.#706     // org/apache/commons/compress/archivers/zip/ZipUtil.setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+  #229 = Methodref          #54.#707      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n+  #230 = Methodref          #21.#708      // java/util/LinkedList.addLast:(Ljava/lang/Object;)V\n+  #231 = Long               26l\n+  #233 = Methodref          #522.#709     // java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;\n+  #234 = Long               2l\n+  #236 = Methodref          #54.#710      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDataOffset:(J)V\n+  #237 = Fieldref           #570.#711     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n+  #238 = Class              #712          // java/nio/channels/FileChannel\n+  #239 = Class              #713          // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n+  #240 = Methodref          #239.#714     // org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n+  #241 = Class              #715          // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream\n+  #242 = Methodref          #241.#714     // org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n+  #243 = Fieldref           #570.#716     // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.CFH_SIG:[B\n+  #244 = Class              #717          // java/lang/Object\n+  #245 = Class              #718          // java/io/Closeable\n+  #246 = Class              #719          // org/apache/commons/compress/archivers/zip/ZipFile$3\n+  #247 = Utf8               InnerClasses\n+  #248 = Utf8               StoredStatisticsStream\n+  #249 = Utf8               Entry\n+  #250 = Utf8               NameAndComment\n+  #251 = Utf8               BoundedFileChannelInputStream\n+  #252 = Utf8               BoundedInputStream\n+  #253 = Utf8               HASH_SIZE\n+  #254 = Utf8               I\n+  #255 = Utf8               ConstantValue\n+  #256 = Integer            509\n+  #257 = Utf8               NIBLET_MASK\n+  #258 = Integer            15\n+  #259 = Utf8               BYTE_SHIFT\n+  #260 = Integer            8\n+  #261 = Utf8               POS_0\n+  #262 = Integer            0\n+  #263 = Utf8               POS_1\n+  #264 = Integer            1\n+  #265 = Utf8               POS_2\n+  #266 = Integer            2\n+  #267 = Utf8               POS_3\n+  #268 = Integer            3\n+  #269 = Utf8               ONE_ZERO_BYTE\n+  #270 = Utf8               [B\n+  #271 = Utf8               entries\n+  #272 = Utf8               Ljava/util/List;\n+  #273 = Utf8               Signature\n+  #274 = Utf8               Ljava/util/List<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+  #275 = Utf8               nameMap\n+  #276 = Utf8               Ljava/util/Map;\n+  #277 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;>;\n+  #278 = Utf8               encoding\n+  #279 = Utf8               Ljava/lang/String;\n+  #280 = Utf8               zipEncoding\n+  #281 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #282 = Utf8               archiveName\n+  #283 = Utf8               archive\n+  #284 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n+  #285 = Utf8               useUnicodeExtraFields\n+  #286 = Utf8               Z\n+  #287 = Utf8               closed\n+  #288 = Utf8               isSplitZipArchive\n+  #289 = Utf8               dwordBuf\n+  #290 = Utf8               wordBuf\n+  #291 = Utf8               cfhBuf\n+  #292 = Utf8               shortBuf\n+  #293 = Utf8               dwordBbuf\n+  #294 = Utf8               Ljava/nio/ByteBuffer;\n+  #295 = Utf8               wordBbuf\n+  #296 = Utf8               cfhBbuf\n+  #297 = Utf8               shortBbuf\n+  #298 = Utf8               CFH_LEN\n+  #299 = Integer            42\n+  #300 = Utf8               CFH_SIG\n+  #301 = Utf8               J\n+  #302 = Utf8               MIN_EOCD_SIZE\n+  #303 = Integer            22\n+  #304 = Utf8               MAX_EOCD_SIZE\n+  #305 = Integer            65557\n+  #306 = Utf8               CFD_LOCATOR_OFFSET\n+  #307 = Integer            16\n+  #308 = Utf8               CFD_DISK_OFFSET\n+  #309 = Integer            6\n+  #310 = Utf8               CFD_LOCATOR_RELATIVE_OFFSET\n+  #311 = Utf8               ZIP64_EOCDL_LENGTH\n+  #312 = Integer            20\n+  #313 = Utf8               ZIP64_EOCDL_LOCATOR_OFFSET\n+  #314 = Utf8               ZIP64_EOCD_CFD_LOCATOR_OFFSET\n+  #315 = Integer            48\n+  #316 = Utf8               ZIP64_EOCD_CFD_DISK_OFFSET\n+  #317 = Utf8               ZIP64_EOCD_CFD_LOCATOR_RELATIVE_OFFSET\n+  #318 = Integer            24\n+  #319 = Utf8               LFH_OFFSET_FOR_FILENAME_LENGTH\n+  #320 = Utf8               offsetComparator\n+  #321 = Utf8               Ljava/util/Comparator;\n+  #322 = Utf8               Ljava/util/Comparator<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+  #323 = Utf8               <init>\n+  #324 = Utf8               (Ljava/io/File;)V\n+  #325 = Utf8               Code\n+  #326 = Utf8               LineNumberTable\n+  #327 = Utf8               LocalVariableTable\n+  #328 = Utf8               this\n+  #329 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile;\n+  #330 = Utf8               f\n+  #331 = Utf8               Ljava/io/File;\n+  #332 = Utf8               Exceptions\n+  #333 = Utf8               (Ljava/lang/String;)V\n+  #334 = Utf8               name\n+  #335 = Utf8               (Ljava/lang/String;Ljava/lang/String;)V\n+  #336 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n+  #337 = Utf8               (Ljava/io/File;Ljava/lang/String;Z)V\n+  #338 = Utf8               (Ljava/io/File;Ljava/lang/String;ZZ)V\n+  #339 = Utf8               ignoreLocalFileHeader\n+  #340 = Utf8               (Ljava/nio/channels/SeekableByteChannel;)V\n+  #341 = Utf8               channel\n+  #342 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;)V\n+  #343 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n+  #344 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZ)V\n+  #345 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n+  #346 = Utf8               entriesWithoutUTF8Flag\n+  #347 = Utf8               closeOnError\n+  #348 = Utf8               success\n+  #349 = Utf8               LocalVariableTypeTable\n+  #350 = Utf8               Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n+  #351 = Utf8               StackMapTable\n+  #352 = Class              #720          // java/nio/channels/SeekableByteChannel\n+  #353 = Class              #721          // java/lang/String\n+  #354 = Class              #722          // java/util/Map\n+  #355 = Utf8               getEncoding\n+  #356 = Utf8               ()Ljava/lang/String;\n+  #357 = Utf8               close\n+  #358 = Utf8               ()V\n+  #359 = Utf8               closeQuietly\n+  #360 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)V\n+  #361 = Utf8               zipfile\n+  #362 = Utf8               getEntries\n+  #363 = Utf8               ()Ljava/util/Enumeration;\n+  #364 = Utf8               ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+  #365 = Utf8               getEntriesInPhysicalOrder\n+  #366 = Utf8               allEntries\n+  #367 = Utf8               [Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #368 = Utf8               getEntry\n+  #369 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #370 = Utf8               entriesOfThatName\n+  #371 = Utf8               Ljava/util/LinkedList;\n+  #372 = Utf8               Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+  #373 = Utf8               (Ljava/lang/String;)Ljava/lang/Iterable;\n+  #374 = Class              #723          // java/lang/Iterable\n+  #375 = Utf8               (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+  #376 = Utf8               canReadEntryData\n+  #377 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #378 = Utf8               ze\n+  #379 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #380 = Utf8               getRawInputStream\n+  #381 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+  #382 = Utf8               start\n+  #383 = Utf8               copyRawEntries\n+  #384 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate;)V\n+  #385 = Utf8               entry\n+  #386 = Utf8               target\n+  #387 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream;\n+  #388 = Utf8               predicate\n+  #389 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate;\n+  #390 = Utf8               src\n+  #391 = Utf8               Ljava/util/Enumeration;\n+  #392 = Utf8               Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+  #393 = Class              #724          // java/util/Enumeration\n+  #394 = Utf8               getInputStream\n+  #395 = Utf8               inflater\n+  #396 = Utf8               Ljava/util/zip/Inflater;\n+  #397 = Utf8               is\n+  #398 = Utf8               Ljava/io/InputStream;\n+  #399 = Class              #725          // java/io/InputStream\n+  #400 = Utf8               getUnixSymlink\n+  #401 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n+  #402 = Utf8               in\n+  #403 = Utf8               finalize\n+  #404 = Utf8               populateFromCentralDirectory\n+  #405 = Utf8               ()Ljava/util/Map;\n+  #406 = Utf8               noUTF8Flag\n+  #407 = Utf8               Ljava/util/HashMap;\n+  #408 = Utf8               sig\n+  #409 = Utf8               Ljava/util/HashMap<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n+  #410 = Utf8               ()Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n+  #411 = Utf8               readCentralDirectoryEntry\n+  #412 = Utf8               (Ljava/util/Map;)V\n+  #413 = Utf8               off\n+  #414 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile$Entry;\n+  #415 = Utf8               versionMadeBy\n+  #416 = Utf8               gpFlag\n+  #417 = Utf8               Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #418 = Utf8               hasUTF8Flag\n+  #419 = Utf8               entryEncoding\n+  #420 = Utf8               time\n+  #421 = Utf8               fileNameLen\n+  #422 = Utf8               extraLen\n+  #423 = Utf8               commentLen\n+  #424 = Utf8               fileName\n+  #425 = Utf8               cdExtraData\n+  #426 = Utf8               comment\n+  #427 = Class              #726          // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+  #428 = Class              #727          // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #429 = Class              #270          // \"[B\"\n+  #430 = Utf8               (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n+  #431 = Utf8               setSizesAndOffsetFromZip64Extra\n+  #432 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #433 = Utf8               hasUncompressedSize\n+  #434 = Utf8               hasCompressedSize\n+  #435 = Utf8               hasRelativeHeaderOffset\n+  #436 = Utf8               hasDiskStart\n+  #437 = Utf8               z64\n+  #438 = Utf8               Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n+  #439 = Utf8               positionAtCentralDirectory\n+  #440 = Utf8               found\n+  #441 = Utf8               searchedForZip64EOCD\n+  #442 = Utf8               positionAtCentralDirectory64\n+  #443 = Utf8               diskNumberOfEOCD\n+  #444 = Utf8               relativeOffsetOfEOCD\n+  #445 = Utf8               diskNumberOfCFD\n+  #446 = Utf8               relativeOffsetOfCFD\n+  #447 = Utf8               positionAtCentralDirectory32\n+  #448 = Utf8               positionAtEndOfCentralDirectoryRecord\n+  #449 = Utf8               tryToLocateSignature\n+  #450 = Utf8               (JJ[B)Z\n+  #451 = Utf8               ex\n+  #452 = Utf8               Ljava/io/EOFException;\n+  #453 = Utf8               curr\n+  #454 = Utf8               minDistanceFromEnd\n+  #455 = Utf8               maxDistanceFromEnd\n+  #456 = Utf8               stopSearching\n+  #457 = Utf8               skipBytes\n+  #458 = Utf8               (I)V\n+  #459 = Utf8               count\n+  #460 = Utf8               currentPosition\n+  #461 = Utf8               newPosition\n+  #462 = Utf8               resolveLocalFileHeaderData\n+  #463 = Utf8               nc\n+  #464 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;\n+  #465 = Utf8               lens\n+  #466 = Utf8               [I\n+  #467 = Utf8               extraFieldLen\n+  #468 = Utf8               localExtraData\n+  #469 = Utf8               zipArchiveEntry\n+  #470 = Class              #728          // java/util/Iterator\n+  #471 = Utf8               fillNameMap\n+  #472 = Utf8               setDataOffset\n+  #473 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n+  #474 = Utf8               offset\n+  #475 = Utf8               getDataOffset\n+  #476 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n+  #477 = Utf8               s\n+  #478 = Utf8               startsWithLocalFileHeader\n+  #479 = Utf8               ()Z\n+  #480 = Utf8               createBoundedInputStream\n+  #481 = Utf8               (JJ)Lorg/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream;\n+  #482 = Utf8               remaining\n+  #483 = Utf8               access$300\n+  #484 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;)Ljava/nio/channels/SeekableByteChannel;\n+  #485 = Utf8               x0\n+  #486 = Utf8               <clinit>\n+  #487 = Utf8               SourceFile\n+  #488 = Utf8               ZipFile.java\n+  #489 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile\n+  #490 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n+  #491 = NameAndType        #283:#284     // archive:Ljava/nio/channels/SeekableByteChannel;\n+  #492 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #493 = Utf8               UTF8\n+  #494 = NameAndType        #323:#336     // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+  #495 = Utf8               java/io/File\n+  #496 = NameAndType        #323:#333     // \"<init>\":(Ljava/lang/String;)V\n+  #497 = NameAndType        #323:#337     // \"<init>\":(Ljava/io/File;Ljava/lang/String;Z)V\n+  #498 = NameAndType        #323:#338     // \"<init>\":(Ljava/io/File;Ljava/lang/String;ZZ)V\n+  #499 = NameAndType        #729:#730     // toPath:()Ljava/nio/file/Path;\n+  #500 = Class              #731          // java/nio/file/StandardOpenOption\n+  #501 = NameAndType        #732:#733     // READ:Ljava/nio/file/StandardOpenOption;\n+  #502 = Class              #734          // java/util/EnumSet\n+  #503 = NameAndType        #735:#736     // of:(Ljava/lang/Enum;)Ljava/util/EnumSet;\n+  #504 = Utf8               java/nio/file/attribute/FileAttribute\n+  #505 = Class              #737          // java/nio/file/Files\n+  #506 = NameAndType        #738:#739     // newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+  #507 = NameAndType        #740:#356     // getAbsolutePath:()Ljava/lang/String;\n+  #508 = NameAndType        #323:#345     // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V\n+  #509 = Utf8               unknown archive\n+  #510 = NameAndType        #323:#343     // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V\n+  #511 = NameAndType        #323:#358     // \"<init>\":()V\n+  #512 = Utf8               java/util/LinkedList\n+  #513 = NameAndType        #271:#272     // entries:Ljava/util/List;\n+  #514 = Utf8               java/util/HashMap\n+  #515 = NameAndType        #323:#458     // \"<init>\":(I)V\n+  #516 = NameAndType        #275:#276     // nameMap:Ljava/util/Map;\n+  #517 = NameAndType        #287:#286     // closed:Z\n+  #518 = NameAndType        #289:#270     // dwordBuf:[B\n+  #519 = NameAndType        #290:#270     // wordBuf:[B\n+  #520 = NameAndType        #291:#270     // cfhBuf:[B\n+  #521 = NameAndType        #292:#270     // shortBuf:[B\n+  #522 = Class              #741          // java/nio/ByteBuffer\n+  #523 = NameAndType        #742:#743     // wrap:([B)Ljava/nio/ByteBuffer;\n+  #524 = NameAndType        #293:#294     // dwordBbuf:Ljava/nio/ByteBuffer;\n+  #525 = NameAndType        #295:#294     // wordBbuf:Ljava/nio/ByteBuffer;\n+  #526 = NameAndType        #296:#294     // cfhBbuf:Ljava/nio/ByteBuffer;\n+  #527 = NameAndType        #297:#294     // shortBbuf:Ljava/nio/ByteBuffer;\n+  #528 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$2\n+  #529 = NameAndType        #323:#360     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;)V\n+  #530 = NameAndType        #320:#321     // offsetComparator:Ljava/util/Comparator;\n+  #531 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+  #532 = NameAndType        #288:#286     // isSplitZipArchive:Z\n+  #533 = NameAndType        #282:#279     // archiveName:Ljava/lang/String;\n+  #534 = NameAndType        #278:#279     // encoding:Ljava/lang/String;\n+  #535 = NameAndType        #744:#745     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #536 = NameAndType        #280:#281     // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #537 = NameAndType        #285:#286     // useUnicodeExtraFields:Z\n+  #538 = NameAndType        #404:#405     // populateFromCentralDirectory:()Ljava/util/Map;\n+  #539 = NameAndType        #462:#412     // resolveLocalFileHeaderData:(Ljava/util/Map;)V\n+  #540 = NameAndType        #471:#358     // fillNameMap:()V\n+  #541 = Class              #746          // org/apache/commons/compress/utils/IOUtils\n+  #542 = NameAndType        #359:#747     // closeQuietly:(Ljava/io/Closeable;)V\n+  #543 = NameAndType        #357:#358     // close:()V\n+  #544 = Class              #748          // java/util/Collections\n+  #545 = NameAndType        #749:#750     // enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n+  #546 = NameAndType        #751:#752     // size:()I\n+  #547 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  #548 = NameAndType        #753:#754     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #549 = Class              #755          // java/util/Arrays\n+  #550 = NameAndType        #756:#757     // sort:([Ljava/lang/Object;Ljava/util/Comparator;)V\n+  #551 = NameAndType        #758:#759     // asList:([Ljava/lang/Object;)Ljava/util/List;\n+  #552 = NameAndType        #760:#761     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #553 = NameAndType        #762:#763     // getFirst:()Ljava/lang/Object;\n+  #554 = Utf8               java/util/List\n+  #555 = NameAndType        #764:#765     // emptyList:()Ljava/util/List;\n+  #556 = NameAndType        #766:#767     // containsKey:(Ljava/lang/Object;)Z\n+  #557 = Class              #768          // org/apache/commons/compress/archivers/zip/ZipUtil\n+  #558 = NameAndType        #769:#377     // canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #559 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$Entry\n+  #560 = NameAndType        #475:#770     // getDataOffset:()J\n+  #561 = Utf8               org/apache/commons/compress/archivers/EntryStreamOffsets\n+  #562 = NameAndType        #771:#770     // getCompressedSize:()J\n+  #563 = NameAndType        #480:#481     // createBoundedInputStream:(JJ)Lorg/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream;\n+  #564 = NameAndType        #365:#363     // getEntriesInPhysicalOrder:()Ljava/util/Enumeration;\n+  #565 = NameAndType        #772:#479     // hasMoreElements:()Z\n+  #566 = NameAndType        #773:#763     // nextElement:()Ljava/lang/Object;\n+  #567 = Class              #774          // org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate\n+  #568 = NameAndType        #775:#377     // test:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #569 = NameAndType        #380:#381     // getRawInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+  #570 = Class              #776          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+  #571 = NameAndType        #777:#778     // addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n+  #572 = NameAndType        #779:#432     // checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #573 = NameAndType        #475:#476     // getDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J\n+  #574 = Utf8               java/io/BufferedInputStream\n+  #575 = NameAndType        #323:#780     // \"<init>\":(Ljava/io/InputStream;)V\n+  #576 = NameAndType        #781:#466     // $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n+  #577 = NameAndType        #782:#752     // getMethod:()I\n+  #578 = Class              #783          // org/apache/commons/compress/archivers/zip/ZipMethod\n+  #579 = NameAndType        #784:#785     // getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #580 = NameAndType        #786:#752     // ordinal:()I\n+  #581 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream\n+  #582 = Utf8               org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+  #583 = Utf8               org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+  #584 = NameAndType        #787:#788     // getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #585 = NameAndType        #789:#752     // getSlidingDictionarySize:()I\n+  #586 = NameAndType        #790:#752     // getNumberOfShannonFanoTrees:()I\n+  #587 = NameAndType        #323:#791     // \"<init>\":(IILjava/io/InputStream;)V\n+  #588 = Utf8               java/util/zip/Inflater\n+  #589 = NameAndType        #323:#792     // \"<init>\":(Z)V\n+  #590 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$1\n+  #591 = Utf8               java/io/SequenceInputStream\n+  #592 = Utf8               java/io/ByteArrayInputStream\n+  #593 = NameAndType        #269:#270     // ONE_ZERO_BYTE:[B\n+  #594 = NameAndType        #323:#793     // \"<init>\":([B)V\n+  #595 = NameAndType        #323:#794     // \"<init>\":(Ljava/io/InputStream;Ljava/io/InputStream;)V\n+  #596 = NameAndType        #323:#795     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n+  #597 = Utf8               org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n+  #598 = Utf8               org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+  #599 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+  #600 = NameAndType        #323:#796     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #601 = NameAndType        #797:#479     // isUnixSymlink:()Z\n+  #602 = NameAndType        #394:#381     // getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;\n+  #603 = NameAndType        #798:#799     // toByteArray:(Ljava/io/InputStream;)[B\n+  #604 = NameAndType        #800:#801     // decode:([B)Ljava/lang/String;\n+  #605 = Utf8               java/lang/Throwable\n+  #606 = NameAndType        #802:#803     // addSuppressed:(Ljava/lang/Throwable;)V\n+  #607 = Class              #804          // java/lang/System\n+  #608 = NameAndType        #805:#806     // err:Ljava/io/PrintStream;\n+  #609 = Utf8               BootstrapMethods\n+  #610 = MethodHandle       6:#807        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #611 = String             #808          // Cleaning up unclosed ZipFile for archive \\u0001\n+  #612 = NameAndType        #809:#810     // makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n+  #613 = Class              #811          // java/io/PrintStream\n+  #614 = NameAndType        #812:#333     // println:(Ljava/lang/String;)V\n+  #615 = NameAndType        #403:#358     // finalize:()V\n+  #616 = NameAndType        #439:#358     // positionAtCentralDirectory:()V\n+  #617 = NameAndType        #813:#814     // rewind:()Ljava/nio/ByteBuffer;\n+  #618 = NameAndType        #815:#816     // readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+  #619 = Class              #817          // org/apache/commons/compress/archivers/zip/ZipLong\n+  #620 = NameAndType        #818:#819     // getValue:([B)J\n+  #621 = NameAndType        #300:#301     // CFH_SIG:J\n+  #622 = NameAndType        #478:#479     // startsWithLocalFileHeader:()Z\n+  #623 = Utf8               java/io/IOException\n+  #624 = Utf8               Central directory is empty, can\\'t expand corrupt archive.\n+  #625 = NameAndType        #411:#412     // readCentralDirectoryEntry:(Ljava/util/Map;)V\n+  #626 = Class              #820          // org/apache/commons/compress/archivers/zip/ZipShort\n+  #627 = NameAndType        #818:#821     // getValue:([BI)I\n+  #628 = NameAndType        #822:#458     // setVersionMadeBy:(I)V\n+  #629 = NameAndType        #823:#458     // setPlatform:(I)V\n+  #630 = NameAndType        #824:#458     // setVersionRequired:(I)V\n+  #631 = NameAndType        #825:#826     // parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #632 = NameAndType        #827:#479     // usesUTF8ForNames:()Z\n+  #633 = NameAndType        #828:#281     // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #634 = Class              #829          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n+  #635 = NameAndType        #831:#832     // NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+  #636 = NameAndType        #833:#834     // setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+  #637 = NameAndType        #835:#836     // setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+  #638 = NameAndType        #837:#458     // setRawFlag:(I)V\n+  #639 = NameAndType        #838:#458     // setMethod:(I)V\n+  #640 = NameAndType        #818:#839     // getValue:([BI)J\n+  #641 = NameAndType        #840:#841     // dosToJavaTime:(J)J\n+  #642 = NameAndType        #842:#843     // setTime:(J)V\n+  #643 = NameAndType        #844:#843     // setCrc:(J)V\n+  #644 = NameAndType        #845:#843     // setCompressedSize:(J)V\n+  #645 = NameAndType        #846:#843     // setSize:(J)V\n+  #646 = NameAndType        #847:#843     // setDiskNumberStart:(J)V\n+  #647 = NameAndType        #848:#458     // setInternalAttributes:(I)V\n+  #648 = NameAndType        #849:#843     // setExternalAttributes:(J)V\n+  #649 = NameAndType        #850:#851     // setName:(Ljava/lang/String;[B)V\n+  #650 = NameAndType        #852:#843     // setLocalHeaderOffset:(J)V\n+  #651 = NameAndType        #853:#767     // add:(Ljava/lang/Object;)Z\n+  #652 = NameAndType        #854:#793     // setCentralDirectoryExtra:([B)V\n+  #653 = NameAndType        #431:#432     // setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #654 = NameAndType        #855:#333     // setComment:(Ljava/lang/String;)V\n+  #655 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n+  #656 = NameAndType        #323:#856     // \"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n+  #657 = NameAndType        #857:#858     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #658 = NameAndType        #859:#792     // setStreamContiguous:(Z)V\n+  #659 = NameAndType        #860:#861     // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #660 = NameAndType        #862:#863     // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #661 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+  #662 = NameAndType        #864:#770     // getSize:()J\n+  #663 = NameAndType        #865:#770     // getLocalHeaderOffset:()J\n+  #664 = NameAndType        #866:#770     // getDiskNumberStart:()J\n+  #665 = NameAndType        #867:#868     // reparseCentralDirectoryData:(ZZZZ)V\n+  #666 = NameAndType        #864:#869     // getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #667 = NameAndType        #870:#770     // getLongValue:()J\n+  #668 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+  #669 = NameAndType        #323:#843     // \"<init>\":(J)V\n+  #670 = NameAndType        #846:#871     // setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #671 = NameAndType        #771:#869     // getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #672 = NameAndType        #845:#871     // setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #673 = NameAndType        #872:#869     // getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #674 = NameAndType        #873:#874     // getDiskStartNumber:()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #675 = NameAndType        #818:#770     // getValue:()J\n+  #676 = NameAndType        #448:#358     // positionAtEndOfCentralDirectoryRecord:()V\n+  #677 = NameAndType        #875:#770     // position:()J\n+  #678 = NameAndType        #875:#876     // position:(J)Ljava/nio/channels/SeekableByteChannel;\n+  #679 = NameAndType        #877:#270     // ZIP64_EOCD_LOC_SIG:[B\n+  #680 = NameAndType        #878:#879     // equals:([B[B)Z\n+  #681 = NameAndType        #457:#458     // skipBytes:(I)V\n+  #682 = NameAndType        #447:#358     // positionAtCentralDirectory32:()V\n+  #683 = NameAndType        #442:#358     // positionAtCentralDirectory64:()V\n+  #684 = NameAndType        #870:#819     // getLongValue:([B)J\n+  #685 = NameAndType        #875:#880     // position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n+  #686 = NameAndType        #881:#270     // ZIP64_EOCD_SIG:[B\n+  #687 = Utf8               java/util/zip/ZipException\n+  #688 = Utf8               Archive\\'s ZIP64 end of central directory locator is corrupt.\n+  #689 = NameAndType        #818:#882     // getValue:([B)I\n+  #690 = NameAndType        #883:#270     // EOCD_SIG:[B\n+  #691 = NameAndType        #449:#450     // tryToLocateSignature:(JJ[B)Z\n+  #692 = Utf8               Archive is not a ZIP archive\n+  #693 = NameAndType        #751:#770     // size:()J\n+  #694 = Class              #884          // java/lang/Math\n+  #695 = NameAndType        #885:#886     // max:(JJ)J\n+  #696 = NameAndType        #887:#814     // flip:()Ljava/nio/ByteBuffer;\n+  #697 = Utf8               java/io/EOFException\n+  #698 = NameAndType        #760:#888     // get:()B\n+  #699 = NameAndType        #889:#890     // iterator:()Ljava/util/Iterator;\n+  #700 = NameAndType        #891:#479     // hasNext:()Z\n+  #701 = NameAndType        #892:#763     // next:()Ljava/lang/Object;\n+  #702 = NameAndType        #472:#473     // setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n+  #703 = NameAndType        #893:#793     // setExtra:([B)V\n+  #704 = NameAndType        #894:#895     // access$100:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+  #705 = NameAndType        #896:#895     // access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+  #706 = NameAndType        #897:#898     // setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+  #707 = NameAndType        #899:#356     // getName:()Ljava/lang/String;\n+  #708 = NameAndType        #900:#901     // addLast:(Ljava/lang/Object;)V\n+  #709 = NameAndType        #760:#743     // get:([B)Ljava/nio/ByteBuffer;\n+  #710 = NameAndType        #472:#843     // setDataOffset:(J)V\n+  #711 = NameAndType        #902:#270     // LFH_SIG:[B\n+  #712 = Utf8               java/nio/channels/FileChannel\n+  #713 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n+  #714 = NameAndType        #323:#903     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n+  #715 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream\n+  #716 = NameAndType        #300:#270     // CFH_SIG:[B\n+  #717 = Utf8               java/lang/Object\n+  #718 = Utf8               java/io/Closeable\n+  #719 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$3\n+  #720 = Utf8               java/nio/channels/SeekableByteChannel\n+  #721 = Utf8               java/lang/String\n+  #722 = Utf8               java/util/Map\n+  #723 = Utf8               java/lang/Iterable\n+  #724 = Utf8               java/util/Enumeration\n+  #725 = Utf8               java/io/InputStream\n+  #726 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+  #727 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #728 = Utf8               java/util/Iterator\n+  #729 = Utf8               toPath\n+  #730 = Utf8               ()Ljava/nio/file/Path;\n+  #731 = Utf8               java/nio/file/StandardOpenOption\n+  #732 = Utf8               READ\n+  #733 = Utf8               Ljava/nio/file/StandardOpenOption;\n+  #734 = Utf8               java/util/EnumSet\n+  #735 = Utf8               of\n+  #736 = Utf8               (Ljava/lang/Enum;)Ljava/util/EnumSet;\n+  #737 = Utf8               java/nio/file/Files\n+  #738 = Utf8               newByteChannel\n+  #739 = Utf8               (Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+  #740 = Utf8               getAbsolutePath\n+  #741 = Utf8               java/nio/ByteBuffer\n+  #742 = Utf8               wrap\n+  #743 = Utf8               ([B)Ljava/nio/ByteBuffer;\n+  #744 = Utf8               getZipEncoding\n+  #745 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #746 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #747 = Utf8               (Ljava/io/Closeable;)V\n+  #748 = Utf8               java/util/Collections\n+  #749 = Utf8               enumeration\n+  #750 = Utf8               (Ljava/util/Collection;)Ljava/util/Enumeration;\n+  #751 = Utf8               size\n+  #752 = Utf8               ()I\n+  #753 = Utf8               toArray\n+  #754 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #755 = Utf8               java/util/Arrays\n+  #756 = Utf8               sort\n+  #757 = Utf8               ([Ljava/lang/Object;Ljava/util/Comparator;)V\n+  #758 = Utf8               asList\n+  #759 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;\n+  #760 = Utf8               get\n+  #761 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #762 = Utf8               getFirst\n+  #763 = Utf8               ()Ljava/lang/Object;\n+  #764 = Utf8               emptyList\n+  #765 = Utf8               ()Ljava/util/List;\n+  #766 = Utf8               containsKey\n+  #767 = Utf8               (Ljava/lang/Object;)Z\n+  #768 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n+  #769 = Utf8               canHandleEntryData\n+  #770 = Utf8               ()J\n+  #771 = Utf8               getCompressedSize\n+  #772 = Utf8               hasMoreElements\n+  #773 = Utf8               nextElement\n+  #774 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate\n+  #775 = Utf8               test\n+  #776 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+  #777 = Utf8               addRawArchiveEntry\n+  #778 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n+  #779 = Utf8               checkRequestedFeatures\n+  #780 = Utf8               (Ljava/io/InputStream;)V\n+  #781 = Utf8               $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod\n+  #782 = Utf8               getMethod\n+  #783 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n+  #784 = Utf8               getMethodByCode\n+  #785 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #786 = Utf8               ordinal\n+  #787 = Utf8               getGeneralPurposeBit\n+  #788 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #789 = Utf8               getSlidingDictionarySize\n+  #790 = Utf8               getNumberOfShannonFanoTrees\n+  #791 = Utf8               (IILjava/io/InputStream;)V\n+  #792 = Utf8               (Z)V\n+  #793 = Utf8               ([B)V\n+  #794 = Utf8               (Ljava/io/InputStream;Ljava/io/InputStream;)V\n+  #795 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V\n+  #796 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #797 = Utf8               isUnixSymlink\n+  #798 = Utf8               toByteArray\n+  #799 = Utf8               (Ljava/io/InputStream;)[B\n+  #800 = Utf8               decode\n+  #801 = Utf8               ([B)Ljava/lang/String;\n+  #802 = Utf8               addSuppressed\n+  #803 = Utf8               (Ljava/lang/Throwable;)V\n+  #804 = Utf8               java/lang/System\n+  #805 = Utf8               err\n+  #806 = Utf8               Ljava/io/PrintStream;\n+  #807 = Methodref          #904.#905     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #808 = Utf8               Cleaning up unclosed ZipFile for archive \\u0001\n+  #809 = Utf8               makeConcatWithConstants\n+  #810 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #811 = Utf8               java/io/PrintStream\n+  #812 = Utf8               println\n+  #813 = Utf8               rewind\n+  #814 = Utf8               ()Ljava/nio/ByteBuffer;\n+  #815 = Utf8               readFully\n+  #816 = Utf8               (Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+  #817 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+  #818 = Utf8               getValue\n+  #819 = Utf8               ([B)J\n+  #820 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+  #821 = Utf8               ([BI)I\n+  #822 = Utf8               setVersionMadeBy\n+  #823 = Utf8               setPlatform\n+  #824 = Utf8               setVersionRequired\n+  #825 = Utf8               parse\n+  #826 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #827 = Utf8               usesUTF8ForNames\n+  #828 = Utf8               UTF8_ZIP_ENCODING\n+  #829 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n+  #830 = Utf8               NameSource\n+  #831 = Utf8               NAME_WITH_EFS_FLAG\n+  #832 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+  #833 = Utf8               setNameSource\n+  #834 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+  #835 = Utf8               setGeneralPurposeBit\n+  #836 = Utf8               (Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+  #837 = Utf8               setRawFlag\n+  #838 = Utf8               setMethod\n+  #839 = Utf8               ([BI)J\n+  #840 = Utf8               dosToJavaTime\n+  #841 = Utf8               (J)J\n+  #842 = Utf8               setTime\n+  #843 = Utf8               (J)V\n+  #844 = Utf8               setCrc\n+  #845 = Utf8               setCompressedSize\n+  #846 = Utf8               setSize\n+  #847 = Utf8               setDiskNumberStart\n+  #848 = Utf8               setInternalAttributes\n+  #849 = Utf8               setExternalAttributes\n+  #850 = Utf8               setName\n+  #851 = Utf8               (Ljava/lang/String;[B)V\n+  #852 = Utf8               setLocalHeaderOffset\n+  #853 = Utf8               add\n+  #854 = Utf8               setCentralDirectoryExtra\n+  #855 = Utf8               setComment\n+  #856 = Utf8               ([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n+  #857 = Utf8               put\n+  #858 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #859 = Utf8               setStreamContiguous\n+  #860 = Utf8               HEADER_ID\n+  #861 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #862 = Utf8               getExtraField\n+  #863 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #864 = Utf8               getSize\n+  #865 = Utf8               getLocalHeaderOffset\n+  #866 = Utf8               getDiskNumberStart\n+  #867 = Utf8               reparseCentralDirectoryData\n+  #868 = Utf8               (ZZZZ)V\n+  #869 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #870 = Utf8               getLongValue\n+  #871 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #872 = Utf8               getRelativeHeaderOffset\n+  #873 = Utf8               getDiskStartNumber\n+  #874 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #875 = Utf8               position\n+  #876 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n+  #877 = Utf8               ZIP64_EOCD_LOC_SIG\n+  #878 = Utf8               equals\n+  #879 = Utf8               ([B[B)Z\n+  #880 = Utf8               (JJ)Ljava/nio/channels/SeekableByteChannel;\n+  #881 = Utf8               ZIP64_EOCD_SIG\n+  #882 = Utf8               ([B)I\n+  #883 = Utf8               EOCD_SIG\n+  #884 = Utf8               java/lang/Math\n+  #885 = Utf8               max\n+  #886 = Utf8               (JJ)J\n+  #887 = Utf8               flip\n+  #888 = Utf8               ()B\n+  #889 = Utf8               iterator\n+  #890 = Utf8               ()Ljava/util/Iterator;\n+  #891 = Utf8               hasNext\n+  #892 = Utf8               next\n+  #893 = Utf8               setExtra\n+  #894 = Utf8               access$100\n+  #895 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+  #896 = Utf8               access$200\n+  #897 = Utf8               setNameAndCommentFromExtraFields\n+  #898 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+  #899 = Utf8               getName\n+  #900 = Utf8               addLast\n+  #901 = Utf8               (Ljava/lang/Object;)V\n+  #902 = Utf8               LFH_SIG\n+  #903 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n+  #904 = Class              #906          // java/lang/invoke/StringConcatFactory\n+  #905 = NameAndType        #809:#909     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #906 = Utf8               java/lang/invoke/StringConcatFactory\n+  #907 = Class              #911          // java/lang/invoke/MethodHandles$Lookup\n+  #908 = Utf8               Lookup\n+  #909 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #910 = Class              #912          // java/lang/invoke/MethodHandles\n+  #911 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #912 = Utf8               java/lang/invoke/MethodHandles\n {\n   private static final int HASH_SIZE = 509;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 509\n \n   static final int NIBLET_MASK = 15;\n@@ -960,20 +951,20 @@\n   private static final byte[] ONE_ZERO_BYTE;\n     descriptor: [B\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n \n   private final java.util.List<org.apache.commons.compress.archivers.zip.ZipArchiveEntry> entries;\n     descriptor: Ljava/util/List;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n-    Signature: #278                         // Ljava/util/List<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+    Signature: #274                         // Ljava/util/List<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   private final java.util.Map<java.lang.String, java.util.LinkedList<org.apache.commons.compress.archivers.zip.ZipArchiveEntry>> nameMap;\n     descriptor: Ljava/util/Map;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n-    Signature: #281                         // Ljava/util/Map<Ljava/lang/String;Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;>;\n+    Signature: #277                         // Ljava/util/Map<Ljava/lang/String;Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;>;\n \n   private final java.lang.String encoding;\n     descriptor: Ljava/lang/String;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n@@ -1094,15 +1085,15 @@\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long 26l\n \n   private final java.util.Comparator<org.apache.commons.compress.archivers.zip.ZipArchiveEntry> offsetComparator;\n     descriptor: Ljava/util/Comparator;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n-    Signature: #326                         // Ljava/util/Comparator<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+    Signature: #322                         // Ljava/util/Comparator<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   public org.apache.commons.compress.archivers.zip.ZipFile(java.io.File) throws java.io.IOException;\n     descriptor: (Ljava/io/File;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n@@ -1513,15 +1504,14 @@\n         line 376: 181\n         line 378: 184\n         line 379: 198\n         line 380: 208\n         line 378: 218\n         line 379: 234\n         line 380: 244\n-        line 382: 251\n         line 383: 254\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n           166      18     8 entriesWithoutUTF8Flag   Ljava/util/Map;\n             0     255     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n             0     255     1 channel   Ljava/nio/channels/SeekableByteChannel;\n             0     255     2 archiveName   Ljava/lang/String;\n@@ -1623,15 +1613,15 @@\n          4: invokestatic  #52                 // Method java/util/Collections.enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;\n          7: areturn\n       LineNumberTable:\n         line 426: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n-    Signature: #370                         // ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+    Signature: #364                         // ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   public java.util.Enumeration<org.apache.commons.compress.archivers.zip.ZipArchiveEntry> getEntriesInPhysicalOrder();\n     descriptor: ()Ljava/util/Enumeration;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=1\n          0: aload_0\n@@ -1655,15 +1645,15 @@\n         line 440: 0\n         line 441: 25\n         line 442: 33\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      41     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n            25      16     1 allEntries   [Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-    Signature: #370                         // ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+    Signature: #364                         // ()Ljava/util/Enumeration<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   public org.apache.commons.compress.archivers.zip.ZipArchiveEntry getEntry(java.lang.String);\n     descriptor: (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=3, args_size=2\n          0: aload_0\n@@ -1729,16 +1719,16 @@\n         Start  Length  Slot  Name   Signature\n            14      12     2 entriesOfThatName   Ljava/util/List<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n       StackMapTable: number_of_entries = 2\n         frame_type = 252 /* append */\n           offset_delta = 22\n           locals = [ class java/util/List ]\n         frame_type = 66 /* same_locals_1_stack_item */\n-          stack = [ class java/util/List ]\n-    Signature: #383                         // (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+          stack = [ class java/lang/Iterable ]\n+    Signature: #375                         // (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   public java.lang.Iterable<org.apache.commons.compress.archivers.zip.ZipArchiveEntry> getEntriesInPhysicalOrder(java.lang.String);\n     descriptor: (Ljava/lang/String;)Ljava/lang/Iterable;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=3, args_size=2\n          0: iconst_0\n@@ -1776,15 +1766,15 @@\n             0      52     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n             0      52     1  name   Ljava/lang/String;\n             5      47     2 entriesOfThatName   [Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n       StackMapTable: number_of_entries = 1\n         frame_type = 252 /* append */\n           offset_delta = 47\n           locals = [ class \"[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\" ]\n-    Signature: #383                         // (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n+    Signature: #375                         // (Ljava/lang/String;)Ljava/lang/Iterable<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;>;\n \n   public boolean canReadEntryData(org.apache.commons.compress.archivers.zip.ZipArchiveEntry);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=2, args_size=2\n          0: aload_1\n@@ -2154,118 +2144,111 @@\n     Exceptions:\n       throws java.io.IOException\n \n   protected void finalize() throws java.lang.Throwable;\n     descriptor: ()V\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n-      stack=3, locals=2, args_size=1\n+      stack=2, locals=2, args_size=1\n          0: aload_0\n          1: getfield      #27                 // Field closed:Z\n-         4: ifne          39\n+         4: ifne          26\n          7: getstatic     #118                // Field java/lang/System.err:Ljava/io/PrintStream;\n-        10: new           #119                // class java/lang/StringBuilder\n-        13: dup\n-        14: invokespecial #120                // Method java/lang/StringBuilder.\"<init>\":()V\n-        17: ldc           #121                // String Cleaning up unclosed ZipFile for archive\n-        19: invokevirtual #122                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        10: aload_0\n+        11: getfield      #42                 // Field archiveName:Ljava/lang/String;\n+        14: invokedynamic #119,  0            // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n+        19: invokevirtual #120                // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n         22: aload_0\n-        23: getfield      #42                 // Field archiveName:Ljava/lang/String;\n-        26: invokevirtual #122                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        29: invokevirtual #123                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        32: invokevirtual #124                // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n-        35: aload_0\n-        36: invokevirtual #125                // Method close:()V\n-        39: aload_0\n-        40: invokespecial #126                // Method java/lang/Object.finalize:()V\n-        43: goto          53\n-        46: astore_1\n-        47: aload_0\n-        48: invokespecial #126                // Method java/lang/Object.finalize:()V\n-        51: aload_1\n-        52: athrow\n-        53: return\n+        23: invokevirtual #121                // Method close:()V\n+        26: aload_0\n+        27: invokespecial #122                // Method java/lang/Object.finalize:()V\n+        30: goto          40\n+        33: astore_1\n+        34: aload_0\n+        35: invokespecial #122                // Method java/lang/Object.finalize:()V\n+        38: aload_1\n+        39: athrow\n+        40: return\n       Exception table:\n          from    to  target type\n-             0    39    46   any\n+             0    26    33   any\n       LineNumberTable:\n         line 651: 0\n         line 652: 7\n-        line 654: 35\n-        line 657: 39\n-        line 658: 43\n-        line 657: 46\n-        line 658: 51\n-        line 659: 53\n+        line 654: 22\n+        line 657: 26\n+        line 658: 30\n+        line 657: 33\n+        line 659: 40\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      54     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n+            0      41     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n       StackMapTable: number_of_entries = 3\n-        frame_type = 39 /* same */\n+        frame_type = 26 /* same */\n         frame_type = 70 /* same_locals_1_stack_item */\n           stack = [ class java/lang/Throwable ]\n         frame_type = 6 /* same */\n     Exceptions:\n       throws java.lang.Throwable\n \n   private java.util.Map<org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment> populateFromCentralDirectory() throws java.io.IOException;\n     descriptor: ()Ljava/util/Map;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=4, args_size=1\n          0: new           #24                 // class java/util/HashMap\n          3: dup\n-         4: invokespecial #127                // Method java/util/HashMap.\"<init>\":()V\n+         4: invokespecial #123                // Method java/util/HashMap.\"<init>\":()V\n          7: astore_1\n          8: aload_0\n-         9: invokespecial #128                // Method positionAtCentralDirectory:()V\n+         9: invokespecial #124                // Method positionAtCentralDirectory:()V\n         12: aload_0\n         13: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        16: invokevirtual #129                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+        16: invokevirtual #125                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         19: pop\n         20: aload_0\n         21: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         24: aload_0\n         25: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        28: invokestatic  #130                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        28: invokestatic  #126                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         31: aload_0\n         32: getfield      #29                 // Field wordBuf:[B\n-        35: invokestatic  #131                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+        35: invokestatic  #127                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n         38: lstore_2\n         39: lload_2\n-        40: getstatic     #132                // Field CFH_SIG:J\n+        40: getstatic     #128                // Field CFH_SIG:J\n         43: lcmp\n         44: ifeq          64\n         47: aload_0\n-        48: invokespecial #133                // Method startsWithLocalFileHeader:()Z\n+        48: invokespecial #129                // Method startsWithLocalFileHeader:()Z\n         51: ifeq          64\n-        54: new           #134                // class java/io/IOException\n+        54: new           #130                // class java/io/IOException\n         57: dup\n-        58: ldc           #135                // String Central directory is empty, can\\'t expand corrupt archive.\n-        60: invokespecial #136                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        58: ldc           #131                // String Central directory is empty, can\\'t expand corrupt archive.\n+        60: invokespecial #132                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         63: athrow\n         64: lload_2\n-        65: getstatic     #132                // Field CFH_SIG:J\n+        65: getstatic     #128                // Field CFH_SIG:J\n         68: lcmp\n         69: ifne          107\n         72: aload_0\n         73: aload_1\n-        74: invokespecial #137                // Method readCentralDirectoryEntry:(Ljava/util/Map;)V\n+        74: invokespecial #133                // Method readCentralDirectoryEntry:(Ljava/util/Map;)V\n         77: aload_0\n         78: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        81: invokevirtual #129                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+        81: invokevirtual #125                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         84: pop\n         85: aload_0\n         86: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         89: aload_0\n         90: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        93: invokestatic  #130                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        93: invokestatic  #126                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         96: aload_0\n         97: getfield      #29                 // Field wordBuf:[B\n-       100: invokestatic  #131                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+       100: invokestatic  #127                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n        103: lstore_2\n        104: goto          64\n        107: aload_1\n        108: areturn\n       LineNumberTable:\n         line 699: 0\n         line 702: 8\n@@ -2291,252 +2274,252 @@\n       StackMapTable: number_of_entries = 2\n         frame_type = 253 /* append */\n           offset_delta = 64\n           locals = [ class java/util/HashMap, long ]\n         frame_type = 42 /* same */\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #419                         // ()Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n+    Signature: #410                         // ()Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;\n \n   private void readCentralDirectoryEntry(java.util.Map<org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment>) throws java.io.IOException;\n     descriptor: (Ljava/util/Map;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=7, locals=16, args_size=2\n          0: aload_0\n          1: getfield      #35                 // Field cfhBbuf:Ljava/nio/ByteBuffer;\n-         4: invokevirtual #129                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+         4: invokevirtual #125                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n          7: pop\n          8: aload_0\n          9: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         12: aload_0\n         13: getfield      #35                 // Field cfhBbuf:Ljava/nio/ByteBuffer;\n-        16: invokestatic  #130                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        16: invokestatic  #126                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         19: iconst_0\n         20: istore_2\n         21: new           #66                 // class org/apache/commons/compress/archivers/zip/ZipFile$Entry\n         24: dup\n-        25: invokespecial #138                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.\"<init>\":()V\n+        25: invokespecial #134                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.\"<init>\":()V\n         28: astore_3\n         29: aload_0\n         30: getfield      #30                 // Field cfhBuf:[B\n         33: iload_2\n-        34: invokestatic  #139                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        34: invokestatic  #135                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n         37: istore        4\n         39: iinc          2, 2\n         42: aload_3\n         43: iload         4\n-        45: invokevirtual #140                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionMadeBy:(I)V\n+        45: invokevirtual #136                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionMadeBy:(I)V\n         48: aload_3\n         49: iload         4\n         51: bipush        8\n         53: ishr\n         54: bipush        15\n         56: iand\n-        57: invokevirtual #141                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setPlatform:(I)V\n+        57: invokevirtual #137                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setPlatform:(I)V\n         60: aload_3\n         61: aload_0\n         62: getfield      #30                 // Field cfhBuf:[B\n         65: iload_2\n-        66: invokestatic  #139                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-        69: invokevirtual #142                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionRequired:(I)V\n+        66: invokestatic  #135                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        69: invokevirtual #138                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionRequired:(I)V\n         72: iinc          2, 2\n         75: aload_0\n         76: getfield      #30                 // Field cfhBuf:[B\n         79: iload_2\n-        80: invokestatic  #143                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+        80: invokestatic  #139                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n         83: astore        5\n         85: aload         5\n-        87: invokevirtual #144                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesUTF8ForNames:()Z\n+        87: invokevirtual #140                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesUTF8ForNames:()Z\n         90: istore        6\n         92: iload         6\n         94: ifeq          103\n-        97: getstatic     #145                // Field org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        97: getstatic     #141                // Field org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n        100: goto          107\n        103: aload_0\n        104: getfield      #45                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n        107: astore        7\n        109: iload         6\n        111: ifeq          121\n        114: aload_3\n-       115: getstatic     #146                // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-       118: invokevirtual #147                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+       115: getstatic     #142                // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+       118: invokevirtual #143                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n        121: aload_3\n        122: aload         5\n-       124: invokevirtual #148                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+       124: invokevirtual #144                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n        127: aload_3\n        128: aload_0\n        129: getfield      #30                 // Field cfhBuf:[B\n        132: iload_2\n-       133: invokestatic  #139                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       136: invokevirtual #149                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setRawFlag:(I)V\n+       133: invokestatic  #135                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       136: invokevirtual #145                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setRawFlag:(I)V\n        139: iinc          2, 2\n        142: aload_3\n        143: aload_0\n        144: getfield      #30                 // Field cfhBuf:[B\n        147: iload_2\n-       148: invokestatic  #139                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       151: invokevirtual #150                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setMethod:(I)V\n+       148: invokestatic  #135                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       151: invokevirtual #146                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setMethod:(I)V\n        154: iinc          2, 2\n        157: aload_0\n        158: getfield      #30                 // Field cfhBuf:[B\n        161: iload_2\n-       162: invokestatic  #151                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       165: invokestatic  #152                // Method org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n+       162: invokestatic  #147                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       165: invokestatic  #148                // Method org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n        168: lstore        8\n        170: aload_3\n        171: lload         8\n-       173: invokevirtual #153                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setTime:(J)V\n+       173: invokevirtual #149                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setTime:(J)V\n        176: iinc          2, 4\n        179: aload_3\n        180: aload_0\n        181: getfield      #30                 // Field cfhBuf:[B\n        184: iload_2\n-       185: invokestatic  #151                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       188: invokevirtual #154                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCrc:(J)V\n+       185: invokestatic  #147                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       188: invokevirtual #150                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCrc:(J)V\n        191: iinc          2, 4\n        194: aload_3\n        195: aload_0\n        196: getfield      #30                 // Field cfhBuf:[B\n        199: iload_2\n-       200: invokestatic  #151                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       203: invokevirtual #155                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCompressedSize:(J)V\n+       200: invokestatic  #147                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       203: invokevirtual #151                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCompressedSize:(J)V\n        206: iinc          2, 4\n        209: aload_3\n        210: aload_0\n        211: getfield      #30                 // Field cfhBuf:[B\n        214: iload_2\n-       215: invokestatic  #151                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       218: invokevirtual #156                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setSize:(J)V\n+       215: invokestatic  #147                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       218: invokevirtual #152                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setSize:(J)V\n        221: iinc          2, 4\n        224: aload_0\n        225: getfield      #30                 // Field cfhBuf:[B\n        228: iload_2\n-       229: invokestatic  #139                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       229: invokestatic  #135                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        232: istore        10\n        234: iinc          2, 2\n        237: aload_0\n        238: getfield      #30                 // Field cfhBuf:[B\n        241: iload_2\n-       242: invokestatic  #139                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       242: invokestatic  #135                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        245: istore        11\n        247: iinc          2, 2\n        250: aload_0\n        251: getfield      #30                 // Field cfhBuf:[B\n        254: iload_2\n-       255: invokestatic  #139                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       255: invokestatic  #135                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        258: istore        12\n        260: iinc          2, 2\n        263: aload_3\n        264: aload_0\n        265: getfield      #30                 // Field cfhBuf:[B\n        268: iload_2\n-       269: invokestatic  #139                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       269: invokestatic  #135                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        272: i2l\n-       273: invokevirtual #157                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setDiskNumberStart:(J)V\n+       273: invokevirtual #153                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setDiskNumberStart:(J)V\n        276: iinc          2, 2\n        279: aload_3\n        280: aload_0\n        281: getfield      #30                 // Field cfhBuf:[B\n        284: iload_2\n-       285: invokestatic  #139                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       288: invokevirtual #158                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setInternalAttributes:(I)V\n+       285: invokestatic  #135                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       288: invokevirtual #154                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setInternalAttributes:(I)V\n        291: iinc          2, 2\n        294: aload_3\n        295: aload_0\n        296: getfield      #30                 // Field cfhBuf:[B\n        299: iload_2\n-       300: invokestatic  #151                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       303: invokevirtual #159                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExternalAttributes:(J)V\n+       300: invokestatic  #147                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       303: invokevirtual #155                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExternalAttributes:(J)V\n        306: iinc          2, 4\n        309: iload         10\n        311: newarray       byte\n        313: astore        13\n        315: aload_0\n        316: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        319: aload         13\n        321: invokestatic  #32                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n-       324: invokestatic  #130                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+       324: invokestatic  #126                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n        327: aload_3\n        328: aload         7\n        330: aload         13\n        332: invokeinterface #114,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n        337: aload         13\n-       339: invokevirtual #160                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setName:(Ljava/lang/String;[B)V\n+       339: invokevirtual #156                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setName:(Ljava/lang/String;[B)V\n        342: aload_3\n        343: aload_0\n        344: getfield      #30                 // Field cfhBuf:[B\n        347: iload_2\n-       348: invokestatic  #151                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       351: invokevirtual #161                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setLocalHeaderOffset:(J)V\n+       348: invokestatic  #147                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       351: invokevirtual #157                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setLocalHeaderOffset:(J)V\n        354: aload_0\n        355: getfield      #23                 // Field entries:Ljava/util/List;\n        358: aload_3\n-       359: invokeinterface #162,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       359: invokeinterface #158,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n        364: pop\n        365: iload         11\n        367: newarray       byte\n        369: astore        14\n        371: aload_0\n        372: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        375: aload         14\n        377: invokestatic  #32                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n-       380: invokestatic  #130                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+       380: invokestatic  #126                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n        383: aload_3\n        384: aload         14\n-       386: invokevirtual #163                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCentralDirectoryExtra:([B)V\n+       386: invokevirtual #159                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCentralDirectoryExtra:([B)V\n        389: aload_0\n        390: aload_3\n-       391: invokespecial #164                // Method setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+       391: invokespecial #160                // Method setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n        394: iload         12\n        396: newarray       byte\n        398: astore        15\n        400: aload_0\n        401: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        404: aload         15\n        406: invokestatic  #32                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n-       409: invokestatic  #130                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+       409: invokestatic  #126                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n        412: aload_3\n        413: aload         7\n        415: aload         15\n        417: invokeinterface #114,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-       422: invokevirtual #165                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setComment:(Ljava/lang/String;)V\n+       422: invokevirtual #161                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setComment:(Ljava/lang/String;)V\n        425: iload         6\n        427: ifne          457\n        430: aload_0\n        431: getfield      #46                 // Field useUnicodeExtraFields:Z\n        434: ifeq          457\n        437: aload_1\n        438: aload_3\n-       439: new           #166                // class org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n+       439: new           #162                // class org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n        442: dup\n        443: aload         13\n        445: aload         15\n        447: aconst_null\n-       448: invokespecial #167                // Method org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.\"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n-       451: invokeinterface #168,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+       448: invokespecial #163                // Method org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.\"<init>\":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V\n+       451: invokeinterface #164,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n        456: pop\n        457: aload_3\n        458: iconst_1\n-       459: invokevirtual #169                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setStreamContiguous:(Z)V\n+       459: invokevirtual #165                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setStreamContiguous:(Z)V\n        462: return\n       LineNumberTable:\n         line 734: 0\n         line 735: 8\n         line 736: 19\n         line 737: 21\n         line 739: 29\n         line 740: 39\n         line 741: 42\n         line 742: 48\n         line 744: 60\n         line 745: 72\n         line 747: 75\n         line 748: 85\n-        line 749: 92\n+        line 750: 92\n         line 751: 109\n         line 752: 114\n         line 754: 121\n         line 755: 127\n         line 757: 139\n         line 760: 142\n         line 761: 154\n@@ -2609,118 +2592,118 @@\n           locals = [ class org/apache/commons/compress/archivers/zip/ZipEncoding ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 335\n           locals = [ class org/apache/commons/compress/archivers/zip/ZipFile, class java/util/Map, int, class org/apache/commons/compress/archivers/zip/ZipFile$Entry, int, class org/apache/commons/compress/archivers/zip/GeneralPurposeBit, int, class org/apache/commons/compress/archivers/zip/ZipEncoding, long, int, int, int, class \"[B\", class \"[B\", class \"[B\" ]\n           stack = []\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #440                         // (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n+    Signature: #430                         // (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n \n   private void setSizesAndOffsetFromZip64Extra(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=7, args_size=2\n          0: aload_1\n-         1: getstatic     #170                // Field org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-         4: invokevirtual #171                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-         7: checkcast     #172                // class org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+         1: getstatic     #166                // Field org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+         4: invokevirtual #167                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+         7: checkcast     #168                // class org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n         10: astore_2\n         11: aload_2\n         12: ifnull        205\n         15: aload_1\n-        16: invokevirtual #173                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n-        19: ldc2_w        #174                // long 4294967295l\n+        16: invokevirtual #169                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n+        19: ldc2_w        #170                // long 4294967295l\n         22: lcmp\n         23: ifne          30\n         26: iconst_1\n         27: goto          31\n         30: iconst_0\n         31: istore_3\n         32: aload_1\n         33: invokevirtual #71                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n-        36: ldc2_w        #174                // long 4294967295l\n+        36: ldc2_w        #170                // long 4294967295l\n         39: lcmp\n         40: ifne          47\n         43: iconst_1\n         44: goto          48\n         47: iconst_0\n         48: istore        4\n         50: aload_1\n-        51: invokevirtual #176                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n-        54: ldc2_w        #174                // long 4294967295l\n+        51: invokevirtual #172                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n+        54: ldc2_w        #170                // long 4294967295l\n         57: lcmp\n         58: ifne          65\n         61: iconst_1\n         62: goto          66\n         65: iconst_0\n         66: istore        5\n         68: aload_1\n-        69: invokevirtual #177                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n-        72: ldc2_w        #178                // long 65535l\n+        69: invokevirtual #173                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n+        72: ldc2_w        #174                // long 65535l\n         75: lcmp\n         76: ifne          83\n         79: iconst_1\n         80: goto          84\n         83: iconst_0\n         84: istore        6\n         86: aload_2\n         87: iload_3\n         88: iload         4\n         90: iload         5\n         92: iload         6\n-        94: invokevirtual #180                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.reparseCentralDirectoryData:(ZZZZ)V\n+        94: invokevirtual #176                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.reparseCentralDirectoryData:(ZZZZ)V\n         97: iload_3\n         98: ifeq          115\n        101: aload_1\n        102: aload_2\n-       103: invokevirtual #181                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-       106: invokevirtual #182                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n-       109: invokevirtual #183                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n+       103: invokevirtual #177                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+       106: invokevirtual #178                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n+       109: invokevirtual #179                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n        112: goto          135\n        115: iload         4\n        117: ifeq          135\n        120: aload_2\n-       121: new           #184                // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+       121: new           #180                // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n        124: dup\n        125: aload_1\n-       126: invokevirtual #173                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n-       129: invokespecial #185                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n-       132: invokevirtual #186                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+       126: invokevirtual #169                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n+       129: invokespecial #181                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n+       132: invokevirtual #182                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n        135: iload         4\n        137: ifeq          154\n        140: aload_1\n        141: aload_2\n-       142: invokevirtual #187                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-       145: invokevirtual #182                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n-       148: invokevirtual #188                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n+       142: invokevirtual #183                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+       145: invokevirtual #178                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n+       148: invokevirtual #184                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n        151: goto          173\n        154: iload_3\n        155: ifeq          173\n        158: aload_2\n-       159: new           #184                // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+       159: new           #180                // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n        162: dup\n        163: aload_1\n        164: invokevirtual #71                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n-       167: invokespecial #185                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n-       170: invokevirtual #189                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+       167: invokespecial #181                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n+       170: invokevirtual #185                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n        173: iload         5\n        175: ifeq          189\n        178: aload_1\n        179: aload_2\n-       180: invokevirtual #190                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-       183: invokevirtual #182                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n-       186: invokevirtual #191                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setLocalHeaderOffset:(J)V\n+       180: invokevirtual #186                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+       183: invokevirtual #178                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n+       186: invokevirtual #187                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setLocalHeaderOffset:(J)V\n        189: iload         6\n        191: ifeq          205\n        194: aload_1\n        195: aload_2\n-       196: invokevirtual #192                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getDiskStartNumber:()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-       199: invokevirtual #193                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n-       202: invokevirtual #194                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDiskNumberStart:(J)V\n+       196: invokevirtual #188                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getDiskStartNumber:()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+       199: invokevirtual #189                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+       202: invokevirtual #190                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDiskNumberStart:(J)V\n        205: return\n       LineNumberTable:\n         line 834: 0\n         line 836: 4\n         line 837: 11\n         line 838: 15\n         line 839: 32\n@@ -2787,64 +2770,64 @@\n \n   private void positionAtCentralDirectory() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=3, args_size=1\n          0: aload_0\n-         1: invokespecial #195                // Method positionAtEndOfCentralDirectoryRecord:()V\n+         1: invokespecial #191                // Method positionAtEndOfCentralDirectoryRecord:()V\n          4: iconst_0\n          5: istore_1\n          6: aload_0\n          7: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        10: invokeinterface #196,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n-        15: ldc2_w        #197                // long 20l\n+        10: invokeinterface #192,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+        15: ldc2_w        #193                // long 20l\n         18: lcmp\n         19: ifle          26\n         22: iconst_1\n         23: goto          27\n         26: iconst_0\n         27: istore_2\n         28: iload_2\n         29: ifeq          85\n         32: aload_0\n         33: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         36: aload_0\n         37: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        40: invokeinterface #196,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n-        45: ldc2_w        #197                // long 20l\n+        40: invokeinterface #192,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+        45: ldc2_w        #193                // long 20l\n         48: lsub\n-        49: invokeinterface #199,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        49: invokeinterface #195,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         54: pop\n         55: aload_0\n         56: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        59: invokevirtual #129                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+        59: invokevirtual #125                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         62: pop\n         63: aload_0\n         64: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         67: aload_0\n         68: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        71: invokestatic  #130                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n-        74: getstatic     #200                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG:[B\n+        71: invokestatic  #126                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        74: getstatic     #196                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG:[B\n         77: aload_0\n         78: getfield      #29                 // Field wordBuf:[B\n-        81: invokestatic  #201                // Method java/util/Arrays.equals:([B[B)Z\n+        81: invokestatic  #197                // Method java/util/Arrays.equals:([B[B)Z\n         84: istore_1\n         85: iload_1\n         86: ifne          106\n         89: iload_2\n         90: ifeq          99\n         93: aload_0\n         94: bipush        16\n-        96: invokespecial #202                // Method skipBytes:(I)V\n+        96: invokespecial #198                // Method skipBytes:(I)V\n         99: aload_0\n-       100: invokespecial #203                // Method positionAtCentralDirectory32:()V\n+       100: invokespecial #199                // Method positionAtCentralDirectory32:()V\n        103: goto          110\n        106: aload_0\n-       107: invokespecial #204                // Method positionAtCentralDirectory64:()V\n+       107: invokespecial #200                // Method positionAtCentralDirectory64:()V\n        110: return\n       LineNumberTable:\n         line 1021: 0\n         line 1022: 4\n         line 1023: 6\n         line 1024: 10\n         line 1025: 28\n@@ -2884,145 +2867,145 @@\n     Code:\n       stack=5, locals=5, args_size=1\n          0: aload_0\n          1: getfield      #41                 // Field isSplitZipArchive:Z\n          4: ifeq          77\n          7: aload_0\n          8: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        11: invokevirtual #129                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+        11: invokevirtual #125                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         14: pop\n         15: aload_0\n         16: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         19: aload_0\n         20: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        23: invokestatic  #130                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        23: invokestatic  #126                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         26: aload_0\n         27: getfield      #29                 // Field wordBuf:[B\n-        30: invokestatic  #131                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+        30: invokestatic  #127                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n         33: lstore_1\n         34: aload_0\n         35: getfield      #33                 // Field dwordBbuf:Ljava/nio/ByteBuffer;\n-        38: invokevirtual #129                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+        38: invokevirtual #125                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         41: pop\n         42: aload_0\n         43: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         46: aload_0\n         47: getfield      #33                 // Field dwordBbuf:Ljava/nio/ByteBuffer;\n-        50: invokestatic  #130                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        50: invokestatic  #126                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         53: aload_0\n         54: getfield      #28                 // Field dwordBuf:[B\n-        57: invokestatic  #205                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n+        57: invokestatic  #201                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n         60: lstore_3\n         61: aload_0\n         62: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         65: checkcast     #40                 // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n         68: lload_1\n         69: lload_3\n-        70: invokevirtual #206                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n+        70: invokevirtual #202                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n         73: pop\n         74: goto          118\n         77: aload_0\n         78: iconst_4\n-        79: invokespecial #202                // Method skipBytes:(I)V\n+        79: invokespecial #198                // Method skipBytes:(I)V\n         82: aload_0\n         83: getfield      #33                 // Field dwordBbuf:Ljava/nio/ByteBuffer;\n-        86: invokevirtual #129                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+        86: invokevirtual #125                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         89: pop\n         90: aload_0\n         91: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         94: aload_0\n         95: getfield      #33                 // Field dwordBbuf:Ljava/nio/ByteBuffer;\n-        98: invokestatic  #130                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        98: invokestatic  #126                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n        101: aload_0\n        102: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        105: aload_0\n        106: getfield      #28                 // Field dwordBuf:[B\n-       109: invokestatic  #205                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n-       112: invokeinterface #199,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+       109: invokestatic  #201                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n+       112: invokeinterface #195,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n        117: pop\n        118: aload_0\n        119: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-       122: invokevirtual #129                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+       122: invokevirtual #125                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n        125: pop\n        126: aload_0\n        127: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        130: aload_0\n        131: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-       134: invokestatic  #130                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+       134: invokestatic  #126                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n        137: aload_0\n        138: getfield      #29                 // Field wordBuf:[B\n-       141: getstatic     #207                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_SIG:[B\n-       144: invokestatic  #201                // Method java/util/Arrays.equals:([B[B)Z\n+       141: getstatic     #203                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_SIG:[B\n+       144: invokestatic  #197                // Method java/util/Arrays.equals:([B[B)Z\n        147: ifne          160\n-       150: new           #208                // class java/util/zip/ZipException\n+       150: new           #204                // class java/util/zip/ZipException\n        153: dup\n-       154: ldc           #209                // String Archive\\'s ZIP64 end of central directory locator is corrupt.\n-       156: invokespecial #210                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       154: ldc           #205                // String Archive\\'s ZIP64 end of central directory locator is corrupt.\n+       156: invokespecial #206                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n        159: athrow\n        160: aload_0\n        161: getfield      #41                 // Field isSplitZipArchive:Z\n        164: ifeq          249\n        167: aload_0\n        168: bipush        16\n-       170: invokespecial #202                // Method skipBytes:(I)V\n+       170: invokespecial #198                // Method skipBytes:(I)V\n        173: aload_0\n        174: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-       177: invokevirtual #129                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+       177: invokevirtual #125                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n        180: pop\n        181: aload_0\n        182: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        185: aload_0\n        186: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-       189: invokestatic  #130                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+       189: invokestatic  #126                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n        192: aload_0\n        193: getfield      #29                 // Field wordBuf:[B\n-       196: invokestatic  #131                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+       196: invokestatic  #127                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n        199: lstore_1\n        200: aload_0\n        201: bipush        24\n-       203: invokespecial #202                // Method skipBytes:(I)V\n+       203: invokespecial #198                // Method skipBytes:(I)V\n        206: aload_0\n        207: getfield      #33                 // Field dwordBbuf:Ljava/nio/ByteBuffer;\n-       210: invokevirtual #129                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+       210: invokevirtual #125                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n        213: pop\n        214: aload_0\n        215: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        218: aload_0\n        219: getfield      #33                 // Field dwordBbuf:Ljava/nio/ByteBuffer;\n-       222: invokestatic  #130                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+       222: invokestatic  #126                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n        225: aload_0\n        226: getfield      #28                 // Field dwordBuf:[B\n-       229: invokestatic  #205                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n+       229: invokestatic  #201                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n        232: lstore_3\n        233: aload_0\n        234: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        237: checkcast     #40                 // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n        240: lload_1\n        241: lload_3\n-       242: invokevirtual #206                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n+       242: invokevirtual #202                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n        245: pop\n        246: goto          291\n        249: aload_0\n        250: bipush        44\n-       252: invokespecial #202                // Method skipBytes:(I)V\n+       252: invokespecial #198                // Method skipBytes:(I)V\n        255: aload_0\n        256: getfield      #33                 // Field dwordBbuf:Ljava/nio/ByteBuffer;\n-       259: invokevirtual #129                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+       259: invokevirtual #125                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n        262: pop\n        263: aload_0\n        264: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        267: aload_0\n        268: getfield      #33                 // Field dwordBbuf:Ljava/nio/ByteBuffer;\n-       271: invokestatic  #130                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+       271: invokestatic  #126                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n        274: aload_0\n        275: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        278: aload_0\n        279: getfield      #28                 // Field dwordBuf:[B\n-       282: invokestatic  #205                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n-       285: invokeinterface #199,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+       282: invokestatic  #201                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n+       285: invokeinterface #195,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n        290: pop\n        291: return\n       LineNumberTable:\n         line 1054: 0\n         line 1055: 7\n         line 1056: 15\n         line 1057: 26\n@@ -3081,71 +3064,71 @@\n     Code:\n       stack=5, locals=4, args_size=1\n          0: aload_0\n          1: getfield      #41                 // Field isSplitZipArchive:Z\n          4: ifeq          90\n          7: aload_0\n          8: bipush        6\n-        10: invokespecial #202                // Method skipBytes:(I)V\n+        10: invokespecial #198                // Method skipBytes:(I)V\n         13: aload_0\n         14: getfield      #36                 // Field shortBbuf:Ljava/nio/ByteBuffer;\n-        17: invokevirtual #129                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+        17: invokevirtual #125                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         20: pop\n         21: aload_0\n         22: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         25: aload_0\n         26: getfield      #36                 // Field shortBbuf:Ljava/nio/ByteBuffer;\n-        29: invokestatic  #130                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        29: invokestatic  #126                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         32: aload_0\n         33: getfield      #31                 // Field shortBuf:[B\n-        36: invokestatic  #211                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n+        36: invokestatic  #207                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n         39: istore_1\n         40: aload_0\n         41: bipush        8\n-        43: invokespecial #202                // Method skipBytes:(I)V\n+        43: invokespecial #198                // Method skipBytes:(I)V\n         46: aload_0\n         47: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        50: invokevirtual #129                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+        50: invokevirtual #125                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         53: pop\n         54: aload_0\n         55: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         58: aload_0\n         59: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        62: invokestatic  #130                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        62: invokestatic  #126                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         65: aload_0\n         66: getfield      #29                 // Field wordBuf:[B\n-        69: invokestatic  #131                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+        69: invokestatic  #127                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n         72: lstore_2\n         73: aload_0\n         74: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         77: checkcast     #40                 // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n         80: iload_1\n         81: i2l\n         82: lload_2\n-        83: invokevirtual #206                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n+        83: invokevirtual #202                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n         86: pop\n         87: goto          132\n         90: aload_0\n         91: bipush        16\n-        93: invokespecial #202                // Method skipBytes:(I)V\n+        93: invokespecial #198                // Method skipBytes:(I)V\n         96: aload_0\n         97: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-       100: invokevirtual #129                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+       100: invokevirtual #125                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n        103: pop\n        104: aload_0\n        105: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        108: aload_0\n        109: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-       112: invokestatic  #130                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+       112: invokestatic  #126                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n        115: aload_0\n        116: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        119: aload_0\n        120: getfield      #29                 // Field wordBuf:[B\n-       123: invokestatic  #131                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n-       126: invokeinterface #199,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+       123: invokestatic  #127                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+       126: invokeinterface #195,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n        131: pop\n        132: return\n       LineNumberTable:\n         line 1111: 0\n         line 1112: 7\n         line 1113: 13\n         line 1114: 21\n@@ -3176,25 +3159,25 @@\n \n   private void positionAtEndOfCentralDirectoryRecord() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=6, locals=2, args_size=1\n          0: aload_0\n-         1: ldc2_w        #212                // long 22l\n-         4: ldc2_w        #214                // long 65557l\n-         7: getstatic     #216                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n-        10: invokespecial #217                // Method tryToLocateSignature:(JJ[B)Z\n+         1: ldc2_w        #208                // long 22l\n+         4: ldc2_w        #210                // long 65557l\n+         7: getstatic     #212                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n+        10: invokespecial #213                // Method tryToLocateSignature:(JJ[B)Z\n         13: istore_1\n         14: iload_1\n         15: ifne          28\n-        18: new           #208                // class java/util/zip/ZipException\n+        18: new           #204                // class java/util/zip/ZipException\n         21: dup\n-        22: ldc           #218                // String Archive is not a ZIP archive\n-        24: invokespecial #210                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        22: ldc           #214                // String Archive is not a ZIP archive\n+        24: invokespecial #206                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n         27: athrow\n         28: return\n       LineNumberTable:\n         line 1138: 0\n         line 1140: 14\n         line 1141: 18\n         line 1143: 28\n@@ -3214,85 +3197,85 @@\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=6, locals=12, args_size=4\n          0: iconst_0\n          1: istore        6\n          3: aload_0\n          4: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-         7: invokeinterface #219,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n+         7: invokeinterface #215,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n         12: lload_1\n         13: lsub\n         14: lstore        7\n         16: lconst_0\n         17: aload_0\n         18: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        21: invokeinterface #219,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n+        21: invokeinterface #215,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n         26: lload_3\n         27: lsub\n-        28: invokestatic  #220                // Method java/lang/Math.max:(JJ)J\n+        28: invokestatic  #216                // Method java/lang/Math.max:(JJ)J\n         31: lstore        9\n         33: lload         7\n         35: lconst_0\n         36: lcmp\n         37: iflt          182\n         40: lload         7\n         42: lload         9\n         44: lcmp\n         45: iflt          182\n         48: aload_0\n         49: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         52: lload         7\n-        54: invokeinterface #199,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        54: invokeinterface #195,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         59: pop\n         60: aload_0\n         61: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        64: invokevirtual #129                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+        64: invokevirtual #125                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         67: pop\n         68: aload_0\n         69: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         72: aload_0\n         73: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        76: invokestatic  #130                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        76: invokestatic  #126                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         79: aload_0\n         80: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        83: invokevirtual #221                // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+        83: invokevirtual #217                // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n         86: pop\n         87: goto          95\n         90: astore        11\n         92: goto          182\n         95: aload_0\n         96: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        99: invokevirtual #223                // Method java/nio/ByteBuffer.get:()B\n+        99: invokevirtual #219                // Method java/nio/ByteBuffer.get:()B\n        102: istore        11\n        104: iload         11\n        106: aload         5\n        108: iconst_0\n        109: baload\n        110: if_icmpne     173\n        113: aload_0\n        114: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-       117: invokevirtual #223                // Method java/nio/ByteBuffer.get:()B\n+       117: invokevirtual #219                // Method java/nio/ByteBuffer.get:()B\n        120: istore        11\n        122: iload         11\n        124: aload         5\n        126: iconst_1\n        127: baload\n        128: if_icmpne     173\n        131: aload_0\n        132: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-       135: invokevirtual #223                // Method java/nio/ByteBuffer.get:()B\n+       135: invokevirtual #219                // Method java/nio/ByteBuffer.get:()B\n        138: istore        11\n        140: iload         11\n        142: aload         5\n        144: iconst_2\n        145: baload\n        146: if_icmpne     173\n        149: aload_0\n        150: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-       153: invokevirtual #223                // Method java/nio/ByteBuffer.get:()B\n+       153: invokevirtual #219                // Method java/nio/ByteBuffer.get:()B\n        156: istore        11\n        158: iload         11\n        160: aload         5\n        162: iconst_3\n        163: baload\n        164: if_icmpne     173\n        167: iconst_1\n@@ -3304,15 +3287,15 @@\n        177: lstore        7\n        179: goto          40\n        182: iload         6\n        184: ifeq          199\n        187: aload_0\n        188: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n        191: lload         7\n-       193: invokeinterface #199,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+       193: invokeinterface #195,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n        198: pop\n        199: iload         6\n        201: ireturn\n       Exception table:\n          from    to  target type\n             60    87    90   Class java/io/EOFException\n       LineNumberTable:\n@@ -3371,35 +3354,35 @@\n   private void skipBytes(int) throws java.io.IOException;\n     descriptor: (I)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=6, args_size=2\n          0: aload_0\n          1: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-         4: invokeinterface #196,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+         4: invokeinterface #192,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n          9: lstore_2\n         10: lload_2\n         11: iload_1\n         12: i2l\n         13: ladd\n         14: lstore        4\n         16: lload         4\n         18: aload_0\n         19: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        22: invokeinterface #219,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n+        22: invokeinterface #215,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n         27: lcmp\n         28: ifle          39\n-        31: new           #222                // class java/io/EOFException\n+        31: new           #218                // class java/io/EOFException\n         34: dup\n-        35: invokespecial #224                // Method java/io/EOFException.\"<init>\":()V\n+        35: invokespecial #220                // Method java/io/EOFException.\"<init>\":()V\n         38: athrow\n         39: aload_0\n         40: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         43: lload         4\n-        45: invokeinterface #199,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        45: invokeinterface #195,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         50: pop\n         51: return\n       LineNumberTable:\n         line 1194: 0\n         line 1195: 10\n         line 1196: 16\n         line 1197: 31\n@@ -3421,67 +3404,67 @@\n   private void resolveLocalFileHeaderData(java.util.Map<org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment>) throws java.io.IOException;\n     descriptor: (Ljava/util/Map;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=10, args_size=2\n          0: aload_0\n          1: getfield      #23                 // Field entries:Ljava/util/List;\n-         4: invokeinterface #225,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n+         4: invokeinterface #221,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n          9: astore_2\n         10: aload_2\n-        11: invokeinterface #226,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z\n+        11: invokeinterface #222,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z\n         16: ifeq          128\n         19: aload_2\n-        20: invokeinterface #227,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n+        20: invokeinterface #223,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n         25: checkcast     #54                 // class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n         28: astore_3\n         29: aload_3\n         30: checkcast     #66                 // class org/apache/commons/compress/archivers/zip/ZipFile$Entry\n         33: astore        4\n         35: aload_0\n         36: aload         4\n-        38: invokespecial #228                // Method setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n+        38: invokespecial #224                // Method setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n         41: astore        5\n         43: aload         5\n         45: iconst_0\n         46: iaload\n         47: istore        6\n         49: aload         5\n         51: iconst_1\n         52: iaload\n         53: istore        7\n         55: aload_0\n         56: iload         6\n-        58: invokespecial #202                // Method skipBytes:(I)V\n+        58: invokespecial #198                // Method skipBytes:(I)V\n         61: iload         7\n         63: newarray       byte\n         65: astore        8\n         67: aload_0\n         68: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         71: aload         8\n         73: invokestatic  #32                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n-        76: invokestatic  #130                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        76: invokestatic  #126                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         79: aload         4\n         81: aload         8\n-        83: invokevirtual #229                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExtra:([B)V\n+        83: invokevirtual #225                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExtra:([B)V\n         86: aload_1\n         87: aload         4\n         89: invokeinterface #63,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z\n         94: ifeq          125\n         97: aload_1\n         98: aload         4\n        100: invokeinterface #59,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-       105: checkcast     #166                // class org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n+       105: checkcast     #162                // class org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment\n        108: astore        9\n        110: aload         4\n        112: aload         9\n-       114: invokestatic  #230                // Method org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+       114: invokestatic  #226                // Method org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n        117: aload         9\n-       119: invokestatic  #231                // Method org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n-       122: invokestatic  #232                // Method org/apache/commons/compress/archivers/zip/ZipUtil.setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+       119: invokestatic  #227                // Method org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B\n+       122: invokestatic  #228                // Method org/apache/commons/compress/archivers/zip/ZipUtil.setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n        125: goto          10\n        128: return\n       LineNumberTable:\n         line 1227: 0\n         line 1230: 29\n         line 1231: 35\n         line 1232: 43\n@@ -3517,34 +3500,34 @@\n           locals = [ class java/util/Iterator ]\n         frame_type = 251 /* same_frame_extended */\n           offset_delta = 114\n         frame_type = 250 /* chop */\n           offset_delta = 2\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #440                         // (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n+    Signature: #430                         // (Ljava/util/Map<Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;>;)V\n \n   private void fillNameMap();\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=5, args_size=1\n          0: aload_0\n          1: getfield      #23                 // Field entries:Ljava/util/List;\n-         4: invokeinterface #225,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n+         4: invokeinterface #221,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n          9: astore_1\n         10: aload_1\n-        11: invokeinterface #226,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z\n+        11: invokeinterface #222,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z\n         16: ifeq          85\n         19: aload_1\n-        20: invokeinterface #227,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n+        20: invokeinterface #223,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n         25: checkcast     #54                 // class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n         28: astore_2\n         29: aload_2\n-        30: invokevirtual #233                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n+        30: invokevirtual #229                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n         33: astore_3\n         34: aload_0\n         35: getfield      #26                 // Field nameMap:Ljava/util/Map;\n         38: aload_3\n         39: invokeinterface #59,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n         44: checkcast     #21                 // class java/util/LinkedList\n         47: astore        4\n@@ -3554,19 +3537,19 @@\n         57: dup\n         58: invokespecial #22                 // Method java/util/LinkedList.\"<init>\":()V\n         61: astore        4\n         63: aload_0\n         64: getfield      #26                 // Field nameMap:Ljava/util/Map;\n         67: aload_3\n         68: aload         4\n-        70: invokeinterface #168,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+        70: invokeinterface #164,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n         75: pop\n         76: aload         4\n         78: aload_2\n-        79: invokevirtual #234                // Method java/util/LinkedList.addLast:(Ljava/lang/Object;)V\n+        79: invokevirtual #230                // Method java/util/LinkedList.addLast:(Ljava/lang/Object;)V\n         82: goto          10\n         85: return\n       LineNumberTable:\n         line 1248: 0\n         line 1251: 29\n         line 1252: 34\n         line 1253: 49\n@@ -3598,91 +3581,91 @@\n \n   private int[] setDataOffset(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=7, locals=6, args_size=2\n          0: aload_1\n-         1: invokevirtual #176                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n+         1: invokevirtual #172                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J\n          4: lstore_2\n          5: aload_0\n          6: getfield      #41                 // Field isSplitZipArchive:Z\n          9: ifeq          49\n         12: aload_0\n         13: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         16: checkcast     #40                 // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n         19: aload_1\n-        20: invokevirtual #177                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n+        20: invokevirtual #173                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n         23: lload_2\n-        24: ldc2_w        #235                // long 26l\n+        24: ldc2_w        #231                // long 26l\n         27: ladd\n-        28: invokevirtual #206                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n+        28: invokevirtual #202                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n         31: pop\n         32: aload_0\n         33: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        36: invokeinterface #196,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n-        41: ldc2_w        #235                // long 26l\n+        36: invokeinterface #192,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+        41: ldc2_w        #231                // long 26l\n         44: lsub\n         45: lstore_2\n         46: goto          64\n         49: aload_0\n         50: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         53: lload_2\n-        54: ldc2_w        #235                // long 26l\n+        54: ldc2_w        #231                // long 26l\n         57: ladd\n-        58: invokeinterface #199,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        58: invokeinterface #195,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         63: pop\n         64: aload_0\n         65: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        68: invokevirtual #129                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+        68: invokevirtual #125                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         71: pop\n         72: aload_0\n         73: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         76: aload_0\n         77: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        80: invokestatic  #130                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        80: invokestatic  #126                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         83: aload_0\n         84: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        87: invokevirtual #221                // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+        87: invokevirtual #217                // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n         90: pop\n         91: aload_0\n         92: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n         95: aload_0\n         96: getfield      #31                 // Field shortBuf:[B\n-        99: invokevirtual #237                // Method java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;\n+        99: invokevirtual #233                // Method java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;\n        102: pop\n        103: aload_0\n        104: getfield      #31                 // Field shortBuf:[B\n-       107: invokestatic  #211                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n+       107: invokestatic  #207                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n        110: istore        4\n        112: aload_0\n        113: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n        116: aload_0\n        117: getfield      #31                 // Field shortBuf:[B\n-       120: invokevirtual #237                // Method java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;\n+       120: invokevirtual #233                // Method java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;\n        123: pop\n        124: aload_0\n        125: getfield      #31                 // Field shortBuf:[B\n-       128: invokestatic  #211                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n+       128: invokestatic  #207                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n        131: istore        5\n        133: aload_1\n        134: lload_2\n-       135: ldc2_w        #235                // long 26l\n+       135: ldc2_w        #231                // long 26l\n        138: ladd\n-       139: ldc2_w        #238                // long 2l\n+       139: ldc2_w        #234                // long 2l\n        142: ladd\n-       143: ldc2_w        #238                // long 2l\n+       143: ldc2_w        #234                // long 2l\n        146: ladd\n        147: iload         4\n        149: i2l\n        150: ladd\n        151: iload         5\n        153: i2l\n        154: ladd\n-       155: invokevirtual #240                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDataOffset:(J)V\n+       155: invokevirtual #236                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDataOffset:(J)V\n        158: iconst_2\n        159: newarray       int\n        161: dup\n        162: iconst_0\n        163: iload         4\n        165: iastore\n        166: dup\n@@ -3731,15 +3714,15 @@\n          4: lstore_2\n          5: lload_2\n          6: ldc2_w        #69                 // long -1l\n          9: lcmp\n         10: ifne          24\n         13: aload_0\n         14: aload_1\n-        15: invokespecial #228                // Method setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n+        15: invokespecial #224                // Method setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I\n         18: pop\n         19: aload_1\n         20: invokevirtual #67                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDataOffset:()J\n         23: lreturn\n         24: lload_2\n         25: lreturn\n       LineNumberTable:\n@@ -3764,29 +3747,29 @@\n     descriptor: ()Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n          1: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n          4: lconst_0\n-         5: invokeinterface #199,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+         5: invokeinterface #195,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         10: pop\n         11: aload_0\n         12: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        15: invokevirtual #129                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+        15: invokevirtual #125                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         18: pop\n         19: aload_0\n         20: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         23: aload_0\n         24: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;\n-        27: invokestatic  #130                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+        27: invokestatic  #126                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n         30: aload_0\n         31: getfield      #29                 // Field wordBuf:[B\n-        34: getstatic     #241                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n-        37: invokestatic  #201                // Method java/util/Arrays.equals:([B[B)Z\n+        34: getstatic     #237                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n+        37: invokestatic  #197                // Method java/util/Arrays.equals:([B[B)Z\n         40: ireturn\n       LineNumberTable:\n         line 1297: 0\n         line 1298: 11\n         line 1299: 19\n         line 1300: 30\n       LocalVariableTable:\n@@ -3798,32 +3781,35 @@\n   private org.apache.commons.compress.archivers.zip.ZipFile$BoundedInputStream createBoundedInputStream(long, long);\n     descriptor: (JJ)Lorg/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=7, locals=5, args_size=3\n          0: aload_0\n          1: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-         4: instanceof    #242                // class java/nio/channels/FileChannel\n+         4: instanceof    #238                // class java/nio/channels/FileChannel\n          7: ifeq          23\n-        10: new           #243                // class org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n+        10: new           #239                // class org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream\n         13: dup\n         14: aload_0\n         15: lload_1\n         16: lload_3\n-        17: invokespecial #244                // Method org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n+        17: invokespecial #240                // Method org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n         20: goto          33\n-        23: new           #245                // class org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream\n+        23: new           #241                // class org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream\n         26: dup\n         27: aload_0\n         28: lload_1\n         29: lload_3\n-        30: invokespecial #246                // Method org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n+        30: invokespecial #242                // Method org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V\n         33: areturn\n       LineNumberTable:\n         line 1308: 0\n+        line 1309: 10\n+        line 1310: 23\n+        line 1308: 33\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      34     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile;\n             0      34     1 start   J\n             0      34     3 remaining   J\n       StackMapTable: number_of_entries = 2\n         frame_type = 23 /* same */\n@@ -3848,28 +3834,33 @@\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=2, locals=0, args_size=0\n          0: iconst_1\n          1: newarray       byte\n          3: putstatic     #101                // Field ONE_ZERO_BYTE:[B\n-         6: getstatic     #247                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.CFH_SIG:[B\n-         9: invokestatic  #131                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n-        12: putstatic     #132                // Field CFH_SIG:J\n+         6: getstatic     #243                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.CFH_SIG:[B\n+         9: invokestatic  #127                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+        12: putstatic     #128                // Field CFH_SIG:J\n         15: return\n       LineNumberTable:\n         line 97: 0\n         line 683: 6\n         line 684: 9\n         line 683: 15\n }\n SourceFile: \"ZipFile.java\"\n InnerClasses:\n-  static #250;                            // class org/apache/commons/compress/archivers/zip/ZipFile$3\n-  private static #252= #87 of #1;         // StoredStatisticsStream=class org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream of class org/apache/commons/compress/archivers/zip/ZipFile\n-  private static #253= #66 of #1;         // Entry=class org/apache/commons/compress/archivers/zip/ZipFile$Entry of class org/apache/commons/compress/archivers/zip/ZipFile\n-  private static final #254= #166 of #1;  // NameAndComment=class org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment of class org/apache/commons/compress/archivers/zip/ZipFile\n-  private #255= #243 of #1;               // BoundedFileChannelInputStream=class org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream of class org/apache/commons/compress/archivers/zip/ZipFile\n-  private #256= #245 of #1;               // BoundedInputStream=class org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream of class org/apache/commons/compress/archivers/zip/ZipFile\n+  static #246;                            // class org/apache/commons/compress/archivers/zip/ZipFile$3\n+  private static #248= #87 of #1;         // StoredStatisticsStream=class org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream of class org/apache/commons/compress/archivers/zip/ZipFile\n+  private static #249= #66 of #1;         // Entry=class org/apache/commons/compress/archivers/zip/ZipFile$Entry of class org/apache/commons/compress/archivers/zip/ZipFile\n+  private static final #250= #162 of #1;  // NameAndComment=class org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment of class org/apache/commons/compress/archivers/zip/ZipFile\n+  private #251= #239 of #1;               // BoundedFileChannelInputStream=class org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream of class org/apache/commons/compress/archivers/zip/ZipFile\n+  private #252= #241 of #1;               // BoundedInputStream=class org/apache/commons/compress/archivers/zip/ZipFile$BoundedInputStream of class org/apache/commons/compress/archivers/zip/ZipFile\n   #37;                                    // class org/apache/commons/compress/archivers/zip/ZipFile$2\n   #98;                                    // class org/apache/commons/compress/archivers/zip/ZipFile$1\n-  public static final #848= #653 of #54;  // NameSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  public static final #830= #634 of #54;  // NameSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  public static final #908= #907 of #910; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n+BootstrapMethods:\n+  0: #610 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+    Method arguments:\n+      #611 Cleaning up unclosed ZipFile for archive \\u0001\n"}]}
