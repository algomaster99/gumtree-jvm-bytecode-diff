{"diffoscope-json-version": 1, "source1": "first/Deflate64CompressorInputStream.class", "source2": "second/Deflate64CompressorInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,117 +1,120 @@\n-  SHA-256 checksum d7edfc630de246d46c8b4d7c347a372e1ba9f5ffc801881825bba8abc1de6767\n+  SHA-256 checksum 97b6c4a58ba1c4c4be9657bc2c4a2a7f67ffad1fa1ebbc616fcbbbac41839e6f\n   Compiled from \"Deflate64CompressorInputStream.java\"\n public class org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream implements org.apache.commons.compress.utils.InputStreamStatistics\n   minor version: 0\n-  major version: 51\n+  major version: 53\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #25                         // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n-  super_class: #26                        // org/apache/commons/compress/compressors/CompressorInputStream\n-  interfaces: 1, fields: 4, methods: 8, attributes: 1\n+  this_class: #20                         // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+  super_class: #21                        // org/apache/commons/compress/compressors/CompressorInputStream\n+  interfaces: 1, fields: 4, methods: 8, attributes: 3\n Constant pool:\n-    #1 = Class              #56           // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n-    #2 = Methodref          #1.#57        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.\"<init>\":(Ljava/io/InputStream;)V\n-    #3 = Methodref          #25.#58       // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)V\n-    #4 = Fieldref           #25.#59       // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.originalStream:Ljava/io/InputStream;\n-    #5 = Methodref          #26.#60       // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n-    #6 = Fieldref           #25.#61       // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.oneByte:[B\n-    #7 = Fieldref           #25.#62       // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n-    #8 = Methodref          #25.#63       // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.read:([B)I\n-    #9 = Class              #64           // java/lang/IllegalStateException\n-   #10 = Class              #65           // java/lang/StringBuilder\n-   #11 = Methodref          #10.#60       // java/lang/StringBuilder.\"<init>\":()V\n-   #12 = String             #66           // Invalid return value from read:\n-   #13 = Methodref          #10.#67       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #14 = Methodref          #10.#68       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #15 = Methodref          #10.#69       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #16 = Methodref          #9.#70        // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-   #17 = Methodref          #1.#71        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.decode:([BII)I\n-   #18 = Methodref          #1.#72        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.getBytesRead:()J\n-   #19 = Fieldref           #25.#73       // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.compressedBytesRead:J\n-   #20 = Methodref          #25.#74       // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.count:(I)V\n-   #21 = Methodref          #25.#75       // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.closeDecoder:()V\n-   #22 = Methodref          #1.#76        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.available:()I\n-   #23 = Methodref          #77.#78       // java/io/InputStream.close:()V\n-   #24 = Methodref          #79.#80       // org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n-   #25 = Class              #81           // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n-   #26 = Class              #82           // org/apache/commons/compress/compressors/CompressorInputStream\n-   #27 = Class              #83           // org/apache/commons/compress/utils/InputStreamStatistics\n-   #28 = Utf8               originalStream\n-   #29 = Utf8               Ljava/io/InputStream;\n-   #30 = Utf8               decoder\n-   #31 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n-   #32 = Utf8               compressedBytesRead\n-   #33 = Utf8               J\n-   #34 = Utf8               oneByte\n-   #35 = Utf8               [B\n-   #36 = Utf8               <init>\n-   #37 = Utf8               (Ljava/io/InputStream;)V\n-   #38 = Utf8               Code\n-   #39 = Utf8               LineNumberTable\n-   #40 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)V\n-   #41 = Utf8               read\n-   #42 = Utf8               ()I\n-   #43 = Utf8               StackMapTable\n-   #44 = Utf8               Exceptions\n-   #45 = Class              #84           // java/io/IOException\n-   #46 = Utf8               ([BII)I\n-   #47 = Utf8               available\n-   #48 = Utf8               close\n-   #49 = Utf8               ()V\n-   #50 = Class              #85           // java/lang/Throwable\n-   #51 = Utf8               getCompressedCount\n-   #52 = Utf8               ()J\n-   #53 = Utf8               closeDecoder\n-   #54 = Utf8               SourceFile\n-   #55 = Utf8               Deflate64CompressorInputStream.java\n-   #56 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n-   #57 = NameAndType        #36:#37       // \"<init>\":(Ljava/io/InputStream;)V\n-   #58 = NameAndType        #36:#40       // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)V\n-   #59 = NameAndType        #28:#29       // originalStream:Ljava/io/InputStream;\n-   #60 = NameAndType        #36:#49       // \"<init>\":()V\n-   #61 = NameAndType        #34:#35       // oneByte:[B\n-   #62 = NameAndType        #30:#31       // decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n-   #63 = NameAndType        #41:#86       // read:([B)I\n-   #64 = Utf8               java/lang/IllegalStateException\n-   #65 = Utf8               java/lang/StringBuilder\n-   #66 = Utf8               Invalid return value from read:\n-   #67 = NameAndType        #87:#88       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #68 = NameAndType        #87:#89       // append:(I)Ljava/lang/StringBuilder;\n-   #69 = NameAndType        #90:#91       // toString:()Ljava/lang/String;\n-   #70 = NameAndType        #36:#92       // \"<init>\":(Ljava/lang/String;)V\n-   #71 = NameAndType        #93:#46       // decode:([BII)I\n-   #72 = NameAndType        #94:#52       // getBytesRead:()J\n-   #73 = NameAndType        #32:#33       // compressedBytesRead:J\n-   #74 = NameAndType        #95:#96       // count:(I)V\n-   #75 = NameAndType        #53:#49       // closeDecoder:()V\n-   #76 = NameAndType        #47:#42       // available:()I\n-   #77 = Class              #97           // java/io/InputStream\n-   #78 = NameAndType        #48:#49       // close:()V\n-   #79 = Class              #98           // org/apache/commons/compress/utils/IOUtils\n-   #80 = NameAndType        #99:#100      // closeQuietly:(Ljava/io/Closeable;)V\n-   #81 = Utf8               org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n-   #82 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n-   #83 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n-   #84 = Utf8               java/io/IOException\n-   #85 = Utf8               java/lang/Throwable\n-   #86 = Utf8               ([B)I\n-   #87 = Utf8               append\n-   #88 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #89 = Utf8               (I)Ljava/lang/StringBuilder;\n-   #90 = Utf8               toString\n-   #91 = Utf8               ()Ljava/lang/String;\n-   #92 = Utf8               (Ljava/lang/String;)V\n-   #93 = Utf8               decode\n-   #94 = Utf8               getBytesRead\n-   #95 = Utf8               count\n-   #96 = Utf8               (I)V\n-   #97 = Utf8               java/io/InputStream\n-   #98 = Utf8               org/apache/commons/compress/utils/IOUtils\n-   #99 = Utf8               closeQuietly\n-  #100 = Utf8               (Ljava/io/Closeable;)V\n+    #1 = Class              #51           // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n+    #2 = Methodref          #1.#52        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.\"<init>\":(Ljava/io/InputStream;)V\n+    #3 = Methodref          #20.#53       // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)V\n+    #4 = Fieldref           #20.#54       // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.originalStream:Ljava/io/InputStream;\n+    #5 = Methodref          #21.#55       // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+    #6 = Fieldref           #20.#56       // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.oneByte:[B\n+    #7 = Fieldref           #20.#57       // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n+    #8 = Methodref          #20.#58       // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.read:([B)I\n+    #9 = Class              #59           // java/lang/IllegalStateException\n+   #10 = InvokeDynamic      #0:#63        // #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+   #11 = Methodref          #9.#64        // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+   #12 = Methodref          #1.#65        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.decode:([BII)I\n+   #13 = Methodref          #1.#66        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.getBytesRead:()J\n+   #14 = Fieldref           #20.#67       // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.compressedBytesRead:J\n+   #15 = Methodref          #20.#68       // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.count:(I)V\n+   #16 = Methodref          #20.#69       // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.closeDecoder:()V\n+   #17 = Methodref          #1.#70        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.available:()I\n+   #18 = Methodref          #71.#72       // java/io/InputStream.close:()V\n+   #19 = Methodref          #73.#74       // org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n+   #20 = Class              #75           // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+   #21 = Class              #76           // org/apache/commons/compress/compressors/CompressorInputStream\n+   #22 = Class              #77           // org/apache/commons/compress/utils/InputStreamStatistics\n+   #23 = Utf8               originalStream\n+   #24 = Utf8               Ljava/io/InputStream;\n+   #25 = Utf8               decoder\n+   #26 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n+   #27 = Utf8               compressedBytesRead\n+   #28 = Utf8               J\n+   #29 = Utf8               oneByte\n+   #30 = Utf8               [B\n+   #31 = Utf8               <init>\n+   #32 = Utf8               (Ljava/io/InputStream;)V\n+   #33 = Utf8               Code\n+   #34 = Utf8               LineNumberTable\n+   #35 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)V\n+   #36 = Utf8               read\n+   #37 = Utf8               ()I\n+   #38 = Utf8               StackMapTable\n+   #39 = Utf8               Exceptions\n+   #40 = Class              #78           // java/io/IOException\n+   #41 = Utf8               ([BII)I\n+   #42 = Utf8               available\n+   #43 = Utf8               close\n+   #44 = Utf8               ()V\n+   #45 = Class              #79           // java/lang/Throwable\n+   #46 = Utf8               getCompressedCount\n+   #47 = Utf8               ()J\n+   #48 = Utf8               closeDecoder\n+   #49 = Utf8               SourceFile\n+   #50 = Utf8               Deflate64CompressorInputStream.java\n+   #51 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n+   #52 = NameAndType        #31:#32       // \"<init>\":(Ljava/io/InputStream;)V\n+   #53 = NameAndType        #31:#35       // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)V\n+   #54 = NameAndType        #23:#24       // originalStream:Ljava/io/InputStream;\n+   #55 = NameAndType        #31:#44       // \"<init>\":()V\n+   #56 = NameAndType        #29:#30       // oneByte:[B\n+   #57 = NameAndType        #25:#26       // decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n+   #58 = NameAndType        #36:#80       // read:([B)I\n+   #59 = Utf8               java/lang/IllegalStateException\n+   #60 = Utf8               BootstrapMethods\n+   #61 = MethodHandle       6:#81         // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+   #62 = String             #82           // Invalid return value from read: \\u0001\n+   #63 = NameAndType        #83:#84       // makeConcatWithConstants:(I)Ljava/lang/String;\n+   #64 = NameAndType        #31:#85       // \"<init>\":(Ljava/lang/String;)V\n+   #65 = NameAndType        #86:#41       // decode:([BII)I\n+   #66 = NameAndType        #87:#47       // getBytesRead:()J\n+   #67 = NameAndType        #27:#28       // compressedBytesRead:J\n+   #68 = NameAndType        #88:#89       // count:(I)V\n+   #69 = NameAndType        #48:#44       // closeDecoder:()V\n+   #70 = NameAndType        #42:#37       // available:()I\n+   #71 = Class              #90           // java/io/InputStream\n+   #72 = NameAndType        #43:#44       // close:()V\n+   #73 = Class              #91           // org/apache/commons/compress/utils/IOUtils\n+   #74 = NameAndType        #92:#93       // closeQuietly:(Ljava/io/Closeable;)V\n+   #75 = Utf8               org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+   #76 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n+   #77 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n+   #78 = Utf8               java/io/IOException\n+   #79 = Utf8               java/lang/Throwable\n+   #80 = Utf8               ([B)I\n+   #81 = Methodref          #94.#95       // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+   #82 = Utf8               Invalid return value from read: \\u0001\n+   #83 = Utf8               makeConcatWithConstants\n+   #84 = Utf8               (I)Ljava/lang/String;\n+   #85 = Utf8               (Ljava/lang/String;)V\n+   #86 = Utf8               decode\n+   #87 = Utf8               getBytesRead\n+   #88 = Utf8               count\n+   #89 = Utf8               (I)V\n+   #90 = Utf8               java/io/InputStream\n+   #91 = Utf8               org/apache/commons/compress/utils/IOUtils\n+   #92 = Utf8               closeQuietly\n+   #93 = Utf8               (Ljava/io/Closeable;)V\n+   #94 = Class              #96           // java/lang/invoke/StringConcatFactory\n+   #95 = NameAndType        #83:#100      // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+   #96 = Utf8               java/lang/invoke/StringConcatFactory\n+   #97 = Class              #102          // java/lang/invoke/MethodHandles$Lookup\n+   #98 = Utf8               Lookup\n+   #99 = Utf8               InnerClasses\n+  #100 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #101 = Class              #103          // java/lang/invoke/MethodHandles\n+  #102 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #103 = Utf8               java/lang/invoke/MethodHandles\n {\n   private java.io.InputStream originalStream;\n     descriptor: Ljava/io/InputStream;\n     flags: (0x0002) ACC_PRIVATE\n \n   private org.apache.commons.compress.compressors.deflate64.HuffmanDecoder decoder;\n     descriptor: Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n@@ -166,15 +169,15 @@\n         line 51: 11\n         line 52: 16\n \n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n-      stack=4, locals=2, args_size=1\n+      stack=3, locals=2, args_size=1\n          0: aload_0\n          1: aload_0\n          2: getfield      #6                  // Field oneByte:[B\n          5: invokevirtual #8                  // Method read:([B)I\n          8: istore_1\n          9: iload_1\n         10: tableswitch   { // -1 to 1\n@@ -191,24 +194,18 @@\n         45: iand\n         46: ireturn\n         47: iconst_m1\n         48: ireturn\n         49: goto          0\n         52: new           #9                  // class java/lang/IllegalStateException\n         55: dup\n-        56: new           #10                 // class java/lang/StringBuilder\n-        59: dup\n-        60: invokespecial #11                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        63: ldc           #12                 // String Invalid return value from read:\n-        65: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        68: iload_1\n-        69: invokevirtual #14                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        72: invokevirtual #15                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        75: invokespecial #16                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-        78: athrow\n+        56: iload_1\n+        57: invokedynamic #10,  0             // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+        62: invokespecial #11                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+        65: athrow\n       LineNumberTable:\n         line 60: 0\n         line 61: 9\n         line 63: 36\n         line 65: 47\n         line 67: 49\n         line 69: 52\n@@ -238,29 +235,29 @@\n         10: getfield      #7                  // Field decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n         13: ifnull        55\n         16: aload_0\n         17: getfield      #7                  // Field decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n         20: aload_1\n         21: iload_2\n         22: iload_3\n-        23: invokevirtual #17                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.decode:([BII)I\n+        23: invokevirtual #12                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.decode:([BII)I\n         26: istore        4\n         28: aload_0\n         29: aload_0\n         30: getfield      #7                  // Field decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n-        33: invokevirtual #18                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.getBytesRead:()J\n-        36: putfield      #19                 // Field compressedBytesRead:J\n+        33: invokevirtual #13                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.getBytesRead:()J\n+        36: putfield      #14                 // Field compressedBytesRead:J\n         39: aload_0\n         40: iload         4\n-        42: invokevirtual #20                 // Method count:(I)V\n+        42: invokevirtual #15                 // Method count:(I)V\n         45: iload         4\n         47: iconst_m1\n         48: if_icmpne     55\n         51: aload_0\n-        52: invokespecial #21                 // Method closeDecoder:()V\n+        52: invokespecial #16                 // Method closeDecoder:()V\n         55: iload         4\n         57: ireturn\n       LineNumberTable:\n         line 79: 0\n         line 80: 4\n         line 82: 6\n         line 83: 9\n@@ -284,15 +281,15 @@\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n          1: getfield      #7                  // Field decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n          4: ifnull        17\n          7: aload_0\n          8: getfield      #7                  // Field decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n-        11: invokevirtual #22                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.available:()I\n+        11: invokevirtual #17                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.available:()I\n         14: goto          18\n         17: iconst_0\n         18: ireturn\n       LineNumberTable:\n         line 96: 0\n       StackMapTable: number_of_entries = 2\n         frame_type = 17 /* same */\n@@ -303,32 +300,32 @@\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=1\n          0: aload_0\n-         1: invokespecial #21                 // Method closeDecoder:()V\n+         1: invokespecial #16                 // Method closeDecoder:()V\n          4: aload_0\n          5: getfield      #4                  // Field originalStream:Ljava/io/InputStream;\n          8: ifnull        48\n         11: aload_0\n         12: getfield      #4                  // Field originalStream:Ljava/io/InputStream;\n-        15: invokevirtual #23                 // Method java/io/InputStream.close:()V\n+        15: invokevirtual #18                 // Method java/io/InputStream.close:()V\n         18: aload_0\n         19: aconst_null\n         20: putfield      #4                  // Field originalStream:Ljava/io/InputStream;\n         23: goto          48\n         26: astore_1\n         27: aload_0\n         28: getfield      #4                  // Field originalStream:Ljava/io/InputStream;\n         31: ifnull        46\n         34: aload_0\n         35: getfield      #4                  // Field originalStream:Ljava/io/InputStream;\n-        38: invokevirtual #23                 // Method java/io/InputStream.close:()V\n+        38: invokevirtual #18                 // Method java/io/InputStream.close:()V\n         41: aload_0\n         42: aconst_null\n         43: putfield      #4                  // Field originalStream:Ljava/io/InputStream;\n         46: aload_1\n         47: athrow\n         48: return\n       Exception table:\n@@ -357,30 +354,36 @@\n \n   public long getCompressedCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #19                 // Field compressedBytesRead:J\n+         1: getfield      #14                 // Field compressedBytesRead:J\n          4: lreturn\n       LineNumberTable:\n         line 116: 0\n \n   private void closeDecoder();\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: getfield      #7                  // Field decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n-         4: invokestatic  #24                 // Method org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n+         4: invokestatic  #19                 // Method org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n          7: aload_0\n          8: aconst_null\n          9: putfield      #7                  // Field decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n         12: return\n       LineNumberTable:\n         line 120: 0\n         line 121: 7\n         line 122: 12\n }\n SourceFile: \"Deflate64CompressorInputStream.java\"\n+InnerClasses:\n+  public static final #98= #97 of #101;   // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n+BootstrapMethods:\n+  0: #61 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+    Method arguments:\n+      #62 Invalid return value from read: \\u0001\n"}]}
