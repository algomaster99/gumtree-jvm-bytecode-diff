{"diffoscope-json-version": 1, "source1": "first/MULTIANEWARRAY.class", "source2": "second/MULTIANEWARRAY.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,65 +10,65 @@\n public class MULTIANEWARRAY extends CPInstruction implements LoadClass, AllocationInstruction, ExceptionThrower\n {\n     private short dimensions;\n     \n     MULTIANEWARRAY() {\n     }\n     \n-    public MULTIANEWARRAY(final int index, final short dimensions) {\n-        super((short)197, index);\n-        if (dimensions < 1) {\n-            throw new ClassGenException(\"Invalid dimensions value: \" + dimensions);\n+    public MULTIANEWARRAY(final int n, final short n2) {\n+        super((short)197, n);\n+        if (n2 < 1) {\n+            throw new ClassGenException(\"Invalid dimensions value: \" + n2);\n         }\n-        this.dimensions = dimensions;\n+        this.dimensions = n2;\n         super.setLength(4);\n     }\n     \n-    public void dump(final DataOutputStream out) throws IOException {\n-        out.writeByte(super.getOpcode());\n-        out.writeShort(super.getIndex());\n-        out.writeByte(this.dimensions);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeByte(super.getOpcode());\n+        dataOutputStream.writeShort(super.getIndex());\n+        dataOutputStream.writeByte(this.dimensions);\n     }\n     \n-    protected void initFromFile(final ByteSequence bytes, final boolean wide) throws IOException {\n-        super.initFromFile(bytes, wide);\n-        this.dimensions = bytes.readByte();\n+    protected void initFromFile(final ByteSequence byteSequence, final boolean b) throws IOException {\n+        super.initFromFile(byteSequence, b);\n+        this.dimensions = byteSequence.readByte();\n         super.setLength(4);\n     }\n     \n     public final short getDimensions() {\n         return this.dimensions;\n     }\n     \n-    public String toString(final boolean verbose) {\n-        return super.toString(verbose) + \" \" + super.getIndex() + \" \" + this.dimensions;\n+    public String toString(final boolean b) {\n+        return super.toString(b) + \" \" + super.getIndex() + \" \" + this.dimensions;\n     }\n     \n-    public String toString(final ConstantPool cp) {\n-        return super.toString(cp) + \" \" + this.dimensions;\n+    public String toString(final ConstantPool constantPool) {\n+        return super.toString(constantPool) + \" \" + this.dimensions;\n     }\n     \n-    public int consumeStack(final ConstantPoolGen cpg) {\n+    public int consumeStack(final ConstantPoolGen constantPoolGen) {\n         return this.dimensions;\n     }\n     \n     public Class<?>[] getExceptions() {\n         return ExceptionConst.createExceptions(ExceptionConst.EXCS.EXCS_CLASS_AND_INTERFACE_RESOLUTION, new Class[] { ExceptionConst.ILLEGAL_ACCESS_ERROR, ExceptionConst.NEGATIVE_ARRAY_SIZE_EXCEPTION });\n     }\n     \n-    public ObjectType getLoadClassType(final ConstantPoolGen cpg) {\n-        Type t = this.getType(cpg);\n-        if (t instanceof ArrayType) {\n-            t = ((ArrayType)t).getBasicType();\n+    public ObjectType getLoadClassType(final ConstantPoolGen constantPoolGen) {\n+        Type type = this.getType(constantPoolGen);\n+        if (type instanceof ArrayType) {\n+            type = ((ArrayType)type).getBasicType();\n         }\n-        return (t instanceof ObjectType) ? ((ObjectType)t) : null;\n+        return (type instanceof ObjectType) ? ((ObjectType)type) : null;\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitLoadClass((LoadClass)this);\n-        v.visitAllocationInstruction((AllocationInstruction)this);\n-        v.visitExceptionThrower((ExceptionThrower)this);\n-        v.visitTypedInstruction((TypedInstruction)this);\n-        v.visitCPInstruction((CPInstruction)this);\n-        v.visitMULTIANEWARRAY(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitLoadClass((LoadClass)this);\n+        visitor.visitAllocationInstruction((AllocationInstruction)this);\n+        visitor.visitExceptionThrower((ExceptionThrower)this);\n+        visitor.visitTypedInstruction((TypedInstruction)this);\n+        visitor.visitCPInstruction((CPInstruction)this);\n+        visitor.visitMULTIANEWARRAY(this);\n     }\n }\n"}]}
