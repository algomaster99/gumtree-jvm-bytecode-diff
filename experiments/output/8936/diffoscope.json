{"diffoscope-json-version": 1, "source1": "first/Pack200CompressorInputStream.class", "source2": "second/Pack200CompressorInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -48,45 +48,26 @@\n     public Pack200CompressorInputStream(final File f, final Pack200Strategy mode, final Map<String, String> props) throws IOException {\n         this(null, f, mode, props);\n     }\n     \n     private Pack200CompressorInputStream(final InputStream in, final File f, final Pack200Strategy mode, final Map<String, String> props) throws IOException {\n         this.originalInput = in;\n         this.streamBridge = mode.newStreamBridge();\n-        final JarOutputStream jarOut = new JarOutputStream((OutputStream)this.streamBridge);\n-        Throwable t = null;\n-        try {\n+        try (final JarOutputStream jarOut = new JarOutputStream((OutputStream)this.streamBridge)) {\n             final Pack200.Unpacker u = Pack200.newUnpacker();\n             if (props != null) {\n                 u.properties().putAll(props);\n             }\n             if (f == null) {\n                 u.unpack((InputStream)new Pack200CompressorInputStream.Pack200CompressorInputStream$1(this, in), jarOut);\n             }\n             else {\n                 u.unpack(f, jarOut);\n             }\n         }\n-        catch (final Throwable t2) {\n-            t = t2;\n-            throw t2;\n-        }\n-        finally {\n-            if (t != null) {\n-                try {\n-                    jarOut.close();\n-                }\n-                catch (final Throwable exception) {\n-                    t.addSuppressed(exception);\n-                }\n-            }\n-            else {\n-                jarOut.close();\n-            }\n-        }\n     }\n     \n     public int read() throws IOException {\n         return this.streamBridge.getInput().read();\n     }\n     \n     public int read(final byte[] b) throws IOException {\n"}]}
