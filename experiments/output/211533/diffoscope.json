{"diffoscope-json-version": 1, "source1": "first/IEEE754rUtils.class", "source2": "second/IEEE754rUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -21,83 +21,83 @@\n         float min = array[0];\n         for (int i = 1; i < array.length; ++i) {\n             min = min(array[i], min);\n         }\n         return min;\n     }\n     \n-    public static double min(final double a, final double b, final double c) {\n-        return min(min(a, b), c);\n+    public static double min(final double n, final double n2, final double n3) {\n+        return min(min(n, n2), n3);\n     }\n     \n-    public static double min(final double a, final double b) {\n-        if (Double.isNaN(a)) {\n-            return b;\n+    public static double min(final double n, final double n2) {\n+        if (Double.isNaN(n)) {\n+            return n2;\n         }\n-        if (Double.isNaN(b)) {\n-            return a;\n+        if (Double.isNaN(n2)) {\n+            return n;\n         }\n-        return Math.min(a, b);\n+        return Math.min(n, n2);\n     }\n     \n-    public static float min(final float a, final float b, final float c) {\n-        return min(min(a, b), c);\n+    public static float min(final float n, final float n2, final float n3) {\n+        return min(min(n, n2), n3);\n     }\n     \n-    public static float min(final float a, final float b) {\n-        if (Float.isNaN(a)) {\n-            return b;\n+    public static float min(final float n, final float n2) {\n+        if (Float.isNaN(n)) {\n+            return n2;\n         }\n-        if (Float.isNaN(b)) {\n-            return a;\n+        if (Float.isNaN(n2)) {\n+            return n;\n         }\n-        return Math.min(a, b);\n+        return Math.min(n, n2);\n     }\n     \n     public static double max(final double... array) {\n         Validate.notNull((Object)array, \"array\", new Object[0]);\n         Validate.isTrue(array.length != 0, \"Array cannot be empty.\", new Object[0]);\n         double max = array[0];\n-        for (int j = 1; j < array.length; ++j) {\n-            max = max(array[j], max);\n+        for (int i = 1; i < array.length; ++i) {\n+            max = max(array[i], max);\n         }\n         return max;\n     }\n     \n     public static float max(final float... array) {\n         Validate.notNull((Object)array, \"array\", new Object[0]);\n         Validate.isTrue(array.length != 0, \"Array cannot be empty.\", new Object[0]);\n         float max = array[0];\n-        for (int j = 1; j < array.length; ++j) {\n-            max = max(array[j], max);\n+        for (int i = 1; i < array.length; ++i) {\n+            max = max(array[i], max);\n         }\n         return max;\n     }\n     \n-    public static double max(final double a, final double b, final double c) {\n-        return max(max(a, b), c);\n+    public static double max(final double n, final double n2, final double n3) {\n+        return max(max(n, n2), n3);\n     }\n     \n-    public static double max(final double a, final double b) {\n-        if (Double.isNaN(a)) {\n-            return b;\n+    public static double max(final double n, final double n2) {\n+        if (Double.isNaN(n)) {\n+            return n2;\n         }\n-        if (Double.isNaN(b)) {\n-            return a;\n+        if (Double.isNaN(n2)) {\n+            return n;\n         }\n-        return Math.max(a, b);\n+        return Math.max(n, n2);\n     }\n     \n-    public static float max(final float a, final float b, final float c) {\n-        return max(max(a, b), c);\n+    public static float max(final float n, final float n2, final float n3) {\n+        return max(max(n, n2), n3);\n     }\n     \n-    public static float max(final float a, final float b) {\n-        if (Float.isNaN(a)) {\n-            return b;\n+    public static float max(final float n, final float n2) {\n+        if (Float.isNaN(n)) {\n+            return n2;\n         }\n-        if (Float.isNaN(b)) {\n-            return a;\n+        if (Float.isNaN(n2)) {\n+            return n;\n         }\n-        return Math.max(a, b);\n+        return Math.max(n, n2);\n     }\n }\n"}]}
