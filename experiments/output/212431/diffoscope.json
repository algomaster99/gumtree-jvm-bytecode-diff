{"diffoscope-json-version": 1, "source1": "first/StrSubstitutor.class", "source2": "second/StrSubstitutor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -20,440 +20,438 @@\n     private StrMatcher prefixMatcher;\n     private StrMatcher suffixMatcher;\n     private StrMatcher valueDelimiterMatcher;\n     private StrLookup<?> variableResolver;\n     private boolean enableSubstitutionInVariables;\n     private boolean preserveEscapes;\n     \n-    public static <V> String replace(final Object source, final Map<String, V> valueMap) {\n-        return new StrSubstitutor((Map<String, V>)valueMap).replace(source);\n+    public static <V> String replace(final Object o, final Map<String, V> map) {\n+        return new StrSubstitutor((Map<String, V>)map).replace(o);\n     }\n     \n-    public static <V> String replace(final Object source, final Map<String, V> valueMap, final String prefix, final String suffix) {\n-        return new StrSubstitutor((Map<String, V>)valueMap, prefix, suffix).replace(source);\n+    public static <V> String replace(final Object o, final Map<String, V> map, final String s, final String s2) {\n+        return new StrSubstitutor((Map<String, V>)map, s, s2).replace(o);\n     }\n     \n-    public static String replace(final Object source, final Properties valueProperties) {\n-        if (valueProperties == null) {\n-            return source.toString();\n+    public static String replace(final Object o, final Properties properties) {\n+        if (properties == null) {\n+            return o.toString();\n         }\n-        final Map<String, String> valueMap = new HashMap<String, String>();\n-        final Enumeration<?> propNames = valueProperties.propertyNames();\n-        while (propNames.hasMoreElements()) {\n-            final String propName = (String)propNames.nextElement();\n-            final String propValue = valueProperties.getProperty(propName);\n-            valueMap.put(propName, propValue);\n+        final HashMap hashMap = new HashMap();\n+        final Enumeration<?> propertyNames = properties.propertyNames();\n+        while (propertyNames.hasMoreElements()) {\n+            final String key = (String)propertyNames.nextElement();\n+            hashMap.put(key, properties.getProperty(key));\n         }\n-        return replace(source, valueMap);\n+        return replace(o, (Map<String, Object>)hashMap);\n     }\n     \n-    public static String replaceSystemProperties(final Object source) {\n-        return new StrSubstitutor((StrLookup<?>)StrLookup.systemPropertiesLookup()).replace(source);\n+    public static String replaceSystemProperties(final Object o) {\n+        return new StrSubstitutor((StrLookup<?>)StrLookup.systemPropertiesLookup()).replace(o);\n     }\n     \n     public StrSubstitutor() {\n         this(null, StrSubstitutor.DEFAULT_PREFIX, StrSubstitutor.DEFAULT_SUFFIX, '$');\n     }\n     \n-    public <V> StrSubstitutor(final Map<String, V> valueMap) {\n-        this((StrLookup<?>)StrLookup.mapLookup((Map)valueMap), StrSubstitutor.DEFAULT_PREFIX, StrSubstitutor.DEFAULT_SUFFIX, '$');\n+    public <V> StrSubstitutor(final Map<String, V> map) {\n+        this((StrLookup<?>)StrLookup.mapLookup((Map)map), StrSubstitutor.DEFAULT_PREFIX, StrSubstitutor.DEFAULT_SUFFIX, '$');\n     }\n     \n-    public <V> StrSubstitutor(final Map<String, V> valueMap, final String prefix, final String suffix) {\n-        this((StrLookup<?>)StrLookup.mapLookup((Map)valueMap), prefix, suffix, '$');\n+    public <V> StrSubstitutor(final Map<String, V> map, final String s, final String s2) {\n+        this((StrLookup<?>)StrLookup.mapLookup((Map)map), s, s2, '$');\n     }\n     \n-    public <V> StrSubstitutor(final Map<String, V> valueMap, final String prefix, final String suffix, final char escape) {\n-        this((StrLookup<?>)StrLookup.mapLookup((Map)valueMap), prefix, suffix, escape);\n+    public <V> StrSubstitutor(final Map<String, V> map, final String s, final String s2, final char c) {\n+        this((StrLookup<?>)StrLookup.mapLookup((Map)map), s, s2, c);\n     }\n     \n-    public <V> StrSubstitutor(final Map<String, V> valueMap, final String prefix, final String suffix, final char escape, final String valueDelimiter) {\n-        this((StrLookup<?>)StrLookup.mapLookup((Map)valueMap), prefix, suffix, escape, valueDelimiter);\n+    public <V> StrSubstitutor(final Map<String, V> map, final String s, final String s2, final char c, final String s3) {\n+        this((StrLookup<?>)StrLookup.mapLookup((Map)map), s, s2, c, s3);\n     }\n     \n-    public StrSubstitutor(final StrLookup<?> variableResolver) {\n-        this(variableResolver, StrSubstitutor.DEFAULT_PREFIX, StrSubstitutor.DEFAULT_SUFFIX, '$');\n+    public StrSubstitutor(final StrLookup<?> strLookup) {\n+        this(strLookup, StrSubstitutor.DEFAULT_PREFIX, StrSubstitutor.DEFAULT_SUFFIX, '$');\n     }\n     \n-    public StrSubstitutor(final StrLookup<?> variableResolver, final String prefix, final String suffix, final char escape) {\n+    public StrSubstitutor(final StrLookup<?> variableResolver, final String variablePrefix, final String variableSuffix, final char escapeChar) {\n         this.preserveEscapes = false;\n         this.setVariableResolver(variableResolver);\n-        this.setVariablePrefix(prefix);\n-        this.setVariableSuffix(suffix);\n-        this.setEscapeChar(escape);\n+        this.setVariablePrefix(variablePrefix);\n+        this.setVariableSuffix(variableSuffix);\n+        this.setEscapeChar(escapeChar);\n         this.setValueDelimiterMatcher(StrSubstitutor.DEFAULT_VALUE_DELIMITER);\n     }\n     \n-    public StrSubstitutor(final StrLookup<?> variableResolver, final String prefix, final String suffix, final char escape, final String valueDelimiter) {\n+    public StrSubstitutor(final StrLookup<?> variableResolver, final String variablePrefix, final String variableSuffix, final char escapeChar, final String valueDelimiter) {\n         this.preserveEscapes = false;\n         this.setVariableResolver(variableResolver);\n-        this.setVariablePrefix(prefix);\n-        this.setVariableSuffix(suffix);\n-        this.setEscapeChar(escape);\n+        this.setVariablePrefix(variablePrefix);\n+        this.setVariableSuffix(variableSuffix);\n+        this.setEscapeChar(escapeChar);\n         this.setValueDelimiter(valueDelimiter);\n     }\n     \n-    public StrSubstitutor(final StrLookup<?> variableResolver, final StrMatcher prefixMatcher, final StrMatcher suffixMatcher, final char escape) {\n-        this(variableResolver, prefixMatcher, suffixMatcher, escape, StrSubstitutor.DEFAULT_VALUE_DELIMITER);\n+    public StrSubstitutor(final StrLookup<?> strLookup, final StrMatcher strMatcher, final StrMatcher strMatcher2, final char c) {\n+        this(strLookup, strMatcher, strMatcher2, c, StrSubstitutor.DEFAULT_VALUE_DELIMITER);\n     }\n     \n-    public StrSubstitutor(final StrLookup<?> variableResolver, final StrMatcher prefixMatcher, final StrMatcher suffixMatcher, final char escape, final StrMatcher valueDelimiterMatcher) {\n+    public StrSubstitutor(final StrLookup<?> variableResolver, final StrMatcher variablePrefixMatcher, final StrMatcher variableSuffixMatcher, final char escapeChar, final StrMatcher valueDelimiterMatcher) {\n         this.preserveEscapes = false;\n         this.setVariableResolver(variableResolver);\n-        this.setVariablePrefixMatcher(prefixMatcher);\n-        this.setVariableSuffixMatcher(suffixMatcher);\n-        this.setEscapeChar(escape);\n+        this.setVariablePrefixMatcher(variablePrefixMatcher);\n+        this.setVariableSuffixMatcher(variableSuffixMatcher);\n+        this.setEscapeChar(escapeChar);\n         this.setValueDelimiterMatcher(valueDelimiterMatcher);\n     }\n     \n-    public String replace(final String source) {\n-        if (source == null) {\n+    public String replace(final String s) {\n+        if (s == null) {\n             return null;\n         }\n-        final StrBuilder buf = new StrBuilder(source);\n-        if (!this.substitute(buf, 0, source.length())) {\n-            return source;\n+        final StrBuilder strBuilder = new StrBuilder(s);\n+        if (!this.substitute(strBuilder, 0, s.length())) {\n+            return s;\n         }\n-        return buf.toString();\n+        return strBuilder.toString();\n     }\n     \n-    public String replace(final String source, final int offset, final int length) {\n-        if (source == null) {\n+    public String replace(final String s, final int beginIndex, final int n) {\n+        if (s == null) {\n             return null;\n         }\n-        final StrBuilder buf = new StrBuilder(length).append(source, offset, length);\n-        if (!this.substitute(buf, 0, length)) {\n-            return source.substring(offset, offset + length);\n+        final StrBuilder append = new StrBuilder(n).append(s, beginIndex, n);\n+        if (!this.substitute(append, 0, n)) {\n+            return s.substring(beginIndex, beginIndex + n);\n         }\n-        return buf.toString();\n+        return append.toString();\n     }\n     \n-    public String replace(final char[] source) {\n-        if (source == null) {\n+    public String replace(final char[] array) {\n+        if (array == null) {\n             return null;\n         }\n-        final StrBuilder buf = new StrBuilder(source.length).append(source);\n-        this.substitute(buf, 0, source.length);\n-        return buf.toString();\n+        final StrBuilder append = new StrBuilder(array.length).append(array);\n+        this.substitute(append, 0, array.length);\n+        return append.toString();\n     }\n     \n-    public String replace(final char[] source, final int offset, final int length) {\n-        if (source == null) {\n+    public String replace(final char[] array, final int n, final int n2) {\n+        if (array == null) {\n             return null;\n         }\n-        final StrBuilder buf = new StrBuilder(length).append(source, offset, length);\n-        this.substitute(buf, 0, length);\n-        return buf.toString();\n+        final StrBuilder append = new StrBuilder(n2).append(array, n, n2);\n+        this.substitute(append, 0, n2);\n+        return append.toString();\n     }\n     \n-    public String replace(final StringBuffer source) {\n-        if (source == null) {\n+    public String replace(final StringBuffer sb) {\n+        if (sb == null) {\n             return null;\n         }\n-        final StrBuilder buf = new StrBuilder(source.length()).append(source);\n-        this.substitute(buf, 0, buf.length());\n-        return buf.toString();\n+        final StrBuilder append = new StrBuilder(sb.length()).append(sb);\n+        this.substitute(append, 0, append.length());\n+        return append.toString();\n     }\n     \n-    public String replace(final StringBuffer source, final int offset, final int length) {\n-        if (source == null) {\n+    public String replace(final StringBuffer sb, final int n, final int n2) {\n+        if (sb == null) {\n             return null;\n         }\n-        final StrBuilder buf = new StrBuilder(length).append(source, offset, length);\n-        this.substitute(buf, 0, length);\n-        return buf.toString();\n+        final StrBuilder append = new StrBuilder(n2).append(sb, n, n2);\n+        this.substitute(append, 0, n2);\n+        return append.toString();\n     }\n     \n-    public String replace(final CharSequence source) {\n-        if (source == null) {\n+    public String replace(final CharSequence charSequence) {\n+        if (charSequence == null) {\n             return null;\n         }\n-        return this.replace(source, 0, source.length());\n+        return this.replace(charSequence, 0, charSequence.length());\n     }\n     \n-    public String replace(final CharSequence source, final int offset, final int length) {\n-        if (source == null) {\n+    public String replace(final CharSequence charSequence, final int n, final int n2) {\n+        if (charSequence == null) {\n             return null;\n         }\n-        final StrBuilder buf = new StrBuilder(length).append(source, offset, length);\n-        this.substitute(buf, 0, length);\n-        return buf.toString();\n+        final StrBuilder append = new StrBuilder(n2).append(charSequence, n, n2);\n+        this.substitute(append, 0, n2);\n+        return append.toString();\n     }\n     \n-    public String replace(final StrBuilder source) {\n-        if (source == null) {\n+    public String replace(final StrBuilder strBuilder) {\n+        if (strBuilder == null) {\n             return null;\n         }\n-        final StrBuilder buf = new StrBuilder(source.length()).append(source);\n-        this.substitute(buf, 0, buf.length());\n-        return buf.toString();\n+        final StrBuilder append = new StrBuilder(strBuilder.length()).append(strBuilder);\n+        this.substitute(append, 0, append.length());\n+        return append.toString();\n     }\n     \n-    public String replace(final StrBuilder source, final int offset, final int length) {\n-        if (source == null) {\n+    public String replace(final StrBuilder strBuilder, final int n, final int n2) {\n+        if (strBuilder == null) {\n             return null;\n         }\n-        final StrBuilder buf = new StrBuilder(length).append(source, offset, length);\n-        this.substitute(buf, 0, length);\n-        return buf.toString();\n+        final StrBuilder append = new StrBuilder(n2).append(strBuilder, n, n2);\n+        this.substitute(append, 0, n2);\n+        return append.toString();\n     }\n     \n-    public String replace(final Object source) {\n-        if (source == null) {\n+    public String replace(final Object o) {\n+        if (o == null) {\n             return null;\n         }\n-        final StrBuilder buf = new StrBuilder().append(source);\n-        this.substitute(buf, 0, buf.length());\n-        return buf.toString();\n+        final StrBuilder append = new StrBuilder().append(o);\n+        this.substitute(append, 0, append.length());\n+        return append.toString();\n     }\n     \n-    public boolean replaceIn(final StringBuffer source) {\n-        return source != null && this.replaceIn(source, 0, source.length());\n+    public boolean replaceIn(final StringBuffer sb) {\n+        return sb != null && this.replaceIn(sb, 0, sb.length());\n     }\n     \n-    public boolean replaceIn(final StringBuffer source, final int offset, final int length) {\n-        if (source == null) {\n+    public boolean replaceIn(final StringBuffer sb, final int start, final int n) {\n+        if (sb == null) {\n             return false;\n         }\n-        final StrBuilder buf = new StrBuilder(length).append(source, offset, length);\n-        if (!this.substitute(buf, 0, length)) {\n+        final StrBuilder append = new StrBuilder(n).append(sb, start, n);\n+        if (!this.substitute(append, 0, n)) {\n             return false;\n         }\n-        source.replace(offset, offset + length, buf.toString());\n+        sb.replace(start, start + n, append.toString());\n         return true;\n     }\n     \n-    public boolean replaceIn(final StringBuilder source) {\n-        return source != null && this.replaceIn(source, 0, source.length());\n+    public boolean replaceIn(final StringBuilder sb) {\n+        return sb != null && this.replaceIn(sb, 0, sb.length());\n     }\n     \n-    public boolean replaceIn(final StringBuilder source, final int offset, final int length) {\n-        if (source == null) {\n+    public boolean replaceIn(final StringBuilder sb, final int start, final int n) {\n+        if (sb == null) {\n             return false;\n         }\n-        final StrBuilder buf = new StrBuilder(length).append(source, offset, length);\n-        if (!this.substitute(buf, 0, length)) {\n+        final StrBuilder append = new StrBuilder(n).append(sb, start, n);\n+        if (!this.substitute(append, 0, n)) {\n             return false;\n         }\n-        source.replace(offset, offset + length, buf.toString());\n+        sb.replace(start, start + n, append.toString());\n         return true;\n     }\n     \n-    public boolean replaceIn(final StrBuilder source) {\n-        return source != null && this.substitute(source, 0, source.length());\n+    public boolean replaceIn(final StrBuilder strBuilder) {\n+        return strBuilder != null && this.substitute(strBuilder, 0, strBuilder.length());\n     }\n     \n-    public boolean replaceIn(final StrBuilder source, final int offset, final int length) {\n-        return source != null && this.substitute(source, offset, length);\n+    public boolean replaceIn(final StrBuilder strBuilder, final int n, final int n2) {\n+        return strBuilder != null && this.substitute(strBuilder, n, n2);\n     }\n     \n-    protected boolean substitute(final StrBuilder buf, final int offset, final int length) {\n-        return this.substitute(buf, offset, length, null) > 0;\n-    }\n-    \n-    private int substitute(final StrBuilder buf, final int offset, final int length, List<String> priorVariables) {\n-        final StrMatcher pfxMatcher = this.getVariablePrefixMatcher();\n-        final StrMatcher suffMatcher = this.getVariableSuffixMatcher();\n-        final char escape = this.getEscapeChar();\n-        final StrMatcher valueDelimMatcher = this.getValueDelimiterMatcher();\n-        final boolean substitutionInVariablesEnabled = this.isEnableSubstitutionInVariables();\n-        final boolean top = priorVariables == null;\n-        boolean altered = false;\n-        int lengthChange = 0;\n-        char[] chars = buf.buffer;\n-        int bufEnd = offset + length;\n-        int pos = offset;\n-        while (pos < bufEnd) {\n-            final int startMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd);\n-            if (startMatchLen == 0) {\n-                ++pos;\n+    protected boolean substitute(final StrBuilder strBuilder, final int n, final int n2) {\n+        return this.substitute(strBuilder, n, n2, null) > 0;\n+    }\n+    \n+    private int substitute(final StrBuilder strBuilder, final int offset, final int count, List<String> list) {\n+        final StrMatcher variablePrefixMatcher = this.getVariablePrefixMatcher();\n+        final StrMatcher variableSuffixMatcher = this.getVariableSuffixMatcher();\n+        final char escapeChar = this.getEscapeChar();\n+        final StrMatcher valueDelimiterMatcher = this.getValueDelimiterMatcher();\n+        final boolean enableSubstitutionInVariables = this.isEnableSubstitutionInVariables();\n+        final boolean b = list == null;\n+        int n = 0;\n+        int n2 = 0;\n+        char[] array = strBuilder.buffer;\n+        int n3 = offset + count;\n+        int i = offset;\n+        while (i < n3) {\n+            final int match = variablePrefixMatcher.isMatch(array, i, offset, n3);\n+            if (match == 0) {\n+                ++i;\n             }\n-            else if (pos > offset && chars[pos - 1] == escape) {\n+            else if (i > offset && array[i - 1] == escapeChar) {\n                 if (this.preserveEscapes) {\n-                    ++pos;\n+                    ++i;\n                 }\n                 else {\n-                    buf.deleteCharAt(pos - 1);\n-                    chars = buf.buffer;\n-                    --lengthChange;\n-                    altered = true;\n-                    --bufEnd;\n+                    strBuilder.deleteCharAt(i - 1);\n+                    array = strBuilder.buffer;\n+                    --n2;\n+                    n = 1;\n+                    --n3;\n                 }\n             }\n             else {\n-                final int startPos = pos;\n-                pos += startMatchLen;\n-                int endMatchLen = 0;\n-                int nestedVarCount = 0;\n-                while (pos < bufEnd) {\n-                    if (substitutionInVariablesEnabled && (endMatchLen = pfxMatcher.isMatch(chars, pos, offset, bufEnd)) != 0) {\n-                        ++nestedVarCount;\n-                        pos += endMatchLen;\n+                final int n4 = i;\n+                i += match;\n+                int n5 = 0;\n+                while (i < n3) {\n+                    final int match2;\n+                    if (enableSubstitutionInVariables && (match2 = variablePrefixMatcher.isMatch(array, i, offset, n3)) != 0) {\n+                        ++n5;\n+                        i += match2;\n                     }\n                     else {\n-                        endMatchLen = suffMatcher.isMatch(chars, pos, offset, bufEnd);\n-                        if (endMatchLen == 0) {\n-                            ++pos;\n+                        final int match3 = variableSuffixMatcher.isMatch(array, i, offset, n3);\n+                        if (match3 == 0) {\n+                            ++i;\n                         }\n                         else {\n-                            if (nestedVarCount == 0) {\n-                                String varNameExpr = new String(chars, startPos + startMatchLen, pos - startPos - startMatchLen);\n-                                if (substitutionInVariablesEnabled) {\n-                                    final StrBuilder bufName = new StrBuilder(varNameExpr);\n-                                    this.substitute(bufName, 0, bufName.length());\n-                                    varNameExpr = bufName.toString();\n+                            if (n5 == 0) {\n+                                String string = new String(array, n4 + match, i - n4 - match);\n+                                if (enableSubstitutionInVariables) {\n+                                    final StrBuilder strBuilder2 = new StrBuilder(string);\n+                                    this.substitute(strBuilder2, 0, strBuilder2.length());\n+                                    string = strBuilder2.toString();\n                                 }\n-                                final int endPos;\n-                                pos = (endPos = pos + endMatchLen);\n-                                String varName = varNameExpr;\n-                                String varDefaultValue = null;\n-                                if (valueDelimMatcher != null) {\n-                                    final char[] varNameExprChars = varNameExpr.toCharArray();\n-                                    int valueDelimiterMatchLen = 0;\n-                                    for (int i = 0; i < varNameExprChars.length; ++i) {\n-                                        if (!substitutionInVariablesEnabled && pfxMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length) != 0) {\n+                                final int n6;\n+                                i = (n6 = i + match3);\n+                                String substring = string;\n+                                String substring2 = null;\n+                                if (valueDelimiterMatcher != null) {\n+                                    final char[] charArray = string.toCharArray();\n+                                    for (int j = 0; j < charArray.length; ++j) {\n+                                        if (!enableSubstitutionInVariables && variablePrefixMatcher.isMatch(charArray, j, j, charArray.length) != 0) {\n                                             break;\n                                         }\n-                                        if ((valueDelimiterMatchLen = valueDelimMatcher.isMatch(varNameExprChars, i)) != 0) {\n-                                            varName = varNameExpr.substring(0, i);\n-                                            varDefaultValue = varNameExpr.substring(i + valueDelimiterMatchLen);\n+                                        final int match4;\n+                                        if ((match4 = valueDelimiterMatcher.isMatch(charArray, j)) != 0) {\n+                                            substring = string.substring(0, j);\n+                                            substring2 = string.substring(j + match4);\n                                             break;\n                                         }\n                                     }\n                                 }\n-                                if (priorVariables == null) {\n-                                    priorVariables = new ArrayList<String>();\n-                                    priorVariables.add(new String(chars, offset, length));\n+                                if (list == null) {\n+                                    list = new ArrayList<String>();\n+                                    list.add(new String(array, offset, count));\n                                 }\n-                                this.checkCyclicSubstitution(varName, priorVariables);\n-                                priorVariables.add(varName);\n-                                String varValue = this.resolveVariable(varName, buf, startPos, endPos);\n-                                if (varValue == null) {\n-                                    varValue = varDefaultValue;\n+                                this.checkCyclicSubstitution(substring, list);\n+                                list.add(substring);\n+                                String resolveVariable = this.resolveVariable(substring, strBuilder, n4, n6);\n+                                if (resolveVariable == null) {\n+                                    resolveVariable = substring2;\n                                 }\n-                                if (varValue != null) {\n-                                    final int varLen = varValue.length();\n-                                    buf.replace(startPos, endPos, varValue);\n-                                    altered = true;\n-                                    int change = this.substitute(buf, startPos, varLen, priorVariables);\n-                                    change = change + varLen - (endPos - startPos);\n-                                    pos += change;\n-                                    bufEnd += change;\n-                                    lengthChange += change;\n-                                    chars = buf.buffer;\n+                                if (resolveVariable != null) {\n+                                    final int length = resolveVariable.length();\n+                                    strBuilder.replace(n4, n6, resolveVariable);\n+                                    n = 1;\n+                                    final int n7 = this.substitute(strBuilder, n4, length, list) + length - (n6 - n4);\n+                                    i += n7;\n+                                    n3 += n7;\n+                                    n2 += n7;\n+                                    array = strBuilder.buffer;\n                                 }\n-                                priorVariables.remove(priorVariables.size() - 1);\n+                                list.remove(list.size() - 1);\n                                 break;\n                             }\n-                            --nestedVarCount;\n-                            pos += endMatchLen;\n+                            --n5;\n+                            i += match3;\n                         }\n                     }\n                 }\n             }\n         }\n-        if (top) {\n-            return altered ? 1 : 0;\n+        if (b) {\n+            return n;\n         }\n-        return lengthChange;\n+        return n2;\n     }\n     \n-    private void checkCyclicSubstitution(final String varName, final List<String> priorVariables) {\n-        if (!priorVariables.contains(varName)) {\n+    private void checkCyclicSubstitution(final String s, final List<String> list) {\n+        if (!list.contains(s)) {\n             return;\n         }\n-        final StrBuilder buf = new StrBuilder(256);\n-        buf.append(\"Infinite loop in property interpolation of \");\n-        buf.append((String)priorVariables.remove(0));\n-        buf.append(\": \");\n-        buf.appendWithSeparators((Iterable)priorVariables, \"->\");\n-        throw new IllegalStateException(buf.toString());\n+        final StrBuilder strBuilder = new StrBuilder(256);\n+        strBuilder.append(\"Infinite loop in property interpolation of \");\n+        strBuilder.append((String)list.remove(0));\n+        strBuilder.append(\": \");\n+        strBuilder.appendWithSeparators((Iterable)list, \"->\");\n+        throw new IllegalStateException(strBuilder.toString());\n     }\n     \n-    protected String resolveVariable(final String variableName, final StrBuilder buf, final int startPos, final int endPos) {\n-        final StrLookup<?> resolver = this.getVariableResolver();\n-        if (resolver == null) {\n+    protected String resolveVariable(final String s, final StrBuilder strBuilder, final int n, final int n2) {\n+        final StrLookup<?> variableResolver = this.getVariableResolver();\n+        if (variableResolver == null) {\n             return null;\n         }\n-        return resolver.lookup(variableName);\n+        return variableResolver.lookup(s);\n     }\n     \n     public char getEscapeChar() {\n         return this.escapeChar;\n     }\n     \n-    public void setEscapeChar(final char escapeCharacter) {\n-        this.escapeChar = escapeCharacter;\n+    public void setEscapeChar(final char escapeChar) {\n+        this.escapeChar = escapeChar;\n     }\n     \n     public StrMatcher getVariablePrefixMatcher() {\n         return this.prefixMatcher;\n     }\n     \n     public StrSubstitutor setVariablePrefixMatcher(final StrMatcher prefixMatcher) {\n         if (prefixMatcher == null) {\n             throw new IllegalArgumentException(\"Variable prefix matcher must not be null!\");\n         }\n         this.prefixMatcher = prefixMatcher;\n         return this;\n     }\n     \n-    public StrSubstitutor setVariablePrefix(final char prefix) {\n-        return this.setVariablePrefixMatcher(StrMatcher.charMatcher(prefix));\n+    public StrSubstitutor setVariablePrefix(final char c) {\n+        return this.setVariablePrefixMatcher(StrMatcher.charMatcher(c));\n     }\n     \n-    public StrSubstitutor setVariablePrefix(final String prefix) {\n-        if (prefix == null) {\n+    public StrSubstitutor setVariablePrefix(final String s) {\n+        if (s == null) {\n             throw new IllegalArgumentException(\"Variable prefix must not be null!\");\n         }\n-        return this.setVariablePrefixMatcher(StrMatcher.stringMatcher(prefix));\n+        return this.setVariablePrefixMatcher(StrMatcher.stringMatcher(s));\n     }\n     \n     public StrMatcher getVariableSuffixMatcher() {\n         return this.suffixMatcher;\n     }\n     \n     public StrSubstitutor setVariableSuffixMatcher(final StrMatcher suffixMatcher) {\n         if (suffixMatcher == null) {\n             throw new IllegalArgumentException(\"Variable suffix matcher must not be null!\");\n         }\n         this.suffixMatcher = suffixMatcher;\n         return this;\n     }\n     \n-    public StrSubstitutor setVariableSuffix(final char suffix) {\n-        return this.setVariableSuffixMatcher(StrMatcher.charMatcher(suffix));\n+    public StrSubstitutor setVariableSuffix(final char c) {\n+        return this.setVariableSuffixMatcher(StrMatcher.charMatcher(c));\n     }\n     \n-    public StrSubstitutor setVariableSuffix(final String suffix) {\n-        if (suffix == null) {\n+    public StrSubstitutor setVariableSuffix(final String s) {\n+        if (s == null) {\n             throw new IllegalArgumentException(\"Variable suffix must not be null!\");\n         }\n-        return this.setVariableSuffixMatcher(StrMatcher.stringMatcher(suffix));\n+        return this.setVariableSuffixMatcher(StrMatcher.stringMatcher(s));\n     }\n     \n     public StrMatcher getValueDelimiterMatcher() {\n         return this.valueDelimiterMatcher;\n     }\n     \n     public StrSubstitutor setValueDelimiterMatcher(final StrMatcher valueDelimiterMatcher) {\n         this.valueDelimiterMatcher = valueDelimiterMatcher;\n         return this;\n     }\n     \n-    public StrSubstitutor setValueDelimiter(final char valueDelimiter) {\n-        return this.setValueDelimiterMatcher(StrMatcher.charMatcher(valueDelimiter));\n+    public StrSubstitutor setValueDelimiter(final char c) {\n+        return this.setValueDelimiterMatcher(StrMatcher.charMatcher(c));\n     }\n     \n-    public StrSubstitutor setValueDelimiter(final String valueDelimiter) {\n-        if (StringUtils.isEmpty((CharSequence)valueDelimiter)) {\n+    public StrSubstitutor setValueDelimiter(final String s) {\n+        if (StringUtils.isEmpty((CharSequence)s)) {\n             this.setValueDelimiterMatcher(null);\n             return this;\n         }\n-        return this.setValueDelimiterMatcher(StrMatcher.stringMatcher(valueDelimiter));\n+        return this.setValueDelimiterMatcher(StrMatcher.stringMatcher(s));\n     }\n     \n     public StrLookup<?> getVariableResolver() {\n         return this.variableResolver;\n     }\n     \n     public void setVariableResolver(final StrLookup<?> variableResolver) {\n"}]}
