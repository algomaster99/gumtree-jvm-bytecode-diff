{"diffoscope-json-version": 1, "source1": "first/BoundedArchiveInputStream.class", "source2": "second/BoundedArchiveInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,118 +1,116 @@\n-  SHA-256 checksum 1d59c3650c7430a2bcfd5ce643f0e57e7586488ecdb817a47cc7c5ef23d9ac09\n+  SHA-256 checksum 39b1342676893e23bbf3fcaa881650c521939dd39b7f2d4192659123a54685f9\n   Compiled from \"BoundedArchiveInputStream.java\"\n public abstract class org.apache.commons.compress.utils.BoundedArchiveInputStream extends java.io.InputStream\n   minor version: 0\n   major version: 52\n   flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT\n-  this_class: #23                         // org/apache/commons/compress/utils/BoundedArchiveInputStream\n-  super_class: #24                        // java/io/InputStream\n+  this_class: #1                          // org/apache/commons/compress/utils/BoundedArchiveInputStream\n+  super_class: #3                         // java/io/InputStream\n   interfaces: 0, fields: 3, methods: 4, attributes: 1\n Constant pool:\n-    #1 = Methodref          #24.#58       // java/io/InputStream.\"<init>\":()V\n-    #2 = Fieldref           #23.#59       // org/apache/commons/compress/utils/BoundedArchiveInputStream.end:J\n-    #3 = Class              #60           // java/lang/IllegalArgumentException\n-    #4 = Class              #61           // java/lang/StringBuilder\n-    #5 = Methodref          #4.#58        // java/lang/StringBuilder.\"<init>\":()V\n-    #6 = String             #62           // Invalid length of stream at offset=\n-    #7 = Methodref          #4.#63        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-    #8 = Methodref          #4.#64        // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-    #9 = String             #65           // , length=\n-   #10 = Methodref          #4.#66        // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #11 = Methodref          #3.#67        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #12 = Fieldref           #23.#68       // org/apache/commons/compress/utils/BoundedArchiveInputStream.loc:J\n-   #13 = Fieldref           #23.#69       // org/apache/commons/compress/utils/BoundedArchiveInputStream.singleByteBuffer:Ljava/nio/ByteBuffer;\n-   #14 = Methodref          #70.#71       // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-   #15 = Methodref          #70.#72       // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n-   #16 = Methodref          #23.#73       // org/apache/commons/compress/utils/BoundedArchiveInputStream.read:(JLjava/nio/ByteBuffer;)I\n-   #17 = Methodref          #70.#74       // java/nio/ByteBuffer.get:()B\n-   #18 = Methodref          #75.#76       // java/lang/Math.min:(JJ)J\n-   #19 = Class              #77           // java/lang/IndexOutOfBoundsException\n-   #20 = String             #78           // offset or len are out of bounds\n-   #21 = Methodref          #19.#67       // java/lang/IndexOutOfBoundsException.\"<init>\":(Ljava/lang/String;)V\n-   #22 = Methodref          #70.#79       // java/nio/ByteBuffer.wrap:([BII)Ljava/nio/ByteBuffer;\n-   #23 = Class              #80           // org/apache/commons/compress/utils/BoundedArchiveInputStream\n-   #24 = Class              #81           // java/io/InputStream\n-   #25 = Utf8               end\n-   #26 = Utf8               J\n-   #27 = Utf8               singleByteBuffer\n-   #28 = Utf8               Ljava/nio/ByteBuffer;\n-   #29 = Utf8               loc\n-   #30 = Utf8               <init>\n-   #31 = Utf8               (JJ)V\n-   #32 = Utf8               Code\n-   #33 = Utf8               LineNumberTable\n-   #34 = Utf8               LocalVariableTable\n-   #35 = Utf8               this\n-   #36 = Utf8               Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n-   #37 = Utf8               start\n-   #38 = Utf8               remaining\n-   #39 = Utf8               StackMapTable\n-   #40 = Class              #80           // org/apache/commons/compress/utils/BoundedArchiveInputStream\n-   #41 = Utf8               read\n-   #42 = Utf8               ()I\n-   #43 = Utf8               I\n-   #44 = Utf8               Exceptions\n-   #45 = Class              #82           // java/io/IOException\n-   #46 = Utf8               ([BII)I\n-   #47 = Utf8               b\n-   #48 = Utf8               [B\n-   #49 = Utf8               off\n-   #50 = Utf8               len\n-   #51 = Utf8               maxLen\n-   #52 = Utf8               buf\n-   #53 = Utf8               ret\n-   #54 = Class              #83           // java/nio/ByteBuffer\n-   #55 = Utf8               (JLjava/nio/ByteBuffer;)I\n-   #56 = Utf8               SourceFile\n-   #57 = Utf8               BoundedArchiveInputStream.java\n-   #58 = NameAndType        #30:#84       // \"<init>\":()V\n-   #59 = NameAndType        #25:#26       // end:J\n-   #60 = Utf8               java/lang/IllegalArgumentException\n-   #61 = Utf8               java/lang/StringBuilder\n-   #62 = Utf8               Invalid length of stream at offset=\n-   #63 = NameAndType        #85:#86       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #64 = NameAndType        #85:#87       // append:(J)Ljava/lang/StringBuilder;\n-   #65 = Utf8               , length=\n-   #66 = NameAndType        #88:#89       // toString:()Ljava/lang/String;\n-   #67 = NameAndType        #30:#90       // \"<init>\":(Ljava/lang/String;)V\n-   #68 = NameAndType        #29:#26       // loc:J\n-   #69 = NameAndType        #27:#28       // singleByteBuffer:Ljava/nio/ByteBuffer;\n-   #70 = Class              #83           // java/nio/ByteBuffer\n-   #71 = NameAndType        #91:#92       // allocate:(I)Ljava/nio/ByteBuffer;\n-   #72 = NameAndType        #93:#94       // rewind:()Ljava/nio/Buffer;\n-   #73 = NameAndType        #41:#55       // read:(JLjava/nio/ByteBuffer;)I\n-   #74 = NameAndType        #95:#96       // get:()B\n-   #75 = Class              #97           // java/lang/Math\n-   #76 = NameAndType        #98:#99       // min:(JJ)J\n-   #77 = Utf8               java/lang/IndexOutOfBoundsException\n-   #78 = Utf8               offset or len are out of bounds\n-   #79 = NameAndType        #100:#101     // wrap:([BII)Ljava/nio/ByteBuffer;\n-   #80 = Utf8               org/apache/commons/compress/utils/BoundedArchiveInputStream\n-   #81 = Utf8               java/io/InputStream\n-   #82 = Utf8               java/io/IOException\n-   #83 = Utf8               java/nio/ByteBuffer\n-   #84 = Utf8               ()V\n-   #85 = Utf8               append\n-   #86 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #87 = Utf8               (J)Ljava/lang/StringBuilder;\n-   #88 = Utf8               toString\n-   #89 = Utf8               ()Ljava/lang/String;\n-   #90 = Utf8               (Ljava/lang/String;)V\n-   #91 = Utf8               allocate\n-   #92 = Utf8               (I)Ljava/nio/ByteBuffer;\n-   #93 = Utf8               rewind\n-   #94 = Utf8               ()Ljava/nio/Buffer;\n-   #95 = Utf8               get\n-   #96 = Utf8               ()B\n-   #97 = Utf8               java/lang/Math\n-   #98 = Utf8               min\n-   #99 = Utf8               (JJ)J\n-  #100 = Utf8               wrap\n-  #101 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n+    #1 = Class              #2            // org/apache/commons/compress/utils/BoundedArchiveInputStream\n+    #2 = Utf8               org/apache/commons/compress/utils/BoundedArchiveInputStream\n+    #3 = Class              #4            // java/io/InputStream\n+    #4 = Utf8               java/io/InputStream\n+    #5 = Utf8               end\n+    #6 = Utf8               J\n+    #7 = Utf8               singleByteBuffer\n+    #8 = Utf8               Ljava/nio/ByteBuffer;\n+    #9 = Utf8               loc\n+   #10 = Utf8               <init>\n+   #11 = Utf8               (JJ)V\n+   #12 = Utf8               Code\n+   #13 = Methodref          #3.#14        // java/io/InputStream.\"<init>\":()V\n+   #14 = NameAndType        #10:#15       // \"<init>\":()V\n+   #15 = Utf8               ()V\n+   #16 = Fieldref           #1.#17        // org/apache/commons/compress/utils/BoundedArchiveInputStream.end:J\n+   #17 = NameAndType        #5:#6         // end:J\n+   #18 = Class              #19           // java/lang/IllegalArgumentException\n+   #19 = Utf8               java/lang/IllegalArgumentException\n+   #20 = Class              #21           // java/lang/StringBuilder\n+   #21 = Utf8               java/lang/StringBuilder\n+   #22 = String             #23           // Invalid length of stream at offset=\n+   #23 = Utf8               Invalid length of stream at offset=\n+   #24 = Methodref          #20.#25       // java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+   #25 = NameAndType        #10:#26       // \"<init>\":(Ljava/lang/String;)V\n+   #26 = Utf8               (Ljava/lang/String;)V\n+   #27 = Methodref          #20.#28       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+   #28 = NameAndType        #29:#30       // append:(J)Ljava/lang/StringBuilder;\n+   #29 = Utf8               append\n+   #30 = Utf8               (J)Ljava/lang/StringBuilder;\n+   #31 = String             #32           // , length=\n+   #32 = Utf8               , length=\n+   #33 = Methodref          #20.#34       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #34 = NameAndType        #29:#35       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #35 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #36 = Methodref          #20.#37       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #37 = NameAndType        #38:#39       // toString:()Ljava/lang/String;\n+   #38 = Utf8               toString\n+   #39 = Utf8               ()Ljava/lang/String;\n+   #40 = Methodref          #18.#25       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #41 = Fieldref           #1.#42        // org/apache/commons/compress/utils/BoundedArchiveInputStream.loc:J\n+   #42 = NameAndType        #9:#6         // loc:J\n+   #43 = Utf8               LineNumberTable\n+   #44 = Utf8               LocalVariableTable\n+   #45 = Utf8               this\n+   #46 = Utf8               Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n+   #47 = Utf8               start\n+   #48 = Utf8               remaining\n+   #49 = Utf8               StackMapTable\n+   #50 = Utf8               read\n+   #51 = Utf8               ()I\n+   #52 = Utf8               Exceptions\n+   #53 = Class              #54           // java/io/IOException\n+   #54 = Utf8               java/io/IOException\n+   #55 = Fieldref           #1.#56        // org/apache/commons/compress/utils/BoundedArchiveInputStream.singleByteBuffer:Ljava/nio/ByteBuffer;\n+   #56 = NameAndType        #7:#8         // singleByteBuffer:Ljava/nio/ByteBuffer;\n+   #57 = Methodref          #58.#60       // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+   #58 = Class              #59           // java/nio/ByteBuffer\n+   #59 = Utf8               java/nio/ByteBuffer\n+   #60 = NameAndType        #61:#62       // allocate:(I)Ljava/nio/ByteBuffer;\n+   #61 = Utf8               allocate\n+   #62 = Utf8               (I)Ljava/nio/ByteBuffer;\n+   #63 = Methodref          #58.#64       // java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+   #64 = NameAndType        #65:#66       // rewind:()Ljava/nio/ByteBuffer;\n+   #65 = Utf8               rewind\n+   #66 = Utf8               ()Ljava/nio/ByteBuffer;\n+   #67 = Methodref          #1.#68        // org/apache/commons/compress/utils/BoundedArchiveInputStream.read:(JLjava/nio/ByteBuffer;)I\n+   #68 = NameAndType        #50:#69       // read:(JLjava/nio/ByteBuffer;)I\n+   #69 = Utf8               (JLjava/nio/ByteBuffer;)I\n+   #70 = Methodref          #58.#71       // java/nio/ByteBuffer.get:()B\n+   #71 = NameAndType        #72:#73       // get:()B\n+   #72 = Utf8               get\n+   #73 = Utf8               ()B\n+   #74 = Utf8               I\n+   #75 = Utf8               ([BII)I\n+   #76 = Methodref          #77.#79       // java/lang/Math.min:(JJ)J\n+   #77 = Class              #78           // java/lang/Math\n+   #78 = Utf8               java/lang/Math\n+   #79 = NameAndType        #80:#81       // min:(JJ)J\n+   #80 = Utf8               min\n+   #81 = Utf8               (JJ)J\n+   #82 = Class              #83           // java/lang/IndexOutOfBoundsException\n+   #83 = Utf8               java/lang/IndexOutOfBoundsException\n+   #84 = String             #85           // offset or len are out of bounds\n+   #85 = Utf8               offset or len are out of bounds\n+   #86 = Methodref          #82.#25       // java/lang/IndexOutOfBoundsException.\"<init>\":(Ljava/lang/String;)V\n+   #87 = Methodref          #58.#88       // java/nio/ByteBuffer.wrap:([BII)Ljava/nio/ByteBuffer;\n+   #88 = NameAndType        #89:#90       // wrap:([BII)Ljava/nio/ByteBuffer;\n+   #89 = Utf8               wrap\n+   #90 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n+   #91 = Utf8               b\n+   #92 = Utf8               [B\n+   #93 = Utf8               off\n+   #94 = Utf8               len\n+   #95 = Utf8               maxLen\n+   #96 = Utf8               buf\n+   #97 = Utf8               ret\n+   #98 = Utf8               SourceFile\n+   #99 = Utf8               BoundedArchiveInputStream.java\n {\n   private final long end;\n     descriptor: J\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private java.nio.ByteBuffer singleByteBuffer;\n     descriptor: Ljava/nio/ByteBuffer;\n@@ -124,117 +122,119 @@\n \n   public org.apache.commons.compress.utils.BoundedArchiveInputStream(long, long);\n     descriptor: (JJ)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=5, args_size=3\n          0: aload_0\n-         1: invokespecial #1                  // Method java/io/InputStream.\"<init>\":()V\n+         1: invokespecial #13                 // Method java/io/InputStream.\"<init>\":()V\n          4: aload_0\n          5: lload_1\n          6: lload_3\n          7: ladd\n-         8: putfield      #2                  // Field end:J\n+         8: putfield      #16                 // Field end:J\n         11: aload_0\n-        12: getfield      #2                  // Field end:J\n+        12: getfield      #16                 // Field end:J\n         15: lload_1\n         16: lcmp\n-        17: ifge          56\n-        20: new           #3                  // class java/lang/IllegalArgumentException\n+        17: ifge          53\n+        20: new           #18                 // class java/lang/IllegalArgumentException\n         23: dup\n-        24: new           #4                  // class java/lang/StringBuilder\n+        24: new           #20                 // class java/lang/StringBuilder\n         27: dup\n-        28: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        31: ldc           #6                  // String Invalid length of stream at offset=\n-        33: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        36: lload_1\n-        37: invokevirtual #8                  // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-        40: ldc           #9                  // String , length=\n-        42: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        45: lload_3\n-        46: invokevirtual #8                  // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-        49: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        52: invokespecial #11                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-        55: athrow\n-        56: aload_0\n-        57: lload_1\n-        58: putfield      #12                 // Field loc:J\n-        61: return\n+        28: ldc           #22                 // String Invalid length of stream at offset=\n+        30: invokespecial #24                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+        33: lload_1\n+        34: invokevirtual #27                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+        37: ldc           #31                 // String , length=\n+        39: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        42: lload_3\n+        43: invokevirtual #27                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+        46: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        49: invokespecial #40                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        52: athrow\n+        53: aload_0\n+        54: lload_1\n+        55: putfield      #41                 // Field loc:J\n+        58: return\n       LineNumberTable:\n         line 41: 0\n         line 42: 4\n         line 43: 11\n         line 45: 20\n-        line 47: 56\n-        line 48: 61\n+        line 47: 53\n+        line 48: 58\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      62     0  this   Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n-            0      62     1 start   J\n-            0      62     3 remaining   J\n+            0      59     0  this   Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;\n+            0      59     1 start   J\n+            0      59     3 remaining   J\n       StackMapTable: number_of_entries = 1\n         frame_type = 255 /* full_frame */\n-          offset_delta = 56\n+          offset_delta = 53\n           locals = [ class org/apache/commons/compress/utils/BoundedArchiveInputStream, long, long ]\n           stack = []\n \n   public synchronized int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0021) ACC_PUBLIC, ACC_SYNCHRONIZED\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #12                 // Field loc:J\n+         1: getfield      #41                 // Field loc:J\n          4: aload_0\n-         5: getfield      #2                  // Field end:J\n+         5: getfield      #16                 // Field end:J\n          8: lcmp\n          9: iflt          14\n         12: iconst_m1\n         13: ireturn\n         14: aload_0\n-        15: getfield      #13                 // Field singleByteBuffer:Ljava/nio/ByteBuffer;\n+        15: getfield      #55                 // Field singleByteBuffer:Ljava/nio/ByteBuffer;\n         18: ifnonnull     32\n         21: aload_0\n         22: iconst_1\n-        23: invokestatic  #14                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-        26: putfield      #13                 // Field singleByteBuffer:Ljava/nio/ByteBuffer;\n+        23: invokestatic  #57                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+        26: putfield      #55                 // Field singleByteBuffer:Ljava/nio/ByteBuffer;\n         29: goto          40\n         32: aload_0\n-        33: getfield      #13                 // Field singleByteBuffer:Ljava/nio/ByteBuffer;\n-        36: invokevirtual #15                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+        33: getfield      #55                 // Field singleByteBuffer:Ljava/nio/ByteBuffer;\n+        36: invokevirtual #63                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         39: pop\n         40: aload_0\n         41: aload_0\n-        42: getfield      #12                 // Field loc:J\n+        42: getfield      #41                 // Field loc:J\n         45: aload_0\n-        46: getfield      #13                 // Field singleByteBuffer:Ljava/nio/ByteBuffer;\n-        49: invokevirtual #16                 // Method read:(JLjava/nio/ByteBuffer;)I\n+        46: getfield      #55                 // Field singleByteBuffer:Ljava/nio/ByteBuffer;\n+        49: invokevirtual #67                 // Method read:(JLjava/nio/ByteBuffer;)I\n         52: istore_1\n         53: iload_1\n         54: iconst_1\n         55: if_icmpge     60\n         58: iconst_m1\n         59: ireturn\n         60: aload_0\n         61: dup\n-        62: getfield      #12                 // Field loc:J\n+        62: getfield      #41                 // Field loc:J\n         65: lconst_1\n         66: ladd\n-        67: putfield      #12                 // Field loc:J\n+        67: putfield      #41                 // Field loc:J\n         70: aload_0\n-        71: getfield      #13                 // Field singleByteBuffer:Ljava/nio/ByteBuffer;\n-        74: invokevirtual #17                 // Method java/nio/ByteBuffer.get:()B\n+        71: getfield      #55                 // Field singleByteBuffer:Ljava/nio/ByteBuffer;\n+        74: invokevirtual #70                 // Method java/nio/ByteBuffer.get:()B\n         77: sipush        255\n         80: iand\n         81: ireturn\n       LineNumberTable:\n         line 52: 0\n         line 53: 12\n         line 55: 14\n         line 56: 21\n+        line 57: 29\n         line 58: 32\n         line 60: 40\n         line 61: 53\n         line 62: 58\n         line 64: 60\n         line 65: 70\n       LocalVariableTable:\n@@ -244,38 +244,38 @@\n       StackMapTable: number_of_entries = 4\n         frame_type = 14 /* same */\n         frame_type = 17 /* same */\n         frame_type = 7 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 19\n           locals = [ int ]\n-    Exceptions:\n-      throws java.io.IOException\n \n   public synchronized int read(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)I\n     flags: (0x0021) ACC_PUBLIC, ACC_SYNCHRONIZED\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=6, locals=8, args_size=4\n          0: aload_0\n-         1: getfield      #12                 // Field loc:J\n+         1: getfield      #41                 // Field loc:J\n          4: aload_0\n-         5: getfield      #2                  // Field end:J\n+         5: getfield      #16                 // Field end:J\n          8: lcmp\n          9: iflt          14\n         12: iconst_m1\n         13: ireturn\n         14: iload_3\n         15: i2l\n         16: aload_0\n-        17: getfield      #2                  // Field end:J\n+        17: getfield      #16                 // Field end:J\n         20: aload_0\n-        21: getfield      #12                 // Field loc:J\n+        21: getfield      #41                 // Field loc:J\n         24: lsub\n-        25: invokestatic  #18                 // Method java/lang/Math.min:(JJ)J\n+        25: invokestatic  #76                 // Method java/lang/Math.min:(JJ)J\n         28: lstore        4\n         30: lload         4\n         32: lconst_0\n         33: lcmp\n         34: ifgt          39\n         37: iconst_0\n         38: ireturn\n@@ -289,40 +289,40 @@\n         51: aload_1\n         52: arraylength\n         53: iload_2\n         54: isub\n         55: i2l\n         56: lcmp\n         57: ifle          70\n-        60: new           #19                 // class java/lang/IndexOutOfBoundsException\n+        60: new           #82                 // class java/lang/IndexOutOfBoundsException\n         63: dup\n-        64: ldc           #20                 // String offset or len are out of bounds\n-        66: invokespecial #21                 // Method java/lang/IndexOutOfBoundsException.\"<init>\":(Ljava/lang/String;)V\n+        64: ldc           #84                 // String offset or len are out of bounds\n+        66: invokespecial #86                 // Method java/lang/IndexOutOfBoundsException.\"<init>\":(Ljava/lang/String;)V\n         69: athrow\n         70: aload_1\n         71: iload_2\n         72: lload         4\n         74: l2i\n-        75: invokestatic  #22                 // Method java/nio/ByteBuffer.wrap:([BII)Ljava/nio/ByteBuffer;\n+        75: invokestatic  #87                 // Method java/nio/ByteBuffer.wrap:([BII)Ljava/nio/ByteBuffer;\n         78: astore        6\n         80: aload_0\n         81: aload_0\n-        82: getfield      #12                 // Field loc:J\n+        82: getfield      #41                 // Field loc:J\n         85: aload         6\n-        87: invokevirtual #16                 // Method read:(JLjava/nio/ByteBuffer;)I\n+        87: invokevirtual #67                 // Method read:(JLjava/nio/ByteBuffer;)I\n         90: istore        7\n         92: iload         7\n         94: ifle          109\n         97: aload_0\n         98: dup\n-        99: getfield      #12                 // Field loc:J\n+        99: getfield      #41                 // Field loc:J\n        102: iload         7\n        104: i2l\n        105: ladd\n-       106: putfield      #12                 // Field loc:J\n+       106: putfield      #41                 // Field loc:J\n        109: iload         7\n        111: ireturn\n       LineNumberTable:\n         line 70: 0\n         line 71: 12\n         line 73: 14\n         line 74: 30\n@@ -349,16 +349,14 @@\n           offset_delta = 24\n           locals = [ long ]\n         frame_type = 20 /* same */\n         frame_type = 9 /* same */\n         frame_type = 253 /* append */\n           offset_delta = 38\n           locals = [ class java/nio/ByteBuffer, int ]\n-    Exceptions:\n-      throws java.io.IOException\n \n   protected abstract int read(long, java.nio.ByteBuffer) throws java.io.IOException;\n     descriptor: (JLjava/nio/ByteBuffer;)I\n     flags: (0x0404) ACC_PROTECTED, ACC_ABSTRACT\n     Exceptions:\n       throws java.io.IOException\n }\n"}]}
