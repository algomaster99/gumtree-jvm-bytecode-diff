{"diffoscope-json-version": 1, "source1": "first/JavaParser.class", "source2": "second/JavaParser.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,123 +7,119 @@\n import java.util.List;\n import org.antlr.v4.runtime.Token;\n import org.antlr.v4.runtime.CommonToken;\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.io.File;\n import com.puppycrawl.tools.checkstyle.api.FileText;\n-import org.antlr.v4.runtime.CharStream;\n import org.antlr.v4.runtime.tree.ParseTree;\n import com.puppycrawl.tools.checkstyle.api.CheckstyleException;\n import java.util.Locale;\n import org.antlr.v4.runtime.ANTLRErrorListener;\n import org.antlr.v4.runtime.ANTLRErrorStrategy;\n import org.antlr.v4.runtime.TokenStream;\n import com.puppycrawl.tools.checkstyle.grammar.java.JavaLanguageParser;\n import org.antlr.v4.runtime.TokenSource;\n import org.antlr.v4.runtime.CommonTokenStream;\n import com.puppycrawl.tools.checkstyle.grammar.CommentListener;\n+import org.antlr.v4.runtime.CharStream;\n import com.puppycrawl.tools.checkstyle.grammar.java.JavaLanguageLexer;\n import org.antlr.v4.runtime.CharStreams;\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n import com.puppycrawl.tools.checkstyle.api.FileContents;\n \n public final class JavaParser\n {\n     private JavaParser() {\n     }\n     \n-    public static DetailAST parse(final FileContents contents) throws CheckstyleException {\n-        final String fullText = contents.getText().getFullText().toString();\n-        final CharStream codePointCharStream = (CharStream)CharStreams.fromString(fullText);\n-        final JavaLanguageLexer lexer = new JavaLanguageLexer(codePointCharStream, true);\n-        lexer.setCommentListener((CommentListener)contents);\n-        lexer.removeErrorListeners();\n-        final CommonTokenStream tokenStream = new CommonTokenStream((TokenSource)lexer);\n-        final JavaLanguageParser parser = new JavaLanguageParser((TokenStream)tokenStream, 500);\n-        parser.setErrorHandler((ANTLRErrorStrategy)new CheckstyleParserErrorStrategy());\n-        parser.removeErrorListeners();\n-        parser.addErrorListener((ANTLRErrorListener)new JavaParser.CheckstyleErrorListener());\n+    public static DetailAST parse(final FileContents commentListener) throws CheckstyleException {\n+        final JavaLanguageLexer javaLanguageLexer = new JavaLanguageLexer((CharStream)CharStreams.fromString(commentListener.getText().getFullText().toString()), true);\n+        javaLanguageLexer.setCommentListener((CommentListener)commentListener);\n+        javaLanguageLexer.removeErrorListeners();\n+        final CommonTokenStream commonTokenStream = new CommonTokenStream((TokenSource)javaLanguageLexer);\n+        final JavaLanguageParser javaLanguageParser = new JavaLanguageParser((TokenStream)commonTokenStream, 500);\n+        javaLanguageParser.setErrorHandler((ANTLRErrorStrategy)new CheckstyleParserErrorStrategy());\n+        javaLanguageParser.removeErrorListeners();\n+        javaLanguageParser.addErrorListener((ANTLRErrorListener)new JavaParser.CheckstyleErrorListener());\n         JavaLanguageParser.CompilationUnitContext compilationUnit;\n         try {\n-            compilationUnit = parser.compilationUnit();\n+            compilationUnit = javaLanguageParser.compilationUnit();\n         }\n         catch (final IllegalStateException ex) {\n-            final String exceptionMsg = String.format(Locale.ROOT, \"%s occurred while parsing file %s.\", ex.getClass().getSimpleName(), contents.getFileName());\n-            throw new CheckstyleException(exceptionMsg, (Throwable)ex);\n+            throw new CheckstyleException(String.format(Locale.ROOT, \"%s occurred while parsing file %s.\", ex.getClass().getSimpleName(), commentListener.getFileName()), (Throwable)ex);\n         }\n-        return (DetailAST)new JavaAstVisitor(tokenStream).visit((ParseTree)compilationUnit);\n+        return (DetailAST)new JavaAstVisitor(commonTokenStream).visit((ParseTree)compilationUnit);\n     }\n     \n-    public static DetailAST parseFileText(final FileText text, final JavaParser.Options options) throws CheckstyleException {\n-        final FileContents contents = new FileContents(text);\n-        final DetailAST ast = parse(contents);\n+    public static DetailAST parseFileText(final FileText fileText, final JavaParser.Options options) throws CheckstyleException {\n+        final DetailAST parse = parse(new FileContents(fileText));\n         if (options == JavaParser.Options.WITH_COMMENTS) {\n-            appendHiddenCommentNodes(ast);\n+            appendHiddenCommentNodes(parse);\n         }\n-        return ast;\n+        return parse;\n     }\n     \n     public static DetailAST parseFile(final File file, final JavaParser.Options options) throws IOException, CheckstyleException {\n-        final FileText text = new FileText(file.getAbsoluteFile(), StandardCharsets.UTF_8.name());\n-        return parseFileText(text, options);\n+        return parseFileText(new FileText(file.getAbsoluteFile(), StandardCharsets.UTF_8.name()), options);\n     }\n     \n-    public static DetailAST appendHiddenCommentNodes(final DetailAST root) {\n-        DetailAST curNode = root;\n-        DetailAST lastNode = root;\n-        while (curNode != null) {\n-            lastNode = curNode;\n-            final List<Token> hiddenBefore = ((DetailAstImpl)curNode).getHiddenBefore();\n+    public static DetailAST appendHiddenCommentNodes(final DetailAST detailAST) {\n+        Object parent = detailAST;\n+        Object o = detailAST;\n+        while (parent != null) {\n+            o = parent;\n+            final List hiddenBefore = ((DetailAstImpl)parent).getHiddenBefore();\n             if (hiddenBefore != null) {\n-                DetailAST currentSibling = curNode;\n-                final ListIterator<Token> reverseCommentsIterator = hiddenBefore.listIterator(hiddenBefore.size());\n-                while (reverseCommentsIterator.hasPrevious()) {\n-                    final DetailAST newCommentNode = createCommentAstFromToken((CommonToken)reverseCommentsIterator.previous());\n-                    ((DetailAstImpl)currentSibling).addPreviousSibling(newCommentNode);\n-                    currentSibling = newCommentNode;\n+                Object o2 = parent;\n+                final ListIterator listIterator = hiddenBefore.listIterator(hiddenBefore.size());\n+                while (listIterator.hasPrevious()) {\n+                    final DetailAST commentAstFromToken = createCommentAstFromToken((CommonToken)listIterator.previous());\n+                    ((DetailAstImpl)o2).addPreviousSibling(commentAstFromToken);\n+                    o2 = commentAstFromToken;\n                 }\n             }\n-            DetailAST toVisit;\n-            for (toVisit = curNode.getFirstChild(); curNode != null && toVisit == null; toVisit = curNode.getNextSibling(), curNode = curNode.getParent()) {}\n-            curNode = toVisit;\n+            DetailAST detailAST2;\n+            for (detailAST2 = ((DetailAST)parent).getFirstChild(); parent != null && detailAST2 == null; detailAST2 = ((DetailAST)parent).getNextSibling(), parent = ((DetailAST)parent).getParent()) {}\n+            parent = detailAST2;\n         }\n-        if (lastNode != null) {\n-            final List<Token> hiddenAfter = ((DetailAstImpl)lastNode).getHiddenAfter();\n+        if (o != null) {\n+            final List hiddenAfter = ((DetailAstImpl)o).getHiddenAfter();\n             if (hiddenAfter != null) {\n-                DetailAST currentSibling = lastNode;\n-                for (final Token token : hiddenAfter) {\n-                    final DetailAST newCommentNode2 = createCommentAstFromToken((CommonToken)token);\n-                    ((DetailAstImpl)currentSibling).addNextSibling(newCommentNode2);\n-                    currentSibling = newCommentNode2;\n+                Object o3 = o;\n+                final Iterator iterator = hiddenAfter.iterator();\n+                while (iterator.hasNext()) {\n+                    final DetailAST commentAstFromToken2 = createCommentAstFromToken((CommonToken)(Token)iterator.next());\n+                    ((DetailAstImpl)o3).addNextSibling(commentAstFromToken2);\n+                    o3 = commentAstFromToken2;\n                 }\n             }\n         }\n-        return root;\n+        return detailAST;\n     }\n     \n-    private static DetailAST createCommentAstFromToken(final CommonToken token) {\n-        DetailAST commentAst;\n-        if (token.getType() == 144) {\n-            commentAst = createSlCommentNode((Token)token);\n+    private static DetailAST createCommentAstFromToken(final CommonToken commonToken) {\n+        DetailAST detailAST;\n+        if (commonToken.getType() == 144) {\n+            detailAST = createSlCommentNode((Token)commonToken);\n         }\n         else {\n-            commentAst = ParserUtil.createBlockCommentNode(token);\n+            detailAST = ParserUtil.createBlockCommentNode(commonToken);\n         }\n-        return commentAst;\n+        return detailAST;\n     }\n     \n     private static DetailAST createSlCommentNode(final Token token) {\n-        final DetailAstImpl slComment = new DetailAstImpl();\n-        slComment.setType(144);\n-        slComment.setText(\"//\");\n-        slComment.setColumnNo(token.getCharPositionInLine());\n-        slComment.setLineNo(token.getLine());\n-        final DetailAstImpl slCommentContent = new DetailAstImpl();\n-        slCommentContent.setType(183);\n-        slCommentContent.setColumnNo(token.getCharPositionInLine() + 2);\n-        slCommentContent.setLineNo(token.getLine());\n-        slCommentContent.setText(token.getText());\n-        slComment.addChild((DetailAST)slCommentContent);\n-        return (DetailAST)slComment;\n+        final DetailAstImpl detailAstImpl = new DetailAstImpl();\n+        detailAstImpl.setType(144);\n+        detailAstImpl.setText(\"//\");\n+        detailAstImpl.setColumnNo(token.getCharPositionInLine());\n+        detailAstImpl.setLineNo(token.getLine());\n+        final DetailAstImpl detailAstImpl2 = new DetailAstImpl();\n+        detailAstImpl2.setType(183);\n+        detailAstImpl2.setColumnNo(token.getCharPositionInLine() + 2);\n+        detailAstImpl2.setLineNo(token.getLine());\n+        detailAstImpl2.setText(token.getText());\n+        detailAstImpl.addChild((DetailAST)detailAstImpl2);\n+        return (DetailAST)detailAstImpl;\n     }\n }\n"}]}
