{"diffoscope-json-version": 1, "source1": "first/VariableInstructionForm.class", "source2": "second/VariableInstructionForm.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,46 +1,44 @@\n \n package org.apache.commons.compress.harmony.unpack200.bytecode.forms;\n \n public abstract class VariableInstructionForm extends ByteCodeForm\n {\n-    public VariableInstructionForm(final int opcode, final String name) {\n-        super(opcode, name);\n+    public VariableInstructionForm(final int n, final String s) {\n+        super(n, s);\n     }\n     \n-    public void setRewrite4Bytes(final int operand, final int[] rewrite) {\n-        int firstOperandPosition = -1;\n-        for (int index = 0; index < rewrite.length - 3; ++index) {\n-            if (rewrite[index] == -1 && rewrite[index + 1] == -1 && rewrite[index + 2] == -1 && rewrite[index + 3] == -1) {\n-                firstOperandPosition = index;\n+    public void setRewrite4Bytes(final int n, final int[] array) {\n+        int n2 = -1;\n+        for (int i = 0; i < array.length - 3; ++i) {\n+            if (array[i] == -1 && array[i + 1] == -1 && array[i + 2] == -1 && array[i + 3] == -1) {\n+                n2 = i;\n                 break;\n             }\n         }\n-        this.setRewrite4Bytes(operand, firstOperandPosition, rewrite);\n+        this.setRewrite4Bytes(n, n2, array);\n     }\n     \n-    public void setRewrite4Bytes(final int operand, final int absPosition, final int[] rewrite) {\n-        if (absPosition < 0) {\n+    public void setRewrite4Bytes(final int n, final int i, final int[] array) {\n+        if (i < 0) {\n             throw new Error(\"Trying to rewrite \" + this + \" but there is no room for 4 bytes\");\n         }\n-        final int byteCodeRewriteLength = rewrite.length;\n-        if (absPosition + 3 > byteCodeRewriteLength) {\n-            throw new Error(\"Trying to rewrite \" + this + \" with an int at position \" + absPosition + \" but this won't fit in the rewrite array\");\n+        if (i + 3 > array.length) {\n+            throw new Error(\"Trying to rewrite \" + this + \" with an int at position \" + i + \" but this won't fit in the rewrite array\");\n         }\n-        rewrite[absPosition] = (0xFF000000 & operand) >> 24;\n-        rewrite[absPosition + 1] = (0xFF0000 & operand) >> 16;\n-        rewrite[absPosition + 2] = (0xFF00 & operand) >> 8;\n-        rewrite[absPosition + 3] = (0xFF & operand);\n+        array[i] = (0xFF000000 & n) >> 24;\n+        array[i + 1] = (0xFF0000 & n) >> 16;\n+        array[i + 2] = (0xFF00 & n) >> 8;\n+        array[i + 3] = (0xFF & n);\n     }\n     \n-    public void setRewrite2Bytes(final int operand, final int absPosition, final int[] rewrite) {\n-        if (absPosition < 0) {\n+    public void setRewrite2Bytes(final int n, final int i, final int[] array) {\n+        if (i < 0) {\n             throw new Error(\"Trying to rewrite \" + this + \" but there is no room for 4 bytes\");\n         }\n-        final int byteCodeRewriteLength = rewrite.length;\n-        if (absPosition + 1 > byteCodeRewriteLength) {\n-            throw new Error(\"Trying to rewrite \" + this + \" with an int at position \" + absPosition + \" but this won't fit in the rewrite array\");\n+        if (i + 1 > array.length) {\n+            throw new Error(\"Trying to rewrite \" + this + \" with an int at position \" + i + \" but this won't fit in the rewrite array\");\n         }\n-        rewrite[absPosition] = (0xFF00 & operand) >> 8;\n-        rewrite[absPosition + 1] = (0xFF & operand);\n+        array[i] = (0xFF00 & n) >> 8;\n+        array[i + 1] = (0xFF & n);\n     }\n }\n"}]}
