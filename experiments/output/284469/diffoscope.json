{"diffoscope-json-version": 1, "source1": "first/FTPClient.class", "source2": "second/FTPClient.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,16 +11,16 @@\n import java.io.BufferedOutputStream;\n import java.io.BufferedInputStream;\n import org.apache.commons.net.util.NetConstants;\n import java.util.Locale;\n import org.apache.commons.net.io.SocketOutputStream;\n import org.apache.commons.net.io.ToNetASCIIOutputStream;\n import org.apache.commons.net.io.SocketInputStream;\n-import java.io.InputStream;\n import java.io.Closeable;\n+import java.io.InputStream;\n import org.apache.commons.net.io.Util;\n import org.apache.commons.net.io.FromNetASCIIInputStream;\n import java.io.OutputStream;\n import java.util.regex.Matcher;\n import java.net.UnknownHostException;\n import org.apache.commons.net.MalformedServerReplyException;\n import java.net.ServerSocket;\n@@ -94,42 +94,42 @@\n     private HashMap<String, Set<String>> featuresMap;\n     private boolean ipAddressFromPasvResponse;\n     \n     private static Properties getOverrideProperties() {\n         return FTPClient.PropertiesSingleton.PROPERTIES;\n     }\n     \n-    static String parsePathname(final String reply) {\n-        final String param = reply.substring(4);\n-        if (param.startsWith(\"\\\"\")) {\n+    static String parsePathname(final String s) {\n+        final String substring = s.substring(4);\n+        if (substring.startsWith(\"\\\"\")) {\n             final StringBuilder sb = new StringBuilder();\n-            boolean quoteSeen = false;\n-            for (int i = 1; i < param.length(); ++i) {\n-                final char ch = param.charAt(i);\n-                if (ch == '\\\"') {\n-                    if (quoteSeen) {\n-                        sb.append(ch);\n-                        quoteSeen = false;\n+            int n = 0;\n+            for (int i = 1; i < substring.length(); ++i) {\n+                final char char1 = substring.charAt(i);\n+                if (char1 == '\\\"') {\n+                    if (n != 0) {\n+                        sb.append(char1);\n+                        n = 0;\n                     }\n                     else {\n-                        quoteSeen = true;\n+                        n = 1;\n                     }\n                 }\n                 else {\n-                    if (quoteSeen) {\n+                    if (n != 0) {\n                         return sb.toString();\n                     }\n-                    sb.append(ch);\n+                    sb.append(char1);\n                 }\n             }\n-            if (quoteSeen) {\n+            if (n != 0) {\n                 return sb.toString();\n             }\n         }\n-        return param;\n+        return substring;\n     }\n     \n     public FTPClient() {\n         this.controlKeepAliveTimeout = Duration.ZERO;\n         this.controlKeepAliveReplyTimeout = Duration.ofSeconds(1L);\n         this.passiveNatWorkaroundStrategy = (FTPClient.HostnameResolver)new FTPClient.NatServerResolverImpl(this);\n         this.ipAddressFromPasvResponse = Boolean.parseBoolean(System.getProperty(\"org.apache.commons.net.ftp.ipAddressFromPasvResponse\"));\n@@ -144,393 +144,389 @@\n         this.passiveLocalHost = null;\n     }\n     \n     protected void _connectAction_() throws IOException {\n         this._connectAction_(null);\n     }\n     \n-    protected void _connectAction_(final Reader socketIsReader) throws IOException {\n-        super._connectAction_(socketIsReader);\n+    protected void _connectAction_(final Reader reader) throws IOException {\n+        super._connectAction_(reader);\n         this.initDefaults();\n         if (this.autodetectEncoding) {\n-            final ArrayList<String> oldReplyLines = new ArrayList<String>(this._replyLines);\n-            final int oldReplyCode = this._replyCode;\n+            final ArrayList c = new ArrayList(this._replyLines);\n+            final int replyCode = this._replyCode;\n             if (this.hasFeature(\"UTF8\") || this.hasFeature(\"UTF-8\")) {\n                 this.setControlEncoding(\"UTF-8\");\n                 this._controlInput_ = (BufferedReader)new CRLFLineReader((Reader)new InputStreamReader(this._input_, this.getControlEncoding()));\n                 this._controlOutput_ = new BufferedWriter(new OutputStreamWriter(this._output_, this.getControlEncoding()));\n             }\n             this._replyLines.clear();\n-            this._replyLines.addAll(oldReplyLines);\n-            this._replyCode = oldReplyCode;\n+            this._replyLines.addAll(c);\n+            this._replyCode = replyCode;\n             this._newReplyString = true;\n         }\n     }\n     \n-    protected Socket _openDataConnection_(final FTPCmd command, final String arg) throws IOException {\n-        return this._openDataConnection_(command.getCommand(), arg);\n+    protected Socket _openDataConnection_(final FTPCmd ftpCmd, final String s) throws IOException {\n+        return this._openDataConnection_(ftpCmd.getCommand(), s);\n     }\n     \n     @Deprecated\n-    protected Socket _openDataConnection_(final int command, final String arg) throws IOException {\n-        return this._openDataConnection_(FTPCommand.getCommand(command), arg);\n+    protected Socket _openDataConnection_(final int n, final String s) throws IOException {\n+        return this._openDataConnection_(FTPCommand.getCommand(n), s);\n     }\n     \n-    protected Socket _openDataConnection_(final String command, final String arg) throws IOException {\n+    protected Socket _openDataConnection_(final String s, final String s2) throws IOException {\n         if (this.dataConnectionMode != 0 && this.dataConnectionMode != 2) {\n             return null;\n         }\n-        final boolean isInet6Address = this.getRemoteAddress() instanceof Inet6Address;\n-        final int soTimeoutMillis = DurationUtils.toMillisInt(this.dataTimeout);\n-        Socket socket;\n+        final boolean b = this.getRemoteAddress() instanceof Inet6Address;\n+        final int millisInt = DurationUtils.toMillisInt(this.dataTimeout);\n+        Socket socket5;\n         if (this.dataConnectionMode == 0) {\n-            try (final ServerSocket server = this._serverSocketFactory_.createServerSocket(this.getActivePort(), 1, this.getHostAddress())) {\n-                if (isInet6Address) {\n-                    if (!FTPReply.isPositiveCompletion(this.eprt(this.getReportHostAddress(), server.getLocalPort()))) {\n-                        final Socket socket2 = null;\n-                        if (server != null) {\n-                            server.close();\n+            try (final ServerSocket serverSocket = this._serverSocketFactory_.createServerSocket(this.getActivePort(), 1, this.getHostAddress())) {\n+                if (b) {\n+                    if (!FTPReply.isPositiveCompletion(this.eprt(this.getReportHostAddress(), serverSocket.getLocalPort()))) {\n+                        final Socket socket = null;\n+                        if (serverSocket != null) {\n+                            serverSocket.close();\n                         }\n-                        return socket2;\n+                        return socket;\n+                    }\n+                }\n+                else if (!FTPReply.isPositiveCompletion(this.port(this.getReportHostAddress(), serverSocket.getLocalPort()))) {\n+                    final Socket socket2 = null;\n+                    if (serverSocket != null) {\n+                        serverSocket.close();\n                     }\n+                    return socket2;\n                 }\n-                else if (!FTPReply.isPositiveCompletion(this.port(this.getReportHostAddress(), server.getLocalPort()))) {\n+                if (this.restartOffset > 0L && !this.restart(this.restartOffset)) {\n                     final Socket socket3 = null;\n-                    if (server != null) {\n-                        server.close();\n+                    if (serverSocket != null) {\n+                        serverSocket.close();\n                     }\n                     return socket3;\n                 }\n-                if (this.restartOffset > 0L && !this.restart(this.restartOffset)) {\n+                if (!FTPReply.isPositivePreliminary(this.sendCommand(s, s2))) {\n                     final Socket socket4 = null;\n-                    if (server != null) {\n-                        server.close();\n+                    if (serverSocket != null) {\n+                        serverSocket.close();\n                     }\n                     return socket4;\n                 }\n-                if (!FTPReply.isPositivePreliminary(this.sendCommand(command, arg))) {\n-                    final Socket socket5 = null;\n-                    if (server != null) {\n-                        server.close();\n-                    }\n-                    return socket5;\n-                }\n-                if (soTimeoutMillis >= 0) {\n-                    server.setSoTimeout(soTimeoutMillis);\n+                if (millisInt >= 0) {\n+                    serverSocket.setSoTimeout(millisInt);\n                 }\n-                socket = server.accept();\n-                if (soTimeoutMillis >= 0) {\n-                    socket.setSoTimeout(soTimeoutMillis);\n+                socket5 = serverSocket.accept();\n+                if (millisInt >= 0) {\n+                    socket5.setSoTimeout(millisInt);\n                 }\n                 if (this.receiveDataSocketBufferSize > 0) {\n-                    socket.setReceiveBufferSize(this.receiveDataSocketBufferSize);\n+                    socket5.setReceiveBufferSize(this.receiveDataSocketBufferSize);\n                 }\n                 if (this.sendDataSocketBufferSize > 0) {\n-                    socket.setSendBufferSize(this.sendDataSocketBufferSize);\n+                    socket5.setSendBufferSize(this.sendDataSocketBufferSize);\n                 }\n             }\n         }\n         else {\n-            final boolean attemptEPSV = this.isUseEPSVwithIPv4() || isInet6Address;\n-            if (attemptEPSV && this.epsv() == 229) {\n+            if ((this.isUseEPSVwithIPv4() || b) && this.epsv() == 229) {\n                 this._parseExtendedPassiveModeReply(this._replyLines.get(0));\n             }\n             else {\n-                if (isInet6Address) {\n+                if (b) {\n                     return null;\n                 }\n                 if (this.pasv() != 227) {\n                     return null;\n                 }\n                 this._parsePassiveModeReply(this._replyLines.get(0));\n             }\n-            socket = this._socketFactory_.createSocket();\n+            socket5 = this._socketFactory_.createSocket();\n             if (this.receiveDataSocketBufferSize > 0) {\n-                socket.setReceiveBufferSize(this.receiveDataSocketBufferSize);\n+                socket5.setReceiveBufferSize(this.receiveDataSocketBufferSize);\n             }\n             if (this.sendDataSocketBufferSize > 0) {\n-                socket.setSendBufferSize(this.sendDataSocketBufferSize);\n+                socket5.setSendBufferSize(this.sendDataSocketBufferSize);\n             }\n             if (this.passiveLocalHost != null) {\n-                socket.bind(new InetSocketAddress(this.passiveLocalHost, 0));\n+                socket5.bind(new InetSocketAddress(this.passiveLocalHost, 0));\n             }\n-            if (soTimeoutMillis >= 0) {\n-                socket.setSoTimeout(soTimeoutMillis);\n+            if (millisInt >= 0) {\n+                socket5.setSoTimeout(millisInt);\n             }\n-            socket.connect(new InetSocketAddress(this.passiveHost, this.passivePort), this.connectTimeout);\n+            socket5.connect(new InetSocketAddress(this.passiveHost, this.passivePort), this.connectTimeout);\n             if (this.restartOffset > 0L && !this.restart(this.restartOffset)) {\n-                socket.close();\n+                socket5.close();\n                 return null;\n             }\n-            if (!FTPReply.isPositivePreliminary(this.sendCommand(command, arg))) {\n-                socket.close();\n+            if (!FTPReply.isPositivePreliminary(this.sendCommand(s, s2))) {\n+                socket5.close();\n                 return null;\n             }\n         }\n-        if (this.remoteVerificationEnabled && !this.verifyRemote(socket)) {\n-            final InetAddress socketHost = socket.getInetAddress();\n-            socket.close();\n-            throw new IOException(\"Host attempting data connection \" + socketHost.getHostAddress() + \" is not same as server \" + this.getRemoteAddress().getHostAddress());\n-        }\n-        return socket;\n-    }\n-    \n-    protected void _parseExtendedPassiveModeReply(String reply) throws MalformedServerReplyException {\n-        reply = reply.substring(reply.indexOf(40) + 1, reply.indexOf(41)).trim();\n-        final char delim1 = reply.charAt(0);\n-        final char delim2 = reply.charAt(1);\n-        final char delim3 = reply.charAt(2);\n-        final char delim4 = reply.charAt(reply.length() - 1);\n-        if (delim1 != delim2 || delim2 != delim3 || delim3 != delim4) {\n-            throw new MalformedServerReplyException(\"Could not parse extended passive host information.\\nServer Reply: \" + reply);\n+        if (this.remoteVerificationEnabled && !this.verifyRemote(socket5)) {\n+            final InetAddress inetAddress = socket5.getInetAddress();\n+            socket5.close();\n+            throw new IOException(\"Host attempting data connection \" + inetAddress.getHostAddress() + \" is not same as server \" + this.getRemoteAddress().getHostAddress());\n+        }\n+        return socket5;\n+    }\n+    \n+    protected void _parseExtendedPassiveModeReply(String trim) throws MalformedServerReplyException {\n+        trim = trim.substring(trim.indexOf(40) + 1, trim.indexOf(41)).trim();\n+        final char char1 = trim.charAt(0);\n+        final char char2 = trim.charAt(1);\n+        final char char3 = trim.charAt(2);\n+        final char char4 = trim.charAt(trim.length() - 1);\n+        if (char1 != char2 || char2 != char3 || char3 != char4) {\n+            throw new MalformedServerReplyException(\"Could not parse extended passive host information.\\nServer Reply: \" + trim);\n         }\n-        int port;\n+        int int1;\n         try {\n-            port = Integer.parseInt(reply.substring(3, reply.length() - 1));\n+            int1 = Integer.parseInt(trim.substring(3, trim.length() - 1));\n         }\n-        catch (final NumberFormatException e) {\n-            throw new MalformedServerReplyException(\"Could not parse extended passive host information.\\nServer Reply: \" + reply);\n+        catch (final NumberFormatException ex) {\n+            throw new MalformedServerReplyException(\"Could not parse extended passive host information.\\nServer Reply: \" + trim);\n         }\n         this.passiveHost = this.getRemoteAddress().getHostAddress();\n-        this.passivePort = port;\n+        this.passivePort = int1;\n     }\n     \n-    protected void _parsePassiveModeReply(final String reply) throws MalformedServerReplyException {\n-        final Matcher m = FTPClient.PARMS_PAT.matcher(reply);\n-        if (!m.find()) {\n-            throw new MalformedServerReplyException(\"Could not parse passive host information.\\nServer Reply: \" + reply);\n+    protected void _parsePassiveModeReply(final String s) throws MalformedServerReplyException {\n+        final Matcher matcher = FTPClient.PARMS_PAT.matcher(s);\n+        if (!matcher.find()) {\n+            throw new MalformedServerReplyException(\"Could not parse passive host information.\\nServer Reply: \" + s);\n         }\n-        String pasvHost = \"0,0,0,0\".equals(m.group(1)) ? this._socket_.getInetAddress().getHostAddress() : m.group(1).replace(',', '.');\n-        int pasvPort;\n+        String hostAddress = \"0,0,0,0\".equals(matcher.group(1)) ? this._socket_.getInetAddress().getHostAddress() : matcher.group(1).replace(',', '.');\n+        int passivePort;\n         try {\n-            final int oct1 = Integer.parseInt(m.group(2));\n-            final int oct2 = Integer.parseInt(m.group(3));\n-            pasvPort = (oct1 << 8 | oct2);\n+            passivePort = (Integer.parseInt(matcher.group(2)) << 8 | Integer.parseInt(matcher.group(3)));\n         }\n-        catch (final NumberFormatException e) {\n-            throw new MalformedServerReplyException(\"Could not parse passive port information.\\nServer Reply: \" + reply);\n+        catch (final NumberFormatException ex) {\n+            throw new MalformedServerReplyException(\"Could not parse passive port information.\\nServer Reply: \" + s);\n         }\n         Label_0290: {\n             if (this.isIpAddressFromPasvResponse()) {\n                 if (this.passiveNatWorkaroundStrategy == null) {\n                     break Label_0290;\n                 }\n                 try {\n-                    final String newPassiveHost = this.passiveNatWorkaroundStrategy.resolve(pasvHost);\n-                    if (!pasvHost.equals(newPassiveHost)) {\n-                        this.fireReplyReceived(0, \"[Replacing PASV mode reply address \" + this.passiveHost + \" with \" + newPassiveHost + \"]\\n\");\n-                        pasvHost = newPassiveHost;\n+                    final String resolve = this.passiveNatWorkaroundStrategy.resolve(hostAddress);\n+                    if (!hostAddress.equals(resolve)) {\n+                        this.fireReplyReceived(0, \"[Replacing PASV mode reply address \" + this.passiveHost + \" with \" + resolve + \"]\\n\");\n+                        hostAddress = resolve;\n                     }\n                     break Label_0290;\n                 }\n-                catch (final UnknownHostException e2) {\n-                    throw new MalformedServerReplyException(\"Could not parse passive host information.\\nServer Reply: \" + reply);\n+                catch (final UnknownHostException ex2) {\n+                    throw new MalformedServerReplyException(\"Could not parse passive host information.\\nServer Reply: \" + s);\n                 }\n             }\n             if (this._socket_ == null) {\n-                pasvHost = null;\n+                hostAddress = null;\n             }\n             else {\n-                pasvHost = this._socket_.getInetAddress().getHostAddress();\n+                hostAddress = this._socket_.getInetAddress().getHostAddress();\n             }\n         }\n-        this.passiveHost = pasvHost;\n-        this.passivePort = pasvPort;\n+        this.passiveHost = hostAddress;\n+        this.passivePort = passivePort;\n     }\n     \n-    protected boolean _retrieveFile(final String command, final String remote, final OutputStream local) throws IOException {\n-        final Socket socket = this._openDataConnection_(command, remote);\n-        if (socket == null) {\n+    protected boolean _retrieveFile(final String s, final String s2, final OutputStream outputStream) throws IOException {\n+        final Socket openDataConnection_ = this._openDataConnection_(s, s2);\n+        if (openDataConnection_ == null) {\n             return false;\n         }\n-        InputStream input = null;\n+        Object bufferedInputStream = null;\n         FTPClient.CSL csl = null;\n         try {\n             try {\n                 if (this.fileType == 0) {\n-                    input = (InputStream)new FromNetASCIIInputStream(this.getBufferedInputStream(socket.getInputStream()));\n+                    bufferedInputStream = new FromNetASCIIInputStream(this.getBufferedInputStream(openDataConnection_.getInputStream()));\n                 }\n                 else {\n-                    input = this.getBufferedInputStream(socket.getInputStream());\n+                    bufferedInputStream = this.getBufferedInputStream(openDataConnection_.getInputStream());\n                 }\n                 if (DurationUtils.isPositive(this.controlKeepAliveTimeout)) {\n                     csl = new FTPClient.CSL(this, this.controlKeepAliveTimeout, this.controlKeepAliveReplyTimeout);\n                 }\n-                Util.copyStream(input, local, this.getBufferSize(), -1L, this.mergeListeners((CopyStreamListener)csl), false);\n+                Util.copyStream((InputStream)bufferedInputStream, outputStream, this.getBufferSize(), -1L, this.mergeListeners((CopyStreamListener)csl), false);\n             }\n             finally {\n-                Util.closeQuietly((Closeable)input);\n+                Util.closeQuietly((Closeable)bufferedInputStream);\n             }\n             return this.completePendingCommand();\n         }\n         finally {\n-            Util.closeQuietly(socket);\n+            Util.closeQuietly(openDataConnection_);\n             if (csl != null) {\n                 this.cslDebug = csl.cleanUp();\n             }\n         }\n     }\n     \n-    protected InputStream _retrieveFileStream(final String command, final String remote) throws IOException {\n-        final Socket socket = this._openDataConnection_(command, remote);\n-        if (socket == null) {\n+    protected InputStream _retrieveFileStream(final String s, final String s2) throws IOException {\n+        final Socket openDataConnection_ = this._openDataConnection_(s, s2);\n+        if (openDataConnection_ == null) {\n             return null;\n         }\n-        InputStream input;\n+        Object inputStream;\n         if (this.fileType == 0) {\n-            input = (InputStream)new FromNetASCIIInputStream(this.getBufferedInputStream(socket.getInputStream()));\n+            inputStream = new FromNetASCIIInputStream(this.getBufferedInputStream(openDataConnection_.getInputStream()));\n         }\n         else {\n-            input = socket.getInputStream();\n+            inputStream = openDataConnection_.getInputStream();\n         }\n-        return (InputStream)new SocketInputStream(socket, input);\n+        return (InputStream)new SocketInputStream(openDataConnection_, (InputStream)inputStream);\n     }\n     \n-    protected boolean _storeFile(final String command, final String remote, final InputStream local) throws IOException {\n-        final Socket socket = this._openDataConnection_(command, remote);\n-        if (socket == null) {\n+    protected boolean _storeFile(final String s, final String s2, final InputStream inputStream) throws IOException {\n+        final Socket openDataConnection_ = this._openDataConnection_(s, s2);\n+        if (openDataConnection_ == null) {\n             return false;\n         }\n-        OutputStream output;\n+        Object bufferedOutputStream;\n         if (this.fileType == 0) {\n-            output = (OutputStream)new ToNetASCIIOutputStream(this.getBufferedOutputStream(socket.getOutputStream()));\n+            bufferedOutputStream = new ToNetASCIIOutputStream(this.getBufferedOutputStream(openDataConnection_.getOutputStream()));\n         }\n         else {\n-            output = this.getBufferedOutputStream(socket.getOutputStream());\n+            bufferedOutputStream = this.getBufferedOutputStream(openDataConnection_.getOutputStream());\n         }\n         FTPClient.CSL csl = null;\n         if (DurationUtils.isPositive(this.controlKeepAliveTimeout)) {\n             csl = new FTPClient.CSL(this, this.controlKeepAliveTimeout, this.controlKeepAliveReplyTimeout);\n         }\n         try {\n-            Util.copyStream(local, output, this.getBufferSize(), -1L, this.mergeListeners((CopyStreamListener)csl), false);\n-            output.close();\n-            socket.close();\n+            Util.copyStream(inputStream, (OutputStream)bufferedOutputStream, this.getBufferSize(), -1L, this.mergeListeners((CopyStreamListener)csl), false);\n+            ((OutputStream)bufferedOutputStream).close();\n+            openDataConnection_.close();\n             return this.completePendingCommand();\n         }\n-        catch (final IOException e) {\n-            Util.closeQuietly((Closeable)output);\n-            Util.closeQuietly(socket);\n-            throw e;\n+        catch (final IOException ex) {\n+            Util.closeQuietly((Closeable)bufferedOutputStream);\n+            Util.closeQuietly(openDataConnection_);\n+            throw ex;\n         }\n         finally {\n             if (csl != null) {\n                 this.cslDebug = csl.cleanUp();\n             }\n         }\n     }\n     \n-    protected OutputStream _storeFileStream(final String command, final String remote) throws IOException {\n-        final Socket socket = this._openDataConnection_(command, remote);\n-        if (socket == null) {\n+    protected OutputStream _storeFileStream(final String s, final String s2) throws IOException {\n+        final Socket openDataConnection_ = this._openDataConnection_(s, s2);\n+        if (openDataConnection_ == null) {\n             return null;\n         }\n-        OutputStream output;\n+        Object outputStream;\n         if (this.fileType == 0) {\n-            output = (OutputStream)new ToNetASCIIOutputStream(this.getBufferedOutputStream(socket.getOutputStream()));\n+            outputStream = new ToNetASCIIOutputStream(this.getBufferedOutputStream(openDataConnection_.getOutputStream()));\n         }\n         else {\n-            output = socket.getOutputStream();\n+            outputStream = openDataConnection_.getOutputStream();\n         }\n-        return (OutputStream)new SocketOutputStream(socket, output);\n+        return (OutputStream)new SocketOutputStream(openDataConnection_, (OutputStream)outputStream);\n     }\n     \n     public boolean abort() throws IOException {\n         return FTPReply.isPositiveCompletion(this.abor());\n     }\n     \n-    public boolean allocate(final int bytes) throws IOException {\n-        return FTPReply.isPositiveCompletion(this.allo(bytes));\n+    public boolean allocate(final int n) throws IOException {\n+        return FTPReply.isPositiveCompletion(this.allo(n));\n     }\n     \n-    public boolean allocate(final int bytes, final int recordSize) throws IOException {\n-        return FTPReply.isPositiveCompletion(this.allo(bytes, recordSize));\n+    public boolean allocate(final int n, final int n2) throws IOException {\n+        return FTPReply.isPositiveCompletion(this.allo(n, n2));\n     }\n     \n-    public boolean allocate(final long bytes) throws IOException {\n-        return FTPReply.isPositiveCompletion(this.allo(bytes));\n+    public boolean allocate(final long n) throws IOException {\n+        return FTPReply.isPositiveCompletion(this.allo(n));\n     }\n     \n-    public boolean allocate(final long bytes, final int recordSize) throws IOException {\n-        return FTPReply.isPositiveCompletion(this.allo(bytes, recordSize));\n+    public boolean allocate(final long n, final int n2) throws IOException {\n+        return FTPReply.isPositiveCompletion(this.allo(n, n2));\n     }\n     \n-    public boolean appendFile(final String remote, final InputStream local) throws IOException {\n-        return this.storeFile(FTPCmd.APPE, remote, local);\n+    public boolean appendFile(final String s, final InputStream inputStream) throws IOException {\n+        return this.storeFile(FTPCmd.APPE, s, inputStream);\n     }\n     \n-    public OutputStream appendFileStream(final String remote) throws IOException {\n-        return this.storeFileStream(FTPCmd.APPE, remote);\n+    public OutputStream appendFileStream(final String s) throws IOException {\n+        return this.storeFileStream(FTPCmd.APPE, s);\n     }\n     \n     public boolean changeToParentDirectory() throws IOException {\n         return FTPReply.isPositiveCompletion(this.cdup());\n     }\n     \n-    public boolean changeWorkingDirectory(final String pathname) throws IOException {\n-        return FTPReply.isPositiveCompletion(this.cwd(pathname));\n+    public boolean changeWorkingDirectory(final String s) throws IOException {\n+        return FTPReply.isPositiveCompletion(this.cwd(s));\n     }\n     \n     public boolean completePendingCommand() throws IOException {\n         return FTPReply.isPositiveCompletion(this.getReply());\n     }\n     \n-    public void configure(final FTPClientConfig config) {\n-        this.configuration = config;\n+    public void configure(final FTPClientConfig configuration) {\n+        this.configuration = configuration;\n     }\n     \n-    void createParser(final String parserKey) throws IOException {\n-        if (this.entryParser == null || (parserKey != null && !this.entryParserKey.equals(parserKey))) {\n-            if (null != parserKey) {\n-                this.entryParser = this.parserFactory.createFileEntryParser(parserKey);\n-                this.entryParserKey = parserKey;\n+    void createParser(final String s) throws IOException {\n+        if (this.entryParser == null || (s != null && !this.entryParserKey.equals(s))) {\n+            if (null != s) {\n+                this.entryParser = this.parserFactory.createFileEntryParser(s);\n+                this.entryParserKey = s;\n             }\n             else if (null != this.configuration && this.configuration.getServerSystemKey().length() > 0) {\n                 this.entryParser = this.parserFactory.createFileEntryParser(this.configuration);\n                 this.entryParserKey = this.configuration.getServerSystemKey();\n             }\n             else {\n-                String systemType = System.getProperty(\"org.apache.commons.net.ftp.systemType\");\n-                if (systemType == null) {\n-                    systemType = this.getSystemType();\n-                    final Properties override = getOverrideProperties();\n-                    if (override != null) {\n-                        final String newType = override.getProperty(systemType);\n-                        if (newType != null) {\n-                            systemType = newType;\n+                String s2 = System.getProperty(\"org.apache.commons.net.ftp.systemType\");\n+                if (s2 == null) {\n+                    s2 = this.getSystemType();\n+                    final Properties overrideProperties = getOverrideProperties();\n+                    if (overrideProperties != null) {\n+                        final String property = overrideProperties.getProperty(s2);\n+                        if (property != null) {\n+                            s2 = property;\n                         }\n                     }\n                 }\n                 if (null != this.configuration) {\n-                    this.entryParser = this.parserFactory.createFileEntryParser(new FTPClientConfig(systemType, this.configuration));\n+                    this.entryParser = this.parserFactory.createFileEntryParser(new FTPClientConfig(s2, this.configuration));\n                 }\n                 else {\n-                    this.entryParser = this.parserFactory.createFileEntryParser(systemType);\n+                    this.entryParser = this.parserFactory.createFileEntryParser(s2);\n                 }\n-                this.entryParserKey = systemType;\n+                this.entryParserKey = s2;\n             }\n         }\n     }\n     \n-    public boolean deleteFile(final String pathname) throws IOException {\n-        return FTPReply.isPositiveCompletion(this.dele(pathname));\n+    public boolean deleteFile(final String s) throws IOException {\n+        return FTPReply.isPositiveCompletion(this.dele(s));\n     }\n     \n     public void disconnect() throws IOException {\n         super.disconnect();\n         this.initDefaults();\n     }\n     \n-    public boolean doCommand(final String command, final String params) throws IOException {\n-        return FTPReply.isPositiveCompletion(this.sendCommand(command, params));\n+    public boolean doCommand(final String s, final String s2) throws IOException {\n+        return FTPReply.isPositiveCompletion(this.sendCommand(s, s2));\n     }\n     \n-    public String[] doCommandAsStrings(final String command, final String params) throws IOException {\n-        final boolean success = FTPReply.isPositiveCompletion(this.sendCommand(command, params));\n-        if (success) {\n+    public String[] doCommandAsStrings(final String s, final String s2) throws IOException {\n+        if (FTPReply.isPositiveCompletion(this.sendCommand(s, s2))) {\n             return this.getReplyStrings();\n         }\n         return null;\n     }\n     \n     public void enterLocalActiveMode() {\n         this.dataConnectionMode = 0;\n@@ -540,16 +536,16 @@\n     \n     public void enterLocalPassiveMode() {\n         this.dataConnectionMode = 2;\n         this.passiveHost = null;\n         this.passivePort = -1;\n     }\n     \n-    public boolean enterRemoteActiveMode(final InetAddress host, final int port) throws IOException {\n-        if (FTPReply.isPositiveCompletion(this.port(host, port))) {\n+    public boolean enterRemoteActiveMode(final InetAddress inetAddress, final int n) throws IOException {\n+        if (FTPReply.isPositiveCompletion(this.port(inetAddress, n))) {\n             this.dataConnectionMode = 1;\n             this.passiveHost = null;\n             this.passivePort = -1;\n             return true;\n         }\n         return false;\n     }\n@@ -563,29 +559,29 @@\n         return true;\n     }\n     \n     public boolean features() throws IOException {\n         return FTPReply.isPositiveCompletion(this.feat());\n     }\n     \n-    public String featureValue(final String feature) throws IOException {\n-        final String[] values = this.featureValues(feature);\n-        if (values != null) {\n-            return values[0];\n+    public String featureValue(final String s) throws IOException {\n+        final String[] featureValues = this.featureValues(s);\n+        if (featureValues != null) {\n+            return featureValues[0];\n         }\n         return null;\n     }\n     \n-    public String[] featureValues(final String feature) throws IOException {\n+    public String[] featureValues(final String s) throws IOException {\n         if (!this.initFeatureMap()) {\n             return null;\n         }\n-        final Set<String> entries = (Set<String>)this.featuresMap.get(feature.toUpperCase(Locale.ENGLISH));\n-        if (entries != null) {\n-            return entries.toArray(NetConstants.EMPTY_STRING_ARRAY);\n+        final Set set = (Set)this.featuresMap.get(s.toUpperCase(Locale.ENGLISH));\n+        if (set != null) {\n+            return (String[])set.toArray(NetConstants.EMPTY_STRING_ARRAY);\n         }\n         return null;\n     }\n     \n     int getActivePort() {\n         if (this.activeMinPort <= 0 || this.activeMaxPort < this.activeMinPort) {\n             return 0;\n@@ -660,33 +656,33 @@\n     InetAddress getHostAddress() {\n         if (this.activeExternalHost != null) {\n             return this.activeExternalHost;\n         }\n         return this.getLocalAddress();\n     }\n     \n-    protected String getListArguments(final String pathname) {\n+    protected String getListArguments(final String str) {\n         if (!this.getListHiddenFiles()) {\n-            return pathname;\n+            return str;\n         }\n-        if (pathname != null) {\n-            final StringBuilder sb = new StringBuilder(pathname.length() + 3);\n+        if (str != null) {\n+            final StringBuilder sb = new StringBuilder(str.length() + 3);\n             sb.append(\"-a \");\n-            sb.append(pathname);\n+            sb.append(str);\n             return sb.toString();\n         }\n         return \"-a\";\n     }\n     \n     public boolean getListHiddenFiles() {\n         return this.listHiddenFiles;\n     }\n     \n-    public String getModificationTime(final String pathname) throws IOException {\n-        if (FTPReply.isPositiveCompletion(this.mdtm(pathname))) {\n+    public String getModificationTime(final String s) throws IOException {\n+        if (FTPReply.isPositiveCompletion(this.mdtm(s))) {\n             return this.getReplyString(0).substring(4);\n         }\n         return null;\n     }\n     \n     public String getPassiveHost() {\n         return this.passiveHost;\n@@ -715,30 +711,30 @@\n         return this.restartOffset;\n     }\n     \n     public int getSendDataSocketBufferSize() {\n         return this.sendDataSocketBufferSize;\n     }\n     \n-    public String getSize(final String pathname) throws IOException {\n-        if (FTPReply.isPositiveCompletion(this.size(pathname))) {\n+    public String getSize(final String s) throws IOException {\n+        if (FTPReply.isPositiveCompletion(this.size(s))) {\n             return this.getReplyString(0).substring(4);\n         }\n         return null;\n     }\n     \n     public String getStatus() throws IOException {\n         if (FTPReply.isPositiveCompletion(this.stat())) {\n             return this.getReplyString();\n         }\n         return null;\n     }\n     \n-    public String getStatus(final String pathname) throws IOException {\n-        if (FTPReply.isPositiveCompletion(this.stat(pathname))) {\n+    public String getStatus(final String s) throws IOException {\n+        if (FTPReply.isPositiveCompletion(this.stat(s))) {\n             return this.getReplyString();\n         }\n         return null;\n     }\n     \n     @Deprecated\n     public String getSystemName() throws IOException {\n@@ -750,38 +746,38 @@\n     \n     public String getSystemType() throws IOException {\n         if (this.systemName == null) {\n             if (FTPReply.isPositiveCompletion(this.syst())) {\n                 this.systemName = ((String)this._replyLines.get(this._replyLines.size() - 1)).substring(4);\n             }\n             else {\n-                final String systDefault = System.getProperty(\"org.apache.commons.net.ftp.systemType.default\");\n-                if (systDefault == null) {\n+                final String property = System.getProperty(\"org.apache.commons.net.ftp.systemType.default\");\n+                if (property == null) {\n                     throw new IOException(\"Unable to determine system type - response: \" + this.getReplyString());\n                 }\n-                this.systemName = systDefault;\n+                this.systemName = property;\n             }\n         }\n         return this.systemName;\n     }\n     \n-    public boolean hasFeature(final FTPCmd feature) throws IOException {\n-        return this.hasFeature(feature.name());\n+    public boolean hasFeature(final FTPCmd ftpCmd) throws IOException {\n+        return this.hasFeature(ftpCmd.name());\n     }\n     \n-    public boolean hasFeature(final String feature) throws IOException {\n-        return this.initFeatureMap() && this.featuresMap.containsKey(feature.toUpperCase(Locale.ENGLISH));\n+    public boolean hasFeature(final String s) throws IOException {\n+        return this.initFeatureMap() && this.featuresMap.containsKey(s.toUpperCase(Locale.ENGLISH));\n     }\n     \n-    public boolean hasFeature(final String feature, final String value) throws IOException {\n+    public boolean hasFeature(final String s, final String s2) throws IOException {\n         if (!this.initFeatureMap()) {\n             return false;\n         }\n-        final Set<String> entries = (Set<String>)this.featuresMap.get(feature.toUpperCase(Locale.ENGLISH));\n-        return entries != null && entries.contains(value);\n+        final Set set = (Set)this.featuresMap.get(s.toUpperCase(Locale.ENGLISH));\n+        return set != null && set.contains(s2);\n     }\n     \n     private void initDefaults() {\n         this.dataConnectionMode = 0;\n         this.passiveHost = null;\n         this.passivePort = -1;\n         this.activeExternalHost = null;\n@@ -797,91 +793,89 @@\n         this.entryParser = null;\n         this.entryParserKey = \"\";\n         this.featuresMap = null;\n     }\n     \n     private boolean initFeatureMap() throws IOException {\n         if (this.featuresMap == null) {\n-            final int replyCode = this.feat();\n-            if (replyCode == 530) {\n+            final int feat = this.feat();\n+            if (feat == 530) {\n                 return false;\n             }\n-            final boolean success = FTPReply.isPositiveCompletion(replyCode);\n+            final boolean positiveCompletion = FTPReply.isPositiveCompletion(feat);\n             this.featuresMap = new HashMap<String, Set<String>>();\n-            if (!success) {\n+            if (!positiveCompletion) {\n                 return false;\n             }\n-            for (final String line : this._replyLines) {\n-                if (line.startsWith(\" \")) {\n-                    String value = \"\";\n-                    final int varsep = line.indexOf(32, 1);\n-                    String key;\n-                    if (varsep > 0) {\n-                        key = line.substring(1, varsep);\n-                        value = line.substring(varsep + 1);\n+            for (final String s : this._replyLines) {\n+                if (s.startsWith(\" \")) {\n+                    String substring = \"\";\n+                    final int index = s.indexOf(32, 1);\n+                    String s2;\n+                    if (index > 0) {\n+                        s2 = s.substring(1, index);\n+                        substring = s.substring(index + 1);\n                     }\n                     else {\n-                        key = line.substring(1);\n+                        s2 = s.substring(1);\n                     }\n-                    key = key.toUpperCase(Locale.ENGLISH);\n-                    final Set<String> entries = (Set<String>)this.featuresMap.computeIfAbsent(key, k -> new HashSet());\n-                    entries.add(value);\n+                    ((Set<String>)this.featuresMap.computeIfAbsent(s2.toUpperCase(Locale.ENGLISH), p0 -> new HashSet())).add(substring);\n                 }\n             }\n         }\n         return true;\n     }\n     \n     public FTPListParseEngine initiateListParsing() throws IOException {\n         return this.initiateListParsing(null);\n     }\n     \n-    private FTPListParseEngine initiateListParsing(final FTPFileEntryParser parser, final String pathname) throws IOException {\n-        final Socket socket = this._openDataConnection_(FTPCmd.LIST, this.getListArguments(pathname));\n-        final FTPListParseEngine engine = new FTPListParseEngine(parser, this.configuration);\n-        if (socket == null) {\n-            return engine;\n+    private FTPListParseEngine initiateListParsing(final FTPFileEntryParser ftpFileEntryParser, final String s) throws IOException {\n+        final Socket openDataConnection_ = this._openDataConnection_(FTPCmd.LIST, this.getListArguments(s));\n+        final FTPListParseEngine ftpListParseEngine = new FTPListParseEngine(ftpFileEntryParser, this.configuration);\n+        if (openDataConnection_ == null) {\n+            return ftpListParseEngine;\n         }\n         try {\n-            engine.readServerList(socket.getInputStream(), this.getControlEncoding());\n+            ftpListParseEngine.readServerList(openDataConnection_.getInputStream(), this.getControlEncoding());\n         }\n         finally {\n-            Util.closeQuietly(socket);\n+            Util.closeQuietly(openDataConnection_);\n         }\n         this.completePendingCommand();\n-        return engine;\n+        return ftpListParseEngine;\n     }\n     \n-    public FTPListParseEngine initiateListParsing(final String pathname) throws IOException {\n-        return this.initiateListParsing((String)null, pathname);\n+    public FTPListParseEngine initiateListParsing(final String s) throws IOException {\n+        return this.initiateListParsing((String)null, s);\n     }\n     \n-    public FTPListParseEngine initiateListParsing(final String parserKey, final String pathname) throws IOException {\n-        this.createParser(parserKey);\n-        return this.initiateListParsing(this.entryParser, pathname);\n+    public FTPListParseEngine initiateListParsing(final String s, final String s2) throws IOException {\n+        this.createParser(s);\n+        return this.initiateListParsing(this.entryParser, s2);\n     }\n     \n     public FTPListParseEngine initiateMListParsing() throws IOException {\n         return this.initiateMListParsing(null);\n     }\n     \n-    public FTPListParseEngine initiateMListParsing(final String pathname) throws IOException {\n-        final Socket socket = this._openDataConnection_(FTPCmd.MLSD, pathname);\n-        final FTPListParseEngine engine = new FTPListParseEngine((FTPFileEntryParser)MLSxEntryParser.getInstance(), this.configuration);\n-        if (socket == null) {\n-            return engine;\n+    public FTPListParseEngine initiateMListParsing(final String s) throws IOException {\n+        final Socket openDataConnection_ = this._openDataConnection_(FTPCmd.MLSD, s);\n+        final FTPListParseEngine ftpListParseEngine = new FTPListParseEngine((FTPFileEntryParser)MLSxEntryParser.getInstance(), this.configuration);\n+        if (openDataConnection_ == null) {\n+            return ftpListParseEngine;\n         }\n         try {\n-            engine.readServerList(socket.getInputStream(), this.getControlEncoding());\n+            ftpListParseEngine.readServerList(openDataConnection_.getInputStream(), this.getControlEncoding());\n         }\n         finally {\n-            Util.closeQuietly(socket);\n+            Util.closeQuietly(openDataConnection_);\n             this.completePendingCommand();\n         }\n-        return engine;\n+        return ftpListParseEngine;\n     }\n     \n     public boolean isIpAddressFromPasvResponse() {\n         return this.ipAddressFromPasvResponse;\n     }\n     \n     public boolean isRemoteVerificationEnabled() {\n@@ -892,157 +886,155 @@\n         return this.useEPSVwithIPv4;\n     }\n     \n     public FTPFile[] listDirectories() throws IOException {\n         return this.listDirectories(null);\n     }\n     \n-    public FTPFile[] listDirectories(final String parent) throws IOException {\n-        return this.listFiles(parent, FTPFileFilters.DIRECTORIES);\n+    public FTPFile[] listDirectories(final String s) throws IOException {\n+        return this.listFiles(s, FTPFileFilters.DIRECTORIES);\n     }\n     \n     public FTPFile[] listFiles() throws IOException {\n         return this.listFiles(null);\n     }\n     \n-    public FTPFile[] listFiles(final String pathname) throws IOException {\n-        return this.initiateListParsing((String)null, pathname).getFiles();\n+    public FTPFile[] listFiles(final String s) throws IOException {\n+        return this.initiateListParsing((String)null, s).getFiles();\n     }\n     \n-    public FTPFile[] listFiles(final String pathname, final FTPFileFilter filter) throws IOException {\n-        return this.initiateListParsing((String)null, pathname).getFiles(filter);\n+    public FTPFile[] listFiles(final String s, final FTPFileFilter ftpFileFilter) throws IOException {\n+        return this.initiateListParsing((String)null, s).getFiles(ftpFileFilter);\n     }\n     \n     public String listHelp() throws IOException {\n         return FTPReply.isPositiveCompletion(this.help()) ? this.getReplyString() : null;\n     }\n     \n-    public String listHelp(final String command) throws IOException {\n-        return FTPReply.isPositiveCompletion(this.help(command)) ? this.getReplyString() : null;\n+    public String listHelp(final String s) throws IOException {\n+        return FTPReply.isPositiveCompletion(this.help(s)) ? this.getReplyString() : null;\n     }\n     \n     public String[] listNames() throws IOException {\n         return this.listNames(null);\n     }\n     \n-    public String[] listNames(final String pathname) throws IOException {\n-        final ArrayList<String> results = new ArrayList<String>();\n-        try (final Socket socket = this._openDataConnection_(FTPCmd.NLST, this.getListArguments(pathname))) {\n-            if (socket == null) {\n+    public String[] listNames(final String s) throws IOException {\n+        final ArrayList list = new ArrayList();\n+        try (final Socket openDataConnection_ = this._openDataConnection_(FTPCmd.NLST, this.getListArguments(s))) {\n+            if (openDataConnection_ == null) {\n                 final String[] array = null;\n-                if (socket != null) {\n-                    socket.close();\n+                if (openDataConnection_ != null) {\n+                    openDataConnection_.close();\n                 }\n                 return array;\n             }\n-            try (final BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), this.getControlEncoding()))) {\n+            try (final BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(openDataConnection_.getInputStream(), this.getControlEncoding()))) {\n                 String line;\n-                while ((line = reader.readLine()) != null) {\n-                    results.add(line);\n+                while ((line = bufferedReader.readLine()) != null) {\n+                    list.add(line);\n                 }\n             }\n         }\n         if (this.completePendingCommand()) {\n-            return results.toArray(NetConstants.EMPTY_STRING_ARRAY);\n+            return list.toArray(NetConstants.EMPTY_STRING_ARRAY);\n         }\n         return null;\n     }\n     \n-    public boolean login(final String username, final String password) throws IOException {\n-        this.user(username);\n-        return FTPReply.isPositiveCompletion(this._replyCode) || (FTPReply.isPositiveIntermediate(this._replyCode) && FTPReply.isPositiveCompletion(this.pass(password)));\n+    public boolean login(final String s, final String s2) throws IOException {\n+        this.user(s);\n+        return FTPReply.isPositiveCompletion(this._replyCode) || (FTPReply.isPositiveIntermediate(this._replyCode) && FTPReply.isPositiveCompletion(this.pass(s2)));\n     }\n     \n-    public boolean login(final String username, final String password, final String account) throws IOException {\n-        this.user(username);\n+    public boolean login(final String s, final String s2, final String s3) throws IOException {\n+        this.user(s);\n         if (FTPReply.isPositiveCompletion(this._replyCode)) {\n             return true;\n         }\n         if (!FTPReply.isPositiveIntermediate(this._replyCode)) {\n             return false;\n         }\n-        this.pass(password);\n-        return FTPReply.isPositiveCompletion(this._replyCode) || (FTPReply.isPositiveIntermediate(this._replyCode) && FTPReply.isPositiveCompletion(this.acct(account)));\n+        this.pass(s2);\n+        return FTPReply.isPositiveCompletion(this._replyCode) || (FTPReply.isPositiveIntermediate(this._replyCode) && FTPReply.isPositiveCompletion(this.acct(s3)));\n     }\n     \n     public boolean logout() throws IOException {\n         return FTPReply.isPositiveCompletion(this.quit());\n     }\n     \n-    public boolean makeDirectory(final String pathname) throws IOException {\n-        return FTPReply.isPositiveCompletion(this.mkd(pathname));\n+    public boolean makeDirectory(final String s) throws IOException {\n+        return FTPReply.isPositiveCompletion(this.mkd(s));\n     }\n     \n-    public Calendar mdtmCalendar(final String pathname) throws IOException {\n-        final String modificationTime = this.getModificationTime(pathname);\n+    public Calendar mdtmCalendar(final String s) throws IOException {\n+        final String modificationTime = this.getModificationTime(s);\n         if (modificationTime != null) {\n             return MLSxEntryParser.parseGMTdateTime(modificationTime);\n         }\n         return null;\n     }\n     \n-    public FTPFile mdtmFile(final String pathname) throws IOException {\n-        final String modificationTime = this.getModificationTime(pathname);\n+    public FTPFile mdtmFile(final String name) throws IOException {\n+        final String modificationTime = this.getModificationTime(name);\n         if (modificationTime != null) {\n-            final FTPFile file = new FTPFile();\n-            file.setName(pathname);\n-            file.setRawListing(modificationTime);\n-            file.setTimestamp(MLSxEntryParser.parseGMTdateTime(modificationTime));\n-            return file;\n+            final FTPFile ftpFile = new FTPFile();\n+            ftpFile.setName(name);\n+            ftpFile.setRawListing(modificationTime);\n+            ftpFile.setTimestamp(MLSxEntryParser.parseGMTdateTime(modificationTime));\n+            return ftpFile;\n         }\n         return null;\n     }\n     \n-    public Instant mdtmInstant(final String pathname) throws IOException {\n-        final String modificationTime = this.getModificationTime(pathname);\n+    public Instant mdtmInstant(final String s) throws IOException {\n+        final String modificationTime = this.getModificationTime(s);\n         if (modificationTime != null) {\n             return MLSxEntryParser.parseGmtInstant(modificationTime);\n         }\n         return null;\n     }\n     \n-    private CopyStreamListener mergeListeners(final CopyStreamListener local) {\n-        if (local == null) {\n+    private CopyStreamListener mergeListeners(final CopyStreamListener copyStreamListener) {\n+        if (copyStreamListener == null) {\n             return this.copyStreamListener;\n         }\n         if (this.copyStreamListener == null) {\n-            return local;\n+            return copyStreamListener;\n         }\n-        final CopyStreamAdapter merged = new CopyStreamAdapter();\n-        merged.addCopyStreamListener(local);\n-        merged.addCopyStreamListener(this.copyStreamListener);\n-        return (CopyStreamListener)merged;\n+        final CopyStreamAdapter copyStreamAdapter = new CopyStreamAdapter();\n+        copyStreamAdapter.addCopyStreamListener(copyStreamListener);\n+        copyStreamAdapter.addCopyStreamListener(this.copyStreamListener);\n+        return (CopyStreamListener)copyStreamAdapter;\n     }\n     \n     public FTPFile[] mlistDir() throws IOException {\n         return this.mlistDir(null);\n     }\n     \n-    public FTPFile[] mlistDir(final String pathname) throws IOException {\n-        return this.initiateMListParsing(pathname).getFiles();\n+    public FTPFile[] mlistDir(final String s) throws IOException {\n+        return this.initiateMListParsing(s).getFiles();\n     }\n     \n-    public FTPFile[] mlistDir(final String pathname, final FTPFileFilter filter) throws IOException {\n-        return this.initiateMListParsing(pathname).getFiles(filter);\n+    public FTPFile[] mlistDir(final String s, final FTPFileFilter ftpFileFilter) throws IOException {\n+        return this.initiateMListParsing(s).getFiles(ftpFileFilter);\n     }\n     \n-    public FTPFile mlistFile(final String pathname) throws IOException {\n-        final boolean success = FTPReply.isPositiveCompletion(this.sendCommand(FTPCmd.MLST, pathname));\n-        if (!success) {\n+    public FTPFile mlistFile(final String s) throws IOException {\n+        if (!FTPReply.isPositiveCompletion(this.sendCommand(FTPCmd.MLST, s))) {\n             return null;\n         }\n-        String reply = this.getReplyString(1);\n-        if (reply.charAt(0) != ' ') {\n-            reply = \" \" + reply;\n+        String s2 = this.getReplyString(1);\n+        if (s2.charAt(0) != ' ') {\n+            s2 = \" \" + s2;\n         }\n-        if (reply.length() < 3) {\n-            throw new MalformedServerReplyException(\"Invalid server reply (MLST): '\" + reply + \"'\");\n+        if (s2.length() < 3) {\n+            throw new MalformedServerReplyException(\"Invalid server reply (MLST): '\" + s2 + \"'\");\n         }\n-        final String entry = reply.replaceAll(\"^\\\\s+\", \"\");\n-        return MLSxEntryParser.parseEntry(entry);\n+        return MLSxEntryParser.parseEntry(s2.replaceAll(\"^\\\\s+\", \"\"));\n     }\n     \n     public String printWorkingDirectory() throws IOException {\n         if (this.pwd() != 257) {\n             return null;\n         }\n         return parsePathname(this._replyLines.get(this._replyLines.size() - 1));\n@@ -1053,237 +1045,237 @@\n         if (FTPReply.isPositiveCompletion(this._replyCode) || (FTPReply.isPositivePreliminary(this._replyCode) && FTPReply.isPositiveCompletion(this.getReply()))) {\n             this.initDefaults();\n             return true;\n         }\n         return false;\n     }\n     \n-    public boolean remoteAppend(final String fileName) throws IOException {\n-        return (this.dataConnectionMode == 1 || this.dataConnectionMode == 3) && FTPReply.isPositivePreliminary(this.appe(fileName));\n+    public boolean remoteAppend(final String s) throws IOException {\n+        return (this.dataConnectionMode == 1 || this.dataConnectionMode == 3) && FTPReply.isPositivePreliminary(this.appe(s));\n     }\n     \n-    public boolean remoteRetrieve(final String fileName) throws IOException {\n-        return (this.dataConnectionMode == 1 || this.dataConnectionMode == 3) && FTPReply.isPositivePreliminary(this.retr(fileName));\n+    public boolean remoteRetrieve(final String s) throws IOException {\n+        return (this.dataConnectionMode == 1 || this.dataConnectionMode == 3) && FTPReply.isPositivePreliminary(this.retr(s));\n     }\n     \n-    public boolean remoteStore(final String fileName) throws IOException {\n-        return (this.dataConnectionMode == 1 || this.dataConnectionMode == 3) && FTPReply.isPositivePreliminary(this.stor(fileName));\n+    public boolean remoteStore(final String s) throws IOException {\n+        return (this.dataConnectionMode == 1 || this.dataConnectionMode == 3) && FTPReply.isPositivePreliminary(this.stor(s));\n     }\n     \n     public boolean remoteStoreUnique() throws IOException {\n         return (this.dataConnectionMode == 1 || this.dataConnectionMode == 3) && FTPReply.isPositivePreliminary(this.stou());\n     }\n     \n-    public boolean remoteStoreUnique(final String fileName) throws IOException {\n-        return (this.dataConnectionMode == 1 || this.dataConnectionMode == 3) && FTPReply.isPositivePreliminary(this.stou(fileName));\n+    public boolean remoteStoreUnique(final String s) throws IOException {\n+        return (this.dataConnectionMode == 1 || this.dataConnectionMode == 3) && FTPReply.isPositivePreliminary(this.stou(s));\n     }\n     \n-    public boolean removeDirectory(final String pathname) throws IOException {\n-        return FTPReply.isPositiveCompletion(this.rmd(pathname));\n+    public boolean removeDirectory(final String s) throws IOException {\n+        return FTPReply.isPositiveCompletion(this.rmd(s));\n     }\n     \n-    public boolean rename(final String from, final String to) throws IOException {\n-        return FTPReply.isPositiveIntermediate(this.rnfr(from)) && FTPReply.isPositiveCompletion(this.rnto(to));\n+    public boolean rename(final String s, final String s2) throws IOException {\n+        return FTPReply.isPositiveIntermediate(this.rnfr(s)) && FTPReply.isPositiveCompletion(this.rnto(s2));\n     }\n     \n-    protected boolean restart(final long offset) throws IOException {\n+    protected boolean restart(final long i) throws IOException {\n         this.restartOffset = 0L;\n-        return FTPReply.isPositiveIntermediate(this.rest(Long.toString(offset)));\n+        return FTPReply.isPositiveIntermediate(this.rest(Long.toString(i)));\n     }\n     \n-    public boolean retrieveFile(final String remote, final OutputStream local) throws IOException {\n-        return this._retrieveFile(FTPCmd.RETR.getCommand(), remote, local);\n+    public boolean retrieveFile(final String s, final OutputStream outputStream) throws IOException {\n+        return this._retrieveFile(FTPCmd.RETR.getCommand(), s, outputStream);\n     }\n     \n-    public InputStream retrieveFileStream(final String remote) throws IOException {\n-        return this._retrieveFileStream(FTPCmd.RETR.getCommand(), remote);\n+    public InputStream retrieveFileStream(final String s) throws IOException {\n+        return this._retrieveFileStream(FTPCmd.RETR.getCommand(), s);\n     }\n     \n     public boolean sendNoOp() throws IOException {\n         return FTPReply.isPositiveCompletion(this.noop());\n     }\n     \n-    public boolean sendSiteCommand(final String arguments) throws IOException {\n-        return FTPReply.isPositiveCompletion(this.site(arguments));\n+    public boolean sendSiteCommand(final String s) throws IOException {\n+        return FTPReply.isPositiveCompletion(this.site(s));\n     }\n     \n-    public void setActiveExternalIPAddress(final String ipAddress) throws UnknownHostException {\n-        this.activeExternalHost = InetAddress.getByName(ipAddress);\n+    public void setActiveExternalIPAddress(final String host) throws UnknownHostException {\n+        this.activeExternalHost = InetAddress.getByName(host);\n     }\n     \n-    public void setActivePortRange(final int minPort, final int maxPort) {\n-        this.activeMinPort = minPort;\n-        this.activeMaxPort = maxPort;\n+    public void setActivePortRange(final int activeMinPort, final int activeMaxPort) {\n+        this.activeMinPort = activeMinPort;\n+        this.activeMaxPort = activeMaxPort;\n     }\n     \n-    public void setAutodetectUTF8(final boolean autodetect) {\n-        this.autodetectEncoding = autodetect;\n+    public void setAutodetectUTF8(final boolean autodetectEncoding) {\n+        this.autodetectEncoding = autodetectEncoding;\n     }\n     \n-    public void setBufferSize(final int bufSize) {\n-        this.bufferSize = bufSize;\n+    public void setBufferSize(final int bufferSize) {\n+        this.bufferSize = bufferSize;\n     }\n     \n-    public void setControlKeepAliveReplyTimeout(final Duration timeout) {\n-        this.controlKeepAliveReplyTimeout = DurationUtils.zeroIfNull(timeout);\n+    public void setControlKeepAliveReplyTimeout(final Duration duration) {\n+        this.controlKeepAliveReplyTimeout = DurationUtils.zeroIfNull(duration);\n     }\n     \n     @Deprecated\n-    public void setControlKeepAliveReplyTimeout(final int timeoutMillis) {\n-        this.controlKeepAliveReplyTimeout = Duration.ofMillis(timeoutMillis);\n+    public void setControlKeepAliveReplyTimeout(final int n) {\n+        this.controlKeepAliveReplyTimeout = Duration.ofMillis(n);\n     }\n     \n-    public void setControlKeepAliveTimeout(final Duration controlIdle) {\n-        this.controlKeepAliveTimeout = DurationUtils.zeroIfNull(controlIdle);\n+    public void setControlKeepAliveTimeout(final Duration duration) {\n+        this.controlKeepAliveTimeout = DurationUtils.zeroIfNull(duration);\n     }\n     \n     @Deprecated\n-    public void setControlKeepAliveTimeout(final long controlIdleSeconds) {\n-        this.controlKeepAliveTimeout = Duration.ofSeconds(controlIdleSeconds);\n+    public void setControlKeepAliveTimeout(final long seconds) {\n+        this.controlKeepAliveTimeout = Duration.ofSeconds(seconds);\n     }\n     \n-    public void setCopyStreamListener(final CopyStreamListener listener) {\n-        this.copyStreamListener = listener;\n+    public void setCopyStreamListener(final CopyStreamListener copyStreamListener) {\n+        this.copyStreamListener = copyStreamListener;\n     }\n     \n-    public void setDataTimeout(final Duration timeout) {\n-        this.dataTimeout = DurationUtils.zeroIfNull(timeout);\n+    public void setDataTimeout(final Duration duration) {\n+        this.dataTimeout = DurationUtils.zeroIfNull(duration);\n     }\n     \n     @Deprecated\n-    public void setDataTimeout(final int timeoutMillis) {\n-        this.dataTimeout = Duration.ofMillis(timeoutMillis);\n+    public void setDataTimeout(final int n) {\n+        this.dataTimeout = Duration.ofMillis(n);\n     }\n     \n-    public boolean setFileStructure(final int structure) throws IOException {\n-        if (FTPReply.isPositiveCompletion(this.stru(structure))) {\n-            this.fileStructure = structure;\n+    public boolean setFileStructure(final int fileStructure) throws IOException {\n+        if (FTPReply.isPositiveCompletion(this.stru(fileStructure))) {\n+            this.fileStructure = fileStructure;\n             return true;\n         }\n         return false;\n     }\n     \n-    public boolean setFileTransferMode(final int mode) throws IOException {\n-        if (FTPReply.isPositiveCompletion(this.mode(mode))) {\n-            this.fileTransferMode = mode;\n+    public boolean setFileTransferMode(final int fileTransferMode) throws IOException {\n+        if (FTPReply.isPositiveCompletion(this.mode(fileTransferMode))) {\n+            this.fileTransferMode = fileTransferMode;\n             return true;\n         }\n         return false;\n     }\n     \n     public boolean setFileType(final int fileType) throws IOException {\n         if (FTPReply.isPositiveCompletion(this.type(fileType))) {\n             this.fileType = fileType;\n             this.fileFormat = 4;\n             return true;\n         }\n         return false;\n     }\n     \n-    public boolean setFileType(final int fileType, final int formatOrByteSize) throws IOException {\n-        if (FTPReply.isPositiveCompletion(this.type(fileType, formatOrByteSize))) {\n+    public boolean setFileType(final int fileType, final int fileFormat) throws IOException {\n+        if (FTPReply.isPositiveCompletion(this.type(fileType, fileFormat))) {\n             this.fileType = fileType;\n-            this.fileFormat = formatOrByteSize;\n+            this.fileFormat = fileFormat;\n             return true;\n         }\n         return false;\n     }\n     \n-    public void setIpAddressFromPasvResponse(final boolean usingIpAddressFromPasvResponse) {\n-        this.ipAddressFromPasvResponse = usingIpAddressFromPasvResponse;\n+    public void setIpAddressFromPasvResponse(final boolean ipAddressFromPasvResponse) {\n+        this.ipAddressFromPasvResponse = ipAddressFromPasvResponse;\n     }\n     \n     public void setListHiddenFiles(final boolean listHiddenFiles) {\n         this.listHiddenFiles = listHiddenFiles;\n     }\n     \n-    public boolean setModificationTime(final String pathname, final String timeval) throws IOException {\n-        return FTPReply.isPositiveCompletion(this.mfmt(pathname, timeval));\n+    public boolean setModificationTime(final String s, final String s2) throws IOException {\n+        return FTPReply.isPositiveCompletion(this.mfmt(s, s2));\n     }\n     \n     public void setParserFactory(final FTPFileEntryParserFactory parserFactory) {\n         this.parserFactory = parserFactory;\n     }\n     \n-    public void setPassiveLocalIPAddress(final InetAddress inetAddress) {\n-        this.passiveLocalHost = inetAddress;\n+    public void setPassiveLocalIPAddress(final InetAddress passiveLocalHost) {\n+        this.passiveLocalHost = passiveLocalHost;\n     }\n     \n-    public void setPassiveLocalIPAddress(final String ipAddress) throws UnknownHostException {\n-        this.passiveLocalHost = InetAddress.getByName(ipAddress);\n+    public void setPassiveLocalIPAddress(final String host) throws UnknownHostException {\n+        this.passiveLocalHost = InetAddress.getByName(host);\n     }\n     \n     @Deprecated\n-    public void setPassiveNatWorkaround(final boolean enabled) {\n-        this.passiveNatWorkaroundStrategy = (FTPClient.HostnameResolver)(enabled ? new FTPClient.NatServerResolverImpl(this) : null);\n+    public void setPassiveNatWorkaround(final boolean b) {\n+        this.passiveNatWorkaroundStrategy = (FTPClient.HostnameResolver)(b ? new FTPClient.NatServerResolverImpl(this) : null);\n     }\n     \n-    public void setPassiveNatWorkaroundStrategy(final FTPClient.HostnameResolver resolver) {\n-        this.passiveNatWorkaroundStrategy = resolver;\n+    public void setPassiveNatWorkaroundStrategy(final FTPClient.HostnameResolver passiveNatWorkaroundStrategy) {\n+        this.passiveNatWorkaroundStrategy = passiveNatWorkaroundStrategy;\n     }\n     \n-    public void setReceieveDataSocketBufferSize(final int bufSize) {\n-        this.receiveDataSocketBufferSize = bufSize;\n+    public void setReceieveDataSocketBufferSize(final int receiveDataSocketBufferSize) {\n+        this.receiveDataSocketBufferSize = receiveDataSocketBufferSize;\n     }\n     \n-    public void setRemoteVerificationEnabled(final boolean enable) {\n-        this.remoteVerificationEnabled = enable;\n+    public void setRemoteVerificationEnabled(final boolean remoteVerificationEnabled) {\n+        this.remoteVerificationEnabled = remoteVerificationEnabled;\n     }\n     \n-    public void setReportActiveExternalIPAddress(final String ipAddress) throws UnknownHostException {\n-        this.reportActiveExternalHost = InetAddress.getByName(ipAddress);\n+    public void setReportActiveExternalIPAddress(final String host) throws UnknownHostException {\n+        this.reportActiveExternalHost = InetAddress.getByName(host);\n     }\n     \n-    public void setRestartOffset(final long offset) {\n-        if (offset >= 0L) {\n-            this.restartOffset = offset;\n+    public void setRestartOffset(final long restartOffset) {\n+        if (restartOffset >= 0L) {\n+            this.restartOffset = restartOffset;\n         }\n     }\n     \n-    public void setSendDataSocketBufferSize(final int bufSize) {\n-        this.sendDataSocketBufferSize = bufSize;\n+    public void setSendDataSocketBufferSize(final int sendDataSocketBufferSize) {\n+        this.sendDataSocketBufferSize = sendDataSocketBufferSize;\n     }\n     \n-    public void setUseEPSVwithIPv4(final boolean selected) {\n-        this.useEPSVwithIPv4 = selected;\n+    public void setUseEPSVwithIPv4(final boolean useEPSVwithIPv4) {\n+        this.useEPSVwithIPv4 = useEPSVwithIPv4;\n     }\n     \n-    private boolean storeFile(final FTPCmd command, final String remote, final InputStream local) throws IOException {\n-        return this._storeFile(command.getCommand(), remote, local);\n+    private boolean storeFile(final FTPCmd ftpCmd, final String s, final InputStream inputStream) throws IOException {\n+        return this._storeFile(ftpCmd.getCommand(), s, inputStream);\n     }\n     \n-    public boolean storeFile(final String remote, final InputStream local) throws IOException {\n-        return this.storeFile(FTPCmd.STOR, remote, local);\n+    public boolean storeFile(final String s, final InputStream inputStream) throws IOException {\n+        return this.storeFile(FTPCmd.STOR, s, inputStream);\n     }\n     \n-    private OutputStream storeFileStream(final FTPCmd command, final String remote) throws IOException {\n-        return this._storeFileStream(command.getCommand(), remote);\n+    private OutputStream storeFileStream(final FTPCmd ftpCmd, final String s) throws IOException {\n+        return this._storeFileStream(ftpCmd.getCommand(), s);\n     }\n     \n-    public OutputStream storeFileStream(final String remote) throws IOException {\n-        return this.storeFileStream(FTPCmd.STOR, remote);\n+    public OutputStream storeFileStream(final String s) throws IOException {\n+        return this.storeFileStream(FTPCmd.STOR, s);\n     }\n     \n-    public boolean storeUniqueFile(final InputStream local) throws IOException {\n-        return this.storeFile(FTPCmd.STOU, null, local);\n+    public boolean storeUniqueFile(final InputStream inputStream) throws IOException {\n+        return this.storeFile(FTPCmd.STOU, null, inputStream);\n     }\n     \n-    public boolean storeUniqueFile(final String remote, final InputStream local) throws IOException {\n-        return this.storeFile(FTPCmd.STOU, remote, local);\n+    public boolean storeUniqueFile(final String s, final InputStream inputStream) throws IOException {\n+        return this.storeFile(FTPCmd.STOU, s, inputStream);\n     }\n     \n     public OutputStream storeUniqueFileStream() throws IOException {\n         return this.storeFileStream(FTPCmd.STOU, null);\n     }\n     \n-    public OutputStream storeUniqueFileStream(final String remote) throws IOException {\n-        return this.storeFileStream(FTPCmd.STOU, remote);\n+    public OutputStream storeUniqueFileStream(final String s) throws IOException {\n+        return this.storeFileStream(FTPCmd.STOU, s);\n     }\n     \n-    public boolean structureMount(final String pathname) throws IOException {\n-        return FTPReply.isPositiveCompletion(this.smnt(pathname));\n+    public boolean structureMount(final String s) throws IOException {\n+        return FTPReply.isPositiveCompletion(this.smnt(s));\n     }\n     \n     static {\n         PARMS_PAT = Pattern.compile(\"(\\\\d{1,3},\\\\d{1,3},\\\\d{1,3},\\\\d{1,3}),(\\\\d{1,3}),(\\\\d{1,3})\");\n     }\n }\n"}]}
