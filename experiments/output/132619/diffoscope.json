{"diffoscope-json-version": 1, "source1": "first/Range.class", "source2": "second/Range.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -62,15 +62,15 @@\n     }\n     \n     public boolean isNaturalOrdering() {\n         return this.comparator == Range.ComparableComparator.INSTANCE;\n     }\n     \n     public boolean contains(final T element) {\n-        return element != null && this.comparator.compare(element, this.minimum) > -1 && this.comparator.compare(element, this.maximum) < 1;\n+        return element != null && (this.comparator.compare(element, this.minimum) > -1 && this.comparator.compare(element, this.maximum) < 1);\n     }\n     \n     public boolean isAfter(final T element) {\n         return element != null && this.comparator.compare(element, this.minimum) < 0;\n     }\n     \n     public boolean isStartedBy(final T element) {\n@@ -93,15 +93,15 @@\n         if (this.isBefore(element)) {\n             return 1;\n         }\n         return 0;\n     }\n     \n     public boolean containsRange(final Range<T> otherRange) {\n-        return otherRange != null && this.contains(otherRange.minimum) && this.contains(otherRange.maximum);\n+        return otherRange != null && (this.contains(otherRange.minimum) && this.contains(otherRange.maximum));\n     }\n     \n     public boolean isAfterRange(final Range<T> otherRange) {\n         return otherRange != null && this.isAfter(otherRange.maximum);\n     }\n     \n     public boolean isOverlappedBy(final Range<T> otherRange) {\n"}]}
