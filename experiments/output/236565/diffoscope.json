{"diffoscope-json-version": 1, "source1": "first/FileSystemProviders.class", "source2": "second/FileSystemProviders.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,46 +11,46 @@\n import java.util.List;\n \n public class FileSystemProviders\n {\n     private static final FileSystemProviders INSTALLED;\n     private final List<FileSystemProvider> providers;\n     \n-    public static FileSystemProvider getFileSystemProvider(final Path path) {\n-        return ((Path)Objects.requireNonNull(path, \"path\")).getFileSystem().provider();\n+    public static FileSystemProvider getFileSystemProvider(final Path obj) {\n+        return ((Path)Objects.requireNonNull(obj, \"path\")).getFileSystem().provider();\n     }\n     \n     public static FileSystemProviders installed() {\n         return FileSystemProviders.INSTALLED;\n     }\n     \n     private FileSystemProviders(final List<FileSystemProvider> providers) {\n         this.providers = providers;\n     }\n     \n-    public FileSystemProvider getFileSystemProvider(final String scheme) {\n-        Objects.requireNonNull(scheme, \"scheme\");\n-        if (scheme.equalsIgnoreCase(\"file\")) {\n+    public FileSystemProvider getFileSystemProvider(final String s) {\n+        Objects.requireNonNull(s, \"scheme\");\n+        if (s.equalsIgnoreCase(\"file\")) {\n             return FileSystems.getDefault().provider();\n         }\n         if (this.providers != null) {\n-            for (final FileSystemProvider provider : this.providers) {\n-                if (provider.getScheme().equalsIgnoreCase(scheme)) {\n-                    return provider;\n+            for (final FileSystemProvider fileSystemProvider : this.providers) {\n+                if (fileSystemProvider.getScheme().equalsIgnoreCase(s)) {\n+                    return fileSystemProvider;\n                 }\n             }\n         }\n         return null;\n     }\n     \n-    public FileSystemProvider getFileSystemProvider(final URI uri) {\n-        return this.getFileSystemProvider(((URI)Objects.requireNonNull(uri, \"uri\")).getScheme());\n+    public FileSystemProvider getFileSystemProvider(final URI obj) {\n+        return this.getFileSystemProvider(((URI)Objects.requireNonNull(obj, \"uri\")).getScheme());\n     }\n     \n-    public FileSystemProvider getFileSystemProvider(final URL url) {\n-        return this.getFileSystemProvider(((URL)Objects.requireNonNull(url, \"url\")).getProtocol());\n+    public FileSystemProvider getFileSystemProvider(final URL obj) {\n+        return this.getFileSystemProvider(((URL)Objects.requireNonNull(obj, \"url\")).getProtocol());\n     }\n     \n     static {\n         INSTALLED = new FileSystemProviders(FileSystemProvider.installedProviders());\n     }\n }\n"}]}
