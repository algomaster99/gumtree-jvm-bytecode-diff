{"diffoscope-json-version": 1, "source1": "first/ModularRuntimeImage.class", "source2": "second/ModularRuntimeImage.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,36 +1,40 @@\n \n package org.apache.bcel.util;\n \n-import java.io.File;\n import java.nio.file.DirectoryStream;\n import java.util.function.Consumer;\n-import java.util.Objects;\n import java.nio.file.Files;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n import java.nio.file.Path;\n import java.util.Map;\n import java.net.URL;\n import java.nio.file.Paths;\n import java.util.Collections;\n import java.nio.file.FileSystems;\n import java.net.URI;\n+import java.io.File;\n import java.nio.file.FileSystem;\n import java.net.URLClassLoader;\n import java.io.Closeable;\n \n public class ModularRuntimeImage implements Closeable\n {\n     static final String MODULES_PATH;\n     static final String PACKAGES_PATH;\n     private final URLClassLoader classLoader;\n     private final FileSystem fileSystem;\n     \n+    static {\n+        MODULES_PATH = String.valueOf(File.separator) + \"modules\";\n+        PACKAGES_PATH = String.valueOf(File.separator) + \"packages\";\n+    }\n+    \n     public ModularRuntimeImage() {\n         this(null, FileSystems.getFileSystem(URI.create(\"jrt:/\")));\n     }\n     \n     public ModularRuntimeImage(final String javaHome) throws IOException {\n         final Map<String, ?> emptyMap = Collections.emptyMap();\n         final Path jrePath = Paths.get(javaHome, new String[0]);\n@@ -56,19 +60,37 @@\n     \n     public FileSystem getFileSystem() {\n         return this.fileSystem;\n     }\n     \n     public List<Path> list(final Path dirPath) throws IOException {\n         final List<Path> list = new ArrayList<Path>();\n-        try (final DirectoryStream<Path> ds = Files.newDirectoryStream(dirPath)) {\n-            final DirectoryStream<Path> directoryStream = ds;\n-            final List<Path> obj = list;\n-            Objects.requireNonNull((ArrayList)obj);\n-            directoryStream.forEach(obj::add);\n+        Throwable t = null;\n+        try {\n+            final DirectoryStream<Path> ds = Files.newDirectoryStream(dirPath);\n+            try {\n+                ds.forEach(list::add);\n+            }\n+            finally {\n+                if (ds != null) {\n+                    ds.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n         return list;\n     }\n     \n     public List<Path> list(final String dirName) throws IOException {\n         return this.list(this.fileSystem.getPath(dirName, new String[0]));\n     }\n@@ -76,13 +98,8 @@\n     public List<Path> modules() throws IOException {\n         return this.list(ModularRuntimeImage.MODULES_PATH);\n     }\n     \n     public List<Path> packages() throws IOException {\n         return this.list(ModularRuntimeImage.PACKAGES_PATH);\n     }\n-    \n-    static {\n-        MODULES_PATH = File.separator + \"modules\";\n-        PACKAGES_PATH = File.separator + \"packages\";\n-    }\n }\n"}]}
