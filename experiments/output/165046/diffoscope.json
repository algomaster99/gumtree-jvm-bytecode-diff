{"diffoscope-json-version": 1, "source1": "first/TarArchiveEntry.class", "source2": "second/TarArchiveEntry.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,325 +1,325 @@\n-  SHA-256 checksum dfae57e848a398af001a585a3a7ac5f82d1bcbb3de866b9eb3216bbc7e016fc3\n+  SHA-256 checksum 6a55f07949180f3ba45c9bb4f025389f5379355360697cc028ae81327749349f\n   Compiled from \"TarArchiveEntry.java\"\n public class org.apache.commons.compress.archivers.tar.TarArchiveEntry implements org.apache.commons.compress.archivers.ArchiveEntry,org.apache.commons.compress.archivers.tar.TarConstants,org.apache.commons.compress.archivers.EntryStreamOffsets\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #44                         // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n   super_class: #308                       // java/lang/Object\n   interfaces: 3, fields: 35, methods: 120, attributes: 3\n Constant pool:\n-     #1 = Fieldref           #636.#637    // java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;\n-     #2 = Methodref          #268.#638    // java/nio/file/attribute/FileTime.from:(JLjava/util/concurrent/TimeUnit;)Ljava/nio/file/attribute/FileTime;\n-     #3 = String             #639         // os.name\n-     #4 = Methodref          #640.#641    // java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;\n-     #5 = Fieldref           #642.#643    // java/util/Locale.ROOT:Ljava/util/Locale;\n-     #6 = Methodref          #99.#644     // java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;\n-     #7 = String             #645         // windows\n-     #8 = Methodref          #99.#646     // java/lang/String.startsWith:(Ljava/lang/String;)Z\n-     #9 = Methodref          #99.#647     // java/lang/String.length:()I\n-    #10 = Methodref          #99.#648     // java/lang/String.charAt:(I)C\n-    #11 = Methodref          #99.#649     // java/lang/String.substring:(I)Ljava/lang/String;\n-    #12 = String             #650         // netware\n-    #13 = Methodref          #99.#651     // java/lang/String.contains:(Ljava/lang/CharSequence;)Z\n-    #14 = Methodref          #99.#652     // java/lang/String.indexOf:(I)I\n-    #15 = Fieldref           #653.#654    // java/io/File.separatorChar:C\n-    #16 = Methodref          #99.#655     // java/lang/String.replace:(CC)Ljava/lang/String;\n-    #17 = String             #656         // /\n-    #18 = Class              #657         // java/math/BigDecimal\n-    #19 = Methodref          #18.#658     // java/math/BigDecimal.\"<init>\":(Ljava/lang/String;)V\n-    #20 = Methodref          #18.#659     // java/math/BigDecimal.longValue:()J\n-    #21 = Fieldref           #18.#660     // java/math/BigDecimal.ONE:Ljava/math/BigDecimal;\n-    #22 = Methodref          #18.#661     // java/math/BigDecimal.remainder:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-    #23 = Methodref          #18.#662     // java/math/BigDecimal.movePointRight:(I)Ljava/math/BigDecimal;\n-    #24 = Methodref          #663.#664    // java/time/Instant.ofEpochSecond:(JJ)Ljava/time/Instant;\n-    #25 = Methodref          #308.#665    // java/lang/Object.\"<init>\":()V\n-    #26 = String             #666         //\n-    #27 = Fieldref           #44.#667     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.name:Ljava/lang/String;\n-    #28 = Fieldref           #44.#668     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.linkName:Ljava/lang/String;\n-    #29 = Class              #669         // org/apache/commons/compress/archivers/tar/TarConstants\n-    #30 = String             #670         // ustar\\u0000\n-    #31 = Fieldref           #44.#671     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.magic:Ljava/lang/String;\n-    #32 = String             #672         // 00\n-    #33 = Fieldref           #44.#673     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.version:Ljava/lang/String;\n-    #34 = Fieldref           #44.#674     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.groupName:Ljava/lang/String;\n-    #35 = Class              #675         // java/util/HashMap\n-    #36 = Methodref          #35.#665     // java/util/HashMap.\"<init>\":()V\n-    #37 = Fieldref           #44.#676     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.extraPaxHeaders:Ljava/util/Map;\n-    #38 = Class              #677         // org/apache/commons/compress/archivers/EntryStreamOffsets\n+     #1 = Fieldref           #626.#627    // java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;\n+     #2 = Methodref          #268.#628    // java/nio/file/attribute/FileTime.from:(JLjava/util/concurrent/TimeUnit;)Ljava/nio/file/attribute/FileTime;\n+     #3 = String             #629         // os.name\n+     #4 = Methodref          #630.#631    // java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;\n+     #5 = Fieldref           #632.#633    // java/util/Locale.ROOT:Ljava/util/Locale;\n+     #6 = Methodref          #99.#634     // java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;\n+     #7 = String             #635         // windows\n+     #8 = Methodref          #99.#636     // java/lang/String.startsWith:(Ljava/lang/String;)Z\n+     #9 = Methodref          #99.#637     // java/lang/String.length:()I\n+    #10 = Methodref          #99.#638     // java/lang/String.charAt:(I)C\n+    #11 = Methodref          #99.#639     // java/lang/String.substring:(I)Ljava/lang/String;\n+    #12 = String             #640         // netware\n+    #13 = Methodref          #99.#641     // java/lang/String.contains:(Ljava/lang/CharSequence;)Z\n+    #14 = Methodref          #99.#642     // java/lang/String.indexOf:(I)I\n+    #15 = Fieldref           #406.#643    // java/io/File.separatorChar:C\n+    #16 = Methodref          #99.#644     // java/lang/String.replace:(CC)Ljava/lang/String;\n+    #17 = String             #645         // /\n+    #18 = Class              #646         // java/math/BigDecimal\n+    #19 = Methodref          #18.#647     // java/math/BigDecimal.\"<init>\":(Ljava/lang/String;)V\n+    #20 = Methodref          #18.#648     // java/math/BigDecimal.longValue:()J\n+    #21 = Fieldref           #18.#649     // java/math/BigDecimal.ONE:Ljava/math/BigDecimal;\n+    #22 = Methodref          #18.#650     // java/math/BigDecimal.remainder:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+    #23 = Methodref          #18.#651     // java/math/BigDecimal.movePointRight:(I)Ljava/math/BigDecimal;\n+    #24 = Methodref          #652.#653    // java/time/Instant.ofEpochSecond:(JJ)Ljava/time/Instant;\n+    #25 = Methodref          #308.#654    // java/lang/Object.\"<init>\":()V\n+    #26 = String             #655         //\n+    #27 = Fieldref           #44.#656     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.name:Ljava/lang/String;\n+    #28 = Fieldref           #44.#657     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.linkName:Ljava/lang/String;\n+    #29 = Class              #658         // org/apache/commons/compress/archivers/tar/TarConstants\n+    #30 = String             #659         // ustar\\u0000\n+    #31 = Fieldref           #44.#660     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.magic:Ljava/lang/String;\n+    #32 = String             #661         // 00\n+    #33 = Fieldref           #44.#662     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.version:Ljava/lang/String;\n+    #34 = Fieldref           #44.#663     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.groupName:Ljava/lang/String;\n+    #35 = Class              #664         // java/util/HashMap\n+    #36 = Methodref          #35.#654     // java/util/HashMap.\"<init>\":()V\n+    #37 = Fieldref           #44.#665     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.extraPaxHeaders:Ljava/util/Map;\n+    #38 = Class              #666         // org/apache/commons/compress/archivers/EntryStreamOffsets\n     #39 = Long               -1l\n-    #41 = Fieldref           #44.#678     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.dataOffset:J\n-    #42 = String             #679         // user.name\n-    #43 = Methodref          #640.#680    // java/lang/System.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-    #44 = Class              #681         // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-    #45 = Methodref          #99.#682     // java/lang/String.substring:(II)Ljava/lang/String;\n-    #46 = Fieldref           #44.#683     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.userName:Ljava/lang/String;\n-    #47 = Fieldref           #44.#684     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.file:Ljava/nio/file/Path;\n-    #48 = Fieldref           #685.#686    // org/apache/commons/compress/utils/IOUtils.EMPTY_LINK_OPTIONS:[Ljava/nio/file/LinkOption;\n-    #49 = Fieldref           #44.#687     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.linkOptions:[Ljava/nio/file/LinkOption;\n-    #50 = Fieldref           #44.#688     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.preserveAbsolutePath:Z\n-    #51 = Methodref          #44.#689     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Z)V\n-    #52 = Methodref          #44.#690     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.parseTarHeader:([B)V\n-    #53 = Methodref          #44.#691     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n-    #54 = Methodref          #692.#693    // java/util/Collections.emptyMap:()Ljava/util/Map;\n-    #55 = Methodref          #44.#694     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n-    #56 = Methodref          #44.#695     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setDataOffset:(J)V\n-    #57 = Methodref          #653.#696    // java/io/File.getPath:()Ljava/lang/String;\n-    #58 = Methodref          #44.#697     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-    #59 = Methodref          #44.#698     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.normalizeFileName:(Ljava/lang/String;Z)Ljava/lang/String;\n-    #60 = Methodref          #653.#699    // java/io/File.toPath:()Ljava/nio/file/Path;\n-    #61 = Class              #700         // java/nio/file/LinkOption\n-    #62 = Methodref          #44.#701     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.readFileMode:(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n-    #63 = Class              #702         // java/io/IOException\n-    #64 = Methodref          #653.#703    // java/io/File.isDirectory:()Z\n-    #65 = Methodref          #653.#704    // java/io/File.length:()J\n-    #66 = Fieldref           #44.#705     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.size:J\n-    #67 = Methodref          #44.#706     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.readOsSpecificProperties:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)V\n-    #68 = Methodref          #653.#707    // java/io/File.lastModified:()J\n-    #69 = Methodref          #268.#708    // java/nio/file/attribute/FileTime.fromMillis:(J)Ljava/nio/file/attribute/FileTime;\n-    #70 = Fieldref           #44.#709     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.mTime:Ljava/nio/file/attribute/FileTime;\n-    #71 = Methodref          #44.#710     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.parseTarHeader:(Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZZ)V\n-    #72 = InterfaceMethodref #129.#711    // java/nio/file/Path.toString:()Ljava/lang/String;\n-    #73 = Methodref          #44.#712     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n-    #74 = Methodref          #44.#713     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/lang/String;Z)V\n-    #75 = Methodref          #99.#714     // java/lang/String.endsWith:(Ljava/lang/String;)Z\n+    #41 = Fieldref           #44.#667     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.dataOffset:J\n+    #42 = String             #668         // user.name\n+    #43 = Methodref          #630.#669    // java/lang/System.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+    #44 = Class              #670         // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+    #45 = Methodref          #99.#671     // java/lang/String.substring:(II)Ljava/lang/String;\n+    #46 = Fieldref           #44.#672     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.userName:Ljava/lang/String;\n+    #47 = Fieldref           #44.#673     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.file:Ljava/nio/file/Path;\n+    #48 = Fieldref           #674.#675    // org/apache/commons/compress/utils/IOUtils.EMPTY_LINK_OPTIONS:[Ljava/nio/file/LinkOption;\n+    #49 = Fieldref           #44.#676     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.linkOptions:[Ljava/nio/file/LinkOption;\n+    #50 = Fieldref           #44.#677     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.preserveAbsolutePath:Z\n+    #51 = Methodref          #44.#678     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Z)V\n+    #52 = Methodref          #44.#679     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.parseTarHeader:([B)V\n+    #53 = Methodref          #44.#680     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n+    #54 = Methodref          #681.#682    // java/util/Collections.emptyMap:()Ljava/util/Map;\n+    #55 = Methodref          #44.#683     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n+    #56 = Methodref          #44.#684     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setDataOffset:(J)V\n+    #57 = Methodref          #406.#685    // java/io/File.getPath:()Ljava/lang/String;\n+    #58 = Methodref          #44.#686     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+    #59 = Methodref          #44.#687     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.normalizeFileName:(Ljava/lang/String;Z)Ljava/lang/String;\n+    #60 = Methodref          #406.#688    // java/io/File.toPath:()Ljava/nio/file/Path;\n+    #61 = Class              #689         // java/nio/file/LinkOption\n+    #62 = Methodref          #44.#690     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.readFileMode:(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n+    #63 = Class              #691         // java/io/IOException\n+    #64 = Methodref          #406.#692    // java/io/File.isDirectory:()Z\n+    #65 = Methodref          #406.#693    // java/io/File.length:()J\n+    #66 = Fieldref           #44.#694     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.size:J\n+    #67 = Methodref          #44.#695     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.readOsSpecificProperties:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)V\n+    #68 = Methodref          #406.#696    // java/io/File.lastModified:()J\n+    #69 = Methodref          #268.#697    // java/nio/file/attribute/FileTime.fromMillis:(J)Ljava/nio/file/attribute/FileTime;\n+    #70 = Fieldref           #44.#698     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.mTime:Ljava/nio/file/attribute/FileTime;\n+    #71 = Methodref          #44.#699     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.parseTarHeader:(Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZZ)V\n+    #72 = InterfaceMethodref #129.#700    // java/nio/file/Path.toString:()Ljava/lang/String;\n+    #73 = Methodref          #44.#701     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n+    #74 = Methodref          #44.#702     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/lang/String;Z)V\n+    #75 = Methodref          #99.#703     // java/lang/String.endsWith:(Ljava/lang/String;)Z\n     #76 = Integer            33188\n-    #77 = Fieldref           #44.#715     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.mode:I\n-    #78 = Fieldref           #44.#716     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.linkFlag:B\n-    #79 = Methodref          #663.#717    // java/time/Instant.now:()Ljava/time/Instant;\n-    #80 = Methodref          #268.#718    // java/nio/file/attribute/FileTime.from:(Ljava/time/Instant;)Ljava/nio/file/attribute/FileTime;\n-    #81 = Methodref          #44.#719     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/lang/String;BZ)V\n-    #82 = String             #720         // ustar\n-    #83 = String             #721         //  \\u0000\n-    #84 = Methodref          #44.#722     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.processPaxHeader:(Ljava/lang/String;Ljava/lang/String;)V\n-    #85 = Class              #723         // java/lang/IllegalArgumentException\n-    #86 = String             #724         // Invalid input\n-    #87 = Methodref          #85.#725     // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-    #88 = InterfaceMethodref #726.#727    // java/util/Map.clear:()V\n-    #89 = Methodref          #308.#728    // java/lang/Object.getClass:()Ljava/lang/Class;\n-    #90 = Methodref          #44.#729     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.equals:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Z\n-    #91 = Methodref          #44.#730     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getName:()Ljava/lang/String;\n-    #92 = Methodref          #99.#731     // java/lang/String.equals:(Ljava/lang/Object;)Z\n-    #93 = Methodref          #732.#733    // org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n-    #94 = Methodref          #44.#734     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isXstar:(Ljava/util/Map;[B)Z\n-    #95 = Methodref          #44.#735     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.fill:(BI[BI)I\n-    #96 = Fieldref           #44.#736     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.paxGNUSparse:Z\n-    #97 = String             #737         // GNU.sparse.size\n-    #98 = InterfaceMethodref #726.#738    // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-    #99 = Class              #739         // java/lang/String\n-   #100 = Methodref          #740.#741    // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n-   #101 = Fieldref           #44.#742     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.realSize:J\n-   #102 = String             #743         // GNU.sparse.name\n-   #103 = InterfaceMethodref #726.#744    // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n-   #104 = Fieldref           #44.#745     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.paxGNU1XSparse:Z\n-   #105 = String             #746         // GNU.sparse.realsize\n-   #106 = Class              #747         // java/lang/NumberFormatException\n-   #107 = Class              #748         // java/lang/StringBuilder\n-   #108 = Methodref          #107.#665    // java/lang/StringBuilder.\"<init>\":()V\n-   #109 = String             #749         // Corrupted TAR archive. GNU.sparse.realsize header for\n-   #110 = Methodref          #107.#750    // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #111 = String             #751         //  contains non-numeric value\n-   #112 = Methodref          #107.#711    // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #113 = Methodref          #63.#658     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #114 = Fieldref           #44.#752     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.starSparse:Z\n-   #115 = String             #753         // SCHILY.realsize\n-   #116 = Methodref          #754.#755    // java/lang/Long.parseLong:(Ljava/lang/String;)J\n-   #117 = String             #756         // Corrupted TAR archive. SCHILY.realsize header for\n-   #118 = Fieldref           #44.#757     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.birthTime:Ljava/nio/file/attribute/FileTime;\n-   #119 = Fieldref           #44.#758     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.devMajor:I\n-   #120 = Fieldref           #44.#759     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.devMinor:I\n-   #121 = Methodref          #44.#703     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n-   #122 = Fieldref           #44.#760     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.EMPTY_TAR_ARCHIVE_ENTRY_ARRAY:[Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-   #123 = Class              #761         // java/util/ArrayList\n-   #124 = Methodref          #123.#665    // java/util/ArrayList.\"<init>\":()V\n-   #125 = Methodref          #762.#763    // java/nio/file/Files.newDirectoryStream:(Ljava/nio/file/Path;)Ljava/nio/file/DirectoryStream;\n-   #126 = InterfaceMethodref #764.#765    // java/nio/file/DirectoryStream.iterator:()Ljava/util/Iterator;\n-   #127 = InterfaceMethodref #766.#767    // java/util/Iterator.hasNext:()Z\n-   #128 = InterfaceMethodref #766.#768    // java/util/Iterator.next:()Ljava/lang/Object;\n-   #129 = Class              #769         // java/nio/file/Path\n-   #130 = Methodref          #44.#770     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/nio/file/Path;)V\n-   #131 = InterfaceMethodref #157.#771    // java/util/List.add:(Ljava/lang/Object;)Z\n-   #132 = InterfaceMethodref #764.#772    // java/nio/file/DirectoryStream.close:()V\n-   #133 = Class              #773         // java/lang/Throwable\n-   #134 = Methodref          #133.#774    // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-   #135 = InterfaceMethodref #157.#775    // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+    #77 = Fieldref           #44.#704     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.mode:I\n+    #78 = Fieldref           #44.#705     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.linkFlag:B\n+    #79 = Methodref          #652.#706    // java/time/Instant.now:()Ljava/time/Instant;\n+    #80 = Methodref          #268.#707    // java/nio/file/attribute/FileTime.from:(Ljava/time/Instant;)Ljava/nio/file/attribute/FileTime;\n+    #81 = Methodref          #44.#708     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/lang/String;BZ)V\n+    #82 = String             #709         // ustar\n+    #83 = String             #710         //  \\u0000\n+    #84 = Methodref          #44.#711     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.processPaxHeader:(Ljava/lang/String;Ljava/lang/String;)V\n+    #85 = Class              #712         // java/lang/IllegalArgumentException\n+    #86 = String             #713         // Invalid input\n+    #87 = Methodref          #85.#714     // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+    #88 = InterfaceMethodref #553.#715    // java/util/Map.clear:()V\n+    #89 = Methodref          #308.#716    // java/lang/Object.getClass:()Ljava/lang/Class;\n+    #90 = Methodref          #44.#717     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.equals:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Z\n+    #91 = Methodref          #44.#718     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getName:()Ljava/lang/String;\n+    #92 = Methodref          #99.#719     // java/lang/String.equals:(Ljava/lang/Object;)Z\n+    #93 = Methodref          #720.#721    // org/apache/commons/compress/utils/ArchiveUtils.matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n+    #94 = Methodref          #44.#722     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isXstar:(Ljava/util/Map;[B)Z\n+    #95 = Methodref          #44.#723     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.fill:(BI[BI)I\n+    #96 = Fieldref           #44.#724     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.paxGNUSparse:Z\n+    #97 = String             #725         // GNU.sparse.size\n+    #98 = InterfaceMethodref #553.#726    // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+    #99 = Class              #727         // java/lang/String\n+   #100 = Methodref          #728.#729    // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n+   #101 = Fieldref           #44.#730     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.realSize:J\n+   #102 = String             #731         // GNU.sparse.name\n+   #103 = InterfaceMethodref #553.#732    // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n+   #104 = Fieldref           #44.#733     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.paxGNU1XSparse:Z\n+   #105 = String             #734         // GNU.sparse.realsize\n+   #106 = Class              #735         // java/lang/NumberFormatException\n+   #107 = Class              #736         // java/lang/StringBuilder\n+   #108 = Methodref          #107.#654    // java/lang/StringBuilder.\"<init>\":()V\n+   #109 = String             #737         // Corrupted TAR archive. GNU.sparse.realsize header for\n+   #110 = Methodref          #107.#738    // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #111 = String             #739         //  contains non-numeric value\n+   #112 = Methodref          #107.#700    // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #113 = Methodref          #63.#647     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #114 = Fieldref           #44.#740     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.starSparse:Z\n+   #115 = String             #741         // SCHILY.realsize\n+   #116 = Methodref          #742.#743    // java/lang/Long.parseLong:(Ljava/lang/String;)J\n+   #117 = String             #744         // Corrupted TAR archive. SCHILY.realsize header for\n+   #118 = Fieldref           #44.#745     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.birthTime:Ljava/nio/file/attribute/FileTime;\n+   #119 = Fieldref           #44.#746     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.devMajor:I\n+   #120 = Fieldref           #44.#747     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.devMinor:I\n+   #121 = Methodref          #44.#692     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n+   #122 = Fieldref           #44.#748     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.EMPTY_TAR_ARCHIVE_ENTRY_ARRAY:[Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+   #123 = Class              #749         // java/util/ArrayList\n+   #124 = Methodref          #123.#654    // java/util/ArrayList.\"<init>\":()V\n+   #125 = Methodref          #750.#751    // java/nio/file/Files.newDirectoryStream:(Ljava/nio/file/Path;)Ljava/nio/file/DirectoryStream;\n+   #126 = InterfaceMethodref #464.#752    // java/nio/file/DirectoryStream.iterator:()Ljava/util/Iterator;\n+   #127 = InterfaceMethodref #465.#753    // java/util/Iterator.hasNext:()Z\n+   #128 = InterfaceMethodref #465.#754    // java/util/Iterator.next:()Ljava/lang/Object;\n+   #129 = Class              #755         // java/nio/file/Path\n+   #130 = Methodref          #44.#756     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/nio/file/Path;)V\n+   #131 = InterfaceMethodref #157.#757    // java/util/List.add:(Ljava/lang/Object;)Z\n+   #132 = InterfaceMethodref #464.#758    // java/nio/file/DirectoryStream.close:()V\n+   #133 = Class              #759         // java/lang/Throwable\n+   #134 = Methodref          #133.#760    // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+   #135 = InterfaceMethodref #157.#761    // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n    #136 = Class              #311         // \"[Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\"\n-   #137 = Methodref          #692.#776    // java/util/Collections.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;\n-   #138 = InterfaceMethodref #129.#777    // java/nio/file/Path.toFile:()Ljava/io/File;\n-   #139 = Fieldref           #44.#778     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.groupId:J\n-   #140 = Fieldref           #44.#779     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.aTime:Ljava/nio/file/attribute/FileTime;\n-   #141 = Methodref          #44.#780     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getModTime:()Ljava/util/Date;\n-   #142 = Fieldref           #44.#781     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.userId:J\n-   #143 = Class              #782         // java/util/Date\n-   #144 = Methodref          #268.#783    // java/nio/file/attribute/FileTime.toMillis:()J\n-   #145 = Methodref          #143.#784    // java/util/Date.\"<init>\":(J)V\n-   #146 = Fieldref           #44.#785     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.sparseHeaders:Ljava/util/List;\n-   #147 = InterfaceMethodref #157.#786    // java/util/List.isEmpty:()Z\n-   #148 = Methodref          #692.#787    // java/util/Collections.emptyList:()Ljava/util/List;\n-   #149 = InterfaceMethodref #157.#788    // java/util/List.stream:()Ljava/util/stream/Stream;\n-   #150 = InvokeDynamic      #0:#794      // #0:test:()Ljava/util/function/Predicate;\n-   #151 = InterfaceMethodref #795.#796    // java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;\n-   #152 = InvokeDynamic      #1:#800      // #1:applyAsLong:()Ljava/util/function/ToLongFunction;\n-   #153 = InterfaceMethodref #801.#802    // java/util/Comparator.comparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n-   #154 = InterfaceMethodref #795.#803    // java/util/stream/Stream.sorted:(Ljava/util/Comparator;)Ljava/util/stream/Stream;\n-   #155 = Methodref          #804.#805    // java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;\n-   #156 = InterfaceMethodref #795.#806    // java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;\n-   #157 = Class              #807         // java/util/List\n-   #158 = InterfaceMethodref #157.#808    // java/util/List.size:()I\n-   #159 = InterfaceMethodref #157.#809    // java/util/List.get:(I)Ljava/lang/Object;\n-   #160 = Class              #810         // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-   #161 = Methodref          #160.#811    // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n-   #162 = Methodref          #160.#812    // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n-   #163 = String             #813         // Corrupted TAR archive. Sparse blocks for\n-   #164 = String             #814         //  overlap each other.\n-   #165 = String             #815         // Unreadable TAR archive. Offset and numbytes for sparse block in\n-   #166 = String             #816         //  too large.\n-   #167 = Methodref          #44.#817     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getRealSize:()J\n-   #168 = String             #818         // Corrupted TAR archive. Sparse block extends beyond real size of the entry\n-   #169 = Methodref          #44.#819     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSparse:()Z\n-   #170 = Methodref          #44.#820     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n-   #171 = Fieldref           #44.#821     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.cTime:Ljava/nio/file/attribute/FileTime;\n-   #172 = Methodref          #99.#822     // java/lang/String.hashCode:()I\n-   #173 = Fieldref           #44.#823     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.checkSumOK:Z\n-   #174 = Methodref          #762.#824    // java/nio/file/Files.isDirectory:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n-   #175 = Methodref          #44.#825     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxHeader:()Z\n-   #176 = Methodref          #44.#826     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGlobalPaxHeader:()Z\n-   #177 = Fieldref           #44.#827     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isExtended:Z\n-   #178 = Methodref          #762.#828    // java/nio/file/Files.isRegularFile:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n-   #179 = Methodref          #44.#829     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isOldGNUSparse:()Z\n-   #180 = Methodref          #44.#830     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxGNUSparse:()Z\n-   #181 = Methodref          #44.#831     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNUSparse:()Z\n-   #182 = Methodref          #44.#832     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isStarSparse:()Z\n-   #183 = String             #833         // tar\\u0000\n-   #184 = String             #834         // SCHILY.archtype\n-   #185 = String             #835         // xustar\n-   #186 = String             #836         // exustar\n-   #187 = Methodref          #44.#837     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isInvalidPrefix:([B)Z\n-   #188 = Methodref          #44.#838     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isInvalidXtarTime:([BII)Z\n-   #189 = Methodref          #839.#840    // org/apache/commons/compress/archivers/tar/TarUtils.parseOctalOrBinary:([BII)J\n-   #190 = Fieldref           #839.#841    // org/apache/commons/compress/archivers/tar/TarUtils.DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #191 = Methodref          #44.#842     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.parseTarHeader:([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;)V\n-   #192 = Methodref          #44.#843     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.parseTarHeader:([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZZ)V\n-   #193 = Class              #844         // java/io/UncheckedIOException\n-   #194 = Methodref          #193.#845    // java/io/UncheckedIOException.\"<init>\":(Ljava/io/IOException;)V\n-   #195 = Methodref          #44.#846     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.parseTarHeaderUnwrapped:(Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZZ)V\n-   #196 = String             #847         // Corrupted TAR archive.\n-   #197 = Methodref          #63.#725     // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #198 = Methodref          #839.#848    // org/apache/commons/compress/archivers/tar/TarUtils.parseName:([BII)Ljava/lang/String;\n-   #199 = Methodref          #839.#849    // org/apache/commons/compress/archivers/tar/TarUtils.parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n-   #200 = Methodref          #44.#850     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.parseOctalOrBinary:([BIIZ)J\n-   #201 = String             #851         // broken archive, entry with negative size\n-   #202 = Methodref          #839.#852    // org/apache/commons/compress/archivers/tar/TarUtils.verifyCheckSum:([B)Z\n-   #203 = Methodref          #44.#853     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.evaluateType:(Ljava/util/Map;[B)I\n-   #204 = Methodref          #44.#854     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.fileTimeFromOptionalSeconds:(J)Ljava/nio/file/attribute/FileTime;\n-   #205 = Methodref          #839.#855    // org/apache/commons/compress/archivers/tar/TarUtils.readSparseStructs:([BII)Ljava/util/List;\n-   #206 = Methodref          #123.#856    // java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n-   #207 = Methodref          #839.#857    // org/apache/commons/compress/archivers/tar/TarUtils.parseBoolean:([BI)Z\n-   #208 = Methodref          #839.#858    // org/apache/commons/compress/archivers/tar/TarUtils.parseOctal:([BII)J\n-   #209 = Methodref          #99.#786     // java/lang/String.isEmpty:()Z\n-   #210 = Methodref          #44.#859     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.processPaxHeader:(Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V\n-   #211 = String             #860         // path\n-   #212 = String             #861         // linkpath\n-   #213 = String             #862         // gid\n-   #214 = String             #863         // gname\n-   #215 = String             #864         // uid\n-   #216 = String             #865         // uname\n+   #137 = Methodref          #681.#762    // java/util/Collections.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;\n+   #138 = InterfaceMethodref #129.#763    // java/nio/file/Path.toFile:()Ljava/io/File;\n+   #139 = Fieldref           #44.#764     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.groupId:J\n+   #140 = Fieldref           #44.#765     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.aTime:Ljava/nio/file/attribute/FileTime;\n+   #141 = Methodref          #44.#766     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getModTime:()Ljava/util/Date;\n+   #142 = Fieldref           #44.#767     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.userId:J\n+   #143 = Class              #768         // java/util/Date\n+   #144 = Methodref          #268.#769    // java/nio/file/attribute/FileTime.toMillis:()J\n+   #145 = Methodref          #143.#770    // java/util/Date.\"<init>\":(J)V\n+   #146 = Fieldref           #44.#771     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.sparseHeaders:Ljava/util/List;\n+   #147 = InterfaceMethodref #157.#772    // java/util/List.isEmpty:()Z\n+   #148 = Methodref          #681.#773    // java/util/Collections.emptyList:()Ljava/util/List;\n+   #149 = InterfaceMethodref #157.#774    // java/util/List.stream:()Ljava/util/stream/Stream;\n+   #150 = InvokeDynamic      #0:#780      // #0:test:()Ljava/util/function/Predicate;\n+   #151 = InterfaceMethodref #781.#782    // java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;\n+   #152 = InvokeDynamic      #1:#786      // #1:applyAsLong:()Ljava/util/function/ToLongFunction;\n+   #153 = InterfaceMethodref #787.#788    // java/util/Comparator.comparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n+   #154 = InterfaceMethodref #781.#789    // java/util/stream/Stream.sorted:(Ljava/util/Comparator;)Ljava/util/stream/Stream;\n+   #155 = Methodref          #790.#791    // java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;\n+   #156 = InterfaceMethodref #781.#792    // java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;\n+   #157 = Class              #793         // java/util/List\n+   #158 = InterfaceMethodref #157.#794    // java/util/List.size:()I\n+   #159 = InterfaceMethodref #157.#795    // java/util/List.get:(I)Ljava/lang/Object;\n+   #160 = Class              #796         // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+   #161 = Methodref          #160.#797    // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+   #162 = Methodref          #160.#798    // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n+   #163 = String             #799         // Corrupted TAR archive. Sparse blocks for\n+   #164 = String             #800         //  overlap each other.\n+   #165 = String             #801         // Unreadable TAR archive. Offset and numbytes for sparse block in\n+   #166 = String             #802         //  too large.\n+   #167 = Methodref          #44.#803     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getRealSize:()J\n+   #168 = String             #804         // Corrupted TAR archive. Sparse block extends beyond real size of the entry\n+   #169 = Methodref          #44.#805     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSparse:()Z\n+   #170 = Methodref          #44.#806     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+   #171 = Fieldref           #44.#807     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.cTime:Ljava/nio/file/attribute/FileTime;\n+   #172 = Methodref          #99.#808     // java/lang/String.hashCode:()I\n+   #173 = Fieldref           #44.#809     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.checkSumOK:Z\n+   #174 = Methodref          #750.#810    // java/nio/file/Files.isDirectory:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+   #175 = Methodref          #44.#811     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxHeader:()Z\n+   #176 = Methodref          #44.#812     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGlobalPaxHeader:()Z\n+   #177 = Fieldref           #44.#813     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isExtended:Z\n+   #178 = Methodref          #750.#814    // java/nio/file/Files.isRegularFile:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+   #179 = Methodref          #44.#815     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isOldGNUSparse:()Z\n+   #180 = Methodref          #44.#816     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxGNUSparse:()Z\n+   #181 = Methodref          #44.#817     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNUSparse:()Z\n+   #182 = Methodref          #44.#818     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isStarSparse:()Z\n+   #183 = String             #819         // tar\\u0000\n+   #184 = String             #820         // SCHILY.archtype\n+   #185 = String             #821         // xustar\n+   #186 = String             #822         // exustar\n+   #187 = Methodref          #44.#823     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isInvalidPrefix:([B)Z\n+   #188 = Methodref          #44.#824     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isInvalidXtarTime:([BII)Z\n+   #189 = Methodref          #825.#826    // org/apache/commons/compress/archivers/tar/TarUtils.parseOctalOrBinary:([BII)J\n+   #190 = Fieldref           #825.#827    // org/apache/commons/compress/archivers/tar/TarUtils.DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #191 = Methodref          #44.#828     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.parseTarHeader:([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;)V\n+   #192 = Methodref          #44.#829     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.parseTarHeader:([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZZ)V\n+   #193 = Class              #830         // java/io/UncheckedIOException\n+   #194 = Methodref          #193.#831    // java/io/UncheckedIOException.\"<init>\":(Ljava/io/IOException;)V\n+   #195 = Methodref          #44.#832     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.parseTarHeaderUnwrapped:(Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZZ)V\n+   #196 = String             #833         // Corrupted TAR archive.\n+   #197 = Methodref          #63.#714     // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #198 = Methodref          #825.#834    // org/apache/commons/compress/archivers/tar/TarUtils.parseName:([BII)Ljava/lang/String;\n+   #199 = Methodref          #825.#835    // org/apache/commons/compress/archivers/tar/TarUtils.parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+   #200 = Methodref          #44.#836     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.parseOctalOrBinary:([BIIZ)J\n+   #201 = String             #837         // broken archive, entry with negative size\n+   #202 = Methodref          #825.#838    // org/apache/commons/compress/archivers/tar/TarUtils.verifyCheckSum:([B)Z\n+   #203 = Methodref          #44.#839     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.evaluateType:(Ljava/util/Map;[B)I\n+   #204 = Methodref          #44.#840     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.fileTimeFromOptionalSeconds:(J)Ljava/nio/file/attribute/FileTime;\n+   #205 = Methodref          #825.#841    // org/apache/commons/compress/archivers/tar/TarUtils.readSparseStructs:([BII)Ljava/util/List;\n+   #206 = Methodref          #123.#842    // java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n+   #207 = Methodref          #825.#843    // org/apache/commons/compress/archivers/tar/TarUtils.parseBoolean:([BI)Z\n+   #208 = Methodref          #825.#844    // org/apache/commons/compress/archivers/tar/TarUtils.parseOctal:([BII)J\n+   #209 = Methodref          #99.#772     // java/lang/String.isEmpty:()Z\n+   #210 = Methodref          #44.#845     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.processPaxHeader:(Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V\n+   #211 = String             #846         // path\n+   #212 = String             #847         // linkpath\n+   #213 = String             #848         // gid\n+   #214 = String             #849         // gname\n+   #215 = String             #850         // uid\n+   #216 = String             #851         // uname\n    #217 = String             #330         // size\n-   #218 = String             #866         // mtime\n-   #219 = String             #867         // atime\n-   #220 = String             #868         // ctime\n-   #221 = String             #869         // LIBARCHIVE.creationtime\n-   #222 = String             #870         // SCHILY.devminor\n-   #223 = String             #871         // SCHILY.devmajor\n-   #224 = String             #872         // SCHILY.filetype\n-   #225 = Methodref          #44.#873     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setName:(Ljava/lang/String;)V\n-   #226 = Methodref          #44.#874     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setLinkName:(Ljava/lang/String;)V\n-   #227 = Methodref          #44.#875     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setGroupId:(J)V\n-   #228 = Methodref          #44.#876     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setGroupName:(Ljava/lang/String;)V\n-   #229 = Methodref          #44.#877     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setUserId:(J)V\n-   #230 = Methodref          #44.#878     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setUserName:(Ljava/lang/String;)V\n-   #231 = String             #879         // Corrupted TAR archive. Entry size is negative\n-   #232 = Methodref          #44.#880     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSize:(J)V\n-   #233 = Methodref          #44.#881     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.parseInstantFromDecimalSeconds:(Ljava/lang/String;)Ljava/time/Instant;\n-   #234 = Methodref          #44.#882     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setLastModifiedTime:(Ljava/nio/file/attribute/FileTime;)V\n-   #235 = Methodref          #44.#883     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setLastAccessTime:(Ljava/nio/file/attribute/FileTime;)V\n-   #236 = Methodref          #44.#884     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setStatusChangeTime:(Ljava/nio/file/attribute/FileTime;)V\n-   #237 = Methodref          #44.#885     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setCreationTime:(Ljava/nio/file/attribute/FileTime;)V\n-   #238 = String             #886         // Corrupted TAR archive. Dev-Minor is negative\n-   #239 = Methodref          #44.#887     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setDevMinor:(I)V\n-   #240 = String             #888         // Corrupted TAR archive. Dev-Major is negative\n-   #241 = Methodref          #44.#889     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setDevMajor:(I)V\n-   #242 = Methodref          #44.#890     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.fillGNUSparse0xData:(Ljava/util/Map;)V\n-   #243 = Methodref          #44.#891     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.fillGNUSparse1xData:(Ljava/util/Map;)V\n-   #244 = String             #892         // sparse\n-   #245 = Methodref          #44.#893     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.fillStarSparseData:(Ljava/util/Map;)V\n-   #246 = InterfaceMethodref #726.#894    // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #247 = Methodref          #762.#895    // java/nio/file/Files.size:(Ljava/nio/file/Path;)J\n-   #248 = InterfaceMethodref #129.#896    // java/nio/file/Path.getFileSystem:()Ljava/nio/file/FileSystem;\n-   #249 = Methodref          #897.#898    // java/nio/file/FileSystem.supportedFileAttributeViews:()Ljava/util/Set;\n-   #250 = String             #899         // posix\n-   #251 = InterfaceMethodref #900.#901    // java/util/Set.contains:(Ljava/lang/Object;)Z\n-   #252 = Class              #902         // java/nio/file/attribute/PosixFileAttributes\n-   #253 = Methodref          #762.#903    // java/nio/file/Files.readAttributes:(Ljava/nio/file/Path;Ljava/lang/Class;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/BasicFileAttributes;\n-   #254 = InterfaceMethodref #252.#904    // java/nio/file/attribute/PosixFileAttributes.lastModifiedTime:()Ljava/nio/file/attribute/FileTime;\n-   #255 = InterfaceMethodref #252.#905    // java/nio/file/attribute/PosixFileAttributes.creationTime:()Ljava/nio/file/attribute/FileTime;\n-   #256 = InterfaceMethodref #252.#906    // java/nio/file/attribute/PosixFileAttributes.lastAccessTime:()Ljava/nio/file/attribute/FileTime;\n-   #257 = InterfaceMethodref #252.#907    // java/nio/file/attribute/PosixFileAttributes.owner:()Ljava/nio/file/attribute/UserPrincipal;\n-   #258 = InterfaceMethodref #908.#730    // java/nio/file/attribute/UserPrincipal.getName:()Ljava/lang/String;\n-   #259 = InterfaceMethodref #252.#909    // java/nio/file/attribute/PosixFileAttributes.group:()Ljava/nio/file/attribute/GroupPrincipal;\n-   #260 = InterfaceMethodref #910.#730    // java/nio/file/attribute/GroupPrincipal.getName:()Ljava/lang/String;\n-   #261 = String             #911         // unix\n-   #262 = String             #912         // unix:uid\n-   #263 = Methodref          #762.#913    // java/nio/file/Files.getAttribute:(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Ljava/lang/Object;\n-   #264 = Class              #914         // java/lang/Number\n-   #265 = Methodref          #264.#659    // java/lang/Number.longValue:()J\n-   #266 = String             #915         // unix:gid\n-   #267 = String             #916         // unix:ctime\n-   #268 = Class              #917         // java/nio/file/attribute/FileTime\n-   #269 = String             #918         // dos\n-   #270 = Class              #919         // java/nio/file/attribute/DosFileAttributes\n-   #271 = InterfaceMethodref #270.#904    // java/nio/file/attribute/DosFileAttributes.lastModifiedTime:()Ljava/nio/file/attribute/FileTime;\n-   #272 = InterfaceMethodref #270.#905    // java/nio/file/attribute/DosFileAttributes.creationTime:()Ljava/nio/file/attribute/FileTime;\n-   #273 = InterfaceMethodref #270.#906    // java/nio/file/attribute/DosFileAttributes.lastAccessTime:()Ljava/nio/file/attribute/FileTime;\n-   #274 = Methodref          #762.#920    // java/nio/file/Files.getOwner:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/UserPrincipal;\n-   #275 = Class              #921         // java/nio/file/attribute/BasicFileAttributes\n-   #276 = InterfaceMethodref #275.#904    // java/nio/file/attribute/BasicFileAttributes.lastModifiedTime:()Ljava/nio/file/attribute/FileTime;\n-   #277 = InterfaceMethodref #275.#905    // java/nio/file/attribute/BasicFileAttributes.creationTime:()Ljava/nio/file/attribute/FileTime;\n-   #278 = InterfaceMethodref #275.#906    // java/nio/file/attribute/BasicFileAttributes.lastAccessTime:()Ljava/nio/file/attribute/FileTime;\n-   #279 = String             #922         // The offset can not be smaller than 0\n-   #280 = Methodref          #85.#658     // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #281 = String             #923         // Major device number is out of range:\n-   #282 = Methodref          #107.#924    // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #283 = String             #925         // Minor device number is out of range:\n-   #284 = Methodref          #44.#926     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setUserId:(I)V\n-   #285 = Methodref          #44.#927     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setGroupId:(I)V\n-   #286 = String             #928         // Time must not be null\n-   #287 = Methodref          #929.#930    // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-   #288 = Methodref          #143.#931    // java/util/Date.getTime:()J\n-   #289 = String             #932         // Size is out of range:\n-   #290 = Methodref          #107.#933    // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #291 = InterfaceMethodref #726.#934    // java/util/Map.entrySet:()Ljava/util/Set;\n-   #292 = InterfaceMethodref #900.#765    // java/util/Set.iterator:()Ljava/util/Iterator;\n-   #293 = Class              #935         // java/util/Map$Entry\n-   #294 = InterfaceMethodref #293.#936    // java/util/Map$Entry.getKey:()Ljava/lang/Object;\n-   #295 = InterfaceMethodref #293.#937    // java/util/Map$Entry.getValue:()Ljava/lang/Object;\n-   #296 = Methodref          #44.#938     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.writeEntryHeader:([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n-   #297 = Fieldref           #839.#939    // org/apache/commons/compress/archivers/tar/TarUtils.FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #298 = Methodref          #839.#940    // org/apache/commons/compress/archivers/tar/TarUtils.formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n-   #299 = Methodref          #44.#941     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.writeEntryHeaderField:(J[BIIZ)I\n-   #300 = Methodref          #268.#942    // java/nio/file/attribute/FileTime.to:(Ljava/util/concurrent/TimeUnit;)J\n-   #301 = Methodref          #839.#943    // org/apache/commons/compress/archivers/tar/TarUtils.formatNameBytes:(Ljava/lang/String;[BII)I\n-   #302 = Methodref          #44.#944     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.fill:(II[BI)I\n-   #303 = Methodref          #44.#945     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.writeEntryHeaderOptionalTimeField:(Ljava/nio/file/attribute/FileTime;I[BI)I\n-   #304 = Methodref          #839.#946    // org/apache/commons/compress/archivers/tar/TarUtils.computeCheckSum:([B)J\n-   #305 = Methodref          #839.#947    // org/apache/commons/compress/archivers/tar/TarUtils.formatCheckSumOctalBytes:(J[BII)I\n-   #306 = Methodref          #839.#948    // org/apache/commons/compress/archivers/tar/TarUtils.formatLongOctalBytes:(J[BII)I\n-   #307 = Methodref          #839.#949    // org/apache/commons/compress/archivers/tar/TarUtils.formatLongOctalOrBinaryBytes:(J[BII)I\n-   #308 = Class              #950         // java/lang/Object\n-   #309 = Class              #951         // org/apache/commons/compress/archivers/ArchiveEntry\n+   #218 = String             #852         // mtime\n+   #219 = String             #853         // atime\n+   #220 = String             #854         // ctime\n+   #221 = String             #855         // LIBARCHIVE.creationtime\n+   #222 = String             #856         // SCHILY.devminor\n+   #223 = String             #857         // SCHILY.devmajor\n+   #224 = String             #858         // SCHILY.filetype\n+   #225 = Methodref          #44.#859     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setName:(Ljava/lang/String;)V\n+   #226 = Methodref          #44.#860     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setLinkName:(Ljava/lang/String;)V\n+   #227 = Methodref          #44.#861     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setGroupId:(J)V\n+   #228 = Methodref          #44.#862     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setGroupName:(Ljava/lang/String;)V\n+   #229 = Methodref          #44.#863     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setUserId:(J)V\n+   #230 = Methodref          #44.#864     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setUserName:(Ljava/lang/String;)V\n+   #231 = String             #865         // Corrupted TAR archive. Entry size is negative\n+   #232 = Methodref          #44.#866     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSize:(J)V\n+   #233 = Methodref          #44.#867     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.parseInstantFromDecimalSeconds:(Ljava/lang/String;)Ljava/time/Instant;\n+   #234 = Methodref          #44.#868     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setLastModifiedTime:(Ljava/nio/file/attribute/FileTime;)V\n+   #235 = Methodref          #44.#869     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setLastAccessTime:(Ljava/nio/file/attribute/FileTime;)V\n+   #236 = Methodref          #44.#870     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setStatusChangeTime:(Ljava/nio/file/attribute/FileTime;)V\n+   #237 = Methodref          #44.#871     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setCreationTime:(Ljava/nio/file/attribute/FileTime;)V\n+   #238 = String             #872         // Corrupted TAR archive. Dev-Minor is negative\n+   #239 = Methodref          #44.#873     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setDevMinor:(I)V\n+   #240 = String             #874         // Corrupted TAR archive. Dev-Major is negative\n+   #241 = Methodref          #44.#875     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setDevMajor:(I)V\n+   #242 = Methodref          #44.#876     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.fillGNUSparse0xData:(Ljava/util/Map;)V\n+   #243 = Methodref          #44.#877     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.fillGNUSparse1xData:(Ljava/util/Map;)V\n+   #244 = String             #878         // sparse\n+   #245 = Methodref          #44.#879     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.fillStarSparseData:(Ljava/util/Map;)V\n+   #246 = InterfaceMethodref #553.#880    // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #247 = Methodref          #750.#881    // java/nio/file/Files.size:(Ljava/nio/file/Path;)J\n+   #248 = InterfaceMethodref #129.#882    // java/nio/file/Path.getFileSystem:()Ljava/nio/file/FileSystem;\n+   #249 = Methodref          #883.#884    // java/nio/file/FileSystem.supportedFileAttributeViews:()Ljava/util/Set;\n+   #250 = String             #885         // posix\n+   #251 = InterfaceMethodref #574.#886    // java/util/Set.contains:(Ljava/lang/Object;)Z\n+   #252 = Class              #887         // java/nio/file/attribute/PosixFileAttributes\n+   #253 = Methodref          #750.#888    // java/nio/file/Files.readAttributes:(Ljava/nio/file/Path;Ljava/lang/Class;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/BasicFileAttributes;\n+   #254 = InterfaceMethodref #252.#889    // java/nio/file/attribute/PosixFileAttributes.lastModifiedTime:()Ljava/nio/file/attribute/FileTime;\n+   #255 = InterfaceMethodref #252.#890    // java/nio/file/attribute/PosixFileAttributes.creationTime:()Ljava/nio/file/attribute/FileTime;\n+   #256 = InterfaceMethodref #252.#891    // java/nio/file/attribute/PosixFileAttributes.lastAccessTime:()Ljava/nio/file/attribute/FileTime;\n+   #257 = InterfaceMethodref #252.#892    // java/nio/file/attribute/PosixFileAttributes.owner:()Ljava/nio/file/attribute/UserPrincipal;\n+   #258 = InterfaceMethodref #893.#718    // java/nio/file/attribute/UserPrincipal.getName:()Ljava/lang/String;\n+   #259 = InterfaceMethodref #252.#894    // java/nio/file/attribute/PosixFileAttributes.group:()Ljava/nio/file/attribute/GroupPrincipal;\n+   #260 = InterfaceMethodref #895.#718    // java/nio/file/attribute/GroupPrincipal.getName:()Ljava/lang/String;\n+   #261 = String             #896         // unix\n+   #262 = String             #897         // unix:uid\n+   #263 = Methodref          #750.#898    // java/nio/file/Files.getAttribute:(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Ljava/lang/Object;\n+   #264 = Class              #899         // java/lang/Number\n+   #265 = Methodref          #264.#648    // java/lang/Number.longValue:()J\n+   #266 = String             #900         // unix:gid\n+   #267 = String             #901         // unix:ctime\n+   #268 = Class              #902         // java/nio/file/attribute/FileTime\n+   #269 = String             #903         // dos\n+   #270 = Class              #904         // java/nio/file/attribute/DosFileAttributes\n+   #271 = InterfaceMethodref #270.#889    // java/nio/file/attribute/DosFileAttributes.lastModifiedTime:()Ljava/nio/file/attribute/FileTime;\n+   #272 = InterfaceMethodref #270.#890    // java/nio/file/attribute/DosFileAttributes.creationTime:()Ljava/nio/file/attribute/FileTime;\n+   #273 = InterfaceMethodref #270.#891    // java/nio/file/attribute/DosFileAttributes.lastAccessTime:()Ljava/nio/file/attribute/FileTime;\n+   #274 = Methodref          #750.#905    // java/nio/file/Files.getOwner:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/UserPrincipal;\n+   #275 = Class              #906         // java/nio/file/attribute/BasicFileAttributes\n+   #276 = InterfaceMethodref #275.#889    // java/nio/file/attribute/BasicFileAttributes.lastModifiedTime:()Ljava/nio/file/attribute/FileTime;\n+   #277 = InterfaceMethodref #275.#890    // java/nio/file/attribute/BasicFileAttributes.creationTime:()Ljava/nio/file/attribute/FileTime;\n+   #278 = InterfaceMethodref #275.#891    // java/nio/file/attribute/BasicFileAttributes.lastAccessTime:()Ljava/nio/file/attribute/FileTime;\n+   #279 = String             #907         // The offset can not be smaller than 0\n+   #280 = Methodref          #85.#647     // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #281 = String             #908         // Major device number is out of range:\n+   #282 = Methodref          #107.#909    // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #283 = String             #910         // Minor device number is out of range:\n+   #284 = Methodref          #44.#911     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setUserId:(I)V\n+   #285 = Methodref          #44.#912     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setGroupId:(I)V\n+   #286 = String             #913         // Time must not be null\n+   #287 = Methodref          #914.#915    // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #288 = Methodref          #143.#916    // java/util/Date.getTime:()J\n+   #289 = String             #917         // Size is out of range:\n+   #290 = Methodref          #107.#918    // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+   #291 = InterfaceMethodref #553.#919    // java/util/Map.entrySet:()Ljava/util/Set;\n+   #292 = InterfaceMethodref #574.#752    // java/util/Set.iterator:()Ljava/util/Iterator;\n+   #293 = Class              #920         // java/util/Map$Entry\n+   #294 = InterfaceMethodref #293.#921    // java/util/Map$Entry.getKey:()Ljava/lang/Object;\n+   #295 = InterfaceMethodref #293.#922    // java/util/Map$Entry.getValue:()Ljava/lang/Object;\n+   #296 = Methodref          #44.#923     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.writeEntryHeader:([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n+   #297 = Fieldref           #825.#924    // org/apache/commons/compress/archivers/tar/TarUtils.FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #298 = Methodref          #825.#925    // org/apache/commons/compress/archivers/tar/TarUtils.formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+   #299 = Methodref          #44.#926     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.writeEntryHeaderField:(J[BIIZ)I\n+   #300 = Methodref          #268.#927    // java/nio/file/attribute/FileTime.to:(Ljava/util/concurrent/TimeUnit;)J\n+   #301 = Methodref          #825.#928    // org/apache/commons/compress/archivers/tar/TarUtils.formatNameBytes:(Ljava/lang/String;[BII)I\n+   #302 = Methodref          #44.#929     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.fill:(II[BI)I\n+   #303 = Methodref          #44.#930     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.writeEntryHeaderOptionalTimeField:(Ljava/nio/file/attribute/FileTime;I[BI)I\n+   #304 = Methodref          #825.#931    // org/apache/commons/compress/archivers/tar/TarUtils.computeCheckSum:([B)J\n+   #305 = Methodref          #825.#932    // org/apache/commons/compress/archivers/tar/TarUtils.formatCheckSumOctalBytes:(J[BII)I\n+   #306 = Methodref          #825.#933    // org/apache/commons/compress/archivers/tar/TarUtils.formatLongOctalBytes:(J[BII)I\n+   #307 = Methodref          #825.#934    // org/apache/commons/compress/archivers/tar/TarUtils.formatLongOctalOrBinaryBytes:(J[BII)I\n+   #308 = Class              #935         // java/lang/Object\n+   #309 = Class              #936         // org/apache/commons/compress/archivers/ArchiveEntry\n    #310 = Utf8               EMPTY_TAR_ARCHIVE_ENTRY_ARRAY\n    #311 = Utf8               [Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n    #312 = Utf8               UNKNOWN\n    #313 = Utf8               J\n    #314 = Utf8               ConstantValue\n    #315 = Utf8               MAX_NAMELEN\n    #316 = Utf8               I\n@@ -381,776 +381,761 @@\n    #372 = Utf8               ch1\n    #373 = Utf8               C\n    #374 = Utf8               ch2\n    #375 = Utf8               colon\n    #376 = Utf8               osName\n    #377 = Utf8               property\n    #378 = Utf8               fileName\n-   #379 = Class              #739         // java/lang/String\n-   #380 = Utf8               parseInstantFromDecimalSeconds\n-   #381 = Utf8               (Ljava/lang/String;)Ljava/time/Instant;\n-   #382 = Utf8               value\n-   #383 = Utf8               epochSeconds\n-   #384 = Utf8               Ljava/math/BigDecimal;\n-   #385 = Utf8               nanos\n-   #386 = Utf8               <init>\n-   #387 = Utf8               (Z)V\n-   #388 = Utf8               this\n-   #389 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-   #390 = Utf8               user\n-   #391 = Class              #681         // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-   #392 = Utf8               ([B)V\n-   #393 = Utf8               headerBuf\n-   #394 = Utf8               [B\n-   #395 = Utf8               ([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;)V\n-   #396 = Utf8               encoding\n-   #397 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #398 = Utf8               Exceptions\n-   #399 = Utf8               ([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n-   #400 = Utf8               lenient\n-   #401 = Utf8               ([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZJ)V\n-   #402 = Utf8               (Ljava/io/File;)V\n-   #403 = Utf8               Ljava/io/File;\n-   #404 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n-   #405 = Utf8               e\n-   #406 = Utf8               Ljava/io/IOException;\n-   #407 = Utf8               normalizedName\n-   #408 = Class              #952         // java/io/File\n-   #409 = Class              #702         // java/io/IOException\n-   #410 = Utf8               (Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n-   #411 = Utf8               globalPaxHeaders\n-   #412 = Utf8               LocalVariableTypeTable\n-   #413 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n-   #414 = Utf8               (Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZJ)V\n-   #415 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZJ)V\n-   #416 = Utf8               (Ljava/nio/file/Path;)V\n-   #417 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n-   #418 = Class              #769         // java/nio/file/Path\n-   #419 = Class              #358         // \"[Ljava/nio/file/LinkOption;\"\n-   #420 = Utf8               (Ljava/lang/String;)V\n-   #421 = Utf8               (Ljava/lang/String;Z)V\n-   #422 = Utf8               isDir\n-   #423 = Utf8               (Ljava/lang/String;B)V\n-   #424 = Utf8               (Ljava/lang/String;BZ)V\n-   #425 = Utf8               addPaxHeader\n-   #426 = Utf8               (Ljava/lang/String;Ljava/lang/String;)V\n-   #427 = Utf8               ex\n-   #428 = Utf8               clearExtraPaxHeaders\n-   #429 = Utf8               ()V\n-   #430 = Utf8               equals\n-   #431 = Utf8               (Ljava/lang/Object;)Z\n-   #432 = Utf8               it\n-   #433 = Utf8               Ljava/lang/Object;\n-   #434 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Z\n-   #435 = Utf8               evaluateType\n-   #436 = Utf8               (Ljava/util/Map;[B)I\n-   #437 = Utf8               header\n-   #438 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;[B)I\n-   #439 = Utf8               fill\n-   #440 = Utf8               (BI[BI)I\n-   #441 = Utf8               i\n-   #442 = Utf8               offset\n-   #443 = Utf8               outbuf\n-   #444 = Utf8               length\n-   #445 = Utf8               (II[BI)I\n-   #446 = Utf8               fillGNUSparse0xData\n-   #447 = Utf8               (Ljava/util/Map;)V\n-   #448 = Utf8               headers\n-   #449 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n-   #450 = Utf8               fillGNUSparse1xData\n-   #451 = Utf8               Ljava/lang/NumberFormatException;\n-   #452 = Class              #747         // java/lang/NumberFormatException\n-   #453 = Utf8               fillStarSparseData\n-   #454 = Utf8               getCreationTime\n-   #455 = Utf8               ()Ljava/nio/file/attribute/FileTime;\n-   #456 = Utf8               getDataOffset\n-   #457 = Utf8               ()J\n-   #458 = Utf8               getDevMajor\n-   #459 = Utf8               ()I\n-   #460 = Utf8               getDevMinor\n-   #461 = Utf8               getDirectoryEntries\n-   #462 = Utf8               ()[Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-   #463 = Utf8               p\n-   #464 = Utf8               dirStream\n-   #465 = Utf8               Ljava/nio/file/DirectoryStream;\n-   #466 = Utf8               entries\n-   #467 = Utf8               Ljava/nio/file/DirectoryStream<Ljava/nio/file/Path;>;\n-   #468 = Utf8               Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;>;\n-   #469 = Class              #807         // java/util/List\n-   #470 = Class              #953         // java/nio/file/DirectoryStream\n-   #471 = Class              #773         // java/lang/Throwable\n-   #472 = Class              #954         // java/util/Iterator\n-   #473 = Utf8               getExtraPaxHeader\n-   #474 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-   #475 = Utf8               getExtraPaxHeaders\n-   #476 = Utf8               ()Ljava/util/Map;\n-   #477 = Utf8               ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n-   #478 = Utf8               getFile\n-   #479 = Utf8               ()Ljava/io/File;\n-   #480 = Utf8               getGroupId\n-   #481 = Utf8               Deprecated\n-   #482 = Utf8               RuntimeVisibleAnnotations\n-   #483 = Utf8               Ljava/lang/Deprecated;\n-   #484 = Utf8               getGroupName\n-   #485 = Utf8               ()Ljava/lang/String;\n-   #486 = Utf8               getLastAccessTime\n-   #487 = Utf8               getLastModifiedDate\n-   #488 = Utf8               ()Ljava/util/Date;\n-   #489 = Utf8               getLastModifiedTime\n-   #490 = Utf8               getLinkName\n-   #491 = Utf8               getLongGroupId\n-   #492 = Utf8               getLongUserId\n-   #493 = Utf8               getMode\n-   #494 = Utf8               getModTime\n-   #495 = Utf8               getName\n-   #496 = Utf8               getOrderedSparseHeaders\n-   #497 = Utf8               ()Ljava/util/List;\n-   #498 = Utf8               str\n-   #499 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n-   #500 = Utf8               last\n-   #501 = Utf8               orderedAndFiltered\n-   #502 = Utf8               numberOfHeaders\n-   #503 = Class              #810         // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-   #504 = Utf8               ()Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-   #505 = Utf8               getPath\n-   #506 = Utf8               ()Ljava/nio/file/Path;\n-   #507 = Utf8               getRealSize\n-   #508 = Utf8               getSize\n-   #509 = Utf8               getSparseHeaders\n-   #510 = Utf8               getStatusChangeTime\n-   #511 = Utf8               getUserId\n-   #512 = Utf8               getUserName\n-   #513 = Utf8               hashCode\n-   #514 = Utf8               isBlockDevice\n-   #515 = Utf8               ()Z\n-   #516 = Utf8               isCharacterDevice\n-   #517 = Utf8               isCheckSumOK\n-   #518 = Utf8               isDescendent\n-   #519 = Utf8               desc\n-   #520 = Utf8               isDirectory\n-   #521 = Utf8               isFIFO\n-   #522 = Utf8               isFile\n-   #523 = Utf8               isGlobalPaxHeader\n-   #524 = Utf8               isGNULongLinkEntry\n-   #525 = Utf8               isGNULongNameEntry\n-   #526 = Utf8               isGNUSparse\n-   #527 = Utf8               isInvalidPrefix\n-   #528 = Utf8               ([B)Z\n-   #529 = Utf8               isInvalidXtarTime\n-   #530 = Utf8               ([BII)Z\n-   #531 = Utf8               b\n-   #532 = Utf8               lastIndex\n-   #533 = Utf8               buffer\n-   #534 = Utf8               isLink\n-   #535 = Utf8               isOldGNUSparse\n-   #536 = Utf8               isPaxGNU1XSparse\n-   #537 = Utf8               isPaxGNUSparse\n-   #538 = Utf8               isPaxHeader\n-   #539 = Utf8               isSparse\n-   #540 = Utf8               isStarSparse\n-   #541 = Utf8               isStreamContiguous\n-   #542 = Utf8               isSymbolicLink\n-   #543 = Utf8               isXstar\n-   #544 = Utf8               (Ljava/util/Map;[B)Z\n-   #545 = Utf8               archType\n-   #546 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;[B)Z\n-   #547 = Utf8               parseOctalOrBinary\n-   #548 = Utf8               ([BIIZ)J\n-   #549 = Utf8               Ljava/lang/IllegalArgumentException;\n-   #550 = Class              #723         // java/lang/IllegalArgumentException\n-   #551 = Utf8               parseTarHeader\n-   #552 = Utf8               ex2\n-   #553 = Class              #394         // \"[B\"\n-   #554 = Utf8               ([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZZ)V\n-   #555 = Utf8               oldStyle\n-   #556 = Utf8               (Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZZ)V\n-   #557 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZZ)V\n-   #558 = Utf8               parseTarHeaderUnwrapped\n-   #559 = Utf8               xstarPrefix\n-   #560 = Utf8               prefix\n-   #561 = Utf8               type\n-   #562 = Class              #955         // java/util/Map\n-   #563 = Class              #956         // org/apache/commons/compress/archivers/zip/ZipEncoding\n-   #564 = Utf8               processPaxHeader\n-   #565 = Utf8               key\n-   #566 = Utf8               val\n-   #567 = Utf8               (Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V\n-   #568 = Utf8               (Ljava/lang/String;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n-   #569 = Utf8               readFileMode\n-   #570 = Utf8               nameLength\n-   #571 = Utf8               options\n-   #572 = Utf8               readOsSpecificProperties\n-   #573 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)V\n-   #574 = Utf8               posixFileAttributes\n-   #575 = Utf8               Ljava/nio/file/attribute/PosixFileAttributes;\n-   #576 = Utf8               dosFileAttributes\n-   #577 = Utf8               Ljava/nio/file/attribute/DosFileAttributes;\n-   #578 = Utf8               basicFileAttributes\n-   #579 = Utf8               Ljava/nio/file/attribute/BasicFileAttributes;\n-   #580 = Utf8               availableAttributeViews\n-   #581 = Utf8               Ljava/util/Set;\n-   #582 = Utf8               Ljava/util/Set<Ljava/lang/String;>;\n-   #583 = Class              #957         // java/util/Set\n-   #584 = Class              #902         // java/nio/file/attribute/PosixFileAttributes\n-   #585 = Utf8               setCreationTime\n-   #586 = Utf8               (Ljava/nio/file/attribute/FileTime;)V\n-   #587 = Utf8               time\n-   #588 = Utf8               setDataOffset\n-   #589 = Utf8               (J)V\n-   #590 = Utf8               setDevMajor\n-   #591 = Utf8               (I)V\n-   #592 = Utf8               devNo\n-   #593 = Utf8               setDevMinor\n-   #594 = Utf8               setGroupId\n-   #595 = Utf8               setGroupName\n-   #596 = Utf8               setIds\n-   #597 = Utf8               (II)V\n-   #598 = Utf8               setLastAccessTime\n-   #599 = Utf8               setLastModifiedTime\n-   #600 = Utf8               setLinkName\n-   #601 = Utf8               link\n-   #602 = Utf8               setMode\n-   #603 = Utf8               setModTime\n-   #604 = Utf8               (Ljava/util/Date;)V\n-   #605 = Utf8               Ljava/util/Date;\n-   #606 = Utf8               setName\n-   #607 = Utf8               setNames\n-   #608 = Utf8               setSize\n-   #609 = Utf8               setSparseHeaders\n-   #610 = Utf8               (Ljava/util/List;)V\n-   #611 = Utf8               (Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;)V\n-   #612 = Utf8               setStatusChangeTime\n-   #613 = Utf8               setUserId\n-   #614 = Utf8               setUserName\n-   #615 = Utf8               updateEntryFromPaxHeaders\n-   #616 = Utf8               ent\n-   #617 = Utf8               Entry\n-   #618 = Utf8               InnerClasses\n-   #619 = Utf8               Ljava/util/Map$Entry;\n-   #620 = Utf8               Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/String;>;\n-   #621 = Utf8               writeEntryHeader\n-   #622 = Utf8               starMode\n-   #623 = Utf8               csOffset\n-   #624 = Utf8               chk\n-   #625 = Utf8               writeEntryHeaderField\n-   #626 = Utf8               (J[BIIZ)I\n-   #627 = Utf8               writeEntryHeaderOptionalTimeField\n-   #628 = Utf8               (Ljava/nio/file/attribute/FileTime;I[BI)I\n-   #629 = Utf8               fieldLength\n-   #630 = Utf8               lambda$getOrderedSparseHeaders$0\n-   #631 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;)Z\n-   #632 = Utf8               s\n-   #633 = Utf8               <clinit>\n-   #634 = Utf8               SourceFile\n-   #635 = Utf8               TarArchiveEntry.java\n-   #636 = Class              #958         // java/util/concurrent/TimeUnit\n-   #637 = NameAndType        #959:#960    // SECONDS:Ljava/util/concurrent/TimeUnit;\n-   #638 = NameAndType        #961:#962    // from:(JLjava/util/concurrent/TimeUnit;)Ljava/nio/file/attribute/FileTime;\n-   #639 = Utf8               os.name\n-   #640 = Class              #963         // java/lang/System\n-   #641 = NameAndType        #964:#474    // getProperty:(Ljava/lang/String;)Ljava/lang/String;\n-   #642 = Class              #965         // java/util/Locale\n-   #643 = NameAndType        #966:#967    // ROOT:Ljava/util/Locale;\n-   #644 = NameAndType        #968:#969    // toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;\n-   #645 = Utf8               windows\n-   #646 = NameAndType        #970:#971    // startsWith:(Ljava/lang/String;)Z\n-   #647 = NameAndType        #444:#459    // length:()I\n-   #648 = NameAndType        #972:#973    // charAt:(I)C\n-   #649 = NameAndType        #974:#975    // substring:(I)Ljava/lang/String;\n-   #650 = Utf8               netware\n-   #651 = NameAndType        #976:#977    // contains:(Ljava/lang/CharSequence;)Z\n-   #652 = NameAndType        #978:#979    // indexOf:(I)I\n-   #653 = Class              #952         // java/io/File\n-   #654 = NameAndType        #980:#373    // separatorChar:C\n-   #655 = NameAndType        #981:#982    // replace:(CC)Ljava/lang/String;\n-   #656 = Utf8               /\n-   #657 = Utf8               java/math/BigDecimal\n-   #658 = NameAndType        #386:#420    // \"<init>\":(Ljava/lang/String;)V\n-   #659 = NameAndType        #983:#457    // longValue:()J\n-   #660 = NameAndType        #984:#384    // ONE:Ljava/math/BigDecimal;\n-   #661 = NameAndType        #985:#986    // remainder:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #662 = NameAndType        #987:#988    // movePointRight:(I)Ljava/math/BigDecimal;\n-   #663 = Class              #989         // java/time/Instant\n-   #664 = NameAndType        #990:#991    // ofEpochSecond:(JJ)Ljava/time/Instant;\n-   #665 = NameAndType        #386:#429    // \"<init>\":()V\n-   #666 = Utf8\n-   #667 = NameAndType        #323:#324    // name:Ljava/lang/String;\n-   #668 = NameAndType        #339:#324    // linkName:Ljava/lang/String;\n-   #669 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n-   #670 = Utf8               ustar\\u0000\n-   #671 = NameAndType        #340:#324    // magic:Ljava/lang/String;\n-   #672 = Utf8               00\n-   #673 = NameAndType        #341:#324    // version:Ljava/lang/String;\n-   #674 = NameAndType        #343:#324    // groupName:Ljava/lang/String;\n-   #675 = Utf8               java/util/HashMap\n-   #676 = NameAndType        #359:#360    // extraPaxHeaders:Ljava/util/Map;\n-   #677 = Utf8               org/apache/commons/compress/archivers/EntryStreamOffsets\n-   #678 = NameAndType        #362:#313    // dataOffset:J\n-   #679 = Utf8               user.name\n-   #680 = NameAndType        #964:#992    // getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-   #681 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-   #682 = NameAndType        #974:#993    // substring:(II)Ljava/lang/String;\n-   #683 = NameAndType        #342:#324    // userName:Ljava/lang/String;\n-   #684 = NameAndType        #355:#356    // file:Ljava/nio/file/Path;\n-   #685 = Class              #994         // org/apache/commons/compress/utils/IOUtils\n-   #686 = NameAndType        #995:#358    // EMPTY_LINK_OPTIONS:[Ljava/nio/file/LinkOption;\n-   #687 = NameAndType        #357:#358    // linkOptions:[Ljava/nio/file/LinkOption;\n-   #688 = NameAndType        #325:#326    // preserveAbsolutePath:Z\n-   #689 = NameAndType        #386:#387    // \"<init>\":(Z)V\n-   #690 = NameAndType        #551:#392    // parseTarHeader:([B)V\n-   #691 = NameAndType        #386:#399    // \"<init>\":([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n-   #692 = Class              #996         // java/util/Collections\n-   #693 = NameAndType        #997:#476    // emptyMap:()Ljava/util/Map;\n-   #694 = NameAndType        #386:#410    // \"<init>\":(Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n-   #695 = NameAndType        #588:#589    // setDataOffset:(J)V\n-   #696 = NameAndType        #505:#485    // getPath:()Ljava/lang/String;\n-   #697 = NameAndType        #386:#404    // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-   #698 = NameAndType        #370:#371    // normalizeFileName:(Ljava/lang/String;Z)Ljava/lang/String;\n-   #699 = NameAndType        #998:#506    // toPath:()Ljava/nio/file/Path;\n-   #700 = Utf8               java/nio/file/LinkOption\n-   #701 = NameAndType        #569:#417    // readFileMode:(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n-   #702 = Utf8               java/io/IOException\n-   #703 = NameAndType        #520:#515    // isDirectory:()Z\n-   #704 = NameAndType        #444:#457    // length:()J\n-   #705 = NameAndType        #330:#313    // size:J\n-   #706 = NameAndType        #572:#573    // readOsSpecificProperties:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)V\n-   #707 = NameAndType        #999:#457    // lastModified:()J\n-   #708 = NameAndType        #1000:#364   // fromMillis:(J)Ljava/nio/file/attribute/FileTime;\n-   #709 = NameAndType        #331:#332    // mTime:Ljava/nio/file/attribute/FileTime;\n-   #710 = NameAndType        #551:#556    // parseTarHeader:(Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZZ)V\n-   #711 = NameAndType        #1001:#485   // toString:()Ljava/lang/String;\n-   #712 = NameAndType        #386:#417    // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n-   #713 = NameAndType        #386:#421    // \"<init>\":(Ljava/lang/String;Z)V\n-   #714 = NameAndType        #1002:#971   // endsWith:(Ljava/lang/String;)Z\n-   #715 = NameAndType        #327:#316    // mode:I\n-   #716 = NameAndType        #337:#338    // linkFlag:B\n-   #717 = NameAndType        #1003:#1004  // now:()Ljava/time/Instant;\n-   #718 = NameAndType        #961:#1005   // from:(Ljava/time/Instant;)Ljava/nio/file/attribute/FileTime;\n-   #719 = NameAndType        #386:#424    // \"<init>\":(Ljava/lang/String;BZ)V\n-   #720 = Utf8               ustar\n-   #721 = Utf8                \\u0000\n-   #722 = NameAndType        #564:#426    // processPaxHeader:(Ljava/lang/String;Ljava/lang/String;)V\n-   #723 = Utf8               java/lang/IllegalArgumentException\n-   #724 = Utf8               Invalid input\n-   #725 = NameAndType        #386:#1006   // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #726 = Class              #955         // java/util/Map\n-   #727 = NameAndType        #1007:#429   // clear:()V\n-   #728 = NameAndType        #1008:#1009  // getClass:()Ljava/lang/Class;\n-   #729 = NameAndType        #430:#434    // equals:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Z\n-   #730 = NameAndType        #495:#485    // getName:()Ljava/lang/String;\n-   #731 = NameAndType        #430:#431    // equals:(Ljava/lang/Object;)Z\n-   #732 = Class              #1010        // org/apache/commons/compress/utils/ArchiveUtils\n-   #733 = NameAndType        #1011:#1012  // matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n-   #734 = NameAndType        #543:#544    // isXstar:(Ljava/util/Map;[B)Z\n-   #735 = NameAndType        #439:#440    // fill:(BI[BI)I\n-   #736 = NameAndType        #352:#326    // paxGNUSparse:Z\n-   #737 = Utf8               GNU.sparse.size\n-   #738 = NameAndType        #1013:#1014  // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #739 = Utf8               java/lang/String\n-   #740 = Class              #1015        // java/lang/Integer\n-   #741 = NameAndType        #1016:#1017  // parseInt:(Ljava/lang/String;)I\n-   #742 = NameAndType        #351:#313    // realSize:J\n-   #743 = Utf8               GNU.sparse.name\n-   #744 = NameAndType        #1018:#431   // containsKey:(Ljava/lang/Object;)Z\n-   #745 = NameAndType        #353:#326    // paxGNU1XSparse:Z\n-   #746 = Utf8               GNU.sparse.realsize\n-   #747 = Utf8               java/lang/NumberFormatException\n-   #748 = Utf8               java/lang/StringBuilder\n-   #749 = Utf8               Corrupted TAR archive. GNU.sparse.realsize header for\n-   #750 = NameAndType        #1019:#1020  // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #751 = Utf8                contains non-numeric value\n-   #752 = NameAndType        #354:#326    // starSparse:Z\n-   #753 = Utf8               SCHILY.realsize\n-   #754 = Class              #1021        // java/lang/Long\n-   #755 = NameAndType        #1022:#1023  // parseLong:(Ljava/lang/String;)J\n-   #756 = Utf8               Corrupted TAR archive. SCHILY.realsize header for\n-   #757 = NameAndType        #335:#332    // birthTime:Ljava/nio/file/attribute/FileTime;\n-   #758 = NameAndType        #344:#316    // devMajor:I\n-   #759 = NameAndType        #345:#316    // devMinor:I\n-   #760 = NameAndType        #310:#311    // EMPTY_TAR_ARCHIVE_ENTRY_ARRAY:[Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-   #761 = Utf8               java/util/ArrayList\n-   #762 = Class              #1024        // java/nio/file/Files\n-   #763 = NameAndType        #1025:#1026  // newDirectoryStream:(Ljava/nio/file/Path;)Ljava/nio/file/DirectoryStream;\n-   #764 = Class              #953         // java/nio/file/DirectoryStream\n-   #765 = NameAndType        #1027:#1028  // iterator:()Ljava/util/Iterator;\n-   #766 = Class              #954         // java/util/Iterator\n-   #767 = NameAndType        #1029:#515   // hasNext:()Z\n-   #768 = NameAndType        #1030:#1031  // next:()Ljava/lang/Object;\n-   #769 = Utf8               java/nio/file/Path\n-   #770 = NameAndType        #386:#416    // \"<init>\":(Ljava/nio/file/Path;)V\n-   #771 = NameAndType        #1032:#431   // add:(Ljava/lang/Object;)Z\n-   #772 = NameAndType        #1033:#429   // close:()V\n-   #773 = Utf8               java/lang/Throwable\n-   #774 = NameAndType        #1034:#1035  // addSuppressed:(Ljava/lang/Throwable;)V\n-   #775 = NameAndType        #1036:#1037  // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-   #776 = NameAndType        #1038:#1039  // unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;\n-   #777 = NameAndType        #1040:#479   // toFile:()Ljava/io/File;\n-   #778 = NameAndType        #329:#313    // groupId:J\n-   #779 = NameAndType        #334:#332    // aTime:Ljava/nio/file/attribute/FileTime;\n-   #780 = NameAndType        #494:#488    // getModTime:()Ljava/util/Date;\n-   #781 = NameAndType        #328:#313    // userId:J\n-   #782 = Utf8               java/util/Date\n-   #783 = NameAndType        #1041:#457   // toMillis:()J\n-   #784 = NameAndType        #386:#589    // \"<init>\":(J)V\n-   #785 = NameAndType        #346:#347    // sparseHeaders:Ljava/util/List;\n-   #786 = NameAndType        #1042:#515   // isEmpty:()Z\n-   #787 = NameAndType        #1043:#497   // emptyList:()Ljava/util/List;\n-   #788 = NameAndType        #1044:#1045  // stream:()Ljava/util/stream/Stream;\n-   #789 = Utf8               BootstrapMethods\n-   #790 = MethodHandle       6:#1046      // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-   #791 = MethodType         #431         //  (Ljava/lang/Object;)Z\n-   #792 = MethodHandle       6:#1047      // REF_invokeStatic org/apache/commons/compress/archivers/tar/TarArchiveEntry.lambda$getOrderedSparseHeaders$0:(Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;)Z\n-   #793 = MethodType         #631         //  (Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;)Z\n-   #794 = NameAndType        #1048:#1049  // test:()Ljava/util/function/Predicate;\n-   #795 = Class              #1050        // java/util/stream/Stream\n-   #796 = NameAndType        #1051:#1052  // filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;\n-   #797 = MethodType         #1053        //  (Ljava/lang/Object;)J\n-   #798 = MethodHandle       5:#161       // REF_invokeVirtual org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n-   #799 = MethodType         #1054        //  (Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;)J\n-   #800 = NameAndType        #1055:#1056  // applyAsLong:()Ljava/util/function/ToLongFunction;\n-   #801 = Class              #1057        // java/util/Comparator\n-   #802 = NameAndType        #1058:#1059  // comparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n-   #803 = NameAndType        #1060:#1061  // sorted:(Ljava/util/Comparator;)Ljava/util/stream/Stream;\n-   #804 = Class              #1062        // java/util/stream/Collectors\n-   #805 = NameAndType        #1063:#1064  // toList:()Ljava/util/stream/Collector;\n-   #806 = NameAndType        #1065:#1066  // collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;\n-   #807 = Utf8               java/util/List\n-   #808 = NameAndType        #330:#459    // size:()I\n-   #809 = NameAndType        #1013:#1067  // get:(I)Ljava/lang/Object;\n-   #810 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-   #811 = NameAndType        #1068:#457   // getOffset:()J\n-   #812 = NameAndType        #1069:#457   // getNumbytes:()J\n-   #813 = Utf8               Corrupted TAR archive. Sparse blocks for\n-   #814 = Utf8                overlap each other.\n-   #815 = Utf8               Unreadable TAR archive. Offset and numbytes for sparse block in\n-   #816 = Utf8                too large.\n-   #817 = NameAndType        #507:#457    // getRealSize:()J\n-   #818 = Utf8               Corrupted TAR archive. Sparse block extends beyond real size of the entry\n-   #819 = NameAndType        #539:#515    // isSparse:()Z\n-   #820 = NameAndType        #508:#457    // getSize:()J\n-   #821 = NameAndType        #333:#332    // cTime:Ljava/nio/file/attribute/FileTime;\n-   #822 = NameAndType        #513:#459    // hashCode:()I\n-   #823 = NameAndType        #336:#326    // checkSumOK:Z\n-   #824 = NameAndType        #520:#1070   // isDirectory:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n-   #825 = NameAndType        #538:#515    // isPaxHeader:()Z\n-   #826 = NameAndType        #523:#515    // isGlobalPaxHeader:()Z\n-   #827 = NameAndType        #350:#326    // isExtended:Z\n-   #828 = NameAndType        #1071:#1070  // isRegularFile:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n-   #829 = NameAndType        #535:#515    // isOldGNUSparse:()Z\n-   #830 = NameAndType        #537:#515    // isPaxGNUSparse:()Z\n-   #831 = NameAndType        #526:#515    // isGNUSparse:()Z\n-   #832 = NameAndType        #540:#515    // isStarSparse:()Z\n-   #833 = Utf8               tar\\u0000\n-   #834 = Utf8               SCHILY.archtype\n-   #835 = Utf8               xustar\n-   #836 = Utf8               exustar\n-   #837 = NameAndType        #527:#528    // isInvalidPrefix:([B)Z\n-   #838 = NameAndType        #529:#530    // isInvalidXtarTime:([BII)Z\n-   #839 = Class              #1072        // org/apache/commons/compress/archivers/tar/TarUtils\n-   #840 = NameAndType        #547:#1073   // parseOctalOrBinary:([BII)J\n-   #841 = NameAndType        #1074:#397   // DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #842 = NameAndType        #551:#395    // parseTarHeader:([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;)V\n-   #843 = NameAndType        #551:#554    // parseTarHeader:([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZZ)V\n-   #844 = Utf8               java/io/UncheckedIOException\n-   #845 = NameAndType        #386:#1075   // \"<init>\":(Ljava/io/IOException;)V\n-   #846 = NameAndType        #558:#556    // parseTarHeaderUnwrapped:(Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZZ)V\n-   #847 = Utf8               Corrupted TAR archive.\n-   #848 = NameAndType        #1076:#1077  // parseName:([BII)Ljava/lang/String;\n-   #849 = NameAndType        #1076:#1078  // parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n-   #850 = NameAndType        #547:#548    // parseOctalOrBinary:([BIIZ)J\n-   #851 = Utf8               broken archive, entry with negative size\n-   #852 = NameAndType        #1079:#528   // verifyCheckSum:([B)Z\n-   #853 = NameAndType        #435:#436    // evaluateType:(Ljava/util/Map;[B)I\n-   #854 = NameAndType        #363:#364    // fileTimeFromOptionalSeconds:(J)Ljava/nio/file/attribute/FileTime;\n-   #855 = NameAndType        #1080:#1081  // readSparseStructs:([BII)Ljava/util/List;\n-   #856 = NameAndType        #386:#1082   // \"<init>\":(Ljava/util/Collection;)V\n-   #857 = NameAndType        #1083:#1084  // parseBoolean:([BI)Z\n-   #858 = NameAndType        #1085:#1073  // parseOctal:([BII)J\n-   #859 = NameAndType        #564:#567    // processPaxHeader:(Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V\n-   #860 = Utf8               path\n-   #861 = Utf8               linkpath\n-   #862 = Utf8               gid\n-   #863 = Utf8               gname\n-   #864 = Utf8               uid\n-   #865 = Utf8               uname\n-   #866 = Utf8               mtime\n-   #867 = Utf8               atime\n-   #868 = Utf8               ctime\n-   #869 = Utf8               LIBARCHIVE.creationtime\n-   #870 = Utf8               SCHILY.devminor\n-   #871 = Utf8               SCHILY.devmajor\n-   #872 = Utf8               SCHILY.filetype\n-   #873 = NameAndType        #606:#420    // setName:(Ljava/lang/String;)V\n-   #874 = NameAndType        #600:#420    // setLinkName:(Ljava/lang/String;)V\n-   #875 = NameAndType        #594:#589    // setGroupId:(J)V\n-   #876 = NameAndType        #595:#420    // setGroupName:(Ljava/lang/String;)V\n-   #877 = NameAndType        #613:#589    // setUserId:(J)V\n-   #878 = NameAndType        #614:#420    // setUserName:(Ljava/lang/String;)V\n-   #879 = Utf8               Corrupted TAR archive. Entry size is negative\n-   #880 = NameAndType        #608:#589    // setSize:(J)V\n-   #881 = NameAndType        #380:#381    // parseInstantFromDecimalSeconds:(Ljava/lang/String;)Ljava/time/Instant;\n-   #882 = NameAndType        #599:#586    // setLastModifiedTime:(Ljava/nio/file/attribute/FileTime;)V\n-   #883 = NameAndType        #598:#586    // setLastAccessTime:(Ljava/nio/file/attribute/FileTime;)V\n-   #884 = NameAndType        #612:#586    // setStatusChangeTime:(Ljava/nio/file/attribute/FileTime;)V\n-   #885 = NameAndType        #585:#586    // setCreationTime:(Ljava/nio/file/attribute/FileTime;)V\n-   #886 = Utf8               Corrupted TAR archive. Dev-Minor is negative\n-   #887 = NameAndType        #593:#591    // setDevMinor:(I)V\n-   #888 = Utf8               Corrupted TAR archive. Dev-Major is negative\n-   #889 = NameAndType        #590:#591    // setDevMajor:(I)V\n-   #890 = NameAndType        #446:#447    // fillGNUSparse0xData:(Ljava/util/Map;)V\n-   #891 = NameAndType        #450:#447    // fillGNUSparse1xData:(Ljava/util/Map;)V\n-   #892 = Utf8               sparse\n-   #893 = NameAndType        #453:#447    // fillStarSparseData:(Ljava/util/Map;)V\n-   #894 = NameAndType        #1086:#1087  // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #895 = NameAndType        #330:#1088   // size:(Ljava/nio/file/Path;)J\n-   #896 = NameAndType        #1089:#1090  // getFileSystem:()Ljava/nio/file/FileSystem;\n-   #897 = Class              #1091        // java/nio/file/FileSystem\n-   #898 = NameAndType        #1092:#1093  // supportedFileAttributeViews:()Ljava/util/Set;\n-   #899 = Utf8               posix\n-   #900 = Class              #957         // java/util/Set\n-   #901 = NameAndType        #976:#431    // contains:(Ljava/lang/Object;)Z\n-   #902 = Utf8               java/nio/file/attribute/PosixFileAttributes\n-   #903 = NameAndType        #1094:#1095  // readAttributes:(Ljava/nio/file/Path;Ljava/lang/Class;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/BasicFileAttributes;\n-   #904 = NameAndType        #1096:#455   // lastModifiedTime:()Ljava/nio/file/attribute/FileTime;\n-   #905 = NameAndType        #1097:#455   // creationTime:()Ljava/nio/file/attribute/FileTime;\n-   #906 = NameAndType        #1098:#455   // lastAccessTime:()Ljava/nio/file/attribute/FileTime;\n-   #907 = NameAndType        #1099:#1100  // owner:()Ljava/nio/file/attribute/UserPrincipal;\n-   #908 = Class              #1101        // java/nio/file/attribute/UserPrincipal\n-   #909 = NameAndType        #1102:#1103  // group:()Ljava/nio/file/attribute/GroupPrincipal;\n-   #910 = Class              #1104        // java/nio/file/attribute/GroupPrincipal\n-   #911 = Utf8               unix\n-   #912 = Utf8               unix:uid\n-   #913 = NameAndType        #1105:#1106  // getAttribute:(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Ljava/lang/Object;\n-   #914 = Utf8               java/lang/Number\n-   #915 = Utf8               unix:gid\n-   #916 = Utf8               unix:ctime\n-   #917 = Utf8               java/nio/file/attribute/FileTime\n-   #918 = Utf8               dos\n-   #919 = Utf8               java/nio/file/attribute/DosFileAttributes\n-   #920 = NameAndType        #1107:#1108  // getOwner:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/UserPrincipal;\n-   #921 = Utf8               java/nio/file/attribute/BasicFileAttributes\n-   #922 = Utf8               The offset can not be smaller than 0\n-   #923 = Utf8               Major device number is out of range:\n-   #924 = NameAndType        #1019:#1109  // append:(I)Ljava/lang/StringBuilder;\n-   #925 = Utf8               Minor device number is out of range:\n-   #926 = NameAndType        #613:#591    // setUserId:(I)V\n-   #927 = NameAndType        #594:#591    // setGroupId:(I)V\n-   #928 = Utf8               Time must not be null\n-   #929 = Class              #1110        // java/util/Objects\n-   #930 = NameAndType        #1111:#1112  // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-   #931 = NameAndType        #1113:#457   // getTime:()J\n-   #932 = Utf8               Size is out of range:\n-   #933 = NameAndType        #1019:#1114  // append:(J)Ljava/lang/StringBuilder;\n-   #934 = NameAndType        #1115:#1093  // entrySet:()Ljava/util/Set;\n-   #935 = Utf8               java/util/Map$Entry\n-   #936 = NameAndType        #1116:#1031  // getKey:()Ljava/lang/Object;\n-   #937 = NameAndType        #1117:#1031  // getValue:()Ljava/lang/Object;\n-   #938 = NameAndType        #621:#399    // writeEntryHeader:([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n-   #939 = NameAndType        #1118:#397   // FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #940 = NameAndType        #1119:#1120  // formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n-   #941 = NameAndType        #625:#626    // writeEntryHeaderField:(J[BIIZ)I\n-   #942 = NameAndType        #1121:#1122  // to:(Ljava/util/concurrent/TimeUnit;)J\n-   #943 = NameAndType        #1119:#1123  // formatNameBytes:(Ljava/lang/String;[BII)I\n-   #944 = NameAndType        #439:#445    // fill:(II[BI)I\n-   #945 = NameAndType        #627:#628    // writeEntryHeaderOptionalTimeField:(Ljava/nio/file/attribute/FileTime;I[BI)I\n-   #946 = NameAndType        #1124:#1125  // computeCheckSum:([B)J\n-   #947 = NameAndType        #1126:#1127  // formatCheckSumOctalBytes:(J[BII)I\n-   #948 = NameAndType        #1128:#1127  // formatLongOctalBytes:(J[BII)I\n-   #949 = NameAndType        #1129:#1127  // formatLongOctalOrBinaryBytes:(J[BII)I\n-   #950 = Utf8               java/lang/Object\n-   #951 = Utf8               org/apache/commons/compress/archivers/ArchiveEntry\n-   #952 = Utf8               java/io/File\n-   #953 = Utf8               java/nio/file/DirectoryStream\n-   #954 = Utf8               java/util/Iterator\n-   #955 = Utf8               java/util/Map\n-   #956 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-   #957 = Utf8               java/util/Set\n-   #958 = Utf8               java/util/concurrent/TimeUnit\n-   #959 = Utf8               SECONDS\n-   #960 = Utf8               Ljava/util/concurrent/TimeUnit;\n-   #961 = Utf8               from\n-   #962 = Utf8               (JLjava/util/concurrent/TimeUnit;)Ljava/nio/file/attribute/FileTime;\n-   #963 = Utf8               java/lang/System\n-   #964 = Utf8               getProperty\n-   #965 = Utf8               java/util/Locale\n-   #966 = Utf8               ROOT\n-   #967 = Utf8               Ljava/util/Locale;\n-   #968 = Utf8               toLowerCase\n-   #969 = Utf8               (Ljava/util/Locale;)Ljava/lang/String;\n-   #970 = Utf8               startsWith\n-   #971 = Utf8               (Ljava/lang/String;)Z\n-   #972 = Utf8               charAt\n-   #973 = Utf8               (I)C\n-   #974 = Utf8               substring\n-   #975 = Utf8               (I)Ljava/lang/String;\n-   #976 = Utf8               contains\n-   #977 = Utf8               (Ljava/lang/CharSequence;)Z\n-   #978 = Utf8               indexOf\n-   #979 = Utf8               (I)I\n-   #980 = Utf8               separatorChar\n-   #981 = Utf8               replace\n-   #982 = Utf8               (CC)Ljava/lang/String;\n-   #983 = Utf8               longValue\n-   #984 = Utf8               ONE\n-   #985 = Utf8               remainder\n-   #986 = Utf8               (Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #987 = Utf8               movePointRight\n-   #988 = Utf8               (I)Ljava/math/BigDecimal;\n-   #989 = Utf8               java/time/Instant\n-   #990 = Utf8               ofEpochSecond\n-   #991 = Utf8               (JJ)Ljava/time/Instant;\n-   #992 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-   #993 = Utf8               (II)Ljava/lang/String;\n-   #994 = Utf8               org/apache/commons/compress/utils/IOUtils\n-   #995 = Utf8               EMPTY_LINK_OPTIONS\n-   #996 = Utf8               java/util/Collections\n-   #997 = Utf8               emptyMap\n-   #998 = Utf8               toPath\n-   #999 = Utf8               lastModified\n-  #1000 = Utf8               fromMillis\n-  #1001 = Utf8               toString\n-  #1002 = Utf8               endsWith\n-  #1003 = Utf8               now\n-  #1004 = Utf8               ()Ljava/time/Instant;\n-  #1005 = Utf8               (Ljava/time/Instant;)Ljava/nio/file/attribute/FileTime;\n-  #1006 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #1007 = Utf8               clear\n-  #1008 = Utf8               getClass\n-  #1009 = Utf8               ()Ljava/lang/Class;\n-  #1010 = Utf8               org/apache/commons/compress/utils/ArchiveUtils\n-  #1011 = Utf8               matchAsciiBuffer\n-  #1012 = Utf8               (Ljava/lang/String;[BII)Z\n-  #1013 = Utf8               get\n-  #1014 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #1015 = Utf8               java/lang/Integer\n-  #1016 = Utf8               parseInt\n-  #1017 = Utf8               (Ljava/lang/String;)I\n-  #1018 = Utf8               containsKey\n-  #1019 = Utf8               append\n-  #1020 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #1021 = Utf8               java/lang/Long\n-  #1022 = Utf8               parseLong\n-  #1023 = Utf8               (Ljava/lang/String;)J\n-  #1024 = Utf8               java/nio/file/Files\n-  #1025 = Utf8               newDirectoryStream\n-  #1026 = Utf8               (Ljava/nio/file/Path;)Ljava/nio/file/DirectoryStream;\n-  #1027 = Utf8               iterator\n-  #1028 = Utf8               ()Ljava/util/Iterator;\n-  #1029 = Utf8               hasNext\n-  #1030 = Utf8               next\n-  #1031 = Utf8               ()Ljava/lang/Object;\n-  #1032 = Utf8               add\n-  #1033 = Utf8               close\n-  #1034 = Utf8               addSuppressed\n-  #1035 = Utf8               (Ljava/lang/Throwable;)V\n-  #1036 = Utf8               toArray\n-  #1037 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #1038 = Utf8               unmodifiableMap\n-  #1039 = Utf8               (Ljava/util/Map;)Ljava/util/Map;\n-  #1040 = Utf8               toFile\n-  #1041 = Utf8               toMillis\n-  #1042 = Utf8               isEmpty\n-  #1043 = Utf8               emptyList\n-  #1044 = Utf8               stream\n-  #1045 = Utf8               ()Ljava/util/stream/Stream;\n-  #1046 = Methodref          #1130.#1131  // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #1047 = Methodref          #44.#1132    // org/apache/commons/compress/archivers/tar/TarArchiveEntry.lambda$getOrderedSparseHeaders$0:(Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;)Z\n-  #1048 = Utf8               test\n-  #1049 = Utf8               ()Ljava/util/function/Predicate;\n-  #1050 = Utf8               java/util/stream/Stream\n-  #1051 = Utf8               filter\n-  #1052 = Utf8               (Ljava/util/function/Predicate;)Ljava/util/stream/Stream;\n-  #1053 = Utf8               (Ljava/lang/Object;)J\n-  #1054 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;)J\n-  #1055 = Utf8               applyAsLong\n-  #1056 = Utf8               ()Ljava/util/function/ToLongFunction;\n-  #1057 = Utf8               java/util/Comparator\n-  #1058 = Utf8               comparingLong\n-  #1059 = Utf8               (Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n-  #1060 = Utf8               sorted\n-  #1061 = Utf8               (Ljava/util/Comparator;)Ljava/util/stream/Stream;\n-  #1062 = Utf8               java/util/stream/Collectors\n-  #1063 = Utf8               toList\n-  #1064 = Utf8               ()Ljava/util/stream/Collector;\n-  #1065 = Utf8               collect\n-  #1066 = Utf8               (Ljava/util/stream/Collector;)Ljava/lang/Object;\n-  #1067 = Utf8               (I)Ljava/lang/Object;\n-  #1068 = Utf8               getOffset\n-  #1069 = Utf8               getNumbytes\n-  #1070 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n-  #1071 = Utf8               isRegularFile\n-  #1072 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils\n-  #1073 = Utf8               ([BII)J\n-  #1074 = Utf8               DEFAULT_ENCODING\n-  #1075 = Utf8               (Ljava/io/IOException;)V\n-  #1076 = Utf8               parseName\n-  #1077 = Utf8               ([BII)Ljava/lang/String;\n-  #1078 = Utf8               ([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n-  #1079 = Utf8               verifyCheckSum\n-  #1080 = Utf8               readSparseStructs\n-  #1081 = Utf8               ([BII)Ljava/util/List;\n-  #1082 = Utf8               (Ljava/util/Collection;)V\n-  #1083 = Utf8               parseBoolean\n-  #1084 = Utf8               ([BI)Z\n-  #1085 = Utf8               parseOctal\n-  #1086 = Utf8               put\n-  #1087 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #1088 = Utf8               (Ljava/nio/file/Path;)J\n-  #1089 = Utf8               getFileSystem\n-  #1090 = Utf8               ()Ljava/nio/file/FileSystem;\n-  #1091 = Utf8               java/nio/file/FileSystem\n-  #1092 = Utf8               supportedFileAttributeViews\n-  #1093 = Utf8               ()Ljava/util/Set;\n-  #1094 = Utf8               readAttributes\n-  #1095 = Utf8               (Ljava/nio/file/Path;Ljava/lang/Class;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/BasicFileAttributes;\n-  #1096 = Utf8               lastModifiedTime\n-  #1097 = Utf8               creationTime\n-  #1098 = Utf8               lastAccessTime\n-  #1099 = Utf8               owner\n-  #1100 = Utf8               ()Ljava/nio/file/attribute/UserPrincipal;\n-  #1101 = Utf8               java/nio/file/attribute/UserPrincipal\n-  #1102 = Utf8               group\n-  #1103 = Utf8               ()Ljava/nio/file/attribute/GroupPrincipal;\n-  #1104 = Utf8               java/nio/file/attribute/GroupPrincipal\n-  #1105 = Utf8               getAttribute\n-  #1106 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Ljava/lang/Object;\n-  #1107 = Utf8               getOwner\n-  #1108 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/UserPrincipal;\n-  #1109 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #1110 = Utf8               java/util/Objects\n-  #1111 = Utf8               requireNonNull\n-  #1112 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #1113 = Utf8               getTime\n-  #1114 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #1115 = Utf8               entrySet\n-  #1116 = Utf8               getKey\n-  #1117 = Utf8               getValue\n-  #1118 = Utf8               FALLBACK_ENCODING\n-  #1119 = Utf8               formatNameBytes\n-  #1120 = Utf8               (Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n-  #1121 = Utf8               to\n-  #1122 = Utf8               (Ljava/util/concurrent/TimeUnit;)J\n-  #1123 = Utf8               (Ljava/lang/String;[BII)I\n-  #1124 = Utf8               computeCheckSum\n-  #1125 = Utf8               ([B)J\n-  #1126 = Utf8               formatCheckSumOctalBytes\n-  #1127 = Utf8               (J[BII)I\n-  #1128 = Utf8               formatLongOctalBytes\n-  #1129 = Utf8               formatLongOctalOrBinaryBytes\n-  #1130 = Class              #1133        // java/lang/invoke/LambdaMetafactory\n-  #1131 = NameAndType        #1134:#1137  // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #1132 = NameAndType        #630:#631    // lambda$getOrderedSparseHeaders$0:(Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;)Z\n-  #1133 = Utf8               java/lang/invoke/LambdaMetafactory\n-  #1134 = Utf8               metafactory\n-  #1135 = Class              #1139        // java/lang/invoke/MethodHandles$Lookup\n-  #1136 = Utf8               Lookup\n-  #1137 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #1138 = Class              #1140        // java/lang/invoke/MethodHandles\n-  #1139 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #1140 = Utf8               java/lang/invoke/MethodHandles\n+   #379 = Utf8               parseInstantFromDecimalSeconds\n+   #380 = Utf8               (Ljava/lang/String;)Ljava/time/Instant;\n+   #381 = Utf8               value\n+   #382 = Utf8               epochSeconds\n+   #383 = Utf8               Ljava/math/BigDecimal;\n+   #384 = Utf8               nanos\n+   #385 = Utf8               <init>\n+   #386 = Utf8               (Z)V\n+   #387 = Utf8               this\n+   #388 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+   #389 = Utf8               user\n+   #390 = Utf8               ([B)V\n+   #391 = Utf8               headerBuf\n+   #392 = Utf8               [B\n+   #393 = Utf8               ([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;)V\n+   #394 = Utf8               encoding\n+   #395 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #396 = Utf8               Exceptions\n+   #397 = Utf8               ([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n+   #398 = Utf8               lenient\n+   #399 = Utf8               ([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZJ)V\n+   #400 = Utf8               (Ljava/io/File;)V\n+   #401 = Utf8               Ljava/io/File;\n+   #402 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n+   #403 = Utf8               e\n+   #404 = Utf8               Ljava/io/IOException;\n+   #405 = Utf8               normalizedName\n+   #406 = Class              #937         // java/io/File\n+   #407 = Utf8               (Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n+   #408 = Utf8               globalPaxHeaders\n+   #409 = Utf8               LocalVariableTypeTable\n+   #410 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n+   #411 = Utf8               (Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZJ)V\n+   #412 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZJ)V\n+   #413 = Utf8               (Ljava/nio/file/Path;)V\n+   #414 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n+   #415 = Class              #358         // \"[Ljava/nio/file/LinkOption;\"\n+   #416 = Utf8               (Ljava/lang/String;)V\n+   #417 = Utf8               (Ljava/lang/String;Z)V\n+   #418 = Utf8               isDir\n+   #419 = Utf8               (Ljava/lang/String;B)V\n+   #420 = Utf8               (Ljava/lang/String;BZ)V\n+   #421 = Utf8               addPaxHeader\n+   #422 = Utf8               (Ljava/lang/String;Ljava/lang/String;)V\n+   #423 = Utf8               ex\n+   #424 = Utf8               clearExtraPaxHeaders\n+   #425 = Utf8               ()V\n+   #426 = Utf8               equals\n+   #427 = Utf8               (Ljava/lang/Object;)Z\n+   #428 = Utf8               it\n+   #429 = Utf8               Ljava/lang/Object;\n+   #430 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Z\n+   #431 = Utf8               evaluateType\n+   #432 = Utf8               (Ljava/util/Map;[B)I\n+   #433 = Utf8               header\n+   #434 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;[B)I\n+   #435 = Utf8               fill\n+   #436 = Utf8               (BI[BI)I\n+   #437 = Utf8               i\n+   #438 = Utf8               offset\n+   #439 = Utf8               outbuf\n+   #440 = Utf8               length\n+   #441 = Utf8               (II[BI)I\n+   #442 = Utf8               fillGNUSparse0xData\n+   #443 = Utf8               (Ljava/util/Map;)V\n+   #444 = Utf8               headers\n+   #445 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n+   #446 = Utf8               fillGNUSparse1xData\n+   #447 = Utf8               Ljava/lang/NumberFormatException;\n+   #448 = Utf8               fillStarSparseData\n+   #449 = Utf8               getCreationTime\n+   #450 = Utf8               ()Ljava/nio/file/attribute/FileTime;\n+   #451 = Utf8               getDataOffset\n+   #452 = Utf8               ()J\n+   #453 = Utf8               getDevMajor\n+   #454 = Utf8               ()I\n+   #455 = Utf8               getDevMinor\n+   #456 = Utf8               getDirectoryEntries\n+   #457 = Utf8               ()[Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+   #458 = Utf8               p\n+   #459 = Utf8               dirStream\n+   #460 = Utf8               Ljava/nio/file/DirectoryStream;\n+   #461 = Utf8               entries\n+   #462 = Utf8               Ljava/nio/file/DirectoryStream<Ljava/nio/file/Path;>;\n+   #463 = Utf8               Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;>;\n+   #464 = Class              #938         // java/nio/file/DirectoryStream\n+   #465 = Class              #939         // java/util/Iterator\n+   #466 = Utf8               getExtraPaxHeader\n+   #467 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+   #468 = Utf8               getExtraPaxHeaders\n+   #469 = Utf8               ()Ljava/util/Map;\n+   #470 = Utf8               ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+   #471 = Utf8               getFile\n+   #472 = Utf8               ()Ljava/io/File;\n+   #473 = Utf8               getGroupId\n+   #474 = Utf8               Deprecated\n+   #475 = Utf8               RuntimeVisibleAnnotations\n+   #476 = Utf8               Ljava/lang/Deprecated;\n+   #477 = Utf8               getGroupName\n+   #478 = Utf8               ()Ljava/lang/String;\n+   #479 = Utf8               getLastAccessTime\n+   #480 = Utf8               getLastModifiedDate\n+   #481 = Utf8               ()Ljava/util/Date;\n+   #482 = Utf8               getLastModifiedTime\n+   #483 = Utf8               getLinkName\n+   #484 = Utf8               getLongGroupId\n+   #485 = Utf8               getLongUserId\n+   #486 = Utf8               getMode\n+   #487 = Utf8               getModTime\n+   #488 = Utf8               getName\n+   #489 = Utf8               getOrderedSparseHeaders\n+   #490 = Utf8               ()Ljava/util/List;\n+   #491 = Utf8               str\n+   #492 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+   #493 = Utf8               last\n+   #494 = Utf8               orderedAndFiltered\n+   #495 = Utf8               numberOfHeaders\n+   #496 = Utf8               ()Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+   #497 = Utf8               getPath\n+   #498 = Utf8               ()Ljava/nio/file/Path;\n+   #499 = Utf8               getRealSize\n+   #500 = Utf8               getSize\n+   #501 = Utf8               getSparseHeaders\n+   #502 = Utf8               getStatusChangeTime\n+   #503 = Utf8               getUserId\n+   #504 = Utf8               getUserName\n+   #505 = Utf8               hashCode\n+   #506 = Utf8               isBlockDevice\n+   #507 = Utf8               ()Z\n+   #508 = Utf8               isCharacterDevice\n+   #509 = Utf8               isCheckSumOK\n+   #510 = Utf8               isDescendent\n+   #511 = Utf8               desc\n+   #512 = Utf8               isDirectory\n+   #513 = Utf8               isFIFO\n+   #514 = Utf8               isFile\n+   #515 = Utf8               isGlobalPaxHeader\n+   #516 = Utf8               isGNULongLinkEntry\n+   #517 = Utf8               isGNULongNameEntry\n+   #518 = Utf8               isGNUSparse\n+   #519 = Utf8               isInvalidPrefix\n+   #520 = Utf8               ([B)Z\n+   #521 = Utf8               isInvalidXtarTime\n+   #522 = Utf8               ([BII)Z\n+   #523 = Utf8               b\n+   #524 = Utf8               lastIndex\n+   #525 = Utf8               buffer\n+   #526 = Utf8               isLink\n+   #527 = Utf8               isOldGNUSparse\n+   #528 = Utf8               isPaxGNU1XSparse\n+   #529 = Utf8               isPaxGNUSparse\n+   #530 = Utf8               isPaxHeader\n+   #531 = Utf8               isSparse\n+   #532 = Utf8               isStarSparse\n+   #533 = Utf8               isStreamContiguous\n+   #534 = Utf8               isSymbolicLink\n+   #535 = Utf8               isXstar\n+   #536 = Utf8               (Ljava/util/Map;[B)Z\n+   #537 = Utf8               archType\n+   #538 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;[B)Z\n+   #539 = Utf8               parseOctalOrBinary\n+   #540 = Utf8               ([BIIZ)J\n+   #541 = Utf8               Ljava/lang/IllegalArgumentException;\n+   #542 = Utf8               parseTarHeader\n+   #543 = Utf8               ex2\n+   #544 = Class              #392         // \"[B\"\n+   #545 = Utf8               ([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZZ)V\n+   #546 = Utf8               oldStyle\n+   #547 = Utf8               (Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZZ)V\n+   #548 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZZ)V\n+   #549 = Utf8               parseTarHeaderUnwrapped\n+   #550 = Utf8               xstarPrefix\n+   #551 = Utf8               prefix\n+   #552 = Utf8               type\n+   #553 = Class              #940         // java/util/Map\n+   #554 = Class              #941         // org/apache/commons/compress/archivers/zip/ZipEncoding\n+   #555 = Utf8               processPaxHeader\n+   #556 = Utf8               key\n+   #557 = Utf8               val\n+   #558 = Utf8               (Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V\n+   #559 = Utf8               (Ljava/lang/String;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n+   #560 = Utf8               readFileMode\n+   #561 = Utf8               nameLength\n+   #562 = Utf8               options\n+   #563 = Utf8               readOsSpecificProperties\n+   #564 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)V\n+   #565 = Utf8               posixFileAttributes\n+   #566 = Utf8               Ljava/nio/file/attribute/PosixFileAttributes;\n+   #567 = Utf8               dosFileAttributes\n+   #568 = Utf8               Ljava/nio/file/attribute/DosFileAttributes;\n+   #569 = Utf8               basicFileAttributes\n+   #570 = Utf8               Ljava/nio/file/attribute/BasicFileAttributes;\n+   #571 = Utf8               availableAttributeViews\n+   #572 = Utf8               Ljava/util/Set;\n+   #573 = Utf8               Ljava/util/Set<Ljava/lang/String;>;\n+   #574 = Class              #942         // java/util/Set\n+   #575 = Utf8               setCreationTime\n+   #576 = Utf8               (Ljava/nio/file/attribute/FileTime;)V\n+   #577 = Utf8               time\n+   #578 = Utf8               setDataOffset\n+   #579 = Utf8               (J)V\n+   #580 = Utf8               setDevMajor\n+   #581 = Utf8               (I)V\n+   #582 = Utf8               devNo\n+   #583 = Utf8               setDevMinor\n+   #584 = Utf8               setGroupId\n+   #585 = Utf8               setGroupName\n+   #586 = Utf8               setIds\n+   #587 = Utf8               (II)V\n+   #588 = Utf8               setLastAccessTime\n+   #589 = Utf8               setLastModifiedTime\n+   #590 = Utf8               setLinkName\n+   #591 = Utf8               link\n+   #592 = Utf8               setMode\n+   #593 = Utf8               setModTime\n+   #594 = Utf8               (Ljava/util/Date;)V\n+   #595 = Utf8               Ljava/util/Date;\n+   #596 = Utf8               setName\n+   #597 = Utf8               setNames\n+   #598 = Utf8               setSize\n+   #599 = Utf8               setSparseHeaders\n+   #600 = Utf8               (Ljava/util/List;)V\n+   #601 = Utf8               (Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;)V\n+   #602 = Utf8               setStatusChangeTime\n+   #603 = Utf8               setUserId\n+   #604 = Utf8               setUserName\n+   #605 = Utf8               updateEntryFromPaxHeaders\n+   #606 = Utf8               ent\n+   #607 = Utf8               Entry\n+   #608 = Utf8               InnerClasses\n+   #609 = Utf8               Ljava/util/Map$Entry;\n+   #610 = Utf8               Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/String;>;\n+   #611 = Utf8               writeEntryHeader\n+   #612 = Utf8               starMode\n+   #613 = Utf8               csOffset\n+   #614 = Utf8               chk\n+   #615 = Utf8               writeEntryHeaderField\n+   #616 = Utf8               (J[BIIZ)I\n+   #617 = Utf8               writeEntryHeaderOptionalTimeField\n+   #618 = Utf8               (Ljava/nio/file/attribute/FileTime;I[BI)I\n+   #619 = Utf8               fieldLength\n+   #620 = Utf8               lambda$getOrderedSparseHeaders$0\n+   #621 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;)Z\n+   #622 = Utf8               s\n+   #623 = Utf8               <clinit>\n+   #624 = Utf8               SourceFile\n+   #625 = Utf8               TarArchiveEntry.java\n+   #626 = Class              #943         // java/util/concurrent/TimeUnit\n+   #627 = NameAndType        #944:#945    // SECONDS:Ljava/util/concurrent/TimeUnit;\n+   #628 = NameAndType        #946:#947    // from:(JLjava/util/concurrent/TimeUnit;)Ljava/nio/file/attribute/FileTime;\n+   #629 = Utf8               os.name\n+   #630 = Class              #948         // java/lang/System\n+   #631 = NameAndType        #949:#467    // getProperty:(Ljava/lang/String;)Ljava/lang/String;\n+   #632 = Class              #950         // java/util/Locale\n+   #633 = NameAndType        #951:#952    // ROOT:Ljava/util/Locale;\n+   #634 = NameAndType        #953:#954    // toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;\n+   #635 = Utf8               windows\n+   #636 = NameAndType        #955:#956    // startsWith:(Ljava/lang/String;)Z\n+   #637 = NameAndType        #440:#454    // length:()I\n+   #638 = NameAndType        #957:#958    // charAt:(I)C\n+   #639 = NameAndType        #959:#960    // substring:(I)Ljava/lang/String;\n+   #640 = Utf8               netware\n+   #641 = NameAndType        #961:#962    // contains:(Ljava/lang/CharSequence;)Z\n+   #642 = NameAndType        #963:#964    // indexOf:(I)I\n+   #643 = NameAndType        #965:#373    // separatorChar:C\n+   #644 = NameAndType        #966:#967    // replace:(CC)Ljava/lang/String;\n+   #645 = Utf8               /\n+   #646 = Utf8               java/math/BigDecimal\n+   #647 = NameAndType        #385:#416    // \"<init>\":(Ljava/lang/String;)V\n+   #648 = NameAndType        #968:#452    // longValue:()J\n+   #649 = NameAndType        #969:#383    // ONE:Ljava/math/BigDecimal;\n+   #650 = NameAndType        #970:#971    // remainder:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+   #651 = NameAndType        #972:#973    // movePointRight:(I)Ljava/math/BigDecimal;\n+   #652 = Class              #974         // java/time/Instant\n+   #653 = NameAndType        #975:#976    // ofEpochSecond:(JJ)Ljava/time/Instant;\n+   #654 = NameAndType        #385:#425    // \"<init>\":()V\n+   #655 = Utf8\n+   #656 = NameAndType        #323:#324    // name:Ljava/lang/String;\n+   #657 = NameAndType        #339:#324    // linkName:Ljava/lang/String;\n+   #658 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n+   #659 = Utf8               ustar\\u0000\n+   #660 = NameAndType        #340:#324    // magic:Ljava/lang/String;\n+   #661 = Utf8               00\n+   #662 = NameAndType        #341:#324    // version:Ljava/lang/String;\n+   #663 = NameAndType        #343:#324    // groupName:Ljava/lang/String;\n+   #664 = Utf8               java/util/HashMap\n+   #665 = NameAndType        #359:#360    // extraPaxHeaders:Ljava/util/Map;\n+   #666 = Utf8               org/apache/commons/compress/archivers/EntryStreamOffsets\n+   #667 = NameAndType        #362:#313    // dataOffset:J\n+   #668 = Utf8               user.name\n+   #669 = NameAndType        #949:#977    // getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+   #670 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+   #671 = NameAndType        #959:#978    // substring:(II)Ljava/lang/String;\n+   #672 = NameAndType        #342:#324    // userName:Ljava/lang/String;\n+   #673 = NameAndType        #355:#356    // file:Ljava/nio/file/Path;\n+   #674 = Class              #979         // org/apache/commons/compress/utils/IOUtils\n+   #675 = NameAndType        #980:#358    // EMPTY_LINK_OPTIONS:[Ljava/nio/file/LinkOption;\n+   #676 = NameAndType        #357:#358    // linkOptions:[Ljava/nio/file/LinkOption;\n+   #677 = NameAndType        #325:#326    // preserveAbsolutePath:Z\n+   #678 = NameAndType        #385:#386    // \"<init>\":(Z)V\n+   #679 = NameAndType        #542:#390    // parseTarHeader:([B)V\n+   #680 = NameAndType        #385:#397    // \"<init>\":([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n+   #681 = Class              #981         // java/util/Collections\n+   #682 = NameAndType        #982:#469    // emptyMap:()Ljava/util/Map;\n+   #683 = NameAndType        #385:#407    // \"<init>\":(Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n+   #684 = NameAndType        #578:#579    // setDataOffset:(J)V\n+   #685 = NameAndType        #497:#478    // getPath:()Ljava/lang/String;\n+   #686 = NameAndType        #385:#402    // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+   #687 = NameAndType        #370:#371    // normalizeFileName:(Ljava/lang/String;Z)Ljava/lang/String;\n+   #688 = NameAndType        #983:#498    // toPath:()Ljava/nio/file/Path;\n+   #689 = Utf8               java/nio/file/LinkOption\n+   #690 = NameAndType        #560:#414    // readFileMode:(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n+   #691 = Utf8               java/io/IOException\n+   #692 = NameAndType        #512:#507    // isDirectory:()Z\n+   #693 = NameAndType        #440:#452    // length:()J\n+   #694 = NameAndType        #330:#313    // size:J\n+   #695 = NameAndType        #563:#564    // readOsSpecificProperties:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)V\n+   #696 = NameAndType        #984:#452    // lastModified:()J\n+   #697 = NameAndType        #985:#364    // fromMillis:(J)Ljava/nio/file/attribute/FileTime;\n+   #698 = NameAndType        #331:#332    // mTime:Ljava/nio/file/attribute/FileTime;\n+   #699 = NameAndType        #542:#547    // parseTarHeader:(Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZZ)V\n+   #700 = NameAndType        #986:#478    // toString:()Ljava/lang/String;\n+   #701 = NameAndType        #385:#414    // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n+   #702 = NameAndType        #385:#417    // \"<init>\":(Ljava/lang/String;Z)V\n+   #703 = NameAndType        #987:#956    // endsWith:(Ljava/lang/String;)Z\n+   #704 = NameAndType        #327:#316    // mode:I\n+   #705 = NameAndType        #337:#338    // linkFlag:B\n+   #706 = NameAndType        #988:#989    // now:()Ljava/time/Instant;\n+   #707 = NameAndType        #946:#990    // from:(Ljava/time/Instant;)Ljava/nio/file/attribute/FileTime;\n+   #708 = NameAndType        #385:#420    // \"<init>\":(Ljava/lang/String;BZ)V\n+   #709 = Utf8               ustar\n+   #710 = Utf8                \\u0000\n+   #711 = NameAndType        #555:#422    // processPaxHeader:(Ljava/lang/String;Ljava/lang/String;)V\n+   #712 = Utf8               java/lang/IllegalArgumentException\n+   #713 = Utf8               Invalid input\n+   #714 = NameAndType        #385:#991    // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #715 = NameAndType        #992:#425    // clear:()V\n+   #716 = NameAndType        #993:#994    // getClass:()Ljava/lang/Class;\n+   #717 = NameAndType        #426:#430    // equals:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Z\n+   #718 = NameAndType        #488:#478    // getName:()Ljava/lang/String;\n+   #719 = NameAndType        #426:#427    // equals:(Ljava/lang/Object;)Z\n+   #720 = Class              #995         // org/apache/commons/compress/utils/ArchiveUtils\n+   #721 = NameAndType        #996:#997    // matchAsciiBuffer:(Ljava/lang/String;[BII)Z\n+   #722 = NameAndType        #535:#536    // isXstar:(Ljava/util/Map;[B)Z\n+   #723 = NameAndType        #435:#436    // fill:(BI[BI)I\n+   #724 = NameAndType        #352:#326    // paxGNUSparse:Z\n+   #725 = Utf8               GNU.sparse.size\n+   #726 = NameAndType        #998:#999    // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #727 = Utf8               java/lang/String\n+   #728 = Class              #1000        // java/lang/Integer\n+   #729 = NameAndType        #1001:#1002  // parseInt:(Ljava/lang/String;)I\n+   #730 = NameAndType        #351:#313    // realSize:J\n+   #731 = Utf8               GNU.sparse.name\n+   #732 = NameAndType        #1003:#427   // containsKey:(Ljava/lang/Object;)Z\n+   #733 = NameAndType        #353:#326    // paxGNU1XSparse:Z\n+   #734 = Utf8               GNU.sparse.realsize\n+   #735 = Utf8               java/lang/NumberFormatException\n+   #736 = Utf8               java/lang/StringBuilder\n+   #737 = Utf8               Corrupted TAR archive. GNU.sparse.realsize header for\n+   #738 = NameAndType        #1004:#1005  // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #739 = Utf8                contains non-numeric value\n+   #740 = NameAndType        #354:#326    // starSparse:Z\n+   #741 = Utf8               SCHILY.realsize\n+   #742 = Class              #1006        // java/lang/Long\n+   #743 = NameAndType        #1007:#1008  // parseLong:(Ljava/lang/String;)J\n+   #744 = Utf8               Corrupted TAR archive. SCHILY.realsize header for\n+   #745 = NameAndType        #335:#332    // birthTime:Ljava/nio/file/attribute/FileTime;\n+   #746 = NameAndType        #344:#316    // devMajor:I\n+   #747 = NameAndType        #345:#316    // devMinor:I\n+   #748 = NameAndType        #310:#311    // EMPTY_TAR_ARCHIVE_ENTRY_ARRAY:[Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+   #749 = Utf8               java/util/ArrayList\n+   #750 = Class              #1009        // java/nio/file/Files\n+   #751 = NameAndType        #1010:#1011  // newDirectoryStream:(Ljava/nio/file/Path;)Ljava/nio/file/DirectoryStream;\n+   #752 = NameAndType        #1012:#1013  // iterator:()Ljava/util/Iterator;\n+   #753 = NameAndType        #1014:#507   // hasNext:()Z\n+   #754 = NameAndType        #1015:#1016  // next:()Ljava/lang/Object;\n+   #755 = Utf8               java/nio/file/Path\n+   #756 = NameAndType        #385:#413    // \"<init>\":(Ljava/nio/file/Path;)V\n+   #757 = NameAndType        #1017:#427   // add:(Ljava/lang/Object;)Z\n+   #758 = NameAndType        #1018:#425   // close:()V\n+   #759 = Utf8               java/lang/Throwable\n+   #760 = NameAndType        #1019:#1020  // addSuppressed:(Ljava/lang/Throwable;)V\n+   #761 = NameAndType        #1021:#1022  // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+   #762 = NameAndType        #1023:#1024  // unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;\n+   #763 = NameAndType        #1025:#472   // toFile:()Ljava/io/File;\n+   #764 = NameAndType        #329:#313    // groupId:J\n+   #765 = NameAndType        #334:#332    // aTime:Ljava/nio/file/attribute/FileTime;\n+   #766 = NameAndType        #487:#481    // getModTime:()Ljava/util/Date;\n+   #767 = NameAndType        #328:#313    // userId:J\n+   #768 = Utf8               java/util/Date\n+   #769 = NameAndType        #1026:#452   // toMillis:()J\n+   #770 = NameAndType        #385:#579    // \"<init>\":(J)V\n+   #771 = NameAndType        #346:#347    // sparseHeaders:Ljava/util/List;\n+   #772 = NameAndType        #1027:#507   // isEmpty:()Z\n+   #773 = NameAndType        #1028:#490   // emptyList:()Ljava/util/List;\n+   #774 = NameAndType        #1029:#1030  // stream:()Ljava/util/stream/Stream;\n+   #775 = Utf8               BootstrapMethods\n+   #776 = MethodHandle       6:#1031      // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+   #777 = MethodType         #427         //  (Ljava/lang/Object;)Z\n+   #778 = MethodHandle       6:#1032      // REF_invokeStatic org/apache/commons/compress/archivers/tar/TarArchiveEntry.lambda$getOrderedSparseHeaders$0:(Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;)Z\n+   #779 = MethodType         #621         //  (Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;)Z\n+   #780 = NameAndType        #1033:#1034  // test:()Ljava/util/function/Predicate;\n+   #781 = Class              #1035        // java/util/stream/Stream\n+   #782 = NameAndType        #1036:#1037  // filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;\n+   #783 = MethodType         #1038        //  (Ljava/lang/Object;)J\n+   #784 = MethodHandle       5:#161       // REF_invokeVirtual org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+   #785 = MethodType         #1039        //  (Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;)J\n+   #786 = NameAndType        #1040:#1041  // applyAsLong:()Ljava/util/function/ToLongFunction;\n+   #787 = Class              #1042        // java/util/Comparator\n+   #788 = NameAndType        #1043:#1044  // comparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n+   #789 = NameAndType        #1045:#1046  // sorted:(Ljava/util/Comparator;)Ljava/util/stream/Stream;\n+   #790 = Class              #1047        // java/util/stream/Collectors\n+   #791 = NameAndType        #1048:#1049  // toList:()Ljava/util/stream/Collector;\n+   #792 = NameAndType        #1050:#1051  // collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;\n+   #793 = Utf8               java/util/List\n+   #794 = NameAndType        #330:#454    // size:()I\n+   #795 = NameAndType        #998:#1052   // get:(I)Ljava/lang/Object;\n+   #796 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+   #797 = NameAndType        #1053:#452   // getOffset:()J\n+   #798 = NameAndType        #1054:#452   // getNumbytes:()J\n+   #799 = Utf8               Corrupted TAR archive. Sparse blocks for\n+   #800 = Utf8                overlap each other.\n+   #801 = Utf8               Unreadable TAR archive. Offset and numbytes for sparse block in\n+   #802 = Utf8                too large.\n+   #803 = NameAndType        #499:#452    // getRealSize:()J\n+   #804 = Utf8               Corrupted TAR archive. Sparse block extends beyond real size of the entry\n+   #805 = NameAndType        #531:#507    // isSparse:()Z\n+   #806 = NameAndType        #500:#452    // getSize:()J\n+   #807 = NameAndType        #333:#332    // cTime:Ljava/nio/file/attribute/FileTime;\n+   #808 = NameAndType        #505:#454    // hashCode:()I\n+   #809 = NameAndType        #336:#326    // checkSumOK:Z\n+   #810 = NameAndType        #512:#1055   // isDirectory:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+   #811 = NameAndType        #530:#507    // isPaxHeader:()Z\n+   #812 = NameAndType        #515:#507    // isGlobalPaxHeader:()Z\n+   #813 = NameAndType        #350:#326    // isExtended:Z\n+   #814 = NameAndType        #1056:#1055  // isRegularFile:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+   #815 = NameAndType        #527:#507    // isOldGNUSparse:()Z\n+   #816 = NameAndType        #529:#507    // isPaxGNUSparse:()Z\n+   #817 = NameAndType        #518:#507    // isGNUSparse:()Z\n+   #818 = NameAndType        #532:#507    // isStarSparse:()Z\n+   #819 = Utf8               tar\\u0000\n+   #820 = Utf8               SCHILY.archtype\n+   #821 = Utf8               xustar\n+   #822 = Utf8               exustar\n+   #823 = NameAndType        #519:#520    // isInvalidPrefix:([B)Z\n+   #824 = NameAndType        #521:#522    // isInvalidXtarTime:([BII)Z\n+   #825 = Class              #1057        // org/apache/commons/compress/archivers/tar/TarUtils\n+   #826 = NameAndType        #539:#1058   // parseOctalOrBinary:([BII)J\n+   #827 = NameAndType        #1059:#395   // DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #828 = NameAndType        #542:#393    // parseTarHeader:([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;)V\n+   #829 = NameAndType        #542:#545    // parseTarHeader:([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZZ)V\n+   #830 = Utf8               java/io/UncheckedIOException\n+   #831 = NameAndType        #385:#1060   // \"<init>\":(Ljava/io/IOException;)V\n+   #832 = NameAndType        #549:#547    // parseTarHeaderUnwrapped:(Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZZ)V\n+   #833 = Utf8               Corrupted TAR archive.\n+   #834 = NameAndType        #1061:#1062  // parseName:([BII)Ljava/lang/String;\n+   #835 = NameAndType        #1061:#1063  // parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+   #836 = NameAndType        #539:#540    // parseOctalOrBinary:([BIIZ)J\n+   #837 = Utf8               broken archive, entry with negative size\n+   #838 = NameAndType        #1064:#520   // verifyCheckSum:([B)Z\n+   #839 = NameAndType        #431:#432    // evaluateType:(Ljava/util/Map;[B)I\n+   #840 = NameAndType        #363:#364    // fileTimeFromOptionalSeconds:(J)Ljava/nio/file/attribute/FileTime;\n+   #841 = NameAndType        #1065:#1066  // readSparseStructs:([BII)Ljava/util/List;\n+   #842 = NameAndType        #385:#1067   // \"<init>\":(Ljava/util/Collection;)V\n+   #843 = NameAndType        #1068:#1069  // parseBoolean:([BI)Z\n+   #844 = NameAndType        #1070:#1058  // parseOctal:([BII)J\n+   #845 = NameAndType        #555:#558    // processPaxHeader:(Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V\n+   #846 = Utf8               path\n+   #847 = Utf8               linkpath\n+   #848 = Utf8               gid\n+   #849 = Utf8               gname\n+   #850 = Utf8               uid\n+   #851 = Utf8               uname\n+   #852 = Utf8               mtime\n+   #853 = Utf8               atime\n+   #854 = Utf8               ctime\n+   #855 = Utf8               LIBARCHIVE.creationtime\n+   #856 = Utf8               SCHILY.devminor\n+   #857 = Utf8               SCHILY.devmajor\n+   #858 = Utf8               SCHILY.filetype\n+   #859 = NameAndType        #596:#416    // setName:(Ljava/lang/String;)V\n+   #860 = NameAndType        #590:#416    // setLinkName:(Ljava/lang/String;)V\n+   #861 = NameAndType        #584:#579    // setGroupId:(J)V\n+   #862 = NameAndType        #585:#416    // setGroupName:(Ljava/lang/String;)V\n+   #863 = NameAndType        #603:#579    // setUserId:(J)V\n+   #864 = NameAndType        #604:#416    // setUserName:(Ljava/lang/String;)V\n+   #865 = Utf8               Corrupted TAR archive. Entry size is negative\n+   #866 = NameAndType        #598:#579    // setSize:(J)V\n+   #867 = NameAndType        #379:#380    // parseInstantFromDecimalSeconds:(Ljava/lang/String;)Ljava/time/Instant;\n+   #868 = NameAndType        #589:#576    // setLastModifiedTime:(Ljava/nio/file/attribute/FileTime;)V\n+   #869 = NameAndType        #588:#576    // setLastAccessTime:(Ljava/nio/file/attribute/FileTime;)V\n+   #870 = NameAndType        #602:#576    // setStatusChangeTime:(Ljava/nio/file/attribute/FileTime;)V\n+   #871 = NameAndType        #575:#576    // setCreationTime:(Ljava/nio/file/attribute/FileTime;)V\n+   #872 = Utf8               Corrupted TAR archive. Dev-Minor is negative\n+   #873 = NameAndType        #583:#581    // setDevMinor:(I)V\n+   #874 = Utf8               Corrupted TAR archive. Dev-Major is negative\n+   #875 = NameAndType        #580:#581    // setDevMajor:(I)V\n+   #876 = NameAndType        #442:#443    // fillGNUSparse0xData:(Ljava/util/Map;)V\n+   #877 = NameAndType        #446:#443    // fillGNUSparse1xData:(Ljava/util/Map;)V\n+   #878 = Utf8               sparse\n+   #879 = NameAndType        #448:#443    // fillStarSparseData:(Ljava/util/Map;)V\n+   #880 = NameAndType        #1071:#1072  // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #881 = NameAndType        #330:#1073   // size:(Ljava/nio/file/Path;)J\n+   #882 = NameAndType        #1074:#1075  // getFileSystem:()Ljava/nio/file/FileSystem;\n+   #883 = Class              #1076        // java/nio/file/FileSystem\n+   #884 = NameAndType        #1077:#1078  // supportedFileAttributeViews:()Ljava/util/Set;\n+   #885 = Utf8               posix\n+   #886 = NameAndType        #961:#427    // contains:(Ljava/lang/Object;)Z\n+   #887 = Utf8               java/nio/file/attribute/PosixFileAttributes\n+   #888 = NameAndType        #1079:#1080  // readAttributes:(Ljava/nio/file/Path;Ljava/lang/Class;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/BasicFileAttributes;\n+   #889 = NameAndType        #1081:#450   // lastModifiedTime:()Ljava/nio/file/attribute/FileTime;\n+   #890 = NameAndType        #1082:#450   // creationTime:()Ljava/nio/file/attribute/FileTime;\n+   #891 = NameAndType        #1083:#450   // lastAccessTime:()Ljava/nio/file/attribute/FileTime;\n+   #892 = NameAndType        #1084:#1085  // owner:()Ljava/nio/file/attribute/UserPrincipal;\n+   #893 = Class              #1086        // java/nio/file/attribute/UserPrincipal\n+   #894 = NameAndType        #1087:#1088  // group:()Ljava/nio/file/attribute/GroupPrincipal;\n+   #895 = Class              #1089        // java/nio/file/attribute/GroupPrincipal\n+   #896 = Utf8               unix\n+   #897 = Utf8               unix:uid\n+   #898 = NameAndType        #1090:#1091  // getAttribute:(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Ljava/lang/Object;\n+   #899 = Utf8               java/lang/Number\n+   #900 = Utf8               unix:gid\n+   #901 = Utf8               unix:ctime\n+   #902 = Utf8               java/nio/file/attribute/FileTime\n+   #903 = Utf8               dos\n+   #904 = Utf8               java/nio/file/attribute/DosFileAttributes\n+   #905 = NameAndType        #1092:#1093  // getOwner:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/UserPrincipal;\n+   #906 = Utf8               java/nio/file/attribute/BasicFileAttributes\n+   #907 = Utf8               The offset can not be smaller than 0\n+   #908 = Utf8               Major device number is out of range:\n+   #909 = NameAndType        #1004:#1094  // append:(I)Ljava/lang/StringBuilder;\n+   #910 = Utf8               Minor device number is out of range:\n+   #911 = NameAndType        #603:#581    // setUserId:(I)V\n+   #912 = NameAndType        #584:#581    // setGroupId:(I)V\n+   #913 = Utf8               Time must not be null\n+   #914 = Class              #1095        // java/util/Objects\n+   #915 = NameAndType        #1096:#1097  // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #916 = NameAndType        #1098:#452   // getTime:()J\n+   #917 = Utf8               Size is out of range:\n+   #918 = NameAndType        #1004:#1099  // append:(J)Ljava/lang/StringBuilder;\n+   #919 = NameAndType        #1100:#1078  // entrySet:()Ljava/util/Set;\n+   #920 = Utf8               java/util/Map$Entry\n+   #921 = NameAndType        #1101:#1016  // getKey:()Ljava/lang/Object;\n+   #922 = NameAndType        #1102:#1016  // getValue:()Ljava/lang/Object;\n+   #923 = NameAndType        #611:#397    // writeEntryHeader:([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n+   #924 = NameAndType        #1103:#395   // FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #925 = NameAndType        #1104:#1105  // formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+   #926 = NameAndType        #615:#616    // writeEntryHeaderField:(J[BIIZ)I\n+   #927 = NameAndType        #1106:#1107  // to:(Ljava/util/concurrent/TimeUnit;)J\n+   #928 = NameAndType        #1104:#1108  // formatNameBytes:(Ljava/lang/String;[BII)I\n+   #929 = NameAndType        #435:#441    // fill:(II[BI)I\n+   #930 = NameAndType        #617:#618    // writeEntryHeaderOptionalTimeField:(Ljava/nio/file/attribute/FileTime;I[BI)I\n+   #931 = NameAndType        #1109:#1110  // computeCheckSum:([B)J\n+   #932 = NameAndType        #1111:#1112  // formatCheckSumOctalBytes:(J[BII)I\n+   #933 = NameAndType        #1113:#1112  // formatLongOctalBytes:(J[BII)I\n+   #934 = NameAndType        #1114:#1112  // formatLongOctalOrBinaryBytes:(J[BII)I\n+   #935 = Utf8               java/lang/Object\n+   #936 = Utf8               org/apache/commons/compress/archivers/ArchiveEntry\n+   #937 = Utf8               java/io/File\n+   #938 = Utf8               java/nio/file/DirectoryStream\n+   #939 = Utf8               java/util/Iterator\n+   #940 = Utf8               java/util/Map\n+   #941 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+   #942 = Utf8               java/util/Set\n+   #943 = Utf8               java/util/concurrent/TimeUnit\n+   #944 = Utf8               SECONDS\n+   #945 = Utf8               Ljava/util/concurrent/TimeUnit;\n+   #946 = Utf8               from\n+   #947 = Utf8               (JLjava/util/concurrent/TimeUnit;)Ljava/nio/file/attribute/FileTime;\n+   #948 = Utf8               java/lang/System\n+   #949 = Utf8               getProperty\n+   #950 = Utf8               java/util/Locale\n+   #951 = Utf8               ROOT\n+   #952 = Utf8               Ljava/util/Locale;\n+   #953 = Utf8               toLowerCase\n+   #954 = Utf8               (Ljava/util/Locale;)Ljava/lang/String;\n+   #955 = Utf8               startsWith\n+   #956 = Utf8               (Ljava/lang/String;)Z\n+   #957 = Utf8               charAt\n+   #958 = Utf8               (I)C\n+   #959 = Utf8               substring\n+   #960 = Utf8               (I)Ljava/lang/String;\n+   #961 = Utf8               contains\n+   #962 = Utf8               (Ljava/lang/CharSequence;)Z\n+   #963 = Utf8               indexOf\n+   #964 = Utf8               (I)I\n+   #965 = Utf8               separatorChar\n+   #966 = Utf8               replace\n+   #967 = Utf8               (CC)Ljava/lang/String;\n+   #968 = Utf8               longValue\n+   #969 = Utf8               ONE\n+   #970 = Utf8               remainder\n+   #971 = Utf8               (Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+   #972 = Utf8               movePointRight\n+   #973 = Utf8               (I)Ljava/math/BigDecimal;\n+   #974 = Utf8               java/time/Instant\n+   #975 = Utf8               ofEpochSecond\n+   #976 = Utf8               (JJ)Ljava/time/Instant;\n+   #977 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+   #978 = Utf8               (II)Ljava/lang/String;\n+   #979 = Utf8               org/apache/commons/compress/utils/IOUtils\n+   #980 = Utf8               EMPTY_LINK_OPTIONS\n+   #981 = Utf8               java/util/Collections\n+   #982 = Utf8               emptyMap\n+   #983 = Utf8               toPath\n+   #984 = Utf8               lastModified\n+   #985 = Utf8               fromMillis\n+   #986 = Utf8               toString\n+   #987 = Utf8               endsWith\n+   #988 = Utf8               now\n+   #989 = Utf8               ()Ljava/time/Instant;\n+   #990 = Utf8               (Ljava/time/Instant;)Ljava/nio/file/attribute/FileTime;\n+   #991 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #992 = Utf8               clear\n+   #993 = Utf8               getClass\n+   #994 = Utf8               ()Ljava/lang/Class;\n+   #995 = Utf8               org/apache/commons/compress/utils/ArchiveUtils\n+   #996 = Utf8               matchAsciiBuffer\n+   #997 = Utf8               (Ljava/lang/String;[BII)Z\n+   #998 = Utf8               get\n+   #999 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #1000 = Utf8               java/lang/Integer\n+  #1001 = Utf8               parseInt\n+  #1002 = Utf8               (Ljava/lang/String;)I\n+  #1003 = Utf8               containsKey\n+  #1004 = Utf8               append\n+  #1005 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #1006 = Utf8               java/lang/Long\n+  #1007 = Utf8               parseLong\n+  #1008 = Utf8               (Ljava/lang/String;)J\n+  #1009 = Utf8               java/nio/file/Files\n+  #1010 = Utf8               newDirectoryStream\n+  #1011 = Utf8               (Ljava/nio/file/Path;)Ljava/nio/file/DirectoryStream;\n+  #1012 = Utf8               iterator\n+  #1013 = Utf8               ()Ljava/util/Iterator;\n+  #1014 = Utf8               hasNext\n+  #1015 = Utf8               next\n+  #1016 = Utf8               ()Ljava/lang/Object;\n+  #1017 = Utf8               add\n+  #1018 = Utf8               close\n+  #1019 = Utf8               addSuppressed\n+  #1020 = Utf8               (Ljava/lang/Throwable;)V\n+  #1021 = Utf8               toArray\n+  #1022 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #1023 = Utf8               unmodifiableMap\n+  #1024 = Utf8               (Ljava/util/Map;)Ljava/util/Map;\n+  #1025 = Utf8               toFile\n+  #1026 = Utf8               toMillis\n+  #1027 = Utf8               isEmpty\n+  #1028 = Utf8               emptyList\n+  #1029 = Utf8               stream\n+  #1030 = Utf8               ()Ljava/util/stream/Stream;\n+  #1031 = Methodref          #1115.#1116  // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #1032 = Methodref          #44.#1117    // org/apache/commons/compress/archivers/tar/TarArchiveEntry.lambda$getOrderedSparseHeaders$0:(Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;)Z\n+  #1033 = Utf8               test\n+  #1034 = Utf8               ()Ljava/util/function/Predicate;\n+  #1035 = Utf8               java/util/stream/Stream\n+  #1036 = Utf8               filter\n+  #1037 = Utf8               (Ljava/util/function/Predicate;)Ljava/util/stream/Stream;\n+  #1038 = Utf8               (Ljava/lang/Object;)J\n+  #1039 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;)J\n+  #1040 = Utf8               applyAsLong\n+  #1041 = Utf8               ()Ljava/util/function/ToLongFunction;\n+  #1042 = Utf8               java/util/Comparator\n+  #1043 = Utf8               comparingLong\n+  #1044 = Utf8               (Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;\n+  #1045 = Utf8               sorted\n+  #1046 = Utf8               (Ljava/util/Comparator;)Ljava/util/stream/Stream;\n+  #1047 = Utf8               java/util/stream/Collectors\n+  #1048 = Utf8               toList\n+  #1049 = Utf8               ()Ljava/util/stream/Collector;\n+  #1050 = Utf8               collect\n+  #1051 = Utf8               (Ljava/util/stream/Collector;)Ljava/lang/Object;\n+  #1052 = Utf8               (I)Ljava/lang/Object;\n+  #1053 = Utf8               getOffset\n+  #1054 = Utf8               getNumbytes\n+  #1055 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+  #1056 = Utf8               isRegularFile\n+  #1057 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils\n+  #1058 = Utf8               ([BII)J\n+  #1059 = Utf8               DEFAULT_ENCODING\n+  #1060 = Utf8               (Ljava/io/IOException;)V\n+  #1061 = Utf8               parseName\n+  #1062 = Utf8               ([BII)Ljava/lang/String;\n+  #1063 = Utf8               ([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+  #1064 = Utf8               verifyCheckSum\n+  #1065 = Utf8               readSparseStructs\n+  #1066 = Utf8               ([BII)Ljava/util/List;\n+  #1067 = Utf8               (Ljava/util/Collection;)V\n+  #1068 = Utf8               parseBoolean\n+  #1069 = Utf8               ([BI)Z\n+  #1070 = Utf8               parseOctal\n+  #1071 = Utf8               put\n+  #1072 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #1073 = Utf8               (Ljava/nio/file/Path;)J\n+  #1074 = Utf8               getFileSystem\n+  #1075 = Utf8               ()Ljava/nio/file/FileSystem;\n+  #1076 = Utf8               java/nio/file/FileSystem\n+  #1077 = Utf8               supportedFileAttributeViews\n+  #1078 = Utf8               ()Ljava/util/Set;\n+  #1079 = Utf8               readAttributes\n+  #1080 = Utf8               (Ljava/nio/file/Path;Ljava/lang/Class;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/BasicFileAttributes;\n+  #1081 = Utf8               lastModifiedTime\n+  #1082 = Utf8               creationTime\n+  #1083 = Utf8               lastAccessTime\n+  #1084 = Utf8               owner\n+  #1085 = Utf8               ()Ljava/nio/file/attribute/UserPrincipal;\n+  #1086 = Utf8               java/nio/file/attribute/UserPrincipal\n+  #1087 = Utf8               group\n+  #1088 = Utf8               ()Ljava/nio/file/attribute/GroupPrincipal;\n+  #1089 = Utf8               java/nio/file/attribute/GroupPrincipal\n+  #1090 = Utf8               getAttribute\n+  #1091 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Ljava/lang/Object;\n+  #1092 = Utf8               getOwner\n+  #1093 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/UserPrincipal;\n+  #1094 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #1095 = Utf8               java/util/Objects\n+  #1096 = Utf8               requireNonNull\n+  #1097 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #1098 = Utf8               getTime\n+  #1099 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #1100 = Utf8               entrySet\n+  #1101 = Utf8               getKey\n+  #1102 = Utf8               getValue\n+  #1103 = Utf8               FALLBACK_ENCODING\n+  #1104 = Utf8               formatNameBytes\n+  #1105 = Utf8               (Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+  #1106 = Utf8               to\n+  #1107 = Utf8               (Ljava/util/concurrent/TimeUnit;)J\n+  #1108 = Utf8               (Ljava/lang/String;[BII)I\n+  #1109 = Utf8               computeCheckSum\n+  #1110 = Utf8               ([B)J\n+  #1111 = Utf8               formatCheckSumOctalBytes\n+  #1112 = Utf8               (J[BII)I\n+  #1113 = Utf8               formatLongOctalBytes\n+  #1114 = Utf8               formatLongOctalOrBinaryBytes\n+  #1115 = Class              #1118        // java/lang/invoke/LambdaMetafactory\n+  #1116 = NameAndType        #1119:#1122  // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #1117 = NameAndType        #620:#621    // lambda$getOrderedSparseHeaders$0:(Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;)Z\n+  #1118 = Utf8               java/lang/invoke/LambdaMetafactory\n+  #1119 = Utf8               metafactory\n+  #1120 = Class              #1124        // java/lang/invoke/MethodHandles$Lookup\n+  #1121 = Utf8               Lookup\n+  #1122 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #1123 = Class              #1125        // java/lang/invoke/MethodHandles\n+  #1124 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #1125 = Utf8               java/lang/invoke/MethodHandles\n {\n   private static final org.apache.commons.compress.archivers.tar.TarArchiveEntry[] EMPTY_TAR_ARCHIVE_ENTRY_ARRAY;\n     descriptor: [Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n \n   public static final long UNKNOWN = -1l;\n     descriptor: J\n@@ -1835,15 +1820,15 @@\n             0      16     3 encoding   Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n             0      16     4 lenient   Z\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      16     1 globalPaxHeaders   Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #413                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n+    Signature: #410                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n \n   public org.apache.commons.compress.archivers.tar.TarArchiveEntry(java.util.Map<java.lang.String, java.lang.String>, byte[], org.apache.commons.compress.archivers.zip.ZipEncoding, boolean, long) throws java.io.IOException;\n     descriptor: (Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZJ)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=7, args_size=6\n          0: aload_0\n@@ -1869,15 +1854,15 @@\n             0      16     4 lenient   Z\n             0      16     5 dataOffset   J\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      16     1 globalPaxHeaders   Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #415                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZJ)V\n+    Signature: #412                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZJ)V\n \n   public org.apache.commons.compress.archivers.tar.TarArchiveEntry(java.nio.file.Path) throws java.io.IOException;\n     descriptor: (Ljava/nio/file/Path;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n@@ -2306,15 +2291,15 @@\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      45     1 globalPaxHeaders   Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n       StackMapTable: number_of_entries = 3\n         frame_type = 16 /* same */\n         frame_type = 24 /* same */\n         frame_type = 1 /* same */\n-    Signature: #438                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;[B)I\n+    Signature: #434                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;[B)I\n \n   private int fill(byte, int, byte[], int);\n     descriptor: (BI[BI)I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=6, args_size=5\n          0: iconst_0\n@@ -2415,15 +2400,15 @@\n             0      51     0  this   Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n             0      51     1 headers   Ljava/util/Map;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      51     1 headers   Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n       StackMapTable: number_of_entries = 1\n         frame_type = 50 /* same */\n-    Signature: #449                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n+    Signature: #445                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n \n   void fillGNUSparse1xData(java.util.Map<java.lang.String, java.lang.String>) throws java.io.IOException;\n     descriptor: (Ljava/util/Map;)V\n     flags: (0x0000)\n     Code:\n       stack=4, locals=3, args_size=2\n          0: aload_0\n@@ -2497,15 +2482,15 @@\n       StackMapTable: number_of_entries = 3\n         frame_type = 36 /* same */\n         frame_type = 96 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NumberFormatException ]\n         frame_type = 35 /* same */\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #449                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n+    Signature: #445                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n \n   void fillStarSparseData(java.util.Map<java.lang.String, java.lang.String>) throws java.io.IOException;\n     descriptor: (Ljava/util/Map;)V\n     flags: (0x0000)\n     Code:\n       stack=4, locals=3, args_size=2\n          0: aload_0\n@@ -2561,15 +2546,15 @@\n             0      74     1 headers   Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n       StackMapTable: number_of_entries = 2\n         frame_type = 101 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NumberFormatException ]\n         frame_type = 35 /* same */\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #449                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n+    Signature: #445                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n \n   public java.nio.file.attribute.FileTime getCreationTime();\n     descriptor: ()Ljava/nio/file/attribute/FileTime;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -2623,15 +2608,15 @@\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n \n   public org.apache.commons.compress.archivers.tar.TarArchiveEntry[] getDirectoryEntries();\n     descriptor: ()[Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n-      stack=4, locals=8, args_size=1\n+      stack=4, locals=5, args_size=1\n          0: aload_0\n          1: getfield      #47                 // Field file:Ljava/nio/file/Path;\n          4: ifnull        14\n          7: aload_0\n          8: invokevirtual #121                // Method isDirectory:()Z\n         11: ifne          18\n         14: getstatic     #122                // Field EMPTY_TAR_ARCHIVE_ENTRY_ARRAY:[Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n@@ -2640,140 +2625,105 @@\n         21: dup\n         22: invokespecial #124                // Method java/util/ArrayList.\"<init>\":()V\n         25: astore_1\n         26: aload_0\n         27: getfield      #47                 // Field file:Ljava/nio/file/Path;\n         30: invokestatic  #125                // Method java/nio/file/Files.newDirectoryStream:(Ljava/nio/file/Path;)Ljava/nio/file/DirectoryStream;\n         33: astore_2\n-        34: aconst_null\n-        35: astore_3\n-        36: aload_2\n-        37: invokeinterface #126,  1          // InterfaceMethod java/nio/file/DirectoryStream.iterator:()Ljava/util/Iterator;\n-        42: astore        4\n-        44: aload         4\n-        46: invokeinterface #127,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z\n-        51: ifeq          85\n-        54: aload         4\n-        56: invokeinterface #128,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n-        61: checkcast     #129                // class java/nio/file/Path\n-        64: astore        5\n-        66: aload_1\n-        67: new           #44                 // class org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-        70: dup\n-        71: aload         5\n-        73: invokespecial #130                // Method \"<init>\":(Ljava/nio/file/Path;)V\n-        76: invokeinterface #131,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-        81: pop\n-        82: goto          44\n-        85: aload_2\n-        86: ifnull        169\n-        89: aload_3\n-        90: ifnull        113\n-        93: aload_2\n-        94: invokeinterface #132,  1          // InterfaceMethod java/nio/file/DirectoryStream.close:()V\n-        99: goto          169\n-       102: astore        4\n-       104: aload_3\n-       105: aload         4\n-       107: invokevirtual #134                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-       110: goto          169\n-       113: aload_2\n-       114: invokeinterface #132,  1          // InterfaceMethod java/nio/file/DirectoryStream.close:()V\n-       119: goto          169\n-       122: astore        4\n-       124: aload         4\n-       126: astore_3\n-       127: aload         4\n-       129: athrow\n-       130: astore        6\n-       132: aload_2\n-       133: ifnull        166\n-       136: aload_3\n-       137: ifnull        160\n-       140: aload_2\n-       141: invokeinterface #132,  1          // InterfaceMethod java/nio/file/DirectoryStream.close:()V\n-       146: goto          166\n-       149: astore        7\n-       151: aload_3\n-       152: aload         7\n-       154: invokevirtual #134                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-       157: goto          166\n-       160: aload_2\n-       161: invokeinterface #132,  1          // InterfaceMethod java/nio/file/DirectoryStream.close:()V\n-       166: aload         6\n-       168: athrow\n-       169: goto          177\n-       172: astore_2\n-       173: getstatic     #122                // Field EMPTY_TAR_ARCHIVE_ENTRY_ARRAY:[Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       176: areturn\n-       177: aload_1\n-       178: getstatic     #122                // Field EMPTY_TAR_ARCHIVE_ENTRY_ARRAY:[Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       181: invokeinterface #135,  2          // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-       186: checkcast     #136                // class \"[Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\"\n-       189: areturn\n+        34: aload_2\n+        35: invokeinterface #126,  1          // InterfaceMethod java/nio/file/DirectoryStream.iterator:()Ljava/util/Iterator;\n+        40: astore_3\n+        41: aload_3\n+        42: invokeinterface #127,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z\n+        47: ifeq          80\n+        50: aload_3\n+        51: invokeinterface #128,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n+        56: checkcast     #129                // class java/nio/file/Path\n+        59: astore        4\n+        61: aload_1\n+        62: new           #44                 // class org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+        65: dup\n+        66: aload         4\n+        68: invokespecial #130                // Method \"<init>\":(Ljava/nio/file/Path;)V\n+        71: invokeinterface #131,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+        76: pop\n+        77: goto          41\n+        80: aload_2\n+        81: ifnull        117\n+        84: aload_2\n+        85: invokeinterface #132,  1          // InterfaceMethod java/nio/file/DirectoryStream.close:()V\n+        90: goto          117\n+        93: astore_3\n+        94: aload_2\n+        95: ifnull        115\n+        98: aload_2\n+        99: invokeinterface #132,  1          // InterfaceMethod java/nio/file/DirectoryStream.close:()V\n+       104: goto          115\n+       107: astore        4\n+       109: aload_3\n+       110: aload         4\n+       112: invokevirtual #134                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+       115: aload_3\n+       116: athrow\n+       117: goto          125\n+       120: astore_2\n+       121: getstatic     #122                // Field EMPTY_TAR_ARCHIVE_ENTRY_ARRAY:[Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       124: areturn\n+       125: aload_1\n+       126: getstatic     #122                // Field EMPTY_TAR_ARCHIVE_ENTRY_ARRAY:[Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       129: invokeinterface #135,  2          // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+       134: checkcast     #136                // class \"[Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\"\n+       137: areturn\n       Exception table:\n          from    to  target type\n-            93    99   102   Class java/lang/Throwable\n-            36    85   122   Class java/lang/Throwable\n-            36    85   130   any\n-           140   146   149   Class java/lang/Throwable\n-           122   132   130   any\n-            26   169   172   Class java/io/IOException\n+            34    80    93   Class java/lang/Throwable\n+            98   104   107   Class java/lang/Throwable\n+            26   117   120   Class java/io/IOException\n       LineNumberTable:\n         line 846: 0\n         line 847: 14\n         line 850: 18\n         line 851: 26\n-        line 852: 36\n-        line 853: 66\n-        line 854: 82\n-        line 855: 85\n-        line 851: 122\n-        line 855: 130\n-        line 857: 169\n-        line 855: 172\n-        line 856: 173\n-        line 858: 177\n-      LocalVariableTable:\n-        Start  Length  Slot  Name   Signature\n-           66      16     5     p   Ljava/nio/file/Path;\n-           34     135     2 dirStream   Ljava/nio/file/DirectoryStream;\n-          173       4     2     e   Ljava/io/IOException;\n-            0     190     0  this   Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-           26     164     1 entries   Ljava/util/List;\n+        line 852: 34\n+        line 853: 61\n+        line 854: 77\n+        line 855: 80\n+        line 851: 93\n+        line 857: 117\n+        line 855: 120\n+        line 856: 121\n+        line 858: 125\n+      LocalVariableTable:\n+        Start  Length  Slot  Name   Signature\n+           61      16     4     p   Ljava/nio/file/Path;\n+           34      83     2 dirStream   Ljava/nio/file/DirectoryStream;\n+          121       4     2     e   Ljava/io/IOException;\n+            0     138     0  this   Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+           26     112     1 entries   Ljava/util/List;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n-           34     135     2 dirStream   Ljava/nio/file/DirectoryStream<Ljava/nio/file/Path;>;\n-           26     164     1 entries   Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;>;\n-      StackMapTable: number_of_entries = 14\n+           34      83     2 dirStream   Ljava/nio/file/DirectoryStream<Ljava/nio/file/Path;>;\n+           26     112     1 entries   Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;>;\n+      StackMapTable: number_of_entries = 10\n         frame_type = 14 /* same */\n         frame_type = 3 /* same */\n-        frame_type = 255 /* full_frame */\n-          offset_delta = 25\n-          locals = [ class org/apache/commons/compress/archivers/tar/TarArchiveEntry, class java/util/List, class java/nio/file/DirectoryStream, class java/lang/Throwable, class java/util/Iterator ]\n-          stack = []\n+        frame_type = 254 /* append */\n+          offset_delta = 22\n+          locals = [ class java/util/List, class java/nio/file/DirectoryStream, class java/util/Iterator ]\n         frame_type = 250 /* chop */\n-          offset_delta = 40\n-        frame_type = 80 /* same_locals_1_stack_item */\n-          stack = [ class java/lang/Throwable ]\n-        frame_type = 10 /* same */\n-        frame_type = 72 /* same_locals_1_stack_item */\n-          stack = [ class java/lang/Throwable ]\n-        frame_type = 71 /* same_locals_1_stack_item */\n+          offset_delta = 38\n+        frame_type = 76 /* same_locals_1_stack_item */\n           stack = [ class java/lang/Throwable ]\n         frame_type = 255 /* full_frame */\n-          offset_delta = 18\n-          locals = [ class org/apache/commons/compress/archivers/tar/TarArchiveEntry, class java/util/List, class java/nio/file/DirectoryStream, class java/lang/Throwable, top, top, class java/lang/Throwable ]\n+          offset_delta = 13\n+          locals = [ class org/apache/commons/compress/archivers/tar/TarArchiveEntry, class java/util/List, class java/nio/file/DirectoryStream, class java/lang/Throwable ]\n           stack = [ class java/lang/Throwable ]\n-        frame_type = 10 /* same */\n-        frame_type = 5 /* same */\n-        frame_type = 255 /* full_frame */\n-          offset_delta = 2\n-          locals = [ class org/apache/commons/compress/archivers/tar/TarArchiveEntry, class java/util/List ]\n-          stack = []\n+        frame_type = 7 /* same */\n+        frame_type = 249 /* chop */\n+          offset_delta = 1\n         frame_type = 66 /* same_locals_1_stack_item */\n           stack = [ class java/io/IOException ]\n         frame_type = 4 /* same */\n \n   public java.lang.String getExtraPaxHeader(java.lang.String);\n     descriptor: (Ljava/lang/String;)Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n@@ -2802,15 +2752,15 @@\n          4: invokestatic  #137                // Method java/util/Collections.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;\n          7: areturn\n       LineNumberTable:\n         line 877: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-    Signature: #477                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+    Signature: #470                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n \n   public java.io.File getFile();\n     descriptor: ()Ljava/io/File;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -2846,15 +2796,15 @@\n       LineNumberTable:\n         line 904: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #483()\n+      0: #476()\n         java.lang.Deprecated\n \n   public java.lang.String getGroupName();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n@@ -3167,15 +3117,15 @@\n         frame_type = 250 /* chop */\n           offset_delta = 50\n         frame_type = 250 /* chop */\n           offset_delta = 5\n         frame_type = 48 /* same */\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #504                         // ()Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #496                         // ()Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n \n   public java.nio.file.Path getPath();\n     descriptor: ()Ljava/nio/file/Path;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -3234,15 +3184,15 @@\n          1: getfield      #146                // Field sparseHeaders:Ljava/util/List;\n          4: areturn\n       LineNumberTable:\n         line 1098: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-    Signature: #504                         // ()Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #496                         // ()Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n \n   public java.nio.file.attribute.FileTime getStatusChangeTime();\n     descriptor: ()Ljava/nio/file/attribute/FileTime;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -3268,15 +3218,15 @@\n       LineNumberTable:\n         line 1120: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #483()\n+      0: #476()\n         java.lang.Deprecated\n \n   public java.lang.String getUserName();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n@@ -4011,15 +3961,15 @@\n         frame_type = 3 /* same */\n         frame_type = 64 /* same_locals_1_stack_item */\n           stack = [ int ]\n         frame_type = 0 /* same */\n         frame_type = 9 /* same */\n         frame_type = 14 /* same */\n         frame_type = 14 /* same */\n-    Signature: #546                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;[B)Z\n+    Signature: #538                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;[B)Z\n \n   private long parseOctalOrBinary(byte[], int, int, boolean);\n     descriptor: ([BIIZ)J\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=6, args_size=5\n          0: iload         4\n@@ -4206,15 +4156,15 @@\n             0      29     1 globalPaxHeaders   Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n       StackMapTable: number_of_entries = 2\n         frame_type = 78 /* same_locals_1_stack_item */\n           stack = [ class java/lang/IllegalArgumentException ]\n         frame_type = 13 /* same */\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #557                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZZ)V\n+    Signature: #548                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZZ)V\n \n   private void parseTarHeaderUnwrapped(java.util.Map<java.lang.String, java.lang.String>, byte[], org.apache.commons.compress.archivers.zip.ZipEncoding, boolean, boolean) throws java.io.IOException;\n     descriptor: (Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZZ)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=6, locals=9, args_size=6\n          0: iconst_0\n@@ -4553,15 +4503,15 @@\n        728: invokevirtual #110                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        731: invokevirtual #112                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n        734: putfield      #27                 // Field name:Ljava/lang/String;\n        737: return\n       LineNumberTable:\n         line 1510: 0\n         line 1512: 3\n-        line 1513: 26\n+        line 1513: 20\n         line 1514: 32\n         line 1515: 35\n         line 1516: 51\n         line 1517: 54\n         line 1518: 71\n         line 1519: 74\n         line 1520: 91\n@@ -4571,25 +4521,25 @@\n         line 1525: 125\n         line 1526: 128\n         line 1527: 149\n         line 1528: 152\n         line 1529: 160\n         line 1530: 163\n         line 1531: 174\n-        line 1532: 197\n+        line 1532: 191\n         line 1533: 203\n         line 1534: 206\n         line 1535: 218\n         line 1536: 221\n         line 1537: 232\n         line 1538: 235\n-        line 1539: 258\n+        line 1539: 252\n         line 1540: 264\n         line 1541: 267\n-        line 1542: 290\n+        line 1542: 284\n         line 1543: 296\n         line 1544: 299\n         line 1545: 317\n         line 1546: 333\n         line 1547: 336\n         line 1548: 352\n         line 1550: 358\n@@ -4607,27 +4557,27 @@\n         line 1565: 465\n         line 1566: 468\n         line 1567: 478\n         line 1568: 481\n         line 1569: 493\n         line 1570: 496\n         line 1573: 499\n-        line 1574: 510\n-        line 1575: 523\n+        line 1574: 504\n+        line 1575: 516\n         line 1576: 528\n         line 1577: 534\n         line 1578: 542\n         line 1580: 573\n         line 1581: 591\n         line 1582: 594\n         line 1583: 612\n         line 1584: 615\n         line 1588: 618\n-        line 1589: 629\n-        line 1590: 642\n+        line 1589: 623\n+        line 1590: 635\n         line 1591: 647\n         line 1594: 653\n         line 1595: 672\n         line 1597: 698\n         line 1598: 706\n         line 1602: 737\n       LocalVariableTable:\n@@ -4697,15 +4647,15 @@\n         frame_type = 252 /* append */\n           offset_delta = 52\n           locals = [ class java/lang/String ]\n         frame_type = 250 /* chop */\n           offset_delta = 38\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #557                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZZ)V\n+    Signature: #548                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZZ)V\n \n   private void processPaxHeader(java.lang.String, java.lang.String) throws java.io.IOException;\n     descriptor: (Ljava/lang/String;Ljava/lang/String;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n@@ -5114,15 +5064,15 @@\n         frame_type = 7 /* same */\n         frame_type = 7 /* same */\n         frame_type = 16 /* same */\n         frame_type = 249 /* chop */\n           offset_delta = 11\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #568                         // (Ljava/lang/String;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n+    Signature: #559                         // (Ljava/lang/String;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n \n   private void readFileMode(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption...) throws java.io.IOException;\n     descriptor: (Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n     flags: (0x0082) ACC_PRIVATE, ACC_VARARGS\n     Code:\n       stack=3, locals=5, args_size=4\n          0: aload_1\n@@ -5800,15 +5750,15 @@\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0  this   Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n             0       6     1 sparseHeaders   Ljava/util/List;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0       6     1 sparseHeaders   Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-    Signature: #611                         // (Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;)V\n+    Signature: #601                         // (Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;)V\n \n   public void setStatusChangeTime(java.nio.file.attribute.FileTime);\n     descriptor: (Ljava/nio/file/attribute/FileTime;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n@@ -5920,15 +5870,15 @@\n         frame_type = 252 /* append */\n           offset_delta = 12\n           locals = [ class java/util/Iterator ]\n         frame_type = 250 /* chop */\n           offset_delta = 44\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #449                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n+    Signature: #445                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n \n   public void writeEntryHeader(byte[]);\n     descriptor: ([B)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=2\n          0: aload_0\n@@ -6351,20 +6301,20 @@\n          4: putstatic     #122                // Field EMPTY_TAR_ARCHIVE_ENTRY_ARRAY:[Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n          7: return\n       LineNumberTable:\n         line 194: 0\n }\n SourceFile: \"TarArchiveEntry.java\"\n InnerClasses:\n-  public static #617= #293 of #726;       // Entry=class java/util/Map$Entry of class java/util/Map\n-  public static final #1136= #1135 of #1138; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n+  public static #607= #293 of #553;       // Entry=class java/util/Map$Entry of class java/util/Map\n+  public static final #1121= #1120 of #1123; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #790 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  0: #776 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #791 (Ljava/lang/Object;)Z\n-      #792 REF_invokeStatic org/apache/commons/compress/archivers/tar/TarArchiveEntry.lambda$getOrderedSparseHeaders$0:(Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;)Z\n-      #793 (Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;)Z\n-  1: #790 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+      #777 (Ljava/lang/Object;)Z\n+      #778 REF_invokeStatic org/apache/commons/compress/archivers/tar/TarArchiveEntry.lambda$getOrderedSparseHeaders$0:(Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;)Z\n+      #779 (Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;)Z\n+  1: #776 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #797 (Ljava/lang/Object;)J\n-      #798 REF_invokeVirtual org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n-      #799 (Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;)J\n+      #783 (Ljava/lang/Object;)J\n+      #784 REF_invokeVirtual org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+      #785 (Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;)J\n"}]}
