{"diffoscope-json-version": 1, "source1": "first/CSVPrinter.class", "source2": "second/CSVPrinter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,32 +19,32 @@\n     public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {\n         this.newRecord = true;\n         Assertions.notNull((Object)out, \"out\");\n         Assertions.notNull((Object)format, \"format\");\n         this.out = out;\n         this.format = format;\n         if (format.getHeaderComments() != null) {\n-            for (final String line : format.getHeaderComments()) {\n-                if (line != null) {\n-                    this.printComment(line);\n+            for (final String s : format.getHeaderComments()) {\n+                if (s != null) {\n+                    this.printComment(s);\n                 }\n             }\n         }\n         if (format.getHeader() != null && !format.getSkipHeaderRecord()) {\n             this.printRecord((Object[])format.getHeader());\n         }\n     }\n     \n     @Override\n     public void close() throws IOException {\n         this.close(false);\n     }\n     \n-    public void close(final boolean flush) throws IOException {\n-        if (flush || this.format.getAutoFlush()) {\n+    public void close(final boolean b) throws IOException {\n+        if (b || this.format.getAutoFlush()) {\n             this.flush();\n         }\n         if (this.out instanceof Closeable) {\n             ((Closeable)this.out).close();\n         }\n     }\n     \n@@ -55,90 +55,91 @@\n         }\n     }\n     \n     public Appendable getOut() {\n         return this.out;\n     }\n     \n-    public void print(final Object value) throws IOException {\n-        this.format.print(value, this.out, this.newRecord);\n+    public void print(final Object o) throws IOException {\n+        this.format.print(o, this.out, this.newRecord);\n         this.newRecord = false;\n     }\n     \n-    public void printComment(final String comment) throws IOException {\n+    public void printComment(final String s) throws IOException {\n         if (!this.format.isCommentMarkerSet()) {\n             return;\n         }\n         if (!this.newRecord) {\n             this.println();\n         }\n         this.out.append(this.format.getCommentMarker());\n         this.out.append(' ');\n-        for (int i = 0; i < comment.length(); ++i) {\n-            final char c = comment.charAt(i);\n-            switch (c) {\n-                case '\\r': {\n-                    if (i + 1 < comment.length() && comment.charAt(i + 1) == '\\n') {\n+        for (int i = 0; i < s.length(); ++i) {\n+            final char char1 = s.charAt(i);\n+            switch (char1) {\n+                case 13: {\n+                    if (i + 1 < s.length() && s.charAt(i + 1) == '\\n') {\n                         ++i;\n                     }\n                 }\n-                case '\\n': {\n+                case 10: {\n                     this.println();\n                     this.out.append(this.format.getCommentMarker());\n                     this.out.append(' ');\n                     break;\n                 }\n                 default: {\n-                    this.out.append(c);\n+                    this.out.append(char1);\n                     break;\n                 }\n             }\n         }\n         this.println();\n     }\n     \n     public void println() throws IOException {\n         this.format.println(this.out);\n         this.newRecord = true;\n     }\n     \n-    public void printRecord(final Iterable<?> values) throws IOException {\n-        for (final Object value : values) {\n-            this.print(value);\n+    public void printRecord(final Iterable<?> iterable) throws IOException {\n+        final Iterator<?> iterator = iterable.iterator();\n+        while (iterator.hasNext()) {\n+            this.print(iterator.next());\n         }\n         this.println();\n     }\n     \n-    public void printRecord(final Object... values) throws IOException {\n-        this.format.printRecord(this.out, values);\n+    public void printRecord(final Object... array) throws IOException {\n+        this.format.printRecord(this.out, array);\n         this.newRecord = true;\n     }\n     \n-    public void printRecords(final Iterable<?> values) throws IOException {\n-        for (final Object value : values) {\n-            if (value instanceof Object[]) {\n-                this.printRecord((Object[])(Object[])value);\n+    public void printRecords(final Iterable<?> iterable) throws IOException {\n+        for (final Object next : iterable) {\n+            if (next instanceof Object[]) {\n+                this.printRecord((Object[])(Object[])next);\n             }\n-            else if (value instanceof Iterable) {\n-                this.printRecord((Iterable<?>)value);\n+            else if (next instanceof Iterable) {\n+                this.printRecord((Iterable<?>)next);\n             }\n             else {\n-                this.printRecord(value);\n+                this.printRecord(next);\n             }\n         }\n     }\n     \n-    public void printRecords(final Object... values) throws IOException {\n-        this.printRecords(Arrays.asList(values));\n+    public void printRecords(final Object... a) throws IOException {\n+        this.printRecords(Arrays.asList(a));\n     }\n     \n-    public void printRecords(final ResultSet resultSet) throws SQLException, IOException {\n-        final int columnCount = resultSet.getMetaData().getColumnCount();\n-        while (resultSet.next()) {\n+    public void printRecords(final ResultSet set) throws SQLException, IOException {\n+        final int columnCount = set.getMetaData().getColumnCount();\n+        while (set.next()) {\n             for (int i = 1; i <= columnCount; ++i) {\n-                final Object object = resultSet.getObject(i);\n+                final Object object = set.getObject(i);\n                 this.print((object instanceof Clob) ? ((Clob)object).getCharacterStream() : object);\n             }\n             this.println();\n         }\n     }\n }\n"}]}
