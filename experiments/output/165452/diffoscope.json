{"diffoscope-json-version": 1, "source1": "first/ZipUtil.class", "source2": "second/ZipUtil.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,110 +1,110 @@\n-  SHA-256 checksum 1e904fc8dfa097edd592757aed880e97e1825b2c4a698cc404bd89ca49e831d8\n+  SHA-256 checksum 1b5f667151d6665c68cdbd510e01820562a03106e6698b323098b0d32f134fd0\n   Compiled from \"ZipUtil.java\"\n public abstract class org.apache.commons.compress.archivers.zip.ZipUtil\n   minor version: 0\n   major version: 52\n   flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT\n   this_class: #47                         // org/apache/commons/compress/archivers/zip/ZipUtil\n   super_class: #100                       // java/lang/Object\n   interfaces: 0, fields: 2, methods: 24, attributes: 2\n Constant pool:\n-    #1 = Methodref          #100.#216     // java/lang/Object.\"<init>\":()V\n-    #2 = Class              #217          // java/lang/Integer\n+    #1 = Methodref          #100.#212     // java/lang/Object.\"<init>\":()V\n+    #2 = Class              #213          // java/lang/Integer\n     #3 = Long               4294967296l\n-    #5 = Methodref          #218.#219     // java/math/BigInteger.bitLength:()I\n-    #6 = Methodref          #218.#220     // java/math/BigInteger.longValue:()J\n-    #7 = Class              #221          // java/lang/NumberFormatException\n-    #8 = Class              #222          // java/lang/StringBuilder\n-    #9 = Methodref          #8.#216       // java/lang/StringBuilder.\"<init>\":()V\n-   #10 = String             #223          // The BigInteger cannot fit inside a 64 bit java long: [\n-   #11 = Methodref          #8.#224       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #12 = Methodref          #8.#225       // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #13 = String             #226          // ]\n-   #14 = Methodref          #8.#227       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #15 = Methodref          #7.#228       // java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n-   #16 = Methodref          #47.#229      // org/apache/commons/compress/archivers/zip/ZipUtil.supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #17 = Methodref          #47.#230      // org/apache/commons/compress/archivers/zip/ZipUtil.supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #18 = Class              #231          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-   #19 = Fieldref           #232.#233     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.ENCRYPTION:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-   #20 = Methodref          #18.#234      // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #21 = Methodref          #235.#236     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-   #22 = Methodref          #237.#238     // org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #23 = Fieldref           #232.#239     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-   #24 = Methodref          #18.#240      // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #25 = Methodref          #241.#242     // java/util/Arrays.copyOf:([BI)[B\n-   #26 = Methodref          #243.#244     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #27 = Methodref          #28.#245      // java/util/Calendar.getInstance:()Ljava/util/Calendar;\n-   #28 = Class              #246          // java/util/Calendar\n+    #5 = Methodref          #214.#215     // java/math/BigInteger.bitLength:()I\n+    #6 = Methodref          #214.#216     // java/math/BigInteger.longValue:()J\n+    #7 = Class              #217          // java/lang/NumberFormatException\n+    #8 = Class              #218          // java/lang/StringBuilder\n+    #9 = Methodref          #8.#212       // java/lang/StringBuilder.\"<init>\":()V\n+   #10 = String             #219          // The BigInteger cannot fit inside a 64 bit java long: [\n+   #11 = Methodref          #8.#220       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #12 = Methodref          #8.#221       // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #13 = String             #222          // ]\n+   #14 = Methodref          #8.#223       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #15 = Methodref          #7.#224       // java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n+   #16 = Methodref          #47.#225      // org/apache/commons/compress/archivers/zip/ZipUtil.supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #17 = Methodref          #47.#226      // org/apache/commons/compress/archivers/zip/ZipUtil.supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #18 = Class              #227          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+   #19 = Fieldref           #228.#229     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.ENCRYPTION:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+   #20 = Methodref          #18.#230      // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #21 = Methodref          #231.#232     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+   #22 = Methodref          #130.#233     // org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #23 = Fieldref           #228.#234     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+   #24 = Methodref          #18.#235      // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #25 = Methodref          #236.#237     // java/util/Arrays.copyOf:([BI)[B\n+   #26 = Methodref          #238.#239     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #27 = Methodref          #28.#240      // java/util/Calendar.getInstance:()Ljava/util/Calendar;\n+   #28 = Class              #241          // java/util/Calendar\n    #29 = Long               127l\n-   #31 = Methodref          #28.#247      // java/util/Calendar.set:(II)V\n+   #31 = Methodref          #28.#242      // java/util/Calendar.set:(II)V\n    #32 = Long               15l\n-   #34 = Methodref          #28.#248      // java/util/Calendar.getTime:()Ljava/util/Date;\n-   #35 = Methodref          #47.#249      // org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaDate:(J)Ljava/util/Date;\n-   #36 = Methodref          #250.#251     // java/util/Date.getTime:()J\n-   #37 = Methodref          #93.#252      // org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n-   #38 = Class              #253          // java/util/zip/CRC32\n-   #39 = Methodref          #38.#216      // java/util/zip/CRC32.\"<init>\":()V\n-   #40 = Methodref          #38.#254      // java/util/zip/CRC32.update:([B)V\n-   #41 = Methodref          #38.#252      // java/util/zip/CRC32.getValue:()J\n-   #42 = Methodref          #255.#256     // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getNameCRC32:()J\n-   #43 = Fieldref           #257.#258     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #44 = Methodref          #255.#259     // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getUnicodeName:()[B\n-   #45 = InterfaceMethodref #260.#261     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-   #46 = Class              #262          // java/io/IOException\n-   #47 = Class              #263          // org/apache/commons/compress/archivers/zip/ZipUtil\n+   #34 = Methodref          #28.#243      // java/util/Calendar.getTime:()Ljava/util/Date;\n+   #35 = Methodref          #47.#244      // org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaDate:(J)Ljava/util/Date;\n+   #36 = Methodref          #245.#246     // java/util/Date.getTime:()J\n+   #37 = Methodref          #93.#247      // org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+   #38 = Class              #248          // java/util/zip/CRC32\n+   #39 = Methodref          #38.#212      // java/util/zip/CRC32.\"<init>\":()V\n+   #40 = Methodref          #38.#249      // java/util/zip/CRC32.update:([B)V\n+   #41 = Methodref          #38.#247      // java/util/zip/CRC32.getValue:()J\n+   #42 = Methodref          #158.#250     // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getNameCRC32:()J\n+   #43 = Fieldref           #251.#252     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #44 = Methodref          #158.#253     // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getUnicodeName:()[B\n+   #45 = InterfaceMethodref #254.#255     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+   #46 = Class              #256          // java/io/IOException\n+   #47 = Class              #257          // org/apache/commons/compress/archivers/zip/ZipUtil\n    #48 = Long               4036608000000l\n-   #50 = Methodref          #47.#264      // org/apache/commons/compress/archivers/zip/ZipUtil.javaToDosTime:(J)J\n+   #50 = Methodref          #47.#258      // org/apache/commons/compress/archivers/zip/ZipUtil.javaToDosTime:(J)J\n    #51 = Long               2162688l\n-   #53 = Methodref          #265.#266     // java/time/Instant.ofEpochMilli:(J)Ljava/time/Instant;\n-   #54 = Methodref          #267.#268     // java/time/ZoneId.systemDefault:()Ljava/time/ZoneId;\n-   #55 = Methodref          #269.#270     // java/time/LocalDateTime.ofInstant:(Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/LocalDateTime;\n-   #56 = Methodref          #47.#271      // org/apache/commons/compress/archivers/zip/ZipUtil.javaEpochToLocalDateTime:(J)Ljava/time/LocalDateTime;\n-   #57 = Methodref          #269.#272     // java/time/LocalDateTime.getYear:()I\n-   #58 = Methodref          #269.#273     // java/time/LocalDateTime.getMonthValue:()I\n-   #59 = Methodref          #269.#274     // java/time/LocalDateTime.getDayOfMonth:()I\n-   #60 = Methodref          #269.#275     // java/time/LocalDateTime.getHour:()I\n-   #61 = Methodref          #269.#276     // java/time/LocalDateTime.getMinute:()I\n-   #62 = Methodref          #269.#277     // java/time/LocalDateTime.getSecond:()I\n+   #53 = Methodref          #259.#260     // java/time/Instant.ofEpochMilli:(J)Ljava/time/Instant;\n+   #54 = Methodref          #261.#262     // java/time/ZoneId.systemDefault:()Ljava/time/ZoneId;\n+   #55 = Methodref          #171.#263     // java/time/LocalDateTime.ofInstant:(Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/LocalDateTime;\n+   #56 = Methodref          #47.#264      // org/apache/commons/compress/archivers/zip/ZipUtil.javaEpochToLocalDateTime:(J)Ljava/time/LocalDateTime;\n+   #57 = Methodref          #171.#265     // java/time/LocalDateTime.getYear:()I\n+   #58 = Methodref          #171.#266     // java/time/LocalDateTime.getMonthValue:()I\n+   #59 = Methodref          #171.#267     // java/time/LocalDateTime.getDayOfMonth:()I\n+   #60 = Methodref          #171.#268     // java/time/LocalDateTime.getHour:()I\n+   #61 = Methodref          #171.#269     // java/time/LocalDateTime.getMinute:()I\n+   #62 = Methodref          #171.#270     // java/time/LocalDateTime.getSecond:()I\n    #63 = Long               4294967295l\n    #65 = Long               -2147483648l\n-   #67 = Class              #278          // java/lang/IllegalArgumentException\n-   #68 = String             #279          // Negative longs < -2^31 not permitted: [\n-   #69 = Methodref          #8.#280       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #70 = Methodref          #67.#228      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #71 = Methodref          #47.#281      // org/apache/commons/compress/archivers/zip/ZipUtil.adjustToLong:(I)J\n-   #72 = Methodref          #218.#282     // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-   #73 = Fieldref           #75.#283      // org/apache/commons/compress/archivers/zip/UnicodePathExtraField.UPATH_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #74 = Methodref          #235.#284     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-   #75 = Class              #285          // org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n-   #76 = Methodref          #47.#286      // org/apache/commons/compress/archivers/zip/ZipUtil.getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n-   #77 = Methodref          #235.#287     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setName:(Ljava/lang/String;)V\n-   #78 = Fieldref           #288.#289     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-   #79 = Methodref          #235.#290     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-   #80 = Fieldref           #81.#291      // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.UCOM_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #81 = Class              #292          // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n-   #82 = Methodref          #235.#293     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setComment:(Ljava/lang/String;)V\n-   #83 = Fieldref           #294.#295     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n-   #84 = Methodref          #235.#296     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCommentSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n-   #85 = Methodref          #235.#297     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #86 = Methodref          #298.#299     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesEncryption:()Z\n-   #87 = Fieldref           #237.#300     // org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #88 = Methodref          #237.#301     // org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n-   #89 = Fieldref           #237.#302     // org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #90 = Class              #303          // java/util/zip/ZipEntry\n-   #91 = Fieldref           #237.#304     // org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #92 = Fieldref           #237.#305     // org/apache/commons/compress/archivers/zip/ZipMethod.BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #93 = Class              #306          // org/apache/commons/compress/archivers/zip/ZipLong\n-   #94 = Methodref          #47.#307      // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(J)[B\n-   #95 = Methodref          #93.#308      // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n-   #96 = Methodref          #47.#309      // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(J[BI)V\n-   #97 = Methodref          #93.#310      // org/apache/commons/compress/archivers/zip/ZipLong.putLong:(J[BI)V\n-   #98 = String             #311          // Can only convert non-negative integers between [0,255] to byte: [\n-   #99 = Methodref          #8.#312       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-  #100 = Class              #313          // java/lang/Object\n+   #67 = Class              #271          // java/lang/IllegalArgumentException\n+   #68 = String             #272          // Negative longs < -2^31 not permitted: [\n+   #69 = Methodref          #8.#273       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+   #70 = Methodref          #67.#224      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #71 = Methodref          #47.#274      // org/apache/commons/compress/archivers/zip/ZipUtil.adjustToLong:(I)J\n+   #72 = Methodref          #214.#275     // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+   #73 = Fieldref           #75.#276      // org/apache/commons/compress/archivers/zip/UnicodePathExtraField.UPATH_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #74 = Methodref          #231.#277     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+   #75 = Class              #278          // org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n+   #76 = Methodref          #47.#279      // org/apache/commons/compress/archivers/zip/ZipUtil.getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n+   #77 = Methodref          #231.#280     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setName:(Ljava/lang/String;)V\n+   #78 = Fieldref           #281.#282     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+   #79 = Methodref          #231.#283     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+   #80 = Fieldref           #81.#284      // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.UCOM_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #81 = Class              #285          // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n+   #82 = Methodref          #231.#286     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setComment:(Ljava/lang/String;)V\n+   #83 = Fieldref           #287.#288     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n+   #84 = Methodref          #231.#289     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCommentSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n+   #85 = Methodref          #231.#290     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+   #86 = Methodref          #291.#292     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesEncryption:()Z\n+   #87 = Fieldref           #130.#293     // org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #88 = Methodref          #130.#294     // org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+   #89 = Fieldref           #130.#295     // org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #90 = Class              #296          // java/util/zip/ZipEntry\n+   #91 = Fieldref           #130.#297     // org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #92 = Fieldref           #130.#298     // org/apache/commons/compress/archivers/zip/ZipMethod.BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #93 = Class              #299          // org/apache/commons/compress/archivers/zip/ZipLong\n+   #94 = Methodref          #47.#300      // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(J)[B\n+   #95 = Methodref          #93.#301      // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n+   #96 = Methodref          #47.#302      // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(J[BI)V\n+   #97 = Methodref          #93.#303      // org/apache/commons/compress/archivers/zip/ZipLong.putLong:(J[BI)V\n+   #98 = String             #304          // Can only convert non-negative integers between [0,255] to byte: [\n+   #99 = Methodref          #8.#305       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+  #100 = Class              #306          // java/lang/Object\n   #101 = Utf8               DOSTIME_BEFORE_1980\n   #102 = Utf8               J\n   #103 = Utf8               ConstantValue\n   #104 = Utf8               UPPER_DOSTIME_BOUND\n   #105 = Utf8               <init>\n   #106 = Utf8               ()V\n   #107 = Utf8               Code\n@@ -126,15 +126,15 @@\n   #123 = Utf8               entry\n   #124 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n   #125 = Utf8               checkRequestedFeatures\n   #126 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n   #127 = Utf8               m\n   #128 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n   #129 = Utf8               ze\n-  #130 = Class              #314          // org/apache/commons/compress/archivers/zip/ZipMethod\n+  #130 = Class              #307          // org/apache/commons/compress/archivers/zip/ZipMethod\n   #131 = Utf8               Exceptions\n   #132 = Utf8               copy\n   #133 = Utf8               ([B)[B\n   #134 = Utf8               from\n   #135 = Utf8               [B\n   #136 = Utf8               ([B[BI)V\n   #137 = Utf8               to\n@@ -154,269 +154,262 @@\n   #151 = Utf8               (Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n   #152 = Utf8               crc32\n   #153 = Utf8               Ljava/util/zip/CRC32;\n   #154 = Utf8               origCRC32\n   #155 = Utf8               f\n   #156 = Utf8               Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;\n   #157 = Utf8               orig\n-  #158 = Class              #315          // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField\n+  #158 = Class              #308          // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField\n   #159 = Class              #135          // \"[B\"\n-  #160 = Class              #253          // java/util/zip/CRC32\n-  #161 = Class              #262          // java/io/IOException\n-  #162 = Utf8               isDosTime\n-  #163 = Utf8               (J)Z\n-  #164 = Utf8               time\n-  #165 = Utf8               javaEpochToLocalDateTime\n-  #166 = Utf8               (J)Ljava/time/LocalDateTime;\n-  #167 = Utf8               instant\n-  #168 = Utf8               Ljava/time/Instant;\n-  #169 = Utf8               javaToDosTime\n-  #170 = Utf8               t\n-  #171 = Utf8               ldt\n-  #172 = Utf8               Ljava/time/LocalDateTime;\n-  #173 = Class              #316          // java/time/LocalDateTime\n-  #174 = Utf8               longToBig\n-  #175 = Utf8               (J)Ljava/math/BigInteger;\n-  #176 = Utf8               l\n-  #177 = Utf8               reverse\n-  #178 = Utf8               x\n-  #179 = Utf8               B\n-  #180 = Utf8               array\n-  #181 = Utf8               z\n-  #182 = Utf8               setNameAndCommentFromExtraFields\n-  #183 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-  #184 = Utf8               cmtCandidate\n-  #185 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #186 = Utf8               cmt\n-  #187 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnicodeCommentExtraField;\n-  #188 = Utf8               newComment\n-  #189 = Utf8               Ljava/lang/String;\n-  #190 = Utf8               originalNameBytes\n-  #191 = Utf8               commentBytes\n-  #192 = Utf8               nameCandidate\n-  #193 = Utf8               name\n-  #194 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnicodePathExtraField;\n-  #195 = Utf8               newName\n-  #196 = Class              #317          // org/apache/commons/compress/archivers/zip/ZipExtraField\n-  #197 = Class              #285          // org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n-  #198 = Class              #318          // java/lang/String\n-  #199 = Class              #292          // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n-  #200 = Utf8               signedByteToUnsignedInt\n-  #201 = Utf8               (B)I\n-  #202 = Utf8               b\n-  #203 = Utf8               supportsEncryptionOf\n-  #204 = Utf8               supportsMethodOf\n-  #205 = Utf8               toDosTime\n-  #206 = Utf8               (Ljava/util/Date;)Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #207 = Utf8               Ljava/util/Date;\n-  #208 = Utf8               (J)[B\n-  #209 = Utf8               result\n-  #210 = Utf8               (J[BI)V\n-  #211 = Utf8               buf\n-  #212 = Utf8               unsignedIntToSignedByte\n-  #213 = Utf8               (I)B\n-  #214 = Utf8               SourceFile\n-  #215 = Utf8               ZipUtil.java\n-  #216 = NameAndType        #105:#106     // \"<init>\":()V\n-  #217 = Utf8               java/lang/Integer\n-  #218 = Class              #319          // java/math/BigInteger\n-  #219 = NameAndType        #320:#321     // bitLength:()I\n-  #220 = NameAndType        #322:#323     // longValue:()J\n-  #221 = Utf8               java/lang/NumberFormatException\n-  #222 = Utf8               java/lang/StringBuilder\n-  #223 = Utf8               The BigInteger cannot fit inside a 64 bit java long: [\n-  #224 = NameAndType        #324:#325     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #225 = NameAndType        #324:#326     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #226 = Utf8               ]\n-  #227 = NameAndType        #327:#328     // toString:()Ljava/lang/String;\n-  #228 = NameAndType        #105:#329     // \"<init>\":(Ljava/lang/String;)V\n-  #229 = NameAndType        #203:#122     // supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #230 = NameAndType        #204:#122     // supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #231 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-  #232 = Class              #330          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n-  #233 = NameAndType        #333:#334     // ENCRYPTION:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #234 = NameAndType        #105:#335     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #235 = Class              #336          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #236 = NameAndType        #337:#321     // getMethod:()I\n-  #237 = Class              #314          // org/apache/commons/compress/archivers/zip/ZipMethod\n-  #238 = NameAndType        #338:#339     // getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #239 = NameAndType        #340:#334     // METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #240 = NameAndType        #105:#341     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #241 = Class              #342          // java/util/Arrays\n-  #242 = NameAndType        #343:#344     // copyOf:([BI)[B\n-  #243 = Class              #345          // java/lang/System\n-  #244 = NameAndType        #346:#347     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #245 = NameAndType        #348:#349     // getInstance:()Ljava/util/Calendar;\n-  #246 = Utf8               java/util/Calendar\n-  #247 = NameAndType        #350:#351     // set:(II)V\n-  #248 = NameAndType        #352:#353     // getTime:()Ljava/util/Date;\n-  #249 = NameAndType        #139:#140     // dosToJavaDate:(J)Ljava/util/Date;\n-  #250 = Class              #354          // java/util/Date\n-  #251 = NameAndType        #352:#323     // getTime:()J\n-  #252 = NameAndType        #355:#323     // getValue:()J\n-  #253 = Utf8               java/util/zip/CRC32\n-  #254 = NameAndType        #356:#357     // update:([B)V\n-  #255 = Class              #315          // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField\n-  #256 = NameAndType        #358:#323     // getNameCRC32:()J\n-  #257 = Class              #359          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #258 = NameAndType        #360:#361     // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #259 = NameAndType        #362:#363     // getUnicodeName:()[B\n-  #260 = Class              #364          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #261 = NameAndType        #365:#366     // decode:([B)Ljava/lang/String;\n-  #262 = Utf8               java/io/IOException\n-  #263 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n-  #264 = NameAndType        #169:#145     // javaToDosTime:(J)J\n-  #265 = Class              #367          // java/time/Instant\n-  #266 = NameAndType        #368:#369     // ofEpochMilli:(J)Ljava/time/Instant;\n-  #267 = Class              #370          // java/time/ZoneId\n-  #268 = NameAndType        #371:#372     // systemDefault:()Ljava/time/ZoneId;\n-  #269 = Class              #316          // java/time/LocalDateTime\n-  #270 = NameAndType        #373:#374     // ofInstant:(Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/LocalDateTime;\n-  #271 = NameAndType        #165:#166     // javaEpochToLocalDateTime:(J)Ljava/time/LocalDateTime;\n-  #272 = NameAndType        #375:#321     // getYear:()I\n-  #273 = NameAndType        #376:#321     // getMonthValue:()I\n-  #274 = NameAndType        #377:#321     // getDayOfMonth:()I\n-  #275 = NameAndType        #378:#321     // getHour:()I\n-  #276 = NameAndType        #379:#321     // getMinute:()I\n-  #277 = NameAndType        #380:#321     // getSecond:()I\n-  #278 = Utf8               java/lang/IllegalArgumentException\n-  #279 = Utf8               Negative longs < -2^31 not permitted: [\n-  #280 = NameAndType        #324:#381     // append:(J)Ljava/lang/StringBuilder;\n-  #281 = NameAndType        #112:#113     // adjustToLong:(I)J\n-  #282 = NameAndType        #382:#175     // valueOf:(J)Ljava/math/BigInteger;\n-  #283 = NameAndType        #383:#384     // UPATH_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #284 = NameAndType        #385:#386     // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #285 = Utf8               org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n-  #286 = NameAndType        #150:#151     // getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n-  #287 = NameAndType        #387:#329     // setName:(Ljava/lang/String;)V\n-  #288 = Class              #388          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n-  #289 = NameAndType        #390:#391     // UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-  #290 = NameAndType        #392:#393     // setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-  #291 = NameAndType        #394:#384     // UCOM_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #292 = Utf8               org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n-  #293 = NameAndType        #395:#329     // setComment:(Ljava/lang/String;)V\n-  #294 = Class              #396          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource\n-  #295 = NameAndType        #390:#398     // UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n-  #296 = NameAndType        #399:#400     // setCommentSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n-  #297 = NameAndType        #401:#402     // getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #298 = Class              #403          // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-  #299 = NameAndType        #404:#405     // usesEncryption:()Z\n-  #300 = NameAndType        #406:#128     // UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #301 = NameAndType        #407:#321     // getCode:()I\n-  #302 = NameAndType        #408:#128     // IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #303 = Utf8               java/util/zip/ZipEntry\n-  #304 = NameAndType        #409:#128     // ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #305 = NameAndType        #410:#128     // BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #306 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-  #307 = NameAndType        #205:#208     // toDosTime:(J)[B\n-  #308 = NameAndType        #105:#357     // \"<init>\":([B)V\n-  #309 = NameAndType        #205:#210     // toDosTime:(J[BI)V\n-  #310 = NameAndType        #411:#210     // putLong:(J[BI)V\n-  #311 = Utf8               Can only convert non-negative integers between [0,255] to byte: [\n-  #312 = NameAndType        #324:#412     // append:(I)Ljava/lang/StringBuilder;\n-  #313 = Utf8               java/lang/Object\n-  #314 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n-  #315 = Utf8               org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField\n-  #316 = Utf8               java/time/LocalDateTime\n-  #317 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n-  #318 = Utf8               java/lang/String\n-  #319 = Utf8               java/math/BigInteger\n-  #320 = Utf8               bitLength\n-  #321 = Utf8               ()I\n-  #322 = Utf8               longValue\n-  #323 = Utf8               ()J\n-  #324 = Utf8               append\n-  #325 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #326 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #327 = Utf8               toString\n-  #328 = Utf8               ()Ljava/lang/String;\n-  #329 = Utf8               (Ljava/lang/String;)V\n-  #330 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n-  #331 = Utf8               Feature\n-  #332 = Utf8               InnerClasses\n-  #333 = Utf8               ENCRYPTION\n-  #334 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #335 = Utf8               (Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #336 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #337 = Utf8               getMethod\n-  #338 = Utf8               getMethodByCode\n-  #339 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #340 = Utf8               METHOD\n-  #341 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #342 = Utf8               java/util/Arrays\n-  #343 = Utf8               copyOf\n-  #344 = Utf8               ([BI)[B\n-  #345 = Utf8               java/lang/System\n-  #346 = Utf8               arraycopy\n-  #347 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #348 = Utf8               getInstance\n-  #349 = Utf8               ()Ljava/util/Calendar;\n-  #350 = Utf8               set\n-  #351 = Utf8               (II)V\n-  #352 = Utf8               getTime\n-  #353 = Utf8               ()Ljava/util/Date;\n-  #354 = Utf8               java/util/Date\n-  #355 = Utf8               getValue\n-  #356 = Utf8               update\n-  #357 = Utf8               ([B)V\n-  #358 = Utf8               getNameCRC32\n-  #359 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #360 = Utf8               UTF8_ZIP_ENCODING\n-  #361 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #362 = Utf8               getUnicodeName\n-  #363 = Utf8               ()[B\n-  #364 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #365 = Utf8               decode\n-  #366 = Utf8               ([B)Ljava/lang/String;\n-  #367 = Utf8               java/time/Instant\n-  #368 = Utf8               ofEpochMilli\n-  #369 = Utf8               (J)Ljava/time/Instant;\n-  #370 = Utf8               java/time/ZoneId\n-  #371 = Utf8               systemDefault\n-  #372 = Utf8               ()Ljava/time/ZoneId;\n-  #373 = Utf8               ofInstant\n-  #374 = Utf8               (Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/LocalDateTime;\n-  #375 = Utf8               getYear\n-  #376 = Utf8               getMonthValue\n-  #377 = Utf8               getDayOfMonth\n-  #378 = Utf8               getHour\n-  #379 = Utf8               getMinute\n-  #380 = Utf8               getSecond\n-  #381 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #382 = Utf8               valueOf\n-  #383 = Utf8               UPATH_ID\n-  #384 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #385 = Utf8               getExtraField\n-  #386 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #387 = Utf8               setName\n-  #388 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n-  #389 = Utf8               NameSource\n-  #390 = Utf8               UNICODE_EXTRA_FIELD\n-  #391 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-  #392 = Utf8               setNameSource\n-  #393 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-  #394 = Utf8               UCOM_ID\n-  #395 = Utf8               setComment\n-  #396 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource\n-  #397 = Utf8               CommentSource\n-  #398 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n-  #399 = Utf8               setCommentSource\n-  #400 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n-  #401 = Utf8               getGeneralPurposeBit\n-  #402 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #403 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-  #404 = Utf8               usesEncryption\n-  #405 = Utf8               ()Z\n-  #406 = Utf8               UNSHRINKING\n-  #407 = Utf8               getCode\n-  #408 = Utf8               IMPLODING\n-  #409 = Utf8               ENHANCED_DEFLATED\n-  #410 = Utf8               BZIP2\n-  #411 = Utf8               putLong\n-  #412 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #160 = Utf8               isDosTime\n+  #161 = Utf8               (J)Z\n+  #162 = Utf8               time\n+  #163 = Utf8               javaEpochToLocalDateTime\n+  #164 = Utf8               (J)Ljava/time/LocalDateTime;\n+  #165 = Utf8               instant\n+  #166 = Utf8               Ljava/time/Instant;\n+  #167 = Utf8               javaToDosTime\n+  #168 = Utf8               t\n+  #169 = Utf8               ldt\n+  #170 = Utf8               Ljava/time/LocalDateTime;\n+  #171 = Class              #309          // java/time/LocalDateTime\n+  #172 = Utf8               longToBig\n+  #173 = Utf8               (J)Ljava/math/BigInteger;\n+  #174 = Utf8               l\n+  #175 = Utf8               reverse\n+  #176 = Utf8               x\n+  #177 = Utf8               B\n+  #178 = Utf8               array\n+  #179 = Utf8               z\n+  #180 = Utf8               setNameAndCommentFromExtraFields\n+  #181 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+  #182 = Utf8               cmtCandidate\n+  #183 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #184 = Utf8               cmt\n+  #185 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnicodeCommentExtraField;\n+  #186 = Utf8               newComment\n+  #187 = Utf8               Ljava/lang/String;\n+  #188 = Utf8               originalNameBytes\n+  #189 = Utf8               commentBytes\n+  #190 = Utf8               nameCandidate\n+  #191 = Utf8               name\n+  #192 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnicodePathExtraField;\n+  #193 = Utf8               newName\n+  #194 = Class              #310          // org/apache/commons/compress/archivers/zip/ZipExtraField\n+  #195 = Class              #311          // java/lang/String\n+  #196 = Utf8               signedByteToUnsignedInt\n+  #197 = Utf8               (B)I\n+  #198 = Utf8               b\n+  #199 = Utf8               supportsEncryptionOf\n+  #200 = Utf8               supportsMethodOf\n+  #201 = Utf8               toDosTime\n+  #202 = Utf8               (Ljava/util/Date;)Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #203 = Utf8               Ljava/util/Date;\n+  #204 = Utf8               (J)[B\n+  #205 = Utf8               result\n+  #206 = Utf8               (J[BI)V\n+  #207 = Utf8               buf\n+  #208 = Utf8               unsignedIntToSignedByte\n+  #209 = Utf8               (I)B\n+  #210 = Utf8               SourceFile\n+  #211 = Utf8               ZipUtil.java\n+  #212 = NameAndType        #105:#106     // \"<init>\":()V\n+  #213 = Utf8               java/lang/Integer\n+  #214 = Class              #312          // java/math/BigInteger\n+  #215 = NameAndType        #313:#314     // bitLength:()I\n+  #216 = NameAndType        #315:#316     // longValue:()J\n+  #217 = Utf8               java/lang/NumberFormatException\n+  #218 = Utf8               java/lang/StringBuilder\n+  #219 = Utf8               The BigInteger cannot fit inside a 64 bit java long: [\n+  #220 = NameAndType        #317:#318     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #221 = NameAndType        #317:#319     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #222 = Utf8               ]\n+  #223 = NameAndType        #320:#321     // toString:()Ljava/lang/String;\n+  #224 = NameAndType        #105:#322     // \"<init>\":(Ljava/lang/String;)V\n+  #225 = NameAndType        #199:#122     // supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #226 = NameAndType        #200:#122     // supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #227 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+  #228 = Class              #323          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n+  #229 = NameAndType        #326:#327     // ENCRYPTION:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #230 = NameAndType        #105:#328     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #231 = Class              #329          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  #232 = NameAndType        #330:#314     // getMethod:()I\n+  #233 = NameAndType        #331:#332     // getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #234 = NameAndType        #333:#327     // METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #235 = NameAndType        #105:#334     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #236 = Class              #335          // java/util/Arrays\n+  #237 = NameAndType        #336:#337     // copyOf:([BI)[B\n+  #238 = Class              #338          // java/lang/System\n+  #239 = NameAndType        #339:#340     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #240 = NameAndType        #341:#342     // getInstance:()Ljava/util/Calendar;\n+  #241 = Utf8               java/util/Calendar\n+  #242 = NameAndType        #343:#344     // set:(II)V\n+  #243 = NameAndType        #345:#346     // getTime:()Ljava/util/Date;\n+  #244 = NameAndType        #139:#140     // dosToJavaDate:(J)Ljava/util/Date;\n+  #245 = Class              #347          // java/util/Date\n+  #246 = NameAndType        #345:#316     // getTime:()J\n+  #247 = NameAndType        #348:#316     // getValue:()J\n+  #248 = Utf8               java/util/zip/CRC32\n+  #249 = NameAndType        #349:#350     // update:([B)V\n+  #250 = NameAndType        #351:#316     // getNameCRC32:()J\n+  #251 = Class              #352          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #252 = NameAndType        #353:#354     // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #253 = NameAndType        #355:#356     // getUnicodeName:()[B\n+  #254 = Class              #357          // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #255 = NameAndType        #358:#359     // decode:([B)Ljava/lang/String;\n+  #256 = Utf8               java/io/IOException\n+  #257 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n+  #258 = NameAndType        #167:#145     // javaToDosTime:(J)J\n+  #259 = Class              #360          // java/time/Instant\n+  #260 = NameAndType        #361:#362     // ofEpochMilli:(J)Ljava/time/Instant;\n+  #261 = Class              #363          // java/time/ZoneId\n+  #262 = NameAndType        #364:#365     // systemDefault:()Ljava/time/ZoneId;\n+  #263 = NameAndType        #366:#367     // ofInstant:(Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/LocalDateTime;\n+  #264 = NameAndType        #163:#164     // javaEpochToLocalDateTime:(J)Ljava/time/LocalDateTime;\n+  #265 = NameAndType        #368:#314     // getYear:()I\n+  #266 = NameAndType        #369:#314     // getMonthValue:()I\n+  #267 = NameAndType        #370:#314     // getDayOfMonth:()I\n+  #268 = NameAndType        #371:#314     // getHour:()I\n+  #269 = NameAndType        #372:#314     // getMinute:()I\n+  #270 = NameAndType        #373:#314     // getSecond:()I\n+  #271 = Utf8               java/lang/IllegalArgumentException\n+  #272 = Utf8               Negative longs < -2^31 not permitted: [\n+  #273 = NameAndType        #317:#374     // append:(J)Ljava/lang/StringBuilder;\n+  #274 = NameAndType        #112:#113     // adjustToLong:(I)J\n+  #275 = NameAndType        #375:#173     // valueOf:(J)Ljava/math/BigInteger;\n+  #276 = NameAndType        #376:#377     // UPATH_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #277 = NameAndType        #378:#379     // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #278 = Utf8               org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n+  #279 = NameAndType        #150:#151     // getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n+  #280 = NameAndType        #380:#322     // setName:(Ljava/lang/String;)V\n+  #281 = Class              #381          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n+  #282 = NameAndType        #383:#384     // UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+  #283 = NameAndType        #385:#386     // setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+  #284 = NameAndType        #387:#377     // UCOM_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #285 = Utf8               org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n+  #286 = NameAndType        #388:#322     // setComment:(Ljava/lang/String;)V\n+  #287 = Class              #389          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource\n+  #288 = NameAndType        #383:#391     // UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n+  #289 = NameAndType        #392:#393     // setCommentSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n+  #290 = NameAndType        #394:#395     // getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #291 = Class              #396          // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+  #292 = NameAndType        #397:#398     // usesEncryption:()Z\n+  #293 = NameAndType        #399:#128     // UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #294 = NameAndType        #400:#314     // getCode:()I\n+  #295 = NameAndType        #401:#128     // IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #296 = Utf8               java/util/zip/ZipEntry\n+  #297 = NameAndType        #402:#128     // ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #298 = NameAndType        #403:#128     // BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #299 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+  #300 = NameAndType        #201:#204     // toDosTime:(J)[B\n+  #301 = NameAndType        #105:#350     // \"<init>\":([B)V\n+  #302 = NameAndType        #201:#206     // toDosTime:(J[BI)V\n+  #303 = NameAndType        #404:#206     // putLong:(J[BI)V\n+  #304 = Utf8               Can only convert non-negative integers between [0,255] to byte: [\n+  #305 = NameAndType        #317:#405     // append:(I)Ljava/lang/StringBuilder;\n+  #306 = Utf8               java/lang/Object\n+  #307 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n+  #308 = Utf8               org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField\n+  #309 = Utf8               java/time/LocalDateTime\n+  #310 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n+  #311 = Utf8               java/lang/String\n+  #312 = Utf8               java/math/BigInteger\n+  #313 = Utf8               bitLength\n+  #314 = Utf8               ()I\n+  #315 = Utf8               longValue\n+  #316 = Utf8               ()J\n+  #317 = Utf8               append\n+  #318 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #319 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #320 = Utf8               toString\n+  #321 = Utf8               ()Ljava/lang/String;\n+  #322 = Utf8               (Ljava/lang/String;)V\n+  #323 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n+  #324 = Utf8               Feature\n+  #325 = Utf8               InnerClasses\n+  #326 = Utf8               ENCRYPTION\n+  #327 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #328 = Utf8               (Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #329 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  #330 = Utf8               getMethod\n+  #331 = Utf8               getMethodByCode\n+  #332 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #333 = Utf8               METHOD\n+  #334 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #335 = Utf8               java/util/Arrays\n+  #336 = Utf8               copyOf\n+  #337 = Utf8               ([BI)[B\n+  #338 = Utf8               java/lang/System\n+  #339 = Utf8               arraycopy\n+  #340 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #341 = Utf8               getInstance\n+  #342 = Utf8               ()Ljava/util/Calendar;\n+  #343 = Utf8               set\n+  #344 = Utf8               (II)V\n+  #345 = Utf8               getTime\n+  #346 = Utf8               ()Ljava/util/Date;\n+  #347 = Utf8               java/util/Date\n+  #348 = Utf8               getValue\n+  #349 = Utf8               update\n+  #350 = Utf8               ([B)V\n+  #351 = Utf8               getNameCRC32\n+  #352 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #353 = Utf8               UTF8_ZIP_ENCODING\n+  #354 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #355 = Utf8               getUnicodeName\n+  #356 = Utf8               ()[B\n+  #357 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #358 = Utf8               decode\n+  #359 = Utf8               ([B)Ljava/lang/String;\n+  #360 = Utf8               java/time/Instant\n+  #361 = Utf8               ofEpochMilli\n+  #362 = Utf8               (J)Ljava/time/Instant;\n+  #363 = Utf8               java/time/ZoneId\n+  #364 = Utf8               systemDefault\n+  #365 = Utf8               ()Ljava/time/ZoneId;\n+  #366 = Utf8               ofInstant\n+  #367 = Utf8               (Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/LocalDateTime;\n+  #368 = Utf8               getYear\n+  #369 = Utf8               getMonthValue\n+  #370 = Utf8               getDayOfMonth\n+  #371 = Utf8               getHour\n+  #372 = Utf8               getMinute\n+  #373 = Utf8               getSecond\n+  #374 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #375 = Utf8               valueOf\n+  #376 = Utf8               UPATH_ID\n+  #377 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #378 = Utf8               getExtraField\n+  #379 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #380 = Utf8               setName\n+  #381 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n+  #382 = Utf8               NameSource\n+  #383 = Utf8               UNICODE_EXTRA_FIELD\n+  #384 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+  #385 = Utf8               setNameSource\n+  #386 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+  #387 = Utf8               UCOM_ID\n+  #388 = Utf8               setComment\n+  #389 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource\n+  #390 = Utf8               CommentSource\n+  #391 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n+  #392 = Utf8               setCommentSource\n+  #393 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n+  #394 = Utf8               getGeneralPurposeBit\n+  #395 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #396 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+  #397 = Utf8               usesEncryption\n+  #398 = Utf8               ()Z\n+  #399 = Utf8               UNSHRINKING\n+  #400 = Utf8               getCode\n+  #401 = Utf8               IMPLODING\n+  #402 = Utf8               ENHANCED_DEFLATED\n+  #403 = Utf8               BZIP2\n+  #404 = Utf8               putLong\n+  #405 = Utf8               (I)Ljava/lang/StringBuilder;\n {\n   private static final long DOSTIME_BEFORE_1980 = 2162688l;\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long 2162688l\n \n   private static final long UPPER_DOSTIME_BOUND = 4036608000000l;\n@@ -1100,21 +1093,23 @@\n        107: aload_0\n        108: getstatic     #83                 // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n        111: invokevirtual #84                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCommentSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n        114: return\n       LineNumberTable:\n         line 326: 0\n         line 327: 8\n+        line 328: 15\n         line 329: 25\n         line 331: 33\n         line 332: 38\n         line 333: 44\n         line 336: 51\n         line 337: 60\n         line 338: 69\n+        line 339: 77\n         line 340: 88\n         line 341: 91\n         line 342: 96\n         line 343: 101\n         line 344: 107\n         line 347: 114\n       LocalVariableTable:\n@@ -1353,10 +1348,10 @@\n       StackMapTable: number_of_entries = 3\n         frame_type = 11 /* same */\n         frame_type = 31 /* same */\n         frame_type = 9 /* same */\n }\n SourceFile: \"ZipUtil.java\"\n InnerClasses:\n-  public static #331= #232 of #18;        // Feature=class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature of class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-  public static final #389= #288 of #235; // NameSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  public static final #397= #294 of #235; // CommentSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  public static #324= #228 of #18;        // Feature=class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature of class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+  public static final #382= #281 of #231; // NameSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  public static final #390= #287 of #231; // CommentSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n"}]}
