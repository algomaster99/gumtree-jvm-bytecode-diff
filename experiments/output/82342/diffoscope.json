{"diffoscope-json-version": 1, "source1": "first/LZMACompressorInputStream.class", "source2": "second/LZMACompressorInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,112 +1,112 @@\n-  SHA-256 checksum 82a4482491f4ca825cf4e15253eb38c9884a7e1e4adaf122653d53fd8725cf39\n+  SHA-256 checksum b9a3c8c83a0b46abe0e2f37e2fb5d38eccfc775eece3fa63138d0a221c7c195b\n   Compiled from \"LZMACompressorInputStream.java\"\n public class org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream implements org.apache.commons.compress.utils.InputStreamStatistics\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #15                         // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream\n-  super_class: #2                         // org/apache/commons/compress/compressors/CompressorInputStream\n+  this_class: #1                          // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream\n+  super_class: #3                         // org/apache/commons/compress/compressors/CompressorInputStream\n   interfaces: 1, fields: 2, methods: 9, attributes: 1\n Constant pool:\n-    #1 = Methodref          #2.#3         // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n-    #2 = Class              #4            // org/apache/commons/compress/compressors/CompressorInputStream\n-    #3 = NameAndType        #5:#6         // \"<init>\":()V\n+    #1 = Class              #2            // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream\n+    #2 = Utf8               org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream\n+    #3 = Class              #4            // org/apache/commons/compress/compressors/CompressorInputStream\n     #4 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n-    #5 = Utf8               <init>\n-    #6 = Utf8               ()V\n-    #7 = Class              #8            // org/tukaani/xz/LZMAInputStream\n-    #8 = Utf8               org/tukaani/xz/LZMAInputStream\n-    #9 = Class              #10           // org/apache/commons/compress/utils/CountingInputStream\n-   #10 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n-   #11 = Methodref          #9.#12        // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #12 = NameAndType        #5:#13        // \"<init>\":(Ljava/io/InputStream;)V\n-   #13 = Utf8               (Ljava/io/InputStream;)V\n-   #14 = Fieldref           #15.#16       // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-   #15 = Class              #17           // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream\n-   #16 = NameAndType        #18:#19       // countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-   #17 = Utf8               org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream\n-   #18 = Utf8               countingStream\n-   #19 = Utf8               Lorg/apache/commons/compress/utils/CountingInputStream;\n-   #20 = Methodref          #7.#21        // org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-   #21 = NameAndType        #5:#22        // \"<init>\":(Ljava/io/InputStream;I)V\n-   #22 = Utf8               (Ljava/io/InputStream;I)V\n-   #23 = Fieldref           #15.#24       // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.in:Ljava/io/InputStream;\n-   #24 = NameAndType        #25:#26       // in:Ljava/io/InputStream;\n-   #25 = Utf8               in\n-   #26 = Utf8               Ljava/io/InputStream;\n-   #27 = Class              #28           // org/tukaani/xz/MemoryLimitException\n-   #28 = Utf8               org/tukaani/xz/MemoryLimitException\n-   #29 = Class              #30           // org/apache/commons/compress/MemoryLimitException\n-   #30 = Utf8               org/apache/commons/compress/MemoryLimitException\n-   #31 = Methodref          #27.#32       // org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n-   #32 = NameAndType        #33:#34       // getMemoryNeeded:()I\n-   #33 = Utf8               getMemoryNeeded\n-   #34 = Utf8               ()I\n-   #35 = Methodref          #27.#36       // org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n-   #36 = NameAndType        #37:#34       // getMemoryLimit:()I\n-   #37 = Utf8               getMemoryLimit\n-   #38 = Methodref          #29.#39       // org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n-   #39 = NameAndType        #5:#40        // \"<init>\":(JILjava/lang/Exception;)V\n-   #40 = Utf8               (JILjava/lang/Exception;)V\n-   #41 = Methodref          #42.#43       // java/io/InputStream.available:()I\n-   #42 = Class              #44           // java/io/InputStream\n-   #43 = NameAndType        #45:#34       // available:()I\n-   #44 = Utf8               java/io/InputStream\n-   #45 = Utf8               available\n-   #46 = Methodref          #42.#47       // java/io/InputStream.close:()V\n-   #47 = NameAndType        #48:#6        // close:()V\n-   #48 = Utf8               close\n-   #49 = Methodref          #9.#50        // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n-   #50 = NameAndType        #51:#52       // getBytesRead:()J\n-   #51 = Utf8               getBytesRead\n-   #52 = Utf8               ()J\n-   #53 = Methodref          #42.#54       // java/io/InputStream.read:()I\n-   #54 = NameAndType        #55:#34       // read:()I\n-   #55 = Utf8               read\n-   #56 = Methodref          #15.#57       // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.count:(I)V\n-   #57 = NameAndType        #58:#59       // count:(I)V\n-   #58 = Utf8               count\n-   #59 = Utf8               (I)V\n-   #60 = Methodref          #42.#61       // java/io/InputStream.read:([BII)I\n-   #61 = NameAndType        #55:#62       // read:([BII)I\n-   #62 = Utf8               ([BII)I\n-   #63 = Methodref          #64.#65       // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n-   #64 = Class              #66           // org/apache/commons/compress/utils/IOUtils\n-   #65 = NameAndType        #67:#68       // skip:(Ljava/io/InputStream;J)J\n-   #66 = Utf8               org/apache/commons/compress/utils/IOUtils\n-   #67 = Utf8               skip\n-   #68 = Utf8               (Ljava/io/InputStream;J)J\n-   #69 = Class              #70           // org/apache/commons/compress/utils/InputStreamStatistics\n-   #70 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n-   #71 = Utf8               matches\n-   #72 = Utf8               ([BI)Z\n-   #73 = Utf8               Code\n-   #74 = Utf8               LineNumberTable\n-   #75 = Utf8               LocalVariableTable\n-   #76 = Utf8               signature\n-   #77 = Utf8               [B\n-   #78 = Utf8               length\n-   #79 = Utf8               I\n-   #80 = Utf8               StackMapTable\n-   #81 = Utf8               this\n-   #82 = Utf8               Lorg/apache/commons/compress/compressors/lzma/LZMACompressorInputStream;\n-   #83 = Utf8               inputStream\n-   #84 = Utf8               Exceptions\n-   #85 = Class              #86           // java/io/IOException\n-   #86 = Utf8               java/io/IOException\n-   #87 = Utf8               e\n-   #88 = Utf8               Lorg/tukaani/xz/MemoryLimitException;\n-   #89 = Utf8               memoryLimitInKb\n-   #90 = Utf8               getCompressedCount\n-   #91 = Utf8               ret\n-   #92 = Utf8               buf\n-   #93 = Utf8               off\n-   #94 = Utf8               len\n-   #95 = Utf8               (J)J\n+    #5 = Class              #6            // org/apache/commons/compress/utils/InputStreamStatistics\n+    #6 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n+    #7 = Utf8               countingStream\n+    #8 = Utf8               Lorg/apache/commons/compress/utils/CountingInputStream;\n+    #9 = Utf8               in\n+   #10 = Utf8               Ljava/io/InputStream;\n+   #11 = Utf8               matches\n+   #12 = Utf8               ([BI)Z\n+   #13 = Utf8               Code\n+   #14 = Utf8               LineNumberTable\n+   #15 = Utf8               LocalVariableTable\n+   #16 = Utf8               signature\n+   #17 = Utf8               [B\n+   #18 = Utf8               length\n+   #19 = Utf8               I\n+   #20 = Utf8               StackMapTable\n+   #21 = Utf8               <init>\n+   #22 = Utf8               (Ljava/io/InputStream;)V\n+   #23 = Utf8               Exceptions\n+   #24 = Class              #25           // java/io/IOException\n+   #25 = Utf8               java/io/IOException\n+   #26 = Methodref          #3.#27        // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+   #27 = NameAndType        #21:#28       // \"<init>\":()V\n+   #28 = Utf8               ()V\n+   #29 = Class              #30           // org/tukaani/xz/LZMAInputStream\n+   #30 = Utf8               org/tukaani/xz/LZMAInputStream\n+   #31 = Class              #32           // org/apache/commons/compress/utils/CountingInputStream\n+   #32 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n+   #33 = Methodref          #31.#34       // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #34 = NameAndType        #21:#22       // \"<init>\":(Ljava/io/InputStream;)V\n+   #35 = Fieldref           #1.#36        // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+   #36 = NameAndType        #7:#8         // countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+   #37 = Methodref          #29.#38       // org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+   #38 = NameAndType        #21:#39       // \"<init>\":(Ljava/io/InputStream;I)V\n+   #39 = Utf8               (Ljava/io/InputStream;I)V\n+   #40 = Fieldref           #1.#41        // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.in:Ljava/io/InputStream;\n+   #41 = NameAndType        #9:#10        // in:Ljava/io/InputStream;\n+   #42 = Utf8               this\n+   #43 = Utf8               Lorg/apache/commons/compress/compressors/lzma/LZMACompressorInputStream;\n+   #44 = Utf8               inputStream\n+   #45 = Class              #46           // org/apache/commons/compress/MemoryLimitException\n+   #46 = Utf8               org/apache/commons/compress/MemoryLimitException\n+   #47 = Methodref          #48.#50       // org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n+   #48 = Class              #49           // org/tukaani/xz/MemoryLimitException\n+   #49 = Utf8               org/tukaani/xz/MemoryLimitException\n+   #50 = NameAndType        #51:#52       // getMemoryNeeded:()I\n+   #51 = Utf8               getMemoryNeeded\n+   #52 = Utf8               ()I\n+   #53 = Methodref          #48.#54       // org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n+   #54 = NameAndType        #55:#52       // getMemoryLimit:()I\n+   #55 = Utf8               getMemoryLimit\n+   #56 = Methodref          #45.#57       // org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n+   #57 = NameAndType        #21:#58       // \"<init>\":(JILjava/lang/Exception;)V\n+   #58 = Utf8               (JILjava/lang/Exception;)V\n+   #59 = Utf8               memoryLimitInKb\n+   #60 = Utf8               e\n+   #61 = Utf8               Lorg/tukaani/xz/MemoryLimitException;\n+   #62 = Class              #63           // java/io/InputStream\n+   #63 = Utf8               java/io/InputStream\n+   #64 = Utf8               available\n+   #65 = Methodref          #62.#66       // java/io/InputStream.available:()I\n+   #66 = NameAndType        #64:#52       // available:()I\n+   #67 = Utf8               close\n+   #68 = Methodref          #62.#69       // java/io/InputStream.close:()V\n+   #69 = NameAndType        #67:#28       // close:()V\n+   #70 = Utf8               getCompressedCount\n+   #71 = Utf8               ()J\n+   #72 = Methodref          #31.#73       // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+   #73 = NameAndType        #74:#71       // getBytesRead:()J\n+   #74 = Utf8               getBytesRead\n+   #75 = Utf8               read\n+   #76 = Methodref          #62.#77       // java/io/InputStream.read:()I\n+   #77 = NameAndType        #75:#52       // read:()I\n+   #78 = Methodref          #1.#79        // org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.count:(I)V\n+   #79 = NameAndType        #80:#81       // count:(I)V\n+   #80 = Utf8               count\n+   #81 = Utf8               (I)V\n+   #82 = Utf8               ret\n+   #83 = Utf8               ([BII)I\n+   #84 = Methodref          #62.#85       // java/io/InputStream.read:([BII)I\n+   #85 = NameAndType        #75:#83       // read:([BII)I\n+   #86 = Utf8               buf\n+   #87 = Utf8               off\n+   #88 = Utf8               len\n+   #89 = Utf8               skip\n+   #90 = Utf8               (J)J\n+   #91 = Methodref          #92.#94       // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+   #92 = Class              #93           // org/apache/commons/compress/utils/IOUtils\n+   #93 = Utf8               org/apache/commons/compress/utils/IOUtils\n+   #94 = NameAndType        #89:#95       // skip:(Ljava/io/InputStream;J)J\n+   #95 = Utf8               (Ljava/io/InputStream;J)J\n    #96 = Utf8               n\n    #97 = Utf8               J\n    #98 = Utf8               SourceFile\n    #99 = Utf8               LZMACompressorInputStream.java\n {\n   private final org.apache.commons.compress.utils.CountingInputStream countingStream;\n     descriptor: Lorg/apache/commons/compress/utils/CountingInputStream;\n@@ -118,203 +118,205 @@\n \n   public static boolean matches(byte[], int);\n     descriptor: ([BI)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n-         1: ifnull        33\n+         1: ifnull        31\n          4: iload_1\n          5: iconst_3\n-         6: if_icmplt     33\n+         6: if_icmplt     31\n          9: aload_0\n         10: iconst_0\n         11: baload\n         12: bipush        93\n-        14: if_icmpne     33\n+        14: if_icmpne     31\n         17: aload_0\n         18: iconst_1\n         19: baload\n-        20: ifne          33\n+        20: ifne          31\n         23: aload_0\n         24: iconst_2\n         25: baload\n-        26: ifne          33\n+        26: ifne          31\n         29: iconst_1\n-        30: goto          34\n-        33: iconst_0\n-        34: ireturn\n+        30: ireturn\n+        31: iconst_0\n+        32: ireturn\n       LineNumberTable:\n         line 50: 0\n+        line 51: 9\n+        line 52: 23\n+        line 50: 29\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      35     0 signature   [B\n-            0      35     1 length   I\n-      StackMapTable: number_of_entries = 2\n-        frame_type = 33 /* same */\n-        frame_type = 64 /* same_locals_1_stack_item */\n-          stack = [ int ]\n+            0      33     0 signature   [B\n+            0      33     1 length   I\n+      StackMapTable: number_of_entries = 1\n+        frame_type = 31 /* same */\n \n   public org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream(java.io.InputStream) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=7, locals=2, args_size=2\n          0: aload_0\n-         1: invokespecial #1                  // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+         1: invokespecial #26                 // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n          4: aload_0\n-         5: new           #7                  // class org/tukaani/xz/LZMAInputStream\n+         5: new           #29                 // class org/tukaani/xz/LZMAInputStream\n          8: dup\n          9: aload_0\n-        10: new           #9                  // class org/apache/commons/compress/utils/CountingInputStream\n+        10: new           #31                 // class org/apache/commons/compress/utils/CountingInputStream\n         13: dup\n         14: aload_1\n-        15: invokespecial #11                 // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+        15: invokespecial #33                 // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n         18: dup_x1\n-        19: putfield      #14                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        19: putfield      #35                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n         22: iconst_m1\n-        23: invokespecial #20                 // Method org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-        26: putfield      #23                 // Field in:Ljava/io/InputStream;\n+        23: invokespecial #37                 // Method org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+        26: putfield      #40                 // Field in:Ljava/io/InputStream;\n         29: return\n       LineNumberTable:\n-        line 71: 0\n+        line 70: 0\n         line 72: 4\n         line 73: 29\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      30     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorInputStream;\n             0      30     1 inputStream   Ljava/io/InputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream(java.io.InputStream, int) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;I)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=7, locals=4, args_size=3\n          0: aload_0\n-         1: invokespecial #1                  // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+         1: invokespecial #26                 // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n          4: aload_0\n-         5: new           #7                  // class org/tukaani/xz/LZMAInputStream\n+         5: new           #29                 // class org/tukaani/xz/LZMAInputStream\n          8: dup\n          9: aload_0\n-        10: new           #9                  // class org/apache/commons/compress/utils/CountingInputStream\n+        10: new           #31                 // class org/apache/commons/compress/utils/CountingInputStream\n         13: dup\n         14: aload_1\n-        15: invokespecial #11                 // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+        15: invokespecial #33                 // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n         18: dup_x1\n-        19: putfield      #14                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        19: putfield      #35                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n         22: iload_2\n-        23: invokespecial #20                 // Method org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-        26: putfield      #23                 // Field in:Ljava/io/InputStream;\n+        23: invokespecial #37                 // Method org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+        26: putfield      #40                 // Field in:Ljava/io/InputStream;\n         29: goto          51\n         32: astore_3\n-        33: new           #29                 // class org/apache/commons/compress/MemoryLimitException\n+        33: new           #45                 // class org/apache/commons/compress/MemoryLimitException\n         36: dup\n         37: aload_3\n-        38: invokevirtual #31                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n+        38: invokevirtual #47                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n         41: i2l\n         42: aload_3\n-        43: invokevirtual #35                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n+        43: invokevirtual #53                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n         46: aload_3\n-        47: invokespecial #38                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n+        47: invokespecial #56                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n         50: athrow\n         51: return\n       Exception table:\n          from    to  target type\n              4    29    32   Class org/tukaani/xz/MemoryLimitException\n       LineNumberTable:\n-        line 93: 0\n+        line 92: 0\n         line 95: 4\n-        line 99: 29\n-        line 96: 32\n+        line 96: 29\n         line 98: 33\n         line 100: 51\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           33      18     3     e   Lorg/tukaani/xz/MemoryLimitException;\n             0      52     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorInputStream;\n             0      52     1 inputStream   Ljava/io/InputStream;\n             0      52     2 memoryLimitInKb   I\n+           33      18     3     e   Lorg/tukaani/xz/MemoryLimitException;\n       StackMapTable: number_of_entries = 2\n         frame_type = 255 /* full_frame */\n           offset_delta = 32\n           locals = [ class org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream, class java/io/InputStream, int ]\n           stack = [ class org/tukaani/xz/MemoryLimitException ]\n         frame_type = 18 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   public int available() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #23                 // Field in:Ljava/io/InputStream;\n-         4: invokevirtual #41                 // Method java/io/InputStream.available:()I\n+         1: getfield      #40                 // Field in:Ljava/io/InputStream;\n+         4: invokevirtual #65                 // Method java/io/InputStream.available:()I\n          7: ireturn\n       LineNumberTable:\n         line 105: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorInputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #23                 // Field in:Ljava/io/InputStream;\n-         4: invokevirtual #46                 // Method java/io/InputStream.close:()V\n+         1: getfield      #40                 // Field in:Ljava/io/InputStream;\n+         4: invokevirtual #68                 // Method java/io/InputStream.close:()V\n          7: return\n       LineNumberTable:\n         line 111: 0\n         line 112: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorInputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public long getCompressedCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #14                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-         4: invokevirtual #49                 // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+         1: getfield      #35                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+         4: invokevirtual #72                 // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n          7: lreturn\n       LineNumberTable:\n         line 119: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorInputStream;\n \n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #23                 // Field in:Ljava/io/InputStream;\n-         4: invokevirtual #53                 // Method java/io/InputStream.read:()I\n+         1: getfield      #40                 // Field in:Ljava/io/InputStream;\n+         4: invokevirtual #76                 // Method java/io/InputStream.read:()I\n          7: istore_1\n          8: aload_0\n          9: iload_1\n         10: iconst_m1\n         11: if_icmpne     18\n         14: iconst_0\n         15: goto          19\n         18: iconst_1\n-        19: invokevirtual #56                 // Method count:(I)V\n+        19: invokevirtual #78                 // Method count:(I)V\n         22: iload_1\n         23: ireturn\n       LineNumberTable:\n         line 125: 0\n         line 126: 8\n         line 127: 22\n       LocalVariableTable:\n@@ -326,61 +328,59 @@\n           offset_delta = 18\n           locals = [ class org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream, int ]\n           stack = [ class org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 0\n           locals = [ class org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream, int ]\n           stack = [ class org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream, int ]\n-    Exceptions:\n-      throws java.io.IOException\n \n   public int read(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=5, args_size=4\n          0: aload_0\n-         1: getfield      #23                 // Field in:Ljava/io/InputStream;\n+         1: getfield      #40                 // Field in:Ljava/io/InputStream;\n          4: aload_1\n          5: iload_2\n          6: iload_3\n-         7: invokevirtual #60                 // Method java/io/InputStream.read:([BII)I\n+         7: invokevirtual #84                 // Method java/io/InputStream.read:([BII)I\n         10: istore        4\n         12: aload_0\n         13: iload         4\n-        15: invokevirtual #56                 // Method count:(I)V\n+        15: invokevirtual #78                 // Method count:(I)V\n         18: iload         4\n         20: ireturn\n       LineNumberTable:\n         line 133: 0\n         line 134: 12\n         line 135: 18\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      21     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorInputStream;\n             0      21     1   buf   [B\n             0      21     2   off   I\n             0      21     3   len   I\n            12       9     4   ret   I\n-    Exceptions:\n-      throws java.io.IOException\n \n   public long skip(long) throws java.io.IOException;\n     descriptor: (J)J\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_0\n-         1: getfield      #23                 // Field in:Ljava/io/InputStream;\n+         1: getfield      #40                 // Field in:Ljava/io/InputStream;\n          4: lload_1\n-         5: invokestatic  #63                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+         5: invokestatic  #91                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n          8: lreturn\n       LineNumberTable:\n         line 141: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/compressors/lzma/LZMACompressorInputStream;\n             0       9     1     n   J\n-    Exceptions:\n-      throws java.io.IOException\n }\n SourceFile: \"LZMACompressorInputStream.java\"\n"}]}
