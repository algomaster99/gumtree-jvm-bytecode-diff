{"diffoscope-json-version": 1, "source1": "first/SuppressionsStringPrinter.class", "source2": "second/SuppressionsStringPrinter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,17 +1,16 @@\n \n package com.puppycrawl.tools.checkstyle;\n \n-import java.util.List;\n import java.util.stream.Collector;\n import java.util.stream.Collectors;\n import com.puppycrawl.tools.checkstyle.xpath.XpathQueryGenerator;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n import com.puppycrawl.tools.checkstyle.api.CheckstyleException;\n import java.io.IOException;\n-import com.puppycrawl.tools.checkstyle.api.DetailAST;\n import java.util.regex.Matcher;\n import com.puppycrawl.tools.checkstyle.api.FileText;\n import java.nio.charset.StandardCharsets;\n import java.util.Locale;\n import java.io.File;\n import java.util.regex.Pattern;\n \n@@ -19,31 +18,25 @@\n {\n     private static final Pattern VALID_SUPPRESSION_LINE_COLUMN_NUMBER_REGEX;\n     private static final String LINE_SEPARATOR;\n     \n     private SuppressionsStringPrinter() {\n     }\n     \n-    public static String printSuppressions(final File file, final String suppressionLineColumnNumber, final int tabWidth) throws IOException, CheckstyleException {\n-        final Matcher matcher = SuppressionsStringPrinter.VALID_SUPPRESSION_LINE_COLUMN_NUMBER_REGEX.matcher(suppressionLineColumnNumber);\n+    public static String printSuppressions(final File file, final String input, final int n) throws IOException, CheckstyleException {\n+        final Matcher matcher = SuppressionsStringPrinter.VALID_SUPPRESSION_LINE_COLUMN_NUMBER_REGEX.matcher(input);\n         if (!matcher.matches()) {\n-            final String exceptionMsg = String.format(Locale.ROOT, \"%s does not match valid format 'line:column'.\", suppressionLineColumnNumber);\n-            throw new IllegalStateException(exceptionMsg);\n+            throw new IllegalStateException(String.format(Locale.ROOT, \"%s does not match valid format 'line:column'.\", input));\n         }\n         final FileText fileText = new FileText(file.getAbsoluteFile(), System.getProperty(\"file.encoding\", StandardCharsets.UTF_8.name()));\n-        final DetailAST detailAST = JavaParser.parseFileText(fileText, JavaParser.Options.WITH_COMMENTS);\n-        final int lineNumber = Integer.parseInt(matcher.group(1));\n-        final int columnNumber = Integer.parseInt(matcher.group(2));\n-        return generate(fileText, detailAST, lineNumber, columnNumber, tabWidth);\n+        return generate(fileText, JavaParser.parseFileText(fileText, JavaParser.Options.WITH_COMMENTS), Integer.parseInt(matcher.group(1)), Integer.parseInt(matcher.group(2)), n);\n     }\n     \n-    private static String generate(final FileText fileText, final DetailAST detailAST, final int lineNumber, final int columnNumber, final int tabWidth) {\n-        final XpathQueryGenerator queryGenerator = new XpathQueryGenerator(detailAST, lineNumber, columnNumber, fileText, tabWidth);\n-        final List<String> suppressions = queryGenerator.generate();\n-        return suppressions.stream().collect((Collector<? super Object, ?, String>)Collectors.joining(SuppressionsStringPrinter.LINE_SEPARATOR, \"\", SuppressionsStringPrinter.LINE_SEPARATOR));\n+    private static String generate(final FileText fileText, final DetailAST detailAST, final int n, final int n2, final int n3) {\n+        return (String)new XpathQueryGenerator(detailAST, n, n2, fileText, n3).generate().stream().collect(Collectors.joining(SuppressionsStringPrinter.LINE_SEPARATOR, \"\", SuppressionsStringPrinter.LINE_SEPARATOR));\n     }\n     \n     static {\n         VALID_SUPPRESSION_LINE_COLUMN_NUMBER_REGEX = Pattern.compile(\"^(\\\\d+):(\\\\d+)$\");\n         LINE_SEPARATOR = System.getProperty(\"line.separator\");\n     }\n }\n"}]}
