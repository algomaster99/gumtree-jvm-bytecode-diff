{"diffoscope-json-version": 1, "source1": "first/TFTP.class", "source2": "second/TFTP.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,50 +18,50 @@\n     public static final int DEFAULT_PORT = 69;\n     static final int PACKET_SIZE = 516;\n     private byte[] receiveBuffer;\n     private DatagramPacket receiveDatagram;\n     private DatagramPacket sendDatagram;\n     byte[] sendBuffer;\n     \n-    public static final String getModeName(final int mode) {\n-        return TFTPRequestPacket.modeStrings[mode];\n+    public static final String getModeName(final int n) {\n+        return TFTPRequestPacket.modeStrings[n];\n     }\n     \n     public TFTP() {\n         this.setDefaultTimeout(5000);\n         this.receiveBuffer = null;\n         this.receiveDatagram = null;\n     }\n     \n     public final void discardPackets() throws IOException {\n-        final DatagramPacket datagram = new DatagramPacket(new byte[516], 516);\n-        final int to = this.getSoTimeout();\n+        final DatagramPacket p = new DatagramPacket(new byte[516], 516);\n+        final int soTimeout = this.getSoTimeout();\n         this.setSoTimeout(1);\n         try {\n             while (true) {\n-                this._socket_.receive(datagram);\n+                this._socket_.receive(p);\n             }\n         }\n         catch (final SocketException | InterruptedIOException ex) {\n-            this.setSoTimeout(to);\n+            this.setSoTimeout(soTimeout);\n         }\n     }\n     \n     public final TFTPPacket bufferedReceive() throws IOException, InterruptedIOException, SocketException, TFTPPacketException {\n         this.receiveDatagram.setData(this.receiveBuffer);\n         this.receiveDatagram.setLength(this.receiveBuffer.length);\n         this._socket_.receive(this.receiveDatagram);\n-        final TFTPPacket newTFTPPacket = TFTPPacket.newTFTPPacket(this.receiveDatagram);\n-        this.trace(\"<\", newTFTPPacket);\n-        return newTFTPPacket;\n+        final TFTPPacket tftpPacket = TFTPPacket.newTFTPPacket(this.receiveDatagram);\n+        this.trace(\"<\", tftpPacket);\n+        return tftpPacket;\n     }\n     \n-    public final void bufferedSend(final TFTPPacket packet) throws IOException {\n-        this.trace(\">\", packet);\n-        this._socket_.send(packet.newDatagram(this.sendDatagram, this.sendBuffer));\n+    public final void bufferedSend(final TFTPPacket tftpPacket) throws IOException {\n+        this.trace(\">\", tftpPacket);\n+        this._socket_.send(tftpPacket.newDatagram(this.sendDatagram, this.sendBuffer));\n     }\n     \n     public final void beginBufferedOps() {\n         this.receiveBuffer = new byte[516];\n         this.receiveDatagram = new DatagramPacket(this.receiveBuffer, this.receiveBuffer.length);\n         this.sendBuffer = new byte[516];\n         this.sendDatagram = new DatagramPacket(this.sendBuffer, this.sendBuffer.length);\n@@ -70,23 +70,23 @@\n     public final void endBufferedOps() {\n         this.receiveBuffer = null;\n         this.receiveDatagram = null;\n         this.sendBuffer = null;\n         this.sendDatagram = null;\n     }\n     \n-    public final void send(final TFTPPacket packet) throws IOException {\n-        this.trace(\">\", packet);\n-        this._socket_.send(packet.newDatagram());\n+    public final void send(final TFTPPacket tftpPacket) throws IOException {\n+        this.trace(\">\", tftpPacket);\n+        this._socket_.send(tftpPacket.newDatagram());\n     }\n     \n     public final TFTPPacket receive() throws IOException, InterruptedIOException, SocketException, TFTPPacketException {\n-        final DatagramPacket packet = new DatagramPacket(new byte[516], 516);\n-        this._socket_.receive(packet);\n-        final TFTPPacket newTFTPPacket = TFTPPacket.newTFTPPacket(packet);\n-        this.trace(\"<\", newTFTPPacket);\n-        return newTFTPPacket;\n+        final DatagramPacket p = new DatagramPacket(new byte[516], 516);\n+        this._socket_.receive(p);\n+        final TFTPPacket tftpPacket = TFTPPacket.newTFTPPacket(p);\n+        this.trace(\"<\", tftpPacket);\n+        return tftpPacket;\n     }\n     \n-    protected void trace(final String direction, final TFTPPacket packet) {\n+    protected void trace(final String s, final TFTPPacket tftpPacket) {\n     }\n }\n"}]}
