{"diffoscope-json-version": 1, "source1": "first/CPMember.class", "source2": "second/CPMember.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,72 +12,65 @@\n     List<Attribute> attributes;\n     short flags;\n     CPUTF8 name;\n     transient int nameIndex;\n     protected final CPUTF8 descriptor;\n     transient int descriptorIndex;\n     \n-    public CPMember(final CPUTF8 name, final CPUTF8 descriptor, final long flags, final List<Attribute> attributes) {\n-        this.name = Objects.requireNonNull(name, \"name\");\n-        this.descriptor = Objects.requireNonNull(descriptor, \"descriptor\");\n-        this.flags = (short)flags;\n-        this.attributes = ((attributes == null) ? Collections.EMPTY_LIST : attributes);\n-    }\n-    \n-    protected void doWrite(final DataOutputStream dos) throws IOException {\n-        dos.writeShort(this.flags);\n-        dos.writeShort(this.nameIndex);\n-        dos.writeShort(this.descriptorIndex);\n-        final int attributeCount = this.attributes.size();\n-        dos.writeShort(attributeCount);\n-        for (int i = 0; i < attributeCount; ++i) {\n-            final Attribute attribute = (Attribute)this.attributes.get(i);\n-            attribute.doWrite(dos);\n+    public CPMember(final CPUTF8 obj, final CPUTF8 obj2, final long n, final List<Attribute> list) {\n+        this.name = Objects.requireNonNull(obj, \"name\");\n+        this.descriptor = Objects.requireNonNull(obj2, \"descriptor\");\n+        this.flags = (short)n;\n+        this.attributes = ((list == null) ? Collections.EMPTY_LIST : list);\n+    }\n+    \n+    protected void doWrite(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.flags);\n+        dataOutputStream.writeShort(this.nameIndex);\n+        dataOutputStream.writeShort(this.descriptorIndex);\n+        final int size = this.attributes.size();\n+        dataOutputStream.writeShort(size);\n+        for (int i = 0; i < size; ++i) {\n+            ((Attribute)this.attributes.get(i)).doWrite(dataOutputStream);\n         }\n     }\n     \n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n             return true;\n         }\n-        if (obj == null) {\n+        if (o == null) {\n             return false;\n         }\n-        if (this.getClass() != obj.getClass()) {\n+        if (this.getClass() != o.getClass()) {\n             return false;\n         }\n-        final CPMember other = (CPMember)obj;\n-        return this.attributes.equals(other.attributes) && this.descriptor.equals((Object)other.descriptor) && this.flags == other.flags && this.name.equals((Object)other.name);\n+        final CPMember cpMember = (CPMember)o;\n+        return this.attributes.equals(cpMember.attributes) && this.descriptor.equals((Object)cpMember.descriptor) && this.flags == cpMember.flags && this.name.equals((Object)cpMember.name);\n     }\n     \n     protected ClassFileEntry[] getNestedClassFileEntries() {\n-        final int attributeCount = this.attributes.size();\n-        final ClassFileEntry[] entries = new ClassFileEntry[attributeCount + 2];\n-        entries[0] = (ClassFileEntry)this.name;\n-        entries[1] = (ClassFileEntry)this.descriptor;\n-        for (int i = 0; i < attributeCount; ++i) {\n-            entries[i + 2] = (ClassFileEntry)this.attributes.get(i);\n+        final int size = this.attributes.size();\n+        final ClassFileEntry[] array = new ClassFileEntry[size + 2];\n+        array[0] = (ClassFileEntry)this.name;\n+        array[1] = (ClassFileEntry)this.descriptor;\n+        for (int i = 0; i < size; ++i) {\n+            array[i + 2] = (ClassFileEntry)this.attributes.get(i);\n         }\n-        return entries;\n+        return array;\n     }\n     \n     public int hashCode() {\n-        final int PRIME = 31;\n-        int result = 1;\n-        result = 31 * result + this.attributes.hashCode();\n-        result = 31 * result + this.descriptor.hashCode();\n-        result = 31 * result + this.flags;\n-        result = 31 * result + this.name.hashCode();\n-        return result;\n+        return 31 * (31 * (31 * (31 * 1 + this.attributes.hashCode()) + this.descriptor.hashCode()) + this.flags) + this.name.hashCode();\n     }\n     \n-    protected void resolve(final ClassConstantPool pool) {\n-        super.resolve(pool);\n-        this.nameIndex = pool.indexOf((ClassFileEntry)this.name);\n-        this.descriptorIndex = pool.indexOf((ClassFileEntry)this.descriptor);\n-        this.attributes.forEach(attribute -> attribute.resolve(pool));\n+    protected void resolve(final ClassConstantPool classConstantPool) {\n+        super.resolve(classConstantPool);\n+        this.nameIndex = classConstantPool.indexOf((ClassFileEntry)this.name);\n+        this.descriptorIndex = classConstantPool.indexOf((ClassFileEntry)this.descriptor);\n+        this.attributes.forEach(attribute -> attribute.resolve(classConstantPool2));\n     }\n     \n     public String toString() {\n         return \"CPMember: \" + this.name + \"(\" + this.descriptor + \")\";\n     }\n }\n"}]}
