{"diffoscope-json-version": 1, "source1": "first/XMLLogger.class", "source2": "second/XMLLogger.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -21,14 +21,18 @@\n     private static final int BASE_16 = 16;\n     private static final String[] ENTITIES;\n     private final boolean closeStream;\n     private final Object writerLock;\n     private final Map<String, XMLLogger.FileMessages> fileMessages;\n     private final PrintWriter writer;\n     \n+    static {\n+        ENTITIES = new String[] { \"gt\", \"amp\", \"lt\", \"apos\", \"quot\" };\n+    }\n+    \n     public XMLLogger(final OutputStream outputStream, final AutomaticBean.OutputStreamOptions outputStreamOptions) {\n         this(outputStream, AbstractAutomaticBean.OutputStreamOptions.valueOf(outputStreamOptions.name()));\n     }\n     \n     public XMLLogger(final OutputStream outputStream, final AbstractAutomaticBean.OutputStreamOptions outputStreamOptions) {\n         this.writerLock = new Object();\n         this.fileMessages = new ConcurrentHashMap<String, XMLLogger.FileMessages>();\n@@ -63,14 +67,15 @@\n     }\n     \n     public void fileFinished(final AuditEvent event) {\n         final String fileName = event.getFileName();\n         final XMLLogger.FileMessages messages = (XMLLogger.FileMessages)this.fileMessages.get(fileName);\n         synchronized (this.writerLock) {\n             this.writeFileMessages(fileName, messages);\n+            monitorexit(this.writerLock);\n         }\n         this.fileMessages.remove(fileName);\n     }\n     \n     private void writeFileMessages(final String fileName, final XMLLogger.FileMessages messages) {\n         this.writeFileOpeningTag(fileName);\n         if (messages != null) {\n@@ -94,30 +99,30 @@\n     \n     public void addError(final AuditEvent event) {\n         if (event.getSeverityLevel() != SeverityLevel.IGNORE) {\n             final String fileName = event.getFileName();\n             if (fileName == null || !this.fileMessages.containsKey(fileName)) {\n                 synchronized (this.writerLock) {\n                     this.writeFileError(event);\n+                    monitorexit(this.writerLock);\n+                    return;\n                 }\n             }\n-            else {\n-                final XMLLogger.FileMessages messages = (XMLLogger.FileMessages)this.fileMessages.get(fileName);\n-                messages.addError(event);\n-            }\n+            final XMLLogger.FileMessages messages = (XMLLogger.FileMessages)this.fileMessages.get(fileName);\n+            messages.addError(event);\n         }\n     }\n     \n     private void writeFileError(final AuditEvent event) {\n-        this.writer.print(\"<error line=\\\"\" + event.getLine());\n+        this.writer.print(\"<error line=\\\"\" + event.getLine() + \"\\\"\");\n         if (event.getColumn() > 0) {\n-            this.writer.print(\" column=\\\"\" + event.getColumn());\n+            this.writer.print(\" column=\\\"\" + event.getColumn() + \"\\\"\");\n         }\n-        this.writer.print(\" severity=\\\"\" + event.getSeverityLevel().getName());\n-        this.writer.print(\" message=\\\"\" + encode(event.getMessage()));\n+        this.writer.print(\" severity=\\\"\" + event.getSeverityLevel().getName() + \"\\\"\");\n+        this.writer.print(\" message=\\\"\" + encode(event.getMessage()) + \"\\\"\");\n         this.writer.print(\" source=\\\"\");\n         if (event.getModuleId() == null) {\n             this.writer.print(encode(event.getSourceName()));\n         }\n         else {\n             this.writer.print(encode(event.getModuleId()));\n         }\n@@ -125,20 +130,20 @@\n     }\n     \n     public void addException(final AuditEvent event, final Throwable throwable) {\n         final String fileName = event.getFileName();\n         if (fileName == null || !this.fileMessages.containsKey(fileName)) {\n             synchronized (this.writerLock) {\n                 this.writeException(throwable);\n+                monitorexit(this.writerLock);\n+                return;\n             }\n         }\n-        else {\n-            final XMLLogger.FileMessages messages = (XMLLogger.FileMessages)this.fileMessages.get(fileName);\n-            messages.addException(throwable);\n-        }\n+        final XMLLogger.FileMessages messages = (XMLLogger.FileMessages)this.fileMessages.get(fileName);\n+        messages.addException(throwable);\n     }\n     \n     private void writeException(final Throwable throwable) {\n         this.writer.println(\"<exception>\");\n         this.writer.println(\"<![CDATA[\");\n         final StringWriter stringWriter = new StringWriter();\n         final PrintWriter printer = new PrintWriter(stringWriter);\n@@ -211,22 +216,20 @@\n                 }\n                 catch (final NumberFormatException ignored) {\n                     reference = false;\n                 }\n             }\n             else {\n                 final String name = ent.substring(1, ent.length() - 1);\n-                for (final String element : XMLLogger.ENTITIES) {\n+                String[] entities;\n+                for (int length = (entities = XMLLogger.ENTITIES).length, i = 0; i < length; ++i) {\n+                    final String element = entities[i];\n                     if (name.equals(element)) {\n                         reference = true;\n                         break;\n                     }\n                 }\n             }\n         }\n         return reference;\n     }\n-    \n-    static {\n-        ENTITIES = new String[] { \"gt\", \"amp\", \"lt\", \"apos\", \"quot\" };\n-    }\n }\n"}]}
