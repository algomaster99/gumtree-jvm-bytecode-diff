{"diffoscope-json-version": 1, "source1": "first/JavadocParagraphCheck.class", "source2": "second/JavadocParagraphCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,94 +15,94 @@\n     public static final String MSG_MISPLACED_TAG = \"javadoc.paragraph.misplaced.tag\";\n     private boolean allowNewlineParagraph;\n     \n     public JavadocParagraphCheck() {\n         this.allowNewlineParagraph = true;\n     }\n     \n-    public void setAllowNewlineParagraph(final boolean value) {\n-        this.allowNewlineParagraph = value;\n+    public void setAllowNewlineParagraph(final boolean allowNewlineParagraph) {\n+        this.allowNewlineParagraph = allowNewlineParagraph;\n     }\n     \n     public int[] getDefaultJavadocTokens() {\n         return new int[] { 6, 10001 };\n     }\n     \n     public int[] getRequiredJavadocTokens() {\n         return this.getAcceptableJavadocTokens();\n     }\n     \n-    public void visitJavadocToken(final DetailNode ast) {\n-        if (ast.getType() == 6 && isEmptyLine(ast)) {\n-            this.checkEmptyLine(ast);\n+    public void visitJavadocToken(final DetailNode detailNode) {\n+        if (detailNode.getType() == 6 && isEmptyLine(detailNode)) {\n+            this.checkEmptyLine(detailNode);\n         }\n-        else if (ast.getType() == 10001 && JavadocUtil.getFirstChild(ast).getType() == 10006) {\n-            this.checkParagraphTag(ast);\n+        else if (detailNode.getType() == 10001 && JavadocUtil.getFirstChild(detailNode).getType() == 10006) {\n+            this.checkParagraphTag(detailNode);\n         }\n     }\n     \n-    private void checkEmptyLine(final DetailNode newline) {\n-        final DetailNode nearestToken = getNearestNode(newline);\n-        if (nearestToken.getType() == 10074 && !CommonUtil.isBlank(nearestToken.getText())) {\n-            this.log(newline.getLineNumber(), \"javadoc.paragraph.tag.after\", new Object[0]);\n+    private void checkEmptyLine(final DetailNode detailNode) {\n+        final DetailNode nearestNode = getNearestNode(detailNode);\n+        if (nearestNode.getType() == 10074 && !CommonUtil.isBlank(nearestNode.getText())) {\n+            this.log(detailNode.getLineNumber(), \"javadoc.paragraph.tag.after\", new Object[0]);\n         }\n     }\n     \n-    private void checkParagraphTag(final DetailNode tag) {\n-        final DetailNode newLine = getNearestEmptyLine(tag);\n-        if (isFirstParagraph(tag)) {\n-            this.log(tag.getLineNumber(), \"javadoc.paragraph.redundant.paragraph\", new Object[0]);\n+    private void checkParagraphTag(final DetailNode detailNode) {\n+        final DetailNode nearestEmptyLine = getNearestEmptyLine(detailNode);\n+        if (isFirstParagraph(detailNode)) {\n+            this.log(detailNode.getLineNumber(), \"javadoc.paragraph.redundant.paragraph\", new Object[0]);\n         }\n-        else if (newLine == null || tag.getLineNumber() - newLine.getLineNumber() != 1) {\n-            this.log(tag.getLineNumber(), \"javadoc.paragraph.line.before\", new Object[0]);\n+        else if (nearestEmptyLine == null || detailNode.getLineNumber() - nearestEmptyLine.getLineNumber() != 1) {\n+            this.log(detailNode.getLineNumber(), \"javadoc.paragraph.line.before\", new Object[0]);\n         }\n-        if (this.allowNewlineParagraph && isImmediatelyFollowedByText(tag)) {\n-            this.log(tag.getLineNumber(), \"javadoc.paragraph.misplaced.tag\", new Object[0]);\n+        if (this.allowNewlineParagraph && isImmediatelyFollowedByText(detailNode)) {\n+            this.log(detailNode.getLineNumber(), \"javadoc.paragraph.misplaced.tag\", new Object[0]);\n         }\n     }\n     \n-    private static DetailNode getNearestNode(final DetailNode node) {\n-        DetailNode tag;\n-        for (tag = JavadocUtil.getNextSibling(node); tag.getType() == 1 || tag.getType() == 6; tag = JavadocUtil.getNextSibling(tag)) {}\n-        return tag;\n+    private static DetailNode getNearestNode(final DetailNode detailNode) {\n+        DetailNode detailNode2;\n+        for (detailNode2 = JavadocUtil.getNextSibling(detailNode); detailNode2.getType() == 1 || detailNode2.getType() == 6; detailNode2 = JavadocUtil.getNextSibling(detailNode2)) {}\n+        return detailNode2;\n     }\n     \n-    private static boolean isEmptyLine(final DetailNode newLine) {\n-        boolean result = false;\n-        DetailNode previousSibling = JavadocUtil.getPreviousSibling(newLine);\n-        if (previousSibling != null && previousSibling.getParent().getType() == 10000) {\n-            if (previousSibling.getType() == 10074 && CommonUtil.isBlank(previousSibling.getText())) {\n-                previousSibling = JavadocUtil.getPreviousSibling(previousSibling);\n+    private static boolean isEmptyLine(final DetailNode detailNode) {\n+        boolean b = false;\n+        DetailNode detailNode2 = JavadocUtil.getPreviousSibling(detailNode);\n+        if (detailNode2 != null && detailNode2.getParent().getType() == 10000) {\n+            if (detailNode2.getType() == 10074 && CommonUtil.isBlank(detailNode2.getText())) {\n+                detailNode2 = JavadocUtil.getPreviousSibling(detailNode2);\n             }\n-            result = (previousSibling != null && previousSibling.getType() == 1);\n+            b = (detailNode2 != null && detailNode2.getType() == 1);\n         }\n-        return result;\n+        return b;\n     }\n     \n-    private static boolean isFirstParagraph(final DetailNode paragraphTag) {\n-        boolean result = true;\n-        for (DetailNode previousNode = JavadocUtil.getPreviousSibling(paragraphTag); previousNode != null; previousNode = JavadocUtil.getPreviousSibling(previousNode)) {\n-            if ((previousNode.getType() == 10074 && !CommonUtil.isBlank(previousNode.getText())) || (previousNode.getType() != 1 && previousNode.getType() != 6 && previousNode.getType() != 10074)) {\n-                result = false;\n+    private static boolean isFirstParagraph(final DetailNode detailNode) {\n+        boolean b = true;\n+        for (DetailNode detailNode2 = JavadocUtil.getPreviousSibling(detailNode); detailNode2 != null; detailNode2 = JavadocUtil.getPreviousSibling(detailNode2)) {\n+            if ((detailNode2.getType() == 10074 && !CommonUtil.isBlank(detailNode2.getText())) || (detailNode2.getType() != 1 && detailNode2.getType() != 6 && detailNode2.getType() != 10074)) {\n+                b = false;\n                 break;\n             }\n         }\n-        return result;\n+        return b;\n     }\n     \n-    private static DetailNode getNearestEmptyLine(final DetailNode node) {\n-        DetailNode newLine;\n+    private static DetailNode getNearestEmptyLine(final DetailNode detailNode) {\n         DetailNode previousSibling;\n-        for (newLine = JavadocUtil.getPreviousSibling(node); newLine != null; newLine = previousSibling) {\n-            previousSibling = JavadocUtil.getPreviousSibling(newLine);\n-            if (newLine.getType() == 6 && isEmptyLine(newLine)) {\n+        DetailNode previousSibling2;\n+        for (previousSibling = JavadocUtil.getPreviousSibling(detailNode); previousSibling != null; previousSibling = previousSibling2) {\n+            previousSibling2 = JavadocUtil.getPreviousSibling(previousSibling);\n+            if (previousSibling.getType() == 6 && isEmptyLine(previousSibling)) {\n                 break;\n             }\n         }\n-        return newLine;\n+        return previousSibling;\n     }\n     \n-    private static boolean isImmediatelyFollowedByText(final DetailNode tag) {\n-        final DetailNode nextSibling = JavadocUtil.getNextSibling(tag);\n+    private static boolean isImmediatelyFollowedByText(final DetailNode detailNode) {\n+        final DetailNode nextSibling = JavadocUtil.getNextSibling(detailNode);\n         return nextSibling.getType() == 6 || nextSibling.getType() == -1 || CommonUtil.startsWithChar(nextSibling.getText(), ' ');\n     }\n }\n"}]}
