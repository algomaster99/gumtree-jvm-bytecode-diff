{"diffoscope-json-version": 1, "source1": "first/Unknown.class", "source2": "second/Unknown.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,46 +10,46 @@\n public final class Unknown extends Attribute\n {\n     private byte[] bytes;\n     private final String name;\n     private static final Map<String, Unknown> unknownAttributes;\n     \n     static Unknown[] getUnknownAttributes() {\n-        final Unknown[] unknowns = new Unknown[Unknown.unknownAttributes.size()];\n-        Unknown.unknownAttributes.values().toArray(unknowns);\n+        final Unknown[] array = new Unknown[Unknown.unknownAttributes.size()];\n+        Unknown.unknownAttributes.values().toArray(array);\n         Unknown.unknownAttributes.clear();\n-        return unknowns;\n+        return array;\n     }\n     \n-    public Unknown(final Unknown c) {\n-        this(c.getNameIndex(), c.getLength(), c.getBytes(), c.getConstantPool());\n+    public Unknown(final Unknown unknown) {\n+        this(unknown.getNameIndex(), unknown.getLength(), unknown.getBytes(), unknown.getConstantPool());\n     }\n     \n-    public Unknown(final int name_index, final int length, final byte[] bytes, final ConstantPool constant_pool) {\n-        super((byte)(-1), name_index, length, constant_pool);\n+    public Unknown(final int n, final int n2, final byte[] bytes, final ConstantPool constantPool) {\n+        super((byte)(-1), n, n2, constantPool);\n         this.bytes = bytes;\n-        this.name = ((ConstantUtf8)constant_pool.getConstant(name_index, (byte)1)).getBytes();\n+        this.name = ((ConstantUtf8)constantPool.getConstant(n, (byte)1)).getBytes();\n         Unknown.unknownAttributes.put(this.name, this);\n     }\n     \n-    Unknown(final int name_index, final int length, final DataInput input, final ConstantPool constant_pool) throws IOException {\n-        this(name_index, length, (byte[])null, constant_pool);\n-        if (length > 0) {\n-            input.readFully(this.bytes = new byte[length]);\n+    Unknown(final int n, final int n2, final DataInput dataInput, final ConstantPool constantPool) throws IOException {\n+        this(n, n2, (byte[])null, constantPool);\n+        if (n2 > 0) {\n+            dataInput.readFully(this.bytes = new byte[n2]);\n         }\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitUnknown(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitUnknown(this);\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        super.dump(file);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        super.dump(dataOutputStream);\n         if (super.getLength() > 0) {\n-            file.write(this.bytes, 0, super.getLength());\n+            dataOutputStream.write(this.bytes, 0, super.getLength());\n         }\n     }\n     \n     public byte[] getBytes() {\n         return this.bytes;\n     }\n     \n@@ -61,33 +61,33 @@\n         this.bytes = bytes;\n     }\n     \n     public String toString() {\n         if (super.getLength() == 0 || this.bytes == null) {\n             return \"(Unknown attribute \" + this.name + \")\";\n         }\n-        String hex;\n+        String str;\n         if (super.getLength() > 10) {\n-            final byte[] tmp = new byte[10];\n-            System.arraycopy(this.bytes, 0, tmp, 0, 10);\n-            hex = Utility.toHexString(tmp) + \"... (truncated)\";\n+            final byte[] array = new byte[10];\n+            System.arraycopy(this.bytes, 0, array, 0, 10);\n+            str = Utility.toHexString(array) + \"... (truncated)\";\n         }\n         else {\n-            hex = Utility.toHexString(this.bytes);\n+            str = Utility.toHexString(this.bytes);\n         }\n-        return \"(Unknown attribute \" + this.name + \": \" + hex + \")\";\n+        return \"(Unknown attribute \" + this.name + \": \" + str + \")\";\n     }\n     \n-    public Attribute copy(final ConstantPool _constant_pool) {\n-        final Unknown c = (Unknown)this.clone();\n+    public Attribute copy(final ConstantPool constantPool) {\n+        final Unknown unknown = (Unknown)this.clone();\n         if (this.bytes != null) {\n-            c.bytes = new byte[this.bytes.length];\n-            System.arraycopy(this.bytes, 0, c.bytes, 0, this.bytes.length);\n+            unknown.bytes = new byte[this.bytes.length];\n+            System.arraycopy(this.bytes, 0, unknown.bytes, 0, this.bytes.length);\n         }\n-        c.setConstantPool(_constant_pool);\n-        return c;\n+        unknown.setConstantPool(constantPool);\n+        return unknown;\n     }\n     \n     static {\n         unknownAttributes = new HashMap<String, Unknown>();\n     }\n }\n"}]}
