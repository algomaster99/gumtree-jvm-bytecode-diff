{"diffoscope-json-version": 1, "source1": "first/GmtTimeZone.class", "source2": "second/GmtTimeZone.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,37 +9,37 @@\n     private static final int MILLISECONDS_PER_MINUTE = 60000;\n     private static final int MINUTES_PER_HOUR = 60;\n     private static final int HOURS_PER_DAY = 24;\n     static final long serialVersionUID = 1L;\n     private final int offset;\n     private final String zoneId;\n     \n-    GmtTimeZone(final boolean negate, final int hours, final int minutes) {\n-        if (hours >= 24) {\n-            throw new IllegalArgumentException(hours + \" hours out of range\");\n+    GmtTimeZone(final boolean b, final int i, final int j) {\n+        if (i >= 24) {\n+            throw new IllegalArgumentException(i + \" hours out of range\");\n         }\n-        if (minutes >= 60) {\n-            throw new IllegalArgumentException(minutes + \" minutes out of range\");\n+        if (j >= 60) {\n+            throw new IllegalArgumentException(j + \" minutes out of range\");\n         }\n-        final int milliseconds = (minutes + hours * 60) * 60000;\n-        this.offset = (negate ? (-milliseconds) : milliseconds);\n-        this.zoneId = twoDigits(twoDigits(new StringBuilder(9).append(\"GMT\").append(negate ? '-' : '+'), hours).append(':'), minutes).toString();\n+        final int n = (j + i * 60) * 60000;\n+        this.offset = (b ? (-n) : n);\n+        this.zoneId = twoDigits(twoDigits(new StringBuilder(9).append(\"GMT\").append(b ? '-' : '+'), i).append(':'), j).toString();\n     }\n     \n     private static StringBuilder twoDigits(final StringBuilder sb, final int n) {\n         return sb.append((char)(48 + n / 10)).append((char)(48 + n % 10));\n     }\n     \n     @Override\n-    public int getOffset(final int era, final int year, final int month, final int day, final int dayOfWeek, final int milliseconds) {\n+    public int getOffset(final int n, final int n2, final int n3, final int n4, final int n5, final int n6) {\n         return this.offset;\n     }\n     \n     @Override\n-    public void setRawOffset(final int offsetMillis) {\n+    public void setRawOffset(final int n) {\n         throw new UnsupportedOperationException();\n     }\n     \n     @Override\n     public int getRawOffset() {\n         return this.offset;\n     }\n@@ -66,11 +66,11 @@\n     \n     @Override\n     public int hashCode() {\n         return this.offset;\n     }\n     \n     @Override\n-    public boolean equals(final Object other) {\n-        return other instanceof GmtTimeZone && this.zoneId == ((GmtTimeZone)other).zoneId;\n+    public boolean equals(final Object o) {\n+        return o instanceof GmtTimeZone && this.zoneId == ((GmtTimeZone)o).zoneId;\n     }\n }\n"}]}
