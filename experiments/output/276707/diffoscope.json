{"diffoscope-json-version": 1, "source1": "first/JavaLanguageParser$RecordDeclarationContext.class", "source2": "second/JavaLanguageParser$RecordDeclarationContext.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -31,27 +31,27 @@\n         return (JavaLanguageParser.TypeParametersContext)this.getRuleContext((Class)JavaLanguageParser.TypeParametersContext.class, 0);\n     }\n     \n     public JavaLanguageParser.ImplementsClauseContext implementsClause() {\n         return (JavaLanguageParser.ImplementsClauseContext)this.getRuleContext((Class)JavaLanguageParser.ImplementsClauseContext.class, 0);\n     }\n     \n-    public RecordDeclarationContext(final ParserRuleContext parent, final int invokingState) {\n-        super(parent, invokingState);\n+    public RecordDeclarationContext(final ParserRuleContext parserRuleContext, final int n) {\n+        super(parserRuleContext, n);\n     }\n     \n-    public RecordDeclarationContext(final ParserRuleContext parent, final int invokingState, final List<JavaLanguageParser.ModifierContext> mods) {\n-        super(parent, invokingState);\n+    public RecordDeclarationContext(final ParserRuleContext parserRuleContext, final int n, final List<JavaLanguageParser.ModifierContext> mods) {\n+        super(parserRuleContext, n);\n         this.mods = mods;\n     }\n     \n     public int getRuleIndex() {\n         return 8;\n     }\n     \n-    public <T> T accept(final ParseTreeVisitor<? extends T> visitor) {\n-        if (visitor instanceof JavaLanguageParserVisitor) {\n-            return (T)((JavaLanguageParserVisitor)visitor).visitRecordDeclaration(this);\n+    public <T> T accept(final ParseTreeVisitor<? extends T> parseTreeVisitor) {\n+        if (parseTreeVisitor instanceof JavaLanguageParserVisitor) {\n+            return (T)((JavaLanguageParserVisitor)parseTreeVisitor).visitRecordDeclaration(this);\n         }\n-        return (T)visitor.visitChildren((RuleNode)this);\n+        return (T)parseTreeVisitor.visitChildren((RuleNode)this);\n     }\n }\n"}]}
