{"diffoscope-json-version": 1, "source1": "first/NonBlockingUtf8JsonParserBase.class", "source2": "second/NonBlockingUtf8JsonParserBase.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,32 +1,44 @@\n \n package com.fasterxml.jackson.core.json.async;\n \n-import com.fasterxml.jackson.core.JsonParser;\n-import com.fasterxml.jackson.core.io.CharTypes;\n import com.fasterxml.jackson.core.json.JsonReadFeature;\n import com.fasterxml.jackson.core.JsonToken;\n import java.io.IOException;\n import com.fasterxml.jackson.core.util.VersionUtil;\n import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;\n import com.fasterxml.jackson.core.io.IOContext;\n+import com.fasterxml.jackson.core.io.CharTypes;\n+import com.fasterxml.jackson.core.JsonParser;\n \n public abstract class NonBlockingUtf8JsonParserBase extends NonBlockingJsonParserBase\n {\n     private static final int FEAT_MASK_TRAILING_COMMA;\n     private static final int FEAT_MASK_LEADING_ZEROS;\n     private static final int FEAT_MASK_ALLOW_MISSING;\n     private static final int FEAT_MASK_ALLOW_SINGLE_QUOTES;\n     private static final int FEAT_MASK_ALLOW_UNQUOTED_NAMES;\n     private static final int FEAT_MASK_ALLOW_JAVA_COMMENTS;\n     private static final int FEAT_MASK_ALLOW_YAML_COMMENTS;\n     private static final int[] _icUTF8;\n     protected static final int[] _icLatin1;\n     protected int _origBufferLen;\n     \n+    static {\n+        FEAT_MASK_TRAILING_COMMA = JsonParser.Feature.ALLOW_TRAILING_COMMA.getMask();\n+        FEAT_MASK_LEADING_ZEROS = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS.getMask();\n+        FEAT_MASK_ALLOW_MISSING = JsonParser.Feature.ALLOW_MISSING_VALUES.getMask();\n+        FEAT_MASK_ALLOW_SINGLE_QUOTES = JsonParser.Feature.ALLOW_SINGLE_QUOTES.getMask();\n+        FEAT_MASK_ALLOW_UNQUOTED_NAMES = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES.getMask();\n+        FEAT_MASK_ALLOW_JAVA_COMMENTS = JsonParser.Feature.ALLOW_COMMENTS.getMask();\n+        FEAT_MASK_ALLOW_YAML_COMMENTS = JsonParser.Feature.ALLOW_YAML_COMMENTS.getMask();\n+        _icUTF8 = CharTypes.getInputCodeUtf8();\n+        _icLatin1 = CharTypes.getInputCodeLatin1();\n+    }\n+    \n     protected NonBlockingUtf8JsonParserBase(final IOContext ctxt, final int parserFeatures, final ByteQuadsCanonicalizer sym) {\n         super(ctxt, parserFeatures, sym);\n     }\n     \n     public final boolean needMoreInput() {\n         return this._inputPtr >= this._inputEnd && !this._endOfInput;\n     }\n@@ -2587,20 +2599,8 @@\n         }\n         c = (c << 6 | (e & 0x3F));\n         if ((f & 0xC0) != 0x80) {\n             this._reportInvalidOther(f & 0xFF, this._inputPtr);\n         }\n         return (c << 6 | (f & 0x3F)) - 65536;\n     }\n-    \n-    static {\n-        FEAT_MASK_TRAILING_COMMA = JsonParser.Feature.ALLOW_TRAILING_COMMA.getMask();\n-        FEAT_MASK_LEADING_ZEROS = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS.getMask();\n-        FEAT_MASK_ALLOW_MISSING = JsonParser.Feature.ALLOW_MISSING_VALUES.getMask();\n-        FEAT_MASK_ALLOW_SINGLE_QUOTES = JsonParser.Feature.ALLOW_SINGLE_QUOTES.getMask();\n-        FEAT_MASK_ALLOW_UNQUOTED_NAMES = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES.getMask();\n-        FEAT_MASK_ALLOW_JAVA_COMMENTS = JsonParser.Feature.ALLOW_COMMENTS.getMask();\n-        FEAT_MASK_ALLOW_YAML_COMMENTS = JsonParser.Feature.ALLOW_YAML_COMMENTS.getMask();\n-        _icUTF8 = CharTypes.getInputCodeUtf8();\n-        _icLatin1 = CharTypes.getInputCodeLatin1();\n-    }\n }\n"}]}
