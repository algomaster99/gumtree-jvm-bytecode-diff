{"diffoscope-json-version": 1, "source1": "first/XmlStreamWriter.class", "source2": "second/XmlStreamWriter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -32,75 +32,75 @@\n     \n     @Deprecated\n     public XmlStreamWriter(final File file) throws FileNotFoundException {\n         this(file, null);\n     }\n     \n     @Deprecated\n-    public XmlStreamWriter(final File file, final String defaultEncoding) throws FileNotFoundException {\n-        this(new FileOutputStream(file), defaultEncoding);\n+    public XmlStreamWriter(final File file, final String s) throws FileNotFoundException {\n+        this(new FileOutputStream(file), s);\n     }\n     \n     @Deprecated\n-    public XmlStreamWriter(final OutputStream out) {\n-        this(out, StandardCharsets.UTF_8);\n+    public XmlStreamWriter(final OutputStream outputStream) {\n+        this(outputStream, StandardCharsets.UTF_8);\n     }\n     \n-    private XmlStreamWriter(final OutputStream out, final Charset defaultEncoding) {\n+    private XmlStreamWriter(final OutputStream out, final Charset obj) {\n         this.prologWriter = new StringWriter(8192);\n         this.out = out;\n-        this.defaultCharset = Objects.requireNonNull(defaultEncoding);\n+        this.defaultCharset = Objects.requireNonNull(obj);\n     }\n     \n     @Deprecated\n-    public XmlStreamWriter(final OutputStream out, final String defaultEncoding) {\n-        this(out, Charsets.toCharset(defaultEncoding, StandardCharsets.UTF_8));\n+    public XmlStreamWriter(final OutputStream outputStream, final String s) {\n+        this(outputStream, Charsets.toCharset(s, StandardCharsets.UTF_8));\n     }\n     \n     @Override\n     public void close() throws IOException {\n         if (this.writer == null) {\n             this.charset = this.defaultCharset;\n             (this.writer = new OutputStreamWriter(this.out, this.charset)).write(this.prologWriter.toString());\n         }\n         this.writer.close();\n     }\n     \n-    private void detectEncoding(final char[] cbuf, final int off, final int len) throws IOException {\n-        int size = len;\n-        final StringBuffer xmlProlog = this.prologWriter.getBuffer();\n-        if (xmlProlog.length() + len > 8192) {\n-            size = 8192 - xmlProlog.length();\n-        }\n-        this.prologWriter.write(cbuf, off, size);\n-        if (xmlProlog.length() >= 5) {\n-            if (xmlProlog.substring(0, 5).equals(\"<?xml\")) {\n-                final int xmlPrologEnd = xmlProlog.indexOf(\"?>\");\n-                if (xmlPrologEnd > 0) {\n-                    final Matcher m = XmlStreamReader.ENCODING_PATTERN.matcher(xmlProlog.substring(0, xmlPrologEnd));\n-                    if (m.find()) {\n-                        final String encName = m.group(1).toUpperCase(Locale.ROOT);\n-                        this.charset = Charset.forName(encName.substring(1, encName.length() - 1));\n+    private void detectEncoding(final char[] cbuf, final int off, final int n) throws IOException {\n+        int len = n;\n+        final StringBuffer buffer = this.prologWriter.getBuffer();\n+        if (buffer.length() + n > 8192) {\n+            len = 8192 - buffer.length();\n+        }\n+        this.prologWriter.write(cbuf, off, len);\n+        if (buffer.length() >= 5) {\n+            if (buffer.substring(0, 5).equals(\"<?xml\")) {\n+                final int index = buffer.indexOf(\"?>\");\n+                if (index > 0) {\n+                    final Matcher matcher = XmlStreamReader.ENCODING_PATTERN.matcher(buffer.substring(0, index));\n+                    if (matcher.find()) {\n+                        final String upperCase = matcher.group(1).toUpperCase(Locale.ROOT);\n+                        this.charset = Charset.forName(upperCase.substring(1, upperCase.length() - 1));\n                     }\n                     else {\n                         this.charset = this.defaultCharset;\n                     }\n                 }\n-                else if (xmlProlog.length() >= 8192) {\n+                else if (buffer.length() >= 8192) {\n                     this.charset = this.defaultCharset;\n                 }\n             }\n             else {\n                 this.charset = this.defaultCharset;\n             }\n             if (this.charset != null) {\n                 this.prologWriter = null;\n-                (this.writer = new OutputStreamWriter(this.out, this.charset)).write(xmlProlog.toString());\n-                if (len > size) {\n-                    this.writer.write(cbuf, off + size, len - size);\n+                (this.writer = new OutputStreamWriter(this.out, this.charset)).write(buffer.toString());\n+                if (n > len) {\n+                    this.writer.write(cbuf, off + len, n - len);\n                 }\n             }\n         }\n     }\n     \n     @Override\n     public void flush() throws IOException {\n@@ -114,16 +114,16 @@\n     }\n     \n     public String getEncoding() {\n         return this.charset.name();\n     }\n     \n     @Override\n-    public void write(final char[] cbuf, final int off, final int len) throws IOException {\n+    public void write(final char[] array, final int n, final int n2) throws IOException {\n         if (this.prologWriter != null) {\n-            this.detectEncoding(cbuf, off, len);\n+            this.detectEncoding(array, n, n2);\n         }\n         else {\n-            this.writer.write(cbuf, off, len);\n+            this.writer.write(array, n, n2);\n         }\n     }\n }\n"}]}
