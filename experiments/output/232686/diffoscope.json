{"diffoscope-json-version": 1, "source1": "first/DefaultParametersManager.class", "source2": "second/DefaultParametersManager.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,43 +10,44 @@\n {\n     private final Collection<DefaultParametersManager.DefaultHandlerData> defaultHandlers;\n     \n     public DefaultParametersManager() {\n         this.defaultHandlers = new CopyOnWriteArrayList<DefaultParametersManager.DefaultHandlerData>();\n     }\n     \n-    public <T> void registerDefaultsHandler(final Class<T> paramsClass, final DefaultParametersHandler<? super T> handler) {\n-        this.registerDefaultsHandler(paramsClass, handler, null);\n+    public <T> void registerDefaultsHandler(final Class<T> clazz, final DefaultParametersHandler<? super T> defaultParametersHandler) {\n+        this.registerDefaultsHandler(clazz, defaultParametersHandler, null);\n     }\n     \n-    public <T> void registerDefaultsHandler(final Class<T> paramsClass, final DefaultParametersHandler<? super T> handler, final Class<?> startClass) {\n-        if (paramsClass == null) {\n+    public <T> void registerDefaultsHandler(final Class<T> clazz, final DefaultParametersHandler<? super T> defaultParametersHandler, final Class<?> clazz2) {\n+        if (clazz == null) {\n             throw new IllegalArgumentException(\"Parameters class must not be null!\");\n         }\n-        if (handler == null) {\n+        if (defaultParametersHandler == null) {\n             throw new IllegalArgumentException(\"DefaultParametersHandler must not be null!\");\n         }\n-        this.defaultHandlers.add(new DefaultParametersManager.DefaultHandlerData((DefaultParametersHandler)handler, (Class)paramsClass, (Class)startClass));\n+        this.defaultHandlers.add(new DefaultParametersManager.DefaultHandlerData((DefaultParametersHandler)defaultParametersHandler, (Class)clazz, (Class)clazz2));\n     }\n     \n-    public void unregisterDefaultsHandler(final DefaultParametersHandler<?> handler) {\n-        this.unregisterDefaultsHandler(handler, null);\n+    public void unregisterDefaultsHandler(final DefaultParametersHandler<?> defaultParametersHandler) {\n+        this.unregisterDefaultsHandler(defaultParametersHandler, null);\n     }\n     \n-    public void unregisterDefaultsHandler(final DefaultParametersHandler<?> handler, final Class<?> startClass) {\n-        final Collection<DefaultParametersManager.DefaultHandlerData> toRemove = new LinkedList<DefaultParametersManager.DefaultHandlerData>();\n-        for (final DefaultParametersManager.DefaultHandlerData dhd : this.defaultHandlers) {\n-            if (dhd.isOccurrence((DefaultParametersHandler)handler, (Class)startClass)) {\n-                toRemove.add(dhd);\n+    public void unregisterDefaultsHandler(final DefaultParametersHandler<?> defaultParametersHandler, final Class<?> clazz) {\n+        final LinkedList list = new LinkedList();\n+        for (final DefaultParametersManager.DefaultHandlerData defaultHandlerData : this.defaultHandlers) {\n+            if (defaultHandlerData.isOccurrence((DefaultParametersHandler)defaultParametersHandler, (Class)clazz)) {\n+                list.add(defaultHandlerData);\n             }\n         }\n-        this.defaultHandlers.removeAll(toRemove);\n+        this.defaultHandlers.removeAll(list);\n     }\n     \n-    public void initializeParameters(final BuilderParameters params) {\n-        if (params != null) {\n-            for (final DefaultParametersManager.DefaultHandlerData dhd : this.defaultHandlers) {\n-                dhd.applyHandlerIfMatching(params);\n+    public void initializeParameters(final BuilderParameters builderParameters) {\n+        if (builderParameters != null) {\n+            final Iterator<DefaultParametersManager.DefaultHandlerData> iterator = this.defaultHandlers.iterator();\n+            while (iterator.hasNext()) {\n+                ((DefaultParametersManager.DefaultHandlerData)iterator.next()).applyHandlerIfMatching(builderParameters);\n             }\n         }\n     }\n }\n"}]}
