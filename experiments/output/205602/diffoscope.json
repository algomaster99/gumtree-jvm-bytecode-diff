{"diffoscope-json-version": 1, "source1": "first/MultiFileBuilderParametersImpl.class", "source2": "second/MultiFileBuilderParametersImpl.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,53 +8,53 @@\n \n public class MultiFileBuilderParametersImpl extends BasicBuilderParameters implements MultiFileBuilderProperties<MultiFileBuilderParametersImpl>\n {\n     private static final String PARAM_KEY;\n     private BuilderParameters managedBuilderParameters;\n     private String filePattern;\n     \n-    public static MultiFileBuilderParametersImpl fromParameters(final Map<String, Object> params) {\n-        return fromParameters(params, false);\n+    public static MultiFileBuilderParametersImpl fromParameters(final Map<String, Object> map) {\n+        return fromParameters(map, false);\n     }\n     \n-    public static MultiFileBuilderParametersImpl fromParameters(final Map<String, Object> params, final boolean createIfMissing) {\n-        MultiFileBuilderParametersImpl instance = (MultiFileBuilderParametersImpl)params.get(MultiFileBuilderParametersImpl.PARAM_KEY);\n-        if (instance == null && createIfMissing) {\n-            instance = new MultiFileBuilderParametersImpl();\n+    public static MultiFileBuilderParametersImpl fromParameters(final Map<String, Object> map, final boolean b) {\n+        MultiFileBuilderParametersImpl multiFileBuilderParametersImpl = (MultiFileBuilderParametersImpl)map.get(MultiFileBuilderParametersImpl.PARAM_KEY);\n+        if (multiFileBuilderParametersImpl == null && b) {\n+            multiFileBuilderParametersImpl = new MultiFileBuilderParametersImpl();\n         }\n-        return instance;\n+        return multiFileBuilderParametersImpl;\n     }\n     \n     public String getFilePattern() {\n         return this.filePattern;\n     }\n     \n-    public MultiFileBuilderParametersImpl setFilePattern(final String p) {\n-        this.filePattern = p;\n+    public MultiFileBuilderParametersImpl setFilePattern(final String filePattern) {\n+        this.filePattern = filePattern;\n         return this;\n     }\n     \n     public BuilderParameters getManagedBuilderParameters() {\n         return this.managedBuilderParameters;\n     }\n     \n-    public MultiFileBuilderParametersImpl setManagedBuilderParameters(final BuilderParameters p) {\n-        this.managedBuilderParameters = p;\n+    public MultiFileBuilderParametersImpl setManagedBuilderParameters(final BuilderParameters managedBuilderParameters) {\n+        this.managedBuilderParameters = managedBuilderParameters;\n         return this;\n     }\n     \n     public Map<String, Object> getParameters() {\n-        final Map<String, Object> params = super.getParameters();\n-        params.put(MultiFileBuilderParametersImpl.PARAM_KEY, this);\n-        return params;\n+        final Map parameters = super.getParameters();\n+        parameters.put(MultiFileBuilderParametersImpl.PARAM_KEY, this);\n+        return parameters;\n     }\n     \n     public MultiFileBuilderParametersImpl clone() {\n-        final MultiFileBuilderParametersImpl copy = (MultiFileBuilderParametersImpl)super.clone();\n-        copy.setManagedBuilderParameters((BuilderParameters)ConfigurationUtils.cloneIfPossible((Object)this.getManagedBuilderParameters()));\n-        return copy;\n+        final MultiFileBuilderParametersImpl multiFileBuilderParametersImpl = (MultiFileBuilderParametersImpl)super.clone();\n+        multiFileBuilderParametersImpl.setManagedBuilderParameters((BuilderParameters)ConfigurationUtils.cloneIfPossible((Object)this.getManagedBuilderParameters()));\n+        return multiFileBuilderParametersImpl;\n     }\n     \n     static {\n         PARAM_KEY = \"config-\" + MultiFileBuilderParametersImpl.class.getName();\n     }\n }\n"}]}
