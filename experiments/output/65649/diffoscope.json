{"diffoscope-json-version": 1, "source1": "first/ClassBands.class", "source2": "second/ClassBands.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -454,69 +454,69 @@\n         this.code_attr_calls = codeAttrCalls.toArray();\n     }\n     \n     public void pack(final OutputStream out) throws IOException, Pack200Exception {\n         PackingUtils.log(\"Writing class bands...\");\n         byte[] encodedBand = this.encodeBandInt(\"class_this\", this.getInts(this.class_this), Codec.DELTA5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_this[\" + this.class_this.length);\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_this[\" + this.class_this.length + \"]\");\n         encodedBand = this.encodeBandInt(\"class_super\", this.getInts(this.class_super), Codec.DELTA5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_super[\" + this.class_super.length);\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_super[\" + this.class_super.length + \"]\");\n         encodedBand = this.encodeBandInt(\"class_interface_count\", this.class_interface_count, Codec.DELTA5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_interface_count[\" + this.class_interface_count.length);\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_interface_count[\" + this.class_interface_count.length + \"]\");\n         final int totalInterfaces = this.sum(this.class_interface_count);\n         final int[] classInterface = new int[totalInterfaces];\n         int k = 0;\n         for (int i = 0; i < this.class_interface.length; ++i) {\n             if (this.class_interface[i] != null) {\n                 for (int j = 0; j < this.class_interface[i].length; ++j) {\n                     final CPClass cpClass = this.class_interface[i][j];\n                     classInterface[k] = cpClass.getIndex();\n                     ++k;\n                 }\n             }\n         }\n         encodedBand = this.encodeBandInt(\"class_interface\", classInterface, Codec.DELTA5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_interface[\" + classInterface.length);\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_interface[\" + classInterface.length + \"]\");\n         encodedBand = this.encodeBandInt(\"class_field_count\", this.class_field_count, Codec.DELTA5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_field_count[\" + this.class_field_count.length);\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_field_count[\" + this.class_field_count.length + \"]\");\n         encodedBand = this.encodeBandInt(\"class_method_count\", this.class_method_count, Codec.DELTA5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_method_count[\" + this.class_method_count.length);\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_method_count[\" + this.class_method_count.length + \"]\");\n         final int totalFields = this.sum(this.class_field_count);\n         final int[] fieldDescr = new int[totalFields];\n         k = 0;\n         for (int l = 0; l < this.index; ++l) {\n             for (int m = 0; m < this.field_descr[l].length; ++m) {\n                 final CPNameAndType descr = this.field_descr[l][m];\n                 fieldDescr[k] = descr.getIndex();\n                 ++k;\n             }\n         }\n         encodedBand = this.encodeBandInt(\"field_descr\", fieldDescr, Codec.DELTA5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from field_descr[\" + fieldDescr.length);\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from field_descr[\" + fieldDescr.length + \"]\");\n         this.writeFieldAttributeBands(out);\n         final int totalMethods = this.sum(this.class_method_count);\n         final int[] methodDescr = new int[totalMethods];\n         k = 0;\n         for (int i2 = 0; i2 < this.index; ++i2) {\n             for (int j2 = 0; j2 < this.method_descr[i2].length; ++j2) {\n                 final CPNameAndType descr2 = this.method_descr[i2][j2];\n                 methodDescr[k] = descr2.getIndex();\n                 ++k;\n             }\n         }\n         encodedBand = this.encodeBandInt(\"method_descr\", methodDescr, Codec.MDELTA5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from method_descr[\" + methodDescr.length);\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from method_descr[\" + methodDescr.length + \"]\");\n         this.writeMethodAttributeBands(out);\n         this.writeClassAttributeBands(out);\n         this.writeCodeBands(out);\n     }\n     \n     private int sum(final int[] ints) {\n         int sum = 0;\n@@ -525,99 +525,99 @@\n         }\n         return sum;\n     }\n     \n     private void writeFieldAttributeBands(final OutputStream out) throws IOException, Pack200Exception {\n         byte[] encodedBand = this.encodeFlags(\"field_flags\", this.field_flags, Codec.UNSIGNED5, Codec.UNSIGNED5, this.segmentHeader.have_field_flags_hi());\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from field_flags[\" + this.field_flags.length);\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from field_flags[\" + this.field_flags.length + \"]\");\n         encodedBand = this.encodeBandInt(\"field_attr_calls\", this.field_attr_calls, Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from field_attr_calls[\" + this.field_attr_calls.length);\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from field_attr_calls[\" + this.field_attr_calls.length + \"]\");\n         encodedBand = this.encodeBandInt(\"fieldConstantValueKQ\", this.cpEntryListToArray(this.fieldConstantValueKQ), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from fieldConstantValueKQ[\" + this.fieldConstantValueKQ.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from fieldConstantValueKQ[\" + this.fieldConstantValueKQ.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"fieldSignature\", this.cpEntryListToArray(this.fieldSignature), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from fieldSignature[\" + this.fieldSignature.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from fieldSignature[\" + this.fieldSignature.size() + \"]\");\n         this.field_RVA_bands.pack(out);\n         this.field_RIA_bands.pack(out);\n         for (final NewAttributeBands bands : this.fieldAttributeBands) {\n             bands.pack(out);\n         }\n     }\n     \n     private void writeMethodAttributeBands(final OutputStream out) throws IOException, Pack200Exception {\n         byte[] encodedBand = this.encodeFlags(\"method_flags\", this.method_flags, Codec.UNSIGNED5, Codec.UNSIGNED5, this.segmentHeader.have_method_flags_hi());\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from method_flags[\" + this.method_flags.length);\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from method_flags[\" + this.method_flags.length + \"]\");\n         encodedBand = this.encodeBandInt(\"method_attr_calls\", this.method_attr_calls, Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from method_attr_calls[\" + this.method_attr_calls.length);\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from method_attr_calls[\" + this.method_attr_calls.length + \"]\");\n         encodedBand = this.encodeBandInt(\"methodExceptionNumber\", this.methodExceptionNumber.toArray(), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from methodExceptionNumber[\" + this.methodExceptionNumber.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from methodExceptionNumber[\" + this.methodExceptionNumber.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"methodExceptionClasses\", this.cpEntryListToArray(this.methodExceptionClasses), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from methodExceptionClasses[\" + this.methodExceptionClasses.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from methodExceptionClasses[\" + this.methodExceptionClasses.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"methodSignature\", this.cpEntryListToArray(this.methodSignature), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from methodSignature[\" + this.methodSignature.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from methodSignature[\" + this.methodSignature.size() + \"]\");\n         this.method_RVA_bands.pack(out);\n         this.method_RIA_bands.pack(out);\n         this.method_RVPA_bands.pack(out);\n         this.method_RIPA_bands.pack(out);\n         this.method_AD_bands.pack(out);\n         for (final NewAttributeBands bands : this.methodAttributeBands) {\n             bands.pack(out);\n         }\n     }\n     \n     private void writeClassAttributeBands(final OutputStream out) throws IOException, Pack200Exception {\n         byte[] encodedBand = this.encodeFlags(\"class_flags\", this.class_flags, Codec.UNSIGNED5, Codec.UNSIGNED5, this.segmentHeader.have_class_flags_hi());\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_flags[\" + this.class_flags.length);\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_flags[\" + this.class_flags.length + \"]\");\n         encodedBand = this.encodeBandInt(\"class_attr_calls\", this.class_attr_calls, Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_attr_calls[\" + this.class_attr_calls.length);\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_attr_calls[\" + this.class_attr_calls.length + \"]\");\n         encodedBand = this.encodeBandInt(\"classSourceFile\", this.cpEntryOrNullListToArray(this.classSourceFile), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from classSourceFile[\" + this.classSourceFile.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from classSourceFile[\" + this.classSourceFile.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"class_enclosing_method_RC\", this.cpEntryListToArray(this.classEnclosingMethodClass), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_enclosing_method_RC[\" + this.classEnclosingMethodClass.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_enclosing_method_RC[\" + this.classEnclosingMethodClass.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"class_EnclosingMethod_RDN\", this.cpEntryOrNullListToArray(this.classEnclosingMethodDesc), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_EnclosingMethod_RDN[\" + this.classEnclosingMethodDesc.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_EnclosingMethod_RDN[\" + this.classEnclosingMethodDesc.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"class_Signature_RS\", this.cpEntryListToArray(this.classSignature), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_Signature_RS[\" + this.classSignature.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_Signature_RS[\" + this.classSignature.size() + \"]\");\n         this.class_RVA_bands.pack(out);\n         this.class_RIA_bands.pack(out);\n         encodedBand = this.encodeBandInt(\"class_InnerClasses_N\", this.class_InnerClasses_N, Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_InnerClasses_N[\" + this.class_InnerClasses_N.length);\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_InnerClasses_N[\" + this.class_InnerClasses_N.length + \"]\");\n         encodedBand = this.encodeBandInt(\"class_InnerClasses_RC\", this.getInts(this.class_InnerClasses_RC), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_InnerClasses_RC[\" + this.class_InnerClasses_RC.length);\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_InnerClasses_RC[\" + this.class_InnerClasses_RC.length + \"]\");\n         encodedBand = this.encodeBandInt(\"class_InnerClasses_F\", this.class_InnerClasses_F, Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_InnerClasses_F[\" + this.class_InnerClasses_F.length);\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_InnerClasses_F[\" + this.class_InnerClasses_F.length + \"]\");\n         encodedBand = this.encodeBandInt(\"class_InnerClasses_outer_RCN\", this.cpEntryOrNullListToArray(this.classInnerClassesOuterRCN), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_InnerClasses_outer_RCN[\" + this.classInnerClassesOuterRCN.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_InnerClasses_outer_RCN[\" + this.classInnerClassesOuterRCN.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"class_InnerClasses_name_RUN\", this.cpEntryOrNullListToArray(this.classInnerClassesNameRUN), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_InnerClasses_name_RUN[\" + this.classInnerClassesNameRUN.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from class_InnerClasses_name_RUN[\" + this.classInnerClassesNameRUN.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"classFileVersionMinor\", this.classFileVersionMinor.toArray(), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from classFileVersionMinor[\" + this.classFileVersionMinor.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from classFileVersionMinor[\" + this.classFileVersionMinor.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"classFileVersionMajor\", this.classFileVersionMajor.toArray(), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from classFileVersionMajor[\" + this.classFileVersionMajor.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from classFileVersionMajor[\" + this.classFileVersionMajor.size() + \"]\");\n         for (final NewAttributeBands bands : this.classAttributeBands) {\n             bands.pack(out);\n         }\n     }\n     \n     private int[] getInts(final CPClass[] cpClasses) {\n         final int[] ints = new int[cpClasses.length];\n@@ -628,91 +628,91 @@\n         }\n         return ints;\n     }\n     \n     private void writeCodeBands(final OutputStream out) throws IOException, Pack200Exception {\n         byte[] encodedBand = this.encodeBandInt(\"codeHeaders\", this.codeHeaders, Codec.BYTE1);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeHeaders[\" + this.codeHeaders.length);\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeHeaders[\" + this.codeHeaders.length + \"]\");\n         encodedBand = this.encodeBandInt(\"codeMaxStack\", this.codeMaxStack.toArray(), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeMaxStack[\" + this.codeMaxStack.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeMaxStack[\" + this.codeMaxStack.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"codeMaxLocals\", this.codeMaxLocals.toArray(), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeMaxLocals[\" + this.codeMaxLocals.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeMaxLocals[\" + this.codeMaxLocals.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"codeHandlerCount\", this.codeHandlerCount.toArray(), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeHandlerCount[\" + this.codeHandlerCount.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeHandlerCount[\" + this.codeHandlerCount.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"codeHandlerStartP\", this.integerListToArray(this.codeHandlerStartP), Codec.BCI5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeHandlerStartP[\" + this.codeHandlerStartP.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeHandlerStartP[\" + this.codeHandlerStartP.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"codeHandlerEndPO\", this.integerListToArray(this.codeHandlerEndPO), Codec.BRANCH5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeHandlerEndPO[\" + this.codeHandlerEndPO.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeHandlerEndPO[\" + this.codeHandlerEndPO.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"codeHandlerCatchPO\", this.integerListToArray(this.codeHandlerCatchPO), Codec.BRANCH5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeHandlerCatchPO[\" + this.codeHandlerCatchPO.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeHandlerCatchPO[\" + this.codeHandlerCatchPO.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"codeHandlerClass\", this.cpEntryOrNullListToArray(this.codeHandlerClass), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeHandlerClass[\" + this.codeHandlerClass.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeHandlerClass[\" + this.codeHandlerClass.size() + \"]\");\n         this.writeCodeAttributeBands(out);\n     }\n     \n     private void writeCodeAttributeBands(final OutputStream out) throws IOException, Pack200Exception {\n         byte[] encodedBand = this.encodeFlags(\"codeFlags\", this.longListToArray(this.codeFlags), Codec.UNSIGNED5, Codec.UNSIGNED5, this.segmentHeader.have_code_flags_hi());\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeFlags[\" + this.codeFlags.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from codeFlags[\" + this.codeFlags.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"code_attr_calls\", this.code_attr_calls, Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_attr_calls[\" + this.code_attr_calls.length);\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_attr_calls[\" + this.code_attr_calls.length + \"]\");\n         encodedBand = this.encodeBandInt(\"code_LineNumberTable_N\", this.codeLineNumberTableN.toArray(), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LineNumberTable_N[\" + this.codeLineNumberTableN.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LineNumberTable_N[\" + this.codeLineNumberTableN.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"code_LineNumberTable_bci_P\", this.integerListToArray(this.codeLineNumberTableBciP), Codec.BCI5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LineNumberTable_bci_P[\" + this.codeLineNumberTableBciP.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LineNumberTable_bci_P[\" + this.codeLineNumberTableBciP.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"code_LineNumberTable_line\", this.codeLineNumberTableLine.toArray(), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LineNumberTable_line[\" + this.codeLineNumberTableLine.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LineNumberTable_line[\" + this.codeLineNumberTableLine.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"code_LocalVariableTable_N\", this.codeLocalVariableTableN.toArray(), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTable_N[\" + this.codeLocalVariableTableN.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTable_N[\" + this.codeLocalVariableTableN.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"code_LocalVariableTable_bci_P\", this.integerListToArray(this.codeLocalVariableTableBciP), Codec.BCI5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTable_bci_P[\" + this.codeLocalVariableTableBciP.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTable_bci_P[\" + this.codeLocalVariableTableBciP.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"code_LocalVariableTable_span_O\", this.integerListToArray(this.codeLocalVariableTableSpanO), Codec.BRANCH5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTable_span_O[\" + this.codeLocalVariableTableSpanO.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTable_span_O[\" + this.codeLocalVariableTableSpanO.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"code_LocalVariableTable_name_RU\", this.cpEntryListToArray(this.codeLocalVariableTableNameRU), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTable_name_RU[\" + this.codeLocalVariableTableNameRU.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTable_name_RU[\" + this.codeLocalVariableTableNameRU.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"code_LocalVariableTable_type_RS\", this.cpEntryListToArray(this.codeLocalVariableTableTypeRS), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTable_type_RS[\" + this.codeLocalVariableTableTypeRS.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTable_type_RS[\" + this.codeLocalVariableTableTypeRS.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"code_LocalVariableTable_slot\", this.codeLocalVariableTableSlot.toArray(), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTable_slot[\" + this.codeLocalVariableTableSlot.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTable_slot[\" + this.codeLocalVariableTableSlot.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"code_LocalVariableTypeTable_N\", this.codeLocalVariableTypeTableN.toArray(), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTypeTable_N[\" + this.codeLocalVariableTypeTableN.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTypeTable_N[\" + this.codeLocalVariableTypeTableN.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"code_LocalVariableTypeTable_bci_P\", this.integerListToArray(this.codeLocalVariableTypeTableBciP), Codec.BCI5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTypeTable_bci_P[\" + this.codeLocalVariableTypeTableBciP.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTypeTable_bci_P[\" + this.codeLocalVariableTypeTableBciP.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"code_LocalVariableTypeTable_span_O\", this.integerListToArray(this.codeLocalVariableTypeTableSpanO), Codec.BRANCH5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTypeTable_span_O[\" + this.codeLocalVariableTypeTableSpanO.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTypeTable_span_O[\" + this.codeLocalVariableTypeTableSpanO.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"code_LocalVariableTypeTable_name_RU\", this.cpEntryListToArray(this.codeLocalVariableTypeTableNameRU), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTypeTable_name_RU[\" + this.codeLocalVariableTypeTableNameRU.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTypeTable_name_RU[\" + this.codeLocalVariableTypeTableNameRU.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"code_LocalVariableTypeTable_type_RS\", this.cpEntryListToArray(this.codeLocalVariableTypeTableTypeRS), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTypeTable_type_RS[\" + this.codeLocalVariableTypeTableTypeRS.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTypeTable_type_RS[\" + this.codeLocalVariableTypeTableTypeRS.size() + \"]\");\n         encodedBand = this.encodeBandInt(\"code_LocalVariableTypeTable_slot\", this.codeLocalVariableTypeTableSlot.toArray(), Codec.UNSIGNED5);\n         out.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTypeTable_slot[\" + this.codeLocalVariableTypeTableSlot.size());\n+        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from code_LocalVariableTypeTable_slot[\" + this.codeLocalVariableTypeTableSlot.size() + \"]\");\n         for (final NewAttributeBands bands : this.codeAttributeBands) {\n             bands.pack(out);\n         }\n     }\n     \n     public void addMethod(int flags, final String name, final String desc, final String signature, final String[] exceptions) {\n         final CPNameAndType nt = this.cpBands.getCPNameAndType(name, desc);\n@@ -823,15 +823,15 @@\n     }\n     \n     public void addSourceFile(final String source) {\n         String implicitSourceFileName = this.class_this[this.index].toString();\n         if (implicitSourceFileName.indexOf(36) != -1) {\n             implicitSourceFileName = implicitSourceFileName.substring(0, implicitSourceFileName.indexOf(36));\n         }\n-        implicitSourceFileName = implicitSourceFileName.substring(implicitSourceFileName.lastIndexOf(47) + 1) + \".java\";\n+        implicitSourceFileName = String.valueOf(implicitSourceFileName.substring(implicitSourceFileName.lastIndexOf(47) + 1)) + \".java\";\n         if (source.equals(implicitSourceFileName)) {\n             this.classSourceFile.add(null);\n         }\n         else {\n             this.classSourceFile.add(this.cpBands.getCPUtf8(source));\n         }\n         final long[] class_flags = this.class_flags;\n"}]}
