{"diffoscope-json-version": 1, "source1": "first/TestServletFilterConfiguration.class", "source2": "second/TestServletFilterConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,22 +7,22 @@\n import javax.servlet.FilterConfig;\n import org.apache.commons.configuration2.AbstractConfiguration;\n import org.apache.commons.configuration2.TestAbstractConfiguration;\n \n public class TestServletFilterConfiguration extends TestAbstractConfiguration\n {\n     protected AbstractConfiguration getConfiguration() {\n-        final TestServletFilterConfiguration.MockFilterConfig config = new TestServletFilterConfiguration.MockFilterConfig((TestServletFilterConfiguration.TestServletFilterConfiguration$1)null);\n-        config.setInitParameter(\"key1\", \"value1\");\n-        config.setInitParameter(\"key2\", \"value2\");\n-        config.setInitParameter(\"list\", \"value1, value2\");\n-        config.setInitParameter(\"listesc\", \"value1\\\\,value2\");\n-        final ServletFilterConfiguration resultConfig = new ServletFilterConfiguration((FilterConfig)config);\n-        resultConfig.setListDelimiterHandler((ListDelimiterHandler)new DefaultListDelimiterHandler(','));\n-        return (AbstractConfiguration)resultConfig;\n+        final TestServletFilterConfiguration.MockFilterConfig mockFilterConfig = new TestServletFilterConfiguration.MockFilterConfig((TestServletFilterConfiguration.TestServletFilterConfiguration$1)null);\n+        mockFilterConfig.setInitParameter(\"key1\", \"value1\");\n+        mockFilterConfig.setInitParameter(\"key2\", \"value2\");\n+        mockFilterConfig.setInitParameter(\"list\", \"value1, value2\");\n+        mockFilterConfig.setInitParameter(\"listesc\", \"value1\\\\,value2\");\n+        final ServletFilterConfiguration servletFilterConfiguration = new ServletFilterConfiguration((FilterConfig)mockFilterConfig);\n+        servletFilterConfiguration.setListDelimiterHandler((ListDelimiterHandler)new DefaultListDelimiterHandler(','));\n+        return (AbstractConfiguration)servletFilterConfiguration;\n     }\n     \n     protected AbstractConfiguration getEmptyConfiguration() {\n         return (AbstractConfiguration)new ServletFilterConfiguration((FilterConfig)new TestServletFilterConfiguration.MockFilterConfig((TestServletFilterConfiguration.TestServletFilterConfiguration$1)null));\n     }\n     \n     @Test(expected = UnsupportedOperationException.class)\n"}]}
