{"diffoscope-json-version": 1, "source1": "first/AttributeLayoutMap.class", "source2": "second/AttributeLayoutMap.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -25,30 +25,34 @@\n     public AttributeLayoutMap() throws Pack200Exception {\n         this.classLayouts = new HashMap<Integer, AttributeLayout>();\n         this.fieldLayouts = new HashMap<Integer, AttributeLayout>();\n         this.methodLayouts = new HashMap<Integer, AttributeLayout>();\n         this.codeLayouts = new HashMap<Integer, AttributeLayout>();\n         this.layouts = new Map[] { this.classLayouts, this.fieldLayouts, this.methodLayouts, this.codeLayouts };\n         this.layoutsToBands = new HashMap<AttributeLayout, NewAttributeBands>();\n-        for (final AttributeLayout defaultAttributeLayout : getDefaultAttributeLayouts()) {\n+        AttributeLayout[] defaultAttributeLayouts;\n+        for (int length = (defaultAttributeLayouts = getDefaultAttributeLayouts()).length, i = 0; i < length; ++i) {\n+            final AttributeLayout defaultAttributeLayout = defaultAttributeLayouts[i];\n             this.add(defaultAttributeLayout);\n         }\n     }\n     \n     public void add(final AttributeLayout layout) {\n         this.getLayout(layout.getContext()).put(Integer.valueOf(layout.getIndex()), layout);\n     }\n     \n     public void add(final AttributeLayout layout, final NewAttributeBands newBands) {\n         this.add(layout);\n         this.layoutsToBands.put(layout, newBands);\n     }\n     \n     public void checkMap() throws Pack200Exception {\n-        for (final Map<Integer, AttributeLayout> map : this.layouts) {\n+        Map[] layouts2;\n+        for (int length = (layouts2 = this.layouts).length, i = 0; i < length; ++i) {\n+            final Map<Integer, AttributeLayout> map = layouts2[i];\n             Collection<AttributeLayout> c = map.values();\n             if (!(c instanceof List)) {\n                 c = new ArrayList<AttributeLayout>(c);\n             }\n             final List<AttributeLayout> layouts = (List)c;\n             for (int j = 0; j < layouts.size(); ++j) {\n                 final AttributeLayout layout1 = (AttributeLayout)layouts.get(j);\n"}]}
