{"diffoscope-json-version": 1, "source1": "first/MetadataGeneratorLogger.class", "source2": "second/MetadataGeneratorLogger.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,49 +12,46 @@\n \n public class MetadataGeneratorLogger extends AbstractAutomaticBean implements AuditListener\n {\n     private final PrintWriter errorWriter;\n     private final AuditEventFormatter formatter;\n     private final boolean closeErrorWriter;\n     \n-    public MetadataGeneratorLogger(final OutputStream outputStream, final AbstractAutomaticBean.OutputStreamOptions outputStreamOptions) {\n-        final Writer errorStreamWriter = new OutputStreamWriter(outputStream, StandardCharsets.UTF_8);\n-        this.errorWriter = new PrintWriter(errorStreamWriter);\n+    public MetadataGeneratorLogger(final OutputStream out, final AbstractAutomaticBean.OutputStreamOptions outputStreamOptions) {\n+        this.errorWriter = new PrintWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8));\n         this.formatter = (AuditEventFormatter)new AuditEventDefaultFormatter();\n         this.closeErrorWriter = (outputStreamOptions == AbstractAutomaticBean.OutputStreamOptions.CLOSE);\n     }\n     \n-    public void auditStarted(final AuditEvent event) {\n+    public void auditStarted(final AuditEvent auditEvent) {\n         this.errorWriter.flush();\n     }\n     \n-    public void auditFinished(final AuditEvent event) {\n+    public void auditFinished(final AuditEvent auditEvent) {\n         this.errorWriter.flush();\n         if (this.closeErrorWriter) {\n             this.errorWriter.close();\n         }\n     }\n     \n-    public void fileStarted(final AuditEvent event) {\n+    public void fileStarted(final AuditEvent auditEvent) {\n     }\n     \n-    public void fileFinished(final AuditEvent event) {\n+    public void fileFinished(final AuditEvent auditEvent) {\n         this.errorWriter.flush();\n     }\n     \n-    public void addError(final AuditEvent event) {\n-        final SeverityLevel severityLevel = event.getSeverityLevel();\n-        if (severityLevel != SeverityLevel.IGNORE) {\n-            final String errorMessage = this.formatter.format(event);\n-            this.errorWriter.println(errorMessage);\n+    public void addError(final AuditEvent auditEvent) {\n+        if (auditEvent.getSeverityLevel() != SeverityLevel.IGNORE) {\n+            this.errorWriter.println(this.formatter.format(auditEvent));\n         }\n     }\n     \n-    public void addException(final AuditEvent event, final Throwable throwable) {\n+    public void addException(final AuditEvent auditEvent, final Throwable t) {\n         synchronized (this.errorWriter) {\n-            throwable.printStackTrace(this.errorWriter);\n+            t.printStackTrace(this.errorWriter);\n         }\n     }\n     \n     protected void finishLocalSetup() {\n     }\n }\n"}]}
