{"diffoscope-json-version": 1, "source1": "first/CharSequenceTranslator.class", "source2": "second/CharSequenceTranslator.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,69 +9,69 @@\n @Deprecated\n public abstract class CharSequenceTranslator\n {\n     static final char[] HEX_DIGITS;\n     \n     public abstract int translate(final CharSequence p0, final int p1, final Writer p2) throws IOException;\n     \n-    public final String translate(final CharSequence input) {\n-        if (input == null) {\n+    public final String translate(final CharSequence charSequence) {\n+        if (charSequence == null) {\n             return null;\n         }\n         try {\n-            final StringWriter writer = new StringWriter(input.length() * 2);\n-            this.translate(input, writer);\n-            return writer.toString();\n+            final StringWriter stringWriter = new StringWriter(charSequence.length() * 2);\n+            this.translate(charSequence, stringWriter);\n+            return stringWriter.toString();\n         }\n-        catch (final IOException ioe) {\n-            throw new RuntimeException(ioe);\n+        catch (final IOException cause) {\n+            throw new RuntimeException(cause);\n         }\n     }\n     \n-    public final void translate(final CharSequence input, final Writer out) throws IOException {\n-        if (out == null) {\n+    public final void translate(final CharSequence seq, final Writer writer) throws IOException {\n+        if (writer == null) {\n             throw new IllegalArgumentException(\"The Writer must not be null\");\n         }\n-        if (input == null) {\n+        if (seq == null) {\n             return;\n         }\n-        int pos = 0;\n-        final int len = input.length();\n-        while (pos < len) {\n-            final int consumed = this.translate(input, pos, out);\n-            if (consumed == 0) {\n-                final char c1 = input.charAt(pos);\n-                out.write(c1);\n-                ++pos;\n-                if (!Character.isHighSurrogate(c1) || pos >= len) {\n+        int i = 0;\n+        final int length = seq.length();\n+        while (i < length) {\n+            final int translate = this.translate(seq, i, writer);\n+            if (translate == 0) {\n+                final char char1 = seq.charAt(i);\n+                writer.write(char1);\n+                ++i;\n+                if (!Character.isHighSurrogate(char1) || i >= length) {\n                     continue;\n                 }\n-                final char c2 = input.charAt(pos);\n-                if (!Character.isLowSurrogate(c2)) {\n+                final char char2 = seq.charAt(i);\n+                if (!Character.isLowSurrogate(char2)) {\n                     continue;\n                 }\n-                out.write(c2);\n-                ++pos;\n+                writer.write(char2);\n+                ++i;\n             }\n             else {\n-                for (int pt = 0; pt < consumed; ++pt) {\n-                    pos += Character.charCount(Character.codePointAt(input, pos));\n+                for (int j = 0; j < translate; ++j) {\n+                    i += Character.charCount(Character.codePointAt(seq, i));\n                 }\n             }\n         }\n     }\n     \n-    public final CharSequenceTranslator with(final CharSequenceTranslator... translators) {\n-        final CharSequenceTranslator[] newArray = new CharSequenceTranslator[translators.length + 1];\n-        newArray[0] = this;\n-        System.arraycopy(translators, 0, newArray, 1, translators.length);\n-        return (CharSequenceTranslator)new AggregateTranslator(newArray);\n+    public final CharSequenceTranslator with(final CharSequenceTranslator... array) {\n+        final CharSequenceTranslator[] array2 = new CharSequenceTranslator[array.length + 1];\n+        array2[0] = this;\n+        System.arraycopy(array, 0, array2, 1, array.length);\n+        return (CharSequenceTranslator)new AggregateTranslator(array2);\n     }\n     \n-    public static String hex(final int codepoint) {\n-        return Integer.toHexString(codepoint).toUpperCase(Locale.ENGLISH);\n+    public static String hex(final int i) {\n+        return Integer.toHexString(i).toUpperCase(Locale.ENGLISH);\n     }\n     \n     static {\n         HEX_DIGITS = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };\n     }\n }\n"}]}
