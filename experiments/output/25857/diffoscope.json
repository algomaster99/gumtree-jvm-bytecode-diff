{"diffoscope-json-version": 1, "source1": "first/Hex.class", "source2": "second/Hex.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,229 +1,229 @@\n-  SHA-256 checksum 53c4b6c1384cedee654c29ae5bce53ff5e5b4ffe688409fd6818292c081a257f\n+  SHA-256 checksum a102d477a3eb3771490e8747835ff5f7d49f4cee79051342ec950293d52611cd\n   Compiled from \"Hex.java\"\n public class org.apache.commons.codec.binary.Hex implements org.apache.commons.codec.BinaryEncoder,org.apache.commons.codec.BinaryDecoder\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #55                         // org/apache/commons/codec/binary/Hex\n-  super_class: #56                        // java/lang/Object\n+  this_class: #10                         // org/apache/commons/codec/binary/Hex\n+  super_class: #91                        // java/lang/Object\n   interfaces: 2, fields: 5, methods: 26, attributes: 1\n Constant pool:\n-    #1 = Class              #135          // org/apache/commons/codec/CharEncoding\n-    #2 = Methodref          #15.#136      // java/lang/String.toCharArray:()[C\n-    #3 = Methodref          #55.#137      // org/apache/commons/codec/binary/Hex.decodeHex:([C)[B\n-    #4 = Class              #138          // org/apache/commons/codec/DecoderException\n-    #5 = String             #139          // Odd number of characters.\n-    #6 = Methodref          #4.#140       // org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;)V\n-    #7 = Methodref          #55.#141      // org/apache/commons/codec/binary/Hex.toDigit:(CI)I\n-    #8 = Methodref          #55.#142      // org/apache/commons/codec/binary/Hex.encodeHex:([BZ)[C\n-    #9 = Methodref          #55.#143      // org/apache/commons/codec/binary/Hex.encodeHex:(Ljava/nio/ByteBuffer;Z)[C\n-   #10 = Fieldref           #55.#144      // org/apache/commons/codec/binary/Hex.DIGITS_LOWER:[C\n-   #11 = Fieldref           #55.#145      // org/apache/commons/codec/binary/Hex.DIGITS_UPPER:[C\n-   #12 = Methodref          #55.#146      // org/apache/commons/codec/binary/Hex.encodeHex:([B[C)[C\n-   #13 = Methodref          #55.#147      // org/apache/commons/codec/binary/Hex.encodeHex:(Ljava/nio/ByteBuffer;[C)[C\n-   #14 = Methodref          #38.#148      // java/nio/ByteBuffer.array:()[B\n-   #15 = Class              #149          // java/lang/String\n-   #16 = Methodref          #55.#150      // org/apache/commons/codec/binary/Hex.encodeHex:([B)[C\n-   #17 = Methodref          #15.#151      // java/lang/String.\"<init>\":([C)V\n-   #18 = Methodref          #55.#152      // org/apache/commons/codec/binary/Hex.encodeHex:(Ljava/nio/ByteBuffer;)[C\n-   #19 = Methodref          #153.#154     // java/lang/Character.digit:(CI)I\n-   #20 = Class              #155          // java/lang/StringBuilder\n-   #21 = Methodref          #20.#156      // java/lang/StringBuilder.\"<init>\":()V\n-   #22 = String             #157          // Illegal hexadecimal character\n-   #23 = Methodref          #20.#158      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #24 = Methodref          #20.#159      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n-   #25 = String             #160          //  at index\n-   #26 = Methodref          #20.#161      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #27 = Methodref          #20.#162      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #28 = Methodref          #56.#156      // java/lang/Object.\"<init>\":()V\n-   #29 = Fieldref           #55.#163      // org/apache/commons/codec/binary/Hex.DEFAULT_CHARSET:Ljava/nio/charset/Charset;\n-   #30 = Fieldref           #55.#164      // org/apache/commons/codec/binary/Hex.charset:Ljava/nio/charset/Charset;\n-   #31 = Methodref          #165.#166     // java/nio/charset/Charset.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n-   #32 = Methodref          #55.#167      // org/apache/commons/codec/binary/Hex.\"<init>\":(Ljava/nio/charset/Charset;)V\n-   #33 = Methodref          #55.#168      // org/apache/commons/codec/binary/Hex.getCharset:()Ljava/nio/charset/Charset;\n-   #34 = Methodref          #15.#169      // java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n-   #35 = Methodref          #55.#170      // org/apache/commons/codec/binary/Hex.decode:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #36 = Class              #83           // \"[B\"\n-   #37 = Methodref          #55.#171      // org/apache/commons/codec/binary/Hex.decode:([B)[B\n-   #38 = Class              #172          // java/nio/ByteBuffer\n-   #39 = Methodref          #55.#173      // org/apache/commons/codec/binary/Hex.decode:(Ljava/nio/ByteBuffer;)[B\n-   #40 = Class              #66           // \"[C\"\n-   #41 = Class              #174          // java/lang/ClassCastException\n-   #42 = Methodref          #41.#175      // java/lang/ClassCastException.getMessage:()Ljava/lang/String;\n-   #43 = Methodref          #4.#176       // org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #44 = Methodref          #55.#177      // org/apache/commons/codec/binary/Hex.encodeHexString:([B)Ljava/lang/String;\n-   #45 = Methodref          #15.#178      // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n-   #46 = Methodref          #55.#179      // org/apache/commons/codec/binary/Hex.encodeHexString:(Ljava/nio/ByteBuffer;)Ljava/lang/String;\n-   #47 = Class              #180          // org/apache/commons/codec/EncoderException\n-   #48 = Methodref          #47.#176      // org/apache/commons/codec/EncoderException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #49 = Methodref          #165.#181     // java/nio/charset/Charset.name:()Ljava/lang/String;\n-   #50 = Methodref          #56.#162      // java/lang/Object.toString:()Ljava/lang/String;\n-   #51 = String             #182          // [charsetName=\n-   #52 = Methodref          #20.#183      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #53 = String             #184          // ]\n-   #54 = Fieldref           #185.#186     // org/apache/commons/codec/Charsets.UTF_8:Ljava/nio/charset/Charset;\n-   #55 = Class              #187          // org/apache/commons/codec/binary/Hex\n-   #56 = Class              #188          // java/lang/Object\n-   #57 = Class              #189          // org/apache/commons/codec/BinaryEncoder\n-   #58 = Class              #190          // org/apache/commons/codec/BinaryDecoder\n-   #59 = Utf8               DEFAULT_CHARSET\n-   #60 = Utf8               Ljava/nio/charset/Charset;\n-   #61 = Utf8               DEFAULT_CHARSET_NAME\n-   #62 = Utf8               Ljava/lang/String;\n-   #63 = Utf8               ConstantValue\n-   #64 = String             #191          // UTF-8\n-   #65 = Utf8               DIGITS_LOWER\n-   #66 = Utf8               [C\n-   #67 = Utf8               DIGITS_UPPER\n-   #68 = Utf8               charset\n-   #69 = Utf8               decodeHex\n-   #70 = Utf8               (Ljava/lang/String;)[B\n-   #71 = Utf8               Code\n-   #72 = Utf8               LineNumberTable\n-   #73 = Utf8               LocalVariableTable\n-   #74 = Utf8               data\n-   #75 = Utf8               Exceptions\n-   #76 = Utf8               ([C)[B\n-   #77 = Utf8               f\n-   #78 = Utf8               I\n-   #79 = Utf8               i\n-   #80 = Utf8               j\n-   #81 = Utf8               len\n-   #82 = Utf8               out\n-   #83 = Utf8               [B\n-   #84 = Utf8               StackMapTable\n-   #85 = Utf8               encodeHex\n-   #86 = Utf8               ([B)[C\n-   #87 = Utf8               (Ljava/nio/ByteBuffer;)[C\n-   #88 = Utf8               Ljava/nio/ByteBuffer;\n-   #89 = Utf8               ([BZ)[C\n-   #90 = Utf8               toLowerCase\n-   #91 = Utf8               Z\n-   #92 = Utf8               (Ljava/nio/ByteBuffer;Z)[C\n-   #93 = Utf8               ([B[C)[C\n-   #94 = Utf8               toDigits\n-   #95 = Utf8               l\n-   #96 = Utf8               (Ljava/nio/ByteBuffer;[C)[C\n-   #97 = Utf8               encodeHexString\n-   #98 = Utf8               ([B)Ljava/lang/String;\n-   #99 = Utf8               ([BZ)Ljava/lang/String;\n-  #100 = Utf8               (Ljava/nio/ByteBuffer;)Ljava/lang/String;\n-  #101 = Utf8               (Ljava/nio/ByteBuffer;Z)Ljava/lang/String;\n-  #102 = Utf8               toDigit\n-  #103 = Utf8               (CI)I\n-  #104 = Utf8               ch\n-  #105 = Utf8               C\n-  #106 = Utf8               index\n-  #107 = Utf8               digit\n-  #108 = Utf8               <init>\n-  #109 = Utf8               ()V\n-  #110 = Utf8               this\n-  #111 = Utf8               Lorg/apache/commons/codec/binary/Hex;\n-  #112 = Utf8               (Ljava/nio/charset/Charset;)V\n-  #113 = Utf8               (Ljava/lang/String;)V\n-  #114 = Utf8               charsetName\n-  #115 = Utf8               decode\n-  #116 = Utf8               ([B)[B\n-  #117 = Utf8               array\n-  #118 = Utf8               (Ljava/nio/ByteBuffer;)[B\n-  #119 = Utf8               buffer\n-  #120 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #121 = Utf8               e\n-  #122 = Utf8               Ljava/lang/ClassCastException;\n-  #123 = Utf8               object\n-  #124 = Utf8               Ljava/lang/Object;\n-  #125 = Utf8               encode\n-  #126 = Utf8               byteArray\n-  #127 = Utf8               getCharset\n-  #128 = Utf8               ()Ljava/nio/charset/Charset;\n-  #129 = Utf8               getCharsetName\n-  #130 = Utf8               ()Ljava/lang/String;\n-  #131 = Utf8               toString\n-  #132 = Utf8               <clinit>\n-  #133 = Utf8               SourceFile\n-  #134 = Utf8               Hex.java\n-  #135 = Utf8               org/apache/commons/codec/CharEncoding\n-  #136 = NameAndType        #192:#193     // toCharArray:()[C\n-  #137 = NameAndType        #69:#76       // decodeHex:([C)[B\n-  #138 = Utf8               org/apache/commons/codec/DecoderException\n-  #139 = Utf8               Odd number of characters.\n-  #140 = NameAndType        #108:#113     // \"<init>\":(Ljava/lang/String;)V\n-  #141 = NameAndType        #102:#103     // toDigit:(CI)I\n-  #142 = NameAndType        #85:#89       // encodeHex:([BZ)[C\n-  #143 = NameAndType        #85:#92       // encodeHex:(Ljava/nio/ByteBuffer;Z)[C\n-  #144 = NameAndType        #65:#66       // DIGITS_LOWER:[C\n-  #145 = NameAndType        #67:#66       // DIGITS_UPPER:[C\n-  #146 = NameAndType        #85:#93       // encodeHex:([B[C)[C\n-  #147 = NameAndType        #85:#96       // encodeHex:(Ljava/nio/ByteBuffer;[C)[C\n-  #148 = NameAndType        #117:#194     // array:()[B\n-  #149 = Utf8               java/lang/String\n-  #150 = NameAndType        #85:#86       // encodeHex:([B)[C\n-  #151 = NameAndType        #108:#195     // \"<init>\":([C)V\n-  #152 = NameAndType        #85:#87       // encodeHex:(Ljava/nio/ByteBuffer;)[C\n-  #153 = Class              #196          // java/lang/Character\n-  #154 = NameAndType        #107:#103     // digit:(CI)I\n-  #155 = Utf8               java/lang/StringBuilder\n-  #156 = NameAndType        #108:#109     // \"<init>\":()V\n-  #157 = Utf8               Illegal hexadecimal character\n-  #158 = NameAndType        #197:#198     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #159 = NameAndType        #197:#199     // append:(C)Ljava/lang/StringBuilder;\n-  #160 = Utf8                at index\n-  #161 = NameAndType        #197:#200     // append:(I)Ljava/lang/StringBuilder;\n-  #162 = NameAndType        #131:#130     // toString:()Ljava/lang/String;\n-  #163 = NameAndType        #59:#60       // DEFAULT_CHARSET:Ljava/nio/charset/Charset;\n-  #164 = NameAndType        #68:#60       // charset:Ljava/nio/charset/Charset;\n-  #165 = Class              #201          // java/nio/charset/Charset\n-  #166 = NameAndType        #202:#203     // forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n-  #167 = NameAndType        #108:#112     // \"<init>\":(Ljava/nio/charset/Charset;)V\n-  #168 = NameAndType        #127:#128     // getCharset:()Ljava/nio/charset/Charset;\n-  #169 = NameAndType        #108:#204     // \"<init>\":([BLjava/nio/charset/Charset;)V\n-  #170 = NameAndType        #115:#120     // decode:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #171 = NameAndType        #115:#116     // decode:([B)[B\n-  #172 = Utf8               java/nio/ByteBuffer\n-  #173 = NameAndType        #115:#118     // decode:(Ljava/nio/ByteBuffer;)[B\n-  #174 = Utf8               java/lang/ClassCastException\n-  #175 = NameAndType        #205:#130     // getMessage:()Ljava/lang/String;\n-  #176 = NameAndType        #108:#206     // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #177 = NameAndType        #97:#98       // encodeHexString:([B)Ljava/lang/String;\n-  #178 = NameAndType        #207:#208     // getBytes:(Ljava/nio/charset/Charset;)[B\n-  #179 = NameAndType        #97:#100      // encodeHexString:(Ljava/nio/ByteBuffer;)Ljava/lang/String;\n-  #180 = Utf8               org/apache/commons/codec/EncoderException\n-  #181 = NameAndType        #209:#130     // name:()Ljava/lang/String;\n-  #182 = Utf8               [charsetName=\n-  #183 = NameAndType        #197:#210     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #184 = Utf8               ]\n-  #185 = Class              #211          // org/apache/commons/codec/Charsets\n-  #186 = NameAndType        #212:#60      // UTF_8:Ljava/nio/charset/Charset;\n-  #187 = Utf8               org/apache/commons/codec/binary/Hex\n-  #188 = Utf8               java/lang/Object\n-  #189 = Utf8               org/apache/commons/codec/BinaryEncoder\n-  #190 = Utf8               org/apache/commons/codec/BinaryDecoder\n-  #191 = Utf8               UTF-8\n-  #192 = Utf8               toCharArray\n-  #193 = Utf8               ()[C\n-  #194 = Utf8               ()[B\n-  #195 = Utf8               ([C)V\n-  #196 = Utf8               java/lang/Character\n-  #197 = Utf8               append\n-  #198 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #199 = Utf8               (C)Ljava/lang/StringBuilder;\n-  #200 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #201 = Utf8               java/nio/charset/Charset\n-  #202 = Utf8               forName\n-  #203 = Utf8               (Ljava/lang/String;)Ljava/nio/charset/Charset;\n-  #204 = Utf8               ([BLjava/nio/charset/Charset;)V\n-  #205 = Utf8               getMessage\n-  #206 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #207 = Utf8               getBytes\n-  #208 = Utf8               (Ljava/nio/charset/Charset;)[B\n-  #209 = Utf8               name\n-  #210 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #211 = Utf8               org/apache/commons/codec/Charsets\n-  #212 = Utf8               UTF_8\n+    #1 = Class              #2            // org/apache/commons/codec/CharEncoding\n+    #2 = Utf8               org/apache/commons/codec/CharEncoding\n+    #3 = Methodref          #4.#5         // java/lang/String.toCharArray:()[C\n+    #4 = Class              #6            // java/lang/String\n+    #5 = NameAndType        #7:#8         // toCharArray:()[C\n+    #6 = Utf8               java/lang/String\n+    #7 = Utf8               toCharArray\n+    #8 = Utf8               ()[C\n+    #9 = Methodref          #10.#11       // org/apache/commons/codec/binary/Hex.decodeHex:([C)[B\n+   #10 = Class              #12           // org/apache/commons/codec/binary/Hex\n+   #11 = NameAndType        #13:#14       // decodeHex:([C)[B\n+   #12 = Utf8               org/apache/commons/codec/binary/Hex\n+   #13 = Utf8               decodeHex\n+   #14 = Utf8               ([C)[B\n+   #15 = Class              #16           // org/apache/commons/codec/DecoderException\n+   #16 = Utf8               org/apache/commons/codec/DecoderException\n+   #17 = String             #18           // Odd number of characters.\n+   #18 = Utf8               Odd number of characters.\n+   #19 = Methodref          #15.#20       // org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;)V\n+   #20 = NameAndType        #21:#22       // \"<init>\":(Ljava/lang/String;)V\n+   #21 = Utf8               <init>\n+   #22 = Utf8               (Ljava/lang/String;)V\n+   #23 = Methodref          #10.#24       // org/apache/commons/codec/binary/Hex.toDigit:(CI)I\n+   #24 = NameAndType        #25:#26       // toDigit:(CI)I\n+   #25 = Utf8               toDigit\n+   #26 = Utf8               (CI)I\n+   #27 = Methodref          #10.#28       // org/apache/commons/codec/binary/Hex.encodeHex:([BZ)[C\n+   #28 = NameAndType        #29:#30       // encodeHex:([BZ)[C\n+   #29 = Utf8               encodeHex\n+   #30 = Utf8               ([BZ)[C\n+   #31 = Methodref          #10.#32       // org/apache/commons/codec/binary/Hex.encodeHex:(Ljava/nio/ByteBuffer;Z)[C\n+   #32 = NameAndType        #29:#33       // encodeHex:(Ljava/nio/ByteBuffer;Z)[C\n+   #33 = Utf8               (Ljava/nio/ByteBuffer;Z)[C\n+   #34 = Fieldref           #10.#35       // org/apache/commons/codec/binary/Hex.DIGITS_LOWER:[C\n+   #35 = NameAndType        #36:#37       // DIGITS_LOWER:[C\n+   #36 = Utf8               DIGITS_LOWER\n+   #37 = Utf8               [C\n+   #38 = Fieldref           #10.#39       // org/apache/commons/codec/binary/Hex.DIGITS_UPPER:[C\n+   #39 = NameAndType        #40:#37       // DIGITS_UPPER:[C\n+   #40 = Utf8               DIGITS_UPPER\n+   #41 = Methodref          #10.#42       // org/apache/commons/codec/binary/Hex.encodeHex:([B[C)[C\n+   #42 = NameAndType        #29:#43       // encodeHex:([B[C)[C\n+   #43 = Utf8               ([B[C)[C\n+   #44 = Methodref          #10.#45       // org/apache/commons/codec/binary/Hex.encodeHex:(Ljava/nio/ByteBuffer;[C)[C\n+   #45 = NameAndType        #29:#46       // encodeHex:(Ljava/nio/ByteBuffer;[C)[C\n+   #46 = Utf8               (Ljava/nio/ByteBuffer;[C)[C\n+   #47 = Methodref          #48.#49       // java/nio/ByteBuffer.array:()[B\n+   #48 = Class              #50           // java/nio/ByteBuffer\n+   #49 = NameAndType        #51:#52       // array:()[B\n+   #50 = Utf8               java/nio/ByteBuffer\n+   #51 = Utf8               array\n+   #52 = Utf8               ()[B\n+   #53 = Methodref          #10.#54       // org/apache/commons/codec/binary/Hex.encodeHex:([B)[C\n+   #54 = NameAndType        #29:#55       // encodeHex:([B)[C\n+   #55 = Utf8               ([B)[C\n+   #56 = Methodref          #4.#57        // java/lang/String.\"<init>\":([C)V\n+   #57 = NameAndType        #21:#58       // \"<init>\":([C)V\n+   #58 = Utf8               ([C)V\n+   #59 = Methodref          #10.#60       // org/apache/commons/codec/binary/Hex.encodeHex:(Ljava/nio/ByteBuffer;)[C\n+   #60 = NameAndType        #29:#61       // encodeHex:(Ljava/nio/ByteBuffer;)[C\n+   #61 = Utf8               (Ljava/nio/ByteBuffer;)[C\n+   #62 = Methodref          #63.#64       // java/lang/Character.digit:(CI)I\n+   #63 = Class              #65           // java/lang/Character\n+   #64 = NameAndType        #66:#26       // digit:(CI)I\n+   #65 = Utf8               java/lang/Character\n+   #66 = Utf8               digit\n+   #67 = Class              #68           // java/lang/StringBuilder\n+   #68 = Utf8               java/lang/StringBuilder\n+   #69 = Methodref          #67.#70       // java/lang/StringBuilder.\"<init>\":()V\n+   #70 = NameAndType        #21:#71       // \"<init>\":()V\n+   #71 = Utf8               ()V\n+   #72 = String             #73           // Illegal hexadecimal character\n+   #73 = Utf8               Illegal hexadecimal character\n+   #74 = Methodref          #67.#75       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #75 = NameAndType        #76:#77       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #76 = Utf8               append\n+   #77 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #78 = Methodref          #67.#79       // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+   #79 = NameAndType        #76:#80       // append:(C)Ljava/lang/StringBuilder;\n+   #80 = Utf8               (C)Ljava/lang/StringBuilder;\n+   #81 = String             #82           //  at index\n+   #82 = Utf8                at index\n+   #83 = Methodref          #67.#84       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #84 = NameAndType        #76:#85       // append:(I)Ljava/lang/StringBuilder;\n+   #85 = Utf8               (I)Ljava/lang/StringBuilder;\n+   #86 = Methodref          #67.#87       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #87 = NameAndType        #88:#89       // toString:()Ljava/lang/String;\n+   #88 = Utf8               toString\n+   #89 = Utf8               ()Ljava/lang/String;\n+   #90 = Methodref          #91.#70       // java/lang/Object.\"<init>\":()V\n+   #91 = Class              #92           // java/lang/Object\n+   #92 = Utf8               java/lang/Object\n+   #93 = Fieldref           #10.#94       // org/apache/commons/codec/binary/Hex.DEFAULT_CHARSET:Ljava/nio/charset/Charset;\n+   #94 = NameAndType        #95:#96       // DEFAULT_CHARSET:Ljava/nio/charset/Charset;\n+   #95 = Utf8               DEFAULT_CHARSET\n+   #96 = Utf8               Ljava/nio/charset/Charset;\n+   #97 = Fieldref           #10.#98       // org/apache/commons/codec/binary/Hex.charset:Ljava/nio/charset/Charset;\n+   #98 = NameAndType        #99:#96       // charset:Ljava/nio/charset/Charset;\n+   #99 = Utf8               charset\n+  #100 = Methodref          #101.#102     // java/nio/charset/Charset.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n+  #101 = Class              #103          // java/nio/charset/Charset\n+  #102 = NameAndType        #104:#105     // forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n+  #103 = Utf8               java/nio/charset/Charset\n+  #104 = Utf8               forName\n+  #105 = Utf8               (Ljava/lang/String;)Ljava/nio/charset/Charset;\n+  #106 = Methodref          #10.#107      // org/apache/commons/codec/binary/Hex.\"<init>\":(Ljava/nio/charset/Charset;)V\n+  #107 = NameAndType        #21:#108      // \"<init>\":(Ljava/nio/charset/Charset;)V\n+  #108 = Utf8               (Ljava/nio/charset/Charset;)V\n+  #109 = Methodref          #10.#110      // org/apache/commons/codec/binary/Hex.getCharset:()Ljava/nio/charset/Charset;\n+  #110 = NameAndType        #111:#112     // getCharset:()Ljava/nio/charset/Charset;\n+  #111 = Utf8               getCharset\n+  #112 = Utf8               ()Ljava/nio/charset/Charset;\n+  #113 = Methodref          #4.#114       // java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n+  #114 = NameAndType        #21:#115      // \"<init>\":([BLjava/nio/charset/Charset;)V\n+  #115 = Utf8               ([BLjava/nio/charset/Charset;)V\n+  #116 = Methodref          #10.#117      // org/apache/commons/codec/binary/Hex.decode:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #117 = NameAndType        #118:#119     // decode:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #118 = Utf8               decode\n+  #119 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #120 = Class              #121          // \"[B\"\n+  #121 = Utf8               [B\n+  #122 = Methodref          #10.#123      // org/apache/commons/codec/binary/Hex.decode:([B)[B\n+  #123 = NameAndType        #118:#124     // decode:([B)[B\n+  #124 = Utf8               ([B)[B\n+  #125 = Methodref          #10.#126      // org/apache/commons/codec/binary/Hex.decode:(Ljava/nio/ByteBuffer;)[B\n+  #126 = NameAndType        #118:#127     // decode:(Ljava/nio/ByteBuffer;)[B\n+  #127 = Utf8               (Ljava/nio/ByteBuffer;)[B\n+  #128 = Class              #37           // \"[C\"\n+  #129 = Class              #130          // java/lang/ClassCastException\n+  #130 = Utf8               java/lang/ClassCastException\n+  #131 = Methodref          #129.#132     // java/lang/ClassCastException.getMessage:()Ljava/lang/String;\n+  #132 = NameAndType        #133:#89      // getMessage:()Ljava/lang/String;\n+  #133 = Utf8               getMessage\n+  #134 = Methodref          #15.#135      // org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #135 = NameAndType        #21:#136      // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #136 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #137 = Methodref          #10.#138      // org/apache/commons/codec/binary/Hex.encodeHexString:([B)Ljava/lang/String;\n+  #138 = NameAndType        #139:#140     // encodeHexString:([B)Ljava/lang/String;\n+  #139 = Utf8               encodeHexString\n+  #140 = Utf8               ([B)Ljava/lang/String;\n+  #141 = Methodref          #4.#142       // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n+  #142 = NameAndType        #143:#144     // getBytes:(Ljava/nio/charset/Charset;)[B\n+  #143 = Utf8               getBytes\n+  #144 = Utf8               (Ljava/nio/charset/Charset;)[B\n+  #145 = Methodref          #10.#146      // org/apache/commons/codec/binary/Hex.encodeHexString:(Ljava/nio/ByteBuffer;)Ljava/lang/String;\n+  #146 = NameAndType        #139:#147     // encodeHexString:(Ljava/nio/ByteBuffer;)Ljava/lang/String;\n+  #147 = Utf8               (Ljava/nio/ByteBuffer;)Ljava/lang/String;\n+  #148 = Class              #149          // org/apache/commons/codec/EncoderException\n+  #149 = Utf8               org/apache/commons/codec/EncoderException\n+  #150 = Methodref          #148.#135     // org/apache/commons/codec/EncoderException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #151 = Methodref          #101.#152     // java/nio/charset/Charset.name:()Ljava/lang/String;\n+  #152 = NameAndType        #153:#89      // name:()Ljava/lang/String;\n+  #153 = Utf8               name\n+  #154 = Methodref          #91.#87       // java/lang/Object.toString:()Ljava/lang/String;\n+  #155 = String             #156          // [charsetName=\n+  #156 = Utf8               [charsetName=\n+  #157 = Methodref          #67.#158      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #158 = NameAndType        #76:#159      // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #159 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #160 = String             #161          // ]\n+  #161 = Utf8               ]\n+  #162 = Fieldref           #163.#164     // org/apache/commons/codec/Charsets.UTF_8:Ljava/nio/charset/Charset;\n+  #163 = Class              #165          // org/apache/commons/codec/Charsets\n+  #164 = NameAndType        #166:#96      // UTF_8:Ljava/nio/charset/Charset;\n+  #165 = Utf8               org/apache/commons/codec/Charsets\n+  #166 = Utf8               UTF_8\n+  #167 = Class              #168          // org/apache/commons/codec/BinaryEncoder\n+  #168 = Utf8               org/apache/commons/codec/BinaryEncoder\n+  #169 = Class              #170          // org/apache/commons/codec/BinaryDecoder\n+  #170 = Utf8               org/apache/commons/codec/BinaryDecoder\n+  #171 = Utf8               DEFAULT_CHARSET_NAME\n+  #172 = Utf8               Ljava/lang/String;\n+  #173 = Utf8               ConstantValue\n+  #174 = String             #175          // UTF-8\n+  #175 = Utf8               UTF-8\n+  #176 = Utf8               (Ljava/lang/String;)[B\n+  #177 = Utf8               Code\n+  #178 = Utf8               LineNumberTable\n+  #179 = Utf8               LocalVariableTable\n+  #180 = Utf8               data\n+  #181 = Utf8               Exceptions\n+  #182 = Utf8               f\n+  #183 = Utf8               I\n+  #184 = Utf8               i\n+  #185 = Utf8               j\n+  #186 = Utf8               len\n+  #187 = Utf8               out\n+  #188 = Utf8               StackMapTable\n+  #189 = Utf8               Ljava/nio/ByteBuffer;\n+  #190 = Utf8               toLowerCase\n+  #191 = Utf8               Z\n+  #192 = Utf8               toDigits\n+  #193 = Utf8               l\n+  #194 = Utf8               ([BZ)Ljava/lang/String;\n+  #195 = Utf8               (Ljava/nio/ByteBuffer;Z)Ljava/lang/String;\n+  #196 = Utf8               ch\n+  #197 = Utf8               C\n+  #198 = Utf8               index\n+  #199 = Utf8               this\n+  #200 = Utf8               Lorg/apache/commons/codec/binary/Hex;\n+  #201 = Utf8               charsetName\n+  #202 = Utf8               buffer\n+  #203 = Utf8               e\n+  #204 = Utf8               Ljava/lang/ClassCastException;\n+  #205 = Utf8               object\n+  #206 = Utf8               Ljava/lang/Object;\n+  #207 = Utf8               encode\n+  #208 = Utf8               byteArray\n+  #209 = Utf8               getCharsetName\n+  #210 = Utf8               <clinit>\n+  #211 = Utf8               SourceFile\n+  #212 = Utf8               Hex.java\n {\n   public static final java.nio.charset.Charset DEFAULT_CHARSET;\n     descriptor: Ljava/nio/charset/Charset;\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n \n   public static final java.lang.String DEFAULT_CHARSET_NAME = \"UTF-8\";\n     descriptor: Ljava/lang/String;\n@@ -244,16 +244,16 @@\n \n   public static byte[] decodeHex(java.lang.String) throws org.apache.commons.codec.DecoderException;\n     descriptor: (Ljava/lang/String;)[B\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokevirtual #2                  // Method java/lang/String.toCharArray:()[C\n-         4: invokestatic  #3                  // Method decodeHex:([C)[B\n+         1: invokevirtual #3                  // Method java/lang/String.toCharArray:()[C\n+         4: invokestatic  #9                  // Method decodeHex:([C)[B\n          7: areturn\n       LineNumberTable:\n         line 80: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  data   Ljava/lang/String;\n     Exceptions:\n@@ -267,18 +267,18 @@\n          0: aload_0\n          1: arraylength\n          2: istore_1\n          3: iload_1\n          4: iconst_1\n          5: iand\n          6: ifeq          19\n-         9: new           #4                  // class org/apache/commons/codec/DecoderException\n+         9: new           #15                 // class org/apache/commons/codec/DecoderException\n         12: dup\n-        13: ldc           #5                  // String Odd number of characters.\n-        15: invokespecial #6                  // Method org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;)V\n+        13: ldc           #17                 // String Odd number of characters.\n+        15: invokespecial #19                 // Method org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;)V\n         18: athrow\n         19: iload_1\n         20: iconst_1\n         21: ishr\n         22: newarray       byte\n         24: astore_2\n         25: iconst_0\n@@ -288,25 +288,25 @@\n         30: iload         4\n         32: iload_1\n         33: if_icmpge     85\n         36: aload_0\n         37: iload         4\n         39: caload\n         40: iload         4\n-        42: invokestatic  #7                  // Method toDigit:(CI)I\n+        42: invokestatic  #23                 // Method toDigit:(CI)I\n         45: iconst_4\n         46: ishl\n         47: istore        5\n         49: iinc          4, 1\n         52: iload         5\n         54: aload_0\n         55: iload         4\n         57: caload\n         58: iload         4\n-        60: invokestatic  #7                  // Method toDigit:(CI)I\n+        60: invokestatic  #23                 // Method toDigit:(CI)I\n         63: ior\n         64: istore        5\n         66: iinc          4, 1\n         69: aload_2\n         70: iload_3\n         71: iload         5\n         73: sipush        255\n@@ -353,30 +353,30 @@\n   public static char[] encodeHex(byte[]);\n     descriptor: ([B)[C\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: iconst_1\n-         2: invokestatic  #8                  // Method encodeHex:([BZ)[C\n+         2: invokestatic  #27                 // Method encodeHex:([BZ)[C\n          5: areturn\n       LineNumberTable:\n         line 126: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0  data   [B\n \n   public static char[] encodeHex(java.nio.ByteBuffer);\n     descriptor: (Ljava/nio/ByteBuffer;)[C\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: iconst_1\n-         2: invokestatic  #9                  // Method encodeHex:(Ljava/nio/ByteBuffer;Z)[C\n+         2: invokestatic  #31                 // Method encodeHex:(Ljava/nio/ByteBuffer;Z)[C\n          5: areturn\n       LineNumberTable:\n         line 140: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0  data   Ljava/nio/ByteBuffer;\n \n@@ -384,18 +384,18 @@\n     descriptor: ([BZ)[C\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n          2: ifeq          11\n-         5: getstatic     #10                 // Field DIGITS_LOWER:[C\n+         5: getstatic     #34                 // Field DIGITS_LOWER:[C\n          8: goto          14\n-        11: getstatic     #11                 // Field DIGITS_UPPER:[C\n-        14: invokestatic  #12                 // Method encodeHex:([B[C)[C\n+        11: getstatic     #38                 // Field DIGITS_UPPER:[C\n+        14: invokestatic  #41                 // Method encodeHex:([B[C)[C\n         17: areturn\n       LineNumberTable:\n         line 156: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      18     0  data   [B\n             0      18     1 toLowerCase   Z\n@@ -411,18 +411,18 @@\n     descriptor: (Ljava/nio/ByteBuffer;Z)[C\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n          2: ifeq          11\n-         5: getstatic     #10                 // Field DIGITS_LOWER:[C\n+         5: getstatic     #34                 // Field DIGITS_LOWER:[C\n          8: goto          14\n-        11: getstatic     #11                 // Field DIGITS_UPPER:[C\n-        14: invokestatic  #13                 // Method encodeHex:(Ljava/nio/ByteBuffer;[C)[C\n+        11: getstatic     #38                 // Field DIGITS_UPPER:[C\n+        14: invokestatic  #44                 // Method encodeHex:(Ljava/nio/ByteBuffer;[C)[C\n         17: areturn\n       LineNumberTable:\n         line 172: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      18     0  data   Ljava/nio/ByteBuffer;\n             0      18     1 toLowerCase   Z\n@@ -508,89 +508,89 @@\n \n   protected static char[] encodeHex(java.nio.ByteBuffer, char[]);\n     descriptor: (Ljava/nio/ByteBuffer;[C)[C\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n-         1: invokevirtual #14                 // Method java/nio/ByteBuffer.array:()[B\n+         1: invokevirtual #47                 // Method java/nio/ByteBuffer.array:()[B\n          4: aload_1\n-         5: invokestatic  #12                 // Method encodeHex:([B[C)[C\n+         5: invokestatic  #41                 // Method encodeHex:([B[C)[C\n          8: areturn\n       LineNumberTable:\n         line 213: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  data   Ljava/nio/ByteBuffer;\n             0       9     1 toDigits   [C\n \n   public static java.lang.String encodeHexString(byte[]);\n     descriptor: ([B)Ljava/lang/String;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=3, locals=1, args_size=1\n-         0: new           #15                 // class java/lang/String\n+         0: new           #4                  // class java/lang/String\n          3: dup\n          4: aload_0\n-         5: invokestatic  #16                 // Method encodeHex:([B)[C\n-         8: invokespecial #17                 // Method java/lang/String.\"<init>\":([C)V\n+         5: invokestatic  #53                 // Method encodeHex:([B)[C\n+         8: invokespecial #56                 // Method java/lang/String.\"<init>\":([C)V\n         11: areturn\n       LineNumberTable:\n         line 226: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      12     0  data   [B\n \n   public static java.lang.String encodeHexString(byte[], boolean);\n     descriptor: ([BZ)Ljava/lang/String;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=2, args_size=2\n-         0: new           #15                 // class java/lang/String\n+         0: new           #4                  // class java/lang/String\n          3: dup\n          4: aload_0\n          5: iload_1\n-         6: invokestatic  #8                  // Method encodeHex:([BZ)[C\n-         9: invokespecial #17                 // Method java/lang/String.\"<init>\":([C)V\n+         6: invokestatic  #27                 // Method encodeHex:([BZ)[C\n+         9: invokespecial #56                 // Method java/lang/String.\"<init>\":([C)V\n         12: areturn\n       LineNumberTable:\n         line 241: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      13     0  data   [B\n             0      13     1 toLowerCase   Z\n \n   public static java.lang.String encodeHexString(java.nio.ByteBuffer);\n     descriptor: (Ljava/nio/ByteBuffer;)Ljava/lang/String;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=3, locals=1, args_size=1\n-         0: new           #15                 // class java/lang/String\n+         0: new           #4                  // class java/lang/String\n          3: dup\n          4: aload_0\n-         5: invokestatic  #18                 // Method encodeHex:(Ljava/nio/ByteBuffer;)[C\n-         8: invokespecial #17                 // Method java/lang/String.\"<init>\":([C)V\n+         5: invokestatic  #59                 // Method encodeHex:(Ljava/nio/ByteBuffer;)[C\n+         8: invokespecial #56                 // Method java/lang/String.\"<init>\":([C)V\n         11: areturn\n       LineNumberTable:\n         line 254: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      12     0  data   Ljava/nio/ByteBuffer;\n \n   public static java.lang.String encodeHexString(java.nio.ByteBuffer, boolean);\n     descriptor: (Ljava/nio/ByteBuffer;Z)Ljava/lang/String;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=2, args_size=2\n-         0: new           #15                 // class java/lang/String\n+         0: new           #4                  // class java/lang/String\n          3: dup\n          4: aload_0\n          5: iload_1\n-         6: invokestatic  #9                  // Method encodeHex:(Ljava/nio/ByteBuffer;Z)[C\n-         9: invokespecial #17                 // Method java/lang/String.\"<init>\":([C)V\n+         6: invokestatic  #31                 // Method encodeHex:(Ljava/nio/ByteBuffer;Z)[C\n+         9: invokespecial #56                 // Method java/lang/String.\"<init>\":([C)V\n         12: areturn\n       LineNumberTable:\n         line 269: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      13     0  data   Ljava/nio/ByteBuffer;\n             0      13     1 toLowerCase   Z\n@@ -598,34 +598,34 @@\n   protected static int toDigit(char, int) throws org.apache.commons.codec.DecoderException;\n     descriptor: (CI)I\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=4, locals=3, args_size=2\n          0: iload_0\n          1: bipush        16\n-         3: invokestatic  #19                 // Method java/lang/Character.digit:(CI)I\n+         3: invokestatic  #62                 // Method java/lang/Character.digit:(CI)I\n          6: istore_2\n          7: iload_2\n          8: iconst_m1\n          9: if_icmpne     48\n-        12: new           #4                  // class org/apache/commons/codec/DecoderException\n+        12: new           #15                 // class org/apache/commons/codec/DecoderException\n         15: dup\n-        16: new           #20                 // class java/lang/StringBuilder\n+        16: new           #67                 // class java/lang/StringBuilder\n         19: dup\n-        20: invokespecial #21                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        23: ldc           #22                 // String Illegal hexadecimal character\n-        25: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        20: invokespecial #69                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        23: ldc           #72                 // String Illegal hexadecimal character\n+        25: invokevirtual #74                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         28: iload_0\n-        29: invokevirtual #24                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n-        32: ldc           #25                 // String  at index\n-        34: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        29: invokevirtual #78                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+        32: ldc           #81                 // String  at index\n+        34: invokevirtual #74                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         37: iload_1\n-        38: invokevirtual #26                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        41: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        44: invokespecial #6                  // Method org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;)V\n+        38: invokevirtual #83                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        41: invokevirtual #86                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        44: invokespecial #19                 // Method org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;)V\n         47: athrow\n         48: iload_2\n         49: ireturn\n       LineNumberTable:\n         line 284: 0\n         line 285: 7\n         line 286: 12\n@@ -644,18 +644,18 @@\n \n   public org.apache.commons.codec.binary.Hex();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: invokespecial #28                 // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #90                 // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n-         5: getstatic     #29                 // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;\n-         8: putfield      #30                 // Field charset:Ljava/nio/charset/Charset;\n+         5: getstatic     #93                 // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;\n+         8: putfield      #97                 // Field charset:Ljava/nio/charset/Charset;\n         11: return\n       LineNumberTable:\n         line 296: 0\n         line 298: 4\n         line 299: 11\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -663,18 +663,18 @@\n \n   public org.apache.commons.codec.binary.Hex(java.nio.charset.Charset);\n     descriptor: (Ljava/nio/charset/Charset;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n-         1: invokespecial #28                 // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #90                 // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n          5: aload_1\n-         6: putfield      #30                 // Field charset:Ljava/nio/charset/Charset;\n+         6: putfield      #97                 // Field charset:Ljava/nio/charset/Charset;\n          9: return\n       LineNumberTable:\n         line 308: 0\n         line 309: 4\n         line 310: 9\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -684,38 +684,38 @@\n   public org.apache.commons.codec.binary.Hex(java.lang.String);\n     descriptor: (Ljava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokestatic  #31                 // Method java/nio/charset/Charset.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n-         5: invokespecial #32                 // Method \"<init>\":(Ljava/nio/charset/Charset;)V\n+         2: invokestatic  #100                // Method java/nio/charset/Charset.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;\n+         5: invokespecial #106                // Method \"<init>\":(Ljava/nio/charset/Charset;)V\n          8: return\n       LineNumberTable:\n         line 323: 0\n         line 324: 8\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/codec/binary/Hex;\n             0       9     1 charsetName   Ljava/lang/String;\n \n   public byte[] decode(byte[]) throws org.apache.commons.codec.DecoderException;\n     descriptor: ([B)[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=2\n-         0: new           #15                 // class java/lang/String\n+         0: new           #4                  // class java/lang/String\n          3: dup\n          4: aload_1\n          5: aload_0\n-         6: invokevirtual #33                 // Method getCharset:()Ljava/nio/charset/Charset;\n-         9: invokespecial #34                 // Method java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n-        12: invokevirtual #2                  // Method java/lang/String.toCharArray:()[C\n-        15: invokestatic  #3                  // Method decodeHex:([C)[B\n+         6: invokevirtual #109                // Method getCharset:()Ljava/nio/charset/Charset;\n+         9: invokespecial #113                // Method java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n+        12: invokevirtual #3                  // Method java/lang/String.toCharArray:()[C\n+        15: invokestatic  #9                  // Method decodeHex:([C)[B\n         18: areturn\n       LineNumberTable:\n         line 340: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      19     0  this   Lorg/apache/commons/codec/binary/Hex;\n             0      19     1 array   [B\n@@ -723,23 +723,23 @@\n       throws org.apache.commons.codec.DecoderException\n \n   public byte[] decode(java.nio.ByteBuffer) throws org.apache.commons.codec.DecoderException;\n     descriptor: (Ljava/nio/ByteBuffer;)[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=2\n-         0: new           #15                 // class java/lang/String\n+         0: new           #4                  // class java/lang/String\n          3: dup\n          4: aload_1\n-         5: invokevirtual #14                 // Method java/nio/ByteBuffer.array:()[B\n+         5: invokevirtual #47                 // Method java/nio/ByteBuffer.array:()[B\n          8: aload_0\n-         9: invokevirtual #33                 // Method getCharset:()Ljava/nio/charset/Charset;\n-        12: invokespecial #34                 // Method java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n-        15: invokevirtual #2                  // Method java/lang/String.toCharArray:()[C\n-        18: invokestatic  #3                  // Method decodeHex:([C)[B\n+         9: invokevirtual #109                // Method getCharset:()Ljava/nio/charset/Charset;\n+        12: invokespecial #113                // Method java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n+        15: invokevirtual #3                  // Method java/lang/String.toCharArray:()[C\n+        18: invokestatic  #9                  // Method decodeHex:([C)[B\n         21: areturn\n       LineNumberTable:\n         line 357: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      22     0  this   Lorg/apache/commons/codec/binary/Hex;\n             0      22     1 buffer   Ljava/nio/ByteBuffer;\n@@ -748,49 +748,49 @@\n \n   public java.lang.Object decode(java.lang.Object) throws org.apache.commons.codec.DecoderException;\n     descriptor: (Ljava/lang/Object;)Ljava/lang/Object;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=2\n          0: aload_1\n-         1: instanceof    #15                 // class java/lang/String\n+         1: instanceof    #4                  // class java/lang/String\n          4: ifeq          19\n          7: aload_0\n          8: aload_1\n-         9: checkcast     #15                 // class java/lang/String\n-        12: invokevirtual #2                  // Method java/lang/String.toCharArray:()[C\n-        15: invokevirtual #35                 // Method decode:(Ljava/lang/Object;)Ljava/lang/Object;\n+         9: checkcast     #4                  // class java/lang/String\n+        12: invokevirtual #3                  // Method java/lang/String.toCharArray:()[C\n+        15: invokevirtual #116                // Method decode:(Ljava/lang/Object;)Ljava/lang/Object;\n         18: areturn\n         19: aload_1\n-        20: instanceof    #36                 // class \"[B\"\n+        20: instanceof    #120                // class \"[B\"\n         23: ifeq          35\n         26: aload_0\n         27: aload_1\n-        28: checkcast     #36                 // class \"[B\"\n-        31: invokevirtual #37                 // Method decode:([B)[B\n+        28: checkcast     #120                // class \"[B\"\n+        31: invokevirtual #122                // Method decode:([B)[B\n         34: areturn\n         35: aload_1\n-        36: instanceof    #38                 // class java/nio/ByteBuffer\n+        36: instanceof    #48                 // class java/nio/ByteBuffer\n         39: ifeq          51\n         42: aload_0\n         43: aload_1\n-        44: checkcast     #38                 // class java/nio/ByteBuffer\n-        47: invokevirtual #39                 // Method decode:(Ljava/nio/ByteBuffer;)[B\n+        44: checkcast     #48                 // class java/nio/ByteBuffer\n+        47: invokevirtual #125                // Method decode:(Ljava/nio/ByteBuffer;)[B\n         50: areturn\n         51: aload_1\n-        52: checkcast     #40                 // class \"[C\"\n-        55: invokestatic  #3                  // Method decodeHex:([C)[B\n+        52: checkcast     #128                // class \"[C\"\n+        55: invokestatic  #9                  // Method decodeHex:([C)[B\n         58: areturn\n         59: astore_2\n-        60: new           #4                  // class org/apache/commons/codec/DecoderException\n+        60: new           #15                 // class org/apache/commons/codec/DecoderException\n         63: dup\n         64: aload_2\n-        65: invokevirtual #42                 // Method java/lang/ClassCastException.getMessage:()Ljava/lang/String;\n+        65: invokevirtual #131                // Method java/lang/ClassCastException.getMessage:()Ljava/lang/String;\n         68: aload_2\n-        69: invokespecial #43                 // Method org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+        69: invokespecial #134                // Method org/apache/commons/codec/DecoderException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n         72: athrow\n       Exception table:\n          from    to  target type\n             51    58    59   Class java/lang/ClassCastException\n       LineNumberTable:\n         line 375: 0\n         line 376: 7\n@@ -817,81 +817,81 @@\n \n   public byte[] encode(byte[]);\n     descriptor: ([B)[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n-         1: invokestatic  #44                 // Method encodeHexString:([B)Ljava/lang/String;\n+         1: invokestatic  #137                // Method encodeHexString:([B)Ljava/lang/String;\n          4: aload_0\n-         5: invokevirtual #33                 // Method getCharset:()Ljava/nio/charset/Charset;\n-         8: invokevirtual #45                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n+         5: invokevirtual #109                // Method getCharset:()Ljava/nio/charset/Charset;\n+         8: invokevirtual #141                // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n         11: areturn\n       LineNumberTable:\n         line 407: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      12     0  this   Lorg/apache/commons/codec/binary/Hex;\n             0      12     1 array   [B\n \n   public byte[] encode(java.nio.ByteBuffer);\n     descriptor: (Ljava/nio/ByteBuffer;)[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n-         1: invokestatic  #46                 // Method encodeHexString:(Ljava/nio/ByteBuffer;)Ljava/lang/String;\n+         1: invokestatic  #145                // Method encodeHexString:(Ljava/nio/ByteBuffer;)Ljava/lang/String;\n          4: aload_0\n-         5: invokevirtual #33                 // Method getCharset:()Ljava/nio/charset/Charset;\n-         8: invokevirtual #45                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n+         5: invokevirtual #109                // Method getCharset:()Ljava/nio/charset/Charset;\n+         8: invokevirtual #141                // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n         11: areturn\n       LineNumberTable:\n         line 426: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      12     0  this   Lorg/apache/commons/codec/binary/Hex;\n             0      12     1 array   Ljava/nio/ByteBuffer;\n \n   public java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException;\n     descriptor: (Ljava/lang/Object;)Ljava/lang/Object;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=2\n          0: aload_1\n-         1: instanceof    #15                 // class java/lang/String\n+         1: instanceof    #4                  // class java/lang/String\n          4: ifeq          22\n          7: aload_1\n-         8: checkcast     #15                 // class java/lang/String\n+         8: checkcast     #4                  // class java/lang/String\n         11: aload_0\n-        12: invokevirtual #33                 // Method getCharset:()Ljava/nio/charset/Charset;\n-        15: invokevirtual #45                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n+        12: invokevirtual #109                // Method getCharset:()Ljava/nio/charset/Charset;\n+        15: invokevirtual #141                // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n         18: astore_2\n         19: goto          62\n         22: aload_1\n-        23: instanceof    #38                 // class java/nio/ByteBuffer\n+        23: instanceof    #48                 // class java/nio/ByteBuffer\n         26: ifeq          40\n         29: aload_1\n-        30: checkcast     #38                 // class java/nio/ByteBuffer\n-        33: invokevirtual #14                 // Method java/nio/ByteBuffer.array:()[B\n+        30: checkcast     #48                 // class java/nio/ByteBuffer\n+        33: invokevirtual #47                 // Method java/nio/ByteBuffer.array:()[B\n         36: astore_2\n         37: goto          62\n         40: aload_1\n-        41: checkcast     #36                 // class \"[B\"\n+        41: checkcast     #120                // class \"[B\"\n         44: astore_2\n         45: goto          62\n         48: astore_3\n-        49: new           #47                 // class org/apache/commons/codec/EncoderException\n+        49: new           #148                // class org/apache/commons/codec/EncoderException\n         52: dup\n         53: aload_3\n-        54: invokevirtual #42                 // Method java/lang/ClassCastException.getMessage:()Ljava/lang/String;\n+        54: invokevirtual #131                // Method java/lang/ClassCastException.getMessage:()Ljava/lang/String;\n         57: aload_3\n-        58: invokespecial #48                 // Method org/apache/commons/codec/EncoderException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+        58: invokespecial #150                // Method org/apache/commons/codec/EncoderException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n         61: athrow\n         62: aload_2\n-        63: invokestatic  #16                 // Method encodeHex:([B)[C\n+        63: invokestatic  #53                 // Method encodeHex:([B)[C\n         66: areturn\n       Exception table:\n          from    to  target type\n             40    45    48   Class java/lang/ClassCastException\n       LineNumberTable:\n         line 448: 0\n         line 449: 7\n@@ -924,70 +924,70 @@\n \n   public java.nio.charset.Charset getCharset();\n     descriptor: ()Ljava/nio/charset/Charset;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #30                 // Field charset:Ljava/nio/charset/Charset;\n+         1: getfield      #97                 // Field charset:Ljava/nio/charset/Charset;\n          4: areturn\n       LineNumberTable:\n         line 469: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/codec/binary/Hex;\n \n   public java.lang.String getCharsetName();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #30                 // Field charset:Ljava/nio/charset/Charset;\n-         4: invokevirtual #49                 // Method java/nio/charset/Charset.name:()Ljava/lang/String;\n+         1: getfield      #97                 // Field charset:Ljava/nio/charset/Charset;\n+         4: invokevirtual #151                // Method java/nio/charset/Charset.name:()Ljava/lang/String;\n          7: areturn\n       LineNumberTable:\n         line 479: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/codec/binary/Hex;\n \n   public java.lang.String toString();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n-         0: new           #20                 // class java/lang/StringBuilder\n+         0: new           #67                 // class java/lang/StringBuilder\n          3: dup\n-         4: invokespecial #21                 // Method java/lang/StringBuilder.\"<init>\":()V\n+         4: invokespecial #69                 // Method java/lang/StringBuilder.\"<init>\":()V\n          7: aload_0\n-         8: invokespecial #50                 // Method java/lang/Object.toString:()Ljava/lang/String;\n-        11: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        14: ldc           #51                 // String [charsetName=\n-        16: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+         8: invokespecial #154                // Method java/lang/Object.toString:()Ljava/lang/String;\n+        11: invokevirtual #74                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        14: ldc           #155                // String [charsetName=\n+        16: invokevirtual #74                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         19: aload_0\n-        20: getfield      #30                 // Field charset:Ljava/nio/charset/Charset;\n-        23: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-        26: ldc           #53                 // String ]\n-        28: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        31: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        20: getfield      #97                 // Field charset:Ljava/nio/charset/Charset;\n+        23: invokevirtual #157                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+        26: ldc           #160                // String ]\n+        28: invokevirtual #74                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        31: invokevirtual #86                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n         34: areturn\n       LineNumberTable:\n         line 489: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      35     0  this   Lorg/apache/commons/codec/binary/Hex;\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=4, locals=0, args_size=0\n-         0: getstatic     #54                 // Field org/apache/commons/codec/Charsets.UTF_8:Ljava/nio/charset/Charset;\n-         3: putstatic     #29                 // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;\n+         0: getstatic     #162                // Field org/apache/commons/codec/Charsets.UTF_8:Ljava/nio/charset/Charset;\n+         3: putstatic     #93                 // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;\n          6: bipush        16\n          8: newarray       char\n         10: dup\n         11: iconst_0\n         12: bipush        48\n         14: castore\n         15: dup\n@@ -1046,15 +1046,15 @@\n         89: bipush        14\n         91: bipush        101\n         93: castore\n         94: dup\n         95: bipush        15\n         97: bipush        102\n         99: castore\n-       100: putstatic     #10                 // Field DIGITS_LOWER:[C\n+       100: putstatic     #34                 // Field DIGITS_LOWER:[C\n        103: bipush        16\n        105: newarray       char\n        107: dup\n        108: iconst_0\n        109: bipush        48\n        111: castore\n        112: dup\n@@ -1113,15 +1113,15 @@\n        186: bipush        14\n        188: bipush        69\n        190: castore\n        191: dup\n        192: bipush        15\n        194: bipush        70\n        196: castore\n-       197: putstatic     #11                 // Field DIGITS_UPPER:[C\n+       197: putstatic     #38                 // Field DIGITS_UPPER:[C\n        200: return\n       LineNumberTable:\n         line 46: 0\n         line 58: 6\n         line 64: 103\n }\n SourceFile: \"Hex.java\"\n"}]}
