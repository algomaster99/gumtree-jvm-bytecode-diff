{"diffoscope-json-version": 1, "source1": "first/XML.class", "source2": "second/XML.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,179 +1,179 @@\n-  SHA-256 checksum 822df6930e57ee896ecbd3cc3ded212b9a22498390ee86e0fd51f108c3c0e73b\n+  SHA-256 checksum 1ab57e15ebe061b0cc61df50f44745884c264da8c358b74b8b09052ed6df1b26\n   Compiled from \"XML.java\"\n public class org.json.XML\n   minor version: 0\n   major version: 50\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #76                         // org/json/XML\n   super_class: #163                       // java/lang/Object\n   interfaces: 0, fields: 11, methods: 21, attributes: 2\n Constant pool:\n-    #1 = Methodref          #163.#289     // java/lang/Object.\"<init>\":()V\n-    #2 = Class              #290          // org/json/XML$1\n-    #3 = Methodref          #2.#291       // org/json/XML$1.\"<init>\":(Ljava/lang/String;)V\n-    #4 = Class              #292          // java/lang/StringBuilder\n-    #5 = Methodref          #70.#293      // java/lang/String.length:()I\n-    #6 = Methodref          #4.#294       // java/lang/StringBuilder.\"<init>\":(I)V\n-    #7 = Methodref          #76.#295      // org/json/XML.codePointIterator:(Ljava/lang/String;)Ljava/lang/Iterable;\n-    #8 = InterfaceMethodref #296.#297     // java/lang/Iterable.iterator:()Ljava/util/Iterator;\n-    #9 = InterfaceMethodref #298.#299     // java/util/Iterator.hasNext:()Z\n-   #10 = InterfaceMethodref #298.#300     // java/util/Iterator.next:()Ljava/lang/Object;\n-   #11 = Class              #301          // java/lang/Integer\n-   #12 = Methodref          #11.#302      // java/lang/Integer.intValue:()I\n-   #13 = String             #303          // &amp;\n-   #14 = Methodref          #4.#304       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #15 = String             #305          // &lt;\n-   #16 = String             #306          // &gt;\n-   #17 = String             #307          // &quot;\n-   #18 = String             #308          // &apos;\n-   #19 = Methodref          #76.#309      // org/json/XML.mustEscape:(I)Z\n-   #20 = String             #310          // &#x\n-   #21 = Methodref          #11.#311      // java/lang/Integer.toHexString:(I)Ljava/lang/String;\n-   #22 = Methodref          #4.#312       // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n-   #23 = Methodref          #4.#313       // java/lang/StringBuilder.appendCodePoint:(I)Ljava/lang/StringBuilder;\n-   #24 = Methodref          #4.#314       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #25 = Methodref          #68.#315      // java/lang/Character.isISOControl:(I)Z\n+    #1 = Methodref          #163.#278     // java/lang/Object.\"<init>\":()V\n+    #2 = Class              #279          // org/json/XML$1\n+    #3 = Methodref          #2.#280       // org/json/XML$1.\"<init>\":(Ljava/lang/String;)V\n+    #4 = Class              #281          // java/lang/StringBuilder\n+    #5 = Methodref          #70.#282      // java/lang/String.length:()I\n+    #6 = Methodref          #4.#283       // java/lang/StringBuilder.\"<init>\":(I)V\n+    #7 = Methodref          #76.#284      // org/json/XML.codePointIterator:(Ljava/lang/String;)Ljava/lang/Iterable;\n+    #8 = InterfaceMethodref #285.#286     // java/lang/Iterable.iterator:()Ljava/util/Iterator;\n+    #9 = InterfaceMethodref #198.#287     // java/util/Iterator.hasNext:()Z\n+   #10 = InterfaceMethodref #198.#288     // java/util/Iterator.next:()Ljava/lang/Object;\n+   #11 = Class              #289          // java/lang/Integer\n+   #12 = Methodref          #11.#290      // java/lang/Integer.intValue:()I\n+   #13 = String             #291          // &amp;\n+   #14 = Methodref          #4.#292       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #15 = String             #293          // &lt;\n+   #16 = String             #294          // &gt;\n+   #17 = String             #295          // &quot;\n+   #18 = String             #296          // &apos;\n+   #19 = Methodref          #76.#297      // org/json/XML.mustEscape:(I)Z\n+   #20 = String             #298          // &#x\n+   #21 = Methodref          #11.#299      // java/lang/Integer.toHexString:(I)Ljava/lang/String;\n+   #22 = Methodref          #4.#300       // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+   #23 = Methodref          #4.#301       // java/lang/StringBuilder.appendCodePoint:(I)Ljava/lang/StringBuilder;\n+   #24 = Methodref          #4.#302       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #25 = Methodref          #68.#303      // java/lang/Character.isISOControl:(I)Z\n    #26 = Integer            55295\n    #27 = Integer            57344\n    #28 = Integer            65533\n    #29 = Integer            65536\n    #30 = Integer            1114111\n-   #31 = Methodref          #70.#316      // java/lang/String.charAt:(I)C\n-   #32 = Methodref          #70.#317      // java/lang/String.indexOf:(II)I\n-   #33 = Methodref          #70.#318      // java/lang/String.substring:(II)Ljava/lang/String;\n-   #34 = Methodref          #137.#319     // org/json/XMLTokener.unescapeEntity:(Ljava/lang/String;)Ljava/lang/String;\n-   #35 = Class              #320          // org/json/JSONException\n-   #36 = String             #321          // Empty string.\n-   #37 = Methodref          #35.#291      // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n-   #38 = Methodref          #68.#322      // java/lang/Character.isWhitespace:(C)Z\n-   #39 = Methodref          #4.#289       // java/lang/StringBuilder.\"<init>\":()V\n-   #40 = String             #323          // \\'\n-   #41 = String             #324          // \\' contains a space character.\n-   #42 = Methodref          #137.#325     // org/json/XMLTokener.nextToken:()Ljava/lang/Object;\n-   #43 = Fieldref           #76.#326      // org/json/XML.BANG:Ljava/lang/Character;\n-   #44 = Methodref          #137.#327     // org/json/XMLTokener.next:()C\n-   #45 = String             #328          // -->\n-   #46 = Methodref          #137.#329     // org/json/XMLTokener.skipPast:(Ljava/lang/String;)V\n-   #47 = Methodref          #137.#330     // org/json/XMLTokener.back:()V\n-   #48 = String             #331          // CDATA\n-   #49 = Methodref          #70.#332      // java/lang/String.equals:(Ljava/lang/Object;)Z\n-   #50 = Methodref          #137.#333     // org/json/XMLTokener.nextCDATA:()Ljava/lang/String;\n-   #51 = Methodref          #334.#335     // org/json/XMLParserConfiguration.getcDataTagName:()Ljava/lang/String;\n-   #52 = Methodref          #71.#336      // org/json/JSONObject.accumulate:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #53 = String             #337          // Expected \\'CDATA[\\'\n-   #54 = Methodref          #137.#338     // org/json/XMLTokener.syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n-   #55 = Methodref          #137.#339     // org/json/XMLTokener.nextMeta:()Ljava/lang/Object;\n-   #56 = String             #340          // Missing \\'>\\' after \\'<!\\'.\n-   #57 = Fieldref           #76.#341      // org/json/XML.LT:Ljava/lang/Character;\n-   #58 = Fieldref           #76.#342      // org/json/XML.GT:Ljava/lang/Character;\n-   #59 = Fieldref           #76.#343      // org/json/XML.QUEST:Ljava/lang/Character;\n-   #60 = String             #344          // ?>\n-   #61 = Fieldref           #76.#345      // org/json/XML.SLASH:Ljava/lang/Character;\n-   #62 = String             #346          // Mismatched close tag\n-   #63 = Methodref          #4.#347       // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #64 = Methodref          #163.#332     // java/lang/Object.equals:(Ljava/lang/Object;)Z\n-   #65 = String             #348          // Mismatched\n-   #66 = String             #349          //  and\n-   #67 = String             #350          // Misshaped close tag\n-   #68 = Class              #351          // java/lang/Character\n-   #69 = String             #352          // Misshaped tag\n-   #70 = Class              #353          // java/lang/String\n-   #71 = Class              #354          // org/json/JSONObject\n-   #72 = Methodref          #71.#289      // org/json/JSONObject.\"<init>\":()V\n-   #73 = Fieldref           #76.#355      // org/json/XML.EQ:Ljava/lang/Character;\n-   #74 = String             #356          // Missing value\n-   #75 = Methodref          #334.#357     // org/json/XMLParserConfiguration.isConvertNilAttributeToNull:()Z\n-   #76 = Class              #358          // org/json/XML\n-   #77 = String             #359          // xsi:nil\n-   #78 = Methodref          #360.#361     // java/lang/Boolean.parseBoolean:(Ljava/lang/String;)Z\n-   #79 = Methodref          #334.#362     // org/json/XMLParserConfiguration.getXsiTypeMap:()Ljava/util/Map;\n-   #80 = InterfaceMethodref #363.#364     // java/util/Map.isEmpty:()Z\n-   #81 = String             #365          // xsi:type\n-   #82 = InterfaceMethodref #363.#366     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #83 = Class              #367          // org/json/XMLXsiTypeConverter\n-   #84 = Methodref          #334.#368     // org/json/XMLParserConfiguration.isKeepStrings:()Z\n-   #85 = Methodref          #76.#369      // org/json/XML.stringToValue:(Ljava/lang/String;)Ljava/lang/Object;\n-   #86 = String             #370          //\n-   #87 = Methodref          #334.#371     // org/json/XMLParserConfiguration.getForceList:()Ljava/util/Set;\n-   #88 = InterfaceMethodref #372.#373     // java/util/Set.contains:(Ljava/lang/Object;)Z\n-   #89 = Fieldref           #71.#374      // org/json/JSONObject.NULL:Ljava/lang/Object;\n-   #90 = Methodref          #71.#375      // org/json/JSONObject.append:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #91 = Methodref          #71.#293      // org/json/JSONObject.length:()I\n-   #92 = Class              #376          // org/json/JSONArray\n-   #93 = Methodref          #92.#289      // org/json/JSONArray.\"<init>\":()V\n-   #94 = Methodref          #71.#377      // org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-   #95 = Methodref          #137.#378     // org/json/XMLTokener.nextContent:()Ljava/lang/Object;\n-   #96 = String             #379          // Unclosed tag\n-   #97 = Methodref          #76.#380      // org/json/XML.stringToValue:(Ljava/lang/String;Lorg/json/XMLXsiTypeConverter;)Ljava/lang/Object;\n-   #98 = Methodref          #76.#381      // org/json/XML.parse:(Lorg/json/XMLTokener;Lorg/json/JSONObject;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Z\n-   #99 = Methodref          #71.#382      // org/json/JSONObject.opt:(Ljava/lang/String;)Ljava/lang/Object;\n-  #100 = InterfaceMethodref #83.#383      // org/json/XMLXsiTypeConverter.convert:(Ljava/lang/String;)Ljava/lang/Object;\n-  #101 = String             #384          // true\n-  #102 = Methodref          #70.#385      // java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z\n-  #103 = Fieldref           #360.#386     // java/lang/Boolean.TRUE:Ljava/lang/Boolean;\n-  #104 = String             #387          // false\n-  #105 = Fieldref           #360.#388     // java/lang/Boolean.FALSE:Ljava/lang/Boolean;\n-  #106 = String             #389          // null\n-  #107 = Methodref          #76.#390      // org/json/XML.stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n-  #108 = Class              #391          // java/lang/Exception\n-  #109 = Methodref          #76.#392      // org/json/XML.isDecimalNotation:(Ljava/lang/String;)Z\n-  #110 = Class              #393          // java/math/BigDecimal\n-  #111 = Methodref          #110.#291     // java/math/BigDecimal.\"<init>\":(Ljava/lang/String;)V\n-  #112 = Fieldref           #110.#394     // java/math/BigDecimal.ZERO:Ljava/math/BigDecimal;\n-  #113 = Methodref          #110.#395     // java/math/BigDecimal.compareTo:(Ljava/math/BigDecimal;)I\n+   #31 = Methodref          #70.#304      // java/lang/String.charAt:(I)C\n+   #32 = Methodref          #70.#305      // java/lang/String.indexOf:(II)I\n+   #33 = Methodref          #70.#306      // java/lang/String.substring:(II)Ljava/lang/String;\n+   #34 = Methodref          #137.#307     // org/json/XMLTokener.unescapeEntity:(Ljava/lang/String;)Ljava/lang/String;\n+   #35 = Class              #308          // org/json/JSONException\n+   #36 = String             #309          // Empty string.\n+   #37 = Methodref          #35.#280      // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n+   #38 = Methodref          #68.#310      // java/lang/Character.isWhitespace:(C)Z\n+   #39 = Methodref          #4.#278       // java/lang/StringBuilder.\"<init>\":()V\n+   #40 = String             #311          // \\'\n+   #41 = String             #312          // \\' contains a space character.\n+   #42 = Methodref          #137.#313     // org/json/XMLTokener.nextToken:()Ljava/lang/Object;\n+   #43 = Fieldref           #76.#314      // org/json/XML.BANG:Ljava/lang/Character;\n+   #44 = Methodref          #137.#315     // org/json/XMLTokener.next:()C\n+   #45 = String             #316          // -->\n+   #46 = Methodref          #137.#317     // org/json/XMLTokener.skipPast:(Ljava/lang/String;)V\n+   #47 = Methodref          #137.#318     // org/json/XMLTokener.back:()V\n+   #48 = String             #319          // CDATA\n+   #49 = Methodref          #70.#320      // java/lang/String.equals:(Ljava/lang/Object;)Z\n+   #50 = Methodref          #137.#321     // org/json/XMLTokener.nextCDATA:()Ljava/lang/String;\n+   #51 = Methodref          #230.#322     // org/json/XMLParserConfiguration.getcDataTagName:()Ljava/lang/String;\n+   #52 = Methodref          #71.#323      // org/json/JSONObject.accumulate:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #53 = String             #324          // Expected \\'CDATA[\\'\n+   #54 = Methodref          #137.#325     // org/json/XMLTokener.syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n+   #55 = Methodref          #137.#326     // org/json/XMLTokener.nextMeta:()Ljava/lang/Object;\n+   #56 = String             #327          // Missing \\'>\\' after \\'<!\\'.\n+   #57 = Fieldref           #76.#328      // org/json/XML.LT:Ljava/lang/Character;\n+   #58 = Fieldref           #76.#329      // org/json/XML.GT:Ljava/lang/Character;\n+   #59 = Fieldref           #76.#330      // org/json/XML.QUEST:Ljava/lang/Character;\n+   #60 = String             #331          // ?>\n+   #61 = Fieldref           #76.#332      // org/json/XML.SLASH:Ljava/lang/Character;\n+   #62 = String             #333          // Mismatched close tag\n+   #63 = Methodref          #4.#334       // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #64 = Methodref          #163.#320     // java/lang/Object.equals:(Ljava/lang/Object;)Z\n+   #65 = String             #335          // Mismatched\n+   #66 = String             #336          //  and\n+   #67 = String             #337          // Misshaped close tag\n+   #68 = Class              #338          // java/lang/Character\n+   #69 = String             #339          // Misshaped tag\n+   #70 = Class              #340          // java/lang/String\n+   #71 = Class              #341          // org/json/JSONObject\n+   #72 = Methodref          #71.#278      // org/json/JSONObject.\"<init>\":()V\n+   #73 = Fieldref           #76.#342      // org/json/XML.EQ:Ljava/lang/Character;\n+   #74 = String             #343          // Missing value\n+   #75 = Methodref          #230.#344     // org/json/XMLParserConfiguration.isConvertNilAttributeToNull:()Z\n+   #76 = Class              #345          // org/json/XML\n+   #77 = String             #346          // xsi:nil\n+   #78 = Methodref          #347.#348     // java/lang/Boolean.parseBoolean:(Ljava/lang/String;)Z\n+   #79 = Methodref          #230.#349     // org/json/XMLParserConfiguration.getXsiTypeMap:()Ljava/util/Map;\n+   #80 = InterfaceMethodref #350.#351     // java/util/Map.isEmpty:()Z\n+   #81 = String             #352          // xsi:type\n+   #82 = InterfaceMethodref #350.#353     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #83 = Class              #354          // org/json/XMLXsiTypeConverter\n+   #84 = Methodref          #230.#355     // org/json/XMLParserConfiguration.isKeepStrings:()Z\n+   #85 = Methodref          #76.#356      // org/json/XML.stringToValue:(Ljava/lang/String;)Ljava/lang/Object;\n+   #86 = String             #357          //\n+   #87 = Methodref          #230.#358     // org/json/XMLParserConfiguration.getForceList:()Ljava/util/Set;\n+   #88 = InterfaceMethodref #359.#360     // java/util/Set.contains:(Ljava/lang/Object;)Z\n+   #89 = Fieldref           #71.#361      // org/json/JSONObject.NULL:Ljava/lang/Object;\n+   #90 = Methodref          #71.#362      // org/json/JSONObject.append:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #91 = Methodref          #71.#282      // org/json/JSONObject.length:()I\n+   #92 = Class              #363          // org/json/JSONArray\n+   #93 = Methodref          #92.#278      // org/json/JSONArray.\"<init>\":()V\n+   #94 = Methodref          #71.#364      // org/json/JSONObject.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+   #95 = Methodref          #137.#365     // org/json/XMLTokener.nextContent:()Ljava/lang/Object;\n+   #96 = String             #366          // Unclosed tag\n+   #97 = Methodref          #76.#367      // org/json/XML.stringToValue:(Ljava/lang/String;Lorg/json/XMLXsiTypeConverter;)Ljava/lang/Object;\n+   #98 = Methodref          #76.#368      // org/json/XML.parse:(Lorg/json/XMLTokener;Lorg/json/JSONObject;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Z\n+   #99 = Methodref          #71.#369      // org/json/JSONObject.opt:(Ljava/lang/String;)Ljava/lang/Object;\n+  #100 = InterfaceMethodref #83.#370      // org/json/XMLXsiTypeConverter.convert:(Ljava/lang/String;)Ljava/lang/Object;\n+  #101 = String             #371          // true\n+  #102 = Methodref          #70.#372      // java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z\n+  #103 = Fieldref           #347.#373     // java/lang/Boolean.TRUE:Ljava/lang/Boolean;\n+  #104 = String             #374          // false\n+  #105 = Fieldref           #347.#375     // java/lang/Boolean.FALSE:Ljava/lang/Boolean;\n+  #106 = String             #376          // null\n+  #107 = Methodref          #76.#377      // org/json/XML.stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+  #108 = Class              #378          // java/lang/Exception\n+  #109 = Methodref          #76.#379      // org/json/XML.isDecimalNotation:(Ljava/lang/String;)Z\n+  #110 = Class              #380          // java/math/BigDecimal\n+  #111 = Methodref          #110.#280     // java/math/BigDecimal.\"<init>\":(Ljava/lang/String;)V\n+  #112 = Fieldref           #110.#381     // java/math/BigDecimal.ZERO:Ljava/math/BigDecimal;\n+  #113 = Methodref          #110.#382     // java/math/BigDecimal.compareTo:(Ljava/math/BigDecimal;)I\n   #114 = Double             -0.0d\n-  #116 = Methodref          #396.#397     // java/lang/Double.valueOf:(D)Ljava/lang/Double;\n-  #117 = Class              #398          // java/lang/NumberFormatException\n-  #118 = Methodref          #396.#399     // java/lang/Double.valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n-  #119 = Methodref          #396.#400     // java/lang/Double.isNaN:()Z\n-  #120 = Methodref          #396.#401     // java/lang/Double.isInfinite:()Z\n-  #121 = String             #402          // val [\n-  #122 = String             #403          // ] is not a valid number.\n-  #123 = Methodref          #117.#291     // java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n-  #124 = Class              #404          // java/math/BigInteger\n-  #125 = Methodref          #124.#291     // java/math/BigInteger.\"<init>\":(Ljava/lang/String;)V\n-  #126 = Methodref          #124.#405     // java/math/BigInteger.bitLength:()I\n-  #127 = Methodref          #124.#302     // java/math/BigInteger.intValue:()I\n-  #128 = Methodref          #11.#406      // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-  #129 = Methodref          #124.#407     // java/math/BigInteger.longValue:()J\n-  #130 = Methodref          #408.#409     // java/lang/Long.valueOf:(J)Ljava/lang/Long;\n-  #131 = Methodref          #70.#410      // java/lang/String.indexOf:(I)I\n-  #132 = String             #411          // -0\n-  #133 = Fieldref           #334.#412     // org/json/XMLParserConfiguration.ORIGINAL:Lorg/json/XMLParserConfiguration;\n-  #134 = Methodref          #76.#413      // org/json/XML.toJSONObject:(Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n-  #135 = Methodref          #76.#414      // org/json/XML.toJSONObject:(Ljava/io/Reader;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n-  #136 = Fieldref           #334.#415     // org/json/XMLParserConfiguration.KEEP_STRINGS:Lorg/json/XMLParserConfiguration;\n-  #137 = Class              #416          // org/json/XMLTokener\n-  #138 = Methodref          #137.#417     // org/json/XMLTokener.\"<init>\":(Ljava/io/Reader;)V\n-  #139 = Methodref          #137.#418     // org/json/XMLTokener.more:()Z\n-  #140 = String             #419          // <\n-  #141 = Class              #420          // java/io/StringReader\n-  #142 = Methodref          #141.#291     // java/io/StringReader.\"<init>\":(Ljava/lang/String;)V\n-  #143 = Methodref          #76.#421      // org/json/XML.toJSONObject:(Ljava/io/Reader;Z)Lorg/json/JSONObject;\n-  #144 = Methodref          #76.#422      // org/json/XML.toString:(Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Ljava/lang/String;\n-  #145 = Methodref          #71.#423      // org/json/JSONObject.keySet:()Ljava/util/Set;\n-  #146 = InterfaceMethodref #372.#297     // java/util/Set.iterator:()Ljava/util/Iterator;\n-  #147 = Methodref          #163.#424     // java/lang/Object.getClass:()Ljava/lang/Class;\n-  #148 = Methodref          #425.#426     // java/lang/Class.isArray:()Z\n-  #149 = Methodref          #92.#427      // org/json/JSONArray.\"<init>\":(Ljava/lang/Object;)V\n-  #150 = Methodref          #92.#293      // org/json/JSONArray.length:()I\n-  #151 = Methodref          #92.#428      // org/json/JSONArray.opt:(I)Ljava/lang/Object;\n-  #152 = Methodref          #163.#314     // java/lang/Object.toString:()Ljava/lang/String;\n-  #153 = Methodref          #76.#429      // org/json/XML.escape:(Ljava/lang/String;)Ljava/lang/String;\n-  #154 = String             #430          // </\n-  #155 = String             #431          // />\n-  #156 = String             #432          // array\n-  #157 = String             #433          // \\\"\n-  #158 = String             #434          // >\n-  #159 = Methodref          #68.#435      // java/lang/Character.valueOf:(C)Ljava/lang/Character;\n-  #160 = Fieldref           #76.#436      // org/json/XML.AMP:Ljava/lang/Character;\n-  #161 = Fieldref           #76.#437      // org/json/XML.APOS:Ljava/lang/Character;\n-  #162 = Fieldref           #76.#438      // org/json/XML.QUOT:Ljava/lang/Character;\n-  #163 = Class              #439          // java/lang/Object\n+  #116 = Methodref          #251.#383     // java/lang/Double.valueOf:(D)Ljava/lang/Double;\n+  #117 = Class              #384          // java/lang/NumberFormatException\n+  #118 = Methodref          #251.#385     // java/lang/Double.valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n+  #119 = Methodref          #251.#386     // java/lang/Double.isNaN:()Z\n+  #120 = Methodref          #251.#387     // java/lang/Double.isInfinite:()Z\n+  #121 = String             #388          // val [\n+  #122 = String             #389          // ] is not a valid number.\n+  #123 = Methodref          #117.#280     // java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n+  #124 = Class              #390          // java/math/BigInteger\n+  #125 = Methodref          #124.#280     // java/math/BigInteger.\"<init>\":(Ljava/lang/String;)V\n+  #126 = Methodref          #124.#391     // java/math/BigInteger.bitLength:()I\n+  #127 = Methodref          #124.#290     // java/math/BigInteger.intValue:()I\n+  #128 = Methodref          #11.#392      // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+  #129 = Methodref          #124.#393     // java/math/BigInteger.longValue:()J\n+  #130 = Methodref          #394.#395     // java/lang/Long.valueOf:(J)Ljava/lang/Long;\n+  #131 = Methodref          #70.#396      // java/lang/String.indexOf:(I)I\n+  #132 = String             #397          // -0\n+  #133 = Fieldref           #230.#398     // org/json/XMLParserConfiguration.ORIGINAL:Lorg/json/XMLParserConfiguration;\n+  #134 = Methodref          #76.#399      // org/json/XML.toJSONObject:(Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n+  #135 = Methodref          #76.#400      // org/json/XML.toJSONObject:(Ljava/io/Reader;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n+  #136 = Fieldref           #230.#401     // org/json/XMLParserConfiguration.KEEP_STRINGS:Lorg/json/XMLParserConfiguration;\n+  #137 = Class              #402          // org/json/XMLTokener\n+  #138 = Methodref          #137.#403     // org/json/XMLTokener.\"<init>\":(Ljava/io/Reader;)V\n+  #139 = Methodref          #137.#404     // org/json/XMLTokener.more:()Z\n+  #140 = String             #405          // <\n+  #141 = Class              #406          // java/io/StringReader\n+  #142 = Methodref          #141.#280     // java/io/StringReader.\"<init>\":(Ljava/lang/String;)V\n+  #143 = Methodref          #76.#407      // org/json/XML.toJSONObject:(Ljava/io/Reader;Z)Lorg/json/JSONObject;\n+  #144 = Methodref          #76.#408      // org/json/XML.toString:(Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Ljava/lang/String;\n+  #145 = Methodref          #71.#409      // org/json/JSONObject.keySet:()Ljava/util/Set;\n+  #146 = InterfaceMethodref #359.#286     // java/util/Set.iterator:()Ljava/util/Iterator;\n+  #147 = Methodref          #163.#410     // java/lang/Object.getClass:()Ljava/lang/Class;\n+  #148 = Methodref          #411.#412     // java/lang/Class.isArray:()Z\n+  #149 = Methodref          #92.#413      // org/json/JSONArray.\"<init>\":(Ljava/lang/Object;)V\n+  #150 = Methodref          #92.#282      // org/json/JSONArray.length:()I\n+  #151 = Methodref          #92.#414      // org/json/JSONArray.opt:(I)Ljava/lang/Object;\n+  #152 = Methodref          #163.#302     // java/lang/Object.toString:()Ljava/lang/String;\n+  #153 = Methodref          #76.#415      // org/json/XML.escape:(Ljava/lang/String;)Ljava/lang/String;\n+  #154 = String             #416          // </\n+  #155 = String             #417          // />\n+  #156 = String             #418          // array\n+  #157 = String             #419          // \\\"\n+  #158 = String             #420          // >\n+  #159 = Methodref          #68.#421      // java/lang/Character.valueOf:(C)Ljava/lang/Character;\n+  #160 = Fieldref           #76.#422      // org/json/XML.AMP:Ljava/lang/Character;\n+  #161 = Fieldref           #76.#423      // org/json/XML.APOS:Ljava/lang/Character;\n+  #162 = Fieldref           #76.#424      // org/json/XML.QUOT:Ljava/lang/Character;\n+  #163 = Class              #425          // java/lang/Object\n   #164 = Utf8               InnerClasses\n   #165 = Utf8               AMP\n   #166 = Utf8               Ljava/lang/Character;\n   #167 = Utf8               APOS\n   #168 = Utf8               BANG\n   #169 = Utf8               EQ\n   #170 = Utf8               GT\n@@ -200,351 +200,337 @@\n   #191 = Utf8               escape\n   #192 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n   #193 = Utf8               cp\n   #194 = Utf8               I\n   #195 = Utf8               sb\n   #196 = Utf8               Ljava/lang/StringBuilder;\n   #197 = Utf8               StackMapTable\n-  #198 = Class              #292          // java/lang/StringBuilder\n-  #199 = Class              #440          // java/util/Iterator\n-  #200 = Utf8               mustEscape\n-  #201 = Utf8               (I)Z\n-  #202 = Utf8               unescape\n-  #203 = Utf8               entity\n-  #204 = Utf8               semic\n-  #205 = Utf8               c\n-  #206 = Utf8               C\n-  #207 = Utf8               i\n-  #208 = Utf8               length\n-  #209 = Utf8               noSpace\n-  #210 = Utf8               (Ljava/lang/String;)V\n-  #211 = Class              #353          // java/lang/String\n-  #212 = Utf8               Exceptions\n-  #213 = Utf8               parse\n-  #214 = Utf8               (Lorg/json/XMLTokener;Lorg/json/JSONObject;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Z\n-  #215 = Utf8               nilAttributeFound\n-  #216 = Utf8               Z\n-  #217 = Utf8               x\n-  #218 = Utf8               Lorg/json/XMLTokener;\n-  #219 = Utf8               context\n-  #220 = Utf8               Lorg/json/JSONObject;\n-  #221 = Utf8               name\n-  #222 = Utf8               config\n-  #223 = Utf8               Lorg/json/XMLParserConfiguration;\n-  #224 = Utf8               jsonObject\n-  #225 = Utf8               tagName\n-  #226 = Utf8               token\n-  #227 = Utf8               Ljava/lang/Object;\n-  #228 = Utf8               xmlXsiTypeConverter\n-  #229 = Utf8               Lorg/json/XMLXsiTypeConverter;\n-  #230 = Utf8               LocalVariableTypeTable\n-  #231 = Utf8               Lorg/json/XMLXsiTypeConverter<*>;\n-  #232 = Class              #416          // org/json/XMLTokener\n-  #233 = Class              #354          // org/json/JSONObject\n-  #234 = Class              #441          // org/json/XMLParserConfiguration\n-  #235 = Class              #439          // java/lang/Object\n-  #236 = Class              #367          // org/json/XMLXsiTypeConverter\n-  #237 = Utf8               stringToValue\n-  #238 = Utf8               (Ljava/lang/String;Lorg/json/XMLXsiTypeConverter;)Ljava/lang/Object;\n-  #239 = Utf8               typeConverter\n-  #240 = Utf8               (Ljava/lang/String;Lorg/json/XMLXsiTypeConverter<*>;)Ljava/lang/Object;\n-  #241 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n-  #242 = Utf8               initial\n-  #243 = Class              #391          // java/lang/Exception\n-  #244 = Utf8               stringToNumber\n-  #245 = Utf8               (Ljava/lang/String;)Ljava/lang/Number;\n-  #246 = Utf8               bd\n-  #247 = Utf8               Ljava/math/BigDecimal;\n-  #248 = Utf8               d\n-  #249 = Utf8               Ljava/lang/Double;\n-  #250 = Utf8               ignore\n-  #251 = Utf8               Ljava/lang/NumberFormatException;\n-  #252 = Utf8               retryAsDouble\n-  #253 = Utf8               at1\n-  #254 = Utf8               at2\n-  #255 = Utf8               bi\n-  #256 = Utf8               Ljava/math/BigInteger;\n-  #257 = Utf8               val\n-  #258 = Class              #393          // java/math/BigDecimal\n-  #259 = Class              #398          // java/lang/NumberFormatException\n-  #260 = Class              #442          // java/lang/Double\n-  #261 = Class              #404          // java/math/BigInteger\n-  #262 = Utf8               isDecimalNotation\n-  #263 = Utf8               (Ljava/lang/String;)Z\n-  #264 = Utf8               toJSONObject\n-  #265 = Utf8               (Ljava/lang/String;)Lorg/json/JSONObject;\n-  #266 = Utf8               (Ljava/io/Reader;)Lorg/json/JSONObject;\n-  #267 = Utf8               reader\n-  #268 = Utf8               Ljava/io/Reader;\n-  #269 = Utf8               (Ljava/io/Reader;Z)Lorg/json/JSONObject;\n-  #270 = Utf8               keepStrings\n-  #271 = Utf8               (Ljava/io/Reader;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n-  #272 = Utf8               jo\n-  #273 = Utf8               (Ljava/lang/String;Z)Lorg/json/JSONObject;\n-  #274 = Utf8               (Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n-  #275 = Utf8               toString\n-  #276 = Utf8               (Ljava/lang/Object;)Ljava/lang/String;\n-  #277 = Utf8               object\n-  #278 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n-  #279 = Utf8               (Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Ljava/lang/String;\n-  #280 = Utf8               jaLength\n-  #281 = Utf8               ja\n-  #282 = Utf8               Lorg/json/JSONArray;\n-  #283 = Utf8               value\n-  #284 = Utf8               key\n-  #285 = Class              #376          // org/json/JSONArray\n-  #286 = Utf8               <clinit>\n-  #287 = Utf8               SourceFile\n-  #288 = Utf8               XML.java\n-  #289 = NameAndType        #179:#180     // \"<init>\":()V\n-  #290 = Utf8               org/json/XML$1\n-  #291 = NameAndType        #179:#210     // \"<init>\":(Ljava/lang/String;)V\n-  #292 = Utf8               java/lang/StringBuilder\n-  #293 = NameAndType        #208:#443     // length:()I\n-  #294 = NameAndType        #179:#444     // \"<init>\":(I)V\n-  #295 = NameAndType        #186:#187     // codePointIterator:(Ljava/lang/String;)Ljava/lang/Iterable;\n-  #296 = Class              #445          // java/lang/Iterable\n-  #297 = NameAndType        #446:#447     // iterator:()Ljava/util/Iterator;\n-  #298 = Class              #440          // java/util/Iterator\n-  #299 = NameAndType        #448:#449     // hasNext:()Z\n-  #300 = NameAndType        #450:#451     // next:()Ljava/lang/Object;\n-  #301 = Utf8               java/lang/Integer\n-  #302 = NameAndType        #452:#443     // intValue:()I\n-  #303 = Utf8               &amp;\n-  #304 = NameAndType        #453:#454     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #305 = Utf8               &lt;\n-  #306 = Utf8               &gt;\n-  #307 = Utf8               &quot;\n-  #308 = Utf8               &apos;\n-  #309 = NameAndType        #200:#201     // mustEscape:(I)Z\n-  #310 = Utf8               &#x\n-  #311 = NameAndType        #455:#456     // toHexString:(I)Ljava/lang/String;\n-  #312 = NameAndType        #453:#457     // append:(C)Ljava/lang/StringBuilder;\n-  #313 = NameAndType        #458:#459     // appendCodePoint:(I)Ljava/lang/StringBuilder;\n-  #314 = NameAndType        #275:#460     // toString:()Ljava/lang/String;\n-  #315 = NameAndType        #461:#201     // isISOControl:(I)Z\n-  #316 = NameAndType        #462:#463     // charAt:(I)C\n-  #317 = NameAndType        #464:#465     // indexOf:(II)I\n-  #318 = NameAndType        #466:#467     // substring:(II)Ljava/lang/String;\n-  #319 = NameAndType        #468:#192     // unescapeEntity:(Ljava/lang/String;)Ljava/lang/String;\n-  #320 = Utf8               org/json/JSONException\n-  #321 = Utf8               Empty string.\n-  #322 = NameAndType        #469:#470     // isWhitespace:(C)Z\n-  #323 = Utf8               \\'\n-  #324 = Utf8               \\' contains a space character.\n-  #325 = NameAndType        #471:#451     // nextToken:()Ljava/lang/Object;\n-  #326 = NameAndType        #168:#166     // BANG:Ljava/lang/Character;\n-  #327 = NameAndType        #450:#472     // next:()C\n-  #328 = Utf8               -->\n-  #329 = NameAndType        #473:#210     // skipPast:(Ljava/lang/String;)V\n-  #330 = NameAndType        #474:#180     // back:()V\n-  #331 = Utf8               CDATA\n-  #332 = NameAndType        #475:#476     // equals:(Ljava/lang/Object;)Z\n-  #333 = NameAndType        #477:#460     // nextCDATA:()Ljava/lang/String;\n-  #334 = Class              #441          // org/json/XMLParserConfiguration\n-  #335 = NameAndType        #478:#460     // getcDataTagName:()Ljava/lang/String;\n-  #336 = NameAndType        #479:#480     // accumulate:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-  #337 = Utf8               Expected \\'CDATA[\\'\n-  #338 = NameAndType        #481:#482     // syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n-  #339 = NameAndType        #483:#451     // nextMeta:()Ljava/lang/Object;\n-  #340 = Utf8               Missing \\'>\\' after \\'<!\\'.\n-  #341 = NameAndType        #171:#166     // LT:Ljava/lang/Character;\n-  #342 = NameAndType        #170:#166     // GT:Ljava/lang/Character;\n-  #343 = NameAndType        #172:#166     // QUEST:Ljava/lang/Character;\n-  #344 = Utf8               ?>\n-  #345 = NameAndType        #174:#166     // SLASH:Ljava/lang/Character;\n-  #346 = Utf8               Mismatched close tag\n-  #347 = NameAndType        #453:#484     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #348 = Utf8               Mismatched\n-  #349 = Utf8                and\n-  #350 = Utf8               Misshaped close tag\n-  #351 = Utf8               java/lang/Character\n-  #352 = Utf8               Misshaped tag\n-  #353 = Utf8               java/lang/String\n-  #354 = Utf8               org/json/JSONObject\n-  #355 = NameAndType        #169:#166     // EQ:Ljava/lang/Character;\n-  #356 = Utf8               Missing value\n-  #357 = NameAndType        #485:#449     // isConvertNilAttributeToNull:()Z\n-  #358 = Utf8               org/json/XML\n-  #359 = Utf8               xsi:nil\n-  #360 = Class              #486          // java/lang/Boolean\n-  #361 = NameAndType        #487:#263     // parseBoolean:(Ljava/lang/String;)Z\n-  #362 = NameAndType        #488:#489     // getXsiTypeMap:()Ljava/util/Map;\n-  #363 = Class              #490          // java/util/Map\n-  #364 = NameAndType        #491:#449     // isEmpty:()Z\n-  #365 = Utf8               xsi:type\n-  #366 = NameAndType        #492:#493     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #367 = Utf8               org/json/XMLXsiTypeConverter\n-  #368 = NameAndType        #494:#449     // isKeepStrings:()Z\n-  #369 = NameAndType        #237:#241     // stringToValue:(Ljava/lang/String;)Ljava/lang/Object;\n-  #370 = Utf8\n-  #371 = NameAndType        #495:#496     // getForceList:()Ljava/util/Set;\n-  #372 = Class              #497          // java/util/Set\n-  #373 = NameAndType        #498:#476     // contains:(Ljava/lang/Object;)Z\n-  #374 = NameAndType        #499:#227     // NULL:Ljava/lang/Object;\n-  #375 = NameAndType        #453:#480     // append:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-  #376 = Utf8               org/json/JSONArray\n-  #377 = NameAndType        #500:#480     // put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-  #378 = NameAndType        #501:#451     // nextContent:()Ljava/lang/Object;\n-  #379 = Utf8               Unclosed tag\n-  #380 = NameAndType        #237:#238     // stringToValue:(Ljava/lang/String;Lorg/json/XMLXsiTypeConverter;)Ljava/lang/Object;\n-  #381 = NameAndType        #213:#214     // parse:(Lorg/json/XMLTokener;Lorg/json/JSONObject;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Z\n-  #382 = NameAndType        #502:#241     // opt:(Ljava/lang/String;)Ljava/lang/Object;\n-  #383 = NameAndType        #503:#241     // convert:(Ljava/lang/String;)Ljava/lang/Object;\n-  #384 = Utf8               true\n-  #385 = NameAndType        #504:#263     // equalsIgnoreCase:(Ljava/lang/String;)Z\n-  #386 = NameAndType        #505:#506     // TRUE:Ljava/lang/Boolean;\n-  #387 = Utf8               false\n-  #388 = NameAndType        #507:#506     // FALSE:Ljava/lang/Boolean;\n-  #389 = Utf8               null\n-  #390 = NameAndType        #244:#245     // stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n-  #391 = Utf8               java/lang/Exception\n-  #392 = NameAndType        #262:#263     // isDecimalNotation:(Ljava/lang/String;)Z\n-  #393 = Utf8               java/math/BigDecimal\n-  #394 = NameAndType        #508:#247     // ZERO:Ljava/math/BigDecimal;\n-  #395 = NameAndType        #509:#510     // compareTo:(Ljava/math/BigDecimal;)I\n-  #396 = Class              #442          // java/lang/Double\n-  #397 = NameAndType        #511:#512     // valueOf:(D)Ljava/lang/Double;\n-  #398 = Utf8               java/lang/NumberFormatException\n-  #399 = NameAndType        #511:#513     // valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n-  #400 = NameAndType        #514:#449     // isNaN:()Z\n-  #401 = NameAndType        #515:#449     // isInfinite:()Z\n-  #402 = Utf8               val [\n-  #403 = Utf8               ] is not a valid number.\n-  #404 = Utf8               java/math/BigInteger\n-  #405 = NameAndType        #516:#443     // bitLength:()I\n-  #406 = NameAndType        #511:#517     // valueOf:(I)Ljava/lang/Integer;\n-  #407 = NameAndType        #518:#519     // longValue:()J\n-  #408 = Class              #520          // java/lang/Long\n-  #409 = NameAndType        #511:#521     // valueOf:(J)Ljava/lang/Long;\n-  #410 = NameAndType        #464:#522     // indexOf:(I)I\n-  #411 = Utf8               -0\n-  #412 = NameAndType        #523:#223     // ORIGINAL:Lorg/json/XMLParserConfiguration;\n-  #413 = NameAndType        #264:#274     // toJSONObject:(Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n-  #414 = NameAndType        #264:#271     // toJSONObject:(Ljava/io/Reader;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n-  #415 = NameAndType        #524:#223     // KEEP_STRINGS:Lorg/json/XMLParserConfiguration;\n-  #416 = Utf8               org/json/XMLTokener\n-  #417 = NameAndType        #179:#525     // \"<init>\":(Ljava/io/Reader;)V\n-  #418 = NameAndType        #526:#449     // more:()Z\n-  #419 = Utf8               <\n-  #420 = Utf8               java/io/StringReader\n-  #421 = NameAndType        #264:#269     // toJSONObject:(Ljava/io/Reader;Z)Lorg/json/JSONObject;\n-  #422 = NameAndType        #275:#279     // toString:(Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Ljava/lang/String;\n-  #423 = NameAndType        #527:#496     // keySet:()Ljava/util/Set;\n-  #424 = NameAndType        #528:#529     // getClass:()Ljava/lang/Class;\n-  #425 = Class              #530          // java/lang/Class\n-  #426 = NameAndType        #531:#449     // isArray:()Z\n-  #427 = NameAndType        #179:#532     // \"<init>\":(Ljava/lang/Object;)V\n-  #428 = NameAndType        #502:#533     // opt:(I)Ljava/lang/Object;\n-  #429 = NameAndType        #191:#192     // escape:(Ljava/lang/String;)Ljava/lang/String;\n-  #430 = Utf8               </\n-  #431 = Utf8               />\n-  #432 = Utf8               array\n-  #433 = Utf8               \\\"\n-  #434 = Utf8               >\n-  #435 = NameAndType        #511:#534     // valueOf:(C)Ljava/lang/Character;\n-  #436 = NameAndType        #165:#166     // AMP:Ljava/lang/Character;\n-  #437 = NameAndType        #167:#166     // APOS:Ljava/lang/Character;\n-  #438 = NameAndType        #173:#166     // QUOT:Ljava/lang/Character;\n-  #439 = Utf8               java/lang/Object\n-  #440 = Utf8               java/util/Iterator\n-  #441 = Utf8               org/json/XMLParserConfiguration\n-  #442 = Utf8               java/lang/Double\n-  #443 = Utf8               ()I\n-  #444 = Utf8               (I)V\n-  #445 = Utf8               java/lang/Iterable\n-  #446 = Utf8               iterator\n-  #447 = Utf8               ()Ljava/util/Iterator;\n-  #448 = Utf8               hasNext\n-  #449 = Utf8               ()Z\n-  #450 = Utf8               next\n-  #451 = Utf8               ()Ljava/lang/Object;\n-  #452 = Utf8               intValue\n-  #453 = Utf8               append\n-  #454 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #455 = Utf8               toHexString\n-  #456 = Utf8               (I)Ljava/lang/String;\n-  #457 = Utf8               (C)Ljava/lang/StringBuilder;\n-  #458 = Utf8               appendCodePoint\n-  #459 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #460 = Utf8               ()Ljava/lang/String;\n-  #461 = Utf8               isISOControl\n-  #462 = Utf8               charAt\n-  #463 = Utf8               (I)C\n-  #464 = Utf8               indexOf\n-  #465 = Utf8               (II)I\n-  #466 = Utf8               substring\n-  #467 = Utf8               (II)Ljava/lang/String;\n-  #468 = Utf8               unescapeEntity\n-  #469 = Utf8               isWhitespace\n-  #470 = Utf8               (C)Z\n-  #471 = Utf8               nextToken\n-  #472 = Utf8               ()C\n-  #473 = Utf8               skipPast\n-  #474 = Utf8               back\n-  #475 = Utf8               equals\n-  #476 = Utf8               (Ljava/lang/Object;)Z\n-  #477 = Utf8               nextCDATA\n-  #478 = Utf8               getcDataTagName\n-  #479 = Utf8               accumulate\n-  #480 = Utf8               (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n-  #481 = Utf8               syntaxError\n-  #482 = Utf8               (Ljava/lang/String;)Lorg/json/JSONException;\n-  #483 = Utf8               nextMeta\n-  #484 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #485 = Utf8               isConvertNilAttributeToNull\n-  #486 = Utf8               java/lang/Boolean\n-  #487 = Utf8               parseBoolean\n-  #488 = Utf8               getXsiTypeMap\n-  #489 = Utf8               ()Ljava/util/Map;\n-  #490 = Utf8               java/util/Map\n-  #491 = Utf8               isEmpty\n-  #492 = Utf8               get\n-  #493 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #494 = Utf8               isKeepStrings\n-  #495 = Utf8               getForceList\n-  #496 = Utf8               ()Ljava/util/Set;\n-  #497 = Utf8               java/util/Set\n-  #498 = Utf8               contains\n-  #499 = Utf8               NULL\n-  #500 = Utf8               put\n-  #501 = Utf8               nextContent\n-  #502 = Utf8               opt\n-  #503 = Utf8               convert\n-  #504 = Utf8               equalsIgnoreCase\n-  #505 = Utf8               TRUE\n-  #506 = Utf8               Ljava/lang/Boolean;\n-  #507 = Utf8               FALSE\n-  #508 = Utf8               ZERO\n-  #509 = Utf8               compareTo\n-  #510 = Utf8               (Ljava/math/BigDecimal;)I\n-  #511 = Utf8               valueOf\n-  #512 = Utf8               (D)Ljava/lang/Double;\n-  #513 = Utf8               (Ljava/lang/String;)Ljava/lang/Double;\n-  #514 = Utf8               isNaN\n-  #515 = Utf8               isInfinite\n-  #516 = Utf8               bitLength\n-  #517 = Utf8               (I)Ljava/lang/Integer;\n-  #518 = Utf8               longValue\n-  #519 = Utf8               ()J\n-  #520 = Utf8               java/lang/Long\n-  #521 = Utf8               (J)Ljava/lang/Long;\n-  #522 = Utf8               (I)I\n-  #523 = Utf8               ORIGINAL\n-  #524 = Utf8               KEEP_STRINGS\n-  #525 = Utf8               (Ljava/io/Reader;)V\n-  #526 = Utf8               more\n-  #527 = Utf8               keySet\n-  #528 = Utf8               getClass\n-  #529 = Utf8               ()Ljava/lang/Class;\n-  #530 = Utf8               java/lang/Class\n-  #531 = Utf8               isArray\n-  #532 = Utf8               (Ljava/lang/Object;)V\n-  #533 = Utf8               (I)Ljava/lang/Object;\n-  #534 = Utf8               (C)Ljava/lang/Character;\n+  #198 = Class              #426          // java/util/Iterator\n+  #199 = Utf8               mustEscape\n+  #200 = Utf8               (I)Z\n+  #201 = Utf8               unescape\n+  #202 = Utf8               entity\n+  #203 = Utf8               semic\n+  #204 = Utf8               c\n+  #205 = Utf8               C\n+  #206 = Utf8               i\n+  #207 = Utf8               length\n+  #208 = Utf8               noSpace\n+  #209 = Utf8               (Ljava/lang/String;)V\n+  #210 = Utf8               Exceptions\n+  #211 = Utf8               parse\n+  #212 = Utf8               (Lorg/json/XMLTokener;Lorg/json/JSONObject;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Z\n+  #213 = Utf8               nilAttributeFound\n+  #214 = Utf8               Z\n+  #215 = Utf8               x\n+  #216 = Utf8               Lorg/json/XMLTokener;\n+  #217 = Utf8               context\n+  #218 = Utf8               Lorg/json/JSONObject;\n+  #219 = Utf8               name\n+  #220 = Utf8               config\n+  #221 = Utf8               Lorg/json/XMLParserConfiguration;\n+  #222 = Utf8               jsonObject\n+  #223 = Utf8               tagName\n+  #224 = Utf8               token\n+  #225 = Utf8               Ljava/lang/Object;\n+  #226 = Utf8               xmlXsiTypeConverter\n+  #227 = Utf8               Lorg/json/XMLXsiTypeConverter;\n+  #228 = Utf8               LocalVariableTypeTable\n+  #229 = Utf8               Lorg/json/XMLXsiTypeConverter<*>;\n+  #230 = Class              #427          // org/json/XMLParserConfiguration\n+  #231 = Utf8               stringToValue\n+  #232 = Utf8               (Ljava/lang/String;Lorg/json/XMLXsiTypeConverter;)Ljava/lang/Object;\n+  #233 = Utf8               typeConverter\n+  #234 = Utf8               (Ljava/lang/String;Lorg/json/XMLXsiTypeConverter<*>;)Ljava/lang/Object;\n+  #235 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n+  #236 = Utf8               initial\n+  #237 = Utf8               stringToNumber\n+  #238 = Utf8               (Ljava/lang/String;)Ljava/lang/Number;\n+  #239 = Utf8               bd\n+  #240 = Utf8               Ljava/math/BigDecimal;\n+  #241 = Utf8               d\n+  #242 = Utf8               Ljava/lang/Double;\n+  #243 = Utf8               ignore\n+  #244 = Utf8               Ljava/lang/NumberFormatException;\n+  #245 = Utf8               retryAsDouble\n+  #246 = Utf8               at1\n+  #247 = Utf8               at2\n+  #248 = Utf8               bi\n+  #249 = Utf8               Ljava/math/BigInteger;\n+  #250 = Utf8               val\n+  #251 = Class              #428          // java/lang/Double\n+  #252 = Utf8               isDecimalNotation\n+  #253 = Utf8               (Ljava/lang/String;)Z\n+  #254 = Utf8               toJSONObject\n+  #255 = Utf8               (Ljava/lang/String;)Lorg/json/JSONObject;\n+  #256 = Utf8               (Ljava/io/Reader;)Lorg/json/JSONObject;\n+  #257 = Utf8               reader\n+  #258 = Utf8               Ljava/io/Reader;\n+  #259 = Utf8               (Ljava/io/Reader;Z)Lorg/json/JSONObject;\n+  #260 = Utf8               keepStrings\n+  #261 = Utf8               (Ljava/io/Reader;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n+  #262 = Utf8               jo\n+  #263 = Utf8               (Ljava/lang/String;Z)Lorg/json/JSONObject;\n+  #264 = Utf8               (Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n+  #265 = Utf8               toString\n+  #266 = Utf8               (Ljava/lang/Object;)Ljava/lang/String;\n+  #267 = Utf8               object\n+  #268 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;\n+  #269 = Utf8               (Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Ljava/lang/String;\n+  #270 = Utf8               jaLength\n+  #271 = Utf8               ja\n+  #272 = Utf8               Lorg/json/JSONArray;\n+  #273 = Utf8               value\n+  #274 = Utf8               key\n+  #275 = Utf8               <clinit>\n+  #276 = Utf8               SourceFile\n+  #277 = Utf8               XML.java\n+  #278 = NameAndType        #179:#180     // \"<init>\":()V\n+  #279 = Utf8               org/json/XML$1\n+  #280 = NameAndType        #179:#209     // \"<init>\":(Ljava/lang/String;)V\n+  #281 = Utf8               java/lang/StringBuilder\n+  #282 = NameAndType        #207:#429     // length:()I\n+  #283 = NameAndType        #179:#430     // \"<init>\":(I)V\n+  #284 = NameAndType        #186:#187     // codePointIterator:(Ljava/lang/String;)Ljava/lang/Iterable;\n+  #285 = Class              #431          // java/lang/Iterable\n+  #286 = NameAndType        #432:#433     // iterator:()Ljava/util/Iterator;\n+  #287 = NameAndType        #434:#435     // hasNext:()Z\n+  #288 = NameAndType        #436:#437     // next:()Ljava/lang/Object;\n+  #289 = Utf8               java/lang/Integer\n+  #290 = NameAndType        #438:#429     // intValue:()I\n+  #291 = Utf8               &amp;\n+  #292 = NameAndType        #439:#440     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #293 = Utf8               &lt;\n+  #294 = Utf8               &gt;\n+  #295 = Utf8               &quot;\n+  #296 = Utf8               &apos;\n+  #297 = NameAndType        #199:#200     // mustEscape:(I)Z\n+  #298 = Utf8               &#x\n+  #299 = NameAndType        #441:#442     // toHexString:(I)Ljava/lang/String;\n+  #300 = NameAndType        #439:#443     // append:(C)Ljava/lang/StringBuilder;\n+  #301 = NameAndType        #444:#445     // appendCodePoint:(I)Ljava/lang/StringBuilder;\n+  #302 = NameAndType        #265:#446     // toString:()Ljava/lang/String;\n+  #303 = NameAndType        #447:#200     // isISOControl:(I)Z\n+  #304 = NameAndType        #448:#449     // charAt:(I)C\n+  #305 = NameAndType        #450:#451     // indexOf:(II)I\n+  #306 = NameAndType        #452:#453     // substring:(II)Ljava/lang/String;\n+  #307 = NameAndType        #454:#192     // unescapeEntity:(Ljava/lang/String;)Ljava/lang/String;\n+  #308 = Utf8               org/json/JSONException\n+  #309 = Utf8               Empty string.\n+  #310 = NameAndType        #455:#456     // isWhitespace:(C)Z\n+  #311 = Utf8               \\'\n+  #312 = Utf8               \\' contains a space character.\n+  #313 = NameAndType        #457:#437     // nextToken:()Ljava/lang/Object;\n+  #314 = NameAndType        #168:#166     // BANG:Ljava/lang/Character;\n+  #315 = NameAndType        #436:#458     // next:()C\n+  #316 = Utf8               -->\n+  #317 = NameAndType        #459:#209     // skipPast:(Ljava/lang/String;)V\n+  #318 = NameAndType        #460:#180     // back:()V\n+  #319 = Utf8               CDATA\n+  #320 = NameAndType        #461:#462     // equals:(Ljava/lang/Object;)Z\n+  #321 = NameAndType        #463:#446     // nextCDATA:()Ljava/lang/String;\n+  #322 = NameAndType        #464:#446     // getcDataTagName:()Ljava/lang/String;\n+  #323 = NameAndType        #465:#466     // accumulate:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #324 = Utf8               Expected \\'CDATA[\\'\n+  #325 = NameAndType        #467:#468     // syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n+  #326 = NameAndType        #469:#437     // nextMeta:()Ljava/lang/Object;\n+  #327 = Utf8               Missing \\'>\\' after \\'<!\\'.\n+  #328 = NameAndType        #171:#166     // LT:Ljava/lang/Character;\n+  #329 = NameAndType        #170:#166     // GT:Ljava/lang/Character;\n+  #330 = NameAndType        #172:#166     // QUEST:Ljava/lang/Character;\n+  #331 = Utf8               ?>\n+  #332 = NameAndType        #174:#166     // SLASH:Ljava/lang/Character;\n+  #333 = Utf8               Mismatched close tag\n+  #334 = NameAndType        #439:#470     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #335 = Utf8               Mismatched\n+  #336 = Utf8                and\n+  #337 = Utf8               Misshaped close tag\n+  #338 = Utf8               java/lang/Character\n+  #339 = Utf8               Misshaped tag\n+  #340 = Utf8               java/lang/String\n+  #341 = Utf8               org/json/JSONObject\n+  #342 = NameAndType        #169:#166     // EQ:Ljava/lang/Character;\n+  #343 = Utf8               Missing value\n+  #344 = NameAndType        #471:#435     // isConvertNilAttributeToNull:()Z\n+  #345 = Utf8               org/json/XML\n+  #346 = Utf8               xsi:nil\n+  #347 = Class              #472          // java/lang/Boolean\n+  #348 = NameAndType        #473:#253     // parseBoolean:(Ljava/lang/String;)Z\n+  #349 = NameAndType        #474:#475     // getXsiTypeMap:()Ljava/util/Map;\n+  #350 = Class              #476          // java/util/Map\n+  #351 = NameAndType        #477:#435     // isEmpty:()Z\n+  #352 = Utf8               xsi:type\n+  #353 = NameAndType        #478:#479     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #354 = Utf8               org/json/XMLXsiTypeConverter\n+  #355 = NameAndType        #480:#435     // isKeepStrings:()Z\n+  #356 = NameAndType        #231:#235     // stringToValue:(Ljava/lang/String;)Ljava/lang/Object;\n+  #357 = Utf8\n+  #358 = NameAndType        #481:#482     // getForceList:()Ljava/util/Set;\n+  #359 = Class              #483          // java/util/Set\n+  #360 = NameAndType        #484:#462     // contains:(Ljava/lang/Object;)Z\n+  #361 = NameAndType        #485:#225     // NULL:Ljava/lang/Object;\n+  #362 = NameAndType        #439:#466     // append:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #363 = Utf8               org/json/JSONArray\n+  #364 = NameAndType        #486:#466     // put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #365 = NameAndType        #487:#437     // nextContent:()Ljava/lang/Object;\n+  #366 = Utf8               Unclosed tag\n+  #367 = NameAndType        #231:#232     // stringToValue:(Ljava/lang/String;Lorg/json/XMLXsiTypeConverter;)Ljava/lang/Object;\n+  #368 = NameAndType        #211:#212     // parse:(Lorg/json/XMLTokener;Lorg/json/JSONObject;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Z\n+  #369 = NameAndType        #488:#235     // opt:(Ljava/lang/String;)Ljava/lang/Object;\n+  #370 = NameAndType        #489:#235     // convert:(Ljava/lang/String;)Ljava/lang/Object;\n+  #371 = Utf8               true\n+  #372 = NameAndType        #490:#253     // equalsIgnoreCase:(Ljava/lang/String;)Z\n+  #373 = NameAndType        #491:#492     // TRUE:Ljava/lang/Boolean;\n+  #374 = Utf8               false\n+  #375 = NameAndType        #493:#492     // FALSE:Ljava/lang/Boolean;\n+  #376 = Utf8               null\n+  #377 = NameAndType        #237:#238     // stringToNumber:(Ljava/lang/String;)Ljava/lang/Number;\n+  #378 = Utf8               java/lang/Exception\n+  #379 = NameAndType        #252:#253     // isDecimalNotation:(Ljava/lang/String;)Z\n+  #380 = Utf8               java/math/BigDecimal\n+  #381 = NameAndType        #494:#240     // ZERO:Ljava/math/BigDecimal;\n+  #382 = NameAndType        #495:#496     // compareTo:(Ljava/math/BigDecimal;)I\n+  #383 = NameAndType        #497:#498     // valueOf:(D)Ljava/lang/Double;\n+  #384 = Utf8               java/lang/NumberFormatException\n+  #385 = NameAndType        #497:#499     // valueOf:(Ljava/lang/String;)Ljava/lang/Double;\n+  #386 = NameAndType        #500:#435     // isNaN:()Z\n+  #387 = NameAndType        #501:#435     // isInfinite:()Z\n+  #388 = Utf8               val [\n+  #389 = Utf8               ] is not a valid number.\n+  #390 = Utf8               java/math/BigInteger\n+  #391 = NameAndType        #502:#429     // bitLength:()I\n+  #392 = NameAndType        #497:#503     // valueOf:(I)Ljava/lang/Integer;\n+  #393 = NameAndType        #504:#505     // longValue:()J\n+  #394 = Class              #506          // java/lang/Long\n+  #395 = NameAndType        #497:#507     // valueOf:(J)Ljava/lang/Long;\n+  #396 = NameAndType        #450:#508     // indexOf:(I)I\n+  #397 = Utf8               -0\n+  #398 = NameAndType        #509:#221     // ORIGINAL:Lorg/json/XMLParserConfiguration;\n+  #399 = NameAndType        #254:#264     // toJSONObject:(Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n+  #400 = NameAndType        #254:#261     // toJSONObject:(Ljava/io/Reader;Lorg/json/XMLParserConfiguration;)Lorg/json/JSONObject;\n+  #401 = NameAndType        #510:#221     // KEEP_STRINGS:Lorg/json/XMLParserConfiguration;\n+  #402 = Utf8               org/json/XMLTokener\n+  #403 = NameAndType        #179:#511     // \"<init>\":(Ljava/io/Reader;)V\n+  #404 = NameAndType        #512:#435     // more:()Z\n+  #405 = Utf8               <\n+  #406 = Utf8               java/io/StringReader\n+  #407 = NameAndType        #254:#259     // toJSONObject:(Ljava/io/Reader;Z)Lorg/json/JSONObject;\n+  #408 = NameAndType        #265:#269     // toString:(Ljava/lang/Object;Ljava/lang/String;Lorg/json/XMLParserConfiguration;)Ljava/lang/String;\n+  #409 = NameAndType        #513:#482     // keySet:()Ljava/util/Set;\n+  #410 = NameAndType        #514:#515     // getClass:()Ljava/lang/Class;\n+  #411 = Class              #516          // java/lang/Class\n+  #412 = NameAndType        #517:#435     // isArray:()Z\n+  #413 = NameAndType        #179:#518     // \"<init>\":(Ljava/lang/Object;)V\n+  #414 = NameAndType        #488:#519     // opt:(I)Ljava/lang/Object;\n+  #415 = NameAndType        #191:#192     // escape:(Ljava/lang/String;)Ljava/lang/String;\n+  #416 = Utf8               </\n+  #417 = Utf8               />\n+  #418 = Utf8               array\n+  #419 = Utf8               \\\"\n+  #420 = Utf8               >\n+  #421 = NameAndType        #497:#520     // valueOf:(C)Ljava/lang/Character;\n+  #422 = NameAndType        #165:#166     // AMP:Ljava/lang/Character;\n+  #423 = NameAndType        #167:#166     // APOS:Ljava/lang/Character;\n+  #424 = NameAndType        #173:#166     // QUOT:Ljava/lang/Character;\n+  #425 = Utf8               java/lang/Object\n+  #426 = Utf8               java/util/Iterator\n+  #427 = Utf8               org/json/XMLParserConfiguration\n+  #428 = Utf8               java/lang/Double\n+  #429 = Utf8               ()I\n+  #430 = Utf8               (I)V\n+  #431 = Utf8               java/lang/Iterable\n+  #432 = Utf8               iterator\n+  #433 = Utf8               ()Ljava/util/Iterator;\n+  #434 = Utf8               hasNext\n+  #435 = Utf8               ()Z\n+  #436 = Utf8               next\n+  #437 = Utf8               ()Ljava/lang/Object;\n+  #438 = Utf8               intValue\n+  #439 = Utf8               append\n+  #440 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #441 = Utf8               toHexString\n+  #442 = Utf8               (I)Ljava/lang/String;\n+  #443 = Utf8               (C)Ljava/lang/StringBuilder;\n+  #444 = Utf8               appendCodePoint\n+  #445 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #446 = Utf8               ()Ljava/lang/String;\n+  #447 = Utf8               isISOControl\n+  #448 = Utf8               charAt\n+  #449 = Utf8               (I)C\n+  #450 = Utf8               indexOf\n+  #451 = Utf8               (II)I\n+  #452 = Utf8               substring\n+  #453 = Utf8               (II)Ljava/lang/String;\n+  #454 = Utf8               unescapeEntity\n+  #455 = Utf8               isWhitespace\n+  #456 = Utf8               (C)Z\n+  #457 = Utf8               nextToken\n+  #458 = Utf8               ()C\n+  #459 = Utf8               skipPast\n+  #460 = Utf8               back\n+  #461 = Utf8               equals\n+  #462 = Utf8               (Ljava/lang/Object;)Z\n+  #463 = Utf8               nextCDATA\n+  #464 = Utf8               getcDataTagName\n+  #465 = Utf8               accumulate\n+  #466 = Utf8               (Ljava/lang/String;Ljava/lang/Object;)Lorg/json/JSONObject;\n+  #467 = Utf8               syntaxError\n+  #468 = Utf8               (Ljava/lang/String;)Lorg/json/JSONException;\n+  #469 = Utf8               nextMeta\n+  #470 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #471 = Utf8               isConvertNilAttributeToNull\n+  #472 = Utf8               java/lang/Boolean\n+  #473 = Utf8               parseBoolean\n+  #474 = Utf8               getXsiTypeMap\n+  #475 = Utf8               ()Ljava/util/Map;\n+  #476 = Utf8               java/util/Map\n+  #477 = Utf8               isEmpty\n+  #478 = Utf8               get\n+  #479 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #480 = Utf8               isKeepStrings\n+  #481 = Utf8               getForceList\n+  #482 = Utf8               ()Ljava/util/Set;\n+  #483 = Utf8               java/util/Set\n+  #484 = Utf8               contains\n+  #485 = Utf8               NULL\n+  #486 = Utf8               put\n+  #487 = Utf8               nextContent\n+  #488 = Utf8               opt\n+  #489 = Utf8               convert\n+  #490 = Utf8               equalsIgnoreCase\n+  #491 = Utf8               TRUE\n+  #492 = Utf8               Ljava/lang/Boolean;\n+  #493 = Utf8               FALSE\n+  #494 = Utf8               ZERO\n+  #495 = Utf8               compareTo\n+  #496 = Utf8               (Ljava/math/BigDecimal;)I\n+  #497 = Utf8               valueOf\n+  #498 = Utf8               (D)Ljava/lang/Double;\n+  #499 = Utf8               (Ljava/lang/String;)Ljava/lang/Double;\n+  #500 = Utf8               isNaN\n+  #501 = Utf8               isInfinite\n+  #502 = Utf8               bitLength\n+  #503 = Utf8               (I)Ljava/lang/Integer;\n+  #504 = Utf8               longValue\n+  #505 = Utf8               ()J\n+  #506 = Utf8               java/lang/Long\n+  #507 = Utf8               (J)Ljava/lang/Long;\n+  #508 = Utf8               (I)I\n+  #509 = Utf8               ORIGINAL\n+  #510 = Utf8               KEEP_STRINGS\n+  #511 = Utf8               (Ljava/io/Reader;)V\n+  #512 = Utf8               more\n+  #513 = Utf8               keySet\n+  #514 = Utf8               getClass\n+  #515 = Utf8               ()Ljava/lang/Class;\n+  #516 = Utf8               java/lang/Class\n+  #517 = Utf8               isArray\n+  #518 = Utf8               (Ljava/lang/Object;)V\n+  #519 = Utf8               (I)Ljava/lang/Object;\n+  #520 = Utf8               (C)Ljava/lang/Character;\n {\n   public static final java.lang.Character AMP;\n     descriptor: Ljava/lang/Character;\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n \n   public static final java.lang.Character APOS;\n     descriptor: Ljava/lang/Character;\n@@ -1491,16 +1477,17 @@\n         line 361: 417\n         line 362: 423\n         line 363: 429\n         line 364: 452\n         line 365: 458\n         line 366: 477\n         line 367: 482\n-        line 368: 487\n-        line 370: 506\n+        line 368: 486\n+        line 369: 493\n+        line 370: 501\n         line 367: 509\n         line 372: 513\n         line 374: 519\n         line 378: 532\n         line 380: 540\n         line 381: 550\n         line 383: 557\n@@ -1525,15 +1512,15 @@\n         line 413: 734\n         line 414: 741\n         line 415: 749\n         line 416: 754\n         line 417: 764\n         line 416: 767\n         line 419: 774\n-        line 420: 781\n+        line 420: 780\n         line 419: 797\n         line 424: 804\n         line 426: 812\n         line 427: 824\n         line 429: 838\n         line 430: 846\n         line 431: 863\n@@ -1684,15 +1671,15 @@\n             0      17     0 string   Ljava/lang/String;\n             0      17     1 typeConverter   Lorg/json/XMLXsiTypeConverter;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      17     1 typeConverter   Lorg/json/XMLXsiTypeConverter<*>;\n       StackMapTable: number_of_entries = 1\n         frame_type = 12 /* same */\n-    Signature: #240                         // (Ljava/lang/String;Lorg/json/XMLXsiTypeConverter<*>;)Ljava/lang/Object;\n+    Signature: #234                         // (Ljava/lang/String;Lorg/json/XMLXsiTypeConverter<*>;)Ljava/lang/Object;\n \n   public static java.lang.Object stringToValue(java.lang.String);\n     descriptor: (Ljava/lang/String;)Ljava/lang/Object;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=3, args_size=1\n          0: ldc           #86                 // String\n@@ -2647,15 +2634,16 @@\n         line 868: 489\n         line 869: 499\n         line 873: 508\n         line 868: 529\n         line 875: 535\n         line 878: 540\n         line 879: 558\n-        line 880: 592\n+        line 880: 590\n+        line 881: 625\n         line 879: 668\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n           187      13    12   val   Ljava/lang/Object;\n           159      47    11     i   I\n           156      50    10 jaLength   I\n           149      60     4    ja   Lorg/json/JSONArray;\n@@ -2800,8 +2788,8 @@\n         line 61: 40\n         line 64: 48\n         line 67: 56\n         line 70: 64\n }\n SourceFile: \"XML.java\"\n InnerClasses:\n-  static #2;                              // class org/json/XML$1\n+  #2;                                     // class org/json/XML$1\n"}]}
