{"diffoscope-json-version": 1, "source1": "first/IMAPClient.class", "source2": "second/IMAPClient.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -20,15 +20,15 @@\n         return this.doCommand(IMAPCommand.LOGOUT);\n     }\n     \n     public boolean login(final String username, final String password) throws IOException {\n         if (this.getState() != IMAP.IMAPState.NOT_AUTH_STATE) {\n             return false;\n         }\n-        if (!this.doCommand(IMAPCommand.LOGIN, username + \" \" + password)) {\n+        if (!this.doCommand(IMAPCommand.LOGIN, String.valueOf(username) + \" \" + password)) {\n             return false;\n         }\n         this.setState(IMAP.IMAPState.AUTH_STATE);\n         return true;\n     }\n     \n     public boolean select(final String mailboxName) throws IOException {\n@@ -44,31 +44,31 @@\n     }\n     \n     public boolean delete(final String mailboxName) throws IOException {\n         return this.doCommand(IMAPCommand.DELETE, quoteMailboxName(mailboxName));\n     }\n     \n     public boolean rename(final String oldMailboxName, final String newMailboxName) throws IOException {\n-        return this.doCommand(IMAPCommand.RENAME, quoteMailboxName(oldMailboxName) + \" \" + quoteMailboxName(newMailboxName));\n+        return this.doCommand(IMAPCommand.RENAME, String.valueOf(quoteMailboxName(oldMailboxName)) + \" \" + quoteMailboxName(newMailboxName));\n     }\n     \n     public boolean subscribe(final String mailboxName) throws IOException {\n         return this.doCommand(IMAPCommand.SUBSCRIBE, quoteMailboxName(mailboxName));\n     }\n     \n     public boolean unsubscribe(final String mailboxName) throws IOException {\n         return this.doCommand(IMAPCommand.UNSUBSCRIBE, quoteMailboxName(mailboxName));\n     }\n     \n     public boolean list(final String refName, final String mailboxName) throws IOException {\n-        return this.doCommand(IMAPCommand.LIST, quoteMailboxName(refName) + \" \" + quoteMailboxName(mailboxName));\n+        return this.doCommand(IMAPCommand.LIST, String.valueOf(quoteMailboxName(refName)) + \" \" + quoteMailboxName(mailboxName));\n     }\n     \n     public boolean lsub(final String refName, final String mailboxName) throws IOException {\n-        return this.doCommand(IMAPCommand.LSUB, quoteMailboxName(refName) + \" \" + quoteMailboxName(mailboxName));\n+        return this.doCommand(IMAPCommand.LSUB, String.valueOf(quoteMailboxName(refName)) + \" \" + quoteMailboxName(mailboxName));\n     }\n     \n     public boolean status(final String mailboxName, final String[] itemNames) throws IOException {\n         if (itemNames == null || itemNames.length < 1) {\n             throw new IllegalArgumentException(\"STATUS command requires at least one data item name\");\n         }\n         final StringBuilder sb = new StringBuilder();\n@@ -108,22 +108,22 @@\n         return IMAPReply.isContinuation(status) && IMAPReply.isSuccess(this.sendData(message));\n     }\n     \n     @Deprecated\n     public boolean append(final String mailboxName, final String flags, final String datetime) throws IOException {\n         String args = mailboxName;\n         if (flags != null) {\n-            args = args + \" \" + flags;\n+            args = String.valueOf(args) + \" \" + flags;\n         }\n         if (datetime != null) {\n             if (datetime.charAt(0) == '{') {\n-                args = args + \" \" + datetime;\n+                args = String.valueOf(args) + \" \" + datetime;\n             }\n             else {\n-                args = args + \" {\" + datetime + \"}\";\n+                args = String.valueOf(args) + \" {\" + datetime + \"}\";\n             }\n         }\n         return this.doCommand(IMAPCommand.APPEND, args);\n     }\n     \n     @Deprecated\n     public boolean append(final String mailboxName) throws IOException {\n@@ -141,33 +141,33 @@\n     public boolean expunge() throws IOException {\n         return this.doCommand(IMAPCommand.EXPUNGE);\n     }\n     \n     public boolean search(final String charset, final String criteria) throws IOException {\n         String args = \"\";\n         if (charset != null) {\n-            args = args + \"CHARSET \" + charset;\n+            args = String.valueOf(args) + \"CHARSET \" + charset;\n         }\n-        args += criteria;\n+        args = String.valueOf(args) + criteria;\n         return this.doCommand(IMAPCommand.SEARCH, args);\n     }\n     \n     public boolean search(final String criteria) throws IOException {\n         return this.search(null, criteria);\n     }\n     \n     public boolean fetch(final String sequenceSet, final String itemNames) throws IOException {\n-        return this.doCommand(IMAPCommand.FETCH, sequenceSet + \" \" + itemNames);\n+        return this.doCommand(IMAPCommand.FETCH, String.valueOf(sequenceSet) + \" \" + itemNames);\n     }\n     \n     public boolean store(final String sequenceSet, final String itemNames, final String itemValues) throws IOException {\n-        return this.doCommand(IMAPCommand.STORE, sequenceSet + \" \" + itemNames + \" \" + itemValues);\n+        return this.doCommand(IMAPCommand.STORE, String.valueOf(sequenceSet) + \" \" + itemNames + \" \" + itemValues);\n     }\n     \n     public boolean copy(final String sequenceSet, final String mailboxName) throws IOException {\n-        return this.doCommand(IMAPCommand.COPY, sequenceSet + \" \" + quoteMailboxName(mailboxName));\n+        return this.doCommand(IMAPCommand.COPY, String.valueOf(sequenceSet) + \" \" + quoteMailboxName(mailboxName));\n     }\n     \n     public boolean uid(final String command, final String commandArgs) throws IOException {\n-        return this.doCommand(IMAPCommand.UID, command + \" \" + commandArgs);\n+        return this.doCommand(IMAPCommand.UID, String.valueOf(command) + \" \" + commandArgs);\n     }\n }\n"}]}
