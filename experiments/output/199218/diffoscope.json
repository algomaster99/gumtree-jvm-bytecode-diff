{"diffoscope-json-version": 1, "source1": "first/InstructionList.class", "source2": "second/InstructionList.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,12 +1,10 @@\n \n package org.apache.bcel.generic;\n \n-import org.apache.bcel.classfile.Constant;\n-import java.util.Map;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.io.OutputStream;\n import java.io.DataOutputStream;\n import java.io.ByteArrayOutputStream;\n import org.apache.bcel.Const;\n import java.util.ArrayList;\n@@ -24,674 +22,668 @@\n     \n     public InstructionList() {\n         this.start = null;\n         this.end = null;\n         this.length = 0;\n     }\n     \n-    public InstructionList(final Instruction i) {\n+    public InstructionList(final Instruction instruction) {\n         this.start = null;\n         this.end = null;\n         this.length = 0;\n-        this.append(i);\n+        this.append(instruction);\n     }\n     \n-    public InstructionList(final BranchInstruction i) {\n+    public InstructionList(final BranchInstruction branchInstruction) {\n         this.start = null;\n         this.end = null;\n         this.length = 0;\n-        this.append(i);\n+        this.append(branchInstruction);\n     }\n     \n-    public InstructionList(final CompoundInstruction c) {\n+    public InstructionList(final CompoundInstruction compoundInstruction) {\n         this.start = null;\n         this.end = null;\n         this.length = 0;\n-        this.append(c.getInstructionList());\n+        this.append(compoundInstruction.getInstructionList());\n     }\n     \n     public boolean isEmpty() {\n         return this.start == null;\n     }\n     \n-    public static InstructionHandle findHandle(final InstructionHandle[] ihs, final int[] pos, final int count, final int target) {\n-        int l = 0;\n-        int r = count - 1;\n+    public static InstructionHandle findHandle(final InstructionHandle[] array, final int[] array2, final int n, final int n2) {\n+        int i = 0;\n+        int n3 = n - 1;\n         do {\n-            final int i = l + r >>> 1;\n-            final int j = pos[i];\n-            if (j == target) {\n-                return ihs[i];\n+            final int n4 = i + n3 >>> 1;\n+            final int n5 = array2[n4];\n+            if (n5 == n2) {\n+                return array[n4];\n             }\n-            if (target < j) {\n-                r = i - 1;\n+            if (n2 < n5) {\n+                n3 = n4 - 1;\n             }\n             else {\n-                l = i + 1;\n+                i = n4 + 1;\n             }\n-        } while (l <= r);\n+        } while (i <= n3);\n         return null;\n     }\n     \n-    public InstructionHandle findHandle(final int pos) {\n-        final int[] positions = this.bytePositions;\n-        InstructionHandle ih = this.start;\n+    public InstructionHandle findHandle(final int n) {\n+        final int[] bytePositions = this.bytePositions;\n+        InstructionHandle instructionHandle = this.start;\n         for (int i = 0; i < this.length; ++i) {\n-            if (positions[i] == pos) {\n-                return ih;\n+            if (bytePositions[i] == n) {\n+                return instructionHandle;\n             }\n-            ih = ih.getNext();\n+            instructionHandle = instructionHandle.getNext();\n         }\n         return null;\n     }\n     \n-    public InstructionList(final byte[] code) {\n+    public InstructionList(final byte[] array) {\n         this.start = null;\n         this.end = null;\n         this.length = 0;\n-        int count = 0;\n-        InstructionHandle[] ihs;\n-        int[] pos;\n-        try (final ByteSequence bytes = new ByteSequence(code)) {\n-            ihs = new InstructionHandle[code.length];\n-            pos = new int[code.length];\n-            while (bytes.available() > 0) {\n-                final int off = bytes.getIndex();\n-                pos[count] = off;\n-                final Instruction i = Instruction.readInstruction(bytes);\n-                InstructionHandle ih;\n-                if (i instanceof BranchInstruction) {\n-                    ih = (InstructionHandle)this.append((BranchInstruction)i);\n+        int n = 0;\n+        InstructionHandle[] array2;\n+        int[] array3;\n+        try (final ByteSequence byteSequence = new ByteSequence(array)) {\n+            array2 = new InstructionHandle[array.length];\n+            array3 = new int[array.length];\n+            while (byteSequence.available() > 0) {\n+                final int index = byteSequence.getIndex();\n+                array3[n] = index;\n+                final Instruction instruction = Instruction.readInstruction(byteSequence);\n+                Object o;\n+                if (instruction instanceof BranchInstruction) {\n+                    o = this.append((BranchInstruction)instruction);\n                 }\n                 else {\n-                    ih = this.append(i);\n+                    o = this.append(instruction);\n                 }\n-                ih.setPosition(off);\n-                ihs[count] = ih;\n-                ++count;\n-            }\n-        }\n-        catch (final IOException e) {\n-            throw new ClassGenException(e.toString(), (Throwable)e);\n-        }\n-        System.arraycopy(pos, 0, this.bytePositions = new int[count], 0, count);\n-        for (int j = 0; j < count; ++j) {\n-            if (ihs[j] instanceof BranchHandle) {\n-                final BranchInstruction bi = (BranchInstruction)ihs[j].getInstruction();\n-                int target = bi.getPosition() + bi.getIndex();\n-                InstructionHandle ih2 = findHandle(ihs, pos, count, target);\n-                if (ih2 == null) {\n-                    throw new ClassGenException(\"Couldn't find target for branch: \" + bi);\n+                ((InstructionHandle)o).setPosition(index);\n+                array2[n] = (InstructionHandle)o;\n+                ++n;\n+            }\n+        }\n+        catch (final IOException ex) {\n+            throw new ClassGenException(ex.toString(), (Throwable)ex);\n+        }\n+        System.arraycopy(array3, 0, this.bytePositions = new int[n], 0, n);\n+        for (int i = 0; i < n; ++i) {\n+            if (array2[i] instanceof BranchHandle) {\n+                final BranchInstruction branchInstruction = (BranchInstruction)array2[i].getInstruction();\n+                final InstructionHandle handle = findHandle(array2, array3, n, branchInstruction.getPosition() + branchInstruction.getIndex());\n+                if (handle == null) {\n+                    throw new ClassGenException(\"Couldn't find target for branch: \" + branchInstruction);\n                 }\n-                bi.setTarget(ih2);\n-                if (bi instanceof Select) {\n-                    final Select s = (Select)bi;\n-                    final int[] indices = s.getIndices();\n-                    for (int k = 0; k < indices.length; ++k) {\n-                        target = bi.getPosition() + indices[k];\n-                        ih2 = findHandle(ihs, pos, count, target);\n-                        if (ih2 == null) {\n-                            throw new ClassGenException(\"Couldn't find target for switch: \" + bi);\n+                branchInstruction.setTarget(handle);\n+                if (branchInstruction instanceof Select) {\n+                    final Select select = (Select)branchInstruction;\n+                    final int[] indices = select.getIndices();\n+                    for (int j = 0; j < indices.length; ++j) {\n+                        final InstructionHandle handle2 = findHandle(array2, array3, n, branchInstruction.getPosition() + indices[j]);\n+                        if (handle2 == null) {\n+                            throw new ClassGenException(\"Couldn't find target for switch: \" + branchInstruction);\n                         }\n-                        s.setTarget(k, ih2);\n+                        select.setTarget(j, handle2);\n                     }\n                 }\n             }\n         }\n     }\n     \n-    public InstructionHandle append(final InstructionHandle ih, final InstructionList il) {\n-        if (il == null) {\n+    public InstructionHandle append(final InstructionHandle prev, final InstructionList list) {\n+        if (list == null) {\n             throw new ClassGenException(\"Appending null InstructionList\");\n         }\n-        if (il.isEmpty()) {\n-            return ih;\n+        if (list.isEmpty()) {\n+            return prev;\n         }\n-        final InstructionHandle next = ih.getNext();\n-        final InstructionHandle ret = il.start;\n-        ih.setNext(il.start);\n-        il.start.setPrev(ih);\n-        il.end.setNext(next);\n+        final InstructionHandle next = prev.getNext();\n+        final InstructionHandle start = list.start;\n+        prev.setNext(list.start);\n+        list.start.setPrev(prev);\n+        list.end.setNext(next);\n         if (next != null) {\n-            next.setPrev(il.end);\n+            next.setPrev(list.end);\n         }\n         else {\n-            this.end = il.end;\n+            this.end = list.end;\n         }\n-        this.length += il.length;\n-        il.clear();\n-        return ret;\n+        this.length += list.length;\n+        list.clear();\n+        return start;\n     }\n     \n-    public InstructionHandle append(final Instruction i, final InstructionList il) {\n-        final InstructionHandle ih;\n-        if ((ih = this.findInstruction2(i)) == null) {\n-            throw new ClassGenException(\"Instruction \" + i + \" is not contained in this list.\");\n+    public InstructionHandle append(final Instruction obj, final InstructionList list) {\n+        final InstructionHandle instruction2;\n+        if ((instruction2 = this.findInstruction2(obj)) == null) {\n+            throw new ClassGenException(\"Instruction \" + obj + \" is not contained in this list.\");\n         }\n-        return this.append(ih, il);\n+        return this.append(instruction2, list);\n     }\n     \n-    public InstructionHandle append(final InstructionList il) {\n-        if (il == null) {\n+    public InstructionHandle append(final InstructionList list) {\n+        if (list == null) {\n             throw new ClassGenException(\"Appending null InstructionList\");\n         }\n-        if (il.isEmpty()) {\n+        if (list.isEmpty()) {\n             return null;\n         }\n         if (this.isEmpty()) {\n-            this.start = il.start;\n-            this.end = il.end;\n-            this.length = il.length;\n-            il.clear();\n+            this.start = list.start;\n+            this.end = list.end;\n+            this.length = list.length;\n+            list.clear();\n             return this.start;\n         }\n-        return this.append(this.end, il);\n+        return this.append(this.end, list);\n     }\n     \n-    private void append(final InstructionHandle ih) {\n+    private void append(final InstructionHandle instructionHandle) {\n         if (this.isEmpty()) {\n-            this.end = ih;\n-            (this.start = ih).setNext(ih.setPrev((InstructionHandle)null));\n+            this.end = instructionHandle;\n+            (this.start = instructionHandle).setNext(instructionHandle.setPrev((InstructionHandle)null));\n         }\n         else {\n-            this.end.setNext(ih);\n-            ih.setPrev(this.end);\n-            ih.setNext((InstructionHandle)null);\n-            this.end = ih;\n+            this.end.setNext(instructionHandle);\n+            instructionHandle.setPrev(this.end);\n+            instructionHandle.setNext((InstructionHandle)null);\n+            this.end = instructionHandle;\n         }\n         ++this.length;\n     }\n     \n-    public InstructionHandle append(final Instruction i) {\n-        final InstructionHandle ih = InstructionHandle.getInstructionHandle(i);\n-        this.append(ih);\n-        return ih;\n+    public InstructionHandle append(final Instruction instruction) {\n+        final InstructionHandle instructionHandle = InstructionHandle.getInstructionHandle(instruction);\n+        this.append(instructionHandle);\n+        return instructionHandle;\n     }\n     \n-    public BranchHandle append(final BranchInstruction i) {\n-        final BranchHandle ih = BranchHandle.getBranchHandle(i);\n-        this.append((InstructionHandle)ih);\n-        return ih;\n+    public BranchHandle append(final BranchInstruction branchInstruction) {\n+        final BranchHandle branchHandle = BranchHandle.getBranchHandle(branchInstruction);\n+        this.append((InstructionHandle)branchHandle);\n+        return branchHandle;\n     }\n     \n-    public InstructionHandle append(final Instruction i, final Instruction j) {\n-        return this.append(i, new InstructionList(j));\n+    public InstructionHandle append(final Instruction instruction, final Instruction instruction2) {\n+        return this.append(instruction, new InstructionList(instruction2));\n     }\n     \n-    public InstructionHandle append(final Instruction i, final CompoundInstruction c) {\n-        return this.append(i, c.getInstructionList());\n+    public InstructionHandle append(final Instruction instruction, final CompoundInstruction compoundInstruction) {\n+        return this.append(instruction, compoundInstruction.getInstructionList());\n     }\n     \n-    public InstructionHandle append(final CompoundInstruction c) {\n-        return this.append(c.getInstructionList());\n+    public InstructionHandle append(final CompoundInstruction compoundInstruction) {\n+        return this.append(compoundInstruction.getInstructionList());\n     }\n     \n-    public InstructionHandle append(final InstructionHandle ih, final CompoundInstruction c) {\n-        return this.append(ih, c.getInstructionList());\n+    public InstructionHandle append(final InstructionHandle instructionHandle, final CompoundInstruction compoundInstruction) {\n+        return this.append(instructionHandle, compoundInstruction.getInstructionList());\n     }\n     \n-    public InstructionHandle append(final InstructionHandle ih, final Instruction i) {\n-        return this.append(ih, new InstructionList(i));\n+    public InstructionHandle append(final InstructionHandle instructionHandle, final Instruction instruction) {\n+        return this.append(instructionHandle, new InstructionList(instruction));\n     }\n     \n-    public BranchHandle append(final InstructionHandle ih, final BranchInstruction i) {\n-        final BranchHandle bh = BranchHandle.getBranchHandle(i);\n-        final InstructionList il = new InstructionList();\n-        il.append((InstructionHandle)bh);\n-        this.append(ih, il);\n-        return bh;\n+    public BranchHandle append(final InstructionHandle instructionHandle, final BranchInstruction branchInstruction) {\n+        final BranchHandle branchHandle = BranchHandle.getBranchHandle(branchInstruction);\n+        final InstructionList list = new InstructionList();\n+        list.append((InstructionHandle)branchHandle);\n+        this.append(instructionHandle, list);\n+        return branchHandle;\n     }\n     \n-    public InstructionHandle insert(final InstructionHandle ih, final InstructionList il) {\n-        if (il == null) {\n+    public InstructionHandle insert(final InstructionHandle next, final InstructionList list) {\n+        if (list == null) {\n             throw new ClassGenException(\"Inserting null InstructionList\");\n         }\n-        if (il.isEmpty()) {\n-            return ih;\n+        if (list.isEmpty()) {\n+            return next;\n         }\n-        final InstructionHandle prev = ih.getPrev();\n-        final InstructionHandle ret = il.start;\n-        ih.setPrev(il.end);\n-        il.end.setNext(ih);\n-        il.start.setPrev(prev);\n+        final InstructionHandle prev = next.getPrev();\n+        final InstructionHandle start = list.start;\n+        next.setPrev(list.end);\n+        list.end.setNext(next);\n+        list.start.setPrev(prev);\n         if (prev != null) {\n-            prev.setNext(il.start);\n+            prev.setNext(list.start);\n         }\n         else {\n-            this.start = il.start;\n+            this.start = list.start;\n         }\n-        this.length += il.length;\n-        il.clear();\n-        return ret;\n+        this.length += list.length;\n+        list.clear();\n+        return start;\n     }\n     \n-    public InstructionHandle insert(final InstructionList il) {\n+    public InstructionHandle insert(final InstructionList list) {\n         if (this.isEmpty()) {\n-            this.append(il);\n+            this.append(list);\n             return this.start;\n         }\n-        return this.insert(this.start, il);\n+        return this.insert(this.start, list);\n     }\n     \n-    private void insert(final InstructionHandle ih) {\n+    private void insert(final InstructionHandle instructionHandle) {\n         if (this.isEmpty()) {\n-            this.end = ih;\n-            (this.start = ih).setNext(ih.setPrev((InstructionHandle)null));\n+            this.end = instructionHandle;\n+            (this.start = instructionHandle).setNext(instructionHandle.setPrev((InstructionHandle)null));\n         }\n         else {\n-            this.start.setPrev(ih);\n-            ih.setNext(this.start);\n-            ih.setPrev((InstructionHandle)null);\n-            this.start = ih;\n+            this.start.setPrev(instructionHandle);\n+            instructionHandle.setNext(this.start);\n+            instructionHandle.setPrev((InstructionHandle)null);\n+            this.start = instructionHandle;\n         }\n         ++this.length;\n     }\n     \n-    public InstructionHandle insert(final Instruction i, final InstructionList il) {\n-        final InstructionHandle ih;\n-        if ((ih = this.findInstruction1(i)) == null) {\n-            throw new ClassGenException(\"Instruction \" + i + \" is not contained in this list.\");\n+    public InstructionHandle insert(final Instruction obj, final InstructionList list) {\n+        final InstructionHandle instruction1;\n+        if ((instruction1 = this.findInstruction1(obj)) == null) {\n+            throw new ClassGenException(\"Instruction \" + obj + \" is not contained in this list.\");\n         }\n-        return this.insert(ih, il);\n+        return this.insert(instruction1, list);\n     }\n     \n-    public InstructionHandle insert(final Instruction i) {\n-        final InstructionHandle ih = InstructionHandle.getInstructionHandle(i);\n-        this.insert(ih);\n-        return ih;\n+    public InstructionHandle insert(final Instruction instruction) {\n+        final InstructionHandle instructionHandle = InstructionHandle.getInstructionHandle(instruction);\n+        this.insert(instructionHandle);\n+        return instructionHandle;\n     }\n     \n-    public BranchHandle insert(final BranchInstruction i) {\n-        final BranchHandle ih = BranchHandle.getBranchHandle(i);\n-        this.insert((InstructionHandle)ih);\n-        return ih;\n+    public BranchHandle insert(final BranchInstruction branchInstruction) {\n+        final BranchHandle branchHandle = BranchHandle.getBranchHandle(branchInstruction);\n+        this.insert((InstructionHandle)branchHandle);\n+        return branchHandle;\n     }\n     \n-    public InstructionHandle insert(final Instruction i, final Instruction j) {\n-        return this.insert(i, new InstructionList(j));\n+    public InstructionHandle insert(final Instruction instruction, final Instruction instruction2) {\n+        return this.insert(instruction, new InstructionList(instruction2));\n     }\n     \n-    public InstructionHandle insert(final Instruction i, final CompoundInstruction c) {\n-        return this.insert(i, c.getInstructionList());\n+    public InstructionHandle insert(final Instruction instruction, final CompoundInstruction compoundInstruction) {\n+        return this.insert(instruction, compoundInstruction.getInstructionList());\n     }\n     \n-    public InstructionHandle insert(final CompoundInstruction c) {\n-        return this.insert(c.getInstructionList());\n+    public InstructionHandle insert(final CompoundInstruction compoundInstruction) {\n+        return this.insert(compoundInstruction.getInstructionList());\n     }\n     \n-    public InstructionHandle insert(final InstructionHandle ih, final Instruction i) {\n-        return this.insert(ih, new InstructionList(i));\n+    public InstructionHandle insert(final InstructionHandle instructionHandle, final Instruction instruction) {\n+        return this.insert(instructionHandle, new InstructionList(instruction));\n     }\n     \n-    public InstructionHandle insert(final InstructionHandle ih, final CompoundInstruction c) {\n-        return this.insert(ih, c.getInstructionList());\n+    public InstructionHandle insert(final InstructionHandle instructionHandle, final CompoundInstruction compoundInstruction) {\n+        return this.insert(instructionHandle, compoundInstruction.getInstructionList());\n     }\n     \n-    public BranchHandle insert(final InstructionHandle ih, final BranchInstruction i) {\n-        final BranchHandle bh = BranchHandle.getBranchHandle(i);\n-        final InstructionList il = new InstructionList();\n-        il.append((InstructionHandle)bh);\n-        this.insert(ih, il);\n-        return bh;\n+    public BranchHandle insert(final InstructionHandle instructionHandle, final BranchInstruction branchInstruction) {\n+        final BranchHandle branchHandle = BranchHandle.getBranchHandle(branchInstruction);\n+        final InstructionList list = new InstructionList();\n+        list.append((InstructionHandle)branchHandle);\n+        this.insert(instructionHandle, list);\n+        return branchHandle;\n     }\n     \n-    public void move(final InstructionHandle start, final InstructionHandle end, final InstructionHandle target) {\n-        if (start == null || end == null) {\n-            throw new ClassGenException(\"Invalid null handle: From \" + start + \" to \" + end);\n+    public void move(final InstructionHandle instructionHandle, final InstructionHandle end, final InstructionHandle prev) {\n+        if (instructionHandle == null || end == null) {\n+            throw new ClassGenException(\"Invalid null handle: From \" + instructionHandle + \" to \" + end);\n         }\n-        if (target == start || target == end) {\n-            throw new ClassGenException(\"Invalid range: From \" + start + \" to \" + end + \" contains target \" + target);\n+        if (prev == instructionHandle || prev == end) {\n+            throw new ClassGenException(\"Invalid range: From \" + instructionHandle + \" to \" + end + \" contains target \" + prev);\n         }\n-        for (InstructionHandle ih = start; ih != end.getNext(); ih = ih.getNext()) {\n-            if (ih == null) {\n-                throw new ClassGenException(\"Invalid range: From \" + start + \" to \" + end);\n+        for (InstructionHandle next = instructionHandle; next != end.getNext(); next = next.getNext()) {\n+            if (next == null) {\n+                throw new ClassGenException(\"Invalid range: From \" + instructionHandle + \" to \" + end);\n             }\n-            if (ih == target) {\n-                throw new ClassGenException(\"Invalid range: From \" + start + \" to \" + end + \" contains target \" + target);\n+            if (next == prev) {\n+                throw new ClassGenException(\"Invalid range: From \" + instructionHandle + \" to \" + end + \" contains target \" + prev);\n             }\n         }\n-        final InstructionHandle prev = start.getPrev();\n-        InstructionHandle next = end.getNext();\n-        if (prev != null) {\n-            prev.setNext(next);\n+        final InstructionHandle prev2 = instructionHandle.getPrev();\n+        final InstructionHandle next2 = end.getNext();\n+        if (prev2 != null) {\n+            prev2.setNext(next2);\n         }\n         else {\n-            this.start = next;\n+            this.start = next2;\n         }\n-        if (next != null) {\n-            next.setPrev(prev);\n+        if (next2 != null) {\n+            next2.setPrev(prev2);\n         }\n         else {\n-            this.end = prev;\n+            this.end = prev2;\n         }\n-        start.setPrev(end.setNext((InstructionHandle)null));\n-        if (target == null) {\n+        instructionHandle.setPrev(end.setNext((InstructionHandle)null));\n+        if (prev == null) {\n             if (this.start != null) {\n                 this.start.setPrev(end);\n             }\n             end.setNext(this.start);\n-            this.start = start;\n+            this.start = instructionHandle;\n         }\n         else {\n-            next = target.getNext();\n-            target.setNext(start);\n-            start.setPrev(target);\n-            end.setNext(next);\n-            if (next != null) {\n-                next.setPrev(end);\n+            final InstructionHandle next3 = prev.getNext();\n+            prev.setNext(instructionHandle);\n+            instructionHandle.setPrev(prev);\n+            end.setNext(next3);\n+            if (next3 != null) {\n+                next3.setPrev(end);\n             }\n             else {\n                 this.end = end;\n             }\n         }\n     }\n     \n-    public void move(final InstructionHandle ih, final InstructionHandle target) {\n-        this.move(ih, ih, target);\n+    public void move(final InstructionHandle instructionHandle, final InstructionHandle instructionHandle2) {\n+        this.move(instructionHandle, instructionHandle, instructionHandle2);\n     }\n     \n-    private void remove(final InstructionHandle prev, InstructionHandle next) throws TargetLostException {\n-        InstructionHandle first;\n-        InstructionHandle last;\n-        if (prev == null && next == null) {\n-            first = this.start;\n-            last = this.end;\n-            final InstructionHandle instructionHandle = null;\n-            this.end = instructionHandle;\n-            this.start = instructionHandle;\n+    private void remove(final InstructionHandle instructionHandle, InstructionHandle next) throws TargetLostException {\n+        InstructionHandle instructionHandle2;\n+        InstructionHandle instructionHandle3;\n+        if (instructionHandle == null && next == null) {\n+            instructionHandle2 = this.start;\n+            instructionHandle3 = this.end;\n+            final InstructionHandle instructionHandle4 = null;\n+            this.end = instructionHandle4;\n+            this.start = instructionHandle4;\n         }\n         else {\n-            if (prev == null) {\n-                first = this.start;\n+            if (instructionHandle == null) {\n+                instructionHandle2 = this.start;\n                 this.start = next;\n             }\n             else {\n-                first = prev.getNext();\n-                prev.setNext(next);\n+                instructionHandle2 = instructionHandle.getNext();\n+                instructionHandle.setNext(next);\n             }\n             if (next == null) {\n-                last = this.end;\n-                this.end = prev;\n+                instructionHandle3 = this.end;\n+                this.end = instructionHandle;\n             }\n             else {\n-                last = next.getPrev();\n-                next.setPrev(prev);\n+                instructionHandle3 = next.getPrev();\n+                next.setPrev(instructionHandle);\n             }\n         }\n-        first.setPrev((InstructionHandle)null);\n-        last.setNext((InstructionHandle)null);\n-        final List<InstructionHandle> target_vec = new ArrayList<InstructionHandle>();\n-        for (InstructionHandle ih = first; ih != null; ih = ih.getNext()) {\n-            ih.getInstruction().dispose();\n-        }\n-        final StringBuilder buf = new StringBuilder(\"{ \");\n-        for (InstructionHandle ih2 = first; ih2 != null; ih2 = next) {\n-            next = ih2.getNext();\n+        instructionHandle2.setPrev((InstructionHandle)null);\n+        instructionHandle3.setNext((InstructionHandle)null);\n+        final ArrayList list = new ArrayList();\n+        for (InstructionHandle next2 = instructionHandle2; next2 != null; next2 = next2.getNext()) {\n+            next2.getInstruction().dispose();\n+        }\n+        final StringBuilder sb = new StringBuilder(\"{ \");\n+        for (InstructionHandle instructionHandle5 = instructionHandle2; instructionHandle5 != null; instructionHandle5 = next) {\n+            next = instructionHandle5.getNext();\n             --this.length;\n-            if (ih2.hasTargeters()) {\n-                target_vec.add(ih2);\n-                buf.append(ih2.toString(true)).append(\" \");\n-                ih2.setNext(ih2.setPrev((InstructionHandle)null));\n+            if (instructionHandle5.hasTargeters()) {\n+                list.add(instructionHandle5);\n+                sb.append(instructionHandle5.toString(true)).append(\" \");\n+                instructionHandle5.setNext(instructionHandle5.setPrev((InstructionHandle)null));\n             }\n             else {\n-                ih2.dispose();\n+                instructionHandle5.dispose();\n             }\n         }\n-        buf.append(\"}\");\n-        if (!target_vec.isEmpty()) {\n-            final InstructionHandle[] targeted = new InstructionHandle[target_vec.size()];\n-            target_vec.toArray(targeted);\n-            throw new TargetLostException(targeted, buf.toString());\n+        sb.append(\"}\");\n+        if (!list.isEmpty()) {\n+            final InstructionHandle[] array = new InstructionHandle[list.size()];\n+            list.toArray(array);\n+            throw new TargetLostException(array, sb.toString());\n         }\n     }\n     \n-    public void delete(final InstructionHandle ih) throws TargetLostException {\n-        this.remove(ih.getPrev(), ih.getNext());\n+    public void delete(final InstructionHandle instructionHandle) throws TargetLostException {\n+        this.remove(instructionHandle.getPrev(), instructionHandle.getNext());\n     }\n     \n-    public void delete(final Instruction i) throws TargetLostException {\n-        final InstructionHandle ih;\n-        if ((ih = this.findInstruction1(i)) == null) {\n-            throw new ClassGenException(\"Instruction \" + i + \" is not contained in this list.\");\n+    public void delete(final Instruction obj) throws TargetLostException {\n+        final InstructionHandle instruction1;\n+        if ((instruction1 = this.findInstruction1(obj)) == null) {\n+            throw new ClassGenException(\"Instruction \" + obj + \" is not contained in this list.\");\n         }\n-        this.delete(ih);\n+        this.delete(instruction1);\n     }\n     \n-    public void delete(final InstructionHandle from, final InstructionHandle to) throws TargetLostException {\n-        this.remove(from.getPrev(), to.getNext());\n+    public void delete(final InstructionHandle instructionHandle, final InstructionHandle instructionHandle2) throws TargetLostException {\n+        this.remove(instructionHandle.getPrev(), instructionHandle2.getNext());\n     }\n     \n-    public void delete(final Instruction from, final Instruction to) throws TargetLostException {\n-        final InstructionHandle from_ih;\n-        if ((from_ih = this.findInstruction1(from)) == null) {\n-            throw new ClassGenException(\"Instruction \" + from + \" is not contained in this list.\");\n+    public void delete(final Instruction obj, final Instruction obj2) throws TargetLostException {\n+        final InstructionHandle instruction1;\n+        if ((instruction1 = this.findInstruction1(obj)) == null) {\n+            throw new ClassGenException(\"Instruction \" + obj + \" is not contained in this list.\");\n         }\n-        final InstructionHandle to_ih;\n-        if ((to_ih = this.findInstruction2(to)) == null) {\n-            throw new ClassGenException(\"Instruction \" + to + \" is not contained in this list.\");\n+        final InstructionHandle instruction2;\n+        if ((instruction2 = this.findInstruction2(obj2)) == null) {\n+            throw new ClassGenException(\"Instruction \" + obj2 + \" is not contained in this list.\");\n         }\n-        this.delete(from_ih, to_ih);\n+        this.delete(instruction1, instruction2);\n     }\n     \n-    private InstructionHandle findInstruction1(final Instruction i) {\n-        for (InstructionHandle ih = this.start; ih != null; ih = ih.getNext()) {\n-            if (ih.getInstruction() == i) {\n-                return ih;\n+    private InstructionHandle findInstruction1(final Instruction instruction) {\n+        for (InstructionHandle instructionHandle = this.start; instructionHandle != null; instructionHandle = instructionHandle.getNext()) {\n+            if (instructionHandle.getInstruction() == instruction) {\n+                return instructionHandle;\n             }\n         }\n         return null;\n     }\n     \n-    private InstructionHandle findInstruction2(final Instruction i) {\n-        for (InstructionHandle ih = this.end; ih != null; ih = ih.getPrev()) {\n-            if (ih.getInstruction() == i) {\n-                return ih;\n+    private InstructionHandle findInstruction2(final Instruction instruction) {\n+        for (InstructionHandle instructionHandle = this.end; instructionHandle != null; instructionHandle = instructionHandle.getPrev()) {\n+            if (instructionHandle.getInstruction() == instruction) {\n+                return instructionHandle;\n             }\n         }\n         return null;\n     }\n     \n-    public boolean contains(final InstructionHandle i) {\n-        if (i == null) {\n+    public boolean contains(final InstructionHandle instructionHandle) {\n+        if (instructionHandle == null) {\n             return false;\n         }\n-        for (InstructionHandle ih = this.start; ih != null; ih = ih.getNext()) {\n-            if (ih == i) {\n+        for (InstructionHandle instructionHandle2 = this.start; instructionHandle2 != null; instructionHandle2 = instructionHandle2.getNext()) {\n+            if (instructionHandle2 == instructionHandle) {\n                 return true;\n             }\n         }\n         return false;\n     }\n     \n-    public boolean contains(final Instruction i) {\n-        return this.findInstruction1(i) != null;\n+    public boolean contains(final Instruction instruction) {\n+        return this.findInstruction1(instruction) != null;\n     }\n     \n     public void setPositions() {\n         this.setPositions(false);\n     }\n     \n-    public void setPositions(final boolean check) {\n-        int max_additional_bytes = 0;\n-        int additional_bytes = 0;\n-        int index = 0;\n-        int count = 0;\n-        final int[] pos = new int[this.length];\n-        if (check) {\n-            for (InstructionHandle ih = this.start; ih != null; ih = ih.getNext()) {\n-                final Instruction i = ih.getInstruction();\n-                if (i instanceof BranchInstruction) {\n-                    Instruction inst = ((BranchInstruction)i).getTarget().getInstruction();\n-                    if (!this.contains(inst)) {\n-                        throw new ClassGenException(\"Branch target of \" + Const.getOpcodeName((int)i.getOpcode()) + \":\" + inst + \" not in instruction list\");\n+    public void setPositions(final boolean b) {\n+        int n = 0;\n+        int n2 = 0;\n+        int position = 0;\n+        int n3 = 0;\n+        final int[] array = new int[this.length];\n+        if (b) {\n+            for (InstructionHandle instructionHandle = this.start; instructionHandle != null; instructionHandle = instructionHandle.getNext()) {\n+                final Instruction instruction = instructionHandle.getInstruction();\n+                if (instruction instanceof BranchInstruction) {\n+                    Instruction obj = ((BranchInstruction)instruction).getTarget().getInstruction();\n+                    if (!this.contains(obj)) {\n+                        throw new ClassGenException(\"Branch target of \" + Const.getOpcodeName((int)instruction.getOpcode()) + \":\" + obj + \" not in instruction list\");\n                     }\n-                    if (i instanceof Select) {\n-                        final InstructionHandle[] targets2;\n-                        final InstructionHandle[] targets = targets2 = ((Select)i).getTargets();\n-                        for (final InstructionHandle target : targets2) {\n-                            inst = target.getInstruction();\n-                            if (!this.contains(inst)) {\n-                                throw new ClassGenException(\"Branch target of \" + Const.getOpcodeName((int)i.getOpcode()) + \":\" + inst + \" not in instruction list\");\n+                    if (instruction instanceof Select) {\n+                        final InstructionHandle[] targets = ((Select)instruction).getTargets();\n+                        for (int length = targets.length, i = 0; i < length; ++i) {\n+                            obj = targets[i].getInstruction();\n+                            if (!this.contains(obj)) {\n+                                throw new ClassGenException(\"Branch target of \" + Const.getOpcodeName((int)instruction.getOpcode()) + \":\" + obj + \" not in instruction list\");\n                             }\n                         }\n                     }\n-                    if (!(ih instanceof BranchHandle)) {\n-                        throw new ClassGenException(\"Branch instruction \" + Const.getOpcodeName((int)i.getOpcode()) + \":\" + inst + \" not contained in BranchHandle.\");\n+                    if (!(instructionHandle instanceof BranchHandle)) {\n+                        throw new ClassGenException(\"Branch instruction \" + Const.getOpcodeName((int)instruction.getOpcode()) + \":\" + obj + \" not contained in BranchHandle.\");\n                     }\n                 }\n             }\n         }\n-        for (InstructionHandle ih = this.start; ih != null; ih = ih.getNext()) {\n-            final Instruction i = ih.getInstruction();\n-            ih.setPosition(index);\n-            pos[count++] = index;\n-            switch (i.getOpcode()) {\n+        for (InstructionHandle instructionHandle2 = this.start; instructionHandle2 != null; instructionHandle2 = instructionHandle2.getNext()) {\n+            final Instruction instruction2 = instructionHandle2.getInstruction();\n+            instructionHandle2.setPosition(position);\n+            array[n3++] = position;\n+            switch (instruction2.getOpcode()) {\n                 case 167:\n                 case 168: {\n-                    max_additional_bytes += 2;\n+                    n += 2;\n                     break;\n                 }\n                 case 170:\n                 case 171: {\n-                    max_additional_bytes += 3;\n+                    n += 3;\n                     break;\n                 }\n             }\n-            index += i.getLength();\n+            position += instruction2.getLength();\n         }\n-        for (InstructionHandle ih = this.start; ih != null; ih = ih.getNext()) {\n-            additional_bytes += ih.updatePosition(additional_bytes, max_additional_bytes);\n+        for (InstructionHandle instructionHandle3 = this.start; instructionHandle3 != null; instructionHandle3 = instructionHandle3.getNext()) {\n+            n2 += instructionHandle3.updatePosition(n2, n);\n         }\n-        count = (index = 0);\n-        for (InstructionHandle ih = this.start; ih != null; ih = ih.getNext()) {\n-            final Instruction i = ih.getInstruction();\n-            ih.setPosition(index);\n-            pos[count++] = index;\n-            index += i.getLength();\n+        int position2;\n+        int n4 = position2 = 0;\n+        for (InstructionHandle instructionHandle4 = this.start; instructionHandle4 != null; instructionHandle4 = instructionHandle4.getNext()) {\n+            final Instruction instruction3 = instructionHandle4.getInstruction();\n+            instructionHandle4.setPosition(position2);\n+            array[n4++] = position2;\n+            position2 += instruction3.getLength();\n         }\n-        System.arraycopy(pos, 0, this.bytePositions = new int[count], 0, count);\n+        System.arraycopy(array, 0, this.bytePositions = new int[n4], 0, n4);\n     }\n     \n     public byte[] getByteCode() {\n         this.setPositions();\n-        final ByteArrayOutputStream b = new ByteArrayOutputStream();\n-        final DataOutputStream out = new DataOutputStream(b);\n+        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        final DataOutputStream dataOutputStream = new DataOutputStream(out);\n         try {\n-            for (InstructionHandle ih = this.start; ih != null; ih = ih.getNext()) {\n-                final Instruction i = ih.getInstruction();\n-                i.dump(out);\n+            for (InstructionHandle instructionHandle = this.start; instructionHandle != null; instructionHandle = instructionHandle.getNext()) {\n+                instructionHandle.getInstruction().dump(dataOutputStream);\n             }\n-            out.flush();\n+            dataOutputStream.flush();\n         }\n-        catch (final IOException e) {\n-            System.err.println(e);\n+        catch (final IOException x) {\n+            System.err.println(x);\n             return new byte[0];\n         }\n-        return b.toByteArray();\n+        return out.toByteArray();\n     }\n     \n     public Instruction[] getInstructions() {\n-        final List<Instruction> instructions = new ArrayList<Instruction>();\n-        try (final ByteSequence bytes = new ByteSequence(this.getByteCode())) {\n-            while (bytes.available() > 0) {\n-                instructions.add(Instruction.readInstruction(bytes));\n+        final ArrayList list = new ArrayList();\n+        try (final ByteSequence byteSequence = new ByteSequence(this.getByteCode())) {\n+            while (byteSequence.available() > 0) {\n+                list.add(Instruction.readInstruction(byteSequence));\n             }\n         }\n-        catch (final IOException e) {\n-            throw new ClassGenException(e.toString(), (Throwable)e);\n+        catch (final IOException ex) {\n+            throw new ClassGenException(ex.toString(), (Throwable)ex);\n         }\n-        return instructions.toArray(new Instruction[instructions.size()]);\n+        return (Instruction[])list.toArray(new Instruction[list.size()]);\n     }\n     \n     @Override\n     public String toString() {\n         return this.toString(true);\n     }\n     \n-    public String toString(final boolean verbose) {\n-        final StringBuilder buf = new StringBuilder();\n-        for (InstructionHandle ih = this.start; ih != null; ih = ih.getNext()) {\n-            buf.append(ih.toString(verbose)).append(\"\\n\");\n+    public String toString(final boolean b) {\n+        final StringBuilder sb = new StringBuilder();\n+        for (InstructionHandle instructionHandle = this.start; instructionHandle != null; instructionHandle = instructionHandle.getNext()) {\n+            sb.append(instructionHandle.toString(b)).append(\"\\n\");\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n     \n     @Override\n     public Iterator<InstructionHandle> iterator() {\n         return (Iterator<InstructionHandle>)new InstructionList.InstructionList$1(this);\n     }\n     \n     public InstructionHandle[] getInstructionHandles() {\n-        final InstructionHandle[] ihs = new InstructionHandle[this.length];\n-        InstructionHandle ih = this.start;\n+        final InstructionHandle[] array = new InstructionHandle[this.length];\n+        InstructionHandle instructionHandle = this.start;\n         for (int i = 0; i < this.length; ++i) {\n-            ihs[i] = ih;\n-            ih = ih.getNext();\n+            array[i] = instructionHandle;\n+            instructionHandle = instructionHandle.getNext();\n         }\n-        return ihs;\n+        return array;\n     }\n     \n     public int[] getInstructionPositions() {\n         return this.bytePositions;\n     }\n     \n     public InstructionList copy() {\n-        final Map<InstructionHandle, InstructionHandle> map = new HashMap<InstructionHandle, InstructionHandle>();\n-        final InstructionList il = new InstructionList();\n-        for (InstructionHandle ih = this.start; ih != null; ih = ih.getNext()) {\n-            final Instruction i = ih.getInstruction();\n-            final Instruction c = i.copy();\n-            if (c instanceof BranchInstruction) {\n-                map.put(ih, (InstructionHandle)il.append((BranchInstruction)c));\n+        final HashMap hashMap = new HashMap();\n+        final InstructionList list = new InstructionList();\n+        for (InstructionHandle instructionHandle = this.start; instructionHandle != null; instructionHandle = instructionHandle.getNext()) {\n+            final Instruction copy = instructionHandle.getInstruction().copy();\n+            if (copy instanceof BranchInstruction) {\n+                hashMap.put(instructionHandle, list.append((BranchInstruction)copy));\n             }\n             else {\n-                map.put(ih, il.append(c));\n+                hashMap.put(instructionHandle, list.append(copy));\n             }\n         }\n-        for (InstructionHandle ih = this.start, ch = il.start; ih != null; ih = ih.getNext(), ch = ch.getNext()) {\n-            final Instruction j = ih.getInstruction();\n-            final Instruction c2 = ch.getInstruction();\n-            if (j instanceof BranchInstruction) {\n-                final BranchInstruction bi = (BranchInstruction)j;\n-                final BranchInstruction bc = (BranchInstruction)c2;\n-                final InstructionHandle itarget = bi.getTarget();\n-                bc.setTarget((InstructionHandle)map.get(itarget));\n-                if (bi instanceof Select) {\n-                    final InstructionHandle[] itargets = ((Select)bi).getTargets();\n-                    final InstructionHandle[] ctargets = ((Select)bc).getTargets();\n-                    for (int k = 0; k < itargets.length; ++k) {\n-                        ctargets[k] = map.get(itargets[k]);\n+        for (InstructionHandle instructionHandle2 = this.start, instructionHandle3 = list.start; instructionHandle2 != null; instructionHandle2 = instructionHandle2.getNext(), instructionHandle3 = instructionHandle3.getNext()) {\n+            final Instruction instruction = instructionHandle2.getInstruction();\n+            final Instruction instruction2 = instructionHandle3.getInstruction();\n+            if (instruction instanceof BranchInstruction) {\n+                final BranchInstruction branchInstruction = (BranchInstruction)instruction;\n+                final BranchInstruction branchInstruction2 = (BranchInstruction)instruction2;\n+                branchInstruction2.setTarget((InstructionHandle)hashMap.get(branchInstruction.getTarget()));\n+                if (branchInstruction instanceof Select) {\n+                    final InstructionHandle[] targets = ((Select)branchInstruction).getTargets();\n+                    final InstructionHandle[] targets2 = ((Select)branchInstruction2).getTargets();\n+                    for (int i = 0; i < targets.length; ++i) {\n+                        targets2[i] = (InstructionHandle)hashMap.get(targets[i]);\n                     }\n                 }\n             }\n         }\n-        return il;\n+        return list;\n     }\n     \n-    public void replaceConstantPool(final ConstantPoolGen old_cp, final ConstantPoolGen new_cp) {\n-        for (InstructionHandle ih = this.start; ih != null; ih = ih.getNext()) {\n-            final Instruction i = ih.getInstruction();\n-            if (i instanceof CPInstruction) {\n-                final CPInstruction ci = (CPInstruction)i;\n-                final Constant c = old_cp.getConstant(ci.getIndex());\n-                ci.setIndex(new_cp.addConstant(c, old_cp));\n+    public void replaceConstantPool(final ConstantPoolGen constantPoolGen, final ConstantPoolGen constantPoolGen2) {\n+        for (InstructionHandle instructionHandle = this.start; instructionHandle != null; instructionHandle = instructionHandle.getNext()) {\n+            final Instruction instruction = instructionHandle.getInstruction();\n+            if (instruction instanceof CPInstruction) {\n+                final CPInstruction cpInstruction = (CPInstruction)instruction;\n+                cpInstruction.setIndex(constantPoolGen2.addConstant(constantPoolGen.getConstant(cpInstruction.getIndex()), constantPoolGen));\n             }\n         }\n     }\n     \n     private void clear() {\n         final InstructionHandle instructionHandle = null;\n         this.end = instructionHandle;\n         this.start = instructionHandle;\n         this.length = 0;\n     }\n     \n     public void dispose() {\n-        for (InstructionHandle ih = this.end; ih != null; ih = ih.getPrev()) {\n-            ih.dispose();\n+        for (InstructionHandle instructionHandle = this.end; instructionHandle != null; instructionHandle = instructionHandle.getPrev()) {\n+            instructionHandle.dispose();\n         }\n         this.clear();\n     }\n     \n     public InstructionHandle getStart() {\n         return this.start;\n     }\n@@ -704,76 +696,76 @@\n         return this.length;\n     }\n     \n     public int size() {\n         return this.length;\n     }\n     \n-    public void redirectBranches(final InstructionHandle old_target, final InstructionHandle new_target) {\n-        for (InstructionHandle ih = this.start; ih != null; ih = ih.getNext()) {\n-            final Instruction i = ih.getInstruction();\n-            if (i instanceof BranchInstruction) {\n-                final BranchInstruction b = (BranchInstruction)i;\n-                final InstructionHandle target = b.getTarget();\n-                if (target == old_target) {\n-                    b.setTarget(new_target);\n+    public void redirectBranches(final InstructionHandle instructionHandle, final InstructionHandle target) {\n+        for (InstructionHandle instructionHandle2 = this.start; instructionHandle2 != null; instructionHandle2 = instructionHandle2.getNext()) {\n+            final Instruction instruction = instructionHandle2.getInstruction();\n+            if (instruction instanceof BranchInstruction) {\n+                final BranchInstruction branchInstruction = (BranchInstruction)instruction;\n+                if (branchInstruction.getTarget() == instructionHandle) {\n+                    branchInstruction.setTarget(target);\n                 }\n-                if (b instanceof Select) {\n-                    final InstructionHandle[] targets = ((Select)b).getTargets();\n-                    for (int j = 0; j < targets.length; ++j) {\n-                        if (targets[j] == old_target) {\n-                            ((Select)b).setTarget(j, new_target);\n+                if (branchInstruction instanceof Select) {\n+                    final InstructionHandle[] targets = ((Select)branchInstruction).getTargets();\n+                    for (int i = 0; i < targets.length; ++i) {\n+                        if (targets[i] == instructionHandle) {\n+                            ((Select)branchInstruction).setTarget(i, target);\n                         }\n                     }\n                 }\n             }\n         }\n     }\n     \n-    public void redirectLocalVariables(final LocalVariableGen[] lg, final InstructionHandle old_target, final InstructionHandle new_target) {\n-        for (final LocalVariableGen element : lg) {\n-            final InstructionHandle start = element.getStart();\n-            final InstructionHandle end = element.getEnd();\n-            if (start == old_target) {\n-                element.setStart(new_target);\n+    public void redirectLocalVariables(final LocalVariableGen[] array, final InstructionHandle instructionHandle, final InstructionHandle instructionHandle2) {\n+        for (final LocalVariableGen localVariableGen : array) {\n+            final InstructionHandle start = localVariableGen.getStart();\n+            final InstructionHandle end = localVariableGen.getEnd();\n+            if (start == instructionHandle) {\n+                localVariableGen.setStart(instructionHandle2);\n             }\n-            if (end == old_target) {\n-                element.setEnd(new_target);\n+            if (end == instructionHandle) {\n+                localVariableGen.setEnd(instructionHandle2);\n             }\n         }\n     }\n     \n-    public void redirectExceptionHandlers(final CodeExceptionGen[] exceptions, final InstructionHandle old_target, final InstructionHandle new_target) {\n-        for (final CodeExceptionGen exception : exceptions) {\n-            if (exception.getStartPC() == old_target) {\n-                exception.setStartPC(new_target);\n+    public void redirectExceptionHandlers(final CodeExceptionGen[] array, final InstructionHandle instructionHandle, final InstructionHandle handlerPC) {\n+        for (final CodeExceptionGen codeExceptionGen : array) {\n+            if (codeExceptionGen.getStartPC() == instructionHandle) {\n+                codeExceptionGen.setStartPC(handlerPC);\n             }\n-            if (exception.getEndPC() == old_target) {\n-                exception.setEndPC(new_target);\n+            if (codeExceptionGen.getEndPC() == instructionHandle) {\n+                codeExceptionGen.setEndPC(handlerPC);\n             }\n-            if (exception.getHandlerPC() == old_target) {\n-                exception.setHandlerPC(new_target);\n+            if (codeExceptionGen.getHandlerPC() == instructionHandle) {\n+                codeExceptionGen.setHandlerPC(handlerPC);\n             }\n         }\n     }\n     \n-    public void addObserver(final InstructionListObserver o) {\n+    public void addObserver(final InstructionListObserver instructionListObserver) {\n         if (this.observers == null) {\n             this.observers = new ArrayList<InstructionListObserver>();\n         }\n-        this.observers.add(o);\n+        this.observers.add(instructionListObserver);\n     }\n     \n-    public void removeObserver(final InstructionListObserver o) {\n+    public void removeObserver(final InstructionListObserver instructionListObserver) {\n         if (this.observers != null) {\n-            this.observers.remove(o);\n+            this.observers.remove(instructionListObserver);\n         }\n     }\n     \n     public void update() {\n         if (this.observers != null) {\n-            for (final InstructionListObserver observer : this.observers) {\n-                observer.notify(this);\n+            final Iterator<InstructionListObserver> iterator = this.observers.iterator();\n+            while (iterator.hasNext()) {\n+                ((InstructionListObserver)iterator.next()).notify(this);\n             }\n         }\n     }\n }\n"}]}
