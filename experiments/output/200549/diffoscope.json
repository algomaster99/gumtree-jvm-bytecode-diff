{"diffoscope-json-version": 1, "source1": "first/ElementValue.class", "source2": "second/ElementValue.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -26,49 +26,49 @@\n     protected ConstantPool cpool;\n     \n     public static ElementValue readElementValue(final DataInput input, final ConstantPool cpool) throws IOException {\n         return readElementValue(input, cpool, 0);\n     }\n     \n     public static ElementValue readElementValue(final DataInput input, final ConstantPool cpool, int arrayNesting) throws IOException {\n-        final byte tag = input.readByte();\n-        switch (tag) {\n+        final byte byte1 = input.readByte();\n+        switch (byte1) {\n             case 66:\n             case 67:\n             case 68:\n             case 70:\n             case 73:\n             case 74:\n             case 83:\n             case 90:\n             case 115: {\n-                return (ElementValue)new SimpleElementValue((int)tag, input.readUnsignedShort(), cpool);\n+                return (ElementValue)new SimpleElementValue((int)byte1, input.readUnsignedShort(), cpool);\n             }\n             case 101: {\n                 return (ElementValue)new EnumElementValue(101, input.readUnsignedShort(), input.readUnsignedShort(), cpool);\n             }\n             case 99: {\n                 return (ElementValue)new ClassElementValue(99, input.readUnsignedShort(), cpool);\n             }\n             case 64: {\n                 return (ElementValue)new AnnotationElementValue(64, AnnotationEntry.read(input, cpool, false), cpool);\n             }\n             case 91: {\n                 if (++arrayNesting > 255) {\n                     throw new ClassFormatException(String.format(\"Arrays are only valid if they represent %,d or fewer dimensions.\", Integer.valueOf(255)));\n                 }\n-                final int numArrayVals = input.readUnsignedShort();\n-                final ElementValue[] evalues = new ElementValue[numArrayVals];\n-                for (int j = 0; j < numArrayVals; ++j) {\n-                    evalues[j] = readElementValue(input, cpool, arrayNesting);\n+                final int unsignedShort = input.readUnsignedShort();\n+                final ElementValue[] array = new ElementValue[unsignedShort];\n+                for (int i = 0; i < unsignedShort; ++i) {\n+                    array[i] = readElementValue(input, cpool, arrayNesting);\n                 }\n-                return (ElementValue)new ArrayElementValue(91, evalues, cpool);\n+                return (ElementValue)new ArrayElementValue(91, array, cpool);\n             }\n             default: {\n-                throw new ClassFormatException(\"Unexpected element value tag in annotation: \" + tag);\n+                throw new ClassFormatException(\"Unexpected element value tag in annotation: \" + byte1);\n             }\n         }\n     }\n     \n     protected ElementValue(final int type, final ConstantPool cpool) {\n         this.type = type;\n         this.cpool = cpool;\n"}]}
