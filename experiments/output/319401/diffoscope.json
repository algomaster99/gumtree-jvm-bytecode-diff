{"diffoscope-json-version": 1, "source1": "first/FromNetASCIIInputStream.class", "source2": "second/FromNetASCIIInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,126 +1,126 @@\n-  SHA-256 checksum 6b10fc46d3ceb6c11a63a394b95801570c90cab45e93cfd37fbc6de4eaef9ead\n+  SHA-256 checksum be490bf4d763a35cdb30db0fcc60c72d3693275eae0a2cdf76809c538705a0eb\n   Compiled from \"FromNetASCIIInputStream.java\"\n public final class org.apache.commons.net.io.FromNetASCIIInputStream extends java.io.PushbackInputStream\n   minor version: 0\n   major version: 52\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n-  this_class: #27                         // org/apache/commons/net/io/FromNetASCIIInputStream\n-  super_class: #28                        // java/io/PushbackInputStream\n+  this_class: #2                          // org/apache/commons/net/io/FromNetASCIIInputStream\n+  super_class: #12                        // java/io/PushbackInputStream\n   interfaces: 0, fields: 4, methods: 8, attributes: 1\n Constant pool:\n-    #1 = Fieldref           #27.#55       // org/apache/commons/net/io/FromNetASCIIInputStream._noConversionRequired:Z\n-    #2 = Fieldref           #27.#56       // org/apache/commons/net/io/FromNetASCIIInputStream._lineSeparatorBytes:[B\n-    #3 = Methodref          #28.#57       // java/io/PushbackInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-    #4 = Fieldref           #27.#58       // org/apache/commons/net/io/FromNetASCIIInputStream.in:Ljava/io/InputStream;\n-    #5 = Class              #59           // java/io/IOException\n-    #6 = String             #60           // Stream closed\n-    #7 = Methodref          #5.#61        // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-    #8 = Fieldref           #27.#62       // org/apache/commons/net/io/FromNetASCIIInputStream.buf:[B\n-    #9 = Fieldref           #27.#63       // org/apache/commons/net/io/FromNetASCIIInputStream.pos:I\n-   #10 = Methodref          #64.#65       // java/io/InputStream.available:()I\n-   #11 = Methodref          #28.#66       // java/io/PushbackInputStream.read:()I\n-   #12 = Methodref          #27.#67       // org/apache/commons/net/io/FromNetASCIIInputStream.readInt:()I\n-   #13 = Methodref          #27.#68       // org/apache/commons/net/io/FromNetASCIIInputStream.read:([BII)I\n-   #14 = Methodref          #28.#68       // java/io/PushbackInputStream.read:([BII)I\n-   #15 = Methodref          #27.#65       // org/apache/commons/net/io/FromNetASCIIInputStream.available:()I\n-   #16 = Methodref          #69.#70       // java/lang/Math.min:(II)I\n-   #17 = Fieldref           #27.#71       // org/apache/commons/net/io/FromNetASCIIInputStream.length:I\n-   #18 = Class              #72           // org/apache/commons/net/util/NetConstants\n-   #19 = Methodref          #27.#73       // org/apache/commons/net/io/FromNetASCIIInputStream.unread:(I)V\n-   #20 = Methodref          #27.#74       // org/apache/commons/net/io/FromNetASCIIInputStream.unread:([B)V\n-   #21 = Methodref          #75.#76       // java/lang/System.lineSeparator:()Ljava/lang/String;\n-   #22 = Fieldref           #27.#77       // org/apache/commons/net/io/FromNetASCIIInputStream._lineSeparator:Ljava/lang/String;\n-   #23 = String             #78           // \\r\\n\n-   #24 = Methodref          #79.#80       // java/lang/String.equals:(Ljava/lang/Object;)Z\n-   #25 = Fieldref           #81.#82       // java/nio/charset/StandardCharsets.US_ASCII:Ljava/nio/charset/Charset;\n-   #26 = Methodref          #79.#83       // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n-   #27 = Class              #84           // org/apache/commons/net/io/FromNetASCIIInputStream\n-   #28 = Class              #85           // java/io/PushbackInputStream\n-   #29 = Utf8               _noConversionRequired\n-   #30 = Utf8               Z\n-   #31 = Utf8               _lineSeparator\n-   #32 = Utf8               Ljava/lang/String;\n-   #33 = Utf8               _lineSeparatorBytes\n-   #34 = Utf8               [B\n-   #35 = Utf8               length\n-   #36 = Utf8               I\n-   #37 = Utf8               isConversionRequired\n-   #38 = Utf8               ()Z\n-   #39 = Utf8               Code\n-   #40 = Utf8               LineNumberTable\n-   #41 = Utf8               StackMapTable\n-   #42 = Utf8               <init>\n-   #43 = Utf8               (Ljava/io/InputStream;)V\n-   #44 = Utf8               available\n-   #45 = Utf8               ()I\n-   #46 = Utf8               Exceptions\n-   #47 = Utf8               read\n-   #48 = Utf8               ([B)I\n+    #1 = Fieldref           #2.#3         // org/apache/commons/net/io/FromNetASCIIInputStream._noConversionRequired:Z\n+    #2 = Class              #4            // org/apache/commons/net/io/FromNetASCIIInputStream\n+    #3 = NameAndType        #5:#6         // _noConversionRequired:Z\n+    #4 = Utf8               org/apache/commons/net/io/FromNetASCIIInputStream\n+    #5 = Utf8               _noConversionRequired\n+    #6 = Utf8               Z\n+    #7 = Fieldref           #2.#8         // org/apache/commons/net/io/FromNetASCIIInputStream._lineSeparatorBytes:[B\n+    #8 = NameAndType        #9:#10        // _lineSeparatorBytes:[B\n+    #9 = Utf8               _lineSeparatorBytes\n+   #10 = Utf8               [B\n+   #11 = Methodref          #12.#13       // java/io/PushbackInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+   #12 = Class              #14           // java/io/PushbackInputStream\n+   #13 = NameAndType        #15:#16       // \"<init>\":(Ljava/io/InputStream;I)V\n+   #14 = Utf8               java/io/PushbackInputStream\n+   #15 = Utf8               <init>\n+   #16 = Utf8               (Ljava/io/InputStream;I)V\n+   #17 = Fieldref           #2.#18        // org/apache/commons/net/io/FromNetASCIIInputStream.in:Ljava/io/InputStream;\n+   #18 = NameAndType        #19:#20       // in:Ljava/io/InputStream;\n+   #19 = Utf8               in\n+   #20 = Utf8               Ljava/io/InputStream;\n+   #21 = Class              #22           // java/io/IOException\n+   #22 = Utf8               java/io/IOException\n+   #23 = String             #24           // Stream closed\n+   #24 = Utf8               Stream closed\n+   #25 = Methodref          #21.#26       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #26 = NameAndType        #15:#27       // \"<init>\":(Ljava/lang/String;)V\n+   #27 = Utf8               (Ljava/lang/String;)V\n+   #28 = Fieldref           #2.#29        // org/apache/commons/net/io/FromNetASCIIInputStream.buf:[B\n+   #29 = NameAndType        #30:#10       // buf:[B\n+   #30 = Utf8               buf\n+   #31 = Fieldref           #2.#32        // org/apache/commons/net/io/FromNetASCIIInputStream.pos:I\n+   #32 = NameAndType        #33:#34       // pos:I\n+   #33 = Utf8               pos\n+   #34 = Utf8               I\n+   #35 = Methodref          #36.#37       // java/io/InputStream.available:()I\n+   #36 = Class              #38           // java/io/InputStream\n+   #37 = NameAndType        #39:#40       // available:()I\n+   #38 = Utf8               java/io/InputStream\n+   #39 = Utf8               available\n+   #40 = Utf8               ()I\n+   #41 = Methodref          #12.#42       // java/io/PushbackInputStream.read:()I\n+   #42 = NameAndType        #43:#40       // read:()I\n+   #43 = Utf8               read\n+   #44 = Methodref          #2.#45        // org/apache/commons/net/io/FromNetASCIIInputStream.readInt:()I\n+   #45 = NameAndType        #46:#40       // readInt:()I\n+   #46 = Utf8               readInt\n+   #47 = Methodref          #2.#48        // org/apache/commons/net/io/FromNetASCIIInputStream.read:([BII)I\n+   #48 = NameAndType        #43:#49       // read:([BII)I\n    #49 = Utf8               ([BII)I\n-   #50 = Utf8               readInt\n-   #51 = Utf8               <clinit>\n-   #52 = Utf8               ()V\n-   #53 = Utf8               SourceFile\n-   #54 = Utf8               FromNetASCIIInputStream.java\n-   #55 = NameAndType        #29:#30       // _noConversionRequired:Z\n-   #56 = NameAndType        #33:#34       // _lineSeparatorBytes:[B\n-   #57 = NameAndType        #42:#86       // \"<init>\":(Ljava/io/InputStream;I)V\n-   #58 = NameAndType        #87:#88       // in:Ljava/io/InputStream;\n-   #59 = Utf8               java/io/IOException\n-   #60 = Utf8               Stream closed\n-   #61 = NameAndType        #42:#89       // \"<init>\":(Ljava/lang/String;)V\n-   #62 = NameAndType        #90:#34       // buf:[B\n-   #63 = NameAndType        #91:#36       // pos:I\n-   #64 = Class              #92           // java/io/InputStream\n-   #65 = NameAndType        #44:#45       // available:()I\n-   #66 = NameAndType        #47:#45       // read:()I\n-   #67 = NameAndType        #50:#45       // readInt:()I\n-   #68 = NameAndType        #47:#49       // read:([BII)I\n-   #69 = Class              #93           // java/lang/Math\n-   #70 = NameAndType        #94:#95       // min:(II)I\n-   #71 = NameAndType        #35:#36       // length:I\n-   #72 = Utf8               org/apache/commons/net/util/NetConstants\n-   #73 = NameAndType        #96:#97       // unread:(I)V\n-   #74 = NameAndType        #96:#98       // unread:([B)V\n-   #75 = Class              #99           // java/lang/System\n-   #76 = NameAndType        #100:#101     // lineSeparator:()Ljava/lang/String;\n-   #77 = NameAndType        #31:#32       // _lineSeparator:Ljava/lang/String;\n-   #78 = Utf8               \\r\\n\n-   #79 = Class              #102          // java/lang/String\n-   #80 = NameAndType        #103:#104     // equals:(Ljava/lang/Object;)Z\n-   #81 = Class              #105          // java/nio/charset/StandardCharsets\n-   #82 = NameAndType        #106:#107     // US_ASCII:Ljava/nio/charset/Charset;\n-   #83 = NameAndType        #108:#109     // getBytes:(Ljava/nio/charset/Charset;)[B\n-   #84 = Utf8               org/apache/commons/net/io/FromNetASCIIInputStream\n-   #85 = Utf8               java/io/PushbackInputStream\n-   #86 = Utf8               (Ljava/io/InputStream;I)V\n-   #87 = Utf8               in\n-   #88 = Utf8               Ljava/io/InputStream;\n-   #89 = Utf8               (Ljava/lang/String;)V\n-   #90 = Utf8               buf\n-   #91 = Utf8               pos\n-   #92 = Utf8               java/io/InputStream\n-   #93 = Utf8               java/lang/Math\n-   #94 = Utf8               min\n-   #95 = Utf8               (II)I\n-   #96 = Utf8               unread\n-   #97 = Utf8               (I)V\n-   #98 = Utf8               ([B)V\n-   #99 = Utf8               java/lang/System\n-  #100 = Utf8               lineSeparator\n-  #101 = Utf8               ()Ljava/lang/String;\n-  #102 = Utf8               java/lang/String\n-  #103 = Utf8               equals\n-  #104 = Utf8               (Ljava/lang/Object;)Z\n-  #105 = Utf8               java/nio/charset/StandardCharsets\n-  #106 = Utf8               US_ASCII\n-  #107 = Utf8               Ljava/nio/charset/Charset;\n-  #108 = Utf8               getBytes\n-  #109 = Utf8               (Ljava/nio/charset/Charset;)[B\n+   #50 = Methodref          #12.#48       // java/io/PushbackInputStream.read:([BII)I\n+   #51 = Methodref          #2.#37        // org/apache/commons/net/io/FromNetASCIIInputStream.available:()I\n+   #52 = Methodref          #53.#54       // java/lang/Math.min:(II)I\n+   #53 = Class              #55           // java/lang/Math\n+   #54 = NameAndType        #56:#57       // min:(II)I\n+   #55 = Utf8               java/lang/Math\n+   #56 = Utf8               min\n+   #57 = Utf8               (II)I\n+   #58 = Fieldref           #2.#59        // org/apache/commons/net/io/FromNetASCIIInputStream.length:I\n+   #59 = NameAndType        #60:#34       // length:I\n+   #60 = Utf8               length\n+   #61 = Class              #62           // org/apache/commons/net/util/NetConstants\n+   #62 = Utf8               org/apache/commons/net/util/NetConstants\n+   #63 = Methodref          #2.#64        // org/apache/commons/net/io/FromNetASCIIInputStream.unread:(I)V\n+   #64 = NameAndType        #65:#66       // unread:(I)V\n+   #65 = Utf8               unread\n+   #66 = Utf8               (I)V\n+   #67 = Methodref          #2.#68        // org/apache/commons/net/io/FromNetASCIIInputStream.unread:([B)V\n+   #68 = NameAndType        #65:#69       // unread:([B)V\n+   #69 = Utf8               ([B)V\n+   #70 = Methodref          #71.#72       // java/lang/System.lineSeparator:()Ljava/lang/String;\n+   #71 = Class              #73           // java/lang/System\n+   #72 = NameAndType        #74:#75       // lineSeparator:()Ljava/lang/String;\n+   #73 = Utf8               java/lang/System\n+   #74 = Utf8               lineSeparator\n+   #75 = Utf8               ()Ljava/lang/String;\n+   #76 = Fieldref           #2.#77        // org/apache/commons/net/io/FromNetASCIIInputStream._lineSeparator:Ljava/lang/String;\n+   #77 = NameAndType        #78:#79       // _lineSeparator:Ljava/lang/String;\n+   #78 = Utf8               _lineSeparator\n+   #79 = Utf8               Ljava/lang/String;\n+   #80 = String             #81           // \\r\\n\n+   #81 = Utf8               \\r\\n\n+   #82 = Methodref          #83.#84       // java/lang/String.equals:(Ljava/lang/Object;)Z\n+   #83 = Class              #85           // java/lang/String\n+   #84 = NameAndType        #86:#87       // equals:(Ljava/lang/Object;)Z\n+   #85 = Utf8               java/lang/String\n+   #86 = Utf8               equals\n+   #87 = Utf8               (Ljava/lang/Object;)Z\n+   #88 = Fieldref           #89.#90       // java/nio/charset/StandardCharsets.US_ASCII:Ljava/nio/charset/Charset;\n+   #89 = Class              #91           // java/nio/charset/StandardCharsets\n+   #90 = NameAndType        #92:#93       // US_ASCII:Ljava/nio/charset/Charset;\n+   #91 = Utf8               java/nio/charset/StandardCharsets\n+   #92 = Utf8               US_ASCII\n+   #93 = Utf8               Ljava/nio/charset/Charset;\n+   #94 = Methodref          #83.#95       // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n+   #95 = NameAndType        #96:#97       // getBytes:(Ljava/nio/charset/Charset;)[B\n+   #96 = Utf8               getBytes\n+   #97 = Utf8               (Ljava/nio/charset/Charset;)[B\n+   #98 = Utf8               isConversionRequired\n+   #99 = Utf8               ()Z\n+  #100 = Utf8               Code\n+  #101 = Utf8               LineNumberTable\n+  #102 = Utf8               StackMapTable\n+  #103 = Utf8               (Ljava/io/InputStream;)V\n+  #104 = Utf8               Exceptions\n+  #105 = Utf8               ([B)I\n+  #106 = Utf8               <clinit>\n+  #107 = Utf8               ()V\n+  #108 = Utf8               SourceFile\n+  #109 = Utf8               FromNetASCIIInputStream.java\n {\n   static final boolean _noConversionRequired;\n     descriptor: Z\n     flags: (0x0018) ACC_STATIC, ACC_FINAL\n \n   static final java.lang.String _lineSeparator;\n     descriptor: Ljava/lang/String;\n@@ -155,46 +155,46 @@\n   public org.apache.commons.net.io.FromNetASCIIInputStream(java.io.InputStream);\n     descriptor: (Ljava/io/InputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: getstatic     #2                  // Field _lineSeparatorBytes:[B\n+         2: getstatic     #7                  // Field _lineSeparatorBytes:[B\n          5: arraylength\n          6: iconst_1\n          7: iadd\n-         8: invokespecial #3                  // Method java/io/PushbackInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+         8: invokespecial #11                 // Method java/io/PushbackInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n         11: return\n       LineNumberTable:\n         line 64: 0\n         line 65: 11\n \n   public int available() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #4                  // Field in:Ljava/io/InputStream;\n+         1: getfield      #17                 // Field in:Ljava/io/InputStream;\n          4: ifnonnull     17\n-         7: new           #5                  // class java/io/IOException\n+         7: new           #21                 // class java/io/IOException\n         10: dup\n-        11: ldc           #6                  // String Stream closed\n-        13: invokespecial #7                  // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        11: ldc           #23                 // String Stream closed\n+        13: invokespecial #25                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         16: athrow\n         17: aload_0\n-        18: getfield      #8                  // Field buf:[B\n+        18: getfield      #28                 // Field buf:[B\n         21: arraylength\n         22: aload_0\n-        23: getfield      #9                  // Field pos:I\n+        23: getfield      #31                 // Field pos:I\n         26: isub\n         27: aload_0\n-        28: getfield      #4                  // Field in:Ljava/io/InputStream;\n-        31: invokevirtual #10                 // Method java/io/InputStream.available:()I\n+        28: getfield      #17                 // Field in:Ljava/io/InputStream;\n+        31: invokevirtual #35                 // Method java/io/InputStream.available:()I\n         34: iadd\n         35: ireturn\n       LineNumberTable:\n         line 75: 0\n         line 76: 7\n         line 78: 17\n       StackMapTable: number_of_entries = 1\n@@ -206,18 +206,18 @@\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: getstatic     #1                  // Field _noConversionRequired:Z\n          3: ifeq          11\n          6: aload_0\n-         7: invokespecial #11                 // Method java/io/PushbackInputStream.read:()I\n+         7: invokespecial #41                 // Method java/io/PushbackInputStream.read:()I\n         10: ireturn\n         11: aload_0\n-        12: invokespecial #12                 // Method readInt:()I\n+        12: invokespecial #44                 // Method readInt:()I\n         15: ireturn\n       LineNumberTable:\n         line 91: 0\n         line 92: 6\n         line 95: 11\n       StackMapTable: number_of_entries = 1\n         frame_type = 11 /* same */\n@@ -230,15 +230,15 @@\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n          3: aload_1\n          4: arraylength\n-         5: invokevirtual #13                 // Method read:([BII)I\n+         5: invokevirtual #47                 // Method read:([BII)I\n          8: ireturn\n       LineNumberTable:\n         line 107: 0\n     Exceptions:\n       throws java.io.IOException\n \n   public int read(byte[], int, int) throws java.io.IOException;\n@@ -248,38 +248,38 @@\n       stack=4, locals=6, args_size=4\n          0: getstatic     #1                  // Field _noConversionRequired:Z\n          3: ifeq          14\n          6: aload_0\n          7: aload_1\n          8: iload_2\n          9: iload_3\n-        10: invokespecial #14                 // Method java/io/PushbackInputStream.read:([BII)I\n+        10: invokespecial #50                 // Method java/io/PushbackInputStream.read:([BII)I\n         13: ireturn\n         14: iload_3\n         15: iconst_1\n         16: if_icmpge     21\n         19: iconst_0\n         20: ireturn\n         21: aload_0\n-        22: invokevirtual #15                 // Method available:()I\n+        22: invokevirtual #51                 // Method available:()I\n         25: istore        4\n         27: aload_0\n         28: iload_3\n         29: iload         4\n-        31: invokestatic  #16                 // Method java/lang/Math.min:(II)I\n-        34: putfield      #17                 // Field length:I\n+        31: invokestatic  #52                 // Method java/lang/Math.min:(II)I\n+        34: putfield      #58                 // Field length:I\n         37: aload_0\n-        38: getfield      #17                 // Field length:I\n+        38: getfield      #58                 // Field length:I\n         41: iconst_1\n         42: if_icmpge     50\n         45: aload_0\n         46: iconst_1\n-        47: putfield      #17                 // Field length:I\n+        47: putfield      #58                 // Field length:I\n         50: aload_0\n-        51: invokespecial #12                 // Method readInt:()I\n+        51: invokespecial #44                 // Method readInt:()I\n         54: dup\n         55: istore        4\n         57: iconst_m1\n         58: if_icmpne     63\n         61: iconst_m1\n         62: ireturn\n         63: iload_2\n@@ -288,22 +288,22 @@\n         67: iload_2\n         68: iinc          2, 1\n         71: iload         4\n         73: i2b\n         74: bastore\n         75: aload_0\n         76: dup\n-        77: getfield      #17                 // Field length:I\n+        77: getfield      #58                 // Field length:I\n         80: iconst_1\n         81: isub\n         82: dup_x1\n-        83: putfield      #17                 // Field length:I\n+        83: putfield      #58                 // Field length:I\n         86: ifle          100\n         89: aload_0\n-        90: invokespecial #12                 // Method readInt:()I\n+        90: invokespecial #44                 // Method readInt:()I\n         93: dup\n         94: istore        4\n         96: iconst_m1\n         97: if_icmpne     66\n        100: iload_2\n        101: iload         5\n        103: isub\n@@ -339,45 +339,45 @@\n \n   private int readInt() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: invokespecial #11                 // Method java/io/PushbackInputStream.read:()I\n+         1: invokespecial #41                 // Method java/io/PushbackInputStream.read:()I\n          4: istore_1\n          5: iload_1\n          6: bipush        13\n          8: if_icmpne     57\n         11: aload_0\n-        12: invokespecial #11                 // Method java/io/PushbackInputStream.read:()I\n+        12: invokespecial #41                 // Method java/io/PushbackInputStream.read:()I\n         15: istore_1\n         16: iload_1\n         17: bipush        10\n         19: if_icmpeq     35\n         22: iload_1\n         23: iconst_m1\n         24: if_icmpeq     32\n         27: aload_0\n         28: iload_1\n-        29: invokevirtual #19                 // Method unread:(I)V\n+        29: invokevirtual #63                 // Method unread:(I)V\n         32: bipush        13\n         34: ireturn\n         35: aload_0\n-        36: getstatic     #2                  // Field _lineSeparatorBytes:[B\n-        39: invokevirtual #20                 // Method unread:([B)V\n+        36: getstatic     #7                  // Field _lineSeparatorBytes:[B\n+        39: invokevirtual #67                 // Method unread:([B)V\n         42: aload_0\n-        43: invokespecial #11                 // Method java/io/PushbackInputStream.read:()I\n+        43: invokespecial #41                 // Method java/io/PushbackInputStream.read:()I\n         46: istore_1\n         47: aload_0\n         48: dup\n-        49: getfield      #17                 // Field length:I\n+        49: getfield      #58                 // Field length:I\n         52: iconst_1\n         53: isub\n-        54: putfield      #17                 // Field length:I\n+        54: putfield      #58                 // Field length:I\n         57: iload_1\n         58: ireturn\n       LineNumberTable:\n         line 158: 0\n         line 160: 5\n         line 161: 11\n         line 162: 16\n@@ -398,24 +398,24 @@\n       throws java.io.IOException\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=2, locals=0, args_size=0\n-         0: invokestatic  #21                 // Method java/lang/System.lineSeparator:()Ljava/lang/String;\n-         3: putstatic     #22                 // Field _lineSeparator:Ljava/lang/String;\n-         6: getstatic     #22                 // Field _lineSeparator:Ljava/lang/String;\n-         9: ldc           #23                 // String \\r\\n\n-        11: invokevirtual #24                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n+         0: invokestatic  #70                 // Method java/lang/System.lineSeparator:()Ljava/lang/String;\n+         3: putstatic     #76                 // Field _lineSeparator:Ljava/lang/String;\n+         6: getstatic     #76                 // Field _lineSeparator:Ljava/lang/String;\n+         9: ldc           #80                 // String \\r\\n\n+        11: invokevirtual #82                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n         14: putstatic     #1                  // Field _noConversionRequired:Z\n-        17: getstatic     #22                 // Field _lineSeparator:Ljava/lang/String;\n-        20: getstatic     #25                 // Field java/nio/charset/StandardCharsets.US_ASCII:Ljava/nio/charset/Charset;\n-        23: invokevirtual #26                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n-        26: putstatic     #2                  // Field _lineSeparatorBytes:[B\n+        17: getstatic     #76                 // Field _lineSeparator:Ljava/lang/String;\n+        20: getstatic     #88                 // Field java/nio/charset/StandardCharsets.US_ASCII:Ljava/nio/charset/Charset;\n+        23: invokevirtual #94                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n+        26: putstatic     #7                  // Field _lineSeparatorBytes:[B\n         29: return\n       LineNumberTable:\n         line 41: 0\n         line 42: 6\n         line 43: 17\n         line 44: 29\n }\n"}]}
