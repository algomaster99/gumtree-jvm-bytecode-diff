{"diffoscope-json-version": 1, "source1": "first/JarArchiveInputStream.class", "source2": "second/JarArchiveInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,70 +1,70 @@\n-  SHA-256 checksum 6dbd134ace04096e8a1cb5ffe8ce7b22e2729bd8a26be2417577507807ee246e\n+  SHA-256 checksum c3d1e08835b7357d314ceade121ced15000bba28557f2f2d5909d1f44152f164\n   Compiled from \"JarArchiveInputStream.java\"\n public class org.apache.commons.compress.archivers.jar.JarArchiveInputStream extends org.apache.commons.compress.archivers.zip.ZipArchiveInputStream\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #8                          // org/apache/commons/compress/archivers/jar/JarArchiveInputStream\n-  super_class: #9                         // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n+  this_class: #15                         // org/apache/commons/compress/archivers/jar/JarArchiveInputStream\n+  super_class: #2                         // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n   interfaces: 0, fields: 0, methods: 5, attributes: 1\n Constant pool:\n-   #1 = Methodref          #9.#40         // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.matches:([BI)Z\n-   #2 = Methodref          #9.#41         // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #3 = Methodref          #9.#42         // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n-   #4 = Methodref          #8.#43         // org/apache/commons/compress/archivers/jar/JarArchiveInputStream.getNextJarEntry:()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n-   #5 = Methodref          #8.#44         // org/apache/commons/compress/archivers/jar/JarArchiveInputStream.getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-   #6 = Class              #45            // org/apache/commons/compress/archivers/jar/JarArchiveEntry\n-   #7 = Methodref          #6.#46         // org/apache/commons/compress/archivers/jar/JarArchiveEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #8 = Class              #47            // org/apache/commons/compress/archivers/jar/JarArchiveInputStream\n-   #9 = Class              #48            // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n-  #10 = Utf8               matches\n-  #11 = Utf8               ([BI)Z\n-  #12 = Utf8               Code\n-  #13 = Utf8               LineNumberTable\n-  #14 = Utf8               LocalVariableTable\n-  #15 = Utf8               signature\n-  #16 = Utf8               [B\n-  #17 = Utf8               length\n-  #18 = Utf8               I\n-  #19 = Utf8               <init>\n-  #20 = Utf8               (Ljava/io/InputStream;)V\n-  #21 = Utf8               this\n-  #22 = Utf8               Lorg/apache/commons/compress/archivers/jar/JarArchiveInputStream;\n-  #23 = Utf8               inputStream\n-  #24 = Utf8               Ljava/io/InputStream;\n-  #25 = Utf8               (Ljava/io/InputStream;Ljava/lang/String;)V\n-  #26 = Utf8               encoding\n-  #27 = Utf8               Ljava/lang/String;\n-  #28 = Utf8               getNextEntry\n-  #29 = Utf8               ()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n-  #30 = Utf8               Exceptions\n-  #31 = Class              #49            // java/io/IOException\n-  #32 = Utf8               getNextJarEntry\n-  #33 = Utf8               ()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n-  #34 = Utf8               entry\n-  #35 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #36 = Utf8               StackMapTable\n-  #37 = Class              #50            // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #38 = Utf8               SourceFile\n-  #39 = Utf8               JarArchiveInputStream.java\n-  #40 = NameAndType        #10:#11        // matches:([BI)Z\n-  #41 = NameAndType        #19:#20        // \"<init>\":(Ljava/io/InputStream;)V\n-  #42 = NameAndType        #19:#25        // \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n-  #43 = NameAndType        #32:#33        // getNextJarEntry:()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n-  #44 = NameAndType        #51:#52        // getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #45 = Utf8               org/apache/commons/compress/archivers/jar/JarArchiveEntry\n-  #46 = NameAndType        #19:#53        // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #47 = Utf8               org/apache/commons/compress/archivers/jar/JarArchiveInputStream\n-  #48 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n-  #49 = Utf8               java/io/IOException\n-  #50 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #51 = Utf8               getNextZipEntry\n-  #52 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #53 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #1 = Methodref          #2.#3          // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.matches:([BI)Z\n+   #2 = Class              #4             // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n+   #3 = NameAndType        #5:#6          // matches:([BI)Z\n+   #4 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n+   #5 = Utf8               matches\n+   #6 = Utf8               ([BI)Z\n+   #7 = Methodref          #2.#8          // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #8 = NameAndType        #9:#10         // \"<init>\":(Ljava/io/InputStream;)V\n+   #9 = Utf8               <init>\n+  #10 = Utf8               (Ljava/io/InputStream;)V\n+  #11 = Methodref          #2.#12         // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n+  #12 = NameAndType        #9:#13         // \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n+  #13 = Utf8               (Ljava/io/InputStream;Ljava/lang/String;)V\n+  #14 = Methodref          #15.#16        // org/apache/commons/compress/archivers/jar/JarArchiveInputStream.getNextJarEntry:()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n+  #15 = Class              #17            // org/apache/commons/compress/archivers/jar/JarArchiveInputStream\n+  #16 = NameAndType        #18:#19        // getNextJarEntry:()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n+  #17 = Utf8               org/apache/commons/compress/archivers/jar/JarArchiveInputStream\n+  #18 = Utf8               getNextJarEntry\n+  #19 = Utf8               ()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n+  #20 = Methodref          #15.#21        // org/apache/commons/compress/archivers/jar/JarArchiveInputStream.getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #21 = NameAndType        #22:#23        // getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #22 = Utf8               getNextZipEntry\n+  #23 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #24 = Class              #25            // org/apache/commons/compress/archivers/jar/JarArchiveEntry\n+  #25 = Utf8               org/apache/commons/compress/archivers/jar/JarArchiveEntry\n+  #26 = Methodref          #24.#27        // org/apache/commons/compress/archivers/jar/JarArchiveEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #27 = NameAndType        #9:#28         // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #28 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #29 = Utf8               Code\n+  #30 = Utf8               LineNumberTable\n+  #31 = Utf8               LocalVariableTable\n+  #32 = Utf8               signature\n+  #33 = Utf8               [B\n+  #34 = Utf8               length\n+  #35 = Utf8               I\n+  #36 = Utf8               this\n+  #37 = Utf8               Lorg/apache/commons/compress/archivers/jar/JarArchiveInputStream;\n+  #38 = Utf8               inputStream\n+  #39 = Utf8               Ljava/io/InputStream;\n+  #40 = Utf8               encoding\n+  #41 = Utf8               Ljava/lang/String;\n+  #42 = Utf8               getNextEntry\n+  #43 = Utf8               ()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+  #44 = Utf8               Exceptions\n+  #45 = Class              #46            // java/io/IOException\n+  #46 = Utf8               java/io/IOException\n+  #47 = Utf8               entry\n+  #48 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #49 = Utf8               StackMapTable\n+  #50 = Class              #51            // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  #51 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  #52 = Utf8               SourceFile\n+  #53 = Utf8               JarArchiveInputStream.java\n {\n   public static boolean matches(byte[], int);\n     descriptor: ([BI)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n@@ -81,15 +81,15 @@\n   public org.apache.commons.compress.archivers.jar.JarArchiveInputStream(java.io.InputStream);\n     descriptor: (Ljava/io/InputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #2                  // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+         2: invokespecial #7                  // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;)V\n          5: return\n       LineNumberTable:\n         line 55: 0\n         line 56: 5\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0  this   Lorg/apache/commons/compress/archivers/jar/JarArchiveInputStream;\n@@ -99,15 +99,15 @@\n     descriptor: (Ljava/io/InputStream;Ljava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: aload_2\n-         3: invokespecial #3                  // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n+         3: invokespecial #11                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n          6: return\n       LineNumberTable:\n         line 66: 0\n         line 67: 6\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0  this   Lorg/apache/commons/compress/archivers/jar/JarArchiveInputStream;\n@@ -116,15 +116,15 @@\n \n   public org.apache.commons.compress.archivers.ArchiveEntry getNextEntry() throws java.io.IOException;\n     descriptor: ()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokevirtual #4                  // Method getNextJarEntry:()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n+         1: invokevirtual #14                 // Method getNextJarEntry:()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n          4: areturn\n       LineNumberTable:\n         line 71: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/jar/JarArchiveInputStream;\n     Exceptions:\n@@ -132,24 +132,24 @@\n \n   public org.apache.commons.compress.archivers.jar.JarArchiveEntry getNextJarEntry() throws java.io.IOException;\n     descriptor: ()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: invokevirtual #5                  // Method getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+         1: invokevirtual #20                 // Method getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n          4: astore_1\n          5: aload_1\n          6: ifnonnull     13\n          9: aconst_null\n         10: goto          21\n-        13: new           #6                  // class org/apache/commons/compress/archivers/jar/JarArchiveEntry\n+        13: new           #24                 // class org/apache/commons/compress/archivers/jar/JarArchiveEntry\n         16: dup\n         17: aload_1\n-        18: invokespecial #7                  // Method org/apache/commons/compress/archivers/jar/JarArchiveEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+        18: invokespecial #26                 // Method org/apache/commons/compress/archivers/jar/JarArchiveEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n         21: areturn\n       LineNumberTable:\n         line 75: 0\n         line 76: 5\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      22     0  this   Lorg/apache/commons/compress/archivers/jar/JarArchiveInputStream;\n"}]}
