{"diffoscope-json-version": 1, "source1": "first/FastDatePrinter$TimeZoneNumberRule.class", "source2": "second/FastDatePrinter$TimeZoneNumberRule.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,14 +6,19 @@\n \n private static class TimeZoneNumberRule implements FastDatePrinter.Rule\n {\n     static final TimeZoneNumberRule INSTANCE_COLON;\n     static final TimeZoneNumberRule INSTANCE_NO_COLON;\n     final boolean mColon;\n     \n+    static {\n+        TimeZoneNumberRule.INSTANCE_COLON = new TimeZoneNumberRule(true);\n+        TimeZoneNumberRule.INSTANCE_NO_COLON = new TimeZoneNumberRule(false);\n+    }\n+    \n     TimeZoneNumberRule(final boolean colon) {\n         this.mColon = colon;\n     }\n     \n     public int estimateLength() {\n         return 5;\n     }\n@@ -24,20 +29,15 @@\n             buffer.append('-');\n             offset = -offset;\n         }\n         else {\n             buffer.append('+');\n         }\n         final int hours = offset / 3600000;\n-        FastDatePrinter.access$000(buffer, hours);\n+        FastDatePrinter.access$0(buffer, hours);\n         if (this.mColon) {\n             buffer.append(':');\n         }\n         final int minutes = offset / 60000 - 60 * hours;\n-        FastDatePrinter.access$000(buffer, minutes);\n-    }\n-    \n-    static {\n-        TimeZoneNumberRule.INSTANCE_COLON = new TimeZoneNumberRule(true);\n-        TimeZoneNumberRule.INSTANCE_NO_COLON = new TimeZoneNumberRule(false);\n+        FastDatePrinter.access$0(buffer, minutes);\n     }\n }\n"}]}
