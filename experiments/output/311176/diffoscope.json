{"diffoscope-json-version": 1, "source1": "first/ResourceAlignmentExtraField.class", "source2": "second/ResourceAlignmentExtraField.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,124 +1,124 @@\n-  SHA-256 checksum 3be6e42c53243593d3b019ff058c42163e23cbc0a665a3e319ee1bb4efd23e3e\n+  SHA-256 checksum 744625f6f210ccde71e56358390619fb308db11deddc2a3fd694683a015b3a33\n   Compiled from \"ResourceAlignmentExtraField.java\"\n public class org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField implements org.apache.commons.compress.archivers.zip.ZipExtraField\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #18                         // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n-  super_class: #29                        // java/lang/Object\n+  this_class: #8                          // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n+  super_class: #2                         // java/lang/Object\n   interfaces: 1, fields: 6, methods: 14, attributes: 1\n Constant pool:\n-    #1 = Methodref          #29.#69       // java/lang/Object.\"<init>\":()V\n-    #2 = Methodref          #18.#70       // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.\"<init>\":(IZ)V\n-    #3 = Methodref          #18.#71       // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.\"<init>\":(IZI)V\n-    #4 = Class              #72           // java/lang/IllegalArgumentException\n-    #5 = Class              #73           // java/lang/StringBuilder\n-    #6 = Methodref          #5.#69        // java/lang/StringBuilder.\"<init>\":()V\n-    #7 = String             #74           // Alignment must be between 0 and 0x7fff, was:\n-    #8 = Methodref          #5.#75        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-    #9 = Methodref          #5.#76        // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #10 = Methodref          #5.#77        // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #11 = Methodref          #4.#78        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #12 = String             #79           // Padding must not be negative, was:\n-   #13 = Fieldref           #18.#80       // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.alignment:S\n-   #14 = Fieldref           #18.#81       // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.allowMethodChange:Z\n-   #15 = Fieldref           #18.#82       // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.padding:I\n-   #16 = Fieldref           #18.#83       // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #17 = Class              #84           // org/apache/commons/compress/archivers/zip/ZipShort\n-   #18 = Class              #85           // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n-   #19 = Methodref          #17.#86       // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-   #20 = Integer            32768\n-   #21 = Methodref          #17.#87       // org/apache/commons/compress/archivers/zip/ZipShort.putShort:(I[BI)V\n-   #22 = Methodref          #17.#88       // org/apache/commons/compress/archivers/zip/ZipShort.getBytes:(I)[B\n-   #23 = Methodref          #18.#89       // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.parseFromCentralDirectoryData:([BII)V\n-   #24 = Class              #90           // java/util/zip/ZipException\n-   #25 = String             #91           // Too short content for ResourceAlignmentExtraField (0xa11e):\n-   #26 = Methodref          #24.#78       // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-   #27 = Methodref          #17.#92       // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-   #28 = Integer            41246\n-   #29 = Class              #93           // java/lang/Object\n-   #30 = Class              #94           // org/apache/commons/compress/archivers/zip/ZipExtraField\n-   #31 = Utf8               ID\n-   #32 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #33 = Utf8               BASE_SIZE\n-   #34 = Utf8               I\n-   #35 = Utf8               ConstantValue\n-   #36 = Integer            2\n-   #37 = Utf8               ALLOW_METHOD_MESSAGE_CHANGE_FLAG\n-   #38 = Utf8               alignment\n-   #39 = Utf8               S\n-   #40 = Utf8               allowMethodChange\n-   #41 = Utf8               Z\n-   #42 = Utf8               padding\n-   #43 = Utf8               <init>\n-   #44 = Utf8               ()V\n-   #45 = Utf8               Code\n-   #46 = Utf8               LineNumberTable\n-   #47 = Utf8               (I)V\n-   #48 = Utf8               (IZ)V\n-   #49 = Utf8               (IZI)V\n-   #50 = Utf8               StackMapTable\n-   #51 = Utf8               getAlignment\n-   #52 = Utf8               ()S\n-   #53 = Utf8               ()Z\n-   #54 = Utf8               getHeaderId\n-   #55 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #56 = Utf8               getLocalFileDataLength\n-   #57 = Utf8               getCentralDirectoryLength\n-   #58 = Utf8               getLocalFileDataData\n-   #59 = Utf8               ()[B\n-   #60 = Class              #95           // \"[B\"\n-   #61 = Utf8               getCentralDirectoryData\n-   #62 = Utf8               parseFromLocalFileData\n-   #63 = Utf8               ([BII)V\n-   #64 = Utf8               Exceptions\n-   #65 = Utf8               parseFromCentralDirectoryData\n-   #66 = Utf8               <clinit>\n-   #67 = Utf8               SourceFile\n-   #68 = Utf8               ResourceAlignmentExtraField.java\n-   #69 = NameAndType        #43:#44       // \"<init>\":()V\n-   #70 = NameAndType        #43:#48       // \"<init>\":(IZ)V\n-   #71 = NameAndType        #43:#49       // \"<init>\":(IZI)V\n-   #72 = Utf8               java/lang/IllegalArgumentException\n-   #73 = Utf8               java/lang/StringBuilder\n-   #74 = Utf8               Alignment must be between 0 and 0x7fff, was:\n-   #75 = NameAndType        #96:#97       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #76 = NameAndType        #96:#98       // append:(I)Ljava/lang/StringBuilder;\n-   #77 = NameAndType        #99:#100      // toString:()Ljava/lang/String;\n-   #78 = NameAndType        #43:#101      // \"<init>\":(Ljava/lang/String;)V\n-   #79 = Utf8               Padding must not be negative, was:\n-   #80 = NameAndType        #38:#39       // alignment:S\n-   #81 = NameAndType        #40:#41       // allowMethodChange:Z\n-   #82 = NameAndType        #42:#34       // padding:I\n-   #83 = NameAndType        #31:#32       // ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #84 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-   #85 = Utf8               org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n-   #86 = NameAndType        #43:#47       // \"<init>\":(I)V\n-   #87 = NameAndType        #102:#103     // putShort:(I[BI)V\n-   #88 = NameAndType        #104:#105     // getBytes:(I)[B\n-   #89 = NameAndType        #65:#63       // parseFromCentralDirectoryData:([BII)V\n-   #90 = Utf8               java/util/zip/ZipException\n-   #91 = Utf8               Too short content for ResourceAlignmentExtraField (0xa11e):\n-   #92 = NameAndType        #106:#107     // getValue:([BI)I\n-   #93 = Utf8               java/lang/Object\n-   #94 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n-   #95 = Utf8               [B\n-   #96 = Utf8               append\n-   #97 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #98 = Utf8               (I)Ljava/lang/StringBuilder;\n-   #99 = Utf8               toString\n-  #100 = Utf8               ()Ljava/lang/String;\n-  #101 = Utf8               (Ljava/lang/String;)V\n-  #102 = Utf8               putShort\n-  #103 = Utf8               (I[BI)V\n-  #104 = Utf8               getBytes\n-  #105 = Utf8               (I)[B\n-  #106 = Utf8               getValue\n-  #107 = Utf8               ([BI)I\n+    #1 = Methodref          #2.#3         // java/lang/Object.\"<init>\":()V\n+    #2 = Class              #4            // java/lang/Object\n+    #3 = NameAndType        #5:#6         // \"<init>\":()V\n+    #4 = Utf8               java/lang/Object\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ()V\n+    #7 = Methodref          #8.#9         // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.\"<init>\":(IZ)V\n+    #8 = Class              #10           // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n+    #9 = NameAndType        #5:#11        // \"<init>\":(IZ)V\n+   #10 = Utf8               org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n+   #11 = Utf8               (IZ)V\n+   #12 = Methodref          #8.#13        // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.\"<init>\":(IZI)V\n+   #13 = NameAndType        #5:#14        // \"<init>\":(IZI)V\n+   #14 = Utf8               (IZI)V\n+   #15 = Class              #16           // java/lang/IllegalArgumentException\n+   #16 = Utf8               java/lang/IllegalArgumentException\n+   #17 = Class              #18           // java/lang/StringBuilder\n+   #18 = Utf8               java/lang/StringBuilder\n+   #19 = Methodref          #17.#3        // java/lang/StringBuilder.\"<init>\":()V\n+   #20 = String             #21           // Alignment must be between 0 and 0x7fff, was:\n+   #21 = Utf8               Alignment must be between 0 and 0x7fff, was:\n+   #22 = Methodref          #17.#23       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #23 = NameAndType        #24:#25       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #24 = Utf8               append\n+   #25 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #26 = Methodref          #17.#27       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #27 = NameAndType        #24:#28       // append:(I)Ljava/lang/StringBuilder;\n+   #28 = Utf8               (I)Ljava/lang/StringBuilder;\n+   #29 = Methodref          #17.#30       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #30 = NameAndType        #31:#32       // toString:()Ljava/lang/String;\n+   #31 = Utf8               toString\n+   #32 = Utf8               ()Ljava/lang/String;\n+   #33 = Methodref          #15.#34       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #34 = NameAndType        #5:#35        // \"<init>\":(Ljava/lang/String;)V\n+   #35 = Utf8               (Ljava/lang/String;)V\n+   #36 = String             #37           // Padding must not be negative, was:\n+   #37 = Utf8               Padding must not be negative, was:\n+   #38 = Fieldref           #8.#39        // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.alignment:S\n+   #39 = NameAndType        #40:#41       // alignment:S\n+   #40 = Utf8               alignment\n+   #41 = Utf8               S\n+   #42 = Fieldref           #8.#43        // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.allowMethodChange:Z\n+   #43 = NameAndType        #44:#45       // allowMethodChange:Z\n+   #44 = Utf8               allowMethodChange\n+   #45 = Utf8               Z\n+   #46 = Fieldref           #8.#47        // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.padding:I\n+   #47 = NameAndType        #48:#49       // padding:I\n+   #48 = Utf8               padding\n+   #49 = Utf8               I\n+   #50 = Fieldref           #8.#51        // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #51 = NameAndType        #52:#53       // ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #52 = Utf8               ID\n+   #53 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #54 = Class              #55           // org/apache/commons/compress/archivers/zip/ZipShort\n+   #55 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+   #56 = Methodref          #54.#57       // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+   #57 = NameAndType        #5:#58        // \"<init>\":(I)V\n+   #58 = Utf8               (I)V\n+   #59 = Integer            32768\n+   #60 = Methodref          #54.#61       // org/apache/commons/compress/archivers/zip/ZipShort.putShort:(I[BI)V\n+   #61 = NameAndType        #62:#63       // putShort:(I[BI)V\n+   #62 = Utf8               putShort\n+   #63 = Utf8               (I[BI)V\n+   #64 = Methodref          #54.#65       // org/apache/commons/compress/archivers/zip/ZipShort.getBytes:(I)[B\n+   #65 = NameAndType        #66:#67       // getBytes:(I)[B\n+   #66 = Utf8               getBytes\n+   #67 = Utf8               (I)[B\n+   #68 = Methodref          #8.#69        // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.parseFromCentralDirectoryData:([BII)V\n+   #69 = NameAndType        #70:#71       // parseFromCentralDirectoryData:([BII)V\n+   #70 = Utf8               parseFromCentralDirectoryData\n+   #71 = Utf8               ([BII)V\n+   #72 = Class              #73           // java/util/zip/ZipException\n+   #73 = Utf8               java/util/zip/ZipException\n+   #74 = String             #75           // Too short content for ResourceAlignmentExtraField (0xa11e):\n+   #75 = Utf8               Too short content for ResourceAlignmentExtraField (0xa11e):\n+   #76 = Methodref          #72.#34       // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+   #77 = Methodref          #54.#78       // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+   #78 = NameAndType        #79:#80       // getValue:([BI)I\n+   #79 = Utf8               getValue\n+   #80 = Utf8               ([BI)I\n+   #81 = Integer            41246\n+   #82 = Class              #83           // org/apache/commons/compress/archivers/zip/ZipExtraField\n+   #83 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n+   #84 = Utf8               BASE_SIZE\n+   #85 = Utf8               ConstantValue\n+   #86 = Integer            2\n+   #87 = Utf8               ALLOW_METHOD_MESSAGE_CHANGE_FLAG\n+   #88 = Utf8               Code\n+   #89 = Utf8               LineNumberTable\n+   #90 = Utf8               StackMapTable\n+   #91 = Utf8               getAlignment\n+   #92 = Utf8               ()S\n+   #93 = Utf8               ()Z\n+   #94 = Utf8               getHeaderId\n+   #95 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #96 = Utf8               getLocalFileDataLength\n+   #97 = Utf8               getCentralDirectoryLength\n+   #98 = Utf8               getLocalFileDataData\n+   #99 = Utf8               ()[B\n+  #100 = Class              #101          // \"[B\"\n+  #101 = Utf8               [B\n+  #102 = Utf8               getCentralDirectoryData\n+  #103 = Utf8               parseFromLocalFileData\n+  #104 = Utf8               Exceptions\n+  #105 = Utf8               <clinit>\n+  #106 = Utf8               SourceFile\n+  #107 = Utf8               ResourceAlignmentExtraField.java\n {\n   public static final org.apache.commons.compress.archivers.zip.ZipShort ID;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n \n   public static final int BASE_SIZE = 2;\n     descriptor: I\n@@ -158,30 +158,30 @@\n     descriptor: (I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n          2: iconst_0\n-         3: invokespecial #2                  // Method \"<init>\":(IZ)V\n+         3: invokespecial #7                  // Method \"<init>\":(IZ)V\n          6: return\n       LineNumberTable:\n         line 59: 0\n         line 60: 6\n \n   public org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField(int, boolean);\n     descriptor: (IZ)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n          1: iload_1\n          2: iload_2\n          3: iconst_0\n-         4: invokespecial #3                  // Method \"<init>\":(IZI)V\n+         4: invokespecial #12                 // Method \"<init>\":(IZI)V\n          7: return\n       LineNumberTable:\n         line 63: 0\n         line 64: 7\n \n   public org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField(int, boolean, int);\n     descriptor: (IZI)V\n@@ -191,50 +191,50 @@\n          0: aload_0\n          1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n          4: iload_1\n          5: iflt          15\n          8: iload_1\n          9: sipush        32767\n         12: if_icmple     42\n-        15: new           #4                  // class java/lang/IllegalArgumentException\n+        15: new           #15                 // class java/lang/IllegalArgumentException\n         18: dup\n-        19: new           #5                  // class java/lang/StringBuilder\n+        19: new           #17                 // class java/lang/StringBuilder\n         22: dup\n-        23: invokespecial #6                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        26: ldc           #7                  // String Alignment must be between 0 and 0x7fff, was:\n-        28: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        23: invokespecial #19                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        26: ldc           #20                 // String Alignment must be between 0 and 0x7fff, was:\n+        28: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         31: iload_1\n-        32: invokevirtual #9                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        35: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        38: invokespecial #11                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        32: invokevirtual #26                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        35: invokevirtual #29                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        38: invokespecial #33                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         41: athrow\n         42: iload_3\n         43: ifge          73\n-        46: new           #4                  // class java/lang/IllegalArgumentException\n+        46: new           #15                 // class java/lang/IllegalArgumentException\n         49: dup\n-        50: new           #5                  // class java/lang/StringBuilder\n+        50: new           #17                 // class java/lang/StringBuilder\n         53: dup\n-        54: invokespecial #6                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        57: ldc           #12                 // String Padding must not be negative, was:\n-        59: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        54: invokespecial #19                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        57: ldc           #36                 // String Padding must not be negative, was:\n+        59: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         62: iload_3\n-        63: invokevirtual #9                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        66: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        69: invokespecial #11                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        63: invokevirtual #26                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        66: invokevirtual #29                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        69: invokespecial #33                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         72: athrow\n         73: aload_0\n         74: iload_1\n         75: i2s\n-        76: putfield      #13                 // Field alignment:S\n+        76: putfield      #38                 // Field alignment:S\n         79: aload_0\n         80: iload_2\n-        81: putfield      #14                 // Field allowMethodChange:Z\n+        81: putfield      #42                 // Field allowMethodChange:Z\n         84: aload_0\n         85: iload_3\n-        86: putfield      #15                 // Field padding:I\n+        86: putfield      #46                 // Field padding:I\n         89: return\n       LineNumberTable:\n         line 66: 0\n         line 67: 4\n         line 68: 15\n         line 70: 42\n         line 71: 46\n@@ -252,92 +252,92 @@\n \n   public short getAlignment();\n     descriptor: ()S\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #13                 // Field alignment:S\n+         1: getfield      #38                 // Field alignment:S\n          4: ireturn\n       LineNumberTable:\n         line 85: 0\n \n   public boolean allowMethodChange();\n     descriptor: ()Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #14                 // Field allowMethodChange:Z\n+         1: getfield      #42                 // Field allowMethodChange:Z\n          4: ireturn\n       LineNumberTable:\n         line 95: 0\n \n   public org.apache.commons.compress.archivers.zip.ZipShort getHeaderId();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n-         0: getstatic     #16                 // Field ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+         0: getstatic     #50                 // Field ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n          3: areturn\n       LineNumberTable:\n         line 100: 0\n \n   public org.apache.commons.compress.archivers.zip.ZipShort getLocalFileDataLength();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=1, args_size=1\n-         0: new           #17                 // class org/apache/commons/compress/archivers/zip/ZipShort\n+         0: new           #54                 // class org/apache/commons/compress/archivers/zip/ZipShort\n          3: dup\n          4: iconst_2\n          5: aload_0\n-         6: getfield      #15                 // Field padding:I\n+         6: getfield      #46                 // Field padding:I\n          9: iadd\n-        10: invokespecial #19                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+        10: invokespecial #56                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n         13: areturn\n       LineNumberTable:\n         line 105: 0\n \n   public org.apache.commons.compress.archivers.zip.ZipShort getCentralDirectoryLength();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=1, args_size=1\n-         0: new           #17                 // class org/apache/commons/compress/archivers/zip/ZipShort\n+         0: new           #54                 // class org/apache/commons/compress/archivers/zip/ZipShort\n          3: dup\n          4: iconst_2\n-         5: invokespecial #19                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+         5: invokespecial #56                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n          8: areturn\n       LineNumberTable:\n         line 110: 0\n \n   public byte[] getLocalFileDataData();\n     descriptor: ()[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: iconst_2\n          1: aload_0\n-         2: getfield      #15                 // Field padding:I\n+         2: getfield      #46                 // Field padding:I\n          5: iadd\n          6: newarray       byte\n          8: astore_1\n          9: aload_0\n-        10: getfield      #13                 // Field alignment:S\n+        10: getfield      #38                 // Field alignment:S\n         13: aload_0\n-        14: getfield      #14                 // Field allowMethodChange:Z\n+        14: getfield      #42                 // Field allowMethodChange:Z\n         17: ifeq          25\n-        20: ldc           #20                 // int 32768\n+        20: ldc           #59                 // int 32768\n         22: goto          26\n         25: iconst_0\n         26: ior\n         27: aload_1\n         28: iconst_0\n-        29: invokestatic  #21                 // Method org/apache/commons/compress/archivers/zip/ZipShort.putShort:(I[BI)V\n+        29: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipShort.putShort:(I[BI)V\n         32: aload_1\n         33: areturn\n       LineNumberTable:\n         line 115: 0\n         line 116: 9\n         line 118: 32\n       StackMapTable: number_of_entries = 2\n@@ -352,23 +352,23 @@\n \n   public byte[] getCentralDirectoryData();\n     descriptor: ()[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #13                 // Field alignment:S\n+         1: getfield      #38                 // Field alignment:S\n          4: aload_0\n-         5: getfield      #14                 // Field allowMethodChange:Z\n+         5: getfield      #42                 // Field allowMethodChange:Z\n          8: ifeq          16\n-        11: ldc           #20                 // int 32768\n+        11: ldc           #59                 // int 32768\n         13: goto          17\n         16: iconst_0\n         17: ior\n-        18: invokestatic  #22                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getBytes:(I)[B\n+        18: invokestatic  #64                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getBytes:(I)[B\n         21: areturn\n       LineNumberTable:\n         line 123: 0\n       StackMapTable: number_of_entries = 2\n         frame_type = 80 /* same_locals_1_stack_item */\n           stack = [ int ]\n         frame_type = 255 /* full_frame */\n@@ -381,20 +381,20 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iload_3\n-         4: invokevirtual #23                 // Method parseFromCentralDirectoryData:([BII)V\n+         4: invokevirtual #68                 // Method parseFromCentralDirectoryData:([BII)V\n          7: aload_0\n          8: iload_3\n          9: iconst_2\n         10: isub\n-        11: putfield      #15                 // Field padding:I\n+        11: putfield      #46                 // Field padding:I\n         14: return\n       LineNumberTable:\n         line 128: 0\n         line 129: 7\n         line 130: 14\n     Exceptions:\n       throws java.util.zip.ZipException\n@@ -403,45 +403,45 @@\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=5, args_size=4\n          0: iload_3\n          1: iconst_2\n          2: if_icmpge     32\n-         5: new           #24                 // class java/util/zip/ZipException\n+         5: new           #72                 // class java/util/zip/ZipException\n          8: dup\n-         9: new           #5                  // class java/lang/StringBuilder\n+         9: new           #17                 // class java/lang/StringBuilder\n         12: dup\n-        13: invokespecial #6                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        16: ldc           #25                 // String Too short content for ResourceAlignmentExtraField (0xa11e):\n-        18: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        13: invokespecial #19                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        16: ldc           #74                 // String Too short content for ResourceAlignmentExtraField (0xa11e):\n+        18: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         21: iload_3\n-        22: invokevirtual #9                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        25: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        28: invokespecial #26                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        22: invokevirtual #26                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        25: invokevirtual #29                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        28: invokespecial #76                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n         31: athrow\n         32: aload_1\n         33: iload_2\n-        34: invokestatic  #27                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+        34: invokestatic  #77                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n         37: istore        4\n         39: aload_0\n         40: iload         4\n         42: sipush        32767\n         45: iand\n         46: i2s\n-        47: putfield      #13                 // Field alignment:S\n+        47: putfield      #38                 // Field alignment:S\n         50: aload_0\n         51: iload         4\n-        53: ldc           #20                 // int 32768\n+        53: ldc           #59                 // int 32768\n         55: iand\n         56: ifeq          63\n         59: iconst_1\n         60: goto          64\n         63: iconst_0\n-        64: putfield      #14                 // Field allowMethodChange:Z\n+        64: putfield      #42                 // Field allowMethodChange:Z\n         67: return\n       LineNumberTable:\n         line 134: 0\n         line 135: 5\n         line 137: 32\n         line 138: 39\n         line 139: 50\n@@ -460,17 +460,17 @@\n       throws java.util.zip.ZipException\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=3, locals=0, args_size=0\n-         0: new           #17                 // class org/apache/commons/compress/archivers/zip/ZipShort\n+         0: new           #54                 // class org/apache/commons/compress/archivers/zip/ZipShort\n          3: dup\n-         4: ldc           #28                 // int 41246\n-         6: invokespecial #19                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-         9: putstatic     #16                 // Field ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+         4: ldc           #81                 // int 41246\n+         6: invokespecial #56                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+         9: putstatic     #50                 // Field ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n         12: return\n       LineNumberTable:\n         line 43: 0\n }\n SourceFile: \"ResourceAlignmentExtraField.java\"\n"}]}
