{"diffoscope-json-version": 1, "source1": "first/ConfigurationDynaBean.class", "source2": "second/ConfigurationDynaBean.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,42 +1,46 @@\n \n package org.apache.commons.configuration2.beanutils;\n \n-import org.apache.commons.logging.LogFactory;\n import org.apache.commons.beanutils.DynaClass;\n import java.util.List;\n import org.apache.commons.configuration2.SubsetConfiguration;\n import java.lang.reflect.Array;\n import java.util.Collection;\n import java.util.Objects;\n import org.apache.commons.configuration2.Configuration;\n+import org.apache.commons.logging.LogFactory;\n import org.apache.commons.logging.Log;\n import org.apache.commons.beanutils.DynaBean;\n import org.apache.commons.configuration2.ConfigurationMap;\n \n public class ConfigurationDynaBean extends ConfigurationMap implements DynaBean\n {\n     private static final String PROPERTY_DELIMITER = \".\";\n     private static final Log LOG;\n     \n+    static {\n+        LOG = LogFactory.getLog((Class)ConfigurationDynaBean.class);\n+    }\n+    \n     public ConfigurationDynaBean(final Configuration configuration) {\n         super(configuration);\n         if (ConfigurationDynaBean.LOG.isTraceEnabled()) {\n             ConfigurationDynaBean.LOG.trace((Object)(\"ConfigurationDynaBean(\" + configuration + \")\"));\n         }\n     }\n     \n     public void set(final String name, final Object value) {\n         if (ConfigurationDynaBean.LOG.isTraceEnabled()) {\n             ConfigurationDynaBean.LOG.trace((Object)(\"set(\" + name + \",\" + value + \")\"));\n         }\n         Objects.requireNonNull(value, \"Error trying to set property to null.\");\n         if (value instanceof Collection) {\n             final Collection<?> collection = (Collection)value;\n-            collection.forEach(v -> this.getConfiguration().addProperty(name, v));\n+            collection.forEach(v -> this.getConfiguration().addProperty(s, v));\n         }\n         else if (value.getClass().isArray()) {\n             for (int length = Array.getLength(value), i = 0; i < length; ++i) {\n                 this.getConfiguration().addProperty(name, Array.get(value, i));\n             }\n         }\n         else {\n@@ -52,15 +56,15 @@\n         if (result == null) {\n             final Configuration subset = (Configuration)new SubsetConfiguration(this.getConfiguration(), name, \".\");\n             if (!subset.isEmpty()) {\n                 result = new ConfigurationDynaBean(subset);\n             }\n         }\n         if (ConfigurationDynaBean.LOG.isDebugEnabled()) {\n-            ConfigurationDynaBean.LOG.debug((Object)(name + \"=[\" + result + \"]\"));\n+            ConfigurationDynaBean.LOG.debug((Object)(String.valueOf(name) + \"=[\" + result + \"]\"));\n         }\n         if (result == null) {\n             throw new IllegalArgumentException(\"Property '\" + name + \"' does not exist.\");\n         }\n         return result;\n     }\n     \n@@ -112,22 +116,18 @@\n         }\n         else if (index == 0) {\n             this.getConfiguration().setProperty(name, value);\n         }\n     }\n     \n     public void set(final String name, final String key, final Object value) {\n-        this.getConfiguration().setProperty(name + \".\" + key, value);\n+        this.getConfiguration().setProperty(String.valueOf(name) + \".\" + key, value);\n     }\n     \n     private boolean checkIndexedProperty(final String name) {\n         final Object property = this.getConfiguration().getProperty(name);\n         if (property == null) {\n             throw new IllegalArgumentException(\"Property '\" + name + \"' does not exist.\");\n         }\n         return property instanceof List || property.getClass().isArray();\n     }\n-    \n-    static {\n-        LOG = LogFactory.getLog((Class)ConfigurationDynaBean.class);\n-    }\n }\n"}]}
