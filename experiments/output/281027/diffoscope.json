{"diffoscope-json-version": 1, "source1": "first/CopyDirectoryVisitor.class", "source2": "second/CopyDirectoryVisitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,44 +14,44 @@\n \n public class CopyDirectoryVisitor extends CountingPathVisitor\n {\n     private final CopyOption[] copyOptions;\n     private final Path sourceDirectory;\n     private final Path targetDirectory;\n     \n-    public CopyDirectoryVisitor(final Counters.PathCounters pathCounter, final Path sourceDirectory, final Path targetDirectory, final CopyOption... copyOptions) {\n-        super(pathCounter);\n+    public CopyDirectoryVisitor(final Counters.PathCounters pathCounters, final Path sourceDirectory, final Path targetDirectory, final CopyOption... array) {\n+        super(pathCounters);\n         this.sourceDirectory = sourceDirectory;\n         this.targetDirectory = targetDirectory;\n-        this.copyOptions = ((copyOptions == null) ? PathUtils.EMPTY_COPY_OPTIONS : ((CopyOption[])copyOptions.clone()));\n+        this.copyOptions = ((array == null) ? PathUtils.EMPTY_COPY_OPTIONS : ((CopyOption[])array.clone()));\n     }\n     \n-    public CopyDirectoryVisitor(final Counters.PathCounters pathCounter, final PathFilter fileFilter, final PathFilter dirFilter, final Path sourceDirectory, final Path targetDirectory, final CopyOption... copyOptions) {\n-        super(pathCounter, fileFilter, dirFilter);\n+    public CopyDirectoryVisitor(final Counters.PathCounters pathCounters, final PathFilter pathFilter, final PathFilter pathFilter2, final Path sourceDirectory, final Path targetDirectory, final CopyOption... array) {\n+        super(pathCounters, pathFilter, pathFilter2);\n         this.sourceDirectory = sourceDirectory;\n         this.targetDirectory = targetDirectory;\n-        this.copyOptions = ((copyOptions == null) ? PathUtils.EMPTY_COPY_OPTIONS : ((CopyOption[])copyOptions.clone()));\n+        this.copyOptions = ((array == null) ? PathUtils.EMPTY_COPY_OPTIONS : ((CopyOption[])array.clone()));\n     }\n     \n-    protected void copy(final Path sourceFile, final Path targetFile) throws IOException {\n-        Files.copy(sourceFile, targetFile, this.copyOptions);\n+    protected void copy(final Path source, final Path target) throws IOException {\n+        Files.copy(source, target, this.copyOptions);\n     }\n     \n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n             return true;\n         }\n-        if (!super.equals(obj)) {\n+        if (!super.equals(o)) {\n             return false;\n         }\n-        if (this.getClass() != obj.getClass()) {\n+        if (this.getClass() != o.getClass()) {\n             return false;\n         }\n-        final CopyDirectoryVisitor other = (CopyDirectoryVisitor)obj;\n-        return Arrays.equals(this.copyOptions, other.copyOptions) && Objects.equals(this.sourceDirectory, other.sourceDirectory) && Objects.equals(this.targetDirectory, other.targetDirectory);\n+        final CopyDirectoryVisitor copyDirectoryVisitor = (CopyDirectoryVisitor)o;\n+        return Arrays.equals(this.copyOptions, copyDirectoryVisitor.copyOptions) && Objects.equals(this.sourceDirectory, copyDirectoryVisitor.sourceDirectory) && Objects.equals(this.targetDirectory, copyDirectoryVisitor.targetDirectory);\n     }\n     \n     public CopyOption[] getCopyOptions() {\n         return this.copyOptions.clone();\n     }\n     \n     public Path getSourceDirectory() {\n@@ -59,32 +59,28 @@\n     }\n     \n     public Path getTargetDirectory() {\n         return this.targetDirectory;\n     }\n     \n     public int hashCode() {\n-        final int prime = 31;\n-        int result = super.hashCode();\n-        result = 31 * result + Arrays.hashCode(this.copyOptions);\n-        result = 31 * result + Objects.hash(this.sourceDirectory, this.targetDirectory);\n-        return result;\n+        return 31 * (31 * super.hashCode() + Arrays.hashCode(this.copyOptions)) + Objects.hash(this.sourceDirectory, this.targetDirectory);\n     }\n     \n-    public FileVisitResult preVisitDirectory(final Path directory, final BasicFileAttributes attributes) throws IOException {\n-        final Path newTargetDir = this.resolveRelativeAsString(directory);\n-        if (Files.notExists(newTargetDir, new LinkOption[0])) {\n-            Files.createDirectory(newTargetDir, (FileAttribute<?>[])new FileAttribute[0]);\n+    public FileVisitResult preVisitDirectory(final Path path, final BasicFileAttributes basicFileAttributes) throws IOException {\n+        final Path resolveRelativeAsString = this.resolveRelativeAsString(path);\n+        if (Files.notExists(resolveRelativeAsString, new LinkOption[0])) {\n+            Files.createDirectory(resolveRelativeAsString, (FileAttribute<?>[])new FileAttribute[0]);\n         }\n-        return super.preVisitDirectory(directory, attributes);\n+        return super.preVisitDirectory(path, basicFileAttributes);\n     }\n     \n-    private Path resolveRelativeAsString(final Path directory) {\n-        return this.targetDirectory.resolve(this.sourceDirectory.relativize(directory).toString());\n+    private Path resolveRelativeAsString(final Path path) {\n+        return this.targetDirectory.resolve(this.sourceDirectory.relativize(path).toString());\n     }\n     \n-    public FileVisitResult visitFile(final Path sourceFile, final BasicFileAttributes attributes) throws IOException {\n-        final Path targetFile = this.resolveRelativeAsString(sourceFile);\n-        this.copy(sourceFile, targetFile);\n-        return super.visitFile(targetFile, attributes);\n+    public FileVisitResult visitFile(final Path path, final BasicFileAttributes basicFileAttributes) throws IOException {\n+        final Path resolveRelativeAsString = this.resolveRelativeAsString(path);\n+        this.copy(path, resolveRelativeAsString);\n+        return super.visitFile(resolveRelativeAsString, basicFileAttributes);\n     }\n }\n"}]}
