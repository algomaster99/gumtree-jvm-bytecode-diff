{"diffoscope-json-version": 1, "source1": "first/VFSFileSystem.class", "source2": "second/VFSFileSystem.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,25 +1,23 @@\n \n package org.apache.commons.configuration2.io;\n \n-import java.io.IOException;\n-import java.lang.reflect.Method;\n import java.net.MalformedURLException;\n-import java.net.URLStreamHandler;\n import org.apache.commons.configuration2.ex.ConfigurationRuntimeException;\n+import java.net.URLStreamHandler;\n import java.io.File;\n import java.io.OutputStream;\n import java.util.Iterator;\n import org.apache.commons.vfs2.FileSystemConfigBuilder;\n import java.util.Map;\n+import org.apache.commons.vfs2.FileSystemOptions;\n import org.apache.commons.vfs2.VFS;\n import org.apache.commons.vfs2.FileSystemManager;\n import org.apache.commons.vfs2.FileContent;\n import org.apache.commons.vfs2.FileObject;\n-import org.apache.commons.vfs2.FileSystemOptions;\n import org.apache.commons.configuration2.ex.ConfigurationException;\n import java.io.InputStream;\n import java.net.URL;\n import org.apache.commons.vfs2.FileName;\n import org.apache.commons.vfs2.FileSystemException;\n import org.apache.commons.vfs2.provider.UriParser;\n import org.apache.commons.logging.LogFactory;\n@@ -29,214 +27,200 @@\n {\n     private final Log log;\n     \n     public VFSFileSystem() {\n         this.log = LogFactory.getLog((Class)this.getClass());\n     }\n     \n-    public String getBasePath(final String path) {\n-        if (UriParser.extractScheme(path) == null) {\n-            return super.getBasePath(path);\n+    public String getBasePath(final String s) {\n+        if (UriParser.extractScheme(s) == null) {\n+            return super.getBasePath(s);\n         }\n         try {\n-            final FileName parent = this.resolveURI(path).getParent();\n+            final FileName parent = this.resolveURI(s).getParent();\n             return (parent != null) ? parent.getURI() : null;\n         }\n-        catch (final FileSystemException fse) {\n-            fse.printStackTrace();\n+        catch (final FileSystemException ex) {\n+            ex.printStackTrace();\n             return null;\n         }\n     }\n     \n-    public String getFileName(final String path) {\n-        if (UriParser.extractScheme(path) == null) {\n-            return super.getFileName(path);\n+    public String getFileName(final String s) {\n+        if (UriParser.extractScheme(s) == null) {\n+            return super.getFileName(s);\n         }\n         try {\n-            return this.resolveURI(path).getBaseName();\n+            return this.resolveURI(s).getBaseName();\n         }\n-        catch (final FileSystemException fse) {\n-            fse.printStackTrace();\n+        catch (final FileSystemException ex) {\n+            ex.printStackTrace();\n             return null;\n         }\n     }\n     \n     public InputStream getInputStream(final URL url) throws ConfigurationException {\n         try {\n-            final FileSystemOptions opts = this.getOptions(url.getProtocol());\n-            final FileObject file = this.getManager().resolveFile(url.toString(), opts);\n-            if (!file.exists()) {\n+            final FileObject resolveFile = this.getManager().resolveFile(url.toString(), this.getOptions(url.getProtocol()));\n+            if (!resolveFile.exists()) {\n                 throw new ConfigurationException(\"File not found\");\n             }\n-            if (!file.isFile()) {\n+            if (!resolveFile.isFile()) {\n                 throw new ConfigurationException(\"Cannot load a configuration from a directory\");\n             }\n-            final FileContent content = file.getContent();\n+            final FileContent content = resolveFile.getContent();\n             if (content == null) {\n-                final String msg = \"Cannot access content of \" + file.getName().getFriendlyURI();\n-                throw new ConfigurationException(msg);\n+                throw new ConfigurationException(\"Cannot access content of \" + resolveFile.getName().getFriendlyURI());\n             }\n             return content.getInputStream();\n         }\n-        catch (final FileSystemException fse) {\n-            final String msg2 = \"Unable to access \" + url.toString();\n-            throw new ConfigurationException(msg2, (Throwable)fse);\n+        catch (final FileSystemException ex) {\n+            throw new ConfigurationException(\"Unable to access \" + url.toString(), (Throwable)ex);\n         }\n     }\n     \n     private FileSystemManager getManager() throws FileSystemException {\n         return VFS.getManager();\n     }\n     \n-    private FileSystemOptions getOptions(final String scheme) {\n-        if (scheme == null) {\n+    private FileSystemOptions getOptions(final String s) {\n+        if (s == null) {\n             return null;\n         }\n-        final FileSystemOptions opts = new FileSystemOptions();\n-        FileSystemConfigBuilder builder;\n+        final FileSystemOptions fileSystemOptions = new FileSystemOptions();\n+        FileSystemConfigBuilder fileSystemConfigBuilder;\n         try {\n-            builder = this.getManager().getFileSystemConfigBuilder(scheme);\n+            fileSystemConfigBuilder = this.getManager().getFileSystemConfigBuilder(s);\n         }\n         catch (final Exception ex) {\n             return null;\n         }\n-        final FileOptionsProvider provider = this.getFileOptionsProvider();\n-        if (provider != null) {\n-            final Map<String, Object> map = provider.getOptions();\n-            if (map == null) {\n+        final FileOptionsProvider fileOptionsProvider = this.getFileOptionsProvider();\n+        if (fileOptionsProvider != null) {\n+            final Map options = fileOptionsProvider.getOptions();\n+            if (options == null) {\n                 return null;\n             }\n-            int count = 0;\n-            for (final Map.Entry<String, Object> entry : map.entrySet()) {\n+            int n = 0;\n+            for (final Map.Entry entry : options.entrySet()) {\n                 try {\n-                    String key = (String)entry.getKey();\n-                    if (\"currentUser\".equals(key)) {\n-                        key = \"creatorName\";\n+                    String anObject = (String)entry.getKey();\n+                    if (\"currentUser\".equals(anObject)) {\n+                        anObject = \"creatorName\";\n                     }\n-                    this.setProperty(builder, opts, key, entry.getValue());\n-                    ++count;\n+                    this.setProperty(fileSystemConfigBuilder, fileSystemOptions, anObject, entry.getValue());\n+                    ++n;\n                 }\n                 catch (final Exception ex2) {}\n             }\n-            if (count > 0) {\n-                return opts;\n+            if (n > 0) {\n+                return fileSystemOptions;\n             }\n         }\n         return null;\n     }\n     \n     public OutputStream getOutputStream(final URL url) throws ConfigurationException {\n         try {\n-            final FileSystemOptions opts = this.getOptions(url.getProtocol());\n-            final FileObject file = this.getManager().resolveFile(url.toString(), opts);\n-            if (file == null || file.isFolder()) {\n+            final FileObject resolveFile = this.getManager().resolveFile(url.toString(), this.getOptions(url.getProtocol()));\n+            if (resolveFile == null || resolveFile.isFolder()) {\n                 throw new ConfigurationException(\"Cannot save a configuration to a directory\");\n             }\n-            final FileContent content = file.getContent();\n+            final FileContent content = resolveFile.getContent();\n             if (content == null) {\n                 throw new ConfigurationException(\"Cannot access content of \" + url);\n             }\n             return content.getOutputStream();\n         }\n-        catch (final FileSystemException fse) {\n-            throw new ConfigurationException(\"Unable to access \" + url, (Throwable)fse);\n+        catch (final FileSystemException ex) {\n+            throw new ConfigurationException(\"Unable to access \" + url, (Throwable)ex);\n         }\n     }\n     \n-    public String getPath(final File file, final URL url, final String basePath, final String fileName) {\n+    public String getPath(final File file, final URL url, final String s, final String s2) {\n         if (file != null) {\n-            return super.getPath(file, url, basePath, fileName);\n+            return super.getPath(file, url, s, s2);\n         }\n         try {\n             if (url != null) {\n-                final FileName name = this.resolveURI(url.toString());\n-                if (name != null) {\n-                    return name.toString();\n+                final FileName resolveURI = this.resolveURI(url.toString());\n+                if (resolveURI != null) {\n+                    return resolveURI.toString();\n                 }\n             }\n-            if (UriParser.extractScheme(fileName) != null) {\n-                return fileName;\n+            if (UriParser.extractScheme(s2) != null) {\n+                return s2;\n             }\n-            if (basePath != null) {\n-                final FileName base = this.resolveURI(basePath);\n-                return this.getManager().resolveName(base, fileName).getURI();\n+            if (s != null) {\n+                return this.getManager().resolveName(this.resolveURI(s), s2).getURI();\n             }\n-            final FileName name = this.resolveURI(fileName);\n-            final FileName base2 = name.getParent();\n-            return this.getManager().resolveName(base2, name.getBaseName()).getURI();\n+            final FileName resolveURI2 = this.resolveURI(s2);\n+            return this.getManager().resolveName(resolveURI2.getParent(), resolveURI2.getBaseName()).getURI();\n         }\n-        catch (final FileSystemException fse) {\n-            fse.printStackTrace();\n+        catch (final FileSystemException ex) {\n+            ex.printStackTrace();\n             return null;\n         }\n     }\n     \n-    public URL getURL(final String basePath, final String file) throws MalformedURLException {\n-        if ((basePath != null && UriParser.extractScheme(basePath) == null) || (basePath == null && UriParser.extractScheme(file) == null)) {\n-            return super.getURL(basePath, file);\n+    public URL getURL(final String str, final String str2) throws MalformedURLException {\n+        if ((str != null && UriParser.extractScheme(str) == null) || (str == null && UriParser.extractScheme(str2) == null)) {\n+            return super.getURL(str, str2);\n         }\n         try {\n-            FileName path;\n-            if (basePath != null && UriParser.extractScheme(file) == null) {\n-                final FileName base = this.resolveURI(basePath);\n-                path = this.getManager().resolveName(base, file);\n+            FileName fileName;\n+            if (str != null && UriParser.extractScheme(str2) == null) {\n+                fileName = this.getManager().resolveName(this.resolveURI(str), str2);\n             }\n             else {\n-                path = this.resolveURI(file);\n+                fileName = this.resolveURI(str2);\n             }\n-            final URLStreamHandler handler = (URLStreamHandler)new VFSFileSystem.VFSURLStreamHandler(path);\n-            return new URL(null, path.getURI(), handler);\n+            return new URL(null, fileName.getURI(), (URLStreamHandler)new VFSFileSystem.VFSURLStreamHandler(fileName));\n         }\n-        catch (final FileSystemException fse) {\n-            throw new ConfigurationRuntimeException(\"Could not parse basePath: \" + basePath + \" and fileName: \" + file, (Throwable)fse);\n+        catch (final FileSystemException ex) {\n+            throw new ConfigurationRuntimeException(\"Could not parse basePath: \" + str + \" and fileName: \" + str2, (Throwable)ex);\n         }\n     }\n     \n-    public URL locateFromURL(final String basePath, final String fileName) {\n-        final String fileScheme = UriParser.extractScheme(fileName);\n-        if ((basePath == null || UriParser.extractScheme(basePath) == null) && fileScheme == null) {\n-            return super.locateFromURL(basePath, fileName);\n+    public URL locateFromURL(final String s, final String s2) {\n+        final String scheme = UriParser.extractScheme(s2);\n+        if ((s == null || UriParser.extractScheme(s) == null) && scheme == null) {\n+            return super.locateFromURL(s, s2);\n         }\n         try {\n-            FileObject file;\n-            if (basePath != null && fileScheme == null) {\n-                final String scheme = UriParser.extractScheme(basePath);\n-                final FileSystemOptions opts = this.getOptions(scheme);\n-                FileObject base = this.getManager().resolveFile(basePath, opts);\n-                if (base.isFile()) {\n-                    base = base.getParent();\n+            FileObject fileObject2;\n+            if (s != null && scheme == null) {\n+                FileObject fileObject = this.getManager().resolveFile(s, this.getOptions(UriParser.extractScheme(s)));\n+                if (fileObject.isFile()) {\n+                    fileObject = fileObject.getParent();\n                 }\n-                file = this.getManager().resolveFile(base, fileName);\n+                fileObject2 = this.getManager().resolveFile(fileObject, s2);\n             }\n             else {\n-                final FileSystemOptions opts2 = this.getOptions(fileScheme);\n-                file = this.getManager().resolveFile(fileName, opts2);\n+                fileObject2 = this.getManager().resolveFile(s2, this.getOptions(scheme));\n             }\n-            if (!file.exists()) {\n+            if (!fileObject2.exists()) {\n                 return null;\n             }\n-            final FileName path = file.getName();\n-            final URLStreamHandler handler = (URLStreamHandler)new VFSFileSystem.VFSURLStreamHandler(path);\n-            return new URL(null, path.getURI(), handler);\n+            final FileName name = fileObject2.getName();\n+            return new URL(null, name.getURI(), (URLStreamHandler)new VFSFileSystem.VFSURLStreamHandler(name));\n         }\n-        catch (final FileSystemException | MalformedURLException fse) {\n+        catch (final FileSystemException | MalformedURLException ex) {\n             return null;\n         }\n     }\n     \n-    private FileName resolveURI(final String path) throws FileSystemException {\n-        return this.getManager().resolveURI(path);\n+    private FileName resolveURI(final String s) throws FileSystemException {\n+        return this.getManager().resolveURI(s);\n     }\n     \n-    private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options, final String key, final Object value) {\n-        final String methodName = \"set\" + key.substring(0, 1).toUpperCase() + key.substring(1);\n-        final Class<?>[] paramTypes = { FileSystemOptions.class, value.getClass() };\n+    private void setProperty(final FileSystemConfigBuilder obj, final FileSystemOptions fileSystemOptions, final String str, final Object o) {\n+        final String string = \"set\" + str.substring(0, 1).toUpperCase() + str.substring(1);\n+        final Class[] parameterTypes = { FileSystemOptions.class, o.getClass() };\n         try {\n-            final Method method = builder.getClass().getMethod(methodName, paramTypes);\n-            final Object[] params = { options, value };\n-            method.invoke(builder, params);\n+            obj.getClass().getMethod(string, (Class<?>[])parameterTypes).invoke(obj, fileSystemOptions, o);\n         }\n         catch (final Exception ex) {\n-            this.log.warn((Object)(\"Cannot access property '\" + key + \"'! Ignoring.\"), (Throwable)ex);\n+            this.log.warn((Object)(\"Cannot access property '\" + str + \"'! Ignoring.\"), (Throwable)ex);\n         }\n     }\n }\n"}]}
