{"diffoscope-json-version": 1, "source1": "first/CharSequenceUtils.class", "source2": "second/CharSequenceUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,124 +1,124 @@\n \n package org.apache.commons.lang3;\n \n public class CharSequenceUtils\n {\n     private static final int NOT_FOUND = -1;\n     \n-    public static CharSequence subSequence(final CharSequence cs, final int start) {\n-        return (cs == null) ? null : cs.subSequence(start, cs.length());\n+    public static CharSequence subSequence(final CharSequence charSequence, final int n) {\n+        return (charSequence == null) ? null : charSequence.subSequence(n, charSequence.length());\n     }\n     \n-    static int indexOf(final CharSequence cs, final int searchChar, int start) {\n-        if (cs instanceof String) {\n-            return ((String)cs).indexOf(searchChar, start);\n+    static int indexOf(final CharSequence charSequence, final int n, int fromIndex) {\n+        if (charSequence instanceof String) {\n+            return ((String)charSequence).indexOf(n, fromIndex);\n         }\n-        final int sz = cs.length();\n-        if (start < 0) {\n-            start = 0;\n+        final int length = charSequence.length();\n+        if (fromIndex < 0) {\n+            fromIndex = 0;\n         }\n-        if (searchChar < 65536) {\n-            for (int i = start; i < sz; ++i) {\n-                if (cs.charAt(i) == searchChar) {\n+        if (n < 65536) {\n+            for (int i = fromIndex; i < length; ++i) {\n+                if (charSequence.charAt(i) == n) {\n                     return i;\n                 }\n             }\n         }\n-        if (searchChar <= 1114111) {\n-            final char[] chars = Character.toChars(searchChar);\n-            for (int j = start; j < sz - 1; ++j) {\n-                final char high = cs.charAt(j);\n-                final char low = cs.charAt(j + 1);\n-                if (high == chars[0] && low == chars[1]) {\n+        if (n <= 1114111) {\n+            final char[] chars = Character.toChars(n);\n+            for (int j = fromIndex; j < length - 1; ++j) {\n+                final char char1 = charSequence.charAt(j);\n+                final char char2 = charSequence.charAt(j + 1);\n+                if (char1 == chars[0] && char2 == chars[1]) {\n                     return j;\n                 }\n             }\n         }\n         return -1;\n     }\n     \n-    static int indexOf(final CharSequence cs, final CharSequence searchChar, final int start) {\n-        return cs.toString().indexOf(searchChar.toString(), start);\n+    static int indexOf(final CharSequence charSequence, final CharSequence charSequence2, final int fromIndex) {\n+        return charSequence.toString().indexOf(charSequence2.toString(), fromIndex);\n     }\n     \n-    static int lastIndexOf(final CharSequence cs, final int searchChar, int start) {\n-        if (cs instanceof String) {\n-            return ((String)cs).lastIndexOf(searchChar, start);\n+    static int lastIndexOf(final CharSequence charSequence, final int n, int fromIndex) {\n+        if (charSequence instanceof String) {\n+            return ((String)charSequence).lastIndexOf(n, fromIndex);\n         }\n-        final int sz = cs.length();\n-        if (start < 0) {\n+        final int length = charSequence.length();\n+        if (fromIndex < 0) {\n             return -1;\n         }\n-        if (start >= sz) {\n-            start = sz - 1;\n+        if (fromIndex >= length) {\n+            fromIndex = length - 1;\n         }\n-        if (searchChar < 65536) {\n-            for (int i = start; i >= 0; --i) {\n-                if (cs.charAt(i) == searchChar) {\n+        if (n < 65536) {\n+            for (int i = fromIndex; i >= 0; --i) {\n+                if (charSequence.charAt(i) == n) {\n                     return i;\n                 }\n             }\n         }\n-        if (searchChar <= 1114111) {\n-            final char[] chars = Character.toChars(searchChar);\n-            if (start == sz - 1) {\n+        if (n <= 1114111) {\n+            final char[] chars = Character.toChars(n);\n+            if (fromIndex == length - 1) {\n                 return -1;\n             }\n-            for (int j = start; j >= 0; --j) {\n-                final char high = cs.charAt(j);\n-                final char low = cs.charAt(j + 1);\n-                if (chars[0] == high && chars[1] == low) {\n+            for (int j = fromIndex; j >= 0; --j) {\n+                final char char1 = charSequence.charAt(j);\n+                final char char2 = charSequence.charAt(j + 1);\n+                if (chars[0] == char1 && chars[1] == char2) {\n                     return j;\n                 }\n             }\n         }\n         return -1;\n     }\n     \n-    static int lastIndexOf(final CharSequence cs, final CharSequence searchChar, final int start) {\n-        return cs.toString().lastIndexOf(searchChar.toString(), start);\n+    static int lastIndexOf(final CharSequence charSequence, final CharSequence charSequence2, final int fromIndex) {\n+        return charSequence.toString().lastIndexOf(charSequence2.toString(), fromIndex);\n     }\n     \n-    static char[] toCharArray(final CharSequence cs) {\n-        if (cs instanceof String) {\n-            return ((String)cs).toCharArray();\n-        }\n-        final int sz = cs.length();\n-        final char[] array = new char[cs.length()];\n-        for (int i = 0; i < sz; ++i) {\n-            array[i] = cs.charAt(i);\n+    static char[] toCharArray(final CharSequence charSequence) {\n+        if (charSequence instanceof String) {\n+            return ((String)charSequence).toCharArray();\n+        }\n+        final int length = charSequence.length();\n+        final char[] array = new char[charSequence.length()];\n+        for (int i = 0; i < length; ++i) {\n+            array[i] = charSequence.charAt(i);\n         }\n         return array;\n     }\n     \n-    static boolean regionMatches(final CharSequence cs, final boolean ignoreCase, final int thisStart, final CharSequence substring, final int start, final int length) {\n-        if (cs instanceof String && substring instanceof String) {\n-            return ((String)cs).regionMatches(ignoreCase, thisStart, (String)substring, start, length);\n-        }\n-        int index1 = thisStart;\n-        int index2 = start;\n-        int tmpLen = length;\n-        final int srcLen = cs.length() - thisStart;\n-        final int otherLen = substring.length() - start;\n-        if (thisStart < 0 || start < 0 || length < 0) {\n+    static boolean regionMatches(final CharSequence charSequence, final boolean ignoreCase, final int toffset, final CharSequence charSequence2, final int ooffset, final int len) {\n+        if (charSequence instanceof String && charSequence2 instanceof String) {\n+            return ((String)charSequence).regionMatches(ignoreCase, toffset, (String)charSequence2, ooffset, len);\n+        }\n+        int n = toffset;\n+        int n2 = ooffset;\n+        int n3 = len;\n+        final int n4 = charSequence.length() - toffset;\n+        final int n5 = charSequence2.length() - ooffset;\n+        if (toffset < 0 || ooffset < 0 || len < 0) {\n             return false;\n         }\n-        if (srcLen < length || otherLen < length) {\n+        if (n4 < len || n5 < len) {\n             return false;\n         }\n-        while (tmpLen-- > 0) {\n-            final char c1 = cs.charAt(index1++);\n-            final char c2 = substring.charAt(index2++);\n-            if (c1 == c2) {\n+        while (n3-- > 0) {\n+            final char char1 = charSequence.charAt(n++);\n+            final char char2 = charSequence2.charAt(n2++);\n+            if (char1 == char2) {\n                 continue;\n             }\n             if (!ignoreCase) {\n                 return false;\n             }\n-            if (Character.toUpperCase(c1) != Character.toUpperCase(c2) && Character.toLowerCase(c1) != Character.toLowerCase(c2)) {\n+            if (Character.toUpperCase(char1) != Character.toUpperCase(char2) && Character.toLowerCase(char1) != Character.toLowerCase(char2)) {\n                 return false;\n             }\n         }\n         return true;\n     }\n }\n"}]}
