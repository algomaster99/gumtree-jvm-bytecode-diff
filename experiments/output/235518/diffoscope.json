{"diffoscope-json-version": 1, "source1": "first/FilterCollectionWriter.class", "source2": "second/FilterCollectionWriter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,76 +13,76 @@\n import java.io.Writer;\n \n public class FilterCollectionWriter extends Writer\n {\n     protected final Collection<Writer> EMPTY_WRITERS;\n     protected final Collection<Writer> writers;\n     \n-    protected FilterCollectionWriter(final Collection<Writer> writers) {\n+    protected FilterCollectionWriter(final Collection<Writer> collection) {\n         this.EMPTY_WRITERS = (Collection<Writer>)Collections.emptyList();\n-        this.writers = ((writers == null) ? this.EMPTY_WRITERS : writers);\n+        this.writers = ((collection == null) ? this.EMPTY_WRITERS : collection);\n     }\n     \n-    protected FilterCollectionWriter(final Writer... writers) {\n+    protected FilterCollectionWriter(final Writer... a) {\n         this.EMPTY_WRITERS = (Collection<Writer>)Collections.emptyList();\n-        this.writers = ((writers == null) ? this.EMPTY_WRITERS : Arrays.asList(writers));\n+        this.writers = ((a == null) ? this.EMPTY_WRITERS : Arrays.asList(a));\n     }\n     \n     @Override\n     public Writer append(final char c) throws IOException {\n-        return this.forAllWriters((IOConsumer<Writer>)(w -> w.append(c)));\n+        return this.forAllWriters((IOConsumer<Writer>)(writer -> writer.append(c)));\n     }\n     \n     @Override\n-    public Writer append(final CharSequence csq) throws IOException {\n-        return this.forAllWriters((IOConsumer<Writer>)(w -> w.append(csq)));\n+    public Writer append(final CharSequence charSequence) throws IOException {\n+        return this.forAllWriters((IOConsumer<Writer>)(writer -> writer.append(charSequence)));\n     }\n     \n     @Override\n-    public Writer append(final CharSequence csq, final int start, final int end) throws IOException {\n-        return this.forAllWriters((IOConsumer<Writer>)(w -> w.append(csq, start, end)));\n+    public Writer append(final CharSequence charSequence, final int n, final int n2) throws IOException {\n+        return this.forAllWriters((IOConsumer<Writer>)(writer -> writer.append(charSequence, n, n2)));\n     }\n     \n     @Override\n     public void close() throws IOException {\n         this.forAllWriters((IOConsumer<Writer>)Writer::close);\n     }\n     \n     @Override\n     public void flush() throws IOException {\n         this.forAllWriters((IOConsumer<Writer>)Writer::flush);\n     }\n     \n-    private FilterCollectionWriter forAllWriters(final IOConsumer<Writer> action) throws IOExceptionList {\n-        IOConsumer.forAll((IOConsumer)action, (Stream)this.writers());\n+    private FilterCollectionWriter forAllWriters(final IOConsumer<Writer> ioConsumer) throws IOExceptionList {\n+        IOConsumer.forAll((IOConsumer)ioConsumer, (Stream)this.writers());\n         return this;\n     }\n     \n     @Override\n-    public void write(final char[] cbuf) throws IOException {\n-        this.forAllWriters((IOConsumer<Writer>)(w -> w.write(cbuf)));\n+    public void write(final char[] array) throws IOException {\n+        this.forAllWriters((IOConsumer<Writer>)(writer -> writer.write(array)));\n     }\n     \n     @Override\n-    public void write(final char[] cbuf, final int off, final int len) throws IOException {\n-        this.forAllWriters((IOConsumer<Writer>)(w -> w.write(cbuf, off, len)));\n+    public void write(final char[] array, final int n, final int n2) throws IOException {\n+        this.forAllWriters((IOConsumer<Writer>)(writer -> writer.write(array, n, n2)));\n     }\n     \n     @Override\n-    public void write(final int c) throws IOException {\n-        this.forAllWriters((IOConsumer<Writer>)(w -> w.write(c)));\n+    public void write(final int n) throws IOException {\n+        this.forAllWriters((IOConsumer<Writer>)(writer -> writer.write(n)));\n     }\n     \n     @Override\n-    public void write(final String str) throws IOException {\n-        this.forAllWriters((IOConsumer<Writer>)(w -> w.write(str)));\n+    public void write(final String s) throws IOException {\n+        this.forAllWriters((IOConsumer<Writer>)(writer -> writer.write(s)));\n     }\n     \n     @Override\n-    public void write(final String str, final int off, final int len) throws IOException {\n-        this.forAllWriters((IOConsumer<Writer>)(w -> w.write(str, off, len)));\n+    public void write(final String s, final int n, final int n2) throws IOException {\n+        this.forAllWriters((IOConsumer<Writer>)(writer -> writer.write(s, n, n2)));\n     }\n     \n     private Stream<Writer> writers() {\n         return this.writers.stream().filter(Objects::nonNull);\n     }\n }\n"}]}
