{"diffoscope-json-version": 1, "source1": "first/JavadocTagInfo.class", "source2": "second/JavadocTagInfo.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -35,17 +35,17 @@\n     private static final BitSet DEF_TOKEN_TYPES;\n     private static final Map<String, JavadocTagInfo> TEXT_TO_TAG;\n     private static final Map<String, JavadocTagInfo> NAME_TO_TAG;\n     private final String text;\n     private final String name;\n     private final JavadocTagInfo.Type type;\n     \n-    private JavadocTagInfo(final String text, final String name, final JavadocTagInfo.Type type) {\n+    private JavadocTagInfo(final String text, final String name2, final JavadocTagInfo.Type type) {\n         this.text = text;\n-        this.name = name;\n+        this.name = name2;\n         this.type = type;\n     }\n     \n     public abstract boolean isValidOn(final DetailAST p0);\n     \n     public String getText() {\n         return this.text;\n@@ -55,38 +55,38 @@\n         return this.name;\n     }\n     \n     public JavadocTagInfo.Type getType() {\n         return this.type;\n     }\n     \n-    public static JavadocTagInfo fromText(final String text) {\n-        if (text == null) {\n+    public static JavadocTagInfo fromText(final String s) {\n+        if (s == null) {\n             throw new IllegalArgumentException(\"the text is null\");\n         }\n-        final JavadocTagInfo tag = (JavadocTagInfo)JavadocTagInfo.TEXT_TO_TAG.get(text);\n-        if (tag == null) {\n-            throw new IllegalArgumentException(\"the text [\" + text + \"] is not a valid Javadoc tag text\");\n+        final JavadocTagInfo javadocTagInfo = (JavadocTagInfo)JavadocTagInfo.TEXT_TO_TAG.get(s);\n+        if (javadocTagInfo == null) {\n+            throw new IllegalArgumentException(\"the text [\" + s + \"] is not a valid Javadoc tag text\");\n         }\n-        return tag;\n+        return javadocTagInfo;\n     }\n     \n-    public static JavadocTagInfo fromName(final String name) {\n-        if (name == null) {\n+    public static JavadocTagInfo fromName(final String s) {\n+        if (s == null) {\n             throw new IllegalArgumentException(\"the name is null\");\n         }\n-        final JavadocTagInfo tag = (JavadocTagInfo)JavadocTagInfo.NAME_TO_TAG.get(name);\n-        if (tag == null) {\n-            throw new IllegalArgumentException(\"the name [\" + name + \"] is not a valid Javadoc tag name\");\n+        final JavadocTagInfo javadocTagInfo = (JavadocTagInfo)JavadocTagInfo.NAME_TO_TAG.get(s);\n+        if (javadocTagInfo == null) {\n+            throw new IllegalArgumentException(\"the name [\" + s + \"] is not a valid Javadoc tag name\");\n         }\n-        return tag;\n+        return javadocTagInfo;\n     }\n     \n-    public static boolean isValidName(final String name) {\n-        return JavadocTagInfo.NAME_TO_TAG.containsKey(name);\n+    public static boolean isValidName(final String s) {\n+        return JavadocTagInfo.NAME_TO_TAG.containsKey(s);\n     }\n     \n     @Override\n     public String toString() {\n         return \"text [\" + this.text + \"] name [\" + this.name + \"] type [\" + this.type;\n     }\n     \n"}]}
