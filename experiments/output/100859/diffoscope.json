{"diffoscope-json-version": 1, "source1": "first/AnnotationUseStyleCheck.class", "source2": "second/AnnotationUseStyleCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -38,15 +38,15 @@\n     }\n     \n     private static <T extends Enum<T>> T getOption(final Class<T> enumClass, final String value) {\n         try {\n             return Enum.valueOf(enumClass, value.trim().toUpperCase(Locale.ENGLISH));\n         }\n         catch (final IllegalArgumentException iae) {\n-            throw new IllegalArgumentException(\"unable to parse \" + value, (Throwable)iae);\n+            throw new IllegalArgumentException(\"unable to parse \" + value, iae);\n         }\n     }\n     \n     public int[] getDefaultTokens() {\n         return this.getRequiredTokens();\n     }\n     \n@@ -61,24 +61,24 @@\n     public void visitToken(final DetailAST ast) {\n         this.checkStyleType(ast);\n         this.checkCheckClosingParensOption(ast);\n         this.checkTrailingComma(ast);\n     }\n     \n     private void checkStyleType(final DetailAST annotation) {\n-        switch (AnnotationUseStyleCheck.AnnotationUseStyleCheck$1.$SwitchMap$com$puppycrawl$tools$checkstyle$checks$annotation$AnnotationUseStyleCheck$ElementStyleOption[this.elementStyle.ordinal()]) {\n-            case 1: {\n+        switch (this.elementStyle) {\n+            case COMPACT_NO_ARRAY: {\n                 this.checkCompactNoArrayStyle(annotation);\n                 break;\n             }\n-            case 2: {\n+            case COMPACT: {\n                 this.checkCompactStyle(annotation);\n                 break;\n             }\n-            case 3: {\n+            case EXPANDED: {\n                 this.checkExpandedStyle(annotation);\n                 break;\n             }\n         }\n     }\n     \n     private void checkExpandedStyle(final DetailAST annotation) {\n"}]}
