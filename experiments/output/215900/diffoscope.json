{"diffoscope-json-version": 1, "source1": "first/ParameterAnnotationEntry.class", "source2": "second/ParameterAnnotationEntry.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,50 +1,49 @@\n \n package org.apache.bcel.classfile;\n \n import java.io.DataOutputStream;\n import java.io.IOException;\n import java.io.DataInput;\n-import java.util.List;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.ArrayList;\n \n public class ParameterAnnotationEntry implements Node\n {\n     static final ParameterAnnotationEntry[] EMPTY_ARRAY;\n     private final AnnotationEntry[] annotationTable;\n     \n-    public static ParameterAnnotationEntry[] createParameterAnnotationEntries(final Attribute[] attrs) {\n-        final List<ParameterAnnotationEntry> accumulatedAnnotations = new ArrayList<ParameterAnnotationEntry>(attrs.length);\n-        for (final Attribute attribute : attrs) {\n+    public static ParameterAnnotationEntry[] createParameterAnnotationEntries(final Attribute[] array) {\n+        final ArrayList c = new ArrayList(array.length);\n+        for (final Attribute attribute : array) {\n             if (attribute instanceof ParameterAnnotations) {\n-                final ParameterAnnotations runtimeAnnotations = (ParameterAnnotations)attribute;\n-                Collections.addAll(accumulatedAnnotations, runtimeAnnotations.getParameterAnnotationEntries());\n+                Collections.addAll(c, ((ParameterAnnotations)attribute).getParameterAnnotationEntries());\n             }\n         }\n-        return accumulatedAnnotations.toArray(ParameterAnnotationEntry.EMPTY_ARRAY);\n+        return (ParameterAnnotationEntry[])c.toArray(ParameterAnnotationEntry.EMPTY_ARRAY);\n     }\n     \n-    ParameterAnnotationEntry(final DataInput input, final ConstantPool constant_pool) throws IOException {\n-        final int annotation_table_length = input.readUnsignedShort();\n-        this.annotationTable = new AnnotationEntry[annotation_table_length];\n-        for (int i = 0; i < annotation_table_length; ++i) {\n-            this.annotationTable[i] = AnnotationEntry.read(input, constant_pool, false);\n+    ParameterAnnotationEntry(final DataInput dataInput, final ConstantPool constantPool) throws IOException {\n+        final int unsignedShort = dataInput.readUnsignedShort();\n+        this.annotationTable = new AnnotationEntry[unsignedShort];\n+        for (int i = 0; i < unsignedShort; ++i) {\n+            this.annotationTable[i] = AnnotationEntry.read(dataInput, constantPool, false);\n         }\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitParameterAnnotationEntry(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitParameterAnnotationEntry(this);\n     }\n     \n-    public void dump(final DataOutputStream dos) throws IOException {\n-        dos.writeShort(this.annotationTable.length);\n-        for (final AnnotationEntry entry : this.annotationTable) {\n-            entry.dump(dos);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.annotationTable.length);\n+        final AnnotationEntry[] annotationTable = this.annotationTable;\n+        for (int length = annotationTable.length, i = 0; i < length; ++i) {\n+            annotationTable[i].dump(dataOutputStream);\n         }\n     }\n     \n     public AnnotationEntry[] getAnnotationEntries() {\n         return this.annotationTable;\n     }\n     \n"}]}
