{"diffoscope-json-version": 1, "source1": "first/ConfigurationInterpolator.class", "source2": "second/ConfigurationInterpolator.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -30,60 +30,60 @@\n     \n     public ConfigurationInterpolator() {\n         this.prefixLookups = new ConcurrentHashMap<String, Lookup>();\n         this.defaultLookups = new CopyOnWriteArrayList<Lookup>();\n         this.substitutor = this.initSubstitutor();\n     }\n     \n-    private static ConfigurationInterpolator createInterpolator(final InterpolatorSpecification spec) {\n-        final ConfigurationInterpolator ci = new ConfigurationInterpolator();\n-        ci.addDefaultLookups(spec.getDefaultLookups());\n-        ci.registerLookups(spec.getPrefixLookups());\n-        ci.setParentInterpolator(spec.getParentInterpolator());\n-        return ci;\n+    private static ConfigurationInterpolator createInterpolator(final InterpolatorSpecification interpolatorSpecification) {\n+        final ConfigurationInterpolator configurationInterpolator = new ConfigurationInterpolator();\n+        configurationInterpolator.addDefaultLookups(interpolatorSpecification.getDefaultLookups());\n+        configurationInterpolator.registerLookups(interpolatorSpecification.getPrefixLookups());\n+        configurationInterpolator.setParentInterpolator(interpolatorSpecification.getParentInterpolator());\n+        return configurationInterpolator;\n     }\n     \n-    private static String extractVariableName(final String strValue) {\n-        return strValue.substring(ConfigurationInterpolator.VAR_START_LENGTH, strValue.length() - ConfigurationInterpolator.VAR_END_LENGTH);\n+    private static String extractVariableName(final String s) {\n+        return s.substring(ConfigurationInterpolator.VAR_START_LENGTH, s.length() - ConfigurationInterpolator.VAR_END_LENGTH);\n     }\n     \n-    public static ConfigurationInterpolator fromSpecification(final InterpolatorSpecification spec) {\n-        if (spec == null) {\n+    public static ConfigurationInterpolator fromSpecification(final InterpolatorSpecification interpolatorSpecification) {\n+        if (interpolatorSpecification == null) {\n             throw new IllegalArgumentException(\"InterpolatorSpecification must not be null!\");\n         }\n-        return (spec.getInterpolator() != null) ? spec.getInterpolator() : createInterpolator(spec);\n+        return (interpolatorSpecification.getInterpolator() != null) ? interpolatorSpecification.getInterpolator() : createInterpolator(interpolatorSpecification);\n     }\n     \n     public static Map<String, Lookup> getDefaultPrefixLookups() {\n         return ConfigurationInterpolator.DEFAULT_PREFIX_LOOKUPS;\n     }\n     \n-    public static Lookup nullSafeLookup(Lookup lookup) {\n-        if (lookup == null) {\n-            lookup = (Lookup)DummyLookup.INSTANCE;\n+    public static Lookup nullSafeLookup(Lookup instance) {\n+        if (instance == null) {\n+            instance = (Lookup)DummyLookup.INSTANCE;\n         }\n-        return lookup;\n+        return instance;\n     }\n     \n-    public void addDefaultLookup(final Lookup defaultLookup) {\n-        this.defaultLookups.add(defaultLookup);\n+    public void addDefaultLookup(final Lookup lookup) {\n+        this.defaultLookups.add(lookup);\n     }\n     \n-    public void addDefaultLookups(final Collection<? extends Lookup> lookups) {\n-        if (lookups != null) {\n-            this.defaultLookups.addAll(lookups);\n+    public void addDefaultLookups(final Collection<? extends Lookup> collection) {\n+        if (collection != null) {\n+            this.defaultLookups.addAll(collection);\n         }\n     }\n     \n-    public boolean deregisterLookup(final String prefix) {\n-        return this.prefixLookups.remove(prefix) != null;\n+    public boolean deregisterLookup(final String s) {\n+        return this.prefixLookups.remove(s) != null;\n     }\n     \n-    protected Lookup fetchLookupForPrefix(final String prefix) {\n-        return nullSafeLookup(this.prefixLookups.get(prefix));\n+    protected Lookup fetchLookupForPrefix(final String s) {\n+        return nullSafeLookup(this.prefixLookups.get(s));\n     }\n     \n     public List<Lookup> getDefaultLookups() {\n         return new ArrayList<Lookup>(this.defaultLookups);\n     }\n     \n     public Map<String, Lookup> getLookups() {\n@@ -91,107 +91,105 @@\n     }\n     \n     public ConfigurationInterpolator getParentInterpolator() {\n         return this.parentInterpolator;\n     }\n     \n     private StringSubstitutor initSubstitutor() {\n-        return new StringSubstitutor(key -> Objects.toString(this.resolve(key), null));\n+        return new StringSubstitutor(s -> Objects.toString(this.resolve(s), null));\n     }\n     \n-    public Object interpolate(final Object value) {\n-        if (value instanceof String) {\n-            final String strValue = (String)value;\n-            if (this.looksLikeSingleVariable(strValue)) {\n-                final Object resolvedValue = this.resolveSingleVariable(strValue);\n-                if (resolvedValue != null && !(resolvedValue instanceof String)) {\n-                    return resolvedValue;\n+    public Object interpolate(final Object o) {\n+        if (o instanceof String) {\n+            final String s = (String)o;\n+            if (this.looksLikeSingleVariable(s)) {\n+                final Object resolveSingleVariable = this.resolveSingleVariable(s);\n+                if (resolveSingleVariable != null && !(resolveSingleVariable instanceof String)) {\n+                    return resolveSingleVariable;\n                 }\n             }\n-            return this.substitutor.replace(strValue);\n+            return this.substitutor.replace(s);\n         }\n-        return value;\n+        return o;\n     }\n     \n     public boolean isEnableSubstitutionInVariables() {\n         return this.substitutor.isEnableSubstitutionInVariables();\n     }\n     \n-    private boolean looksLikeSingleVariable(final String strValue) {\n-        return strValue.startsWith(\"${\") && strValue.endsWith(\"}\");\n+    private boolean looksLikeSingleVariable(final String s) {\n+        return s.startsWith(\"${\") && s.endsWith(\"}\");\n     }\n     \n     public Set<String> prefixSet() {\n         return Collections.unmodifiableSet((Set<? extends String>)this.prefixLookups.keySet());\n     }\n     \n-    public void registerLookup(final String prefix, final Lookup lookup) {\n-        if (prefix == null) {\n+    public void registerLookup(final String s, final Lookup lookup) {\n+        if (s == null) {\n             throw new IllegalArgumentException(\"Prefix for lookup object must not be null!\");\n         }\n         if (lookup == null) {\n             throw new IllegalArgumentException(\"Lookup object must not be null!\");\n         }\n-        this.prefixLookups.put(prefix, lookup);\n+        this.prefixLookups.put(s, lookup);\n     }\n     \n-    public void registerLookups(final Map<String, ? extends Lookup> lookups) {\n-        if (lookups != null) {\n-            this.prefixLookups.putAll(lookups);\n+    public void registerLookups(final Map<String, ? extends Lookup> map) {\n+        if (map != null) {\n+            this.prefixLookups.putAll(map);\n         }\n     }\n     \n     public boolean removeDefaultLookup(final Lookup lookup) {\n         return this.defaultLookups.remove(lookup);\n     }\n     \n-    public Object resolve(final String var) {\n-        if (var == null) {\n+    public Object resolve(final String s) {\n+        if (s == null) {\n             return null;\n         }\n-        final int prefixPos = var.indexOf(58);\n-        if (prefixPos >= 0) {\n-            final String prefix = var.substring(0, prefixPos);\n-            final String name = var.substring(prefixPos + 1);\n-            final Object value = this.fetchLookupForPrefix(prefix).lookup(name);\n-            if (value != null) {\n-                return value;\n+        final int index = s.indexOf(58);\n+        if (index >= 0) {\n+            final Object lookup = this.fetchLookupForPrefix(s.substring(0, index)).lookup(s.substring(index + 1));\n+            if (lookup != null) {\n+                return lookup;\n             }\n         }\n-        for (final Lookup lookup : this.defaultLookups) {\n-            final Object value = lookup.lookup(var);\n-            if (value != null) {\n-                return value;\n+        final Iterator<Lookup> iterator = this.defaultLookups.iterator();\n+        while (iterator.hasNext()) {\n+            final Object lookup2 = ((Lookup)iterator.next()).lookup(s);\n+            if (lookup2 != null) {\n+                return lookup2;\n             }\n         }\n-        final ConfigurationInterpolator parent = this.getParentInterpolator();\n-        if (parent != null) {\n-            return this.getParentInterpolator().resolve(var);\n+        if (this.getParentInterpolator() != null) {\n+            return this.getParentInterpolator().resolve(s);\n         }\n         return null;\n     }\n     \n-    private Object resolveSingleVariable(final String strValue) {\n-        return this.resolve(extractVariableName(strValue));\n+    private Object resolveSingleVariable(final String s) {\n+        return this.resolve(extractVariableName(s));\n     }\n     \n-    public void setEnableSubstitutionInVariables(final boolean f) {\n-        this.substitutor.setEnableSubstitutionInVariables(f);\n+    public void setEnableSubstitutionInVariables(final boolean enableSubstitutionInVariables) {\n+        this.substitutor.setEnableSubstitutionInVariables(enableSubstitutionInVariables);\n     }\n     \n     public void setParentInterpolator(final ConfigurationInterpolator parentInterpolator) {\n         this.parentInterpolator = parentInterpolator;\n     }\n     \n     static {\n         VAR_START_LENGTH = \"${\".length();\n         VAR_END_LENGTH = \"}\".length();\n-        final Map<String, Lookup> lookups = new HashMap<String, Lookup>();\n-        for (final DefaultLookups lookup : DefaultLookups.values()) {\n-            lookups.put(lookup.getPrefix(), lookup.getLookup());\n+        final HashMap m = new HashMap();\n+        for (final DefaultLookups defaultLookups : DefaultLookups.values()) {\n+            m.put(defaultLookups.getPrefix(), defaultLookups.getLookup());\n         }\n-        for (final DefaultStringLookup lookup2 : DefaultStringLookup.values()) {\n-            lookups.putIfAbsent(lookup2.getKey(), (Lookup)new StringLookupAdapter(lookup2.getStringLookup()));\n+        for (final DefaultStringLookup defaultStringLookup : DefaultStringLookup.values()) {\n+            m.putIfAbsent(defaultStringLookup.getKey(), new StringLookupAdapter(defaultStringLookup.getStringLookup()));\n         }\n-        DEFAULT_PREFIX_LOOKUPS = Collections.unmodifiableMap((Map<? extends String, ? extends Lookup>)lookups);\n+        DEFAULT_PREFIX_LOOKUPS = Collections.unmodifiableMap((Map<?, ?>)m);\n     }\n }\n"}]}
