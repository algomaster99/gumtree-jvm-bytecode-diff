{"diffoscope-json-version": 1, "source1": "first/NumberUtils.class", "source2": "second/NumberUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -26,804 +26,803 @@\n     public static final Double DOUBLE_ZERO;\n     public static final Double DOUBLE_ONE;\n     public static final Double DOUBLE_MINUS_ONE;\n     public static final Float FLOAT_ZERO;\n     public static final Float FLOAT_ONE;\n     public static final Float FLOAT_MINUS_ONE;\n     \n-    public static int toInt(final String str) {\n-        return toInt(str, 0);\n+    public static int toInt(final String s) {\n+        return toInt(s, 0);\n     }\n     \n-    public static int toInt(final String str, final int defaultValue) {\n-        if (str == null) {\n-            return defaultValue;\n+    public static int toInt(final String s, final int n) {\n+        if (s == null) {\n+            return n;\n         }\n         try {\n-            return Integer.parseInt(str);\n+            return Integer.parseInt(s);\n         }\n-        catch (final NumberFormatException nfe) {\n-            return defaultValue;\n+        catch (final NumberFormatException ex) {\n+            return n;\n         }\n     }\n     \n-    public static long toLong(final String str) {\n-        return toLong(str, 0L);\n+    public static long toLong(final String s) {\n+        return toLong(s, 0L);\n     }\n     \n-    public static long toLong(final String str, final long defaultValue) {\n-        if (str == null) {\n-            return defaultValue;\n+    public static long toLong(final String s, final long n) {\n+        if (s == null) {\n+            return n;\n         }\n         try {\n-            return Long.parseLong(str);\n+            return Long.parseLong(s);\n         }\n-        catch (final NumberFormatException nfe) {\n-            return defaultValue;\n+        catch (final NumberFormatException ex) {\n+            return n;\n         }\n     }\n     \n-    public static float toFloat(final String str) {\n-        return toFloat(str, 0.0f);\n+    public static float toFloat(final String s) {\n+        return toFloat(s, 0.0f);\n     }\n     \n-    public static float toFloat(final String str, final float defaultValue) {\n-        if (str == null) {\n-            return defaultValue;\n+    public static float toFloat(final String s, final float n) {\n+        if (s == null) {\n+            return n;\n         }\n         try {\n-            return Float.parseFloat(str);\n+            return Float.parseFloat(s);\n         }\n-        catch (final NumberFormatException nfe) {\n-            return defaultValue;\n+        catch (final NumberFormatException ex) {\n+            return n;\n         }\n     }\n     \n-    public static double toDouble(final String str) {\n-        return toDouble(str, 0.0);\n+    public static double toDouble(final String s) {\n+        return toDouble(s, 0.0);\n     }\n     \n-    public static double toDouble(final String str, final double defaultValue) {\n-        if (str == null) {\n-            return defaultValue;\n+    public static double toDouble(final String s, final double n) {\n+        if (s == null) {\n+            return n;\n         }\n         try {\n-            return Double.parseDouble(str);\n+            return Double.parseDouble(s);\n         }\n-        catch (final NumberFormatException nfe) {\n-            return defaultValue;\n+        catch (final NumberFormatException ex) {\n+            return n;\n         }\n     }\n     \n-    public static double toDouble(final BigDecimal value) {\n-        return toDouble(value, 0.0);\n+    public static double toDouble(final BigDecimal bigDecimal) {\n+        return toDouble(bigDecimal, 0.0);\n     }\n     \n-    public static double toDouble(final BigDecimal value, final double defaultValue) {\n-        return (value == null) ? defaultValue : value.doubleValue();\n+    public static double toDouble(final BigDecimal bigDecimal, final double n) {\n+        return (bigDecimal == null) ? n : bigDecimal.doubleValue();\n     }\n     \n-    public static byte toByte(final String str) {\n-        return toByte(str, (byte)0);\n+    public static byte toByte(final String s) {\n+        return toByte(s, (byte)0);\n     }\n     \n-    public static byte toByte(final String str, final byte defaultValue) {\n-        if (str == null) {\n-            return defaultValue;\n+    public static byte toByte(final String s, final byte b) {\n+        if (s == null) {\n+            return b;\n         }\n         try {\n-            return Byte.parseByte(str);\n+            return Byte.parseByte(s);\n         }\n-        catch (final NumberFormatException nfe) {\n-            return defaultValue;\n+        catch (final NumberFormatException ex) {\n+            return b;\n         }\n     }\n     \n-    public static short toShort(final String str) {\n-        return toShort(str, (short)0);\n+    public static short toShort(final String s) {\n+        return toShort(s, (short)0);\n     }\n     \n-    public static short toShort(final String str, final short defaultValue) {\n-        if (str == null) {\n-            return defaultValue;\n+    public static short toShort(final String s, final short n) {\n+        if (s == null) {\n+            return n;\n         }\n         try {\n-            return Short.parseShort(str);\n+            return Short.parseShort(s);\n         }\n-        catch (final NumberFormatException nfe) {\n-            return defaultValue;\n+        catch (final NumberFormatException ex) {\n+            return n;\n         }\n     }\n     \n-    public static BigDecimal toScaledBigDecimal(final BigDecimal value) {\n-        return toScaledBigDecimal(value, NumberUtils.INTEGER_TWO, RoundingMode.HALF_EVEN);\n+    public static BigDecimal toScaledBigDecimal(final BigDecimal bigDecimal) {\n+        return toScaledBigDecimal(bigDecimal, NumberUtils.INTEGER_TWO, RoundingMode.HALF_EVEN);\n     }\n     \n-    public static BigDecimal toScaledBigDecimal(final BigDecimal value, final int scale, final RoundingMode roundingMode) {\n-        if (value == null) {\n+    public static BigDecimal toScaledBigDecimal(final BigDecimal bigDecimal, final int newScale, final RoundingMode roundingMode) {\n+        if (bigDecimal == null) {\n             return BigDecimal.ZERO;\n         }\n-        return value.setScale(scale, (roundingMode == null) ? RoundingMode.HALF_EVEN : roundingMode);\n+        return bigDecimal.setScale(newScale, (roundingMode == null) ? RoundingMode.HALF_EVEN : roundingMode);\n     }\n     \n-    public static BigDecimal toScaledBigDecimal(final Float value) {\n-        return toScaledBigDecimal(value, NumberUtils.INTEGER_TWO, RoundingMode.HALF_EVEN);\n+    public static BigDecimal toScaledBigDecimal(final Float n) {\n+        return toScaledBigDecimal(n, NumberUtils.INTEGER_TWO, RoundingMode.HALF_EVEN);\n     }\n     \n-    public static BigDecimal toScaledBigDecimal(final Float value, final int scale, final RoundingMode roundingMode) {\n-        if (value == null) {\n+    public static BigDecimal toScaledBigDecimal(final Float n, final int n2, final RoundingMode roundingMode) {\n+        if (n == null) {\n             return BigDecimal.ZERO;\n         }\n-        return toScaledBigDecimal(BigDecimal.valueOf((double)value), scale, roundingMode);\n+        return toScaledBigDecimal(BigDecimal.valueOf((double)n), n2, roundingMode);\n     }\n     \n-    public static BigDecimal toScaledBigDecimal(final Double value) {\n-        return toScaledBigDecimal(value, NumberUtils.INTEGER_TWO, RoundingMode.HALF_EVEN);\n+    public static BigDecimal toScaledBigDecimal(final Double n) {\n+        return toScaledBigDecimal(n, NumberUtils.INTEGER_TWO, RoundingMode.HALF_EVEN);\n     }\n     \n-    public static BigDecimal toScaledBigDecimal(final Double value, final int scale, final RoundingMode roundingMode) {\n-        if (value == null) {\n+    public static BigDecimal toScaledBigDecimal(final Double n, final int n2, final RoundingMode roundingMode) {\n+        if (n == null) {\n             return BigDecimal.ZERO;\n         }\n-        return toScaledBigDecimal(BigDecimal.valueOf((double)value), scale, roundingMode);\n+        return toScaledBigDecimal(BigDecimal.valueOf((double)n), n2, roundingMode);\n     }\n     \n-    public static BigDecimal toScaledBigDecimal(final String value) {\n-        return toScaledBigDecimal(value, NumberUtils.INTEGER_TWO, RoundingMode.HALF_EVEN);\n+    public static BigDecimal toScaledBigDecimal(final String s) {\n+        return toScaledBigDecimal(s, NumberUtils.INTEGER_TWO, RoundingMode.HALF_EVEN);\n     }\n     \n-    public static BigDecimal toScaledBigDecimal(final String value, final int scale, final RoundingMode roundingMode) {\n-        if (value == null) {\n+    public static BigDecimal toScaledBigDecimal(final String s, final int n, final RoundingMode roundingMode) {\n+        if (s == null) {\n             return BigDecimal.ZERO;\n         }\n-        return toScaledBigDecimal(createBigDecimal(value), scale, roundingMode);\n+        return toScaledBigDecimal(createBigDecimal(s), n, roundingMode);\n     }\n     \n     public static Number createNumber(final String str) {\n         if (str == null) {\n             return null;\n         }\n         if (StringUtils.isBlank((CharSequence)str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }\n-        final String[] hex_prefixes = { \"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\" };\n-        int pfxLen = 0;\n-        for (final String pfx : hex_prefixes) {\n-            if (str.startsWith(pfx)) {\n-                pfxLen += pfx.length();\n+        final String[] array = { \"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\" };\n+        int n = 0;\n+        for (final String prefix : array) {\n+            if (str.startsWith(prefix)) {\n+                n += prefix.length();\n                 break;\n             }\n         }\n-        if (pfxLen > 0) {\n-            char firstSigDigit = '\\0';\n-            for (int i = pfxLen; i < str.length(); ++i) {\n-                firstSigDigit = str.charAt(i);\n-                if (firstSigDigit != '0') {\n+        if (n > 0) {\n+            int char1 = 0;\n+            for (int j = n; j < str.length(); ++j) {\n+                char1 = str.charAt(j);\n+                if (char1 != 48) {\n                     break;\n                 }\n-                ++pfxLen;\n+                ++n;\n             }\n-            final int hexDigits = str.length() - pfxLen;\n-            if (hexDigits > 16 || (hexDigits == 16 && firstSigDigit > '7')) {\n+            final int n2 = str.length() - n;\n+            if (n2 > 16 || (n2 == 16 && char1 > 55)) {\n                 return createBigInteger(str);\n             }\n-            if (hexDigits > 8 || (hexDigits == 8 && firstSigDigit > '7')) {\n+            if (n2 > 8 || (n2 == 8 && char1 > 55)) {\n                 return createLong(str);\n             }\n             return createInteger(str);\n         }\n         else {\n-            final char lastChar = str.charAt(str.length() - 1);\n-            final int decPos = str.indexOf(46);\n-            final int expPos = str.indexOf(101) + str.indexOf(69) + 1;\n-            String dec;\n-            String mant;\n-            if (decPos > -1) {\n-                if (expPos > -1) {\n-                    if (expPos < decPos || expPos > str.length()) {\n+            final char char2 = str.charAt(str.length() - 1);\n+            final int index = str.indexOf(46);\n+            final int endIndex = str.indexOf(101) + str.indexOf(69) + 1;\n+            String s;\n+            String s2;\n+            if (index > -1) {\n+                if (endIndex > -1) {\n+                    if (endIndex < index || endIndex > str.length()) {\n                         throw new NumberFormatException(str + \" is not a valid number.\");\n                     }\n-                    dec = str.substring(decPos + 1, expPos);\n+                    s = str.substring(index + 1, endIndex);\n                 }\n                 else {\n-                    dec = str.substring(decPos + 1);\n+                    s = str.substring(index + 1);\n                 }\n-                mant = getMantissa(str, decPos);\n+                s2 = getMantissa(str, index);\n             }\n             else {\n-                if (expPos > -1) {\n-                    if (expPos > str.length()) {\n+                if (endIndex > -1) {\n+                    if (endIndex > str.length()) {\n                         throw new NumberFormatException(str + \" is not a valid number.\");\n                     }\n-                    mant = getMantissa(str, expPos);\n+                    s2 = getMantissa(str, endIndex);\n                 }\n                 else {\n-                    mant = getMantissa(str);\n+                    s2 = getMantissa(str);\n                 }\n-                dec = null;\n+                s = null;\n             }\n-            if (!Character.isDigit(lastChar) && lastChar != '.') {\n-                String exp;\n-                if (expPos > -1 && expPos < str.length() - 1) {\n-                    exp = str.substring(expPos + 1, str.length() - 1);\n+            if (!Character.isDigit(char2) && char2 != '.') {\n+                String substring;\n+                if (endIndex > -1 && endIndex < str.length() - 1) {\n+                    substring = str.substring(endIndex + 1, str.length() - 1);\n                 }\n                 else {\n-                    exp = null;\n+                    substring = null;\n                 }\n-                final String numeric = str.substring(0, str.length() - 1);\n-                final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-                switch (lastChar) {\n+                final String substring2 = str.substring(0, str.length() - 1);\n+                final boolean b = isAllZeros(s2) && isAllZeros(substring);\n+                switch (char2) {\n                     case 'L':\n                     case 'l': {\n-                        if (dec == null && exp == null) {\n-                            if (numeric.isEmpty() || numeric.charAt(0) != '-' || !isDigits(numeric.substring(1))) {\n-                                if (!isDigits(numeric)) {\n+                        if (s == null && substring == null) {\n+                            if (substring2.isEmpty() || substring2.charAt(0) != '-' || !isDigits(substring2.substring(1))) {\n+                                if (!isDigits(substring2)) {\n                                     throw new NumberFormatException(str + \" is not a valid number.\");\n                                 }\n                             }\n                             try {\n-                                return createLong(numeric);\n+                                return createLong(substring2);\n                             }\n                             catch (final NumberFormatException ex) {\n-                                return createBigInteger(numeric);\n+                                return createBigInteger(substring2);\n                             }\n                         }\n                         throw new NumberFormatException(str + \" is not a valid number.\");\n                     }\n                     case 'F':\n                     case 'f': {\n                         try {\n-                            final Float f = createFloat(str);\n-                            if (!f.isInfinite() && (f != 0.0f || allZeros)) {\n-                                return f;\n+                            final Float float1 = createFloat(str);\n+                            if (!float1.isInfinite() && (float1 != 0.0f || b)) {\n+                                return float1;\n                             }\n                         }\n                         catch (final NumberFormatException ex2) {}\n                     }\n                     case 'D':\n                     case 'd': {\n                         try {\n-                            final Double d = createDouble(str);\n-                            if (!d.isInfinite() && (d.floatValue() != 0.0 || allZeros)) {\n-                                return d;\n+                            final Double double1 = createDouble(str);\n+                            if (!double1.isInfinite() && (double1.floatValue() != 0.0 || b)) {\n+                                return double1;\n                             }\n                         }\n                         catch (final NumberFormatException ex3) {}\n                         try {\n-                            return createBigDecimal(numeric);\n+                            return createBigDecimal(substring2);\n                         }\n                         catch (final NumberFormatException ex4) {}\n                         break;\n                     }\n                 }\n                 throw new NumberFormatException(str + \" is not a valid number.\");\n             }\n-            String exp;\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length());\n+            String substring3;\n+            if (endIndex > -1 && endIndex < str.length() - 1) {\n+                substring3 = str.substring(endIndex + 1, str.length());\n             }\n             else {\n-                exp = null;\n+                substring3 = null;\n             }\n-            if (dec == null && exp == null) {\n+            if (s == null && substring3 == null) {\n                 try {\n                     return createInteger(str);\n                 }\n                 catch (final NumberFormatException ex5) {\n                     try {\n                         return createLong(str);\n                     }\n                     catch (final NumberFormatException ex6) {\n                         return createBigInteger(str);\n                     }\n                 }\n             }\n-            final boolean allZeros2 = isAllZeros(mant) && isAllZeros(exp);\n+            final boolean b2 = isAllZeros(s2) && isAllZeros(substring3);\n             try {\n-                final Float f2 = createFloat(str);\n-                final Double d = createDouble(str);\n-                if (!f2.isInfinite() && (f2 != 0.0f || allZeros2) && f2.toString().equals(d.toString())) {\n-                    return f2;\n-                }\n-                if (!d.isInfinite() && (d != 0.0 || allZeros2)) {\n-                    final BigDecimal b = createBigDecimal(str);\n-                    if (b.compareTo(BigDecimal.valueOf((double)d)) == 0) {\n-                        return d;\n+                final Float float2 = createFloat(str);\n+                final Double double2 = createDouble(str);\n+                if (!float2.isInfinite() && (float2 != 0.0f || b2) && float2.toString().equals(double2.toString())) {\n+                    return float2;\n+                }\n+                if (!double2.isInfinite() && (double2 != 0.0 || b2)) {\n+                    final BigDecimal bigDecimal = createBigDecimal(str);\n+                    if (bigDecimal.compareTo(BigDecimal.valueOf((double)double2)) == 0) {\n+                        return double2;\n                     }\n-                    return b;\n+                    return bigDecimal;\n                 }\n             }\n             catch (final NumberFormatException ex7) {}\n             return createBigDecimal(str);\n         }\n     }\n     \n-    private static String getMantissa(final String str) {\n-        return getMantissa(str, str.length());\n+    private static String getMantissa(final String s) {\n+        return getMantissa(s, s.length());\n     }\n     \n-    private static String getMantissa(final String str, final int stopPos) {\n-        final char firstChar = str.charAt(0);\n-        final boolean hasSign = firstChar == '-' || firstChar == '+';\n-        return hasSign ? str.substring(1, stopPos) : str.substring(0, stopPos);\n+    private static String getMantissa(final String s, final int n) {\n+        final char char1 = s.charAt(0);\n+        return (char1 == '-' || char1 == '+') ? s.substring(1, n) : s.substring(0, n);\n     }\n     \n-    private static boolean isAllZeros(final String str) {\n-        if (str == null) {\n+    private static boolean isAllZeros(final String s) {\n+        if (s == null) {\n             return true;\n         }\n-        for (int i = str.length() - 1; i >= 0; --i) {\n-            if (str.charAt(i) != '0') {\n+        for (int i = s.length() - 1; i >= 0; --i) {\n+            if (s.charAt(i) != '0') {\n                 return false;\n             }\n         }\n-        return !str.isEmpty();\n+        return !s.isEmpty();\n     }\n     \n-    public static Float createFloat(final String str) {\n-        if (str == null) {\n+    public static Float createFloat(final String s) {\n+        if (s == null) {\n             return null;\n         }\n-        return Float.valueOf(str);\n+        return Float.valueOf(s);\n     }\n     \n-    public static Double createDouble(final String str) {\n-        if (str == null) {\n+    public static Double createDouble(final String s) {\n+        if (s == null) {\n             return null;\n         }\n-        return Double.valueOf(str);\n+        return Double.valueOf(s);\n     }\n     \n-    public static Integer createInteger(final String str) {\n-        if (str == null) {\n+    public static Integer createInteger(final String nm) {\n+        if (nm == null) {\n             return null;\n         }\n-        return Integer.decode(str);\n+        return Integer.decode(nm);\n     }\n     \n-    public static Long createLong(final String str) {\n-        if (str == null) {\n+    public static Long createLong(final String nm) {\n+        if (nm == null) {\n             return null;\n         }\n-        return Long.decode(str);\n+        return Long.decode(nm);\n     }\n     \n-    public static BigInteger createBigInteger(final String str) {\n-        if (str == null) {\n+    public static BigInteger createBigInteger(final String s) {\n+        if (s == null) {\n             return null;\n         }\n-        int pos = 0;\n+        int beginIndex = 0;\n         int radix = 10;\n-        boolean negate = false;\n-        if (str.startsWith(\"-\")) {\n-            negate = true;\n-            pos = 1;\n+        boolean b = false;\n+        if (s.startsWith(\"-\")) {\n+            b = true;\n+            beginIndex = 1;\n         }\n-        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0X\", pos)) {\n+        if (s.startsWith(\"0x\", beginIndex) || s.startsWith(\"0X\", beginIndex)) {\n             radix = 16;\n-            pos += 2;\n+            beginIndex += 2;\n         }\n-        else if (str.startsWith(\"#\", pos)) {\n+        else if (s.startsWith(\"#\", beginIndex)) {\n             radix = 16;\n-            ++pos;\n+            ++beginIndex;\n         }\n-        else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) {\n+        else if (s.startsWith(\"0\", beginIndex) && s.length() > beginIndex + 1) {\n             radix = 8;\n-            ++pos;\n+            ++beginIndex;\n         }\n-        final BigInteger value = new BigInteger(str.substring(pos), radix);\n-        return negate ? value.negate() : value;\n+        final BigInteger bigInteger = new BigInteger(s.substring(beginIndex), radix);\n+        return b ? bigInteger.negate() : bigInteger;\n     }\n     \n-    public static BigDecimal createBigDecimal(final String str) {\n-        if (str == null) {\n+    public static BigDecimal createBigDecimal(final String s) {\n+        if (s == null) {\n             return null;\n         }\n-        if (StringUtils.isBlank((CharSequence)str)) {\n+        if (StringUtils.isBlank((CharSequence)s)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }\n-        if (str.trim().startsWith(\"--\")) {\n-            throw new NumberFormatException(str + \" is not a valid number.\");\n+        if (s.trim().startsWith(\"--\")) {\n+            throw new NumberFormatException(s + \" is not a valid number.\");\n         }\n-        return new BigDecimal(str);\n+        return new BigDecimal(s);\n     }\n     \n     public static long min(final long... array) {\n         validateArray(array);\n-        long min = array[0];\n+        long n = array[0];\n         for (int i = 1; i < array.length; ++i) {\n-            if (array[i] < min) {\n-                min = array[i];\n+            if (array[i] < n) {\n+                n = array[i];\n             }\n         }\n-        return min;\n+        return n;\n     }\n     \n     public static int min(final int... array) {\n         validateArray(array);\n-        int min = array[0];\n-        for (int j = 1; j < array.length; ++j) {\n-            if (array[j] < min) {\n-                min = array[j];\n+        int n = array[0];\n+        for (int i = 1; i < array.length; ++i) {\n+            if (array[i] < n) {\n+                n = array[i];\n             }\n         }\n-        return min;\n+        return n;\n     }\n     \n     public static short min(final short... array) {\n         validateArray(array);\n-        short min = array[0];\n+        short n = array[0];\n         for (int i = 1; i < array.length; ++i) {\n-            if (array[i] < min) {\n-                min = array[i];\n+            if (array[i] < n) {\n+                n = array[i];\n             }\n         }\n-        return min;\n+        return n;\n     }\n     \n     public static byte min(final byte... array) {\n         validateArray(array);\n-        byte min = array[0];\n+        byte b = array[0];\n         for (int i = 1; i < array.length; ++i) {\n-            if (array[i] < min) {\n-                min = array[i];\n+            if (array[i] < b) {\n+                b = array[i];\n             }\n         }\n-        return min;\n+        return b;\n     }\n     \n     public static double min(final double... array) {\n         validateArray(array);\n-        double min = array[0];\n+        double n = array[0];\n         for (int i = 1; i < array.length; ++i) {\n             if (Double.isNaN(array[i])) {\n                 return Double.NaN;\n             }\n-            if (array[i] < min) {\n-                min = array[i];\n+            if (array[i] < n) {\n+                n = array[i];\n             }\n         }\n-        return min;\n+        return n;\n     }\n     \n     public static float min(final float... array) {\n         validateArray(array);\n-        float min = array[0];\n+        float n = array[0];\n         for (int i = 1; i < array.length; ++i) {\n             if (Float.isNaN(array[i])) {\n                 return Float.NaN;\n             }\n-            if (array[i] < min) {\n-                min = array[i];\n+            if (array[i] < n) {\n+                n = array[i];\n             }\n         }\n-        return min;\n+        return n;\n     }\n     \n     public static long max(final long... array) {\n         validateArray(array);\n-        long max = array[0];\n-        for (int j = 1; j < array.length; ++j) {\n-            if (array[j] > max) {\n-                max = array[j];\n+        long n = array[0];\n+        for (int i = 1; i < array.length; ++i) {\n+            if (array[i] > n) {\n+                n = array[i];\n             }\n         }\n-        return max;\n+        return n;\n     }\n     \n     public static int max(final int... array) {\n         validateArray(array);\n-        int max = array[0];\n-        for (int j = 1; j < array.length; ++j) {\n-            if (array[j] > max) {\n-                max = array[j];\n+        int n = array[0];\n+        for (int i = 1; i < array.length; ++i) {\n+            if (array[i] > n) {\n+                n = array[i];\n             }\n         }\n-        return max;\n+        return n;\n     }\n     \n     public static short max(final short... array) {\n         validateArray(array);\n-        short max = array[0];\n+        short n = array[0];\n         for (int i = 1; i < array.length; ++i) {\n-            if (array[i] > max) {\n-                max = array[i];\n+            if (array[i] > n) {\n+                n = array[i];\n             }\n         }\n-        return max;\n+        return n;\n     }\n     \n     public static byte max(final byte... array) {\n         validateArray(array);\n-        byte max = array[0];\n+        byte b = array[0];\n         for (int i = 1; i < array.length; ++i) {\n-            if (array[i] > max) {\n-                max = array[i];\n+            if (array[i] > b) {\n+                b = array[i];\n             }\n         }\n-        return max;\n+        return b;\n     }\n     \n     public static double max(final double... array) {\n         validateArray(array);\n-        double max = array[0];\n-        for (int j = 1; j < array.length; ++j) {\n-            if (Double.isNaN(array[j])) {\n+        double n = array[0];\n+        for (int i = 1; i < array.length; ++i) {\n+            if (Double.isNaN(array[i])) {\n                 return Double.NaN;\n             }\n-            if (array[j] > max) {\n-                max = array[j];\n+            if (array[i] > n) {\n+                n = array[i];\n             }\n         }\n-        return max;\n+        return n;\n     }\n     \n     public static float max(final float... array) {\n         validateArray(array);\n-        float max = array[0];\n-        for (int j = 1; j < array.length; ++j) {\n-            if (Float.isNaN(array[j])) {\n+        float n = array[0];\n+        for (int i = 1; i < array.length; ++i) {\n+            if (Float.isNaN(array[i])) {\n                 return Float.NaN;\n             }\n-            if (array[j] > max) {\n-                max = array[j];\n+            if (array[i] > n) {\n+                n = array[i];\n             }\n         }\n-        return max;\n+        return n;\n     }\n     \n-    private static void validateArray(final Object array) {\n-        Validate.isTrue(array != null, \"The Array must not be null\", new Object[0]);\n-        Validate.isTrue(Array.getLength(array) != 0, \"Array cannot be empty.\", new Object[0]);\n+    private static void validateArray(final Object o) {\n+        Validate.isTrue(o != null, \"The Array must not be null\", new Object[0]);\n+        Validate.isTrue(Array.getLength(o) != 0, \"Array cannot be empty.\", new Object[0]);\n     }\n     \n-    public static long min(long a, final long b, final long c) {\n-        if (b < a) {\n-            a = b;\n+    public static long min(long n, final long n2, final long n3) {\n+        if (n2 < n) {\n+            n = n2;\n         }\n-        if (c < a) {\n-            a = c;\n+        if (n3 < n) {\n+            n = n3;\n         }\n-        return a;\n+        return n;\n     }\n     \n-    public static int min(int a, final int b, final int c) {\n-        if (b < a) {\n-            a = b;\n+    public static int min(int n, final int n2, final int n3) {\n+        if (n2 < n) {\n+            n = n2;\n         }\n-        if (c < a) {\n-            a = c;\n+        if (n3 < n) {\n+            n = n3;\n         }\n-        return a;\n+        return n;\n     }\n     \n-    public static short min(short a, final short b, final short c) {\n-        if (b < a) {\n-            a = b;\n+    public static short min(short n, final short n2, final short n3) {\n+        if (n2 < n) {\n+            n = n2;\n         }\n-        if (c < a) {\n-            a = c;\n+        if (n3 < n) {\n+            n = n3;\n         }\n-        return a;\n+        return n;\n     }\n     \n-    public static byte min(byte a, final byte b, final byte c) {\n-        if (b < a) {\n-            a = b;\n+    public static byte min(byte b, final byte b2, final byte b3) {\n+        if (b2 < b) {\n+            b = b2;\n         }\n-        if (c < a) {\n-            a = c;\n+        if (b3 < b) {\n+            b = b3;\n         }\n-        return a;\n+        return b;\n     }\n     \n-    public static double min(final double a, final double b, final double c) {\n-        return Math.min(Math.min(a, b), c);\n+    public static double min(final double a, final double b, final double b2) {\n+        return Math.min(Math.min(a, b), b2);\n     }\n     \n-    public static float min(final float a, final float b, final float c) {\n-        return Math.min(Math.min(a, b), c);\n+    public static float min(final float a, final float b, final float b2) {\n+        return Math.min(Math.min(a, b), b2);\n     }\n     \n-    public static long max(long a, final long b, final long c) {\n-        if (b > a) {\n-            a = b;\n+    public static long max(long n, final long n2, final long n3) {\n+        if (n2 > n) {\n+            n = n2;\n         }\n-        if (c > a) {\n-            a = c;\n+        if (n3 > n) {\n+            n = n3;\n         }\n-        return a;\n+        return n;\n     }\n     \n-    public static int max(int a, final int b, final int c) {\n-        if (b > a) {\n-            a = b;\n+    public static int max(int n, final int n2, final int n3) {\n+        if (n2 > n) {\n+            n = n2;\n         }\n-        if (c > a) {\n-            a = c;\n+        if (n3 > n) {\n+            n = n3;\n         }\n-        return a;\n+        return n;\n     }\n     \n-    public static short max(short a, final short b, final short c) {\n-        if (b > a) {\n-            a = b;\n+    public static short max(short n, final short n2, final short n3) {\n+        if (n2 > n) {\n+            n = n2;\n         }\n-        if (c > a) {\n-            a = c;\n+        if (n3 > n) {\n+            n = n3;\n         }\n-        return a;\n+        return n;\n     }\n     \n-    public static byte max(byte a, final byte b, final byte c) {\n-        if (b > a) {\n-            a = b;\n+    public static byte max(byte b, final byte b2, final byte b3) {\n+        if (b2 > b) {\n+            b = b2;\n         }\n-        if (c > a) {\n-            a = c;\n+        if (b3 > b) {\n+            b = b3;\n         }\n-        return a;\n+        return b;\n     }\n     \n-    public static double max(final double a, final double b, final double c) {\n-        return Math.max(Math.max(a, b), c);\n+    public static double max(final double a, final double b, final double b2) {\n+        return Math.max(Math.max(a, b), b2);\n     }\n     \n-    public static float max(final float a, final float b, final float c) {\n-        return Math.max(Math.max(a, b), c);\n+    public static float max(final float a, final float b, final float b2) {\n+        return Math.max(Math.max(a, b), b2);\n     }\n     \n-    public static boolean isDigits(final String str) {\n-        return StringUtils.isNumeric((CharSequence)str);\n+    public static boolean isDigits(final String s) {\n+        return StringUtils.isNumeric((CharSequence)s);\n     }\n     \n     @Deprecated\n-    public static boolean isNumber(final String str) {\n-        return isCreatable(str);\n+    public static boolean isNumber(final String s) {\n+        return isCreatable(s);\n     }\n     \n-    public static boolean isCreatable(final String str) {\n-        if (StringUtils.isEmpty((CharSequence)str)) {\n+    public static boolean isCreatable(final String s) {\n+        if (StringUtils.isEmpty((CharSequence)s)) {\n             return false;\n         }\n-        final char[] chars = str.toCharArray();\n-        int sz = chars.length;\n-        boolean hasExp = false;\n-        boolean hasDecPoint = false;\n-        boolean allowSigns = false;\n-        boolean foundDigit = false;\n-        final int start = (chars[0] == '-' || chars[0] == '+') ? 1 : 0;\n-        if (sz > start + 1 && chars[start] == '0' && !StringUtils.contains((CharSequence)str, 46)) {\n-            if (chars[start + 1] == 'x' || chars[start + 1] == 'X') {\n-                int i = start + 2;\n-                if (i == sz) {\n+        final char[] charArray = s.toCharArray();\n+        int length = charArray.length;\n+        int n = 0;\n+        int n2 = 0;\n+        int n3 = 0;\n+        boolean b = false;\n+        final int n4 = (charArray[0] == '-' || charArray[0] == '+') ? 1 : 0;\n+        if (length > n4 + 1 && charArray[n4] == '0' && !StringUtils.contains((CharSequence)s, 46)) {\n+            if (charArray[n4 + 1] == 'x' || charArray[n4 + 1] == 'X') {\n+                int i = n4 + 2;\n+                if (i == length) {\n                     return false;\n                 }\n-                while (i < chars.length) {\n-                    if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {\n+                while (i < charArray.length) {\n+                    if ((charArray[i] < '0' || charArray[i] > '9') && (charArray[i] < 'a' || charArray[i] > 'f') && (charArray[i] < 'A' || charArray[i] > 'F')) {\n                         return false;\n                     }\n                     ++i;\n                 }\n                 return true;\n             }\n-            else if (Character.isDigit(chars[start + 1])) {\n-                for (int i = start + 1; i < chars.length; ++i) {\n-                    if (chars[i] < '0' || chars[i] > '7') {\n+            else if (Character.isDigit(charArray[n4 + 1])) {\n+                for (int j = n4 + 1; j < charArray.length; ++j) {\n+                    if (charArray[j] < '0' || charArray[j] > '7') {\n                         return false;\n                     }\n                 }\n                 return true;\n             }\n         }\n-        --sz;\n-        int i;\n-        for (i = start; i < sz || (i < sz + 1 && allowSigns && !foundDigit); ++i) {\n-            if (chars[i] >= '0' && chars[i] <= '9') {\n-                foundDigit = true;\n-                allowSigns = false;\n+        --length;\n+        int n5;\n+        for (n5 = n4; n5 < length || (n5 < length + 1 && n3 != 0 && !b); ++n5) {\n+            if (charArray[n5] >= '0' && charArray[n5] <= '9') {\n+                b = true;\n+                n3 = 0;\n             }\n-            else if (chars[i] == '.') {\n-                if (hasDecPoint || hasExp) {\n+            else if (charArray[n5] == '.') {\n+                if (n2 != 0 || n != 0) {\n                     return false;\n                 }\n-                hasDecPoint = true;\n+                n2 = 1;\n             }\n-            else if (chars[i] == 'e' || chars[i] == 'E') {\n-                if (hasExp) {\n+            else if (charArray[n5] == 'e' || charArray[n5] == 'E') {\n+                if (n != 0) {\n                     return false;\n                 }\n-                if (!foundDigit) {\n+                if (!b) {\n                     return false;\n                 }\n-                hasExp = true;\n-                allowSigns = true;\n+                n = 1;\n+                n3 = 1;\n             }\n             else {\n-                if (chars[i] != '+' && chars[i] != '-') {\n+                if (charArray[n5] != '+' && charArray[n5] != '-') {\n                     return false;\n                 }\n-                if (!allowSigns) {\n+                if (n3 == 0) {\n                     return false;\n                 }\n-                allowSigns = false;\n-                foundDigit = false;\n+                n3 = 0;\n+                b = false;\n             }\n         }\n-        if (i >= chars.length) {\n-            return !allowSigns && foundDigit;\n+        if (n5 >= charArray.length) {\n+            return n3 == 0 && b;\n         }\n-        if (chars[i] >= '0' && chars[i] <= '9') {\n+        if (charArray[n5] >= '0' && charArray[n5] <= '9') {\n             return true;\n         }\n-        if (chars[i] == 'e' || chars[i] == 'E') {\n+        if (charArray[n5] == 'e' || charArray[n5] == 'E') {\n             return false;\n         }\n-        if (chars[i] == '.') {\n-            return !hasDecPoint && !hasExp && foundDigit;\n+        if (charArray[n5] == '.') {\n+            return n2 == 0 && n == 0 && b;\n         }\n-        if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {\n-            return foundDigit;\n+        if (n3 == 0 && (charArray[n5] == 'd' || charArray[n5] == 'D' || charArray[n5] == 'f' || charArray[n5] == 'F')) {\n+            return b;\n         }\n-        return (chars[i] == 'l' || chars[i] == 'L') && foundDigit && !hasExp && !hasDecPoint;\n+        return (charArray[n5] == 'l' || charArray[n5] == 'L') && b && n == 0 && n2 == 0;\n     }\n     \n-    public static boolean isParsable(final String str) {\n-        if (StringUtils.isEmpty((CharSequence)str)) {\n+    public static boolean isParsable(final String s) {\n+        if (StringUtils.isEmpty((CharSequence)s)) {\n             return false;\n         }\n-        if (str.charAt(str.length() - 1) == '.') {\n+        if (s.charAt(s.length() - 1) == '.') {\n             return false;\n         }\n-        if (str.charAt(0) == '-') {\n-            return str.length() != 1 && withDecimalsParsing(str, 1);\n+        if (s.charAt(0) == '-') {\n+            return s.length() != 1 && withDecimalsParsing(s, 1);\n         }\n-        return withDecimalsParsing(str, 0);\n+        return withDecimalsParsing(s, 0);\n     }\n     \n-    private static boolean withDecimalsParsing(final String str, final int beginIdx) {\n-        int decimalPoints = 0;\n-        for (int i = beginIdx; i < str.length(); ++i) {\n-            final boolean isDecimalPoint = str.charAt(i) == '.';\n-            if (isDecimalPoint) {\n-                ++decimalPoints;\n+    private static boolean withDecimalsParsing(final String s, final int n) {\n+        int n2 = 0;\n+        for (int i = n; i < s.length(); ++i) {\n+            final boolean b = s.charAt(i) == '.';\n+            if (b) {\n+                ++n2;\n             }\n-            if (decimalPoints > 1) {\n+            if (n2 > 1) {\n                 return false;\n             }\n-            if (!isDecimalPoint && !Character.isDigit(str.charAt(i))) {\n+            if (!b && !Character.isDigit(s.charAt(i))) {\n                 return false;\n             }\n         }\n         return true;\n     }\n     \n-    public static int compare(final int x, final int y) {\n-        if (x == y) {\n+    public static int compare(final int n, final int n2) {\n+        if (n == n2) {\n             return 0;\n         }\n-        return (x < y) ? -1 : 1;\n+        return (n < n2) ? -1 : 1;\n     }\n     \n-    public static int compare(final long x, final long y) {\n-        if (x == y) {\n+    public static int compare(final long n, final long n2) {\n+        if (n == n2) {\n             return 0;\n         }\n-        return (x < y) ? -1 : 1;\n+        return (n < n2) ? -1 : 1;\n     }\n     \n-    public static int compare(final short x, final short y) {\n-        if (x == y) {\n+    public static int compare(final short n, final short n2) {\n+        if (n == n2) {\n             return 0;\n         }\n-        return (x < y) ? -1 : 1;\n+        return (n < n2) ? -1 : 1;\n     }\n     \n-    public static int compare(final byte x, final byte y) {\n-        return x - y;\n+    public static int compare(final byte b, final byte b2) {\n+        return b - b2;\n     }\n     \n     static {\n         LONG_ZERO = Long.valueOf(0L);\n         LONG_ONE = Long.valueOf(1L);\n         LONG_MINUS_ONE = Long.valueOf(-1L);\n         INTEGER_ZERO = Integer.valueOf(0);\n"}]}
