{"diffoscope-json-version": 1, "source1": "first/UncheckedFilterWriter.class", "source2": "second/UncheckedFilterWriter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,55 +15,55 @@\n     \n     private UncheckedFilterWriter(final Writer writer) {\n         super(writer);\n     }\n     \n     @Override\n     public Writer append(final char c) throws UncheckedIOException {\n-        return (Writer)Uncheck.apply(x$0 -> super.append(x$0), (Object)Character.valueOf(c));\n+        return (Writer)Uncheck.apply(c -> uncheckedFilterWriter.append(c), (Object)Character.valueOf(c));\n     }\n     \n     @Override\n     public Writer append(final CharSequence csq) throws UncheckedIOException {\n-        return (Writer)Uncheck.apply(x$0 -> super.append(x$0), (Object)csq);\n+        return (Writer)Uncheck.apply(csq -> uncheckedFilterWriter.append(csq), (Object)csq);\n     }\n     \n     @Override\n     public Writer append(final CharSequence csq, final int start, final int end) throws UncheckedIOException {\n-        return (Writer)Uncheck.apply((x$0, x$1, x$2) -> super.append(x$0, x$1, x$2), (Object)csq, (Object)Integer.valueOf(start), (Object)Integer.valueOf(end));\n+        return (Writer)Uncheck.apply((csq, start, end) -> uncheckedFilterWriter.append(csq, start, end), (Object)csq, (Object)Integer.valueOf(start), (Object)Integer.valueOf(end));\n     }\n     \n     @Override\n     public void close() throws UncheckedIOException {\n-        Uncheck.run(() -> super.close());\n+        Uncheck.run(() -> uncheckedFilterWriter.close());\n     }\n     \n     @Override\n     public void flush() throws UncheckedIOException {\n-        Uncheck.run(() -> super.flush());\n+        Uncheck.run(() -> uncheckedFilterWriter.flush());\n     }\n     \n     @Override\n     public void write(final char[] cbuf) throws UncheckedIOException {\n-        Uncheck.accept(x$0 -> super.write(x$0), (Object)cbuf);\n+        Uncheck.accept(cbuf -> uncheckedFilterWriter.write(cbuf), (Object)cbuf);\n     }\n     \n     @Override\n     public void write(final char[] cbuf, final int off, final int len) throws UncheckedIOException {\n-        Uncheck.accept((x$0, x$1, x$2) -> super.write(x$0, x$1, x$2), (Object)cbuf, (Object)Integer.valueOf(off), (Object)Integer.valueOf(len));\n+        Uncheck.accept((cbuf, off, len) -> uncheckedFilterWriter.write(cbuf, off, len), (Object)cbuf, (Object)Integer.valueOf(off), (Object)Integer.valueOf(len));\n     }\n     \n     @Override\n     public void write(final int c) throws UncheckedIOException {\n-        Uncheck.accept(x$0 -> super.write(x$0), (Object)Integer.valueOf(c));\n+        Uncheck.accept(c -> uncheckedFilterWriter.write(c), (Object)Integer.valueOf(c));\n     }\n     \n     @Override\n     public void write(final String str) throws UncheckedIOException {\n-        Uncheck.accept(x$0 -> super.write(x$0), (Object)str);\n+        Uncheck.accept(str -> uncheckedFilterWriter.write(str), (Object)str);\n     }\n     \n     @Override\n     public void write(final String str, final int off, final int len) throws UncheckedIOException {\n-        Uncheck.accept((x$0, x$1, x$2) -> super.write(x$0, x$1, x$2), (Object)str, (Object)Integer.valueOf(off), (Object)Integer.valueOf(len));\n+        Uncheck.accept((str, off, len) -> uncheckedFilterWriter.write(str, off, len), (Object)str, (Object)Integer.valueOf(off), (Object)Integer.valueOf(len));\n     }\n }\n"}]}
