{"diffoscope-json-version": 1, "source1": "first/FileAlterationObserver.class", "source2": "second/FileAlterationObserver.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -38,20 +38,20 @@\n     \n     protected FileAlterationObserver(final FileEntry rootEntry, final FileFilter fileFilter, final IOCase ioCase) {\n         this.listeners = new CopyOnWriteArrayList<FileAlterationListener>();\n         Objects.requireNonNull(rootEntry, \"rootEntry\");\n         Objects.requireNonNull(rootEntry.getFile(), \"rootEntry.getFile()\");\n         this.rootEntry = rootEntry;\n         this.fileFilter = fileFilter;\n-        switch (FileAlterationObserver.FileAlterationObserver$1.$SwitchMap$org$apache$commons$io$IOCase[IOCase.value(ioCase, IOCase.SYSTEM).ordinal()]) {\n-            case 1: {\n+        switch (IOCase.value(ioCase, IOCase.SYSTEM)) {\n+            case SYSTEM: {\n                 this.comparator = NameFileComparator.NAME_SYSTEM_COMPARATOR;\n                 break;\n             }\n-            case 2: {\n+            case INSENSITIVE: {\n                 this.comparator = NameFileComparator.NAME_INSENSITIVE_COMPARATOR;\n                 break;\n             }\n             default: {\n                 this.comparator = NameFileComparator.NAME_COMPARATOR;\n                 break;\n             }\n@@ -122,51 +122,51 @@\n     }\n     \n     public void destroy() throws Exception {\n     }\n     \n     private void doCreate(final FileEntry entry) {\n         this.listeners.forEach(listener -> {\n-            if (entry.isDirectory()) {\n-                listener.onDirectoryCreate(entry.getFile());\n+            if (fileEntry.isDirectory()) {\n+                listener.onDirectoryCreate(fileEntry.getFile());\n             }\n             else {\n-                listener.onFileCreate(entry.getFile());\n+                listener.onFileCreate(fileEntry.getFile());\n             }\n             return;\n         });\n         Stream.of(entry.getChildren()).forEach(this::doCreate);\n     }\n     \n     private void doDelete(final FileEntry entry) {\n         this.listeners.forEach(listener -> {\n-            if (entry.isDirectory()) {\n-                listener.onDirectoryDelete(entry.getFile());\n+            if (fileEntry.isDirectory()) {\n+                listener.onDirectoryDelete(fileEntry.getFile());\n             }\n             else {\n-                listener.onFileDelete(entry.getFile());\n+                listener.onFileDelete(fileEntry.getFile());\n             }\n         });\n     }\n     \n     private FileEntry[] doListFiles(final File file, final FileEntry entry) {\n         final File[] files = this.listFiles(file);\n         final FileEntry[] children = (files.length > 0) ? new FileEntry[files.length] : FileEntry.EMPTY_FILE_ENTRY_ARRAY;\n-        Arrays.setAll(children, i -> this.createFileEntry(entry, files[i]));\n+        Arrays.setAll(children, i -> this.createFileEntry(parent, array[i]));\n         return children;\n     }\n     \n     private void doMatch(final FileEntry entry, final File file) {\n         if (entry.refresh(file)) {\n             this.listeners.forEach(listener -> {\n-                if (entry.isDirectory()) {\n-                    listener.onDirectoryChange(file);\n+                if (fileEntry.isDirectory()) {\n+                    listener.onDirectoryChange(file2);\n                 }\n                 else {\n-                    listener.onFileChange(file);\n+                    listener.onFileChange(file2);\n                 }\n             });\n         }\n     }\n     \n     public File getDirectory() {\n         return this.rootEntry.getFile();\n@@ -197,17 +197,15 @@\n             Arrays.sort(children, this.comparator);\n         }\n         return children;\n     }\n     \n     public void removeListener(final FileAlterationListener listener) {\n         if (listener != null) {\n-            final List<FileAlterationListener> listeners = this.listeners;\n-            Objects.requireNonNull(listener);\n-            listeners.removeIf(listener::equals);\n+            this.listeners.removeIf(listener::equals);\n         }\n     }\n     \n     @Override\n     public String toString() {\n         final StringBuilder builder = new StringBuilder();\n         builder.append(this.getClass().getSimpleName());\n"}]}
