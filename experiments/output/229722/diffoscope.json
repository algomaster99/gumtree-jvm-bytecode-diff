{"diffoscope-json-version": 1, "source1": "first/LZMACompressorInputStream.class", "source2": "second/LZMACompressorInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,35 +15,35 @@\n     private final CountingInputStream countingStream;\n     private final InputStream in;\n     \n     public LZMACompressorInputStream(final InputStream inputStream) throws IOException {\n         this.in = (InputStream)new LZMAInputStream((InputStream)(this.countingStream = new CountingInputStream(inputStream)), -1);\n     }\n     \n-    public LZMACompressorInputStream(final InputStream inputStream, final int memoryLimitInKb) throws IOException {\n+    public LZMACompressorInputStream(final InputStream inputStream, final int n) throws IOException {\n         try {\n             final CountingInputStream countingStream = new CountingInputStream(inputStream);\n             this.countingStream = countingStream;\n-            this.in = (InputStream)new LZMAInputStream((InputStream)countingStream, memoryLimitInKb);\n+            this.in = (InputStream)new LZMAInputStream((InputStream)countingStream, n);\n         }\n-        catch (final org.tukaani.xz.MemoryLimitException e) {\n-            throw new MemoryLimitException((long)e.getMemoryNeeded(), e.getMemoryLimit(), (Exception)e);\n+        catch (final org.tukaani.xz.MemoryLimitException ex) {\n+            throw new MemoryLimitException((long)ex.getMemoryNeeded(), ex.getMemoryLimit(), (Exception)ex);\n         }\n     }\n     \n     public int read() throws IOException {\n-        final int ret = this.in.read();\n-        this.count((int)((ret != -1) ? 1 : 0));\n-        return ret;\n+        final int read = this.in.read();\n+        this.count((int)((read != -1) ? 1 : 0));\n+        return read;\n     }\n     \n-    public int read(final byte[] buf, final int off, final int len) throws IOException {\n-        final int ret = this.in.read(buf, off, len);\n-        this.count(ret);\n-        return ret;\n+    public int read(final byte[] b, final int off, final int len) throws IOException {\n+        final int read = this.in.read(b, off, len);\n+        this.count(read);\n+        return read;\n     }\n     \n     public long skip(final long n) throws IOException {\n         return IOUtils.skip(this.in, n);\n     }\n     \n     public int available() throws IOException {\n@@ -54,11 +54,11 @@\n         this.in.close();\n     }\n     \n     public long getCompressedCount() {\n         return this.countingStream.getBytesRead();\n     }\n     \n-    public static boolean matches(final byte[] signature, final int length) {\n-        return signature != null && length >= 3 && signature[0] == 93 && signature[1] == 0 && signature[2] == 0;\n+    public static boolean matches(final byte[] array, final int n) {\n+        return array != null && n >= 3 && array[0] == 93 && array[1] == 0 && array[2] == 0;\n     }\n }\n"}]}
