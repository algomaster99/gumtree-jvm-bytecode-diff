{"diffoscope-json-version": 1, "source1": "first/XZCompressorInputStream.class", "source2": "second/XZCompressorInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,75 +13,75 @@\n import org.apache.commons.compress.compressors.CompressorInputStream;\n \n public class XZCompressorInputStream extends CompressorInputStream implements InputStreamStatistics\n {\n     private final CountingInputStream countingStream;\n     private final InputStream in;\n     \n-    public static boolean matches(final byte[] signature, final int length) {\n-        if (length < XZ.HEADER_MAGIC.length) {\n+    public static boolean matches(final byte[] array, final int n) {\n+        if (n < XZ.HEADER_MAGIC.length) {\n             return false;\n         }\n         for (int i = 0; i < XZ.HEADER_MAGIC.length; ++i) {\n-            if (signature[i] != XZ.HEADER_MAGIC[i]) {\n+            if (array[i] != XZ.HEADER_MAGIC[i]) {\n                 return false;\n             }\n         }\n         return true;\n     }\n     \n     public XZCompressorInputStream(final InputStream inputStream) throws IOException {\n         this(inputStream, false);\n     }\n     \n-    public XZCompressorInputStream(final InputStream inputStream, final boolean decompressConcatenated) throws IOException {\n-        this(inputStream, decompressConcatenated, -1);\n+    public XZCompressorInputStream(final InputStream inputStream, final boolean b) throws IOException {\n+        this(inputStream, b, -1);\n     }\n     \n-    public XZCompressorInputStream(final InputStream inputStream, final boolean decompressConcatenated, final int memoryLimitInKb) throws IOException {\n+    public XZCompressorInputStream(final InputStream inputStream, final boolean b, final int n) throws IOException {\n         this.countingStream = new CountingInputStream(inputStream);\n-        if (decompressConcatenated) {\n-            this.in = (InputStream)new XZInputStream((InputStream)this.countingStream, memoryLimitInKb);\n+        if (b) {\n+            this.in = (InputStream)new XZInputStream((InputStream)this.countingStream, n);\n         }\n         else {\n-            this.in = (InputStream)new SingleXZInputStream((InputStream)this.countingStream, memoryLimitInKb);\n+            this.in = (InputStream)new SingleXZInputStream((InputStream)this.countingStream, n);\n         }\n     }\n     \n     public int read() throws IOException {\n         try {\n-            final int ret = this.in.read();\n-            this.count((ret == -1) ? -1 : 1);\n-            return ret;\n+            final int read = this.in.read();\n+            this.count((read == -1) ? -1 : 1);\n+            return read;\n         }\n-        catch (final org.tukaani.xz.MemoryLimitException e) {\n-            throw new MemoryLimitException((long)e.getMemoryNeeded(), e.getMemoryLimit(), (Exception)e);\n+        catch (final org.tukaani.xz.MemoryLimitException ex) {\n+            throw new MemoryLimitException((long)ex.getMemoryNeeded(), ex.getMemoryLimit(), (Exception)ex);\n         }\n     }\n     \n-    public int read(final byte[] buf, final int off, final int len) throws IOException {\n+    public int read(final byte[] b, final int off, final int len) throws IOException {\n         if (len == 0) {\n             return 0;\n         }\n         try {\n-            final int ret = this.in.read(buf, off, len);\n-            this.count(ret);\n-            return ret;\n+            final int read = this.in.read(b, off, len);\n+            this.count(read);\n+            return read;\n         }\n-        catch (final org.tukaani.xz.MemoryLimitException e) {\n-            throw new MemoryLimitException((long)e.getMemoryNeeded(), e.getMemoryLimit(), (Exception)e);\n+        catch (final org.tukaani.xz.MemoryLimitException ex) {\n+            throw new MemoryLimitException((long)ex.getMemoryNeeded(), ex.getMemoryLimit(), (Exception)ex);\n         }\n     }\n     \n     public long skip(final long n) throws IOException {\n         try {\n             return IOUtils.skip(this.in, n);\n         }\n-        catch (final org.tukaani.xz.MemoryLimitException e) {\n-            throw new MemoryLimitException((long)e.getMemoryNeeded(), e.getMemoryLimit(), (Exception)e);\n+        catch (final org.tukaani.xz.MemoryLimitException ex) {\n+            throw new MemoryLimitException((long)ex.getMemoryNeeded(), ex.getMemoryLimit(), (Exception)ex);\n         }\n     }\n     \n     public int available() throws IOException {\n         return this.in.available();\n     }\n     \n"}]}
