{"diffoscope-json-version": 1, "source1": "first/CpioArchiveEntry.class", "source2": "second/CpioArchiveEntry.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -29,16 +29,16 @@\n     private long mtime;\n     private String name;\n     private long nlink;\n     private long rmaj;\n     private long rmin;\n     private long uid;\n     \n-    public CpioArchiveEntry(final short format) {\n-        switch (format) {\n+    public CpioArchiveEntry(final short n) {\n+        switch (n) {\n             case 1: {\n                 this.headerSize = 110;\n                 this.alignmentBoundary = 4;\n                 break;\n             }\n             case 2: {\n                 this.headerSize = 110;\n@@ -52,73 +52,73 @@\n             }\n             case 8: {\n                 this.headerSize = 26;\n                 this.alignmentBoundary = 2;\n                 break;\n             }\n             default: {\n-                throw new IllegalArgumentException(\"Unknown header type \" + format);\n+                throw new IllegalArgumentException(\"Unknown header type \" + n);\n             }\n         }\n-        this.fileFormat = format;\n+        this.fileFormat = n;\n     }\n     \n-    public CpioArchiveEntry(final String name) {\n-        this((short)1, name);\n+    public CpioArchiveEntry(final String s) {\n+        this((short)1, s);\n     }\n     \n-    public CpioArchiveEntry(final short format, final String name) {\n-        this(format);\n+    public CpioArchiveEntry(final short n, final String name) {\n+        this(n);\n         this.name = name;\n     }\n     \n-    public CpioArchiveEntry(final String name, final long size) {\n-        this(name);\n+    public CpioArchiveEntry(final String s, final long size) {\n+        this(s);\n         this.setSize(size);\n     }\n     \n-    public CpioArchiveEntry(final short format, final String name, final long size) {\n-        this(format, name);\n+    public CpioArchiveEntry(final short n, final String s, final long size) {\n+        this(n, s);\n         this.setSize(size);\n     }\n     \n-    public CpioArchiveEntry(final File inputFile, final String entryName) {\n-        this((short)1, inputFile, entryName);\n+    public CpioArchiveEntry(final File file, final String s) {\n+        this((short)1, file, s);\n     }\n     \n-    public CpioArchiveEntry(final Path inputPath, final String entryName, final LinkOption... options) throws IOException {\n-        this((short)1, inputPath, entryName, options);\n+    public CpioArchiveEntry(final Path path, final String s, final LinkOption... array) throws IOException {\n+        this((short)1, path, s, array);\n     }\n     \n-    public CpioArchiveEntry(final short format, final File inputFile, final String entryName) {\n-        this(format, entryName, inputFile.isFile() ? inputFile.length() : 0L);\n-        if (inputFile.isDirectory()) {\n+    public CpioArchiveEntry(final short n, final File file, final String s) {\n+        this(n, s, file.isFile() ? file.length() : 0L);\n+        if (file.isDirectory()) {\n             this.setMode(16384L);\n         }\n         else {\n-            if (!inputFile.isFile()) {\n-                throw new IllegalArgumentException(\"Cannot determine type of file \" + inputFile.getName());\n+            if (!file.isFile()) {\n+                throw new IllegalArgumentException(\"Cannot determine type of file \" + file.getName());\n             }\n             this.setMode(32768L);\n         }\n-        this.setTime(inputFile.lastModified() / 1000L);\n+        this.setTime(file.lastModified() / 1000L);\n     }\n     \n-    public CpioArchiveEntry(final short format, final Path inputPath, final String entryName, final LinkOption... options) throws IOException {\n-        this(format, entryName, Files.isRegularFile(inputPath, options) ? Files.size(inputPath) : 0L);\n-        if (Files.isDirectory(inputPath, options)) {\n+    public CpioArchiveEntry(final short n, final Path path, final String s, final LinkOption... array) throws IOException {\n+        this(n, s, Files.isRegularFile(path, array) ? Files.size(path) : 0L);\n+        if (Files.isDirectory(path, array)) {\n             this.setMode(16384L);\n         }\n         else {\n-            if (!Files.isRegularFile(inputPath, options)) {\n-                throw new IllegalArgumentException(\"Cannot determine type of file \" + inputPath);\n+            if (!Files.isRegularFile(path, array)) {\n+                throw new IllegalArgumentException(\"Cannot determine type of file \" + path);\n             }\n             this.setMode(32768L);\n         }\n-        this.setTime(Files.getLastModifiedTime(inputPath, options));\n+        this.setTime(Files.getLastModifiedTime(path, array));\n     }\n     \n     private void checkNewFormat() {\n         if ((this.fileFormat & 0x3) == 0x0) {\n             throw new UnsupportedOperationException();\n         }\n     }\n@@ -180,37 +180,36 @@\n         }\n         if (charset == null) {\n             return this.getHeaderPadCount(this.name.length());\n         }\n         return this.getHeaderPadCount(this.name.getBytes(charset).length);\n     }\n     \n-    public int getHeaderPadCount(final long nameSize) {\n+    public int getHeaderPadCount(final long n) {\n         if (this.alignmentBoundary == 0) {\n             return 0;\n         }\n-        int size = this.headerSize + 1;\n+        int add = this.headerSize + 1;\n         if (this.name != null) {\n-            size = ExactMath.add(size, nameSize);\n+            add = ExactMath.add(add, n);\n         }\n-        final int remain = size % this.alignmentBoundary;\n-        if (remain > 0) {\n-            return this.alignmentBoundary - remain;\n+        final int n2 = add % this.alignmentBoundary;\n+        if (n2 > 0) {\n+            return this.alignmentBoundary - n2;\n         }\n         return 0;\n     }\n     \n     public int getDataPadCount() {\n         if (this.alignmentBoundary == 0) {\n             return 0;\n         }\n-        final long size = this.filesize;\n-        final int remain = (int)(size % this.alignmentBoundary);\n-        if (remain > 0) {\n-            return this.alignmentBoundary - remain;\n+        final int n = (int)(this.filesize % this.alignmentBoundary);\n+        if (n > 0) {\n+            return this.alignmentBoundary - n;\n         }\n         return 0;\n     }\n     \n     public long getInode() {\n         return this.inode;\n     }\n@@ -282,117 +281,117 @@\n         return CpioUtil.fileType(this.mode) == 49152L;\n     }\n     \n     public boolean isSymbolicLink() {\n         return CpioUtil.fileType(this.mode) == 40960L;\n     }\n     \n-    public void setChksum(final long chksum) {\n+    public void setChksum(final long n) {\n         this.checkNewFormat();\n-        this.chksum = (chksum & 0xFFFFFFFFL);\n+        this.chksum = (n & 0xFFFFFFFFL);\n     }\n     \n-    public void setDevice(final long device) {\n+    public void setDevice(final long min) {\n         this.checkOldFormat();\n-        this.min = device;\n+        this.min = min;\n     }\n     \n     public void setDeviceMaj(final long maj) {\n         this.checkNewFormat();\n         this.maj = maj;\n     }\n     \n     public void setDeviceMin(final long min) {\n         this.checkNewFormat();\n         this.min = min;\n     }\n     \n-    public void setSize(final long size) {\n-        if (size < 0L || size > 4294967295L) {\n-            throw new IllegalArgumentException(\"Invalid entry size <\" + size + \">\");\n+    public void setSize(final long n) {\n+        if (n < 0L || n > 4294967295L) {\n+            throw new IllegalArgumentException(\"Invalid entry size <\" + n + \">\");\n         }\n-        this.filesize = size;\n+        this.filesize = n;\n     }\n     \n     public void setGID(final long gid) {\n         this.gid = gid;\n     }\n     \n     public void setInode(final long inode) {\n         this.inode = inode;\n     }\n     \n-    public void setMode(final long mode) {\n-        final long maskedMode = mode & 0xF000L;\n-        switch ((int)maskedMode) {\n+    public void setMode(final long n) {\n+        final long i = n & 0xF000L;\n+        switch ((int)i) {\n             case 4096:\n             case 8192:\n             case 16384:\n             case 24576:\n             case 32768:\n             case 36864:\n             case 40960:\n             case 49152: {\n-                this.mode = mode;\n+                this.mode = n;\n                 return;\n             }\n             default: {\n-                throw new IllegalArgumentException(\"Unknown mode. Full: \" + Long.toHexString(mode) + \" Masked: \" + Long.toHexString(maskedMode));\n+                throw new IllegalArgumentException(\"Unknown mode. Full: \" + Long.toHexString(n) + \" Masked: \" + Long.toHexString(i));\n             }\n         }\n     }\n     \n     public void setName(final String name) {\n         this.name = name;\n     }\n     \n     public void setNumberOfLinks(final long nlink) {\n         this.nlink = nlink;\n     }\n     \n-    public void setRemoteDevice(final long device) {\n+    public void setRemoteDevice(final long rmin) {\n         this.checkOldFormat();\n-        this.rmin = device;\n+        this.rmin = rmin;\n     }\n     \n     public void setRemoteDeviceMaj(final long rmaj) {\n         this.checkNewFormat();\n         this.rmaj = rmaj;\n     }\n     \n     public void setRemoteDeviceMin(final long rmin) {\n         this.checkNewFormat();\n         this.rmin = rmin;\n     }\n     \n-    public void setTime(final long time) {\n-        this.mtime = time;\n+    public void setTime(final long mtime) {\n+        this.mtime = mtime;\n     }\n     \n-    public void setTime(final FileTime time) {\n-        this.mtime = time.to(TimeUnit.SECONDS);\n+    public void setTime(final FileTime fileTime) {\n+        this.mtime = fileTime.to(TimeUnit.SECONDS);\n     }\n     \n     public void setUID(final long uid) {\n         this.uid = uid;\n     }\n     \n     @Override\n     public int hashCode() {\n         return Objects.hash(this.name);\n     }\n     \n     @Override\n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n             return true;\n         }\n-        if (obj == null || this.getClass() != obj.getClass()) {\n+        if (o == null || this.getClass() != o.getClass()) {\n             return false;\n         }\n-        final CpioArchiveEntry other = (CpioArchiveEntry)obj;\n+        final CpioArchiveEntry cpioArchiveEntry = (CpioArchiveEntry)o;\n         if (this.name == null) {\n-            return other.name == null;\n+            return cpioArchiveEntry.name == null;\n         }\n-        return this.name.equals(other.name);\n+        return this.name.equals(cpioArchiveEntry.name);\n     }\n }\n"}]}
