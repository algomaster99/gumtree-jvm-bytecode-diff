{"diffoscope-json-version": 1, "source1": "first/Zip64ExtendedInformationExtraField.class", "source2": "second/Zip64ExtendedInformationExtraField.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,175 +1,175 @@\n-  SHA-256 checksum 0aba14b614640ba78d8cc8610f0bae3358a5713ec1daa015a81cbcfdd0671352\n+  SHA-256 checksum a4f3f4e956529380161331e34151778c713e8485914ebb398ed51b55921ffef7\n   Compiled from \"Zip64ExtendedInformationExtraField.java\"\n public class org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField implements org.apache.commons.compress.archivers.zip.ZipExtraField\n   minor version: 0\n-  major version: 51\n+  major version: 53\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #12                         // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-  super_class: #37                        // java/lang/Object\n-  interfaces: 1, fields: 8, methods: 21, attributes: 1\n+  super_class: #31                        // java/lang/Object\n+  interfaces: 1, fields: 8, methods: 21, attributes: 3\n Constant pool:\n-    #1 = Class              #110          // org/apache/commons/compress/archivers/zip/ZipConstants\n-    #2 = Methodref          #37.#111      // java/lang/Object.\"<init>\":()V\n-    #3 = Methodref          #12.#112      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n-    #4 = Fieldref           #12.#113      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-    #5 = Fieldref           #12.#114      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-    #6 = Fieldref           #12.#115      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-    #7 = Fieldref           #12.#116      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-    #8 = Fieldref           #12.#117      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-    #9 = Class              #118          // org/apache/commons/compress/archivers/zip/ZipShort\n-   #10 = Methodref          #9.#119       // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-   #11 = Class              #120          // java/lang/IllegalArgumentException\n-   #12 = Class              #121          // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-   #13 = String             #122          // Zip64 extended information must contain both size values in the local file header.\n-   #14 = Methodref          #11.#123      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #15 = Methodref          #12.#124      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.addSizes:([B)I\n-   #16 = Fieldref           #12.#125      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.EMPTY:[B\n-   #17 = Methodref          #12.#126      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCentralDirectoryLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #18 = Methodref          #9.#127       // org/apache/commons/compress/archivers/zip/ZipShort.getValue:()I\n-   #19 = Methodref          #24.#128      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:()[B\n-   #20 = Methodref          #129.#130     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #21 = Methodref          #26.#128      // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n-   #22 = Class              #131          // java/util/zip/ZipException\n-   #23 = Methodref          #22.#123      // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-   #24 = Class              #132          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-   #25 = Methodref          #24.#133      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-   #26 = Class              #134          // org/apache/commons/compress/archivers/zip/ZipLong\n-   #27 = Methodref          #26.#133      // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n-   #28 = Fieldref           #12.#135      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.rawCentralDirectoryData:[B\n-   #29 = Methodref          #12.#136      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.parseFromLocalFileData:([BII)V\n-   #30 = Class              #137          // java/lang/StringBuilder\n-   #31 = Methodref          #30.#111      // java/lang/StringBuilder.\"<init>\":()V\n-   #32 = String             #138          // Central directory zip64 extended information extra field\\'s length doesn\\'t match central directory data.  Expected length\n-   #33 = Methodref          #30.#139      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #34 = Methodref          #30.#140      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #35 = String             #141          //  but is\n-   #36 = Methodref          #30.#142      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #37 = Class              #143          // java/lang/Object\n-   #38 = Class              #144          // org/apache/commons/compress/archivers/zip/ZipExtraField\n-   #39 = Utf8               HEADER_ID\n-   #40 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #41 = Utf8               LFH_MUST_HAVE_BOTH_SIZES_MSG\n-   #42 = Utf8               Ljava/lang/String;\n-   #43 = Utf8               ConstantValue\n-   #44 = Utf8               EMPTY\n-   #45 = Utf8               [B\n-   #46 = Utf8               size\n-   #47 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #48 = Utf8               compressedSize\n-   #49 = Utf8               relativeHeaderOffset\n-   #50 = Utf8               diskStart\n-   #51 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #52 = Utf8               rawCentralDirectoryData\n-   #53 = Utf8               <init>\n-   #54 = Utf8               ()V\n-   #55 = Utf8               Code\n-   #56 = Utf8               LineNumberTable\n-   #57 = Utf8               LocalVariableTable\n-   #58 = Utf8               this\n-   #59 = Utf8               Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n-   #60 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #61 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n-   #62 = Utf8               getHeaderId\n-   #63 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #64 = Utf8               getLocalFileDataLength\n-   #65 = Utf8               StackMapTable\n-   #66 = Class              #121          // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-   #67 = Utf8               getCentralDirectoryLength\n-   #68 = Utf8               getLocalFileDataData\n-   #69 = Utf8               ()[B\n-   #70 = Utf8               data\n-   #71 = Utf8               getCentralDirectoryData\n-   #72 = Utf8               off\n-   #73 = Utf8               I\n-   #74 = Class              #45           // \"[B\"\n-   #75 = Utf8               parseFromLocalFileData\n-   #76 = Utf8               ([BII)V\n-   #77 = Utf8               buffer\n-   #78 = Utf8               offset\n-   #79 = Utf8               length\n-   #80 = Utf8               remaining\n-   #81 = Utf8               Exceptions\n-   #82 = Utf8               parseFromCentralDirectoryData\n-   #83 = Utf8               reparseCentralDirectoryData\n-   #84 = Utf8               (ZZZZ)V\n-   #85 = Utf8               expectedLength\n-   #86 = Utf8               hasUncompressedSize\n-   #87 = Utf8               Z\n-   #88 = Utf8               hasCompressedSize\n-   #89 = Utf8               hasRelativeHeaderOffset\n-   #90 = Utf8               hasDiskStart\n-   #91 = Utf8               getSize\n-   #92 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #93 = Utf8               setSize\n-   #94 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #95 = Utf8               getCompressedSize\n-   #96 = Utf8               setCompressedSize\n-   #97 = Utf8               getRelativeHeaderOffset\n-   #98 = Utf8               setRelativeHeaderOffset\n-   #99 = Utf8               rho\n-  #100 = Utf8               getDiskStartNumber\n-  #101 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #102 = Utf8               setDiskStartNumber\n-  #103 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n-  #104 = Utf8               ds\n-  #105 = Utf8               addSizes\n-  #106 = Utf8               ([B)I\n-  #107 = Utf8               <clinit>\n-  #108 = Utf8               SourceFile\n-  #109 = Utf8               Zip64ExtendedInformationExtraField.java\n-  #110 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n-  #111 = NameAndType        #53:#54       // \"<init>\":()V\n-  #112 = NameAndType        #53:#61       // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n-  #113 = NameAndType        #46:#47       // size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #114 = NameAndType        #48:#47       // compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #115 = NameAndType        #49:#47       // relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #116 = NameAndType        #50:#51       // diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #117 = NameAndType        #39:#40       // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #118 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-  #119 = NameAndType        #53:#145      // \"<init>\":(I)V\n-  #120 = Utf8               java/lang/IllegalArgumentException\n-  #121 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-  #122 = Utf8               Zip64 extended information must contain both size values in the local file header.\n-  #123 = NameAndType        #53:#146      // \"<init>\":(Ljava/lang/String;)V\n-  #124 = NameAndType        #105:#106     // addSizes:([B)I\n-  #125 = NameAndType        #44:#45       // EMPTY:[B\n-  #126 = NameAndType        #67:#63       // getCentralDirectoryLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #127 = NameAndType        #147:#148     // getValue:()I\n-  #128 = NameAndType        #149:#69      // getBytes:()[B\n-  #129 = Class              #150          // java/lang/System\n-  #130 = NameAndType        #151:#152     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #131 = Utf8               java/util/zip/ZipException\n-  #132 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  #133 = NameAndType        #53:#153      // \"<init>\":([BI)V\n-  #134 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-  #135 = NameAndType        #52:#45       // rawCentralDirectoryData:[B\n-  #136 = NameAndType        #75:#76       // parseFromLocalFileData:([BII)V\n-  #137 = Utf8               java/lang/StringBuilder\n-  #138 = Utf8               Central directory zip64 extended information extra field\\'s length doesn\\'t match central directory data.  Expected length\n-  #139 = NameAndType        #154:#155     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #140 = NameAndType        #154:#156     // append:(I)Ljava/lang/StringBuilder;\n-  #141 = Utf8                but is\n-  #142 = NameAndType        #157:#158     // toString:()Ljava/lang/String;\n-  #143 = Utf8               java/lang/Object\n-  #144 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n-  #145 = Utf8               (I)V\n-  #146 = Utf8               (Ljava/lang/String;)V\n-  #147 = Utf8               getValue\n-  #148 = Utf8               ()I\n-  #149 = Utf8               getBytes\n-  #150 = Utf8               java/lang/System\n-  #151 = Utf8               arraycopy\n-  #152 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #153 = Utf8               ([BI)V\n-  #154 = Utf8               append\n-  #155 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #156 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #157 = Utf8               toString\n-  #158 = Utf8               ()Ljava/lang/String;\n+    #1 = Class              #103          // org/apache/commons/compress/archivers/zip/ZipConstants\n+    #2 = Methodref          #31.#104      // java/lang/Object.\"<init>\":()V\n+    #3 = Methodref          #12.#105      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+    #4 = Fieldref           #12.#106      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+    #5 = Fieldref           #12.#107      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+    #6 = Fieldref           #12.#108      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+    #7 = Fieldref           #12.#109      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+    #8 = Fieldref           #12.#110      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+    #9 = Class              #111          // org/apache/commons/compress/archivers/zip/ZipShort\n+   #10 = Methodref          #9.#112       // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+   #11 = Class              #113          // java/lang/IllegalArgumentException\n+   #12 = Class              #114          // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+   #13 = String             #115          // Zip64 extended information must contain both size values in the local file header.\n+   #14 = Methodref          #11.#116      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #15 = Methodref          #12.#117      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.addSizes:([B)I\n+   #16 = Fieldref           #12.#118      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.EMPTY:[B\n+   #17 = Methodref          #12.#119      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCentralDirectoryLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #18 = Methodref          #9.#120       // org/apache/commons/compress/archivers/zip/ZipShort.getValue:()I\n+   #19 = Methodref          #24.#121      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:()[B\n+   #20 = Methodref          #122.#123     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #21 = Methodref          #26.#121      // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n+   #22 = Class              #124          // java/util/zip/ZipException\n+   #23 = Methodref          #22.#116      // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+   #24 = Class              #125          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+   #25 = Methodref          #24.#126      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+   #26 = Class              #127          // org/apache/commons/compress/archivers/zip/ZipLong\n+   #27 = Methodref          #26.#126      // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n+   #28 = Fieldref           #12.#128      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.rawCentralDirectoryData:[B\n+   #29 = Methodref          #12.#129      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.parseFromLocalFileData:([BII)V\n+   #30 = InvokeDynamic      #0:#133       // #0:makeConcatWithConstants:(II)Ljava/lang/String;\n+   #31 = Class              #134          // java/lang/Object\n+   #32 = Class              #135          // org/apache/commons/compress/archivers/zip/ZipExtraField\n+   #33 = Utf8               HEADER_ID\n+   #34 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #35 = Utf8               LFH_MUST_HAVE_BOTH_SIZES_MSG\n+   #36 = Utf8               Ljava/lang/String;\n+   #37 = Utf8               ConstantValue\n+   #38 = Utf8               EMPTY\n+   #39 = Utf8               [B\n+   #40 = Utf8               size\n+   #41 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #42 = Utf8               compressedSize\n+   #43 = Utf8               relativeHeaderOffset\n+   #44 = Utf8               diskStart\n+   #45 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #46 = Utf8               rawCentralDirectoryData\n+   #47 = Utf8               <init>\n+   #48 = Utf8               ()V\n+   #49 = Utf8               Code\n+   #50 = Utf8               LineNumberTable\n+   #51 = Utf8               LocalVariableTable\n+   #52 = Utf8               this\n+   #53 = Utf8               Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n+   #54 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #55 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+   #56 = Utf8               getHeaderId\n+   #57 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #58 = Utf8               getLocalFileDataLength\n+   #59 = Utf8               StackMapTable\n+   #60 = Utf8               getCentralDirectoryLength\n+   #61 = Utf8               getLocalFileDataData\n+   #62 = Utf8               ()[B\n+   #63 = Utf8               data\n+   #64 = Utf8               getCentralDirectoryData\n+   #65 = Utf8               off\n+   #66 = Utf8               I\n+   #67 = Class              #39           // \"[B\"\n+   #68 = Utf8               parseFromLocalFileData\n+   #69 = Utf8               ([BII)V\n+   #70 = Utf8               buffer\n+   #71 = Utf8               offset\n+   #72 = Utf8               length\n+   #73 = Utf8               remaining\n+   #74 = Utf8               Exceptions\n+   #75 = Utf8               parseFromCentralDirectoryData\n+   #76 = Utf8               reparseCentralDirectoryData\n+   #77 = Utf8               (ZZZZ)V\n+   #78 = Utf8               expectedLength\n+   #79 = Utf8               hasUncompressedSize\n+   #80 = Utf8               Z\n+   #81 = Utf8               hasCompressedSize\n+   #82 = Utf8               hasRelativeHeaderOffset\n+   #83 = Utf8               hasDiskStart\n+   #84 = Utf8               getSize\n+   #85 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #86 = Utf8               setSize\n+   #87 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #88 = Utf8               getCompressedSize\n+   #89 = Utf8               setCompressedSize\n+   #90 = Utf8               getRelativeHeaderOffset\n+   #91 = Utf8               setRelativeHeaderOffset\n+   #92 = Utf8               rho\n+   #93 = Utf8               getDiskStartNumber\n+   #94 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #95 = Utf8               setDiskStartNumber\n+   #96 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+   #97 = Utf8               ds\n+   #98 = Utf8               addSizes\n+   #99 = Utf8               ([B)I\n+  #100 = Utf8               <clinit>\n+  #101 = Utf8               SourceFile\n+  #102 = Utf8               Zip64ExtendedInformationExtraField.java\n+  #103 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n+  #104 = NameAndType        #47:#48       // \"<init>\":()V\n+  #105 = NameAndType        #47:#55       // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+  #106 = NameAndType        #40:#41       // size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #107 = NameAndType        #42:#41       // compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #108 = NameAndType        #43:#41       // relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #109 = NameAndType        #44:#45       // diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #110 = NameAndType        #33:#34       // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #111 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+  #112 = NameAndType        #47:#136      // \"<init>\":(I)V\n+  #113 = Utf8               java/lang/IllegalArgumentException\n+  #114 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+  #115 = Utf8               Zip64 extended information must contain both size values in the local file header.\n+  #116 = NameAndType        #47:#137      // \"<init>\":(Ljava/lang/String;)V\n+  #117 = NameAndType        #98:#99       // addSizes:([B)I\n+  #118 = NameAndType        #38:#39       // EMPTY:[B\n+  #119 = NameAndType        #60:#57       // getCentralDirectoryLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #120 = NameAndType        #138:#139     // getValue:()I\n+  #121 = NameAndType        #140:#62      // getBytes:()[B\n+  #122 = Class              #141          // java/lang/System\n+  #123 = NameAndType        #142:#143     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #124 = Utf8               java/util/zip/ZipException\n+  #125 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+  #126 = NameAndType        #47:#144      // \"<init>\":([BI)V\n+  #127 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+  #128 = NameAndType        #46:#39       // rawCentralDirectoryData:[B\n+  #129 = NameAndType        #68:#69       // parseFromLocalFileData:([BII)V\n+  #130 = Utf8               BootstrapMethods\n+  #131 = MethodHandle       6:#145        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #132 = String             #146          // Central directory zip64 extended information extra field\\'s length doesn\\'t match central directory data.  Expected length \\u0001 but is \\u0001\n+  #133 = NameAndType        #147:#148     // makeConcatWithConstants:(II)Ljava/lang/String;\n+  #134 = Utf8               java/lang/Object\n+  #135 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n+  #136 = Utf8               (I)V\n+  #137 = Utf8               (Ljava/lang/String;)V\n+  #138 = Utf8               getValue\n+  #139 = Utf8               ()I\n+  #140 = Utf8               getBytes\n+  #141 = Utf8               java/lang/System\n+  #142 = Utf8               arraycopy\n+  #143 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #144 = Utf8               ([BI)V\n+  #145 = Methodref          #149.#150     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #146 = Utf8               Central directory zip64 extended information extra field\\'s length doesn\\'t match central directory data.  Expected length \\u0001 but is \\u0001\n+  #147 = Utf8               makeConcatWithConstants\n+  #148 = Utf8               (II)Ljava/lang/String;\n+  #149 = Class              #151          // java/lang/invoke/StringConcatFactory\n+  #150 = NameAndType        #147:#155     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #151 = Utf8               java/lang/invoke/StringConcatFactory\n+  #152 = Class              #157          // java/lang/invoke/MethodHandles$Lookup\n+  #153 = Utf8               Lookup\n+  #154 = Utf8               InnerClasses\n+  #155 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #156 = Class              #158          // java/lang/invoke/MethodHandles\n+  #157 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #158 = Utf8               java/lang/invoke/MethodHandles\n {\n   static final org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x0018) ACC_STATIC, ACC_FINAL\n \n   private static final java.lang.String LFH_MUST_HAVE_BOTH_SIZES_MSG = \"Zip64 extended information must contain both size values in the local file header.\";\n     descriptor: Ljava/lang/String;\n@@ -347,14 +347,18 @@\n         53: goto          57\n         56: iconst_0\n         57: iadd\n         58: invokespecial #10                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n         61: areturn\n       LineNumberTable:\n         line 118: 0\n+        line 119: 17\n+        line 120: 31\n+        line 121: 45\n+        line 118: 61\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      62     0  this   Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n       StackMapTable: number_of_entries = 8\n         frame_type = 255 /* full_frame */\n           offset_delta = 16\n           locals = [ class org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField ]\n@@ -696,15 +700,15 @@\n   public void reparseCentralDirectoryData(boolean, boolean, boolean, boolean) throws java.util.zip.ZipException;\n     descriptor: (ZZZZ)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=7, args_size=5\n          0: aload_0\n          1: getfield      #28                 // Field rawCentralDirectoryData:[B\n-         4: ifnull        203\n+         4: ifnull        182\n          7: iload_1\n          8: ifeq          16\n         11: bipush        8\n         13: goto          17\n         16: iconst_0\n         17: iload_2\n         18: ifeq          26\n@@ -725,108 +729,102 @@\n         48: iconst_0\n         49: iadd\n         50: istore        5\n         52: aload_0\n         53: getfield      #28                 // Field rawCentralDirectoryData:[B\n         56: arraylength\n         57: iload         5\n-        59: if_icmpge     103\n+        59: if_icmpge     82\n         62: new           #22                 // class java/util/zip/ZipException\n         65: dup\n-        66: new           #30                 // class java/lang/StringBuilder\n-        69: dup\n-        70: invokespecial #31                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        73: ldc           #32                 // String Central directory zip64 extended information extra field\\'s length doesn\\'t match central directory data.  Expected length\n-        75: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        78: iload         5\n-        80: invokevirtual #34                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        83: ldc           #35                 // String  but is\n-        85: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        88: aload_0\n-        89: getfield      #28                 // Field rawCentralDirectoryData:[B\n-        92: arraylength\n-        93: invokevirtual #34                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        96: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        99: invokespecial #23                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-       102: athrow\n-       103: iconst_0\n-       104: istore        6\n-       106: iload_1\n-       107: ifeq          130\n-       110: aload_0\n-       111: new           #24                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-       114: dup\n-       115: aload_0\n-       116: getfield      #28                 // Field rawCentralDirectoryData:[B\n-       119: iload         6\n-       121: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-       124: putfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-       127: iinc          6, 8\n-       130: iload_2\n-       131: ifeq          154\n-       134: aload_0\n-       135: new           #24                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-       138: dup\n-       139: aload_0\n-       140: getfield      #28                 // Field rawCentralDirectoryData:[B\n-       143: iload         6\n-       145: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-       148: putfield      #5                  // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-       151: iinc          6, 8\n-       154: iload_3\n-       155: ifeq          178\n-       158: aload_0\n-       159: new           #24                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-       162: dup\n-       163: aload_0\n-       164: getfield      #28                 // Field rawCentralDirectoryData:[B\n-       167: iload         6\n-       169: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-       172: putfield      #6                  // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-       175: iinc          6, 8\n-       178: iload         4\n-       180: ifeq          203\n-       183: aload_0\n-       184: new           #26                 // class org/apache/commons/compress/archivers/zip/ZipLong\n-       187: dup\n-       188: aload_0\n-       189: getfield      #28                 // Field rawCentralDirectoryData:[B\n-       192: iload         6\n-       194: invokespecial #27                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n-       197: putfield      #7                  // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-       200: iinc          6, 4\n-       203: return\n+        66: iload         5\n+        68: aload_0\n+        69: getfield      #28                 // Field rawCentralDirectoryData:[B\n+        72: arraylength\n+        73: invokedynamic #30,  0             // InvokeDynamic #0:makeConcatWithConstants:(II)Ljava/lang/String;\n+        78: invokespecial #23                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        81: athrow\n+        82: iconst_0\n+        83: istore        6\n+        85: iload_1\n+        86: ifeq          109\n+        89: aload_0\n+        90: new           #24                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+        93: dup\n+        94: aload_0\n+        95: getfield      #28                 // Field rawCentralDirectoryData:[B\n+        98: iload         6\n+       100: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+       103: putfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+       106: iinc          6, 8\n+       109: iload_2\n+       110: ifeq          133\n+       113: aload_0\n+       114: new           #24                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+       117: dup\n+       118: aload_0\n+       119: getfield      #28                 // Field rawCentralDirectoryData:[B\n+       122: iload         6\n+       124: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+       127: putfield      #5                  // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+       130: iinc          6, 8\n+       133: iload_3\n+       134: ifeq          157\n+       137: aload_0\n+       138: new           #24                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+       141: dup\n+       142: aload_0\n+       143: getfield      #28                 // Field rawCentralDirectoryData:[B\n+       146: iload         6\n+       148: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+       151: putfield      #6                  // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+       154: iinc          6, 8\n+       157: iload         4\n+       159: ifeq          182\n+       162: aload_0\n+       163: new           #26                 // class org/apache/commons/compress/archivers/zip/ZipLong\n+       166: dup\n+       167: aload_0\n+       168: getfield      #28                 // Field rawCentralDirectoryData:[B\n+       171: iload         6\n+       173: invokespecial #27                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n+       176: putfield      #7                  // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+       179: iinc          6, 4\n+       182: return\n       LineNumberTable:\n         line 229: 0\n         line 230: 7\n+        line 231: 17\n+        line 232: 28\n+        line 233: 39\n         line 234: 52\n         line 235: 62\n-        line 242: 103\n-        line 243: 106\n-        line 244: 110\n-        line 245: 127\n-        line 247: 130\n-        line 248: 134\n-        line 250: 151\n-        line 252: 154\n-        line 253: 158\n-        line 255: 175\n-        line 257: 178\n-        line 258: 183\n-        line 259: 200\n-        line 262: 203\n+        line 242: 82\n+        line 243: 85\n+        line 244: 89\n+        line 245: 106\n+        line 247: 109\n+        line 248: 113\n+        line 250: 130\n+        line 252: 133\n+        line 253: 137\n+        line 255: 154\n+        line 257: 157\n+        line 258: 162\n+        line 259: 179\n+        line 262: 182\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           52     151     5 expectedLength   I\n-          106      97     6 offset   I\n-            0     204     0  this   Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n-            0     204     1 hasUncompressedSize   Z\n-            0     204     2 hasCompressedSize   Z\n-            0     204     3 hasRelativeHeaderOffset   Z\n-            0     204     4 hasDiskStart   Z\n+           52     130     5 expectedLength   I\n+           85      97     6 offset   I\n+            0     183     0  this   Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n+            0     183     1 hasUncompressedSize   Z\n+            0     183     2 hasCompressedSize   Z\n+            0     183     3 hasRelativeHeaderOffset   Z\n+            0     183     4 hasDiskStart   Z\n       StackMapTable: number_of_entries = 13\n         frame_type = 16 /* same */\n         frame_type = 64 /* same_locals_1_stack_item */\n           stack = [ int ]\n         frame_type = 72 /* same_locals_1_stack_item */\n           stack = [ int ]\n         frame_type = 255 /* full_frame */\n@@ -842,15 +840,15 @@\n         frame_type = 73 /* same_locals_1_stack_item */\n           stack = [ int ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 0\n           locals = [ class org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField, int, int, int, int ]\n           stack = [ int, int ]\n         frame_type = 252 /* append */\n-          offset_delta = 53\n+          offset_delta = 32\n           locals = [ int ]\n         frame_type = 252 /* append */\n           offset_delta = 26\n           locals = [ int ]\n         frame_type = 23 /* same */\n         frame_type = 23 /* same */\n         frame_type = 249 /* chop */\n@@ -1050,7 +1048,13 @@\n         14: putstatic     #16                 // Field EMPTY:[B\n         17: return\n       LineNumberTable:\n         line 45: 0\n         line 50: 11\n }\n SourceFile: \"Zip64ExtendedInformationExtraField.java\"\n+InnerClasses:\n+  public static final #153= #152 of #156; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n+BootstrapMethods:\n+  0: #131 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+    Method arguments:\n+      #132 Central directory zip64 extended information extra field\\'s length doesn\\'t match central directory data.  Expected length \\u0001 but is \\u0001\n"}]}
