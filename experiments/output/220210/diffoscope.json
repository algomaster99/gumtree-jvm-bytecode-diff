{"diffoscope-json-version": 1, "source1": "first/SingleLineJavadocCheck.class", "source2": "second/SingleLineJavadocCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -16,56 +16,55 @@\n     private boolean ignoreInlineTags;\n     \n     public SingleLineJavadocCheck() {\n         this.ignoredTags = Set.of();\n         this.ignoreInlineTags = true;\n     }\n     \n-    public void setIgnoredTags(final String... tags) {\n-        this.ignoredTags = Set.of(tags);\n+    public void setIgnoredTags(final String... elements) {\n+        this.ignoredTags = Set.of(elements);\n     }\n     \n     public void setIgnoreInlineTags(final boolean ignoreInlineTags) {\n         this.ignoreInlineTags = ignoreInlineTags;\n     }\n     \n     public int[] getDefaultJavadocTokens() {\n         return new int[] { 10000 };\n     }\n     \n     public int[] getRequiredJavadocTokens() {\n         return this.getAcceptableJavadocTokens();\n     }\n     \n-    public void visitJavadocToken(final DetailNode ast) {\n-        if (isSingleLineJavadoc(this.getBlockCommentAst()) && (this.hasJavadocTags(ast) || (!this.ignoreInlineTags && this.hasJavadocInlineTags(ast)))) {\n-            this.log(ast.getLineNumber(), \"singleline.javadoc\", new Object[0]);\n+    public void visitJavadocToken(final DetailNode detailNode) {\n+        if (isSingleLineJavadoc(this.getBlockCommentAst()) && (this.hasJavadocTags(detailNode) || (!this.ignoreInlineTags && this.hasJavadocInlineTags(detailNode)))) {\n+            this.log(detailNode.getLineNumber(), \"singleline.javadoc\", new Object[0]);\n         }\n     }\n     \n-    private static boolean isSingleLineJavadoc(final DetailAST blockCommentStart) {\n-        final DetailAST blockCommentEnd = blockCommentStart.getLastChild();\n-        return TokenUtil.areOnSameLine(blockCommentStart, blockCommentEnd);\n-    }\n-    \n-    private boolean hasJavadocTags(final DetailNode javadocRoot) {\n-        final DetailNode javadocTagSection = JavadocUtil.findFirstToken(javadocRoot, 10071);\n-        return javadocTagSection != null && !this.isTagIgnored(javadocTagSection);\n-    }\n-    \n-    private boolean hasJavadocInlineTags(final DetailNode javadocRoot) {\n-        DetailNode javadocTagSection = JavadocUtil.findFirstToken(javadocRoot, 10072);\n-        boolean foundTag = false;\n-        while (javadocTagSection != null) {\n-            if (!this.isTagIgnored(javadocTagSection)) {\n-                foundTag = true;\n+    private static boolean isSingleLineJavadoc(final DetailAST detailAST) {\n+        return TokenUtil.areOnSameLine(detailAST, detailAST.getLastChild());\n+    }\n+    \n+    private boolean hasJavadocTags(final DetailNode detailNode) {\n+        final DetailNode firstToken = JavadocUtil.findFirstToken(detailNode, 10071);\n+        return firstToken != null && !this.isTagIgnored(firstToken);\n+    }\n+    \n+    private boolean hasJavadocInlineTags(final DetailNode detailNode) {\n+        DetailNode detailNode2 = JavadocUtil.findFirstToken(detailNode, 10072);\n+        boolean b = false;\n+        while (detailNode2 != null) {\n+            if (!this.isTagIgnored(detailNode2)) {\n+                b = true;\n                 break;\n             }\n-            javadocTagSection = JavadocUtil.getNextSibling(javadocTagSection, 10072);\n+            detailNode2 = JavadocUtil.getNextSibling(detailNode2, 10072);\n         }\n-        return foundTag;\n+        return b;\n     }\n     \n-    private boolean isTagIgnored(final DetailNode javadocTagSection) {\n-        return this.ignoredTags.contains(JavadocUtil.getTagName(javadocTagSection));\n+    private boolean isTagIgnored(final DetailNode detailNode) {\n+        return this.ignoredTags.contains(JavadocUtil.getTagName(detailNode));\n     }\n }\n"}]}
