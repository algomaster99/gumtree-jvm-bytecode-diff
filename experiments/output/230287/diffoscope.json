{"diffoscope-json-version": 1, "source1": "first/NewAttributeBands$Replication.class", "source2": "second/NewAttributeBands$Replication.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,40 +19,42 @@\n         return this.countElement;\n     }\n     \n     public List getLayoutElements() {\n         return this.layoutElements;\n     }\n     \n-    public Replication(final NewAttributeBands this$0, final String tag, final String contents) throws IOException {\n+    public Replication(final NewAttributeBands this$0, final String s, final String s2) throws IOException {\n         super(this.this$0 = this$0);\n         this.layoutElements = new ArrayList();\n-        this.countElement = new NewAttributeBands.Integral(this$0, tag);\n-        final StringReader stream = new StringReader(contents);\n-        NewAttributeBands.LayoutElement e;\n-        while ((e = NewAttributeBands.access$600(this$0, stream)) != null) {\n-            this.layoutElements.add(e);\n+        this.countElement = new NewAttributeBands.Integral(this$0, s);\n+        NewAttributeBands.LayoutElement access$600;\n+        while ((access$600 = NewAttributeBands.access$600(this$0, new StringReader(s2))) != null) {\n+            this.layoutElements.add(access$600);\n         }\n     }\n     \n-    public void addAttributeToBand(final NewAttribute attribute, final InputStream stream) {\n-        this.countElement.addAttributeToBand(attribute, stream);\n-        for (int count = this.countElement.latestValue(), i = 0; i < count; ++i) {\n-            for (final NewAttributeBands.AttributeLayoutElement layoutElement : this.layoutElements) {\n-                layoutElement.addAttributeToBand(attribute, stream);\n+    public void addAttributeToBand(final NewAttribute newAttribute, final InputStream inputStream) {\n+        this.countElement.addAttributeToBand(newAttribute, inputStream);\n+        for (int latestValue = this.countElement.latestValue(), i = 0; i < latestValue; ++i) {\n+            final Iterator iterator = this.layoutElements.iterator();\n+            while (iterator.hasNext()) {\n+                ((NewAttributeBands.AttributeLayoutElement)iterator.next()).addAttributeToBand(newAttribute, inputStream);\n             }\n         }\n     }\n     \n-    public void pack(final OutputStream out) throws IOException, Pack200Exception {\n-        this.countElement.pack(out);\n-        for (final NewAttributeBands.AttributeLayoutElement layoutElement : this.layoutElements) {\n-            layoutElement.pack(out);\n+    public void pack(final OutputStream outputStream) throws IOException, Pack200Exception {\n+        this.countElement.pack(outputStream);\n+        final Iterator iterator = this.layoutElements.iterator();\n+        while (iterator.hasNext()) {\n+            ((NewAttributeBands.AttributeLayoutElement)iterator.next()).pack(outputStream);\n         }\n     }\n     \n-    public void renumberBci(final IntList bciRenumbering, final Map labelsToOffsets) {\n-        for (final NewAttributeBands.AttributeLayoutElement layoutElement : this.layoutElements) {\n-            layoutElement.renumberBci(bciRenumbering, labelsToOffsets);\n+    public void renumberBci(final IntList list, final Map map) {\n+        final Iterator iterator = this.layoutElements.iterator();\n+        while (iterator.hasNext()) {\n+            ((NewAttributeBands.AttributeLayoutElement)iterator.next()).renumberBci(list, map);\n         }\n     }\n }\n"}]}
