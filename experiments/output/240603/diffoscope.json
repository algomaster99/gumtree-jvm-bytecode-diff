{"diffoscope-json-version": 1, "source1": "first/SMTP.class", "source2": "second/SMTP.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -38,63 +38,63 @@\n         this.replyLines = new ArrayList<String>();\n         this.newReplyString = false;\n         this.replyString = null;\n         this._commandSupport_ = new ProtocolCommandSupport((Object)this);\n         this.encoding = encoding;\n     }\n     \n-    private int __sendCommand(final String command, final String args, final boolean includeSpace) throws IOException {\n-        final StringBuilder __commandBuffer = new StringBuilder();\n-        __commandBuffer.append(command);\n-        if (args != null) {\n-            if (includeSpace) {\n-                __commandBuffer.append(' ');\n+    private int __sendCommand(final String str, final String str2, final boolean b) throws IOException {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(str);\n+        if (str2 != null) {\n+            if (b) {\n+                sb.append(' ');\n             }\n-            __commandBuffer.append(args);\n+            sb.append(str2);\n         }\n-        __commandBuffer.append(\"\\r\\n\");\n-        final String message = __commandBuffer.toString();\n-        this.writer.write(message);\n+        sb.append(\"\\r\\n\");\n+        final String string = sb.toString();\n+        this.writer.write(string);\n         this.writer.flush();\n-        this.fireCommandSent(command, message);\n+        this.fireCommandSent(str, string);\n         this.__getReply();\n         return this.replyCode;\n     }\n     \n-    private int __sendCommand(final int command, final String args, final boolean includeSpace) throws IOException {\n-        return this.__sendCommand(SMTPCommand.getCommand(command), args, includeSpace);\n+    private int __sendCommand(final int n, final String s, final boolean b) throws IOException {\n+        return this.__sendCommand(SMTPCommand.getCommand(n), s, b);\n     }\n     \n     private void __getReply() throws IOException {\n         this.newReplyString = true;\n         this.replyLines.clear();\n-        String line = this.reader.readLine();\n+        final String line = this.reader.readLine();\n         if (line == null) {\n             throw new SMTPConnectionClosedException(\"Connection closed without indication.\");\n         }\n         final int length = line.length();\n         if (length < 3) {\n             throw new MalformedServerReplyException(\"Truncated server reply: \" + line);\n         }\n         try {\n-            final String code = line.substring(0, 3);\n-            this.replyCode = Integer.parseInt(code);\n+            this.replyCode = Integer.parseInt(line.substring(0, 3));\n         }\n-        catch (final NumberFormatException e) {\n+        catch (final NumberFormatException ex) {\n             throw new MalformedServerReplyException(\"Could not parse response code.\\nServer Reply: \" + line);\n         }\n         this.replyLines.add(line);\n         if (length > 3 && line.charAt(3) == '-') {\n+            String line2;\n             do {\n-                line = this.reader.readLine();\n-                if (line == null) {\n+                line2 = this.reader.readLine();\n+                if (line2 == null) {\n                     throw new SMTPConnectionClosedException(\"Connection closed without indication.\");\n                 }\n-                this.replyLines.add(line);\n-            } while (line.length() < 4 || line.charAt(3) == '-' || !Character.isDigit(line.charAt(0)));\n+                this.replyLines.add(line2);\n+            } while (line2.length() < 4 || line2.charAt(3) == '-' || !Character.isDigit(line2.charAt(0)));\n         }\n         this.fireReplyReceived(this.replyCode, this.getReplyString());\n         if (this.replyCode == 421) {\n             throw new SMTPConnectionClosedException(\"SMTP response 421 received.  Server closed connection.\");\n         }\n     }\n     \n@@ -110,28 +110,28 @@\n         this.reader = null;\n         this.writer = null;\n         this.replyString = null;\n         this.replyLines.clear();\n         this.newReplyString = false;\n     }\n     \n-    public int sendCommand(final String command, final String args) throws IOException {\n-        return this.__sendCommand(command, args, true);\n+    public int sendCommand(final String s, final String s2) throws IOException {\n+        return this.__sendCommand(s, s2, true);\n     }\n     \n-    public int sendCommand(final int command, final String args) throws IOException {\n-        return this.sendCommand(SMTPCommand.getCommand(command), args);\n+    public int sendCommand(final int n, final String s) throws IOException {\n+        return this.sendCommand(SMTPCommand.getCommand(n), s);\n     }\n     \n-    public int sendCommand(final String command) throws IOException {\n-        return this.sendCommand(command, null);\n+    public int sendCommand(final String s) throws IOException {\n+        return this.sendCommand(s, null);\n     }\n     \n-    public int sendCommand(final int command) throws IOException {\n-        return this.sendCommand(command, null);\n+    public int sendCommand(final int n) throws IOException {\n+        return this.sendCommand(n, null);\n     }\n     \n     public int getReplyCode() {\n         return this.replyCode;\n     }\n     \n     public int getReply() throws IOException {\n@@ -143,84 +143,85 @@\n         return this.replyLines.toArray(new String[this.replyLines.size()]);\n     }\n     \n     public String getReplyString() {\n         if (!this.newReplyString) {\n             return this.replyString;\n         }\n-        final StringBuilder buffer = new StringBuilder();\n-        for (final String line : this.replyLines) {\n-            buffer.append(line);\n-            buffer.append(\"\\r\\n\");\n+        final StringBuilder sb = new StringBuilder();\n+        final Iterator<String> iterator = this.replyLines.iterator();\n+        while (iterator.hasNext()) {\n+            sb.append(iterator.next());\n+            sb.append(\"\\r\\n\");\n         }\n         this.newReplyString = false;\n-        return this.replyString = buffer.toString();\n+        return this.replyString = sb.toString();\n     }\n     \n-    public int helo(final String hostname) throws IOException {\n-        return this.sendCommand(0, hostname);\n+    public int helo(final String s) throws IOException {\n+        return this.sendCommand(0, s);\n     }\n     \n-    public int mail(final String reversePath) throws IOException {\n-        return this.__sendCommand(1, reversePath, false);\n+    public int mail(final String s) throws IOException {\n+        return this.__sendCommand(1, s, false);\n     }\n     \n-    public int rcpt(final String forwardPath) throws IOException {\n-        return this.__sendCommand(2, forwardPath, false);\n+    public int rcpt(final String s) throws IOException {\n+        return this.__sendCommand(2, s, false);\n     }\n     \n     public int data() throws IOException {\n         return this.sendCommand(3);\n     }\n     \n-    public int send(final String reversePath) throws IOException {\n-        return this.sendCommand(4, reversePath);\n+    public int send(final String s) throws IOException {\n+        return this.sendCommand(4, s);\n     }\n     \n-    public int soml(final String reversePath) throws IOException {\n-        return this.sendCommand(5, reversePath);\n+    public int soml(final String s) throws IOException {\n+        return this.sendCommand(5, s);\n     }\n     \n-    public int saml(final String reversePath) throws IOException {\n-        return this.sendCommand(6, reversePath);\n+    public int saml(final String s) throws IOException {\n+        return this.sendCommand(6, s);\n     }\n     \n     public int rset() throws IOException {\n         return this.sendCommand(7);\n     }\n     \n-    public int vrfy(final String user) throws IOException {\n-        return this.sendCommand(8, user);\n+    public int vrfy(final String s) throws IOException {\n+        return this.sendCommand(8, s);\n     }\n     \n-    public int expn(final String name) throws IOException {\n-        return this.sendCommand(9, name);\n+    public int expn(final String s) throws IOException {\n+        return this.sendCommand(9, s);\n     }\n     \n     public int help() throws IOException {\n         return this.sendCommand(10);\n     }\n     \n-    public int help(final String command) throws IOException {\n-        return this.sendCommand(10, command);\n+    public int help(final String s) throws IOException {\n+        return this.sendCommand(10, s);\n     }\n     \n     public int noop() throws IOException {\n         return this.sendCommand(11);\n     }\n     \n     public int turn() throws IOException {\n         return this.sendCommand(12);\n     }\n     \n     public int quit() throws IOException {\n         return this.sendCommand(13);\n     }\n     \n-    public void removeProtocolCommandistener(final ProtocolCommandListener listener) {\n-        this.removeProtocolCommandListener(listener);\n+    public void removeProtocolCommandistener(final ProtocolCommandListener protocolCommandListener) {\n+        this.removeProtocolCommandListener(protocolCommandListener);\n     }\n     \n     protected ProtocolCommandSupport getCommandSupport() {\n         return this._commandSupport_;\n     }\n }\n"}]}
