{"diffoscope-json-version": 1, "source1": "first/TreeWalker.class", "source2": "second/TreeWalker.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -3,15 +3,14 @@\n \n import com.puppycrawl.tools.checkstyle.api.AbstractViolationReporter;\n import java.util.Comparator;\n import java.util.stream.Collector;\n import java.util.stream.Collectors;\n import java.util.function.Function;\n import java.util.function.Predicate;\n-import java.util.Objects;\n import java.util.stream.Stream;\n import java.util.Collection;\n import java.util.Locale;\n import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n import java.util.Arrays;\n import java.util.Iterator;\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n@@ -82,15 +81,15 @@\n         if (module instanceof AbstractCheck) {\n             final AbstractCheck check = (AbstractCheck)module;\n             check.init();\n             this.registerCheck(check);\n         }\n         else {\n             if (!(module instanceof TreeWalkerFilter)) {\n-                throw new CheckstyleException(\"TreeWalker is not allowed as a parent of \" + name + \" Please review 'Parent Module' section for this Check in web documentation if Check is standard.\");\n+                throw new CheckstyleException(\"TreeWalker is not allowed as a parent of \" + name + \" Please review 'Parent Module' section for this Check in web\" + \" documentation if Check is standard.\");\n             }\n             final TreeWalkerFilter filter = (TreeWalkerFilter)module;\n             this.filters.add(filter);\n         }\n     }\n     \n     protected void processFiltered(final File file, final FileText fileText) throws CheckstyleException {\n@@ -144,15 +143,17 @@\n                 if (Arrays.binarySearch(acceptableTokens, tokenId) < 0) {\n                     final String message = String.format(Locale.ROOT, \"Token \\\"%s\\\" was not found in Acceptable tokens list in check %s\", token, check.getClass().getName());\n                     throw new CheckstyleException(message);\n                 }\n                 this.registerCheck(tokenId, check);\n             }\n         }\n-        for (final int element : tokens) {\n+        int[] array;\n+        for (int length = (array = tokens).length, i = 0; i < length; ++i) {\n+            final int element = array[i];\n             this.registerCheck(element, check);\n         }\n         if (check.isCommentNodesRequired()) {\n             this.commentChecks.add(check);\n         }\n         else {\n             this.ordinaryChecks.add(check);\n@@ -240,21 +241,15 @@\n     public void destroy() {\n         this.ordinaryChecks.forEach(AbstractCheck::destroy);\n         this.commentChecks.forEach(AbstractCheck::destroy);\n         super.destroy();\n     }\n     \n     public Set<String> getExternalResourceLocations() {\n-        final Stream<Object> concat = Stream.concat(this.filters.stream(), Stream.concat(this.ordinaryChecks.stream(), this.commentChecks.stream()));\n-        final Class<ExternalResourceHolder> obj = ExternalResourceHolder.class;\n-        Objects.requireNonNull(obj);\n-        final Stream<Object> filter = concat.filter(obj::isInstance);\n-        final Class<ExternalResourceHolder> obj2 = ExternalResourceHolder.class;\n-        Objects.requireNonNull(obj2);\n-        return filter.map((Function<? super Object, ?>)obj2::cast).flatMap(resource -> resource.getExternalResourceLocations().stream()).collect((Collector<? super Object, ?, Set<String>>)Collectors.toSet());\n+        return Stream.concat(this.filters.stream(), Stream.concat(this.ordinaryChecks.stream(), this.commentChecks.stream())).filter(ExternalResourceHolder.class::isInstance).map((Function<? super Object, ?>)ExternalResourceHolder.class::cast).flatMap(resource -> resource.getExternalResourceLocations().stream()).collect((Collector<? super Object, ?, Set<String>>)Collectors.toSet());\n     }\n     \n     private void processIter(final DetailAST root, final TreeWalker.AstState astState) {\n         DetailAST toVisit;\n         for (DetailAST curNode = root; curNode != null; curNode = toVisit) {\n             this.notifyVisit(curNode, astState);\n             for (toVisit = curNode.getFirstChild(); curNode != null && toVisit == null; toVisit = curNode.getNextSibling(), curNode = curNode.getParent()) {\n"}]}
