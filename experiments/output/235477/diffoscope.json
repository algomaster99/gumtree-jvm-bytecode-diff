{"diffoscope-json-version": 1, "source1": "first/UncheckedFilterInputStream.class", "source2": "second/UncheckedFilterInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,16 +9,16 @@\n \n public final class UncheckedFilterInputStream extends FilterInputStream\n {\n     public static UncheckedFilterInputStream.Builder builder() {\n         return new UncheckedFilterInputStream.Builder();\n     }\n     \n-    private UncheckedFilterInputStream(final InputStream inputStream) {\n-        super(inputStream);\n+    private UncheckedFilterInputStream(final InputStream in) {\n+        super(in);\n     }\n     \n     @Override\n     public int available() throws UncheckedIOException {\n         return (int)Uncheck.get(() -> Integer.valueOf(super.available()));\n     }\n     \n@@ -29,26 +29,26 @@\n     \n     @Override\n     public int read() throws UncheckedIOException {\n         return (int)Uncheck.get(() -> Integer.valueOf(super.read()));\n     }\n     \n     @Override\n-    public int read(final byte[] b) throws UncheckedIOException {\n-        return (int)Uncheck.apply(x$0 -> Integer.valueOf(super.read(x$0)), (Object)b);\n+    public int read(final byte[] array) throws UncheckedIOException {\n+        return (int)Uncheck.apply(b -> Integer.valueOf(super.read(b)), (Object)array);\n     }\n     \n     @Override\n-    public int read(final byte[] b, final int off, final int len) throws UncheckedIOException {\n-        return (int)Uncheck.apply((x$0, x$1, x$2) -> Integer.valueOf(super.read(x$0, x$1, x$2)), (Object)b, (Object)Integer.valueOf(off), (Object)Integer.valueOf(len));\n+    public int read(final byte[] array, final int i, final int j) throws UncheckedIOException {\n+        return (int)Uncheck.apply((b, off, len) -> Integer.valueOf(super.read(b, off, len)), (Object)array, (Object)Integer.valueOf(i), (Object)Integer.valueOf(j));\n     }\n     \n     @Override\n     public synchronized void reset() throws UncheckedIOException {\n         Uncheck.run(() -> super.reset());\n     }\n     \n     @Override\n-    public long skip(final long n) throws UncheckedIOException {\n-        return (long)Uncheck.apply(x$0 -> Long.valueOf(super.skip(x$0)), (Object)Long.valueOf(n));\n+    public long skip(final long l) throws UncheckedIOException {\n+        return (long)Uncheck.apply(n -> Long.valueOf(super.skip(n)), (Object)Long.valueOf(l));\n     }\n }\n"}]}
