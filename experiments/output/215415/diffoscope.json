{"diffoscope-json-version": 1, "source1": "first/ModuleOpens.class", "source2": "second/ModuleOpens.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,53 +8,53 @@\n public final class ModuleOpens implements Cloneable, Node\n {\n     private final int opensIndex;\n     private final int opensFlags;\n     private final int opensToCount;\n     private final int[] opensToIndex;\n     \n-    ModuleOpens(final DataInput file) throws IOException {\n-        this.opensIndex = file.readUnsignedShort();\n-        this.opensFlags = file.readUnsignedShort();\n-        this.opensToCount = file.readUnsignedShort();\n+    ModuleOpens(final DataInput dataInput) throws IOException {\n+        this.opensIndex = dataInput.readUnsignedShort();\n+        this.opensFlags = dataInput.readUnsignedShort();\n+        this.opensToCount = dataInput.readUnsignedShort();\n         this.opensToIndex = new int[this.opensToCount];\n         for (int i = 0; i < this.opensToCount; ++i) {\n-            this.opensToIndex[i] = file.readUnsignedShort();\n+            this.opensToIndex[i] = dataInput.readUnsignedShort();\n         }\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitModuleOpens(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitModuleOpens(this);\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        file.writeShort(this.opensIndex);\n-        file.writeShort(this.opensFlags);\n-        file.writeShort(this.opensToCount);\n-        for (final int entry : this.opensToIndex) {\n-            file.writeShort(entry);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.opensIndex);\n+        dataOutputStream.writeShort(this.opensFlags);\n+        dataOutputStream.writeShort(this.opensToCount);\n+        final int[] opensToIndex = this.opensToIndex;\n+        for (int length = opensToIndex.length, i = 0; i < length; ++i) {\n+            dataOutputStream.writeShort(opensToIndex[i]);\n         }\n     }\n     \n     @Override\n     public String toString() {\n         return \"opens(\" + this.opensIndex + \", \" + this.opensFlags + \", \" + this.opensToCount + \", ...)\";\n     }\n     \n-    public String toString(final ConstantPool constant_pool) {\n-        final StringBuilder buf = new StringBuilder();\n-        final String package_name = constant_pool.constantToString(this.opensIndex, (byte)20);\n-        buf.append(Utility.compactClassName(package_name, false));\n-        buf.append(\", \").append(String.format(\"%04x\", Integer.valueOf(this.opensFlags)));\n-        buf.append(\", to(\").append(this.opensToCount).append(\"):\\n\");\n-        for (final int index : this.opensToIndex) {\n-            final String module_name = constant_pool.getConstantString(index, (byte)19);\n-            buf.append(\"      \").append(Utility.compactClassName(module_name, false)).append(\"\\n\");\n+    public String toString(final ConstantPool constantPool) {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(Utility.compactClassName(constantPool.constantToString(this.opensIndex, (byte)20), false));\n+        sb.append(\", \").append(String.format(\"%04x\", Integer.valueOf(this.opensFlags)));\n+        sb.append(\", to(\").append(this.opensToCount).append(\"):\\n\");\n+        final int[] opensToIndex = this.opensToIndex;\n+        for (int length = opensToIndex.length, i = 0; i < length; ++i) {\n+            sb.append(\"      \").append(Utility.compactClassName(constantPool.getConstantString(opensToIndex[i], (byte)19), false)).append(\"\\n\");\n         }\n-        return buf.substring();\n+        return sb.substring();\n     }\n     \n     public ModuleOpens copy() {\n         try {\n             return (ModuleOpens)this.clone();\n         }\n         catch (final CloneNotSupportedException ex) {\n"}]}
