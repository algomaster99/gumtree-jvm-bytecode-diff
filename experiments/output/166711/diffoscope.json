{"diffoscope-json-version": 1, "source1": "first/NodeTracker.class", "source2": "second/NodeTracker.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -74,18 +74,15 @@\n     }\n     \n     public NodeTracker update(final ImmutableNode root, final NodeSelector txTarget, final NodeKeyResolver<ImmutableNode> resolver, final NodeHandler<ImmutableNode> handler) {\n         if (this.trackedNodes.isEmpty()) {\n             return this;\n         }\n         final Map<NodeSelector, NodeTracker.TrackedNodeData> newState = new HashMap<NodeSelector, NodeTracker.TrackedNodeData>();\n-        this.trackedNodes.entrySet().forEach(e -> {\n-            final NodeTracker.TrackedNodeData trackedNodeData = (NodeTracker.TrackedNodeData)newState.put(e.getKey(), determineUpdatedTrackedNodeData(root, txTarget, (NodeKeyResolver<ImmutableNode>)resolver, (NodeHandler<ImmutableNode>)handler, (Map.Entry<NodeSelector, NodeTracker.TrackedNodeData>)e));\n-            return;\n-        });\n+        this.trackedNodes.entrySet().forEach(e -> newState.put(e.getKey(), determineUpdatedTrackedNodeData(root, txTarget, (NodeKeyResolver<ImmutableNode>)resolver, (NodeHandler<ImmutableNode>)handler, (Map.Entry<NodeSelector, NodeTracker.TrackedNodeData>)e)));\n         return new NodeTracker(newState);\n     }\n     \n     public NodeTracker detachAllTrackedNodes() {\n         if (this.trackedNodes.isEmpty()) {\n             return this;\n         }\n"}]}
