{"diffoscope-json-version": 1, "source1": "first/FilterCollectionWriter.class", "source2": "second/FilterCollectionWriter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,220 +13,220 @@\n import java.io.Writer;\n \n public class FilterCollectionWriter extends Writer\n {\n     protected final Collection<Writer> EMPTY_WRITERS;\n     protected final Collection<Writer> writers;\n     \n-    protected FilterCollectionWriter(final Collection<Writer> writers) {\n+    protected FilterCollectionWriter(final Collection<Writer> collection) {\n         this.EMPTY_WRITERS = (Collection<Writer>)Collections.emptyList();\n-        this.writers = ((writers == null) ? this.EMPTY_WRITERS : writers);\n+        this.writers = ((collection == null) ? this.EMPTY_WRITERS : collection);\n     }\n     \n-    protected FilterCollectionWriter(final Writer... writers) {\n+    protected FilterCollectionWriter(final Writer... a) {\n         this.EMPTY_WRITERS = (Collection<Writer>)Collections.emptyList();\n-        this.writers = ((writers == null) ? this.EMPTY_WRITERS : Arrays.asList(writers));\n+        this.writers = ((a == null) ? this.EMPTY_WRITERS : Arrays.asList(a));\n     }\n     \n     @Override\n     public Writer append(final char c) throws IOException {\n-        final List<Exception> causeList = new ArrayList<Exception>();\n-        int i = 0;\n-        for (final Writer w : this.writers) {\n-            if (w != null) {\n+        final ArrayList list = new ArrayList();\n+        int n = 0;\n+        for (final Writer writer : this.writers) {\n+            if (writer != null) {\n                 try {\n-                    w.append(c);\n+                    writer.append(c);\n                 }\n-                catch (final IOException e) {\n-                    causeList.add((Exception)new IOIndexedException(i, (Throwable)e));\n+                catch (final IOException ex) {\n+                    list.add(new IOIndexedException(n, (Throwable)ex));\n                 }\n             }\n-            ++i;\n+            ++n;\n         }\n-        if (!causeList.isEmpty()) {\n-            throw new IOExceptionList((List)causeList);\n+        if (!list.isEmpty()) {\n+            throw new IOExceptionList((List)list);\n         }\n         return this;\n     }\n     \n     @Override\n     public Writer append(final CharSequence csq) throws IOException {\n-        final List<Exception> causeList = new ArrayList<Exception>();\n-        int i = 0;\n-        for (final Writer w : this.writers) {\n-            if (w != null) {\n+        final ArrayList list = new ArrayList();\n+        int n = 0;\n+        for (final Writer writer : this.writers) {\n+            if (writer != null) {\n                 try {\n-                    w.append(csq);\n+                    writer.append(csq);\n                 }\n-                catch (final IOException e) {\n-                    causeList.add((Exception)new IOIndexedException(i, (Throwable)e));\n+                catch (final IOException ex) {\n+                    list.add(new IOIndexedException(n, (Throwable)ex));\n                 }\n             }\n-            ++i;\n+            ++n;\n         }\n-        if (!causeList.isEmpty()) {\n-            throw new IOExceptionList((List)causeList);\n+        if (!list.isEmpty()) {\n+            throw new IOExceptionList((List)list);\n         }\n         return this;\n     }\n     \n     @Override\n     public Writer append(final CharSequence csq, final int start, final int end) throws IOException {\n-        final List<Exception> causeList = new ArrayList<Exception>();\n-        int i = 0;\n-        for (final Writer w : this.writers) {\n-            if (w != null) {\n+        final ArrayList list = new ArrayList();\n+        int n = 0;\n+        for (final Writer writer : this.writers) {\n+            if (writer != null) {\n                 try {\n-                    w.append(csq, start, end);\n+                    writer.append(csq, start, end);\n                 }\n-                catch (final IOException e) {\n-                    causeList.add((Exception)new IOIndexedException(i, (Throwable)e));\n+                catch (final IOException ex) {\n+                    list.add(new IOIndexedException(n, (Throwable)ex));\n                 }\n             }\n-            ++i;\n+            ++n;\n         }\n-        if (!causeList.isEmpty()) {\n-            throw new IOExceptionList((List)causeList);\n+        if (!list.isEmpty()) {\n+            throw new IOExceptionList((List)list);\n         }\n         return this;\n     }\n     \n     @Override\n     public void close() throws IOException {\n-        final List<Exception> causeList = new ArrayList<Exception>();\n-        int i = 0;\n-        for (final Writer w : this.writers) {\n-            if (w != null) {\n+        final ArrayList list = new ArrayList();\n+        int n = 0;\n+        for (final Writer writer : this.writers) {\n+            if (writer != null) {\n                 try {\n-                    w.close();\n+                    writer.close();\n                 }\n-                catch (final IOException e) {\n-                    causeList.add((Exception)new IOIndexedException(i, (Throwable)e));\n+                catch (final IOException ex) {\n+                    list.add(new IOIndexedException(n, (Throwable)ex));\n                 }\n             }\n-            ++i;\n+            ++n;\n         }\n-        if (!causeList.isEmpty()) {\n-            throw new IOExceptionList((List)causeList);\n+        if (!list.isEmpty()) {\n+            throw new IOExceptionList((List)list);\n         }\n     }\n     \n     @Override\n     public void flush() throws IOException {\n-        final List<Exception> causeList = new ArrayList<Exception>();\n-        int i = 0;\n-        for (final Writer w : this.writers) {\n-            if (w != null) {\n+        final ArrayList list = new ArrayList();\n+        int n = 0;\n+        for (final Writer writer : this.writers) {\n+            if (writer != null) {\n                 try {\n-                    w.flush();\n+                    writer.flush();\n                 }\n-                catch (final IOException e) {\n-                    causeList.add((Exception)new IOIndexedException(i, (Throwable)e));\n+                catch (final IOException ex) {\n+                    list.add(new IOIndexedException(n, (Throwable)ex));\n                 }\n             }\n-            ++i;\n+            ++n;\n         }\n-        if (!causeList.isEmpty()) {\n-            throw new IOExceptionList((List)causeList);\n+        if (!list.isEmpty()) {\n+            throw new IOExceptionList((List)list);\n         }\n     }\n     \n     @Override\n-    public void write(final char[] cbuf, final int off, final int len) throws IOException {\n-        final List<Exception> causeList = new ArrayList<Exception>();\n-        int i = 0;\n-        for (final Writer w : this.writers) {\n-            if (w != null) {\n+    public void write(final char[] array, final int n, final int n2) throws IOException {\n+        final ArrayList list = new ArrayList();\n+        int n3 = 0;\n+        for (final Writer writer : this.writers) {\n+            if (writer != null) {\n                 try {\n-                    w.write(cbuf, off, len);\n+                    writer.write(array, n, n2);\n                 }\n-                catch (final IOException e) {\n-                    causeList.add((Exception)new IOIndexedException(i, (Throwable)e));\n+                catch (final IOException ex) {\n+                    list.add(new IOIndexedException(n3, (Throwable)ex));\n                 }\n             }\n-            ++i;\n+            ++n3;\n         }\n-        if (!causeList.isEmpty()) {\n-            throw new IOExceptionList((List)causeList);\n+        if (!list.isEmpty()) {\n+            throw new IOExceptionList((List)list);\n         }\n     }\n     \n     @Override\n     public void write(final char[] cbuf) throws IOException {\n-        final List<Exception> causeList = new ArrayList<Exception>();\n-        int i = 0;\n-        for (final Writer w : this.writers) {\n-            if (w != null) {\n+        final ArrayList list = new ArrayList();\n+        int n = 0;\n+        for (final Writer writer : this.writers) {\n+            if (writer != null) {\n                 try {\n-                    w.write(cbuf);\n+                    writer.write(cbuf);\n                 }\n-                catch (final IOException e) {\n-                    causeList.add((Exception)new IOIndexedException(i, (Throwable)e));\n+                catch (final IOException ex) {\n+                    list.add(new IOIndexedException(n, (Throwable)ex));\n                 }\n             }\n-            ++i;\n+            ++n;\n         }\n-        if (!causeList.isEmpty()) {\n-            throw new IOExceptionList((List)causeList);\n+        if (!list.isEmpty()) {\n+            throw new IOExceptionList((List)list);\n         }\n     }\n     \n     @Override\n     public void write(final int c) throws IOException {\n-        final List<Exception> causeList = new ArrayList<Exception>();\n-        int i = 0;\n-        for (final Writer w : this.writers) {\n-            if (w != null) {\n+        final ArrayList list = new ArrayList();\n+        int n = 0;\n+        for (final Writer writer : this.writers) {\n+            if (writer != null) {\n                 try {\n-                    w.write(c);\n+                    writer.write(c);\n                 }\n-                catch (final IOException e) {\n-                    causeList.add((Exception)new IOIndexedException(i, (Throwable)e));\n+                catch (final IOException ex) {\n+                    list.add(new IOIndexedException(n, (Throwable)ex));\n                 }\n             }\n-            ++i;\n+            ++n;\n         }\n-        if (!causeList.isEmpty()) {\n-            throw new IOExceptionList((List)causeList);\n+        if (!list.isEmpty()) {\n+            throw new IOExceptionList((List)list);\n         }\n     }\n     \n     @Override\n     public void write(final String str) throws IOException {\n-        final List<Exception> causeList = new ArrayList<Exception>();\n-        int i = 0;\n-        for (final Writer w : this.writers) {\n-            if (w != null) {\n+        final ArrayList list = new ArrayList();\n+        int n = 0;\n+        for (final Writer writer : this.writers) {\n+            if (writer != null) {\n                 try {\n-                    w.write(str);\n+                    writer.write(str);\n                 }\n-                catch (final IOException e) {\n-                    causeList.add((Exception)new IOIndexedException(i, (Throwable)e));\n+                catch (final IOException ex) {\n+                    list.add(new IOIndexedException(n, (Throwable)ex));\n                 }\n             }\n-            ++i;\n+            ++n;\n         }\n-        if (!causeList.isEmpty()) {\n-            throw new IOExceptionList((List)causeList);\n+        if (!list.isEmpty()) {\n+            throw new IOExceptionList((List)list);\n         }\n     }\n     \n     @Override\n     public void write(final String str, final int off, final int len) throws IOException {\n-        final List<Exception> causeList = new ArrayList<Exception>();\n-        int i = 0;\n-        for (final Writer w : this.writers) {\n-            if (w != null) {\n+        final ArrayList list = new ArrayList();\n+        int n = 0;\n+        for (final Writer writer : this.writers) {\n+            if (writer != null) {\n                 try {\n-                    w.write(str, off, len);\n+                    writer.write(str, off, len);\n                 }\n-                catch (final IOException e) {\n-                    causeList.add((Exception)new IOIndexedException(i, (Throwable)e));\n+                catch (final IOException ex) {\n+                    list.add(new IOIndexedException(n, (Throwable)ex));\n                 }\n             }\n-            ++i;\n+            ++n;\n         }\n-        if (!causeList.isEmpty()) {\n-            throw new IOExceptionList((List)causeList);\n+        if (!list.isEmpty()) {\n+            throw new IOExceptionList((List)list);\n         }\n     }\n }\n"}]}
