{"diffoscope-json-version": 1, "source1": "first/LZMA2Decoder.class", "source2": "second/LZMA2Decoder.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,193 +1,193 @@\n-  SHA-256 checksum 7e17e4f836fdd3aee4542195863f57516b34164603e247b8b4c0407653af2d80\n+  SHA-256 checksum 022e5a4ace06adaf2864185eeaf425ed6583db997b49396b8097cb92716cc78c\n   Compiled from \"LZMA2Decoder.java\"\n class org.apache.commons.compress.archivers.sevenz.LZMA2Decoder extends org.apache.commons.compress.archivers.sevenz.CoderBase\n   minor version: 0\n   major version: 52\n   flags: (0x0020) ACC_SUPER\n-  this_class: #33                         // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder\n-  super_class: #34                        // org/apache/commons/compress/archivers/sevenz/CoderBase\n+  this_class: #14                         // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder\n+  super_class: #8                         // org/apache/commons/compress/archivers/sevenz/CoderBase\n   interfaces: 0, fields: 0, methods: 9, attributes: 1\n Constant pool:\n-    #1 = Class              #62           // java/lang/Class\n-    #2 = Class              #63           // org/tukaani/xz/LZMA2Options\n-    #3 = Class              #64           // java/lang/Number\n-    #4 = Methodref          #34.#65       // org/apache/commons/compress/archivers/sevenz/CoderBase.\"<init>\":([Ljava/lang/Class;)V\n-    #5 = Methodref          #33.#66       // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n-    #6 = Methodref          #9.#67        // org/tukaani/xz/LZMA2InputStream.getMemoryUsage:(I)I\n-    #7 = Class              #68           // org/apache/commons/compress/MemoryLimitException\n-    #8 = Methodref          #7.#69        // org/apache/commons/compress/MemoryLimitException.\"<init>\":(JI)V\n-    #9 = Class              #70           // org/tukaani/xz/LZMA2InputStream\n-   #10 = Methodref          #9.#71        // org/tukaani/xz/LZMA2InputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-   #11 = Class              #72           // java/lang/IllegalArgumentException\n-   #12 = Class              #73           // java/io/IOException\n-   #13 = Methodref          #11.#74       // java/lang/IllegalArgumentException.getMessage:()Ljava/lang/String;\n-   #14 = Methodref          #12.#75       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #15 = Methodref          #33.#76       // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n-   #16 = Class              #77           // org/tukaani/xz/FinishableWrapperOutputStream\n-   #17 = Methodref          #16.#78       // org/tukaani/xz/FinishableWrapperOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n-   #18 = Methodref          #2.#79        // org/tukaani/xz/LZMA2Options.getOutputStream:(Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n-   #19 = Methodref          #33.#80       // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.getDictSize:(Ljava/lang/Object;)I\n-   #20 = Methodref          #81.#82       // java/lang/Integer.numberOfLeadingZeros:(I)I\n-   #21 = Methodref          #81.#83       // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #22 = Methodref          #2.#84        // org/tukaani/xz/LZMA2Options.getDictSize:()I\n-   #23 = Methodref          #33.#85       // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.numberOptionOrDefault:(Ljava/lang/Object;)I\n-   #24 = Fieldref           #44.#86       // org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n-   #25 = String             #87           // Missing LZMA2 properties\n-   #26 = String             #88           // LZMA2 properties too short\n-   #27 = String             #89           // Unsupported LZMA2 property bits\n-   #28 = String             #90           // Dictionary larger than 4GiB maximum size\n-   #29 = Methodref          #2.#91        // org/tukaani/xz/LZMA2Options.\"<init>\":()V\n-   #30 = Methodref          #2.#92        // org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n-   #31 = Integer            8388608\n-   #32 = Methodref          #33.#93       // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.numberOptionOrDefault:(Ljava/lang/Object;I)I\n-   #33 = Class              #94           // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder\n-   #34 = Class              #95           // org/apache/commons/compress/archivers/sevenz/CoderBase\n-   #35 = Utf8               <init>\n-   #36 = Utf8               ()V\n-   #37 = Utf8               Code\n-   #38 = Utf8               LineNumberTable\n-   #39 = Utf8               decode\n-   #40 = Utf8               (Ljava/lang/String;Ljava/io/InputStream;JLorg/apache/commons/compress/archivers/sevenz/Coder;[BI)Ljava/io/InputStream;\n-   #41 = Utf8               StackMapTable\n-   #42 = Class              #96           // java/lang/String\n-   #43 = Class              #97           // java/io/InputStream\n-   #44 = Class              #98           // org/apache/commons/compress/archivers/sevenz/Coder\n-   #45 = Class              #99           // \"[B\"\n-   #46 = Utf8               Exceptions\n-   #47 = Utf8               encode\n-   #48 = Utf8               (Ljava/io/OutputStream;Ljava/lang/Object;)Ljava/io/OutputStream;\n-   #49 = Utf8               getOptionsAsProperties\n-   #50 = Utf8               (Ljava/lang/Object;)[B\n-   #51 = Utf8               getOptionsFromCoder\n-   #52 = Utf8               (Lorg/apache/commons/compress/archivers/sevenz/Coder;Ljava/io/InputStream;)Ljava/lang/Object;\n-   #53 = Utf8               getDictSize\n-   #54 = Utf8               (Ljava/lang/Object;)I\n-   #55 = Utf8               getDictionarySize\n-   #56 = Utf8               (Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n-   #57 = Utf8               getOptions\n-   #58 = Utf8               (Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n-   #59 = Utf8               numberOptionOrDefault\n-   #60 = Utf8               SourceFile\n-   #61 = Utf8               LZMA2Decoder.java\n-   #62 = Utf8               java/lang/Class\n-   #63 = Utf8               org/tukaani/xz/LZMA2Options\n-   #64 = Utf8               java/lang/Number\n-   #65 = NameAndType        #35:#100      // \"<init>\":([Ljava/lang/Class;)V\n-   #66 = NameAndType        #55:#56       // getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n-   #67 = NameAndType        #101:#102     // getMemoryUsage:(I)I\n-   #68 = Utf8               org/apache/commons/compress/MemoryLimitException\n-   #69 = NameAndType        #35:#103      // \"<init>\":(JI)V\n-   #70 = Utf8               org/tukaani/xz/LZMA2InputStream\n-   #71 = NameAndType        #35:#104      // \"<init>\":(Ljava/io/InputStream;I)V\n-   #72 = Utf8               java/lang/IllegalArgumentException\n-   #73 = Utf8               java/io/IOException\n-   #74 = NameAndType        #105:#106     // getMessage:()Ljava/lang/String;\n-   #75 = NameAndType        #35:#107      // \"<init>\":(Ljava/lang/String;)V\n-   #76 = NameAndType        #57:#58       // getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n-   #77 = Utf8               org/tukaani/xz/FinishableWrapperOutputStream\n-   #78 = NameAndType        #35:#108      // \"<init>\":(Ljava/io/OutputStream;)V\n-   #79 = NameAndType        #109:#110     // getOutputStream:(Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n-   #80 = NameAndType        #53:#54       // getDictSize:(Ljava/lang/Object;)I\n-   #81 = Class              #111          // java/lang/Integer\n-   #82 = NameAndType        #112:#102     // numberOfLeadingZeros:(I)I\n-   #83 = NameAndType        #113:#114     // valueOf:(I)Ljava/lang/Integer;\n-   #84 = NameAndType        #53:#115      // getDictSize:()I\n-   #85 = NameAndType        #59:#54       // numberOptionOrDefault:(Ljava/lang/Object;)I\n-   #86 = NameAndType        #116:#99      // properties:[B\n-   #87 = Utf8               Missing LZMA2 properties\n-   #88 = Utf8               LZMA2 properties too short\n-   #89 = Utf8               Unsupported LZMA2 property bits\n-   #90 = Utf8               Dictionary larger than 4GiB maximum size\n-   #91 = NameAndType        #35:#36       // \"<init>\":()V\n-   #92 = NameAndType        #117:#118     // setDictSize:(I)V\n-   #93 = NameAndType        #59:#119      // numberOptionOrDefault:(Ljava/lang/Object;I)I\n-   #94 = Utf8               org/apache/commons/compress/archivers/sevenz/LZMA2Decoder\n-   #95 = Utf8               org/apache/commons/compress/archivers/sevenz/CoderBase\n-   #96 = Utf8               java/lang/String\n-   #97 = Utf8               java/io/InputStream\n-   #98 = Utf8               org/apache/commons/compress/archivers/sevenz/Coder\n-   #99 = Utf8               [B\n-  #100 = Utf8               ([Ljava/lang/Class;)V\n-  #101 = Utf8               getMemoryUsage\n-  #102 = Utf8               (I)I\n-  #103 = Utf8               (JI)V\n-  #104 = Utf8               (Ljava/io/InputStream;I)V\n-  #105 = Utf8               getMessage\n-  #106 = Utf8               ()Ljava/lang/String;\n-  #107 = Utf8               (Ljava/lang/String;)V\n-  #108 = Utf8               (Ljava/io/OutputStream;)V\n-  #109 = Utf8               getOutputStream\n-  #110 = Utf8               (Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n-  #111 = Utf8               java/lang/Integer\n-  #112 = Utf8               numberOfLeadingZeros\n-  #113 = Utf8               valueOf\n-  #114 = Utf8               (I)Ljava/lang/Integer;\n-  #115 = Utf8               ()I\n-  #116 = Utf8               properties\n-  #117 = Utf8               setDictSize\n-  #118 = Utf8               (I)V\n-  #119 = Utf8               (Ljava/lang/Object;I)I\n+    #1 = Class              #2            // java/lang/Class\n+    #2 = Utf8               java/lang/Class\n+    #3 = Class              #4            // org/tukaani/xz/LZMA2Options\n+    #4 = Utf8               org/tukaani/xz/LZMA2Options\n+    #5 = Class              #6            // java/lang/Number\n+    #6 = Utf8               java/lang/Number\n+    #7 = Methodref          #8.#9         // org/apache/commons/compress/archivers/sevenz/CoderBase.\"<init>\":([Ljava/lang/Class;)V\n+    #8 = Class              #10           // org/apache/commons/compress/archivers/sevenz/CoderBase\n+    #9 = NameAndType        #11:#12       // \"<init>\":([Ljava/lang/Class;)V\n+   #10 = Utf8               org/apache/commons/compress/archivers/sevenz/CoderBase\n+   #11 = Utf8               <init>\n+   #12 = Utf8               ([Ljava/lang/Class;)V\n+   #13 = Methodref          #14.#15       // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+   #14 = Class              #16           // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder\n+   #15 = NameAndType        #17:#18       // getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+   #16 = Utf8               org/apache/commons/compress/archivers/sevenz/LZMA2Decoder\n+   #17 = Utf8               getDictionarySize\n+   #18 = Utf8               (Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+   #19 = Methodref          #20.#21       // org/tukaani/xz/LZMA2InputStream.getMemoryUsage:(I)I\n+   #20 = Class              #22           // org/tukaani/xz/LZMA2InputStream\n+   #21 = NameAndType        #23:#24       // getMemoryUsage:(I)I\n+   #22 = Utf8               org/tukaani/xz/LZMA2InputStream\n+   #23 = Utf8               getMemoryUsage\n+   #24 = Utf8               (I)I\n+   #25 = Class              #26           // org/apache/commons/compress/MemoryLimitException\n+   #26 = Utf8               org/apache/commons/compress/MemoryLimitException\n+   #27 = Methodref          #25.#28       // org/apache/commons/compress/MemoryLimitException.\"<init>\":(JI)V\n+   #28 = NameAndType        #11:#29       // \"<init>\":(JI)V\n+   #29 = Utf8               (JI)V\n+   #30 = Methodref          #20.#31       // org/tukaani/xz/LZMA2InputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+   #31 = NameAndType        #11:#32       // \"<init>\":(Ljava/io/InputStream;I)V\n+   #32 = Utf8               (Ljava/io/InputStream;I)V\n+   #33 = Class              #34           // java/lang/IllegalArgumentException\n+   #34 = Utf8               java/lang/IllegalArgumentException\n+   #35 = Class              #36           // java/io/IOException\n+   #36 = Utf8               java/io/IOException\n+   #37 = Methodref          #33.#38       // java/lang/IllegalArgumentException.getMessage:()Ljava/lang/String;\n+   #38 = NameAndType        #39:#40       // getMessage:()Ljava/lang/String;\n+   #39 = Utf8               getMessage\n+   #40 = Utf8               ()Ljava/lang/String;\n+   #41 = Methodref          #35.#42       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #42 = NameAndType        #11:#43       // \"<init>\":(Ljava/lang/String;)V\n+   #43 = Utf8               (Ljava/lang/String;)V\n+   #44 = Methodref          #14.#45       // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n+   #45 = NameAndType        #46:#47       // getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n+   #46 = Utf8               getOptions\n+   #47 = Utf8               (Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n+   #48 = Class              #49           // org/tukaani/xz/FinishableWrapperOutputStream\n+   #49 = Utf8               org/tukaani/xz/FinishableWrapperOutputStream\n+   #50 = Methodref          #48.#51       // org/tukaani/xz/FinishableWrapperOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n+   #51 = NameAndType        #11:#52       // \"<init>\":(Ljava/io/OutputStream;)V\n+   #52 = Utf8               (Ljava/io/OutputStream;)V\n+   #53 = Methodref          #3.#54        // org/tukaani/xz/LZMA2Options.getOutputStream:(Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n+   #54 = NameAndType        #55:#56       // getOutputStream:(Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n+   #55 = Utf8               getOutputStream\n+   #56 = Utf8               (Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n+   #57 = Methodref          #14.#58       // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.getDictSize:(Ljava/lang/Object;)I\n+   #58 = NameAndType        #59:#60       // getDictSize:(Ljava/lang/Object;)I\n+   #59 = Utf8               getDictSize\n+   #60 = Utf8               (Ljava/lang/Object;)I\n+   #61 = Methodref          #62.#63       // java/lang/Integer.numberOfLeadingZeros:(I)I\n+   #62 = Class              #64           // java/lang/Integer\n+   #63 = NameAndType        #65:#24       // numberOfLeadingZeros:(I)I\n+   #64 = Utf8               java/lang/Integer\n+   #65 = Utf8               numberOfLeadingZeros\n+   #66 = Methodref          #62.#67       // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+   #67 = NameAndType        #68:#69       // valueOf:(I)Ljava/lang/Integer;\n+   #68 = Utf8               valueOf\n+   #69 = Utf8               (I)Ljava/lang/Integer;\n+   #70 = Methodref          #3.#71        // org/tukaani/xz/LZMA2Options.getDictSize:()I\n+   #71 = NameAndType        #59:#72       // getDictSize:()I\n+   #72 = Utf8               ()I\n+   #73 = Methodref          #14.#74       // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.numberOptionOrDefault:(Ljava/lang/Object;)I\n+   #74 = NameAndType        #75:#60       // numberOptionOrDefault:(Ljava/lang/Object;)I\n+   #75 = Utf8               numberOptionOrDefault\n+   #76 = Fieldref           #77.#78       // org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n+   #77 = Class              #79           // org/apache/commons/compress/archivers/sevenz/Coder\n+   #78 = NameAndType        #80:#81       // properties:[B\n+   #79 = Utf8               org/apache/commons/compress/archivers/sevenz/Coder\n+   #80 = Utf8               properties\n+   #81 = Utf8               [B\n+   #82 = String             #83           // Missing LZMA2 properties\n+   #83 = Utf8               Missing LZMA2 properties\n+   #84 = String             #85           // LZMA2 properties too short\n+   #85 = Utf8               LZMA2 properties too short\n+   #86 = String             #87           // Unsupported LZMA2 property bits\n+   #87 = Utf8               Unsupported LZMA2 property bits\n+   #88 = String             #89           // Dictionary larger than 4GiB maximum size\n+   #89 = Utf8               Dictionary larger than 4GiB maximum size\n+   #90 = Methodref          #3.#91        // org/tukaani/xz/LZMA2Options.\"<init>\":()V\n+   #91 = NameAndType        #11:#92       // \"<init>\":()V\n+   #92 = Utf8               ()V\n+   #93 = Methodref          #3.#94        // org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n+   #94 = NameAndType        #95:#96       // setDictSize:(I)V\n+   #95 = Utf8               setDictSize\n+   #96 = Utf8               (I)V\n+   #97 = Integer            8388608\n+   #98 = Methodref          #14.#99       // org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.numberOptionOrDefault:(Ljava/lang/Object;I)I\n+   #99 = NameAndType        #75:#100      // numberOptionOrDefault:(Ljava/lang/Object;I)I\n+  #100 = Utf8               (Ljava/lang/Object;I)I\n+  #101 = Utf8               Code\n+  #102 = Utf8               LineNumberTable\n+  #103 = Utf8               decode\n+  #104 = Utf8               (Ljava/lang/String;Ljava/io/InputStream;JLorg/apache/commons/compress/archivers/sevenz/Coder;[BI)Ljava/io/InputStream;\n+  #105 = Utf8               StackMapTable\n+  #106 = Class              #107          // java/lang/String\n+  #107 = Utf8               java/lang/String\n+  #108 = Class              #109          // java/io/InputStream\n+  #109 = Utf8               java/io/InputStream\n+  #110 = Class              #81           // \"[B\"\n+  #111 = Utf8               Exceptions\n+  #112 = Utf8               encode\n+  #113 = Utf8               (Ljava/io/OutputStream;Ljava/lang/Object;)Ljava/io/OutputStream;\n+  #114 = Utf8               getOptionsAsProperties\n+  #115 = Utf8               (Ljava/lang/Object;)[B\n+  #116 = Utf8               getOptionsFromCoder\n+  #117 = Utf8               (Lorg/apache/commons/compress/archivers/sevenz/Coder;Ljava/io/InputStream;)Ljava/lang/Object;\n+  #118 = Utf8               SourceFile\n+  #119 = Utf8               LZMA2Decoder.java\n {\n   org.apache.commons.compress.archivers.sevenz.LZMA2Decoder();\n     descriptor: ()V\n     flags: (0x0000)\n     Code:\n       stack=5, locals=1, args_size=1\n          0: aload_0\n          1: iconst_2\n          2: anewarray     #1                  // class java/lang/Class\n          5: dup\n          6: iconst_0\n-         7: ldc           #2                  // class org/tukaani/xz/LZMA2Options\n+         7: ldc           #3                  // class org/tukaani/xz/LZMA2Options\n          9: aastore\n         10: dup\n         11: iconst_1\n-        12: ldc           #3                  // class java/lang/Number\n+        12: ldc           #5                  // class java/lang/Number\n         14: aastore\n-        15: invokespecial #4                  // Method org/apache/commons/compress/archivers/sevenz/CoderBase.\"<init>\":([Ljava/lang/Class;)V\n+        15: invokespecial #7                  // Method org/apache/commons/compress/archivers/sevenz/CoderBase.\"<init>\":([Ljava/lang/Class;)V\n         18: return\n       LineNumberTable:\n         line 32: 0\n         line 33: 18\n \n   java.io.InputStream decode(java.lang.String, java.io.InputStream, long, org.apache.commons.compress.archivers.sevenz.Coder, byte[], int) throws java.io.IOException;\n     descriptor: (Ljava/lang/String;Ljava/io/InputStream;JLorg/apache/commons/compress/archivers/sevenz/Coder;[BI)Ljava/io/InputStream;\n     flags: (0x0000)\n     Code:\n       stack=5, locals=10, args_size=7\n          0: aload_0\n          1: aload         5\n-         3: invokespecial #5                  // Method getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+         3: invokespecial #13                 // Method getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n          6: istore        8\n          8: iload         8\n-        10: invokestatic  #6                  // Method org/tukaani/xz/LZMA2InputStream.getMemoryUsage:(I)I\n+        10: invokestatic  #19                 // Method org/tukaani/xz/LZMA2InputStream.getMemoryUsage:(I)I\n         13: istore        9\n         15: iload         9\n         17: iload         7\n         19: if_icmple     35\n-        22: new           #7                  // class org/apache/commons/compress/MemoryLimitException\n+        22: new           #25                 // class org/apache/commons/compress/MemoryLimitException\n         25: dup\n         26: iload         9\n         28: i2l\n         29: iload         7\n-        31: invokespecial #8                  // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JI)V\n+        31: invokespecial #27                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JI)V\n         34: athrow\n-        35: new           #9                  // class org/tukaani/xz/LZMA2InputStream\n+        35: new           #20                 // class org/tukaani/xz/LZMA2InputStream\n         38: dup\n         39: aload_2\n         40: iload         8\n-        42: invokespecial #10                 // Method org/tukaani/xz/LZMA2InputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+        42: invokespecial #30                 // Method org/tukaani/xz/LZMA2InputStream.\"<init>\":(Ljava/io/InputStream;I)V\n         45: areturn\n         46: astore        8\n-        48: new           #12                 // class java/io/IOException\n+        48: new           #35                 // class java/io/IOException\n         51: dup\n         52: aload         8\n-        54: invokevirtual #13                 // Method java/lang/IllegalArgumentException.getMessage:()Ljava/lang/String;\n-        57: invokespecial #14                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        54: invokevirtual #37                 // Method java/lang/IllegalArgumentException.getMessage:()Ljava/lang/String;\n+        57: invokespecial #41                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         60: athrow\n       Exception table:\n          from    to  target type\n              0    45    46   Class java/lang/IllegalArgumentException\n       LineNumberTable:\n         line 39: 0\n         line 40: 8\n@@ -210,24 +210,24 @@\n   java.io.OutputStream encode(java.io.OutputStream, java.lang.Object) throws java.io.IOException;\n     descriptor: (Ljava/io/OutputStream;Ljava/lang/Object;)Ljava/io/OutputStream;\n     flags: (0x0000)\n     Code:\n       stack=3, locals=5, args_size=3\n          0: aload_0\n          1: aload_2\n-         2: invokespecial #15                 // Method getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n+         2: invokespecial #44                 // Method getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n          5: astore_3\n-         6: new           #16                 // class org/tukaani/xz/FinishableWrapperOutputStream\n+         6: new           #48                 // class org/tukaani/xz/FinishableWrapperOutputStream\n          9: dup\n         10: aload_1\n-        11: invokespecial #17                 // Method org/tukaani/xz/FinishableWrapperOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n+        11: invokespecial #50                 // Method org/tukaani/xz/FinishableWrapperOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n         14: astore        4\n         16: aload_3\n         17: aload         4\n-        19: invokevirtual #18                 // Method org/tukaani/xz/LZMA2Options.getOutputStream:(Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n+        19: invokevirtual #53                 // Method org/tukaani/xz/LZMA2Options.getOutputStream:(Lorg/tukaani/xz/FinishableOutputStream;)Lorg/tukaani/xz/FinishableOutputStream;\n         22: areturn\n       LineNumberTable:\n         line 53: 0\n         line 54: 6\n         line 55: 16\n     Exceptions:\n       throws java.io.IOException\n@@ -235,18 +235,18 @@\n   byte[] getOptionsAsProperties(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)[B\n     flags: (0x0000)\n     Code:\n       stack=5, locals=5, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #19                 // Method getDictSize:(Ljava/lang/Object;)I\n+         2: invokespecial #57                 // Method getDictSize:(Ljava/lang/Object;)I\n          5: istore_2\n          6: iload_2\n-         7: invokestatic  #20                 // Method java/lang/Integer.numberOfLeadingZeros:(I)I\n+         7: invokestatic  #61                 // Method java/lang/Integer.numberOfLeadingZeros:(I)I\n         10: istore_3\n         11: iload_2\n         12: bipush        30\n         14: iload_3\n         15: isub\n         16: iushr\n         17: iconst_2\n@@ -275,91 +275,91 @@\n   java.lang.Object getOptionsFromCoder(org.apache.commons.compress.archivers.sevenz.Coder, java.io.InputStream) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/sevenz/Coder;Ljava/io/InputStream;)Ljava/lang/Object;\n     flags: (0x0000)\n     Code:\n       stack=2, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #5                  // Method getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n-         5: invokestatic  #21                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+         2: invokespecial #13                 // Method getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+         5: invokestatic  #66                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n          8: areturn\n       LineNumberTable:\n         line 71: 0\n     Exceptions:\n       throws java.io.IOException\n \n   private int getDictSize(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n-         1: instanceof    #2                  // class org/tukaani/xz/LZMA2Options\n+         1: instanceof    #3                  // class org/tukaani/xz/LZMA2Options\n          4: ifeq          15\n          7: aload_1\n-         8: checkcast     #2                  // class org/tukaani/xz/LZMA2Options\n-        11: invokevirtual #22                 // Method org/tukaani/xz/LZMA2Options.getDictSize:()I\n+         8: checkcast     #3                  // class org/tukaani/xz/LZMA2Options\n+        11: invokevirtual #70                 // Method org/tukaani/xz/LZMA2Options.getDictSize:()I\n         14: ireturn\n         15: aload_0\n         16: aload_1\n-        17: invokespecial #23                 // Method numberOptionOrDefault:(Ljava/lang/Object;)I\n+        17: invokespecial #73                 // Method numberOptionOrDefault:(Ljava/lang/Object;)I\n         20: ireturn\n       LineNumberTable:\n         line 75: 0\n         line 76: 7\n         line 78: 15\n       StackMapTable: number_of_entries = 1\n         frame_type = 15 /* same */\n \n   private int getDictionarySize(org.apache.commons.compress.archivers.sevenz.Coder) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_1\n-         1: getfield      #24                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n+         1: getfield      #76                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n          4: ifnonnull     17\n-         7: new           #12                 // class java/io/IOException\n+         7: new           #35                 // class java/io/IOException\n         10: dup\n-        11: ldc           #25                 // String Missing LZMA2 properties\n-        13: invokespecial #14                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        11: ldc           #82                 // String Missing LZMA2 properties\n+        13: invokespecial #41                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         16: athrow\n         17: aload_1\n-        18: getfield      #24                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n+        18: getfield      #76                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n         21: arraylength\n         22: iconst_1\n         23: if_icmpge     36\n-        26: new           #12                 // class java/io/IOException\n+        26: new           #35                 // class java/io/IOException\n         29: dup\n-        30: ldc           #26                 // String LZMA2 properties too short\n-        32: invokespecial #14                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        30: ldc           #84                 // String LZMA2 properties too short\n+        32: invokespecial #41                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         35: athrow\n         36: sipush        255\n         39: aload_1\n-        40: getfield      #24                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n+        40: getfield      #76                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n         43: iconst_0\n         44: baload\n         45: iand\n         46: istore_2\n         47: iload_2\n         48: bipush        -64\n         50: iand\n         51: ifeq          64\n-        54: new           #12                 // class java/io/IOException\n+        54: new           #35                 // class java/io/IOException\n         57: dup\n-        58: ldc           #27                 // String Unsupported LZMA2 property bits\n-        60: invokespecial #14                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        58: ldc           #86                 // String Unsupported LZMA2 property bits\n+        60: invokespecial #41                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         63: athrow\n         64: iload_2\n         65: bipush        40\n         67: if_icmple     80\n-        70: new           #12                 // class java/io/IOException\n+        70: new           #35                 // class java/io/IOException\n         73: dup\n-        74: ldc           #28                 // String Dictionary larger than 4GiB maximum size\n-        76: invokespecial #14                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        74: ldc           #88                 // String Dictionary larger than 4GiB maximum size\n+        76: invokespecial #41                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         79: athrow\n         80: iload_2\n         81: bipush        40\n         83: if_icmpne     88\n         86: iconst_m1\n         87: ireturn\n         88: iconst_2\n@@ -400,28 +400,28 @@\n \n   private org.tukaani.xz.LZMA2Options getOptions(java.lang.Object) throws java.io.IOException;\n     descriptor: (Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_1\n-         1: instanceof    #2                  // class org/tukaani/xz/LZMA2Options\n+         1: instanceof    #3                  // class org/tukaani/xz/LZMA2Options\n          4: ifeq          12\n          7: aload_1\n-         8: checkcast     #2                  // class org/tukaani/xz/LZMA2Options\n+         8: checkcast     #3                  // class org/tukaani/xz/LZMA2Options\n         11: areturn\n-        12: new           #2                  // class org/tukaani/xz/LZMA2Options\n+        12: new           #3                  // class org/tukaani/xz/LZMA2Options\n         15: dup\n-        16: invokespecial #29                 // Method org/tukaani/xz/LZMA2Options.\"<init>\":()V\n+        16: invokespecial #90                 // Method org/tukaani/xz/LZMA2Options.\"<init>\":()V\n         19: astore_2\n         20: aload_2\n         21: aload_0\n         22: aload_1\n-        23: invokespecial #23                 // Method numberOptionOrDefault:(Ljava/lang/Object;)I\n-        26: invokevirtual #30                 // Method org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n+        23: invokespecial #73                 // Method numberOptionOrDefault:(Ljava/lang/Object;)I\n+        26: invokevirtual #93                 // Method org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n         29: aload_2\n         30: areturn\n       LineNumberTable:\n         line 102: 0\n         line 103: 7\n         line 105: 12\n         line 106: 20\n@@ -433,14 +433,14 @@\n \n   private int numberOptionOrDefault(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n-         1: ldc           #31                 // int 8388608\n-         3: invokestatic  #32                 // Method numberOptionOrDefault:(Ljava/lang/Object;I)I\n+         1: ldc           #97                 // int 8388608\n+         3: invokestatic  #98                 // Method numberOptionOrDefault:(Ljava/lang/Object;I)I\n          6: ireturn\n       LineNumberTable:\n         line 111: 0\n }\n SourceFile: \"LZMA2Decoder.java\"\n"}]}
