{"diffoscope-json-version": 1, "source1": "first/AbstractFileFilter.class", "source2": "second/AbstractFileFilter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,46 +7,46 @@\n import java.io.File;\n import java.nio.file.FileVisitResult;\n import java.nio.file.Path;\n import org.apache.commons.io.file.PathVisitor;\n \n public abstract class AbstractFileFilter implements IOFileFilter, PathVisitor\n {\n-    static FileVisitResult toFileVisitResult(final boolean accept, final Path path) {\n-        return accept ? FileVisitResult.CONTINUE : FileVisitResult.TERMINATE;\n+    static FileVisitResult toFileVisitResult(final boolean b, final Path path) {\n+        return b ? FileVisitResult.CONTINUE : FileVisitResult.TERMINATE;\n     }\n     \n-    public boolean accept(final File file) {\n-        Objects.requireNonNull(file, \"file\");\n-        return this.accept(file.getParentFile(), file.getName());\n+    public boolean accept(final File obj) {\n+        Objects.requireNonNull(obj, \"file\");\n+        return this.accept(obj.getParentFile(), obj.getName());\n     }\n     \n-    public boolean accept(final File dir, final String name) {\n-        Objects.requireNonNull(name, \"name\");\n-        return this.accept(new File(dir, name));\n+    public boolean accept(final File parent, final String s) {\n+        Objects.requireNonNull(s, \"name\");\n+        return this.accept(new File(parent, s));\n     }\n     \n     protected FileVisitResult handle(final Throwable t) {\n         return FileVisitResult.TERMINATE;\n     }\n     \n-    public FileVisitResult postVisitDirectory(final Path dir, final IOException exc) throws IOException {\n+    public FileVisitResult postVisitDirectory(final Path path, final IOException ex) throws IOException {\n         return FileVisitResult.CONTINUE;\n     }\n     \n-    public FileVisitResult preVisitDirectory(final Path dir, final BasicFileAttributes attributes) throws IOException {\n-        return this.accept(dir, attributes);\n+    public FileVisitResult preVisitDirectory(final Path path, final BasicFileAttributes basicFileAttributes) throws IOException {\n+        return this.accept(path, basicFileAttributes);\n     }\n     \n     @Override\n     public String toString() {\n         return this.getClass().getSimpleName();\n     }\n     \n-    public FileVisitResult visitFile(final Path file, final BasicFileAttributes attributes) throws IOException {\n-        return this.accept(file, attributes);\n+    public FileVisitResult visitFile(final Path path, final BasicFileAttributes basicFileAttributes) throws IOException {\n+        return this.accept(path, basicFileAttributes);\n     }\n     \n-    public FileVisitResult visitFileFailed(final Path file, final IOException exc) throws IOException {\n+    public FileVisitResult visitFileFailed(final Path path, final IOException ex) throws IOException {\n         return FileVisitResult.CONTINUE;\n     }\n }\n"}]}
