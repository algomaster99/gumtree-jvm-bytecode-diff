{"diffoscope-json-version": 1, "source1": "first/FileUtils.class", "source2": "second/FileUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -57,36 +57,48 @@\n     public static final BigInteger ONE_PB_BI;\n     public static final long ONE_EB = 1152921504606846976L;\n     public static final BigInteger ONE_EB_BI;\n     public static final BigInteger ONE_ZB;\n     public static final BigInteger ONE_YB;\n     public static final File[] EMPTY_FILE_ARRAY;\n     \n+    static {\n+        ONE_KB_BI = BigInteger.valueOf(1024L);\n+        ONE_MB_BI = FileUtils.ONE_KB_BI.multiply(FileUtils.ONE_KB_BI);\n+        ONE_GB_BI = FileUtils.ONE_KB_BI.multiply(FileUtils.ONE_MB_BI);\n+        ONE_TB_BI = FileUtils.ONE_KB_BI.multiply(FileUtils.ONE_GB_BI);\n+        ONE_PB_BI = FileUtils.ONE_KB_BI.multiply(FileUtils.ONE_TB_BI);\n+        ONE_EB_BI = FileUtils.ONE_KB_BI.multiply(FileUtils.ONE_PB_BI);\n+        ONE_ZB = BigInteger.valueOf(1024L).multiply(BigInteger.valueOf(1152921504606846976L));\n+        ONE_YB = FileUtils.ONE_KB_BI.multiply(FileUtils.ONE_ZB);\n+        EMPTY_FILE_ARRAY = new File[0];\n+    }\n+    \n     public static String byteCountToDisplaySize(final BigInteger size) {\n         String displaySize;\n         if (size.divide(FileUtils.ONE_EB_BI).compareTo(BigInteger.ZERO) > 0) {\n-            displaySize = String.valueOf((Object)size.divide(FileUtils.ONE_EB_BI)) + \" EB\";\n+            displaySize = String.valueOf(String.valueOf(size.divide(FileUtils.ONE_EB_BI))) + \" EB\";\n         }\n         else if (size.divide(FileUtils.ONE_PB_BI).compareTo(BigInteger.ZERO) > 0) {\n-            displaySize = String.valueOf((Object)size.divide(FileUtils.ONE_PB_BI)) + \" PB\";\n+            displaySize = String.valueOf(String.valueOf(size.divide(FileUtils.ONE_PB_BI))) + \" PB\";\n         }\n         else if (size.divide(FileUtils.ONE_TB_BI).compareTo(BigInteger.ZERO) > 0) {\n-            displaySize = String.valueOf((Object)size.divide(FileUtils.ONE_TB_BI)) + \" TB\";\n+            displaySize = String.valueOf(String.valueOf(size.divide(FileUtils.ONE_TB_BI))) + \" TB\";\n         }\n         else if (size.divide(FileUtils.ONE_GB_BI).compareTo(BigInteger.ZERO) > 0) {\n-            displaySize = String.valueOf((Object)size.divide(FileUtils.ONE_GB_BI)) + \" GB\";\n+            displaySize = String.valueOf(String.valueOf(size.divide(FileUtils.ONE_GB_BI))) + \" GB\";\n         }\n         else if (size.divide(FileUtils.ONE_MB_BI).compareTo(BigInteger.ZERO) > 0) {\n-            displaySize = String.valueOf((Object)size.divide(FileUtils.ONE_MB_BI)) + \" MB\";\n+            displaySize = String.valueOf(String.valueOf(size.divide(FileUtils.ONE_MB_BI))) + \" MB\";\n         }\n         else if (size.divide(FileUtils.ONE_KB_BI).compareTo(BigInteger.ZERO) > 0) {\n-            displaySize = String.valueOf((Object)size.divide(FileUtils.ONE_KB_BI)) + \" KB\";\n+            displaySize = String.valueOf(String.valueOf(size.divide(FileUtils.ONE_KB_BI))) + \" KB\";\n         }\n         else {\n-            displaySize = String.valueOf((Object)size) + \" bytes\";\n+            displaySize = String.valueOf(String.valueOf(size)) + \" bytes\";\n         }\n         return displaySize;\n     }\n     \n     public static String byteCountToDisplaySize(final long size) {\n         return byteCountToDisplaySize(BigInteger.valueOf(size));\n     }\n@@ -114,61 +126,77 @@\n         }\n     }\n     \n     public static Checksum checksum(final File file, final Checksum checksum) throws IOException {\n         if (file.isDirectory()) {\n             throw new IllegalArgumentException(\"Checksums can't be computed on directories\");\n         }\n-        final InputStream in = new CheckedInputStream(new FileInputStream(file), checksum);\n-        Throwable x0 = null;\n+        Throwable t = null;\n         try {\n-            IOUtils.copy(in, (OutputStream)NullOutputStream.NULL_OUTPUT_STREAM);\n-        }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n+            final InputStream in = new CheckedInputStream(new FileInputStream(file), checksum);\n+            try {\n+                IOUtils.copy(in, (OutputStream)NullOutputStream.NULL_OUTPUT_STREAM);\n+            }\n+            finally {\n+                if (in != null) {\n+                    in.close();\n+                }\n+            }\n         }\n         finally {\n-            $closeResource(x0, in);\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n         return checksum;\n     }\n     \n     public static long checksumCRC32(final File file) throws IOException {\n         return checksum(file, new CRC32()).getValue();\n     }\n     \n     public static void cleanDirectory(final File directory) throws IOException {\n         final File[] files = verifiedListFiles(directory);\n         IOException exception = null;\n-        for (final File file : files) {\n+        File[] array;\n+        for (int length = (array = files).length, i = 0; i < length; ++i) {\n+            final File file = array[i];\n             try {\n                 forceDelete(file);\n             }\n             catch (final IOException ioe) {\n                 exception = ioe;\n             }\n         }\n-        if (null != exception) {\n+        if (exception != null) {\n             throw exception;\n         }\n     }\n     \n     private static void cleanDirectoryOnExit(final File directory) throws IOException {\n         final File[] files = verifiedListFiles(directory);\n         IOException exception = null;\n-        for (final File file : files) {\n+        File[] array;\n+        for (int length = (array = files).length, i = 0; i < length; ++i) {\n+            final File file = array[i];\n             try {\n                 forceDeleteOnExit(file);\n             }\n             catch (final IOException ioe) {\n                 exception = ioe;\n             }\n         }\n-        if (null != exception) {\n+        if (exception != null) {\n             throw exception;\n         }\n     }\n     \n     public static boolean contentEquals(final File file1, final File file2) throws IOException {\n         if (file1 == null && file2 == null) {\n             return true;\n@@ -188,36 +216,59 @@\n         }\n         if (file1.length() != file2.length()) {\n             return false;\n         }\n         if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {\n             return true;\n         }\n-        final InputStream input1 = new FileInputStream(file1);\n-        Throwable x0 = null;\n+        Throwable t = null;\n         try {\n-            final InputStream input2 = new FileInputStream(file2);\n-            Throwable x2 = null;\n+            final InputStream input1 = new FileInputStream(file1);\n             try {\n-                return IOUtils.contentEquals(input1, input2);\n-            }\n-            catch (final Throwable t) {\n-                x2 = t;\n-                throw t;\n+                final InputStream input2 = new FileInputStream(file2);\n+                try {\n+                    final boolean contentEquals = IOUtils.contentEquals(input1, input2);\n+                    if (input2 != null) {\n+                        input2.close();\n+                    }\n+                    return contentEquals;\n+                }\n+                finally {\n+                    if (input2 != null) {\n+                        input2.close();\n+                    }\n+                }\n             }\n             finally {\n-                $closeResource(x2, input2);\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n+                }\n+                if (input1 != null) {\n+                    input1.close();\n+                }\n             }\n         }\n-        catch (final Throwable t2) {\n-            x0 = t2;\n-            throw t2;\n-        }\n         finally {\n-            $closeResource(x0, input1);\n+            if (t == null) {\n+                final Throwable exception2;\n+                t = exception2;\n+            }\n+            else {\n+                final Throwable exception2;\n+                if (t != exception2) {\n+                    t.addSuppressed(exception2);\n+                }\n+            }\n         }\n     }\n     \n     public static boolean contentEqualsIgnoreEOL(final File file1, final File file2, final String charsetName) throws IOException {\n         if (file1 == null && file2 == null) {\n             return true;\n         }\n@@ -233,36 +284,59 @@\n         }\n         if (file1.isDirectory() || file2.isDirectory()) {\n             throw new IOException(\"Can't compare directories, only files\");\n         }\n         if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {\n             return true;\n         }\n-        final Reader input1 = new InputStreamReader(new FileInputStream(file1), Charsets.toCharset(charsetName));\n-        Throwable x0 = null;\n+        Throwable t = null;\n         try {\n-            final Reader input2 = new InputStreamReader(new FileInputStream(file2), Charsets.toCharset(charsetName));\n-            Throwable x2 = null;\n+            final Reader input1 = new InputStreamReader(new FileInputStream(file1), Charsets.toCharset(charsetName));\n             try {\n-                return IOUtils.contentEqualsIgnoreEOL(input1, input2);\n-            }\n-            catch (final Throwable t) {\n-                x2 = t;\n-                throw t;\n+                final Reader input2 = new InputStreamReader(new FileInputStream(file2), Charsets.toCharset(charsetName));\n+                try {\n+                    final boolean contentEqualsIgnoreEOL = IOUtils.contentEqualsIgnoreEOL(input1, input2);\n+                    if (input2 != null) {\n+                        input2.close();\n+                    }\n+                    return contentEqualsIgnoreEOL;\n+                }\n+                finally {\n+                    if (input2 != null) {\n+                        input2.close();\n+                    }\n+                }\n             }\n             finally {\n-                $closeResource(x2, input2);\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n+                }\n+                if (input1 != null) {\n+                    input1.close();\n+                }\n             }\n         }\n-        catch (final Throwable t2) {\n-            x0 = t2;\n-            throw t2;\n-        }\n         finally {\n-            $closeResource(x0, input1);\n+            if (t == null) {\n+                final Throwable exception2;\n+                t = exception2;\n+            }\n+            else {\n+                final Throwable exception2;\n+                if (t != exception2) {\n+                    t.addSuppressed(exception2);\n+                }\n+            }\n         }\n     }\n     \n     public static File[] convertFileCollectionToFileArray(final Collection<File> files) {\n         return files.toArray(new File[files.size()]);\n     }\n     \n@@ -287,15 +361,17 @@\n             throw new IOException(\"Source '\" + srcDir + \"' and destination '\" + destDir + \"' are the same\");\n         }\n         List<String> exclusionList = null;\n         if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())) {\n             final File[] srcFiles = (filter == null) ? srcDir.listFiles() : srcDir.listFiles(filter);\n             if (srcFiles != null && srcFiles.length > 0) {\n                 exclusionList = new ArrayList<String>(srcFiles.length);\n-                for (final File srcFile : srcFiles) {\n+                File[] array;\n+                for (int length = (array = srcFiles).length, i = 0; i < length; ++i) {\n+                    final File srcFile = array[i];\n                     final File copiedFile = new File(destDir, srcFile.getName());\n                     exclusionList.add(copiedFile.getCanonicalPath());\n                 }\n             }\n         }\n         doCopyDirectory(srcDir, destDir, filter, preserveFileDate, exclusionList);\n     }\n@@ -331,25 +407,37 @@\n         if (destFile.exists() && !destFile.canWrite()) {\n             throw new IOException(\"Destination '\" + destFile + \"' exists but is read-only\");\n         }\n         doCopyFile(srcFile, destFile, preserveFileDate);\n     }\n     \n     public static long copyFile(final File input, final OutputStream output) throws IOException {\n-        final FileInputStream fis = new FileInputStream(input);\n-        Throwable x0 = null;\n+        Throwable t = null;\n         try {\n-            return IOUtils.copyLarge((InputStream)fis, output);\n-        }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n+            final FileInputStream fis = new FileInputStream(input);\n+            try {\n+                return IOUtils.copyLarge((InputStream)fis, output);\n+            }\n+            finally {\n+                if (fis != null) {\n+                    fis.close();\n+                }\n+            }\n         }\n         finally {\n-            $closeResource(x0, fis);\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public static void copyFileToDirectory(final File srcFile, final File destDir) throws IOException {\n         copyFileToDirectory(srcFile, destDir, true);\n     }\n     \n@@ -359,26 +447,36 @@\n             throw new IllegalArgumentException(\"Destination '\" + destinationDir + \"' is not a directory\");\n         }\n         final File destFile = new File(destinationDir, sourceFile.getName());\n         copyFile(sourceFile, destFile, preserveFileDate);\n     }\n     \n     public static void copyInputStreamToFile(final InputStream source, final File destination) throws IOException {\n-        final InputStream in = source;\n-        Throwable x0 = null;\n+        Throwable t = null;\n         try {\n-            copyToFile(in, destination);\n-        }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n+            final InputStream in = source;\n+            try {\n+                copyToFile(in, destination);\n+            }\n+            finally {\n+                if (in != null) {\n+                    in.close();\n+                }\n+            }\n         }\n         finally {\n-            if (in != null) {\n-                $closeResource(x0, in);\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n             }\n         }\n     }\n     \n     public static void copyToDirectory(final File sourceFile, final File destinationDir) throws IOException {\n         Objects.requireNonNull(sourceFile, \"sourceFile\");\n         if (sourceFile.isFile()) {\n@@ -396,63 +494,93 @@\n         Objects.requireNonNull(sourceIterable, \"sourceIterable\");\n         for (final File src : sourceIterable) {\n             copyFileToDirectory(src, destinationDir);\n         }\n     }\n     \n     public static void copyToFile(final InputStream source, final File destination) throws IOException {\n-        final OutputStream out = openOutputStream(destination);\n-        Throwable x0 = null;\n+        Throwable t = null;\n         try {\n-            IOUtils.copy(source, out);\n-        }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n+            final OutputStream out = openOutputStream(destination);\n+            try {\n+                IOUtils.copy(source, out);\n+            }\n+            finally {\n+                if (out != null) {\n+                    out.close();\n+                }\n+            }\n         }\n         finally {\n-            if (out != null) {\n-                $closeResource(x0, out);\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n             }\n         }\n     }\n     \n     public static void copyURLToFile(final URL source, final File destination) throws IOException {\n-        final InputStream stream = source.openStream();\n-        Throwable x0 = null;\n+        Throwable t = null;\n         try {\n-            copyInputStreamToFile(stream, destination);\n-        }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n+            final InputStream stream = source.openStream();\n+            try {\n+                copyInputStreamToFile(stream, destination);\n+            }\n+            finally {\n+                if (stream != null) {\n+                    stream.close();\n+                }\n+            }\n         }\n         finally {\n-            if (stream != null) {\n-                $closeResource(x0, stream);\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n             }\n         }\n     }\n     \n     public static void copyURLToFile(final URL source, final File destination, final int connectionTimeout, final int readTimeout) throws IOException {\n         final URLConnection connection = source.openConnection();\n         connection.setConnectTimeout(connectionTimeout);\n         connection.setReadTimeout(readTimeout);\n-        final InputStream stream = connection.getInputStream();\n-        Throwable x0 = null;\n+        Throwable t = null;\n         try {\n-            copyInputStreamToFile(stream, destination);\n-        }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n+            final InputStream stream = connection.getInputStream();\n+            try {\n+                copyInputStreamToFile(stream, destination);\n+            }\n+            finally {\n+                if (stream != null) {\n+                    stream.close();\n+                }\n+            }\n         }\n         finally {\n-            if (stream != null) {\n-                $closeResource(x0, stream);\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n             }\n         }\n     }\n     \n     static String decodeUrl(final String url) {\n         String decoded = url;\n         if (url != null && url.indexOf(37) >= 0) {\n@@ -557,15 +685,17 @@\n         }\n         else if (!destDir.mkdirs() && !destDir.isDirectory()) {\n             throw new IOException(\"Destination '\" + destDir + \"' directory cannot be created\");\n         }\n         if (!destDir.canWrite()) {\n             throw new IOException(\"Destination '\" + destDir + \"' cannot be written to\");\n         }\n-        for (final File srcFile : srcFiles) {\n+        File[] array;\n+        for (int length = (array = srcFiles).length, i = 0; i < length; ++i) {\n+            final File srcFile = array[i];\n             final File dstFile = new File(destDir, srcFile.getName());\n             if (exclusionList == null || !exclusionList.contains(srcFile.getCanonicalPath())) {\n                 if (srcFile.isDirectory()) {\n                     doCopyDirectory(srcFile, dstFile, filter, preserveFileDate, exclusionList);\n                 }\n                 else {\n                     doCopyFile(srcFile, dstFile, preserveFileDate);\n@@ -611,15 +741,15 @@\n             file.deleteOnExit();\n         }\n     }\n     \n     public static void forceMkdir(final File directory) throws IOException {\n         if (directory.exists()) {\n             if (!directory.isDirectory()) {\n-                final String message = \"File \" + directory + \" exists and is not a directory. Unable to create directory.\";\n+                final String message = \"File \" + directory + \" exists and is \" + \"not a directory. Unable to create directory.\";\n                 throw new IOException(message);\n             }\n         }\n         else if (!directory.mkdirs() && !directory.isDirectory()) {\n             final String message = \"Unable to create directory \" + directory;\n             throw new IOException(message);\n         }\n@@ -672,15 +802,17 @@\n     public static String getUserDirectoryPath() {\n         return System.getProperty(\"user.home\");\n     }\n     \n     private static void innerListFiles(final Collection<File> files, final File directory, final IOFileFilter filter, final boolean includeSubDirectories) {\n         final File[] found = directory.listFiles((FileFilter)filter);\n         if (found != null) {\n-            for (final File file : found) {\n+            File[] array;\n+            for (int length = (array = found).length, i = 0; i < length; ++i) {\n+                final File file = array[i];\n                 if (file.isDirectory()) {\n                     if (includeSubDirectories) {\n                         files.add(file);\n                     }\n                     innerListFiles(files, file, filter, includeSubDirectories);\n                 }\n                 else {\n@@ -774,15 +906,15 @@\n     public static LineIterator lineIterator(final File file, final String charsetName) throws IOException {\n         InputStream inputStream = null;\n         try {\n             inputStream = openInputStream(file);\n             return IOUtils.lineIterator(inputStream, charsetName);\n         }\n         catch (final IOException | RuntimeException ex) {\n-            IOUtils.closeQuietly((Closeable)inputStream, e -> ex.addSuppressed(e));\n+            IOUtils.closeQuietly((Closeable)inputStream, e -> ex2.addSuppressed(e));\n             throw ex;\n         }\n     }\n     \n     public static Collection<File> listFiles(final File directory, final IOFileFilter fileFilter, final IOFileFilter dirFilter) {\n         return innerListFilesOrDirectories(directory, fileFilter, dirFilter, false);\n     }\n@@ -809,15 +941,15 @@\n             throw new IOException(\"Source '\" + srcDir + \"' is not a directory\");\n         }\n         if (destDir.exists()) {\n             throw new FileExistsException(\"Destination '\" + destDir + \"' already exists\");\n         }\n         final boolean rename = srcDir.renameTo(destDir);\n         if (!rename) {\n-            if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath() + File.separator)) {\n+            if (destDir.getCanonicalPath().startsWith(String.valueOf(srcDir.getCanonicalPath()) + File.separator)) {\n                 throw new IOException(\"Cannot move directory: \" + srcDir + \" to a subdirectory of itself: \" + destDir);\n             }\n             copyDirectory(srcDir, destDir);\n             deleteDirectory(srcDir);\n             if (srcDir.exists()) {\n                 throw new IOException(\"Failed to delete original directory '\" + srcDir + \"' after copy to '\" + destDir + \"'\");\n             }\n@@ -915,75 +1047,105 @@\n                 throw new IOException(\"Directory '\" + parent + \"' could not be created\");\n             }\n         }\n         return new FileOutputStream(file, append);\n     }\n     \n     public static byte[] readFileToByteArray(final File file) throws IOException {\n-        final InputStream in = openInputStream(file);\n-        Throwable x0 = null;\n+        Throwable t = null;\n         try {\n-            final long fileLength = file.length();\n-            return (fileLength > 0L) ? IOUtils.toByteArray(in, fileLength) : IOUtils.toByteArray(in);\n-        }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n+            final InputStream in = openInputStream(file);\n+            try {\n+                final long fileLength = file.length();\n+                return (fileLength > 0L) ? IOUtils.toByteArray(in, fileLength) : IOUtils.toByteArray(in);\n+            }\n+            finally {\n+                if (in != null) {\n+                    in.close();\n+                }\n+            }\n         }\n         finally {\n-            if (in != null) {\n-                $closeResource(x0, in);\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n             }\n         }\n     }\n     \n     @Deprecated\n     public static String readFileToString(final File file) throws IOException {\n         return readFileToString(file, Charset.defaultCharset());\n     }\n     \n     public static String readFileToString(final File file, final Charset charsetName) throws IOException {\n-        final InputStream in = openInputStream(file);\n-        Throwable x0 = null;\n+        Throwable t = null;\n         try {\n-            return IOUtils.toString(in, Charsets.toCharset(charsetName));\n-        }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n+            final InputStream in = openInputStream(file);\n+            try {\n+                return IOUtils.toString(in, Charsets.toCharset(charsetName));\n+            }\n+            finally {\n+                if (in != null) {\n+                    in.close();\n+                }\n+            }\n         }\n         finally {\n-            if (in != null) {\n-                $closeResource(x0, in);\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n             }\n         }\n     }\n     \n     public static String readFileToString(final File file, final String charsetName) throws IOException {\n         return readFileToString(file, Charsets.toCharset(charsetName));\n     }\n     \n     @Deprecated\n     public static List<String> readLines(final File file) throws IOException {\n         return readLines(file, Charset.defaultCharset());\n     }\n     \n     public static List<String> readLines(final File file, final Charset charset) throws IOException {\n-        final InputStream in = openInputStream(file);\n-        Throwable x0 = null;\n+        Throwable t = null;\n         try {\n-            return IOUtils.readLines(in, Charsets.toCharset(charset));\n-        }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n+            final InputStream in = openInputStream(file);\n+            try {\n+                return IOUtils.readLines(in, Charsets.toCharset(charset));\n+            }\n+            finally {\n+                if (in != null) {\n+                    in.close();\n+                }\n+            }\n         }\n         finally {\n-            if (in != null) {\n-                $closeResource(x0, in);\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n             }\n         }\n     }\n     \n     public static List<String> readLines(final File file, final String charsetName) throws IOException {\n         return readLines(file, Charsets.toCharset(charsetName));\n     }\n@@ -1039,15 +1201,17 @@\n     \n     private static long sizeOfDirectory0(final File directory) {\n         final File[] files = directory.listFiles();\n         if (files == null) {\n             return 0L;\n         }\n         long size = 0L;\n-        for (final File file : files) {\n+        File[] array;\n+        for (int length = (array = files).length, i = 0; i < length; ++i) {\n+            final File file = array[i];\n             if (!isSymlink(file)) {\n                 size += sizeOf0(file);\n                 if (size < 0L) {\n                     break;\n                 }\n             }\n         }\n@@ -1061,15 +1225,17 @@\n     \n     private static BigInteger sizeOfDirectoryBig0(final File directory) {\n         final File[] files = directory.listFiles();\n         if (files == null) {\n             return BigInteger.ZERO;\n         }\n         BigInteger size = BigInteger.ZERO;\n-        for (final File file : files) {\n+        File[] array;\n+        for (int length = (array = files).length, i = 0; i < length; ++i) {\n+            final File file = array[i];\n             if (!isSymlink(file)) {\n                 size = size.add(sizeOfBig0(file));\n             }\n         }\n         return size;\n     }\n     \n@@ -1177,14 +1343,17 @@\n             }\n         }\n         finally {\n             if (wasInterrupted) {\n                 Thread.currentThread().interrupt();\n             }\n         }\n+        if (wasInterrupted) {\n+            Thread.currentThread().interrupt();\n+        }\n         return true;\n     }\n     \n     @Deprecated\n     public static void write(final File file, final CharSequence data) throws IOException {\n         write(file, data, Charset.defaultCharset(), false);\n     }\n@@ -1220,26 +1389,36 @@\n     }\n     \n     public static void writeByteArrayToFile(final File file, final byte[] data, final int off, final int len) throws IOException {\n         writeByteArrayToFile(file, data, off, len, false);\n     }\n     \n     public static void writeByteArrayToFile(final File file, final byte[] data, final int off, final int len, final boolean append) throws IOException {\n-        final OutputStream out = openOutputStream(file, append);\n-        Throwable x0 = null;\n+        Throwable t = null;\n         try {\n-            out.write(data, off, len);\n-        }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n+            final OutputStream out = openOutputStream(file, append);\n+            try {\n+                out.write(data, off, len);\n+            }\n+            finally {\n+                if (out != null) {\n+                    out.close();\n+                }\n+            }\n         }\n         finally {\n-            if (out != null) {\n-                $closeResource(x0, out);\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n             }\n         }\n     }\n     \n     public static void writeLines(final File file, final Collection<?> lines) throws IOException {\n         writeLines(file, null, lines, null, false);\n     }\n@@ -1265,25 +1444,37 @@\n     }\n     \n     public static void writeLines(final File file, final String charsetName, final Collection<?> lines, final String lineEnding) throws IOException {\n         writeLines(file, charsetName, lines, lineEnding, false);\n     }\n     \n     public static void writeLines(final File file, final String charsetName, final Collection<?> lines, final String lineEnding, final boolean append) throws IOException {\n-        final OutputStream out = new BufferedOutputStream(openOutputStream(file, append));\n-        Throwable x0 = null;\n+        Throwable t = null;\n         try {\n-            IOUtils.writeLines((Collection)lines, lineEnding, out, charsetName);\n-        }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n+            final OutputStream out = new BufferedOutputStream(openOutputStream(file, append));\n+            try {\n+                IOUtils.writeLines((Collection)lines, lineEnding, out, charsetName);\n+            }\n+            finally {\n+                if (out != null) {\n+                    out.close();\n+                }\n+            }\n         }\n         finally {\n-            $closeResource(x0, out);\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     @Deprecated\n     public static void writeStringToFile(final File file, final String data) throws IOException {\n         writeStringToFile(file, data, Charset.defaultCharset(), false);\n     }\n@@ -1294,57 +1485,41 @@\n     }\n     \n     public static void writeStringToFile(final File file, final String data, final Charset charset) throws IOException {\n         writeStringToFile(file, data, charset, false);\n     }\n     \n     public static void writeStringToFile(final File file, final String data, final Charset charset, final boolean append) throws IOException {\n-        final OutputStream out = openOutputStream(file, append);\n-        Throwable x0 = null;\n+        Throwable t = null;\n         try {\n-            IOUtils.write(data, out, charset);\n-        }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n+            final OutputStream out = openOutputStream(file, append);\n+            try {\n+                IOUtils.write(data, out, charset);\n+            }\n+            finally {\n+                if (out != null) {\n+                    out.close();\n+                }\n+            }\n         }\n         finally {\n-            if (out != null) {\n-                $closeResource(x0, out);\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n             }\n         }\n     }\n     \n     public static void writeStringToFile(final File file, final String data, final String charsetName) throws IOException {\n         writeStringToFile(file, data, charsetName, false);\n     }\n     \n     public static void writeStringToFile(final File file, final String data, final String charsetName, final boolean append) throws IOException {\n         writeStringToFile(file, data, Charsets.toCharset(charsetName), append);\n     }\n-    \n-    private static /* synthetic */ void $closeResource(final Throwable x0, final AutoCloseable x1) {\n-        if (x0 != null) {\n-            try {\n-                x1.close();\n-            }\n-            catch (final Throwable exception) {\n-                x0.addSuppressed(exception);\n-            }\n-        }\n-        else {\n-            x1.close();\n-        }\n-    }\n-    \n-    static {\n-        ONE_KB_BI = BigInteger.valueOf(1024L);\n-        ONE_MB_BI = FileUtils.ONE_KB_BI.multiply(FileUtils.ONE_KB_BI);\n-        ONE_GB_BI = FileUtils.ONE_KB_BI.multiply(FileUtils.ONE_MB_BI);\n-        ONE_TB_BI = FileUtils.ONE_KB_BI.multiply(FileUtils.ONE_GB_BI);\n-        ONE_PB_BI = FileUtils.ONE_KB_BI.multiply(FileUtils.ONE_TB_BI);\n-        ONE_EB_BI = FileUtils.ONE_KB_BI.multiply(FileUtils.ONE_PB_BI);\n-        ONE_ZB = BigInteger.valueOf(1024L).multiply(BigInteger.valueOf(1152921504606846976L));\n-        ONE_YB = FileUtils.ONE_KB_BI.multiply(FileUtils.ONE_ZB);\n-        EMPTY_FILE_ARRAY = new File[0];\n-    }\n }\n"}]}
