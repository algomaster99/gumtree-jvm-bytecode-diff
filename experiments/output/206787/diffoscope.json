{"diffoscope-json-version": 1, "source1": "first/ConfigurationNodeIteratorAttribute.class", "source2": "second/ConfigurationNodeIteratorAttribute.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,56 +1,54 @@\n \n package org.apache.commons.configuration2.tree.xpath;\n \n-import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n import java.util.Collection;\n import java.util.LinkedHashSet;\n import java.util.ArrayList;\n import org.apache.commons.jxpath.ri.model.NodePointer;\n import org.apache.commons.jxpath.ri.QName;\n import java.util.List;\n \n class ConfigurationNodeIteratorAttribute<T> extends ConfigurationNodeIteratorBase<T>\n {\n     private static final String WILDCARD = \"*\";\n     private final ConfigurationNodePointer<T> parentPointer;\n     private final List<String> attributeNames;\n     \n-    public ConfigurationNodeIteratorAttribute(final ConfigurationNodePointer<T> parent, final QName name) {\n-        super((ConfigurationNodePointer)parent, false);\n-        this.parentPointer = parent;\n-        this.attributeNames = this.createAttributeDataList(parent, name);\n+    public ConfigurationNodeIteratorAttribute(final ConfigurationNodePointer<T> parentPointer, final QName qName) {\n+        super((ConfigurationNodePointer)parentPointer, false);\n+        this.parentPointer = parentPointer;\n+        this.attributeNames = this.createAttributeDataList(parentPointer, qName);\n     }\n     \n-    protected NodePointer createNodePointer(final int position) {\n-        return (NodePointer)new ConfigurationAttributePointer((ConfigurationNodePointer)this.parentPointer, (String)this.attributeNames.get(position));\n+    protected NodePointer createNodePointer(final int n) {\n+        return (NodePointer)new ConfigurationAttributePointer((ConfigurationNodePointer)this.parentPointer, (String)this.attributeNames.get(n));\n     }\n     \n     protected int size() {\n         return this.attributeNames.size();\n     }\n     \n-    private List<String> createAttributeDataList(final ConfigurationNodePointer<T> parent, final QName name) {\n-        final List<String> result = new ArrayList<String>();\n-        if (!\"*\".equals(name.getName())) {\n-            this.addAttributeData(parent, result, qualifiedName(name));\n+    private List<String> createAttributeDataList(final ConfigurationNodePointer<T> configurationNodePointer, final QName qName2) {\n+        final ArrayList list = new ArrayList();\n+        if (!\"*\".equals(qName2.getName())) {\n+            this.addAttributeData(configurationNodePointer, list, qualifiedName(qName2));\n         }\n         else {\n-            final Set<String> names = new LinkedHashSet<String>(parent.getNodeHandler().getAttributes(parent.getConfigurationNode()));\n-            final String prefix = (name.getPrefix() != null) ? prefixName(name.getPrefix(), (String)null) : null;\n-            names.forEach(n -> {\n-                if (prefix == null || StringUtils.startsWith((CharSequence)n, (CharSequence)prefix)) {\n-                    this.addAttributeData(parent, (List<String>)result, n);\n+            new LinkedHashSet(configurationNodePointer.getNodeHandler().getAttributes(configurationNodePointer.getConfigurationNode())).forEach(s2 -> {\n+                final Object o = (qName2.getPrefix() != null) ? prefixName(qName2.getPrefix(), (String)null) : null;\n+                if (s == null || StringUtils.startsWith((CharSequence)s2, (CharSequence)s)) {\n+                    this.addAttributeData(configurationNodePointer2, list2, s2);\n                 }\n                 return;\n             });\n         }\n-        return result;\n+        return list;\n     }\n     \n-    private void addAttributeData(final ConfigurationNodePointer<T> parent, final List<String> result, final String name) {\n-        if (parent.getNodeHandler().getAttributeValue(parent.getConfigurationNode(), name) != null) {\n-            result.add(name);\n+    private void addAttributeData(final ConfigurationNodePointer<T> configurationNodePointer, final List<String> list, final String s) {\n+        if (configurationNodePointer.getNodeHandler().getAttributeValue(configurationNodePointer.getConfigurationNode(), s) != null) {\n+            list.add(s);\n         }\n     }\n }\n"}]}
