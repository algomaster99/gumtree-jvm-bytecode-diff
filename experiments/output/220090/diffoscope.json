{"diffoscope-json-version": 1, "source1": "first/ReturnCountCheck.class", "source2": "second/ReturnCountCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -34,88 +34,86 @@\n         return new int[] { 88 };\n     }\n     \n     public int[] getAcceptableTokens() {\n         return new int[] { 8, 9, 181, 88 };\n     }\n     \n-    public void setFormat(final Pattern pattern) {\n-        this.format = pattern;\n+    public void setFormat(final Pattern format) {\n+        this.format = format;\n     }\n     \n     public void setMax(final int max) {\n         this.max = max;\n     }\n     \n     public void setMaxForVoid(final int maxForVoid) {\n         this.maxForVoid = maxForVoid;\n     }\n     \n-    public void beginTree(final DetailAST rootAST) {\n+    public void beginTree(final DetailAST detailAST) {\n         this.context = new ReturnCountCheck.Context(this, false);\n         this.contextStack.clear();\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        switch (ast.getType()) {\n+    public void visitToken(final DetailAST detailAST) {\n+        switch (detailAST.getType()) {\n             case 8:\n             case 9: {\n-                this.visitMethodDef(ast);\n+                this.visitMethodDef(detailAST);\n                 break;\n             }\n             case 181: {\n                 this.visitLambda();\n                 break;\n             }\n             case 88: {\n-                this.visitReturn(ast);\n+                this.visitReturn(detailAST);\n                 break;\n             }\n             default: {\n-                throw new IllegalStateException(ast.toString());\n+                throw new IllegalStateException(detailAST.toString());\n             }\n         }\n     }\n     \n-    public void leaveToken(final DetailAST ast) {\n-        switch (ast.getType()) {\n+    public void leaveToken(final DetailAST detailAST) {\n+        switch (detailAST.getType()) {\n             case 8:\n             case 9:\n             case 181: {\n-                this.leave(ast);\n+                this.leave(detailAST);\n                 break;\n             }\n             case 88: {\n                 break;\n             }\n             default: {\n-                throw new IllegalStateException(ast.toString());\n+                throw new IllegalStateException(detailAST.toString());\n             }\n         }\n     }\n     \n-    private void visitMethodDef(final DetailAST ast) {\n+    private void visitMethodDef(final DetailAST detailAST) {\n         this.contextStack.push(this.context);\n-        final DetailAST methodNameAST = ast.findFirstToken(58);\n-        final boolean check = !this.format.matcher(methodNameAST.getText()).find();\n-        this.context = new ReturnCountCheck.Context(this, check);\n+        this.context = new ReturnCountCheck.Context(this, !this.format.matcher(detailAST.findFirstToken(58).getText()).find());\n     }\n     \n-    private void leave(final DetailAST ast) {\n-        this.context.checkCount(ast);\n+    private void leave(final DetailAST detailAST) {\n+        this.context.checkCount(detailAST);\n         this.context = this.contextStack.pop();\n     }\n     \n     private void visitLambda() {\n         this.contextStack.push(this.context);\n         this.context = new ReturnCountCheck.Context(this, true);\n     }\n     \n-    private void visitReturn(final DetailAST ast) {\n-        if (ast.getFirstChild().getType() == 45) {\n+    private void visitReturn(final DetailAST detailAST) {\n+        if (detailAST.getFirstChild().getType() == 45) {\n             this.context.visitLiteralReturn(this.maxForVoid, Boolean.TRUE);\n         }\n         else {\n             this.context.visitLiteralReturn(this.max, Boolean.FALSE);\n         }\n     }\n }\n"}]}
