{"diffoscope-json-version": 1, "source1": "first/ClassLoaderObjectInputStream.class", "source2": "second/ClassLoaderObjectInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,36 +8,36 @@\n import java.io.InputStream;\n import java.io.ObjectInputStream;\n \n public class ClassLoaderObjectInputStream extends ObjectInputStream\n {\n     private final ClassLoader classLoader;\n     \n-    public ClassLoaderObjectInputStream(final ClassLoader classLoader, final InputStream inputStream) throws IOException, StreamCorruptedException {\n-        super(inputStream);\n+    public ClassLoaderObjectInputStream(final ClassLoader classLoader, final InputStream in) throws IOException, StreamCorruptedException {\n+        super(in);\n         this.classLoader = classLoader;\n     }\n     \n     @Override\n-    protected Class<?> resolveClass(final ObjectStreamClass objectStreamClass) throws IOException, ClassNotFoundException {\n+    protected Class<?> resolveClass(final ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n         try {\n-            return Class.forName(objectStreamClass.getName(), false, this.classLoader);\n+            return Class.forName(desc.getName(), false, this.classLoader);\n         }\n-        catch (final ClassNotFoundException cnfe) {\n-            return super.resolveClass(objectStreamClass);\n+        catch (final ClassNotFoundException ex) {\n+            return super.resolveClass(desc);\n         }\n     }\n     \n     @Override\n     protected Class<?> resolveProxyClass(final String[] interfaces) throws IOException, ClassNotFoundException {\n-        final Class<?>[] interfaceClasses = new Class[interfaces.length];\n+        final Class[] interfaces2 = new Class[interfaces.length];\n         for (int i = 0; i < interfaces.length; ++i) {\n-            interfaceClasses[i] = Class.forName(interfaces[i], false, this.classLoader);\n+            interfaces2[i] = Class.forName(interfaces[i], false, this.classLoader);\n         }\n         try {\n-            return Proxy.getProxyClass(this.classLoader, interfaceClasses);\n+            return Proxy.getProxyClass(this.classLoader, (Class<?>[])interfaces2);\n         }\n-        catch (final IllegalArgumentException e) {\n+        catch (final IllegalArgumentException ex) {\n             return super.resolveProxyClass(interfaces);\n         }\n     }\n }\n"}]}
