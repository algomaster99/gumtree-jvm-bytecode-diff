{"diffoscope-json-version": 1, "source1": "first/ExceptionTable.class", "source2": "second/ExceptionTable.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,80 +5,80 @@\n import java.io.IOException;\n import java.io.DataInput;\n \n public final class ExceptionTable extends Attribute\n {\n     private int[] exceptionIndexTable;\n     \n-    public ExceptionTable(final ExceptionTable c) {\n-        this(c.getNameIndex(), c.getLength(), c.getExceptionIndexTable(), c.getConstantPool());\n+    public ExceptionTable(final ExceptionTable exceptionTable) {\n+        this(exceptionTable.getNameIndex(), exceptionTable.getLength(), exceptionTable.getExceptionIndexTable(), exceptionTable.getConstantPool());\n     }\n     \n-    public ExceptionTable(final int name_index, final int length, final int[] exceptionIndexTable, final ConstantPool constant_pool) {\n-        super((byte)3, name_index, length, constant_pool);\n-        this.exceptionIndexTable = ((exceptionIndexTable != null) ? exceptionIndexTable : new int[0]);\n+    public ExceptionTable(final int n, final int n2, final int[] array, final ConstantPool constantPool) {\n+        super((byte)3, n, n2, constantPool);\n+        this.exceptionIndexTable = ((array != null) ? array : new int[0]);\n     }\n     \n-    ExceptionTable(final int nameIndex, final int length, final DataInput input, final ConstantPool constantPool) throws IOException {\n-        this(nameIndex, length, (int[])null, constantPool);\n-        final int number_of_exceptions = input.readUnsignedShort();\n-        this.exceptionIndexTable = new int[number_of_exceptions];\n-        for (int i = 0; i < number_of_exceptions; ++i) {\n-            this.exceptionIndexTable[i] = input.readUnsignedShort();\n+    ExceptionTable(final int n, final int n2, final DataInput dataInput, final ConstantPool constantPool) throws IOException {\n+        this(n, n2, (int[])null, constantPool);\n+        final int unsignedShort = dataInput.readUnsignedShort();\n+        this.exceptionIndexTable = new int[unsignedShort];\n+        for (int i = 0; i < unsignedShort; ++i) {\n+            this.exceptionIndexTable[i] = dataInput.readUnsignedShort();\n         }\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitExceptionTable(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitExceptionTable(this);\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        super.dump(file);\n-        file.writeShort(this.exceptionIndexTable.length);\n-        for (final int index : this.exceptionIndexTable) {\n-            file.writeShort(index);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        super.dump(dataOutputStream);\n+        dataOutputStream.writeShort(this.exceptionIndexTable.length);\n+        final int[] exceptionIndexTable = this.exceptionIndexTable;\n+        for (int length = exceptionIndexTable.length, i = 0; i < length; ++i) {\n+            dataOutputStream.writeShort(exceptionIndexTable[i]);\n         }\n     }\n     \n     public int[] getExceptionIndexTable() {\n         return this.exceptionIndexTable;\n     }\n     \n     public int getNumberOfExceptions() {\n         return (this.exceptionIndexTable == null) ? 0 : this.exceptionIndexTable.length;\n     }\n     \n     public String[] getExceptionNames() {\n-        final String[] names = new String[this.exceptionIndexTable.length];\n+        final String[] array = new String[this.exceptionIndexTable.length];\n         for (int i = 0; i < this.exceptionIndexTable.length; ++i) {\n-            names[i] = super.getConstantPool().getConstantString(this.exceptionIndexTable[i], (byte)7).replace('/', '.');\n+            array[i] = super.getConstantPool().getConstantString(this.exceptionIndexTable[i], (byte)7).replace('/', '.');\n         }\n-        return names;\n+        return array;\n     }\n     \n-    public void setExceptionIndexTable(final int[] exceptionIndexTable) {\n-        this.exceptionIndexTable = ((exceptionIndexTable != null) ? exceptionIndexTable : new int[0]);\n+    public void setExceptionIndexTable(final int[] array) {\n+        this.exceptionIndexTable = ((array != null) ? array : new int[0]);\n     }\n     \n     public String toString() {\n-        final StringBuilder buf = new StringBuilder();\n-        buf.append(\"Exceptions: \");\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"Exceptions: \");\n         for (int i = 0; i < this.exceptionIndexTable.length; ++i) {\n-            final String str = super.getConstantPool().getConstantString(this.exceptionIndexTable[i], (byte)7);\n-            buf.append(Utility.compactClassName(str, false));\n+            sb.append(Utility.compactClassName(super.getConstantPool().getConstantString(this.exceptionIndexTable[i], (byte)7), false));\n             if (i < this.exceptionIndexTable.length - 1) {\n-                buf.append(\", \");\n+                sb.append(\", \");\n             }\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n     \n-    public Attribute copy(final ConstantPool _constant_pool) {\n-        final ExceptionTable c = (ExceptionTable)this.clone();\n+    public Attribute copy(final ConstantPool constantPool) {\n+        final ExceptionTable exceptionTable = (ExceptionTable)this.clone();\n         if (this.exceptionIndexTable != null) {\n-            c.exceptionIndexTable = new int[this.exceptionIndexTable.length];\n-            System.arraycopy(this.exceptionIndexTable, 0, c.exceptionIndexTable, 0, this.exceptionIndexTable.length);\n+            exceptionTable.exceptionIndexTable = new int[this.exceptionIndexTable.length];\n+            System.arraycopy(this.exceptionIndexTable, 0, exceptionTable.exceptionIndexTable, 0, this.exceptionIndexTable.length);\n         }\n-        c.setConstantPool(_constant_pool);\n-        return c;\n+        exceptionTable.setConstantPool(constantPool);\n+        return exceptionTable;\n     }\n }\n"}]}
