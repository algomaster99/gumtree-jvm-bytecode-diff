{"diffoscope-json-version": 1, "source1": "first/BaseNCodecInputStream.class", "source2": "second/BaseNCodecInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,136 +1,136 @@\n-  SHA-256 checksum 30eb3a0fdb99d9cbdb7284d69b642c4744ae7f6e9514e1c24bdc9d8715cb3a5e\n+  SHA-256 checksum 99cc0bf1a14435ba5baffb603ca62a05ea2ec0b5fa3ee2e753c431873de3ee48\n   Compiled from \"BaseNCodecInputStream.java\"\n public class org.apache.commons.codec.binary.BaseNCodecInputStream extends java.io.FilterInputStream\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #33                         // org/apache/commons/codec/binary/BaseNCodecInputStream\n-  super_class: #34                        // java/io/FilterInputStream\n+  this_class: #10                         // org/apache/commons/codec/binary/BaseNCodecInputStream\n+  super_class: #4                         // java/io/FilterInputStream\n   interfaces: 0, fields: 4, methods: 8, attributes: 2\n Constant pool:\n-    #1 = Class              #66           // org/apache/commons/codec/binary/BaseNCodec\n-    #2 = Methodref          #34.#67       // java/io/FilterInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-    #3 = Fieldref           #33.#68       // org/apache/commons/codec/binary/BaseNCodecInputStream.singleByte:[B\n-    #4 = Class              #69           // org/apache/commons/codec/binary/BaseNCodec$Context\n-    #5 = Methodref          #4.#70        // org/apache/commons/codec/binary/BaseNCodec$Context.\"<init>\":()V\n-    #6 = Fieldref           #33.#71       // org/apache/commons/codec/binary/BaseNCodecInputStream.context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-    #7 = Fieldref           #33.#72       // org/apache/commons/codec/binary/BaseNCodecInputStream.doEncode:Z\n-    #8 = Fieldref           #33.#73       // org/apache/commons/codec/binary/BaseNCodecInputStream.baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n-    #9 = Fieldref           #4.#74        // org/apache/commons/codec/binary/BaseNCodec$Context.eof:Z\n-   #10 = Methodref          #33.#75       // org/apache/commons/codec/binary/BaseNCodecInputStream.read:([BII)I\n-   #11 = Class              #76           // java/lang/NullPointerException\n-   #12 = Methodref          #11.#70       // java/lang/NullPointerException.\"<init>\":()V\n-   #13 = Class              #77           // java/lang/IndexOutOfBoundsException\n-   #14 = Methodref          #13.#70       // java/lang/IndexOutOfBoundsException.\"<init>\":()V\n-   #15 = Methodref          #1.#78        // org/apache/commons/codec/binary/BaseNCodec.hasData:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)Z\n-   #16 = Fieldref           #33.#79       // org/apache/commons/codec/binary/BaseNCodecInputStream.in:Ljava/io/InputStream;\n-   #17 = Methodref          #80.#81       // java/io/InputStream.read:([B)I\n-   #18 = Methodref          #1.#82        // org/apache/commons/codec/binary/BaseNCodec.encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-   #19 = Methodref          #1.#83        // org/apache/commons/codec/binary/BaseNCodec.decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-   #20 = Methodref          #1.#84        // org/apache/commons/codec/binary/BaseNCodec.readResults:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n-   #21 = Class              #85           // java/io/IOException\n-   #22 = String             #86           // mark/reset not supported\n-   #23 = Methodref          #21.#87       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #24 = Class              #88           // java/lang/IllegalArgumentException\n-   #25 = Class              #89           // java/lang/StringBuilder\n-   #26 = Methodref          #25.#70       // java/lang/StringBuilder.\"<init>\":()V\n-   #27 = String             #90           // Negative skip length:\n-   #28 = Methodref          #25.#91       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #29 = Methodref          #25.#92       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #30 = Methodref          #25.#93       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #31 = Methodref          #24.#87       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #32 = Methodref          #94.#95       // java/lang/Math.min:(JJ)J\n-   #33 = Class              #96           // org/apache/commons/codec/binary/BaseNCodecInputStream\n-   #34 = Class              #97           // java/io/FilterInputStream\n-   #35 = Utf8               baseNCodec\n-   #36 = Utf8               Lorg/apache/commons/codec/binary/BaseNCodec;\n-   #37 = Utf8               doEncode\n-   #38 = Utf8               Z\n-   #39 = Utf8               singleByte\n-   #40 = Utf8               [B\n-   #41 = Utf8               context\n-   #42 = Utf8               Context\n-   #43 = Utf8               InnerClasses\n-   #44 = Utf8               Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-   #45 = Utf8               <init>\n-   #46 = Utf8               (Ljava/io/InputStream;Lorg/apache/commons/codec/binary/BaseNCodec;Z)V\n-   #47 = Utf8               Code\n-   #48 = Utf8               LineNumberTable\n-   #49 = Utf8               available\n-   #50 = Utf8               ()I\n-   #51 = Utf8               StackMapTable\n-   #52 = Utf8               Exceptions\n-   #53 = Utf8               mark\n-   #54 = Utf8               (I)V\n-   #55 = Utf8               markSupported\n-   #56 = Utf8               ()Z\n-   #57 = Utf8               read\n-   #58 = Utf8               ([BII)I\n-   #59 = Class              #40           // \"[B\"\n-   #60 = Utf8               reset\n-   #61 = Utf8               ()V\n-   #62 = Utf8               skip\n-   #63 = Utf8               (J)J\n-   #64 = Utf8               SourceFile\n-   #65 = Utf8               BaseNCodecInputStream.java\n-   #66 = Utf8               org/apache/commons/codec/binary/BaseNCodec\n-   #67 = NameAndType        #45:#98       // \"<init>\":(Ljava/io/InputStream;)V\n-   #68 = NameAndType        #39:#40       // singleByte:[B\n-   #69 = Utf8               org/apache/commons/codec/binary/BaseNCodec$Context\n-   #70 = NameAndType        #45:#61       // \"<init>\":()V\n-   #71 = NameAndType        #41:#44       // context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-   #72 = NameAndType        #37:#38       // doEncode:Z\n-   #73 = NameAndType        #35:#36       // baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n-   #74 = NameAndType        #99:#38       // eof:Z\n-   #75 = NameAndType        #57:#58       // read:([BII)I\n-   #76 = Utf8               java/lang/NullPointerException\n-   #77 = Utf8               java/lang/IndexOutOfBoundsException\n-   #78 = NameAndType        #100:#101     // hasData:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)Z\n-   #79 = NameAndType        #102:#103     // in:Ljava/io/InputStream;\n-   #80 = Class              #104          // java/io/InputStream\n-   #81 = NameAndType        #57:#105      // read:([B)I\n-   #82 = NameAndType        #106:#107     // encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-   #83 = NameAndType        #108:#107     // decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-   #84 = NameAndType        #109:#110     // readResults:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n-   #85 = Utf8               java/io/IOException\n-   #86 = Utf8               mark/reset not supported\n-   #87 = NameAndType        #45:#111      // \"<init>\":(Ljava/lang/String;)V\n-   #88 = Utf8               java/lang/IllegalArgumentException\n-   #89 = Utf8               java/lang/StringBuilder\n-   #90 = Utf8               Negative skip length:\n-   #91 = NameAndType        #112:#113     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #92 = NameAndType        #112:#114     // append:(J)Ljava/lang/StringBuilder;\n-   #93 = NameAndType        #115:#116     // toString:()Ljava/lang/String;\n-   #94 = Class              #117          // java/lang/Math\n-   #95 = NameAndType        #118:#119     // min:(JJ)J\n-   #96 = Utf8               org/apache/commons/codec/binary/BaseNCodecInputStream\n-   #97 = Utf8               java/io/FilterInputStream\n-   #98 = Utf8               (Ljava/io/InputStream;)V\n-   #99 = Utf8               eof\n-  #100 = Utf8               hasData\n-  #101 = Utf8               (Lorg/apache/commons/codec/binary/BaseNCodec$Context;)Z\n-  #102 = Utf8               in\n-  #103 = Utf8               Ljava/io/InputStream;\n-  #104 = Utf8               java/io/InputStream\n-  #105 = Utf8               ([B)I\n-  #106 = Utf8               encode\n-  #107 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-  #108 = Utf8               decode\n-  #109 = Utf8               readResults\n-  #110 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n-  #111 = Utf8               (Ljava/lang/String;)V\n-  #112 = Utf8               append\n-  #113 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #114 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #115 = Utf8               toString\n-  #116 = Utf8               ()Ljava/lang/String;\n-  #117 = Utf8               java/lang/Math\n-  #118 = Utf8               min\n-  #119 = Utf8               (JJ)J\n+    #1 = Class              #2            // org/apache/commons/codec/binary/BaseNCodec\n+    #2 = Utf8               org/apache/commons/codec/binary/BaseNCodec\n+    #3 = Methodref          #4.#5         // java/io/FilterInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+    #4 = Class              #6            // java/io/FilterInputStream\n+    #5 = NameAndType        #7:#8         // \"<init>\":(Ljava/io/InputStream;)V\n+    #6 = Utf8               java/io/FilterInputStream\n+    #7 = Utf8               <init>\n+    #8 = Utf8               (Ljava/io/InputStream;)V\n+    #9 = Fieldref           #10.#11       // org/apache/commons/codec/binary/BaseNCodecInputStream.singleByte:[B\n+   #10 = Class              #12           // org/apache/commons/codec/binary/BaseNCodecInputStream\n+   #11 = NameAndType        #13:#14       // singleByte:[B\n+   #12 = Utf8               org/apache/commons/codec/binary/BaseNCodecInputStream\n+   #13 = Utf8               singleByte\n+   #14 = Utf8               [B\n+   #15 = Class              #16           // org/apache/commons/codec/binary/BaseNCodec$Context\n+   #16 = Utf8               org/apache/commons/codec/binary/BaseNCodec$Context\n+   #17 = Methodref          #15.#18       // org/apache/commons/codec/binary/BaseNCodec$Context.\"<init>\":()V\n+   #18 = NameAndType        #7:#19        // \"<init>\":()V\n+   #19 = Utf8               ()V\n+   #20 = Fieldref           #10.#21       // org/apache/commons/codec/binary/BaseNCodecInputStream.context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+   #21 = NameAndType        #22:#23       // context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+   #22 = Utf8               context\n+   #23 = Utf8               Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+   #24 = Fieldref           #10.#25       // org/apache/commons/codec/binary/BaseNCodecInputStream.doEncode:Z\n+   #25 = NameAndType        #26:#27       // doEncode:Z\n+   #26 = Utf8               doEncode\n+   #27 = Utf8               Z\n+   #28 = Fieldref           #10.#29       // org/apache/commons/codec/binary/BaseNCodecInputStream.baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n+   #29 = NameAndType        #30:#31       // baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n+   #30 = Utf8               baseNCodec\n+   #31 = Utf8               Lorg/apache/commons/codec/binary/BaseNCodec;\n+   #32 = Fieldref           #15.#33       // org/apache/commons/codec/binary/BaseNCodec$Context.eof:Z\n+   #33 = NameAndType        #34:#27       // eof:Z\n+   #34 = Utf8               eof\n+   #35 = Methodref          #10.#36       // org/apache/commons/codec/binary/BaseNCodecInputStream.read:([BII)I\n+   #36 = NameAndType        #37:#38       // read:([BII)I\n+   #37 = Utf8               read\n+   #38 = Utf8               ([BII)I\n+   #39 = Class              #40           // java/lang/NullPointerException\n+   #40 = Utf8               java/lang/NullPointerException\n+   #41 = Methodref          #39.#18       // java/lang/NullPointerException.\"<init>\":()V\n+   #42 = Class              #43           // java/lang/IndexOutOfBoundsException\n+   #43 = Utf8               java/lang/IndexOutOfBoundsException\n+   #44 = Methodref          #42.#18       // java/lang/IndexOutOfBoundsException.\"<init>\":()V\n+   #45 = Methodref          #1.#46        // org/apache/commons/codec/binary/BaseNCodec.hasData:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)Z\n+   #46 = NameAndType        #47:#48       // hasData:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)Z\n+   #47 = Utf8               hasData\n+   #48 = Utf8               (Lorg/apache/commons/codec/binary/BaseNCodec$Context;)Z\n+   #49 = Fieldref           #10.#50       // org/apache/commons/codec/binary/BaseNCodecInputStream.in:Ljava/io/InputStream;\n+   #50 = NameAndType        #51:#52       // in:Ljava/io/InputStream;\n+   #51 = Utf8               in\n+   #52 = Utf8               Ljava/io/InputStream;\n+   #53 = Methodref          #54.#55       // java/io/InputStream.read:([B)I\n+   #54 = Class              #56           // java/io/InputStream\n+   #55 = NameAndType        #37:#57       // read:([B)I\n+   #56 = Utf8               java/io/InputStream\n+   #57 = Utf8               ([B)I\n+   #58 = Methodref          #1.#59        // org/apache/commons/codec/binary/BaseNCodec.encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+   #59 = NameAndType        #60:#61       // encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+   #60 = Utf8               encode\n+   #61 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+   #62 = Methodref          #1.#63        // org/apache/commons/codec/binary/BaseNCodec.decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+   #63 = NameAndType        #64:#61       // decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+   #64 = Utf8               decode\n+   #65 = Methodref          #1.#66        // org/apache/commons/codec/binary/BaseNCodec.readResults:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+   #66 = NameAndType        #67:#68       // readResults:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+   #67 = Utf8               readResults\n+   #68 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+   #69 = Class              #70           // java/io/IOException\n+   #70 = Utf8               java/io/IOException\n+   #71 = String             #72           // mark/reset not supported\n+   #72 = Utf8               mark/reset not supported\n+   #73 = Methodref          #69.#74       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #74 = NameAndType        #7:#75        // \"<init>\":(Ljava/lang/String;)V\n+   #75 = Utf8               (Ljava/lang/String;)V\n+   #76 = Class              #77           // java/lang/IllegalArgumentException\n+   #77 = Utf8               java/lang/IllegalArgumentException\n+   #78 = Class              #79           // java/lang/StringBuilder\n+   #79 = Utf8               java/lang/StringBuilder\n+   #80 = Methodref          #78.#18       // java/lang/StringBuilder.\"<init>\":()V\n+   #81 = String             #82           // Negative skip length:\n+   #82 = Utf8               Negative skip length:\n+   #83 = Methodref          #78.#84       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #84 = NameAndType        #85:#86       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #85 = Utf8               append\n+   #86 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #87 = Methodref          #78.#88       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+   #88 = NameAndType        #85:#89       // append:(J)Ljava/lang/StringBuilder;\n+   #89 = Utf8               (J)Ljava/lang/StringBuilder;\n+   #90 = Methodref          #78.#91       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #91 = NameAndType        #92:#93       // toString:()Ljava/lang/String;\n+   #92 = Utf8               toString\n+   #93 = Utf8               ()Ljava/lang/String;\n+   #94 = Methodref          #76.#74       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #95 = Methodref          #96.#97       // java/lang/Math.min:(JJ)J\n+   #96 = Class              #98           // java/lang/Math\n+   #97 = NameAndType        #99:#100      // min:(JJ)J\n+   #98 = Utf8               java/lang/Math\n+   #99 = Utf8               min\n+  #100 = Utf8               (JJ)J\n+  #101 = Utf8               (Ljava/io/InputStream;Lorg/apache/commons/codec/binary/BaseNCodec;Z)V\n+  #102 = Utf8               Code\n+  #103 = Utf8               LineNumberTable\n+  #104 = Utf8               available\n+  #105 = Utf8               ()I\n+  #106 = Utf8               StackMapTable\n+  #107 = Utf8               Exceptions\n+  #108 = Utf8               mark\n+  #109 = Utf8               (I)V\n+  #110 = Utf8               markSupported\n+  #111 = Utf8               ()Z\n+  #112 = Class              #14           // \"[B\"\n+  #113 = Utf8               reset\n+  #114 = Utf8               skip\n+  #115 = Utf8               (J)J\n+  #116 = Utf8               SourceFile\n+  #117 = Utf8               BaseNCodecInputStream.java\n+  #118 = Utf8               InnerClasses\n+  #119 = Utf8               Context\n {\n   private final org.apache.commons.codec.binary.BaseNCodec baseNCodec;\n     descriptor: Lorg/apache/commons/codec/binary/BaseNCodec;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final boolean doEncode;\n     descriptor: Z\n@@ -147,30 +147,30 @@\n   protected org.apache.commons.codec.binary.BaseNCodecInputStream(java.io.InputStream, org.apache.commons.codec.binary.BaseNCodec, boolean);\n     descriptor: (Ljava/io/InputStream;Lorg/apache/commons/codec/binary/BaseNCodec;Z)V\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=3, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #2                  // Method java/io/FilterInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+         2: invokespecial #3                  // Method java/io/FilterInputStream.\"<init>\":(Ljava/io/InputStream;)V\n          5: aload_0\n          6: iconst_1\n          7: newarray       byte\n-         9: putfield      #3                  // Field singleByte:[B\n+         9: putfield      #9                  // Field singleByte:[B\n         12: aload_0\n-        13: new           #4                  // class org/apache/commons/codec/binary/BaseNCodec$Context\n+        13: new           #15                 // class org/apache/commons/codec/binary/BaseNCodec$Context\n         16: dup\n-        17: invokespecial #5                  // Method org/apache/commons/codec/binary/BaseNCodec$Context.\"<init>\":()V\n-        20: putfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+        17: invokespecial #17                 // Method org/apache/commons/codec/binary/BaseNCodec$Context.\"<init>\":()V\n+        20: putfield      #20                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n         23: aload_0\n         24: iload_3\n-        25: putfield      #7                  // Field doEncode:Z\n+        25: putfield      #24                 // Field doEncode:Z\n         28: aload_0\n         29: aload_2\n-        30: putfield      #8                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n+        30: putfield      #28                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n         33: return\n       LineNumberTable:\n         line 45: 0\n         line 40: 5\n         line 42: 12\n         line 46: 23\n         line 47: 28\n@@ -178,16 +178,16 @@\n \n   public int available() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-         4: getfield      #9                  // Field org/apache/commons/codec/binary/BaseNCodec$Context.eof:Z\n+         1: getfield      #20                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+         4: getfield      #32                 // Field org/apache/commons/codec/binary/BaseNCodec$Context.eof:Z\n          7: ifeq          14\n         10: iconst_0\n         11: goto          15\n         14: iconst_1\n         15: ireturn\n       LineNumberTable:\n         line 64: 0\n@@ -220,33 +220,33 @@\n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=1\n          0: aload_0\n          1: aload_0\n-         2: getfield      #3                  // Field singleByte:[B\n+         2: getfield      #9                  // Field singleByte:[B\n          5: iconst_0\n          6: iconst_1\n-         7: invokevirtual #10                 // Method read:([BII)I\n+         7: invokevirtual #35                 // Method read:([BII)I\n         10: istore_1\n         11: iload_1\n         12: ifne          29\n         15: aload_0\n         16: aload_0\n-        17: getfield      #3                  // Field singleByte:[B\n+        17: getfield      #9                  // Field singleByte:[B\n         20: iconst_0\n         21: iconst_1\n-        22: invokevirtual #10                 // Method read:([BII)I\n+        22: invokevirtual #35                 // Method read:([BII)I\n         25: istore_1\n         26: goto          11\n         29: iload_1\n         30: ifle          54\n         33: aload_0\n-        34: getfield      #3                  // Field singleByte:[B\n+        34: getfield      #9                  // Field singleByte:[B\n         37: iconst_0\n         38: baload\n         39: istore_2\n         40: iload_2\n         41: ifge          52\n         44: sipush        256\n         47: iload_2\n@@ -282,95 +282,95 @@\n   public int read(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=7, args_size=4\n          0: aload_1\n          1: ifnonnull     12\n-         4: new           #11                 // class java/lang/NullPointerException\n+         4: new           #39                 // class java/lang/NullPointerException\n          7: dup\n-         8: invokespecial #12                 // Method java/lang/NullPointerException.\"<init>\":()V\n+         8: invokespecial #41                 // Method java/lang/NullPointerException.\"<init>\":()V\n         11: athrow\n         12: iload_2\n         13: iflt          20\n         16: iload_3\n         17: ifge          28\n-        20: new           #13                 // class java/lang/IndexOutOfBoundsException\n+        20: new           #42                 // class java/lang/IndexOutOfBoundsException\n         23: dup\n-        24: invokespecial #14                 // Method java/lang/IndexOutOfBoundsException.\"<init>\":()V\n+        24: invokespecial #44                 // Method java/lang/IndexOutOfBoundsException.\"<init>\":()V\n         27: athrow\n         28: iload_2\n         29: aload_1\n         30: arraylength\n         31: if_icmpgt     42\n         34: iload_2\n         35: iload_3\n         36: iadd\n         37: aload_1\n         38: arraylength\n         39: if_icmple     50\n-        42: new           #13                 // class java/lang/IndexOutOfBoundsException\n+        42: new           #42                 // class java/lang/IndexOutOfBoundsException\n         45: dup\n-        46: invokespecial #14                 // Method java/lang/IndexOutOfBoundsException.\"<init>\":()V\n+        46: invokespecial #44                 // Method java/lang/IndexOutOfBoundsException.\"<init>\":()V\n         49: athrow\n         50: iload_3\n         51: ifne          56\n         54: iconst_0\n         55: ireturn\n         56: iconst_0\n         57: istore        4\n         59: iload         4\n         61: ifne          170\n         64: aload_0\n-        65: getfield      #8                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n+        65: getfield      #28                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n         68: aload_0\n-        69: getfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-        72: invokevirtual #15                 // Method org/apache/commons/codec/binary/BaseNCodec.hasData:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)Z\n+        69: getfield      #20                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+        72: invokevirtual #45                 // Method org/apache/commons/codec/binary/BaseNCodec.hasData:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)Z\n         75: ifne          151\n         78: aload_0\n-        79: getfield      #7                  // Field doEncode:Z\n+        79: getfield      #24                 // Field doEncode:Z\n         82: ifeq          91\n         85: sipush        4096\n         88: goto          94\n         91: sipush        8192\n         94: newarray       byte\n         96: astore        5\n         98: aload_0\n-        99: getfield      #16                 // Field in:Ljava/io/InputStream;\n+        99: getfield      #49                 // Field in:Ljava/io/InputStream;\n        102: aload         5\n-       104: invokevirtual #17                 // Method java/io/InputStream.read:([B)I\n+       104: invokevirtual #53                 // Method java/io/InputStream.read:([B)I\n        107: istore        6\n        109: aload_0\n-       110: getfield      #7                  // Field doEncode:Z\n+       110: getfield      #24                 // Field doEncode:Z\n        113: ifeq          135\n        116: aload_0\n-       117: getfield      #8                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n+       117: getfield      #28                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n        120: aload         5\n        122: iconst_0\n        123: iload         6\n        125: aload_0\n-       126: getfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-       129: invokevirtual #18                 // Method org/apache/commons/codec/binary/BaseNCodec.encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+       126: getfield      #20                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+       129: invokevirtual #58                 // Method org/apache/commons/codec/binary/BaseNCodec.encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n        132: goto          151\n        135: aload_0\n-       136: getfield      #8                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n+       136: getfield      #28                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n        139: aload         5\n        141: iconst_0\n        142: iload         6\n        144: aload_0\n-       145: getfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-       148: invokevirtual #19                 // Method org/apache/commons/codec/binary/BaseNCodec.decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+       145: getfield      #20                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+       148: invokevirtual #62                 // Method org/apache/commons/codec/binary/BaseNCodec.decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n        151: aload_0\n-       152: getfield      #8                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n+       152: getfield      #28                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n        155: aload_1\n        156: iload_2\n        157: iload_3\n        158: aload_0\n-       159: getfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-       162: invokevirtual #20                 // Method org/apache/commons/codec/binary/BaseNCodec.readResults:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+       159: getfield      #20                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+       162: invokevirtual #65                 // Method org/apache/commons/codec/binary/BaseNCodec.readResults:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n        165: istore        4\n        167: goto          59\n        170: iload         4\n        172: ireturn\n       LineNumberTable:\n         line 129: 0\n         line 130: 4\n@@ -413,18 +413,18 @@\n       throws java.io.IOException\n \n   public synchronized void reset() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0021) ACC_PUBLIC, ACC_SYNCHRONIZED\n     Code:\n       stack=3, locals=1, args_size=1\n-         0: new           #21                 // class java/io/IOException\n+         0: new           #69                 // class java/io/IOException\n          3: dup\n-         4: ldc           #22                 // String mark/reset not supported\n-         6: invokespecial #23                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+         4: ldc           #71                 // String mark/reset not supported\n+         6: invokespecial #73                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n          9: athrow\n       LineNumberTable:\n         line 181: 0\n     Exceptions:\n       throws java.io.IOException\n \n   public long skip(long) throws java.io.IOException;\n@@ -432,47 +432,47 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=7, args_size=2\n          0: lload_1\n          1: lconst_0\n          2: lcmp\n          3: ifge          33\n-         6: new           #24                 // class java/lang/IllegalArgumentException\n+         6: new           #76                 // class java/lang/IllegalArgumentException\n          9: dup\n-        10: new           #25                 // class java/lang/StringBuilder\n+        10: new           #78                 // class java/lang/StringBuilder\n         13: dup\n-        14: invokespecial #26                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        17: ldc           #27                 // String Negative skip length:\n-        19: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        14: invokespecial #80                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        17: ldc           #81                 // String Negative skip length:\n+        19: invokevirtual #83                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         22: lload_1\n-        23: invokevirtual #29                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-        26: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        29: invokespecial #31                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        23: invokevirtual #87                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+        26: invokevirtual #90                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        29: invokespecial #94                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         32: athrow\n         33: sipush        512\n         36: newarray       byte\n         38: astore_3\n         39: lload_1\n         40: lstore        4\n         42: lload         4\n         44: lconst_0\n         45: lcmp\n         46: ifle          90\n         49: aload_3\n         50: arraylength\n         51: i2l\n         52: lload         4\n-        54: invokestatic  #32                 // Method java/lang/Math.min:(JJ)J\n+        54: invokestatic  #95                 // Method java/lang/Math.min:(JJ)J\n         57: l2i\n         58: istore        6\n         60: aload_0\n         61: aload_3\n         62: iconst_0\n         63: iload         6\n-        65: invokevirtual #10                 // Method read:([BII)I\n+        65: invokevirtual #35                 // Method read:([BII)I\n         68: istore        6\n         70: iload         6\n         72: iconst_m1\n         73: if_icmpne     79\n         76: goto          90\n         79: lload         4\n         81: iload         6\n@@ -508,8 +508,8 @@\n         frame_type = 250 /* chop */\n           offset_delta = 10\n     Exceptions:\n       throws java.io.IOException\n }\n SourceFile: \"BaseNCodecInputStream.java\"\n InnerClasses:\n-  static #42= #4 of #1;                   // Context=class org/apache/commons/codec/binary/BaseNCodec$Context of class org/apache/commons/codec/binary/BaseNCodec\n+  static #119= #15 of #1;                 // Context=class org/apache/commons/codec/binary/BaseNCodec$Context of class org/apache/commons/codec/binary/BaseNCodec\n"}]}
