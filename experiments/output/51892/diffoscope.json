{"diffoscope-json-version": 1, "source1": "first/IOUtils.class", "source2": "second/IOUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,14 +12,18 @@\n \n public final class IOUtils\n {\n     private static final int COPY_BUF_SIZE = 8024;\n     private static final int SKIP_BUF_SIZE = 4096;\n     private static final byte[] SKIP_BUF;\n     \n+    static {\n+        SKIP_BUF = new byte[4096];\n+    }\n+    \n     private IOUtils() {\n     }\n     \n     public static long copy(final InputStream input, final OutputStream output) throws IOException {\n         return copy(input, output, 8024);\n     }\n     \n@@ -32,29 +36,31 @@\n             count += n;\n         }\n         return count;\n     }\n     \n     public static long skip(final InputStream input, long numToSkip) throws IOException {\n         final long available = numToSkip;\n-        while (numToSkip > 0L) {\n-            final long skipped = input.skip(numToSkip);\n-            if (skipped == 0L) {\n-                break;\n-            }\n-            numToSkip -= skipped;\n-        }\n-        while (numToSkip > 0L) {\n-            final int read = readFully(input, IOUtils.SKIP_BUF, 0, (int)Math.min(numToSkip, 4096L));\n-            if (read < 1) {\n-                break;\n+        while (true) {\n+            while (numToSkip > 0L) {\n+                final long skipped = input.skip(numToSkip);\n+                if (skipped == 0L) {\n+                    while (numToSkip > 0L) {\n+                        final int read = readFully(input, IOUtils.SKIP_BUF, 0, (int)Math.min(numToSkip, 4096L));\n+                        if (read < 1) {\n+                            break;\n+                        }\n+                        numToSkip -= read;\n+                    }\n+                    return available - numToSkip;\n+                }\n+                numToSkip -= skipped;\n             }\n-            numToSkip -= read;\n+            continue;\n         }\n-        return available - numToSkip;\n     }\n     \n     public static int readFully(final InputStream input, final byte[] b) throws IOException {\n         return readFully(input, b, 0, b.length);\n     }\n     \n     public static int readFully(final InputStream input, final byte[] b, final int offset, final int len) throws IOException {\n@@ -96,12 +102,8 @@\n         if (c != null) {\n             try {\n                 c.close();\n             }\n             catch (final IOException ex) {}\n         }\n     }\n-    \n-    static {\n-        SKIP_BUF = new byte[4096];\n-    }\n }\n"}]}
