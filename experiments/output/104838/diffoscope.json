{"diffoscope-json-version": 1, "source1": "first/ImmutableNode.class", "source2": "second/ImmutableNode.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -17,17 +17,17 @@\n     private final String nodeName;\n     private final Object value;\n     private final List<ImmutableNode> children;\n     private final Map<String, Object> attributes;\n     \n     private ImmutableNode(final ImmutableNode.Builder b) {\n         this.children = b.createChildren();\n-        this.attributes = ImmutableNode.Builder.access$000(b);\n-        this.nodeName = ImmutableNode.Builder.access$100(b);\n-        this.value = ImmutableNode.Builder.access$200(b);\n+        this.attributes = ImmutableNode.Builder.access$0(b);\n+        this.nodeName = ImmutableNode.Builder.access$1(b);\n+        this.value = ImmutableNode.Builder.access$2(b);\n     }\n     \n     public String getNodeName() {\n         return this.nodeName;\n     }\n     \n     public Object getValue() {\n@@ -38,68 +38,68 @@\n         return this.children;\n     }\n     \n     public List<ImmutableNode> getChildren(final String name) {\n         if (name == null) {\n             return new ArrayList<ImmutableNode>();\n         }\n-        return this.children.stream().filter(in -> name.equals(in.getNodeName())).collect((Collector<? super Object, ?, List<ImmutableNode>>)Collectors.toList());\n+        return this.children.stream().filter(in -> s.equals(in.getNodeName())).collect((Collector<? super Object, ?, List<ImmutableNode>>)Collectors.toList());\n     }\n     \n     public Map<String, Object> getAttributes() {\n         return this.attributes;\n     }\n     \n     public ImmutableNode setName(final String name) {\n-        return new ImmutableNode.Builder((List)this.children, (Map)this.attributes, (ImmutableNode.ImmutableNode$1)null).name(name).value(this.value).create();\n+        return new ImmutableNode.Builder((List)this.children, (Map)this.attributes, (ImmutableNode.Builder)null).name(name).value(this.value).create();\n     }\n     \n     public ImmutableNode setValue(final Object newValue) {\n-        return new ImmutableNode.Builder((List)this.children, (Map)this.attributes, (ImmutableNode.ImmutableNode$1)null).name(this.nodeName).value(newValue).create();\n+        return new ImmutableNode.Builder((List)this.children, (Map)this.attributes, (ImmutableNode.Builder)null).name(this.nodeName).value(newValue).create();\n     }\n     \n     public ImmutableNode addChild(final ImmutableNode child) {\n         checkChildNode(child);\n-        final ImmutableNode.Builder builder = new ImmutableNode.Builder(this.children.size() + 1, (Map)this.attributes, (ImmutableNode.ImmutableNode$1)null);\n+        final ImmutableNode.Builder builder = new ImmutableNode.Builder(this.children.size() + 1, (Map)this.attributes, (ImmutableNode.Builder)null);\n         builder.addChildren((Collection)this.children).addChild(child);\n         return this.createWithBasicProperties(builder);\n     }\n     \n     public ImmutableNode removeChild(final ImmutableNode child) {\n-        final ImmutableNode.Builder builder = new ImmutableNode.Builder(this.children.size(), (Map)this.attributes, (ImmutableNode.ImmutableNode$1)null);\n+        final ImmutableNode.Builder builder = new ImmutableNode.Builder(this.children.size(), (Map)this.attributes, (ImmutableNode.Builder)null);\n         boolean foundChild = false;\n         for (final ImmutableNode c : this.children) {\n             if (c == child) {\n                 foundChild = true;\n             }\n             else {\n                 builder.addChild(c);\n             }\n         }\n         return foundChild ? this.createWithBasicProperties(builder) : this;\n     }\n     \n     public ImmutableNode replaceChild(final ImmutableNode oldChild, final ImmutableNode newChild) {\n         checkChildNode(newChild);\n-        final ImmutableNode.Builder builder = new ImmutableNode.Builder(this.children.size(), (Map)this.attributes, (ImmutableNode.ImmutableNode$1)null);\n+        final ImmutableNode.Builder builder = new ImmutableNode.Builder(this.children.size(), (Map)this.attributes, (ImmutableNode.Builder)null);\n         boolean foundChild = false;\n         for (final ImmutableNode c : this.children) {\n             if (c == oldChild) {\n                 builder.addChild(newChild);\n                 foundChild = true;\n             }\n             else {\n                 builder.addChild(c);\n             }\n         }\n         return foundChild ? this.createWithBasicProperties(builder) : this;\n     }\n     \n     public ImmutableNode replaceChildren(final Collection<ImmutableNode> newChildren) {\n-        final ImmutableNode.Builder builder = new ImmutableNode.Builder((List)null, (Map)this.attributes, (ImmutableNode.ImmutableNode$1)null);\n+        final ImmutableNode.Builder builder = new ImmutableNode.Builder((List)null, (Map)this.attributes, (ImmutableNode.Builder)null);\n         builder.addChildren((Collection)newChildren);\n         return this.createWithBasicProperties(builder);\n     }\n     \n     public ImmutableNode setAttribute(final String name, final Object value) {\n         final Map<String, Object> newAttrs = new HashMap<String, Object>(this.attributes);\n         newAttrs.put(name, value);\n@@ -124,15 +124,15 @@\n     }\n     \n     private ImmutableNode createWithBasicProperties(final ImmutableNode.Builder builder) {\n         return builder.name(this.nodeName).value(this.value).create();\n     }\n     \n     private ImmutableNode createWithNewAttributes(final Map<String, Object> newAttrs) {\n-        return this.createWithBasicProperties(new ImmutableNode.Builder((List)this.children, (Map)null, (ImmutableNode.ImmutableNode$1)null).addAttributes((Map)newAttrs));\n+        return this.createWithBasicProperties(new ImmutableNode.Builder((List)this.children, (Map)null, (ImmutableNode.Builder)null).addAttributes((Map)newAttrs));\n     }\n     \n     private static void checkChildNode(final ImmutableNode child) {\n         if (child == null) {\n             throw new IllegalArgumentException(\"Child node must not be null!\");\n         }\n     }\n@@ -144,10 +144,10 @@\n     \n     public Stream<ImmutableNode> stream() {\n         return StreamSupport.stream(this.spliterator(), false);\n     }\n     \n     @Override\n     public String toString() {\n-        return super.toString() + \"(\" + this.nodeName + \")\";\n+        return String.valueOf(super.toString()) + \"(\" + this.nodeName + \")\";\n     }\n }\n"}]}
