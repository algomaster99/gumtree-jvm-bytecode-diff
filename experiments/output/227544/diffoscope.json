{"diffoscope-json-version": 1, "source1": "first/DetectorOptions$Builder.class", "source2": "second/DetectorOptions$Builder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,62 +8,62 @@\n \n public final class Builder\n {\n     public Builder(final DetectorOptions this$0) {\n         this.this$0 = this$0;\n     }\n     \n-    public Builder reporter(final AbstractViolationReporter val) {\n-        this.this$0.reporter = val;\n+    public Builder reporter(final AbstractViolationReporter reporter) {\n+        this.this$0.reporter = reporter;\n         return this;\n     }\n     \n-    public Builder compileFlags(final int val) {\n-        this.this$0.compileFlags = val;\n+    public Builder compileFlags(final int compileFlags) {\n+        this.this$0.compileFlags = compileFlags;\n         return this;\n     }\n     \n-    public Builder format(final String val) {\n-        this.this$0.format = val;\n+    public Builder format(final String format) {\n+        this.this$0.format = format;\n         return this;\n     }\n     \n-    public Builder message(final String val) {\n-        this.this$0.message = val;\n+    public Builder message(final String message) {\n+        this.this$0.message = message;\n         return this;\n     }\n     \n-    public Builder minimum(final int val) {\n-        this.this$0.minimum = val;\n+    public Builder minimum(final int minimum) {\n+        this.this$0.minimum = minimum;\n         return this;\n     }\n     \n-    public Builder maximum(final int val) {\n-        this.this$0.maximum = val;\n+    public Builder maximum(final int maximum) {\n+        this.this$0.maximum = maximum;\n         return this;\n     }\n     \n-    public Builder ignoreCase(final boolean val) {\n-        this.this$0.ignoreCase = val;\n+    public Builder ignoreCase(final boolean ignoreCase) {\n+        this.this$0.ignoreCase = ignoreCase;\n         return this;\n     }\n     \n-    public Builder suppressor(final MatchSuppressor val) {\n-        this.this$0.suppressor = val;\n+    public Builder suppressor(final MatchSuppressor suppressor) {\n+        this.this$0.suppressor = suppressor;\n         return this;\n     }\n     \n     public DetectorOptions build() {\n         this.this$0.message = Optional.ofNullable(this.this$0.message).orElse(\"\");\n         this.this$0.suppressor = Optional.ofNullable(this.this$0.suppressor).orElse(NeverSuppress.INSTANCE);\n         this.this$0.pattern = Optional.ofNullable(this.this$0.format).map((Function<? super String, ? extends Pattern>)this::createPattern).orElse(null);\n         return this.this$0;\n     }\n     \n-    private Pattern createPattern(final String formatValue) {\n-        int options = this.this$0.compileFlags;\n+    private Pattern createPattern(final String regex) {\n+        int compileFlags = this.this$0.compileFlags;\n         if (this.this$0.ignoreCase) {\n-            options |= 0x2;\n+            compileFlags |= 0x2;\n         }\n-        return Pattern.compile(formatValue, options);\n+        return Pattern.compile(regex, compileFlags);\n     }\n }\n"}]}
