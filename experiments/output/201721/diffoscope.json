{"diffoscope-json-version": 1, "source1": "first/BCodec.class", "source2": "second/BCodec.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -39,84 +39,84 @@\n         return this.decodingPolicy == CodecPolicy.STRICT;\n     }\n     \n     protected String getEncoding() {\n         return \"B\";\n     }\n     \n-    protected byte[] doEncoding(final byte[] bytes) {\n-        if (bytes == null) {\n+    protected byte[] doEncoding(final byte[] array) {\n+        if (array == null) {\n             return null;\n         }\n-        return Base64.encodeBase64(bytes);\n+        return Base64.encodeBase64(array);\n     }\n     \n-    protected byte[] doDecoding(final byte[] bytes) {\n-        if (bytes == null) {\n+    protected byte[] doDecoding(final byte[] array) {\n+        if (array == null) {\n             return null;\n         }\n-        return new Base64(0, BaseNCodec.getChunkSeparator(), false, this.decodingPolicy).decode(bytes);\n+        return new Base64(0, BaseNCodec.getChunkSeparator(), false, this.decodingPolicy).decode(array);\n     }\n     \n-    public String encode(final String strSource, final Charset sourceCharset) throws EncoderException {\n-        if (strSource == null) {\n+    public String encode(final String s, final Charset charset) throws EncoderException {\n+        if (s == null) {\n             return null;\n         }\n-        return this.encodeText(strSource, sourceCharset);\n+        return this.encodeText(s, charset);\n     }\n     \n-    public String encode(final String strSource, final String sourceCharset) throws EncoderException {\n-        if (strSource == null) {\n+    public String encode(final String s, final String s2) throws EncoderException {\n+        if (s == null) {\n             return null;\n         }\n         try {\n-            return this.encodeText(strSource, sourceCharset);\n+            return this.encodeText(s, s2);\n         }\n-        catch (final UnsupportedEncodingException e) {\n-            throw new EncoderException(e.getMessage(), (Throwable)e);\n+        catch (final UnsupportedEncodingException ex) {\n+            throw new EncoderException(ex.getMessage(), (Throwable)ex);\n         }\n     }\n     \n-    public String encode(final String strSource) throws EncoderException {\n-        if (strSource == null) {\n+    public String encode(final String s) throws EncoderException {\n+        if (s == null) {\n             return null;\n         }\n-        return this.encode(strSource, this.getCharset());\n+        return this.encode(s, this.getCharset());\n     }\n     \n-    public String decode(final String value) throws DecoderException {\n-        if (value == null) {\n+    public String decode(final String s) throws DecoderException {\n+        if (s == null) {\n             return null;\n         }\n         try {\n-            return this.decodeText(value);\n+            return this.decodeText(s);\n         }\n-        catch (final UnsupportedEncodingException | IllegalArgumentException e) {\n-            throw new DecoderException(e.getMessage(), (Throwable)e);\n+        catch (final UnsupportedEncodingException | IllegalArgumentException ex) {\n+            throw new DecoderException(((Throwable)ex).getMessage(), (Throwable)ex);\n         }\n     }\n     \n-    public Object encode(final Object value) throws EncoderException {\n-        if (value == null) {\n+    public Object encode(final Object o) throws EncoderException {\n+        if (o == null) {\n             return null;\n         }\n-        if (value instanceof String) {\n-            return this.encode((String)value);\n+        if (o instanceof String) {\n+            return this.encode((String)o);\n         }\n-        throw new EncoderException(\"Objects of type \" + value.getClass().getName() + \" cannot be encoded using BCodec\");\n+        throw new EncoderException(\"Objects of type \" + o.getClass().getName() + \" cannot be encoded using BCodec\");\n     }\n     \n-    public Object decode(final Object value) throws DecoderException {\n-        if (value == null) {\n+    public Object decode(final Object o) throws DecoderException {\n+        if (o == null) {\n             return null;\n         }\n-        if (value instanceof String) {\n-            return this.decode((String)value);\n+        if (o instanceof String) {\n+            return this.decode((String)o);\n         }\n-        throw new DecoderException(\"Objects of type \" + value.getClass().getName() + \" cannot be decoded using BCodec\");\n+        throw new DecoderException(\"Objects of type \" + o.getClass().getName() + \" cannot be decoded using BCodec\");\n     }\n     \n     public Charset getCharset() {\n         return this.charset;\n     }\n     \n     public String getDefaultCharset() {\n"}]}
