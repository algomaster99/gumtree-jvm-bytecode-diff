{"diffoscope-json-version": 1, "source1": "first/OrderedPropertiesCheck.class", "source2": "second/OrderedPropertiesCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -16,22 +16,49 @@\n @StatelessCheck\n public class OrderedPropertiesCheck extends AbstractFileSetCheck\n {\n     public static final String MSG_KEY = \"properties.notSorted.property\";\n     public static final String MSG_IO_EXCEPTION_KEY = \"unable.open.cause\";\n     private static final Pattern SPACE_PATTERN;\n     \n+    static {\n+        SPACE_PATTERN = Pattern.compile(\" \");\n+    }\n+    \n     public OrderedPropertiesCheck() {\n         this.setFileExtensions(new String[] { \"properties\" });\n     }\n     \n     protected void processFiltered(final File file, final FileText fileText) {\n         final OrderedPropertiesCheck.SequencedProperties properties = new OrderedPropertiesCheck.SequencedProperties();\n-        try (final InputStream inputStream = Files.newInputStream(file.toPath(), new OpenOption[0])) {\n-            properties.load(inputStream);\n+        try {\n+            Throwable t = null;\n+            try {\n+                final InputStream inputStream = Files.newInputStream(file.toPath(), new OpenOption[0]);\n+                try {\n+                    properties.load(inputStream);\n+                }\n+                finally {\n+                    if (inputStream != null) {\n+                        inputStream.close();\n+                    }\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n+                }\n+            }\n         }\n         catch (final IOException | IllegalArgumentException ex) {\n             this.log(1, \"unable.open.cause\", new Object[] { file.getPath(), ex.getLocalizedMessage() });\n         }\n         String previousProp = \"\";\n         int startLineNo = 0;\n         final Iterator<Object> propertyIterator = properties.keys().asIterator();\n@@ -66,12 +93,8 @@\n         return indexNumber;\n     }\n     \n     private static Pattern getKeyPattern(final String keyName) {\n         final String keyPatternString = \"^\" + OrderedPropertiesCheck.SPACE_PATTERN.matcher(keyName).replaceAll(Matcher.quoteReplacement(\"\\\\\\\\ \")) + \"[\\\\s:=].*\";\n         return Pattern.compile(keyPatternString);\n     }\n-    \n-    static {\n-        SPACE_PATTERN = Pattern.compile(\" \");\n-    }\n }\n"}]}
