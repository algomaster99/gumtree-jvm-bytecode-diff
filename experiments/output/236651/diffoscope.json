{"diffoscope-json-version": 1, "source1": "first/FileAlterationMonitor.class", "source2": "second/FileAlterationMonitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -23,57 +23,58 @@\n     }\n     \n     public FileAlterationMonitor(final long interval) {\n         this.observers = new CopyOnWriteArrayList<FileAlterationObserver>();\n         this.interval = interval;\n     }\n     \n-    public FileAlterationMonitor(final long interval, final Collection<FileAlterationObserver> observers) {\n-        this(interval, (FileAlterationObserver[])((Collection)Optional.ofNullable(observers).orElse(Collections.emptyList())).toArray(FileAlterationMonitor.EMPTY_ARRAY));\n+    public FileAlterationMonitor(final long n, final Collection<FileAlterationObserver> value) {\n+        this(n, (FileAlterationObserver[])((Collection)Optional.ofNullable(value).orElse(Collections.emptyList())).toArray(FileAlterationMonitor.EMPTY_ARRAY));\n     }\n     \n-    public FileAlterationMonitor(final long interval, final FileAlterationObserver... observers) {\n-        this(interval);\n-        if (observers != null) {\n-            for (final FileAlterationObserver observer : observers) {\n-                this.addObserver(observer);\n+    public FileAlterationMonitor(final long n, final FileAlterationObserver... array) {\n+        this(n);\n+        if (array != null) {\n+            for (int length = array.length, i = 0; i < length; ++i) {\n+                this.addObserver(array[i]);\n             }\n         }\n     }\n     \n     public long getInterval() {\n         return this.interval;\n     }\n     \n     public synchronized void setThreadFactory(final ThreadFactory threadFactory) {\n         this.threadFactory = threadFactory;\n     }\n     \n-    public void addObserver(final FileAlterationObserver observer) {\n-        if (observer != null) {\n-            this.observers.add(observer);\n+    public void addObserver(final FileAlterationObserver fileAlterationObserver) {\n+        if (fileAlterationObserver != null) {\n+            this.observers.add(fileAlterationObserver);\n         }\n     }\n     \n-    public void removeObserver(final FileAlterationObserver observer) {\n-        if (observer != null) {\n-            while (this.observers.remove(observer)) {}\n+    public void removeObserver(final FileAlterationObserver fileAlterationObserver) {\n+        if (fileAlterationObserver != null) {\n+            while (this.observers.remove(fileAlterationObserver)) {}\n         }\n     }\n     \n     public Iterable<FileAlterationObserver> getObservers() {\n         return this.observers;\n     }\n     \n     public synchronized void start() throws Exception {\n         if (this.running) {\n             throw new IllegalStateException(\"Monitor is already running\");\n         }\n-        for (final FileAlterationObserver observer : this.observers) {\n-            observer.initialize();\n+        final Iterator<FileAlterationObserver> iterator = this.observers.iterator();\n+        while (iterator.hasNext()) {\n+            ((FileAlterationObserver)iterator.next()).initialize();\n         }\n         this.running = true;\n         if (this.threadFactory != null) {\n             this.thread = this.threadFactory.newThread(this);\n         }\n         else {\n             this.thread = new Thread(this);\n@@ -81,36 +82,38 @@\n         this.thread.start();\n     }\n     \n     public synchronized void stop() throws Exception {\n         this.stop(this.interval);\n     }\n     \n-    public synchronized void stop(final long stopInterval) throws Exception {\n+    public synchronized void stop(final long millis) throws Exception {\n         if (!this.running) {\n             throw new IllegalStateException(\"Monitor is not running\");\n         }\n         this.running = false;\n         try {\n             this.thread.interrupt();\n-            this.thread.join(stopInterval);\n+            this.thread.join(millis);\n         }\n-        catch (final InterruptedException e) {\n+        catch (final InterruptedException ex) {\n             Thread.currentThread().interrupt();\n         }\n-        for (final FileAlterationObserver observer : this.observers) {\n-            observer.destroy();\n+        final Iterator<FileAlterationObserver> iterator = this.observers.iterator();\n+        while (iterator.hasNext()) {\n+            ((FileAlterationObserver)iterator.next()).destroy();\n         }\n     }\n     \n     @Override\n     public void run() {\n         while (this.running) {\n-            for (final FileAlterationObserver observer : this.observers) {\n-                observer.checkAndNotify();\n+            final Iterator<FileAlterationObserver> iterator = this.observers.iterator();\n+            while (iterator.hasNext()) {\n+                ((FileAlterationObserver)iterator.next()).checkAndNotify();\n             }\n             if (!this.running) {\n                 break;\n             }\n             try {\n                 Thread.sleep(this.interval);\n             }\n"}]}
