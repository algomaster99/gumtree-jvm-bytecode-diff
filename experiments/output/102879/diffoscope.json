{"diffoscope-json-version": 1, "source1": "first/CpBands.class", "source2": "second/CpBands.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -136,23 +136,23 @@\n         this.cpDescriptorNameInts = this.decodeBandInt(\"cp_Descr_name\", in, Codec.DELTA5, cpDescriptorCount);\n         this.cpDescriptorTypeInts = this.decodeBandInt(\"cp_Descr_type\", in, Codec.UDELTA5, cpDescriptorCount);\n         final String[] cpDescriptorNames = this.getReferences(this.cpDescriptorNameInts, this.cpUTF8);\n         final String[] cpDescriptorTypes = this.getReferences(this.cpDescriptorTypeInts, this.cpSignature);\n         this.cpDescriptor = new String[cpDescriptorCount];\n         this.mapDescriptor = new HashMap<String, Integer>(cpDescriptorCount);\n         for (int i = 0; i < cpDescriptorCount; ++i) {\n-            this.cpDescriptor[i] = cpDescriptorNames[i] + \":\" + cpDescriptorTypes[i];\n+            this.cpDescriptor[i] = String.valueOf(cpDescriptorNames[i]) + \":\" + cpDescriptorTypes[i];\n             this.mapDescriptor.put(this.cpDescriptor[i], Integer.valueOf(i));\n         }\n     }\n     \n     private void parseCpDouble(final InputStream in) throws IOException, Pack200Exception {\n         final int cpDoubleCount = this.header.getCpDoubleCount();\n         final long[] band = this.parseFlags(\"cp_Double\", in, cpDoubleCount, Codec.UDELTA5, Codec.DELTA5);\n-        Arrays.setAll(this.cpDouble = new double[band.length], i -> Double.longBitsToDouble(band[i]));\n+        Arrays.setAll(this.cpDouble = new double[band.length], i -> Double.longBitsToDouble(array[i]));\n     }\n     \n     private void parseCpField(final InputStream in) throws IOException, Pack200Exception {\n         final int cpFieldCount = this.header.getCpFieldCount();\n         this.cpFieldClassInts = this.decodeBandInt(\"cp_Field_class\", in, Codec.DELTA5, cpFieldCount);\n         this.cpFieldDescriptorInts = this.decodeBandInt(\"cp_Field_desc\", in, Codec.UDELTA5, cpFieldCount);\n         this.cpFieldClass = new String[cpFieldCount];\n@@ -211,17 +211,18 @@\n         this.cpSignatureInts = this.decodeBandInt(\"cp_Signature_form\", in, Codec.DELTA5, cpSignatureCount);\n         final String[] cpSignatureForm = this.getReferences(this.cpSignatureInts, this.cpUTF8);\n         this.cpSignature = new String[cpSignatureCount];\n         this.mapSignature = new HashMap<String, Integer>();\n         int lCount = 0;\n         for (int i = 0; i < cpSignatureCount; ++i) {\n             final String form = cpSignatureForm[i];\n-            final char[] charArray;\n-            final char[] chars = charArray = form.toCharArray();\n-            for (final char element : charArray) {\n+            final char[] chars = form.toCharArray();\n+            char[] array;\n+            for (int length = (array = chars).length, l = 0; l < length; ++l) {\n+                final char element = array[l];\n                 if (element == 'L') {\n                     this.cpSignatureInts[i] = -1;\n                     ++lCount;\n                 }\n             }\n         }\n         final String[] cpSignatureClasses = this.parseReferences(\"cp_Signature_classes\", in, Codec.UDELTA5, lCount, this.cpClass);\n@@ -257,17 +258,18 @@\n         this.cpUTF8 = new String[cpUTF8Count];\n         this.mapUTF8 = new HashMap<String, Integer>(cpUTF8Count + 1);\n         this.cpUTF8[0] = \"\";\n         this.mapUTF8.put(\"\", Integer.valueOf(0));\n         final int[] prefix = this.decodeBandInt(\"cpUTF8Prefix\", in, Codec.DELTA5, cpUTF8Count - 2);\n         int charCount = 0;\n         int bigSuffixCount = 0;\n-        final int[] decodeBandInt;\n-        final int[] suffix = decodeBandInt = this.decodeBandInt(\"cpUTF8Suffix\", in, Codec.UNSIGNED5, cpUTF8Count - 1);\n-        for (final int element : decodeBandInt) {\n+        final int[] suffix = this.decodeBandInt(\"cpUTF8Suffix\", in, Codec.UNSIGNED5, cpUTF8Count - 1);\n+        int[] array;\n+        for (int length = (array = suffix).length, n = 0; n < length; ++n) {\n+            final int element = array[n];\n             if (element == 0) {\n                 ++bigSuffixCount;\n             }\n             else {\n                 charCount += element;\n             }\n         }\n@@ -289,19 +291,19 @@\n             }\n         }\n         charCount = 0;\n         bigSuffixCount = 0;\n         for (int k = 1; k < cpUTF8Count; ++k) {\n             final String lastString = this.cpUTF8[k - 1];\n             if (suffix[k - 1] == 0) {\n-                this.cpUTF8[k] = lastString.substring(0, (k > 1) ? prefix[k - 2] : 0) + new String(bigSuffixData[bigSuffixCount++]);\n+                this.cpUTF8[k] = String.valueOf(lastString.substring(0, (k > 1) ? prefix[k - 2] : 0)) + new String(bigSuffixData[bigSuffixCount++]);\n                 this.mapUTF8.put(this.cpUTF8[k], Integer.valueOf(k));\n             }\n             else {\n-                this.cpUTF8[k] = lastString.substring(0, (k > 1) ? prefix[k - 2] : 0) + new String(data, charCount, suffix[k - 1]);\n+                this.cpUTF8[k] = String.valueOf(lastString.substring(0, (k > 1) ? prefix[k - 2] : 0)) + new String(data, charCount, suffix[k - 1]);\n                 charCount += suffix[k - 1];\n                 this.mapUTF8.put(this.cpUTF8[k], Integer.valueOf(k));\n             }\n         }\n     }\n     \n     public String[] getCpClass() {\n"}]}
