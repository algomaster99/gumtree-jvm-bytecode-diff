{"diffoscope-json-version": 1, "source1": "first/JavadocTagInfo.class", "source2": "second/JavadocTagInfo.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,15 +1,15 @@\n \n package com.puppycrawl.tools.checkstyle.checks.javadoc;\n \n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n import java.util.stream.Collectors;\n import java.util.function.Function;\n import java.util.Arrays;\n import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n-import com.puppycrawl.tools.checkstyle.api.DetailAST;\n import java.util.Map;\n import java.util.BitSet;\n \n public enum JavadocTagInfo\n {\n     AUTHOR(\"AUTHOR\", 0, \"@author\", \"author\", JavadocTagInfo.Type.BLOCK), \n     CODE(\"CODE\", 1, \"{@code}\", \"code\", JavadocTagInfo.Type.INLINE), \n@@ -35,15 +35,23 @@\n     private static final BitSet DEF_TOKEN_TYPES;\n     private static final Map<String, JavadocTagInfo> TEXT_TO_TAG;\n     private static final Map<String, JavadocTagInfo> NAME_TO_TAG;\n     private final String text;\n     private final String name;\n     private final JavadocTagInfo.Type type;\n     \n-    private JavadocTagInfo(final String text, final String name, final JavadocTagInfo.Type type) {\n+    static {\n+        DEF_TOKEN_TYPES_DEPRECATED = TokenUtil.asBitSet(new int[] { 8, 9, 10, 14, 15, 154, 155, 157, 161 });\n+        DEF_TOKEN_TYPES = TokenUtil.asBitSet(new int[] { 8, 9, 10, 14, 15, 16, 154, 157 });\n+        final JavadocTagInfo[] values = values();\n+        TEXT_TO_TAG = Arrays.stream(values).collect(Collectors.toUnmodifiableMap((Function<? super JavadocTagInfo, ? extends String>)JavadocTagInfo::getText, (Function<? super JavadocTagInfo, ? extends JavadocTagInfo>)Function.identity()));\n+        NAME_TO_TAG = Arrays.stream(values).collect(Collectors.toUnmodifiableMap((Function<? super JavadocTagInfo, ? extends String>)JavadocTagInfo::getName, (Function<? super JavadocTagInfo, ? extends JavadocTagInfo>)Function.identity()));\n+    }\n+    \n+    private JavadocTagInfo(final String name2, final int ordinal, final String text, final String name, final JavadocTagInfo.Type type) {\n         this.text = text;\n         this.name = name;\n         this.type = type;\n     }\n     \n     public abstract boolean isValidOn(final DetailAST p0);\n     \n@@ -83,18 +91,10 @@\n     \n     public static boolean isValidName(final String name) {\n         return JavadocTagInfo.NAME_TO_TAG.containsKey(name);\n     }\n     \n     @Override\n     public String toString() {\n-        return \"text [\" + this.text + \"] name [\" + this.name + \"] type [\" + String.valueOf((Object)this.type);\n-    }\n-    \n-    static {\n-        DEF_TOKEN_TYPES_DEPRECATED = TokenUtil.asBitSet(new int[] { 8, 9, 10, 14, 15, 154, 155, 157, 161 });\n-        DEF_TOKEN_TYPES = TokenUtil.asBitSet(new int[] { 8, 9, 10, 14, 15, 16, 154, 157 });\n-        final JavadocTagInfo[] values = values();\n-        TEXT_TO_TAG = Arrays.stream(values).collect(Collectors.toUnmodifiableMap((Function<? super JavadocTagInfo, ? extends String>)JavadocTagInfo::getText, (Function<? super JavadocTagInfo, ? extends JavadocTagInfo>)Function.identity()));\n-        NAME_TO_TAG = Arrays.stream(values).collect(Collectors.toUnmodifiableMap((Function<? super JavadocTagInfo, ? extends String>)JavadocTagInfo::getName, (Function<? super JavadocTagInfo, ? extends JavadocTagInfo>)Function.identity()));\n+        return \"text [\" + this.text + \"] name [\" + this.name + \"] type [\" + this.type + \"]\";\n     }\n }\n"}]}
