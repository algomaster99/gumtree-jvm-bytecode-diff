{"diffoscope-json-version": 1, "source1": "first/TFTPErrorPacket.class", "source2": "second/TFTPErrorPacket.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,65 +13,65 @@\n     public static final int ILLEGAL_OPERATION = 4;\n     public static final int UNKNOWN_TID = 5;\n     public static final int FILE_EXISTS = 6;\n     public static final int NO_SUCH_USER = 7;\n     private final int error;\n     private final String message;\n     \n-    public TFTPErrorPacket(final InetAddress destination, final int port, final int error, final String message) {\n-        super(5, destination, port);\n+    public TFTPErrorPacket(final InetAddress inetAddress, final int n, final int error, final String message) {\n+        super(5, inetAddress, n);\n         this.error = error;\n         this.message = message;\n     }\n     \n-    TFTPErrorPacket(final DatagramPacket datagram) throws TFTPPacketException {\n-        super(5, datagram.getAddress(), datagram.getPort());\n-        final byte[] data = datagram.getData();\n-        final int length = datagram.getLength();\n+    TFTPErrorPacket(final DatagramPacket datagramPacket) throws TFTPPacketException {\n+        super(5, datagramPacket.getAddress(), datagramPacket.getPort());\n+        final byte[] data = datagramPacket.getData();\n+        final int length = datagramPacket.getLength();\n         if (this.getType() != data[1]) {\n             throw new TFTPPacketException(\"TFTP operator code does not match type.\");\n         }\n         this.error = ((data[2] & 0xFF) << 8 | (data[3] & 0xFF));\n         if (length < 5) {\n             throw new TFTPPacketException(\"Bad error packet. No message.\");\n         }\n-        int index = 4;\n-        final StringBuilder buffer = new StringBuilder();\n-        while (index < length && data[index] != 0) {\n-            buffer.append((char)data[index]);\n-            ++index;\n+        int n = 4;\n+        final StringBuilder sb = new StringBuilder();\n+        while (n < length && data[n] != 0) {\n+            sb.append((char)data[n]);\n+            ++n;\n         }\n-        this.message = buffer.toString();\n+        this.message = sb.toString();\n     }\n     \n-    DatagramPacket _newDatagram(final DatagramPacket datagram, final byte[] data) {\n+    DatagramPacket _newDatagram(final DatagramPacket datagramPacket, final byte[] data) {\n         final int length = this.message.length();\n         data[0] = 0;\n         data[1] = (byte)this.type;\n         data[2] = (byte)((this.error & 0xFFFF) >> 8);\n         data[3] = (byte)(this.error & 0xFF);\n         System.arraycopy(this.message.getBytes(), 0, data, 4, length);\n         data[length + 4] = 0;\n-        datagram.setAddress(this.address);\n-        datagram.setPort(this.port);\n-        datagram.setData(data);\n-        datagram.setLength(length + 4);\n-        return datagram;\n+        datagramPacket.setAddress(this.address);\n+        datagramPacket.setPort(this.port);\n+        datagramPacket.setData(data);\n+        datagramPacket.setLength(length + 4);\n+        return datagramPacket;\n     }\n     \n     public DatagramPacket newDatagram() {\n         final int length = this.message.length();\n-        final byte[] data = new byte[length + 5];\n-        data[0] = 0;\n-        data[1] = (byte)this.type;\n-        data[2] = (byte)((this.error & 0xFFFF) >> 8);\n-        data[3] = (byte)(this.error & 0xFF);\n-        System.arraycopy(this.message.getBytes(), 0, data, 4, length);\n-        data[length + 4] = 0;\n-        return new DatagramPacket(data, data.length, this.address, this.port);\n+        final byte[] buf = new byte[length + 5];\n+        buf[0] = 0;\n+        buf[1] = (byte)this.type;\n+        buf[2] = (byte)((this.error & 0xFFFF) >> 8);\n+        buf[3] = (byte)(this.error & 0xFF);\n+        System.arraycopy(this.message.getBytes(), 0, buf, 4, length);\n+        buf[length + 4] = 0;\n+        return new DatagramPacket(buf, buf.length, this.address, this.port);\n     }\n     \n     public int getError() {\n         return this.error;\n     }\n     \n     public String getMessage() {\n"}]}
