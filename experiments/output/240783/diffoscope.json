{"diffoscope-json-version": 1, "source1": "first/IMAPReply.class", "source2": "second/IMAPReply.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -23,64 +23,64 @@\n     private static final String UNTAGGED_RESPONSE = \"^\\\\* (\\\\S+).*\";\n     private static final Pattern UNTAGGED_PATTERN;\n     private static final Pattern LITERAL_PATTERN;\n     \n     private IMAPReply() {\n     }\n     \n-    public static boolean isUntagged(final String line) {\n-        return line.startsWith(\"* \");\n+    public static boolean isUntagged(final String s) {\n+        return s.startsWith(\"* \");\n     }\n     \n-    public static boolean isContinuation(final String line) {\n-        return line.startsWith(\"+\");\n+    public static boolean isContinuation(final String s) {\n+        return s.startsWith(\"+\");\n     }\n     \n-    public static int getReplyCode(final String line) throws IOException {\n-        return getReplyCode(line, IMAPReply.TAGGED_PATTERN);\n+    public static int getReplyCode(final String s) throws IOException {\n+        return getReplyCode(s, IMAPReply.TAGGED_PATTERN);\n     }\n     \n-    public static int literalCount(final String line) {\n-        final Matcher m = IMAPReply.LITERAL_PATTERN.matcher(line);\n-        if (m.find()) {\n-            return Integer.parseInt(m.group(1));\n+    public static int literalCount(final String input) {\n+        final Matcher matcher = IMAPReply.LITERAL_PATTERN.matcher(input);\n+        if (matcher.find()) {\n+            return Integer.parseInt(matcher.group(1));\n         }\n         return -1;\n     }\n     \n-    public static int getUntaggedReplyCode(final String line) throws IOException {\n-        return getReplyCode(line, IMAPReply.UNTAGGED_PATTERN);\n+    public static int getUntaggedReplyCode(final String s) throws IOException {\n+        return getReplyCode(s, IMAPReply.UNTAGGED_PATTERN);\n     }\n     \n-    private static int getReplyCode(final String line, final Pattern pattern) throws IOException {\n-        if (isContinuation(line)) {\n+    private static int getReplyCode(final String s, final Pattern pattern) throws IOException {\n+        if (isContinuation(s)) {\n             return 3;\n         }\n-        final Matcher m = pattern.matcher(line);\n-        if (m.matches()) {\n-            final String code = m.group(1);\n-            if (code.equals(\"OK\")) {\n+        final Matcher matcher = pattern.matcher(s);\n+        if (matcher.matches()) {\n+            final String group = matcher.group(1);\n+            if (group.equals(\"OK\")) {\n                 return 0;\n             }\n-            if (code.equals(\"BAD\")) {\n+            if (group.equals(\"BAD\")) {\n                 return 2;\n             }\n-            if (code.equals(\"NO\")) {\n+            if (group.equals(\"NO\")) {\n                 return 1;\n             }\n         }\n-        throw new MalformedServerReplyException(\"Received unexpected IMAP protocol response from server: '\" + line + \"'.\");\n+        throw new MalformedServerReplyException(\"Received unexpected IMAP protocol response from server: '\" + s + \"'.\");\n     }\n     \n-    public static boolean isSuccess(final int replyCode) {\n-        return replyCode == 0;\n+    public static boolean isSuccess(final int n) {\n+        return n == 0;\n     }\n     \n-    public static boolean isContinuation(final int replyCode) {\n-        return replyCode == 3;\n+    public static boolean isContinuation(final int n) {\n+        return n == 3;\n     }\n     \n     static {\n         TAGGED_PATTERN = Pattern.compile(\"^\\\\w+ (\\\\S+).*\");\n         UNTAGGED_PATTERN = Pattern.compile(\"^\\\\* (\\\\S+).*\");\n         LITERAL_PATTERN = Pattern.compile(\"\\\\{(\\\\d+)\\\\}$\");\n     }\n"}]}
