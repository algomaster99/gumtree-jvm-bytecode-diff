{"diffoscope-json-version": 1, "source1": "first/StrTokenizer.class", "source2": "second/StrTokenizer.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -30,129 +30,129 @@\n         return (StrTokenizer)StrTokenizer.CSV_TOKENIZER_PROTOTYPE.clone();\n     }\n     \n     public static StrTokenizer getCSVInstance() {\n         return getCSVClone();\n     }\n     \n-    public static StrTokenizer getCSVInstance(final String input) {\n-        final StrTokenizer tok = getCSVClone();\n-        tok.reset(input);\n-        return tok;\n+    public static StrTokenizer getCSVInstance(final String s) {\n+        final StrTokenizer csvClone = getCSVClone();\n+        csvClone.reset(s);\n+        return csvClone;\n     }\n     \n-    public static StrTokenizer getCSVInstance(final char[] input) {\n-        final StrTokenizer tok = getCSVClone();\n-        tok.reset(input);\n-        return tok;\n+    public static StrTokenizer getCSVInstance(final char[] array) {\n+        final StrTokenizer csvClone = getCSVClone();\n+        csvClone.reset(array);\n+        return csvClone;\n     }\n     \n     private static StrTokenizer getTSVClone() {\n         return (StrTokenizer)StrTokenizer.TSV_TOKENIZER_PROTOTYPE.clone();\n     }\n     \n     public static StrTokenizer getTSVInstance() {\n         return getTSVClone();\n     }\n     \n-    public static StrTokenizer getTSVInstance(final String input) {\n-        final StrTokenizer tok = getTSVClone();\n-        tok.reset(input);\n-        return tok;\n+    public static StrTokenizer getTSVInstance(final String s) {\n+        final StrTokenizer tsvClone = getTSVClone();\n+        tsvClone.reset(s);\n+        return tsvClone;\n     }\n     \n-    public static StrTokenizer getTSVInstance(final char[] input) {\n-        final StrTokenizer tok = getTSVClone();\n-        tok.reset(input);\n-        return tok;\n+    public static StrTokenizer getTSVInstance(final char[] array) {\n+        final StrTokenizer tsvClone = getTSVClone();\n+        tsvClone.reset(array);\n+        return tsvClone;\n     }\n     \n     public StrTokenizer() {\n         this.delimMatcher = StrMatcher.splitMatcher();\n         this.quoteMatcher = StrMatcher.noneMatcher();\n         this.ignoredMatcher = StrMatcher.noneMatcher();\n         this.trimmerMatcher = StrMatcher.noneMatcher();\n         this.emptyAsNull = false;\n         this.ignoreEmptyTokens = true;\n         this.chars = null;\n     }\n     \n-    public StrTokenizer(final String input) {\n+    public StrTokenizer(final String s) {\n         this.delimMatcher = StrMatcher.splitMatcher();\n         this.quoteMatcher = StrMatcher.noneMatcher();\n         this.ignoredMatcher = StrMatcher.noneMatcher();\n         this.trimmerMatcher = StrMatcher.noneMatcher();\n         this.emptyAsNull = false;\n         this.ignoreEmptyTokens = true;\n-        if (input != null) {\n-            this.chars = input.toCharArray();\n+        if (s != null) {\n+            this.chars = s.toCharArray();\n         }\n         else {\n             this.chars = null;\n         }\n     }\n     \n-    public StrTokenizer(final String input, final char delim) {\n-        this(input);\n-        this.setDelimiterChar(delim);\n+    public StrTokenizer(final String s, final char delimiterChar) {\n+        this(s);\n+        this.setDelimiterChar(delimiterChar);\n     }\n     \n-    public StrTokenizer(final String input, final String delim) {\n-        this(input);\n-        this.setDelimiterString(delim);\n+    public StrTokenizer(final String s, final String delimiterString) {\n+        this(s);\n+        this.setDelimiterString(delimiterString);\n     }\n     \n-    public StrTokenizer(final String input, final StrMatcher delim) {\n-        this(input);\n-        this.setDelimiterMatcher(delim);\n+    public StrTokenizer(final String s, final StrMatcher delimiterMatcher) {\n+        this(s);\n+        this.setDelimiterMatcher(delimiterMatcher);\n     }\n     \n-    public StrTokenizer(final String input, final char delim, final char quote) {\n-        this(input, delim);\n-        this.setQuoteChar(quote);\n+    public StrTokenizer(final String s, final char c, final char quoteChar) {\n+        this(s, c);\n+        this.setQuoteChar(quoteChar);\n     }\n     \n-    public StrTokenizer(final String input, final StrMatcher delim, final StrMatcher quote) {\n-        this(input, delim);\n-        this.setQuoteMatcher(quote);\n+    public StrTokenizer(final String s, final StrMatcher strMatcher, final StrMatcher quoteMatcher) {\n+        this(s, strMatcher);\n+        this.setQuoteMatcher(quoteMatcher);\n     }\n     \n-    public StrTokenizer(final char[] input) {\n+    public StrTokenizer(final char[] array) {\n         this.delimMatcher = StrMatcher.splitMatcher();\n         this.quoteMatcher = StrMatcher.noneMatcher();\n         this.ignoredMatcher = StrMatcher.noneMatcher();\n         this.trimmerMatcher = StrMatcher.noneMatcher();\n         this.emptyAsNull = false;\n         this.ignoreEmptyTokens = true;\n-        this.chars = ArrayUtils.clone(input);\n+        this.chars = ArrayUtils.clone(array);\n     }\n     \n-    public StrTokenizer(final char[] input, final char delim) {\n-        this(input);\n-        this.setDelimiterChar(delim);\n+    public StrTokenizer(final char[] array, final char delimiterChar) {\n+        this(array);\n+        this.setDelimiterChar(delimiterChar);\n     }\n     \n-    public StrTokenizer(final char[] input, final String delim) {\n-        this(input);\n-        this.setDelimiterString(delim);\n+    public StrTokenizer(final char[] array, final String delimiterString) {\n+        this(array);\n+        this.setDelimiterString(delimiterString);\n     }\n     \n-    public StrTokenizer(final char[] input, final StrMatcher delim) {\n-        this(input);\n-        this.setDelimiterMatcher(delim);\n+    public StrTokenizer(final char[] array, final StrMatcher delimiterMatcher) {\n+        this(array);\n+        this.setDelimiterMatcher(delimiterMatcher);\n     }\n     \n-    public StrTokenizer(final char[] input, final char delim, final char quote) {\n-        this(input, delim);\n-        this.setQuoteChar(quote);\n+    public StrTokenizer(final char[] array, final char c, final char quoteChar) {\n+        this(array, c);\n+        this.setQuoteChar(quoteChar);\n     }\n     \n-    public StrTokenizer(final char[] input, final StrMatcher delim, final StrMatcher quote) {\n-        this(input, delim);\n-        this.setQuoteMatcher(quote);\n+    public StrTokenizer(final char[] array, final StrMatcher strMatcher, final StrMatcher quoteMatcher) {\n+        this(array, strMatcher);\n+        this.setQuoteMatcher(quoteMatcher);\n     }\n     \n     public int size() {\n         this.checkTokenized();\n         return this.tokens.length;\n     }\n     \n@@ -176,39 +176,39 @@\n     public String[] getTokenArray() {\n         this.checkTokenized();\n         return this.tokens.clone();\n     }\n     \n     public List<String> getTokenList() {\n         this.checkTokenized();\n-        final List<String> list = new ArrayList<String>(this.tokens.length);\n+        final ArrayList list = new ArrayList(this.tokens.length);\n         list.addAll(Arrays.asList(this.tokens));\n         return list;\n     }\n     \n     public StrTokenizer reset() {\n         this.tokenPos = 0;\n         this.tokens = null;\n         return this;\n     }\n     \n-    public StrTokenizer reset(final String input) {\n+    public StrTokenizer reset(final String s) {\n         this.reset();\n-        if (input != null) {\n-            this.chars = input.toCharArray();\n+        if (s != null) {\n+            this.chars = s.toCharArray();\n         }\n         else {\n             this.chars = null;\n         }\n         return this;\n     }\n     \n-    public StrTokenizer reset(final char[] input) {\n+    public StrTokenizer reset(final char[] array) {\n         this.reset();\n-        this.chars = ArrayUtils.clone(input);\n+        this.chars = ArrayUtils.clone(array);\n         return this;\n     }\n     \n     @Override\n     public boolean hasNext() {\n         this.checkTokenized();\n         return this.tokenPos < this.tokens.length;\n@@ -251,215 +251,215 @@\n     \n     @Override\n     public void remove() {\n         throw new UnsupportedOperationException(\"remove() is unsupported\");\n     }\n     \n     @Override\n-    public void set(final String obj) {\n+    public void set(final String s) {\n         throw new UnsupportedOperationException(\"set() is unsupported\");\n     }\n     \n     @Override\n-    public void add(final String obj) {\n+    public void add(final String s) {\n         throw new UnsupportedOperationException(\"add() is unsupported\");\n     }\n     \n     private void checkTokenized() {\n         if (this.tokens == null) {\n             if (this.chars == null) {\n-                final List<String> split = this.tokenize(null, 0, 0);\n-                this.tokens = split.toArray(new String[split.size()]);\n+                final List<String> tokenize = this.tokenize(null, 0, 0);\n+                this.tokens = tokenize.toArray(new String[tokenize.size()]);\n             }\n             else {\n-                final List<String> split = this.tokenize(this.chars, 0, this.chars.length);\n-                this.tokens = split.toArray(new String[split.size()]);\n+                final List<String> tokenize2 = this.tokenize(this.chars, 0, this.chars.length);\n+                this.tokens = tokenize2.toArray(new String[tokenize2.size()]);\n             }\n         }\n     }\n     \n-    protected List<String> tokenize(final char[] srcChars, final int offset, final int count) {\n-        if (srcChars == null || count == 0) {\n+    protected List<String> tokenize(final char[] array, final int n, final int n2) {\n+        if (array == null || n2 == 0) {\n             return Collections.emptyList();\n         }\n-        final StrBuilder buf = new StrBuilder();\n-        final List<String> tokenList = new ArrayList<String>();\n-        int pos = offset;\n-        while (pos >= 0 && pos < count) {\n-            pos = this.readNextToken(srcChars, pos, count, buf, tokenList);\n-            if (pos >= count) {\n-                this.addToken(tokenList, \"\");\n+        final StrBuilder strBuilder = new StrBuilder();\n+        final ArrayList list = new ArrayList();\n+        int nextToken = n;\n+        while (nextToken >= 0 && nextToken < n2) {\n+            nextToken = this.readNextToken(array, nextToken, n2, strBuilder, list);\n+            if (nextToken >= n2) {\n+                this.addToken(list, \"\");\n             }\n         }\n-        return tokenList;\n+        return list;\n     }\n     \n-    private void addToken(final List<String> list, String tok) {\n-        if (StringUtils.isEmpty((CharSequence)tok)) {\n+    private void addToken(final List<String> list, String s) {\n+        if (StringUtils.isEmpty((CharSequence)s)) {\n             if (this.isIgnoreEmptyTokens()) {\n                 return;\n             }\n             if (this.isEmptyTokenAsNull()) {\n-                tok = null;\n+                s = null;\n             }\n         }\n-        list.add(tok);\n+        list.add(s);\n     }\n     \n-    private int readNextToken(final char[] srcChars, int start, final int len, final StrBuilder workArea, final List<String> tokenList) {\n-        while (start < len) {\n-            final int removeLen = Math.max(this.getIgnoredMatcher().isMatch(srcChars, start, start, len), this.getTrimmerMatcher().isMatch(srcChars, start, start, len));\n-            if (removeLen == 0 || this.getDelimiterMatcher().isMatch(srcChars, start, start, len) > 0) {\n+    private int readNextToken(final char[] array, int i, final int n, final StrBuilder strBuilder, final List<String> list) {\n+        while (i < n) {\n+            final int max = Math.max(this.getIgnoredMatcher().isMatch(array, i, i, n), this.getTrimmerMatcher().isMatch(array, i, i, n));\n+            if (max == 0 || this.getDelimiterMatcher().isMatch(array, i, i, n) > 0) {\n                 break;\n             }\n-            if (this.getQuoteMatcher().isMatch(srcChars, start, start, len) > 0) {\n+            if (this.getQuoteMatcher().isMatch(array, i, i, n) > 0) {\n                 break;\n             }\n-            start += removeLen;\n+            i += max;\n         }\n-        if (start >= len) {\n-            this.addToken(tokenList, \"\");\n+        if (i >= n) {\n+            this.addToken(list, \"\");\n             return -1;\n         }\n-        final int delimLen = this.getDelimiterMatcher().isMatch(srcChars, start, start, len);\n-        if (delimLen > 0) {\n-            this.addToken(tokenList, \"\");\n-            return start + delimLen;\n-        }\n-        final int quoteLen = this.getQuoteMatcher().isMatch(srcChars, start, start, len);\n-        if (quoteLen > 0) {\n-            return this.readWithQuotes(srcChars, start + quoteLen, len, workArea, tokenList, start, quoteLen);\n-        }\n-        return this.readWithQuotes(srcChars, start, len, workArea, tokenList, 0, 0);\n-    }\n-    \n-    private int readWithQuotes(final char[] srcChars, final int start, final int len, final StrBuilder workArea, final List<String> tokenList, final int quoteStart, final int quoteLen) {\n-        workArea.clear();\n-        int pos = start;\n-        boolean quoting = quoteLen > 0;\n-        int trimStart = 0;\n-        while (pos < len) {\n-            if (quoting) {\n-                if (this.isQuote(srcChars, pos, len, quoteStart, quoteLen)) {\n-                    if (this.isQuote(srcChars, pos + quoteLen, len, quoteStart, quoteLen)) {\n-                        workArea.append(srcChars, pos, quoteLen);\n-                        pos += quoteLen * 2;\n-                        trimStart = workArea.size();\n+        final int match = this.getDelimiterMatcher().isMatch(array, i, i, n);\n+        if (match > 0) {\n+            this.addToken(list, \"\");\n+            return i + match;\n+        }\n+        final int match2 = this.getQuoteMatcher().isMatch(array, i, i, n);\n+        if (match2 > 0) {\n+            return this.readWithQuotes(array, i + match2, n, strBuilder, list, i, match2);\n+        }\n+        return this.readWithQuotes(array, i, n, strBuilder, list, 0, 0);\n+    }\n+    \n+    private int readWithQuotes(final char[] array, final int n, final int n2, final StrBuilder strBuilder, final List<String> list, final int n3, final int n4) {\n+        strBuilder.clear();\n+        int i = n;\n+        int n5 = (n4 > 0) ? 1 : 0;\n+        int n6 = 0;\n+        while (i < n2) {\n+            if (n5 != 0) {\n+                if (this.isQuote(array, i, n2, n3, n4)) {\n+                    if (this.isQuote(array, i + n4, n2, n3, n4)) {\n+                        strBuilder.append(array, i, n4);\n+                        i += n4 * 2;\n+                        n6 = strBuilder.size();\n                     }\n                     else {\n-                        quoting = false;\n-                        pos += quoteLen;\n+                        n5 = 0;\n+                        i += n4;\n                     }\n                 }\n                 else {\n-                    workArea.append(srcChars[pos++]);\n-                    trimStart = workArea.size();\n+                    strBuilder.append(array[i++]);\n+                    n6 = strBuilder.size();\n                 }\n             }\n             else {\n-                final int delimLen = this.getDelimiterMatcher().isMatch(srcChars, pos, start, len);\n-                if (delimLen > 0) {\n-                    this.addToken(tokenList, workArea.substring(0, trimStart));\n-                    return pos + delimLen;\n+                final int match = this.getDelimiterMatcher().isMatch(array, i, n, n2);\n+                if (match > 0) {\n+                    this.addToken(list, strBuilder.substring(0, n6));\n+                    return i + match;\n                 }\n-                if (quoteLen > 0 && this.isQuote(srcChars, pos, len, quoteStart, quoteLen)) {\n-                    quoting = true;\n-                    pos += quoteLen;\n+                if (n4 > 0 && this.isQuote(array, i, n2, n3, n4)) {\n+                    n5 = 1;\n+                    i += n4;\n                 }\n                 else {\n-                    final int ignoredLen = this.getIgnoredMatcher().isMatch(srcChars, pos, start, len);\n-                    if (ignoredLen > 0) {\n-                        pos += ignoredLen;\n+                    final int match2 = this.getIgnoredMatcher().isMatch(array, i, n, n2);\n+                    if (match2 > 0) {\n+                        i += match2;\n                     }\n                     else {\n-                        final int trimmedLen = this.getTrimmerMatcher().isMatch(srcChars, pos, start, len);\n-                        if (trimmedLen > 0) {\n-                            workArea.append(srcChars, pos, trimmedLen);\n-                            pos += trimmedLen;\n+                        final int match3 = this.getTrimmerMatcher().isMatch(array, i, n, n2);\n+                        if (match3 > 0) {\n+                            strBuilder.append(array, i, match3);\n+                            i += match3;\n                         }\n                         else {\n-                            workArea.append(srcChars[pos++]);\n-                            trimStart = workArea.size();\n+                            strBuilder.append(array[i++]);\n+                            n6 = strBuilder.size();\n                         }\n                     }\n                 }\n             }\n         }\n-        this.addToken(tokenList, workArea.substring(0, trimStart));\n+        this.addToken(list, strBuilder.substring(0, n6));\n         return -1;\n     }\n     \n-    private boolean isQuote(final char[] srcChars, final int pos, final int len, final int quoteStart, final int quoteLen) {\n-        for (int i = 0; i < quoteLen; ++i) {\n-            if (pos + i >= len || srcChars[pos + i] != srcChars[quoteStart + i]) {\n+    private boolean isQuote(final char[] array, final int n, final int n2, final int n3, final int n4) {\n+        for (int i = 0; i < n4; ++i) {\n+            if (n + i >= n2 || array[n + i] != array[n3 + i]) {\n                 return false;\n             }\n         }\n         return true;\n     }\n     \n     public StrMatcher getDelimiterMatcher() {\n         return this.delimMatcher;\n     }\n     \n-    public StrTokenizer setDelimiterMatcher(final StrMatcher delim) {\n-        if (delim == null) {\n+    public StrTokenizer setDelimiterMatcher(final StrMatcher delimMatcher) {\n+        if (delimMatcher == null) {\n             this.delimMatcher = StrMatcher.noneMatcher();\n         }\n         else {\n-            this.delimMatcher = delim;\n+            this.delimMatcher = delimMatcher;\n         }\n         return this;\n     }\n     \n-    public StrTokenizer setDelimiterChar(final char delim) {\n-        return this.setDelimiterMatcher(StrMatcher.charMatcher(delim));\n+    public StrTokenizer setDelimiterChar(final char c) {\n+        return this.setDelimiterMatcher(StrMatcher.charMatcher(c));\n     }\n     \n-    public StrTokenizer setDelimiterString(final String delim) {\n-        return this.setDelimiterMatcher(StrMatcher.stringMatcher(delim));\n+    public StrTokenizer setDelimiterString(final String s) {\n+        return this.setDelimiterMatcher(StrMatcher.stringMatcher(s));\n     }\n     \n     public StrMatcher getQuoteMatcher() {\n         return this.quoteMatcher;\n     }\n     \n-    public StrTokenizer setQuoteMatcher(final StrMatcher quote) {\n-        if (quote != null) {\n-            this.quoteMatcher = quote;\n+    public StrTokenizer setQuoteMatcher(final StrMatcher quoteMatcher) {\n+        if (quoteMatcher != null) {\n+            this.quoteMatcher = quoteMatcher;\n         }\n         return this;\n     }\n     \n-    public StrTokenizer setQuoteChar(final char quote) {\n-        return this.setQuoteMatcher(StrMatcher.charMatcher(quote));\n+    public StrTokenizer setQuoteChar(final char c) {\n+        return this.setQuoteMatcher(StrMatcher.charMatcher(c));\n     }\n     \n     public StrMatcher getIgnoredMatcher() {\n         return this.ignoredMatcher;\n     }\n     \n-    public StrTokenizer setIgnoredMatcher(final StrMatcher ignored) {\n-        if (ignored != null) {\n-            this.ignoredMatcher = ignored;\n+    public StrTokenizer setIgnoredMatcher(final StrMatcher ignoredMatcher) {\n+        if (ignoredMatcher != null) {\n+            this.ignoredMatcher = ignoredMatcher;\n         }\n         return this;\n     }\n     \n-    public StrTokenizer setIgnoredChar(final char ignored) {\n-        return this.setIgnoredMatcher(StrMatcher.charMatcher(ignored));\n+    public StrTokenizer setIgnoredChar(final char c) {\n+        return this.setIgnoredMatcher(StrMatcher.charMatcher(c));\n     }\n     \n     public StrMatcher getTrimmerMatcher() {\n         return this.trimmerMatcher;\n     }\n     \n-    public StrTokenizer setTrimmerMatcher(final StrMatcher trimmer) {\n-        if (trimmer != null) {\n-            this.trimmerMatcher = trimmer;\n+    public StrTokenizer setTrimmerMatcher(final StrMatcher trimmerMatcher) {\n+        if (trimmerMatcher != null) {\n+            this.trimmerMatcher = trimmerMatcher;\n         }\n         return this;\n     }\n     \n     public boolean isEmptyTokenAsNull() {\n         return this.emptyAsNull;\n     }\n@@ -491,20 +491,20 @@\n         }\n         catch (final CloneNotSupportedException ex) {\n             return null;\n         }\n     }\n     \n     Object cloneReset() throws CloneNotSupportedException {\n-        final StrTokenizer cloned = (StrTokenizer)super.clone();\n-        if (cloned.chars != null) {\n-            cloned.chars = cloned.chars.clone();\n+        final StrTokenizer strTokenizer = (StrTokenizer)super.clone();\n+        if (strTokenizer.chars != null) {\n+            strTokenizer.chars = strTokenizer.chars.clone();\n         }\n-        cloned.reset();\n-        return cloned;\n+        strTokenizer.reset();\n+        return strTokenizer;\n     }\n     \n     @Override\n     public String toString() {\n         if (this.tokens == null) {\n             return \"StrTokenizer[not tokenized yet]\";\n         }\n"}]}
