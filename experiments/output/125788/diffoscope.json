{"diffoscope-json-version": 1, "source1": "first/BoundedSeekableByteChannelInputStream.class", "source2": "second/BoundedSeekableByteChannelInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,100 +1,100 @@\n-  SHA-256 checksum 968e6f2e16f0f4c37220e928e36785b6fb95b66f1c62f865e4b099e68b78f7db\n+  SHA-256 checksum 609315e2bcb53e8f934e111667b3ab6b4b3d399e68efc48bb8fd3b7a5b8c5791\n   Compiled from \"BoundedSeekableByteChannelInputStream.java\"\n class org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream extends java.io.InputStream\n   minor version: 0\n   major version: 52\n   flags: (0x0020) ACC_SUPER\n-  this_class: #8                          // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream\n-  super_class: #2                         // java/io/InputStream\n+  this_class: #1                          // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream\n+  super_class: #3                         // java/io/InputStream\n   interfaces: 0, fields: 4, methods: 5, attributes: 1\n Constant pool:\n-   #1 = Methodref          #2.#3          // java/io/InputStream.\"<init>\":()V\n-   #2 = Class              #4             // java/io/InputStream\n-   #3 = NameAndType        #5:#6          // \"<init>\":()V\n+   #1 = Class              #2             // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream\n+   #2 = Utf8               org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream\n+   #3 = Class              #4             // java/io/InputStream\n    #4 = Utf8               java/io/InputStream\n-   #5 = Utf8               <init>\n-   #6 = Utf8               ()V\n-   #7 = Fieldref           #8.#9          // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.channel:Ljava/nio/channels/SeekableByteChannel;\n-   #8 = Class              #10            // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream\n-   #9 = NameAndType        #11:#12        // channel:Ljava/nio/channels/SeekableByteChannel;\n-  #10 = Utf8               org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream\n+   #5 = Utf8               MAX_BUF_LEN\n+   #6 = Utf8               I\n+   #7 = Utf8               ConstantValue\n+   #8 = Integer            8192\n+   #9 = Utf8               buffer\n+  #10 = Utf8               Ljava/nio/ByteBuffer;\n   #11 = Utf8               channel\n   #12 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n-  #13 = Fieldref           #8.#14         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.bytesRemaining:J\n-  #14 = NameAndType        #15:#16        // bytesRemaining:J\n-  #15 = Utf8               bytesRemaining\n-  #16 = Utf8               J\n-  #17 = Long               8192l\n-  #19 = Methodref          #20.#21        // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-  #20 = Class              #22            // java/nio/ByteBuffer\n-  #21 = NameAndType        #23:#24        // allocate:(I)Ljava/nio/ByteBuffer;\n-  #22 = Utf8               java/nio/ByteBuffer\n-  #23 = Utf8               allocate\n-  #24 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #25 = Fieldref           #8.#26         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.buffer:Ljava/nio/ByteBuffer;\n-  #26 = NameAndType        #27:#28        // buffer:Ljava/nio/ByteBuffer;\n-  #27 = Utf8               buffer\n-  #28 = Utf8               Ljava/nio/ByteBuffer;\n-  #29 = Methodref          #8.#30         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.read:(I)I\n-  #30 = NameAndType        #31:#32        // read:(I)I\n-  #31 = Utf8               read\n-  #32 = Utf8               (I)I\n-  #33 = Methodref          #20.#34        // java/nio/ByteBuffer.get:()B\n-  #34 = NameAndType        #35:#36        // get:()B\n-  #35 = Utf8               get\n-  #36 = Utf8               ()B\n-  #37 = Methodref          #20.#38        // java/nio/ByteBuffer.capacity:()I\n-  #38 = NameAndType        #39:#40        // capacity:()I\n-  #39 = Utf8               capacity\n-  #40 = Utf8               ()I\n-  #41 = InterfaceMethodref #42.#43        // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n-  #42 = Class              #44            // java/nio/channels/SeekableByteChannel\n-  #43 = NameAndType        #31:#45        // read:(Ljava/nio/ByteBuffer;)I\n-  #44 = Utf8               java/nio/channels/SeekableByteChannel\n-  #45 = Utf8               (Ljava/nio/ByteBuffer;)I\n-  #46 = Methodref          #20.#47        // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n-  #47 = NameAndType        #48:#49        // flip:()Ljava/nio/Buffer;\n-  #48 = Utf8               flip\n-  #49 = Utf8               ()Ljava/nio/Buffer;\n-  #50 = Methodref          #20.#51        // java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n-  #51 = NameAndType        #35:#52        // get:([BII)Ljava/nio/ByteBuffer;\n-  #52 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n-  #53 = Methodref          #20.#54        // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n-  #54 = NameAndType        #55:#49        // rewind:()Ljava/nio/Buffer;\n-  #55 = Utf8               rewind\n-  #56 = Methodref          #57.#58        // java/nio/Buffer.limit:(I)Ljava/nio/Buffer;\n-  #57 = Class              #59            // java/nio/Buffer\n-  #58 = NameAndType        #60:#61        // limit:(I)Ljava/nio/Buffer;\n-  #59 = Utf8               java/nio/Buffer\n-  #60 = Utf8               limit\n-  #61 = Utf8               (I)Ljava/nio/Buffer;\n-  #62 = Utf8               MAX_BUF_LEN\n-  #63 = Utf8               I\n-  #64 = Utf8               ConstantValue\n-  #65 = Integer            8192\n-  #66 = Utf8               (Ljava/nio/channels/SeekableByteChannel;J)V\n-  #67 = Utf8               Code\n-  #68 = Utf8               LineNumberTable\n-  #69 = Utf8               LocalVariableTable\n-  #70 = Utf8               this\n-  #71 = Utf8               Lorg/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream;\n-  #72 = Utf8               size\n-  #73 = Utf8               StackMapTable\n-  #74 = Utf8               Exceptions\n-  #75 = Class              #76            // java/io/IOException\n-  #76 = Utf8               java/io/IOException\n-  #77 = Utf8               ([BII)I\n-  #78 = Utf8               bytesRead\n-  #79 = Utf8               buf\n-  #80 = Utf8               b\n-  #81 = Utf8               [B\n-  #82 = Utf8               off\n-  #83 = Utf8               len\n-  #84 = Utf8               bytesToRead\n+  #13 = Utf8               bytesRemaining\n+  #14 = Utf8               J\n+  #15 = Utf8               <init>\n+  #16 = Utf8               (Ljava/nio/channels/SeekableByteChannel;J)V\n+  #17 = Utf8               Code\n+  #18 = Methodref          #3.#19         // java/io/InputStream.\"<init>\":()V\n+  #19 = NameAndType        #15:#20        // \"<init>\":()V\n+  #20 = Utf8               ()V\n+  #21 = Fieldref           #1.#22         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.channel:Ljava/nio/channels/SeekableByteChannel;\n+  #22 = NameAndType        #11:#12        // channel:Ljava/nio/channels/SeekableByteChannel;\n+  #23 = Fieldref           #1.#24         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.bytesRemaining:J\n+  #24 = NameAndType        #13:#14        // bytesRemaining:J\n+  #25 = Long               8192l\n+  #27 = Methodref          #28.#30        // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+  #28 = Class              #29            // java/nio/ByteBuffer\n+  #29 = Utf8               java/nio/ByteBuffer\n+  #30 = NameAndType        #31:#32        // allocate:(I)Ljava/nio/ByteBuffer;\n+  #31 = Utf8               allocate\n+  #32 = Utf8               (I)Ljava/nio/ByteBuffer;\n+  #33 = Fieldref           #1.#34         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.buffer:Ljava/nio/ByteBuffer;\n+  #34 = NameAndType        #9:#10         // buffer:Ljava/nio/ByteBuffer;\n+  #35 = Utf8               LineNumberTable\n+  #36 = Utf8               LocalVariableTable\n+  #37 = Utf8               this\n+  #38 = Utf8               Lorg/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream;\n+  #39 = Utf8               size\n+  #40 = Utf8               StackMapTable\n+  #41 = Class              #42            // java/nio/channels/SeekableByteChannel\n+  #42 = Utf8               java/nio/channels/SeekableByteChannel\n+  #43 = Utf8               read\n+  #44 = Utf8               ()I\n+  #45 = Utf8               Exceptions\n+  #46 = Class              #47            // java/io/IOException\n+  #47 = Utf8               java/io/IOException\n+  #48 = Methodref          #1.#49         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.read:(I)I\n+  #49 = NameAndType        #43:#50        // read:(I)I\n+  #50 = Utf8               (I)I\n+  #51 = Methodref          #28.#52        // java/nio/ByteBuffer.get:()B\n+  #52 = NameAndType        #53:#54        // get:()B\n+  #53 = Utf8               get\n+  #54 = Utf8               ()B\n+  #55 = Utf8               ([BII)I\n+  #56 = Methodref          #28.#57        // java/nio/ByteBuffer.capacity:()I\n+  #57 = NameAndType        #58:#44        // capacity:()I\n+  #58 = Utf8               capacity\n+  #59 = InterfaceMethodref #41.#60        // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+  #60 = NameAndType        #43:#61        // read:(Ljava/nio/ByteBuffer;)I\n+  #61 = Utf8               (Ljava/nio/ByteBuffer;)I\n+  #62 = Methodref          #28.#63        // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+  #63 = NameAndType        #64:#65        // flip:()Ljava/nio/Buffer;\n+  #64 = Utf8               flip\n+  #65 = Utf8               ()Ljava/nio/Buffer;\n+  #66 = Methodref          #28.#67        // java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n+  #67 = NameAndType        #53:#68        // get:([BII)Ljava/nio/ByteBuffer;\n+  #68 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n+  #69 = Utf8               b\n+  #70 = Utf8               [B\n+  #71 = Utf8               off\n+  #72 = Utf8               len\n+  #73 = Utf8               bytesToRead\n+  #74 = Utf8               bytesRead\n+  #75 = Utf8               buf\n+  #76 = Methodref          #28.#77        // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+  #77 = NameAndType        #78:#65        // rewind:()Ljava/nio/Buffer;\n+  #78 = Utf8               rewind\n+  #79 = Methodref          #80.#82        // java/nio/Buffer.limit:(I)Ljava/nio/Buffer;\n+  #80 = Class              #81            // java/nio/Buffer\n+  #81 = Utf8               java/nio/Buffer\n+  #82 = NameAndType        #83:#84        // limit:(I)Ljava/nio/Buffer;\n+  #83 = Utf8               limit\n+  #84 = Utf8               (I)Ljava/nio/Buffer;\n   #85 = Utf8               close\n   #86 = Utf8               SourceFile\n   #87 = Utf8               BoundedSeekableByteChannelInputStream.java\n {\n   private static final int MAX_BUF_LEN = 8192;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n@@ -114,46 +114,47 @@\n \n   public org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream(java.nio.channels.SeekableByteChannel, long);\n     descriptor: (Ljava/nio/channels/SeekableByteChannel;J)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=3\n          0: aload_0\n-         1: invokespecial #1                  // Method java/io/InputStream.\"<init>\":()V\n+         1: invokespecial #18                 // Method java/io/InputStream.\"<init>\":()V\n          4: aload_0\n          5: aload_1\n-         6: putfield      #7                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n+         6: putfield      #21                 // Field channel:Ljava/nio/channels/SeekableByteChannel;\n          9: aload_0\n         10: lload_2\n-        11: putfield      #13                 // Field bytesRemaining:J\n+        11: putfield      #23                 // Field bytesRemaining:J\n         14: lload_2\n-        15: ldc2_w        #17                 // long 8192l\n+        15: ldc2_w        #25                 // long 8192l\n         18: lcmp\n         19: ifge          40\n         22: lload_2\n         23: lconst_0\n         24: lcmp\n         25: ifle          40\n         28: aload_0\n         29: lload_2\n         30: l2i\n-        31: invokestatic  #19                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-        34: putfield      #25                 // Field buffer:Ljava/nio/ByteBuffer;\n+        31: invokestatic  #27                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+        34: putfield      #33                 // Field buffer:Ljava/nio/ByteBuffer;\n         37: goto          50\n         40: aload_0\n         41: sipush        8192\n-        44: invokestatic  #19                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-        47: putfield      #25                 // Field buffer:Ljava/nio/ByteBuffer;\n+        44: invokestatic  #27                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+        47: putfield      #33                 // Field buffer:Ljava/nio/ByteBuffer;\n         50: return\n       LineNumberTable:\n-        line 32: 0\n+        line 31: 0\n         line 33: 4\n         line 34: 9\n         line 35: 14\n         line 36: 28\n+        line 37: 37\n         line 38: 40\n         line 40: 50\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      51     0  this   Lorg/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream;\n             0      51     1 channel   Ljava/nio/channels/SeekableByteChannel;\n             0      51     2  size   J\n@@ -163,38 +164,40 @@\n           locals = [ class org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream, class java/nio/channels/SeekableByteChannel, long ]\n           stack = []\n         frame_type = 9 /* same */\n \n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #13                 // Field bytesRemaining:J\n+         1: getfield      #23                 // Field bytesRemaining:J\n          4: lconst_0\n          5: lcmp\n          6: ifle          43\n          9: aload_0\n         10: dup\n-        11: getfield      #13                 // Field bytesRemaining:J\n+        11: getfield      #23                 // Field bytesRemaining:J\n         14: lconst_1\n         15: lsub\n-        16: putfield      #13                 // Field bytesRemaining:J\n+        16: putfield      #23                 // Field bytesRemaining:J\n         19: aload_0\n         20: iconst_1\n-        21: invokespecial #29                 // Method read:(I)I\n+        21: invokespecial #48                 // Method read:(I)I\n         24: istore_1\n         25: iload_1\n         26: ifge          31\n         29: iload_1\n         30: ireturn\n         31: aload_0\n-        32: getfield      #25                 // Field buffer:Ljava/nio/ByteBuffer;\n-        35: invokevirtual #33                 // Method java/nio/ByteBuffer.get:()B\n+        32: getfield      #33                 // Field buffer:Ljava/nio/ByteBuffer;\n+        35: invokevirtual #51                 // Method java/nio/ByteBuffer.get:()B\n         38: sipush        255\n         41: iand\n         42: ireturn\n         43: iconst_m1\n         44: ireturn\n       LineNumberTable:\n         line 44: 0\n@@ -202,172 +205,171 @@\n         line 46: 19\n         line 47: 25\n         line 48: 29\n         line 50: 31\n         line 52: 43\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           25      18     1  read   I\n             0      45     0  this   Lorg/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream;\n+           25      18     1  read   I\n       StackMapTable: number_of_entries = 2\n         frame_type = 252 /* append */\n           offset_delta = 31\n           locals = [ int ]\n         frame_type = 250 /* chop */\n           offset_delta = 11\n-    Exceptions:\n-      throws java.io.IOException\n \n   public int read(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)I\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=7, args_size=4\n          0: iload_3\n          1: ifne          6\n          4: iconst_0\n          5: ireturn\n          6: aload_0\n-         7: getfield      #13                 // Field bytesRemaining:J\n+         7: getfield      #23                 // Field bytesRemaining:J\n         10: lconst_0\n         11: lcmp\n         12: ifgt          17\n         15: iconst_m1\n         16: ireturn\n         17: iload_3\n         18: istore        4\n         20: iload         4\n         22: i2l\n         23: aload_0\n-        24: getfield      #13                 // Field bytesRemaining:J\n+        24: getfield      #23                 // Field bytesRemaining:J\n         27: lcmp\n         28: ifle          38\n         31: aload_0\n-        32: getfield      #13                 // Field bytesRemaining:J\n+        32: getfield      #23                 // Field bytesRemaining:J\n         35: l2i\n         36: istore        4\n         38: iload         4\n         40: aload_0\n-        41: getfield      #25                 // Field buffer:Ljava/nio/ByteBuffer;\n-        44: invokevirtual #37                 // Method java/nio/ByteBuffer.capacity:()I\n+        41: getfield      #33                 // Field buffer:Ljava/nio/ByteBuffer;\n+        44: invokevirtual #56                 // Method java/nio/ByteBuffer.capacity:()I\n         47: if_icmpgt     67\n         50: aload_0\n-        51: getfield      #25                 // Field buffer:Ljava/nio/ByteBuffer;\n+        51: getfield      #33                 // Field buffer:Ljava/nio/ByteBuffer;\n         54: astore        6\n         56: aload_0\n         57: iload         4\n-        59: invokespecial #29                 // Method read:(I)I\n+        59: invokespecial #48                 // Method read:(I)I\n         62: istore        5\n         64: goto          93\n         67: iload         4\n-        69: invokestatic  #19                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+        69: invokestatic  #27                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n         72: astore        6\n         74: aload_0\n-        75: getfield      #7                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n+        75: getfield      #21                 // Field channel:Ljava/nio/channels/SeekableByteChannel;\n         78: aload         6\n-        80: invokeinterface #41,  2           // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+        80: invokeinterface #59,  2           // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n         85: istore        5\n         87: aload         6\n-        89: invokevirtual #46                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+        89: invokevirtual #62                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n         92: pop\n         93: iload         5\n         95: iflt          120\n         98: aload         6\n        100: aload_1\n        101: iload_2\n        102: iload         5\n-       104: invokevirtual #50                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n+       104: invokevirtual #66                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n        107: pop\n        108: aload_0\n        109: dup\n-       110: getfield      #13                 // Field bytesRemaining:J\n+       110: getfield      #23                 // Field bytesRemaining:J\n        113: iload         5\n        115: i2l\n        116: lsub\n-       117: putfield      #13                 // Field bytesRemaining:J\n+       117: putfield      #23                 // Field bytesRemaining:J\n        120: iload         5\n        122: ireturn\n       LineNumberTable:\n         line 68: 0\n         line 69: 4\n         line 71: 6\n         line 72: 15\n         line 74: 17\n         line 75: 20\n         line 76: 31\n         line 80: 38\n         line 81: 50\n         line 82: 56\n+        line 83: 64\n         line 84: 67\n         line 85: 74\n         line 86: 87\n         line 88: 93\n         line 89: 98\n         line 90: 108\n         line 92: 120\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           64       3     5 bytesRead   I\n-           56      11     6   buf   Ljava/nio/ByteBuffer;\n             0     123     0  this   Lorg/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream;\n             0     123     1     b   [B\n             0     123     2   off   I\n             0     123     3   len   I\n            20     103     4 bytesToRead   I\n+           64       3     5 bytesRead   I\n            87      36     5 bytesRead   I\n+           56      11     6   buf   Ljava/nio/ByteBuffer;\n            74      49     6   buf   Ljava/nio/ByteBuffer;\n       StackMapTable: number_of_entries = 6\n         frame_type = 6 /* same */\n         frame_type = 10 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 20\n           locals = [ int ]\n         frame_type = 28 /* same */\n         frame_type = 253 /* append */\n           offset_delta = 25\n           locals = [ int, class java/nio/ByteBuffer ]\n         frame_type = 26 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   private int read(int) throws java.io.IOException;\n     descriptor: (I)I\n     flags: (0x0002) ACC_PRIVATE\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=2, locals=3, args_size=2\n          0: aload_0\n-         1: getfield      #25                 // Field buffer:Ljava/nio/ByteBuffer;\n-         4: invokevirtual #53                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+         1: getfield      #33                 // Field buffer:Ljava/nio/ByteBuffer;\n+         4: invokevirtual #76                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n          7: iload_1\n-         8: invokevirtual #56                 // Method java/nio/Buffer.limit:(I)Ljava/nio/Buffer;\n+         8: invokevirtual #79                 // Method java/nio/Buffer.limit:(I)Ljava/nio/Buffer;\n         11: pop\n         12: aload_0\n-        13: getfield      #7                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n+        13: getfield      #21                 // Field channel:Ljava/nio/channels/SeekableByteChannel;\n         16: aload_0\n-        17: getfield      #25                 // Field buffer:Ljava/nio/ByteBuffer;\n-        20: invokeinterface #41,  2           // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+        17: getfield      #33                 // Field buffer:Ljava/nio/ByteBuffer;\n+        20: invokeinterface #59,  2           // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n         25: istore_2\n         26: aload_0\n-        27: getfield      #25                 // Field buffer:Ljava/nio/ByteBuffer;\n-        30: invokevirtual #46                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+        27: getfield      #33                 // Field buffer:Ljava/nio/ByteBuffer;\n+        30: invokevirtual #62                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n         33: pop\n         34: iload_2\n         35: ireturn\n       LineNumberTable:\n         line 96: 0\n         line 97: 12\n         line 98: 26\n         line 99: 34\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      36     0  this   Lorg/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream;\n             0      36     1   len   I\n            26      10     2  read   I\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void close();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=0, locals=1, args_size=1\n          0: return\n"}]}
