{"diffoscope-json-version": 1, "source1": "first/AttributeHTML.class", "source2": "second/AttributeHTML.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -26,138 +26,136 @@\n {\n     private final String className;\n     private final PrintWriter printWriter;\n     private int attrCount;\n     private final ConstantHTML constantHtml;\n     private final ConstantPool constantPool;\n     \n-    AttributeHTML(final String dir, final String className, final ConstantPool constantPool, final ConstantHTML constantHtml, final Charset charset) throws FileNotFoundException, UnsupportedEncodingException {\n-        this.className = className;\n+    AttributeHTML(final String str, final String s, final ConstantPool constantPool, final ConstantHTML constantHtml, final Charset charset) throws FileNotFoundException, UnsupportedEncodingException {\n+        this.className = s;\n         this.constantPool = constantPool;\n         this.constantHtml = constantHtml;\n-        (this.printWriter = new PrintWriter(dir + className + \"_attributes.html\", charset.name())).print(\"<HTML><head><meta charset=\\\"\");\n+        (this.printWriter = new PrintWriter(str + s + \"_attributes.html\", charset.name())).print(\"<HTML><head><meta charset=\\\"\");\n         this.printWriter.print(charset.name());\n         this.printWriter.println(\"\\\"></head>\");\n         this.printWriter.println(\"<BODY BGCOLOR=\\\"#C0C0C0\\\"><TABLE BORDER=0>\");\n     }\n     \n     @Override\n     public void close() {\n         this.printWriter.println(\"</TABLE></BODY></HTML>\");\n         this.printWriter.close();\n     }\n     \n-    private String codeLink(final int link, final int methodNumber) {\n-        return \"<A HREF=\\\"\" + this.className + \"_code.html#code\" + methodNumber + \"@\" + link + \"\\\" TARGET=Code>\" + link + \"</A>\";\n+    private String codeLink(final int n, final int i) {\n+        return \"<A HREF=\\\"\" + this.className + \"_code.html#code\" + i + \"@\" + n + \"\\\" TARGET=Code>\" + n + \"</A>\";\n     }\n     \n-    void writeAttribute(final Attribute attribute, final String anchor) {\n-        this.writeAttribute(attribute, anchor, 0);\n+    void writeAttribute(final Attribute attribute, final String s) {\n+        this.writeAttribute(attribute, s, 0);\n     }\n     \n-    void writeAttribute(final Attribute attribute, final String anchor, final int methodNumber) {\n-        final byte tag = attribute.getTag();\n+    void writeAttribute(final Attribute obj, final String str, final int i) {\n+        final byte tag = obj.getTag();\n         if (tag == -1) {\n             return;\n         }\n         ++this.attrCount;\n         if (this.attrCount % 2 == 0) {\n             this.printWriter.print(\"<TR BGCOLOR=\\\"#C0C0C0\\\"><TD>\");\n         }\n         else {\n             this.printWriter.print(\"<TR BGCOLOR=\\\"#A0A0A0\\\"><TD>\");\n         }\n-        this.printWriter.println(\"<H4><A NAME=\\\"\" + anchor + \"\\\">\" + this.attrCount + \" \" + Const.getAttributeName((int)tag) + \"</A></H4>\");\n+        this.printWriter.println(\"<H4><A NAME=\\\"\" + str + \"\\\">\" + this.attrCount + \" \" + Const.getAttributeName((int)tag) + \"</A></H4>\");\n         switch (tag) {\n             case 2: {\n-                final Code c = (Code)attribute;\n-                this.printWriter.print(\"<UL><LI>Maximum stack size = \" + c.getMaxStack() + \"</LI>\\n<LI>Number of local variables = \" + c.getMaxLocals() + \"</LI>\\n<LI><A HREF=\\\"\" + this.className + \"_code.html#method\" + methodNumber + \"\\\" TARGET=Code>Byte code</A></LI></UL>\\n\");\n-                final CodeException[] ce = c.getExceptionTable();\n-                final int len = ce.length;\n-                if (len > 0) {\n+                final Code code = (Code)obj;\n+                this.printWriter.print(\"<UL><LI>Maximum stack size = \" + code.getMaxStack() + \"</LI>\\n<LI>Number of local variables = \" + code.getMaxLocals() + \"</LI>\\n<LI><A HREF=\\\"\" + this.className + \"_code.html#method\" + i + \"\\\" TARGET=Code>Byte code</A></LI></UL>\\n\");\n+                final CodeException[] exceptionTable = code.getExceptionTable();\n+                if (exceptionTable.length > 0) {\n                     this.printWriter.print(\"<P><B>Exceptions handled</B><UL>\");\n-                    for (final CodeException cex : ce) {\n-                        final int catchType = cex.getCatchType();\n+                    for (final CodeException ex : exceptionTable) {\n+                        final int catchType = ex.getCatchType();\n                         this.printWriter.print(\"<LI>\");\n                         if (catchType != 0) {\n                             this.printWriter.print(this.constantHtml.referenceConstant(catchType));\n                         }\n                         else {\n                             this.printWriter.print(\"Any Exception\");\n                         }\n-                        this.printWriter.print(\"<BR>(Ranging from lines \" + this.codeLink(cex.getStartPC(), methodNumber) + \" to \" + this.codeLink(cex.getEndPC(), methodNumber) + \", handled at line \" + this.codeLink(cex.getHandlerPC(), methodNumber) + \")</LI>\");\n+                        this.printWriter.print(\"<BR>(Ranging from lines \" + this.codeLink(ex.getStartPC(), i) + \" to \" + this.codeLink(ex.getEndPC(), i) + \", handled at line \" + this.codeLink(ex.getHandlerPC(), i) + \")</LI>\");\n                     }\n                     this.printWriter.print(\"</UL>\");\n                     break;\n                 }\n                 break;\n             }\n             case 1: {\n-                final int index = ((ConstantValue)attribute).getConstantValueIndex();\n-                this.printWriter.print(\"<UL><LI><A HREF=\\\"\" + this.className + \"_cp.html#cp\" + index + \"\\\" TARGET=\\\"ConstantPool\\\">Constant value index(\" + index + \")</A></UL>\\n\");\n+                final int constantValueIndex = ((ConstantValue)obj).getConstantValueIndex();\n+                this.printWriter.print(\"<UL><LI><A HREF=\\\"\" + this.className + \"_cp.html#cp\" + constantValueIndex + \"\\\" TARGET=\\\"ConstantPool\\\">Constant value index(\" + constantValueIndex + \")</A></UL>\\n\");\n                 break;\n             }\n             case 0: {\n-                final int index = ((SourceFile)attribute).getSourceFileIndex();\n-                this.printWriter.print(\"<UL><LI><A HREF=\\\"\" + this.className + \"_cp.html#cp\" + index + \"\\\" TARGET=\\\"ConstantPool\\\">Source file index(\" + index + \")</A></UL>\\n\");\n+                final int sourceFileIndex = ((SourceFile)obj).getSourceFileIndex();\n+                this.printWriter.print(\"<UL><LI><A HREF=\\\"\" + this.className + \"_cp.html#cp\" + sourceFileIndex + \"\\\" TARGET=\\\"ConstantPool\\\">Source file index(\" + sourceFileIndex + \")</A></UL>\\n\");\n                 break;\n             }\n             case 3: {\n-                final int[] indices = ((ExceptionTable)attribute).getExceptionIndexTable();\n+                final int[] exceptionIndexTable = ((ExceptionTable)obj).getExceptionIndexTable();\n                 this.printWriter.print(\"<UL>\");\n-                for (final int indice : indices) {\n-                    this.printWriter.print(\"<LI><A HREF=\\\"\" + this.className + \"_cp.html#cp\" + indice + \"\\\" TARGET=\\\"ConstantPool\\\">Exception class index(\" + indice + \")</A>\\n\");\n+                for (final int n : exceptionIndexTable) {\n+                    this.printWriter.print(\"<LI><A HREF=\\\"\" + this.className + \"_cp.html#cp\" + n + \"\\\" TARGET=\\\"ConstantPool\\\">Exception class index(\" + n + \")</A>\\n\");\n                 }\n                 this.printWriter.print(\"</UL>\\n\");\n                 break;\n             }\n             case 4: {\n-                final LineNumber[] lineNumbers = ((LineNumberTable)attribute).getLineNumberTable();\n+                final LineNumber[] lineNumberTable = ((LineNumberTable)obj).getLineNumberTable();\n                 this.printWriter.print(\"<P>\");\n-                for (int i = 0; i < lineNumbers.length; ++i) {\n-                    this.printWriter.print(\"(\" + lineNumbers[i].getStartPC() + \",&nbsp;\" + lineNumbers[i].getLineNumber() + \")\");\n-                    if (i < lineNumbers.length - 1) {\n+                for (int l = 0; l < lineNumberTable.length; ++l) {\n+                    this.printWriter.print(\"(\" + lineNumberTable[l].getStartPC() + \",&nbsp;\" + lineNumberTable[l].getLineNumber() + \")\");\n+                    if (l < lineNumberTable.length - 1) {\n                         this.printWriter.print(\", \");\n                     }\n                 }\n                 break;\n             }\n             case 5: {\n                 this.printWriter.print(\"<UL>\");\n-                ((LocalVariableTable)attribute).forEach(var -> {\n-                    final int sigIdx = var.getSignatureIndex();\n-                    final String signature = this.constantPool.getConstantUtf8(sigIdx).getBytes();\n-                    final String signature2 = Utility.signatureToString(signature, false);\n-                    final int start = var.getStartPC();\n-                    final int end = start + var.getLength();\n-                    this.printWriter.println(\"<LI>\" + Class2HTML.referenceType(signature2) + \"&nbsp;<B>\" + var.getName() + \"</B> in slot %\" + var.getIndex() + \"<BR>Valid from lines <A HREF=\\\"\" + this.className + \"_code.html#code\" + methodNumber + \"@\" + start + \"\\\" TARGET=Code>\" + start + \"</A> to <A HREF=\\\"\" + this.className + \"_code.html#code\" + methodNumber + \"@\" + end + \"\\\" TARGET=Code>\" + end + \"</A></LI>\");\n+                ((LocalVariableTable)obj).forEach(localVariable -> {\n+                    Utility.signatureToString(this.constantPool.getConstantUtf8(localVariable.getSignatureIndex()).getBytes(), false);\n+                    localVariable.getStartPC();\n+                    final int n5;\n+                    final int n4 = n5 + localVariable.getLength();\n+                    final String s;\n+                    this.printWriter.println(\"<LI>\" + Class2HTML.referenceType(s) + \"&nbsp;<B>\" + localVariable.getName() + \"</B> in slot %\" + localVariable.getIndex() + \"<BR>Valid from lines <A HREF=\\\"\" + this.className + \"_code.html#code\" + n3 + \"@\" + n5 + \"\\\" TARGET=Code>\" + n5 + \"</A> to <A HREF=\\\"\" + this.className + \"_code.html#code\" + n3 + \"@\" + n4 + \"\\\" TARGET=Code>\" + n4 + \"</A></LI>\");\n                     return;\n                 });\n                 this.printWriter.print(\"</UL>\\n\");\n                 break;\n             }\n             case 6: {\n                 this.printWriter.print(\"<UL>\");\n-                for (final InnerClass clazz : ((InnerClasses)attribute).getInnerClasses()) {\n-                    final int index = clazz.getInnerNameIndex();\n-                    String name;\n-                    if (index > 0) {\n-                        name = this.constantPool.getConstantUtf8(index).getBytes();\n+                for (final InnerClass innerClass : ((InnerClasses)obj).getInnerClasses()) {\n+                    final int innerNameIndex = innerClass.getInnerNameIndex();\n+                    String bytes;\n+                    if (innerNameIndex > 0) {\n+                        bytes = this.constantPool.getConstantUtf8(innerNameIndex).getBytes();\n                     }\n                     else {\n-                        name = \"&lt;anonymous&gt;\";\n+                        bytes = \"&lt;anonymous&gt;\";\n                     }\n-                    final String access = Utility.accessToString(clazz.getInnerAccessFlags());\n-                    this.printWriter.print(\"<LI><FONT COLOR=\\\"#FF0000\\\">\" + access + \"</FONT> \" + this.constantHtml.referenceConstant(clazz.getInnerClassIndex()) + \" in&nbsp;class \" + this.constantHtml.referenceConstant(clazz.getOuterClassIndex()) + \" named \" + name + \"</LI>\\n\");\n+                    this.printWriter.print(\"<LI><FONT COLOR=\\\"#FF0000\\\">\" + Utility.accessToString(innerClass.getInnerAccessFlags()) + \"</FONT> \" + this.constantHtml.referenceConstant(innerClass.getInnerClassIndex()) + \" in&nbsp;class \" + this.constantHtml.referenceConstant(innerClass.getOuterClassIndex()) + \" named \" + bytes + \"</LI>\\n\");\n                 }\n                 this.printWriter.print(\"</UL>\\n\");\n                 break;\n             }\n             default: {\n-                this.printWriter.print(\"<P>\" + attribute);\n+                this.printWriter.print(\"<P>\" + obj);\n                 break;\n             }\n         }\n         this.printWriter.println(\"</TD></TR>\");\n         this.printWriter.flush();\n     }\n }\n"}]}
