{"diffoscope-json-version": 1, "source1": "first/SimpleElementValueGen.class", "source2": "second/SimpleElementValueGen.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,136 +11,136 @@\n import java.io.DataOutputStream;\n import org.apache.bcel.classfile.SimpleElementValue;\n \n public class SimpleElementValueGen extends ElementValueGen\n {\n     private final int idx;\n     \n-    public SimpleElementValueGen(final int type, final ConstantPoolGen cpGen, final boolean value) {\n-        super(type, cpGen);\n-        if (value) {\n+    public SimpleElementValueGen(final int n, final ConstantPoolGen constantPoolGen, final boolean b) {\n+        super(n, constantPoolGen);\n+        if (b) {\n             this.idx = this.getConstantPool().addInteger(1);\n         }\n         else {\n             this.idx = this.getConstantPool().addInteger(0);\n         }\n     }\n     \n-    public SimpleElementValueGen(final int type, final ConstantPoolGen cpGen, final byte value) {\n-        super(type, cpGen);\n-        this.idx = this.getConstantPool().addInteger((int)value);\n+    public SimpleElementValueGen(final int n, final ConstantPoolGen constantPoolGen, final byte b) {\n+        super(n, constantPoolGen);\n+        this.idx = this.getConstantPool().addInteger((int)b);\n     }\n     \n-    public SimpleElementValueGen(final int type, final ConstantPoolGen cpGen, final char value) {\n-        super(type, cpGen);\n-        this.idx = this.getConstantPool().addInteger((int)value);\n+    public SimpleElementValueGen(final int n, final ConstantPoolGen constantPoolGen, final char c) {\n+        super(n, constantPoolGen);\n+        this.idx = this.getConstantPool().addInteger((int)c);\n     }\n     \n-    public SimpleElementValueGen(final int type, final ConstantPoolGen cpGen, final double value) {\n-        super(type, cpGen);\n-        this.idx = this.getConstantPool().addDouble(value);\n+    public SimpleElementValueGen(final int n, final ConstantPoolGen constantPoolGen, final double n2) {\n+        super(n, constantPoolGen);\n+        this.idx = this.getConstantPool().addDouble(n2);\n     }\n     \n-    public SimpleElementValueGen(final int type, final ConstantPoolGen cpGen, final float value) {\n-        super(type, cpGen);\n-        this.idx = this.getConstantPool().addFloat(value);\n+    public SimpleElementValueGen(final int n, final ConstantPoolGen constantPoolGen, final float n2) {\n+        super(n, constantPoolGen);\n+        this.idx = this.getConstantPool().addFloat(n2);\n     }\n     \n-    public SimpleElementValueGen(final int type, final ConstantPoolGen cpGen, final int value) {\n-        super(type, cpGen);\n-        this.idx = this.getConstantPool().addInteger(value);\n+    public SimpleElementValueGen(final int n, final ConstantPoolGen constantPoolGen, final int n2) {\n+        super(n, constantPoolGen);\n+        this.idx = this.getConstantPool().addInteger(n2);\n     }\n     \n-    public SimpleElementValueGen(final int type, final ConstantPoolGen cpGen, final long value) {\n-        super(type, cpGen);\n-        this.idx = this.getConstantPool().addLong(value);\n+    public SimpleElementValueGen(final int n, final ConstantPoolGen constantPoolGen, final long n2) {\n+        super(n, constantPoolGen);\n+        this.idx = this.getConstantPool().addLong(n2);\n     }\n     \n-    public SimpleElementValueGen(final int type, final ConstantPoolGen cpGen, final short value) {\n-        super(type, cpGen);\n-        this.idx = this.getConstantPool().addInteger((int)value);\n+    public SimpleElementValueGen(final int n, final ConstantPoolGen constantPoolGen, final short n2) {\n+        super(n, constantPoolGen);\n+        this.idx = this.getConstantPool().addInteger((int)n2);\n     }\n     \n-    public SimpleElementValueGen(final int type, final ConstantPoolGen cpGen, final String value) {\n-        super(type, cpGen);\n-        this.idx = this.getConstantPool().addUtf8(value);\n+    public SimpleElementValueGen(final int n, final ConstantPoolGen constantPoolGen, final String s) {\n+        super(n, constantPoolGen);\n+        this.idx = this.getConstantPool().addUtf8(s);\n     }\n     \n-    protected SimpleElementValueGen(final int type, final int idx, final ConstantPoolGen cpGen) {\n-        super(type, cpGen);\n+    protected SimpleElementValueGen(final int n, final int idx, final ConstantPoolGen constantPoolGen) {\n+        super(n, constantPoolGen);\n         this.idx = idx;\n     }\n     \n-    public SimpleElementValueGen(final SimpleElementValue value, final ConstantPoolGen cpool, final boolean copyPoolEntries) {\n-        super(value.getElementValueType(), cpool);\n-        if (!copyPoolEntries) {\n-            this.idx = value.getIndex();\n+    public SimpleElementValueGen(final SimpleElementValue simpleElementValue, final ConstantPoolGen constantPoolGen, final boolean b) {\n+        super(simpleElementValue.getElementValueType(), constantPoolGen);\n+        if (!b) {\n+            this.idx = simpleElementValue.getIndex();\n         }\n         else {\n-            switch (value.getElementValueType()) {\n+            switch (simpleElementValue.getElementValueType()) {\n                 case 115: {\n-                    this.idx = cpool.addUtf8(value.getValueString());\n+                    this.idx = constantPoolGen.addUtf8(simpleElementValue.getValueString());\n                     break;\n                 }\n                 case 73: {\n-                    this.idx = cpool.addInteger(value.getValueInt());\n+                    this.idx = constantPoolGen.addInteger(simpleElementValue.getValueInt());\n                     break;\n                 }\n                 case 66: {\n-                    this.idx = cpool.addInteger((int)value.getValueByte());\n+                    this.idx = constantPoolGen.addInteger((int)simpleElementValue.getValueByte());\n                     break;\n                 }\n                 case 67: {\n-                    this.idx = cpool.addInteger((int)value.getValueChar());\n+                    this.idx = constantPoolGen.addInteger((int)simpleElementValue.getValueChar());\n                     break;\n                 }\n                 case 74: {\n-                    this.idx = cpool.addLong(value.getValueLong());\n+                    this.idx = constantPoolGen.addLong(simpleElementValue.getValueLong());\n                     break;\n                 }\n                 case 70: {\n-                    this.idx = cpool.addFloat(value.getValueFloat());\n+                    this.idx = constantPoolGen.addFloat(simpleElementValue.getValueFloat());\n                     break;\n                 }\n                 case 68: {\n-                    this.idx = cpool.addDouble(value.getValueDouble());\n+                    this.idx = constantPoolGen.addDouble(simpleElementValue.getValueDouble());\n                     break;\n                 }\n                 case 90: {\n-                    if (value.getValueBoolean()) {\n-                        this.idx = cpool.addInteger(1);\n+                    if (simpleElementValue.getValueBoolean()) {\n+                        this.idx = constantPoolGen.addInteger(1);\n                         break;\n                     }\n-                    this.idx = cpool.addInteger(0);\n+                    this.idx = constantPoolGen.addInteger(0);\n                     break;\n                 }\n                 case 83: {\n-                    this.idx = cpool.addInteger((int)value.getValueShort());\n+                    this.idx = constantPoolGen.addInteger((int)simpleElementValue.getValueShort());\n                     break;\n                 }\n                 default: {\n                     throw new IllegalArgumentException(\"SimpleElementValueGen class does not know how to copy this type \" + super.getElementValueType());\n                 }\n             }\n         }\n     }\n     \n-    public void dump(final DataOutputStream dos) throws IOException {\n-        dos.writeByte(super.getElementValueType());\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeByte(super.getElementValueType());\n         switch (super.getElementValueType()) {\n             case 66:\n             case 67:\n             case 68:\n             case 70:\n             case 73:\n             case 74:\n             case 83:\n             case 90:\n             case 115: {\n-                dos.writeShort(this.idx);\n+                dataOutputStream.writeShort(this.idx);\n                 return;\n             }\n             default: {\n                 throw new IllegalStateException(\"SimpleElementValueGen doesnt know how to write out type \" + super.getElementValueType());\n             }\n         }\n     }\n@@ -153,66 +153,55 @@\n         return this.idx;\n     }\n     \n     public int getValueInt() {\n         if (super.getElementValueType() != 73) {\n             throw new IllegalStateException(\"Dont call getValueString() on a non STRING ElementValue\");\n         }\n-        final ConstantInteger c = (ConstantInteger)this.getConstantPool().getConstant(this.idx);\n-        return c.getBytes();\n+        return ((ConstantInteger)this.getConstantPool().getConstant(this.idx)).getBytes();\n     }\n     \n     public String getValueString() {\n         if (super.getElementValueType() != 115) {\n             throw new IllegalStateException(\"Dont call getValueString() on a non STRING ElementValue\");\n         }\n-        final ConstantUtf8 c = (ConstantUtf8)this.getConstantPool().getConstant(this.idx);\n-        return c.getBytes();\n+        return ((ConstantUtf8)this.getConstantPool().getConstant(this.idx)).getBytes();\n     }\n     \n     public String stringifyValue() {\n         switch (super.getElementValueType()) {\n             case 73: {\n-                final ConstantInteger c = (ConstantInteger)this.getConstantPool().getConstant(this.idx);\n-                return Integer.toString(c.getBytes());\n+                return Integer.toString(((ConstantInteger)this.getConstantPool().getConstant(this.idx)).getBytes());\n             }\n             case 74: {\n-                final ConstantLong j = (ConstantLong)this.getConstantPool().getConstant(this.idx);\n-                return Long.toString(j.getBytes());\n+                return Long.toString(((ConstantLong)this.getConstantPool().getConstant(this.idx)).getBytes());\n             }\n             case 68: {\n-                final ConstantDouble d = (ConstantDouble)this.getConstantPool().getConstant(this.idx);\n-                return Double.toString(d.getBytes());\n+                return Double.toString(((ConstantDouble)this.getConstantPool().getConstant(this.idx)).getBytes());\n             }\n             case 70: {\n-                final ConstantFloat f = (ConstantFloat)this.getConstantPool().getConstant(this.idx);\n-                return Float.toString(f.getBytes());\n+                return Float.toString(((ConstantFloat)this.getConstantPool().getConstant(this.idx)).getBytes());\n             }\n             case 83: {\n-                final ConstantInteger s = (ConstantInteger)this.getConstantPool().getConstant(this.idx);\n-                return Integer.toString(s.getBytes());\n+                return Integer.toString(((ConstantInteger)this.getConstantPool().getConstant(this.idx)).getBytes());\n             }\n             case 66: {\n-                final ConstantInteger b = (ConstantInteger)this.getConstantPool().getConstant(this.idx);\n-                return Integer.toString(b.getBytes());\n+                return Integer.toString(((ConstantInteger)this.getConstantPool().getConstant(this.idx)).getBytes());\n             }\n             case 67: {\n-                final ConstantInteger ch = (ConstantInteger)this.getConstantPool().getConstant(this.idx);\n-                return Integer.toString(ch.getBytes());\n+                return Integer.toString(((ConstantInteger)this.getConstantPool().getConstant(this.idx)).getBytes());\n             }\n             case 90: {\n-                final ConstantInteger bo = (ConstantInteger)this.getConstantPool().getConstant(this.idx);\n-                if (bo.getBytes() == 0) {\n+                if (((ConstantInteger)this.getConstantPool().getConstant(this.idx)).getBytes() == 0) {\n                     return \"false\";\n                 }\n                 return \"true\";\n             }\n             case 115: {\n-                final ConstantUtf8 cu8 = (ConstantUtf8)this.getConstantPool().getConstant(this.idx);\n-                return cu8.getBytes();\n+                return ((ConstantUtf8)this.getConstantPool().getConstant(this.idx)).getBytes();\n             }\n             default: {\n                 throw new IllegalStateException(\"SimpleElementValueGen class does not know how to stringify type \" + super.getElementValueType());\n             }\n         }\n     }\n }\n"}]}
