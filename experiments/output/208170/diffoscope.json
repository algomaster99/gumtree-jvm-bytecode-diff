{"diffoscope-json-version": 1, "source1": "first/Charsets.class", "source2": "second/Charsets.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -29,35 +29,35 @@\n         return Charsets.STANDARD_CHARSET_MAP;\n     }\n     \n     public static Charset toCharset(final Charset charset) {\n         return (charset == null) ? Charset.defaultCharset() : charset;\n     }\n     \n-    public static Charset toCharset(final Charset charset, final Charset defaultCharset) {\n-        return (charset == null) ? defaultCharset : charset;\n+    public static Charset toCharset(final Charset charset, final Charset charset2) {\n+        return (charset == null) ? charset2 : charset;\n     }\n     \n-    public static Charset toCharset(final String charsetName) throws UnsupportedCharsetException {\n-        return toCharset(charsetName, Charset.defaultCharset());\n+    public static Charset toCharset(final String s) throws UnsupportedCharsetException {\n+        return toCharset(s, Charset.defaultCharset());\n     }\n     \n-    public static Charset toCharset(final String charsetName, final Charset defaultCharset) throws UnsupportedCharsetException {\n-        return (charsetName == null) ? defaultCharset : Charset.forName(charsetName);\n+    public static Charset toCharset(final String charsetName, final Charset charset) throws UnsupportedCharsetException {\n+        return (charsetName == null) ? charset : Charset.forName(charsetName);\n     }\n     \n     static {\n-        final SortedMap<String, Charset> standardCharsetMap = new TreeMap<String, Charset>(String.CASE_INSENSITIVE_ORDER);\n-        standardCharsetMap.put(StandardCharsets.ISO_8859_1.name(), StandardCharsets.ISO_8859_1);\n-        standardCharsetMap.put(StandardCharsets.US_ASCII.name(), StandardCharsets.US_ASCII);\n-        standardCharsetMap.put(StandardCharsets.UTF_16.name(), StandardCharsets.UTF_16);\n-        standardCharsetMap.put(StandardCharsets.UTF_16BE.name(), StandardCharsets.UTF_16BE);\n-        standardCharsetMap.put(StandardCharsets.UTF_16LE.name(), StandardCharsets.UTF_16LE);\n-        standardCharsetMap.put(StandardCharsets.UTF_8.name(), StandardCharsets.UTF_8);\n-        STANDARD_CHARSET_MAP = Collections.unmodifiableSortedMap((SortedMap<String, ? extends Charset>)standardCharsetMap);\n+        final TreeMap m = new TreeMap((Comparator<? super K>)String.CASE_INSENSITIVE_ORDER);\n+        m.put(StandardCharsets.ISO_8859_1.name(), StandardCharsets.ISO_8859_1);\n+        m.put(StandardCharsets.US_ASCII.name(), StandardCharsets.US_ASCII);\n+        m.put(StandardCharsets.UTF_16.name(), StandardCharsets.UTF_16);\n+        m.put(StandardCharsets.UTF_16BE.name(), StandardCharsets.UTF_16BE);\n+        m.put(StandardCharsets.UTF_16LE.name(), StandardCharsets.UTF_16LE);\n+        m.put(StandardCharsets.UTF_8.name(), StandardCharsets.UTF_8);\n+        STANDARD_CHARSET_MAP = Collections.unmodifiableSortedMap((SortedMap<String, ?>)m);\n         ISO_8859_1 = StandardCharsets.ISO_8859_1;\n         US_ASCII = StandardCharsets.US_ASCII;\n         UTF_16 = StandardCharsets.UTF_16;\n         UTF_16BE = StandardCharsets.UTF_16BE;\n         UTF_16LE = StandardCharsets.UTF_16LE;\n         UTF_8 = StandardCharsets.UTF_8;\n     }\n"}]}
