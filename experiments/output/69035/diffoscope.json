{"diffoscope-json-version": 1, "source1": "first/TelnetInputStream.class", "source2": "second/TelnetInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -81,17 +81,18 @@\n             int ch;\n             if ((ch = super.read()) < 0) {\n                 return -1;\n             }\n             ch &= 0xFF;\n             synchronized (this.client) {\n                 this.client.processAYTResponse();\n+                monitorexit(this.client);\n             }\n             this.client.spyRead(ch);\n-            Label_0718: {\n+            Label_0686: {\n                 switch (this.receiveState) {\n                     case 8: {\n                         if (ch == 0) {\n                             continue;\n                         }\n                     }\n                     case 0: {\n@@ -103,16 +104,17 @@\n                             synchronized (this.client) {\n                                 if (this.client.requestedDont(0)) {\n                                     this.receiveState = 8;\n                                 }\n                                 else {\n                                     this.receiveState = 0;\n                                 }\n+                                monitorexit(this.client);\n+                                break;\n                             }\n-                            break;\n                         }\n                         this.receiveState = 0;\n                         break;\n                     }\n                     case 1: {\n                         switch (ch) {\n                             case 251: {\n@@ -134,15 +136,15 @@\n                             case 250: {\n                                 this.suboptionCount = 0;\n                                 this.receiveState = 6;\n                                 continue;\n                             }\n                             case 255: {\n                                 this.receiveState = 0;\n-                                break Label_0718;\n+                                break Label_0686;\n                             }\n                             case 240: {\n                                 this.receiveState = 0;\n                                 continue;\n                             }\n                             default: {\n                                 this.receiveState = 0;\n@@ -152,38 +154,42 @@\n                         }\n                         break;\n                     }\n                     case 2: {\n                         synchronized (this.client) {\n                             this.client.processWill(ch);\n                             this.client.flushOutputStream();\n+                            monitorexit(this.client);\n                         }\n                         this.receiveState = 0;\n                         continue;\n                     }\n                     case 3: {\n                         synchronized (this.client) {\n                             this.client.processWont(ch);\n                             this.client.flushOutputStream();\n+                            monitorexit(this.client);\n                         }\n                         this.receiveState = 0;\n                         continue;\n                     }\n                     case 4: {\n                         synchronized (this.client) {\n                             this.client.processDo(ch);\n                             this.client.flushOutputStream();\n+                            monitorexit(this.client);\n                         }\n                         this.receiveState = 0;\n                         continue;\n                     }\n                     case 5: {\n                         synchronized (this.client) {\n                             this.client.processDont(ch);\n                             this.client.flushOutputStream();\n+                            monitorexit(this.client);\n                         }\n                         this.receiveState = 0;\n                         continue;\n                     }\n                     case 6: {\n                         switch (ch) {\n                             case 255: {\n@@ -202,14 +208,15 @@\n                     }\n                     case 9: {\n                         switch (ch) {\n                             case 240: {\n                                 synchronized (this.client) {\n                                     this.client.processSuboption(this.suboption, this.suboptionCount);\n                                     this.client.flushOutputStream();\n+                                    monitorexit(this.client);\n                                 }\n                                 this.receiveState = 0;\n                                 continue;\n                             }\n                             case 255: {\n                                 if (this.suboptionCount < this.suboption.length) {\n                                     this.suboption[this.suboptionCount++] = ch;\n@@ -249,14 +256,15 @@\n                 this.queue.notify();\n             }\n             this.queue[this.queueTail] = ch;\n             ++this.bytesAvailable;\n             if (++this.queueTail >= this.queue.length) {\n                 this.queueTail = 0;\n             }\n+            monitorexit(this.queue);\n         }\n         return bufferWasEmpty;\n     }\n     \n     @Override\n     public int read() throws IOException {\n         synchronized (this.queue) {\n@@ -266,17 +274,20 @@\n                     if (++this.queueHead >= this.queue.length) {\n                         this.queueHead = 0;\n                     }\n                     --this.bytesAvailable;\n                     if (this.bytesAvailable == 0 && this.threaded) {\n                         this.queue.notify();\n                     }\n-                    return ch;\n+                    final int n = ch;\n+                    monitorexit(this.queue);\n+                    return n;\n                 }\n                 if (this.hasReachedEOF) {\n+                    monitorexit(this.queue);\n                     return -1;\n                 }\n                 if (this.threaded) {\n                     this.queue.notify();\n                     try {\n                         this.readIsWaiting = true;\n                         this.queue.wait();\n@@ -289,35 +300,43 @@\n                 }\n                 this.readIsWaiting = true;\n                 boolean mayBlock = true;\n                 do {\n                     int ch;\n                     try {\n                         if ((ch = this.read(mayBlock)) < 0 && ch != -2) {\n-                            return ch;\n+                            final int n2 = ch;\n+                            monitorexit(this.queue);\n+                            return n2;\n                         }\n                     }\n                     catch (final InterruptedIOException e2) {\n-                        synchronized (this.queue) {\n+                        final int[] queue;\n+                        monitorenter(queue = this.queue);\n+                        try {\n                             this.ioException = e2;\n                             this.queue.notifyAll();\n                             try {\n                                 this.queue.wait(100L);\n                             }\n                             catch (final InterruptedException ex) {}\n+                            monitorexit(queue);\n                         }\n+                        finally {}\n+                        monitorexit(this.queue);\n                         return -1;\n                     }\n                     try {\n                         if (ch != -2) {\n                             this.processChar(ch);\n                         }\n                     }\n                     catch (final InterruptedException e3) {\n                         if (this.isClosed) {\n+                            monitorexit(this.queue);\n                             return -1;\n                         }\n                     }\n                     mayBlock = false;\n                 } while (super.available() > 0 && this.bytesAvailable < this.queue.length - 1);\n                 this.readIsWaiting = false;\n             }\n@@ -337,14 +356,15 @@\n         if (length < 1) {\n             return 0;\n         }\n         synchronized (this.queue) {\n             if (length > this.bytesAvailable) {\n                 length = this.bytesAvailable;\n             }\n+            monitorexit(this.queue);\n         }\n         int ch;\n         if ((ch = this.read()) == -1) {\n             return -1;\n         }\n         final int off = offset;\n         do {\n@@ -358,30 +378,35 @@\n         return false;\n     }\n     \n     @Override\n     public int available() throws IOException {\n         synchronized (this.queue) {\n             if (this.threaded) {\n-                return this.bytesAvailable;\n-            }\n-            return this.bytesAvailable + super.available();\n+                final int bytesAvailable = this.bytesAvailable;\n+                monitorexit(this.queue);\n+                return bytesAvailable;\n+            }\n+            final int n = this.bytesAvailable + super.available();\n+            monitorexit(this.queue);\n+            return n;\n         }\n     }\n     \n     @Override\n     public void close() throws IOException {\n         super.close();\n         synchronized (this.queue) {\n             this.hasReachedEOF = true;\n             this.isClosed = true;\n             if (this.thread != null && this.thread.isAlive()) {\n                 this.thread.interrupt();\n             }\n             this.queue.notifyAll();\n+            monitorexit(this.queue);\n         }\n     }\n     \n     @Override\n     public void run() {\n         try {\n             while (!this.isClosed) {\n@@ -396,17 +421,19 @@\n                         this.ioException = e;\n                         this.queue.notifyAll();\n                         try {\n                             this.queue.wait(100L);\n                         }\n                         catch (final InterruptedException interrupted) {\n                             if (this.isClosed) {\n+                                monitorexit(this.queue);\n                                 break;\n                             }\n                         }\n+                        monitorexit(this.queue);\n                     }\n                 }\n                 catch (final RuntimeException re) {\n                     super.close();\n                     break;\n                 }\n                 boolean notify = false;\n@@ -422,18 +449,20 @@\n                     this.client.notifyInputListener();\n                 }\n             }\n         }\n         catch (final IOException ioe) {\n             synchronized (this.queue) {\n                 this.ioException = ioe;\n+                monitorexit(this.queue);\n             }\n             this.client.notifyInputListener();\n         }\n         synchronized (this.queue) {\n             this.isClosed = true;\n             this.hasReachedEOF = true;\n             this.queue.notify();\n+            monitorexit(this.queue);\n         }\n         this.threaded = false;\n     }\n }\n"}]}
