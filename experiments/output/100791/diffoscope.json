{"diffoscope-json-version": 1, "source1": "first/PackageObjectFactory.class", "source2": "second/PackageObjectFactory.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,25 +1,25 @@\n \n package com.puppycrawl.tools.checkstyle;\n \n-import java.util.HashMap;\n import java.util.Iterator;\n import java.util.stream.Stream;\n import java.util.List;\n import java.io.IOException;\n import java.util.function.Function;\n import java.util.function.Supplier;\n import java.util.HashSet;\n import com.puppycrawl.tools.checkstyle.utils.ModuleReflectionUtil;\n import java.util.stream.Collector;\n import java.util.stream.Collectors;\n import com.puppycrawl.tools.checkstyle.api.CheckstyleException;\n import java.util.Collections;\n import java.util.Collection;\n import java.util.LinkedHashSet;\n+import java.util.HashMap;\n import java.util.Set;\n import java.util.Map;\n \n public class PackageObjectFactory implements ModuleFactory\n {\n     public static final String BASE_PACKAGE = \"com.puppycrawl.tools.checkstyle\";\n     public static final String UNABLE_TO_INSTANTIATE_EXCEPTION_MESSAGE = \"PackageObjectFactory.unableToInstantiateExceptionMessage\";\n@@ -31,14 +31,19 @@\n     public static final String STRING_SEPARATOR = \", \";\n     private static final Map<String, String> NAME_TO_FULL_MODULE_NAME;\n     private final Set<String> packages;\n     private final ClassLoader moduleClassLoader;\n     private Map<String, Set<String>> thirdPartyNameToFullModuleNames;\n     private PackageObjectFactory.ModuleLoadOption moduleLoadOption;\n     \n+    static {\n+        NAME_TO_FULL_MODULE_NAME = new HashMap<String, String>();\n+        fillShortToFullModuleNamesMap();\n+    }\n+    \n     public PackageObjectFactory(final Set<String> packageNames, final ClassLoader moduleClassLoader) {\n         this(packageNames, moduleClassLoader, PackageObjectFactory.ModuleLoadOption.SEARCH_REGISTERED_PACKAGES);\n     }\n     \n     public PackageObjectFactory(final Set<String> packageNames, final ClassLoader moduleClassLoader, final PackageObjectFactory.ModuleLoadOption moduleLoadOption) {\n         if (moduleClassLoader == null) {\n             throw new IllegalArgumentException(\"moduleClassLoader must not be null\");\n@@ -75,28 +80,28 @@\n         }\n         if (instance == null && this.moduleLoadOption == PackageObjectFactory.ModuleLoadOption.TRY_IN_ALL_REGISTERED_PACKAGES) {\n             instance = this.createModuleByTryInEachPackage(name);\n         }\n         if (instance == null) {\n             String attemptedNames = null;\n             if (!name.contains(\".\")) {\n-                final String nameCheck = name + \"Check\";\n-                attemptedNames = joinPackageNamesWithClassName(name, this.packages) + \", \" + nameCheck + \", \" + joinPackageNamesWithClassName(nameCheck, this.packages);\n+                final String nameCheck = String.valueOf(name) + \"Check\";\n+                attemptedNames = String.valueOf(joinPackageNamesWithClassName(name, this.packages)) + \", \" + nameCheck + \", \" + joinPackageNamesWithClassName(nameCheck, this.packages);\n             }\n             final LocalizedMessage exceptionMessage = new LocalizedMessage(\"com.puppycrawl.tools.checkstyle.messages\", (Class)this.getClass(), \"PackageObjectFactory.unableToInstantiateExceptionMessage\", new Object[] { name, attemptedNames });\n             throw new CheckstyleException(exceptionMessage.getMessage());\n         }\n         return instance;\n     }\n     \n     private Object createFromStandardCheckSet(final String name) throws CheckstyleException {\n         final String fullModuleName = (String)PackageObjectFactory.NAME_TO_FULL_MODULE_NAME.get(name);\n         Object instance = null;\n         if (fullModuleName == null) {\n-            final String fullCheckModuleName = (String)PackageObjectFactory.NAME_TO_FULL_MODULE_NAME.get(name + \"Check\");\n+            final String fullCheckModuleName = (String)PackageObjectFactory.NAME_TO_FULL_MODULE_NAME.get(String.valueOf(name) + \"Check\");\n             if (fullCheckModuleName != null) {\n                 instance = this.createObject(fullCheckModuleName);\n             }\n         }\n         else {\n             instance = this.createObject(fullModuleName);\n         }\n@@ -104,15 +109,15 @@\n     }\n     \n     private Object createObjectFromClassPath(final String name) throws CheckstyleException {\n         this.thirdPartyNameToFullModuleNames = lazyLoad(this.thirdPartyNameToFullModuleNames, () -> this.generateThirdPartyNameToFullModuleName(this.moduleClassLoader));\n         final Set<String> fullModuleNames = (Set<String>)this.thirdPartyNameToFullModuleNames.get(name);\n         Object instance = null;\n         if (fullModuleNames == null) {\n-            final Set<String> fullCheckModuleNames = (Set<String>)this.thirdPartyNameToFullModuleNames.get(name + \"Check\");\n+            final Set<String> fullCheckModuleNames = (Set<String>)this.thirdPartyNameToFullModuleNames.get(String.valueOf(name) + \"Check\");\n             if (fullCheckModuleNames != null) {\n                 instance = this.createObjectFromFullModuleNames(name, fullCheckModuleNames);\n             }\n         }\n         else {\n             instance = this.createObjectFromFullModuleNames(name, fullModuleNames);\n         }\n@@ -137,19 +142,19 @@\n         catch (final IOException ignore) {\n             returnValue = Collections.emptyMap();\n         }\n         return returnValue;\n     }\n     \n     public static String getShortFromFullModuleNames(final String fullName) {\n-        return PackageObjectFactory.NAME_TO_FULL_MODULE_NAME.entrySet().stream().filter(entry -> ((String)entry.getValue()).equals(fullName)).map((Function<? super Object, ? extends String>)Map.Entry::getKey).findFirst().orElse(fullName);\n+        return PackageObjectFactory.NAME_TO_FULL_MODULE_NAME.entrySet().stream().filter(entry -> ((String)entry.getValue()).equals(anObject)).map((Function<? super Object, ? extends String>)Map.Entry::getKey).findFirst().orElse(fullName);\n     }\n     \n     private static String joinPackageNamesWithClassName(final String className, final Set<String> packages) {\n-        return packages.stream().collect((Collector<? super Object, ?, String>)Collectors.joining(\".\" + className + \", \", (CharSequence)\"\", \".\" + className));\n+        return packages.stream().collect((Collector<? super Object, ?, String>)Collectors.joining(\".\" + className + \", \", \"\", \".\" + className));\n     }\n     \n     private Object createObject(final String className) throws CheckstyleException {\n         Class<?> clazz = null;\n         try {\n             clazz = Class.forName(className, true, this.moduleClassLoader);\n         }\n@@ -163,15 +168,15 @@\n                 throw new CheckstyleException(\"Unable to instantiate \" + className, (Throwable)ex);\n             }\n         }\n         return instance;\n     }\n     \n     private Object createModuleByTryInEachPackage(final String name) throws CheckstyleException {\n-        final List<String> possibleNames = (List<String>)this.packages.stream().map(packageName -> packageName + \".\" + name).flatMap(className -> Stream.of(new String[] { className, className + \"Check\" })).collect((Collector<? super Object, ?, List<String>>)Collectors.toList());\n+        final List<String> possibleNames = (List<String>)this.packages.stream().map(packageName -> String.valueOf(packageName) + \".\" + str).flatMap(className -> Stream.of(new String[] { className, String.valueOf(className) + \"Check\" })).collect((Collector<? super Object, ?, List<String>>)Collectors.toList());\n         Object instance = null;\n         for (final String possibleName : possibleNames) {\n             instance = this.createObject(possibleName);\n             if (instance != null) {\n                 break;\n             }\n         }\n@@ -457,13 +462,8 @@\n         PackageObjectFactory.NAME_TO_FULL_MODULE_NAME.put(\"SuppressWithNearbyTextFilter\", \"com.puppycrawl.tools.checkstyle.filters.SuppressWithNearbyTextFilter\");\n     }\n     \n     private static void fillModulesFromCheckstylePackage() {\n         PackageObjectFactory.NAME_TO_FULL_MODULE_NAME.put(\"Checker\", \"com.puppycrawl.tools.checkstyle.Checker\");\n         PackageObjectFactory.NAME_TO_FULL_MODULE_NAME.put(\"TreeWalker\", \"com.puppycrawl.tools.checkstyle.TreeWalker\");\n     }\n-    \n-    static {\n-        NAME_TO_FULL_MODULE_NAME = new HashMap<String, String>();\n-        fillShortToFullModuleNamesMap();\n-    }\n }\n"}]}
