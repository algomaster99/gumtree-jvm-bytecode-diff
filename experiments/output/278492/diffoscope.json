{"diffoscope-json-version": 1, "source1": "first/Expander.class", "source2": "second/Expander.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,15 +1,15 @@\n \n package org.apache.commons.compress.archivers.examples;\n \n+import java.util.Iterator;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import java.util.Enumeration;\n import org.apache.commons.compress.utils.IOUtils;\n import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n-import java.util.Enumeration;\n-import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n-import java.util.Iterator;\n import org.apache.commons.compress.archivers.zip.ZipFile;\n import org.apache.commons.compress.archivers.tar.TarFile;\n import java.nio.channels.ReadableByteChannel;\n import java.nio.channels.Channels;\n import java.nio.channels.SeekableByteChannel;\n import java.nio.channels.FileChannel;\n import java.nio.file.StandardOpenOption;\n@@ -29,187 +29,185 @@\n import java.nio.file.LinkOption;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n \n public class Expander\n {\n-    private void expand(final Expander.ArchiveEntrySupplier supplier, final Expander.EntryWriter writer, final Path targetDirectory) throws IOException {\n-        final boolean nullTarget = targetDirectory == null;\n-        final Path targetDirPath = nullTarget ? null : targetDirectory.normalize();\n-        for (ArchiveEntry nextEntry = supplier.getNextReadableEntry(); nextEntry != null; nextEntry = supplier.getNextReadableEntry()) {\n-            final Path targetPath = nullTarget ? null : targetDirectory.resolve(nextEntry.getName());\n-            if (!nullTarget && !targetPath.normalize().startsWith(targetDirPath) && !Files.isSameFile(targetDirectory, targetPath)) {\n-                throw new IOException(\"Expanding \" + nextEntry.getName() + \" would create file outside of \" + targetDirectory);\n-            }\n-            if (nextEntry.isDirectory()) {\n-                if (!nullTarget && !Files.isDirectory(targetPath, new LinkOption[0]) && Files.createDirectories(targetPath, (FileAttribute<?>[])new FileAttribute[0]) == null) {\n-                    throw new IOException(\"Failed to create directory \" + targetPath);\n+    private void expand(final Expander.ArchiveEntrySupplier archiveEntrySupplier, final Expander.EntryWriter entryWriter, final Path path) throws IOException {\n+        final boolean b = path == null;\n+        final Path path2 = b ? null : path.normalize();\n+        for (ArchiveEntry archiveEntry = archiveEntrySupplier.getNextReadableEntry(); archiveEntry != null; archiveEntry = archiveEntrySupplier.getNextReadableEntry()) {\n+            final Path path3 = b ? null : path.resolve(archiveEntry.getName());\n+            if (!b && !path3.normalize().startsWith(path2) && !Files.isSameFile(path, path3)) {\n+                throw new IOException(\"Expanding \" + archiveEntry.getName() + \" would create file outside of \" + path);\n+            }\n+            if (archiveEntry.isDirectory()) {\n+                if (!b && !Files.isDirectory(path3, new LinkOption[0]) && Files.createDirectories(path3, (FileAttribute<?>[])new FileAttribute[0]) == null) {\n+                    throw new IOException(\"Failed to create directory \" + path3);\n                 }\n             }\n             else {\n-                final Path parent = nullTarget ? null : targetPath.getParent();\n-                if (!nullTarget && !Files.isDirectory(parent, new LinkOption[0]) && Files.createDirectories(parent, (FileAttribute<?>[])new FileAttribute[0]) == null) {\n-                    throw new IOException(\"Failed to create directory \" + parent);\n+                final Path obj = b ? null : path3.getParent();\n+                if (!b && !Files.isDirectory(obj, new LinkOption[0]) && Files.createDirectories(obj, (FileAttribute<?>[])new FileAttribute[0]) == null) {\n+                    throw new IOException(\"Failed to create directory \" + obj);\n                 }\n-                if (nullTarget) {\n-                    writer.writeEntryDataTo(nextEntry, (OutputStream)null);\n+                if (b) {\n+                    entryWriter.writeEntryDataTo(archiveEntry, (OutputStream)null);\n                 }\n                 else {\n-                    try (final OutputStream outputStream = Files.newOutputStream(targetPath, new OpenOption[0])) {\n-                        writer.writeEntryDataTo(nextEntry, outputStream);\n+                    try (final OutputStream outputStream = Files.newOutputStream(path3, new OpenOption[0])) {\n+                        entryWriter.writeEntryDataTo(archiveEntry, outputStream);\n                     }\n                 }\n             }\n         }\n     }\n     \n-    public void expand(final ArchiveInputStream archive, final File targetDirectory) throws IOException {\n-        this.expand(archive, this.toPath(targetDirectory));\n+    public void expand(final ArchiveInputStream archiveInputStream, final File file) throws IOException {\n+        this.expand(archiveInputStream, this.toPath(file));\n     }\n     \n-    public void expand(final ArchiveInputStream archive, final Path targetDirectory) throws IOException {\n+    public void expand(final ArchiveInputStream archiveInputStream, final Path path) throws IOException {\n         this.expand(() -> {\n-            ArchiveEntry next;\n-            for (next = archive.getNextEntry(); next != null && !archive.canReadEntryData(next); next = archive.getNextEntry()) {}\n-            return next;\n-        }, (entry, out) -> IOUtils.copy((InputStream)archive, out), targetDirectory);\n+            ArchiveEntry archiveEntry;\n+            for (archiveEntry = archiveInputStream.getNextEntry(); archiveEntry != null && !archiveInputStream.canReadEntryData(archiveEntry); archiveEntry = archiveInputStream.getNextEntry()) {}\n+            return archiveEntry;\n+        }, (archiveEntry, outputStream) -> IOUtils.copy((InputStream)archiveInputStream, outputStream), path);\n     }\n     \n-    public void expand(final File archive, final File targetDirectory) throws IOException, ArchiveException {\n-        this.expand(archive.toPath(), this.toPath(targetDirectory));\n+    public void expand(final File file, final File file2) throws IOException, ArchiveException {\n+        this.expand(file.toPath(), this.toPath(file2));\n     }\n     \n     @Deprecated\n-    public void expand(final InputStream archive, final File targetDirectory) throws IOException, ArchiveException {\n-        this.expand(archive, targetDirectory, CloseableConsumer.NULL_CONSUMER);\n+    public void expand(final InputStream inputStream, final File file) throws IOException, ArchiveException {\n+        this.expand(inputStream, file, CloseableConsumer.NULL_CONSUMER);\n     }\n     \n-    public void expand(final InputStream archive, final File targetDirectory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        try (final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer)) {\n-            this.expand((ArchiveInputStream)c.track((Closeable)ArchiveStreamFactory.DEFAULT.createArchiveInputStream(archive)), targetDirectory);\n+    public void expand(final InputStream inputStream, final File file, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n+        try (final CloseableConsumerAdapter closeableConsumerAdapter = new CloseableConsumerAdapter(closeableConsumer)) {\n+            this.expand((ArchiveInputStream)closeableConsumerAdapter.track((Closeable)ArchiveStreamFactory.DEFAULT.createArchiveInputStream(inputStream)), file);\n         }\n     }\n     \n-    public void expand(final Path archive, final Path targetDirectory) throws IOException, ArchiveException {\n-        String format = null;\n-        try (final InputStream inputStream = new BufferedInputStream(Files.newInputStream(archive, new OpenOption[0]))) {\n-            format = ArchiveStreamFactory.detect(inputStream);\n+    public void expand(final Path path, final Path path2) throws IOException, ArchiveException {\n+        String detect;\n+        try (final BufferedInputStream bufferedInputStream = new BufferedInputStream(Files.newInputStream(path, new OpenOption[0]))) {\n+            detect = ArchiveStreamFactory.detect((InputStream)bufferedInputStream);\n         }\n-        this.expand(format, archive, targetDirectory);\n+        this.expand(detect, path, path2);\n     }\n     \n-    public void expand(final SevenZFile archive, final File targetDirectory) throws IOException {\n-        this.expand(archive, this.toPath(targetDirectory));\n+    public void expand(final SevenZFile sevenZFile, final File file) throws IOException {\n+        this.expand(sevenZFile, this.toPath(file));\n     }\n     \n-    public void expand(final SevenZFile archive, final Path targetDirectory) throws IOException {\n-        Objects.requireNonNull(archive);\n-        this.expand(archive::getNextEntry, (entry, out) -> {\n-            final byte[] buffer = new byte[8192];\n-            int n;\n-            while (-1 != (n = archive.read(buffer))) {\n-                if (out != null) {\n-                    out.write(buffer, 0, n);\n+    public void expand(final SevenZFile obj, final Path path) throws IOException {\n+        Objects.requireNonNull(obj);\n+        this.expand(obj::getNextEntry, (archiveEntry, outputStream) -> {\n+            final byte[] b = new byte[8192];\n+            int read;\n+            while (-1 != (read = obj.read(b))) {\n+                if (outputStream != null) {\n+                    outputStream.write(b, 0, read);\n                 }\n             }\n-        }, targetDirectory);\n+        }, path);\n     }\n     \n-    public void expand(final String format, final File archive, final File targetDirectory) throws IOException, ArchiveException {\n-        this.expand(format, archive.toPath(), this.toPath(targetDirectory));\n+    public void expand(final String s, final File file, final File file2) throws IOException, ArchiveException {\n+        this.expand(s, file.toPath(), this.toPath(file2));\n     }\n     \n     @Deprecated\n-    public void expand(final String format, final InputStream archive, final File targetDirectory) throws IOException, ArchiveException {\n-        this.expand(format, archive, targetDirectory, CloseableConsumer.NULL_CONSUMER);\n+    public void expand(final String s, final InputStream inputStream, final File file) throws IOException, ArchiveException {\n+        this.expand(s, inputStream, file, CloseableConsumer.NULL_CONSUMER);\n     }\n     \n-    public void expand(final String format, final InputStream archive, final File targetDirectory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        this.expand(format, archive, this.toPath(targetDirectory), closeableConsumer);\n+    public void expand(final String s, final InputStream inputStream, final File file, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n+        this.expand(s, inputStream, this.toPath(file), closeableConsumer);\n     }\n     \n-    public void expand(final String format, final InputStream archive, final Path targetDirectory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        try (final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer)) {\n-            this.expand((ArchiveInputStream)c.track((Closeable)ArchiveStreamFactory.DEFAULT.createArchiveInputStream(format, archive)), targetDirectory);\n+    public void expand(final String s, final InputStream inputStream, final Path path, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n+        try (final CloseableConsumerAdapter closeableConsumerAdapter = new CloseableConsumerAdapter(closeableConsumer)) {\n+            this.expand((ArchiveInputStream)closeableConsumerAdapter.track((Closeable)ArchiveStreamFactory.DEFAULT.createArchiveInputStream(s, inputStream)), path);\n         }\n     }\n     \n-    public void expand(final String format, final Path archive, final Path targetDirectory) throws IOException, ArchiveException {\n-        if (this.prefersSeekableByteChannel(format)) {\n-            try (final SeekableByteChannel channel = FileChannel.open(archive, StandardOpenOption.READ)) {\n-                this.expand(format, channel, targetDirectory, CloseableConsumer.CLOSING_CONSUMER);\n+    public void expand(final String s, final Path path, final Path path2) throws IOException, ArchiveException {\n+        if (this.prefersSeekableByteChannel(s)) {\n+            try (final FileChannel open = FileChannel.open(path, StandardOpenOption.READ)) {\n+                this.expand(s, open, path2, CloseableConsumer.CLOSING_CONSUMER);\n             }\n             return;\n         }\n-        try (final InputStream inputStream = new BufferedInputStream(Files.newInputStream(archive, new OpenOption[0]))) {\n-            this.expand(format, inputStream, targetDirectory, CloseableConsumer.CLOSING_CONSUMER);\n+        try (final BufferedInputStream bufferedInputStream = new BufferedInputStream(Files.newInputStream(path, new OpenOption[0]))) {\n+            this.expand(s, bufferedInputStream, path2, CloseableConsumer.CLOSING_CONSUMER);\n         }\n     }\n     \n     @Deprecated\n-    public void expand(final String format, final SeekableByteChannel archive, final File targetDirectory) throws IOException, ArchiveException {\n-        this.expand(format, archive, targetDirectory, CloseableConsumer.NULL_CONSUMER);\n+    public void expand(final String s, final SeekableByteChannel seekableByteChannel, final File file) throws IOException, ArchiveException {\n+        this.expand(s, seekableByteChannel, file, CloseableConsumer.NULL_CONSUMER);\n     }\n     \n-    public void expand(final String format, final SeekableByteChannel archive, final File targetDirectory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        this.expand(format, archive, this.toPath(targetDirectory), closeableConsumer);\n+    public void expand(final String s, final SeekableByteChannel seekableByteChannel, final File file, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n+        this.expand(s, seekableByteChannel, this.toPath(file), closeableConsumer);\n     }\n     \n-    public void expand(final String format, final SeekableByteChannel archive, final Path targetDirectory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        try (final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer)) {\n-            if (!this.prefersSeekableByteChannel(format)) {\n-                this.expand(format, (InputStream)c.track((Closeable)Channels.newInputStream(archive)), targetDirectory, CloseableConsumer.NULL_CONSUMER);\n+    public void expand(final String s, final SeekableByteChannel ch, final Path path, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n+        try (final CloseableConsumerAdapter closeableConsumerAdapter = new CloseableConsumerAdapter(closeableConsumer)) {\n+            if (!this.prefersSeekableByteChannel(s)) {\n+                this.expand(s, (InputStream)closeableConsumerAdapter.track((Closeable)Channels.newInputStream(ch)), path, CloseableConsumer.NULL_CONSUMER);\n             }\n-            else if (\"tar\".equalsIgnoreCase(format)) {\n-                this.expand((TarFile)c.track((Closeable)new TarFile(archive)), targetDirectory);\n+            else if (\"tar\".equalsIgnoreCase(s)) {\n+                this.expand((TarFile)closeableConsumerAdapter.track((Closeable)new TarFile(ch)), path);\n             }\n-            else if (\"zip\".equalsIgnoreCase(format)) {\n-                this.expand((ZipFile)c.track((Closeable)new ZipFile(archive)), targetDirectory);\n+            else if (\"zip\".equalsIgnoreCase(s)) {\n+                this.expand((ZipFile)closeableConsumerAdapter.track((Closeable)new ZipFile(ch)), path);\n             }\n             else {\n-                if (!\"7z\".equalsIgnoreCase(format)) {\n-                    throw new ArchiveException(\"Don't know how to handle format \" + format);\n+                if (!\"7z\".equalsIgnoreCase(s)) {\n+                    throw new ArchiveException(\"Don't know how to handle format \" + s);\n                 }\n-                this.expand((SevenZFile)c.track((Closeable)new SevenZFile(archive)), targetDirectory);\n+                this.expand((SevenZFile)closeableConsumerAdapter.track((Closeable)new SevenZFile(ch)), path);\n             }\n         }\n     }\n     \n-    public void expand(final TarFile archive, final File targetDirectory) throws IOException {\n-        this.expand(archive, this.toPath(targetDirectory));\n+    public void expand(final TarFile tarFile, final File file) throws IOException {\n+        this.expand(tarFile, this.toPath(file));\n     }\n     \n-    public void expand(final TarFile archive, final Path targetDirectory) throws IOException {\n-        final Iterator<TarArchiveEntry> entryIterator = archive.getEntries().iterator();\n-        this.expand(() -> entryIterator.hasNext() ? ((ArchiveEntry)entryIterator.next()) : null, (entry, out) -> {\n-            try (final InputStream in = archive.getInputStream((TarArchiveEntry)entry)) {\n-                IOUtils.copy(in, out);\n+    public void expand(final TarFile tarFile, final Path path) throws IOException {\n+        this.expand(() -> iterator.hasNext() ? ((ArchiveEntry)iterator.next()) : null, (archiveEntry, outputStream) -> {\n+            try (final InputStream inputStream = tarFile.getInputStream((TarArchiveEntry)archiveEntry)) {\n+                IOUtils.copy(inputStream, outputStream);\n             }\n-        }, targetDirectory);\n+        }, path);\n     }\n     \n-    public void expand(final ZipFile archive, final File targetDirectory) throws IOException {\n-        this.expand(archive, this.toPath(targetDirectory));\n+    public void expand(final ZipFile zipFile, final File file) throws IOException {\n+        this.expand(zipFile, this.toPath(file));\n     }\n     \n-    public void expand(final ZipFile archive, final Path targetDirectory) throws IOException {\n-        final Enumeration<ZipArchiveEntry> entries = archive.getEntries();\n+    public void expand(final ZipFile zipFile, final Path path) throws IOException {\n         this.expand(() -> {\n-            ZipArchiveEntry next;\n-            for (next = (entries.hasMoreElements() ? ((ZipArchiveEntry)entries.nextElement()) : null); next != null && !archive.canReadEntryData(next); next = (entries.hasMoreElements() ? ((ZipArchiveEntry)entries.nextElement()) : null)) {}\n-            return (ArchiveEntry)next;\n-        }, (entry, out) -> {\n-            try (final InputStream in = archive.getInputStream((ZipArchiveEntry)entry)) {\n-                IOUtils.copy(in, out);\n+            ZipArchiveEntry zipArchiveEntry;\n+            for (zipArchiveEntry = (enumeration.hasMoreElements() ? ((ZipArchiveEntry)enumeration.nextElement()) : null); zipArchiveEntry != null && !zipFile.canReadEntryData(zipArchiveEntry); zipArchiveEntry = (enumeration.hasMoreElements() ? ((ZipArchiveEntry)enumeration.nextElement()) : null)) {}\n+            return (ArchiveEntry)zipArchiveEntry;\n+        }, (archiveEntry, outputStream) -> {\n+            try (final InputStream inputStream = zipFile.getInputStream((ZipArchiveEntry)archiveEntry)) {\n+                IOUtils.copy(inputStream, outputStream);\n             }\n-        }, targetDirectory);\n+        }, path);\n     }\n     \n-    private boolean prefersSeekableByteChannel(final String format) {\n-        return \"tar\".equalsIgnoreCase(format) || \"zip\".equalsIgnoreCase(format) || \"7z\".equalsIgnoreCase(format);\n+    private boolean prefersSeekableByteChannel(final String anotherString) {\n+        return \"tar\".equalsIgnoreCase(anotherString) || \"zip\".equalsIgnoreCase(anotherString) || \"7z\".equalsIgnoreCase(anotherString);\n     }\n     \n-    private Path toPath(final File targetDirectory) {\n-        return (targetDirectory != null) ? targetDirectory.toPath() : null;\n+    private Path toPath(final File file) {\n+        return (file != null) ? file.toPath() : null;\n     }\n }\n"}]}
