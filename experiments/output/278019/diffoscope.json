{"diffoscope-json-version": 1, "source1": "first/BandSet$BandData.class", "source2": "second/BandSet$BandData.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -22,56 +22,57 @@\n         this.smallest = Integer.MAX_VALUE;\n         this.largest = Integer.MIN_VALUE;\n         this.deltaIsAscending = 0;\n         this.smallDeltaCount = 0;\n         this.averageAbsoluteDelta = 0.0;\n         this.averageAbsoluteValue = 0.0;\n         this.band = band;\n-        final Integer one = Integer.valueOf(1);\n+        final Integer value = Integer.valueOf(1);\n         for (int i = 0; i < band.length; ++i) {\n             if (band[i] < this.smallest) {\n                 this.smallest = band[i];\n             }\n             if (band[i] > this.largest) {\n                 this.largest = band[i];\n             }\n             if (i != 0) {\n-                final int delta = band[i] - band[i - 1];\n-                if (delta < this.smallestDelta) {\n-                    this.smallestDelta = delta;\n+                final int n = band[i] - band[i - 1];\n+                if (n < this.smallestDelta) {\n+                    this.smallestDelta = n;\n                 }\n-                if (delta > this.largestDelta) {\n-                    this.largestDelta = delta;\n+                if (n > this.largestDelta) {\n+                    this.largestDelta = n;\n                 }\n-                if (delta >= 0) {\n+                if (n >= 0) {\n                     ++this.deltaIsAscending;\n                 }\n-                this.averageAbsoluteDelta += Math.abs(delta) / (double)(band.length - 1);\n-                if (Math.abs(delta) < 256) {\n+                this.averageAbsoluteDelta += Math.abs(n) / (double)(band.length - 1);\n+                if (Math.abs(n) < 256) {\n                     ++this.smallDeltaCount;\n                 }\n             }\n             else {\n                 this.smallestDelta = band[0];\n                 this.largestDelta = band[0];\n             }\n             this.averageAbsoluteValue += Math.abs(band[i]) / (double)band.length;\n             if (this$0.effort > 3) {\n                 if (this.distinctValues == null) {\n                     this.distinctValues = new HashMap();\n                 }\n-                final Integer value = Integer.valueOf(band[i]);\n-                Integer count = Integer.valueOf(this.distinctValues.get((Object)value));\n-                if (count == null) {\n-                    count = one;\n+                final Integer value2 = Integer.valueOf(band[i]);\n+                final Integer n2 = Integer.valueOf(this.distinctValues.get((Object)value2));\n+                Integer value3;\n+                if (n2 == null) {\n+                    value3 = value;\n                 }\n                 else {\n-                    count = Integer.valueOf((int)count + 1);\n+                    value3 = Integer.valueOf((int)n2 + 1);\n                 }\n-                this.distinctValues.put(value, count);\n+                this.distinctValues.put(value2, value3);\n             }\n         }\n     }\n     \n     public boolean mainlySmallDeltas() {\n         return this.smallDeltaCount / (float)this.band.length > 0.7f;\n     }\n"}]}
