{"diffoscope-json-version": 1, "source1": "first/JavaVersion.class", "source2": "second/JavaVersion.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -25,118 +25,116 @@\n     JAVA_15(15.0f, \"15\"), \n     JAVA_16(16.0f, \"16\"), \n     JAVA_RECENT(maxVersion(), Float.toString(maxVersion()));\n     \n     private final float value;\n     private final String name;\n     \n-    private JavaVersion(final float value, final String name) {\n+    private JavaVersion(final float value, final String name2) {\n         this.value = value;\n-        this.name = name;\n+        this.name = name2;\n     }\n     \n-    public boolean atLeast(final JavaVersion requiredVersion) {\n-        return this.value >= requiredVersion.value;\n+    public boolean atLeast(final JavaVersion javaVersion) {\n+        return this.value >= javaVersion.value;\n     }\n     \n-    public boolean atMost(final JavaVersion requiredVersion) {\n-        return this.value <= requiredVersion.value;\n+    public boolean atMost(final JavaVersion javaVersion) {\n+        return this.value <= javaVersion.value;\n     }\n     \n-    static JavaVersion getJavaVersion(final String nom) {\n-        return get(nom);\n+    static JavaVersion getJavaVersion(final String s) {\n+        return get(s);\n     }\n     \n-    static JavaVersion get(final String nom) {\n-        if (nom == null) {\n+    static JavaVersion get(final String anObject) {\n+        if (anObject == null) {\n             return null;\n         }\n-        if (\"0.9\".equals(nom)) {\n+        if (\"0.9\".equals(anObject)) {\n             return JavaVersion.JAVA_0_9;\n         }\n-        if (\"1.1\".equals(nom)) {\n+        if (\"1.1\".equals(anObject)) {\n             return JavaVersion.JAVA_1_1;\n         }\n-        if (\"1.2\".equals(nom)) {\n+        if (\"1.2\".equals(anObject)) {\n             return JavaVersion.JAVA_1_2;\n         }\n-        if (\"1.3\".equals(nom)) {\n+        if (\"1.3\".equals(anObject)) {\n             return JavaVersion.JAVA_1_3;\n         }\n-        if (\"1.4\".equals(nom)) {\n+        if (\"1.4\".equals(anObject)) {\n             return JavaVersion.JAVA_1_4;\n         }\n-        if (\"1.5\".equals(nom)) {\n+        if (\"1.5\".equals(anObject)) {\n             return JavaVersion.JAVA_1_5;\n         }\n-        if (\"1.6\".equals(nom)) {\n+        if (\"1.6\".equals(anObject)) {\n             return JavaVersion.JAVA_1_6;\n         }\n-        if (\"1.7\".equals(nom)) {\n+        if (\"1.7\".equals(anObject)) {\n             return JavaVersion.JAVA_1_7;\n         }\n-        if (\"1.8\".equals(nom)) {\n+        if (\"1.8\".equals(anObject)) {\n             return JavaVersion.JAVA_1_8;\n         }\n-        if (\"9\".equals(nom)) {\n+        if (\"9\".equals(anObject)) {\n             return JavaVersion.JAVA_9;\n         }\n-        if (\"10\".equals(nom)) {\n+        if (\"10\".equals(anObject)) {\n             return JavaVersion.JAVA_10;\n         }\n-        if (\"11\".equals(nom)) {\n+        if (\"11\".equals(anObject)) {\n             return JavaVersion.JAVA_11;\n         }\n-        if (\"12\".equals(nom)) {\n+        if (\"12\".equals(anObject)) {\n             return JavaVersion.JAVA_12;\n         }\n-        if (\"13\".equals(nom)) {\n+        if (\"13\".equals(anObject)) {\n             return JavaVersion.JAVA_13;\n         }\n-        if (\"14\".equals(nom)) {\n+        if (\"14\".equals(anObject)) {\n             return JavaVersion.JAVA_14;\n         }\n-        if (\"15\".equals(nom)) {\n+        if (\"15\".equals(anObject)) {\n             return JavaVersion.JAVA_15;\n         }\n-        if (\"16\".equals(nom)) {\n+        if (\"16\".equals(anObject)) {\n             return JavaVersion.JAVA_16;\n         }\n-        final float v = toFloatVersion(nom);\n-        if (v - 1.0 < 1.0) {\n-            final int firstComma = Math.max(nom.indexOf(46), nom.indexOf(44));\n-            final int end = Math.max(nom.length(), nom.indexOf(44, firstComma));\n-            if (Float.parseFloat(nom.substring(firstComma + 1, end)) > 0.9f) {\n+        final float floatVersion = toFloatVersion(anObject);\n+        if (floatVersion - 1.0 < 1.0) {\n+            final int max = Math.max(anObject.indexOf(46), anObject.indexOf(44));\n+            if (Float.parseFloat(anObject.substring(max + 1, Math.max(anObject.length(), anObject.indexOf(44, max)))) > 0.9f) {\n                 return JavaVersion.JAVA_RECENT;\n             }\n         }\n-        else if (v > 10.0f) {\n+        else if (floatVersion > 10.0f) {\n             return JavaVersion.JAVA_RECENT;\n         }\n         return null;\n     }\n     \n     @Override\n     public String toString() {\n         return this.name;\n     }\n     \n     private static float maxVersion() {\n-        final float v = toFloatVersion(System.getProperty(\"java.specification.version\", \"99.0\"));\n-        if (v > 0.0f) {\n-            return v;\n+        final float floatVersion = toFloatVersion(System.getProperty(\"java.specification.version\", \"99.0\"));\n+        if (floatVersion > 0.0f) {\n+            return floatVersion;\n         }\n         return 99.0f;\n     }\n     \n-    private static float toFloatVersion(final String value) {\n-        final int defaultReturnValue = -1;\n-        if (!value.contains(\".\")) {\n-            return NumberUtils.toFloat(value, -1.0f);\n-        }\n-        final String[] toParse = value.split(\"\\\\.\");\n-        if (toParse.length >= 2) {\n-            return NumberUtils.toFloat(toParse[0] + '.' + toParse[1], -1.0f);\n+    private static float toFloatVersion(final String s) {\n+        if (!s.contains(\".\")) {\n+            return NumberUtils.toFloat(s, -1.0f);\n+        }\n+        final String[] split = s.split(\"\\\\.\");\n+        if (split.length >= 2) {\n+            return NumberUtils.toFloat(split[0] + '.' + split[1], -1.0f);\n         }\n         return -1.0f;\n     }\n }\n"}]}
