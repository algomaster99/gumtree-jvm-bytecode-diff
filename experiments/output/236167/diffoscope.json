{"diffoscope-json-version": 1, "source1": "first/OrFileFilter.class", "source2": "second/OrFileFilter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,77 +14,79 @@\n     private static final long serialVersionUID = 5767770777065432721L;\n     private final List<IOFileFilter> fileFilters;\n     \n     public OrFileFilter() {\n         this.fileFilters = new ArrayList<IOFileFilter>();\n     }\n     \n-    public OrFileFilter(final List<IOFileFilter> fileFilters) {\n-        if (fileFilters == null) {\n+    public OrFileFilter(final List<IOFileFilter> c) {\n+        if (c == null) {\n             this.fileFilters = new ArrayList<IOFileFilter>();\n         }\n         else {\n-            this.fileFilters = new ArrayList<IOFileFilter>(fileFilters);\n+            this.fileFilters = new ArrayList<IOFileFilter>(c);\n         }\n     }\n     \n-    public OrFileFilter(final IOFileFilter filter1, final IOFileFilter filter2) {\n-        if (filter1 == null || filter2 == null) {\n+    public OrFileFilter(final IOFileFilter ioFileFilter, final IOFileFilter ioFileFilter2) {\n+        if (ioFileFilter == null || ioFileFilter2 == null) {\n             throw new IllegalArgumentException(\"The filters must not be null\");\n         }\n         this.fileFilters = new ArrayList<IOFileFilter>(2);\n-        this.addFileFilter(filter1);\n-        this.addFileFilter(filter2);\n+        this.addFileFilter(ioFileFilter);\n+        this.addFileFilter(ioFileFilter2);\n     }\n     \n     public void addFileFilter(final IOFileFilter ioFileFilter) {\n         this.fileFilters.add(ioFileFilter);\n     }\n     \n     public List<IOFileFilter> getFileFilters() {\n         return Collections.unmodifiableList((List<? extends IOFileFilter>)this.fileFilters);\n     }\n     \n     public boolean removeFileFilter(final IOFileFilter ioFileFilter) {\n         return this.fileFilters.remove(ioFileFilter);\n     }\n     \n-    public void setFileFilters(final List<IOFileFilter> fileFilters) {\n+    public void setFileFilters(final List<IOFileFilter> list) {\n         this.fileFilters.clear();\n-        this.fileFilters.addAll(fileFilters);\n+        this.fileFilters.addAll(list);\n     }\n     \n     public boolean accept(final File file) {\n-        for (final IOFileFilter fileFilter : this.fileFilters) {\n-            if (fileFilter.accept(file)) {\n+        final Iterator<IOFileFilter> iterator = this.fileFilters.iterator();\n+        while (iterator.hasNext()) {\n+            if (((IOFileFilter)iterator.next()).accept(file)) {\n                 return true;\n             }\n         }\n         return false;\n     }\n     \n-    public boolean accept(final File file, final String name) {\n-        for (final IOFileFilter fileFilter : this.fileFilters) {\n-            if (fileFilter.accept(file, name)) {\n+    public boolean accept(final File file, final String s) {\n+        final Iterator<IOFileFilter> iterator = this.fileFilters.iterator();\n+        while (iterator.hasNext()) {\n+            if (((IOFileFilter)iterator.next()).accept(file, s)) {\n                 return true;\n             }\n         }\n         return false;\n     }\n     \n     public String toString() {\n-        final StringBuilder buffer = new StringBuilder();\n-        buffer.append(super.toString());\n-        buffer.append(\"(\");\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(super.toString());\n+        sb.append(\"(\");\n         if (this.fileFilters != null) {\n             for (int i = 0; i < this.fileFilters.size(); ++i) {\n                 if (i > 0) {\n-                    buffer.append(\",\");\n+                    sb.append(\",\");\n                 }\n-                final Object filter = this.fileFilters.get(i);\n-                buffer.append((filter == null) ? \"null\" : filter.toString());\n+                final IOFileFilter value = this.fileFilters.get(i);\n+                sb.append((value == null) ? \"null\" : value.toString());\n             }\n         }\n-        buffer.append(\")\");\n-        return buffer.toString();\n+        sb.append(\")\");\n+        return sb.toString();\n     }\n }\n"}]}
