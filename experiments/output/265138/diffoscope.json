{"diffoscope-json-version": 1, "source1": "first/Pass3aVerifier.class", "source2": "second/Pass3aVerifier.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,226 +14,477 @@\n import org.apache.bcel.generic.RET;\n import org.apache.bcel.generic.ReturnInstruction;\n import org.apache.bcel.generic.BREAKPOINT;\n import org.apache.bcel.generic.IMPDEP2;\n import org.apache.bcel.generic.IMPDEP1;\n import org.apache.bcel.verifier.exc.StaticCodeInstructionConstraintException;\n import org.apache.bcel.classfile.Method;\n-import org.apache.bcel.classfile.JavaClass;\n import org.apache.bcel.verifier.exc.AssertionViolatedException;\n import org.apache.bcel.verifier.exc.StaticCodeConstraintException;\n import org.apache.bcel.classfile.ClassFormatException;\n+import org.apache.bcel.verifier.exc.ClassConstraintException;\n import org.apache.bcel.verifier.exc.InvalidMethodException;\n import org.apache.bcel.Repository;\n import org.apache.bcel.verifier.VerificationResult;\n-import org.apache.bcel.classfile.CodeException;\n-import org.apache.bcel.classfile.Attribute;\n-import org.apache.bcel.classfile.LineNumber;\n-import org.apache.bcel.classfile.LineNumberTable;\n-import org.apache.bcel.classfile.LocalVariableTable;\n-import org.apache.bcel.verifier.exc.ClassConstraintException;\n import org.apache.bcel.classfile.Code;\n import org.apache.bcel.generic.InstructionList;\n import org.apache.bcel.verifier.Verifier;\n import org.apache.bcel.verifier.PassVerifier;\n \n public final class Pass3aVerifier extends PassVerifier\n {\n     private final Verifier myOwner;\n     private final int methodNo;\n     private InstructionList instructionList;\n     private Code code;\n     \n-    private static boolean contains(final int[] ints, final int i) {\n-        for (final int k : ints) {\n-            if (k == i) {\n+    private static boolean contains(final int[] array, final int n) {\n+        for (int length = array.length, i = 0; i < length; ++i) {\n+            if (array[i] == n) {\n                 return true;\n             }\n         }\n         return false;\n     }\n     \n-    public Pass3aVerifier(final Verifier owner, final int methodNo) {\n-        this.myOwner = owner;\n+    public Pass3aVerifier(final Verifier myOwner, final int methodNo) {\n+        this.myOwner = myOwner;\n         this.methodNo = methodNo;\n     }\n     \n     private void delayedPass2Checks() {\n-        final int[] instructionPositions = this.instructionList.getInstructionPositions();\n-        final int codeLength = this.code.getCode().length;\n-        final LineNumberTable lnt = this.code.getLineNumberTable();\n-        if (lnt != null) {\n-            final LineNumber[] lineNumbers = lnt.getLineNumberTable();\n-            final IntList offsets = new IntList();\n-            final LineNumber[] array = lineNumbers;\n-            final int length = array.length;\n-            int i = 0;\n-        Label_0056:\n-            while (i < length) {\n-                final LineNumber lineNumber = array[i];\n-                for (final int instructionPosition : instructionPositions) {\n-                    final int offset = lineNumber.getStartPC();\n-                    if (instructionPosition == offset) {\n-                        if (offsets.contains(offset)) {\n-                            this.addMessage(\"LineNumberTable attribute '\" + this.code.getLineNumberTable() + \"' refers to the same code offset ('\" + offset + \"') more than once which is violating the semantics [but is sometimes produced by IBM's 'jikes' compiler].\");\n-                        }\n-                        else {\n-                            offsets.add(offset);\n-                        }\n-                        ++i;\n-                        continue Label_0056;\n-                    }\n-                }\n-                throw new ClassConstraintException(\"Code attribute '\" + this.tostring((Object)this.code) + \"' has a LineNumberTable attribute '\" + this.code.getLineNumberTable() + \"' referring to a code offset ('\" + lineNumber.getStartPC() + \"') that does not exist.\");\n-            }\n-        }\n-        final Attribute[] attributes;\n-        final Attribute[] atts = attributes = this.code.getAttributes();\n-        for (final Attribute att : attributes) {\n-            if (att instanceof LocalVariableTable) {\n-                ((LocalVariableTable)att).forEach(localVariable -> {\n-                    final int startpc2 = localVariable.getStartPC();\n-                    final int length5 = localVariable.getLength();\n-                    if (!contains(instructionPositions, startpc2)) {\n-                        new ClassConstraintException(\"Code attribute '\" + this.tostring((Object)this.code) + \"' has a LocalVariableTable attribute '\" + this.code.getLocalVariableTable() + \"' referring to a code offset ('\" + startpc2 + \"') that does not exist.\");\n-                        throw;\n-                    }\n-                    else if (!contains(instructionPositions, startpc2 + length5) && startpc2 + length5 != codeLength) {\n-                        new ClassConstraintException(\"Code attribute '\" + this.tostring((Object)this.code) + \"' has a LocalVariableTable attribute '\" + this.code.getLocalVariableTable() + \"' referring to a code offset start_pc+length ('\" + (startpc2 + length5) + \"') that does not exist.\");\n-                        throw;\n-                    }\n-                    else {\n-                        return;\n-                    }\n-                });\n-            }\n-        }\n-        final CodeException[] exceptionTable2;\n-        final CodeException[] exceptionTable = exceptionTable2 = this.code.getExceptionTable();\n-        for (final CodeException element : exceptionTable2) {\n-            final int startpc = element.getStartPC();\n-            final int endpc = element.getEndPC();\n-            final int handlerpc = element.getHandlerPC();\n-            if (startpc >= endpc) {\n-                throw new ClassConstraintException(\"Code attribute '\" + this.tostring((Object)this.code) + \"' has an exception_table entry '\" + element + \"' that has its start_pc ('\" + startpc + \"') not smaller than its end_pc ('\" + endpc + \"').\");\n-            }\n-            if (!contains(instructionPositions, startpc)) {\n-                throw new ClassConstraintException(\"Code attribute '\" + this.tostring((Object)this.code) + \"' has an exception_table entry '\" + element + \"' that has a non-existant bytecode offset as its start_pc ('\" + startpc + \"').\");\n-            }\n-            if (!contains(instructionPositions, endpc) && endpc != codeLength) {\n-                throw new ClassConstraintException(\"Code attribute '\" + this.tostring((Object)this.code) + \"' has an exception_table entry '\" + element + \"' that has a non-existant bytecode offset as its end_pc ('\" + startpc + \"') [that is also not equal to code_length ('\" + codeLength + \"')].\");\n-            }\n-            if (!contains(instructionPositions, handlerpc)) {\n-                throw new ClassConstraintException(\"Code attribute '\" + this.tostring((Object)this.code) + \"' has an exception_table entry '\" + element + \"' that has a non-existant bytecode offset as its handler_pc ('\" + handlerpc + \"').\");\n-            }\n-        }\n+        // \n+        // This method could not be decompiled.\n+        // \n+        // Original Bytecode:\n+        // \n+        //     1: getfield        org/apache/bcel/verifier/statics/Pass3aVerifier.instructionList:Lorg/apache/bcel/generic/InstructionList;\n+        //     4: invokevirtual   org/apache/bcel/generic/InstructionList.getInstructionPositions:()[I\n+        //     7: astore_1       \n+        //     8: aload_0        \n+        //     9: getfield        org/apache/bcel/verifier/statics/Pass3aVerifier.code:Lorg/apache/bcel/classfile/Code;\n+        //    12: invokevirtual   org/apache/bcel/classfile/Code.getCode:()[B\n+        //    15: arraylength    \n+        //    16: istore_2       \n+        //    17: aload_0        \n+        //    18: getfield        org/apache/bcel/verifier/statics/Pass3aVerifier.code:Lorg/apache/bcel/classfile/Code;\n+        //    21: invokevirtual   org/apache/bcel/classfile/Code.getLineNumberTable:()Lorg/apache/bcel/classfile/LineNumberTable;\n+        //    24: astore_3       \n+        //    25: aload_3        \n+        //    26: ifnull          255\n+        //    29: aload_3        \n+        //    30: invokevirtual   org/apache/bcel/classfile/LineNumberTable.getLineNumberTable:()[Lorg/apache/bcel/classfile/LineNumber;\n+        //    33: astore          4\n+        //    35: new             Lorg/apache/bcel/verifier/statics/IntList;\n+        //    38: dup            \n+        //    39: invokespecial   org/apache/bcel/verifier/statics/IntList.<init>:()V\n+        //    42: astore          5\n+        //    44: aload           4\n+        //    46: astore          6\n+        //    48: aload           6\n+        //    50: arraylength    \n+        //    51: istore          7\n+        //    53: iconst_0       \n+        //    54: istore          8\n+        //    56: iload           8\n+        //    58: iload           7\n+        //    60: if_icmpge       255\n+        //    63: aload           6\n+        //    65: iload           8\n+        //    67: aaload         \n+        //    68: astore          9\n+        //    70: aload_1        \n+        //    71: astore          10\n+        //    73: aload           10\n+        //    75: arraylength    \n+        //    76: istore          11\n+        //    78: iconst_0       \n+        //    79: istore          12\n+        //    81: iload           12\n+        //    83: iload           11\n+        //    85: if_icmpge       182\n+        //    88: aload           10\n+        //    90: iload           12\n+        //    92: iaload         \n+        //    93: istore          13\n+        //    95: aload           9\n+        //    97: invokevirtual   org/apache/bcel/classfile/LineNumber.getStartPC:()I\n+        //   100: istore          14\n+        //   102: iload           13\n+        //   104: iload           14\n+        //   106: if_icmpne       176\n+        //   109: aload           5\n+        //   111: iload           14\n+        //   113: invokevirtual   org/apache/bcel/verifier/statics/IntList.contains:(I)Z\n+        //   116: ifeq            166\n+        //   119: aload_0        \n+        //   120: new             Ljava/lang/StringBuilder;\n+        //   123: dup            \n+        //   124: invokespecial   java/lang/StringBuilder.<init>:()V\n+        //   127: ldc             \"LineNumberTable attribute '\"\n+        //   129: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   132: aload_0        \n+        //   133: getfield        org/apache/bcel/verifier/statics/Pass3aVerifier.code:Lorg/apache/bcel/classfile/Code;\n+        //   136: invokevirtual   org/apache/bcel/classfile/Code.getLineNumberTable:()Lorg/apache/bcel/classfile/LineNumberTable;\n+        //   139: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+        //   142: ldc             \"' refers to the same code offset ('\"\n+        //   144: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   147: iload           14\n+        //   149: invokevirtual   java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        //   152: ldc             \"') more than once which is violating the semantics [but is sometimes produced by IBM's 'jikes' compiler].\"\n+        //   154: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   157: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        //   160: invokevirtual   org/apache/bcel/verifier/statics/Pass3aVerifier.addMessage:(Ljava/lang/String;)V\n+        //   163: goto            249\n+        //   166: aload           5\n+        //   168: iload           14\n+        //   170: invokevirtual   org/apache/bcel/verifier/statics/IntList.add:(I)V\n+        //   173: goto            249\n+        //   176: iinc            12, 1\n+        //   179: goto            81\n+        //   182: new             Lorg/apache/bcel/verifier/exc/ClassConstraintException;\n+        //   185: dup            \n+        //   186: new             Ljava/lang/StringBuilder;\n+        //   189: dup            \n+        //   190: invokespecial   java/lang/StringBuilder.<init>:()V\n+        //   193: ldc             \"Code attribute '\"\n+        //   195: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   198: aload_0        \n+        //   199: aload_0        \n+        //   200: getfield        org/apache/bcel/verifier/statics/Pass3aVerifier.code:Lorg/apache/bcel/classfile/Code;\n+        //   203: invokevirtual   org/apache/bcel/verifier/statics/Pass3aVerifier.tostring:(Ljava/lang/Object;)Ljava/lang/String;\n+        //   206: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   209: ldc             \"' has a LineNumberTable attribute '\"\n+        //   211: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   214: aload_0        \n+        //   215: getfield        org/apache/bcel/verifier/statics/Pass3aVerifier.code:Lorg/apache/bcel/classfile/Code;\n+        //   218: invokevirtual   org/apache/bcel/classfile/Code.getLineNumberTable:()Lorg/apache/bcel/classfile/LineNumberTable;\n+        //   221: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+        //   224: ldc             \"' referring to a code offset ('\"\n+        //   226: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   229: aload           9\n+        //   231: invokevirtual   org/apache/bcel/classfile/LineNumber.getStartPC:()I\n+        //   234: invokevirtual   java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        //   237: ldc             \"') that does not exist.\"\n+        //   239: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   242: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        //   245: invokespecial   org/apache/bcel/verifier/exc/ClassConstraintException.<init>:(Ljava/lang/String;)V\n+        //   248: athrow         \n+        //   249: iinc            8, 1\n+        //   252: goto            56\n+        //   255: aload_0        \n+        //   256: getfield        org/apache/bcel/verifier/statics/Pass3aVerifier.code:Lorg/apache/bcel/classfile/Code;\n+        //   259: invokevirtual   org/apache/bcel/classfile/Code.getAttributes:()[Lorg/apache/bcel/classfile/Attribute;\n+        //   262: astore          4\n+        //   264: aload           4\n+        //   266: astore          5\n+        //   268: aload           5\n+        //   270: arraylength    \n+        //   271: istore          6\n+        //   273: iconst_0       \n+        //   274: istore          7\n+        //   276: iload           7\n+        //   278: iload           6\n+        //   280: if_icmpge       320\n+        //   283: aload           5\n+        //   285: iload           7\n+        //   287: aaload         \n+        //   288: astore          8\n+        //   290: aload           8\n+        //   292: instanceof      Lorg/apache/bcel/classfile/LocalVariableTable;\n+        //   295: ifeq            314\n+        //   298: aload           8\n+        //   300: checkcast       Lorg/apache/bcel/classfile/LocalVariableTable;\n+        //   303: aload_0        \n+        //   304: aload_1        \n+        //   305: iload_2        \n+        //   306: invokedynamic   BootstrapMethod #0, accept:(Lorg/apache/bcel/verifier/statics/Pass3aVerifier;[II)Ljava/util/function/Consumer;\n+        //   311: invokevirtual   org/apache/bcel/classfile/LocalVariableTable.forEach:(Ljava/util/function/Consumer;)V\n+        //   314: iinc            7, 1\n+        //   317: goto            276\n+        //   320: aload_0        \n+        //   321: getfield        org/apache/bcel/verifier/statics/Pass3aVerifier.code:Lorg/apache/bcel/classfile/Code;\n+        //   324: invokevirtual   org/apache/bcel/classfile/Code.getExceptionTable:()[Lorg/apache/bcel/classfile/CodeException;\n+        //   327: astore          5\n+        //   329: aload           5\n+        //   331: astore          6\n+        //   333: aload           6\n+        //   335: arraylength    \n+        //   336: istore          7\n+        //   338: iconst_0       \n+        //   339: istore          8\n+        //   341: iload           8\n+        //   343: iload           7\n+        //   345: if_icmpge       677\n+        //   348: aload           6\n+        //   350: iload           8\n+        //   352: aaload         \n+        //   353: astore          9\n+        //   355: aload           9\n+        //   357: invokevirtual   org/apache/bcel/classfile/CodeException.getStartPC:()I\n+        //   360: istore          10\n+        //   362: aload           9\n+        //   364: invokevirtual   org/apache/bcel/classfile/CodeException.getEndPC:()I\n+        //   367: istore          11\n+        //   369: aload           9\n+        //   371: invokevirtual   org/apache/bcel/classfile/CodeException.getHandlerPC:()I\n+        //   374: istore          12\n+        //   376: iload           10\n+        //   378: iload           11\n+        //   380: if_icmplt       452\n+        //   383: new             Lorg/apache/bcel/verifier/exc/ClassConstraintException;\n+        //   386: dup            \n+        //   387: new             Ljava/lang/StringBuilder;\n+        //   390: dup            \n+        //   391: invokespecial   java/lang/StringBuilder.<init>:()V\n+        //   394: ldc             \"Code attribute '\"\n+        //   396: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   399: aload_0        \n+        //   400: aload_0        \n+        //   401: getfield        org/apache/bcel/verifier/statics/Pass3aVerifier.code:Lorg/apache/bcel/classfile/Code;\n+        //   404: invokevirtual   org/apache/bcel/verifier/statics/Pass3aVerifier.tostring:(Ljava/lang/Object;)Ljava/lang/String;\n+        //   407: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   410: ldc             \"' has an exception_table entry '\"\n+        //   412: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   415: aload           9\n+        //   417: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+        //   420: ldc             \"' that has its start_pc ('\"\n+        //   422: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   425: iload           10\n+        //   427: invokevirtual   java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        //   430: ldc             \"') not smaller than its end_pc ('\"\n+        //   432: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   435: iload           11\n+        //   437: invokevirtual   java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        //   440: ldc             \"').\"\n+        //   442: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   445: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        //   448: invokespecial   org/apache/bcel/verifier/exc/ClassConstraintException.<init>:(Ljava/lang/String;)V\n+        //   451: athrow         \n+        //   452: aload_1        \n+        //   453: iload           10\n+        //   455: invokestatic    org/apache/bcel/verifier/statics/Pass3aVerifier.contains:([II)Z\n+        //   458: ifne            520\n+        //   461: new             Lorg/apache/bcel/verifier/exc/ClassConstraintException;\n+        //   464: dup            \n+        //   465: new             Ljava/lang/StringBuilder;\n+        //   468: dup            \n+        //   469: invokespecial   java/lang/StringBuilder.<init>:()V\n+        //   472: ldc             \"Code attribute '\"\n+        //   474: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   477: aload_0        \n+        //   478: aload_0        \n+        //   479: getfield        org/apache/bcel/verifier/statics/Pass3aVerifier.code:Lorg/apache/bcel/classfile/Code;\n+        //   482: invokevirtual   org/apache/bcel/verifier/statics/Pass3aVerifier.tostring:(Ljava/lang/Object;)Ljava/lang/String;\n+        //   485: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   488: ldc             \"' has an exception_table entry '\"\n+        //   490: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   493: aload           9\n+        //   495: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+        //   498: ldc             \"' that has a non-existant bytecode offset as its start_pc ('\"\n+        //   500: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   503: iload           10\n+        //   505: invokevirtual   java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        //   508: ldc             \"').\"\n+        //   510: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   513: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        //   516: invokespecial   org/apache/bcel/verifier/exc/ClassConstraintException.<init>:(Ljava/lang/String;)V\n+        //   519: athrow         \n+        //   520: aload_1        \n+        //   521: iload           11\n+        //   523: invokestatic    org/apache/bcel/verifier/statics/Pass3aVerifier.contains:([II)Z\n+        //   526: ifne            603\n+        //   529: iload           11\n+        //   531: iload_2        \n+        //   532: if_icmpeq       603\n+        //   535: new             Lorg/apache/bcel/verifier/exc/ClassConstraintException;\n+        //   538: dup            \n+        //   539: new             Ljava/lang/StringBuilder;\n+        //   542: dup            \n+        //   543: invokespecial   java/lang/StringBuilder.<init>:()V\n+        //   546: ldc             \"Code attribute '\"\n+        //   548: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   551: aload_0        \n+        //   552: aload_0        \n+        //   553: getfield        org/apache/bcel/verifier/statics/Pass3aVerifier.code:Lorg/apache/bcel/classfile/Code;\n+        //   556: invokevirtual   org/apache/bcel/verifier/statics/Pass3aVerifier.tostring:(Ljava/lang/Object;)Ljava/lang/String;\n+        //   559: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   562: ldc             \"' has an exception_table entry '\"\n+        //   564: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   567: aload           9\n+        //   569: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+        //   572: ldc             \"' that has a non-existant bytecode offset as its end_pc ('\"\n+        //   574: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   577: iload           10\n+        //   579: invokevirtual   java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        //   582: ldc             \"') [that is also not equal to code_length ('\"\n+        //   584: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   587: iload_2        \n+        //   588: invokevirtual   java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        //   591: ldc             \"')].\"\n+        //   593: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   596: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        //   599: invokespecial   org/apache/bcel/verifier/exc/ClassConstraintException.<init>:(Ljava/lang/String;)V\n+        //   602: athrow         \n+        //   603: aload_1        \n+        //   604: iload           12\n+        //   606: invokestatic    org/apache/bcel/verifier/statics/Pass3aVerifier.contains:([II)Z\n+        //   609: ifne            671\n+        //   612: new             Lorg/apache/bcel/verifier/exc/ClassConstraintException;\n+        //   615: dup            \n+        //   616: new             Ljava/lang/StringBuilder;\n+        //   619: dup            \n+        //   620: invokespecial   java/lang/StringBuilder.<init>:()V\n+        //   623: ldc             \"Code attribute '\"\n+        //   625: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   628: aload_0        \n+        //   629: aload_0        \n+        //   630: getfield        org/apache/bcel/verifier/statics/Pass3aVerifier.code:Lorg/apache/bcel/classfile/Code;\n+        //   633: invokevirtual   org/apache/bcel/verifier/statics/Pass3aVerifier.tostring:(Ljava/lang/Object;)Ljava/lang/String;\n+        //   636: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   639: ldc             \"' has an exception_table entry '\"\n+        //   641: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   644: aload           9\n+        //   646: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+        //   649: ldc             \"' that has a non-existant bytecode offset as its handler_pc ('\"\n+        //   651: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   654: iload           12\n+        //   656: invokevirtual   java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        //   659: ldc             \"').\"\n+        //   661: invokevirtual   java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        //   664: invokevirtual   java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        //   667: invokespecial   org/apache/bcel/verifier/exc/ClassConstraintException.<init>:(Ljava/lang/String;)V\n+        //   670: athrow         \n+        //   671: iinc            8, 1\n+        //   674: goto            341\n+        //   677: return         \n+        //    StackMapTable: 00 10 FF 00 38 00 09 07 00 02 07 01 7D 01 07 00 2A 07 01 80 07 00 2E 07 01 80 01 01 00 00 FF 00 18 00 0D 07 00 02 07 01 7D 01 07 00 2A 07 01 80 07 00 2E 07 01 80 01 01 07 00 32 07 01 7D 01 01 00 00 FD 00 54 01 01 F9 00 09 F8 00 05 FA 00 42 FF 00 05 00 04 07 00 02 07 01 7D 01 07 00 2A 00 00 FF 00 14 00 08 07 00 02 07 01 7D 01 07 00 2A 07 01 82 07 01 82 01 01 00 00 25 F8 00 05 FF 00 14 00 09 07 00 02 07 01 7D 01 07 00 2A 07 01 82 07 01 84 07 01 84 01 01 00 00 FF 00 6E 00 0D 07 00 02 07 01 7D 01 07 00 2A 07 01 82 07 01 84 07 01 84 01 01 07 00 7D 01 01 01 00 00 FB 00 43 FB 00 52 FF 00 43 00 09 07 00 02 07 01 7D 01 07 00 2A 07 01 82 07 01 84 07 01 84 01 01 00 00 F8 00 05\n+        // \n+        // The error that occurred was:\n+        // \n+        // java.lang.IllegalStateException: Could not infer any expression.\n+        //     at com.strobel.decompiler.ast.TypeAnalysis.runInference(TypeAnalysis.java:382)\n+        //     at com.strobel.decompiler.ast.TypeAnalysis.run(TypeAnalysis.java:95)\n+        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:344)\n+        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)\n+        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:206)\n+        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:93)\n+        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:868)\n+        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:761)\n+        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:638)\n+        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:605)\n+        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:195)\n+        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:162)\n+        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:137)\n+        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)\n+        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)\n+        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:333)\n+        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:147)\n+        // \n+        throw new IllegalStateException(\"An error occurred while decompiling this method.\");\n     }\n     \n     public VerificationResult do_verify() {\n         try {\n             if (!this.myOwner.doPass2().equals((Object)VerificationResult.VR_OK)) {\n                 return VerificationResult.VR_NOTYET;\n             }\n-            final JavaClass jc = Repository.lookupClass(this.myOwner.getClassName());\n-            final Method[] methods = jc.getMethods();\n+            final Method[] methods = Repository.lookupClass(this.myOwner.getClassName()).getMethods();\n             if (this.methodNo >= methods.length) {\n                 throw new InvalidMethodException(\"METHOD DOES NOT EXIST!\");\n             }\n             final Method method = methods[this.methodNo];\n             this.code = method.getCode();\n             if (method.isAbstract() || method.isNative()) {\n                 return VerificationResult.VR_OK;\n             }\n             try {\n                 this.instructionList = new InstructionList(method.getCode().getCode());\n             }\n-            catch (final RuntimeException re) {\n+            catch (final RuntimeException ex) {\n                 return new VerificationResult(2, \"Bad bytecode in the code array of the Code attribute of method '\" + this.tostring((Object)method) + \"'.\");\n             }\n             this.instructionList.setPositions(true);\n-            VerificationResult vr = VerificationResult.VR_OK;\n+            VerificationResult vr_OK = VerificationResult.VR_OK;\n             try {\n                 this.delayedPass2Checks();\n             }\n-            catch (final ClassConstraintException | ClassFormatException cce) {\n-                vr = new VerificationResult(2, cce.getMessage());\n-                return vr;\n+            catch (final ClassConstraintException | ClassFormatException ex2) {\n+                return new VerificationResult(2, ((Throwable)ex2).getMessage());\n             }\n             try {\n                 this.pass3StaticInstructionChecks();\n                 this.pass3StaticInstructionOperandsChecks();\n             }\n-            catch (final StaticCodeConstraintException | ClassFormatException scce) {\n-                vr = new VerificationResult(2, scce.getMessage());\n+            catch (final StaticCodeConstraintException | ClassFormatException ex3) {\n+                vr_OK = new VerificationResult(2, ((Throwable)ex3).getMessage());\n             }\n-            catch (final ClassCastException cce2) {\n-                vr = new VerificationResult(2, \"Class Cast Exception: \" + cce2.getMessage());\n+            catch (final ClassCastException ex4) {\n+                vr_OK = new VerificationResult(2, \"Class Cast Exception: \" + ex4.getMessage());\n             }\n-            return vr;\n+            return vr_OK;\n         }\n-        catch (final ClassNotFoundException e) {\n-            throw new AssertionViolatedException(\"Missing class: \" + e, (Throwable)e);\n+        catch (final ClassNotFoundException obj) {\n+            throw new AssertionViolatedException(\"Missing class: \" + obj, (Throwable)obj);\n         }\n     }\n     \n     public int getMethodNo() {\n         return this.methodNo;\n     }\n     \n     private void pass3StaticInstructionChecks() {\n         if (this.code.getCode().length >= 65536) {\n             throw new StaticCodeInstructionConstraintException(\"Code array in code attribute '\" + this.tostring((Object)this.code) + \"' too big: must be smaller than \" + 65536 + \"65536 bytes.\");\n         }\n-        for (InstructionHandle ih = this.instructionList.getStart(); ih != null; ih = ih.getNext()) {\n-            final Instruction i = ih.getInstruction();\n-            if (i instanceof IMPDEP1) {\n+        for (InstructionHandle instructionHandle = this.instructionList.getStart(); instructionHandle != null; instructionHandle = instructionHandle.getNext()) {\n+            final Instruction instruction = instructionHandle.getInstruction();\n+            if (instruction instanceof IMPDEP1) {\n                 throw new StaticCodeInstructionConstraintException(\"IMPDEP1 must not be in the code, it is an illegal instruction for _internal_ JVM use!\");\n             }\n-            if (i instanceof IMPDEP2) {\n+            if (instruction instanceof IMPDEP2) {\n                 throw new StaticCodeInstructionConstraintException(\"IMPDEP2 must not be in the code, it is an illegal instruction for _internal_ JVM use!\");\n             }\n-            if (i instanceof BREAKPOINT) {\n+            if (instruction instanceof BREAKPOINT) {\n                 throw new StaticCodeInstructionConstraintException(\"BREAKPOINT must not be in the code, it is an illegal instruction for _internal_ JVM use!\");\n             }\n         }\n-        final Instruction last = this.instructionList.getEnd().getInstruction();\n-        if (!(last instanceof ReturnInstruction) && !(last instanceof RET) && !(last instanceof GotoInstruction) && !(last instanceof ATHROW)) {\n+        final Instruction instruction2 = this.instructionList.getEnd().getInstruction();\n+        if (!(instruction2 instanceof ReturnInstruction) && !(instruction2 instanceof RET) && !(instruction2 instanceof GotoInstruction) && !(instruction2 instanceof ATHROW)) {\n             throw new StaticCodeInstructionConstraintException(\"Execution must not fall off the bottom of the code array. This constraint is enforced statically as some existing verifiers do - so it may be a false alarm if the last instruction is not reachable.\");\n         }\n     }\n     \n     private void pass3StaticInstructionOperandsChecks() {\n         try {\n-            final ConstantPoolGen cpg = new ConstantPoolGen(Repository.lookupClass(this.myOwner.getClassName()).getConstantPool());\n-            final Pass3aVerifier.InstOperandConstraintVisitor v = new Pass3aVerifier.InstOperandConstraintVisitor(this, cpg);\n-            for (InstructionHandle ih = this.instructionList.getStart(); ih != null; ih = ih.getNext()) {\n-                final Instruction i = ih.getInstruction();\n-                if (i instanceof JsrInstruction) {\n-                    final InstructionHandle target = ((JsrInstruction)i).getTarget();\n+            final Pass3aVerifier.InstOperandConstraintVisitor instOperandConstraintVisitor = new Pass3aVerifier.InstOperandConstraintVisitor(this, new ConstantPoolGen(Repository.lookupClass(this.myOwner.getClassName()).getConstantPool()));\n+            for (InstructionHandle instructionHandle = this.instructionList.getStart(); instructionHandle != null; instructionHandle = instructionHandle.getNext()) {\n+                final Instruction instruction = instructionHandle.getInstruction();\n+                if (instruction instanceof JsrInstruction) {\n+                    final InstructionHandle target = ((JsrInstruction)instruction).getTarget();\n                     if (target == this.instructionList.getStart()) {\n-                        throw new StaticCodeInstructionOperandConstraintException(\"Due to JustIce's clear definition of subroutines, no JSR or JSR_W may have a top-level instruction (such as the very first instruction, which is targeted by instruction '\" + this.tostring((Object)ih) + \"' as its target.\");\n+                        throw new StaticCodeInstructionOperandConstraintException(\"Due to JustIce's clear definition of subroutines, no JSR or JSR_W may have a top-level instruction (such as the very first instruction, which is targeted by instruction '\" + this.tostring((Object)instructionHandle) + \"' as its target.\");\n                     }\n                     if (!(target.getInstruction() instanceof ASTORE)) {\n-                        throw new StaticCodeInstructionOperandConstraintException(\"Due to JustIce's clear definition of subroutines, no JSR or JSR_W may target anything else than an ASTORE instruction. Instruction '\" + this.tostring((Object)ih) + \"' targets '\" + this.tostring((Object)target) + \"'.\");\n+                        throw new StaticCodeInstructionOperandConstraintException(\"Due to JustIce's clear definition of subroutines, no JSR or JSR_W may target anything else than an ASTORE instruction. Instruction '\" + this.tostring((Object)instructionHandle) + \"' targets '\" + this.tostring((Object)target) + \"'.\");\n                     }\n                 }\n-                ih.accept((Visitor)v);\n+                instructionHandle.accept((Visitor)instOperandConstraintVisitor);\n             }\n         }\n-        catch (final ClassNotFoundException e) {\n-            throw new AssertionViolatedException(\"Missing class: \" + e, (Throwable)e);\n+        catch (final ClassNotFoundException obj) {\n+            throw new AssertionViolatedException(\"Missing class: \" + obj, (Throwable)obj);\n         }\n     }\n     \n-    protected String tostring(final Object obj) {\n-        String ret;\n+    protected String tostring(final Object o) {\n+        String s;\n         try {\n-            ret = obj.toString();\n+            s = o.toString();\n         }\n-        catch (final RuntimeException e) {\n-            String s = obj.getClass().getName();\n-            s = s.substring(s.lastIndexOf(\".\") + 1);\n-            ret = \"<<\" + s + \">>\";\n+        catch (final RuntimeException ex) {\n+            final String name = o.getClass().getName();\n+            s = \"<<\" + name.substring(name.lastIndexOf(\".\") + 1) + \">>\";\n         }\n-        return ret;\n+        return s;\n     }\n }\n"}]}
