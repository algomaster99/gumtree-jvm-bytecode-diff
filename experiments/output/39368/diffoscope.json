{"diffoscope-json-version": 1, "source1": "first/JarArchiveInputStream.class", "source2": "second/JarArchiveInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,80 +1,79 @@\n-  SHA-256 checksum d2956c189767bf83e8e0638a47b854efbde70119545ec6f72eeef0896daca589\n+  SHA-256 checksum bb59026a2c27999cea842e2038bf8f5414210b4632b2c822773aa48844582157\n   Compiled from \"JarArchiveInputStream.java\"\n public class org.apache.commons.compress.archivers.jar.JarArchiveInputStream extends org.apache.commons.compress.archivers.zip.ZipArchiveInputStream\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #8                          // org/apache/commons/compress/archivers/jar/JarArchiveInputStream\n-  super_class: #9                         // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n+  this_class: #1                          // org/apache/commons/compress/archivers/jar/JarArchiveInputStream\n+  super_class: #3                         // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n   interfaces: 0, fields: 0, methods: 5, attributes: 1\n Constant pool:\n-   #1 = Methodref          #9.#41         // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #2 = Methodref          #9.#42         // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n-   #3 = Methodref          #8.#43         // org/apache/commons/compress/archivers/jar/JarArchiveInputStream.getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-   #4 = Class              #44            // org/apache/commons/compress/archivers/jar/JarArchiveEntry\n-   #5 = Methodref          #4.#45         // org/apache/commons/compress/archivers/jar/JarArchiveEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #6 = Methodref          #8.#46         // org/apache/commons/compress/archivers/jar/JarArchiveInputStream.getNextJarEntry:()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n-   #7 = Methodref          #9.#47         // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.matches:([BI)Z\n-   #8 = Class              #48            // org/apache/commons/compress/archivers/jar/JarArchiveInputStream\n-   #9 = Class              #49            // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n-  #10 = Utf8               <init>\n-  #11 = Utf8               (Ljava/io/InputStream;)V\n-  #12 = Utf8               Code\n-  #13 = Utf8               LineNumberTable\n-  #14 = Utf8               LocalVariableTable\n-  #15 = Utf8               this\n-  #16 = Utf8               Lorg/apache/commons/compress/archivers/jar/JarArchiveInputStream;\n-  #17 = Utf8               inputStream\n-  #18 = Utf8               Ljava/io/InputStream;\n-  #19 = Utf8               (Ljava/io/InputStream;Ljava/lang/String;)V\n-  #20 = Utf8               encoding\n-  #21 = Utf8               Ljava/lang/String;\n-  #22 = Utf8               getNextJarEntry\n-  #23 = Utf8               ()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n-  #24 = Utf8               entry\n-  #25 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #26 = Utf8               StackMapTable\n-  #27 = Class              #50            // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #28 = Class              #44            // org/apache/commons/compress/archivers/jar/JarArchiveEntry\n-  #29 = Utf8               Exceptions\n-  #30 = Class              #51            // java/io/IOException\n-  #31 = Utf8               getNextEntry\n-  #32 = Utf8               ()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n-  #33 = Utf8               matches\n-  #34 = Utf8               ([BI)Z\n-  #35 = Utf8               signature\n-  #36 = Utf8               [B\n-  #37 = Utf8               length\n-  #38 = Utf8               I\n-  #39 = Utf8               SourceFile\n-  #40 = Utf8               JarArchiveInputStream.java\n-  #41 = NameAndType        #10:#11        // \"<init>\":(Ljava/io/InputStream;)V\n-  #42 = NameAndType        #10:#19        // \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n-  #43 = NameAndType        #52:#53        // getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #44 = Utf8               org/apache/commons/compress/archivers/jar/JarArchiveEntry\n-  #45 = NameAndType        #10:#54        // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #46 = NameAndType        #22:#23        // getNextJarEntry:()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n-  #47 = NameAndType        #33:#34        // matches:([BI)Z\n-  #48 = Utf8               org/apache/commons/compress/archivers/jar/JarArchiveInputStream\n-  #49 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n-  #50 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #51 = Utf8               java/io/IOException\n-  #52 = Utf8               getNextZipEntry\n-  #53 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #54 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #1 = Class              #2             // org/apache/commons/compress/archivers/jar/JarArchiveInputStream\n+   #2 = Utf8               org/apache/commons/compress/archivers/jar/JarArchiveInputStream\n+   #3 = Class              #4             // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n+   #4 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n+   #5 = Utf8               <init>\n+   #6 = Utf8               (Ljava/io/InputStream;)V\n+   #7 = Utf8               Code\n+   #8 = Methodref          #3.#9          // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #9 = NameAndType        #5:#6          // \"<init>\":(Ljava/io/InputStream;)V\n+  #10 = Utf8               LineNumberTable\n+  #11 = Utf8               LocalVariableTable\n+  #12 = Utf8               this\n+  #13 = Utf8               Lorg/apache/commons/compress/archivers/jar/JarArchiveInputStream;\n+  #14 = Utf8               inputStream\n+  #15 = Utf8               Ljava/io/InputStream;\n+  #16 = Utf8               (Ljava/io/InputStream;Ljava/lang/String;)V\n+  #17 = Methodref          #3.#18         // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n+  #18 = NameAndType        #5:#16         // \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n+  #19 = Utf8               encoding\n+  #20 = Utf8               Ljava/lang/String;\n+  #21 = Utf8               getNextJarEntry\n+  #22 = Utf8               ()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n+  #23 = Utf8               Exceptions\n+  #24 = Class              #25            // java/io/IOException\n+  #25 = Utf8               java/io/IOException\n+  #26 = Methodref          #1.#27         // org/apache/commons/compress/archivers/jar/JarArchiveInputStream.getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #27 = NameAndType        #28:#29        // getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #28 = Utf8               getNextZipEntry\n+  #29 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #30 = Class              #31            // org/apache/commons/compress/archivers/jar/JarArchiveEntry\n+  #31 = Utf8               org/apache/commons/compress/archivers/jar/JarArchiveEntry\n+  #32 = Methodref          #30.#33        // org/apache/commons/compress/archivers/jar/JarArchiveEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #33 = NameAndType        #5:#34         // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #34 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #35 = Utf8               entry\n+  #36 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #37 = Utf8               StackMapTable\n+  #38 = Class              #39            // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  #39 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  #40 = Utf8               getNextEntry\n+  #41 = Utf8               ()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+  #42 = Methodref          #1.#43         // org/apache/commons/compress/archivers/jar/JarArchiveInputStream.getNextJarEntry:()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n+  #43 = NameAndType        #21:#22        // getNextJarEntry:()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n+  #44 = Utf8               matches\n+  #45 = Utf8               ([BI)Z\n+  #46 = Methodref          #3.#47         // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.matches:([BI)Z\n+  #47 = NameAndType        #44:#45        // matches:([BI)Z\n+  #48 = Utf8               signature\n+  #49 = Utf8               [B\n+  #50 = Utf8               length\n+  #51 = Utf8               I\n+  #52 = Utf8               SourceFile\n+  #53 = Utf8               JarArchiveInputStream.java\n {\n   public org.apache.commons.compress.archivers.jar.JarArchiveInputStream(java.io.InputStream);\n     descriptor: (Ljava/io/InputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #1                  // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+         2: invokespecial #8                  // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;)V\n          5: return\n       LineNumberTable:\n         line 41: 0\n         line 42: 5\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0  this   Lorg/apache/commons/compress/archivers/jar/JarArchiveInputStream;\n@@ -84,82 +83,82 @@\n     descriptor: (Ljava/io/InputStream;Ljava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: aload_2\n-         3: invokespecial #2                  // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n+         3: invokespecial #17                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n          6: return\n       LineNumberTable:\n         line 52: 0\n         line 53: 6\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0  this   Lorg/apache/commons/compress/archivers/jar/JarArchiveInputStream;\n             0       7     1 inputStream   Ljava/io/InputStream;\n             0       7     2 encoding   Ljava/lang/String;\n \n   public org.apache.commons.compress.archivers.jar.JarArchiveEntry getNextJarEntry() throws java.io.IOException;\n     descriptor: ()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: invokevirtual #3                  // Method getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+         1: invokevirtual #26                 // Method getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n          4: astore_1\n          5: aload_1\n          6: ifnonnull     13\n          9: aconst_null\n         10: goto          21\n-        13: new           #4                  // class org/apache/commons/compress/archivers/jar/JarArchiveEntry\n+        13: new           #30                 // class org/apache/commons/compress/archivers/jar/JarArchiveEntry\n         16: dup\n         17: aload_1\n-        18: invokespecial #5                  // Method org/apache/commons/compress/archivers/jar/JarArchiveEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+        18: invokespecial #32                 // Method org/apache/commons/compress/archivers/jar/JarArchiveEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n         21: areturn\n       LineNumberTable:\n         line 56: 0\n         line 57: 5\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      22     0  this   Lorg/apache/commons/compress/archivers/jar/JarArchiveInputStream;\n             5      17     1 entry   Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n       StackMapTable: number_of_entries = 2\n         frame_type = 252 /* append */\n           offset_delta = 13\n           locals = [ class org/apache/commons/compress/archivers/zip/ZipArchiveEntry ]\n         frame_type = 71 /* same_locals_1_stack_item */\n           stack = [ class org/apache/commons/compress/archivers/jar/JarArchiveEntry ]\n-    Exceptions:\n-      throws java.io.IOException\n \n   public org.apache.commons.compress.archivers.ArchiveEntry getNextEntry() throws java.io.IOException;\n     descriptor: ()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokevirtual #6                  // Method getNextJarEntry:()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n+         1: invokevirtual #42                 // Method getNextJarEntry:()Lorg/apache/commons/compress/archivers/jar/JarArchiveEntry;\n          4: areturn\n       LineNumberTable:\n         line 62: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/jar/JarArchiveInputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public static boolean matches(byte[], int);\n     descriptor: ([BI)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: invokestatic  #7                  // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.matches:([BI)Z\n+         2: invokestatic  #46                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.matches:([BI)Z\n          5: ireturn\n       LineNumberTable:\n         line 76: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0 signature   [B\n             0       6     1 length   I\n"}]}
