{"diffoscope-json-version": 1, "source1": "first/BranchInstruction.class", "source2": "second/BranchInstruction.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,74 +13,74 @@\n     protected InstructionHandle target;\n     @Deprecated\n     protected int position;\n     \n     BranchInstruction() {\n     }\n     \n-    protected BranchInstruction(final short opcode, final InstructionHandle target) {\n-        super(opcode, (short)3);\n+    protected BranchInstruction(final short n, final InstructionHandle target) {\n+        super(n, (short)3);\n         this.setTarget(target);\n     }\n     \n-    public void dump(final DataOutputStream out) throws IOException {\n-        out.writeByte(super.getOpcode());\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeByte(super.getOpcode());\n         this.index = this.getTargetOffset();\n         if (!isValidShort(this.index)) {\n             throw new ClassGenException(\"Branch target offset too large for short: \" + this.index);\n         }\n-        out.writeShort(this.index);\n+        dataOutputStream.writeShort(this.index);\n     }\n     \n-    protected int getTargetOffset(final InstructionHandle _target) {\n-        if (_target == null) {\n+    protected int getTargetOffset(final InstructionHandle obj) {\n+        if (obj == null) {\n             throw new ClassGenException(\"Target of \" + super.toString(true) + \" is invalid null handle\");\n         }\n-        final int t = _target.getPosition();\n-        if (t < 0) {\n-            throw new ClassGenException(\"Invalid branch target position offset for \" + super.toString(true) + \":\" + t + \":\" + _target);\n+        final int position = obj.getPosition();\n+        if (position < 0) {\n+            throw new ClassGenException(\"Invalid branch target position offset for \" + super.toString(true) + \":\" + position + \":\" + obj);\n         }\n-        return t - this.position;\n+        return position - this.position;\n     }\n     \n     protected int getTargetOffset() {\n         return this.getTargetOffset(this.target);\n     }\n     \n-    protected int updatePosition(final int offset, final int max_offset) {\n-        this.position += offset;\n+    protected int updatePosition(final int n, final int n2) {\n+        this.position += n;\n         return 0;\n     }\n     \n-    public String toString(final boolean verbose) {\n-        final String s = super.toString(verbose);\n-        String t = \"null\";\n-        if (verbose) {\n+    public String toString(final boolean b) {\n+        final String string = super.toString(b);\n+        String str = \"null\";\n+        if (b) {\n             if (this.target != null) {\n                 if (this.target.getInstruction() == this) {\n-                    t = \"<points to itself>\";\n+                    str = \"<points to itself>\";\n                 }\n                 else if (this.target.getInstruction() == null) {\n-                    t = \"<null instruction!!!?>\";\n+                    str = \"<null instruction!!!?>\";\n                 }\n                 else {\n-                    t = \"\" + this.target.getPosition();\n+                    str = \"\" + this.target.getPosition();\n                 }\n             }\n         }\n         else if (this.target != null) {\n             this.index = this.target.getPosition();\n-            t = \"\" + this.index;\n+            str = \"\" + this.index;\n         }\n-        return s + \" -> \" + t;\n+        return string + \" -> \" + str;\n     }\n     \n-    protected void initFromFile(final ByteSequence bytes, final boolean wide) throws IOException {\n+    protected void initFromFile(final ByteSequence byteSequence, final boolean b) throws IOException {\n         super.setLength(3);\n-        this.index = bytes.readShort();\n+        this.index = byteSequence.readShort();\n     }\n     \n     public final int getIndex() {\n         return this.index;\n     }\n     \n     public InstructionHandle getTarget() {\n@@ -88,33 +88,33 @@\n     }\n     \n     public void setTarget(final InstructionHandle target) {\n         notifyTarget(this.target, target, (InstructionTargeter)this);\n         this.target = target;\n     }\n     \n-    static void notifyTarget(final InstructionHandle old_ih, final InstructionHandle new_ih, final InstructionTargeter t) {\n-        if (old_ih != null) {\n-            old_ih.removeTargeter(t);\n+    static void notifyTarget(final InstructionHandle instructionHandle, final InstructionHandle instructionHandle2, final InstructionTargeter instructionTargeter) {\n+        if (instructionHandle != null) {\n+            instructionHandle.removeTargeter(instructionTargeter);\n         }\n-        if (new_ih != null) {\n-            new_ih.addTargeter(t);\n+        if (instructionHandle2 != null) {\n+            instructionHandle2.addTargeter(instructionTargeter);\n         }\n     }\n     \n-    public void updateTarget(final InstructionHandle old_ih, final InstructionHandle new_ih) {\n-        if (this.target == old_ih) {\n-            this.setTarget(new_ih);\n+    public void updateTarget(final InstructionHandle obj, final InstructionHandle target) {\n+        if (this.target == obj) {\n+            this.setTarget(target);\n             return;\n         }\n-        throw new ClassGenException(\"Not targeting \" + old_ih + \", but \" + this.target);\n+        throw new ClassGenException(\"Not targeting \" + obj + \", but \" + this.target);\n     }\n     \n-    public boolean containsTarget(final InstructionHandle ih) {\n-        return this.target == ih;\n+    public boolean containsTarget(final InstructionHandle instructionHandle) {\n+        return this.target == instructionHandle;\n     }\n     \n     void dispose() {\n         this.setTarget(null);\n         this.index = -1;\n         this.position = -1;\n     }\n"}]}
