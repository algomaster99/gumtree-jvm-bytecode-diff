{"diffoscope-json-version": 1, "source1": "first/RegexpCheck.class", "source2": "second/RegexpCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,11 +1,10 @@\n \n package com.puppycrawl.tools.checkstyle.checks.regexp;\n \n-import com.puppycrawl.tools.checkstyle.api.FileContents;\n import com.puppycrawl.tools.checkstyle.api.LineColumn;\n import com.puppycrawl.tools.checkstyle.api.FileText;\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import com.puppycrawl.tools.checkstyle.FileStatefulCheck;\n@@ -69,82 +68,77 @@\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return CommonUtil.EMPTY_INT_ARRAY;\n     }\n     \n-    public void beginTree(final DetailAST rootAST) {\n+    public void beginTree(final DetailAST detailAST) {\n         this.matcher = this.format.matcher(this.getFileContents().getText().getFullText());\n         this.matchCount = 0;\n         this.errorCount = 0;\n         this.findMatch();\n     }\n     \n     private void findMatch() {\n-        final boolean foundMatch = this.matcher.find();\n-        if (foundMatch) {\n+        if (this.matcher.find()) {\n             final FileText text = this.getFileContents().getText();\n-            final LineColumn start = text.lineColumn(this.matcher.start());\n-            final int startLine = start.getLine();\n-            final boolean ignore = this.isIgnore(startLine, text, start);\n+            final LineColumn lineColumn = text.lineColumn(this.matcher.start());\n+            final int line = lineColumn.getLine();\n+            final boolean ignore = this.isIgnore(line, text, lineColumn);\n             if (!ignore) {\n                 ++this.matchCount;\n                 if (this.illegalPattern || (this.checkForDuplicates && this.matchCount - 1 > this.duplicateLimit)) {\n                     ++this.errorCount;\n-                    this.logMessage(startLine);\n+                    this.logMessage(line);\n                 }\n             }\n             if (this.canContinueValidation(ignore)) {\n                 this.findMatch();\n             }\n         }\n         else if (!this.illegalPattern && this.matchCount == 0) {\n             this.logMessage(0);\n         }\n     }\n     \n-    private boolean canContinueValidation(final boolean ignore) {\n-        return this.errorCount <= this.errorLimit - 1 && (ignore || this.illegalPattern || this.checkForDuplicates);\n+    private boolean canContinueValidation(final boolean b) {\n+        return this.errorCount <= this.errorLimit - 1 && (b || this.illegalPattern || this.checkForDuplicates);\n     }\n     \n-    private boolean isIgnore(final int startLine, final FileText text, final LineColumn start) {\n-        LineColumn end;\n+    private boolean isIgnore(final int n, final FileText fileText, final LineColumn lineColumn) {\n+        LineColumn lineColumn2;\n         if (this.matcher.end() == 0) {\n-            end = text.lineColumn(0);\n+            lineColumn2 = fileText.lineColumn(0);\n         }\n         else {\n-            end = text.lineColumn(this.matcher.end() - 1);\n+            lineColumn2 = fileText.lineColumn(this.matcher.end() - 1);\n         }\n-        boolean ignore = false;\n+        boolean hasIntersectionWithComment = false;\n         if (this.ignoreComments) {\n-            final FileContents theFileContents = this.getFileContents();\n-            final int startColumn = start.getColumn();\n-            final int endLine = end.getLine();\n-            final int endColumn = end.getColumn();\n-            ignore = theFileContents.hasIntersectionWithComment(startLine, startColumn, endLine, endColumn);\n+            hasIntersectionWithComment = this.getFileContents().hasIntersectionWithComment(n, lineColumn.getColumn(), lineColumn2.getLine(), lineColumn2.getColumn());\n         }\n-        return ignore;\n+        return hasIntersectionWithComment;\n     }\n     \n-    private void logMessage(final int lineNumber) {\n-        String msg;\n+    private void logMessage(final int n) {\n+        String s;\n         if (this.message == null || this.message.isEmpty()) {\n-            msg = this.format.pattern();\n+            s = this.format.pattern();\n         }\n         else {\n-            msg = this.message;\n+            s = this.message;\n         }\n         if (this.errorCount >= this.errorLimit) {\n-            msg = \"The error limit has been exceeded, the check is aborting, there may be more unreported errors.\" + msg;\n+            s = \"The error limit has been exceeded, the check is aborting, there may be more unreported errors.\" + s;\n         }\n         if (this.illegalPattern) {\n-            this.log(lineNumber, \"illegal.regexp\", new Object[] { msg });\n+            this.log(n, \"illegal.regexp\", new Object[] { s });\n         }\n-        else if (lineNumber > 0) {\n-            this.log(lineNumber, \"duplicate.regexp\", new Object[] { msg });\n+        else if (n > 0) {\n+            this.log(n, \"duplicate.regexp\", new Object[] { s });\n         }\n         else {\n-            this.log(lineNumber, \"required.regexp\", new Object[] { msg });\n+            this.log(n, \"required.regexp\", new Object[] { s });\n         }\n     }\n }\n"}]}
