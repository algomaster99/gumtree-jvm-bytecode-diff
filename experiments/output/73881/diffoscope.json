{"diffoscope-json-version": 1, "source1": "first/PropertyListConfiguration.class", "source2": "second/PropertyListConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -35,14 +35,21 @@\n     private static final String TIME_ZONE_PREFIX = \"GMT\";\n     private static final int MILLIS_PER_MINUTE = 60000;\n     private static final int MINUTES_PER_HOUR = 60;\n     private static final int INDENT_SIZE = 4;\n     private static final int TIME_ZONE_LENGTH = 5;\n     private static final char PAD_CHAR = '0';\n     \n+    static {\n+        DATE_SEPARATOR_PARSER = (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateSeparatorParser(\"-\");\n+        TIME_SEPARATOR_PARSER = (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateSeparatorParser(\":\");\n+        BLANK_SEPARATOR_PARSER = (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateSeparatorParser(\" \");\n+        DATE_PARSERS = new PropertyListConfiguration.DateComponentParser[] { (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateSeparatorParser(\"<*D\"), (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateFieldParser(1, 4), PropertyListConfiguration.DATE_SEPARATOR_PARSER, (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateFieldParser(2, 2, 1), PropertyListConfiguration.DATE_SEPARATOR_PARSER, (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateFieldParser(5, 2), PropertyListConfiguration.BLANK_SEPARATOR_PARSER, (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateFieldParser(11, 2), PropertyListConfiguration.TIME_SEPARATOR_PARSER, (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateFieldParser(12, 2), PropertyListConfiguration.TIME_SEPARATOR_PARSER, (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateFieldParser(13, 2), PropertyListConfiguration.BLANK_SEPARATOR_PARSER, (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateTimeZoneParser((PropertyListConfiguration.DateTimeZoneParser)null), (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateSeparatorParser(\">\") };\n+    }\n+    \n     public PropertyListConfiguration() {\n     }\n     \n     public PropertyListConfiguration(final HierarchicalConfiguration<ImmutableNode> c) {\n         super((HierarchicalConfiguration)c);\n     }\n     \n@@ -56,14 +63,15 @@\n             try {\n                 this.clearProperty(key);\n                 this.addPropertyDirect(key, value);\n             }\n             finally {\n                 this.setDetailEvents(true);\n             }\n+            this.setDetailEvents(true);\n         }\n         else {\n             super.setPropertyInternal(key, value);\n         }\n     }\n     \n     protected void addPropertyInternal(final String key, final Object value) {\n@@ -92,42 +100,42 @@\n         this.printNode(writer, 0, (ImmutableNode)handler.getRootNode(), handler);\n         writer.flush();\n     }\n     \n     private void printNode(final PrintWriter out, final int indentLevel, final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {\n         final String padding = StringUtils.repeat(\" \", indentLevel * 4);\n         if (node.getNodeName() != null) {\n-            out.print(padding + this.quoteString(node.getNodeName()) + \" = \");\n+            out.print(String.valueOf(padding) + this.quoteString(node.getNodeName()) + \" = \");\n         }\n         final List<ImmutableNode> children = new ArrayList<ImmutableNode>(node.getChildren());\n         if (!children.isEmpty()) {\n             if (indentLevel > 0) {\n                 out.println();\n             }\n-            out.println(padding + \"{\");\n+            out.println(String.valueOf(padding) + \"{\");\n             final Iterator<ImmutableNode> it = children.iterator();\n             while (it.hasNext()) {\n                 final ImmutableNode child = (ImmutableNode)it.next();\n                 this.printNode(out, indentLevel + 1, child, handler);\n                 final Object value = child.getValue();\n                 if (value != null && !(value instanceof Map) && !(value instanceof Configuration)) {\n                     out.println(\";\");\n                 }\n                 if (it.hasNext() && (value == null || value instanceof List)) {\n                     out.println();\n                 }\n             }\n-            out.print(padding + \"}\");\n+            out.print(String.valueOf(padding) + \"}\");\n             if (handler.getParent((Object)node) != null) {\n                 out.println();\n             }\n         }\n         else if (node.getValue() == null) {\n             out.println();\n-            out.print(padding + \"{ };\");\n+            out.print(String.valueOf(padding) + \"{ };\");\n             if (handler.getParent((Object)node) != null) {\n                 out.println();\n             }\n         }\n         else {\n             final Object value2 = node.getValue();\n             this.printValue(out, indentLevel, value2);\n@@ -149,25 +157,25 @@\n         }\n         else if (value instanceof PropertyListConfiguration) {\n             final NodeHandler<ImmutableNode> handler = (NodeHandler<ImmutableNode>)((PropertyListConfiguration)value).getModel().getNodeHandler();\n             this.printNode(out, indentLevel, (ImmutableNode)handler.getRootNode(), handler);\n         }\n         else if (value instanceof ImmutableConfiguration) {\n             out.println();\n-            out.println(padding + \"{\");\n+            out.println(String.valueOf(padding) + \"{\");\n             final ImmutableConfiguration config = (ImmutableConfiguration)value;\n             final Iterator<String> it2 = config.getKeys();\n             while (it2.hasNext()) {\n                 final String key = (String)it2.next();\n                 final ImmutableNode node = new ImmutableNode.Builder().name(key).value(config.getProperty(key)).create();\n                 final InMemoryNodeModel tempModel = new InMemoryNodeModel(node);\n                 this.printNode(out, indentLevel + 1, node, (NodeHandler<ImmutableNode>)tempModel.getNodeHandler());\n                 out.println(\";\");\n             }\n-            out.println(padding + \"}\");\n+            out.println(String.valueOf(padding) + \"}\");\n         }\n         else if (value instanceof Map) {\n             final Map<String, Object> map = transformMap((Map<?, ?>)value);\n             this.printValue(out, indentLevel, new MapConfiguration((Map)map));\n         }\n         else if (value instanceof byte[]) {\n             out.print(\"<\" + new String(Hex.encodeHex((byte[])value)) + \">\");\n@@ -191,23 +199,27 @@\n         return s;\n     }\n     \n     static Date parseDate(final String s) throws ParseException {\n         final Calendar cal = Calendar.getInstance();\n         cal.clear();\n         int index = 0;\n-        for (final PropertyListConfiguration.DateComponentParser parser : PropertyListConfiguration.DATE_PARSERS) {\n+        PropertyListConfiguration.DateComponentParser[] date_PARSERS;\n+        for (int length = (date_PARSERS = PropertyListConfiguration.DATE_PARSERS).length, i = 0; i < length; ++i) {\n+            final PropertyListConfiguration.DateComponentParser parser = date_PARSERS[i];\n             index += parser.parseComponent(s, index, cal);\n         }\n         return cal.getTime();\n     }\n     \n     static String formatDate(final Calendar cal) {\n         final StringBuilder buf = new StringBuilder();\n-        for (final PropertyListConfiguration.DateComponentParser element : PropertyListConfiguration.DATE_PARSERS) {\n+        PropertyListConfiguration.DateComponentParser[] date_PARSERS;\n+        for (int length = (date_PARSERS = PropertyListConfiguration.DATE_PARSERS).length, i = 0; i < length; ++i) {\n+            final PropertyListConfiguration.DateComponentParser element = date_PARSERS[i];\n             element.formatComponent(buf, cal);\n         }\n         return buf.toString();\n     }\n     \n     static String formatDate(final Date date) {\n         final Calendar cal = Calendar.getInstance();\n@@ -220,15 +232,8 @@\n         for (final Map.Entry<?, ?> e : src.entrySet()) {\n             if (e.getKey() instanceof String) {\n                 dest.put(e.getKey(), (Object)e.getValue());\n             }\n         }\n         return dest;\n     }\n-    \n-    static {\n-        DATE_SEPARATOR_PARSER = (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateSeparatorParser(\"-\");\n-        TIME_SEPARATOR_PARSER = (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateSeparatorParser(\":\");\n-        BLANK_SEPARATOR_PARSER = (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateSeparatorParser(\" \");\n-        DATE_PARSERS = new PropertyListConfiguration.DateComponentParser[] { (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateSeparatorParser(\"<*D\"), (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateFieldParser(1, 4), PropertyListConfiguration.DATE_SEPARATOR_PARSER, (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateFieldParser(2, 2, 1), PropertyListConfiguration.DATE_SEPARATOR_PARSER, (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateFieldParser(5, 2), PropertyListConfiguration.BLANK_SEPARATOR_PARSER, (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateFieldParser(11, 2), PropertyListConfiguration.TIME_SEPARATOR_PARSER, (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateFieldParser(12, 2), PropertyListConfiguration.TIME_SEPARATOR_PARSER, (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateFieldParser(13, 2), PropertyListConfiguration.BLANK_SEPARATOR_PARSER, (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateTimeZoneParser((PropertyListConfiguration.PropertyListConfiguration$1)null), (PropertyListConfiguration.DateComponentParser)new PropertyListConfiguration.DateSeparatorParser(\">\") };\n-    }\n }\n"}]}
