{"diffoscope-json-version": 1, "source1": "first/NodeTracker.class", "source2": "second/NodeTracker.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -73,18 +73,15 @@\n     }\n     \n     public NodeTracker update(final ImmutableNode immutableNode, final NodeSelector nodeSelector, final NodeKeyResolver<ImmutableNode> nodeKeyResolver, final NodeHandler<ImmutableNode> nodeHandler) {\n         if (this.trackedNodes.isEmpty()) {\n             return this;\n         }\n         final HashMap hashMap = new HashMap();\n-        this.trackedNodes.entrySet().forEach(entry -> {\n-            final NodeTracker.TrackedNodeData trackedNodeData = (NodeTracker.TrackedNodeData)map.put(entry.getKey(), determineUpdatedTrackedNodeData(immutableNode2, nodeSelector2, (NodeKeyResolver<ImmutableNode>)nodeKeyResolver2, (NodeHandler<ImmutableNode>)nodeHandler2, (Map.Entry<NodeSelector, NodeTracker.TrackedNodeData>)entry));\n-            return;\n-        });\n+        this.trackedNodes.entrySet().forEach(entry -> map.put(entry.getKey(), determineUpdatedTrackedNodeData(immutableNode2, nodeSelector2, (NodeKeyResolver<ImmutableNode>)nodeKeyResolver2, (NodeHandler<ImmutableNode>)nodeHandler2, (Map.Entry<NodeSelector, NodeTracker.TrackedNodeData>)entry)));\n         return new NodeTracker(hashMap);\n     }\n     \n     public NodeTracker detachAllTrackedNodes() {\n         if (this.trackedNodes.isEmpty()) {\n             return this;\n         }\n"}]}
