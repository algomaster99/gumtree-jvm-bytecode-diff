{"diffoscope-json-version": 1, "source1": "first/ReplyIterator.class", "source2": "second/ReplyIterator.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,24 +12,24 @@\n \n class ReplyIterator implements Iterator<String>, Iterable<String>\n {\n     private final BufferedReader reader;\n     private String line;\n     private Exception savedException;\n     \n-    ReplyIterator(final BufferedReader _reader, final boolean addDotReader) throws IOException {\n-        this.reader = (BufferedReader)(addDotReader ? new DotTerminatedMessageReader((Reader)_reader) : _reader);\n+    ReplyIterator(final BufferedReader bufferedReader, final boolean b) throws IOException {\n+        this.reader = (BufferedReader)(b ? new DotTerminatedMessageReader((Reader)bufferedReader) : bufferedReader);\n         this.line = this.reader.readLine();\n         if (this.line == null) {\n             Util.closeQuietly((Closeable)this.reader);\n         }\n     }\n     \n-    ReplyIterator(final BufferedReader _reader) throws IOException {\n-        this(_reader, true);\n+    ReplyIterator(final BufferedReader bufferedReader) throws IOException {\n+        this(bufferedReader, true);\n     }\n     \n     @Override\n     public boolean hasNext() {\n         if (this.savedException != null) {\n             throw new NoSuchElementException(this.savedException.toString());\n         }\n@@ -37,29 +37,29 @@\n     }\n     \n     @Override\n     public String next() throws NoSuchElementException {\n         if (this.savedException != null) {\n             throw new NoSuchElementException(this.savedException.toString());\n         }\n-        final String prev = this.line;\n-        if (prev == null) {\n+        final String line = this.line;\n+        if (line == null) {\n             throw new NoSuchElementException();\n         }\n         try {\n             this.line = this.reader.readLine();\n             if (this.line == null) {\n                 Util.closeQuietly((Closeable)this.reader);\n             }\n         }\n-        catch (final IOException ex) {\n-            this.savedException = ex;\n+        catch (final IOException savedException) {\n+            this.savedException = savedException;\n             Util.closeQuietly((Closeable)this.reader);\n         }\n-        return prev;\n+        return line;\n     }\n     \n     @Override\n     public void remove() {\n         throw new UnsupportedOperationException();\n     }\n     \n"}]}
