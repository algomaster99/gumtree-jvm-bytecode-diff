{"diffoscope-json-version": 1, "source1": "first/AttributeHTML.class", "source2": "second/AttributeHTML.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -31,15 +31,15 @@\n     private final ConstantPool constant_pool;\n     \n     AttributeHTML(final String dir, final String class_name, final ConstantPool constant_pool, final ConstantHTML constant_html) throws IOException {\n         this.attr_count = 0;\n         this.class_name = class_name;\n         this.constant_pool = constant_pool;\n         this.constant_html = constant_html;\n-        (this.file = new PrintWriter(new FileOutputStream(dir + class_name + \"_attributes.html\"))).println(\"<HTML><BODY BGCOLOR=\\\"#C0C0C0\\\"><TABLE BORDER=0>\");\n+        (this.file = new PrintWriter(new FileOutputStream(String.valueOf(dir) + class_name + \"_attributes.html\"))).println(\"<HTML><BODY BGCOLOR=\\\"#C0C0C0\\\"><TABLE BORDER=0>\");\n     }\n     \n     private String codeLink(final int link, final int method_number) {\n         return \"<A HREF=\\\"\" + this.class_name + \"_code.html#code\" + method_number + \"@\" + link + \"\\\" TARGET=Code>\" + link + \"</A>\";\n     }\n     \n     void close() {\n@@ -68,15 +68,17 @@\n             case 2: {\n                 final Code c = (Code)attribute;\n                 this.file.print(\"<UL><LI>Maximum stack size = \" + c.getMaxStack() + \"</LI>\\n<LI>Number of local variables = \" + c.getMaxLocals() + \"</LI>\\n<LI><A HREF=\\\"\" + this.class_name + \"_code.html#method\" + method_number + \"\\\" TARGET=Code>Byte code</A></LI></UL>\\n\");\n                 final CodeException[] ce = c.getExceptionTable();\n                 final int len = ce.length;\n                 if (len > 0) {\n                     this.file.print(\"<P><B>Exceptions handled</B><UL>\");\n-                    for (final CodeException cex : ce) {\n+                    CodeException[] array;\n+                    for (int length = (array = ce).length, j = 0; j < length; ++j) {\n+                        final CodeException cex = array[j];\n                         final int catch_type = cex.getCatchType();\n                         this.file.print(\"<LI>\");\n                         if (catch_type != 0) {\n                             this.file.print(this.constant_html.referenceConstant(catch_type));\n                         }\n                         else {\n                             this.file.print(\"Any Exception\");\n@@ -97,15 +99,17 @@\n                 final int index = ((SourceFile)attribute).getSourceFileIndex();\n                 this.file.print(\"<UL><LI><A HREF=\\\"\" + this.class_name + \"_cp.html#cp\" + index + \"\\\" TARGET=\\\"ConstantPool\\\">Source file index(\" + index + \")</A></UL>\\n\");\n                 break;\n             }\n             case 3: {\n                 final int[] indices = ((ExceptionTable)attribute).getExceptionIndexTable();\n                 this.file.print(\"<UL>\");\n-                for (final int indice : indices) {\n+                int[] array2;\n+                for (int length2 = (array2 = indices).length, k = 0; k < length2; ++k) {\n+                    final int indice = array2[k];\n                     this.file.print(\"<LI><A HREF=\\\"\" + this.class_name + \"_cp.html#cp\" + indice + \"\\\" TARGET=\\\"ConstantPool\\\">Exception class index(\" + indice + \")</A>\\n\");\n                 }\n                 this.file.print(\"</UL>\\n\");\n                 break;\n             }\n             case 4: {\n                 final LineNumber[] line_numbers = ((LineNumberTable)attribute).getLineNumberTable();\n@@ -117,29 +121,33 @@\n                     }\n                 }\n                 break;\n             }\n             case 5: {\n                 final LocalVariable[] vars = ((LocalVariableTable)attribute).getLocalVariableTable();\n                 this.file.print(\"<UL>\");\n-                for (final LocalVariable var : vars) {\n+                LocalVariable[] array3;\n+                for (int length3 = (array3 = vars).length, l = 0; l < length3; ++l) {\n+                    final LocalVariable var = array3[l];\n                     final int index = var.getSignatureIndex();\n                     String signature = ((ConstantUtf8)this.constant_pool.getConstant(index, (byte)1)).getBytes();\n                     signature = Utility.signatureToString(signature, false);\n                     final int start = var.getStartPC();\n                     final int end = start + var.getLength();\n-                    this.file.println(\"<LI>\" + Class2HTML.referenceType(signature) + \"&nbsp;<B>\" + var.getName() + \"</B> in slot %\" + var.getIndex() + \"<BR>Valid from lines <A HREF=\\\"\" + this.class_name + \"_code.html#code\" + method_number + \"@\" + start + \"\\\" TARGET=Code>\" + start + \"</A> to <A HREF=\\\"\" + this.class_name + \"_code.html#code\" + method_number + \"@\" + end + \"\\\" TARGET=Code>\" + end + \"</A></LI>\");\n+                    this.file.println(\"<LI>\" + Class2HTML.referenceType(signature) + \"&nbsp;<B>\" + var.getName() + \"</B> in slot %\" + var.getIndex() + \"<BR>Valid from lines \" + \"<A HREF=\\\"\" + this.class_name + \"_code.html#code\" + method_number + \"@\" + start + \"\\\" TARGET=Code>\" + start + \"</A> to \" + \"<A HREF=\\\"\" + this.class_name + \"_code.html#code\" + method_number + \"@\" + end + \"\\\" TARGET=Code>\" + end + \"</A></LI>\");\n                 }\n                 this.file.print(\"</UL>\\n\");\n                 break;\n             }\n             case 6: {\n                 final InnerClass[] classes = ((InnerClasses)attribute).getInnerClasses();\n                 this.file.print(\"<UL>\");\n-                for (final InnerClass classe : classes) {\n+                InnerClass[] array4;\n+                for (int length4 = (array4 = classes).length, n = 0; n < length4; ++n) {\n+                    final InnerClass classe = array4[n];\n                     final int index = classe.getInnerNameIndex();\n                     String name;\n                     if (index > 0) {\n                         name = ((ConstantUtf8)this.constant_pool.getConstant(index, (byte)1)).getBytes();\n                     }\n                     else {\n                         name = \"&lt;anonymous&gt;\";\n"}]}
