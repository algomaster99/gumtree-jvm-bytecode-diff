{"diffoscope-json-version": 1, "source1": "first/ModularRuntimeImage.class", "source2": "second/ModularRuntimeImage.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,16 +5,16 @@\n import java.util.Iterator;\n import java.nio.file.DirectoryStream;\n import java.nio.file.Files;\n import java.util.ArrayList;\n import java.util.List;\n import java.nio.file.Path;\n import java.util.Map;\n-import java.net.URL;\n import java.nio.file.Paths;\n+import java.net.URL;\n import java.util.Collections;\n import java.io.IOException;\n import java.nio.file.FileSystems;\n import java.net.URI;\n import java.nio.file.FileSystem;\n import java.net.URLClassLoader;\n import java.io.Closeable;\n@@ -26,50 +26,48 @@\n     private final URLClassLoader classLoader;\n     private final FileSystem fileSystem;\n     \n     public ModularRuntimeImage() throws IOException {\n         this(null, FileSystems.getFileSystem(URI.create(\"jrt:/\")));\n     }\n     \n-    public ModularRuntimeImage(final String javaHome) throws IOException {\n-        final Map<String, ?> emptyMap = Collections.emptyMap();\n-        final Path jrePath = Paths.get(javaHome, new String[0]);\n-        final Path jrtFsPath = jrePath.resolve(\"lib\").resolve(\"jrt-fs.jar\");\n-        this.classLoader = new URLClassLoader(new URL[] { jrtFsPath.toUri().toURL() });\n-        this.fileSystem = FileSystems.newFileSystem(URI.create(\"jrt:/\"), emptyMap, this.classLoader);\n+    public ModularRuntimeImage(final String first) throws IOException {\n+        final Map<Object, Object> emptyMap = (Map<Object, Object>)Collections.emptyMap();\n+        this.classLoader = new URLClassLoader(new URL[] { Paths.get(first, new String[0]).resolve(\"lib\").resolve(\"jrt-fs.jar\").toUri().toURL() });\n+        this.fileSystem = FileSystems.newFileSystem(URI.create(\"jrt:/\"), emptyMap, (ClassLoader)this.classLoader);\n     }\n     \n-    private ModularRuntimeImage(final URLClassLoader cl, final FileSystem fs) {\n-        this.classLoader = cl;\n-        this.fileSystem = fs;\n+    private ModularRuntimeImage(final URLClassLoader classLoader, final FileSystem fileSystem) {\n+        this.classLoader = classLoader;\n+        this.fileSystem = fileSystem;\n     }\n     \n     @Override\n     public void close() throws IOException {\n         if (this.classLoader != null) {\n             this.classLoader.close();\n         }\n         if (this.fileSystem != null) {\n             this.fileSystem.close();\n         }\n     }\n     \n-    public List<Path> list(final Path dirPath) throws IOException {\n-        final List<Path> list = new ArrayList<Path>();\n-        try (final DirectoryStream<Path> ds = Files.newDirectoryStream(dirPath)) {\n-            final Iterator<Path> iterator = ds.iterator();\n+    public List<Path> list(final Path dir) throws IOException {\n+        final ArrayList list = new ArrayList();\n+        try (final DirectoryStream<Path> directoryStream = Files.newDirectoryStream(dir)) {\n+            final Iterator<Path> iterator = directoryStream.iterator();\n             while (iterator.hasNext()) {\n                 list.add(iterator.next());\n             }\n         }\n         return list;\n     }\n     \n-    public List<Path> list(final String dirName) throws IOException {\n-        return this.list(this.fileSystem.getPath(dirName, new String[0]));\n+    public List<Path> list(final String s) throws IOException {\n+        return this.list(this.fileSystem.getPath(s, new String[0]));\n     }\n     \n     public List<Path> modules() throws IOException {\n         return this.list(ModularRuntimeImage.MODULES_PATH);\n     }\n     \n     public List<Path> packages() throws IOException {\n"}]}
