{"diffoscope-json-version": 1, "source1": "first/ZipEncodingHelper.class", "source2": "second/ZipEncodingHelper.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,36 +7,34 @@\n import java.nio.charset.Charset;\n \n public abstract class ZipEncodingHelper\n {\n     static final String UTF8 = \"UTF8\";\n     static final ZipEncoding UTF8_ZIP_ENCODING;\n     \n-    public static ZipEncoding getZipEncoding(final String name) {\n-        Charset cs = Charset.defaultCharset();\n-        if (name != null) {\n+    public static ZipEncoding getZipEncoding(final String charsetName) {\n+        Charset charset = Charset.defaultCharset();\n+        if (charsetName != null) {\n             try {\n-                cs = Charset.forName(name);\n+                charset = Charset.forName(charsetName);\n             }\n             catch (final UnsupportedCharsetException ex) {}\n         }\n-        final boolean useReplacement = isUTF8(cs.name());\n-        return (ZipEncoding)new NioZipEncoding(cs, useReplacement);\n+        return (ZipEncoding)new NioZipEncoding(charset, isUTF8(charset.name()));\n     }\n     \n-    static boolean isUTF8(final String charsetName) {\n-        final String actual = (charsetName != null) ? charsetName : Charset.defaultCharset().name();\n-        return StandardCharsets.UTF_8.name().equalsIgnoreCase(actual) || StandardCharsets.UTF_8.aliases().stream().anyMatch(alias -> alias.equalsIgnoreCase(actual));\n+    static boolean isUTF8(final String s) {\n+        return StandardCharsets.UTF_8.name().equalsIgnoreCase((s != null) ? s : Charset.defaultCharset().name()) || StandardCharsets.UTF_8.aliases().stream().anyMatch(s2 -> s2.equalsIgnoreCase(anotherString));\n     }\n     \n-    static ByteBuffer growBufferBy(final ByteBuffer buffer, final int increment) {\n-        buffer.limit();\n-        buffer.rewind();\n-        final ByteBuffer on = ByteBuffer.allocate(buffer.capacity() + increment);\n-        on.put(buffer);\n-        return on;\n+    static ByteBuffer growBufferBy(final ByteBuffer src, final int n) {\n+        src.limit();\n+        src.rewind();\n+        final ByteBuffer allocate = ByteBuffer.allocate(src.capacity() + n);\n+        allocate.put(src);\n+        return allocate;\n     }\n     \n     static {\n         UTF8_ZIP_ENCODING = getZipEncoding(\"UTF8\");\n     }\n }\n"}]}
