{"diffoscope-json-version": 1, "source1": "first/FilenameUtils.class", "source2": "second/FilenameUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,16 +1,14 @@\n \n package org.apache.commons.io;\n \n import java.io.File;\n-import java.util.List;\n import java.util.Arrays;\n import java.util.regex.Matcher;\n import java.util.ArrayList;\n-import java.util.Deque;\n import java.util.ArrayDeque;\n import java.util.Iterator;\n import java.util.Collection;\n import java.util.Objects;\n import java.io.IOException;\n import java.util.regex.Pattern;\n \n@@ -33,658 +31,644 @@\n     private static final int BASE_16 = 16;\n     private static final Pattern REG_NAME_PART_PATTERN;\n     \n     static boolean isSystemWindows() {\n         return FilenameUtils.SYSTEM_SEPARATOR == '\\\\';\n     }\n     \n-    private static boolean isSeparator(final char ch) {\n-        return ch == '/' || ch == '\\\\';\n+    private static boolean isSeparator(final char c) {\n+        return c == '/' || c == '\\\\';\n     }\n     \n-    public static String normalize(final String fileName) {\n-        return doNormalize(fileName, FilenameUtils.SYSTEM_SEPARATOR, true);\n+    public static String normalize(final String s) {\n+        return doNormalize(s, FilenameUtils.SYSTEM_SEPARATOR, true);\n     }\n     \n-    public static String normalize(final String fileName, final boolean unixSeparator) {\n-        final char separator = unixSeparator ? '/' : '\\\\';\n-        return doNormalize(fileName, separator, true);\n+    public static String normalize(final String s, final boolean b) {\n+        return doNormalize(s, b ? '/' : '\\\\', true);\n     }\n     \n-    public static String normalizeNoEndSeparator(final String fileName) {\n-        return doNormalize(fileName, FilenameUtils.SYSTEM_SEPARATOR, false);\n+    public static String normalizeNoEndSeparator(final String s) {\n+        return doNormalize(s, FilenameUtils.SYSTEM_SEPARATOR, false);\n     }\n     \n-    public static String normalizeNoEndSeparator(final String fileName, final boolean unixSeparator) {\n-        final char separator = unixSeparator ? '/' : '\\\\';\n-        return doNormalize(fileName, separator, false);\n+    public static String normalizeNoEndSeparator(final String s, final boolean b) {\n+        return doNormalize(s, b ? '/' : '\\\\', false);\n     }\n     \n-    private static String doNormalize(final String fileName, final char separator, final boolean keepSeparator) {\n-        if (fileName == null) {\n+    private static String doNormalize(final String s, final char c, final boolean b) {\n+        if (s == null) {\n             return null;\n         }\n-        failIfNullBytePresent(fileName);\n-        int size = fileName.length();\n-        if (size == 0) {\n-            return fileName;\n+        failIfNullBytePresent(s);\n+        int length = s.length();\n+        if (length == 0) {\n+            return s;\n         }\n-        final int prefix = getPrefixLength(fileName);\n-        if (prefix < 0) {\n+        final int prefixLength = getPrefixLength(s);\n+        if (prefixLength < 0) {\n             return null;\n         }\n-        final char[] array = new char[size + 2];\n-        fileName.getChars(0, fileName.length(), array, 0);\n-        final char otherSeparator = (separator == FilenameUtils.SYSTEM_SEPARATOR) ? FilenameUtils.OTHER_SEPARATOR : FilenameUtils.SYSTEM_SEPARATOR;\n+        final char[] array = new char[length + 2];\n+        s.getChars(0, s.length(), array, 0);\n+        final char c2 = (c == FilenameUtils.SYSTEM_SEPARATOR) ? FilenameUtils.OTHER_SEPARATOR : FilenameUtils.SYSTEM_SEPARATOR;\n         for (int i = 0; i < array.length; ++i) {\n-            if (array[i] == otherSeparator) {\n-                array[i] = separator;\n+            if (array[i] == c2) {\n+                array[i] = c;\n             }\n         }\n-        boolean lastIsDirectory = true;\n-        if (array[size - 1] != separator) {\n-            array[size++] = separator;\n-            lastIsDirectory = false;\n-        }\n-        for (int j = prefix + 1; j < size; ++j) {\n-            if (array[j] == separator && array[j - 1] == separator) {\n-                System.arraycopy(array, j, array, j - 1, size - j);\n-                --size;\n+        boolean b2 = true;\n+        if (array[length - 1] != c) {\n+            array[length++] = c;\n+            b2 = false;\n+        }\n+        for (int j = prefixLength + 1; j < length; ++j) {\n+            if (array[j] == c && array[j - 1] == c) {\n+                System.arraycopy(array, j, array, j - 1, length - j);\n+                --length;\n                 --j;\n             }\n         }\n-        for (int j = prefix + 1; j < size; ++j) {\n-            if (array[j] == separator && array[j - 1] == '.' && (j == prefix + 1 || array[j - 2] == separator)) {\n-                if (j == size - 1) {\n-                    lastIsDirectory = true;\n-                }\n-                System.arraycopy(array, j + 1, array, j - 1, size - j);\n-                size -= 2;\n-                --j;\n+        for (int k = prefixLength + 1; k < length; ++k) {\n+            if (array[k] == c && array[k - 1] == '.' && (k == prefixLength + 1 || array[k - 2] == c)) {\n+                if (k == length - 1) {\n+                    b2 = true;\n+                }\n+                System.arraycopy(array, k + 1, array, k - 1, length - k);\n+                length -= 2;\n+                --k;\n             }\n         }\n     Label_0468:\n-        for (int j = prefix + 2; j < size; ++j) {\n-            if (array[j] == separator && array[j - 1] == '.' && array[j - 2] == '.' && (j == prefix + 2 || array[j - 3] == separator)) {\n-                if (j == prefix + 2) {\n+        for (int l = prefixLength + 2; l < length; ++l) {\n+            if (array[l] == c && array[l - 1] == '.' && array[l - 2] == '.' && (l == prefixLength + 2 || array[l - 3] == c)) {\n+                if (l == prefixLength + 2) {\n                     return null;\n                 }\n-                if (j == size - 1) {\n-                    lastIsDirectory = true;\n+                if (l == length - 1) {\n+                    b2 = true;\n                 }\n-                for (int k = j - 4; k >= prefix; --k) {\n-                    if (array[k] == separator) {\n-                        System.arraycopy(array, j + 1, array, k + 1, size - j);\n-                        size -= j - k;\n-                        j = k + 1;\n+                for (int n = l - 4; n >= prefixLength; --n) {\n+                    if (array[n] == c) {\n+                        System.arraycopy(array, l + 1, array, n + 1, length - l);\n+                        length -= l - n;\n+                        l = n + 1;\n                         continue Label_0468;\n                     }\n                 }\n-                System.arraycopy(array, j + 1, array, prefix, size - j);\n-                size -= j + 1 - prefix;\n-                j = prefix + 1;\n+                System.arraycopy(array, l + 1, array, prefixLength, length - l);\n+                length -= l + 1 - prefixLength;\n+                l = prefixLength + 1;\n             }\n         }\n-        if (size <= 0) {\n+        if (length <= 0) {\n             return \"\";\n         }\n-        if (size <= prefix) {\n-            return new String(array, 0, size);\n+        if (length <= prefixLength) {\n+            return new String(array, 0, length);\n         }\n-        if (lastIsDirectory && keepSeparator) {\n-            return new String(array, 0, size);\n+        if (b2 && b) {\n+            return new String(array, 0, length);\n         }\n-        return new String(array, 0, size - 1);\n+        return new String(array, 0, length - 1);\n     }\n     \n-    public static String concat(final String basePath, final String fullFileNameToAdd) {\n-        final int prefix = getPrefixLength(fullFileNameToAdd);\n-        if (prefix < 0) {\n+    public static String concat(final String s, final String s2) {\n+        final int prefixLength = getPrefixLength(s2);\n+        if (prefixLength < 0) {\n             return null;\n         }\n-        if (prefix > 0) {\n-            return normalize(fullFileNameToAdd);\n+        if (prefixLength > 0) {\n+            return normalize(s2);\n         }\n-        if (basePath == null) {\n+        if (s == null) {\n             return null;\n         }\n-        final int len = basePath.length();\n-        if (len == 0) {\n-            return normalize(fullFileNameToAdd);\n+        final int length = s.length();\n+        if (length == 0) {\n+            return normalize(s2);\n         }\n-        final char ch = basePath.charAt(len - 1);\n-        if (isSeparator(ch)) {\n-            return normalize(basePath + fullFileNameToAdd);\n+        if (isSeparator(s.charAt(length - 1))) {\n+            return normalize(s + s2);\n         }\n-        return normalize(basePath + '/' + fullFileNameToAdd);\n+        return normalize(s + '/' + s2);\n     }\n     \n-    public static boolean directoryContains(final String canonicalParent, final String canonicalChild) throws IOException {\n-        if (canonicalParent == null) {\n+    public static boolean directoryContains(final String s, final String s2) throws IOException {\n+        if (s == null) {\n             throw new IllegalArgumentException(\"Directory must not be null\");\n         }\n-        return canonicalChild != null && !IOCase.SYSTEM.checkEquals(canonicalParent, canonicalChild) && IOCase.SYSTEM.checkStartsWith(canonicalChild, canonicalParent);\n+        return s2 != null && !IOCase.SYSTEM.checkEquals(s, s2) && IOCase.SYSTEM.checkStartsWith(s2, s);\n     }\n     \n-    public static String separatorsToUnix(final String path) {\n-        if (path == null || path.indexOf(92) == -1) {\n-            return path;\n+    public static String separatorsToUnix(final String s) {\n+        if (s == null || s.indexOf(92) == -1) {\n+            return s;\n         }\n-        return path.replace('\\\\', '/');\n+        return s.replace('\\\\', '/');\n     }\n     \n-    public static String separatorsToWindows(final String path) {\n-        if (path == null || path.indexOf(47) == -1) {\n-            return path;\n+    public static String separatorsToWindows(final String s) {\n+        if (s == null || s.indexOf(47) == -1) {\n+            return s;\n         }\n-        return path.replace('/', '\\\\');\n+        return s.replace('/', '\\\\');\n     }\n     \n-    public static String separatorsToSystem(final String path) {\n-        if (path == null) {\n+    public static String separatorsToSystem(final String s) {\n+        if (s == null) {\n             return null;\n         }\n-        return isSystemWindows() ? separatorsToWindows(path) : separatorsToUnix(path);\n+        return isSystemWindows() ? separatorsToWindows(s) : separatorsToUnix(s);\n     }\n     \n-    public static int getPrefixLength(final String fileName) {\n-        if (fileName == null) {\n+    public static int getPrefixLength(final String s) {\n+        if (s == null) {\n             return -1;\n         }\n-        final int len = fileName.length();\n-        if (len == 0) {\n+        final int length = s.length();\n+        if (length == 0) {\n             return 0;\n         }\n-        char ch0 = fileName.charAt(0);\n-        if (ch0 == ':') {\n+        final char char1 = s.charAt(0);\n+        if (char1 == ':') {\n             return -1;\n         }\n-        if (len == 1) {\n-            if (ch0 == '~') {\n+        if (length == 1) {\n+            if (char1 == '~') {\n                 return 2;\n             }\n-            return isSeparator(ch0) ? 1 : 0;\n+            return isSeparator(char1) ? 1 : 0;\n         }\n-        else if (ch0 == '~') {\n-            int posUnix = fileName.indexOf(47, 1);\n-            int posWin = fileName.indexOf(92, 1);\n-            if (posUnix == -1 && posWin == -1) {\n-                return len + 1;\n-            }\n-            posUnix = ((posUnix == -1) ? posWin : posUnix);\n-            posWin = ((posWin == -1) ? posUnix : posWin);\n-            return Math.min(posUnix, posWin) + 1;\n+        else if (char1 == '~') {\n+            final int index = s.indexOf(47, 1);\n+            final int index2 = s.indexOf(92, 1);\n+            if (index == -1 && index2 == -1) {\n+                return length + 1;\n+            }\n+            final int a = (index == -1) ? index2 : index;\n+            return Math.min(a, (index2 == -1) ? a : index2) + 1;\n         }\n         else {\n-            final char ch2 = fileName.charAt(1);\n-            if (ch2 == ':') {\n-                ch0 = Character.toUpperCase(ch0);\n-                if (ch0 >= 'A' && ch0 <= 'Z') {\n-                    if (len == 2 || !isSeparator(fileName.charAt(2))) {\n+            final char char2 = s.charAt(1);\n+            if (char2 == ':') {\n+                final char upperCase = Character.toUpperCase(char1);\n+                if (upperCase >= 'A' && upperCase <= 'Z') {\n+                    if (length == 2 || !isSeparator(s.charAt(2))) {\n                         return 2;\n                     }\n                     return 3;\n                 }\n                 else {\n-                    if (ch0 == '/') {\n+                    if (upperCase == '/') {\n                         return 1;\n                     }\n                     return -1;\n                 }\n             }\n             else {\n-                if (!isSeparator(ch0) || !isSeparator(ch2)) {\n-                    return isSeparator(ch0) ? 1 : 0;\n+                if (!isSeparator(char1) || !isSeparator(char2)) {\n+                    return isSeparator(char1) ? 1 : 0;\n                 }\n-                int posUnix2 = fileName.indexOf(47, 2);\n-                int posWin2 = fileName.indexOf(92, 2);\n-                if ((posUnix2 == -1 && posWin2 == -1) || posUnix2 == 2 || posWin2 == 2) {\n+                final int index3 = s.indexOf(47, 2);\n+                final int index4 = s.indexOf(92, 2);\n+                if ((index3 == -1 && index4 == -1) || index3 == 2 || index4 == 2) {\n                     return -1;\n                 }\n-                posUnix2 = ((posUnix2 == -1) ? posWin2 : posUnix2);\n-                posWin2 = ((posWin2 == -1) ? posUnix2 : posWin2);\n-                final int pos = Math.min(posUnix2, posWin2) + 1;\n-                final String hostnamePart = fileName.substring(2, pos - 1);\n-                return isValidHostName(hostnamePart) ? pos : -1;\n+                final int a2 = (index3 == -1) ? index4 : index3;\n+                final int n = Math.min(a2, (index4 == -1) ? a2 : index4) + 1;\n+                return isValidHostName(s.substring(2, n - 1)) ? n : -1;\n             }\n         }\n     }\n     \n-    public static int indexOfLastSeparator(final String fileName) {\n-        if (fileName == null) {\n+    public static int indexOfLastSeparator(final String s) {\n+        if (s == null) {\n             return -1;\n         }\n-        final int lastUnixPos = fileName.lastIndexOf(47);\n-        final int lastWindowsPos = fileName.lastIndexOf(92);\n-        return Math.max(lastUnixPos, lastWindowsPos);\n+        return Math.max(s.lastIndexOf(47), s.lastIndexOf(92));\n     }\n     \n-    public static int indexOfExtension(final String fileName) throws IllegalArgumentException {\n-        if (fileName == null) {\n+    public static int indexOfExtension(final String s) throws IllegalArgumentException {\n+        if (s == null) {\n             return -1;\n         }\n-        if (isSystemWindows()) {\n-            final int offset = fileName.indexOf(58, getAdsCriticalOffset(fileName));\n-            if (offset != -1) {\n-                throw new IllegalArgumentException(\"NTFS ADS separator (':') in file name is forbidden.\");\n-            }\n+        if (isSystemWindows() && s.indexOf(58, getAdsCriticalOffset(s)) != -1) {\n+            throw new IllegalArgumentException(\"NTFS ADS separator (':') in file name is forbidden.\");\n         }\n-        final int extensionPos = fileName.lastIndexOf(46);\n-        final int lastSeparator = indexOfLastSeparator(fileName);\n-        return (lastSeparator > extensionPos) ? -1 : extensionPos;\n+        final int lastIndex = s.lastIndexOf(46);\n+        return (indexOfLastSeparator(s) > lastIndex) ? -1 : lastIndex;\n     }\n     \n-    public static String getPrefix(final String fileName) {\n-        if (fileName == null) {\n+    public static String getPrefix(final String s) {\n+        if (s == null) {\n             return null;\n         }\n-        final int len = getPrefixLength(fileName);\n-        if (len < 0) {\n+        final int prefixLength = getPrefixLength(s);\n+        if (prefixLength < 0) {\n             return null;\n         }\n-        if (len > fileName.length()) {\n-            failIfNullBytePresent(fileName + '/');\n-            return fileName + '/';\n+        if (prefixLength > s.length()) {\n+            failIfNullBytePresent(s + '/');\n+            return s + '/';\n         }\n-        final String path = fileName.substring(0, len);\n-        failIfNullBytePresent(path);\n-        return path;\n+        final String substring = s.substring(0, prefixLength);\n+        failIfNullBytePresent(substring);\n+        return substring;\n     }\n     \n-    public static String getPath(final String fileName) {\n-        return doGetPath(fileName, 1);\n+    public static String getPath(final String s) {\n+        return doGetPath(s, 1);\n     }\n     \n-    public static String getPathNoEndSeparator(final String fileName) {\n-        return doGetPath(fileName, 0);\n+    public static String getPathNoEndSeparator(final String s) {\n+        return doGetPath(s, 0);\n     }\n     \n-    private static String doGetPath(final String fileName, final int separatorAdd) {\n-        if (fileName == null) {\n+    private static String doGetPath(final String s, final int n) {\n+        if (s == null) {\n             return null;\n         }\n-        final int prefix = getPrefixLength(fileName);\n-        if (prefix < 0) {\n+        final int prefixLength = getPrefixLength(s);\n+        if (prefixLength < 0) {\n             return null;\n         }\n-        final int index = indexOfLastSeparator(fileName);\n-        final int endIndex = index + separatorAdd;\n-        if (prefix >= fileName.length() || index < 0 || prefix >= endIndex) {\n+        final int indexOfLastSeparator = indexOfLastSeparator(s);\n+        final int endIndex = indexOfLastSeparator + n;\n+        if (prefixLength >= s.length() || indexOfLastSeparator < 0 || prefixLength >= endIndex) {\n             return \"\";\n         }\n-        final String path = fileName.substring(prefix, endIndex);\n-        failIfNullBytePresent(path);\n-        return path;\n+        final String substring = s.substring(prefixLength, endIndex);\n+        failIfNullBytePresent(substring);\n+        return substring;\n     }\n     \n-    public static String getFullPath(final String fileName) {\n-        return doGetFullPath(fileName, true);\n+    public static String getFullPath(final String s) {\n+        return doGetFullPath(s, true);\n     }\n     \n-    public static String getFullPathNoEndSeparator(final String fileName) {\n-        return doGetFullPath(fileName, false);\n+    public static String getFullPathNoEndSeparator(final String s) {\n+        return doGetFullPath(s, false);\n     }\n     \n-    private static String doGetFullPath(final String fileName, final boolean includeSeparator) {\n-        if (fileName == null) {\n+    private static String doGetFullPath(final String s, final boolean b) {\n+        if (s == null) {\n             return null;\n         }\n-        final int prefix = getPrefixLength(fileName);\n-        if (prefix < 0) {\n+        final int prefixLength = getPrefixLength(s);\n+        if (prefixLength < 0) {\n             return null;\n         }\n-        if (prefix >= fileName.length()) {\n-            if (includeSeparator) {\n-                return getPrefix(fileName);\n+        if (prefixLength >= s.length()) {\n+            if (b) {\n+                return getPrefix(s);\n             }\n-            return fileName;\n+            return s;\n         }\n         else {\n-            final int index = indexOfLastSeparator(fileName);\n-            if (index < 0) {\n-                return fileName.substring(0, prefix);\n+            final int indexOfLastSeparator = indexOfLastSeparator(s);\n+            if (indexOfLastSeparator < 0) {\n+                return s.substring(0, prefixLength);\n             }\n-            int end = index + (includeSeparator ? 1 : 0);\n-            if (end == 0) {\n-                ++end;\n+            int endIndex = indexOfLastSeparator + (b ? 1 : 0);\n+            if (endIndex == 0) {\n+                ++endIndex;\n             }\n-            return fileName.substring(0, end);\n+            return s.substring(0, endIndex);\n         }\n     }\n     \n-    public static String getName(final String fileName) {\n-        if (fileName == null) {\n+    public static String getName(final String s) {\n+        if (s == null) {\n             return null;\n         }\n-        failIfNullBytePresent(fileName);\n-        final int index = indexOfLastSeparator(fileName);\n-        return fileName.substring(index + 1);\n+        failIfNullBytePresent(s);\n+        return s.substring(indexOfLastSeparator(s) + 1);\n     }\n     \n-    private static void failIfNullBytePresent(final String path) {\n-        for (int len = path.length(), i = 0; i < len; ++i) {\n-            if (path.charAt(i) == '\\0') {\n+    private static void failIfNullBytePresent(final String s) {\n+        for (int length = s.length(), i = 0; i < length; ++i) {\n+            if (s.charAt(i) == '\\0') {\n                 throw new IllegalArgumentException(\"Null byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it\");\n             }\n         }\n     }\n     \n-    public static String getBaseName(final String fileName) {\n-        return removeExtension(getName(fileName));\n+    public static String getBaseName(final String s) {\n+        return removeExtension(getName(s));\n     }\n     \n-    public static String getExtension(final String fileName) throws IllegalArgumentException {\n-        if (fileName == null) {\n+    public static String getExtension(final String s) throws IllegalArgumentException {\n+        if (s == null) {\n             return null;\n         }\n-        final int index = indexOfExtension(fileName);\n-        if (index == -1) {\n+        final int indexOfExtension = indexOfExtension(s);\n+        if (indexOfExtension == -1) {\n             return \"\";\n         }\n-        return fileName.substring(index + 1);\n+        return s.substring(indexOfExtension + 1);\n     }\n     \n-    private static int getAdsCriticalOffset(final String fileName) {\n-        final int offset1 = fileName.lastIndexOf(FilenameUtils.SYSTEM_SEPARATOR);\n-        final int offset2 = fileName.lastIndexOf(FilenameUtils.OTHER_SEPARATOR);\n-        if (offset1 == -1) {\n-            if (offset2 == -1) {\n+    private static int getAdsCriticalOffset(final String s) {\n+        final int lastIndex = s.lastIndexOf(FilenameUtils.SYSTEM_SEPARATOR);\n+        final int lastIndex2 = s.lastIndexOf(FilenameUtils.OTHER_SEPARATOR);\n+        if (lastIndex == -1) {\n+            if (lastIndex2 == -1) {\n                 return 0;\n             }\n-            return offset2 + 1;\n+            return lastIndex2 + 1;\n         }\n         else {\n-            if (offset2 == -1) {\n-                return offset1 + 1;\n+            if (lastIndex2 == -1) {\n+                return lastIndex + 1;\n             }\n-            return Math.max(offset1, offset2) + 1;\n+            return Math.max(lastIndex, lastIndex2) + 1;\n         }\n     }\n     \n-    public static String removeExtension(final String fileName) {\n-        if (fileName == null) {\n+    public static String removeExtension(final String s) {\n+        if (s == null) {\n             return null;\n         }\n-        failIfNullBytePresent(fileName);\n-        final int index = indexOfExtension(fileName);\n-        if (index == -1) {\n-            return fileName;\n+        failIfNullBytePresent(s);\n+        final int indexOfExtension = indexOfExtension(s);\n+        if (indexOfExtension == -1) {\n+            return s;\n         }\n-        return fileName.substring(0, index);\n+        return s.substring(0, indexOfExtension);\n     }\n     \n-    public static boolean equals(final String fileName1, final String fileName2) {\n-        return equals(fileName1, fileName2, false, IOCase.SENSITIVE);\n+    public static boolean equals(final String s, final String s2) {\n+        return equals(s, s2, false, IOCase.SENSITIVE);\n     }\n     \n-    public static boolean equalsOnSystem(final String fileName1, final String fileName2) {\n-        return equals(fileName1, fileName2, false, IOCase.SYSTEM);\n+    public static boolean equalsOnSystem(final String s, final String s2) {\n+        return equals(s, s2, false, IOCase.SYSTEM);\n     }\n     \n-    public static boolean equalsNormalized(final String fileName1, final String fileName2) {\n-        return equals(fileName1, fileName2, true, IOCase.SENSITIVE);\n+    public static boolean equalsNormalized(final String s, final String s2) {\n+        return equals(s, s2, true, IOCase.SENSITIVE);\n     }\n     \n-    public static boolean equalsNormalizedOnSystem(final String fileName1, final String fileName2) {\n-        return equals(fileName1, fileName2, true, IOCase.SYSTEM);\n+    public static boolean equalsNormalizedOnSystem(final String s, final String s2) {\n+        return equals(s, s2, true, IOCase.SYSTEM);\n     }\n     \n-    public static boolean equals(String fileName1, String fileName2, final boolean normalized, IOCase caseSensitivity) {\n-        if (fileName1 == null || fileName2 == null) {\n-            return fileName1 == null && fileName2 == null;\n+    public static boolean equals(String normalize, String normalize2, final boolean b, IOCase sensitive) {\n+        if (normalize == null || normalize2 == null) {\n+            return normalize == null && normalize2 == null;\n         }\n-        if (normalized) {\n-            fileName1 = normalize(fileName1);\n-            fileName2 = normalize(fileName2);\n-            Objects.requireNonNull(fileName1, \"Error normalizing one or both of the file names\");\n-            Objects.requireNonNull(fileName2, \"Error normalizing one or both of the file names\");\n+        if (b) {\n+            normalize = normalize(normalize);\n+            normalize2 = normalize(normalize2);\n+            Objects.requireNonNull(normalize, \"Error normalizing one or both of the file names\");\n+            Objects.requireNonNull(normalize2, \"Error normalizing one or both of the file names\");\n         }\n-        if (caseSensitivity == null) {\n-            caseSensitivity = IOCase.SENSITIVE;\n+        if (sensitive == null) {\n+            sensitive = IOCase.SENSITIVE;\n         }\n-        return caseSensitivity.checkEquals(fileName1, fileName2);\n+        return sensitive.checkEquals(normalize, normalize2);\n     }\n     \n-    public static boolean isExtension(final String fileName, final String extension) {\n-        if (fileName == null) {\n+    public static boolean isExtension(final String s, final String anObject) {\n+        if (s == null) {\n             return false;\n         }\n-        failIfNullBytePresent(fileName);\n-        if (extension == null || extension.isEmpty()) {\n-            return indexOfExtension(fileName) == -1;\n+        failIfNullBytePresent(s);\n+        if (anObject == null || anObject.isEmpty()) {\n+            return indexOfExtension(s) == -1;\n         }\n-        final String fileExt = getExtension(fileName);\n-        return fileExt.equals(extension);\n+        return getExtension(s).equals(anObject);\n     }\n     \n-    public static boolean isExtension(final String fileName, final String... extensions) {\n-        if (fileName == null) {\n+    public static boolean isExtension(final String s, final String... array) {\n+        if (s == null) {\n             return false;\n         }\n-        failIfNullBytePresent(fileName);\n-        if (extensions == null || extensions.length == 0) {\n-            return indexOfExtension(fileName) == -1;\n-        }\n-        final String fileExt = getExtension(fileName);\n-        for (final String extension : extensions) {\n-            if (fileExt.equals(extension)) {\n+        failIfNullBytePresent(s);\n+        if (array == null || array.length == 0) {\n+            return indexOfExtension(s) == -1;\n+        }\n+        final String extension = getExtension(s);\n+        for (int length = array.length, i = 0; i < length; ++i) {\n+            if (extension.equals(array[i])) {\n                 return true;\n             }\n         }\n         return false;\n     }\n     \n-    public static boolean isExtension(final String fileName, final Collection<String> extensions) {\n-        if (fileName == null) {\n+    public static boolean isExtension(final String s, final Collection<String> collection) {\n+        if (s == null) {\n             return false;\n         }\n-        failIfNullBytePresent(fileName);\n-        if (extensions == null || extensions.isEmpty()) {\n-            return indexOfExtension(fileName) == -1;\n-        }\n-        final String fileExt = getExtension(fileName);\n-        for (final String extension : extensions) {\n-            if (fileExt.equals(extension)) {\n+        failIfNullBytePresent(s);\n+        if (collection == null || collection.isEmpty()) {\n+            return indexOfExtension(s) == -1;\n+        }\n+        final String extension = getExtension(s);\n+        final Iterator iterator = collection.iterator();\n+        while (iterator.hasNext()) {\n+            if (extension.equals(iterator.next())) {\n                 return true;\n             }\n         }\n         return false;\n     }\n     \n-    public static boolean wildcardMatch(final String fileName, final String wildcardMatcher) {\n-        return wildcardMatch(fileName, wildcardMatcher, IOCase.SENSITIVE);\n+    public static boolean wildcardMatch(final String s, final String s2) {\n+        return wildcardMatch(s, s2, IOCase.SENSITIVE);\n     }\n     \n-    public static boolean wildcardMatchOnSystem(final String fileName, final String wildcardMatcher) {\n-        return wildcardMatch(fileName, wildcardMatcher, IOCase.SYSTEM);\n+    public static boolean wildcardMatchOnSystem(final String s, final String s2) {\n+        return wildcardMatch(s, s2, IOCase.SYSTEM);\n     }\n     \n-    public static boolean wildcardMatch(final String fileName, final String wildcardMatcher, IOCase caseSensitivity) {\n-        if (fileName == null && wildcardMatcher == null) {\n+    public static boolean wildcardMatch(final String s, final String s2, IOCase sensitive) {\n+        if (s == null && s2 == null) {\n             return true;\n         }\n-        if (fileName == null || wildcardMatcher == null) {\n+        if (s == null || s2 == null) {\n             return false;\n         }\n-        if (caseSensitivity == null) {\n-            caseSensitivity = IOCase.SENSITIVE;\n+        if (sensitive == null) {\n+            sensitive = IOCase.SENSITIVE;\n         }\n-        final String[] wcs = splitOnTokens(wildcardMatcher);\n-        boolean anyChars = false;\n-        int textIdx = 0;\n-        int wcsIdx = 0;\n-        final Deque<int[]> backtrack = new ArrayDeque<int[]>(wcs.length);\n+        final String[] splitOnTokens = splitOnTokens(s2);\n+        int n = 0;\n+        int n2 = 0;\n+        int i = 0;\n+        final ArrayDeque arrayDeque = new ArrayDeque(splitOnTokens.length);\n         do {\n-            if (!backtrack.isEmpty()) {\n-                final int[] array = (int[])backtrack.pop();\n-                wcsIdx = array[0];\n-                textIdx = array[1];\n-                anyChars = true;\n-            }\n-            while (wcsIdx < wcs.length) {\n-                if (wcs[wcsIdx].equals(\"?\")) {\n-                    if (++textIdx > fileName.length()) {\n+            if (!arrayDeque.isEmpty()) {\n+                final int[] array = (int[])arrayDeque.pop();\n+                i = array[0];\n+                n2 = array[1];\n+                n = 1;\n+            }\n+            while (i < splitOnTokens.length) {\n+                if (splitOnTokens[i].equals(\"?\")) {\n+                    if (++n2 > s.length()) {\n                         break;\n                     }\n-                    anyChars = false;\n+                    n = 0;\n                 }\n-                else if (wcs[wcsIdx].equals(\"*\")) {\n-                    anyChars = true;\n-                    if (wcsIdx == wcs.length - 1) {\n-                        textIdx = fileName.length();\n+                else if (splitOnTokens[i].equals(\"*\")) {\n+                    n = 1;\n+                    if (i == splitOnTokens.length - 1) {\n+                        n2 = s.length();\n                     }\n                 }\n                 else {\n-                    if (anyChars) {\n-                        textIdx = caseSensitivity.checkIndexOf(fileName, textIdx, wcs[wcsIdx]);\n-                        if (textIdx == -1) {\n+                    if (n != 0) {\n+                        n2 = sensitive.checkIndexOf(s, n2, splitOnTokens[i]);\n+                        if (n2 == -1) {\n                             break;\n                         }\n-                        final int repeat = caseSensitivity.checkIndexOf(fileName, textIdx + 1, wcs[wcsIdx]);\n-                        if (repeat >= 0) {\n-                            backtrack.push(new int[] { wcsIdx, repeat });\n+                        final int checkIndex = sensitive.checkIndexOf(s, n2 + 1, splitOnTokens[i]);\n+                        if (checkIndex >= 0) {\n+                            arrayDeque.push((Object)new int[] { i, checkIndex });\n                         }\n                     }\n-                    else if (!caseSensitivity.checkRegionMatches(fileName, textIdx, wcs[wcsIdx])) {\n+                    else if (!sensitive.checkRegionMatches(s, n2, splitOnTokens[i])) {\n                         break;\n                     }\n-                    textIdx += wcs[wcsIdx].length();\n-                    anyChars = false;\n+                    n2 += splitOnTokens[i].length();\n+                    n = 0;\n                 }\n-                ++wcsIdx;\n+                ++i;\n             }\n-            if (wcsIdx == wcs.length && textIdx == fileName.length()) {\n+            if (i == splitOnTokens.length && n2 == s.length()) {\n                 return true;\n             }\n-        } while (!backtrack.isEmpty());\n+        } while (!arrayDeque.isEmpty());\n         return false;\n     }\n     \n-    static String[] splitOnTokens(final String text) {\n-        if (text.indexOf(63) == -1 && text.indexOf(42) == -1) {\n-            return new String[] { text };\n-        }\n-        final char[] array = text.toCharArray();\n-        final ArrayList<String> list = new ArrayList<String>();\n-        final StringBuilder buffer = new StringBuilder();\n-        char prevChar = '\\0';\n-        for (final char ch : array) {\n-            if (ch == '?' || ch == '*') {\n-                if (buffer.length() != 0) {\n-                    list.add(buffer.toString());\n-                    buffer.setLength();\n+    static String[] splitOnTokens(final String s) {\n+        if (s.indexOf(63) == -1 && s.indexOf(42) == -1) {\n+            return new String[] { s };\n+        }\n+        final char[] charArray = s.toCharArray();\n+        final ArrayList list = new ArrayList();\n+        final StringBuilder sb = new StringBuilder();\n+        int n = 0;\n+        for (final char c : charArray) {\n+            if (c == '?' || c == '*') {\n+                if (sb.length() != 0) {\n+                    list.add(sb.toString());\n+                    sb.setLength();\n                 }\n-                if (ch == '?') {\n+                if (c == '?') {\n                     list.add(\"?\");\n                 }\n-                else if (prevChar != '*') {\n+                else if (n != 42) {\n                     list.add(\"*\");\n                 }\n             }\n             else {\n-                buffer.append(ch);\n+                sb.append(c);\n             }\n-            prevChar = ch;\n+            n = c;\n         }\n-        if (buffer.length() != 0) {\n-            list.add(buffer.toString());\n+        if (sb.length() != 0) {\n+            list.add(sb.toString());\n         }\n         return list.toArray(FilenameUtils.EMPTY_STRING_ARRAY);\n     }\n     \n-    private static boolean isValidHostName(final String name) {\n-        return isIPv6Address(name) || isRFC3986HostName(name);\n+    private static boolean isValidHostName(final String s) {\n+        return isIPv6Address(s) || isRFC3986HostName(s);\n     }\n     \n-    private static boolean isIPv4Address(final String name) {\n-        final Matcher m = FilenameUtils.IPV4_PATTERN.matcher(name);\n-        if (!m.matches() || m.groupCount() != 4) {\n+    private static boolean isIPv4Address(final String input) {\n+        final Matcher matcher = FilenameUtils.IPV4_PATTERN.matcher(input);\n+        if (!matcher.matches() || matcher.groupCount() != 4) {\n             return false;\n         }\n         for (int i = 1; i <= 4; ++i) {\n-            final String ipSegment = m.group(i);\n-            final int iIpSegment = Integer.parseInt(ipSegment);\n-            if (iIpSegment > 255) {\n+            final String group = matcher.group(i);\n+            if (Integer.parseInt(group) > 255) {\n                 return false;\n             }\n-            if (ipSegment.length() > 1 && ipSegment.startsWith(\"0\")) {\n+            if (group.length() > 1 && group.startsWith(\"0\")) {\n                 return false;\n             }\n         }\n         return true;\n     }\n     \n-    private static boolean isIPv6Address(final String inet6Address) {\n-        final boolean containsCompressedZeroes = inet6Address.contains(\"::\");\n-        if (containsCompressedZeroes && inet6Address.indexOf(\"::\") != inet6Address.lastIndexOf(\"::\")) {\n+    private static boolean isIPv6Address(final String s) {\n+        final boolean contains = s.contains(\"::\");\n+        if (contains && s.indexOf(\"::\") != s.lastIndexOf(\"::\")) {\n             return false;\n         }\n-        if ((inet6Address.startsWith(\":\") && !inet6Address.startsWith(\"::\")) || (inet6Address.endsWith(\":\") && !inet6Address.endsWith(\"::\"))) {\n+        if ((s.startsWith(\":\") && !s.startsWith(\"::\")) || (s.endsWith(\":\") && !s.endsWith(\"::\"))) {\n             return false;\n         }\n-        String[] octets = inet6Address.split(\":\");\n-        if (containsCompressedZeroes) {\n-            final List<String> octetList = new ArrayList<String>(Arrays.asList(octets));\n-            if (inet6Address.endsWith(\"::\")) {\n-                octetList.add(\"\");\n+        String[] split = s.split(\":\");\n+        if (contains) {\n+            final ArrayList list = new ArrayList(Arrays.asList(split));\n+            if (s.endsWith(\"::\")) {\n+                list.add((Object)\"\");\n             }\n-            else if (inet6Address.startsWith(\"::\") && !octetList.isEmpty()) {\n-                octetList.remove(0);\n+            else if (s.startsWith(\"::\") && !list.isEmpty()) {\n+                list.remove(0);\n             }\n-            octets = octetList.toArray(FilenameUtils.EMPTY_STRING_ARRAY);\n+            split = (String[])list.toArray((Object[])FilenameUtils.EMPTY_STRING_ARRAY);\n         }\n-        if (octets.length > 8) {\n+        if (split.length > 8) {\n             return false;\n         }\n-        int validOctets = 0;\n-        int emptyOctets = 0;\n-        for (int index = 0; index < octets.length; ++index) {\n-            final String octet = octets[index];\n-            if (octet.length() == 0) {\n-                if (++emptyOctets > 1) {\n+        int n = 0;\n+        int n2 = 0;\n+        for (int i = 0; i < split.length; ++i) {\n+            final String s2 = split[i];\n+            if (s2.length() == 0) {\n+                if (++n2 > 1) {\n                     return false;\n                 }\n             }\n             else {\n-                emptyOctets = 0;\n-                if (index == octets.length - 1 && octet.contains(\".\")) {\n-                    if (!isIPv4Address(octet)) {\n+                n2 = 0;\n+                if (i == split.length - 1 && s2.contains(\".\")) {\n+                    if (!isIPv4Address(s2)) {\n                         return false;\n                     }\n-                    validOctets += 2;\n+                    n += 2;\n                     continue;\n                 }\n                 else {\n-                    if (octet.length() > 4) {\n+                    if (s2.length() > 4) {\n                         return false;\n                     }\n-                    int octetInt = 0;\n+                    int int1;\n                     try {\n-                        octetInt = Integer.parseInt(octet, 16);\n+                        int1 = Integer.parseInt(s2, 16);\n                     }\n-                    catch (final NumberFormatException e) {\n+                    catch (final NumberFormatException ex) {\n                         return false;\n                     }\n-                    if (octetInt < 0 || octetInt > 65535) {\n+                    if (int1 < 0 || int1 > 65535) {\n                         return false;\n                     }\n                 }\n             }\n-            ++validOctets;\n+            ++n;\n         }\n-        return validOctets <= 8 && (validOctets >= 8 || containsCompressedZeroes);\n+        return n <= 8 && (n >= 8 || contains);\n     }\n     \n-    private static boolean isRFC3986HostName(final String name) {\n-        final String[] parts = name.split(\"\\\\.\", -1);\n-        for (int i = 0; i < parts.length; ++i) {\n-            if (parts[i].length() == 0) {\n-                return i == parts.length - 1;\n+    private static boolean isRFC3986HostName(final String s) {\n+        final String[] split = s.split(\"\\\\.\", -1);\n+        for (int i = 0; i < split.length; ++i) {\n+            if (split[i].length() == 0) {\n+                return i == split.length - 1;\n             }\n-            if (!FilenameUtils.REG_NAME_PART_PATTERN.matcher(parts[i]).matches()) {\n+            if (!FilenameUtils.REG_NAME_PART_PATTERN.matcher(split[i]).matches()) {\n                 return false;\n             }\n         }\n         return true;\n     }\n     \n     static {\n"}]}
