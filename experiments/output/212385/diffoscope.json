{"diffoscope-json-version": 1, "source1": "first/EventUtils$EventBindingInvocationHandler.class", "source2": "second/EventUtils$EventBindingInvocationHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,27 +11,27 @@\n \n private static class EventBindingInvocationHandler implements InvocationHandler\n {\n     private final Object target;\n     private final String methodName;\n     private final Set<String> eventTypes;\n     \n-    EventBindingInvocationHandler(final Object target, final String methodName, final String[] eventTypes) {\n+    EventBindingInvocationHandler(final Object target, final String methodName, final String[] a) {\n         this.target = target;\n         this.methodName = methodName;\n-        this.eventTypes = new HashSet(Arrays.asList(eventTypes));\n+        this.eventTypes = new HashSet(Arrays.asList(a));\n     }\n     \n     @Override\n-    public Object invoke(final Object proxy, final Method method, final Object[] parameters) throws Throwable {\n+    public Object invoke(final Object o, final Method method, final Object[] array) throws Throwable {\n         if (!this.eventTypes.isEmpty() && !this.eventTypes.contains(method.getName())) {\n             return null;\n         }\n         if (this.hasMatchingParametersMethod(method)) {\n-            return MethodUtils.invokeMethod(this.target, this.methodName, parameters);\n+            return MethodUtils.invokeMethod(this.target, this.methodName, array);\n         }\n         return MethodUtils.invokeMethod(this.target, this.methodName);\n     }\n     \n     private boolean hasMatchingParametersMethod(final Method method) {\n         return MethodUtils.getAccessibleMethod((Class)this.target.getClass(), this.methodName, (Class[])method.getParameterTypes()) != null;\n     }\n"}]}
