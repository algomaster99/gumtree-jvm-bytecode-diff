{"diffoscope-json-version": 1, "source1": "first/FastDatePrinter.class", "source2": "second/FastDatePrinter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -27,350 +27,346 @@\n     private final TimeZone mTimeZone;\n     private final Locale mLocale;\n     private transient FastDatePrinter.Rule[] mRules;\n     private transient int mMaxLengthEstimate;\n     private static final int MAX_DIGITS = 10;\n     private static final ConcurrentMap<FastDatePrinter.TimeZoneDisplayKey, String> cTimeZoneDisplayCache;\n     \n-    protected FastDatePrinter(final String pattern, final TimeZone timeZone, final Locale locale) {\n-        this.mPattern = pattern;\n-        this.mTimeZone = timeZone;\n-        this.mLocale = locale;\n+    protected FastDatePrinter(final String mPattern, final TimeZone mTimeZone, final Locale mLocale) {\n+        this.mPattern = mPattern;\n+        this.mTimeZone = mTimeZone;\n+        this.mLocale = mLocale;\n         this.init();\n     }\n     \n     private void init() {\n-        final List<FastDatePrinter.Rule> rulesList = this.parsePattern();\n-        this.mRules = rulesList.toArray(new FastDatePrinter.Rule[0]);\n-        int len = 0;\n-        int i = this.mRules.length;\n-        while (--i >= 0) {\n-            len += this.mRules[i].estimateLength();\n+        this.mRules = this.parsePattern().toArray(new FastDatePrinter.Rule[0]);\n+        int mMaxLengthEstimate = 0;\n+        int length = this.mRules.length;\n+        while (--length >= 0) {\n+            mMaxLengthEstimate += this.mRules[length].estimateLength();\n         }\n-        this.mMaxLengthEstimate = len;\n+        this.mMaxLengthEstimate = mMaxLengthEstimate;\n     }\n     \n     protected List<FastDatePrinter.Rule> parsePattern() {\n-        final DateFormatSymbols symbols = new DateFormatSymbols(this.mLocale);\n-        final List<FastDatePrinter.Rule> rules = new ArrayList<FastDatePrinter.Rule>();\n-        final String[] ERAs = symbols.getEras();\n-        final String[] months = symbols.getMonths();\n-        final String[] shortMonths = symbols.getShortMonths();\n-        final String[] weekdays = symbols.getWeekdays();\n-        final String[] shortWeekdays = symbols.getShortWeekdays();\n-        final String[] AmPmStrings = symbols.getAmPmStrings();\n+        final DateFormatSymbols dateFormatSymbols = new DateFormatSymbols(this.mLocale);\n+        final ArrayList list = new ArrayList();\n+        final String[] eras = dateFormatSymbols.getEras();\n+        final String[] months = dateFormatSymbols.getMonths();\n+        final String[] shortMonths = dateFormatSymbols.getShortMonths();\n+        final String[] weekdays = dateFormatSymbols.getWeekdays();\n+        final String[] shortWeekdays = dateFormatSymbols.getShortWeekdays();\n+        final String[] amPmStrings = dateFormatSymbols.getAmPmStrings();\n         final int length = this.mPattern.length();\n-        final int[] indexRef = { 0 };\n+        final int[] array = { 0 };\n         for (int i = 0; i < length; ++i) {\n-            indexRef[0] = i;\n-            final String token = this.parseToken(this.mPattern, indexRef);\n-            i = indexRef[0];\n-            final int tokenLen = token.length();\n-            if (tokenLen == 0) {\n+            array[0] = i;\n+            final String token = this.parseToken(this.mPattern, array);\n+            i = array[0];\n+            final int length2 = token.length();\n+            if (length2 == 0) {\n                 break;\n             }\n-            final char c = token.charAt(0);\n-            FastDatePrinter.Rule rule = null;\n-            switch (c) {\n-                case 'G': {\n-                    rule = (FastDatePrinter.Rule)new FastDatePrinter.TextField(0, ERAs);\n+            final char char1 = token.charAt(0);\n+            Object o = null;\n+            switch (char1) {\n+                case 71: {\n+                    o = new FastDatePrinter.TextField(0, eras);\n                     break;\n                 }\n-                case 'Y':\n-                case 'y': {\n-                    if (tokenLen == 2) {\n-                        rule = (FastDatePrinter.Rule)FastDatePrinter.TwoDigitYearField.INSTANCE;\n+                case 89:\n+                case 121: {\n+                    if (length2 == 2) {\n+                        o = FastDatePrinter.TwoDigitYearField.INSTANCE;\n                     }\n                     else {\n-                        rule = (FastDatePrinter.Rule)this.selectNumberRule(1, (tokenLen < 4) ? 4 : tokenLen);\n+                        o = this.selectNumberRule(1, (length2 < 4) ? 4 : length2);\n                     }\n-                    if (c == 'Y') {\n-                        rule = (FastDatePrinter.Rule)new FastDatePrinter.WeekYear((FastDatePrinter.NumberRule)rule);\n+                    if (char1 == 'Y') {\n+                        o = new FastDatePrinter.WeekYear((FastDatePrinter.NumberRule)o);\n                         break;\n                     }\n                     break;\n                 }\n-                case 'M': {\n-                    if (tokenLen >= 4) {\n-                        rule = (FastDatePrinter.Rule)new FastDatePrinter.TextField(2, months);\n+                case 77: {\n+                    if (length2 >= 4) {\n+                        o = new FastDatePrinter.TextField(2, months);\n                         break;\n                     }\n-                    if (tokenLen == 3) {\n-                        rule = (FastDatePrinter.Rule)new FastDatePrinter.TextField(2, shortMonths);\n+                    if (length2 == 3) {\n+                        o = new FastDatePrinter.TextField(2, shortMonths);\n                         break;\n                     }\n-                    if (tokenLen == 2) {\n-                        rule = (FastDatePrinter.Rule)FastDatePrinter.TwoDigitMonthField.INSTANCE;\n+                    if (length2 == 2) {\n+                        o = FastDatePrinter.TwoDigitMonthField.INSTANCE;\n                         break;\n                     }\n-                    rule = (FastDatePrinter.Rule)FastDatePrinter.UnpaddedMonthField.INSTANCE;\n+                    o = FastDatePrinter.UnpaddedMonthField.INSTANCE;\n                     break;\n                 }\n-                case 'd': {\n-                    rule = (FastDatePrinter.Rule)this.selectNumberRule(5, tokenLen);\n+                case 100: {\n+                    o = this.selectNumberRule(5, length2);\n                     break;\n                 }\n-                case 'h': {\n-                    rule = (FastDatePrinter.Rule)new FastDatePrinter.TwelveHourField(this.selectNumberRule(10, tokenLen));\n+                case 104: {\n+                    o = new FastDatePrinter.TwelveHourField(this.selectNumberRule(10, length2));\n                     break;\n                 }\n-                case 'H': {\n-                    rule = (FastDatePrinter.Rule)this.selectNumberRule(11, tokenLen);\n+                case 72: {\n+                    o = this.selectNumberRule(11, length2);\n                     break;\n                 }\n-                case 'm': {\n-                    rule = (FastDatePrinter.Rule)this.selectNumberRule(12, tokenLen);\n+                case 109: {\n+                    o = this.selectNumberRule(12, length2);\n                     break;\n                 }\n-                case 's': {\n-                    rule = (FastDatePrinter.Rule)this.selectNumberRule(13, tokenLen);\n+                case 115: {\n+                    o = this.selectNumberRule(13, length2);\n                     break;\n                 }\n-                case 'S': {\n-                    rule = (FastDatePrinter.Rule)this.selectNumberRule(14, tokenLen);\n+                case 83: {\n+                    o = this.selectNumberRule(14, length2);\n                     break;\n                 }\n-                case 'E': {\n-                    rule = (FastDatePrinter.Rule)new FastDatePrinter.TextField(7, (tokenLen < 4) ? shortWeekdays : weekdays);\n+                case 69: {\n+                    o = new FastDatePrinter.TextField(7, (length2 < 4) ? shortWeekdays : weekdays);\n                     break;\n                 }\n-                case 'u': {\n-                    rule = (FastDatePrinter.Rule)new FastDatePrinter.DayInWeekField(this.selectNumberRule(7, tokenLen));\n+                case 117: {\n+                    o = new FastDatePrinter.DayInWeekField(this.selectNumberRule(7, length2));\n                     break;\n                 }\n-                case 'D': {\n-                    rule = (FastDatePrinter.Rule)this.selectNumberRule(6, tokenLen);\n+                case 68: {\n+                    o = this.selectNumberRule(6, length2);\n                     break;\n                 }\n-                case 'F': {\n-                    rule = (FastDatePrinter.Rule)this.selectNumberRule(8, tokenLen);\n+                case 70: {\n+                    o = this.selectNumberRule(8, length2);\n                     break;\n                 }\n-                case 'w': {\n-                    rule = (FastDatePrinter.Rule)this.selectNumberRule(3, tokenLen);\n+                case 119: {\n+                    o = this.selectNumberRule(3, length2);\n                     break;\n                 }\n-                case 'W': {\n-                    rule = (FastDatePrinter.Rule)this.selectNumberRule(4, tokenLen);\n+                case 87: {\n+                    o = this.selectNumberRule(4, length2);\n                     break;\n                 }\n-                case 'a': {\n-                    rule = (FastDatePrinter.Rule)new FastDatePrinter.TextField(9, AmPmStrings);\n+                case 97: {\n+                    o = new FastDatePrinter.TextField(9, amPmStrings);\n                     break;\n                 }\n-                case 'k': {\n-                    rule = (FastDatePrinter.Rule)new FastDatePrinter.TwentyFourHourField(this.selectNumberRule(11, tokenLen));\n+                case 107: {\n+                    o = new FastDatePrinter.TwentyFourHourField(this.selectNumberRule(11, length2));\n                     break;\n                 }\n-                case 'K': {\n-                    rule = (FastDatePrinter.Rule)this.selectNumberRule(10, tokenLen);\n+                case 75: {\n+                    o = this.selectNumberRule(10, length2);\n                     break;\n                 }\n-                case 'X': {\n-                    rule = (FastDatePrinter.Rule)FastDatePrinter.Iso8601_Rule.getRule(tokenLen);\n+                case 88: {\n+                    o = FastDatePrinter.Iso8601_Rule.getRule(length2);\n                     break;\n                 }\n-                case 'z': {\n-                    if (tokenLen >= 4) {\n-                        rule = (FastDatePrinter.Rule)new FastDatePrinter.TimeZoneNameRule(this.mTimeZone, this.mLocale, 1);\n+                case 122: {\n+                    if (length2 >= 4) {\n+                        o = new FastDatePrinter.TimeZoneNameRule(this.mTimeZone, this.mLocale, 1);\n                         break;\n                     }\n-                    rule = (FastDatePrinter.Rule)new FastDatePrinter.TimeZoneNameRule(this.mTimeZone, this.mLocale, 0);\n+                    o = new FastDatePrinter.TimeZoneNameRule(this.mTimeZone, this.mLocale, 0);\n                     break;\n                 }\n-                case 'Z': {\n-                    if (tokenLen == 1) {\n-                        rule = (FastDatePrinter.Rule)FastDatePrinter.TimeZoneNumberRule.INSTANCE_NO_COLON;\n+                case 90: {\n+                    if (length2 == 1) {\n+                        o = FastDatePrinter.TimeZoneNumberRule.INSTANCE_NO_COLON;\n                         break;\n                     }\n-                    if (tokenLen == 2) {\n-                        rule = (FastDatePrinter.Rule)FastDatePrinter.Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n+                    if (length2 == 2) {\n+                        o = FastDatePrinter.Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                         break;\n                     }\n-                    rule = (FastDatePrinter.Rule)FastDatePrinter.TimeZoneNumberRule.INSTANCE_COLON;\n+                    o = FastDatePrinter.TimeZoneNumberRule.INSTANCE_COLON;\n                     break;\n                 }\n-                case '\\'': {\n-                    final String sub = token.substring(1);\n-                    if (sub.length() == 1) {\n-                        rule = (FastDatePrinter.Rule)new FastDatePrinter.CharacterLiteral(sub.charAt(0));\n+                case 39: {\n+                    final String substring = token.substring(1);\n+                    if (substring.length() == 1) {\n+                        o = new FastDatePrinter.CharacterLiteral(substring.charAt(0));\n                         break;\n                     }\n-                    rule = (FastDatePrinter.Rule)new FastDatePrinter.StringLiteral(sub);\n+                    o = new FastDatePrinter.StringLiteral(substring);\n                     break;\n                 }\n                 default: {\n                     throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n                 }\n             }\n-            rules.add(rule);\n+            list.add(o);\n         }\n-        return rules;\n+        return list;\n     }\n     \n-    protected String parseToken(final String pattern, final int[] indexRef) {\n-        final StringBuilder buf = new StringBuilder();\n-        int i = indexRef[0];\n-        final int length = pattern.length();\n-        char c = pattern.charAt(i);\n-        if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {\n-            buf.append(c);\n-            while (i + 1 < length) {\n-                final char peek = pattern.charAt(i + 1);\n-                if (peek != c) {\n-                    break;\n-                }\n-                buf.append(c);\n+    protected String parseToken(final String s, final int[] array) {\n+        final StringBuilder sb = new StringBuilder();\n+        int i = array[0];\n+        final int length = s.length();\n+        final char char1 = s.charAt(i);\n+        if ((char1 >= 'A' && char1 <= 'Z') || (char1 >= 'a' && char1 <= 'z')) {\n+            sb.append(char1);\n+            while (i + 1 < length && s.charAt(i + 1) == char1) {\n+                sb.append(char1);\n                 ++i;\n             }\n         }\n         else {\n-            buf.append('\\'');\n-            boolean inLiteral = false;\n+            sb.append('\\'');\n+            boolean b = false;\n             while (i < length) {\n-                c = pattern.charAt(i);\n-                if (c == '\\'') {\n-                    if (i + 1 < length && pattern.charAt(i + 1) == '\\'') {\n+                final char char2 = s.charAt(i);\n+                if (char2 == '\\'') {\n+                    if (i + 1 < length && s.charAt(i + 1) == '\\'') {\n                         ++i;\n-                        buf.append(c);\n+                        sb.append(char2);\n                     }\n                     else {\n-                        inLiteral = !inLiteral;\n+                        b = !b;\n                     }\n                 }\n                 else {\n-                    if (!inLiteral && ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))) {\n+                    if (!b && ((char2 >= 'A' && char2 <= 'Z') || (char2 >= 'a' && char2 <= 'z'))) {\n                         --i;\n                         break;\n                     }\n-                    buf.append(c);\n+                    sb.append(char2);\n                 }\n                 ++i;\n             }\n         }\n-        indexRef[0] = i;\n-        return buf.toString();\n+        array[0] = i;\n+        return sb.toString();\n     }\n     \n-    protected FastDatePrinter.NumberRule selectNumberRule(final int field, final int padding) {\n-        switch (padding) {\n+    protected FastDatePrinter.NumberRule selectNumberRule(final int n, final int n2) {\n+        switch (n2) {\n             case 1: {\n-                return (FastDatePrinter.NumberRule)new FastDatePrinter.UnpaddedNumberField(field);\n+                return (FastDatePrinter.NumberRule)new FastDatePrinter.UnpaddedNumberField(n);\n             }\n             case 2: {\n-                return (FastDatePrinter.NumberRule)new FastDatePrinter.TwoDigitNumberField(field);\n+                return (FastDatePrinter.NumberRule)new FastDatePrinter.TwoDigitNumberField(n);\n             }\n             default: {\n-                return (FastDatePrinter.NumberRule)new FastDatePrinter.PaddedNumberField(field, padding);\n+                return (FastDatePrinter.NumberRule)new FastDatePrinter.PaddedNumberField(n, n2);\n             }\n         }\n     }\n     \n     @Deprecated\n-    public StringBuffer format(final Object obj, final StringBuffer toAppendTo, final FieldPosition pos) {\n-        if (obj instanceof Date) {\n-            return this.format((Date)obj, toAppendTo);\n+    public StringBuffer format(final Object o, final StringBuffer sb, final FieldPosition fieldPosition) {\n+        if (o instanceof Date) {\n+            return this.format((Date)o, sb);\n         }\n-        if (obj instanceof Calendar) {\n-            return this.format((Calendar)obj, toAppendTo);\n+        if (o instanceof Calendar) {\n+            return this.format((Calendar)o, sb);\n         }\n-        if (obj instanceof Long) {\n-            return this.format((long)(Long)obj, toAppendTo);\n+        if (o instanceof Long) {\n+            return this.format((long)(Long)o, sb);\n         }\n-        throw new IllegalArgumentException(\"Unknown class: \" + ((obj == null) ? \"<null>\" : obj.getClass().getName()));\n+        throw new IllegalArgumentException(\"Unknown class: \" + ((o == null) ? \"<null>\" : o.getClass().getName()));\n     }\n     \n-    String format(final Object obj) {\n-        if (obj instanceof Date) {\n-            return this.format((Date)obj);\n+    String format(final Object o) {\n+        if (o instanceof Date) {\n+            return this.format((Date)o);\n         }\n-        if (obj instanceof Calendar) {\n-            return this.format((Calendar)obj);\n+        if (o instanceof Calendar) {\n+            return this.format((Calendar)o);\n         }\n-        if (obj instanceof Long) {\n-            return this.format((long)(Long)obj);\n+        if (o instanceof Long) {\n+            return this.format((long)(Long)o);\n         }\n-        throw new IllegalArgumentException(\"Unknown class: \" + ((obj == null) ? \"<null>\" : obj.getClass().getName()));\n+        throw new IllegalArgumentException(\"Unknown class: \" + ((o == null) ? \"<null>\" : o.getClass().getName()));\n     }\n     \n-    public String format(final long millis) {\n-        final Calendar c = this.newCalendar();\n-        c.setTimeInMillis(millis);\n-        return this.applyRulesToString(c);\n+    public String format(final long timeInMillis) {\n+        final Calendar calendar = this.newCalendar();\n+        calendar.setTimeInMillis(timeInMillis);\n+        return this.applyRulesToString(calendar);\n     }\n     \n-    private String applyRulesToString(final Calendar c) {\n-        return ((StringBuilder)this.applyRules(c, new StringBuilder(this.mMaxLengthEstimate))).toString();\n+    private String applyRulesToString(final Calendar calendar) {\n+        return ((StringBuilder)this.applyRules(calendar, new StringBuilder(this.mMaxLengthEstimate))).toString();\n     }\n     \n     private Calendar newCalendar() {\n         return Calendar.getInstance(this.mTimeZone, this.mLocale);\n     }\n     \n-    public String format(final Date date) {\n-        final Calendar c = this.newCalendar();\n-        c.setTime(date);\n-        return this.applyRulesToString(c);\n+    public String format(final Date time) {\n+        final Calendar calendar = this.newCalendar();\n+        calendar.setTime(time);\n+        return this.applyRulesToString(calendar);\n     }\n     \n     public String format(final Calendar calendar) {\n         return ((StringBuilder)this.format(calendar, new StringBuilder(this.mMaxLengthEstimate))).toString();\n     }\n     \n-    public StringBuffer format(final long millis, final StringBuffer buf) {\n-        final Calendar c = this.newCalendar();\n-        c.setTimeInMillis(millis);\n-        return this.applyRules(c, buf);\n+    public StringBuffer format(final long timeInMillis, final StringBuffer sb) {\n+        final Calendar calendar = this.newCalendar();\n+        calendar.setTimeInMillis(timeInMillis);\n+        return this.applyRules(calendar, sb);\n     }\n     \n-    public StringBuffer format(final Date date, final StringBuffer buf) {\n-        final Calendar c = this.newCalendar();\n-        c.setTime(date);\n-        return this.applyRules(c, buf);\n+    public StringBuffer format(final Date time, final StringBuffer sb) {\n+        final Calendar calendar = this.newCalendar();\n+        calendar.setTime(time);\n+        return this.applyRules(calendar, sb);\n     }\n     \n-    public StringBuffer format(final Calendar calendar, final StringBuffer buf) {\n-        return this.format(calendar.getTime(), buf);\n+    public StringBuffer format(final Calendar calendar, final StringBuffer sb) {\n+        return this.format(calendar.getTime(), sb);\n     }\n     \n-    public <B extends Appendable> B format(final long millis, final B buf) {\n-        final Calendar c = this.newCalendar();\n-        c.setTimeInMillis(millis);\n-        return this.applyRules(c, buf);\n+    public <B extends Appendable> B format(final long timeInMillis, final B b) {\n+        final Calendar calendar = this.newCalendar();\n+        calendar.setTimeInMillis(timeInMillis);\n+        return this.applyRules(calendar, b);\n     }\n     \n-    public <B extends Appendable> B format(final Date date, final B buf) {\n-        final Calendar c = this.newCalendar();\n-        c.setTime(date);\n-        return this.applyRules(c, buf);\n+    public <B extends Appendable> B format(final Date time, final B b) {\n+        final Calendar calendar = this.newCalendar();\n+        calendar.setTime(time);\n+        return this.applyRules(calendar, b);\n     }\n     \n-    public <B extends Appendable> B format(Calendar calendar, final B buf) {\n+    public <B extends Appendable> B format(Calendar calendar, final B b) {\n         if (!calendar.getTimeZone().equals(this.mTimeZone)) {\n             calendar = (Calendar)calendar.clone();\n             calendar.setTimeZone(this.mTimeZone);\n         }\n-        return (B)this.applyRules(calendar, (Appendable)buf);\n+        return (B)this.applyRules(calendar, (Appendable)b);\n     }\n     \n     @Deprecated\n-    protected StringBuffer applyRules(final Calendar calendar, final StringBuffer buf) {\n-        return this.applyRules(calendar, buf);\n+    protected StringBuffer applyRules(final Calendar calendar, final StringBuffer sb) {\n+        return this.applyRules(calendar, sb);\n     }\n     \n-    private <B extends Appendable> B applyRules(final Calendar calendar, final B buf) {\n+    private <B extends Appendable> B applyRules(final Calendar calendar, final B b) {\n         try {\n-            for (final FastDatePrinter.Rule rule : this.mRules) {\n-                rule.appendTo((Appendable)buf, calendar);\n+            final FastDatePrinter.Rule[] mRules = this.mRules;\n+            for (int length = mRules.length, i = 0; i < length; ++i) {\n+                mRules[i].appendTo((Appendable)b, calendar);\n             }\n         }\n-        catch (final IOException ioe) {\n-            ExceptionUtils.rethrow((Throwable)ioe);\n+        catch (final IOException ex) {\n+            ExceptionUtils.rethrow((Throwable)ex);\n         }\n-        return buf;\n+        return b;\n     }\n     \n     public String getPattern() {\n         return this.mPattern;\n     }\n     \n     public TimeZone getTimeZone() {\n@@ -382,115 +378,115 @@\n     }\n     \n     public int getMaxLengthEstimate() {\n         return this.mMaxLengthEstimate;\n     }\n     \n     @Override\n-    public boolean equals(final Object obj) {\n-        if (!(obj instanceof FastDatePrinter)) {\n+    public boolean equals(final Object o) {\n+        if (!(o instanceof FastDatePrinter)) {\n             return false;\n         }\n-        final FastDatePrinter other = (FastDatePrinter)obj;\n-        return this.mPattern.equals(other.mPattern) && this.mTimeZone.equals(other.mTimeZone) && this.mLocale.equals(other.mLocale);\n+        final FastDatePrinter fastDatePrinter = (FastDatePrinter)o;\n+        return this.mPattern.equals(fastDatePrinter.mPattern) && this.mTimeZone.equals(fastDatePrinter.mTimeZone) && this.mLocale.equals(fastDatePrinter.mLocale);\n     }\n     \n     @Override\n     public int hashCode() {\n         return this.mPattern.hashCode() + 13 * (this.mTimeZone.hashCode() + 13 * this.mLocale.hashCode());\n     }\n     \n     @Override\n     public String toString() {\n         return \"FastDatePrinter[\" + this.mPattern + \",\" + this.mLocale + \",\" + this.mTimeZone.getID() + \"]\";\n     }\n     \n-    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n-        in.defaultReadObject();\n+    private void readObject(final ObjectInputStream objectInputStream) throws IOException, ClassNotFoundException {\n+        objectInputStream.defaultReadObject();\n         this.init();\n     }\n     \n-    private static void appendDigits(final Appendable buffer, final int value) throws IOException {\n-        buffer.append((char)(value / 10 + 48));\n-        buffer.append((char)(value % 10 + 48));\n+    private static void appendDigits(final Appendable appendable, final int n) throws IOException {\n+        appendable.append((char)(n / 10 + 48));\n+        appendable.append((char)(n % 10 + 48));\n     }\n     \n-    private static void appendFullDigits(final Appendable buffer, int value, int minFieldWidth) throws IOException {\n-        if (value < 10000) {\n-            int nDigits = 4;\n-            if (value < 1000) {\n-                --nDigits;\n-                if (value < 100) {\n-                    --nDigits;\n-                    if (value < 10) {\n-                        --nDigits;\n+    private static void appendFullDigits(final Appendable appendable, int i, int n) throws IOException {\n+        if (i < 10000) {\n+            int n2 = 4;\n+            if (i < 1000) {\n+                --n2;\n+                if (i < 100) {\n+                    --n2;\n+                    if (i < 10) {\n+                        --n2;\n                     }\n                 }\n             }\n-            for (int i = minFieldWidth - nDigits; i > 0; --i) {\n-                buffer.append('0');\n+            for (int j = n - n2; j > 0; --j) {\n+                appendable.append('0');\n             }\n-            switch (nDigits) {\n+            switch (n2) {\n                 case 4: {\n-                    buffer.append((char)(value / 1000 + 48));\n-                    value %= 1000;\n+                    appendable.append((char)(i / 1000 + 48));\n+                    i %= 1000;\n                 }\n                 case 3:\n                     Label_0152: {\n-                        if (value >= 100) {\n-                            buffer.append((char)(value / 100 + 48));\n-                            value %= 100;\n+                        if (i >= 100) {\n+                            appendable.append((char)(i / 100 + 48));\n+                            i %= 100;\n                             break Label_0152;\n                         }\n-                        buffer.append('0');\n+                        appendable.append('0');\n                         break Label_0152;\n                     }\n                 case 2:\n                     Label_0190: {\n-                        if (value >= 10) {\n-                            buffer.append((char)(value / 10 + 48));\n-                            value %= 10;\n+                        if (i >= 10) {\n+                            appendable.append((char)(i / 10 + 48));\n+                            i %= 10;\n                             break Label_0190;\n                         }\n-                        buffer.append('0');\n+                        appendable.append('0');\n                         break Label_0190;\n                     }\n                 case 1: {\n-                    buffer.append((char)(value + 48));\n+                    appendable.append((char)(i + 48));\n                     break;\n                 }\n             }\n         }\n         else {\n-            final char[] work = new char[10];\n-            int digit = 0;\n-            while (value != 0) {\n-                work[digit++] = (char)(value % 10 + 48);\n-                value /= 10;\n+            final char[] array = new char[10];\n+            int k = 0;\n+            while (i != 0) {\n+                array[k++] = (char)(i % 10 + 48);\n+                i /= 10;\n             }\n-            while (digit < minFieldWidth) {\n-                buffer.append('0');\n-                --minFieldWidth;\n+            while (k < n) {\n+                appendable.append('0');\n+                --n;\n             }\n-            while (--digit >= 0) {\n-                buffer.append(work[digit]);\n+            while (--k >= 0) {\n+                appendable.append(array[k]);\n             }\n         }\n     }\n     \n-    static String getTimeZoneDisplay(final TimeZone tz, final boolean daylight, final int style, final Locale locale) {\n-        final FastDatePrinter.TimeZoneDisplayKey key = new FastDatePrinter.TimeZoneDisplayKey(tz, daylight, style, locale);\n-        String value = (String)FastDatePrinter.cTimeZoneDisplayCache.get(key);\n-        if (value == null) {\n-            value = tz.getDisplayName(daylight, style, locale);\n-            final String prior = (String)FastDatePrinter.cTimeZoneDisplayCache.putIfAbsent(key, value);\n-            if (prior != null) {\n-                value = prior;\n+    static String getTimeZoneDisplay(final TimeZone timeZone, final boolean daylight, final int style, final Locale locale) {\n+        final FastDatePrinter.TimeZoneDisplayKey timeZoneDisplayKey = new FastDatePrinter.TimeZoneDisplayKey(timeZone, daylight, style, locale);\n+        String displayName = (String)FastDatePrinter.cTimeZoneDisplayCache.get(timeZoneDisplayKey);\n+        if (displayName == null) {\n+            displayName = timeZone.getDisplayName(daylight, style, locale);\n+            final String s = (String)FastDatePrinter.cTimeZoneDisplayCache.putIfAbsent(timeZoneDisplayKey, displayName);\n+            if (s != null) {\n+                displayName = s;\n             }\n         }\n-        return value;\n+        return displayName;\n     }\n     \n     static {\n         cTimeZoneDisplayCache = new ConcurrentHashMap<FastDatePrinter.TimeZoneDisplayKey, String>(7);\n     }\n }\n"}]}
