{"diffoscope-json-version": 1, "source1": "first/Constant.class", "source2": "second/Constant.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,16 +14,16 @@\n     protected byte tag;\n     \n     public static BCELComparator getComparator() {\n         return Constant.bcelComparator;\n     }\n     \n     public static Constant readConstant(final DataInput dataInput) throws IOException, ClassFormatException {\n-        final byte b = dataInput.readByte();\n-        switch (b) {\n+        final byte byte1 = dataInput.readByte();\n+        switch (byte1) {\n             case 7: {\n                 return (Constant)new ConstantClass(dataInput);\n             }\n             case 9: {\n                 return (Constant)new ConstantFieldref(dataInput);\n             }\n             case 10: {\n@@ -68,15 +68,15 @@\n             case 19: {\n                 return (Constant)new ConstantModule(dataInput);\n             }\n             case 20: {\n                 return (Constant)new ConstantPackage(dataInput);\n             }\n             default: {\n-                throw new ClassFormatException(\"Invalid byte tag in constant pool: \" + b);\n+                throw new ClassFormatException(\"Invalid byte tag in constant pool: \" + byte1);\n             }\n         }\n     }\n     \n     public static void setComparator(final BCELComparator comparator) {\n         Constant.bcelComparator = comparator;\n     }\n@@ -87,15 +87,15 @@\n     \n     public abstract void accept(final Visitor v);\n     \n     public Object clone() {\n         try {\n             return super.clone();\n         }\n-        catch (final CloneNotSupportedException e) {\n+        catch (final CloneNotSupportedException ex) {\n             throw new Error(\"Clone Not Supported\");\n         }\n     }\n     \n     public Constant copy() {\n         try {\n             return (Constant)super.clone();\n"}]}
