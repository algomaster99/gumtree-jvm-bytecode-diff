{"diffoscope-json-version": 1, "source1": "first/NNTPClient.class", "source2": "second/NNTPClient.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,14 +14,18 @@\n import java.io.IOException;\n import org.apache.commons.net.MalformedServerReplyException;\n \n public class NNTPClient extends NNTP\n {\n     private static final NewsgroupInfo[] EMPTY_NEWSGROUP_INFO_ARRAY;\n     \n+    static {\n+        EMPTY_NEWSGROUP_INFO_ARRAY = new NewsgroupInfo[0];\n+    }\n+    \n     static Article parseArticleEntry(final String line) {\n         final Article article = new Article();\n         article.setSubject(line);\n         final String[] parts = line.split(\"\\t\");\n         if (parts.length > 6) {\n             int i = 0;\n             try {\n@@ -70,15 +74,15 @@\n             if (firstNum == 0L && lastNum == 0L) {\n                 result.setArticleCount(0L);\n             }\n             else {\n                 result.setArticleCount(lastNum - firstNum + 1L);\n             }\n         }\n-        catch (final NumberFormatException e) {\n+        catch (final NumberFormatException ex) {\n             return null;\n         }\n         switch (tokens[i++].charAt(0)) {\n             case 'Y':\n             case 'y': {\n                 result.setPostingPermission(2);\n                 break;\n@@ -186,30 +190,96 @@\n         return (Iterable<NewsgroupInfo>)new NewsgroupIterator((Iterable)this.iterateNewsgroupListing(wildmat));\n     }\n     \n     public String listHelp() throws IOException {\n         if (!NNTPReply.isInformational(this.help())) {\n             return null;\n         }\n-        try (final StringWriter help = new StringWriter();\n-             final BufferedReader reader = (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_)) {\n-            Util.copyReader((Reader)reader, (Writer)help);\n-            return help.toString();\n+        Throwable t = null;\n+        try {\n+            final StringWriter help = new StringWriter();\n+            try {\n+                final BufferedReader reader = (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_);\n+                try {\n+                    Util.copyReader((Reader)reader, (Writer)help);\n+                    final String string = help.toString();\n+                    if (reader != null) {\n+                        reader.close();\n+                    }\n+                    if (help != null) {\n+                        help.close();\n+                    }\n+                    return string;\n+                }\n+                finally {\n+                    if (reader != null) {\n+                        reader.close();\n+                    }\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n+                }\n+                if (help != null) {\n+                    help.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception2;\n+                t = exception2;\n+            }\n+            else {\n+                final Throwable exception2;\n+                if (t != exception2) {\n+                    t.addSuppressed(exception2);\n+                }\n+            }\n         }\n     }\n     \n     public String[] listNewNews(final NewGroupsOrNewsQuery query) throws IOException {\n         if (!NNTPReply.isPositiveCompletion(this.newnews(query.getNewsgroups(), query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {\n             return null;\n         }\n         final Vector<String> list = new Vector<String>();\n-        try (final BufferedReader reader = (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_)) {\n-            String line;\n-            while ((line = reader.readLine()) != null) {\n-                list.addElement(line);\n+        Throwable t = null;\n+        try {\n+            final BufferedReader reader = (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_);\n+            try {\n+                String line;\n+                while ((line = reader.readLine()) != null) {\n+                    list.addElement(line);\n+                }\n+            }\n+            finally {\n+                if (reader != null) {\n+                    reader.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n             }\n         }\n         final int size = list.size();\n         if (size < 1) {\n             return NetConstants.EMPTY_STRING_ARRAY;\n         }\n         final String[] result = new String[size];\n@@ -238,21 +308,42 @@\n         return this.readNewsgroupListing();\n     }\n     \n     public String[] listOverviewFmt() throws IOException {\n         if (!NNTPReply.isPositiveCompletion(this.sendCommand(\"LIST\", \"OVERVIEW.FMT\"))) {\n             return null;\n         }\n-        try (final BufferedReader reader = (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_)) {\n-            final ArrayList<String> list = new ArrayList<String>();\n-            String line;\n-            while ((line = reader.readLine()) != null) {\n-                list.add(line);\n+        Throwable t = null;\n+        try {\n+            final BufferedReader reader = (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_);\n+            try {\n+                final ArrayList<String> list = new ArrayList<String>();\n+                String line;\n+                while ((line = reader.readLine()) != null) {\n+                    list.add(line);\n+                }\n+                return list.toArray(NetConstants.EMPTY_STRING_ARRAY);\n+            }\n+            finally {\n+                if (reader != null) {\n+                    reader.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n             }\n-            return list.toArray(NetConstants.EMPTY_STRING_ARRAY);\n         }\n     }\n     \n     public boolean logout() throws IOException {\n         return NNTPReply.isPositiveCompletion(this.quit());\n     }\n     \n@@ -275,22 +366,43 @@\n             return null;\n         }\n         return (Writer)new DotTerminatedMessageWriter((Writer)this._writer_);\n     }\n     \n     private NewsgroupInfo[] readNewsgroupListing() throws IOException {\n         final Vector<NewsgroupInfo> list = new Vector<NewsgroupInfo>(2048);\n-        try (final BufferedReader reader = (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_)) {\n-            String line;\n-            while ((line = reader.readLine()) != null) {\n-                final NewsgroupInfo tmp = parseNewsgroupListEntry(line);\n-                if (tmp == null) {\n-                    throw new MalformedServerReplyException(line);\n+        Throwable t = null;\n+        try {\n+            final BufferedReader reader = (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_);\n+            try {\n+                String line;\n+                while ((line = reader.readLine()) != null) {\n+                    final NewsgroupInfo tmp = parseNewsgroupListEntry(line);\n+                    if (tmp == null) {\n+                        throw new MalformedServerReplyException(line);\n+                    }\n+                    list.addElement(tmp);\n+                }\n+            }\n+            finally {\n+                if (reader != null) {\n+                    reader.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n                 }\n-                list.addElement(tmp);\n             }\n         }\n         final int size;\n         if ((size = list.size()) < 1) {\n             return NNTPClient.EMPTY_NEWSGROUP_INFO_ARRAY;\n         }\n         final NewsgroupInfo[] info = new NewsgroupInfo[size];\n@@ -457,15 +569,15 @@\n     }\n     \n     public BufferedReader retrieveArticleInfo(final long articleNumber) throws IOException {\n         return this.retrieveArticleInfo(Long.toString(articleNumber));\n     }\n     \n     public BufferedReader retrieveArticleInfo(final long lowArticleNumber, final long highArticleNumber) throws IOException {\n-        return this.retrieveArticleInfo(lowArticleNumber + \"-\" + highArticleNumber);\n+        return this.retrieveArticleInfo(String.valueOf(lowArticleNumber) + \"-\" + highArticleNumber);\n     }\n     \n     private BufferedReader retrieveArticleInfo(final String articleRange) throws IOException {\n         if (!NNTPReply.isPositiveCompletion(this.xover(articleRange))) {\n             return null;\n         }\n         return (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_);\n@@ -482,15 +594,15 @@\n     }\n     \n     public BufferedReader retrieveHeader(final String header, final long articleNumber) throws IOException {\n         return this.retrieveHeader(header, Long.toString(articleNumber));\n     }\n     \n     public BufferedReader retrieveHeader(final String header, final long lowArticleNumber, final long highArticleNumber) throws IOException {\n-        return this.retrieveHeader(header, lowArticleNumber + \"-\" + highArticleNumber);\n+        return this.retrieveHeader(header, String.valueOf(lowArticleNumber) + \"-\" + highArticleNumber);\n     }\n     \n     private BufferedReader retrieveHeader(final String header, final String articleRange) throws IOException {\n         if (!NNTPReply.isPositiveCompletion(this.xhdr(header, articleRange))) {\n             return null;\n         }\n         return (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_);\n@@ -615,12 +727,8 @@\n     @Deprecated\n     public boolean selectPreviousArticle(final ArticlePointer pointer) throws IOException {\n         final ArticleInfo ai = this.ap2ai(pointer);\n         final boolean b = this.selectPreviousArticle(ai);\n         this.ai2ap(ai, pointer);\n         return b;\n     }\n-    \n-    static {\n-        EMPTY_NEWSGROUP_INFO_ARRAY = new NewsgroupInfo[0];\n-    }\n }\n"}]}
