{"diffoscope-json-version": 1, "source1": "first/AbstractClassCouplingCheck.class", "source2": "second/AbstractClassCouplingCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -68,66 +68,66 @@\n         final Stream<Object> map = Arrays.stream(array).map((Function<? super String, ?>)CommonUtil::createPattern);\n         final List<Pattern> excludeClassesRegexps = this.excludeClassesRegexps;\n         Objects.requireNonNull(excludeClassesRegexps);\n         map.forEach(excludeClassesRegexps::add);\n     }\n     \n     public final void setExcludedPackages(final String... array) {\n-        final List<? super String> list = (List<? super String>)Arrays.stream(array).filter(Predicate.not((Predicate<? super String>)CommonUtil::isName)).collect((Collector<? super String, ?, List<? super String>>)Collectors.toList());\n-        if (!list.isEmpty()) {\n-            throw new IllegalArgumentException(\"the following values are not valid identifiers: \" + list);\n+        final List<? super String> obj = (List<? super String>)Arrays.stream(array).filter(Predicate.not((Predicate<? super String>)CommonUtil::isName)).collect((Collector<? super String, ?, List<? super String>>)Collectors.toList());\n+        if (!obj.isEmpty()) {\n+            throw new IllegalArgumentException(\"the following values are not valid identifiers: \" + String.valueOf((Object)obj));\n         }\n         this.excludedPackages = Set.of(array);\n     }\n     \n     public final void beginTree(final DetailAST detailAST) {\n         this.importedClassPackages.clear();\n         this.classesContexts.clear();\n         this.classesContexts.push(new AbstractClassCouplingCheck.ClassContext(this, \"\", (DetailAST)null));\n         this.packageName = \"\";\n     }\n     \n-    public void visitToken(final DetailAST detailAST) {\n-        switch (detailAST.getType()) {\n+    public void visitToken(final DetailAST obj) {\n+        switch (obj.getType()) {\n             case 16: {\n-                this.visitPackageDef(detailAST);\n+                this.visitPackageDef(obj);\n                 break;\n             }\n             case 30: {\n-                this.registerImport(detailAST);\n+                this.registerImport(obj);\n                 break;\n             }\n             case 14:\n             case 15:\n             case 154:\n             case 157:\n             case 199: {\n-                this.visitClassDef(detailAST);\n+                this.visitClassDef(obj);\n                 break;\n             }\n             case 13:\n             case 18:\n             case 19: {\n-                this.visitType(detailAST);\n+                this.visitType(obj);\n                 break;\n             }\n             case 136: {\n-                this.visitLiteralNew(detailAST);\n+                this.visitLiteralNew(obj);\n                 break;\n             }\n             case 81: {\n-                this.visitLiteralThrows(detailAST);\n+                this.visitLiteralThrows(obj);\n                 break;\n             }\n             case 159: {\n-                this.visitAnnotationType(detailAST);\n+                this.visitAnnotationType(obj);\n                 break;\n             }\n             default: {\n-                throw new IllegalArgumentException(\"Unknown type: \" + detailAST);\n+                throw new IllegalArgumentException(\"Unknown type: \" + String.valueOf((Object)obj));\n             }\n         }\n     }\n     \n     public void leaveToken(final DetailAST detailAST) {\n         if (TokenUtil.isTypeDeclaration(detailAST.getType())) {\n             this.leaveClassDef();\n"}]}
