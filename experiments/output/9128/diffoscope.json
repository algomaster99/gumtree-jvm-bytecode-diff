{"diffoscope-json-version": 1, "source1": "first/Archiver.class", "source2": "second/Archiver.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -56,142 +56,70 @@\n     \n     @Deprecated\n     public void create(final String format, final OutputStream target, final File directory) throws IOException, ArchiveException {\n         this.create(format, target, directory, CloseableConsumer.NULL_CONSUMER);\n     }\n     \n     public void create(final String format, final OutputStream target, final File directory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);\n-        Throwable x0 = null;\n-        try {\n+        try (final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer)) {\n             this.create((ArchiveOutputStream)c.track((Closeable)ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(format, target)), directory);\n         }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n-        }\n-        finally {\n-            $closeResource(x0, (AutoCloseable)c);\n-        }\n     }\n     \n     public void create(final String format, final Path target, final Path directory) throws IOException, ArchiveException {\n         if (this.prefersSeekableByteChannel(format)) {\n-            final SeekableByteChannel channel = FileChannel.open(target, StandardOpenOption.WRITE, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);\n-            Throwable x0 = null;\n-            try {\n+            try (final SeekableByteChannel channel = FileChannel.open(target, StandardOpenOption.WRITE, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING)) {\n                 this.create(format, channel, directory);\n                 return;\n             }\n-            catch (final Throwable t) {\n-                x0 = t;\n-                throw t;\n-            }\n-            finally {\n-                if (channel != null) {\n-                    $closeResource(x0, channel);\n-                }\n-            }\n         }\n-        final ArchiveOutputStream outputStream = ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(format, Files.newOutputStream(target, new OpenOption[0]));\n-        Throwable x2 = null;\n-        try {\n+        try (final ArchiveOutputStream outputStream = ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(format, Files.newOutputStream(target, new OpenOption[0]))) {\n             this.create(outputStream, directory, Archiver.EMPTY_FileVisitOption, new LinkOption[0]);\n         }\n-        catch (final Throwable t2) {\n-            x2 = t2;\n-            throw t2;\n-        }\n-        finally {\n-            if (outputStream != null) {\n-                $closeResource(x2, (AutoCloseable)outputStream);\n-            }\n-        }\n     }\n     \n     @Deprecated\n     public void create(final String format, final SeekableByteChannel target, final File directory) throws IOException, ArchiveException {\n         this.create(format, target, directory, CloseableConsumer.NULL_CONSUMER);\n     }\n     \n     public void create(final String format, final SeekableByteChannel target, final File directory, final CloseableConsumer closeableConsumer) throws IOException, ArchiveException {\n-        final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer);\n-        Throwable x0 = null;\n-        try {\n+        try (final CloseableConsumerAdapter c = new CloseableConsumerAdapter(closeableConsumer)) {\n             if (!this.prefersSeekableByteChannel(format)) {\n                 this.create(format, (OutputStream)c.track((Closeable)Channels.newOutputStream(target)), directory);\n             }\n             else if (\"zip\".equalsIgnoreCase(format)) {\n                 this.create((ArchiveOutputStream)c.track((Closeable)new ZipArchiveOutputStream(target)), directory);\n             }\n             else {\n                 if (!\"7z\".equalsIgnoreCase(format)) {\n                     throw new ArchiveException(\"Don't know how to handle format \" + format);\n                 }\n                 this.create((SevenZOutputFile)c.track((Closeable)new SevenZOutputFile(target)), directory);\n             }\n         }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n-        }\n-        finally {\n-            $closeResource(x0, (AutoCloseable)c);\n-        }\n     }\n     \n     public void create(final String format, final SeekableByteChannel target, final Path directory) throws IOException {\n         if (\"7z\".equalsIgnoreCase(format)) {\n-            final SevenZOutputFile sevenZFile = new SevenZOutputFile(target);\n-            Throwable x0 = null;\n-            try {\n+            try (final SevenZOutputFile sevenZFile = new SevenZOutputFile(target)) {\n                 this.create(sevenZFile, directory);\n             }\n-            catch (final Throwable t) {\n-                x0 = t;\n-                throw t;\n-            }\n-            finally {\n-                $closeResource(x0, (AutoCloseable)sevenZFile);\n-            }\n         }\n         else {\n             if (!\"zip\".equalsIgnoreCase(format)) {\n                 throw new IllegalStateException(format);\n             }\n-            final ArchiveOutputStream archiveOutputStream = (ArchiveOutputStream)new ZipArchiveOutputStream(target);\n-            Throwable x2 = null;\n-            try {\n+            try (final ArchiveOutputStream archiveOutputStream = (ArchiveOutputStream)new ZipArchiveOutputStream(target)) {\n                 this.create(archiveOutputStream, directory, Archiver.EMPTY_FileVisitOption, new LinkOption[0]);\n             }\n-            catch (final Throwable t2) {\n-                x2 = t2;\n-                throw t2;\n-            }\n-            finally {\n-                $closeResource(x2, (AutoCloseable)archiveOutputStream);\n-            }\n         }\n     }\n     \n     private boolean prefersSeekableByteChannel(final String format) {\n         return \"zip\".equalsIgnoreCase(format) || \"7z\".equalsIgnoreCase(format);\n     }\n     \n-    private static /* synthetic */ void $closeResource(final Throwable x0, final AutoCloseable x1) {\n-        if (x0 != null) {\n-            try {\n-                x1.close();\n-            }\n-            catch (final Throwable exception) {\n-                x0.addSuppressed(exception);\n-            }\n-        }\n-        else {\n-            x1.close();\n-        }\n-    }\n-    \n     static {\n         EMPTY_FileVisitOption = EnumSet.noneOf(FileVisitOption.class);\n     }\n }\n"}]}
