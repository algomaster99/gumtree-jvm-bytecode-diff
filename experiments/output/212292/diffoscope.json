{"diffoscope-json-version": 1, "source1": "first/AnnotationUtils.class", "source2": "second/AnnotationUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,187 +8,182 @@\n import java.lang.annotation.Annotation;\n import org.apache.commons.lang3.builder.ToStringStyle;\n \n public class AnnotationUtils\n {\n     private static final ToStringStyle TO_STRING_STYLE;\n     \n-    public static boolean equals(final Annotation a1, final Annotation a2) {\n-        if (a1 == a2) {\n+    public static boolean equals(final Annotation obj, final Annotation obj2) {\n+        if (obj == obj2) {\n             return true;\n         }\n-        if (a1 == null || a2 == null) {\n+        if (obj == null || obj2 == null) {\n             return false;\n         }\n-        final Class<? extends Annotation> type = a1.annotationType();\n-        final Class<? extends Annotation> type2 = a2.annotationType();\n-        Validate.notNull((Object)type, \"Annotation %s with null annotationType()\", new Object[] { a1 });\n-        Validate.notNull((Object)type2, \"Annotation %s with null annotationType()\", new Object[] { a2 });\n-        if (!type.equals(type2)) {\n+        final Class<? extends Annotation> annotationType = obj.annotationType();\n+        final Class<? extends Annotation> annotationType2 = obj2.annotationType();\n+        Validate.notNull((Object)annotationType, \"Annotation %s with null annotationType()\", new Object[] { obj });\n+        Validate.notNull((Object)annotationType2, \"Annotation %s with null annotationType()\", new Object[] { obj2 });\n+        if (!annotationType.equals(annotationType2)) {\n             return false;\n         }\n         try {\n-            for (final Method m : type.getDeclaredMethods()) {\n-                if (m.getParameterTypes().length == 0 && isValidAnnotationMemberType(m.getReturnType())) {\n-                    final Object v1 = m.invoke(a1, new Object[0]);\n-                    final Object v2 = m.invoke(a2, new Object[0]);\n-                    if (!memberEquals(m.getReturnType(), v1, v2)) {\n-                        return false;\n-                    }\n+            for (final Method method : annotationType.getDeclaredMethods()) {\n+                if (method.getParameterTypes().length == 0 && isValidAnnotationMemberType(method.getReturnType()) && !memberEquals(method.getReturnType(), method.invoke((Object)obj, new Object[0]), method.invoke((Object)obj2, new Object[0]))) {\n+                    return false;\n                 }\n             }\n         }\n         catch (final IllegalAccessException | InvocationTargetException ex) {\n             return false;\n         }\n         return true;\n     }\n     \n-    public static int hashCode(final Annotation a) {\n-        int result = 0;\n-        final Class<? extends Annotation> type = a.annotationType();\n-        for (final Method m : type.getDeclaredMethods()) {\n+    public static int hashCode(final Annotation obj) {\n+        int n = 0;\n+        for (final Method method : obj.annotationType().getDeclaredMethods()) {\n             try {\n-                final Object value = m.invoke(a, new Object[0]);\n-                if (value == null) {\n-                    throw new IllegalStateException(String.format(\"Annotation method %s returned null\", m));\n+                final Object invoke = method.invoke(obj, new Object[0]);\n+                if (invoke == null) {\n+                    throw new IllegalStateException(String.format(\"Annotation method %s returned null\", method));\n                 }\n-                result += hashMember(m.getName(), value);\n+                n += hashMember(method.getName(), invoke);\n             }\n             catch (final RuntimeException ex) {\n                 throw ex;\n             }\n-            catch (final Exception ex2) {\n-                throw new RuntimeException(ex2);\n+            catch (final Exception cause) {\n+                throw new RuntimeException(cause);\n             }\n         }\n-        return result;\n+        return n;\n     }\n     \n-    public static String toString(final Annotation a) {\n-        final ToStringBuilder builder = new ToStringBuilder((Object)a, AnnotationUtils.TO_STRING_STYLE);\n-        for (final Method m : a.annotationType().getDeclaredMethods()) {\n-            if (m.getParameterTypes().length <= 0) {\n+    public static String toString(final Annotation obj) {\n+        final ToStringBuilder toStringBuilder = new ToStringBuilder((Object)obj, AnnotationUtils.TO_STRING_STYLE);\n+        for (final Method method : obj.annotationType().getDeclaredMethods()) {\n+            if (method.getParameterTypes().length <= 0) {\n                 try {\n-                    builder.append(m.getName(), m.invoke((Object)a, new Object[0]));\n+                    toStringBuilder.append(method.getName(), method.invoke((Object)obj, new Object[0]));\n                 }\n                 catch (final RuntimeException ex) {\n                     throw ex;\n                 }\n-                catch (final Exception ex2) {\n-                    throw new RuntimeException(ex2);\n+                catch (final Exception cause) {\n+                    throw new RuntimeException(cause);\n                 }\n             }\n         }\n-        return builder.build();\n+        return toStringBuilder.build();\n     }\n     \n-    public static boolean isValidAnnotationMemberType(Class<?> type) {\n-        if (type == null) {\n+    public static boolean isValidAnnotationMemberType(Class<?> componentType) {\n+        if (componentType == null) {\n             return false;\n         }\n-        if (type.isArray()) {\n-            type = type.getComponentType();\n+        if (componentType.isArray()) {\n+            componentType = componentType.getComponentType();\n         }\n-        return type.isPrimitive() || type.isEnum() || type.isAnnotation() || String.class.equals(type) || Class.class.equals(type);\n+        return componentType.isPrimitive() || componentType.isEnum() || componentType.isAnnotation() || String.class.equals(componentType) || Class.class.equals(componentType);\n     }\n     \n-    private static int hashMember(final String name, final Object value) {\n-        final int part1 = name.hashCode() * 127;\n-        if (value.getClass().isArray()) {\n-            return part1 ^ arrayMemberHash(value.getClass().getComponentType(), value);\n+    private static int hashMember(final String s, final Object o) {\n+        final int n = s.hashCode() * 127;\n+        if (o.getClass().isArray()) {\n+            return n ^ arrayMemberHash(o.getClass().getComponentType(), o);\n         }\n-        if (value instanceof Annotation) {\n-            return part1 ^ hashCode((Annotation)value);\n+        if (o instanceof Annotation) {\n+            return n ^ hashCode((Annotation)o);\n         }\n-        return part1 ^ value.hashCode();\n+        return n ^ o.hashCode();\n     }\n     \n-    private static boolean memberEquals(final Class<?> type, final Object o1, final Object o2) {\n-        if (o1 == o2) {\n+    private static boolean memberEquals(final Class<?> clazz, final Object o, final Object obj) {\n+        if (o == obj) {\n             return true;\n         }\n-        if (o1 == null || o2 == null) {\n+        if (o == null || obj == null) {\n             return false;\n         }\n-        if (type.isArray()) {\n-            return arrayMemberEquals(type.getComponentType(), o1, o2);\n+        if (clazz.isArray()) {\n+            return arrayMemberEquals(clazz.getComponentType(), o, obj);\n         }\n-        if (type.isAnnotation()) {\n-            return equals((Annotation)o1, (Annotation)o2);\n+        if (clazz.isAnnotation()) {\n+            return equals((Annotation)o, (Annotation)obj);\n         }\n-        return o1.equals(o2);\n+        return o.equals(obj);\n     }\n     \n-    private static boolean arrayMemberEquals(final Class<?> componentType, final Object o1, final Object o2) {\n-        if (componentType.isAnnotation()) {\n-            return annotationArrayMemberEquals(o1, (Annotation[])(Annotation[])o2);\n+    private static boolean arrayMemberEquals(final Class<?> clazz, final Object o, final Object o2) {\n+        if (clazz.isAnnotation()) {\n+            return annotationArrayMemberEquals(o, (Annotation[])(Annotation[])o2);\n         }\n-        if (componentType.equals(Byte.TYPE)) {\n-            return Arrays.equals(o1, (byte[])(byte[])o2);\n+        if (clazz.equals(Byte.TYPE)) {\n+            return Arrays.equals(o, (byte[])(byte[])o2);\n         }\n-        if (componentType.equals(Short.TYPE)) {\n-            return Arrays.equals(o1, (short[])(short[])o2);\n+        if (clazz.equals(Short.TYPE)) {\n+            return Arrays.equals(o, (short[])(short[])o2);\n         }\n-        if (componentType.equals(Integer.TYPE)) {\n-            return Arrays.equals(o1, (int[])(int[])o2);\n+        if (clazz.equals(Integer.TYPE)) {\n+            return Arrays.equals(o, (int[])(int[])o2);\n         }\n-        if (componentType.equals(Character.TYPE)) {\n-            return Arrays.equals(o1, (char[])(char[])o2);\n+        if (clazz.equals(Character.TYPE)) {\n+            return Arrays.equals(o, (char[])(char[])o2);\n         }\n-        if (componentType.equals(Long.TYPE)) {\n-            return Arrays.equals(o1, (long[])(long[])o2);\n+        if (clazz.equals(Long.TYPE)) {\n+            return Arrays.equals(o, (long[])(long[])o2);\n         }\n-        if (componentType.equals(Float.TYPE)) {\n-            return Arrays.equals(o1, (float[])(float[])o2);\n+        if (clazz.equals(Float.TYPE)) {\n+            return Arrays.equals(o, (float[])(float[])o2);\n         }\n-        if (componentType.equals(Double.TYPE)) {\n-            return Arrays.equals(o1, (double[])(double[])o2);\n+        if (clazz.equals(Double.TYPE)) {\n+            return Arrays.equals(o, (double[])(double[])o2);\n         }\n-        if (componentType.equals(Boolean.TYPE)) {\n-            return Arrays.equals(o1, (boolean[])(boolean[])o2);\n+        if (clazz.equals(Boolean.TYPE)) {\n+            return Arrays.equals(o, (boolean[])(boolean[])o2);\n         }\n-        return Arrays.equals(o1, (Object[])(Object[])o2);\n+        return Arrays.equals(o, (Object[])(Object[])o2);\n     }\n     \n-    private static boolean annotationArrayMemberEquals(final Annotation[] a1, final Annotation[] a2) {\n-        if (a1.length != a2.length) {\n+    private static boolean annotationArrayMemberEquals(final Annotation[] array, final Annotation[] array2) {\n+        if (array.length != array2.length) {\n             return false;\n         }\n-        for (int i = 0; i < a1.length; ++i) {\n-            if (!equals(a1[i], a2[i])) {\n+        for (int i = 0; i < array.length; ++i) {\n+            if (!equals(array[i], array2[i])) {\n                 return false;\n             }\n         }\n         return true;\n     }\n     \n-    private static int arrayMemberHash(final Class<?> componentType, final Object o) {\n-        if (componentType.equals(Byte.TYPE)) {\n+    private static int arrayMemberHash(final Class<?> clazz, final Object o) {\n+        if (clazz.equals(Byte.TYPE)) {\n             return Arrays.hashCode((byte[])o);\n         }\n-        if (componentType.equals(Short.TYPE)) {\n+        if (clazz.equals(Short.TYPE)) {\n             return Arrays.hashCode((short[])o);\n         }\n-        if (componentType.equals(Integer.TYPE)) {\n+        if (clazz.equals(Integer.TYPE)) {\n             return Arrays.hashCode((int[])o);\n         }\n-        if (componentType.equals(Character.TYPE)) {\n+        if (clazz.equals(Character.TYPE)) {\n             return Arrays.hashCode((char[])o);\n         }\n-        if (componentType.equals(Long.TYPE)) {\n+        if (clazz.equals(Long.TYPE)) {\n             return Arrays.hashCode((long[])o);\n         }\n-        if (componentType.equals(Float.TYPE)) {\n+        if (clazz.equals(Float.TYPE)) {\n             return Arrays.hashCode((float[])o);\n         }\n-        if (componentType.equals(Double.TYPE)) {\n+        if (clazz.equals(Double.TYPE)) {\n             return Arrays.hashCode((double[])o);\n         }\n-        if (componentType.equals(Boolean.TYPE)) {\n+        if (clazz.equals(Boolean.TYPE)) {\n             return Arrays.hashCode((boolean[])o);\n         }\n         return Arrays.hashCode((Object[])o);\n     }\n     \n     static {\n         TO_STRING_STYLE = (ToStringStyle)new AnnotationUtils.AnnotationUtils$1();\n"}]}
