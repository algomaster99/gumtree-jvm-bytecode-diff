{"diffoscope-json-version": 1, "source1": "first/ImmutableConfiguration.class", "source2": "second/ImmutableConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -51,50 +51,50 @@\n     \n     double getDouble(final String p0);\n     \n     double getDouble(final String p0, final double p1);\n     \n     Double getDouble(final String p0, final Double p1);\n     \n-    default Duration getDuration(final String key) {\n-        final String string = this.getString(key);\n+    default Duration getDuration(final String s) {\n+        final String string = this.getString(s);\n         if (string == null) {\n-            throw new NoSuchElementException(key);\n+            throw new NoSuchElementException(s);\n         }\n         return PropertyConverter.toDuration((Object)string);\n     }\n     \n-    default Duration getDuration(final String key, final Duration defaultValue) {\n-        final Object value = this.getProperty(key);\n-        return (value == null) ? defaultValue : PropertyConverter.toDuration(value);\n+    default Duration getDuration(final String s, final Duration duration) {\n+        final Object property = this.getProperty(s);\n+        return (property == null) ? duration : PropertyConverter.toDuration(property);\n     }\n     \n     String getEncodedString(final String p0);\n     \n     String getEncodedString(final String p0, final ConfigurationDecoder p1);\n     \n-    default <T extends Enum<T>> T getEnum(final String key, final Class<T> enumType) {\n+    default <T extends Enum<T>> T getEnum(final String s, final Class<T> enumClass) {\n         try {\n-            return Enum.valueOf(enumType, this.getString(key));\n+            return Enum.valueOf(enumClass, this.getString(s));\n         }\n-        catch (final IllegalArgumentException e) {\n-            throw new ConversionException((Throwable)e);\n+        catch (final IllegalArgumentException ex) {\n+            throw new ConversionException((Throwable)ex);\n         }\n     }\n     \n-    default <T extends Enum<T>> T getEnum(final String key, final Class<T> enumType, final T defaultValue) {\n-        final String strValue = this.getString(key, null);\n-        if (strValue == null) {\n-            return defaultValue;\n+    default <T extends Enum<T>> T getEnum(final String s, final Class<T> enumClass, final T t) {\n+        final String string = this.getString(s, null);\n+        if (string == null) {\n+            return t;\n         }\n         try {\n-            return Enum.valueOf(enumType, strValue);\n+            return Enum.valueOf(enumClass, string);\n         }\n-        catch (final IllegalArgumentException e) {\n-            throw new ConversionException((Throwable)e);\n+        catch (final IllegalArgumentException ex) {\n+            throw new ConversionException((Throwable)ex);\n         }\n     }\n     \n     float getFloat(final String p0);\n     \n     float getFloat(final String p0, final float p1);\n     \n"}]}
