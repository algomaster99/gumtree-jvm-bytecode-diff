{"diffoscope-json-version": 1, "source1": "first/TarFile$BoundedTarEntryInputStream.class", "source2": "second/TarFile$BoundedTarEntryInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -21,68 +21,68 @@\n         if (channel.size() - entry.getSize() < entry.getDataOffset()) {\n             throw new IOException(\"entry size exceeds archive size\");\n         }\n         this.entry = entry;\n         this.channel = channel;\n     }\n     \n-    protected int read(final long pos, final ByteBuffer buf) throws IOException {\n+    protected int read(final long n, final ByteBuffer byteBuffer) throws IOException {\n         if (this.entryOffset >= this.entry.getRealSize()) {\n             return -1;\n         }\n-        int totalRead;\n+        int n2;\n         if (this.entry.isSparse()) {\n-            totalRead = this.readSparse(this.entryOffset, buf, buf.limit());\n+            n2 = this.readSparse(this.entryOffset, byteBuffer, byteBuffer.limit());\n         }\n         else {\n-            totalRead = this.readArchive(pos, buf);\n+            n2 = this.readArchive(n, byteBuffer);\n         }\n-        if (totalRead == -1) {\n-            if (buf.array().length > 0) {\n+        if (n2 == -1) {\n+            if (byteBuffer.array().length > 0) {\n                 throw new IOException(\"Truncated TAR archive\");\n             }\n             this.this$0.setAtEOF(true);\n         }\n         else {\n-            this.entryOffset += totalRead;\n-            buf.flip();\n+            this.entryOffset += n2;\n+            byteBuffer.flip();\n         }\n-        return totalRead;\n+        return n2;\n     }\n     \n-    private int readSparse(final long pos, final ByteBuffer buf, final int numToRead) throws IOException {\n-        final List<InputStream> entrySparseInputStreams = (List<InputStream>)TarFile.access$000(this.this$0).get(this.entry.getName());\n-        if (entrySparseInputStreams == null || entrySparseInputStreams.isEmpty()) {\n-            return this.readArchive(this.entry.getDataOffset() + pos, buf);\n+    private int readSparse(final long n, final ByteBuffer byteBuffer, final int n2) throws IOException {\n+        final List list = (List)TarFile.access$000(this.this$0).get(this.entry.getName());\n+        if (list == null || list.isEmpty()) {\n+            return this.readArchive(this.entry.getDataOffset() + n, byteBuffer);\n         }\n-        if (this.currentSparseInputStreamIndex >= entrySparseInputStreams.size()) {\n+        if (this.currentSparseInputStreamIndex >= list.size()) {\n             return -1;\n         }\n-        final InputStream currentInputStream = (InputStream)entrySparseInputStreams.get(this.currentSparseInputStreamIndex);\n-        final byte[] bufArray = new byte[numToRead];\n-        final int readLen = currentInputStream.read(bufArray);\n-        if (readLen != -1) {\n-            buf.put(bufArray, 0, readLen);\n+        final InputStream inputStream = (InputStream)list.get(this.currentSparseInputStreamIndex);\n+        final byte[] array = new byte[n2];\n+        final int read = inputStream.read(array);\n+        if (read != -1) {\n+            byteBuffer.put(array, 0, read);\n         }\n-        if (this.currentSparseInputStreamIndex == entrySparseInputStreams.size() - 1) {\n-            return readLen;\n+        if (this.currentSparseInputStreamIndex == list.size() - 1) {\n+            return read;\n         }\n-        if (readLen == -1) {\n+        if (read == -1) {\n             ++this.currentSparseInputStreamIndex;\n-            return this.readSparse(pos, buf, numToRead);\n+            return this.readSparse(n, byteBuffer, n2);\n         }\n-        if (readLen >= numToRead) {\n-            return readLen;\n+        if (read >= n2) {\n+            return read;\n         }\n         ++this.currentSparseInputStreamIndex;\n-        final int readLenOfNext = this.readSparse(pos + (long)readLen, buf, numToRead - readLen);\n-        if (readLenOfNext == -1) {\n-            return readLen;\n+        final int sparse = this.readSparse(n + (long)read, byteBuffer, n2 - read);\n+        if (sparse == -1) {\n+            return read;\n         }\n-        return readLen + readLenOfNext;\n+        return read + sparse;\n     }\n     \n-    private int readArchive(final long pos, final ByteBuffer buf) throws IOException {\n-        this.channel.position(pos);\n-        return this.channel.read(buf);\n+    private int readArchive(final long n, final ByteBuffer byteBuffer) throws IOException {\n+        this.channel.position(n);\n+        return this.channel.read(byteBuffer);\n     }\n }\n"}]}
