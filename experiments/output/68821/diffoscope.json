{"diffoscope-json-version": 1, "source1": "first/SubnetUtils$SubnetInfo.class", "source2": "second/SubnetUtils$SubnetInfo.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,65 +6,65 @@\n     private static final long UNSIGNED_INT_MASK = 4294967295L;\n     \n     private SubnetInfo(final SubnetUtils this$0) {\n         this.this$0 = this$0;\n     }\n     \n     private long networkLong() {\n-        return (long)SubnetUtils.access$000(this.this$0) & 0xFFFFFFFFL;\n+        return (long)SubnetUtils.access$0(this.this$0) & 0xFFFFFFFFL;\n     }\n     \n     private long broadcastLong() {\n-        return (long)SubnetUtils.access$100(this.this$0) & 0xFFFFFFFFL;\n+        return (long)SubnetUtils.access$1(this.this$0) & 0xFFFFFFFFL;\n     }\n     \n     private int low() {\n-        return this.this$0.isInclusiveHostCount() ? SubnetUtils.access$000(this.this$0) : ((this.broadcastLong() - this.networkLong() > 1L) ? (SubnetUtils.access$000(this.this$0) + 1) : 0);\n+        return this.this$0.isInclusiveHostCount() ? SubnetUtils.access$0(this.this$0) : ((this.broadcastLong() - this.networkLong() > 1L) ? (SubnetUtils.access$0(this.this$0) + 1) : 0);\n     }\n     \n     private int high() {\n-        return this.this$0.isInclusiveHostCount() ? SubnetUtils.access$100(this.this$0) : ((this.broadcastLong() - this.networkLong() > 1L) ? (SubnetUtils.access$100(this.this$0) - 1) : 0);\n+        return this.this$0.isInclusiveHostCount() ? SubnetUtils.access$1(this.this$0) : ((this.broadcastLong() - this.networkLong() > 1L) ? (SubnetUtils.access$1(this.this$0) - 1) : 0);\n     }\n     \n     public boolean isInRange(final String address) {\n-        return this.isInRange(SubnetUtils.access$200(address));\n+        return this.isInRange(SubnetUtils.access$2(address));\n     }\n     \n     public boolean isInRange(final int address) {\n         if (address == 0) {\n             return false;\n         }\n         final long addLong = (long)address & 0xFFFFFFFFL;\n         final long lowLong = (long)this.low() & 0xFFFFFFFFL;\n         final long highLong = (long)this.high() & 0xFFFFFFFFL;\n         return addLong >= lowLong && addLong <= highLong;\n     }\n     \n     public String getBroadcastAddress() {\n-        return this.format(this.toArray(SubnetUtils.access$100(this.this$0)));\n+        return this.format(this.toArray(SubnetUtils.access$1(this.this$0)));\n     }\n     \n     public String getNetworkAddress() {\n-        return this.format(this.toArray(SubnetUtils.access$000(this.this$0)));\n+        return this.format(this.toArray(SubnetUtils.access$0(this.this$0)));\n     }\n     \n     public String getNetmask() {\n-        return this.format(this.toArray(SubnetUtils.access$300(this.this$0)));\n+        return this.format(this.toArray(SubnetUtils.access$3(this.this$0)));\n     }\n     \n     public String getAddress() {\n-        return this.format(this.toArray(SubnetUtils.access$400(this.this$0)));\n+        return this.format(this.toArray(SubnetUtils.access$4(this.this$0)));\n     }\n     \n     public String getNextAddress() {\n-        return this.format(this.toArray(SubnetUtils.access$400(this.this$0) + 1));\n+        return this.format(this.toArray(SubnetUtils.access$4(this.this$0) + 1));\n     }\n     \n     public String getPreviousAddress() {\n-        return this.format(this.toArray(SubnetUtils.access$400(this.this$0) - 1));\n+        return this.format(this.toArray(SubnetUtils.access$4(this.this$0) - 1));\n     }\n     \n     public String getLowAddress() {\n         return this.format(this.toArray(this.low()));\n     }\n     \n     public String getHighAddress() {\n@@ -84,19 +84,19 @@\n         final long b = this.broadcastLong();\n         final long n = this.networkLong();\n         final long count = b - n + (this.this$0.isInclusiveHostCount() ? 1 : -1);\n         return (count < 0L) ? 0L : count;\n     }\n     \n     public int asInteger(final String address) {\n-        return SubnetUtils.access$200(address);\n+        return SubnetUtils.access$2(address);\n     }\n     \n     public String getCidrSignature() {\n-        return this.format(this.toArray(SubnetUtils.access$400(this.this$0))) + \"/\" + this.this$0.pop(SubnetUtils.access$300(this.this$0));\n+        return String.valueOf(this.format(this.toArray(SubnetUtils.access$4(this.this$0)))) + \"/\" + this.this$0.pop(SubnetUtils.access$3(this.this$0));\n     }\n     \n     public String[] getAllAddresses() {\n         final int ct = this.getAddressCount();\n         final String[] addresses = new String[ct];\n         if (ct == 0) {\n             return addresses;\n"}]}
