{"diffoscope-json-version": 1, "source1": "first/CpBands.class", "source2": "second/CpBands.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -130,19 +130,19 @@\n                 cpUtf8Suffix[i - 1] = suffix.length;\n                 this.addCharacters(chars, suffix);\n             }\n         }\n         final int[] cpUtf8Chars = new int[chars.size()];\n         final int[] cpUtf8BigSuffix = new int[bigSuffix.size()];\n         final int[][] cpUtf8BigChars = new int[bigSuffix.size()][];\n-        Arrays.setAll(cpUtf8Chars, i -> (char)Character.valueOf(chars.get(i)));\n+        Arrays.setAll(cpUtf8Chars, i -> (char)Character.valueOf(list.get(i)));\n         for (int k = 0; k < cpUtf8BigSuffix.length; ++k) {\n             final int numBigChars = (int)Integer.valueOf(bigSuffix.get(k));\n             cpUtf8BigSuffix[k] = numBigChars;\n-            Arrays.setAll(cpUtf8BigChars[k] = new int[numBigChars], j -> (char)Character.valueOf(bigChars.remove(0)));\n+            Arrays.setAll(cpUtf8BigChars[k] = new int[numBigChars], j -> (char)Character.valueOf(list2.remove(0)));\n         }\n         byte[] encodedBand = this.encodeBandInt(\"cpUtf8Prefix\", cpUtf8Prefix, Codec.DELTA5);\n         out.write(encodedBand);\n         PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from cpUtf8Prefix[\" + cpUtf8Prefix.length + \"]\");\n         encodedBand = this.encodeBandInt(\"cpUtf8Suffix\", cpUtf8Suffix, Codec.UNSIGNED5);\n         out.write(encodedBand);\n         PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from cpUtf8Suffix[\" + cpUtf8Suffix.length + \"]\");\n@@ -262,15 +262,15 @@\n         int i = 0;\n         for (final CPSignature cpS : this.cp_Signature) {\n             classes.addAll(cpS.getClasses());\n             cpSignatureForm[i] = cpS.getIndexInCpUtf8();\n             ++i;\n         }\n         final int[] cpSignatureClasses = new int[classes.size()];\n-        Arrays.setAll(cpSignatureClasses, j -> ((CPClass)classes.get(j)).getIndex());\n+        Arrays.setAll(cpSignatureClasses, j -> ((CPClass)list.get(j)).getIndex());\n         byte[] encodedBand = this.encodeBandInt(\"cpSignatureForm\", cpSignatureForm, Codec.DELTA5);\n         out.write(encodedBand);\n         PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from cpSignatureForm[\" + cpSignatureForm.length + \"]\");\n         encodedBand = this.encodeBandInt(\"cpSignatureClasses\", cpSignatureClasses, Codec.UDELTA5);\n         out.write(encodedBand);\n         PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from cpSignatureClasses[\" + cpSignatureClasses.length + \"]\");\n     }\n@@ -299,18 +299,18 @@\n         final int[] cp_methodOrField_desc = new int[cp.size()];\n         int i = 0;\n         for (final CPMethodOrField mOrF : cp) {\n             cp_methodOrField_class[i] = mOrF.getClassIndex();\n             cp_methodOrField_desc[i] = mOrF.getDescIndex();\n             ++i;\n         }\n-        byte[] encodedBand = this.encodeBandInt(name + \"_class\", cp_methodOrField_class, Codec.DELTA5);\n+        byte[] encodedBand = this.encodeBandInt(String.valueOf(name) + \"_class\", cp_methodOrField_class, Codec.DELTA5);\n         out.write(encodedBand);\n         PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + name + \"_class[\" + cp_methodOrField_class.length + \"]\");\n-        encodedBand = this.encodeBandInt(name + \"_desc\", cp_methodOrField_desc, Codec.UDELTA5);\n+        encodedBand = this.encodeBandInt(String.valueOf(name) + \"_desc\", cp_methodOrField_desc, Codec.UDELTA5);\n         out.write(encodedBand);\n         PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + name + \"_desc[\" + cp_methodOrField_desc.length + \"]\");\n     }\n     \n     public void finaliseBands() {\n         this.addCPUtf8(\"\");\n         this.removeSignaturesFromCpUTF8();\n@@ -347,50 +347,50 @@\n                 entry.setIndex(j);\n                 ++j;\n             }\n         }\n         final Map<CPClass, Integer> classNameToIndex = new HashMap<CPClass, Integer>();\n         this.cp_Field.forEach(mOrF -> {\n             final CPClass cpClassName = mOrF.getClassName();\n-            final Integer index = Integer.valueOf(classNameToIndex.get((Object)cpClassName));\n+            final Integer index = Integer.valueOf(map.get((Object)cpClassName));\n             if (index == null) {\n-                classNameToIndex.put(cpClassName, Integer.valueOf(1));\n+                map.put(cpClassName, Integer.valueOf(1));\n                 mOrF.setIndexInClass(0);\n             }\n             else {\n                 final int theIndex = (int)index;\n                 mOrF.setIndexInClass(theIndex);\n-                classNameToIndex.put(cpClassName, Integer.valueOf(theIndex + 1));\n+                map.put(cpClassName, Integer.valueOf(theIndex + 1));\n             }\n             return;\n         });\n         classNameToIndex.clear();\n         final Map<CPClass, Integer> classNameToConstructorIndex = new HashMap<CPClass, Integer>();\n         this.cp_Method.forEach(mOrF -> {\n             final CPClass cpClassName2 = mOrF.getClassName();\n-            final Integer index2 = Integer.valueOf(classNameToIndex.get((Object)cpClassName2));\n+            final Integer index2 = Integer.valueOf(map2.get((Object)cpClassName2));\n             if (index2 == null) {\n-                classNameToIndex.put(cpClassName2, Integer.valueOf(1));\n+                map2.put(cpClassName2, Integer.valueOf(1));\n                 mOrF.setIndexInClass(0);\n             }\n             else {\n                 final int theIndex2 = (int)index2;\n                 mOrF.setIndexInClass(theIndex2);\n-                classNameToIndex.put(cpClassName2, Integer.valueOf(theIndex2 + 1));\n+                map2.put(cpClassName2, Integer.valueOf(theIndex2 + 1));\n             }\n             if (mOrF.getDesc().getName().equals(\"<init>\")) {\n-                final Integer constructorIndex = Integer.valueOf(classNameToConstructorIndex.get((Object)cpClassName2));\n+                final Integer constructorIndex = Integer.valueOf(map3.get((Object)cpClassName2));\n                 if (constructorIndex == null) {\n-                    classNameToConstructorIndex.put(cpClassName2, Integer.valueOf(1));\n+                    map3.put(cpClassName2, Integer.valueOf(1));\n                     mOrF.setIndexInClassForConstructor(0);\n                 }\n                 else {\n                     final int theIndex3 = (int)constructorIndex;\n                     mOrF.setIndexInClassForConstructor(theIndex3);\n-                    classNameToConstructorIndex.put(cpClassName2, Integer.valueOf(theIndex3 + 1));\n+                    map3.put(cpClassName2, Integer.valueOf(theIndex3 + 1));\n                 }\n             }\n         });\n     }\n     \n     private void removeCpUtf8(final String string) {\n         final CPUTF8 utf8 = (CPUTF8)this.stringsToCpUtf8.get(string);\n@@ -490,26 +490,26 @@\n     }\n     \n     public void addCPClass(final String className) {\n         this.getCPClass(className);\n     }\n     \n     public CPNameAndType getCPNameAndType(final String name, final String signature) {\n-        final String descr = name + \":\" + signature;\n+        final String descr = String.valueOf(name) + \":\" + signature;\n         CPNameAndType nameAndType = (CPNameAndType)this.stringsToCpNameAndType.get(descr);\n         if (nameAndType == null) {\n             nameAndType = new CPNameAndType(this.getCPUtf8(name), this.getCPSignature(signature));\n             this.stringsToCpNameAndType.put(descr, nameAndType);\n             this.cp_Descr.add(nameAndType);\n         }\n         return nameAndType;\n     }\n     \n     public CPMethodOrField getCPField(final CPClass cpClass, final String name, final String desc) {\n-        final String key = cpClass.toString() + \":\" + name + \":\" + desc;\n+        final String key = String.valueOf(cpClass.toString()) + \":\" + name + \":\" + desc;\n         CPMethodOrField cpF = (CPMethodOrField)this.stringsToCpField.get(key);\n         if (cpF == null) {\n             final CPNameAndType nAndT = this.getCPNameAndType(name, desc);\n             cpF = new CPMethodOrField(cpClass, nAndT);\n             this.cp_Field.add(cpF);\n             this.stringsToCpField.put(key, cpF);\n         }\n@@ -539,37 +539,37 @@\n                 constant = (CPConstant<?>)new CPString(this.getCPUtf8((String)value));\n                 this.cp_String.add((CPString)constant);\n             }\n             else if (value instanceof Type) {\n                 String className = ((Type)value).getClassName();\n                 if (className.endsWith(\"[]\")) {\n                     for (className = \"[L\" + className.substring(0, className.length() - 2); className.endsWith(\"[]\"); className = \"[\" + className.substring(0, className.length() - 2)) {}\n-                    className += \";\";\n+                    className = String.valueOf(className) + \";\";\n                 }\n                 constant = (CPConstant<?>)this.getCPClass(className);\n             }\n             this.objectsToCPConstant.put(value, constant);\n         }\n         return constant;\n     }\n     \n     public CPMethodOrField getCPMethod(final CPClass cpClass, final String name, final String desc) {\n-        final String key = cpClass.toString() + \":\" + name + \":\" + desc;\n+        final String key = String.valueOf(cpClass.toString()) + \":\" + name + \":\" + desc;\n         CPMethodOrField cpM = (CPMethodOrField)this.stringsToCpMethod.get(key);\n         if (cpM == null) {\n             final CPNameAndType nAndT = this.getCPNameAndType(name, desc);\n             cpM = new CPMethodOrField(cpClass, nAndT);\n             this.cp_Method.add(cpM);\n             this.stringsToCpMethod.put(key, cpM);\n         }\n         return cpM;\n     }\n     \n     public CPMethodOrField getCPIMethod(final CPClass cpClass, final String name, final String desc) {\n-        final String key = cpClass.toString() + \":\" + name + \":\" + desc;\n+        final String key = String.valueOf(cpClass.toString()) + \":\" + name + \":\" + desc;\n         CPMethodOrField cpIM = (CPMethodOrField)this.stringsToCpIMethod.get(key);\n         if (cpIM == null) {\n             final CPNameAndType nAndT = this.getCPNameAndType(name, desc);\n             cpIM = new CPMethodOrField(cpClass, nAndT);\n             this.cp_Imethod.add(cpIM);\n             this.stringsToCpIMethod.put(key, cpIM);\n         }\n"}]}
