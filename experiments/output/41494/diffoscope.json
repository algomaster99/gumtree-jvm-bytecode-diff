{"diffoscope-json-version": 1, "source1": "first/BZip2CompressorOutputStream.class", "source2": "second/BZip2CompressorOutputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -204,16 +204,37 @@\n         }\n         this.bsBuff = (bsBuffShadow | v << 32 - bsLiveShadow - n);\n         this.bsLive = bsLiveShadow + n;\n     }\n     \n     public void close() throws IOException {\n         if (!this.closed) {\n-            try (final OutputStream outShadow = this.out) {\n-                this.finish();\n+            Throwable t = null;\n+            try {\n+                final OutputStream outShadow = this.out;\n+                try {\n+                    this.finish();\n+                }\n+                finally {\n+                    if (outShadow != null) {\n+                        outShadow.close();\n+                    }\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n+                }\n             }\n         }\n     }\n     \n     private void endBlock() throws IOException {\n         this.blockCRC = this.crc.getFinalCRC();\n         this.combinedCRC = (this.combinedCRC << 1 | this.combinedCRC >>> 31);\n@@ -256,14 +277,17 @@\n                 this.endCompression();\n             }\n             finally {\n                 this.out = null;\n                 this.blockSorter = null;\n                 this.data = null;\n             }\n+            this.out = null;\n+            this.blockSorter = null;\n+            this.data = null;\n         }\n     }\n     \n     public void flush() throws IOException {\n         final OutputStream outShadow = this.out;\n         if (outShadow != null) {\n             outShadow.flush();\n@@ -478,15 +502,14 @@\n                     rfreqt[i] = 0;\n                 }\n             }\n             nSelectors = 0;\n             int ge;\n             for (int gs = 0; gs < this.nMTF; gs = ge + 1) {\n                 ge = Math.min(gs + 50 - 1, nMTFShadow - 1);\n-                final byte mask = -1;\n                 if (nGroups == 6) {\n                     short cost2 = 0;\n                     short cost3 = 0;\n                     short cost4 = 0;\n                     short cost5 = 0;\n                     short cost6 = 0;\n                     short cost7 = 0;\n@@ -507,16 +530,16 @@\n                     cost[5] = cost7;\n                 }\n                 else {\n                     int t2 = nGroups;\n                     while (--t2 >= 0) {\n                         cost[t2] = 0;\n                     }\n-                    for (int k = gs; k <= ge; ++k) {\n-                        final int icv2 = sfmap[k];\n+                    for (int i = gs; i <= ge; ++i) {\n+                        final int icv2 = sfmap[i];\n                         int t3 = nGroups;\n                         while (--t3 >= 0) {\n                             final short[] array = cost;\n                             final int n = t3;\n                             array[n] += (short)(len[t3][icv2] & -1);\n                         }\n                     }\n@@ -533,17 +556,17 @@\n                 }\n                 final int[] array2 = fave;\n                 final int n2 = bt;\n                 ++array2[n2];\n                 selector[nSelectors] = (byte)bt;\n                 ++nSelectors;\n                 final int[] rfreq_bt = rfreq[bt];\n-                for (int l = gs; l <= ge; ++l) {\n+                for (int k = gs; k <= ge; ++k) {\n                     final int[] array3 = rfreq_bt;\n-                    final char c = sfmap[l];\n+                    final char c = sfmap[k];\n                     ++array3[c];\n                 }\n             }\n             for (t = 0; t < nGroups; ++t) {\n                 hbMakeCodeLengths(len[t], rfreq[t], this.data, alphaSize, 20);\n             }\n         }\n"}]}
