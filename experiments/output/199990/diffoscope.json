{"diffoscope-json-version": 1, "source1": "first/EnumElementValue.class", "source2": "second/EnumElementValue.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,27 +5,27 @@\n import java.io.DataOutputStream;\n \n public class EnumElementValue extends ElementValue\n {\n     private final int typeIdx;\n     private final int valueIdx;\n     \n-    public EnumElementValue(final int type, final int typeIdx, final int valueIdx, final ConstantPool cpool) {\n-        super(type, cpool);\n-        if (type != 101) {\n-            throw new IllegalArgumentException(\"Only element values of type enum can be built with this ctor - type specified: \" + type);\n+    public EnumElementValue(final int i, final int typeIdx, final int valueIdx, final ConstantPool constantPool) {\n+        super(i, constantPool);\n+        if (i != 101) {\n+            throw new IllegalArgumentException(\"Only element values of type enum can be built with this ctor - type specified: \" + i);\n         }\n         this.typeIdx = typeIdx;\n         this.valueIdx = valueIdx;\n     }\n     \n-    public void dump(final DataOutputStream dos) throws IOException {\n-        dos.writeByte(super.getType());\n-        dos.writeShort(this.typeIdx);\n-        dos.writeShort(this.valueIdx);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeByte(super.getType());\n+        dataOutputStream.writeShort(this.typeIdx);\n+        dataOutputStream.writeShort(this.valueIdx);\n     }\n     \n     public String getEnumTypeString() {\n         return super.getConstantPool().getConstantUtf8(this.typeIdx).getBytes();\n     }\n     \n     public String getEnumValueString() {\n"}]}
