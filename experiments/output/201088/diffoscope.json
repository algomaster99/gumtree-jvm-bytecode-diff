{"diffoscope-json-version": 1, "source1": "first/Languages.class", "source2": "second/Languages.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -17,42 +17,42 @@\n     public static final Languages.LanguageSet NO_LANGUAGES;\n     public static final Languages.LanguageSet ANY_LANGUAGE;\n     \n     public static Languages getInstance(final NameType nameType) {\n         return Languages.LANGUAGES.get(nameType);\n     }\n     \n-    public static Languages getInstance(final String languagesResourceName) {\n-        final Set<String> ls = new HashSet<String>();\n-        final InputStream langIS = Languages.class.getClassLoader().getResourceAsStream(languagesResourceName);\n-        if (langIS == null) {\n-            throw new IllegalArgumentException(\"Unable to resolve required resource: \" + languagesResourceName);\n+    public static Languages getInstance(final String s) {\n+        final HashSet s2 = new HashSet();\n+        final InputStream resourceAsStream = Languages.class.getClassLoader().getResourceAsStream(s);\n+        if (resourceAsStream == null) {\n+            throw new IllegalArgumentException(\"Unable to resolve required resource: \" + s);\n         }\n-        try (final Scanner lsScanner = new Scanner(langIS, \"UTF-8\")) {\n-            boolean inExtendedComment = false;\n-            while (lsScanner.hasNextLine()) {\n-                final String line = lsScanner.nextLine().trim();\n-                if (inExtendedComment) {\n-                    if (!line.endsWith(\"*/\")) {\n+        try (final Scanner scanner = new Scanner(resourceAsStream, \"UTF-8\")) {\n+            int n = 0;\n+            while (scanner.hasNextLine()) {\n+                final String trim = scanner.nextLine().trim();\n+                if (n != 0) {\n+                    if (!trim.endsWith(\"*/\")) {\n                         continue;\n                     }\n-                    inExtendedComment = false;\n+                    n = 0;\n                 }\n-                else if (line.startsWith(\"/*\")) {\n-                    inExtendedComment = true;\n+                else if (trim.startsWith(\"/*\")) {\n+                    n = 1;\n                 }\n                 else {\n-                    if (line.length() <= 0) {\n+                    if (trim.length() <= 0) {\n                         continue;\n                     }\n-                    ls.add(line);\n+                    s2.add(trim);\n                 }\n             }\n         }\n-        return new Languages(Collections.unmodifiableSet((Set<? extends String>)ls));\n+        return new Languages((Set<String>)Collections.unmodifiableSet((Set<?>)s2));\n     }\n     \n     private static String langResourceName(final NameType nameType) {\n         return String.format(\"org/apache/commons/codec/language/bm/%s_languages.txt\", nameType.getName());\n     }\n     \n     private Languages(final Set<String> languages) {\n@@ -61,14 +61,14 @@\n     \n     public Set<String> getLanguages() {\n         return this.languages;\n     }\n     \n     static {\n         LANGUAGES = new EnumMap<NameType, Languages>(NameType.class);\n-        for (final NameType s : NameType.values()) {\n-            Languages.LANGUAGES.put(s, getInstance(langResourceName(s)));\n+        for (final NameType nameType : NameType.values()) {\n+            Languages.LANGUAGES.put(nameType, getInstance(langResourceName(nameType)));\n         }\n         NO_LANGUAGES = (Languages.LanguageSet)new Languages.Languages$1();\n         ANY_LANGUAGE = (Languages.LanguageSet)new Languages.Languages$2();\n     }\n }\n"}]}
