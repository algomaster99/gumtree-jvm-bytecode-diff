{"diffoscope-json-version": 1, "source1": "first/TarFile$BoundedTarEntryInputStream.class", "source2": "second/TarFile$BoundedTarEntryInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,52 +1,52 @@\n-  SHA-256 checksum 31d4bbaebbabf87fa169d6c3730b1467392edd3acb700003b162a9fa397f3817\n+  SHA-256 checksum 93683db2dc354a97743b503431c92a99fa3c493cb8c7da5d3b55d88885e80105\n   Compiled from \"TarFile.java\"\n final class org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream extends org.apache.commons.compress.utils.BoundedArchiveInputStream\n   minor version: 0\n   major version: 52\n   flags: (0x0030) ACC_FINAL, ACC_SUPER\n   this_class: #34                         // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n   super_class: #35                        // org/apache/commons/compress/utils/BoundedArchiveInputStream\n   interfaces: 0, fields: 5, methods: 4, attributes: 2\n Constant pool:\n-    #1 = Fieldref           #34.#66       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.this$0:Lorg/apache/commons/compress/archivers/tar/TarFile;\n-    #2 = Methodref          #67.#68       // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n-    #3 = Methodref          #67.#69       // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getRealSize:()J\n-    #4 = Methodref          #35.#70       // org/apache/commons/compress/utils/BoundedArchiveInputStream.\"<init>\":(JJ)V\n-    #5 = InterfaceMethodref #71.#72       // java/nio/channels/SeekableByteChannel.size:()J\n-    #6 = Methodref          #67.#73       // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n-    #7 = Class              #74           // java/io/IOException\n-    #8 = String             #75           // entry size exceeds archive size\n-    #9 = Methodref          #7.#76        // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #10 = Fieldref           #34.#77       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-   #11 = Fieldref           #34.#78       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.channel:Ljava/nio/channels/SeekableByteChannel;\n-   #12 = Fieldref           #34.#79       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.entryOffset:J\n-   #13 = Methodref          #67.#80       // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSparse:()Z\n-   #14 = Methodref          #81.#82       // java/nio/ByteBuffer.limit:()I\n-   #15 = Methodref          #34.#83       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.readSparse:(JLjava/nio/ByteBuffer;I)I\n-   #16 = Methodref          #34.#84       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.readArchive:(JLjava/nio/ByteBuffer;)I\n-   #17 = Methodref          #81.#85       // java/nio/ByteBuffer.array:()[B\n-   #18 = String             #86           // Truncated TAR archive\n-   #19 = Methodref          #87.#88       // org/apache/commons/compress/archivers/tar/TarFile.setAtEOF:(Z)V\n-   #20 = Methodref          #81.#89       // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n-   #21 = Methodref          #87.#90       // org/apache/commons/compress/archivers/tar/TarFile.access$000:(Lorg/apache/commons/compress/archivers/tar/TarFile;)Ljava/util/Map;\n-   #22 = Methodref          #67.#91       // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getName:()Ljava/lang/String;\n-   #23 = InterfaceMethodref #92.#93       // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #24 = Class              #94           // java/util/List\n-   #25 = InterfaceMethodref #24.#95       // java/util/List.isEmpty:()Z\n-   #26 = Fieldref           #34.#96       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.currentSparseInputStreamIndex:I\n-   #27 = InterfaceMethodref #24.#97       // java/util/List.size:()I\n-   #28 = InterfaceMethodref #24.#98       // java/util/List.get:(I)Ljava/lang/Object;\n-   #29 = Class              #99           // java/io/InputStream\n-   #30 = Methodref          #29.#100      // java/io/InputStream.read:([B)I\n-   #31 = Methodref          #81.#101      // java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n-   #32 = InterfaceMethodref #71.#102      // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n-   #33 = InterfaceMethodref #71.#103      // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n-   #34 = Class              #104          // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n-   #35 = Class              #107          // org/apache/commons/compress/utils/BoundedArchiveInputStream\n+    #1 = Fieldref           #34.#63       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.this$0:Lorg/apache/commons/compress/archivers/tar/TarFile;\n+    #2 = Methodref          #52.#64       // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n+    #3 = Methodref          #52.#65       // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getRealSize:()J\n+    #4 = Methodref          #35.#66       // org/apache/commons/compress/utils/BoundedArchiveInputStream.\"<init>\":(JJ)V\n+    #5 = InterfaceMethodref #53.#67       // java/nio/channels/SeekableByteChannel.size:()J\n+    #6 = Methodref          #52.#68       // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+    #7 = Class              #69           // java/io/IOException\n+    #8 = String             #70           // entry size exceeds archive size\n+    #9 = Methodref          #7.#71        // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #10 = Fieldref           #34.#72       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+   #11 = Fieldref           #34.#73       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.channel:Ljava/nio/channels/SeekableByteChannel;\n+   #12 = Fieldref           #34.#74       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.entryOffset:J\n+   #13 = Methodref          #52.#75       // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSparse:()Z\n+   #14 = Methodref          #76.#77       // java/nio/ByteBuffer.limit:()I\n+   #15 = Methodref          #34.#78       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.readSparse:(JLjava/nio/ByteBuffer;I)I\n+   #16 = Methodref          #34.#79       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.readArchive:(JLjava/nio/ByteBuffer;)I\n+   #17 = Methodref          #76.#80       // java/nio/ByteBuffer.array:()[B\n+   #18 = String             #81           // Truncated TAR archive\n+   #19 = Methodref          #51.#82       // org/apache/commons/compress/archivers/tar/TarFile.setAtEOF:(Z)V\n+   #20 = Methodref          #76.#83       // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+   #21 = Methodref          #51.#84       // org/apache/commons/compress/archivers/tar/TarFile.access$000:(Lorg/apache/commons/compress/archivers/tar/TarFile;)Ljava/util/Map;\n+   #22 = Methodref          #52.#85       // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getName:()Ljava/lang/String;\n+   #23 = InterfaceMethodref #86.#87       // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #24 = Class              #88           // java/util/List\n+   #25 = InterfaceMethodref #24.#89       // java/util/List.isEmpty:()Z\n+   #26 = Fieldref           #34.#90       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.currentSparseInputStreamIndex:I\n+   #27 = InterfaceMethodref #24.#91       // java/util/List.size:()I\n+   #28 = InterfaceMethodref #24.#92       // java/util/List.get:(I)Ljava/lang/Object;\n+   #29 = Class              #93           // java/io/InputStream\n+   #30 = Methodref          #29.#94       // java/io/InputStream.read:([B)I\n+   #31 = Methodref          #76.#95       // java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n+   #32 = InterfaceMethodref #53.#96       // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+   #33 = InterfaceMethodref #53.#97       // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+   #34 = Class              #98           // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n+   #35 = Class              #101          // org/apache/commons/compress/utils/BoundedArchiveInputStream\n    #36 = Utf8               channel\n    #37 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n    #38 = Utf8               entry\n    #39 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n    #40 = Utf8               entryOffset\n    #41 = Utf8               J\n    #42 = Utf8               currentSparseInputStreamIndex\n@@ -54,108 +54,102 @@\n    #44 = Utf8               this$0\n    #45 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarFile;\n    #46 = Utf8               <init>\n    #47 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarFile;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/nio/channels/SeekableByteChannel;)V\n    #48 = Utf8               Code\n    #49 = Utf8               LineNumberTable\n    #50 = Utf8               StackMapTable\n-   #51 = Class              #104          // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n-   #52 = Class              #108          // org/apache/commons/compress/archivers/tar/TarFile\n-   #53 = Class              #109          // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-   #54 = Class              #110          // java/nio/channels/SeekableByteChannel\n-   #55 = Utf8               Exceptions\n-   #56 = Utf8               read\n-   #57 = Utf8               (JLjava/nio/ByteBuffer;)I\n-   #58 = Utf8               readSparse\n-   #59 = Utf8               (JLjava/nio/ByteBuffer;I)I\n-   #60 = Class              #94           // java/util/List\n-   #61 = Class              #99           // java/io/InputStream\n-   #62 = Class              #111          // \"[B\"\n-   #63 = Utf8               readArchive\n-   #64 = Utf8               SourceFile\n-   #65 = Utf8               TarFile.java\n-   #66 = NameAndType        #44:#45       // this$0:Lorg/apache/commons/compress/archivers/tar/TarFile;\n-   #67 = Class              #109          // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-   #68 = NameAndType        #112:#113     // getDataOffset:()J\n-   #69 = NameAndType        #114:#113     // getRealSize:()J\n-   #70 = NameAndType        #46:#115      // \"<init>\":(JJ)V\n-   #71 = Class              #110          // java/nio/channels/SeekableByteChannel\n-   #72 = NameAndType        #116:#113     // size:()J\n-   #73 = NameAndType        #117:#113     // getSize:()J\n-   #74 = Utf8               java/io/IOException\n-   #75 = Utf8               entry size exceeds archive size\n-   #76 = NameAndType        #46:#118      // \"<init>\":(Ljava/lang/String;)V\n-   #77 = NameAndType        #38:#39       // entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-   #78 = NameAndType        #36:#37       // channel:Ljava/nio/channels/SeekableByteChannel;\n-   #79 = NameAndType        #40:#41       // entryOffset:J\n-   #80 = NameAndType        #119:#120     // isSparse:()Z\n-   #81 = Class              #121          // java/nio/ByteBuffer\n-   #82 = NameAndType        #122:#123     // limit:()I\n-   #83 = NameAndType        #58:#59       // readSparse:(JLjava/nio/ByteBuffer;I)I\n-   #84 = NameAndType        #63:#57       // readArchive:(JLjava/nio/ByteBuffer;)I\n-   #85 = NameAndType        #124:#125     // array:()[B\n-   #86 = Utf8               Truncated TAR archive\n-   #87 = Class              #108          // org/apache/commons/compress/archivers/tar/TarFile\n-   #88 = NameAndType        #126:#127     // setAtEOF:(Z)V\n-   #89 = NameAndType        #128:#129     // flip:()Ljava/nio/Buffer;\n-   #90 = NameAndType        #130:#131     // access$000:(Lorg/apache/commons/compress/archivers/tar/TarFile;)Ljava/util/Map;\n-   #91 = NameAndType        #132:#133     // getName:()Ljava/lang/String;\n-   #92 = Class              #134          // java/util/Map\n-   #93 = NameAndType        #135:#136     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #94 = Utf8               java/util/List\n-   #95 = NameAndType        #137:#120     // isEmpty:()Z\n-   #96 = NameAndType        #42:#43       // currentSparseInputStreamIndex:I\n-   #97 = NameAndType        #116:#123     // size:()I\n-   #98 = NameAndType        #135:#138     // get:(I)Ljava/lang/Object;\n-   #99 = Utf8               java/io/InputStream\n-  #100 = NameAndType        #56:#139      // read:([B)I\n-  #101 = NameAndType        #140:#141     // put:([BII)Ljava/nio/ByteBuffer;\n-  #102 = NameAndType        #142:#143     // position:(J)Ljava/nio/channels/SeekableByteChannel;\n-  #103 = NameAndType        #56:#144      // read:(Ljava/nio/ByteBuffer;)I\n-  #104 = Utf8               org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n-  #105 = Utf8               BoundedTarEntryInputStream\n-  #106 = Utf8               InnerClasses\n-  #107 = Utf8               org/apache/commons/compress/utils/BoundedArchiveInputStream\n-  #108 = Utf8               org/apache/commons/compress/archivers/tar/TarFile\n-  #109 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-  #110 = Utf8               java/nio/channels/SeekableByteChannel\n-  #111 = Utf8               [B\n-  #112 = Utf8               getDataOffset\n-  #113 = Utf8               ()J\n-  #114 = Utf8               getRealSize\n-  #115 = Utf8               (JJ)V\n-  #116 = Utf8               size\n-  #117 = Utf8               getSize\n-  #118 = Utf8               (Ljava/lang/String;)V\n-  #119 = Utf8               isSparse\n-  #120 = Utf8               ()Z\n-  #121 = Utf8               java/nio/ByteBuffer\n-  #122 = Utf8               limit\n-  #123 = Utf8               ()I\n-  #124 = Utf8               array\n-  #125 = Utf8               ()[B\n-  #126 = Utf8               setAtEOF\n-  #127 = Utf8               (Z)V\n-  #128 = Utf8               flip\n-  #129 = Utf8               ()Ljava/nio/Buffer;\n-  #130 = Utf8               access$000\n-  #131 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarFile;)Ljava/util/Map;\n-  #132 = Utf8               getName\n-  #133 = Utf8               ()Ljava/lang/String;\n-  #134 = Utf8               java/util/Map\n-  #135 = Utf8               get\n-  #136 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #137 = Utf8               isEmpty\n-  #138 = Utf8               (I)Ljava/lang/Object;\n-  #139 = Utf8               ([B)I\n-  #140 = Utf8               put\n-  #141 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n-  #142 = Utf8               position\n-  #143 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n-  #144 = Utf8               (Ljava/nio/ByteBuffer;)I\n+   #51 = Class              #102          // org/apache/commons/compress/archivers/tar/TarFile\n+   #52 = Class              #103          // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+   #53 = Class              #104          // java/nio/channels/SeekableByteChannel\n+   #54 = Utf8               Exceptions\n+   #55 = Utf8               read\n+   #56 = Utf8               (JLjava/nio/ByteBuffer;)I\n+   #57 = Utf8               readSparse\n+   #58 = Utf8               (JLjava/nio/ByteBuffer;I)I\n+   #59 = Class              #105          // \"[B\"\n+   #60 = Utf8               readArchive\n+   #61 = Utf8               SourceFile\n+   #62 = Utf8               TarFile.java\n+   #63 = NameAndType        #44:#45       // this$0:Lorg/apache/commons/compress/archivers/tar/TarFile;\n+   #64 = NameAndType        #106:#107     // getDataOffset:()J\n+   #65 = NameAndType        #108:#107     // getRealSize:()J\n+   #66 = NameAndType        #46:#109      // \"<init>\":(JJ)V\n+   #67 = NameAndType        #110:#107     // size:()J\n+   #68 = NameAndType        #111:#107     // getSize:()J\n+   #69 = Utf8               java/io/IOException\n+   #70 = Utf8               entry size exceeds archive size\n+   #71 = NameAndType        #46:#112      // \"<init>\":(Ljava/lang/String;)V\n+   #72 = NameAndType        #38:#39       // entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+   #73 = NameAndType        #36:#37       // channel:Ljava/nio/channels/SeekableByteChannel;\n+   #74 = NameAndType        #40:#41       // entryOffset:J\n+   #75 = NameAndType        #113:#114     // isSparse:()Z\n+   #76 = Class              #115          // java/nio/ByteBuffer\n+   #77 = NameAndType        #116:#117     // limit:()I\n+   #78 = NameAndType        #57:#58       // readSparse:(JLjava/nio/ByteBuffer;I)I\n+   #79 = NameAndType        #60:#56       // readArchive:(JLjava/nio/ByteBuffer;)I\n+   #80 = NameAndType        #118:#119     // array:()[B\n+   #81 = Utf8               Truncated TAR archive\n+   #82 = NameAndType        #120:#121     // setAtEOF:(Z)V\n+   #83 = NameAndType        #122:#123     // flip:()Ljava/nio/Buffer;\n+   #84 = NameAndType        #124:#125     // access$000:(Lorg/apache/commons/compress/archivers/tar/TarFile;)Ljava/util/Map;\n+   #85 = NameAndType        #126:#127     // getName:()Ljava/lang/String;\n+   #86 = Class              #128          // java/util/Map\n+   #87 = NameAndType        #129:#130     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #88 = Utf8               java/util/List\n+   #89 = NameAndType        #131:#114     // isEmpty:()Z\n+   #90 = NameAndType        #42:#43       // currentSparseInputStreamIndex:I\n+   #91 = NameAndType        #110:#117     // size:()I\n+   #92 = NameAndType        #129:#132     // get:(I)Ljava/lang/Object;\n+   #93 = Utf8               java/io/InputStream\n+   #94 = NameAndType        #55:#133      // read:([B)I\n+   #95 = NameAndType        #134:#135     // put:([BII)Ljava/nio/ByteBuffer;\n+   #96 = NameAndType        #136:#137     // position:(J)Ljava/nio/channels/SeekableByteChannel;\n+   #97 = NameAndType        #55:#138      // read:(Ljava/nio/ByteBuffer;)I\n+   #98 = Utf8               org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n+   #99 = Utf8               BoundedTarEntryInputStream\n+  #100 = Utf8               InnerClasses\n+  #101 = Utf8               org/apache/commons/compress/utils/BoundedArchiveInputStream\n+  #102 = Utf8               org/apache/commons/compress/archivers/tar/TarFile\n+  #103 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+  #104 = Utf8               java/nio/channels/SeekableByteChannel\n+  #105 = Utf8               [B\n+  #106 = Utf8               getDataOffset\n+  #107 = Utf8               ()J\n+  #108 = Utf8               getRealSize\n+  #109 = Utf8               (JJ)V\n+  #110 = Utf8               size\n+  #111 = Utf8               getSize\n+  #112 = Utf8               (Ljava/lang/String;)V\n+  #113 = Utf8               isSparse\n+  #114 = Utf8               ()Z\n+  #115 = Utf8               java/nio/ByteBuffer\n+  #116 = Utf8               limit\n+  #117 = Utf8               ()I\n+  #118 = Utf8               array\n+  #119 = Utf8               ()[B\n+  #120 = Utf8               setAtEOF\n+  #121 = Utf8               (Z)V\n+  #122 = Utf8               flip\n+  #123 = Utf8               ()Ljava/nio/Buffer;\n+  #124 = Utf8               access$000\n+  #125 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarFile;)Ljava/util/Map;\n+  #126 = Utf8               getName\n+  #127 = Utf8               ()Ljava/lang/String;\n+  #128 = Utf8               java/util/Map\n+  #129 = Utf8               get\n+  #130 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #131 = Utf8               isEmpty\n+  #132 = Utf8               (I)Ljava/lang/Object;\n+  #133 = Utf8               ([B)I\n+  #134 = Utf8               put\n+  #135 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n+  #136 = Utf8               position\n+  #137 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n+  #138 = Utf8               (Ljava/nio/ByteBuffer;)I\n {\n   private final java.nio.channels.SeekableByteChannel channel;\n     descriptor: Ljava/nio/channels/SeekableByteChannel;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final org.apache.commons.compress.archivers.tar.TarArchiveEntry entry;\n     descriptor: Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n@@ -483,8 +477,8 @@\n         line 752: 0\n         line 753: 11\n     Exceptions:\n       throws java.io.IOException\n }\n SourceFile: \"TarFile.java\"\n InnerClasses:\n-  private final #105= #34 of #87;         // BoundedTarEntryInputStream=class org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream of class org/apache/commons/compress/archivers/tar/TarFile\n+  private final #99= #34 of #51;          // BoundedTarEntryInputStream=class org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream of class org/apache/commons/compress/archivers/tar/TarFile\n"}]}
