{"diffoscope-json-version": 1, "source1": "first/XZCompressorInputStream.class", "source2": "second/XZCompressorInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,133 +1,133 @@\n-  SHA-256 checksum 551acfe1b110f71e079da7231b263925994b8cf1315a8a06b49ed10c6a274606\n+  SHA-256 checksum f990fa6595c362aba05bbd07d324ffdba7bd91dea6d118249ad9ac8767a7ccd8\n   Compiled from \"XZCompressorInputStream.java\"\n public class org.apache.commons.compress.compressors.xz.XZCompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream implements org.apache.commons.compress.utils.InputStreamStatistics\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #25                         // org/apache/commons/compress/compressors/xz/XZCompressorInputStream\n-  super_class: #26                        // org/apache/commons/compress/compressors/CompressorInputStream\n+  this_class: #8                          // org/apache/commons/compress/compressors/xz/XZCompressorInputStream\n+  super_class: #17                        // org/apache/commons/compress/compressors/CompressorInputStream\n   interfaces: 1, fields: 2, methods: 10, attributes: 1\n Constant pool:\n-    #1 = Fieldref           #76.#77       // org/tukaani/xz/XZ.HEADER_MAGIC:[B\n-    #2 = Methodref          #25.#78       // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.\"<init>\":(Ljava/io/InputStream;Z)V\n-    #3 = Methodref          #25.#79       // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.\"<init>\":(Ljava/io/InputStream;ZI)V\n-    #4 = Methodref          #26.#80       // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n-    #5 = Class              #81           // org/apache/commons/compress/utils/CountingInputStream\n-    #6 = Methodref          #5.#82        // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-    #7 = Fieldref           #25.#83       // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-    #8 = Class              #84           // org/tukaani/xz/XZInputStream\n-    #9 = Methodref          #8.#85        // org/tukaani/xz/XZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-   #10 = Fieldref           #25.#86       // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.in:Ljava/io/InputStream;\n-   #11 = Class              #87           // org/tukaani/xz/SingleXZInputStream\n-   #12 = Methodref          #11.#85       // org/tukaani/xz/SingleXZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-   #13 = Methodref          #55.#88       // java/io/InputStream.available:()I\n-   #14 = Methodref          #55.#89       // java/io/InputStream.close:()V\n-   #15 = Methodref          #5.#90        // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n-   #16 = Methodref          #55.#91       // java/io/InputStream.read:()I\n-   #17 = Methodref          #25.#92       // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.count:(I)V\n-   #18 = Class              #93           // org/tukaani/xz/MemoryLimitException\n-   #19 = Class              #94           // org/apache/commons/compress/MemoryLimitException\n-   #20 = Methodref          #18.#95       // org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n-   #21 = Methodref          #18.#96       // org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n-   #22 = Methodref          #19.#97       // org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n-   #23 = Methodref          #55.#98       // java/io/InputStream.read:([BII)I\n-   #24 = Methodref          #99.#100      // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n-   #25 = Class              #101          // org/apache/commons/compress/compressors/xz/XZCompressorInputStream\n-   #26 = Class              #102          // org/apache/commons/compress/compressors/CompressorInputStream\n-   #27 = Class              #103          // org/apache/commons/compress/utils/InputStreamStatistics\n+    #1 = Fieldref           #2.#3         // org/tukaani/xz/XZ.HEADER_MAGIC:[B\n+    #2 = Class              #4            // org/tukaani/xz/XZ\n+    #3 = NameAndType        #5:#6         // HEADER_MAGIC:[B\n+    #4 = Utf8               org/tukaani/xz/XZ\n+    #5 = Utf8               HEADER_MAGIC\n+    #6 = Utf8               [B\n+    #7 = Methodref          #8.#9         // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.\"<init>\":(Ljava/io/InputStream;Z)V\n+    #8 = Class              #10           // org/apache/commons/compress/compressors/xz/XZCompressorInputStream\n+    #9 = NameAndType        #11:#12       // \"<init>\":(Ljava/io/InputStream;Z)V\n+   #10 = Utf8               org/apache/commons/compress/compressors/xz/XZCompressorInputStream\n+   #11 = Utf8               <init>\n+   #12 = Utf8               (Ljava/io/InputStream;Z)V\n+   #13 = Methodref          #8.#14        // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.\"<init>\":(Ljava/io/InputStream;ZI)V\n+   #14 = NameAndType        #11:#15       // \"<init>\":(Ljava/io/InputStream;ZI)V\n+   #15 = Utf8               (Ljava/io/InputStream;ZI)V\n+   #16 = Methodref          #17.#18       // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+   #17 = Class              #19           // org/apache/commons/compress/compressors/CompressorInputStream\n+   #18 = NameAndType        #11:#20       // \"<init>\":()V\n+   #19 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n+   #20 = Utf8               ()V\n+   #21 = Class              #22           // org/apache/commons/compress/utils/CountingInputStream\n+   #22 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n+   #23 = Methodref          #21.#24       // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #24 = NameAndType        #11:#25       // \"<init>\":(Ljava/io/InputStream;)V\n+   #25 = Utf8               (Ljava/io/InputStream;)V\n+   #26 = Fieldref           #8.#27        // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+   #27 = NameAndType        #28:#29       // countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n    #28 = Utf8               countingStream\n    #29 = Utf8               Lorg/apache/commons/compress/utils/CountingInputStream;\n-   #30 = Utf8               in\n-   #31 = Utf8               Ljava/io/InputStream;\n-   #32 = Utf8               matches\n-   #33 = Utf8               ([BI)Z\n-   #34 = Utf8               Code\n-   #35 = Utf8               LineNumberTable\n-   #36 = Utf8               LocalVariableTable\n-   #37 = Utf8               i\n-   #38 = Utf8               I\n-   #39 = Utf8               signature\n-   #40 = Utf8               [B\n-   #41 = Utf8               length\n-   #42 = Utf8               StackMapTable\n-   #43 = Utf8               <init>\n-   #44 = Utf8               (Ljava/io/InputStream;)V\n-   #45 = Utf8               this\n-   #46 = Utf8               Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n-   #47 = Utf8               inputStream\n-   #48 = Utf8               Exceptions\n-   #49 = Class              #104          // java/io/IOException\n-   #50 = Utf8               (Ljava/io/InputStream;Z)V\n-   #51 = Utf8               decompressConcatenated\n-   #52 = Utf8               Z\n-   #53 = Utf8               (Ljava/io/InputStream;ZI)V\n-   #54 = Utf8               memoryLimitInKb\n-   #55 = Class              #105          // java/io/InputStream\n-   #56 = Utf8               available\n-   #57 = Utf8               ()I\n-   #58 = Utf8               close\n-   #59 = Utf8               ()V\n-   #60 = Utf8               getCompressedCount\n-   #61 = Utf8               ()J\n-   #62 = Utf8               read\n-   #63 = Utf8               ret\n-   #64 = Utf8               e\n-   #65 = Utf8               Lorg/tukaani/xz/MemoryLimitException;\n-   #66 = Utf8               ([BII)I\n-   #67 = Utf8               buf\n-   #68 = Utf8               off\n-   #69 = Utf8               len\n-   #70 = Utf8               skip\n-   #71 = Utf8               (J)J\n-   #72 = Utf8               n\n-   #73 = Utf8               J\n-   #74 = Utf8               SourceFile\n-   #75 = Utf8               XZCompressorInputStream.java\n-   #76 = Class              #106          // org/tukaani/xz/XZ\n-   #77 = NameAndType        #107:#40      // HEADER_MAGIC:[B\n-   #78 = NameAndType        #43:#50       // \"<init>\":(Ljava/io/InputStream;Z)V\n-   #79 = NameAndType        #43:#53       // \"<init>\":(Ljava/io/InputStream;ZI)V\n-   #80 = NameAndType        #43:#59       // \"<init>\":()V\n-   #81 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n-   #82 = NameAndType        #43:#44       // \"<init>\":(Ljava/io/InputStream;)V\n-   #83 = NameAndType        #28:#29       // countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-   #84 = Utf8               org/tukaani/xz/XZInputStream\n-   #85 = NameAndType        #43:#108      // \"<init>\":(Ljava/io/InputStream;I)V\n-   #86 = NameAndType        #30:#31       // in:Ljava/io/InputStream;\n-   #87 = Utf8               org/tukaani/xz/SingleXZInputStream\n-   #88 = NameAndType        #56:#57       // available:()I\n-   #89 = NameAndType        #58:#59       // close:()V\n-   #90 = NameAndType        #109:#61      // getBytesRead:()J\n-   #91 = NameAndType        #62:#57       // read:()I\n-   #92 = NameAndType        #110:#111     // count:(I)V\n-   #93 = Utf8               org/tukaani/xz/MemoryLimitException\n-   #94 = Utf8               org/apache/commons/compress/MemoryLimitException\n-   #95 = NameAndType        #112:#57      // getMemoryNeeded:()I\n-   #96 = NameAndType        #113:#57      // getMemoryLimit:()I\n-   #97 = NameAndType        #43:#114      // \"<init>\":(JILjava/lang/Exception;)V\n-   #98 = NameAndType        #62:#66       // read:([BII)I\n-   #99 = Class              #115          // org/apache/commons/compress/utils/IOUtils\n-  #100 = NameAndType        #70:#116      // skip:(Ljava/io/InputStream;J)J\n-  #101 = Utf8               org/apache/commons/compress/compressors/xz/XZCompressorInputStream\n-  #102 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n-  #103 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n-  #104 = Utf8               java/io/IOException\n-  #105 = Utf8               java/io/InputStream\n-  #106 = Utf8               org/tukaani/xz/XZ\n-  #107 = Utf8               HEADER_MAGIC\n-  #108 = Utf8               (Ljava/io/InputStream;I)V\n-  #109 = Utf8               getBytesRead\n-  #110 = Utf8               count\n-  #111 = Utf8               (I)V\n-  #112 = Utf8               getMemoryNeeded\n-  #113 = Utf8               getMemoryLimit\n-  #114 = Utf8               (JILjava/lang/Exception;)V\n-  #115 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #116 = Utf8               (Ljava/io/InputStream;J)J\n+   #30 = Class              #31           // org/tukaani/xz/XZInputStream\n+   #31 = Utf8               org/tukaani/xz/XZInputStream\n+   #32 = Methodref          #30.#33       // org/tukaani/xz/XZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+   #33 = NameAndType        #11:#34       // \"<init>\":(Ljava/io/InputStream;I)V\n+   #34 = Utf8               (Ljava/io/InputStream;I)V\n+   #35 = Fieldref           #8.#36        // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.in:Ljava/io/InputStream;\n+   #36 = NameAndType        #37:#38       // in:Ljava/io/InputStream;\n+   #37 = Utf8               in\n+   #38 = Utf8               Ljava/io/InputStream;\n+   #39 = Class              #40           // org/tukaani/xz/SingleXZInputStream\n+   #40 = Utf8               org/tukaani/xz/SingleXZInputStream\n+   #41 = Methodref          #39.#33       // org/tukaani/xz/SingleXZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+   #42 = Methodref          #43.#44       // java/io/InputStream.available:()I\n+   #43 = Class              #45           // java/io/InputStream\n+   #44 = NameAndType        #46:#47       // available:()I\n+   #45 = Utf8               java/io/InputStream\n+   #46 = Utf8               available\n+   #47 = Utf8               ()I\n+   #48 = Methodref          #43.#49       // java/io/InputStream.close:()V\n+   #49 = NameAndType        #50:#20       // close:()V\n+   #50 = Utf8               close\n+   #51 = Methodref          #21.#52       // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+   #52 = NameAndType        #53:#54       // getBytesRead:()J\n+   #53 = Utf8               getBytesRead\n+   #54 = Utf8               ()J\n+   #55 = Methodref          #43.#56       // java/io/InputStream.read:()I\n+   #56 = NameAndType        #57:#47       // read:()I\n+   #57 = Utf8               read\n+   #58 = Methodref          #8.#59        // org/apache/commons/compress/compressors/xz/XZCompressorInputStream.count:(I)V\n+   #59 = NameAndType        #60:#61       // count:(I)V\n+   #60 = Utf8               count\n+   #61 = Utf8               (I)V\n+   #62 = Class              #63           // org/tukaani/xz/MemoryLimitException\n+   #63 = Utf8               org/tukaani/xz/MemoryLimitException\n+   #64 = Class              #65           // org/apache/commons/compress/MemoryLimitException\n+   #65 = Utf8               org/apache/commons/compress/MemoryLimitException\n+   #66 = Methodref          #62.#67       // org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n+   #67 = NameAndType        #68:#47       // getMemoryNeeded:()I\n+   #68 = Utf8               getMemoryNeeded\n+   #69 = Methodref          #62.#70       // org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n+   #70 = NameAndType        #71:#47       // getMemoryLimit:()I\n+   #71 = Utf8               getMemoryLimit\n+   #72 = Methodref          #64.#73       // org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n+   #73 = NameAndType        #11:#74       // \"<init>\":(JILjava/lang/Exception;)V\n+   #74 = Utf8               (JILjava/lang/Exception;)V\n+   #75 = Methodref          #43.#76       // java/io/InputStream.read:([BII)I\n+   #76 = NameAndType        #57:#77       // read:([BII)I\n+   #77 = Utf8               ([BII)I\n+   #78 = Methodref          #79.#80       // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+   #79 = Class              #81           // org/apache/commons/compress/utils/IOUtils\n+   #80 = NameAndType        #82:#83       // skip:(Ljava/io/InputStream;J)J\n+   #81 = Utf8               org/apache/commons/compress/utils/IOUtils\n+   #82 = Utf8               skip\n+   #83 = Utf8               (Ljava/io/InputStream;J)J\n+   #84 = Class              #85           // org/apache/commons/compress/utils/InputStreamStatistics\n+   #85 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n+   #86 = Utf8               matches\n+   #87 = Utf8               ([BI)Z\n+   #88 = Utf8               Code\n+   #89 = Utf8               LineNumberTable\n+   #90 = Utf8               LocalVariableTable\n+   #91 = Utf8               i\n+   #92 = Utf8               I\n+   #93 = Utf8               signature\n+   #94 = Utf8               length\n+   #95 = Utf8               StackMapTable\n+   #96 = Utf8               this\n+   #97 = Utf8               Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n+   #98 = Utf8               inputStream\n+   #99 = Utf8               Exceptions\n+  #100 = Class              #101          // java/io/IOException\n+  #101 = Utf8               java/io/IOException\n+  #102 = Utf8               decompressConcatenated\n+  #103 = Utf8               Z\n+  #104 = Utf8               memoryLimitInKb\n+  #105 = Utf8               getCompressedCount\n+  #106 = Utf8               ret\n+  #107 = Utf8               e\n+  #108 = Utf8               Lorg/tukaani/xz/MemoryLimitException;\n+  #109 = Utf8               buf\n+  #110 = Utf8               off\n+  #111 = Utf8               len\n+  #112 = Utf8               (J)J\n+  #113 = Utf8               n\n+  #114 = Utf8               J\n+  #115 = Utf8               SourceFile\n+  #116 = Utf8               XZCompressorInputStream.java\n {\n   private final org.apache.commons.compress.utils.CountingInputStream countingStream;\n     descriptor: Lorg/apache/commons/compress/utils/CountingInputStream;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final java.io.InputStream in;\n     descriptor: Ljava/io/InputStream;\n@@ -189,15 +189,15 @@\n     descriptor: (Ljava/io/InputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n-         3: invokespecial #2                  // Method \"<init>\":(Ljava/io/InputStream;Z)V\n+         3: invokespecial #7                  // Method \"<init>\":(Ljava/io/InputStream;Z)V\n          6: return\n       LineNumberTable:\n         line 79: 0\n         line 80: 6\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n@@ -210,15 +210,15 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iconst_m1\n-         4: invokespecial #3                  // Method \"<init>\":(Ljava/io/InputStream;ZI)V\n+         4: invokespecial #13                 // Method \"<init>\":(Ljava/io/InputStream;ZI)V\n          7: return\n       LineNumberTable:\n         line 102: 0\n         line 103: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n@@ -229,40 +229,40 @@\n \n   public org.apache.commons.compress.compressors.xz.XZCompressorInputStream(java.io.InputStream, boolean, int) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;ZI)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=4, args_size=4\n          0: aload_0\n-         1: invokespecial #4                  // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+         1: invokespecial #16                 // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n          4: aload_0\n-         5: new           #5                  // class org/apache/commons/compress/utils/CountingInputStream\n+         5: new           #21                 // class org/apache/commons/compress/utils/CountingInputStream\n          8: dup\n          9: aload_1\n-        10: invokespecial #6                  // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-        13: putfield      #7                  // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        10: invokespecial #23                 // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+        13: putfield      #26                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n         16: iload_2\n         17: ifeq          39\n         20: aload_0\n-        21: new           #8                  // class org/tukaani/xz/XZInputStream\n+        21: new           #30                 // class org/tukaani/xz/XZInputStream\n         24: dup\n         25: aload_0\n-        26: getfield      #7                  // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        26: getfield      #26                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n         29: iload_3\n-        30: invokespecial #9                  // Method org/tukaani/xz/XZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-        33: putfield      #10                 // Field in:Ljava/io/InputStream;\n+        30: invokespecial #32                 // Method org/tukaani/xz/XZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+        33: putfield      #35                 // Field in:Ljava/io/InputStream;\n         36: goto          55\n         39: aload_0\n-        40: new           #11                 // class org/tukaani/xz/SingleXZInputStream\n+        40: new           #39                 // class org/tukaani/xz/SingleXZInputStream\n         43: dup\n         44: aload_0\n-        45: getfield      #7                  // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        45: getfield      #26                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n         48: iload_3\n-        49: invokespecial #12                 // Method org/tukaani/xz/SingleXZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-        52: putfield      #10                 // Field in:Ljava/io/InputStream;\n+        49: invokespecial #41                 // Method org/tukaani/xz/SingleXZInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+        52: putfield      #35                 // Field in:Ljava/io/InputStream;\n         55: return\n       LineNumberTable:\n         line 129: 0\n         line 130: 4\n         line 131: 16\n         line 132: 20\n         line 134: 39\n@@ -284,16 +284,16 @@\n \n   public int available() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #10                 // Field in:Ljava/io/InputStream;\n-         4: invokevirtual #13                 // Method java/io/InputStream.available:()I\n+         1: getfield      #35                 // Field in:Ljava/io/InputStream;\n+         4: invokevirtual #42                 // Method java/io/InputStream.available:()I\n          7: ireturn\n       LineNumberTable:\n         line 140: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n     Exceptions:\n@@ -301,16 +301,16 @@\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #10                 // Field in:Ljava/io/InputStream;\n-         4: invokevirtual #14                 // Method java/io/InputStream.close:()V\n+         1: getfield      #35                 // Field in:Ljava/io/InputStream;\n+         4: invokevirtual #48                 // Method java/io/InputStream.close:()V\n          7: return\n       LineNumberTable:\n         line 145: 0\n         line 146: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n@@ -319,52 +319,52 @@\n \n   public long getCompressedCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n-         4: invokevirtual #15                 // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+         1: getfield      #26                 // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;\n+         4: invokevirtual #51                 // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n          7: lreturn\n       LineNumberTable:\n         line 153: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/xz/XZCompressorInputStream;\n \n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #10                 // Field in:Ljava/io/InputStream;\n-         4: invokevirtual #16                 // Method java/io/InputStream.read:()I\n+         1: getfield      #35                 // Field in:Ljava/io/InputStream;\n+         4: invokevirtual #55                 // Method java/io/InputStream.read:()I\n          7: istore_1\n          8: aload_0\n          9: iload_1\n         10: iconst_m1\n         11: if_icmpne     18\n         14: iconst_m1\n         15: goto          19\n         18: iconst_1\n-        19: invokevirtual #17                 // Method count:(I)V\n+        19: invokevirtual #58                 // Method count:(I)V\n         22: iload_1\n         23: ireturn\n         24: astore_1\n-        25: new           #19                 // class org/apache/commons/compress/MemoryLimitException\n+        25: new           #64                 // class org/apache/commons/compress/MemoryLimitException\n         28: dup\n         29: aload_1\n-        30: invokevirtual #20                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n+        30: invokevirtual #66                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n         33: i2l\n         34: aload_1\n-        35: invokevirtual #21                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n+        35: invokevirtual #69                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n         38: aload_1\n-        39: invokespecial #22                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n+        39: invokespecial #72                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n         42: athrow\n       Exception table:\n          from    to  target type\n              0    23    24   Class org/tukaani/xz/MemoryLimitException\n       LineNumberTable:\n         line 159: 0\n         line 160: 8\n@@ -398,35 +398,35 @@\n     Code:\n       stack=6, locals=5, args_size=4\n          0: iload_3\n          1: ifne          6\n          4: iconst_0\n          5: ireturn\n          6: aload_0\n-         7: getfield      #10                 // Field in:Ljava/io/InputStream;\n+         7: getfield      #35                 // Field in:Ljava/io/InputStream;\n         10: aload_1\n         11: iload_2\n         12: iload_3\n-        13: invokevirtual #23                 // Method java/io/InputStream.read:([BII)I\n+        13: invokevirtual #75                 // Method java/io/InputStream.read:([BII)I\n         16: istore        4\n         18: aload_0\n         19: iload         4\n-        21: invokevirtual #17                 // Method count:(I)V\n+        21: invokevirtual #58                 // Method count:(I)V\n         24: iload         4\n         26: ireturn\n         27: astore        4\n-        29: new           #19                 // class org/apache/commons/compress/MemoryLimitException\n+        29: new           #64                 // class org/apache/commons/compress/MemoryLimitException\n         32: dup\n         33: aload         4\n-        35: invokevirtual #20                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n+        35: invokevirtual #66                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n         38: i2l\n         39: aload         4\n-        41: invokevirtual #21                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n+        41: invokevirtual #69                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n         44: aload         4\n-        46: invokespecial #22                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n+        46: invokespecial #72                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n         49: athrow\n       Exception table:\n          from    to  target type\n              6    26    27   Class org/tukaani/xz/MemoryLimitException\n       LineNumberTable:\n         line 169: 0\n         line 170: 4\n@@ -452,28 +452,28 @@\n \n   public long skip(long) throws java.io.IOException;\n     descriptor: (J)J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=4, args_size=2\n          0: aload_0\n-         1: getfield      #10                 // Field in:Ljava/io/InputStream;\n+         1: getfield      #35                 // Field in:Ljava/io/InputStream;\n          4: lload_1\n-         5: invokestatic  #24                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+         5: invokestatic  #78                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n          8: lreturn\n          9: astore_3\n-        10: new           #19                 // class org/apache/commons/compress/MemoryLimitException\n+        10: new           #64                 // class org/apache/commons/compress/MemoryLimitException\n         13: dup\n         14: aload_3\n-        15: invokevirtual #20                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n+        15: invokevirtual #66                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I\n         18: i2l\n         19: aload_3\n-        20: invokevirtual #21                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n+        20: invokevirtual #69                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I\n         23: aload_3\n-        24: invokespecial #22                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n+        24: invokespecial #72                 // Method org/apache/commons/compress/MemoryLimitException.\"<init>\":(JILjava/lang/Exception;)V\n         27: athrow\n       Exception table:\n          from    to  target type\n              0     8     9   Class org/tukaani/xz/MemoryLimitException\n       LineNumberTable:\n         line 185: 0\n         line 186: 9\n"}]}
