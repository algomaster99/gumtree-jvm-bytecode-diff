{"diffoscope-json-version": 1, "source1": "first/ZipArchiveInputStream$BoundedInputStream.class", "source2": "second/ZipArchiveInputStream$BoundedInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,17 +7,17 @@\n \n private class BoundedInputStream extends InputStream\n {\n     private final InputStream in;\n     private final long max;\n     private long pos;\n     \n-    public BoundedInputStream(final ZipArchiveInputStream this$0, final InputStream in, final long size) {\n+    public BoundedInputStream(final ZipArchiveInputStream this$0, final InputStream in, final long max) {\n         this.this$0 = this$0;\n-        this.max = size;\n+        this.max = max;\n         this.in = in;\n     }\n     \n     @Override\n     public int available() throws IOException {\n         if (this.max >= 0L && this.pos >= this.max) {\n             return 0;\n@@ -26,46 +26,44 @@\n     }\n     \n     @Override\n     public int read() throws IOException {\n         if (this.max >= 0L && this.pos >= this.max) {\n             return -1;\n         }\n-        final int result = this.in.read();\n+        final int read = this.in.read();\n         ++this.pos;\n         ZipArchiveInputStream.access$000(this.this$0, 1);\n         ZipArchiveInputStream.CurrentEntry.access$208(ZipArchiveInputStream.access$100(this.this$0));\n-        return result;\n+        return read;\n     }\n     \n     @Override\n-    public int read(final byte[] b) throws IOException {\n-        return this.read(b, 0, b.length);\n+    public int read(final byte[] array) throws IOException {\n+        return this.read(array, 0, array.length);\n     }\n     \n     @Override\n-    public int read(final byte[] b, final int off, final int len) throws IOException {\n-        if (len == 0) {\n+    public int read(final byte[] b, final int off, final int n) throws IOException {\n+        if (n == 0) {\n             return 0;\n         }\n         if (this.max >= 0L && this.pos >= this.max) {\n             return -1;\n         }\n-        final long maxRead = (this.max >= 0L) ? Math.min(len, this.max - this.pos) : ((long)len);\n-        final int bytesRead = this.in.read(b, off, (int)maxRead);\n-        if (bytesRead == -1) {\n+        final int read = this.in.read(b, off, (int)((this.max >= 0L) ? Math.min(n, this.max - this.pos) : ((long)n)));\n+        if (read == -1) {\n             return -1;\n         }\n-        this.pos += bytesRead;\n-        ZipArchiveInputStream.access$300(this.this$0, bytesRead);\n-        ZipArchiveInputStream.CurrentEntry.access$214(ZipArchiveInputStream.access$100(this.this$0), (long)bytesRead);\n-        return bytesRead;\n+        this.pos += read;\n+        ZipArchiveInputStream.access$300(this.this$0, read);\n+        ZipArchiveInputStream.CurrentEntry.access$214(ZipArchiveInputStream.access$100(this.this$0), (long)read);\n+        return read;\n     }\n     \n     @Override\n-    public long skip(final long n) throws IOException {\n-        final long toSkip = (this.max >= 0L) ? Math.min(n, this.max - this.pos) : n;\n-        final long skippedBytes = IOUtils.skip(this.in, toSkip);\n-        this.pos += skippedBytes;\n-        return skippedBytes;\n+    public long skip(final long a) throws IOException {\n+        final long skip = IOUtils.skip(this.in, (this.max >= 0L) ? Math.min(a, this.max - this.pos) : a);\n+        this.pos += skip;\n+        return skip;\n     }\n }\n"}]}
