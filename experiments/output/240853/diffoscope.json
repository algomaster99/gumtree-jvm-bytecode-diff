{"diffoscope-json-version": 1, "source1": "first/TFTPDataPacket.class", "source2": "second/TFTPDataPacket.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,87 +9,87 @@\n     public static final int MAX_DATA_LENGTH = 512;\n     public static final int MIN_DATA_LENGTH = 0;\n     int blockNumber;\n     private int length;\n     private int offset;\n     private byte[] data;\n     \n-    public TFTPDataPacket(final InetAddress destination, final int port, final int blockNumber, final byte[] data, final int offset, final int length) {\n-        super(3, destination, port);\n+    public TFTPDataPacket(final InetAddress inetAddress, final int n, final int blockNumber, final byte[] data, final int offset, final int length) {\n+        super(3, inetAddress, n);\n         this.blockNumber = blockNumber;\n         this.data = data;\n         this.offset = offset;\n         if (length > 512) {\n             this.length = 512;\n         }\n         else {\n             this.length = length;\n         }\n     }\n     \n-    public TFTPDataPacket(final InetAddress destination, final int port, final int blockNumber, final byte[] data) {\n-        this(destination, port, blockNumber, data, 0, data.length);\n+    public TFTPDataPacket(final InetAddress inetAddress, final int n, final int n2, final byte[] array) {\n+        this(inetAddress, n, n2, array, 0, array.length);\n     }\n     \n-    TFTPDataPacket(final DatagramPacket datagram) throws TFTPPacketException {\n-        super(3, datagram.getAddress(), datagram.getPort());\n-        this.data = datagram.getData();\n+    TFTPDataPacket(final DatagramPacket datagramPacket) throws TFTPPacketException {\n+        super(3, datagramPacket.getAddress(), datagramPacket.getPort());\n+        this.data = datagramPacket.getData();\n         this.offset = 4;\n         if (this.getType() != this.data[1]) {\n             throw new TFTPPacketException(\"TFTP operator code does not match type.\");\n         }\n         this.blockNumber = ((this.data[2] & 0xFF) << 8 | (this.data[3] & 0xFF));\n-        this.length = datagram.getLength() - 4;\n+        this.length = datagramPacket.getLength() - 4;\n         if (this.length > 512) {\n             this.length = 512;\n         }\n     }\n     \n-    DatagramPacket _newDatagram(final DatagramPacket datagram, final byte[] data) {\n+    DatagramPacket _newDatagram(final DatagramPacket datagramPacket, final byte[] data) {\n         data[0] = 0;\n         data[1] = (byte)this.type;\n         data[2] = (byte)((this.blockNumber & 0xFFFF) >> 8);\n         data[3] = (byte)(this.blockNumber & 0xFF);\n         if (data != this.data) {\n             System.arraycopy(this.data, this.offset, data, 4, this.length);\n         }\n-        datagram.setAddress(this.address);\n-        datagram.setPort(this.port);\n-        datagram.setData(data);\n-        datagram.setLength(this.length + 4);\n-        return datagram;\n+        datagramPacket.setAddress(this.address);\n+        datagramPacket.setPort(this.port);\n+        datagramPacket.setData(data);\n+        datagramPacket.setLength(this.length + 4);\n+        return datagramPacket;\n     }\n     \n     public DatagramPacket newDatagram() {\n-        final byte[] data = new byte[this.length + 4];\n-        data[0] = 0;\n-        data[1] = (byte)this.type;\n-        data[2] = (byte)((this.blockNumber & 0xFFFF) >> 8);\n-        data[3] = (byte)(this.blockNumber & 0xFF);\n-        System.arraycopy(this.data, this.offset, data, 4, this.length);\n-        return new DatagramPacket(data, this.length + 4, this.address, this.port);\n+        final byte[] buf = new byte[this.length + 4];\n+        buf[0] = 0;\n+        buf[1] = (byte)this.type;\n+        buf[2] = (byte)((this.blockNumber & 0xFFFF) >> 8);\n+        buf[3] = (byte)(this.blockNumber & 0xFF);\n+        System.arraycopy(this.data, this.offset, buf, 4, this.length);\n+        return new DatagramPacket(buf, this.length + 4, this.address, this.port);\n     }\n     \n     public int getBlockNumber() {\n         return this.blockNumber;\n     }\n     \n     public void setBlockNumber(final int blockNumber) {\n         this.blockNumber = blockNumber;\n     }\n     \n-    public void setData(final byte[] data, final int offset, final int length) {\n+    public void setData(final byte[] data, final int offset, final int n) {\n         this.data = data;\n         this.offset = offset;\n-        this.length = length;\n-        if (length > 512) {\n+        this.length = n;\n+        if (n > 512) {\n             this.length = 512;\n         }\n         else {\n-            this.length = length;\n+            this.length = n;\n         }\n     }\n     \n     public int getDataLength() {\n         return this.length;\n     }\n     \n"}]}
