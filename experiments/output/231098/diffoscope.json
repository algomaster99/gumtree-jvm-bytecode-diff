{"diffoscope-json-version": 1, "source1": "first/SwitchForm.class", "source2": "second/SwitchForm.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -2,28 +2,26 @@\n package org.apache.commons.compress.harmony.unpack200.bytecode.forms;\n \n import org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute;\n import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;\n \n public abstract class SwitchForm extends VariableInstructionForm\n {\n-    public SwitchForm(final int opcode, final String name) {\n-        super(opcode, name);\n+    public SwitchForm(final int n, final String s) {\n+        super(n, s);\n     }\n     \n     public void fixUpByteCodeTargets(final ByteCode byteCode, final CodeAttribute codeAttribute) {\n-        final int[] originalTargets = byteCode.getByteCodeTargets();\n-        final int numberOfLabels = originalTargets.length;\n-        final int[] replacementTargets = new int[numberOfLabels];\n-        final int sourceIndex = byteCode.getByteCodeIndex();\n-        final int sourceValue = (int)Integer.valueOf(codeAttribute.byteCodeOffsets.get(sourceIndex));\n-        for (int index = 0; index < numberOfLabels; ++index) {\n-            final int absoluteInstructionTargetIndex = sourceIndex + originalTargets[index];\n-            final int targetValue = (int)Integer.valueOf(codeAttribute.byteCodeOffsets.get(absoluteInstructionTargetIndex));\n-            replacementTargets[index] = targetValue - sourceValue;\n+        final int[] byteCodeTargets = byteCode.getByteCodeTargets();\n+        final int length = byteCodeTargets.length;\n+        final int[] array = new int[length];\n+        final int byteCodeIndex = byteCode.getByteCodeIndex();\n+        final int intValue = (int)Integer.valueOf(codeAttribute.byteCodeOffsets.get(byteCodeIndex));\n+        for (int i = 0; i < length; ++i) {\n+            array[i] = (int)codeAttribute.byteCodeOffsets.get(byteCodeIndex + byteCodeTargets[i]) - intValue;\n         }\n-        final int[] rewriteArray = byteCode.getRewrite();\n-        for (int index2 = 0; index2 < numberOfLabels; ++index2) {\n-            this.setRewrite4Bytes(replacementTargets[index2], rewriteArray);\n+        final int[] rewrite = byteCode.getRewrite();\n+        for (int j = 0; j < length; ++j) {\n+            this.setRewrite4Bytes(array[j], rewrite);\n         }\n     }\n }\n"}]}
