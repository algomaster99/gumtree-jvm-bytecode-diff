{"diffoscope-json-version": 1, "source1": "first/AndFileFilter.class", "source2": "second/AndFileFilter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -43,23 +43,23 @@\n     }\n     \n     public AndFileFilter(final List<IOFileFilter> fileFilters) {\n         this(new ArrayList<IOFileFilter>((Collection<? extends IOFileFilter>)Objects.requireNonNull(fileFilters, \"fileFilters\")));\n     }\n     \n     public boolean accept(final File file) {\n-        return !this.isEmpty() && this.fileFilters.stream().allMatch(fileFilter -> fileFilter.accept(file));\n+        return !this.isEmpty() && this.fileFilters.stream().allMatch(fileFilter -> fileFilter.accept(file2));\n     }\n     \n     public boolean accept(final File file, final String name) {\n-        return !this.isEmpty() && this.fileFilters.stream().allMatch(fileFilter -> fileFilter.accept(file, name));\n+        return !this.isEmpty() && this.fileFilters.stream().allMatch(fileFilter -> fileFilter.accept(file2, s));\n     }\n     \n     public FileVisitResult accept(final Path file, final BasicFileAttributes attributes) {\n-        return this.isEmpty() ? FileVisitResult.TERMINATE : toDefaultFileVisitResult(this.fileFilters.stream().allMatch(fileFilter -> fileFilter.accept(file, attributes) == FileVisitResult.CONTINUE));\n+        return this.isEmpty() ? FileVisitResult.TERMINATE : toDefaultFileVisitResult(this.fileFilters.stream().allMatch(fileFilter -> fileFilter.accept(path, basicFileAttributes) == FileVisitResult.CONTINUE));\n     }\n     \n     public void addFileFilter(final IOFileFilter fileFilter) {\n         this.fileFilters.add(Objects.requireNonNull(fileFilter, \"fileFilter\"));\n     }\n     \n     public void addFileFilter(final IOFileFilter... fileFilters) {\n"}]}
