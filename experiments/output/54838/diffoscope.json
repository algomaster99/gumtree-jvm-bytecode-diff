{"diffoscope-json-version": 1, "source1": "first/BaseHierarchicalConfiguration.class", "source2": "second/BaseHierarchicalConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -22,15 +22,15 @@\n import org.apache.commons.configuration2.tree.ImmutableNode;\n \n public class BaseHierarchicalConfiguration extends AbstractHierarchicalConfiguration<ImmutableNode> implements InMemoryNodeModelSupport\n {\n     private final EventListener<ConfigurationEvent> changeListener;\n     \n     public BaseHierarchicalConfiguration() {\n-        this((HierarchicalConfiguration<ImmutableNode>)(HierarchicalConfiguration)null);\n+        this((HierarchicalConfiguration<ImmutableNode>)null);\n     }\n     \n     public BaseHierarchicalConfiguration(final HierarchicalConfiguration<ImmutableNode> c) {\n         this(createNodeModel(c));\n     }\n     \n     protected BaseHierarchicalConfiguration(final NodeModel<ImmutableNode> model) {\n@@ -144,15 +144,15 @@\n         final BaseHierarchicalConfiguration sub = new BaseHierarchicalConfiguration((NodeModel<ImmutableNode>)new InMemoryNodeModel(node));\n         this.initSubConfiguration(sub);\n         return sub;\n     }\n     \n     private List<ImmutableNode> fetchFilteredNodeResults(final String key) {\n         final NodeHandler<ImmutableNode> handler = (NodeHandler<ImmutableNode>)this.getModel().getNodeHandler();\n-        return this.resolveNodeKey(handler.getRootNode(), key, (NodeHandler)handler);\n+        return this.resolveNodeKey((Object)handler.getRootNode(), key, (NodeHandler)handler);\n     }\n     \n     public ImmutableHierarchicalConfiguration immutableConfigurationAt(final String key, final boolean supportUpdates) {\n         return ConfigurationUtils.unmodifiableConfiguration((HierarchicalConfiguration)this.configurationAt(key, supportUpdates));\n     }\n     \n     public HierarchicalConfiguration<ImmutableNode> configurationAt(final String key) {\n@@ -168,14 +168,15 @@\n         List<ImmutableNode> nodes;\n         try {\n             nodes = this.fetchFilteredNodeResults(key);\n         }\n         finally {\n             this.endRead();\n         }\n+        this.endRead();\n         final List<HierarchicalConfiguration<ImmutableNode>> results = new ArrayList<HierarchicalConfiguration<ImmutableNode>>(nodes.size());\n         for (final ImmutableNode node : nodes) {\n             final BaseHierarchicalConfiguration sub = this.createIndependentSubConfigurationForNode(node);\n             results.add((HierarchicalConfiguration<ImmutableNode>)sub);\n         }\n         return results;\n     }\n@@ -188,14 +189,15 @@\n         InMemoryNodeModel parentModel;\n         try {\n             parentModel = this.getSubConfigurationParentModel();\n         }\n         finally {\n             this.endRead();\n         }\n+        this.endRead();\n         final Collection<NodeSelector> selectors = parentModel.selectAndTrackNodes(key, (NodeKeyResolver)this);\n         return this.createConnectedSubConfigurations((InMemoryNodeModelSupport)this, selectors);\n     }\n     \n     public List<ImmutableHierarchicalConfiguration> immutableConfigurationsAt(final String key) {\n         return toImmutable(this.configurationsAt(key));\n     }\n@@ -205,14 +207,15 @@\n         List<ImmutableNode> nodes;\n         try {\n             nodes = this.fetchFilteredNodeResults(key);\n         }\n         finally {\n             this.endRead();\n         }\n+        this.endRead();\n         if (nodes.size() != 1) {\n             return Collections.emptyList();\n         }\n         final ImmutableNode parent = (ImmutableNode)nodes.get(0);\n         final List<HierarchicalConfiguration<ImmutableNode>> subs = new ArrayList<HierarchicalConfiguration<ImmutableNode>>(parent.getChildren().size());\n         for (final ImmutableNode node : parent.getChildren()) {\n             subs.add((HierarchicalConfiguration<ImmutableNode>)this.createIndependentSubConfigurationForNode(node));\n@@ -247,15 +250,15 @@\n     private EventListener<ConfigurationEvent> createChangeListener() {\n         return (EventListener<ConfigurationEvent>)(event -> this.subnodeConfigurationChanged(event));\n     }\n     \n     public Configuration interpolatedConfiguration() {\n         final BaseHierarchicalConfiguration.InterpolatedVisitor visitor = new BaseHierarchicalConfiguration.InterpolatedVisitor(this);\n         final NodeHandler<ImmutableNode> handler = (NodeHandler<ImmutableNode>)this.getModel().getNodeHandler();\n-        NodeTreeWalker.INSTANCE.walkDFS(handler.getRootNode(), (ConfigurationNodeVisitor)visitor, (NodeHandler)handler);\n+        NodeTreeWalker.INSTANCE.walkDFS((Object)handler.getRootNode(), (ConfigurationNodeVisitor)visitor, (NodeHandler)handler);\n         final BaseHierarchicalConfiguration c = (BaseHierarchicalConfiguration)this.clone();\n         c.getNodeModel().setRootNode(visitor.getInterpolatedRoot());\n         return (Configuration)c;\n     }\n     \n     protected NodeModel<ImmutableNode> cloneNodeModel() {\n         return (NodeModel<ImmutableNode>)new InMemoryNodeModel((ImmutableNode)this.getModel().getNodeHandler().getRootNode());\n"}]}
