{"diffoscope-json-version": 1, "source1": "first/Coders.class", "source2": "second/Coders.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,14 +7,18 @@\n import java.io.InputStream;\n import java.util.Map;\n \n class Coders\n {\n     private static final Map<SevenZMethod, AbstractCoder> CODER_MAP;\n     \n+    static {\n+        CODER_MAP = (Map)new Coders.Coders$1();\n+    }\n+    \n     static InputStream addDecoder(final String archiveName, final InputStream is, final long uncompressedLength, final Coder coder, final byte[] password, final int maxMemoryLimitInKb) throws IOException {\n         final AbstractCoder cb = findByMethod(SevenZMethod.byId(coder.decompressionMethodId));\n         if (cb == null) {\n             throw new IOException(\"Unsupported compression method \" + Arrays.toString(coder.decompressionMethodId) + \" used in \" + archiveName);\n         }\n         return cb.decode(archiveName, is, uncompressedLength, coder, password, maxMemoryLimitInKb);\n     }\n@@ -26,12 +30,8 @@\n         }\n         return cb.encode(out, options);\n     }\n     \n     static AbstractCoder findByMethod(final SevenZMethod method) {\n         return Coders.CODER_MAP.get(method);\n     }\n-    \n-    static {\n-        CODER_MAP = (Map)new Coders.Coders$1();\n-    }\n }\n"}]}
