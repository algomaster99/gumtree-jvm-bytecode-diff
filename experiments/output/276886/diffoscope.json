{"diffoscope-json-version": 1, "source1": "first/ParseTreeTablePresentation.class", "source2": "second/ParseTreeTablePresentation.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,213 +1,214 @@\n \n package com.puppycrawl.tools.checkstyle.gui;\n \n import com.puppycrawl.tools.checkstyle.JavadocDetailNodeParser;\n import java.util.function.Function;\n import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n import com.puppycrawl.tools.checkstyle.utils.JavadocUtil;\n+import java.io.Serializable;\n import java.util.HashMap;\n import com.puppycrawl.tools.checkstyle.api.DetailNode;\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n import java.util.Map;\n \n public class ParseTreeTablePresentation\n {\n     private static final String UNKNOWN_COLUMN_MSG = \"Unknown column\";\n     private static final String[] COLUMN_NAMES;\n     private final Map<DetailAST, DetailNode> blockCommentToJavadocTree;\n     private DetailAST root;\n     private MainFrameModel.ParseMode parseMode;\n     \n-    public ParseTreeTablePresentation(final DetailAST parseTree) {\n+    public ParseTreeTablePresentation(final DetailAST root) {\n         this.blockCommentToJavadocTree = new HashMap<DetailAST, DetailNode>();\n-        this.root = parseTree;\n+        this.root = root;\n     }\n     \n-    protected final void setRoot(final DetailAST parseTree) {\n-        this.root = parseTree;\n+    protected final void setRoot(final DetailAST root) {\n+        this.root = root;\n     }\n     \n-    protected void setParseMode(final MainFrameModel.ParseMode mode) {\n-        this.parseMode = mode;\n+    protected void setParseMode(final MainFrameModel.ParseMode parseMode) {\n+        this.parseMode = parseMode;\n     }\n     \n     public int getColumnCount() {\n         return ParseTreeTablePresentation.COLUMN_NAMES.length;\n     }\n     \n-    public String getColumnName(final int column) {\n-        return ParseTreeTablePresentation.COLUMN_NAMES[column];\n+    public String getColumnName(final int n) {\n+        return ParseTreeTablePresentation.COLUMN_NAMES[n];\n     }\n     \n-    public Class<?> getColumnClass(final int column) {\n-        Class<?> columnClass = null;\n-        switch (column) {\n+    public Class<?> getColumnClass(final int n) {\n+        Serializable s = null;\n+        switch (n) {\n             case 0: {\n-                columnClass = ParseTreeTableModel.class;\n+                s = ParseTreeTableModel.class;\n                 break;\n             }\n             case 1:\n             case 4: {\n-                columnClass = String.class;\n+                s = String.class;\n                 break;\n             }\n             case 2:\n             case 3: {\n-                columnClass = Integer.class;\n+                s = Integer.class;\n                 break;\n             }\n             default: {\n                 throw new IllegalStateException(\"Unknown column\");\n             }\n         }\n-        return columnClass;\n+        return (Class<?>)s;\n     }\n     \n-    public Object getValueAt(final Object node, final int column) {\n-        Object result;\n-        if (node instanceof DetailNode) {\n-            result = getValueAtDetailNode((DetailNode)node, column);\n+    public Object getValueAt(final Object o, final int n) {\n+        Object o2;\n+        if (o instanceof DetailNode) {\n+            o2 = getValueAtDetailNode((DetailNode)o, n);\n         }\n         else {\n-            result = getValueAtDetailAST((DetailAST)node, column);\n+            o2 = getValueAtDetailAST((DetailAST)o, n);\n         }\n-        return result;\n+        return o2;\n     }\n     \n-    public Object getChild(final Object parent, final int index) {\n-        Object result;\n-        if (parent instanceof DetailNode) {\n-            result = ((DetailNode)parent).getChildren()[index];\n+    public Object getChild(final Object o, final int n) {\n+        Object childAtDetailAst;\n+        if (o instanceof DetailNode) {\n+            childAtDetailAst = ((DetailNode)o).getChildren()[n];\n         }\n         else {\n-            result = this.getChildAtDetailAst((DetailAST)parent, index);\n+            childAtDetailAst = this.getChildAtDetailAst((DetailAST)o, n);\n         }\n-        return result;\n+        return childAtDetailAst;\n     }\n     \n-    public int getChildCount(final Object parent) {\n-        int result;\n-        if (parent instanceof DetailNode) {\n-            result = ((DetailNode)parent).getChildren().length;\n+    public int getChildCount(final Object o) {\n+        int n;\n+        if (o instanceof DetailNode) {\n+            n = ((DetailNode)o).getChildren().length;\n         }\n-        else if (this.parseMode == MainFrameModel.ParseMode.JAVA_WITH_JAVADOC_AND_COMMENTS && ((DetailAST)parent).getType() == 183 && JavadocUtil.isJavadocComment(((DetailAST)parent).getParent())) {\n-            result = 1;\n+        else if (this.parseMode == MainFrameModel.ParseMode.JAVA_WITH_JAVADOC_AND_COMMENTS && ((DetailAST)o).getType() == 183 && JavadocUtil.isJavadocComment(((DetailAST)o).getParent())) {\n+            n = 1;\n         }\n         else {\n-            result = ((DetailAST)parent).getChildCount();\n+            n = ((DetailAST)o).getChildCount();\n         }\n-        return result;\n+        return n;\n     }\n     \n     public Object getRoot() {\n         return this.root;\n     }\n     \n-    public boolean isLeaf(final Object node) {\n-        return this.getChildCount(node) == 0;\n+    public boolean isLeaf(final Object o) {\n+        return this.getChildCount(o) == 0;\n     }\n     \n-    public int getIndexOfChild(final Object parent, final Object child) {\n-        int index = -1;\n-        for (int i = 0; i < this.getChildCount(parent); ++i) {\n-            if (this.getChild(parent, i).equals(child)) {\n-                index = i;\n+    public int getIndexOfChild(final Object o, final Object obj) {\n+        int n = -1;\n+        for (int i = 0; i < this.getChildCount(o); ++i) {\n+            if (this.getChild(o, i).equals(obj)) {\n+                n = i;\n                 break;\n             }\n         }\n-        return index;\n+        return n;\n     }\n     \n-    public boolean isCellEditable(final int column) {\n+    public boolean isCellEditable(final int n) {\n         return false;\n     }\n     \n-    private Object getChildAtDetailAst(final DetailAST parent, final int index) {\n-        Object result;\n-        if (this.parseMode == MainFrameModel.ParseMode.JAVA_WITH_JAVADOC_AND_COMMENTS && parent.getType() == 183 && JavadocUtil.isJavadocComment(parent.getParent())) {\n-            result = this.getJavadocTree(parent.getParent());\n+    private Object getChildAtDetailAst(final DetailAST detailAST, final int n) {\n+        DetailNode javadocTree;\n+        if (this.parseMode == MainFrameModel.ParseMode.JAVA_WITH_JAVADOC_AND_COMMENTS && detailAST.getType() == 183 && JavadocUtil.isJavadocComment(detailAST.getParent())) {\n+            javadocTree = this.getJavadocTree(detailAST.getParent());\n         }\n         else {\n-            int currentIndex = 0;\n-            DetailAST child = parent.getFirstChild();\n-            while (currentIndex < index) {\n-                child = child.getNextSibling();\n-                ++currentIndex;\n+            int i = 0;\n+            DetailAST detailAST2 = detailAST.getFirstChild();\n+            while (i < n) {\n+                detailAST2 = detailAST2.getNextSibling();\n+                ++i;\n             }\n-            result = child;\n+            javadocTree = (DetailNode)detailAST2;\n         }\n-        return result;\n+        return javadocTree;\n     }\n     \n-    private static Object getValueAtDetailNode(final DetailNode node, final int column) {\n-        Object value = null;\n-        switch (column) {\n+    private static Object getValueAtDetailNode(final DetailNode detailNode, final int n) {\n+        Object o = null;\n+        switch (n) {\n             case 0: {\n-                value = null;\n+                o = null;\n                 break;\n             }\n             case 1: {\n-                value = JavadocUtil.getTokenName(node.getType());\n+                o = JavadocUtil.getTokenName(detailNode.getType());\n                 break;\n             }\n             case 2: {\n-                value = Integer.valueOf(node.getLineNumber());\n+                o = Integer.valueOf(detailNode.getLineNumber());\n                 break;\n             }\n             case 3: {\n-                value = Integer.valueOf(node.getColumnNumber());\n+                o = Integer.valueOf(detailNode.getColumnNumber());\n                 break;\n             }\n             case 4: {\n-                value = node.getText();\n+                o = detailNode.getText();\n                 break;\n             }\n             default: {\n                 throw new IllegalStateException(\"Unknown column\");\n             }\n         }\n-        return value;\n+        return o;\n     }\n     \n-    private static Object getValueAtDetailAST(final DetailAST ast, final int column) {\n-        Object value = null;\n-        switch (column) {\n+    private static Object getValueAtDetailAST(final DetailAST detailAST, final int n) {\n+        Object o = null;\n+        switch (n) {\n             case 0: {\n-                value = null;\n+                o = null;\n                 break;\n             }\n             case 1: {\n-                value = TokenUtil.getTokenName(ast.getType());\n+                o = TokenUtil.getTokenName(detailAST.getType());\n                 break;\n             }\n             case 2: {\n-                value = Integer.valueOf(ast.getLineNo());\n+                o = Integer.valueOf(detailAST.getLineNo());\n                 break;\n             }\n             case 3: {\n-                value = Integer.valueOf(ast.getColumnNo());\n+                o = Integer.valueOf(detailAST.getColumnNo());\n                 break;\n             }\n             case 4: {\n-                value = ast.getText();\n+                o = detailAST.getText();\n                 break;\n             }\n             default: {\n                 throw new IllegalStateException(\"Unknown column\");\n             }\n         }\n-        return value;\n+        return o;\n     }\n     \n-    private DetailNode getJavadocTree(final DetailAST blockComment) {\n-        return this.blockCommentToJavadocTree.computeIfAbsent(blockComment, ParseTreeTablePresentation::parseJavadocTree);\n+    private DetailNode getJavadocTree(final DetailAST key) {\n+        return this.blockCommentToJavadocTree.computeIfAbsent(key, ParseTreeTablePresentation::parseJavadocTree);\n     }\n     \n-    private static DetailNode parseJavadocTree(final DetailAST blockComment) {\n-        return new JavadocDetailNodeParser().parseJavadocAsDetailNode(blockComment).getTree();\n+    private static DetailNode parseJavadocTree(final DetailAST detailAST) {\n+        return new JavadocDetailNodeParser().parseJavadocAsDetailNode(detailAST).getTree();\n     }\n     \n     static {\n         COLUMN_NAMES = new String[] { \"Tree\", \"Type\", \"Line\", \"Column\", \"Text\" };\n     }\n }\n"}]}
