{"diffoscope-json-version": 1, "source1": "first/FileCleaningTracker.class", "source2": "second/FileCleaningTracker.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -21,40 +21,40 @@\n     \n     public FileCleaningTracker() {\n         this.q = new ReferenceQueue<Object>();\n         this.trackers = (Collection<FileCleaningTracker.Tracker>)Collections.synchronizedSet(new HashSet<Object>());\n         this.deleteFailures = Collections.synchronizedList(new ArrayList<String>());\n     }\n     \n-    public void track(final File file, final Object marker) {\n-        this.track(file, marker, null);\n+    public void track(final File file, final Object o) {\n+        this.track(file, o, null);\n     }\n     \n-    public void track(final File file, final Object marker, final FileDeleteStrategy deleteStrategy) {\n-        Objects.requireNonNull(file, \"file\");\n-        this.addTracker(file.getPath(), marker, deleteStrategy);\n+    public void track(final File obj, final Object o, final FileDeleteStrategy fileDeleteStrategy) {\n+        Objects.requireNonNull(obj, \"file\");\n+        this.addTracker(obj.getPath(), o, fileDeleteStrategy);\n     }\n     \n-    public void track(final String path, final Object marker) {\n-        this.track(path, marker, null);\n+    public void track(final String s, final Object o) {\n+        this.track(s, o, null);\n     }\n     \n-    public void track(final String path, final Object marker, final FileDeleteStrategy deleteStrategy) {\n-        Objects.requireNonNull(path, \"path\");\n-        this.addTracker(path, marker, deleteStrategy);\n+    public void track(final String obj, final Object o, final FileDeleteStrategy fileDeleteStrategy) {\n+        Objects.requireNonNull(obj, \"path\");\n+        this.addTracker(obj, o, fileDeleteStrategy);\n     }\n     \n-    private synchronized void addTracker(final String path, final Object marker, final FileDeleteStrategy deleteStrategy) {\n+    private synchronized void addTracker(final String s, final Object o, final FileDeleteStrategy fileDeleteStrategy) {\n         if (this.exitWhenFinished) {\n             throw new IllegalStateException(\"No new trackers can be added once exitWhenFinished() is called\");\n         }\n         if (this.reaper == null) {\n             (this.reaper = (Thread)new FileCleaningTracker.Reaper(this)).start();\n         }\n-        this.trackers.add(new FileCleaningTracker.Tracker(path, deleteStrategy, marker, (ReferenceQueue)this.q));\n+        this.trackers.add(new FileCleaningTracker.Tracker(s, fileDeleteStrategy, o, (ReferenceQueue)this.q));\n     }\n     \n     public int getTrackCount() {\n         return this.trackers.size();\n     }\n     \n     public List<String> getDeleteFailures() {\n"}]}
