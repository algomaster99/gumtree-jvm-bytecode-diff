{"diffoscope-json-version": 1, "source1": "first/XmlMetaWriter.class", "source2": "second/XmlMetaWriter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,15 +11,14 @@\n import java.util.Locale;\n import java.util.List;\n import javax.xml.parsers.ParserConfigurationException;\n import javax.xml.transform.TransformerException;\n import java.util.Iterator;\n import org.w3c.dom.Element;\n import org.w3c.dom.Document;\n-import javax.xml.parsers.DocumentBuilder;\n import org.w3c.dom.Node;\n import javax.xml.parsers.DocumentBuilderFactory;\n import java.util.regex.Pattern;\n \n public final class XmlMetaWriter\n {\n     private static final Pattern FILEPATH_CONVERSION;\n@@ -27,97 +26,90 @@\n     private static final String XML_TAG_DESCRIPTION = \"description\";\n     private static final String DEFAULT_FILE_SEPARATOR = \"/\";\n     \n     private XmlMetaWriter() {\n     }\n     \n     public static void write(final ModuleDetails moduleDetails) throws TransformerException, ParserConfigurationException {\n-        final DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n-        dbFactory.setAttribute(\"http://javax.xml.XMLConstants/property/accessExternalDTD\", \"\");\n-        dbFactory.setAttribute(\"http://javax.xml.XMLConstants/property/accessExternalSchema\", \"\");\n-        final DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n-        final Document doc = dBuilder.newDocument();\n-        final Element rootElement = doc.createElement(\"checkstyle-metadata\");\n-        final Element rootChild = doc.createElement(\"module\");\n-        rootElement.appendChild(rootChild);\n-        doc.appendChild(rootElement);\n-        final Element checkModule = doc.createElement(moduleDetails.getModuleType().getLabel());\n-        rootChild.appendChild(checkModule);\n-        checkModule.setAttribute(\"name\", moduleDetails.getName());\n-        checkModule.setAttribute(\"fully-qualified-name\", moduleDetails.getFullQualifiedName());\n-        checkModule.setAttribute(\"parent\", moduleDetails.getParent());\n-        final Element desc = doc.createElement(\"description\");\n-        final Node cdataDesc = doc.createCDATASection(moduleDetails.getDescription());\n-        desc.appendChild(cdataDesc);\n-        checkModule.appendChild(desc);\n-        createPropertySection(moduleDetails, checkModule, doc);\n+        final DocumentBuilderFactory instance = DocumentBuilderFactory.newInstance();\n+        instance.setAttribute(\"http://javax.xml.XMLConstants/property/accessExternalDTD\", \"\");\n+        instance.setAttribute(\"http://javax.xml.XMLConstants/property/accessExternalSchema\", \"\");\n+        final Document document = instance.newDocumentBuilder().newDocument();\n+        final Element element = document.createElement(\"checkstyle-metadata\");\n+        final Element element2 = document.createElement(\"module\");\n+        element.appendChild(element2);\n+        document.appendChild(element);\n+        final Element element3 = document.createElement(moduleDetails.getModuleType().getLabel());\n+        element2.appendChild(element3);\n+        element3.setAttribute(\"name\", moduleDetails.getName());\n+        element3.setAttribute(\"fully-qualified-name\", moduleDetails.getFullQualifiedName());\n+        element3.setAttribute(\"parent\", moduleDetails.getParent());\n+        final Element element4 = document.createElement(\"description\");\n+        element4.appendChild(document.createCDATASection(moduleDetails.getDescription()));\n+        element3.appendChild(element4);\n+        createPropertySection(moduleDetails, element3, document);\n         if (!moduleDetails.getViolationMessageKeys().isEmpty()) {\n-            final Element messageKeys = doc.createElement(\"message-keys\");\n-            for (final String msg : moduleDetails.getViolationMessageKeys()) {\n-                final Element messageKey = doc.createElement(\"message-key\");\n-                messageKey.setAttribute(\"key\", msg);\n-                messageKeys.appendChild(messageKey);\n+            final Element element5 = document.createElement(\"message-keys\");\n+            for (final String s : moduleDetails.getViolationMessageKeys()) {\n+                final Element element6 = document.createElement(\"message-key\");\n+                element6.setAttribute(\"key\", s);\n+                element5.appendChild(element6);\n             }\n-            checkModule.appendChild(messageKeys);\n+            element3.appendChild(element5);\n         }\n-        writeToFile(doc, moduleDetails);\n+        writeToFile(document, moduleDetails);\n     }\n     \n-    private static void createPropertySection(final ModuleDetails moduleDetails, final Element checkModule, final Document doc) {\n-        final List<ModulePropertyDetails> moduleProperties = moduleDetails.getProperties();\n-        if (!moduleProperties.isEmpty()) {\n-            final Element properties = doc.createElement(\"properties\");\n-            checkModule.appendChild(properties);\n-            for (final ModulePropertyDetails modulePropertyDetails : moduleProperties) {\n-                final Element property = doc.createElement(\"property\");\n-                properties.appendChild(property);\n-                property.setAttribute(\"name\", modulePropertyDetails.getName());\n-                property.setAttribute(\"type\", modulePropertyDetails.getType());\n+    private static void createPropertySection(final ModuleDetails moduleDetails, final Element element, final Document document) {\n+        final List properties = moduleDetails.getProperties();\n+        if (!properties.isEmpty()) {\n+            final Element element2 = document.createElement(\"properties\");\n+            element.appendChild(element2);\n+            for (final ModulePropertyDetails modulePropertyDetails : properties) {\n+                final Element element3 = document.createElement(\"property\");\n+                element2.appendChild(element3);\n+                element3.setAttribute(\"name\", modulePropertyDetails.getName());\n+                element3.setAttribute(\"type\", modulePropertyDetails.getType());\n                 final String defaultValue = modulePropertyDetails.getDefaultValue();\n                 if (defaultValue != null) {\n-                    property.setAttribute(\"default-value\", defaultValue);\n+                    element3.setAttribute(\"default-value\", defaultValue);\n                 }\n                 final String validationType = modulePropertyDetails.getValidationType();\n                 if (validationType != null) {\n-                    property.setAttribute(\"validation-type\", validationType);\n+                    element3.setAttribute(\"validation-type\", validationType);\n                 }\n-                final Element propertyDesc = doc.createElement(\"description\");\n-                propertyDesc.appendChild(doc.createCDATASection(modulePropertyDetails.getDescription()));\n-                property.appendChild(propertyDesc);\n+                final Element element4 = document.createElement(\"description\");\n+                element4.appendChild(document.createCDATASection(modulePropertyDetails.getDescription()));\n+                element3.appendChild(element4);\n             }\n         }\n     }\n     \n-    private static void writeToFile(final Document document, final ModuleDetails moduleDetails) throws TransformerException {\n-        String fileSeparator = \"/\";\n+    private static void writeToFile(final Document n, final ModuleDetails moduleDetails) throws TransformerException {\n+        String replacement = \"/\";\n         if (System.getProperty(\"os.name\").toLowerCase(Locale.ENGLISH).contains(\"win\")) {\n-            fileSeparator = \"\\\\\" + fileSeparator;\n+            replacement = \"\\\\\" + replacement;\n         }\n-        final String xmlExtension = \".xml\";\n-        final String rootOutputPath = System.getProperty(\"user.dir\") + \"/src/main/resources\";\n-        String modifiedPath;\n+        final String s = System.getProperty(\"user.dir\") + \"/src/main/resources\";\n+        String pathname;\n         if (moduleDetails.getFullQualifiedName().startsWith(\"com.puppycrawl.tools.checkstyle\")) {\n-            final String moduleFilePath = XmlMetaWriter.FILEPATH_CONVERSION.matcher(moduleDetails.getFullQualifiedName()).replaceAll(fileSeparator);\n-            final String checkstyleString = \"checkstyle\";\n-            final int indexOfCheckstyle = moduleFilePath.indexOf(\"checkstyle\") + \"checkstyle\".length();\n-            modifiedPath = rootOutputPath + \"/\" + moduleFilePath.substring(0, indexOfCheckstyle) + \"/meta/\" + moduleFilePath.substring(indexOfCheckstyle + 1) + \".xml\";\n+            final String replaceAll = XmlMetaWriter.FILEPATH_CONVERSION.matcher(moduleDetails.getFullQualifiedName()).replaceAll(replacement);\n+            final int endIndex = replaceAll.indexOf(\"checkstyle\") + \"checkstyle\".length();\n+            pathname = s + \"/\" + replaceAll.substring(0, endIndex) + \"/meta/\" + replaceAll.substring(endIndex + 1) + \".xml\";\n         }\n         else {\n-            String moduleName = moduleDetails.getName();\n+            String name = moduleDetails.getName();\n             if (moduleDetails.getModuleType() == ModuleType.CHECK) {\n-                moduleName += \"Check\";\n+                name += \"Check\";\n             }\n-            modifiedPath = rootOutputPath + \"/checkstylemeta-\" + moduleName + \".xml\";\n+            pathname = s + \"/checkstylemeta-\" + name + \".xml\";\n         }\n-        final TransformerFactory transformerFactory = TransformerFactory.newInstance();\n-        final Transformer transformer = transformerFactory.newTransformer();\n+        final Transformer transformer = TransformerFactory.newInstance().newTransformer();\n         transformer.setOutputProperty(\"indent\", \"yes\");\n         transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"4\");\n-        final DOMSource source = new DOMSource(document);\n-        final StreamResult result = new StreamResult(new File(modifiedPath));\n-        transformer.transform(source, result);\n+        transformer.transform(new DOMSource(n), new StreamResult(new File(pathname)));\n     }\n     \n     static {\n         FILEPATH_CONVERSION = Pattern.compile(\"\\\\.\");\n     }\n }\n"}]}
