{"diffoscope-json-version": 1, "source1": "first/INVOKEDYNAMIC.class", "source2": "second/INVOKEDYNAMIC.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,60 +1,59 @@\n \n package org.apache.bcel.generic;\n \n import org.apache.bcel.util.ByteSequence;\n import org.apache.bcel.ExceptionConst;\n import org.apache.bcel.classfile.ConstantPool;\n-import org.apache.bcel.classfile.ConstantNameAndType;\n import org.apache.bcel.classfile.ConstantInvokeDynamic;\n+import org.apache.bcel.classfile.ConstantNameAndType;\n import java.io.IOException;\n import java.io.DataOutputStream;\n \n public class INVOKEDYNAMIC extends InvokeInstruction\n {\n     INVOKEDYNAMIC() {\n     }\n     \n-    public INVOKEDYNAMIC(final int index) {\n-        super((short)186, index);\n+    public INVOKEDYNAMIC(final int n) {\n+        super((short)186, n);\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitExceptionThrower((ExceptionThrower)this);\n-        v.visitTypedInstruction((TypedInstruction)this);\n-        v.visitStackConsumer((StackConsumer)this);\n-        v.visitStackProducer((StackProducer)this);\n-        v.visitLoadClass((LoadClass)this);\n-        v.visitCPInstruction((CPInstruction)this);\n-        v.visitFieldOrMethod((FieldOrMethod)this);\n-        v.visitInvokeInstruction((InvokeInstruction)this);\n-        v.visitINVOKEDYNAMIC(this);\n-    }\n-    \n-    public void dump(final DataOutputStream out) throws IOException {\n-        out.writeByte(super.getOpcode());\n-        out.writeShort(super.getIndex());\n-        out.writeByte(0);\n-        out.writeByte(0);\n-    }\n-    \n-    public String getClassName(final ConstantPoolGen cpg) {\n-        final ConstantPool cp = cpg.getConstantPool();\n-        final ConstantInvokeDynamic cid = (ConstantInvokeDynamic)cp.getConstant(super.getIndex(), (byte)18, (Class)ConstantInvokeDynamic.class);\n-        return ((ConstantNameAndType)cp.getConstant(cid.getNameAndTypeIndex(), (Class)ConstantNameAndType.class)).getName(cp);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitExceptionThrower((ExceptionThrower)this);\n+        visitor.visitTypedInstruction((TypedInstruction)this);\n+        visitor.visitStackConsumer((StackConsumer)this);\n+        visitor.visitStackProducer((StackProducer)this);\n+        visitor.visitLoadClass((LoadClass)this);\n+        visitor.visitCPInstruction((CPInstruction)this);\n+        visitor.visitFieldOrMethod((FieldOrMethod)this);\n+        visitor.visitInvokeInstruction((InvokeInstruction)this);\n+        visitor.visitINVOKEDYNAMIC(this);\n+    }\n+    \n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeByte(super.getOpcode());\n+        dataOutputStream.writeShort(super.getIndex());\n+        dataOutputStream.writeByte(0);\n+        dataOutputStream.writeByte(0);\n+    }\n+    \n+    public String getClassName(final ConstantPoolGen constantPoolGen) {\n+        final ConstantPool constantPool = constantPoolGen.getConstantPool();\n+        return ((ConstantNameAndType)constantPool.getConstant(((ConstantInvokeDynamic)constantPool.getConstant(super.getIndex(), (byte)18, (Class)ConstantInvokeDynamic.class)).getNameAndTypeIndex(), (Class)ConstantNameAndType.class)).getName(constantPool);\n     }\n     \n     public Class<?>[] getExceptions() {\n         return ExceptionConst.createExceptions(ExceptionConst.EXCS.EXCS_INTERFACE_METHOD_RESOLUTION, new Class[] { ExceptionConst.UNSATISFIED_LINK_ERROR, ExceptionConst.ABSTRACT_METHOD_ERROR, ExceptionConst.ILLEGAL_ACCESS_ERROR, ExceptionConst.INCOMPATIBLE_CLASS_CHANGE_ERROR });\n     }\n     \n-    public ReferenceType getReferenceType(final ConstantPoolGen cpg) {\n+    public ReferenceType getReferenceType(final ConstantPoolGen constantPoolGen) {\n         return (ReferenceType)new ObjectType(Object.class.getName());\n     }\n     \n-    protected void initFromFile(final ByteSequence bytes, final boolean wide) throws IOException {\n-        super.initFromFile(bytes, wide);\n+    protected void initFromFile(final ByteSequence byteSequence, final boolean b) throws IOException {\n+        super.initFromFile(byteSequence, b);\n         super.setLength(5);\n-        bytes.readByte();\n-        bytes.readByte();\n+        byteSequence.readByte();\n+        byteSequence.readByte();\n     }\n }\n"}]}
