{"diffoscope-json-version": 1, "source1": "first/FramedSnappyCompressorInputStream.class", "source2": "second/FramedSnappyCompressorInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -29,14 +29,18 @@\n     private boolean inUncompressedChunk;\n     private int uncompressedBytesRemaining;\n     private long expectedChecksum;\n     private final int blockSize;\n     private final PureJavaCrc32C checksum;\n     private final ByteUtils.ByteSupplier supplier;\n     \n+    static {\n+        SZ_SIGNATURE = new byte[] { -1, 6, 0, 0, 115, 78, 97, 80, 112, 89 };\n+    }\n+    \n     public FramedSnappyCompressorInputStream(final InputStream in) throws IOException {\n         this(in, FramedSnappyDialect.STANDARD);\n     }\n     \n     public FramedSnappyCompressorInputStream(final InputStream in, final FramedSnappyDialect dialect) throws IOException {\n         this(in, 32768, dialect);\n     }\n@@ -133,15 +137,15 @@\n         }\n         else if (type == 254 || (type > 127 && type <= 253)) {\n             this.skipBlock();\n             this.readNextBlock();\n         }\n         else {\n             if (type >= 2 && type <= 127) {\n-                throw new IOException(\"unskippable chunk with type \" + type + \" (hex \" + Integer.toHexString(type) + \") detected.\");\n+                throw new IOException(\"unskippable chunk with type \" + type + \" (hex \" + Integer.toHexString(type) + \")\" + \" detected.\");\n             }\n             if (type == 1) {\n                 this.inUncompressedChunk = true;\n                 this.uncompressedBytesRemaining = this.readSize() - 4;\n                 this.expectedChecksum = unmask(this.readCrc());\n             }\n             else {\n@@ -224,12 +228,8 @@\n         byte[] shortenedSig = signature;\n         if (signature.length > FramedSnappyCompressorInputStream.SZ_SIGNATURE.length) {\n             shortenedSig = new byte[FramedSnappyCompressorInputStream.SZ_SIGNATURE.length];\n             System.arraycopy(signature, 0, shortenedSig, 0, FramedSnappyCompressorInputStream.SZ_SIGNATURE.length);\n         }\n         return Arrays.equals(shortenedSig, FramedSnappyCompressorInputStream.SZ_SIGNATURE);\n     }\n-    \n-    static {\n-        SZ_SIGNATURE = new byte[] { -1, 6, 0, 0, 115, 78, 97, 80, 112, 89 };\n-    }\n }\n"}]}
