{"diffoscope-json-version": 1, "source1": "first/NameFileFilter.class", "source2": "second/NameFileFilter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,66 +13,66 @@\n \n public class NameFileFilter extends AbstractFileFilter implements Serializable\n {\n     private static final long serialVersionUID = 176844364689077340L;\n     private final String[] names;\n     private final IOCase ioCase;\n     \n-    public NameFileFilter(final List<String> names) {\n-        this(names, null);\n+    public NameFileFilter(final List<String> list) {\n+        this(list, null);\n     }\n     \n-    public NameFileFilter(final List<String> names, final IOCase ioCase) {\n-        Objects.requireNonNull(names, \"names\");\n-        this.names = names.toArray(NameFileFilter.EMPTY_STRING_ARRAY);\n+    public NameFileFilter(final List<String> obj, final IOCase ioCase) {\n+        Objects.requireNonNull(obj, \"names\");\n+        this.names = obj.toArray(NameFileFilter.EMPTY_STRING_ARRAY);\n         this.ioCase = this.toIOCase(ioCase);\n     }\n     \n-    public NameFileFilter(final String name) {\n-        this(name, IOCase.SENSITIVE);\n+    public NameFileFilter(final String s) {\n+        this(s, IOCase.SENSITIVE);\n     }\n     \n-    public NameFileFilter(final String... names) {\n-        this(names, IOCase.SENSITIVE);\n+    public NameFileFilter(final String... array) {\n+        this(array, IOCase.SENSITIVE);\n     }\n     \n-    public NameFileFilter(final String name, final IOCase ioCase) {\n-        Objects.requireNonNull(name, \"name\");\n-        this.names = new String[] { name };\n+    public NameFileFilter(final String obj, final IOCase ioCase) {\n+        Objects.requireNonNull(obj, \"name\");\n+        this.names = new String[] { obj };\n         this.ioCase = this.toIOCase(ioCase);\n     }\n     \n-    public NameFileFilter(final String[] names, final IOCase ioCase) {\n-        Objects.requireNonNull(names, \"names\");\n-        this.names = names.clone();\n+    public NameFileFilter(final String[] obj, final IOCase ioCase) {\n+        Objects.requireNonNull(obj, \"names\");\n+        this.names = obj.clone();\n         this.ioCase = this.toIOCase(ioCase);\n     }\n     \n     public boolean accept(final File file) {\n         return this.acceptBaseName(file.getName());\n     }\n     \n-    public boolean accept(final File dir, final String name) {\n-        return this.acceptBaseName(name);\n+    public boolean accept(final File file, final String s) {\n+        return this.acceptBaseName(s);\n     }\n     \n-    public FileVisitResult accept(final Path file, final BasicFileAttributes attributes) {\n-        return this.toFileVisitResult(this.acceptBaseName(Objects.toString((Object)file.getFileName(), (String)null)));\n+    public FileVisitResult accept(final Path path, final BasicFileAttributes basicFileAttributes) {\n+        return this.toFileVisitResult(this.acceptBaseName(Objects.toString((Object)path.getFileName(), (String)null)));\n     }\n     \n-    private boolean acceptBaseName(final String baseName) {\n-        return Stream.of(this.names).anyMatch(testName -> this.ioCase.checkEquals(baseName, testName));\n+    private boolean acceptBaseName(final String s) {\n+        return Stream.of(this.names).anyMatch(s3 -> this.ioCase.checkEquals(s2, s3));\n     }\n     \n     private IOCase toIOCase(final IOCase ioCase) {\n         return IOCase.value(ioCase, IOCase.SENSITIVE);\n     }\n     \n     public String toString() {\n-        final StringBuilder buffer = new StringBuilder();\n-        buffer.append(super.toString());\n-        buffer.append(\"(\");\n-        this.append((Object[])this.names, buffer);\n-        buffer.append(\")\");\n-        return buffer.toString();\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(super.toString());\n+        sb.append(\"(\");\n+        this.append((Object[])this.names, sb);\n+        sb.append(\")\");\n+        return sb.toString();\n     }\n }\n"}]}
