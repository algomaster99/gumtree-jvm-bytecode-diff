{"diffoscope-json-version": 1, "source1": "first/ArrayElementValueGen.class", "source2": "second/ArrayElementValueGen.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,72 +12,73 @@\n public class ArrayElementValueGen extends ElementValueGen\n {\n     private final List<ElementValueGen> evalues;\n     \n     public ArrayElementValueGen(final ArrayElementValue value, final ConstantPoolGen cpool, final boolean copyPoolEntries) {\n         super(91, cpool);\n         this.evalues = new ArrayList<ElementValueGen>();\n-        final ElementValue[] elementValuesArray;\n-        final ElementValue[] in = elementValuesArray = value.getElementValuesArray();\n-        for (final ElementValue element : elementValuesArray) {\n-            this.evalues.add(ElementValueGen.copy(element, cpool, copyPoolEntries));\n+        final ElementValue[] elementValuesArray = value.getElementValuesArray();\n+        for (int length = elementValuesArray.length, i = 0; i < length; ++i) {\n+            this.evalues.add(ElementValueGen.copy(elementValuesArray[i], cpool, copyPoolEntries));\n         }\n     }\n     \n     public ArrayElementValueGen(final ConstantPoolGen cp) {\n         super(91, cp);\n         this.evalues = new ArrayList<ElementValueGen>();\n     }\n     \n     public ArrayElementValueGen(final int type, final ElementValue[] datums, final ConstantPoolGen cpool) {\n         super(type, cpool);\n         if (type != 91) {\n             throw new IllegalArgumentException(\"Only element values of type array can be built with this ctor - type specified: \" + type);\n         }\n         this.evalues = new ArrayList<ElementValueGen>();\n-        for (final ElementValue datum : datums) {\n-            this.evalues.add(ElementValueGen.copy(datum, cpool, true));\n+        for (int length = datums.length, i = 0; i < length; ++i) {\n+            this.evalues.add(ElementValueGen.copy(datums[i], cpool, true));\n         }\n     }\n     \n     public void addElement(final ElementValueGen gen) {\n         this.evalues.add(gen);\n     }\n     \n     public void dump(final DataOutputStream dos) throws IOException {\n         dos.writeByte(super.getElementValueType());\n         dos.writeShort(this.evalues.size());\n-        for (final ElementValueGen element : this.evalues) {\n-            element.dump(dos);\n+        final Iterator<ElementValueGen> iterator = this.evalues.iterator();\n+        while (iterator.hasNext()) {\n+            ((ElementValueGen)iterator.next()).dump(dos);\n         }\n     }\n     \n     public ElementValue getElementValue() {\n-        final ElementValue[] immutableData = new ElementValue[this.evalues.size()];\n-        int i = 0;\n-        for (final ElementValueGen element : this.evalues) {\n-            immutableData[i++] = element.getElementValue();\n+        final ElementValue[] array = new ElementValue[this.evalues.size()];\n+        int n = 0;\n+        final Iterator<ElementValueGen> iterator = this.evalues.iterator();\n+        while (iterator.hasNext()) {\n+            array[n++] = ((ElementValueGen)iterator.next()).getElementValue();\n         }\n-        return (ElementValue)new ArrayElementValue(super.getElementValueType(), immutableData, this.getConstantPool().getConstantPool());\n+        return (ElementValue)new ArrayElementValue(super.getElementValueType(), array, this.getConstantPool().getConstantPool());\n     }\n     \n     public List<ElementValueGen> getElementValues() {\n         return this.evalues;\n     }\n     \n     public int getElementValuesSize() {\n         return this.evalues.size();\n     }\n     \n     public String stringifyValue() {\n         final StringBuilder sb = new StringBuilder();\n         sb.append(\"[\");\n-        String comma = \"\";\n-        for (final ElementValueGen element : this.evalues) {\n-            sb.append(comma);\n-            comma = \",\";\n-            sb.append(element.stringifyValue());\n+        String str = \"\";\n+        for (final ElementValueGen elementValueGen : this.evalues) {\n+            sb.append(str);\n+            str = \",\";\n+            sb.append(elementValueGen.stringifyValue());\n         }\n         sb.append(\"]\");\n         return sb.toString();\n     }\n }\n"}]}
