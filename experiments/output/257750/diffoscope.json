{"diffoscope-json-version": 1, "source1": "first/CombinedBeanDeclaration.class", "source2": "second/CombinedBeanDeclaration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,73 +10,77 @@\n import java.util.Arrays;\n import java.util.List;\n \n public class CombinedBeanDeclaration implements BeanDeclaration\n {\n     private final List<BeanDeclaration> childDeclarations;\n     \n-    public CombinedBeanDeclaration(final BeanDeclaration... decl) {\n-        this.childDeclarations = new ArrayList<BeanDeclaration>(Arrays.asList(decl));\n+    public CombinedBeanDeclaration(final BeanDeclaration... a) {\n+        this.childDeclarations = new ArrayList<BeanDeclaration>(Arrays.asList(a));\n     }\n     \n     public String getBeanFactoryName() {\n-        for (final BeanDeclaration d : this.childDeclarations) {\n-            final String factoryName = d.getBeanFactoryName();\n-            if (factoryName != null) {\n-                return factoryName;\n+        final Iterator<BeanDeclaration> iterator = this.childDeclarations.iterator();\n+        while (iterator.hasNext()) {\n+            final String beanFactoryName = ((BeanDeclaration)iterator.next()).getBeanFactoryName();\n+            if (beanFactoryName != null) {\n+                return beanFactoryName;\n             }\n         }\n         return null;\n     }\n     \n     public Object getBeanFactoryParameter() {\n-        for (final BeanDeclaration d : this.childDeclarations) {\n-            final Object factoryParam = d.getBeanFactoryParameter();\n-            if (factoryParam != null) {\n-                return factoryParam;\n+        final Iterator<BeanDeclaration> iterator = this.childDeclarations.iterator();\n+        while (iterator.hasNext()) {\n+            final Object beanFactoryParameter = ((BeanDeclaration)iterator.next()).getBeanFactoryParameter();\n+            if (beanFactoryParameter != null) {\n+                return beanFactoryParameter;\n             }\n         }\n         return null;\n     }\n     \n     public String getBeanClassName() {\n-        for (final BeanDeclaration d : this.childDeclarations) {\n-            final String beanClassName = d.getBeanClassName();\n+        final Iterator<BeanDeclaration> iterator = this.childDeclarations.iterator();\n+        while (iterator.hasNext()) {\n+            final String beanClassName = ((BeanDeclaration)iterator.next()).getBeanClassName();\n             if (beanClassName != null) {\n                 return beanClassName;\n             }\n         }\n         return null;\n     }\n     \n     public Map<String, Object> getBeanProperties() {\n-        final Map<String, Object> result = new HashMap<String, Object>();\n+        final HashMap hashMap = new HashMap();\n         for (int i = this.childDeclarations.size() - 1; i >= 0; --i) {\n-            final Map<String, Object> props = ((BeanDeclaration)this.childDeclarations.get(i)).getBeanProperties();\n-            if (props != null) {\n-                result.putAll(props);\n+            final Map beanProperties = ((BeanDeclaration)this.childDeclarations.get(i)).getBeanProperties();\n+            if (beanProperties != null) {\n+                hashMap.putAll(beanProperties);\n             }\n         }\n-        return result;\n+        return hashMap;\n     }\n     \n     public Map<String, Object> getNestedBeanDeclarations() {\n-        final Map<String, Object> result = new HashMap<String, Object>();\n+        final HashMap hashMap = new HashMap();\n         for (int i = this.childDeclarations.size() - 1; i >= 0; --i) {\n-            final Map<String, Object> decls = ((BeanDeclaration)this.childDeclarations.get(i)).getNestedBeanDeclarations();\n-            if (decls != null) {\n-                result.putAll(decls);\n+            final Map nestedBeanDeclarations = ((BeanDeclaration)this.childDeclarations.get(i)).getNestedBeanDeclarations();\n+            if (nestedBeanDeclarations != null) {\n+                hashMap.putAll(nestedBeanDeclarations);\n             }\n         }\n-        return result;\n+        return hashMap;\n     }\n     \n     public Collection<ConstructorArg> getConstructorArgs() {\n-        for (final BeanDeclaration d : this.childDeclarations) {\n-            final Collection<ConstructorArg> args = d.getConstructorArgs();\n-            if (args != null && !args.isEmpty()) {\n-                return args;\n+        final Iterator<BeanDeclaration> iterator = this.childDeclarations.iterator();\n+        while (iterator.hasNext()) {\n+            final Collection constructorArgs = ((BeanDeclaration)iterator.next()).getConstructorArgs();\n+            if (constructorArgs != null && !constructorArgs.isEmpty()) {\n+                return constructorArgs;\n             }\n         }\n         return (Collection<ConstructorArg>)Collections.emptyList();\n     }\n }\n"}]}
