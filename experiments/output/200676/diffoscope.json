{"diffoscope-json-version": 1, "source1": "first/FieldOrMethod.class", "source2": "second/FieldOrMethod.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,12 +1,12 @@\n \n package org.apache.bcel.generic;\n \n-import org.apache.bcel.classfile.ConstantUtf8;\n import org.apache.bcel.classfile.ConstantNameAndType;\n+import org.apache.bcel.classfile.ConstantUtf8;\n import org.apache.bcel.classfile.ConstantPool;\n import org.apache.bcel.classfile.Utility;\n import org.apache.bcel.classfile.ConstantCP;\n \n public abstract class FieldOrMethod extends CPInstruction implements LoadClass\n {\n     FieldOrMethod() {\n@@ -14,54 +14,47 @@\n     \n     protected FieldOrMethod(final short opcode, final int index) {\n         super(opcode, index);\n     }\n     \n     @Deprecated\n     public String getClassName(final ConstantPoolGen cpg) {\n-        final ConstantPool cp = cpg.getConstantPool();\n-        final ConstantCP cmr = (ConstantCP)cp.getConstant(super.getIndex());\n-        final String className = cp.getConstantString(cmr.getClassIndex(), (byte)7);\n-        if (className.startsWith(\"[\")) {\n+        final ConstantPool constantPool = cpg.getConstantPool();\n+        final String constantString = constantPool.getConstantString(((ConstantCP)constantPool.getConstant(super.getIndex())).getClassIndex(), (byte)7);\n+        if (constantString.startsWith(\"[\")) {\n             return \"java.lang.Object\";\n         }\n-        return Utility.pathToPackage(className);\n+        return Utility.pathToPackage(constantString);\n     }\n     \n     @Deprecated\n     public ObjectType getClassType(final ConstantPoolGen cpg) {\n         return ObjectType.getInstance(this.getClassName(cpg));\n     }\n     \n     public ObjectType getLoadClassType(final ConstantPoolGen cpg) {\n-        final ReferenceType rt = this.getReferenceType(cpg);\n-        if (rt instanceof ObjectType) {\n-            return (ObjectType)rt;\n+        final ReferenceType referenceType = this.getReferenceType(cpg);\n+        if (referenceType instanceof ObjectType) {\n+            return (ObjectType)referenceType;\n         }\n-        throw new ClassGenException(rt.getClass().getCanonicalName() + \" \" + rt.getSignature() + \" does not represent an ObjectType\");\n+        throw new ClassGenException(((ObjectType)referenceType).getClass().getCanonicalName() + \" \" + referenceType.getSignature() + \" does not represent an ObjectType\");\n     }\n     \n     public String getName(final ConstantPoolGen cpg) {\n-        final ConstantPool cp = cpg.getConstantPool();\n-        final ConstantCP cmr = (ConstantCP)cp.getConstant(super.getIndex());\n-        final ConstantNameAndType cnat = (ConstantNameAndType)cp.getConstant(cmr.getNameAndTypeIndex());\n-        return ((ConstantUtf8)cp.getConstant(cnat.getNameIndex())).getBytes();\n+        final ConstantPool constantPool = cpg.getConstantPool();\n+        return ((ConstantUtf8)constantPool.getConstant(((ConstantNameAndType)constantPool.getConstant(((ConstantCP)constantPool.getConstant(super.getIndex())).getNameAndTypeIndex())).getNameIndex())).getBytes();\n     }\n     \n     public ReferenceType getReferenceType(final ConstantPoolGen cpg) {\n-        final ConstantPool cp = cpg.getConstantPool();\n-        final ConstantCP cmr = (ConstantCP)cp.getConstant(super.getIndex());\n-        String className = cp.getConstantString(cmr.getClassIndex(), (byte)7);\n-        if (className.startsWith(\"[\")) {\n-            return (ReferenceType)Type.getType(className);\n+        final ConstantPool constantPool = cpg.getConstantPool();\n+        final String constantString = constantPool.getConstantString(((ConstantCP)constantPool.getConstant(super.getIndex())).getClassIndex(), (byte)7);\n+        if (constantString.startsWith(\"[\")) {\n+            return (ReferenceType)Type.getType(constantString);\n         }\n-        className = Utility.pathToPackage(className);\n-        return (ReferenceType)ObjectType.getInstance(className);\n+        return (ReferenceType)ObjectType.getInstance(Utility.pathToPackage(constantString));\n     }\n     \n     public String getSignature(final ConstantPoolGen cpg) {\n-        final ConstantPool cp = cpg.getConstantPool();\n-        final ConstantCP cmr = (ConstantCP)cp.getConstant(super.getIndex());\n-        final ConstantNameAndType cnat = (ConstantNameAndType)cp.getConstant(cmr.getNameAndTypeIndex());\n-        return ((ConstantUtf8)cp.getConstant(cnat.getSignatureIndex())).getBytes();\n+        final ConstantPool constantPool = cpg.getConstantPool();\n+        return ((ConstantUtf8)constantPool.getConstant(((ConstantNameAndType)constantPool.getConstant(((ConstantCP)constantPool.getConstant(super.getIndex())).getNameAndTypeIndex())).getSignatureIndex())).getBytes();\n     }\n }\n"}]}
