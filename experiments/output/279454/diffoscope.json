{"diffoscope-json-version": 1, "source1": "first/CpBands.class", "source2": "second/CpBands.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -83,187 +83,179 @@\n         this.integersToCPIntegers = new HashMap<Integer, CPInteger>();\n         this.floatsToCPFloats = new HashMap<Float, CPFloat>();\n         this.stringsToCPClass = new HashMap<String, CPClass>();\n         this.doublesToCPDoubles = new HashMap<Double, CPDouble>();\n         this.descriptorsToCPNameAndTypes = new HashMap<String, CPNameAndType>();\n     }\n     \n-    public CPClass cpClassValue(final int index) {\n-        final String string = this.cpClass[index];\n-        final int utf8Index = this.cpClassInts[index];\n-        final int globalIndex = this.classOffset + index;\n-        CPClass cpString = (CPClass)this.stringsToCPClass.get(string);\n-        if (cpString == null) {\n-            cpString = new CPClass(this.cpUTF8Value(utf8Index), globalIndex);\n-            this.stringsToCPClass.put(string, cpString);\n-        }\n-        return cpString;\n-    }\n-    \n-    public CPClass cpClassValue(final String string) {\n-        CPClass cpString = (CPClass)this.stringsToCPClass.get(string);\n-        if (cpString == null) {\n-            final Integer index = Integer.valueOf(this.mapClass.get((Object)string));\n-            if (index != null) {\n-                return this.cpClassValue(index);\n-            }\n-            cpString = new CPClass(this.cpUTF8Value(string, false), -1);\n-            this.stringsToCPClass.put(string, cpString);\n-        }\n-        return cpString;\n-    }\n-    \n-    public CPDouble cpDoubleValue(final int index) {\n-        final Double dbl = Double.valueOf(this.cpDouble[index]);\n-        CPDouble cpDouble = (CPDouble)this.doublesToCPDoubles.get(dbl);\n+    public CPClass cpClassValue(final int n) {\n+        final String s = this.cpClass[n];\n+        final int n2 = this.cpClassInts[n];\n+        final int n3 = this.classOffset + n;\n+        CPClass cpClass = (CPClass)this.stringsToCPClass.get(s);\n+        if (cpClass == null) {\n+            cpClass = new CPClass(this.cpUTF8Value(n2), n3);\n+            this.stringsToCPClass.put(s, cpClass);\n+        }\n+        return cpClass;\n+    }\n+    \n+    public CPClass cpClassValue(final String s) {\n+        CPClass cpClass = (CPClass)this.stringsToCPClass.get(s);\n+        if (cpClass == null) {\n+            final Integer n = Integer.valueOf(this.mapClass.get((Object)s));\n+            if (n != null) {\n+                return this.cpClassValue(n);\n+            }\n+            cpClass = new CPClass(this.cpUTF8Value(s, false), -1);\n+            this.stringsToCPClass.put(s, cpClass);\n+        }\n+        return cpClass;\n+    }\n+    \n+    public CPDouble cpDoubleValue(final int n) {\n+        final Double value = Double.valueOf(this.cpDouble[n]);\n+        CPDouble cpDouble = (CPDouble)this.doublesToCPDoubles.get(value);\n         if (cpDouble == null) {\n-            cpDouble = new CPDouble(dbl, index + this.doubleOffset);\n-            this.doublesToCPDoubles.put(dbl, cpDouble);\n+            cpDouble = new CPDouble(value, n + this.doubleOffset);\n+            this.doublesToCPDoubles.put(value, cpDouble);\n         }\n         return cpDouble;\n     }\n     \n-    public CPFieldRef cpFieldValue(final int index) {\n-        return new CPFieldRef(this.cpClassValue(this.cpFieldClassInts[index]), this.cpNameAndTypeValue(this.cpFieldDescriptorInts[index]), index + this.fieldOffset);\n+    public CPFieldRef cpFieldValue(final int n) {\n+        return new CPFieldRef(this.cpClassValue(this.cpFieldClassInts[n]), this.cpNameAndTypeValue(this.cpFieldDescriptorInts[n]), n + this.fieldOffset);\n     }\n     \n-    public CPFloat cpFloatValue(final int index) {\n-        final Float f = Float.valueOf(this.cpFloat[index]);\n-        CPFloat cpFloat = (CPFloat)this.floatsToCPFloats.get(f);\n+    public CPFloat cpFloatValue(final int n) {\n+        final Float value = Float.valueOf(this.cpFloat[n]);\n+        CPFloat cpFloat = (CPFloat)this.floatsToCPFloats.get(value);\n         if (cpFloat == null) {\n-            cpFloat = new CPFloat(f, index + this.floatOffset);\n-            this.floatsToCPFloats.put(f, cpFloat);\n+            cpFloat = new CPFloat(value, n + this.floatOffset);\n+            this.floatsToCPFloats.put(value, cpFloat);\n         }\n         return cpFloat;\n     }\n     \n-    public CPInterfaceMethodRef cpIMethodValue(final int index) {\n-        return new CPInterfaceMethodRef(this.cpClassValue(this.cpIMethodClassInts[index]), this.cpNameAndTypeValue(this.cpIMethodDescriptorInts[index]), index + this.imethodOffset);\n+    public CPInterfaceMethodRef cpIMethodValue(final int n) {\n+        return new CPInterfaceMethodRef(this.cpClassValue(this.cpIMethodClassInts[n]), this.cpNameAndTypeValue(this.cpIMethodDescriptorInts[n]), n + this.imethodOffset);\n     }\n     \n-    public CPInteger cpIntegerValue(final int index) {\n-        final Integer i = Integer.valueOf(this.cpInt[index]);\n-        CPInteger cpInteger = (CPInteger)this.integersToCPIntegers.get(i);\n+    public CPInteger cpIntegerValue(final int n) {\n+        final Integer value = Integer.valueOf(this.cpInt[n]);\n+        CPInteger cpInteger = (CPInteger)this.integersToCPIntegers.get(value);\n         if (cpInteger == null) {\n-            cpInteger = new CPInteger(i, index + this.intOffset);\n-            this.integersToCPIntegers.put(i, cpInteger);\n+            cpInteger = new CPInteger(value, n + this.intOffset);\n+            this.integersToCPIntegers.put(value, cpInteger);\n         }\n         return cpInteger;\n     }\n     \n-    public CPLong cpLongValue(final int index) {\n-        final Long l = Long.valueOf(this.cpLong[index]);\n-        CPLong cpLong = (CPLong)this.longsToCPLongs.get(l);\n+    public CPLong cpLongValue(final int n) {\n+        final Long value = Long.valueOf(this.cpLong[n]);\n+        CPLong cpLong = (CPLong)this.longsToCPLongs.get(value);\n         if (cpLong == null) {\n-            cpLong = new CPLong(l, index + this.longOffset);\n-            this.longsToCPLongs.put(l, cpLong);\n+            cpLong = new CPLong(value, n + this.longOffset);\n+            this.longsToCPLongs.put(value, cpLong);\n         }\n         return cpLong;\n     }\n     \n-    public CPMethodRef cpMethodValue(final int index) {\n-        return new CPMethodRef(this.cpClassValue(this.cpMethodClassInts[index]), this.cpNameAndTypeValue(this.cpMethodDescriptorInts[index]), index + this.methodOffset);\n+    public CPMethodRef cpMethodValue(final int n) {\n+        return new CPMethodRef(this.cpClassValue(this.cpMethodClassInts[n]), this.cpNameAndTypeValue(this.cpMethodDescriptorInts[n]), n + this.methodOffset);\n     }\n     \n-    public CPNameAndType cpNameAndTypeValue(final int index) {\n-        final String descriptor = this.cpDescriptor[index];\n-        CPNameAndType cpNameAndType = (CPNameAndType)this.descriptorsToCPNameAndTypes.get(descriptor);\n+    public CPNameAndType cpNameAndTypeValue(final int n) {\n+        final String s = this.cpDescriptor[n];\n+        CPNameAndType cpNameAndType = (CPNameAndType)this.descriptorsToCPNameAndTypes.get(s);\n         if (cpNameAndType == null) {\n-            final int nameIndex = this.cpDescriptorNameInts[index];\n-            final int descriptorIndex = this.cpDescriptorTypeInts[index];\n-            final CPUTF8 name = this.cpUTF8Value(nameIndex);\n-            final CPUTF8 descriptorU = this.cpSignatureValue(descriptorIndex);\n-            cpNameAndType = new CPNameAndType(name, descriptorU, index + this.descrOffset);\n-            this.descriptorsToCPNameAndTypes.put(descriptor, cpNameAndType);\n+            cpNameAndType = new CPNameAndType(this.cpUTF8Value(this.cpDescriptorNameInts[n]), this.cpSignatureValue(this.cpDescriptorTypeInts[n]), n + this.descrOffset);\n+            this.descriptorsToCPNameAndTypes.put(s, cpNameAndType);\n         }\n         return cpNameAndType;\n     }\n     \n-    public CPNameAndType cpNameAndTypeValue(final String descriptor) {\n-        CPNameAndType cpNameAndType = (CPNameAndType)this.descriptorsToCPNameAndTypes.get(descriptor);\n+    public CPNameAndType cpNameAndTypeValue(final String s) {\n+        CPNameAndType cpNameAndType = (CPNameAndType)this.descriptorsToCPNameAndTypes.get(s);\n         if (cpNameAndType == null) {\n-            final Integer index = Integer.valueOf(this.mapDescriptor.get((Object)descriptor));\n-            if (index != null) {\n-                return this.cpNameAndTypeValue(index);\n-            }\n-            final int colon = descriptor.indexOf(58);\n-            final String nameString = descriptor.substring(0, colon);\n-            final String descriptorString = descriptor.substring(colon + 1);\n-            final CPUTF8 name = this.cpUTF8Value(nameString, true);\n-            final CPUTF8 descriptorU = this.cpUTF8Value(descriptorString, true);\n-            cpNameAndType = new CPNameAndType(name, descriptorU, -1 + this.descrOffset);\n-            this.descriptorsToCPNameAndTypes.put(descriptor, cpNameAndType);\n+            final Integer n = Integer.valueOf(this.mapDescriptor.get((Object)s));\n+            if (n != null) {\n+                return this.cpNameAndTypeValue(n);\n+            }\n+            final int index = s.indexOf(58);\n+            cpNameAndType = new CPNameAndType(this.cpUTF8Value(s.substring(0, index), true), this.cpUTF8Value(s.substring(index + 1), true), -1 + this.descrOffset);\n+            this.descriptorsToCPNameAndTypes.put(s, cpNameAndType);\n         }\n         return cpNameAndType;\n     }\n     \n-    public CPUTF8 cpSignatureValue(final int index) {\n-        int globalIndex;\n-        if (this.cpSignatureInts[index] != -1) {\n-            globalIndex = this.cpSignatureInts[index];\n+    public CPUTF8 cpSignatureValue(final int n) {\n+        int n2;\n+        if (this.cpSignatureInts[n] != -1) {\n+            n2 = this.cpSignatureInts[n];\n         }\n         else {\n-            globalIndex = index + this.signatureOffset;\n+            n2 = n + this.signatureOffset;\n+        }\n+        final String s = this.cpSignature[n];\n+        CPUTF8 cputf8 = (CPUTF8)this.stringsToCPUTF8.get(s);\n+        if (cputf8 == null) {\n+            cputf8 = new CPUTF8(s, n2);\n+            this.stringsToCPUTF8.put(s, cputf8);\n         }\n-        final String string = this.cpSignature[index];\n-        CPUTF8 cpUTF8 = (CPUTF8)this.stringsToCPUTF8.get(string);\n-        if (cpUTF8 == null) {\n-            cpUTF8 = new CPUTF8(string, globalIndex);\n-            this.stringsToCPUTF8.put(string, cpUTF8);\n-        }\n-        return cpUTF8;\n-    }\n-    \n-    public CPString cpStringValue(final int index) {\n-        final String string = this.cpString[index];\n-        final int utf8Index = this.cpStringInts[index];\n-        final int globalIndex = this.stringOffset + index;\n-        CPString cpString = (CPString)this.stringsToCPStrings.get(string);\n+        return cputf8;\n+    }\n+    \n+    public CPString cpStringValue(final int n) {\n+        final String s = this.cpString[n];\n+        final int n2 = this.cpStringInts[n];\n+        final int n3 = this.stringOffset + n;\n+        CPString cpString = (CPString)this.stringsToCPStrings.get(s);\n         if (cpString == null) {\n-            cpString = new CPString(this.cpUTF8Value(utf8Index), globalIndex);\n-            this.stringsToCPStrings.put(string, cpString);\n+            cpString = new CPString(this.cpUTF8Value(n2), n3);\n+            this.stringsToCPStrings.put(s, cpString);\n         }\n         return cpString;\n     }\n     \n-    public CPUTF8 cpUTF8Value(final int index) {\n-        final String string = this.cpUTF8[index];\n-        CPUTF8 cputf8 = (CPUTF8)this.stringsToCPUTF8.get(string);\n+    public CPUTF8 cpUTF8Value(final int globalIndex) {\n+        final String s = this.cpUTF8[globalIndex];\n+        CPUTF8 cputf8 = (CPUTF8)this.stringsToCPUTF8.get(s);\n         if (cputf8 == null) {\n-            cputf8 = new CPUTF8(string, index);\n-            this.stringsToCPUTF8.put(string, cputf8);\n+            cputf8 = new CPUTF8(s, globalIndex);\n+            this.stringsToCPUTF8.put(s, cputf8);\n         }\n-        else if (cputf8.getGlobalIndex() > index) {\n-            cputf8.setGlobalIndex(index);\n+        else if (cputf8.getGlobalIndex() > globalIndex) {\n+            cputf8.setGlobalIndex(globalIndex);\n         }\n         return cputf8;\n     }\n     \n-    public CPUTF8 cpUTF8Value(final String string) {\n-        return this.cpUTF8Value(string, true);\n+    public CPUTF8 cpUTF8Value(final String s) {\n+        return this.cpUTF8Value(s, true);\n     }\n     \n-    public CPUTF8 cpUTF8Value(final String string, final boolean searchForIndex) {\n-        CPUTF8 cputf8 = (CPUTF8)this.stringsToCPUTF8.get(string);\n+    public CPUTF8 cpUTF8Value(final String s, final boolean b) {\n+        CPUTF8 cputf8 = (CPUTF8)this.stringsToCPUTF8.get(s);\n         if (cputf8 == null) {\n-            Integer index = null;\n-            if (searchForIndex) {\n-                index = Integer.valueOf(this.mapUTF8.get((Object)string));\n+            Integer n = null;\n+            if (b) {\n+                n = Integer.valueOf(this.mapUTF8.get((Object)s));\n             }\n-            if (index != null) {\n-                return this.cpUTF8Value(index);\n+            if (n != null) {\n+                return this.cpUTF8Value(n);\n             }\n-            if (searchForIndex) {\n-                index = Integer.valueOf(this.mapSignature.get((Object)string));\n+            if (b) {\n+                n = Integer.valueOf(this.mapSignature.get((Object)s));\n             }\n-            if (index != null) {\n-                return this.cpSignatureValue(index);\n+            if (n != null) {\n+                return this.cpSignatureValue(n);\n             }\n-            cputf8 = new CPUTF8(string, -1);\n-            this.stringsToCPUTF8.put(string, cputf8);\n+            cputf8 = new CPUTF8(s, -1);\n+            this.stringsToCPUTF8.put(s, cputf8);\n         }\n         return cputf8;\n     }\n     \n     public SegmentConstantPool getConstantPool() {\n         return this.pool;\n     }\n@@ -312,211 +304,205 @@\n         return this.cpSignature;\n     }\n     \n     public String[] getCpUTF8() {\n         return this.cpUTF8;\n     }\n     \n-    private void parseCpClass(final InputStream in) throws IOException, Pack200Exception {\n+    private void parseCpClass(final InputStream inputStream) throws IOException, Pack200Exception {\n         final int cpClassCount = this.header.getCpClassCount();\n-        this.cpClassInts = this.decodeBandInt(\"cp_Class\", in, Codec.UDELTA5, cpClassCount);\n+        this.cpClassInts = this.decodeBandInt(\"cp_Class\", inputStream, Codec.UDELTA5, cpClassCount);\n         this.cpClass = new String[cpClassCount];\n         this.mapClass = new HashMap<String, Integer>(cpClassCount);\n         for (int i = 0; i < cpClassCount; ++i) {\n             this.cpClass[i] = this.cpUTF8[this.cpClassInts[i]];\n             this.mapClass.put(this.cpClass[i], Integer.valueOf(i));\n         }\n     }\n     \n-    private void parseCpDescriptor(final InputStream in) throws IOException, Pack200Exception {\n+    private void parseCpDescriptor(final InputStream inputStream) throws IOException, Pack200Exception {\n         final int cpDescriptorCount = this.header.getCpDescriptorCount();\n-        this.cpDescriptorNameInts = this.decodeBandInt(\"cp_Descr_name\", in, Codec.DELTA5, cpDescriptorCount);\n-        this.cpDescriptorTypeInts = this.decodeBandInt(\"cp_Descr_type\", in, Codec.UDELTA5, cpDescriptorCount);\n-        final String[] cpDescriptorNames = this.getReferences(this.cpDescriptorNameInts, this.cpUTF8);\n-        final String[] cpDescriptorTypes = this.getReferences(this.cpDescriptorTypeInts, this.cpSignature);\n+        this.cpDescriptorNameInts = this.decodeBandInt(\"cp_Descr_name\", inputStream, Codec.DELTA5, cpDescriptorCount);\n+        this.cpDescriptorTypeInts = this.decodeBandInt(\"cp_Descr_type\", inputStream, Codec.UDELTA5, cpDescriptorCount);\n+        final String[] references = this.getReferences(this.cpDescriptorNameInts, this.cpUTF8);\n+        final String[] references2 = this.getReferences(this.cpDescriptorTypeInts, this.cpSignature);\n         this.cpDescriptor = new String[cpDescriptorCount];\n         this.mapDescriptor = new HashMap<String, Integer>(cpDescriptorCount);\n         for (int i = 0; i < cpDescriptorCount; ++i) {\n-            this.cpDescriptor[i] = cpDescriptorNames[i] + \":\" + cpDescriptorTypes[i];\n+            this.cpDescriptor[i] = references[i] + \":\" + references2[i];\n             this.mapDescriptor.put(this.cpDescriptor[i], Integer.valueOf(i));\n         }\n     }\n     \n-    private void parseCpDouble(final InputStream in) throws IOException, Pack200Exception {\n-        final int cpDoubleCount = this.header.getCpDoubleCount();\n-        final long[] band = this.parseFlags(\"cp_Double\", in, cpDoubleCount, Codec.UDELTA5, Codec.DELTA5);\n-        Arrays.setAll(this.cpDouble = new double[band.length], i -> Double.longBitsToDouble(band[i]));\n+    private void parseCpDouble(final InputStream inputStream) throws IOException, Pack200Exception {\n+        Arrays.setAll(this.cpDouble = new double[this.parseFlags(\"cp_Double\", inputStream, this.header.getCpDoubleCount(), Codec.UDELTA5, Codec.DELTA5).length], n2 -> Double.longBitsToDouble(array[n2]));\n     }\n     \n-    private void parseCpField(final InputStream in) throws IOException, Pack200Exception {\n+    private void parseCpField(final InputStream inputStream) throws IOException, Pack200Exception {\n         final int cpFieldCount = this.header.getCpFieldCount();\n-        this.cpFieldClassInts = this.decodeBandInt(\"cp_Field_class\", in, Codec.DELTA5, cpFieldCount);\n-        this.cpFieldDescriptorInts = this.decodeBandInt(\"cp_Field_desc\", in, Codec.UDELTA5, cpFieldCount);\n+        this.cpFieldClassInts = this.decodeBandInt(\"cp_Field_class\", inputStream, Codec.DELTA5, cpFieldCount);\n+        this.cpFieldDescriptorInts = this.decodeBandInt(\"cp_Field_desc\", inputStream, Codec.UDELTA5, cpFieldCount);\n         this.cpFieldClass = new String[cpFieldCount];\n         this.cpFieldDescriptor = new String[cpFieldCount];\n         for (int i = 0; i < cpFieldCount; ++i) {\n             this.cpFieldClass[i] = this.cpClass[this.cpFieldClassInts[i]];\n             this.cpFieldDescriptor[i] = this.cpDescriptor[this.cpFieldDescriptorInts[i]];\n         }\n     }\n     \n-    private void parseCpFloat(final InputStream in) throws IOException, Pack200Exception {\n+    private void parseCpFloat(final InputStream inputStream) throws IOException, Pack200Exception {\n         final int cpFloatCount = this.header.getCpFloatCount();\n         this.cpFloat = new float[cpFloatCount];\n-        final int[] floatBits = this.decodeBandInt(\"cp_Float\", in, Codec.UDELTA5, cpFloatCount);\n+        final int[] decodeBandInt = this.decodeBandInt(\"cp_Float\", inputStream, Codec.UDELTA5, cpFloatCount);\n         for (int i = 0; i < cpFloatCount; ++i) {\n-            this.cpFloat[i] = Float.intBitsToFloat(floatBits[i]);\n+            this.cpFloat[i] = Float.intBitsToFloat(decodeBandInt[i]);\n         }\n     }\n     \n-    private void parseCpIMethod(final InputStream in) throws IOException, Pack200Exception {\n+    private void parseCpIMethod(final InputStream inputStream) throws IOException, Pack200Exception {\n         final int cpIMethodCount = this.header.getCpIMethodCount();\n-        this.cpIMethodClassInts = this.decodeBandInt(\"cp_Imethod_class\", in, Codec.DELTA5, cpIMethodCount);\n-        this.cpIMethodDescriptorInts = this.decodeBandInt(\"cp_Imethod_desc\", in, Codec.UDELTA5, cpIMethodCount);\n+        this.cpIMethodClassInts = this.decodeBandInt(\"cp_Imethod_class\", inputStream, Codec.DELTA5, cpIMethodCount);\n+        this.cpIMethodDescriptorInts = this.decodeBandInt(\"cp_Imethod_desc\", inputStream, Codec.UDELTA5, cpIMethodCount);\n         this.cpIMethodClass = new String[cpIMethodCount];\n         this.cpIMethodDescriptor = new String[cpIMethodCount];\n         for (int i = 0; i < cpIMethodCount; ++i) {\n             this.cpIMethodClass[i] = this.cpClass[this.cpIMethodClassInts[i]];\n             this.cpIMethodDescriptor[i] = this.cpDescriptor[this.cpIMethodDescriptorInts[i]];\n         }\n     }\n     \n-    private void parseCpInt(final InputStream in) throws IOException, Pack200Exception {\n-        final int cpIntCount = this.header.getCpIntCount();\n-        this.cpInt = this.decodeBandInt(\"cpInt\", in, Codec.UDELTA5, cpIntCount);\n+    private void parseCpInt(final InputStream inputStream) throws IOException, Pack200Exception {\n+        this.cpInt = this.decodeBandInt(\"cpInt\", inputStream, Codec.UDELTA5, this.header.getCpIntCount());\n     }\n     \n-    private void parseCpLong(final InputStream in) throws IOException, Pack200Exception {\n-        final int cpLongCount = this.header.getCpLongCount();\n-        this.cpLong = this.parseFlags(\"cp_Long\", in, cpLongCount, Codec.UDELTA5, Codec.DELTA5);\n+    private void parseCpLong(final InputStream inputStream) throws IOException, Pack200Exception {\n+        this.cpLong = this.parseFlags(\"cp_Long\", inputStream, this.header.getCpLongCount(), Codec.UDELTA5, Codec.DELTA5);\n     }\n     \n-    private void parseCpMethod(final InputStream in) throws IOException, Pack200Exception {\n+    private void parseCpMethod(final InputStream inputStream) throws IOException, Pack200Exception {\n         final int cpMethodCount = this.header.getCpMethodCount();\n-        this.cpMethodClassInts = this.decodeBandInt(\"cp_Method_class\", in, Codec.DELTA5, cpMethodCount);\n-        this.cpMethodDescriptorInts = this.decodeBandInt(\"cp_Method_desc\", in, Codec.UDELTA5, cpMethodCount);\n+        this.cpMethodClassInts = this.decodeBandInt(\"cp_Method_class\", inputStream, Codec.DELTA5, cpMethodCount);\n+        this.cpMethodDescriptorInts = this.decodeBandInt(\"cp_Method_desc\", inputStream, Codec.UDELTA5, cpMethodCount);\n         this.cpMethodClass = new String[cpMethodCount];\n         this.cpMethodDescriptor = new String[cpMethodCount];\n         for (int i = 0; i < cpMethodCount; ++i) {\n             this.cpMethodClass[i] = this.cpClass[this.cpMethodClassInts[i]];\n             this.cpMethodDescriptor[i] = this.cpDescriptor[this.cpMethodDescriptorInts[i]];\n         }\n     }\n     \n-    private void parseCpSignature(final InputStream in) throws IOException, Pack200Exception {\n+    private void parseCpSignature(final InputStream inputStream) throws IOException, Pack200Exception {\n         final int cpSignatureCount = this.header.getCpSignatureCount();\n-        this.cpSignatureInts = this.decodeBandInt(\"cp_Signature_form\", in, Codec.DELTA5, cpSignatureCount);\n-        final String[] cpSignatureForm = this.getReferences(this.cpSignatureInts, this.cpUTF8);\n+        this.cpSignatureInts = this.decodeBandInt(\"cp_Signature_form\", inputStream, Codec.DELTA5, cpSignatureCount);\n+        final String[] references = this.getReferences(this.cpSignatureInts, this.cpUTF8);\n         this.cpSignature = new String[cpSignatureCount];\n         this.mapSignature = new HashMap<String, Integer>();\n-        int lCount = 0;\n+        int n = 0;\n         for (int i = 0; i < cpSignatureCount; ++i) {\n-            final String form = cpSignatureForm[i];\n-            final char[] charArray;\n-            final char[] chars = charArray = form.toCharArray();\n-            for (final char element : charArray) {\n-                if (element == 'L') {\n+            final char[] charArray = references[i].toCharArray();\n+            for (int length = charArray.length, j = 0; j < length; ++j) {\n+                if (charArray[j] == 'L') {\n                     this.cpSignatureInts[i] = -1;\n-                    ++lCount;\n+                    ++n;\n                 }\n             }\n         }\n-        final String[] cpSignatureClasses = this.parseReferences(\"cp_Signature_classes\", in, Codec.UDELTA5, lCount, this.cpClass);\n-        int index = 0;\n-        for (int j = 0; j < cpSignatureCount; ++j) {\n-            final String form2 = cpSignatureForm[j];\n-            final int len = form2.length();\n-            final StringBuilder signature = new StringBuilder(64);\n+        final String[] references2 = this.parseReferences(\"cp_Signature_classes\", inputStream, Codec.UDELTA5, n, this.cpClass);\n+        int n2 = 0;\n+        for (int k = 0; k < cpSignatureCount; ++k) {\n+            final String s = references[k];\n+            final int length2 = s.length();\n+            final StringBuilder sb = new StringBuilder(64);\n             final ArrayList<String> list = new ArrayList<String>();\n-            for (int k = 0; k < len; ++k) {\n-                final char c = form2.charAt(k);\n-                signature.append(c);\n-                if (c == 'L') {\n-                    final String className = cpSignatureClasses[index];\n-                    list.add(className);\n-                    signature.append(className);\n-                    ++index;\n+            for (int l = 0; l < length2; ++l) {\n+                final char char1 = s.charAt(l);\n+                sb.append(char1);\n+                if (char1 == 'L') {\n+                    final String s2 = references2[n2];\n+                    list.add(s2);\n+                    sb.append(s2);\n+                    ++n2;\n                 }\n             }\n-            this.cpSignature[j] = signature.toString();\n-            this.mapSignature.put(signature.toString(), Integer.valueOf(j));\n+            this.cpSignature[k] = sb.toString();\n+            this.mapSignature.put(sb.toString(), Integer.valueOf(k));\n         }\n     }\n     \n-    private void parseCpString(final InputStream in) throws IOException, Pack200Exception {\n+    private void parseCpString(final InputStream inputStream) throws IOException, Pack200Exception {\n         final int cpStringCount = this.header.getCpStringCount();\n-        this.cpStringInts = this.decodeBandInt(\"cp_String\", in, Codec.UDELTA5, cpStringCount);\n-        Arrays.setAll(this.cpString = new String[cpStringCount], i -> this.cpUTF8[this.cpStringInts[i]]);\n+        this.cpStringInts = this.decodeBandInt(\"cp_String\", inputStream, Codec.UDELTA5, cpStringCount);\n+        Arrays.setAll(this.cpString = new String[cpStringCount], n2 -> this.cpUTF8[this.cpStringInts[n2]]);\n     }\n     \n-    private void parseCpUtf8(final InputStream in) throws IOException, Pack200Exception {\n+    private void parseCpUtf8(final InputStream inputStream) throws IOException, Pack200Exception {\n         final int cpUTF8Count = this.header.getCpUTF8Count();\n         this.cpUTF8 = new String[cpUTF8Count];\n         this.mapUTF8 = new HashMap<String, Integer>(cpUTF8Count + 1);\n         this.cpUTF8[0] = \"\";\n         this.mapUTF8.put(\"\", Integer.valueOf(0));\n-        final int[] prefix = this.decodeBandInt(\"cpUTF8Prefix\", in, Codec.DELTA5, cpUTF8Count - 2);\n-        int charCount = 0;\n-        int bigSuffixCount = 0;\n-        final int[] decodeBandInt;\n-        final int[] suffix = decodeBandInt = this.decodeBandInt(\"cpUTF8Suffix\", in, Codec.UNSIGNED5, cpUTF8Count - 1);\n-        for (final int element : decodeBandInt) {\n-            if (element == 0) {\n-                ++bigSuffixCount;\n+        final int[] decodeBandInt = this.decodeBandInt(\"cpUTF8Prefix\", inputStream, Codec.DELTA5, cpUTF8Count - 2);\n+        int n = 0;\n+        int n2 = 0;\n+        final int[] decodeBandInt2;\n+        final int[] array = decodeBandInt2 = this.decodeBandInt(\"cpUTF8Suffix\", inputStream, Codec.UNSIGNED5, cpUTF8Count - 1);\n+        for (final int n3 : decodeBandInt2) {\n+            if (n3 == 0) {\n+                ++n2;\n             }\n             else {\n-                charCount += element;\n+                n += n3;\n             }\n         }\n-        final char[] data = new char[charCount];\n-        final int[] dataBand = this.decodeBandInt(\"cp_Utf8_chars\", in, Codec.CHAR3, charCount);\n-        for (int i = 0; i < data.length; ++i) {\n-            data[i] = (char)dataBand[i];\n-        }\n-        final int[] bigSuffixCounts = this.decodeBandInt(\"cp_Utf8_big_suffix\", in, Codec.DELTA5, bigSuffixCount);\n-        final int[][] bigSuffixDataBand = new int[bigSuffixCount][];\n-        for (int j = 0; j < bigSuffixDataBand.length; ++j) {\n-            bigSuffixDataBand[j] = this.decodeBandInt(\"cp_Utf8_big_chars \" + j, in, Codec.DELTA5, bigSuffixCounts[j]);\n-        }\n-        final char[][] bigSuffixData = new char[bigSuffixCount][];\n-        for (int k = 0; k < bigSuffixDataBand.length; ++k) {\n-            bigSuffixData[k] = new char[bigSuffixDataBand[k].length];\n-            for (int l = 0; l < bigSuffixDataBand[k].length; ++l) {\n-                bigSuffixData[k][l] = (char)bigSuffixDataBand[k][l];\n-            }\n-        }\n-        charCount = 0;\n-        bigSuffixCount = 0;\n-        for (int k = 1; k < cpUTF8Count; ++k) {\n-            final String lastString = this.cpUTF8[k - 1];\n-            if (suffix[k - 1] == 0) {\n-                this.cpUTF8[k] = lastString.substring(0, (k > 1) ? prefix[k - 2] : 0) + new String(bigSuffixData[bigSuffixCount++]);\n-                this.mapUTF8.put(this.cpUTF8[k], Integer.valueOf(k));\n+        final char[] value = new char[n];\n+        final int[] decodeBandInt3 = this.decodeBandInt(\"cp_Utf8_chars\", inputStream, Codec.CHAR3, n);\n+        for (int j = 0; j < value.length; ++j) {\n+            value[j] = (char)decodeBandInt3[j];\n+        }\n+        final int[] decodeBandInt4 = this.decodeBandInt(\"cp_Utf8_big_suffix\", inputStream, Codec.DELTA5, n2);\n+        final int[][] array2 = new int[n2][];\n+        for (int k = 0; k < array2.length; ++k) {\n+            array2[k] = this.decodeBandInt(\"cp_Utf8_big_chars \" + k, inputStream, Codec.DELTA5, decodeBandInt4[k]);\n+        }\n+        final char[][] array3 = new char[n2][];\n+        for (int l = 0; l < array2.length; ++l) {\n+            array3[l] = new char[array2[l].length];\n+            for (int n4 = 0; n4 < array2[l].length; ++n4) {\n+                array3[l][n4] = (char)array2[l][n4];\n+            }\n+        }\n+        int offset = 0;\n+        int n5 = 0;\n+        for (int n6 = 1; n6 < cpUTF8Count; ++n6) {\n+            final String s = this.cpUTF8[n6 - 1];\n+            if (array[n6 - 1] == 0) {\n+                this.cpUTF8[n6] = s.substring(0, (n6 > 1) ? decodeBandInt[n6 - 2] : 0) + new String(array3[n5++]);\n+                this.mapUTF8.put(this.cpUTF8[n6], Integer.valueOf(n6));\n             }\n             else {\n-                this.cpUTF8[k] = lastString.substring(0, (k > 1) ? prefix[k - 2] : 0) + new String(data, charCount, suffix[k - 1]);\n-                charCount += suffix[k - 1];\n-                this.mapUTF8.put(this.cpUTF8[k], Integer.valueOf(k));\n+                this.cpUTF8[n6] = s.substring(0, (n6 > 1) ? decodeBandInt[n6 - 2] : 0) + new String(value, offset, array[n6 - 1]);\n+                offset += array[n6 - 1];\n+                this.mapUTF8.put(this.cpUTF8[n6], Integer.valueOf(n6));\n             }\n         }\n     }\n     \n-    public void read(final InputStream in) throws IOException, Pack200Exception {\n-        this.parseCpUtf8(in);\n-        this.parseCpInt(in);\n-        this.parseCpFloat(in);\n-        this.parseCpLong(in);\n-        this.parseCpDouble(in);\n-        this.parseCpString(in);\n-        this.parseCpClass(in);\n-        this.parseCpSignature(in);\n-        this.parseCpDescriptor(in);\n-        this.parseCpField(in);\n-        this.parseCpMethod(in);\n-        this.parseCpIMethod(in);\n+    public void read(final InputStream inputStream) throws IOException, Pack200Exception {\n+        this.parseCpUtf8(inputStream);\n+        this.parseCpInt(inputStream);\n+        this.parseCpFloat(inputStream);\n+        this.parseCpLong(inputStream);\n+        this.parseCpDouble(inputStream);\n+        this.parseCpString(inputStream);\n+        this.parseCpClass(inputStream);\n+        this.parseCpSignature(inputStream);\n+        this.parseCpDescriptor(inputStream);\n+        this.parseCpField(inputStream);\n+        this.parseCpMethod(inputStream);\n+        this.parseCpIMethod(inputStream);\n         this.intOffset = this.cpUTF8.length;\n         this.floatOffset = this.intOffset + this.cpInt.length;\n         this.longOffset = this.floatOffset + this.cpFloat.length;\n         this.doubleOffset = this.longOffset + this.cpLong.length;\n         this.stringOffset = this.doubleOffset + this.cpDouble.length;\n         this.classOffset = this.stringOffset + this.cpString.length;\n         this.signatureOffset = this.classOffset + this.cpClass.length;\n"}]}
