{"diffoscope-json-version": 1, "source1": "first/NeedBracesCheck.class", "source2": "second/NeedBracesCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -210,15 +210,15 @@\n         else {\n             result = isSingleLineCaseGroup(statement);\n         }\n         return result;\n     }\n     \n     private static boolean isSingleLineCaseGroup(final DetailAST ast) {\n-        return Boolean.valueOf(Optional.of(ast).map((Function<? super DetailAST, ?>)DetailAST::getNextSibling).map((Function<? super Object, ?>)DetailAST::getLastChild).map(lastToken -> Boolean.valueOf(TokenUtil.areOnSameLine(ast, lastToken))).orElse(Boolean.TRUE));\n+        return Boolean.valueOf(Optional.of(ast).map((Function<? super DetailAST, ?>)DetailAST::getNextSibling).map((Function<? super Object, ?>)DetailAST::getLastChild).map(lastToken -> Boolean.valueOf(TokenUtil.areOnSameLine(detailAST, lastToken))).orElse(Boolean.TRUE));\n     }\n     \n     private static boolean isSingleLineSwitchRule(final DetailAST ast) {\n         final DetailAST lastSibling = ast.getParent().getLastChild();\n         return TokenUtil.areOnSameLine(ast, lastSibling);\n     }\n     \n"}]}
