{"diffoscope-json-version": 1, "source1": "first/DurationUtils.class", "source2": "second/DurationUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,24 +1,28 @@\n \n package org.apache.commons.lang3.time;\n \n-import org.apache.commons.lang3.math.NumberUtils;\n import org.apache.commons.lang3.ObjectUtils;\n import java.time.temporal.TemporalUnit;\n import java.util.Objects;\n import java.time.temporal.ChronoUnit;\n import java.util.concurrent.TimeUnit;\n import java.time.Duration;\n import org.apache.commons.lang3.function.FailableBiConsumer;\n+import org.apache.commons.lang3.math.NumberUtils;\n import org.apache.commons.lang3.Range;\n \n public class DurationUtils\n {\n     static final Range<Long> LONG_TO_INT_RANGE;\n     \n+    static {\n+        LONG_TO_INT_RANGE = Range.between((Comparable)NumberUtils.LONG_INT_MIN_VALUE, (Comparable)NumberUtils.LONG_INT_MAX_VALUE);\n+    }\n+    \n     public static <T extends Throwable> void accept(final FailableBiConsumer<Long, Integer, T> consumer, final Duration duration) throws T, Throwable {\n         if (consumer != null && duration != null) {\n             consumer.accept((Object)Long.valueOf(duration.toMillis()), (Object)Integer.valueOf(getNanosOfMiili(duration)));\n         }\n     }\n     \n     public static int getNanosOfMiili(final Duration duration) {\n@@ -26,34 +30,34 @@\n     }\n     \n     public static boolean isPositive(final Duration duration) {\n         return !duration.isNegative() && !duration.isZero();\n     }\n     \n     static ChronoUnit toChronoUnit(final TimeUnit timeUnit) {\n-        switch (DurationUtils.DurationUtils$1.$SwitchMap$java$util$concurrent$TimeUnit[((TimeUnit)Objects.requireNonNull(timeUnit)).ordinal()]) {\n-            case 1: {\n+        switch ((TimeUnit)Objects.requireNonNull(timeUnit)) {\n+            case NANOSECONDS: {\n                 return ChronoUnit.NANOS;\n             }\n-            case 2: {\n+            case MICROSECONDS: {\n                 return ChronoUnit.MICROS;\n             }\n-            case 3: {\n+            case MILLISECONDS: {\n                 return ChronoUnit.MILLIS;\n             }\n-            case 4: {\n+            case SECONDS: {\n                 return ChronoUnit.SECONDS;\n             }\n-            case 5: {\n+            case MINUTES: {\n                 return ChronoUnit.MINUTES;\n             }\n-            case 6: {\n+            case HOURS: {\n                 return ChronoUnit.HOURS;\n             }\n-            case 7: {\n+            case DAYS: {\n                 return ChronoUnit.DAYS;\n             }\n             default: {\n                 throw new IllegalArgumentException(timeUnit.toString());\n             }\n         }\n     }\n@@ -66,12 +70,8 @@\n         Objects.requireNonNull(duration, \"duration\");\n         return ((Long)DurationUtils.LONG_TO_INT_RANGE.fit((Object)Long.valueOf(duration.toMillis()))).intValue();\n     }\n     \n     public static Duration zeroIfNull(final Duration duration) {\n         return (Duration)ObjectUtils.defaultIfNull((Object)duration, (Object)Duration.ZERO);\n     }\n-    \n-    static {\n-        LONG_TO_INT_RANGE = Range.between((Comparable)NumberUtils.LONG_INT_MIN_VALUE, (Comparable)NumberUtils.LONG_INT_MAX_VALUE);\n-    }\n }\n"}]}
