{"diffoscope-json-version": 1, "source1": "first/MissingSwitchDefaultCheck.class", "source2": "second/MissingSwitchDefaultCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,29 +19,29 @@\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 89 };\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        if (!containsDefaultLabel(ast) && !containsPatternCaseLabelElement(ast) && !containsDefaultCaseLabelElement(ast) && !isSwitchExpression(ast)) {\n-            this.log(ast, \"missing.switch.default\", new Object[0]);\n+    public void visitToken(final DetailAST detailAST) {\n+        if (!containsDefaultLabel(detailAST) && !containsPatternCaseLabelElement(detailAST) && !containsDefaultCaseLabelElement(detailAST) && !isSwitchExpression(detailAST)) {\n+            this.log(detailAST, \"missing.switch.default\", new Object[0]);\n         }\n     }\n     \n-    private static boolean containsDefaultLabel(final DetailAST detailAst) {\n-        return TokenUtil.findFirstTokenByPredicate(detailAst, ast -> ast.findFirstToken(94) != null).isPresent();\n+    private static boolean containsDefaultLabel(final DetailAST detailAST) {\n+        return TokenUtil.findFirstTokenByPredicate(detailAST, detailAST2 -> detailAST2.findFirstToken(94) != null).isPresent();\n     }\n     \n-    private static boolean containsPatternCaseLabelElement(final DetailAST detailAst) {\n-        return TokenUtil.findFirstTokenByPredicate(detailAst, ast -> ast.getFirstChild() != null && ast.getFirstChild().findFirstToken(198) != null).isPresent();\n+    private static boolean containsPatternCaseLabelElement(final DetailAST detailAST) {\n+        return TokenUtil.findFirstTokenByPredicate(detailAST, detailAST2 -> detailAST2.getFirstChild() != null && detailAST2.getFirstChild().findFirstToken(198) != null).isPresent();\n     }\n     \n-    private static boolean containsDefaultCaseLabelElement(final DetailAST detailAst) {\n-        return TokenUtil.findFirstTokenByPredicate(detailAst, ast -> ast.getFirstChild() != null && ast.getFirstChild().findFirstToken(94) != null).isPresent();\n+    private static boolean containsDefaultCaseLabelElement(final DetailAST detailAST) {\n+        return TokenUtil.findFirstTokenByPredicate(detailAST, detailAST2 -> detailAST2.getFirstChild() != null && detailAST2.getFirstChild().findFirstToken(94) != null).isPresent();\n     }\n     \n-    private static boolean isSwitchExpression(final DetailAST ast) {\n-        return ast.getParent().getType() == 28 || ast.getParent().getParent().getType() == 28;\n+    private static boolean isSwitchExpression(final DetailAST detailAST) {\n+        return detailAST.getParent().getType() == 28 || detailAST.getParent().getParent().getType() == 28;\n     }\n }\n"}]}
