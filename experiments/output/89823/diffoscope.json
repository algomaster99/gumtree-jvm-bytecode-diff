{"diffoscope-json-version": 1, "source1": "first/FilteringParserDelegate.class", "source2": "second/FilteringParserDelegate.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -67,15 +67,15 @@\n     public boolean hasCurrentToken() {\n         return this._currToken != null;\n     }\n     \n     public boolean hasTokenId(final int id) {\n         final JsonToken t = this._currToken;\n         if (t == null) {\n-            return 0 == id;\n+            return id == 0;\n         }\n         return t.id() == id;\n     }\n     \n     public final boolean hasToken(final JsonToken t) {\n         return this._currToken == t;\n     }\n@@ -130,48 +130,47 @@\n     }\n     \n     public JsonToken nextToken() throws IOException {\n         if (!this._allowMultipleMatches && this._currToken != null && this._exposedContext == null && this._currToken.isScalarValue() && !this._headContext.isStartHandled() && this._inclusion == TokenFilter.Inclusion.ONLY_INCLUDE_ALL && this._itemFilter == TokenFilter.INCLUDE_ALL) {\n             return this._currToken = null;\n         }\n         TokenFilterContext ctxt = this._exposedContext;\n-        if (ctxt != null) {\n-            while (true) {\n-                JsonToken t = ctxt.nextTokenToRead();\n-                if (t != null) {\n-                    return this._currToken = t;\n-                }\n-                if (ctxt == this._headContext) {\n-                    this._exposedContext = null;\n-                    if (ctxt.inArray()) {\n-                        t = this.delegate.getCurrentToken();\n-                        this._currToken = t;\n-                        if (this._currToken == JsonToken.END_ARRAY) {\n+        Label_0236: {\n+            if (ctxt != null) {\n+                do {\n+                    JsonToken t = ctxt.nextTokenToRead();\n+                    if (t != null) {\n+                        return this._currToken = t;\n+                    }\n+                    if (ctxt == this._headContext) {\n+                        this._exposedContext = null;\n+                        if (ctxt.inArray()) {\n+                            t = this.delegate.getCurrentToken();\n+                            this._currToken = t;\n+                            if (this._currToken == JsonToken.END_ARRAY) {\n+                                this._headContext = this._headContext.getParent();\n+                                this._itemFilter = this._headContext.getFilter();\n+                            }\n+                            return t;\n+                        }\n+                        t = this.delegate.currentToken();\n+                        if (t == JsonToken.END_OBJECT) {\n                             this._headContext = this._headContext.getParent();\n                             this._itemFilter = this._headContext.getFilter();\n                         }\n-                        return t;\n-                    }\n-                    t = this.delegate.currentToken();\n-                    if (t == JsonToken.END_OBJECT) {\n-                        this._headContext = this._headContext.getParent();\n-                        this._itemFilter = this._headContext.getFilter();\n-                    }\n-                    if (t != JsonToken.FIELD_NAME) {\n-                        return this._currToken = t;\n+                        if (t != JsonToken.FIELD_NAME) {\n+                            return this._currToken = t;\n+                        }\n+                        break Label_0236;\n                     }\n-                    break;\n-                }\n-                else {\n-                    ctxt = this._headContext.findChildOf(ctxt);\n-                    if ((this._exposedContext = ctxt) == null) {\n-                        throw this._constructError(\"Unexpected problem: chain of filtered context broken\");\n+                    else {\n+                        ctxt = this._headContext.findChildOf(ctxt);\n                     }\n-                    continue;\n-                }\n+                } while ((this._exposedContext = ctxt) != null);\n+                throw this._constructError(\"Unexpected problem: chain of filtered context broken\");\n             }\n         }\n         JsonToken t = this.delegate.nextToken();\n         if (t == null) {\n             return this._currToken = t;\n         }\n         switch (t.id()) {\n@@ -444,49 +443,50 @@\n                     }\n                     f = f.includeProperty(name);\n                     if (f == null) {\n                         this.delegate.nextToken();\n                         this.delegate.skipChildren();\n                         continue;\n                     }\n-                    if ((this._itemFilter = f) != TokenFilter.INCLUDE_ALL) {\n+                    if ((this._itemFilter = f) == TokenFilter.INCLUDE_ALL) {\n+                        if (!this._verifyAllowedMatches()) {\n+                            this.delegate.nextToken();\n+                            this.delegate.skipChildren();\n+                            continue;\n+                        }\n+                        if (this._inclusion == TokenFilter.Inclusion.INCLUDE_ALL_AND_PATH) {\n+                            return this._currToken = t;\n+                        }\n+                        continue;\n+                    }\n+                    else {\n                         if (this._inclusion == TokenFilter.Inclusion.ONLY_INCLUDE_ALL) {\n                             continue;\n                         }\n                         t = this._nextTokenWithBuffering(this._headContext);\n                         if (t != null) {\n                             return this._currToken = t;\n                         }\n                         continue;\n-                        continue;\n                     }\n-                    if (!this._verifyAllowedMatches()) {\n-                        this.delegate.nextToken();\n-                        this.delegate.skipChildren();\n-                        continue;\n-                    }\n-                    if (this._inclusion == TokenFilter.Inclusion.INCLUDE_ALL_AND_PATH) {\n-                        return this._currToken = t;\n-                    }\n-                    continue;\n+                    break;\n                 }\n                 default: {\n                     TokenFilter f = this._itemFilter;\n                     if (f == TokenFilter.INCLUDE_ALL) {\n                         return this._currToken = t;\n                     }\n                     if (f == null) {\n                         continue;\n                     }\n                     f = this._headContext.checkValue(f);\n                     if ((f == TokenFilter.INCLUDE_ALL || (f != null && f.includeValue(this.delegate))) && this._verifyAllowedMatches()) {\n                         return this._currToken = t;\n                     }\n                     continue;\n-                    continue;\n                 }\n             }\n         }\n     }\n     \n     protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot) throws IOException {\n         while (true) {\n"}]}
