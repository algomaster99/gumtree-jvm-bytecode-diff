{"diffoscope-json-version": 1, "source1": "first/Lister.class", "source2": "second/Lister.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,62 +14,191 @@\n import java.io.File;\n import java.io.InputStream;\n \n public final class Lister\n {\n     private static final ArchiveStreamFactory FACTORY;\n     \n+    static {\n+        FACTORY = ArchiveStreamFactory.DEFAULT;\n+    }\n+    \n     private static ArchiveInputStream createArchiveInputStream(final String[] args, final InputStream fis) throws ArchiveException {\n         if (args.length > 1) {\n             return Lister.FACTORY.createArchiveInputStream(args[1], fis);\n         }\n         return Lister.FACTORY.createArchiveInputStream(fis);\n     }\n     \n     private static String detectFormat(final File f) throws ArchiveException, IOException {\n-        try (final InputStream fis = new BufferedInputStream(Files.newInputStream(f.toPath(), new OpenOption[0]))) {\n-            return ArchiveStreamFactory.detect(fis);\n+        Throwable t = null;\n+        try {\n+            final InputStream fis = new BufferedInputStream(Files.newInputStream(f.toPath(), new OpenOption[0]));\n+            try {\n+                return ArchiveStreamFactory.detect(fis);\n+            }\n+            finally {\n+                if (fis != null) {\n+                    fis.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     private static void list7z(final File f) throws IOException {\n-        try (final SevenZFile z = new SevenZFile(f)) {\n-            System.out.println(\"Created \" + z);\n-            ArchiveEntry ae;\n-            while ((ae = (ArchiveEntry)z.getNextEntry()) != null) {\n-                final String name = (ae.getName() == null) ? (z.getDefaultName() + \" (entry name was null)\") : ae.getName();\n-                System.out.println(name);\n+        Throwable t = null;\n+        try {\n+            final SevenZFile z = new SevenZFile(f);\n+            try {\n+                System.out.println(\"Created \" + z);\n+                ArchiveEntry ae;\n+                while ((ae = (ArchiveEntry)z.getNextEntry()) != null) {\n+                    final String name = (ae.getName() == null) ? (String.valueOf(z.getDefaultName()) + \" (entry name was null)\") : ae.getName();\n+                    System.out.println(name);\n+                }\n+            }\n+            finally {\n+                if (z != null) {\n+                    z.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n             }\n         }\n     }\n     \n     private static void listStream(final File f, final String[] args) throws ArchiveException, IOException {\n-        try (final InputStream fis = new BufferedInputStream(Files.newInputStream(f.toPath(), new OpenOption[0]));\n-             final ArchiveInputStream ais = createArchiveInputStream(args, fis)) {\n-            System.out.println(\"Created \" + ais.toString());\n-            ArchiveEntry ae;\n-            while ((ae = ais.getNextEntry()) != null) {\n-                System.out.println(ae.getName());\n+        Throwable t = null;\n+        try {\n+            final InputStream fis = new BufferedInputStream(Files.newInputStream(f.toPath(), new OpenOption[0]));\n+            try {\n+                final ArchiveInputStream ais = createArchiveInputStream(args, fis);\n+                try {\n+                    System.out.println(\"Created \" + ais.toString());\n+                    ArchiveEntry ae;\n+                    while ((ae = ais.getNextEntry()) != null) {\n+                        System.out.println(ae.getName());\n+                    }\n+                }\n+                finally {\n+                    if (ais != null) {\n+                        ais.close();\n+                    }\n+                }\n+                if (fis != null) {\n+                    fis.close();\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n+                }\n+                if (fis != null) {\n+                    fis.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception2;\n+                t = exception2;\n+            }\n+            else {\n+                final Throwable exception2;\n+                if (t != exception2) {\n+                    t.addSuppressed(exception2);\n+                }\n             }\n         }\n     }\n     \n     private static void listZipUsingTarFile(final File f) throws IOException {\n-        try (final TarFile t = new TarFile(f)) {\n-            System.out.println(\"Created \" + t);\n-            t.getEntries().forEach(en -> System.out.println(en.getName()));\n+        Throwable t2 = null;\n+        try {\n+            final TarFile t = new TarFile(f);\n+            try {\n+                System.out.println(\"Created \" + t);\n+                t.getEntries().forEach(en -> System.out.println(en.getName()));\n+            }\n+            finally {\n+                if (t != null) {\n+                    t.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t2 == null) {\n+                final Throwable exception;\n+                t2 = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t2 != exception) {\n+                    t2.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     private static void listZipUsingZipFile(final File f) throws IOException {\n-        try (final ZipFile z = new ZipFile(f)) {\n-            System.out.println(\"Created \" + z);\n-            final Enumeration<ZipArchiveEntry> en = z.getEntries();\n-            while (en.hasMoreElements()) {\n-                System.out.println(((ZipArchiveEntry)en.nextElement()).getName());\n+        Throwable t = null;\n+        try {\n+            final ZipFile z = new ZipFile(f);\n+            try {\n+                System.out.println(\"Created \" + z);\n+                final Enumeration<ZipArchiveEntry> en = z.getEntries();\n+                while (en.hasMoreElements()) {\n+                    System.out.println(((ZipArchiveEntry)en.nextElement()).getName());\n+                }\n+            }\n+            finally {\n+                if (z != null) {\n+                    z.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n             }\n         }\n     }\n     \n     public static void main(final String[] args) throws ArchiveException, IOException {\n         if (args.length == 0) {\n             usage();\n@@ -96,12 +225,8 @@\n     }\n     \n     private static void usage() {\n         System.out.println(\"Parameters: archive-name [archive-type]\\n\");\n         System.out.println(\"The magic archive-type 'zipfile' prefers ZipFile over ZipArchiveInputStream\");\n         System.out.println(\"The magic archive-type 'tarfile' prefers TarFile over TarArchiveInputStream\");\n     }\n-    \n-    static {\n-        FACTORY = ArchiveStreamFactory.DEFAULT;\n-    }\n }\n"}]}
