{"diffoscope-json-version": 1, "source1": "first/CircularByteBuffer.class", "source2": "second/CircularByteBuffer.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,16 +7,16 @@\n public class CircularByteBuffer\n {\n     private final byte[] buffer;\n     private int startOffset;\n     private int endOffset;\n     private int currentNumberOfBytes;\n     \n-    public CircularByteBuffer(final int size) {\n-        this.buffer = IOUtils.byteArray(size);\n+    public CircularByteBuffer(final int n) {\n+        this.buffer = IOUtils.byteArray(n);\n         this.startOffset = 0;\n         this.endOffset = 0;\n         this.currentNumberOfBytes = 0;\n     }\n     \n     public CircularByteBuffer() {\n         this(8192);\n@@ -30,98 +30,98 @@\n         --this.currentNumberOfBytes;\n         if (++this.startOffset == this.buffer.length) {\n             this.startOffset = 0;\n         }\n         return b;\n     }\n     \n-    public void read(final byte[] targetBuffer, final int targetOffset, final int length) {\n-        Objects.requireNonNull(targetBuffer, \"targetBuffer\");\n-        if (targetOffset < 0 || targetOffset >= targetBuffer.length) {\n-            throw new IllegalArgumentException(\"Invalid offset: \" + targetOffset);\n-        }\n-        if (length < 0 || length > this.buffer.length) {\n-            throw new IllegalArgumentException(\"Invalid length: \" + length);\n-        }\n-        if (targetOffset + length > targetBuffer.length) {\n-            throw new IllegalArgumentException(\"The supplied byte array contains only \" + targetBuffer.length + \" bytes, but offset, and length would require \" + (targetOffset + length - 1));\n-        }\n-        if (this.currentNumberOfBytes < length) {\n-            throw new IllegalStateException(\"Currently, there are only \" + this.currentNumberOfBytes + \"in the buffer, not \" + length);\n-        }\n-        int offset = targetOffset;\n-        for (int i = 0; i < length; ++i) {\n-            targetBuffer[offset++] = this.buffer[this.startOffset];\n+    public void read(final byte[] obj, final int i, final int n) {\n+        Objects.requireNonNull(obj, \"targetBuffer\");\n+        if (i < 0 || i >= obj.length) {\n+            throw new IllegalArgumentException(\"Invalid offset: \" + i);\n+        }\n+        if (n < 0 || n > this.buffer.length) {\n+            throw new IllegalArgumentException(\"Invalid length: \" + n);\n+        }\n+        if (i + n > obj.length) {\n+            throw new IllegalArgumentException(\"The supplied byte array contains only \" + obj.length + \" bytes, but offset, and length would require \" + (i + n - 1));\n+        }\n+        if (this.currentNumberOfBytes < n) {\n+            throw new IllegalStateException(\"Currently, there are only \" + this.currentNumberOfBytes + \"in the buffer, not \" + n);\n+        }\n+        int n2 = i;\n+        for (int j = 0; j < n; ++j) {\n+            obj[n2++] = this.buffer[this.startOffset];\n             --this.currentNumberOfBytes;\n             if (++this.startOffset == this.buffer.length) {\n                 this.startOffset = 0;\n             }\n         }\n     }\n     \n-    public void add(final byte value) {\n+    public void add(final byte b) {\n         if (this.currentNumberOfBytes >= this.buffer.length) {\n             throw new IllegalStateException(\"No space available\");\n         }\n-        this.buffer[this.endOffset] = value;\n+        this.buffer[this.endOffset] = b;\n         ++this.currentNumberOfBytes;\n         if (++this.endOffset == this.buffer.length) {\n             this.endOffset = 0;\n         }\n     }\n     \n-    public boolean peek(final byte[] sourceBuffer, final int offset, final int length) {\n-        Objects.requireNonNull(sourceBuffer, \"Buffer\");\n-        if (offset < 0 || offset >= sourceBuffer.length) {\n-            throw new IllegalArgumentException(\"Invalid offset: \" + offset);\n+    public boolean peek(final byte[] obj, final int i, final int j) {\n+        Objects.requireNonNull(obj, \"Buffer\");\n+        if (i < 0 || i >= obj.length) {\n+            throw new IllegalArgumentException(\"Invalid offset: \" + i);\n         }\n-        if (length < 0 || length > this.buffer.length) {\n-            throw new IllegalArgumentException(\"Invalid length: \" + length);\n+        if (j < 0 || j > this.buffer.length) {\n+            throw new IllegalArgumentException(\"Invalid length: \" + j);\n         }\n-        if (length < this.currentNumberOfBytes) {\n+        if (j < this.currentNumberOfBytes) {\n             return false;\n         }\n-        int localOffset = this.startOffset;\n-        for (int i = 0; i < length; ++i) {\n-            if (this.buffer[localOffset] != sourceBuffer[i + offset]) {\n+        int startOffset = this.startOffset;\n+        for (int k = 0; k < j; ++k) {\n+            if (this.buffer[startOffset] != obj[k + i]) {\n                 return false;\n             }\n-            if (++localOffset == this.buffer.length) {\n-                localOffset = 0;\n+            if (++startOffset == this.buffer.length) {\n+                startOffset = 0;\n             }\n         }\n         return true;\n     }\n     \n-    public void add(final byte[] targetBuffer, final int offset, final int length) {\n-        Objects.requireNonNull(targetBuffer, \"Buffer\");\n-        if (offset < 0 || offset >= targetBuffer.length) {\n-            throw new IllegalArgumentException(\"Invalid offset: \" + offset);\n+    public void add(final byte[] obj, final int i, final int j) {\n+        Objects.requireNonNull(obj, \"Buffer\");\n+        if (i < 0 || i >= obj.length) {\n+            throw new IllegalArgumentException(\"Invalid offset: \" + i);\n         }\n-        if (length < 0) {\n-            throw new IllegalArgumentException(\"Invalid length: \" + length);\n+        if (j < 0) {\n+            throw new IllegalArgumentException(\"Invalid length: \" + j);\n         }\n-        if (this.currentNumberOfBytes + length > this.buffer.length) {\n+        if (this.currentNumberOfBytes + j > this.buffer.length) {\n             throw new IllegalStateException(\"No space available\");\n         }\n-        for (int i = 0; i < length; ++i) {\n-            this.buffer[this.endOffset] = targetBuffer[offset + i];\n+        for (int k = 0; k < j; ++k) {\n+            this.buffer[this.endOffset] = obj[i + k];\n             if (++this.endOffset == this.buffer.length) {\n                 this.endOffset = 0;\n             }\n         }\n-        this.currentNumberOfBytes += length;\n+        this.currentNumberOfBytes += j;\n     }\n     \n     public boolean hasSpace() {\n         return this.currentNumberOfBytes < this.buffer.length;\n     }\n     \n-    public boolean hasSpace(final int count) {\n-        return this.currentNumberOfBytes + count <= this.buffer.length;\n+    public boolean hasSpace(final int n) {\n+        return this.currentNumberOfBytes + n <= this.buffer.length;\n     }\n     \n     public boolean hasBytes() {\n         return this.currentNumberOfBytes > 0;\n     }\n     \n     public int getSpace() {\n"}]}
