{"diffoscope-json-version": 1, "source1": "first/XMLPropertiesConfiguration.class", "source2": "second/XMLPropertiesConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,15 +9,14 @@\n import java.util.List;\n import org.apache.commons.text.StringEscapeUtils;\n import java.io.PrintWriter;\n import java.io.Writer;\n import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n import org.xml.sax.XMLReader;\n-import javax.xml.parsers.SAXParser;\n import org.xml.sax.ContentHandler;\n import org.xml.sax.InputSource;\n import javax.xml.parsers.SAXParserFactory;\n import java.io.Reader;\n import org.apache.commons.configuration2.ex.ConfigurationException;\n import org.w3c.dom.Element;\n import org.apache.commons.configuration2.io.FileLocator;\n@@ -41,27 +40,26 @@\n         return this.header;\n     }\n     \n     public void setHeader(final String header) {\n         this.header = header;\n     }\n     \n-    public void read(final Reader in) throws ConfigurationException {\n-        final SAXParserFactory factory = SAXParserFactory.newInstance();\n-        factory.setNamespaceAware(false);\n-        factory.setValidating(true);\n+    public void read(final Reader characterStream) throws ConfigurationException {\n+        final SAXParserFactory instance = SAXParserFactory.newInstance();\n+        instance.setNamespaceAware(false);\n+        instance.setValidating(true);\n         try {\n-            final SAXParser parser = factory.newSAXParser();\n-            final XMLReader xmlReader = parser.getXMLReader();\n-            xmlReader.setEntityResolver((publicId, systemId) -> new InputSource(this.getClass().getClassLoader().getResourceAsStream(\"properties.dtd\")));\n+            final XMLReader xmlReader = instance.newSAXParser().getXMLReader();\n+            xmlReader.setEntityResolver((p0, p1) -> new InputSource(this.getClass().getClassLoader().getResourceAsStream(\"properties.dtd\")));\n             xmlReader.setContentHandler((ContentHandler)new XMLPropertiesConfiguration.XMLPropertiesHandler(this, (XMLPropertiesConfiguration.XMLPropertiesConfiguration$1)null));\n-            xmlReader.parse(new InputSource(in));\n+            xmlReader.parse(new InputSource(characterStream));\n         }\n-        catch (final Exception e) {\n-            throw new ConfigurationException(\"Unable to parse the configuration file\", (Throwable)e);\n+        catch (final Exception ex) {\n+            throw new ConfigurationException(\"Unable to parse the configuration file\", (Throwable)ex);\n         }\n     }\n     \n     public void load(final Element element) throws ConfigurationException {\n         if (!element.getNodeName().equals(\"properties\")) {\n             throw new ConfigurationException(\"Malformed XML\");\n         }\n@@ -72,105 +70,102 @@\n                 if (item.getNodeName().equals(\"comment\")) {\n                     this.setHeader(item.getTextContent());\n                 }\n                 else {\n                     if (!item.getNodeName().equals(\"entry\")) {\n                         throw new ConfigurationException(\"Malformed XML\");\n                     }\n-                    final String key = ((Element)item).getAttribute(\"key\");\n-                    this.addProperty(key, (Object)item.getTextContent());\n+                    this.addProperty(((Element)item).getAttribute(\"key\"), (Object)item.getTextContent());\n                 }\n             }\n         }\n     }\n     \n     public void write(final Writer out) throws ConfigurationException {\n-        final PrintWriter writer = new PrintWriter(out);\n-        String encoding = (this.locator != null) ? this.locator.getEncoding() : null;\n-        if (encoding == null) {\n-            encoding = \"UTF-8\";\n-        }\n-        writer.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"\" + encoding + \"\\\"?>\");\n-        writer.println(\"<!DOCTYPE properties SYSTEM \\\"http://java.sun.com/dtd/properties.dtd\\\">\");\n-        writer.println(\"<properties>\");\n+        final PrintWriter printWriter = new PrintWriter(out);\n+        String str = (this.locator != null) ? this.locator.getEncoding() : null;\n+        if (str == null) {\n+            str = \"UTF-8\";\n+        }\n+        printWriter.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"\" + str + \"\\\"?>\");\n+        printWriter.println(\"<!DOCTYPE properties SYSTEM \\\"http://java.sun.com/dtd/properties.dtd\\\">\");\n+        printWriter.println(\"<properties>\");\n         if (this.getHeader() != null) {\n-            writer.println(\"  <comment>\" + StringEscapeUtils.escapeXml10(this.getHeader()) + \"</comment>\");\n+            printWriter.println(\"  <comment>\" + StringEscapeUtils.escapeXml10(this.getHeader()) + \"</comment>\");\n         }\n-        final Iterator<String> keys = this.getKeys();\n+        final Iterator keys = this.getKeys();\n         while (keys.hasNext()) {\n-            final String key = (String)keys.next();\n-            final Object value = this.getProperty(key);\n-            if (value instanceof List) {\n-                this.writeProperty(writer, key, (List<?>)value);\n+            final String s = (String)keys.next();\n+            final Object property = this.getProperty(s);\n+            if (property instanceof List) {\n+                this.writeProperty(printWriter, s, (List<?>)property);\n             }\n             else {\n-                this.writeProperty(writer, key, value);\n+                this.writeProperty(printWriter, s, property);\n             }\n         }\n-        writer.println(\"</properties>\");\n-        writer.flush();\n+        printWriter.println(\"</properties>\");\n+        printWriter.flush();\n     }\n     \n-    private void writeProperty(final PrintWriter out, final String key, final Object value) {\n-        final String k = StringEscapeUtils.escapeXml10(key);\n-        if (value != null) {\n-            final String v = this.escapeValue(value);\n-            out.println(\"  <entry key=\\\"\" + k + \"\\\">\" + v + \"</entry>\");\n+    private void writeProperty(final PrintWriter printWriter, final String s, final Object o) {\n+        final String escapeXml10 = StringEscapeUtils.escapeXml10(s);\n+        if (o != null) {\n+            printWriter.println(\"  <entry key=\\\"\" + escapeXml10 + \"\\\">\" + this.escapeValue(o) + \"</entry>\");\n         }\n         else {\n-            out.println(\"  <entry key=\\\"\" + k + \"\\\"/>\");\n+            printWriter.println(\"  <entry key=\\\"\" + escapeXml10 + \"\\\"/>\");\n         }\n     }\n     \n-    private void writeProperty(final PrintWriter out, final String key, final List<?> values) {\n-        for (final Object value : values) {\n-            this.writeProperty(out, key, value);\n+    private void writeProperty(final PrintWriter printWriter, final String s, final List<?> list) {\n+        final Iterator<?> iterator = list.iterator();\n+        while (iterator.hasNext()) {\n+            this.writeProperty(printWriter, s, iterator.next());\n         }\n     }\n     \n-    public void save(final Document document, final Node parent) {\n-        final Element properties = document.createElement(\"properties\");\n-        parent.appendChild(properties);\n+    public void save(final Document document, final Node node) {\n+        final Element element = document.createElement(\"properties\");\n+        node.appendChild(element);\n         if (this.getHeader() != null) {\n-            final Element comment = document.createElement(\"comment\");\n-            properties.appendChild(comment);\n-            comment.setTextContent(StringEscapeUtils.escapeXml10(this.getHeader()));\n+            final Element element2 = document.createElement(\"comment\");\n+            element.appendChild(element2);\n+            element2.setTextContent(StringEscapeUtils.escapeXml10(this.getHeader()));\n         }\n-        final Iterator<String> keys = this.getKeys();\n+        final Iterator keys = this.getKeys();\n         while (keys.hasNext()) {\n-            final String key = (String)keys.next();\n-            final Object value = this.getProperty(key);\n-            if (value instanceof List) {\n-                this.writeProperty(document, properties, key, (List<?>)value);\n+            final String s = (String)keys.next();\n+            final Object property = this.getProperty(s);\n+            if (property instanceof List) {\n+                this.writeProperty(document, element, s, (List<?>)property);\n             }\n             else {\n-                this.writeProperty(document, properties, key, value);\n+                this.writeProperty(document, element, s, property);\n             }\n         }\n     }\n     \n     public void initFileLocator(final FileLocator locator) {\n         this.locator = locator;\n     }\n     \n-    private void writeProperty(final Document document, final Node properties, final String key, final Object value) {\n-        final Element entry = document.createElement(\"entry\");\n-        properties.appendChild(entry);\n-        final String k = StringEscapeUtils.escapeXml10(key);\n-        entry.setAttribute(\"key\", k);\n-        if (value != null) {\n-            final String v = this.escapeValue(value);\n-            entry.setTextContent(v);\n+    private void writeProperty(final Document document, final Node node, final String s, final Object o) {\n+        final Element element = document.createElement(\"entry\");\n+        node.appendChild(element);\n+        element.setAttribute(\"key\", StringEscapeUtils.escapeXml10(s));\n+        if (o != null) {\n+            element.setTextContent(this.escapeValue(o));\n         }\n     }\n     \n-    private void writeProperty(final Document document, final Node properties, final String key, final List<?> values) {\n-        for (final Object value : values) {\n-            this.writeProperty(document, properties, key, value);\n+    private void writeProperty(final Document document, final Node node, final String s, final List<?> list) {\n+        final Iterator<?> iterator = list.iterator();\n+        while (iterator.hasNext()) {\n+            this.writeProperty(document, node, s, iterator.next());\n         }\n     }\n     \n-    private String escapeValue(final Object value) {\n-        final String v = StringEscapeUtils.escapeXml10(String.valueOf(value));\n-        return String.valueOf(this.getListDelimiterHandler().escape((Object)v, ListDelimiterHandler.NOOP_TRANSFORMER));\n+    private String escapeValue(final Object obj) {\n+        return String.valueOf(this.getListDelimiterHandler().escape((Object)StringEscapeUtils.escapeXml10(String.valueOf(obj)), ListDelimiterHandler.NOOP_TRANSFORMER));\n     }\n }\n"}]}
