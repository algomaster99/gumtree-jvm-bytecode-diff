{"diffoscope-json-version": 1, "source1": "first/Rule$Phoneme.class", "source2": "second/Rule$Phoneme.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,14 +6,18 @@\n \n public static final class Phoneme implements Rule.PhonemeExpr\n {\n     public static final Comparator<Phoneme> COMPARATOR;\n     private final StringBuilder phonemeText;\n     private final Languages.LanguageSet languages;\n     \n+    static {\n+        Phoneme.COMPARATOR = (Comparator)new Phoneme.Rule$Phoneme$1();\n+    }\n+    \n     public Phoneme(final CharSequence phonemeText, final Languages.LanguageSet languages) {\n         this.phonemeText = new StringBuilder(phonemeText);\n         this.languages = languages;\n     }\n     \n     public Phoneme(final Phoneme phonemeLeft, final Phoneme phonemeRight) {\n         this(phonemeLeft.phonemeText, phonemeLeft.languages);\n@@ -40,23 +44,19 @@\n     \n     public CharSequence getPhonemeText() {\n         return this.phonemeText;\n     }\n     \n     @Deprecated\n     public Phoneme join(final Phoneme right) {\n-        return new Phoneme((CharSequence)(this.phonemeText.toString() + right.phonemeText.toString()), this.languages.restrictTo(right.languages));\n+        return new Phoneme((CharSequence)(String.valueOf(this.phonemeText.toString()) + right.phonemeText.toString()), this.languages.restrictTo(right.languages));\n     }\n     \n     public Phoneme mergeWithLanguage(final Languages.LanguageSet lang) {\n         return new Phoneme((CharSequence)this.phonemeText.toString(), this.languages.merge(lang));\n     }\n     \n     @Override\n     public String toString() {\n-        return this.phonemeText.toString() + \"[\" + this.languages + \"]\";\n-    }\n-    \n-    static {\n-        Phoneme.COMPARATOR = (Comparator)new Phoneme.Rule$Phoneme$1();\n+        return String.valueOf(this.phonemeText.toString()) + \"[\" + this.languages + \"]\";\n     }\n }\n"}]}
