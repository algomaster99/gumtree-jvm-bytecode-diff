{"diffoscope-json-version": 1, "source1": "first/TarArchiveOutputStream.class", "source2": "second/TarArchiveOutputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,206 +1,206 @@\n-  SHA-256 checksum b7ac689c69e524c2ea40bb3568692a0ed501584bca5e3c3152d391612a6e2dda\n+  SHA-256 checksum 11c0736e0081da6247ad5e6ecf834344260b5219725eb73a08f8a7d10df3f193\n   Compiled from \"TarArchiveOutputStream.java\"\n public class org.apache.commons.compress.archivers.tar.TarArchiveOutputStream extends org.apache.commons.compress.archivers.ArchiveOutputStream\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #1                          // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream\n   super_class: #192                       // org/apache/commons/compress/archivers/ArchiveOutputStream\n   interfaces: 0, fields: 26, methods: 40, attributes: 3\n Constant pool:\n-    #1 = Class              #328          // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream\n-    #2 = Methodref          #1.#329       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.\"<init>\":(Ljava/io/OutputStream;I)V\n-    #3 = Methodref          #1.#330       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.\"<init>\":(Ljava/io/OutputStream;ILjava/lang/String;)V\n-    #4 = Methodref          #1.#331       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.\"<init>\":(Ljava/io/OutputStream;IILjava/lang/String;)V\n-    #5 = Class              #332          // java/lang/IllegalArgumentException\n-    #6 = Class              #333          // java/lang/StringBuilder\n-    #7 = Methodref          #6.#334       // java/lang/StringBuilder.\"<init>\":()V\n-    #8 = String             #335          // Tar record size must always be 512 bytes. Attempt to set size of\n-    #9 = Methodref          #6.#336       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #10 = Methodref          #6.#337       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #11 = Methodref          #6.#338       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #12 = Methodref          #5.#339       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #13 = Methodref          #192.#334     // org/apache/commons/compress/archivers/ArchiveOutputStream.\"<init>\":()V\n-   #14 = Fieldref           #1.#340       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.longFileMode:I\n-   #15 = Fieldref           #1.#341       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.bigNumberMode:I\n-   #16 = String             #342          // Block size must be a multiple of 512 bytes. Attempt to use set size of\n-   #17 = Class              #343          // org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n-   #18 = Class              #344          // org/apache/commons/compress/utils/CountingOutputStream\n-   #19 = Methodref          #18.#345      // org/apache/commons/compress/utils/CountingOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n-   #20 = Fieldref           #1.#346       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.countingOut:Lorg/apache/commons/compress/utils/CountingOutputStream;\n-   #21 = Methodref          #17.#329      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.\"<init>\":(Ljava/io/OutputStream;I)V\n-   #22 = Fieldref           #1.#347       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.out:Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n-   #23 = Fieldref           #1.#348       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.encoding:Ljava/lang/String;\n-   #24 = Methodref          #349.#350     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #25 = Fieldref           #1.#351       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #26 = Fieldref           #1.#352       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.recordBuf:[B\n-   #27 = Fieldref           #1.#353       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.recordsPerBlock:I\n-   #28 = Methodref          #354.#355     // java/nio/file/attribute/FileTime.toInstant:()Ljava/time/Instant;\n-   #29 = Methodref          #356.#357     // java/time/Instant.getEpochSecond:()J\n-   #30 = Methodref          #356.#358     // java/time/Instant.getNano:()I\n-   #31 = Methodref          #359.#360     // java/lang/String.valueOf:(J)Ljava/lang/String;\n-   #32 = InterfaceMethodref #361.#362     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #33 = Methodref          #1.#363       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.addInstantPaxHeader:(Ljava/util/Map;Ljava/lang/String;JI)V\n-   #34 = Methodref          #1.#364       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.addPaxHeaderForBigNumber:(Ljava/util/Map;Ljava/lang/String;JJ)V\n-   #35 = Methodref          #365.#366     // java/math/BigDecimal.valueOf:(J)Ljava/math/BigDecimal;\n-   #36 = Methodref          #365.#367     // java/math/BigDecimal.movePointLeft:(I)Ljava/math/BigDecimal;\n-   #37 = Fieldref           #368.#369     // java/math/RoundingMode.DOWN:Ljava/math/RoundingMode;\n-   #38 = Methodref          #365.#370     // java/math/BigDecimal.setScale:(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;\n-   #39 = Methodref          #365.#371     // java/math/BigDecimal.add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-   #40 = Methodref          #365.#372     // java/math/BigDecimal.toPlainString:()Ljava/lang/String;\n-   #41 = String             #373          // size\n-   #42 = Methodref          #90.#374      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n-   #43 = Class              #375          // org/apache/commons/compress/archivers/tar/TarConstants\n+    #1 = Class              #325          // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream\n+    #2 = Methodref          #1.#326       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.\"<init>\":(Ljava/io/OutputStream;I)V\n+    #3 = Methodref          #1.#327       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.\"<init>\":(Ljava/io/OutputStream;ILjava/lang/String;)V\n+    #4 = Methodref          #1.#328       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.\"<init>\":(Ljava/io/OutputStream;IILjava/lang/String;)V\n+    #5 = Class              #329          // java/lang/IllegalArgumentException\n+    #6 = Class              #330          // java/lang/StringBuilder\n+    #7 = Methodref          #6.#331       // java/lang/StringBuilder.\"<init>\":()V\n+    #8 = String             #332          // Tar record size must always be 512 bytes. Attempt to set size of\n+    #9 = Methodref          #6.#333       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #10 = Methodref          #6.#334       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #11 = Methodref          #6.#335       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #12 = Methodref          #5.#336       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #13 = Methodref          #192.#331     // org/apache/commons/compress/archivers/ArchiveOutputStream.\"<init>\":()V\n+   #14 = Fieldref           #1.#337       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.longFileMode:I\n+   #15 = Fieldref           #1.#338       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.bigNumberMode:I\n+   #16 = String             #339          // Block size must be a multiple of 512 bytes. Attempt to use set size of\n+   #17 = Class              #340          // org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n+   #18 = Class              #341          // org/apache/commons/compress/utils/CountingOutputStream\n+   #19 = Methodref          #18.#342      // org/apache/commons/compress/utils/CountingOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n+   #20 = Fieldref           #1.#343       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.countingOut:Lorg/apache/commons/compress/utils/CountingOutputStream;\n+   #21 = Methodref          #17.#326      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.\"<init>\":(Ljava/io/OutputStream;I)V\n+   #22 = Fieldref           #1.#344       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.out:Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n+   #23 = Fieldref           #1.#345       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.encoding:Ljava/lang/String;\n+   #24 = Methodref          #346.#347     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #25 = Fieldref           #1.#348       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #26 = Fieldref           #1.#349       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.recordBuf:[B\n+   #27 = Fieldref           #1.#350       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.recordsPerBlock:I\n+   #28 = Methodref          #351.#352     // java/nio/file/attribute/FileTime.toInstant:()Ljava/time/Instant;\n+   #29 = Methodref          #251.#353     // java/time/Instant.getEpochSecond:()J\n+   #30 = Methodref          #251.#354     // java/time/Instant.getNano:()I\n+   #31 = Methodref          #246.#355     // java/lang/String.valueOf:(J)Ljava/lang/String;\n+   #32 = InterfaceMethodref #300.#356     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #33 = Methodref          #1.#357       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.addInstantPaxHeader:(Ljava/util/Map;Ljava/lang/String;JI)V\n+   #34 = Methodref          #1.#358       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.addPaxHeaderForBigNumber:(Ljava/util/Map;Ljava/lang/String;JJ)V\n+   #35 = Methodref          #359.#360     // java/math/BigDecimal.valueOf:(J)Ljava/math/BigDecimal;\n+   #36 = Methodref          #359.#361     // java/math/BigDecimal.movePointLeft:(I)Ljava/math/BigDecimal;\n+   #37 = Fieldref           #362.#363     // java/math/RoundingMode.DOWN:Ljava/math/RoundingMode;\n+   #38 = Methodref          #359.#364     // java/math/BigDecimal.setScale:(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;\n+   #39 = Methodref          #359.#365     // java/math/BigDecimal.add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+   #40 = Methodref          #359.#366     // java/math/BigDecimal.toPlainString:()Ljava/lang/String;\n+   #41 = String             #367          // size\n+   #42 = Methodref          #90.#368      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+   #43 = Class              #369          // org/apache/commons/compress/archivers/tar/TarConstants\n    #44 = Long               8589934591l\n-   #46 = String             #376          // gid\n-   #47 = Methodref          #90.#377      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLongGroupId:()J\n+   #46 = String             #370          // gid\n+   #47 = Methodref          #90.#371      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLongGroupId:()J\n    #48 = Long               2097151l\n-   #50 = String             #378          // mtime\n-   #51 = Methodref          #90.#379      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLastModifiedTime:()Ljava/nio/file/attribute/FileTime;\n-   #52 = Methodref          #1.#380       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.addFileTimePaxHeaderForBigNumber:(Ljava/util/Map;Ljava/lang/String;Ljava/nio/file/attribute/FileTime;J)V\n-   #53 = String             #381          // atime\n-   #54 = Methodref          #90.#382      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLastAccessTime:()Ljava/nio/file/attribute/FileTime;\n-   #55 = Methodref          #1.#383       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.addFileTimePaxHeader:(Ljava/util/Map;Ljava/lang/String;Ljava/nio/file/attribute/FileTime;)V\n-   #56 = Methodref          #90.#384      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getStatusChangeTime:()Ljava/nio/file/attribute/FileTime;\n-   #57 = String             #385          // ctime\n-   #58 = Methodref          #90.#386      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getCreationTime:()Ljava/nio/file/attribute/FileTime;\n-   #59 = String             #387          // uid\n-   #60 = Methodref          #90.#388      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLongUserId:()J\n-   #61 = String             #389          // LIBARCHIVE.creationtime\n-   #62 = String             #390          // SCHILY.devmajor\n-   #63 = Methodref          #90.#391      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDevMajor:()I\n-   #64 = String             #392          // SCHILY.devminor\n-   #65 = Methodref          #90.#393      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDevMinor:()I\n-   #66 = String             #394          // mode\n-   #67 = Methodref          #90.#395      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getMode:()I\n-   #68 = Methodref          #1.#396       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.failForBigNumber:(Ljava/lang/String;JJ)V\n-   #69 = Fieldref           #1.#397       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.finished:Z\n-   #70 = Methodref          #1.#398       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.finish:()V\n-   #71 = Fieldref           #1.#399       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.closed:Z\n-   #72 = Methodref          #17.#400      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.close:()V\n-   #73 = Class              #401          // java/io/IOException\n-   #74 = String             #402          // Stream has already been finished\n-   #75 = Methodref          #73.#339      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #76 = Fieldref           #1.#403       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.haveUnclosedEntry:Z\n-   #77 = String             #404          // No current entry to close\n-   #78 = Methodref          #17.#405      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.flushBlock:()V\n-   #79 = Fieldref           #1.#406       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.currBytes:J\n-   #80 = Fieldref           #1.#407       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.currSize:J\n-   #81 = String             #408          // Entry \\'\n-   #82 = Fieldref           #1.#409       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.currName:Ljava/lang/String;\n-   #83 = String             #410          // \\' closed at \\'\n-   #84 = Methodref          #6.#411       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #85 = String             #412          // \\' before the \\'\n-   #86 = String             #413          // \\' bytes specified in the header were written\n-   #87 = Fieldref           #1.#414       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.recordsWritten:J\n+   #50 = String             #372          // mtime\n+   #51 = Methodref          #90.#373      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLastModifiedTime:()Ljava/nio/file/attribute/FileTime;\n+   #52 = Methodref          #1.#374       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.addFileTimePaxHeaderForBigNumber:(Ljava/util/Map;Ljava/lang/String;Ljava/nio/file/attribute/FileTime;J)V\n+   #53 = String             #375          // atime\n+   #54 = Methodref          #90.#376      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLastAccessTime:()Ljava/nio/file/attribute/FileTime;\n+   #55 = Methodref          #1.#377       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.addFileTimePaxHeader:(Ljava/util/Map;Ljava/lang/String;Ljava/nio/file/attribute/FileTime;)V\n+   #56 = Methodref          #90.#378      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getStatusChangeTime:()Ljava/nio/file/attribute/FileTime;\n+   #57 = String             #379          // ctime\n+   #58 = Methodref          #90.#380      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getCreationTime:()Ljava/nio/file/attribute/FileTime;\n+   #59 = String             #381          // uid\n+   #60 = Methodref          #90.#382      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLongUserId:()J\n+   #61 = String             #383          // LIBARCHIVE.creationtime\n+   #62 = String             #384          // SCHILY.devmajor\n+   #63 = Methodref          #90.#385      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDevMajor:()I\n+   #64 = String             #386          // SCHILY.devminor\n+   #65 = Methodref          #90.#387      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDevMinor:()I\n+   #66 = String             #388          // mode\n+   #67 = Methodref          #90.#389      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getMode:()I\n+   #68 = Methodref          #1.#390       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.failForBigNumber:(Ljava/lang/String;JJ)V\n+   #69 = Fieldref           #1.#391       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.finished:Z\n+   #70 = Methodref          #1.#392       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.finish:()V\n+   #71 = Fieldref           #1.#393       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.closed:Z\n+   #72 = Methodref          #17.#394      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.close:()V\n+   #73 = Class              #395          // java/io/IOException\n+   #74 = String             #396          // Stream has already been finished\n+   #75 = Methodref          #73.#336      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #76 = Fieldref           #1.#397       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.haveUnclosedEntry:Z\n+   #77 = String             #398          // No current entry to close\n+   #78 = Methodref          #17.#399      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.flushBlock:()V\n+   #79 = Fieldref           #1.#400       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.currBytes:J\n+   #80 = Fieldref           #1.#401       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.currSize:J\n+   #81 = String             #402          // Entry \\'\n+   #82 = Fieldref           #1.#403       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.currName:Ljava/lang/String;\n+   #83 = String             #404          // \\' closed at \\'\n+   #84 = Methodref          #6.#405       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+   #85 = String             #406          // \\' before the \\'\n+   #86 = String             #407          // \\' bytes specified in the header were written\n+   #87 = Fieldref           #1.#408       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.recordsWritten:J\n    #88 = Long               512l\n-   #90 = Class              #415          // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-   #91 = Methodref          #90.#416      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-   #92 = Methodref          #90.#417      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n-   #93 = Class              #418          // java/io/StringWriter\n-   #94 = Methodref          #93.#334      // java/io/StringWriter.\"<init>\":()V\n-   #95 = InvokeDynamic      #0:#424       // #0:accept:(Ljava/io/StringWriter;)Ljava/util/function/BiConsumer;\n-   #96 = InterfaceMethodref #361.#425     // java/util/Map.forEach:(Ljava/util/function/BiConsumer;)V\n-   #97 = Methodref          #93.#338      // java/io/StringWriter.toString:()Ljava/lang/String;\n-   #98 = Fieldref           #426.#427     // java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;\n-   #99 = Methodref          #359.#428     // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n-  #100 = String             #429          //\n-  #101 = Methodref          #1.#430       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.failForBigNumber:(Ljava/lang/String;JJLjava/lang/String;)V\n-  #102 = String             #431          //  \\'\n-  #103 = String             #432          // \\' is too big ( >\n-  #104 = String             #433          //  ).\n-  #105 = String             #434          // entry size\n-  #106 = String             #435          // group id\n-  #107 = Methodref          #1.#436       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.failForBigNumberWithPosixMessage:(Ljava/lang/String;JJ)V\n-  #108 = String             #437          // last modification time\n-  #109 = Methodref          #438.#439     // org/apache/commons/compress/utils/TimeUtils.toUnixTime:(Ljava/nio/file/attribute/FileTime;)J\n-  #110 = String             #440          // user id\n-  #111 = String             #441          // major device number\n-  #112 = String             #442          // minor device number\n-  #113 = String             #443          //  Use STAR or POSIX extensions to overcome this limit\n-  #114 = String             #444          // This archive has already been finished\n-  #115 = String             #445          // This archive contains unclosed entries.\n-  #116 = Methodref          #1.#446       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.writeEOFRecord:()V\n-  #117 = Methodref          #1.#447       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.padAsNeeded:()V\n-  #118 = Methodref          #17.#448      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.flush:()V\n-  #119 = Methodref          #18.#449      // org/apache/commons/compress/utils/CountingOutputStream.getBytesWritten:()J\n-  #120 = Methodref          #1.#449       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.getBytesWritten:()J\n-  #121 = InterfaceMethodref #450.#451     // org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-  #122 = Methodref          #452.#453     // java/nio/ByteBuffer.limit:()I\n-  #123 = Methodref          #452.#454     // java/nio/ByteBuffer.position:()I\n-  #124 = String             #455          // ././@LongLink\n-  #125 = Methodref          #90.#456      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/lang/String;B)V\n-  #126 = Methodref          #90.#457      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSize:(J)V\n-  #127 = Methodref          #1.#458       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.transferModTime:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n-  #128 = Methodref          #1.#459       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n-  #129 = Methodref          #452.#460     // java/nio/ByteBuffer.array:()[B\n-  #130 = Methodref          #452.#461     // java/nio/ByteBuffer.arrayOffset:()I\n-  #131 = Methodref          #1.#462       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.write:([BII)V\n-  #132 = Methodref          #1.#463       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.write:(I)V\n-  #133 = Methodref          #1.#464       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.closeArchiveEntry:()V\n-  #134 = String             #465          // \\' is too long ( >\n-  #135 = String             #466          //  bytes)\n-  #136 = Methodref          #467.#468     // java/lang/Math.toIntExact:(J)I\n-  #137 = Methodref          #90.#469      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGlobalPaxHeader:()Z\n-  #138 = Methodref          #90.#470      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getExtraPaxHeaders:()Ljava/util/Map;\n-  #139 = Methodref          #1.#471       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.encodeExtendedPaxHeadersContents:(Ljava/util/Map;)[B\n-  #140 = Methodref          #90.#472      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.writeEntryHeader:([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n-  #141 = Methodref          #1.#473       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.writeRecord:([B)V\n-  #142 = Methodref          #1.#474       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.write:([B)V\n-  #143 = Class              #475          // java/util/HashMap\n-  #144 = Methodref          #143.#334     // java/util/HashMap.\"<init>\":()V\n-  #145 = Methodref          #90.#476      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getName:()Ljava/lang/String;\n-  #146 = String             #477          // path\n-  #147 = String             #478          // file name\n-  #148 = Methodref          #1.#479       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.handleLongName:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;BLjava/lang/String;)Z\n-  #149 = Methodref          #90.#480      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLinkName:()Ljava/lang/String;\n-  #150 = Methodref          #359.#481     // java/lang/String.isEmpty:()Z\n-  #151 = String             #482          // linkpath\n-  #152 = String             #483          // link name\n-  #153 = Methodref          #1.#484       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.addPaxHeadersForBigNumbers:(Ljava/util/Map;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n-  #154 = Methodref          #1.#485       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.failForBigNumbers:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n-  #155 = Fieldref           #1.#486       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.addPaxHeadersForNonAsciiNames:Z\n-  #156 = Fieldref           #1.#487       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.ASCII:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #157 = InterfaceMethodref #450.#488     // org/apache/commons/compress/archivers/zip/ZipEncoding.canEncode:(Ljava/lang/String;)Z\n-  #158 = Methodref          #90.#489      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isLink:()Z\n-  #159 = Methodref          #90.#490      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSymbolicLink:()Z\n-  #160 = InterfaceMethodref #361.#491     // java/util/Map.putAll:(Ljava/util/Map;)V\n-  #161 = InterfaceMethodref #361.#481     // java/util/Map.isEmpty:()Z\n-  #162 = Methodref          #1.#492       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.writePaxHeaders:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;)V\n-  #163 = Methodref          #90.#493      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n-  #164 = Methodref          #359.#494     // java/lang/String.length:()I\n-  #165 = Methodref          #6.#495       // java/lang/StringBuilder.\"<init>\":(I)V\n-  #166 = Methodref          #359.#496     // java/lang/String.charAt:(I)C\n-  #167 = Methodref          #1.#497       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.shouldBeReplaced:(C)Z\n-  #168 = String             #498          // _\n-  #169 = Methodref          #6.#499       // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n-  #170 = Methodref          #438.#500     // org/apache/commons/compress/utils/TimeUtils.unixTimeToFileTime:(J)Ljava/nio/file/attribute/FileTime;\n-  #171 = Methodref          #90.#501      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setLastModifiedTime:(Ljava/nio/file/attribute/FileTime;)V\n-  #172 = Class              #502          // java/lang/IllegalStateException\n-  #173 = String             #503          // No current tar entry\n-  #174 = Methodref          #172.#339     // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-  #175 = String             #504          // Request to write \\'\n-  #176 = String             #505          // \\' bytes exceeds size in header of \\'\n-  #177 = String             #506          // \\' bytes for entry \\'\n-  #178 = String             #507          // \\'\n-  #179 = Methodref          #17.#462      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.write:([BII)V\n-  #180 = Methodref          #508.#509     // java/util/Arrays.fill:([BB)V\n-  #181 = String             #510          // ./PaxHeaders.X/\n-  #182 = Methodref          #1.#511       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.stripTo7Bits:(Ljava/lang/String;)Ljava/lang/String;\n-  #183 = Methodref          #359.#512     // java/lang/String.substring:(II)Ljava/lang/String;\n-  #184 = String             #513          // Record to write has length \\'\n-  #185 = String             #514          // \\' which is not the record size of \\'\n-  #186 = Methodref          #17.#474      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.write:([B)V\n-  #187 = String             #515          //\n-  #188 = String             #516          // =\n-  #189 = String             #517          // \\n\n-  #190 = Methodref          #93.#518      // java/io/StringWriter.write:(Ljava/lang/String;)V\n+   #90 = Class              #409          // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+   #91 = Methodref          #90.#410      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+   #92 = Methodref          #90.#411      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n+   #93 = Class              #412          // java/io/StringWriter\n+   #94 = Methodref          #93.#331      // java/io/StringWriter.\"<init>\":()V\n+   #95 = InvokeDynamic      #0:#418       // #0:accept:(Ljava/io/StringWriter;)Ljava/util/function/BiConsumer;\n+   #96 = InterfaceMethodref #300.#419     // java/util/Map.forEach:(Ljava/util/function/BiConsumer;)V\n+   #97 = Methodref          #93.#335      // java/io/StringWriter.toString:()Ljava/lang/String;\n+   #98 = Fieldref           #420.#421     // java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;\n+   #99 = Methodref          #246.#422     // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n+  #100 = String             #423          //\n+  #101 = Methodref          #1.#424       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.failForBigNumber:(Ljava/lang/String;JJLjava/lang/String;)V\n+  #102 = String             #425          //  \\'\n+  #103 = String             #426          // \\' is too big ( >\n+  #104 = String             #427          //  ).\n+  #105 = String             #428          // entry size\n+  #106 = String             #429          // group id\n+  #107 = Methodref          #1.#430       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.failForBigNumberWithPosixMessage:(Ljava/lang/String;JJ)V\n+  #108 = String             #431          // last modification time\n+  #109 = Methodref          #432.#433     // org/apache/commons/compress/utils/TimeUtils.toUnixTime:(Ljava/nio/file/attribute/FileTime;)J\n+  #110 = String             #434          // user id\n+  #111 = String             #435          // major device number\n+  #112 = String             #436          // minor device number\n+  #113 = String             #437          //  Use STAR or POSIX extensions to overcome this limit\n+  #114 = String             #438          // This archive has already been finished\n+  #115 = String             #439          // This archive contains unclosed entries.\n+  #116 = Methodref          #1.#440       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.writeEOFRecord:()V\n+  #117 = Methodref          #1.#441       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.padAsNeeded:()V\n+  #118 = Methodref          #17.#442      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.flush:()V\n+  #119 = Methodref          #18.#443      // org/apache/commons/compress/utils/CountingOutputStream.getBytesWritten:()J\n+  #120 = Methodref          #1.#443       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.getBytesWritten:()J\n+  #121 = InterfaceMethodref #299.#444     // org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #122 = Methodref          #292.#445     // java/nio/ByteBuffer.limit:()I\n+  #123 = Methodref          #292.#446     // java/nio/ByteBuffer.position:()I\n+  #124 = String             #447          // ././@LongLink\n+  #125 = Methodref          #90.#448      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/lang/String;B)V\n+  #126 = Methodref          #90.#449      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSize:(J)V\n+  #127 = Methodref          #1.#450       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.transferModTime:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+  #128 = Methodref          #1.#451       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n+  #129 = Methodref          #292.#452     // java/nio/ByteBuffer.array:()[B\n+  #130 = Methodref          #292.#453     // java/nio/ByteBuffer.arrayOffset:()I\n+  #131 = Methodref          #1.#454       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.write:([BII)V\n+  #132 = Methodref          #1.#455       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.write:(I)V\n+  #133 = Methodref          #1.#456       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.closeArchiveEntry:()V\n+  #134 = String             #457          // \\' is too long ( >\n+  #135 = String             #458          //  bytes)\n+  #136 = Methodref          #459.#460     // java/lang/Math.toIntExact:(J)I\n+  #137 = Methodref          #90.#461      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGlobalPaxHeader:()Z\n+  #138 = Methodref          #90.#462      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getExtraPaxHeaders:()Ljava/util/Map;\n+  #139 = Methodref          #1.#463       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.encodeExtendedPaxHeadersContents:(Ljava/util/Map;)[B\n+  #140 = Methodref          #90.#464      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.writeEntryHeader:([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n+  #141 = Methodref          #1.#465       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.writeRecord:([B)V\n+  #142 = Methodref          #1.#466       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.write:([B)V\n+  #143 = Class              #467          // java/util/HashMap\n+  #144 = Methodref          #143.#331     // java/util/HashMap.\"<init>\":()V\n+  #145 = Methodref          #90.#468      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getName:()Ljava/lang/String;\n+  #146 = String             #469          // path\n+  #147 = String             #470          // file name\n+  #148 = Methodref          #1.#471       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.handleLongName:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;BLjava/lang/String;)Z\n+  #149 = Methodref          #90.#472      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getLinkName:()Ljava/lang/String;\n+  #150 = Methodref          #246.#473     // java/lang/String.isEmpty:()Z\n+  #151 = String             #474          // linkpath\n+  #152 = String             #475          // link name\n+  #153 = Methodref          #1.#476       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.addPaxHeadersForBigNumbers:(Ljava/util/Map;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+  #154 = Methodref          #1.#477       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.failForBigNumbers:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+  #155 = Fieldref           #1.#478       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.addPaxHeadersForNonAsciiNames:Z\n+  #156 = Fieldref           #1.#479       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.ASCII:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #157 = InterfaceMethodref #299.#480     // org/apache/commons/compress/archivers/zip/ZipEncoding.canEncode:(Ljava/lang/String;)Z\n+  #158 = Methodref          #90.#481      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isLink:()Z\n+  #159 = Methodref          #90.#482      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSymbolicLink:()Z\n+  #160 = InterfaceMethodref #300.#483     // java/util/Map.putAll:(Ljava/util/Map;)V\n+  #161 = InterfaceMethodref #300.#473     // java/util/Map.isEmpty:()Z\n+  #162 = Methodref          #1.#484       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.writePaxHeaders:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;)V\n+  #163 = Methodref          #90.#485      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n+  #164 = Methodref          #246.#486     // java/lang/String.length:()I\n+  #165 = Methodref          #6.#487       // java/lang/StringBuilder.\"<init>\":(I)V\n+  #166 = Methodref          #246.#488     // java/lang/String.charAt:(I)C\n+  #167 = Methodref          #1.#489       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.shouldBeReplaced:(C)Z\n+  #168 = String             #490          // _\n+  #169 = Methodref          #6.#491       // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+  #170 = Methodref          #432.#492     // org/apache/commons/compress/utils/TimeUtils.unixTimeToFileTime:(J)Ljava/nio/file/attribute/FileTime;\n+  #171 = Methodref          #90.#493      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setLastModifiedTime:(Ljava/nio/file/attribute/FileTime;)V\n+  #172 = Class              #494          // java/lang/IllegalStateException\n+  #173 = String             #495          // No current tar entry\n+  #174 = Methodref          #172.#336     // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+  #175 = String             #496          // Request to write \\'\n+  #176 = String             #497          // \\' bytes exceeds size in header of \\'\n+  #177 = String             #498          // \\' bytes for entry \\'\n+  #178 = String             #499          // \\'\n+  #179 = Methodref          #17.#454      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.write:([BII)V\n+  #180 = Methodref          #500.#501     // java/util/Arrays.fill:([BB)V\n+  #181 = String             #502          // ./PaxHeaders.X/\n+  #182 = Methodref          #1.#503       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.stripTo7Bits:(Ljava/lang/String;)Ljava/lang/String;\n+  #183 = Methodref          #246.#504     // java/lang/String.substring:(II)Ljava/lang/String;\n+  #184 = String             #505          // Record to write has length \\'\n+  #185 = String             #506          // \\' which is not the record size of \\'\n+  #186 = Methodref          #17.#466      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.write:([B)V\n+  #187 = String             #507          //\n+  #188 = String             #508          // =\n+  #189 = String             #509          // \\n\n+  #190 = Methodref          #93.#510      // java/io/StringWriter.write:(Ljava/lang/String;)V\n   #191 = String             #208          // ASCII\n-  #192 = Class              #519          // org/apache/commons/compress/archivers/ArchiveOutputStream\n+  #192 = Class              #511          // org/apache/commons/compress/archivers/ArchiveOutputStream\n   #193 = Utf8               LONGFILE_ERROR\n   #194 = Utf8               I\n   #195 = Utf8               ConstantValue\n   #196 = Integer            0\n   #197 = Utf8               LONGFILE_TRUNCATE\n   #198 = Integer            1\n   #199 = Utf8               LONGFILE_GNU\n@@ -245,412 +245,404 @@\n   #238 = Utf8               (Ljava/io/OutputStream;I)V\n   #239 = Utf8               (Ljava/io/OutputStream;II)V\n   #240 = Utf8               Deprecated\n   #241 = Utf8               RuntimeVisibleAnnotations\n   #242 = Utf8               Ljava/lang/Deprecated;\n   #243 = Utf8               (Ljava/io/OutputStream;IILjava/lang/String;)V\n   #244 = Utf8               StackMapTable\n-  #245 = Class              #328          // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream\n-  #246 = Class              #520          // java/io/OutputStream\n-  #247 = Class              #521          // java/lang/String\n-  #248 = Utf8               (Ljava/io/OutputStream;ILjava/lang/String;)V\n-  #249 = Utf8               (Ljava/io/OutputStream;Ljava/lang/String;)V\n-  #250 = Utf8               addFileTimePaxHeader\n-  #251 = Utf8               (Ljava/util/Map;Ljava/lang/String;Ljava/nio/file/attribute/FileTime;)V\n-  #252 = Class              #522          // java/time/Instant\n-  #253 = Utf8               Signature\n-  #254 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;Ljava/nio/file/attribute/FileTime;)V\n-  #255 = Utf8               addFileTimePaxHeaderForBigNumber\n-  #256 = Utf8               (Ljava/util/Map;Ljava/lang/String;Ljava/nio/file/attribute/FileTime;J)V\n-  #257 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;Ljava/nio/file/attribute/FileTime;J)V\n-  #258 = Utf8               addInstantPaxHeader\n-  #259 = Utf8               (Ljava/util/Map;Ljava/lang/String;JI)V\n-  #260 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;JI)V\n-  #261 = Utf8               addPaxHeaderForBigNumber\n-  #262 = Utf8               (Ljava/util/Map;Ljava/lang/String;JJ)V\n-  #263 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;JJ)V\n-  #264 = Utf8               addPaxHeadersForBigNumbers\n-  #265 = Utf8               (Ljava/util/Map;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n-  #266 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n-  #267 = Utf8               close\n-  #268 = Utf8               ()V\n-  #269 = Class              #523          // java/lang/Throwable\n-  #270 = Utf8               Exceptions\n-  #271 = Utf8               closeArchiveEntry\n-  #272 = Utf8               createArchiveEntry\n-  #273 = Utf8               (Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/ArchiveEntry;\n-  #274 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Lorg/apache/commons/compress/archivers/ArchiveEntry;\n-  #275 = Utf8               encodeExtendedPaxHeadersContents\n-  #276 = Utf8               (Ljava/util/Map;)[B\n-  #277 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)[B\n-  #278 = Utf8               failForBigNumber\n-  #279 = Utf8               (Ljava/lang/String;JJ)V\n-  #280 = Utf8               (Ljava/lang/String;JJLjava/lang/String;)V\n-  #281 = Utf8               failForBigNumbers\n-  #282 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n-  #283 = Utf8               failForBigNumberWithPosixMessage\n-  #284 = Utf8               finish\n-  #285 = Utf8               flush\n-  #286 = Utf8               getBytesWritten\n-  #287 = Utf8               ()J\n-  #288 = Utf8               getCount\n-  #289 = Utf8               ()I\n-  #290 = Utf8               getRecordSize\n-  #291 = Utf8               handleLongName\n-  #292 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;BLjava/lang/String;)Z\n-  #293 = Class              #524          // java/nio/ByteBuffer\n-  #294 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;BLjava/lang/String;)Z\n-  #295 = Utf8               padAsNeeded\n-  #296 = Utf8               putArchiveEntry\n-  #297 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n-  #298 = Class              #525          // org/apache/commons/compress/archivers/ArchiveEntry\n-  #299 = Class              #415          // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-  #300 = Class              #218          // \"[B\"\n-  #301 = Class              #526          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #302 = Class              #527          // java/util/Map\n-  #303 = Utf8               setAddPaxHeadersForNonAsciiNames\n-  #304 = Utf8               (Z)V\n-  #305 = Utf8               setBigNumberMode\n-  #306 = Utf8               (I)V\n-  #307 = Utf8               setLongFileMode\n-  #308 = Utf8               shouldBeReplaced\n-  #309 = Utf8               (C)Z\n-  #310 = Utf8               stripTo7Bits\n-  #311 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #312 = Class              #333          // java/lang/StringBuilder\n-  #313 = Utf8               transferModTime\n-  #314 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n-  #315 = Utf8               write\n-  #316 = Utf8               ([BII)V\n-  #317 = Utf8               writeEOFRecord\n-  #318 = Utf8               writePaxHeaders\n-  #319 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;)V\n-  #320 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n-  #321 = Utf8               writeRecord\n-  #322 = Utf8               ([B)V\n-  #323 = Utf8               lambda$encodeExtendedPaxHeadersContents$0\n-  #324 = Utf8               (Ljava/io/StringWriter;Ljava/lang/String;Ljava/lang/String;)V\n-  #325 = Utf8               <clinit>\n-  #326 = Utf8               SourceFile\n-  #327 = Utf8               TarArchiveOutputStream.java\n-  #328 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveOutputStream\n-  #329 = NameAndType        #234:#238     // \"<init>\":(Ljava/io/OutputStream;I)V\n-  #330 = NameAndType        #234:#248     // \"<init>\":(Ljava/io/OutputStream;ILjava/lang/String;)V\n-  #331 = NameAndType        #234:#243     // \"<init>\":(Ljava/io/OutputStream;IILjava/lang/String;)V\n-  #332 = Utf8               java/lang/IllegalArgumentException\n-  #333 = Utf8               java/lang/StringBuilder\n-  #334 = NameAndType        #234:#268     // \"<init>\":()V\n-  #335 = Utf8               Tar record size must always be 512 bytes. Attempt to set size of\n-  #336 = NameAndType        #528:#529     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #337 = NameAndType        #528:#530     // append:(I)Ljava/lang/StringBuilder;\n-  #338 = NameAndType        #531:#532     // toString:()Ljava/lang/String;\n-  #339 = NameAndType        #234:#533     // \"<init>\":(Ljava/lang/String;)V\n-  #340 = NameAndType        #219:#194     // longFileMode:I\n-  #341 = NameAndType        #220:#194     // bigNumberMode:I\n-  #342 = Utf8               Block size must be a multiple of 512 bytes. Attempt to use set size of\n-  #343 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n-  #344 = Utf8               org/apache/commons/compress/utils/CountingOutputStream\n-  #345 = NameAndType        #234:#235     // \"<init>\":(Ljava/io/OutputStream;)V\n-  #346 = NameAndType        #229:#230     // countingOut:Lorg/apache/commons/compress/utils/CountingOutputStream;\n-  #347 = NameAndType        #227:#228     // out:Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n-  #348 = NameAndType        #232:#215     // encoding:Ljava/lang/String;\n-  #349 = Class              #534          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #350 = NameAndType        #535:#536     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #351 = NameAndType        #231:#209     // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #352 = NameAndType        #217:#218     // recordBuf:[B\n-  #353 = NameAndType        #222:#194     // recordsPerBlock:I\n-  #354 = Class              #537          // java/nio/file/attribute/FileTime\n-  #355 = NameAndType        #538:#539     // toInstant:()Ljava/time/Instant;\n-  #356 = Class              #522          // java/time/Instant\n-  #357 = NameAndType        #540:#287     // getEpochSecond:()J\n-  #358 = NameAndType        #541:#289     // getNano:()I\n-  #359 = Class              #521          // java/lang/String\n-  #360 = NameAndType        #542:#543     // valueOf:(J)Ljava/lang/String;\n-  #361 = Class              #527          // java/util/Map\n-  #362 = NameAndType        #544:#545     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #363 = NameAndType        #258:#259     // addInstantPaxHeader:(Ljava/util/Map;Ljava/lang/String;JI)V\n-  #364 = NameAndType        #261:#262     // addPaxHeaderForBigNumber:(Ljava/util/Map;Ljava/lang/String;JJ)V\n-  #365 = Class              #546          // java/math/BigDecimal\n-  #366 = NameAndType        #542:#547     // valueOf:(J)Ljava/math/BigDecimal;\n-  #367 = NameAndType        #548:#549     // movePointLeft:(I)Ljava/math/BigDecimal;\n-  #368 = Class              #550          // java/math/RoundingMode\n-  #369 = NameAndType        #551:#552     // DOWN:Ljava/math/RoundingMode;\n-  #370 = NameAndType        #553:#554     // setScale:(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;\n-  #371 = NameAndType        #555:#556     // add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-  #372 = NameAndType        #557:#532     // toPlainString:()Ljava/lang/String;\n-  #373 = Utf8               size\n-  #374 = NameAndType        #558:#287     // getSize:()J\n-  #375 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n-  #376 = Utf8               gid\n-  #377 = NameAndType        #559:#287     // getLongGroupId:()J\n-  #378 = Utf8               mtime\n-  #379 = NameAndType        #560:#561     // getLastModifiedTime:()Ljava/nio/file/attribute/FileTime;\n-  #380 = NameAndType        #255:#256     // addFileTimePaxHeaderForBigNumber:(Ljava/util/Map;Ljava/lang/String;Ljava/nio/file/attribute/FileTime;J)V\n-  #381 = Utf8               atime\n-  #382 = NameAndType        #562:#561     // getLastAccessTime:()Ljava/nio/file/attribute/FileTime;\n-  #383 = NameAndType        #250:#251     // addFileTimePaxHeader:(Ljava/util/Map;Ljava/lang/String;Ljava/nio/file/attribute/FileTime;)V\n-  #384 = NameAndType        #563:#561     // getStatusChangeTime:()Ljava/nio/file/attribute/FileTime;\n-  #385 = Utf8               ctime\n-  #386 = NameAndType        #564:#561     // getCreationTime:()Ljava/nio/file/attribute/FileTime;\n-  #387 = Utf8               uid\n-  #388 = NameAndType        #565:#287     // getLongUserId:()J\n-  #389 = Utf8               LIBARCHIVE.creationtime\n-  #390 = Utf8               SCHILY.devmajor\n-  #391 = NameAndType        #566:#289     // getDevMajor:()I\n-  #392 = Utf8               SCHILY.devminor\n-  #393 = NameAndType        #567:#289     // getDevMinor:()I\n-  #394 = Utf8               mode\n-  #395 = NameAndType        #568:#289     // getMode:()I\n-  #396 = NameAndType        #278:#279     // failForBigNumber:(Ljava/lang/String;JJ)V\n-  #397 = NameAndType        #226:#224     // finished:Z\n-  #398 = NameAndType        #284:#268     // finish:()V\n-  #399 = NameAndType        #223:#224     // closed:Z\n-  #400 = NameAndType        #267:#268     // close:()V\n-  #401 = Utf8               java/io/IOException\n-  #402 = Utf8               Stream has already been finished\n-  #403 = NameAndType        #225:#224     // haveUnclosedEntry:Z\n-  #404 = Utf8               No current entry to close\n-  #405 = NameAndType        #569:#268     // flushBlock:()V\n-  #406 = NameAndType        #216:#213     // currBytes:J\n-  #407 = NameAndType        #212:#213     // currSize:J\n-  #408 = Utf8               Entry \\'\n-  #409 = NameAndType        #214:#215     // currName:Ljava/lang/String;\n-  #410 = Utf8               \\' closed at \\'\n-  #411 = NameAndType        #528:#570     // append:(J)Ljava/lang/StringBuilder;\n-  #412 = Utf8               \\' before the \\'\n-  #413 = Utf8               \\' bytes specified in the header were written\n-  #414 = NameAndType        #221:#213     // recordsWritten:J\n-  #415 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-  #416 = NameAndType        #234:#571     // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-  #417 = NameAndType        #234:#572     // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n-  #418 = Utf8               java/io/StringWriter\n-  #419 = Utf8               BootstrapMethods\n-  #420 = MethodHandle       6:#573        // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #421 = MethodType         #574          //  (Ljava/lang/Object;Ljava/lang/Object;)V\n-  #422 = MethodHandle       6:#575        // REF_invokeStatic org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.lambda$encodeExtendedPaxHeadersContents$0:(Ljava/io/StringWriter;Ljava/lang/String;Ljava/lang/String;)V\n-  #423 = MethodType         #576          //  (Ljava/lang/String;Ljava/lang/String;)V\n-  #424 = NameAndType        #577:#578     // accept:(Ljava/io/StringWriter;)Ljava/util/function/BiConsumer;\n-  #425 = NameAndType        #579:#580     // forEach:(Ljava/util/function/BiConsumer;)V\n-  #426 = Class              #581          // java/nio/charset/StandardCharsets\n-  #427 = NameAndType        #582:#583     // UTF_8:Ljava/nio/charset/Charset;\n-  #428 = NameAndType        #584:#585     // getBytes:(Ljava/nio/charset/Charset;)[B\n-  #429 = Utf8\n-  #430 = NameAndType        #278:#280     // failForBigNumber:(Ljava/lang/String;JJLjava/lang/String;)V\n-  #431 = Utf8                \\'\n-  #432 = Utf8               \\' is too big ( >\n-  #433 = Utf8                ).\n-  #434 = Utf8               entry size\n-  #435 = Utf8               group id\n-  #436 = NameAndType        #283:#279     // failForBigNumberWithPosixMessage:(Ljava/lang/String;JJ)V\n-  #437 = Utf8               last modification time\n-  #438 = Class              #586          // org/apache/commons/compress/utils/TimeUtils\n-  #439 = NameAndType        #587:#588     // toUnixTime:(Ljava/nio/file/attribute/FileTime;)J\n-  #440 = Utf8               user id\n-  #441 = Utf8               major device number\n-  #442 = Utf8               minor device number\n-  #443 = Utf8                Use STAR or POSIX extensions to overcome this limit\n-  #444 = Utf8               This archive has already been finished\n-  #445 = Utf8               This archive contains unclosed entries.\n-  #446 = NameAndType        #317:#268     // writeEOFRecord:()V\n-  #447 = NameAndType        #295:#268     // padAsNeeded:()V\n-  #448 = NameAndType        #285:#268     // flush:()V\n-  #449 = NameAndType        #286:#287     // getBytesWritten:()J\n-  #450 = Class              #526          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #451 = NameAndType        #589:#590     // encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-  #452 = Class              #524          // java/nio/ByteBuffer\n-  #453 = NameAndType        #591:#289     // limit:()I\n-  #454 = NameAndType        #592:#289     // position:()I\n-  #455 = Utf8               ././@LongLink\n-  #456 = NameAndType        #234:#593     // \"<init>\":(Ljava/lang/String;B)V\n-  #457 = NameAndType        #594:#595     // setSize:(J)V\n-  #458 = NameAndType        #313:#314     // transferModTime:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n-  #459 = NameAndType        #296:#297     // putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n-  #460 = NameAndType        #596:#597     // array:()[B\n-  #461 = NameAndType        #598:#289     // arrayOffset:()I\n-  #462 = NameAndType        #315:#316     // write:([BII)V\n-  #463 = NameAndType        #315:#306     // write:(I)V\n-  #464 = NameAndType        #271:#268     // closeArchiveEntry:()V\n-  #465 = Utf8               \\' is too long ( >\n-  #466 = Utf8                bytes)\n-  #467 = Class              #599          // java/lang/Math\n-  #468 = NameAndType        #600:#601     // toIntExact:(J)I\n-  #469 = NameAndType        #602:#603     // isGlobalPaxHeader:()Z\n-  #470 = NameAndType        #604:#605     // getExtraPaxHeaders:()Ljava/util/Map;\n-  #471 = NameAndType        #275:#276     // encodeExtendedPaxHeadersContents:(Ljava/util/Map;)[B\n-  #472 = NameAndType        #606:#607     // writeEntryHeader:([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n-  #473 = NameAndType        #321:#322     // writeRecord:([B)V\n-  #474 = NameAndType        #315:#322     // write:([B)V\n-  #475 = Utf8               java/util/HashMap\n-  #476 = NameAndType        #608:#532     // getName:()Ljava/lang/String;\n-  #477 = Utf8               path\n-  #478 = Utf8               file name\n-  #479 = NameAndType        #291:#292     // handleLongName:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;BLjava/lang/String;)Z\n-  #480 = NameAndType        #609:#532     // getLinkName:()Ljava/lang/String;\n-  #481 = NameAndType        #610:#603     // isEmpty:()Z\n-  #482 = Utf8               linkpath\n-  #483 = Utf8               link name\n-  #484 = NameAndType        #264:#265     // addPaxHeadersForBigNumbers:(Ljava/util/Map;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n-  #485 = NameAndType        #281:#282     // failForBigNumbers:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n-  #486 = NameAndType        #233:#224     // addPaxHeadersForNonAsciiNames:Z\n-  #487 = NameAndType        #208:#209     // ASCII:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #488 = NameAndType        #611:#612     // canEncode:(Ljava/lang/String;)Z\n-  #489 = NameAndType        #613:#603     // isLink:()Z\n-  #490 = NameAndType        #614:#603     // isSymbolicLink:()Z\n-  #491 = NameAndType        #615:#616     // putAll:(Ljava/util/Map;)V\n-  #492 = NameAndType        #318:#319     // writePaxHeaders:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;)V\n-  #493 = NameAndType        #617:#603     // isDirectory:()Z\n-  #494 = NameAndType        #618:#289     // length:()I\n-  #495 = NameAndType        #234:#306     // \"<init>\":(I)V\n-  #496 = NameAndType        #619:#620     // charAt:(I)C\n-  #497 = NameAndType        #308:#309     // shouldBeReplaced:(C)Z\n-  #498 = Utf8               _\n-  #499 = NameAndType        #528:#621     // append:(C)Ljava/lang/StringBuilder;\n-  #500 = NameAndType        #622:#623     // unixTimeToFileTime:(J)Ljava/nio/file/attribute/FileTime;\n-  #501 = NameAndType        #624:#625     // setLastModifiedTime:(Ljava/nio/file/attribute/FileTime;)V\n-  #502 = Utf8               java/lang/IllegalStateException\n-  #503 = Utf8               No current tar entry\n-  #504 = Utf8               Request to write \\'\n-  #505 = Utf8               \\' bytes exceeds size in header of \\'\n-  #506 = Utf8               \\' bytes for entry \\'\n-  #507 = Utf8               \\'\n-  #508 = Class              #626          // java/util/Arrays\n-  #509 = NameAndType        #627:#628     // fill:([BB)V\n-  #510 = Utf8               ./PaxHeaders.X/\n-  #511 = NameAndType        #310:#311     // stripTo7Bits:(Ljava/lang/String;)Ljava/lang/String;\n-  #512 = NameAndType        #629:#630     // substring:(II)Ljava/lang/String;\n-  #513 = Utf8               Record to write has length \\'\n-  #514 = Utf8               \\' which is not the record size of \\'\n-  #515 = Utf8\n-  #516 = Utf8               =\n-  #517 = Utf8               \\n\n-  #518 = NameAndType        #315:#533     // write:(Ljava/lang/String;)V\n-  #519 = Utf8               org/apache/commons/compress/archivers/ArchiveOutputStream\n-  #520 = Utf8               java/io/OutputStream\n-  #521 = Utf8               java/lang/String\n-  #522 = Utf8               java/time/Instant\n-  #523 = Utf8               java/lang/Throwable\n-  #524 = Utf8               java/nio/ByteBuffer\n-  #525 = Utf8               org/apache/commons/compress/archivers/ArchiveEntry\n-  #526 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #527 = Utf8               java/util/Map\n-  #528 = Utf8               append\n-  #529 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #530 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #531 = Utf8               toString\n-  #532 = Utf8               ()Ljava/lang/String;\n-  #533 = Utf8               (Ljava/lang/String;)V\n-  #534 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #535 = Utf8               getZipEncoding\n-  #536 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #537 = Utf8               java/nio/file/attribute/FileTime\n-  #538 = Utf8               toInstant\n-  #539 = Utf8               ()Ljava/time/Instant;\n-  #540 = Utf8               getEpochSecond\n-  #541 = Utf8               getNano\n-  #542 = Utf8               valueOf\n-  #543 = Utf8               (J)Ljava/lang/String;\n-  #544 = Utf8               put\n-  #545 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #546 = Utf8               java/math/BigDecimal\n-  #547 = Utf8               (J)Ljava/math/BigDecimal;\n-  #548 = Utf8               movePointLeft\n-  #549 = Utf8               (I)Ljava/math/BigDecimal;\n-  #550 = Utf8               java/math/RoundingMode\n-  #551 = Utf8               DOWN\n-  #552 = Utf8               Ljava/math/RoundingMode;\n-  #553 = Utf8               setScale\n-  #554 = Utf8               (ILjava/math/RoundingMode;)Ljava/math/BigDecimal;\n-  #555 = Utf8               add\n-  #556 = Utf8               (Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n-  #557 = Utf8               toPlainString\n-  #558 = Utf8               getSize\n-  #559 = Utf8               getLongGroupId\n-  #560 = Utf8               getLastModifiedTime\n-  #561 = Utf8               ()Ljava/nio/file/attribute/FileTime;\n-  #562 = Utf8               getLastAccessTime\n-  #563 = Utf8               getStatusChangeTime\n-  #564 = Utf8               getCreationTime\n-  #565 = Utf8               getLongUserId\n-  #566 = Utf8               getDevMajor\n-  #567 = Utf8               getDevMinor\n-  #568 = Utf8               getMode\n-  #569 = Utf8               flushBlock\n-  #570 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #571 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n-  #572 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n-  #573 = Methodref          #631.#632     // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #574 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)V\n-  #575 = Methodref          #1.#633       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.lambda$encodeExtendedPaxHeadersContents$0:(Ljava/io/StringWriter;Ljava/lang/String;Ljava/lang/String;)V\n-  #576 = Utf8               (Ljava/lang/String;Ljava/lang/String;)V\n-  #577 = Utf8               accept\n-  #578 = Utf8               (Ljava/io/StringWriter;)Ljava/util/function/BiConsumer;\n-  #579 = Utf8               forEach\n-  #580 = Utf8               (Ljava/util/function/BiConsumer;)V\n-  #581 = Utf8               java/nio/charset/StandardCharsets\n-  #582 = Utf8               UTF_8\n-  #583 = Utf8               Ljava/nio/charset/Charset;\n-  #584 = Utf8               getBytes\n-  #585 = Utf8               (Ljava/nio/charset/Charset;)[B\n-  #586 = Utf8               org/apache/commons/compress/utils/TimeUtils\n-  #587 = Utf8               toUnixTime\n-  #588 = Utf8               (Ljava/nio/file/attribute/FileTime;)J\n-  #589 = Utf8               encode\n-  #590 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-  #591 = Utf8               limit\n-  #592 = Utf8               position\n-  #593 = Utf8               (Ljava/lang/String;B)V\n-  #594 = Utf8               setSize\n-  #595 = Utf8               (J)V\n-  #596 = Utf8               array\n-  #597 = Utf8               ()[B\n-  #598 = Utf8               arrayOffset\n-  #599 = Utf8               java/lang/Math\n-  #600 = Utf8               toIntExact\n-  #601 = Utf8               (J)I\n-  #602 = Utf8               isGlobalPaxHeader\n-  #603 = Utf8               ()Z\n-  #604 = Utf8               getExtraPaxHeaders\n-  #605 = Utf8               ()Ljava/util/Map;\n-  #606 = Utf8               writeEntryHeader\n-  #607 = Utf8               ([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n-  #608 = Utf8               getName\n-  #609 = Utf8               getLinkName\n-  #610 = Utf8               isEmpty\n-  #611 = Utf8               canEncode\n-  #612 = Utf8               (Ljava/lang/String;)Z\n-  #613 = Utf8               isLink\n-  #614 = Utf8               isSymbolicLink\n-  #615 = Utf8               putAll\n-  #616 = Utf8               (Ljava/util/Map;)V\n-  #617 = Utf8               isDirectory\n-  #618 = Utf8               length\n-  #619 = Utf8               charAt\n-  #620 = Utf8               (I)C\n-  #621 = Utf8               (C)Ljava/lang/StringBuilder;\n-  #622 = Utf8               unixTimeToFileTime\n-  #623 = Utf8               (J)Ljava/nio/file/attribute/FileTime;\n-  #624 = Utf8               setLastModifiedTime\n-  #625 = Utf8               (Ljava/nio/file/attribute/FileTime;)V\n-  #626 = Utf8               java/util/Arrays\n-  #627 = Utf8               fill\n-  #628 = Utf8               ([BB)V\n-  #629 = Utf8               substring\n-  #630 = Utf8               (II)Ljava/lang/String;\n-  #631 = Class              #634          // java/lang/invoke/LambdaMetafactory\n-  #632 = NameAndType        #635:#639     // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #633 = NameAndType        #323:#324     // lambda$encodeExtendedPaxHeadersContents$0:(Ljava/io/StringWriter;Ljava/lang/String;Ljava/lang/String;)V\n-  #634 = Utf8               java/lang/invoke/LambdaMetafactory\n-  #635 = Utf8               metafactory\n-  #636 = Class              #641          // java/lang/invoke/MethodHandles$Lookup\n-  #637 = Utf8               Lookup\n-  #638 = Utf8               InnerClasses\n-  #639 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #640 = Class              #642          // java/lang/invoke/MethodHandles\n-  #641 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #642 = Utf8               java/lang/invoke/MethodHandles\n+  #245 = Class              #512          // java/io/OutputStream\n+  #246 = Class              #513          // java/lang/String\n+  #247 = Utf8               (Ljava/io/OutputStream;ILjava/lang/String;)V\n+  #248 = Utf8               (Ljava/io/OutputStream;Ljava/lang/String;)V\n+  #249 = Utf8               addFileTimePaxHeader\n+  #250 = Utf8               (Ljava/util/Map;Ljava/lang/String;Ljava/nio/file/attribute/FileTime;)V\n+  #251 = Class              #514          // java/time/Instant\n+  #252 = Utf8               Signature\n+  #253 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;Ljava/nio/file/attribute/FileTime;)V\n+  #254 = Utf8               addFileTimePaxHeaderForBigNumber\n+  #255 = Utf8               (Ljava/util/Map;Ljava/lang/String;Ljava/nio/file/attribute/FileTime;J)V\n+  #256 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;Ljava/nio/file/attribute/FileTime;J)V\n+  #257 = Utf8               addInstantPaxHeader\n+  #258 = Utf8               (Ljava/util/Map;Ljava/lang/String;JI)V\n+  #259 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;JI)V\n+  #260 = Utf8               addPaxHeaderForBigNumber\n+  #261 = Utf8               (Ljava/util/Map;Ljava/lang/String;JJ)V\n+  #262 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;JJ)V\n+  #263 = Utf8               addPaxHeadersForBigNumbers\n+  #264 = Utf8               (Ljava/util/Map;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+  #265 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+  #266 = Utf8               close\n+  #267 = Utf8               ()V\n+  #268 = Class              #515          // java/lang/Throwable\n+  #269 = Utf8               Exceptions\n+  #270 = Utf8               closeArchiveEntry\n+  #271 = Utf8               createArchiveEntry\n+  #272 = Utf8               (Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+  #273 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+  #274 = Utf8               encodeExtendedPaxHeadersContents\n+  #275 = Utf8               (Ljava/util/Map;)[B\n+  #276 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)[B\n+  #277 = Utf8               failForBigNumber\n+  #278 = Utf8               (Ljava/lang/String;JJ)V\n+  #279 = Utf8               (Ljava/lang/String;JJLjava/lang/String;)V\n+  #280 = Utf8               failForBigNumbers\n+  #281 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+  #282 = Utf8               failForBigNumberWithPosixMessage\n+  #283 = Utf8               finish\n+  #284 = Utf8               flush\n+  #285 = Utf8               getBytesWritten\n+  #286 = Utf8               ()J\n+  #287 = Utf8               getCount\n+  #288 = Utf8               ()I\n+  #289 = Utf8               getRecordSize\n+  #290 = Utf8               handleLongName\n+  #291 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;BLjava/lang/String;)Z\n+  #292 = Class              #516          // java/nio/ByteBuffer\n+  #293 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;BLjava/lang/String;)Z\n+  #294 = Utf8               padAsNeeded\n+  #295 = Utf8               putArchiveEntry\n+  #296 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n+  #297 = Class              #517          // org/apache/commons/compress/archivers/ArchiveEntry\n+  #298 = Class              #218          // \"[B\"\n+  #299 = Class              #518          // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #300 = Class              #519          // java/util/Map\n+  #301 = Utf8               setAddPaxHeadersForNonAsciiNames\n+  #302 = Utf8               (Z)V\n+  #303 = Utf8               setBigNumberMode\n+  #304 = Utf8               (I)V\n+  #305 = Utf8               setLongFileMode\n+  #306 = Utf8               shouldBeReplaced\n+  #307 = Utf8               (C)Z\n+  #308 = Utf8               stripTo7Bits\n+  #309 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #310 = Utf8               transferModTime\n+  #311 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+  #312 = Utf8               write\n+  #313 = Utf8               ([BII)V\n+  #314 = Utf8               writeEOFRecord\n+  #315 = Utf8               writePaxHeaders\n+  #316 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;)V\n+  #317 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n+  #318 = Utf8               writeRecord\n+  #319 = Utf8               ([B)V\n+  #320 = Utf8               lambda$encodeExtendedPaxHeadersContents$0\n+  #321 = Utf8               (Ljava/io/StringWriter;Ljava/lang/String;Ljava/lang/String;)V\n+  #322 = Utf8               <clinit>\n+  #323 = Utf8               SourceFile\n+  #324 = Utf8               TarArchiveOutputStream.java\n+  #325 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveOutputStream\n+  #326 = NameAndType        #234:#238     // \"<init>\":(Ljava/io/OutputStream;I)V\n+  #327 = NameAndType        #234:#247     // \"<init>\":(Ljava/io/OutputStream;ILjava/lang/String;)V\n+  #328 = NameAndType        #234:#243     // \"<init>\":(Ljava/io/OutputStream;IILjava/lang/String;)V\n+  #329 = Utf8               java/lang/IllegalArgumentException\n+  #330 = Utf8               java/lang/StringBuilder\n+  #331 = NameAndType        #234:#267     // \"<init>\":()V\n+  #332 = Utf8               Tar record size must always be 512 bytes. Attempt to set size of\n+  #333 = NameAndType        #520:#521     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #334 = NameAndType        #520:#522     // append:(I)Ljava/lang/StringBuilder;\n+  #335 = NameAndType        #523:#524     // toString:()Ljava/lang/String;\n+  #336 = NameAndType        #234:#525     // \"<init>\":(Ljava/lang/String;)V\n+  #337 = NameAndType        #219:#194     // longFileMode:I\n+  #338 = NameAndType        #220:#194     // bigNumberMode:I\n+  #339 = Utf8               Block size must be a multiple of 512 bytes. Attempt to use set size of\n+  #340 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n+  #341 = Utf8               org/apache/commons/compress/utils/CountingOutputStream\n+  #342 = NameAndType        #234:#235     // \"<init>\":(Ljava/io/OutputStream;)V\n+  #343 = NameAndType        #229:#230     // countingOut:Lorg/apache/commons/compress/utils/CountingOutputStream;\n+  #344 = NameAndType        #227:#228     // out:Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream;\n+  #345 = NameAndType        #232:#215     // encoding:Ljava/lang/String;\n+  #346 = Class              #526          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #347 = NameAndType        #527:#528     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #348 = NameAndType        #231:#209     // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #349 = NameAndType        #217:#218     // recordBuf:[B\n+  #350 = NameAndType        #222:#194     // recordsPerBlock:I\n+  #351 = Class              #529          // java/nio/file/attribute/FileTime\n+  #352 = NameAndType        #530:#531     // toInstant:()Ljava/time/Instant;\n+  #353 = NameAndType        #532:#286     // getEpochSecond:()J\n+  #354 = NameAndType        #533:#288     // getNano:()I\n+  #355 = NameAndType        #534:#535     // valueOf:(J)Ljava/lang/String;\n+  #356 = NameAndType        #536:#537     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #357 = NameAndType        #257:#258     // addInstantPaxHeader:(Ljava/util/Map;Ljava/lang/String;JI)V\n+  #358 = NameAndType        #260:#261     // addPaxHeaderForBigNumber:(Ljava/util/Map;Ljava/lang/String;JJ)V\n+  #359 = Class              #538          // java/math/BigDecimal\n+  #360 = NameAndType        #534:#539     // valueOf:(J)Ljava/math/BigDecimal;\n+  #361 = NameAndType        #540:#541     // movePointLeft:(I)Ljava/math/BigDecimal;\n+  #362 = Class              #542          // java/math/RoundingMode\n+  #363 = NameAndType        #543:#544     // DOWN:Ljava/math/RoundingMode;\n+  #364 = NameAndType        #545:#546     // setScale:(ILjava/math/RoundingMode;)Ljava/math/BigDecimal;\n+  #365 = NameAndType        #547:#548     // add:(Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+  #366 = NameAndType        #549:#524     // toPlainString:()Ljava/lang/String;\n+  #367 = Utf8               size\n+  #368 = NameAndType        #550:#286     // getSize:()J\n+  #369 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n+  #370 = Utf8               gid\n+  #371 = NameAndType        #551:#286     // getLongGroupId:()J\n+  #372 = Utf8               mtime\n+  #373 = NameAndType        #552:#553     // getLastModifiedTime:()Ljava/nio/file/attribute/FileTime;\n+  #374 = NameAndType        #254:#255     // addFileTimePaxHeaderForBigNumber:(Ljava/util/Map;Ljava/lang/String;Ljava/nio/file/attribute/FileTime;J)V\n+  #375 = Utf8               atime\n+  #376 = NameAndType        #554:#553     // getLastAccessTime:()Ljava/nio/file/attribute/FileTime;\n+  #377 = NameAndType        #249:#250     // addFileTimePaxHeader:(Ljava/util/Map;Ljava/lang/String;Ljava/nio/file/attribute/FileTime;)V\n+  #378 = NameAndType        #555:#553     // getStatusChangeTime:()Ljava/nio/file/attribute/FileTime;\n+  #379 = Utf8               ctime\n+  #380 = NameAndType        #556:#553     // getCreationTime:()Ljava/nio/file/attribute/FileTime;\n+  #381 = Utf8               uid\n+  #382 = NameAndType        #557:#286     // getLongUserId:()J\n+  #383 = Utf8               LIBARCHIVE.creationtime\n+  #384 = Utf8               SCHILY.devmajor\n+  #385 = NameAndType        #558:#288     // getDevMajor:()I\n+  #386 = Utf8               SCHILY.devminor\n+  #387 = NameAndType        #559:#288     // getDevMinor:()I\n+  #388 = Utf8               mode\n+  #389 = NameAndType        #560:#288     // getMode:()I\n+  #390 = NameAndType        #277:#278     // failForBigNumber:(Ljava/lang/String;JJ)V\n+  #391 = NameAndType        #226:#224     // finished:Z\n+  #392 = NameAndType        #283:#267     // finish:()V\n+  #393 = NameAndType        #223:#224     // closed:Z\n+  #394 = NameAndType        #266:#267     // close:()V\n+  #395 = Utf8               java/io/IOException\n+  #396 = Utf8               Stream has already been finished\n+  #397 = NameAndType        #225:#224     // haveUnclosedEntry:Z\n+  #398 = Utf8               No current entry to close\n+  #399 = NameAndType        #561:#267     // flushBlock:()V\n+  #400 = NameAndType        #216:#213     // currBytes:J\n+  #401 = NameAndType        #212:#213     // currSize:J\n+  #402 = Utf8               Entry \\'\n+  #403 = NameAndType        #214:#215     // currName:Ljava/lang/String;\n+  #404 = Utf8               \\' closed at \\'\n+  #405 = NameAndType        #520:#562     // append:(J)Ljava/lang/StringBuilder;\n+  #406 = Utf8               \\' before the \\'\n+  #407 = Utf8               \\' bytes specified in the header were written\n+  #408 = NameAndType        #221:#213     // recordsWritten:J\n+  #409 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+  #410 = NameAndType        #234:#563     // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+  #411 = NameAndType        #234:#564     // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n+  #412 = Utf8               java/io/StringWriter\n+  #413 = Utf8               BootstrapMethods\n+  #414 = MethodHandle       6:#565        // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #415 = MethodType         #566          //  (Ljava/lang/Object;Ljava/lang/Object;)V\n+  #416 = MethodHandle       6:#567        // REF_invokeStatic org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.lambda$encodeExtendedPaxHeadersContents$0:(Ljava/io/StringWriter;Ljava/lang/String;Ljava/lang/String;)V\n+  #417 = MethodType         #568          //  (Ljava/lang/String;Ljava/lang/String;)V\n+  #418 = NameAndType        #569:#570     // accept:(Ljava/io/StringWriter;)Ljava/util/function/BiConsumer;\n+  #419 = NameAndType        #571:#572     // forEach:(Ljava/util/function/BiConsumer;)V\n+  #420 = Class              #573          // java/nio/charset/StandardCharsets\n+  #421 = NameAndType        #574:#575     // UTF_8:Ljava/nio/charset/Charset;\n+  #422 = NameAndType        #576:#577     // getBytes:(Ljava/nio/charset/Charset;)[B\n+  #423 = Utf8\n+  #424 = NameAndType        #277:#279     // failForBigNumber:(Ljava/lang/String;JJLjava/lang/String;)V\n+  #425 = Utf8                \\'\n+  #426 = Utf8               \\' is too big ( >\n+  #427 = Utf8                ).\n+  #428 = Utf8               entry size\n+  #429 = Utf8               group id\n+  #430 = NameAndType        #282:#278     // failForBigNumberWithPosixMessage:(Ljava/lang/String;JJ)V\n+  #431 = Utf8               last modification time\n+  #432 = Class              #578          // org/apache/commons/compress/utils/TimeUtils\n+  #433 = NameAndType        #579:#580     // toUnixTime:(Ljava/nio/file/attribute/FileTime;)J\n+  #434 = Utf8               user id\n+  #435 = Utf8               major device number\n+  #436 = Utf8               minor device number\n+  #437 = Utf8                Use STAR or POSIX extensions to overcome this limit\n+  #438 = Utf8               This archive has already been finished\n+  #439 = Utf8               This archive contains unclosed entries.\n+  #440 = NameAndType        #314:#267     // writeEOFRecord:()V\n+  #441 = NameAndType        #294:#267     // padAsNeeded:()V\n+  #442 = NameAndType        #284:#267     // flush:()V\n+  #443 = NameAndType        #285:#286     // getBytesWritten:()J\n+  #444 = NameAndType        #581:#582     // encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #445 = NameAndType        #583:#288     // limit:()I\n+  #446 = NameAndType        #584:#288     // position:()I\n+  #447 = Utf8               ././@LongLink\n+  #448 = NameAndType        #234:#585     // \"<init>\":(Ljava/lang/String;B)V\n+  #449 = NameAndType        #586:#587     // setSize:(J)V\n+  #450 = NameAndType        #310:#311     // transferModTime:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+  #451 = NameAndType        #295:#296     // putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n+  #452 = NameAndType        #588:#589     // array:()[B\n+  #453 = NameAndType        #590:#288     // arrayOffset:()I\n+  #454 = NameAndType        #312:#313     // write:([BII)V\n+  #455 = NameAndType        #312:#304     // write:(I)V\n+  #456 = NameAndType        #270:#267     // closeArchiveEntry:()V\n+  #457 = Utf8               \\' is too long ( >\n+  #458 = Utf8                bytes)\n+  #459 = Class              #591          // java/lang/Math\n+  #460 = NameAndType        #592:#593     // toIntExact:(J)I\n+  #461 = NameAndType        #594:#595     // isGlobalPaxHeader:()Z\n+  #462 = NameAndType        #596:#597     // getExtraPaxHeaders:()Ljava/util/Map;\n+  #463 = NameAndType        #274:#275     // encodeExtendedPaxHeadersContents:(Ljava/util/Map;)[B\n+  #464 = NameAndType        #598:#599     // writeEntryHeader:([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n+  #465 = NameAndType        #318:#319     // writeRecord:([B)V\n+  #466 = NameAndType        #312:#319     // write:([B)V\n+  #467 = Utf8               java/util/HashMap\n+  #468 = NameAndType        #600:#524     // getName:()Ljava/lang/String;\n+  #469 = Utf8               path\n+  #470 = Utf8               file name\n+  #471 = NameAndType        #290:#291     // handleLongName:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;BLjava/lang/String;)Z\n+  #472 = NameAndType        #601:#524     // getLinkName:()Ljava/lang/String;\n+  #473 = NameAndType        #602:#595     // isEmpty:()Z\n+  #474 = Utf8               linkpath\n+  #475 = Utf8               link name\n+  #476 = NameAndType        #263:#264     // addPaxHeadersForBigNumbers:(Ljava/util/Map;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+  #477 = NameAndType        #280:#281     // failForBigNumbers:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+  #478 = NameAndType        #233:#224     // addPaxHeadersForNonAsciiNames:Z\n+  #479 = NameAndType        #208:#209     // ASCII:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #480 = NameAndType        #603:#604     // canEncode:(Ljava/lang/String;)Z\n+  #481 = NameAndType        #605:#595     // isLink:()Z\n+  #482 = NameAndType        #606:#595     // isSymbolicLink:()Z\n+  #483 = NameAndType        #607:#608     // putAll:(Ljava/util/Map;)V\n+  #484 = NameAndType        #315:#316     // writePaxHeaders:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;)V\n+  #485 = NameAndType        #609:#595     // isDirectory:()Z\n+  #486 = NameAndType        #610:#288     // length:()I\n+  #487 = NameAndType        #234:#304     // \"<init>\":(I)V\n+  #488 = NameAndType        #611:#612     // charAt:(I)C\n+  #489 = NameAndType        #306:#307     // shouldBeReplaced:(C)Z\n+  #490 = Utf8               _\n+  #491 = NameAndType        #520:#613     // append:(C)Ljava/lang/StringBuilder;\n+  #492 = NameAndType        #614:#615     // unixTimeToFileTime:(J)Ljava/nio/file/attribute/FileTime;\n+  #493 = NameAndType        #616:#617     // setLastModifiedTime:(Ljava/nio/file/attribute/FileTime;)V\n+  #494 = Utf8               java/lang/IllegalStateException\n+  #495 = Utf8               No current tar entry\n+  #496 = Utf8               Request to write \\'\n+  #497 = Utf8               \\' bytes exceeds size in header of \\'\n+  #498 = Utf8               \\' bytes for entry \\'\n+  #499 = Utf8               \\'\n+  #500 = Class              #618          // java/util/Arrays\n+  #501 = NameAndType        #619:#620     // fill:([BB)V\n+  #502 = Utf8               ./PaxHeaders.X/\n+  #503 = NameAndType        #308:#309     // stripTo7Bits:(Ljava/lang/String;)Ljava/lang/String;\n+  #504 = NameAndType        #621:#622     // substring:(II)Ljava/lang/String;\n+  #505 = Utf8               Record to write has length \\'\n+  #506 = Utf8               \\' which is not the record size of \\'\n+  #507 = Utf8\n+  #508 = Utf8               =\n+  #509 = Utf8               \\n\n+  #510 = NameAndType        #312:#525     // write:(Ljava/lang/String;)V\n+  #511 = Utf8               org/apache/commons/compress/archivers/ArchiveOutputStream\n+  #512 = Utf8               java/io/OutputStream\n+  #513 = Utf8               java/lang/String\n+  #514 = Utf8               java/time/Instant\n+  #515 = Utf8               java/lang/Throwable\n+  #516 = Utf8               java/nio/ByteBuffer\n+  #517 = Utf8               org/apache/commons/compress/archivers/ArchiveEntry\n+  #518 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #519 = Utf8               java/util/Map\n+  #520 = Utf8               append\n+  #521 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #522 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #523 = Utf8               toString\n+  #524 = Utf8               ()Ljava/lang/String;\n+  #525 = Utf8               (Ljava/lang/String;)V\n+  #526 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #527 = Utf8               getZipEncoding\n+  #528 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #529 = Utf8               java/nio/file/attribute/FileTime\n+  #530 = Utf8               toInstant\n+  #531 = Utf8               ()Ljava/time/Instant;\n+  #532 = Utf8               getEpochSecond\n+  #533 = Utf8               getNano\n+  #534 = Utf8               valueOf\n+  #535 = Utf8               (J)Ljava/lang/String;\n+  #536 = Utf8               put\n+  #537 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #538 = Utf8               java/math/BigDecimal\n+  #539 = Utf8               (J)Ljava/math/BigDecimal;\n+  #540 = Utf8               movePointLeft\n+  #541 = Utf8               (I)Ljava/math/BigDecimal;\n+  #542 = Utf8               java/math/RoundingMode\n+  #543 = Utf8               DOWN\n+  #544 = Utf8               Ljava/math/RoundingMode;\n+  #545 = Utf8               setScale\n+  #546 = Utf8               (ILjava/math/RoundingMode;)Ljava/math/BigDecimal;\n+  #547 = Utf8               add\n+  #548 = Utf8               (Ljava/math/BigDecimal;)Ljava/math/BigDecimal;\n+  #549 = Utf8               toPlainString\n+  #550 = Utf8               getSize\n+  #551 = Utf8               getLongGroupId\n+  #552 = Utf8               getLastModifiedTime\n+  #553 = Utf8               ()Ljava/nio/file/attribute/FileTime;\n+  #554 = Utf8               getLastAccessTime\n+  #555 = Utf8               getStatusChangeTime\n+  #556 = Utf8               getCreationTime\n+  #557 = Utf8               getLongUserId\n+  #558 = Utf8               getDevMajor\n+  #559 = Utf8               getDevMinor\n+  #560 = Utf8               getMode\n+  #561 = Utf8               flushBlock\n+  #562 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #563 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n+  #564 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n+  #565 = Methodref          #623.#624     // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #566 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)V\n+  #567 = Methodref          #1.#625       // org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.lambda$encodeExtendedPaxHeadersContents$0:(Ljava/io/StringWriter;Ljava/lang/String;Ljava/lang/String;)V\n+  #568 = Utf8               (Ljava/lang/String;Ljava/lang/String;)V\n+  #569 = Utf8               accept\n+  #570 = Utf8               (Ljava/io/StringWriter;)Ljava/util/function/BiConsumer;\n+  #571 = Utf8               forEach\n+  #572 = Utf8               (Ljava/util/function/BiConsumer;)V\n+  #573 = Utf8               java/nio/charset/StandardCharsets\n+  #574 = Utf8               UTF_8\n+  #575 = Utf8               Ljava/nio/charset/Charset;\n+  #576 = Utf8               getBytes\n+  #577 = Utf8               (Ljava/nio/charset/Charset;)[B\n+  #578 = Utf8               org/apache/commons/compress/utils/TimeUtils\n+  #579 = Utf8               toUnixTime\n+  #580 = Utf8               (Ljava/nio/file/attribute/FileTime;)J\n+  #581 = Utf8               encode\n+  #582 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #583 = Utf8               limit\n+  #584 = Utf8               position\n+  #585 = Utf8               (Ljava/lang/String;B)V\n+  #586 = Utf8               setSize\n+  #587 = Utf8               (J)V\n+  #588 = Utf8               array\n+  #589 = Utf8               ()[B\n+  #590 = Utf8               arrayOffset\n+  #591 = Utf8               java/lang/Math\n+  #592 = Utf8               toIntExact\n+  #593 = Utf8               (J)I\n+  #594 = Utf8               isGlobalPaxHeader\n+  #595 = Utf8               ()Z\n+  #596 = Utf8               getExtraPaxHeaders\n+  #597 = Utf8               ()Ljava/util/Map;\n+  #598 = Utf8               writeEntryHeader\n+  #599 = Utf8               ([BLorg/apache/commons/compress/archivers/zip/ZipEncoding;Z)V\n+  #600 = Utf8               getName\n+  #601 = Utf8               getLinkName\n+  #602 = Utf8               isEmpty\n+  #603 = Utf8               canEncode\n+  #604 = Utf8               (Ljava/lang/String;)Z\n+  #605 = Utf8               isLink\n+  #606 = Utf8               isSymbolicLink\n+  #607 = Utf8               putAll\n+  #608 = Utf8               (Ljava/util/Map;)V\n+  #609 = Utf8               isDirectory\n+  #610 = Utf8               length\n+  #611 = Utf8               charAt\n+  #612 = Utf8               (I)C\n+  #613 = Utf8               (C)Ljava/lang/StringBuilder;\n+  #614 = Utf8               unixTimeToFileTime\n+  #615 = Utf8               (J)Ljava/nio/file/attribute/FileTime;\n+  #616 = Utf8               setLastModifiedTime\n+  #617 = Utf8               (Ljava/nio/file/attribute/FileTime;)V\n+  #618 = Utf8               java/util/Arrays\n+  #619 = Utf8               fill\n+  #620 = Utf8               ([BB)V\n+  #621 = Utf8               substring\n+  #622 = Utf8               (II)Ljava/lang/String;\n+  #623 = Class              #626          // java/lang/invoke/LambdaMetafactory\n+  #624 = NameAndType        #627:#631     // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #625 = NameAndType        #320:#321     // lambda$encodeExtendedPaxHeadersContents$0:(Ljava/io/StringWriter;Ljava/lang/String;Ljava/lang/String;)V\n+  #626 = Utf8               java/lang/invoke/LambdaMetafactory\n+  #627 = Utf8               metafactory\n+  #628 = Class              #633          // java/lang/invoke/MethodHandles$Lookup\n+  #629 = Utf8               Lookup\n+  #630 = Utf8               InnerClasses\n+  #631 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #632 = Class              #634          // java/lang/invoke/MethodHandles\n+  #633 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #634 = Utf8               java/lang/invoke/MethodHandles\n {\n   public static final int LONGFILE_ERROR = 0;\n     descriptor: I\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 0\n \n   public static final int LONGFILE_TRUNCATE = 1;\n@@ -1004,15 +996,15 @@\n         line 248: 55\n       StackMapTable: number_of_entries = 2\n         frame_type = 254 /* append */\n           offset_delta = 45\n           locals = [ class java/time/Instant, long, int ]\n         frame_type = 248 /* chop */\n           offset_delta = 9\n-    Signature: #254                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;Ljava/nio/file/attribute/FileTime;)V\n+    Signature: #253                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;Ljava/nio/file/attribute/FileTime;)V\n \n   private void addFileTimePaxHeaderForBigNumber(java.util.Map<java.lang.String, java.lang.String>, java.lang.String, java.nio.file.attribute.FileTime, long);\n     descriptor: (Ljava/util/Map;Ljava/lang/String;Ljava/nio/file/attribute/FileTime;J)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=7, locals=10, args_size=5\n          0: aload_3\n@@ -1053,15 +1045,15 @@\n         line 263: 52\n       StackMapTable: number_of_entries = 2\n         frame_type = 254 /* append */\n           offset_delta = 42\n           locals = [ class java/time/Instant, long, int ]\n         frame_type = 248 /* chop */\n           offset_delta = 9\n-    Signature: #257                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;Ljava/nio/file/attribute/FileTime;J)V\n+    Signature: #256                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;Ljava/nio/file/attribute/FileTime;J)V\n \n   private void addInstantPaxHeader(java.util.Map<java.lang.String, java.lang.String>, java.lang.String, long, int);\n     descriptor: (Ljava/util/Map;Ljava/lang/String;JI)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=9, args_size=5\n          0: lload_3\n@@ -1089,15 +1081,15 @@\n         49: return\n       LineNumberTable:\n         line 267: 0\n         line 268: 6\n         line 269: 27\n         line 270: 36\n         line 271: 49\n-    Signature: #260                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;JI)V\n+    Signature: #259                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;JI)V\n \n   private void addPaxHeaderForBigNumber(java.util.Map<java.lang.String, java.lang.String>, java.lang.String, long, long);\n     descriptor: (Ljava/util/Map;Ljava/lang/String;JJ)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=7, args_size=5\n          0: lload_3\n@@ -1118,15 +1110,15 @@\n       LineNumberTable:\n         line 276: 0\n         line 277: 13\n         line 279: 25\n       StackMapTable: number_of_entries = 2\n         frame_type = 13 /* same */\n         frame_type = 11 /* same */\n-    Signature: #263                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;JJ)V\n+    Signature: #262                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;JJ)V\n \n   private void addPaxHeadersForBigNumbers(java.util.Map<java.lang.String, java.lang.String>, org.apache.commons.compress.archivers.tar.TarArchiveEntry);\n     descriptor: (Ljava/util/Map;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=7, locals=3, args_size=3\n          0: aload_0\n@@ -1229,15 +1221,15 @@\n         line 303: 137\n         line 306: 140\n         line 307: 154\n       StackMapTable: number_of_entries = 2\n         frame_type = 251 /* same_frame_extended */\n           offset_delta = 74\n         frame_type = 10 /* same */\n-    Signature: #266                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n+    Signature: #265                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=1\n          0: aload_0\n@@ -1472,15 +1464,15 @@\n         24: getstatic     #98                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;\n         27: invokevirtual #99                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n         30: areturn\n       LineNumberTable:\n         line 377: 0\n         line 378: 8\n         line 396: 20\n-    Signature: #277                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)[B\n+    Signature: #276                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)[B\n \n   private void failForBigNumber(java.lang.String, long, long);\n     descriptor: (Ljava/lang/String;JJ)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=7, locals=6, args_size=4\n          0: aload_0\n@@ -1841,15 +1833,15 @@\n           offset_delta = 52\n           locals = [ class java/nio/ByteBuffer, int ]\n         frame_type = 251 /* same_frame_extended */\n           offset_delta = 71\n         frame_type = 54 /* same */\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #294                         // (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;BLjava/lang/String;)Z\n+    Signature: #293                         // (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;BLjava/lang/String;)Z\n \n   private void padAsNeeded() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=3, args_size=1\n          0: aload_0\n@@ -2503,15 +2495,15 @@\n         line 747: 97\n       StackMapTable: number_of_entries = 1\n         frame_type = 252 /* append */\n           offset_delta = 45\n           locals = [ class java/lang/String ]\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #320                         // (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n+    Signature: #317                         // (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V\n \n   private void writeRecord(byte[]) throws java.io.IOException;\n     descriptor: ([B)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=2, args_size=2\n          0: aload_1\n@@ -2656,14 +2648,14 @@\n       LineNumberTable:\n         line 100: 0\n         line 101: 2\n         line 100: 8\n }\n SourceFile: \"TarArchiveOutputStream.java\"\n InnerClasses:\n-  public static final #637= #636 of #640; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n+  public static final #629= #628 of #632; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #420 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  0: #414 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #421 (Ljava/lang/Object;Ljava/lang/Object;)V\n-      #422 REF_invokeStatic org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.lambda$encodeExtendedPaxHeadersContents$0:(Ljava/io/StringWriter;Ljava/lang/String;Ljava/lang/String;)V\n-      #423 (Ljava/lang/String;Ljava/lang/String;)V\n+      #415 (Ljava/lang/Object;Ljava/lang/Object;)V\n+      #416 REF_invokeStatic org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.lambda$encodeExtendedPaxHeadersContents$0:(Ljava/io/StringWriter;Ljava/lang/String;Ljava/lang/String;)V\n+      #417 (Ljava/lang/String;Ljava/lang/String;)V\n"}]}
