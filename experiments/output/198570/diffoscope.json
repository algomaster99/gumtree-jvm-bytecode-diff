{"diffoscope-json-version": 1, "source1": "first/LocalVariableTypeTable.class", "source2": "second/LocalVariableTypeTable.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,79 +5,80 @@\n import java.io.IOException;\n import java.io.DataInput;\n \n public class LocalVariableTypeTable extends Attribute\n {\n     private LocalVariable[] local_variable_type_table;\n     \n-    public LocalVariableTypeTable(final LocalVariableTypeTable c) {\n-        this(c.getNameIndex(), c.getLength(), c.getLocalVariableTypeTable(), c.getConstantPool());\n+    public LocalVariableTypeTable(final LocalVariableTypeTable localVariableTypeTable) {\n+        this(localVariableTypeTable.getNameIndex(), localVariableTypeTable.getLength(), localVariableTypeTable.getLocalVariableTypeTable(), localVariableTypeTable.getConstantPool());\n     }\n     \n-    public LocalVariableTypeTable(final int name_index, final int length, final LocalVariable[] local_variable_table, final ConstantPool constant_pool) {\n-        super((byte)17, name_index, length, constant_pool);\n-        this.local_variable_type_table = local_variable_table;\n+    public LocalVariableTypeTable(final int n, final int n2, final LocalVariable[] local_variable_type_table, final ConstantPool constantPool) {\n+        super((byte)17, n, n2, constantPool);\n+        this.local_variable_type_table = local_variable_type_table;\n     }\n     \n-    LocalVariableTypeTable(final int nameIdx, final int len, final DataInput input, final ConstantPool cpool) throws IOException {\n-        this(nameIdx, len, (LocalVariable[])null, cpool);\n-        final int local_variable_type_table_length = input.readUnsignedShort();\n-        this.local_variable_type_table = new LocalVariable[local_variable_type_table_length];\n-        for (int i = 0; i < local_variable_type_table_length; ++i) {\n-            this.local_variable_type_table[i] = new LocalVariable(input, cpool);\n+    LocalVariableTypeTable(final int n, final int n2, final DataInput dataInput, final ConstantPool constantPool) throws IOException {\n+        this(n, n2, (LocalVariable[])null, constantPool);\n+        final int unsignedShort = dataInput.readUnsignedShort();\n+        this.local_variable_type_table = new LocalVariable[unsignedShort];\n+        for (int i = 0; i < unsignedShort; ++i) {\n+            this.local_variable_type_table[i] = new LocalVariable(dataInput, constantPool);\n         }\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitLocalVariableTypeTable(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitLocalVariableTypeTable(this);\n     }\n     \n-    public final void dump(final DataOutputStream file) throws IOException {\n-        super.dump(file);\n-        file.writeShort(this.local_variable_type_table.length);\n-        for (final LocalVariable variable : this.local_variable_type_table) {\n-            variable.dump(file);\n+    public final void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        super.dump(dataOutputStream);\n+        dataOutputStream.writeShort(this.local_variable_type_table.length);\n+        final LocalVariable[] local_variable_type_table = this.local_variable_type_table;\n+        for (int length = local_variable_type_table.length, i = 0; i < length; ++i) {\n+            local_variable_type_table[i].dump(dataOutputStream);\n         }\n     }\n     \n     public final LocalVariable[] getLocalVariableTypeTable() {\n         return this.local_variable_type_table;\n     }\n     \n-    public final LocalVariable getLocalVariable(final int index) {\n-        for (final LocalVariable variable : this.local_variable_type_table) {\n-            if (variable.getIndex() == index) {\n-                return variable;\n+    public final LocalVariable getLocalVariable(final int n) {\n+        for (final LocalVariable localVariable : this.local_variable_type_table) {\n+            if (localVariable.getIndex() == n) {\n+                return localVariable;\n             }\n         }\n         return null;\n     }\n     \n-    public final void setLocalVariableTable(final LocalVariable[] local_variable_table) {\n-        this.local_variable_type_table = local_variable_table;\n+    public final void setLocalVariableTable(final LocalVariable[] local_variable_type_table) {\n+        this.local_variable_type_table = local_variable_type_table;\n     }\n     \n     public final String toString() {\n-        final StringBuilder buf = new StringBuilder();\n+        final StringBuilder sb = new StringBuilder();\n         for (int i = 0; i < this.local_variable_type_table.length; ++i) {\n-            buf.append(this.local_variable_type_table[i].toStringShared(true));\n+            sb.append(this.local_variable_type_table[i].toStringShared(true));\n             if (i < this.local_variable_type_table.length - 1) {\n-                buf.append('\\n');\n+                sb.append('\\n');\n             }\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n     \n-    public Attribute copy(final ConstantPool constant_pool) {\n-        final LocalVariableTypeTable c = (LocalVariableTypeTable)this.clone();\n-        c.local_variable_type_table = new LocalVariable[this.local_variable_type_table.length];\n+    public Attribute copy(final ConstantPool constantPool) {\n+        final LocalVariableTypeTable localVariableTypeTable = (LocalVariableTypeTable)this.clone();\n+        localVariableTypeTable.local_variable_type_table = new LocalVariable[this.local_variable_type_table.length];\n         for (int i = 0; i < this.local_variable_type_table.length; ++i) {\n-            c.local_variable_type_table[i] = this.local_variable_type_table[i].copy();\n+            localVariableTypeTable.local_variable_type_table[i] = this.local_variable_type_table[i].copy();\n         }\n-        c.setConstantPool(constant_pool);\n-        return c;\n+        localVariableTypeTable.setConstantPool(constantPool);\n+        return localVariableTypeTable;\n     }\n     \n     public final int getTableLength() {\n         return (this.local_variable_type_table == null) ? 0 : this.local_variable_type_table.length;\n     }\n }\n"}]}
