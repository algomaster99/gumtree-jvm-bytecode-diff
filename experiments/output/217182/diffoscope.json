{"diffoscope-json-version": 1, "source1": "first/ClassLoader.class", "source2": "second/ClassLoader.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,11 +1,10 @@\n \n package org.apache.bcel.util;\n \n-import org.apache.bcel.classfile.ConstantUtf8;\n import org.apache.bcel.classfile.ConstantPool;\n import org.apache.bcel.classfile.ConstantClass;\n import java.io.IOException;\n import java.io.InputStream;\n import org.apache.bcel.classfile.ClassParser;\n import java.io.ByteArrayInputStream;\n import org.apache.bcel.classfile.Utility;\n@@ -41,68 +40,65 @@\n     public ClassLoader(final String[] ignoredPackages) {\n         this.classes = new Hashtable<String, Class<?>>();\n         this.repository = (Repository)SyntheticRepository.getInstance();\n         this.ignoredPackages = ignoredPackages;\n     }\n     \n     protected JavaClass createClass(final String className) {\n-        final int index = className.indexOf(\"$$BCEL$$\");\n-        final String realName = className.substring(index + \"$$BCEL$$\".length());\n-        JavaClass clazz = null;\n+        final String substring = className.substring(className.indexOf(\"$$BCEL$$\") + \"$$BCEL$$\".length());\n+        JavaClass parse;\n         try {\n-            final byte[] bytes = Utility.decode(realName, true);\n-            final ClassParser parser = new ClassParser((InputStream)new ByteArrayInputStream(bytes), \"foo\");\n-            clazz = parser.parse();\n+            parse = new ClassParser((InputStream)new ByteArrayInputStream(Utility.decode(substring, true)), \"foo\").parse();\n         }\n-        catch (final IOException e) {\n-            e.printStackTrace();\n+        catch (final IOException ex) {\n+            ex.printStackTrace();\n             return null;\n         }\n-        final ConstantPool cp = clazz.getConstantPool();\n-        final ConstantClass cl = (ConstantClass)cp.getConstant(clazz.getClassNameIndex(), (byte)7, (Class)ConstantClass.class);\n-        final ConstantUtf8 name = cp.getConstantUtf8(cl.getNameIndex());\n-        name.setBytes(Utility.packageToPath(className));\n-        return clazz;\n+        final ConstantPool constantPool = parse.getConstantPool();\n+        constantPool.getConstantUtf8(((ConstantClass)constantPool.getConstant(parse.getClassNameIndex(), (byte)7, (Class)ConstantClass.class)).getNameIndex()).setBytes(Utility.packageToPath(className));\n+        return parse;\n     }\n     \n     @Override\n     protected Class<?> loadClass(final String className, final boolean resolve) throws ClassNotFoundException {\n-        Class<?> cl = null;\n-        if ((cl = this.classes.get(className)) == null) {\n-            for (final String ignoredPackage : this.ignoredPackages) {\n-                if (className.startsWith(ignoredPackage)) {\n-                    cl = this.getParent().loadClass(className);\n+        Class<?> clazz;\n+        if ((clazz = this.classes.get(className)) == null) {\n+            final String[] ignoredPackages = this.ignoredPackages;\n+            for (int length = ignoredPackages.length, i = 0; i < length; ++i) {\n+                if (className.startsWith(ignoredPackages[i])) {\n+                    clazz = this.getParent().loadClass(className);\n                     break;\n                 }\n             }\n-            if (cl == null) {\n-                JavaClass clazz = null;\n+            if (clazz == null) {\n+                JavaClass javaClass;\n                 if (className.contains(\"$$BCEL$$\")) {\n-                    clazz = this.createClass(className);\n+                    javaClass = this.createClass(className);\n                 }\n                 else {\n-                    if ((clazz = this.repository.loadClass(className)) == null) {\n+                    final JavaClass loadClass;\n+                    if ((loadClass = this.repository.loadClass(className)) == null) {\n                         throw new ClassNotFoundException(className);\n                     }\n-                    clazz = this.modifyClass(clazz);\n+                    javaClass = this.modifyClass(loadClass);\n                 }\n-                if (clazz != null) {\n-                    final byte[] bytes = clazz.getBytes();\n-                    cl = this.defineClass(className, bytes, 0, bytes.length);\n+                if (javaClass != null) {\n+                    final byte[] bytes = javaClass.getBytes();\n+                    clazz = this.defineClass(className, bytes, 0, bytes.length);\n                 }\n                 else {\n-                    cl = Class.forName(className);\n+                    clazz = Class.forName(className);\n                 }\n             }\n             if (resolve) {\n-                this.resolveClass(cl);\n+                this.resolveClass(clazz);\n             }\n         }\n-        this.classes.put(className, cl);\n-        return cl;\n+        this.classes.put(className, clazz);\n+        return clazz;\n     }\n     \n     protected JavaClass modifyClass(final JavaClass clazz) {\n         return clazz;\n     }\n     \n     static {\n"}]}
