{"diffoscope-json-version": 1, "source1": "first/Parameters.class", "source2": "second/Parameters.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -21,28 +21,28 @@\n {\n     private final DefaultParametersManager defaultParametersManager;\n     \n     public Parameters() {\n         this(null);\n     }\n     \n-    public Parameters(final DefaultParametersManager manager) {\n-        this.defaultParametersManager = ((manager != null) ? manager : new DefaultParametersManager());\n+    public Parameters(final DefaultParametersManager defaultParametersManager) {\n+        this.defaultParametersManager = ((defaultParametersManager != null) ? defaultParametersManager : new DefaultParametersManager());\n     }\n     \n     public DefaultParametersManager getDefaultParametersManager() {\n         return this.defaultParametersManager;\n     }\n     \n-    public <T> void registerDefaultsHandler(final Class<T> paramsClass, final DefaultParametersHandler<? super T> handler) {\n-        this.getDefaultParametersManager().registerDefaultsHandler((Class)paramsClass, (DefaultParametersHandler)handler);\n+    public <T> void registerDefaultsHandler(final Class<T> clazz, final DefaultParametersHandler<? super T> defaultParametersHandler) {\n+        this.getDefaultParametersManager().registerDefaultsHandler((Class)clazz, (DefaultParametersHandler)defaultParametersHandler);\n     }\n     \n-    public <T> void registerDefaultsHandler(final Class<T> paramsClass, final DefaultParametersHandler<? super T> handler, final Class<?> startClass) {\n-        this.getDefaultParametersManager().registerDefaultsHandler((Class)paramsClass, (DefaultParametersHandler)handler, (Class)startClass);\n+    public <T> void registerDefaultsHandler(final Class<T> clazz, final DefaultParametersHandler<? super T> defaultParametersHandler, final Class<?> clazz2) {\n+        this.getDefaultParametersManager().registerDefaultsHandler((Class)clazz, (DefaultParametersHandler)defaultParametersHandler, (Class)clazz2);\n     }\n     \n     public BasicBuilderParameters basic() {\n         return new BasicBuilderParameters();\n     }\n     \n     public FileBasedBuilderParameters fileBased() {\n@@ -77,16 +77,16 @@\n         return this.createParametersProxy(new DatabaseBuilderParametersImpl(), DatabaseBuilderParameters.class, (Class<?>[])new Class[0]);\n     }\n     \n     public INIBuilderParameters ini() {\n         return this.createParametersProxy(new INIBuilderParametersImpl(), INIBuilderParameters.class, FileBasedBuilderParameters.class, HierarchicalBuilderParameters.class);\n     }\n     \n-    private <T> T createParametersProxy(final Object target, final Class<T> ifcClass, final Class<?>... superIfcs) {\n-        final Class<?>[] ifcClasses = new Class[1 + superIfcs.length];\n-        ifcClasses[0] = ifcClass;\n-        System.arraycopy(superIfcs, 0, ifcClasses, 1, superIfcs.length);\n-        final Object obj = Proxy.newProxyInstance(Parameters.class.getClassLoader(), ifcClasses, (InvocationHandler)new Parameters.ParametersIfcInvocationHandler(target));\n-        this.getDefaultParametersManager().initializeParameters((BuilderParameters)obj);\n-        return ifcClass.cast(obj);\n+    private <T> T createParametersProxy(final Object o, final Class<T> clazz, final Class<?>... array) {\n+        final Class[] interfaces = new Class[1 + array.length];\n+        interfaces[0] = clazz;\n+        System.arraycopy(array, 0, interfaces, 1, array.length);\n+        final Object proxyInstance = Proxy.newProxyInstance(Parameters.class.getClassLoader(), interfaces, (InvocationHandler)new Parameters.ParametersIfcInvocationHandler(o));\n+        this.getDefaultParametersManager().initializeParameters((BuilderParameters)proxyInstance);\n+        return clazz.cast(proxyInstance);\n     }\n }\n"}]}
