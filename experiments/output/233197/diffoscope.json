{"diffoscope-json-version": 1, "source1": "first/BuilderConfigurationWrapperFactory$BuilderConfigurationWrapperInvocationHandler.class", "source2": "second/BuilderConfigurationWrapperFactory$BuilderConfigurationWrapperInvocationHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,22 +9,22 @@\n import java.lang.reflect.InvocationHandler;\n \n private static class BuilderConfigurationWrapperInvocationHandler implements InvocationHandler\n {\n     private final ConfigurationBuilder<? extends ImmutableConfiguration> builder;\n     private final BuilderConfigurationWrapperFactory.EventSourceSupport eventSourceSupport;\n     \n-    public BuilderConfigurationWrapperInvocationHandler(final ConfigurationBuilder<? extends ImmutableConfiguration> wrappedBuilder, final BuilderConfigurationWrapperFactory.EventSourceSupport evSrcSupport) {\n-        this.builder = wrappedBuilder;\n-        this.eventSourceSupport = evSrcSupport;\n+    public BuilderConfigurationWrapperInvocationHandler(final ConfigurationBuilder<? extends ImmutableConfiguration> builder, final BuilderConfigurationWrapperFactory.EventSourceSupport eventSourceSupport) {\n+        this.builder = builder;\n+        this.eventSourceSupport = eventSourceSupport;\n     }\n     \n     @Override\n-    public Object invoke(final Object proxy, final Method method, final Object[] args) throws ReflectiveOperationException, ConfigurationException {\n-        return EventSource.class.equals(method.getDeclaringClass()) ? this.handleEventSourceInvocation(method, args) : this.handleConfigurationInvocation(method, args);\n+    public Object invoke(final Object o, final Method method, final Object[] array) throws ReflectiveOperationException, ConfigurationException {\n+        return EventSource.class.equals(method.getDeclaringClass()) ? this.handleEventSourceInvocation(method, array) : this.handleConfigurationInvocation(method, array);\n     }\n     \n     private Object handleConfigurationInvocation(final Method method, final Object[] args) throws ReflectiveOperationException, ConfigurationException {\n         return method.invoke(this.builder.getConfiguration(), args);\n     }\n     \n     private Object handleEventSourceInvocation(final Method method, final Object... args) throws ReflectiveOperationException {\n"}]}
