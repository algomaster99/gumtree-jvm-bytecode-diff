{"diffoscope-json-version": 1, "source1": "first/ZipEightByteInteger.class", "source2": "second/ZipEightByteInteger.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,176 +1,176 @@\n-  SHA-256 checksum 3e6f925055186e6812222ef7dc0b560232b2253fe6481d5c520ce7ea0c20f0d6\n+  SHA-256 checksum 88e7e545c5916d5e9047b5023e7580de4343b399941cc59d53675d508352cc8e\n   Compiled from \"ZipEightByteInteger.java\"\n public final class org.apache.commons.compress.archivers.zip.ZipEightByteInteger implements java.io.Serializable\n   minor version: 0\n   major version: 53\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n-  this_class: #12                         // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  super_class: #36                        // java/lang/Object\n+  this_class: #10                         // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+  super_class: #16                        // java/lang/Object\n   interfaces: 1, fields: 26, methods: 17, attributes: 3\n Constant pool:\n-    #1 = Class              #122          // org/apache/commons/compress/archivers/zip/ZipConstants\n-    #2 = Methodref          #109.#123     // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-    #3 = Methodref          #12.#124      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(Ljava/math/BigInteger;)V\n-    #4 = Methodref          #36.#125      // java/lang/Object.\"<init>\":()V\n-    #5 = Fieldref           #12.#126      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.value:Ljava/math/BigInteger;\n-    #6 = Methodref          #12.#127      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-    #7 = Methodref          #12.#128      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getValue:([BI)Ljava/math/BigInteger;\n-    #8 = Methodref          #12.#129      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:(Ljava/math/BigInteger;)[B\n-    #9 = Methodref          #109.#130     // java/math/BigInteger.longValue:()J\n-   #10 = Long               255l\n-   #12 = Class              #131          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-   #13 = Long               65280l\n-   #15 = Long               16711680l\n-   #17 = Long               4278190080l\n-   #19 = Long               1095216660480l\n-   #21 = Long               280375465082880l\n-   #23 = Long               71776119061217280l\n-   #25 = Long               9151314442816847872l\n-   #27 = Methodref          #109.#132     // java/math/BigInteger.testBit:(I)Z\n-   #28 = Methodref          #109.#133     // java/math/BigInteger.setBit:(I)Ljava/math/BigInteger;\n-   #29 = Methodref          #12.#134      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([BI)J\n-   #30 = Methodref          #12.#135      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getValue:()Ljava/math/BigInteger;\n-   #31 = Methodref          #109.#136     // java/math/BigInteger.equals:(Ljava/lang/Object;)Z\n-   #32 = Methodref          #109.#137     // java/math/BigInteger.hashCode:()I\n-   #33 = InvokeDynamic      #0:#141       // #0:makeConcatWithConstants:(Ljava/math/BigInteger;)Ljava/lang/String;\n-   #34 = Methodref          #12.#142      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n-   #35 = Fieldref           #12.#143      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #36 = Class              #144          // java/lang/Object\n-   #37 = Class              #145          // java/io/Serializable\n-   #38 = Utf8               serialVersionUID\n-   #39 = Utf8               J\n-   #40 = Utf8               ConstantValue\n-   #41 = Long               1l\n-   #43 = Utf8               BYTE_1\n-   #44 = Utf8               I\n-   #45 = Integer            1\n-   #46 = Utf8               BYTE_1_MASK\n-   #47 = Integer            65280\n-   #48 = Utf8               BYTE_1_SHIFT\n-   #49 = Integer            8\n-   #50 = Utf8               BYTE_2\n-   #51 = Integer            2\n-   #52 = Utf8               BYTE_2_MASK\n-   #53 = Integer            16711680\n-   #54 = Utf8               BYTE_2_SHIFT\n-   #55 = Integer            16\n-   #56 = Utf8               BYTE_3\n-   #57 = Integer            3\n-   #58 = Utf8               BYTE_3_MASK\n-   #59 = Utf8               BYTE_3_SHIFT\n-   #60 = Integer            24\n-   #61 = Utf8               BYTE_4\n-   #62 = Integer            4\n-   #63 = Utf8               BYTE_4_MASK\n-   #64 = Utf8               BYTE_4_SHIFT\n-   #65 = Integer            32\n-   #66 = Utf8               BYTE_5\n-   #67 = Integer            5\n-   #68 = Utf8               BYTE_5_MASK\n-   #69 = Utf8               BYTE_5_SHIFT\n-   #70 = Integer            40\n-   #71 = Utf8               BYTE_6\n-   #72 = Integer            6\n-   #73 = Utf8               BYTE_6_MASK\n-   #74 = Utf8               BYTE_6_SHIFT\n-   #75 = Integer            48\n-   #76 = Utf8               BYTE_7\n-   #77 = Integer            7\n-   #78 = Utf8               BYTE_7_MASK\n-   #79 = Utf8               BYTE_7_SHIFT\n-   #80 = Integer            56\n-   #81 = Utf8               LEFTMOST_BIT_SHIFT\n-   #82 = Integer            63\n-   #83 = Utf8               LEFTMOST_BIT\n-   #84 = Utf8               B\n-   #85 = Integer            -128\n-   #86 = Utf8               value\n-   #87 = Utf8               Ljava/math/BigInteger;\n-   #88 = Utf8               ZERO\n-   #89 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #90 = Utf8               <init>\n-   #91 = Utf8               (J)V\n-   #92 = Utf8               Code\n-   #93 = Utf8               LineNumberTable\n-   #94 = Utf8               (Ljava/math/BigInteger;)V\n-   #95 = Utf8               ([B)V\n-   #96 = Utf8               ([BI)V\n-   #97 = Utf8               getBytes\n-   #98 = Utf8               ()[B\n-   #99 = Utf8               getLongValue\n-  #100 = Utf8               ()J\n-  #101 = Utf8               getValue\n-  #102 = Utf8               ()Ljava/math/BigInteger;\n-  #103 = Utf8               (J)[B\n-  #104 = Utf8               (Ljava/math/BigInteger;)[B\n-  #105 = Utf8               StackMapTable\n-  #106 = Class              #146          // \"[B\"\n-  #107 = Utf8               ([BI)J\n-  #108 = Utf8               ([BI)Ljava/math/BigInteger;\n-  #109 = Class              #147          // java/math/BigInteger\n-  #110 = Utf8               ([B)J\n-  #111 = Utf8               ([B)Ljava/math/BigInteger;\n-  #112 = Utf8               equals\n-  #113 = Utf8               (Ljava/lang/Object;)Z\n-  #114 = Utf8               hashCode\n-  #115 = Utf8               ()I\n-  #116 = Utf8               toString\n-  #117 = Utf8               ()Ljava/lang/String;\n-  #118 = Utf8               <clinit>\n-  #119 = Utf8               ()V\n-  #120 = Utf8               SourceFile\n-  #121 = Utf8               ZipEightByteInteger.java\n-  #122 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n-  #123 = NameAndType        #148:#149     // valueOf:(J)Ljava/math/BigInteger;\n-  #124 = NameAndType        #90:#94       // \"<init>\":(Ljava/math/BigInteger;)V\n-  #125 = NameAndType        #90:#119      // \"<init>\":()V\n-  #126 = NameAndType        #86:#87       // value:Ljava/math/BigInteger;\n-  #127 = NameAndType        #90:#96       // \"<init>\":([BI)V\n-  #128 = NameAndType        #101:#108     // getValue:([BI)Ljava/math/BigInteger;\n-  #129 = NameAndType        #97:#104      // getBytes:(Ljava/math/BigInteger;)[B\n-  #130 = NameAndType        #150:#100     // longValue:()J\n-  #131 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  #132 = NameAndType        #151:#152     // testBit:(I)Z\n-  #133 = NameAndType        #153:#154     // setBit:(I)Ljava/math/BigInteger;\n-  #134 = NameAndType        #99:#107      // getLongValue:([BI)J\n-  #135 = NameAndType        #101:#102     // getValue:()Ljava/math/BigInteger;\n-  #136 = NameAndType        #112:#113     // equals:(Ljava/lang/Object;)Z\n-  #137 = NameAndType        #114:#115     // hashCode:()I\n-  #138 = Utf8               BootstrapMethods\n-  #139 = MethodHandle       6:#155        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #140 = String             #156          // ZipEightByteInteger value: \\u0001\n-  #141 = NameAndType        #157:#158     // makeConcatWithConstants:(Ljava/math/BigInteger;)Ljava/lang/String;\n-  #142 = NameAndType        #90:#91       // \"<init>\":(J)V\n-  #143 = NameAndType        #88:#89       // ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #144 = Utf8               java/lang/Object\n-  #145 = Utf8               java/io/Serializable\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/zip/ZipConstants\n+    #2 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n+    #3 = Methodref          #4.#5         // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+    #4 = Class              #6            // java/math/BigInteger\n+    #5 = NameAndType        #7:#8         // valueOf:(J)Ljava/math/BigInteger;\n+    #6 = Utf8               java/math/BigInteger\n+    #7 = Utf8               valueOf\n+    #8 = Utf8               (J)Ljava/math/BigInteger;\n+    #9 = Methodref          #10.#11       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(Ljava/math/BigInteger;)V\n+   #10 = Class              #12           // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+   #11 = NameAndType        #13:#14       // \"<init>\":(Ljava/math/BigInteger;)V\n+   #12 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+   #13 = Utf8               <init>\n+   #14 = Utf8               (Ljava/math/BigInteger;)V\n+   #15 = Methodref          #16.#17       // java/lang/Object.\"<init>\":()V\n+   #16 = Class              #18           // java/lang/Object\n+   #17 = NameAndType        #13:#19       // \"<init>\":()V\n+   #18 = Utf8               java/lang/Object\n+   #19 = Utf8               ()V\n+   #20 = Fieldref           #10.#21       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.value:Ljava/math/BigInteger;\n+   #21 = NameAndType        #22:#23       // value:Ljava/math/BigInteger;\n+   #22 = Utf8               value\n+   #23 = Utf8               Ljava/math/BigInteger;\n+   #24 = Methodref          #10.#25       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+   #25 = NameAndType        #13:#26       // \"<init>\":([BI)V\n+   #26 = Utf8               ([BI)V\n+   #27 = Methodref          #10.#28       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getValue:([BI)Ljava/math/BigInteger;\n+   #28 = NameAndType        #29:#30       // getValue:([BI)Ljava/math/BigInteger;\n+   #29 = Utf8               getValue\n+   #30 = Utf8               ([BI)Ljava/math/BigInteger;\n+   #31 = Methodref          #10.#32       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:(Ljava/math/BigInteger;)[B\n+   #32 = NameAndType        #33:#34       // getBytes:(Ljava/math/BigInteger;)[B\n+   #33 = Utf8               getBytes\n+   #34 = Utf8               (Ljava/math/BigInteger;)[B\n+   #35 = Methodref          #4.#36        // java/math/BigInteger.longValue:()J\n+   #36 = NameAndType        #37:#38       // longValue:()J\n+   #37 = Utf8               longValue\n+   #38 = Utf8               ()J\n+   #39 = Long               255l\n+   #41 = Long               65280l\n+   #43 = Long               16711680l\n+   #45 = Long               4278190080l\n+   #47 = Long               1095216660480l\n+   #49 = Long               280375465082880l\n+   #51 = Long               71776119061217280l\n+   #53 = Long               9151314442816847872l\n+   #55 = Methodref          #4.#56        // java/math/BigInteger.testBit:(I)Z\n+   #56 = NameAndType        #57:#58       // testBit:(I)Z\n+   #57 = Utf8               testBit\n+   #58 = Utf8               (I)Z\n+   #59 = Methodref          #4.#60        // java/math/BigInteger.setBit:(I)Ljava/math/BigInteger;\n+   #60 = NameAndType        #61:#62       // setBit:(I)Ljava/math/BigInteger;\n+   #61 = Utf8               setBit\n+   #62 = Utf8               (I)Ljava/math/BigInteger;\n+   #63 = Methodref          #10.#64       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([BI)J\n+   #64 = NameAndType        #65:#66       // getLongValue:([BI)J\n+   #65 = Utf8               getLongValue\n+   #66 = Utf8               ([BI)J\n+   #67 = Methodref          #10.#68       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getValue:()Ljava/math/BigInteger;\n+   #68 = NameAndType        #29:#69       // getValue:()Ljava/math/BigInteger;\n+   #69 = Utf8               ()Ljava/math/BigInteger;\n+   #70 = Methodref          #4.#71        // java/math/BigInteger.equals:(Ljava/lang/Object;)Z\n+   #71 = NameAndType        #72:#73       // equals:(Ljava/lang/Object;)Z\n+   #72 = Utf8               equals\n+   #73 = Utf8               (Ljava/lang/Object;)Z\n+   #74 = Methodref          #4.#75        // java/math/BigInteger.hashCode:()I\n+   #75 = NameAndType        #76:#77       // hashCode:()I\n+   #76 = Utf8               hashCode\n+   #77 = Utf8               ()I\n+   #78 = InvokeDynamic      #0:#79        // #0:makeConcatWithConstants:(Ljava/math/BigInteger;)Ljava/lang/String;\n+   #79 = NameAndType        #80:#81       // makeConcatWithConstants:(Ljava/math/BigInteger;)Ljava/lang/String;\n+   #80 = Utf8               makeConcatWithConstants\n+   #81 = Utf8               (Ljava/math/BigInteger;)Ljava/lang/String;\n+   #82 = Methodref          #10.#83       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n+   #83 = NameAndType        #13:#84       // \"<init>\":(J)V\n+   #84 = Utf8               (J)V\n+   #85 = Fieldref           #10.#86       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #86 = NameAndType        #87:#88       // ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #87 = Utf8               ZERO\n+   #88 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #89 = Class              #90           // java/io/Serializable\n+   #90 = Utf8               java/io/Serializable\n+   #91 = Utf8               serialVersionUID\n+   #92 = Utf8               J\n+   #93 = Utf8               ConstantValue\n+   #94 = Long               1l\n+   #96 = Utf8               BYTE_1\n+   #97 = Utf8               I\n+   #98 = Integer            1\n+   #99 = Utf8               BYTE_1_MASK\n+  #100 = Integer            65280\n+  #101 = Utf8               BYTE_1_SHIFT\n+  #102 = Integer            8\n+  #103 = Utf8               BYTE_2\n+  #104 = Integer            2\n+  #105 = Utf8               BYTE_2_MASK\n+  #106 = Integer            16711680\n+  #107 = Utf8               BYTE_2_SHIFT\n+  #108 = Integer            16\n+  #109 = Utf8               BYTE_3\n+  #110 = Integer            3\n+  #111 = Utf8               BYTE_3_MASK\n+  #112 = Utf8               BYTE_3_SHIFT\n+  #113 = Integer            24\n+  #114 = Utf8               BYTE_4\n+  #115 = Integer            4\n+  #116 = Utf8               BYTE_4_MASK\n+  #117 = Utf8               BYTE_4_SHIFT\n+  #118 = Integer            32\n+  #119 = Utf8               BYTE_5\n+  #120 = Integer            5\n+  #121 = Utf8               BYTE_5_MASK\n+  #122 = Utf8               BYTE_5_SHIFT\n+  #123 = Integer            40\n+  #124 = Utf8               BYTE_6\n+  #125 = Integer            6\n+  #126 = Utf8               BYTE_6_MASK\n+  #127 = Utf8               BYTE_6_SHIFT\n+  #128 = Integer            48\n+  #129 = Utf8               BYTE_7\n+  #130 = Integer            7\n+  #131 = Utf8               BYTE_7_MASK\n+  #132 = Utf8               BYTE_7_SHIFT\n+  #133 = Integer            56\n+  #134 = Utf8               LEFTMOST_BIT_SHIFT\n+  #135 = Integer            63\n+  #136 = Utf8               LEFTMOST_BIT\n+  #137 = Utf8               B\n+  #138 = Integer            -128\n+  #139 = Utf8               Code\n+  #140 = Utf8               LineNumberTable\n+  #141 = Utf8               ([B)V\n+  #142 = Utf8               ()[B\n+  #143 = Utf8               (J)[B\n+  #144 = Utf8               StackMapTable\n+  #145 = Class              #146          // \"[B\"\n   #146 = Utf8               [B\n-  #147 = Utf8               java/math/BigInteger\n-  #148 = Utf8               valueOf\n-  #149 = Utf8               (J)Ljava/math/BigInteger;\n-  #150 = Utf8               longValue\n-  #151 = Utf8               testBit\n-  #152 = Utf8               (I)Z\n-  #153 = Utf8               setBit\n-  #154 = Utf8               (I)Ljava/math/BigInteger;\n-  #155 = Methodref          #159.#160     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #156 = Utf8               ZipEightByteInteger value: \\u0001\n-  #157 = Utf8               makeConcatWithConstants\n-  #158 = Utf8               (Ljava/math/BigInteger;)Ljava/lang/String;\n-  #159 = Class              #161          // java/lang/invoke/StringConcatFactory\n-  #160 = NameAndType        #157:#165     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #161 = Utf8               java/lang/invoke/StringConcatFactory\n-  #162 = Class              #167          // java/lang/invoke/MethodHandles$Lookup\n-  #163 = Utf8               Lookup\n-  #164 = Utf8               InnerClasses\n-  #165 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n-  #166 = Class              #168          // java/lang/invoke/MethodHandles\n-  #167 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #168 = Utf8               java/lang/invoke/MethodHandles\n+  #147 = Utf8               ([B)J\n+  #148 = Utf8               ([B)Ljava/math/BigInteger;\n+  #149 = Utf8               toString\n+  #150 = Utf8               ()Ljava/lang/String;\n+  #151 = Utf8               <clinit>\n+  #152 = Utf8               SourceFile\n+  #153 = Utf8               ZipEightByteInteger.java\n+  #154 = Utf8               BootstrapMethods\n+  #155 = MethodHandle       6:#156        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #156 = Methodref          #157.#158     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #157 = Class              #159          // java/lang/invoke/StringConcatFactory\n+  #158 = NameAndType        #80:#160      // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #159 = Utf8               java/lang/invoke/StringConcatFactory\n+  #160 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #161 = String             #162          // ZipEightByteInteger value: \\u0001\n+  #162 = Utf8               ZipEightByteInteger value: \\u0001\n+  #163 = Utf8               InnerClasses\n+  #164 = Class              #165          // java/lang/invoke/MethodHandles$Lookup\n+  #165 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #166 = Class              #167          // java/lang/invoke/MethodHandles\n+  #167 = Utf8               java/lang/invoke/MethodHandles\n+  #168 = Utf8               Lookup\n {\n   private static final long serialVersionUID = 1l;\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long 1l\n \n   private static final int BYTE_1 = 1;\n@@ -299,208 +299,208 @@\n   public org.apache.commons.compress.archivers.zip.ZipEightByteInteger(long);\n     descriptor: (J)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_0\n          1: lload_1\n-         2: invokestatic  #2                  // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-         5: invokespecial #3                  // Method \"<init>\":(Ljava/math/BigInteger;)V\n+         2: invokestatic  #3                  // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+         5: invokespecial #9                  // Method \"<init>\":(Ljava/math/BigInteger;)V\n          8: return\n       LineNumberTable:\n         line 75: 0\n         line 76: 8\n \n   public org.apache.commons.compress.archivers.zip.ZipEightByteInteger(java.math.BigInteger);\n     descriptor: (Ljava/math/BigInteger;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n-         1: invokespecial #4                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #15                 // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n          5: aload_1\n-         6: putfield      #5                  // Field value:Ljava/math/BigInteger;\n+         6: putfield      #20                 // Field value:Ljava/math/BigInteger;\n          9: return\n       LineNumberTable:\n         line 82: 0\n         line 83: 4\n         line 84: 9\n \n   public org.apache.commons.compress.archivers.zip.ZipEightByteInteger(byte[]);\n     descriptor: ([B)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n-         3: invokespecial #6                  // Method \"<init>\":([BI)V\n+         3: invokespecial #24                 // Method \"<init>\":([BI)V\n          6: return\n       LineNumberTable:\n         line 91: 0\n         line 92: 6\n \n   public org.apache.commons.compress.archivers.zip.ZipEightByteInteger(byte[], int);\n     descriptor: ([BI)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n-         1: invokespecial #4                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #15                 // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n          5: aload_1\n          6: iload_2\n-         7: invokestatic  #7                  // Method getValue:([BI)Ljava/math/BigInteger;\n-        10: putfield      #5                  // Field value:Ljava/math/BigInteger;\n+         7: invokestatic  #27                 // Method getValue:([BI)Ljava/math/BigInteger;\n+        10: putfield      #20                 // Field value:Ljava/math/BigInteger;\n         13: return\n       LineNumberTable:\n         line 99: 0\n         line 100: 4\n         line 101: 13\n \n   public byte[] getBytes();\n     descriptor: ()[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #5                  // Field value:Ljava/math/BigInteger;\n-         4: invokestatic  #8                  // Method getBytes:(Ljava/math/BigInteger;)[B\n+         1: getfield      #20                 // Field value:Ljava/math/BigInteger;\n+         4: invokestatic  #31                 // Method getBytes:(Ljava/math/BigInteger;)[B\n          7: areturn\n       LineNumberTable:\n         line 108: 0\n \n   public long getLongValue();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #5                  // Field value:Ljava/math/BigInteger;\n-         4: invokevirtual #9                  // Method java/math/BigInteger.longValue:()J\n+         1: getfield      #20                 // Field value:Ljava/math/BigInteger;\n+         4: invokevirtual #35                 // Method java/math/BigInteger.longValue:()J\n          7: lreturn\n       LineNumberTable:\n         line 116: 0\n \n   public java.math.BigInteger getValue();\n     descriptor: ()Ljava/math/BigInteger;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #5                  // Field value:Ljava/math/BigInteger;\n+         1: getfield      #20                 // Field value:Ljava/math/BigInteger;\n          4: areturn\n       LineNumberTable:\n         line 124: 0\n \n   public static byte[] getBytes(long);\n     descriptor: (J)[B\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=2, args_size=1\n          0: lload_0\n-         1: invokestatic  #2                  // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-         4: invokestatic  #8                  // Method getBytes:(Ljava/math/BigInteger;)[B\n+         1: invokestatic  #3                  // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+         4: invokestatic  #31                 // Method getBytes:(Ljava/math/BigInteger;)[B\n          7: areturn\n       LineNumberTable:\n         line 133: 0\n \n   public static byte[] getBytes(java.math.BigInteger);\n     descriptor: (Ljava/math/BigInteger;)[B\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=6, locals=4, args_size=1\n          0: bipush        8\n          2: newarray       byte\n          4: astore_1\n          5: aload_0\n-         6: invokevirtual #9                  // Method java/math/BigInteger.longValue:()J\n+         6: invokevirtual #35                 // Method java/math/BigInteger.longValue:()J\n          9: lstore_2\n         10: aload_1\n         11: iconst_0\n         12: lload_2\n-        13: ldc2_w        #10                 // long 255l\n+        13: ldc2_w        #39                 // long 255l\n         16: land\n         17: l2i\n         18: i2b\n         19: bastore\n         20: aload_1\n         21: iconst_1\n         22: lload_2\n-        23: ldc2_w        #13                 // long 65280l\n+        23: ldc2_w        #41                 // long 65280l\n         26: land\n         27: bipush        8\n         29: lshr\n         30: l2i\n         31: i2b\n         32: bastore\n         33: aload_1\n         34: iconst_2\n         35: lload_2\n-        36: ldc2_w        #15                 // long 16711680l\n+        36: ldc2_w        #43                 // long 16711680l\n         39: land\n         40: bipush        16\n         42: lshr\n         43: l2i\n         44: i2b\n         45: bastore\n         46: aload_1\n         47: iconst_3\n         48: lload_2\n-        49: ldc2_w        #17                 // long 4278190080l\n+        49: ldc2_w        #45                 // long 4278190080l\n         52: land\n         53: bipush        24\n         55: lshr\n         56: l2i\n         57: i2b\n         58: bastore\n         59: aload_1\n         60: iconst_4\n         61: lload_2\n-        62: ldc2_w        #19                 // long 1095216660480l\n+        62: ldc2_w        #47                 // long 1095216660480l\n         65: land\n         66: bipush        32\n         68: lshr\n         69: l2i\n         70: i2b\n         71: bastore\n         72: aload_1\n         73: iconst_5\n         74: lload_2\n-        75: ldc2_w        #21                 // long 280375465082880l\n+        75: ldc2_w        #49                 // long 280375465082880l\n         78: land\n         79: bipush        40\n         81: lshr\n         82: l2i\n         83: i2b\n         84: bastore\n         85: aload_1\n         86: bipush        6\n         88: lload_2\n-        89: ldc2_w        #23                 // long 71776119061217280l\n+        89: ldc2_w        #51                 // long 71776119061217280l\n         92: land\n         93: bipush        48\n         95: lshr\n         96: l2i\n         97: i2b\n         98: bastore\n         99: aload_1\n        100: bipush        7\n        102: lload_2\n-       103: ldc2_w        #25                 // long 9151314442816847872l\n+       103: ldc2_w        #53                 // long 9151314442816847872l\n        106: land\n        107: bipush        56\n        109: lshr\n        110: l2i\n        111: i2b\n        112: bastore\n        113: aload_0\n        114: bipush        63\n-       116: invokevirtual #27                 // Method java/math/BigInteger.testBit:(I)Z\n+       116: invokevirtual #55                 // Method java/math/BigInteger.testBit:(I)Z\n        119: ifeq          132\n        122: aload_1\n        123: bipush        7\n        125: dup2\n        126: baload\n        127: bipush        -128\n        129: ior\n@@ -530,16 +530,16 @@\n   public static long getLongValue(byte[], int);\n     descriptor: ([BI)J\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: invokestatic  #7                  // Method getValue:([BI)Ljava/math/BigInteger;\n-         5: invokevirtual #9                  // Method java/math/BigInteger.longValue:()J\n+         2: invokestatic  #27                 // Method getValue:([BI)Ljava/math/BigInteger;\n+         5: invokevirtual #35                 // Method java/math/BigInteger.longValue:()J\n          8: lreturn\n       LineNumberTable:\n         line 166: 0\n \n   public static java.math.BigInteger getValue(byte[], int);\n     descriptor: ([BI)Ljava/math/BigInteger;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n@@ -549,119 +549,119 @@\n          1: iload_1\n          2: bipush        7\n          4: iadd\n          5: baload\n          6: i2l\n          7: bipush        56\n          9: lshl\n-        10: ldc2_w        #25                 // long 9151314442816847872l\n+        10: ldc2_w        #53                 // long 9151314442816847872l\n         13: land\n         14: lstore_2\n         15: lload_2\n         16: aload_0\n         17: iload_1\n         18: bipush        6\n         20: iadd\n         21: baload\n         22: i2l\n         23: bipush        48\n         25: lshl\n-        26: ldc2_w        #23                 // long 71776119061217280l\n+        26: ldc2_w        #51                 // long 71776119061217280l\n         29: land\n         30: ladd\n         31: lstore_2\n         32: lload_2\n         33: aload_0\n         34: iload_1\n         35: iconst_5\n         36: iadd\n         37: baload\n         38: i2l\n         39: bipush        40\n         41: lshl\n-        42: ldc2_w        #21                 // long 280375465082880l\n+        42: ldc2_w        #49                 // long 280375465082880l\n         45: land\n         46: ladd\n         47: lstore_2\n         48: lload_2\n         49: aload_0\n         50: iload_1\n         51: iconst_4\n         52: iadd\n         53: baload\n         54: i2l\n         55: bipush        32\n         57: lshl\n-        58: ldc2_w        #19                 // long 1095216660480l\n+        58: ldc2_w        #47                 // long 1095216660480l\n         61: land\n         62: ladd\n         63: lstore_2\n         64: lload_2\n         65: aload_0\n         66: iload_1\n         67: iconst_3\n         68: iadd\n         69: baload\n         70: i2l\n         71: bipush        24\n         73: lshl\n-        74: ldc2_w        #17                 // long 4278190080l\n+        74: ldc2_w        #45                 // long 4278190080l\n         77: land\n         78: ladd\n         79: lstore_2\n         80: lload_2\n         81: aload_0\n         82: iload_1\n         83: iconst_2\n         84: iadd\n         85: baload\n         86: i2l\n         87: bipush        16\n         89: lshl\n-        90: ldc2_w        #15                 // long 16711680l\n+        90: ldc2_w        #43                 // long 16711680l\n         93: land\n         94: ladd\n         95: lstore_2\n         96: lload_2\n         97: aload_0\n         98: iload_1\n         99: iconst_1\n        100: iadd\n        101: baload\n        102: i2l\n        103: bipush        8\n        105: lshl\n-       106: ldc2_w        #13                 // long 65280l\n+       106: ldc2_w        #41                 // long 65280l\n        109: land\n        110: ladd\n        111: lstore_2\n        112: lload_2\n        113: aload_0\n        114: iload_1\n        115: baload\n        116: i2l\n-       117: ldc2_w        #10                 // long 255l\n+       117: ldc2_w        #39                 // long 255l\n        120: land\n        121: ladd\n        122: lstore_2\n        123: lload_2\n-       124: invokestatic  #2                  // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+       124: invokestatic  #3                  // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n        127: astore        4\n        129: aload_0\n        130: iload_1\n        131: bipush        7\n        133: iadd\n        134: baload\n        135: bipush        -128\n        137: iand\n        138: bipush        -128\n        140: if_icmpne     153\n        143: aload         4\n        145: bipush        63\n-       147: invokevirtual #28                 // Method java/math/BigInteger.setBit:(I)Ljava/math/BigInteger;\n+       147: invokevirtual #59                 // Method java/math/BigInteger.setBit:(I)Ljava/math/BigInteger;\n        150: goto          155\n        153: aload         4\n        155: areturn\n       LineNumberTable:\n         line 177: 0\n         line 178: 15\n         line 179: 32\n@@ -684,49 +684,49 @@\n   public static long getLongValue(byte[]);\n     descriptor: ([B)J\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: iconst_0\n-         2: invokestatic  #29                 // Method getLongValue:([BI)J\n+         2: invokestatic  #63                 // Method getLongValue:([BI)J\n          5: lreturn\n       LineNumberTable:\n         line 196: 0\n \n   public static java.math.BigInteger getValue(byte[]);\n     descriptor: ([B)Ljava/math/BigInteger;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: iconst_0\n-         2: invokestatic  #7                  // Method getValue:([BI)Ljava/math/BigInteger;\n+         2: invokestatic  #27                 // Method getValue:([BI)Ljava/math/BigInteger;\n          5: areturn\n       LineNumberTable:\n         line 205: 0\n \n   public boolean equals(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n          1: ifnull        11\n          4: aload_1\n-         5: instanceof    #12                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+         5: instanceof    #10                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n          8: ifne          13\n         11: iconst_0\n         12: ireturn\n         13: aload_0\n-        14: getfield      #5                  // Field value:Ljava/math/BigInteger;\n+        14: getfield      #20                 // Field value:Ljava/math/BigInteger;\n         17: aload_1\n-        18: checkcast     #12                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-        21: invokevirtual #30                 // Method getValue:()Ljava/math/BigInteger;\n-        24: invokevirtual #31                 // Method java/math/BigInteger.equals:(Ljava/lang/Object;)Z\n+        18: checkcast     #10                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+        21: invokevirtual #67                 // Method getValue:()Ljava/math/BigInteger;\n+        24: invokevirtual #70                 // Method java/math/BigInteger.equals:(Ljava/lang/Object;)Z\n         27: ireturn\n       LineNumberTable:\n         line 215: 0\n         line 216: 11\n         line 218: 13\n       StackMapTable: number_of_entries = 2\n         frame_type = 11 /* same */\n@@ -734,46 +734,46 @@\n \n   public int hashCode();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #5                  // Field value:Ljava/math/BigInteger;\n-         4: invokevirtual #32                 // Method java/math/BigInteger.hashCode:()I\n+         1: getfield      #20                 // Field value:Ljava/math/BigInteger;\n+         4: invokevirtual #74                 // Method java/math/BigInteger.hashCode:()I\n          7: ireturn\n       LineNumberTable:\n         line 227: 0\n \n   public java.lang.String toString();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #5                  // Field value:Ljava/math/BigInteger;\n-         4: invokedynamic #33,  0             // InvokeDynamic #0:makeConcatWithConstants:(Ljava/math/BigInteger;)Ljava/lang/String;\n+         1: getfield      #20                 // Field value:Ljava/math/BigInteger;\n+         4: invokedynamic #78,  0             // InvokeDynamic #0:makeConcatWithConstants:(Ljava/math/BigInteger;)Ljava/lang/String;\n          9: areturn\n       LineNumberTable:\n         line 232: 0\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=4, locals=0, args_size=0\n-         0: new           #12                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+         0: new           #10                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n          3: dup\n          4: lconst_0\n-         5: invokespecial #34                 // Method \"<init>\":(J)V\n-         8: putstatic     #35                 // Field ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         5: invokespecial #82                 // Method \"<init>\":(J)V\n+         8: putstatic     #85                 // Field ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         11: return\n       LineNumberTable:\n         line 68: 0\n }\n SourceFile: \"ZipEightByteInteger.java\"\n-InnerClasses:\n-  public static final #163= #162 of #166; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #139 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  0: #155 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #140 ZipEightByteInteger value: \\u0001\n+      #161 ZipEightByteInteger value: \\u0001\n+InnerClasses:\n+  public static final #168= #164 of #166; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n"}]}
