{"diffoscope-json-version": 1, "source1": "first/ClassPath$JrtModule.class", "source2": "second/ClassPath$JrtModule.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,54 +11,54 @@\n import java.util.Objects;\n import java.nio.file.Path;\n \n private static class JrtModule extends ClassPath.AbstractPathEntry\n {\n     private final Path modulePath;\n     \n-    public JrtModule(final Path modulePath) {\n+    public JrtModule(final Path obj) {\n         super((ClassPath.ClassPath$1)null);\n-        this.modulePath = Objects.requireNonNull(modulePath, \"modulePath\");\n+        this.modulePath = Objects.requireNonNull(obj, \"modulePath\");\n     }\n     \n     public void close() throws IOException {\n     }\n     \n-    ClassPath.ClassFile getClassFile(final String name, final String suffix) throws IOException {\n-        final Path resolved = this.modulePath.resolve(ClassPath.packageToFolder(name) + suffix);\n-        if (Files.exists(resolved, new LinkOption[0])) {\n-            return (ClassPath.ClassFile)new JrtModule.ClassPath$JrtModule$1(this, resolved);\n+    ClassPath.ClassFile getClassFile(final String s, final String str) throws IOException {\n+        final Path resolve = this.modulePath.resolve(ClassPath.packageToFolder(s) + str);\n+        if (Files.exists(resolve, new LinkOption[0])) {\n+            return (ClassPath.ClassFile)new JrtModule.ClassPath$JrtModule$1(this, resolve);\n         }\n         return null;\n     }\n     \n-    URL getResource(final String name) {\n-        final Path resovled = this.modulePath.resolve(name);\n+    URL getResource(final String s) {\n+        final Path resolve = this.modulePath.resolve(s);\n         try {\n             URL url;\n-            if (Files.exists(resovled, new LinkOption[0])) {\n+            if (Files.exists(resolve, new LinkOption[0])) {\n                 final StringBuilder sb;\n-                url = new URL(sb.append(\"jrt:\").append(this.modulePath).append(\"/\").append(name).toString());\n+                url = new URL(sb.append(\"jrt:\").append(this.modulePath).append(\"/\").append(s).toString());\n                 sb = new StringBuilder();\n             }\n             else {\n                 url = null;\n             }\n             return url;\n         }\n-        catch (final MalformedURLException e) {\n+        catch (final MalformedURLException ex) {\n             return null;\n         }\n     }\n     \n-    InputStream getResourceAsStream(final String name) {\n+    InputStream getResourceAsStream(final String other) {\n         try {\n-            return Files.newInputStream(this.modulePath.resolve(name), new OpenOption[0]);\n+            return Files.newInputStream(this.modulePath.resolve(other), new OpenOption[0]);\n         }\n-        catch (final IOException e) {\n+        catch (final IOException ex) {\n             return null;\n         }\n     }\n     \n     public String toString() {\n         return this.modulePath.toString();\n     }\n"}]}
