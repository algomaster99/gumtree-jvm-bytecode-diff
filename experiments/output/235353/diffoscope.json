{"diffoscope-json-version": 1, "source1": "first/FileTimes.class", "source2": "second/FileTimes.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -28,33 +28,29 @@\n         return FileTime.from(fileTime.toInstant().minusSeconds(secondsToSubtract));\n     }\n     \n     public static FileTime now() {\n         return FileTime.from(Instant.now());\n     }\n     \n-    public static Date ntfsTimeToDate(final long ntfsTime) {\n-        final long javaHundredNanos = Math.addExact(ntfsTime, -116444736000000000L);\n-        final long javaMillis = Math.floorDiv(javaHundredNanos, FileTimes.HUNDRED_NANOS_PER_MILLISECOND);\n-        return new Date(javaMillis);\n+    public static Date ntfsTimeToDate(final long x) {\n+        return new Date(Math.floorDiv(Math.addExact(x, -116444736000000000L), FileTimes.HUNDRED_NANOS_PER_MILLISECOND));\n     }\n     \n-    public static FileTime ntfsTimeToFileTime(final long ntfsTime) {\n-        final long javaHundredsNanos = Math.addExact(ntfsTime, -116444736000000000L);\n-        final long javaSeconds = Math.floorDiv(javaHundredsNanos, FileTimes.HUNDRED_NANOS_PER_SECOND);\n-        final long javaNanos = Math.floorMod(javaHundredsNanos, FileTimes.HUNDRED_NANOS_PER_SECOND) * 100L;\n-        return FileTime.from(Instant.ofEpochSecond(javaSeconds, javaNanos));\n+    public static FileTime ntfsTimeToFileTime(final long x) {\n+        final long addExact = Math.addExact(x, -116444736000000000L);\n+        return FileTime.from(Instant.ofEpochSecond(Math.floorDiv(addExact, FileTimes.HUNDRED_NANOS_PER_SECOND), Math.floorMod(addExact, FileTimes.HUNDRED_NANOS_PER_SECOND) * 100L));\n     }\n     \n     public static FileTime plusMillis(final FileTime fileTime, final long millisToAdd) {\n         return FileTime.from(fileTime.toInstant().plusMillis(millisToAdd));\n     }\n     \n-    public static FileTime plusNanos(final FileTime fileTime, final long nanosToSubtract) {\n-        return FileTime.from(fileTime.toInstant().plusNanos(nanosToSubtract));\n+    public static FileTime plusNanos(final FileTime fileTime, final long nanosToAdd) {\n+        return FileTime.from(fileTime.toInstant().plusNanos(nanosToAdd));\n     }\n     \n     public static FileTime plusSeconds(final FileTime fileTime, final long secondsToAdd) {\n         return FileTime.from(fileTime.toInstant().plusSeconds(secondsToAdd));\n     }\n     \n     public static void setLastModifiedTime(final Path path) throws IOException {\n@@ -66,22 +62,20 @@\n     }\n     \n     public static FileTime toFileTime(final Date date) {\n         return (date != null) ? FileTime.fromMillis(date.getTime()) : null;\n     }\n     \n     public static long toNtfsTime(final Date date) {\n-        final long javaHundredNanos = date.getTime() * FileTimes.HUNDRED_NANOS_PER_MILLISECOND;\n-        return Math.subtractExact(javaHundredNanos, -116444736000000000L);\n+        return Math.subtractExact(date.getTime() * FileTimes.HUNDRED_NANOS_PER_MILLISECOND, -116444736000000000L);\n     }\n     \n     public static long toNtfsTime(final FileTime fileTime) {\n         final Instant instant = fileTime.toInstant();\n-        final long javaHundredNanos = instant.getEpochSecond() * FileTimes.HUNDRED_NANOS_PER_SECOND + instant.getNano() / 100;\n-        return Math.subtractExact(javaHundredNanos, -116444736000000000L);\n+        return Math.subtractExact(instant.getEpochSecond() * FileTimes.HUNDRED_NANOS_PER_SECOND + (long)(instant.getNano() / 100), -116444736000000000L);\n     }\n     \n     private FileTimes() {\n     }\n     \n     static {\n         EPOCH = FileTime.from(Instant.EPOCH);\n"}]}
