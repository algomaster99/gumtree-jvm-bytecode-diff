{"diffoscope-json-version": 1, "source1": "first/Method.class", "source2": "second/Method.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,43 +13,43 @@\n     static final Method[] EMPTY_METHOD_ARRAY;\n     private ParameterAnnotationEntry[] parameterAnnotationEntries;\n     \n     public static BCELComparator getComparator() {\n         return Method.bcelComparator;\n     }\n     \n-    public static void setComparator(final BCELComparator comparator) {\n-        Method.bcelComparator = comparator;\n+    public static void setComparator(final BCELComparator bcelComparator) {\n+        Method.bcelComparator = bcelComparator;\n     }\n     \n     public Method() {\n     }\n     \n-    Method(final DataInput file, final ConstantPool constant_pool) throws IOException, ClassFormatException {\n-        super(file, constant_pool);\n+    Method(final DataInput dataInput, final ConstantPool constantPool) throws IOException, ClassFormatException {\n+        super(dataInput, constantPool);\n     }\n     \n-    public Method(final int access_flags, final int name_index, final int signature_index, final Attribute[] attributes, final ConstantPool constant_pool) {\n-        super(access_flags, name_index, signature_index, attributes, constant_pool);\n+    public Method(final int n, final int n2, final int n3, final Attribute[] array, final ConstantPool constantPool) {\n+        super(n, n2, n3, array, constantPool);\n     }\n     \n-    public Method(final Method c) {\n-        super((FieldOrMethod)c);\n+    public Method(final Method method) {\n+        super((FieldOrMethod)method);\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitMethod(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitMethod(this);\n     }\n     \n     public Method copy(final ConstantPool constantPool) {\n         return (Method)this.copy_(constantPool);\n     }\n     \n-    public boolean equals(final Object obj) {\n-        return Method.bcelComparator.equals((Object)this, obj);\n+    public boolean equals(final Object o) {\n+        return Method.bcelComparator.equals((Object)this, o);\n     }\n     \n     public Type[] getArgumentTypes() {\n         return Type.getArgumentTypes(this.getSignature());\n     }\n     \n     public Code getCode() {\n@@ -98,34 +98,28 @@\n     }\n     \n     public int hashCode() {\n         return Method.bcelComparator.hashCode((Object)this);\n     }\n     \n     public String toString() {\n-        final String access = Utility.accessToString(super.getAccessFlags());\n-        ConstantUtf8 c = super.getConstantPool().getConstantUtf8(super.getSignatureIndex());\n-        String signature = c.getBytes();\n-        c = super.getConstantPool().getConstantUtf8(super.getNameIndex());\n-        final String name = c.getBytes();\n-        signature = Utility.methodSignatureToString(signature, name, access, true, this.getLocalVariableTable());\n-        final StringBuilder buf = new StringBuilder(signature);\n-        for (final Attribute attribute : super.getAttributes()) {\n-            if (!(attribute instanceof Code) && !(attribute instanceof ExceptionTable)) {\n-                buf.append(\" [\").append(attribute).append(\"]\");\n+        final StringBuilder sb = new StringBuilder(Utility.methodSignatureToString(super.getConstantPool().getConstantUtf8(super.getSignatureIndex()).getBytes(), super.getConstantPool().getConstantUtf8(super.getNameIndex()).getBytes(), Utility.accessToString(super.getAccessFlags()), true, this.getLocalVariableTable()));\n+        for (final Attribute obj : super.getAttributes()) {\n+            if (!(obj instanceof Code) && !(obj instanceof ExceptionTable)) {\n+                sb.append(\" [\").append(obj).append(\"]\");\n             }\n         }\n-        final ExceptionTable e = this.getExceptionTable();\n-        if (e != null) {\n-            final String str = e.toString();\n-            if (!str.isEmpty()) {\n-                buf.append(\"\\n\\t\\tthrows \").append(str);\n+        final ExceptionTable exceptionTable = this.getExceptionTable();\n+        if (exceptionTable != null) {\n+            final String string = exceptionTable.toString();\n+            if (!string.isEmpty()) {\n+                sb.append(\"\\n\\t\\tthrows \").append(string);\n             }\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n     \n     static {\n         EMPTY_ARRAY = new Method[0];\n         Method.bcelComparator = (BCELComparator)new Method.Method$1();\n         EMPTY_METHOD_ARRAY = new Method[0];\n     }\n"}]}
