{"diffoscope-json-version": 1, "source1": "first/IOBinaryOperator.class", "source2": "second/IOBinaryOperator.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -4,21 +4,21 @@\n import java.io.IOException;\n import java.util.function.BinaryOperator;\n import java.util.Objects;\n \n @FunctionalInterface\n public interface IOBinaryOperator<T> extends IOBiFunction<T, T, T>\n {\n-    default <T> IOBinaryOperator<T> maxBy(final IOComparator<? super T> comparator) {\n-        Objects.requireNonNull(comparator);\n-        return (a, b) -> (comparator.compare(a, b) >= 0) ? a : b;\n+    default <T> IOBinaryOperator<T> maxBy(final IOComparator<? super T> obj) {\n+        Objects.requireNonNull(obj);\n+        return (o, o2) -> (obj.compare(o, o2) >= 0) ? o : o2;\n     }\n     \n-    default <T> IOBinaryOperator<T> minBy(final IOComparator<? super T> comparator) {\n-        Objects.requireNonNull(comparator);\n-        return (a, b) -> (comparator.compare(a, b) <= 0) ? a : b;\n+    default <T> IOBinaryOperator<T> minBy(final IOComparator<? super T> obj) {\n+        Objects.requireNonNull(obj);\n+        return (o, o2) -> (obj.compare(o, o2) <= 0) ? o : o2;\n     }\n     \n     default BinaryOperator<T> asBinaryOperator() {\n-        return (BinaryOperator<T>)((t, u) -> Uncheck.apply((IOBiFunction)this, t, u));\n+        return (BinaryOperator<T>)((o2, o4) -> Uncheck.apply((IOBiFunction)this, o2, o4));\n     }\n }\n"}]}
