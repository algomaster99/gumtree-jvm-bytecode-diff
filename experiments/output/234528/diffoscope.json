{"diffoscope-json-version": 1, "source1": "first/FileWriterWithEncoding.class", "source2": "second/FileWriterWithEncoding.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,114 +14,114 @@\n import java.io.File;\n import java.io.Writer;\n \n public class FileWriterWithEncoding extends Writer\n {\n     private final Writer out;\n     \n-    public FileWriterWithEncoding(final String fileName, final String charsetName) throws IOException {\n-        this(new File(fileName), charsetName, false);\n+    public FileWriterWithEncoding(final String pathname, final String s) throws IOException {\n+        this(new File(pathname), s, false);\n     }\n     \n-    public FileWriterWithEncoding(final String fileName, final String charsetName, final boolean append) throws IOException {\n-        this(new File(fileName), charsetName, append);\n+    public FileWriterWithEncoding(final String pathname, final String s, final boolean b) throws IOException {\n+        this(new File(pathname), s, b);\n     }\n     \n-    public FileWriterWithEncoding(final String fileName, final Charset charset) throws IOException {\n-        this(new File(fileName), charset, false);\n+    public FileWriterWithEncoding(final String pathname, final Charset charset) throws IOException {\n+        this(new File(pathname), charset, false);\n     }\n     \n-    public FileWriterWithEncoding(final String fileName, final Charset charset, final boolean append) throws IOException {\n-        this(new File(fileName), charset, append);\n+    public FileWriterWithEncoding(final String pathname, final Charset charset, final boolean b) throws IOException {\n+        this(new File(pathname), charset, b);\n     }\n     \n-    public FileWriterWithEncoding(final String fileName, final CharsetEncoder encoding) throws IOException {\n-        this(new File(fileName), encoding, false);\n+    public FileWriterWithEncoding(final String pathname, final CharsetEncoder charsetEncoder) throws IOException {\n+        this(new File(pathname), charsetEncoder, false);\n     }\n     \n-    public FileWriterWithEncoding(final String fileName, final CharsetEncoder charsetEncoder, final boolean append) throws IOException {\n-        this(new File(fileName), charsetEncoder, append);\n+    public FileWriterWithEncoding(final String pathname, final CharsetEncoder charsetEncoder, final boolean b) throws IOException {\n+        this(new File(pathname), charsetEncoder, b);\n     }\n     \n-    public FileWriterWithEncoding(final File file, final String charsetName) throws IOException {\n-        this(file, charsetName, false);\n+    public FileWriterWithEncoding(final File file, final String s) throws IOException {\n+        this(file, s, false);\n     }\n     \n-    public FileWriterWithEncoding(final File file, final String charsetName, final boolean append) throws IOException {\n-        this.out = initWriter(file, charsetName, append);\n+    public FileWriterWithEncoding(final File file, final String s, final boolean b) throws IOException {\n+        this.out = initWriter(file, s, b);\n     }\n     \n     public FileWriterWithEncoding(final File file, final Charset charset) throws IOException {\n         this(file, charset, false);\n     }\n     \n-    public FileWriterWithEncoding(final File file, final Charset encoding, final boolean append) throws IOException {\n-        this.out = initWriter(file, encoding, append);\n+    public FileWriterWithEncoding(final File file, final Charset charset, final boolean b) throws IOException {\n+        this.out = initWriter(file, charset, b);\n     }\n     \n     public FileWriterWithEncoding(final File file, final CharsetEncoder charsetEncoder) throws IOException {\n         this(file, charsetEncoder, false);\n     }\n     \n-    public FileWriterWithEncoding(final File file, final CharsetEncoder charsetEncoder, final boolean append) throws IOException {\n-        this.out = initWriter(file, charsetEncoder, append);\n+    public FileWriterWithEncoding(final File file, final CharsetEncoder charsetEncoder, final boolean b) throws IOException {\n+        this.out = initWriter(file, charsetEncoder, b);\n     }\n     \n-    private static Writer initWriter(final File file, final Object encoding, final boolean append) throws IOException {\n+    private static Writer initWriter(final File file, final Object obj, final boolean append) throws IOException {\n         Objects.requireNonNull(file, \"file\");\n-        Objects.requireNonNull(encoding, \"encoding\");\n-        OutputStream stream = null;\n-        final boolean fileExistedAlready = file.exists();\n+        Objects.requireNonNull(obj, \"encoding\");\n+        OutputStream out = null;\n+        final boolean exists = file.exists();\n         try {\n-            stream = new FileOutputStream(file, append);\n-            if (encoding instanceof Charset) {\n-                return new OutputStreamWriter(stream, (Charset)encoding);\n+            out = new FileOutputStream(file, append);\n+            if (obj instanceof Charset) {\n+                return new OutputStreamWriter(out, (Charset)obj);\n             }\n-            if (encoding instanceof CharsetEncoder) {\n-                return new OutputStreamWriter(stream, (CharsetEncoder)encoding);\n+            if (obj instanceof CharsetEncoder) {\n+                return new OutputStreamWriter(out, (CharsetEncoder)obj);\n             }\n-            return new OutputStreamWriter(stream, (String)encoding);\n+            return new OutputStreamWriter(out, (String)obj);\n         }\n         catch (final IOException | RuntimeException ex) {\n             try {\n-                IOUtils.close((Closeable)stream);\n+                IOUtils.close((Closeable)out);\n             }\n-            catch (final IOException e) {\n-                ex.addSuppressed(e);\n+            catch (final IOException exception) {\n+                ((Throwable)ex).addSuppressed(exception);\n             }\n-            if (!fileExistedAlready) {\n+            if (!exists) {\n                 FileUtils.deleteQuietly(file);\n             }\n             throw ex;\n         }\n     }\n     \n     @Override\n-    public void write(final int idx) throws IOException {\n-        this.out.write(idx);\n+    public void write(final int c) throws IOException {\n+        this.out.write(c);\n     }\n     \n     @Override\n-    public void write(final char[] chr) throws IOException {\n-        this.out.write(chr);\n+    public void write(final char[] cbuf) throws IOException {\n+        this.out.write(cbuf);\n     }\n     \n     @Override\n-    public void write(final char[] chr, final int st, final int end) throws IOException {\n-        this.out.write(chr, st, end);\n+    public void write(final char[] array, final int n, final int n2) throws IOException {\n+        this.out.write(array, n, n2);\n     }\n     \n     @Override\n     public void write(final String str) throws IOException {\n         this.out.write(str);\n     }\n     \n     @Override\n-    public void write(final String str, final int st, final int end) throws IOException {\n-        this.out.write(str, st, end);\n+    public void write(final String str, final int off, final int len) throws IOException {\n+        this.out.write(str, off, len);\n     }\n     \n     @Override\n     public void flush() throws IOException {\n         this.out.flush();\n     }\n     \n"}]}
