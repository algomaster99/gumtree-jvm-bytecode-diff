{"diffoscope-json-version": 1, "source1": "first/ExplodingInputStream.class", "source2": "second/ExplodingInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,171 +1,171 @@\n-  SHA-256 checksum cecc91de16c423df976f6ff418c8d24f0c3c7e4be7e17a2374acc5beb8b1be68\n+  SHA-256 checksum f329d2e6146febcc63db5b996e6594972530a03b478f32cbef9379930aa7dcc1\n   Compiled from \"ExplodingInputStream.java\"\n class org.apache.commons.compress.archivers.zip.ExplodingInputStream extends java.io.InputStream implements org.apache.commons.compress.utils.InputStreamStatistics\n   minor version: 0\n   major version: 52\n   flags: (0x0020) ACC_SUPER\n-  this_class: #49                         // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-  super_class: #50                        // java/io/InputStream\n+  this_class: #14                         // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+  super_class: #2                         // java/io/InputStream\n   interfaces: 1, fields: 11, methods: 7, attributes: 1\n Constant pool:\n-    #1 = Methodref          #50.#86       // java/io/InputStream.\"<init>\":()V\n-    #2 = Class              #87           // org/apache/commons/compress/archivers/zip/CircularBuffer\n-    #3 = Integer            32768\n-    #4 = Methodref          #2.#88        // org/apache/commons/compress/archivers/zip/CircularBuffer.\"<init>\":(I)V\n-    #5 = Fieldref           #49.#89       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n-    #6 = Class              #90           // java/lang/IllegalArgumentException\n-    #7 = String             #91           // The dictionary size must be 4096 or 8192\n-    #8 = Methodref          #6.#92        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-    #9 = String             #93           // The number of trees must be 2 or 3\n-   #10 = Fieldref           #49.#94       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.dictionarySize:I\n-   #11 = Fieldref           #49.#95       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.numberOfTrees:I\n-   #12 = Fieldref           #49.#96       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.minimumMatchLength:I\n-   #13 = Fieldref           #49.#97       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.in:Ljava/io/InputStream;\n-   #14 = Fieldref           #49.#98       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n-   #15 = Class              #99           // org/apache/commons/compress/utils/CountingInputStream\n-   #16 = Class              #100          // org/apache/commons/compress/utils/CloseShieldFilterInputStream\n-   #17 = Methodref          #16.#101      // org/apache/commons/compress/utils/CloseShieldFilterInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #18 = Methodref          #15.#101      // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #19 = Methodref          #102.#103     // org/apache/commons/compress/archivers/zip/BinaryTree.decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-   #20 = Fieldref           #49.#104      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-   #21 = Fieldref           #49.#105      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.lengthTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-   #22 = Fieldref           #49.#106      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.distanceTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-   #23 = Fieldref           #49.#107      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.treeSizes:J\n-   #24 = Methodref          #15.#108      // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n-   #25 = Methodref          #15.#109      // org/apache/commons/compress/utils/CountingInputStream.close:()V\n-   #26 = Class              #110          // java/lang/Throwable\n-   #27 = Methodref          #26.#111      // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-   #28 = Class              #112          // org/apache/commons/compress/archivers/zip/BitStream\n-   #29 = Methodref          #28.#101      // org/apache/commons/compress/archivers/zip/BitStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #30 = Methodref          #2.#113       // org/apache/commons/compress/archivers/zip/CircularBuffer.available:()Z\n-   #31 = Methodref          #49.#114      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.fillBuffer:()V\n-   #32 = Class              #115          // java/io/IOException\n-   #33 = String             #116          // bad IMPLODE stream\n-   #34 = Methodref          #32.#117      // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #35 = Methodref          #2.#118       // org/apache/commons/compress/archivers/zip/CircularBuffer.get:()I\n-   #36 = Fieldref           #49.#119      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.uncompressedCount:J\n-   #37 = Methodref          #28.#108      // org/apache/commons/compress/archivers/zip/BitStream.getBytesRead:()J\n-   #38 = Methodref          #50.#109      // java/io/InputStream.close:()V\n-   #39 = Methodref          #49.#120      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.init:()V\n-   #40 = Methodref          #28.#121      // org/apache/commons/compress/archivers/zip/BitStream.nextBit:()I\n-   #41 = Methodref          #102.#122     // org/apache/commons/compress/archivers/zip/BinaryTree.read:(Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n-   #42 = Methodref          #28.#123      // org/apache/commons/compress/archivers/zip/BitStream.nextByte:()I\n-   #43 = Methodref          #2.#124       // org/apache/commons/compress/archivers/zip/CircularBuffer.put:(I)V\n-   #44 = Methodref          #28.#125      // org/apache/commons/compress/archivers/zip/BitStream.nextBits:(I)J\n-   #45 = Long               -1l\n-   #47 = Methodref          #126.#127     // org/apache/commons/compress/utils/ExactMath.add:(IJ)I\n-   #48 = Methodref          #2.#128       // org/apache/commons/compress/archivers/zip/CircularBuffer.copy:(II)V\n-   #49 = Class              #129          // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-   #50 = Class              #130          // java/io/InputStream\n-   #51 = Class              #131          // org/apache/commons/compress/utils/InputStreamStatistics\n-   #52 = Utf8               in\n-   #53 = Utf8               Ljava/io/InputStream;\n-   #54 = Utf8               bits\n-   #55 = Utf8               Lorg/apache/commons/compress/archivers/zip/BitStream;\n-   #56 = Utf8               dictionarySize\n-   #57 = Utf8               I\n-   #58 = Utf8               numberOfTrees\n-   #59 = Utf8               minimumMatchLength\n-   #60 = Utf8               literalTree\n-   #61 = Utf8               Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-   #62 = Utf8               lengthTree\n-   #63 = Utf8               distanceTree\n-   #64 = Utf8               buffer\n-   #65 = Utf8               Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n-   #66 = Utf8               uncompressedCount\n-   #67 = Utf8               J\n-   #68 = Utf8               treeSizes\n-   #69 = Utf8               <init>\n-   #70 = Utf8               (IILjava/io/InputStream;)V\n-   #71 = Utf8               Code\n-   #72 = Utf8               LineNumberTable\n-   #73 = Utf8               StackMapTable\n-   #74 = Utf8               init\n-   #75 = Utf8               ()V\n-   #76 = Utf8               Exceptions\n-   #77 = Utf8               read\n-   #78 = Utf8               ()I\n-   #79 = Utf8               getCompressedCount\n-   #80 = Utf8               ()J\n-   #81 = Utf8               getUncompressedCount\n-   #82 = Utf8               close\n-   #83 = Utf8               fillBuffer\n-   #84 = Utf8               SourceFile\n-   #85 = Utf8               ExplodingInputStream.java\n-   #86 = NameAndType        #69:#75       // \"<init>\":()V\n-   #87 = Utf8               org/apache/commons/compress/archivers/zip/CircularBuffer\n-   #88 = NameAndType        #69:#132      // \"<init>\":(I)V\n-   #89 = NameAndType        #64:#65       // buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n-   #90 = Utf8               java/lang/IllegalArgumentException\n-   #91 = Utf8               The dictionary size must be 4096 or 8192\n-   #92 = NameAndType        #69:#133      // \"<init>\":(Ljava/lang/String;)V\n-   #93 = Utf8               The number of trees must be 2 or 3\n-   #94 = NameAndType        #56:#57       // dictionarySize:I\n-   #95 = NameAndType        #58:#57       // numberOfTrees:I\n-   #96 = NameAndType        #59:#57       // minimumMatchLength:I\n-   #97 = NameAndType        #52:#53       // in:Ljava/io/InputStream;\n-   #98 = NameAndType        #54:#55       // bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n-   #99 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n-  #100 = Utf8               org/apache/commons/compress/utils/CloseShieldFilterInputStream\n-  #101 = NameAndType        #69:#134      // \"<init>\":(Ljava/io/InputStream;)V\n-  #102 = Class              #135          // org/apache/commons/compress/archivers/zip/BinaryTree\n-  #103 = NameAndType        #136:#137     // decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-  #104 = NameAndType        #60:#61       // literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-  #105 = NameAndType        #62:#61       // lengthTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-  #106 = NameAndType        #63:#61       // distanceTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-  #107 = NameAndType        #68:#67       // treeSizes:J\n-  #108 = NameAndType        #138:#80      // getBytesRead:()J\n-  #109 = NameAndType        #82:#75       // close:()V\n-  #110 = Utf8               java/lang/Throwable\n-  #111 = NameAndType        #139:#140     // addSuppressed:(Ljava/lang/Throwable;)V\n-  #112 = Utf8               org/apache/commons/compress/archivers/zip/BitStream\n-  #113 = NameAndType        #141:#142     // available:()Z\n-  #114 = NameAndType        #83:#75       // fillBuffer:()V\n-  #115 = Utf8               java/io/IOException\n-  #116 = Utf8               bad IMPLODE stream\n-  #117 = NameAndType        #69:#143      // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #118 = NameAndType        #144:#78      // get:()I\n-  #119 = NameAndType        #66:#67       // uncompressedCount:J\n-  #120 = NameAndType        #74:#75       // init:()V\n-  #121 = NameAndType        #145:#78      // nextBit:()I\n-  #122 = NameAndType        #77:#146      // read:(Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n-  #123 = NameAndType        #147:#78      // nextByte:()I\n-  #124 = NameAndType        #148:#132     // put:(I)V\n-  #125 = NameAndType        #149:#150     // nextBits:(I)J\n-  #126 = Class              #151          // org/apache/commons/compress/utils/ExactMath\n-  #127 = NameAndType        #152:#153     // add:(IJ)I\n-  #128 = NameAndType        #154:#155     // copy:(II)V\n-  #129 = Utf8               org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-  #130 = Utf8               java/io/InputStream\n-  #131 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n-  #132 = Utf8               (I)V\n-  #133 = Utf8               (Ljava/lang/String;)V\n-  #134 = Utf8               (Ljava/io/InputStream;)V\n-  #135 = Utf8               org/apache/commons/compress/archivers/zip/BinaryTree\n-  #136 = Utf8               decode\n-  #137 = Utf8               (Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-  #138 = Utf8               getBytesRead\n-  #139 = Utf8               addSuppressed\n-  #140 = Utf8               (Ljava/lang/Throwable;)V\n-  #141 = Utf8               available\n-  #142 = Utf8               ()Z\n-  #143 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #144 = Utf8               get\n-  #145 = Utf8               nextBit\n-  #146 = Utf8               (Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n-  #147 = Utf8               nextByte\n-  #148 = Utf8               put\n-  #149 = Utf8               nextBits\n-  #150 = Utf8               (I)J\n-  #151 = Utf8               org/apache/commons/compress/utils/ExactMath\n-  #152 = Utf8               add\n-  #153 = Utf8               (IJ)I\n-  #154 = Utf8               copy\n-  #155 = Utf8               (II)V\n+    #1 = Methodref          #2.#3         // java/io/InputStream.\"<init>\":()V\n+    #2 = Class              #4            // java/io/InputStream\n+    #3 = NameAndType        #5:#6         // \"<init>\":()V\n+    #4 = Utf8               java/io/InputStream\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ()V\n+    #7 = Class              #8            // org/apache/commons/compress/archivers/zip/CircularBuffer\n+    #8 = Utf8               org/apache/commons/compress/archivers/zip/CircularBuffer\n+    #9 = Integer            32768\n+   #10 = Methodref          #7.#11        // org/apache/commons/compress/archivers/zip/CircularBuffer.\"<init>\":(I)V\n+   #11 = NameAndType        #5:#12        // \"<init>\":(I)V\n+   #12 = Utf8               (I)V\n+   #13 = Fieldref           #14.#15       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n+   #14 = Class              #16           // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+   #15 = NameAndType        #17:#18       // buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n+   #16 = Utf8               org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+   #17 = Utf8               buffer\n+   #18 = Utf8               Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n+   #19 = Class              #20           // java/lang/IllegalArgumentException\n+   #20 = Utf8               java/lang/IllegalArgumentException\n+   #21 = String             #22           // The dictionary size must be 4096 or 8192\n+   #22 = Utf8               The dictionary size must be 4096 or 8192\n+   #23 = Methodref          #19.#24       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #24 = NameAndType        #5:#25        // \"<init>\":(Ljava/lang/String;)V\n+   #25 = Utf8               (Ljava/lang/String;)V\n+   #26 = String             #27           // The number of trees must be 2 or 3\n+   #27 = Utf8               The number of trees must be 2 or 3\n+   #28 = Fieldref           #14.#29       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.dictionarySize:I\n+   #29 = NameAndType        #30:#31       // dictionarySize:I\n+   #30 = Utf8               dictionarySize\n+   #31 = Utf8               I\n+   #32 = Fieldref           #14.#33       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.numberOfTrees:I\n+   #33 = NameAndType        #34:#31       // numberOfTrees:I\n+   #34 = Utf8               numberOfTrees\n+   #35 = Fieldref           #14.#36       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.minimumMatchLength:I\n+   #36 = NameAndType        #37:#31       // minimumMatchLength:I\n+   #37 = Utf8               minimumMatchLength\n+   #38 = Fieldref           #14.#39       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.in:Ljava/io/InputStream;\n+   #39 = NameAndType        #40:#41       // in:Ljava/io/InputStream;\n+   #40 = Utf8               in\n+   #41 = Utf8               Ljava/io/InputStream;\n+   #42 = Fieldref           #14.#43       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+   #43 = NameAndType        #44:#45       // bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+   #44 = Utf8               bits\n+   #45 = Utf8               Lorg/apache/commons/compress/archivers/zip/BitStream;\n+   #46 = Class              #47           // org/apache/commons/compress/utils/CountingInputStream\n+   #47 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n+   #48 = Class              #49           // org/apache/commons/compress/utils/CloseShieldFilterInputStream\n+   #49 = Utf8               org/apache/commons/compress/utils/CloseShieldFilterInputStream\n+   #50 = Methodref          #48.#51       // org/apache/commons/compress/utils/CloseShieldFilterInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #51 = NameAndType        #5:#52        // \"<init>\":(Ljava/io/InputStream;)V\n+   #52 = Utf8               (Ljava/io/InputStream;)V\n+   #53 = Methodref          #46.#51       // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #54 = Methodref          #55.#56       // org/apache/commons/compress/archivers/zip/BinaryTree.decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+   #55 = Class              #57           // org/apache/commons/compress/archivers/zip/BinaryTree\n+   #56 = NameAndType        #58:#59       // decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+   #57 = Utf8               org/apache/commons/compress/archivers/zip/BinaryTree\n+   #58 = Utf8               decode\n+   #59 = Utf8               (Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+   #60 = Fieldref           #14.#61       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+   #61 = NameAndType        #62:#63       // literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+   #62 = Utf8               literalTree\n+   #63 = Utf8               Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+   #64 = Fieldref           #14.#65       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.lengthTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+   #65 = NameAndType        #66:#63       // lengthTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+   #66 = Utf8               lengthTree\n+   #67 = Fieldref           #14.#68       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.distanceTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+   #68 = NameAndType        #69:#63       // distanceTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+   #69 = Utf8               distanceTree\n+   #70 = Fieldref           #14.#71       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.treeSizes:J\n+   #71 = NameAndType        #72:#73       // treeSizes:J\n+   #72 = Utf8               treeSizes\n+   #73 = Utf8               J\n+   #74 = Methodref          #46.#75       // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+   #75 = NameAndType        #76:#77       // getBytesRead:()J\n+   #76 = Utf8               getBytesRead\n+   #77 = Utf8               ()J\n+   #78 = Methodref          #46.#79       // org/apache/commons/compress/utils/CountingInputStream.close:()V\n+   #79 = NameAndType        #80:#6        // close:()V\n+   #80 = Utf8               close\n+   #81 = Class              #82           // java/lang/Throwable\n+   #82 = Utf8               java/lang/Throwable\n+   #83 = Methodref          #81.#84       // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+   #84 = NameAndType        #85:#86       // addSuppressed:(Ljava/lang/Throwable;)V\n+   #85 = Utf8               addSuppressed\n+   #86 = Utf8               (Ljava/lang/Throwable;)V\n+   #87 = Class              #88           // org/apache/commons/compress/archivers/zip/BitStream\n+   #88 = Utf8               org/apache/commons/compress/archivers/zip/BitStream\n+   #89 = Methodref          #87.#51       // org/apache/commons/compress/archivers/zip/BitStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #90 = Methodref          #7.#91        // org/apache/commons/compress/archivers/zip/CircularBuffer.available:()Z\n+   #91 = NameAndType        #92:#93       // available:()Z\n+   #92 = Utf8               available\n+   #93 = Utf8               ()Z\n+   #94 = Methodref          #14.#95       // org/apache/commons/compress/archivers/zip/ExplodingInputStream.fillBuffer:()V\n+   #95 = NameAndType        #96:#6        // fillBuffer:()V\n+   #96 = Utf8               fillBuffer\n+   #97 = Class              #98           // java/io/IOException\n+   #98 = Utf8               java/io/IOException\n+   #99 = String             #100          // bad IMPLODE stream\n+  #100 = Utf8               bad IMPLODE stream\n+  #101 = Methodref          #97.#102      // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #102 = NameAndType        #5:#103       // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #103 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #104 = Methodref          #7.#105       // org/apache/commons/compress/archivers/zip/CircularBuffer.get:()I\n+  #105 = NameAndType        #106:#107     // get:()I\n+  #106 = Utf8               get\n+  #107 = Utf8               ()I\n+  #108 = Fieldref           #14.#109      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.uncompressedCount:J\n+  #109 = NameAndType        #110:#73      // uncompressedCount:J\n+  #110 = Utf8               uncompressedCount\n+  #111 = Methodref          #87.#75       // org/apache/commons/compress/archivers/zip/BitStream.getBytesRead:()J\n+  #112 = Methodref          #2.#79        // java/io/InputStream.close:()V\n+  #113 = Methodref          #14.#114      // org/apache/commons/compress/archivers/zip/ExplodingInputStream.init:()V\n+  #114 = NameAndType        #115:#6       // init:()V\n+  #115 = Utf8               init\n+  #116 = Methodref          #87.#117      // org/apache/commons/compress/archivers/zip/BitStream.nextBit:()I\n+  #117 = NameAndType        #118:#107     // nextBit:()I\n+  #118 = Utf8               nextBit\n+  #119 = Methodref          #55.#120      // org/apache/commons/compress/archivers/zip/BinaryTree.read:(Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n+  #120 = NameAndType        #121:#122     // read:(Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n+  #121 = Utf8               read\n+  #122 = Utf8               (Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n+  #123 = Methodref          #87.#124      // org/apache/commons/compress/archivers/zip/BitStream.nextByte:()I\n+  #124 = NameAndType        #125:#107     // nextByte:()I\n+  #125 = Utf8               nextByte\n+  #126 = Methodref          #7.#127       // org/apache/commons/compress/archivers/zip/CircularBuffer.put:(I)V\n+  #127 = NameAndType        #128:#12      // put:(I)V\n+  #128 = Utf8               put\n+  #129 = Methodref          #87.#130      // org/apache/commons/compress/archivers/zip/BitStream.nextBits:(I)J\n+  #130 = NameAndType        #131:#132     // nextBits:(I)J\n+  #131 = Utf8               nextBits\n+  #132 = Utf8               (I)J\n+  #133 = Long               -1l\n+  #135 = Methodref          #136.#137     // org/apache/commons/compress/utils/ExactMath.add:(IJ)I\n+  #136 = Class              #138          // org/apache/commons/compress/utils/ExactMath\n+  #137 = NameAndType        #139:#140     // add:(IJ)I\n+  #138 = Utf8               org/apache/commons/compress/utils/ExactMath\n+  #139 = Utf8               add\n+  #140 = Utf8               (IJ)I\n+  #141 = Methodref          #7.#142       // org/apache/commons/compress/archivers/zip/CircularBuffer.copy:(II)V\n+  #142 = NameAndType        #143:#144     // copy:(II)V\n+  #143 = Utf8               copy\n+  #144 = Utf8               (II)V\n+  #145 = Class              #146          // org/apache/commons/compress/utils/InputStreamStatistics\n+  #146 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n+  #147 = Utf8               (IILjava/io/InputStream;)V\n+  #148 = Utf8               Code\n+  #149 = Utf8               LineNumberTable\n+  #150 = Utf8               StackMapTable\n+  #151 = Utf8               Exceptions\n+  #152 = Utf8               getCompressedCount\n+  #153 = Utf8               getUncompressedCount\n+  #154 = Utf8               SourceFile\n+  #155 = Utf8               ExplodingInputStream.java\n {\n   private final java.io.InputStream in;\n     descriptor: Ljava/io/InputStream;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private org.apache.commons.compress.archivers.zip.BitStream bits;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/BitStream;\n@@ -211,53 +211,53 @@\n     descriptor: (IILjava/io/InputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n          1: invokespecial #1                  // Method java/io/InputStream.\"<init>\":()V\n          4: aload_0\n-         5: new           #2                  // class org/apache/commons/compress/archivers/zip/CircularBuffer\n+         5: new           #7                  // class org/apache/commons/compress/archivers/zip/CircularBuffer\n          8: dup\n-         9: ldc           #3                  // int 32768\n-        11: invokespecial #4                  // Method org/apache/commons/compress/archivers/zip/CircularBuffer.\"<init>\":(I)V\n-        14: putfield      #5                  // Field buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n+         9: ldc           #9                  // int 32768\n+        11: invokespecial #10                 // Method org/apache/commons/compress/archivers/zip/CircularBuffer.\"<init>\":(I)V\n+        14: putfield      #13                 // Field buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n         17: iload_1\n         18: sipush        4096\n         21: if_icmpeq     41\n         24: iload_1\n         25: sipush        8192\n         28: if_icmpeq     41\n-        31: new           #6                  // class java/lang/IllegalArgumentException\n+        31: new           #19                 // class java/lang/IllegalArgumentException\n         34: dup\n-        35: ldc           #7                  // String The dictionary size must be 4096 or 8192\n-        37: invokespecial #8                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        35: ldc           #21                 // String The dictionary size must be 4096 or 8192\n+        37: invokespecial #23                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         40: athrow\n         41: iload_2\n         42: iconst_2\n         43: if_icmpeq     61\n         46: iload_2\n         47: iconst_3\n         48: if_icmpeq     61\n-        51: new           #6                  // class java/lang/IllegalArgumentException\n+        51: new           #19                 // class java/lang/IllegalArgumentException\n         54: dup\n-        55: ldc           #9                  // String The number of trees must be 2 or 3\n-        57: invokespecial #8                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        55: ldc           #26                 // String The number of trees must be 2 or 3\n+        57: invokespecial #23                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         60: athrow\n         61: aload_0\n         62: iload_1\n-        63: putfield      #10                 // Field dictionarySize:I\n+        63: putfield      #28                 // Field dictionarySize:I\n         66: aload_0\n         67: iload_2\n-        68: putfield      #11                 // Field numberOfTrees:I\n+        68: putfield      #32                 // Field numberOfTrees:I\n         71: aload_0\n         72: iload_2\n-        73: putfield      #12                 // Field minimumMatchLength:I\n+        73: putfield      #35                 // Field minimumMatchLength:I\n         76: aload_0\n         77: aload_3\n-        78: putfield      #13                 // Field in:Ljava/io/InputStream;\n+        78: putfield      #38                 // Field in:Ljava/io/InputStream;\n         81: return\n       LineNumberTable:\n         line 81: 0\n         line 67: 4\n         line 82: 17\n         line 83: 31\n         line 85: 41\n@@ -276,71 +276,71 @@\n \n   private void init() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=4, args_size=1\n          0: aload_0\n-         1: getfield      #14                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+         1: getfield      #42                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n          4: ifnonnull     116\n-         7: new           #15                 // class org/apache/commons/compress/utils/CountingInputStream\n+         7: new           #46                 // class org/apache/commons/compress/utils/CountingInputStream\n         10: dup\n-        11: new           #16                 // class org/apache/commons/compress/utils/CloseShieldFilterInputStream\n+        11: new           #48                 // class org/apache/commons/compress/utils/CloseShieldFilterInputStream\n         14: dup\n         15: aload_0\n-        16: getfield      #13                 // Field in:Ljava/io/InputStream;\n-        19: invokespecial #17                 // Method org/apache/commons/compress/utils/CloseShieldFilterInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-        22: invokespecial #18                 // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+        16: getfield      #38                 // Field in:Ljava/io/InputStream;\n+        19: invokespecial #50                 // Method org/apache/commons/compress/utils/CloseShieldFilterInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+        22: invokespecial #53                 // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n         25: astore_1\n         26: aload_0\n-        27: getfield      #11                 // Field numberOfTrees:I\n+        27: getfield      #32                 // Field numberOfTrees:I\n         30: iconst_3\n         31: if_icmpne     45\n         34: aload_0\n         35: aload_1\n         36: sipush        256\n-        39: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-        42: putfield      #20                 // Field literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+        39: invokestatic  #54                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+        42: putfield      #60                 // Field literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n         45: aload_0\n         46: aload_1\n         47: bipush        64\n-        49: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-        52: putfield      #21                 // Field lengthTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+        49: invokestatic  #54                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+        52: putfield      #64                 // Field lengthTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n         55: aload_0\n         56: aload_1\n         57: bipush        64\n-        59: invokestatic  #19                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-        62: putfield      #22                 // Field distanceTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+        59: invokestatic  #54                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.decode:(Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+        62: putfield      #67                 // Field distanceTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n         65: aload_0\n         66: dup\n-        67: getfield      #23                 // Field treeSizes:J\n+        67: getfield      #70                 // Field treeSizes:J\n         70: aload_1\n-        71: invokevirtual #24                 // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+        71: invokevirtual #74                 // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n         74: ladd\n-        75: putfield      #23                 // Field treeSizes:J\n+        75: putfield      #70                 // Field treeSizes:J\n         78: aload_1\n-        79: invokevirtual #25                 // Method org/apache/commons/compress/utils/CountingInputStream.close:()V\n+        79: invokevirtual #78                 // Method org/apache/commons/compress/utils/CountingInputStream.close:()V\n         82: goto          101\n         85: astore_2\n         86: aload_1\n-        87: invokevirtual #25                 // Method org/apache/commons/compress/utils/CountingInputStream.close:()V\n+        87: invokevirtual #78                 // Method org/apache/commons/compress/utils/CountingInputStream.close:()V\n         90: goto          99\n         93: astore_3\n         94: aload_2\n         95: aload_3\n-        96: invokevirtual #27                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+        96: invokevirtual #83                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n         99: aload_2\n        100: athrow\n        101: aload_0\n-       102: new           #28                 // class org/apache/commons/compress/archivers/zip/BitStream\n+       102: new           #87                 // class org/apache/commons/compress/archivers/zip/BitStream\n        105: dup\n        106: aload_0\n-       107: getfield      #13                 // Field in:Ljava/io/InputStream;\n-       110: invokespecial #29                 // Method org/apache/commons/compress/archivers/zip/BitStream.\"<init>\":(Ljava/io/InputStream;)V\n-       113: putfield      #14                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+       107: getfield      #38                 // Field in:Ljava/io/InputStream;\n+       110: invokespecial #89                 // Method org/apache/commons/compress/archivers/zip/BitStream.\"<init>\":(Ljava/io/InputStream;)V\n+       113: putfield      #42                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n        116: return\n       Exception table:\n          from    to  target type\n             26    78    85   Class java/lang/Throwable\n             86    90    93   Class java/lang/Throwable\n       LineNumberTable:\n         line 100: 0\n@@ -373,40 +373,40 @@\n \n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #5                  // Field buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n-         4: invokevirtual #30                 // Method org/apache/commons/compress/archivers/zip/CircularBuffer.available:()Z\n+         1: getfield      #13                 // Field buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n+         4: invokevirtual #90                 // Method org/apache/commons/compress/archivers/zip/CircularBuffer.available:()Z\n          7: ifne          29\n         10: aload_0\n-        11: invokespecial #31                 // Method fillBuffer:()V\n+        11: invokespecial #94                 // Method fillBuffer:()V\n         14: goto          29\n         17: astore_1\n-        18: new           #32                 // class java/io/IOException\n+        18: new           #97                 // class java/io/IOException\n         21: dup\n-        22: ldc           #33                 // String bad IMPLODE stream\n+        22: ldc           #99                 // String bad IMPLODE stream\n         24: aload_1\n-        25: invokespecial #34                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+        25: invokespecial #101                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n         28: athrow\n         29: aload_0\n-        30: getfield      #5                  // Field buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n-        33: invokevirtual #35                 // Method org/apache/commons/compress/archivers/zip/CircularBuffer.get:()I\n+        30: getfield      #13                 // Field buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n+        33: invokevirtual #104                // Method org/apache/commons/compress/archivers/zip/CircularBuffer.get:()I\n         36: istore_1\n         37: iload_1\n         38: iconst_m1\n         39: if_icmple     52\n         42: aload_0\n         43: dup\n-        44: getfield      #36                 // Field uncompressedCount:J\n+        44: getfield      #108                // Field uncompressedCount:J\n         47: lconst_1\n         48: ladd\n-        49: putfield      #36                 // Field uncompressedCount:J\n+        49: putfield      #108                // Field uncompressedCount:J\n         52: iload_1\n         53: ireturn\n       Exception table:\n          from    to  target type\n             10    14    17   Class java/lang/IllegalArgumentException\n       LineNumberTable:\n         line 118: 0\n@@ -430,157 +430,157 @@\n \n   public long getCompressedCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #14                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n-         4: invokevirtual #37                 // Method org/apache/commons/compress/archivers/zip/BitStream.getBytesRead:()J\n+         1: getfield      #42                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+         4: invokevirtual #111                // Method org/apache/commons/compress/archivers/zip/BitStream.getBytesRead:()J\n          7: aload_0\n-         8: getfield      #23                 // Field treeSizes:J\n+         8: getfield      #70                 // Field treeSizes:J\n         11: ladd\n         12: lreturn\n       LineNumberTable:\n         line 138: 0\n \n   public long getUncompressedCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #36                 // Field uncompressedCount:J\n+         1: getfield      #108                // Field uncompressedCount:J\n          4: lreturn\n       LineNumberTable:\n         line 146: 0\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #13                 // Field in:Ljava/io/InputStream;\n-         4: invokevirtual #38                 // Method java/io/InputStream.close:()V\n+         1: getfield      #38                 // Field in:Ljava/io/InputStream;\n+         4: invokevirtual #112                // Method java/io/InputStream.close:()V\n          7: return\n       LineNumberTable:\n         line 154: 0\n         line 155: 7\n     Exceptions:\n       throws java.io.IOException\n \n   private void fillBuffer() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=9, args_size=1\n          0: aload_0\n-         1: invokespecial #39                 // Method init:()V\n+         1: invokespecial #113                // Method init:()V\n          4: aload_0\n-         5: getfield      #14                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n-         8: invokevirtual #40                 // Method org/apache/commons/compress/archivers/zip/BitStream.nextBit:()I\n+         5: getfield      #42                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+         8: invokevirtual #116                // Method org/apache/commons/compress/archivers/zip/BitStream.nextBit:()I\n         11: istore_1\n         12: iload_1\n         13: iconst_m1\n         14: if_icmpne     18\n         17: return\n         18: iload_1\n         19: iconst_1\n         20: if_icmpne     70\n         23: aload_0\n-        24: getfield      #20                 // Field literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+        24: getfield      #60                 // Field literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n         27: ifnull        45\n         30: aload_0\n-        31: getfield      #20                 // Field literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+        31: getfield      #60                 // Field literalTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n         34: aload_0\n-        35: getfield      #14                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n-        38: invokevirtual #41                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.read:(Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n+        35: getfield      #42                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+        38: invokevirtual #119                // Method org/apache/commons/compress/archivers/zip/BinaryTree.read:(Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n         41: istore_2\n         42: goto          53\n         45: aload_0\n-        46: getfield      #14                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n-        49: invokevirtual #42                 // Method org/apache/commons/compress/archivers/zip/BitStream.nextByte:()I\n+        46: getfield      #42                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+        49: invokevirtual #123                // Method org/apache/commons/compress/archivers/zip/BitStream.nextByte:()I\n         52: istore_2\n         53: iload_2\n         54: iconst_m1\n         55: if_icmpne     59\n         58: return\n         59: aload_0\n-        60: getfield      #5                  // Field buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n+        60: getfield      #13                 // Field buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n         63: iload_2\n-        64: invokevirtual #43                 // Method org/apache/commons/compress/archivers/zip/CircularBuffer.put:(I)V\n+        64: invokevirtual #126                // Method org/apache/commons/compress/archivers/zip/CircularBuffer.put:(I)V\n         67: goto          202\n         70: aload_0\n-        71: getfield      #10                 // Field dictionarySize:I\n+        71: getfield      #28                 // Field dictionarySize:I\n         74: sipush        4096\n         77: if_icmpne     85\n         80: bipush        6\n         82: goto          87\n         85: bipush        7\n         87: istore_2\n         88: aload_0\n-        89: getfield      #14                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+        89: getfield      #42                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n         92: iload_2\n-        93: invokevirtual #44                 // Method org/apache/commons/compress/archivers/zip/BitStream.nextBits:(I)J\n+        93: invokevirtual #129                // Method org/apache/commons/compress/archivers/zip/BitStream.nextBits:(I)J\n         96: l2i\n         97: istore_3\n         98: aload_0\n-        99: getfield      #22                 // Field distanceTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+        99: getfield      #67                 // Field distanceTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n        102: aload_0\n-       103: getfield      #14                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n-       106: invokevirtual #41                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.read:(Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n+       103: getfield      #42                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+       106: invokevirtual #119                // Method org/apache/commons/compress/archivers/zip/BinaryTree.read:(Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n        109: istore        4\n        111: iload         4\n        113: iconst_m1\n        114: if_icmpne     122\n        117: iload_3\n        118: ifgt          122\n        121: return\n        122: iload         4\n        124: iload_2\n        125: ishl\n        126: iload_3\n        127: ior\n        128: istore        5\n        130: aload_0\n-       131: getfield      #21                 // Field lengthTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n+       131: getfield      #64                 // Field lengthTree:Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n        134: aload_0\n-       135: getfield      #14                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n-       138: invokevirtual #41                 // Method org/apache/commons/compress/archivers/zip/BinaryTree.read:(Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n+       135: getfield      #42                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+       138: invokevirtual #119                // Method org/apache/commons/compress/archivers/zip/BinaryTree.read:(Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n        141: istore        6\n        143: iload         6\n        145: bipush        63\n        147: if_icmpne     180\n        150: aload_0\n-       151: getfield      #14                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n+       151: getfield      #42                 // Field bits:Lorg/apache/commons/compress/archivers/zip/BitStream;\n        154: bipush        8\n-       156: invokevirtual #44                 // Method org/apache/commons/compress/archivers/zip/BitStream.nextBits:(I)J\n+       156: invokevirtual #129                // Method org/apache/commons/compress/archivers/zip/BitStream.nextBits:(I)J\n        159: lstore        7\n        161: lload         7\n-       163: ldc2_w        #45                 // long -1l\n+       163: ldc2_w        #133                // long -1l\n        166: lcmp\n        167: ifne          171\n        170: return\n        171: iload         6\n        173: lload         7\n-       175: invokestatic  #47                 // Method org/apache/commons/compress/utils/ExactMath.add:(IJ)I\n+       175: invokestatic  #135                // Method org/apache/commons/compress/utils/ExactMath.add:(IJ)I\n        178: istore        6\n        180: iload         6\n        182: aload_0\n-       183: getfield      #12                 // Field minimumMatchLength:I\n+       183: getfield      #35                 // Field minimumMatchLength:I\n        186: iadd\n        187: istore        6\n        189: aload_0\n-       190: getfield      #5                  // Field buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n+       190: getfield      #13                 // Field buffer:Lorg/apache/commons/compress/archivers/zip/CircularBuffer;\n        193: iload         5\n        195: iconst_1\n        196: iadd\n        197: iload         6\n-       199: invokevirtual #48                 // Method org/apache/commons/compress/archivers/zip/CircularBuffer.copy:(II)V\n+       199: invokevirtual #141                // Method org/apache/commons/compress/archivers/zip/CircularBuffer.copy:(II)V\n        202: return\n       LineNumberTable:\n         line 162: 0\n         line 164: 4\n         line 165: 12\n         line 167: 17\n         line 169: 18\n"}]}
