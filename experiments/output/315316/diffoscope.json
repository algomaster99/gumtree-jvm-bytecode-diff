{"diffoscope-json-version": 1, "source1": "first/MagicNumberFileFilter.class", "source2": "second/MagicNumberFileFilter.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,150 +1,150 @@\n-  SHA-256 checksum 71f771bad7081e2f8c97842144ed6cc2a48dca5591be6ccb4667c92e41f131a2\n+  SHA-256 checksum 66254fe4c0e9ae228a1d77739f53f2bc115a3c98d0b34ab513f37e991298c966\n   Compiled from \"MagicNumberFileFilter.java\"\n public class org.apache.commons.io.filefilter.MagicNumberFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #38                         // org/apache/commons/io/filefilter/MagicNumberFileFilter\n-  super_class: #39                        // org/apache/commons/io/filefilter/AbstractFileFilter\n+  this_class: #2                          // org/apache/commons/io/filefilter/MagicNumberFileFilter\n+  super_class: #11                        // org/apache/commons/io/filefilter/AbstractFileFilter\n   interfaces: 1, fields: 3, methods: 6, attributes: 1\n Constant pool:\n-    #1 = Methodref          #38.#65       // org/apache/commons/io/filefilter/MagicNumberFileFilter.\"<init>\":([BJ)V\n-    #2 = Methodref          #38.#66       // org/apache/commons/io/filefilter/MagicNumberFileFilter.\"<init>\":(Ljava/lang/String;J)V\n-    #3 = Methodref          #39.#67       // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n-    #4 = Class              #68           // java/lang/IllegalArgumentException\n-    #5 = String             #69           // The magic number cannot be null\n-    #6 = Methodref          #4.#70        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-    #7 = Methodref          #32.#71       // java/lang/String.isEmpty:()Z\n-    #8 = String             #72           // The magic number must contain at least one byte\n-    #9 = String             #73           // The offset cannot be negative\n-   #10 = Methodref          #74.#75       // java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n-   #11 = Methodref          #32.#76       // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n-   #12 = Fieldref           #38.#77       // org/apache/commons/io/filefilter/MagicNumberFileFilter.magicNumbers:[B\n-   #13 = Fieldref           #38.#78       // org/apache/commons/io/filefilter/MagicNumberFileFilter.byteOffset:J\n-   #14 = Methodref          #79.#80       // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #15 = Methodref          #60.#81       // java/io/File.isFile:()Z\n-   #16 = Methodref          #60.#82       // java/io/File.canRead:()Z\n-   #17 = Class              #83           // java/io/RandomAccessFile\n-   #18 = String             #84           // r\n-   #19 = Methodref          #17.#85       // java/io/RandomAccessFile.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-   #20 = Methodref          #17.#86       // java/io/RandomAccessFile.seek:(J)V\n-   #21 = Methodref          #17.#87       // java/io/RandomAccessFile.read:([B)I\n-   #22 = Methodref          #17.#88       // java/io/RandomAccessFile.close:()V\n-   #23 = Methodref          #89.#90       // java/util/Arrays.equals:([B[B)Z\n-   #24 = Class              #91           // java/lang/Throwable\n-   #25 = Methodref          #24.#92       // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-   #26 = Class              #93           // java/io/IOException\n-   #27 = Class              #94           // java/lang/StringBuilder\n-   #28 = Methodref          #39.#95       // org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n-   #29 = Methodref          #27.#70       // java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n-   #30 = String             #96           // (\n-   #31 = Methodref          #27.#97       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #32 = Class              #98           // java/lang/String\n-   #33 = Methodref          #32.#99       // java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n-   #34 = String             #100          // ,\n-   #35 = Methodref          #27.#101      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #36 = String             #102          // )\n-   #37 = Methodref          #27.#95       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #38 = Class              #103          // org/apache/commons/io/filefilter/MagicNumberFileFilter\n-   #39 = Class              #104          // org/apache/commons/io/filefilter/AbstractFileFilter\n-   #40 = Class              #105          // java/io/Serializable\n-   #41 = Utf8               serialVersionUID\n-   #42 = Utf8               J\n-   #43 = Utf8               ConstantValue\n-   #44 = Long               -547733176983104172l\n-   #46 = Utf8               magicNumbers\n-   #47 = Utf8               [B\n+    #1 = Methodref          #2.#3         // org/apache/commons/io/filefilter/MagicNumberFileFilter.\"<init>\":([BJ)V\n+    #2 = Class              #4            // org/apache/commons/io/filefilter/MagicNumberFileFilter\n+    #3 = NameAndType        #5:#6         // \"<init>\":([BJ)V\n+    #4 = Utf8               org/apache/commons/io/filefilter/MagicNumberFileFilter\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ([BJ)V\n+    #7 = Methodref          #2.#8         // org/apache/commons/io/filefilter/MagicNumberFileFilter.\"<init>\":(Ljava/lang/String;J)V\n+    #8 = NameAndType        #5:#9         // \"<init>\":(Ljava/lang/String;J)V\n+    #9 = Utf8               (Ljava/lang/String;J)V\n+   #10 = Methodref          #11.#12       // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n+   #11 = Class              #13           // org/apache/commons/io/filefilter/AbstractFileFilter\n+   #12 = NameAndType        #5:#14        // \"<init>\":()V\n+   #13 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n+   #14 = Utf8               ()V\n+   #15 = Class              #16           // java/lang/IllegalArgumentException\n+   #16 = Utf8               java/lang/IllegalArgumentException\n+   #17 = String             #18           // The magic number cannot be null\n+   #18 = Utf8               The magic number cannot be null\n+   #19 = Methodref          #15.#20       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #20 = NameAndType        #5:#21        // \"<init>\":(Ljava/lang/String;)V\n+   #21 = Utf8               (Ljava/lang/String;)V\n+   #22 = Methodref          #23.#24       // java/lang/String.isEmpty:()Z\n+   #23 = Class              #25           // java/lang/String\n+   #24 = NameAndType        #26:#27       // isEmpty:()Z\n+   #25 = Utf8               java/lang/String\n+   #26 = Utf8               isEmpty\n+   #27 = Utf8               ()Z\n+   #28 = String             #29           // The magic number must contain at least one byte\n+   #29 = Utf8               The magic number must contain at least one byte\n+   #30 = String             #31           // The offset cannot be negative\n+   #31 = Utf8               The offset cannot be negative\n+   #32 = Methodref          #33.#34       // java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n+   #33 = Class              #35           // java/nio/charset/Charset\n+   #34 = NameAndType        #36:#37       // defaultCharset:()Ljava/nio/charset/Charset;\n+   #35 = Utf8               java/nio/charset/Charset\n+   #36 = Utf8               defaultCharset\n+   #37 = Utf8               ()Ljava/nio/charset/Charset;\n+   #38 = Methodref          #23.#39       // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n+   #39 = NameAndType        #40:#41       // getBytes:(Ljava/nio/charset/Charset;)[B\n+   #40 = Utf8               getBytes\n+   #41 = Utf8               (Ljava/nio/charset/Charset;)[B\n+   #42 = Fieldref           #2.#43        // org/apache/commons/io/filefilter/MagicNumberFileFilter.magicNumbers:[B\n+   #43 = NameAndType        #44:#45       // magicNumbers:[B\n+   #44 = Utf8               magicNumbers\n+   #45 = Utf8               [B\n+   #46 = Fieldref           #2.#47        // org/apache/commons/io/filefilter/MagicNumberFileFilter.byteOffset:J\n+   #47 = NameAndType        #48:#49       // byteOffset:J\n    #48 = Utf8               byteOffset\n-   #49 = Utf8               <init>\n-   #50 = Utf8               ([B)V\n-   #51 = Utf8               Code\n-   #52 = Utf8               LineNumberTable\n-   #53 = Utf8               (Ljava/lang/String;)V\n-   #54 = Utf8               (Ljava/lang/String;J)V\n-   #55 = Utf8               StackMapTable\n-   #56 = Utf8               ([BJ)V\n-   #57 = Class              #47           // \"[B\"\n-   #58 = Utf8               accept\n-   #59 = Utf8               (Ljava/io/File;)Z\n-   #60 = Class              #106          // java/io/File\n-   #61 = Utf8               toString\n-   #62 = Utf8               ()Ljava/lang/String;\n-   #63 = Utf8               SourceFile\n-   #64 = Utf8               MagicNumberFileFilter.java\n-   #65 = NameAndType        #49:#56       // \"<init>\":([BJ)V\n-   #66 = NameAndType        #49:#54       // \"<init>\":(Ljava/lang/String;J)V\n-   #67 = NameAndType        #49:#107      // \"<init>\":()V\n-   #68 = Utf8               java/lang/IllegalArgumentException\n-   #69 = Utf8               The magic number cannot be null\n-   #70 = NameAndType        #49:#53       // \"<init>\":(Ljava/lang/String;)V\n-   #71 = NameAndType        #108:#109     // isEmpty:()Z\n-   #72 = Utf8               The magic number must contain at least one byte\n-   #73 = Utf8               The offset cannot be negative\n-   #74 = Class              #110          // java/nio/charset/Charset\n-   #75 = NameAndType        #111:#112     // defaultCharset:()Ljava/nio/charset/Charset;\n-   #76 = NameAndType        #113:#114     // getBytes:(Ljava/nio/charset/Charset;)[B\n-   #77 = NameAndType        #46:#47       // magicNumbers:[B\n-   #78 = NameAndType        #48:#42       // byteOffset:J\n-   #79 = Class              #115          // java/lang/System\n-   #80 = NameAndType        #116:#117     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #81 = NameAndType        #118:#109     // isFile:()Z\n-   #82 = NameAndType        #119:#109     // canRead:()Z\n-   #83 = Utf8               java/io/RandomAccessFile\n-   #84 = Utf8               r\n-   #85 = NameAndType        #49:#120      // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-   #86 = NameAndType        #121:#122     // seek:(J)V\n-   #87 = NameAndType        #123:#124     // read:([B)I\n-   #88 = NameAndType        #125:#107     // close:()V\n-   #89 = Class              #126          // java/util/Arrays\n-   #90 = NameAndType        #127:#128     // equals:([B[B)Z\n-   #91 = Utf8               java/lang/Throwable\n-   #92 = NameAndType        #129:#130     // addSuppressed:(Ljava/lang/Throwable;)V\n-   #93 = Utf8               java/io/IOException\n-   #94 = Utf8               java/lang/StringBuilder\n-   #95 = NameAndType        #61:#62       // toString:()Ljava/lang/String;\n-   #96 = Utf8               (\n-   #97 = NameAndType        #131:#132     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #98 = Utf8               java/lang/String\n-   #99 = NameAndType        #49:#133      // \"<init>\":([BLjava/nio/charset/Charset;)V\n-  #100 = Utf8               ,\n-  #101 = NameAndType        #131:#134     // append:(J)Ljava/lang/StringBuilder;\n-  #102 = Utf8               )\n-  #103 = Utf8               org/apache/commons/io/filefilter/MagicNumberFileFilter\n-  #104 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n-  #105 = Utf8               java/io/Serializable\n-  #106 = Utf8               java/io/File\n-  #107 = Utf8               ()V\n-  #108 = Utf8               isEmpty\n-  #109 = Utf8               ()Z\n-  #110 = Utf8               java/nio/charset/Charset\n-  #111 = Utf8               defaultCharset\n-  #112 = Utf8               ()Ljava/nio/charset/Charset;\n-  #113 = Utf8               getBytes\n-  #114 = Utf8               (Ljava/nio/charset/Charset;)[B\n-  #115 = Utf8               java/lang/System\n-  #116 = Utf8               arraycopy\n-  #117 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #118 = Utf8               isFile\n-  #119 = Utf8               canRead\n-  #120 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n-  #121 = Utf8               seek\n-  #122 = Utf8               (J)V\n-  #123 = Utf8               read\n-  #124 = Utf8               ([B)I\n-  #125 = Utf8               close\n-  #126 = Utf8               java/util/Arrays\n-  #127 = Utf8               equals\n-  #128 = Utf8               ([B[B)Z\n-  #129 = Utf8               addSuppressed\n-  #130 = Utf8               (Ljava/lang/Throwable;)V\n-  #131 = Utf8               append\n-  #132 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #133 = Utf8               ([BLjava/nio/charset/Charset;)V\n-  #134 = Utf8               (J)Ljava/lang/StringBuilder;\n+   #49 = Utf8               J\n+   #50 = Methodref          #51.#52       // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #51 = Class              #53           // java/lang/System\n+   #52 = NameAndType        #54:#55       // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #53 = Utf8               java/lang/System\n+   #54 = Utf8               arraycopy\n+   #55 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #56 = Methodref          #57.#58       // java/io/File.isFile:()Z\n+   #57 = Class              #59           // java/io/File\n+   #58 = NameAndType        #60:#27       // isFile:()Z\n+   #59 = Utf8               java/io/File\n+   #60 = Utf8               isFile\n+   #61 = Methodref          #57.#62       // java/io/File.canRead:()Z\n+   #62 = NameAndType        #63:#27       // canRead:()Z\n+   #63 = Utf8               canRead\n+   #64 = Class              #65           // java/io/RandomAccessFile\n+   #65 = Utf8               java/io/RandomAccessFile\n+   #66 = String             #67           // r\n+   #67 = Utf8               r\n+   #68 = Methodref          #64.#69       // java/io/RandomAccessFile.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+   #69 = NameAndType        #5:#70        // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+   #70 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n+   #71 = Methodref          #64.#72       // java/io/RandomAccessFile.seek:(J)V\n+   #72 = NameAndType        #73:#74       // seek:(J)V\n+   #73 = Utf8               seek\n+   #74 = Utf8               (J)V\n+   #75 = Methodref          #64.#76       // java/io/RandomAccessFile.read:([B)I\n+   #76 = NameAndType        #77:#78       // read:([B)I\n+   #77 = Utf8               read\n+   #78 = Utf8               ([B)I\n+   #79 = Methodref          #64.#80       // java/io/RandomAccessFile.close:()V\n+   #80 = NameAndType        #81:#14       // close:()V\n+   #81 = Utf8               close\n+   #82 = Methodref          #83.#84       // java/util/Arrays.equals:([B[B)Z\n+   #83 = Class              #85           // java/util/Arrays\n+   #84 = NameAndType        #86:#87       // equals:([B[B)Z\n+   #85 = Utf8               java/util/Arrays\n+   #86 = Utf8               equals\n+   #87 = Utf8               ([B[B)Z\n+   #88 = Class              #89           // java/lang/Throwable\n+   #89 = Utf8               java/lang/Throwable\n+   #90 = Methodref          #88.#91       // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+   #91 = NameAndType        #92:#93       // addSuppressed:(Ljava/lang/Throwable;)V\n+   #92 = Utf8               addSuppressed\n+   #93 = Utf8               (Ljava/lang/Throwable;)V\n+   #94 = Class              #95           // java/io/IOException\n+   #95 = Utf8               java/io/IOException\n+   #96 = Class              #97           // java/lang/StringBuilder\n+   #97 = Utf8               java/lang/StringBuilder\n+   #98 = Methodref          #11.#99       // org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n+   #99 = NameAndType        #100:#101     // toString:()Ljava/lang/String;\n+  #100 = Utf8               toString\n+  #101 = Utf8               ()Ljava/lang/String;\n+  #102 = Methodref          #96.#20       // java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+  #103 = String             #104          // (\n+  #104 = Utf8               (\n+  #105 = Methodref          #96.#106      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #106 = NameAndType        #107:#108     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #107 = Utf8               append\n+  #108 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #109 = Methodref          #23.#110      // java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n+  #110 = NameAndType        #5:#111       // \"<init>\":([BLjava/nio/charset/Charset;)V\n+  #111 = Utf8               ([BLjava/nio/charset/Charset;)V\n+  #112 = String             #113          // ,\n+  #113 = Utf8               ,\n+  #114 = Methodref          #96.#115      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+  #115 = NameAndType        #107:#116     // append:(J)Ljava/lang/StringBuilder;\n+  #116 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #117 = String             #118          // )\n+  #118 = Utf8               )\n+  #119 = Methodref          #96.#99       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #120 = Class              #121          // java/io/Serializable\n+  #121 = Utf8               java/io/Serializable\n+  #122 = Utf8               serialVersionUID\n+  #123 = Utf8               ConstantValue\n+  #124 = Long               -547733176983104172l\n+  #126 = Utf8               ([B)V\n+  #127 = Utf8               Code\n+  #128 = Utf8               LineNumberTable\n+  #129 = Utf8               StackMapTable\n+  #130 = Class              #45           // \"[B\"\n+  #131 = Utf8               accept\n+  #132 = Utf8               (Ljava/io/File;)Z\n+  #133 = Utf8               SourceFile\n+  #134 = Utf8               MagicNumberFileFilter.java\n {\n   private static final long serialVersionUID = -547733176983104172l;\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long -547733176983104172l\n \n   private final byte[] magicNumbers;\n@@ -173,59 +173,59 @@\n     descriptor: (Ljava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: lconst_0\n-         3: invokespecial #2                  // Method \"<init>\":(Ljava/lang/String;J)V\n+         3: invokespecial #7                  // Method \"<init>\":(Ljava/lang/String;J)V\n          6: return\n       LineNumberTable:\n         line 137: 0\n         line 138: 6\n \n   public org.apache.commons.io.filefilter.MagicNumberFileFilter(java.lang.String, long);\n     descriptor: (Ljava/lang/String;J)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=3\n          0: aload_0\n-         1: invokespecial #3                  // Method org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n+         1: invokespecial #10                 // Method org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n          4: aload_1\n          5: ifnonnull     18\n-         8: new           #4                  // class java/lang/IllegalArgumentException\n+         8: new           #15                 // class java/lang/IllegalArgumentException\n         11: dup\n-        12: ldc           #5                  // String The magic number cannot be null\n-        14: invokespecial #6                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        12: ldc           #17                 // String The magic number cannot be null\n+        14: invokespecial #19                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         17: athrow\n         18: aload_1\n-        19: invokevirtual #7                  // Method java/lang/String.isEmpty:()Z\n+        19: invokevirtual #22                 // Method java/lang/String.isEmpty:()Z\n         22: ifeq          35\n-        25: new           #4                  // class java/lang/IllegalArgumentException\n+        25: new           #15                 // class java/lang/IllegalArgumentException\n         28: dup\n-        29: ldc           #8                  // String The magic number must contain at least one byte\n-        31: invokespecial #6                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        29: ldc           #28                 // String The magic number must contain at least one byte\n+        31: invokespecial #19                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         34: athrow\n         35: lload_2\n         36: lconst_0\n         37: lcmp\n         38: ifge          51\n-        41: new           #4                  // class java/lang/IllegalArgumentException\n+        41: new           #15                 // class java/lang/IllegalArgumentException\n         44: dup\n-        45: ldc           #9                  // String The offset cannot be negative\n-        47: invokespecial #6                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        45: ldc           #30                 // String The offset cannot be negative\n+        47: invokespecial #19                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         50: athrow\n         51: aload_0\n         52: aload_1\n-        53: invokestatic  #10                 // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n-        56: invokevirtual #11                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n-        59: putfield      #12                 // Field magicNumbers:[B\n+        53: invokestatic  #32                 // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n+        56: invokevirtual #38                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n+        59: putfield      #42                 // Field magicNumbers:[B\n         62: aload_0\n         63: lload_2\n-        64: putfield      #13                 // Field byteOffset:J\n+        64: putfield      #46                 // Field byteOffset:J\n         67: return\n       LineNumberTable:\n         line 160: 0\n         line 161: 4\n         line 162: 8\n         line 164: 18\n         line 165: 25\n@@ -244,55 +244,55 @@\n \n   public org.apache.commons.io.filefilter.MagicNumberFileFilter(byte[], long);\n     descriptor: ([BJ)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=4, args_size=3\n          0: aload_0\n-         1: invokespecial #3                  // Method org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n+         1: invokespecial #10                 // Method org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n          4: aload_1\n          5: ifnonnull     18\n-         8: new           #4                  // class java/lang/IllegalArgumentException\n+         8: new           #15                 // class java/lang/IllegalArgumentException\n         11: dup\n-        12: ldc           #5                  // String The magic number cannot be null\n-        14: invokespecial #6                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        12: ldc           #17                 // String The magic number cannot be null\n+        14: invokespecial #19                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         17: athrow\n         18: aload_1\n         19: arraylength\n         20: ifne          33\n-        23: new           #4                  // class java/lang/IllegalArgumentException\n+        23: new           #15                 // class java/lang/IllegalArgumentException\n         26: dup\n-        27: ldc           #8                  // String The magic number must contain at least one byte\n-        29: invokespecial #6                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        27: ldc           #28                 // String The magic number must contain at least one byte\n+        29: invokespecial #19                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         32: athrow\n         33: lload_2\n         34: lconst_0\n         35: lcmp\n         36: ifge          49\n-        39: new           #4                  // class java/lang/IllegalArgumentException\n+        39: new           #15                 // class java/lang/IllegalArgumentException\n         42: dup\n-        43: ldc           #9                  // String The offset cannot be negative\n-        45: invokespecial #6                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        43: ldc           #30                 // String The offset cannot be negative\n+        45: invokespecial #19                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         48: athrow\n         49: aload_0\n         50: aload_1\n         51: arraylength\n         52: newarray       byte\n-        54: putfield      #12                 // Field magicNumbers:[B\n+        54: putfield      #42                 // Field magicNumbers:[B\n         57: aload_1\n         58: iconst_0\n         59: aload_0\n-        60: getfield      #12                 // Field magicNumbers:[B\n+        60: getfield      #42                 // Field magicNumbers:[B\n         63: iconst_0\n         64: aload_1\n         65: arraylength\n-        66: invokestatic  #14                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        66: invokestatic  #50                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         69: aload_0\n         70: lload_2\n-        71: putfield      #13                 // Field byteOffset:J\n+        71: putfield      #46                 // Field byteOffset:J\n         74: return\n       LineNumberTable:\n         line 200: 0\n         line 201: 4\n         line 202: 8\n         line 204: 18\n         line 205: 23\n@@ -314,66 +314,66 @@\n     descriptor: (Ljava/io/File;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=6, args_size=2\n          0: aload_1\n          1: ifnull        108\n          4: aload_1\n-         5: invokevirtual #15                 // Method java/io/File.isFile:()Z\n+         5: invokevirtual #56                 // Method java/io/File.isFile:()Z\n          8: ifeq          108\n         11: aload_1\n-        12: invokevirtual #16                 // Method java/io/File.canRead:()Z\n+        12: invokevirtual #61                 // Method java/io/File.canRead:()Z\n         15: ifeq          108\n-        18: new           #17                 // class java/io/RandomAccessFile\n+        18: new           #64                 // class java/io/RandomAccessFile\n         21: dup\n         22: aload_1\n-        23: ldc           #18                 // String r\n-        25: invokespecial #19                 // Method java/io/RandomAccessFile.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+        23: ldc           #66                 // String r\n+        25: invokespecial #68                 // Method java/io/RandomAccessFile.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n         28: astore_2\n         29: aload_0\n-        30: getfield      #12                 // Field magicNumbers:[B\n+        30: getfield      #42                 // Field magicNumbers:[B\n         33: arraylength\n         34: newarray       byte\n         36: astore_3\n         37: aload_2\n         38: aload_0\n-        39: getfield      #13                 // Field byteOffset:J\n-        42: invokevirtual #20                 // Method java/io/RandomAccessFile.seek:(J)V\n+        39: getfield      #46                 // Field byteOffset:J\n+        42: invokevirtual #71                 // Method java/io/RandomAccessFile.seek:(J)V\n         45: aload_2\n         46: aload_3\n-        47: invokevirtual #21                 // Method java/io/RandomAccessFile.read:([B)I\n+        47: invokevirtual #75                 // Method java/io/RandomAccessFile.read:([B)I\n         50: istore        4\n         52: iload         4\n         54: aload_0\n-        55: getfield      #12                 // Field magicNumbers:[B\n+        55: getfield      #42                 // Field magicNumbers:[B\n         58: arraylength\n         59: if_icmpeq     72\n         62: iconst_0\n         63: istore        5\n         65: aload_2\n-        66: invokevirtual #22                 // Method java/io/RandomAccessFile.close:()V\n+        66: invokevirtual #79                 // Method java/io/RandomAccessFile.close:()V\n         69: iload         5\n         71: ireturn\n         72: aload_0\n-        73: getfield      #12                 // Field magicNumbers:[B\n+        73: getfield      #42                 // Field magicNumbers:[B\n         76: aload_3\n-        77: invokestatic  #23                 // Method java/util/Arrays.equals:([B[B)Z\n+        77: invokestatic  #82                 // Method java/util/Arrays.equals:([B[B)Z\n         80: istore        5\n         82: aload_2\n-        83: invokevirtual #22                 // Method java/io/RandomAccessFile.close:()V\n+        83: invokevirtual #79                 // Method java/io/RandomAccessFile.close:()V\n         86: iload         5\n         88: ireturn\n         89: astore_3\n         90: aload_2\n-        91: invokevirtual #22                 // Method java/io/RandomAccessFile.close:()V\n+        91: invokevirtual #79                 // Method java/io/RandomAccessFile.close:()V\n         94: goto          105\n         97: astore        4\n         99: aload_3\n        100: aload         4\n-       102: invokevirtual #25                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+       102: invokevirtual #90                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n        105: aload_3\n        106: athrow\n        107: astore_2\n        108: iconst_0\n        109: ireturn\n       Exception table:\n          from    to  target type\n@@ -419,48 +419,48 @@\n         frame_type = 0 /* same */\n \n   public java.lang.String toString();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=2, args_size=1\n-         0: new           #27                 // class java/lang/StringBuilder\n+         0: new           #96                 // class java/lang/StringBuilder\n          3: dup\n          4: aload_0\n-         5: invokespecial #28                 // Method org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n-         8: invokespecial #29                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+         5: invokespecial #98                 // Method org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n+         8: invokespecial #102                // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n         11: astore_1\n         12: aload_1\n-        13: ldc           #30                 // String (\n-        15: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        13: ldc           #103                // String (\n+        15: invokevirtual #105                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         18: pop\n         19: aload_1\n-        20: new           #32                 // class java/lang/String\n+        20: new           #23                 // class java/lang/String\n         23: dup\n         24: aload_0\n-        25: getfield      #12                 // Field magicNumbers:[B\n-        28: invokestatic  #10                 // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n-        31: invokespecial #33                 // Method java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n-        34: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        25: getfield      #42                 // Field magicNumbers:[B\n+        28: invokestatic  #32                 // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;\n+        31: invokespecial #109                // Method java/lang/String.\"<init>\":([BLjava/nio/charset/Charset;)V\n+        34: invokevirtual #105                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         37: pop\n         38: aload_1\n-        39: ldc           #34                 // String ,\n-        41: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        39: ldc           #112                // String ,\n+        41: invokevirtual #105                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         44: pop\n         45: aload_1\n         46: aload_0\n-        47: getfield      #13                 // Field byteOffset:J\n-        50: invokevirtual #35                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+        47: getfield      #46                 // Field byteOffset:J\n+        50: invokevirtual #114                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n         53: pop\n         54: aload_1\n-        55: ldc           #36                 // String )\n-        57: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        55: ldc           #117                // String )\n+        57: invokevirtual #105                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         60: pop\n         61: aload_1\n-        62: invokevirtual #37                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        62: invokevirtual #119                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n         65: areturn\n       LineNumberTable:\n         line 262: 0\n         line 263: 12\n         line 264: 19\n         line 266: 38\n         line 267: 45\n"}]}
