{"diffoscope-json-version": 1, "source1": "first/MethodHTML.class", "source2": "second/MethodHTML.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,90 +15,87 @@\n final class MethodHTML\n {\n     private final String className;\n     private final PrintWriter printWriter;\n     private final ConstantHTML constantHtml;\n     private final AttributeHTML attributeHtml;\n     \n-    MethodHTML(final String dir, final String className, final Method[] methods, final Field[] fields, final ConstantHTML constantHtml, final AttributeHTML attributeHtml, final Charset charset) throws FileNotFoundException, UnsupportedEncodingException {\n-        this.className = className;\n+    MethodHTML(final String str, final String s, final Method[] array, final Field[] array2, final ConstantHTML constantHtml, final AttributeHTML attributeHtml, final Charset charset) throws FileNotFoundException, UnsupportedEncodingException {\n+        this.className = s;\n         this.attributeHtml = attributeHtml;\n         this.constantHtml = constantHtml;\n-        try (final PrintWriter newPrintWriter = new PrintWriter(dir + className + \"_methods.html\", charset.name())) {\n-            (this.printWriter = newPrintWriter).print(\"<HTML><head><meta charset=\\\"\");\n+        try (final PrintWriter printWriter = new PrintWriter(str + s + \"_methods.html\", charset.name())) {\n+            (this.printWriter = printWriter).print(\"<HTML><head><meta charset=\\\"\");\n             this.printWriter.print(charset.name());\n             this.printWriter.println(\"\\\"></head>\");\n             this.printWriter.println(\"<BODY BGCOLOR=\\\"#C0C0C0\\\"><TABLE BORDER=0>\");\n             this.printWriter.println(\"<TR><TH ALIGN=LEFT>Access&nbsp;flags</TH><TH ALIGN=LEFT>Type</TH><TH ALIGN=LEFT>Field&nbsp;name</TH></TR>\");\n-            for (final Field field : fields) {\n-                this.writeField(field);\n+            for (int length = array2.length, i = 0; i < length; ++i) {\n+                this.writeField(array2[i]);\n             }\n             this.printWriter.println(\"</TABLE>\");\n             this.printWriter.println(\"<TABLE BORDER=0><TR><TH ALIGN=LEFT>Access&nbsp;flags</TH><TH ALIGN=LEFT>Return&nbsp;type</TH><TH ALIGN=LEFT>Method&nbsp;name</TH><TH ALIGN=LEFT>Arguments</TH></TR>\");\n-            for (int i = 0; i < methods.length; ++i) {\n-                this.writeMethod(methods[i], i);\n+            for (int j = 0; j < array.length; ++j) {\n+                this.writeMethod(array[j], j);\n             }\n             this.printWriter.println(\"</TABLE></BODY></HTML>\");\n         }\n     }\n     \n     private void writeField(final Field field) {\n-        final String type = Utility.signatureToString(field.getSignature());\n+        final String signatureToString = Utility.signatureToString(field.getSignature());\n         final String name = field.getName();\n-        String access = Utility.accessToString(field.getAccessFlags());\n-        access = Utility.replace(access, \" \", \"&nbsp;\");\n-        this.printWriter.print(\"<TR><TD><FONT COLOR=\\\"#FF0000\\\">\" + access + \"</FONT></TD>\\n<TD>\" + Class2HTML.referenceType(type) + \"</TD><TD><A NAME=\\\"field\" + name + \"\\\">\" + name + \"</A></TD>\");\n+        this.printWriter.print(\"<TR><TD><FONT COLOR=\\\"#FF0000\\\">\" + Utility.replace(Utility.accessToString(field.getAccessFlags()), \" \", \"&nbsp;\") + \"</FONT></TD>\\n<TD>\" + Class2HTML.referenceType(signatureToString) + \"</TD><TD><A NAME=\\\"field\" + name + \"\\\">\" + name + \"</A></TD>\");\n         final Attribute[] attributes = field.getAttributes();\n         for (int i = 0; i < attributes.length; ++i) {\n             this.attributeHtml.writeAttribute(attributes[i], name + \"@\" + i);\n         }\n-        for (int i = 0; i < attributes.length; ++i) {\n-            if (attributes[i].getTag() == 1) {\n-                final String str = attributes[i].toString();\n-                this.printWriter.print(\"<TD>= <A HREF=\\\"\" + this.className + \"_attributes.html#\" + name + \"@\" + i + \"\\\" TARGET=\\\"Attributes\\\">\" + str + \"</TD>\\n\");\n+        for (int j = 0; j < attributes.length; ++j) {\n+            if (attributes[j].getTag() == 1) {\n+                this.printWriter.print(\"<TD>= <A HREF=\\\"\" + this.className + \"_attributes.html#\" + name + \"@\" + j + \"\\\" TARGET=\\\"Attributes\\\">\" + attributes[j].toString() + \"</TD>\\n\");\n                 break;\n             }\n         }\n         this.printWriter.println(\"</TR>\");\n     }\n     \n-    private void writeMethod(final Method method, final int methodNumber) {\n+    private void writeMethod(final Method method, final int n) {\n         final String signature = method.getSignature();\n-        final String[] args = Utility.methodSignatureArgumentTypes(signature, false);\n-        final String type = Utility.methodSignatureReturnType(signature, false);\n+        final String[] methodSignatureArgumentTypes = Utility.methodSignatureArgumentTypes(signature, false);\n+        final String methodSignatureReturnType = Utility.methodSignatureReturnType(signature, false);\n         final String name = method.getName();\n-        String access = Utility.accessToString(method.getAccessFlags());\n+        final String accessToString = Utility.accessToString(method.getAccessFlags());\n         final Attribute[] attributes = method.getAttributes();\n-        access = Utility.replace(access, \" \", \"&nbsp;\");\n-        final String htmlName = Class2HTML.toHTML(name);\n-        this.printWriter.print(\"<TR VALIGN=TOP><TD><FONT COLOR=\\\"#FF0000\\\"><A NAME=method\" + methodNumber + \">\" + access + \"</A></FONT></TD>\");\n-        this.printWriter.print(\"<TD>\" + Class2HTML.referenceType(type) + \"</TD><TD><A HREF=\" + this.className + \"_code.html#method\" + methodNumber + \" TARGET=Code>\" + htmlName + \"</A></TD>\\n<TD>(\");\n-        for (int i = 0; i < args.length; ++i) {\n-            this.printWriter.print(Class2HTML.referenceType(args[i]));\n-            if (i < args.length - 1) {\n+        final String replace = Utility.replace(accessToString, \" \", \"&nbsp;\");\n+        final String html = Class2HTML.toHTML(name);\n+        this.printWriter.print(\"<TR VALIGN=TOP><TD><FONT COLOR=\\\"#FF0000\\\"><A NAME=method\" + n + \">\" + replace + \"</A></FONT></TD>\");\n+        this.printWriter.print(\"<TD>\" + Class2HTML.referenceType(methodSignatureReturnType) + \"</TD><TD><A HREF=\" + this.className + \"_code.html#method\" + n + \" TARGET=Code>\" + html + \"</A></TD>\\n<TD>(\");\n+        for (int i = 0; i < methodSignatureArgumentTypes.length; ++i) {\n+            this.printWriter.print(Class2HTML.referenceType(methodSignatureArgumentTypes[i]));\n+            if (i < methodSignatureArgumentTypes.length - 1) {\n                 this.printWriter.print(\", \");\n             }\n         }\n         this.printWriter.print(\")</TD></TR>\");\n-        for (int i = 0; i < attributes.length; ++i) {\n-            this.attributeHtml.writeAttribute(attributes[i], \"method\" + methodNumber + \"@\" + i, methodNumber);\n-            final byte tag = attributes[i].getTag();\n+        for (int j = 0; j < attributes.length; ++j) {\n+            this.attributeHtml.writeAttribute(attributes[j], \"method\" + n + \"@\" + j, n);\n+            final byte tag = attributes[j].getTag();\n             if (tag == 3) {\n                 this.printWriter.print(\"<TR VALIGN=TOP><TD COLSPAN=2></TD><TH ALIGN=LEFT>throws</TH><TD>\");\n-                final int[] exceptions = ((ExceptionTable)attributes[i]).getExceptionIndexTable();\n-                for (int j = 0; j < exceptions.length; ++j) {\n-                    this.printWriter.print(this.constantHtml.referenceConstant(exceptions[j]));\n-                    if (j < exceptions.length - 1) {\n+                final int[] exceptionIndexTable = ((ExceptionTable)attributes[j]).getExceptionIndexTable();\n+                for (int k = 0; k < exceptionIndexTable.length; ++k) {\n+                    this.printWriter.print(this.constantHtml.referenceConstant(exceptionIndexTable[k]));\n+                    if (k < exceptionIndexTable.length - 1) {\n                         this.printWriter.print(\", \");\n                     }\n                 }\n                 this.printWriter.println(\"</TD></TR>\");\n             }\n             else if (tag == 2) {\n-                final Attribute[] attributeArray = ((Code)attributes[i]).getAttributes();\n-                for (int j = 0; j < attributeArray.length; ++j) {\n-                    this.attributeHtml.writeAttribute(attributeArray[j], \"method\" + methodNumber + \"@\" + i + \"@\" + j, methodNumber);\n+                final Attribute[] attributes2 = ((Code)attributes[j]).getAttributes();\n+                for (int l = 0; l < attributes2.length; ++l) {\n+                    this.attributeHtml.writeAttribute(attributes2[l], \"method\" + n + \"@\" + j + \"@\" + l, n);\n                 }\n             }\n         }\n     }\n }\n"}]}
