{"diffoscope-json-version": 1, "source1": "first/Pass1Verifier.class", "source2": "second/Pass1Verifier.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -21,36 +21,36 @@\n                 this.jc = Repository.lookupClass(this.myOwner.getClassName());\n             }\n             catch (final ClassNotFoundException ex) {}\n         }\n         return this.jc;\n     }\n     \n-    public Pass1Verifier(final Verifier owner) {\n-        this.myOwner = owner;\n+    public Pass1Verifier(final Verifier myOwner) {\n+        this.myOwner = myOwner;\n     }\n     \n     public VerificationResult do_verify() {\n-        JavaClass jc;\n+        JavaClass javaClass;\n         try {\n-            jc = this.getJavaClass();\n-            if (jc != null && !this.myOwner.getClassName().equals(jc.getClassName())) {\n-                throw new LoadingException(\"Wrong name: the internal name of the .class file '\" + jc.getClassName() + \"' does not match the file's name '\" + this.myOwner.getClassName() + \"'.\");\n+            javaClass = this.getJavaClass();\n+            if (javaClass != null && !this.myOwner.getClassName().equals(javaClass.getClassName())) {\n+                throw new LoadingException(\"Wrong name: the internal name of the .class file '\" + javaClass.getClassName() + \"' does not match the file's name '\" + this.myOwner.getClassName() + \"'.\");\n             }\n         }\n-        catch (final LoadingException e) {\n-            return new VerificationResult(2, e.getMessage());\n+        catch (final LoadingException ex) {\n+            return new VerificationResult(2, ex.getMessage());\n         }\n-        catch (final ClassFormatException e2) {\n-            return new VerificationResult(2, e2.getMessage());\n+        catch (final ClassFormatException ex2) {\n+            return new VerificationResult(2, ex2.getMessage());\n         }\n-        catch (final RuntimeException e3) {\n-            return new VerificationResult(2, \"Parsing via BCEL did not succeed. \" + e3.getClass().getName() + \" occured:\\n\" + Utility.getStackTrace((Throwable)e3));\n+        catch (final RuntimeException ex3) {\n+            return new VerificationResult(2, \"Parsing via BCEL did not succeed. \" + ex3.getClass().getName() + \" occured:\\n\" + Utility.getStackTrace((Throwable)ex3));\n         }\n-        if (jc != null) {\n+        if (javaClass != null) {\n             return VerificationResult.VR_OK;\n         }\n         return new VerificationResult(2, \"Repository.lookup() failed. FILE NOT FOUND?\");\n     }\n     \n     public String[] getMessages() {\n         return super.getMessages();\n"}]}
