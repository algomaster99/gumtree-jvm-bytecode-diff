{"diffoscope-json-version": 1, "source1": "first/FileLocator.class", "source2": "second/FileLocator.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,21 +11,21 @@\n     private final String fileName;\n     private final String basePath;\n     private final URL sourceURL;\n     private final String encoding;\n     private final FileSystem fileSystem;\n     private final FileLocationStrategy locationStrategy;\n     \n-    public FileLocator(final FileLocator.FileLocatorBuilder builder) {\n-        this.fileName = FileLocator.FileLocatorBuilder.access$000(builder);\n-        this.basePath = FileLocator.FileLocatorBuilder.access$100(builder);\n-        this.sourceURL = FileLocator.FileLocatorBuilder.access$200(builder);\n-        this.encoding = FileLocator.FileLocatorBuilder.access$300(builder);\n-        this.fileSystem = FileLocator.FileLocatorBuilder.access$400(builder);\n-        this.locationStrategy = FileLocator.FileLocatorBuilder.access$500(builder);\n+    public FileLocator(final FileLocator.FileLocatorBuilder fileLocatorBuilder) {\n+        this.fileName = FileLocator.FileLocatorBuilder.access$000(fileLocatorBuilder);\n+        this.basePath = FileLocator.FileLocatorBuilder.access$100(fileLocatorBuilder);\n+        this.sourceURL = FileLocator.FileLocatorBuilder.access$200(fileLocatorBuilder);\n+        this.encoding = FileLocator.FileLocatorBuilder.access$300(fileLocatorBuilder);\n+        this.fileSystem = FileLocator.FileLocatorBuilder.access$400(fileLocatorBuilder);\n+        this.locationStrategy = FileLocator.FileLocatorBuilder.access$500(fileLocatorBuilder);\n     }\n     \n     public String getFileName() {\n         return this.fileName;\n     }\n     \n     public String getBasePath() {\n@@ -50,23 +50,23 @@\n     \n     @Override\n     public int hashCode() {\n         return new HashCodeBuilder().append((Object)this.getFileName()).append((Object)this.getBasePath()).append((Object)this.sourceURLAsString()).append((Object)this.getEncoding()).append((Object)this.getFileSystem()).append((Object)this.getLocationStrategy()).toHashCode();\n     }\n     \n     @Override\n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n             return true;\n         }\n-        if (!(obj instanceof FileLocator)) {\n+        if (!(o instanceof FileLocator)) {\n             return false;\n         }\n-        final FileLocator c = (FileLocator)obj;\n-        return new EqualsBuilder().append((Object)this.getFileName(), (Object)c.getFileName()).append((Object)this.getBasePath(), (Object)c.getBasePath()).append((Object)this.sourceURLAsString(), (Object)c.sourceURLAsString()).append((Object)this.getEncoding(), (Object)c.getEncoding()).append((Object)this.getFileSystem(), (Object)c.getFileSystem()).append((Object)this.getLocationStrategy(), (Object)c.getLocationStrategy()).isEquals();\n+        final FileLocator fileLocator = (FileLocator)o;\n+        return new EqualsBuilder().append((Object)this.getFileName(), (Object)fileLocator.getFileName()).append((Object)this.getBasePath(), (Object)fileLocator.getBasePath()).append((Object)this.sourceURLAsString(), (Object)fileLocator.sourceURLAsString()).append((Object)this.getEncoding(), (Object)fileLocator.getEncoding()).append((Object)this.getFileSystem(), (Object)fileLocator.getFileSystem()).append((Object)this.getLocationStrategy(), (Object)fileLocator.getLocationStrategy()).isEquals();\n     }\n     \n     @Override\n     public String toString() {\n         return new ToStringBuilder((Object)this).append(\"fileName\", (Object)this.getFileName()).append(\"basePath\", (Object)this.getBasePath()).append(\"sourceURL\", (Object)this.sourceURLAsString()).append(\"encoding\", (Object)this.getEncoding()).append(\"fileSystem\", (Object)this.getFileSystem()).append(\"locationStrategy\", (Object)this.getLocationStrategy()).toString();\n     }\n     \n"}]}
