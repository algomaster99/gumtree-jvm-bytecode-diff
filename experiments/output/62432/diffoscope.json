{"diffoscope-json-version": 1, "source1": "first/TFTPClient.class", "source2": "second/TFTPClient.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -115,33 +115,34 @@\n                             }\n                         }\n                         else {\n                             final TFTPErrorPacket error = new TFTPErrorPacket(recdAddress, recdPort, 5, \"Unexpected host or port.\");\n                             this.bufferedSend((TFTPPacket)error);\n                         }\n                     }\n-                    catch (final SocketException | InterruptedIOException e2) {\n+                    catch (final SocketException | InterruptedIOException ex) {\n                         if (++timeouts >= this.maxTimeouts) {\n                             throw new IOException(\"Connection timed out.\");\n                         }\n                     }\n-                    catch (final TFTPPacketException e3) {\n-                        throw new IOException(\"Bad packet: \" + e3.getMessage());\n+                    catch (final TFTPPacketException e2) {\n+                        throw new IOException(\"Bad packet: \" + e2.getMessage());\n                     }\n                 } while (wantReply);\n                 ack.setBlockNumber(lastBlock);\n                 sent = (TFTPPacket)ack;\n                 bytesRead += dataLength;\n                 this.totalBytesReceived += dataLength;\n             } while (dataLength == 512);\n             this.bufferedSend(sent);\n         }\n         finally {\n             this.endBufferedOps();\n         }\n+        this.endBufferedOps();\n         return bytesRead;\n     }\n     \n     public int receiveFile(final String fileName, final int mode, final OutputStream output, final String hostname) throws UnknownHostException, IOException {\n         return this.receiveFile(fileName, mode, output, InetAddress.getByName(hostname), 69);\n     }\n     \n@@ -214,21 +215,21 @@\n                             }\n                         }\n                         else {\n                             final TFTPErrorPacket error = new TFTPErrorPacket(recdAddress, recdPort, 5, \"Unexpected host or port.\");\n                             this.bufferedSend((TFTPPacket)error);\n                         }\n                     }\n-                    catch (final SocketException | InterruptedIOException e) {\n+                    catch (final SocketException | InterruptedIOException ex) {\n                         if (++timeouts >= this.maxTimeouts) {\n                             throw new IOException(\"Connection timed out.\");\n                         }\n                     }\n-                    catch (final TFTPPacketException e2) {\n-                        throw new IOException(\"Bad packet: \" + e2.getMessage());\n+                    catch (final TFTPPacketException e) {\n+                        throw new IOException(\"Bad packet: \" + e.getMessage());\n                     }\n                 } while (wantReply);\n                 if (lastAckWait) {\n                     break;\n                 }\n                 int dataLength = 512;\n                 int offset = 4;\n@@ -242,14 +243,15 @@\n                 sent = (TFTPPacket)data;\n                 this.totalBytesSent += totalThisPacket;\n             }\n         }\n         finally {\n             this.endBufferedOps();\n         }\n+        this.endBufferedOps();\n     }\n     \n     public void sendFile(final String fileName, final int mode, final InputStream input, final String hostname) throws UnknownHostException, IOException {\n         this.sendFile(fileName, mode, input, InetAddress.getByName(hostname), 69);\n     }\n     \n     public void sendFile(final String fileName, final int mode, final InputStream input, final String hostname, final int port) throws UnknownHostException, IOException {\n"}]}
