{"diffoscope-json-version": 1, "source1": "first/MutableFloat.class", "source2": "second/MutableFloat.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,121 +1,121 @@\n-  SHA-256 checksum 6f544ec08cf1ff6ffe5d7bcaf986326456c390360323031037b06d5ab9439425\n+  SHA-256 checksum 45bd9c2fcc1f5e1ed3a85b0045433bf297bac3008532b29d78f10f1379b97a92\n   Compiled from \"MutableFloat.java\"\n public class org.apache.commons.lang3.mutable.MutableFloat extends java.lang.Number implements java.lang.Comparable<org.apache.commons.lang3.mutable.MutableFloat>, org.apache.commons.lang3.mutable.Mutable<java.lang.Number>\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #9                          // org/apache/commons/lang3/mutable/MutableFloat\n-  super_class: #14                        // java/lang/Number\n+  this_class: #8                          // org/apache/commons/lang3/mutable/MutableFloat\n+  super_class: #2                         // java/lang/Number\n   interfaces: 2, fields: 2, methods: 35, attributes: 2\n Constant pool:\n-    #1 = Methodref          #14.#75       // java/lang/Number.\"<init>\":()V\n-    #2 = Fieldref           #9.#76        // org/apache/commons/lang3/mutable/MutableFloat.value:F\n-    #3 = Methodref          #14.#77       // java/lang/Number.floatValue:()F\n-    #4 = Methodref          #78.#79       // java/lang/Float.parseFloat:(Ljava/lang/String;)F\n-    #5 = Methodref          #78.#80       // java/lang/Float.valueOf:(F)Ljava/lang/Float;\n-    #6 = Methodref          #78.#81       // java/lang/Float.isNaN:(F)Z\n-    #7 = Methodref          #78.#82       // java/lang/Float.isInfinite:(F)Z\n-    #8 = Methodref          #9.#77        // org/apache/commons/lang3/mutable/MutableFloat.floatValue:()F\n-    #9 = Class              #83           // org/apache/commons/lang3/mutable/MutableFloat\n-   #10 = Methodref          #78.#84       // java/lang/Float.floatToIntBits:(F)I\n-   #11 = Methodref          #78.#85       // java/lang/Float.compare:(FF)I\n-   #12 = Methodref          #86.#87       // java/lang/String.valueOf:(F)Ljava/lang/String;\n-   #13 = Methodref          #9.#88        // org/apache/commons/lang3/mutable/MutableFloat.compareTo:(Lorg/apache/commons/lang3/mutable/MutableFloat;)I\n-   #14 = Class              #89           // java/lang/Number\n-   #15 = Methodref          #9.#90        // org/apache/commons/lang3/mutable/MutableFloat.setValue:(Ljava/lang/Number;)V\n-   #16 = Methodref          #9.#91        // org/apache/commons/lang3/mutable/MutableFloat.getValue:()Ljava/lang/Float;\n-   #17 = Class              #92           // java/lang/Comparable\n-   #18 = Class              #93           // org/apache/commons/lang3/mutable/Mutable\n-   #19 = Utf8               serialVersionUID\n-   #20 = Utf8               J\n-   #21 = Utf8               ConstantValue\n-   #22 = Long               5787169186l\n-   #24 = Utf8               value\n-   #25 = Utf8               F\n-   #26 = Utf8               <init>\n-   #27 = Utf8               ()V\n-   #28 = Utf8               Code\n-   #29 = Utf8               LineNumberTable\n-   #30 = Utf8               (F)V\n-   #31 = Utf8               (Ljava/lang/Number;)V\n-   #32 = Utf8               (Ljava/lang/String;)V\n-   #33 = Utf8               getValue\n-   #34 = Utf8               ()Ljava/lang/Float;\n-   #35 = Utf8               setValue\n-   #36 = Utf8               isNaN\n-   #37 = Utf8               ()Z\n-   #38 = Utf8               isInfinite\n-   #39 = Utf8               increment\n-   #40 = Utf8               getAndIncrement\n-   #41 = Utf8               ()F\n-   #42 = Utf8               incrementAndGet\n-   #43 = Utf8               decrement\n-   #44 = Utf8               getAndDecrement\n-   #45 = Utf8               decrementAndGet\n-   #46 = Utf8               add\n-   #47 = Utf8               subtract\n-   #48 = Utf8               addAndGet\n-   #49 = Utf8               (F)F\n-   #50 = Utf8               (Ljava/lang/Number;)F\n-   #51 = Utf8               getAndAdd\n-   #52 = Utf8               intValue\n-   #53 = Utf8               ()I\n-   #54 = Utf8               longValue\n-   #55 = Utf8               ()J\n-   #56 = Utf8               floatValue\n-   #57 = Utf8               doubleValue\n-   #58 = Utf8               ()D\n-   #59 = Utf8               toFloat\n-   #60 = Utf8               equals\n-   #61 = Utf8               (Ljava/lang/Object;)Z\n-   #62 = Utf8               StackMapTable\n-   #63 = Utf8               hashCode\n-   #64 = Utf8               compareTo\n-   #65 = Utf8               (Lorg/apache/commons/lang3/mutable/MutableFloat;)I\n-   #66 = Utf8               toString\n-   #67 = Utf8               ()Ljava/lang/String;\n-   #68 = Utf8               (Ljava/lang/Object;)I\n-   #69 = Utf8               (Ljava/lang/Object;)V\n-   #70 = Utf8               ()Ljava/lang/Object;\n-   #71 = Utf8               Signature\n-   #72 = Utf8               Ljava/lang/Number;Ljava/lang/Comparable<Lorg/apache/commons/lang3/mutable/MutableFloat;>;Lorg/apache/commons/lang3/mutable/Mutable<Ljava/lang/Number;>;\n-   #73 = Utf8               SourceFile\n-   #74 = Utf8               MutableFloat.java\n-   #75 = NameAndType        #26:#27       // \"<init>\":()V\n-   #76 = NameAndType        #24:#25       // value:F\n-   #77 = NameAndType        #56:#41       // floatValue:()F\n-   #78 = Class              #94           // java/lang/Float\n-   #79 = NameAndType        #95:#96       // parseFloat:(Ljava/lang/String;)F\n-   #80 = NameAndType        #97:#98       // valueOf:(F)Ljava/lang/Float;\n-   #81 = NameAndType        #36:#99       // isNaN:(F)Z\n-   #82 = NameAndType        #38:#99       // isInfinite:(F)Z\n-   #83 = Utf8               org/apache/commons/lang3/mutable/MutableFloat\n-   #84 = NameAndType        #100:#101     // floatToIntBits:(F)I\n-   #85 = NameAndType        #102:#103     // compare:(FF)I\n-   #86 = Class              #104          // java/lang/String\n-   #87 = NameAndType        #97:#105      // valueOf:(F)Ljava/lang/String;\n-   #88 = NameAndType        #64:#65       // compareTo:(Lorg/apache/commons/lang3/mutable/MutableFloat;)I\n-   #89 = Utf8               java/lang/Number\n-   #90 = NameAndType        #35:#31       // setValue:(Ljava/lang/Number;)V\n-   #91 = NameAndType        #33:#34       // getValue:()Ljava/lang/Float;\n-   #92 = Utf8               java/lang/Comparable\n-   #93 = Utf8               org/apache/commons/lang3/mutable/Mutable\n-   #94 = Utf8               java/lang/Float\n-   #95 = Utf8               parseFloat\n-   #96 = Utf8               (Ljava/lang/String;)F\n-   #97 = Utf8               valueOf\n-   #98 = Utf8               (F)Ljava/lang/Float;\n-   #99 = Utf8               (F)Z\n-  #100 = Utf8               floatToIntBits\n-  #101 = Utf8               (F)I\n-  #102 = Utf8               compare\n-  #103 = Utf8               (FF)I\n-  #104 = Utf8               java/lang/String\n-  #105 = Utf8               (F)Ljava/lang/String;\n+    #1 = Methodref          #2.#3         // java/lang/Number.\"<init>\":()V\n+    #2 = Class              #4            // java/lang/Number\n+    #3 = NameAndType        #5:#6         // \"<init>\":()V\n+    #4 = Utf8               java/lang/Number\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ()V\n+    #7 = Fieldref           #8.#9         // org/apache/commons/lang3/mutable/MutableFloat.value:F\n+    #8 = Class              #10           // org/apache/commons/lang3/mutable/MutableFloat\n+    #9 = NameAndType        #11:#12       // value:F\n+   #10 = Utf8               org/apache/commons/lang3/mutable/MutableFloat\n+   #11 = Utf8               value\n+   #12 = Utf8               F\n+   #13 = Methodref          #2.#14        // java/lang/Number.floatValue:()F\n+   #14 = NameAndType        #15:#16       // floatValue:()F\n+   #15 = Utf8               floatValue\n+   #16 = Utf8               ()F\n+   #17 = Methodref          #18.#19       // java/lang/Float.parseFloat:(Ljava/lang/String;)F\n+   #18 = Class              #20           // java/lang/Float\n+   #19 = NameAndType        #21:#22       // parseFloat:(Ljava/lang/String;)F\n+   #20 = Utf8               java/lang/Float\n+   #21 = Utf8               parseFloat\n+   #22 = Utf8               (Ljava/lang/String;)F\n+   #23 = Methodref          #18.#24       // java/lang/Float.valueOf:(F)Ljava/lang/Float;\n+   #24 = NameAndType        #25:#26       // valueOf:(F)Ljava/lang/Float;\n+   #25 = Utf8               valueOf\n+   #26 = Utf8               (F)Ljava/lang/Float;\n+   #27 = Methodref          #18.#28       // java/lang/Float.isNaN:(F)Z\n+   #28 = NameAndType        #29:#30       // isNaN:(F)Z\n+   #29 = Utf8               isNaN\n+   #30 = Utf8               (F)Z\n+   #31 = Methodref          #18.#32       // java/lang/Float.isInfinite:(F)Z\n+   #32 = NameAndType        #33:#30       // isInfinite:(F)Z\n+   #33 = Utf8               isInfinite\n+   #34 = Methodref          #8.#14        // org/apache/commons/lang3/mutable/MutableFloat.floatValue:()F\n+   #35 = Methodref          #18.#36       // java/lang/Float.floatToIntBits:(F)I\n+   #36 = NameAndType        #37:#38       // floatToIntBits:(F)I\n+   #37 = Utf8               floatToIntBits\n+   #38 = Utf8               (F)I\n+   #39 = Methodref          #18.#40       // java/lang/Float.compare:(FF)I\n+   #40 = NameAndType        #41:#42       // compare:(FF)I\n+   #41 = Utf8               compare\n+   #42 = Utf8               (FF)I\n+   #43 = Methodref          #44.#45       // java/lang/String.valueOf:(F)Ljava/lang/String;\n+   #44 = Class              #46           // java/lang/String\n+   #45 = NameAndType        #25:#47       // valueOf:(F)Ljava/lang/String;\n+   #46 = Utf8               java/lang/String\n+   #47 = Utf8               (F)Ljava/lang/String;\n+   #48 = Methodref          #8.#49        // org/apache/commons/lang3/mutable/MutableFloat.compareTo:(Lorg/apache/commons/lang3/mutable/MutableFloat;)I\n+   #49 = NameAndType        #50:#51       // compareTo:(Lorg/apache/commons/lang3/mutable/MutableFloat;)I\n+   #50 = Utf8               compareTo\n+   #51 = Utf8               (Lorg/apache/commons/lang3/mutable/MutableFloat;)I\n+   #52 = Methodref          #8.#53        // org/apache/commons/lang3/mutable/MutableFloat.setValue:(Ljava/lang/Number;)V\n+   #53 = NameAndType        #54:#55       // setValue:(Ljava/lang/Number;)V\n+   #54 = Utf8               setValue\n+   #55 = Utf8               (Ljava/lang/Number;)V\n+   #56 = Methodref          #8.#57        // org/apache/commons/lang3/mutable/MutableFloat.getValue:()Ljava/lang/Float;\n+   #57 = NameAndType        #58:#59       // getValue:()Ljava/lang/Float;\n+   #58 = Utf8               getValue\n+   #59 = Utf8               ()Ljava/lang/Float;\n+   #60 = Class              #61           // java/lang/Comparable\n+   #61 = Utf8               java/lang/Comparable\n+   #62 = Class              #63           // org/apache/commons/lang3/mutable/Mutable\n+   #63 = Utf8               org/apache/commons/lang3/mutable/Mutable\n+   #64 = Utf8               serialVersionUID\n+   #65 = Utf8               J\n+   #66 = Utf8               ConstantValue\n+   #67 = Long               5787169186l\n+   #69 = Utf8               Code\n+   #70 = Utf8               LineNumberTable\n+   #71 = Utf8               (F)V\n+   #72 = Utf8               (Ljava/lang/String;)V\n+   #73 = Utf8               ()Z\n+   #74 = Utf8               increment\n+   #75 = Utf8               getAndIncrement\n+   #76 = Utf8               incrementAndGet\n+   #77 = Utf8               decrement\n+   #78 = Utf8               getAndDecrement\n+   #79 = Utf8               decrementAndGet\n+   #80 = Utf8               add\n+   #81 = Utf8               subtract\n+   #82 = Utf8               addAndGet\n+   #83 = Utf8               (F)F\n+   #84 = Utf8               (Ljava/lang/Number;)F\n+   #85 = Utf8               getAndAdd\n+   #86 = Utf8               intValue\n+   #87 = Utf8               ()I\n+   #88 = Utf8               longValue\n+   #89 = Utf8               ()J\n+   #90 = Utf8               doubleValue\n+   #91 = Utf8               ()D\n+   #92 = Utf8               toFloat\n+   #93 = Utf8               equals\n+   #94 = Utf8               (Ljava/lang/Object;)Z\n+   #95 = Utf8               StackMapTable\n+   #96 = Utf8               hashCode\n+   #97 = Utf8               toString\n+   #98 = Utf8               ()Ljava/lang/String;\n+   #99 = Utf8               (Ljava/lang/Object;)I\n+  #100 = Utf8               (Ljava/lang/Object;)V\n+  #101 = Utf8               ()Ljava/lang/Object;\n+  #102 = Utf8               Signature\n+  #103 = Utf8               Ljava/lang/Number;Ljava/lang/Comparable<Lorg/apache/commons/lang3/mutable/MutableFloat;>;Lorg/apache/commons/lang3/mutable/Mutable<Ljava/lang/Number;>;\n+  #104 = Utf8               SourceFile\n+  #105 = Utf8               MutableFloat.java\n {\n   private static final long serialVersionUID = 5787169186l;\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long 5787169186l\n \n   private float value;\n@@ -139,15 +139,15 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: invokespecial #1                  // Method java/lang/Number.\"<init>\":()V\n          4: aload_0\n          5: fload_1\n-         6: putfield      #2                  // Field value:F\n+         6: putfield      #7                  // Field value:F\n          9: return\n       LineNumberTable:\n         line 50: 0\n         line 51: 4\n         line 52: 9\n \n   public org.apache.commons.lang3.mutable.MutableFloat(java.lang.Number);\n@@ -155,16 +155,16 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: invokespecial #1                  // Method java/lang/Number.\"<init>\":()V\n          4: aload_0\n          5: aload_1\n-         6: invokevirtual #3                  // Method java/lang/Number.floatValue:()F\n-         9: putfield      #2                  // Field value:F\n+         6: invokevirtual #13                 // Method java/lang/Number.floatValue:()F\n+         9: putfield      #7                  // Field value:F\n         12: return\n       LineNumberTable:\n         line 60: 0\n         line 61: 4\n         line 62: 12\n \n   public org.apache.commons.lang3.mutable.MutableFloat(java.lang.String);\n@@ -172,415 +172,415 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: invokespecial #1                  // Method java/lang/Number.\"<init>\":()V\n          4: aload_0\n          5: aload_1\n-         6: invokestatic  #4                  // Method java/lang/Float.parseFloat:(Ljava/lang/String;)F\n-         9: putfield      #2                  // Field value:F\n+         6: invokestatic  #17                 // Method java/lang/Float.parseFloat:(Ljava/lang/String;)F\n+         9: putfield      #7                  // Field value:F\n         12: return\n       LineNumberTable:\n         line 71: 0\n         line 72: 4\n         line 73: 12\n \n   public java.lang.Float getValue();\n     descriptor: ()Ljava/lang/Float;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #2                  // Field value:F\n-         4: invokestatic  #5                  // Method java/lang/Float.valueOf:(F)Ljava/lang/Float;\n+         1: getfield      #7                  // Field value:F\n+         4: invokestatic  #23                 // Method java/lang/Float.valueOf:(F)Ljava/lang/Float;\n          7: areturn\n       LineNumberTable:\n         line 83: 0\n \n   public void setValue(float);\n     descriptor: (F)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: fload_1\n-         2: putfield      #2                  // Field value:F\n+         2: putfield      #7                  // Field value:F\n          5: return\n       LineNumberTable:\n         line 92: 0\n         line 93: 5\n \n   public void setValue(java.lang.Number);\n     descriptor: (Ljava/lang/Number;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokevirtual #3                  // Method java/lang/Number.floatValue:()F\n-         5: putfield      #2                  // Field value:F\n+         2: invokevirtual #13                 // Method java/lang/Number.floatValue:()F\n+         5: putfield      #7                  // Field value:F\n          8: return\n       LineNumberTable:\n         line 103: 0\n         line 104: 8\n \n   public boolean isNaN();\n     descriptor: ()Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #2                  // Field value:F\n-         4: invokestatic  #6                  // Method java/lang/Float.isNaN:(F)Z\n+         1: getfield      #7                  // Field value:F\n+         4: invokestatic  #27                 // Method java/lang/Float.isNaN:(F)Z\n          7: ireturn\n       LineNumberTable:\n         line 113: 0\n \n   public boolean isInfinite();\n     descriptor: ()Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #2                  // Field value:F\n-         4: invokestatic  #7                  // Method java/lang/Float.isInfinite:(F)Z\n+         1: getfield      #7                  // Field value:F\n+         4: invokestatic  #31                 // Method java/lang/Float.isInfinite:(F)Z\n          7: ireturn\n       LineNumberTable:\n         line 122: 0\n \n   public void increment();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n          1: dup\n-         2: getfield      #2                  // Field value:F\n+         2: getfield      #7                  // Field value:F\n          5: fconst_1\n          6: fadd\n-         7: putfield      #2                  // Field value:F\n+         7: putfield      #7                  // Field value:F\n         10: return\n       LineNumberTable:\n         line 132: 0\n         line 133: 10\n \n   public float getAndIncrement();\n     descriptor: ()F\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #2                  // Field value:F\n+         1: getfield      #7                  // Field value:F\n          4: fstore_1\n          5: aload_0\n          6: dup\n-         7: getfield      #2                  // Field value:F\n+         7: getfield      #7                  // Field value:F\n         10: fconst_1\n         11: fadd\n-        12: putfield      #2                  // Field value:F\n+        12: putfield      #7                  // Field value:F\n         15: fload_1\n         16: freturn\n       LineNumberTable:\n         line 143: 0\n         line 144: 5\n         line 145: 15\n \n   public float incrementAndGet();\n     descriptor: ()F\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n          1: dup\n-         2: getfield      #2                  // Field value:F\n+         2: getfield      #7                  // Field value:F\n          5: fconst_1\n          6: fadd\n-         7: putfield      #2                  // Field value:F\n+         7: putfield      #7                  // Field value:F\n         10: aload_0\n-        11: getfield      #2                  // Field value:F\n+        11: getfield      #7                  // Field value:F\n         14: freturn\n       LineNumberTable:\n         line 156: 0\n         line 157: 10\n \n   public void decrement();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n          1: dup\n-         2: getfield      #2                  // Field value:F\n+         2: getfield      #7                  // Field value:F\n          5: fconst_1\n          6: fsub\n-         7: putfield      #2                  // Field value:F\n+         7: putfield      #7                  // Field value:F\n         10: return\n       LineNumberTable:\n         line 166: 0\n         line 167: 10\n \n   public float getAndDecrement();\n     descriptor: ()F\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #2                  // Field value:F\n+         1: getfield      #7                  // Field value:F\n          4: fstore_1\n          5: aload_0\n          6: dup\n-         7: getfield      #2                  // Field value:F\n+         7: getfield      #7                  // Field value:F\n         10: fconst_1\n         11: fsub\n-        12: putfield      #2                  // Field value:F\n+        12: putfield      #7                  // Field value:F\n         15: fload_1\n         16: freturn\n       LineNumberTable:\n         line 177: 0\n         line 178: 5\n         line 179: 15\n \n   public float decrementAndGet();\n     descriptor: ()F\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n          1: dup\n-         2: getfield      #2                  // Field value:F\n+         2: getfield      #7                  // Field value:F\n          5: fconst_1\n          6: fsub\n-         7: putfield      #2                  // Field value:F\n+         7: putfield      #7                  // Field value:F\n         10: aload_0\n-        11: getfield      #2                  // Field value:F\n+        11: getfield      #7                  // Field value:F\n         14: freturn\n       LineNumberTable:\n         line 190: 0\n         line 191: 10\n \n   public void add(float);\n     descriptor: (F)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: dup\n-         2: getfield      #2                  // Field value:F\n+         2: getfield      #7                  // Field value:F\n          5: fload_1\n          6: fadd\n-         7: putfield      #2                  // Field value:F\n+         7: putfield      #7                  // Field value:F\n         10: return\n       LineNumberTable:\n         line 202: 0\n         line 203: 10\n \n   public void add(java.lang.Number);\n     descriptor: (Ljava/lang/Number;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: dup\n-         2: getfield      #2                  // Field value:F\n+         2: getfield      #7                  // Field value:F\n          5: aload_1\n-         6: invokevirtual #3                  // Method java/lang/Number.floatValue:()F\n+         6: invokevirtual #13                 // Method java/lang/Number.floatValue:()F\n          9: fadd\n-        10: putfield      #2                  // Field value:F\n+        10: putfield      #7                  // Field value:F\n         13: return\n       LineNumberTable:\n         line 213: 0\n         line 214: 13\n \n   public void subtract(float);\n     descriptor: (F)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: dup\n-         2: getfield      #2                  // Field value:F\n+         2: getfield      #7                  // Field value:F\n          5: fload_1\n          6: fsub\n-         7: putfield      #2                  // Field value:F\n+         7: putfield      #7                  // Field value:F\n         10: return\n       LineNumberTable:\n         line 223: 0\n         line 224: 10\n \n   public void subtract(java.lang.Number);\n     descriptor: (Ljava/lang/Number;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: dup\n-         2: getfield      #2                  // Field value:F\n+         2: getfield      #7                  // Field value:F\n          5: aload_1\n-         6: invokevirtual #3                  // Method java/lang/Number.floatValue:()F\n+         6: invokevirtual #13                 // Method java/lang/Number.floatValue:()F\n          9: fsub\n-        10: putfield      #2                  // Field value:F\n+        10: putfield      #7                  // Field value:F\n         13: return\n       LineNumberTable:\n         line 234: 0\n         line 235: 13\n \n   public float addAndGet(float);\n     descriptor: (F)F\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: dup\n-         2: getfield      #2                  // Field value:F\n+         2: getfield      #7                  // Field value:F\n          5: fload_1\n          6: fadd\n-         7: putfield      #2                  // Field value:F\n+         7: putfield      #7                  // Field value:F\n         10: aload_0\n-        11: getfield      #2                  // Field value:F\n+        11: getfield      #7                  // Field value:F\n         14: freturn\n       LineNumberTable:\n         line 246: 0\n         line 247: 10\n \n   public float addAndGet(java.lang.Number);\n     descriptor: (Ljava/lang/Number;)F\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: dup\n-         2: getfield      #2                  // Field value:F\n+         2: getfield      #7                  // Field value:F\n          5: aload_1\n-         6: invokevirtual #3                  // Method java/lang/Number.floatValue:()F\n+         6: invokevirtual #13                 // Method java/lang/Number.floatValue:()F\n          9: fadd\n-        10: putfield      #2                  // Field value:F\n+        10: putfield      #7                  // Field value:F\n         13: aload_0\n-        14: getfield      #2                  // Field value:F\n+        14: getfield      #7                  // Field value:F\n         17: freturn\n       LineNumberTable:\n         line 260: 0\n         line 261: 13\n \n   public float getAndAdd(float);\n     descriptor: (F)F\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_0\n-         1: getfield      #2                  // Field value:F\n+         1: getfield      #7                  // Field value:F\n          4: fstore_2\n          5: aload_0\n          6: dup\n-         7: getfield      #2                  // Field value:F\n+         7: getfield      #7                  // Field value:F\n         10: fload_1\n         11: fadd\n-        12: putfield      #2                  // Field value:F\n+        12: putfield      #7                  // Field value:F\n         15: fload_2\n         16: freturn\n       LineNumberTable:\n         line 273: 0\n         line 274: 5\n         line 275: 15\n \n   public float getAndAdd(java.lang.Number);\n     descriptor: (Ljava/lang/Number;)F\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_0\n-         1: getfield      #2                  // Field value:F\n+         1: getfield      #7                  // Field value:F\n          4: fstore_2\n          5: aload_0\n          6: dup\n-         7: getfield      #2                  // Field value:F\n+         7: getfield      #7                  // Field value:F\n         10: aload_1\n-        11: invokevirtual #3                  // Method java/lang/Number.floatValue:()F\n+        11: invokevirtual #13                 // Method java/lang/Number.floatValue:()F\n         14: fadd\n-        15: putfield      #2                  // Field value:F\n+        15: putfield      #7                  // Field value:F\n         18: fload_2\n         19: freturn\n       LineNumberTable:\n         line 288: 0\n         line 289: 5\n         line 290: 18\n \n   public int intValue();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #2                  // Field value:F\n+         1: getfield      #7                  // Field value:F\n          4: f2i\n          5: ireturn\n       LineNumberTable:\n         line 302: 0\n \n   public long longValue();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #2                  // Field value:F\n+         1: getfield      #7                  // Field value:F\n          4: f2l\n          5: lreturn\n       LineNumberTable:\n         line 312: 0\n \n   public float floatValue();\n     descriptor: ()F\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #2                  // Field value:F\n+         1: getfield      #7                  // Field value:F\n          4: freturn\n       LineNumberTable:\n         line 322: 0\n \n   public double doubleValue();\n     descriptor: ()D\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #2                  // Field value:F\n+         1: getfield      #7                  // Field value:F\n          4: f2d\n          5: dreturn\n       LineNumberTable:\n         line 332: 0\n \n   public java.lang.Float toFloat();\n     descriptor: ()Ljava/lang/Float;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokevirtual #8                  // Method floatValue:()F\n-         4: invokestatic  #5                  // Method java/lang/Float.valueOf:(F)Ljava/lang/Float;\n+         1: invokevirtual #34                 // Method floatValue:()F\n+         4: invokestatic  #23                 // Method java/lang/Float.valueOf:(F)Ljava/lang/Float;\n          7: areturn\n       LineNumberTable:\n         line 342: 0\n \n   public boolean equals(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n-         1: instanceof    #9                  // class org/apache/commons/lang3/mutable/MutableFloat\n+         1: instanceof    #8                  // class org/apache/commons/lang3/mutable/MutableFloat\n          4: ifeq          31\n          7: aload_1\n-         8: checkcast     #9                  // class org/apache/commons/lang3/mutable/MutableFloat\n-        11: getfield      #2                  // Field value:F\n-        14: invokestatic  #10                 // Method java/lang/Float.floatToIntBits:(F)I\n+         8: checkcast     #8                  // class org/apache/commons/lang3/mutable/MutableFloat\n+        11: getfield      #7                  // Field value:F\n+        14: invokestatic  #35                 // Method java/lang/Float.floatToIntBits:(F)I\n         17: aload_0\n-        18: getfield      #2                  // Field value:F\n-        21: invokestatic  #10                 // Method java/lang/Float.floatToIntBits:(F)I\n+        18: getfield      #7                  // Field value:F\n+        21: invokestatic  #35                 // Method java/lang/Float.floatToIntBits:(F)I\n         24: if_icmpne     31\n         27: iconst_1\n         28: goto          32\n         31: iconst_0\n         32: ireturn\n       LineNumberTable:\n         line 379: 0\n@@ -593,78 +593,78 @@\n \n   public int hashCode();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #2                  // Field value:F\n-         4: invokestatic  #10                 // Method java/lang/Float.floatToIntBits:(F)I\n+         1: getfield      #7                  // Field value:F\n+         4: invokestatic  #35                 // Method java/lang/Float.floatToIntBits:(F)I\n          7: ireturn\n       LineNumberTable:\n         line 390: 0\n \n   public int compareTo(org.apache.commons.lang3.mutable.MutableFloat);\n     descriptor: (Lorg/apache/commons/lang3/mutable/MutableFloat;)I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n-         1: getfield      #2                  // Field value:F\n+         1: getfield      #7                  // Field value:F\n          4: aload_1\n-         5: getfield      #2                  // Field value:F\n-         8: invokestatic  #11                 // Method java/lang/Float.compare:(FF)I\n+         5: getfield      #7                  // Field value:F\n+         8: invokestatic  #39                 // Method java/lang/Float.compare:(FF)I\n         11: ireturn\n       LineNumberTable:\n         line 402: 0\n \n   public java.lang.String toString();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #2                  // Field value:F\n-         4: invokestatic  #12                 // Method java/lang/String.valueOf:(F)Ljava/lang/String;\n+         1: getfield      #7                  // Field value:F\n+         4: invokestatic  #43                 // Method java/lang/String.valueOf:(F)Ljava/lang/String;\n          7: areturn\n       LineNumberTable:\n         line 413: 0\n \n   public int compareTo(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)I\n     flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: checkcast     #9                  // class org/apache/commons/lang3/mutable/MutableFloat\n-         5: invokevirtual #13                 // Method compareTo:(Lorg/apache/commons/lang3/mutable/MutableFloat;)I\n+         2: checkcast     #8                  // class org/apache/commons/lang3/mutable/MutableFloat\n+         5: invokevirtual #48                 // Method compareTo:(Lorg/apache/commons/lang3/mutable/MutableFloat;)I\n          8: ireturn\n       LineNumberTable:\n         line 27: 0\n \n   public void setValue(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)V\n     flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: checkcast     #14                 // class java/lang/Number\n-         5: invokevirtual #15                 // Method setValue:(Ljava/lang/Number;)V\n+         2: checkcast     #2                  // class java/lang/Number\n+         5: invokevirtual #52                 // Method setValue:(Ljava/lang/Number;)V\n          8: return\n       LineNumberTable:\n         line 27: 0\n \n   public java.lang.Object getValue();\n     descriptor: ()Ljava/lang/Object;\n     flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokevirtual #16                 // Method getValue:()Ljava/lang/Float;\n+         1: invokevirtual #56                 // Method getValue:()Ljava/lang/Float;\n          4: areturn\n       LineNumberTable:\n         line 27: 0\n }\n-Signature: #72                          // Ljava/lang/Number;Ljava/lang/Comparable<Lorg/apache/commons/lang3/mutable/MutableFloat;>;Lorg/apache/commons/lang3/mutable/Mutable<Ljava/lang/Number;>;\n+Signature: #103                         // Ljava/lang/Number;Ljava/lang/Comparable<Lorg/apache/commons/lang3/mutable/MutableFloat;>;Lorg/apache/commons/lang3/mutable/Mutable<Ljava/lang/Number;>;\n SourceFile: \"MutableFloat.java\"\n"}]}
