{"diffoscope-json-version": 1, "source1": "first/DynamicCombinedConfiguration.class", "source2": "second/DynamicCombinedConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -30,64 +30,63 @@\n     private final List<DynamicCombinedConfiguration.ConfigData> configurations;\n     private final Map<String, Configuration> namedConfigurations;\n     private String keyPattern;\n     private NodeCombiner nodeCombiner;\n     private String loggerName;\n     private final ConfigurationInterpolator localSubst;\n     \n-    public DynamicCombinedConfiguration(final NodeCombiner comb) {\n+    public DynamicCombinedConfiguration(final NodeCombiner nodeCombiner) {\n         this.configs = new ConcurrentHashMap<String, CombinedConfiguration>();\n         this.configurations = new ArrayList<DynamicCombinedConfiguration.ConfigData>();\n         this.namedConfigurations = new HashMap<String, Configuration>();\n         this.loggerName = DynamicCombinedConfiguration.class.getName();\n-        this.setNodeCombiner(comb);\n+        this.setNodeCombiner(nodeCombiner);\n         this.initLogger(new ConfigurationLogger((Class)DynamicCombinedConfiguration.class));\n         this.localSubst = this.initLocalInterpolator();\n     }\n     \n     public DynamicCombinedConfiguration() {\n         this.configs = new ConcurrentHashMap<String, CombinedConfiguration>();\n         this.configurations = new ArrayList<DynamicCombinedConfiguration.ConfigData>();\n         this.namedConfigurations = new HashMap<String, Configuration>();\n         this.loggerName = DynamicCombinedConfiguration.class.getName();\n         this.initLogger(new ConfigurationLogger((Class)DynamicCombinedConfiguration.class));\n         this.localSubst = this.initLocalInterpolator();\n     }\n     \n-    public void setKeyPattern(final String pattern) {\n-        this.keyPattern = pattern;\n+    public void setKeyPattern(final String keyPattern) {\n+        this.keyPattern = keyPattern;\n     }\n     \n     public String getKeyPattern() {\n         return this.keyPattern;\n     }\n     \n-    public void setLoggerName(final String name) {\n-        this.loggerName = name;\n+    public void setLoggerName(final String loggerName) {\n+        this.loggerName = loggerName;\n     }\n     \n     public NodeCombiner getNodeCombiner() {\n         return this.nodeCombiner;\n     }\n     \n     public void setNodeCombiner(final NodeCombiner nodeCombiner) {\n         if (nodeCombiner == null) {\n             throw new IllegalArgumentException(\"Node combiner must not be null!\");\n         }\n         this.nodeCombiner = nodeCombiner;\n         this.invalidateAll();\n     }\n     \n-    public void addConfiguration(final Configuration config, final String name, final String at) {\n+    public void addConfiguration(final Configuration configuration, final String s, final String s2) {\n         this.beginWrite(true);\n         try {\n-            final DynamicCombinedConfiguration.ConfigData cd = new DynamicCombinedConfiguration.ConfigData(config, name, at);\n-            this.configurations.add(cd);\n-            if (name != null) {\n-                this.namedConfigurations.put(name, config);\n+            this.configurations.add(new DynamicCombinedConfiguration.ConfigData(configuration, s, s2));\n+            if (s != null) {\n+                this.namedConfigurations.put(s, configuration);\n             }\n             this.configs.clear();\n         }\n         finally {\n             this.endWrite();\n         }\n     }\n@@ -98,29 +97,28 @@\n             return this.configurations.size();\n         }\n         finally {\n             this.endRead();\n         }\n     }\n     \n-    public Configuration getConfiguration(final int index) {\n+    public Configuration getConfiguration(final int n) {\n         this.beginRead(false);\n         try {\n-            final DynamicCombinedConfiguration.ConfigData cd = (DynamicCombinedConfiguration.ConfigData)this.configurations.get(index);\n-            return cd.getConfiguration();\n+            return ((DynamicCombinedConfiguration.ConfigData)this.configurations.get(n)).getConfiguration();\n         }\n         finally {\n             this.endRead();\n         }\n     }\n     \n-    public Configuration getConfiguration(final String name) {\n+    public Configuration getConfiguration(final String s) {\n         this.beginRead(false);\n         try {\n-            return this.namedConfigurations.get(name);\n+            return this.namedConfigurations.get(s);\n         }\n         finally {\n             this.endRead();\n         }\n     }\n     \n     public Set<String> getConfigurationNames() {\n@@ -129,269 +127,269 @@\n             return this.namedConfigurations.keySet();\n         }\n         finally {\n             this.endRead();\n         }\n     }\n     \n-    public Configuration removeConfiguration(final String name) {\n-        final Configuration conf = this.getConfiguration(name);\n-        if (conf != null) {\n-            this.removeConfiguration(conf);\n+    public Configuration removeConfiguration(final String s) {\n+        final Configuration configuration = this.getConfiguration(s);\n+        if (configuration != null) {\n+            this.removeConfiguration(configuration);\n         }\n-        return conf;\n+        return configuration;\n     }\n     \n-    public boolean removeConfiguration(final Configuration config) {\n+    public boolean removeConfiguration(final Configuration configuration) {\n         this.beginWrite(false);\n         try {\n-            for (int index = 0; index < this.getNumberOfConfigurations(); ++index) {\n-                if (((DynamicCombinedConfiguration.ConfigData)this.configurations.get(index)).getConfiguration() == config) {\n-                    this.removeConfigurationAt(index);\n+            for (int i = 0; i < this.getNumberOfConfigurations(); ++i) {\n+                if (((DynamicCombinedConfiguration.ConfigData)this.configurations.get(i)).getConfiguration() == configuration) {\n+                    this.removeConfigurationAt(i);\n                     return true;\n                 }\n             }\n             return false;\n         }\n         finally {\n             this.endWrite();\n         }\n     }\n     \n-    public Configuration removeConfigurationAt(final int index) {\n+    public Configuration removeConfigurationAt(final int n) {\n         this.beginWrite(false);\n         try {\n-            final DynamicCombinedConfiguration.ConfigData cd = (DynamicCombinedConfiguration.ConfigData)this.configurations.remove(index);\n-            if (cd.getName() != null) {\n-                this.namedConfigurations.remove(cd.getName());\n+            final DynamicCombinedConfiguration.ConfigData configData = (DynamicCombinedConfiguration.ConfigData)this.configurations.remove(n);\n+            if (configData.getName() != null) {\n+                this.namedConfigurations.remove(configData.getName());\n             }\n-            return cd.getConfiguration();\n+            return configData.getConfiguration();\n         }\n         finally {\n             this.endWrite();\n         }\n     }\n     \n-    protected void addPropertyInternal(final String key, final Object value) {\n-        this.getCurrentConfig().addProperty(key, value);\n+    protected void addPropertyInternal(final String s, final Object o) {\n+        this.getCurrentConfig().addProperty(s, o);\n     }\n     \n     protected void clearInternal() {\n         this.getCurrentConfig().clear();\n     }\n     \n-    protected void clearPropertyDirect(final String key) {\n-        this.getCurrentConfig().clearProperty(key);\n+    protected void clearPropertyDirect(final String s) {\n+        this.getCurrentConfig().clearProperty(s);\n     }\n     \n-    protected boolean containsKeyInternal(final String key) {\n-        return this.getCurrentConfig().containsKey(key);\n+    protected boolean containsKeyInternal(final String s) {\n+        return this.getCurrentConfig().containsKey(s);\n     }\n     \n-    public BigDecimal getBigDecimal(final String key, final BigDecimal defaultValue) {\n-        return this.getCurrentConfig().getBigDecimal(key, defaultValue);\n+    public BigDecimal getBigDecimal(final String s, final BigDecimal bigDecimal) {\n+        return this.getCurrentConfig().getBigDecimal(s, bigDecimal);\n     }\n     \n-    public BigDecimal getBigDecimal(final String key) {\n-        return this.getCurrentConfig().getBigDecimal(key);\n+    public BigDecimal getBigDecimal(final String s) {\n+        return this.getCurrentConfig().getBigDecimal(s);\n     }\n     \n-    public BigInteger getBigInteger(final String key, final BigInteger defaultValue) {\n-        return this.getCurrentConfig().getBigInteger(key, defaultValue);\n+    public BigInteger getBigInteger(final String s, final BigInteger bigInteger) {\n+        return this.getCurrentConfig().getBigInteger(s, bigInteger);\n     }\n     \n-    public BigInteger getBigInteger(final String key) {\n-        return this.getCurrentConfig().getBigInteger(key);\n+    public BigInteger getBigInteger(final String s) {\n+        return this.getCurrentConfig().getBigInteger(s);\n     }\n     \n-    public boolean getBoolean(final String key, final boolean defaultValue) {\n-        return this.getCurrentConfig().getBoolean(key, defaultValue);\n+    public boolean getBoolean(final String s, final boolean b) {\n+        return this.getCurrentConfig().getBoolean(s, b);\n     }\n     \n-    public Boolean getBoolean(final String key, final Boolean defaultValue) {\n-        return this.getCurrentConfig().getBoolean(key, defaultValue);\n+    public Boolean getBoolean(final String s, final Boolean b) {\n+        return this.getCurrentConfig().getBoolean(s, b);\n     }\n     \n-    public boolean getBoolean(final String key) {\n-        return this.getCurrentConfig().getBoolean(key);\n+    public boolean getBoolean(final String s) {\n+        return this.getCurrentConfig().getBoolean(s);\n     }\n     \n-    public byte getByte(final String key, final byte defaultValue) {\n-        return this.getCurrentConfig().getByte(key, defaultValue);\n+    public byte getByte(final String s, final byte b) {\n+        return this.getCurrentConfig().getByte(s, b);\n     }\n     \n-    public Byte getByte(final String key, final Byte defaultValue) {\n-        return this.getCurrentConfig().getByte(key, defaultValue);\n+    public Byte getByte(final String s, final Byte b) {\n+        return this.getCurrentConfig().getByte(s, b);\n     }\n     \n-    public byte getByte(final String key) {\n-        return this.getCurrentConfig().getByte(key);\n+    public byte getByte(final String s) {\n+        return this.getCurrentConfig().getByte(s);\n     }\n     \n-    public double getDouble(final String key, final double defaultValue) {\n-        return this.getCurrentConfig().getDouble(key, defaultValue);\n+    public double getDouble(final String s, final double n) {\n+        return this.getCurrentConfig().getDouble(s, n);\n     }\n     \n-    public Double getDouble(final String key, final Double defaultValue) {\n-        return this.getCurrentConfig().getDouble(key, defaultValue);\n+    public Double getDouble(final String s, final Double n) {\n+        return this.getCurrentConfig().getDouble(s, n);\n     }\n     \n-    public double getDouble(final String key) {\n-        return this.getCurrentConfig().getDouble(key);\n+    public double getDouble(final String s) {\n+        return this.getCurrentConfig().getDouble(s);\n     }\n     \n-    public float getFloat(final String key, final float defaultValue) {\n-        return this.getCurrentConfig().getFloat(key, defaultValue);\n+    public float getFloat(final String s, final float n) {\n+        return this.getCurrentConfig().getFloat(s, n);\n     }\n     \n-    public Float getFloat(final String key, final Float defaultValue) {\n-        return this.getCurrentConfig().getFloat(key, defaultValue);\n+    public Float getFloat(final String s, final Float n) {\n+        return this.getCurrentConfig().getFloat(s, n);\n     }\n     \n-    public float getFloat(final String key) {\n-        return this.getCurrentConfig().getFloat(key);\n+    public float getFloat(final String s) {\n+        return this.getCurrentConfig().getFloat(s);\n     }\n     \n-    public int getInt(final String key, final int defaultValue) {\n-        return this.getCurrentConfig().getInt(key, defaultValue);\n+    public int getInt(final String s, final int n) {\n+        return this.getCurrentConfig().getInt(s, n);\n     }\n     \n-    public int getInt(final String key) {\n-        return this.getCurrentConfig().getInt(key);\n+    public int getInt(final String s) {\n+        return this.getCurrentConfig().getInt(s);\n     }\n     \n-    public Integer getInteger(final String key, final Integer defaultValue) {\n-        return this.getCurrentConfig().getInteger(key, defaultValue);\n+    public Integer getInteger(final String s, final Integer n) {\n+        return this.getCurrentConfig().getInteger(s, n);\n     }\n     \n     protected Iterator<String> getKeysInternal() {\n         return this.getCurrentConfig().getKeys();\n     }\n     \n-    protected Iterator<String> getKeysInternal(final String prefix) {\n-        return this.getCurrentConfig().getKeys(prefix);\n+    protected Iterator<String> getKeysInternal(final String s) {\n+        return this.getCurrentConfig().getKeys(s);\n     }\n     \n-    public List<Object> getList(final String key, final List<?> defaultValue) {\n-        return this.getCurrentConfig().getList(key, (List)defaultValue);\n+    public List<Object> getList(final String s, final List<?> list) {\n+        return this.getCurrentConfig().getList(s, (List)list);\n     }\n     \n-    public List<Object> getList(final String key) {\n-        return this.getCurrentConfig().getList(key);\n+    public List<Object> getList(final String s) {\n+        return this.getCurrentConfig().getList(s);\n     }\n     \n-    public long getLong(final String key, final long defaultValue) {\n-        return this.getCurrentConfig().getLong(key, defaultValue);\n+    public long getLong(final String s, final long n) {\n+        return this.getCurrentConfig().getLong(s, n);\n     }\n     \n-    public Long getLong(final String key, final Long defaultValue) {\n-        return this.getCurrentConfig().getLong(key, defaultValue);\n+    public Long getLong(final String s, final Long n) {\n+        return this.getCurrentConfig().getLong(s, n);\n     }\n     \n-    public long getLong(final String key) {\n-        return this.getCurrentConfig().getLong(key);\n+    public long getLong(final String s) {\n+        return this.getCurrentConfig().getLong(s);\n     }\n     \n-    public Properties getProperties(final String key) {\n-        return this.getCurrentConfig().getProperties(key);\n+    public Properties getProperties(final String s) {\n+        return this.getCurrentConfig().getProperties(s);\n     }\n     \n-    protected Object getPropertyInternal(final String key) {\n-        return this.getCurrentConfig().getProperty(key);\n+    protected Object getPropertyInternal(final String s) {\n+        return this.getCurrentConfig().getProperty(s);\n     }\n     \n-    public short getShort(final String key, final short defaultValue) {\n-        return this.getCurrentConfig().getShort(key, defaultValue);\n+    public short getShort(final String s, final short n) {\n+        return this.getCurrentConfig().getShort(s, n);\n     }\n     \n-    public Short getShort(final String key, final Short defaultValue) {\n-        return this.getCurrentConfig().getShort(key, defaultValue);\n+    public Short getShort(final String s, final Short n) {\n+        return this.getCurrentConfig().getShort(s, n);\n     }\n     \n-    public short getShort(final String key) {\n-        return this.getCurrentConfig().getShort(key);\n+    public short getShort(final String s) {\n+        return this.getCurrentConfig().getShort(s);\n     }\n     \n-    public String getString(final String key, final String defaultValue) {\n-        return this.getCurrentConfig().getString(key, defaultValue);\n+    public String getString(final String s, final String s2) {\n+        return this.getCurrentConfig().getString(s, s2);\n     }\n     \n-    public String getString(final String key) {\n-        return this.getCurrentConfig().getString(key);\n+    public String getString(final String s) {\n+        return this.getCurrentConfig().getString(s);\n     }\n     \n-    public String[] getStringArray(final String key) {\n-        return this.getCurrentConfig().getStringArray(key);\n+    public String[] getStringArray(final String s) {\n+        return this.getCurrentConfig().getStringArray(s);\n     }\n     \n     protected boolean isEmptyInternal() {\n         return this.getCurrentConfig().isEmpty();\n     }\n     \n     protected int sizeInternal() {\n         return this.getCurrentConfig().size();\n     }\n     \n-    protected void setPropertyInternal(final String key, final Object value) {\n-        this.getCurrentConfig().setProperty(key, value);\n+    protected void setPropertyInternal(final String s, final Object o) {\n+        this.getCurrentConfig().setProperty(s, o);\n     }\n     \n-    public Configuration subset(final String prefix) {\n-        return this.getCurrentConfig().subset(prefix);\n+    public Configuration subset(final String s) {\n+        return this.getCurrentConfig().subset(s);\n     }\n     \n-    protected void addNodesInternal(final String key, final Collection<? extends ImmutableNode> nodes) {\n-        this.getCurrentConfig().addNodes(key, (Collection)nodes);\n+    protected void addNodesInternal(final String s, final Collection<? extends ImmutableNode> collection) {\n+        this.getCurrentConfig().addNodes(s, (Collection)collection);\n     }\n     \n-    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String key, final boolean supportUpdates) {\n-        return (HierarchicalConfiguration<ImmutableNode>)this.getCurrentConfig().configurationAt(key, supportUpdates);\n+    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String s, final boolean b) {\n+        return (HierarchicalConfiguration<ImmutableNode>)this.getCurrentConfig().configurationAt(s, b);\n     }\n     \n-    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String key) {\n-        return (HierarchicalConfiguration<ImmutableNode>)this.getCurrentConfig().configurationAt(key);\n+    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String s) {\n+        return (HierarchicalConfiguration<ImmutableNode>)this.getCurrentConfig().configurationAt(s);\n     }\n     \n-    public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(final String key) {\n-        return this.getCurrentConfig().configurationsAt(key);\n+    public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(final String s) {\n+        return this.getCurrentConfig().configurationsAt(s);\n     }\n     \n-    protected Object clearTreeInternal(final String key) {\n-        this.getCurrentConfig().clearTree(key);\n+    protected Object clearTreeInternal(final String s) {\n+        this.getCurrentConfig().clearTree(s);\n         return Collections.emptyList();\n     }\n     \n-    protected int getMaxIndexInternal(final String key) {\n-        return this.getCurrentConfig().getMaxIndex(key);\n+    protected int getMaxIndexInternal(final String s) {\n+        return this.getCurrentConfig().getMaxIndex(s);\n     }\n     \n     public Configuration interpolatedConfiguration() {\n         return this.getCurrentConfig().interpolatedConfiguration();\n     }\n     \n-    public Configuration getSource(final String key) {\n-        if (key == null) {\n+    public Configuration getSource(final String s) {\n+        if (s == null) {\n             throw new IllegalArgumentException(\"Key must not be null!\");\n         }\n-        return this.getCurrentConfig().getSource(key);\n+        return this.getCurrentConfig().getSource(s);\n     }\n     \n     public void clearEventListeners() {\n         this.configs.values().forEach(BaseEventSource::clearEventListeners);\n         super.clearEventListeners();\n     }\n     \n-    public <T extends Event> void addEventListener(final EventType<T> eventType, final EventListener<? super T> listener) {\n-        this.configs.values().forEach(cc -> cc.addEventListener(eventType, listener));\n-        super.addEventListener((EventType)eventType, (EventListener)listener);\n+    public <T extends Event> void addEventListener(final EventType<T> eventType, final EventListener<? super T> eventListener) {\n+        this.configs.values().forEach(combinedConfiguration -> combinedConfiguration.addEventListener(eventType2, eventListener2));\n+        super.addEventListener((EventType)eventType, (EventListener)eventListener);\n     }\n     \n-    public <T extends Event> boolean removeEventListener(final EventType<T> eventType, final EventListener<? super T> listener) {\n-        this.configs.values().forEach(cc -> cc.removeEventListener(eventType, listener));\n-        return super.removeEventListener((EventType)eventType, (EventListener)listener);\n+    public <T extends Event> boolean removeEventListener(final EventType<T> eventType, final EventListener<? super T> eventListener) {\n+        this.configs.values().forEach(combinedConfiguration -> combinedConfiguration.removeEventListener(eventType2, eventListener2));\n+        return super.removeEventListener((EventType)eventType, (EventListener)eventListener);\n     }\n     \n     public void clearErrorListeners() {\n         this.configs.values().forEach(BaseEventSource::clearErrorListeners);\n         super.clearErrorListeners();\n     }\n     \n@@ -399,98 +397,98 @@\n         this.getCurrentConfig().invalidate();\n     }\n     \n     public void invalidateAll() {\n         this.configs.values().forEach(CombinedConfiguration::invalidate);\n     }\n     \n-    protected void beginRead(final boolean optimize) {\n-        final DynamicCombinedConfiguration.CurrentConfigHolder cch = this.ensureCurrentConfiguration();\n-        cch.incrementLockCount();\n-        if (!optimize && cch.getCurrentConfiguration() == null) {\n+    protected void beginRead(final boolean b) {\n+        final DynamicCombinedConfiguration.CurrentConfigHolder ensureCurrentConfiguration = this.ensureCurrentConfiguration();\n+        ensureCurrentConfiguration.incrementLockCount();\n+        if (!b && ensureCurrentConfiguration.getCurrentConfiguration() == null) {\n             this.beginWrite(false);\n             this.endWrite();\n         }\n-        cch.getCurrentConfiguration().beginRead(optimize);\n+        ensureCurrentConfiguration.getCurrentConfiguration().beginRead(b);\n     }\n     \n-    protected void beginWrite(final boolean optimize) {\n-        final DynamicCombinedConfiguration.CurrentConfigHolder cch = this.ensureCurrentConfiguration();\n-        cch.incrementLockCount();\n-        super.beginWrite(optimize);\n-        if (!optimize && cch.getCurrentConfiguration() == null) {\n-            cch.setCurrentConfiguration(this.createChildConfiguration());\n-            this.configs.put(cch.getKey(), cch.getCurrentConfiguration());\n-            this.initChildConfiguration(cch.getCurrentConfiguration());\n+    protected void beginWrite(final boolean b) {\n+        final DynamicCombinedConfiguration.CurrentConfigHolder ensureCurrentConfiguration = this.ensureCurrentConfiguration();\n+        ensureCurrentConfiguration.incrementLockCount();\n+        super.beginWrite(b);\n+        if (!b && ensureCurrentConfiguration.getCurrentConfiguration() == null) {\n+            ensureCurrentConfiguration.setCurrentConfiguration(this.createChildConfiguration());\n+            this.configs.put(ensureCurrentConfiguration.getKey(), ensureCurrentConfiguration.getCurrentConfiguration());\n+            this.initChildConfiguration(ensureCurrentConfiguration.getCurrentConfiguration());\n         }\n     }\n     \n     protected void endRead() {\n         ((DynamicCombinedConfiguration.CurrentConfigHolder)DynamicCombinedConfiguration.CURRENT_CONFIG.get()).getCurrentConfiguration().endRead();\n         this.releaseLock();\n     }\n     \n     protected void endWrite() {\n         super.endWrite();\n         this.releaseLock();\n     }\n     \n     private void releaseLock() {\n-        final DynamicCombinedConfiguration.CurrentConfigHolder cch = (DynamicCombinedConfiguration.CurrentConfigHolder)DynamicCombinedConfiguration.CURRENT_CONFIG.get();\n-        assert cch != null : \"No current configuration!\";\n-        if (cch.decrementLockCountAndCheckRelease()) {\n+        final DynamicCombinedConfiguration.CurrentConfigHolder currentConfigHolder = (DynamicCombinedConfiguration.CurrentConfigHolder)DynamicCombinedConfiguration.CURRENT_CONFIG.get();\n+        assert currentConfigHolder != null : \"No current configuration!\";\n+        if (currentConfigHolder.decrementLockCountAndCheckRelease()) {\n             DynamicCombinedConfiguration.CURRENT_CONFIG.remove();\n         }\n     }\n     \n     private CombinedConfiguration getCurrentConfig() {\n         this.beginRead(false);\n-        CombinedConfiguration config;\n+        CombinedConfiguration currentConfiguration;\n         String key;\n         try {\n-            config = ((DynamicCombinedConfiguration.CurrentConfigHolder)DynamicCombinedConfiguration.CURRENT_CONFIG.get()).getCurrentConfiguration();\n+            currentConfiguration = ((DynamicCombinedConfiguration.CurrentConfigHolder)DynamicCombinedConfiguration.CURRENT_CONFIG.get()).getCurrentConfiguration();\n             key = ((DynamicCombinedConfiguration.CurrentConfigHolder)DynamicCombinedConfiguration.CURRENT_CONFIG.get()).getKey();\n         }\n         finally {\n             this.endRead();\n         }\n         if (this.getLogger().isDebugEnabled()) {\n-            this.getLogger().debug(\"Returning config for \" + key + \": \" + config);\n+            this.getLogger().debug(\"Returning config for \" + key + \": \" + currentConfiguration);\n         }\n-        return config;\n+        return currentConfiguration;\n     }\n     \n     private CombinedConfiguration createChildConfiguration() {\n         return new CombinedConfiguration(this.getNodeCombiner());\n     }\n     \n-    private void initChildConfiguration(final CombinedConfiguration config) {\n+    private void initChildConfiguration(final CombinedConfiguration combinedConfiguration) {\n         if (this.loggerName != null) {\n-            config.setLogger(new ConfigurationLogger(this.loggerName));\n+            combinedConfiguration.setLogger(new ConfigurationLogger(this.loggerName));\n         }\n-        config.setExpressionEngine(this.getExpressionEngine());\n-        config.setConversionExpressionEngine(this.getConversionExpressionEngine());\n-        config.setListDelimiterHandler(this.getListDelimiterHandler());\n-        this.copyEventListeners((BaseEventSource)config);\n-        this.configurations.forEach(data -> config.addConfiguration(data.getConfiguration(), data.getName(), data.getAt()));\n-        config.setSynchronizer(this.getSynchronizer());\n+        combinedConfiguration.setExpressionEngine(this.getExpressionEngine());\n+        combinedConfiguration.setConversionExpressionEngine(this.getConversionExpressionEngine());\n+        combinedConfiguration.setListDelimiterHandler(this.getListDelimiterHandler());\n+        this.copyEventListeners((BaseEventSource)combinedConfiguration);\n+        this.configurations.forEach(configData -> combinedConfiguration2.addConfiguration(configData.getConfiguration(), configData.getName(), configData.getAt()));\n+        combinedConfiguration.setSynchronizer(this.getSynchronizer());\n     }\n     \n     private ConfigurationInterpolator initLocalInterpolator() {\n         return (ConfigurationInterpolator)new DynamicCombinedConfiguration.DynamicCombinedConfiguration$1(this);\n     }\n     \n     private DynamicCombinedConfiguration.CurrentConfigHolder ensureCurrentConfiguration() {\n-        DynamicCombinedConfiguration.CurrentConfigHolder cch = (DynamicCombinedConfiguration.CurrentConfigHolder)DynamicCombinedConfiguration.CURRENT_CONFIG.get();\n-        if (cch == null) {\n-            final String key = String.valueOf(this.localSubst.interpolate((Object)this.keyPattern));\n-            cch = new DynamicCombinedConfiguration.CurrentConfigHolder(key);\n-            cch.setCurrentConfiguration((CombinedConfiguration)this.configs.get(key));\n-            DynamicCombinedConfiguration.CURRENT_CONFIG.set(cch);\n+        DynamicCombinedConfiguration.CurrentConfigHolder value = (DynamicCombinedConfiguration.CurrentConfigHolder)DynamicCombinedConfiguration.CURRENT_CONFIG.get();\n+        if (value == null) {\n+            final String value2 = String.valueOf(this.localSubst.interpolate((Object)this.keyPattern));\n+            value = new DynamicCombinedConfiguration.CurrentConfigHolder(value2);\n+            value.setCurrentConfiguration((CombinedConfiguration)this.configs.get(value2));\n+            DynamicCombinedConfiguration.CURRENT_CONFIG.set(value);\n         }\n-        return cch;\n+        return value;\n     }\n     \n     static {\n         CURRENT_CONFIG = new ThreadLocal<DynamicCombinedConfiguration.CurrentConfigHolder>();\n     }\n }\n"}]}
