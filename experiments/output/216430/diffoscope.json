{"diffoscope-json-version": 1, "source1": "first/ConstantPoolGen.class", "source2": "second/ConstantPoolGen.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -48,463 +48,433 @@\n         this.utf8Table = new HashMap<String, Integer>();\n         this.natTable = new HashMap<String, Integer>();\n         this.cpTable = new HashMap<String, Integer>();\n         this.size = 256;\n         this.constants = new Constant[this.size];\n     }\n     \n-    public ConstantPoolGen(final Constant[] cs) {\n+    public ConstantPoolGen(final Constant[] array) {\n         this.index = 1;\n         this.stringTable = new HashMap<String, Integer>();\n         this.classTable = new HashMap<String, Integer>();\n         this.utf8Table = new HashMap<String, Integer>();\n         this.natTable = new HashMap<String, Integer>();\n         this.cpTable = new HashMap<String, Integer>();\n         final StringBuilder sb = new StringBuilder(256);\n-        this.size = Math.min(Math.max(256, cs.length + 64), 65536);\n-        System.arraycopy(cs, 0, this.constants = new Constant[this.size], 0, cs.length);\n-        if (cs.length > 0) {\n-            this.index = cs.length;\n+        this.size = Math.min(Math.max(256, array.length + 64), 65536);\n+        System.arraycopy(array, 0, this.constants = new Constant[this.size], 0, array.length);\n+        if (array.length > 0) {\n+            this.index = array.length;\n         }\n         for (int i = 1; i < this.index; ++i) {\n-            final Constant c = this.constants[i];\n-            if (c instanceof ConstantString) {\n-                final ConstantString s = (ConstantString)c;\n-                final ConstantUtf8 u8 = (ConstantUtf8)this.constants[s.getStringIndex()];\n-                final String key = u8.getBytes();\n-                if (!this.stringTable.containsKey(key)) {\n-                    this.stringTable.put(key, Integer.valueOf(i));\n-                }\n-            }\n-            else if (c instanceof ConstantClass) {\n-                final ConstantClass s2 = (ConstantClass)c;\n-                final ConstantUtf8 u8 = (ConstantUtf8)this.constants[s2.getNameIndex()];\n-                final String key = u8.getBytes();\n-                if (!this.classTable.containsKey(key)) {\n-                    this.classTable.put(key, Integer.valueOf(i));\n-                }\n-            }\n-            else if (c instanceof ConstantNameAndType) {\n-                final ConstantNameAndType n = (ConstantNameAndType)c;\n-                final ConstantUtf8 u8 = (ConstantUtf8)this.constants[n.getNameIndex()];\n-                final ConstantUtf8 u8_2 = (ConstantUtf8)this.constants[n.getSignatureIndex()];\n-                sb.append(u8.getBytes());\n+            final Constant constant = this.constants[i];\n+            if (constant instanceof ConstantString) {\n+                final String bytes = ((ConstantUtf8)this.constants[((ConstantString)constant).getStringIndex()]).getBytes();\n+                if (!this.stringTable.containsKey(bytes)) {\n+                    this.stringTable.put(bytes, Integer.valueOf(i));\n+                }\n+            }\n+            else if (constant instanceof ConstantClass) {\n+                final String bytes2 = ((ConstantUtf8)this.constants[((ConstantClass)constant).getNameIndex()]).getBytes();\n+                if (!this.classTable.containsKey(bytes2)) {\n+                    this.classTable.put(bytes2, Integer.valueOf(i));\n+                }\n+            }\n+            else if (constant instanceof ConstantNameAndType) {\n+                final ConstantNameAndType constantNameAndType = (ConstantNameAndType)constant;\n+                final ConstantUtf8 constantUtf8 = (ConstantUtf8)this.constants[constantNameAndType.getNameIndex()];\n+                final ConstantUtf8 constantUtf9 = (ConstantUtf8)this.constants[constantNameAndType.getSignatureIndex()];\n+                sb.append(constantUtf8.getBytes());\n                 sb.append(\"%\");\n-                sb.append(u8_2.getBytes());\n-                final String key2 = sb.toString();\n+                sb.append(constantUtf9.getBytes());\n+                final String string = sb.toString();\n                 sb.delete(0, sb.length());\n-                if (!this.natTable.containsKey(key2)) {\n-                    this.natTable.put(key2, Integer.valueOf(i));\n+                if (!this.natTable.containsKey(string)) {\n+                    this.natTable.put(string, Integer.valueOf(i));\n                 }\n             }\n-            else if (c instanceof ConstantUtf8) {\n-                final ConstantUtf8 u9 = (ConstantUtf8)c;\n-                final String key3 = u9.getBytes();\n-                if (!this.utf8Table.containsKey(key3)) {\n-                    this.utf8Table.put(key3, Integer.valueOf(i));\n+            else if (constant instanceof ConstantUtf8) {\n+                final String bytes3 = ((ConstantUtf8)constant).getBytes();\n+                if (!this.utf8Table.containsKey(bytes3)) {\n+                    this.utf8Table.put(bytes3, Integer.valueOf(i));\n                 }\n             }\n-            else if (c instanceof ConstantCP) {\n-                final ConstantCP m = (ConstantCP)c;\n-                String className;\n-                if (c instanceof ConstantInvokeDynamic) {\n-                    className = Integer.toString(((ConstantInvokeDynamic)m).getBootstrapMethodAttrIndex());\n+            else if (constant instanceof ConstantCP) {\n+                final ConstantCP constantCP = (ConstantCP)constant;\n+                String str;\n+                if (constant instanceof ConstantInvokeDynamic) {\n+                    str = Integer.toString(((ConstantInvokeDynamic)constantCP).getBootstrapMethodAttrIndex());\n                 }\n-                else if (c instanceof ConstantDynamic) {\n-                    className = Integer.toString(((ConstantDynamic)m).getBootstrapMethodAttrIndex());\n+                else if (constant instanceof ConstantDynamic) {\n+                    str = Integer.toString(((ConstantDynamic)constantCP).getBootstrapMethodAttrIndex());\n                 }\n                 else {\n-                    final ConstantClass clazz = (ConstantClass)this.constants[m.getClassIndex()];\n-                    final ConstantUtf8 u10 = (ConstantUtf8)this.constants[clazz.getNameIndex()];\n-                    className = Utility.pathToPackage(u10.getBytes());\n-                }\n-                final ConstantNameAndType n2 = (ConstantNameAndType)this.constants[m.getNameAndTypeIndex()];\n-                ConstantUtf8 u10 = (ConstantUtf8)this.constants[n2.getNameIndex()];\n-                final String methodName = u10.getBytes();\n-                u10 = (ConstantUtf8)this.constants[n2.getSignatureIndex()];\n-                final String signature = u10.getBytes();\n-                String delim = \":\";\n-                if (c instanceof ConstantInterfaceMethodref) {\n-                    delim = \"#\";\n-                }\n-                else if (c instanceof ConstantFieldref) {\n-                    delim = \"&\";\n-                }\n-                sb.append(className);\n-                sb.append(delim);\n-                sb.append(methodName);\n-                sb.append(delim);\n-                sb.append(signature);\n-                final String key4 = sb.toString();\n+                    str = Utility.pathToPackage(((ConstantUtf8)this.constants[((ConstantClass)this.constants[constantCP.getClassIndex()]).getNameIndex()]).getBytes());\n+                }\n+                final ConstantNameAndType constantNameAndType2 = (ConstantNameAndType)this.constants[constantCP.getNameAndTypeIndex()];\n+                final String bytes4 = ((ConstantUtf8)this.constants[constantNameAndType2.getNameIndex()]).getBytes();\n+                final String bytes5 = ((ConstantUtf8)this.constants[constantNameAndType2.getSignatureIndex()]).getBytes();\n+                String s = \":\";\n+                if (constant instanceof ConstantInterfaceMethodref) {\n+                    s = \"#\";\n+                }\n+                else if (constant instanceof ConstantFieldref) {\n+                    s = \"&\";\n+                }\n+                sb.append(str);\n+                sb.append(s);\n+                sb.append(bytes4);\n+                sb.append(s);\n+                sb.append(bytes5);\n+                final String string2 = sb.toString();\n                 sb.delete(0, sb.length());\n-                if (!this.cpTable.containsKey(key4)) {\n-                    this.cpTable.put(key4, Integer.valueOf(i));\n+                if (!this.cpTable.containsKey(string2)) {\n+                    this.cpTable.put(string2, Integer.valueOf(i));\n                 }\n             }\n         }\n     }\n     \n-    public ConstantPoolGen(final ConstantPool cp) {\n-        this(cp.getConstantPool());\n+    public ConstantPoolGen(final ConstantPool constantPool) {\n+        this(constantPool.getConstantPool());\n     }\n     \n-    public int addArrayClass(final ArrayType type) {\n-        return this.addClass_(type.getSignature());\n+    public int addArrayClass(final ArrayType arrayType) {\n+        return this.addClass_(arrayType.getSignature());\n     }\n     \n-    public int addClass(final ObjectType type) {\n-        return this.addClass(type.getClassName());\n+    public int addClass(final ObjectType objectType) {\n+        return this.addClass(objectType.getClassName());\n     }\n     \n-    public int addClass(final String str) {\n-        return this.addClass_(str.replace('.', '/'));\n+    public int addClass(final String s) {\n+        return this.addClass_(s.replace('.', '/'));\n     }\n     \n-    private int addClass_(final String clazz) {\n-        final int cpRet;\n-        if ((cpRet = this.lookupClass(clazz)) != -1) {\n-            return cpRet;\n+    private int addClass_(final String s) {\n+        final int lookupClass;\n+        if ((lookupClass = this.lookupClass(s)) != -1) {\n+            return lookupClass;\n         }\n         this.adjustSize();\n-        final ConstantClass c = new ConstantClass(this.addUtf8(clazz));\n-        final int ret = this.index;\n-        this.constants[this.index++] = (Constant)c;\n-        return this.computeIfAbsent(this.classTable, clazz, ret);\n+        final ConstantClass constantClass = new ConstantClass(this.addUtf8(s));\n+        final int index = this.index;\n+        this.constants[this.index++] = (Constant)constantClass;\n+        return this.computeIfAbsent(this.classTable, s, index);\n     }\n     \n-    public int addConstant(final Constant c, final ConstantPoolGen cp) {\n-        final Constant[] constants = cp.getConstantPool().getConstantPool();\n-        switch (c.getTag()) {\n+    public int addConstant(final Constant constant, final ConstantPoolGen constantPoolGen) {\n+        final Constant[] constantPool = constantPoolGen.getConstantPool().getConstantPool();\n+        switch (constant.getTag()) {\n             case 8: {\n-                final ConstantString s = (ConstantString)c;\n-                final ConstantUtf8 u8 = (ConstantUtf8)constants[s.getStringIndex()];\n-                return this.addString(u8.getBytes());\n+                return this.addString(((ConstantUtf8)constantPool[((ConstantString)constant).getStringIndex()]).getBytes());\n             }\n             case 7: {\n-                final ConstantClass s2 = (ConstantClass)c;\n-                final ConstantUtf8 u8 = (ConstantUtf8)constants[s2.getNameIndex()];\n-                return this.addClass(u8.getBytes());\n+                return this.addClass(((ConstantUtf8)constantPool[((ConstantClass)constant).getNameIndex()]).getBytes());\n             }\n             case 12: {\n-                final ConstantNameAndType n = (ConstantNameAndType)c;\n-                final ConstantUtf8 u8 = (ConstantUtf8)constants[n.getNameIndex()];\n-                final ConstantUtf8 u8_2 = (ConstantUtf8)constants[n.getSignatureIndex()];\n-                return this.addNameAndType(u8.getBytes(), u8_2.getBytes());\n+                final ConstantNameAndType constantNameAndType = (ConstantNameAndType)constant;\n+                return this.addNameAndType(((ConstantUtf8)constantPool[constantNameAndType.getNameIndex()]).getBytes(), ((ConstantUtf8)constantPool[constantNameAndType.getSignatureIndex()]).getBytes());\n             }\n             case 1: {\n-                return this.addUtf8(((ConstantUtf8)c).getBytes());\n+                return this.addUtf8(((ConstantUtf8)constant).getBytes());\n             }\n             case 6: {\n-                return this.addDouble(((ConstantDouble)c).getBytes());\n+                return this.addDouble(((ConstantDouble)constant).getBytes());\n             }\n             case 4: {\n-                return this.addFloat(((ConstantFloat)c).getBytes());\n+                return this.addFloat(((ConstantFloat)constant).getBytes());\n             }\n             case 5: {\n-                return this.addLong(((ConstantLong)c).getBytes());\n+                return this.addLong(((ConstantLong)constant).getBytes());\n             }\n             case 3: {\n-                return this.addInteger(((ConstantInteger)c).getBytes());\n+                return this.addInteger(((ConstantInteger)constant).getBytes());\n             }\n             case 9:\n             case 10:\n             case 11: {\n-                final ConstantCP m = (ConstantCP)c;\n-                final ConstantClass clazz = (ConstantClass)constants[m.getClassIndex()];\n-                final ConstantNameAndType n2 = (ConstantNameAndType)constants[m.getNameAndTypeIndex()];\n-                ConstantUtf8 u9 = (ConstantUtf8)constants[clazz.getNameIndex()];\n-                final String className = Utility.pathToPackage(u9.getBytes());\n-                u9 = (ConstantUtf8)constants[n2.getNameIndex()];\n-                final String name = u9.getBytes();\n-                u9 = (ConstantUtf8)constants[n2.getSignatureIndex()];\n-                final String signature = u9.getBytes();\n-                switch (c.getTag()) {\n+                final ConstantCP constantCP = (ConstantCP)constant;\n+                final ConstantClass constantClass = (ConstantClass)constantPool[constantCP.getClassIndex()];\n+                final ConstantNameAndType constantNameAndType2 = (ConstantNameAndType)constantPool[constantCP.getNameAndTypeIndex()];\n+                final String pathToPackage = Utility.pathToPackage(((ConstantUtf8)constantPool[constantClass.getNameIndex()]).getBytes());\n+                final String bytes = ((ConstantUtf8)constantPool[constantNameAndType2.getNameIndex()]).getBytes();\n+                final String bytes2 = ((ConstantUtf8)constantPool[constantNameAndType2.getSignatureIndex()]).getBytes();\n+                switch (constant.getTag()) {\n                     case 11: {\n-                        return this.addInterfaceMethodref(className, name, signature);\n+                        return this.addInterfaceMethodref(pathToPackage, bytes, bytes2);\n                     }\n                     case 10: {\n-                        return this.addMethodref(className, name, signature);\n+                        return this.addMethodref(pathToPackage, bytes, bytes2);\n                     }\n                     case 9: {\n-                        return this.addFieldref(className, name, signature);\n+                        return this.addFieldref(pathToPackage, bytes, bytes2);\n                     }\n                     default: {\n-                        throw new IllegalArgumentException(\"Unknown constant type \" + c);\n+                        throw new IllegalArgumentException(\"Unknown constant type \" + constant);\n                     }\n                 }\n                 break;\n             }\n             default: {\n-                throw new IllegalArgumentException(\"Unknown constant type \" + c);\n+                throw new IllegalArgumentException(\"Unknown constant type \" + constant);\n             }\n         }\n     }\n     \n     public int addDouble(final double n) {\n-        int ret;\n-        if ((ret = this.lookupDouble(n)) != -1) {\n-            return ret;\n+        final int lookupDouble;\n+        if ((lookupDouble = this.lookupDouble(n)) != -1) {\n+            return lookupDouble;\n         }\n         this.adjustSize();\n-        ret = this.index;\n+        final int index = this.index;\n         this.constants[this.index] = (Constant)new ConstantDouble(n);\n         this.index += 2;\n-        return ret;\n+        return index;\n     }\n     \n-    public int addFieldref(final String className, final String fieldName, final String signature) {\n-        final int cpRet;\n-        if ((cpRet = this.lookupFieldref(className, fieldName, signature)) != -1) {\n-            return cpRet;\n+    public int addFieldref(final String str, final String str2, final String str3) {\n+        final int lookupFieldref;\n+        if ((lookupFieldref = this.lookupFieldref(str, str2, str3)) != -1) {\n+            return lookupFieldref;\n         }\n         this.adjustSize();\n-        final int classIndex = this.addClass(className);\n-        final int nameAndTypeIndex = this.addNameAndType(fieldName, signature);\n-        final int ret = this.index;\n-        this.constants[this.index++] = (Constant)new ConstantFieldref(classIndex, nameAndTypeIndex);\n-        return this.computeIfAbsent(this.cpTable, className + \"&\" + fieldName + \"&\" + signature, ret);\n+        final int addClass = this.addClass(str);\n+        final int addNameAndType = this.addNameAndType(str2, str3);\n+        final int index = this.index;\n+        this.constants[this.index++] = (Constant)new ConstantFieldref(addClass, addNameAndType);\n+        return this.computeIfAbsent(this.cpTable, str + \"&\" + str2 + \"&\" + str3, index);\n     }\n     \n     public int addFloat(final float n) {\n-        int ret;\n-        if ((ret = this.lookupFloat(n)) != -1) {\n-            return ret;\n+        final int lookupFloat;\n+        if ((lookupFloat = this.lookupFloat(n)) != -1) {\n+            return lookupFloat;\n         }\n         this.adjustSize();\n-        ret = this.index;\n+        final int index = this.index;\n         this.constants[this.index++] = (Constant)new ConstantFloat(n);\n-        return ret;\n+        return index;\n     }\n     \n     public int addInteger(final int n) {\n-        int ret;\n-        if ((ret = this.lookupInteger(n)) != -1) {\n-            return ret;\n+        final int lookupInteger;\n+        if ((lookupInteger = this.lookupInteger(n)) != -1) {\n+            return lookupInteger;\n         }\n         this.adjustSize();\n-        ret = this.index;\n+        final int index = this.index;\n         this.constants[this.index++] = (Constant)new ConstantInteger(n);\n-        return ret;\n+        return index;\n     }\n     \n-    public int addInterfaceMethodref(final MethodGen method) {\n-        return this.addInterfaceMethodref(method.getClassName(), method.getName(), method.getSignature());\n+    public int addInterfaceMethodref(final MethodGen methodGen) {\n+        return this.addInterfaceMethodref(methodGen.getClassName(), methodGen.getName(), methodGen.getSignature());\n     }\n     \n-    public int addInterfaceMethodref(final String className, final String methodName, final String signature) {\n-        final int cpRet;\n-        if ((cpRet = this.lookupInterfaceMethodref(className, methodName, signature)) != -1) {\n-            return cpRet;\n+    public int addInterfaceMethodref(final String str, final String str2, final String str3) {\n+        final int lookupInterfaceMethodref;\n+        if ((lookupInterfaceMethodref = this.lookupInterfaceMethodref(str, str2, str3)) != -1) {\n+            return lookupInterfaceMethodref;\n         }\n         this.adjustSize();\n-        final int classIndex = this.addClass(className);\n-        final int nameAndTypeIndex = this.addNameAndType(methodName, signature);\n-        final int ret = this.index;\n-        this.constants[this.index++] = (Constant)new ConstantInterfaceMethodref(classIndex, nameAndTypeIndex);\n-        return this.computeIfAbsent(this.cpTable, className + \"#\" + methodName + \"#\" + signature, ret);\n+        final int addClass = this.addClass(str);\n+        final int addNameAndType = this.addNameAndType(str2, str3);\n+        final int index = this.index;\n+        this.constants[this.index++] = (Constant)new ConstantInterfaceMethodref(addClass, addNameAndType);\n+        return this.computeIfAbsent(this.cpTable, str + \"#\" + str2 + \"#\" + str3, index);\n     }\n     \n     public int addLong(final long n) {\n-        int ret;\n-        if ((ret = this.lookupLong(n)) != -1) {\n-            return ret;\n+        final int lookupLong;\n+        if ((lookupLong = this.lookupLong(n)) != -1) {\n+            return lookupLong;\n         }\n         this.adjustSize();\n-        ret = this.index;\n+        final int index = this.index;\n         this.constants[this.index] = (Constant)new ConstantLong(n);\n         this.index += 2;\n-        return ret;\n+        return index;\n     }\n     \n-    public int addMethodref(final MethodGen method) {\n-        return this.addMethodref(method.getClassName(), method.getName(), method.getSignature());\n+    public int addMethodref(final MethodGen methodGen) {\n+        return this.addMethodref(methodGen.getClassName(), methodGen.getName(), methodGen.getSignature());\n     }\n     \n-    public int addMethodref(final String className, final String methodName, final String signature) {\n-        final int cpRet;\n-        if ((cpRet = this.lookupMethodref(className, methodName, signature)) != -1) {\n-            return cpRet;\n+    public int addMethodref(final String str, final String str2, final String str3) {\n+        final int lookupMethodref;\n+        if ((lookupMethodref = this.lookupMethodref(str, str2, str3)) != -1) {\n+            return lookupMethodref;\n         }\n         this.adjustSize();\n-        final int nameAndTypeIndex = this.addNameAndType(methodName, signature);\n-        final int classIndex = this.addClass(className);\n-        final int ret = this.index;\n-        this.constants[this.index++] = (Constant)new ConstantMethodref(classIndex, nameAndTypeIndex);\n-        return this.computeIfAbsent(this.cpTable, className + \":\" + methodName + \":\" + signature, ret);\n+        final int addNameAndType = this.addNameAndType(str2, str3);\n+        final int addClass = this.addClass(str);\n+        final int index = this.index;\n+        this.constants[this.index++] = (Constant)new ConstantMethodref(addClass, addNameAndType);\n+        return this.computeIfAbsent(this.cpTable, str + \":\" + str2 + \":\" + str3, index);\n     }\n     \n-    public int addNameAndType(final String name, final String signature) {\n-        int ret;\n-        if ((ret = this.lookupNameAndType(name, signature)) != -1) {\n-            return ret;\n+    public int addNameAndType(final String str, final String str2) {\n+        final int lookupNameAndType;\n+        if ((lookupNameAndType = this.lookupNameAndType(str, str2)) != -1) {\n+            return lookupNameAndType;\n         }\n         this.adjustSize();\n-        final int nameIndex = this.addUtf8(name);\n-        final int signatureIndex = this.addUtf8(signature);\n-        ret = this.index;\n-        this.constants[this.index++] = (Constant)new ConstantNameAndType(nameIndex, signatureIndex);\n-        return this.computeIfAbsent(this.natTable, name + \"%\" + signature, ret);\n+        final int addUtf8 = this.addUtf8(str);\n+        final int addUtf9 = this.addUtf8(str2);\n+        final int index = this.index;\n+        this.constants[this.index++] = (Constant)new ConstantNameAndType(addUtf8, addUtf9);\n+        return this.computeIfAbsent(this.natTable, str + \"%\" + str2, index);\n     }\n     \n-    public int addString(final String str) {\n-        int ret;\n-        if ((ret = this.lookupString(str)) != -1) {\n-            return ret;\n+    public int addString(final String s) {\n+        final int lookupString;\n+        if ((lookupString = this.lookupString(s)) != -1) {\n+            return lookupString;\n         }\n-        final int utf8 = this.addUtf8(str);\n+        final int addUtf8 = this.addUtf8(s);\n         this.adjustSize();\n-        final ConstantString s = new ConstantString(utf8);\n-        ret = this.index;\n-        this.constants[this.index++] = (Constant)s;\n-        return this.computeIfAbsent(this.stringTable, str, ret);\n+        final ConstantString constantString = new ConstantString(addUtf8);\n+        final int index = this.index;\n+        this.constants[this.index++] = (Constant)constantString;\n+        return this.computeIfAbsent(this.stringTable, s, index);\n     }\n     \n-    public int addUtf8(final String n) {\n-        int ret;\n-        if ((ret = this.lookupUtf8(n)) != -1) {\n-            return ret;\n+    public int addUtf8(final String s) {\n+        final int lookupUtf8;\n+        if ((lookupUtf8 = this.lookupUtf8(s)) != -1) {\n+            return lookupUtf8;\n         }\n         this.adjustSize();\n-        ret = this.index;\n-        this.constants[this.index++] = (Constant)new ConstantUtf8(n);\n-        return this.computeIfAbsent(this.utf8Table, n, ret);\n+        final int index = this.index;\n+        this.constants[this.index++] = (Constant)new ConstantUtf8(s);\n+        return this.computeIfAbsent(this.utf8Table, s, index);\n     }\n     \n     protected void adjustSize() {\n         if (this.index + 3 >= 65536) {\n             throw new IllegalStateException(\"The number of constants \" + (this.index + 3) + \" is over the size of the constant pool: \" + 65535);\n         }\n         if (this.index + 3 >= this.size) {\n-            final Constant[] cs = this.constants;\n+            final Constant[] constants = this.constants;\n             this.size *= 2;\n             this.size = Math.min(this.size, 65536);\n-            System.arraycopy(cs, 0, this.constants = new Constant[this.size], 0, this.index);\n+            System.arraycopy(constants, 0, this.constants = new Constant[this.size], 0, this.index);\n         }\n     }\n     \n-    private int computeIfAbsent(final Map<String, Integer> map, final String key, final int value) {\n-        return Integer.valueOf(map.computeIfAbsent(key, k -> Integer.valueOf(value)));\n+    private int computeIfAbsent(final Map<String, Integer> map, final String key, final int n) {\n+        return Integer.valueOf(map.computeIfAbsent(key, p1 -> Integer.valueOf(i)));\n     }\n     \n-    public Constant getConstant(final int i) {\n-        return this.constants[i];\n+    public Constant getConstant(final int n) {\n+        return this.constants[n];\n     }\n     \n     public ConstantPool getConstantPool() {\n         return new ConstantPool(this.constants);\n     }\n     \n     public ConstantPool getFinalConstantPool() {\n         return new ConstantPool((Constant[])Arrays.copyOf(this.constants, this.index));\n     }\n     \n-    private int getIndex(final Map<String, Integer> map, final String key) {\n-        return this.toIndex(Integer.valueOf(map.get((Object)key)));\n+    private int getIndex(final Map<String, Integer> map, final String s) {\n+        return this.toIndex(Integer.valueOf(map.get((Object)s)));\n     }\n     \n     public int getSize() {\n         return this.index;\n     }\n     \n-    public int lookupClass(final String str) {\n-        return this.getIndex(this.classTable, str.replace('.', '/'));\n+    public int lookupClass(final String s) {\n+        return this.getIndex(this.classTable, s.replace('.', '/'));\n     }\n     \n-    public int lookupDouble(final double n) {\n-        final long bits = Double.doubleToLongBits(n);\n+    public int lookupDouble(final double value) {\n+        final long doubleToLongBits = Double.doubleToLongBits(value);\n         for (int i = 1; i < this.index; ++i) {\n-            if (this.constants[i] instanceof ConstantDouble) {\n-                final ConstantDouble c = (ConstantDouble)this.constants[i];\n-                if (Double.doubleToLongBits(c.getBytes()) == bits) {\n-                    return i;\n-                }\n+            if (this.constants[i] instanceof ConstantDouble && Double.doubleToLongBits(((ConstantDouble)this.constants[i]).getBytes()) == doubleToLongBits) {\n+                return i;\n             }\n         }\n         return -1;\n     }\n     \n-    public int lookupFieldref(final String className, final String fieldName, final String signature) {\n-        return this.getIndex(this.cpTable, className + \"&\" + fieldName + \"&\" + signature);\n+    public int lookupFieldref(final String str, final String str2, final String str3) {\n+        return this.getIndex(this.cpTable, str + \"&\" + str2 + \"&\" + str3);\n     }\n     \n-    public int lookupFloat(final float n) {\n-        final int bits = Float.floatToIntBits(n);\n+    public int lookupFloat(final float value) {\n+        final int floatToIntBits = Float.floatToIntBits(value);\n         for (int i = 1; i < this.index; ++i) {\n-            if (this.constants[i] instanceof ConstantFloat) {\n-                final ConstantFloat c = (ConstantFloat)this.constants[i];\n-                if (Float.floatToIntBits(c.getBytes()) == bits) {\n-                    return i;\n-                }\n+            if (this.constants[i] instanceof ConstantFloat && Float.floatToIntBits(((ConstantFloat)this.constants[i]).getBytes()) == floatToIntBits) {\n+                return i;\n             }\n         }\n         return -1;\n     }\n     \n     public int lookupInteger(final int n) {\n         for (int i = 1; i < this.index; ++i) {\n-            if (this.constants[i] instanceof ConstantInteger) {\n-                final ConstantInteger c = (ConstantInteger)this.constants[i];\n-                if (c.getBytes() == n) {\n-                    return i;\n-                }\n+            if (this.constants[i] instanceof ConstantInteger && ((ConstantInteger)this.constants[i]).getBytes() == n) {\n+                return i;\n             }\n         }\n         return -1;\n     }\n     \n-    public int lookupInterfaceMethodref(final MethodGen method) {\n-        return this.lookupInterfaceMethodref(method.getClassName(), method.getName(), method.getSignature());\n+    public int lookupInterfaceMethodref(final MethodGen methodGen) {\n+        return this.lookupInterfaceMethodref(methodGen.getClassName(), methodGen.getName(), methodGen.getSignature());\n     }\n     \n-    public int lookupInterfaceMethodref(final String className, final String methodName, final String signature) {\n-        return this.getIndex(this.cpTable, className + \"#\" + methodName + \"#\" + signature);\n+    public int lookupInterfaceMethodref(final String str, final String str2, final String str3) {\n+        return this.getIndex(this.cpTable, str + \"#\" + str2 + \"#\" + str3);\n     }\n     \n     public int lookupLong(final long n) {\n         for (int i = 1; i < this.index; ++i) {\n-            if (this.constants[i] instanceof ConstantLong) {\n-                final ConstantLong c = (ConstantLong)this.constants[i];\n-                if (c.getBytes() == n) {\n-                    return i;\n-                }\n+            if (this.constants[i] instanceof ConstantLong && ((ConstantLong)this.constants[i]).getBytes() == n) {\n+                return i;\n             }\n         }\n         return -1;\n     }\n     \n-    public int lookupMethodref(final MethodGen method) {\n-        return this.lookupMethodref(method.getClassName(), method.getName(), method.getSignature());\n+    public int lookupMethodref(final MethodGen methodGen) {\n+        return this.lookupMethodref(methodGen.getClassName(), methodGen.getName(), methodGen.getSignature());\n     }\n     \n-    public int lookupMethodref(final String className, final String methodName, final String signature) {\n-        return this.getIndex(this.cpTable, className + \":\" + methodName + \":\" + signature);\n+    public int lookupMethodref(final String str, final String str2, final String str3) {\n+        return this.getIndex(this.cpTable, str + \":\" + str2 + \":\" + str3);\n     }\n     \n-    public int lookupNameAndType(final String name, final String signature) {\n-        return this.getIndex(this.natTable, name + \"%\" + signature);\n+    public int lookupNameAndType(final String str, final String str2) {\n+        return this.getIndex(this.natTable, str + \"%\" + str2);\n     }\n     \n-    public int lookupString(final String str) {\n-        return this.getIndex(this.stringTable, str);\n+    public int lookupString(final String s) {\n+        return this.getIndex(this.stringTable, s);\n     }\n     \n-    public int lookupUtf8(final String n) {\n-        return this.getIndex(this.utf8Table, n);\n+    public int lookupUtf8(final String s) {\n+        return this.getIndex(this.utf8Table, s);\n     }\n     \n-    public void setConstant(final int i, final Constant c) {\n-        this.constants[i] = c;\n+    public void setConstant(final int n, final Constant constant) {\n+        this.constants[n] = constant;\n     }\n     \n-    private int toIndex(final Integer index) {\n-        return (index != null) ? ((int)index) : -1;\n+    private int toIndex(final Integer n) {\n+        return (n != null) ? ((int)n) : -1;\n     }\n     \n     @Override\n     public String toString() {\n-        final StringBuilder buf = new StringBuilder();\n+        final StringBuilder sb = new StringBuilder();\n         for (int i = 1; i < this.index; ++i) {\n-            buf.append(i).append(\")\").append(this.constants[i]).append(\"\\n\");\n+            sb.append(i).append(\")\").append(this.constants[i]).append(\"\\n\");\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n }\n"}]}
