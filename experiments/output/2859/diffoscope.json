{"diffoscope-json-version": 1, "source1": "first/TarUtils.class", "source2": "second/TarUtils.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,555 +1,535 @@\n-  SHA-256 checksum f7ecdaee06912ffc57862d06b3007fdc56239fefc50fc7ab120817bb0f3d3b6f\n+  SHA-256 checksum 71ba7b7da309e7692bc8beab7dc549fca5bd4ad5792f23257e097dda1ecc2c8b\n   Compiled from \"TarUtils.java\"\n public class org.apache.commons.compress.archivers.tar.TarUtils\n   minor version: 0\n-  major version: 52\n+  major version: 53\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #95                         // org/apache/commons/compress/archivers/tar/TarUtils\n-  super_class: #151                       // java/lang/Object\n-  interfaces: 0, fields: 3, methods: 29, attributes: 2\n+  this_class: #80                         // org/apache/commons/compress/archivers/tar/TarUtils\n+  super_class: #134                       // java/lang/Object\n+  interfaces: 0, fields: 3, methods: 29, attributes: 3\n Constant pool:\n-    #1 = Class              #323          // org/apache/commons/compress/archivers/tar/TarConstants\n-    #2 = Methodref          #151.#324     // java/lang/Object.\"<init>\":()V\n-    #3 = Class              #325          // java/lang/IllegalArgumentException\n-    #4 = Class              #326          // java/lang/StringBuilder\n-    #5 = Methodref          #4.#324       // java/lang/StringBuilder.\"<init>\":()V\n-    #6 = String             #327          // Length\n-    #7 = Methodref          #4.#328       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-    #8 = Methodref          #4.#329       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-    #9 = String             #330          //  must be at least 2\n-   #10 = Methodref          #4.#331       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #11 = Methodref          #3.#332       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #12 = Methodref          #95.#333      // org/apache/commons/compress/archivers/tar/TarUtils.exceptionMessage:([BIIIB)Ljava/lang/String;\n-   #13 = Methodref          #95.#334      // org/apache/commons/compress/archivers/tar/TarUtils.parseOctal:([BII)J\n-   #14 = Methodref          #95.#335      // org/apache/commons/compress/archivers/tar/TarUtils.parseBinaryLong:([BIIZ)J\n-   #15 = Methodref          #95.#336      // org/apache/commons/compress/archivers/tar/TarUtils.parseBinaryBigInteger:([BIIZ)J\n-   #16 = String             #337          // At offset\n-   #17 = String             #338          // ,\n-   #18 = String             #339          //  byte binary number exceeds maximum signed long value\n-   #19 = Double             2.0d\n-   #21 = Double             8.0d\n-   #23 = Methodref          #340.#341     // java/lang/Math.pow:(DD)D\n-   #24 = Methodref          #342.#343     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #25 = Class              #344          // java/math/BigInteger\n-   #26 = Methodref          #25.#345      // java/math/BigInteger.\"<init>\":([B)V\n-   #27 = Long               -1l\n-   #29 = Methodref          #25.#346      // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-   #30 = Methodref          #25.#347      // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #31 = Methodref          #25.#348      // java/math/BigInteger.not:()Ljava/math/BigInteger;\n-   #32 = Methodref          #25.#349      // java/math/BigInteger.bitLength:()I\n-   #33 = Methodref          #25.#350      // java/math/BigInteger.longValue:()J\n-   #34 = Class              #351          // java/lang/String\n-   #35 = Methodref          #34.#352      // java/lang/String.\"<init>\":([BII)V\n-   #36 = String             #353          // \\u0000\n-   #37 = String             #354          // {NUL}\n-   #38 = Methodref          #34.#355      // java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n-   #39 = String             #356          // Invalid byte\n-   #40 = String             #357          //  at offset\n-   #41 = String             #358          //  in \\'\n-   #42 = String             #359          // \\' len=\n-   #43 = Fieldref           #95.#360      // org/apache/commons/compress/archivers/tar/TarUtils.DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #44 = Methodref          #95.#361      // org/apache/commons/compress/archivers/tar/TarUtils.parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n-   #45 = Class              #362          // java/io/IOException\n-   #46 = Fieldref           #95.#363      // org/apache/commons/compress/archivers/tar/TarUtils.FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #47 = Class              #364          // java/lang/RuntimeException\n-   #48 = Methodref          #47.#365      // java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n-   #49 = InterfaceMethodref #366.#367     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-   #50 = String             #368          //\n-   #51 = Methodref          #95.#369      // org/apache/commons/compress/archivers/tar/TarUtils.parseOctalOrBinary:([BII)J\n-   #52 = Class              #370          // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-   #53 = Methodref          #52.#371      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-   #54 = Class              #372          // java/util/ArrayList\n-   #55 = Methodref          #54.#324      // java/util/ArrayList.\"<init>\":()V\n-   #56 = Methodref          #95.#373      // org/apache/commons/compress/archivers/tar/TarUtils.parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n-   #57 = Methodref          #52.#374      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n-   #58 = String             #375          // Corrupted TAR archive, sparse entry with negative offset\n-   #59 = Methodref          #45.#332      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #60 = Methodref          #52.#376      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n-   #61 = String             #377          // Corrupted TAR archive, sparse entry with negative numbytes\n-   #62 = InterfaceMethodref #378.#379     // java/util/List.add:(Ljava/lang/Object;)Z\n-   #63 = String             #380          // Corrupted TAR archive, sparse entry is invalid\n-   #64 = Methodref          #45.#381      // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #65 = Methodref          #382.#383     // java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-   #66 = Methodref          #95.#384      // org/apache/commons/compress/archivers/tar/TarUtils.formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n-   #67 = Methodref          #34.#385      // java/lang/String.length:()I\n-   #68 = InterfaceMethodref #366.#386     // org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-   #69 = Methodref          #387.#388     // java/nio/ByteBuffer.limit:()I\n-   #70 = Methodref          #34.#389      // java/lang/String.substring:(II)Ljava/lang/String;\n-   #71 = Methodref          #387.#390     // java/nio/ByteBuffer.position:()I\n-   #72 = Methodref          #387.#391     // java/nio/ByteBuffer.array:()[B\n-   #73 = Methodref          #387.#392     // java/nio/ByteBuffer.arrayOffset:()I\n-   #74 = Long               7l\n-   #76 = Methodref          #4.#393       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #77 = String             #394          // =\n-   #78 = Methodref          #395.#396     // java/lang/Long.toOctalString:(J)Ljava/lang/String;\n-   #79 = String             #397          //  will not fit in octal number buffer of length\n-   #80 = Methodref          #95.#398      // org/apache/commons/compress/archivers/tar/TarUtils.formatUnsignedOctalString:(J[BII)V\n-   #81 = Long               2097151l\n-   #83 = Long               8589934591l\n-   #85 = Methodref          #95.#399      // org/apache/commons/compress/archivers/tar/TarUtils.formatLongOctalBytes:(J[BII)I\n-   #86 = Methodref          #95.#400      // org/apache/commons/compress/archivers/tar/TarUtils.formatLongBinary:(J[BIIZ)V\n-   #87 = Methodref          #95.#401      // org/apache/commons/compress/archivers/tar/TarUtils.formatBigIntegerBinary:(J[BIIZ)V\n-   #88 = Methodref          #340.#402     // java/lang/Math.abs:(J)J\n-   #89 = String             #403          // Value\n-   #90 = String             #404          //  is too large for\n-   #91 = String             #405          //  byte field.\n-   #92 = Long               255l\n-   #94 = Methodref          #25.#406      // java/math/BigInteger.toByteArray:()[B\n-   #95 = Class              #407          // org/apache/commons/compress/archivers/tar/TarUtils\n-   #96 = Methodref          #95.#408      // org/apache/commons/compress/archivers/tar/TarUtils.parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n-   #97 = Class              #409          // java/util/HashMap\n-   #98 = Methodref          #97.#410      // java/util/HashMap.\"<init>\":(Ljava/util/Map;)V\n-   #99 = Methodref          #411.#412     // java/io/InputStream.read:()I\n-  #100 = Class              #413          // java/io/ByteArrayOutputStream\n-  #101 = Methodref          #100.#324     // java/io/ByteArrayOutputStream.\"<init>\":()V\n-  #102 = Class              #414          // org/apache/commons/compress/utils/CharsetNames\n-  #103 = String             #415          // UTF-8\n-  #104 = Methodref          #100.#416     // java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;\n-  #105 = InterfaceMethodref #417.#418     // java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #106 = String             #419          // Paxheader value size\n-  #107 = String             #420          //  exceeds size of header record\n-  #108 = Methodref          #421.#422     // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n-  #109 = String             #423          // Failed to read Paxheader. Expected\n-  #110 = String             #424          //  bytes, read\n-  #111 = String             #425          // Failed to read Paxheader.Value should end with a newline\n-  #112 = Fieldref           #426.#427     // java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;\n-  #113 = Methodref          #34.#428      // java/lang/String.\"<init>\":([BIILjava/nio/charset/Charset;)V\n-  #114 = InterfaceMethodref #417.#429     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #115 = String             #430          // GNU.sparse.offset\n-  #116 = Methodref          #34.#431      // java/lang/String.equals:(Ljava/lang/Object;)Z\n-  #117 = Methodref          #395.#350     // java/lang/Long.longValue:()J\n-  #118 = Methodref          #395.#432     // java/lang/Long.valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n-  #119 = Class              #433          // java/lang/NumberFormatException\n-  #120 = String             #434          // Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n-  #121 = String             #435          // Failed to read Paxheader.GNU.sparse.offset contains negative value\n-  #122 = String             #436          // GNU.sparse.numbytes\n-  #123 = String             #437          // Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n-  #124 = Methodref          #395.#438     // java/lang/Long.parseLong:(Ljava/lang/String;)J\n-  #125 = String             #439          // Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n-  #126 = String             #440          // Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n-  #127 = Methodref          #100.#441     // java/io/ByteArrayOutputStream.write:(I)V\n-  #128 = String             #442          // Failed to read Paxheader. Encountered a non-number while reading length\n-  #129 = Methodref          #95.#443      // org/apache/commons/compress/archivers/tar/TarUtils.parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n-  #130 = Methodref          #45.#444      // java/io/IOException.getMessage:()Ljava/lang/String;\n-  #131 = Methodref          #47.#381      // java/lang/RuntimeException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #132 = String             #445          // ,\n-  #133 = Methodref          #34.#446      // java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n-  #134 = String             #447          // Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n-  #135 = String             #448          // Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n-  #136 = String             #449          // Corrupted TAR archive. Sparse struct offset contains negative value\n-  #137 = String             #450          // Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n-  #138 = String             #451          // Corrupted TAR archive. Sparse struct numbytes contains negative value\n-  #139 = Methodref          #95.#452      // org/apache/commons/compress/archivers/tar/TarUtils.readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n-  #140 = String             #453          // Corrupted TAR archive. Negative value in sparse headers block\n-  #141 = String             #454          // Corrupted TAR archive. Sparse header block offset contains negative value\n-  #142 = String             #455          // Corrupted TAR archive. Sparse header block numbytes contains negative value\n-  #143 = Methodref          #421.#456     // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n-  #144 = String             #457          // Unexpected EOF when reading parse information of 1.X PAX format\n-  #145 = String             #458          // Corrupted TAR archive. Non-numeric value in sparse headers block\n-  #146 = Long               10l\n-  #148 = Methodref          #459.#460     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #149 = Class              #461          // org/apache/commons/compress/archivers/tar/TarUtils$1\n-  #150 = Methodref          #149.#324     // org/apache/commons/compress/archivers/tar/TarUtils$1.\"<init>\":()V\n-  #151 = Class              #462          // java/lang/Object\n-  #152 = Utf8               InnerClasses\n-  #153 = Utf8               BYTE_MASK\n-  #154 = Utf8               I\n-  #155 = Utf8               ConstantValue\n-  #156 = Integer            255\n-  #157 = Utf8               DEFAULT_ENCODING\n-  #158 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #159 = Utf8               FALLBACK_ENCODING\n-  #160 = Utf8               <init>\n-  #161 = Utf8               ()V\n-  #162 = Utf8               Code\n-  #163 = Utf8               LineNumberTable\n-  #164 = Utf8               LocalVariableTable\n-  #165 = Utf8               this\n-  #166 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarUtils;\n-  #167 = Utf8               parseOctal\n-  #168 = Utf8               ([BII)J\n-  #169 = Utf8               currentByte\n-  #170 = Utf8               B\n-  #171 = Utf8               buffer\n-  #172 = Utf8               [B\n-  #173 = Utf8               offset\n-  #174 = Utf8               length\n-  #175 = Utf8               result\n-  #176 = Utf8               J\n-  #177 = Utf8               end\n-  #178 = Utf8               start\n-  #179 = Utf8               trailer\n-  #180 = Utf8               StackMapTable\n-  #181 = Utf8               parseOctalOrBinary\n-  #182 = Utf8               negative\n-  #183 = Utf8               Z\n-  #184 = Utf8               parseBinaryLong\n-  #185 = Utf8               ([BIIZ)J\n-  #186 = Utf8               i\n-  #187 = Utf8               val\n-  #188 = Utf8               parseBinaryBigInteger\n-  #189 = Utf8               remainder\n-  #190 = Utf8               Ljava/math/BigInteger;\n-  #191 = Class              #172          // \"[B\"\n-  #192 = Class              #344          // java/math/BigInteger\n-  #193 = Utf8               parseBoolean\n-  #194 = Utf8               ([BI)Z\n-  #195 = Utf8               exceptionMessage\n-  #196 = Utf8               ([BIIIB)Ljava/lang/String;\n-  #197 = Utf8               current\n-  #198 = Utf8               string\n-  #199 = Utf8               Ljava/lang/String;\n-  #200 = Utf8               parseName\n-  #201 = Utf8               ([BII)Ljava/lang/String;\n-  #202 = Utf8               ex2\n-  #203 = Utf8               Ljava/io/IOException;\n-  #204 = Utf8               ex\n-  #205 = Class              #362          // java/io/IOException\n-  #206 = Utf8               ([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n-  #207 = Utf8               b\n-  #208 = Utf8               encoding\n-  #209 = Utf8               len\n-  #210 = Utf8               Exceptions\n-  #211 = Utf8               parseSparse\n-  #212 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n-  #213 = Utf8               sparseOffset\n-  #214 = Utf8               sparseNumbytes\n-  #215 = Utf8               readSparseStructs\n-  #216 = Utf8               ([BII)Ljava/util/List;\n-  #217 = Utf8               sparseHeader\n-  #218 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n-  #219 = Utf8               Ljava/lang/IllegalArgumentException;\n-  #220 = Utf8               entries\n-  #221 = Utf8               sparseHeaders\n-  #222 = Utf8               Ljava/util/List;\n-  #223 = Utf8               LocalVariableTypeTable\n-  #224 = Utf8               Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-  #225 = Class              #463          // java/util/List\n-  #226 = Class              #370          // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-  #227 = Class              #325          // java/lang/IllegalArgumentException\n-  #228 = Utf8               Signature\n-  #229 = Utf8               ([BII)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-  #230 = Utf8               formatNameBytes\n-  #231 = Utf8               (Ljava/lang/String;[BII)I\n-  #232 = Utf8               name\n-  #233 = Utf8               buf\n-  #234 = Class              #351          // java/lang/String\n-  #235 = Utf8               (Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n-  #236 = Utf8               Ljava/nio/ByteBuffer;\n-  #237 = Utf8               limit\n-  #238 = Class              #464          // java/nio/ByteBuffer\n-  #239 = Utf8               formatUnsignedOctalString\n-  #240 = Utf8               (J[BII)V\n-  #241 = Utf8               value\n-  #242 = Utf8               remaining\n-  #243 = Utf8               formatOctalBytes\n-  #244 = Utf8               (J[BII)I\n-  #245 = Utf8               idx\n-  #246 = Utf8               formatLongOctalBytes\n-  #247 = Utf8               formatLongOctalOrBinaryBytes\n-  #248 = Utf8               maxAsOctalChar\n-  #249 = Utf8               formatLongBinary\n-  #250 = Utf8               (J[BIIZ)V\n-  #251 = Utf8               bits\n-  #252 = Utf8               max\n-  #253 = Utf8               formatBigIntegerBinary\n-  #254 = Utf8               off\n-  #255 = Utf8               fill\n-  #256 = Utf8               formatCheckSumOctalBytes\n-  #257 = Utf8               computeCheckSum\n-  #258 = Utf8               ([B)J\n-  #259 = Utf8               element\n-  #260 = Utf8               sum\n-  #261 = Utf8               verifyCheckSum\n-  #262 = Utf8               ([B)Z\n-  #263 = Utf8               header\n-  #264 = Utf8               storedSum\n-  #265 = Utf8               unsignedSum\n-  #266 = Utf8               signedSum\n-  #267 = Utf8               parsePaxHeaders\n-  #268 = Utf8               (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;)Ljava/util/Map;\n-  #269 = Utf8               inputStream\n-  #270 = Utf8               Ljava/io/InputStream;\n-  #271 = Utf8               globalPaxHeaders\n-  #272 = Utf8               Ljava/util/Map;\n-  #273 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n-  #274 = Utf8               Deprecated\n-  #275 = Utf8               (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n-  #276 = Utf8               RuntimeVisibleAnnotations\n-  #277 = Utf8               Ljava/lang/Deprecated;\n-  #278 = Utf8               (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n-  #279 = Utf8               Ljava/lang/NumberFormatException;\n-  #280 = Utf8               numbytes\n-  #281 = Utf8               rest\n-  #282 = Utf8               got\n-  #283 = Utf8               keyword\n-  #284 = Utf8               restLen\n-  #285 = Utf8               coll\n-  #286 = Utf8               Ljava/io/ByteArrayOutputStream;\n-  #287 = Utf8               ch\n-  #288 = Utf8               read\n-  #289 = Utf8               headerSize\n-  #290 = Utf8               headers\n-  #291 = Utf8               Ljava/lang/Long;\n-  #292 = Utf8               totalRead\n-  #293 = Class              #465          // java/util/Map\n-  #294 = Class              #466          // java/lang/Long\n-  #295 = Class              #467          // java/io/InputStream\n-  #296 = Class              #413          // java/io/ByteArrayOutputStream\n-  #297 = Class              #433          // java/lang/NumberFormatException\n-  #298 = Utf8               (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;J)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n-  #299 = Utf8               parsePAX01SparseHeaders\n-  #300 = Utf8               (Ljava/lang/String;)Ljava/util/List;\n-  #301 = Utf8               sparseMap\n-  #302 = Utf8               (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-  #303 = Utf8               parseFromPAX01SparseHeaders\n-  #304 = Utf8               sparseHeaderStrings\n-  #305 = Utf8               [Ljava/lang/String;\n-  #306 = Class              #305          // \"[Ljava/lang/String;\"\n-  #307 = Utf8               parsePAX1XSparseHeaders\n-  #308 = Utf8               (Ljava/io/InputStream;I)Ljava/util/List;\n-  #309 = Utf8               recordSize\n-  #310 = Utf8               bytesRead\n-  #311 = Utf8               readResult\n-  #312 = Utf8               [J\n-  #313 = Utf8               sparseHeadersCount\n-  #314 = Utf8               bytesToSkip\n-  #315 = Class              #312          // \"[J\"\n-  #316 = Utf8               (Ljava/io/InputStream;I)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-  #317 = Utf8               readLineOfNumberForPax1X\n-  #318 = Utf8               (Ljava/io/InputStream;)[J\n-  #319 = Utf8               number\n-  #320 = Utf8               <clinit>\n-  #321 = Utf8               SourceFile\n-  #322 = Utf8               TarUtils.java\n-  #323 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n-  #324 = NameAndType        #160:#161     // \"<init>\":()V\n-  #325 = Utf8               java/lang/IllegalArgumentException\n-  #326 = Utf8               java/lang/StringBuilder\n-  #327 = Utf8               Length\n-  #328 = NameAndType        #468:#469     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #329 = NameAndType        #468:#470     // append:(I)Ljava/lang/StringBuilder;\n-  #330 = Utf8                must be at least 2\n-  #331 = NameAndType        #471:#472     // toString:()Ljava/lang/String;\n-  #332 = NameAndType        #160:#473     // \"<init>\":(Ljava/lang/String;)V\n-  #333 = NameAndType        #195:#196     // exceptionMessage:([BIIIB)Ljava/lang/String;\n-  #334 = NameAndType        #167:#168     // parseOctal:([BII)J\n-  #335 = NameAndType        #184:#185     // parseBinaryLong:([BIIZ)J\n-  #336 = NameAndType        #188:#185     // parseBinaryBigInteger:([BIIZ)J\n-  #337 = Utf8               At offset\n-  #338 = Utf8               ,\n-  #339 = Utf8                byte binary number exceeds maximum signed long value\n-  #340 = Class              #474          // java/lang/Math\n-  #341 = NameAndType        #475:#476     // pow:(DD)D\n-  #342 = Class              #477          // java/lang/System\n-  #343 = NameAndType        #478:#479     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #344 = Utf8               java/math/BigInteger\n-  #345 = NameAndType        #160:#480     // \"<init>\":([B)V\n-  #346 = NameAndType        #481:#482     // valueOf:(J)Ljava/math/BigInteger;\n-  #347 = NameAndType        #483:#484     // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #348 = NameAndType        #485:#486     // not:()Ljava/math/BigInteger;\n-  #349 = NameAndType        #487:#488     // bitLength:()I\n-  #350 = NameAndType        #489:#490     // longValue:()J\n-  #351 = Utf8               java/lang/String\n-  #352 = NameAndType        #160:#491     // \"<init>\":([BII)V\n-  #353 = Utf8               \\u0000\n-  #354 = Utf8               {NUL}\n-  #355 = NameAndType        #492:#493     // replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n-  #356 = Utf8               Invalid byte\n-  #357 = Utf8                at offset\n-  #358 = Utf8                in \\'\n-  #359 = Utf8               \\' len=\n-  #360 = NameAndType        #157:#158     // DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #361 = NameAndType        #200:#206     // parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n-  #362 = Utf8               java/io/IOException\n-  #363 = NameAndType        #159:#158     // FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #364 = Utf8               java/lang/RuntimeException\n-  #365 = NameAndType        #160:#494     // \"<init>\":(Ljava/lang/Throwable;)V\n-  #366 = Class              #495          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #367 = NameAndType        #496:#497     // decode:([B)Ljava/lang/String;\n-  #368 = Utf8\n-  #369 = NameAndType        #181:#168     // parseOctalOrBinary:([BII)J\n-  #370 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-  #371 = NameAndType        #160:#498     // \"<init>\":(JJ)V\n-  #372 = Utf8               java/util/ArrayList\n-  #373 = NameAndType        #211:#212     // parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n-  #374 = NameAndType        #499:#490     // getOffset:()J\n-  #375 = Utf8               Corrupted TAR archive, sparse entry with negative offset\n-  #376 = NameAndType        #500:#490     // getNumbytes:()J\n-  #377 = Utf8               Corrupted TAR archive, sparse entry with negative numbytes\n-  #378 = Class              #463          // java/util/List\n-  #379 = NameAndType        #483:#501     // add:(Ljava/lang/Object;)Z\n-  #380 = Utf8               Corrupted TAR archive, sparse entry is invalid\n-  #381 = NameAndType        #160:#502     // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #382 = Class              #503          // java/util/Collections\n-  #383 = NameAndType        #504:#505     // unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n-  #384 = NameAndType        #230:#235     // formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n-  #385 = NameAndType        #174:#488     // length:()I\n-  #386 = NameAndType        #506:#507     // encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-  #387 = Class              #464          // java/nio/ByteBuffer\n-  #388 = NameAndType        #237:#488     // limit:()I\n-  #389 = NameAndType        #508:#509     // substring:(II)Ljava/lang/String;\n-  #390 = NameAndType        #510:#488     // position:()I\n-  #391 = NameAndType        #511:#512     // array:()[B\n-  #392 = NameAndType        #513:#488     // arrayOffset:()I\n-  #393 = NameAndType        #468:#514     // append:(J)Ljava/lang/StringBuilder;\n-  #394 = Utf8               =\n-  #395 = Class              #466          // java/lang/Long\n-  #396 = NameAndType        #515:#516     // toOctalString:(J)Ljava/lang/String;\n-  #397 = Utf8                will not fit in octal number buffer of length\n-  #398 = NameAndType        #239:#240     // formatUnsignedOctalString:(J[BII)V\n-  #399 = NameAndType        #246:#244     // formatLongOctalBytes:(J[BII)I\n-  #400 = NameAndType        #249:#250     // formatLongBinary:(J[BIIZ)V\n-  #401 = NameAndType        #253:#250     // formatBigIntegerBinary:(J[BIIZ)V\n-  #402 = NameAndType        #517:#518     // abs:(J)J\n-  #403 = Utf8               Value\n-  #404 = Utf8                is too large for\n-  #405 = Utf8                byte field.\n-  #406 = NameAndType        #519:#512     // toByteArray:()[B\n-  #407 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils\n-  #408 = NameAndType        #267:#278     // parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n-  #409 = Utf8               java/util/HashMap\n-  #410 = NameAndType        #160:#520     // \"<init>\":(Ljava/util/Map;)V\n-  #411 = Class              #467          // java/io/InputStream\n-  #412 = NameAndType        #288:#488     // read:()I\n-  #413 = Utf8               java/io/ByteArrayOutputStream\n-  #414 = Utf8               org/apache/commons/compress/utils/CharsetNames\n-  #415 = Utf8               UTF-8\n-  #416 = NameAndType        #471:#521     // toString:(Ljava/lang/String;)Ljava/lang/String;\n-  #417 = Class              #465          // java/util/Map\n-  #418 = NameAndType        #522:#523     // remove:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #419 = Utf8               Paxheader value size\n-  #420 = Utf8                exceeds size of header record\n-  #421 = Class              #524          // org/apache/commons/compress/utils/IOUtils\n-  #422 = NameAndType        #525:#526     // readRange:(Ljava/io/InputStream;I)[B\n-  #423 = Utf8               Failed to read Paxheader. Expected\n-  #424 = Utf8                bytes, read\n-  #425 = Utf8               Failed to read Paxheader.Value should end with a newline\n-  #426 = Class              #527          // java/nio/charset/StandardCharsets\n-  #427 = NameAndType        #528:#529     // UTF_8:Ljava/nio/charset/Charset;\n-  #428 = NameAndType        #160:#530     // \"<init>\":([BIILjava/nio/charset/Charset;)V\n-  #429 = NameAndType        #531:#532     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #430 = Utf8               GNU.sparse.offset\n-  #431 = NameAndType        #533:#501     // equals:(Ljava/lang/Object;)Z\n-  #432 = NameAndType        #481:#534     // valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n-  #433 = Utf8               java/lang/NumberFormatException\n-  #434 = Utf8               Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n-  #435 = Utf8               Failed to read Paxheader.GNU.sparse.offset contains negative value\n-  #436 = Utf8               GNU.sparse.numbytes\n-  #437 = Utf8               Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n-  #438 = NameAndType        #535:#536     // parseLong:(Ljava/lang/String;)J\n-  #439 = Utf8               Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n-  #440 = Utf8               Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n-  #441 = NameAndType        #537:#538     // write:(I)V\n-  #442 = Utf8               Failed to read Paxheader. Encountered a non-number while reading length\n-  #443 = NameAndType        #303:#300     // parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n-  #444 = NameAndType        #539:#472     // getMessage:()Ljava/lang/String;\n-  #445 = Utf8               ,\n-  #446 = NameAndType        #540:#541     // split:(Ljava/lang/String;)[Ljava/lang/String;\n-  #447 = Utf8               Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n-  #448 = Utf8               Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n-  #449 = Utf8               Corrupted TAR archive. Sparse struct offset contains negative value\n-  #450 = Utf8               Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n-  #451 = Utf8               Corrupted TAR archive. Sparse struct numbytes contains negative value\n-  #452 = NameAndType        #317:#318     // readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n-  #453 = Utf8               Corrupted TAR archive. Negative value in sparse headers block\n-  #454 = Utf8               Corrupted TAR archive. Sparse header block offset contains negative value\n-  #455 = Utf8               Corrupted TAR archive. Sparse header block numbytes contains negative value\n-  #456 = NameAndType        #542:#543     // skip:(Ljava/io/InputStream;J)J\n-  #457 = Utf8               Unexpected EOF when reading parse information of 1.X PAX format\n-  #458 = Utf8               Corrupted TAR archive. Non-numeric value in sparse headers block\n-  #459 = Class              #544          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #460 = NameAndType        #545:#546     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #461 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils$1\n-  #462 = Utf8               java/lang/Object\n-  #463 = Utf8               java/util/List\n-  #464 = Utf8               java/nio/ByteBuffer\n-  #465 = Utf8               java/util/Map\n-  #466 = Utf8               java/lang/Long\n-  #467 = Utf8               java/io/InputStream\n-  #468 = Utf8               append\n-  #469 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #470 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #471 = Utf8               toString\n-  #472 = Utf8               ()Ljava/lang/String;\n-  #473 = Utf8               (Ljava/lang/String;)V\n-  #474 = Utf8               java/lang/Math\n-  #475 = Utf8               pow\n-  #476 = Utf8               (DD)D\n-  #477 = Utf8               java/lang/System\n-  #478 = Utf8               arraycopy\n-  #479 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #480 = Utf8               ([B)V\n-  #481 = Utf8               valueOf\n-  #482 = Utf8               (J)Ljava/math/BigInteger;\n-  #483 = Utf8               add\n-  #484 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #485 = Utf8               not\n-  #486 = Utf8               ()Ljava/math/BigInteger;\n-  #487 = Utf8               bitLength\n-  #488 = Utf8               ()I\n-  #489 = Utf8               longValue\n-  #490 = Utf8               ()J\n-  #491 = Utf8               ([BII)V\n-  #492 = Utf8               replace\n-  #493 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n-  #494 = Utf8               (Ljava/lang/Throwable;)V\n-  #495 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #496 = Utf8               decode\n-  #497 = Utf8               ([B)Ljava/lang/String;\n-  #498 = Utf8               (JJ)V\n-  #499 = Utf8               getOffset\n-  #500 = Utf8               getNumbytes\n-  #501 = Utf8               (Ljava/lang/Object;)Z\n-  #502 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #503 = Utf8               java/util/Collections\n-  #504 = Utf8               unmodifiableList\n-  #505 = Utf8               (Ljava/util/List;)Ljava/util/List;\n-  #506 = Utf8               encode\n-  #507 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-  #508 = Utf8               substring\n-  #509 = Utf8               (II)Ljava/lang/String;\n-  #510 = Utf8               position\n-  #511 = Utf8               array\n-  #512 = Utf8               ()[B\n-  #513 = Utf8               arrayOffset\n-  #514 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #515 = Utf8               toOctalString\n-  #516 = Utf8               (J)Ljava/lang/String;\n-  #517 = Utf8               abs\n-  #518 = Utf8               (J)J\n-  #519 = Utf8               toByteArray\n-  #520 = Utf8               (Ljava/util/Map;)V\n-  #521 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #522 = Utf8               remove\n-  #523 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #524 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #525 = Utf8               readRange\n-  #526 = Utf8               (Ljava/io/InputStream;I)[B\n-  #527 = Utf8               java/nio/charset/StandardCharsets\n-  #528 = Utf8               UTF_8\n-  #529 = Utf8               Ljava/nio/charset/Charset;\n-  #530 = Utf8               ([BIILjava/nio/charset/Charset;)V\n-  #531 = Utf8               put\n-  #532 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #533 = Utf8               equals\n-  #534 = Utf8               (Ljava/lang/String;)Ljava/lang/Long;\n-  #535 = Utf8               parseLong\n-  #536 = Utf8               (Ljava/lang/String;)J\n-  #537 = Utf8               write\n-  #538 = Utf8               (I)V\n-  #539 = Utf8               getMessage\n-  #540 = Utf8               split\n-  #541 = Utf8               (Ljava/lang/String;)[Ljava/lang/String;\n-  #542 = Utf8               skip\n-  #543 = Utf8               (Ljava/io/InputStream;J)J\n-  #544 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #545 = Utf8               getZipEncoding\n-  #546 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+    #1 = Class              #299          // org/apache/commons/compress/archivers/tar/TarConstants\n+    #2 = Methodref          #134.#300     // java/lang/Object.\"<init>\":()V\n+    #3 = Class              #301          // java/lang/IllegalArgumentException\n+    #4 = InvokeDynamic      #0:#305       // #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+    #5 = Methodref          #3.#306       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+    #6 = Methodref          #80.#307      // org/apache/commons/compress/archivers/tar/TarUtils.exceptionMessage:([BIIIB)Ljava/lang/String;\n+    #7 = Methodref          #80.#308      // org/apache/commons/compress/archivers/tar/TarUtils.parseOctal:([BII)J\n+    #8 = Methodref          #80.#309      // org/apache/commons/compress/archivers/tar/TarUtils.parseBinaryLong:([BIIZ)J\n+    #9 = Methodref          #80.#310      // org/apache/commons/compress/archivers/tar/TarUtils.parseBinaryBigInteger:([BIIZ)J\n+   #10 = InvokeDynamic      #1:#312       // #1:makeConcatWithConstants:(II)Ljava/lang/String;\n+   #11 = Double             2.0d\n+   #13 = Double             8.0d\n+   #15 = Methodref          #313.#314     // java/lang/Math.pow:(DD)D\n+   #16 = Methodref          #315.#316     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #17 = Class              #317          // java/math/BigInteger\n+   #18 = Methodref          #17.#318      // java/math/BigInteger.\"<init>\":([B)V\n+   #19 = Long               -1l\n+   #21 = Methodref          #17.#319      // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+   #22 = Methodref          #17.#320      // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #23 = Methodref          #17.#321      // java/math/BigInteger.not:()Ljava/math/BigInteger;\n+   #24 = Methodref          #17.#322      // java/math/BigInteger.bitLength:()I\n+   #25 = Methodref          #17.#323      // java/math/BigInteger.longValue:()J\n+   #26 = Class              #324          // java/lang/String\n+   #27 = Methodref          #26.#325      // java/lang/String.\"<init>\":([BII)V\n+   #28 = String             #326          // \\u0000\n+   #29 = String             #327          // {NUL}\n+   #30 = Methodref          #26.#328      // java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n+   #31 = InvokeDynamic      #2:#330       // #2:makeConcatWithConstants:(BILjava/lang/String;I)Ljava/lang/String;\n+   #32 = Fieldref           #80.#331      // org/apache/commons/compress/archivers/tar/TarUtils.DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #33 = Methodref          #80.#332      // org/apache/commons/compress/archivers/tar/TarUtils.parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+   #34 = Class              #333          // java/io/IOException\n+   #35 = Fieldref           #80.#334      // org/apache/commons/compress/archivers/tar/TarUtils.FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #36 = Class              #335          // java/lang/RuntimeException\n+   #37 = Methodref          #36.#336      // java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n+   #38 = InterfaceMethodref #337.#338     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+   #39 = String             #339          //\n+   #40 = Methodref          #80.#340      // org/apache/commons/compress/archivers/tar/TarUtils.parseOctalOrBinary:([BII)J\n+   #41 = Class              #341          // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+   #42 = Methodref          #41.#342      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+   #43 = Class              #343          // java/util/ArrayList\n+   #44 = Methodref          #43.#300      // java/util/ArrayList.\"<init>\":()V\n+   #45 = Methodref          #80.#344      // org/apache/commons/compress/archivers/tar/TarUtils.parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+   #46 = Methodref          #41.#345      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+   #47 = String             #346          // Corrupted TAR archive, sparse entry with negative offset\n+   #48 = Methodref          #34.#306      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #49 = Methodref          #41.#347      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n+   #50 = String             #348          // Corrupted TAR archive, sparse entry with negative numbytes\n+   #51 = InterfaceMethodref #206.#349     // java/util/List.add:(Ljava/lang/Object;)Z\n+   #52 = String             #350          // Corrupted TAR archive, sparse entry is invalid\n+   #53 = Methodref          #34.#351      // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #54 = Methodref          #352.#353     // java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+   #55 = Methodref          #80.#354      // org/apache/commons/compress/archivers/tar/TarUtils.formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+   #56 = Methodref          #26.#355      // java/lang/String.length:()I\n+   #57 = InterfaceMethodref #337.#356     // org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+   #58 = Methodref          #216.#357     // java/nio/ByteBuffer.limit:()I\n+   #59 = Methodref          #26.#358      // java/lang/String.substring:(II)Ljava/lang/String;\n+   #60 = Methodref          #216.#359     // java/nio/ByteBuffer.position:()I\n+   #61 = Methodref          #216.#360     // java/nio/ByteBuffer.array:()[B\n+   #62 = Methodref          #216.#361     // java/nio/ByteBuffer.arrayOffset:()I\n+   #63 = Long               7l\n+   #65 = Methodref          #272.#362     // java/lang/Long.toOctalString:(J)Ljava/lang/String;\n+   #66 = InvokeDynamic      #3:#364       // #3:makeConcatWithConstants:(JLjava/lang/String;I)Ljava/lang/String;\n+   #67 = Methodref          #80.#365      // org/apache/commons/compress/archivers/tar/TarUtils.formatUnsignedOctalString:(J[BII)V\n+   #68 = Long               2097151l\n+   #70 = Long               8589934591l\n+   #72 = Methodref          #80.#366      // org/apache/commons/compress/archivers/tar/TarUtils.formatLongOctalBytes:(J[BII)I\n+   #73 = Methodref          #80.#367      // org/apache/commons/compress/archivers/tar/TarUtils.formatLongBinary:(J[BIIZ)V\n+   #74 = Methodref          #80.#368      // org/apache/commons/compress/archivers/tar/TarUtils.formatBigIntegerBinary:(J[BIIZ)V\n+   #75 = Methodref          #313.#369     // java/lang/Math.abs:(J)J\n+   #76 = InvokeDynamic      #4:#371       // #4:makeConcatWithConstants:(JI)Ljava/lang/String;\n+   #77 = Long               255l\n+   #79 = Methodref          #17.#372      // java/math/BigInteger.toByteArray:()[B\n+   #80 = Class              #373          // org/apache/commons/compress/archivers/tar/TarUtils\n+   #81 = Methodref          #80.#374      // org/apache/commons/compress/archivers/tar/TarUtils.parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+   #82 = Class              #375          // java/util/HashMap\n+   #83 = Methodref          #82.#376      // java/util/HashMap.\"<init>\":(Ljava/util/Map;)V\n+   #84 = Methodref          #273.#377     // java/io/InputStream.read:()I\n+   #85 = Class              #378          // java/io/ByteArrayOutputStream\n+   #86 = Methodref          #85.#300      // java/io/ByteArrayOutputStream.\"<init>\":()V\n+   #87 = Class              #379          // org/apache/commons/compress/utils/CharsetNames\n+   #88 = String             #380          // UTF-8\n+   #89 = Methodref          #85.#381      // java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;\n+   #90 = InterfaceMethodref #271.#382     // java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #91 = InvokeDynamic      #5:#305       // #5:makeConcatWithConstants:(I)Ljava/lang/String;\n+   #92 = Methodref          #384.#385     // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n+   #93 = InvokeDynamic      #6:#312       // #6:makeConcatWithConstants:(II)Ljava/lang/String;\n+   #94 = String             #387          // Failed to read Paxheader.Value should end with a newline\n+   #95 = Fieldref           #388.#389     // java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;\n+   #96 = Methodref          #26.#390      // java/lang/String.\"<init>\":([BIILjava/nio/charset/Charset;)V\n+   #97 = InterfaceMethodref #271.#391     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #98 = String             #392          // GNU.sparse.offset\n+   #99 = Methodref          #26.#393      // java/lang/String.equals:(Ljava/lang/Object;)Z\n+  #100 = Methodref          #272.#323     // java/lang/Long.longValue:()J\n+  #101 = Methodref          #272.#394     // java/lang/Long.valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n+  #102 = Class              #395          // java/lang/NumberFormatException\n+  #103 = String             #396          // Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n+  #104 = String             #397          // Failed to read Paxheader.GNU.sparse.offset contains negative value\n+  #105 = String             #398          // GNU.sparse.numbytes\n+  #106 = String             #399          // Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n+  #107 = Methodref          #272.#400     // java/lang/Long.parseLong:(Ljava/lang/String;)J\n+  #108 = String             #401          // Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n+  #109 = String             #402          // Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n+  #110 = Methodref          #85.#403      // java/io/ByteArrayOutputStream.write:(I)V\n+  #111 = String             #404          // Failed to read Paxheader. Encountered a non-number while reading length\n+  #112 = Methodref          #80.#405      // org/apache/commons/compress/archivers/tar/TarUtils.parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n+  #113 = Methodref          #34.#406      // java/io/IOException.getMessage:()Ljava/lang/String;\n+  #114 = Methodref          #36.#351      // java/lang/RuntimeException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #115 = String             #407          // ,\n+  #116 = Methodref          #26.#408      // java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n+  #117 = String             #409          // Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n+  #118 = String             #410          // Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n+  #119 = String             #411          // Corrupted TAR archive. Sparse struct offset contains negative value\n+  #120 = String             #412          // Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n+  #121 = String             #413          // Corrupted TAR archive. Sparse struct numbytes contains negative value\n+  #122 = Methodref          #80.#414      // org/apache/commons/compress/archivers/tar/TarUtils.readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+  #123 = String             #415          // Corrupted TAR archive. Negative value in sparse headers block\n+  #124 = String             #416          // Corrupted TAR archive. Sparse header block offset contains negative value\n+  #125 = String             #417          // Corrupted TAR archive. Sparse header block numbytes contains negative value\n+  #126 = Methodref          #384.#418     // org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+  #127 = String             #419          // Unexpected EOF when reading parse information of 1.X PAX format\n+  #128 = String             #420          // Corrupted TAR archive. Non-numeric value in sparse headers block\n+  #129 = Long               10l\n+  #131 = Methodref          #421.#422     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #132 = Class              #423          // org/apache/commons/compress/archivers/tar/TarUtils$1\n+  #133 = Methodref          #132.#300     // org/apache/commons/compress/archivers/tar/TarUtils$1.\"<init>\":()V\n+  #134 = Class              #424          // java/lang/Object\n+  #135 = Utf8               InnerClasses\n+  #136 = Utf8               BYTE_MASK\n+  #137 = Utf8               I\n+  #138 = Utf8               ConstantValue\n+  #139 = Integer            255\n+  #140 = Utf8               DEFAULT_ENCODING\n+  #141 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #142 = Utf8               FALLBACK_ENCODING\n+  #143 = Utf8               <init>\n+  #144 = Utf8               ()V\n+  #145 = Utf8               Code\n+  #146 = Utf8               LineNumberTable\n+  #147 = Utf8               LocalVariableTable\n+  #148 = Utf8               this\n+  #149 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarUtils;\n+  #150 = Utf8               parseOctal\n+  #151 = Utf8               ([BII)J\n+  #152 = Utf8               currentByte\n+  #153 = Utf8               B\n+  #154 = Utf8               buffer\n+  #155 = Utf8               [B\n+  #156 = Utf8               offset\n+  #157 = Utf8               length\n+  #158 = Utf8               result\n+  #159 = Utf8               J\n+  #160 = Utf8               end\n+  #161 = Utf8               start\n+  #162 = Utf8               trailer\n+  #163 = Utf8               StackMapTable\n+  #164 = Utf8               parseOctalOrBinary\n+  #165 = Utf8               negative\n+  #166 = Utf8               Z\n+  #167 = Utf8               parseBinaryLong\n+  #168 = Utf8               ([BIIZ)J\n+  #169 = Utf8               i\n+  #170 = Utf8               val\n+  #171 = Utf8               parseBinaryBigInteger\n+  #172 = Utf8               remainder\n+  #173 = Utf8               Ljava/math/BigInteger;\n+  #174 = Class              #155          // \"[B\"\n+  #175 = Utf8               parseBoolean\n+  #176 = Utf8               ([BI)Z\n+  #177 = Utf8               exceptionMessage\n+  #178 = Utf8               ([BIIIB)Ljava/lang/String;\n+  #179 = Utf8               current\n+  #180 = Utf8               string\n+  #181 = Utf8               Ljava/lang/String;\n+  #182 = Utf8               parseName\n+  #183 = Utf8               ([BII)Ljava/lang/String;\n+  #184 = Utf8               ex2\n+  #185 = Utf8               Ljava/io/IOException;\n+  #186 = Utf8               ex\n+  #187 = Utf8               ([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+  #188 = Utf8               b\n+  #189 = Utf8               encoding\n+  #190 = Utf8               len\n+  #191 = Utf8               Exceptions\n+  #192 = Utf8               parseSparse\n+  #193 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+  #194 = Utf8               sparseOffset\n+  #195 = Utf8               sparseNumbytes\n+  #196 = Utf8               readSparseStructs\n+  #197 = Utf8               ([BII)Ljava/util/List;\n+  #198 = Utf8               sparseHeader\n+  #199 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+  #200 = Utf8               Ljava/lang/IllegalArgumentException;\n+  #201 = Utf8               entries\n+  #202 = Utf8               sparseHeaders\n+  #203 = Utf8               Ljava/util/List;\n+  #204 = Utf8               LocalVariableTypeTable\n+  #205 = Utf8               Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+  #206 = Class              #425          // java/util/List\n+  #207 = Utf8               Signature\n+  #208 = Utf8               ([BII)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+  #209 = Utf8               formatNameBytes\n+  #210 = Utf8               (Ljava/lang/String;[BII)I\n+  #211 = Utf8               name\n+  #212 = Utf8               buf\n+  #213 = Utf8               (Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+  #214 = Utf8               Ljava/nio/ByteBuffer;\n+  #215 = Utf8               limit\n+  #216 = Class              #426          // java/nio/ByteBuffer\n+  #217 = Utf8               formatUnsignedOctalString\n+  #218 = Utf8               (J[BII)V\n+  #219 = Utf8               value\n+  #220 = Utf8               remaining\n+  #221 = Utf8               formatOctalBytes\n+  #222 = Utf8               (J[BII)I\n+  #223 = Utf8               idx\n+  #224 = Utf8               formatLongOctalBytes\n+  #225 = Utf8               formatLongOctalOrBinaryBytes\n+  #226 = Utf8               maxAsOctalChar\n+  #227 = Utf8               formatLongBinary\n+  #228 = Utf8               (J[BIIZ)V\n+  #229 = Utf8               bits\n+  #230 = Utf8               max\n+  #231 = Utf8               formatBigIntegerBinary\n+  #232 = Utf8               off\n+  #233 = Utf8               fill\n+  #234 = Utf8               formatCheckSumOctalBytes\n+  #235 = Utf8               computeCheckSum\n+  #236 = Utf8               ([B)J\n+  #237 = Utf8               element\n+  #238 = Utf8               sum\n+  #239 = Utf8               verifyCheckSum\n+  #240 = Utf8               ([B)Z\n+  #241 = Utf8               header\n+  #242 = Utf8               storedSum\n+  #243 = Utf8               unsignedSum\n+  #244 = Utf8               signedSum\n+  #245 = Utf8               parsePaxHeaders\n+  #246 = Utf8               (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;)Ljava/util/Map;\n+  #247 = Utf8               inputStream\n+  #248 = Utf8               Ljava/io/InputStream;\n+  #249 = Utf8               globalPaxHeaders\n+  #250 = Utf8               Ljava/util/Map;\n+  #251 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+  #252 = Utf8               Deprecated\n+  #253 = Utf8               (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+  #254 = Utf8               RuntimeVisibleAnnotations\n+  #255 = Utf8               Ljava/lang/Deprecated;\n+  #256 = Utf8               (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+  #257 = Utf8               Ljava/lang/NumberFormatException;\n+  #258 = Utf8               numbytes\n+  #259 = Utf8               rest\n+  #260 = Utf8               got\n+  #261 = Utf8               keyword\n+  #262 = Utf8               restLen\n+  #263 = Utf8               coll\n+  #264 = Utf8               Ljava/io/ByteArrayOutputStream;\n+  #265 = Utf8               ch\n+  #266 = Utf8               read\n+  #267 = Utf8               headerSize\n+  #268 = Utf8               headers\n+  #269 = Utf8               Ljava/lang/Long;\n+  #270 = Utf8               totalRead\n+  #271 = Class              #427          // java/util/Map\n+  #272 = Class              #428          // java/lang/Long\n+  #273 = Class              #429          // java/io/InputStream\n+  #274 = Utf8               (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;J)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+  #275 = Utf8               parsePAX01SparseHeaders\n+  #276 = Utf8               (Ljava/lang/String;)Ljava/util/List;\n+  #277 = Utf8               sparseMap\n+  #278 = Utf8               (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+  #279 = Utf8               parseFromPAX01SparseHeaders\n+  #280 = Utf8               sparseHeaderStrings\n+  #281 = Utf8               [Ljava/lang/String;\n+  #282 = Class              #281          // \"[Ljava/lang/String;\"\n+  #283 = Utf8               parsePAX1XSparseHeaders\n+  #284 = Utf8               (Ljava/io/InputStream;I)Ljava/util/List;\n+  #285 = Utf8               recordSize\n+  #286 = Utf8               bytesRead\n+  #287 = Utf8               readResult\n+  #288 = Utf8               [J\n+  #289 = Utf8               sparseHeadersCount\n+  #290 = Utf8               bytesToSkip\n+  #291 = Class              #288          // \"[J\"\n+  #292 = Utf8               (Ljava/io/InputStream;I)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+  #293 = Utf8               readLineOfNumberForPax1X\n+  #294 = Utf8               (Ljava/io/InputStream;)[J\n+  #295 = Utf8               number\n+  #296 = Utf8               <clinit>\n+  #297 = Utf8               SourceFile\n+  #298 = Utf8               TarUtils.java\n+  #299 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n+  #300 = NameAndType        #143:#144     // \"<init>\":()V\n+  #301 = Utf8               java/lang/IllegalArgumentException\n+  #302 = Utf8               BootstrapMethods\n+  #303 = MethodHandle       6:#430        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #304 = String             #431          // Length \\u0001 must be at least 2\n+  #305 = NameAndType        #432:#433     // makeConcatWithConstants:(I)Ljava/lang/String;\n+  #306 = NameAndType        #143:#434     // \"<init>\":(Ljava/lang/String;)V\n+  #307 = NameAndType        #177:#178     // exceptionMessage:([BIIIB)Ljava/lang/String;\n+  #308 = NameAndType        #150:#151     // parseOctal:([BII)J\n+  #309 = NameAndType        #167:#168     // parseBinaryLong:([BIIZ)J\n+  #310 = NameAndType        #171:#168     // parseBinaryBigInteger:([BIIZ)J\n+  #311 = String             #435          // At offset \\u0001, \\u0001 byte binary number exceeds maximum signed long value\n+  #312 = NameAndType        #432:#436     // makeConcatWithConstants:(II)Ljava/lang/String;\n+  #313 = Class              #437          // java/lang/Math\n+  #314 = NameAndType        #438:#439     // pow:(DD)D\n+  #315 = Class              #440          // java/lang/System\n+  #316 = NameAndType        #441:#442     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #317 = Utf8               java/math/BigInteger\n+  #318 = NameAndType        #143:#443     // \"<init>\":([B)V\n+  #319 = NameAndType        #444:#445     // valueOf:(J)Ljava/math/BigInteger;\n+  #320 = NameAndType        #446:#447     // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #321 = NameAndType        #448:#449     // not:()Ljava/math/BigInteger;\n+  #322 = NameAndType        #450:#451     // bitLength:()I\n+  #323 = NameAndType        #452:#453     // longValue:()J\n+  #324 = Utf8               java/lang/String\n+  #325 = NameAndType        #143:#454     // \"<init>\":([BII)V\n+  #326 = Utf8               \\u0000\n+  #327 = Utf8               {NUL}\n+  #328 = NameAndType        #455:#456     // replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n+  #329 = String             #457          // Invalid byte \\u0001 at offset \\u0001 in \\'\\u0001\\' len=\\u0001\n+  #330 = NameAndType        #432:#458     // makeConcatWithConstants:(BILjava/lang/String;I)Ljava/lang/String;\n+  #331 = NameAndType        #140:#141     // DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #332 = NameAndType        #182:#187     // parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+  #333 = Utf8               java/io/IOException\n+  #334 = NameAndType        #142:#141     // FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #335 = Utf8               java/lang/RuntimeException\n+  #336 = NameAndType        #143:#459     // \"<init>\":(Ljava/lang/Throwable;)V\n+  #337 = Class              #460          // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #338 = NameAndType        #461:#462     // decode:([B)Ljava/lang/String;\n+  #339 = Utf8\n+  #340 = NameAndType        #164:#151     // parseOctalOrBinary:([BII)J\n+  #341 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+  #342 = NameAndType        #143:#463     // \"<init>\":(JJ)V\n+  #343 = Utf8               java/util/ArrayList\n+  #344 = NameAndType        #192:#193     // parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+  #345 = NameAndType        #464:#453     // getOffset:()J\n+  #346 = Utf8               Corrupted TAR archive, sparse entry with negative offset\n+  #347 = NameAndType        #465:#453     // getNumbytes:()J\n+  #348 = Utf8               Corrupted TAR archive, sparse entry with negative numbytes\n+  #349 = NameAndType        #446:#466     // add:(Ljava/lang/Object;)Z\n+  #350 = Utf8               Corrupted TAR archive, sparse entry is invalid\n+  #351 = NameAndType        #143:#467     // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #352 = Class              #468          // java/util/Collections\n+  #353 = NameAndType        #469:#470     // unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+  #354 = NameAndType        #209:#213     // formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+  #355 = NameAndType        #157:#451     // length:()I\n+  #356 = NameAndType        #471:#472     // encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #357 = NameAndType        #215:#451     // limit:()I\n+  #358 = NameAndType        #473:#436     // substring:(II)Ljava/lang/String;\n+  #359 = NameAndType        #474:#451     // position:()I\n+  #360 = NameAndType        #475:#476     // array:()[B\n+  #361 = NameAndType        #477:#451     // arrayOffset:()I\n+  #362 = NameAndType        #478:#479     // toOctalString:(J)Ljava/lang/String;\n+  #363 = String             #480          // \\u0001=\\u0001 will not fit in octal number buffer of length \\u0001\n+  #364 = NameAndType        #432:#481     // makeConcatWithConstants:(JLjava/lang/String;I)Ljava/lang/String;\n+  #365 = NameAndType        #217:#218     // formatUnsignedOctalString:(J[BII)V\n+  #366 = NameAndType        #224:#222     // formatLongOctalBytes:(J[BII)I\n+  #367 = NameAndType        #227:#228     // formatLongBinary:(J[BIIZ)V\n+  #368 = NameAndType        #231:#228     // formatBigIntegerBinary:(J[BIIZ)V\n+  #369 = NameAndType        #482:#483     // abs:(J)J\n+  #370 = String             #484          // Value \\u0001 is too large for \\u0001 byte field.\n+  #371 = NameAndType        #432:#485     // makeConcatWithConstants:(JI)Ljava/lang/String;\n+  #372 = NameAndType        #486:#476     // toByteArray:()[B\n+  #373 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils\n+  #374 = NameAndType        #245:#256     // parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+  #375 = Utf8               java/util/HashMap\n+  #376 = NameAndType        #143:#487     // \"<init>\":(Ljava/util/Map;)V\n+  #377 = NameAndType        #266:#451     // read:()I\n+  #378 = Utf8               java/io/ByteArrayOutputStream\n+  #379 = Utf8               org/apache/commons/compress/utils/CharsetNames\n+  #380 = Utf8               UTF-8\n+  #381 = NameAndType        #488:#489     // toString:(Ljava/lang/String;)Ljava/lang/String;\n+  #382 = NameAndType        #490:#491     // remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #383 = String             #492          // Paxheader value size \\u0001 exceeds size of header record\n+  #384 = Class              #493          // org/apache/commons/compress/utils/IOUtils\n+  #385 = NameAndType        #494:#495     // readRange:(Ljava/io/InputStream;I)[B\n+  #386 = String             #496          // Failed to read Paxheader. Expected \\u0001 bytes, read \\u0001\n+  #387 = Utf8               Failed to read Paxheader.Value should end with a newline\n+  #388 = Class              #497          // java/nio/charset/StandardCharsets\n+  #389 = NameAndType        #498:#499     // UTF_8:Ljava/nio/charset/Charset;\n+  #390 = NameAndType        #143:#500     // \"<init>\":([BIILjava/nio/charset/Charset;)V\n+  #391 = NameAndType        #501:#502     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #392 = Utf8               GNU.sparse.offset\n+  #393 = NameAndType        #503:#466     // equals:(Ljava/lang/Object;)Z\n+  #394 = NameAndType        #444:#504     // valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n+  #395 = Utf8               java/lang/NumberFormatException\n+  #396 = Utf8               Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n+  #397 = Utf8               Failed to read Paxheader.GNU.sparse.offset contains negative value\n+  #398 = Utf8               GNU.sparse.numbytes\n+  #399 = Utf8               Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n+  #400 = NameAndType        #505:#506     // parseLong:(Ljava/lang/String;)J\n+  #401 = Utf8               Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n+  #402 = Utf8               Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n+  #403 = NameAndType        #507:#508     // write:(I)V\n+  #404 = Utf8               Failed to read Paxheader. Encountered a non-number while reading length\n+  #405 = NameAndType        #279:#276     // parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n+  #406 = NameAndType        #509:#510     // getMessage:()Ljava/lang/String;\n+  #407 = Utf8               ,\n+  #408 = NameAndType        #511:#512     // split:(Ljava/lang/String;)[Ljava/lang/String;\n+  #409 = Utf8               Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n+  #410 = Utf8               Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n+  #411 = Utf8               Corrupted TAR archive. Sparse struct offset contains negative value\n+  #412 = Utf8               Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n+  #413 = Utf8               Corrupted TAR archive. Sparse struct numbytes contains negative value\n+  #414 = NameAndType        #293:#294     // readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+  #415 = Utf8               Corrupted TAR archive. Negative value in sparse headers block\n+  #416 = Utf8               Corrupted TAR archive. Sparse header block offset contains negative value\n+  #417 = Utf8               Corrupted TAR archive. Sparse header block numbytes contains negative value\n+  #418 = NameAndType        #513:#514     // skip:(Ljava/io/InputStream;J)J\n+  #419 = Utf8               Unexpected EOF when reading parse information of 1.X PAX format\n+  #420 = Utf8               Corrupted TAR archive. Non-numeric value in sparse headers block\n+  #421 = Class              #515          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #422 = NameAndType        #516:#517     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #423 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils$1\n+  #424 = Utf8               java/lang/Object\n+  #425 = Utf8               java/util/List\n+  #426 = Utf8               java/nio/ByteBuffer\n+  #427 = Utf8               java/util/Map\n+  #428 = Utf8               java/lang/Long\n+  #429 = Utf8               java/io/InputStream\n+  #430 = Methodref          #518.#519     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #431 = Utf8               Length \\u0001 must be at least 2\n+  #432 = Utf8               makeConcatWithConstants\n+  #433 = Utf8               (I)Ljava/lang/String;\n+  #434 = Utf8               (Ljava/lang/String;)V\n+  #435 = Utf8               At offset \\u0001, \\u0001 byte binary number exceeds maximum signed long value\n+  #436 = Utf8               (II)Ljava/lang/String;\n+  #437 = Utf8               java/lang/Math\n+  #438 = Utf8               pow\n+  #439 = Utf8               (DD)D\n+  #440 = Utf8               java/lang/System\n+  #441 = Utf8               arraycopy\n+  #442 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #443 = Utf8               ([B)V\n+  #444 = Utf8               valueOf\n+  #445 = Utf8               (J)Ljava/math/BigInteger;\n+  #446 = Utf8               add\n+  #447 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #448 = Utf8               not\n+  #449 = Utf8               ()Ljava/math/BigInteger;\n+  #450 = Utf8               bitLength\n+  #451 = Utf8               ()I\n+  #452 = Utf8               longValue\n+  #453 = Utf8               ()J\n+  #454 = Utf8               ([BII)V\n+  #455 = Utf8               replace\n+  #456 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n+  #457 = Utf8               Invalid byte \\u0001 at offset \\u0001 in \\'\\u0001\\' len=\\u0001\n+  #458 = Utf8               (BILjava/lang/String;I)Ljava/lang/String;\n+  #459 = Utf8               (Ljava/lang/Throwable;)V\n+  #460 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #461 = Utf8               decode\n+  #462 = Utf8               ([B)Ljava/lang/String;\n+  #463 = Utf8               (JJ)V\n+  #464 = Utf8               getOffset\n+  #465 = Utf8               getNumbytes\n+  #466 = Utf8               (Ljava/lang/Object;)Z\n+  #467 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #468 = Utf8               java/util/Collections\n+  #469 = Utf8               unmodifiableList\n+  #470 = Utf8               (Ljava/util/List;)Ljava/util/List;\n+  #471 = Utf8               encode\n+  #472 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+  #473 = Utf8               substring\n+  #474 = Utf8               position\n+  #475 = Utf8               array\n+  #476 = Utf8               ()[B\n+  #477 = Utf8               arrayOffset\n+  #478 = Utf8               toOctalString\n+  #479 = Utf8               (J)Ljava/lang/String;\n+  #480 = Utf8               \\u0001=\\u0001 will not fit in octal number buffer of length \\u0001\n+  #481 = Utf8               (JLjava/lang/String;I)Ljava/lang/String;\n+  #482 = Utf8               abs\n+  #483 = Utf8               (J)J\n+  #484 = Utf8               Value \\u0001 is too large for \\u0001 byte field.\n+  #485 = Utf8               (JI)Ljava/lang/String;\n+  #486 = Utf8               toByteArray\n+  #487 = Utf8               (Ljava/util/Map;)V\n+  #488 = Utf8               toString\n+  #489 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #490 = Utf8               remove\n+  #491 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #492 = Utf8               Paxheader value size \\u0001 exceeds size of header record\n+  #493 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #494 = Utf8               readRange\n+  #495 = Utf8               (Ljava/io/InputStream;I)[B\n+  #496 = Utf8               Failed to read Paxheader. Expected \\u0001 bytes, read \\u0001\n+  #497 = Utf8               java/nio/charset/StandardCharsets\n+  #498 = Utf8               UTF_8\n+  #499 = Utf8               Ljava/nio/charset/Charset;\n+  #500 = Utf8               ([BIILjava/nio/charset/Charset;)V\n+  #501 = Utf8               put\n+  #502 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #503 = Utf8               equals\n+  #504 = Utf8               (Ljava/lang/String;)Ljava/lang/Long;\n+  #505 = Utf8               parseLong\n+  #506 = Utf8               (Ljava/lang/String;)J\n+  #507 = Utf8               write\n+  #508 = Utf8               (I)V\n+  #509 = Utf8               getMessage\n+  #510 = Utf8               ()Ljava/lang/String;\n+  #511 = Utf8               split\n+  #512 = Utf8               (Ljava/lang/String;)[Ljava/lang/String;\n+  #513 = Utf8               skip\n+  #514 = Utf8               (Ljava/io/InputStream;J)J\n+  #515 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #516 = Utf8               getZipEncoding\n+  #517 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #518 = Class              #520          // java/lang/invoke/StringConcatFactory\n+  #519 = NameAndType        #432:#523     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #520 = Utf8               java/lang/invoke/StringConcatFactory\n+  #521 = Class              #525          // java/lang/invoke/MethodHandles$Lookup\n+  #522 = Utf8               Lookup\n+  #523 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #524 = Class              #526          // java/lang/invoke/MethodHandles\n+  #525 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #526 = Utf8               java/lang/invoke/MethodHandles\n {\n   private static final int BYTE_MASK = 255;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 255\n \n   static final org.apache.commons.compress.archivers.zip.ZipEncoding DEFAULT_ENCODING;\n@@ -586,141 +566,133 @@\n          3: iload_2\n          4: iadd\n          5: istore        5\n          7: iload_1\n          8: istore        6\n         10: iload_2\n         11: iconst_2\n-        12: if_icmpge     47\n+        12: if_icmpge     29\n         15: new           #3                  // class java/lang/IllegalArgumentException\n         18: dup\n-        19: new           #4                  // class java/lang/StringBuilder\n-        22: dup\n-        23: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        26: ldc           #6                  // String Length\n-        28: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        31: iload_2\n-        32: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        35: ldc           #9                  // String  must be at least 2\n-        37: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        40: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        43: invokespecial #11                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-        46: athrow\n-        47: aload_0\n-        48: iload         6\n-        50: baload\n-        51: ifne          56\n-        54: lconst_0\n-        55: lreturn\n-        56: iload         6\n-        58: iload         5\n-        60: if_icmpge     81\n+        19: iload_2\n+        20: invokedynamic #4,  0              // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+        25: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        28: athrow\n+        29: aload_0\n+        30: iload         6\n+        32: baload\n+        33: ifne          38\n+        36: lconst_0\n+        37: lreturn\n+        38: iload         6\n+        40: iload         5\n+        42: if_icmpge     63\n+        45: aload_0\n+        46: iload         6\n+        48: baload\n+        49: bipush        32\n+        51: if_icmpeq     57\n+        54: goto          63\n+        57: iinc          6, 1\n+        60: goto          38\n         63: aload_0\n-        64: iload         6\n-        66: baload\n-        67: bipush        32\n-        69: if_icmpeq     75\n-        72: goto          81\n-        75: iinc          6, 1\n-        78: goto          56\n-        81: aload_0\n-        82: iload         5\n-        84: iconst_1\n-        85: isub\n-        86: baload\n-        87: istore        7\n-        89: iload         6\n-        91: iload         5\n-        93: if_icmpge     122\n-        96: iload         7\n-        98: ifeq          108\n-       101: iload         7\n-       103: bipush        32\n-       105: if_icmpne     122\n-       108: iinc          5, -1\n+        64: iload         5\n+        66: iconst_1\n+        67: isub\n+        68: baload\n+        69: istore        7\n+        71: iload         6\n+        73: iload         5\n+        75: if_icmpge     104\n+        78: iload         7\n+        80: ifeq          90\n+        83: iload         7\n+        85: bipush        32\n+        87: if_icmpne     104\n+        90: iinc          5, -1\n+        93: aload_0\n+        94: iload         5\n+        96: iconst_1\n+        97: isub\n+        98: baload\n+        99: istore        7\n+       101: goto          71\n+       104: iload         6\n+       106: iload         5\n+       108: if_icmpge     166\n        111: aload_0\n-       112: iload         5\n-       114: iconst_1\n-       115: isub\n-       116: baload\n-       117: istore        7\n-       119: goto          89\n-       122: iload         6\n-       124: iload         5\n-       126: if_icmpge     184\n-       129: aload_0\n-       130: iload         6\n-       132: baload\n-       133: istore        8\n-       135: iload         8\n-       137: bipush        48\n-       139: if_icmplt     149\n-       142: iload         8\n-       144: bipush        55\n-       146: if_icmple     167\n-       149: new           #3                  // class java/lang/IllegalArgumentException\n-       152: dup\n-       153: aload_0\n-       154: iload_1\n-       155: iload_2\n-       156: iload         6\n-       158: iload         8\n-       160: invokestatic  #12                 // Method exceptionMessage:([BIIIB)Ljava/lang/String;\n-       163: invokespecial #11                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-       166: athrow\n-       167: lload_3\n-       168: iconst_3\n-       169: lshl\n-       170: iload         8\n-       172: bipush        48\n-       174: isub\n-       175: i2l\n-       176: ladd\n-       177: lstore_3\n-       178: iinc          6, 1\n-       181: goto          122\n-       184: lload_3\n-       185: lreturn\n+       112: iload         6\n+       114: baload\n+       115: istore        8\n+       117: iload         8\n+       119: bipush        48\n+       121: if_icmplt     131\n+       124: iload         8\n+       126: bipush        55\n+       128: if_icmple     149\n+       131: new           #3                  // class java/lang/IllegalArgumentException\n+       134: dup\n+       135: aload_0\n+       136: iload_1\n+       137: iload_2\n+       138: iload         6\n+       140: iload         8\n+       142: invokestatic  #6                  // Method exceptionMessage:([BIIIB)Ljava/lang/String;\n+       145: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+       148: athrow\n+       149: lload_3\n+       150: iconst_3\n+       151: lshl\n+       152: iload         8\n+       154: bipush        48\n+       156: isub\n+       157: i2l\n+       158: ladd\n+       159: lstore_3\n+       160: iinc          6, 1\n+       163: goto          104\n+       166: lload_3\n+       167: lreturn\n       LineNumberTable:\n         line 118: 0\n         line 119: 2\n         line 120: 7\n         line 122: 10\n         line 123: 15\n-        line 126: 47\n-        line 127: 54\n-        line 131: 56\n-        line 132: 63\n-        line 133: 72\n-        line 135: 75\n-        line 142: 81\n-        line 143: 89\n-        line 144: 108\n-        line 145: 111\n-        line 148: 122\n-        line 149: 129\n-        line 151: 135\n-        line 152: 149\n-        line 153: 160\n-        line 155: 167\n-        line 148: 178\n-        line 159: 184\n-      LocalVariableTable:\n-        Start  Length  Slot  Name   Signature\n-          135      43     8 currentByte   B\n-            0     186     0 buffer   [B\n-            0     186     1 offset   I\n-            0     186     2 length   I\n-            2     184     3 result   J\n-            7     179     5   end   I\n-           10     176     6 start   I\n-           89      97     7 trailer   B\n+        line 126: 29\n+        line 127: 36\n+        line 131: 38\n+        line 132: 45\n+        line 133: 54\n+        line 135: 57\n+        line 142: 63\n+        line 143: 71\n+        line 144: 90\n+        line 145: 93\n+        line 148: 104\n+        line 149: 111\n+        line 151: 117\n+        line 152: 131\n+        line 153: 142\n+        line 155: 149\n+        line 148: 160\n+        line 159: 166\n+      LocalVariableTable:\n+        Start  Length  Slot  Name   Signature\n+          117      43     8 currentByte   B\n+            0     168     0 buffer   [B\n+            0     168     1 offset   I\n+            0     168     2 length   I\n+            2     166     3 result   J\n+            7     161     5   end   I\n+           10     158     6 start   I\n+           71      97     7 trailer   B\n       StackMapTable: number_of_entries = 10\n         frame_type = 254 /* append */\n-          offset_delta = 47\n+          offset_delta = 29\n           locals = [ long, int, int ]\n         frame_type = 8 /* same */\n         frame_type = 18 /* same */\n         frame_type = 5 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 7\n           locals = [ int ]\n@@ -743,15 +715,15 @@\n          2: baload\n          3: sipush        128\n          6: iand\n          7: ifne          17\n         10: aload_0\n         11: iload_1\n         12: iload_2\n-        13: invokestatic  #13                 // Method parseOctal:([BII)J\n+        13: invokestatic  #7                  // Method parseOctal:([BII)J\n         16: lreturn\n         17: aload_0\n         18: iload_1\n         19: baload\n         20: iconst_m1\n         21: if_icmpne     28\n         24: iconst_1\n@@ -761,21 +733,21 @@\n         30: iload_2\n         31: bipush        9\n         33: if_icmpge     44\n         36: aload_0\n         37: iload_1\n         38: iload_2\n         39: iload_3\n-        40: invokestatic  #14                 // Method parseBinaryLong:([BIIZ)J\n+        40: invokestatic  #8                  // Method parseBinaryLong:([BIIZ)J\n         43: lreturn\n         44: aload_0\n         45: iload_1\n         46: iload_2\n         47: iload_3\n-        48: invokestatic  #15                 // Method parseBinaryBigInteger:([BIIZ)J\n+        48: invokestatic  #9                  // Method parseBinaryBigInteger:([BIIZ)J\n         51: lreturn\n       LineNumberTable:\n         line 182: 0\n         line 183: 10\n         line 185: 17\n         line 186: 30\n         line 187: 36\n@@ -798,103 +770,92 @@\n   private static long parseBinaryLong(byte[], int, int, boolean);\n     descriptor: ([BIIZ)J\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=8, locals=7, args_size=4\n          0: iload_2\n          1: bipush        9\n-         3: if_icmplt     47\n+         3: if_icmplt     21\n          6: new           #3                  // class java/lang/IllegalArgumentException\n          9: dup\n-        10: new           #4                  // class java/lang/StringBuilder\n-        13: dup\n-        14: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        17: ldc           #16                 // String At offset\n-        19: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        22: iload_1\n-        23: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        26: ldc           #17                 // String ,\n-        28: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        31: iload_2\n-        32: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        35: ldc           #18                 // String  byte binary number exceeds maximum signed long value\n-        37: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        40: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        43: invokespecial #11                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-        46: athrow\n-        47: lconst_0\n-        48: lstore        4\n-        50: iconst_1\n-        51: istore        6\n-        53: iload         6\n-        55: iload_2\n-        56: if_icmpge     84\n-        59: lload         4\n-        61: bipush        8\n-        63: lshl\n-        64: aload_0\n-        65: iload_1\n-        66: iload         6\n-        68: iadd\n-        69: baload\n-        70: sipush        255\n-        73: iand\n-        74: i2l\n-        75: ladd\n-        76: lstore        4\n-        78: iinc          6, 1\n-        81: goto          53\n-        84: iload_3\n-        85: ifeq          116\n-        88: lload         4\n-        90: lconst_1\n-        91: lsub\n-        92: lstore        4\n+        10: iload_1\n+        11: iload_2\n+        12: invokedynamic #10,  0             // InvokeDynamic #1:makeConcatWithConstants:(II)Ljava/lang/String;\n+        17: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        20: athrow\n+        21: lconst_0\n+        22: lstore        4\n+        24: iconst_1\n+        25: istore        6\n+        27: iload         6\n+        29: iload_2\n+        30: if_icmpge     58\n+        33: lload         4\n+        35: bipush        8\n+        37: lshl\n+        38: aload_0\n+        39: iload_1\n+        40: iload         6\n+        42: iadd\n+        43: baload\n+        44: sipush        255\n+        47: iand\n+        48: i2l\n+        49: ladd\n+        50: lstore        4\n+        52: iinc          6, 1\n+        55: goto          27\n+        58: iload_3\n+        59: ifeq          90\n+        62: lload         4\n+        64: lconst_1\n+        65: lsub\n+        66: lstore        4\n+        68: lload         4\n+        70: ldc2_w        #11                 // double 2.0d\n+        73: iload_2\n+        74: iconst_1\n+        75: isub\n+        76: i2d\n+        77: ldc2_w        #13                 // double 8.0d\n+        80: dmul\n+        81: invokestatic  #15                 // Method java/lang/Math.pow:(DD)D\n+        84: d2l\n+        85: lconst_1\n+        86: lsub\n+        87: lxor\n+        88: lstore        4\n+        90: iload_3\n+        91: ifeq          100\n         94: lload         4\n-        96: ldc2_w        #19                 // double 2.0d\n-        99: iload_2\n-       100: iconst_1\n-       101: isub\n-       102: i2d\n-       103: ldc2_w        #21                 // double 8.0d\n-       106: dmul\n-       107: invokestatic  #23                 // Method java/lang/Math.pow:(DD)D\n-       110: d2l\n-       111: lconst_1\n-       112: lsub\n-       113: lxor\n-       114: lstore        4\n-       116: iload_3\n-       117: ifeq          126\n-       120: lload         4\n-       122: lneg\n-       123: goto          128\n-       126: lload         4\n-       128: lreturn\n+        96: lneg\n+        97: goto          102\n+       100: lload         4\n+       102: lreturn\n       LineNumberTable:\n         line 195: 0\n         line 196: 6\n-        line 201: 47\n-        line 202: 50\n-        line 203: 59\n-        line 202: 78\n-        line 205: 84\n-        line 207: 88\n-        line 208: 94\n-        line 210: 116\n-      LocalVariableTable:\n-        Start  Length  Slot  Name   Signature\n-           53      31     6     i   I\n-            0     129     0 buffer   [B\n-            0     129     1 offset   I\n-            0     129     2 length   I\n-            0     129     3 negative   Z\n-           50      79     4   val   J\n+        line 201: 21\n+        line 202: 24\n+        line 203: 33\n+        line 202: 52\n+        line 205: 58\n+        line 207: 62\n+        line 208: 68\n+        line 210: 90\n+      LocalVariableTable:\n+        Start  Length  Slot  Name   Signature\n+           27      31     6     i   I\n+            0     103     0 buffer   [B\n+            0     103     1 offset   I\n+            0     103     2 length   I\n+            0     103     3 negative   Z\n+           24      79     4   val   J\n       StackMapTable: number_of_entries = 6\n-        frame_type = 47 /* same */\n+        frame_type = 21 /* same */\n         frame_type = 253 /* append */\n           offset_delta = 5\n           locals = [ long, int ]\n         frame_type = 250 /* chop */\n           offset_delta = 30\n         frame_type = 31 /* same */\n         frame_type = 9 /* same */\n@@ -916,81 +877,70 @@\n          9: iconst_1\n         10: iadd\n         11: aload         4\n         13: iconst_0\n         14: iload_2\n         15: iconst_1\n         16: isub\n-        17: invokestatic  #24                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-        20: new           #25                 // class java/math/BigInteger\n+        17: invokestatic  #16                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        20: new           #17                 // class java/math/BigInteger\n         23: dup\n         24: aload         4\n-        26: invokespecial #26                 // Method java/math/BigInteger.\"<init>\":([B)V\n+        26: invokespecial #18                 // Method java/math/BigInteger.\"<init>\":([B)V\n         29: astore        5\n         31: iload_3\n         32: ifeq          51\n         35: aload         5\n-        37: ldc2_w        #27                 // long -1l\n-        40: invokestatic  #29                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-        43: invokevirtual #30                 // Method java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-        46: invokevirtual #31                 // Method java/math/BigInteger.not:()Ljava/math/BigInteger;\n+        37: ldc2_w        #19                 // long -1l\n+        40: invokestatic  #21                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+        43: invokevirtual #22                 // Method java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+        46: invokevirtual #23                 // Method java/math/BigInteger.not:()Ljava/math/BigInteger;\n         49: astore        5\n         51: aload         5\n-        53: invokevirtual #32                 // Method java/math/BigInteger.bitLength:()I\n+        53: invokevirtual #24                 // Method java/math/BigInteger.bitLength:()I\n         56: bipush        63\n-        58: if_icmple     102\n+        58: if_icmple     76\n         61: new           #3                  // class java/lang/IllegalArgumentException\n         64: dup\n-        65: new           #4                  // class java/lang/StringBuilder\n-        68: dup\n-        69: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        72: ldc           #16                 // String At offset\n-        74: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        77: iload_1\n-        78: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        81: ldc           #17                 // String ,\n-        83: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        86: iload_2\n-        87: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        90: ldc           #18                 // String  byte binary number exceeds maximum signed long value\n-        92: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        95: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        98: invokespecial #11                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-       101: athrow\n-       102: iload_3\n-       103: ifeq          115\n-       106: aload         5\n-       108: invokevirtual #33                 // Method java/math/BigInteger.longValue:()J\n-       111: lneg\n-       112: goto          120\n-       115: aload         5\n-       117: invokevirtual #33                 // Method java/math/BigInteger.longValue:()J\n-       120: lreturn\n+        65: iload_1\n+        66: iload_2\n+        67: invokedynamic #10,  0             // InvokeDynamic #1:makeConcatWithConstants:(II)Ljava/lang/String;\n+        72: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        75: athrow\n+        76: iload_3\n+        77: ifeq          89\n+        80: aload         5\n+        82: invokevirtual #25                 // Method java/math/BigInteger.longValue:()J\n+        85: lneg\n+        86: goto          94\n+        89: aload         5\n+        91: invokevirtual #25                 // Method java/math/BigInteger.longValue:()J\n+        94: lreturn\n       LineNumberTable:\n         line 217: 0\n         line 218: 7\n         line 219: 20\n         line 220: 31\n         line 222: 35\n         line 224: 51\n         line 225: 61\n-        line 230: 102\n+        line 230: 76\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0     121     0 buffer   [B\n-            0     121     1 offset   I\n-            0     121     2 length   I\n-            0     121     3 negative   Z\n-            7     114     4 remainder   [B\n-           31      90     5   val   Ljava/math/BigInteger;\n+            0      95     0 buffer   [B\n+            0      95     1 offset   I\n+            0      95     2 length   I\n+            0      95     3 negative   Z\n+            7      88     4 remainder   [B\n+           31      64     5   val   Ljava/math/BigInteger;\n       StackMapTable: number_of_entries = 4\n         frame_type = 253 /* append */\n           offset_delta = 51\n           locals = [ class \"[B\", class java/math/BigInteger ]\n-        frame_type = 50 /* same */\n+        frame_type = 24 /* same */\n         frame_type = 12 /* same */\n         frame_type = 68 /* same_locals_1_stack_item */\n           stack = [ long ]\n \n   public static boolean parseBoolean(byte[], int);\n     descriptor: ([BI)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n@@ -1017,85 +967,70 @@\n           stack = [ int ]\n \n   private static java.lang.String exceptionMessage(byte[], int, int, int, byte);\n     descriptor: ([BIIIB)Ljava/lang/String;\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=5, locals=6, args_size=5\n-         0: new           #34                 // class java/lang/String\n+         0: new           #26                 // class java/lang/String\n          3: dup\n          4: aload_0\n          5: iload_1\n          6: iload_2\n-         7: invokespecial #35                 // Method java/lang/String.\"<init>\":([BII)V\n+         7: invokespecial #27                 // Method java/lang/String.\"<init>\":([BII)V\n         10: astore        5\n         12: aload         5\n-        14: ldc           #36                 // String \\u0000\n-        16: ldc           #37                 // String {NUL}\n-        18: invokevirtual #38                 // Method java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n+        14: ldc           #28                 // String \\u0000\n+        16: ldc           #29                 // String {NUL}\n+        18: invokevirtual #30                 // Method java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;\n         21: astore        5\n-        23: new           #4                  // class java/lang/StringBuilder\n-        26: dup\n-        27: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        30: ldc           #39                 // String Invalid byte\n-        32: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        35: iload         4\n-        37: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        40: ldc           #40                 // String  at offset\n-        42: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        45: iload_3\n-        46: iload_1\n-        47: isub\n-        48: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        51: ldc           #41                 // String  in \\'\n-        53: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        56: aload         5\n-        58: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        61: ldc           #42                 // String \\' len=\n-        63: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        66: iload_2\n-        67: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        70: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        73: areturn\n+        23: iload         4\n+        25: iload_3\n+        26: iload_1\n+        27: isub\n+        28: aload         5\n+        30: iload_2\n+        31: invokedynamic #31,  0             // InvokeDynamic #2:makeConcatWithConstants:(BILjava/lang/String;I)Ljava/lang/String;\n+        36: areturn\n       LineNumberTable:\n         line 257: 0\n         line 259: 12\n         line 260: 23\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      74     0 buffer   [B\n-            0      74     1 offset   I\n-            0      74     2 length   I\n-            0      74     3 current   I\n-            0      74     4 currentByte   B\n-           12      62     5 string   Ljava/lang/String;\n+            0      37     0 buffer   [B\n+            0      37     1 offset   I\n+            0      37     2 length   I\n+            0      37     3 current   I\n+            0      37     4 currentByte   B\n+           12      25     5 string   Ljava/lang/String;\n \n   public static java.lang.String parseName(byte[], int, int);\n     descriptor: ([BII)Ljava/lang/String;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=5, args_size=3\n          0: aload_0\n          1: iload_1\n          2: iload_2\n-         3: getstatic     #43                 // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-         6: invokestatic  #44                 // Method parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+         3: getstatic     #32                 // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+         6: invokestatic  #33                 // Method parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n          9: areturn\n         10: astore_3\n         11: aload_0\n         12: iload_1\n         13: iload_2\n-        14: getstatic     #46                 // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-        17: invokestatic  #44                 // Method parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n+        14: getstatic     #35                 // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        17: invokestatic  #33                 // Method parseName:([BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)Ljava/lang/String;\n         20: areturn\n         21: astore        4\n-        23: new           #47                 // class java/lang/RuntimeException\n+        23: new           #36                 // class java/lang/RuntimeException\n         26: dup\n         27: aload         4\n-        29: invokespecial #48                 // Method java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n+        29: invokespecial #37                 // Method java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n         32: athrow\n       Exception table:\n          from    to  target type\n              0     9    10   Class java/io/IOException\n             11    20    21   Class java/io/IOException\n       LineNumberTable:\n         line 275: 0\n@@ -1143,20 +1078,20 @@\n         35: newarray       byte\n         37: astore        5\n         39: aload_0\n         40: iload_1\n         41: aload         5\n         43: iconst_0\n         44: iload         4\n-        46: invokestatic  #24                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        46: invokestatic  #16                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         49: aload_3\n         50: aload         5\n-        52: invokeinterface #49,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+        52: invokeinterface #38,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n         57: areturn\n-        58: ldc           #50                 // String\n+        58: ldc           #39                 // String\n         60: areturn\n       LineNumberTable:\n         line 304: 0\n         line 305: 3\n         line 306: 19\n         line 305: 22\n         line 308: 28\n@@ -1187,28 +1122,28 @@\n     descriptor: ([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=6, locals=6, args_size=2\n          0: aload_0\n          1: iload_1\n          2: bipush        12\n-         4: invokestatic  #51                 // Method parseOctalOrBinary:([BII)J\n+         4: invokestatic  #40                 // Method parseOctalOrBinary:([BII)J\n          7: lstore_2\n          8: aload_0\n          9: iload_1\n         10: bipush        12\n         12: iadd\n         13: bipush        12\n-        15: invokestatic  #51                 // Method parseOctalOrBinary:([BII)J\n+        15: invokestatic  #40                 // Method parseOctalOrBinary:([BII)J\n         18: lstore        4\n-        20: new           #52                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+        20: new           #41                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n         23: dup\n         24: lload_2\n         25: lload         4\n-        27: invokespecial #53                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+        27: invokespecial #42                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n         30: areturn\n       LineNumberTable:\n         line 324: 0\n         line 325: 8\n         line 327: 20\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -1218,67 +1153,67 @@\n            20      11     4 sparseNumbytes   J\n \n   static java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> readSparseStructs(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)Ljava/util/List;\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=4, locals=6, args_size=3\n-         0: new           #54                 // class java/util/ArrayList\n+         0: new           #43                 // class java/util/ArrayList\n          3: dup\n-         4: invokespecial #55                 // Method java/util/ArrayList.\"<init>\":()V\n+         4: invokespecial #44                 // Method java/util/ArrayList.\"<init>\":()V\n          7: astore_3\n          8: iconst_0\n          9: istore        4\n         11: iload         4\n         13: iload_2\n         14: if_icmpge     102\n         17: aload_0\n         18: iload_1\n         19: iload         4\n         21: bipush        24\n         23: imul\n         24: iadd\n-        25: invokestatic  #56                 // Method parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+        25: invokestatic  #45                 // Method parseSparse:([BI)Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n         28: astore        5\n         30: aload         5\n-        32: invokevirtual #57                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+        32: invokevirtual #46                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n         35: lconst_0\n         36: lcmp\n         37: ifge          50\n-        40: new           #45                 // class java/io/IOException\n+        40: new           #34                 // class java/io/IOException\n         43: dup\n-        44: ldc           #58                 // String Corrupted TAR archive, sparse entry with negative offset\n-        46: invokespecial #59                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        44: ldc           #47                 // String Corrupted TAR archive, sparse entry with negative offset\n+        46: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         49: athrow\n         50: aload         5\n-        52: invokevirtual #60                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n+        52: invokevirtual #49                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n         55: lconst_0\n         56: lcmp\n         57: ifge          70\n-        60: new           #45                 // class java/io/IOException\n+        60: new           #34                 // class java/io/IOException\n         63: dup\n-        64: ldc           #61                 // String Corrupted TAR archive, sparse entry with negative numbytes\n-        66: invokespecial #59                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        64: ldc           #50                 // String Corrupted TAR archive, sparse entry with negative numbytes\n+        66: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         69: athrow\n         70: aload_3\n         71: aload         5\n-        73: invokeinterface #62,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+        73: invokeinterface #51,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n         78: pop\n         79: goto          96\n         82: astore        5\n-        84: new           #45                 // class java/io/IOException\n+        84: new           #34                 // class java/io/IOException\n         87: dup\n-        88: ldc           #63                 // String Corrupted TAR archive, sparse entry is invalid\n+        88: ldc           #52                 // String Corrupted TAR archive, sparse entry is invalid\n         90: aload         5\n-        92: invokespecial #64                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+        92: invokespecial #53                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n         95: athrow\n         96: iinc          4, 1\n         99: goto          11\n        102: aload_3\n-       103: invokestatic  #65                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+       103: invokestatic  #54                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n        106: areturn\n       Exception table:\n          from    to  target type\n             17    79    82   Class java/lang/IllegalArgumentException\n       LineNumberTable:\n         line 335: 0\n         line 336: 8\n@@ -1319,41 +1254,41 @@\n           locals = [ class \"[B\", int, int, class java/util/List, int ]\n           stack = [ class java/lang/IllegalArgumentException ]\n         frame_type = 13 /* same */\n         frame_type = 250 /* chop */\n           offset_delta = 5\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #229                         // ([BII)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #208                         // ([BII)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n \n   public static int formatNameBytes(java.lang.String, byte[], int, int);\n     descriptor: (Ljava/lang/String;[BII)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=5, locals=6, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iload_3\n-         4: getstatic     #43                 // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-         7: invokestatic  #66                 // Method formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+         4: getstatic     #32                 // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+         7: invokestatic  #55                 // Method formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n         10: ireturn\n         11: astore        4\n         13: aload_0\n         14: aload_1\n         15: iload_2\n         16: iload_3\n-        17: getstatic     #46                 // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-        20: invokestatic  #66                 // Method formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n+        17: getstatic     #35                 // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        20: invokestatic  #55                 // Method formatNameBytes:(Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n         23: ireturn\n         24: astore        5\n-        26: new           #47                 // class java/lang/RuntimeException\n+        26: new           #36                 // class java/lang/RuntimeException\n         29: dup\n         30: aload         5\n-        32: invokespecial #48                 // Method java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n+        32: invokespecial #37                 // Method java/lang/RuntimeException.\"<init>\":(Ljava/lang/Throwable;)V\n         35: athrow\n       Exception table:\n          from    to  target type\n              0    10    11   Class java/io/IOException\n             13    23    24   Class java/io/IOException\n       LineNumberTable:\n         line 373: 0\n@@ -1379,49 +1314,49 @@\n \n   public static int formatNameBytes(java.lang.String, byte[], int, int, org.apache.commons.compress.archivers.zip.ZipEncoding) throws java.io.IOException;\n     descriptor: (Ljava/lang/String;[BIILorg/apache/commons/compress/archivers/zip/ZipEncoding;)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=5, locals=9, args_size=5\n          0: aload_0\n-         1: invokevirtual #67                 // Method java/lang/String.length:()I\n+         1: invokevirtual #56                 // Method java/lang/String.length:()I\n          4: istore        5\n          6: aload         4\n          8: aload_0\n-         9: invokeinterface #68,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+         9: invokeinterface #57,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n         14: astore        6\n         16: aload         6\n-        18: invokevirtual #69                 // Method java/nio/ByteBuffer.limit:()I\n+        18: invokevirtual #58                 // Method java/nio/ByteBuffer.limit:()I\n         21: iload_3\n         22: if_icmple     52\n         25: iload         5\n         27: ifle          52\n         30: aload         4\n         32: aload_0\n         33: iconst_0\n         34: iinc          5, -1\n         37: iload         5\n-        39: invokevirtual #70                 // Method java/lang/String.substring:(II)Ljava/lang/String;\n-        42: invokeinterface #68,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+        39: invokevirtual #59                 // Method java/lang/String.substring:(II)Ljava/lang/String;\n+        42: invokeinterface #57,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n         47: astore        6\n         49: goto          16\n         52: aload         6\n-        54: invokevirtual #69                 // Method java/nio/ByteBuffer.limit:()I\n+        54: invokevirtual #58                 // Method java/nio/ByteBuffer.limit:()I\n         57: aload         6\n-        59: invokevirtual #71                 // Method java/nio/ByteBuffer.position:()I\n+        59: invokevirtual #60                 // Method java/nio/ByteBuffer.position:()I\n         62: isub\n         63: istore        7\n         65: aload         6\n-        67: invokevirtual #72                 // Method java/nio/ByteBuffer.array:()[B\n+        67: invokevirtual #61                 // Method java/nio/ByteBuffer.array:()[B\n         70: aload         6\n-        72: invokevirtual #73                 // Method java/nio/ByteBuffer.arrayOffset:()I\n+        72: invokevirtual #62                 // Method java/nio/ByteBuffer.arrayOffset:()I\n         75: aload_1\n         76: iload_2\n         77: iload         7\n-        79: invokestatic  #24                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        79: invokestatic  #16                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         82: iload         7\n         84: istore        8\n         86: iload         8\n         88: iload_3\n         89: if_icmpge     105\n         92: aload_1\n         93: iload_2\n@@ -1485,30 +1420,30 @@\n         13: aload_2\n         14: iload_3\n         15: iload         5\n         17: iinc          5, -1\n         20: iadd\n         21: bipush        48\n         23: bastore\n-        24: goto          123\n+        24: goto          99\n         27: lload_0\n         28: lstore        6\n         30: iload         5\n         32: iflt          72\n         35: lload         6\n         37: lconst_0\n         38: lcmp\n         39: ifeq          72\n         42: aload_2\n         43: iload_3\n         44: iload         5\n         46: iadd\n         47: bipush        48\n         49: lload         6\n-        51: ldc2_w        #74                 // long 7l\n+        51: ldc2_w        #63                 // long 7l\n         54: land\n         55: l2i\n         56: i2b\n         57: iadd\n         58: i2b\n         59: bastore\n         60: lload         6\n@@ -1516,80 +1451,70 @@\n         63: lushr\n         64: lstore        6\n         66: iinc          5, -1\n         69: goto          30\n         72: lload         6\n         74: lconst_0\n         75: lcmp\n-        76: ifeq          123\n+        76: ifeq          99\n         79: new           #3                  // class java/lang/IllegalArgumentException\n         82: dup\n-        83: new           #4                  // class java/lang/StringBuilder\n-        86: dup\n-        87: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        90: lload_0\n-        91: invokevirtual #76                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-        94: ldc           #77                 // String =\n-        96: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        99: lload_0\n-       100: invokestatic  #78                 // Method java/lang/Long.toOctalString:(J)Ljava/lang/String;\n-       103: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       106: ldc           #79                 // String  will not fit in octal number buffer of length\n-       108: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       111: iload         4\n-       113: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       116: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       119: invokespecial #11                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-       122: athrow\n-       123: iload         5\n-       125: iflt          142\n-       128: aload_2\n-       129: iload_3\n-       130: iload         5\n-       132: iadd\n-       133: bipush        48\n-       135: bastore\n-       136: iinc          5, -1\n-       139: goto          123\n-       142: return\n+        83: lload_0\n+        84: lload_0\n+        85: invokestatic  #65                 // Method java/lang/Long.toOctalString:(J)Ljava/lang/String;\n+        88: iload         4\n+        90: invokedynamic #66,  0             // InvokeDynamic #3:makeConcatWithConstants:(JLjava/lang/String;I)Ljava/lang/String;\n+        95: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        98: athrow\n+        99: iload         5\n+       101: iflt          118\n+       104: aload_2\n+       105: iload_3\n+       106: iload         5\n+       108: iadd\n+       109: bipush        48\n+       111: bastore\n+       112: iinc          5, -1\n+       115: goto          99\n+       118: return\n       LineNumberTable:\n         line 434: 0\n         line 435: 4\n         line 436: 7\n         line 437: 13\n         line 439: 27\n         line 440: 30\n         line 442: 42\n         line 443: 60\n         line 440: 66\n         line 446: 72\n         line 447: 79\n-        line 448: 100\n-        line 452: 123\n-        line 453: 128\n-        line 452: 136\n-        line 455: 142\n+        line 448: 85\n+        line 452: 99\n+        line 453: 104\n+        line 452: 112\n+        line 455: 118\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           30      93     6   val   J\n-            0     143     0 value   J\n-            0     143     2 buffer   [B\n-            0     143     3 offset   I\n-            0     143     4 length   I\n-            4     139     5 remaining   I\n+           30      69     6   val   J\n+            0     119     0 value   J\n+            0     119     2 buffer   [B\n+            0     119     3 offset   I\n+            0     119     4 length   I\n+            4     115     5 remaining   I\n       StackMapTable: number_of_entries = 5\n         frame_type = 252 /* append */\n           offset_delta = 27\n           locals = [ int ]\n         frame_type = 252 /* append */\n           offset_delta = 2\n           locals = [ long ]\n         frame_type = 41 /* same */\n         frame_type = 250 /* chop */\n-          offset_delta = 50\n+          offset_delta = 26\n         frame_type = 18 /* same */\n \n   public static int formatOctalBytes(long, byte[], int, int);\n     descriptor: (J[BII)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=5, locals=6, args_size=4\n@@ -1597,15 +1522,15 @@\n          2: iconst_2\n          3: isub\n          4: istore        5\n          6: lload_0\n          7: aload_2\n          8: iload_3\n          9: iload         5\n-        11: invokestatic  #80                 // Method formatUnsignedOctalString:(J[BII)V\n+        11: invokestatic  #67                 // Method formatUnsignedOctalString:(J[BII)V\n         14: aload_2\n         15: iload_3\n         16: iload         5\n         18: iinc          5, 1\n         21: iadd\n         22: bipush        32\n         24: bastore\n@@ -1642,15 +1567,15 @@\n          2: iconst_1\n          3: isub\n          4: istore        5\n          6: lload_0\n          7: aload_2\n          8: iload_3\n          9: iload         5\n-        11: invokestatic  #80                 // Method formatUnsignedOctalString:(J[BII)V\n+        11: invokestatic  #67                 // Method formatUnsignedOctalString:(J[BII)V\n         14: aload_2\n         15: iload_3\n         16: iload         5\n         18: iadd\n         19: bipush        32\n         21: bastore\n         22: iload_3\n@@ -1674,17 +1599,17 @@\n     descriptor: (J[BII)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=6, locals=8, args_size=4\n          0: iload         4\n          2: bipush        8\n          4: if_icmpne     13\n-         7: ldc2_w        #81                 // long 2097151l\n+         7: ldc2_w        #68                 // long 2097151l\n         10: goto          16\n-        13: ldc2_w        #83                 // long 8589934591l\n+        13: ldc2_w        #70                 // long 8589934591l\n         16: lstore        5\n         18: lload_0\n         19: lconst_0\n         20: lcmp\n         21: ifge          28\n         24: iconst_1\n         25: goto          29\n@@ -1696,32 +1621,32 @@\n         37: lload         5\n         39: lcmp\n         40: ifgt          52\n         43: lload_0\n         44: aload_2\n         45: iload_3\n         46: iload         4\n-        48: invokestatic  #85                 // Method formatLongOctalBytes:(J[BII)I\n+        48: invokestatic  #72                 // Method formatLongOctalBytes:(J[BII)I\n         51: ireturn\n         52: iload         4\n         54: bipush        9\n         56: if_icmpge     72\n         59: lload_0\n         60: aload_2\n         61: iload_3\n         62: iload         4\n         64: iload         7\n-        66: invokestatic  #86                 // Method formatLongBinary:(J[BIIZ)V\n+        66: invokestatic  #73                 // Method formatLongBinary:(J[BIIZ)V\n         69: goto          82\n         72: lload_0\n         73: aload_2\n         74: iload_3\n         75: iload         4\n         77: iload         7\n-        79: invokestatic  #87                 // Method formatBigIntegerBinary:(J[BIIZ)V\n+        79: invokestatic  #74                 // Method formatBigIntegerBinary:(J[BIIZ)V\n         82: aload_2\n         83: iload_3\n         84: iload         7\n         86: ifeq          95\n         89: sipush        255\n         92: goto          98\n         95: sipush        128\n@@ -1784,219 +1709,197 @@\n          6: imul\n          7: istore        6\n          9: lconst_1\n         10: iload         6\n         12: lshl\n         13: lstore        7\n         15: lload_0\n-        16: invokestatic  #88                 // Method java/lang/Math.abs:(J)J\n+        16: invokestatic  #75                 // Method java/lang/Math.abs:(J)J\n         19: lstore        9\n         21: lload         9\n         23: lconst_0\n         24: lcmp\n         25: iflt          36\n         28: lload         9\n         30: lload         7\n         32: lcmp\n-        33: iflt          78\n+        33: iflt          52\n         36: new           #3                  // class java/lang/IllegalArgumentException\n         39: dup\n-        40: new           #4                  // class java/lang/StringBuilder\n-        43: dup\n-        44: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        47: ldc           #89                 // String Value\n-        49: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        52: lload_0\n-        53: invokevirtual #76                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-        56: ldc           #90                 // String  is too large for\n-        58: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        61: iload         4\n-        63: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        66: ldc           #91                 // String  byte field.\n-        68: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        71: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        74: invokespecial #11                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-        77: athrow\n-        78: iload         5\n-        80: ifeq          109\n-        83: lload         9\n-        85: lload         7\n-        87: lconst_1\n-        88: lsub\n-        89: lxor\n-        90: lstore        9\n-        92: lload         9\n-        94: lconst_1\n-        95: ladd\n-        96: lstore        9\n-        98: lload         9\n-       100: ldc2_w        #92                 // long 255l\n-       103: iload         6\n-       105: lshl\n-       106: lor\n-       107: lstore        9\n-       109: iload_3\n-       110: iload         4\n-       112: iadd\n-       113: iconst_1\n-       114: isub\n-       115: istore        11\n-       117: iload         11\n-       119: iload_3\n-       120: if_icmplt     144\n-       123: aload_2\n-       124: iload         11\n-       126: lload         9\n-       128: l2i\n-       129: i2b\n-       130: bastore\n-       131: lload         9\n-       133: bipush        8\n-       135: lshr\n-       136: lstore        9\n-       138: iinc          11, -1\n-       141: goto          117\n-       144: return\n+        40: lload_0\n+        41: iload         4\n+        43: invokedynamic #76,  0             // InvokeDynamic #4:makeConcatWithConstants:(JI)Ljava/lang/String;\n+        48: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        51: athrow\n+        52: iload         5\n+        54: ifeq          83\n+        57: lload         9\n+        59: lload         7\n+        61: lconst_1\n+        62: lsub\n+        63: lxor\n+        64: lstore        9\n+        66: lload         9\n+        68: lconst_1\n+        69: ladd\n+        70: lstore        9\n+        72: lload         9\n+        74: ldc2_w        #77                 // long 255l\n+        77: iload         6\n+        79: lshl\n+        80: lor\n+        81: lstore        9\n+        83: iload_3\n+        84: iload         4\n+        86: iadd\n+        87: iconst_1\n+        88: isub\n+        89: istore        11\n+        91: iload         11\n+        93: iload_3\n+        94: if_icmplt     118\n+        97: aload_2\n+        98: iload         11\n+       100: lload         9\n+       102: l2i\n+       103: i2b\n+       104: bastore\n+       105: lload         9\n+       107: bipush        8\n+       109: lshr\n+       110: lstore        9\n+       112: iinc          11, -1\n+       115: goto          91\n+       118: return\n       LineNumberTable:\n         line 547: 0\n         line 548: 9\n         line 549: 15\n         line 550: 21\n         line 551: 36\n-        line 554: 78\n-        line 555: 83\n-        line 556: 92\n-        line 557: 98\n-        line 559: 109\n-        line 560: 123\n-        line 561: 131\n-        line 559: 138\n-        line 563: 144\n-      LocalVariableTable:\n-        Start  Length  Slot  Name   Signature\n-          117      27    11     i   I\n-            0     145     0 value   J\n-            0     145     2   buf   [B\n-            0     145     3 offset   I\n-            0     145     4 length   I\n-            0     145     5 negative   Z\n-            9     136     6  bits   I\n-           15     130     7   max   J\n-           21     124     9   val   J\n+        line 554: 52\n+        line 555: 57\n+        line 556: 66\n+        line 557: 72\n+        line 559: 83\n+        line 560: 97\n+        line 561: 105\n+        line 559: 112\n+        line 563: 118\n+      LocalVariableTable:\n+        Start  Length  Slot  Name   Signature\n+           91      27    11     i   I\n+            0     119     0 value   J\n+            0     119     2   buf   [B\n+            0     119     3 offset   I\n+            0     119     4 length   I\n+            0     119     5 negative   Z\n+            9     110     6  bits   I\n+           15     104     7   max   J\n+           21      98     9   val   J\n       StackMapTable: number_of_entries = 5\n         frame_type = 254 /* append */\n           offset_delta = 36\n           locals = [ int, long, long ]\n-        frame_type = 41 /* same */\n+        frame_type = 15 /* same */\n         frame_type = 30 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 7\n           locals = [ int ]\n         frame_type = 250 /* chop */\n           offset_delta = 26\n \n   private static void formatBigIntegerBinary(long, byte[], int, int, boolean);\n     descriptor: (J[BIIZ)V\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=5, locals=12, args_size=5\n          0: lload_0\n-         1: invokestatic  #29                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+         1: invokestatic  #21                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n          4: astore        6\n          6: aload         6\n-         8: invokevirtual #94                 // Method java/math/BigInteger.toByteArray:()[B\n+         8: invokevirtual #79                 // Method java/math/BigInteger.toByteArray:()[B\n         11: astore        7\n         13: aload         7\n         15: arraylength\n         16: istore        8\n         18: iload         8\n         20: iload         4\n         22: iconst_1\n         23: isub\n-        24: if_icmple     69\n+        24: if_icmple     43\n         27: new           #3                  // class java/lang/IllegalArgumentException\n         30: dup\n-        31: new           #4                  // class java/lang/StringBuilder\n-        34: dup\n-        35: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        38: ldc           #89                 // String Value\n-        40: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        43: lload_0\n-        44: invokevirtual #76                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-        47: ldc           #90                 // String  is too large for\n-        49: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        52: iload         4\n-        54: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        57: ldc           #91                 // String  byte field.\n-        59: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        62: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        65: invokespecial #11                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-        68: athrow\n-        69: iload_3\n-        70: iload         4\n-        72: iadd\n-        73: iload         8\n-        75: isub\n-        76: istore        9\n-        78: aload         7\n-        80: iconst_0\n-        81: aload_2\n-        82: iload         9\n-        84: iload         8\n-        86: invokestatic  #24                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-        89: iload         5\n-        91: ifeq          100\n-        94: sipush        255\n-        97: goto          101\n-       100: iconst_0\n-       101: i2b\n-       102: istore        10\n-       104: iload_3\n-       105: iconst_1\n-       106: iadd\n-       107: istore        11\n-       109: iload         11\n-       111: iload         9\n-       113: if_icmpge     128\n-       116: aload_2\n-       117: iload         11\n-       119: iload         10\n-       121: bastore\n-       122: iinc          11, 1\n-       125: goto          109\n-       128: return\n+        31: lload_0\n+        32: iload         4\n+        34: invokedynamic #76,  0             // InvokeDynamic #4:makeConcatWithConstants:(JI)Ljava/lang/String;\n+        39: invokespecial #5                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        42: athrow\n+        43: iload_3\n+        44: iload         4\n+        46: iadd\n+        47: iload         8\n+        49: isub\n+        50: istore        9\n+        52: aload         7\n+        54: iconst_0\n+        55: aload_2\n+        56: iload         9\n+        58: iload         8\n+        60: invokestatic  #16                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        63: iload         5\n+        65: ifeq          74\n+        68: sipush        255\n+        71: goto          75\n+        74: iconst_0\n+        75: i2b\n+        76: istore        10\n+        78: iload_3\n+        79: iconst_1\n+        80: iadd\n+        81: istore        11\n+        83: iload         11\n+        85: iload         9\n+        87: if_icmpge     102\n+        90: aload_2\n+        91: iload         11\n+        93: iload         10\n+        95: bastore\n+        96: iinc          11, 1\n+        99: goto          83\n+       102: return\n       LineNumberTable:\n         line 569: 0\n         line 570: 6\n         line 571: 13\n         line 572: 18\n         line 573: 27\n-        line 576: 69\n-        line 577: 78\n-        line 578: 89\n-        line 579: 104\n-        line 580: 116\n-        line 579: 122\n-        line 582: 128\n-      LocalVariableTable:\n-        Start  Length  Slot  Name   Signature\n-          109      19    11     i   I\n-            0     129     0 value   J\n-            0     129     2   buf   [B\n-            0     129     3 offset   I\n-            0     129     4 length   I\n-            0     129     5 negative   Z\n-            6     123     6   val   Ljava/math/BigInteger;\n-           13     116     7     b   [B\n-           18     111     8   len   I\n-           78      51     9   off   I\n-          104      25    10  fill   B\n+        line 576: 43\n+        line 577: 52\n+        line 578: 63\n+        line 579: 78\n+        line 580: 90\n+        line 579: 96\n+        line 582: 102\n+      LocalVariableTable:\n+        Start  Length  Slot  Name   Signature\n+           83      19    11     i   I\n+            0     103     0 value   J\n+            0     103     2   buf   [B\n+            0     103     3 offset   I\n+            0     103     4 length   I\n+            0     103     5 negative   Z\n+            6      97     6   val   Ljava/math/BigInteger;\n+           13      90     7     b   [B\n+           18      85     8   len   I\n+           52      51     9   off   I\n+           78      25    10  fill   B\n       StackMapTable: number_of_entries = 5\n         frame_type = 254 /* append */\n-          offset_delta = 69\n+          offset_delta = 43\n           locals = [ class java/math/BigInteger, class \"[B\", int ]\n         frame_type = 252 /* append */\n           offset_delta = 30\n           locals = [ int ]\n         frame_type = 64 /* same_locals_1_stack_item */\n           stack = [ int ]\n         frame_type = 253 /* append */\n@@ -2014,15 +1917,15 @@\n          2: iconst_2\n          3: isub\n          4: istore        5\n          6: lload_0\n          7: aload_2\n          8: iload_3\n          9: iload         5\n-        11: invokestatic  #80                 // Method formatUnsignedOctalString:(J[BII)V\n+        11: invokestatic  #67                 // Method formatUnsignedOctalString:(J[BII)V\n         14: aload_2\n         15: iload_3\n         16: iload         5\n         18: iinc          5, 1\n         21: iadd\n         22: iconst_0\n         23: bastore\n@@ -2105,15 +2008,15 @@\n     descriptor: ([B)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=9, args_size=1\n          0: aload_0\n          1: sipush        148\n          4: bipush        8\n-         6: invokestatic  #13                 // Method parseOctal:([BII)J\n+         6: invokestatic  #7                  // Method parseOctal:([BII)J\n          9: lstore_1\n         10: lconst_0\n         11: lstore_3\n         12: lconst_0\n         13: lstore        5\n         15: iconst_0\n         16: istore        7\n@@ -2198,16 +2101,16 @@\n     descriptor: (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;)Ljava/util/Map;\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=5, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: aload_2\n-         3: ldc2_w        #27                 // long -1l\n-         6: invokestatic  #96                 // Method parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+         3: ldc2_w        #19                 // long -1l\n+         6: invokestatic  #81                 // Method parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n          9: areturn\n       LineNumberTable:\n         line 693: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0 inputStream   Ljava/io/InputStream;\n             0      10     1 sparseHeaders   Ljava/util/List;\n@@ -2215,304 +2118,287 @@\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      10     1 sparseHeaders   Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n             0      10     2 globalPaxHeaders   Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n     Exceptions:\n       throws java.io.IOException\n     Deprecated: true\n-    Signature: #275                         // (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+    Signature: #253                         // (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n     RuntimeVisibleAnnotations:\n-      0: #277()\n+      0: #255()\n         java.lang.Deprecated\n \n   protected static java.util.Map<java.lang.String, java.lang.String> parsePaxHeaders(java.io.InputStream, java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse>, java.util.Map<java.lang.String, java.lang.String>, long) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=7, locals=20, args_size=4\n-         0: new           #97                 // class java/util/HashMap\n+         0: new           #82                 // class java/util/HashMap\n          3: dup\n          4: aload_2\n-         5: invokespecial #98                 // Method java/util/HashMap.\"<init>\":(Ljava/util/Map;)V\n+         5: invokespecial #83                 // Method java/util/HashMap.\"<init>\":(Ljava/util/Map;)V\n          8: astore        5\n         10: aconst_null\n         11: astore        6\n         13: iconst_0\n         14: istore        7\n         16: iconst_0\n         17: istore        9\n         19: iconst_0\n         20: istore        10\n         22: aload_0\n-        23: invokevirtual #99                 // Method java/io/InputStream.read:()I\n+        23: invokevirtual #84                 // Method java/io/InputStream.read:()I\n         26: dup\n         27: istore        8\n         29: iconst_m1\n-        30: if_icmpeq     538\n+        30: if_icmpeq     499\n         33: iinc          10, 1\n         36: iinc          7, 1\n         39: iload         8\n         41: bipush        10\n         43: if_icmpne     49\n-        46: goto          538\n+        46: goto          499\n         49: iload         8\n         51: bipush        32\n-        53: if_icmpne     494\n-        56: new           #100                // class java/io/ByteArrayOutputStream\n+        53: if_icmpne     455\n+        56: new           #85                 // class java/io/ByteArrayOutputStream\n         59: dup\n-        60: invokespecial #101                // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n+        60: invokespecial #86                 // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n         63: astore        11\n         65: aload_0\n-        66: invokevirtual #99                 // Method java/io/InputStream.read:()I\n+        66: invokevirtual #84                 // Method java/io/InputStream.read:()I\n         69: dup\n         70: istore        8\n         72: iconst_m1\n-        73: if_icmpeq     538\n+        73: if_icmpeq     499\n         76: iinc          10, 1\n         79: iinc          7, 1\n         82: iload         7\n-        84: iflt          538\n+        84: iflt          499\n         87: lload_3\n         88: lconst_0\n         89: lcmp\n         90: iflt          104\n         93: iload         7\n         95: i2l\n         96: lload_3\n         97: lcmp\n         98: iflt          104\n-       101: goto          538\n+       101: goto          499\n        104: iload         8\n        106: bipush        61\n-       108: if_icmpne     483\n+       108: if_icmpne     444\n        111: aload         11\n-       113: ldc           #103                // String UTF-8\n-       115: invokevirtual #104                // Method java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;\n+       113: ldc           #88                 // String UTF-8\n+       115: invokevirtual #89                 // Method java/io/ByteArrayOutputStream.toString:(Ljava/lang/String;)Ljava/lang/String;\n        118: astore        12\n        120: iload         9\n        122: iload         10\n        124: isub\n        125: istore        13\n        127: iload         13\n        129: iconst_1\n        130: if_icmpgt     146\n        133: aload         5\n        135: aload         12\n-       137: invokeinterface #105,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n+       137: invokeinterface #90,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;\n        142: pop\n-       143: goto          538\n+       143: goto          499\n        146: lload_3\n        147: lconst_0\n        148: lcmp\n-       149: iflt          197\n+       149: iflt          179\n        152: iload         13\n        154: i2l\n        155: lload_3\n        156: iload         7\n        158: i2l\n        159: lsub\n        160: lcmp\n-       161: ifle          197\n-       164: new           #45                 // class java/io/IOException\n+       161: ifle          179\n+       164: new           #34                 // class java/io/IOException\n        167: dup\n-       168: new           #4                  // class java/lang/StringBuilder\n-       171: dup\n-       172: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-       175: ldc           #106                // String Paxheader value size\n-       177: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       168: iload         13\n+       170: invokedynamic #91,  0             // InvokeDynamic #5:makeConcatWithConstants:(I)Ljava/lang/String;\n+       175: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       178: athrow\n+       179: aload_0\n        180: iload         13\n-       182: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       185: ldc           #107                // String  exceeds size of header record\n-       187: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       190: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       193: invokespecial #59                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       196: athrow\n-       197: aload_0\n-       198: iload         13\n-       200: invokestatic  #108                // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n-       203: astore        14\n-       205: aload         14\n-       207: arraylength\n-       208: istore        15\n-       210: iload         15\n-       212: iload         13\n-       214: if_icmpeq     255\n-       217: new           #45                 // class java/io/IOException\n-       220: dup\n-       221: new           #4                  // class java/lang/StringBuilder\n-       224: dup\n-       225: invokespecial #5                  // Method java/lang/StringBuilder.\"<init>\":()V\n-       228: ldc           #109                // String Failed to read Paxheader. Expected\n-       230: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       233: iload         13\n-       235: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       238: ldc           #110                // String  bytes, read\n-       240: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       243: iload         15\n-       245: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       248: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       251: invokespecial #59                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       254: athrow\n-       255: iload         7\n-       257: iload         13\n-       259: iadd\n-       260: istore        7\n-       262: aload         14\n-       264: iload         13\n-       266: iconst_1\n-       267: isub\n-       268: baload\n-       269: bipush        10\n-       271: if_icmpeq     284\n-       274: new           #45                 // class java/io/IOException\n-       277: dup\n-       278: ldc           #111                // String Failed to read Paxheader.Value should end with a newline\n-       280: invokespecial #59                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       283: athrow\n-       284: new           #34                 // class java/lang/String\n-       287: dup\n-       288: aload         14\n-       290: iconst_0\n-       291: iload         13\n-       293: iconst_1\n-       294: isub\n-       295: getstatic     #112                // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;\n-       298: invokespecial #113                // Method java/lang/String.\"<init>\":([BIILjava/nio/charset/Charset;)V\n-       301: astore        16\n-       303: aload         5\n-       305: aload         12\n-       307: aload         16\n-       309: invokeinterface #114,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-       314: pop\n-       315: aload         12\n-       317: ldc           #115                // String GNU.sparse.offset\n-       319: invokevirtual #116                // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n-       322: ifeq          392\n-       325: aload         6\n-       327: ifnull        350\n-       330: aload_1\n-       331: new           #52                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-       334: dup\n-       335: aload         6\n-       337: invokevirtual #117                // Method java/lang/Long.longValue:()J\n-       340: lconst_0\n-       341: invokespecial #53                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-       344: invokeinterface #62,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-       349: pop\n-       350: aload         16\n-       352: invokestatic  #118                // Method java/lang/Long.valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n-       355: astore        6\n-       357: goto          372\n-       360: astore        17\n-       362: new           #45                 // class java/io/IOException\n-       365: dup\n-       366: ldc           #120                // String Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n-       368: invokespecial #59                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       371: athrow\n-       372: aload         6\n-       374: invokevirtual #117                // Method java/lang/Long.longValue:()J\n-       377: lconst_0\n-       378: lcmp\n-       379: ifge          392\n-       382: new           #45                 // class java/io/IOException\n-       385: dup\n-       386: ldc           #121                // String Failed to read Paxheader.GNU.sparse.offset contains negative value\n-       388: invokespecial #59                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       391: athrow\n-       392: aload         12\n-       394: ldc           #122                // String GNU.sparse.numbytes\n-       396: invokevirtual #116                // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n-       399: ifeq          480\n-       402: aload         6\n-       404: ifnonnull     417\n-       407: new           #45                 // class java/io/IOException\n+       182: invokestatic  #92                 // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n+       185: astore        14\n+       187: aload         14\n+       189: arraylength\n+       190: istore        15\n+       192: iload         15\n+       194: iload         13\n+       196: if_icmpeq     216\n+       199: new           #34                 // class java/io/IOException\n+       202: dup\n+       203: iload         13\n+       205: iload         15\n+       207: invokedynamic #93,  0             // InvokeDynamic #6:makeConcatWithConstants:(II)Ljava/lang/String;\n+       212: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       215: athrow\n+       216: iload         7\n+       218: iload         13\n+       220: iadd\n+       221: istore        7\n+       223: aload         14\n+       225: iload         13\n+       227: iconst_1\n+       228: isub\n+       229: baload\n+       230: bipush        10\n+       232: if_icmpeq     245\n+       235: new           #34                 // class java/io/IOException\n+       238: dup\n+       239: ldc           #94                 // String Failed to read Paxheader.Value should end with a newline\n+       241: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       244: athrow\n+       245: new           #26                 // class java/lang/String\n+       248: dup\n+       249: aload         14\n+       251: iconst_0\n+       252: iload         13\n+       254: iconst_1\n+       255: isub\n+       256: getstatic     #95                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;\n+       259: invokespecial #96                 // Method java/lang/String.\"<init>\":([BIILjava/nio/charset/Charset;)V\n+       262: astore        16\n+       264: aload         5\n+       266: aload         12\n+       268: aload         16\n+       270: invokeinterface #97,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+       275: pop\n+       276: aload         12\n+       278: ldc           #98                 // String GNU.sparse.offset\n+       280: invokevirtual #99                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n+       283: ifeq          353\n+       286: aload         6\n+       288: ifnull        311\n+       291: aload_1\n+       292: new           #41                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+       295: dup\n+       296: aload         6\n+       298: invokevirtual #100                // Method java/lang/Long.longValue:()J\n+       301: lconst_0\n+       302: invokespecial #42                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+       305: invokeinterface #51,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       310: pop\n+       311: aload         16\n+       313: invokestatic  #101                // Method java/lang/Long.valueOf:(Ljava/lang/String;)Ljava/lang/Long;\n+       316: astore        6\n+       318: goto          333\n+       321: astore        17\n+       323: new           #34                 // class java/io/IOException\n+       326: dup\n+       327: ldc           #103                // String Failed to read Paxheader.GNU.sparse.offset contains a non-numeric value\n+       329: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       332: athrow\n+       333: aload         6\n+       335: invokevirtual #100                // Method java/lang/Long.longValue:()J\n+       338: lconst_0\n+       339: lcmp\n+       340: ifge          353\n+       343: new           #34                 // class java/io/IOException\n+       346: dup\n+       347: ldc           #104                // String Failed to read Paxheader.GNU.sparse.offset contains negative value\n+       349: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       352: athrow\n+       353: aload         12\n+       355: ldc           #105                // String GNU.sparse.numbytes\n+       357: invokevirtual #99                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z\n+       360: ifeq          441\n+       363: aload         6\n+       365: ifnonnull     378\n+       368: new           #34                 // class java/io/IOException\n+       371: dup\n+       372: ldc           #106                // String Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n+       374: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       377: athrow\n+       378: aload         16\n+       380: invokestatic  #107                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n+       383: lstore        17\n+       385: goto          400\n+       388: astore        19\n+       390: new           #34                 // class java/io/IOException\n+       393: dup\n+       394: ldc           #108                // String Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n+       396: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       399: athrow\n+       400: lload         17\n+       402: lconst_0\n+       403: lcmp\n+       404: ifge          417\n+       407: new           #34                 // class java/io/IOException\n        410: dup\n-       411: ldc           #123                // String Failed to read Paxheader.GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.\n-       413: invokespecial #59                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       411: ldc           #109                // String Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n+       413: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        416: athrow\n-       417: aload         16\n-       419: invokestatic  #124                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n-       422: lstore        17\n-       424: goto          439\n-       427: astore        19\n-       429: new           #45                 // class java/io/IOException\n-       432: dup\n-       433: ldc           #125                // String Failed to read Paxheader.GNU.sparse.numbytes contains a non-numeric value.\n-       435: invokespecial #59                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       438: athrow\n-       439: lload         17\n-       441: lconst_0\n-       442: lcmp\n-       443: ifge          456\n-       446: new           #45                 // class java/io/IOException\n-       449: dup\n-       450: ldc           #126                // String Failed to read Paxheader.GNU.sparse.numbytes contains negative value\n-       452: invokespecial #59                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       455: athrow\n-       456: aload_1\n-       457: new           #52                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-       460: dup\n-       461: aload         6\n-       463: invokevirtual #117                // Method java/lang/Long.longValue:()J\n-       466: lload         17\n-       468: invokespecial #53                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-       471: invokeinterface #62,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-       476: pop\n-       477: aconst_null\n-       478: astore        6\n-       480: goto          538\n-       483: aload         11\n-       485: iload         8\n-       487: i2b\n-       488: invokevirtual #127                // Method java/io/ByteArrayOutputStream.write:(I)V\n-       491: goto          65\n-       494: iload         8\n-       496: bipush        48\n-       498: if_icmplt     508\n-       501: iload         8\n-       503: bipush        57\n-       505: if_icmple     518\n-       508: new           #45                 // class java/io/IOException\n-       511: dup\n-       512: ldc           #128                // String Failed to read Paxheader. Encountered a non-number while reading length\n-       514: invokespecial #59                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       517: athrow\n-       518: iload         9\n-       520: bipush        10\n-       522: imul\n-       523: istore        9\n-       525: iload         9\n-       527: iload         8\n-       529: bipush        48\n-       531: isub\n-       532: iadd\n-       533: istore        9\n-       535: goto          22\n-       538: iload         8\n-       540: iconst_m1\n-       541: if_icmpne     547\n-       544: goto          550\n-       547: goto          16\n-       550: aload         6\n-       552: ifnull        575\n-       555: aload_1\n-       556: new           #52                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-       559: dup\n-       560: aload         6\n-       562: invokevirtual #117                // Method java/lang/Long.longValue:()J\n-       565: lconst_0\n-       566: invokespecial #53                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-       569: invokeinterface #62,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n-       574: pop\n-       575: aload         5\n-       577: areturn\n+       417: aload_1\n+       418: new           #41                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+       421: dup\n+       422: aload         6\n+       424: invokevirtual #100                // Method java/lang/Long.longValue:()J\n+       427: lload         17\n+       429: invokespecial #42                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+       432: invokeinterface #51,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       437: pop\n+       438: aconst_null\n+       439: astore        6\n+       441: goto          499\n+       444: aload         11\n+       446: iload         8\n+       448: i2b\n+       449: invokevirtual #110                // Method java/io/ByteArrayOutputStream.write:(I)V\n+       452: goto          65\n+       455: iload         8\n+       457: bipush        48\n+       459: if_icmplt     469\n+       462: iload         8\n+       464: bipush        57\n+       466: if_icmple     479\n+       469: new           #34                 // class java/io/IOException\n+       472: dup\n+       473: ldc           #111                // String Failed to read Paxheader. Encountered a non-number while reading length\n+       475: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       478: athrow\n+       479: iload         9\n+       481: bipush        10\n+       483: imul\n+       484: istore        9\n+       486: iload         9\n+       488: iload         8\n+       490: bipush        48\n+       492: isub\n+       493: iadd\n+       494: istore        9\n+       496: goto          22\n+       499: iload         8\n+       501: iconst_m1\n+       502: if_icmpne     508\n+       505: goto          511\n+       508: goto          16\n+       511: aload         6\n+       513: ifnull        536\n+       516: aload_1\n+       517: new           #41                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+       520: dup\n+       521: aload         6\n+       523: invokevirtual #100                // Method java/lang/Long.longValue:()J\n+       526: lconst_0\n+       527: invokespecial #42                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+       530: invokeinterface #51,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       535: pop\n+       536: aload         5\n+       538: areturn\n       Exception table:\n          from    to  target type\n-           350   357   360   Class java/lang/NumberFormatException\n-           417   424   427   Class java/lang/NumberFormatException\n+           311   318   321   Class java/lang/NumberFormatException\n+           378   385   388   Class java/lang/NumberFormatException\n       LineNumberTable:\n         line 724: 0\n         line 725: 10\n         line 727: 13\n         line 730: 16\n         line 731: 19\n         line 732: 22\n@@ -2530,82 +2416,82 @@\n         line 747: 104\n         line 748: 111\n         line 750: 120\n         line 751: 127\n         line 752: 133\n         line 753: 146\n         line 754: 164\n-        line 757: 197\n-        line 758: 205\n-        line 759: 210\n-        line 760: 217\n-        line 766: 255\n-        line 768: 262\n-        line 769: 274\n-        line 772: 284\n-        line 774: 303\n-        line 777: 315\n-        line 778: 325\n-        line 780: 330\n-        line 783: 350\n-        line 787: 357\n-        line 784: 360\n-        line 785: 362\n-        line 788: 372\n-        line 789: 382\n-        line 795: 392\n-        line 796: 402\n-        line 797: 407\n-        line 802: 417\n-        line 806: 424\n-        line 803: 427\n-        line 804: 429\n-        line 807: 439\n-        line 808: 446\n-        line 811: 456\n-        line 812: 477\n-        line 815: 480\n-        line 817: 483\n-        line 823: 494\n-        line 824: 508\n-        line 827: 518\n-        line 828: 525\n-        line 830: 538\n-        line 831: 544\n-        line 833: 547\n-        line 834: 550\n-        line 836: 555\n-        line 838: 575\n-      LocalVariableTable:\n-        Start  Length  Slot  Name   Signature\n-          362      10    17    ex   Ljava/lang/NumberFormatException;\n-          424       3    17 numbytes   J\n-          429      10    19    ex   Ljava/lang/NumberFormatException;\n-          439      41    17 numbytes   J\n-          205     275    14  rest   [B\n-          210     270    15   got   I\n-          303     177    16 value   Ljava/lang/String;\n-          120     363    12 keyword   Ljava/lang/String;\n-          127     356    13 restLen   I\n-           65     429    11  coll   Ljava/io/ByteArrayOutputStream;\n-           29     518     8    ch   I\n-           19     528     9   len   I\n-           22     525    10  read   I\n-            0     578     0 inputStream   Ljava/io/InputStream;\n-            0     578     1 sparseHeaders   Ljava/util/List;\n-            0     578     2 globalPaxHeaders   Ljava/util/Map;\n-            0     578     3 headerSize   J\n-           10     568     5 headers   Ljava/util/Map;\n-           13     565     6 offset   Ljava/lang/Long;\n-           16     562     7 totalRead   I\n+        line 757: 179\n+        line 758: 187\n+        line 759: 192\n+        line 760: 199\n+        line 766: 216\n+        line 768: 223\n+        line 769: 235\n+        line 772: 245\n+        line 774: 264\n+        line 777: 276\n+        line 778: 286\n+        line 780: 291\n+        line 783: 311\n+        line 787: 318\n+        line 784: 321\n+        line 785: 323\n+        line 788: 333\n+        line 789: 343\n+        line 795: 353\n+        line 796: 363\n+        line 797: 368\n+        line 802: 378\n+        line 806: 385\n+        line 803: 388\n+        line 804: 390\n+        line 807: 400\n+        line 808: 407\n+        line 811: 417\n+        line 812: 438\n+        line 815: 441\n+        line 817: 444\n+        line 823: 455\n+        line 824: 469\n+        line 827: 479\n+        line 828: 486\n+        line 830: 499\n+        line 831: 505\n+        line 833: 508\n+        line 834: 511\n+        line 836: 516\n+        line 838: 536\n+      LocalVariableTable:\n+        Start  Length  Slot  Name   Signature\n+          323      10    17    ex   Ljava/lang/NumberFormatException;\n+          385       3    17 numbytes   J\n+          390      10    19    ex   Ljava/lang/NumberFormatException;\n+          400      41    17 numbytes   J\n+          187     254    14  rest   [B\n+          192     249    15   got   I\n+          264     177    16 value   Ljava/lang/String;\n+          120     324    12 keyword   Ljava/lang/String;\n+          127     317    13 restLen   I\n+           65     390    11  coll   Ljava/io/ByteArrayOutputStream;\n+           29     479     8    ch   I\n+           19     489     9   len   I\n+           22     486    10  read   I\n+            0     539     0 inputStream   Ljava/io/InputStream;\n+            0     539     1 sparseHeaders   Ljava/util/List;\n+            0     539     2 globalPaxHeaders   Ljava/util/Map;\n+            0     539     3 headerSize   J\n+           10     529     5 headers   Ljava/util/Map;\n+           13     526     6 offset   Ljava/lang/Long;\n+           16     523     7 totalRead   I\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n-            0     578     1 sparseHeaders   Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-            0     578     2 globalPaxHeaders   Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n-           10     568     5 headers   Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+            0     539     1 sparseHeaders   Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+            0     539     2 globalPaxHeaders   Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+           10     529     5 headers   Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n       StackMapTable: number_of_entries = 26\n         frame_type = 254 /* append */\n           offset_delta = 16\n           locals = [ class java/util/Map, class java/lang/Long, int ]\n         frame_type = 254 /* append */\n           offset_delta = 5\n           locals = [ top, int, int ]\n@@ -2616,17 +2502,17 @@\n         frame_type = 252 /* append */\n           offset_delta = 15\n           locals = [ class java/io/ByteArrayOutputStream ]\n         frame_type = 38 /* same */\n         frame_type = 253 /* append */\n           offset_delta = 41\n           locals = [ class java/lang/String, int ]\n-        frame_type = 50 /* same */\n+        frame_type = 32 /* same */\n         frame_type = 253 /* append */\n-          offset_delta = 57\n+          offset_delta = 36\n           locals = [ class \"[B\", int ]\n         frame_type = 28 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 65\n           locals = [ class java/lang/String ]\n         frame_type = 73 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NumberFormatException ]\n@@ -2652,31 +2538,31 @@\n         frame_type = 19 /* same */\n         frame_type = 248 /* chop */\n           offset_delta = 8\n         frame_type = 2 /* same */\n         frame_type = 24 /* same */\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #298                         // (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;J)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+    Signature: #274                         // (Ljava/io/InputStream;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;J)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n \n   protected static java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> parsePAX01SparseHeaders(java.lang.String);\n     descriptor: (Ljava/lang/String;)Ljava/util/List;\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=4, locals=2, args_size=1\n          0: aload_0\n-         1: invokestatic  #129                // Method parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n+         1: invokestatic  #112                // Method parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n          4: areturn\n          5: astore_1\n-         6: new           #47                 // class java/lang/RuntimeException\n+         6: new           #36                 // class java/lang/RuntimeException\n          9: dup\n         10: aload_1\n-        11: invokevirtual #130                // Method java/io/IOException.getMessage:()Ljava/lang/String;\n+        11: invokevirtual #113                // Method java/io/IOException.getMessage:()Ljava/lang/String;\n         14: aload_1\n-        15: invokespecial #131                // Method java/lang/RuntimeException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+        15: invokespecial #114                // Method java/lang/RuntimeException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n         18: athrow\n       Exception table:\n          from    to  target type\n              0     4     5   Class java/io/IOException\n       LineNumberTable:\n         line 855: 0\n         line 856: 5\n@@ -2685,102 +2571,102 @@\n         Start  Length  Slot  Name   Signature\n             6      13     1    ex   Ljava/io/IOException;\n             0      19     0 sparseMap   Ljava/lang/String;\n       StackMapTable: number_of_entries = 1\n         frame_type = 69 /* same_locals_1_stack_item */\n           stack = [ class java/io/IOException ]\n     Deprecated: true\n-    Signature: #302                         // (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #278                         // (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n \n   protected static java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> parseFromPAX01SparseHeaders(java.lang.String) throws java.io.IOException;\n     descriptor: (Ljava/lang/String;)Ljava/util/List;\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=7, locals=9, args_size=1\n-         0: new           #54                 // class java/util/ArrayList\n+         0: new           #43                 // class java/util/ArrayList\n          3: dup\n-         4: invokespecial #55                 // Method java/util/ArrayList.\"<init>\":()V\n+         4: invokespecial #44                 // Method java/util/ArrayList.\"<init>\":()V\n          7: astore_1\n          8: aload_0\n-         9: ldc           #132                // String ,\n-        11: invokevirtual #133                // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n+         9: ldc           #115                // String ,\n+        11: invokevirtual #116                // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;\n         14: astore_2\n         15: aload_2\n         16: arraylength\n         17: iconst_2\n         18: irem\n         19: iconst_1\n         20: if_icmpne     33\n-        23: new           #45                 // class java/io/IOException\n+        23: new           #34                 // class java/io/IOException\n         26: dup\n-        27: ldc           #134                // String Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n-        29: invokespecial #59                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        27: ldc           #117                // String Corrupted TAR archive. Bad format in GNU.sparse.map PAX Header\n+        29: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         32: athrow\n         33: iconst_0\n         34: istore_3\n         35: iload_3\n         36: aload_2\n         37: arraylength\n         38: if_icmpge     147\n         41: aload_2\n         42: iload_3\n         43: aaload\n-        44: invokestatic  #124                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n+        44: invokestatic  #107                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n         47: lstore        4\n         49: goto          64\n         52: astore        6\n-        54: new           #45                 // class java/io/IOException\n+        54: new           #34                 // class java/io/IOException\n         57: dup\n-        58: ldc           #135                // String Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n-        60: invokespecial #59                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        58: ldc           #118                // String Corrupted TAR archive. Sparse struct offset contains a non-numeric value\n+        60: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         63: athrow\n         64: lload         4\n         66: lconst_0\n         67: lcmp\n         68: ifge          81\n-        71: new           #45                 // class java/io/IOException\n+        71: new           #34                 // class java/io/IOException\n         74: dup\n-        75: ldc           #136                // String Corrupted TAR archive. Sparse struct offset contains negative value\n-        77: invokespecial #59                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        75: ldc           #119                // String Corrupted TAR archive. Sparse struct offset contains negative value\n+        77: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         80: athrow\n         81: aload_2\n         82: iload_3\n         83: iconst_1\n         84: iadd\n         85: aaload\n-        86: invokestatic  #124                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n+        86: invokestatic  #107                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J\n         89: lstore        6\n         91: goto          106\n         94: astore        8\n-        96: new           #45                 // class java/io/IOException\n+        96: new           #34                 // class java/io/IOException\n         99: dup\n-       100: ldc           #137                // String Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n-       102: invokespecial #59                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       100: ldc           #120                // String Corrupted TAR archive. Sparse struct numbytes contains a non-numeric value\n+       102: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        105: athrow\n        106: lload         6\n        108: lconst_0\n        109: lcmp\n        110: ifge          123\n-       113: new           #45                 // class java/io/IOException\n+       113: new           #34                 // class java/io/IOException\n        116: dup\n-       117: ldc           #138                // String Corrupted TAR archive. Sparse struct numbytes contains negative value\n-       119: invokespecial #59                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       117: ldc           #121                // String Corrupted TAR archive. Sparse struct numbytes contains negative value\n+       119: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        122: athrow\n        123: aload_1\n-       124: new           #52                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+       124: new           #41                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n        127: dup\n        128: lload         4\n        130: lload         6\n-       132: invokespecial #53                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-       135: invokeinterface #62,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       132: invokespecial #42                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+       135: invokeinterface #51,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n        140: pop\n        141: iinc          3, 2\n        144: goto          35\n        147: aload_1\n-       148: invokestatic  #65                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n+       148: invokestatic  #54                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;\n        151: areturn\n       Exception table:\n          from    to  target type\n             41    49    52   Class java/lang/NumberFormatException\n             81    91    94   Class java/lang/NumberFormatException\n       LineNumberTable:\n         line 873: 0\n@@ -2837,42 +2723,42 @@\n           offset_delta = 11\n           locals = [ long ]\n         frame_type = 16 /* same */\n         frame_type = 248 /* chop */\n           offset_delta = 23\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #302                         // (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #278                         // (Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n \n   protected static java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> parsePAX1XSparseHeaders(java.io.InputStream, int) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;I)Ljava/util/List;\n     flags: (0x000c) ACC_PROTECTED, ACC_STATIC\n     Code:\n       stack=7, locals=12, args_size=2\n-         0: new           #54                 // class java/util/ArrayList\n+         0: new           #43                 // class java/util/ArrayList\n          3: dup\n-         4: invokespecial #55                 // Method java/util/ArrayList.\"<init>\":()V\n+         4: invokespecial #44                 // Method java/util/ArrayList.\"<init>\":()V\n          7: astore_2\n          8: lconst_0\n          9: lstore_3\n         10: aload_0\n-        11: invokestatic  #139                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+        11: invokestatic  #122                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n         14: astore        5\n         16: aload         5\n         18: iconst_0\n         19: laload\n         20: lstore        6\n         22: lload         6\n         24: lconst_0\n         25: lcmp\n         26: ifge          39\n-        29: new           #45                 // class java/io/IOException\n+        29: new           #34                 // class java/io/IOException\n         32: dup\n-        33: ldc           #140                // String Corrupted TAR archive. Negative value in sparse headers block\n-        35: invokespecial #59                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        33: ldc           #123                // String Corrupted TAR archive. Negative value in sparse headers block\n+        35: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         38: athrow\n         39: lload_3\n         40: aload         5\n         42: iconst_1\n         43: laload\n         44: ladd\n         45: lstore_3\n@@ -2881,77 +2767,77 @@\n         49: lconst_1\n         50: lsub\n         51: lstore        6\n         53: lconst_0\n         54: lcmp\n         55: ifle          151\n         58: aload_0\n-        59: invokestatic  #139                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+        59: invokestatic  #122                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n         62: astore        5\n         64: aload         5\n         66: iconst_0\n         67: laload\n         68: lstore        8\n         70: lload         8\n         72: lconst_0\n         73: lcmp\n         74: ifge          87\n-        77: new           #45                 // class java/io/IOException\n+        77: new           #34                 // class java/io/IOException\n         80: dup\n-        81: ldc           #141                // String Corrupted TAR archive. Sparse header block offset contains negative value\n-        83: invokespecial #59                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        81: ldc           #124                // String Corrupted TAR archive. Sparse header block offset contains negative value\n+        83: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         86: athrow\n         87: lload_3\n         88: aload         5\n         90: iconst_1\n         91: laload\n         92: ladd\n         93: lstore_3\n         94: aload_0\n-        95: invokestatic  #139                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n+        95: invokestatic  #122                // Method readLineOfNumberForPax1X:(Ljava/io/InputStream;)[J\n         98: astore        5\n        100: aload         5\n        102: iconst_0\n        103: laload\n        104: lstore        10\n        106: lload         10\n        108: lconst_0\n        109: lcmp\n        110: ifge          123\n-       113: new           #45                 // class java/io/IOException\n+       113: new           #34                 // class java/io/IOException\n        116: dup\n-       117: ldc           #142                // String Corrupted TAR archive. Sparse header block numbytes contains negative value\n-       119: invokespecial #59                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       117: ldc           #125                // String Corrupted TAR archive. Sparse header block numbytes contains negative value\n+       119: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        122: athrow\n        123: lload_3\n        124: aload         5\n        126: iconst_1\n        127: laload\n        128: ladd\n        129: lstore_3\n        130: aload_2\n-       131: new           #52                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+       131: new           #41                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n        134: dup\n        135: lload         8\n        137: lload         10\n-       139: invokespecial #53                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n-       142: invokeinterface #62,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       139: invokespecial #42                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.\"<init>\":(JJ)V\n+       142: invokeinterface #51,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n        147: pop\n        148: goto          46\n        151: iload_1\n        152: i2l\n        153: lload_3\n        154: iload_1\n        155: i2l\n        156: lrem\n        157: lsub\n        158: lstore        8\n        160: aload_0\n        161: lload         8\n-       163: invokestatic  #143                // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n+       163: invokestatic  #126                // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J\n        166: pop2\n        167: aload_2\n        168: areturn\n       LineNumberTable:\n         line 921: 0\n         line 922: 8\n         line 924: 10\n@@ -3001,56 +2887,56 @@\n         frame_type = 252 /* append */\n           offset_delta = 35\n           locals = [ long ]\n         frame_type = 249 /* chop */\n           offset_delta = 27\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #316                         // (Ljava/io/InputStream;I)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #292                         // (Ljava/io/InputStream;I)Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n \n   private static long[] readLineOfNumberForPax1X(java.io.InputStream) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;)[J\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=5, locals=6, args_size=1\n          0: lconst_0\n          1: lstore_2\n          2: lconst_0\n          3: lstore        4\n          5: aload_0\n-         6: invokevirtual #99                 // Method java/io/InputStream.read:()I\n+         6: invokevirtual #84                 // Method java/io/InputStream.read:()I\n          9: dup\n         10: istore_1\n         11: bipush        10\n         13: if_icmpeq     74\n         16: lload         4\n         18: lconst_1\n         19: ladd\n         20: lstore        4\n         22: iload_1\n         23: iconst_m1\n         24: if_icmpne     37\n-        27: new           #45                 // class java/io/IOException\n+        27: new           #34                 // class java/io/IOException\n         30: dup\n-        31: ldc           #144                // String Unexpected EOF when reading parse information of 1.X PAX format\n-        33: invokespecial #59                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        31: ldc           #127                // String Unexpected EOF when reading parse information of 1.X PAX format\n+        33: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         36: athrow\n         37: iload_1\n         38: bipush        48\n         40: if_icmplt     49\n         43: iload_1\n         44: bipush        57\n         46: if_icmple     59\n-        49: new           #45                 // class java/io/IOException\n+        49: new           #34                 // class java/io/IOException\n         52: dup\n-        53: ldc           #145                // String Corrupted TAR archive. Non-numeric value in sparse headers block\n-        55: invokespecial #59                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        53: ldc           #128                // String Corrupted TAR archive. Non-numeric value in sparse headers block\n+        55: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         58: athrow\n         59: lload_2\n-        60: ldc2_w        #146                // long 10l\n+        60: ldc2_w        #129                // long 10l\n         63: lmul\n         64: iload_1\n         65: bipush        48\n         67: isub\n         68: i2l\n         69: ladd\n         70: lstore_2\n@@ -3104,22 +2990,45 @@\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=2, locals=0, args_size=0\n          0: aconst_null\n-         1: invokestatic  #148                // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-         4: putstatic     #43                 // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-         7: new           #149                // class org/apache/commons/compress/archivers/tar/TarUtils$1\n+         1: invokestatic  #131                // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+         4: putstatic     #32                 // Field DEFAULT_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+         7: new           #132                // class org/apache/commons/compress/archivers/tar/TarUtils$1\n         10: dup\n-        11: invokespecial #150                // Method org/apache/commons/compress/archivers/tar/TarUtils$1.\"<init>\":()V\n-        14: putstatic     #46                 // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        11: invokespecial #133                // Method org/apache/commons/compress/archivers/tar/TarUtils$1.\"<init>\":()V\n+        14: putstatic     #35                 // Field FALLBACK_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n         17: return\n       LineNumberTable:\n         line 53: 0\n         line 54: 1\n         line 60: 7\n }\n SourceFile: \"TarUtils.java\"\n InnerClasses:\n-  static #149;                            // class org/apache/commons/compress/archivers/tar/TarUtils$1\n+  #132;                                   // class org/apache/commons/compress/archivers/tar/TarUtils$1\n+  public static final #522= #521 of #524; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n+BootstrapMethods:\n+  0: #303 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+    Method arguments:\n+      #304 Length \\u0001 must be at least 2\n+  1: #303 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+    Method arguments:\n+      #311 At offset \\u0001, \\u0001 byte binary number exceeds maximum signed long value\n+  2: #303 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+    Method arguments:\n+      #329 Invalid byte \\u0001 at offset \\u0001 in \\'\\u0001\\' len=\\u0001\n+  3: #303 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+    Method arguments:\n+      #363 \\u0001=\\u0001 will not fit in octal number buffer of length \\u0001\n+  4: #303 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+    Method arguments:\n+      #370 Value \\u0001 is too large for \\u0001 byte field.\n+  5: #303 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+    Method arguments:\n+      #383 Paxheader value size \\u0001 exceeds size of header record\n+  6: #303 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+    Method arguments:\n+      #386 Failed to read Paxheader. Expected \\u0001 bytes, read \\u0001\n"}]}
