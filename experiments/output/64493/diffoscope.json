{"diffoscope-json-version": 1, "source1": "first/StreamCompressor$SeekableByteChannelCompressor.class", "source2": "second/StreamCompressor$SeekableByteChannelCompressor.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,112 +1,112 @@\n-  SHA-256 checksum 39ea8fb540afefac1ac5a7731fa8576eb219366f233f61a0d4cbcbaadb8c9b23\n+  SHA-256 checksum bc05aabc7f5bb0e2f29f474f1ddc77db99e54f369e7f96a8902690d3ae03858f\n   Compiled from \"StreamCompressor.java\"\n final class org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor extends org.apache.commons.compress.archivers.zip.StreamCompressor\n   minor version: 0\n-  major version: 53\n+  major version: 51\n   flags: (0x0030) ACC_FINAL, ACC_SUPER\n-  this_class: #5                          // org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor\n-  super_class: #6                         // org/apache/commons/compress/archivers/zip/StreamCompressor\n+  this_class: #1                          // org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor\n+  super_class: #3                         // org/apache/commons/compress/archivers/zip/StreamCompressor\n   interfaces: 0, fields: 1, methods: 2, attributes: 2\n Constant pool:\n-   #1 = Methodref          #6.#31         // org/apache/commons/compress/archivers/zip/StreamCompressor.\"<init>\":(Ljava/util/zip/Deflater;)V\n-   #2 = Fieldref           #5.#32         // org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor.channel:Ljava/nio/channels/SeekableByteChannel;\n-   #3 = Methodref          #33.#34        // java/nio/ByteBuffer.wrap:([BII)Ljava/nio/ByteBuffer;\n-   #4 = InterfaceMethodref #35.#36        // java/nio/channels/SeekableByteChannel.write:(Ljava/nio/ByteBuffer;)I\n-   #5 = Class              #37            // org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor\n-   #6 = Class              #38            // org/apache/commons/compress/archivers/zip/StreamCompressor\n-   #7 = Utf8               channel\n-   #8 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n-   #9 = Utf8               <init>\n-  #10 = Utf8               (Ljava/util/zip/Deflater;Ljava/nio/channels/SeekableByteChannel;)V\n-  #11 = Utf8               Code\n-  #12 = Utf8               LineNumberTable\n-  #13 = Utf8               LocalVariableTable\n-  #14 = Utf8               this\n-  #15 = Utf8               SeekableByteChannelCompressor\n-  #16 = Utf8               InnerClasses\n-  #17 = Utf8               Lorg/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor;\n-  #18 = Utf8               deflater\n-  #19 = Utf8               Ljava/util/zip/Deflater;\n-  #20 = Utf8               writeOut\n-  #21 = Utf8               ([BII)V\n-  #22 = Utf8               data\n-  #23 = Utf8               [B\n-  #24 = Utf8               offset\n-  #25 = Utf8               I\n-  #26 = Utf8               length\n-  #27 = Utf8               Exceptions\n-  #28 = Class              #39            // java/io/IOException\n-  #29 = Utf8               SourceFile\n-  #30 = Utf8               StreamCompressor.java\n-  #31 = NameAndType        #9:#40         // \"<init>\":(Ljava/util/zip/Deflater;)V\n-  #32 = NameAndType        #7:#8          // channel:Ljava/nio/channels/SeekableByteChannel;\n-  #33 = Class              #41            // java/nio/ByteBuffer\n-  #34 = NameAndType        #42:#43        // wrap:([BII)Ljava/nio/ByteBuffer;\n-  #35 = Class              #44            // java/nio/channels/SeekableByteChannel\n-  #36 = NameAndType        #45:#46        // write:(Ljava/nio/ByteBuffer;)I\n-  #37 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor\n-  #38 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor\n-  #39 = Utf8               java/io/IOException\n-  #40 = Utf8               (Ljava/util/zip/Deflater;)V\n-  #41 = Utf8               java/nio/ByteBuffer\n-  #42 = Utf8               wrap\n-  #43 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n-  #44 = Utf8               java/nio/channels/SeekableByteChannel\n-  #45 = Utf8               write\n-  #46 = Utf8               (Ljava/nio/ByteBuffer;)I\n+   #1 = Class              #2             // org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor\n+   #2 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor\n+   #3 = Class              #4             // org/apache/commons/compress/archivers/zip/StreamCompressor\n+   #4 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor\n+   #5 = Utf8               channel\n+   #6 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n+   #7 = Utf8               <init>\n+   #8 = Utf8               (Ljava/util/zip/Deflater;Ljava/nio/channels/SeekableByteChannel;)V\n+   #9 = Utf8               Code\n+  #10 = Methodref          #3.#11         // org/apache/commons/compress/archivers/zip/StreamCompressor.\"<init>\":(Ljava/util/zip/Deflater;)V\n+  #11 = NameAndType        #7:#12         // \"<init>\":(Ljava/util/zip/Deflater;)V\n+  #12 = Utf8               (Ljava/util/zip/Deflater;)V\n+  #13 = Fieldref           #1.#14         // org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor.channel:Ljava/nio/channels/SeekableByteChannel;\n+  #14 = NameAndType        #5:#6          // channel:Ljava/nio/channels/SeekableByteChannel;\n+  #15 = Utf8               LineNumberTable\n+  #16 = Utf8               LocalVariableTable\n+  #17 = Utf8               this\n+  #18 = Utf8               Lorg/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor;\n+  #19 = Utf8               deflater\n+  #20 = Utf8               Ljava/util/zip/Deflater;\n+  #21 = Utf8               writeOut\n+  #22 = Utf8               ([BII)V\n+  #23 = Utf8               Exceptions\n+  #24 = Class              #25            // java/io/IOException\n+  #25 = Utf8               java/io/IOException\n+  #26 = Methodref          #27.#29        // java/nio/ByteBuffer.wrap:([BII)Ljava/nio/ByteBuffer;\n+  #27 = Class              #28            // java/nio/ByteBuffer\n+  #28 = Utf8               java/nio/ByteBuffer\n+  #29 = NameAndType        #30:#31        // wrap:([BII)Ljava/nio/ByteBuffer;\n+  #30 = Utf8               wrap\n+  #31 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n+  #32 = InterfaceMethodref #33.#35        // java/nio/channels/SeekableByteChannel.write:(Ljava/nio/ByteBuffer;)I\n+  #33 = Class              #34            // java/nio/channels/SeekableByteChannel\n+  #34 = Utf8               java/nio/channels/SeekableByteChannel\n+  #35 = NameAndType        #36:#37        // write:(Ljava/nio/ByteBuffer;)I\n+  #36 = Utf8               write\n+  #37 = Utf8               (Ljava/nio/ByteBuffer;)I\n+  #38 = Utf8               data\n+  #39 = Utf8               [B\n+  #40 = Utf8               offset\n+  #41 = Utf8               I\n+  #42 = Utf8               length\n+  #43 = Utf8               SourceFile\n+  #44 = Utf8               StreamCompressor.java\n+  #45 = Utf8               InnerClasses\n+  #46 = Utf8               SeekableByteChannelCompressor\n {\n   private final java.nio.channels.SeekableByteChannel channel;\n     descriptor: Ljava/nio/channels/SeekableByteChannel;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   public org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor(java.util.zip.Deflater, java.nio.channels.SeekableByteChannel);\n     descriptor: (Ljava/util/zip/Deflater;Ljava/nio/channels/SeekableByteChannel;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #1                  // Method org/apache/commons/compress/archivers/zip/StreamCompressor.\"<init>\":(Ljava/util/zip/Deflater;)V\n+         2: invokespecial #10                 // Method org/apache/commons/compress/archivers/zip/StreamCompressor.\"<init>\":(Ljava/util/zip/Deflater;)V\n          5: aload_0\n          6: aload_2\n-         7: putfield      #2                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n+         7: putfield      #13                 // Field channel:Ljava/nio/channels/SeekableByteChannel;\n         10: return\n       LineNumberTable:\n         line 330: 0\n         line 331: 5\n         line 332: 10\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      11     0  this   Lorg/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor;\n             0      11     1 deflater   Ljava/util/zip/Deflater;\n             0      11     2 channel   Ljava/nio/channels/SeekableByteChannel;\n \n   protected final void writeOut(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)V\n     flags: (0x0014) ACC_PROTECTED, ACC_FINAL\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n-         1: getfield      #2                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n+         1: getfield      #13                 // Field channel:Ljava/nio/channels/SeekableByteChannel;\n          4: aload_1\n          5: iload_2\n          6: iload_3\n-         7: invokestatic  #3                  // Method java/nio/ByteBuffer.wrap:([BII)Ljava/nio/ByteBuffer;\n-        10: invokeinterface #4,  2            // InterfaceMethod java/nio/channels/SeekableByteChannel.write:(Ljava/nio/ByteBuffer;)I\n+         7: invokestatic  #26                 // Method java/nio/ByteBuffer.wrap:([BII)Ljava/nio/ByteBuffer;\n+        10: invokeinterface #32,  2           // InterfaceMethod java/nio/channels/SeekableByteChannel.write:(Ljava/nio/ByteBuffer;)I\n         15: pop\n         16: return\n       LineNumberTable:\n         line 337: 0\n         line 338: 16\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      17     0  this   Lorg/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor;\n             0      17     1  data   [B\n             0      17     2 offset   I\n             0      17     3 length   I\n-    Exceptions:\n-      throws java.io.IOException\n }\n SourceFile: \"StreamCompressor.java\"\n InnerClasses:\n-  private static final #15= #5 of #6;     // SeekableByteChannelCompressor=class org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor of class org/apache/commons/compress/archivers/zip/StreamCompressor\n+  private static final #46= #1 of #3;     // SeekableByteChannelCompressor=class org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor of class org/apache/commons/compress/archivers/zip/StreamCompressor\n"}]}
