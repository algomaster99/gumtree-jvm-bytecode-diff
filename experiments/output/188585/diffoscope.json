{"diffoscope-json-version": 1, "source1": "first/Deflate64CompressorInputStream.class", "source2": "second/Deflate64CompressorInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,136 +1,136 @@\n-  SHA-256 checksum 1ba1698fdf24881068d44c87696bfc0f41bca12179f18a0ca7339a1ad2a17bcf\n+  SHA-256 checksum 3cc877c34471a0c35fad65f8e5f3d2714667d548d3610b57fd882e135c2ece89\n   Compiled from \"Deflate64CompressorInputStream.java\"\n public class org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream implements org.apache.commons.compress.utils.InputStreamStatistics\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #29                         // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n-  super_class: #30                        // org/apache/commons/compress/compressors/CompressorInputStream\n+  this_class: #8                          // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+  super_class: #17                        // org/apache/commons/compress/compressors/CompressorInputStream\n   interfaces: 1, fields: 4, methods: 8, attributes: 1\n Constant pool:\n-    #1 = Class              #71           // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n-    #2 = Methodref          #1.#72        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.\"<init>\":(Ljava/io/InputStream;)V\n-    #3 = Methodref          #29.#73       // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)V\n-    #4 = Fieldref           #29.#74       // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.originalStream:Ljava/io/InputStream;\n-    #5 = Methodref          #30.#75       // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n-    #6 = Fieldref           #29.#76       // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.oneByte:[B\n-    #7 = Fieldref           #29.#77       // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n-    #8 = Methodref          #29.#78       // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.read:([B)I\n-    #9 = Class              #79           // java/lang/IllegalStateException\n-   #10 = Class              #80           // java/lang/StringBuilder\n-   #11 = Methodref          #10.#75       // java/lang/StringBuilder.\"<init>\":()V\n-   #12 = String             #81           // Invalid return value from read:\n-   #13 = Methodref          #10.#82       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #14 = Methodref          #10.#83       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #15 = Methodref          #10.#84       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #16 = Methodref          #9.#85        // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-   #17 = Methodref          #1.#86        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.decode:([BII)I\n-   #18 = Class              #87           // java/lang/RuntimeException\n-   #19 = Class              #88           // java/io/IOException\n-   #20 = String             #89           // Invalid Deflate64 input\n-   #21 = Methodref          #19.#90       // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #22 = Methodref          #1.#91        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.getBytesRead:()J\n-   #23 = Fieldref           #29.#92       // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.compressedBytesRead:J\n-   #24 = Methodref          #29.#93       // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.count:(I)V\n-   #25 = Methodref          #29.#94       // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.closeDecoder:()V\n-   #26 = Methodref          #1.#95        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.available:()I\n-   #27 = Methodref          #96.#97       // java/io/InputStream.close:()V\n-   #28 = Methodref          #98.#99       // org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n-   #29 = Class              #100          // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n-   #30 = Class              #101          // org/apache/commons/compress/compressors/CompressorInputStream\n-   #31 = Class              #102          // org/apache/commons/compress/utils/InputStreamStatistics\n-   #32 = Utf8               originalStream\n-   #33 = Utf8               Ljava/io/InputStream;\n-   #34 = Utf8               decoder\n-   #35 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n-   #36 = Utf8               compressedBytesRead\n-   #37 = Utf8               J\n-   #38 = Utf8               oneByte\n-   #39 = Utf8               [B\n-   #40 = Utf8               <init>\n-   #41 = Utf8               (Ljava/io/InputStream;)V\n-   #42 = Utf8               Code\n-   #43 = Utf8               LineNumberTable\n-   #44 = Utf8               LocalVariableTable\n-   #45 = Utf8               this\n-   #46 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream;\n-   #47 = Utf8               in\n-   #48 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)V\n-   #49 = Utf8               read\n-   #50 = Utf8               ()I\n-   #51 = Utf8               r\n-   #52 = Utf8               I\n-   #53 = Utf8               StackMapTable\n-   #54 = Utf8               Exceptions\n-   #55 = Utf8               ([BII)I\n-   #56 = Utf8               ex\n-   #57 = Utf8               Ljava/lang/RuntimeException;\n-   #58 = Utf8               b\n-   #59 = Utf8               off\n-   #60 = Utf8               len\n-   #61 = Class              #39           // \"[B\"\n-   #62 = Utf8               available\n-   #63 = Utf8               close\n-   #64 = Utf8               ()V\n-   #65 = Class              #103          // java/lang/Throwable\n-   #66 = Utf8               getCompressedCount\n-   #67 = Utf8               ()J\n-   #68 = Utf8               closeDecoder\n-   #69 = Utf8               SourceFile\n-   #70 = Utf8               Deflate64CompressorInputStream.java\n-   #71 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n-   #72 = NameAndType        #40:#41       // \"<init>\":(Ljava/io/InputStream;)V\n-   #73 = NameAndType        #40:#48       // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)V\n-   #74 = NameAndType        #32:#33       // originalStream:Ljava/io/InputStream;\n-   #75 = NameAndType        #40:#64       // \"<init>\":()V\n-   #76 = NameAndType        #38:#39       // oneByte:[B\n-   #77 = NameAndType        #34:#35       // decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n-   #78 = NameAndType        #49:#104      // read:([B)I\n-   #79 = Utf8               java/lang/IllegalStateException\n-   #80 = Utf8               java/lang/StringBuilder\n-   #81 = Utf8               Invalid return value from read:\n-   #82 = NameAndType        #105:#106     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #83 = NameAndType        #105:#107     // append:(I)Ljava/lang/StringBuilder;\n-   #84 = NameAndType        #108:#109     // toString:()Ljava/lang/String;\n-   #85 = NameAndType        #40:#110      // \"<init>\":(Ljava/lang/String;)V\n-   #86 = NameAndType        #111:#55      // decode:([BII)I\n-   #87 = Utf8               java/lang/RuntimeException\n-   #88 = Utf8               java/io/IOException\n-   #89 = Utf8               Invalid Deflate64 input\n-   #90 = NameAndType        #40:#112      // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #91 = NameAndType        #113:#67      // getBytesRead:()J\n-   #92 = NameAndType        #36:#37       // compressedBytesRead:J\n-   #93 = NameAndType        #114:#115     // count:(I)V\n-   #94 = NameAndType        #68:#64       // closeDecoder:()V\n-   #95 = NameAndType        #62:#50       // available:()I\n-   #96 = Class              #116          // java/io/InputStream\n-   #97 = NameAndType        #63:#64       // close:()V\n-   #98 = Class              #117          // org/apache/commons/compress/utils/IOUtils\n-   #99 = NameAndType        #118:#119     // closeQuietly:(Ljava/io/Closeable;)V\n-  #100 = Utf8               org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n-  #101 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n-  #102 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n-  #103 = Utf8               java/lang/Throwable\n-  #104 = Utf8               ([B)I\n-  #105 = Utf8               append\n-  #106 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #107 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #108 = Utf8               toString\n-  #109 = Utf8               ()Ljava/lang/String;\n-  #110 = Utf8               (Ljava/lang/String;)V\n-  #111 = Utf8               decode\n-  #112 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #113 = Utf8               getBytesRead\n-  #114 = Utf8               count\n-  #115 = Utf8               (I)V\n-  #116 = Utf8               java/io/InputStream\n-  #117 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #118 = Utf8               closeQuietly\n-  #119 = Utf8               (Ljava/io/Closeable;)V\n+    #1 = Class              #2            // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n+    #2 = Utf8               org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n+    #3 = Methodref          #1.#4         // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.\"<init>\":(Ljava/io/InputStream;)V\n+    #4 = NameAndType        #5:#6         // \"<init>\":(Ljava/io/InputStream;)V\n+    #5 = Utf8               <init>\n+    #6 = Utf8               (Ljava/io/InputStream;)V\n+    #7 = Methodref          #8.#9         // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)V\n+    #8 = Class              #10           // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+    #9 = NameAndType        #5:#11        // \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)V\n+   #10 = Utf8               org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+   #11 = Utf8               (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)V\n+   #12 = Fieldref           #8.#13        // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.originalStream:Ljava/io/InputStream;\n+   #13 = NameAndType        #14:#15       // originalStream:Ljava/io/InputStream;\n+   #14 = Utf8               originalStream\n+   #15 = Utf8               Ljava/io/InputStream;\n+   #16 = Methodref          #17.#18       // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+   #17 = Class              #19           // org/apache/commons/compress/compressors/CompressorInputStream\n+   #18 = NameAndType        #5:#20        // \"<init>\":()V\n+   #19 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n+   #20 = Utf8               ()V\n+   #21 = Fieldref           #8.#22        // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.oneByte:[B\n+   #22 = NameAndType        #23:#24       // oneByte:[B\n+   #23 = Utf8               oneByte\n+   #24 = Utf8               [B\n+   #25 = Fieldref           #8.#26        // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n+   #26 = NameAndType        #27:#28       // decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n+   #27 = Utf8               decoder\n+   #28 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n+   #29 = Methodref          #8.#30        // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.read:([B)I\n+   #30 = NameAndType        #31:#32       // read:([B)I\n+   #31 = Utf8               read\n+   #32 = Utf8               ([B)I\n+   #33 = Class              #34           // java/lang/IllegalStateException\n+   #34 = Utf8               java/lang/IllegalStateException\n+   #35 = Class              #36           // java/lang/StringBuilder\n+   #36 = Utf8               java/lang/StringBuilder\n+   #37 = Methodref          #35.#18       // java/lang/StringBuilder.\"<init>\":()V\n+   #38 = String             #39           // Invalid return value from read:\n+   #39 = Utf8               Invalid return value from read:\n+   #40 = Methodref          #35.#41       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #41 = NameAndType        #42:#43       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #42 = Utf8               append\n+   #43 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #44 = Methodref          #35.#45       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #45 = NameAndType        #42:#46       // append:(I)Ljava/lang/StringBuilder;\n+   #46 = Utf8               (I)Ljava/lang/StringBuilder;\n+   #47 = Methodref          #35.#48       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #48 = NameAndType        #49:#50       // toString:()Ljava/lang/String;\n+   #49 = Utf8               toString\n+   #50 = Utf8               ()Ljava/lang/String;\n+   #51 = Methodref          #33.#52       // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+   #52 = NameAndType        #5:#53        // \"<init>\":(Ljava/lang/String;)V\n+   #53 = Utf8               (Ljava/lang/String;)V\n+   #54 = Methodref          #1.#55        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.decode:([BII)I\n+   #55 = NameAndType        #56:#57       // decode:([BII)I\n+   #56 = Utf8               decode\n+   #57 = Utf8               ([BII)I\n+   #58 = Class              #59           // java/lang/RuntimeException\n+   #59 = Utf8               java/lang/RuntimeException\n+   #60 = Class              #61           // java/io/IOException\n+   #61 = Utf8               java/io/IOException\n+   #62 = String             #63           // Invalid Deflate64 input\n+   #63 = Utf8               Invalid Deflate64 input\n+   #64 = Methodref          #60.#65       // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #65 = NameAndType        #5:#66        // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #66 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #67 = Methodref          #1.#68        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.getBytesRead:()J\n+   #68 = NameAndType        #69:#70       // getBytesRead:()J\n+   #69 = Utf8               getBytesRead\n+   #70 = Utf8               ()J\n+   #71 = Fieldref           #8.#72        // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.compressedBytesRead:J\n+   #72 = NameAndType        #73:#74       // compressedBytesRead:J\n+   #73 = Utf8               compressedBytesRead\n+   #74 = Utf8               J\n+   #75 = Methodref          #8.#76        // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.count:(I)V\n+   #76 = NameAndType        #77:#78       // count:(I)V\n+   #77 = Utf8               count\n+   #78 = Utf8               (I)V\n+   #79 = Methodref          #8.#80        // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.closeDecoder:()V\n+   #80 = NameAndType        #81:#20       // closeDecoder:()V\n+   #81 = Utf8               closeDecoder\n+   #82 = Methodref          #1.#83        // org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.available:()I\n+   #83 = NameAndType        #84:#85       // available:()I\n+   #84 = Utf8               available\n+   #85 = Utf8               ()I\n+   #86 = Methodref          #87.#88       // java/io/InputStream.close:()V\n+   #87 = Class              #89           // java/io/InputStream\n+   #88 = NameAndType        #90:#20       // close:()V\n+   #89 = Utf8               java/io/InputStream\n+   #90 = Utf8               close\n+   #91 = Methodref          #92.#93       // org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n+   #92 = Class              #94           // org/apache/commons/compress/utils/IOUtils\n+   #93 = NameAndType        #95:#96       // closeQuietly:(Ljava/io/Closeable;)V\n+   #94 = Utf8               org/apache/commons/compress/utils/IOUtils\n+   #95 = Utf8               closeQuietly\n+   #96 = Utf8               (Ljava/io/Closeable;)V\n+   #97 = Class              #98           // org/apache/commons/compress/utils/InputStreamStatistics\n+   #98 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n+   #99 = Utf8               Code\n+  #100 = Utf8               LineNumberTable\n+  #101 = Utf8               LocalVariableTable\n+  #102 = Utf8               this\n+  #103 = Utf8               Lorg/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream;\n+  #104 = Utf8               in\n+  #105 = Utf8               r\n+  #106 = Utf8               I\n+  #107 = Utf8               StackMapTable\n+  #108 = Utf8               Exceptions\n+  #109 = Utf8               ex\n+  #110 = Utf8               Ljava/lang/RuntimeException;\n+  #111 = Utf8               b\n+  #112 = Utf8               off\n+  #113 = Utf8               len\n+  #114 = Class              #24           // \"[B\"\n+  #115 = Class              #116          // java/lang/Throwable\n+  #116 = Utf8               java/lang/Throwable\n+  #117 = Utf8               getCompressedCount\n+  #118 = Utf8               SourceFile\n+  #119 = Utf8               Deflate64CompressorInputStream.java\n {\n   private java.io.InputStream originalStream;\n     descriptor: Ljava/io/InputStream;\n     flags: (0x0002) ACC_PRIVATE\n \n   private org.apache.commons.compress.compressors.deflate64.HuffmanDecoder decoder;\n     descriptor: Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n@@ -149,19 +149,19 @@\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n          1: new           #1                  // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder\n          4: dup\n          5: aload_1\n-         6: invokespecial #2                  // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.\"<init>\":(Ljava/io/InputStream;)V\n-         9: invokespecial #3                  // Method \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)V\n+         6: invokespecial #3                  // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.\"<init>\":(Ljava/io/InputStream;)V\n+         9: invokespecial #7                  // Method \"<init>\":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)V\n         12: aload_0\n         13: aload_1\n-        14: putfield      #4                  // Field originalStream:Ljava/io/InputStream;\n+        14: putfield      #12                 // Field originalStream:Ljava/io/InputStream;\n         17: return\n       LineNumberTable:\n         line 46: 0\n         line 47: 12\n         line 48: 17\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -170,22 +170,22 @@\n \n   org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream(org.apache.commons.compress.compressors.deflate64.HuffmanDecoder);\n     descriptor: (Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;)V\n     flags: (0x0000)\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n-         1: invokespecial #5                  // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+         1: invokespecial #16                 // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n          4: aload_0\n          5: iconst_1\n          6: newarray       byte\n-         8: putfield      #6                  // Field oneByte:[B\n+         8: putfield      #21                 // Field oneByte:[B\n         11: aload_0\n         12: aload_1\n-        13: putfield      #7                  // Field decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n+        13: putfield      #25                 // Field decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n         16: return\n       LineNumberTable:\n         line 50: 0\n         line 38: 4\n         line 51: 11\n         line 52: 16\n       LocalVariableTable:\n@@ -196,45 +196,45 @@\n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=1\n          0: aload_0\n          1: aload_0\n-         2: getfield      #6                  // Field oneByte:[B\n-         5: invokevirtual #8                  // Method read:([B)I\n+         2: getfield      #21                 // Field oneByte:[B\n+         5: invokevirtual #29                 // Method read:([B)I\n          8: istore_1\n          9: iload_1\n         10: tableswitch   { // -1 to 1\n                       -1: 47\n                        0: 49\n                        1: 36\n                  default: 52\n             }\n         36: aload_0\n-        37: getfield      #6                  // Field oneByte:[B\n+        37: getfield      #21                 // Field oneByte:[B\n         40: iconst_0\n         41: baload\n         42: sipush        255\n         45: iand\n         46: ireturn\n         47: iconst_m1\n         48: ireturn\n         49: goto          0\n-        52: new           #9                  // class java/lang/IllegalStateException\n+        52: new           #33                 // class java/lang/IllegalStateException\n         55: dup\n-        56: new           #10                 // class java/lang/StringBuilder\n+        56: new           #35                 // class java/lang/StringBuilder\n         59: dup\n-        60: invokespecial #11                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        63: ldc           #12                 // String Invalid return value from read:\n-        65: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        60: invokespecial #37                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        63: ldc           #38                 // String Invalid return value from read:\n+        65: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         68: iload_1\n-        69: invokevirtual #14                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        72: invokevirtual #15                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        75: invokespecial #16                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+        69: invokevirtual #44                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        72: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        75: invokespecial #51                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n         78: athrow\n       LineNumberTable:\n         line 60: 0\n         line 61: 9\n         line 63: 36\n         line 65: 47\n         line 67: 49\n@@ -262,44 +262,44 @@\n          0: iload_3\n          1: ifne          6\n          4: iconst_0\n          5: ireturn\n          6: iconst_m1\n          7: istore        4\n          9: aload_0\n-        10: getfield      #7                  // Field decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n+        10: getfield      #25                 // Field decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n         13: ifnull        72\n         16: aload_0\n-        17: getfield      #7                  // Field decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n+        17: getfield      #25                 // Field decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n         20: aload_1\n         21: iload_2\n         22: iload_3\n-        23: invokevirtual #17                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.decode:([BII)I\n+        23: invokevirtual #54                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.decode:([BII)I\n         26: istore        4\n         28: goto          45\n         31: astore        5\n-        33: new           #19                 // class java/io/IOException\n+        33: new           #60                 // class java/io/IOException\n         36: dup\n-        37: ldc           #20                 // String Invalid Deflate64 input\n+        37: ldc           #62                 // String Invalid Deflate64 input\n         39: aload         5\n-        41: invokespecial #21                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+        41: invokespecial #64                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n         44: athrow\n         45: aload_0\n         46: aload_0\n-        47: getfield      #7                  // Field decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n-        50: invokevirtual #22                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.getBytesRead:()J\n-        53: putfield      #23                 // Field compressedBytesRead:J\n+        47: getfield      #25                 // Field decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n+        50: invokevirtual #67                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.getBytesRead:()J\n+        53: putfield      #71                 // Field compressedBytesRead:J\n         56: aload_0\n         57: iload         4\n-        59: invokevirtual #24                 // Method count:(I)V\n+        59: invokevirtual #75                 // Method count:(I)V\n         62: iload         4\n         64: iconst_m1\n         65: if_icmpne     72\n         68: aload_0\n-        69: invokespecial #25                 // Method closeDecoder:()V\n+        69: invokespecial #79                 // Method closeDecoder:()V\n         72: iload         4\n         74: ireturn\n       Exception table:\n          from    to  target type\n             16    28    31   Class java/lang/RuntimeException\n       LineNumberTable:\n         line 79: 0\n@@ -336,19 +336,19 @@\n \n   public int available() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n+         1: getfield      #25                 // Field decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n          4: ifnull        17\n          7: aload_0\n-         8: getfield      #7                  // Field decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n-        11: invokevirtual #26                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.available:()I\n+         8: getfield      #25                 // Field decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n+        11: invokevirtual #82                 // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.available:()I\n         14: goto          18\n         17: iconst_0\n         18: ireturn\n       LineNumberTable:\n         line 100: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -362,35 +362,35 @@\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=1\n          0: aload_0\n-         1: invokespecial #25                 // Method closeDecoder:()V\n+         1: invokespecial #79                 // Method closeDecoder:()V\n          4: aload_0\n-         5: getfield      #4                  // Field originalStream:Ljava/io/InputStream;\n+         5: getfield      #12                 // Field originalStream:Ljava/io/InputStream;\n          8: ifnull        48\n         11: aload_0\n-        12: getfield      #4                  // Field originalStream:Ljava/io/InputStream;\n-        15: invokevirtual #27                 // Method java/io/InputStream.close:()V\n+        12: getfield      #12                 // Field originalStream:Ljava/io/InputStream;\n+        15: invokevirtual #86                 // Method java/io/InputStream.close:()V\n         18: aload_0\n         19: aconst_null\n-        20: putfield      #4                  // Field originalStream:Ljava/io/InputStream;\n+        20: putfield      #12                 // Field originalStream:Ljava/io/InputStream;\n         23: goto          48\n         26: astore_1\n         27: aload_0\n-        28: getfield      #4                  // Field originalStream:Ljava/io/InputStream;\n+        28: getfield      #12                 // Field originalStream:Ljava/io/InputStream;\n         31: ifnull        46\n         34: aload_0\n-        35: getfield      #4                  // Field originalStream:Ljava/io/InputStream;\n-        38: invokevirtual #27                 // Method java/io/InputStream.close:()V\n+        35: getfield      #12                 // Field originalStream:Ljava/io/InputStream;\n+        38: invokevirtual #86                 // Method java/io/InputStream.close:()V\n         41: aload_0\n         42: aconst_null\n-        43: putfield      #4                  // Field originalStream:Ljava/io/InputStream;\n+        43: putfield      #12                 // Field originalStream:Ljava/io/InputStream;\n         46: aload_1\n         47: athrow\n         48: return\n       Exception table:\n          from    to  target type\n              0     4    26   any\n       LineNumberTable:\n@@ -419,33 +419,33 @@\n \n   public long getCompressedCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #23                 // Field compressedBytesRead:J\n+         1: getfield      #71                 // Field compressedBytesRead:J\n          4: lreturn\n       LineNumberTable:\n         line 120: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream;\n \n   private void closeDecoder();\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n-         4: invokestatic  #28                 // Method org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n+         1: getfield      #25                 // Field decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n+         4: invokestatic  #91                 // Method org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n          7: aload_0\n          8: aconst_null\n-         9: putfield      #7                  // Field decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n+         9: putfield      #25                 // Field decoder:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder;\n         12: return\n       LineNumberTable:\n         line 124: 0\n         line 125: 7\n         line 126: 12\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n"}]}
