{"diffoscope-json-version": 1, "source1": "first/ReloadingController.class", "source2": "second/ReloadingController.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,51 +9,51 @@\n \n public class ReloadingController implements EventSource\n {\n     private final ReloadingDetector detector;\n     private final EventListenerList listeners;\n     private boolean reloadingState;\n     \n-    public ReloadingController(final ReloadingDetector detect) {\n-        if (detect == null) {\n+    public ReloadingController(final ReloadingDetector detector) {\n+        if (detector == null) {\n             throw new IllegalArgumentException(\"ReloadingDetector must not be null!\");\n         }\n-        this.detector = detect;\n+        this.detector = detector;\n         this.listeners = new EventListenerList();\n     }\n     \n     public ReloadingDetector getDetector() {\n         return this.detector;\n     }\n     \n-    public <T extends Event> void addEventListener(final EventType<T> eventType, final EventListener<? super T> listener) {\n-        this.listeners.addEventListener((EventType)eventType, (EventListener)listener);\n+    public <T extends Event> void addEventListener(final EventType<T> eventType, final EventListener<? super T> eventListener) {\n+        this.listeners.addEventListener((EventType)eventType, (EventListener)eventListener);\n     }\n     \n-    public <T extends Event> boolean removeEventListener(final EventType<T> eventType, final EventListener<? super T> listener) {\n-        return this.listeners.removeEventListener((EventType)eventType, (EventListener)listener);\n+    public <T extends Event> boolean removeEventListener(final EventType<T> eventType, final EventListener<? super T> eventListener) {\n+        return this.listeners.removeEventListener((EventType)eventType, (EventListener)eventListener);\n     }\n     \n     public synchronized boolean isInReloadingState() {\n         return this.reloadingState;\n     }\n     \n-    public boolean checkForReloading(final Object data) {\n-        boolean sendEvent = false;\n+    public boolean checkForReloading(final Object o) {\n+        boolean b = false;\n         synchronized (this) {\n             if (this.isInReloadingState()) {\n                 return true;\n             }\n             if (this.getDetector().isReloadingRequired()) {\n-                sendEvent = true;\n+                b = true;\n                 this.reloadingState = true;\n             }\n         }\n-        if (sendEvent) {\n-            this.listeners.fire((Event)new ReloadingEvent(this, data));\n+        if (b) {\n+            this.listeners.fire((Event)new ReloadingEvent(this, o));\n             return true;\n         }\n         return false;\n     }\n     \n     public synchronized void resetReloadingState() {\n         if (this.isInReloadingState()) {\n"}]}
