{"diffoscope-json-version": 1, "source1": "first/ForHandler.class", "source2": "second/ForHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,37 +1,34 @@\n \n package com.puppycrawl.tools.checkstyle.checks.indentation;\n \n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n \n public class ForHandler extends BlockParentHandler\n {\n-    public ForHandler(final IndentationCheck indentCheck, final DetailAST ast, final AbstractExpressionHandler parent) {\n-        super(indentCheck, \"for\", ast, parent);\n+    public ForHandler(final IndentationCheck indentationCheck, final DetailAST detailAST, final AbstractExpressionHandler abstractExpressionHandler) {\n+        super(indentationCheck, \"for\", detailAST, abstractExpressionHandler);\n     }\n     \n     private void checkForParams() {\n-        final IndentLevel expected = new IndentLevel(this.getIndent(), new int[] { this.getBasicOffset() });\n-        final DetailAST init = this.getMainAst().findFirstToken(35);\n-        if (init == null) {\n-            final DetailAST forEach = this.getMainAst().findFirstToken(156);\n-            this.checkExpressionSubtree(forEach, expected, false, false);\n+        final IndentLevel indentLevel = new IndentLevel(this.getIndent(), new int[] { this.getBasicOffset() });\n+        final DetailAST firstToken = this.getMainAst().findFirstToken(35);\n+        if (firstToken == null) {\n+            this.checkExpressionSubtree(this.getMainAst().findFirstToken(156), indentLevel, false, false);\n         }\n         else {\n-            this.checkExpressionSubtree(init, expected, false, false);\n-            final DetailAST cond = this.getMainAst().findFirstToken(36);\n-            this.checkExpressionSubtree(cond, expected, false, false);\n-            final DetailAST forIterator = this.getMainAst().findFirstToken(37);\n-            this.checkExpressionSubtree(forIterator, expected, false, false);\n+            this.checkExpressionSubtree(firstToken, indentLevel, false, false);\n+            this.checkExpressionSubtree(this.getMainAst().findFirstToken(36), indentLevel, false, false);\n+            this.checkExpressionSubtree(this.getMainAst().findFirstToken(37), indentLevel, false, false);\n         }\n     }\n     \n     public void checkIndentation() {\n         this.checkForParams();\n         super.checkIndentation();\n         this.checkWrappingIndentation(this.getMainAst(), getForLoopRightParen(this.getMainAst()));\n     }\n     \n-    private static DetailAST getForLoopRightParen(final DetailAST literalForAst) {\n-        return literalForAst.findFirstToken(77);\n+    private static DetailAST getForLoopRightParen(final DetailAST detailAST) {\n+        return detailAST.findFirstToken(77);\n     }\n }\n"}]}
