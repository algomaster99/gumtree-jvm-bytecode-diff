{"diffoscope-json-version": 1, "source1": "first/CPUTF8.class", "source2": "second/CPUTF8.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,62 +6,51 @@\n \n public class CPUTF8 extends ConstantPoolEntry\n {\n     private final String utf8;\n     private boolean hashcodeComputed;\n     private int cachedHashCode;\n     \n-    public CPUTF8(final String utf8, final int globalIndex) {\n-        super((byte)1, globalIndex);\n+    public CPUTF8(final String utf8, final int n) {\n+        super((byte)1, n);\n         this.utf8 = utf8;\n         if (utf8 == null) {\n             throw new NullPointerException(\"Null arguments are not allowed\");\n         }\n     }\n     \n-    public CPUTF8(final String string) {\n-        this(string, -1);\n+    public CPUTF8(final String s) {\n+        this(s, -1);\n     }\n     \n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n-            return true;\n-        }\n-        if (obj == null) {\n-            return false;\n-        }\n-        if (this.getClass() != obj.getClass()) {\n-            return false;\n-        }\n-        final CPUTF8 other = (CPUTF8)obj;\n-        return this.utf8.equals(other.utf8);\n+    public boolean equals(final Object o) {\n+        return this == o || (o != null && this.getClass() == o.getClass() && this.utf8.equals(((CPUTF8)o).utf8));\n     }\n     \n     private void generateHashCode() {\n         this.hashcodeComputed = true;\n-        final int PRIME = 31;\n         this.cachedHashCode = 31 + this.utf8.hashCode();\n     }\n     \n     public int hashCode() {\n         if (!this.hashcodeComputed) {\n             this.generateHashCode();\n         }\n         return this.cachedHashCode;\n     }\n     \n     public String toString() {\n         return \"UTF8: \" + this.utf8;\n     }\n     \n-    protected void writeBody(final DataOutputStream dos) throws IOException {\n-        dos.writeUTF(this.utf8);\n+    protected void writeBody(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeUTF(this.utf8);\n     }\n     \n     public String underlyingString() {\n         return this.utf8;\n     }\n     \n-    public void setGlobalIndex(final int index) {\n-        this.globalIndex = index;\n+    public void setGlobalIndex(final int globalIndex) {\n+        this.globalIndex = globalIndex;\n     }\n }\n"}]}
