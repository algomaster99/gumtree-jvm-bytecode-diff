{"diffoscope-json-version": 1, "source1": "first/ParallelScatterZipCreator.class", "source2": "second/ParallelScatterZipCreator.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -33,15 +33,15 @@\n     }\n     \n     public ParallelScatterZipCreator() {\n         this(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()));\n     }\n     \n     public ParallelScatterZipCreator(final ExecutorService executorService) {\n-        this(executorService, (ScatterGatherBackingStoreSupplier)new ParallelScatterZipCreator.DefaultBackingStoreSupplier((ParallelScatterZipCreator.ParallelScatterZipCreator$1)null));\n+        this(executorService, (ScatterGatherBackingStoreSupplier)new ParallelScatterZipCreator.DefaultBackingStoreSupplier((ParallelScatterZipCreator.DefaultBackingStoreSupplier)null));\n     }\n     \n     public ParallelScatterZipCreator(final ExecutorService executorService, final ScatterGatherBackingStoreSupplier backingStoreSupplier) {\n         this.streams = new ConcurrentLinkedDeque<ScatterZipOutputStream>();\n         this.futures = new ConcurrentLinkedDeque<Future<? extends ScatterZipOutputStream>>();\n         this.startedAt = System.currentTimeMillis();\n         this.compressionDoneAt = 0L;\n@@ -85,28 +85,30 @@\n                 for (final Future<?> future : this.futures) {\n                     future.get();\n                 }\n             }\n             finally {\n                 this.es.shutdown();\n             }\n+            this.es.shutdown();\n             this.es.awaitTermination(60000L, TimeUnit.SECONDS);\n             this.compressionDoneAt = System.currentTimeMillis();\n             for (final Future<? extends ScatterZipOutputStream> future2 : this.futures) {\n                 final ScatterZipOutputStream scatterStream = (ScatterZipOutputStream)future2.get();\n                 scatterStream.zipEntryWriter().writeNextZipEntry(targetStream);\n             }\n             for (final ScatterZipOutputStream scatterStream2 : this.streams) {\n                 scatterStream2.close();\n             }\n             this.scatterDoneAt = System.currentTimeMillis();\n         }\n         finally {\n             this.closeAll();\n         }\n+        this.closeAll();\n     }\n     \n     public ScatterStatistics getStatisticsMessage() {\n         return new ScatterStatistics(this.compressionDoneAt - this.startedAt, this.scatterDoneAt - this.compressionDoneAt);\n     }\n     \n     private void closeAll() {\n"}]}
