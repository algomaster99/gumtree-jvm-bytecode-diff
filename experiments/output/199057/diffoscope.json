{"diffoscope-json-version": 1, "source1": "first/ParameterAnnotations.class", "source2": "second/ParameterAnnotations.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,49 +5,50 @@\n import java.io.IOException;\n import java.io.DataInput;\n \n public abstract class ParameterAnnotations extends Attribute\n {\n     private ParameterAnnotationEntry[] parameterAnnotationTable;\n     \n-    ParameterAnnotations(final byte parameter_annotation_type, final int name_index, final int length, final DataInput input, final ConstantPool constant_pool) throws IOException {\n-        this(parameter_annotation_type, name_index, length, (ParameterAnnotationEntry[])null, constant_pool);\n-        final int num_parameters = input.readUnsignedByte();\n-        this.parameterAnnotationTable = new ParameterAnnotationEntry[num_parameters];\n-        for (int i = 0; i < num_parameters; ++i) {\n-            this.parameterAnnotationTable[i] = new ParameterAnnotationEntry(input, constant_pool);\n+    ParameterAnnotations(final byte b, final int n, final int n2, final DataInput dataInput, final ConstantPool constantPool) throws IOException {\n+        this(b, n, n2, (ParameterAnnotationEntry[])null, constantPool);\n+        final int unsignedByte = dataInput.readUnsignedByte();\n+        this.parameterAnnotationTable = new ParameterAnnotationEntry[unsignedByte];\n+        for (int i = 0; i < unsignedByte; ++i) {\n+            this.parameterAnnotationTable[i] = new ParameterAnnotationEntry(dataInput, constantPool);\n         }\n     }\n     \n-    public ParameterAnnotations(final byte parameterAnnotationType, final int nameIndex, final int length, final ParameterAnnotationEntry[] parameterAnnotationTable, final ConstantPool constantPool) {\n-        super(parameterAnnotationType, nameIndex, length, constantPool);\n+    public ParameterAnnotations(final byte b, final int n, final int n2, final ParameterAnnotationEntry[] parameterAnnotationTable, final ConstantPool constantPool) {\n+        super(b, n, n2, constantPool);\n         this.parameterAnnotationTable = parameterAnnotationTable;\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitParameterAnnotation(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitParameterAnnotation(this);\n     }\n     \n     public final void setParameterAnnotationTable(final ParameterAnnotationEntry[] parameterAnnotationTable) {\n         this.parameterAnnotationTable = parameterAnnotationTable;\n     }\n     \n     public final ParameterAnnotationEntry[] getParameterAnnotationTable() {\n         return this.parameterAnnotationTable;\n     }\n     \n     public ParameterAnnotationEntry[] getParameterAnnotationEntries() {\n         return this.parameterAnnotationTable;\n     }\n     \n-    public void dump(final DataOutputStream dos) throws IOException {\n-        super.dump(dos);\n-        dos.writeByte(this.parameterAnnotationTable.length);\n-        for (final ParameterAnnotationEntry element : this.parameterAnnotationTable) {\n-            element.dump(dos);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        super.dump(dataOutputStream);\n+        dataOutputStream.writeByte(this.parameterAnnotationTable.length);\n+        final ParameterAnnotationEntry[] parameterAnnotationTable = this.parameterAnnotationTable;\n+        for (int length = parameterAnnotationTable.length, i = 0; i < length; ++i) {\n+            parameterAnnotationTable[i].dump(dataOutputStream);\n         }\n     }\n     \n-    public Attribute copy(final ConstantPool constant_pool) {\n+    public Attribute copy(final ConstantPool constantPool) {\n         return (Attribute)this.clone();\n     }\n }\n"}]}
