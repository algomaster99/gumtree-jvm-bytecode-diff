{"diffoscope-json-version": 1, "source1": "first/Fraction.class", "source2": "second/Fraction.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,118 +1,118 @@\n-  SHA-256 checksum 14b6c7997927eeb1e74ac884eb8900ca52c81c06f973baf73b232524603e5145\n+  SHA-256 checksum ce4dd9937e83c18720646cf24c5984511440f4e6bee4dd898454c1c4e9937a3b\n   Compiled from \"Fraction.java\"\n public final class org.apache.commons.lang3.math.Fraction extends java.lang.Number implements java.lang.Comparable<org.apache.commons.lang3.math.Fraction>\n   minor version: 0\n   major version: 51\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n   this_class: #13                         // org/apache/commons/lang3/math/Fraction\n   super_class: #104                       // java/lang/Number\n   interfaces: 1, fields: 18, methods: 36, attributes: 2\n Constant pool:\n-    #1 = Methodref          #104.#188     // java/lang/Number.\"<init>\":()V\n-    #2 = Fieldref           #13.#189      // org/apache/commons/lang3/math/Fraction.hashCode:I\n-    #3 = Fieldref           #13.#190      // org/apache/commons/lang3/math/Fraction.toString:Ljava/lang/String;\n-    #4 = Fieldref           #13.#191      // org/apache/commons/lang3/math/Fraction.toProperString:Ljava/lang/String;\n-    #5 = Fieldref           #13.#192      // org/apache/commons/lang3/math/Fraction.numerator:I\n-    #6 = Fieldref           #13.#193      // org/apache/commons/lang3/math/Fraction.denominator:I\n-    #7 = Class              #194          // java/lang/ArithmeticException\n-    #8 = String             #195          // The denominator must not be zero\n-    #9 = Methodref          #7.#196       // java/lang/ArithmeticException.\"<init>\":(Ljava/lang/String;)V\n-   #10 = Class              #197          // java/lang/Integer\n+    #1 = Methodref          #104.#187     // java/lang/Number.\"<init>\":()V\n+    #2 = Fieldref           #13.#188      // org/apache/commons/lang3/math/Fraction.hashCode:I\n+    #3 = Fieldref           #13.#189      // org/apache/commons/lang3/math/Fraction.toString:Ljava/lang/String;\n+    #4 = Fieldref           #13.#190      // org/apache/commons/lang3/math/Fraction.toProperString:Ljava/lang/String;\n+    #5 = Fieldref           #13.#191      // org/apache/commons/lang3/math/Fraction.numerator:I\n+    #6 = Fieldref           #13.#192      // org/apache/commons/lang3/math/Fraction.denominator:I\n+    #7 = Class              #193          // java/lang/ArithmeticException\n+    #8 = String             #194          // The denominator must not be zero\n+    #9 = Methodref          #7.#195       // java/lang/ArithmeticException.\"<init>\":(Ljava/lang/String;)V\n+   #10 = Class              #196          // java/lang/Integer\n    #11 = Integer            -2147483648\n-   #12 = String             #198          // overflow: can\\'t negate\n-   #13 = Class              #199          // org/apache/commons/lang3/math/Fraction\n-   #14 = Methodref          #13.#200      // org/apache/commons/lang3/math/Fraction.\"<init>\":(II)V\n-   #15 = String             #201          // The denominator must not be negative\n-   #16 = String             #202          // The numerator must not be negative\n+   #12 = String             #197          // overflow: can\\'t negate\n+   #13 = Class              #198          // org/apache/commons/lang3/math/Fraction\n+   #14 = Methodref          #13.#199      // org/apache/commons/lang3/math/Fraction.\"<init>\":(II)V\n+   #15 = String             #200          // The denominator must not be negative\n+   #16 = String             #201          // The numerator must not be negative\n    #17 = Long               -2147483648l\n    #19 = Long               2147483647l\n-   #21 = String             #203          // Numerator too large to represent as an Integer.\n-   #22 = Fieldref           #13.#204      // org/apache/commons/lang3/math/Fraction.ZERO:Lorg/apache/commons/lang3/math/Fraction;\n-   #23 = Methodref          #13.#205      // org/apache/commons/lang3/math/Fraction.greatestCommonDivisor:(II)I\n-   #24 = Methodref          #206.#207     // java/lang/Math.abs:(D)D\n+   #21 = String             #202          // Numerator too large to represent as an Integer.\n+   #22 = Fieldref           #13.#203      // org/apache/commons/lang3/math/Fraction.ZERO:Lorg/apache/commons/lang3/math/Fraction;\n+   #23 = Methodref          #13.#204      // org/apache/commons/lang3/math/Fraction.greatestCommonDivisor:(II)I\n+   #24 = Methodref          #205.#206     // java/lang/Math.abs:(D)D\n    #25 = Double             2.147483647E9d\n-   #27 = Methodref          #29.#208      // java/lang/Double.isNaN:(D)Z\n-   #28 = String             #209          // The value must not be greater than Integer.MAX_VALUE or NaN\n-   #29 = Class              #210          // java/lang/Double\n+   #27 = Methodref          #29.#207      // java/lang/Double.isNaN:(D)Z\n+   #28 = String             #208          // The value must not be greater than Integer.MAX_VALUE or NaN\n+   #29 = Class              #209          // java/lang/Double\n    #30 = Double             1.7976931348623157E308d\n-   #32 = String             #211          // Unable to convert double to fraction\n-   #33 = Methodref          #13.#212      // org/apache/commons/lang3/math/Fraction.getReducedFraction:(II)Lorg/apache/commons/lang3/math/Fraction;\n-   #34 = String             #213          // The string must not be null\n-   #35 = Class              #214          // java/lang/Object\n-   #36 = Methodref          #215.#216     // org/apache/commons/lang3/Validate.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V\n-   #37 = Methodref          #217.#218     // java/lang/String.indexOf:(I)I\n-   #38 = Methodref          #29.#219      // java/lang/Double.parseDouble:(Ljava/lang/String;)D\n-   #39 = Methodref          #13.#220      // org/apache/commons/lang3/math/Fraction.getFraction:(D)Lorg/apache/commons/lang3/math/Fraction;\n-   #40 = Methodref          #217.#221     // java/lang/String.substring:(II)Ljava/lang/String;\n-   #41 = Methodref          #10.#222      // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n-   #42 = Methodref          #217.#223     // java/lang/String.substring:(I)Ljava/lang/String;\n-   #43 = Class              #224          // java/lang/NumberFormatException\n-   #44 = String             #225          // The fraction could not be parsed as the format X Y/Z\n-   #45 = Methodref          #43.#196      // java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n-   #46 = Methodref          #13.#226      // org/apache/commons/lang3/math/Fraction.getFraction:(III)Lorg/apache/commons/lang3/math/Fraction;\n-   #47 = Methodref          #13.#227      // org/apache/commons/lang3/math/Fraction.getFraction:(II)Lorg/apache/commons/lang3/math/Fraction;\n-   #48 = Methodref          #206.#228     // java/lang/Math.abs:(I)I\n-   #49 = Methodref          #13.#229      // org/apache/commons/lang3/math/Fraction.equals:(Ljava/lang/Object;)Z\n-   #50 = String             #230          // Unable to invert zero.\n-   #51 = String             #231          // overflow: can\\'t negate numerator\n-   #52 = String             #232          // overflow: too large to negate\n-   #53 = Methodref          #13.#233      // org/apache/commons/lang3/math/Fraction.negate:()Lorg/apache/commons/lang3/math/Fraction;\n-   #54 = Fieldref           #13.#234      // org/apache/commons/lang3/math/Fraction.ONE:Lorg/apache/commons/lang3/math/Fraction;\n-   #55 = Methodref          #13.#235      // org/apache/commons/lang3/math/Fraction.invert:()Lorg/apache/commons/lang3/math/Fraction;\n-   #56 = Methodref          #13.#236      // org/apache/commons/lang3/math/Fraction.pow:(I)Lorg/apache/commons/lang3/math/Fraction;\n-   #57 = Methodref          #13.#237      // org/apache/commons/lang3/math/Fraction.multiplyBy:(Lorg/apache/commons/lang3/math/Fraction;)Lorg/apache/commons/lang3/math/Fraction;\n-   #58 = String             #238          // overflow: gcd is 2^31\n-   #59 = String             #239          // overflow: mul\n-   #60 = String             #240          // overflow: mulPos\n-   #61 = String             #241          // overflow: add\n-   #62 = Methodref          #13.#242      // org/apache/commons/lang3/math/Fraction.addSub:(Lorg/apache/commons/lang3/math/Fraction;Z)Lorg/apache/commons/lang3/math/Fraction;\n-   #63 = String             #243          // The fraction must not be null\n-   #64 = Methodref          #13.#244      // org/apache/commons/lang3/math/Fraction.mulAndCheck:(II)I\n-   #65 = Methodref          #13.#245      // org/apache/commons/lang3/math/Fraction.addAndCheck:(II)I\n-   #66 = Methodref          #13.#246      // org/apache/commons/lang3/math/Fraction.subAndCheck:(II)I\n-   #67 = Methodref          #13.#247      // org/apache/commons/lang3/math/Fraction.mulPosAndCheck:(II)I\n-   #68 = Methodref          #248.#249     // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-   #69 = Methodref          #248.#250     // java/math/BigInteger.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #70 = Methodref          #248.#251     // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #71 = Methodref          #248.#252     // java/math/BigInteger.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #72 = Methodref          #248.#253     // java/math/BigInteger.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #73 = Methodref          #248.#254     // java/math/BigInteger.intValue:()I\n-   #74 = Methodref          #248.#255     // java/math/BigInteger.divide:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-   #75 = Methodref          #248.#256     // java/math/BigInteger.bitLength:()I\n-   #76 = String             #257          // overflow: numerator too large after multiply\n-   #77 = String             #258          // The fraction to divide by must not be zero\n-   #78 = Methodref          #13.#259      // org/apache/commons/lang3/math/Fraction.getNumerator:()I\n-   #79 = Methodref          #13.#260      // org/apache/commons/lang3/math/Fraction.getDenominator:()I\n-   #80 = Class              #261          // java/lang/StringBuilder\n-   #81 = Methodref          #80.#188      // java/lang/StringBuilder.\"<init>\":()V\n-   #82 = Methodref          #80.#262      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #83 = String             #263          // /\n-   #84 = Methodref          #80.#264      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #85 = Methodref          #80.#265      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #86 = String             #266          // 0\n-   #87 = String             #267          // 1\n-   #88 = String             #268          // -1\n-   #89 = Methodref          #13.#269      // org/apache/commons/lang3/math/Fraction.getProperNumerator:()I\n-   #90 = Methodref          #13.#270      // org/apache/commons/lang3/math/Fraction.getProperWhole:()I\n-   #91 = Methodref          #10.#271      // java/lang/Integer.toString:(I)Ljava/lang/String;\n-   #92 = String             #272          //\n-   #93 = Methodref          #13.#273      // org/apache/commons/lang3/math/Fraction.compareTo:(Lorg/apache/commons/lang3/math/Fraction;)I\n-   #94 = Fieldref           #13.#274      // org/apache/commons/lang3/math/Fraction.ONE_HALF:Lorg/apache/commons/lang3/math/Fraction;\n-   #95 = Fieldref           #13.#275      // org/apache/commons/lang3/math/Fraction.ONE_THIRD:Lorg/apache/commons/lang3/math/Fraction;\n-   #96 = Fieldref           #13.#276      // org/apache/commons/lang3/math/Fraction.TWO_THIRDS:Lorg/apache/commons/lang3/math/Fraction;\n-   #97 = Fieldref           #13.#277      // org/apache/commons/lang3/math/Fraction.ONE_QUARTER:Lorg/apache/commons/lang3/math/Fraction;\n-   #98 = Fieldref           #13.#278      // org/apache/commons/lang3/math/Fraction.TWO_QUARTERS:Lorg/apache/commons/lang3/math/Fraction;\n-   #99 = Fieldref           #13.#279      // org/apache/commons/lang3/math/Fraction.THREE_QUARTERS:Lorg/apache/commons/lang3/math/Fraction;\n-  #100 = Fieldref           #13.#280      // org/apache/commons/lang3/math/Fraction.ONE_FIFTH:Lorg/apache/commons/lang3/math/Fraction;\n-  #101 = Fieldref           #13.#281      // org/apache/commons/lang3/math/Fraction.TWO_FIFTHS:Lorg/apache/commons/lang3/math/Fraction;\n-  #102 = Fieldref           #13.#282      // org/apache/commons/lang3/math/Fraction.THREE_FIFTHS:Lorg/apache/commons/lang3/math/Fraction;\n-  #103 = Fieldref           #13.#283      // org/apache/commons/lang3/math/Fraction.FOUR_FIFTHS:Lorg/apache/commons/lang3/math/Fraction;\n-  #104 = Class              #284          // java/lang/Number\n-  #105 = Class              #285          // java/lang/Comparable\n+   #32 = String             #210          // Unable to convert double to fraction\n+   #33 = Methodref          #13.#211      // org/apache/commons/lang3/math/Fraction.getReducedFraction:(II)Lorg/apache/commons/lang3/math/Fraction;\n+   #34 = String             #212          // The string must not be null\n+   #35 = Class              #213          // java/lang/Object\n+   #36 = Methodref          #214.#215     // org/apache/commons/lang3/Validate.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V\n+   #37 = Methodref          #216.#217     // java/lang/String.indexOf:(I)I\n+   #38 = Methodref          #29.#218      // java/lang/Double.parseDouble:(Ljava/lang/String;)D\n+   #39 = Methodref          #13.#219      // org/apache/commons/lang3/math/Fraction.getFraction:(D)Lorg/apache/commons/lang3/math/Fraction;\n+   #40 = Methodref          #216.#220     // java/lang/String.substring:(II)Ljava/lang/String;\n+   #41 = Methodref          #10.#221      // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n+   #42 = Methodref          #216.#222     // java/lang/String.substring:(I)Ljava/lang/String;\n+   #43 = Class              #223          // java/lang/NumberFormatException\n+   #44 = String             #224          // The fraction could not be parsed as the format X Y/Z\n+   #45 = Methodref          #43.#195      // java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n+   #46 = Methodref          #13.#225      // org/apache/commons/lang3/math/Fraction.getFraction:(III)Lorg/apache/commons/lang3/math/Fraction;\n+   #47 = Methodref          #13.#226      // org/apache/commons/lang3/math/Fraction.getFraction:(II)Lorg/apache/commons/lang3/math/Fraction;\n+   #48 = Methodref          #205.#227     // java/lang/Math.abs:(I)I\n+   #49 = Methodref          #13.#228      // org/apache/commons/lang3/math/Fraction.equals:(Ljava/lang/Object;)Z\n+   #50 = String             #229          // Unable to invert zero.\n+   #51 = String             #230          // overflow: can\\'t negate numerator\n+   #52 = String             #231          // overflow: too large to negate\n+   #53 = Methodref          #13.#232      // org/apache/commons/lang3/math/Fraction.negate:()Lorg/apache/commons/lang3/math/Fraction;\n+   #54 = Fieldref           #13.#233      // org/apache/commons/lang3/math/Fraction.ONE:Lorg/apache/commons/lang3/math/Fraction;\n+   #55 = Methodref          #13.#234      // org/apache/commons/lang3/math/Fraction.invert:()Lorg/apache/commons/lang3/math/Fraction;\n+   #56 = Methodref          #13.#235      // org/apache/commons/lang3/math/Fraction.pow:(I)Lorg/apache/commons/lang3/math/Fraction;\n+   #57 = Methodref          #13.#236      // org/apache/commons/lang3/math/Fraction.multiplyBy:(Lorg/apache/commons/lang3/math/Fraction;)Lorg/apache/commons/lang3/math/Fraction;\n+   #58 = String             #237          // overflow: gcd is 2^31\n+   #59 = String             #238          // overflow: mul\n+   #60 = String             #239          // overflow: mulPos\n+   #61 = String             #240          // overflow: add\n+   #62 = Methodref          #13.#241      // org/apache/commons/lang3/math/Fraction.addSub:(Lorg/apache/commons/lang3/math/Fraction;Z)Lorg/apache/commons/lang3/math/Fraction;\n+   #63 = String             #242          // The fraction must not be null\n+   #64 = Methodref          #13.#243      // org/apache/commons/lang3/math/Fraction.mulAndCheck:(II)I\n+   #65 = Methodref          #13.#244      // org/apache/commons/lang3/math/Fraction.addAndCheck:(II)I\n+   #66 = Methodref          #13.#245      // org/apache/commons/lang3/math/Fraction.subAndCheck:(II)I\n+   #67 = Methodref          #13.#246      // org/apache/commons/lang3/math/Fraction.mulPosAndCheck:(II)I\n+   #68 = Methodref          #172.#247     // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+   #69 = Methodref          #172.#248     // java/math/BigInteger.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #70 = Methodref          #172.#249     // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #71 = Methodref          #172.#250     // java/math/BigInteger.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #72 = Methodref          #172.#251     // java/math/BigInteger.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #73 = Methodref          #172.#252     // java/math/BigInteger.intValue:()I\n+   #74 = Methodref          #172.#253     // java/math/BigInteger.divide:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+   #75 = Methodref          #172.#254     // java/math/BigInteger.bitLength:()I\n+   #76 = String             #255          // overflow: numerator too large after multiply\n+   #77 = String             #256          // The fraction to divide by must not be zero\n+   #78 = Methodref          #13.#257      // org/apache/commons/lang3/math/Fraction.getNumerator:()I\n+   #79 = Methodref          #13.#258      // org/apache/commons/lang3/math/Fraction.getDenominator:()I\n+   #80 = Class              #259          // java/lang/StringBuilder\n+   #81 = Methodref          #80.#187      // java/lang/StringBuilder.\"<init>\":()V\n+   #82 = Methodref          #80.#260      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #83 = String             #261          // /\n+   #84 = Methodref          #80.#262      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #85 = Methodref          #80.#263      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #86 = String             #264          // 0\n+   #87 = String             #265          // 1\n+   #88 = String             #266          // -1\n+   #89 = Methodref          #13.#267      // org/apache/commons/lang3/math/Fraction.getProperNumerator:()I\n+   #90 = Methodref          #13.#268      // org/apache/commons/lang3/math/Fraction.getProperWhole:()I\n+   #91 = Methodref          #10.#269      // java/lang/Integer.toString:(I)Ljava/lang/String;\n+   #92 = String             #270          //\n+   #93 = Methodref          #13.#271      // org/apache/commons/lang3/math/Fraction.compareTo:(Lorg/apache/commons/lang3/math/Fraction;)I\n+   #94 = Fieldref           #13.#272      // org/apache/commons/lang3/math/Fraction.ONE_HALF:Lorg/apache/commons/lang3/math/Fraction;\n+   #95 = Fieldref           #13.#273      // org/apache/commons/lang3/math/Fraction.ONE_THIRD:Lorg/apache/commons/lang3/math/Fraction;\n+   #96 = Fieldref           #13.#274      // org/apache/commons/lang3/math/Fraction.TWO_THIRDS:Lorg/apache/commons/lang3/math/Fraction;\n+   #97 = Fieldref           #13.#275      // org/apache/commons/lang3/math/Fraction.ONE_QUARTER:Lorg/apache/commons/lang3/math/Fraction;\n+   #98 = Fieldref           #13.#276      // org/apache/commons/lang3/math/Fraction.TWO_QUARTERS:Lorg/apache/commons/lang3/math/Fraction;\n+   #99 = Fieldref           #13.#277      // org/apache/commons/lang3/math/Fraction.THREE_QUARTERS:Lorg/apache/commons/lang3/math/Fraction;\n+  #100 = Fieldref           #13.#278      // org/apache/commons/lang3/math/Fraction.ONE_FIFTH:Lorg/apache/commons/lang3/math/Fraction;\n+  #101 = Fieldref           #13.#279      // org/apache/commons/lang3/math/Fraction.TWO_FIFTHS:Lorg/apache/commons/lang3/math/Fraction;\n+  #102 = Fieldref           #13.#280      // org/apache/commons/lang3/math/Fraction.THREE_FIFTHS:Lorg/apache/commons/lang3/math/Fraction;\n+  #103 = Fieldref           #13.#281      // org/apache/commons/lang3/math/Fraction.FOUR_FIFTHS:Lorg/apache/commons/lang3/math/Fraction;\n+  #104 = Class              #282          // java/lang/Number\n+  #105 = Class              #283          // java/lang/Comparable\n   #106 = Utf8               serialVersionUID\n   #107 = Utf8               J\n   #108 = Utf8               ConstantValue\n   #109 = Long               65382027393090l\n   #111 = Utf8               ZERO\n   #112 = Utf8               Lorg/apache/commons/lang3/math/Fraction;\n   #113 = Utf8               ONE\n@@ -154,173 +154,171 @@\n   #149 = Utf8               ()J\n   #150 = Utf8               floatValue\n   #151 = Utf8               ()F\n   #152 = Utf8               doubleValue\n   #153 = Utf8               ()D\n   #154 = Utf8               reduce\n   #155 = Utf8               ()Lorg/apache/commons/lang3/math/Fraction;\n-  #156 = Class              #199          // org/apache/commons/lang3/math/Fraction\n-  #157 = Utf8               invert\n-  #158 = Utf8               negate\n-  #159 = Utf8               abs\n-  #160 = Utf8               pow\n-  #161 = Utf8               (I)Lorg/apache/commons/lang3/math/Fraction;\n-  #162 = Utf8               greatestCommonDivisor\n-  #163 = Utf8               (II)I\n-  #164 = Utf8               mulAndCheck\n-  #165 = Utf8               mulPosAndCheck\n-  #166 = Utf8               addAndCheck\n-  #167 = Utf8               subAndCheck\n-  #168 = Utf8               add\n-  #169 = Utf8               (Lorg/apache/commons/lang3/math/Fraction;)Lorg/apache/commons/lang3/math/Fraction;\n-  #170 = Utf8               subtract\n-  #171 = Utf8               addSub\n-  #172 = Utf8               (Lorg/apache/commons/lang3/math/Fraction;Z)Lorg/apache/commons/lang3/math/Fraction;\n-  #173 = Class              #286          // java/math/BigInteger\n-  #174 = Utf8               multiplyBy\n-  #175 = Utf8               divideBy\n-  #176 = Utf8               equals\n-  #177 = Utf8               (Ljava/lang/Object;)Z\n-  #178 = Utf8               compareTo\n-  #179 = Utf8               (Lorg/apache/commons/lang3/math/Fraction;)I\n-  #180 = Utf8               ()Ljava/lang/String;\n-  #181 = Utf8               (Ljava/lang/Object;)I\n-  #182 = Utf8               <clinit>\n-  #183 = Utf8               ()V\n-  #184 = Utf8               Signature\n-  #185 = Utf8               Ljava/lang/Number;Ljava/lang/Comparable<Lorg/apache/commons/lang3/math/Fraction;>;\n-  #186 = Utf8               SourceFile\n-  #187 = Utf8               Fraction.java\n-  #188 = NameAndType        #131:#183     // \"<init>\":()V\n-  #189 = NameAndType        #127:#125     // hashCode:I\n-  #190 = NameAndType        #128:#129     // toString:Ljava/lang/String;\n-  #191 = NameAndType        #130:#129     // toProperString:Ljava/lang/String;\n-  #192 = NameAndType        #124:#125     // numerator:I\n-  #193 = NameAndType        #126:#125     // denominator:I\n-  #194 = Utf8               java/lang/ArithmeticException\n-  #195 = Utf8               The denominator must not be zero\n-  #196 = NameAndType        #131:#287     // \"<init>\":(Ljava/lang/String;)V\n-  #197 = Utf8               java/lang/Integer\n-  #198 = Utf8               overflow: can\\'t negate\n-  #199 = Utf8               org/apache/commons/lang3/math/Fraction\n-  #200 = NameAndType        #131:#132     // \"<init>\":(II)V\n-  #201 = Utf8               The denominator must not be negative\n-  #202 = Utf8               The numerator must not be negative\n-  #203 = Utf8               Numerator too large to represent as an Integer.\n-  #204 = NameAndType        #111:#112     // ZERO:Lorg/apache/commons/lang3/math/Fraction;\n-  #205 = NameAndType        #162:#163     // greatestCommonDivisor:(II)I\n-  #206 = Class              #288          // java/lang/Math\n-  #207 = NameAndType        #159:#289     // abs:(D)D\n-  #208 = NameAndType        #290:#291     // isNaN:(D)Z\n-  #209 = Utf8               The value must not be greater than Integer.MAX_VALUE or NaN\n-  #210 = Utf8               java/lang/Double\n-  #211 = Utf8               Unable to convert double to fraction\n-  #212 = NameAndType        #139:#136     // getReducedFraction:(II)Lorg/apache/commons/lang3/math/Fraction;\n-  #213 = Utf8               The string must not be null\n-  #214 = Utf8               java/lang/Object\n-  #215 = Class              #292          // org/apache/commons/lang3/Validate\n-  #216 = NameAndType        #293:#294     // isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V\n-  #217 = Class              #295          // java/lang/String\n-  #218 = NameAndType        #296:#297     // indexOf:(I)I\n-  #219 = NameAndType        #298:#299     // parseDouble:(Ljava/lang/String;)D\n-  #220 = NameAndType        #135:#140     // getFraction:(D)Lorg/apache/commons/lang3/math/Fraction;\n-  #221 = NameAndType        #300:#301     // substring:(II)Ljava/lang/String;\n-  #222 = NameAndType        #302:#303     // parseInt:(Ljava/lang/String;)I\n-  #223 = NameAndType        #300:#304     // substring:(I)Ljava/lang/String;\n-  #224 = Utf8               java/lang/NumberFormatException\n-  #225 = Utf8               The fraction could not be parsed as the format X Y/Z\n-  #226 = NameAndType        #135:#138     // getFraction:(III)Lorg/apache/commons/lang3/math/Fraction;\n-  #227 = NameAndType        #135:#136     // getFraction:(II)Lorg/apache/commons/lang3/math/Fraction;\n-  #228 = NameAndType        #159:#297     // abs:(I)I\n-  #229 = NameAndType        #176:#177     // equals:(Ljava/lang/Object;)Z\n-  #230 = Utf8               Unable to invert zero.\n-  #231 = Utf8               overflow: can\\'t negate numerator\n-  #232 = Utf8               overflow: too large to negate\n-  #233 = NameAndType        #158:#155     // negate:()Lorg/apache/commons/lang3/math/Fraction;\n-  #234 = NameAndType        #113:#112     // ONE:Lorg/apache/commons/lang3/math/Fraction;\n-  #235 = NameAndType        #157:#155     // invert:()Lorg/apache/commons/lang3/math/Fraction;\n-  #236 = NameAndType        #160:#161     // pow:(I)Lorg/apache/commons/lang3/math/Fraction;\n-  #237 = NameAndType        #174:#169     // multiplyBy:(Lorg/apache/commons/lang3/math/Fraction;)Lorg/apache/commons/lang3/math/Fraction;\n-  #238 = Utf8               overflow: gcd is 2^31\n-  #239 = Utf8               overflow: mul\n-  #240 = Utf8               overflow: mulPos\n-  #241 = Utf8               overflow: add\n-  #242 = NameAndType        #171:#172     // addSub:(Lorg/apache/commons/lang3/math/Fraction;Z)Lorg/apache/commons/lang3/math/Fraction;\n-  #243 = Utf8               The fraction must not be null\n-  #244 = NameAndType        #164:#163     // mulAndCheck:(II)I\n-  #245 = NameAndType        #166:#163     // addAndCheck:(II)I\n-  #246 = NameAndType        #167:#163     // subAndCheck:(II)I\n-  #247 = NameAndType        #165:#163     // mulPosAndCheck:(II)I\n-  #248 = Class              #286          // java/math/BigInteger\n-  #249 = NameAndType        #305:#306     // valueOf:(J)Ljava/math/BigInteger;\n-  #250 = NameAndType        #307:#308     // multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #251 = NameAndType        #168:#308     // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #252 = NameAndType        #170:#308     // subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #253 = NameAndType        #309:#308     // mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #254 = NameAndType        #147:#143     // intValue:()I\n-  #255 = NameAndType        #310:#308     // divide:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #256 = NameAndType        #311:#143     // bitLength:()I\n-  #257 = Utf8               overflow: numerator too large after multiply\n-  #258 = Utf8               The fraction to divide by must not be zero\n-  #259 = NameAndType        #142:#143     // getNumerator:()I\n-  #260 = NameAndType        #144:#143     // getDenominator:()I\n-  #261 = Utf8               java/lang/StringBuilder\n-  #262 = NameAndType        #312:#313     // append:(I)Ljava/lang/StringBuilder;\n-  #263 = Utf8               /\n-  #264 = NameAndType        #312:#314     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #265 = NameAndType        #128:#180     // toString:()Ljava/lang/String;\n-  #266 = Utf8               0\n-  #267 = Utf8               1\n-  #268 = Utf8               -1\n-  #269 = NameAndType        #145:#143     // getProperNumerator:()I\n-  #270 = NameAndType        #146:#143     // getProperWhole:()I\n-  #271 = NameAndType        #128:#304     // toString:(I)Ljava/lang/String;\n-  #272 = Utf8\n-  #273 = NameAndType        #178:#179     // compareTo:(Lorg/apache/commons/lang3/math/Fraction;)I\n-  #274 = NameAndType        #114:#112     // ONE_HALF:Lorg/apache/commons/lang3/math/Fraction;\n-  #275 = NameAndType        #115:#112     // ONE_THIRD:Lorg/apache/commons/lang3/math/Fraction;\n-  #276 = NameAndType        #116:#112     // TWO_THIRDS:Lorg/apache/commons/lang3/math/Fraction;\n-  #277 = NameAndType        #117:#112     // ONE_QUARTER:Lorg/apache/commons/lang3/math/Fraction;\n-  #278 = NameAndType        #118:#112     // TWO_QUARTERS:Lorg/apache/commons/lang3/math/Fraction;\n-  #279 = NameAndType        #119:#112     // THREE_QUARTERS:Lorg/apache/commons/lang3/math/Fraction;\n-  #280 = NameAndType        #120:#112     // ONE_FIFTH:Lorg/apache/commons/lang3/math/Fraction;\n-  #281 = NameAndType        #121:#112     // TWO_FIFTHS:Lorg/apache/commons/lang3/math/Fraction;\n-  #282 = NameAndType        #122:#112     // THREE_FIFTHS:Lorg/apache/commons/lang3/math/Fraction;\n-  #283 = NameAndType        #123:#112     // FOUR_FIFTHS:Lorg/apache/commons/lang3/math/Fraction;\n-  #284 = Utf8               java/lang/Number\n-  #285 = Utf8               java/lang/Comparable\n-  #286 = Utf8               java/math/BigInteger\n-  #287 = Utf8               (Ljava/lang/String;)V\n-  #288 = Utf8               java/lang/Math\n-  #289 = Utf8               (D)D\n-  #290 = Utf8               isNaN\n-  #291 = Utf8               (D)Z\n-  #292 = Utf8               org/apache/commons/lang3/Validate\n-  #293 = Utf8               isTrue\n-  #294 = Utf8               (ZLjava/lang/String;[Ljava/lang/Object;)V\n-  #295 = Utf8               java/lang/String\n-  #296 = Utf8               indexOf\n-  #297 = Utf8               (I)I\n-  #298 = Utf8               parseDouble\n-  #299 = Utf8               (Ljava/lang/String;)D\n-  #300 = Utf8               substring\n-  #301 = Utf8               (II)Ljava/lang/String;\n-  #302 = Utf8               parseInt\n-  #303 = Utf8               (Ljava/lang/String;)I\n-  #304 = Utf8               (I)Ljava/lang/String;\n-  #305 = Utf8               valueOf\n-  #306 = Utf8               (J)Ljava/math/BigInteger;\n-  #307 = Utf8               multiply\n-  #308 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #309 = Utf8               mod\n-  #310 = Utf8               divide\n-  #311 = Utf8               bitLength\n-  #312 = Utf8               append\n-  #313 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #314 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #156 = Utf8               invert\n+  #157 = Utf8               negate\n+  #158 = Utf8               abs\n+  #159 = Utf8               pow\n+  #160 = Utf8               (I)Lorg/apache/commons/lang3/math/Fraction;\n+  #161 = Utf8               greatestCommonDivisor\n+  #162 = Utf8               (II)I\n+  #163 = Utf8               mulAndCheck\n+  #164 = Utf8               mulPosAndCheck\n+  #165 = Utf8               addAndCheck\n+  #166 = Utf8               subAndCheck\n+  #167 = Utf8               add\n+  #168 = Utf8               (Lorg/apache/commons/lang3/math/Fraction;)Lorg/apache/commons/lang3/math/Fraction;\n+  #169 = Utf8               subtract\n+  #170 = Utf8               addSub\n+  #171 = Utf8               (Lorg/apache/commons/lang3/math/Fraction;Z)Lorg/apache/commons/lang3/math/Fraction;\n+  #172 = Class              #284          // java/math/BigInteger\n+  #173 = Utf8               multiplyBy\n+  #174 = Utf8               divideBy\n+  #175 = Utf8               equals\n+  #176 = Utf8               (Ljava/lang/Object;)Z\n+  #177 = Utf8               compareTo\n+  #178 = Utf8               (Lorg/apache/commons/lang3/math/Fraction;)I\n+  #179 = Utf8               ()Ljava/lang/String;\n+  #180 = Utf8               (Ljava/lang/Object;)I\n+  #181 = Utf8               <clinit>\n+  #182 = Utf8               ()V\n+  #183 = Utf8               Signature\n+  #184 = Utf8               Ljava/lang/Number;Ljava/lang/Comparable<Lorg/apache/commons/lang3/math/Fraction;>;\n+  #185 = Utf8               SourceFile\n+  #186 = Utf8               Fraction.java\n+  #187 = NameAndType        #131:#182     // \"<init>\":()V\n+  #188 = NameAndType        #127:#125     // hashCode:I\n+  #189 = NameAndType        #128:#129     // toString:Ljava/lang/String;\n+  #190 = NameAndType        #130:#129     // toProperString:Ljava/lang/String;\n+  #191 = NameAndType        #124:#125     // numerator:I\n+  #192 = NameAndType        #126:#125     // denominator:I\n+  #193 = Utf8               java/lang/ArithmeticException\n+  #194 = Utf8               The denominator must not be zero\n+  #195 = NameAndType        #131:#285     // \"<init>\":(Ljava/lang/String;)V\n+  #196 = Utf8               java/lang/Integer\n+  #197 = Utf8               overflow: can\\'t negate\n+  #198 = Utf8               org/apache/commons/lang3/math/Fraction\n+  #199 = NameAndType        #131:#132     // \"<init>\":(II)V\n+  #200 = Utf8               The denominator must not be negative\n+  #201 = Utf8               The numerator must not be negative\n+  #202 = Utf8               Numerator too large to represent as an Integer.\n+  #203 = NameAndType        #111:#112     // ZERO:Lorg/apache/commons/lang3/math/Fraction;\n+  #204 = NameAndType        #161:#162     // greatestCommonDivisor:(II)I\n+  #205 = Class              #286          // java/lang/Math\n+  #206 = NameAndType        #158:#287     // abs:(D)D\n+  #207 = NameAndType        #288:#289     // isNaN:(D)Z\n+  #208 = Utf8               The value must not be greater than Integer.MAX_VALUE or NaN\n+  #209 = Utf8               java/lang/Double\n+  #210 = Utf8               Unable to convert double to fraction\n+  #211 = NameAndType        #139:#136     // getReducedFraction:(II)Lorg/apache/commons/lang3/math/Fraction;\n+  #212 = Utf8               The string must not be null\n+  #213 = Utf8               java/lang/Object\n+  #214 = Class              #290          // org/apache/commons/lang3/Validate\n+  #215 = NameAndType        #291:#292     // isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V\n+  #216 = Class              #293          // java/lang/String\n+  #217 = NameAndType        #294:#295     // indexOf:(I)I\n+  #218 = NameAndType        #296:#297     // parseDouble:(Ljava/lang/String;)D\n+  #219 = NameAndType        #135:#140     // getFraction:(D)Lorg/apache/commons/lang3/math/Fraction;\n+  #220 = NameAndType        #298:#299     // substring:(II)Ljava/lang/String;\n+  #221 = NameAndType        #300:#301     // parseInt:(Ljava/lang/String;)I\n+  #222 = NameAndType        #298:#302     // substring:(I)Ljava/lang/String;\n+  #223 = Utf8               java/lang/NumberFormatException\n+  #224 = Utf8               The fraction could not be parsed as the format X Y/Z\n+  #225 = NameAndType        #135:#138     // getFraction:(III)Lorg/apache/commons/lang3/math/Fraction;\n+  #226 = NameAndType        #135:#136     // getFraction:(II)Lorg/apache/commons/lang3/math/Fraction;\n+  #227 = NameAndType        #158:#295     // abs:(I)I\n+  #228 = NameAndType        #175:#176     // equals:(Ljava/lang/Object;)Z\n+  #229 = Utf8               Unable to invert zero.\n+  #230 = Utf8               overflow: can\\'t negate numerator\n+  #231 = Utf8               overflow: too large to negate\n+  #232 = NameAndType        #157:#155     // negate:()Lorg/apache/commons/lang3/math/Fraction;\n+  #233 = NameAndType        #113:#112     // ONE:Lorg/apache/commons/lang3/math/Fraction;\n+  #234 = NameAndType        #156:#155     // invert:()Lorg/apache/commons/lang3/math/Fraction;\n+  #235 = NameAndType        #159:#160     // pow:(I)Lorg/apache/commons/lang3/math/Fraction;\n+  #236 = NameAndType        #173:#168     // multiplyBy:(Lorg/apache/commons/lang3/math/Fraction;)Lorg/apache/commons/lang3/math/Fraction;\n+  #237 = Utf8               overflow: gcd is 2^31\n+  #238 = Utf8               overflow: mul\n+  #239 = Utf8               overflow: mulPos\n+  #240 = Utf8               overflow: add\n+  #241 = NameAndType        #170:#171     // addSub:(Lorg/apache/commons/lang3/math/Fraction;Z)Lorg/apache/commons/lang3/math/Fraction;\n+  #242 = Utf8               The fraction must not be null\n+  #243 = NameAndType        #163:#162     // mulAndCheck:(II)I\n+  #244 = NameAndType        #165:#162     // addAndCheck:(II)I\n+  #245 = NameAndType        #166:#162     // subAndCheck:(II)I\n+  #246 = NameAndType        #164:#162     // mulPosAndCheck:(II)I\n+  #247 = NameAndType        #303:#304     // valueOf:(J)Ljava/math/BigInteger;\n+  #248 = NameAndType        #305:#306     // multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #249 = NameAndType        #167:#306     // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #250 = NameAndType        #169:#306     // subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #251 = NameAndType        #307:#306     // mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #252 = NameAndType        #147:#143     // intValue:()I\n+  #253 = NameAndType        #308:#306     // divide:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #254 = NameAndType        #309:#143     // bitLength:()I\n+  #255 = Utf8               overflow: numerator too large after multiply\n+  #256 = Utf8               The fraction to divide by must not be zero\n+  #257 = NameAndType        #142:#143     // getNumerator:()I\n+  #258 = NameAndType        #144:#143     // getDenominator:()I\n+  #259 = Utf8               java/lang/StringBuilder\n+  #260 = NameAndType        #310:#311     // append:(I)Ljava/lang/StringBuilder;\n+  #261 = Utf8               /\n+  #262 = NameAndType        #310:#312     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #263 = NameAndType        #128:#179     // toString:()Ljava/lang/String;\n+  #264 = Utf8               0\n+  #265 = Utf8               1\n+  #266 = Utf8               -1\n+  #267 = NameAndType        #145:#143     // getProperNumerator:()I\n+  #268 = NameAndType        #146:#143     // getProperWhole:()I\n+  #269 = NameAndType        #128:#302     // toString:(I)Ljava/lang/String;\n+  #270 = Utf8\n+  #271 = NameAndType        #177:#178     // compareTo:(Lorg/apache/commons/lang3/math/Fraction;)I\n+  #272 = NameAndType        #114:#112     // ONE_HALF:Lorg/apache/commons/lang3/math/Fraction;\n+  #273 = NameAndType        #115:#112     // ONE_THIRD:Lorg/apache/commons/lang3/math/Fraction;\n+  #274 = NameAndType        #116:#112     // TWO_THIRDS:Lorg/apache/commons/lang3/math/Fraction;\n+  #275 = NameAndType        #117:#112     // ONE_QUARTER:Lorg/apache/commons/lang3/math/Fraction;\n+  #276 = NameAndType        #118:#112     // TWO_QUARTERS:Lorg/apache/commons/lang3/math/Fraction;\n+  #277 = NameAndType        #119:#112     // THREE_QUARTERS:Lorg/apache/commons/lang3/math/Fraction;\n+  #278 = NameAndType        #120:#112     // ONE_FIFTH:Lorg/apache/commons/lang3/math/Fraction;\n+  #279 = NameAndType        #121:#112     // TWO_FIFTHS:Lorg/apache/commons/lang3/math/Fraction;\n+  #280 = NameAndType        #122:#112     // THREE_FIFTHS:Lorg/apache/commons/lang3/math/Fraction;\n+  #281 = NameAndType        #123:#112     // FOUR_FIFTHS:Lorg/apache/commons/lang3/math/Fraction;\n+  #282 = Utf8               java/lang/Number\n+  #283 = Utf8               java/lang/Comparable\n+  #284 = Utf8               java/math/BigInteger\n+  #285 = Utf8               (Ljava/lang/String;)V\n+  #286 = Utf8               java/lang/Math\n+  #287 = Utf8               (D)D\n+  #288 = Utf8               isNaN\n+  #289 = Utf8               (D)Z\n+  #290 = Utf8               org/apache/commons/lang3/Validate\n+  #291 = Utf8               isTrue\n+  #292 = Utf8               (ZLjava/lang/String;[Ljava/lang/Object;)V\n+  #293 = Utf8               java/lang/String\n+  #294 = Utf8               indexOf\n+  #295 = Utf8               (I)I\n+  #296 = Utf8               parseDouble\n+  #297 = Utf8               (Ljava/lang/String;)D\n+  #298 = Utf8               substring\n+  #299 = Utf8               (II)Ljava/lang/String;\n+  #300 = Utf8               parseInt\n+  #301 = Utf8               (Ljava/lang/String;)I\n+  #302 = Utf8               (I)Ljava/lang/String;\n+  #303 = Utf8               valueOf\n+  #304 = Utf8               (J)Ljava/math/BigInteger;\n+  #305 = Utf8               multiply\n+  #306 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #307 = Utf8               mod\n+  #308 = Utf8               divide\n+  #309 = Utf8               bitLength\n+  #310 = Utf8               append\n+  #311 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #312 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n {\n   private static final long serialVersionUID = 65382027393090l;\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long 65382027393090l\n \n   public static final org.apache.commons.lang3.math.Fraction ZERO;\n@@ -2417,9 +2415,9 @@\n         line 72: 72\n         line 76: 84\n         line 80: 96\n         line 84: 108\n         line 88: 120\n         line 92: 132\n }\n-Signature: #185                         // Ljava/lang/Number;Ljava/lang/Comparable<Lorg/apache/commons/lang3/math/Fraction;>;\n+Signature: #184                         // Ljava/lang/Number;Ljava/lang/Comparable<Lorg/apache/commons/lang3/math/Fraction;>;\n SourceFile: \"Fraction.java\"\n"}]}
