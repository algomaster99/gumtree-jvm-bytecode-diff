{"diffoscope-json-version": 1, "source1": "first/Pack200CompressorInputStream.class", "source2": "second/Pack200CompressorInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -16,75 +16,75 @@\n public class Pack200CompressorInputStream extends CompressorInputStream\n {\n     private static final byte[] CAFE_DOOD;\n     private static final int SIG_LENGTH;\n     private final InputStream originalInput;\n     private final StreamBridge streamBridge;\n     \n-    public static boolean matches(final byte[] signature, final int length) {\n-        if (length < Pack200CompressorInputStream.SIG_LENGTH) {\n+    public static boolean matches(final byte[] array, final int n) {\n+        if (n < Pack200CompressorInputStream.SIG_LENGTH) {\n             return false;\n         }\n         for (int i = 0; i < Pack200CompressorInputStream.SIG_LENGTH; ++i) {\n-            if (signature[i] != Pack200CompressorInputStream.CAFE_DOOD[i]) {\n+            if (array[i] != Pack200CompressorInputStream.CAFE_DOOD[i]) {\n                 return false;\n             }\n         }\n         return true;\n     }\n     \n-    public Pack200CompressorInputStream(final File f) throws IOException {\n-        this(f, Pack200Strategy.IN_MEMORY);\n+    public Pack200CompressorInputStream(final File file) throws IOException {\n+        this(file, Pack200Strategy.IN_MEMORY);\n     }\n     \n-    public Pack200CompressorInputStream(final File f, final Map<String, String> props) throws IOException {\n-        this(f, Pack200Strategy.IN_MEMORY, props);\n+    public Pack200CompressorInputStream(final File file, final Map<String, String> map) throws IOException {\n+        this(file, Pack200Strategy.IN_MEMORY, map);\n     }\n     \n-    public Pack200CompressorInputStream(final File f, final Pack200Strategy mode) throws IOException {\n-        this(null, f, mode, null);\n+    public Pack200CompressorInputStream(final File file, final Pack200Strategy pack200Strategy) throws IOException {\n+        this(null, file, pack200Strategy, null);\n     }\n     \n-    public Pack200CompressorInputStream(final File f, final Pack200Strategy mode, final Map<String, String> props) throws IOException {\n-        this(null, f, mode, props);\n+    public Pack200CompressorInputStream(final File file, final Pack200Strategy pack200Strategy, final Map<String, String> map) throws IOException {\n+        this(null, file, pack200Strategy, map);\n     }\n     \n-    public Pack200CompressorInputStream(final InputStream in) throws IOException {\n-        this(in, Pack200Strategy.IN_MEMORY);\n+    public Pack200CompressorInputStream(final InputStream inputStream) throws IOException {\n+        this(inputStream, Pack200Strategy.IN_MEMORY);\n     }\n     \n-    private Pack200CompressorInputStream(final InputStream in, final File f, final Pack200Strategy mode, final Map<String, String> props) throws IOException {\n-        this.originalInput = in;\n-        this.streamBridge = mode.newStreamBridge();\n-        try (final JarOutputStream jarOut = new JarOutputStream((OutputStream)this.streamBridge)) {\n-            final Pack200.Unpacker u = Pack200.newUnpacker();\n-            if (props != null) {\n-                u.properties().putAll(props);\n+    private Pack200CompressorInputStream(final InputStream originalInput, final File file, final Pack200Strategy pack200Strategy, final Map<String, String> map) throws IOException {\n+        this.originalInput = originalInput;\n+        this.streamBridge = pack200Strategy.newStreamBridge();\n+        try (final JarOutputStream jarOutputStream = new JarOutputStream((OutputStream)this.streamBridge)) {\n+            final Pack200.Unpacker unpacker = Pack200.newUnpacker();\n+            if (map != null) {\n+                unpacker.properties().putAll(map);\n             }\n-            if (f == null) {\n-                try (final CloseShieldFilterInputStream closeShield = new CloseShieldFilterInputStream(in)) {\n-                    u.unpack((InputStream)closeShield, jarOut);\n+            if (file == null) {\n+                try (final CloseShieldFilterInputStream closeShieldFilterInputStream = new CloseShieldFilterInputStream(originalInput)) {\n+                    unpacker.unpack((InputStream)closeShieldFilterInputStream, jarOutputStream);\n                 }\n             }\n             else {\n-                u.unpack(f, jarOut);\n+                unpacker.unpack(file, jarOutputStream);\n             }\n         }\n     }\n     \n-    public Pack200CompressorInputStream(final InputStream in, final Map<String, String> props) throws IOException {\n-        this(in, Pack200Strategy.IN_MEMORY, props);\n+    public Pack200CompressorInputStream(final InputStream inputStream, final Map<String, String> map) throws IOException {\n+        this(inputStream, Pack200Strategy.IN_MEMORY, map);\n     }\n     \n-    public Pack200CompressorInputStream(final InputStream in, final Pack200Strategy mode) throws IOException {\n-        this(in, null, mode, null);\n+    public Pack200CompressorInputStream(final InputStream inputStream, final Pack200Strategy pack200Strategy) throws IOException {\n+        this(inputStream, null, pack200Strategy, null);\n     }\n     \n-    public Pack200CompressorInputStream(final InputStream in, final Pack200Strategy mode, final Map<String, String> props) throws IOException {\n-        this(in, null, mode, props);\n+    public Pack200CompressorInputStream(final InputStream inputStream, final Pack200Strategy pack200Strategy, final Map<String, String> map) throws IOException {\n+        this(inputStream, null, pack200Strategy, map);\n     }\n     \n     public int available() throws IOException {\n         return this.streamBridge.getInput().available();\n     }\n     \n     public void close() throws IOException {\n@@ -94,20 +94,20 @@\n         finally {\n             if (this.originalInput != null) {\n                 this.originalInput.close();\n             }\n         }\n     }\n     \n-    public synchronized void mark(final int limit) {\n+    public synchronized void mark(final int readlimit) {\n         try {\n-            this.streamBridge.getInput().mark(limit);\n+            this.streamBridge.getInput().mark(readlimit);\n         }\n-        catch (final IOException ex) {\n-            throw new UncheckedIOException(ex);\n+        catch (final IOException cause) {\n+            throw new UncheckedIOException(cause);\n         }\n     }\n     \n     public boolean markSupported() {\n         try {\n             return this.streamBridge.getInput().markSupported();\n         }\n@@ -120,24 +120,24 @@\n         return this.streamBridge.getInput().read();\n     }\n     \n     public int read(final byte[] b) throws IOException {\n         return this.streamBridge.getInput().read(b);\n     }\n     \n-    public int read(final byte[] b, final int off, final int count) throws IOException {\n-        return this.streamBridge.getInput().read(b, off, count);\n+    public int read(final byte[] b, final int off, final int len) throws IOException {\n+        return this.streamBridge.getInput().read(b, off, len);\n     }\n     \n     public synchronized void reset() throws IOException {\n         this.streamBridge.getInput().reset();\n     }\n     \n-    public long skip(final long count) throws IOException {\n-        return IOUtils.skip(this.streamBridge.getInput(), count);\n+    public long skip(final long n) throws IOException {\n+        return IOUtils.skip(this.streamBridge.getInput(), n);\n     }\n     \n     static {\n         CAFE_DOOD = new byte[] { -54, -2, -48, 13 };\n         SIG_LENGTH = Pack200CompressorInputStream.CAFE_DOOD.length;\n     }\n }\n"}]}
