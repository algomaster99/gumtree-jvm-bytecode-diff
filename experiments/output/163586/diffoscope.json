{"diffoscope-json-version": 1, "source1": "first/BoundedSeekableByteChannelInputStream.class", "source2": "second/BoundedSeekableByteChannelInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,33 +1,33 @@\n-  SHA-256 checksum f9a164cd5be724bad2b9f4610b4916e5e692dd26bb8ac6d9490b57963d0b847b\n+  SHA-256 checksum 42349e0b89fec1d7dbc3d8e6b66832f9b9c277683d61911ebe0bf1dc7e5bdf99\n   Compiled from \"BoundedSeekableByteChannelInputStream.java\"\n class org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream extends java.io.InputStream\n   minor version: 0\n   major version: 51\n   flags: (0x0020) ACC_SUPER\n   this_class: #4                          // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream\n   super_class: #17                        // java/io/InputStream\n   interfaces: 0, fields: 4, methods: 5, attributes: 1\n Constant pool:\n-   #1 = Methodref          #17.#57        // java/io/InputStream.\"<init>\":()V\n-   #2 = Fieldref           #4.#58         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.channel:Ljava/nio/channels/SeekableByteChannel;\n-   #3 = Fieldref           #4.#59         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.bytesRemaining:J\n-   #4 = Class              #60            // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream\n+   #1 = Methodref          #17.#56        // java/io/InputStream.\"<init>\":()V\n+   #2 = Fieldref           #4.#57         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.channel:Ljava/nio/channels/SeekableByteChannel;\n+   #3 = Fieldref           #4.#58         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.bytesRemaining:J\n+   #4 = Class              #59            // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream\n    #5 = Long               8192l\n-   #7 = Methodref          #61.#62        // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-   #8 = Fieldref           #4.#63         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.buffer:Ljava/nio/ByteBuffer;\n-   #9 = Methodref          #4.#64         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.read:(I)I\n-  #10 = Methodref          #61.#65        // java/nio/ByteBuffer.get:()B\n-  #11 = Methodref          #61.#66        // java/nio/ByteBuffer.capacity:()I\n-  #12 = InterfaceMethodref #67.#68        // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n-  #13 = Methodref          #61.#69        // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n-  #14 = Methodref          #61.#70        // java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n-  #15 = Methodref          #61.#71        // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n-  #16 = Methodref          #72.#73        // java/nio/Buffer.limit:(I)Ljava/nio/Buffer;\n-  #17 = Class              #74            // java/io/InputStream\n+   #7 = Methodref          #50.#60        // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+   #8 = Fieldref           #4.#61         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.buffer:Ljava/nio/ByteBuffer;\n+   #9 = Methodref          #4.#62         // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.read:(I)I\n+  #10 = Methodref          #50.#63        // java/nio/ByteBuffer.get:()B\n+  #11 = Methodref          #50.#64        // java/nio/ByteBuffer.capacity:()I\n+  #12 = InterfaceMethodref #37.#65        // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+  #13 = Methodref          #50.#66        // java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+  #14 = Methodref          #50.#67        // java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n+  #15 = Methodref          #50.#68        // java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+  #16 = Methodref          #50.#69        // java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n+  #17 = Class              #70            // java/io/InputStream\n   #18 = Utf8               MAX_BUF_LEN\n   #19 = Utf8               I\n   #20 = Utf8               ConstantValue\n   #21 = Integer            8192\n   #22 = Utf8               buffer\n   #23 = Utf8               Ljava/nio/ByteBuffer;\n   #24 = Utf8               channel\n@@ -39,68 +39,62 @@\n   #30 = Utf8               Code\n   #31 = Utf8               LineNumberTable\n   #32 = Utf8               LocalVariableTable\n   #33 = Utf8               this\n   #34 = Utf8               Lorg/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream;\n   #35 = Utf8               size\n   #36 = Utf8               StackMapTable\n-  #37 = Class              #60            // org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream\n-  #38 = Class              #75            // java/nio/channels/SeekableByteChannel\n-  #39 = Utf8               read\n-  #40 = Utf8               ()I\n-  #41 = Utf8               Exceptions\n-  #42 = Class              #76            // java/io/IOException\n-  #43 = Utf8               ([BII)I\n-  #44 = Utf8               bytesRead\n-  #45 = Utf8               buf\n-  #46 = Utf8               b\n-  #47 = Utf8               [B\n-  #48 = Utf8               off\n-  #49 = Utf8               len\n-  #50 = Utf8               bytesToRead\n-  #51 = Class              #77            // java/nio/ByteBuffer\n-  #52 = Utf8               (I)I\n-  #53 = Utf8               close\n-  #54 = Utf8               ()V\n-  #55 = Utf8               SourceFile\n-  #56 = Utf8               BoundedSeekableByteChannelInputStream.java\n-  #57 = NameAndType        #28:#54        // \"<init>\":()V\n-  #58 = NameAndType        #24:#25        // channel:Ljava/nio/channels/SeekableByteChannel;\n-  #59 = NameAndType        #26:#27        // bytesRemaining:J\n-  #60 = Utf8               org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream\n-  #61 = Class              #77            // java/nio/ByteBuffer\n-  #62 = NameAndType        #78:#79        // allocate:(I)Ljava/nio/ByteBuffer;\n-  #63 = NameAndType        #22:#23        // buffer:Ljava/nio/ByteBuffer;\n-  #64 = NameAndType        #39:#52        // read:(I)I\n-  #65 = NameAndType        #80:#81        // get:()B\n-  #66 = NameAndType        #82:#40        // capacity:()I\n-  #67 = Class              #75            // java/nio/channels/SeekableByteChannel\n-  #68 = NameAndType        #39:#83        // read:(Ljava/nio/ByteBuffer;)I\n-  #69 = NameAndType        #84:#85        // flip:()Ljava/nio/Buffer;\n-  #70 = NameAndType        #80:#86        // get:([BII)Ljava/nio/ByteBuffer;\n-  #71 = NameAndType        #87:#85        // rewind:()Ljava/nio/Buffer;\n-  #72 = Class              #88            // java/nio/Buffer\n-  #73 = NameAndType        #89:#90        // limit:(I)Ljava/nio/Buffer;\n-  #74 = Utf8               java/io/InputStream\n-  #75 = Utf8               java/nio/channels/SeekableByteChannel\n-  #76 = Utf8               java/io/IOException\n-  #77 = Utf8               java/nio/ByteBuffer\n-  #78 = Utf8               allocate\n-  #79 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #80 = Utf8               get\n-  #81 = Utf8               ()B\n-  #82 = Utf8               capacity\n-  #83 = Utf8               (Ljava/nio/ByteBuffer;)I\n-  #84 = Utf8               flip\n-  #85 = Utf8               ()Ljava/nio/Buffer;\n-  #86 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n-  #87 = Utf8               rewind\n-  #88 = Utf8               java/nio/Buffer\n-  #89 = Utf8               limit\n-  #90 = Utf8               (I)Ljava/nio/Buffer;\n+  #37 = Class              #71            // java/nio/channels/SeekableByteChannel\n+  #38 = Utf8               read\n+  #39 = Utf8               ()I\n+  #40 = Utf8               Exceptions\n+  #41 = Class              #72            // java/io/IOException\n+  #42 = Utf8               ([BII)I\n+  #43 = Utf8               bytesRead\n+  #44 = Utf8               buf\n+  #45 = Utf8               b\n+  #46 = Utf8               [B\n+  #47 = Utf8               off\n+  #48 = Utf8               len\n+  #49 = Utf8               bytesToRead\n+  #50 = Class              #73            // java/nio/ByteBuffer\n+  #51 = Utf8               (I)I\n+  #52 = Utf8               close\n+  #53 = Utf8               ()V\n+  #54 = Utf8               SourceFile\n+  #55 = Utf8               BoundedSeekableByteChannelInputStream.java\n+  #56 = NameAndType        #28:#53        // \"<init>\":()V\n+  #57 = NameAndType        #24:#25        // channel:Ljava/nio/channels/SeekableByteChannel;\n+  #58 = NameAndType        #26:#27        // bytesRemaining:J\n+  #59 = Utf8               org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream\n+  #60 = NameAndType        #74:#75        // allocate:(I)Ljava/nio/ByteBuffer;\n+  #61 = NameAndType        #22:#23        // buffer:Ljava/nio/ByteBuffer;\n+  #62 = NameAndType        #38:#51        // read:(I)I\n+  #63 = NameAndType        #76:#77        // get:()B\n+  #64 = NameAndType        #78:#39        // capacity:()I\n+  #65 = NameAndType        #38:#79        // read:(Ljava/nio/ByteBuffer;)I\n+  #66 = NameAndType        #80:#81        // flip:()Ljava/nio/ByteBuffer;\n+  #67 = NameAndType        #76:#82        // get:([BII)Ljava/nio/ByteBuffer;\n+  #68 = NameAndType        #83:#81        // rewind:()Ljava/nio/ByteBuffer;\n+  #69 = NameAndType        #84:#75        // limit:(I)Ljava/nio/ByteBuffer;\n+  #70 = Utf8               java/io/InputStream\n+  #71 = Utf8               java/nio/channels/SeekableByteChannel\n+  #72 = Utf8               java/io/IOException\n+  #73 = Utf8               java/nio/ByteBuffer\n+  #74 = Utf8               allocate\n+  #75 = Utf8               (I)Ljava/nio/ByteBuffer;\n+  #76 = Utf8               get\n+  #77 = Utf8               ()B\n+  #78 = Utf8               capacity\n+  #79 = Utf8               (Ljava/nio/ByteBuffer;)I\n+  #80 = Utf8               flip\n+  #81 = Utf8               ()Ljava/nio/ByteBuffer;\n+  #82 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n+  #83 = Utf8               rewind\n+  #84 = Utf8               limit\n {\n   private static final int MAX_BUF_LEN = 8192;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 8192\n \n   private final java.nio.ByteBuffer buffer;\n@@ -262,15 +256,15 @@\n         66: astore        6\n         68: aload_0\n         69: getfield      #2                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n         72: aload         6\n         74: invokeinterface #12,  2           // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n         79: istore        5\n         81: aload         6\n-        83: invokevirtual #13                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+        83: invokevirtual #13                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n         86: pop\n         87: iload         5\n         89: iflt          114\n         92: aload         6\n         94: aload_1\n         95: iload_2\n         96: iload         5\n@@ -328,27 +322,27 @@\n   private int read(int) throws java.io.IOException;\n     descriptor: (I)I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=3, args_size=2\n          0: aload_0\n          1: getfield      #8                  // Field buffer:Ljava/nio/ByteBuffer;\n-         4: invokevirtual #15                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+         4: invokevirtual #15                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n          7: iload_1\n-         8: invokevirtual #16                 // Method java/nio/Buffer.limit:(I)Ljava/nio/Buffer;\n+         8: invokevirtual #16                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n         11: pop\n         12: aload_0\n         13: getfield      #2                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n         16: aload_0\n         17: getfield      #8                  // Field buffer:Ljava/nio/ByteBuffer;\n         20: invokeinterface #12,  2           // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n         25: istore_2\n         26: aload_0\n         27: getfield      #8                  // Field buffer:Ljava/nio/ByteBuffer;\n-        30: invokevirtual #13                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+        30: invokevirtual #13                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n         33: pop\n         34: iload_2\n         35: ireturn\n       LineNumberTable:\n         line 82: 0\n         line 83: 12\n         line 84: 26\n"}]}
