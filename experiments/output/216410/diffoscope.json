{"diffoscope-json-version": 1, "source1": "first/AnnotationEntryGen.class", "source2": "second/AnnotationEntryGen.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -25,262 +25,263 @@\n {\n     static final AnnotationEntryGen[] EMPTY_ARRAY;\n     private int typeIndex;\n     private List<ElementValuePairGen> evs;\n     private final ConstantPoolGen cpool;\n     private boolean isRuntimeVisible;\n     \n-    static Attribute[] getAnnotationAttributes(final ConstantPoolGen cp, final AnnotationEntryGen[] annotationEntryGens) {\n-        if (annotationEntryGens.length == 0) {\n+    static Attribute[] getAnnotationAttributes(final ConstantPoolGen constantPoolGen, final AnnotationEntryGen[] array) {\n+        if (array.length == 0) {\n             return Attribute.EMPTY_ARRAY;\n         }\n         try {\n-            int countVisible = 0;\n-            int countInvisible = 0;\n-            for (final AnnotationEntryGen a : annotationEntryGens) {\n-                if (a.isRuntimeVisible()) {\n-                    ++countVisible;\n+            int v = 0;\n+            int v2 = 0;\n+            for (int length = array.length, i = 0; i < length; ++i) {\n+                if (array[i].isRuntimeVisible()) {\n+                    ++v;\n                 }\n                 else {\n-                    ++countInvisible;\n+                    ++v2;\n                 }\n             }\n-            final ByteArrayOutputStream rvaBytes = new ByteArrayOutputStream();\n-            final ByteArrayOutputStream riaBytes = new ByteArrayOutputStream();\n-            try (final DataOutputStream rvaDos = new DataOutputStream(rvaBytes);\n-                 final DataOutputStream riaDos = new DataOutputStream(riaBytes)) {\n-                rvaDos.writeShort(countVisible);\n-                riaDos.writeShort(countInvisible);\n-                for (final AnnotationEntryGen a2 : annotationEntryGens) {\n-                    if (a2.isRuntimeVisible()) {\n-                        a2.dump(rvaDos);\n+            final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+            final ByteArrayOutputStream out2 = new ByteArrayOutputStream();\n+            try (final DataOutputStream dataOutputStream = new DataOutputStream(out);\n+                 final DataOutputStream dataOutputStream2 = new DataOutputStream(out2)) {\n+                dataOutputStream.writeShort(v);\n+                dataOutputStream2.writeShort(v2);\n+                for (final AnnotationEntryGen annotationEntryGen : array) {\n+                    if (annotationEntryGen.isRuntimeVisible()) {\n+                        annotationEntryGen.dump(dataOutputStream);\n                     }\n                     else {\n-                        a2.dump(riaDos);\n+                        annotationEntryGen.dump(dataOutputStream2);\n                     }\n                 }\n             }\n-            final byte[] rvaData = rvaBytes.toByteArray();\n-            final byte[] riaData = riaBytes.toByteArray();\n-            int rvaIndex = -1;\n-            int riaIndex = -1;\n-            if (rvaData.length > 2) {\n-                rvaIndex = cp.addUtf8(\"RuntimeVisibleAnnotations\");\n-            }\n-            if (riaData.length > 2) {\n-                riaIndex = cp.addUtf8(\"RuntimeInvisibleAnnotations\");\n-            }\n-            final List<Attribute> newAttributes = new ArrayList<Attribute>();\n-            if (rvaData.length > 2) {\n-                newAttributes.add((Attribute)new RuntimeVisibleAnnotations(rvaIndex, rvaData.length, (DataInput)new DataInputStream(new ByteArrayInputStream(rvaData)), cp.getConstantPool()));\n+            final byte[] byteArray = out.toByteArray();\n+            final byte[] byteArray2 = out2.toByteArray();\n+            int addUtf8 = -1;\n+            int addUtf9 = -1;\n+            if (byteArray.length > 2) {\n+                addUtf8 = constantPoolGen.addUtf8(\"RuntimeVisibleAnnotations\");\n+            }\n+            if (byteArray2.length > 2) {\n+                addUtf9 = constantPoolGen.addUtf8(\"RuntimeInvisibleAnnotations\");\n+            }\n+            final ArrayList list = new ArrayList();\n+            if (byteArray.length > 2) {\n+                list.add(new RuntimeVisibleAnnotations(addUtf8, byteArray.length, (DataInput)new DataInputStream(new ByteArrayInputStream(byteArray)), constantPoolGen.getConstantPool()));\n             }\n-            if (riaData.length > 2) {\n-                newAttributes.add((Attribute)new RuntimeInvisibleAnnotations(riaIndex, riaData.length, (DataInput)new DataInputStream(new ByteArrayInputStream(riaData)), cp.getConstantPool()));\n+            if (byteArray2.length > 2) {\n+                list.add(new RuntimeInvisibleAnnotations(addUtf9, byteArray2.length, (DataInput)new DataInputStream(new ByteArrayInputStream(byteArray2)), constantPoolGen.getConstantPool()));\n             }\n-            return newAttributes.toArray(Attribute.EMPTY_ARRAY);\n+            return (Attribute[])list.toArray(Attribute.EMPTY_ARRAY);\n         }\n-        catch (final IOException e) {\n+        catch (final IOException ex) {\n             System.err.println(\"IOException whilst processing annotations\");\n-            e.printStackTrace();\n+            ex.printStackTrace();\n             return null;\n         }\n     }\n     \n-    static Attribute[] getParameterAnnotationAttributes(final ConstantPoolGen cp, final List<AnnotationEntryGen>[] vec) {\n-        final int[] visCount = new int[vec.length];\n-        int totalVisCount = 0;\n-        final int[] invisCount = new int[vec.length];\n-        int totalInvisCount = 0;\n+    static Attribute[] getParameterAnnotationAttributes(final ConstantPoolGen constantPoolGen, final List<AnnotationEntryGen>[] array) {\n+        final int[] array2 = new int[array.length];\n+        int n = 0;\n+        final int[] array3 = new int[array.length];\n+        int n2 = 0;\n         try {\n-            for (int i = 0; i < vec.length; ++i) {\n-                if (vec[i] != null) {\n-                    for (final AnnotationEntryGen element : vec[i]) {\n-                        if (element.isRuntimeVisible()) {\n-                            final int[] array = visCount;\n-                            final int n = i;\n-                            ++array[n];\n-                            ++totalVisCount;\n+            for (int i = 0; i < array.length; ++i) {\n+                if (array[i] != null) {\n+                    final Iterator<AnnotationEntryGen> iterator = array[i].iterator();\n+                    while (iterator.hasNext()) {\n+                        if (((AnnotationEntryGen)iterator.next()).isRuntimeVisible()) {\n+                            final int[] array4 = array2;\n+                            final int n3 = i;\n+                            ++array4[n3];\n+                            ++n;\n                         }\n                         else {\n-                            final int[] array2 = invisCount;\n-                            final int n2 = i;\n-                            ++array2[n2];\n-                            ++totalInvisCount;\n+                            final int[] array5 = array3;\n+                            final int n4 = i;\n+                            ++array5[n4];\n+                            ++n2;\n                         }\n                     }\n                 }\n             }\n-            final ByteArrayOutputStream rvaBytes = new ByteArrayOutputStream();\n-            try (final DataOutputStream rvaDos = new DataOutputStream(rvaBytes)) {\n-                rvaDos.writeByte(vec.length);\n-                for (int j = 0; j < vec.length; ++j) {\n-                    rvaDos.writeShort(visCount[j]);\n-                    if (visCount[j] > 0) {\n-                        for (final AnnotationEntryGen element2 : vec[j]) {\n-                            if (element2.isRuntimeVisible()) {\n-                                element2.dump(rvaDos);\n+            final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+            try (final DataOutputStream dataOutputStream = new DataOutputStream(out)) {\n+                dataOutputStream.writeByte(array.length);\n+                for (int j = 0; j < array.length; ++j) {\n+                    dataOutputStream.writeShort(array2[j]);\n+                    if (array2[j] > 0) {\n+                        for (final AnnotationEntryGen annotationEntryGen : array[j]) {\n+                            if (annotationEntryGen.isRuntimeVisible()) {\n+                                annotationEntryGen.dump(dataOutputStream);\n                             }\n                         }\n                     }\n                 }\n             }\n-            final ByteArrayOutputStream riaBytes = new ByteArrayOutputStream();\n-            try (final DataOutputStream riaDos = new DataOutputStream(riaBytes)) {\n-                riaDos.writeByte(vec.length);\n-                for (int k = 0; k < vec.length; ++k) {\n-                    riaDos.writeShort(invisCount[k]);\n-                    if (invisCount[k] > 0) {\n-                        for (final AnnotationEntryGen element3 : vec[k]) {\n-                            if (!element3.isRuntimeVisible()) {\n-                                element3.dump(riaDos);\n+            final ByteArrayOutputStream out2 = new ByteArrayOutputStream();\n+            try (final DataOutputStream dataOutputStream2 = new DataOutputStream(out2)) {\n+                dataOutputStream2.writeByte(array.length);\n+                for (int k = 0; k < array.length; ++k) {\n+                    dataOutputStream2.writeShort(array3[k]);\n+                    if (array3[k] > 0) {\n+                        for (final AnnotationEntryGen annotationEntryGen2 : array[k]) {\n+                            if (!annotationEntryGen2.isRuntimeVisible()) {\n+                                annotationEntryGen2.dump(dataOutputStream2);\n                             }\n                         }\n                     }\n                 }\n             }\n-            final byte[] rvaData = rvaBytes.toByteArray();\n-            final byte[] riaData = riaBytes.toByteArray();\n-            int rvaIndex = -1;\n-            int riaIndex = -1;\n-            if (totalVisCount > 0) {\n-                rvaIndex = cp.addUtf8(\"RuntimeVisibleParameterAnnotations\");\n-            }\n-            if (totalInvisCount > 0) {\n-                riaIndex = cp.addUtf8(\"RuntimeInvisibleParameterAnnotations\");\n-            }\n-            final List<Attribute> newAttributes = new ArrayList<Attribute>();\n-            if (totalVisCount > 0) {\n-                newAttributes.add((Attribute)new RuntimeVisibleParameterAnnotations(rvaIndex, rvaData.length, (DataInput)new DataInputStream(new ByteArrayInputStream(rvaData)), cp.getConstantPool()));\n+            final byte[] byteArray = out.toByteArray();\n+            final byte[] byteArray2 = out2.toByteArray();\n+            int addUtf8 = -1;\n+            int addUtf9 = -1;\n+            if (n > 0) {\n+                addUtf8 = constantPoolGen.addUtf8(\"RuntimeVisibleParameterAnnotations\");\n+            }\n+            if (n2 > 0) {\n+                addUtf9 = constantPoolGen.addUtf8(\"RuntimeInvisibleParameterAnnotations\");\n+            }\n+            final ArrayList list = new ArrayList();\n+            if (n > 0) {\n+                list.add(new RuntimeVisibleParameterAnnotations(addUtf8, byteArray.length, (DataInput)new DataInputStream(new ByteArrayInputStream(byteArray)), constantPoolGen.getConstantPool()));\n             }\n-            if (totalInvisCount > 0) {\n-                newAttributes.add((Attribute)new RuntimeInvisibleParameterAnnotations(riaIndex, riaData.length, (DataInput)new DataInputStream(new ByteArrayInputStream(riaData)), cp.getConstantPool()));\n+            if (n2 > 0) {\n+                list.add(new RuntimeInvisibleParameterAnnotations(addUtf9, byteArray2.length, (DataInput)new DataInputStream(new ByteArrayInputStream(byteArray2)), constantPoolGen.getConstantPool()));\n             }\n-            return newAttributes.toArray(Attribute.EMPTY_ARRAY);\n+            return (Attribute[])list.toArray(Attribute.EMPTY_ARRAY);\n         }\n-        catch (final IOException e) {\n+        catch (final IOException ex) {\n             System.err.println(\"IOException whilst processing parameter annotations\");\n-            e.printStackTrace();\n+            ex.printStackTrace();\n             return null;\n         }\n     }\n     \n-    public static AnnotationEntryGen read(final DataInput dis, final ConstantPoolGen cpool, final boolean b) throws IOException {\n-        final AnnotationEntryGen a = new AnnotationEntryGen(cpool);\n-        a.typeIndex = dis.readUnsignedShort();\n-        for (int elemValuePairCount = dis.readUnsignedShort(), i = 0; i < elemValuePairCount; ++i) {\n-            final int nidx = dis.readUnsignedShort();\n-            a.addElementNameValuePair(new ElementValuePairGen(nidx, ElementValueGen.readElementValue(dis, cpool), cpool));\n+    public static AnnotationEntryGen read(final DataInput dataInput, final ConstantPoolGen constantPoolGen, final boolean b) throws IOException {\n+        final AnnotationEntryGen annotationEntryGen = new AnnotationEntryGen(constantPoolGen);\n+        annotationEntryGen.typeIndex = dataInput.readUnsignedShort();\n+        for (int unsignedShort = dataInput.readUnsignedShort(), i = 0; i < unsignedShort; ++i) {\n+            annotationEntryGen.addElementNameValuePair(new ElementValuePairGen(dataInput.readUnsignedShort(), ElementValueGen.readElementValue(dataInput, constantPoolGen), constantPoolGen));\n         }\n-        a.isRuntimeVisible(b);\n-        return a;\n+        annotationEntryGen.isRuntimeVisible(b);\n+        return annotationEntryGen;\n     }\n     \n-    public AnnotationEntryGen(final AnnotationEntry a, final ConstantPoolGen cpool, final boolean copyPoolEntries) {\n+    public AnnotationEntryGen(final AnnotationEntry annotationEntry, final ConstantPoolGen cpool, final boolean b) {\n         this.cpool = cpool;\n-        if (copyPoolEntries) {\n-            this.typeIndex = cpool.addUtf8(a.getAnnotationType());\n+        if (b) {\n+            this.typeIndex = cpool.addUtf8(annotationEntry.getAnnotationType());\n         }\n         else {\n-            this.typeIndex = a.getAnnotationTypeIndex();\n+            this.typeIndex = annotationEntry.getAnnotationTypeIndex();\n         }\n-        this.isRuntimeVisible = a.isRuntimeVisible();\n-        this.evs = this.copyValues(a.getElementValuePairs(), cpool, copyPoolEntries);\n+        this.isRuntimeVisible = annotationEntry.isRuntimeVisible();\n+        this.evs = this.copyValues(annotationEntry.getElementValuePairs(), cpool, b);\n     }\n     \n     private AnnotationEntryGen(final ConstantPoolGen cpool) {\n         this.cpool = cpool;\n     }\n     \n-    public AnnotationEntryGen(final ObjectType type, final List<ElementValuePairGen> elements, final boolean vis, final ConstantPoolGen cpool) {\n+    public AnnotationEntryGen(final ObjectType objectType, final List<ElementValuePairGen> evs, final boolean isRuntimeVisible, final ConstantPoolGen cpool) {\n         this.cpool = cpool;\n-        this.typeIndex = cpool.addUtf8(type.getSignature());\n-        this.evs = elements;\n-        this.isRuntimeVisible = vis;\n+        this.typeIndex = cpool.addUtf8(objectType.getSignature());\n+        this.evs = evs;\n+        this.isRuntimeVisible = isRuntimeVisible;\n     }\n     \n-    public void addElementNameValuePair(final ElementValuePairGen evp) {\n+    public void addElementNameValuePair(final ElementValuePairGen elementValuePairGen) {\n         if (this.evs == null) {\n             this.evs = new ArrayList<ElementValuePairGen>();\n         }\n-        this.evs.add(evp);\n+        this.evs.add(elementValuePairGen);\n     }\n     \n-    private List<ElementValuePairGen> copyValues(final ElementValuePair[] in, final ConstantPoolGen cpool, final boolean copyPoolEntries) {\n-        final List<ElementValuePairGen> out = new ArrayList<ElementValuePairGen>();\n-        for (final ElementValuePair nvp : in) {\n-            out.add(new ElementValuePairGen(nvp, cpool, copyPoolEntries));\n+    private List<ElementValuePairGen> copyValues(final ElementValuePair[] array, final ConstantPoolGen constantPoolGen, final boolean b) {\n+        final ArrayList list = new ArrayList();\n+        for (int length = array.length, i = 0; i < length; ++i) {\n+            list.add(new ElementValuePairGen(array[i], constantPoolGen, b));\n         }\n-        return out;\n+        return list;\n     }\n     \n-    public void dump(final DataOutputStream dos) throws IOException {\n-        dos.writeShort(this.typeIndex);\n-        dos.writeShort(this.evs.size());\n-        for (final ElementValuePairGen envp : this.evs) {\n-            envp.dump(dos);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.typeIndex);\n+        dataOutputStream.writeShort(this.evs.size());\n+        final Iterator<ElementValuePairGen> iterator = this.evs.iterator();\n+        while (iterator.hasNext()) {\n+            ((ElementValuePairGen)iterator.next()).dump(dataOutputStream);\n         }\n     }\n     \n     public AnnotationEntry getAnnotation() {\n-        final AnnotationEntry a = new AnnotationEntry(this.typeIndex, this.cpool.getConstantPool(), this.isRuntimeVisible);\n-        for (final ElementValuePairGen element : this.evs) {\n-            a.addElementNameValuePair(element.getElementNameValuePair());\n+        final AnnotationEntry annotationEntry = new AnnotationEntry(this.typeIndex, this.cpool.getConstantPool(), this.isRuntimeVisible);\n+        final Iterator<ElementValuePairGen> iterator = this.evs.iterator();\n+        while (iterator.hasNext()) {\n+            annotationEntry.addElementNameValuePair(((ElementValuePairGen)iterator.next()).getElementNameValuePair());\n         }\n-        return a;\n+        return annotationEntry;\n     }\n     \n     public int getTypeIndex() {\n         return this.typeIndex;\n     }\n     \n     public final String getTypeName() {\n         return this.getTypeSignature();\n     }\n     \n     public final String getTypeSignature() {\n-        final ConstantUtf8 utf8 = (ConstantUtf8)this.cpool.getConstant(this.typeIndex);\n-        return utf8.getBytes();\n+        return ((ConstantUtf8)this.cpool.getConstant(this.typeIndex)).getBytes();\n     }\n     \n     public List<ElementValuePairGen> getValues() {\n         return this.evs;\n     }\n     \n     public boolean isRuntimeVisible() {\n         return this.isRuntimeVisible;\n     }\n     \n-    private void isRuntimeVisible(final boolean b) {\n-        this.isRuntimeVisible = b;\n+    private void isRuntimeVisible(final boolean isRuntimeVisible) {\n+        this.isRuntimeVisible = isRuntimeVisible;\n     }\n     \n     public String toShortString() {\n-        final StringBuilder s = new StringBuilder();\n-        s.append(\"@\").append(this.getTypeName()).append(\"(\");\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"@\").append(this.getTypeName()).append(\"(\");\n         for (int i = 0; i < this.evs.size(); ++i) {\n-            s.append(this.evs.get(i));\n+            sb.append(this.evs.get(i));\n             if (i + 1 < this.evs.size()) {\n-                s.append(\",\");\n+                sb.append(\",\");\n             }\n         }\n-        s.append(\")\");\n-        return s.toString();\n+        sb.append(\")\");\n+        return sb.toString();\n     }\n     \n     @Override\n     public String toString() {\n-        final StringBuilder s = new StringBuilder(32);\n-        s.append(\"AnnotationGen:[\").append(this.getTypeName()).append(\" #\").append(this.evs.size()).append(\" {\");\n+        final StringBuilder sb = new StringBuilder(32);\n+        sb.append(\"AnnotationGen:[\").append(this.getTypeName()).append(\" #\").append(this.evs.size()).append(\" {\");\n         for (int i = 0; i < this.evs.size(); ++i) {\n-            s.append(this.evs.get(i));\n+            sb.append(this.evs.get(i));\n             if (i + 1 < this.evs.size()) {\n-                s.append(\",\");\n+                sb.append(\",\");\n             }\n         }\n-        s.append(\"}]\");\n-        return s.toString();\n+        sb.append(\"}]\");\n+        return sb.toString();\n     }\n     \n     static {\n         EMPTY_ARRAY = new AnnotationEntryGen[0];\n     }\n }\n"}]}
