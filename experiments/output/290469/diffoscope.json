{"diffoscope-json-version": 1, "source1": "first/PrefixFileFilter.class", "source2": "second/PrefixFileFilter.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,128 +1,122 @@\n-  SHA-256 checksum 763b0db7f643389ff3389cff77c62955394d8a611af9a6cd72299d38a9149874\n+  SHA-256 checksum 43215e596b7f9f4e5fa35a4685bfd934db406301ba91ec2b120438754fa3f64d\n   Compiled from \"PrefixFileFilter.java\"\n public class org.apache.commons.io.filefilter.PrefixFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #28                         // org/apache/commons/io/filefilter/PrefixFileFilter\n   super_class: #29                        // org/apache/commons/io/filefilter/AbstractFileFilter\n   interfaces: 1, fields: 3, methods: 9, attributes: 1\n Constant pool:\n-    #1 = Fieldref           #66.#67       // org/apache/commons/io/IOCase.SENSITIVE:Lorg/apache/commons/io/IOCase;\n-    #2 = Methodref          #28.#68       // org/apache/commons/io/filefilter/PrefixFileFilter.\"<init>\":(Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n-    #3 = Methodref          #29.#69       // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n-    #4 = Class              #70           // java/lang/IllegalArgumentException\n-    #5 = String             #71           // The prefix must not be null\n-    #6 = Methodref          #4.#72        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-    #7 = Class              #73           // java/lang/String\n-    #8 = Fieldref           #28.#74       // org/apache/commons/io/filefilter/PrefixFileFilter.prefixes:[Ljava/lang/String;\n-    #9 = Fieldref           #28.#75       // org/apache/commons/io/filefilter/PrefixFileFilter.caseSensitivity:Lorg/apache/commons/io/IOCase;\n-   #10 = Methodref          #28.#76       // org/apache/commons/io/filefilter/PrefixFileFilter.\"<init>\":([Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n-   #11 = String             #77           // The array of prefixes must not be null\n-   #12 = Methodref          #78.#79       // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #13 = Methodref          #28.#80       // org/apache/commons/io/filefilter/PrefixFileFilter.\"<init>\":(Ljava/util/List;Lorg/apache/commons/io/IOCase;)V\n-   #14 = String             #81           // The list of prefixes must not be null\n-   #15 = Fieldref           #28.#82       // org/apache/commons/io/filefilter/PrefixFileFilter.EMPTY_STRING_ARRAY:[Ljava/lang/String;\n-   #16 = InterfaceMethodref #83.#84       // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+    #1 = Fieldref           #46.#63       // org/apache/commons/io/IOCase.SENSITIVE:Lorg/apache/commons/io/IOCase;\n+    #2 = Methodref          #28.#64       // org/apache/commons/io/filefilter/PrefixFileFilter.\"<init>\":(Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n+    #3 = Methodref          #29.#65       // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n+    #4 = Class              #66           // java/lang/IllegalArgumentException\n+    #5 = String             #67           // The prefix must not be null\n+    #6 = Methodref          #4.#68        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+    #7 = Class              #69           // java/lang/String\n+    #8 = Fieldref           #28.#70       // org/apache/commons/io/filefilter/PrefixFileFilter.prefixes:[Ljava/lang/String;\n+    #9 = Fieldref           #28.#71       // org/apache/commons/io/filefilter/PrefixFileFilter.caseSensitivity:Lorg/apache/commons/io/IOCase;\n+   #10 = Methodref          #28.#72       // org/apache/commons/io/filefilter/PrefixFileFilter.\"<init>\":([Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n+   #11 = String             #73           // The array of prefixes must not be null\n+   #12 = Methodref          #74.#75       // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #13 = Methodref          #28.#76       // org/apache/commons/io/filefilter/PrefixFileFilter.\"<init>\":(Ljava/util/List;Lorg/apache/commons/io/IOCase;)V\n+   #14 = String             #77           // The list of prefixes must not be null\n+   #15 = Fieldref           #28.#78       // org/apache/commons/io/filefilter/PrefixFileFilter.EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+   #16 = InterfaceMethodref #53.#79       // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n    #17 = Class              #37           // \"[Ljava/lang/String;\"\n-   #18 = Methodref          #85.#86       // java/io/File.getName:()Ljava/lang/String;\n-   #19 = Methodref          #66.#87       // org/apache/commons/io/IOCase.checkStartsWith:(Ljava/lang/String;Ljava/lang/String;)Z\n-   #20 = Class              #88           // java/lang/StringBuilder\n-   #21 = Methodref          #20.#69       // java/lang/StringBuilder.\"<init>\":()V\n-   #22 = Methodref          #29.#89       // org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n-   #23 = Methodref          #20.#90       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #24 = String             #91           // (\n-   #25 = String             #92           // ,\n-   #26 = String             #93           // )\n-   #27 = Methodref          #20.#89       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #28 = Class              #94           // org/apache/commons/io/filefilter/PrefixFileFilter\n-   #29 = Class              #95           // org/apache/commons/io/filefilter/AbstractFileFilter\n-   #30 = Class              #96           // java/io/Serializable\n+   #18 = Methodref          #57.#80       // java/io/File.getName:()Ljava/lang/String;\n+   #19 = Methodref          #46.#81       // org/apache/commons/io/IOCase.checkStartsWith:(Ljava/lang/String;Ljava/lang/String;)Z\n+   #20 = Class              #82           // java/lang/StringBuilder\n+   #21 = Methodref          #20.#65       // java/lang/StringBuilder.\"<init>\":()V\n+   #22 = Methodref          #29.#83       // org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n+   #23 = Methodref          #20.#84       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #24 = String             #85           // (\n+   #25 = String             #86           // ,\n+   #26 = String             #87           // )\n+   #27 = Methodref          #20.#83       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #28 = Class              #88           // org/apache/commons/io/filefilter/PrefixFileFilter\n+   #29 = Class              #89           // org/apache/commons/io/filefilter/AbstractFileFilter\n+   #30 = Class              #90           // java/io/Serializable\n    #31 = Utf8               serialVersionUID\n    #32 = Utf8               J\n    #33 = Utf8               ConstantValue\n    #34 = Long               8533897440809599867l\n    #36 = Utf8               prefixes\n    #37 = Utf8               [Ljava/lang/String;\n    #38 = Utf8               caseSensitivity\n    #39 = Utf8               Lorg/apache/commons/io/IOCase;\n    #40 = Utf8               <init>\n    #41 = Utf8               (Ljava/lang/String;)V\n    #42 = Utf8               Code\n    #43 = Utf8               LineNumberTable\n    #44 = Utf8               (Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n    #45 = Utf8               StackMapTable\n-   #46 = Class              #94           // org/apache/commons/io/filefilter/PrefixFileFilter\n-   #47 = Class              #73           // java/lang/String\n-   #48 = Class              #97           // org/apache/commons/io/IOCase\n-   #49 = Utf8               ([Ljava/lang/String;)V\n-   #50 = Utf8               ([Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n-   #51 = Utf8               (Ljava/util/List;)V\n-   #52 = Utf8               Signature\n-   #53 = Utf8               (Ljava/util/List<Ljava/lang/String;>;)V\n-   #54 = Utf8               (Ljava/util/List;Lorg/apache/commons/io/IOCase;)V\n-   #55 = Class              #98           // java/util/List\n-   #56 = Utf8               (Ljava/util/List<Ljava/lang/String;>;Lorg/apache/commons/io/IOCase;)V\n-   #57 = Utf8               accept\n-   #58 = Utf8               (Ljava/io/File;)Z\n-   #59 = Class              #99           // java/io/File\n-   #60 = Utf8               (Ljava/io/File;Ljava/lang/String;)Z\n-   #61 = Utf8               toString\n-   #62 = Utf8               ()Ljava/lang/String;\n-   #63 = Class              #88           // java/lang/StringBuilder\n-   #64 = Utf8               SourceFile\n-   #65 = Utf8               PrefixFileFilter.java\n-   #66 = Class              #97           // org/apache/commons/io/IOCase\n-   #67 = NameAndType        #100:#39      // SENSITIVE:Lorg/apache/commons/io/IOCase;\n-   #68 = NameAndType        #40:#44       // \"<init>\":(Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n-   #69 = NameAndType        #40:#101      // \"<init>\":()V\n-   #70 = Utf8               java/lang/IllegalArgumentException\n-   #71 = Utf8               The prefix must not be null\n-   #72 = NameAndType        #40:#41       // \"<init>\":(Ljava/lang/String;)V\n-   #73 = Utf8               java/lang/String\n-   #74 = NameAndType        #36:#37       // prefixes:[Ljava/lang/String;\n-   #75 = NameAndType        #38:#39       // caseSensitivity:Lorg/apache/commons/io/IOCase;\n-   #76 = NameAndType        #40:#50       // \"<init>\":([Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n-   #77 = Utf8               The array of prefixes must not be null\n-   #78 = Class              #102          // java/lang/System\n-   #79 = NameAndType        #103:#104     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #80 = NameAndType        #40:#54       // \"<init>\":(Ljava/util/List;Lorg/apache/commons/io/IOCase;)V\n-   #81 = Utf8               The list of prefixes must not be null\n-   #82 = NameAndType        #105:#37      // EMPTY_STRING_ARRAY:[Ljava/lang/String;\n-   #83 = Class              #98           // java/util/List\n-   #84 = NameAndType        #106:#107     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-   #85 = Class              #99           // java/io/File\n-   #86 = NameAndType        #108:#62      // getName:()Ljava/lang/String;\n-   #87 = NameAndType        #109:#110     // checkStartsWith:(Ljava/lang/String;Ljava/lang/String;)Z\n-   #88 = Utf8               java/lang/StringBuilder\n-   #89 = NameAndType        #61:#62       // toString:()Ljava/lang/String;\n-   #90 = NameAndType        #111:#112     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #91 = Utf8               (\n-   #92 = Utf8               ,\n-   #93 = Utf8               )\n-   #94 = Utf8               org/apache/commons/io/filefilter/PrefixFileFilter\n-   #95 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n-   #96 = Utf8               java/io/Serializable\n-   #97 = Utf8               org/apache/commons/io/IOCase\n-   #98 = Utf8               java/util/List\n-   #99 = Utf8               java/io/File\n-  #100 = Utf8               SENSITIVE\n-  #101 = Utf8               ()V\n-  #102 = Utf8               java/lang/System\n-  #103 = Utf8               arraycopy\n-  #104 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #105 = Utf8               EMPTY_STRING_ARRAY\n-  #106 = Utf8               toArray\n-  #107 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #108 = Utf8               getName\n-  #109 = Utf8               checkStartsWith\n-  #110 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Z\n-  #111 = Utf8               append\n-  #112 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #46 = Class              #91           // org/apache/commons/io/IOCase\n+   #47 = Utf8               ([Ljava/lang/String;)V\n+   #48 = Utf8               ([Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n+   #49 = Utf8               (Ljava/util/List;)V\n+   #50 = Utf8               Signature\n+   #51 = Utf8               (Ljava/util/List<Ljava/lang/String;>;)V\n+   #52 = Utf8               (Ljava/util/List;Lorg/apache/commons/io/IOCase;)V\n+   #53 = Class              #92           // java/util/List\n+   #54 = Utf8               (Ljava/util/List<Ljava/lang/String;>;Lorg/apache/commons/io/IOCase;)V\n+   #55 = Utf8               accept\n+   #56 = Utf8               (Ljava/io/File;)Z\n+   #57 = Class              #93           // java/io/File\n+   #58 = Utf8               (Ljava/io/File;Ljava/lang/String;)Z\n+   #59 = Utf8               toString\n+   #60 = Utf8               ()Ljava/lang/String;\n+   #61 = Utf8               SourceFile\n+   #62 = Utf8               PrefixFileFilter.java\n+   #63 = NameAndType        #94:#39       // SENSITIVE:Lorg/apache/commons/io/IOCase;\n+   #64 = NameAndType        #40:#44       // \"<init>\":(Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n+   #65 = NameAndType        #40:#95       // \"<init>\":()V\n+   #66 = Utf8               java/lang/IllegalArgumentException\n+   #67 = Utf8               The prefix must not be null\n+   #68 = NameAndType        #40:#41       // \"<init>\":(Ljava/lang/String;)V\n+   #69 = Utf8               java/lang/String\n+   #70 = NameAndType        #36:#37       // prefixes:[Ljava/lang/String;\n+   #71 = NameAndType        #38:#39       // caseSensitivity:Lorg/apache/commons/io/IOCase;\n+   #72 = NameAndType        #40:#48       // \"<init>\":([Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n+   #73 = Utf8               The array of prefixes must not be null\n+   #74 = Class              #96           // java/lang/System\n+   #75 = NameAndType        #97:#98       // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #76 = NameAndType        #40:#52       // \"<init>\":(Ljava/util/List;Lorg/apache/commons/io/IOCase;)V\n+   #77 = Utf8               The list of prefixes must not be null\n+   #78 = NameAndType        #99:#37       // EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+   #79 = NameAndType        #100:#101     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+   #80 = NameAndType        #102:#60      // getName:()Ljava/lang/String;\n+   #81 = NameAndType        #103:#104     // checkStartsWith:(Ljava/lang/String;Ljava/lang/String;)Z\n+   #82 = Utf8               java/lang/StringBuilder\n+   #83 = NameAndType        #59:#60       // toString:()Ljava/lang/String;\n+   #84 = NameAndType        #105:#106     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #85 = Utf8               (\n+   #86 = Utf8               ,\n+   #87 = Utf8               )\n+   #88 = Utf8               org/apache/commons/io/filefilter/PrefixFileFilter\n+   #89 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n+   #90 = Utf8               java/io/Serializable\n+   #91 = Utf8               org/apache/commons/io/IOCase\n+   #92 = Utf8               java/util/List\n+   #93 = Utf8               java/io/File\n+   #94 = Utf8               SENSITIVE\n+   #95 = Utf8               ()V\n+   #96 = Utf8               java/lang/System\n+   #97 = Utf8               arraycopy\n+   #98 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #99 = Utf8               EMPTY_STRING_ARRAY\n+  #100 = Utf8               toArray\n+  #101 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #102 = Utf8               getName\n+  #103 = Utf8               checkStartsWith\n+  #104 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Z\n+  #105 = Utf8               append\n+  #106 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n {\n   private static final long serialVersionUID = 8533897440809599867l;\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long 8533897440809599867l\n \n   private final java.lang.String[] prefixes;\n@@ -274,15 +268,15 @@\n          1: aload_1\n          2: getstatic     #1                  // Field org/apache/commons/io/IOCase.SENSITIVE:Lorg/apache/commons/io/IOCase;\n          5: invokespecial #13                 // Method \"<init>\":(Ljava/util/List;Lorg/apache/commons/io/IOCase;)V\n          8: return\n       LineNumberTable:\n         line 120: 0\n         line 121: 8\n-    Signature: #53                          // (Ljava/util/List<Ljava/lang/String;>;)V\n+    Signature: #51                          // (Ljava/util/List<Ljava/lang/String;>;)V\n \n   public org.apache.commons.io.filefilter.PrefixFileFilter(java.util.List<java.lang.String>, org.apache.commons.io.IOCase);\n     descriptor: (Ljava/util/List;Lorg/apache/commons/io/IOCase;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n@@ -322,15 +316,15 @@\n           stack = []\n         frame_type = 90 /* same_locals_1_stack_item */\n           stack = [ class org/apache/commons/io/filefilter/PrefixFileFilter ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 0\n           locals = [ class org/apache/commons/io/filefilter/PrefixFileFilter, class java/util/List, class org/apache/commons/io/IOCase ]\n           stack = [ class org/apache/commons/io/filefilter/PrefixFileFilter, class org/apache/commons/io/IOCase ]\n-    Signature: #56                          // (Ljava/util/List<Ljava/lang/String;>;Lorg/apache/commons/io/IOCase;)V\n+    Signature: #54                          // (Ljava/util/List<Ljava/lang/String;>;Lorg/apache/commons/io/IOCase;)V\n \n   public boolean accept(java.io.File);\n     descriptor: (Ljava/io/File;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=7, args_size=2\n          0: aload_1\n"}]}
