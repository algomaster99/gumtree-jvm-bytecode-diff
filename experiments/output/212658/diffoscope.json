{"diffoscope-json-version": 1, "source1": "first/FastDateFormat.class", "source2": "second/FastDateFormat.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -21,146 +21,146 @@\n     private final FastDatePrinter printer;\n     private final FastDateParser parser;\n     \n     public static FastDateFormat getInstance() {\n         return (FastDateFormat)FastDateFormat.cache.getInstance();\n     }\n     \n-    public static FastDateFormat getInstance(final String pattern) {\n-        return (FastDateFormat)FastDateFormat.cache.getInstance(pattern, (TimeZone)null, (Locale)null);\n+    public static FastDateFormat getInstance(final String s) {\n+        return (FastDateFormat)FastDateFormat.cache.getInstance(s, (TimeZone)null, (Locale)null);\n     }\n     \n-    public static FastDateFormat getInstance(final String pattern, final TimeZone timeZone) {\n-        return (FastDateFormat)FastDateFormat.cache.getInstance(pattern, timeZone, (Locale)null);\n+    public static FastDateFormat getInstance(final String s, final TimeZone timeZone) {\n+        return (FastDateFormat)FastDateFormat.cache.getInstance(s, timeZone, (Locale)null);\n     }\n     \n-    public static FastDateFormat getInstance(final String pattern, final Locale locale) {\n-        return (FastDateFormat)FastDateFormat.cache.getInstance(pattern, (TimeZone)null, locale);\n+    public static FastDateFormat getInstance(final String s, final Locale locale) {\n+        return (FastDateFormat)FastDateFormat.cache.getInstance(s, (TimeZone)null, locale);\n     }\n     \n-    public static FastDateFormat getInstance(final String pattern, final TimeZone timeZone, final Locale locale) {\n-        return (FastDateFormat)FastDateFormat.cache.getInstance(pattern, timeZone, locale);\n+    public static FastDateFormat getInstance(final String s, final TimeZone timeZone, final Locale locale) {\n+        return (FastDateFormat)FastDateFormat.cache.getInstance(s, timeZone, locale);\n     }\n     \n-    public static FastDateFormat getDateInstance(final int style) {\n-        return (FastDateFormat)FastDateFormat.cache.getDateInstance(style, (TimeZone)null, (Locale)null);\n+    public static FastDateFormat getDateInstance(final int n) {\n+        return (FastDateFormat)FastDateFormat.cache.getDateInstance(n, (TimeZone)null, (Locale)null);\n     }\n     \n-    public static FastDateFormat getDateInstance(final int style, final Locale locale) {\n-        return (FastDateFormat)FastDateFormat.cache.getDateInstance(style, (TimeZone)null, locale);\n+    public static FastDateFormat getDateInstance(final int n, final Locale locale) {\n+        return (FastDateFormat)FastDateFormat.cache.getDateInstance(n, (TimeZone)null, locale);\n     }\n     \n-    public static FastDateFormat getDateInstance(final int style, final TimeZone timeZone) {\n-        return (FastDateFormat)FastDateFormat.cache.getDateInstance(style, timeZone, (Locale)null);\n+    public static FastDateFormat getDateInstance(final int n, final TimeZone timeZone) {\n+        return (FastDateFormat)FastDateFormat.cache.getDateInstance(n, timeZone, (Locale)null);\n     }\n     \n-    public static FastDateFormat getDateInstance(final int style, final TimeZone timeZone, final Locale locale) {\n-        return (FastDateFormat)FastDateFormat.cache.getDateInstance(style, timeZone, locale);\n+    public static FastDateFormat getDateInstance(final int n, final TimeZone timeZone, final Locale locale) {\n+        return (FastDateFormat)FastDateFormat.cache.getDateInstance(n, timeZone, locale);\n     }\n     \n-    public static FastDateFormat getTimeInstance(final int style) {\n-        return (FastDateFormat)FastDateFormat.cache.getTimeInstance(style, (TimeZone)null, (Locale)null);\n+    public static FastDateFormat getTimeInstance(final int n) {\n+        return (FastDateFormat)FastDateFormat.cache.getTimeInstance(n, (TimeZone)null, (Locale)null);\n     }\n     \n-    public static FastDateFormat getTimeInstance(final int style, final Locale locale) {\n-        return (FastDateFormat)FastDateFormat.cache.getTimeInstance(style, (TimeZone)null, locale);\n+    public static FastDateFormat getTimeInstance(final int n, final Locale locale) {\n+        return (FastDateFormat)FastDateFormat.cache.getTimeInstance(n, (TimeZone)null, locale);\n     }\n     \n-    public static FastDateFormat getTimeInstance(final int style, final TimeZone timeZone) {\n-        return (FastDateFormat)FastDateFormat.cache.getTimeInstance(style, timeZone, (Locale)null);\n+    public static FastDateFormat getTimeInstance(final int n, final TimeZone timeZone) {\n+        return (FastDateFormat)FastDateFormat.cache.getTimeInstance(n, timeZone, (Locale)null);\n     }\n     \n-    public static FastDateFormat getTimeInstance(final int style, final TimeZone timeZone, final Locale locale) {\n-        return (FastDateFormat)FastDateFormat.cache.getTimeInstance(style, timeZone, locale);\n+    public static FastDateFormat getTimeInstance(final int n, final TimeZone timeZone, final Locale locale) {\n+        return (FastDateFormat)FastDateFormat.cache.getTimeInstance(n, timeZone, locale);\n     }\n     \n-    public static FastDateFormat getDateTimeInstance(final int dateStyle, final int timeStyle) {\n-        return (FastDateFormat)FastDateFormat.cache.getDateTimeInstance(dateStyle, timeStyle, (TimeZone)null, (Locale)null);\n+    public static FastDateFormat getDateTimeInstance(final int n, final int n2) {\n+        return (FastDateFormat)FastDateFormat.cache.getDateTimeInstance(n, n2, (TimeZone)null, (Locale)null);\n     }\n     \n-    public static FastDateFormat getDateTimeInstance(final int dateStyle, final int timeStyle, final Locale locale) {\n-        return (FastDateFormat)FastDateFormat.cache.getDateTimeInstance(dateStyle, timeStyle, (TimeZone)null, locale);\n+    public static FastDateFormat getDateTimeInstance(final int n, final int n2, final Locale locale) {\n+        return (FastDateFormat)FastDateFormat.cache.getDateTimeInstance(n, n2, (TimeZone)null, locale);\n     }\n     \n-    public static FastDateFormat getDateTimeInstance(final int dateStyle, final int timeStyle, final TimeZone timeZone) {\n-        return getDateTimeInstance(dateStyle, timeStyle, timeZone, null);\n+    public static FastDateFormat getDateTimeInstance(final int n, final int n2, final TimeZone timeZone) {\n+        return getDateTimeInstance(n, n2, timeZone, null);\n     }\n     \n-    public static FastDateFormat getDateTimeInstance(final int dateStyle, final int timeStyle, final TimeZone timeZone, final Locale locale) {\n-        return (FastDateFormat)FastDateFormat.cache.getDateTimeInstance(dateStyle, timeStyle, timeZone, locale);\n+    public static FastDateFormat getDateTimeInstance(final int n, final int n2, final TimeZone timeZone, final Locale locale) {\n+        return (FastDateFormat)FastDateFormat.cache.getDateTimeInstance(n, n2, timeZone, locale);\n     }\n     \n-    protected FastDateFormat(final String pattern, final TimeZone timeZone, final Locale locale) {\n-        this(pattern, timeZone, locale, null);\n+    protected FastDateFormat(final String s, final TimeZone timeZone, final Locale locale) {\n+        this(s, timeZone, locale, null);\n     }\n     \n-    protected FastDateFormat(final String pattern, final TimeZone timeZone, final Locale locale, final Date centuryStart) {\n-        this.printer = new FastDatePrinter(pattern, timeZone, locale);\n-        this.parser = new FastDateParser(pattern, timeZone, locale, centuryStart);\n+    protected FastDateFormat(final String s, final TimeZone timeZone, final Locale locale, final Date date) {\n+        this.printer = new FastDatePrinter(s, timeZone, locale);\n+        this.parser = new FastDateParser(s, timeZone, locale, date);\n     }\n     \n     @Override\n-    public StringBuffer format(final Object obj, final StringBuffer toAppendTo, final FieldPosition pos) {\n-        return toAppendTo.append(this.printer.format(obj));\n+    public StringBuffer format(final Object o, final StringBuffer sb, final FieldPosition fieldPosition) {\n+        return sb.append(this.printer.format(o));\n     }\n     \n-    public String format(final long millis) {\n-        return this.printer.format(millis);\n+    public String format(final long n) {\n+        return this.printer.format(n);\n     }\n     \n     public String format(final Date date) {\n         return this.printer.format(date);\n     }\n     \n     public String format(final Calendar calendar) {\n         return this.printer.format(calendar);\n     }\n     \n     @Deprecated\n-    public StringBuffer format(final long millis, final StringBuffer buf) {\n-        return this.printer.format(millis, buf);\n+    public StringBuffer format(final long n, final StringBuffer sb) {\n+        return this.printer.format(n, sb);\n     }\n     \n     @Deprecated\n-    public StringBuffer format(final Date date, final StringBuffer buf) {\n-        return this.printer.format(date, buf);\n+    public StringBuffer format(final Date date, final StringBuffer sb) {\n+        return this.printer.format(date, sb);\n     }\n     \n     @Deprecated\n-    public StringBuffer format(final Calendar calendar, final StringBuffer buf) {\n-        return this.printer.format(calendar, buf);\n+    public StringBuffer format(final Calendar calendar, final StringBuffer sb) {\n+        return this.printer.format(calendar, sb);\n     }\n     \n-    public <B extends Appendable> B format(final long millis, final B buf) {\n-        return (B)this.printer.format(millis, (Appendable)buf);\n+    public <B extends Appendable> B format(final long n, final B b) {\n+        return (B)this.printer.format(n, (Appendable)b);\n     }\n     \n-    public <B extends Appendable> B format(final Date date, final B buf) {\n-        return (B)this.printer.format(date, (Appendable)buf);\n+    public <B extends Appendable> B format(final Date date, final B b) {\n+        return (B)this.printer.format(date, (Appendable)b);\n     }\n     \n-    public <B extends Appendable> B format(final Calendar calendar, final B buf) {\n-        return (B)this.printer.format(calendar, (Appendable)buf);\n+    public <B extends Appendable> B format(final Calendar calendar, final B b) {\n+        return (B)this.printer.format(calendar, (Appendable)b);\n     }\n     \n-    public Date parse(final String source) throws ParseException {\n-        return this.parser.parse(source);\n+    public Date parse(final String s) throws ParseException {\n+        return this.parser.parse(s);\n     }\n     \n-    public Date parse(final String source, final ParsePosition pos) {\n-        return this.parser.parse(source, pos);\n+    public Date parse(final String s, final ParsePosition parsePosition) {\n+        return this.parser.parse(s, parsePosition);\n     }\n     \n-    public boolean parse(final String source, final ParsePosition pos, final Calendar calendar) {\n-        return this.parser.parse(source, pos, calendar);\n+    public boolean parse(final String s, final ParsePosition parsePosition, final Calendar calendar) {\n+        return this.parser.parse(s, parsePosition, calendar);\n     }\n     \n     @Override\n-    public Object parseObject(final String source, final ParsePosition pos) {\n-        return this.parser.parseObject(source, pos);\n+    public Object parseObject(final String s, final ParsePosition parsePosition) {\n+        return this.parser.parseObject(s, parsePosition);\n     }\n     \n     public String getPattern() {\n         return this.printer.getPattern();\n     }\n     \n     public TimeZone getTimeZone() {\n@@ -171,32 +171,28 @@\n         return this.printer.getLocale();\n     }\n     \n     public int getMaxLengthEstimate() {\n         return this.printer.getMaxLengthEstimate();\n     }\n     \n-    public boolean equals(final Object obj) {\n-        if (!(obj instanceof FastDateFormat)) {\n-            return false;\n-        }\n-        final FastDateFormat other = (FastDateFormat)obj;\n-        return this.printer.equals((Object)other.printer);\n+    public boolean equals(final Object o) {\n+        return o instanceof FastDateFormat && this.printer.equals((Object)((FastDateFormat)o).printer);\n     }\n     \n     public int hashCode() {\n         return this.printer.hashCode();\n     }\n     \n     public String toString() {\n         return \"FastDateFormat[\" + this.printer.getPattern() + \",\" + this.printer.getLocale() + \",\" + this.printer.getTimeZone().getID() + \"]\";\n     }\n     \n     @Deprecated\n-    protected StringBuffer applyRules(final Calendar calendar, final StringBuffer buf) {\n-        return this.printer.applyRules(calendar, buf);\n+    protected StringBuffer applyRules(final Calendar calendar, final StringBuffer sb) {\n+        return this.printer.applyRules(calendar, sb);\n     }\n     \n     static {\n         cache = (FormatCache)new FastDateFormat.FastDateFormat$1();\n     }\n }\n"}]}
