{"diffoscope-json-version": 1, "source1": "first/BinaryTree.class", "source2": "second/BinaryTree.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,136 +1,134 @@\n-  SHA-256 checksum 85eccf6168458b939e418ed6c4f16c9b1ac581a506361d9f1ee0e7136edb3c7d\n+  SHA-256 checksum 4241d2067fae7e27e9b1f7fcd7a02b61b86bf92de6d2c17944f4db361f8373f5\n   Compiled from \"BinaryTree.java\"\n class org.apache.commons.compress.archivers.zip.BinaryTree\n   minor version: 0\n   major version: 52\n   flags: (0x0020) ACC_SUPER\n   this_class: #18                         // org/apache/commons/compress/archivers/zip/BinaryTree\n   super_class: #33                        // java/lang/Object\n   interfaces: 0, fields: 3, methods: 4, attributes: 1\n Constant pool:\n-    #1 = Class              #60           // java/lang/IllegalArgumentException\n-    #2 = Class              #61           // java/lang/StringBuilder\n-    #3 = Methodref          #2.#62        // java/lang/StringBuilder.\"<init>\":()V\n-    #4 = String             #63           // totalNumberOfValues must be bigger than 0, is\n-    #5 = Methodref          #2.#64        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-    #6 = Methodref          #2.#65        // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-    #7 = Methodref          #2.#66        // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-    #8 = Methodref          #1.#67        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-    #9 = Methodref          #68.#69       // java/io/InputStream.read:()I\n-   #10 = Class              #70           // java/io/IOException\n-   #11 = String             #71           // Cannot read the size of the encoded tree, unexpected end of stream\n-   #12 = Methodref          #10.#67       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #13 = Methodref          #72.#73       // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n-   #14 = Class              #74           // java/io/EOFException\n-   #15 = Methodref          #14.#62       // java/io/EOFException.\"<init>\":()V\n-   #16 = String             #75           // Number of values exceeds given total number of values\n-   #17 = Methodref          #76.#77       // java/lang/Math.max:(II)I\n-   #18 = Class              #78           // org/apache/commons/compress/archivers/zip/BinaryTree\n-   #19 = Methodref          #18.#79       // org/apache/commons/compress/archivers/zip/BinaryTree.\"<init>\":(I)V\n-   #20 = Methodref          #80.#81       // java/lang/Integer.reverse:(I)I\n-   #21 = Methodref          #18.#82       // org/apache/commons/compress/archivers/zip/BinaryTree.addLeaf:(IIII)V\n-   #22 = Methodref          #33.#62       // java/lang/Object.\"<init>\":()V\n-   #23 = String             #83           // depth must be bigger than 0 and not bigger than 30 but is\n-   #24 = Fieldref           #18.#84       // org/apache/commons/compress/archivers/zip/BinaryTree.tree:[I\n-   #25 = Methodref          #85.#86       // java/util/Arrays.fill:([II)V\n-   #26 = String             #87           // Tree value at index\n-   #27 = String             #88           //  has already been assigned (\n-   #28 = String             #89           // )\n-   #29 = Methodref          #90.#91       // org/apache/commons/compress/archivers/zip/BitStream.nextBit:()I\n-   #30 = String             #92           // The child\n-   #31 = String             #93           //  of node at index\n-   #32 = String             #94           //  is not defined\n-   #33 = Class              #95           // java/lang/Object\n+    #1 = Class              #59           // java/lang/IllegalArgumentException\n+    #2 = Class              #60           // java/lang/StringBuilder\n+    #3 = Methodref          #2.#61        // java/lang/StringBuilder.\"<init>\":()V\n+    #4 = String             #62           // totalNumberOfValues must be bigger than 0, is\n+    #5 = Methodref          #2.#63        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+    #6 = Methodref          #2.#64        // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+    #7 = Methodref          #2.#65        // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+    #8 = Methodref          #1.#66        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+    #9 = Methodref          #48.#67       // java/io/InputStream.read:()I\n+   #10 = Class              #68           // java/io/IOException\n+   #11 = String             #69           // Cannot read the size of the encoded tree, unexpected end of stream\n+   #12 = Methodref          #10.#66       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #13 = Methodref          #70.#71       // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n+   #14 = Class              #72           // java/io/EOFException\n+   #15 = Methodref          #14.#61       // java/io/EOFException.\"<init>\":()V\n+   #16 = String             #73           // Number of values exceeds given total number of values\n+   #17 = Methodref          #74.#75       // java/lang/Math.max:(II)I\n+   #18 = Class              #76           // org/apache/commons/compress/archivers/zip/BinaryTree\n+   #19 = Methodref          #18.#77       // org/apache/commons/compress/archivers/zip/BinaryTree.\"<init>\":(I)V\n+   #20 = Methodref          #78.#79       // java/lang/Integer.reverse:(I)I\n+   #21 = Methodref          #18.#80       // org/apache/commons/compress/archivers/zip/BinaryTree.addLeaf:(IIII)V\n+   #22 = Methodref          #33.#61       // java/lang/Object.\"<init>\":()V\n+   #23 = String             #81           // depth must be bigger than 0 and not bigger than 30 but is\n+   #24 = Fieldref           #18.#82       // org/apache/commons/compress/archivers/zip/BinaryTree.tree:[I\n+   #25 = Methodref          #83.#84       // java/util/Arrays.fill:([II)V\n+   #26 = String             #85           // Tree value at index\n+   #27 = String             #86           //  has already been assigned (\n+   #28 = String             #87           // )\n+   #29 = Methodref          #88.#89       // org/apache/commons/compress/archivers/zip/BitStream.nextBit:()I\n+   #30 = String             #90           // The child\n+   #31 = String             #91           //  of node at index\n+   #32 = String             #92           //  is not defined\n+   #33 = Class              #93           // java/lang/Object\n    #34 = Utf8               UNDEFINED\n    #35 = Utf8               I\n    #36 = Utf8               ConstantValue\n    #37 = Integer            -1\n    #38 = Utf8               NODE\n    #39 = Integer            -2\n    #40 = Utf8               tree\n    #41 = Utf8               [I\n    #42 = Utf8               decode\n    #43 = Utf8               (Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n    #44 = Utf8               Code\n    #45 = Utf8               LineNumberTable\n    #46 = Utf8               StackMapTable\n-   #47 = Class              #96           // \"[B\"\n-   #48 = Class              #97           // java/io/InputStream\n+   #47 = Class              #94           // \"[B\"\n+   #48 = Class              #95           // java/io/InputStream\n    #49 = Class              #41           // \"[I\"\n-   #50 = Class              #78           // org/apache/commons/compress/archivers/zip/BinaryTree\n-   #51 = Utf8               Exceptions\n-   #52 = Utf8               <init>\n-   #53 = Utf8               (I)V\n-   #54 = Utf8               addLeaf\n-   #55 = Utf8               (IIII)V\n-   #56 = Utf8               read\n-   #57 = Utf8               (Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n-   #58 = Utf8               SourceFile\n-   #59 = Utf8               BinaryTree.java\n-   #60 = Utf8               java/lang/IllegalArgumentException\n-   #61 = Utf8               java/lang/StringBuilder\n-   #62 = NameAndType        #52:#98       // \"<init>\":()V\n-   #63 = Utf8               totalNumberOfValues must be bigger than 0, is\n-   #64 = NameAndType        #99:#100      // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #65 = NameAndType        #99:#101      // append:(I)Ljava/lang/StringBuilder;\n-   #66 = NameAndType        #102:#103     // toString:()Ljava/lang/String;\n-   #67 = NameAndType        #52:#104      // \"<init>\":(Ljava/lang/String;)V\n-   #68 = Class              #97           // java/io/InputStream\n-   #69 = NameAndType        #56:#105      // read:()I\n-   #70 = Utf8               java/io/IOException\n-   #71 = Utf8               Cannot read the size of the encoded tree, unexpected end of stream\n-   #72 = Class              #106          // org/apache/commons/compress/utils/IOUtils\n-   #73 = NameAndType        #107:#108     // readRange:(Ljava/io/InputStream;I)[B\n-   #74 = Utf8               java/io/EOFException\n-   #75 = Utf8               Number of values exceeds given total number of values\n-   #76 = Class              #109          // java/lang/Math\n-   #77 = NameAndType        #110:#111     // max:(II)I\n-   #78 = Utf8               org/apache/commons/compress/archivers/zip/BinaryTree\n-   #79 = NameAndType        #52:#53       // \"<init>\":(I)V\n-   #80 = Class              #112          // java/lang/Integer\n-   #81 = NameAndType        #113:#114     // reverse:(I)I\n-   #82 = NameAndType        #54:#55       // addLeaf:(IIII)V\n-   #83 = Utf8               depth must be bigger than 0 and not bigger than 30 but is\n-   #84 = NameAndType        #40:#41       // tree:[I\n-   #85 = Class              #115          // java/util/Arrays\n-   #86 = NameAndType        #116:#117     // fill:([II)V\n-   #87 = Utf8               Tree value at index\n-   #88 = Utf8                has already been assigned (\n-   #89 = Utf8               )\n-   #90 = Class              #118          // org/apache/commons/compress/archivers/zip/BitStream\n-   #91 = NameAndType        #119:#105     // nextBit:()I\n-   #92 = Utf8               The child\n-   #93 = Utf8                of node at index\n-   #94 = Utf8                is not defined\n-   #95 = Utf8               java/lang/Object\n-   #96 = Utf8               [B\n-   #97 = Utf8               java/io/InputStream\n-   #98 = Utf8               ()V\n-   #99 = Utf8               append\n-  #100 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #101 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #102 = Utf8               toString\n-  #103 = Utf8               ()Ljava/lang/String;\n-  #104 = Utf8               (Ljava/lang/String;)V\n-  #105 = Utf8               ()I\n-  #106 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #107 = Utf8               readRange\n-  #108 = Utf8               (Ljava/io/InputStream;I)[B\n-  #109 = Utf8               java/lang/Math\n-  #110 = Utf8               max\n-  #111 = Utf8               (II)I\n-  #112 = Utf8               java/lang/Integer\n-  #113 = Utf8               reverse\n-  #114 = Utf8               (I)I\n-  #115 = Utf8               java/util/Arrays\n-  #116 = Utf8               fill\n-  #117 = Utf8               ([II)V\n-  #118 = Utf8               org/apache/commons/compress/archivers/zip/BitStream\n-  #119 = Utf8               nextBit\n+   #50 = Utf8               Exceptions\n+   #51 = Utf8               <init>\n+   #52 = Utf8               (I)V\n+   #53 = Utf8               addLeaf\n+   #54 = Utf8               (IIII)V\n+   #55 = Utf8               read\n+   #56 = Utf8               (Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n+   #57 = Utf8               SourceFile\n+   #58 = Utf8               BinaryTree.java\n+   #59 = Utf8               java/lang/IllegalArgumentException\n+   #60 = Utf8               java/lang/StringBuilder\n+   #61 = NameAndType        #51:#96       // \"<init>\":()V\n+   #62 = Utf8               totalNumberOfValues must be bigger than 0, is\n+   #63 = NameAndType        #97:#98       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #64 = NameAndType        #97:#99       // append:(I)Ljava/lang/StringBuilder;\n+   #65 = NameAndType        #100:#101     // toString:()Ljava/lang/String;\n+   #66 = NameAndType        #51:#102      // \"<init>\":(Ljava/lang/String;)V\n+   #67 = NameAndType        #55:#103      // read:()I\n+   #68 = Utf8               java/io/IOException\n+   #69 = Utf8               Cannot read the size of the encoded tree, unexpected end of stream\n+   #70 = Class              #104          // org/apache/commons/compress/utils/IOUtils\n+   #71 = NameAndType        #105:#106     // readRange:(Ljava/io/InputStream;I)[B\n+   #72 = Utf8               java/io/EOFException\n+   #73 = Utf8               Number of values exceeds given total number of values\n+   #74 = Class              #107          // java/lang/Math\n+   #75 = NameAndType        #108:#109     // max:(II)I\n+   #76 = Utf8               org/apache/commons/compress/archivers/zip/BinaryTree\n+   #77 = NameAndType        #51:#52       // \"<init>\":(I)V\n+   #78 = Class              #110          // java/lang/Integer\n+   #79 = NameAndType        #111:#112     // reverse:(I)I\n+   #80 = NameAndType        #53:#54       // addLeaf:(IIII)V\n+   #81 = Utf8               depth must be bigger than 0 and not bigger than 30 but is\n+   #82 = NameAndType        #40:#41       // tree:[I\n+   #83 = Class              #113          // java/util/Arrays\n+   #84 = NameAndType        #114:#115     // fill:([II)V\n+   #85 = Utf8               Tree value at index\n+   #86 = Utf8                has already been assigned (\n+   #87 = Utf8               )\n+   #88 = Class              #116          // org/apache/commons/compress/archivers/zip/BitStream\n+   #89 = NameAndType        #117:#103     // nextBit:()I\n+   #90 = Utf8               The child\n+   #91 = Utf8                of node at index\n+   #92 = Utf8                is not defined\n+   #93 = Utf8               java/lang/Object\n+   #94 = Utf8               [B\n+   #95 = Utf8               java/io/InputStream\n+   #96 = Utf8               ()V\n+   #97 = Utf8               append\n+   #98 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #99 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #100 = Utf8               toString\n+  #101 = Utf8               ()Ljava/lang/String;\n+  #102 = Utf8               (Ljava/lang/String;)V\n+  #103 = Utf8               ()I\n+  #104 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #105 = Utf8               readRange\n+  #106 = Utf8               (Ljava/io/InputStream;I)[B\n+  #107 = Utf8               java/lang/Math\n+  #108 = Utf8               max\n+  #109 = Utf8               (II)I\n+  #110 = Utf8               java/lang/Integer\n+  #111 = Utf8               reverse\n+  #112 = Utf8               (I)I\n+  #113 = Utf8               java/util/Arrays\n+  #114 = Utf8               fill\n+  #115 = Utf8               ([II)V\n+  #116 = Utf8               org/apache/commons/compress/archivers/zip/BitStream\n+  #117 = Utf8               nextBit\n {\n   private static final int UNDEFINED = -1;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int -1\n \n   private static final int NODE = -2;\n"}]}
