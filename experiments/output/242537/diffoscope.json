{"diffoscope-json-version": 1, "source1": "first/LocalVariableTable.class", "source2": "second/LocalVariableTable.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,68 +8,69 @@\n import java.io.IOException;\n import java.io.DataInput;\n \n public class LocalVariableTable extends Attribute implements Iterable<LocalVariable>\n {\n     private LocalVariable[] localVariableTable;\n     \n-    LocalVariableTable(final int nameIndex, final int length, final DataInput input, final ConstantPool constantPool) throws IOException {\n-        this(nameIndex, length, (LocalVariable[])null, constantPool);\n-        final int localVariableTableLength = input.readUnsignedShort();\n-        this.localVariableTable = new LocalVariable[localVariableTableLength];\n-        for (int i = 0; i < localVariableTableLength; ++i) {\n-            this.localVariableTable[i] = new LocalVariable(input, constantPool);\n+    LocalVariableTable(final int n, final int n2, final DataInput dataInput, final ConstantPool constantPool) throws IOException {\n+        this(n, n2, (LocalVariable[])null, constantPool);\n+        final int unsignedShort = dataInput.readUnsignedShort();\n+        this.localVariableTable = new LocalVariable[unsignedShort];\n+        for (int i = 0; i < unsignedShort; ++i) {\n+            this.localVariableTable[i] = new LocalVariable(dataInput, constantPool);\n         }\n     }\n     \n-    public LocalVariableTable(final int nameIndex, final int length, final LocalVariable[] localVariableTable, final ConstantPool constantPool) {\n-        super((byte)5, nameIndex, length, constantPool);\n+    public LocalVariableTable(final int n, final int n2, final LocalVariable[] localVariableTable, final ConstantPool constantPool) {\n+        super((byte)5, n, n2, constantPool);\n         this.localVariableTable = localVariableTable;\n     }\n     \n-    public LocalVariableTable(final LocalVariableTable c) {\n-        this(c.getNameIndex(), c.getLength(), c.getLocalVariableTable(), c.getConstantPool());\n+    public LocalVariableTable(final LocalVariableTable localVariableTable) {\n+        this(localVariableTable.getNameIndex(), localVariableTable.getLength(), localVariableTable.getLocalVariableTable(), localVariableTable.getConstantPool());\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitLocalVariableTable(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitLocalVariableTable(this);\n     }\n     \n     public Attribute copy(final ConstantPool constantPool) {\n-        final LocalVariableTable c = (LocalVariableTable)this.clone();\n-        Arrays.setAll(c.localVariableTable = new LocalVariable[this.localVariableTable.length], i -> this.localVariableTable[i].copy());\n-        c.setConstantPool(constantPool);\n-        return c;\n+        final LocalVariableTable localVariableTable = (LocalVariableTable)this.clone();\n+        Arrays.setAll(localVariableTable.localVariableTable = new LocalVariable[this.localVariableTable.length], n2 -> this.localVariableTable[n2].copy());\n+        localVariableTable.setConstantPool(constantPool);\n+        return localVariableTable;\n     }\n     \n-    public final void dump(final DataOutputStream file) throws IOException {\n-        super.dump(file);\n-        file.writeShort(this.localVariableTable.length);\n-        for (final LocalVariable variable : this.localVariableTable) {\n-            variable.dump(file);\n+    public final void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        super.dump(dataOutputStream);\n+        dataOutputStream.writeShort(this.localVariableTable.length);\n+        final LocalVariable[] localVariableTable = this.localVariableTable;\n+        for (int length = localVariableTable.length, i = 0; i < length; ++i) {\n+            localVariableTable[i].dump(dataOutputStream);\n         }\n     }\n     \n     @Deprecated\n-    public final LocalVariable getLocalVariable(final int index) {\n-        for (final LocalVariable variable : this.localVariableTable) {\n-            if (variable.getIndex() == index) {\n-                return variable;\n+    public final LocalVariable getLocalVariable(final int n) {\n+        for (final LocalVariable localVariable : this.localVariableTable) {\n+            if (localVariable.getIndex() == n) {\n+                return localVariable;\n             }\n         }\n         return null;\n     }\n     \n-    public final LocalVariable getLocalVariable(final int index, final int pc) {\n-        for (final LocalVariable variable : this.localVariableTable) {\n-            if (variable.getIndex() == index) {\n-                final int startPc = variable.getStartPC();\n-                final int endPc = startPc + variable.getLength();\n-                if (pc >= startPc && pc <= endPc) {\n-                    return variable;\n+    public final LocalVariable getLocalVariable(final int n, final int n2) {\n+        for (final LocalVariable localVariable : this.localVariableTable) {\n+            if (localVariable.getIndex() == n) {\n+                final int startPC = localVariable.getStartPC();\n+                final int n3 = startPC + localVariable.getLength();\n+                if (n2 >= startPC && n2 <= n3) {\n+                    return localVariable;\n                 }\n             }\n         }\n         return null;\n     }\n     \n     public final LocalVariable[] getLocalVariableTable() {\n@@ -85,17 +86,17 @@\n     }\n     \n     public final void setLocalVariableTable(final LocalVariable[] localVariableTable) {\n         this.localVariableTable = localVariableTable;\n     }\n     \n     public final String toString() {\n-        final StringBuilder buf = new StringBuilder();\n+        final StringBuilder sb = new StringBuilder();\n         for (int i = 0; i < this.localVariableTable.length; ++i) {\n-            buf.append(this.localVariableTable[i]);\n+            sb.append(this.localVariableTable[i]);\n             if (i < this.localVariableTable.length - 1) {\n-                buf.append('\\n');\n+                sb.append('\\n');\n             }\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n }\n"}]}
