{"diffoscope-json-version": 1, "source1": "first/ArchiveStreamFactory.class", "source2": "second/ArchiveStreamFactory.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -52,244 +52,247 @@\n     private SortedMap<String, ArchiveStreamProvider> archiveInputStreamProviders;\n     private SortedMap<String, ArchiveStreamProvider> archiveOutputStreamProviders;\n     \n     private static ArrayList<ArchiveStreamProvider> findArchiveStreamProviders() {\n         return Lists.newArrayList((Iterator)serviceLoaderIterator());\n     }\n     \n-    static void putAll(final Set<String> names, final ArchiveStreamProvider provider, final TreeMap<String, ArchiveStreamProvider> map) {\n-        for (final String name : names) {\n-            map.put(toKey(name), provider);\n+    static void putAll(final Set<String> set, final ArchiveStreamProvider value, final TreeMap<String, ArchiveStreamProvider> treeMap) {\n+        final Iterator<String> iterator = set.iterator();\n+        while (iterator.hasNext()) {\n+            treeMap.put(toKey((String)iterator.next()), value);\n         }\n     }\n     \n     private static Iterator<ArchiveStreamProvider> serviceLoaderIterator() {\n         return (Iterator<ArchiveStreamProvider>)new ServiceLoaderIterator((Class)ArchiveStreamProvider.class);\n     }\n     \n-    private static String toKey(final String name) {\n-        return name.toUpperCase(Locale.ROOT);\n+    private static String toKey(final String s) {\n+        return s.toUpperCase(Locale.ROOT);\n     }\n     \n     public static SortedMap<String, ArchiveStreamProvider> findAvailableArchiveInputStreamProviders() {\n         return AccessController.doPrivileged((PrivilegedAction<SortedMap<String, ArchiveStreamProvider>>)new ArchiveStreamFactory.ArchiveStreamFactory$1());\n     }\n     \n     public static SortedMap<String, ArchiveStreamProvider> findAvailableArchiveOutputStreamProviders() {\n         return AccessController.doPrivileged((PrivilegedAction<SortedMap<String, ArchiveStreamProvider>>)new ArchiveStreamFactory.ArchiveStreamFactory$2());\n     }\n     \n     public ArchiveStreamFactory() {\n         this(null);\n     }\n     \n-    public ArchiveStreamFactory(final String encoding) {\n-        this.encoding = encoding;\n-        this.entryEncoding = encoding;\n+    public ArchiveStreamFactory(final String s) {\n+        this.encoding = s;\n+        this.entryEncoding = s;\n     }\n     \n     public String getEntryEncoding() {\n         return this.entryEncoding;\n     }\n     \n     @Deprecated\n     public void setEntryEncoding(final String entryEncoding) {\n         if (this.encoding != null) {\n             throw new IllegalStateException(\"Cannot overide encoding set by the constructor\");\n         }\n         this.entryEncoding = entryEncoding;\n     }\n     \n-    public ArchiveInputStream createArchiveInputStream(final String archiverName, final InputStream in) throws ArchiveException {\n-        return this.createArchiveInputStream(archiverName, in, this.entryEncoding);\n+    public ArchiveInputStream createArchiveInputStream(final String s, final InputStream inputStream) throws ArchiveException {\n+        return this.createArchiveInputStream(s, inputStream, this.entryEncoding);\n     }\n     \n-    public ArchiveInputStream createArchiveInputStream(final String archiverName, final InputStream in, final String actualEncoding) throws ArchiveException {\n-        if (archiverName == null) {\n+    public ArchiveInputStream createArchiveInputStream(final String str, final InputStream inputStream, final String s) throws ArchiveException {\n+        if (str == null) {\n             throw new IllegalArgumentException(\"Archivername must not be null.\");\n         }\n-        if (in == null) {\n+        if (inputStream == null) {\n             throw new IllegalArgumentException(\"InputStream must not be null.\");\n         }\n-        if (\"ar\".equalsIgnoreCase(archiverName)) {\n-            return (ArchiveInputStream)new ArArchiveInputStream(in);\n+        if (\"ar\".equalsIgnoreCase(str)) {\n+            return (ArchiveInputStream)new ArArchiveInputStream(inputStream);\n         }\n-        if (\"arj\".equalsIgnoreCase(archiverName)) {\n-            if (actualEncoding != null) {\n-                return (ArchiveInputStream)new ArjArchiveInputStream(in, actualEncoding);\n+        if (\"arj\".equalsIgnoreCase(str)) {\n+            if (s != null) {\n+                return (ArchiveInputStream)new ArjArchiveInputStream(inputStream, s);\n             }\n-            return (ArchiveInputStream)new ArjArchiveInputStream(in);\n+            return (ArchiveInputStream)new ArjArchiveInputStream(inputStream);\n         }\n-        else if (\"zip\".equalsIgnoreCase(archiverName)) {\n-            if (actualEncoding != null) {\n-                return (ArchiveInputStream)new ZipArchiveInputStream(in, actualEncoding);\n+        else if (\"zip\".equalsIgnoreCase(str)) {\n+            if (s != null) {\n+                return (ArchiveInputStream)new ZipArchiveInputStream(inputStream, s);\n             }\n-            return (ArchiveInputStream)new ZipArchiveInputStream(in);\n+            return (ArchiveInputStream)new ZipArchiveInputStream(inputStream);\n         }\n-        else if (\"tar\".equalsIgnoreCase(archiverName)) {\n-            if (actualEncoding != null) {\n-                return (ArchiveInputStream)new TarArchiveInputStream(in, actualEncoding);\n+        else if (\"tar\".equalsIgnoreCase(str)) {\n+            if (s != null) {\n+                return (ArchiveInputStream)new TarArchiveInputStream(inputStream, s);\n             }\n-            return (ArchiveInputStream)new TarArchiveInputStream(in);\n+            return (ArchiveInputStream)new TarArchiveInputStream(inputStream);\n         }\n-        else if (\"jar\".equalsIgnoreCase(archiverName)) {\n-            if (actualEncoding != null) {\n-                return (ArchiveInputStream)new JarArchiveInputStream(in, actualEncoding);\n+        else if (\"jar\".equalsIgnoreCase(str)) {\n+            if (s != null) {\n+                return (ArchiveInputStream)new JarArchiveInputStream(inputStream, s);\n             }\n-            return (ArchiveInputStream)new JarArchiveInputStream(in);\n+            return (ArchiveInputStream)new JarArchiveInputStream(inputStream);\n         }\n-        else if (\"cpio\".equalsIgnoreCase(archiverName)) {\n-            if (actualEncoding != null) {\n-                return (ArchiveInputStream)new CpioArchiveInputStream(in, actualEncoding);\n+        else if (\"cpio\".equalsIgnoreCase(str)) {\n+            if (s != null) {\n+                return (ArchiveInputStream)new CpioArchiveInputStream(inputStream, s);\n             }\n-            return (ArchiveInputStream)new CpioArchiveInputStream(in);\n+            return (ArchiveInputStream)new CpioArchiveInputStream(inputStream);\n         }\n-        else if (\"dump\".equalsIgnoreCase(archiverName)) {\n-            if (actualEncoding != null) {\n-                return (ArchiveInputStream)new DumpArchiveInputStream(in, actualEncoding);\n+        else if (\"dump\".equalsIgnoreCase(str)) {\n+            if (s != null) {\n+                return (ArchiveInputStream)new DumpArchiveInputStream(inputStream, s);\n             }\n-            return (ArchiveInputStream)new DumpArchiveInputStream(in);\n+            return (ArchiveInputStream)new DumpArchiveInputStream(inputStream);\n         }\n         else {\n-            if (\"7z\".equalsIgnoreCase(archiverName)) {\n+            if (\"7z\".equalsIgnoreCase(str)) {\n                 throw new StreamingNotSupportedException(\"7z\");\n             }\n-            final ArchiveStreamProvider archiveStreamProvider = (ArchiveStreamProvider)this.getArchiveInputStreamProviders().get(toKey(archiverName));\n+            final ArchiveStreamProvider archiveStreamProvider = (ArchiveStreamProvider)this.getArchiveInputStreamProviders().get(toKey(str));\n             if (archiveStreamProvider != null) {\n-                return archiveStreamProvider.createArchiveInputStream(archiverName, in, actualEncoding);\n+                return archiveStreamProvider.createArchiveInputStream(str, inputStream, s);\n             }\n-            throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\");\n+            throw new ArchiveException(\"Archiver: \" + str + \" not found.\");\n         }\n     }\n     \n-    public ArchiveOutputStream createArchiveOutputStream(final String archiverName, final OutputStream out) throws ArchiveException {\n-        return this.createArchiveOutputStream(archiverName, out, this.entryEncoding);\n+    public ArchiveOutputStream createArchiveOutputStream(final String s, final OutputStream outputStream) throws ArchiveException {\n+        return this.createArchiveOutputStream(s, outputStream, this.entryEncoding);\n     }\n     \n-    public ArchiveOutputStream createArchiveOutputStream(final String archiverName, final OutputStream out, final String actualEncoding) throws ArchiveException {\n-        if (archiverName == null) {\n+    public ArchiveOutputStream createArchiveOutputStream(final String str, final OutputStream outputStream, final String encoding) throws ArchiveException {\n+        if (str == null) {\n             throw new IllegalArgumentException(\"Archivername must not be null.\");\n         }\n-        if (out == null) {\n+        if (outputStream == null) {\n             throw new IllegalArgumentException(\"OutputStream must not be null.\");\n         }\n-        if (\"ar\".equalsIgnoreCase(archiverName)) {\n-            return (ArchiveOutputStream)new ArArchiveOutputStream(out);\n+        if (\"ar\".equalsIgnoreCase(str)) {\n+            return (ArchiveOutputStream)new ArArchiveOutputStream(outputStream);\n         }\n-        if (\"zip\".equalsIgnoreCase(archiverName)) {\n-            final ZipArchiveOutputStream zip = new ZipArchiveOutputStream(out);\n-            if (actualEncoding != null) {\n-                zip.setEncoding(actualEncoding);\n+        if (\"zip\".equalsIgnoreCase(str)) {\n+            final ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(outputStream);\n+            if (encoding != null) {\n+                zipArchiveOutputStream.setEncoding(encoding);\n             }\n-            return (ArchiveOutputStream)zip;\n+            return (ArchiveOutputStream)zipArchiveOutputStream;\n         }\n-        if (\"tar\".equalsIgnoreCase(archiverName)) {\n-            if (actualEncoding != null) {\n-                return (ArchiveOutputStream)new TarArchiveOutputStream(out, actualEncoding);\n+        if (\"tar\".equalsIgnoreCase(str)) {\n+            if (encoding != null) {\n+                return (ArchiveOutputStream)new TarArchiveOutputStream(outputStream, encoding);\n             }\n-            return (ArchiveOutputStream)new TarArchiveOutputStream(out);\n+            return (ArchiveOutputStream)new TarArchiveOutputStream(outputStream);\n         }\n-        else if (\"jar\".equalsIgnoreCase(archiverName)) {\n-            if (actualEncoding != null) {\n-                return (ArchiveOutputStream)new JarArchiveOutputStream(out, actualEncoding);\n+        else if (\"jar\".equalsIgnoreCase(str)) {\n+            if (encoding != null) {\n+                return (ArchiveOutputStream)new JarArchiveOutputStream(outputStream, encoding);\n             }\n-            return (ArchiveOutputStream)new JarArchiveOutputStream(out);\n+            return (ArchiveOutputStream)new JarArchiveOutputStream(outputStream);\n         }\n-        else if (\"cpio\".equalsIgnoreCase(archiverName)) {\n-            if (actualEncoding != null) {\n-                return (ArchiveOutputStream)new CpioArchiveOutputStream(out, actualEncoding);\n+        else if (\"cpio\".equalsIgnoreCase(str)) {\n+            if (encoding != null) {\n+                return (ArchiveOutputStream)new CpioArchiveOutputStream(outputStream, encoding);\n             }\n-            return (ArchiveOutputStream)new CpioArchiveOutputStream(out);\n+            return (ArchiveOutputStream)new CpioArchiveOutputStream(outputStream);\n         }\n         else {\n-            if (\"7z\".equalsIgnoreCase(archiverName)) {\n+            if (\"7z\".equalsIgnoreCase(str)) {\n                 throw new StreamingNotSupportedException(\"7z\");\n             }\n-            final ArchiveStreamProvider archiveStreamProvider = (ArchiveStreamProvider)this.getArchiveOutputStreamProviders().get(toKey(archiverName));\n+            final ArchiveStreamProvider archiveStreamProvider = (ArchiveStreamProvider)this.getArchiveOutputStreamProviders().get(toKey(str));\n             if (archiveStreamProvider != null) {\n-                return archiveStreamProvider.createArchiveOutputStream(archiverName, out, actualEncoding);\n+                return archiveStreamProvider.createArchiveOutputStream(str, outputStream, encoding);\n             }\n-            throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\");\n+            throw new ArchiveException(\"Archiver: \" + str + \" not found.\");\n         }\n     }\n     \n-    public ArchiveInputStream createArchiveInputStream(final InputStream in) throws ArchiveException {\n-        return this.createArchiveInputStream(detect(in), in);\n+    public ArchiveInputStream createArchiveInputStream(final InputStream inputStream) throws ArchiveException {\n+        return this.createArchiveInputStream(detect(inputStream), inputStream);\n     }\n     \n-    public static String detect(final InputStream in) throws ArchiveException {\n-        if (in == null) {\n+    public static String detect(final InputStream inputStream) throws ArchiveException {\n+        if (inputStream == null) {\n             throw new IllegalArgumentException(\"Stream must not be null.\");\n         }\n-        if (!in.markSupported()) {\n+        if (!inputStream.markSupported()) {\n             throw new IllegalArgumentException(\"Mark is not supported.\");\n         }\n-        final byte[] signature = new byte[12];\n-        in.mark(signature.length);\n-        int signatureLength = -1;\n+        final byte[] array = new byte[12];\n+        inputStream.mark(array.length);\n+        int fully;\n         try {\n-            signatureLength = IOUtils.readFully(in, signature);\n-            in.reset();\n+            fully = IOUtils.readFully(inputStream, array);\n+            inputStream.reset();\n         }\n-        catch (final IOException e) {\n-            throw new ArchiveException(\"IOException while reading signature.\", (Exception)e);\n+        catch (final IOException ex) {\n+            throw new ArchiveException(\"IOException while reading signature.\", (Exception)ex);\n         }\n-        if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n+        if (ZipArchiveInputStream.matches(array, fully)) {\n             return \"zip\";\n         }\n-        if (JarArchiveInputStream.matches(signature, signatureLength)) {\n+        if (JarArchiveInputStream.matches(array, fully)) {\n             return \"jar\";\n         }\n-        if (ArArchiveInputStream.matches(signature, signatureLength)) {\n+        if (ArArchiveInputStream.matches(array, fully)) {\n             return \"ar\";\n         }\n-        if (CpioArchiveInputStream.matches(signature, signatureLength)) {\n+        if (CpioArchiveInputStream.matches(array, fully)) {\n             return \"cpio\";\n         }\n-        if (ArjArchiveInputStream.matches(signature, signatureLength)) {\n+        if (ArjArchiveInputStream.matches(array, fully)) {\n             return \"arj\";\n         }\n-        if (SevenZFile.matches(signature, signatureLength)) {\n+        if (SevenZFile.matches(array, fully)) {\n             return \"7z\";\n         }\n-        final byte[] dumpsig = new byte[32];\n-        in.mark(dumpsig.length);\n+        final byte[] array2 = new byte[32];\n+        inputStream.mark(array2.length);\n+        int fully2;\n         try {\n-            signatureLength = IOUtils.readFully(in, dumpsig);\n-            in.reset();\n+            fully2 = IOUtils.readFully(inputStream, array2);\n+            inputStream.reset();\n         }\n-        catch (final IOException e2) {\n-            throw new ArchiveException(\"IOException while reading dump signature\", (Exception)e2);\n+        catch (final IOException ex2) {\n+            throw new ArchiveException(\"IOException while reading dump signature\", (Exception)ex2);\n         }\n-        if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {\n+        if (DumpArchiveInputStream.matches(array2, fully2)) {\n             return \"dump\";\n         }\n-        final byte[] tarHeader = new byte[512];\n-        in.mark(tarHeader.length);\n+        final byte[] buf = new byte[512];\n+        inputStream.mark(buf.length);\n+        int fully3;\n         try {\n-            signatureLength = IOUtils.readFully(in, tarHeader);\n-            in.reset();\n+            fully3 = IOUtils.readFully(inputStream, buf);\n+            inputStream.reset();\n         }\n-        catch (final IOException e3) {\n-            throw new ArchiveException(\"IOException while reading tar signature\", (Exception)e3);\n+        catch (final IOException ex3) {\n+            throw new ArchiveException(\"IOException while reading tar signature\", (Exception)ex3);\n         }\n-        if (TarArchiveInputStream.matches(tarHeader, signatureLength)) {\n+        if (TarArchiveInputStream.matches(buf, fully3)) {\n             return \"tar\";\n         }\n-        if (signatureLength >= 512) {\n-            TarArchiveInputStream tais = null;\n+        if (fully3 >= 512) {\n+            Object o = null;\n             try {\n-                tais = new TarArchiveInputStream((InputStream)new ByteArrayInputStream(tarHeader));\n-                if (tais.getNextTarEntry().isCheckSumOK()) {\n+                o = new TarArchiveInputStream((InputStream)new ByteArrayInputStream(buf));\n+                if (((TarArchiveInputStream)o).getNextTarEntry().isCheckSumOK()) {\n                     return \"tar\";\n                 }\n             }\n-            catch (final Exception ex) {}\n+            catch (final Exception ex4) {}\n             finally {\n-                IOUtils.closeQuietly((Closeable)tais);\n+                IOUtils.closeQuietly((Closeable)o);\n             }\n         }\n         throw new ArchiveException(\"No Archiver found for the stream signature\");\n     }\n     \n     public SortedMap<String, ArchiveStreamProvider> getArchiveInputStreamProviders() {\n         if (this.archiveInputStreamProviders == null) {\n"}]}
