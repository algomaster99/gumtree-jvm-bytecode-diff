{"diffoscope-json-version": 1, "source1": "first/SimpleCharStream.class", "source2": "second/SimpleCharStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -22,48 +22,48 @@\n     protected boolean prevCharIsLF;\n     protected Reader inputStream;\n     protected char[] buffer;\n     protected int maxNextCharInd;\n     protected int inBuf;\n     protected int tabSize;\n     \n-    protected void setTabSize(final int i) {\n-        this.tabSize = i;\n+    protected void setTabSize(final int tabSize) {\n+        this.tabSize = tabSize;\n     }\n     \n-    protected int getTabSize(final int i) {\n+    protected int getTabSize(final int n) {\n         return this.tabSize;\n     }\n     \n-    protected void ExpandBuff(final boolean wrapAround) {\n-        final char[] newbuffer = new char[this.bufsize + 2048];\n-        final int[] newbufline = new int[this.bufsize + 2048];\n-        final int[] newbufcolumn = new int[this.bufsize + 2048];\n+    protected void ExpandBuff(final boolean b) {\n+        final char[] array = new char[this.bufsize + 2048];\n+        final int[] array2 = new int[this.bufsize + 2048];\n+        final int[] array3 = new int[this.bufsize + 2048];\n         try {\n-            if (wrapAround) {\n-                System.arraycopy(this.buffer, this.tokenBegin, newbuffer, 0, this.bufsize - this.tokenBegin);\n-                System.arraycopy(this.buffer, 0, newbuffer, this.bufsize - this.tokenBegin, this.bufpos);\n-                this.buffer = newbuffer;\n-                System.arraycopy(this.bufline, this.tokenBegin, newbufline, 0, this.bufsize - this.tokenBegin);\n-                System.arraycopy(this.bufline, 0, newbufline, this.bufsize - this.tokenBegin, this.bufpos);\n-                this.bufline = newbufline;\n-                System.arraycopy(this.bufcolumn, this.tokenBegin, newbufcolumn, 0, this.bufsize - this.tokenBegin);\n-                System.arraycopy(this.bufcolumn, 0, newbufcolumn, this.bufsize - this.tokenBegin, this.bufpos);\n-                this.bufcolumn = newbufcolumn;\n+            if (b) {\n+                System.arraycopy(this.buffer, this.tokenBegin, array, 0, this.bufsize - this.tokenBegin);\n+                System.arraycopy(this.buffer, 0, array, this.bufsize - this.tokenBegin, this.bufpos);\n+                this.buffer = array;\n+                System.arraycopy(this.bufline, this.tokenBegin, array2, 0, this.bufsize - this.tokenBegin);\n+                System.arraycopy(this.bufline, 0, array2, this.bufsize - this.tokenBegin, this.bufpos);\n+                this.bufline = array2;\n+                System.arraycopy(this.bufcolumn, this.tokenBegin, array3, 0, this.bufsize - this.tokenBegin);\n+                System.arraycopy(this.bufcolumn, 0, array3, this.bufsize - this.tokenBegin, this.bufpos);\n+                this.bufcolumn = array3;\n                 final int n = this.bufpos + (this.bufsize - this.tokenBegin);\n                 this.bufpos = n;\n                 this.maxNextCharInd = n;\n             }\n             else {\n-                System.arraycopy(this.buffer, this.tokenBegin, newbuffer, 0, this.bufsize - this.tokenBegin);\n-                this.buffer = newbuffer;\n-                System.arraycopy(this.bufline, this.tokenBegin, newbufline, 0, this.bufsize - this.tokenBegin);\n-                this.bufline = newbufline;\n-                System.arraycopy(this.bufcolumn, this.tokenBegin, newbufcolumn, 0, this.bufsize - this.tokenBegin);\n-                this.bufcolumn = newbufcolumn;\n+                System.arraycopy(this.buffer, this.tokenBegin, array, 0, this.bufsize - this.tokenBegin);\n+                this.buffer = array;\n+                System.arraycopy(this.bufline, this.tokenBegin, array2, 0, this.bufsize - this.tokenBegin);\n+                this.bufline = array2;\n+                System.arraycopy(this.bufcolumn, this.tokenBegin, array3, 0, this.bufsize - this.tokenBegin);\n+                this.bufcolumn = array3;\n                 final int n2 = this.bufpos - this.tokenBegin;\n                 this.bufpos = n2;\n                 this.maxNextCharInd = n2;\n             }\n         }\n         catch (final Throwable t) {\n             throw new Error(t.getMessage());\n@@ -98,36 +98,36 @@\n                 this.ExpandBuff(true);\n             }\n             else {\n                 this.available = this.tokenBegin;\n             }\n         }\n         try {\n-            final int i;\n-            if ((i = this.inputStream.read(this.buffer, this.maxNextCharInd, this.available - this.maxNextCharInd)) == -1) {\n+            final int read;\n+            if ((read = this.inputStream.read(this.buffer, this.maxNextCharInd, this.available - this.maxNextCharInd)) == -1) {\n                 this.inputStream.close();\n                 throw new IOException();\n             }\n-            this.maxNextCharInd += i;\n+            this.maxNextCharInd += read;\n         }\n-        catch (final IOException e) {\n+        catch (final IOException ex) {\n             --this.bufpos;\n             this.backup(0);\n             if (this.tokenBegin == -1) {\n                 this.tokenBegin = this.bufpos;\n             }\n-            throw e;\n+            throw ex;\n         }\n     }\n     \n     public char BeginToken() throws IOException {\n         this.tokenBegin = -1;\n-        final char c = this.readChar();\n+        final char char1 = this.readChar();\n         this.tokenBegin = this.bufpos;\n-        return c;\n+        return char1;\n     }\n     \n     protected void UpdateLineColumn(final char c) {\n         ++this.column;\n         if (this.prevCharIsLF) {\n             this.prevCharIsLF = false;\n             final int line = this.line;\n@@ -204,182 +204,181 @@\n         return this.bufcolumn[this.tokenBegin];\n     }\n     \n     public int getBeginLine() {\n         return this.bufline[this.tokenBegin];\n     }\n     \n-    public void backup(final int amount) {\n-        this.inBuf += amount;\n-        final int bufpos = this.bufpos - amount;\n+    public void backup(final int n) {\n+        this.inBuf += n;\n+        final int bufpos = this.bufpos - n;\n         this.bufpos = bufpos;\n         if (bufpos < 0) {\n             this.bufpos += this.bufsize;\n         }\n     }\n     \n-    public SimpleCharStream(final Reader dstream, final int startline, final int startcolumn, final int buffersize) {\n+    public SimpleCharStream(final Reader inputStream, final int line, final int n, final int n2) {\n         this.bufpos = -1;\n         this.column = 0;\n         this.line = 1;\n         this.prevCharIsCR = false;\n         this.prevCharIsLF = false;\n         this.maxNextCharInd = 0;\n         this.inBuf = 0;\n         this.tabSize = 8;\n-        this.inputStream = dstream;\n-        this.line = startline;\n-        this.column = startcolumn - 1;\n-        this.bufsize = buffersize;\n-        this.available = buffersize;\n-        this.buffer = new char[buffersize];\n-        this.bufline = new int[buffersize];\n-        this.bufcolumn = new int[buffersize];\n-    }\n-    \n-    public SimpleCharStream(final Reader dstream, final int startline, final int startcolumn) {\n-        this(dstream, startline, startcolumn, 4096);\n-    }\n-    \n-    public SimpleCharStream(final Reader dstream) {\n-        this(dstream, 1, 1, 4096);\n-    }\n-    \n-    public void ReInit(final Reader dstream, final int startline, final int startcolumn, final int buffersize) {\n-        this.inputStream = dstream;\n-        this.line = startline;\n-        this.column = startcolumn - 1;\n-        if (this.buffer == null || buffersize != this.buffer.length) {\n-            this.bufsize = buffersize;\n-            this.available = buffersize;\n-            this.buffer = new char[buffersize];\n-            this.bufline = new int[buffersize];\n-            this.bufcolumn = new int[buffersize];\n+        this.inputStream = inputStream;\n+        this.line = line;\n+        this.column = n - 1;\n+        this.bufsize = n2;\n+        this.available = n2;\n+        this.buffer = new char[n2];\n+        this.bufline = new int[n2];\n+        this.bufcolumn = new int[n2];\n+    }\n+    \n+    public SimpleCharStream(final Reader reader, final int n, final int n2) {\n+        this(reader, n, n2, 4096);\n+    }\n+    \n+    public SimpleCharStream(final Reader reader) {\n+        this(reader, 1, 1, 4096);\n+    }\n+    \n+    public void ReInit(final Reader inputStream, final int line, final int n, final int n2) {\n+        this.inputStream = inputStream;\n+        this.line = line;\n+        this.column = n - 1;\n+        if (this.buffer == null || n2 != this.buffer.length) {\n+            this.bufsize = n2;\n+            this.available = n2;\n+            this.buffer = new char[n2];\n+            this.bufline = new int[n2];\n+            this.bufcolumn = new int[n2];\n         }\n         final boolean b = false;\n         this.prevCharIsCR = b;\n         this.prevCharIsLF = b;\n         final int tokenBegin = 0;\n         this.maxNextCharInd = tokenBegin;\n         this.inBuf = tokenBegin;\n         this.tokenBegin = tokenBegin;\n         this.bufpos = -1;\n     }\n     \n-    public void ReInit(final Reader dstream, final int startline, final int startcolumn) {\n-        this.ReInit(dstream, startline, startcolumn, 4096);\n+    public void ReInit(final Reader reader, final int n, final int n2) {\n+        this.ReInit(reader, n, n2, 4096);\n     }\n     \n-    public void ReInit(final Reader dstream) {\n-        this.ReInit(dstream, 1, 1, 4096);\n+    public void ReInit(final Reader reader) {\n+        this.ReInit(reader, 1, 1, 4096);\n     }\n     \n-    public SimpleCharStream(final InputStream dstream, final String encoding, final int startline, final int startcolumn, final int buffersize) throws UnsupportedEncodingException {\n-        this((encoding == null) ? new InputStreamReader(dstream) : new InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);\n+    public SimpleCharStream(final InputStream inputStream, final String charsetName, final int n, final int n2, final int n3) throws UnsupportedEncodingException {\n+        this((charsetName == null) ? new InputStreamReader(inputStream) : new InputStreamReader(inputStream, charsetName), n, n2, n3);\n     }\n     \n-    public SimpleCharStream(final InputStream dstream, final int startline, final int startcolumn, final int buffersize) {\n-        this(new InputStreamReader(dstream), startline, startcolumn, buffersize);\n+    public SimpleCharStream(final InputStream in, final int n, final int n2, final int n3) {\n+        this(new InputStreamReader(in), n, n2, n3);\n     }\n     \n-    public SimpleCharStream(final InputStream dstream, final String encoding, final int startline, final int startcolumn) throws UnsupportedEncodingException {\n-        this(dstream, encoding, startline, startcolumn, 4096);\n+    public SimpleCharStream(final InputStream inputStream, final String s, final int n, final int n2) throws UnsupportedEncodingException {\n+        this(inputStream, s, n, n2, 4096);\n     }\n     \n-    public SimpleCharStream(final InputStream dstream, final int startline, final int startcolumn) {\n-        this(dstream, startline, startcolumn, 4096);\n+    public SimpleCharStream(final InputStream inputStream, final int n, final int n2) {\n+        this(inputStream, n, n2, 4096);\n     }\n     \n-    public SimpleCharStream(final InputStream dstream, final String encoding) throws UnsupportedEncodingException {\n-        this(dstream, encoding, 1, 1, 4096);\n+    public SimpleCharStream(final InputStream inputStream, final String s) throws UnsupportedEncodingException {\n+        this(inputStream, s, 1, 1, 4096);\n     }\n     \n-    public SimpleCharStream(final InputStream dstream) {\n-        this(dstream, 1, 1, 4096);\n+    public SimpleCharStream(final InputStream inputStream) {\n+        this(inputStream, 1, 1, 4096);\n     }\n     \n-    public void ReInit(final InputStream dstream, final String encoding, final int startline, final int startcolumn, final int buffersize) throws UnsupportedEncodingException {\n-        this.ReInit((encoding == null) ? new InputStreamReader(dstream) : new InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);\n+    public void ReInit(final InputStream inputStream, final String charsetName, final int n, final int n2, final int n3) throws UnsupportedEncodingException {\n+        this.ReInit((charsetName == null) ? new InputStreamReader(inputStream) : new InputStreamReader(inputStream, charsetName), n, n2, n3);\n     }\n     \n-    public void ReInit(final InputStream dstream, final int startline, final int startcolumn, final int buffersize) {\n-        this.ReInit(new InputStreamReader(dstream), startline, startcolumn, buffersize);\n+    public void ReInit(final InputStream in, final int n, final int n2, final int n3) {\n+        this.ReInit(new InputStreamReader(in), n, n2, n3);\n     }\n     \n-    public void ReInit(final InputStream dstream, final String encoding) throws UnsupportedEncodingException {\n-        this.ReInit(dstream, encoding, 1, 1, 4096);\n+    public void ReInit(final InputStream inputStream, final String s) throws UnsupportedEncodingException {\n+        this.ReInit(inputStream, s, 1, 1, 4096);\n     }\n     \n-    public void ReInit(final InputStream dstream) {\n-        this.ReInit(dstream, 1, 1, 4096);\n+    public void ReInit(final InputStream inputStream) {\n+        this.ReInit(inputStream, 1, 1, 4096);\n     }\n     \n-    public void ReInit(final InputStream dstream, final String encoding, final int startline, final int startcolumn) throws UnsupportedEncodingException {\n-        this.ReInit(dstream, encoding, startline, startcolumn, 4096);\n+    public void ReInit(final InputStream inputStream, final String s, final int n, final int n2) throws UnsupportedEncodingException {\n+        this.ReInit(inputStream, s, n, n2, 4096);\n     }\n     \n-    public void ReInit(final InputStream dstream, final int startline, final int startcolumn) {\n-        this.ReInit(dstream, startline, startcolumn, 4096);\n+    public void ReInit(final InputStream inputStream, final int n, final int n2) {\n+        this.ReInit(inputStream, n, n2, 4096);\n     }\n     \n     public String GetImage() {\n         if (this.bufpos >= this.tokenBegin) {\n             return new String(this.buffer, this.tokenBegin, this.bufpos - this.tokenBegin + 1);\n         }\n         return new String(this.buffer, this.tokenBegin, this.bufsize - this.tokenBegin) + new String(this.buffer, 0, this.bufpos + 1);\n     }\n     \n-    public char[] GetSuffix(final int len) {\n-        final char[] ret = new char[len];\n-        if (this.bufpos + 1 >= len) {\n-            System.arraycopy(this.buffer, this.bufpos - len + 1, ret, 0, len);\n+    public char[] GetSuffix(final int n) {\n+        final char[] array = new char[n];\n+        if (this.bufpos + 1 >= n) {\n+            System.arraycopy(this.buffer, this.bufpos - n + 1, array, 0, n);\n         }\n         else {\n-            System.arraycopy(this.buffer, this.bufsize - (len - this.bufpos - 1), ret, 0, len - this.bufpos - 1);\n-            System.arraycopy(this.buffer, 0, ret, len - this.bufpos - 1, this.bufpos + 1);\n+            System.arraycopy(this.buffer, this.bufsize - (n - this.bufpos - 1), array, 0, n - this.bufpos - 1);\n+            System.arraycopy(this.buffer, 0, array, n - this.bufpos - 1, this.bufpos + 1);\n         }\n-        return ret;\n+        return array;\n     }\n     \n     public void Done() {\n         this.buffer = null;\n         this.bufline = null;\n         this.bufcolumn = null;\n     }\n     \n-    public void adjustBeginLineColumn(int newLine, final int newCol) {\n-        int start = this.tokenBegin;\n-        int len;\n+    public void adjustBeginLineColumn(int n, final int n2) {\n+        int tokenBegin = this.tokenBegin;\n+        int n3;\n         if (this.bufpos >= this.tokenBegin) {\n-            len = this.bufpos - this.tokenBegin + this.inBuf + 1;\n+            n3 = this.bufpos - this.tokenBegin + this.inBuf + 1;\n         }\n         else {\n-            len = this.bufsize - this.tokenBegin + this.bufpos + 1 + this.inBuf;\n+            n3 = this.bufsize - this.tokenBegin + this.bufpos + 1 + this.inBuf;\n         }\n-        int i = 0;\n-        int j = 0;\n-        int k = 0;\n-        int nextColDiff = 0;\n-        int columnDiff = 0;\n-        while (i < len && this.bufline[j = start % this.bufsize] == this.bufline[k = ++start % this.bufsize]) {\n-            this.bufline[j] = newLine;\n-            nextColDiff = columnDiff + this.bufcolumn[k] - this.bufcolumn[j];\n-            this.bufcolumn[j] = newCol + columnDiff;\n-            columnDiff = nextColDiff;\n-            ++i;\n-        }\n-        if (i < len) {\n-            this.bufline[j] = newLine++;\n-            this.bufcolumn[j] = newCol + columnDiff;\n-            while (i++ < len) {\n-                if (this.bufline[j = start % this.bufsize] != this.bufline[++start % this.bufsize]) {\n-                    this.bufline[j] = newLine++;\n+        int n4 = 0;\n+        int n5 = 0;\n+        int n6 = 0;\n+        int n7;\n+        while (n4 < n3 && this.bufline[n5 = tokenBegin % this.bufsize] == this.bufline[n7 = ++tokenBegin % this.bufsize]) {\n+            this.bufline[n5] = n;\n+            final int n8 = n6 + this.bufcolumn[n7] - this.bufcolumn[n5];\n+            this.bufcolumn[n5] = n2 + n6;\n+            n6 = n8;\n+            ++n4;\n+        }\n+        if (n4 < n3) {\n+            this.bufline[n5] = n++;\n+            this.bufcolumn[n5] = n2 + n6;\n+            while (n4++ < n3) {\n+                if (this.bufline[n5 = tokenBegin % this.bufsize] != this.bufline[++tokenBegin % this.bufsize]) {\n+                    this.bufline[n5] = n++;\n                 }\n                 else {\n-                    this.bufline[j] = newLine;\n+                    this.bufline[n5] = n;\n                 }\n             }\n         }\n-        this.line = this.bufline[j];\n-        this.column = this.bufcolumn[j];\n+        this.line = this.bufline[n5];\n+        this.column = this.bufcolumn[n5];\n     }\n }\n"}]}
