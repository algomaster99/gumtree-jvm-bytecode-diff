{"diffoscope-json-version": 1, "source1": "first/CountingPathVisitor.class", "source2": "second/CountingPathVisitor.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,178 +1,178 @@\n-  SHA-256 checksum 9473e171af46b25971bf05bbbcc07ca2f3eca52be05861d630c75ff13b1cca5c\n+  SHA-256 checksum dc4d90407e2eff0bef1d7e40c674edcf0a988cfe941347b45e71b3bd9f7ed65d\n   Compiled from \"CountingPathVisitor.java\"\n public class org.apache.commons.io.file.CountingPathVisitor extends org.apache.commons.io.file.SimplePathVisitor\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #1                          // org/apache/commons/io/file/CountingPathVisitor\n-  super_class: #40                        // org/apache/commons/io/file/SimplePathVisitor\n+  super_class: #26                        // org/apache/commons/io/file/SimplePathVisitor\n   interfaces: 0, fields: 4, methods: 17, attributes: 2\n Constant pool:\n-    #1 = Class              #85           // org/apache/commons/io/file/CountingPathVisitor\n-    #2 = Methodref          #86.#87       // org/apache/commons/io/file/Counters.bigIntegerPathCounters:()Lorg/apache/commons/io/file/Counters$PathCounters;\n-    #3 = Methodref          #1.#88        // org/apache/commons/io/file/CountingPathVisitor.\"<init>\":(Lorg/apache/commons/io/file/Counters$PathCounters;)V\n-    #4 = Methodref          #86.#89       // org/apache/commons/io/file/Counters.longPathCounters:()Lorg/apache/commons/io/file/Counters$PathCounters;\n-    #5 = Fieldref           #90.#91       // org/apache/commons/io/filefilter/TrueFileFilter.INSTANCE:Lorg/apache/commons/io/filefilter/IOFileFilter;\n-    #6 = Methodref          #1.#92        // org/apache/commons/io/file/CountingPathVisitor.\"<init>\":(Lorg/apache/commons/io/file/Counters$PathCounters;Lorg/apache/commons/io/file/PathFilter;Lorg/apache/commons/io/file/PathFilter;)V\n-    #7 = Methodref          #40.#93       // org/apache/commons/io/file/SimplePathVisitor.\"<init>\":()V\n-    #8 = String             #94           // pathCounter\n-    #9 = Methodref          #95.#96       // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-   #10 = Class              #97           // org/apache/commons/io/file/Counters$PathCounters\n-   #11 = Fieldref           #1.#98        // org/apache/commons/io/file/CountingPathVisitor.pathCounters:Lorg/apache/commons/io/file/Counters$PathCounters;\n-   #12 = String             #47           // fileFilter\n-   #13 = Class              #99           // org/apache/commons/io/file/PathFilter\n-   #14 = Fieldref           #1.#100       // org/apache/commons/io/file/CountingPathVisitor.fileFilter:Lorg/apache/commons/io/file/PathFilter;\n-   #15 = String             #49           // dirFilter\n-   #16 = Fieldref           #1.#101       // org/apache/commons/io/file/CountingPathVisitor.dirFilter:Lorg/apache/commons/io/file/PathFilter;\n-   #17 = Methodref          #95.#102      // java/util/Objects.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z\n-   #18 = Class              #103          // java/lang/Object\n-   #19 = Methodref          #95.#104      // java/util/Objects.hash:([Ljava/lang/Object;)I\n-   #20 = Methodref          #1.#105       // org/apache/commons/io/file/CountingPathVisitor.updateDirCounter:(Ljava/nio/file/Path;Ljava/io/IOException;)V\n-   #21 = Fieldref           #71.#106      // java/nio/file/FileVisitResult.CONTINUE:Ljava/nio/file/FileVisitResult;\n-   #22 = InterfaceMethodref #13.#107      // org/apache/commons/io/file/PathFilter.accept:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-   #23 = Fieldref           #71.#108      // java/nio/file/FileVisitResult.SKIP_SUBTREE:Ljava/nio/file/FileVisitResult;\n-   #24 = Methodref          #18.#109      // java/lang/Object.toString:()Ljava/lang/String;\n-   #25 = InterfaceMethodref #10.#110      // org/apache/commons/io/file/Counters$PathCounters.getDirectoryCounter:()Lorg/apache/commons/io/file/Counters$Counter;\n-   #26 = InterfaceMethodref #111.#112     // org/apache/commons/io/file/Counters$Counter.increment:()V\n-   #27 = InterfaceMethodref #10.#113      // org/apache/commons/io/file/Counters$PathCounters.getFileCounter:()Lorg/apache/commons/io/file/Counters$Counter;\n-   #28 = InterfaceMethodref #10.#114      // org/apache/commons/io/file/Counters$PathCounters.getByteCounter:()Lorg/apache/commons/io/file/Counters$Counter;\n-   #29 = InterfaceMethodref #115.#116     // java/nio/file/attribute/BasicFileAttributes.size:()J\n-   #30 = InterfaceMethodref #111.#117     // org/apache/commons/io/file/Counters$Counter.add:(J)V\n-   #31 = Class              #118          // java/nio/file/LinkOption\n-   #32 = Methodref          #119.#120     // java/nio/file/Files.exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n-   #33 = Methodref          #1.#121       // org/apache/commons/io/file/CountingPathVisitor.updateFileCounters:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)V\n-   #34 = Class              #122          // java/nio/file/Path\n-   #35 = Methodref          #1.#123       // org/apache/commons/io/file/CountingPathVisitor.postVisitDirectory:(Ljava/nio/file/Path;Ljava/io/IOException;)Ljava/nio/file/FileVisitResult;\n-   #36 = Methodref          #1.#124       // org/apache/commons/io/file/CountingPathVisitor.visitFile:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-   #37 = Methodref          #1.#125       // org/apache/commons/io/file/CountingPathVisitor.preVisitDirectory:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-   #38 = Class              #126          // java/lang/String\n-   #39 = Fieldref           #1.#127       // org/apache/commons/io/file/CountingPathVisitor.EMPTY_STRING_ARRAY:[Ljava/lang/String;\n-   #40 = Class              #128          // org/apache/commons/io/file/SimplePathVisitor\n-   #41 = Utf8               EMPTY_STRING_ARRAY\n-   #42 = Utf8               [Ljava/lang/String;\n-   #43 = Utf8               pathCounters\n-   #44 = Utf8               PathCounters\n-   #45 = Utf8               InnerClasses\n-   #46 = Utf8               Lorg/apache/commons/io/file/Counters$PathCounters;\n-   #47 = Utf8               fileFilter\n-   #48 = Utf8               Lorg/apache/commons/io/file/PathFilter;\n-   #49 = Utf8               dirFilter\n-   #50 = Utf8               withBigIntegerCounters\n-   #51 = Utf8               ()Lorg/apache/commons/io/file/CountingPathVisitor;\n-   #52 = Utf8               Code\n-   #53 = Utf8               LineNumberTable\n-   #54 = Utf8               withLongCounters\n-   #55 = Utf8               <init>\n-   #56 = Utf8               (Lorg/apache/commons/io/file/Counters$PathCounters;)V\n-   #57 = Utf8               (Lorg/apache/commons/io/file/Counters$PathCounters;Lorg/apache/commons/io/file/PathFilter;Lorg/apache/commons/io/file/PathFilter;)V\n-   #58 = Utf8               equals\n-   #59 = Utf8               (Ljava/lang/Object;)Z\n-   #60 = Utf8               StackMapTable\n-   #61 = Utf8               getPathCounters\n-   #62 = Utf8               ()Lorg/apache/commons/io/file/Counters$PathCounters;\n-   #63 = Utf8               hashCode\n-   #64 = Utf8               ()I\n-   #65 = Utf8               postVisitDirectory\n-   #66 = Utf8               (Ljava/nio/file/Path;Ljava/io/IOException;)Ljava/nio/file/FileVisitResult;\n-   #67 = Utf8               Exceptions\n-   #68 = Class              #129          // java/io/IOException\n-   #69 = Utf8               preVisitDirectory\n-   #70 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-   #71 = Class              #130          // java/nio/file/FileVisitResult\n-   #72 = Utf8               toString\n-   #73 = Utf8               ()Ljava/lang/String;\n-   #74 = Utf8               updateDirCounter\n-   #75 = Utf8               (Ljava/nio/file/Path;Ljava/io/IOException;)V\n-   #76 = Utf8               updateFileCounters\n-   #77 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)V\n-   #78 = Utf8               visitFile\n-   #79 = Utf8               (Ljava/lang/Object;Ljava/io/IOException;)Ljava/nio/file/FileVisitResult;\n-   #80 = Utf8               (Ljava/lang/Object;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-   #81 = Utf8               <clinit>\n-   #82 = Utf8               ()V\n-   #83 = Utf8               SourceFile\n-   #84 = Utf8               CountingPathVisitor.java\n-   #85 = Utf8               org/apache/commons/io/file/CountingPathVisitor\n-   #86 = Class              #131          // org/apache/commons/io/file/Counters\n-   #87 = NameAndType        #132:#62      // bigIntegerPathCounters:()Lorg/apache/commons/io/file/Counters$PathCounters;\n-   #88 = NameAndType        #55:#56       // \"<init>\":(Lorg/apache/commons/io/file/Counters$PathCounters;)V\n-   #89 = NameAndType        #133:#62      // longPathCounters:()Lorg/apache/commons/io/file/Counters$PathCounters;\n-   #90 = Class              #134          // org/apache/commons/io/filefilter/TrueFileFilter\n-   #91 = NameAndType        #135:#136     // INSTANCE:Lorg/apache/commons/io/filefilter/IOFileFilter;\n-   #92 = NameAndType        #55:#57       // \"<init>\":(Lorg/apache/commons/io/file/Counters$PathCounters;Lorg/apache/commons/io/file/PathFilter;Lorg/apache/commons/io/file/PathFilter;)V\n-   #93 = NameAndType        #55:#82       // \"<init>\":()V\n-   #94 = Utf8               pathCounter\n-   #95 = Class              #137          // java/util/Objects\n-   #96 = NameAndType        #138:#139     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-   #97 = Utf8               org/apache/commons/io/file/Counters$PathCounters\n-   #98 = NameAndType        #43:#46       // pathCounters:Lorg/apache/commons/io/file/Counters$PathCounters;\n-   #99 = Utf8               org/apache/commons/io/file/PathFilter\n-  #100 = NameAndType        #47:#48       // fileFilter:Lorg/apache/commons/io/file/PathFilter;\n-  #101 = NameAndType        #49:#48       // dirFilter:Lorg/apache/commons/io/file/PathFilter;\n-  #102 = NameAndType        #58:#140      // equals:(Ljava/lang/Object;Ljava/lang/Object;)Z\n-  #103 = Utf8               java/lang/Object\n-  #104 = NameAndType        #141:#142     // hash:([Ljava/lang/Object;)I\n-  #105 = NameAndType        #74:#75       // updateDirCounter:(Ljava/nio/file/Path;Ljava/io/IOException;)V\n-  #106 = NameAndType        #143:#144     // CONTINUE:Ljava/nio/file/FileVisitResult;\n-  #107 = NameAndType        #145:#70      // accept:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-  #108 = NameAndType        #146:#144     // SKIP_SUBTREE:Ljava/nio/file/FileVisitResult;\n-  #109 = NameAndType        #72:#73       // toString:()Ljava/lang/String;\n-  #110 = NameAndType        #147:#149     // getDirectoryCounter:()Lorg/apache/commons/io/file/Counters$Counter;\n-  #111 = Class              #150          // org/apache/commons/io/file/Counters$Counter\n-  #112 = NameAndType        #151:#82      // increment:()V\n-  #113 = NameAndType        #152:#149     // getFileCounter:()Lorg/apache/commons/io/file/Counters$Counter;\n-  #114 = NameAndType        #153:#149     // getByteCounter:()Lorg/apache/commons/io/file/Counters$Counter;\n-  #115 = Class              #154          // java/nio/file/attribute/BasicFileAttributes\n-  #116 = NameAndType        #155:#156     // size:()J\n-  #117 = NameAndType        #157:#158     // add:(J)V\n-  #118 = Utf8               java/nio/file/LinkOption\n-  #119 = Class              #159          // java/nio/file/Files\n-  #120 = NameAndType        #160:#161     // exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n-  #121 = NameAndType        #76:#77       // updateFileCounters:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)V\n-  #122 = Utf8               java/nio/file/Path\n-  #123 = NameAndType        #65:#66       // postVisitDirectory:(Ljava/nio/file/Path;Ljava/io/IOException;)Ljava/nio/file/FileVisitResult;\n-  #124 = NameAndType        #78:#70       // visitFile:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-  #125 = NameAndType        #69:#70       // preVisitDirectory:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-  #126 = Utf8               java/lang/String\n-  #127 = NameAndType        #41:#42       // EMPTY_STRING_ARRAY:[Ljava/lang/String;\n-  #128 = Utf8               org/apache/commons/io/file/SimplePathVisitor\n-  #129 = Utf8               java/io/IOException\n-  #130 = Utf8               java/nio/file/FileVisitResult\n-  #131 = Utf8               org/apache/commons/io/file/Counters\n-  #132 = Utf8               bigIntegerPathCounters\n-  #133 = Utf8               longPathCounters\n-  #134 = Utf8               org/apache/commons/io/filefilter/TrueFileFilter\n-  #135 = Utf8               INSTANCE\n-  #136 = Utf8               Lorg/apache/commons/io/filefilter/IOFileFilter;\n-  #137 = Utf8               java/util/Objects\n-  #138 = Utf8               requireNonNull\n-  #139 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #140 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z\n-  #141 = Utf8               hash\n-  #142 = Utf8               ([Ljava/lang/Object;)I\n-  #143 = Utf8               CONTINUE\n-  #144 = Utf8               Ljava/nio/file/FileVisitResult;\n-  #145 = Utf8               accept\n-  #146 = Utf8               SKIP_SUBTREE\n-  #147 = Utf8               getDirectoryCounter\n-  #148 = Utf8               Counter\n-  #149 = Utf8               ()Lorg/apache/commons/io/file/Counters$Counter;\n-  #150 = Utf8               org/apache/commons/io/file/Counters$Counter\n-  #151 = Utf8               increment\n-  #152 = Utf8               getFileCounter\n-  #153 = Utf8               getByteCounter\n-  #154 = Utf8               java/nio/file/attribute/BasicFileAttributes\n-  #155 = Utf8               size\n-  #156 = Utf8               ()J\n-  #157 = Utf8               add\n-  #158 = Utf8               (J)V\n-  #159 = Utf8               java/nio/file/Files\n-  #160 = Utf8               exists\n-  #161 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+    #1 = Class              #2            // org/apache/commons/io/file/CountingPathVisitor\n+    #2 = Utf8               org/apache/commons/io/file/CountingPathVisitor\n+    #3 = Methodref          #4.#5         // org/apache/commons/io/file/Counters.bigIntegerPathCounters:()Lorg/apache/commons/io/file/Counters$PathCounters;\n+    #4 = Class              #6            // org/apache/commons/io/file/Counters\n+    #5 = NameAndType        #7:#8         // bigIntegerPathCounters:()Lorg/apache/commons/io/file/Counters$PathCounters;\n+    #6 = Utf8               org/apache/commons/io/file/Counters\n+    #7 = Utf8               bigIntegerPathCounters\n+    #8 = Utf8               ()Lorg/apache/commons/io/file/Counters$PathCounters;\n+    #9 = Methodref          #1.#10        // org/apache/commons/io/file/CountingPathVisitor.\"<init>\":(Lorg/apache/commons/io/file/Counters$PathCounters;)V\n+   #10 = NameAndType        #11:#12       // \"<init>\":(Lorg/apache/commons/io/file/Counters$PathCounters;)V\n+   #11 = Utf8               <init>\n+   #12 = Utf8               (Lorg/apache/commons/io/file/Counters$PathCounters;)V\n+   #13 = Methodref          #4.#14        // org/apache/commons/io/file/Counters.longPathCounters:()Lorg/apache/commons/io/file/Counters$PathCounters;\n+   #14 = NameAndType        #15:#8        // longPathCounters:()Lorg/apache/commons/io/file/Counters$PathCounters;\n+   #15 = Utf8               longPathCounters\n+   #16 = Fieldref           #17.#18       // org/apache/commons/io/filefilter/TrueFileFilter.INSTANCE:Lorg/apache/commons/io/filefilter/IOFileFilter;\n+   #17 = Class              #19           // org/apache/commons/io/filefilter/TrueFileFilter\n+   #18 = NameAndType        #20:#21       // INSTANCE:Lorg/apache/commons/io/filefilter/IOFileFilter;\n+   #19 = Utf8               org/apache/commons/io/filefilter/TrueFileFilter\n+   #20 = Utf8               INSTANCE\n+   #21 = Utf8               Lorg/apache/commons/io/filefilter/IOFileFilter;\n+   #22 = Methodref          #1.#23        // org/apache/commons/io/file/CountingPathVisitor.\"<init>\":(Lorg/apache/commons/io/file/Counters$PathCounters;Lorg/apache/commons/io/file/PathFilter;Lorg/apache/commons/io/file/PathFilter;)V\n+   #23 = NameAndType        #11:#24       // \"<init>\":(Lorg/apache/commons/io/file/Counters$PathCounters;Lorg/apache/commons/io/file/PathFilter;Lorg/apache/commons/io/file/PathFilter;)V\n+   #24 = Utf8               (Lorg/apache/commons/io/file/Counters$PathCounters;Lorg/apache/commons/io/file/PathFilter;Lorg/apache/commons/io/file/PathFilter;)V\n+   #25 = Methodref          #26.#27       // org/apache/commons/io/file/SimplePathVisitor.\"<init>\":()V\n+   #26 = Class              #28           // org/apache/commons/io/file/SimplePathVisitor\n+   #27 = NameAndType        #11:#29       // \"<init>\":()V\n+   #28 = Utf8               org/apache/commons/io/file/SimplePathVisitor\n+   #29 = Utf8               ()V\n+   #30 = String             #31           // pathCounter\n+   #31 = Utf8               pathCounter\n+   #32 = Methodref          #33.#34       // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #33 = Class              #35           // java/util/Objects\n+   #34 = NameAndType        #36:#37       // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #35 = Utf8               java/util/Objects\n+   #36 = Utf8               requireNonNull\n+   #37 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #38 = Class              #39           // org/apache/commons/io/file/Counters$PathCounters\n+   #39 = Utf8               org/apache/commons/io/file/Counters$PathCounters\n+   #40 = Fieldref           #1.#41        // org/apache/commons/io/file/CountingPathVisitor.pathCounters:Lorg/apache/commons/io/file/Counters$PathCounters;\n+   #41 = NameAndType        #42:#43       // pathCounters:Lorg/apache/commons/io/file/Counters$PathCounters;\n+   #42 = Utf8               pathCounters\n+   #43 = Utf8               Lorg/apache/commons/io/file/Counters$PathCounters;\n+   #44 = String             #45           // fileFilter\n+   #45 = Utf8               fileFilter\n+   #46 = Class              #47           // org/apache/commons/io/file/PathFilter\n+   #47 = Utf8               org/apache/commons/io/file/PathFilter\n+   #48 = Fieldref           #1.#49        // org/apache/commons/io/file/CountingPathVisitor.fileFilter:Lorg/apache/commons/io/file/PathFilter;\n+   #49 = NameAndType        #45:#50       // fileFilter:Lorg/apache/commons/io/file/PathFilter;\n+   #50 = Utf8               Lorg/apache/commons/io/file/PathFilter;\n+   #51 = String             #52           // dirFilter\n+   #52 = Utf8               dirFilter\n+   #53 = Fieldref           #1.#54        // org/apache/commons/io/file/CountingPathVisitor.dirFilter:Lorg/apache/commons/io/file/PathFilter;\n+   #54 = NameAndType        #52:#50       // dirFilter:Lorg/apache/commons/io/file/PathFilter;\n+   #55 = Methodref          #33.#56       // java/util/Objects.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+   #56 = NameAndType        #57:#58       // equals:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+   #57 = Utf8               equals\n+   #58 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z\n+   #59 = Class              #60           // java/lang/Object\n+   #60 = Utf8               java/lang/Object\n+   #61 = Methodref          #33.#62       // java/util/Objects.hash:([Ljava/lang/Object;)I\n+   #62 = NameAndType        #63:#64       // hash:([Ljava/lang/Object;)I\n+   #63 = Utf8               hash\n+   #64 = Utf8               ([Ljava/lang/Object;)I\n+   #65 = Methodref          #1.#66        // org/apache/commons/io/file/CountingPathVisitor.updateDirCounter:(Ljava/nio/file/Path;Ljava/io/IOException;)V\n+   #66 = NameAndType        #67:#68       // updateDirCounter:(Ljava/nio/file/Path;Ljava/io/IOException;)V\n+   #67 = Utf8               updateDirCounter\n+   #68 = Utf8               (Ljava/nio/file/Path;Ljava/io/IOException;)V\n+   #69 = Fieldref           #70.#71       // java/nio/file/FileVisitResult.CONTINUE:Ljava/nio/file/FileVisitResult;\n+   #70 = Class              #72           // java/nio/file/FileVisitResult\n+   #71 = NameAndType        #73:#74       // CONTINUE:Ljava/nio/file/FileVisitResult;\n+   #72 = Utf8               java/nio/file/FileVisitResult\n+   #73 = Utf8               CONTINUE\n+   #74 = Utf8               Ljava/nio/file/FileVisitResult;\n+   #75 = InterfaceMethodref #46.#76       // org/apache/commons/io/file/PathFilter.accept:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+   #76 = NameAndType        #77:#78       // accept:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+   #77 = Utf8               accept\n+   #78 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+   #79 = Fieldref           #70.#80       // java/nio/file/FileVisitResult.SKIP_SUBTREE:Ljava/nio/file/FileVisitResult;\n+   #80 = NameAndType        #81:#74       // SKIP_SUBTREE:Ljava/nio/file/FileVisitResult;\n+   #81 = Utf8               SKIP_SUBTREE\n+   #82 = Methodref          #59.#83       // java/lang/Object.toString:()Ljava/lang/String;\n+   #83 = NameAndType        #84:#85       // toString:()Ljava/lang/String;\n+   #84 = Utf8               toString\n+   #85 = Utf8               ()Ljava/lang/String;\n+   #86 = InterfaceMethodref #38.#87       // org/apache/commons/io/file/Counters$PathCounters.getDirectoryCounter:()Lorg/apache/commons/io/file/Counters$Counter;\n+   #87 = NameAndType        #88:#89       // getDirectoryCounter:()Lorg/apache/commons/io/file/Counters$Counter;\n+   #88 = Utf8               getDirectoryCounter\n+   #89 = Utf8               ()Lorg/apache/commons/io/file/Counters$Counter;\n+   #90 = InterfaceMethodref #91.#92       // org/apache/commons/io/file/Counters$Counter.increment:()V\n+   #91 = Class              #93           // org/apache/commons/io/file/Counters$Counter\n+   #92 = NameAndType        #94:#29       // increment:()V\n+   #93 = Utf8               org/apache/commons/io/file/Counters$Counter\n+   #94 = Utf8               increment\n+   #95 = InterfaceMethodref #38.#96       // org/apache/commons/io/file/Counters$PathCounters.getFileCounter:()Lorg/apache/commons/io/file/Counters$Counter;\n+   #96 = NameAndType        #97:#89       // getFileCounter:()Lorg/apache/commons/io/file/Counters$Counter;\n+   #97 = Utf8               getFileCounter\n+   #98 = InterfaceMethodref #38.#99       // org/apache/commons/io/file/Counters$PathCounters.getByteCounter:()Lorg/apache/commons/io/file/Counters$Counter;\n+   #99 = NameAndType        #100:#89      // getByteCounter:()Lorg/apache/commons/io/file/Counters$Counter;\n+  #100 = Utf8               getByteCounter\n+  #101 = InterfaceMethodref #102.#103     // java/nio/file/attribute/BasicFileAttributes.size:()J\n+  #102 = Class              #104          // java/nio/file/attribute/BasicFileAttributes\n+  #103 = NameAndType        #105:#106     // size:()J\n+  #104 = Utf8               java/nio/file/attribute/BasicFileAttributes\n+  #105 = Utf8               size\n+  #106 = Utf8               ()J\n+  #107 = InterfaceMethodref #91.#108      // org/apache/commons/io/file/Counters$Counter.add:(J)V\n+  #108 = NameAndType        #109:#110     // add:(J)V\n+  #109 = Utf8               add\n+  #110 = Utf8               (J)V\n+  #111 = Class              #112          // java/nio/file/LinkOption\n+  #112 = Utf8               java/nio/file/LinkOption\n+  #113 = Methodref          #114.#115     // java/nio/file/Files.exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+  #114 = Class              #116          // java/nio/file/Files\n+  #115 = NameAndType        #117:#118     // exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+  #116 = Utf8               java/nio/file/Files\n+  #117 = Utf8               exists\n+  #118 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+  #119 = Methodref          #1.#120       // org/apache/commons/io/file/CountingPathVisitor.updateFileCounters:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)V\n+  #120 = NameAndType        #121:#122     // updateFileCounters:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)V\n+  #121 = Utf8               updateFileCounters\n+  #122 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)V\n+  #123 = Class              #124          // java/nio/file/Path\n+  #124 = Utf8               java/nio/file/Path\n+  #125 = Methodref          #1.#126       // org/apache/commons/io/file/CountingPathVisitor.postVisitDirectory:(Ljava/nio/file/Path;Ljava/io/IOException;)Ljava/nio/file/FileVisitResult;\n+  #126 = NameAndType        #127:#128     // postVisitDirectory:(Ljava/nio/file/Path;Ljava/io/IOException;)Ljava/nio/file/FileVisitResult;\n+  #127 = Utf8               postVisitDirectory\n+  #128 = Utf8               (Ljava/nio/file/Path;Ljava/io/IOException;)Ljava/nio/file/FileVisitResult;\n+  #129 = Methodref          #1.#130       // org/apache/commons/io/file/CountingPathVisitor.visitFile:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+  #130 = NameAndType        #131:#78      // visitFile:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+  #131 = Utf8               visitFile\n+  #132 = Methodref          #1.#133       // org/apache/commons/io/file/CountingPathVisitor.preVisitDirectory:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+  #133 = NameAndType        #134:#78      // preVisitDirectory:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+  #134 = Utf8               preVisitDirectory\n+  #135 = Class              #136          // java/lang/String\n+  #136 = Utf8               java/lang/String\n+  #137 = Fieldref           #1.#138       // org/apache/commons/io/file/CountingPathVisitor.EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+  #138 = NameAndType        #139:#140     // EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+  #139 = Utf8               EMPTY_STRING_ARRAY\n+  #140 = Utf8               [Ljava/lang/String;\n+  #141 = Utf8               withBigIntegerCounters\n+  #142 = Utf8               ()Lorg/apache/commons/io/file/CountingPathVisitor;\n+  #143 = Utf8               Code\n+  #144 = Utf8               LineNumberTable\n+  #145 = Utf8               withLongCounters\n+  #146 = Utf8               (Ljava/lang/Object;)Z\n+  #147 = Utf8               StackMapTable\n+  #148 = Utf8               getPathCounters\n+  #149 = Utf8               hashCode\n+  #150 = Utf8               ()I\n+  #151 = Utf8               Exceptions\n+  #152 = Class              #153          // java/io/IOException\n+  #153 = Utf8               java/io/IOException\n+  #154 = Utf8               (Ljava/lang/Object;Ljava/io/IOException;)Ljava/nio/file/FileVisitResult;\n+  #155 = Utf8               (Ljava/lang/Object;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+  #156 = Utf8               <clinit>\n+  #157 = Utf8               SourceFile\n+  #158 = Utf8               CountingPathVisitor.java\n+  #159 = Utf8               InnerClasses\n+  #160 = Utf8               PathCounters\n+  #161 = Utf8               Counter\n {\n   static final java.lang.String[] EMPTY_STRING_ARRAY;\n     descriptor: [Ljava/lang/String;\n     flags: (0x0018) ACC_STATIC, ACC_FINAL\n \n   private final org.apache.commons.io.file.Counters$PathCounters pathCounters;\n     descriptor: Lorg/apache/commons/io/file/Counters$PathCounters;\n@@ -189,73 +189,73 @@\n   public static org.apache.commons.io.file.CountingPathVisitor withBigIntegerCounters();\n     descriptor: ()Lorg/apache/commons/io/file/CountingPathVisitor;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=3, locals=0, args_size=0\n          0: new           #1                  // class org/apache/commons/io/file/CountingPathVisitor\n          3: dup\n-         4: invokestatic  #2                  // Method org/apache/commons/io/file/Counters.bigIntegerPathCounters:()Lorg/apache/commons/io/file/Counters$PathCounters;\n-         7: invokespecial #3                  // Method \"<init>\":(Lorg/apache/commons/io/file/Counters$PathCounters;)V\n+         4: invokestatic  #3                  // Method org/apache/commons/io/file/Counters.bigIntegerPathCounters:()Lorg/apache/commons/io/file/Counters$PathCounters;\n+         7: invokespecial #9                  // Method \"<init>\":(Lorg/apache/commons/io/file/Counters$PathCounters;)V\n         10: areturn\n       LineNumberTable:\n         line 45: 0\n \n   public static org.apache.commons.io.file.CountingPathVisitor withLongCounters();\n     descriptor: ()Lorg/apache/commons/io/file/CountingPathVisitor;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=3, locals=0, args_size=0\n          0: new           #1                  // class org/apache/commons/io/file/CountingPathVisitor\n          3: dup\n-         4: invokestatic  #4                  // Method org/apache/commons/io/file/Counters.longPathCounters:()Lorg/apache/commons/io/file/Counters$PathCounters;\n-         7: invokespecial #3                  // Method \"<init>\":(Lorg/apache/commons/io/file/Counters$PathCounters;)V\n+         4: invokestatic  #13                 // Method org/apache/commons/io/file/Counters.longPathCounters:()Lorg/apache/commons/io/file/Counters$PathCounters;\n+         7: invokespecial #9                  // Method \"<init>\":(Lorg/apache/commons/io/file/Counters$PathCounters;)V\n         10: areturn\n       LineNumberTable:\n         line 54: 0\n \n   public org.apache.commons.io.file.CountingPathVisitor(org.apache.commons.io.file.Counters$PathCounters);\n     descriptor: (Lorg/apache/commons/io/file/Counters$PathCounters;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: getstatic     #5                  // Field org/apache/commons/io/filefilter/TrueFileFilter.INSTANCE:Lorg/apache/commons/io/filefilter/IOFileFilter;\n-         5: getstatic     #5                  // Field org/apache/commons/io/filefilter/TrueFileFilter.INSTANCE:Lorg/apache/commons/io/filefilter/IOFileFilter;\n-         8: invokespecial #6                  // Method \"<init>\":(Lorg/apache/commons/io/file/Counters$PathCounters;Lorg/apache/commons/io/file/PathFilter;Lorg/apache/commons/io/file/PathFilter;)V\n+         2: getstatic     #16                 // Field org/apache/commons/io/filefilter/TrueFileFilter.INSTANCE:Lorg/apache/commons/io/filefilter/IOFileFilter;\n+         5: getstatic     #16                 // Field org/apache/commons/io/filefilter/TrueFileFilter.INSTANCE:Lorg/apache/commons/io/filefilter/IOFileFilter;\n+         8: invokespecial #22                 // Method \"<init>\":(Lorg/apache/commons/io/file/Counters$PathCounters;Lorg/apache/commons/io/file/PathFilter;Lorg/apache/commons/io/file/PathFilter;)V\n         11: return\n       LineNumberTable:\n         line 67: 0\n         line 68: 11\n \n   public org.apache.commons.io.file.CountingPathVisitor(org.apache.commons.io.file.Counters$PathCounters, org.apache.commons.io.file.PathFilter, org.apache.commons.io.file.PathFilter);\n     descriptor: (Lorg/apache/commons/io/file/Counters$PathCounters;Lorg/apache/commons/io/file/PathFilter;Lorg/apache/commons/io/file/PathFilter;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=4, args_size=4\n          0: aload_0\n-         1: invokespecial #7                  // Method org/apache/commons/io/file/SimplePathVisitor.\"<init>\":()V\n+         1: invokespecial #25                 // Method org/apache/commons/io/file/SimplePathVisitor.\"<init>\":()V\n          4: aload_0\n          5: aload_1\n-         6: ldc           #8                  // String pathCounter\n-         8: invokestatic  #9                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-        11: checkcast     #10                 // class org/apache/commons/io/file/Counters$PathCounters\n-        14: putfield      #11                 // Field pathCounters:Lorg/apache/commons/io/file/Counters$PathCounters;\n+         6: ldc           #30                 // String pathCounter\n+         8: invokestatic  #32                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+        11: checkcast     #38                 // class org/apache/commons/io/file/Counters$PathCounters\n+        14: putfield      #40                 // Field pathCounters:Lorg/apache/commons/io/file/Counters$PathCounters;\n         17: aload_0\n         18: aload_2\n-        19: ldc           #12                 // String fileFilter\n-        21: invokestatic  #9                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-        24: checkcast     #13                 // class org/apache/commons/io/file/PathFilter\n-        27: putfield      #14                 // Field fileFilter:Lorg/apache/commons/io/file/PathFilter;\n+        19: ldc           #44                 // String fileFilter\n+        21: invokestatic  #32                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+        24: checkcast     #46                 // class org/apache/commons/io/file/PathFilter\n+        27: putfield      #48                 // Field fileFilter:Lorg/apache/commons/io/file/PathFilter;\n         30: aload_0\n         31: aload_3\n-        32: ldc           #15                 // String dirFilter\n-        34: invokestatic  #9                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-        37: checkcast     #13                 // class org/apache/commons/io/file/PathFilter\n-        40: putfield      #16                 // Field dirFilter:Lorg/apache/commons/io/file/PathFilter;\n+        32: ldc           #51                 // String dirFilter\n+        34: invokestatic  #32                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+        37: checkcast     #46                 // class org/apache/commons/io/file/PathFilter\n+        40: putfield      #53                 // Field dirFilter:Lorg/apache/commons/io/file/PathFilter;\n         43: return\n       LineNumberTable:\n         line 78: 0\n         line 79: 4\n         line 80: 17\n         line 81: 30\n         line 82: 43\n@@ -275,18 +275,18 @@\n         11: ifne          16\n         14: iconst_0\n         15: ireturn\n         16: aload_1\n         17: checkcast     #1                  // class org/apache/commons/io/file/CountingPathVisitor\n         20: astore_2\n         21: aload_0\n-        22: getfield      #11                 // Field pathCounters:Lorg/apache/commons/io/file/Counters$PathCounters;\n+        22: getfield      #40                 // Field pathCounters:Lorg/apache/commons/io/file/Counters$PathCounters;\n         25: aload_2\n-        26: getfield      #11                 // Field pathCounters:Lorg/apache/commons/io/file/Counters$PathCounters;\n-        29: invokestatic  #17                 // Method java/util/Objects.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+        26: getfield      #40                 // Field pathCounters:Lorg/apache/commons/io/file/Counters$PathCounters;\n+        29: invokestatic  #55                 // Method java/util/Objects.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z\n         32: ireturn\n       LineNumberTable:\n         line 86: 0\n         line 87: 5\n         line 89: 7\n         line 90: 14\n         line 92: 16\n@@ -297,70 +297,70 @@\n \n   public org.apache.commons.io.file.Counters$PathCounters getPathCounters();\n     descriptor: ()Lorg/apache/commons/io/file/Counters$PathCounters;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #11                 // Field pathCounters:Lorg/apache/commons/io/file/Counters$PathCounters;\n+         1: getfield      #40                 // Field pathCounters:Lorg/apache/commons/io/file/Counters$PathCounters;\n          4: areturn\n       LineNumberTable:\n         line 102: 0\n \n   public int hashCode();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=1, args_size=1\n          0: iconst_1\n-         1: anewarray     #18                 // class java/lang/Object\n+         1: anewarray     #59                 // class java/lang/Object\n          4: dup\n          5: iconst_0\n          6: aload_0\n-         7: getfield      #11                 // Field pathCounters:Lorg/apache/commons/io/file/Counters$PathCounters;\n+         7: getfield      #40                 // Field pathCounters:Lorg/apache/commons/io/file/Counters$PathCounters;\n         10: aastore\n-        11: invokestatic  #19                 // Method java/util/Objects.hash:([Ljava/lang/Object;)I\n+        11: invokestatic  #61                 // Method java/util/Objects.hash:([Ljava/lang/Object;)I\n         14: ireturn\n       LineNumberTable:\n         line 107: 0\n \n   public java.nio.file.FileVisitResult postVisitDirectory(java.nio.file.Path, java.io.IOException) throws java.io.IOException;\n     descriptor: (Ljava/nio/file/Path;Ljava/io/IOException;)Ljava/nio/file/FileVisitResult;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: aload_2\n-         3: invokevirtual #20                 // Method updateDirCounter:(Ljava/nio/file/Path;Ljava/io/IOException;)V\n-         6: getstatic     #21                 // Field java/nio/file/FileVisitResult.CONTINUE:Ljava/nio/file/FileVisitResult;\n+         3: invokevirtual #65                 // Method updateDirCounter:(Ljava/nio/file/Path;Ljava/io/IOException;)V\n+         6: getstatic     #69                 // Field java/nio/file/FileVisitResult.CONTINUE:Ljava/nio/file/FileVisitResult;\n          9: areturn\n       LineNumberTable:\n         line 112: 0\n         line 113: 6\n     Exceptions:\n       throws java.io.IOException\n \n   public java.nio.file.FileVisitResult preVisitDirectory(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException;\n     descriptor: (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=4, args_size=3\n          0: aload_0\n-         1: getfield      #16                 // Field dirFilter:Lorg/apache/commons/io/file/PathFilter;\n+         1: getfield      #53                 // Field dirFilter:Lorg/apache/commons/io/file/PathFilter;\n          4: aload_1\n          5: aload_2\n-         6: invokeinterface #22,  3           // InterfaceMethod org/apache/commons/io/file/PathFilter.accept:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+         6: invokeinterface #75,  3           // InterfaceMethod org/apache/commons/io/file/PathFilter.accept:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n         11: astore_3\n         12: aload_3\n-        13: getstatic     #21                 // Field java/nio/file/FileVisitResult.CONTINUE:Ljava/nio/file/FileVisitResult;\n+        13: getstatic     #69                 // Field java/nio/file/FileVisitResult.CONTINUE:Ljava/nio/file/FileVisitResult;\n         16: if_acmpeq     25\n-        19: getstatic     #23                 // Field java/nio/file/FileVisitResult.SKIP_SUBTREE:Ljava/nio/file/FileVisitResult;\n+        19: getstatic     #79                 // Field java/nio/file/FileVisitResult.SKIP_SUBTREE:Ljava/nio/file/FileVisitResult;\n         22: goto          28\n-        25: getstatic     #21                 // Field java/nio/file/FileVisitResult.CONTINUE:Ljava/nio/file/FileVisitResult;\n+        25: getstatic     #69                 // Field java/nio/file/FileVisitResult.CONTINUE:Ljava/nio/file/FileVisitResult;\n         28: areturn\n       LineNumberTable:\n         line 118: 0\n         line 119: 12\n       StackMapTable: number_of_entries = 2\n         frame_type = 252 /* append */\n           offset_delta = 25\n@@ -372,77 +372,77 @@\n \n   public java.lang.String toString();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #11                 // Field pathCounters:Lorg/apache/commons/io/file/Counters$PathCounters;\n-         4: invokevirtual #24                 // Method java/lang/Object.toString:()Ljava/lang/String;\n+         1: getfield      #40                 // Field pathCounters:Lorg/apache/commons/io/file/Counters$PathCounters;\n+         4: invokevirtual #82                 // Method java/lang/Object.toString:()Ljava/lang/String;\n          7: areturn\n       LineNumberTable:\n         line 124: 0\n \n   protected void updateDirCounter(java.nio.file.Path, java.io.IOException);\n     descriptor: (Ljava/nio/file/Path;Ljava/io/IOException;)V\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=1, locals=3, args_size=3\n          0: aload_0\n-         1: getfield      #11                 // Field pathCounters:Lorg/apache/commons/io/file/Counters$PathCounters;\n-         4: invokeinterface #25,  1           // InterfaceMethod org/apache/commons/io/file/Counters$PathCounters.getDirectoryCounter:()Lorg/apache/commons/io/file/Counters$Counter;\n-         9: invokeinterface #26,  1           // InterfaceMethod org/apache/commons/io/file/Counters$Counter.increment:()V\n+         1: getfield      #40                 // Field pathCounters:Lorg/apache/commons/io/file/Counters$PathCounters;\n+         4: invokeinterface #86,  1           // InterfaceMethod org/apache/commons/io/file/Counters$PathCounters.getDirectoryCounter:()Lorg/apache/commons/io/file/Counters$Counter;\n+         9: invokeinterface #90,  1           // InterfaceMethod org/apache/commons/io/file/Counters$Counter.increment:()V\n         14: return\n       LineNumberTable:\n         line 135: 0\n         line 136: 14\n \n   protected void updateFileCounters(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes);\n     descriptor: (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)V\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n-         1: getfield      #11                 // Field pathCounters:Lorg/apache/commons/io/file/Counters$PathCounters;\n-         4: invokeinterface #27,  1           // InterfaceMethod org/apache/commons/io/file/Counters$PathCounters.getFileCounter:()Lorg/apache/commons/io/file/Counters$Counter;\n-         9: invokeinterface #26,  1           // InterfaceMethod org/apache/commons/io/file/Counters$Counter.increment:()V\n+         1: getfield      #40                 // Field pathCounters:Lorg/apache/commons/io/file/Counters$PathCounters;\n+         4: invokeinterface #95,  1           // InterfaceMethod org/apache/commons/io/file/Counters$PathCounters.getFileCounter:()Lorg/apache/commons/io/file/Counters$Counter;\n+         9: invokeinterface #90,  1           // InterfaceMethod org/apache/commons/io/file/Counters$Counter.increment:()V\n         14: aload_0\n-        15: getfield      #11                 // Field pathCounters:Lorg/apache/commons/io/file/Counters$PathCounters;\n-        18: invokeinterface #28,  1           // InterfaceMethod org/apache/commons/io/file/Counters$PathCounters.getByteCounter:()Lorg/apache/commons/io/file/Counters$Counter;\n+        15: getfield      #40                 // Field pathCounters:Lorg/apache/commons/io/file/Counters$PathCounters;\n+        18: invokeinterface #98,  1           // InterfaceMethod org/apache/commons/io/file/Counters$PathCounters.getByteCounter:()Lorg/apache/commons/io/file/Counters$Counter;\n         23: aload_2\n-        24: invokeinterface #29,  1           // InterfaceMethod java/nio/file/attribute/BasicFileAttributes.size:()J\n-        29: invokeinterface #30,  3           // InterfaceMethod org/apache/commons/io/file/Counters$Counter.add:(J)V\n+        24: invokeinterface #101,  1          // InterfaceMethod java/nio/file/attribute/BasicFileAttributes.size:()J\n+        29: invokeinterface #107,  3          // InterfaceMethod org/apache/commons/io/file/Counters$Counter.add:(J)V\n         34: return\n       LineNumberTable:\n         line 145: 0\n         line 146: 14\n         line 147: 34\n \n   public java.nio.file.FileVisitResult visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException;\n     descriptor: (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_1\n          1: iconst_0\n-         2: anewarray     #31                 // class java/nio/file/LinkOption\n-         5: invokestatic  #32                 // Method java/nio/file/Files.exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n+         2: anewarray     #111                // class java/nio/file/LinkOption\n+         5: invokestatic  #113                // Method java/nio/file/Files.exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z\n          8: ifeq          34\n         11: aload_0\n-        12: getfield      #14                 // Field fileFilter:Lorg/apache/commons/io/file/PathFilter;\n+        12: getfield      #48                 // Field fileFilter:Lorg/apache/commons/io/file/PathFilter;\n         15: aload_1\n         16: aload_2\n-        17: invokeinterface #22,  3           // InterfaceMethod org/apache/commons/io/file/PathFilter.accept:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-        22: getstatic     #21                 // Field java/nio/file/FileVisitResult.CONTINUE:Ljava/nio/file/FileVisitResult;\n+        17: invokeinterface #75,  3           // InterfaceMethod org/apache/commons/io/file/PathFilter.accept:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+        22: getstatic     #69                 // Field java/nio/file/FileVisitResult.CONTINUE:Ljava/nio/file/FileVisitResult;\n         25: if_acmpne     34\n         28: aload_0\n         29: aload_1\n         30: aload_2\n-        31: invokevirtual #33                 // Method updateFileCounters:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)V\n-        34: getstatic     #21                 // Field java/nio/file/FileVisitResult.CONTINUE:Ljava/nio/file/FileVisitResult;\n+        31: invokevirtual #119                // Method updateFileCounters:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)V\n+        34: getstatic     #69                 // Field java/nio/file/FileVisitResult.CONTINUE:Ljava/nio/file/FileVisitResult;\n         37: areturn\n       LineNumberTable:\n         line 151: 0\n         line 152: 28\n         line 154: 34\n       StackMapTable: number_of_entries = 1\n         frame_type = 34 /* same */\n@@ -452,64 +452,64 @@\n   public java.nio.file.FileVisitResult postVisitDirectory(java.lang.Object, java.io.IOException) throws java.io.IOException;\n     descriptor: (Ljava/lang/Object;Ljava/io/IOException;)Ljava/nio/file/FileVisitResult;\n     flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n-         2: checkcast     #34                 // class java/nio/file/Path\n+         2: checkcast     #123                // class java/nio/file/Path\n          5: aload_2\n-         6: invokevirtual #35                 // Method postVisitDirectory:(Ljava/nio/file/Path;Ljava/io/IOException;)Ljava/nio/file/FileVisitResult;\n+         6: invokevirtual #125                // Method postVisitDirectory:(Ljava/nio/file/Path;Ljava/io/IOException;)Ljava/nio/file/FileVisitResult;\n          9: areturn\n       LineNumberTable:\n         line 35: 0\n     Exceptions:\n       throws java.io.IOException\n \n   public java.nio.file.FileVisitResult visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException;\n     descriptor: (Ljava/lang/Object;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n     flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n-         2: checkcast     #34                 // class java/nio/file/Path\n+         2: checkcast     #123                // class java/nio/file/Path\n          5: aload_2\n-         6: invokevirtual #36                 // Method visitFile:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+         6: invokevirtual #129                // Method visitFile:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n          9: areturn\n       LineNumberTable:\n         line 35: 0\n     Exceptions:\n       throws java.io.IOException\n \n   public java.nio.file.FileVisitResult preVisitDirectory(java.lang.Object, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException;\n     descriptor: (Ljava/lang/Object;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n     flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n-         2: checkcast     #34                 // class java/nio/file/Path\n+         2: checkcast     #123                // class java/nio/file/Path\n          5: aload_2\n-         6: invokevirtual #37                 // Method preVisitDirectory:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+         6: invokevirtual #132                // Method preVisitDirectory:(Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n          9: areturn\n       LineNumberTable:\n         line 35: 0\n     Exceptions:\n       throws java.io.IOException\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=1, locals=0, args_size=0\n          0: iconst_0\n-         1: anewarray     #38                 // class java/lang/String\n-         4: putstatic     #39                 // Field EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+         1: anewarray     #135                // class java/lang/String\n+         4: putstatic     #137                // Field EMPTY_STRING_ARRAY:[Ljava/lang/String;\n          7: return\n       LineNumberTable:\n         line 37: 0\n }\n SourceFile: \"CountingPathVisitor.java\"\n InnerClasses:\n-  public static #44= #10 of #86;          // PathCounters=class org/apache/commons/io/file/Counters$PathCounters of class org/apache/commons/io/file/Counters\n-  public static #148= #111 of #86;        // Counter=class org/apache/commons/io/file/Counters$Counter of class org/apache/commons/io/file/Counters\n+  public static #160= #38 of #4;          // PathCounters=class org/apache/commons/io/file/Counters$PathCounters of class org/apache/commons/io/file/Counters\n+  public static #161= #91 of #4;          // Counter=class org/apache/commons/io/file/Counters$Counter of class org/apache/commons/io/file/Counters\n"}]}
