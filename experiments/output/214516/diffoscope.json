{"diffoscope-json-version": 1, "source1": "first/ArrayType.class", "source2": "second/ArrayType.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -2,49 +2,49 @@\n package org.apache.bcel.generic;\n \n public final class ArrayType extends ReferenceType\n {\n     private int dimensions;\n     private Type basic_type;\n     \n-    public ArrayType(final byte type, final int dimensions) {\n-        this((Type)BasicType.getType(type), dimensions);\n+    public ArrayType(final byte b, final int n) {\n+        this((Type)BasicType.getType(b), n);\n     }\n     \n-    public ArrayType(final String class_name, final int dimensions) {\n-        this((Type)ObjectType.getInstance(class_name), dimensions);\n+    public ArrayType(final String s, final int n) {\n+        this((Type)ObjectType.getInstance(s), n);\n     }\n     \n-    public ArrayType(final Type type, final int dimensions) {\n+    public ArrayType(final Type basic_type, final int n) {\n         super((byte)13, \"<dummy>\");\n-        if (dimensions < 1 || dimensions > 255) {\n-            throw new ClassGenException(\"Invalid number of dimensions: \" + dimensions);\n+        if (n < 1 || n > 255) {\n+            throw new ClassGenException(\"Invalid number of dimensions: \" + n);\n         }\n-        switch (type.getType()) {\n+        switch (basic_type.getType()) {\n             case 13: {\n-                final ArrayType array = (ArrayType)type;\n-                this.dimensions = dimensions + array.dimensions;\n-                this.basic_type = array.basic_type;\n+                final ArrayType arrayType = (ArrayType)basic_type;\n+                this.dimensions = n + arrayType.dimensions;\n+                this.basic_type = arrayType.basic_type;\n                 break;\n             }\n             case 12: {\n                 throw new ClassGenException(\"Invalid type: void[]\");\n             }\n             default: {\n-                this.dimensions = dimensions;\n-                this.basic_type = type;\n+                this.dimensions = n;\n+                this.basic_type = basic_type;\n                 break;\n             }\n         }\n-        final StringBuilder buf = new StringBuilder();\n+        final StringBuilder sb = new StringBuilder();\n         for (int i = 0; i < this.dimensions; ++i) {\n-            buf.append('[');\n+            sb.append('[');\n         }\n-        buf.append(this.basic_type.getSignature());\n-        super.setSignature(buf.toString());\n+        sb.append(this.basic_type.getSignature());\n+        super.setSignature(sb.toString());\n     }\n     \n     public Type getBasicType() {\n         return this.basic_type;\n     }\n     \n     public Type getElementType() {\n@@ -58,15 +58,15 @@\n         return this.dimensions;\n     }\n     \n     public int hashCode() {\n         return this.basic_type.hashCode() ^ this.dimensions;\n     }\n     \n-    public boolean equals(final Object _type) {\n-        if (_type instanceof ArrayType) {\n-            final ArrayType array = (ArrayType)_type;\n-            return array.dimensions == this.dimensions && array.basic_type.equals((Object)this.basic_type);\n+    public boolean equals(final Object o) {\n+        if (o instanceof ArrayType) {\n+            final ArrayType arrayType = (ArrayType)o;\n+            return arrayType.dimensions == this.dimensions && arrayType.basic_type.equals((Object)this.basic_type);\n         }\n         return false;\n     }\n }\n"}]}
