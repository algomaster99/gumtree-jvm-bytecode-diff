{"diffoscope-json-version": 1, "source1": "first/TrackedNodeModel.class", "source2": "second/TrackedNodeModel.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,24 +8,24 @@\n public class TrackedNodeModel implements NodeModel<ImmutableNode>\n {\n     private final InMemoryNodeModelSupport parentModelSupport;\n     private final NodeSelector selector;\n     private final boolean releaseTrackedNodeOnFinalize;\n     private final AtomicBoolean closed;\n     \n-    public TrackedNodeModel(final InMemoryNodeModelSupport modelSupport, final NodeSelector sel, final boolean untrackOnFinalize) {\n-        if (modelSupport == null) {\n+    public TrackedNodeModel(final InMemoryNodeModelSupport parentModelSupport, final NodeSelector selector, final boolean releaseTrackedNodeOnFinalize) {\n+        if (parentModelSupport == null) {\n             throw new IllegalArgumentException(\"Underlying model support must not be null!\");\n         }\n-        if (sel == null) {\n+        if (selector == null) {\n             throw new IllegalArgumentException(\"Selector must not be null!\");\n         }\n-        this.parentModelSupport = modelSupport;\n-        this.selector = sel;\n-        this.releaseTrackedNodeOnFinalize = untrackOnFinalize;\n+        this.parentModelSupport = parentModelSupport;\n+        this.selector = selector;\n+        this.releaseTrackedNodeOnFinalize = releaseTrackedNodeOnFinalize;\n         this.closed = new AtomicBoolean();\n     }\n     \n     public InMemoryNodeModelSupport getParentModelSupport() {\n         return this.parentModelSupport;\n     }\n     \n@@ -37,44 +37,44 @@\n         return this.selector;\n     }\n     \n     public boolean isReleaseTrackedNodeOnFinalize() {\n         return this.releaseTrackedNodeOnFinalize;\n     }\n     \n-    public void setRootNode(final ImmutableNode newRoot) {\n-        this.getParentModel().replaceTrackedNode(this.getSelector(), newRoot);\n+    public void setRootNode(final ImmutableNode immutableNode) {\n+        this.getParentModel().replaceTrackedNode(this.getSelector(), immutableNode);\n     }\n     \n     public NodeHandler<ImmutableNode> getNodeHandler() {\n         return (NodeHandler<ImmutableNode>)this.getParentModel().getTrackedNodeHandler(this.getSelector());\n     }\n     \n-    public void addProperty(final String key, final Iterable<?> values, final NodeKeyResolver<ImmutableNode> resolver) {\n-        this.getParentModel().addProperty(key, this.getSelector(), (Iterable)values, (NodeKeyResolver)resolver);\n+    public void addProperty(final String s, final Iterable<?> iterable, final NodeKeyResolver<ImmutableNode> nodeKeyResolver) {\n+        this.getParentModel().addProperty(s, this.getSelector(), (Iterable)iterable, (NodeKeyResolver)nodeKeyResolver);\n     }\n     \n-    public void addNodes(final String key, final Collection<? extends ImmutableNode> nodes, final NodeKeyResolver<ImmutableNode> resolver) {\n-        this.getParentModel().addNodes(key, this.getSelector(), (Collection)nodes, (NodeKeyResolver)resolver);\n+    public void addNodes(final String s, final Collection<? extends ImmutableNode> collection, final NodeKeyResolver<ImmutableNode> nodeKeyResolver) {\n+        this.getParentModel().addNodes(s, this.getSelector(), (Collection)collection, (NodeKeyResolver)nodeKeyResolver);\n     }\n     \n-    public void setProperty(final String key, final Object value, final NodeKeyResolver<ImmutableNode> resolver) {\n-        this.getParentModel().setProperty(key, this.getSelector(), value, (NodeKeyResolver)resolver);\n+    public void setProperty(final String s, final Object o, final NodeKeyResolver<ImmutableNode> nodeKeyResolver) {\n+        this.getParentModel().setProperty(s, this.getSelector(), o, (NodeKeyResolver)nodeKeyResolver);\n     }\n     \n-    public List<QueryResult<ImmutableNode>> clearTree(final String key, final NodeKeyResolver<ImmutableNode> resolver) {\n-        return this.getParentModel().clearTree(key, this.getSelector(), (NodeKeyResolver)resolver);\n+    public List<QueryResult<ImmutableNode>> clearTree(final String s, final NodeKeyResolver<ImmutableNode> nodeKeyResolver) {\n+        return this.getParentModel().clearTree(s, this.getSelector(), (NodeKeyResolver)nodeKeyResolver);\n     }\n     \n-    public void clearProperty(final String key, final NodeKeyResolver<ImmutableNode> resolver) {\n-        this.getParentModel().clearProperty(key, this.getSelector(), (NodeKeyResolver)resolver);\n+    public void clearProperty(final String s, final NodeKeyResolver<ImmutableNode> nodeKeyResolver) {\n+        this.getParentModel().clearProperty(s, this.getSelector(), (NodeKeyResolver)nodeKeyResolver);\n     }\n     \n-    public void clear(final NodeKeyResolver<ImmutableNode> resolver) {\n-        this.getParentModel().clearTree((String)null, this.getSelector(), (NodeKeyResolver)resolver);\n+    public void clear(final NodeKeyResolver<ImmutableNode> nodeKeyResolver) {\n+        this.getParentModel().clearTree((String)null, this.getSelector(), (NodeKeyResolver)nodeKeyResolver);\n     }\n     \n     public ImmutableNode getInMemoryRepresentation() {\n         return (ImmutableNode)this.getNodeHandler().getRootNode();\n     }\n     \n     public void close() {\n"}]}
