{"diffoscope-json-version": 1, "source1": "first/ZipArchiveOutputStream.class", "source2": "second/ZipArchiveOutputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,339 +1,339 @@\n-  SHA-256 checksum a8729f0bd044601129b57a0e98997f2772d6ea4abfd8ef94a42d0ddd85b00d41\n+  SHA-256 checksum 7b3c1f767437099b0bdaa4b709336e0c56fbcdbd342ec243aa7cc74d76cce0cf\n   Compiled from \"ZipArchiveOutputStream.java\"\n public class org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream extends org.apache.commons.compress.archivers.ArchiveOutputStream\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #9                          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n   super_class: #331                       // org/apache/commons/compress/archivers/ArchiveOutputStream\n   interfaces: 0, fields: 70, methods: 72, attributes: 2\n Constant pool:\n-     #1 = Class              #590         // java/util/zip/ZipEntry\n-     #2 = Class              #591         // java/util/zip/Deflater\n-     #3 = Class              #592         // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-     #4 = Class              #593         // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-     #5 = Class              #594         // org/apache/commons/compress/archivers/zip/ZipConstants\n-     #6 = Methodref          #331.#595    // org/apache/commons/compress/archivers/ArchiveOutputStream.\"<init>\":()V\n-     #7 = String             #596         //\n-     #8 = Fieldref           #9.#597      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.comment:Ljava/lang/String;\n-     #9 = Class              #598         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-    #10 = Fieldref           #9.#599      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.level:I\n-    #11 = Fieldref           #9.#600      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.method:I\n-    #12 = Class              #601         // java/util/LinkedList\n-    #13 = Methodref          #12.#595     // java/util/LinkedList.\"<init>\":()V\n-    #14 = Fieldref           #9.#602      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.entries:Ljava/util/List;\n-    #15 = Class              #603         // java/util/HashMap\n-    #16 = Methodref          #15.#595     // java/util/HashMap.\"<init>\":()V\n-    #17 = Fieldref           #9.#604      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.metaData:Ljava/util/Map;\n-    #18 = String             #605         // UTF8\n-    #19 = Fieldref           #9.#606      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.encoding:Ljava/lang/String;\n-    #20 = Methodref          #3.#607      // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-    #21 = Fieldref           #9.#608      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-    #22 = Fieldref           #9.#609      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.useUTF8Flag:Z\n-    #23 = Fieldref           #336.#610    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy.NEVER:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n-    #24 = Fieldref           #9.#611      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.createUnicodeExtraFields:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n-    #25 = Fieldref           #612.#613    // org/apache/commons/compress/archivers/zip/Zip64Mode.AsNeeded:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-    #26 = Fieldref           #9.#614      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.zip64Mode:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+     #1 = Class              #579         // java/util/zip/ZipEntry\n+     #2 = Class              #580         // java/util/zip/Deflater\n+     #3 = Class              #581         // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+     #4 = Class              #582         // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+     #5 = Class              #583         // org/apache/commons/compress/archivers/zip/ZipConstants\n+     #6 = Methodref          #331.#584    // org/apache/commons/compress/archivers/ArchiveOutputStream.\"<init>\":()V\n+     #7 = String             #585         //\n+     #8 = Fieldref           #9.#586      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.comment:Ljava/lang/String;\n+     #9 = Class              #587         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+    #10 = Fieldref           #9.#588      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.level:I\n+    #11 = Fieldref           #9.#589      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.method:I\n+    #12 = Class              #590         // java/util/LinkedList\n+    #13 = Methodref          #12.#584     // java/util/LinkedList.\"<init>\":()V\n+    #14 = Fieldref           #9.#591      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.entries:Ljava/util/List;\n+    #15 = Class              #592         // java/util/HashMap\n+    #16 = Methodref          #15.#584     // java/util/HashMap.\"<init>\":()V\n+    #17 = Fieldref           #9.#593      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.metaData:Ljava/util/Map;\n+    #18 = String             #594         // UTF8\n+    #19 = Fieldref           #9.#595      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.encoding:Ljava/lang/String;\n+    #20 = Methodref          #3.#596      // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+    #21 = Fieldref           #9.#597      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+    #22 = Fieldref           #9.#598      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.useUTF8Flag:Z\n+    #23 = Fieldref           #336.#599    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy.NEVER:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n+    #24 = Fieldref           #9.#600      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.createUnicodeExtraFields:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n+    #25 = Fieldref           #512.#601    // org/apache/commons/compress/archivers/zip/Zip64Mode.AsNeeded:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+    #26 = Fieldref           #9.#602      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.zip64Mode:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n     #27 = Integer            32768\n-    #28 = Fieldref           #9.#615      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.copyBuffer:[B\n-    #29 = Methodref          #616.#617    // java/util/Calendar.getInstance:()Ljava/util/Calendar;\n-    #30 = Fieldref           #9.#618      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.calendarInstance:Ljava/util/Calendar;\n-    #31 = Fieldref           #9.#619      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.numberOfCDInDiskData:Ljava/util/Map;\n-    #32 = Fieldref           #9.#620      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.outputStream:Ljava/io/OutputStream;\n-    #33 = Fieldref           #9.#621      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.channel:Ljava/nio/channels/SeekableByteChannel;\n-    #34 = Methodref          #2.#622      // java/util/zip/Deflater.\"<init>\":(IZ)V\n-    #35 = Fieldref           #9.#623      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.def:Ljava/util/zip/Deflater;\n-    #36 = Methodref          #624.#625    // org/apache/commons/compress/archivers/zip/StreamCompressor.create:(Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-    #37 = Fieldref           #9.#626      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-    #38 = Fieldref           #9.#627      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.isSplitZip:Z\n-    #39 = Methodref          #628.#629    // java/io/File.toPath:()Ljava/nio/file/Path;\n-    #40 = Class              #630         // java/nio/file/OpenOption\n-    #41 = Methodref          #9.#631      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.\"<init>\":(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)V\n-    #42 = Fieldref           #632.#633    // java/nio/file/StandardOpenOption.CREATE:Ljava/nio/file/StandardOpenOption;\n-    #43 = Fieldref           #632.#634    // java/nio/file/StandardOpenOption.WRITE:Ljava/nio/file/StandardOpenOption;\n-    #44 = Fieldref           #632.#635    // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n-    #45 = Fieldref           #632.#636    // java/nio/file/StandardOpenOption.TRUNCATE_EXISTING:Ljava/nio/file/StandardOpenOption;\n-    #46 = Methodref          #637.#638    // java/util/EnumSet.of:(Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;\n-    #47 = Class              #639         // java/nio/file/attribute/FileAttribute\n-    #48 = Methodref          #640.#641    // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n-    #49 = Methodref          #624.#642    // org/apache/commons/compress/archivers/zip/StreamCompressor.create:(Ljava/nio/channels/SeekableByteChannel;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-    #50 = Class              #643         // java/io/IOException\n-    #51 = Methodref          #644.#645    // org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n-    #52 = Methodref          #640.#646    // java/nio/file/Files.newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n-    #53 = Methodref          #9.#647      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.\"<init>\":(Ljava/nio/file/Path;J)V\n-    #54 = Class              #648         // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream\n-    #55 = Methodref          #54.#647     // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.\"<init>\":(Ljava/nio/file/Path;J)V\n-    #56 = Methodref          #3.#649      // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.isUTF8:(Ljava/lang/String;)Z\n-    #57 = Fieldref           #9.#650      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.fallbackToUTF8:Z\n-    #58 = Methodref          #624.#651    // org/apache/commons/compress/archivers/zip/StreamCompressor.getTotalBytesWritten:()J\n-    #59 = Fieldref           #9.#652      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.finished:Z\n-    #60 = String             #653         // This archive has already been finished\n-    #61 = Methodref          #50.#654     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-    #62 = Fieldref           #9.#655      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.entry:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;\n-    #63 = String             #656         // This archive contains unclosed entries.\n-    #64 = Fieldref           #9.#657      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.cdOffset:J\n-    #65 = Methodref          #54.#658     // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.getCurrentSplitSegmentBytesWritten:()J\n-    #66 = Methodref          #54.#659     // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.getCurrentSplitSegmentIndex:()I\n-    #67 = Fieldref           #9.#660      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.cdDiskNumberStart:J\n-    #68 = Methodref          #9.#661      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeCentralDirectoryInChunks:()V\n-    #69 = Fieldref           #9.#662      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.cdLength:J\n-    #70 = InterfaceMethodref #663.#664    // org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-    #71 = Methodref          #665.#666    // java/nio/ByteBuffer.limit:()I\n-    #72 = Methodref          #665.#667    // java/nio/ByteBuffer.position:()I\n+    #28 = Fieldref           #9.#603      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.copyBuffer:[B\n+    #29 = Methodref          #604.#605    // java/util/Calendar.getInstance:()Ljava/util/Calendar;\n+    #30 = Fieldref           #9.#606      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.calendarInstance:Ljava/util/Calendar;\n+    #31 = Fieldref           #9.#607      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.numberOfCDInDiskData:Ljava/util/Map;\n+    #32 = Fieldref           #9.#608      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.outputStream:Ljava/io/OutputStream;\n+    #33 = Fieldref           #9.#609      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.channel:Ljava/nio/channels/SeekableByteChannel;\n+    #34 = Methodref          #2.#610      // java/util/zip/Deflater.\"<init>\":(IZ)V\n+    #35 = Fieldref           #9.#611      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.def:Ljava/util/zip/Deflater;\n+    #36 = Methodref          #468.#612    // org/apache/commons/compress/archivers/zip/StreamCompressor.create:(Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+    #37 = Fieldref           #9.#613      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+    #38 = Fieldref           #9.#614      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.isSplitZip:Z\n+    #39 = Methodref          #615.#616    // java/io/File.toPath:()Ljava/nio/file/Path;\n+    #40 = Class              #617         // java/nio/file/OpenOption\n+    #41 = Methodref          #9.#618      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.\"<init>\":(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)V\n+    #42 = Fieldref           #619.#620    // java/nio/file/StandardOpenOption.CREATE:Ljava/nio/file/StandardOpenOption;\n+    #43 = Fieldref           #619.#621    // java/nio/file/StandardOpenOption.WRITE:Ljava/nio/file/StandardOpenOption;\n+    #44 = Fieldref           #619.#622    // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+    #45 = Fieldref           #619.#623    // java/nio/file/StandardOpenOption.TRUNCATE_EXISTING:Ljava/nio/file/StandardOpenOption;\n+    #46 = Methodref          #624.#625    // java/util/EnumSet.of:(Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;\n+    #47 = Class              #626         // java/nio/file/attribute/FileAttribute\n+    #48 = Methodref          #627.#628    // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+    #49 = Methodref          #468.#629    // org/apache/commons/compress/archivers/zip/StreamCompressor.create:(Ljava/nio/channels/SeekableByteChannel;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+    #50 = Class              #630         // java/io/IOException\n+    #51 = Methodref          #631.#632    // org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V\n+    #52 = Methodref          #627.#633    // java/nio/file/Files.newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n+    #53 = Methodref          #9.#634      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.\"<init>\":(Ljava/nio/file/Path;J)V\n+    #54 = Class              #635         // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream\n+    #55 = Methodref          #54.#634     // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.\"<init>\":(Ljava/nio/file/Path;J)V\n+    #56 = Methodref          #3.#636      // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.isUTF8:(Ljava/lang/String;)Z\n+    #57 = Fieldref           #9.#637      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.fallbackToUTF8:Z\n+    #58 = Methodref          #468.#638    // org/apache/commons/compress/archivers/zip/StreamCompressor.getTotalBytesWritten:()J\n+    #59 = Fieldref           #9.#639      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.finished:Z\n+    #60 = String             #640         // This archive has already been finished\n+    #61 = Methodref          #50.#641     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+    #62 = Fieldref           #9.#642      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.entry:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;\n+    #63 = String             #643         // This archive contains unclosed entries.\n+    #64 = Fieldref           #9.#644      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.cdOffset:J\n+    #65 = Methodref          #54.#645     // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.getCurrentSplitSegmentBytesWritten:()J\n+    #66 = Methodref          #54.#646     // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.getCurrentSplitSegmentIndex:()I\n+    #67 = Fieldref           #9.#647      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.cdDiskNumberStart:J\n+    #68 = Methodref          #9.#648      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeCentralDirectoryInChunks:()V\n+    #69 = Fieldref           #9.#649      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.cdLength:J\n+    #70 = InterfaceMethodref #572.#650    // org/apache/commons/compress/archivers/zip/ZipEncoding.encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+    #71 = Methodref          #489.#651    // java/nio/ByteBuffer.limit:()I\n+    #72 = Methodref          #489.#652    // java/nio/ByteBuffer.position:()I\n     #73 = Long               22l\n-    #75 = Fieldref           #9.#668      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.eocdLength:J\n-    #76 = Methodref          #9.#669      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeZip64CentralDirectory:()V\n-    #77 = Methodref          #9.#670      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeCentralDirectoryEnd:()V\n-    #78 = InterfaceMethodref #671.#672    // java/util/Map.clear:()V\n-    #79 = InterfaceMethodref #673.#672    // java/util/List.clear:()V\n-    #80 = Methodref          #624.#674    // org/apache/commons/compress/archivers/zip/StreamCompressor.close:()V\n-    #81 = Methodref          #675.#674    // java/io/OutputStream.close:()V\n-    #82 = Class              #676         // java/io/ByteArrayOutputStream\n+    #75 = Fieldref           #9.#653      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.eocdLength:J\n+    #76 = Methodref          #9.#654      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeZip64CentralDirectory:()V\n+    #77 = Methodref          #9.#655      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeCentralDirectoryEnd:()V\n+    #78 = InterfaceMethodref #656.#657    // java/util/Map.clear:()V\n+    #79 = InterfaceMethodref #658.#657    // java/util/List.clear:()V\n+    #80 = Methodref          #468.#659    // org/apache/commons/compress/archivers/zip/StreamCompressor.close:()V\n+    #81 = Methodref          #466.#659    // java/io/OutputStream.close:()V\n+    #82 = Class              #660         // java/io/ByteArrayOutputStream\n     #83 = Integer            70000\n-    #84 = Methodref          #82.#677     // java/io/ByteArrayOutputStream.\"<init>\":(I)V\n-    #85 = InterfaceMethodref #673.#678    // java/util/List.iterator:()Ljava/util/Iterator;\n-    #86 = InterfaceMethodref #679.#680    // java/util/Iterator.hasNext:()Z\n-    #87 = InterfaceMethodref #679.#681    // java/util/Iterator.next:()Ljava/lang/Object;\n-    #88 = Class              #682         // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-    #89 = Methodref          #9.#683      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.createCentralFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B\n-    #90 = Methodref          #82.#684     // java/io/ByteArrayOutputStream.write:([B)V\n-    #91 = Methodref          #82.#685     // java/io/ByteArrayOutputStream.toByteArray:()[B\n-    #92 = Methodref          #9.#686      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeCounted:([B)V\n-    #93 = Methodref          #82.#687     // java/io/ByteArrayOutputStream.reset:()V\n-    #94 = Methodref          #9.#688      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.preClose:()V\n-    #95 = Methodref          #9.#689      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.flushDeflater:()V\n-    #96 = Methodref          #176.#690    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$000:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n-    #97 = Methodref          #624.#691    // org/apache/commons/compress/archivers/zip/StreamCompressor.getCrc32:()J\n-    #98 = Methodref          #624.#692    // org/apache/commons/compress/archivers/zip/StreamCompressor.getBytesRead:()J\n-    #99 = Methodref          #176.#693    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$102:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n-   #100 = Methodref          #176.#694    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-   #101 = Methodref          #9.#695      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getEffectiveZip64Mode:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-   #102 = Methodref          #9.#696      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.handleSizesAndCrc:(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-   #103 = Methodref          #9.#697      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.closeEntry:(ZZ)V\n-   #104 = Methodref          #624.#687    // org/apache/commons/compress/archivers/zip/StreamCompressor.reset:()V\n-   #105 = Methodref          #88.#698     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n-   #106 = Methodref          #9.#699      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.checkIfNeedsZip64:(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-   #107 = Methodref          #9.#700      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.rewriteSizesAndCrc:(Z)V\n-   #108 = Methodref          #9.#701      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeDataDescriptor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #109 = String             #702         // Stream has already been finished\n-   #110 = String             #703         // No current entry to close\n-   #111 = Methodref          #176.#704    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n-   #112 = Fieldref           #705.#706    // org/apache/commons/compress/utils/ByteUtils.EMPTY_BYTE_ARRAY:[B\n-   #113 = Methodref          #9.#707      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.write:([BII)V\n-   #114 = Methodref          #88.#708     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #115 = Methodref          #9.#709      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.hasZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #116 = Fieldref           #317.#710    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #117 = Methodref          #88.#711     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.removeExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-   #118 = Methodref          #88.#712     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCrc:()J\n+    #84 = Methodref          #82.#661     // java/io/ByteArrayOutputStream.\"<init>\":(I)V\n+    #85 = InterfaceMethodref #658.#662    // java/util/List.iterator:()Ljava/util/Iterator;\n+    #86 = InterfaceMethodref #491.#663    // java/util/Iterator.hasNext:()Z\n+    #87 = InterfaceMethodref #491.#664    // java/util/Iterator.next:()Ljava/lang/Object;\n+    #88 = Class              #665         // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+    #89 = Methodref          #9.#666      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.createCentralFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B\n+    #90 = Methodref          #82.#667     // java/io/ByteArrayOutputStream.write:([B)V\n+    #91 = Methodref          #82.#668     // java/io/ByteArrayOutputStream.toByteArray:()[B\n+    #92 = Methodref          #9.#669      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeCounted:([B)V\n+    #93 = Methodref          #82.#670     // java/io/ByteArrayOutputStream.reset:()V\n+    #94 = Methodref          #9.#671      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.preClose:()V\n+    #95 = Methodref          #9.#672      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.flushDeflater:()V\n+    #96 = Methodref          #176.#673    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$000:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n+    #97 = Methodref          #468.#674    // org/apache/commons/compress/archivers/zip/StreamCompressor.getCrc32:()J\n+    #98 = Methodref          #468.#675    // org/apache/commons/compress/archivers/zip/StreamCompressor.getBytesRead:()J\n+    #99 = Methodref          #176.#676    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$102:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n+   #100 = Methodref          #176.#677    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+   #101 = Methodref          #9.#678      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getEffectiveZip64Mode:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+   #102 = Methodref          #9.#679      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.handleSizesAndCrc:(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+   #103 = Methodref          #9.#680      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.closeEntry:(ZZ)V\n+   #104 = Methodref          #468.#670    // org/apache/commons/compress/archivers/zip/StreamCompressor.reset:()V\n+   #105 = Methodref          #88.#681     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n+   #106 = Methodref          #9.#682      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.checkIfNeedsZip64:(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+   #107 = Methodref          #9.#683      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.rewriteSizesAndCrc:(Z)V\n+   #108 = Methodref          #9.#684      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeDataDescriptor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #109 = String             #685         // Stream has already been finished\n+   #110 = String             #686         // No current entry to close\n+   #111 = Methodref          #176.#687    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n+   #112 = Fieldref           #688.#689    // org/apache/commons/compress/utils/ByteUtils.EMPTY_BYTE_ARRAY:[B\n+   #113 = Methodref          #9.#690      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.write:([BII)V\n+   #114 = Methodref          #88.#691     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #115 = Methodref          #9.#692      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.hasZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #116 = Fieldref           #317.#693    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #117 = Methodref          #88.#694     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.removeExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+   #118 = Methodref          #88.#695     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCrc:()J\n    #119 = Long               -1l\n-   #121 = Class              #713         // org/apache/commons/compress/archivers/ArchiveEntry\n-   #122 = Methodref          #88.#714     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n-   #123 = Methodref          #9.#715      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V\n-   #124 = Methodref          #9.#716      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.copyFromZipInputStream:(Ljava/io/InputStream;)V\n-   #125 = Methodref          #9.#717      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.closeCopiedEntry:(Z)V\n-   #126 = Methodref          #88.#718     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-   #127 = Methodref          #624.#689    // org/apache/commons/compress/archivers/zip/StreamCompressor.flushDeflater:()V\n-   #128 = Methodref          #176.#719    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n-   #129 = Methodref          #88.#720     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n-   #130 = Methodref          #88.#721     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n-   #131 = Methodref          #88.#722     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCrc:(J)V\n-   #132 = Class              #723         // java/util/zip/ZipException\n-   #133 = Class              #724         // java/lang/StringBuilder\n-   #134 = Methodref          #133.#595    // java/lang/StringBuilder.\"<init>\":()V\n-   #135 = String             #725         // Bad CRC checksum for entry\n-   #136 = Methodref          #133.#726    // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #137 = Methodref          #88.#727     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n-   #138 = String             #728         // :\n-   #139 = Methodref          #729.#730    // java/lang/Long.toHexString:(J)Ljava/lang/String;\n-   #140 = String             #731         //  instead of\n-   #141 = Methodref          #133.#732    // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #142 = Methodref          #132.#654    // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-   #143 = String             #733         // Bad size for entry\n-   #144 = Methodref          #133.#734    // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #145 = Methodref          #9.#735      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.isZip64Required:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-   #146 = Fieldref           #612.#736    // org/apache/commons/compress/archivers/zip/Zip64Mode.Never:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-   #147 = Class              #737         // org/apache/commons/compress/archivers/zip/Zip64RequiredException\n-   #148 = Methodref          #147.#738    // org/apache/commons/compress/archivers/zip/Zip64RequiredException.getEntryTooBigMessage:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n-   #149 = Methodref          #147.#654    // org/apache/commons/compress/archivers/zip/Zip64RequiredException.\"<init>\":(Ljava/lang/String;)V\n-   #150 = Fieldref           #612.#739    // org/apache/commons/compress/archivers/zip/Zip64Mode.Always:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-   #151 = Fieldref           #612.#740    // org/apache/commons/compress/archivers/zip/Zip64Mode.AlwaysWithCompatibility:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-   #152 = Methodref          #9.#741      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.isTooLargeForZip32:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #121 = Class              #696         // org/apache/commons/compress/archivers/ArchiveEntry\n+   #122 = Methodref          #88.#697     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+   #123 = Methodref          #9.#698      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V\n+   #124 = Methodref          #9.#699      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.copyFromZipInputStream:(Ljava/io/InputStream;)V\n+   #125 = Methodref          #9.#700      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.closeCopiedEntry:(Z)V\n+   #126 = Methodref          #88.#701     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+   #127 = Methodref          #468.#672    // org/apache/commons/compress/archivers/zip/StreamCompressor.flushDeflater:()V\n+   #128 = Methodref          #176.#702    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n+   #129 = Methodref          #88.#703     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n+   #130 = Methodref          #88.#704     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n+   #131 = Methodref          #88.#705     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCrc:(J)V\n+   #132 = Class              #706         // java/util/zip/ZipException\n+   #133 = Class              #707         // java/lang/StringBuilder\n+   #134 = Methodref          #133.#584    // java/lang/StringBuilder.\"<init>\":()V\n+   #135 = String             #708         // Bad CRC checksum for entry\n+   #136 = Methodref          #133.#709    // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #137 = Methodref          #88.#710     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n+   #138 = String             #711         // :\n+   #139 = Methodref          #712.#713    // java/lang/Long.toHexString:(J)Ljava/lang/String;\n+   #140 = String             #714         //  instead of\n+   #141 = Methodref          #133.#715    // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #142 = Methodref          #132.#641    // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+   #143 = String             #716         // Bad size for entry\n+   #144 = Methodref          #133.#717    // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+   #145 = Methodref          #9.#718      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.isZip64Required:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+   #146 = Fieldref           #512.#719    // org/apache/commons/compress/archivers/zip/Zip64Mode.Never:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+   #147 = Class              #720         // org/apache/commons/compress/archivers/zip/Zip64RequiredException\n+   #148 = Methodref          #147.#721    // org/apache/commons/compress/archivers/zip/Zip64RequiredException.getEntryTooBigMessage:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n+   #149 = Methodref          #147.#641    // org/apache/commons/compress/archivers/zip/Zip64RequiredException.\"<init>\":(Ljava/lang/String;)V\n+   #150 = Fieldref           #512.#722    // org/apache/commons/compress/archivers/zip/Zip64Mode.Always:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+   #151 = Fieldref           #512.#723    // org/apache/commons/compress/archivers/zip/Zip64Mode.AlwaysWithCompatibility:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+   #152 = Methodref          #9.#724      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.isTooLargeForZip32:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n    #153 = Long               4294967295l\n-   #155 = InterfaceMethodref #742.#743    // java/nio/channels/SeekableByteChannel.position:()J\n-   #156 = Methodref          #176.#744    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$400:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n-   #157 = InterfaceMethodref #742.#745    // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n-   #158 = Methodref          #287.#746    // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:(J)[B\n-   #159 = Methodref          #9.#747      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeOut:([B)V\n-   #160 = Fieldref           #287.#748    // org/apache/commons/compress/archivers/zip/ZipLong.ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #161 = Methodref          #287.#749    // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n-   #162 = Methodref          #9.#750      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getName:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/nio/ByteBuffer;\n+   #155 = InterfaceMethodref #467.#725    // java/nio/channels/SeekableByteChannel.position:()J\n+   #156 = Methodref          #176.#726    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$400:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n+   #157 = InterfaceMethodref #467.#727    // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+   #158 = Methodref          #287.#728    // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:(J)[B\n+   #159 = Methodref          #9.#729      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeOut:([B)V\n+   #160 = Fieldref           #287.#730    // org/apache/commons/compress/archivers/zip/ZipLong.ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #161 = Methodref          #287.#731    // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n+   #162 = Methodref          #9.#732      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getName:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/nio/ByteBuffer;\n    #163 = Long               12l\n    #165 = Long               4l\n-   #167 = Methodref          #183.#746    // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:(J)[B\n+   #167 = Methodref          #183.#728    // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:(J)[B\n    #168 = Long               10l\n-   #170 = Methodref          #9.#751      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.versionNeededToExtract:(IZZ)I\n-   #171 = Methodref          #752.#753    // org/apache/commons/compress/archivers/zip/ZipShort.getBytes:(I)[B\n-   #172 = Methodref          #88.#754     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setExtra:()V\n-   #173 = Methodref          #176.#755    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$500:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n-   #174 = Fieldref           #9.#756      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.hasUsedZip64:Z\n-   #175 = Methodref          #9.#757      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.closeArchiveEntry:()V\n-   #176 = Class              #758         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry\n-   #177 = Methodref          #176.#759    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n-   #178 = InterfaceMethodref #673.#760    // java/util/List.add:(Ljava/lang/Object;)Z\n-   #179 = Methodref          #9.#761      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.setDefaults:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #180 = Methodref          #9.#762      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.validateSizeInformation:(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V\n-   #181 = Methodref          #9.#763      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.shouldAddZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-   #182 = Methodref          #9.#764      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n-   #183 = Class              #765         // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-   #184 = Methodref          #183.#766    // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n-   #185 = Fieldref           #183.#767    // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #186 = Methodref          #317.#768    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #187 = Methodref          #317.#769    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #188 = Fieldref           #9.#770      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.hasCompressionLevelChanged:Z\n-   #189 = Methodref          #2.#771      // java/util/zip/Deflater.setLevel:(I)V\n-   #190 = Methodref          #9.#772      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeLocalFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V\n-   #191 = Methodref          #88.#773     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setMethod:(I)V\n-   #192 = Methodref          #88.#774     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getTime:()J\n-   #193 = Methodref          #775.#776    // java/lang/System.currentTimeMillis:()J\n-   #194 = Methodref          #88.#777     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setTime:(J)V\n-   #195 = String             #778         // Uncompressed size is required for STORED method when not writing to a file\n-   #196 = String             #779         // CRC checksum is required for STORED method when not writing to a file\n-   #197 = Class              #780         // java/lang/IllegalArgumentException\n-   #198 = String             #781         // Invalid compression level:\n-   #199 = Methodref          #133.#782    // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #200 = Methodref          #197.#654    // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #201 = Fieldref           #783.#784    // org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #202 = Methodref          #783.#785    // org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n-   #203 = Fieldref           #783.#786    // org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #204 = Methodref          #787.#788    // org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #205 = Methodref          #9.#789      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writePreamble:([BII)V\n-   #206 = Class              #790         // java/lang/IllegalStateException\n-   #207 = String             #791         // Preamble must be written before creating an entry\n-   #208 = Methodref          #206.#654    // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-   #209 = Methodref          #624.#792    // org/apache/commons/compress/archivers/zip/StreamCompressor.writeCounted:([BII)V\n-   #210 = String             #793         // No current entry\n-   #211 = Methodref          #787.#794    // org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #212 = Methodref          #624.#795    // org/apache/commons/compress/archivers/zip/StreamCompressor.write:([BIII)J\n-   #213 = Methodref          #9.#796      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.count:(J)V\n-   #214 = Methodref          #624.#686    // org/apache/commons/compress/archivers/zip/StreamCompressor.writeCounted:([B)V\n-   #215 = Methodref          #176.#797    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n-   #216 = Methodref          #798.#799    // java/io/InputStream.read:([B)I\n-   #217 = Methodref          #9.#800      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.count:(I)V\n-   #218 = Methodref          #9.#801      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.finish:()V\n-   #219 = Methodref          #9.#802      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.destroy:()V\n-   #220 = Methodref          #675.#803    // java/io/OutputStream.flush:()V\n-   #221 = Methodref          #624.#804    // org/apache/commons/compress/archivers/zip/StreamCompressor.deflate:()V\n-   #222 = InterfaceMethodref #663.#805    // org/apache/commons/compress/archivers/zip/ZipEncoding.canEncode:(Ljava/lang/String;)Z\n-   #223 = Methodref          #9.#806      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.addUnicodeExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V\n-   #224 = Methodref          #88.#807     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDiskNumberStart:(J)V\n-   #225 = Methodref          #9.#808      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.createLocalFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B\n-   #226 = Class              #809         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData\n-   #227 = Methodref          #9.#810      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.usesDataDescriptor:(IZ)Z\n-   #228 = Methodref          #226.#811    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData.\"<init>\":(JZLorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n-   #229 = InterfaceMethodref #671.#812    // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #170 = Methodref          #9.#733      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.versionNeededToExtract:(IZZ)I\n+   #171 = Methodref          #734.#735    // org/apache/commons/compress/archivers/zip/ZipShort.getBytes:(I)[B\n+   #172 = Methodref          #88.#736     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setExtra:()V\n+   #173 = Methodref          #176.#737    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$500:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n+   #174 = Fieldref           #9.#738      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.hasUsedZip64:Z\n+   #175 = Methodref          #9.#739      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.closeArchiveEntry:()V\n+   #176 = Class              #740         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry\n+   #177 = Methodref          #176.#741    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n+   #178 = InterfaceMethodref #658.#742    // java/util/List.add:(Ljava/lang/Object;)Z\n+   #179 = Methodref          #9.#743      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.setDefaults:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #180 = Methodref          #9.#744      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.validateSizeInformation:(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V\n+   #181 = Methodref          #9.#745      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.shouldAddZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+   #182 = Methodref          #9.#746      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n+   #183 = Class              #747         // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+   #184 = Methodref          #183.#748    // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n+   #185 = Fieldref           #183.#749    // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #186 = Methodref          #317.#750    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #187 = Methodref          #317.#751    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #188 = Fieldref           #9.#752      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.hasCompressionLevelChanged:Z\n+   #189 = Methodref          #2.#753      // java/util/zip/Deflater.setLevel:(I)V\n+   #190 = Methodref          #9.#754      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writeLocalFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V\n+   #191 = Methodref          #88.#755     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setMethod:(I)V\n+   #192 = Methodref          #88.#756     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getTime:()J\n+   #193 = Methodref          #757.#758    // java/lang/System.currentTimeMillis:()J\n+   #194 = Methodref          #88.#759     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setTime:(J)V\n+   #195 = String             #760         // Uncompressed size is required for STORED method when not writing to a file\n+   #196 = String             #761         // CRC checksum is required for STORED method when not writing to a file\n+   #197 = Class              #762         // java/lang/IllegalArgumentException\n+   #198 = String             #763         // Invalid compression level:\n+   #199 = Methodref          #133.#764    // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #200 = Methodref          #197.#641    // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #201 = Fieldref           #765.#766    // org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #202 = Methodref          #765.#767    // org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+   #203 = Fieldref           #765.#768    // org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #204 = Methodref          #769.#770    // org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #205 = Methodref          #9.#771      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.writePreamble:([BII)V\n+   #206 = Class              #772         // java/lang/IllegalStateException\n+   #207 = String             #773         // Preamble must be written before creating an entry\n+   #208 = Methodref          #206.#641    // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+   #209 = Methodref          #468.#774    // org/apache/commons/compress/archivers/zip/StreamCompressor.writeCounted:([BII)V\n+   #210 = String             #775         // No current entry\n+   #211 = Methodref          #769.#776    // org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #212 = Methodref          #468.#777    // org/apache/commons/compress/archivers/zip/StreamCompressor.write:([BIII)J\n+   #213 = Methodref          #9.#778      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.count:(J)V\n+   #214 = Methodref          #468.#669    // org/apache/commons/compress/archivers/zip/StreamCompressor.writeCounted:([B)V\n+   #215 = Methodref          #176.#779    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n+   #216 = Methodref          #780.#781    // java/io/InputStream.read:([B)I\n+   #217 = Methodref          #9.#782      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.count:(I)V\n+   #218 = Methodref          #9.#783      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.finish:()V\n+   #219 = Methodref          #9.#784      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.destroy:()V\n+   #220 = Methodref          #466.#785    // java/io/OutputStream.flush:()V\n+   #221 = Methodref          #468.#786    // org/apache/commons/compress/archivers/zip/StreamCompressor.deflate:()V\n+   #222 = InterfaceMethodref #572.#787    // org/apache/commons/compress/archivers/zip/ZipEncoding.canEncode:(Ljava/lang/String;)Z\n+   #223 = Methodref          #9.#788      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.addUnicodeExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V\n+   #224 = Methodref          #88.#789     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDiskNumberStart:(J)V\n+   #225 = Methodref          #9.#790      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.createLocalFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B\n+   #226 = Class              #791         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData\n+   #227 = Methodref          #9.#792      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.usesDataDescriptor:(IZ)Z\n+   #228 = Methodref          #226.#793    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData.\"<init>\":(JZLorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n+   #229 = InterfaceMethodref #656.#794    // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n    #230 = Long               14l\n-   #232 = Methodref          #176.#813    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$402:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n-   #233 = Methodref          #176.#814    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$002:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n-   #234 = Fieldref           #236.#815    // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #235 = Methodref          #88.#816     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-   #236 = Class              #817         // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n-   #237 = Methodref          #88.#818     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getAlignment:()I\n-   #238 = Methodref          #236.#819    // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.getAlignment:()S\n-   #239 = Methodref          #236.#820    // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.allowMethodChange:()Z\n-   #240 = Methodref          #88.#821     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalFileDataExtra:()[B\n-   #241 = Class              #822         // org/apache/commons/compress/archivers/zip/ZipExtraField\n+   #232 = Methodref          #176.#795    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$402:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n+   #233 = Methodref          #176.#796    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$002:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n+   #234 = Fieldref           #236.#797    // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #235 = Methodref          #88.#798     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+   #236 = Class              #799         // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n+   #237 = Methodref          #88.#800     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getAlignment:()I\n+   #238 = Methodref          #236.#801    // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.getAlignment:()S\n+   #239 = Methodref          #236.#802    // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.allowMethodChange:()Z\n+   #240 = Methodref          #88.#803     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalFileDataExtra:()[B\n+   #241 = Class              #804         // org/apache/commons/compress/archivers/zip/ZipExtraField\n    #242 = Long               2l\n-   #244 = Methodref          #236.#823    // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.\"<init>\":(IZI)V\n-   #245 = Methodref          #88.#824     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.addExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n-   #246 = Fieldref           #9.#825      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n-   #247 = Methodref          #775.#826    // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #248 = Methodref          #752.#827    // org/apache/commons/compress/archivers/zip/ZipShort.putShort:(I[BI)V\n-   #249 = Methodref          #9.#828      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getGeneralPurposeBits:(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #250 = Methodref          #4.#829      // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.encode:([BI)V\n-   #251 = Methodref          #787.#830    // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(Ljava/util/Calendar;J[BI)V\n-   #252 = Methodref          #287.#831    // org/apache/commons/compress/archivers/zip/ZipLong.putLong:(J[BI)V\n-   #253 = Fieldref           #9.#832      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LZERO:[B\n-   #254 = Methodref          #287.#833    // org/apache/commons/compress/archivers/zip/ZipLong.putLong:([BI)V\n-   #255 = Methodref          #665.#834    // java/nio/ByteBuffer.array:()[B\n-   #256 = Methodref          #665.#835    // java/nio/ByteBuffer.arrayOffset:()I\n-   #257 = Fieldref           #336.#836    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy.ALWAYS:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n-   #258 = Class              #837         // org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n-   #259 = Methodref          #258.#838    // org/apache/commons/compress/archivers/zip/UnicodePathExtraField.\"<init>\":(Ljava/lang/String;[BII)V\n-   #260 = Methodref          #88.#839     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getComment:()Ljava/lang/String;\n-   #261 = Methodref          #840.#841    // java/lang/String.isEmpty:()Z\n-   #262 = Methodref          #9.#842      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getEntryEncoding:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #263 = Class              #843         // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n-   #264 = Methodref          #263.#838    // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.\"<init>\":(Ljava/lang/String;[BII)V\n-   #265 = Fieldref           #9.#844      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n-   #266 = InterfaceMethodref #671.#845    // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #267 = Methodref          #226.#846    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData.access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)J\n-   #268 = Methodref          #88.#847     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n+   #244 = Methodref          #236.#805    // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.\"<init>\":(IZI)V\n+   #245 = Methodref          #88.#806     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.addExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n+   #246 = Fieldref           #9.#807      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n+   #247 = Methodref          #757.#808    // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #248 = Methodref          #734.#809    // org/apache/commons/compress/archivers/zip/ZipShort.putShort:(I[BI)V\n+   #249 = Methodref          #9.#810      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getGeneralPurposeBits:(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+   #250 = Methodref          #4.#811      // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.encode:([BI)V\n+   #251 = Methodref          #769.#812    // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(Ljava/util/Calendar;J[BI)V\n+   #252 = Methodref          #287.#813    // org/apache/commons/compress/archivers/zip/ZipLong.putLong:(J[BI)V\n+   #253 = Fieldref           #9.#814      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LZERO:[B\n+   #254 = Methodref          #287.#815    // org/apache/commons/compress/archivers/zip/ZipLong.putLong:([BI)V\n+   #255 = Methodref          #489.#816    // java/nio/ByteBuffer.array:()[B\n+   #256 = Methodref          #489.#817    // java/nio/ByteBuffer.arrayOffset:()I\n+   #257 = Fieldref           #336.#818    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy.ALWAYS:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n+   #258 = Class              #819         // org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n+   #259 = Methodref          #258.#820    // org/apache/commons/compress/archivers/zip/UnicodePathExtraField.\"<init>\":(Ljava/lang/String;[BII)V\n+   #260 = Methodref          #88.#821     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getComment:()Ljava/lang/String;\n+   #261 = Methodref          #541.#822    // java/lang/String.isEmpty:()Z\n+   #262 = Methodref          #9.#823      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.getEntryEncoding:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #263 = Class              #824         // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n+   #264 = Methodref          #263.#820    // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.\"<init>\":(Ljava/lang/String;[BII)V\n+   #265 = Fieldref           #9.#825      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n+   #266 = InterfaceMethodref #656.#826    // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #267 = Methodref          #226.#827    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData.access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)J\n+   #268 = Methodref          #88.#828     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J\n    #269 = Long               65535l\n-   #271 = String             #848         // Archive\\'s size exceeds the limit of 4GByte.\n-   #272 = Methodref          #9.#849      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.handleZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V\n-   #273 = Methodref          #9.#850      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.createCentralFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B\n-   #274 = Methodref          #275.#851    // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #275 = Class              #852         // java/lang/Integer\n-   #276 = Methodref          #275.#853    // java/lang/Integer.intValue:()I\n-   #277 = Methodref          #88.#854     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCentralDirectoryExtra:()[B\n-   #278 = Fieldref           #9.#855      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.CFH_SIG:[B\n-   #279 = Methodref          #88.#856     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getPlatform:()I\n-   #280 = Methodref          #226.#857    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData.access$900:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)Z\n+   #271 = String             #829         // Archive\\'s size exceeds the limit of 4GByte.\n+   #272 = Methodref          #9.#830      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.handleZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V\n+   #273 = Methodref          #9.#831      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.createCentralFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B\n+   #274 = Methodref          #275.#832    // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+   #275 = Class              #833         // java/lang/Integer\n+   #276 = Methodref          #275.#834    // java/lang/Integer.intValue:()I\n+   #277 = Methodref          #88.#835     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCentralDirectoryExtra:()[B\n+   #278 = Fieldref           #9.#836      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.CFH_SIG:[B\n+   #279 = Methodref          #88.#837     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getPlatform:()I\n+   #280 = Methodref          #226.#838    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData.access$900:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)Z\n    #281 = Integer            65535\n-   #282 = Fieldref           #9.#858      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZERO:[B\n-   #283 = Methodref          #88.#859     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getInternalAttributes:()I\n-   #284 = Methodref          #88.#860     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExternalAttributes:()J\n-   #285 = Methodref          #861.#862    // java/lang/Math.min:(JJ)J\n-   #286 = Methodref          #317.#863    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setRelativeHeaderOffset:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #287 = Class              #864         // org/apache/commons/compress/archivers/zip/ZipLong\n-   #288 = Methodref          #287.#766    // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":(J)V\n-   #289 = Methodref          #317.#865    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setDiskStartNumber:(Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n-   #290 = Methodref          #54.#866     // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.prepareToWriteUnsplittableContent:(J)V\n-   #291 = Methodref          #9.#867      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.validateIfZip64IsNeededInEOCD:()V\n-   #292 = Fieldref           #9.#868      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n-   #293 = InterfaceMethodref #673.#869    // java/util/List.size:()I\n-   #294 = Methodref          #861.#870    // java/lang/Math.min:(II)I\n-   #295 = String             #871         // Number of the disk of End Of Central Directory exceeds the limit of 65535.\n-   #296 = String             #872         // Number of the disk with the start of Central Directory exceeds the limit of 65535.\n-   #297 = String             #873         // Number of entries on this disk exceeds the limit of 65535.\n-   #298 = String             #874         // Archive contains more than 65535 entries.\n-   #299 = String             #875         // The size of the entire central directory exceeds the limit of 4GByte.\n-   #300 = Methodref          #9.#876      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.shouldUseZip64EOCD:()Z\n-   #301 = Fieldref           #9.#877      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_SIG:[B\n+   #282 = Fieldref           #9.#839      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZERO:[B\n+   #283 = Methodref          #88.#840     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getInternalAttributes:()I\n+   #284 = Methodref          #88.#841     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExternalAttributes:()J\n+   #285 = Methodref          #842.#843    // java/lang/Math.min:(JJ)J\n+   #286 = Methodref          #317.#844    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setRelativeHeaderOffset:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #287 = Class              #845         // org/apache/commons/compress/archivers/zip/ZipLong\n+   #288 = Methodref          #287.#748    // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":(J)V\n+   #289 = Methodref          #317.#846    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setDiskStartNumber:(Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+   #290 = Methodref          #54.#847     // org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.prepareToWriteUnsplittableContent:(J)V\n+   #291 = Methodref          #9.#848      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.validateIfZip64IsNeededInEOCD:()V\n+   #292 = Fieldref           #9.#849      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n+   #293 = InterfaceMethodref #658.#850    // java/util/List.size:()I\n+   #294 = Methodref          #842.#851    // java/lang/Math.min:(II)I\n+   #295 = String             #852         // Number of the disk of End Of Central Directory exceeds the limit of 65535.\n+   #296 = String             #853         // Number of the disk with the start of Central Directory exceeds the limit of 65535.\n+   #297 = String             #854         // Number of entries on this disk exceeds the limit of 65535.\n+   #298 = String             #855         // Archive contains more than 65535 entries.\n+   #299 = String             #856         // The size of the entire central directory exceeds the limit of 4GByte.\n+   #300 = Methodref          #9.#857      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.shouldUseZip64EOCD:()Z\n+   #301 = Fieldref           #9.#858      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_SIG:[B\n    #302 = Long               44l\n    #304 = Long               20l\n-   #306 = Fieldref           #9.#878      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG:[B\n-   #307 = Fieldref           #9.#879      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ONE:[B\n-   #308 = Methodref          #624.#880    // org/apache/commons/compress/archivers/zip/StreamCompressor.writeOut:([BII)V\n-   #309 = Methodref          #4.#595      // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.\"<init>\":()V\n-   #310 = Methodref          #4.#881      // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.useUTF8ForNames:(Z)V\n-   #311 = Methodref          #4.#882      // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.useDataDescriptor:(Z)V\n-   #312 = Methodref          #9.#883      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.versionNeededToExtractMethod:(I)I\n-   #313 = Methodref          #88.#884     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-   #314 = Class              #885         // java/nio/file/LinkOption\n-   #315 = Methodref          #88.#886     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n-   #316 = Methodref          #176.#887    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$502:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n-   #317 = Class              #888         // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-   #318 = Methodref          #317.#595    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.\"<init>\":()V\n-   #319 = Methodref          #88.#889     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.addAsFirstExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n-   #320 = Fieldref           #3.#890      // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #321 = InterfaceMethodref #742.#674    // java/nio/channels/SeekableByteChannel.close:()V\n-   #322 = Fieldref           #287.#891    // org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #323 = Fieldref           #287.#892    // org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #324 = Fieldref           #287.#893    // org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #306 = Fieldref           #9.#859      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG:[B\n+   #307 = Fieldref           #9.#860      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ONE:[B\n+   #308 = Methodref          #468.#861    // org/apache/commons/compress/archivers/zip/StreamCompressor.writeOut:([BII)V\n+   #309 = Methodref          #4.#584      // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.\"<init>\":()V\n+   #310 = Methodref          #4.#862      // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.useUTF8ForNames:(Z)V\n+   #311 = Methodref          #4.#863      // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.useDataDescriptor:(Z)V\n+   #312 = Methodref          #9.#864      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.versionNeededToExtractMethod:(I)I\n+   #313 = Methodref          #88.#865     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.\"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+   #314 = Class              #866         // java/nio/file/LinkOption\n+   #315 = Methodref          #88.#867     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n+   #316 = Methodref          #176.#868    // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry.access$502:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n+   #317 = Class              #869         // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+   #318 = Methodref          #317.#584    // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.\"<init>\":()V\n+   #319 = Methodref          #88.#870     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.addAsFirstExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n+   #320 = Fieldref           #3.#871      // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #321 = InterfaceMethodref #467.#659    // java/nio/channels/SeekableByteChannel.close:()V\n+   #322 = Fieldref           #287.#872    // org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #323 = Fieldref           #287.#873    // org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #324 = Fieldref           #287.#874    // org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n    #325 = Long               101010256l\n    #327 = Long               101075792l\n    #329 = Long               117853008l\n-   #331 = Class              #894         // org/apache/commons/compress/archivers/ArchiveOutputStream\n-   #332 = Class              #895         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1\n+   #331 = Class              #875         // org/apache/commons/compress/archivers/ArchiveOutputStream\n+   #332 = Class              #876         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1\n    #333 = Utf8               InnerClasses\n    #334 = Utf8               EntryMetaData\n    #335 = Utf8               CurrentEntry\n-   #336 = Class              #896         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy\n+   #336 = Class              #877         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy\n    #337 = Utf8               UnicodeExtraFieldPolicy\n    #338 = Utf8               BUFFER_SIZE\n    #339 = Utf8               I\n    #340 = Utf8               ConstantValue\n    #341 = Integer            512\n    #342 = Utf8               LFH_SIG_OFFSET\n    #343 = Integer            0\n@@ -453,644 +453,625 @@\n    #457 = Utf8               (Ljava/io/OutputStream;)V\n    #458 = Utf8               Code\n    #459 = Utf8               LineNumberTable\n    #460 = Utf8               (Ljava/io/File;)V\n    #461 = Utf8               Exceptions\n    #462 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)V\n    #463 = Utf8               StackMapTable\n-   #464 = Class              #598         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-   #465 = Class              #897         // java/nio/file/Path\n-   #466 = Class              #898         // \"[Ljava/nio/file/OpenOption;\"\n-   #467 = Class              #899         // java/io/OutputStream\n-   #468 = Class              #900         // java/nio/channels/SeekableByteChannel\n-   #469 = Class              #901         // org/apache/commons/compress/archivers/zip/StreamCompressor\n-   #470 = Class              #643         // java/io/IOException\n-   #471 = Utf8               (Ljava/io/File;J)V\n-   #472 = Utf8               (Ljava/nio/file/Path;J)V\n-   #473 = Utf8               (Ljava/nio/channels/SeekableByteChannel;)V\n-   #474 = Utf8               isSeekable\n-   #475 = Utf8               ()Z\n-   #476 = Utf8               setEncoding\n-   #477 = Utf8               (Ljava/lang/String;)V\n-   #478 = Utf8               getEncoding\n-   #479 = Utf8               ()Ljava/lang/String;\n-   #480 = Utf8               setUseLanguageEncodingFlag\n-   #481 = Utf8               (Z)V\n-   #482 = Utf8               setCreateUnicodeExtraFields\n-   #483 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;)V\n-   #484 = Utf8               setFallbackToUTF8\n-   #485 = Utf8               setUseZip64\n-   #486 = Utf8               (Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V\n-   #487 = Utf8               getBytesWritten\n-   #488 = Utf8               ()J\n-   #489 = Utf8               finish\n-   #490 = Utf8               ()V\n-   #491 = Class              #902         // java/nio/ByteBuffer\n-   #492 = Utf8               writeCentralDirectoryInChunks\n-   #493 = Class              #676         // java/io/ByteArrayOutputStream\n-   #494 = Class              #903         // java/util/Iterator\n-   #495 = Utf8               closeArchiveEntry\n-   #496 = Utf8               closeCopiedEntry\n-   #497 = Utf8               closeEntry\n-   #498 = Utf8               (ZZ)V\n-   #499 = Utf8               preClose\n-   #500 = Utf8               addRawArchiveEntry\n-   #501 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n-   #502 = Class              #682         // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-   #503 = Utf8               flushDeflater\n-   #504 = Utf8               handleSizesAndCrc\n-   #505 = Utf8               (JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-   #506 = Utf8               checkIfNeedsZip64\n-   #507 = Utf8               (Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-   #508 = Utf8               isZip64Required\n-   #509 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-   #510 = Utf8               isTooLargeForZip32\n-   #511 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #512 = Utf8               rewriteSizesAndCrc\n-   #513 = Utf8               putArchiveEntry\n-   #514 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n-   #515 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V\n-   #516 = Class              #904         // org/apache/commons/compress/archivers/zip/Zip64Mode\n-   #517 = Class              #888         // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-   #518 = Class              #765         // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-   #519 = Utf8               setDefaults\n-   #520 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #521 = Utf8               validateSizeInformation\n-   #522 = Utf8               shouldAddZip64Extra\n-   #523 = Utf8               setComment\n-   #524 = Utf8               setLevel\n-   #525 = Utf8               (I)V\n-   #526 = Utf8               setMethod\n-   #527 = Utf8               canWriteEntryData\n-   #528 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z\n-   #529 = Utf8               writePreamble\n-   #530 = Utf8               ([B)V\n-   #531 = Utf8               ([BII)V\n-   #532 = Utf8               write\n-   #533 = Utf8               writeCounted\n-   #534 = Utf8               copyFromZipInputStream\n-   #535 = Utf8               (Ljava/io/InputStream;)V\n-   #536 = Utf8               close\n-   #537 = Class              #905         // java/lang/Throwable\n-   #538 = Utf8               flush\n-   #539 = Utf8               deflate\n-   #540 = Utf8               writeLocalFileHeader\n-   #541 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V\n-   #542 = Utf8               createLocalFileHeader\n-   #543 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B\n-   #544 = Class              #822         // org/apache/commons/compress/archivers/zip/ZipExtraField\n-   #545 = Class              #817         // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n-   #546 = Class              #422         // \"[B\"\n-   #547 = Class              #593         // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-   #548 = Utf8               addUnicodeExtraFields\n-   #549 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V\n-   #550 = Class              #906         // java/lang/String\n-   #551 = Utf8               writeDataDescriptor\n-   #552 = Utf8               writeCentralFileHeader\n-   #553 = Utf8               createCentralFileHeader\n-   #554 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B\n-   #555 = Class              #809         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData\n-   #556 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B\n-   #557 = Utf8               handleZip64Extra\n-   #558 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V\n-   #559 = Utf8               writeCentralDirectoryEnd\n-   #560 = Utf8               validateIfZip64IsNeededInEOCD\n-   #561 = Utf8               writeZip64CentralDirectory\n-   #562 = Utf8               shouldUseZip64EOCD\n-   #563 = Utf8               writeOut\n-   #564 = Utf8               getGeneralPurposeBits\n-   #565 = Utf8               (ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #566 = Utf8               versionNeededToExtract\n-   #567 = Utf8               (IZZ)I\n-   #568 = Utf8               usesDataDescriptor\n-   #569 = Utf8               (IZ)Z\n-   #570 = Utf8               versionNeededToExtractMethod\n-   #571 = Utf8               (I)I\n-   #572 = Utf8               createArchiveEntry\n-   #573 = Utf8               (Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/ArchiveEntry;\n-   #574 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Lorg/apache/commons/compress/archivers/ArchiveEntry;\n-   #575 = Utf8               getZip64Extra\n-   #576 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n-   #577 = Class              #758         // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry\n-   #578 = Utf8               hasZip64Extra\n-   #579 = Utf8               getEffectiveZip64Mode\n-   #580 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-   #581 = Utf8               getEntryEncoding\n-   #582 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #583 = Class              #907         // org/apache/commons/compress/archivers/zip/ZipEncoding\n-   #584 = Utf8               getName\n-   #585 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/nio/ByteBuffer;\n-   #586 = Utf8               destroy\n-   #587 = Utf8               <clinit>\n-   #588 = Utf8               SourceFile\n-   #589 = Utf8               ZipArchiveOutputStream.java\n-   #590 = Utf8               java/util/zip/ZipEntry\n-   #591 = Utf8               java/util/zip/Deflater\n-   #592 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-   #593 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-   #594 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n-   #595 = NameAndType        #456:#490    // \"<init>\":()V\n-   #596 = Utf8\n-   #597 = NameAndType        #406:#398    // comment:Ljava/lang/String;\n-   #598 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-   #599 = NameAndType        #407:#339    // level:I\n-   #600 = NameAndType        #409:#339    // method:I\n-   #601 = Utf8               java/util/LinkedList\n-   #602 = NameAndType        #410:#411    // entries:Ljava/util/List;\n-   #603 = Utf8               java/util/HashMap\n-   #604 = NameAndType        #425:#426    // metaData:Ljava/util/Map;\n-   #605 = Utf8               UTF8\n-   #606 = NameAndType        #428:#398    // encoding:Ljava/lang/String;\n-   #607 = NameAndType        #908:#909    // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #608 = NameAndType        #429:#430    // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #609 = NameAndType        #437:#392    // useUTF8Flag:Z\n-   #610 = NameAndType        #910:#440    // NEVER:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n-   #611 = NameAndType        #439:#440    // createUnicodeExtraFields:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n-   #612 = Class              #904         // org/apache/commons/compress/archivers/zip/Zip64Mode\n-   #613 = NameAndType        #911:#443    // AsNeeded:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-   #614 = NameAndType        #442:#443    // zip64Mode:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-   #615 = NameAndType        #444:#422    // copyBuffer:[B\n-   #616 = Class              #912         // java/util/Calendar\n-   #617 = NameAndType        #913:#914    // getInstance:()Ljava/util/Calendar;\n-   #618 = NameAndType        #445:#446    // calendarInstance:Ljava/util/Calendar;\n-   #619 = NameAndType        #448:#426    // numberOfCDInDiskData:Ljava/util/Map;\n-   #620 = NameAndType        #435:#436    // outputStream:Ljava/io/OutputStream;\n-   #621 = NameAndType        #433:#434    // channel:Ljava/nio/channels/SeekableByteChannel;\n-   #622 = NameAndType        #456:#915    // \"<init>\":(IZ)V\n-   #623 = NameAndType        #431:#432    // def:Ljava/util/zip/Deflater;\n-   #624 = Class              #901         // org/apache/commons/compress/archivers/zip/StreamCompressor\n-   #625 = NameAndType        #916:#917    // create:(Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-   #626 = NameAndType        #414:#415    // streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-   #627 = NameAndType        #447:#392    // isSplitZip:Z\n-   #628 = Class              #918         // java/io/File\n-   #629 = NameAndType        #919:#920    // toPath:()Ljava/nio/file/Path;\n-   #630 = Utf8               java/nio/file/OpenOption\n-   #631 = NameAndType        #456:#462    // \"<init>\":(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)V\n-   #632 = Class              #921         // java/nio/file/StandardOpenOption\n-   #633 = NameAndType        #922:#923    // CREATE:Ljava/nio/file/StandardOpenOption;\n-   #634 = NameAndType        #924:#923    // WRITE:Ljava/nio/file/StandardOpenOption;\n-   #635 = NameAndType        #925:#923    // READ:Ljava/nio/file/StandardOpenOption;\n-   #636 = NameAndType        #926:#923    // TRUNCATE_EXISTING:Ljava/nio/file/StandardOpenOption;\n-   #637 = Class              #927         // java/util/EnumSet\n-   #638 = NameAndType        #928:#929    // of:(Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;\n-   #639 = Utf8               java/nio/file/attribute/FileAttribute\n-   #640 = Class              #930         // java/nio/file/Files\n-   #641 = NameAndType        #931:#932    // newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n-   #642 = NameAndType        #916:#933    // create:(Ljava/nio/channels/SeekableByteChannel;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-   #643 = Utf8               java/io/IOException\n-   #644 = Class              #934         // org/apache/commons/compress/utils/IOUtils\n-   #645 = NameAndType        #935:#936    // closeQuietly:(Ljava/io/Closeable;)V\n-   #646 = NameAndType        #937:#938    // newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n-   #647 = NameAndType        #456:#472    // \"<init>\":(Ljava/nio/file/Path;J)V\n-   #648 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitOutputStream\n-   #649 = NameAndType        #939:#940    // isUTF8:(Ljava/lang/String;)Z\n-   #650 = NameAndType        #438:#392    // fallbackToUTF8:Z\n-   #651 = NameAndType        #941:#488    // getTotalBytesWritten:()J\n-   #652 = NameAndType        #391:#392    // finished:Z\n-   #653 = Utf8               This archive has already been finished\n-   #654 = NameAndType        #456:#477    // \"<init>\":(Ljava/lang/String;)V\n-   #655 = NameAndType        #404:#405    // entry:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;\n-   #656 = Utf8               This archive contains unclosed entries.\n-   #657 = NameAndType        #416:#417    // cdOffset:J\n-   #658 = NameAndType        #942:#488    // getCurrentSplitSegmentBytesWritten:()J\n-   #659 = NameAndType        #943:#944    // getCurrentSplitSegmentIndex:()I\n-   #660 = NameAndType        #419:#417    // cdDiskNumberStart:J\n-   #661 = NameAndType        #492:#490    // writeCentralDirectoryInChunks:()V\n-   #662 = NameAndType        #418:#417    // cdLength:J\n-   #663 = Class              #907         // org/apache/commons/compress/archivers/zip/ZipEncoding\n-   #664 = NameAndType        #945:#946    // encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-   #665 = Class              #902         // java/nio/ByteBuffer\n-   #666 = NameAndType        #947:#944    // limit:()I\n-   #667 = NameAndType        #948:#944    // position:()I\n-   #668 = NameAndType        #420:#417    // eocdLength:J\n-   #669 = NameAndType        #561:#490    // writeZip64CentralDirectory:()V\n-   #670 = NameAndType        #559:#490    // writeCentralDirectoryEnd:()V\n-   #671 = Class              #949         // java/util/Map\n-   #672 = NameAndType        #950:#490    // clear:()V\n-   #673 = Class              #951         // java/util/List\n-   #674 = NameAndType        #536:#490    // close:()V\n-   #675 = Class              #899         // java/io/OutputStream\n-   #676 = Utf8               java/io/ByteArrayOutputStream\n-   #677 = NameAndType        #456:#525    // \"<init>\":(I)V\n-   #678 = NameAndType        #952:#953    // iterator:()Ljava/util/Iterator;\n-   #679 = Class              #903         // java/util/Iterator\n-   #680 = NameAndType        #954:#475    // hasNext:()Z\n-   #681 = NameAndType        #955:#956    // next:()Ljava/lang/Object;\n-   #682 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-   #683 = NameAndType        #553:#554    // createCentralFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B\n-   #684 = NameAndType        #532:#530    // write:([B)V\n-   #685 = NameAndType        #957:#958    // toByteArray:()[B\n-   #686 = NameAndType        #533:#530    // writeCounted:([B)V\n-   #687 = NameAndType        #959:#490    // reset:()V\n-   #688 = NameAndType        #499:#490    // preClose:()V\n-   #689 = NameAndType        #503:#490    // flushDeflater:()V\n-   #690 = NameAndType        #960:#961    // access$000:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n-   #691 = NameAndType        #962:#488    // getCrc32:()J\n-   #692 = NameAndType        #963:#488    // getBytesRead:()J\n-   #693 = NameAndType        #964:#965    // access$102:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n-   #694 = NameAndType        #966:#967    // access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-   #695 = NameAndType        #579:#580    // getEffectiveZip64Mode:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-   #696 = NameAndType        #504:#505    // handleSizesAndCrc:(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-   #697 = NameAndType        #497:#498    // closeEntry:(ZZ)V\n-   #698 = NameAndType        #968:#488    // getSize:()J\n-   #699 = NameAndType        #506:#507    // checkIfNeedsZip64:(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-   #700 = NameAndType        #512:#481    // rewriteSizesAndCrc:(Z)V\n-   #701 = NameAndType        #551:#520    // writeDataDescriptor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #702 = Utf8               Stream has already been finished\n-   #703 = Utf8               No current entry to close\n-   #704 = NameAndType        #969:#970    // access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n-   #705 = Class              #971         // org/apache/commons/compress/utils/ByteUtils\n-   #706 = NameAndType        #972:#422    // EMPTY_BYTE_ARRAY:[B\n-   #707 = NameAndType        #532:#531    // write:([BII)V\n-   #708 = NameAndType        #456:#520    // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #709 = NameAndType        #578:#511    // hasZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #710 = NameAndType        #973:#974    // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #711 = NameAndType        #975:#976    // removeExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-   #712 = NameAndType        #977:#488    // getCrc:()J\n-   #713 = Utf8               org/apache/commons/compress/archivers/ArchiveEntry\n-   #714 = NameAndType        #978:#488    // getCompressedSize:()J\n-   #715 = NameAndType        #513:#515    // putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V\n-   #716 = NameAndType        #534:#535    // copyFromZipInputStream:(Ljava/io/InputStream;)V\n-   #717 = NameAndType        #496:#481    // closeCopiedEntry:(Z)V\n-   #718 = NameAndType        #979:#944    // getMethod:()I\n-   #719 = NameAndType        #980:#961    // access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n-   #720 = NameAndType        #981:#982    // setSize:(J)V\n-   #721 = NameAndType        #983:#982    // setCompressedSize:(J)V\n-   #722 = NameAndType        #984:#982    // setCrc:(J)V\n-   #723 = Utf8               java/util/zip/ZipException\n-   #724 = Utf8               java/lang/StringBuilder\n-   #725 = Utf8               Bad CRC checksum for entry\n-   #726 = NameAndType        #985:#986    // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #727 = NameAndType        #584:#479    // getName:()Ljava/lang/String;\n-   #728 = Utf8               :\n-   #729 = Class              #987         // java/lang/Long\n-   #730 = NameAndType        #988:#989    // toHexString:(J)Ljava/lang/String;\n-   #731 = Utf8                instead of\n-   #732 = NameAndType        #990:#479    // toString:()Ljava/lang/String;\n-   #733 = Utf8               Bad size for entry\n-   #734 = NameAndType        #985:#991    // append:(J)Ljava/lang/StringBuilder;\n-   #735 = NameAndType        #508:#509    // isZip64Required:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-   #736 = NameAndType        #992:#443    // Never:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-   #737 = Utf8               org/apache/commons/compress/archivers/zip/Zip64RequiredException\n-   #738 = NameAndType        #993:#994    // getEntryTooBigMessage:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n-   #739 = NameAndType        #995:#443    // Always:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-   #740 = NameAndType        #996:#443    // AlwaysWithCompatibility:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n-   #741 = NameAndType        #510:#511    // isTooLargeForZip32:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #742 = Class              #900         // java/nio/channels/SeekableByteChannel\n-   #743 = NameAndType        #948:#488    // position:()J\n-   #744 = NameAndType        #997:#961    // access$400:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n-   #745 = NameAndType        #948:#998    // position:(J)Ljava/nio/channels/SeekableByteChannel;\n-   #746 = NameAndType        #999:#1000   // getBytes:(J)[B\n-   #747 = NameAndType        #563:#530    // writeOut:([B)V\n-   #748 = NameAndType        #1001:#1002  // ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #749 = NameAndType        #999:#958    // getBytes:()[B\n-   #750 = NameAndType        #584:#585    // getName:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/nio/ByteBuffer;\n-   #751 = NameAndType        #566:#567    // versionNeededToExtract:(IZZ)I\n-   #752 = Class              #1003        // org/apache/commons/compress/archivers/zip/ZipShort\n-   #753 = NameAndType        #999:#1004   // getBytes:(I)[B\n-   #754 = NameAndType        #1005:#490   // setExtra:()V\n-   #755 = NameAndType        #1006:#970   // access$500:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n-   #756 = NameAndType        #441:#392    // hasUsedZip64:Z\n-   #757 = NameAndType        #495:#490    // closeArchiveEntry:()V\n-   #758 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry\n-   #759 = NameAndType        #456:#1007   // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n-   #760 = NameAndType        #1008:#1009  // add:(Ljava/lang/Object;)Z\n-   #761 = NameAndType        #519:#520    // setDefaults:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #762 = NameAndType        #521:#486    // validateSizeInformation:(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V\n-   #763 = NameAndType        #522:#509    // shouldAddZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n-   #764 = NameAndType        #575:#576    // getZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n-   #765 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-   #766 = NameAndType        #456:#982    // \"<init>\":(J)V\n-   #767 = NameAndType        #421:#1010   // ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #768 = NameAndType        #981:#1011   // setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #769 = NameAndType        #983:#1011   // setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #770 = NameAndType        #408:#392    // hasCompressionLevelChanged:Z\n-   #771 = NameAndType        #524:#525    // setLevel:(I)V\n-   #772 = NameAndType        #540:#541    // writeLocalFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V\n-   #773 = NameAndType        #526:#525    // setMethod:(I)V\n-   #774 = NameAndType        #1012:#488   // getTime:()J\n-   #775 = Class              #1013        // java/lang/System\n-   #776 = NameAndType        #1014:#488   // currentTimeMillis:()J\n-   #777 = NameAndType        #1015:#982   // setTime:(J)V\n-   #778 = Utf8               Uncompressed size is required for STORED method when not writing to a file\n-   #779 = Utf8               CRC checksum is required for STORED method when not writing to a file\n-   #780 = Utf8               java/lang/IllegalArgumentException\n-   #781 = Utf8               Invalid compression level:\n-   #782 = NameAndType        #985:#1016   // append:(I)Ljava/lang/StringBuilder;\n-   #783 = Class              #1017        // org/apache/commons/compress/archivers/zip/ZipMethod\n-   #784 = NameAndType        #1018:#1019  // IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #785 = NameAndType        #1020:#944   // getCode:()I\n-   #786 = NameAndType        #1021:#1019  // UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #787 = Class              #1022        // org/apache/commons/compress/archivers/zip/ZipUtil\n-   #788 = NameAndType        #1023:#511   // canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #789 = NameAndType        #529:#531    // writePreamble:([BII)V\n-   #790 = Utf8               java/lang/IllegalStateException\n-   #791 = Utf8               Preamble must be written before creating an entry\n-   #792 = NameAndType        #533:#531    // writeCounted:([BII)V\n-   #793 = Utf8               No current entry\n-   #794 = NameAndType        #1024:#520   // checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #795 = NameAndType        #532:#1025   // write:([BIII)J\n-   #796 = NameAndType        #1026:#982   // count:(J)V\n-   #797 = NameAndType        #1027:#1028  // access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n-   #798 = Class              #1029        // java/io/InputStream\n-   #799 = NameAndType        #1030:#1031  // read:([B)I\n-   #800 = NameAndType        #1026:#525   // count:(I)V\n-   #801 = NameAndType        #489:#490    // finish:()V\n-   #802 = NameAndType        #586:#490    // destroy:()V\n-   #803 = NameAndType        #538:#490    // flush:()V\n-   #804 = NameAndType        #539:#490    // deflate:()V\n-   #805 = NameAndType        #1032:#940   // canEncode:(Ljava/lang/String;)Z\n-   #806 = NameAndType        #548:#549    // addUnicodeExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V\n-   #807 = NameAndType        #1033:#982   // setDiskNumberStart:(J)V\n-   #808 = NameAndType        #542:#543    // createLocalFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B\n-   #809 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData\n-   #810 = NameAndType        #568:#569    // usesDataDescriptor:(IZ)Z\n-   #811 = NameAndType        #456:#1034   // \"<init>\":(JZLorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n-   #812 = NameAndType        #1035:#1036  // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #813 = NameAndType        #1037:#965   // access$402:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n-   #814 = NameAndType        #1038:#965   // access$002:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n-   #815 = NameAndType        #1039:#974   // ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #816 = NameAndType        #1040:#1041  // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-   #817 = Utf8               org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n-   #818 = NameAndType        #1042:#944   // getAlignment:()I\n-   #819 = NameAndType        #1042:#1043  // getAlignment:()S\n-   #820 = NameAndType        #1044:#475   // allowMethodChange:()Z\n-   #821 = NameAndType        #1045:#958   // getLocalFileDataExtra:()[B\n-   #822 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n-   #823 = NameAndType        #456:#1046   // \"<init>\":(IZI)V\n-   #824 = NameAndType        #1047:#1048  // addExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n-   #825 = NameAndType        #450:#422    // LFH_SIG:[B\n-   #826 = NameAndType        #1049:#1050  // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #827 = NameAndType        #1051:#1052  // putShort:(I[BI)V\n-   #828 = NameAndType        #564:#565    // getGeneralPurposeBits:(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #829 = NameAndType        #945:#1053   // encode:([BI)V\n-   #830 = NameAndType        #1054:#1055  // toDosTime:(Ljava/util/Calendar;J[BI)V\n-   #831 = NameAndType        #1056:#1057  // putLong:(J[BI)V\n-   #832 = NameAndType        #423:#422    // LZERO:[B\n-   #833 = NameAndType        #1056:#1053  // putLong:([BI)V\n-   #834 = NameAndType        #1058:#958   // array:()[B\n-   #835 = NameAndType        #1059:#944   // arrayOffset:()I\n-   #836 = NameAndType        #1060:#440   // ALWAYS:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n-   #837 = Utf8               org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n-   #838 = NameAndType        #456:#1061   // \"<init>\":(Ljava/lang/String;[BII)V\n-   #839 = NameAndType        #1062:#479   // getComment:()Ljava/lang/String;\n-   #840 = Class              #906         // java/lang/String\n-   #841 = NameAndType        #1063:#475   // isEmpty:()Z\n-   #842 = NameAndType        #581:#582    // getEntryEncoding:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #843 = Utf8               org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n-   #844 = NameAndType        #451:#422    // DD_SIG:[B\n-   #845 = NameAndType        #1064:#1065  // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #846 = NameAndType        #1066:#1067  // access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)J\n-   #847 = NameAndType        #1068:#488   // getDiskNumberStart:()J\n-   #848 = Utf8               Archive\\'s size exceeds the limit of 4GByte.\n-   #849 = NameAndType        #557:#558    // handleZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V\n-   #850 = NameAndType        #553:#556    // createCentralFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B\n-   #851 = NameAndType        #1069:#1070  // valueOf:(I)Ljava/lang/Integer;\n-   #852 = Utf8               java/lang/Integer\n-   #853 = NameAndType        #1071:#944   // intValue:()I\n-   #854 = NameAndType        #1072:#958   // getCentralDirectoryExtra:()[B\n-   #855 = NameAndType        #452:#422    // CFH_SIG:[B\n-   #856 = NameAndType        #1073:#944   // getPlatform:()I\n-   #857 = NameAndType        #1074:#1075  // access$900:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)Z\n-   #858 = NameAndType        #421:#422    // ZERO:[B\n-   #859 = NameAndType        #1076:#944   // getInternalAttributes:()I\n-   #860 = NameAndType        #1077:#488   // getExternalAttributes:()J\n-   #861 = Class              #1078        // java/lang/Math\n-   #862 = NameAndType        #1079:#1080  // min:(JJ)J\n-   #863 = NameAndType        #1081:#1011  // setRelativeHeaderOffset:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #864 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-   #865 = NameAndType        #1082:#1083  // setDiskStartNumber:(Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n-   #866 = NameAndType        #1084:#982   // prepareToWriteUnsplittableContent:(J)V\n-   #867 = NameAndType        #560:#490    // validateIfZip64IsNeededInEOCD:()V\n-   #868 = NameAndType        #453:#422    // EOCD_SIG:[B\n-   #869 = NameAndType        #1085:#944   // size:()I\n-   #870 = NameAndType        #1079:#1086  // min:(II)I\n-   #871 = Utf8               Number of the disk of End Of Central Directory exceeds the limit of 65535.\n-   #872 = Utf8               Number of the disk with the start of Central Directory exceeds the limit of 65535.\n-   #873 = Utf8               Number of entries on this disk exceeds the limit of 65535.\n-   #874 = Utf8               Archive contains more than 65535 entries.\n-   #875 = Utf8               The size of the entire central directory exceeds the limit of 4GByte.\n-   #876 = NameAndType        #562:#475    // shouldUseZip64EOCD:()Z\n-   #877 = NameAndType        #454:#422    // ZIP64_EOCD_SIG:[B\n-   #878 = NameAndType        #455:#422    // ZIP64_EOCD_LOC_SIG:[B\n-   #879 = NameAndType        #424:#422    // ONE:[B\n-   #880 = NameAndType        #563:#531    // writeOut:([BII)V\n-   #881 = NameAndType        #1087:#481   // useUTF8ForNames:(Z)V\n-   #882 = NameAndType        #1088:#481   // useDataDescriptor:(Z)V\n-   #883 = NameAndType        #570:#571    // versionNeededToExtractMethod:(I)I\n-   #884 = NameAndType        #456:#1089   // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n-   #885 = Utf8               java/nio/file/LinkOption\n-   #886 = NameAndType        #456:#1090   // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n-   #887 = NameAndType        #1091:#1028  // access$502:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n-   #888 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-   #889 = NameAndType        #1092:#1048  // addAsFirstExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n-   #890 = NameAndType        #1093:#430   // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #891 = NameAndType        #450:#1002   // LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #892 = NameAndType        #451:#1002   // DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #893 = NameAndType        #452:#1002   // CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #894 = Utf8               org/apache/commons/compress/archivers/ArchiveOutputStream\n-   #895 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1\n-   #896 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy\n-   #897 = Utf8               java/nio/file/Path\n-   #898 = Utf8               [Ljava/nio/file/OpenOption;\n-   #899 = Utf8               java/io/OutputStream\n-   #900 = Utf8               java/nio/channels/SeekableByteChannel\n-   #901 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor\n-   #902 = Utf8               java/nio/ByteBuffer\n-   #903 = Utf8               java/util/Iterator\n-   #904 = Utf8               org/apache/commons/compress/archivers/zip/Zip64Mode\n-   #905 = Utf8               java/lang/Throwable\n-   #906 = Utf8               java/lang/String\n-   #907 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-   #908 = Utf8               getZipEncoding\n-   #909 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #910 = Utf8               NEVER\n-   #911 = Utf8               AsNeeded\n-   #912 = Utf8               java/util/Calendar\n-   #913 = Utf8               getInstance\n-   #914 = Utf8               ()Ljava/util/Calendar;\n-   #915 = Utf8               (IZ)V\n-   #916 = Utf8               create\n-   #917 = Utf8               (Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-   #918 = Utf8               java/io/File\n-   #919 = Utf8               toPath\n-   #920 = Utf8               ()Ljava/nio/file/Path;\n-   #921 = Utf8               java/nio/file/StandardOpenOption\n-   #922 = Utf8               CREATE\n-   #923 = Utf8               Ljava/nio/file/StandardOpenOption;\n-   #924 = Utf8               WRITE\n-   #925 = Utf8               READ\n-   #926 = Utf8               TRUNCATE_EXISTING\n-   #927 = Utf8               java/util/EnumSet\n-   #928 = Utf8               of\n-   #929 = Utf8               (Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;\n-   #930 = Utf8               java/nio/file/Files\n-   #931 = Utf8               newByteChannel\n-   #932 = Utf8               (Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n-   #933 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n-   #934 = Utf8               org/apache/commons/compress/utils/IOUtils\n-   #935 = Utf8               closeQuietly\n-   #936 = Utf8               (Ljava/io/Closeable;)V\n-   #937 = Utf8               newOutputStream\n-   #938 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n-   #939 = Utf8               isUTF8\n-   #940 = Utf8               (Ljava/lang/String;)Z\n-   #941 = Utf8               getTotalBytesWritten\n-   #942 = Utf8               getCurrentSplitSegmentBytesWritten\n-   #943 = Utf8               getCurrentSplitSegmentIndex\n-   #944 = Utf8               ()I\n-   #945 = Utf8               encode\n-   #946 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n-   #947 = Utf8               limit\n-   #948 = Utf8               position\n-   #949 = Utf8               java/util/Map\n-   #950 = Utf8               clear\n-   #951 = Utf8               java/util/List\n-   #952 = Utf8               iterator\n-   #953 = Utf8               ()Ljava/util/Iterator;\n-   #954 = Utf8               hasNext\n-   #955 = Utf8               next\n-   #956 = Utf8               ()Ljava/lang/Object;\n-   #957 = Utf8               toByteArray\n-   #958 = Utf8               ()[B\n-   #959 = Utf8               reset\n-   #960 = Utf8               access$000\n-   #961 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n-   #962 = Utf8               getCrc32\n-   #963 = Utf8               getBytesRead\n-   #964 = Utf8               access$102\n-   #965 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n-   #966 = Utf8               access$200\n-   #967 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-   #968 = Utf8               getSize\n-   #969 = Utf8               access$300\n-   #970 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n-   #971 = Utf8               org/apache/commons/compress/utils/ByteUtils\n-   #972 = Utf8               EMPTY_BYTE_ARRAY\n-   #973 = Utf8               HEADER_ID\n-   #974 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #975 = Utf8               removeExtraField\n-   #976 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n-   #977 = Utf8               getCrc\n-   #978 = Utf8               getCompressedSize\n-   #979 = Utf8               getMethod\n-   #980 = Utf8               access$100\n-   #981 = Utf8               setSize\n-   #982 = Utf8               (J)V\n-   #983 = Utf8               setCompressedSize\n-   #984 = Utf8               setCrc\n-   #985 = Utf8               append\n-   #986 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #987 = Utf8               java/lang/Long\n-   #988 = Utf8               toHexString\n-   #989 = Utf8               (J)Ljava/lang/String;\n-   #990 = Utf8               toString\n-   #991 = Utf8               (J)Ljava/lang/StringBuilder;\n-   #992 = Utf8               Never\n-   #993 = Utf8               getEntryTooBigMessage\n-   #994 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n-   #995 = Utf8               Always\n-   #996 = Utf8               AlwaysWithCompatibility\n-   #997 = Utf8               access$400\n-   #998 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n-   #999 = Utf8               getBytes\n-  #1000 = Utf8               (J)[B\n-  #1001 = Utf8               ZIP64_MAGIC\n-  #1002 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #1003 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-  #1004 = Utf8               (I)[B\n-  #1005 = Utf8               setExtra\n-  #1006 = Utf8               access$500\n-  #1007 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n-  #1008 = Utf8               add\n-  #1009 = Utf8               (Ljava/lang/Object;)Z\n-  #1010 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #1011 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-  #1012 = Utf8               getTime\n-  #1013 = Utf8               java/lang/System\n-  #1014 = Utf8               currentTimeMillis\n-  #1015 = Utf8               setTime\n-  #1016 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #1017 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n-  #1018 = Utf8               IMPLODING\n-  #1019 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #1020 = Utf8               getCode\n-  #1021 = Utf8               UNSHRINKING\n-  #1022 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n-  #1023 = Utf8               canHandleEntryData\n-  #1024 = Utf8               checkRequestedFeatures\n-  #1025 = Utf8               ([BIII)J\n-  #1026 = Utf8               count\n-  #1027 = Utf8               access$302\n-  #1028 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n-  #1029 = Utf8               java/io/InputStream\n-  #1030 = Utf8               read\n-  #1031 = Utf8               ([B)I\n-  #1032 = Utf8               canEncode\n-  #1033 = Utf8               setDiskNumberStart\n-  #1034 = Utf8               (JZLorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n-  #1035 = Utf8               put\n-  #1036 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #1037 = Utf8               access$402\n-  #1038 = Utf8               access$002\n-  #1039 = Utf8               ID\n-  #1040 = Utf8               getExtraField\n-  #1041 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #1042 = Utf8               getAlignment\n-  #1043 = Utf8               ()S\n-  #1044 = Utf8               allowMethodChange\n-  #1045 = Utf8               getLocalFileDataExtra\n-  #1046 = Utf8               (IZI)V\n-  #1047 = Utf8               addExtraField\n-  #1048 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n-  #1049 = Utf8               arraycopy\n-  #1050 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #1051 = Utf8               putShort\n-  #1052 = Utf8               (I[BI)V\n-  #1053 = Utf8               ([BI)V\n-  #1054 = Utf8               toDosTime\n-  #1055 = Utf8               (Ljava/util/Calendar;J[BI)V\n-  #1056 = Utf8               putLong\n-  #1057 = Utf8               (J[BI)V\n-  #1058 = Utf8               array\n-  #1059 = Utf8               arrayOffset\n-  #1060 = Utf8               ALWAYS\n-  #1061 = Utf8               (Ljava/lang/String;[BII)V\n-  #1062 = Utf8               getComment\n-  #1063 = Utf8               isEmpty\n-  #1064 = Utf8               get\n-  #1065 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #1066 = Utf8               access$800\n-  #1067 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)J\n-  #1068 = Utf8               getDiskNumberStart\n-  #1069 = Utf8               valueOf\n-  #1070 = Utf8               (I)Ljava/lang/Integer;\n-  #1071 = Utf8               intValue\n-  #1072 = Utf8               getCentralDirectoryExtra\n-  #1073 = Utf8               getPlatform\n-  #1074 = Utf8               access$900\n-  #1075 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)Z\n-  #1076 = Utf8               getInternalAttributes\n-  #1077 = Utf8               getExternalAttributes\n-  #1078 = Utf8               java/lang/Math\n-  #1079 = Utf8               min\n-  #1080 = Utf8               (JJ)J\n-  #1081 = Utf8               setRelativeHeaderOffset\n-  #1082 = Utf8               setDiskStartNumber\n-  #1083 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n-  #1084 = Utf8               prepareToWriteUnsplittableContent\n-  #1085 = Utf8               size\n-  #1086 = Utf8               (II)I\n-  #1087 = Utf8               useUTF8ForNames\n-  #1088 = Utf8               useDataDescriptor\n-  #1089 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n-  #1090 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n-  #1091 = Utf8               access$502\n-  #1092 = Utf8               addAsFirstExtraField\n-  #1093 = Utf8               UTF8_ZIP_ENCODING\n+   #464 = Class              #878         // java/nio/file/Path\n+   #465 = Class              #879         // \"[Ljava/nio/file/OpenOption;\"\n+   #466 = Class              #880         // java/io/OutputStream\n+   #467 = Class              #881         // java/nio/channels/SeekableByteChannel\n+   #468 = Class              #882         // org/apache/commons/compress/archivers/zip/StreamCompressor\n+   #469 = Utf8               (Ljava/io/File;J)V\n+   #470 = Utf8               (Ljava/nio/file/Path;J)V\n+   #471 = Utf8               (Ljava/nio/channels/SeekableByteChannel;)V\n+   #472 = Utf8               isSeekable\n+   #473 = Utf8               ()Z\n+   #474 = Utf8               setEncoding\n+   #475 = Utf8               (Ljava/lang/String;)V\n+   #476 = Utf8               getEncoding\n+   #477 = Utf8               ()Ljava/lang/String;\n+   #478 = Utf8               setUseLanguageEncodingFlag\n+   #479 = Utf8               (Z)V\n+   #480 = Utf8               setCreateUnicodeExtraFields\n+   #481 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;)V\n+   #482 = Utf8               setFallbackToUTF8\n+   #483 = Utf8               setUseZip64\n+   #484 = Utf8               (Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V\n+   #485 = Utf8               getBytesWritten\n+   #486 = Utf8               ()J\n+   #487 = Utf8               finish\n+   #488 = Utf8               ()V\n+   #489 = Class              #883         // java/nio/ByteBuffer\n+   #490 = Utf8               writeCentralDirectoryInChunks\n+   #491 = Class              #884         // java/util/Iterator\n+   #492 = Utf8               closeArchiveEntry\n+   #493 = Utf8               closeCopiedEntry\n+   #494 = Utf8               closeEntry\n+   #495 = Utf8               (ZZ)V\n+   #496 = Utf8               preClose\n+   #497 = Utf8               addRawArchiveEntry\n+   #498 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V\n+   #499 = Utf8               flushDeflater\n+   #500 = Utf8               handleSizesAndCrc\n+   #501 = Utf8               (JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+   #502 = Utf8               checkIfNeedsZip64\n+   #503 = Utf8               (Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+   #504 = Utf8               isZip64Required\n+   #505 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+   #506 = Utf8               isTooLargeForZip32\n+   #507 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #508 = Utf8               rewriteSizesAndCrc\n+   #509 = Utf8               putArchiveEntry\n+   #510 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)V\n+   #511 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V\n+   #512 = Class              #885         // org/apache/commons/compress/archivers/zip/Zip64Mode\n+   #513 = Utf8               setDefaults\n+   #514 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #515 = Utf8               validateSizeInformation\n+   #516 = Utf8               shouldAddZip64Extra\n+   #517 = Utf8               setComment\n+   #518 = Utf8               setLevel\n+   #519 = Utf8               (I)V\n+   #520 = Utf8               setMethod\n+   #521 = Utf8               canWriteEntryData\n+   #522 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z\n+   #523 = Utf8               writePreamble\n+   #524 = Utf8               ([B)V\n+   #525 = Utf8               ([BII)V\n+   #526 = Utf8               write\n+   #527 = Utf8               writeCounted\n+   #528 = Utf8               copyFromZipInputStream\n+   #529 = Utf8               (Ljava/io/InputStream;)V\n+   #530 = Utf8               close\n+   #531 = Class              #886         // java/lang/Throwable\n+   #532 = Utf8               flush\n+   #533 = Utf8               deflate\n+   #534 = Utf8               writeLocalFileHeader\n+   #535 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V\n+   #536 = Utf8               createLocalFileHeader\n+   #537 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B\n+   #538 = Class              #422         // \"[B\"\n+   #539 = Utf8               addUnicodeExtraFields\n+   #540 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V\n+   #541 = Class              #887         // java/lang/String\n+   #542 = Utf8               writeDataDescriptor\n+   #543 = Utf8               writeCentralFileHeader\n+   #544 = Utf8               createCentralFileHeader\n+   #545 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B\n+   #546 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B\n+   #547 = Utf8               handleZip64Extra\n+   #548 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V\n+   #549 = Utf8               writeCentralDirectoryEnd\n+   #550 = Utf8               validateIfZip64IsNeededInEOCD\n+   #551 = Utf8               writeZip64CentralDirectory\n+   #552 = Utf8               shouldUseZip64EOCD\n+   #553 = Utf8               writeOut\n+   #554 = Utf8               getGeneralPurposeBits\n+   #555 = Utf8               (ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+   #556 = Utf8               versionNeededToExtract\n+   #557 = Utf8               (IZZ)I\n+   #558 = Utf8               usesDataDescriptor\n+   #559 = Utf8               (IZ)Z\n+   #560 = Utf8               versionNeededToExtractMethod\n+   #561 = Utf8               (I)I\n+   #562 = Utf8               createArchiveEntry\n+   #563 = Utf8               (Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+   #564 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+   #565 = Utf8               getZip64Extra\n+   #566 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n+   #567 = Utf8               hasZip64Extra\n+   #568 = Utf8               getEffectiveZip64Mode\n+   #569 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+   #570 = Utf8               getEntryEncoding\n+   #571 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #572 = Class              #888         // org/apache/commons/compress/archivers/zip/ZipEncoding\n+   #573 = Utf8               getName\n+   #574 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/nio/ByteBuffer;\n+   #575 = Utf8               destroy\n+   #576 = Utf8               <clinit>\n+   #577 = Utf8               SourceFile\n+   #578 = Utf8               ZipArchiveOutputStream.java\n+   #579 = Utf8               java/util/zip/ZipEntry\n+   #580 = Utf8               java/util/zip/Deflater\n+   #581 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+   #582 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+   #583 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n+   #584 = NameAndType        #456:#488    // \"<init>\":()V\n+   #585 = Utf8\n+   #586 = NameAndType        #406:#398    // comment:Ljava/lang/String;\n+   #587 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+   #588 = NameAndType        #407:#339    // level:I\n+   #589 = NameAndType        #409:#339    // method:I\n+   #590 = Utf8               java/util/LinkedList\n+   #591 = NameAndType        #410:#411    // entries:Ljava/util/List;\n+   #592 = Utf8               java/util/HashMap\n+   #593 = NameAndType        #425:#426    // metaData:Ljava/util/Map;\n+   #594 = Utf8               UTF8\n+   #595 = NameAndType        #428:#398    // encoding:Ljava/lang/String;\n+   #596 = NameAndType        #889:#890    // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #597 = NameAndType        #429:#430    // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #598 = NameAndType        #437:#392    // useUTF8Flag:Z\n+   #599 = NameAndType        #891:#440    // NEVER:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n+   #600 = NameAndType        #439:#440    // createUnicodeExtraFields:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n+   #601 = NameAndType        #892:#443    // AsNeeded:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+   #602 = NameAndType        #442:#443    // zip64Mode:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+   #603 = NameAndType        #444:#422    // copyBuffer:[B\n+   #604 = Class              #893         // java/util/Calendar\n+   #605 = NameAndType        #894:#895    // getInstance:()Ljava/util/Calendar;\n+   #606 = NameAndType        #445:#446    // calendarInstance:Ljava/util/Calendar;\n+   #607 = NameAndType        #448:#426    // numberOfCDInDiskData:Ljava/util/Map;\n+   #608 = NameAndType        #435:#436    // outputStream:Ljava/io/OutputStream;\n+   #609 = NameAndType        #433:#434    // channel:Ljava/nio/channels/SeekableByteChannel;\n+   #610 = NameAndType        #456:#896    // \"<init>\":(IZ)V\n+   #611 = NameAndType        #431:#432    // def:Ljava/util/zip/Deflater;\n+   #612 = NameAndType        #897:#898    // create:(Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #613 = NameAndType        #414:#415    // streamCompressor:Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #614 = NameAndType        #447:#392    // isSplitZip:Z\n+   #615 = Class              #899         // java/io/File\n+   #616 = NameAndType        #900:#901    // toPath:()Ljava/nio/file/Path;\n+   #617 = Utf8               java/nio/file/OpenOption\n+   #618 = NameAndType        #456:#462    // \"<init>\":(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)V\n+   #619 = Class              #902         // java/nio/file/StandardOpenOption\n+   #620 = NameAndType        #903:#904    // CREATE:Ljava/nio/file/StandardOpenOption;\n+   #621 = NameAndType        #905:#904    // WRITE:Ljava/nio/file/StandardOpenOption;\n+   #622 = NameAndType        #906:#904    // READ:Ljava/nio/file/StandardOpenOption;\n+   #623 = NameAndType        #907:#904    // TRUNCATE_EXISTING:Ljava/nio/file/StandardOpenOption;\n+   #624 = Class              #908         // java/util/EnumSet\n+   #625 = NameAndType        #909:#910    // of:(Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;\n+   #626 = Utf8               java/nio/file/attribute/FileAttribute\n+   #627 = Class              #911         // java/nio/file/Files\n+   #628 = NameAndType        #912:#913    // newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+   #629 = NameAndType        #897:#914    // create:(Ljava/nio/channels/SeekableByteChannel;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #630 = Utf8               java/io/IOException\n+   #631 = Class              #915         // org/apache/commons/compress/utils/IOUtils\n+   #632 = NameAndType        #916:#917    // closeQuietly:(Ljava/io/Closeable;)V\n+   #633 = NameAndType        #918:#919    // newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n+   #634 = NameAndType        #456:#470    // \"<init>\":(Ljava/nio/file/Path;J)V\n+   #635 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitOutputStream\n+   #636 = NameAndType        #920:#921    // isUTF8:(Ljava/lang/String;)Z\n+   #637 = NameAndType        #438:#392    // fallbackToUTF8:Z\n+   #638 = NameAndType        #922:#486    // getTotalBytesWritten:()J\n+   #639 = NameAndType        #391:#392    // finished:Z\n+   #640 = Utf8               This archive has already been finished\n+   #641 = NameAndType        #456:#475    // \"<init>\":(Ljava/lang/String;)V\n+   #642 = NameAndType        #404:#405    // entry:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;\n+   #643 = Utf8               This archive contains unclosed entries.\n+   #644 = NameAndType        #416:#417    // cdOffset:J\n+   #645 = NameAndType        #923:#486    // getCurrentSplitSegmentBytesWritten:()J\n+   #646 = NameAndType        #924:#925    // getCurrentSplitSegmentIndex:()I\n+   #647 = NameAndType        #419:#417    // cdDiskNumberStart:J\n+   #648 = NameAndType        #490:#488    // writeCentralDirectoryInChunks:()V\n+   #649 = NameAndType        #418:#417    // cdLength:J\n+   #650 = NameAndType        #926:#927    // encode:(Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+   #651 = NameAndType        #928:#925    // limit:()I\n+   #652 = NameAndType        #929:#925    // position:()I\n+   #653 = NameAndType        #420:#417    // eocdLength:J\n+   #654 = NameAndType        #551:#488    // writeZip64CentralDirectory:()V\n+   #655 = NameAndType        #549:#488    // writeCentralDirectoryEnd:()V\n+   #656 = Class              #930         // java/util/Map\n+   #657 = NameAndType        #931:#488    // clear:()V\n+   #658 = Class              #932         // java/util/List\n+   #659 = NameAndType        #530:#488    // close:()V\n+   #660 = Utf8               java/io/ByteArrayOutputStream\n+   #661 = NameAndType        #456:#519    // \"<init>\":(I)V\n+   #662 = NameAndType        #933:#934    // iterator:()Ljava/util/Iterator;\n+   #663 = NameAndType        #935:#473    // hasNext:()Z\n+   #664 = NameAndType        #936:#937    // next:()Ljava/lang/Object;\n+   #665 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+   #666 = NameAndType        #544:#545    // createCentralFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[B\n+   #667 = NameAndType        #526:#524    // write:([B)V\n+   #668 = NameAndType        #938:#939    // toByteArray:()[B\n+   #669 = NameAndType        #527:#524    // writeCounted:([B)V\n+   #670 = NameAndType        #940:#488    // reset:()V\n+   #671 = NameAndType        #496:#488    // preClose:()V\n+   #672 = NameAndType        #499:#488    // flushDeflater:()V\n+   #673 = NameAndType        #941:#942    // access$000:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n+   #674 = NameAndType        #943:#486    // getCrc32:()J\n+   #675 = NameAndType        #944:#486    // getBytesRead:()J\n+   #676 = NameAndType        #945:#946    // access$102:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n+   #677 = NameAndType        #947:#948    // access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+   #678 = NameAndType        #568:#569    // getEffectiveZip64Mode:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+   #679 = NameAndType        #500:#501    // handleSizesAndCrc:(JJLorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+   #680 = NameAndType        #494:#495    // closeEntry:(ZZ)V\n+   #681 = NameAndType        #949:#486    // getSize:()J\n+   #682 = NameAndType        #502:#503    // checkIfNeedsZip64:(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+   #683 = NameAndType        #508:#479    // rewriteSizesAndCrc:(Z)V\n+   #684 = NameAndType        #542:#514    // writeDataDescriptor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #685 = Utf8               Stream has already been finished\n+   #686 = Utf8               No current entry to close\n+   #687 = NameAndType        #950:#951    // access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n+   #688 = Class              #952         // org/apache/commons/compress/utils/ByteUtils\n+   #689 = NameAndType        #953:#422    // EMPTY_BYTE_ARRAY:[B\n+   #690 = NameAndType        #526:#525    // write:([BII)V\n+   #691 = NameAndType        #456:#514    // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #692 = NameAndType        #567:#507    // hasZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #693 = NameAndType        #954:#955    // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #694 = NameAndType        #956:#957    // removeExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+   #695 = NameAndType        #958:#486    // getCrc:()J\n+   #696 = Utf8               org/apache/commons/compress/archivers/ArchiveEntry\n+   #697 = NameAndType        #959:#486    // getCompressedSize:()J\n+   #698 = NameAndType        #509:#511    // putArchiveEntry:(Lorg/apache/commons/compress/archivers/ArchiveEntry;Z)V\n+   #699 = NameAndType        #528:#529    // copyFromZipInputStream:(Ljava/io/InputStream;)V\n+   #700 = NameAndType        #493:#479    // closeCopiedEntry:(Z)V\n+   #701 = NameAndType        #960:#925    // getMethod:()I\n+   #702 = NameAndType        #961:#942    // access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n+   #703 = NameAndType        #962:#963    // setSize:(J)V\n+   #704 = NameAndType        #964:#963    // setCompressedSize:(J)V\n+   #705 = NameAndType        #965:#963    // setCrc:(J)V\n+   #706 = Utf8               java/util/zip/ZipException\n+   #707 = Utf8               java/lang/StringBuilder\n+   #708 = Utf8               Bad CRC checksum for entry\n+   #709 = NameAndType        #966:#967    // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #710 = NameAndType        #573:#477    // getName:()Ljava/lang/String;\n+   #711 = Utf8               :\n+   #712 = Class              #968         // java/lang/Long\n+   #713 = NameAndType        #969:#970    // toHexString:(J)Ljava/lang/String;\n+   #714 = Utf8                instead of\n+   #715 = NameAndType        #971:#477    // toString:()Ljava/lang/String;\n+   #716 = Utf8               Bad size for entry\n+   #717 = NameAndType        #966:#972    // append:(J)Ljava/lang/StringBuilder;\n+   #718 = NameAndType        #504:#505    // isZip64Required:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+   #719 = NameAndType        #973:#443    // Never:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+   #720 = Utf8               org/apache/commons/compress/archivers/zip/Zip64RequiredException\n+   #721 = NameAndType        #974:#975    // getEntryTooBigMessage:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n+   #722 = NameAndType        #976:#443    // Always:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+   #723 = NameAndType        #977:#443    // AlwaysWithCompatibility:Lorg/apache/commons/compress/archivers/zip/Zip64Mode;\n+   #724 = NameAndType        #506:#507    // isTooLargeForZip32:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #725 = NameAndType        #929:#486    // position:()J\n+   #726 = NameAndType        #978:#942    // access$400:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n+   #727 = NameAndType        #929:#979    // position:(J)Ljava/nio/channels/SeekableByteChannel;\n+   #728 = NameAndType        #980:#981    // getBytes:(J)[B\n+   #729 = NameAndType        #553:#524    // writeOut:([B)V\n+   #730 = NameAndType        #982:#983    // ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #731 = NameAndType        #980:#939    // getBytes:()[B\n+   #732 = NameAndType        #573:#574    // getName:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/nio/ByteBuffer;\n+   #733 = NameAndType        #556:#557    // versionNeededToExtract:(IZZ)I\n+   #734 = Class              #984         // org/apache/commons/compress/archivers/zip/ZipShort\n+   #735 = NameAndType        #980:#985    // getBytes:(I)[B\n+   #736 = NameAndType        #986:#488    // setExtra:()V\n+   #737 = NameAndType        #987:#951    // access$500:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n+   #738 = NameAndType        #441:#392    // hasUsedZip64:Z\n+   #739 = NameAndType        #492:#488    // closeArchiveEntry:()V\n+   #740 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry\n+   #741 = NameAndType        #456:#988    // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n+   #742 = NameAndType        #989:#990    // add:(Ljava/lang/Object;)Z\n+   #743 = NameAndType        #513:#514    // setDefaults:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #744 = NameAndType        #515:#484    // validateSizeInformation:(Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)V\n+   #745 = NameAndType        #516:#505    // shouldAddZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/Zip64Mode;)Z\n+   #746 = NameAndType        #565:#566    // getZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField;\n+   #747 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+   #748 = NameAndType        #456:#963    // \"<init>\":(J)V\n+   #749 = NameAndType        #421:#991    // ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #750 = NameAndType        #962:#992    // setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #751 = NameAndType        #964:#992    // setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #752 = NameAndType        #408:#392    // hasCompressionLevelChanged:Z\n+   #753 = NameAndType        #518:#519    // setLevel:(I)V\n+   #754 = NameAndType        #534:#535    // writeLocalFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Z)V\n+   #755 = NameAndType        #520:#519    // setMethod:(I)V\n+   #756 = NameAndType        #993:#486    // getTime:()J\n+   #757 = Class              #994         // java/lang/System\n+   #758 = NameAndType        #995:#486    // currentTimeMillis:()J\n+   #759 = NameAndType        #996:#963    // setTime:(J)V\n+   #760 = Utf8               Uncompressed size is required for STORED method when not writing to a file\n+   #761 = Utf8               CRC checksum is required for STORED method when not writing to a file\n+   #762 = Utf8               java/lang/IllegalArgumentException\n+   #763 = Utf8               Invalid compression level:\n+   #764 = NameAndType        #966:#997    // append:(I)Ljava/lang/StringBuilder;\n+   #765 = Class              #998         // org/apache/commons/compress/archivers/zip/ZipMethod\n+   #766 = NameAndType        #999:#1000   // IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #767 = NameAndType        #1001:#925   // getCode:()I\n+   #768 = NameAndType        #1002:#1000  // UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #769 = Class              #1003        // org/apache/commons/compress/archivers/zip/ZipUtil\n+   #770 = NameAndType        #1004:#507   // canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #771 = NameAndType        #523:#525    // writePreamble:([BII)V\n+   #772 = Utf8               java/lang/IllegalStateException\n+   #773 = Utf8               Preamble must be written before creating an entry\n+   #774 = NameAndType        #527:#525    // writeCounted:([BII)V\n+   #775 = Utf8               No current entry\n+   #776 = NameAndType        #1005:#514   // checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #777 = NameAndType        #526:#1006   // write:([BIII)J\n+   #778 = NameAndType        #1007:#963   // count:(J)V\n+   #779 = NameAndType        #1008:#1009  // access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n+   #780 = Class              #1010        // java/io/InputStream\n+   #781 = NameAndType        #1011:#1012  // read:([B)I\n+   #782 = NameAndType        #1007:#519   // count:(I)V\n+   #783 = NameAndType        #487:#488    // finish:()V\n+   #784 = NameAndType        #575:#488    // destroy:()V\n+   #785 = NameAndType        #532:#488    // flush:()V\n+   #786 = NameAndType        #533:#488    // deflate:()V\n+   #787 = NameAndType        #1013:#921   // canEncode:(Ljava/lang/String;)Z\n+   #788 = NameAndType        #539:#540    // addUnicodeExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;ZLjava/nio/ByteBuffer;)V\n+   #789 = NameAndType        #1014:#963   // setDiskNumberStart:(J)V\n+   #790 = NameAndType        #536:#537    // createLocalFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;ZZJ)[B\n+   #791 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData\n+   #792 = NameAndType        #558:#559    // usesDataDescriptor:(IZ)Z\n+   #793 = NameAndType        #456:#1015   // \"<init>\":(JZLorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n+   #794 = NameAndType        #1016:#1017  // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #795 = NameAndType        #1018:#946   // access$402:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n+   #796 = NameAndType        #1019:#946   // access$002:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n+   #797 = NameAndType        #1020:#955   // ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #798 = NameAndType        #1021:#1022  // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+   #799 = Utf8               org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n+   #800 = NameAndType        #1023:#925   // getAlignment:()I\n+   #801 = NameAndType        #1023:#1024  // getAlignment:()S\n+   #802 = NameAndType        #1025:#473   // allowMethodChange:()Z\n+   #803 = NameAndType        #1026:#939   // getLocalFileDataExtra:()[B\n+   #804 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n+   #805 = NameAndType        #456:#1027   // \"<init>\":(IZI)V\n+   #806 = NameAndType        #1028:#1029  // addExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n+   #807 = NameAndType        #450:#422    // LFH_SIG:[B\n+   #808 = NameAndType        #1030:#1031  // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #809 = NameAndType        #1032:#1033  // putShort:(I[BI)V\n+   #810 = NameAndType        #554:#555    // getGeneralPurposeBits:(ZZ)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+   #811 = NameAndType        #926:#1034   // encode:([BI)V\n+   #812 = NameAndType        #1035:#1036  // toDosTime:(Ljava/util/Calendar;J[BI)V\n+   #813 = NameAndType        #1037:#1038  // putLong:(J[BI)V\n+   #814 = NameAndType        #423:#422    // LZERO:[B\n+   #815 = NameAndType        #1037:#1034  // putLong:([BI)V\n+   #816 = NameAndType        #1039:#939   // array:()[B\n+   #817 = NameAndType        #1040:#925   // arrayOffset:()I\n+   #818 = NameAndType        #1041:#440   // ALWAYS:Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy;\n+   #819 = Utf8               org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n+   #820 = NameAndType        #456:#1042   // \"<init>\":(Ljava/lang/String;[BII)V\n+   #821 = NameAndType        #1043:#477   // getComment:()Ljava/lang/String;\n+   #822 = NameAndType        #1044:#473   // isEmpty:()Z\n+   #823 = NameAndType        #570:#571    // getEntryEncoding:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #824 = Utf8               org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n+   #825 = NameAndType        #451:#422    // DD_SIG:[B\n+   #826 = NameAndType        #1045:#1046  // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #827 = NameAndType        #1047:#1048  // access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)J\n+   #828 = NameAndType        #1049:#486   // getDiskNumberStart:()J\n+   #829 = Utf8               Archive\\'s size exceeds the limit of 4GByte.\n+   #830 = NameAndType        #547:#548    // handleZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;JZ)V\n+   #831 = NameAndType        #544:#546    // createCentralFileHeader:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/nio/ByteBuffer;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;Z)[B\n+   #832 = NameAndType        #1050:#1051  // valueOf:(I)Ljava/lang/Integer;\n+   #833 = Utf8               java/lang/Integer\n+   #834 = NameAndType        #1052:#925   // intValue:()I\n+   #835 = NameAndType        #1053:#939   // getCentralDirectoryExtra:()[B\n+   #836 = NameAndType        #452:#422    // CFH_SIG:[B\n+   #837 = NameAndType        #1054:#925   // getPlatform:()I\n+   #838 = NameAndType        #1055:#1056  // access$900:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)Z\n+   #839 = NameAndType        #421:#422    // ZERO:[B\n+   #840 = NameAndType        #1057:#925   // getInternalAttributes:()I\n+   #841 = NameAndType        #1058:#486   // getExternalAttributes:()J\n+   #842 = Class              #1059        // java/lang/Math\n+   #843 = NameAndType        #1060:#1061  // min:(JJ)J\n+   #844 = NameAndType        #1062:#992   // setRelativeHeaderOffset:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #845 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+   #846 = NameAndType        #1063:#1064  // setDiskStartNumber:(Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+   #847 = NameAndType        #1065:#963   // prepareToWriteUnsplittableContent:(J)V\n+   #848 = NameAndType        #550:#488    // validateIfZip64IsNeededInEOCD:()V\n+   #849 = NameAndType        #453:#422    // EOCD_SIG:[B\n+   #850 = NameAndType        #1066:#925   // size:()I\n+   #851 = NameAndType        #1060:#1067  // min:(II)I\n+   #852 = Utf8               Number of the disk of End Of Central Directory exceeds the limit of 65535.\n+   #853 = Utf8               Number of the disk with the start of Central Directory exceeds the limit of 65535.\n+   #854 = Utf8               Number of entries on this disk exceeds the limit of 65535.\n+   #855 = Utf8               Archive contains more than 65535 entries.\n+   #856 = Utf8               The size of the entire central directory exceeds the limit of 4GByte.\n+   #857 = NameAndType        #552:#473    // shouldUseZip64EOCD:()Z\n+   #858 = NameAndType        #454:#422    // ZIP64_EOCD_SIG:[B\n+   #859 = NameAndType        #455:#422    // ZIP64_EOCD_LOC_SIG:[B\n+   #860 = NameAndType        #424:#422    // ONE:[B\n+   #861 = NameAndType        #553:#525    // writeOut:([BII)V\n+   #862 = NameAndType        #1068:#479   // useUTF8ForNames:(Z)V\n+   #863 = NameAndType        #1069:#479   // useDataDescriptor:(Z)V\n+   #864 = NameAndType        #560:#561    // versionNeededToExtractMethod:(I)I\n+   #865 = NameAndType        #456:#1070   // \"<init>\":(Ljava/io/File;Ljava/lang/String;)V\n+   #866 = Utf8               java/nio/file/LinkOption\n+   #867 = NameAndType        #456:#1071   // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n+   #868 = NameAndType        #1072:#1009  // access$502:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n+   #869 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+   #870 = NameAndType        #1073:#1029  // addAsFirstExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n+   #871 = NameAndType        #1074:#430   // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #872 = NameAndType        #450:#983    // LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #873 = NameAndType        #451:#983    // DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #874 = NameAndType        #452:#983    // CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #875 = Utf8               org/apache/commons/compress/archivers/ArchiveOutputStream\n+   #876 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1\n+   #877 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy\n+   #878 = Utf8               java/nio/file/Path\n+   #879 = Utf8               [Ljava/nio/file/OpenOption;\n+   #880 = Utf8               java/io/OutputStream\n+   #881 = Utf8               java/nio/channels/SeekableByteChannel\n+   #882 = Utf8               org/apache/commons/compress/archivers/zip/StreamCompressor\n+   #883 = Utf8               java/nio/ByteBuffer\n+   #884 = Utf8               java/util/Iterator\n+   #885 = Utf8               org/apache/commons/compress/archivers/zip/Zip64Mode\n+   #886 = Utf8               java/lang/Throwable\n+   #887 = Utf8               java/lang/String\n+   #888 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+   #889 = Utf8               getZipEncoding\n+   #890 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #891 = Utf8               NEVER\n+   #892 = Utf8               AsNeeded\n+   #893 = Utf8               java/util/Calendar\n+   #894 = Utf8               getInstance\n+   #895 = Utf8               ()Ljava/util/Calendar;\n+   #896 = Utf8               (IZ)V\n+   #897 = Utf8               create\n+   #898 = Utf8               (Ljava/io/OutputStream;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #899 = Utf8               java/io/File\n+   #900 = Utf8               toPath\n+   #901 = Utf8               ()Ljava/nio/file/Path;\n+   #902 = Utf8               java/nio/file/StandardOpenOption\n+   #903 = Utf8               CREATE\n+   #904 = Utf8               Ljava/nio/file/StandardOpenOption;\n+   #905 = Utf8               WRITE\n+   #906 = Utf8               READ\n+   #907 = Utf8               TRUNCATE_EXISTING\n+   #908 = Utf8               java/util/EnumSet\n+   #909 = Utf8               of\n+   #910 = Utf8               (Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;\n+   #911 = Utf8               java/nio/file/Files\n+   #912 = Utf8               newByteChannel\n+   #913 = Utf8               (Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;\n+   #914 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/util/zip/Deflater;)Lorg/apache/commons/compress/archivers/zip/StreamCompressor;\n+   #915 = Utf8               org/apache/commons/compress/utils/IOUtils\n+   #916 = Utf8               closeQuietly\n+   #917 = Utf8               (Ljava/io/Closeable;)V\n+   #918 = Utf8               newOutputStream\n+   #919 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;\n+   #920 = Utf8               isUTF8\n+   #921 = Utf8               (Ljava/lang/String;)Z\n+   #922 = Utf8               getTotalBytesWritten\n+   #923 = Utf8               getCurrentSplitSegmentBytesWritten\n+   #924 = Utf8               getCurrentSplitSegmentIndex\n+   #925 = Utf8               ()I\n+   #926 = Utf8               encode\n+   #927 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n+   #928 = Utf8               limit\n+   #929 = Utf8               position\n+   #930 = Utf8               java/util/Map\n+   #931 = Utf8               clear\n+   #932 = Utf8               java/util/List\n+   #933 = Utf8               iterator\n+   #934 = Utf8               ()Ljava/util/Iterator;\n+   #935 = Utf8               hasNext\n+   #936 = Utf8               next\n+   #937 = Utf8               ()Ljava/lang/Object;\n+   #938 = Utf8               toByteArray\n+   #939 = Utf8               ()[B\n+   #940 = Utf8               reset\n+   #941 = Utf8               access$000\n+   #942 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)J\n+   #943 = Utf8               getCrc32\n+   #944 = Utf8               getBytesRead\n+   #945 = Utf8               access$102\n+   #946 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;J)J\n+   #947 = Utf8               access$200\n+   #948 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+   #949 = Utf8               getSize\n+   #950 = Utf8               access$300\n+   #951 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;)Z\n+   #952 = Utf8               org/apache/commons/compress/utils/ByteUtils\n+   #953 = Utf8               EMPTY_BYTE_ARRAY\n+   #954 = Utf8               HEADER_ID\n+   #955 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #956 = Utf8               removeExtraField\n+   #957 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)V\n+   #958 = Utf8               getCrc\n+   #959 = Utf8               getCompressedSize\n+   #960 = Utf8               getMethod\n+   #961 = Utf8               access$100\n+   #962 = Utf8               setSize\n+   #963 = Utf8               (J)V\n+   #964 = Utf8               setCompressedSize\n+   #965 = Utf8               setCrc\n+   #966 = Utf8               append\n+   #967 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #968 = Utf8               java/lang/Long\n+   #969 = Utf8               toHexString\n+   #970 = Utf8               (J)Ljava/lang/String;\n+   #971 = Utf8               toString\n+   #972 = Utf8               (J)Ljava/lang/StringBuilder;\n+   #973 = Utf8               Never\n+   #974 = Utf8               getEntryTooBigMessage\n+   #975 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/lang/String;\n+   #976 = Utf8               Always\n+   #977 = Utf8               AlwaysWithCompatibility\n+   #978 = Utf8               access$400\n+   #979 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n+   #980 = Utf8               getBytes\n+   #981 = Utf8               (J)[B\n+   #982 = Utf8               ZIP64_MAGIC\n+   #983 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #984 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+   #985 = Utf8               (I)[B\n+   #986 = Utf8               setExtra\n+   #987 = Utf8               access$500\n+   #988 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n+   #989 = Utf8               add\n+   #990 = Utf8               (Ljava/lang/Object;)Z\n+   #991 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #992 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+   #993 = Utf8               getTime\n+   #994 = Utf8               java/lang/System\n+   #995 = Utf8               currentTimeMillis\n+   #996 = Utf8               setTime\n+   #997 = Utf8               (I)Ljava/lang/StringBuilder;\n+   #998 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n+   #999 = Utf8               IMPLODING\n+  #1000 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #1001 = Utf8               getCode\n+  #1002 = Utf8               UNSHRINKING\n+  #1003 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n+  #1004 = Utf8               canHandleEntryData\n+  #1005 = Utf8               checkRequestedFeatures\n+  #1006 = Utf8               ([BIII)J\n+  #1007 = Utf8               count\n+  #1008 = Utf8               access$302\n+  #1009 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry;Z)Z\n+  #1010 = Utf8               java/io/InputStream\n+  #1011 = Utf8               read\n+  #1012 = Utf8               ([B)I\n+  #1013 = Utf8               canEncode\n+  #1014 = Utf8               setDiskNumberStart\n+  #1015 = Utf8               (JZLorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$1;)V\n+  #1016 = Utf8               put\n+  #1017 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #1018 = Utf8               access$402\n+  #1019 = Utf8               access$002\n+  #1020 = Utf8               ID\n+  #1021 = Utf8               getExtraField\n+  #1022 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #1023 = Utf8               getAlignment\n+  #1024 = Utf8               ()S\n+  #1025 = Utf8               allowMethodChange\n+  #1026 = Utf8               getLocalFileDataExtra\n+  #1027 = Utf8               (IZI)V\n+  #1028 = Utf8               addExtraField\n+  #1029 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipExtraField;)V\n+  #1030 = Utf8               arraycopy\n+  #1031 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #1032 = Utf8               putShort\n+  #1033 = Utf8               (I[BI)V\n+  #1034 = Utf8               ([BI)V\n+  #1035 = Utf8               toDosTime\n+  #1036 = Utf8               (Ljava/util/Calendar;J[BI)V\n+  #1037 = Utf8               putLong\n+  #1038 = Utf8               (J[BI)V\n+  #1039 = Utf8               array\n+  #1040 = Utf8               arrayOffset\n+  #1041 = Utf8               ALWAYS\n+  #1042 = Utf8               (Ljava/lang/String;[BII)V\n+  #1043 = Utf8               getComment\n+  #1044 = Utf8               isEmpty\n+  #1045 = Utf8               get\n+  #1046 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #1047 = Utf8               access$800\n+  #1048 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)J\n+  #1049 = Utf8               getDiskNumberStart\n+  #1050 = Utf8               valueOf\n+  #1051 = Utf8               (I)Ljava/lang/Integer;\n+  #1052 = Utf8               intValue\n+  #1053 = Utf8               getCentralDirectoryExtra\n+  #1054 = Utf8               getPlatform\n+  #1055 = Utf8               access$900\n+  #1056 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData;)Z\n+  #1057 = Utf8               getInternalAttributes\n+  #1058 = Utf8               getExternalAttributes\n+  #1059 = Utf8               java/lang/Math\n+  #1060 = Utf8               min\n+  #1061 = Utf8               (JJ)J\n+  #1062 = Utf8               setRelativeHeaderOffset\n+  #1063 = Utf8               setDiskStartNumber\n+  #1064 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+  #1065 = Utf8               prepareToWriteUnsplittableContent\n+  #1066 = Utf8               size\n+  #1067 = Utf8               (II)I\n+  #1068 = Utf8               useUTF8ForNames\n+  #1069 = Utf8               useDataDescriptor\n+  #1070 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n+  #1071 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;[Ljava/nio/file/LinkOption;)V\n+  #1072 = Utf8               access$502\n+  #1073 = Utf8               addAsFirstExtraField\n+  #1074 = Utf8               UTF8_ZIP_ENCODING\n {\n   static final int BUFFER_SIZE = 512;\n     descriptor: I\n     flags: (0x0018) ACC_STATIC, ACC_FINAL\n     ConstantValue: int 512\n \n   private static final int LFH_SIG_OFFSET = 0;\n@@ -4070,15 +4051,15 @@\n        520: invokestatic  #247                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n        523: aload         13\n        525: areturn\n       LineNumberTable:\n         line 1211: 0\n         line 1212: 9\n         line 1213: 14\n-        line 1215: 21\n+        line 1216: 21\n         line 1218: 40\n         line 1219: 46\n         line 1220: 56\n         line 1223: 63\n         line 1224: 82\n         line 1225: 85\n         line 1226: 95\n@@ -5095,15 +5076,16 @@\n         line 1558: 39\n         line 1559: 41\n         line 1560: 48\n         line 1562: 59\n         line 1565: 67\n         line 1568: 79\n         line 1571: 89\n-        line 1572: 101\n+        line 1572: 96\n+        line 1573: 138\n         line 1574: 140\n         line 1575: 144\n         line 1576: 152\n         line 1579: 158\n         line 1581: 170\n         line 1584: 176\n         line 1585: 193\n@@ -5226,15 +5208,15 @@\n         line 1606: 13\n         line 1607: 20\n         line 1609: 31\n         line 1610: 38\n         line 1614: 49\n         line 1615: 60\n         line 1619: 71\n-        line 1620: 96\n+        line 1620: 87\n         line 1621: 111\n         line 1622: 118\n         line 1627: 129\n         line 1628: 144\n         line 1632: 155\n         line 1633: 166\n         line 1637: 177\n@@ -5451,16 +5433,16 @@\n         line 1690: 103\n         line 1693: 112\n         line 1694: 115\n         line 1695: 122\n         line 1697: 134\n         line 1700: 144\n         line 1703: 155\n-        line 1704: 168\n-        line 1705: 210\n+        line 1704: 162\n+        line 1705: 206\n         line 1706: 217\n         line 1707: 225\n         line 1710: 231\n         line 1711: 246\n         line 1714: 252\n         line 1715: 263\n         line 1719: 274\n@@ -5836,14 +5818,15 @@\n         74: areturn\n       LineNumberTable:\n         line 1875: 0\n         line 1876: 7\n         line 1878: 27\n         line 1879: 32\n         line 1880: 40\n+        line 1881: 47\n         line 1882: 56\n         line 1889: 60\n         line 1893: 68\n         line 1895: 73\n       StackMapTable: number_of_entries = 6\n         frame_type = 86 /* same_locals_1_stack_item */\n           stack = [ class org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry ]\n@@ -5930,14 +5913,16 @@\n         28: goto          35\n         31: aload_0\n         32: getfield      #21                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n         35: areturn\n       LineNumberTable:\n         line 1928: 0\n         line 1929: 14\n+        line 1930: 25\n+        line 1929: 35\n       StackMapTable: number_of_entries = 2\n         frame_type = 252 /* append */\n           offset_delta = 31\n           locals = [ int ]\n         frame_type = 67 /* same_locals_1_stack_item */\n           stack = [ class org/apache/commons/compress/archivers/zip/ZipEncoding ]\n \n"}]}
