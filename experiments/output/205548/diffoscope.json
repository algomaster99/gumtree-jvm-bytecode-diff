{"diffoscope-json-version": 1, "source1": "first/PropertiesConfigurationLayout.class", "source2": "second/PropertiesConfigurationLayout.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -32,89 +32,89 @@\n     private boolean forceSingleLine;\n     private final ArrayDeque<URL> seenStack;\n     \n     public PropertiesConfigurationLayout() {\n         this(null);\n     }\n     \n-    public PropertiesConfigurationLayout(final PropertiesConfigurationLayout c) {\n+    public PropertiesConfigurationLayout(final PropertiesConfigurationLayout propertiesConfigurationLayout) {\n         this.seenStack = new ArrayDeque<URL>();\n         this.loadCounter = new AtomicInteger();\n         this.layoutData = new LinkedHashMap<String, PropertiesConfigurationLayout.PropertyLayoutData>();\n-        if (c != null) {\n-            this.copyFrom(c);\n+        if (propertiesConfigurationLayout != null) {\n+            this.copyFrom(propertiesConfigurationLayout);\n         }\n     }\n     \n-    public String getCanonicalComment(final String key, final boolean commentChar) {\n-        return constructCanonicalComment(this.getComment(key), commentChar);\n+    public String getCanonicalComment(final String s, final boolean b) {\n+        return constructCanonicalComment(this.getComment(s), b);\n     }\n     \n-    public String getComment(final String key) {\n-        return this.fetchLayoutData(key).getComment();\n+    public String getComment(final String s) {\n+        return this.fetchLayoutData(s).getComment();\n     }\n     \n-    public void setComment(final String key, final String comment) {\n-        this.fetchLayoutData(key).setComment(comment);\n+    public void setComment(final String s, final String comment) {\n+        this.fetchLayoutData(s).setComment(comment);\n     }\n     \n-    public int getBlancLinesBefore(final String key) {\n-        return this.fetchLayoutData(key).getBlancLines();\n+    public int getBlancLinesBefore(final String s) {\n+        return this.fetchLayoutData(s).getBlancLines();\n     }\n     \n-    public void setBlancLinesBefore(final String key, final int number) {\n-        this.fetchLayoutData(key).setBlancLines(number);\n+    public void setBlancLinesBefore(final String s, final int blancLines) {\n+        this.fetchLayoutData(s).setBlancLines(blancLines);\n     }\n     \n-    public String getCanonicalHeaderComment(final boolean commentChar) {\n-        return constructCanonicalComment(this.getHeaderComment(), commentChar);\n+    public String getCanonicalHeaderComment(final boolean b) {\n+        return constructCanonicalComment(this.getHeaderComment(), b);\n     }\n     \n     public String getHeaderComment() {\n         return this.headerComment;\n     }\n     \n-    public void setHeaderComment(final String comment) {\n-        this.headerComment = comment;\n+    public void setHeaderComment(final String headerComment) {\n+        this.headerComment = headerComment;\n     }\n     \n-    public String getCanonicalFooterCooment(final boolean commentChar) {\n-        return constructCanonicalComment(this.getFooterComment(), commentChar);\n+    public String getCanonicalFooterCooment(final boolean b) {\n+        return constructCanonicalComment(this.getFooterComment(), b);\n     }\n     \n     public String getFooterComment() {\n         return this.footerComment;\n     }\n     \n     public void setFooterComment(final String footerComment) {\n         this.footerComment = footerComment;\n     }\n     \n-    public boolean isSingleLine(final String key) {\n-        return this.fetchLayoutData(key).isSingleLine();\n+    public boolean isSingleLine(final String s) {\n+        return this.fetchLayoutData(s).isSingleLine();\n     }\n     \n-    public void setSingleLine(final String key, final boolean f) {\n-        this.fetchLayoutData(key).setSingleLine(f);\n+    public void setSingleLine(final String s, final boolean singleLine) {\n+        this.fetchLayoutData(s).setSingleLine(singleLine);\n     }\n     \n     public boolean isForceSingleLine() {\n         return this.forceSingleLine;\n     }\n     \n-    public void setForceSingleLine(final boolean f) {\n-        this.forceSingleLine = f;\n+    public void setForceSingleLine(final boolean forceSingleLine) {\n+        this.forceSingleLine = forceSingleLine;\n     }\n     \n-    public String getSeparator(final String key) {\n-        return this.fetchLayoutData(key).getSeparator();\n+    public String getSeparator(final String s) {\n+        return this.fetchLayoutData(s).getSeparator();\n     }\n     \n-    public void setSeparator(final String key, final String sep) {\n-        this.fetchLayoutData(key).setSeparator(sep);\n+    public void setSeparator(final String s, final String separator) {\n+        this.fetchLayoutData(s).setSeparator(separator);\n     }\n     \n     public String getGlobalSeparator() {\n         return this.globalSeparator;\n     }\n     \n     public void setGlobalSeparator(final String globalSeparator) {\n@@ -129,190 +129,186 @@\n         this.lineSeparator = lineSeparator;\n     }\n     \n     public Set<String> getKeys() {\n         return this.layoutData.keySet();\n     }\n     \n-    public void load(final PropertiesConfiguration config, final Reader in) throws ConfigurationException {\n+    public void load(final PropertiesConfiguration propertiesConfiguration, final Reader reader) throws ConfigurationException {\n         this.loadCounter.incrementAndGet();\n-        final PropertiesConfiguration.PropertiesReader reader = config.getIOFactory().createPropertiesReader(in);\n+        final PropertiesConfiguration.PropertiesReader propertiesReader = propertiesConfiguration.getIOFactory().createPropertiesReader(reader);\n         try {\n-            while (reader.nextProperty()) {\n-                if (config.propertyLoaded(reader.getPropertyName(), reader.getPropertyValue(), (Deque)this.seenStack)) {\n-                    final boolean contained = this.layoutData.containsKey(reader.getPropertyName());\n+            while (propertiesReader.nextProperty()) {\n+                if (propertiesConfiguration.propertyLoaded(propertiesReader.getPropertyName(), propertiesReader.getPropertyValue(), (Deque)this.seenStack)) {\n+                    final boolean containsKey = this.layoutData.containsKey(propertiesReader.getPropertyName());\n                     int blancLines;\n-                    int idx;\n-                    for (blancLines = 0, idx = this.checkHeaderComment(reader.getCommentLines()); idx < reader.getCommentLines().size() && ((String)reader.getCommentLines().get(idx)).length() < 1; ++idx, ++blancLines) {}\n-                    final String comment = this.extractComment(reader.getCommentLines(), idx, reader.getCommentLines().size() - 1);\n-                    final PropertiesConfigurationLayout.PropertyLayoutData data = this.fetchLayoutData(reader.getPropertyName());\n-                    if (contained) {\n-                        data.addComment(comment);\n-                        data.setSingleLine(false);\n+                    int checkHeaderComment;\n+                    for (blancLines = 0, checkHeaderComment = this.checkHeaderComment(propertiesReader.getCommentLines()); checkHeaderComment < propertiesReader.getCommentLines().size() && ((String)propertiesReader.getCommentLines().get(checkHeaderComment)).length() < 1; ++checkHeaderComment, ++blancLines) {}\n+                    final String comment = this.extractComment(propertiesReader.getCommentLines(), checkHeaderComment, propertiesReader.getCommentLines().size() - 1);\n+                    final PropertiesConfigurationLayout.PropertyLayoutData fetchLayoutData = this.fetchLayoutData(propertiesReader.getPropertyName());\n+                    if (containsKey) {\n+                        fetchLayoutData.addComment(comment);\n+                        fetchLayoutData.setSingleLine(false);\n                     }\n                     else {\n-                        data.setComment(comment);\n-                        data.setBlancLines(blancLines);\n-                        data.setSeparator(reader.getPropertySeparator());\n+                        fetchLayoutData.setComment(comment);\n+                        fetchLayoutData.setBlancLines(blancLines);\n+                        fetchLayoutData.setSeparator(propertiesReader.getPropertySeparator());\n                     }\n                 }\n             }\n-            this.setFooterComment(this.extractComment((List<String>)reader.getCommentLines(), 0, reader.getCommentLines().size() - 1));\n+            this.setFooterComment(this.extractComment((List<String>)propertiesReader.getCommentLines(), 0, propertiesReader.getCommentLines().size() - 1));\n         }\n-        catch (final IOException ioex) {\n-            throw new ConfigurationException((Throwable)ioex);\n+        catch (final IOException ex) {\n+            throw new ConfigurationException((Throwable)ex);\n         }\n         finally {\n             this.loadCounter.decrementAndGet();\n         }\n     }\n     \n-    public void save(final PropertiesConfiguration config, final Writer out) throws ConfigurationException {\n+    public void save(final PropertiesConfiguration propertiesConfiguration, final Writer writer) throws ConfigurationException {\n         try {\n-            final PropertiesConfiguration.PropertiesWriter writer = config.getIOFactory().createPropertiesWriter(out, config.getListDelimiterHandler());\n-            writer.setGlobalSeparator(this.getGlobalSeparator());\n+            final PropertiesConfiguration.PropertiesWriter propertiesWriter = propertiesConfiguration.getIOFactory().createPropertiesWriter(writer, propertiesConfiguration.getListDelimiterHandler());\n+            propertiesWriter.setGlobalSeparator(this.getGlobalSeparator());\n             if (this.getLineSeparator() != null) {\n-                writer.setLineSeparator(this.getLineSeparator());\n+                propertiesWriter.setLineSeparator(this.getLineSeparator());\n             }\n             if (this.headerComment != null) {\n-                writeComment(writer, this.getCanonicalHeaderComment(true));\n-                writer.writeln((String)null);\n+                writeComment(propertiesWriter, this.getCanonicalHeaderComment(true));\n+                propertiesWriter.writeln((String)null);\n             }\n-            for (final String key : this.getKeys()) {\n-                if (config.containsKeyInternal(key)) {\n-                    for (int i = 0; i < this.getBlancLinesBefore(key); ++i) {\n-                        writer.writeln((String)null);\n+            for (final String s : this.getKeys()) {\n+                if (propertiesConfiguration.containsKeyInternal(s)) {\n+                    for (int i = 0; i < this.getBlancLinesBefore(s); ++i) {\n+                        propertiesWriter.writeln((String)null);\n                     }\n-                    writeComment(writer, this.getCanonicalComment(key, true));\n-                    final boolean singleLine = this.isForceSingleLine() || this.isSingleLine(key);\n-                    writer.setCurrentSeparator(this.getSeparator(key));\n-                    writer.writeProperty(key, config.getPropertyInternal(key), singleLine);\n+                    writeComment(propertiesWriter, this.getCanonicalComment(s, true));\n+                    final boolean b = this.isForceSingleLine() || this.isSingleLine(s);\n+                    propertiesWriter.setCurrentSeparator(this.getSeparator(s));\n+                    propertiesWriter.writeProperty(s, propertiesConfiguration.getPropertyInternal(s), b);\n                 }\n             }\n-            writeComment(writer, this.getCanonicalFooterCooment(true));\n-            writer.flush();\n+            writeComment(propertiesWriter, this.getCanonicalFooterCooment(true));\n+            propertiesWriter.flush();\n         }\n-        catch (final IOException ioex) {\n-            throw new ConfigurationException((Throwable)ioex);\n+        catch (final IOException ex) {\n+            throw new ConfigurationException((Throwable)ex);\n         }\n     }\n     \n-    public void onEvent(final ConfigurationEvent event) {\n-        if (!event.isBeforeUpdate() && this.loadCounter.get() == 0) {\n-            if (ConfigurationEvent.ADD_PROPERTY.equals(event.getEventType())) {\n-                final boolean contained = this.layoutData.containsKey(event.getPropertyName());\n-                final PropertiesConfigurationLayout.PropertyLayoutData data = this.fetchLayoutData(event.getPropertyName());\n-                data.setSingleLine(!contained);\n+    public void onEvent(final ConfigurationEvent configurationEvent) {\n+        if (!configurationEvent.isBeforeUpdate() && this.loadCounter.get() == 0) {\n+            if (ConfigurationEvent.ADD_PROPERTY.equals(configurationEvent.getEventType())) {\n+                this.fetchLayoutData(configurationEvent.getPropertyName()).setSingleLine(!this.layoutData.containsKey(configurationEvent.getPropertyName()));\n             }\n-            else if (ConfigurationEvent.CLEAR_PROPERTY.equals(event.getEventType())) {\n-                this.layoutData.remove(event.getPropertyName());\n+            else if (ConfigurationEvent.CLEAR_PROPERTY.equals(configurationEvent.getEventType())) {\n+                this.layoutData.remove(configurationEvent.getPropertyName());\n             }\n-            else if (ConfigurationEvent.CLEAR.equals(event.getEventType())) {\n+            else if (ConfigurationEvent.CLEAR.equals(configurationEvent.getEventType())) {\n                 this.clear();\n             }\n-            else if (ConfigurationEvent.SET_PROPERTY.equals(event.getEventType())) {\n-                this.fetchLayoutData(event.getPropertyName());\n+            else if (ConfigurationEvent.SET_PROPERTY.equals(configurationEvent.getEventType())) {\n+                this.fetchLayoutData(configurationEvent.getPropertyName());\n             }\n         }\n     }\n     \n-    private PropertiesConfigurationLayout.PropertyLayoutData fetchLayoutData(final String key) {\n-        if (key == null) {\n+    private PropertiesConfigurationLayout.PropertyLayoutData fetchLayoutData(final String s) {\n+        if (s == null) {\n             throw new IllegalArgumentException(\"Property key must not be null!\");\n         }\n-        PropertiesConfigurationLayout.PropertyLayoutData data = (PropertiesConfigurationLayout.PropertyLayoutData)this.layoutData.get(key);\n-        if (data == null) {\n-            data = new PropertiesConfigurationLayout.PropertyLayoutData();\n-            data.setSingleLine(true);\n-            this.layoutData.put(key, data);\n+        PropertiesConfigurationLayout.PropertyLayoutData propertyLayoutData = (PropertiesConfigurationLayout.PropertyLayoutData)this.layoutData.get(s);\n+        if (propertyLayoutData == null) {\n+            propertyLayoutData = new PropertiesConfigurationLayout.PropertyLayoutData();\n+            propertyLayoutData.setSingleLine(true);\n+            this.layoutData.put(s, propertyLayoutData);\n         }\n-        return data;\n+        return propertyLayoutData;\n     }\n     \n     private void clear() {\n         this.seenStack.clear();\n         this.layoutData.clear();\n         this.setHeaderComment(null);\n         this.setFooterComment(null);\n     }\n     \n-    static boolean isCommentLine(final String line) {\n-        return PropertiesConfiguration.isCommentLine(line);\n+    static boolean isCommentLine(final String s) {\n+        return PropertiesConfiguration.isCommentLine(s);\n     }\n     \n-    static String trimComment(final String s, final boolean comment) {\n-        final StringBuilder buf = new StringBuilder(s.length());\n-        int lastPos = 0;\n-        int pos;\n+    static String trimComment(final String s, final boolean b) {\n+        final StringBuilder sb = new StringBuilder(s.length());\n+        int beginIndex = 0;\n+        int i;\n         do {\n-            pos = s.indexOf(\"\\n\", lastPos);\n-            if (pos >= 0) {\n-                final String line = s.substring(lastPos, pos);\n-                buf.append(stripCommentChar(line, comment)).append(\"\\n\");\n-                lastPos = pos + \"\\n\".length();\n+            i = s.indexOf(\"\\n\", beginIndex);\n+            if (i >= 0) {\n+                sb.append(stripCommentChar(s.substring(beginIndex, i), b)).append(\"\\n\");\n+                beginIndex = i + \"\\n\".length();\n             }\n-        } while (pos >= 0);\n-        if (lastPos < s.length()) {\n-            buf.append(stripCommentChar(s.substring(lastPos), comment));\n+        } while (i >= 0);\n+        if (beginIndex < s.length()) {\n+            sb.append(stripCommentChar(s.substring(beginIndex), b));\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n     \n-    static String stripCommentChar(final String s, final boolean comment) {\n-        if (StringUtils.isBlank((CharSequence)s) || isCommentLine(s) == comment) {\n-            return s;\n+    static String stripCommentChar(final String str, final boolean b) {\n+        if (StringUtils.isBlank((CharSequence)str) || isCommentLine(str) == b) {\n+            return str;\n         }\n-        if (!comment) {\n-            int pos;\n-            for (pos = 0; \"#!\".indexOf(s.charAt(pos)) < 0; ++pos) {}\n-            ++pos;\n-            while (pos < s.length() && Character.isWhitespace(s.charAt(pos))) {\n-                ++pos;\n+        if (!b) {\n+            int beginIndex;\n+            for (beginIndex = 0; \"#!\".indexOf(str.charAt(beginIndex)) < 0; ++beginIndex) {}\n+            ++beginIndex;\n+            while (beginIndex < str.length() && Character.isWhitespace(str.charAt(beginIndex))) {\n+                ++beginIndex;\n             }\n-            return (pos < s.length()) ? s.substring(pos) : \"\";\n+            return (beginIndex < str.length()) ? str.substring(beginIndex) : \"\";\n         }\n-        return \"# \" + s;\n+        return \"# \" + str;\n     }\n     \n-    private String extractComment(final List<String> commentLines, final int from, final int to) {\n-        if (to < from) {\n+    private String extractComment(final List<String> list, final int n, final int n2) {\n+        if (n2 < n) {\n             return null;\n         }\n-        final StringBuilder buf = new StringBuilder(commentLines.get(from));\n-        for (int i = from + 1; i <= to; ++i) {\n-            buf.append(\"\\n\");\n-            buf.append(commentLines.get(i));\n+        final StringBuilder sb = new StringBuilder(list.get(n));\n+        for (int i = n + 1; i <= n2; ++i) {\n+            sb.append(\"\\n\");\n+            sb.append(list.get(i));\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n     \n-    private int checkHeaderComment(final List<String> commentLines) {\n+    private int checkHeaderComment(final List<String> list) {\n         if (this.loadCounter.get() == 1 && this.layoutData.isEmpty()) {\n-            int index;\n-            for (index = commentLines.size() - 1; index >= 0 && ((String)commentLines.get(index)).length() > 0; --index) {}\n+            int n;\n+            for (n = list.size() - 1; n >= 0 && ((String)list.get(n)).length() > 0; --n) {}\n             if (this.getHeaderComment() == null) {\n-                this.setHeaderComment(this.extractComment(commentLines, 0, index - 1));\n+                this.setHeaderComment(this.extractComment(list, 0, n - 1));\n             }\n-            return index + 1;\n+            return n + 1;\n         }\n         return 0;\n     }\n     \n-    private void copyFrom(final PropertiesConfigurationLayout c) {\n-        for (final String key : c.getKeys()) {\n-            final PropertiesConfigurationLayout.PropertyLayoutData data = (PropertiesConfigurationLayout.PropertyLayoutData)c.layoutData.get(key);\n-            this.layoutData.put(key, data.clone());\n+    private void copyFrom(final PropertiesConfigurationLayout propertiesConfigurationLayout) {\n+        for (final String s : propertiesConfigurationLayout.getKeys()) {\n+            this.layoutData.put(s, ((PropertiesConfigurationLayout.PropertyLayoutData)propertiesConfigurationLayout.layoutData.get(s)).clone());\n         }\n-        this.setHeaderComment(c.getHeaderComment());\n-        this.setFooterComment(c.getFooterComment());\n+        this.setHeaderComment(propertiesConfigurationLayout.getHeaderComment());\n+        this.setFooterComment(propertiesConfigurationLayout.getFooterComment());\n     }\n     \n-    private static void writeComment(final PropertiesConfiguration.PropertiesWriter writer, final String comment) throws IOException {\n-        if (comment != null) {\n-            writer.writeln(StringUtils.replace(comment, \"\\n\", writer.getLineSeparator()));\n+    private static void writeComment(final PropertiesConfiguration.PropertiesWriter propertiesWriter, final String s) throws IOException {\n+        if (s != null) {\n+            propertiesWriter.writeln(StringUtils.replace(s, \"\\n\", propertiesWriter.getLineSeparator()));\n         }\n     }\n     \n-    private static String constructCanonicalComment(final String comment, final boolean commentChar) {\n-        return (comment == null) ? null : trimComment(comment, commentChar);\n+    private static String constructCanonicalComment(final String s, final boolean b) {\n+        return (s == null) ? null : trimComment(s, b);\n     }\n }\n"}]}
