{"diffoscope-json-version": 1, "source1": "first/GzipCompressorInputStream.class", "source2": "second/GzipCompressorInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,105 +1,105 @@\n-  SHA-256 checksum e72dba7278d86e9226df78fe20693636cb792d9a68b97c0b4cf6bd77e818d269\n+  SHA-256 checksum a9d1eddc85cbb0c3fe8f2640549f0390bbce30b08d31bd29fb4ba1af5f6ea597\n   Compiled from \"GzipCompressorInputStream.java\"\n public class org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #40                         // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n   super_class: #90                        // org/apache/commons/compress/compressors/CompressorInputStream\n   interfaces: 0, fields: 15, methods: 10, attributes: 1\n Constant pool:\n-    #1 = Methodref          #40.#149      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.\"<init>\":(Ljava/io/InputStream;Z)V\n-    #2 = Methodref          #90.#150      // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n-    #3 = Fieldref           #40.#151      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.buf:[B\n-    #4 = Class              #152          // java/util/zip/Inflater\n-    #5 = Methodref          #4.#153       // java/util/zip/Inflater.\"<init>\":(Z)V\n-    #6 = Fieldref           #40.#154      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.inf:Ljava/util/zip/Inflater;\n-    #7 = Class              #155          // java/util/zip/CRC32\n-    #8 = Methodref          #7.#150       // java/util/zip/CRC32.\"<init>\":()V\n-    #9 = Fieldref           #40.#156      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.crc:Ljava/util/zip/CRC32;\n-   #10 = Fieldref           #40.#157      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.endReached:Z\n-   #11 = Fieldref           #40.#158      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.oneByte:[B\n-   #12 = Class              #159          // org/apache/commons/compress/compressors/gzip/GzipParameters\n-   #13 = Methodref          #12.#150      // org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n-   #14 = Fieldref           #40.#160      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-   #15 = Methodref          #161.#162     // java/io/InputStream.markSupported:()Z\n-   #16 = Fieldref           #40.#163      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.in:Ljava/io/InputStream;\n-   #17 = Class              #164          // java/io/BufferedInputStream\n-   #18 = Methodref          #17.#165      // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #19 = Fieldref           #40.#166      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.decompressConcatenated:Z\n-   #20 = Methodref          #40.#167      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.init:(Z)Z\n-   #21 = Fieldref           #40.#168      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.$assertionsDisabled:Z\n-   #22 = Class              #169          // java/lang/AssertionError\n-   #23 = Methodref          #22.#150      // java/lang/AssertionError.\"<init>\":()V\n-   #24 = Methodref          #161.#170     // java/io/InputStream.read:()I\n-   #25 = Class              #171          // java/io/IOException\n-   #26 = String             #172          // Input is not in the .gz format\n-   #27 = String             #173          // Garbage after a valid .gz stream\n-   #28 = Methodref          #25.#174      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #29 = Class              #175          // java/io/DataInputStream\n-   #30 = Methodref          #29.#165      // java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #31 = InterfaceMethodref #176.#177     // java/io/DataInput.readUnsignedByte:()I\n-   #32 = Class              #178          // java/util/zip/Deflater\n-   #33 = Class              #179          // java/lang/StringBuilder\n-   #34 = Methodref          #33.#150      // java/lang/StringBuilder.\"<init>\":()V\n-   #35 = String             #180          // Unsupported compression method\n-   #36 = Methodref          #33.#181      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #37 = Methodref          #33.#182      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #38 = String             #183          //  in the .gz header\n-   #39 = Methodref          #33.#184      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #40 = Class              #185          // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-   #41 = String             #186          // Reserved flags are set in the .gz header\n-   #42 = Methodref          #187.#188     // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n+    #1 = Methodref          #40.#145      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.\"<init>\":(Ljava/io/InputStream;Z)V\n+    #2 = Methodref          #90.#146      // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+    #3 = Fieldref           #40.#147      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.buf:[B\n+    #4 = Class              #148          // java/util/zip/Inflater\n+    #5 = Methodref          #4.#149       // java/util/zip/Inflater.\"<init>\":(Z)V\n+    #6 = Fieldref           #40.#150      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.inf:Ljava/util/zip/Inflater;\n+    #7 = Class              #151          // java/util/zip/CRC32\n+    #8 = Methodref          #7.#146       // java/util/zip/CRC32.\"<init>\":()V\n+    #9 = Fieldref           #40.#152      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.crc:Ljava/util/zip/CRC32;\n+   #10 = Fieldref           #40.#153      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.endReached:Z\n+   #11 = Fieldref           #40.#154      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.oneByte:[B\n+   #12 = Class              #155          // org/apache/commons/compress/compressors/gzip/GzipParameters\n+   #13 = Methodref          #12.#146      // org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n+   #14 = Fieldref           #40.#156      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+   #15 = Methodref          #126.#157     // java/io/InputStream.markSupported:()Z\n+   #16 = Fieldref           #40.#158      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.in:Ljava/io/InputStream;\n+   #17 = Class              #159          // java/io/BufferedInputStream\n+   #18 = Methodref          #17.#160      // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #19 = Fieldref           #40.#161      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.decompressConcatenated:Z\n+   #20 = Methodref          #40.#162      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.init:(Z)Z\n+   #21 = Fieldref           #40.#163      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.$assertionsDisabled:Z\n+   #22 = Class              #164          // java/lang/AssertionError\n+   #23 = Methodref          #22.#146      // java/lang/AssertionError.\"<init>\":()V\n+   #24 = Methodref          #126.#165     // java/io/InputStream.read:()I\n+   #25 = Class              #166          // java/io/IOException\n+   #26 = String             #167          // Input is not in the .gz format\n+   #27 = String             #168          // Garbage after a valid .gz stream\n+   #28 = Methodref          #25.#169      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #29 = Class              #170          // java/io/DataInputStream\n+   #30 = Methodref          #29.#160      // java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #31 = InterfaceMethodref #131.#171     // java/io/DataInput.readUnsignedByte:()I\n+   #32 = Class              #172          // java/util/zip/Deflater\n+   #33 = Class              #173          // java/lang/StringBuilder\n+   #34 = Methodref          #33.#146      // java/lang/StringBuilder.\"<init>\":()V\n+   #35 = String             #174          // Unsupported compression method\n+   #36 = Methodref          #33.#175      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #37 = Methodref          #33.#176      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #38 = String             #177          //  in the .gz header\n+   #39 = Methodref          #33.#178      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #40 = Class              #179          // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n+   #41 = String             #180          // Reserved flags are set in the .gz header\n+   #42 = Methodref          #181.#182     // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:(Ljava/io/DataInput;I)J\n    #43 = Long               1000l\n-   #45 = Methodref          #12.#189      // org/apache/commons/compress/compressors/gzip/GzipParameters.setModificationTime:(J)V\n-   #46 = Methodref          #12.#190      // org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n-   #47 = Methodref          #12.#191      // org/apache/commons/compress/compressors/gzip/GzipParameters.setOperatingSystem:(I)V\n-   #48 = Class              #192          // java/lang/String\n-   #49 = Methodref          #40.#193      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.readToNull:(Ljava/io/DataInput;)[B\n-   #50 = Class              #194          // org/apache/commons/compress/utils/CharsetNames\n-   #51 = String             #195          // ISO-8859-1\n-   #52 = Methodref          #48.#196      // java/lang/String.\"<init>\":([BLjava/lang/String;)V\n-   #53 = Methodref          #12.#197      // org/apache/commons/compress/compressors/gzip/GzipParameters.setFilename:(Ljava/lang/String;)V\n-   #54 = Methodref          #12.#198      // org/apache/commons/compress/compressors/gzip/GzipParameters.setComment:(Ljava/lang/String;)V\n-   #55 = InterfaceMethodref #176.#199     // java/io/DataInput.readShort:()S\n-   #56 = Methodref          #4.#200       // java/util/zip/Inflater.reset:()V\n-   #57 = Methodref          #7.#200       // java/util/zip/CRC32.reset:()V\n-   #58 = Class              #201          // java/io/ByteArrayOutputStream\n-   #59 = Methodref          #58.#150      // java/io/ByteArrayOutputStream.\"<init>\":()V\n-   #60 = Methodref          #58.#202      // java/io/ByteArrayOutputStream.write:(I)V\n-   #61 = Methodref          #58.#203      // java/io/ByteArrayOutputStream.toByteArray:()[B\n-   #62 = Methodref          #40.#204      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.read:([BII)I\n-   #63 = Methodref          #4.#205       // java/util/zip/Inflater.needsInput:()Z\n-   #64 = Methodref          #161.#206     // java/io/InputStream.mark:(I)V\n-   #65 = Methodref          #161.#207     // java/io/InputStream.read:([B)I\n-   #66 = Fieldref           #40.#208      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.bufUsed:I\n-   #67 = Class              #209          // java/io/EOFException\n-   #68 = Methodref          #67.#150      // java/io/EOFException.\"<init>\":()V\n-   #69 = Methodref          #4.#210       // java/util/zip/Inflater.setInput:([BII)V\n-   #70 = Methodref          #4.#211       // java/util/zip/Inflater.inflate:([BII)I\n-   #71 = Class              #212          // java/util/zip/DataFormatException\n-   #72 = String             #213          // Gzip-compressed data is corrupt\n-   #73 = Methodref          #7.#214       // java/util/zip/CRC32.update:([BII)V\n-   #74 = Methodref          #40.#215      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.count:(I)V\n-   #75 = Methodref          #4.#216       // java/util/zip/Inflater.finished:()Z\n-   #76 = Methodref          #161.#200     // java/io/InputStream.reset:()V\n-   #77 = Methodref          #4.#217       // java/util/zip/Inflater.getRemaining:()I\n-   #78 = Methodref          #161.#218     // java/io/InputStream.skip:(J)J\n-   #79 = Methodref          #25.#150      // java/io/IOException.\"<init>\":()V\n-   #80 = Methodref          #7.#219       // java/util/zip/CRC32.getValue:()J\n-   #81 = String             #220          // Gzip-compressed data is corrupt (CRC32 error)\n-   #82 = Methodref          #4.#221       // java/util/zip/Inflater.getBytesWritten:()J\n+   #45 = Methodref          #12.#183      // org/apache/commons/compress/compressors/gzip/GzipParameters.setModificationTime:(J)V\n+   #46 = Methodref          #12.#184      // org/apache/commons/compress/compressors/gzip/GzipParameters.setCompressionLevel:(I)V\n+   #47 = Methodref          #12.#185      // org/apache/commons/compress/compressors/gzip/GzipParameters.setOperatingSystem:(I)V\n+   #48 = Class              #186          // java/lang/String\n+   #49 = Methodref          #40.#187      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.readToNull:(Ljava/io/DataInput;)[B\n+   #50 = Class              #188          // org/apache/commons/compress/utils/CharsetNames\n+   #51 = String             #189          // ISO-8859-1\n+   #52 = Methodref          #48.#190      // java/lang/String.\"<init>\":([BLjava/lang/String;)V\n+   #53 = Methodref          #12.#191      // org/apache/commons/compress/compressors/gzip/GzipParameters.setFilename:(Ljava/lang/String;)V\n+   #54 = Methodref          #12.#192      // org/apache/commons/compress/compressors/gzip/GzipParameters.setComment:(Ljava/lang/String;)V\n+   #55 = InterfaceMethodref #131.#193     // java/io/DataInput.readShort:()S\n+   #56 = Methodref          #4.#194       // java/util/zip/Inflater.reset:()V\n+   #57 = Methodref          #7.#194       // java/util/zip/CRC32.reset:()V\n+   #58 = Class              #195          // java/io/ByteArrayOutputStream\n+   #59 = Methodref          #58.#146      // java/io/ByteArrayOutputStream.\"<init>\":()V\n+   #60 = Methodref          #58.#196      // java/io/ByteArrayOutputStream.write:(I)V\n+   #61 = Methodref          #58.#197      // java/io/ByteArrayOutputStream.toByteArray:()[B\n+   #62 = Methodref          #40.#198      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.read:([BII)I\n+   #63 = Methodref          #4.#199       // java/util/zip/Inflater.needsInput:()Z\n+   #64 = Methodref          #126.#200     // java/io/InputStream.mark:(I)V\n+   #65 = Methodref          #126.#201     // java/io/InputStream.read:([B)I\n+   #66 = Fieldref           #40.#202      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.bufUsed:I\n+   #67 = Class              #203          // java/io/EOFException\n+   #68 = Methodref          #67.#146      // java/io/EOFException.\"<init>\":()V\n+   #69 = Methodref          #4.#204       // java/util/zip/Inflater.setInput:([BII)V\n+   #70 = Methodref          #4.#205       // java/util/zip/Inflater.inflate:([BII)I\n+   #71 = Class              #206          // java/util/zip/DataFormatException\n+   #72 = String             #207          // Gzip-compressed data is corrupt\n+   #73 = Methodref          #7.#208       // java/util/zip/CRC32.update:([BII)V\n+   #74 = Methodref          #40.#209      // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.count:(I)V\n+   #75 = Methodref          #4.#210       // java/util/zip/Inflater.finished:()Z\n+   #76 = Methodref          #126.#194     // java/io/InputStream.reset:()V\n+   #77 = Methodref          #4.#211       // java/util/zip/Inflater.getRemaining:()I\n+   #78 = Methodref          #126.#212     // java/io/InputStream.skip:(J)J\n+   #79 = Methodref          #25.#146      // java/io/IOException.\"<init>\":()V\n+   #80 = Methodref          #7.#213       // java/util/zip/CRC32.getValue:()J\n+   #81 = String             #214          // Gzip-compressed data is corrupt (CRC32 error)\n+   #82 = Methodref          #4.#215       // java/util/zip/Inflater.getBytesWritten:()J\n    #83 = Long               4294967295l\n-   #85 = String             #222          // Gzip-compressed data is corrupt(uncompressed size mismatch)\n-   #86 = Methodref          #4.#223       // java/util/zip/Inflater.end:()V\n-   #87 = Fieldref           #224.#163     // java/lang/System.in:Ljava/io/InputStream;\n-   #88 = Methodref          #161.#225     // java/io/InputStream.close:()V\n-   #89 = Methodref          #226.#227     // java/lang/Class.desiredAssertionStatus:()Z\n-   #90 = Class              #228          // org/apache/commons/compress/compressors/CompressorInputStream\n+   #85 = String             #216          // Gzip-compressed data is corrupt(uncompressed size mismatch)\n+   #86 = Methodref          #4.#217       // java/util/zip/Inflater.end:()V\n+   #87 = Fieldref           #218.#158     // java/lang/System.in:Ljava/io/InputStream;\n+   #88 = Methodref          #126.#219     // java/io/InputStream.close:()V\n+   #89 = Methodref          #220.#221     // java/lang/Class.desiredAssertionStatus:()Z\n+   #90 = Class              #222          // org/apache/commons/compress/compressors/CompressorInputStream\n    #91 = Utf8               FHCRC\n    #92 = Utf8               I\n    #93 = Utf8               ConstantValue\n    #94 = Integer            2\n    #95 = Utf8               FEXTRA\n    #96 = Integer            4\n    #97 = Utf8               FNAME\n@@ -127,165 +127,159 @@\n   #119 = Utf8               <init>\n   #120 = Utf8               (Ljava/io/InputStream;)V\n   #121 = Utf8               Code\n   #122 = Utf8               LineNumberTable\n   #123 = Utf8               Exceptions\n   #124 = Utf8               (Ljava/io/InputStream;Z)V\n   #125 = Utf8               StackMapTable\n-  #126 = Class              #185          // org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-  #127 = Class              #229          // java/io/InputStream\n-  #128 = Utf8               getMetaData\n-  #129 = Utf8               ()Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-  #130 = Utf8               init\n-  #131 = Utf8               (Z)Z\n-  #132 = Class              #192          // java/lang/String\n-  #133 = Class              #230          // java/io/DataInput\n-  #134 = Utf8               readToNull\n-  #135 = Utf8               (Ljava/io/DataInput;)[B\n-  #136 = Class              #201          // java/io/ByteArrayOutputStream\n-  #137 = Utf8               read\n-  #138 = Utf8               ()I\n-  #139 = Utf8               ([BII)I\n-  #140 = Class              #212          // java/util/zip/DataFormatException\n-  #141 = Class              #108          // \"[B\"\n-  #142 = Utf8               matches\n-  #143 = Utf8               ([BI)Z\n-  #144 = Utf8               close\n-  #145 = Utf8               ()V\n-  #146 = Utf8               <clinit>\n-  #147 = Utf8               SourceFile\n-  #148 = Utf8               GzipCompressorInputStream.java\n-  #149 = NameAndType        #119:#124     // \"<init>\":(Ljava/io/InputStream;Z)V\n-  #150 = NameAndType        #119:#145     // \"<init>\":()V\n-  #151 = NameAndType        #107:#108     // buf:[B\n-  #152 = Utf8               java/util/zip/Inflater\n-  #153 = NameAndType        #119:#231     // \"<init>\":(Z)V\n-  #154 = NameAndType        #110:#111     // inf:Ljava/util/zip/Inflater;\n-  #155 = Utf8               java/util/zip/CRC32\n-  #156 = NameAndType        #112:#113     // crc:Ljava/util/zip/CRC32;\n-  #157 = NameAndType        #114:#106     // endReached:Z\n-  #158 = NameAndType        #115:#108     // oneByte:[B\n-  #159 = Utf8               org/apache/commons/compress/compressors/gzip/GzipParameters\n-  #160 = NameAndType        #116:#117     // parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-  #161 = Class              #229          // java/io/InputStream\n-  #162 = NameAndType        #232:#233     // markSupported:()Z\n-  #163 = NameAndType        #103:#104     // in:Ljava/io/InputStream;\n-  #164 = Utf8               java/io/BufferedInputStream\n-  #165 = NameAndType        #119:#120     // \"<init>\":(Ljava/io/InputStream;)V\n-  #166 = NameAndType        #105:#106     // decompressConcatenated:Z\n-  #167 = NameAndType        #130:#131     // init:(Z)Z\n-  #168 = NameAndType        #118:#106     // $assertionsDisabled:Z\n-  #169 = Utf8               java/lang/AssertionError\n-  #170 = NameAndType        #137:#138     // read:()I\n-  #171 = Utf8               java/io/IOException\n-  #172 = Utf8               Input is not in the .gz format\n-  #173 = Utf8               Garbage after a valid .gz stream\n-  #174 = NameAndType        #119:#234     // \"<init>\":(Ljava/lang/String;)V\n-  #175 = Utf8               java/io/DataInputStream\n-  #176 = Class              #230          // java/io/DataInput\n-  #177 = NameAndType        #235:#138     // readUnsignedByte:()I\n-  #178 = Utf8               java/util/zip/Deflater\n-  #179 = Utf8               java/lang/StringBuilder\n-  #180 = Utf8               Unsupported compression method\n-  #181 = NameAndType        #236:#237     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #182 = NameAndType        #236:#238     // append:(I)Ljava/lang/StringBuilder;\n-  #183 = Utf8                in the .gz header\n-  #184 = NameAndType        #239:#240     // toString:()Ljava/lang/String;\n-  #185 = Utf8               org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n-  #186 = Utf8               Reserved flags are set in the .gz header\n-  #187 = Class              #241          // org/apache/commons/compress/utils/ByteUtils\n-  #188 = NameAndType        #242:#243     // fromLittleEndian:(Ljava/io/DataInput;I)J\n-  #189 = NameAndType        #244:#245     // setModificationTime:(J)V\n-  #190 = NameAndType        #246:#247     // setCompressionLevel:(I)V\n-  #191 = NameAndType        #248:#247     // setOperatingSystem:(I)V\n-  #192 = Utf8               java/lang/String\n-  #193 = NameAndType        #134:#135     // readToNull:(Ljava/io/DataInput;)[B\n-  #194 = Utf8               org/apache/commons/compress/utils/CharsetNames\n-  #195 = Utf8               ISO-8859-1\n-  #196 = NameAndType        #119:#249     // \"<init>\":([BLjava/lang/String;)V\n-  #197 = NameAndType        #250:#234     // setFilename:(Ljava/lang/String;)V\n-  #198 = NameAndType        #251:#234     // setComment:(Ljava/lang/String;)V\n-  #199 = NameAndType        #252:#253     // readShort:()S\n-  #200 = NameAndType        #254:#145     // reset:()V\n-  #201 = Utf8               java/io/ByteArrayOutputStream\n-  #202 = NameAndType        #255:#247     // write:(I)V\n-  #203 = NameAndType        #256:#257     // toByteArray:()[B\n-  #204 = NameAndType        #137:#139     // read:([BII)I\n-  #205 = NameAndType        #258:#233     // needsInput:()Z\n-  #206 = NameAndType        #259:#247     // mark:(I)V\n-  #207 = NameAndType        #137:#260     // read:([B)I\n-  #208 = NameAndType        #109:#92      // bufUsed:I\n-  #209 = Utf8               java/io/EOFException\n-  #210 = NameAndType        #261:#262     // setInput:([BII)V\n-  #211 = NameAndType        #263:#139     // inflate:([BII)I\n-  #212 = Utf8               java/util/zip/DataFormatException\n-  #213 = Utf8               Gzip-compressed data is corrupt\n-  #214 = NameAndType        #264:#262     // update:([BII)V\n-  #215 = NameAndType        #265:#247     // count:(I)V\n-  #216 = NameAndType        #266:#233     // finished:()Z\n-  #217 = NameAndType        #267:#138     // getRemaining:()I\n-  #218 = NameAndType        #268:#269     // skip:(J)J\n-  #219 = NameAndType        #270:#271     // getValue:()J\n-  #220 = Utf8               Gzip-compressed data is corrupt (CRC32 error)\n-  #221 = NameAndType        #272:#271     // getBytesWritten:()J\n-  #222 = Utf8               Gzip-compressed data is corrupt(uncompressed size mismatch)\n-  #223 = NameAndType        #273:#145     // end:()V\n-  #224 = Class              #274          // java/lang/System\n-  #225 = NameAndType        #144:#145     // close:()V\n-  #226 = Class              #275          // java/lang/Class\n-  #227 = NameAndType        #276:#233     // desiredAssertionStatus:()Z\n-  #228 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n-  #229 = Utf8               java/io/InputStream\n-  #230 = Utf8               java/io/DataInput\n-  #231 = Utf8               (Z)V\n-  #232 = Utf8               markSupported\n-  #233 = Utf8               ()Z\n-  #234 = Utf8               (Ljava/lang/String;)V\n-  #235 = Utf8               readUnsignedByte\n-  #236 = Utf8               append\n-  #237 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #238 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #239 = Utf8               toString\n-  #240 = Utf8               ()Ljava/lang/String;\n-  #241 = Utf8               org/apache/commons/compress/utils/ByteUtils\n-  #242 = Utf8               fromLittleEndian\n-  #243 = Utf8               (Ljava/io/DataInput;I)J\n-  #244 = Utf8               setModificationTime\n-  #245 = Utf8               (J)V\n-  #246 = Utf8               setCompressionLevel\n-  #247 = Utf8               (I)V\n-  #248 = Utf8               setOperatingSystem\n-  #249 = Utf8               ([BLjava/lang/String;)V\n-  #250 = Utf8               setFilename\n-  #251 = Utf8               setComment\n-  #252 = Utf8               readShort\n-  #253 = Utf8               ()S\n-  #254 = Utf8               reset\n-  #255 = Utf8               write\n-  #256 = Utf8               toByteArray\n-  #257 = Utf8               ()[B\n-  #258 = Utf8               needsInput\n-  #259 = Utf8               mark\n-  #260 = Utf8               ([B)I\n-  #261 = Utf8               setInput\n-  #262 = Utf8               ([BII)V\n-  #263 = Utf8               inflate\n-  #264 = Utf8               update\n-  #265 = Utf8               count\n-  #266 = Utf8               finished\n-  #267 = Utf8               getRemaining\n-  #268 = Utf8               skip\n-  #269 = Utf8               (J)J\n-  #270 = Utf8               getValue\n-  #271 = Utf8               ()J\n-  #272 = Utf8               getBytesWritten\n-  #273 = Utf8               end\n-  #274 = Utf8               java/lang/System\n-  #275 = Utf8               java/lang/Class\n-  #276 = Utf8               desiredAssertionStatus\n+  #126 = Class              #223          // java/io/InputStream\n+  #127 = Utf8               getMetaData\n+  #128 = Utf8               ()Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+  #129 = Utf8               init\n+  #130 = Utf8               (Z)Z\n+  #131 = Class              #224          // java/io/DataInput\n+  #132 = Utf8               readToNull\n+  #133 = Utf8               (Ljava/io/DataInput;)[B\n+  #134 = Utf8               read\n+  #135 = Utf8               ()I\n+  #136 = Utf8               ([BII)I\n+  #137 = Class              #108          // \"[B\"\n+  #138 = Utf8               matches\n+  #139 = Utf8               ([BI)Z\n+  #140 = Utf8               close\n+  #141 = Utf8               ()V\n+  #142 = Utf8               <clinit>\n+  #143 = Utf8               SourceFile\n+  #144 = Utf8               GzipCompressorInputStream.java\n+  #145 = NameAndType        #119:#124     // \"<init>\":(Ljava/io/InputStream;Z)V\n+  #146 = NameAndType        #119:#141     // \"<init>\":()V\n+  #147 = NameAndType        #107:#108     // buf:[B\n+  #148 = Utf8               java/util/zip/Inflater\n+  #149 = NameAndType        #119:#225     // \"<init>\":(Z)V\n+  #150 = NameAndType        #110:#111     // inf:Ljava/util/zip/Inflater;\n+  #151 = Utf8               java/util/zip/CRC32\n+  #152 = NameAndType        #112:#113     // crc:Ljava/util/zip/CRC32;\n+  #153 = NameAndType        #114:#106     // endReached:Z\n+  #154 = NameAndType        #115:#108     // oneByte:[B\n+  #155 = Utf8               org/apache/commons/compress/compressors/gzip/GzipParameters\n+  #156 = NameAndType        #116:#117     // parameters:Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+  #157 = NameAndType        #226:#227     // markSupported:()Z\n+  #158 = NameAndType        #103:#104     // in:Ljava/io/InputStream;\n+  #159 = Utf8               java/io/BufferedInputStream\n+  #160 = NameAndType        #119:#120     // \"<init>\":(Ljava/io/InputStream;)V\n+  #161 = NameAndType        #105:#106     // decompressConcatenated:Z\n+  #162 = NameAndType        #129:#130     // init:(Z)Z\n+  #163 = NameAndType        #118:#106     // $assertionsDisabled:Z\n+  #164 = Utf8               java/lang/AssertionError\n+  #165 = NameAndType        #134:#135     // read:()I\n+  #166 = Utf8               java/io/IOException\n+  #167 = Utf8               Input is not in the .gz format\n+  #168 = Utf8               Garbage after a valid .gz stream\n+  #169 = NameAndType        #119:#228     // \"<init>\":(Ljava/lang/String;)V\n+  #170 = Utf8               java/io/DataInputStream\n+  #171 = NameAndType        #229:#135     // readUnsignedByte:()I\n+  #172 = Utf8               java/util/zip/Deflater\n+  #173 = Utf8               java/lang/StringBuilder\n+  #174 = Utf8               Unsupported compression method\n+  #175 = NameAndType        #230:#231     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #176 = NameAndType        #230:#232     // append:(I)Ljava/lang/StringBuilder;\n+  #177 = Utf8                in the .gz header\n+  #178 = NameAndType        #233:#234     // toString:()Ljava/lang/String;\n+  #179 = Utf8               org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream\n+  #180 = Utf8               Reserved flags are set in the .gz header\n+  #181 = Class              #235          // org/apache/commons/compress/utils/ByteUtils\n+  #182 = NameAndType        #236:#237     // fromLittleEndian:(Ljava/io/DataInput;I)J\n+  #183 = NameAndType        #238:#239     // setModificationTime:(J)V\n+  #184 = NameAndType        #240:#241     // setCompressionLevel:(I)V\n+  #185 = NameAndType        #242:#241     // setOperatingSystem:(I)V\n+  #186 = Utf8               java/lang/String\n+  #187 = NameAndType        #132:#133     // readToNull:(Ljava/io/DataInput;)[B\n+  #188 = Utf8               org/apache/commons/compress/utils/CharsetNames\n+  #189 = Utf8               ISO-8859-1\n+  #190 = NameAndType        #119:#243     // \"<init>\":([BLjava/lang/String;)V\n+  #191 = NameAndType        #244:#228     // setFilename:(Ljava/lang/String;)V\n+  #192 = NameAndType        #245:#228     // setComment:(Ljava/lang/String;)V\n+  #193 = NameAndType        #246:#247     // readShort:()S\n+  #194 = NameAndType        #248:#141     // reset:()V\n+  #195 = Utf8               java/io/ByteArrayOutputStream\n+  #196 = NameAndType        #249:#241     // write:(I)V\n+  #197 = NameAndType        #250:#251     // toByteArray:()[B\n+  #198 = NameAndType        #134:#136     // read:([BII)I\n+  #199 = NameAndType        #252:#227     // needsInput:()Z\n+  #200 = NameAndType        #253:#241     // mark:(I)V\n+  #201 = NameAndType        #134:#254     // read:([B)I\n+  #202 = NameAndType        #109:#92      // bufUsed:I\n+  #203 = Utf8               java/io/EOFException\n+  #204 = NameAndType        #255:#256     // setInput:([BII)V\n+  #205 = NameAndType        #257:#136     // inflate:([BII)I\n+  #206 = Utf8               java/util/zip/DataFormatException\n+  #207 = Utf8               Gzip-compressed data is corrupt\n+  #208 = NameAndType        #258:#256     // update:([BII)V\n+  #209 = NameAndType        #259:#241     // count:(I)V\n+  #210 = NameAndType        #260:#227     // finished:()Z\n+  #211 = NameAndType        #261:#135     // getRemaining:()I\n+  #212 = NameAndType        #262:#263     // skip:(J)J\n+  #213 = NameAndType        #264:#265     // getValue:()J\n+  #214 = Utf8               Gzip-compressed data is corrupt (CRC32 error)\n+  #215 = NameAndType        #266:#265     // getBytesWritten:()J\n+  #216 = Utf8               Gzip-compressed data is corrupt(uncompressed size mismatch)\n+  #217 = NameAndType        #267:#141     // end:()V\n+  #218 = Class              #268          // java/lang/System\n+  #219 = NameAndType        #140:#141     // close:()V\n+  #220 = Class              #269          // java/lang/Class\n+  #221 = NameAndType        #270:#227     // desiredAssertionStatus:()Z\n+  #222 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n+  #223 = Utf8               java/io/InputStream\n+  #224 = Utf8               java/io/DataInput\n+  #225 = Utf8               (Z)V\n+  #226 = Utf8               markSupported\n+  #227 = Utf8               ()Z\n+  #228 = Utf8               (Ljava/lang/String;)V\n+  #229 = Utf8               readUnsignedByte\n+  #230 = Utf8               append\n+  #231 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #232 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #233 = Utf8               toString\n+  #234 = Utf8               ()Ljava/lang/String;\n+  #235 = Utf8               org/apache/commons/compress/utils/ByteUtils\n+  #236 = Utf8               fromLittleEndian\n+  #237 = Utf8               (Ljava/io/DataInput;I)J\n+  #238 = Utf8               setModificationTime\n+  #239 = Utf8               (J)V\n+  #240 = Utf8               setCompressionLevel\n+  #241 = Utf8               (I)V\n+  #242 = Utf8               setOperatingSystem\n+  #243 = Utf8               ([BLjava/lang/String;)V\n+  #244 = Utf8               setFilename\n+  #245 = Utf8               setComment\n+  #246 = Utf8               readShort\n+  #247 = Utf8               ()S\n+  #248 = Utf8               reset\n+  #249 = Utf8               write\n+  #250 = Utf8               toByteArray\n+  #251 = Utf8               ()[B\n+  #252 = Utf8               needsInput\n+  #253 = Utf8               mark\n+  #254 = Utf8               ([B)I\n+  #255 = Utf8               setInput\n+  #256 = Utf8               ([BII)V\n+  #257 = Utf8               inflate\n+  #258 = Utf8               update\n+  #259 = Utf8               count\n+  #260 = Utf8               finished\n+  #261 = Utf8               getRemaining\n+  #262 = Utf8               skip\n+  #263 = Utf8               (J)J\n+  #264 = Utf8               getValue\n+  #265 = Utf8               ()J\n+  #266 = Utf8               getBytesWritten\n+  #267 = Utf8               end\n+  #268 = Utf8               java/lang/System\n+  #269 = Utf8               java/lang/Class\n+  #270 = Utf8               desiredAssertionStatus\n {\n   private static final int FHCRC = 2;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 2\n \n   private static final int FEXTRA = 4;\n@@ -633,14 +627,16 @@\n         line 172: 0\n         line 175: 25\n         line 176: 33\n         line 180: 41\n         line 181: 50\n         line 184: 52\n         line 185: 65\n+        line 186: 73\n+        line 187: 78\n         line 191: 84\n         line 192: 97\n         line 193: 106\n         line 194: 113\n         line 198: 146\n         line 199: 155\n         line 200: 164\n"}]}
