{"diffoscope-json-version": 1, "source1": "first/DigestUtils.class", "source2": "second/DigestUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,54 +18,54 @@\n import java.security.MessageDigest;\n \n public class DigestUtils\n {\n     private static final int STREAM_BUFFER_LENGTH = 1024;\n     private final MessageDigest messageDigest;\n     \n-    public static byte[] digest(final MessageDigest messageDigest, final byte[] data) {\n-        return messageDigest.digest(data);\n+    public static byte[] digest(final MessageDigest messageDigest, final byte[] input) {\n+        return messageDigest.digest(input);\n     }\n     \n-    public static byte[] digest(final MessageDigest messageDigest, final ByteBuffer data) {\n-        messageDigest.update(data);\n+    public static byte[] digest(final MessageDigest messageDigest, final ByteBuffer input) {\n+        messageDigest.update(input);\n         return messageDigest.digest();\n     }\n     \n-    public static byte[] digest(final MessageDigest messageDigest, final File data) throws IOException {\n-        return updateDigest(messageDigest, data).digest();\n+    public static byte[] digest(final MessageDigest messageDigest, final File file) throws IOException {\n+        return updateDigest(messageDigest, file).digest();\n     }\n     \n-    public static byte[] digest(final MessageDigest messageDigest, final InputStream data) throws IOException {\n-        return updateDigest(messageDigest, data).digest();\n+    public static byte[] digest(final MessageDigest messageDigest, final InputStream inputStream) throws IOException {\n+        return updateDigest(messageDigest, inputStream).digest();\n     }\n     \n-    public static byte[] digest(final MessageDigest messageDigest, final Path data, final OpenOption... options) throws IOException {\n-        return updateDigest(messageDigest, data, options).digest();\n+    public static byte[] digest(final MessageDigest messageDigest, final Path path, final OpenOption... array) throws IOException {\n+        return updateDigest(messageDigest, path, array).digest();\n     }\n     \n-    public static byte[] digest(final MessageDigest messageDigest, final RandomAccessFile data) throws IOException {\n-        return updateDigest(messageDigest, data).digest();\n+    public static byte[] digest(final MessageDigest messageDigest, final RandomAccessFile randomAccessFile) throws IOException {\n+        return updateDigest(messageDigest, randomAccessFile).digest();\n     }\n     \n     public static MessageDigest getDigest(final String algorithm) {\n         try {\n             return MessageDigest.getInstance(algorithm);\n         }\n-        catch (final NoSuchAlgorithmException e) {\n-            throw new IllegalArgumentException(e);\n+        catch (final NoSuchAlgorithmException cause) {\n+            throw new IllegalArgumentException(cause);\n         }\n     }\n     \n-    public static MessageDigest getDigest(final String algorithm, final MessageDigest defaultMessageDigest) {\n+    public static MessageDigest getDigest(final String algorithm, final MessageDigest messageDigest) {\n         try {\n             return MessageDigest.getInstance(algorithm);\n         }\n-        catch (final Exception e) {\n-            return defaultMessageDigest;\n+        catch (final Exception ex) {\n+            return messageDigest;\n         }\n     }\n     \n     public static MessageDigest getMd2Digest() {\n         return getDigest(\"MD2\");\n     }\n     \n@@ -114,443 +114,443 @@\n     }\n     \n     @Deprecated\n     public static MessageDigest getShaDigest() {\n         return getSha1Digest();\n     }\n     \n-    public static boolean isAvailable(final String messageDigestAlgorithm) {\n-        return getDigest(messageDigestAlgorithm, null) != null;\n+    public static boolean isAvailable(final String s) {\n+        return getDigest(s, null) != null;\n     }\n     \n-    public static byte[] md2(final byte[] data) {\n-        return getMd2Digest().digest(data);\n+    public static byte[] md2(final byte[] input) {\n+        return getMd2Digest().digest(input);\n     }\n     \n-    public static byte[] md2(final InputStream data) throws IOException {\n-        return digest(getMd2Digest(), data);\n+    public static byte[] md2(final InputStream inputStream) throws IOException {\n+        return digest(getMd2Digest(), inputStream);\n     }\n     \n-    public static byte[] md2(final String data) {\n-        return md2(StringUtils.getBytesUtf8(data));\n+    public static byte[] md2(final String s) {\n+        return md2(StringUtils.getBytesUtf8(s));\n     }\n     \n-    public static String md2Hex(final byte[] data) {\n-        return Hex.encodeHexString(md2(data));\n+    public static String md2Hex(final byte[] array) {\n+        return Hex.encodeHexString(md2(array));\n     }\n     \n-    public static String md2Hex(final InputStream data) throws IOException {\n-        return Hex.encodeHexString(md2(data));\n+    public static String md2Hex(final InputStream inputStream) throws IOException {\n+        return Hex.encodeHexString(md2(inputStream));\n     }\n     \n-    public static String md2Hex(final String data) {\n-        return Hex.encodeHexString(md2(data));\n+    public static String md2Hex(final String s) {\n+        return Hex.encodeHexString(md2(s));\n     }\n     \n-    public static byte[] md5(final byte[] data) {\n-        return getMd5Digest().digest(data);\n+    public static byte[] md5(final byte[] input) {\n+        return getMd5Digest().digest(input);\n     }\n     \n-    public static byte[] md5(final InputStream data) throws IOException {\n-        return digest(getMd5Digest(), data);\n+    public static byte[] md5(final InputStream inputStream) throws IOException {\n+        return digest(getMd5Digest(), inputStream);\n     }\n     \n-    public static byte[] md5(final String data) {\n-        return md5(StringUtils.getBytesUtf8(data));\n+    public static byte[] md5(final String s) {\n+        return md5(StringUtils.getBytesUtf8(s));\n     }\n     \n-    public static String md5Hex(final byte[] data) {\n-        return Hex.encodeHexString(md5(data));\n+    public static String md5Hex(final byte[] array) {\n+        return Hex.encodeHexString(md5(array));\n     }\n     \n-    public static String md5Hex(final InputStream data) throws IOException {\n-        return Hex.encodeHexString(md5(data));\n+    public static String md5Hex(final InputStream inputStream) throws IOException {\n+        return Hex.encodeHexString(md5(inputStream));\n     }\n     \n-    public static String md5Hex(final String data) {\n-        return Hex.encodeHexString(md5(data));\n+    public static String md5Hex(final String s) {\n+        return Hex.encodeHexString(md5(s));\n     }\n     \n     @Deprecated\n-    public static byte[] sha(final byte[] data) {\n-        return sha1(data);\n+    public static byte[] sha(final byte[] array) {\n+        return sha1(array);\n     }\n     \n     @Deprecated\n-    public static byte[] sha(final InputStream data) throws IOException {\n-        return sha1(data);\n+    public static byte[] sha(final InputStream inputStream) throws IOException {\n+        return sha1(inputStream);\n     }\n     \n     @Deprecated\n-    public static byte[] sha(final String data) {\n-        return sha1(data);\n+    public static byte[] sha(final String s) {\n+        return sha1(s);\n     }\n     \n-    public static byte[] sha1(final byte[] data) {\n-        return getSha1Digest().digest(data);\n+    public static byte[] sha1(final byte[] input) {\n+        return getSha1Digest().digest(input);\n     }\n     \n-    public static byte[] sha1(final InputStream data) throws IOException {\n-        return digest(getSha1Digest(), data);\n+    public static byte[] sha1(final InputStream inputStream) throws IOException {\n+        return digest(getSha1Digest(), inputStream);\n     }\n     \n-    public static byte[] sha1(final String data) {\n-        return sha1(StringUtils.getBytesUtf8(data));\n+    public static byte[] sha1(final String s) {\n+        return sha1(StringUtils.getBytesUtf8(s));\n     }\n     \n-    public static String sha1Hex(final byte[] data) {\n-        return Hex.encodeHexString(sha1(data));\n+    public static String sha1Hex(final byte[] array) {\n+        return Hex.encodeHexString(sha1(array));\n     }\n     \n-    public static String sha1Hex(final InputStream data) throws IOException {\n-        return Hex.encodeHexString(sha1(data));\n+    public static String sha1Hex(final InputStream inputStream) throws IOException {\n+        return Hex.encodeHexString(sha1(inputStream));\n     }\n     \n-    public static String sha1Hex(final String data) {\n-        return Hex.encodeHexString(sha1(data));\n+    public static String sha1Hex(final String s) {\n+        return Hex.encodeHexString(sha1(s));\n     }\n     \n-    public static byte[] sha256(final byte[] data) {\n-        return getSha256Digest().digest(data);\n+    public static byte[] sha256(final byte[] input) {\n+        return getSha256Digest().digest(input);\n     }\n     \n-    public static byte[] sha256(final InputStream data) throws IOException {\n-        return digest(getSha256Digest(), data);\n+    public static byte[] sha256(final InputStream inputStream) throws IOException {\n+        return digest(getSha256Digest(), inputStream);\n     }\n     \n-    public static byte[] sha256(final String data) {\n-        return sha256(StringUtils.getBytesUtf8(data));\n+    public static byte[] sha256(final String s) {\n+        return sha256(StringUtils.getBytesUtf8(s));\n     }\n     \n-    public static String sha256Hex(final byte[] data) {\n-        return Hex.encodeHexString(sha256(data));\n+    public static String sha256Hex(final byte[] array) {\n+        return Hex.encodeHexString(sha256(array));\n     }\n     \n-    public static String sha256Hex(final InputStream data) throws IOException {\n-        return Hex.encodeHexString(sha256(data));\n+    public static String sha256Hex(final InputStream inputStream) throws IOException {\n+        return Hex.encodeHexString(sha256(inputStream));\n     }\n     \n-    public static String sha256Hex(final String data) {\n-        return Hex.encodeHexString(sha256(data));\n+    public static String sha256Hex(final String s) {\n+        return Hex.encodeHexString(sha256(s));\n     }\n     \n-    public static byte[] sha3_224(final byte[] data) {\n-        return getSha3_224Digest().digest(data);\n+    public static byte[] sha3_224(final byte[] input) {\n+        return getSha3_224Digest().digest(input);\n     }\n     \n-    public static byte[] sha3_224(final InputStream data) throws IOException {\n-        return digest(getSha3_224Digest(), data);\n+    public static byte[] sha3_224(final InputStream inputStream) throws IOException {\n+        return digest(getSha3_224Digest(), inputStream);\n     }\n     \n-    public static byte[] sha3_224(final String data) {\n-        return sha3_224(StringUtils.getBytesUtf8(data));\n+    public static byte[] sha3_224(final String s) {\n+        return sha3_224(StringUtils.getBytesUtf8(s));\n     }\n     \n-    public static String sha3_224Hex(final byte[] data) {\n-        return Hex.encodeHexString(sha3_224(data));\n+    public static String sha3_224Hex(final byte[] array) {\n+        return Hex.encodeHexString(sha3_224(array));\n     }\n     \n-    public static String sha3_224Hex(final InputStream data) throws IOException {\n-        return Hex.encodeHexString(sha3_224(data));\n+    public static String sha3_224Hex(final InputStream inputStream) throws IOException {\n+        return Hex.encodeHexString(sha3_224(inputStream));\n     }\n     \n-    public static String sha3_224Hex(final String data) {\n-        return Hex.encodeHexString(sha3_224(data));\n+    public static String sha3_224Hex(final String s) {\n+        return Hex.encodeHexString(sha3_224(s));\n     }\n     \n-    public static byte[] sha3_256(final byte[] data) {\n-        return getSha3_256Digest().digest(data);\n+    public static byte[] sha3_256(final byte[] input) {\n+        return getSha3_256Digest().digest(input);\n     }\n     \n-    public static byte[] sha3_256(final InputStream data) throws IOException {\n-        return digest(getSha3_256Digest(), data);\n+    public static byte[] sha3_256(final InputStream inputStream) throws IOException {\n+        return digest(getSha3_256Digest(), inputStream);\n     }\n     \n-    public static byte[] sha3_256(final String data) {\n-        return sha3_256(StringUtils.getBytesUtf8(data));\n+    public static byte[] sha3_256(final String s) {\n+        return sha3_256(StringUtils.getBytesUtf8(s));\n     }\n     \n-    public static String sha3_256Hex(final byte[] data) {\n-        return Hex.encodeHexString(sha3_256(data));\n+    public static String sha3_256Hex(final byte[] array) {\n+        return Hex.encodeHexString(sha3_256(array));\n     }\n     \n-    public static String sha3_256Hex(final InputStream data) throws IOException {\n-        return Hex.encodeHexString(sha3_256(data));\n+    public static String sha3_256Hex(final InputStream inputStream) throws IOException {\n+        return Hex.encodeHexString(sha3_256(inputStream));\n     }\n     \n-    public static String sha3_256Hex(final String data) {\n-        return Hex.encodeHexString(sha3_256(data));\n+    public static String sha3_256Hex(final String s) {\n+        return Hex.encodeHexString(sha3_256(s));\n     }\n     \n-    public static byte[] sha3_384(final byte[] data) {\n-        return getSha3_384Digest().digest(data);\n+    public static byte[] sha3_384(final byte[] input) {\n+        return getSha3_384Digest().digest(input);\n     }\n     \n-    public static byte[] sha3_384(final InputStream data) throws IOException {\n-        return digest(getSha3_384Digest(), data);\n+    public static byte[] sha3_384(final InputStream inputStream) throws IOException {\n+        return digest(getSha3_384Digest(), inputStream);\n     }\n     \n-    public static byte[] sha3_384(final String data) {\n-        return sha3_384(StringUtils.getBytesUtf8(data));\n+    public static byte[] sha3_384(final String s) {\n+        return sha3_384(StringUtils.getBytesUtf8(s));\n     }\n     \n-    public static String sha3_384Hex(final byte[] data) {\n-        return Hex.encodeHexString(sha3_384(data));\n+    public static String sha3_384Hex(final byte[] array) {\n+        return Hex.encodeHexString(sha3_384(array));\n     }\n     \n-    public static String sha3_384Hex(final InputStream data) throws IOException {\n-        return Hex.encodeHexString(sha3_384(data));\n+    public static String sha3_384Hex(final InputStream inputStream) throws IOException {\n+        return Hex.encodeHexString(sha3_384(inputStream));\n     }\n     \n-    public static String sha3_384Hex(final String data) {\n-        return Hex.encodeHexString(sha3_384(data));\n+    public static String sha3_384Hex(final String s) {\n+        return Hex.encodeHexString(sha3_384(s));\n     }\n     \n-    public static byte[] sha3_512(final byte[] data) {\n-        return getSha3_512Digest().digest(data);\n+    public static byte[] sha3_512(final byte[] input) {\n+        return getSha3_512Digest().digest(input);\n     }\n     \n-    public static byte[] sha3_512(final InputStream data) throws IOException {\n-        return digest(getSha3_512Digest(), data);\n+    public static byte[] sha3_512(final InputStream inputStream) throws IOException {\n+        return digest(getSha3_512Digest(), inputStream);\n     }\n     \n-    public static byte[] sha3_512(final String data) {\n-        return sha3_512(StringUtils.getBytesUtf8(data));\n+    public static byte[] sha3_512(final String s) {\n+        return sha3_512(StringUtils.getBytesUtf8(s));\n     }\n     \n-    public static String sha3_512Hex(final byte[] data) {\n-        return Hex.encodeHexString(sha3_512(data));\n+    public static String sha3_512Hex(final byte[] array) {\n+        return Hex.encodeHexString(sha3_512(array));\n     }\n     \n-    public static String sha3_512Hex(final InputStream data) throws IOException {\n-        return Hex.encodeHexString(sha3_512(data));\n+    public static String sha3_512Hex(final InputStream inputStream) throws IOException {\n+        return Hex.encodeHexString(sha3_512(inputStream));\n     }\n     \n-    public static String sha3_512Hex(final String data) {\n-        return Hex.encodeHexString(sha3_512(data));\n+    public static String sha3_512Hex(final String s) {\n+        return Hex.encodeHexString(sha3_512(s));\n     }\n     \n-    public static byte[] sha384(final byte[] data) {\n-        return getSha384Digest().digest(data);\n+    public static byte[] sha384(final byte[] input) {\n+        return getSha384Digest().digest(input);\n     }\n     \n-    public static byte[] sha384(final InputStream data) throws IOException {\n-        return digest(getSha384Digest(), data);\n+    public static byte[] sha384(final InputStream inputStream) throws IOException {\n+        return digest(getSha384Digest(), inputStream);\n     }\n     \n-    public static byte[] sha384(final String data) {\n-        return sha384(StringUtils.getBytesUtf8(data));\n+    public static byte[] sha384(final String s) {\n+        return sha384(StringUtils.getBytesUtf8(s));\n     }\n     \n-    public static String sha384Hex(final byte[] data) {\n-        return Hex.encodeHexString(sha384(data));\n+    public static String sha384Hex(final byte[] array) {\n+        return Hex.encodeHexString(sha384(array));\n     }\n     \n-    public static String sha384Hex(final InputStream data) throws IOException {\n-        return Hex.encodeHexString(sha384(data));\n+    public static String sha384Hex(final InputStream inputStream) throws IOException {\n+        return Hex.encodeHexString(sha384(inputStream));\n     }\n     \n-    public static String sha384Hex(final String data) {\n-        return Hex.encodeHexString(sha384(data));\n+    public static String sha384Hex(final String s) {\n+        return Hex.encodeHexString(sha384(s));\n     }\n     \n-    public static byte[] sha512(final byte[] data) {\n-        return getSha512Digest().digest(data);\n+    public static byte[] sha512(final byte[] input) {\n+        return getSha512Digest().digest(input);\n     }\n     \n-    public static byte[] sha512(final InputStream data) throws IOException {\n-        return digest(getSha512Digest(), data);\n+    public static byte[] sha512(final InputStream inputStream) throws IOException {\n+        return digest(getSha512Digest(), inputStream);\n     }\n     \n-    public static byte[] sha512(final String data) {\n-        return sha512(StringUtils.getBytesUtf8(data));\n+    public static byte[] sha512(final String s) {\n+        return sha512(StringUtils.getBytesUtf8(s));\n     }\n     \n-    public static byte[] sha512_224(final byte[] data) {\n-        return getSha512_224Digest().digest(data);\n+    public static byte[] sha512_224(final byte[] input) {\n+        return getSha512_224Digest().digest(input);\n     }\n     \n-    public static byte[] sha512_224(final InputStream data) throws IOException {\n-        return digest(getSha512_224Digest(), data);\n+    public static byte[] sha512_224(final InputStream inputStream) throws IOException {\n+        return digest(getSha512_224Digest(), inputStream);\n     }\n     \n-    public static byte[] sha512_224(final String data) {\n-        return sha512_224(StringUtils.getBytesUtf8(data));\n+    public static byte[] sha512_224(final String s) {\n+        return sha512_224(StringUtils.getBytesUtf8(s));\n     }\n     \n-    public static String sha512_224Hex(final byte[] data) {\n-        return Hex.encodeHexString(sha512_224(data));\n+    public static String sha512_224Hex(final byte[] array) {\n+        return Hex.encodeHexString(sha512_224(array));\n     }\n     \n-    public static String sha512_224Hex(final InputStream data) throws IOException {\n-        return Hex.encodeHexString(sha512_224(data));\n+    public static String sha512_224Hex(final InputStream inputStream) throws IOException {\n+        return Hex.encodeHexString(sha512_224(inputStream));\n     }\n     \n-    public static String sha512_224Hex(final String data) {\n-        return Hex.encodeHexString(sha512_224(data));\n+    public static String sha512_224Hex(final String s) {\n+        return Hex.encodeHexString(sha512_224(s));\n     }\n     \n-    public static byte[] sha512_256(final byte[] data) {\n-        return getSha512_256Digest().digest(data);\n+    public static byte[] sha512_256(final byte[] input) {\n+        return getSha512_256Digest().digest(input);\n     }\n     \n-    public static byte[] sha512_256(final InputStream data) throws IOException {\n-        return digest(getSha512_256Digest(), data);\n+    public static byte[] sha512_256(final InputStream inputStream) throws IOException {\n+        return digest(getSha512_256Digest(), inputStream);\n     }\n     \n-    public static byte[] sha512_256(final String data) {\n-        return sha512_256(StringUtils.getBytesUtf8(data));\n+    public static byte[] sha512_256(final String s) {\n+        return sha512_256(StringUtils.getBytesUtf8(s));\n     }\n     \n-    public static String sha512_256Hex(final byte[] data) {\n-        return Hex.encodeHexString(sha512_256(data));\n+    public static String sha512_256Hex(final byte[] array) {\n+        return Hex.encodeHexString(sha512_256(array));\n     }\n     \n-    public static String sha512_256Hex(final InputStream data) throws IOException {\n-        return Hex.encodeHexString(sha512_256(data));\n+    public static String sha512_256Hex(final InputStream inputStream) throws IOException {\n+        return Hex.encodeHexString(sha512_256(inputStream));\n     }\n     \n-    public static String sha512_256Hex(final String data) {\n-        return Hex.encodeHexString(sha512_256(data));\n+    public static String sha512_256Hex(final String s) {\n+        return Hex.encodeHexString(sha512_256(s));\n     }\n     \n-    public static String sha512Hex(final byte[] data) {\n-        return Hex.encodeHexString(sha512(data));\n+    public static String sha512Hex(final byte[] array) {\n+        return Hex.encodeHexString(sha512(array));\n     }\n     \n-    public static String sha512Hex(final InputStream data) throws IOException {\n-        return Hex.encodeHexString(sha512(data));\n+    public static String sha512Hex(final InputStream inputStream) throws IOException {\n+        return Hex.encodeHexString(sha512(inputStream));\n     }\n     \n-    public static String sha512Hex(final String data) {\n-        return Hex.encodeHexString(sha512(data));\n+    public static String sha512Hex(final String s) {\n+        return Hex.encodeHexString(sha512(s));\n     }\n     \n     @Deprecated\n-    public static String shaHex(final byte[] data) {\n-        return sha1Hex(data);\n+    public static String shaHex(final byte[] array) {\n+        return sha1Hex(array);\n     }\n     \n     @Deprecated\n-    public static String shaHex(final InputStream data) throws IOException {\n-        return sha1Hex(data);\n+    public static String shaHex(final InputStream inputStream) throws IOException {\n+        return sha1Hex(inputStream);\n     }\n     \n     @Deprecated\n-    public static String shaHex(final String data) {\n-        return sha1Hex(data);\n+    public static String shaHex(final String s) {\n+        return sha1Hex(s);\n     }\n     \n-    public static MessageDigest updateDigest(final MessageDigest messageDigest, final byte[] valueToDigest) {\n-        messageDigest.update(valueToDigest);\n+    public static MessageDigest updateDigest(final MessageDigest messageDigest, final byte[] input) {\n+        messageDigest.update(input);\n         return messageDigest;\n     }\n     \n-    public static MessageDigest updateDigest(final MessageDigest messageDigest, final ByteBuffer valueToDigest) {\n-        messageDigest.update(valueToDigest);\n+    public static MessageDigest updateDigest(final MessageDigest messageDigest, final ByteBuffer input) {\n+        messageDigest.update(input);\n         return messageDigest;\n     }\n     \n-    public static MessageDigest updateDigest(final MessageDigest digest, final File data) throws IOException {\n-        try (final BufferedInputStream inputStream = new BufferedInputStream(new FileInputStream(data))) {\n-            return updateDigest(digest, inputStream);\n+    public static MessageDigest updateDigest(final MessageDigest messageDigest, final File file) throws IOException {\n+        try (final BufferedInputStream bufferedInputStream = new BufferedInputStream(new FileInputStream(file))) {\n+            return updateDigest(messageDigest, bufferedInputStream);\n         }\n     }\n     \n-    private static MessageDigest updateDigest(final MessageDigest digest, final FileChannel data) throws IOException {\n-        final ByteBuffer buffer = ByteBuffer.allocate(1024);\n-        while (data.read(buffer) > 0) {\n-            buffer.flip();\n-            digest.update(buffer);\n-            buffer.clear();\n+    private static MessageDigest updateDigest(final MessageDigest messageDigest, final FileChannel fileChannel) throws IOException {\n+        final ByteBuffer allocate = ByteBuffer.allocate(1024);\n+        while (fileChannel.read(allocate) > 0) {\n+            allocate.flip();\n+            messageDigest.update(allocate);\n+            allocate.clear();\n         }\n-        return digest;\n+        return messageDigest;\n     }\n     \n-    public static MessageDigest updateDigest(final MessageDigest digest, final InputStream inputStream) throws IOException {\n-        final byte[] buffer = new byte[1024];\n-        for (int read = inputStream.read(buffer, 0, 1024); read > -1; read = inputStream.read(buffer, 0, 1024)) {\n-            digest.update(buffer, 0, read);\n+    public static MessageDigest updateDigest(final MessageDigest messageDigest, final InputStream inputStream) throws IOException {\n+        final byte[] b = new byte[1024];\n+        for (int i = inputStream.read(b, 0, 1024); i > -1; i = inputStream.read(b, 0, 1024)) {\n+            messageDigest.update(b, 0, i);\n         }\n-        return digest;\n+        return messageDigest;\n     }\n     \n-    public static MessageDigest updateDigest(final MessageDigest digest, final Path path, final OpenOption... options) throws IOException {\n-        try (final BufferedInputStream inputStream = new BufferedInputStream(Files.newInputStream(path, options))) {\n-            return updateDigest(digest, inputStream);\n+    public static MessageDigest updateDigest(final MessageDigest messageDigest, final Path path, final OpenOption... options) throws IOException {\n+        try (final BufferedInputStream bufferedInputStream = new BufferedInputStream(Files.newInputStream(path, options))) {\n+            return updateDigest(messageDigest, bufferedInputStream);\n         }\n     }\n     \n-    public static MessageDigest updateDigest(final MessageDigest digest, final RandomAccessFile data) throws IOException {\n-        return updateDigest(digest, data.getChannel());\n+    public static MessageDigest updateDigest(final MessageDigest messageDigest, final RandomAccessFile randomAccessFile) throws IOException {\n+        return updateDigest(messageDigest, randomAccessFile.getChannel());\n     }\n     \n-    public static MessageDigest updateDigest(final MessageDigest messageDigest, final String valueToDigest) {\n-        messageDigest.update(StringUtils.getBytesUtf8(valueToDigest));\n+    public static MessageDigest updateDigest(final MessageDigest messageDigest, final String s) {\n+        messageDigest.update(StringUtils.getBytesUtf8(s));\n         return messageDigest;\n     }\n     \n     @Deprecated\n     public DigestUtils() {\n         this.messageDigest = null;\n     }\n     \n-    public DigestUtils(final MessageDigest digest) {\n-        this.messageDigest = digest;\n+    public DigestUtils(final MessageDigest messageDigest) {\n+        this.messageDigest = messageDigest;\n     }\n     \n-    public DigestUtils(final String name) {\n-        this(getDigest(name));\n+    public DigestUtils(final String s) {\n+        this(getDigest(s));\n     }\n     \n-    public byte[] digest(final byte[] data) {\n-        return updateDigest(this.messageDigest, data).digest();\n+    public byte[] digest(final byte[] array) {\n+        return updateDigest(this.messageDigest, array).digest();\n     }\n     \n-    public byte[] digest(final ByteBuffer data) {\n-        return updateDigest(this.messageDigest, data).digest();\n+    public byte[] digest(final ByteBuffer byteBuffer) {\n+        return updateDigest(this.messageDigest, byteBuffer).digest();\n     }\n     \n-    public byte[] digest(final File data) throws IOException {\n-        return updateDigest(this.messageDigest, data).digest();\n+    public byte[] digest(final File file) throws IOException {\n+        return updateDigest(this.messageDigest, file).digest();\n     }\n     \n-    public byte[] digest(final InputStream data) throws IOException {\n-        return updateDigest(this.messageDigest, data).digest();\n+    public byte[] digest(final InputStream inputStream) throws IOException {\n+        return updateDigest(this.messageDigest, inputStream).digest();\n     }\n     \n-    public byte[] digest(final Path data, final OpenOption... options) throws IOException {\n-        return updateDigest(this.messageDigest, data, options).digest();\n+    public byte[] digest(final Path path, final OpenOption... array) throws IOException {\n+        return updateDigest(this.messageDigest, path, array).digest();\n     }\n     \n-    public byte[] digest(final String data) {\n-        return updateDigest(this.messageDigest, data).digest();\n+    public byte[] digest(final String s) {\n+        return updateDigest(this.messageDigest, s).digest();\n     }\n     \n-    public String digestAsHex(final byte[] data) {\n-        return Hex.encodeHexString(this.digest(data));\n+    public String digestAsHex(final byte[] array) {\n+        return Hex.encodeHexString(this.digest(array));\n     }\n     \n-    public String digestAsHex(final ByteBuffer data) {\n-        return Hex.encodeHexString(this.digest(data));\n+    public String digestAsHex(final ByteBuffer byteBuffer) {\n+        return Hex.encodeHexString(this.digest(byteBuffer));\n     }\n     \n-    public String digestAsHex(final File data) throws IOException {\n-        return Hex.encodeHexString(this.digest(data));\n+    public String digestAsHex(final File file) throws IOException {\n+        return Hex.encodeHexString(this.digest(file));\n     }\n     \n-    public String digestAsHex(final InputStream data) throws IOException {\n-        return Hex.encodeHexString(this.digest(data));\n+    public String digestAsHex(final InputStream inputStream) throws IOException {\n+        return Hex.encodeHexString(this.digest(inputStream));\n     }\n     \n-    public String digestAsHex(final Path data, final OpenOption... options) throws IOException {\n-        return Hex.encodeHexString(this.digest(data, options));\n+    public String digestAsHex(final Path path, final OpenOption... array) throws IOException {\n+        return Hex.encodeHexString(this.digest(path, array));\n     }\n     \n-    public String digestAsHex(final String data) {\n-        return Hex.encodeHexString(this.digest(data));\n+    public String digestAsHex(final String s) {\n+        return Hex.encodeHexString(this.digest(s));\n     }\n     \n     public MessageDigest getMessageDigest() {\n         return this.messageDigest;\n     }\n }\n"}]}
