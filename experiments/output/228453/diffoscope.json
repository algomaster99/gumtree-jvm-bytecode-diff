{"diffoscope-json-version": 1, "source1": "first/Md5Crypt.class", "source2": "second/Md5Crypt.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,123 +12,119 @@\n public class Md5Crypt\n {\n     static final String APR1_PREFIX = \"$apr1$\";\n     private static final int BLOCKSIZE = 16;\n     static final String MD5_PREFIX = \"$1$\";\n     private static final int ROUNDS = 1000;\n     \n-    public static String apr1Crypt(final byte[] keyBytes) {\n-        return apr1Crypt(keyBytes, \"$apr1$\" + B64.getRandomSalt(8));\n+    public static String apr1Crypt(final byte[] array) {\n+        return apr1Crypt(array, \"$apr1$\" + B64.getRandomSalt(8));\n     }\n     \n-    public static String apr1Crypt(final byte[] keyBytes, final Random random) {\n-        return apr1Crypt(keyBytes, \"$apr1$\" + B64.getRandomSalt(8, random));\n+    public static String apr1Crypt(final byte[] array, final Random random) {\n+        return apr1Crypt(array, \"$apr1$\" + B64.getRandomSalt(8, random));\n     }\n     \n-    public static String apr1Crypt(final byte[] keyBytes, String salt) {\n-        if (salt != null && !salt.startsWith(\"$apr1$\")) {\n-            salt = \"$apr1$\" + salt;\n+    public static String apr1Crypt(final byte[] array, String string) {\n+        if (string != null && !string.startsWith(\"$apr1$\")) {\n+            string = \"$apr1$\" + string;\n         }\n-        return md5Crypt(keyBytes, salt, \"$apr1$\");\n+        return md5Crypt(array, string, \"$apr1$\");\n     }\n     \n-    public static String apr1Crypt(final String keyBytes) {\n-        return apr1Crypt(keyBytes.getBytes(StandardCharsets.UTF_8));\n+    public static String apr1Crypt(final String s) {\n+        return apr1Crypt(s.getBytes(StandardCharsets.UTF_8));\n     }\n     \n-    public static String apr1Crypt(final String keyBytes, final String salt) {\n-        return apr1Crypt(keyBytes.getBytes(StandardCharsets.UTF_8), salt);\n+    public static String apr1Crypt(final String s, final String s2) {\n+        return apr1Crypt(s.getBytes(StandardCharsets.UTF_8), s2);\n     }\n     \n-    public static String md5Crypt(final byte[] keyBytes) {\n-        return md5Crypt(keyBytes, \"$1$\" + B64.getRandomSalt(8));\n+    public static String md5Crypt(final byte[] array) {\n+        return md5Crypt(array, \"$1$\" + B64.getRandomSalt(8));\n     }\n     \n-    public static String md5Crypt(final byte[] keyBytes, final Random random) {\n-        return md5Crypt(keyBytes, \"$1$\" + B64.getRandomSalt(8, random));\n+    public static String md5Crypt(final byte[] array, final Random random) {\n+        return md5Crypt(array, \"$1$\" + B64.getRandomSalt(8, random));\n     }\n     \n-    public static String md5Crypt(final byte[] keyBytes, final String salt) {\n-        return md5Crypt(keyBytes, salt, \"$1$\");\n+    public static String md5Crypt(final byte[] array, final String s) {\n+        return md5Crypt(array, s, \"$1$\");\n     }\n     \n-    public static String md5Crypt(final byte[] keyBytes, final String salt, final String prefix) {\n-        return md5Crypt(keyBytes, salt, prefix, new SecureRandom());\n+    public static String md5Crypt(final byte[] array, final String s, final String s2) {\n+        return md5Crypt(array, s, s2, new SecureRandom());\n     }\n     \n-    public static String md5Crypt(final byte[] keyBytes, final String salt, final String prefix, final Random random) {\n-        final int keyLen = keyBytes.length;\n-        String saltString;\n-        if (salt == null) {\n-            saltString = B64.getRandomSalt(8, random);\n+    public static String md5Crypt(final byte[] a, final String s, final String str, final Random random) {\n+        final int length = a.length;\n+        String str2;\n+        if (s == null) {\n+            str2 = B64.getRandomSalt(8, random);\n         }\n         else {\n-            final Pattern p = Pattern.compile(\"^\" + prefix.replace((CharSequence)\"$\", (CharSequence)\"\\\\$\") + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\");\n-            final Matcher m = p.matcher(salt);\n-            if (!m.find()) {\n-                throw new IllegalArgumentException(\"Invalid salt value: \" + salt);\n-            }\n-            saltString = m.group(1);\n-        }\n-        final byte[] saltBytes = saltString.getBytes(StandardCharsets.UTF_8);\n-        final MessageDigest ctx = DigestUtils.getMd5Digest();\n-        ctx.update(keyBytes);\n-        ctx.update(prefix.getBytes(StandardCharsets.UTF_8));\n-        ctx.update(saltBytes);\n-        MessageDigest ctx2 = DigestUtils.getMd5Digest();\n-        ctx2.update(keyBytes);\n-        ctx2.update(saltBytes);\n-        ctx2.update(keyBytes);\n-        byte[] finalb = ctx2.digest();\n-        for (int ii = keyLen; ii > 0; ii -= 16) {\n-            ctx.update(finalb, 0, (ii > 16) ? 16 : ii);\n-        }\n-        Arrays.fill(finalb, (byte)0);\n-        int ii = keyLen;\n-        final int j = 0;\n-        while (ii > 0) {\n-            if ((ii & 0x1) == 0x1) {\n-                ctx.update(finalb[0]);\n+            final Matcher matcher = Pattern.compile(\"^\" + str.replace((CharSequence)\"$\", (CharSequence)\"\\\\$\") + \"([\\\\.\\\\/a-zA-Z0-9]{1,8}).*\").matcher(s);\n+            if (!matcher.find()) {\n+                throw new IllegalArgumentException(\"Invalid salt value: \" + s);\n+            }\n+            str2 = matcher.group(1);\n+        }\n+        final byte[] bytes = str2.getBytes(StandardCharsets.UTF_8);\n+        final MessageDigest md5Digest = DigestUtils.getMd5Digest();\n+        md5Digest.update(a);\n+        md5Digest.update(str.getBytes(StandardCharsets.UTF_8));\n+        md5Digest.update(bytes);\n+        MessageDigest messageDigest = DigestUtils.getMd5Digest();\n+        messageDigest.update(a);\n+        messageDigest.update(bytes);\n+        messageDigest.update(a);\n+        final byte[] digest = messageDigest.digest();\n+        for (int i = length; i > 0; i -= 16) {\n+            md5Digest.update(digest, 0, (i > 16) ? 16 : i);\n+        }\n+        Arrays.fill(digest, (byte)0);\n+        for (int j = length; j > 0; j >>= 1) {\n+            if ((j & 0x1) == 0x1) {\n+                md5Digest.update(digest[0]);\n             }\n             else {\n-                ctx.update(keyBytes[0]);\n+                md5Digest.update(a[0]);\n             }\n-            ii >>= 1;\n         }\n-        final StringBuilder passwd = new StringBuilder(prefix + saltString + \"$\");\n-        finalb = ctx.digest();\n-        for (int i = 0; i < 1000; ++i) {\n-            ctx2 = DigestUtils.getMd5Digest();\n-            if ((i & 0x1) != 0x0) {\n-                ctx2.update(keyBytes);\n+        final StringBuilder sb = new StringBuilder(str + str2 + \"$\");\n+        byte[] a2 = md5Digest.digest();\n+        for (int k = 0; k < 1000; ++k) {\n+            messageDigest = DigestUtils.getMd5Digest();\n+            if ((k & 0x1) != 0x0) {\n+                messageDigest.update(a);\n             }\n             else {\n-                ctx2.update(finalb, 0, 16);\n+                messageDigest.update(a2, 0, 16);\n             }\n-            if (i % 3 != 0) {\n-                ctx2.update(saltBytes);\n+            if (k % 3 != 0) {\n+                messageDigest.update(bytes);\n             }\n-            if (i % 7 != 0) {\n-                ctx2.update(keyBytes);\n+            if (k % 7 != 0) {\n+                messageDigest.update(a);\n             }\n-            if ((i & 0x1) != 0x0) {\n-                ctx2.update(finalb, 0, 16);\n+            if ((k & 0x1) != 0x0) {\n+                messageDigest.update(a2, 0, 16);\n             }\n             else {\n-                ctx2.update(keyBytes);\n+                messageDigest.update(a);\n             }\n-            finalb = ctx2.digest();\n+            a2 = messageDigest.digest();\n         }\n-        B64.b64from24bit(finalb[0], finalb[6], finalb[12], 4, passwd);\n-        B64.b64from24bit(finalb[1], finalb[7], finalb[13], 4, passwd);\n-        B64.b64from24bit(finalb[2], finalb[8], finalb[14], 4, passwd);\n-        B64.b64from24bit(finalb[3], finalb[9], finalb[15], 4, passwd);\n-        B64.b64from24bit(finalb[4], finalb[10], finalb[5], 4, passwd);\n-        B64.b64from24bit((byte)0, (byte)0, finalb[11], 2, passwd);\n-        ctx.reset();\n-        ctx2.reset();\n-        Arrays.fill(keyBytes, (byte)0);\n-        Arrays.fill(saltBytes, (byte)0);\n-        Arrays.fill(finalb, (byte)0);\n-        return passwd.toString();\n+        B64.b64from24bit(a2[0], a2[6], a2[12], 4, sb);\n+        B64.b64from24bit(a2[1], a2[7], a2[13], 4, sb);\n+        B64.b64from24bit(a2[2], a2[8], a2[14], 4, sb);\n+        B64.b64from24bit(a2[3], a2[9], a2[15], 4, sb);\n+        B64.b64from24bit(a2[4], a2[10], a2[5], 4, sb);\n+        B64.b64from24bit((byte)0, (byte)0, a2[11], 2, sb);\n+        md5Digest.reset();\n+        messageDigest.reset();\n+        Arrays.fill(a, (byte)0);\n+        Arrays.fill(bytes, (byte)0);\n+        Arrays.fill(a2, (byte)0);\n+        return sb.toString();\n     }\n }\n"}]}
