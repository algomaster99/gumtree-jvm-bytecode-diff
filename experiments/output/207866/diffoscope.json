{"diffoscope-json-version": 1, "source1": "first/ThresholdingOutputStream.class", "source2": "second/ThresholdingOutputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,26 +11,26 @@\n     private static final IOFunction<ThresholdingOutputStream, OutputStream> NOOP_OS_GETTER;\n     private final int threshold;\n     private final IOConsumer<ThresholdingOutputStream> thresholdConsumer;\n     private final IOFunction<ThresholdingOutputStream, OutputStream> outputStreamGetter;\n     private long written;\n     private boolean thresholdExceeded;\n     \n-    public ThresholdingOutputStream(final int threshold) {\n-        this(threshold, (IOConsumer<ThresholdingOutputStream>)IOConsumer.noop(), ThresholdingOutputStream.NOOP_OS_GETTER);\n+    public ThresholdingOutputStream(final int n) {\n+        this(n, (IOConsumer<ThresholdingOutputStream>)IOConsumer.noop(), ThresholdingOutputStream.NOOP_OS_GETTER);\n     }\n     \n-    public ThresholdingOutputStream(final int threshold, final IOConsumer<ThresholdingOutputStream> thresholdConsumer, final IOFunction<ThresholdingOutputStream, OutputStream> outputStreamGetter) {\n+    public ThresholdingOutputStream(final int threshold, final IOConsumer<ThresholdingOutputStream> ioConsumer, final IOFunction<ThresholdingOutputStream, OutputStream> ioFunction) {\n         this.threshold = threshold;\n-        this.thresholdConsumer = (IOConsumer<ThresholdingOutputStream>)((thresholdConsumer == null) ? IOConsumer.noop() : thresholdConsumer);\n-        this.outputStreamGetter = ((outputStreamGetter == null) ? ThresholdingOutputStream.NOOP_OS_GETTER : outputStreamGetter);\n+        this.thresholdConsumer = (IOConsumer<ThresholdingOutputStream>)((ioConsumer == null) ? IOConsumer.noop() : ioConsumer);\n+        this.outputStreamGetter = ((ioFunction == null) ? ThresholdingOutputStream.NOOP_OS_GETTER : ioFunction);\n     }\n     \n-    protected void checkThreshold(final int count) throws IOException {\n-        if (!this.thresholdExceeded && this.written + count > this.threshold) {\n+    protected void checkThreshold(final int n) throws IOException {\n+        if (!this.thresholdExceeded && this.written + n > this.threshold) {\n             this.thresholdExceeded = true;\n             this.thresholdReached();\n         }\n     }\n     \n     @Override\n     public void close() throws IOException {\n@@ -63,16 +63,16 @@\n     }\n     \n     protected void resetByteCount() {\n         this.thresholdExceeded = false;\n         this.written = 0L;\n     }\n     \n-    protected void setByteCount(final long count) {\n-        this.written = count;\n+    protected void setByteCount(final long written) {\n+        this.written = written;\n     }\n     \n     protected void thresholdReached() throws IOException {\n         this.thresholdConsumer.accept((Object)this);\n     }\n     \n     @Override\n@@ -86,17 +86,17 @@\n     public void write(final byte[] b, final int off, final int len) throws IOException {\n         this.checkThreshold(len);\n         this.getStream().write(b, off, len);\n         this.written += len;\n     }\n     \n     @Override\n-    public void write(final int b) throws IOException {\n+    public void write(final int n) throws IOException {\n         this.checkThreshold(1);\n-        this.getStream().write(b);\n+        this.getStream().write(n);\n         ++this.written;\n     }\n     \n     static {\n-        NOOP_OS_GETTER = (os -> NullOutputStream.NULL_OUTPUT_STREAM);\n+        NOOP_OS_GETTER = (thresholdingOutputStream -> NullOutputStream.NULL_OUTPUT_STREAM);\n     }\n }\n"}]}
