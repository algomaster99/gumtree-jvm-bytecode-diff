{"diffoscope-json-version": 1, "source1": "first/ParentModuleMacro.class", "source2": "second/ParentModuleMacro.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,45 +11,41 @@\n import org.apache.maven.doxia.macro.Macro;\n import org.codehaus.plexus.component.annotations.Component;\n import org.apache.maven.doxia.macro.AbstractMacro;\n \n @Component(role = Macro.class, hint = \"parent-module\")\n public class ParentModuleMacro extends AbstractMacro\n {\n-    public void execute(final Sink sink, final MacroRequest request) throws MacroExecutionException {\n+    public void execute(final Sink sink, final MacroRequest macroRequest) throws MacroExecutionException {\n         if (!(sink instanceof XdocSink)) {\n             throw new MacroExecutionException(\"Expected Sink to be an XdocSink.\");\n         }\n-        final String moduleName = (String)request.getParameter(\"moduleName\");\n-        final Object instance = SiteUtil.getModuleInstance(moduleName);\n-        final Class<?> clss = instance.getClass();\n-        createParentModuleParagraph((XdocSink)sink, clss, moduleName);\n+        final String s = (String)macroRequest.getParameter(\"moduleName\");\n+        createParentModuleParagraph((XdocSink)sink, SiteUtil.getModuleInstance(s).getClass(), s);\n     }\n     \n-    private static void createParentModuleParagraph(final XdocSink sink, final Class<?> clss, final String moduleName) throws MacroExecutionException {\n-        final String parentModule = SiteUtil.getParentModule((Class)clss);\n-        final String linkToParentModule = getLinkToParentModule(parentModule, moduleName);\n-        sink.setInsertNewline(false);\n-        sink.paragraph();\n-        sink.setInsertNewline(true);\n-        final String indentLevel10 = SiteUtil.getNewlineAndIndentSpaces(10);\n-        sink.rawText(indentLevel10);\n-        sink.link(linkToParentModule);\n-        sink.text(parentModule);\n-        sink.link_();\n-        final String indentLevel11 = SiteUtil.getNewlineAndIndentSpaces(8);\n-        sink.rawText(indentLevel11);\n-        sink.paragraph_();\n+    private static void createParentModuleParagraph(final XdocSink xdocSink, final Class<?> clazz, final String s) throws MacroExecutionException {\n+        final String parentModule = SiteUtil.getParentModule((Class)clazz);\n+        final String linkToParentModule = getLinkToParentModule(parentModule, s);\n+        xdocSink.setInsertNewline(false);\n+        xdocSink.paragraph();\n+        xdocSink.setInsertNewline(true);\n+        xdocSink.rawText(SiteUtil.getNewlineAndIndentSpaces(10));\n+        xdocSink.link(linkToParentModule);\n+        xdocSink.text(parentModule);\n+        xdocSink.link_();\n+        xdocSink.rawText(SiteUtil.getNewlineAndIndentSpaces(8));\n+        xdocSink.paragraph_();\n     }\n     \n-    private static String getLinkToParentModule(final String parentModule, final String moduleName) throws MacroExecutionException {\n-        final Path templatePath = SiteUtil.getTemplatePath(moduleName);\n+    private static String getLinkToParentModule(final String s, final String s2) throws MacroExecutionException {\n+        final Path templatePath = SiteUtil.getTemplatePath(s2);\n         if (templatePath == null) {\n-            throw new MacroExecutionException(String.format(Locale.ROOT, \"Could not find template for %s\", moduleName));\n+            throw new MacroExecutionException(String.format(Locale.ROOT, \"Could not find template for %s\", s2));\n         }\n-        final Path templatePathParent = templatePath.getParent();\n-        if (templatePathParent == null) {\n+        final Path parent = templatePath.getParent();\n+        if (parent == null) {\n             throw new MacroExecutionException(\"Failed to get parent path for \" + templatePath);\n         }\n-        return templatePathParent.relativize(Paths.get(\"src\", \"xdocs\", \"config.xml\")).toString().replace(\".xml\", \".html\").replace('\\\\', '/') + \"#\" + parentModule;\n+        return parent.relativize(Paths.get(\"src\", \"xdocs\", \"config.xml\")).toString().replace(\".xml\", \".html\").replace('\\\\', '/') + \"#\" + s;\n     }\n }\n"}]}
