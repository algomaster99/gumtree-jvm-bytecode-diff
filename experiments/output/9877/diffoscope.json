{"diffoscope-json-version": 1, "source1": "first/PathUtils.class", "source2": "second/PathUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -43,51 +43,29 @@\n     }\n     \n     public static Counters.PathCounters copyDirectory(final Path sourceDirectory, final Path targetDirectory, final CopyOption... copyOptions) throws IOException {\n         return ((CopyDirectoryVisitor)visitFileTree(new CopyDirectoryVisitor(Counters.longPathCounters(), sourceDirectory, targetDirectory, copyOptions), sourceDirectory)).getPathCounters();\n     }\n     \n     public static Path copyFile(final URL sourceFile, final Path targetFile, final CopyOption... copyOptions) throws IOException {\n-        final InputStream inputStream = sourceFile.openStream();\n-        Throwable x0 = null;\n-        try {\n+        try (final InputStream inputStream = sourceFile.openStream()) {\n             Files.copy(inputStream, targetFile, copyOptions);\n             return targetFile;\n         }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n-        }\n-        finally {\n-            if (inputStream != null) {\n-                $closeResource(x0, inputStream);\n-            }\n-        }\n     }\n     \n     public static Path copyFileToDirectory(final Path sourceFile, final Path targetDirectory, final CopyOption... copyOptions) throws IOException {\n         return Files.copy(sourceFile, targetDirectory.resolve(sourceFile.getFileName()), copyOptions);\n     }\n     \n     public static Path copyFileToDirectory(final URL sourceFile, final Path targetDirectory, final CopyOption... copyOptions) throws IOException {\n-        final InputStream inputStream = sourceFile.openStream();\n-        Throwable x0 = null;\n-        try {\n+        try (final InputStream inputStream = sourceFile.openStream()) {\n             Files.copy(inputStream, targetDirectory.resolve(sourceFile.getFile()), copyOptions);\n             return targetDirectory;\n         }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n-        }\n-        finally {\n-            if (inputStream != null) {\n-                $closeResource(x0, inputStream);\n-            }\n-        }\n     }\n     \n     public static Counters.PathCounters countDirectory(final Path directory) throws IOException {\n         return ((CountingPathVisitor)visitFileTree(new CountingPathVisitor(Counters.longPathCounters()), directory)).getPathCounters();\n     }\n     \n     public static Counters.PathCounters delete(final Path path) throws IOException {\n@@ -179,62 +157,32 @@\n         }\n         if (Files.size(nPath1) != Files.size(nPath2)) {\n             return false;\n         }\n         if (path1.equals(path2)) {\n             return true;\n         }\n-        final InputStream inputStream1 = Files.newInputStream(nPath1, openOptions);\n-        Throwable x0 = null;\n-        try {\n-            final InputStream inputStream2 = Files.newInputStream(nPath2, openOptions);\n-            Throwable x2 = null;\n-            try {\n-                return IOUtils.contentEquals(inputStream1, inputStream2);\n-            }\n-            catch (final Throwable t) {\n-                x2 = t;\n-                throw t;\n-            }\n-            finally {\n-                if (inputStream2 != null) {\n-                    $closeResource(x2, inputStream2);\n-                }\n-            }\n-        }\n-        catch (final Throwable t2) {\n-            x0 = t2;\n-            throw t2;\n-        }\n-        finally {\n-            if (inputStream1 != null) {\n-                $closeResource(x0, inputStream1);\n-            }\n+        try (final InputStream inputStream1 = Files.newInputStream(nPath1, openOptions);\n+             final InputStream inputStream2 = Files.newInputStream(nPath2, openOptions)) {\n+            return IOUtils.contentEquals(inputStream1, inputStream2);\n         }\n     }\n     \n     public static boolean isEmpty(final Path path) throws IOException {\n         return Files.isDirectory(path, new LinkOption[0]) ? isEmptyDirectory(path) : isEmptyFile(path);\n     }\n     \n     public static boolean isEmptyDirectory(final Path directory) throws IOException {\n-        final DirectoryStream<Path> directoryStream = Files.newDirectoryStream(directory);\n-        Throwable x0 = null;\n-        try {\n+        try (final DirectoryStream<Path> directoryStream = Files.newDirectoryStream(directory)) {\n             if (directoryStream.iterator().hasNext()) {\n-                return false;\n-            }\n-        }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n-        }\n-        finally {\n-            if (directoryStream != null) {\n-                $closeResource(x0, directoryStream);\n+                final boolean b = false;\n+                if (directoryStream != null) {\n+                    directoryStream.close();\n+                }\n+                return b;\n             }\n         }\n         return true;\n     }\n     \n     public static boolean isEmptyFile(final Path file) throws IOException {\n         return Files.size(file) <= 0L;\n@@ -269,27 +217,13 @@\n     public static <T extends FileVisitor<? super Path>> T visitFileTree(final T visitor, final URI uri) throws IOException {\n         return visitFileTree(visitor, Paths.get(uri));\n     }\n     \n     private PathUtils() {\n     }\n     \n-    private static /* synthetic */ void $closeResource(final Throwable x0, final AutoCloseable x1) {\n-        if (x0 != null) {\n-            try {\n-                x1.close();\n-            }\n-            catch (final Throwable exception) {\n-                x0.addSuppressed(exception);\n-            }\n-        }\n-        else {\n-            x1.close();\n-        }\n-    }\n-    \n     static {\n         EMPTY_FILE_VISIT_OPTION_ARRAY = new FileVisitOption[0];\n         EMPTY_LINK_OPTION_ARRAY = new LinkOption[0];\n         EMPTY_OPEN_OPTION_ARRAY = new OpenOption[0];\n     }\n }\n"}]}
