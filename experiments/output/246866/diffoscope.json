{"diffoscope-json-version": 1, "source1": "first/AbstractRootNode.class", "source2": "second/AbstractRootNode.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -21,15 +21,15 @@\n         super((TreeInfo)new GenericTreeInfo(Configuration.newConfiguration()));\n     }\n     \n     public int compareOrder(final NodeInfo nodeInfo) {\n         throw throwUnsupportedOperationException();\n     }\n     \n-    public String getAttributeValue(final NamespaceUri namespace, final String localPart) {\n+    public String getAttributeValue(final NamespaceUri namespaceUri, final String s) {\n         throw throwUnsupportedOperationException();\n     }\n     \n     public String getLocalPart() {\n         return \"ROOT\";\n     }\n     \n@@ -41,57 +41,57 @@\n         return null;\n     }\n     \n     public NodeInfo getRoot() {\n         return (NodeInfo)this;\n     }\n     \n-    public AxisIterator iterateAxis(final int axisNumber) {\n-        AxisIterator result = null;\n-        switch (axisNumber) {\n+    public AxisIterator iterateAxis(final int n) {\n+        Object o = null;\n+        switch (n) {\n             case 0:\n             case 2:\n             case 6:\n             case 7:\n             case 9:\n             case 10:\n             case 11: {\n-                result = EmptyIterator.ofNodes();\n+                o = EmptyIterator.ofNodes();\n                 break;\n             }\n             case 1:\n             case 12: {\n-                result = SingleNodeIterator.makeIterator((NodeInfo)this);\n+                o = SingleNodeIterator.makeIterator((NodeInfo)this);\n                 break;\n             }\n             case 3: {\n                 if (this.hasChildNodes()) {\n-                    result = (AxisIterator)new ArrayIterator.OfNodes((NodeInfo[])this.getChildren().toArray(AbstractRootNode.EMPTY_ABSTRACT_NODE_ARRAY));\n+                    o = new ArrayIterator.OfNodes((NodeInfo[])this.getChildren().toArray(AbstractRootNode.EMPTY_ABSTRACT_NODE_ARRAY));\n                     break;\n                 }\n-                result = EmptyIterator.ofNodes();\n+                o = EmptyIterator.ofNodes();\n                 break;\n             }\n             case 4: {\n                 if (this.hasChildNodes()) {\n-                    result = (AxisIterator)new DescendantIterator((NodeInfo)this, DescendantIterator.StartWith.CHILDREN);\n+                    o = new DescendantIterator((NodeInfo)this, DescendantIterator.StartWith.CHILDREN);\n                     break;\n                 }\n-                result = EmptyIterator.ofNodes();\n+                o = EmptyIterator.ofNodes();\n                 break;\n             }\n             case 5: {\n-                result = (AxisIterator)new DescendantIterator((NodeInfo)this, DescendantIterator.StartWith.CURRENT_NODE);\n+                o = new DescendantIterator((NodeInfo)this, DescendantIterator.StartWith.CURRENT_NODE);\n                 break;\n             }\n             default: {\n                 throw throwUnsupportedOperationException();\n             }\n         }\n-        return result;\n+        return (AxisIterator)o;\n     }\n     \n     public int getDepth() {\n         return 0;\n     }\n     \n     private static UnsupportedOperationException throwUnsupportedOperationException() {\n"}]}
