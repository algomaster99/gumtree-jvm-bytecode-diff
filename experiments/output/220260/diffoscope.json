{"diffoscope-json-version": 1, "source1": "first/MultilineDetector.class", "source2": "second/MultilineDetector.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -32,28 +32,28 @@\n             this.findMatch();\n             this.finish();\n         }\n     }\n     \n     private void findMatch() {\n         try {\n-            for (boolean foundMatch = this.matcher.find(); foundMatch; foundMatch = this.matcher.find()) {\n+            for (boolean b = this.matcher.find(); b; b = this.matcher.find()) {\n                 ++this.currentMatches;\n                 if (this.currentMatches > this.options.getMaximum()) {\n-                    final LineColumn start = this.text.lineColumn(this.matcher.start());\n+                    final LineColumn lineColumn = this.text.lineColumn(this.matcher.start());\n                     if (this.options.getMessage().isEmpty()) {\n-                        this.options.getReporter().log(start.getLine(), \"regexp.exceeded\", new Object[] { this.matcher.pattern().toString() });\n+                        this.options.getReporter().log(lineColumn.getLine(), \"regexp.exceeded\", new Object[] { this.matcher.pattern().toString() });\n                     }\n                     else {\n-                        this.options.getReporter().log(start.getLine(), this.options.getMessage(), new Object[0]);\n+                        this.options.getReporter().log(lineColumn.getLine(), this.options.getMessage(), new Object[0]);\n                     }\n                 }\n             }\n         }\n-        catch (final StackOverflowError ignored) {\n+        catch (final StackOverflowError stackOverflowError) {\n             this.options.getReporter().log(1, \"regexp.StackOverflowError\", new Object[] { this.matcher.pattern().toString() });\n         }\n     }\n     \n     private void finish() {\n         if (this.currentMatches < this.options.getMinimum()) {\n             if (this.options.getMessage().isEmpty()) {\n"}]}
