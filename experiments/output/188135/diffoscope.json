{"diffoscope-json-version": 1, "source1": "first/IOUtils.class", "source2": "second/IOUtils.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,213 +1,213 @@\n-  SHA-256 checksum da63479a910e978e4f3c338196aeb06507ed0873f50b084d621d39193c717b0c\n+  SHA-256 checksum ce56060ff5de8fc9b363f9e8623e1ee1e128a17e3aedfc44cbdb9153dc045f3b\n   Compiled from \"IOUtils.java\"\n public final class org.apache.commons.compress.utils.IOUtils\n   minor version: 0\n   major version: 53\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n-  this_class: #2                          // org/apache/commons/compress/utils/IOUtils\n-  super_class: #44                        // java/lang/Object\n+  this_class: #7                          // org/apache/commons/compress/utils/IOUtils\n+  super_class: #2                         // java/lang/Object\n   interfaces: 0, fields: 4, methods: 16, attributes: 1\n Constant pool:\n-    #1 = Methodref          #44.#123      // java/lang/Object.\"<init>\":()V\n-    #2 = Class              #124          // org/apache/commons/compress/utils/IOUtils\n-    #3 = Methodref          #2.#125       // org/apache/commons/compress/utils/IOUtils.copy:(Ljava/io/InputStream;Ljava/io/OutputStream;I)J\n-    #4 = Class              #126          // java/lang/IllegalArgumentException\n-    #5 = String             #127          // buffersize must be bigger than 0\n-    #6 = Methodref          #4.#128       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-    #7 = Methodref          #88.#129      // java/io/InputStream.read:([B)I\n-    #8 = Methodref          #130.#131     // java/io/OutputStream.write:([BII)V\n-    #9 = Methodref          #88.#132      // java/io/InputStream.skip:(J)J\n-   #10 = Fieldref           #2.#133       // org/apache/commons/compress/utils/IOUtils.SKIP_BUF:[B\n-   #11 = Long               4096l\n-   #13 = Methodref          #134.#135     // java/lang/Math.min:(JJ)J\n-   #14 = Methodref          #2.#136       // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[BII)I\n-   #15 = Methodref          #89.#137      // java/io/File.toPath:()Ljava/nio/file/Path;\n-   #16 = Class              #138          // java/nio/file/OpenOption\n-   #17 = Methodref          #139.#140     // java/nio/file/Files.newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n-   #18 = Methodref          #88.#141      // java/io/InputStream.close:()V\n-   #19 = Class              #142          // java/lang/Throwable\n-   #20 = Methodref          #19.#143      // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-   #21 = Class              #144          // java/lang/IndexOutOfBoundsException\n-   #22 = Methodref          #21.#123      // java/lang/IndexOutOfBoundsException.\"<init>\":()V\n-   #23 = Methodref          #88.#145      // java/io/InputStream.read:([BII)I\n-   #24 = Methodref          #119.#146     // java/nio/ByteBuffer.remaining:()I\n-   #25 = InterfaceMethodref #147.#148     // java/nio/channels/ReadableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n-   #26 = Class              #149          // java/io/EOFException\n-   #27 = Methodref          #26.#123      // java/io/EOFException.\"<init>\":()V\n-   #28 = Class              #150          // java/io/ByteArrayOutputStream\n-   #29 = Methodref          #28.#123      // java/io/ByteArrayOutputStream.\"<init>\":()V\n-   #30 = Methodref          #2.#151       // org/apache/commons/compress/utils/IOUtils.copy:(Ljava/io/InputStream;Ljava/io/OutputStream;)J\n-   #31 = Methodref          #28.#152      // java/io/ByteArrayOutputStream.toByteArray:()[B\n-   #32 = InterfaceMethodref #153.#141     // java/io/Closeable.close:()V\n-   #33 = Class              #154          // java/io/IOException\n-   #34 = Methodref          #139.#155     // java/nio/file/Files.copy:(Ljava/nio/file/Path;Ljava/io/OutputStream;)J\n-   #35 = Methodref          #2.#156       // org/apache/commons/compress/utils/IOUtils.copyRange:(Ljava/io/InputStream;JLjava/io/OutputStream;I)J\n-   #36 = Methodref          #2.#157       // org/apache/commons/compress/utils/IOUtils.copyRange:(Ljava/io/InputStream;JLjava/io/OutputStream;)J\n-   #37 = Methodref          #134.#158     // java/lang/Math.min:(II)I\n-   #38 = Methodref          #119.#159     // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-   #39 = Methodref          #119.#160     // java/nio/ByteBuffer.array:()[B\n-   #40 = Methodref          #28.#131      // java/io/ByteArrayOutputStream.write:([BII)V\n-   #41 = Methodref          #119.#161     // java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n-   #42 = Class              #162          // java/nio/file/LinkOption\n-   #43 = Fieldref           #2.#163       // org/apache/commons/compress/utils/IOUtils.EMPTY_LINK_OPTIONS:[Ljava/nio/file/LinkOption;\n-   #44 = Class              #164          // java/lang/Object\n-   #45 = Utf8               COPY_BUF_SIZE\n-   #46 = Utf8               I\n-   #47 = Utf8               ConstantValue\n-   #48 = Integer            8024\n-   #49 = Utf8               SKIP_BUF_SIZE\n-   #50 = Integer            4096\n-   #51 = Utf8               EMPTY_LINK_OPTIONS\n-   #52 = Utf8               [Ljava/nio/file/LinkOption;\n-   #53 = Utf8               SKIP_BUF\n-   #54 = Utf8               [B\n-   #55 = Utf8               <init>\n-   #56 = Utf8               ()V\n-   #57 = Utf8               Code\n-   #58 = Utf8               LineNumberTable\n-   #59 = Utf8               LocalVariableTable\n-   #60 = Utf8               this\n-   #61 = Utf8               Lorg/apache/commons/compress/utils/IOUtils;\n-   #62 = Utf8               copy\n-   #63 = Utf8               (Ljava/io/InputStream;Ljava/io/OutputStream;)J\n-   #64 = Utf8               input\n-   #65 = Utf8               Ljava/io/InputStream;\n-   #66 = Utf8               output\n-   #67 = Utf8               Ljava/io/OutputStream;\n-   #68 = Utf8               Exceptions\n-   #69 = Utf8               (Ljava/io/InputStream;Ljava/io/OutputStream;I)J\n-   #70 = Utf8               buffersize\n-   #71 = Utf8               buffer\n-   #72 = Utf8               n\n-   #73 = Utf8               count\n-   #74 = Utf8               J\n-   #75 = Utf8               StackMapTable\n-   #76 = Class              #54           // \"[B\"\n-   #77 = Utf8               skip\n-   #78 = Utf8               (Ljava/io/InputStream;J)J\n-   #79 = Utf8               skipped\n-   #80 = Utf8               read\n-   #81 = Utf8               numToSkip\n-   #82 = Utf8               available\n-   #83 = Utf8               (Ljava/io/File;[B)I\n-   #84 = Utf8               inputStream\n-   #85 = Utf8               file\n-   #86 = Utf8               Ljava/io/File;\n-   #87 = Utf8               array\n-   #88 = Class              #165          // java/io/InputStream\n-   #89 = Class              #166          // java/io/File\n-   #90 = Utf8               readFully\n-   #91 = Utf8               (Ljava/io/InputStream;[B)I\n-   #92 = Utf8               (Ljava/io/InputStream;[BII)I\n-   #93 = Utf8               offset\n-   #94 = Utf8               len\n-   #95 = Utf8               x\n-   #96 = Utf8               (Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n-   #97 = Utf8               readNow\n-   #98 = Utf8               channel\n-   #99 = Utf8               Ljava/nio/channels/ReadableByteChannel;\n-  #100 = Utf8               b\n-  #101 = Utf8               Ljava/nio/ByteBuffer;\n-  #102 = Utf8               expectedLength\n+    #1 = Methodref          #2.#3         // java/lang/Object.\"<init>\":()V\n+    #2 = Class              #4            // java/lang/Object\n+    #3 = NameAndType        #5:#6         // \"<init>\":()V\n+    #4 = Utf8               java/lang/Object\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ()V\n+    #7 = Class              #8            // org/apache/commons/compress/utils/IOUtils\n+    #8 = Utf8               org/apache/commons/compress/utils/IOUtils\n+    #9 = Methodref          #7.#10        // org/apache/commons/compress/utils/IOUtils.copy:(Ljava/io/InputStream;Ljava/io/OutputStream;I)J\n+   #10 = NameAndType        #11:#12       // copy:(Ljava/io/InputStream;Ljava/io/OutputStream;I)J\n+   #11 = Utf8               copy\n+   #12 = Utf8               (Ljava/io/InputStream;Ljava/io/OutputStream;I)J\n+   #13 = Class              #14           // java/lang/IllegalArgumentException\n+   #14 = Utf8               java/lang/IllegalArgumentException\n+   #15 = String             #16           // buffersize must be bigger than 0\n+   #16 = Utf8               buffersize must be bigger than 0\n+   #17 = Methodref          #13.#18       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #18 = NameAndType        #5:#19        // \"<init>\":(Ljava/lang/String;)V\n+   #19 = Utf8               (Ljava/lang/String;)V\n+   #20 = Methodref          #21.#22       // java/io/InputStream.read:([B)I\n+   #21 = Class              #23           // java/io/InputStream\n+   #22 = NameAndType        #24:#25       // read:([B)I\n+   #23 = Utf8               java/io/InputStream\n+   #24 = Utf8               read\n+   #25 = Utf8               ([B)I\n+   #26 = Methodref          #27.#28       // java/io/OutputStream.write:([BII)V\n+   #27 = Class              #29           // java/io/OutputStream\n+   #28 = NameAndType        #30:#31       // write:([BII)V\n+   #29 = Utf8               java/io/OutputStream\n+   #30 = Utf8               write\n+   #31 = Utf8               ([BII)V\n+   #32 = Methodref          #21.#33       // java/io/InputStream.skip:(J)J\n+   #33 = NameAndType        #34:#35       // skip:(J)J\n+   #34 = Utf8               skip\n+   #35 = Utf8               (J)J\n+   #36 = Fieldref           #7.#37        // org/apache/commons/compress/utils/IOUtils.SKIP_BUF:[B\n+   #37 = NameAndType        #38:#39       // SKIP_BUF:[B\n+   #38 = Utf8               SKIP_BUF\n+   #39 = Utf8               [B\n+   #40 = Long               4096l\n+   #42 = Methodref          #43.#44       // java/lang/Math.min:(JJ)J\n+   #43 = Class              #45           // java/lang/Math\n+   #44 = NameAndType        #46:#47       // min:(JJ)J\n+   #45 = Utf8               java/lang/Math\n+   #46 = Utf8               min\n+   #47 = Utf8               (JJ)J\n+   #48 = Methodref          #7.#49        // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[BII)I\n+   #49 = NameAndType        #50:#51       // readFully:(Ljava/io/InputStream;[BII)I\n+   #50 = Utf8               readFully\n+   #51 = Utf8               (Ljava/io/InputStream;[BII)I\n+   #52 = Methodref          #53.#54       // java/io/File.toPath:()Ljava/nio/file/Path;\n+   #53 = Class              #55           // java/io/File\n+   #54 = NameAndType        #56:#57       // toPath:()Ljava/nio/file/Path;\n+   #55 = Utf8               java/io/File\n+   #56 = Utf8               toPath\n+   #57 = Utf8               ()Ljava/nio/file/Path;\n+   #58 = Class              #59           // java/nio/file/OpenOption\n+   #59 = Utf8               java/nio/file/OpenOption\n+   #60 = Methodref          #61.#62       // java/nio/file/Files.newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+   #61 = Class              #63           // java/nio/file/Files\n+   #62 = NameAndType        #64:#65       // newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+   #63 = Utf8               java/nio/file/Files\n+   #64 = Utf8               newInputStream\n+   #65 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+   #66 = Methodref          #21.#67       // java/io/InputStream.close:()V\n+   #67 = NameAndType        #68:#6        // close:()V\n+   #68 = Utf8               close\n+   #69 = Class              #70           // java/lang/Throwable\n+   #70 = Utf8               java/lang/Throwable\n+   #71 = Methodref          #69.#72       // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+   #72 = NameAndType        #73:#74       // addSuppressed:(Ljava/lang/Throwable;)V\n+   #73 = Utf8               addSuppressed\n+   #74 = Utf8               (Ljava/lang/Throwable;)V\n+   #75 = Class              #76           // java/lang/IndexOutOfBoundsException\n+   #76 = Utf8               java/lang/IndexOutOfBoundsException\n+   #77 = Methodref          #75.#3        // java/lang/IndexOutOfBoundsException.\"<init>\":()V\n+   #78 = Methodref          #21.#79       // java/io/InputStream.read:([BII)I\n+   #79 = NameAndType        #24:#80       // read:([BII)I\n+   #80 = Utf8               ([BII)I\n+   #81 = Methodref          #82.#83       // java/nio/ByteBuffer.remaining:()I\n+   #82 = Class              #84           // java/nio/ByteBuffer\n+   #83 = NameAndType        #85:#86       // remaining:()I\n+   #84 = Utf8               java/nio/ByteBuffer\n+   #85 = Utf8               remaining\n+   #86 = Utf8               ()I\n+   #87 = InterfaceMethodref #88.#89       // java/nio/channels/ReadableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+   #88 = Class              #90           // java/nio/channels/ReadableByteChannel\n+   #89 = NameAndType        #24:#91       // read:(Ljava/nio/ByteBuffer;)I\n+   #90 = Utf8               java/nio/channels/ReadableByteChannel\n+   #91 = Utf8               (Ljava/nio/ByteBuffer;)I\n+   #92 = Class              #93           // java/io/EOFException\n+   #93 = Utf8               java/io/EOFException\n+   #94 = Methodref          #92.#3        // java/io/EOFException.\"<init>\":()V\n+   #95 = Class              #96           // java/io/ByteArrayOutputStream\n+   #96 = Utf8               java/io/ByteArrayOutputStream\n+   #97 = Methodref          #95.#3        // java/io/ByteArrayOutputStream.\"<init>\":()V\n+   #98 = Methodref          #7.#99        // org/apache/commons/compress/utils/IOUtils.copy:(Ljava/io/InputStream;Ljava/io/OutputStream;)J\n+   #99 = NameAndType        #11:#100      // copy:(Ljava/io/InputStream;Ljava/io/OutputStream;)J\n+  #100 = Utf8               (Ljava/io/InputStream;Ljava/io/OutputStream;)J\n+  #101 = Methodref          #95.#102      // java/io/ByteArrayOutputStream.toByteArray:()[B\n+  #102 = NameAndType        #103:#104     // toByteArray:()[B\n   #103 = Utf8               toByteArray\n-  #104 = Utf8               (Ljava/io/InputStream;)[B\n-  #105 = Utf8               Ljava/io/ByteArrayOutputStream;\n-  #106 = Utf8               closeQuietly\n-  #107 = Utf8               (Ljava/io/Closeable;)V\n-  #108 = Utf8               c\n-  #109 = Utf8               Ljava/io/Closeable;\n-  #110 = Utf8               (Ljava/io/File;Ljava/io/OutputStream;)V\n-  #111 = Utf8               sourceFile\n-  #112 = Utf8               outputStream\n-  #113 = Utf8               copyRange\n-  #114 = Utf8               (Ljava/io/InputStream;JLjava/io/OutputStream;)J\n-  #115 = Utf8               (Ljava/io/InputStream;JLjava/io/OutputStream;I)J\n-  #116 = Utf8               readRange\n-  #117 = Utf8               (Ljava/io/InputStream;I)[B\n-  #118 = Utf8               (Ljava/nio/channels/ReadableByteChannel;I)[B\n-  #119 = Class              #167          // java/nio/ByteBuffer\n-  #120 = Utf8               <clinit>\n-  #121 = Utf8               SourceFile\n-  #122 = Utf8               IOUtils.java\n-  #123 = NameAndType        #55:#56       // \"<init>\":()V\n-  #124 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #125 = NameAndType        #62:#69       // copy:(Ljava/io/InputStream;Ljava/io/OutputStream;I)J\n-  #126 = Utf8               java/lang/IllegalArgumentException\n-  #127 = Utf8               buffersize must be bigger than 0\n-  #128 = NameAndType        #55:#168      // \"<init>\":(Ljava/lang/String;)V\n-  #129 = NameAndType        #80:#169      // read:([B)I\n-  #130 = Class              #170          // java/io/OutputStream\n-  #131 = NameAndType        #171:#172     // write:([BII)V\n-  #132 = NameAndType        #77:#173      // skip:(J)J\n-  #133 = NameAndType        #53:#54       // SKIP_BUF:[B\n-  #134 = Class              #174          // java/lang/Math\n-  #135 = NameAndType        #175:#176     // min:(JJ)J\n-  #136 = NameAndType        #90:#92       // readFully:(Ljava/io/InputStream;[BII)I\n-  #137 = NameAndType        #177:#178     // toPath:()Ljava/nio/file/Path;\n-  #138 = Utf8               java/nio/file/OpenOption\n-  #139 = Class              #179          // java/nio/file/Files\n-  #140 = NameAndType        #180:#181     // newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n-  #141 = NameAndType        #182:#56      // close:()V\n-  #142 = Utf8               java/lang/Throwable\n-  #143 = NameAndType        #183:#184     // addSuppressed:(Ljava/lang/Throwable;)V\n-  #144 = Utf8               java/lang/IndexOutOfBoundsException\n-  #145 = NameAndType        #80:#185      // read:([BII)I\n-  #146 = NameAndType        #186:#187     // remaining:()I\n-  #147 = Class              #188          // java/nio/channels/ReadableByteChannel\n-  #148 = NameAndType        #80:#189      // read:(Ljava/nio/ByteBuffer;)I\n-  #149 = Utf8               java/io/EOFException\n-  #150 = Utf8               java/io/ByteArrayOutputStream\n-  #151 = NameAndType        #62:#63       // copy:(Ljava/io/InputStream;Ljava/io/OutputStream;)J\n-  #152 = NameAndType        #103:#190     // toByteArray:()[B\n-  #153 = Class              #191          // java/io/Closeable\n-  #154 = Utf8               java/io/IOException\n-  #155 = NameAndType        #62:#192      // copy:(Ljava/nio/file/Path;Ljava/io/OutputStream;)J\n-  #156 = NameAndType        #113:#115     // copyRange:(Ljava/io/InputStream;JLjava/io/OutputStream;I)J\n-  #157 = NameAndType        #113:#114     // copyRange:(Ljava/io/InputStream;JLjava/io/OutputStream;)J\n-  #158 = NameAndType        #175:#193     // min:(II)I\n-  #159 = NameAndType        #194:#195     // allocate:(I)Ljava/nio/ByteBuffer;\n-  #160 = NameAndType        #87:#190      // array:()[B\n-  #161 = NameAndType        #196:#197     // rewind:()Ljava/nio/ByteBuffer;\n-  #162 = Utf8               java/nio/file/LinkOption\n-  #163 = NameAndType        #51:#52       // EMPTY_LINK_OPTIONS:[Ljava/nio/file/LinkOption;\n-  #164 = Utf8               java/lang/Object\n-  #165 = Utf8               java/io/InputStream\n-  #166 = Utf8               java/io/File\n-  #167 = Utf8               java/nio/ByteBuffer\n-  #168 = Utf8               (Ljava/lang/String;)V\n-  #169 = Utf8               ([B)I\n-  #170 = Utf8               java/io/OutputStream\n-  #171 = Utf8               write\n-  #172 = Utf8               ([BII)V\n-  #173 = Utf8               (J)J\n-  #174 = Utf8               java/lang/Math\n-  #175 = Utf8               min\n-  #176 = Utf8               (JJ)J\n-  #177 = Utf8               toPath\n-  #178 = Utf8               ()Ljava/nio/file/Path;\n-  #179 = Utf8               java/nio/file/Files\n-  #180 = Utf8               newInputStream\n-  #181 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n-  #182 = Utf8               close\n-  #183 = Utf8               addSuppressed\n-  #184 = Utf8               (Ljava/lang/Throwable;)V\n-  #185 = Utf8               ([BII)I\n-  #186 = Utf8               remaining\n-  #187 = Utf8               ()I\n-  #188 = Utf8               java/nio/channels/ReadableByteChannel\n-  #189 = Utf8               (Ljava/nio/ByteBuffer;)I\n-  #190 = Utf8               ()[B\n-  #191 = Utf8               java/io/Closeable\n-  #192 = Utf8               (Ljava/nio/file/Path;Ljava/io/OutputStream;)J\n-  #193 = Utf8               (II)I\n-  #194 = Utf8               allocate\n-  #195 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #196 = Utf8               rewind\n-  #197 = Utf8               ()Ljava/nio/ByteBuffer;\n+  #104 = Utf8               ()[B\n+  #105 = InterfaceMethodref #106.#67      // java/io/Closeable.close:()V\n+  #106 = Class              #107          // java/io/Closeable\n+  #107 = Utf8               java/io/Closeable\n+  #108 = Class              #109          // java/io/IOException\n+  #109 = Utf8               java/io/IOException\n+  #110 = Methodref          #61.#111      // java/nio/file/Files.copy:(Ljava/nio/file/Path;Ljava/io/OutputStream;)J\n+  #111 = NameAndType        #11:#112      // copy:(Ljava/nio/file/Path;Ljava/io/OutputStream;)J\n+  #112 = Utf8               (Ljava/nio/file/Path;Ljava/io/OutputStream;)J\n+  #113 = Methodref          #7.#114       // org/apache/commons/compress/utils/IOUtils.copyRange:(Ljava/io/InputStream;JLjava/io/OutputStream;I)J\n+  #114 = NameAndType        #115:#116     // copyRange:(Ljava/io/InputStream;JLjava/io/OutputStream;I)J\n+  #115 = Utf8               copyRange\n+  #116 = Utf8               (Ljava/io/InputStream;JLjava/io/OutputStream;I)J\n+  #117 = Methodref          #7.#118       // org/apache/commons/compress/utils/IOUtils.copyRange:(Ljava/io/InputStream;JLjava/io/OutputStream;)J\n+  #118 = NameAndType        #115:#119     // copyRange:(Ljava/io/InputStream;JLjava/io/OutputStream;)J\n+  #119 = Utf8               (Ljava/io/InputStream;JLjava/io/OutputStream;)J\n+  #120 = Methodref          #43.#121      // java/lang/Math.min:(II)I\n+  #121 = NameAndType        #46:#122      // min:(II)I\n+  #122 = Utf8               (II)I\n+  #123 = Methodref          #82.#124      // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+  #124 = NameAndType        #125:#126     // allocate:(I)Ljava/nio/ByteBuffer;\n+  #125 = Utf8               allocate\n+  #126 = Utf8               (I)Ljava/nio/ByteBuffer;\n+  #127 = Methodref          #82.#128      // java/nio/ByteBuffer.array:()[B\n+  #128 = NameAndType        #129:#104     // array:()[B\n+  #129 = Utf8               array\n+  #130 = Methodref          #95.#28       // java/io/ByteArrayOutputStream.write:([BII)V\n+  #131 = Methodref          #82.#132      // java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+  #132 = NameAndType        #133:#134     // rewind:()Ljava/nio/ByteBuffer;\n+  #133 = Utf8               rewind\n+  #134 = Utf8               ()Ljava/nio/ByteBuffer;\n+  #135 = Class              #136          // java/nio/file/LinkOption\n+  #136 = Utf8               java/nio/file/LinkOption\n+  #137 = Fieldref           #7.#138       // org/apache/commons/compress/utils/IOUtils.EMPTY_LINK_OPTIONS:[Ljava/nio/file/LinkOption;\n+  #138 = NameAndType        #139:#140     // EMPTY_LINK_OPTIONS:[Ljava/nio/file/LinkOption;\n+  #139 = Utf8               EMPTY_LINK_OPTIONS\n+  #140 = Utf8               [Ljava/nio/file/LinkOption;\n+  #141 = Utf8               COPY_BUF_SIZE\n+  #142 = Utf8               I\n+  #143 = Utf8               ConstantValue\n+  #144 = Integer            8024\n+  #145 = Utf8               SKIP_BUF_SIZE\n+  #146 = Integer            4096\n+  #147 = Utf8               Code\n+  #148 = Utf8               LineNumberTable\n+  #149 = Utf8               LocalVariableTable\n+  #150 = Utf8               this\n+  #151 = Utf8               Lorg/apache/commons/compress/utils/IOUtils;\n+  #152 = Utf8               input\n+  #153 = Utf8               Ljava/io/InputStream;\n+  #154 = Utf8               output\n+  #155 = Utf8               Ljava/io/OutputStream;\n+  #156 = Utf8               Exceptions\n+  #157 = Utf8               buffersize\n+  #158 = Utf8               buffer\n+  #159 = Utf8               n\n+  #160 = Utf8               count\n+  #161 = Utf8               J\n+  #162 = Utf8               StackMapTable\n+  #163 = Class              #39           // \"[B\"\n+  #164 = Utf8               (Ljava/io/InputStream;J)J\n+  #165 = Utf8               skipped\n+  #166 = Utf8               numToSkip\n+  #167 = Utf8               available\n+  #168 = Utf8               (Ljava/io/File;[B)I\n+  #169 = Utf8               inputStream\n+  #170 = Utf8               file\n+  #171 = Utf8               Ljava/io/File;\n+  #172 = Utf8               (Ljava/io/InputStream;[B)I\n+  #173 = Utf8               offset\n+  #174 = Utf8               len\n+  #175 = Utf8               x\n+  #176 = Utf8               (Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n+  #177 = Utf8               readNow\n+  #178 = Utf8               channel\n+  #179 = Utf8               Ljava/nio/channels/ReadableByteChannel;\n+  #180 = Utf8               b\n+  #181 = Utf8               Ljava/nio/ByteBuffer;\n+  #182 = Utf8               expectedLength\n+  #183 = Utf8               (Ljava/io/InputStream;)[B\n+  #184 = Utf8               Ljava/io/ByteArrayOutputStream;\n+  #185 = Utf8               closeQuietly\n+  #186 = Utf8               (Ljava/io/Closeable;)V\n+  #187 = Utf8               c\n+  #188 = Utf8               Ljava/io/Closeable;\n+  #189 = Utf8               (Ljava/io/File;Ljava/io/OutputStream;)V\n+  #190 = Utf8               sourceFile\n+  #191 = Utf8               outputStream\n+  #192 = Utf8               readRange\n+  #193 = Utf8               (Ljava/io/InputStream;I)[B\n+  #194 = Utf8               (Ljava/nio/channels/ReadableByteChannel;I)[B\n+  #195 = Utf8               <clinit>\n+  #196 = Utf8               SourceFile\n+  #197 = Utf8               IOUtils.java\n {\n   private static final int COPY_BUF_SIZE = 8024;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 8024\n \n   private static final int SKIP_BUF_SIZE = 4096;\n@@ -242,15 +242,15 @@\n     descriptor: (Ljava/io/InputStream;Ljava/io/OutputStream;)J\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: sipush        8024\n-         5: invokestatic  #3                  // Method copy:(Ljava/io/InputStream;Ljava/io/OutputStream;I)J\n+         5: invokestatic  #9                  // Method copy:(Ljava/io/InputStream;Ljava/io/OutputStream;I)J\n          8: lreturn\n       LineNumberTable:\n         line 70: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0 input   Ljava/io/InputStream;\n             0       9     1 output   Ljava/io/OutputStream;\n@@ -261,38 +261,38 @@\n     descriptor: (Ljava/io/InputStream;Ljava/io/OutputStream;I)J\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=7, args_size=3\n          0: iload_2\n          1: iconst_1\n          2: if_icmpge     15\n-         5: new           #4                  // class java/lang/IllegalArgumentException\n+         5: new           #13                 // class java/lang/IllegalArgumentException\n          8: dup\n-         9: ldc           #5                  // String buffersize must be bigger than 0\n-        11: invokespecial #6                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+         9: ldc           #15                 // String buffersize must be bigger than 0\n+        11: invokespecial #17                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         14: athrow\n         15: iload_2\n         16: newarray       byte\n         18: astore_3\n         19: iconst_0\n         20: istore        4\n         22: lconst_0\n         23: lstore        5\n         25: iconst_m1\n         26: aload_0\n         27: aload_3\n-        28: invokevirtual #7                  // Method java/io/InputStream.read:([B)I\n+        28: invokevirtual #20                 // Method java/io/InputStream.read:([B)I\n         31: dup\n         32: istore        4\n         34: if_icmpeq     56\n         37: aload_1\n         38: aload_3\n         39: iconst_0\n         40: iload         4\n-        42: invokevirtual #8                  // Method java/io/OutputStream.write:([BII)V\n+        42: invokevirtual #26                 // Method java/io/OutputStream.write:([BII)V\n         45: lload         5\n         47: iload         4\n         49: i2l\n         50: ladd\n         51: lstore        5\n         53: goto          25\n         56: lload         5\n@@ -333,15 +333,15 @@\n          1: lstore_3\n          2: lload_1\n          3: lconst_0\n          4: lcmp\n          5: ifle          33\n          8: aload_0\n          9: lload_1\n-        10: invokevirtual #9                  // Method java/io/InputStream.skip:(J)J\n+        10: invokevirtual #32                 // Method java/io/InputStream.skip:(J)J\n         13: lstore        5\n         15: lload         5\n         17: lconst_0\n         18: lcmp\n         19: ifne          25\n         22: goto          33\n         25: lload_1\n@@ -350,21 +350,21 @@\n         29: lstore_1\n         30: goto          2\n         33: lload_1\n         34: lconst_0\n         35: lcmp\n         36: ifle          75\n         39: aload_0\n-        40: getstatic     #10                 // Field SKIP_BUF:[B\n+        40: getstatic     #36                 // Field SKIP_BUF:[B\n         43: iconst_0\n         44: lload_1\n-        45: ldc2_w        #11                 // long 4096l\n-        48: invokestatic  #13                 // Method java/lang/Math.min:(JJ)J\n+        45: ldc2_w        #40                 // long 4096l\n+        48: invokestatic  #42                 // Method java/lang/Math.min:(JJ)J\n         51: l2i\n-        52: invokestatic  #14                 // Method readFully:(Ljava/io/InputStream;[BII)I\n+        52: invokestatic  #48                 // Method readFully:(Ljava/io/InputStream;[BII)I\n         55: istore        5\n         57: iload         5\n         59: iconst_1\n         60: if_icmpge     66\n         63: goto          75\n         66: lload_1\n         67: iload         5\n@@ -419,42 +419,42 @@\n \n   public static int read(java.io.File, byte[]) throws java.io.IOException;\n     descriptor: (Ljava/io/File;[B)I\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=5, args_size=2\n          0: aload_0\n-         1: invokevirtual #15                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+         1: invokevirtual #52                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n          4: iconst_0\n-         5: anewarray     #16                 // class java/nio/file/OpenOption\n-         8: invokestatic  #17                 // Method java/nio/file/Files.newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n+         5: anewarray     #58                 // class java/nio/file/OpenOption\n+         8: invokestatic  #60                 // Method java/nio/file/Files.newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;\n         11: astore_2\n         12: aload_2\n         13: aload_1\n         14: iconst_0\n         15: aload_1\n         16: arraylength\n-        17: invokestatic  #14                 // Method readFully:(Ljava/io/InputStream;[BII)I\n+        17: invokestatic  #48                 // Method readFully:(Ljava/io/InputStream;[BII)I\n         20: istore_3\n         21: aload_2\n         22: ifnull        29\n         25: aload_2\n-        26: invokevirtual #18                 // Method java/io/InputStream.close:()V\n+        26: invokevirtual #66                 // Method java/io/InputStream.close:()V\n         29: iload_3\n         30: ireturn\n         31: astore_3\n         32: aload_2\n         33: ifnull        51\n         36: aload_2\n-        37: invokevirtual #18                 // Method java/io/InputStream.close:()V\n+        37: invokevirtual #66                 // Method java/io/InputStream.close:()V\n         40: goto          51\n         43: astore        4\n         45: aload_3\n         46: aload         4\n-        48: invokevirtual #20                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+        48: invokevirtual #71                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n         51: aload_3\n         52: athrow\n       Exception table:\n          from    to  target type\n             12    21    31   Class java/lang/Throwable\n             36    40    43   Class java/lang/Throwable\n       LineNumberTable:\n@@ -490,15 +490,15 @@\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n          3: aload_1\n          4: arraylength\n-         5: invokestatic  #14                 // Method readFully:(Ljava/io/InputStream;[BII)I\n+         5: invokestatic  #48                 // Method readFully:(Ljava/io/InputStream;[BII)I\n          8: ireturn\n       LineNumberTable:\n         line 171: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0 input   Ljava/io/InputStream;\n             0       9     1 array   [B\n@@ -520,17 +520,17 @@\n         11: aload_1\n         12: arraylength\n         13: if_icmpgt     22\n         16: iload_3\n         17: iload_2\n         18: iadd\n         19: ifge          30\n-        22: new           #21                 // class java/lang/IndexOutOfBoundsException\n+        22: new           #75                 // class java/lang/IndexOutOfBoundsException\n         25: dup\n-        26: invokespecial #22                 // Method java/lang/IndexOutOfBoundsException.\"<init>\":()V\n+        26: invokespecial #77                 // Method java/lang/IndexOutOfBoundsException.\"<init>\":()V\n         29: athrow\n         30: iconst_0\n         31: istore        4\n         33: iconst_0\n         34: istore        5\n         36: iload         4\n         38: iload_3\n@@ -539,15 +539,15 @@\n         43: aload_1\n         44: iload_2\n         45: iload         4\n         47: iadd\n         48: iload_3\n         49: iload         4\n         51: isub\n-        52: invokevirtual #23                 // Method java/io/InputStream.read:([BII)I\n+        52: invokevirtual #78                 // Method java/io/InputStream.read:([BII)I\n         55: istore        5\n         57: iload         5\n         59: iconst_m1\n         60: if_icmpne     66\n         63: goto          76\n         66: iload         4\n         68: iload         5\n@@ -587,39 +587,39 @@\n \n   public static void readFully(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer) throws java.io.IOException;\n     descriptor: (Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=5, args_size=2\n          0: aload_1\n-         1: invokevirtual #24                 // Method java/nio/ByteBuffer.remaining:()I\n+         1: invokevirtual #81                 // Method java/nio/ByteBuffer.remaining:()I\n          4: istore_2\n          5: iconst_0\n          6: istore_3\n          7: iload_3\n          8: iload_2\n          9: if_icmpge     37\n         12: aload_0\n         13: aload_1\n-        14: invokeinterface #25,  2           // InterfaceMethod java/nio/channels/ReadableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+        14: invokeinterface #87,  2           // InterfaceMethod java/nio/channels/ReadableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n         19: istore        4\n         21: iload         4\n         23: ifgt          29\n         26: goto          37\n         29: iload_3\n         30: iload         4\n         32: iadd\n         33: istore_3\n         34: goto          7\n         37: iload_3\n         38: iload_2\n         39: if_icmpge     50\n-        42: new           #26                 // class java/io/EOFException\n+        42: new           #92                 // class java/io/EOFException\n         45: dup\n-        46: invokespecial #27                 // Method java/io/EOFException.\"<init>\":()V\n+        46: invokespecial #94                 // Method java/io/EOFException.\"<init>\":()V\n         49: athrow\n         50: return\n       LineNumberTable:\n         line 221: 0\n         line 222: 5\n         line 223: 7\n         line 224: 12\n@@ -651,24 +651,24 @@\n       throws java.io.IOException\n \n   public static byte[] toByteArray(java.io.InputStream) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;)[B\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=2, args_size=1\n-         0: new           #28                 // class java/io/ByteArrayOutputStream\n+         0: new           #95                 // class java/io/ByteArrayOutputStream\n          3: dup\n-         4: invokespecial #29                 // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n+         4: invokespecial #97                 // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n          7: astore_1\n          8: aload_0\n          9: aload_1\n-        10: invokestatic  #30                 // Method copy:(Ljava/io/InputStream;Ljava/io/OutputStream;)J\n+        10: invokestatic  #98                 // Method copy:(Ljava/io/InputStream;Ljava/io/OutputStream;)J\n         13: pop2\n         14: aload_1\n-        15: invokevirtual #31                 // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n+        15: invokevirtual #101                // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n         18: areturn\n       LineNumberTable:\n         line 254: 0\n         line 255: 8\n         line 256: 14\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -681,15 +681,15 @@\n     descriptor: (Ljava/io/Closeable;)V\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=1, locals=2, args_size=1\n          0: aload_0\n          1: ifnull        14\n          4: aload_0\n-         5: invokeinterface #32,  1           // InterfaceMethod java/io/Closeable.close:()V\n+         5: invokeinterface #105,  1          // InterfaceMethod java/io/Closeable.close:()V\n         10: goto          14\n         13: astore_1\n         14: return\n       Exception table:\n          from    to  target type\n              4    10    13   Class java/io/IOException\n       LineNumberTable:\n@@ -708,17 +708,17 @@\n \n   public static void copy(java.io.File, java.io.OutputStream) throws java.io.IOException;\n     descriptor: (Ljava/io/File;Ljava/io/OutputStream;)V\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n-         1: invokevirtual #15                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+         1: invokevirtual #52                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n          4: aload_1\n-         5: invokestatic  #34                 // Method java/nio/file/Files.copy:(Ljava/nio/file/Path;Ljava/io/OutputStream;)J\n+         5: invokestatic  #110                // Method java/nio/file/Files.copy:(Ljava/nio/file/Path;Ljava/io/OutputStream;)J\n          8: pop2\n          9: return\n       LineNumberTable:\n         line 281: 0\n         line 282: 9\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -732,15 +732,15 @@\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=5, locals=4, args_size=3\n          0: aload_0\n          1: lload_1\n          2: aload_3\n          3: sipush        8024\n-         6: invokestatic  #35                 // Method copyRange:(Ljava/io/InputStream;JLjava/io/OutputStream;I)J\n+         6: invokestatic  #113                // Method copyRange:(Ljava/io/InputStream;JLjava/io/OutputStream;I)J\n          9: lreturn\n       LineNumberTable:\n         line 301: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0 input   Ljava/io/InputStream;\n             0      10     1   len   J\n@@ -752,23 +752,23 @@\n     descriptor: (Ljava/io/InputStream;JLjava/io/OutputStream;I)J\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=8, locals=9, args_size=4\n          0: iload         4\n          2: iconst_1\n          3: if_icmpge     16\n-         6: new           #4                  // class java/lang/IllegalArgumentException\n+         6: new           #13                 // class java/lang/IllegalArgumentException\n          9: dup\n-        10: ldc           #5                  // String buffersize must be bigger than 0\n-        12: invokespecial #6                  // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        10: ldc           #15                 // String buffersize must be bigger than 0\n+        12: invokespecial #17                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         15: athrow\n         16: iload         4\n         18: i2l\n         19: lload_1\n-        20: invokestatic  #13                 // Method java/lang/Math.min:(JJ)J\n+        20: invokestatic  #42                 // Method java/lang/Math.min:(JJ)J\n         23: l2i\n         24: newarray       byte\n         26: astore        5\n         28: iconst_0\n         29: istore        6\n         31: lconst_0\n         32: lstore        7\n@@ -782,25 +782,25 @@\n         45: iconst_0\n         46: lload_1\n         47: lload         7\n         49: lsub\n         50: aload         5\n         52: arraylength\n         53: i2l\n-        54: invokestatic  #13                 // Method java/lang/Math.min:(JJ)J\n+        54: invokestatic  #42                 // Method java/lang/Math.min:(JJ)J\n         57: l2i\n-        58: invokevirtual #23                 // Method java/io/InputStream.read:([BII)I\n+        58: invokevirtual #78                 // Method java/io/InputStream.read:([BII)I\n         61: dup\n         62: istore        6\n         64: if_icmpeq     87\n         67: aload_3\n         68: aload         5\n         70: iconst_0\n         71: iload         6\n-        73: invokevirtual #8                  // Method java/io/OutputStream.write:([BII)V\n+        73: invokevirtual #26                 // Method java/io/OutputStream.write:([BII)V\n         76: lload         7\n         78: iload         6\n         80: i2l\n         81: ladd\n         82: lstore        7\n         84: goto          34\n         87: lload         7\n@@ -834,26 +834,26 @@\n       throws java.io.IOException\n \n   public static byte[] readRange(java.io.InputStream, int) throws java.io.IOException;\n     descriptor: (Ljava/io/InputStream;I)[B\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=3, args_size=2\n-         0: new           #28                 // class java/io/ByteArrayOutputStream\n+         0: new           #95                 // class java/io/ByteArrayOutputStream\n          3: dup\n-         4: invokespecial #29                 // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n+         4: invokespecial #97                 // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n          7: astore_2\n          8: aload_0\n          9: iload_1\n         10: i2l\n         11: aload_2\n-        12: invokestatic  #36                 // Method copyRange:(Ljava/io/InputStream;JLjava/io/OutputStream;)J\n+        12: invokestatic  #117                // Method copyRange:(Ljava/io/InputStream;JLjava/io/OutputStream;)J\n         15: pop2\n         16: aload_2\n-        17: invokevirtual #31                 // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n+        17: invokevirtual #101                // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n         20: areturn\n       LineNumberTable:\n         line 349: 0\n         line 350: 8\n         line 351: 16\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -864,51 +864,51 @@\n       throws java.io.IOException\n \n   public static byte[] readRange(java.nio.channels.ReadableByteChannel, int) throws java.io.IOException;\n     descriptor: (Ljava/nio/channels/ReadableByteChannel;I)[B\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=6, args_size=2\n-         0: new           #28                 // class java/io/ByteArrayOutputStream\n+         0: new           #95                 // class java/io/ByteArrayOutputStream\n          3: dup\n-         4: invokespecial #29                 // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n+         4: invokespecial #97                 // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n          7: astore_2\n          8: iload_1\n          9: sipush        8024\n-        12: invokestatic  #37                 // Method java/lang/Math.min:(II)I\n-        15: invokestatic  #38                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+        12: invokestatic  #120                // Method java/lang/Math.min:(II)I\n+        15: invokestatic  #123                // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n         18: astore_3\n         19: iconst_0\n         20: istore        4\n         22: iload         4\n         24: iload_1\n         25: if_icmpge     71\n         28: aload_0\n         29: aload_3\n-        30: invokeinterface #25,  2           // InterfaceMethod java/nio/channels/ReadableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+        30: invokeinterface #87,  2           // InterfaceMethod java/nio/channels/ReadableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n         35: istore        5\n         37: iload         5\n         39: ifgt          45\n         42: goto          71\n         45: aload_2\n         46: aload_3\n-        47: invokevirtual #39                 // Method java/nio/ByteBuffer.array:()[B\n+        47: invokevirtual #127                // Method java/nio/ByteBuffer.array:()[B\n         50: iconst_0\n         51: iload         5\n-        53: invokevirtual #40                 // Method java/io/ByteArrayOutputStream.write:([BII)V\n+        53: invokevirtual #130                // Method java/io/ByteArrayOutputStream.write:([BII)V\n         56: aload_3\n-        57: invokevirtual #41                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n+        57: invokevirtual #131                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/ByteBuffer;\n         60: pop\n         61: iload         4\n         63: iload         5\n         65: iadd\n         66: istore        4\n         68: goto          22\n         71: aload_2\n-        72: invokevirtual #31                 // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n+        72: invokevirtual #101                // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n         75: areturn\n       LineNumberTable:\n         line 366: 0\n         line 367: 8\n         line 368: 19\n         line 369: 22\n         line 370: 28\n@@ -941,18 +941,18 @@\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=1, locals=0, args_size=0\n          0: iconst_0\n-         1: anewarray     #42                 // class java/nio/file/LinkOption\n-         4: putstatic     #43                 // Field EMPTY_LINK_OPTIONS:[Ljava/nio/file/LinkOption;\n+         1: anewarray     #135                // class java/nio/file/LinkOption\n+         4: putstatic     #137                // Field EMPTY_LINK_OPTIONS:[Ljava/nio/file/LinkOption;\n          7: sipush        4096\n         10: newarray       byte\n-        12: putstatic     #10                 // Field SKIP_BUF:[B\n+        12: putstatic     #36                 // Field SKIP_BUF:[B\n         15: return\n       LineNumberTable:\n         line 47: 0\n         line 51: 7\n }\n SourceFile: \"IOUtils.java\"\n"}]}
