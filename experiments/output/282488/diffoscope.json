{"diffoscope-json-version": 1, "source1": "first/UnsynchronizedByteArrayInputStream.class", "source2": "second/UnsynchronizedByteArrayInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,104 +8,104 @@\n {\n     public static final int END_OF_STREAM = -1;\n     private final byte[] data;\n     private final int eod;\n     private int offset;\n     private int markedOffset;\n     \n-    public UnsynchronizedByteArrayInputStream(final byte[] data) {\n-        Objects.requireNonNull(data);\n-        this.data = data;\n+    public UnsynchronizedByteArrayInputStream(final byte[] array) {\n+        Objects.requireNonNull(array);\n+        this.data = array;\n         this.offset = 0;\n-        this.eod = data.length;\n+        this.eod = array.length;\n         this.markedOffset = this.offset;\n     }\n     \n-    public UnsynchronizedByteArrayInputStream(final byte[] data, final int offset) {\n-        Objects.requireNonNull(data);\n-        if (offset < 0) {\n+    public UnsynchronizedByteArrayInputStream(final byte[] array, final int a) {\n+        Objects.requireNonNull(array);\n+        if (a < 0) {\n             throw new IllegalArgumentException(\"offset cannot be negative\");\n         }\n-        this.data = data;\n-        this.offset = Math.min(offset, (data.length > 0) ? data.length : offset);\n-        this.eod = data.length;\n+        this.data = array;\n+        this.offset = Math.min(a, (array.length > 0) ? array.length : a);\n+        this.eod = array.length;\n         this.markedOffset = this.offset;\n     }\n     \n-    public UnsynchronizedByteArrayInputStream(final byte[] data, final int offset, final int length) {\n-        Objects.requireNonNull(data);\n-        if (offset < 0) {\n+    public UnsynchronizedByteArrayInputStream(final byte[] array, final int a, final int n) {\n+        Objects.requireNonNull(array);\n+        if (a < 0) {\n             throw new IllegalArgumentException(\"offset cannot be negative\");\n         }\n-        if (length < 0) {\n+        if (n < 0) {\n             throw new IllegalArgumentException(\"length cannot be negative\");\n         }\n-        this.data = data;\n-        this.offset = Math.min(offset, (data.length > 0) ? data.length : offset);\n-        this.eod = Math.min(this.offset + length, data.length);\n+        this.data = array;\n+        this.offset = Math.min(a, (array.length > 0) ? array.length : a);\n+        this.eod = Math.min(this.offset + n, array.length);\n         this.markedOffset = this.offset;\n     }\n     \n     @Override\n     public int available() {\n         return (this.offset < this.eod) ? (this.eod - this.offset) : 0;\n     }\n     \n     @Override\n     public int read() {\n         return (this.offset < this.eod) ? (this.data[this.offset++] & 0xFF) : -1;\n     }\n     \n     @Override\n-    public int read(final byte[] b) {\n-        Objects.requireNonNull(b);\n-        return this.read(b, 0, b.length);\n+    public int read(final byte[] obj) {\n+        Objects.requireNonNull(obj);\n+        return this.read(obj, 0, obj.length);\n     }\n     \n     @Override\n-    public int read(final byte[] b, final int off, final int len) {\n-        Objects.requireNonNull(b);\n-        if (off < 0 || len < 0 || off + len > b.length) {\n+    public int read(final byte[] obj, final int n, final int n2) {\n+        Objects.requireNonNull(obj);\n+        if (n < 0 || n2 < 0 || n + n2 > obj.length) {\n             throw new IndexOutOfBoundsException();\n         }\n         if (this.offset >= this.eod) {\n             return -1;\n         }\n-        int actualLen = this.eod - this.offset;\n-        if (len < actualLen) {\n-            actualLen = len;\n+        int n3 = this.eod - this.offset;\n+        if (n2 < n3) {\n+            n3 = n2;\n         }\n-        if (actualLen <= 0) {\n+        if (n3 <= 0) {\n             return 0;\n         }\n-        System.arraycopy(this.data, this.offset, b, off, actualLen);\n-        this.offset += actualLen;\n-        return actualLen;\n+        System.arraycopy(this.data, this.offset, obj, n, n3);\n+        this.offset += n3;\n+        return n3;\n     }\n     \n     @Override\n     public long skip(final long n) {\n         if (n < 0L) {\n             throw new IllegalArgumentException(\"Skipping backward is not supported\");\n         }\n-        long actualSkip = (long)(this.eod - this.offset);\n-        if (n < actualSkip) {\n-            actualSkip = n;\n+        long n2 = (long)(this.eod - this.offset);\n+        if (n < n2) {\n+            n2 = n;\n         }\n-        this.offset += actualSkip;\n-        return actualSkip;\n+        this.offset += n2;\n+        return n2;\n     }\n     \n     @Override\n     public boolean markSupported() {\n         return true;\n     }\n     \n     @Override\n-    public void mark(final int readlimit) {\n+    public void mark(final int n) {\n         this.markedOffset = this.offset;\n     }\n     \n     @Override\n     public void reset() {\n         this.offset = this.markedOffset;\n     }\n"}]}
