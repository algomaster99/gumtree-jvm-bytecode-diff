{"diffoscope-json-version": 1, "source1": "first/TarFile.class", "source2": "second/TarFile.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,546 +1,546 @@\n-  SHA-256 checksum 4545ea81d5a03ab6912349c116d66c11bfb98736e24bd682c7a58ab22987fc84\n+  SHA-256 checksum d7a1799d7cc1be770c1e9a494826b89bc8e81daa05e5a5f6555b0bb60a2eaa3f\n   Compiled from \"TarFile.java\"\n public class org.apache.commons.compress.archivers.tar.TarFile implements java.io.Closeable\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #14                         // org/apache/commons/compress/archivers/tar/TarFile\n-  super_class: #146                       // java/lang/Object\n+  this_class: #2                          // org/apache/commons/compress/archivers/tar/TarFile\n+  super_class: #45                        // java/lang/Object\n   interfaces: 1, fields: 14, methods: 34, attributes: 2\n Constant pool:\n-    #1 = Fieldref           #14.#292      // org/apache/commons/compress/archivers/tar/TarFile.sparseInputStreams:Ljava/util/Map;\n-    #2 = Class              #293          // org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n-    #3 = Methodref          #2.#294       // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n-    #4 = Methodref          #14.#295      // org/apache/commons/compress/archivers/tar/TarFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;)V\n-    #5 = Class              #296          // org/apache/commons/compress/archivers/tar/TarConstants\n-    #6 = Methodref          #14.#297      // org/apache/commons/compress/archivers/tar/TarFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n-    #7 = Methodref          #298.#299     // java/io/File.toPath:()Ljava/nio/file/Path;\n-    #8 = Methodref          #14.#300      // org/apache/commons/compress/archivers/tar/TarFile.\"<init>\":(Ljava/nio/file/Path;)V\n-    #9 = Methodref          #14.#301      // org/apache/commons/compress/archivers/tar/TarFile.\"<init>\":(Ljava/nio/file/Path;Z)V\n-   #10 = Methodref          #14.#302      // org/apache/commons/compress/archivers/tar/TarFile.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n-   #11 = Class              #303          // java/nio/file/OpenOption\n-   #12 = Methodref          #304.#305     // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-   #13 = Methodref          #146.#306     // java/lang/Object.\"<init>\":()V\n-   #14 = Class              #307          // org/apache/commons/compress/archivers/tar/TarFile\n-   #15 = Fieldref           #14.#308      // org/apache/commons/compress/archivers/tar/TarFile.smallBuf:[B\n-   #16 = Class              #309          // java/util/LinkedList\n-   #17 = Methodref          #16.#306      // java/util/LinkedList.\"<init>\":()V\n-   #18 = Fieldref           #14.#310      // org/apache/commons/compress/archivers/tar/TarFile.entries:Ljava/util/LinkedList;\n-   #19 = Class              #311          // java/util/ArrayList\n-   #20 = Methodref          #19.#306      // java/util/ArrayList.\"<init>\":()V\n-   #21 = Fieldref           #14.#312      // org/apache/commons/compress/archivers/tar/TarFile.globalSparseHeaders:Ljava/util/List;\n-   #22 = Class              #313          // java/util/HashMap\n-   #23 = Methodref          #22.#306      // java/util/HashMap.\"<init>\":()V\n-   #24 = Fieldref           #14.#314      // org/apache/commons/compress/archivers/tar/TarFile.globalPaxHeaders:Ljava/util/Map;\n-   #25 = Fieldref           #14.#315      // org/apache/commons/compress/archivers/tar/TarFile.archive:Ljava/nio/channels/SeekableByteChannel;\n-   #26 = Methodref          #316.#317     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #27 = Fieldref           #14.#318      // org/apache/commons/compress/archivers/tar/TarFile.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #28 = Fieldref           #14.#319      // org/apache/commons/compress/archivers/tar/TarFile.recordSize:I\n-   #29 = Methodref          #257.#320     // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-   #30 = Fieldref           #14.#321      // org/apache/commons/compress/archivers/tar/TarFile.recordBuffer:Ljava/nio/ByteBuffer;\n-   #31 = Fieldref           #14.#322      // org/apache/commons/compress/archivers/tar/TarFile.blockSize:I\n-   #32 = Fieldref           #14.#323      // org/apache/commons/compress/archivers/tar/TarFile.lenient:Z\n-   #33 = Methodref          #14.#324      // org/apache/commons/compress/archivers/tar/TarFile.getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-   #34 = Methodref          #16.#325      // java/util/LinkedList.add:(Ljava/lang/Object;)Z\n-   #35 = Fieldref           #14.#326      // org/apache/commons/compress/archivers/tar/TarFile.currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-   #36 = Methodref          #84.#327      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.updateEntryFromPaxHeaders:(Ljava/util/Map;)V\n-   #37 = Methodref          #84.#328      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSparseHeaders:(Ljava/util/List;)V\n-   #38 = Methodref          #84.#329      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getOrderedSparseHeaders:()Ljava/util/List;\n-   #39 = Class              #330          // org/apache/commons/compress/archivers/tar/TarArchiveSparseZeroInputStream\n-   #40 = Methodref          #39.#306      // org/apache/commons/compress/archivers/tar/TarArchiveSparseZeroInputStream.\"<init>\":()V\n-   #41 = InterfaceMethodref #227.#331     // java/util/List.iterator:()Ljava/util/Iterator;\n-   #42 = InterfaceMethodref #229.#332     // java/util/Iterator.hasNext:()Z\n-   #43 = InterfaceMethodref #229.#333     // java/util/Iterator.next:()Ljava/lang/Object;\n-   #44 = Class              #334          // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-   #45 = Methodref          #44.#335      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n-   #46 = Class              #336          // java/io/IOException\n-   #47 = String             #337          // Corrupted struct sparse detected\n-   #48 = Methodref          #46.#338      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #49 = Class              #339          // org/apache/commons/compress/utils/BoundedInputStream\n-   #50 = Methodref          #49.#340      // org/apache/commons/compress/utils/BoundedInputStream.\"<init>\":(Ljava/io/InputStream;J)V\n-   #51 = InterfaceMethodref #227.#325     // java/util/List.add:(Ljava/lang/Object;)Z\n-   #52 = Methodref          #44.#341      // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n-   #53 = Methodref          #84.#342      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n-   #54 = String             #343          // Unreadable TAR archive, sparse block offset or length too big\n-   #55 = Class              #344          // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n-   #56 = Methodref          #55.#345      // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream.\"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n-   #57 = Methodref          #84.#346      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getName:()Ljava/lang/String;\n-   #58 = InterfaceMethodref #267.#347     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #59 = InterfaceMethodref #207.#348     // java/nio/channels/SeekableByteChannel.close:()V\n-   #60 = InterfaceMethodref #207.#349     // java/nio/channels/SeekableByteChannel.position:()J\n-   #61 = Methodref          #14.#350      // org/apache/commons/compress/archivers/tar/TarFile.repositionForwardBy:(J)V\n-   #62 = Methodref          #19.#351      // java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n-   #63 = Class              #352          // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n-   #64 = Methodref          #63.#353      // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/tar/TarFile;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/nio/channels/SeekableByteChannel;)V\n-   #65 = Class              #354          // java/lang/RuntimeException\n-   #66 = String             #355          // Corrupted TAR archive. Can\\'t read entry\n-   #67 = Methodref          #46.#356      // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #68 = Class              #357          // java/io/ByteArrayOutputStream\n-   #69 = Methodref          #68.#306      // java/io/ByteArrayOutputStream.\"<init>\":()V\n-   #70 = Methodref          #14.#358      // org/apache/commons/compress/archivers/tar/TarFile.getInputStream:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n-   #71 = Methodref          #228.#359     // java/io/InputStream.read:([B)I\n-   #72 = Methodref          #68.#360      // java/io/ByteArrayOutputStream.write:([BII)V\n-   #73 = Methodref          #228.#348     // java/io/InputStream.close:()V\n-   #74 = Class              #361          // java/lang/Throwable\n-   #75 = Methodref          #74.#362      // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-   #76 = Methodref          #68.#363      // java/io/ByteArrayOutputStream.toByteArray:()[B\n-   #77 = Methodref          #364.#365     // java/util/Arrays.copyOf:([BI)[B\n-   #78 = Methodref          #14.#366      // org/apache/commons/compress/archivers/tar/TarFile.isAtEOF:()Z\n-   #79 = Methodref          #84.#367      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n-   #80 = Methodref          #14.#368      // org/apache/commons/compress/archivers/tar/TarFile.repositionForwardTo:(J)V\n-   #81 = Methodref          #14.#369      // org/apache/commons/compress/archivers/tar/TarFile.throwExceptionIfPositionIsNotInArchive:()V\n-   #82 = Methodref          #14.#370      // org/apache/commons/compress/archivers/tar/TarFile.skipRecordPadding:()V\n-   #83 = Methodref          #14.#371      // org/apache/commons/compress/archivers/tar/TarFile.getRecord:()Ljava/nio/ByteBuffer;\n-   #84 = Class              #372          // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-   #85 = Methodref          #257.#373     // java/nio/ByteBuffer.array:()[B\n-   #86 = Methodref          #84.#374      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZJ)V\n-   #87 = Class              #375          // java/lang/IllegalArgumentException\n-   #88 = String             #376          // Error detected parsing the header\n-   #89 = Methodref          #84.#377      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongLinkEntry:()Z\n-   #90 = Methodref          #14.#378      // org/apache/commons/compress/archivers/tar/TarFile.getLongNameData:()[B\n-   #91 = InterfaceMethodref #379.#380     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-   #92 = Methodref          #84.#381      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setLinkName:(Ljava/lang/String;)V\n-   #93 = Methodref          #84.#382      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongNameEntry:()Z\n-   #94 = Methodref          #84.#383      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setName:(Ljava/lang/String;)V\n-   #95 = Methodref          #84.#384      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n-   #96 = String             #385          // /\n-   #97 = Methodref          #124.#386     // java/lang/String.endsWith:(Ljava/lang/String;)Z\n-   #98 = Class              #387          // java/lang/StringBuilder\n-   #99 = Methodref          #98.#306      // java/lang/StringBuilder.\"<init>\":()V\n-  #100 = Methodref          #98.#388      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #101 = Methodref          #98.#389      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-  #102 = Methodref          #84.#390      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGlobalPaxHeader:()Z\n-  #103 = Methodref          #14.#391      // org/apache/commons/compress/archivers/tar/TarFile.readGlobalPaxHeaders:()V\n-  #104 = Methodref          #84.#392      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxHeader:()Z\n-  #105 = Methodref          #14.#393      // org/apache/commons/compress/archivers/tar/TarFile.paxHeaders:()V\n-  #106 = InterfaceMethodref #267.#394     // java/util/Map.isEmpty:()Z\n-  #107 = Methodref          #14.#395      // org/apache/commons/compress/archivers/tar/TarFile.applyPaxHeadersToCurrentEntry:(Ljava/util/Map;Ljava/util/List;)V\n-  #108 = Class              #396          // java/lang/NumberFormatException\n-  #109 = String             #397          // Error detected parsing the pax header\n-  #110 = Methodref          #84.#398      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isOldGNUSparse:()Z\n-  #111 = Methodref          #14.#399      // org/apache/commons/compress/archivers/tar/TarFile.readOldGNUSparse:()V\n-  #112 = Methodref          #14.#400      // org/apache/commons/compress/archivers/tar/TarFile.readRecord:()Ljava/nio/ByteBuffer;\n-  #113 = Methodref          #14.#401      // org/apache/commons/compress/archivers/tar/TarFile.isEOFRecord:(Ljava/nio/ByteBuffer;)Z\n-  #114 = Methodref          #14.#402      // org/apache/commons/compress/archivers/tar/TarFile.setAtEOF:(Z)V\n-  #115 = Methodref          #14.#403      // org/apache/commons/compress/archivers/tar/TarFile.tryToConsumeSecondEOFRecord:()V\n-  #116 = Methodref          #14.#404      // org/apache/commons/compress/archivers/tar/TarFile.consumeRemainderOfLastBlock:()V\n-  #117 = Fieldref           #14.#405      // org/apache/commons/compress/archivers/tar/TarFile.hasHitEOF:Z\n-  #118 = Methodref          #406.#407     // org/apache/commons/compress/utils/ArchiveUtils.isArrayZero:([BI)Z\n-  #119 = Methodref          #408.#409     // org/apache/commons/compress/archivers/tar/TarUtils.parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n-  #120 = Class              #410          // org/apache/commons/compress/archivers/tar/TarGnuSparseKeys\n-  #121 = String             #411          // GNU.sparse.map\n-  #122 = InterfaceMethodref #267.#412     // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n-  #123 = InterfaceMethodref #267.#413     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #124 = Class              #414          // java/lang/String\n-  #125 = Methodref          #408.#415     // org/apache/commons/compress/archivers/tar/TarUtils.parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n-  #126 = String             #416          // premature end of tar archive. Didn\\'t find any entry after PAX header.\n-  #127 = Methodref          #84.#417      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxGNU1XSparse:()Z\n-  #128 = Methodref          #408.#418     // org/apache/commons/compress/archivers/tar/TarUtils.parsePAX1XSparseHeaders:(Ljava/io/InputStream;I)Ljava/util/List;\n-  #129 = Methodref          #84.#419      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setDataOffset:(J)V\n-  #130 = Methodref          #14.#420      // org/apache/commons/compress/archivers/tar/TarFile.buildSparseInputStreams:()V\n-  #131 = Methodref          #84.#421      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isExtended:()Z\n-  #132 = String             #422          // premature end of tar archive. Didn\\'t find extended_header after header with extended flag.\n-  #133 = Class              #423          // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry\n-  #134 = Methodref          #133.#294     // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.\"<init>\":([B)V\n-  #135 = Methodref          #84.#424      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSparseHeaders:()Ljava/util/List;\n-  #136 = Methodref          #133.#424     // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.getSparseHeaders:()Ljava/util/List;\n-  #137 = InterfaceMethodref #227.#425     // java/util/List.addAll:(Ljava/util/Collection;)Z\n-  #138 = Methodref          #133.#421     // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.isExtended:()Z\n-  #139 = Methodref          #257.#426     // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n-  #140 = InterfaceMethodref #207.#427     // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n-  #141 = String             #428          // trying to move backwards inside of the archive\n-  #142 = InterfaceMethodref #207.#429     // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n-  #143 = Methodref          #14.#384      // org/apache/commons/compress/archivers/tar/TarFile.isDirectory:()Z\n-  #144 = InterfaceMethodref #207.#430     // java/nio/channels/SeekableByteChannel.size:()J\n-  #145 = String             #431          // Truncated TAR archive\n-  #146 = Class              #432          // java/lang/Object\n-  #147 = Class              #433          // java/io/Closeable\n-  #148 = Utf8               BoundedTarEntryInputStream\n-  #149 = Utf8               InnerClasses\n-  #150 = Utf8               SMALL_BUFFER_SIZE\n-  #151 = Utf8               I\n-  #152 = Utf8               ConstantValue\n-  #153 = Integer            256\n-  #154 = Utf8               smallBuf\n-  #155 = Utf8               [B\n-  #156 = Utf8               archive\n-  #157 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n-  #158 = Utf8               zipEncoding\n-  #159 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #160 = Utf8               entries\n-  #161 = Utf8               Ljava/util/LinkedList;\n-  #162 = Utf8               Signature\n-  #163 = Utf8               Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;>;\n-  #164 = Utf8               blockSize\n-  #165 = Utf8               lenient\n-  #166 = Utf8               Z\n-  #167 = Utf8               recordSize\n-  #168 = Utf8               recordBuffer\n-  #169 = Utf8               Ljava/nio/ByteBuffer;\n-  #170 = Utf8               globalSparseHeaders\n-  #171 = Utf8               Ljava/util/List;\n-  #172 = Utf8               Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-  #173 = Utf8               hasHitEOF\n-  #174 = Utf8               currEntry\n-  #175 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-  #176 = Utf8               globalPaxHeaders\n-  #177 = Utf8               Ljava/util/Map;\n-  #178 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n-  #179 = Utf8               sparseInputStreams\n-  #180 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Ljava/io/InputStream;>;>;\n-  #181 = Utf8               <init>\n-  #182 = Utf8               ([B)V\n-  #183 = Utf8               Code\n-  #184 = Utf8               LineNumberTable\n-  #185 = Utf8               LocalVariableTable\n-  #186 = Utf8               this\n-  #187 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarFile;\n-  #188 = Utf8               content\n-  #189 = Utf8               Exceptions\n-  #190 = Utf8               ([BZ)V\n-  #191 = Utf8               ([BLjava/lang/String;)V\n-  #192 = Utf8               encoding\n-  #193 = Utf8               Ljava/lang/String;\n-  #194 = Utf8               (Ljava/io/File;)V\n-  #195 = Utf8               Ljava/io/File;\n-  #196 = Utf8               (Ljava/io/File;Z)V\n-  #197 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n-  #198 = Utf8               (Ljava/nio/file/Path;)V\n-  #199 = Utf8               archivePath\n-  #200 = Utf8               Ljava/nio/file/Path;\n-  #201 = Utf8               (Ljava/nio/file/Path;Z)V\n-  #202 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;)V\n-  #203 = Utf8               (Ljava/nio/channels/SeekableByteChannel;)V\n-  #204 = Utf8               (Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n-  #205 = Utf8               entry\n-  #206 = Utf8               StackMapTable\n-  #207 = Class              #434          // java/nio/channels/SeekableByteChannel\n-  #208 = Utf8               applyPaxHeadersToCurrentEntry\n-  #209 = Utf8               (Ljava/util/Map;Ljava/util/List;)V\n-  #210 = Utf8               headers\n-  #211 = Utf8               sparseHeaders\n-  #212 = Utf8               LocalVariableTypeTable\n-  #213 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;)V\n-  #214 = Utf8               buildSparseInputStreams\n-  #215 = Utf8               ()V\n-  #216 = Utf8               start\n-  #217 = Utf8               J\n-  #218 = Utf8               zeroBlockSize\n-  #219 = Utf8               sparseHeader\n-  #220 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n-  #221 = Utf8               streams\n-  #222 = Utf8               zeroInputStream\n-  #223 = Utf8               Ljava/io/InputStream;\n-  #224 = Utf8               offset\n-  #225 = Utf8               numberOfZeroBytesInSparseEntry\n-  #226 = Utf8               Ljava/util/List<Ljava/io/InputStream;>;\n-  #227 = Class              #435          // java/util/List\n-  #228 = Class              #436          // java/io/InputStream\n-  #229 = Class              #437          // java/util/Iterator\n-  #230 = Utf8               close\n-  #231 = Utf8               consumeRemainderOfLastBlock\n-  #232 = Utf8               bytesReadOfLastBlock\n-  #233 = Utf8               getEntries\n-  #234 = Utf8               ()Ljava/util/List;\n-  #235 = Utf8               ()Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;>;\n-  #236 = Utf8               getInputStream\n-  #237 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n-  #238 = Utf8               ex\n-  #239 = Utf8               Ljava/lang/RuntimeException;\n-  #240 = Utf8               getLongNameData\n-  #241 = Utf8               ()[B\n-  #242 = Utf8               length\n-  #243 = Utf8               in\n-  #244 = Utf8               longName\n-  #245 = Utf8               Ljava/io/ByteArrayOutputStream;\n-  #246 = Utf8               longNameData\n-  #247 = Class              #155          // \"[B\"\n-  #248 = Utf8               getNextTarEntry\n-  #249 = Utf8               ()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-  #250 = Utf8               position\n-  #251 = Utf8               e\n-  #252 = Utf8               Ljava/lang/IllegalArgumentException;\n-  #253 = Utf8               longLinkData\n-  #254 = Utf8               name\n-  #255 = Utf8               Ljava/lang/NumberFormatException;\n-  #256 = Utf8               headerBuf\n-  #257 = Class              #438          // java/nio/ByteBuffer\n-  #258 = Utf8               getRecord\n-  #259 = Utf8               ()Ljava/nio/ByteBuffer;\n-  #260 = Utf8               isAtEOF\n-  #261 = Utf8               ()Z\n-  #262 = Utf8               isDirectory\n-  #263 = Utf8               isEOFRecord\n-  #264 = Utf8               (Ljava/nio/ByteBuffer;)Z\n-  #265 = Utf8               paxHeaders\n-  #266 = Utf8               input\n-  #267 = Class              #439          // java/util/Map\n-  #268 = Utf8               readGlobalPaxHeaders\n-  #269 = Utf8               readOldGNUSparse\n-  #270 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveSparseEntry;\n-  #271 = Utf8               readRecord\n-  #272 = Utf8               readNow\n-  #273 = Utf8               repositionForwardBy\n-  #274 = Utf8               (J)V\n-  #275 = Utf8               repositionForwardTo\n-  #276 = Utf8               newPosition\n-  #277 = Utf8               currPosition\n-  #278 = Utf8               setAtEOF\n-  #279 = Utf8               (Z)V\n-  #280 = Utf8               b\n-  #281 = Utf8               skipRecordPadding\n-  #282 = Utf8               numRecords\n-  #283 = Utf8               padding\n-  #284 = Utf8               throwExceptionIfPositionIsNotInArchive\n-  #285 = Utf8               tryToConsumeSecondEOFRecord\n-  #286 = Utf8               shouldReset\n-  #287 = Utf8               access$000\n-  #288 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarFile;)Ljava/util/Map;\n-  #289 = Utf8               x0\n-  #290 = Utf8               SourceFile\n-  #291 = Utf8               TarFile.java\n-  #292 = NameAndType        #179:#177     // sparseInputStreams:Ljava/util/Map;\n-  #293 = Utf8               org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n-  #294 = NameAndType        #181:#182     // \"<init>\":([B)V\n-  #295 = NameAndType        #181:#203     // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;)V\n-  #296 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n-  #297 = NameAndType        #181:#204     // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n-  #298 = Class              #440          // java/io/File\n-  #299 = NameAndType        #441:#442     // toPath:()Ljava/nio/file/Path;\n-  #300 = NameAndType        #181:#198     // \"<init>\":(Ljava/nio/file/Path;)V\n-  #301 = NameAndType        #181:#201     // \"<init>\":(Ljava/nio/file/Path;Z)V\n-  #302 = NameAndType        #181:#202     // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n-  #303 = Utf8               java/nio/file/OpenOption\n-  #304 = Class              #443          // java/nio/file/Files\n-  #305 = NameAndType        #444:#445     // newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-  #306 = NameAndType        #181:#215     // \"<init>\":()V\n-  #307 = Utf8               org/apache/commons/compress/archivers/tar/TarFile\n-  #308 = NameAndType        #154:#155     // smallBuf:[B\n-  #309 = Utf8               java/util/LinkedList\n-  #310 = NameAndType        #160:#161     // entries:Ljava/util/LinkedList;\n-  #311 = Utf8               java/util/ArrayList\n-  #312 = NameAndType        #170:#171     // globalSparseHeaders:Ljava/util/List;\n-  #313 = Utf8               java/util/HashMap\n-  #314 = NameAndType        #176:#177     // globalPaxHeaders:Ljava/util/Map;\n-  #315 = NameAndType        #156:#157     // archive:Ljava/nio/channels/SeekableByteChannel;\n-  #316 = Class              #446          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #317 = NameAndType        #447:#448     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #318 = NameAndType        #158:#159     // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #319 = NameAndType        #167:#151     // recordSize:I\n-  #320 = NameAndType        #449:#450     // allocate:(I)Ljava/nio/ByteBuffer;\n-  #321 = NameAndType        #168:#169     // recordBuffer:Ljava/nio/ByteBuffer;\n-  #322 = NameAndType        #164:#151     // blockSize:I\n-  #323 = NameAndType        #165:#166     // lenient:Z\n-  #324 = NameAndType        #248:#249     // getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-  #325 = NameAndType        #451:#452     // add:(Ljava/lang/Object;)Z\n-  #326 = NameAndType        #174:#175     // currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-  #327 = NameAndType        #453:#454     // updateEntryFromPaxHeaders:(Ljava/util/Map;)V\n-  #328 = NameAndType        #455:#456     // setSparseHeaders:(Ljava/util/List;)V\n-  #329 = NameAndType        #457:#234     // getOrderedSparseHeaders:()Ljava/util/List;\n-  #330 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveSparseZeroInputStream\n-  #331 = NameAndType        #458:#459     // iterator:()Ljava/util/Iterator;\n-  #332 = NameAndType        #460:#261     // hasNext:()Z\n-  #333 = NameAndType        #461:#462     // next:()Ljava/lang/Object;\n-  #334 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n-  #335 = NameAndType        #463:#464     // getOffset:()J\n-  #336 = Utf8               java/io/IOException\n-  #337 = Utf8               Corrupted struct sparse detected\n-  #338 = NameAndType        #181:#465     // \"<init>\":(Ljava/lang/String;)V\n-  #339 = Utf8               org/apache/commons/compress/utils/BoundedInputStream\n-  #340 = NameAndType        #181:#466     // \"<init>\":(Ljava/io/InputStream;J)V\n-  #341 = NameAndType        #467:#464     // getNumbytes:()J\n-  #342 = NameAndType        #468:#464     // getDataOffset:()J\n-  #343 = Utf8               Unreadable TAR archive, sparse block offset or length too big\n-  #344 = Utf8               org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n-  #345 = NameAndType        #181:#469     // \"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n-  #346 = NameAndType        #470:#471     // getName:()Ljava/lang/String;\n-  #347 = NameAndType        #472:#473     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #348 = NameAndType        #230:#215     // close:()V\n-  #349 = NameAndType        #250:#464     // position:()J\n-  #350 = NameAndType        #273:#274     // repositionForwardBy:(J)V\n-  #351 = NameAndType        #181:#474     // \"<init>\":(Ljava/util/Collection;)V\n-  #352 = Utf8               org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n-  #353 = NameAndType        #181:#475     // \"<init>\":(Lorg/apache/commons/compress/archivers/tar/TarFile;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/nio/channels/SeekableByteChannel;)V\n-  #354 = Utf8               java/lang/RuntimeException\n-  #355 = Utf8               Corrupted TAR archive. Can\\'t read entry\n-  #356 = NameAndType        #181:#476     // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #357 = Utf8               java/io/ByteArrayOutputStream\n-  #358 = NameAndType        #236:#237     // getInputStream:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n-  #359 = NameAndType        #477:#478     // read:([B)I\n-  #360 = NameAndType        #479:#480     // write:([BII)V\n-  #361 = Utf8               java/lang/Throwable\n-  #362 = NameAndType        #481:#482     // addSuppressed:(Ljava/lang/Throwable;)V\n-  #363 = NameAndType        #483:#241     // toByteArray:()[B\n-  #364 = Class              #484          // java/util/Arrays\n-  #365 = NameAndType        #485:#486     // copyOf:([BI)[B\n-  #366 = NameAndType        #260:#261     // isAtEOF:()Z\n-  #367 = NameAndType        #487:#464     // getSize:()J\n-  #368 = NameAndType        #275:#274     // repositionForwardTo:(J)V\n-  #369 = NameAndType        #284:#215     // throwExceptionIfPositionIsNotInArchive:()V\n-  #370 = NameAndType        #281:#215     // skipRecordPadding:()V\n-  #371 = NameAndType        #258:#259     // getRecord:()Ljava/nio/ByteBuffer;\n-  #372 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-  #373 = NameAndType        #488:#241     // array:()[B\n-  #374 = NameAndType        #181:#489     // \"<init>\":(Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZJ)V\n-  #375 = Utf8               java/lang/IllegalArgumentException\n-  #376 = Utf8               Error detected parsing the header\n-  #377 = NameAndType        #490:#261     // isGNULongLinkEntry:()Z\n-  #378 = NameAndType        #240:#241     // getLongNameData:()[B\n-  #379 = Class              #491          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #380 = NameAndType        #492:#493     // decode:([B)Ljava/lang/String;\n-  #381 = NameAndType        #494:#465     // setLinkName:(Ljava/lang/String;)V\n-  #382 = NameAndType        #495:#261     // isGNULongNameEntry:()Z\n-  #383 = NameAndType        #496:#465     // setName:(Ljava/lang/String;)V\n-  #384 = NameAndType        #262:#261     // isDirectory:()Z\n-  #385 = Utf8               /\n-  #386 = NameAndType        #497:#498     // endsWith:(Ljava/lang/String;)Z\n-  #387 = Utf8               java/lang/StringBuilder\n-  #388 = NameAndType        #499:#500     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #389 = NameAndType        #501:#471     // toString:()Ljava/lang/String;\n-  #390 = NameAndType        #502:#261     // isGlobalPaxHeader:()Z\n-  #391 = NameAndType        #268:#215     // readGlobalPaxHeaders:()V\n-  #392 = NameAndType        #503:#261     // isPaxHeader:()Z\n-  #393 = NameAndType        #265:#215     // paxHeaders:()V\n-  #394 = NameAndType        #504:#261     // isEmpty:()Z\n-  #395 = NameAndType        #208:#209     // applyPaxHeadersToCurrentEntry:(Ljava/util/Map;Ljava/util/List;)V\n-  #396 = Utf8               java/lang/NumberFormatException\n-  #397 = Utf8               Error detected parsing the pax header\n-  #398 = NameAndType        #505:#261     // isOldGNUSparse:()Z\n-  #399 = NameAndType        #269:#215     // readOldGNUSparse:()V\n-  #400 = NameAndType        #271:#259     // readRecord:()Ljava/nio/ByteBuffer;\n-  #401 = NameAndType        #263:#264     // isEOFRecord:(Ljava/nio/ByteBuffer;)Z\n-  #402 = NameAndType        #278:#279     // setAtEOF:(Z)V\n-  #403 = NameAndType        #285:#215     // tryToConsumeSecondEOFRecord:()V\n-  #404 = NameAndType        #231:#215     // consumeRemainderOfLastBlock:()V\n-  #405 = NameAndType        #173:#166     // hasHitEOF:Z\n-  #406 = Class              #506          // org/apache/commons/compress/utils/ArchiveUtils\n-  #407 = NameAndType        #507:#508     // isArrayZero:([BI)Z\n-  #408 = Class              #509          // org/apache/commons/compress/archivers/tar/TarUtils\n-  #409 = NameAndType        #510:#511     // parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n-  #410 = Utf8               org/apache/commons/compress/archivers/tar/TarGnuSparseKeys\n-  #411 = Utf8               GNU.sparse.map\n-  #412 = NameAndType        #512:#452     // containsKey:(Ljava/lang/Object;)Z\n-  #413 = NameAndType        #513:#514     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #414 = Utf8               java/lang/String\n-  #415 = NameAndType        #515:#516     // parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n-  #416 = Utf8               premature end of tar archive. Didn\\'t find any entry after PAX header.\n-  #417 = NameAndType        #517:#261     // isPaxGNU1XSparse:()Z\n-  #418 = NameAndType        #518:#519     // parsePAX1XSparseHeaders:(Ljava/io/InputStream;I)Ljava/util/List;\n-  #419 = NameAndType        #520:#274     // setDataOffset:(J)V\n-  #420 = NameAndType        #214:#215     // buildSparseInputStreams:()V\n-  #421 = NameAndType        #521:#261     // isExtended:()Z\n+    #1 = Fieldref           #2.#3         // org/apache/commons/compress/archivers/tar/TarFile.sparseInputStreams:Ljava/util/Map;\n+    #2 = Class              #4            // org/apache/commons/compress/archivers/tar/TarFile\n+    #3 = NameAndType        #5:#6         // sparseInputStreams:Ljava/util/Map;\n+    #4 = Utf8               org/apache/commons/compress/archivers/tar/TarFile\n+    #5 = Utf8               sparseInputStreams\n+    #6 = Utf8               Ljava/util/Map;\n+    #7 = Class              #8            // org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n+    #8 = Utf8               org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n+    #9 = Methodref          #7.#10        // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n+   #10 = NameAndType        #11:#12       // \"<init>\":([B)V\n+   #11 = Utf8               <init>\n+   #12 = Utf8               ([B)V\n+   #13 = Methodref          #2.#14        // org/apache/commons/compress/archivers/tar/TarFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;)V\n+   #14 = NameAndType        #11:#15       // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;)V\n+   #15 = Utf8               (Ljava/nio/channels/SeekableByteChannel;)V\n+   #16 = Class              #17           // org/apache/commons/compress/archivers/tar/TarConstants\n+   #17 = Utf8               org/apache/commons/compress/archivers/tar/TarConstants\n+   #18 = Methodref          #2.#19        // org/apache/commons/compress/archivers/tar/TarFile.\"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n+   #19 = NameAndType        #11:#20       // \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n+   #20 = Utf8               (Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n+   #21 = Methodref          #22.#23       // java/io/File.toPath:()Ljava/nio/file/Path;\n+   #22 = Class              #24           // java/io/File\n+   #23 = NameAndType        #25:#26       // toPath:()Ljava/nio/file/Path;\n+   #24 = Utf8               java/io/File\n+   #25 = Utf8               toPath\n+   #26 = Utf8               ()Ljava/nio/file/Path;\n+   #27 = Methodref          #2.#28        // org/apache/commons/compress/archivers/tar/TarFile.\"<init>\":(Ljava/nio/file/Path;)V\n+   #28 = NameAndType        #11:#29       // \"<init>\":(Ljava/nio/file/Path;)V\n+   #29 = Utf8               (Ljava/nio/file/Path;)V\n+   #30 = Methodref          #2.#31        // org/apache/commons/compress/archivers/tar/TarFile.\"<init>\":(Ljava/nio/file/Path;Z)V\n+   #31 = NameAndType        #11:#32       // \"<init>\":(Ljava/nio/file/Path;Z)V\n+   #32 = Utf8               (Ljava/nio/file/Path;Z)V\n+   #33 = Methodref          #2.#34        // org/apache/commons/compress/archivers/tar/TarFile.\"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n+   #34 = NameAndType        #11:#35       // \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n+   #35 = Utf8               (Ljava/nio/file/Path;Ljava/lang/String;)V\n+   #36 = Class              #37           // java/nio/file/OpenOption\n+   #37 = Utf8               java/nio/file/OpenOption\n+   #38 = Methodref          #39.#40       // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+   #39 = Class              #41           // java/nio/file/Files\n+   #40 = NameAndType        #42:#43       // newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+   #41 = Utf8               java/nio/file/Files\n+   #42 = Utf8               newByteChannel\n+   #43 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+   #44 = Methodref          #45.#46       // java/lang/Object.\"<init>\":()V\n+   #45 = Class              #47           // java/lang/Object\n+   #46 = NameAndType        #11:#48       // \"<init>\":()V\n+   #47 = Utf8               java/lang/Object\n+   #48 = Utf8               ()V\n+   #49 = Fieldref           #2.#50        // org/apache/commons/compress/archivers/tar/TarFile.smallBuf:[B\n+   #50 = NameAndType        #51:#52       // smallBuf:[B\n+   #51 = Utf8               smallBuf\n+   #52 = Utf8               [B\n+   #53 = Class              #54           // java/util/LinkedList\n+   #54 = Utf8               java/util/LinkedList\n+   #55 = Methodref          #53.#46       // java/util/LinkedList.\"<init>\":()V\n+   #56 = Fieldref           #2.#57        // org/apache/commons/compress/archivers/tar/TarFile.entries:Ljava/util/LinkedList;\n+   #57 = NameAndType        #58:#59       // entries:Ljava/util/LinkedList;\n+   #58 = Utf8               entries\n+   #59 = Utf8               Ljava/util/LinkedList;\n+   #60 = Class              #61           // java/util/ArrayList\n+   #61 = Utf8               java/util/ArrayList\n+   #62 = Methodref          #60.#46       // java/util/ArrayList.\"<init>\":()V\n+   #63 = Fieldref           #2.#64        // org/apache/commons/compress/archivers/tar/TarFile.globalSparseHeaders:Ljava/util/List;\n+   #64 = NameAndType        #65:#66       // globalSparseHeaders:Ljava/util/List;\n+   #65 = Utf8               globalSparseHeaders\n+   #66 = Utf8               Ljava/util/List;\n+   #67 = Class              #68           // java/util/HashMap\n+   #68 = Utf8               java/util/HashMap\n+   #69 = Methodref          #67.#46       // java/util/HashMap.\"<init>\":()V\n+   #70 = Fieldref           #2.#71        // org/apache/commons/compress/archivers/tar/TarFile.globalPaxHeaders:Ljava/util/Map;\n+   #71 = NameAndType        #72:#6        // globalPaxHeaders:Ljava/util/Map;\n+   #72 = Utf8               globalPaxHeaders\n+   #73 = Fieldref           #2.#74        // org/apache/commons/compress/archivers/tar/TarFile.archive:Ljava/nio/channels/SeekableByteChannel;\n+   #74 = NameAndType        #75:#76       // archive:Ljava/nio/channels/SeekableByteChannel;\n+   #75 = Utf8               archive\n+   #76 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n+   #77 = Methodref          #78.#79       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #78 = Class              #80           // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+   #79 = NameAndType        #81:#82       // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #80 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+   #81 = Utf8               getZipEncoding\n+   #82 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #83 = Fieldref           #2.#84        // org/apache/commons/compress/archivers/tar/TarFile.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #84 = NameAndType        #85:#86       // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #85 = Utf8               zipEncoding\n+   #86 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #87 = Fieldref           #2.#88        // org/apache/commons/compress/archivers/tar/TarFile.recordSize:I\n+   #88 = NameAndType        #89:#90       // recordSize:I\n+   #89 = Utf8               recordSize\n+   #90 = Utf8               I\n+   #91 = Methodref          #92.#93       // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+   #92 = Class              #94           // java/nio/ByteBuffer\n+   #93 = NameAndType        #95:#96       // allocate:(I)Ljava/nio/ByteBuffer;\n+   #94 = Utf8               java/nio/ByteBuffer\n+   #95 = Utf8               allocate\n+   #96 = Utf8               (I)Ljava/nio/ByteBuffer;\n+   #97 = Fieldref           #2.#98        // org/apache/commons/compress/archivers/tar/TarFile.recordBuffer:Ljava/nio/ByteBuffer;\n+   #98 = NameAndType        #99:#100      // recordBuffer:Ljava/nio/ByteBuffer;\n+   #99 = Utf8               recordBuffer\n+  #100 = Utf8               Ljava/nio/ByteBuffer;\n+  #101 = Fieldref           #2.#102       // org/apache/commons/compress/archivers/tar/TarFile.blockSize:I\n+  #102 = NameAndType        #103:#90      // blockSize:I\n+  #103 = Utf8               blockSize\n+  #104 = Fieldref           #2.#105       // org/apache/commons/compress/archivers/tar/TarFile.lenient:Z\n+  #105 = NameAndType        #106:#107     // lenient:Z\n+  #106 = Utf8               lenient\n+  #107 = Utf8               Z\n+  #108 = Methodref          #2.#109       // org/apache/commons/compress/archivers/tar/TarFile.getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+  #109 = NameAndType        #110:#111     // getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+  #110 = Utf8               getNextTarEntry\n+  #111 = Utf8               ()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+  #112 = Methodref          #53.#113      // java/util/LinkedList.add:(Ljava/lang/Object;)Z\n+  #113 = NameAndType        #114:#115     // add:(Ljava/lang/Object;)Z\n+  #114 = Utf8               add\n+  #115 = Utf8               (Ljava/lang/Object;)Z\n+  #116 = Fieldref           #2.#117       // org/apache/commons/compress/archivers/tar/TarFile.currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+  #117 = NameAndType        #118:#119     // currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+  #118 = Utf8               currEntry\n+  #119 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+  #120 = Methodref          #121.#122     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.updateEntryFromPaxHeaders:(Ljava/util/Map;)V\n+  #121 = Class              #123          // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+  #122 = NameAndType        #124:#125     // updateEntryFromPaxHeaders:(Ljava/util/Map;)V\n+  #123 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+  #124 = Utf8               updateEntryFromPaxHeaders\n+  #125 = Utf8               (Ljava/util/Map;)V\n+  #126 = Methodref          #121.#127     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSparseHeaders:(Ljava/util/List;)V\n+  #127 = NameAndType        #128:#129     // setSparseHeaders:(Ljava/util/List;)V\n+  #128 = Utf8               setSparseHeaders\n+  #129 = Utf8               (Ljava/util/List;)V\n+  #130 = Methodref          #121.#131     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getOrderedSparseHeaders:()Ljava/util/List;\n+  #131 = NameAndType        #132:#133     // getOrderedSparseHeaders:()Ljava/util/List;\n+  #132 = Utf8               getOrderedSparseHeaders\n+  #133 = Utf8               ()Ljava/util/List;\n+  #134 = Class              #135          // org/apache/commons/compress/archivers/tar/TarArchiveSparseZeroInputStream\n+  #135 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveSparseZeroInputStream\n+  #136 = Methodref          #134.#46      // org/apache/commons/compress/archivers/tar/TarArchiveSparseZeroInputStream.\"<init>\":()V\n+  #137 = InterfaceMethodref #138.#139     // java/util/List.iterator:()Ljava/util/Iterator;\n+  #138 = Class              #140          // java/util/List\n+  #139 = NameAndType        #141:#142     // iterator:()Ljava/util/Iterator;\n+  #140 = Utf8               java/util/List\n+  #141 = Utf8               iterator\n+  #142 = Utf8               ()Ljava/util/Iterator;\n+  #143 = InterfaceMethodref #144.#145     // java/util/Iterator.hasNext:()Z\n+  #144 = Class              #146          // java/util/Iterator\n+  #145 = NameAndType        #147:#148     // hasNext:()Z\n+  #146 = Utf8               java/util/Iterator\n+  #147 = Utf8               hasNext\n+  #148 = Utf8               ()Z\n+  #149 = InterfaceMethodref #144.#150     // java/util/Iterator.next:()Ljava/lang/Object;\n+  #150 = NameAndType        #151:#152     // next:()Ljava/lang/Object;\n+  #151 = Utf8               next\n+  #152 = Utf8               ()Ljava/lang/Object;\n+  #153 = Class              #154          // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+  #154 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+  #155 = Methodref          #153.#156     // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+  #156 = NameAndType        #157:#158     // getOffset:()J\n+  #157 = Utf8               getOffset\n+  #158 = Utf8               ()J\n+  #159 = Class              #160          // java/io/IOException\n+  #160 = Utf8               java/io/IOException\n+  #161 = String             #162          // Corrupted struct sparse detected\n+  #162 = Utf8               Corrupted struct sparse detected\n+  #163 = Methodref          #159.#164     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+  #164 = NameAndType        #11:#165      // \"<init>\":(Ljava/lang/String;)V\n+  #165 = Utf8               (Ljava/lang/String;)V\n+  #166 = Class              #167          // org/apache/commons/compress/utils/BoundedInputStream\n+  #167 = Utf8               org/apache/commons/compress/utils/BoundedInputStream\n+  #168 = Methodref          #166.#169     // org/apache/commons/compress/utils/BoundedInputStream.\"<init>\":(Ljava/io/InputStream;J)V\n+  #169 = NameAndType        #11:#170      // \"<init>\":(Ljava/io/InputStream;J)V\n+  #170 = Utf8               (Ljava/io/InputStream;J)V\n+  #171 = InterfaceMethodref #138.#113     // java/util/List.add:(Ljava/lang/Object;)Z\n+  #172 = Methodref          #153.#173     // org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n+  #173 = NameAndType        #174:#158     // getNumbytes:()J\n+  #174 = Utf8               getNumbytes\n+  #175 = Methodref          #121.#176     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n+  #176 = NameAndType        #177:#158     // getDataOffset:()J\n+  #177 = Utf8               getDataOffset\n+  #178 = String             #179          // Unreadable TAR archive, sparse block offset or length too big\n+  #179 = Utf8               Unreadable TAR archive, sparse block offset or length too big\n+  #180 = Class              #181          // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n+  #181 = Utf8               org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n+  #182 = Methodref          #180.#183     // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream.\"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n+  #183 = NameAndType        #11:#184      // \"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n+  #184 = Utf8               (JJLjava/nio/channels/SeekableByteChannel;)V\n+  #185 = Methodref          #121.#186     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getName:()Ljava/lang/String;\n+  #186 = NameAndType        #187:#188     // getName:()Ljava/lang/String;\n+  #187 = Utf8               getName\n+  #188 = Utf8               ()Ljava/lang/String;\n+  #189 = InterfaceMethodref #190.#191     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #190 = Class              #192          // java/util/Map\n+  #191 = NameAndType        #193:#194     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #192 = Utf8               java/util/Map\n+  #193 = Utf8               put\n+  #194 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #195 = InterfaceMethodref #196.#197     // java/nio/channels/SeekableByteChannel.close:()V\n+  #196 = Class              #198          // java/nio/channels/SeekableByteChannel\n+  #197 = NameAndType        #199:#48      // close:()V\n+  #198 = Utf8               java/nio/channels/SeekableByteChannel\n+  #199 = Utf8               close\n+  #200 = InterfaceMethodref #196.#201     // java/nio/channels/SeekableByteChannel.position:()J\n+  #201 = NameAndType        #202:#158     // position:()J\n+  #202 = Utf8               position\n+  #203 = Methodref          #2.#204       // org/apache/commons/compress/archivers/tar/TarFile.repositionForwardBy:(J)V\n+  #204 = NameAndType        #205:#206     // repositionForwardBy:(J)V\n+  #205 = Utf8               repositionForwardBy\n+  #206 = Utf8               (J)V\n+  #207 = Methodref          #60.#208      // java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n+  #208 = NameAndType        #11:#209      // \"<init>\":(Ljava/util/Collection;)V\n+  #209 = Utf8               (Ljava/util/Collection;)V\n+  #210 = Class              #211          // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n+  #211 = Utf8               org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n+  #212 = Methodref          #210.#213     // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/tar/TarFile;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/nio/channels/SeekableByteChannel;)V\n+  #213 = NameAndType        #11:#214      // \"<init>\":(Lorg/apache/commons/compress/archivers/tar/TarFile;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/nio/channels/SeekableByteChannel;)V\n+  #214 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarFile;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/nio/channels/SeekableByteChannel;)V\n+  #215 = Class              #216          // java/lang/RuntimeException\n+  #216 = Utf8               java/lang/RuntimeException\n+  #217 = String             #218          // Corrupted TAR archive. Can\\'t read entry\n+  #218 = Utf8               Corrupted TAR archive. Can\\'t read entry\n+  #219 = Methodref          #159.#220     // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #220 = NameAndType        #11:#221      // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #221 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #222 = Class              #223          // java/io/ByteArrayOutputStream\n+  #223 = Utf8               java/io/ByteArrayOutputStream\n+  #224 = Methodref          #222.#46      // java/io/ByteArrayOutputStream.\"<init>\":()V\n+  #225 = Methodref          #2.#226       // org/apache/commons/compress/archivers/tar/TarFile.getInputStream:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n+  #226 = NameAndType        #227:#228     // getInputStream:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n+  #227 = Utf8               getInputStream\n+  #228 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n+  #229 = Methodref          #230.#231     // java/io/InputStream.read:([B)I\n+  #230 = Class              #232          // java/io/InputStream\n+  #231 = NameAndType        #233:#234     // read:([B)I\n+  #232 = Utf8               java/io/InputStream\n+  #233 = Utf8               read\n+  #234 = Utf8               ([B)I\n+  #235 = Methodref          #222.#236     // java/io/ByteArrayOutputStream.write:([BII)V\n+  #236 = NameAndType        #237:#238     // write:([BII)V\n+  #237 = Utf8               write\n+  #238 = Utf8               ([BII)V\n+  #239 = Methodref          #230.#197     // java/io/InputStream.close:()V\n+  #240 = Class              #241          // java/lang/Throwable\n+  #241 = Utf8               java/lang/Throwable\n+  #242 = Methodref          #240.#243     // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+  #243 = NameAndType        #244:#245     // addSuppressed:(Ljava/lang/Throwable;)V\n+  #244 = Utf8               addSuppressed\n+  #245 = Utf8               (Ljava/lang/Throwable;)V\n+  #246 = Methodref          #222.#247     // java/io/ByteArrayOutputStream.toByteArray:()[B\n+  #247 = NameAndType        #248:#249     // toByteArray:()[B\n+  #248 = Utf8               toByteArray\n+  #249 = Utf8               ()[B\n+  #250 = Methodref          #251.#252     // java/util/Arrays.copyOf:([BI)[B\n+  #251 = Class              #253          // java/util/Arrays\n+  #252 = NameAndType        #254:#255     // copyOf:([BI)[B\n+  #253 = Utf8               java/util/Arrays\n+  #254 = Utf8               copyOf\n+  #255 = Utf8               ([BI)[B\n+  #256 = Methodref          #2.#257       // org/apache/commons/compress/archivers/tar/TarFile.isAtEOF:()Z\n+  #257 = NameAndType        #258:#148     // isAtEOF:()Z\n+  #258 = Utf8               isAtEOF\n+  #259 = Methodref          #121.#260     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+  #260 = NameAndType        #261:#158     // getSize:()J\n+  #261 = Utf8               getSize\n+  #262 = Methodref          #2.#263       // org/apache/commons/compress/archivers/tar/TarFile.repositionForwardTo:(J)V\n+  #263 = NameAndType        #264:#206     // repositionForwardTo:(J)V\n+  #264 = Utf8               repositionForwardTo\n+  #265 = Methodref          #2.#266       // org/apache/commons/compress/archivers/tar/TarFile.throwExceptionIfPositionIsNotInArchive:()V\n+  #266 = NameAndType        #267:#48      // throwExceptionIfPositionIsNotInArchive:()V\n+  #267 = Utf8               throwExceptionIfPositionIsNotInArchive\n+  #268 = Methodref          #2.#269       // org/apache/commons/compress/archivers/tar/TarFile.skipRecordPadding:()V\n+  #269 = NameAndType        #270:#48      // skipRecordPadding:()V\n+  #270 = Utf8               skipRecordPadding\n+  #271 = Methodref          #2.#272       // org/apache/commons/compress/archivers/tar/TarFile.getRecord:()Ljava/nio/ByteBuffer;\n+  #272 = NameAndType        #273:#274     // getRecord:()Ljava/nio/ByteBuffer;\n+  #273 = Utf8               getRecord\n+  #274 = Utf8               ()Ljava/nio/ByteBuffer;\n+  #275 = Methodref          #92.#276      // java/nio/ByteBuffer.array:()[B\n+  #276 = NameAndType        #277:#249     // array:()[B\n+  #277 = Utf8               array\n+  #278 = Methodref          #121.#279     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZJ)V\n+  #279 = NameAndType        #11:#280      // \"<init>\":(Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZJ)V\n+  #280 = Utf8               (Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZJ)V\n+  #281 = Class              #282          // java/lang/IllegalArgumentException\n+  #282 = Utf8               java/lang/IllegalArgumentException\n+  #283 = String             #284          // Error detected parsing the header\n+  #284 = Utf8               Error detected parsing the header\n+  #285 = Methodref          #121.#286     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongLinkEntry:()Z\n+  #286 = NameAndType        #287:#148     // isGNULongLinkEntry:()Z\n+  #287 = Utf8               isGNULongLinkEntry\n+  #288 = Methodref          #2.#289       // org/apache/commons/compress/archivers/tar/TarFile.getLongNameData:()[B\n+  #289 = NameAndType        #290:#249     // getLongNameData:()[B\n+  #290 = Utf8               getLongNameData\n+  #291 = InterfaceMethodref #292.#293     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+  #292 = Class              #294          // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #293 = NameAndType        #295:#296     // decode:([B)Ljava/lang/String;\n+  #294 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #295 = Utf8               decode\n+  #296 = Utf8               ([B)Ljava/lang/String;\n+  #297 = Methodref          #121.#298     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setLinkName:(Ljava/lang/String;)V\n+  #298 = NameAndType        #299:#165     // setLinkName:(Ljava/lang/String;)V\n+  #299 = Utf8               setLinkName\n+  #300 = Methodref          #121.#301     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongNameEntry:()Z\n+  #301 = NameAndType        #302:#148     // isGNULongNameEntry:()Z\n+  #302 = Utf8               isGNULongNameEntry\n+  #303 = Methodref          #121.#304     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setName:(Ljava/lang/String;)V\n+  #304 = NameAndType        #305:#165     // setName:(Ljava/lang/String;)V\n+  #305 = Utf8               setName\n+  #306 = Methodref          #121.#307     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n+  #307 = NameAndType        #308:#148     // isDirectory:()Z\n+  #308 = Utf8               isDirectory\n+  #309 = String             #310          // /\n+  #310 = Utf8               /\n+  #311 = Methodref          #312.#313     // java/lang/String.endsWith:(Ljava/lang/String;)Z\n+  #312 = Class              #314          // java/lang/String\n+  #313 = NameAndType        #315:#316     // endsWith:(Ljava/lang/String;)Z\n+  #314 = Utf8               java/lang/String\n+  #315 = Utf8               endsWith\n+  #316 = Utf8               (Ljava/lang/String;)Z\n+  #317 = Class              #318          // java/lang/StringBuilder\n+  #318 = Utf8               java/lang/StringBuilder\n+  #319 = Methodref          #317.#46      // java/lang/StringBuilder.\"<init>\":()V\n+  #320 = Methodref          #317.#321     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #321 = NameAndType        #322:#323     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #322 = Utf8               append\n+  #323 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #324 = Methodref          #317.#325     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #325 = NameAndType        #326:#188     // toString:()Ljava/lang/String;\n+  #326 = Utf8               toString\n+  #327 = Methodref          #121.#328     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGlobalPaxHeader:()Z\n+  #328 = NameAndType        #329:#148     // isGlobalPaxHeader:()Z\n+  #329 = Utf8               isGlobalPaxHeader\n+  #330 = Methodref          #2.#331       // org/apache/commons/compress/archivers/tar/TarFile.readGlobalPaxHeaders:()V\n+  #331 = NameAndType        #332:#48      // readGlobalPaxHeaders:()V\n+  #332 = Utf8               readGlobalPaxHeaders\n+  #333 = Methodref          #121.#334     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxHeader:()Z\n+  #334 = NameAndType        #335:#148     // isPaxHeader:()Z\n+  #335 = Utf8               isPaxHeader\n+  #336 = Methodref          #2.#337       // org/apache/commons/compress/archivers/tar/TarFile.paxHeaders:()V\n+  #337 = NameAndType        #338:#48      // paxHeaders:()V\n+  #338 = Utf8               paxHeaders\n+  #339 = InterfaceMethodref #190.#340     // java/util/Map.isEmpty:()Z\n+  #340 = NameAndType        #341:#148     // isEmpty:()Z\n+  #341 = Utf8               isEmpty\n+  #342 = Methodref          #2.#343       // org/apache/commons/compress/archivers/tar/TarFile.applyPaxHeadersToCurrentEntry:(Ljava/util/Map;Ljava/util/List;)V\n+  #343 = NameAndType        #344:#345     // applyPaxHeadersToCurrentEntry:(Ljava/util/Map;Ljava/util/List;)V\n+  #344 = Utf8               applyPaxHeadersToCurrentEntry\n+  #345 = Utf8               (Ljava/util/Map;Ljava/util/List;)V\n+  #346 = Class              #347          // java/lang/NumberFormatException\n+  #347 = Utf8               java/lang/NumberFormatException\n+  #348 = String             #349          // Error detected parsing the pax header\n+  #349 = Utf8               Error detected parsing the pax header\n+  #350 = Methodref          #121.#351     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isOldGNUSparse:()Z\n+  #351 = NameAndType        #352:#148     // isOldGNUSparse:()Z\n+  #352 = Utf8               isOldGNUSparse\n+  #353 = Methodref          #2.#354       // org/apache/commons/compress/archivers/tar/TarFile.readOldGNUSparse:()V\n+  #354 = NameAndType        #355:#48      // readOldGNUSparse:()V\n+  #355 = Utf8               readOldGNUSparse\n+  #356 = Methodref          #2.#357       // org/apache/commons/compress/archivers/tar/TarFile.readRecord:()Ljava/nio/ByteBuffer;\n+  #357 = NameAndType        #358:#274     // readRecord:()Ljava/nio/ByteBuffer;\n+  #358 = Utf8               readRecord\n+  #359 = Methodref          #2.#360       // org/apache/commons/compress/archivers/tar/TarFile.isEOFRecord:(Ljava/nio/ByteBuffer;)Z\n+  #360 = NameAndType        #361:#362     // isEOFRecord:(Ljava/nio/ByteBuffer;)Z\n+  #361 = Utf8               isEOFRecord\n+  #362 = Utf8               (Ljava/nio/ByteBuffer;)Z\n+  #363 = Methodref          #2.#364       // org/apache/commons/compress/archivers/tar/TarFile.setAtEOF:(Z)V\n+  #364 = NameAndType        #365:#366     // setAtEOF:(Z)V\n+  #365 = Utf8               setAtEOF\n+  #366 = Utf8               (Z)V\n+  #367 = Methodref          #2.#368       // org/apache/commons/compress/archivers/tar/TarFile.tryToConsumeSecondEOFRecord:()V\n+  #368 = NameAndType        #369:#48      // tryToConsumeSecondEOFRecord:()V\n+  #369 = Utf8               tryToConsumeSecondEOFRecord\n+  #370 = Methodref          #2.#371       // org/apache/commons/compress/archivers/tar/TarFile.consumeRemainderOfLastBlock:()V\n+  #371 = NameAndType        #372:#48      // consumeRemainderOfLastBlock:()V\n+  #372 = Utf8               consumeRemainderOfLastBlock\n+  #373 = Fieldref           #2.#374       // org/apache/commons/compress/archivers/tar/TarFile.hasHitEOF:Z\n+  #374 = NameAndType        #375:#107     // hasHitEOF:Z\n+  #375 = Utf8               hasHitEOF\n+  #376 = Methodref          #377.#378     // org/apache/commons/compress/utils/ArchiveUtils.isArrayZero:([BI)Z\n+  #377 = Class              #379          // org/apache/commons/compress/utils/ArchiveUtils\n+  #378 = NameAndType        #380:#381     // isArrayZero:([BI)Z\n+  #379 = Utf8               org/apache/commons/compress/utils/ArchiveUtils\n+  #380 = Utf8               isArrayZero\n+  #381 = Utf8               ([BI)Z\n+  #382 = Methodref          #383.#384     // org/apache/commons/compress/archivers/tar/TarUtils.parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+  #383 = Class              #385          // org/apache/commons/compress/archivers/tar/TarUtils\n+  #384 = NameAndType        #386:#387     // parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+  #385 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils\n+  #386 = Utf8               parsePaxHeaders\n+  #387 = Utf8               (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+  #388 = Class              #389          // org/apache/commons/compress/archivers/tar/TarGnuSparseKeys\n+  #389 = Utf8               org/apache/commons/compress/archivers/tar/TarGnuSparseKeys\n+  #390 = String             #391          // GNU.sparse.map\n+  #391 = Utf8               GNU.sparse.map\n+  #392 = InterfaceMethodref #190.#393     // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n+  #393 = NameAndType        #394:#115     // containsKey:(Ljava/lang/Object;)Z\n+  #394 = Utf8               containsKey\n+  #395 = InterfaceMethodref #190.#396     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #396 = NameAndType        #397:#398     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #397 = Utf8               get\n+  #398 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #399 = Methodref          #383.#400     // org/apache/commons/compress/archivers/tar/TarUtils.parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n+  #400 = NameAndType        #401:#402     // parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n+  #401 = Utf8               parseFromPAX01SparseHeaders\n+  #402 = Utf8               (Ljava/lang/String;)Ljava/util/List;\n+  #403 = String             #404          // premature end of tar archive. Didn\\'t find any entry after PAX header.\n+  #404 = Utf8               premature end of tar archive. Didn\\'t find any entry after PAX header.\n+  #405 = Methodref          #121.#406     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxGNU1XSparse:()Z\n+  #406 = NameAndType        #407:#148     // isPaxGNU1XSparse:()Z\n+  #407 = Utf8               isPaxGNU1XSparse\n+  #408 = Methodref          #383.#409     // org/apache/commons/compress/archivers/tar/TarUtils.parsePAX1XSparseHeaders:(Ljava/io/InputStream;I)Ljava/util/List;\n+  #409 = NameAndType        #410:#411     // parsePAX1XSparseHeaders:(Ljava/io/InputStream;I)Ljava/util/List;\n+  #410 = Utf8               parsePAX1XSparseHeaders\n+  #411 = Utf8               (Ljava/io/InputStream;I)Ljava/util/List;\n+  #412 = Methodref          #121.#413     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.setDataOffset:(J)V\n+  #413 = NameAndType        #414:#206     // setDataOffset:(J)V\n+  #414 = Utf8               setDataOffset\n+  #415 = Methodref          #2.#416       // org/apache/commons/compress/archivers/tar/TarFile.buildSparseInputStreams:()V\n+  #416 = NameAndType        #417:#48      // buildSparseInputStreams:()V\n+  #417 = Utf8               buildSparseInputStreams\n+  #418 = Methodref          #121.#419     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isExtended:()Z\n+  #419 = NameAndType        #420:#148     // isExtended:()Z\n+  #420 = Utf8               isExtended\n+  #421 = String             #422          // premature end of tar archive. Didn\\'t find extended_header after header with extended flag.\n   #422 = Utf8               premature end of tar archive. Didn\\'t find extended_header after header with extended flag.\n-  #423 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry\n-  #424 = NameAndType        #522:#234     // getSparseHeaders:()Ljava/util/List;\n-  #425 = NameAndType        #523:#524     // addAll:(Ljava/util/Collection;)Z\n-  #426 = NameAndType        #525:#526     // rewind:()Ljava/nio/Buffer;\n-  #427 = NameAndType        #477:#527     // read:(Ljava/nio/ByteBuffer;)I\n-  #428 = Utf8               trying to move backwards inside of the archive\n-  #429 = NameAndType        #250:#528     // position:(J)Ljava/nio/channels/SeekableByteChannel;\n-  #430 = NameAndType        #529:#464     // size:()J\n-  #431 = Utf8               Truncated TAR archive\n-  #432 = Utf8               java/lang/Object\n-  #433 = Utf8               java/io/Closeable\n-  #434 = Utf8               java/nio/channels/SeekableByteChannel\n-  #435 = Utf8               java/util/List\n-  #436 = Utf8               java/io/InputStream\n-  #437 = Utf8               java/util/Iterator\n-  #438 = Utf8               java/nio/ByteBuffer\n-  #439 = Utf8               java/util/Map\n-  #440 = Utf8               java/io/File\n-  #441 = Utf8               toPath\n-  #442 = Utf8               ()Ljava/nio/file/Path;\n-  #443 = Utf8               java/nio/file/Files\n-  #444 = Utf8               newByteChannel\n-  #445 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-  #446 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #447 = Utf8               getZipEncoding\n-  #448 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #449 = Utf8               allocate\n-  #450 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #451 = Utf8               add\n-  #452 = Utf8               (Ljava/lang/Object;)Z\n-  #453 = Utf8               updateEntryFromPaxHeaders\n-  #454 = Utf8               (Ljava/util/Map;)V\n-  #455 = Utf8               setSparseHeaders\n-  #456 = Utf8               (Ljava/util/List;)V\n-  #457 = Utf8               getOrderedSparseHeaders\n-  #458 = Utf8               iterator\n-  #459 = Utf8               ()Ljava/util/Iterator;\n-  #460 = Utf8               hasNext\n-  #461 = Utf8               next\n-  #462 = Utf8               ()Ljava/lang/Object;\n-  #463 = Utf8               getOffset\n-  #464 = Utf8               ()J\n-  #465 = Utf8               (Ljava/lang/String;)V\n-  #466 = Utf8               (Ljava/io/InputStream;J)V\n-  #467 = Utf8               getNumbytes\n-  #468 = Utf8               getDataOffset\n-  #469 = Utf8               (JJLjava/nio/channels/SeekableByteChannel;)V\n-  #470 = Utf8               getName\n-  #471 = Utf8               ()Ljava/lang/String;\n-  #472 = Utf8               put\n-  #473 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #474 = Utf8               (Ljava/util/Collection;)V\n-  #475 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarFile;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/nio/channels/SeekableByteChannel;)V\n-  #476 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #477 = Utf8               read\n-  #478 = Utf8               ([B)I\n-  #479 = Utf8               write\n-  #480 = Utf8               ([BII)V\n-  #481 = Utf8               addSuppressed\n-  #482 = Utf8               (Ljava/lang/Throwable;)V\n-  #483 = Utf8               toByteArray\n-  #484 = Utf8               java/util/Arrays\n-  #485 = Utf8               copyOf\n-  #486 = Utf8               ([BI)[B\n-  #487 = Utf8               getSize\n-  #488 = Utf8               array\n-  #489 = Utf8               (Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZJ)V\n-  #490 = Utf8               isGNULongLinkEntry\n-  #491 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #492 = Utf8               decode\n-  #493 = Utf8               ([B)Ljava/lang/String;\n-  #494 = Utf8               setLinkName\n-  #495 = Utf8               isGNULongNameEntry\n-  #496 = Utf8               setName\n-  #497 = Utf8               endsWith\n-  #498 = Utf8               (Ljava/lang/String;)Z\n-  #499 = Utf8               append\n-  #500 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #501 = Utf8               toString\n-  #502 = Utf8               isGlobalPaxHeader\n-  #503 = Utf8               isPaxHeader\n-  #504 = Utf8               isEmpty\n-  #505 = Utf8               isOldGNUSparse\n-  #506 = Utf8               org/apache/commons/compress/utils/ArchiveUtils\n-  #507 = Utf8               isArrayZero\n-  #508 = Utf8               ([BI)Z\n-  #509 = Utf8               org/apache/commons/compress/archivers/tar/TarUtils\n-  #510 = Utf8               parsePaxHeaders\n-  #511 = Utf8               (Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n-  #512 = Utf8               containsKey\n-  #513 = Utf8               get\n-  #514 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #515 = Utf8               parseFromPAX01SparseHeaders\n-  #516 = Utf8               (Ljava/lang/String;)Ljava/util/List;\n-  #517 = Utf8               isPaxGNU1XSparse\n-  #518 = Utf8               parsePAX1XSparseHeaders\n-  #519 = Utf8               (Ljava/io/InputStream;I)Ljava/util/List;\n-  #520 = Utf8               setDataOffset\n-  #521 = Utf8               isExtended\n-  #522 = Utf8               getSparseHeaders\n-  #523 = Utf8               addAll\n-  #524 = Utf8               (Ljava/util/Collection;)Z\n-  #525 = Utf8               rewind\n-  #526 = Utf8               ()Ljava/nio/Buffer;\n-  #527 = Utf8               (Ljava/nio/ByteBuffer;)I\n-  #528 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n-  #529 = Utf8               size\n+  #423 = Class              #424          // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry\n+  #424 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry\n+  #425 = Methodref          #423.#10      // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.\"<init>\":([B)V\n+  #426 = Methodref          #121.#427     // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSparseHeaders:()Ljava/util/List;\n+  #427 = NameAndType        #428:#133     // getSparseHeaders:()Ljava/util/List;\n+  #428 = Utf8               getSparseHeaders\n+  #429 = Methodref          #423.#427     // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.getSparseHeaders:()Ljava/util/List;\n+  #430 = InterfaceMethodref #138.#431     // java/util/List.addAll:(Ljava/util/Collection;)Z\n+  #431 = NameAndType        #432:#433     // addAll:(Ljava/util/Collection;)Z\n+  #432 = Utf8               addAll\n+  #433 = Utf8               (Ljava/util/Collection;)Z\n+  #434 = Methodref          #423.#419     // org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.isExtended:()Z\n+  #435 = Methodref          #92.#436      // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+  #436 = NameAndType        #437:#438     // rewind:()Ljava/nio/Buffer;\n+  #437 = Utf8               rewind\n+  #438 = Utf8               ()Ljava/nio/Buffer;\n+  #439 = InterfaceMethodref #196.#440     // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+  #440 = NameAndType        #233:#441     // read:(Ljava/nio/ByteBuffer;)I\n+  #441 = Utf8               (Ljava/nio/ByteBuffer;)I\n+  #442 = String             #443          // trying to move backwards inside of the archive\n+  #443 = Utf8               trying to move backwards inside of the archive\n+  #444 = InterfaceMethodref #196.#445     // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+  #445 = NameAndType        #202:#446     // position:(J)Ljava/nio/channels/SeekableByteChannel;\n+  #446 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n+  #447 = Methodref          #2.#307       // org/apache/commons/compress/archivers/tar/TarFile.isDirectory:()Z\n+  #448 = InterfaceMethodref #196.#449     // java/nio/channels/SeekableByteChannel.size:()J\n+  #449 = NameAndType        #450:#158     // size:()J\n+  #450 = Utf8               size\n+  #451 = String             #452          // Truncated TAR archive\n+  #452 = Utf8               Truncated TAR archive\n+  #453 = Class              #454          // java/io/Closeable\n+  #454 = Utf8               java/io/Closeable\n+  #455 = Utf8               SMALL_BUFFER_SIZE\n+  #456 = Utf8               ConstantValue\n+  #457 = Integer            256\n+  #458 = Utf8               Signature\n+  #459 = Utf8               Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;>;\n+  #460 = Utf8               Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+  #461 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+  #462 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Ljava/io/InputStream;>;>;\n+  #463 = Utf8               Code\n+  #464 = Utf8               LineNumberTable\n+  #465 = Utf8               LocalVariableTable\n+  #466 = Utf8               this\n+  #467 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarFile;\n+  #468 = Utf8               content\n+  #469 = Utf8               Exceptions\n+  #470 = Utf8               ([BZ)V\n+  #471 = Utf8               ([BLjava/lang/String;)V\n+  #472 = Utf8               encoding\n+  #473 = Utf8               Ljava/lang/String;\n+  #474 = Utf8               (Ljava/io/File;)V\n+  #475 = Utf8               Ljava/io/File;\n+  #476 = Utf8               (Ljava/io/File;Z)V\n+  #477 = Utf8               (Ljava/io/File;Ljava/lang/String;)V\n+  #478 = Utf8               archivePath\n+  #479 = Utf8               Ljava/nio/file/Path;\n+  #480 = Utf8               entry\n+  #481 = Utf8               StackMapTable\n+  #482 = Utf8               headers\n+  #483 = Utf8               sparseHeaders\n+  #484 = Utf8               LocalVariableTypeTable\n+  #485 = Utf8               (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;)V\n+  #486 = Utf8               start\n+  #487 = Utf8               J\n+  #488 = Utf8               zeroBlockSize\n+  #489 = Utf8               sparseHeader\n+  #490 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;\n+  #491 = Utf8               streams\n+  #492 = Utf8               zeroInputStream\n+  #493 = Utf8               Ljava/io/InputStream;\n+  #494 = Utf8               offset\n+  #495 = Utf8               numberOfZeroBytesInSparseEntry\n+  #496 = Utf8               Ljava/util/List<Ljava/io/InputStream;>;\n+  #497 = Utf8               bytesReadOfLastBlock\n+  #498 = Utf8               getEntries\n+  #499 = Utf8               ()Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;>;\n+  #500 = Utf8               ex\n+  #501 = Utf8               Ljava/lang/RuntimeException;\n+  #502 = Utf8               length\n+  #503 = Utf8               in\n+  #504 = Utf8               longName\n+  #505 = Utf8               Ljava/io/ByteArrayOutputStream;\n+  #506 = Utf8               longNameData\n+  #507 = Class              #52           // \"[B\"\n+  #508 = Utf8               e\n+  #509 = Utf8               Ljava/lang/IllegalArgumentException;\n+  #510 = Utf8               longLinkData\n+  #511 = Utf8               name\n+  #512 = Utf8               Ljava/lang/NumberFormatException;\n+  #513 = Utf8               headerBuf\n+  #514 = Utf8               input\n+  #515 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveSparseEntry;\n+  #516 = Utf8               readNow\n+  #517 = Utf8               newPosition\n+  #518 = Utf8               currPosition\n+  #519 = Utf8               b\n+  #520 = Utf8               numRecords\n+  #521 = Utf8               padding\n+  #522 = Utf8               shouldReset\n+  #523 = Utf8               access$000\n+  #524 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarFile;)Ljava/util/Map;\n+  #525 = Utf8               x0\n+  #526 = Utf8               SourceFile\n+  #527 = Utf8               TarFile.java\n+  #528 = Utf8               InnerClasses\n+  #529 = Utf8               BoundedTarEntryInputStream\n {\n   private static final int SMALL_BUFFER_SIZE = 256;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 256\n \n   private final byte[] smallBuf;\n@@ -554,15 +554,15 @@\n   private final org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final java.util.LinkedList<org.apache.commons.compress.archivers.tar.TarArchiveEntry> entries;\n     descriptor: Ljava/util/LinkedList;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n-    Signature: #163                         // Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;>;\n+    Signature: #459                         // Ljava/util/LinkedList<Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;>;\n \n   private final int blockSize;\n     descriptor: I\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final boolean lenient;\n     descriptor: Z\n@@ -575,45 +575,45 @@\n   private final java.nio.ByteBuffer recordBuffer;\n     descriptor: Ljava/nio/ByteBuffer;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> globalSparseHeaders;\n     descriptor: Ljava/util/List;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n-    Signature: #172                         // Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+    Signature: #460                         // Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n \n   private boolean hasHitEOF;\n     descriptor: Z\n     flags: (0x0002) ACC_PRIVATE\n \n   private org.apache.commons.compress.archivers.tar.TarArchiveEntry currEntry;\n     descriptor: Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n     flags: (0x0002) ACC_PRIVATE\n \n   private java.util.Map<java.lang.String, java.lang.String> globalPaxHeaders;\n     descriptor: Ljava/util/Map;\n     flags: (0x0002) ACC_PRIVATE\n-    Signature: #178                         // Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+    Signature: #461                         // Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n \n   private final java.util.Map<java.lang.String, java.util.List<java.io.InputStream>> sparseInputStreams;\n     descriptor: Ljava/util/Map;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n-    Signature: #180                         // Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Ljava/io/InputStream;>;>;\n+    Signature: #462                         // Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Ljava/io/InputStream;>;>;\n \n   public org.apache.commons.compress.archivers.tar.TarFile(byte[]) throws java.io.IOException;\n     descriptor: ([B)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n-         1: new           #2                  // class org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n+         1: new           #7                  // class org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n          4: dup\n          5: aload_1\n-         6: invokespecial #3                  // Method org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n-         9: invokespecial #4                  // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;)V\n+         6: invokespecial #9                  // Method org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n+         9: invokespecial #13                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;)V\n         12: return\n       LineNumberTable:\n         line 190: 0\n         line 191: 12\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      13     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -623,23 +623,23 @@\n \n   public org.apache.commons.compress.archivers.tar.TarFile(byte[], boolean) throws java.io.IOException;\n     descriptor: ([BZ)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=3, args_size=3\n          0: aload_0\n-         1: new           #2                  // class org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n+         1: new           #7                  // class org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n          4: dup\n          5: aload_1\n-         6: invokespecial #3                  // Method org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n+         6: invokespecial #9                  // Method org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n          9: sipush        10240\n         12: sipush        512\n         15: aconst_null\n         16: iload_2\n-        17: invokespecial #6                  // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n+        17: invokespecial #18                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n         20: return\n       LineNumberTable:\n         line 203: 0\n         line 204: 20\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      21     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -650,23 +650,23 @@\n \n   public org.apache.commons.compress.archivers.tar.TarFile(byte[], java.lang.String) throws java.io.IOException;\n     descriptor: ([BLjava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=3, args_size=3\n          0: aload_0\n-         1: new           #2                  // class org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n+         1: new           #7                  // class org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n          4: dup\n          5: aload_1\n-         6: invokespecial #3                  // Method org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n+         6: invokespecial #9                  // Method org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n          9: sipush        10240\n         12: sipush        512\n         15: aload_2\n         16: iconst_0\n-        17: invokespecial #6                  // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n+        17: invokespecial #18                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n         20: return\n       LineNumberTable:\n         line 214: 0\n         line 215: 20\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      21     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -678,16 +678,16 @@\n   public org.apache.commons.compress.archivers.tar.TarFile(java.io.File) throws java.io.IOException;\n     descriptor: (Ljava/io/File;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokevirtual #7                  // Method java/io/File.toPath:()Ljava/nio/file/Path;\n-         5: invokespecial #8                  // Method \"<init>\":(Ljava/nio/file/Path;)V\n+         2: invokevirtual #21                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+         5: invokespecial #27                 // Method \"<init>\":(Ljava/nio/file/Path;)V\n          8: return\n       LineNumberTable:\n         line 224: 0\n         line 225: 8\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -698,17 +698,17 @@\n   public org.apache.commons.compress.archivers.tar.TarFile(java.io.File, boolean) throws java.io.IOException;\n     descriptor: (Ljava/io/File;Z)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n-         2: invokevirtual #7                  // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+         2: invokevirtual #21                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n          5: iload_2\n-         6: invokespecial #9                  // Method \"<init>\":(Ljava/nio/file/Path;Z)V\n+         6: invokespecial #30                 // Method \"<init>\":(Ljava/nio/file/Path;Z)V\n          9: return\n       LineNumberTable:\n         line 237: 0\n         line 238: 9\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -720,17 +720,17 @@\n   public org.apache.commons.compress.archivers.tar.TarFile(java.io.File, java.lang.String) throws java.io.IOException;\n     descriptor: (Ljava/io/File;Ljava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n-         2: invokevirtual #7                  // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+         2: invokevirtual #21                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n          5: aload_2\n-         6: invokespecial #10                 // Method \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n+         6: invokespecial #33                 // Method \"<init>\":(Ljava/nio/file/Path;Ljava/lang/String;)V\n          9: return\n       LineNumberTable:\n         line 248: 0\n         line 249: 9\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -743,21 +743,21 @@\n     descriptor: (Ljava/nio/file/Path;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n-         3: anewarray     #11                 // class java/nio/file/OpenOption\n-         6: invokestatic  #12                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+         3: anewarray     #36                 // class java/nio/file/OpenOption\n+         6: invokestatic  #38                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n          9: sipush        10240\n         12: sipush        512\n         15: aconst_null\n         16: iconst_0\n-        17: invokespecial #6                  // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n+        17: invokespecial #18                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n         20: return\n       LineNumberTable:\n         line 258: 0\n         line 259: 20\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      21     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -769,21 +769,21 @@\n     descriptor: (Ljava/nio/file/Path;Z)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n-         3: anewarray     #11                 // class java/nio/file/OpenOption\n-         6: invokestatic  #12                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+         3: anewarray     #36                 // class java/nio/file/OpenOption\n+         6: invokestatic  #38                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n          9: sipush        10240\n         12: sipush        512\n         15: aconst_null\n         16: iload_2\n-        17: invokespecial #6                  // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n+        17: invokespecial #18                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n         20: return\n       LineNumberTable:\n         line 271: 0\n         line 272: 20\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      21     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -796,21 +796,21 @@\n     descriptor: (Ljava/nio/file/Path;Ljava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n-         3: anewarray     #11                 // class java/nio/file/OpenOption\n-         6: invokestatic  #12                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+         3: anewarray     #36                 // class java/nio/file/OpenOption\n+         6: invokestatic  #38                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n          9: sipush        10240\n         12: sipush        512\n         15: aload_2\n         16: iconst_0\n-        17: invokespecial #6                  // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n+        17: invokespecial #18                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n         20: return\n       LineNumberTable:\n         line 282: 0\n         line 283: 20\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      21     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -826,15 +826,15 @@\n       stack=6, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: sipush        10240\n          5: sipush        512\n          8: aconst_null\n          9: iconst_0\n-        10: invokespecial #6                  // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n+        10: invokespecial #18                 // Method \"<init>\":(Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n         13: return\n       LineNumberTable:\n         line 292: 0\n         line 293: 13\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      14     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -844,69 +844,69 @@\n \n   public org.apache.commons.compress.archivers.tar.TarFile(java.nio.channels.SeekableByteChannel, int, int, java.lang.String, boolean) throws java.io.IOException;\n     descriptor: (Ljava/nio/channels/SeekableByteChannel;IILjava/lang/String;Z)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=7, args_size=6\n          0: aload_0\n-         1: invokespecial #13                 // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #44                 // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n          5: sipush        256\n          8: newarray       byte\n-        10: putfield      #15                 // Field smallBuf:[B\n+        10: putfield      #49                 // Field smallBuf:[B\n         13: aload_0\n-        14: new           #16                 // class java/util/LinkedList\n+        14: new           #53                 // class java/util/LinkedList\n         17: dup\n-        18: invokespecial #17                 // Method java/util/LinkedList.\"<init>\":()V\n-        21: putfield      #18                 // Field entries:Ljava/util/LinkedList;\n+        18: invokespecial #55                 // Method java/util/LinkedList.\"<init>\":()V\n+        21: putfield      #56                 // Field entries:Ljava/util/LinkedList;\n         24: aload_0\n-        25: new           #19                 // class java/util/ArrayList\n+        25: new           #60                 // class java/util/ArrayList\n         28: dup\n-        29: invokespecial #20                 // Method java/util/ArrayList.\"<init>\":()V\n-        32: putfield      #21                 // Field globalSparseHeaders:Ljava/util/List;\n+        29: invokespecial #62                 // Method java/util/ArrayList.\"<init>\":()V\n+        32: putfield      #63                 // Field globalSparseHeaders:Ljava/util/List;\n         35: aload_0\n-        36: new           #22                 // class java/util/HashMap\n+        36: new           #67                 // class java/util/HashMap\n         39: dup\n-        40: invokespecial #23                 // Method java/util/HashMap.\"<init>\":()V\n-        43: putfield      #24                 // Field globalPaxHeaders:Ljava/util/Map;\n+        40: invokespecial #69                 // Method java/util/HashMap.\"<init>\":()V\n+        43: putfield      #70                 // Field globalPaxHeaders:Ljava/util/Map;\n         46: aload_0\n-        47: new           #22                 // class java/util/HashMap\n+        47: new           #67                 // class java/util/HashMap\n         50: dup\n-        51: invokespecial #23                 // Method java/util/HashMap.\"<init>\":()V\n+        51: invokespecial #69                 // Method java/util/HashMap.\"<init>\":()V\n         54: putfield      #1                  // Field sparseInputStreams:Ljava/util/Map;\n         57: aload_0\n         58: aload_1\n-        59: putfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        59: putfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         62: aload_0\n         63: aload         4\n-        65: invokestatic  #26                 // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-        68: putfield      #27                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        65: invokestatic  #77                 // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        68: putfield      #83                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n         71: aload_0\n         72: iload_3\n-        73: putfield      #28                 // Field recordSize:I\n+        73: putfield      #87                 // Field recordSize:I\n         76: aload_0\n         77: aload_0\n-        78: getfield      #28                 // Field recordSize:I\n-        81: invokestatic  #29                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-        84: putfield      #30                 // Field recordBuffer:Ljava/nio/ByteBuffer;\n+        78: getfield      #87                 // Field recordSize:I\n+        81: invokestatic  #91                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+        84: putfield      #97                 // Field recordBuffer:Ljava/nio/ByteBuffer;\n         87: aload_0\n         88: iload_2\n-        89: putfield      #31                 // Field blockSize:I\n+        89: putfield      #101                // Field blockSize:I\n         92: aload_0\n         93: iload         5\n-        95: putfield      #32                 // Field lenient:Z\n+        95: putfield      #104                // Field lenient:Z\n         98: aload_0\n-        99: invokespecial #33                 // Method getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        99: invokespecial #108                // Method getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n        102: dup\n        103: astore        6\n        105: ifnull        121\n        108: aload_0\n-       109: getfield      #18                 // Field entries:Ljava/util/LinkedList;\n+       109: getfield      #56                 // Field entries:Ljava/util/LinkedList;\n        112: aload         6\n-       114: invokevirtual #34                 // Method java/util/LinkedList.add:(Ljava/lang/Object;)Z\n+       114: invokevirtual #112                // Method java/util/LinkedList.add:(Ljava/lang/Object;)Z\n        117: pop\n        118: goto          98\n        121: return\n       LineNumberTable:\n         line 307: 0\n         line 149: 4\n         line 158: 13\n@@ -944,21 +944,21 @@\n \n   private void applyPaxHeadersToCurrentEntry(java.util.Map<java.lang.String, java.lang.String>, java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse>) throws java.io.IOException;\n     descriptor: (Ljava/util/Map;Ljava/util/List;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=3, args_size=3\n          0: aload_0\n-         1: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+         1: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n          4: aload_1\n-         5: invokevirtual #36                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.updateEntryFromPaxHeaders:(Ljava/util/Map;)V\n+         5: invokevirtual #120                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.updateEntryFromPaxHeaders:(Ljava/util/Map;)V\n          8: aload_0\n-         9: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+         9: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n         12: aload_2\n-        13: invokevirtual #37                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSparseHeaders:(Ljava/util/List;)V\n+        13: invokevirtual #126                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSparseHeaders:(Ljava/util/List;)V\n         16: return\n       LineNumberTable:\n         line 328: 0\n         line 329: 8\n         line 330: 16\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -967,128 +967,128 @@\n             0      17     2 sparseHeaders   Ljava/util/List;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      17     1 headers   Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n             0      17     2 sparseHeaders   Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #213                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;)V\n+    Signature: #485                         // (Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;)V\n \n   private void buildSparseInputStreams() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=8, locals=14, args_size=1\n-         0: new           #19                 // class java/util/ArrayList\n+         0: new           #60                 // class java/util/ArrayList\n          3: dup\n-         4: invokespecial #20                 // Method java/util/ArrayList.\"<init>\":()V\n+         4: invokespecial #62                 // Method java/util/ArrayList.\"<init>\":()V\n          7: astore_1\n          8: aload_0\n-         9: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        12: invokevirtual #38                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getOrderedSparseHeaders:()Ljava/util/List;\n+         9: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        12: invokevirtual #130                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getOrderedSparseHeaders:()Ljava/util/List;\n         15: astore_2\n-        16: new           #39                 // class org/apache/commons/compress/archivers/tar/TarArchiveSparseZeroInputStream\n+        16: new           #134                // class org/apache/commons/compress/archivers/tar/TarArchiveSparseZeroInputStream\n         19: dup\n-        20: invokespecial #40                 // Method org/apache/commons/compress/archivers/tar/TarArchiveSparseZeroInputStream.\"<init>\":()V\n+        20: invokespecial #136                // Method org/apache/commons/compress/archivers/tar/TarArchiveSparseZeroInputStream.\"<init>\":()V\n         23: astore_3\n         24: lconst_0\n         25: lstore        4\n         27: lconst_0\n         28: lstore        6\n         30: aload_2\n-        31: invokeinterface #41,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n+        31: invokeinterface #137,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n         36: astore        8\n         38: aload         8\n-        40: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z\n+        40: invokeinterface #143,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z\n         45: ifeq          211\n         48: aload         8\n-        50: invokeinterface #43,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n-        55: checkcast     #44                 // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n+        50: invokeinterface #149,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n+        55: checkcast     #153                // class org/apache/commons/compress/archivers/tar/TarArchiveStructSparse\n         58: astore        9\n         60: aload         9\n-        62: invokevirtual #45                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+        62: invokevirtual #155                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n         65: lload         4\n         67: lsub\n         68: lstore        10\n         70: lload         10\n         72: lconst_0\n         73: lcmp\n         74: ifge          87\n-        77: new           #46                 // class java/io/IOException\n+        77: new           #159                // class java/io/IOException\n         80: dup\n-        81: ldc           #47                 // String Corrupted struct sparse detected\n-        83: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        81: ldc           #161                // String Corrupted struct sparse detected\n+        83: invokespecial #163                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         86: athrow\n         87: lload         10\n         89: lconst_0\n         90: lcmp\n         91: ifle          118\n         94: aload_1\n-        95: new           #49                 // class org/apache/commons/compress/utils/BoundedInputStream\n+        95: new           #166                // class org/apache/commons/compress/utils/BoundedInputStream\n         98: dup\n         99: aload_3\n        100: lload         10\n-       102: invokespecial #50                 // Method org/apache/commons/compress/utils/BoundedInputStream.\"<init>\":(Ljava/io/InputStream;J)V\n-       105: invokeinterface #51,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       102: invokespecial #168                // Method org/apache/commons/compress/utils/BoundedInputStream.\"<init>\":(Ljava/io/InputStream;J)V\n+       105: invokeinterface #171,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n        110: pop\n        111: lload         6\n        113: lload         10\n        115: ladd\n        116: lstore        6\n        118: aload         9\n-       120: invokevirtual #52                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n+       120: invokevirtual #172                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n        123: lconst_0\n        124: lcmp\n        125: ifle          195\n        128: aload_0\n-       129: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       132: invokevirtual #53                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n+       129: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       132: invokevirtual #175                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n        135: aload         9\n-       137: invokevirtual #45                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+       137: invokevirtual #155                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n        140: ladd\n        141: lload         6\n        143: lsub\n        144: lstore        12\n        146: lload         12\n        148: aload         9\n-       150: invokevirtual #52                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n+       150: invokevirtual #172                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n        153: ladd\n        154: lload         12\n        156: lcmp\n        157: ifge          170\n-       160: new           #46                 // class java/io/IOException\n+       160: new           #159                // class java/io/IOException\n        163: dup\n-       164: ldc           #54                 // String Unreadable TAR archive, sparse block offset or length too big\n-       166: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       164: ldc           #178                // String Unreadable TAR archive, sparse block offset or length too big\n+       166: invokespecial #163                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        169: athrow\n        170: aload_1\n-       171: new           #55                 // class org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n+       171: new           #180                // class org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n        174: dup\n        175: lload         12\n        177: aload         9\n-       179: invokevirtual #52                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n+       179: invokevirtual #172                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n        182: aload_0\n-       183: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-       186: invokespecial #56                 // Method org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream.\"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n-       189: invokeinterface #51,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+       183: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+       186: invokespecial #182                // Method org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream.\"<init>\":(JJLjava/nio/channels/SeekableByteChannel;)V\n+       189: invokeinterface #171,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n        194: pop\n        195: aload         9\n-       197: invokevirtual #45                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n+       197: invokevirtual #155                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getOffset:()J\n        200: aload         9\n-       202: invokevirtual #52                 // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n+       202: invokevirtual #172                // Method org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.getNumbytes:()J\n        205: ladd\n        206: lstore        4\n        208: goto          38\n        211: aload_0\n        212: getfield      #1                  // Field sparseInputStreams:Ljava/util/Map;\n        215: aload_0\n-       216: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       219: invokevirtual #57                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getName:()Ljava/lang/String;\n+       216: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       219: invokevirtual #185                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getName:()Ljava/lang/String;\n        222: aload_1\n-       223: invokeinterface #58,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+       223: invokeinterface #189,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n        228: pop\n        229: return\n       LineNumberTable:\n         line 341: 0\n         line 343: 8\n         line 346: 16\n         line 348: 24\n@@ -1146,16 +1146,16 @@\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-         4: invokeinterface #59,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.close:()V\n+         1: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+         4: invokeinterface #195,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.close:()V\n          9: return\n       LineNumberTable:\n         line 382: 0\n         line 383: 9\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -1164,32 +1164,32 @@\n \n   private void consumeRemainderOfLastBlock() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=3, args_size=1\n          0: aload_0\n-         1: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-         4: invokeinterface #60,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+         1: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+         4: invokeinterface #200,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n          9: aload_0\n-        10: getfield      #31                 // Field blockSize:I\n+        10: getfield      #101                // Field blockSize:I\n         13: i2l\n         14: lrem\n         15: lstore_1\n         16: lload_1\n         17: lconst_0\n         18: lcmp\n         19: ifle          33\n         22: aload_0\n         23: aload_0\n-        24: getfield      #31                 // Field blockSize:I\n+        24: getfield      #101                // Field blockSize:I\n         27: i2l\n         28: lload_1\n         29: lsub\n-        30: invokespecial #61                 // Method repositionForwardBy:(J)V\n+        30: invokespecial #203                // Method repositionForwardBy:(J)V\n         33: return\n       LineNumberTable:\n         line 391: 0\n         line 392: 16\n         line 393: 22\n         line 395: 33\n       LocalVariableTable:\n@@ -1204,46 +1204,46 @@\n       throws java.io.IOException\n \n   public java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveEntry> getEntries();\n     descriptor: ()Ljava/util/List;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=1, args_size=1\n-         0: new           #19                 // class java/util/ArrayList\n+         0: new           #60                 // class java/util/ArrayList\n          3: dup\n          4: aload_0\n-         5: getfield      #18                 // Field entries:Ljava/util/LinkedList;\n-         8: invokespecial #62                 // Method java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n+         5: getfield      #56                 // Field entries:Ljava/util/LinkedList;\n+         8: invokespecial #207                // Method java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n         11: areturn\n       LineNumberTable:\n         line 403: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      12     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n-    Signature: #235                         // ()Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;>;\n+    Signature: #499                         // ()Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;>;\n \n   public java.io.InputStream getInputStream(org.apache.commons.compress.archivers.tar.TarArchiveEntry) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=3, args_size=2\n-         0: new           #63                 // class org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n+         0: new           #210                // class org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n          3: dup\n          4: aload_0\n          5: aload_1\n          6: aload_0\n-         7: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        10: invokespecial #64                 // Method org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/tar/TarFile;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/nio/channels/SeekableByteChannel;)V\n+         7: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        10: invokespecial #212                // Method org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/tar/TarFile;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/nio/channels/SeekableByteChannel;)V\n         13: areturn\n         14: astore_2\n-        15: new           #46                 // class java/io/IOException\n+        15: new           #159                // class java/io/IOException\n         18: dup\n-        19: ldc           #66                 // String Corrupted TAR archive. Can\\'t read entry\n+        19: ldc           #217                // String Corrupted TAR archive. Can\\'t read entry\n         21: aload_2\n-        22: invokespecial #67                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+        22: invokespecial #219                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n         25: athrow\n       Exception table:\n          from    to  target type\n              0    13    14   Class java/lang/RuntimeException\n       LineNumberTable:\n         line 414: 0\n         line 415: 14\n@@ -1260,64 +1260,64 @@\n       throws java.io.IOException\n \n   private byte[] getLongNameData() throws java.io.IOException;\n     descriptor: ()[B\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=6, args_size=1\n-         0: new           #68                 // class java/io/ByteArrayOutputStream\n+         0: new           #222                // class java/io/ByteArrayOutputStream\n          3: dup\n-         4: invokespecial #69                 // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n+         4: invokespecial #224                // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n          7: astore_1\n          8: aload_0\n          9: aload_0\n-        10: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        13: invokevirtual #70                 // Method getInputStream:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n+        10: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        13: invokevirtual #225                // Method getInputStream:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n         16: astore_3\n         17: aload_3\n         18: aload_0\n-        19: getfield      #15                 // Field smallBuf:[B\n-        22: invokevirtual #71                 // Method java/io/InputStream.read:([B)I\n+        19: getfield      #49                 // Field smallBuf:[B\n+        22: invokevirtual #229                // Method java/io/InputStream.read:([B)I\n         25: dup\n         26: istore_2\n         27: iflt          43\n         30: aload_1\n         31: aload_0\n-        32: getfield      #15                 // Field smallBuf:[B\n+        32: getfield      #49                 // Field smallBuf:[B\n         35: iconst_0\n         36: iload_2\n-        37: invokevirtual #72                 // Method java/io/ByteArrayOutputStream.write:([BII)V\n+        37: invokevirtual #235                // Method java/io/ByteArrayOutputStream.write:([BII)V\n         40: goto          17\n         43: aload_3\n         44: ifnull        79\n         47: aload_3\n-        48: invokevirtual #73                 // Method java/io/InputStream.close:()V\n+        48: invokevirtual #239                // Method java/io/InputStream.close:()V\n         51: goto          79\n         54: astore        4\n         56: aload_3\n         57: ifnull        76\n         60: aload_3\n-        61: invokevirtual #73                 // Method java/io/InputStream.close:()V\n+        61: invokevirtual #239                // Method java/io/InputStream.close:()V\n         64: goto          76\n         67: astore        5\n         69: aload         4\n         71: aload         5\n-        73: invokevirtual #75                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+        73: invokevirtual #242                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n         76: aload         4\n         78: athrow\n         79: aload_0\n-        80: invokespecial #33                 // Method getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        80: invokespecial #108                // Method getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n         83: pop\n         84: aload_0\n-        85: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        85: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n         88: ifnonnull     93\n         91: aconst_null\n         92: areturn\n         93: aload_1\n-        94: invokevirtual #76                 // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n+        94: invokevirtual #246                // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n         97: astore_3\n         98: aload_3\n         99: arraylength\n        100: istore_2\n        101: iload_2\n        102: ifle          119\n        105: aload_3\n@@ -1330,15 +1330,15 @@\n        116: goto          101\n        119: iload_2\n        120: aload_3\n        121: arraylength\n        122: if_icmpeq     131\n        125: aload_3\n        126: iload_2\n-       127: invokestatic  #77                 // Method java/util/Arrays.copyOf:([BI)[B\n+       127: invokestatic  #250                // Method java/util/Arrays.copyOf:([BI)[B\n        130: astore_3\n        131: aload_3\n        132: areturn\n       Exception table:\n          from    to  target type\n             17    43    54   Class java/lang/Throwable\n             60    64    67   Class java/lang/Throwable\n@@ -1399,172 +1399,172 @@\n \n   private org.apache.commons.compress.archivers.tar.TarArchiveEntry getNextTarEntry() throws java.io.IOException;\n     descriptor: ()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=9, locals=4, args_size=1\n          0: aload_0\n-         1: invokevirtual #78                 // Method isAtEOF:()Z\n+         1: invokevirtual #256                // Method isAtEOF:()Z\n          4: ifeq          9\n          7: aconst_null\n          8: areturn\n          9: aload_0\n-        10: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        10: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n         13: ifnull        43\n         16: aload_0\n         17: aload_0\n-        18: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        21: invokevirtual #53                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n+        18: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        21: invokevirtual #175                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n         24: aload_0\n-        25: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        28: invokevirtual #79                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+        25: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        28: invokevirtual #259                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n         31: ladd\n-        32: invokespecial #80                 // Method repositionForwardTo:(J)V\n+        32: invokespecial #262                // Method repositionForwardTo:(J)V\n         35: aload_0\n-        36: invokespecial #81                 // Method throwExceptionIfPositionIsNotInArchive:()V\n+        36: invokespecial #265                // Method throwExceptionIfPositionIsNotInArchive:()V\n         39: aload_0\n-        40: invokespecial #82                 // Method skipRecordPadding:()V\n+        40: invokespecial #268                // Method skipRecordPadding:()V\n         43: aload_0\n-        44: invokespecial #83                 // Method getRecord:()Ljava/nio/ByteBuffer;\n+        44: invokespecial #271                // Method getRecord:()Ljava/nio/ByteBuffer;\n         47: astore_1\n         48: aconst_null\n         49: aload_1\n         50: if_acmpne     60\n         53: aload_0\n         54: aconst_null\n-        55: putfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        55: putfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n         58: aconst_null\n         59: areturn\n         60: aload_0\n-        61: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        64: invokeinterface #60,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+        61: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        64: invokeinterface #200,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n         69: lstore_2\n         70: aload_0\n-        71: new           #84                 // class org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+        71: new           #121                // class org/apache/commons/compress/archivers/tar/TarArchiveEntry\n         74: dup\n         75: aload_0\n-        76: getfield      #24                 // Field globalPaxHeaders:Ljava/util/Map;\n+        76: getfield      #70                 // Field globalPaxHeaders:Ljava/util/Map;\n         79: aload_1\n-        80: invokevirtual #85                 // Method java/nio/ByteBuffer.array:()[B\n+        80: invokevirtual #275                // Method java/nio/ByteBuffer.array:()[B\n         83: aload_0\n-        84: getfield      #27                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        84: getfield      #83                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n         87: aload_0\n-        88: getfield      #32                 // Field lenient:Z\n+        88: getfield      #104                // Field lenient:Z\n         91: lload_2\n-        92: invokespecial #86                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZJ)V\n-        95: putfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        98: goto          113\n+        92: invokespecial #278                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.\"<init>\":(Ljava/util/Map;[BLorg/apache/commons/compress/archivers/zip/ZipEncoding;ZJ)V\n+        95: putfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        98: goto          114\n        101: astore_2\n-       102: new           #46                 // class java/io/IOException\n+       102: new           #159                // class java/io/IOException\n        105: dup\n-       106: ldc           #88                 // String Error detected parsing the header\n-       108: aload_2\n-       109: invokespecial #67                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-       112: athrow\n-       113: aload_0\n-       114: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       117: invokevirtual #89                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongLinkEntry:()Z\n-       120: ifeq          151\n-       123: aload_0\n-       124: invokespecial #90                 // Method getLongNameData:()[B\n-       127: astore_2\n-       128: aload_2\n-       129: ifnonnull     134\n-       132: aconst_null\n-       133: areturn\n-       134: aload_0\n-       135: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       138: aload_0\n-       139: getfield      #27                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-       142: aload_2\n-       143: invokeinterface #91,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-       148: invokevirtual #92                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setLinkName:(Ljava/lang/String;)V\n-       151: aload_0\n-       152: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       155: invokevirtual #93                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongNameEntry:()Z\n-       158: ifeq          236\n-       161: aload_0\n-       162: invokespecial #90                 // Method getLongNameData:()[B\n-       165: astore_2\n-       166: aload_2\n-       167: ifnonnull     172\n-       170: aconst_null\n-       171: areturn\n-       172: aload_0\n-       173: getfield      #27                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-       176: aload_2\n-       177: invokeinterface #91,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-       182: astore_3\n-       183: aload_0\n-       184: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       187: aload_3\n-       188: invokevirtual #94                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setName:(Ljava/lang/String;)V\n-       191: aload_0\n-       192: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       195: invokevirtual #95                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n-       198: ifeq          236\n-       201: aload_3\n-       202: ldc           #96                 // String /\n-       204: invokevirtual #97                 // Method java/lang/String.endsWith:(Ljava/lang/String;)Z\n-       207: ifne          236\n-       210: aload_0\n-       211: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       214: new           #98                 // class java/lang/StringBuilder\n-       217: dup\n-       218: invokespecial #99                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       221: aload_3\n-       222: invokevirtual #100                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       225: ldc           #96                 // String /\n-       227: invokevirtual #100                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       230: invokevirtual #101                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       233: invokevirtual #94                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setName:(Ljava/lang/String;)V\n-       236: aload_0\n-       237: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       240: invokevirtual #102                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGlobalPaxHeader:()Z\n-       243: ifeq          250\n-       246: aload_0\n-       247: invokespecial #103                // Method readGlobalPaxHeaders:()V\n-       250: aload_0\n-       251: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       254: invokevirtual #104                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxHeader:()Z\n-       257: ifeq          267\n-       260: aload_0\n-       261: invokespecial #105                // Method paxHeaders:()V\n-       264: goto          291\n-       267: aload_0\n-       268: getfield      #24                 // Field globalPaxHeaders:Ljava/util/Map;\n-       271: invokeinterface #106,  1          // InterfaceMethod java/util/Map.isEmpty:()Z\n-       276: ifne          291\n-       279: aload_0\n-       280: aload_0\n-       281: getfield      #24                 // Field globalPaxHeaders:Ljava/util/Map;\n-       284: aload_0\n-       285: getfield      #21                 // Field globalSparseHeaders:Ljava/util/List;\n-       288: invokespecial #107                // Method applyPaxHeadersToCurrentEntry:(Ljava/util/Map;Ljava/util/List;)V\n-       291: goto          306\n-       294: astore_2\n-       295: new           #46                 // class java/io/IOException\n-       298: dup\n-       299: ldc           #109                // String Error detected parsing the pax header\n-       301: aload_2\n-       302: invokespecial #67                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-       305: athrow\n-       306: aload_0\n-       307: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       310: invokevirtual #110                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isOldGNUSparse:()Z\n-       313: ifeq          320\n-       316: aload_0\n-       317: invokespecial #111                // Method readOldGNUSparse:()V\n+       106: ldc_w         #283                // String Error detected parsing the header\n+       109: aload_2\n+       110: invokespecial #219                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+       113: athrow\n+       114: aload_0\n+       115: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       118: invokevirtual #285                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongLinkEntry:()Z\n+       121: ifeq          152\n+       124: aload_0\n+       125: invokespecial #288                // Method getLongNameData:()[B\n+       128: astore_2\n+       129: aload_2\n+       130: ifnonnull     135\n+       133: aconst_null\n+       134: areturn\n+       135: aload_0\n+       136: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       139: aload_0\n+       140: getfield      #83                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+       143: aload_2\n+       144: invokeinterface #291,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+       149: invokevirtual #297                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setLinkName:(Ljava/lang/String;)V\n+       152: aload_0\n+       153: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       156: invokevirtual #300                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGNULongNameEntry:()Z\n+       159: ifeq          239\n+       162: aload_0\n+       163: invokespecial #288                // Method getLongNameData:()[B\n+       166: astore_2\n+       167: aload_2\n+       168: ifnonnull     173\n+       171: aconst_null\n+       172: areturn\n+       173: aload_0\n+       174: getfield      #83                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+       177: aload_2\n+       178: invokeinterface #291,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+       183: astore_3\n+       184: aload_0\n+       185: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       188: aload_3\n+       189: invokevirtual #303                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setName:(Ljava/lang/String;)V\n+       192: aload_0\n+       193: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       196: invokevirtual #306                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n+       199: ifeq          239\n+       202: aload_3\n+       203: ldc_w         #309                // String /\n+       206: invokevirtual #311                // Method java/lang/String.endsWith:(Ljava/lang/String;)Z\n+       209: ifne          239\n+       212: aload_0\n+       213: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       216: new           #317                // class java/lang/StringBuilder\n+       219: dup\n+       220: invokespecial #319                // Method java/lang/StringBuilder.\"<init>\":()V\n+       223: aload_3\n+       224: invokevirtual #320                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       227: ldc_w         #309                // String /\n+       230: invokevirtual #320                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       233: invokevirtual #324                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       236: invokevirtual #303                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setName:(Ljava/lang/String;)V\n+       239: aload_0\n+       240: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       243: invokevirtual #327                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isGlobalPaxHeader:()Z\n+       246: ifeq          253\n+       249: aload_0\n+       250: invokespecial #330                // Method readGlobalPaxHeaders:()V\n+       253: aload_0\n+       254: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       257: invokevirtual #333                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxHeader:()Z\n+       260: ifeq          270\n+       263: aload_0\n+       264: invokespecial #336                // Method paxHeaders:()V\n+       267: goto          294\n+       270: aload_0\n+       271: getfield      #70                 // Field globalPaxHeaders:Ljava/util/Map;\n+       274: invokeinterface #339,  1          // InterfaceMethod java/util/Map.isEmpty:()Z\n+       279: ifne          294\n+       282: aload_0\n+       283: aload_0\n+       284: getfield      #70                 // Field globalPaxHeaders:Ljava/util/Map;\n+       287: aload_0\n+       288: getfield      #63                 // Field globalSparseHeaders:Ljava/util/List;\n+       291: invokespecial #342                // Method applyPaxHeadersToCurrentEntry:(Ljava/util/Map;Ljava/util/List;)V\n+       294: goto          310\n+       297: astore_2\n+       298: new           #159                // class java/io/IOException\n+       301: dup\n+       302: ldc_w         #348                // String Error detected parsing the pax header\n+       305: aload_2\n+       306: invokespecial #219                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+       309: athrow\n+       310: aload_0\n+       311: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       314: invokevirtual #350                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isOldGNUSparse:()Z\n+       317: ifeq          324\n        320: aload_0\n-       321: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       324: areturn\n+       321: invokespecial #353                // Method readOldGNUSparse:()V\n+       324: aload_0\n+       325: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       328: areturn\n       Exception table:\n          from    to  target type\n             60    98   101   Class java/lang/IllegalArgumentException\n-           250   291   294   Class java/lang/NumberFormatException\n+           253   294   297   Class java/lang/NumberFormatException\n       LineNumberTable:\n         line 466: 0\n         line 467: 7\n         line 470: 9\n         line 472: 16\n         line 473: 35\n         line 474: 39\n@@ -1573,100 +1573,100 @@\n         line 480: 53\n         line 481: 58\n         line 485: 60\n         line 486: 70\n         line 489: 98\n         line 487: 101\n         line 488: 102\n-        line 491: 113\n-        line 492: 123\n-        line 493: 128\n-        line 497: 132\n-        line 499: 134\n-        line 502: 151\n-        line 503: 161\n-        line 504: 166\n-        line 508: 170\n-        line 512: 172\n-        line 513: 183\n-        line 514: 191\n-        line 515: 210\n-        line 519: 236\n-        line 520: 246\n-        line 524: 250\n-        line 525: 260\n-        line 526: 267\n-        line 527: 279\n-        line 531: 291\n-        line 529: 294\n-        line 530: 295\n-        line 533: 306\n-        line 534: 316\n-        line 537: 320\n+        line 491: 114\n+        line 492: 124\n+        line 493: 129\n+        line 497: 133\n+        line 499: 135\n+        line 502: 152\n+        line 503: 162\n+        line 504: 167\n+        line 508: 171\n+        line 512: 173\n+        line 513: 184\n+        line 514: 192\n+        line 515: 212\n+        line 519: 239\n+        line 520: 249\n+        line 524: 253\n+        line 525: 263\n+        line 526: 270\n+        line 527: 282\n+        line 531: 294\n+        line 529: 297\n+        line 530: 298\n+        line 533: 310\n+        line 534: 320\n+        line 537: 324\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n            70      28     2 position   J\n-          102      11     2     e   Ljava/lang/IllegalArgumentException;\n-          128      23     2 longLinkData   [B\n-          166      70     2 longNameData   [B\n-          183      53     3  name   Ljava/lang/String;\n-          295      11     2     e   Ljava/lang/NumberFormatException;\n-            0     325     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n-           48     277     1 headerBuf   Ljava/nio/ByteBuffer;\n+          102      12     2     e   Ljava/lang/IllegalArgumentException;\n+          129      23     2 longLinkData   [B\n+          167      72     2 longNameData   [B\n+          184      55     3  name   Ljava/lang/String;\n+          298      12     2     e   Ljava/lang/NumberFormatException;\n+            0     329     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n+           48     281     1 headerBuf   Ljava/nio/ByteBuffer;\n       StackMapTable: number_of_entries = 15\n         frame_type = 9 /* same */\n         frame_type = 33 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 16\n           locals = [ class java/nio/ByteBuffer ]\n         frame_type = 104 /* same_locals_1_stack_item */\n           stack = [ class java/lang/IllegalArgumentException ]\n-        frame_type = 11 /* same */\n+        frame_type = 12 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 20\n           locals = [ class \"[B\" ]\n         frame_type = 250 /* chop */\n           offset_delta = 16\n         frame_type = 252 /* append */\n           offset_delta = 20\n           locals = [ class \"[B\" ]\n         frame_type = 250 /* chop */\n-          offset_delta = 63\n+          offset_delta = 65\n         frame_type = 13 /* same */\n         frame_type = 16 /* same */\n         frame_type = 23 /* same */\n         frame_type = 66 /* same_locals_1_stack_item */\n           stack = [ class java/lang/NumberFormatException ]\n-        frame_type = 11 /* same */\n+        frame_type = 12 /* same */\n         frame_type = 13 /* same */\n     Exceptions:\n       throws java.io.IOException\n \n   private java.nio.ByteBuffer getRecord() throws java.io.IOException;\n     descriptor: ()Ljava/nio/ByteBuffer;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: invokespecial #112                // Method readRecord:()Ljava/nio/ByteBuffer;\n+         1: invokespecial #356                // Method readRecord:()Ljava/nio/ByteBuffer;\n          4: astore_1\n          5: aload_0\n          6: aload_0\n          7: aload_1\n-         8: invokespecial #113                // Method isEOFRecord:(Ljava/nio/ByteBuffer;)Z\n-        11: invokevirtual #114                // Method setAtEOF:(Z)V\n+         8: invokespecial #359                // Method isEOFRecord:(Ljava/nio/ByteBuffer;)Z\n+        11: invokevirtual #363                // Method setAtEOF:(Z)V\n         14: aload_0\n-        15: invokevirtual #78                 // Method isAtEOF:()Z\n+        15: invokevirtual #256                // Method isAtEOF:()Z\n         18: ifeq          35\n         21: aload_1\n         22: ifnull        35\n         25: aload_0\n-        26: invokespecial #115                // Method tryToConsumeSecondEOFRecord:()V\n+        26: invokespecial #367                // Method tryToConsumeSecondEOFRecord:()V\n         29: aload_0\n-        30: invokespecial #116                // Method consumeRemainderOfLastBlock:()V\n+        30: invokespecial #370                // Method consumeRemainderOfLastBlock:()V\n         33: aconst_null\n         34: astore_1\n         35: aload_1\n         36: areturn\n       LineNumberTable:\n         line 555: 0\n         line 556: 5\n@@ -1688,33 +1688,33 @@\n \n   protected final boolean isAtEOF();\n     descriptor: ()Z\n     flags: (0x0014) ACC_PROTECTED, ACC_FINAL\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #117                // Field hasHitEOF:Z\n+         1: getfield      #373                // Field hasHitEOF:Z\n          4: ireturn\n       LineNumberTable:\n         line 567: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n \n   private boolean isDirectory();\n     descriptor: ()Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+         1: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n          4: ifnull        21\n          7: aload_0\n-         8: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        11: invokevirtual #95                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n+         8: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        11: invokevirtual #306                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isDirectory:()Z\n         14: ifeq          21\n         17: iconst_1\n         18: goto          22\n         21: iconst_0\n         22: ireturn\n       LineNumberTable:\n         line 571: 0\n@@ -1730,18 +1730,18 @@\n     descriptor: (Ljava/nio/ByteBuffer;)Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n          1: ifnull        18\n          4: aload_1\n-         5: invokevirtual #85                 // Method java/nio/ByteBuffer.array:()[B\n+         5: invokevirtual #275                // Method java/nio/ByteBuffer.array:()[B\n          8: aload_0\n-         9: getfield      #28                 // Field recordSize:I\n-        12: invokestatic  #118                // Method org/apache/commons/compress/utils/ArchiveUtils.isArrayZero:([BI)Z\n+         9: getfield      #87                 // Field recordSize:I\n+        12: invokestatic  #376                // Method org/apache/commons/compress/utils/ArchiveUtils.isArrayZero:([BI)Z\n         15: ifeq          22\n         18: iconst_1\n         19: goto          23\n         22: iconst_0\n         23: ireturn\n       LineNumberTable:\n         line 575: 0\n@@ -1756,181 +1756,181 @@\n           stack = [ int ]\n \n   private void paxHeaders() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=6, args_size=1\n-         0: new           #19                 // class java/util/ArrayList\n+         0: new           #60                 // class java/util/ArrayList\n          3: dup\n-         4: invokespecial #20                 // Method java/util/ArrayList.\"<init>\":()V\n+         4: invokespecial #62                 // Method java/util/ArrayList.\"<init>\":()V\n          7: astore_1\n          8: aload_0\n          9: aload_0\n-        10: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        13: invokevirtual #70                 // Method getInputStream:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n+        10: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        13: invokevirtual #225                // Method getInputStream:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n         16: astore_3\n         17: aload_3\n         18: aload_1\n         19: aload_0\n-        20: getfield      #24                 // Field globalPaxHeaders:Ljava/util/Map;\n+        20: getfield      #70                 // Field globalPaxHeaders:Ljava/util/Map;\n         23: aload_0\n-        24: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        27: invokevirtual #79                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n-        30: invokestatic  #119                // Method org/apache/commons/compress/archivers/tar/TarUtils.parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+        24: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        27: invokevirtual #259                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+        30: invokestatic  #382                // Method org/apache/commons/compress/archivers/tar/TarUtils.parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n         33: astore_2\n         34: aload_3\n         35: ifnull        70\n         38: aload_3\n-        39: invokevirtual #73                 // Method java/io/InputStream.close:()V\n+        39: invokevirtual #239                // Method java/io/InputStream.close:()V\n         42: goto          70\n         45: astore        4\n         47: aload_3\n         48: ifnull        67\n         51: aload_3\n-        52: invokevirtual #73                 // Method java/io/InputStream.close:()V\n+        52: invokevirtual #239                // Method java/io/InputStream.close:()V\n         55: goto          67\n         58: astore        5\n         60: aload         4\n         62: aload         5\n-        64: invokevirtual #75                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+        64: invokevirtual #242                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n         67: aload         4\n         69: athrow\n         70: aload_2\n-        71: ldc           #121                // String GNU.sparse.map\n-        73: invokeinterface #122,  2          // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z\n-        78: ifeq          103\n-        81: new           #19                 // class java/util/ArrayList\n-        84: dup\n-        85: aload_2\n-        86: ldc           #121                // String GNU.sparse.map\n-        88: invokeinterface #123,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-        93: checkcast     #124                // class java/lang/String\n-        96: invokestatic  #125                // Method org/apache/commons/compress/archivers/tar/TarUtils.parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n-        99: invokespecial #62                 // Method java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n-       102: astore_1\n-       103: aload_0\n-       104: invokespecial #33                 // Method getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       107: pop\n-       108: aload_0\n-       109: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       112: ifnonnull     125\n-       115: new           #46                 // class java/io/IOException\n-       118: dup\n-       119: ldc           #126                // String premature end of tar archive. Didn\\'t find any entry after PAX header.\n-       121: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       124: athrow\n-       125: aload_0\n-       126: aload_2\n-       127: aload_1\n-       128: invokespecial #107                // Method applyPaxHeadersToCurrentEntry:(Ljava/util/Map;Ljava/util/List;)V\n-       131: aload_0\n-       132: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       135: invokevirtual #127                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxGNU1XSparse:()Z\n-       138: ifeq          223\n-       141: aload_0\n-       142: aload_0\n-       143: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       146: invokevirtual #70                 // Method getInputStream:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n-       149: astore_3\n-       150: aload_3\n-       151: aload_0\n-       152: getfield      #28                 // Field recordSize:I\n-       155: invokestatic  #128                // Method org/apache/commons/compress/archivers/tar/TarUtils.parsePAX1XSparseHeaders:(Ljava/io/InputStream;I)Ljava/util/List;\n-       158: astore_1\n-       159: aload_3\n-       160: ifnull        195\n-       163: aload_3\n-       164: invokevirtual #73                 // Method java/io/InputStream.close:()V\n-       167: goto          195\n-       170: astore        4\n-       172: aload_3\n-       173: ifnull        192\n-       176: aload_3\n-       177: invokevirtual #73                 // Method java/io/InputStream.close:()V\n-       180: goto          192\n-       183: astore        5\n-       185: aload         4\n-       187: aload         5\n-       189: invokevirtual #75                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-       192: aload         4\n-       194: athrow\n-       195: aload_0\n-       196: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       199: aload_1\n-       200: invokevirtual #37                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSparseHeaders:(Ljava/util/List;)V\n-       203: aload_0\n-       204: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       207: aload_0\n-       208: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-       211: invokevirtual #53                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n-       214: aload_0\n-       215: getfield      #28                 // Field recordSize:I\n-       218: i2l\n-       219: ladd\n-       220: invokevirtual #129                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setDataOffset:(J)V\n-       223: aload_0\n-       224: invokespecial #130                // Method buildSparseInputStreams:()V\n-       227: return\n+        71: ldc_w         #390                // String GNU.sparse.map\n+        74: invokeinterface #392,  2          // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z\n+        79: ifeq          105\n+        82: new           #60                 // class java/util/ArrayList\n+        85: dup\n+        86: aload_2\n+        87: ldc_w         #390                // String GNU.sparse.map\n+        90: invokeinterface #395,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+        95: checkcast     #312                // class java/lang/String\n+        98: invokestatic  #399                // Method org/apache/commons/compress/archivers/tar/TarUtils.parseFromPAX01SparseHeaders:(Ljava/lang/String;)Ljava/util/List;\n+       101: invokespecial #207                // Method java/util/ArrayList.\"<init>\":(Ljava/util/Collection;)V\n+       104: astore_1\n+       105: aload_0\n+       106: invokespecial #108                // Method getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       109: pop\n+       110: aload_0\n+       111: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       114: ifnonnull     128\n+       117: new           #159                // class java/io/IOException\n+       120: dup\n+       121: ldc_w         #403                // String premature end of tar archive. Didn\\'t find any entry after PAX header.\n+       124: invokespecial #163                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       127: athrow\n+       128: aload_0\n+       129: aload_2\n+       130: aload_1\n+       131: invokespecial #342                // Method applyPaxHeadersToCurrentEntry:(Ljava/util/Map;Ljava/util/List;)V\n+       134: aload_0\n+       135: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       138: invokevirtual #405                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isPaxGNU1XSparse:()Z\n+       141: ifeq          226\n+       144: aload_0\n+       145: aload_0\n+       146: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       149: invokevirtual #225                // Method getInputStream:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n+       152: astore_3\n+       153: aload_3\n+       154: aload_0\n+       155: getfield      #87                 // Field recordSize:I\n+       158: invokestatic  #408                // Method org/apache/commons/compress/archivers/tar/TarUtils.parsePAX1XSparseHeaders:(Ljava/io/InputStream;I)Ljava/util/List;\n+       161: astore_1\n+       162: aload_3\n+       163: ifnull        198\n+       166: aload_3\n+       167: invokevirtual #239                // Method java/io/InputStream.close:()V\n+       170: goto          198\n+       173: astore        4\n+       175: aload_3\n+       176: ifnull        195\n+       179: aload_3\n+       180: invokevirtual #239                // Method java/io/InputStream.close:()V\n+       183: goto          195\n+       186: astore        5\n+       188: aload         4\n+       190: aload         5\n+       192: invokevirtual #242                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+       195: aload         4\n+       197: athrow\n+       198: aload_0\n+       199: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       202: aload_1\n+       203: invokevirtual #126                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setSparseHeaders:(Ljava/util/List;)V\n+       206: aload_0\n+       207: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       210: aload_0\n+       211: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+       214: invokevirtual #175                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n+       217: aload_0\n+       218: getfield      #87                 // Field recordSize:I\n+       221: i2l\n+       222: ladd\n+       223: invokevirtual #412                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setDataOffset:(J)V\n+       226: aload_0\n+       227: invokespecial #415                // Method buildSparseInputStreams:()V\n+       230: return\n       Exception table:\n          from    to  target type\n             17    34    45   Class java/lang/Throwable\n             51    55    58   Class java/lang/Throwable\n-           150   159   170   Class java/lang/Throwable\n-           176   180   183   Class java/lang/Throwable\n+           153   162   173   Class java/lang/Throwable\n+           179   183   186   Class java/lang/Throwable\n       LineNumberTable:\n         line 608: 0\n         line 610: 8\n         line 611: 17\n         line 612: 34\n         line 610: 45\n         line 615: 70\n-        line 616: 81\n-        line 618: 103\n-        line 619: 108\n-        line 620: 115\n-        line 622: 125\n-        line 625: 131\n-        line 626: 141\n-        line 627: 150\n-        line 628: 159\n-        line 626: 170\n-        line 629: 195\n-        line 631: 203\n-        line 636: 223\n-        line 637: 227\n+        line 616: 82\n+        line 618: 105\n+        line 619: 110\n+        line 620: 117\n+        line 622: 128\n+        line 625: 134\n+        line 626: 144\n+        line 627: 153\n+        line 628: 162\n+        line 626: 173\n+        line 629: 198\n+        line 631: 206\n+        line 636: 226\n+        line 637: 230\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n            34      11     2 headers   Ljava/util/Map;\n            17      53     3 input   Ljava/io/InputStream;\n-          150      45     3 input   Ljava/io/InputStream;\n-            0     228     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n-            8     220     1 sparseHeaders   Ljava/util/List;\n-           70     158     2 headers   Ljava/util/Map;\n+          153      45     3 input   Ljava/io/InputStream;\n+            0     231     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n+            8     223     1 sparseHeaders   Ljava/util/List;\n+           70     161     2 headers   Ljava/util/Map;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n            34      11     2 headers   Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n-            8     220     1 sparseHeaders   Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n-           70     158     2 headers   Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+            8     223     1 sparseHeaders   Ljava/util/List<Lorg/apache/commons/compress/archivers/tar/TarArchiveStructSparse;>;\n+           70     161     2 headers   Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n       StackMapTable: number_of_entries = 11\n         frame_type = 255 /* full_frame */\n           offset_delta = 45\n           locals = [ class org/apache/commons/compress/archivers/tar/TarFile, class java/util/List, top, class java/io/InputStream ]\n           stack = [ class java/lang/Throwable ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 12\n           locals = [ class org/apache/commons/compress/archivers/tar/TarFile, class java/util/List, top, class java/io/InputStream, class java/lang/Throwable ]\n           stack = [ class java/lang/Throwable ]\n         frame_type = 8 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 2\n           locals = [ class org/apache/commons/compress/archivers/tar/TarFile, class java/util/List, class java/util/Map ]\n           stack = []\n-        frame_type = 32 /* same */\n-        frame_type = 21 /* same */\n+        frame_type = 34 /* same */\n+        frame_type = 22 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 44\n           locals = [ class org/apache/commons/compress/archivers/tar/TarFile, class java/util/List, class java/util/Map, class java/io/InputStream ]\n           stack = [ class java/lang/Throwable ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 12\n           locals = [ class org/apache/commons/compress/archivers/tar/TarFile, class java/util/List, class java/util/Map, class java/io/InputStream, class java/lang/Throwable ]\n@@ -1945,189 +1945,189 @@\n   private void readGlobalPaxHeaders() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=6, locals=4, args_size=1\n          0: aload_0\n          1: aload_0\n-         2: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-         5: invokevirtual #70                 // Method getInputStream:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n+         2: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+         5: invokevirtual #225                // Method getInputStream:(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)Ljava/io/InputStream;\n          8: astore_1\n          9: aload_0\n         10: aload_1\n         11: aload_0\n-        12: getfield      #21                 // Field globalSparseHeaders:Ljava/util/List;\n+        12: getfield      #63                 // Field globalSparseHeaders:Ljava/util/List;\n         15: aload_0\n-        16: getfield      #24                 // Field globalPaxHeaders:Ljava/util/Map;\n+        16: getfield      #70                 // Field globalPaxHeaders:Ljava/util/Map;\n         19: aload_0\n-        20: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        23: invokevirtual #79                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n-        26: invokestatic  #119                // Method org/apache/commons/compress/archivers/tar/TarUtils.parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n-        29: putfield      #24                 // Field globalPaxHeaders:Ljava/util/Map;\n+        20: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        23: invokevirtual #259                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+        26: invokestatic  #382                // Method org/apache/commons/compress/archivers/tar/TarUtils.parsePaxHeaders:(Ljava/io/InputStream;Ljava/util/List;Ljava/util/Map;J)Ljava/util/Map;\n+        29: putfield      #70                 // Field globalPaxHeaders:Ljava/util/Map;\n         32: aload_1\n         33: ifnull        63\n         36: aload_1\n-        37: invokevirtual #73                 // Method java/io/InputStream.close:()V\n+        37: invokevirtual #239                // Method java/io/InputStream.close:()V\n         40: goto          63\n         43: astore_2\n         44: aload_1\n         45: ifnull        61\n         48: aload_1\n-        49: invokevirtual #73                 // Method java/io/InputStream.close:()V\n+        49: invokevirtual #239                // Method java/io/InputStream.close:()V\n         52: goto          61\n         55: astore_3\n         56: aload_2\n         57: aload_3\n-        58: invokevirtual #75                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+        58: invokevirtual #242                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n         61: aload_2\n         62: athrow\n         63: aload_0\n-        64: invokespecial #33                 // Method getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        64: invokespecial #108                // Method getNextTarEntry:()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n         67: pop\n         68: aload_0\n-        69: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        72: ifnonnull     85\n-        75: new           #46                 // class java/io/IOException\n+        69: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        72: ifnonnull     86\n+        75: new           #159                // class java/io/IOException\n         78: dup\n-        79: ldc           #109                // String Error detected parsing the pax header\n-        81: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        84: athrow\n-        85: return\n+        79: ldc_w         #348                // String Error detected parsing the pax header\n+        82: invokespecial #163                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        85: athrow\n+        86: return\n       Exception table:\n          from    to  target type\n              9    32    43   Class java/lang/Throwable\n             48    52    55   Class java/lang/Throwable\n       LineNumberTable:\n         line 640: 0\n         line 641: 9\n         line 642: 23\n         line 641: 26\n         line 643: 32\n         line 640: 43\n         line 644: 63\n         line 646: 68\n         line 647: 75\n-        line 649: 85\n+        line 649: 86\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             9      54     1 input   Ljava/io/InputStream;\n-            0      86     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n+            0      87     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n       StackMapTable: number_of_entries = 5\n         frame_type = 255 /* full_frame */\n           offset_delta = 43\n           locals = [ class org/apache/commons/compress/archivers/tar/TarFile, class java/io/InputStream ]\n           stack = [ class java/lang/Throwable ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 11\n           locals = [ class org/apache/commons/compress/archivers/tar/TarFile, class java/io/InputStream, class java/lang/Throwable ]\n           stack = [ class java/lang/Throwable ]\n         frame_type = 5 /* same */\n         frame_type = 249 /* chop */\n           offset_delta = 1\n-        frame_type = 21 /* same */\n+        frame_type = 22 /* same */\n     Exceptions:\n       throws java.io.IOException\n \n   private void readOldGNUSparse() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=3, args_size=1\n          0: aload_0\n-         1: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-         4: invokevirtual #131                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isExtended:()Z\n-         7: ifeq          85\n+         1: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+         4: invokevirtual #418                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isExtended:()Z\n+         7: ifeq          86\n         10: aload_0\n-        11: invokespecial #83                 // Method getRecord:()Ljava/nio/ByteBuffer;\n+        11: invokespecial #271                // Method getRecord:()Ljava/nio/ByteBuffer;\n         14: astore_2\n         15: aload_2\n-        16: ifnonnull     29\n-        19: new           #46                 // class java/io/IOException\n+        16: ifnonnull     30\n+        19: new           #159                // class java/io/IOException\n         22: dup\n-        23: ldc           #132                // String premature end of tar archive. Didn\\'t find extended_header after header with extended flag.\n-        25: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        28: athrow\n-        29: new           #133                // class org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry\n-        32: dup\n-        33: aload_2\n-        34: invokevirtual #85                 // Method java/nio/ByteBuffer.array:()[B\n-        37: invokespecial #134                // Method org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.\"<init>\":([B)V\n-        40: astore_1\n-        41: aload_0\n-        42: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        45: invokevirtual #135                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSparseHeaders:()Ljava/util/List;\n-        48: aload_1\n-        49: invokevirtual #136                // Method org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.getSparseHeaders:()Ljava/util/List;\n-        52: invokeinterface #137,  2          // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z\n-        57: pop\n-        58: aload_0\n-        59: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        62: aload_0\n-        63: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        66: invokevirtual #53                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n-        69: aload_0\n-        70: getfield      #28                 // Field recordSize:I\n-        73: i2l\n-        74: ladd\n-        75: invokevirtual #129                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setDataOffset:(J)V\n-        78: aload_1\n-        79: invokevirtual #138                // Method org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.isExtended:()Z\n-        82: ifne          10\n-        85: aload_0\n-        86: invokespecial #130                // Method buildSparseInputStreams:()V\n-        89: return\n+        23: ldc_w         #421                // String premature end of tar archive. Didn\\'t find extended_header after header with extended flag.\n+        26: invokespecial #163                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        29: athrow\n+        30: new           #423                // class org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry\n+        33: dup\n+        34: aload_2\n+        35: invokevirtual #275                // Method java/nio/ByteBuffer.array:()[B\n+        38: invokespecial #425                // Method org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.\"<init>\":([B)V\n+        41: astore_1\n+        42: aload_0\n+        43: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        46: invokevirtual #426                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSparseHeaders:()Ljava/util/List;\n+        49: aload_1\n+        50: invokevirtual #429                // Method org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.getSparseHeaders:()Ljava/util/List;\n+        53: invokeinterface #430,  2          // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z\n+        58: pop\n+        59: aload_0\n+        60: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        63: aload_0\n+        64: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        67: invokevirtual #175                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n+        70: aload_0\n+        71: getfield      #87                 // Field recordSize:I\n+        74: i2l\n+        75: ladd\n+        76: invokevirtual #412                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.setDataOffset:(J)V\n+        79: aload_1\n+        80: invokevirtual #434                // Method org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.isExtended:()Z\n+        83: ifne          10\n+        86: aload_0\n+        87: invokespecial #415                // Method buildSparseInputStreams:()V\n+        90: return\n       LineNumberTable:\n         line 658: 0\n         line 661: 10\n         line 662: 15\n         line 663: 19\n-        line 665: 29\n-        line 666: 41\n-        line 667: 58\n-        line 668: 78\n-        line 673: 85\n-        line 674: 89\n+        line 665: 30\n+        line 666: 42\n+        line 667: 59\n+        line 668: 79\n+        line 673: 86\n+        line 674: 90\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           15      63     2 headerBuf   Ljava/nio/ByteBuffer;\n-           41      44     1 entry   Lorg/apache/commons/compress/archivers/tar/TarArchiveSparseEntry;\n-            0      90     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n+           15      64     2 headerBuf   Ljava/nio/ByteBuffer;\n+           42      44     1 entry   Lorg/apache/commons/compress/archivers/tar/TarArchiveSparseEntry;\n+            0      91     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n       StackMapTable: number_of_entries = 3\n         frame_type = 10 /* same */\n         frame_type = 253 /* append */\n-          offset_delta = 18\n+          offset_delta = 19\n           locals = [ top, class java/nio/ByteBuffer ]\n         frame_type = 249 /* chop */\n           offset_delta = 55\n     Exceptions:\n       throws java.io.IOException\n \n   private java.nio.ByteBuffer readRecord() throws java.io.IOException;\n     descriptor: ()Ljava/nio/ByteBuffer;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #30                 // Field recordBuffer:Ljava/nio/ByteBuffer;\n-         4: invokevirtual #139                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+         1: getfield      #97                 // Field recordBuffer:Ljava/nio/ByteBuffer;\n+         4: invokevirtual #435                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n          7: pop\n          8: aload_0\n-         9: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+         9: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         12: aload_0\n-        13: getfield      #30                 // Field recordBuffer:Ljava/nio/ByteBuffer;\n-        16: invokeinterface #140,  2          // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+        13: getfield      #97                 // Field recordBuffer:Ljava/nio/ByteBuffer;\n+        16: invokeinterface #439,  2          // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n         21: istore_1\n         22: iload_1\n         23: aload_0\n-        24: getfield      #28                 // Field recordSize:I\n+        24: getfield      #87                 // Field recordSize:I\n         27: if_icmpeq     32\n         30: aconst_null\n         31: areturn\n         32: aload_0\n-        33: getfield      #30                 // Field recordBuffer:Ljava/nio/ByteBuffer;\n+        33: getfield      #97                 // Field recordBuffer:Ljava/nio/ByteBuffer;\n         36: areturn\n       LineNumberTable:\n         line 683: 0\n         line 684: 8\n         line 685: 22\n         line 686: 30\n         line 688: 32\n@@ -2145,19 +2145,19 @@\n   private void repositionForwardBy(long) throws java.io.IOException;\n     descriptor: (J)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=3, args_size=2\n          0: aload_0\n          1: aload_0\n-         2: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-         5: invokeinterface #60,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+         2: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+         5: invokeinterface #200,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n         10: lload_1\n         11: ladd\n-        12: invokespecial #80                 // Method repositionForwardTo:(J)V\n+        12: invokespecial #262                // Method repositionForwardTo:(J)V\n         15: return\n       LineNumberTable:\n         line 692: 0\n         line 693: 15\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      16     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -2167,58 +2167,58 @@\n \n   private void repositionForwardTo(long) throws java.io.IOException;\n     descriptor: (J)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=5, args_size=2\n          0: aload_0\n-         1: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-         4: invokeinterface #60,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+         1: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+         4: invokeinterface #200,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n          9: lstore_3\n         10: lload_1\n         11: lload_3\n         12: lcmp\n-        13: ifge          26\n-        16: new           #46                 // class java/io/IOException\n+        13: ifge          27\n+        16: new           #159                // class java/io/IOException\n         19: dup\n-        20: ldc           #141                // String trying to move backwards inside of the archive\n-        22: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        25: athrow\n-        26: aload_0\n-        27: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        30: lload_1\n-        31: invokeinterface #142,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n-        36: pop\n-        37: return\n+        20: ldc_w         #442                // String trying to move backwards inside of the archive\n+        23: invokespecial #163                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        26: athrow\n+        27: aload_0\n+        28: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        31: lload_1\n+        32: invokeinterface #444,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        37: pop\n+        38: return\n       LineNumberTable:\n         line 696: 0\n         line 697: 10\n         line 698: 16\n-        line 700: 26\n-        line 701: 37\n+        line 700: 27\n+        line 701: 38\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      38     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n-            0      38     1 newPosition   J\n-           10      28     3 currPosition   J\n+            0      39     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n+            0      39     1 newPosition   J\n+           10      29     3 currPosition   J\n       StackMapTable: number_of_entries = 1\n         frame_type = 252 /* append */\n-          offset_delta = 26\n+          offset_delta = 27\n           locals = [ long ]\n     Exceptions:\n       throws java.io.IOException\n \n   protected final void setAtEOF(boolean);\n     descriptor: (Z)V\n     flags: (0x0014) ACC_PROTECTED, ACC_FINAL\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: putfield      #117                // Field hasHitEOF:Z\n+         2: putfield      #373                // Field hasHitEOF:Z\n          5: return\n       LineNumberTable:\n         line 704: 0\n         line 705: 5\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n@@ -2226,57 +2226,57 @@\n \n   private void skipRecordPadding() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=5, args_size=1\n          0: aload_0\n-         1: invokespecial #143                // Method isDirectory:()Z\n+         1: invokespecial #447                // Method isDirectory:()Z\n          4: ifne          78\n          7: aload_0\n-         8: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        11: invokevirtual #79                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+         8: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        11: invokevirtual #259                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n         14: lconst_0\n         15: lcmp\n         16: ifle          78\n         19: aload_0\n-        20: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        23: invokevirtual #79                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+        20: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        23: invokevirtual #259                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n         26: aload_0\n-        27: getfield      #28                 // Field recordSize:I\n+        27: getfield      #87                 // Field recordSize:I\n         30: i2l\n         31: lrem\n         32: lconst_0\n         33: lcmp\n         34: ifeq          78\n         37: aload_0\n-        38: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        41: invokevirtual #79                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+        38: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        41: invokevirtual #259                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n         44: aload_0\n-        45: getfield      #28                 // Field recordSize:I\n+        45: getfield      #87                 // Field recordSize:I\n         48: i2l\n         49: ldiv\n         50: lconst_1\n         51: ladd\n         52: lstore_1\n         53: lload_1\n         54: aload_0\n-        55: getfield      #28                 // Field recordSize:I\n+        55: getfield      #87                 // Field recordSize:I\n         58: i2l\n         59: lmul\n         60: aload_0\n-        61: getfield      #35                 // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-        64: invokevirtual #79                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+        61: getfield      #116                // Field currEntry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+        64: invokevirtual #259                // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n         67: lsub\n         68: lstore_3\n         69: aload_0\n         70: lload_3\n-        71: invokespecial #61                 // Method repositionForwardBy:(J)V\n+        71: invokespecial #203                // Method repositionForwardBy:(J)V\n         74: aload_0\n-        75: invokespecial #81                 // Method throwExceptionIfPositionIsNotInArchive:()V\n+        75: invokespecial #265                // Method throwExceptionIfPositionIsNotInArchive:()V\n         78: return\n       LineNumberTable:\n         line 714: 0\n         line 715: 37\n         line 716: 53\n         line 717: 69\n         line 718: 74\n@@ -2294,82 +2294,82 @@\n \n   private void throwExceptionIfPositionIsNotInArchive() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-         4: invokeinterface #144,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n+         1: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+         4: invokeinterface #448,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J\n          9: aload_0\n-        10: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        13: invokeinterface #60,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+        10: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        13: invokeinterface #200,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n         18: lcmp\n-        19: ifge          32\n-        22: new           #46                 // class java/io/IOException\n+        19: ifge          33\n+        22: new           #159                // class java/io/IOException\n         25: dup\n-        26: ldc           #145                // String Truncated TAR archive\n-        28: invokespecial #48                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        31: athrow\n-        32: return\n+        26: ldc_w         #451                // String Truncated TAR archive\n+        29: invokespecial #163                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        32: athrow\n+        33: return\n       LineNumberTable:\n         line 727: 0\n         line 728: 22\n-        line 730: 32\n+        line 730: 33\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      33     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n+            0      34     0  this   Lorg/apache/commons/compress/archivers/tar/TarFile;\n       StackMapTable: number_of_entries = 1\n-        frame_type = 32 /* same */\n+        frame_type = 33 /* same */\n     Exceptions:\n       throws java.io.IOException\n \n   private void tryToConsumeSecondEOFRecord() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=3, args_size=1\n          0: iconst_1\n          1: istore_1\n          2: aload_0\n          3: aload_0\n-         4: invokespecial #112                // Method readRecord:()Ljava/nio/ByteBuffer;\n-         7: invokespecial #113                // Method isEOFRecord:(Ljava/nio/ByteBuffer;)Z\n+         4: invokespecial #356                // Method readRecord:()Ljava/nio/ByteBuffer;\n+         7: invokespecial #359                // Method isEOFRecord:(Ljava/nio/ByteBuffer;)Z\n         10: ifne          17\n         13: iconst_1\n         14: goto          18\n         17: iconst_0\n         18: istore_1\n         19: iload_1\n         20: ifeq          83\n         23: aload_0\n-        24: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        24: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         27: aload_0\n-        28: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        31: invokeinterface #60,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+        28: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        31: invokeinterface #200,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n         36: aload_0\n-        37: getfield      #28                 // Field recordSize:I\n+        37: getfield      #87                 // Field recordSize:I\n         40: i2l\n         41: lsub\n-        42: invokeinterface #142,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        42: invokeinterface #444,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         47: pop\n         48: goto          83\n         51: astore_2\n         52: iload_1\n         53: ifeq          81\n         56: aload_0\n-        57: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        57: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n         60: aload_0\n-        61: getfield      #25                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n-        64: invokeinterface #60,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+        61: getfield      #73                 // Field archive:Ljava/nio/channels/SeekableByteChannel;\n+        64: invokeinterface #200,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n         69: aload_0\n-        70: getfield      #28                 // Field recordSize:I\n+        70: getfield      #87                 // Field recordSize:I\n         73: i2l\n         74: lsub\n-        75: invokeinterface #142,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        75: invokeinterface #444,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         80: pop\n         81: aload_2\n         82: athrow\n         83: return\n       Exception table:\n          from    to  target type\n              2    19    51   any\n@@ -2414,8 +2414,8 @@\n         line 49: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0    x0   Lorg/apache/commons/compress/archivers/tar/TarFile;\n }\n SourceFile: \"TarFile.java\"\n InnerClasses:\n-  private final #148= #63 of #14;         // BoundedTarEntryInputStream=class org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream of class org/apache/commons/compress/archivers/tar/TarFile\n+  private final #529= #210 of #2;         // BoundedTarEntryInputStream=class org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream of class org/apache/commons/compress/archivers/tar/TarFile\n"}]}
