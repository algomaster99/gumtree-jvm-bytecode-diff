{"diffoscope-json-version": 1, "source1": "first/ClassLoader.class", "source2": "second/ClassLoader.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -17,14 +17,18 @@\n {\n     private static final String BCEL_TOKEN = \"$$BCEL$$\";\n     public static final String[] DEFAULT_IGNORED_PACKAGES;\n     private final Hashtable<String, Class<?>> classes;\n     private final String[] ignoredPackages;\n     private Repository repository;\n     \n+    static {\n+        DEFAULT_IGNORED_PACKAGES = new String[] { \"java.\", \"javax.\", \"sun.\" };\n+    }\n+    \n     public ClassLoader() {\n         this(ClassLoader.DEFAULT_IGNORED_PACKAGES);\n     }\n     \n     public ClassLoader(final java.lang.ClassLoader deferTo) {\n         super(deferTo);\n         this.classes = new Hashtable<String, Class<?>>();\n@@ -64,15 +68,17 @@\n         return clazz;\n     }\n     \n     @Override\n     protected Class<?> loadClass(final String className, final boolean resolve) throws ClassNotFoundException {\n         Class<?> cl = null;\n         if ((cl = this.classes.get(className)) == null) {\n-            for (final String ignoredPackage : this.ignoredPackages) {\n+            String[] ignoredPackages;\n+            for (int length = (ignoredPackages = this.ignoredPackages).length, i = 0; i < length; ++i) {\n+                final String ignoredPackage = ignoredPackages[i];\n                 if (className.startsWith(ignoredPackage)) {\n                     cl = this.getParent().loadClass(className);\n                     break;\n                 }\n             }\n             if (cl == null) {\n                 JavaClass clazz = null;\n@@ -100,12 +106,8 @@\n         this.classes.put(className, cl);\n         return cl;\n     }\n     \n     protected JavaClass modifyClass(final JavaClass clazz) {\n         return clazz;\n     }\n-    \n-    static {\n-        DEFAULT_IGNORED_PACKAGES = new String[] { \"java.\", \"javax.\", \"sun.\" };\n-    }\n }\n"}]}
