{"diffoscope-json-version": 1, "source1": "first/FileAlterationObserver.class", "source2": "second/FileAlterationObserver.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -17,52 +17,52 @@\n {\n     private static final long serialVersionUID = 1185122225658782848L;\n     private final List<FileAlterationListener> listeners;\n     private final FileEntry rootEntry;\n     private final FileFilter fileFilter;\n     private final Comparator<File> comparator;\n     \n-    public FileAlterationObserver(final String directoryName) {\n-        this(new File(directoryName));\n+    public FileAlterationObserver(final String pathname) {\n+        this(new File(pathname));\n     }\n     \n-    public FileAlterationObserver(final String directoryName, final FileFilter fileFilter) {\n-        this(new File(directoryName), fileFilter);\n+    public FileAlterationObserver(final String pathname, final FileFilter fileFilter) {\n+        this(new File(pathname), fileFilter);\n     }\n     \n-    public FileAlterationObserver(final String directoryName, final FileFilter fileFilter, final IOCase caseSensitivity) {\n-        this(new File(directoryName), fileFilter, caseSensitivity);\n+    public FileAlterationObserver(final String pathname, final FileFilter fileFilter, final IOCase ioCase) {\n+        this(new File(pathname), fileFilter, ioCase);\n     }\n     \n-    public FileAlterationObserver(final File directory) {\n-        this(directory, null);\n+    public FileAlterationObserver(final File file) {\n+        this(file, null);\n     }\n     \n-    public FileAlterationObserver(final File directory, final FileFilter fileFilter) {\n-        this(directory, fileFilter, null);\n+    public FileAlterationObserver(final File file, final FileFilter fileFilter) {\n+        this(file, fileFilter, null);\n     }\n     \n-    public FileAlterationObserver(final File directory, final FileFilter fileFilter, final IOCase caseSensitivity) {\n-        this(new FileEntry(directory), fileFilter, caseSensitivity);\n+    public FileAlterationObserver(final File file, final FileFilter fileFilter, final IOCase ioCase) {\n+        this(new FileEntry(file), fileFilter, ioCase);\n     }\n     \n-    protected FileAlterationObserver(final FileEntry rootEntry, final FileFilter fileFilter, final IOCase caseSensitivity) {\n+    protected FileAlterationObserver(final FileEntry rootEntry, final FileFilter fileFilter, final IOCase ioCase) {\n         this.listeners = new CopyOnWriteArrayList<FileAlterationListener>();\n         if (rootEntry == null) {\n             throw new IllegalArgumentException(\"Root entry is missing\");\n         }\n         if (rootEntry.getFile() == null) {\n             throw new IllegalArgumentException(\"Root directory is missing\");\n         }\n         this.rootEntry = rootEntry;\n         this.fileFilter = fileFilter;\n-        if (caseSensitivity == null || caseSensitivity.equals((Object)IOCase.SYSTEM)) {\n+        if (ioCase == null || ioCase.equals((Object)IOCase.SYSTEM)) {\n             this.comparator = NameFileComparator.NAME_SYSTEM_COMPARATOR;\n         }\n-        else if (caseSensitivity.equals((Object)IOCase.INSENSITIVE)) {\n+        else if (ioCase.equals((Object)IOCase.INSENSITIVE)) {\n             this.comparator = NameFileComparator.NAME_INSENSITIVE_COMPARATOR;\n         }\n         else {\n             this.comparator = NameFileComparator.NAME_COMPARATOR;\n         }\n     }\n     \n@@ -70,162 +70,161 @@\n         return this.rootEntry.getFile();\n     }\n     \n     public FileFilter getFileFilter() {\n         return this.fileFilter;\n     }\n     \n-    public void addListener(final FileAlterationListener listener) {\n-        if (listener != null) {\n-            this.listeners.add(listener);\n+    public void addListener(final FileAlterationListener fileAlterationListener) {\n+        if (fileAlterationListener != null) {\n+            this.listeners.add(fileAlterationListener);\n         }\n     }\n     \n-    public void removeListener(final FileAlterationListener listener) {\n-        if (listener != null) {\n-            while (this.listeners.remove(listener)) {}\n+    public void removeListener(final FileAlterationListener fileAlterationListener) {\n+        if (fileAlterationListener != null) {\n+            while (this.listeners.remove(fileAlterationListener)) {}\n         }\n     }\n     \n     public Iterable<FileAlterationListener> getListeners() {\n         return this.listeners;\n     }\n     \n     public void initialize() throws Exception {\n         this.rootEntry.refresh(this.rootEntry.getFile());\n-        final FileEntry[] children = this.doListFiles(this.rootEntry.getFile(), this.rootEntry);\n-        this.rootEntry.setChildren(children);\n+        this.rootEntry.setChildren(this.doListFiles(this.rootEntry.getFile(), this.rootEntry));\n     }\n     \n     public void destroy() throws Exception {\n     }\n     \n     public void checkAndNotify() {\n-        for (final FileAlterationListener listener : this.listeners) {\n-            listener.onStart(this);\n-        }\n-        final File rootFile = this.rootEntry.getFile();\n-        if (rootFile.exists()) {\n-            this.checkAndNotify(this.rootEntry, this.rootEntry.getChildren(), this.listFiles(rootFile));\n+        final Iterator<FileAlterationListener> iterator = this.listeners.iterator();\n+        while (iterator.hasNext()) {\n+            ((FileAlterationListener)iterator.next()).onStart(this);\n+        }\n+        final File file = this.rootEntry.getFile();\n+        if (file.exists()) {\n+            this.checkAndNotify(this.rootEntry, this.rootEntry.getChildren(), this.listFiles(file));\n         }\n         else if (this.rootEntry.isExists()) {\n             this.checkAndNotify(this.rootEntry, this.rootEntry.getChildren(), FileUtils.EMPTY_FILE_ARRAY);\n         }\n-        for (final FileAlterationListener listener2 : this.listeners) {\n-            listener2.onStop(this);\n+        final Iterator<FileAlterationListener> iterator2 = this.listeners.iterator();\n+        while (iterator2.hasNext()) {\n+            ((FileAlterationListener)iterator2.next()).onStop(this);\n         }\n     }\n     \n-    private void checkAndNotify(final FileEntry parent, final FileEntry[] previous, final File[] files) {\n-        int c = 0;\n-        final FileEntry[] current = (files.length > 0) ? new FileEntry[files.length] : FileEntry.EMPTY_ENTRIES;\n-        for (final FileEntry entry : previous) {\n-            while (c < files.length && this.comparator.compare(entry.getFile(), files[c]) > 0) {\n-                this.doCreate(current[c] = this.createFileEntry(parent, files[c]));\n-                ++c;\n-            }\n-            if (c < files.length && this.comparator.compare(entry.getFile(), files[c]) == 0) {\n-                this.doMatch(entry, files[c]);\n-                this.checkAndNotify(entry, entry.getChildren(), this.listFiles(files[c]));\n-                current[c] = entry;\n-                ++c;\n+    private void checkAndNotify(final FileEntry fileEntry, final FileEntry[] array, final File[] array2) {\n+        int i = 0;\n+        final FileEntry[] children = (array2.length > 0) ? new FileEntry[array2.length] : FileEntry.EMPTY_ENTRIES;\n+        for (final FileEntry fileEntry2 : array) {\n+            while (i < array2.length && this.comparator.compare(fileEntry2.getFile(), array2[i]) > 0) {\n+                this.doCreate(children[i] = this.createFileEntry(fileEntry, array2[i]));\n+                ++i;\n+            }\n+            if (i < array2.length && this.comparator.compare(fileEntry2.getFile(), array2[i]) == 0) {\n+                this.doMatch(fileEntry2, array2[i]);\n+                this.checkAndNotify(fileEntry2, fileEntry2.getChildren(), this.listFiles(array2[i]));\n+                children[i] = fileEntry2;\n+                ++i;\n             }\n             else {\n-                this.checkAndNotify(entry, entry.getChildren(), FileUtils.EMPTY_FILE_ARRAY);\n-                this.doDelete(entry);\n+                this.checkAndNotify(fileEntry2, fileEntry2.getChildren(), FileUtils.EMPTY_FILE_ARRAY);\n+                this.doDelete(fileEntry2);\n             }\n         }\n-        while (c < files.length) {\n-            this.doCreate(current[c] = this.createFileEntry(parent, files[c]));\n-            ++c;\n+        while (i < array2.length) {\n+            this.doCreate(children[i] = this.createFileEntry(fileEntry, array2[i]));\n+            ++i;\n         }\n-        parent.setChildren(current);\n+        fileEntry.setChildren(children);\n     }\n     \n-    private FileEntry createFileEntry(final FileEntry parent, final File file) {\n-        final FileEntry entry = parent.newChildInstance(file);\n-        entry.refresh(file);\n-        final FileEntry[] children = this.doListFiles(file, entry);\n-        entry.setChildren(children);\n-        return entry;\n+    private FileEntry createFileEntry(final FileEntry fileEntry, final File file) {\n+        final FileEntry childInstance = fileEntry.newChildInstance(file);\n+        childInstance.refresh(file);\n+        childInstance.setChildren(this.doListFiles(file, childInstance));\n+        return childInstance;\n     }\n     \n-    private FileEntry[] doListFiles(final File file, final FileEntry entry) {\n-        final File[] files = this.listFiles(file);\n-        final FileEntry[] children = (files.length > 0) ? new FileEntry[files.length] : FileEntry.EMPTY_ENTRIES;\n-        for (int i = 0; i < files.length; ++i) {\n-            children[i] = this.createFileEntry(entry, files[i]);\n+    private FileEntry[] doListFiles(final File file, final FileEntry fileEntry) {\n+        final File[] listFiles = this.listFiles(file);\n+        final FileEntry[] array = (listFiles.length > 0) ? new FileEntry[listFiles.length] : FileEntry.EMPTY_ENTRIES;\n+        for (int i = 0; i < listFiles.length; ++i) {\n+            array[i] = this.createFileEntry(fileEntry, listFiles[i]);\n         }\n-        return children;\n+        return array;\n     }\n     \n-    private void doCreate(final FileEntry entry) {\n-        for (final FileAlterationListener listener : this.listeners) {\n-            if (entry.isDirectory()) {\n-                listener.onDirectoryCreate(entry.getFile());\n+    private void doCreate(final FileEntry fileEntry) {\n+        for (final FileAlterationListener fileAlterationListener : this.listeners) {\n+            if (fileEntry.isDirectory()) {\n+                fileAlterationListener.onDirectoryCreate(fileEntry.getFile());\n             }\n             else {\n-                listener.onFileCreate(entry.getFile());\n+                fileAlterationListener.onFileCreate(fileEntry.getFile());\n             }\n         }\n-        final FileEntry[] children2;\n-        final FileEntry[] children = children2 = entry.getChildren();\n-        for (final FileEntry aChildren : children2) {\n-            this.doCreate(aChildren);\n+        final FileEntry[] children = fileEntry.getChildren();\n+        for (int length = children.length, i = 0; i < length; ++i) {\n+            this.doCreate(children[i]);\n         }\n     }\n     \n-    private void doMatch(final FileEntry entry, final File file) {\n-        if (entry.refresh(file)) {\n-            for (final FileAlterationListener listener : this.listeners) {\n-                if (entry.isDirectory()) {\n-                    listener.onDirectoryChange(file);\n+    private void doMatch(final FileEntry fileEntry, final File file) {\n+        if (fileEntry.refresh(file)) {\n+            for (final FileAlterationListener fileAlterationListener : this.listeners) {\n+                if (fileEntry.isDirectory()) {\n+                    fileAlterationListener.onDirectoryChange(file);\n                 }\n                 else {\n-                    listener.onFileChange(file);\n+                    fileAlterationListener.onFileChange(file);\n                 }\n             }\n         }\n     }\n     \n-    private void doDelete(final FileEntry entry) {\n-        for (final FileAlterationListener listener : this.listeners) {\n-            if (entry.isDirectory()) {\n-                listener.onDirectoryDelete(entry.getFile());\n+    private void doDelete(final FileEntry fileEntry) {\n+        for (final FileAlterationListener fileAlterationListener : this.listeners) {\n+            if (fileEntry.isDirectory()) {\n+                fileAlterationListener.onDirectoryDelete(fileEntry.getFile());\n             }\n             else {\n-                listener.onFileDelete(entry.getFile());\n+                fileAlterationListener.onFileDelete(fileEntry.getFile());\n             }\n         }\n     }\n     \n     private File[] listFiles(final File file) {\n-        File[] children = null;\n+        File[] empty_FILE_ARRAY = null;\n         if (file.isDirectory()) {\n-            children = ((this.fileFilter == null) ? file.listFiles() : file.listFiles(this.fileFilter));\n+            empty_FILE_ARRAY = ((this.fileFilter == null) ? file.listFiles() : file.listFiles(this.fileFilter));\n         }\n-        if (children == null) {\n-            children = FileUtils.EMPTY_FILE_ARRAY;\n+        if (empty_FILE_ARRAY == null) {\n+            empty_FILE_ARRAY = FileUtils.EMPTY_FILE_ARRAY;\n         }\n-        if (this.comparator != null && children.length > 1) {\n-            Arrays.sort(children, this.comparator);\n+        if (this.comparator != null && empty_FILE_ARRAY.length > 1) {\n+            Arrays.sort(empty_FILE_ARRAY, this.comparator);\n         }\n-        return children;\n+        return empty_FILE_ARRAY;\n     }\n     \n     @Override\n     public String toString() {\n-        final StringBuilder builder = new StringBuilder();\n-        builder.append(this.getClass().getSimpleName());\n-        builder.append(\"[file='\");\n-        builder.append(this.getDirectory().getPath());\n-        builder.append('\\'');\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(this.getClass().getSimpleName());\n+        sb.append(\"[file='\");\n+        sb.append(this.getDirectory().getPath());\n+        sb.append('\\'');\n         if (this.fileFilter != null) {\n-            builder.append(\", \");\n-            builder.append(this.fileFilter.toString());\n+            sb.append(\", \");\n+            sb.append(this.fileFilter.toString());\n         }\n-        builder.append(\", listeners=\");\n-        builder.append(this.listeners.size());\n-        builder.append(\"]\");\n-        return builder.toString();\n+        sb.append(\", listeners=\");\n+        sb.append(this.listeners.size());\n+        sb.append(\"]\");\n+        return sb.toString();\n     }\n }\n"}]}
