{"diffoscope-json-version": 1, "source1": "first/ZipArchiveEntry$ExtraFieldParsingMode.class", "source2": "second/ZipArchiveEntry$ExtraFieldParsingMode.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -17,40 +17,40 @@\n         return Enum.valueOf(ExtraFieldParsingMode.class, name);\n     }\n     \n     private ExtraFieldParsingMode(final ExtraFieldUtils.UnparseableExtraField onUnparseableData) {\n         this.onUnparseableData = onUnparseableData;\n     }\n     \n-    public ZipExtraField onUnparseableExtraField(final byte[] data, final int off, final int len, final boolean local, final int claimedLength) throws ZipException {\n-        return this.onUnparseableData.onUnparseableExtraField(data, off, len, local, claimedLength);\n+    public ZipExtraField onUnparseableExtraField(final byte[] array, final int n, final int n2, final boolean b, final int n3) throws ZipException {\n+        return this.onUnparseableData.onUnparseableExtraField(array, n, n2, b, n3);\n     }\n     \n-    public ZipExtraField createExtraField(final ZipShort headerId) throws ZipException, InstantiationException, IllegalAccessException {\n-        return ExtraFieldUtils.createExtraField(headerId);\n+    public ZipExtraField createExtraField(final ZipShort zipShort) throws ZipException, InstantiationException, IllegalAccessException {\n+        return ExtraFieldUtils.createExtraField(zipShort);\n     }\n     \n-    public ZipExtraField fill(final ZipExtraField field, final byte[] data, final int off, final int len, final boolean local) throws ZipException {\n-        return ExtraFieldUtils.fillExtraField(field, data, off, len, local);\n+    public ZipExtraField fill(final ZipExtraField zipExtraField, final byte[] array, final int n, final int n2, final boolean b) throws ZipException {\n+        return ExtraFieldUtils.fillExtraField(zipExtraField, array, n, n2, b);\n     }\n     \n-    private static ZipExtraField fillAndMakeUnrecognizedOnError(final ZipExtraField field, final byte[] data, final int off, final int len, final boolean local) {\n+    private static ZipExtraField fillAndMakeUnrecognizedOnError(final ZipExtraField zipExtraField, final byte[] array, final int n, final int n2, final boolean b) {\n         try {\n-            return ExtraFieldUtils.fillExtraField(field, data, off, len, local);\n+            return ExtraFieldUtils.fillExtraField(zipExtraField, array, n, n2, b);\n         }\n         catch (final ZipException ex) {\n-            final UnrecognizedExtraField u = new UnrecognizedExtraField();\n-            u.setHeaderId(field.getHeaderId());\n-            if (local) {\n-                u.setLocalFileDataData(Arrays.copyOfRange(data, off, off + len));\n+            final UnrecognizedExtraField unrecognizedExtraField = new UnrecognizedExtraField();\n+            unrecognizedExtraField.setHeaderId(zipExtraField.getHeaderId());\n+            if (b) {\n+                unrecognizedExtraField.setLocalFileDataData(Arrays.copyOfRange(array, n, n + n2));\n             }\n             else {\n-                u.setCentralDirectoryData(Arrays.copyOfRange(data, off, off + len));\n+                unrecognizedExtraField.setCentralDirectoryData(Arrays.copyOfRange(array, n, n + n2));\n             }\n-            return (ZipExtraField)u;\n+            return (ZipExtraField)unrecognizedExtraField;\n         }\n     }\n     \n     static {\n         ExtraFieldParsingMode.BEST_EFFORT = (ExtraFieldParsingMode)new ExtraFieldParsingMode.ZipArchiveEntry$ExtraFieldParsingMode$1(\"BEST_EFFORT\", 0, ExtraFieldUtils.UnparseableExtraField.READ);\n         ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS = new ExtraFieldParsingMode(\"STRICT_FOR_KNOW_EXTRA_FIELDS\", 1, ExtraFieldUtils.UnparseableExtraField.READ);\n         ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT = (ExtraFieldParsingMode)new ExtraFieldParsingMode.ZipArchiveEntry$ExtraFieldParsingMode$2(\"ONLY_PARSEABLE_LENIENT\", 2, ExtraFieldUtils.UnparseableExtraField.SKIP);\n"}]}
