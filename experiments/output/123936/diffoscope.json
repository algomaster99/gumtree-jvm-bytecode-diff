{"diffoscope-json-version": 1, "source1": "first/Checker.class", "source2": "second/Checker.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,15 +10,14 @@\n import com.puppycrawl.tools.checkstyle.api.FileText;\n import java.util.TreeSet;\n import com.puppycrawl.tools.checkstyle.api.Violation;\n import java.util.SortedSet;\n import com.puppycrawl.tools.checkstyle.api.AuditEvent;\n import java.util.function.Function;\n import java.util.function.Predicate;\n-import java.util.Objects;\n import com.puppycrawl.tools.checkstyle.api.ExternalResourceHolder;\n import java.util.stream.Stream;\n import com.puppycrawl.tools.checkstyle.api.CheckstyleException;\n import java.util.Iterator;\n import java.util.stream.Collector;\n import java.util.stream.Collectors;\n import java.util.Set;\n@@ -137,21 +136,15 @@\n         this.fileSetChecks.forEach(FileSetCheck::destroy);\n         final int errorCount = this.counter.getCount();\n         this.fireAuditFinished();\n         return errorCount;\n     }\n     \n     private Set<String> getExternalResourceLocations() {\n-        final Stream<Object> concat = Stream.concat(this.fileSetChecks.stream(), (Stream<?>)this.filters.getFilters().stream());\n-        final Class<ExternalResourceHolder> obj = ExternalResourceHolder.class;\n-        Objects.requireNonNull(obj);\n-        final Stream<Object> filter = concat.filter(obj::isInstance);\n-        final Class<ExternalResourceHolder> obj2 = ExternalResourceHolder.class;\n-        Objects.requireNonNull(obj2);\n-        return filter.map((Function<? super Object, ?>)obj2::cast).flatMap(resource -> resource.getExternalResourceLocations().stream()).collect((Collector<? super Object, ?, Set<String>>)Collectors.toSet());\n+        return Stream.concat(this.fileSetChecks.stream(), (Stream<?>)this.filters.getFilters().stream()).filter(ExternalResourceHolder.class::isInstance).map((Function<? super Object, ?>)ExternalResourceHolder.class::cast).flatMap(resource -> resource.getExternalResourceLocations().stream()).collect((Collector<? super Object, ?, Set<String>>)Collectors.toSet());\n     }\n     \n     private void fireAuditStarted() {\n         final AuditEvent event = new AuditEvent((Object)this);\n         for (final AuditListener listener : this.listeners) {\n             listener.auditStarted(event);\n         }\n@@ -166,15 +159,18 @@\n     \n     private void processFiles(final List<File> files) throws CheckstyleException {\n         for (final File file : files) {\n             String fileName = null;\n             try {\n                 fileName = file.getAbsolutePath();\n                 final long timestamp = file.lastModified();\n-                if ((this.cacheFile != null && this.cacheFile.isInCache(fileName, timestamp)) || !this.acceptFileStarted(fileName)) {\n+                if (this.cacheFile != null && this.cacheFile.isInCache(fileName, timestamp)) {\n+                    continue;\n+                }\n+                if (!this.acceptFileStarted(fileName)) {\n                     continue;\n                 }\n                 if (this.cacheFile != null) {\n                     this.cacheFile.put(fileName, timestamp);\n                 }\n                 this.fireFileStarted(fileName);\n                 final SortedSet<Violation> fileMessages = this.processFile(file);\n@@ -187,15 +183,15 @@\n                 }\n                 throw new CheckstyleException(\"Exception was thrown while processing \" + file.getPath(), (Throwable)ex);\n             }\n             catch (final Error error) {\n                 if (fileName != null && this.cacheFile != null) {\n                     this.cacheFile.remove(fileName);\n                 }\n-                throw new Error(\"Error was thrown while processing \" + file.getPath(), (Throwable)error);\n+                throw new Error(\"Error was thrown while processing \" + file.getPath(), error);\n             }\n         }\n     }\n     \n     private SortedSet<Violation> processFile(final File file) throws CheckstyleException {\n         final SortedSet<Violation> fileMessages = new TreeSet<Violation>();\n         try {\n@@ -303,15 +299,15 @@\n         }\n         else if (child instanceof Filter) {\n             final Filter filter2 = (Filter)child;\n             this.addFilter(filter2);\n         }\n         else {\n             if (!(child instanceof AuditListener)) {\n-                throw new CheckstyleException(name + \" is not allowed as a child in Checker\");\n+                throw new CheckstyleException(String.valueOf(name) + \" is not allowed as a child in Checker\");\n             }\n             final AuditListener listener = (AuditListener)child;\n             this.addListener(listener);\n         }\n     }\n     \n     public void addFileSetCheck(final FileSetCheck fileSetCheck) {\n@@ -367,15 +363,15 @@\n     \n     public final void setModuleClassLoader(final ClassLoader moduleClassLoader) {\n         this.moduleClassLoader = moduleClassLoader;\n     }\n     \n     public void setCharset(final String charset) throws UnsupportedEncodingException {\n         if (!Charset.isSupported(charset)) {\n-            final String message = \"unsupported charset: '\" + charset;\n+            final String message = \"unsupported charset: '\" + charset + \"'\";\n             throw new UnsupportedEncodingException(message);\n         }\n         this.charset = charset;\n     }\n     \n     public void setHaltOnException(final boolean haltOnException) {\n         this.haltOnException = haltOnException;\n"}]}
