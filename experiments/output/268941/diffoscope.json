{"diffoscope-json-version": 1, "source1": "first/OuterTypeFilenameCheck.class", "source2": "second/OuterTypeFilenameCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -26,46 +26,41 @@\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 14, 15, 154, 157, 199 };\n     }\n     \n-    public void beginTree(final DetailAST rootAST) {\n+    public void beginTree(final DetailAST detailAST) {\n         this.fileName = this.getSourceFileName();\n         this.seenFirstToken = false;\n         this.hasPublic = false;\n         this.wrongType = null;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n+    public void visitToken(final DetailAST wrongType) {\n         if (this.seenFirstToken) {\n-            final DetailAST modifiers = ast.findFirstToken(5);\n-            if (modifiers.findFirstToken(62) != null && TokenUtil.isRootNode(ast.getParent())) {\n+            if (wrongType.findFirstToken(5).findFirstToken(62) != null && TokenUtil.isRootNode(wrongType.getParent())) {\n                 this.hasPublic = true;\n             }\n         }\n-        else {\n-            final String outerTypeName = ast.findFirstToken(58).getText();\n-            if (!this.fileName.equals(outerTypeName)) {\n-                this.wrongType = ast;\n-            }\n+        else if (!this.fileName.equals(wrongType.findFirstToken(58).getText())) {\n+            this.wrongType = wrongType;\n         }\n         this.seenFirstToken = true;\n     }\n     \n-    public void finishTree(final DetailAST rootAST) {\n+    public void finishTree(final DetailAST detailAST) {\n         if (!this.hasPublic && this.wrongType != null) {\n             this.log(this.wrongType, \"type.file.mismatch\", new Object[0]);\n         }\n     }\n     \n     private String getSourceFileName() {\n-        String name = this.getFilePath();\n-        name = name.substring(name.lastIndexOf(File.separatorChar) + 1);\n-        return OuterTypeFilenameCheck.FILE_EXTENSION_PATTERN.matcher(name).replaceAll(\"\");\n+        final String filePath = this.getFilePath();\n+        return OuterTypeFilenameCheck.FILE_EXTENSION_PATTERN.matcher(filePath.substring(filePath.lastIndexOf(File.separatorChar) + 1)).replaceAll(\"\");\n     }\n     \n     static {\n         FILE_EXTENSION_PATTERN = Pattern.compile(\"\\\\.[^.]*$\");\n     }\n }\n"}]}
