{"diffoscope-json-version": 1, "source1": "first/BoundedSeekableByteChannelInputStream.class", "source2": "second/BoundedSeekableByteChannelInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,19 +9,19 @@\n class BoundedSeekableByteChannelInputStream extends InputStream\n {\n     private static final int MAX_BUF_LEN = 8192;\n     private final ByteBuffer buffer;\n     private final SeekableByteChannel channel;\n     private long bytesRemaining;\n     \n-    public BoundedSeekableByteChannelInputStream(final SeekableByteChannel channel, final long size) {\n+    public BoundedSeekableByteChannelInputStream(final SeekableByteChannel channel, final long bytesRemaining) {\n         this.channel = channel;\n-        this.bytesRemaining = size;\n-        if (size < 8192L && size > 0L) {\n-            this.buffer = ByteBuffer.allocate((int)size);\n+        this.bytesRemaining = bytesRemaining;\n+        if (bytesRemaining < 8192L && bytesRemaining > 0L) {\n+            this.buffer = ByteBuffer.allocate((int)bytesRemaining);\n         }\n         else {\n             this.buffer = ByteBuffer.allocate(8192);\n         }\n     }\n     \n     @Override\n@@ -34,42 +34,42 @@\n         if (read < 0) {\n             return read;\n         }\n         return this.buffer.get() & 0xFF;\n     }\n     \n     @Override\n-    public int read(final byte[] b, final int off, final int len) throws IOException {\n+    public int read(final byte[] dst, final int offset, final int n) throws IOException {\n         if (this.bytesRemaining == 0L) {\n             return -1;\n         }\n-        int bytesToRead = len;\n-        if (bytesToRead > this.bytesRemaining) {\n-            bytesToRead = (int)this.bytesRemaining;\n-        }\n-        ByteBuffer buf;\n-        int bytesRead;\n-        if (bytesToRead <= this.buffer.capacity()) {\n-            buf = this.buffer;\n-            bytesRead = this.read(bytesToRead);\n+        int capacity = n;\n+        if (capacity > this.bytesRemaining) {\n+            capacity = (int)this.bytesRemaining;\n+        }\n+        ByteBuffer byteBuffer;\n+        int length;\n+        if (capacity <= this.buffer.capacity()) {\n+            byteBuffer = this.buffer;\n+            length = this.read(capacity);\n         }\n         else {\n-            buf = ByteBuffer.allocate(bytesToRead);\n-            bytesRead = this.channel.read(buf);\n-            buf.flip();\n-        }\n-        if (bytesRead >= 0) {\n-            buf.get(b, off, bytesRead);\n-            this.bytesRemaining -= bytesRead;\n+            byteBuffer = ByteBuffer.allocate(capacity);\n+            length = this.channel.read(byteBuffer);\n+            byteBuffer.flip();\n+        }\n+        if (length >= 0) {\n+            byteBuffer.get(dst, offset, length);\n+            this.bytesRemaining -= length;\n         }\n-        return bytesRead;\n+        return length;\n     }\n     \n-    private int read(final int len) throws IOException {\n-        this.buffer.rewind().limit(len);\n+    private int read(final int newLimit) throws IOException {\n+        this.buffer.rewind().limit(newLimit);\n         final int read = this.channel.read(this.buffer);\n         this.buffer.flip();\n         return read;\n     }\n     \n     @Override\n     public void close() {\n"}]}
