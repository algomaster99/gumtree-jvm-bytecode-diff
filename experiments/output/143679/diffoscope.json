{"diffoscope-json-version": 1, "source1": "first/NPathComplexityCheck.class", "source2": "second/NPathComplexityCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -20,14 +20,18 @@\n     private final Deque<Integer> expressionValues;\n     private final Deque<Boolean> afterValues;\n     private final NPathComplexityCheck.TokenEnd processingTokenEnd;\n     private BigInteger currentRangeValue;\n     private int max;\n     private boolean branchVisited;\n     \n+    static {\n+        INITIAL_VALUE = BigInteger.ZERO;\n+    }\n+    \n     public NPathComplexityCheck() {\n         this.rangeValues = new ArrayDeque<BigInteger>();\n         this.expressionValues = new ArrayDeque<Integer>();\n         this.afterValues = new ArrayDeque<Boolean>();\n         this.processingTokenEnd = new NPathComplexityCheck.TokenEnd();\n         this.max = 200;\n     }\n@@ -279,15 +283,11 @@\n         }\n         return counter;\n     }\n     \n     private static int countCaseConstants(final DetailAST ast) {\n         final AtomicInteger counter = new AtomicInteger();\n         final DetailAST literalCase = ast.getFirstChild();\n-        TokenUtil.forEachChild(literalCase, 28, node -> counter.getAndIncrement());\n+        TokenUtil.forEachChild(literalCase, 28, node -> atomicInteger.getAndIncrement());\n         return counter.get();\n     }\n-    \n-    static {\n-        INITIAL_VALUE = BigInteger.ZERO;\n-    }\n }\n"}]}
