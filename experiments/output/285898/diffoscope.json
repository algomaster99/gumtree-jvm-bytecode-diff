{"diffoscope-json-version": 1, "source1": "first/Base32.class", "source2": "second/Base32.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,70 +1,70 @@\n-  SHA-256 checksum 901c7d72c7436886315e3c75e9fc7e11afb0749b1c0ba52887dc2b199097575f\n+  SHA-256 checksum e0256abaa5b21525c6a6cefb68b28418cc80474033e2e2b0dd7f3551e534060d\n   Compiled from \"Base32.java\"\n public class org.apache.commons.codec.binary.Base32 extends org.apache.commons.codec.binary.BaseNCodec\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #7                          // org/apache/commons/codec/binary/Base32\n   super_class: #3                         // org/apache/commons/codec/binary/BaseNCodec\n   interfaces: 0, fields: 20, methods: 13, attributes: 2\n Constant pool:\n-    #1 = Methodref          #7.#116       // org/apache/commons/codec/binary/Base32.\"<init>\":(Z)V\n-    #2 = Methodref          #7.#117       // org/apache/commons/codec/binary/Base32.\"<init>\":(ZB)V\n-    #3 = Class              #118          // org/apache/commons/codec/binary/BaseNCodec\n-    #4 = Methodref          #7.#119       // org/apache/commons/codec/binary/Base32.\"<init>\":(I[BZB)V\n-    #5 = Fieldref           #7.#120       // org/apache/commons/codec/binary/Base32.CHUNK_SEPARATOR:[B\n-    #6 = Methodref          #7.#121       // org/apache/commons/codec/binary/Base32.\"<init>\":(I[B)V\n-    #7 = Class              #122          // org/apache/commons/codec/binary/Base32\n-    #8 = Methodref          #3.#123       // org/apache/commons/codec/binary/BaseNCodec.\"<init>\":(IIIIB)V\n-    #9 = Fieldref           #7.#124       // org/apache/commons/codec/binary/Base32.HEX_ENCODE_TABLE:[B\n-   #10 = Fieldref           #7.#125       // org/apache/commons/codec/binary/Base32.encodeTable:[B\n-   #11 = Fieldref           #7.#126       // org/apache/commons/codec/binary/Base32.HEX_DECODE_TABLE:[B\n-   #12 = Fieldref           #7.#127       // org/apache/commons/codec/binary/Base32.decodeTable:[B\n-   #13 = Fieldref           #7.#128       // org/apache/commons/codec/binary/Base32.ENCODE_TABLE:[B\n-   #14 = Fieldref           #7.#129       // org/apache/commons/codec/binary/Base32.DECODE_TABLE:[B\n-   #15 = Class              #130          // java/lang/IllegalArgumentException\n-   #16 = Class              #131          // java/lang/StringBuilder\n-   #17 = Methodref          #16.#132      // java/lang/StringBuilder.\"<init>\":()V\n-   #18 = String             #133          // lineLength\n-   #19 = Methodref          #16.#134      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #20 = Methodref          #16.#135      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #21 = String             #136          //  > 0, but lineSeparator is null\n-   #22 = Methodref          #16.#137      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #23 = Methodref          #15.#138      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #24 = Methodref          #7.#139       // org/apache/commons/codec/binary/Base32.containsAlphabetOrPad:([B)Z\n-   #25 = Methodref          #140.#141     // org/apache/commons/codec/binary/StringUtils.newStringUtf8:([B)Ljava/lang/String;\n-   #26 = String             #142          // lineSeparator must not contain Base32 characters: [\n-   #27 = String             #143          // ]\n-   #28 = Fieldref           #7.#144       // org/apache/commons/codec/binary/Base32.encodeSize:I\n-   #29 = Fieldref           #7.#145       // org/apache/commons/codec/binary/Base32.lineSeparator:[B\n-   #30 = Methodref          #146.#147     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #31 = Fieldref           #7.#148       // org/apache/commons/codec/binary/Base32.decodeSize:I\n-   #32 = Methodref          #7.#149       // org/apache/commons/codec/binary/Base32.isInAlphabet:(B)Z\n-   #33 = Methodref          #7.#150       // org/apache/commons/codec/binary/Base32.isWhiteSpace:(B)Z\n-   #34 = String             #151          // pad must not be in alphabet or whitespace\n-   #35 = Fieldref           #104.#152     // org/apache/commons/codec/binary/BaseNCodec$Context.eof:Z\n-   #36 = Fieldref           #7.#153       // org/apache/commons/codec/binary/Base32.pad:B\n-   #37 = Methodref          #7.#154       // org/apache/commons/codec/binary/Base32.ensureBufferSize:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n-   #38 = Fieldref           #104.#155     // org/apache/commons/codec/binary/BaseNCodec$Context.modulus:I\n-   #39 = Fieldref           #104.#156     // org/apache/commons/codec/binary/BaseNCodec$Context.lbitWorkArea:J\n-   #40 = Fieldref           #104.#157     // org/apache/commons/codec/binary/BaseNCodec$Context.pos:I\n+    #1 = Methodref          #7.#115       // org/apache/commons/codec/binary/Base32.\"<init>\":(Z)V\n+    #2 = Methodref          #7.#116       // org/apache/commons/codec/binary/Base32.\"<init>\":(ZB)V\n+    #3 = Class              #117          // org/apache/commons/codec/binary/BaseNCodec\n+    #4 = Methodref          #7.#118       // org/apache/commons/codec/binary/Base32.\"<init>\":(I[BZB)V\n+    #5 = Fieldref           #7.#119       // org/apache/commons/codec/binary/Base32.CHUNK_SEPARATOR:[B\n+    #6 = Methodref          #7.#120       // org/apache/commons/codec/binary/Base32.\"<init>\":(I[B)V\n+    #7 = Class              #121          // org/apache/commons/codec/binary/Base32\n+    #8 = Methodref          #3.#122       // org/apache/commons/codec/binary/BaseNCodec.\"<init>\":(IIIIB)V\n+    #9 = Fieldref           #7.#123       // org/apache/commons/codec/binary/Base32.HEX_ENCODE_TABLE:[B\n+   #10 = Fieldref           #7.#124       // org/apache/commons/codec/binary/Base32.encodeTable:[B\n+   #11 = Fieldref           #7.#125       // org/apache/commons/codec/binary/Base32.HEX_DECODE_TABLE:[B\n+   #12 = Fieldref           #7.#126       // org/apache/commons/codec/binary/Base32.decodeTable:[B\n+   #13 = Fieldref           #7.#127       // org/apache/commons/codec/binary/Base32.ENCODE_TABLE:[B\n+   #14 = Fieldref           #7.#128       // org/apache/commons/codec/binary/Base32.DECODE_TABLE:[B\n+   #15 = Class              #129          // java/lang/IllegalArgumentException\n+   #16 = Class              #130          // java/lang/StringBuilder\n+   #17 = Methodref          #16.#131      // java/lang/StringBuilder.\"<init>\":()V\n+   #18 = String             #132          // lineLength\n+   #19 = Methodref          #16.#133      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #20 = Methodref          #16.#134      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #21 = String             #135          //  > 0, but lineSeparator is null\n+   #22 = Methodref          #16.#136      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #23 = Methodref          #15.#137      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #24 = Methodref          #7.#138       // org/apache/commons/codec/binary/Base32.containsAlphabetOrPad:([B)Z\n+   #25 = Methodref          #139.#140     // org/apache/commons/codec/binary/StringUtils.newStringUtf8:([B)Ljava/lang/String;\n+   #26 = String             #141          // lineSeparator must not contain Base32 characters: [\n+   #27 = String             #142          // ]\n+   #28 = Fieldref           #7.#143       // org/apache/commons/codec/binary/Base32.encodeSize:I\n+   #29 = Fieldref           #7.#144       // org/apache/commons/codec/binary/Base32.lineSeparator:[B\n+   #30 = Methodref          #145.#146     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #31 = Fieldref           #7.#147       // org/apache/commons/codec/binary/Base32.decodeSize:I\n+   #32 = Methodref          #7.#148       // org/apache/commons/codec/binary/Base32.isInAlphabet:(B)Z\n+   #33 = Methodref          #7.#149       // org/apache/commons/codec/binary/Base32.isWhiteSpace:(B)Z\n+   #34 = String             #150          // pad must not be in alphabet or whitespace\n+   #35 = Fieldref           #103.#151     // org/apache/commons/codec/binary/BaseNCodec$Context.eof:Z\n+   #36 = Fieldref           #7.#152       // org/apache/commons/codec/binary/Base32.pad:B\n+   #37 = Methodref          #7.#153       // org/apache/commons/codec/binary/Base32.ensureBufferSize:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n+   #38 = Fieldref           #103.#154     // org/apache/commons/codec/binary/BaseNCodec$Context.modulus:I\n+   #39 = Fieldref           #103.#155     // org/apache/commons/codec/binary/BaseNCodec$Context.lbitWorkArea:J\n+   #40 = Fieldref           #103.#156     // org/apache/commons/codec/binary/BaseNCodec$Context.pos:I\n    #41 = Long               255l\n    #43 = Long               3l\n-   #45 = Methodref          #7.#158       // org/apache/commons/codec/binary/Base32.validateCharacter:(JLorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+   #45 = Methodref          #7.#157       // org/apache/commons/codec/binary/Base32.validateCharacter:(JLorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n    #46 = Long               127l\n    #48 = Long               15l\n    #50 = Long               63l\n    #52 = Long               7l\n-   #54 = Class              #159          // java/lang/IllegalStateException\n-   #55 = String             #160          // Impossible modulus\n-   #56 = Methodref          #54.#138      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-   #57 = Fieldref           #7.#161       // org/apache/commons/codec/binary/Base32.lineLength:I\n-   #58 = Fieldref           #104.#162     // org/apache/commons/codec/binary/BaseNCodec$Context.currentLinePos:I\n-   #59 = String             #163          // Last encoded character (before the paddings if any) is a valid base 32 alphabet but not a possible value. Expected the discarded bits to be zero.\n+   #54 = Class              #158          // java/lang/IllegalStateException\n+   #55 = String             #159          // Impossible modulus\n+   #56 = Methodref          #54.#137      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+   #57 = Fieldref           #7.#160       // org/apache/commons/codec/binary/Base32.lineLength:I\n+   #58 = Fieldref           #103.#161     // org/apache/commons/codec/binary/BaseNCodec$Context.currentLinePos:I\n+   #59 = String             #162          // Last encoded character (before the paddings if any) is a valid base 32 alphabet but not a possible value. Expected the discarded bits to be zero.\n    #60 = Utf8               BITS_PER_ENCODED_BYTE\n    #61 = Utf8               I\n    #62 = Utf8               ConstantValue\n    #63 = Integer            5\n    #64 = Utf8               BYTES_PER_ENCODED_BLOCK\n    #65 = Integer            8\n    #66 = Utf8               BYTES_PER_UNENCODED_BLOCK\n@@ -98,104 +98,103 @@\n    #95 = Utf8               (ZB)V\n    #96 = Utf8               (I)V\n    #97 = Utf8               (I[B)V\n    #98 = Utf8               (I[BZ)V\n    #99 = Utf8               (I[BZB)V\n   #100 = Utf8               StackMapTable\n   #101 = Class              #68           // \"[B\"\n-  #102 = Class              #122          // org/apache/commons/codec/binary/Base32\n-  #103 = Utf8               decode\n-  #104 = Class              #164          // org/apache/commons/codec/binary/BaseNCodec$Context\n-  #105 = Utf8               Context\n-  #106 = Utf8               InnerClasses\n-  #107 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-  #108 = Utf8               encode\n-  #109 = Utf8               isInAlphabet\n-  #110 = Utf8               (B)Z\n-  #111 = Utf8               validateCharacter\n-  #112 = Utf8               (JLorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-  #113 = Utf8               <clinit>\n-  #114 = Utf8               SourceFile\n-  #115 = Utf8               Base32.java\n-  #116 = NameAndType        #89:#94       // \"<init>\":(Z)V\n-  #117 = NameAndType        #89:#95       // \"<init>\":(ZB)V\n-  #118 = Utf8               org/apache/commons/codec/binary/BaseNCodec\n-  #119 = NameAndType        #89:#99       // \"<init>\":(I[BZB)V\n-  #120 = NameAndType        #67:#68       // CHUNK_SEPARATOR:[B\n-  #121 = NameAndType        #89:#97       // \"<init>\":(I[B)V\n-  #122 = Utf8               org/apache/commons/codec/binary/Base32\n-  #123 = NameAndType        #89:#165      // \"<init>\":(IIIIB)V\n-  #124 = NameAndType        #72:#68       // HEX_ENCODE_TABLE:[B\n-  #125 = NameAndType        #87:#68       // encodeTable:[B\n-  #126 = NameAndType        #71:#68       // HEX_DECODE_TABLE:[B\n-  #127 = NameAndType        #85:#68       // decodeTable:[B\n-  #128 = NameAndType        #70:#68       // ENCODE_TABLE:[B\n-  #129 = NameAndType        #69:#68       // DECODE_TABLE:[B\n-  #130 = Utf8               java/lang/IllegalArgumentException\n-  #131 = Utf8               java/lang/StringBuilder\n-  #132 = NameAndType        #89:#90       // \"<init>\":()V\n-  #133 = Utf8               lineLength\n-  #134 = NameAndType        #166:#167     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #135 = NameAndType        #166:#168     // append:(I)Ljava/lang/StringBuilder;\n-  #136 = Utf8                > 0, but lineSeparator is null\n-  #137 = NameAndType        #169:#170     // toString:()Ljava/lang/String;\n-  #138 = NameAndType        #89:#171      // \"<init>\":(Ljava/lang/String;)V\n-  #139 = NameAndType        #172:#173     // containsAlphabetOrPad:([B)Z\n-  #140 = Class              #174          // org/apache/commons/codec/binary/StringUtils\n-  #141 = NameAndType        #175:#176     // newStringUtf8:([B)Ljava/lang/String;\n-  #142 = Utf8               lineSeparator must not contain Base32 characters: [\n-  #143 = Utf8               ]\n-  #144 = NameAndType        #86:#61       // encodeSize:I\n-  #145 = NameAndType        #88:#68       // lineSeparator:[B\n-  #146 = Class              #177          // java/lang/System\n-  #147 = NameAndType        #178:#179     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #148 = NameAndType        #84:#61       // decodeSize:I\n-  #149 = NameAndType        #109:#110     // isInAlphabet:(B)Z\n-  #150 = NameAndType        #180:#110     // isWhiteSpace:(B)Z\n-  #151 = Utf8               pad must not be in alphabet or whitespace\n-  #152 = NameAndType        #181:#182     // eof:Z\n-  #153 = NameAndType        #183:#184     // pad:B\n-  #154 = NameAndType        #185:#186     // ensureBufferSize:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n-  #155 = NameAndType        #187:#61      // modulus:I\n-  #156 = NameAndType        #188:#74      // lbitWorkArea:J\n-  #157 = NameAndType        #189:#61      // pos:I\n-  #158 = NameAndType        #111:#112     // validateCharacter:(JLorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-  #159 = Utf8               java/lang/IllegalStateException\n-  #160 = Utf8               Impossible modulus\n-  #161 = NameAndType        #190:#61      // lineLength:I\n-  #162 = NameAndType        #191:#61      // currentLinePos:I\n-  #163 = Utf8               Last encoded character (before the paddings if any) is a valid base 32 alphabet but not a possible value. Expected the discarded bits to be zero.\n-  #164 = Utf8               org/apache/commons/codec/binary/BaseNCodec$Context\n-  #165 = Utf8               (IIIIB)V\n-  #166 = Utf8               append\n-  #167 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #168 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #169 = Utf8               toString\n-  #170 = Utf8               ()Ljava/lang/String;\n-  #171 = Utf8               (Ljava/lang/String;)V\n-  #172 = Utf8               containsAlphabetOrPad\n-  #173 = Utf8               ([B)Z\n-  #174 = Utf8               org/apache/commons/codec/binary/StringUtils\n-  #175 = Utf8               newStringUtf8\n-  #176 = Utf8               ([B)Ljava/lang/String;\n-  #177 = Utf8               java/lang/System\n-  #178 = Utf8               arraycopy\n-  #179 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #180 = Utf8               isWhiteSpace\n-  #181 = Utf8               eof\n-  #182 = Utf8               Z\n-  #183 = Utf8               pad\n-  #184 = Utf8               B\n-  #185 = Utf8               ensureBufferSize\n-  #186 = Utf8               (ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n-  #187 = Utf8               modulus\n-  #188 = Utf8               lbitWorkArea\n-  #189 = Utf8               pos\n-  #190 = Utf8               lineLength\n-  #191 = Utf8               currentLinePos\n+  #102 = Utf8               decode\n+  #103 = Class              #163          // org/apache/commons/codec/binary/BaseNCodec$Context\n+  #104 = Utf8               Context\n+  #105 = Utf8               InnerClasses\n+  #106 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+  #107 = Utf8               encode\n+  #108 = Utf8               isInAlphabet\n+  #109 = Utf8               (B)Z\n+  #110 = Utf8               validateCharacter\n+  #111 = Utf8               (JLorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+  #112 = Utf8               <clinit>\n+  #113 = Utf8               SourceFile\n+  #114 = Utf8               Base32.java\n+  #115 = NameAndType        #89:#94       // \"<init>\":(Z)V\n+  #116 = NameAndType        #89:#95       // \"<init>\":(ZB)V\n+  #117 = Utf8               org/apache/commons/codec/binary/BaseNCodec\n+  #118 = NameAndType        #89:#99       // \"<init>\":(I[BZB)V\n+  #119 = NameAndType        #67:#68       // CHUNK_SEPARATOR:[B\n+  #120 = NameAndType        #89:#97       // \"<init>\":(I[B)V\n+  #121 = Utf8               org/apache/commons/codec/binary/Base32\n+  #122 = NameAndType        #89:#164      // \"<init>\":(IIIIB)V\n+  #123 = NameAndType        #72:#68       // HEX_ENCODE_TABLE:[B\n+  #124 = NameAndType        #87:#68       // encodeTable:[B\n+  #125 = NameAndType        #71:#68       // HEX_DECODE_TABLE:[B\n+  #126 = NameAndType        #85:#68       // decodeTable:[B\n+  #127 = NameAndType        #70:#68       // ENCODE_TABLE:[B\n+  #128 = NameAndType        #69:#68       // DECODE_TABLE:[B\n+  #129 = Utf8               java/lang/IllegalArgumentException\n+  #130 = Utf8               java/lang/StringBuilder\n+  #131 = NameAndType        #89:#90       // \"<init>\":()V\n+  #132 = Utf8               lineLength\n+  #133 = NameAndType        #165:#166     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #134 = NameAndType        #165:#167     // append:(I)Ljava/lang/StringBuilder;\n+  #135 = Utf8                > 0, but lineSeparator is null\n+  #136 = NameAndType        #168:#169     // toString:()Ljava/lang/String;\n+  #137 = NameAndType        #89:#170      // \"<init>\":(Ljava/lang/String;)V\n+  #138 = NameAndType        #171:#172     // containsAlphabetOrPad:([B)Z\n+  #139 = Class              #173          // org/apache/commons/codec/binary/StringUtils\n+  #140 = NameAndType        #174:#175     // newStringUtf8:([B)Ljava/lang/String;\n+  #141 = Utf8               lineSeparator must not contain Base32 characters: [\n+  #142 = Utf8               ]\n+  #143 = NameAndType        #86:#61       // encodeSize:I\n+  #144 = NameAndType        #88:#68       // lineSeparator:[B\n+  #145 = Class              #176          // java/lang/System\n+  #146 = NameAndType        #177:#178     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #147 = NameAndType        #84:#61       // decodeSize:I\n+  #148 = NameAndType        #108:#109     // isInAlphabet:(B)Z\n+  #149 = NameAndType        #179:#109     // isWhiteSpace:(B)Z\n+  #150 = Utf8               pad must not be in alphabet or whitespace\n+  #151 = NameAndType        #180:#181     // eof:Z\n+  #152 = NameAndType        #182:#183     // pad:B\n+  #153 = NameAndType        #184:#185     // ensureBufferSize:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n+  #154 = NameAndType        #186:#61      // modulus:I\n+  #155 = NameAndType        #187:#74      // lbitWorkArea:J\n+  #156 = NameAndType        #188:#61      // pos:I\n+  #157 = NameAndType        #110:#111     // validateCharacter:(JLorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+  #158 = Utf8               java/lang/IllegalStateException\n+  #159 = Utf8               Impossible modulus\n+  #160 = NameAndType        #189:#61      // lineLength:I\n+  #161 = NameAndType        #190:#61      // currentLinePos:I\n+  #162 = Utf8               Last encoded character (before the paddings if any) is a valid base 32 alphabet but not a possible value. Expected the discarded bits to be zero.\n+  #163 = Utf8               org/apache/commons/codec/binary/BaseNCodec$Context\n+  #164 = Utf8               (IIIIB)V\n+  #165 = Utf8               append\n+  #166 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #167 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #168 = Utf8               toString\n+  #169 = Utf8               ()Ljava/lang/String;\n+  #170 = Utf8               (Ljava/lang/String;)V\n+  #171 = Utf8               containsAlphabetOrPad\n+  #172 = Utf8               ([B)Z\n+  #173 = Utf8               org/apache/commons/codec/binary/StringUtils\n+  #174 = Utf8               newStringUtf8\n+  #175 = Utf8               ([B)Ljava/lang/String;\n+  #176 = Utf8               java/lang/System\n+  #177 = Utf8               arraycopy\n+  #178 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #179 = Utf8               isWhiteSpace\n+  #180 = Utf8               eof\n+  #181 = Utf8               Z\n+  #182 = Utf8               pad\n+  #183 = Utf8               B\n+  #184 = Utf8               ensureBufferSize\n+  #185 = Utf8               (ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n+  #186 = Utf8               modulus\n+  #187 = Utf8               lbitWorkArea\n+  #188 = Utf8               pos\n+  #189 = Utf8               lineLength\n+  #190 = Utf8               currentLinePos\n {\n   private static final int BITS_PER_ENCODED_BYTE = 5;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 5\n \n   private static final int BYTES_PER_ENCODED_BLOCK = 8;\n@@ -502,14 +501,16 @@\n        215: dup\n        216: ldc           #34                 // String pad must not be in alphabet or whitespace\n        218: invokespecial #23                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n        221: athrow\n        222: return\n       LineNumberTable:\n         line 298: 0\n+        line 299: 5\n+        line 298: 17\n         line 300: 20\n         line 301: 24\n         line 302: 31\n         line 304: 41\n         line 305: 48\n         line 307: 55\n         line 308: 59\n@@ -3342,8 +3343,8 @@\n         line 66: 16\n         line 83: 678\n         line 94: 871\n         line 111: 1515\n }\n SourceFile: \"Base32.java\"\n InnerClasses:\n-  static #105= #104 of #3;                // Context=class org/apache/commons/codec/binary/BaseNCodec$Context of class org/apache/commons/codec/binary/BaseNCodec\n+  static #104= #103 of #3;                // Context=class org/apache/commons/codec/binary/BaseNCodec$Context of class org/apache/commons/codec/binary/BaseNCodec\n"}]}
