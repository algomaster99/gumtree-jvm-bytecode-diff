{"diffoscope-json-version": 1, "source1": "first/UnnecessarySemicolonInTryWithResourcesCheck.class", "source2": "second/UnnecessarySemicolonInTryWithResourcesCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -28,15 +28,15 @@\n         return new int[] { 176 };\n     }\n     \n     public void setAllowWhenNoBraceAfterSemicolon(final boolean allowWhenNoBraceAfterSemicolon) {\n         this.allowWhenNoBraceAfterSemicolon = allowWhenNoBraceAfterSemicolon;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        final DetailAST closingParen = ast.getLastChild();\n-        final DetailAST tokenBeforeCloseParen = closingParen.getPreviousSibling();\n-        if (tokenBeforeCloseParen.getType() == 45 && (!this.allowWhenNoBraceAfterSemicolon || TokenUtil.areOnSameLine(closingParen, tokenBeforeCloseParen))) {\n-            this.log(tokenBeforeCloseParen, \"unnecessary.semicolon\", new Object[0]);\n+    public void visitToken(final DetailAST detailAST) {\n+        final DetailAST lastChild = detailAST.getLastChild();\n+        final DetailAST previousSibling = lastChild.getPreviousSibling();\n+        if (previousSibling.getType() == 45 && (!this.allowWhenNoBraceAfterSemicolon || TokenUtil.areOnSameLine(lastChild, previousSibling))) {\n+            this.log(previousSibling, \"unnecessary.semicolon\", new Object[0]);\n         }\n     }\n }\n"}]}
