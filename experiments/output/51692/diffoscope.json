{"diffoscope-json-version": 1, "source1": "first/LZMADecoder.class", "source2": "second/LZMADecoder.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,319 +1,320 @@\n-  SHA-256 checksum d7487ed1c53bdf0603d792066f747375dcd7b1481105e2c5ce69b337eb13069d\n+  SHA-256 checksum acfb7ae195333533b1b0df366340357bc1f87f4acd1898955cd3aec6c0415435\n   Compiled from \"LZMADecoder.java\"\n class org.apache.commons.compress.archivers.sevenz.LZMADecoder extends org.apache.commons.compress.archivers.sevenz.CoderBase\n   minor version: 0\n   major version: 51\n   flags: (0x0020) ACC_SUPER\n-  this_class: #35                         // org/apache/commons/compress/archivers/sevenz/LZMADecoder\n-  super_class: #36                        // org/apache/commons/compress/archivers/sevenz/CoderBase\n+  this_class: #1                          // org/apache/commons/compress/archivers/sevenz/LZMADecoder\n+  super_class: #3                         // org/apache/commons/compress/archivers/sevenz/CoderBase\n   interfaces: 0, fields: 0, methods: 8, attributes: 1\n Constant pool:\n-    #1 = Class              #88           // java/lang/Class\n-    #2 = Class              #89           // org/tukaani/xz/LZMA2Options\n-    #3 = Class              #90           // java/lang/Number\n-    #4 = Methodref          #36.#91       // org/apache/commons/compress/archivers/sevenz/CoderBase.\"<init>\":([Ljava/lang/Class;)V\n-    #5 = Fieldref           #92.#93       // org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n-    #6 = Methodref          #35.#94       // org/apache/commons/compress/archivers/sevenz/LZMADecoder.getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n-    #7 = Class              #95           // org/tukaani/xz/LZMAInputStream\n-    #8 = Integer            2147483632\n-    #9 = Class              #96           // java/io/IOException\n-   #10 = Class              #97           // java/lang/StringBuilder\n-   #11 = Methodref          #10.#98       // java/lang/StringBuilder.\"<init>\":()V\n-   #12 = String             #99           // Dictionary larger than 4GiB maximum size used in\n-   #13 = Methodref          #10.#100      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #14 = Methodref          #10.#101      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #15 = Methodref          #9.#102       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #16 = Methodref          #7.#103       // org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;JBI)V\n-   #17 = Class              #104          // org/apache/commons/compress/utils/FlushShieldFilterOutputStream\n-   #18 = Class              #105          // org/tukaani/xz/LZMAOutputStream\n-   #19 = Methodref          #35.#106      // org/apache/commons/compress/archivers/sevenz/LZMADecoder.getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n-   #20 = Methodref          #18.#107      // org/tukaani/xz/LZMAOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/LZMA2Options;Z)V\n-   #21 = Methodref          #17.#108      // org/apache/commons/compress/utils/FlushShieldFilterOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n-   #22 = Methodref          #2.#109       // org/tukaani/xz/LZMA2Options.getPb:()I\n-   #23 = Methodref          #2.#110       // org/tukaani/xz/LZMA2Options.getLp:()I\n-   #24 = Methodref          #2.#111       // org/tukaani/xz/LZMA2Options.getLc:()I\n-   #25 = Methodref          #2.#112       // org/tukaani/xz/LZMA2Options.getDictSize:()I\n-   #26 = Methodref          #113.#114     // org/apache/commons/compress/utils/ByteUtils.toLittleEndian:([BJII)V\n-   #27 = Methodref          #2.#98        // org/tukaani/xz/LZMA2Options.\"<init>\":()V\n-   #28 = Methodref          #2.#115       // org/tukaani/xz/LZMA2Options.setPb:(I)V\n-   #29 = Methodref          #2.#116       // org/tukaani/xz/LZMA2Options.setLcLp:(II)V\n-   #30 = Methodref          #2.#117       // org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n-   #31 = Methodref          #113.#118     // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n-   #32 = Methodref          #35.#119      // org/apache/commons/compress/archivers/sevenz/LZMADecoder.numberOptionOrDefault:(Ljava/lang/Object;)I\n-   #33 = Integer            8388608\n-   #34 = Methodref          #35.#120      // org/apache/commons/compress/archivers/sevenz/LZMADecoder.numberOptionOrDefault:(Ljava/lang/Object;I)I\n-   #35 = Class              #121          // org/apache/commons/compress/archivers/sevenz/LZMADecoder\n-   #36 = Class              #122          // org/apache/commons/compress/archivers/sevenz/CoderBase\n-   #37 = Utf8               <init>\n-   #38 = Utf8               ()V\n-   #39 = Utf8               Code\n-   #40 = Utf8               LineNumberTable\n-   #41 = Utf8               LocalVariableTable\n-   #42 = Utf8               this\n-   #43 = Utf8               Lorg/apache/commons/compress/archivers/sevenz/LZMADecoder;\n-   #44 = Utf8               decode\n-   #45 = Utf8               (Ljava/lang/String;Ljava/io/InputStream;JLorg/apache/commons/compress/archivers/sevenz/Coder;[B)Ljava/io/InputStream;\n-   #46 = Utf8               archiveName\n-   #47 = Utf8               Ljava/lang/String;\n-   #48 = Utf8               in\n-   #49 = Utf8               Ljava/io/InputStream;\n-   #50 = Utf8               uncompressedLength\n-   #51 = Utf8               J\n-   #52 = Utf8               coder\n-   #53 = Utf8               Lorg/apache/commons/compress/archivers/sevenz/Coder;\n-   #54 = Utf8               password\n-   #55 = Utf8               [B\n-   #56 = Utf8               propsByte\n-   #57 = Utf8               B\n-   #58 = Utf8               dictSize\n-   #59 = Utf8               I\n-   #60 = Utf8               StackMapTable\n-   #61 = Utf8               Exceptions\n-   #62 = Utf8               encode\n-   #63 = Utf8               (Ljava/io/OutputStream;Ljava/lang/Object;)Ljava/io/OutputStream;\n-   #64 = Utf8               out\n-   #65 = Utf8               Ljava/io/OutputStream;\n-   #66 = Utf8               opts\n-   #67 = Utf8               Ljava/lang/Object;\n-   #68 = Utf8               getOptionsAsProperties\n-   #69 = Utf8               (Ljava/lang/Object;)[B\n-   #70 = Utf8               options\n-   #71 = Utf8               Lorg/tukaani/xz/LZMA2Options;\n-   #72 = Utf8               props\n-   #73 = Utf8               o\n-   #74 = Utf8               getOptionsFromCoder\n-   #75 = Utf8               (Lorg/apache/commons/compress/archivers/sevenz/Coder;Ljava/io/InputStream;)Ljava/lang/Object;\n-   #76 = Utf8               pb\n-   #77 = Utf8               lp\n-   #78 = Utf8               lc\n-   #79 = Utf8               getDictionarySize\n-   #80 = Utf8               (Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n-   #81 = Class              #123          // java/lang/IllegalArgumentException\n-   #82 = Utf8               getOptions\n-   #83 = Utf8               (Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n-   #84 = Utf8               numberOptionOrDefault\n-   #85 = Utf8               (Ljava/lang/Object;)I\n-   #86 = Utf8               SourceFile\n-   #87 = Utf8               LZMADecoder.java\n-   #88 = Utf8               java/lang/Class\n-   #89 = Utf8               org/tukaani/xz/LZMA2Options\n-   #90 = Utf8               java/lang/Number\n-   #91 = NameAndType        #37:#124      // \"<init>\":([Ljava/lang/Class;)V\n-   #92 = Class              #125          // org/apache/commons/compress/archivers/sevenz/Coder\n-   #93 = NameAndType        #126:#55      // properties:[B\n-   #94 = NameAndType        #79:#80       // getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n-   #95 = Utf8               org/tukaani/xz/LZMAInputStream\n-   #96 = Utf8               java/io/IOException\n-   #97 = Utf8               java/lang/StringBuilder\n-   #98 = NameAndType        #37:#38       // \"<init>\":()V\n-   #99 = Utf8               Dictionary larger than 4GiB maximum size used in\n-  #100 = NameAndType        #127:#128     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #101 = NameAndType        #129:#130     // toString:()Ljava/lang/String;\n-  #102 = NameAndType        #37:#131      // \"<init>\":(Ljava/lang/String;)V\n-  #103 = NameAndType        #37:#132      // \"<init>\":(Ljava/io/InputStream;JBI)V\n-  #104 = Utf8               org/apache/commons/compress/utils/FlushShieldFilterOutputStream\n-  #105 = Utf8               org/tukaani/xz/LZMAOutputStream\n-  #106 = NameAndType        #82:#83       // getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n-  #107 = NameAndType        #37:#133      // \"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/LZMA2Options;Z)V\n-  #108 = NameAndType        #37:#134      // \"<init>\":(Ljava/io/OutputStream;)V\n-  #109 = NameAndType        #135:#136     // getPb:()I\n-  #110 = NameAndType        #137:#136     // getLp:()I\n-  #111 = NameAndType        #138:#136     // getLc:()I\n-  #112 = NameAndType        #139:#136     // getDictSize:()I\n-  #113 = Class              #140          // org/apache/commons/compress/utils/ByteUtils\n-  #114 = NameAndType        #141:#142     // toLittleEndian:([BJII)V\n-  #115 = NameAndType        #143:#144     // setPb:(I)V\n-  #116 = NameAndType        #145:#146     // setLcLp:(II)V\n-  #117 = NameAndType        #147:#144     // setDictSize:(I)V\n-  #118 = NameAndType        #148:#149     // fromLittleEndian:([BII)J\n-  #119 = NameAndType        #84:#85       // numberOptionOrDefault:(Ljava/lang/Object;)I\n-  #120 = NameAndType        #84:#150      // numberOptionOrDefault:(Ljava/lang/Object;I)I\n-  #121 = Utf8               org/apache/commons/compress/archivers/sevenz/LZMADecoder\n-  #122 = Utf8               org/apache/commons/compress/archivers/sevenz/CoderBase\n-  #123 = Utf8               java/lang/IllegalArgumentException\n-  #124 = Utf8               ([Ljava/lang/Class;)V\n-  #125 = Utf8               org/apache/commons/compress/archivers/sevenz/Coder\n-  #126 = Utf8               properties\n-  #127 = Utf8               append\n-  #128 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #129 = Utf8               toString\n-  #130 = Utf8               ()Ljava/lang/String;\n-  #131 = Utf8               (Ljava/lang/String;)V\n-  #132 = Utf8               (Ljava/io/InputStream;JBI)V\n-  #133 = Utf8               (Ljava/io/OutputStream;Lorg/tukaani/xz/LZMA2Options;Z)V\n-  #134 = Utf8               (Ljava/io/OutputStream;)V\n-  #135 = Utf8               getPb\n-  #136 = Utf8               ()I\n-  #137 = Utf8               getLp\n-  #138 = Utf8               getLc\n-  #139 = Utf8               getDictSize\n-  #140 = Utf8               org/apache/commons/compress/utils/ByteUtils\n-  #141 = Utf8               toLittleEndian\n-  #142 = Utf8               ([BJII)V\n-  #143 = Utf8               setPb\n-  #144 = Utf8               (I)V\n-  #145 = Utf8               setLcLp\n-  #146 = Utf8               (II)V\n-  #147 = Utf8               setDictSize\n-  #148 = Utf8               fromLittleEndian\n-  #149 = Utf8               ([BII)J\n-  #150 = Utf8               (Ljava/lang/Object;I)I\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/sevenz/LZMADecoder\n+    #2 = Utf8               org/apache/commons/compress/archivers/sevenz/LZMADecoder\n+    #3 = Class              #4            // org/apache/commons/compress/archivers/sevenz/CoderBase\n+    #4 = Utf8               org/apache/commons/compress/archivers/sevenz/CoderBase\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ()V\n+    #7 = Utf8               Code\n+    #8 = Class              #9            // java/lang/Class\n+    #9 = Utf8               java/lang/Class\n+   #10 = Class              #11           // org/tukaani/xz/LZMA2Options\n+   #11 = Utf8               org/tukaani/xz/LZMA2Options\n+   #12 = Class              #13           // java/lang/Number\n+   #13 = Utf8               java/lang/Number\n+   #14 = Methodref          #3.#15        // org/apache/commons/compress/archivers/sevenz/CoderBase.\"<init>\":([Ljava/lang/Class;)V\n+   #15 = NameAndType        #5:#16        // \"<init>\":([Ljava/lang/Class;)V\n+   #16 = Utf8               ([Ljava/lang/Class;)V\n+   #17 = Utf8               LineNumberTable\n+   #18 = Utf8               LocalVariableTable\n+   #19 = Utf8               this\n+   #20 = Utf8               Lorg/apache/commons/compress/archivers/sevenz/LZMADecoder;\n+   #21 = Utf8               decode\n+   #22 = Utf8               (Ljava/lang/String;Ljava/io/InputStream;JLorg/apache/commons/compress/archivers/sevenz/Coder;[B)Ljava/io/InputStream;\n+   #23 = Utf8               Exceptions\n+   #24 = Class              #25           // java/io/IOException\n+   #25 = Utf8               java/io/IOException\n+   #26 = Fieldref           #27.#29       // org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n+   #27 = Class              #28           // org/apache/commons/compress/archivers/sevenz/Coder\n+   #28 = Utf8               org/apache/commons/compress/archivers/sevenz/Coder\n+   #29 = NameAndType        #30:#31       // properties:[B\n+   #30 = Utf8               properties\n+   #31 = Utf8               [B\n+   #32 = Methodref          #1.#33        // org/apache/commons/compress/archivers/sevenz/LZMADecoder.getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+   #33 = NameAndType        #34:#35       // getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+   #34 = Utf8               getDictionarySize\n+   #35 = Utf8               (Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+   #36 = Integer            2147483632\n+   #37 = Class              #38           // java/lang/StringBuilder\n+   #38 = Utf8               java/lang/StringBuilder\n+   #39 = String             #40           // Dictionary larger than 4GiB maximum size used in\n+   #40 = Utf8               Dictionary larger than 4GiB maximum size used in\n+   #41 = Methodref          #37.#42       // java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+   #42 = NameAndType        #5:#43        // \"<init>\":(Ljava/lang/String;)V\n+   #43 = Utf8               (Ljava/lang/String;)V\n+   #44 = Methodref          #37.#45       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #45 = NameAndType        #46:#47       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #46 = Utf8               append\n+   #47 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #48 = Methodref          #37.#49       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #49 = NameAndType        #50:#51       // toString:()Ljava/lang/String;\n+   #50 = Utf8               toString\n+   #51 = Utf8               ()Ljava/lang/String;\n+   #52 = Methodref          #24.#42       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #53 = Class              #54           // org/tukaani/xz/LZMAInputStream\n+   #54 = Utf8               org/tukaani/xz/LZMAInputStream\n+   #55 = Methodref          #53.#56       // org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;JBI)V\n+   #56 = NameAndType        #5:#57        // \"<init>\":(Ljava/io/InputStream;JBI)V\n+   #57 = Utf8               (Ljava/io/InputStream;JBI)V\n+   #58 = Utf8               archiveName\n+   #59 = Utf8               Ljava/lang/String;\n+   #60 = Utf8               in\n+   #61 = Utf8               Ljava/io/InputStream;\n+   #62 = Utf8               uncompressedLength\n+   #63 = Utf8               J\n+   #64 = Utf8               coder\n+   #65 = Utf8               Lorg/apache/commons/compress/archivers/sevenz/Coder;\n+   #66 = Utf8               password\n+   #67 = Utf8               propsByte\n+   #68 = Utf8               B\n+   #69 = Utf8               dictSize\n+   #70 = Utf8               I\n+   #71 = Utf8               StackMapTable\n+   #72 = Utf8               encode\n+   #73 = Utf8               (Ljava/io/OutputStream;Ljava/lang/Object;)Ljava/io/OutputStream;\n+   #74 = Class              #75           // org/apache/commons/compress/utils/FlushShieldFilterOutputStream\n+   #75 = Utf8               org/apache/commons/compress/utils/FlushShieldFilterOutputStream\n+   #76 = Class              #77           // org/tukaani/xz/LZMAOutputStream\n+   #77 = Utf8               org/tukaani/xz/LZMAOutputStream\n+   #78 = Methodref          #1.#79        // org/apache/commons/compress/archivers/sevenz/LZMADecoder.getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n+   #79 = NameAndType        #80:#81       // getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n+   #80 = Utf8               getOptions\n+   #81 = Utf8               (Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n+   #82 = Methodref          #76.#83       // org/tukaani/xz/LZMAOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/LZMA2Options;Z)V\n+   #83 = NameAndType        #5:#84        // \"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/LZMA2Options;Z)V\n+   #84 = Utf8               (Ljava/io/OutputStream;Lorg/tukaani/xz/LZMA2Options;Z)V\n+   #85 = Methodref          #74.#86       // org/apache/commons/compress/utils/FlushShieldFilterOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n+   #86 = NameAndType        #5:#87        // \"<init>\":(Ljava/io/OutputStream;)V\n+   #87 = Utf8               (Ljava/io/OutputStream;)V\n+   #88 = Utf8               out\n+   #89 = Utf8               Ljava/io/OutputStream;\n+   #90 = Utf8               opts\n+   #91 = Utf8               Ljava/lang/Object;\n+   #92 = Utf8               getOptionsAsProperties\n+   #93 = Utf8               (Ljava/lang/Object;)[B\n+   #94 = Methodref          #10.#95       // org/tukaani/xz/LZMA2Options.getPb:()I\n+   #95 = NameAndType        #96:#97       // getPb:()I\n+   #96 = Utf8               getPb\n+   #97 = Utf8               ()I\n+   #98 = Methodref          #10.#99       // org/tukaani/xz/LZMA2Options.getLp:()I\n+   #99 = NameAndType        #100:#97      // getLp:()I\n+  #100 = Utf8               getLp\n+  #101 = Methodref          #10.#102      // org/tukaani/xz/LZMA2Options.getLc:()I\n+  #102 = NameAndType        #103:#97      // getLc:()I\n+  #103 = Utf8               getLc\n+  #104 = Methodref          #10.#105      // org/tukaani/xz/LZMA2Options.getDictSize:()I\n+  #105 = NameAndType        #106:#97      // getDictSize:()I\n+  #106 = Utf8               getDictSize\n+  #107 = Methodref          #108.#110     // org/apache/commons/compress/utils/ByteUtils.toLittleEndian:([BJII)V\n+  #108 = Class              #109          // org/apache/commons/compress/utils/ByteUtils\n+  #109 = Utf8               org/apache/commons/compress/utils/ByteUtils\n+  #110 = NameAndType        #111:#112     // toLittleEndian:([BJII)V\n+  #111 = Utf8               toLittleEndian\n+  #112 = Utf8               ([BJII)V\n+  #113 = Utf8               options\n+  #114 = Utf8               Lorg/tukaani/xz/LZMA2Options;\n+  #115 = Utf8               props\n+  #116 = Utf8               o\n+  #117 = Utf8               getOptionsFromCoder\n+  #118 = Utf8               (Lorg/apache/commons/compress/archivers/sevenz/Coder;Ljava/io/InputStream;)Ljava/lang/Object;\n+  #119 = Methodref          #10.#120      // org/tukaani/xz/LZMA2Options.\"<init>\":()V\n+  #120 = NameAndType        #5:#6         // \"<init>\":()V\n+  #121 = Methodref          #10.#122      // org/tukaani/xz/LZMA2Options.setPb:(I)V\n+  #122 = NameAndType        #123:#124     // setPb:(I)V\n+  #123 = Utf8               setPb\n+  #124 = Utf8               (I)V\n+  #125 = Methodref          #10.#126      // org/tukaani/xz/LZMA2Options.setLcLp:(II)V\n+  #126 = NameAndType        #127:#128     // setLcLp:(II)V\n+  #127 = Utf8               setLcLp\n+  #128 = Utf8               (II)V\n+  #129 = Methodref          #10.#130      // org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n+  #130 = NameAndType        #131:#124     // setDictSize:(I)V\n+  #131 = Utf8               setDictSize\n+  #132 = Utf8               pb\n+  #133 = Utf8               lp\n+  #134 = Utf8               lc\n+  #135 = Class              #136          // java/lang/IllegalArgumentException\n+  #136 = Utf8               java/lang/IllegalArgumentException\n+  #137 = Methodref          #108.#138     // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n+  #138 = NameAndType        #139:#140     // fromLittleEndian:([BII)J\n+  #139 = Utf8               fromLittleEndian\n+  #140 = Utf8               ([BII)J\n+  #141 = Methodref          #1.#142       // org/apache/commons/compress/archivers/sevenz/LZMADecoder.numberOptionOrDefault:(Ljava/lang/Object;)I\n+  #142 = NameAndType        #143:#144     // numberOptionOrDefault:(Ljava/lang/Object;)I\n+  #143 = Utf8               numberOptionOrDefault\n+  #144 = Utf8               (Ljava/lang/Object;)I\n+  #145 = Integer            8388608\n+  #146 = Methodref          #1.#147       // org/apache/commons/compress/archivers/sevenz/LZMADecoder.numberOptionOrDefault:(Ljava/lang/Object;I)I\n+  #147 = NameAndType        #143:#148     // numberOptionOrDefault:(Ljava/lang/Object;I)I\n+  #148 = Utf8               (Ljava/lang/Object;I)I\n+  #149 = Utf8               SourceFile\n+  #150 = Utf8               LZMADecoder.java\n {\n   org.apache.commons.compress.archivers.sevenz.LZMADecoder();\n     descriptor: ()V\n     flags: (0x0000)\n     Code:\n       stack=5, locals=1, args_size=1\n          0: aload_0\n          1: iconst_2\n-         2: anewarray     #1                  // class java/lang/Class\n+         2: anewarray     #8                  // class java/lang/Class\n          5: dup\n          6: iconst_0\n-         7: ldc           #2                  // class org/tukaani/xz/LZMA2Options\n+         7: ldc           #10                 // class org/tukaani/xz/LZMA2Options\n          9: aastore\n         10: dup\n         11: iconst_1\n-        12: ldc           #3                  // class java/lang/Number\n+        12: ldc           #12                 // class java/lang/Number\n         14: aastore\n-        15: invokespecial #4                  // Method org/apache/commons/compress/archivers/sevenz/CoderBase.\"<init>\":([Ljava/lang/Class;)V\n+        15: invokespecial #14                 // Method org/apache/commons/compress/archivers/sevenz/CoderBase.\"<init>\":([Ljava/lang/Class;)V\n         18: return\n       LineNumberTable:\n         line 32: 0\n         line 33: 18\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      19     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMADecoder;\n \n   java.io.InputStream decode(java.lang.String, java.io.InputStream, long, org.apache.commons.compress.archivers.sevenz.Coder, byte[]) throws java.io.IOException;\n     descriptor: (Ljava/lang/String;Ljava/io/InputStream;JLorg/apache/commons/compress/archivers/sevenz/Coder;[B)Ljava/io/InputStream;\n     flags: (0x0000)\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=7, locals=9, args_size=6\n          0: aload         5\n-         2: getfield      #5                  // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n+         2: getfield      #26                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n          5: iconst_0\n          6: baload\n          7: istore        7\n          9: aload_0\n         10: aload         5\n-        12: invokespecial #6                  // Method getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+        12: invokespecial #32                 // Method getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n         15: istore        8\n         17: iload         8\n-        19: ldc           #8                  // int 2147483632\n-        21: if_icmple     51\n-        24: new           #9                  // class java/io/IOException\n+        19: ldc           #36                 // int 2147483632\n+        21: if_icmple     48\n+        24: new           #24                 // class java/io/IOException\n         27: dup\n-        28: new           #10                 // class java/lang/StringBuilder\n+        28: new           #37                 // class java/lang/StringBuilder\n         31: dup\n-        32: invokespecial #11                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        35: ldc           #12                 // String Dictionary larger than 4GiB maximum size used in\n-        37: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        40: aload_1\n-        41: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        44: invokevirtual #14                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        47: invokespecial #15                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        50: athrow\n-        51: new           #7                  // class org/tukaani/xz/LZMAInputStream\n-        54: dup\n-        55: aload_2\n-        56: lload_3\n-        57: iload         7\n-        59: iload         8\n-        61: invokespecial #16                 // Method org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;JBI)V\n-        64: areturn\n+        32: ldc           #39                 // String Dictionary larger than 4GiB maximum size used in\n+        34: invokespecial #41                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+        37: aload_1\n+        38: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        41: invokevirtual #48                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        44: invokespecial #52                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        47: athrow\n+        48: new           #53                 // class org/tukaani/xz/LZMAInputStream\n+        51: dup\n+        52: aload_2\n+        53: lload_3\n+        54: iload         7\n+        56: iload         8\n+        58: invokespecial #55                 // Method org/tukaani/xz/LZMAInputStream.\"<init>\":(Ljava/io/InputStream;JBI)V\n+        61: areturn\n       LineNumberTable:\n         line 38: 0\n         line 39: 9\n         line 40: 17\n         line 41: 24\n-        line 43: 51\n+        line 43: 48\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      65     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMADecoder;\n-            0      65     1 archiveName   Ljava/lang/String;\n-            0      65     2    in   Ljava/io/InputStream;\n-            0      65     3 uncompressedLength   J\n-            0      65     5 coder   Lorg/apache/commons/compress/archivers/sevenz/Coder;\n-            0      65     6 password   [B\n-            9      56     7 propsByte   B\n-           17      48     8 dictSize   I\n+            0      62     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMADecoder;\n+            0      62     1 archiveName   Ljava/lang/String;\n+            0      62     2    in   Ljava/io/InputStream;\n+            0      62     3 uncompressedLength   J\n+            0      62     5 coder   Lorg/apache/commons/compress/archivers/sevenz/Coder;\n+            0      62     6 password   [B\n+            9      53     7 propsByte   B\n+           17      45     8 dictSize   I\n       StackMapTable: number_of_entries = 1\n         frame_type = 253 /* append */\n-          offset_delta = 51\n+          offset_delta = 48\n           locals = [ int, int ]\n-    Exceptions:\n-      throws java.io.IOException\n \n   java.io.OutputStream encode(java.io.OutputStream, java.lang.Object) throws java.io.IOException;\n     descriptor: (Ljava/io/OutputStream;Ljava/lang/Object;)Ljava/io/OutputStream;\n     flags: (0x0000)\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=7, locals=3, args_size=3\n-         0: new           #17                 // class org/apache/commons/compress/utils/FlushShieldFilterOutputStream\n+         0: new           #74                 // class org/apache/commons/compress/utils/FlushShieldFilterOutputStream\n          3: dup\n-         4: new           #18                 // class org/tukaani/xz/LZMAOutputStream\n+         4: new           #76                 // class org/tukaani/xz/LZMAOutputStream\n          7: dup\n          8: aload_1\n          9: aload_0\n         10: aload_2\n-        11: invokespecial #19                 // Method getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n+        11: invokespecial #78                 // Method getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n         14: iconst_0\n-        15: invokespecial #20                 // Method org/tukaani/xz/LZMAOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/LZMA2Options;Z)V\n-        18: invokespecial #21                 // Method org/apache/commons/compress/utils/FlushShieldFilterOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n+        15: invokespecial #82                 // Method org/tukaani/xz/LZMAOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/tukaani/xz/LZMA2Options;Z)V\n+        18: invokespecial #85                 // Method org/apache/commons/compress/utils/FlushShieldFilterOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n         21: areturn\n       LineNumberTable:\n         line 51: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      22     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMADecoder;\n             0      22     1   out   Ljava/io/OutputStream;\n             0      22     2  opts   Ljava/lang/Object;\n-    Exceptions:\n-      throws java.io.IOException\n \n   byte[] getOptionsAsProperties(java.lang.Object) throws java.io.IOException;\n     descriptor: (Ljava/lang/Object;)[B\n     flags: (0x0000)\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=6, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #19                 // Method getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n+         2: invokespecial #78                 // Method getOptions:(Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n          5: astore_2\n          6: aload_2\n-         7: invokevirtual #22                 // Method org/tukaani/xz/LZMA2Options.getPb:()I\n+         7: invokevirtual #94                 // Method org/tukaani/xz/LZMA2Options.getPb:()I\n         10: iconst_5\n         11: imul\n         12: aload_2\n-        13: invokevirtual #23                 // Method org/tukaani/xz/LZMA2Options.getLp:()I\n+        13: invokevirtual #98                 // Method org/tukaani/xz/LZMA2Options.getLp:()I\n         16: iadd\n         17: bipush        9\n         19: imul\n         20: aload_2\n-        21: invokevirtual #24                 // Method org/tukaani/xz/LZMA2Options.getLc:()I\n+        21: invokevirtual #101                // Method org/tukaani/xz/LZMA2Options.getLc:()I\n         24: iadd\n         25: i2b\n         26: istore_3\n         27: aload_2\n-        28: invokevirtual #25                 // Method org/tukaani/xz/LZMA2Options.getDictSize:()I\n+        28: invokevirtual #104                // Method org/tukaani/xz/LZMA2Options.getDictSize:()I\n         31: istore        4\n         33: iconst_5\n         34: newarray       byte\n         36: astore        5\n         38: aload         5\n         40: iconst_0\n         41: iload_3\n         42: bastore\n         43: aload         5\n         45: iload         4\n         47: i2l\n         48: iconst_1\n         49: iconst_4\n-        50: invokestatic  #26                 // Method org/apache/commons/compress/utils/ByteUtils.toLittleEndian:([BJII)V\n+        50: invokestatic  #107                // Method org/apache/commons/compress/utils/ByteUtils.toLittleEndian:([BJII)V\n         53: aload         5\n         55: areturn\n       LineNumberTable:\n         line 56: 0\n         line 57: 6\n         line 58: 27\n         line 59: 33\n@@ -324,24 +325,24 @@\n         Start  Length  Slot  Name   Signature\n             0      56     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMADecoder;\n             0      56     1  opts   Ljava/lang/Object;\n             6      50     2 options   Lorg/tukaani/xz/LZMA2Options;\n            27      29     3 props   B\n            33      23     4 dictSize   I\n            38      18     5     o   [B\n-    Exceptions:\n-      throws java.io.IOException\n \n   java.lang.Object getOptionsFromCoder(org.apache.commons.compress.archivers.sevenz.Coder, java.io.InputStream) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/sevenz/Coder;Ljava/io/InputStream;)Ljava/lang/Object;\n     flags: (0x0000)\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=3, locals=9, args_size=3\n          0: aload_1\n-         1: getfield      #5                  // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n+         1: getfield      #26                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n          4: iconst_0\n          5: baload\n          6: istore_3\n          7: iload_3\n          8: sipush        255\n         11: iand\n         12: istore        4\n@@ -363,30 +364,30 @@\n         38: istore        6\n         40: iload         4\n         42: iload         6\n         44: bipush        9\n         46: imul\n         47: isub\n         48: istore        7\n-        50: new           #2                  // class org/tukaani/xz/LZMA2Options\n+        50: new           #10                 // class org/tukaani/xz/LZMA2Options\n         53: dup\n-        54: invokespecial #27                 // Method org/tukaani/xz/LZMA2Options.\"<init>\":()V\n+        54: invokespecial #119                // Method org/tukaani/xz/LZMA2Options.\"<init>\":()V\n         57: astore        8\n         59: aload         8\n         61: iload         5\n-        63: invokevirtual #28                 // Method org/tukaani/xz/LZMA2Options.setPb:(I)V\n+        63: invokevirtual #121                // Method org/tukaani/xz/LZMA2Options.setPb:(I)V\n         66: aload         8\n         68: iload         7\n         70: iload         6\n-        72: invokevirtual #29                 // Method org/tukaani/xz/LZMA2Options.setLcLp:(II)V\n+        72: invokevirtual #125                // Method org/tukaani/xz/LZMA2Options.setLcLp:(II)V\n         75: aload         8\n         77: aload_0\n         78: aload_1\n-        79: invokespecial #6                  // Method getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n-        82: invokevirtual #30                 // Method org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n+        79: invokespecial #32                 // Method getDictionarySize:(Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n+        82: invokevirtual #129                // Method org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n         85: aload         8\n         87: areturn\n       LineNumberTable:\n         line 67: 0\n         line 68: 7\n         line 69: 14\n         line 70: 21\n@@ -404,58 +405,58 @@\n             0      88     2    in   Ljava/io/InputStream;\n             7      81     3 propsByte   B\n            14      74     4 props   I\n            21      67     5    pb   I\n            40      48     6    lp   I\n            50      38     7    lc   I\n            59      29     8  opts   Lorg/tukaani/xz/LZMA2Options;\n-    Exceptions:\n-      throws java.io.IOException\n \n   private int getDictionarySize(org.apache.commons.compress.archivers.sevenz.Coder) throws java.lang.IllegalArgumentException;\n     descriptor: (Lorg/apache/commons/compress/archivers/sevenz/Coder;)I\n     flags: (0x0002) ACC_PRIVATE\n+    Exceptions:\n+      throws java.lang.IllegalArgumentException\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_1\n-         1: getfield      #5                  // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n+         1: getfield      #26                 // Field org/apache/commons/compress/archivers/sevenz/Coder.properties:[B\n          4: iconst_1\n          5: iconst_4\n-         6: invokestatic  #31                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n+         6: invokestatic  #137                // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n          9: l2i\n         10: ireturn\n       LineNumberTable:\n         line 81: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      11     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMADecoder;\n             0      11     1 coder   Lorg/apache/commons/compress/archivers/sevenz/Coder;\n-    Exceptions:\n-      throws java.lang.IllegalArgumentException\n \n   private org.tukaani.xz.LZMA2Options getOptions(java.lang.Object) throws java.io.IOException;\n     descriptor: (Ljava/lang/Object;)Lorg/tukaani/xz/LZMA2Options;\n     flags: (0x0002) ACC_PRIVATE\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_1\n-         1: instanceof    #2                  // class org/tukaani/xz/LZMA2Options\n+         1: instanceof    #10                 // class org/tukaani/xz/LZMA2Options\n          4: ifeq          12\n          7: aload_1\n-         8: checkcast     #2                  // class org/tukaani/xz/LZMA2Options\n+         8: checkcast     #10                 // class org/tukaani/xz/LZMA2Options\n         11: areturn\n-        12: new           #2                  // class org/tukaani/xz/LZMA2Options\n+        12: new           #10                 // class org/tukaani/xz/LZMA2Options\n         15: dup\n-        16: invokespecial #27                 // Method org/tukaani/xz/LZMA2Options.\"<init>\":()V\n+        16: invokespecial #119                // Method org/tukaani/xz/LZMA2Options.\"<init>\":()V\n         19: astore_2\n         20: aload_2\n         21: aload_0\n         22: aload_1\n-        23: invokespecial #32                 // Method numberOptionOrDefault:(Ljava/lang/Object;)I\n-        26: invokevirtual #30                 // Method org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n+        23: invokespecial #141                // Method numberOptionOrDefault:(Ljava/lang/Object;)I\n+        26: invokevirtual #129                // Method org/tukaani/xz/LZMA2Options.setDictSize:(I)V\n         29: aload_2\n         30: areturn\n       LineNumberTable:\n         line 85: 0\n         line 86: 7\n         line 88: 12\n         line 89: 20\n@@ -463,25 +464,23 @@\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      31     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMADecoder;\n             0      31     1  opts   Ljava/lang/Object;\n            20      11     2 options   Lorg/tukaani/xz/LZMA2Options;\n       StackMapTable: number_of_entries = 1\n         frame_type = 12 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   private int numberOptionOrDefault(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n-         1: ldc           #33                 // int 8388608\n-         3: invokestatic  #34                 // Method numberOptionOrDefault:(Ljava/lang/Object;I)I\n+         1: ldc           #145                // int 8388608\n+         3: invokestatic  #146                // Method numberOptionOrDefault:(Ljava/lang/Object;I)I\n          6: ireturn\n       LineNumberTable:\n         line 94: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0  this   Lorg/apache/commons/compress/archivers/sevenz/LZMADecoder;\n             0       7     1  opts   Ljava/lang/Object;\n"}]}
