{"diffoscope-json-version": 1, "source1": "first/CDL.class", "source2": "second/CDL.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,158 +1,158 @@\n \n package org.json;\n \n public class CDL\n {\n-    private static String getValue(final JSONTokener x) throws JSONException {\n-        char c;\n+    private static String getValue(final JSONTokener jsonTokener) throws JSONException {\n+        char next;\n         do {\n-            c = x.next();\n-        } while (c == ' ' || c == '\\t');\n-        switch (c) {\n-            case '\\0': {\n+            next = jsonTokener.next();\n+        } while (next == ' ' || next == '\\t');\n+        switch (next) {\n+            case 0: {\n                 return null;\n             }\n-            case '\\\"':\n-            case '\\'': {\n-                final char q = c;\n+            case 34:\n+            case 39: {\n+                final char c = next;\n                 final StringBuilder sb = new StringBuilder();\n                 while (true) {\n-                    c = x.next();\n-                    if (c == q) {\n-                        final char nextC = x.next();\n-                        if (nextC != '\\\"') {\n-                            if (nextC > '\\0') {\n-                                x.back();\n+                    final char next2 = jsonTokener.next();\n+                    if (next2 == c) {\n+                        final char next3 = jsonTokener.next();\n+                        if (next3 != '\\\"') {\n+                            if (next3 > '\\0') {\n+                                jsonTokener.back();\n                             }\n                             return sb.toString();\n                         }\n                     }\n-                    if (c == '\\0' || c == '\\n' || c == '\\r') {\n-                        throw x.syntaxError(\"Missing close quote '\" + q + \"'.\");\n+                    if (next2 == '\\0' || next2 == '\\n' || next2 == '\\r') {\n+                        throw jsonTokener.syntaxError(\"Missing close quote '\" + c + \"'.\");\n                     }\n-                    sb.append(c);\n+                    sb.append(next2);\n                 }\n                 break;\n             }\n-            case ',': {\n-                x.back();\n+            case 44: {\n+                jsonTokener.back();\n                 return \"\";\n             }\n             default: {\n-                x.back();\n-                return x.nextTo(',');\n+                jsonTokener.back();\n+                return jsonTokener.nextTo(',');\n             }\n         }\n     }\n     \n-    public static JSONArray rowToJSONArray(final JSONTokener x) throws JSONException {\n-        final JSONArray ja = new JSONArray();\n+    public static JSONArray rowToJSONArray(final JSONTokener jsonTokener) throws JSONException {\n+        final JSONArray jsonArray = new JSONArray();\n         while (true) {\n-            final String value = getValue(x);\n-            char c = x.next();\n-            if (value == null || (ja.length() == 0 && value.length() == 0 && c != ',')) {\n+            final String value = getValue(jsonTokener);\n+            char c = jsonTokener.next();\n+            if (value == null || (jsonArray.length() == 0 && value.length() == 0 && c != ',')) {\n                 return null;\n             }\n-            ja.put((Object)value);\n+            jsonArray.put((Object)value);\n             while (c != ',') {\n                 if (c != ' ') {\n                     if (c == '\\n' || c == '\\r' || c == '\\0') {\n-                        return ja;\n+                        return jsonArray;\n                     }\n-                    throw x.syntaxError(\"Bad character '\" + c + \"' (\" + (int)c + \").\");\n+                    throw jsonTokener.syntaxError(\"Bad character '\" + c + \"' (\" + (int)c + \").\");\n                 }\n                 else {\n-                    c = x.next();\n+                    c = jsonTokener.next();\n                 }\n             }\n         }\n     }\n     \n-    public static JSONObject rowToJSONObject(final JSONArray names, final JSONTokener x) throws JSONException {\n-        final JSONArray ja = rowToJSONArray(x);\n-        return (ja != null) ? ja.toJSONObject(names) : null;\n+    public static JSONObject rowToJSONObject(final JSONArray jsonArray, final JSONTokener jsonTokener) throws JSONException {\n+        final JSONArray rowToJSONArray = rowToJSONArray(jsonTokener);\n+        return (rowToJSONArray != null) ? rowToJSONArray.toJSONObject(jsonArray) : null;\n     }\n     \n-    public static String rowToString(final JSONArray ja) {\n+    public static String rowToString(final JSONArray jsonArray) {\n         final StringBuilder sb = new StringBuilder();\n-        for (int i = 0; i < ja.length(); ++i) {\n+        for (int i = 0; i < jsonArray.length(); ++i) {\n             if (i > 0) {\n                 sb.append(',');\n             }\n-            final Object object = ja.opt(i);\n-            if (object != null) {\n-                final String string = object.toString();\n+            final Object opt = jsonArray.opt(i);\n+            if (opt != null) {\n+                final String string = opt.toString();\n                 if (string.length() > 0 && (string.indexOf(44) >= 0 || string.indexOf(10) >= 0 || string.indexOf(13) >= 0 || string.indexOf(0) >= 0 || string.charAt(0) == '\\\"')) {\n                     sb.append('\\\"');\n                     for (int length = string.length(), j = 0; j < length; ++j) {\n-                        final char c = string.charAt(j);\n-                        if (c >= ' ' && c != '\\\"') {\n-                            sb.append(c);\n+                        final char char1 = string.charAt(j);\n+                        if (char1 >= ' ' && char1 != '\\\"') {\n+                            sb.append(char1);\n                         }\n                     }\n                     sb.append('\\\"');\n                 }\n                 else {\n                     sb.append(string);\n                 }\n             }\n         }\n         sb.append('\\n');\n         return sb.toString();\n     }\n     \n-    public static JSONArray toJSONArray(final String string) throws JSONException {\n-        return toJSONArray(new JSONTokener(string));\n+    public static JSONArray toJSONArray(final String s) throws JSONException {\n+        return toJSONArray(new JSONTokener(s));\n     }\n     \n-    public static JSONArray toJSONArray(final JSONTokener x) throws JSONException {\n-        return toJSONArray(rowToJSONArray(x), x);\n+    public static JSONArray toJSONArray(final JSONTokener jsonTokener) throws JSONException {\n+        return toJSONArray(rowToJSONArray(jsonTokener), jsonTokener);\n     }\n     \n-    public static JSONArray toJSONArray(final JSONArray names, final String string) throws JSONException {\n-        return toJSONArray(names, new JSONTokener(string));\n+    public static JSONArray toJSONArray(final JSONArray jsonArray, final String s) throws JSONException {\n+        return toJSONArray(jsonArray, new JSONTokener(s));\n     }\n     \n-    public static JSONArray toJSONArray(final JSONArray names, final JSONTokener x) throws JSONException {\n-        if (names == null || names.length() == 0) {\n+    public static JSONArray toJSONArray(final JSONArray jsonArray, final JSONTokener jsonTokener) throws JSONException {\n+        if (jsonArray == null || jsonArray.length() == 0) {\n             return null;\n         }\n-        final JSONArray ja = new JSONArray();\n+        final JSONArray jsonArray2 = new JSONArray();\n         while (true) {\n-            final JSONObject jo = rowToJSONObject(names, x);\n-            if (jo == null) {\n+            final JSONObject rowToJSONObject = rowToJSONObject(jsonArray, jsonTokener);\n+            if (rowToJSONObject == null) {\n                 break;\n             }\n-            ja.put((Object)jo);\n+            jsonArray2.put((Object)rowToJSONObject);\n         }\n-        if (ja.length() == 0) {\n+        if (jsonArray2.length() == 0) {\n             return null;\n         }\n-        return ja;\n+        return jsonArray2;\n     }\n     \n-    public static String toString(final JSONArray ja) throws JSONException {\n-        final JSONObject jo = ja.optJSONObject(0);\n-        if (jo != null) {\n-            final JSONArray names = jo.names();\n+    public static String toString(final JSONArray jsonArray) throws JSONException {\n+        final JSONObject optJSONObject = jsonArray.optJSONObject(0);\n+        if (optJSONObject != null) {\n+            final JSONArray names = optJSONObject.names();\n             if (names != null) {\n-                return rowToString(names) + toString(names, ja);\n+                return rowToString(names) + toString(names, jsonArray);\n             }\n         }\n         return null;\n     }\n     \n-    public static String toString(final JSONArray names, final JSONArray ja) throws JSONException {\n-        if (names == null || names.length() == 0) {\n+    public static String toString(final JSONArray jsonArray, final JSONArray jsonArray2) throws JSONException {\n+        if (jsonArray == null || jsonArray.length() == 0) {\n             return null;\n         }\n         final StringBuilder sb = new StringBuilder();\n-        for (int i = 0; i < ja.length(); ++i) {\n-            final JSONObject jo = ja.optJSONObject(i);\n-            if (jo != null) {\n-                sb.append(rowToString(jo.toJSONArray(names)));\n+        for (int i = 0; i < jsonArray2.length(); ++i) {\n+            final JSONObject optJSONObject = jsonArray2.optJSONObject(i);\n+            if (optJSONObject != null) {\n+                sb.append(rowToString(optJSONObject.toJSONArray(jsonArray)));\n             }\n         }\n         return sb.toString();\n     }\n }\n"}]}
