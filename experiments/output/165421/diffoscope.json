{"diffoscope-json-version": 1, "source1": "first/NioZipEncoding.class", "source2": "second/NioZipEncoding.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,77 +1,77 @@\n-  SHA-256 checksum 08cd9e93fe44403796f9b863995c92fe0c6a44820292e3ad164a9ebd169298bc\n+  SHA-256 checksum c7be9630ac48e27aa4b9f7b307e1af351ec4d646a1a099d20c1ae6146504172a\n   Compiled from \"NioZipEncoding.java\"\n class org.apache.commons.compress.archivers.zip.NioZipEncoding implements org.apache.commons.compress.archivers.zip.ZipEncoding,org.apache.commons.compress.archivers.zip.CharsetAccessor\n   minor version: 0\n   major version: 52\n   flags: (0x0020) ACC_SUPER\n   this_class: #56                         // org/apache/commons/compress/archivers/zip/NioZipEncoding\n   super_class: #58                        // java/lang/Object\n   interfaces: 2, fields: 6, methods: 12, attributes: 1\n Constant pool:\n-    #1 = Methodref          #138.#139     // java/nio/CharBuffer.hasRemaining:()Z\n-    #2 = Methodref          #140.#141     // java/nio/charset/CharsetEncoder.encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n-    #3 = Methodref          #142.#143     // java/nio/charset/CoderResult.isOverflow:()Z\n-    #4 = Methodref          #138.#144     // java/nio/CharBuffer.remaining:()I\n-    #5 = Methodref          #56.#145      // org/apache/commons/compress/archivers/zip/NioZipEncoding.estimateIncrementalEncodingSize:(Ljava/nio/charset/CharsetEncoder;I)I\n-    #6 = Methodref          #146.#147     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.growBufferBy:(Ljava/nio/ByteBuffer;I)Ljava/nio/ByteBuffer;\n-    #7 = Methodref          #138.#148     // java/nio/CharBuffer.position:(I)Ljava/nio/Buffer;\n-    #8 = Methodref          #149.#150     // java/nio/Buffer.limit:(I)Ljava/nio/Buffer;\n-    #9 = Methodref          #138.#151     // java/nio/CharBuffer.put:(C)Ljava/nio/CharBuffer;\n-   #10 = Fieldref           #56.#152      // org/apache/commons/compress/archivers/zip/NioZipEncoding.HEX_CHARS:[C\n-   #11 = Methodref          #138.#153     // java/nio/CharBuffer.flip:()Ljava/nio/Buffer;\n-   #12 = Methodref          #140.#154     // java/nio/charset/CharsetEncoder.averageBytesPerChar:()F\n-   #13 = Methodref          #155.#156     // java/lang/Math.ceil:(D)D\n-   #14 = Methodref          #140.#157     // java/nio/charset/CharsetEncoder.maxBytesPerChar:()F\n-   #15 = Methodref          #58.#158      // java/lang/Object.\"<init>\":()V\n-   #16 = Fieldref           #56.#159      // org/apache/commons/compress/archivers/zip/NioZipEncoding.charset:Ljava/nio/charset/Charset;\n-   #17 = Fieldref           #56.#160      // org/apache/commons/compress/archivers/zip/NioZipEncoding.useReplacement:Z\n-   #18 = Methodref          #56.#161      // org/apache/commons/compress/archivers/zip/NioZipEncoding.newEncoder:()Ljava/nio/charset/CharsetEncoder;\n-   #19 = Methodref          #140.#162     // java/nio/charset/CharsetEncoder.canEncode:(Ljava/lang/CharSequence;)Z\n-   #20 = Methodref          #56.#163      // org/apache/commons/compress/archivers/zip/NioZipEncoding.newDecoder:()Ljava/nio/charset/CharsetDecoder;\n-   #21 = Methodref          #164.#165     // java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n-   #22 = Methodref          #166.#167     // java/nio/charset/CharsetDecoder.decode:(Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;\n-   #23 = Methodref          #138.#168     // java/nio/CharBuffer.toString:()Ljava/lang/String;\n-   #24 = Methodref          #138.#169     // java/nio/CharBuffer.wrap:(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;\n-   #25 = Methodref          #56.#170      // org/apache/commons/compress/archivers/zip/NioZipEncoding.estimateInitialBufferSize:(Ljava/nio/charset/CharsetEncoder;I)I\n-   #26 = Methodref          #164.#171     // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-   #27 = Methodref          #142.#172     // java/nio/charset/CoderResult.isUnmappable:()Z\n-   #28 = Methodref          #142.#173     // java/nio/charset/CoderResult.isMalformed:()Z\n-   #29 = Methodref          #142.#174     // java/nio/charset/CoderResult.length:()I\n-   #30 = Methodref          #164.#144     // java/nio/ByteBuffer.remaining:()I\n-   #31 = Methodref          #138.#175     // java/nio/CharBuffer.position:()I\n-   #32 = Methodref          #138.#176     // java/nio/CharBuffer.limit:()I\n-   #33 = Methodref          #138.#177     // java/nio/CharBuffer.get:(I)C\n-   #34 = Methodref          #140.#178     // java/nio/charset/CharsetEncoder.canEncode:(C)Z\n-   #35 = Methodref          #138.#179     // java/nio/CharBuffer.allocate:(I)Ljava/nio/CharBuffer;\n-   #36 = Methodref          #138.#180     // java/nio/CharBuffer.get:()C\n-   #37 = Methodref          #56.#181      // org/apache/commons/compress/archivers/zip/NioZipEncoding.encodeSurrogate:(Ljava/nio/CharBuffer;C)Ljava/nio/CharBuffer;\n-   #38 = Methodref          #56.#182      // org/apache/commons/compress/archivers/zip/NioZipEncoding.encodeFully:(Ljava/nio/charset/CharsetEncoder;Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n-   #39 = Methodref          #142.#183     // java/nio/charset/CoderResult.isUnderflow:()Z\n-   #40 = Methodref          #142.#184     // java/nio/charset/CoderResult.isError:()Z\n-   #41 = Methodref          #164.#175     // java/nio/ByteBuffer.position:()I\n-   #42 = Methodref          #164.#150     // java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;\n-   #43 = Methodref          #164.#185     // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n-   #44 = Methodref          #186.#163     // java/nio/charset/Charset.newDecoder:()Ljava/nio/charset/CharsetDecoder;\n-   #45 = Fieldref           #187.#188     // java/nio/charset/CodingErrorAction.REPORT:Ljava/nio/charset/CodingErrorAction;\n-   #46 = Methodref          #166.#189     // java/nio/charset/CharsetDecoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n-   #47 = Methodref          #166.#190     // java/nio/charset/CharsetDecoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n-   #48 = Fieldref           #187.#191     // java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n-   #49 = Fieldref           #56.#192      // org/apache/commons/compress/archivers/zip/NioZipEncoding.REPLACEMENT_STRING:Ljava/lang/String;\n-   #50 = Methodref          #166.#193     // java/nio/charset/CharsetDecoder.replaceWith:(Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n-   #51 = Methodref          #186.#161     // java/nio/charset/Charset.newEncoder:()Ljava/nio/charset/CharsetEncoder;\n-   #52 = Methodref          #140.#194     // java/nio/charset/CharsetEncoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n-   #53 = Methodref          #140.#195     // java/nio/charset/CharsetEncoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n-   #54 = Fieldref           #56.#196      // org/apache/commons/compress/archivers/zip/NioZipEncoding.REPLACEMENT_BYTES:[B\n-   #55 = Methodref          #140.#197     // java/nio/charset/CharsetEncoder.replaceWith:([B)Ljava/nio/charset/CharsetEncoder;\n-   #56 = Class              #198          // org/apache/commons/compress/archivers/zip/NioZipEncoding\n-   #57 = Methodref          #199.#200     // java/lang/String.valueOf:(C)Ljava/lang/String;\n-   #58 = Class              #201          // java/lang/Object\n-   #59 = Class              #202          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-   #60 = Class              #203          // org/apache/commons/compress/archivers/zip/CharsetAccessor\n+    #1 = Methodref          #125.#137     // java/nio/CharBuffer.hasRemaining:()Z\n+    #2 = Methodref          #124.#138     // java/nio/charset/CharsetEncoder.encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n+    #3 = Methodref          #126.#139     // java/nio/charset/CoderResult.isOverflow:()Z\n+    #4 = Methodref          #125.#140     // java/nio/CharBuffer.remaining:()I\n+    #5 = Methodref          #56.#141      // org/apache/commons/compress/archivers/zip/NioZipEncoding.estimateIncrementalEncodingSize:(Ljava/nio/charset/CharsetEncoder;I)I\n+    #6 = Methodref          #142.#143     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.growBufferBy:(Ljava/nio/ByteBuffer;I)Ljava/nio/ByteBuffer;\n+    #7 = Methodref          #125.#144     // java/nio/CharBuffer.position:(I)Ljava/nio/Buffer;\n+    #8 = Methodref          #145.#146     // java/nio/Buffer.limit:(I)Ljava/nio/Buffer;\n+    #9 = Methodref          #125.#147     // java/nio/CharBuffer.put:(C)Ljava/nio/CharBuffer;\n+   #10 = Fieldref           #56.#148      // org/apache/commons/compress/archivers/zip/NioZipEncoding.HEX_CHARS:[C\n+   #11 = Methodref          #125.#149     // java/nio/CharBuffer.flip:()Ljava/nio/Buffer;\n+   #12 = Methodref          #124.#150     // java/nio/charset/CharsetEncoder.averageBytesPerChar:()F\n+   #13 = Methodref          #151.#152     // java/lang/Math.ceil:(D)D\n+   #14 = Methodref          #124.#153     // java/nio/charset/CharsetEncoder.maxBytesPerChar:()F\n+   #15 = Methodref          #58.#154      // java/lang/Object.\"<init>\":()V\n+   #16 = Fieldref           #56.#155      // org/apache/commons/compress/archivers/zip/NioZipEncoding.charset:Ljava/nio/charset/Charset;\n+   #17 = Fieldref           #56.#156      // org/apache/commons/compress/archivers/zip/NioZipEncoding.useReplacement:Z\n+   #18 = Methodref          #56.#157      // org/apache/commons/compress/archivers/zip/NioZipEncoding.newEncoder:()Ljava/nio/charset/CharsetEncoder;\n+   #19 = Methodref          #124.#158     // java/nio/charset/CharsetEncoder.canEncode:(Ljava/lang/CharSequence;)Z\n+   #20 = Methodref          #56.#159      // org/apache/commons/compress/archivers/zip/NioZipEncoding.newDecoder:()Ljava/nio/charset/CharsetDecoder;\n+   #21 = Methodref          #92.#160      // java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;\n+   #22 = Methodref          #161.#162     // java/nio/charset/CharsetDecoder.decode:(Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;\n+   #23 = Methodref          #125.#163     // java/nio/CharBuffer.toString:()Ljava/lang/String;\n+   #24 = Methodref          #125.#164     // java/nio/CharBuffer.wrap:(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;\n+   #25 = Methodref          #56.#165      // org/apache/commons/compress/archivers/zip/NioZipEncoding.estimateInitialBufferSize:(Ljava/nio/charset/CharsetEncoder;I)I\n+   #26 = Methodref          #92.#166      // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+   #27 = Methodref          #126.#167     // java/nio/charset/CoderResult.isUnmappable:()Z\n+   #28 = Methodref          #126.#168     // java/nio/charset/CoderResult.isMalformed:()Z\n+   #29 = Methodref          #126.#169     // java/nio/charset/CoderResult.length:()I\n+   #30 = Methodref          #92.#140      // java/nio/ByteBuffer.remaining:()I\n+   #31 = Methodref          #125.#170     // java/nio/CharBuffer.position:()I\n+   #32 = Methodref          #125.#171     // java/nio/CharBuffer.limit:()I\n+   #33 = Methodref          #125.#172     // java/nio/CharBuffer.get:(I)C\n+   #34 = Methodref          #124.#173     // java/nio/charset/CharsetEncoder.canEncode:(C)Z\n+   #35 = Methodref          #125.#174     // java/nio/CharBuffer.allocate:(I)Ljava/nio/CharBuffer;\n+   #36 = Methodref          #125.#175     // java/nio/CharBuffer.get:()C\n+   #37 = Methodref          #56.#176      // org/apache/commons/compress/archivers/zip/NioZipEncoding.encodeSurrogate:(Ljava/nio/CharBuffer;C)Ljava/nio/CharBuffer;\n+   #38 = Methodref          #56.#177      // org/apache/commons/compress/archivers/zip/NioZipEncoding.encodeFully:(Ljava/nio/charset/CharsetEncoder;Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n+   #39 = Methodref          #126.#178     // java/nio/charset/CoderResult.isUnderflow:()Z\n+   #40 = Methodref          #126.#179     // java/nio/charset/CoderResult.isError:()Z\n+   #41 = Methodref          #92.#170      // java/nio/ByteBuffer.position:()I\n+   #42 = Methodref          #92.#146      // java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;\n+   #43 = Methodref          #92.#180      // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;\n+   #44 = Methodref          #181.#159     // java/nio/charset/Charset.newDecoder:()Ljava/nio/charset/CharsetDecoder;\n+   #45 = Fieldref           #182.#183     // java/nio/charset/CodingErrorAction.REPORT:Ljava/nio/charset/CodingErrorAction;\n+   #46 = Methodref          #161.#184     // java/nio/charset/CharsetDecoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+   #47 = Methodref          #161.#185     // java/nio/charset/CharsetDecoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+   #48 = Fieldref           #182.#186     // java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;\n+   #49 = Fieldref           #56.#187      // org/apache/commons/compress/archivers/zip/NioZipEncoding.REPLACEMENT_STRING:Ljava/lang/String;\n+   #50 = Methodref          #161.#188     // java/nio/charset/CharsetDecoder.replaceWith:(Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n+   #51 = Methodref          #181.#157     // java/nio/charset/Charset.newEncoder:()Ljava/nio/charset/CharsetEncoder;\n+   #52 = Methodref          #124.#189     // java/nio/charset/CharsetEncoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n+   #53 = Methodref          #124.#190     // java/nio/charset/CharsetEncoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n+   #54 = Fieldref           #56.#191      // org/apache/commons/compress/archivers/zip/NioZipEncoding.REPLACEMENT_BYTES:[B\n+   #55 = Methodref          #124.#192     // java/nio/charset/CharsetEncoder.replaceWith:([B)Ljava/nio/charset/CharsetEncoder;\n+   #56 = Class              #193          // org/apache/commons/compress/archivers/zip/NioZipEncoding\n+   #57 = Methodref          #123.#194     // java/lang/String.valueOf:(C)Ljava/lang/String;\n+   #58 = Class              #195          // java/lang/Object\n+   #59 = Class              #196          // org/apache/commons/compress/archivers/zip/ZipEncoding\n+   #60 = Class              #197          // org/apache/commons/compress/archivers/zip/CharsetAccessor\n    #61 = Utf8               REPLACEMENT\n    #62 = Utf8               C\n    #63 = Utf8               ConstantValue\n    #64 = Integer            63\n    #65 = Utf8               REPLACEMENT_BYTES\n    #66 = Utf8               [B\n    #67 = Utf8               REPLACEMENT_STRING\n@@ -95,15 +95,15 @@\n    #85 = Utf8               Ljava/nio/charset/CharsetEncoder;\n    #86 = Utf8               cb\n    #87 = Utf8               Ljava/nio/CharBuffer;\n    #88 = Utf8               out\n    #89 = Utf8               Ljava/nio/ByteBuffer;\n    #90 = Utf8               o\n    #91 = Utf8               StackMapTable\n-   #92 = Class              #204          // java/nio/ByteBuffer\n+   #92 = Class              #198          // java/nio/ByteBuffer\n    #93 = Utf8               encodeSurrogate\n    #94 = Utf8               (Ljava/nio/CharBuffer;C)Ljava/nio/CharBuffer;\n    #95 = Utf8               c\n    #96 = Utf8               estimateIncrementalEncodingSize\n    #97 = Utf8               (Ljava/nio/charset/CharsetEncoder;I)I\n    #98 = Utf8               charCount\n    #99 = Utf8               estimateInitialBufferSize\n@@ -118,167 +118,161 @@\n   #108 = Utf8               canEncode\n   #109 = Utf8               (Ljava/lang/String;)Z\n   #110 = Utf8               name\n   #111 = Utf8               decode\n   #112 = Utf8               ([B)Ljava/lang/String;\n   #113 = Utf8               data\n   #114 = Utf8               Exceptions\n-  #115 = Class              #205          // java/io/IOException\n+  #115 = Class              #199          // java/io/IOException\n   #116 = Utf8               encode\n   #117 = Utf8               (Ljava/lang/String;)Ljava/nio/ByteBuffer;\n   #118 = Utf8               i\n   #119 = Utf8               totalExtraSpace\n   #120 = Utf8               spaceForSurrogate\n   #121 = Utf8               res\n   #122 = Utf8               tmp\n-  #123 = Class              #198          // org/apache/commons/compress/archivers/zip/NioZipEncoding\n-  #124 = Class              #206          // java/lang/String\n-  #125 = Class              #207          // java/nio/charset/CharsetEncoder\n-  #126 = Class              #208          // java/nio/CharBuffer\n-  #127 = Class              #209          // java/nio/charset/CoderResult\n-  #128 = Utf8               getCharset\n-  #129 = Utf8               ()Ljava/nio/charset/Charset;\n-  #130 = Utf8               newDecoder\n-  #131 = Utf8               ()Ljava/nio/charset/CharsetDecoder;\n-  #132 = Utf8               newEncoder\n-  #133 = Utf8               ()Ljava/nio/charset/CharsetEncoder;\n-  #134 = Utf8               <clinit>\n-  #135 = Utf8               ()V\n-  #136 = Utf8               SourceFile\n-  #137 = Utf8               NioZipEncoding.java\n-  #138 = Class              #208          // java/nio/CharBuffer\n-  #139 = NameAndType        #210:#211     // hasRemaining:()Z\n-  #140 = Class              #207          // java/nio/charset/CharsetEncoder\n-  #141 = NameAndType        #116:#212     // encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n-  #142 = Class              #209          // java/nio/charset/CoderResult\n-  #143 = NameAndType        #213:#211     // isOverflow:()Z\n-  #144 = NameAndType        #214:#215     // remaining:()I\n-  #145 = NameAndType        #96:#97       // estimateIncrementalEncodingSize:(Ljava/nio/charset/CharsetEncoder;I)I\n-  #146 = Class              #216          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #147 = NameAndType        #217:#218     // growBufferBy:(Ljava/nio/ByteBuffer;I)Ljava/nio/ByteBuffer;\n-  #148 = NameAndType        #219:#220     // position:(I)Ljava/nio/Buffer;\n-  #149 = Class              #221          // java/nio/Buffer\n-  #150 = NameAndType        #222:#220     // limit:(I)Ljava/nio/Buffer;\n-  #151 = NameAndType        #223:#224     // put:(C)Ljava/nio/CharBuffer;\n-  #152 = NameAndType        #69:#70       // HEX_CHARS:[C\n-  #153 = NameAndType        #225:#226     // flip:()Ljava/nio/Buffer;\n-  #154 = NameAndType        #227:#228     // averageBytesPerChar:()F\n-  #155 = Class              #229          // java/lang/Math\n-  #156 = NameAndType        #230:#231     // ceil:(D)D\n-  #157 = NameAndType        #232:#228     // maxBytesPerChar:()F\n-  #158 = NameAndType        #104:#135     // \"<init>\":()V\n-  #159 = NameAndType        #71:#72       // charset:Ljava/nio/charset/Charset;\n-  #160 = NameAndType        #73:#74       // useReplacement:Z\n-  #161 = NameAndType        #132:#133     // newEncoder:()Ljava/nio/charset/CharsetEncoder;\n-  #162 = NameAndType        #108:#233     // canEncode:(Ljava/lang/CharSequence;)Z\n-  #163 = NameAndType        #130:#131     // newDecoder:()Ljava/nio/charset/CharsetDecoder;\n-  #164 = Class              #204          // java/nio/ByteBuffer\n-  #165 = NameAndType        #234:#235     // wrap:([B)Ljava/nio/ByteBuffer;\n-  #166 = Class              #236          // java/nio/charset/CharsetDecoder\n-  #167 = NameAndType        #111:#237     // decode:(Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;\n-  #168 = NameAndType        #238:#239     // toString:()Ljava/lang/String;\n-  #169 = NameAndType        #234:#240     // wrap:(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;\n-  #170 = NameAndType        #99:#97       // estimateInitialBufferSize:(Ljava/nio/charset/CharsetEncoder;I)I\n-  #171 = NameAndType        #241:#242     // allocate:(I)Ljava/nio/ByteBuffer;\n-  #172 = NameAndType        #243:#211     // isUnmappable:()Z\n-  #173 = NameAndType        #244:#211     // isMalformed:()Z\n-  #174 = NameAndType        #245:#215     // length:()I\n-  #175 = NameAndType        #219:#215     // position:()I\n-  #176 = NameAndType        #222:#215     // limit:()I\n-  #177 = NameAndType        #246:#247     // get:(I)C\n-  #178 = NameAndType        #108:#248     // canEncode:(C)Z\n-  #179 = NameAndType        #241:#249     // allocate:(I)Ljava/nio/CharBuffer;\n-  #180 = NameAndType        #246:#250     // get:()C\n-  #181 = NameAndType        #93:#94       // encodeSurrogate:(Ljava/nio/CharBuffer;C)Ljava/nio/CharBuffer;\n-  #182 = NameAndType        #75:#76       // encodeFully:(Ljava/nio/charset/CharsetEncoder;Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n-  #183 = NameAndType        #251:#211     // isUnderflow:()Z\n-  #184 = NameAndType        #252:#211     // isError:()Z\n-  #185 = NameAndType        #253:#226     // rewind:()Ljava/nio/Buffer;\n-  #186 = Class              #254          // java/nio/charset/Charset\n-  #187 = Class              #255          // java/nio/charset/CodingErrorAction\n-  #188 = NameAndType        #256:#257     // REPORT:Ljava/nio/charset/CodingErrorAction;\n-  #189 = NameAndType        #258:#259     // onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n-  #190 = NameAndType        #260:#259     // onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n-  #191 = NameAndType        #261:#257     // REPLACE:Ljava/nio/charset/CodingErrorAction;\n-  #192 = NameAndType        #67:#68       // REPLACEMENT_STRING:Ljava/lang/String;\n-  #193 = NameAndType        #262:#263     // replaceWith:(Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n-  #194 = NameAndType        #258:#264     // onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n-  #195 = NameAndType        #260:#264     // onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n-  #196 = NameAndType        #65:#66       // REPLACEMENT_BYTES:[B\n-  #197 = NameAndType        #262:#265     // replaceWith:([B)Ljava/nio/charset/CharsetEncoder;\n-  #198 = Utf8               org/apache/commons/compress/archivers/zip/NioZipEncoding\n-  #199 = Class              #206          // java/lang/String\n-  #200 = NameAndType        #266:#267     // valueOf:(C)Ljava/lang/String;\n-  #201 = Utf8               java/lang/Object\n-  #202 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #203 = Utf8               org/apache/commons/compress/archivers/zip/CharsetAccessor\n-  #204 = Utf8               java/nio/ByteBuffer\n-  #205 = Utf8               java/io/IOException\n-  #206 = Utf8               java/lang/String\n-  #207 = Utf8               java/nio/charset/CharsetEncoder\n-  #208 = Utf8               java/nio/CharBuffer\n-  #209 = Utf8               java/nio/charset/CoderResult\n-  #210 = Utf8               hasRemaining\n-  #211 = Utf8               ()Z\n-  #212 = Utf8               (Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n-  #213 = Utf8               isOverflow\n-  #214 = Utf8               remaining\n-  #215 = Utf8               ()I\n-  #216 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #217 = Utf8               growBufferBy\n-  #218 = Utf8               (Ljava/nio/ByteBuffer;I)Ljava/nio/ByteBuffer;\n-  #219 = Utf8               position\n-  #220 = Utf8               (I)Ljava/nio/Buffer;\n-  #221 = Utf8               java/nio/Buffer\n-  #222 = Utf8               limit\n-  #223 = Utf8               put\n-  #224 = Utf8               (C)Ljava/nio/CharBuffer;\n-  #225 = Utf8               flip\n-  #226 = Utf8               ()Ljava/nio/Buffer;\n-  #227 = Utf8               averageBytesPerChar\n-  #228 = Utf8               ()F\n-  #229 = Utf8               java/lang/Math\n-  #230 = Utf8               ceil\n-  #231 = Utf8               (D)D\n-  #232 = Utf8               maxBytesPerChar\n-  #233 = Utf8               (Ljava/lang/CharSequence;)Z\n-  #234 = Utf8               wrap\n-  #235 = Utf8               ([B)Ljava/nio/ByteBuffer;\n-  #236 = Utf8               java/nio/charset/CharsetDecoder\n-  #237 = Utf8               (Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;\n-  #238 = Utf8               toString\n-  #239 = Utf8               ()Ljava/lang/String;\n-  #240 = Utf8               (Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;\n-  #241 = Utf8               allocate\n-  #242 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #243 = Utf8               isUnmappable\n-  #244 = Utf8               isMalformed\n-  #245 = Utf8               length\n-  #246 = Utf8               get\n-  #247 = Utf8               (I)C\n-  #248 = Utf8               (C)Z\n-  #249 = Utf8               (I)Ljava/nio/CharBuffer;\n-  #250 = Utf8               ()C\n-  #251 = Utf8               isUnderflow\n-  #252 = Utf8               isError\n-  #253 = Utf8               rewind\n-  #254 = Utf8               java/nio/charset/Charset\n-  #255 = Utf8               java/nio/charset/CodingErrorAction\n-  #256 = Utf8               REPORT\n-  #257 = Utf8               Ljava/nio/charset/CodingErrorAction;\n-  #258 = Utf8               onMalformedInput\n-  #259 = Utf8               (Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n-  #260 = Utf8               onUnmappableCharacter\n-  #261 = Utf8               REPLACE\n-  #262 = Utf8               replaceWith\n-  #263 = Utf8               (Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n-  #264 = Utf8               (Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n-  #265 = Utf8               ([B)Ljava/nio/charset/CharsetEncoder;\n-  #266 = Utf8               valueOf\n-  #267 = Utf8               (C)Ljava/lang/String;\n+  #123 = Class              #200          // java/lang/String\n+  #124 = Class              #201          // java/nio/charset/CharsetEncoder\n+  #125 = Class              #202          // java/nio/CharBuffer\n+  #126 = Class              #203          // java/nio/charset/CoderResult\n+  #127 = Utf8               getCharset\n+  #128 = Utf8               ()Ljava/nio/charset/Charset;\n+  #129 = Utf8               newDecoder\n+  #130 = Utf8               ()Ljava/nio/charset/CharsetDecoder;\n+  #131 = Utf8               newEncoder\n+  #132 = Utf8               ()Ljava/nio/charset/CharsetEncoder;\n+  #133 = Utf8               <clinit>\n+  #134 = Utf8               ()V\n+  #135 = Utf8               SourceFile\n+  #136 = Utf8               NioZipEncoding.java\n+  #137 = NameAndType        #204:#205     // hasRemaining:()Z\n+  #138 = NameAndType        #116:#206     // encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n+  #139 = NameAndType        #207:#205     // isOverflow:()Z\n+  #140 = NameAndType        #208:#209     // remaining:()I\n+  #141 = NameAndType        #96:#97       // estimateIncrementalEncodingSize:(Ljava/nio/charset/CharsetEncoder;I)I\n+  #142 = Class              #210          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #143 = NameAndType        #211:#212     // growBufferBy:(Ljava/nio/ByteBuffer;I)Ljava/nio/ByteBuffer;\n+  #144 = NameAndType        #213:#214     // position:(I)Ljava/nio/Buffer;\n+  #145 = Class              #215          // java/nio/Buffer\n+  #146 = NameAndType        #216:#214     // limit:(I)Ljava/nio/Buffer;\n+  #147 = NameAndType        #217:#218     // put:(C)Ljava/nio/CharBuffer;\n+  #148 = NameAndType        #69:#70       // HEX_CHARS:[C\n+  #149 = NameAndType        #219:#220     // flip:()Ljava/nio/Buffer;\n+  #150 = NameAndType        #221:#222     // averageBytesPerChar:()F\n+  #151 = Class              #223          // java/lang/Math\n+  #152 = NameAndType        #224:#225     // ceil:(D)D\n+  #153 = NameAndType        #226:#222     // maxBytesPerChar:()F\n+  #154 = NameAndType        #104:#134     // \"<init>\":()V\n+  #155 = NameAndType        #71:#72       // charset:Ljava/nio/charset/Charset;\n+  #156 = NameAndType        #73:#74       // useReplacement:Z\n+  #157 = NameAndType        #131:#132     // newEncoder:()Ljava/nio/charset/CharsetEncoder;\n+  #158 = NameAndType        #108:#227     // canEncode:(Ljava/lang/CharSequence;)Z\n+  #159 = NameAndType        #129:#130     // newDecoder:()Ljava/nio/charset/CharsetDecoder;\n+  #160 = NameAndType        #228:#229     // wrap:([B)Ljava/nio/ByteBuffer;\n+  #161 = Class              #230          // java/nio/charset/CharsetDecoder\n+  #162 = NameAndType        #111:#231     // decode:(Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;\n+  #163 = NameAndType        #232:#233     // toString:()Ljava/lang/String;\n+  #164 = NameAndType        #228:#234     // wrap:(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;\n+  #165 = NameAndType        #99:#97       // estimateInitialBufferSize:(Ljava/nio/charset/CharsetEncoder;I)I\n+  #166 = NameAndType        #235:#236     // allocate:(I)Ljava/nio/ByteBuffer;\n+  #167 = NameAndType        #237:#205     // isUnmappable:()Z\n+  #168 = NameAndType        #238:#205     // isMalformed:()Z\n+  #169 = NameAndType        #239:#209     // length:()I\n+  #170 = NameAndType        #213:#209     // position:()I\n+  #171 = NameAndType        #216:#209     // limit:()I\n+  #172 = NameAndType        #240:#241     // get:(I)C\n+  #173 = NameAndType        #108:#242     // canEncode:(C)Z\n+  #174 = NameAndType        #235:#243     // allocate:(I)Ljava/nio/CharBuffer;\n+  #175 = NameAndType        #240:#244     // get:()C\n+  #176 = NameAndType        #93:#94       // encodeSurrogate:(Ljava/nio/CharBuffer;C)Ljava/nio/CharBuffer;\n+  #177 = NameAndType        #75:#76       // encodeFully:(Ljava/nio/charset/CharsetEncoder;Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n+  #178 = NameAndType        #245:#205     // isUnderflow:()Z\n+  #179 = NameAndType        #246:#205     // isError:()Z\n+  #180 = NameAndType        #247:#220     // rewind:()Ljava/nio/Buffer;\n+  #181 = Class              #248          // java/nio/charset/Charset\n+  #182 = Class              #249          // java/nio/charset/CodingErrorAction\n+  #183 = NameAndType        #250:#251     // REPORT:Ljava/nio/charset/CodingErrorAction;\n+  #184 = NameAndType        #252:#253     // onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+  #185 = NameAndType        #254:#253     // onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+  #186 = NameAndType        #255:#251     // REPLACE:Ljava/nio/charset/CodingErrorAction;\n+  #187 = NameAndType        #67:#68       // REPLACEMENT_STRING:Ljava/lang/String;\n+  #188 = NameAndType        #256:#257     // replaceWith:(Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n+  #189 = NameAndType        #252:#258     // onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n+  #190 = NameAndType        #254:#258     // onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n+  #191 = NameAndType        #65:#66       // REPLACEMENT_BYTES:[B\n+  #192 = NameAndType        #256:#259     // replaceWith:([B)Ljava/nio/charset/CharsetEncoder;\n+  #193 = Utf8               org/apache/commons/compress/archivers/zip/NioZipEncoding\n+  #194 = NameAndType        #260:#261     // valueOf:(C)Ljava/lang/String;\n+  #195 = Utf8               java/lang/Object\n+  #196 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #197 = Utf8               org/apache/commons/compress/archivers/zip/CharsetAccessor\n+  #198 = Utf8               java/nio/ByteBuffer\n+  #199 = Utf8               java/io/IOException\n+  #200 = Utf8               java/lang/String\n+  #201 = Utf8               java/nio/charset/CharsetEncoder\n+  #202 = Utf8               java/nio/CharBuffer\n+  #203 = Utf8               java/nio/charset/CoderResult\n+  #204 = Utf8               hasRemaining\n+  #205 = Utf8               ()Z\n+  #206 = Utf8               (Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;\n+  #207 = Utf8               isOverflow\n+  #208 = Utf8               remaining\n+  #209 = Utf8               ()I\n+  #210 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #211 = Utf8               growBufferBy\n+  #212 = Utf8               (Ljava/nio/ByteBuffer;I)Ljava/nio/ByteBuffer;\n+  #213 = Utf8               position\n+  #214 = Utf8               (I)Ljava/nio/Buffer;\n+  #215 = Utf8               java/nio/Buffer\n+  #216 = Utf8               limit\n+  #217 = Utf8               put\n+  #218 = Utf8               (C)Ljava/nio/CharBuffer;\n+  #219 = Utf8               flip\n+  #220 = Utf8               ()Ljava/nio/Buffer;\n+  #221 = Utf8               averageBytesPerChar\n+  #222 = Utf8               ()F\n+  #223 = Utf8               java/lang/Math\n+  #224 = Utf8               ceil\n+  #225 = Utf8               (D)D\n+  #226 = Utf8               maxBytesPerChar\n+  #227 = Utf8               (Ljava/lang/CharSequence;)Z\n+  #228 = Utf8               wrap\n+  #229 = Utf8               ([B)Ljava/nio/ByteBuffer;\n+  #230 = Utf8               java/nio/charset/CharsetDecoder\n+  #231 = Utf8               (Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;\n+  #232 = Utf8               toString\n+  #233 = Utf8               ()Ljava/lang/String;\n+  #234 = Utf8               (Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;\n+  #235 = Utf8               allocate\n+  #236 = Utf8               (I)Ljava/nio/ByteBuffer;\n+  #237 = Utf8               isUnmappable\n+  #238 = Utf8               isMalformed\n+  #239 = Utf8               length\n+  #240 = Utf8               get\n+  #241 = Utf8               (I)C\n+  #242 = Utf8               (C)Z\n+  #243 = Utf8               (I)Ljava/nio/CharBuffer;\n+  #244 = Utf8               ()C\n+  #245 = Utf8               isUnderflow\n+  #246 = Utf8               isError\n+  #247 = Utf8               rewind\n+  #248 = Utf8               java/nio/charset/Charset\n+  #249 = Utf8               java/nio/charset/CodingErrorAction\n+  #250 = Utf8               REPORT\n+  #251 = Utf8               Ljava/nio/charset/CodingErrorAction;\n+  #252 = Utf8               onMalformedInput\n+  #253 = Utf8               (Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;\n+  #254 = Utf8               onUnmappableCharacter\n+  #255 = Utf8               REPLACE\n+  #256 = Utf8               replaceWith\n+  #257 = Utf8               (Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;\n+  #258 = Utf8               (Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;\n+  #259 = Utf8               ([B)Ljava/nio/charset/CharsetEncoder;\n+  #260 = Utf8               valueOf\n+  #261 = Utf8               (C)Ljava/lang/String;\n {\n   private static final char REPLACEMENT = '?';\n     descriptor: C\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 63\n \n   private static final byte[] REPLACEMENT_BYTES;\n"}]}
