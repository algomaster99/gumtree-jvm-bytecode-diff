{"diffoscope-json-version": 1, "source1": "first/DatabaseConfiguration$JdbcOperation.class", "source2": "second/DatabaseConfiguration$JdbcOperation.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,68 +15,68 @@\n     private PreparedStatement pstmt;\n     private ResultSet resultSet;\n     private final EventType<? extends ConfigurationErrorEvent> errorEventType;\n     private final EventType<?> operationEventType;\n     private final String errorPropertyName;\n     private final Object errorPropertyValue;\n     \n-    protected JdbcOperation(final DatabaseConfiguration this$0, final EventType<? extends ConfigurationErrorEvent> errEvType, final EventType<?> opType, final String errPropName, final Object errPropVal) {\n+    protected JdbcOperation(final DatabaseConfiguration this$0, final EventType<? extends ConfigurationErrorEvent> errorEventType, final EventType<?> operationEventType, final String errorPropertyName, final Object errorPropertyValue) {\n         this.this$0 = this$0;\n-        this.errorEventType = errEvType;\n-        this.operationEventType = opType;\n-        this.errorPropertyName = errPropName;\n-        this.errorPropertyValue = errPropVal;\n+        this.errorEventType = errorEventType;\n+        this.operationEventType = operationEventType;\n+        this.errorPropertyName = errorPropertyName;\n+        this.errorPropertyValue = errorPropertyValue;\n     }\n     \n     public T execute() {\n-        T result = null;\n+        Object performOperation = null;\n         try {\n             this.conn = this.this$0.getDatasource().getConnection();\n-            result = (T)this.performOperation();\n+            performOperation = this.performOperation();\n             if (this.this$0.isAutoCommit()) {\n                 this.conn.commit();\n             }\n         }\n-        catch (final SQLException e) {\n-            this.this$0.fireError(this.errorEventType, this.operationEventType, this.errorPropertyName, this.errorPropertyValue, (Throwable)e);\n+        catch (final SQLException ex) {\n+            this.this$0.fireError(this.errorEventType, this.operationEventType, this.errorPropertyName, this.errorPropertyValue, (Throwable)ex);\n         }\n         finally {\n             this.this$0.close(this.conn, (Statement)this.pstmt, this.resultSet);\n         }\n-        return result;\n+        return (T)performOperation;\n     }\n     \n     protected Connection getConnection() {\n         return this.conn;\n     }\n     \n-    protected PreparedStatement createStatement(final String sql, final boolean nameCol) throws SQLException {\n-        String statement;\n-        if (nameCol && DatabaseConfiguration.access$300(this.this$0) != null) {\n-            final StringBuilder buf = new StringBuilder(sql);\n-            buf.append(\" AND \").append(DatabaseConfiguration.access$300(this.this$0)).append(\"=?\");\n-            statement = buf.toString();\n+    protected PreparedStatement createStatement(final String str, final boolean b) throws SQLException {\n+        String string;\n+        if (b && DatabaseConfiguration.access$300(this.this$0) != null) {\n+            final StringBuilder sb = new StringBuilder(str);\n+            sb.append(\" AND \").append(DatabaseConfiguration.access$300(this.this$0)).append(\"=?\");\n+            string = sb.toString();\n         }\n         else {\n-            statement = sql;\n+            string = str;\n         }\n-        return this.pstmt = this.getConnection().prepareStatement(statement);\n+        return this.pstmt = this.getConnection().prepareStatement(string);\n     }\n     \n-    protected PreparedStatement initStatement(final String sql, final boolean nameCol, final Object... params) throws SQLException {\n-        final PreparedStatement ps = this.createStatement(sql, nameCol);\n-        int idx = 1;\n-        for (final Object param : params) {\n-            ps.setObject(idx++, param);\n+    protected PreparedStatement initStatement(final String s, final boolean b, final Object... array) throws SQLException {\n+        final PreparedStatement statement = this.createStatement(s, b);\n+        int n = 1;\n+        for (int length = array.length, i = 0; i < length; ++i) {\n+            statement.setObject(n++, array[i]);\n         }\n-        if (nameCol && DatabaseConfiguration.access$300(this.this$0) != null) {\n-            ps.setString(idx, DatabaseConfiguration.access$400(this.this$0));\n+        if (b && DatabaseConfiguration.access$300(this.this$0) != null) {\n+            statement.setString(n, DatabaseConfiguration.access$400(this.this$0));\n         }\n-        return ps;\n+        return statement;\n     }\n     \n-    protected ResultSet openResultSet(final String sql, final boolean nameCol, final Object... params) throws SQLException {\n-        return this.resultSet = this.initStatement(sql, nameCol, params).executeQuery();\n+    protected ResultSet openResultSet(final String s, final boolean b, final Object... array) throws SQLException {\n+        return this.resultSet = this.initStatement(s, b, array).executeQuery();\n     }\n     \n     protected abstract T performOperation() throws SQLException;\n }\n"}]}
