{"diffoscope-json-version": 1, "source1": "first/ToNetASCIIInputStream.class", "source2": "second/ToNetASCIIInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,77 +8,78 @@\n public final class ToNetASCIIInputStream extends FilterInputStream\n {\n     private static final int NOTHING_SPECIAL = 0;\n     private static final int LAST_WAS_CR = 1;\n     private static final int LAST_WAS_NL = 2;\n     private int status;\n     \n-    public ToNetASCIIInputStream(final InputStream input) {\n-        super(input);\n+    public ToNetASCIIInputStream(final InputStream in) {\n+        super(in);\n         this.status = 0;\n     }\n     \n     @Override\n     public int available() throws IOException {\n-        final int result = this.in.available();\n+        final int available = this.in.available();\n         if (this.status == 2) {\n-            return result + 1;\n+            return available + 1;\n         }\n-        return result;\n+        return available;\n     }\n     \n     @Override\n     public boolean markSupported() {\n         return false;\n     }\n     \n     @Override\n     public int read() throws IOException {\n         if (this.status == 2) {\n             this.status = 0;\n             return 10;\n         }\n-        final int ch = this.in.read();\n-        switch (ch) {\n+        final int read = this.in.read();\n+        switch (read) {\n             case 13: {\n                 this.status = 1;\n                 return 13;\n             }\n             case 10: {\n                 if (this.status != 1) {\n                     this.status = 2;\n                     return 13;\n                 }\n                 break;\n             }\n         }\n         this.status = 0;\n-        return ch;\n+        return read;\n     }\n     \n     @Override\n-    public int read(final byte[] buffer) throws IOException {\n-        return this.read(buffer, 0, buffer.length);\n+    public int read(final byte[] array) throws IOException {\n+        return this.read(array, 0, array.length);\n     }\n     \n     @Override\n-    public int read(final byte[] buffer, int offset, int length) throws IOException {\n-        if (length < 1) {\n+    public int read(final byte[] array, int n, int n2) throws IOException {\n+        if (n2 < 1) {\n             return 0;\n         }\n-        int ch = this.available();\n-        if (length > ch) {\n-            length = ch;\n+        final int available = this.available();\n+        if (n2 > available) {\n+            n2 = available;\n         }\n-        if (length < 1) {\n-            length = 1;\n+        if (n2 < 1) {\n+            n2 = 1;\n         }\n-        if ((ch = this.read()) == -1) {\n+        int n3;\n+        if ((n3 = this.read()) == -1) {\n             return -1;\n         }\n-        final int off = offset;\n+        final int n4 = n;\n         do {\n-            buffer[offset++] = (byte)ch;\n-        } while (--length > 0 && (ch = this.read()) != -1);\n-        return offset - off;\n+            array[n++] = (byte)n3;\n+        } while (--n2 > 0 && (n3 = this.read()) != -1);\n+        return n - n4;\n     }\n }\n"}]}
