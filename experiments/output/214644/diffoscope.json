{"diffoscope-json-version": 1, "source1": "first/InstructionHandle.class", "source2": "second/InstructionHandle.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -30,53 +30,53 @@\n         return this.prev;\n     }\n     \n     public final Instruction getInstruction() {\n         return this.instruction;\n     }\n     \n-    public void setInstruction(final Instruction i) {\n-        if (i == null) {\n+    public void setInstruction(final Instruction instruction) {\n+        if (instruction == null) {\n             throw new ClassGenException(\"Assigning null to handle\");\n         }\n-        if (this.getClass() != BranchHandle.class && i instanceof BranchInstruction) {\n-            throw new ClassGenException(\"Assigning branch instruction \" + i + \" to plain handle\");\n+        if (this.getClass() != BranchHandle.class && instruction instanceof BranchInstruction) {\n+            throw new ClassGenException(\"Assigning branch instruction \" + instruction + \" to plain handle\");\n         }\n         if (this.instruction != null) {\n             this.instruction.dispose();\n         }\n-        this.instruction = i;\n+        this.instruction = instruction;\n     }\n     \n-    public Instruction swapInstruction(final Instruction i) {\n-        final Instruction oldInstruction = this.instruction;\n-        this.instruction = i;\n-        return oldInstruction;\n+    public Instruction swapInstruction(final Instruction instruction) {\n+        final Instruction instruction2 = this.instruction;\n+        this.instruction = instruction;\n+        return instruction2;\n     }\n     \n-    protected InstructionHandle(final Instruction i) {\n+    protected InstructionHandle(final Instruction instruction) {\n         this.i_position = -1;\n-        this.setInstruction(i);\n+        this.setInstruction(instruction);\n     }\n     \n-    static InstructionHandle getInstructionHandle(final Instruction i) {\n-        return new InstructionHandle(i);\n+    static InstructionHandle getInstructionHandle(final Instruction instruction) {\n+        return new InstructionHandle(instruction);\n     }\n     \n-    protected int updatePosition(final int offset, final int max_offset) {\n-        this.i_position += offset;\n+    protected int updatePosition(final int n, final int n2) {\n+        this.i_position += n;\n         return 0;\n     }\n     \n     public int getPosition() {\n         return this.i_position;\n     }\n     \n-    void setPosition(final int pos) {\n-        this.i_position = pos;\n+    void setPosition(final int i_position) {\n+        this.i_position = i_position;\n     }\n     \n     void dispose() {\n         final InstructionHandle instructionHandle = null;\n         this.prev = instructionHandle;\n         this.next = instructionHandle;\n         this.instruction.dispose();\n@@ -88,78 +88,78 @@\n     \n     public void removeAllTargeters() {\n         if (this.targeters != null) {\n             this.targeters.clear();\n         }\n     }\n     \n-    public void removeTargeter(final InstructionTargeter t) {\n+    public void removeTargeter(final InstructionTargeter instructionTargeter) {\n         if (this.targeters != null) {\n-            this.targeters.remove(t);\n+            this.targeters.remove(instructionTargeter);\n         }\n     }\n     \n-    public void addTargeter(final InstructionTargeter t) {\n+    public void addTargeter(final InstructionTargeter instructionTargeter) {\n         if (this.targeters == null) {\n             this.targeters = new HashSet<InstructionTargeter>();\n         }\n-        this.targeters.add(t);\n+        this.targeters.add(instructionTargeter);\n     }\n     \n     public boolean hasTargeters() {\n         return this.targeters != null && this.targeters.size() > 0;\n     }\n     \n     public InstructionTargeter[] getTargeters() {\n         if (!this.hasTargeters()) {\n             return new InstructionTargeter[0];\n         }\n-        final InstructionTargeter[] t = new InstructionTargeter[this.targeters.size()];\n-        this.targeters.toArray(t);\n-        return t;\n+        final InstructionTargeter[] array = new InstructionTargeter[this.targeters.size()];\n+        this.targeters.toArray(array);\n+        return array;\n     }\n     \n-    public String toString(final boolean verbose) {\n-        return Utility.format(this.i_position, 4, false, ' ') + \": \" + this.instruction.toString(verbose);\n+    public String toString(final boolean b) {\n+        return Utility.format(this.i_position, 4, false, ' ') + \": \" + this.instruction.toString(b);\n     }\n     \n     @Override\n     public String toString() {\n         return this.toString(true);\n     }\n     \n-    public void addAttribute(final Object key, final Object attr) {\n+    public void addAttribute(final Object o, final Object o2) {\n         if (this.attributes == null) {\n             this.attributes = new HashMap<Object, Object>(3);\n         }\n-        this.attributes.put(key, attr);\n+        this.attributes.put(o, o2);\n     }\n     \n-    public void removeAttribute(final Object key) {\n+    public void removeAttribute(final Object o) {\n         if (this.attributes != null) {\n-            this.attributes.remove(key);\n+            this.attributes.remove(o);\n         }\n     }\n     \n-    public Object getAttribute(final Object key) {\n+    public Object getAttribute(final Object o) {\n         if (this.attributes != null) {\n-            return this.attributes.get(key);\n+            return this.attributes.get(o);\n         }\n         return null;\n     }\n     \n     public Collection<Object> getAttributes() {\n         if (this.attributes == null) {\n             this.attributes = new HashMap<Object, Object>(3);\n         }\n         return this.attributes.values();\n     }\n     \n-    public void accept(final Visitor v) {\n-        this.instruction.accept(v);\n+    public void accept(final Visitor visitor) {\n+        this.instruction.accept(visitor);\n     }\n     \n     final InstructionHandle setNext(final InstructionHandle next) {\n         return this.next = next;\n     }\n     \n     final InstructionHandle setPrev(final InstructionHandle prev) {\n"}]}
