{"diffoscope-json-version": 1, "source1": "first/ClassLoaderRepository.class", "source2": "second/ClassLoaderRepository.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -37,25 +37,48 @@\n     \n     public JavaClass loadClass(final String className) throws ClassNotFoundException {\n         final String classFile = Utility.packageToPath(className);\n         JavaClass RC = this.findClass(className);\n         if (RC != null) {\n             return RC;\n         }\n-        try (final InputStream is = this.loader.getResourceAsStream(classFile + \".class\")) {\n-            if (is == null) {\n-                throw new ClassNotFoundException(className + \" not found.\");\n+        try {\n+            Throwable t = null;\n+            try {\n+                final InputStream is = this.loader.getResourceAsStream(String.valueOf(classFile) + \".class\");\n+                try {\n+                    if (is == null) {\n+                        throw new ClassNotFoundException(String.valueOf(className) + \" not found.\");\n+                    }\n+                    final ClassParser parser = new ClassParser(is, className);\n+                    RC = parser.parse();\n+                    this.storeClass(RC);\n+                    return RC;\n+                }\n+                finally {\n+                    if (is != null) {\n+                        is.close();\n+                    }\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n+                }\n             }\n-            final ClassParser parser = new ClassParser(is, className);\n-            RC = parser.parse();\n-            this.storeClass(RC);\n-            return RC;\n         }\n         catch (final IOException e) {\n-            throw new ClassNotFoundException(className + \" not found: \" + e, e);\n+            throw new ClassNotFoundException(String.valueOf(className) + \" not found: \" + e, e);\n         }\n     }\n     \n     public void removeClass(final JavaClass clazz) {\n         this.loadedClasses.remove(clazz.getClassName());\n     }\n     \n"}]}
