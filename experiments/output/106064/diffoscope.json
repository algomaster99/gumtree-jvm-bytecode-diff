{"diffoscope-json-version": 1, "source1": "first/FileSystemUtils.class", "source2": "second/FileSystemUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -2,37 +2,68 @@\n package org.apache.commons.io;\n \n import java.io.OutputStream;\n import java.io.InputStream;\n import java.util.Arrays;\n import java.util.stream.Collector;\n import java.util.stream.Collectors;\n-import java.util.Locale;\n import java.io.Reader;\n import java.io.BufferedReader;\n import java.io.InputStreamReader;\n import java.nio.charset.Charset;\n import java.util.List;\n import java.util.StringTokenizer;\n import java.util.Objects;\n-import java.io.IOException;\n import java.time.Duration;\n+import java.util.Locale;\n+import java.io.IOException;\n \n @Deprecated\n public class FileSystemUtils\n {\n     private static final FileSystemUtils INSTANCE;\n     private static final int INIT_PROBLEM = -1;\n     private static final int OTHER = 0;\n     private static final int WINDOWS = 1;\n     private static final int UNIX = 2;\n     private static final int POSIX_UNIX = 3;\n     private static final int OS;\n     private static final String DF;\n     \n+    static {\n+        INSTANCE = new FileSystemUtils();\n+        int os = 0;\n+        String dfPath = \"df\";\n+        try {\n+            String osName = System.getProperty(\"os.name\");\n+            if (osName == null) {\n+                throw new IOException(\"os.name not found\");\n+            }\n+            osName = osName.toLowerCase(Locale.ENGLISH);\n+            if (osName.contains(\"windows\")) {\n+                os = 1;\n+            }\n+            else if (osName.contains(\"linux\") || osName.contains(\"mpe/ix\") || osName.contains(\"freebsd\") || osName.contains(\"openbsd\") || osName.contains(\"irix\") || osName.contains(\"digital unix\") || osName.contains(\"unix\") || osName.contains(\"mac os x\")) {\n+                os = 2;\n+            }\n+            else if (osName.contains(\"sun os\") || osName.contains(\"sunos\") || osName.contains(\"solaris\")) {\n+                os = 3;\n+                dfPath = \"/usr/xpg4/bin/df\";\n+            }\n+            else if (osName.contains(\"hp-ux\") || osName.contains(\"aix\")) {\n+                os = 3;\n+            }\n+        }\n+        catch (final Exception ex) {\n+            os = -1;\n+        }\n+        OS = os;\n+        DF = dfPath;\n+    }\n+    \n     @Deprecated\n     public static long freeSpace(final String path) throws IOException {\n         return FileSystemUtils.INSTANCE.freeSpaceOS(path, FileSystemUtils.OS, false, Duration.ofMillis(-1L));\n     }\n     \n     @Deprecated\n     public static long freeSpaceKb() throws IOException {\n@@ -77,18 +108,18 @@\n     \n     long freeSpaceUnix(final String path, final boolean kb, final boolean posix, final Duration timeout) throws IOException {\n         if (path.isEmpty()) {\n             throw new IllegalArgumentException(\"Path must not be empty\");\n         }\n         String flags = \"-\";\n         if (kb) {\n-            flags += \"k\";\n+            flags = String.valueOf(flags) + \"k\";\n         }\n         if (posix) {\n-            flags += \"P\";\n+            flags = String.valueOf(flags) + \"P\";\n         }\n         final String[] cmdAttribs = (flags.length() > 1) ? new String[] { FileSystemUtils.DF, flags, path } : new String[] { FileSystemUtils.DF, path };\n         final List<String> lines = this.performCommand(cmdAttribs, 3, timeout);\n         if (lines.size() < 2) {\n             throw new IOException(\"Command line '\" + FileSystemUtils.DF + \"' did not return info as expected for path '\" + path + \"'- response was \" + lines);\n         }\n         final String line2 = (String)lines.get(1);\n@@ -144,127 +175,141 @@\n             throw new IOException(\"Command line '\" + FileSystemUtils.DF + \"' did not return numeric data as expected for path '\" + path + \"'- check path is valid\", ex);\n         }\n     }\n     \n     long parseDir(final String line, final String path) throws IOException {\n         int bytesStart = 0;\n         int bytesEnd = 0;\n-        int j;\n-        for (j = line.length() - 1; j >= 0; --j) {\n-            final char c = line.charAt(j);\n-            if (Character.isDigit(c)) {\n-                bytesEnd = j + 1;\n-                break;\n-            }\n-        }\n-        while (j >= 0) {\n-            final char c = line.charAt(j);\n-            if (!Character.isDigit(c) && c != ',' && c != '.') {\n-                bytesStart = j + 1;\n-                break;\n-            }\n-            --j;\n-        }\n-        if (j < 0) {\n-            throw new IOException(\"Command line 'dir /-c' did not return valid info for path '\" + path + \"'\");\n-        }\n-        final StringBuilder buf = new StringBuilder(line.substring(bytesStart, bytesEnd));\n-        for (int k = 0; k < buf.length(); ++k) {\n-            if (buf.charAt() == ',' || buf.charAt() == '.') {\n-                buf.deleteCharAt(k--);\n+        int j = line.length() - 1;\n+        while (true) {\n+            while (j >= 0) {\n+                char c = line.charAt(j);\n+                if (Character.isDigit(c)) {\n+                    bytesEnd = j + 1;\n+                    while (j >= 0) {\n+                        c = line.charAt(j);\n+                        if (!Character.isDigit(c) && c != ',' && c != '.') {\n+                            bytesStart = j + 1;\n+                            break;\n+                        }\n+                        --j;\n+                    }\n+                    if (j < 0) {\n+                        throw new IOException(\"Command line 'dir /-c' did not return valid info for path '\" + path + \"'\");\n+                    }\n+                    final StringBuilder buf = new StringBuilder(line.substring(bytesStart, bytesEnd));\n+                    for (int k = 0; k < buf.length(); ++k) {\n+                        if (buf.charAt() == ',' || buf.charAt() == '.') {\n+                            buf.deleteCharAt(k--);\n+                        }\n+                    }\n+                    return this.parseBytes(buf.toString(), path);\n+                }\n+                else {\n+                    --j;\n+                }\n             }\n+            continue;\n         }\n-        return this.parseBytes(buf.toString(), path);\n     }\n     \n     List<String> performCommand(final String[] cmdAttribs, final int max, final Duration timeout) throws IOException {\n         final Process proc = this.openProcess(cmdAttribs);\n         final Thread monitor = ThreadMonitor.start(timeout);\n         try {\n-            final InputStream in = proc.getInputStream();\n+            Throwable t = null;\n             try {\n-                final OutputStream out = proc.getOutputStream();\n-                try (final InputStream err = proc.getErrorStream()) {\n-                    try (final BufferedReader inr = new BufferedReader(new InputStreamReader(in, Charset.defaultCharset()))) {\n-                        final List<String> lines = (List<String>)inr.lines().limit(max).map(line -> line.toLowerCase(Locale.getDefault()).trim()).collect((Collector<? super Object, ?, List<String>>)Collectors.toList());\n-                        proc.waitFor();\n-                        ThreadMonitor.stop(monitor);\n-                        if (proc.exitValue() != 0) {\n-                            throw new IOException(\"Command line returned OS error code '\" + proc.exitValue() + \"' for command \" + Arrays.asList(cmdAttribs));\n+                final InputStream in = proc.getInputStream();\n+                try {\n+                    final OutputStream out = proc.getOutputStream();\n+                    try {\n+                        final InputStream err = proc.getErrorStream();\n+                        try {\n+                            final BufferedReader inr = new BufferedReader(new InputStreamReader(in, Charset.defaultCharset()));\n+                            try {\n+                                final List<String> lines = (List<String>)inr.lines().limit(max).map(line -> line.toLowerCase(Locale.getDefault()).trim()).collect((Collector<? super Object, ?, List<String>>)Collectors.toList());\n+                                proc.waitFor();\n+                                ThreadMonitor.stop(monitor);\n+                                if (proc.exitValue() != 0) {\n+                                    throw new IOException(\"Command line returned OS error code '\" + proc.exitValue() + \"' for command \" + Arrays.asList(cmdAttribs));\n+                                }\n+                                if (lines.isEmpty()) {\n+                                    throw new IOException(\"Command line did not return any info for command \" + Arrays.asList(cmdAttribs));\n+                                }\n+                                if (inr != null) {\n+                                    inr.close();\n+                                }\n+                                if (err != null) {\n+                                    err.close();\n+                                }\n+                                if (out != null) {\n+                                    out.close();\n+                                }\n+                                if (in != null) {\n+                                    in.close();\n+                                }\n+                            }\n+                            finally {\n+                                if (inr != null) {\n+                                    inr.close();\n+                                }\n+                            }\n                         }\n-                        if (lines.isEmpty()) {\n-                            throw new IOException(\"Command line did not return any info for command \" + Arrays.asList(cmdAttribs));\n+                        finally {\n+                            return;\n                         }\n-                        return lines;\n                     }\n-                    if (in != null) {\n-                        in.close();\n-                    }\n-                    if (out != null) {\n-                        out.close();\n-                    }\n-                }\n-                catch (final Throwable t3) {\n-                    if (out != null) {\n-                        try {\n-                            out.close();\n+                    finally {\n+                        if (t == null) {\n+                            final Throwable exception;\n+                            t = exception;\n                         }\n-                        catch (final Throwable exception3) {\n-                            t3.addSuppressed(exception3);\n+                        else {\n+                            final Throwable exception;\n+                            if (t != exception) {\n+                                t.addSuppressed(exception);\n+                            }\n+                        }\n+                        if (out != null) {\n+                            out.close();\n                         }\n                     }\n-                    throw t3;\n                 }\n-            }\n-            catch (final Throwable t4) {\n-                if (in != null) {\n-                    try {\n+                finally {\n+                    if (t == null) {\n+                        final Throwable exception2;\n+                        t = exception2;\n+                    }\n+                    else {\n+                        final Throwable exception2;\n+                        if (t != exception2) {\n+                            t.addSuppressed(exception2);\n+                        }\n+                    }\n+                    if (in != null) {\n                         in.close();\n                     }\n-                    catch (final Throwable exception4) {\n-                        t4.addSuppressed(exception4);\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception3;\n+                    t = exception3;\n+                }\n+                else {\n+                    final Throwable exception3;\n+                    if (t != exception3) {\n+                        t.addSuppressed(exception3);\n                     }\n                 }\n-                throw t4;\n             }\n         }\n         catch (final InterruptedException ex) {\n             throw new IOException(\"Command line threw an InterruptedException for command \" + Arrays.asList(cmdAttribs) + \" timeout=\" + timeout, ex);\n         }\n         finally {\n             if (proc != null) {\n                 proc.destroy();\n             }\n         }\n     }\n-    \n-    static {\n-        INSTANCE = new FileSystemUtils();\n-        int os = 0;\n-        String dfPath = \"df\";\n-        try {\n-            String osName = System.getProperty(\"os.name\");\n-            if (osName == null) {\n-                throw new IOException(\"os.name not found\");\n-            }\n-            osName = osName.toLowerCase(Locale.ENGLISH);\n-            if (osName.contains(\"windows\")) {\n-                os = 1;\n-            }\n-            else if (osName.contains(\"linux\") || osName.contains(\"mpe/ix\") || osName.contains(\"freebsd\") || osName.contains(\"openbsd\") || osName.contains(\"irix\") || osName.contains(\"digital unix\") || osName.contains(\"unix\") || osName.contains(\"mac os x\")) {\n-                os = 2;\n-            }\n-            else if (osName.contains(\"sun os\") || osName.contains(\"sunos\") || osName.contains(\"solaris\")) {\n-                os = 3;\n-                dfPath = \"/usr/xpg4/bin/df\";\n-            }\n-            else if (osName.contains(\"hp-ux\") || osName.contains(\"aix\")) {\n-                os = 3;\n-            }\n-        }\n-        catch (final Exception ex) {\n-            os = -1;\n-        }\n-        OS = os;\n-        DF = dfPath;\n-    }\n }\n"}]}
