{"diffoscope-json-version": 1, "source1": "first/LruCacheClassPathRepository.class", "source2": "second/LruCacheClassPathRepository.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -4,34 +4,32 @@\n import org.apache.bcel.classfile.JavaClass;\n import java.util.LinkedHashMap;\n \n public class LruCacheClassPathRepository extends AbstractClassPathRepository\n {\n     private final LinkedHashMap<String, JavaClass> loadedClasses;\n     \n-    public LruCacheClassPathRepository(final ClassPath path, final int cacheSize) {\n-        super(path);\n-        if (cacheSize < 1) {\n+    public LruCacheClassPathRepository(final ClassPath classPath, final int n) {\n+        super(classPath);\n+        if (n < 1) {\n             throw new IllegalArgumentException(\"cacheSize must be a positive number.\");\n         }\n-        final int initialCapacity = (int)(0.75 * cacheSize);\n-        final boolean accessOrder = true;\n-        this.loadedClasses = (LinkedHashMap<String, JavaClass>)new LruCacheClassPathRepository.LruCacheClassPathRepository$1(this, initialCapacity, (float)cacheSize, true, cacheSize);\n+        this.loadedClasses = (LinkedHashMap<String, JavaClass>)new LruCacheClassPathRepository.LruCacheClassPathRepository$1(this, (int)(0.75 * n), (float)n, true, n);\n     }\n     \n     public void clear() {\n         this.loadedClasses.clear();\n     }\n     \n-    public JavaClass findClass(final String className) {\n-        return this.loadedClasses.get(className);\n+    public JavaClass findClass(final String key) {\n+        return this.loadedClasses.get(key);\n     }\n     \n     public void removeClass(final JavaClass javaClass) {\n         this.loadedClasses.remove(javaClass.getClassName());\n     }\n     \n-    public void storeClass(final JavaClass javaClass) {\n-        this.loadedClasses.put(javaClass.getClassName(), javaClass);\n-        javaClass.setRepository((Repository)this);\n+    public void storeClass(final JavaClass value) {\n+        this.loadedClasses.put(value.getClassName(), value);\n+        value.setRepository((Repository)this);\n     }\n }\n"}]}
