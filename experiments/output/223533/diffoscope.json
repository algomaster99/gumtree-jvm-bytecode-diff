{"diffoscope-json-version": 1, "source1": "first/ConfigurationLoader$InternalLoader.class", "source2": "second/ConfigurationLoader$InternalLoader.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,11 +1,10 @@\n \n package com.puppycrawl.tools.checkstyle;\n \n-import java.util.Optional;\n import java.util.Arrays;\n import com.puppycrawl.tools.checkstyle.api.SeverityLevel;\n import com.puppycrawl.tools.checkstyle.api.CheckstyleException;\n import org.xml.sax.Attributes;\n import javax.xml.parsers.ParserConfigurationException;\n import org.xml.sax.SAXException;\n import java.util.ArrayDeque;\n@@ -28,72 +27,59 @@\n     \n     private InternalLoader(final ConfigurationLoader this$0) throws SAXException, ParserConfigurationException {\n         this.this$0 = this$0;\n         super(ConfigurationLoader.createIdToResourceNameMap());\n         this.configStack = new ArrayDeque();\n     }\n     \n-    public void startElement(final String uri, final String localName, final String qName, final Attributes attributes) throws SAXException {\n-        if (\"module\".equals(qName)) {\n-            final String originalName = attributes.getValue(\"name\");\n-            final String name = this.this$0.threadModeSettings.resolveName(originalName);\n-            final DefaultConfiguration conf = new DefaultConfiguration(name, this.this$0.threadModeSettings);\n+    public void startElement(final String s, final String s2, final String s3, final Attributes attributes) throws SAXException {\n+        if (\"module\".equals(s3)) {\n+            final DefaultConfiguration configuration = new DefaultConfiguration(this.this$0.threadModeSettings.resolveName(attributes.getValue(\"name\")), this.this$0.threadModeSettings);\n             if (this.configStack.isEmpty()) {\n-                this.configuration = (Configuration)conf;\n+                this.configuration = (Configuration)configuration;\n             }\n             else {\n-                final DefaultConfiguration top = (DefaultConfiguration)this.configStack.peek();\n-                top.addChild((Configuration)conf);\n+                ((DefaultConfiguration)this.configStack.peek()).addChild((Configuration)configuration);\n             }\n-            this.configStack.push(conf);\n+            this.configStack.push(configuration);\n         }\n-        else if (\"property\".equals(qName)) {\n-            final String attributesValue = attributes.getValue(\"value\");\n-            String value;\n+        else if (\"property\".equals(s3)) {\n+            final String value = attributes.getValue(\"value\");\n+            String replaceProperties;\n             try {\n-                value = ConfigurationLoader.replaceProperties(attributesValue, this.this$0.overridePropsResolver, attributes.getValue(\"default\"));\n+                replaceProperties = ConfigurationLoader.replaceProperties(value, this.this$0.overridePropsResolver, attributes.getValue(\"default\"));\n             }\n-            catch (final CheckstyleException ex) {\n-                throw new SAXException((Exception)ex);\n+            catch (final CheckstyleException e) {\n+                throw new SAXException((Exception)e);\n             }\n-            final String name2 = attributes.getValue(\"name\");\n-            final DefaultConfiguration top = (DefaultConfiguration)this.configStack.peek();\n-            top.addProperty(name2, value);\n+            ((DefaultConfiguration)this.configStack.peek()).addProperty(attributes.getValue(\"name\"), replaceProperties);\n         }\n-        else if (\"message\".equals(qName)) {\n-            final String key = attributes.getValue(\"key\");\n-            final String value = attributes.getValue(\"value\");\n-            final DefaultConfiguration top2 = (DefaultConfiguration)this.configStack.peek();\n-            top2.addMessage(key, value);\n+        else if (\"message\".equals(s3)) {\n+            ((DefaultConfiguration)this.configStack.peek()).addMessage(attributes.getValue(\"key\"), attributes.getValue(\"value\"));\n         }\n-        else if (!\"metadata\".equals(qName)) {\n-            throw new IllegalStateException(\"Unknown name:\" + qName);\n+        else if (!\"metadata\".equals(s3)) {\n+            throw new IllegalStateException(\"Unknown name:\" + s3);\n         }\n     }\n     \n-    public void endElement(final String uri, final String localName, final String qName) throws SAXException {\n-        if (\"module\".equals(qName)) {\n-            final Configuration recentModule = (Configuration)this.configStack.pop();\n-            SeverityLevel level = null;\n-            if (this.containsAttribute(recentModule, \"severity\")) {\n+    public void endElement(final String s, final String s2, final String anObject) throws SAXException {\n+        if (\"module\".equals(anObject)) {\n+            final Configuration configuration = (Configuration)this.configStack.pop();\n+            SeverityLevel instance = null;\n+            if (this.containsAttribute(configuration, \"severity\")) {\n                 try {\n-                    final String severity = recentModule.getProperty(\"severity\");\n-                    level = SeverityLevel.getInstance(severity);\n+                    instance = SeverityLevel.getInstance(configuration.getProperty(\"severity\"));\n                 }\n-                catch (final CheckstyleException ex) {\n-                    throw new SAXException(\"Problem during accessing 'severity' attribute for \" + recentModule.getName(), (Exception)ex);\n+                catch (final CheckstyleException e) {\n+                    throw new SAXException(\"Problem during accessing 'severity' attribute for \" + configuration.getName(), (Exception)e);\n                 }\n             }\n-            final boolean omitModule = this.this$0.omitIgnoredModules && level == SeverityLevel.IGNORE;\n-            if (omitModule && !this.configStack.isEmpty()) {\n-                final DefaultConfiguration parentModule = (DefaultConfiguration)this.configStack.peek();\n-                parentModule.removeChild(recentModule);\n+            if (this.this$0.omitIgnoredModules && instance == SeverityLevel.IGNORE && !this.configStack.isEmpty()) {\n+                ((DefaultConfiguration)this.configStack.peek()).removeChild(configuration);\n             }\n         }\n     }\n     \n-    private boolean containsAttribute(final Configuration module, final String attributeName) {\n-        final String[] names = module.getPropertyNames();\n-        final Optional<String> result = Arrays.stream(names).filter(InternalLoader::lambda$containsAttribute$0).findFirst();\n-        return result.isPresent();\n+    private boolean containsAttribute(final Configuration configuration, final String s) {\n+        return Arrays.stream(configuration.getPropertyNames()).filter(InternalLoader::lambda$containsAttribute$0).findFirst().isPresent();\n     }\n }\n"}]}
