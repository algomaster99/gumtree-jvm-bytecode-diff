{"diffoscope-json-version": 1, "source1": "first/OverloadMethodsDeclarationOrderCheck.class", "source2": "second/OverloadMethodsDeclarationOrderCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,11 +1,10 @@\n \n package com.puppycrawl.tools.checkstyle.checks.coding;\n \n-import java.util.Map;\n import java.util.HashMap;\n import com.puppycrawl.tools.checkstyle.utils.TokenUtil;\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n import com.puppycrawl.tools.checkstyle.StatelessCheck;\n import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n \n @StatelessCheck\n@@ -21,37 +20,33 @@\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 6 };\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        final int parentType = ast.getParent().getType();\n-        final int[] tokenTypes = { 14, 154, 15, 136, 199 };\n-        if (TokenUtil.isOfType(parentType, tokenTypes)) {\n-            this.checkOverloadMethodsGrouping(ast);\n+    public void visitToken(final DetailAST detailAST) {\n+        if (TokenUtil.isOfType(detailAST.getParent().getType(), new int[] { 14, 154, 15, 136, 199 })) {\n+            this.checkOverloadMethodsGrouping(detailAST);\n         }\n     }\n     \n-    private void checkOverloadMethodsGrouping(final DetailAST objectBlock) {\n-        final int allowedDistance = 1;\n-        DetailAST currentToken = objectBlock.getFirstChild();\n-        final Map<String, Integer> methodIndexMap = new HashMap<String, Integer>();\n-        final Map<String, Integer> methodLineNumberMap = new HashMap<String, Integer>();\n-        int currentIndex = 0;\n-        while (currentToken != null) {\n-            if (currentToken.getType() == 9) {\n-                ++currentIndex;\n-                final String methodName = currentToken.findFirstToken(58).getText();\n-                final Integer previousIndex = Integer.valueOf(methodIndexMap.get((Object)methodName));\n-                if (previousIndex != null && currentIndex - previousIndex > 1) {\n-                    final int previousLineWithOverloadMethod = (int)Integer.valueOf(methodLineNumberMap.get((Object)methodName));\n-                    this.log(currentToken, \"overload.methods.declaration\", new Object[] { Integer.valueOf(previousLineWithOverloadMethod) });\n+    private void checkOverloadMethodsGrouping(final DetailAST detailAST) {\n+        DetailAST detailAST2 = detailAST.getFirstChild();\n+        final HashMap hashMap = new HashMap();\n+        final HashMap hashMap2 = new HashMap();\n+        int i = 0;\n+        while (detailAST2 != null) {\n+            if (detailAST2.getType() == 9) {\n+                ++i;\n+                final String text = detailAST2.findFirstToken(58).getText();\n+                final Integer n = (Integer)hashMap.get(text);\n+                if (n != null && i - n > 1) {\n+                    this.log(detailAST2, \"overload.methods.declaration\", new Object[] { Integer.valueOf((int)hashMap2.get(text)) });\n                 }\n-                methodIndexMap.put(methodName, Integer.valueOf(currentIndex));\n-                methodLineNumberMap.put(methodName, Integer.valueOf(currentToken.getLineNo()));\n+                hashMap.put(text, Integer.valueOf(i));\n+                hashMap2.put(text, Integer.valueOf(detailAST2.getLineNo()));\n             }\n-            currentToken = currentToken.getNextSibling();\n+            detailAST2 = detailAST2.getNextSibling();\n         }\n     }\n }\n"}]}
