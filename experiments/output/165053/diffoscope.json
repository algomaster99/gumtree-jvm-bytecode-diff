{"diffoscope-json-version": 1, "source1": "first/AbstractUnicodeExtraField.class", "source2": "second/AbstractUnicodeExtraField.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,50 +1,50 @@\n-  SHA-256 checksum f18e9a37c196015ef4174d1a04c71764daa90d3ca4f1c15d61ad33901fac090a\n+  SHA-256 checksum e909fd51d246090aa62227636bf4a891d4c09ea3a65ae5f8716a7db7688e7360\n   Compiled from \"AbstractUnicodeExtraField.java\"\n public abstract class org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField implements org.apache.commons.compress.archivers.zip.ZipExtraField\n   minor version: 0\n   major version: 52\n   flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT\n   this_class: #31                         // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField\n   super_class: #32                        // java/lang/Object\n   interfaces: 1, fields: 3, methods: 14, attributes: 1\n Constant pool:\n-    #1 = Methodref          #32.#84       // java/lang/Object.\"<init>\":()V\n-    #2 = Class              #85           // java/util/zip/CRC32\n-    #3 = Methodref          #2.#84        // java/util/zip/CRC32.\"<init>\":()V\n-    #4 = Methodref          #2.#86        // java/util/zip/CRC32.update:([BII)V\n-    #5 = Methodref          #2.#87        // java/util/zip/CRC32.getValue:()J\n-    #6 = Fieldref           #31.#88       // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.nameCRC32:J\n-    #7 = Fieldref           #89.#90       // java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;\n-    #8 = Methodref          #91.#92       // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n-    #9 = Fieldref           #31.#93       // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.unicodeName:[B\n-   #10 = Methodref          #31.#94       // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.\"<init>\":(Ljava/lang/String;[BII)V\n-   #11 = Fieldref           #31.#95       // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.data:[B\n-   #12 = Methodref          #96.#97       // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:(J)[B\n-   #13 = Methodref          #98.#99       // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #14 = Methodref          #31.#100      // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.assembleData:()V\n-   #15 = Class              #101          // org/apache/commons/compress/archivers/zip/ZipShort\n-   #16 = Methodref          #15.#102      // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-   #17 = Methodref          #31.#103      // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getCentralDirectoryData:()[B\n-   #18 = Methodref          #31.#104      // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getCentralDirectoryLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #19 = Class              #105          // java/util/zip/ZipException\n-   #20 = String             #106          // UniCode path extra data must have at least 5 bytes.\n-   #21 = Methodref          #19.#107      // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-   #22 = Class              #108          // java/lang/StringBuilder\n-   #23 = Methodref          #22.#84       // java/lang/StringBuilder.\"<init>\":()V\n-   #24 = String             #109          // Unsupported version [\n-   #25 = Methodref          #22.#110      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #26 = Methodref          #22.#111      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #27 = String             #112          // ] for UniCode path extra data.\n-   #28 = Methodref          #22.#113      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #29 = Methodref          #96.#114      // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-   #30 = Methodref          #31.#115      // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.parseFromLocalFileData:([BII)V\n-   #31 = Class              #116          // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField\n-   #32 = Class              #117          // java/lang/Object\n-   #33 = Class              #118          // org/apache/commons/compress/archivers/zip/ZipExtraField\n+    #1 = Methodref          #32.#83       // java/lang/Object.\"<init>\":()V\n+    #2 = Class              #84           // java/util/zip/CRC32\n+    #3 = Methodref          #2.#83        // java/util/zip/CRC32.\"<init>\":()V\n+    #4 = Methodref          #2.#85        // java/util/zip/CRC32.update:([BII)V\n+    #5 = Methodref          #2.#86        // java/util/zip/CRC32.getValue:()J\n+    #6 = Fieldref           #31.#87       // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.nameCRC32:J\n+    #7 = Fieldref           #88.#89       // java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;\n+    #8 = Methodref          #90.#91       // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n+    #9 = Fieldref           #31.#92       // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.unicodeName:[B\n+   #10 = Methodref          #31.#93       // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.\"<init>\":(Ljava/lang/String;[BII)V\n+   #11 = Fieldref           #31.#94       // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.data:[B\n+   #12 = Methodref          #95.#96       // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:(J)[B\n+   #13 = Methodref          #97.#98       // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #14 = Methodref          #31.#99       // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.assembleData:()V\n+   #15 = Class              #100          // org/apache/commons/compress/archivers/zip/ZipShort\n+   #16 = Methodref          #15.#101      // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+   #17 = Methodref          #31.#102      // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getCentralDirectoryData:()[B\n+   #18 = Methodref          #31.#103      // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getCentralDirectoryLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #19 = Class              #104          // java/util/zip/ZipException\n+   #20 = String             #105          // UniCode path extra data must have at least 5 bytes.\n+   #21 = Methodref          #19.#106      // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+   #22 = Class              #107          // java/lang/StringBuilder\n+   #23 = Methodref          #22.#83       // java/lang/StringBuilder.\"<init>\":()V\n+   #24 = String             #108          // Unsupported version [\n+   #25 = Methodref          #22.#109      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #26 = Methodref          #22.#110      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #27 = String             #111          // ] for UniCode path extra data.\n+   #28 = Methodref          #22.#112      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #29 = Methodref          #95.#113      // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+   #30 = Methodref          #31.#114      // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.parseFromLocalFileData:([BII)V\n+   #31 = Class              #115          // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField\n+   #32 = Class              #116          // java/lang/Object\n+   #33 = Class              #117          // org/apache/commons/compress/archivers/zip/ZipExtraField\n    #34 = Utf8               nameCRC32\n    #35 = Utf8               J\n    #36 = Utf8               unicodeName\n    #37 = Utf8               [B\n    #38 = Utf8               data\n    #39 = Utf8               <init>\n    #40 = Utf8               ()V\n@@ -74,83 +74,82 @@\n    #64 = Utf8               b\n    #65 = Class              #37           // \"[B\"\n    #66 = Utf8               setUnicodeName\n    #67 = Utf8               ([B)V\n    #68 = Utf8               getCentralDirectoryData\n    #69 = Utf8               getCentralDirectoryLength\n    #70 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #71 = Class              #116          // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField\n-   #72 = Utf8               getLocalFileDataData\n-   #73 = Utf8               getLocalFileDataLength\n-   #74 = Utf8               parseFromLocalFileData\n-   #75 = Utf8               ([BII)V\n-   #76 = Utf8               buffer\n-   #77 = Utf8               offset\n-   #78 = Utf8               length\n-   #79 = Utf8               version\n-   #80 = Utf8               Exceptions\n-   #81 = Utf8               parseFromCentralDirectoryData\n-   #82 = Utf8               SourceFile\n-   #83 = Utf8               AbstractUnicodeExtraField.java\n-   #84 = NameAndType        #39:#40       // \"<init>\":()V\n-   #85 = Utf8               java/util/zip/CRC32\n-   #86 = NameAndType        #119:#75      // update:([BII)V\n-   #87 = NameAndType        #120:#59      // getValue:()J\n-   #88 = NameAndType        #34:#35       // nameCRC32:J\n-   #89 = Class              #121          // java/nio/charset/StandardCharsets\n-   #90 = NameAndType        #122:#123     // UTF_8:Ljava/nio/charset/Charset;\n-   #91 = Class              #124          // java/lang/String\n-   #92 = NameAndType        #125:#126     // getBytes:(Ljava/nio/charset/Charset;)[B\n-   #93 = NameAndType        #36:#37       // unicodeName:[B\n-   #94 = NameAndType        #39:#46       // \"<init>\":(Ljava/lang/String;[BII)V\n-   #95 = NameAndType        #38:#37       // data:[B\n-   #96 = Class              #127          // org/apache/commons/compress/archivers/zip/ZipLong\n-   #97 = NameAndType        #125:#128     // getBytes:(J)[B\n-   #98 = Class              #129          // java/lang/System\n-   #99 = NameAndType        #130:#131     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #100 = NameAndType        #56:#40       // assembleData:()V\n-  #101 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-  #102 = NameAndType        #39:#132      // \"<init>\":(I)V\n-  #103 = NameAndType        #68:#63       // getCentralDirectoryData:()[B\n-  #104 = NameAndType        #69:#70       // getCentralDirectoryLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #105 = Utf8               java/util/zip/ZipException\n-  #106 = Utf8               UniCode path extra data must have at least 5 bytes.\n-  #107 = NameAndType        #39:#133      // \"<init>\":(Ljava/lang/String;)V\n-  #108 = Utf8               java/lang/StringBuilder\n-  #109 = Utf8               Unsupported version [\n-  #110 = NameAndType        #134:#135     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #111 = NameAndType        #134:#136     // append:(I)Ljava/lang/StringBuilder;\n-  #112 = Utf8               ] for UniCode path extra data.\n-  #113 = NameAndType        #137:#138     // toString:()Ljava/lang/String;\n-  #114 = NameAndType        #120:#139     // getValue:([BI)J\n-  #115 = NameAndType        #74:#75       // parseFromLocalFileData:([BII)V\n-  #116 = Utf8               org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField\n-  #117 = Utf8               java/lang/Object\n-  #118 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n-  #119 = Utf8               update\n-  #120 = Utf8               getValue\n-  #121 = Utf8               java/nio/charset/StandardCharsets\n-  #122 = Utf8               UTF_8\n-  #123 = Utf8               Ljava/nio/charset/Charset;\n-  #124 = Utf8               java/lang/String\n-  #125 = Utf8               getBytes\n-  #126 = Utf8               (Ljava/nio/charset/Charset;)[B\n-  #127 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-  #128 = Utf8               (J)[B\n-  #129 = Utf8               java/lang/System\n-  #130 = Utf8               arraycopy\n-  #131 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #132 = Utf8               (I)V\n-  #133 = Utf8               (Ljava/lang/String;)V\n-  #134 = Utf8               append\n-  #135 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #136 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #137 = Utf8               toString\n-  #138 = Utf8               ()Ljava/lang/String;\n-  #139 = Utf8               ([BI)J\n+   #71 = Utf8               getLocalFileDataData\n+   #72 = Utf8               getLocalFileDataLength\n+   #73 = Utf8               parseFromLocalFileData\n+   #74 = Utf8               ([BII)V\n+   #75 = Utf8               buffer\n+   #76 = Utf8               offset\n+   #77 = Utf8               length\n+   #78 = Utf8               version\n+   #79 = Utf8               Exceptions\n+   #80 = Utf8               parseFromCentralDirectoryData\n+   #81 = Utf8               SourceFile\n+   #82 = Utf8               AbstractUnicodeExtraField.java\n+   #83 = NameAndType        #39:#40       // \"<init>\":()V\n+   #84 = Utf8               java/util/zip/CRC32\n+   #85 = NameAndType        #118:#74      // update:([BII)V\n+   #86 = NameAndType        #119:#59      // getValue:()J\n+   #87 = NameAndType        #34:#35       // nameCRC32:J\n+   #88 = Class              #120          // java/nio/charset/StandardCharsets\n+   #89 = NameAndType        #121:#122     // UTF_8:Ljava/nio/charset/Charset;\n+   #90 = Class              #123          // java/lang/String\n+   #91 = NameAndType        #124:#125     // getBytes:(Ljava/nio/charset/Charset;)[B\n+   #92 = NameAndType        #36:#37       // unicodeName:[B\n+   #93 = NameAndType        #39:#46       // \"<init>\":(Ljava/lang/String;[BII)V\n+   #94 = NameAndType        #38:#37       // data:[B\n+   #95 = Class              #126          // org/apache/commons/compress/archivers/zip/ZipLong\n+   #96 = NameAndType        #124:#127     // getBytes:(J)[B\n+   #97 = Class              #128          // java/lang/System\n+   #98 = NameAndType        #129:#130     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #99 = NameAndType        #56:#40       // assembleData:()V\n+  #100 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+  #101 = NameAndType        #39:#131      // \"<init>\":(I)V\n+  #102 = NameAndType        #68:#63       // getCentralDirectoryData:()[B\n+  #103 = NameAndType        #69:#70       // getCentralDirectoryLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #104 = Utf8               java/util/zip/ZipException\n+  #105 = Utf8               UniCode path extra data must have at least 5 bytes.\n+  #106 = NameAndType        #39:#132      // \"<init>\":(Ljava/lang/String;)V\n+  #107 = Utf8               java/lang/StringBuilder\n+  #108 = Utf8               Unsupported version [\n+  #109 = NameAndType        #133:#134     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #110 = NameAndType        #133:#135     // append:(I)Ljava/lang/StringBuilder;\n+  #111 = Utf8               ] for UniCode path extra data.\n+  #112 = NameAndType        #136:#137     // toString:()Ljava/lang/String;\n+  #113 = NameAndType        #119:#138     // getValue:([BI)J\n+  #114 = NameAndType        #73:#74       // parseFromLocalFileData:([BII)V\n+  #115 = Utf8               org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField\n+  #116 = Utf8               java/lang/Object\n+  #117 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n+  #118 = Utf8               update\n+  #119 = Utf8               getValue\n+  #120 = Utf8               java/nio/charset/StandardCharsets\n+  #121 = Utf8               UTF_8\n+  #122 = Utf8               Ljava/nio/charset/Charset;\n+  #123 = Utf8               java/lang/String\n+  #124 = Utf8               getBytes\n+  #125 = Utf8               (Ljava/nio/charset/Charset;)[B\n+  #126 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+  #127 = Utf8               (J)[B\n+  #128 = Utf8               java/lang/System\n+  #129 = Utf8               arraycopy\n+  #130 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #131 = Utf8               (I)V\n+  #132 = Utf8               (Ljava/lang/String;)V\n+  #133 = Utf8               append\n+  #134 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #135 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #136 = Utf8               toString\n+  #137 = Utf8               ()Ljava/lang/String;\n+  #138 = Utf8               ([BI)J\n {\n   private long nameCRC32;\n     descriptor: J\n     flags: (0x0002) ACC_PRIVATE\n \n   private byte[] unicodeName;\n     descriptor: [B\n"}]}
