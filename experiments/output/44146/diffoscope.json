{"diffoscope-json-version": 1, "source1": "first/NodeTreeWalker.class", "source2": "second/NodeTreeWalker.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,14 +5,18 @@\n import java.util.Collection;\n import java.util.LinkedList;\n \n public class NodeTreeWalker\n {\n     public static final NodeTreeWalker INSTANCE;\n     \n+    static {\n+        INSTANCE = new NodeTreeWalker();\n+    }\n+    \n     public <T> void walkDFS(final T root, final ConfigurationNodeVisitor<T> visitor, final NodeHandler<T> handler) {\n         if (checkParameters(root, visitor, handler)) {\n             dfs(root, (org.apache.commons.configuration2.tree.ConfigurationNodeVisitor<Object>)visitor, (org.apache.commons.configuration2.tree.NodeHandler<Object>)handler);\n         }\n     }\n     \n     public <T> void walkBFS(final T root, final ConfigurationNodeVisitor<T> visitor, final NodeHandler<T> handler) {\n@@ -20,15 +24,15 @@\n             bfs(root, (org.apache.commons.configuration2.tree.ConfigurationNodeVisitor<Object>)visitor, (org.apache.commons.configuration2.tree.NodeHandler<Object>)handler);\n         }\n     }\n     \n     private static <T> void dfs(final T node, final ConfigurationNodeVisitor<T> visitor, final NodeHandler<T> handler) {\n         if (!visitor.terminate()) {\n             visitor.visitBeforeChildren((Object)node, (NodeHandler)handler);\n-            handler.getChildren((Object)node).forEach(c -> dfs(c, (org.apache.commons.configuration2.tree.ConfigurationNodeVisitor<Object>)visitor, (org.apache.commons.configuration2.tree.NodeHandler<Object>)handler));\n+            handler.getChildren((Object)node).forEach(c -> dfs(c, (org.apache.commons.configuration2.tree.ConfigurationNodeVisitor<Object>)visitor2, (org.apache.commons.configuration2.tree.NodeHandler<Object>)handler2));\n             if (!visitor.terminate()) {\n                 visitor.visitAfterChildren((Object)node, (NodeHandler)handler);\n             }\n         }\n     }\n     \n     private static <T> void bfs(final T root, final ConfigurationNodeVisitor<T> visitor, final NodeHandler<T> handler) {\n@@ -48,12 +52,8 @@\n             throw new IllegalArgumentException(\"Visitor must not be null!\");\n         }\n         if (handler == null) {\n             throw new IllegalArgumentException(\"NodeHandler must not be null!\");\n         }\n         return root != null;\n     }\n-    \n-    static {\n-        INSTANCE = new NodeTreeWalker();\n-    }\n }\n"}]}
