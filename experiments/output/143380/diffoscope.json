{"diffoscope-json-version": 1, "source1": "first/JavaAstVisitor.class", "source2": "second/JavaAstVisitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -28,14 +28,18 @@\n {\n     private static final String LEFT_SHIFT = \"<<\";\n     private static final String UNSIGNED_RIGHT_SHIFT = \">>>\";\n     private static final String RIGHT_SHIFT = \">>\";\n     private static final int[] EXPRESSIONS_WITH_NO_EXPR_ROOT;\n     private final BufferedTokenStream tokens;\n     \n+    static {\n+        EXPRESSIONS_WITH_NO_EXPR_ROOT = new int[] { 43, 42, 181 };\n+    }\n+    \n     public JavaAstVisitor(final CommonTokenStream tokenStream) {\n         this.tokens = (BufferedTokenStream)tokenStream;\n     }\n     \n     public DetailAstImpl visitCompilationUnit(final JavaLanguageParser.CompilationUnitContext ctx) {\n         final boolean isEmptyFile = ctx.children.size() == 1;\n         DetailAstImpl compilationUnit;\n@@ -82,15 +86,15 @@\n         return this.create(ctx.SEMI());\n     }\n     \n     public DetailAstImpl visitTypeDeclaration(final JavaLanguageParser.TypeDeclarationContext ctx) {\n         DetailAstImpl typeDeclaration;\n         if (ctx.type == null) {\n             typeDeclaration = this.create(ctx.semi.get(0));\n-            ctx.semi.subList(1, ctx.semi.size()).forEach(semi -> addLastSibling(typeDeclaration, this.create(semi)));\n+            ctx.semi.subList(1, ctx.semi.size()).forEach(semi -> addLastSibling(self, this.create(semi)));\n         }\n         else {\n             typeDeclaration = this.visit((ParseTree)ctx.type);\n         }\n         return typeDeclaration;\n     }\n     \n@@ -186,16 +190,16 @@\n         return typeUpperBounds;\n     }\n     \n     public DetailAstImpl visitTypeBound(final JavaLanguageParser.TypeBoundContext ctx) {\n         final DetailAstImpl typeBoundType = this.visit((ParseTree)ctx.typeBoundType(0));\n         final Iterator<JavaLanguageParser.TypeBoundTypeContext> typeBoundTypeIterator = ctx.typeBoundType().listIterator(1);\n         ctx.BAND().forEach(band -> {\n-            addLastSibling(typeBoundType, this.create(174, (Token)band.getPayload()));\n-            addLastSibling(typeBoundType, this.visit((ParseTree)typeBoundTypeIterator.next()));\n+            addLastSibling(detailAstImpl, this.create(174, (Token)band.getPayload()));\n+            addLastSibling(detailAstImpl, this.visit((ParseTree)iterator.next()));\n             return;\n         });\n         return typeBoundType;\n     }\n     \n     public DetailAstImpl visitTypeBoundType(final JavaLanguageParser.TypeBoundTypeContext ctx) {\n         return this.flattenedTree((ParserRuleContext)ctx);\n@@ -265,15 +269,15 @@\n     }\n     \n     public DetailAstImpl visitMethodDeclaration(final JavaLanguageParser.MethodDeclarationContext ctx) {\n         final DetailAstImpl methodDef = createImaginary(9);\n         methodDef.addChild((DetailAST)this.createModifiers(ctx.mods));\n         this.processChildren(methodDef, (List<? extends ParseTree>)ctx.children.stream().filter(child -> !(child instanceof JavaLanguageParser.ArrayDeclaratorContext)).collect(Collectors.toList()));\n         final DetailAstImpl typeAst = (DetailAstImpl)methodDef.findFirstToken(13);\n-        ctx.cStyleArrDec.forEach(child -> typeAst.addChild((DetailAST)this.visit((ParseTree)child)));\n+        ctx.cStyleArrDec.forEach(child -> detailAstImpl.addChild((DetailAST)this.visit((ParseTree)child)));\n         return methodDef;\n     }\n     \n     public DetailAstImpl visitMethodBody(final JavaLanguageParser.MethodBodyContext ctx) {\n         return this.flattenedTree((ParserRuleContext)ctx);\n     }\n     \n@@ -310,29 +314,29 @@\n     \n     public DetailAstImpl visitInterfaceMethodDeclaration(final JavaLanguageParser.InterfaceMethodDeclarationContext ctx) {\n         final DetailAstImpl methodDef = createImaginary(9);\n         methodDef.addChild((DetailAST)this.createModifiers(ctx.mods));\n         final List<ParseTree> children = (List)ctx.children.stream().filter(child -> !(child instanceof JavaLanguageParser.ArrayDeclaratorContext)).collect(Collectors.toList());\n         this.processChildren(methodDef, children);\n         final DetailAstImpl typeAst = (DetailAstImpl)methodDef.findFirstToken(13);\n-        ctx.cStyleArrDec.forEach(child -> typeAst.addChild((DetailAST)this.visit((ParseTree)child)));\n+        ctx.cStyleArrDec.forEach(child -> detailAstImpl.addChild((DetailAST)this.visit((ParseTree)child)));\n         return methodDef;\n     }\n     \n     public DetailAstImpl visitVariableDeclarators(final JavaLanguageParser.VariableDeclaratorsContext ctx) {\n         return this.flattenedTree((ParserRuleContext)ctx);\n     }\n     \n     public DetailAstImpl visitVariableDeclarator(final JavaLanguageParser.VariableDeclaratorContext ctx) {\n         final DetailAstImpl variableDef = createImaginary(10);\n         variableDef.addChild((DetailAST)this.createModifiers(ctx.mods));\n         final DetailAstImpl type = this.visit((ParseTree)ctx.type);\n         variableDef.addChild((DetailAST)type);\n         variableDef.addChild((DetailAST)this.visit((ParseTree)ctx.id()));\n-        ctx.arrayDeclarator().forEach(child -> type.addChild((DetailAST)this.visit((ParseTree)child)));\n+        ctx.arrayDeclarator().forEach(child -> detailAstImpl.addChild((DetailAST)this.visit((ParseTree)child)));\n         final TerminalNode assignNode = ctx.ASSIGN();\n         if (assignNode != null) {\n             final DetailAstImpl assign = this.create(assignNode);\n             variableDef.addChild((DetailAST)assign);\n             assign.addChild((DetailAST)this.visit((ParseTree)ctx.variableInitializer()));\n         }\n         return variableDef;\n@@ -352,15 +356,15 @@\n         }\n         else {\n             declaratorId = this.create(ctx.DOT());\n             declaratorId.addChild((DetailAST)this.visit((ParseTree)ctx.qualifiedName()));\n             declaratorId.addChild((DetailAST)this.create(ctx.LITERAL_THIS()));\n         }\n         root.addChild((DetailAST)declaratorId);\n-        ctx.arrayDeclarator().forEach(child -> type.addChild((DetailAST)this.visit((ParseTree)child)));\n+        ctx.arrayDeclarator().forEach(child -> detailAstImpl.addChild((DetailAST)this.visit((ParseTree)child)));\n         return root.getFirstChild();\n     }\n     \n     public DetailAstImpl visitArrayInitializer(final JavaLanguageParser.ArrayInitializerContext ctx) {\n         final DetailAstImpl arrayInitializer = this.create(29, ctx.start);\n         this.processChildren(arrayInitializer, ctx.children.subList(1, ctx.children.size()));\n         return arrayInitializer;\n@@ -369,15 +373,15 @@\n     public DetailAstImpl visitClassOrInterfaceType(final JavaLanguageParser.ClassOrInterfaceTypeContext ctx) {\n         final JavaAstVisitor.DetailAstPair currentAST = new JavaAstVisitor.DetailAstPair();\n         JavaAstVisitor.DetailAstPair.addAstChild(currentAST, this.visit((ParseTree)ctx.id()));\n         JavaAstVisitor.DetailAstPair.addAstChild(currentAST, this.visit((ParseTree)ctx.typeArguments()));\n         for (final ParserRuleContext extendedContext : ctx.extended) {\n             final DetailAstImpl dot = this.create(extendedContext.start);\n             JavaAstVisitor.DetailAstPair.makeAstRoot(currentAST, dot);\n-            extendedContext.children.forEach(child -> JavaAstVisitor.DetailAstPair.addAstChild(currentAST, this.visit(child)));\n+            extendedContext.children.forEach(child -> JavaAstVisitor.DetailAstPair.addAstChild(detailAstPair, this.visit(child)));\n         }\n         DetailAstImpl returnTree;\n         if (ctx.createImaginaryNode) {\n             returnTree = createImaginary(13);\n             returnTree.addChild((DetailAST)currentAST.root);\n         }\n         else {\n@@ -567,15 +571,15 @@\n     \n     public DetailAstImpl visitAnnotationMethodRest(final JavaLanguageParser.AnnotationMethodRestContext ctx) {\n         final DetailAstImpl annotationFieldDef = createImaginary(161);\n         annotationFieldDef.addChild((DetailAST)this.createModifiers(ctx.mods));\n         annotationFieldDef.addChild((DetailAST)this.visit((ParseTree)ctx.type));\n         this.processChildren(annotationFieldDef, (List<? extends ParseTree>)ctx.children.stream().filter(child -> !(child instanceof JavaLanguageParser.ArrayDeclaratorContext)).collect(Collectors.toList()));\n         final DetailAstImpl typeAst = (DetailAstImpl)annotationFieldDef.findFirstToken(13);\n-        ctx.cStyleArrDec.forEach(child -> typeAst.addChild((DetailAST)this.visit((ParseTree)child)));\n+        ctx.cStyleArrDec.forEach(child -> detailAstImpl.addChild((DetailAST)this.visit((ParseTree)child)));\n         return annotationFieldDef;\n     }\n     \n     public DetailAstImpl visitDefaultValue(final JavaLanguageParser.DefaultValueContext ctx) {\n         final DetailAstImpl defaultValue = this.create(ctx.LITERAL_DEFAULT());\n         defaultValue.addChild((DetailAST)this.visit((ParseTree)ctx.elementValue()));\n         return defaultValue;\n@@ -599,15 +603,15 @@\n         root.addChild((DetailAST)this.visit((ParseTree)ctx.arguments()));\n         root.addChild((DetailAST)this.create(ctx.SEMI()));\n         return root;\n     }\n     \n     public DetailAstImpl visitPrimaryCtorCall(final JavaLanguageParser.PrimaryCtorCallContext ctx) {\n         final DetailAstImpl primaryCtorCall = this.create(42, (Token)ctx.LITERAL_SUPER().getPayload());\n-        this.processChildren(primaryCtorCall, (List<? extends ParseTree>)ctx.children.stream().filter(child -> !child.equals((Object)ctx.LITERAL_SUPER())).collect(Collectors.toList()));\n+        this.processChildren(primaryCtorCall, (List<? extends ParseTree>)ctx.children.stream().filter(child -> !child.equals(primaryCtorCallContext.LITERAL_SUPER())).collect(Collectors.toList()));\n         return primaryCtorCall;\n     }\n     \n     public DetailAstImpl visitBlock(final JavaLanguageParser.BlockContext ctx) {\n         final DetailAstImpl slist = this.create(7, ctx.start);\n         this.processChildren(slist, ctx.children.subList(1, ctx.children.size()));\n         return slist;\n@@ -730,26 +734,26 @@\n     \n     public DetailAstImpl visitSwitchRules(final JavaLanguageParser.SwitchRulesContext ctx) {\n         final DetailAstImpl dummyRoot = new DetailAstImpl();\n         ctx.switchLabeledRule().forEach(switchLabeledRuleContext -> {\n             final DetailAstImpl switchRule = this.visit((ParseTree)switchLabeledRuleContext);\n             final DetailAstImpl switchRuleParent = createImaginary(208);\n             switchRuleParent.addChild((DetailAST)switchRule);\n-            dummyRoot.addChild((DetailAST)switchRuleParent);\n+            detailAstImpl.addChild((DetailAST)switchRuleParent);\n             return;\n         });\n         return dummyRoot.getFirstChild();\n     }\n     \n     public DetailAstImpl visitSwitchBlocks(final JavaLanguageParser.SwitchBlocksContext ctx) {\n         final DetailAstImpl dummyRoot = new DetailAstImpl();\n-        ctx.groups.forEach(group -> dummyRoot.addChild((DetailAST)this.visit((ParseTree)group)));\n+        ctx.groups.forEach(group -> detailAstImpl.addChild((DetailAST)this.visit((ParseTree)group)));\n         if (!ctx.emptyLabels.isEmpty()) {\n             final DetailAstImpl emptyLabelParent = createImaginary(33);\n-            ctx.emptyLabels.forEach(label -> emptyLabelParent.addChild((DetailAST)this.visit((ParseTree)label)));\n+            ctx.emptyLabels.forEach(label -> detailAstImpl2.addChild((DetailAST)this.visit((ParseTree)label)));\n             dummyRoot.addChild((DetailAST)emptyLabelParent);\n         }\n         return dummyRoot.getFirstChild();\n     }\n     \n     public DetailAstImpl visitSwitchLabeledExpression(final JavaLanguageParser.SwitchLabeledExpressionContext ctx) {\n         return this.flattenedTree((ParserRuleContext)ctx);\n@@ -828,16 +832,16 @@\n         if (ctx.accessList.isEmpty()) {\n             resource = createImaginary(178);\n             resource.addChild((DetailAST)this.visit((ParseTree)ctx.id()));\n         }\n         else {\n             final JavaAstVisitor.DetailAstPair currentAst = new JavaAstVisitor.DetailAstPair();\n             ctx.accessList.forEach(fieldAccess -> {\n-                JavaAstVisitor.DetailAstPair.addAstChild(currentAst, this.visit((ParseTree)fieldAccess.expr()));\n-                JavaAstVisitor.DetailAstPair.makeAstRoot(currentAst, this.create(fieldAccess.DOT()));\n+                JavaAstVisitor.DetailAstPair.addAstChild(detailAstPair, this.visit((ParseTree)fieldAccess.expr()));\n+                JavaAstVisitor.DetailAstPair.makeAstRoot(detailAstPair, this.create(fieldAccess.DOT()));\n                 return;\n             });\n             resource = createImaginary(178);\n             resource.addChild((DetailAST)currentAst.root);\n             if (ctx.LITERAL_THIS() == null) {\n                 resource.getFirstChild().addChild((DetailAST)this.visit((ParseTree)ctx.id()));\n             }\n@@ -1121,22 +1125,22 @@\n         }\n         postfix.addChild((DetailAST)this.visit((ParseTree)ctx.expr()));\n         return postfix;\n     }\n     \n     public DetailAstImpl visitMethodRef(final JavaLanguageParser.MethodRefContext ctx) {\n         final DetailAstImpl doubleColon = this.create(180, (Token)ctx.DOUBLE_COLON().getPayload());\n-        final List<ParseTree> children = (List)ctx.children.stream().filter(child -> !child.equals((Object)ctx.DOUBLE_COLON())).collect(Collectors.toList());\n+        final List<ParseTree> children = (List)ctx.children.stream().filter(child -> !child.equals(methodRefContext.DOUBLE_COLON())).collect(Collectors.toList());\n         this.processChildren(doubleColon, children);\n         return doubleColon;\n     }\n     \n     public DetailAstImpl visitTernaryOp(final JavaLanguageParser.TernaryOpContext ctx) {\n         final DetailAstImpl root = this.create(ctx.QUESTION());\n-        this.processChildren(root, (List<? extends ParseTree>)ctx.children.stream().filter(child -> !child.equals((Object)ctx.QUESTION())).collect(Collectors.toList()));\n+        this.processChildren(root, (List<? extends ParseTree>)ctx.children.stream().filter(child -> !child.equals(ternaryOpContext.QUESTION())).collect(Collectors.toList()));\n         return root;\n     }\n     \n     public DetailAstImpl visitBinOp(final JavaLanguageParser.BinOpContext ctx) {\n         final DetailAstImpl bop = this.create(ctx.bop);\n         final List<JavaLanguageParser.BinOpContext> binOpList = new ArrayList<JavaLanguageParser.BinOpContext>();\n         for (ParseTree firstExpression = (ParseTree)ctx.expr(0); firstExpression instanceof JavaLanguageParser.BinOpContext; firstExpression = (ParseTree)((JavaLanguageParser.BinOpContext)firstExpression).expr(0)) {\n@@ -1239,28 +1243,28 @@\n     }\n     \n     public DetailAstImpl visitClassRefPrimary(final JavaLanguageParser.ClassRefPrimaryContext ctx) {\n         final DetailAstImpl dot = this.create(ctx.DOT());\n         final DetailAstImpl primaryTypeNoArray = this.visit((ParseTree)ctx.type);\n         dot.addChild((DetailAST)primaryTypeNoArray);\n         if (TokenUtil.isOfType((DetailAST)primaryTypeNoArray, new int[] { 59 })) {\n-            ctx.arrayDeclarator().forEach(child -> primaryTypeNoArray.addChild((DetailAST)this.visit((ParseTree)child)));\n+            ctx.arrayDeclarator().forEach(child -> detailAstImpl.addChild((DetailAST)this.visit((ParseTree)child)));\n         }\n         else {\n-            ctx.arrayDeclarator().forEach(child -> addLastSibling(primaryTypeNoArray, this.visit((ParseTree)child)));\n+            ctx.arrayDeclarator().forEach(child -> addLastSibling(self, this.visit((ParseTree)child)));\n         }\n         dot.addChild((DetailAST)this.create(ctx.LITERAL_CLASS()));\n         return dot;\n     }\n     \n     public DetailAstImpl visitPrimitivePrimary(final JavaLanguageParser.PrimitivePrimaryContext ctx) {\n         final DetailAstImpl dot = this.create(ctx.DOT());\n         final DetailAstImpl primaryTypeNoArray = this.visit((ParseTree)ctx.type);\n         dot.addChild((DetailAST)primaryTypeNoArray);\n-        ctx.arrayDeclarator().forEach(child -> dot.addChild((DetailAST)this.visit((ParseTree)child)));\n+        ctx.arrayDeclarator().forEach(child -> detailAstImpl.addChild((DetailAST)this.visit((ParseTree)child)));\n         dot.addChild((DetailAST)this.create(ctx.LITERAL_CLASS()));\n         return dot;\n     }\n     \n     public DetailAstImpl visitCreator(final JavaLanguageParser.CreatorContext ctx) {\n         return this.flattenedTree((ParserRuleContext)ctx);\n     }\n@@ -1508,18 +1512,18 @@\n         this.processChildren(dummyNode, ctx.children);\n         return dummyNode.getFirstChild();\n     }\n     \n     private void processChildren(final DetailAstImpl parent, final List<? extends ParseTree> children) {\n         children.forEach(child -> {\n             if (child instanceof TerminalNode) {\n-                parent.addChild((DetailAST)this.create((TerminalNode)child));\n+                detailAstImpl.addChild((DetailAST)this.create((TerminalNode)child));\n             }\n             else {\n-                parent.addChild((DetailAST)this.visit(child));\n+                detailAstImpl.addChild((DetailAST)this.visit(child));\n             }\n         });\n     }\n     \n     private static DetailAstImpl createImaginary(final int tokenType) {\n         final DetailAstImpl detailAst = new DetailAstImpl();\n         detailAst.setType(tokenType);\n@@ -1591,12 +1595,8 @@\n         }\n         else {\n             exprRoot = createImaginary(28);\n             exprRoot.addChild((DetailAST)expression);\n         }\n         return exprRoot;\n     }\n-    \n-    static {\n-        EXPRESSIONS_WITH_NO_EXPR_ROOT = new int[] { 43, 42, 181 };\n-    }\n }\n"}]}
