{"diffoscope-json-version": 1, "source1": "first/FTPTimestampParserImpl.class", "source2": "second/FTPTimestampParserImpl.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -16,129 +16,124 @@\n     private SimpleDateFormat defaultDateFormat;\n     private int defaultDateSmallestUnitIndex;\n     private SimpleDateFormat recentDateFormat;\n     private int recentDateSmallestUnitIndex;\n     private boolean lenientFutureDates;\n     private static final int[] CALENDAR_UNITS;\n     \n-    private static int getEntry(final SimpleDateFormat dateFormat) {\n-        if (dateFormat == null) {\n+    private static int getEntry(final SimpleDateFormat simpleDateFormat) {\n+        if (simpleDateFormat == null) {\n             return 0;\n         }\n-        final String FORMAT_CHARS = \"SsmHdM\";\n-        final String pattern = dateFormat.toPattern();\n+        final String pattern = simpleDateFormat.toPattern();\n         for (final char ch : \"SsmHdM\".toCharArray()) {\n             if (pattern.indexOf(ch) != -1) {\n                 switch (ch) {\n-                    case 'S': {\n+                    case 83: {\n                         return indexOf(14);\n                     }\n-                    case 's': {\n+                    case 115: {\n                         return indexOf(13);\n                     }\n-                    case 'm': {\n+                    case 109: {\n                         return indexOf(12);\n                     }\n-                    case 'H': {\n+                    case 72: {\n                         return indexOf(11);\n                     }\n-                    case 'd': {\n+                    case 100: {\n                         return indexOf(5);\n                     }\n-                    case 'M': {\n+                    case 77: {\n                         return indexOf(2);\n                     }\n                 }\n             }\n         }\n         return 0;\n     }\n     \n-    private static int indexOf(final int calendarUnit) {\n+    private static int indexOf(final int n) {\n         for (int i = 0; i < FTPTimestampParserImpl.CALENDAR_UNITS.length; ++i) {\n-            if (calendarUnit == FTPTimestampParserImpl.CALENDAR_UNITS[i]) {\n+            if (n == FTPTimestampParserImpl.CALENDAR_UNITS[i]) {\n                 return i;\n             }\n         }\n         return 0;\n     }\n     \n-    private static void setPrecision(final int index, final Calendar working) {\n-        if (index <= 0) {\n+    private static void setPrecision(final int n, final Calendar calendar) {\n+        if (n <= 0) {\n             return;\n         }\n-        final int field = FTPTimestampParserImpl.CALENDAR_UNITS[index - 1];\n-        final int value = working.get(field);\n-        if (value == 0) {\n-            working.clear(field);\n+        final int n2 = FTPTimestampParserImpl.CALENDAR_UNITS[n - 1];\n+        if (calendar.get(n2) == 0) {\n+            calendar.clear(n2);\n         }\n     }\n     \n     public FTPTimestampParserImpl() {\n         this.lenientFutureDates = false;\n         this.setDefaultDateFormat(\"MMM d yyyy\", null);\n         this.setRecentDateFormat(\"MMM d HH:mm\", null);\n     }\n     \n-    public Calendar parseTimestamp(final String timestampStr) throws ParseException {\n-        final Calendar now = Calendar.getInstance();\n-        return this.parseTimestamp(timestampStr, now);\n+    public Calendar parseTimestamp(final String s) throws ParseException {\n+        return this.parseTimestamp(s, Calendar.getInstance());\n     }\n     \n-    public Calendar parseTimestamp(final String timestampStr, final Calendar serverTime) throws ParseException {\n-        final Calendar working = (Calendar)serverTime.clone();\n-        working.setTimeZone(this.getServerTimeZone());\n-        Date parsed = null;\n+    public Calendar parseTimestamp(final String str, final Calendar calendar) throws ParseException {\n+        final Calendar calendar2 = (Calendar)calendar.clone();\n+        calendar2.setTimeZone(this.getServerTimeZone());\n         if (this.recentDateFormat != null) {\n-            final Calendar now = (Calendar)serverTime.clone();\n-            now.setTimeZone(this.getServerTimeZone());\n+            final Calendar when = (Calendar)calendar.clone();\n+            when.setTimeZone(this.getServerTimeZone());\n             if (this.lenientFutureDates) {\n-                now.add(5, 1);\n+                when.add(5, 1);\n             }\n-            final String year = Integer.toString(now.get(1));\n-            final String timeStampStrPlusYear = timestampStr + \" \" + year;\n-            final SimpleDateFormat hackFormatter = new SimpleDateFormat(this.recentDateFormat.toPattern() + \" yyyy\", this.recentDateFormat.getDateFormatSymbols());\n-            hackFormatter.setLenient(false);\n-            hackFormatter.setTimeZone(this.recentDateFormat.getTimeZone());\n-            final ParsePosition pp = new ParsePosition(0);\n-            parsed = hackFormatter.parse(timeStampStrPlusYear, pp);\n-            if (parsed != null && pp.getIndex() == timeStampStrPlusYear.length()) {\n-                working.setTime(parsed);\n-                if (working.after(now)) {\n-                    working.add(1, -1);\n+            final String string = str + \" \" + Integer.toString(when.get(1));\n+            final SimpleDateFormat simpleDateFormat = new SimpleDateFormat(this.recentDateFormat.toPattern() + \" yyyy\", this.recentDateFormat.getDateFormatSymbols());\n+            simpleDateFormat.setLenient(false);\n+            simpleDateFormat.setTimeZone(this.recentDateFormat.getTimeZone());\n+            final ParsePosition pos = new ParsePosition(0);\n+            final Date parse = simpleDateFormat.parse(string, pos);\n+            if (parse != null && pos.getIndex() == string.length()) {\n+                calendar2.setTime(parse);\n+                if (calendar2.after(when)) {\n+                    calendar2.add(1, -1);\n                 }\n-                setPrecision(this.recentDateSmallestUnitIndex, working);\n-                return working;\n+                setPrecision(this.recentDateSmallestUnitIndex, calendar2);\n+                return calendar2;\n             }\n         }\n-        final ParsePosition pp2 = new ParsePosition(0);\n-        parsed = this.defaultDateFormat.parse(timestampStr, pp2);\n-        if (parsed != null && pp2.getIndex() == timestampStr.length()) {\n-            working.setTime(parsed);\n-            setPrecision(this.defaultDateSmallestUnitIndex, working);\n-            return working;\n+        final ParsePosition pos2 = new ParsePosition(0);\n+        final Date parse2 = this.defaultDateFormat.parse(str, pos2);\n+        if (parse2 != null && pos2.getIndex() == str.length()) {\n+            calendar2.setTime(parse2);\n+            setPrecision(this.defaultDateSmallestUnitIndex, calendar2);\n+            return calendar2;\n         }\n-        throw new ParseException(\"Timestamp '\" + timestampStr + \"' could not be parsed using a server time of \" + serverTime.getTime().toString(), pp2.getErrorIndex());\n+        throw new ParseException(\"Timestamp '\" + str + \"' could not be parsed using a server time of \" + calendar.getTime().toString(), pos2.getErrorIndex());\n     }\n     \n     public SimpleDateFormat getDefaultDateFormat() {\n         return this.defaultDateFormat;\n     }\n     \n     public String getDefaultDateFormatString() {\n         return this.defaultDateFormat.toPattern();\n     }\n     \n-    private void setDefaultDateFormat(final String format, final DateFormatSymbols dfs) {\n-        if (format != null) {\n-            if (dfs != null) {\n-                this.defaultDateFormat = new SimpleDateFormat(format, dfs);\n+    private void setDefaultDateFormat(final String s, final DateFormatSymbols formatSymbols) {\n+        if (s != null) {\n+            if (formatSymbols != null) {\n+                this.defaultDateFormat = new SimpleDateFormat(s, formatSymbols);\n             }\n             else {\n-                this.defaultDateFormat = new SimpleDateFormat(format);\n+                this.defaultDateFormat = new SimpleDateFormat(s);\n             }\n             this.defaultDateFormat.setLenient(false);\n         }\n         else {\n             this.defaultDateFormat = null;\n         }\n         this.defaultDateSmallestUnitIndex = getEntry(this.defaultDateFormat);\n@@ -148,21 +143,21 @@\n         return this.recentDateFormat;\n     }\n     \n     public String getRecentDateFormatString() {\n         return this.recentDateFormat.toPattern();\n     }\n     \n-    private void setRecentDateFormat(final String format, final DateFormatSymbols dfs) {\n-        if (format != null) {\n-            if (dfs != null) {\n-                this.recentDateFormat = new SimpleDateFormat(format, dfs);\n+    private void setRecentDateFormat(final String s, final DateFormatSymbols formatSymbols) {\n+        if (s != null) {\n+            if (formatSymbols != null) {\n+                this.recentDateFormat = new SimpleDateFormat(s, formatSymbols);\n             }\n             else {\n-                this.recentDateFormat = new SimpleDateFormat(format);\n+                this.recentDateFormat = new SimpleDateFormat(s);\n             }\n             this.recentDateFormat.setLenient(false);\n         }\n         else {\n             this.recentDateFormat = null;\n         }\n         this.recentDateSmallestUnitIndex = getEntry(this.recentDateFormat);\n@@ -172,47 +167,46 @@\n         return this.defaultDateFormat.getDateFormatSymbols().getShortMonths();\n     }\n     \n     public TimeZone getServerTimeZone() {\n         return this.defaultDateFormat.getTimeZone();\n     }\n     \n-    private void setServerTimeZone(final String serverTimeZoneId) {\n-        TimeZone serverTimeZone = TimeZone.getDefault();\n-        if (serverTimeZoneId != null) {\n-            serverTimeZone = TimeZone.getTimeZone(serverTimeZoneId);\n+    private void setServerTimeZone(final String id) {\n+        TimeZone timeZone = TimeZone.getDefault();\n+        if (id != null) {\n+            timeZone = TimeZone.getTimeZone(id);\n         }\n-        this.defaultDateFormat.setTimeZone(serverTimeZone);\n+        this.defaultDateFormat.setTimeZone(timeZone);\n         if (this.recentDateFormat != null) {\n-            this.recentDateFormat.setTimeZone(serverTimeZone);\n+            this.recentDateFormat.setTimeZone(timeZone);\n         }\n     }\n     \n-    public void configure(final FTPClientConfig config) {\n-        DateFormatSymbols dfs = null;\n-        final String languageCode = config.getServerLanguageCode();\n-        final String shortmonths = config.getShortMonthNames();\n-        if (shortmonths != null) {\n-            dfs = FTPClientConfig.getDateFormatSymbols(shortmonths);\n+    public void configure(final FTPClientConfig ftpClientConfig) {\n+        final String serverLanguageCode = ftpClientConfig.getServerLanguageCode();\n+        final String shortMonthNames = ftpClientConfig.getShortMonthNames();\n+        DateFormatSymbols dateFormatSymbols;\n+        if (shortMonthNames != null) {\n+            dateFormatSymbols = FTPClientConfig.getDateFormatSymbols(shortMonthNames);\n         }\n-        else if (languageCode != null) {\n-            dfs = FTPClientConfig.lookupDateFormatSymbols(languageCode);\n+        else if (serverLanguageCode != null) {\n+            dateFormatSymbols = FTPClientConfig.lookupDateFormatSymbols(serverLanguageCode);\n         }\n         else {\n-            dfs = FTPClientConfig.lookupDateFormatSymbols(\"en\");\n+            dateFormatSymbols = FTPClientConfig.lookupDateFormatSymbols(\"en\");\n         }\n-        final String recentFormatString = config.getRecentDateFormatStr();\n-        this.setRecentDateFormat(recentFormatString, dfs);\n-        final String defaultFormatString = config.getDefaultDateFormatStr();\n-        if (defaultFormatString == null) {\n+        this.setRecentDateFormat(ftpClientConfig.getRecentDateFormatStr(), dateFormatSymbols);\n+        final String defaultDateFormatStr = ftpClientConfig.getDefaultDateFormatStr();\n+        if (defaultDateFormatStr == null) {\n             throw new IllegalArgumentException(\"defaultFormatString cannot be null\");\n         }\n-        this.setDefaultDateFormat(defaultFormatString, dfs);\n-        this.setServerTimeZone(config.getServerTimeZoneId());\n-        this.lenientFutureDates = config.isLenientFutureDates();\n+        this.setDefaultDateFormat(defaultDateFormatStr, dateFormatSymbols);\n+        this.setServerTimeZone(ftpClientConfig.getServerTimeZoneId());\n+        this.lenientFutureDates = ftpClientConfig.isLenientFutureDates();\n     }\n     \n     boolean isLenientFutureDates() {\n         return this.lenientFutureDates;\n     }\n     \n     void setLenientFutureDates(final boolean lenientFutureDates) {\n"}]}
