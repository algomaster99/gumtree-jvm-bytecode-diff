{"diffoscope-json-version": 1, "source1": "first/Class2HTML.class", "source2": "second/Class2HTML.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -23,150 +23,141 @@\n     private static String classPackage;\n     private static String className;\n     private static ConstantPool constantPool;\n     private static final Set<String> basicTypes;\n     private final JavaClass javaClass;\n     private final String dir;\n     \n-    public static void main(final String[] argv) throws IOException {\n-        final String[] fileName = new String[argv.length];\n-        int files = 0;\n-        ClassParser parser = null;\n-        JavaClass javaClass = null;\n-        String zipFile = null;\n-        final char sep = File.separatorChar;\n-        String dir = \".\" + sep;\n-        for (int i = 0; i < argv.length; ++i) {\n-            if (argv[i].charAt(0) == '-') {\n-                if (argv[i].equals(\"-d\")) {\n-                    dir = argv[++i];\n-                    if (!dir.endsWith(\"\" + sep)) {\n-                        dir += sep;\n+    public static void main(final String[] array) throws IOException {\n+        final String[] array2 = new String[array.length];\n+        int n = 0;\n+        String s = null;\n+        final char separatorChar = File.separatorChar;\n+        String str = \".\" + separatorChar;\n+        for (int i = 0; i < array.length; ++i) {\n+            if (array[i].charAt(0) == '-') {\n+                if (array[i].equals(\"-d\")) {\n+                    str = array[++i];\n+                    if (!str.endsWith(\"\" + separatorChar)) {\n+                        str += separatorChar;\n                     }\n-                    final File store = new File(dir);\n-                    if (!store.isDirectory()) {\n-                        final boolean created = store.mkdirs();\n-                        if (!created && !store.isDirectory()) {\n-                            System.out.println(\"Tried to create the directory \" + dir + \" but failed\");\n-                        }\n+                    final File file = new File(str);\n+                    if (!file.isDirectory() && !file.mkdirs() && !file.isDirectory()) {\n+                        System.out.println(\"Tried to create the directory \" + str + \" but failed\");\n                     }\n                 }\n-                else if (argv[i].equals(\"-zip\")) {\n-                    zipFile = argv[++i];\n+                else if (array[i].equals(\"-zip\")) {\n+                    s = array[++i];\n                 }\n                 else {\n-                    System.out.println(\"Unknown option \" + argv[i]);\n+                    System.out.println(\"Unknown option \" + array[i]);\n                 }\n             }\n             else {\n-                fileName[files++] = argv[i];\n+                array2[n++] = array[i];\n             }\n         }\n-        if (files == 0) {\n+        if (n == 0) {\n             System.err.println(\"Class2HTML: No input files specified.\");\n         }\n         else {\n-            for (int i = 0; i < files; ++i) {\n-                System.out.print(\"Processing \" + fileName[i] + \"...\");\n-                if (zipFile == null) {\n-                    parser = new ClassParser(fileName[i]);\n+            for (int j = 0; j < n; ++j) {\n+                System.out.print(\"Processing \" + array2[j] + \"...\");\n+                ClassParser classParser;\n+                if (s == null) {\n+                    classParser = new ClassParser(array2[j]);\n                 }\n                 else {\n-                    parser = new ClassParser(zipFile, fileName[i]);\n+                    classParser = new ClassParser(s, array2[j]);\n                 }\n-                javaClass = parser.parse();\n-                new Class2HTML(javaClass, dir);\n+                new Class2HTML(classParser.parse(), str);\n                 System.out.println(\"Done.\");\n             }\n         }\n     }\n     \n-    static String referenceClass(final int index) {\n-        String str = Class2HTML.constantPool.getConstantString(index, (byte)7);\n-        str = Utility.compactClassName(str);\n-        str = Utility.compactClassName(str, Class2HTML.classPackage + \".\", true);\n-        return \"<A HREF=\\\"\" + Class2HTML.className + \"_cp.html#cp\" + index + \"\\\" TARGET=ConstantPool>\" + str + \"</A>\";\n+    static String referenceClass(final int i) {\n+        return \"<A HREF=\\\"\" + Class2HTML.className + \"_cp.html#cp\" + i + \"\\\" TARGET=ConstantPool>\" + Utility.compactClassName(Utility.compactClassName(Class2HTML.constantPool.getConstantString(i, (byte)7)), Class2HTML.classPackage + \".\", true) + \"</A>\";\n     }\n     \n-    static String referenceType(final String type) {\n-        String shortType = Utility.compactClassName(type);\n-        shortType = Utility.compactClassName(shortType, Class2HTML.classPackage + \".\", true);\n-        final int index = type.indexOf(91);\n-        String baseType = type;\n+    static String referenceType(final String str) {\n+        final String compactClassName = Utility.compactClassName(Utility.compactClassName(str), Class2HTML.classPackage + \".\", true);\n+        final int index = str.indexOf(91);\n+        String substring = str;\n         if (index > -1) {\n-            baseType = type.substring(0, index);\n+            substring = str.substring(0, index);\n         }\n-        if (Class2HTML.basicTypes.contains(baseType)) {\n-            return \"<FONT COLOR=\\\"#00FF00\\\">\" + type + \"</FONT>\";\n+        if (Class2HTML.basicTypes.contains(substring)) {\n+            return \"<FONT COLOR=\\\"#00FF00\\\">\" + str + \"</FONT>\";\n         }\n-        return \"<A HREF=\\\"\" + baseType + \".html\\\" TARGET=_top>\" + shortType + \"</A>\";\n+        return \"<A HREF=\\\"\" + substring + \".html\\\" TARGET=_top>\" + compactClassName + \"</A>\";\n     }\n     \n-    static String toHTML(final String str) {\n-        final StringBuilder buf = new StringBuilder();\n-        for (int i = 0; i < str.length(); ++i) {\n-            final char ch;\n-            switch (ch = str.charAt(i)) {\n+    static String toHTML(final String s) {\n+        final StringBuilder sb = new StringBuilder();\n+        for (int i = 0; i < s.length(); ++i) {\n+            final char char1;\n+            switch (char1 = s.charAt(i)) {\n                 case '<': {\n-                    buf.append(\"&lt;\");\n+                    sb.append(\"&lt;\");\n                     break;\n                 }\n                 case '>': {\n-                    buf.append(\"&gt;\");\n+                    sb.append(\"&gt;\");\n                     break;\n                 }\n                 case '\\n': {\n-                    buf.append(\"\\\\n\");\n+                    sb.append(\"\\\\n\");\n                     break;\n                 }\n                 case '\\r': {\n-                    buf.append(\"\\\\r\");\n+                    sb.append(\"\\\\r\");\n                     break;\n                 }\n                 default: {\n-                    buf.append(ch);\n+                    sb.append(char1);\n                     break;\n                 }\n             }\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n     \n-    public Class2HTML(final JavaClass javaClass, final String dir) throws IOException {\n-        this(javaClass, dir, StandardCharsets.UTF_8);\n+    public Class2HTML(final JavaClass javaClass, final String s) throws IOException {\n+        this(javaClass, s, StandardCharsets.UTF_8);\n     }\n     \n     private Class2HTML(final JavaClass javaClass, final String dir, final Charset charset) throws IOException {\n         final Method[] methods = javaClass.getMethods();\n         this.javaClass = javaClass;\n         this.dir = dir;\n         Class2HTML.className = javaClass.getClassName();\n         Class2HTML.constantPool = javaClass.getConstantPool();\n-        final int index = Class2HTML.className.lastIndexOf(46);\n-        if (index > -1) {\n-            Class2HTML.classPackage = Class2HTML.className.substring(0, index);\n+        final int lastIndex = Class2HTML.className.lastIndexOf(46);\n+        if (lastIndex > -1) {\n+            Class2HTML.classPackage = Class2HTML.className.substring(0, lastIndex);\n         }\n         else {\n             Class2HTML.classPackage = \"\";\n         }\n-        final ConstantHTML constantHtml = new ConstantHTML(dir, Class2HTML.className, Class2HTML.classPackage, methods, Class2HTML.constantPool, charset);\n-        try (final AttributeHTML attributeHtml = new AttributeHTML(dir, Class2HTML.className, Class2HTML.constantPool, constantHtml, charset)) {\n-            new MethodHTML(dir, Class2HTML.className, methods, javaClass.getFields(), constantHtml, attributeHtml, charset);\n-            this.writeMainHTML(attributeHtml, charset);\n-            new CodeHTML(dir, Class2HTML.className, methods, Class2HTML.constantPool, constantHtml, charset);\n+        final ConstantHTML constantHTML = new ConstantHTML(dir, Class2HTML.className, Class2HTML.classPackage, methods, Class2HTML.constantPool, charset);\n+        try (final AttributeHTML attributeHTML = new AttributeHTML(dir, Class2HTML.className, Class2HTML.constantPool, constantHTML, charset)) {\n+            new MethodHTML(dir, Class2HTML.className, methods, javaClass.getFields(), constantHTML, attributeHTML, charset);\n+            this.writeMainHTML(attributeHTML, charset);\n+            new CodeHTML(dir, Class2HTML.className, methods, Class2HTML.constantPool, constantHTML, charset);\n         }\n     }\n     \n-    private void writeMainHTML(final AttributeHTML attributeHtml, final Charset charset) throws FileNotFoundException, UnsupportedEncodingException {\n-        try (final PrintWriter file = new PrintWriter(this.dir + Class2HTML.className + \".html\", charset.name())) {\n-            file.println(\"<HTML>\\n<HEAD><TITLE>Documentation for \" + Class2HTML.className + \"</TITLE></HEAD>\\n<FRAMESET BORDER=1 cols=\\\"30%,*\\\">\\n<FRAMESET BORDER=1 rows=\\\"80%,*\\\">\\n<FRAME NAME=\\\"ConstantPool\\\" SRC=\\\"\" + Class2HTML.className + \"_cp.html\\\"\\n MARGINWIDTH=\\\"0\\\" MARGINHEIGHT=\\\"0\\\" FRAMEBORDER=\\\"1\\\" SCROLLING=\\\"AUTO\\\">\\n<FRAME NAME=\\\"Attributes\\\" SRC=\\\"\" + Class2HTML.className + \"_attributes.html\\\"\\n MARGINWIDTH=\\\"0\\\" MARGINHEIGHT=\\\"0\\\" FRAMEBORDER=\\\"1\\\" SCROLLING=\\\"AUTO\\\">\\n</FRAMESET>\\n<FRAMESET BORDER=1 rows=\\\"80%,*\\\">\\n<FRAME NAME=\\\"Code\\\" SRC=\\\"\" + Class2HTML.className + \"_code.html\\\"\\n MARGINWIDTH=0 MARGINHEIGHT=0 FRAMEBORDER=1 SCROLLING=\\\"AUTO\\\">\\n<FRAME NAME=\\\"Methods\\\" SRC=\\\"\" + Class2HTML.className + \"_methods.html\\\"\\n MARGINWIDTH=0 MARGINHEIGHT=0 FRAMEBORDER=1 SCROLLING=\\\"AUTO\\\">\\n</FRAMESET></FRAMESET></HTML>\");\n+    private void writeMainHTML(final AttributeHTML attributeHTML, final Charset charset) throws FileNotFoundException, UnsupportedEncodingException {\n+        try (final PrintWriter printWriter = new PrintWriter(this.dir + Class2HTML.className + \".html\", charset.name())) {\n+            printWriter.println(\"<HTML>\\n<HEAD><TITLE>Documentation for \" + Class2HTML.className + \"</TITLE></HEAD>\\n<FRAMESET BORDER=1 cols=\\\"30%,*\\\">\\n<FRAMESET BORDER=1 rows=\\\"80%,*\\\">\\n<FRAME NAME=\\\"ConstantPool\\\" SRC=\\\"\" + Class2HTML.className + \"_cp.html\\\"\\n MARGINWIDTH=\\\"0\\\" MARGINHEIGHT=\\\"0\\\" FRAMEBORDER=\\\"1\\\" SCROLLING=\\\"AUTO\\\">\\n<FRAME NAME=\\\"Attributes\\\" SRC=\\\"\" + Class2HTML.className + \"_attributes.html\\\"\\n MARGINWIDTH=\\\"0\\\" MARGINHEIGHT=\\\"0\\\" FRAMEBORDER=\\\"1\\\" SCROLLING=\\\"AUTO\\\">\\n</FRAMESET>\\n<FRAMESET BORDER=1 rows=\\\"80%,*\\\">\\n<FRAME NAME=\\\"Code\\\" SRC=\\\"\" + Class2HTML.className + \"_code.html\\\"\\n MARGINWIDTH=0 MARGINHEIGHT=0 FRAMEBORDER=1 SCROLLING=\\\"AUTO\\\">\\n<FRAME NAME=\\\"Methods\\\" SRC=\\\"\" + Class2HTML.className + \"_methods.html\\\"\\n MARGINWIDTH=0 MARGINHEIGHT=0 FRAMEBORDER=1 SCROLLING=\\\"AUTO\\\">\\n</FRAMESET></FRAMESET></HTML>\");\n         }\n         final Attribute[] attributes = this.javaClass.getAttributes();\n         for (int i = 0; i < attributes.length; ++i) {\n-            attributeHtml.writeAttribute(attributes[i], \"class\" + i);\n+            attributeHTML.writeAttribute(attributes[i], \"class\" + i);\n         }\n     }\n     \n     static {\n         (basicTypes = new HashSet<String>()).add(\"int\");\n         Class2HTML.basicTypes.add(\"short\");\n         Class2HTML.basicTypes.add(\"boolean\");\n"}]}
