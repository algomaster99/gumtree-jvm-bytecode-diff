{"diffoscope-json-version": 1, "source1": "first/OperandStack.class", "source2": "second/OperandStack.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -25,27 +25,22 @@\n     }\n     \n     public void clear() {\n         this.stack = new ArrayList<Type>();\n     }\n     \n     public Object clone() {\n-        final OperandStack newstack = new OperandStack(this.maxStack);\n-        final ArrayList<Type> clone = (ArrayList)this.stack.clone();\n-        newstack.stack = clone;\n-        return newstack;\n+        final OperandStack operandStack = new OperandStack(this.maxStack);\n+        operandStack.stack = (ArrayList)this.stack.clone();\n+        return operandStack;\n     }\n     \n     @Override\n     public boolean equals(final Object o) {\n-        if (!(o instanceof OperandStack)) {\n-            return false;\n-        }\n-        final OperandStack s = (OperandStack)o;\n-        return this.stack.equals(s.stack);\n+        return o instanceof OperandStack && this.stack.equals(((OperandStack)o).stack);\n     }\n     \n     public OperandStack getClone() {\n         return (OperandStack)this.clone();\n     }\n     \n     @Override\n@@ -88,16 +83,16 @@\n                     if (!(this.stack.get(i) instanceof ReferenceType) || !(s.stack.get(i) instanceof ReferenceType)) {\n                         throw new StructuralCodeConstraintException(\"Cannot merge stacks of different types:\\nStack A:\\n\" + this + \"\\nStack B:\\n\" + s);\n                     }\n                     this.stack.set(i, (Type)((ReferenceType)this.stack.get(i)).getFirstCommonSuperclass((ReferenceType)s.stack.get(i)));\n                 }\n             }\n         }\n-        catch (final ClassNotFoundException e) {\n-            throw new AssertionViolatedException(\"Missing class: \" + e, (Throwable)e);\n+        catch (final ClassNotFoundException obj) {\n+            throw new AssertionViolatedException(\"Missing class: \" + obj, (Throwable)obj);\n         }\n     }\n     \n     public Type peek() {\n         return this.peek(0);\n     }\n     \n@@ -106,15 +101,15 @@\n     }\n     \n     public Type pop() {\n         return this.stack.remove(this.size() - 1);\n     }\n     \n     public Type pop(final int count) {\n-        for (int j = 0; j < count; ++j) {\n+        for (int i = 0; i < count; ++i) {\n             this.pop();\n         }\n         return null;\n     }\n     \n     public void push(final Type type) {\n         if (type == null) {\n@@ -130,19 +125,19 @@\n     }\n     \n     public int size() {\n         return this.stack.size();\n     }\n     \n     public int slotsUsed() {\n-        int slots = 0;\n+        int n = 0;\n         for (int i = 0; i < this.stack.size(); ++i) {\n-            slots += this.peek(i).getSize();\n+            n += this.peek(i).getSize();\n         }\n-        return slots;\n+        return n;\n     }\n     \n     @Override\n     public String toString() {\n         final StringBuilder sb = new StringBuilder();\n         sb.append(\"Slots used: \");\n         sb.append(this.slotsUsed());\n"}]}
