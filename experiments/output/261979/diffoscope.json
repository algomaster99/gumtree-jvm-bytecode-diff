{"diffoscope-json-version": 1, "source1": "first/BooleanUtils.class", "source2": "second/BooleanUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,386 +10,383 @@\n     public static final String OFF = \"off\";\n     public static final String ON = \"on\";\n     public static final String TRUE = \"true\";\n     public static final String YES = \"yes\";\n     \n     public static boolean and(final boolean... array) {\n         ObjectUtils.requireNonEmpty((Object)array, \"array\");\n-        for (final boolean element : array) {\n-            if (!element) {\n+        for (int length = array.length, i = 0; i < length; ++i) {\n+            if (!array[i]) {\n                 return false;\n             }\n         }\n         return true;\n     }\n     \n     public static Boolean and(final Boolean... array) {\n         ObjectUtils.requireNonEmpty((Object)array, \"array\");\n         try {\n-            final boolean[] primitive = ArrayUtils.toPrimitive(array);\n-            return and(primitive) ? Boolean.TRUE : Boolean.FALSE;\n+            return and(ArrayUtils.toPrimitive(array)) ? Boolean.TRUE : Boolean.FALSE;\n         }\n         catch (final NullPointerException ex) {\n             throw new IllegalArgumentException(\"The array must not contain any null elements\");\n         }\n     }\n     \n     public static Boolean[] booleanValues() {\n         return new Boolean[] { Boolean.FALSE, Boolean.TRUE };\n     }\n     \n-    public static int compare(final boolean x, final boolean y) {\n-        if (x == y) {\n+    public static int compare(final boolean b, final boolean b2) {\n+        if (b == b2) {\n             return 0;\n         }\n-        return x ? 1 : -1;\n+        return b ? 1 : -1;\n     }\n     \n-    public static boolean isFalse(final Boolean bool) {\n-        return Boolean.FALSE.equals(bool);\n+    public static boolean isFalse(final Boolean obj) {\n+        return Boolean.FALSE.equals(obj);\n     }\n     \n-    public static boolean isNotFalse(final Boolean bool) {\n-        return !isFalse(bool);\n+    public static boolean isNotFalse(final Boolean b) {\n+        return !isFalse(b);\n     }\n     \n-    public static boolean isNotTrue(final Boolean bool) {\n-        return !isTrue(bool);\n+    public static boolean isNotTrue(final Boolean b) {\n+        return !isTrue(b);\n     }\n     \n-    public static boolean isTrue(final Boolean bool) {\n-        return Boolean.TRUE.equals(bool);\n+    public static boolean isTrue(final Boolean obj) {\n+        return Boolean.TRUE.equals(obj);\n     }\n     \n-    public static Boolean negate(final Boolean bool) {\n-        if (bool == null) {\n+    public static Boolean negate(final Boolean b) {\n+        if (b == null) {\n             return null;\n         }\n-        return ((boolean)bool) ? Boolean.FALSE : Boolean.TRUE;\n+        return ((boolean)b) ? Boolean.FALSE : Boolean.TRUE;\n     }\n     \n     public static boolean or(final boolean... array) {\n         ObjectUtils.requireNonEmpty((Object)array, \"array\");\n-        for (final boolean element : array) {\n-            if (element) {\n+        for (int length = array.length, i = 0; i < length; ++i) {\n+            if (array[i]) {\n                 return true;\n             }\n         }\n         return false;\n     }\n     \n     public static Boolean or(final Boolean... array) {\n         ObjectUtils.requireNonEmpty((Object)array, \"array\");\n         try {\n-            final boolean[] primitive = ArrayUtils.toPrimitive(array);\n-            return or(primitive) ? Boolean.TRUE : Boolean.FALSE;\n+            return or(ArrayUtils.toPrimitive(array)) ? Boolean.TRUE : Boolean.FALSE;\n         }\n         catch (final NullPointerException ex) {\n             throw new IllegalArgumentException(\"The array must not contain any null elements\");\n         }\n     }\n     \n     public static boolean[] primitiveValues() {\n         return new boolean[] { false, true };\n     }\n     \n-    public static boolean toBoolean(final Boolean bool) {\n-        return bool != null && bool;\n+    public static boolean toBoolean(final Boolean b) {\n+        return b != null && b;\n     }\n     \n-    public static boolean toBoolean(final int value) {\n-        return value != 0;\n+    public static boolean toBoolean(final int n) {\n+        return n != 0;\n     }\n     \n-    public static boolean toBoolean(final int value, final int trueValue, final int falseValue) {\n-        if (value == trueValue) {\n+    public static boolean toBoolean(final int n, final int n2, final int n3) {\n+        if (n == n2) {\n             return true;\n         }\n-        if (value == falseValue) {\n+        if (n == n3) {\n             return false;\n         }\n         throw new IllegalArgumentException(\"The Integer did not match either specified value\");\n     }\n     \n-    public static boolean toBoolean(final Integer value, final Integer trueValue, final Integer falseValue) {\n-        if (value == null) {\n-            if (trueValue == null) {\n+    public static boolean toBoolean(final Integer n, final Integer obj, final Integer obj2) {\n+        if (n == null) {\n+            if (obj == null) {\n                 return true;\n             }\n-            if (falseValue == null) {\n+            if (obj2 == null) {\n                 return false;\n             }\n         }\n         else {\n-            if (value.equals(trueValue)) {\n+            if (n.equals(obj)) {\n                 return true;\n             }\n-            if (value.equals(falseValue)) {\n+            if (n.equals(obj2)) {\n                 return false;\n             }\n         }\n         throw new IllegalArgumentException(\"The Integer did not match either specified value\");\n     }\n     \n-    public static boolean toBoolean(final String str) {\n-        return toBooleanObject(str) == Boolean.TRUE;\n+    public static boolean toBoolean(final String s) {\n+        return toBooleanObject(s) == Boolean.TRUE;\n     }\n     \n-    public static boolean toBoolean(final String str, final String trueString, final String falseString) {\n-        if (str == trueString) {\n+    public static boolean toBoolean(final String s, final String anObject, final String anObject2) {\n+        if (s == anObject) {\n             return true;\n         }\n-        if (str == falseString) {\n+        if (s == anObject2) {\n             return false;\n         }\n-        if (str != null) {\n-            if (str.equals(trueString)) {\n+        if (s != null) {\n+            if (s.equals(anObject)) {\n                 return true;\n             }\n-            if (str.equals(falseString)) {\n+            if (s.equals(anObject2)) {\n                 return false;\n             }\n         }\n         throw new IllegalArgumentException(\"The String did not match either specified value\");\n     }\n     \n-    public static boolean toBooleanDefaultIfNull(final Boolean bool, final boolean valueIfNull) {\n-        if (bool == null) {\n-            return valueIfNull;\n+    public static boolean toBooleanDefaultIfNull(final Boolean b, final boolean b2) {\n+        if (b == null) {\n+            return b2;\n         }\n-        return bool;\n+        return b;\n     }\n     \n-    public static Boolean toBooleanObject(final int value) {\n-        return (value == 0) ? Boolean.FALSE : Boolean.TRUE;\n+    public static Boolean toBooleanObject(final int n) {\n+        return (n == 0) ? Boolean.FALSE : Boolean.TRUE;\n     }\n     \n-    public static Boolean toBooleanObject(final int value, final int trueValue, final int falseValue, final int nullValue) {\n-        if (value == trueValue) {\n+    public static Boolean toBooleanObject(final int n, final int n2, final int n3, final int n4) {\n+        if (n == n2) {\n             return Boolean.TRUE;\n         }\n-        if (value == falseValue) {\n+        if (n == n3) {\n             return Boolean.FALSE;\n         }\n-        if (value == nullValue) {\n+        if (n == n4) {\n             return null;\n         }\n         throw new IllegalArgumentException(\"The Integer did not match any specified value\");\n     }\n     \n-    public static Boolean toBooleanObject(final Integer value) {\n-        if (value == null) {\n+    public static Boolean toBooleanObject(final Integer n) {\n+        if (n == null) {\n             return null;\n         }\n-        return (value == 0) ? Boolean.FALSE : Boolean.TRUE;\n+        return (n == 0) ? Boolean.FALSE : Boolean.TRUE;\n     }\n     \n-    public static Boolean toBooleanObject(final Integer value, final Integer trueValue, final Integer falseValue, final Integer nullValue) {\n-        if (value == null) {\n-            if (trueValue == null) {\n+    public static Boolean toBooleanObject(final Integer n, final Integer obj, final Integer obj2, final Integer obj3) {\n+        if (n == null) {\n+            if (obj == null) {\n                 return Boolean.TRUE;\n             }\n-            if (falseValue == null) {\n+            if (obj2 == null) {\n                 return Boolean.FALSE;\n             }\n-            if (nullValue == null) {\n+            if (obj3 == null) {\n                 return null;\n             }\n         }\n         else {\n-            if (value.equals(trueValue)) {\n+            if (n.equals(obj)) {\n                 return Boolean.TRUE;\n             }\n-            if (value.equals(falseValue)) {\n+            if (n.equals(obj2)) {\n                 return Boolean.FALSE;\n             }\n-            if (value.equals(nullValue)) {\n+            if (n.equals(obj3)) {\n                 return null;\n             }\n         }\n         throw new IllegalArgumentException(\"The Integer did not match any specified value\");\n     }\n     \n-    public static Boolean toBooleanObject(final String str) {\n-        if (str == \"true\") {\n+    public static Boolean toBooleanObject(final String s) {\n+        if (s == \"true\") {\n             return Boolean.TRUE;\n         }\n-        if (str == null) {\n+        if (s == null) {\n             return null;\n         }\n-        switch (str.length()) {\n+        switch (s.length()) {\n             case 1: {\n-                final char ch0 = str.charAt(0);\n-                if (ch0 == 'y' || ch0 == 'Y' || ch0 == 't' || ch0 == 'T' || ch0 == '1') {\n+                final char char1 = s.charAt(0);\n+                if (char1 == 'y' || char1 == 'Y' || char1 == 't' || char1 == 'T' || char1 == '1') {\n                     return Boolean.TRUE;\n                 }\n-                if (ch0 == 'n' || ch0 == 'N' || ch0 == 'f' || ch0 == 'F' || ch0 == '0') {\n+                if (char1 == 'n' || char1 == 'N' || char1 == 'f' || char1 == 'F' || char1 == '0') {\n                     return Boolean.FALSE;\n                 }\n                 break;\n             }\n             case 2: {\n-                final char ch0 = str.charAt(0);\n-                final char ch2 = str.charAt(1);\n-                if ((ch0 == 'o' || ch0 == 'O') && (ch2 == 'n' || ch2 == 'N')) {\n+                final char char2 = s.charAt(0);\n+                final char char3 = s.charAt(1);\n+                if ((char2 == 'o' || char2 == 'O') && (char3 == 'n' || char3 == 'N')) {\n                     return Boolean.TRUE;\n                 }\n-                if ((ch0 == 'n' || ch0 == 'N') && (ch2 == 'o' || ch2 == 'O')) {\n+                if ((char2 == 'n' || char2 == 'N') && (char3 == 'o' || char3 == 'O')) {\n                     return Boolean.FALSE;\n                 }\n                 break;\n             }\n             case 3: {\n-                final char ch0 = str.charAt(0);\n-                final char ch2 = str.charAt(1);\n-                final char ch3 = str.charAt(2);\n-                if ((ch0 == 'y' || ch0 == 'Y') && (ch2 == 'e' || ch2 == 'E') && (ch3 == 's' || ch3 == 'S')) {\n+                final char char4 = s.charAt(0);\n+                final char char5 = s.charAt(1);\n+                final char char6 = s.charAt(2);\n+                if ((char4 == 'y' || char4 == 'Y') && (char5 == 'e' || char5 == 'E') && (char6 == 's' || char6 == 'S')) {\n                     return Boolean.TRUE;\n                 }\n-                if ((ch0 == 'o' || ch0 == 'O') && (ch2 == 'f' || ch2 == 'F') && (ch3 == 'f' || ch3 == 'F')) {\n+                if ((char4 == 'o' || char4 == 'O') && (char5 == 'f' || char5 == 'F') && (char6 == 'f' || char6 == 'F')) {\n                     return Boolean.FALSE;\n                 }\n                 break;\n             }\n             case 4: {\n-                final char ch0 = str.charAt(0);\n-                final char ch2 = str.charAt(1);\n-                final char ch3 = str.charAt(2);\n-                final char ch4 = str.charAt(3);\n-                if ((ch0 == 't' || ch0 == 'T') && (ch2 == 'r' || ch2 == 'R') && (ch3 == 'u' || ch3 == 'U') && (ch4 == 'e' || ch4 == 'E')) {\n+                final char char7 = s.charAt(0);\n+                final char char8 = s.charAt(1);\n+                final char char9 = s.charAt(2);\n+                final char char10 = s.charAt(3);\n+                if ((char7 == 't' || char7 == 'T') && (char8 == 'r' || char8 == 'R') && (char9 == 'u' || char9 == 'U') && (char10 == 'e' || char10 == 'E')) {\n                     return Boolean.TRUE;\n                 }\n                 break;\n             }\n             case 5: {\n-                final char ch0 = str.charAt(0);\n-                final char ch2 = str.charAt(1);\n-                final char ch3 = str.charAt(2);\n-                final char ch4 = str.charAt(3);\n-                final char ch5 = str.charAt(4);\n-                if ((ch0 == 'f' || ch0 == 'F') && (ch2 == 'a' || ch2 == 'A') && (ch3 == 'l' || ch3 == 'L') && (ch4 == 's' || ch4 == 'S') && (ch5 == 'e' || ch5 == 'E')) {\n+                final char char11 = s.charAt(0);\n+                final char char12 = s.charAt(1);\n+                final char char13 = s.charAt(2);\n+                final char char14 = s.charAt(3);\n+                final char char15 = s.charAt(4);\n+                if ((char11 == 'f' || char11 == 'F') && (char12 == 'a' || char12 == 'A') && (char13 == 'l' || char13 == 'L') && (char14 == 's' || char14 == 'S') && (char15 == 'e' || char15 == 'E')) {\n                     return Boolean.FALSE;\n                 }\n                 break;\n             }\n         }\n         return null;\n     }\n     \n-    public static Boolean toBooleanObject(final String str, final String trueString, final String falseString, final String nullString) {\n-        if (str == null) {\n-            if (trueString == null) {\n+    public static Boolean toBooleanObject(final String s, final String anObject, final String anObject2, final String anObject3) {\n+        if (s == null) {\n+            if (anObject == null) {\n                 return Boolean.TRUE;\n             }\n-            if (falseString == null) {\n+            if (anObject2 == null) {\n                 return Boolean.FALSE;\n             }\n-            if (nullString == null) {\n+            if (anObject3 == null) {\n                 return null;\n             }\n         }\n         else {\n-            if (str.equals(trueString)) {\n+            if (s.equals(anObject)) {\n                 return Boolean.TRUE;\n             }\n-            if (str.equals(falseString)) {\n+            if (s.equals(anObject2)) {\n                 return Boolean.FALSE;\n             }\n-            if (str.equals(nullString)) {\n+            if (s.equals(anObject3)) {\n                 return null;\n             }\n         }\n         throw new IllegalArgumentException(\"The String did not match any specified value\");\n     }\n     \n-    public static int toInteger(final boolean bool) {\n-        return bool ? 1 : 0;\n+    public static int toInteger(final boolean b) {\n+        return b ? 1 : 0;\n     }\n     \n-    public static int toInteger(final boolean bool, final int trueValue, final int falseValue) {\n-        return bool ? trueValue : falseValue;\n+    public static int toInteger(final boolean b, final int n, final int n2) {\n+        return b ? n : n2;\n     }\n     \n-    public static int toInteger(final Boolean bool, final int trueValue, final int falseValue, final int nullValue) {\n-        if (bool == null) {\n-            return nullValue;\n+    public static int toInteger(final Boolean b, final int n, final int n2, final int n3) {\n+        if (b == null) {\n+            return n3;\n         }\n-        return ((boolean)bool) ? trueValue : falseValue;\n+        return ((boolean)b) ? n : n2;\n     }\n     \n-    public static Integer toIntegerObject(final boolean bool) {\n-        return bool ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;\n+    public static Integer toIntegerObject(final boolean b) {\n+        return b ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;\n     }\n     \n-    public static Integer toIntegerObject(final boolean bool, final Integer trueValue, final Integer falseValue) {\n-        return bool ? trueValue : falseValue;\n+    public static Integer toIntegerObject(final boolean b, final Integer n, final Integer n2) {\n+        return b ? n : n2;\n     }\n     \n-    public static Integer toIntegerObject(final Boolean bool) {\n-        if (bool == null) {\n+    public static Integer toIntegerObject(final Boolean b) {\n+        if (b == null) {\n             return null;\n         }\n-        return ((boolean)bool) ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;\n+        return ((boolean)b) ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;\n     }\n     \n-    public static Integer toIntegerObject(final Boolean bool, final Integer trueValue, final Integer falseValue, final Integer nullValue) {\n-        if (bool == null) {\n-            return nullValue;\n+    public static Integer toIntegerObject(final Boolean b, final Integer n, final Integer n2, final Integer n3) {\n+        if (b == null) {\n+            return n3;\n         }\n-        return ((boolean)bool) ? trueValue : falseValue;\n+        return ((boolean)b) ? n : n2;\n     }\n     \n-    public static String toString(final boolean bool, final String trueString, final String falseString) {\n-        return bool ? trueString : falseString;\n+    public static String toString(final boolean b, final String s, final String s2) {\n+        return b ? s : s2;\n     }\n     \n-    public static String toString(final Boolean bool, final String trueString, final String falseString, final String nullString) {\n-        if (bool == null) {\n-            return nullString;\n+    public static String toString(final Boolean b, final String s, final String s2, final String s3) {\n+        if (b == null) {\n+            return s3;\n         }\n-        return ((boolean)bool) ? trueString : falseString;\n+        return ((boolean)b) ? s : s2;\n     }\n     \n-    public static String toStringOnOff(final boolean bool) {\n-        return toString(bool, \"on\", \"off\");\n+    public static String toStringOnOff(final boolean b) {\n+        return toString(b, \"on\", \"off\");\n     }\n     \n-    public static String toStringOnOff(final Boolean bool) {\n-        return toString(bool, \"on\", \"off\", null);\n+    public static String toStringOnOff(final Boolean b) {\n+        return toString(b, \"on\", \"off\", null);\n     }\n     \n-    public static String toStringTrueFalse(final boolean bool) {\n-        return toString(bool, \"true\", \"false\");\n+    public static String toStringTrueFalse(final boolean b) {\n+        return toString(b, \"true\", \"false\");\n     }\n     \n-    public static String toStringTrueFalse(final Boolean bool) {\n-        return toString(bool, \"true\", \"false\", null);\n+    public static String toStringTrueFalse(final Boolean b) {\n+        return toString(b, \"true\", \"false\", null);\n     }\n     \n-    public static String toStringYesNo(final boolean bool) {\n-        return toString(bool, \"yes\", \"no\");\n+    public static String toStringYesNo(final boolean b) {\n+        return toString(b, \"yes\", \"no\");\n     }\n     \n-    public static String toStringYesNo(final Boolean bool) {\n-        return toString(bool, \"yes\", \"no\", null);\n+    public static String toStringYesNo(final Boolean b) {\n+        return toString(b, \"yes\", \"no\", null);\n     }\n     \n     public static boolean xor(final boolean... array) {\n         ObjectUtils.requireNonEmpty((Object)array, \"array\");\n-        boolean result = false;\n-        for (final boolean element : array) {\n-            result ^= element;\n+        boolean b = false;\n+        for (int length = array.length, i = 0; i < length; ++i) {\n+            b ^= array[i];\n         }\n-        return result;\n+        return b;\n     }\n     \n     public static Boolean xor(final Boolean... array) {\n         ObjectUtils.requireNonEmpty((Object)array, \"array\");\n         try {\n-            final boolean[] primitive = ArrayUtils.toPrimitive(array);\n-            return xor(primitive) ? Boolean.TRUE : Boolean.FALSE;\n+            return xor(ArrayUtils.toPrimitive(array)) ? Boolean.TRUE : Boolean.FALSE;\n         }\n         catch (final NullPointerException ex) {\n             throw new IllegalArgumentException(\"The array must not contain any null elements\");\n         }\n     }\n }\n"}]}
