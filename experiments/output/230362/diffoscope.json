{"diffoscope-json-version": 1, "source1": "first/ClassFile.class", "source2": "second/ClassFile.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,40 +18,40 @@\n     public ClassFileEntry[] methods;\n     public Attribute[] attributes;\n     \n     public ClassFile() {\n         this.pool = new ClassConstantPool();\n     }\n     \n-    public void write(final DataOutputStream dos) throws IOException {\n-        dos.writeInt(-889275714);\n-        dos.writeShort(this.minor);\n-        dos.writeShort(this.major);\n-        dos.writeShort(this.pool.size() + 1);\n+    public void write(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeInt(-889275714);\n+        dataOutputStream.writeShort(this.minor);\n+        dataOutputStream.writeShort(this.major);\n+        dataOutputStream.writeShort(this.pool.size() + 1);\n         for (int i = 1; i <= this.pool.size(); ++i) {\n-            final ConstantPoolEntry entry;\n-            (entry = (ConstantPoolEntry)this.pool.get(i)).doWrite(dos);\n-            if (entry.getTag() == 6 || entry.getTag() == 5) {\n+            final ConstantPoolEntry constantPoolEntry;\n+            (constantPoolEntry = (ConstantPoolEntry)this.pool.get(i)).doWrite(dataOutputStream);\n+            if (constantPoolEntry.getTag() == 6 || constantPoolEntry.getTag() == 5) {\n                 ++i;\n             }\n         }\n-        dos.writeShort(this.accessFlags);\n-        dos.writeShort(this.thisClass);\n-        dos.writeShort(this.superClass);\n-        dos.writeShort(this.interfaces.length);\n-        for (int i = 0; i < this.interfaces.length; ++i) {\n-            dos.writeShort(this.interfaces[i]);\n+        dataOutputStream.writeShort(this.accessFlags);\n+        dataOutputStream.writeShort(this.thisClass);\n+        dataOutputStream.writeShort(this.superClass);\n+        dataOutputStream.writeShort(this.interfaces.length);\n+        for (int j = 0; j < this.interfaces.length; ++j) {\n+            dataOutputStream.writeShort(this.interfaces[j]);\n         }\n-        dos.writeShort(this.fields.length);\n-        for (int i = 0; i < this.fields.length; ++i) {\n-            this.fields[i].write(dos);\n+        dataOutputStream.writeShort(this.fields.length);\n+        for (int k = 0; k < this.fields.length; ++k) {\n+            this.fields[k].write(dataOutputStream);\n         }\n-        dos.writeShort(this.methods.length);\n-        for (int i = 0; i < this.methods.length; ++i) {\n-            this.methods[i].write(dos);\n+        dataOutputStream.writeShort(this.methods.length);\n+        for (int l = 0; l < this.methods.length; ++l) {\n+            this.methods[l].write(dataOutputStream);\n         }\n-        dos.writeShort(this.attributes.length);\n-        for (int i = 0; i < this.attributes.length; ++i) {\n-            this.attributes[i].write(dos);\n+        dataOutputStream.writeShort(this.attributes.length);\n+        for (int n = 0; n < this.attributes.length; ++n) {\n+            this.attributes[n].write(dataOutputStream);\n         }\n     }\n }\n"}]}
