{"diffoscope-json-version": 1, "source1": "first/XMLPropertiesConfiguration.class", "source2": "second/XMLPropertiesConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -49,15 +49,15 @@\n         final SAXParserFactory factory = SAXParserFactory.newInstance();\n         factory.setNamespaceAware(false);\n         factory.setValidating(true);\n         try {\n             final SAXParser parser = factory.newSAXParser();\n             final XMLReader xmlReader = parser.getXMLReader();\n             xmlReader.setEntityResolver((publicId, systemId) -> new InputSource(this.getClass().getClassLoader().getResourceAsStream(\"properties.dtd\")));\n-            xmlReader.setContentHandler((ContentHandler)new XMLPropertiesConfiguration.XMLPropertiesHandler(this, (XMLPropertiesConfiguration.XMLPropertiesConfiguration$1)null));\n+            xmlReader.setContentHandler((ContentHandler)new XMLPropertiesConfiguration.XMLPropertiesHandler(this, (XMLPropertiesConfiguration.XMLPropertiesHandler)null));\n             xmlReader.parse(new InputSource(in));\n         }\n         catch (final Exception e) {\n             throw new ConfigurationException(\"Unable to parse the configuration file\", (Throwable)e);\n         }\n     }\n     \n@@ -118,15 +118,15 @@\n         }\n         else {\n             out.println(\"  <entry key=\\\"\" + k + \"\\\"/>\");\n         }\n     }\n     \n     private void writeProperty(final PrintWriter out, final String key, final List<?> values) {\n-        values.forEach(value -> this.writeProperty(out, key, value));\n+        values.forEach(value -> this.writeProperty(out2, key2, value));\n     }\n     \n     public void save(final Document document, final Node parent) {\n         final Element properties = document.createElement(\"properties\");\n         parent.appendChild(properties);\n         if (this.getHeader() != null) {\n             final Element comment = document.createElement(\"comment\");\n@@ -158,15 +158,15 @@\n         if (value != null) {\n             final String v = this.escapeValue(value);\n             entry.setTextContent(v);\n         }\n     }\n     \n     private void writeProperty(final Document document, final Node properties, final String key, final List<?> values) {\n-        values.forEach(value -> this.writeProperty(document, properties, key, value));\n+        values.forEach(value -> this.writeProperty(document2, properties2, key2, value));\n     }\n     \n     private String escapeValue(final Object value) {\n         final String v = StringEscapeUtils.escapeXml10(String.valueOf(value));\n         return String.valueOf(this.getListDelimiterHandler().escape((Object)v, ListDelimiterHandler.NOOP_TRANSFORMER));\n     }\n }\n"}]}
