{"diffoscope-json-version": 1, "source1": "first/ZipEightByteInteger.class", "source2": "second/ZipEightByteInteger.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,171 +1,171 @@\n-  SHA-256 checksum 2fd8ba81fda4784c3f6cfcbc11a99bbe2579da91ad48468d780bc174579e386a\n+  SHA-256 checksum 7450e56e0de445f0a5c8d8626d69d466a6a5b43f28c4b490c029f489f79ca966\n   Compiled from \"ZipEightByteInteger.java\"\n public final class org.apache.commons.compress.archivers.zip.ZipEightByteInteger implements java.io.Serializable\n   minor version: 0\n   major version: 52\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n-  this_class: #5                          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  super_class: #41                        // java/lang/Object\n+  this_class: #11                         // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+  super_class: #52                        // java/lang/Object\n   interfaces: 1, fields: 26, methods: 17, attributes: 1\n Constant pool:\n-    #1 = Class              #127          // org/apache/commons/compress/archivers/zip/ZipConstants\n-    #2 = Methodref          #108.#128     // java/math/BigInteger.longValue:()J\n-    #3 = Long               255l\n-    #5 = Class              #129          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-    #6 = Long               65280l\n-    #8 = Long               16711680l\n-   #10 = Long               4278190080l\n-   #12 = Long               1095216660480l\n-   #14 = Long               280375465082880l\n-   #16 = Long               71776119061217280l\n-   #18 = Long               9151314442816847872l\n-   #20 = Methodref          #108.#130     // java/math/BigInteger.testBit:(I)Z\n-   #21 = Methodref          #108.#131     // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-   #22 = Methodref          #5.#132       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:(Ljava/math/BigInteger;)[B\n-   #23 = Methodref          #5.#133       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([BI)J\n-   #24 = Methodref          #5.#134       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getValue:([BI)Ljava/math/BigInteger;\n-   #25 = Methodref          #108.#135     // java/math/BigInteger.setBit:(I)Ljava/math/BigInteger;\n-   #26 = Methodref          #41.#136      // java/lang/Object.\"<init>\":()V\n-   #27 = Fieldref           #5.#137       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.value:Ljava/math/BigInteger;\n-   #28 = Methodref          #5.#138       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-   #29 = Methodref          #5.#139       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(Ljava/math/BigInteger;)V\n-   #30 = Methodref          #5.#140       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getValue:()Ljava/math/BigInteger;\n-   #31 = Methodref          #108.#141     // java/math/BigInteger.equals:(Ljava/lang/Object;)Z\n-   #32 = Methodref          #108.#142     // java/math/BigInteger.hashCode:()I\n-   #33 = Class              #143          // java/lang/StringBuilder\n-   #34 = Methodref          #33.#136      // java/lang/StringBuilder.\"<init>\":()V\n-   #35 = String             #144          // ZipEightByteInteger value:\n-   #36 = Methodref          #33.#145      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #37 = Methodref          #33.#146      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #38 = Methodref          #33.#147      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #39 = Methodref          #5.#148       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n-   #40 = Fieldref           #5.#149       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #41 = Class              #150          // java/lang/Object\n-   #42 = Class              #151          // java/io/Serializable\n-   #43 = Utf8               serialVersionUID\n-   #44 = Utf8               J\n-   #45 = Utf8               ConstantValue\n-   #46 = Long               1l\n-   #48 = Utf8               BYTE_1\n-   #49 = Utf8               I\n-   #50 = Integer            1\n-   #51 = Utf8               BYTE_1_MASK\n-   #52 = Integer            65280\n-   #53 = Utf8               BYTE_1_SHIFT\n-   #54 = Integer            8\n-   #55 = Utf8               BYTE_2\n-   #56 = Integer            2\n-   #57 = Utf8               BYTE_2_MASK\n-   #58 = Integer            16711680\n-   #59 = Utf8               BYTE_2_SHIFT\n-   #60 = Integer            16\n-   #61 = Utf8               BYTE_3\n-   #62 = Integer            3\n-   #63 = Utf8               BYTE_3_MASK\n-   #64 = Utf8               BYTE_3_SHIFT\n-   #65 = Integer            24\n-   #66 = Utf8               BYTE_4\n-   #67 = Integer            4\n-   #68 = Utf8               BYTE_4_MASK\n-   #69 = Utf8               BYTE_4_SHIFT\n-   #70 = Integer            32\n-   #71 = Utf8               BYTE_5\n-   #72 = Integer            5\n-   #73 = Utf8               BYTE_5_MASK\n-   #74 = Utf8               BYTE_5_SHIFT\n-   #75 = Integer            40\n-   #76 = Utf8               BYTE_6\n-   #77 = Integer            6\n-   #78 = Utf8               BYTE_6_MASK\n-   #79 = Utf8               BYTE_6_SHIFT\n-   #80 = Integer            48\n-   #81 = Utf8               BYTE_7\n-   #82 = Integer            7\n-   #83 = Utf8               BYTE_7_MASK\n-   #84 = Utf8               BYTE_7_SHIFT\n-   #85 = Integer            56\n-   #86 = Utf8               LEFTMOST_BIT_SHIFT\n-   #87 = Integer            63\n-   #88 = Utf8               LEFTMOST_BIT\n-   #89 = Utf8               B\n-   #90 = Integer            -128\n-   #91 = Utf8               ZERO\n-   #92 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #93 = Utf8               value\n-   #94 = Utf8               Ljava/math/BigInteger;\n-   #95 = Utf8               getBytes\n-   #96 = Utf8               (Ljava/math/BigInteger;)[B\n-   #97 = Utf8               Code\n-   #98 = Utf8               LineNumberTable\n-   #99 = Utf8               StackMapTable\n-  #100 = Class              #152          // \"[B\"\n-  #101 = Utf8               (J)[B\n-  #102 = Utf8               getLongValue\n-  #103 = Utf8               ([B)J\n-  #104 = Utf8               ([BI)J\n-  #105 = Utf8               getValue\n-  #106 = Utf8               ([B)Ljava/math/BigInteger;\n-  #107 = Utf8               ([BI)Ljava/math/BigInteger;\n-  #108 = Class              #153          // java/math/BigInteger\n-  #109 = Utf8               <init>\n-  #110 = Utf8               (Ljava/math/BigInteger;)V\n-  #111 = Utf8               ([B)V\n-  #112 = Utf8               ([BI)V\n-  #113 = Utf8               (J)V\n-  #114 = Utf8               equals\n-  #115 = Utf8               (Ljava/lang/Object;)Z\n-  #116 = Utf8               ()[B\n-  #117 = Utf8               ()J\n-  #118 = Utf8               ()Ljava/math/BigInteger;\n-  #119 = Utf8               hashCode\n-  #120 = Utf8               ()I\n-  #121 = Utf8               toString\n-  #122 = Utf8               ()Ljava/lang/String;\n-  #123 = Utf8               <clinit>\n-  #124 = Utf8               ()V\n-  #125 = Utf8               SourceFile\n-  #126 = Utf8               ZipEightByteInteger.java\n-  #127 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n-  #128 = NameAndType        #154:#117     // longValue:()J\n-  #129 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  #130 = NameAndType        #155:#156     // testBit:(I)Z\n-  #131 = NameAndType        #157:#158     // valueOf:(J)Ljava/math/BigInteger;\n-  #132 = NameAndType        #95:#96       // getBytes:(Ljava/math/BigInteger;)[B\n-  #133 = NameAndType        #102:#104     // getLongValue:([BI)J\n-  #134 = NameAndType        #105:#107     // getValue:([BI)Ljava/math/BigInteger;\n-  #135 = NameAndType        #159:#160     // setBit:(I)Ljava/math/BigInteger;\n-  #136 = NameAndType        #109:#124     // \"<init>\":()V\n-  #137 = NameAndType        #93:#94       // value:Ljava/math/BigInteger;\n-  #138 = NameAndType        #109:#112     // \"<init>\":([BI)V\n-  #139 = NameAndType        #109:#110     // \"<init>\":(Ljava/math/BigInteger;)V\n-  #140 = NameAndType        #105:#118     // getValue:()Ljava/math/BigInteger;\n-  #141 = NameAndType        #114:#115     // equals:(Ljava/lang/Object;)Z\n-  #142 = NameAndType        #119:#120     // hashCode:()I\n-  #143 = Utf8               java/lang/StringBuilder\n-  #144 = Utf8               ZipEightByteInteger value:\n-  #145 = NameAndType        #161:#162     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #146 = NameAndType        #161:#163     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #147 = NameAndType        #121:#122     // toString:()Ljava/lang/String;\n-  #148 = NameAndType        #109:#113     // \"<init>\":(J)V\n-  #149 = NameAndType        #91:#92       // ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #150 = Utf8               java/lang/Object\n-  #151 = Utf8               java/io/Serializable\n-  #152 = Utf8               [B\n-  #153 = Utf8               java/math/BigInteger\n-  #154 = Utf8               longValue\n-  #155 = Utf8               testBit\n-  #156 = Utf8               (I)Z\n-  #157 = Utf8               valueOf\n-  #158 = Utf8               (J)Ljava/math/BigInteger;\n-  #159 = Utf8               setBit\n-  #160 = Utf8               (I)Ljava/math/BigInteger;\n-  #161 = Utf8               append\n-  #162 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #163 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/zip/ZipConstants\n+    #2 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n+    #3 = Methodref          #4.#5         // java/math/BigInteger.longValue:()J\n+    #4 = Class              #6            // java/math/BigInteger\n+    #5 = NameAndType        #7:#8         // longValue:()J\n+    #6 = Utf8               java/math/BigInteger\n+    #7 = Utf8               longValue\n+    #8 = Utf8               ()J\n+    #9 = Long               255l\n+   #11 = Class              #12           // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+   #12 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+   #13 = Long               65280l\n+   #15 = Long               16711680l\n+   #17 = Long               4278190080l\n+   #19 = Long               1095216660480l\n+   #21 = Long               280375465082880l\n+   #23 = Long               71776119061217280l\n+   #25 = Long               9151314442816847872l\n+   #27 = Methodref          #4.#28        // java/math/BigInteger.testBit:(I)Z\n+   #28 = NameAndType        #29:#30       // testBit:(I)Z\n+   #29 = Utf8               testBit\n+   #30 = Utf8               (I)Z\n+   #31 = Methodref          #4.#32        // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+   #32 = NameAndType        #33:#34       // valueOf:(J)Ljava/math/BigInteger;\n+   #33 = Utf8               valueOf\n+   #34 = Utf8               (J)Ljava/math/BigInteger;\n+   #35 = Methodref          #11.#36       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:(Ljava/math/BigInteger;)[B\n+   #36 = NameAndType        #37:#38       // getBytes:(Ljava/math/BigInteger;)[B\n+   #37 = Utf8               getBytes\n+   #38 = Utf8               (Ljava/math/BigInteger;)[B\n+   #39 = Methodref          #11.#40       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([BI)J\n+   #40 = NameAndType        #41:#42       // getLongValue:([BI)J\n+   #41 = Utf8               getLongValue\n+   #42 = Utf8               ([BI)J\n+   #43 = Methodref          #11.#44       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getValue:([BI)Ljava/math/BigInteger;\n+   #44 = NameAndType        #45:#46       // getValue:([BI)Ljava/math/BigInteger;\n+   #45 = Utf8               getValue\n+   #46 = Utf8               ([BI)Ljava/math/BigInteger;\n+   #47 = Methodref          #4.#48        // java/math/BigInteger.setBit:(I)Ljava/math/BigInteger;\n+   #48 = NameAndType        #49:#50       // setBit:(I)Ljava/math/BigInteger;\n+   #49 = Utf8               setBit\n+   #50 = Utf8               (I)Ljava/math/BigInteger;\n+   #51 = Methodref          #52.#53       // java/lang/Object.\"<init>\":()V\n+   #52 = Class              #54           // java/lang/Object\n+   #53 = NameAndType        #55:#56       // \"<init>\":()V\n+   #54 = Utf8               java/lang/Object\n+   #55 = Utf8               <init>\n+   #56 = Utf8               ()V\n+   #57 = Fieldref           #11.#58       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.value:Ljava/math/BigInteger;\n+   #58 = NameAndType        #59:#60       // value:Ljava/math/BigInteger;\n+   #59 = Utf8               value\n+   #60 = Utf8               Ljava/math/BigInteger;\n+   #61 = Methodref          #11.#62       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+   #62 = NameAndType        #55:#63       // \"<init>\":([BI)V\n+   #63 = Utf8               ([BI)V\n+   #64 = Methodref          #11.#65       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(Ljava/math/BigInteger;)V\n+   #65 = NameAndType        #55:#66       // \"<init>\":(Ljava/math/BigInteger;)V\n+   #66 = Utf8               (Ljava/math/BigInteger;)V\n+   #67 = Methodref          #11.#68       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getValue:()Ljava/math/BigInteger;\n+   #68 = NameAndType        #45:#69       // getValue:()Ljava/math/BigInteger;\n+   #69 = Utf8               ()Ljava/math/BigInteger;\n+   #70 = Methodref          #4.#71        // java/math/BigInteger.equals:(Ljava/lang/Object;)Z\n+   #71 = NameAndType        #72:#73       // equals:(Ljava/lang/Object;)Z\n+   #72 = Utf8               equals\n+   #73 = Utf8               (Ljava/lang/Object;)Z\n+   #74 = Methodref          #4.#75        // java/math/BigInteger.hashCode:()I\n+   #75 = NameAndType        #76:#77       // hashCode:()I\n+   #76 = Utf8               hashCode\n+   #77 = Utf8               ()I\n+   #78 = Class              #79           // java/lang/StringBuilder\n+   #79 = Utf8               java/lang/StringBuilder\n+   #80 = Methodref          #78.#53       // java/lang/StringBuilder.\"<init>\":()V\n+   #81 = String             #82           // ZipEightByteInteger value:\n+   #82 = Utf8               ZipEightByteInteger value:\n+   #83 = Methodref          #78.#84       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #84 = NameAndType        #85:#86       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #85 = Utf8               append\n+   #86 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #87 = Methodref          #78.#88       // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #88 = NameAndType        #85:#89       // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #89 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #90 = Methodref          #78.#91       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #91 = NameAndType        #92:#93       // toString:()Ljava/lang/String;\n+   #92 = Utf8               toString\n+   #93 = Utf8               ()Ljava/lang/String;\n+   #94 = Methodref          #11.#95       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":(J)V\n+   #95 = NameAndType        #55:#96       // \"<init>\":(J)V\n+   #96 = Utf8               (J)V\n+   #97 = Fieldref           #11.#98       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #98 = NameAndType        #99:#100      // ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #99 = Utf8               ZERO\n+  #100 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #101 = Class              #102          // java/io/Serializable\n+  #102 = Utf8               java/io/Serializable\n+  #103 = Utf8               serialVersionUID\n+  #104 = Utf8               J\n+  #105 = Utf8               ConstantValue\n+  #106 = Long               1l\n+  #108 = Utf8               BYTE_1\n+  #109 = Utf8               I\n+  #110 = Integer            1\n+  #111 = Utf8               BYTE_1_MASK\n+  #112 = Integer            65280\n+  #113 = Utf8               BYTE_1_SHIFT\n+  #114 = Integer            8\n+  #115 = Utf8               BYTE_2\n+  #116 = Integer            2\n+  #117 = Utf8               BYTE_2_MASK\n+  #118 = Integer            16711680\n+  #119 = Utf8               BYTE_2_SHIFT\n+  #120 = Integer            16\n+  #121 = Utf8               BYTE_3\n+  #122 = Integer            3\n+  #123 = Utf8               BYTE_3_MASK\n+  #124 = Utf8               BYTE_3_SHIFT\n+  #125 = Integer            24\n+  #126 = Utf8               BYTE_4\n+  #127 = Integer            4\n+  #128 = Utf8               BYTE_4_MASK\n+  #129 = Utf8               BYTE_4_SHIFT\n+  #130 = Integer            32\n+  #131 = Utf8               BYTE_5\n+  #132 = Integer            5\n+  #133 = Utf8               BYTE_5_MASK\n+  #134 = Utf8               BYTE_5_SHIFT\n+  #135 = Integer            40\n+  #136 = Utf8               BYTE_6\n+  #137 = Integer            6\n+  #138 = Utf8               BYTE_6_MASK\n+  #139 = Utf8               BYTE_6_SHIFT\n+  #140 = Integer            48\n+  #141 = Utf8               BYTE_7\n+  #142 = Integer            7\n+  #143 = Utf8               BYTE_7_MASK\n+  #144 = Utf8               BYTE_7_SHIFT\n+  #145 = Integer            56\n+  #146 = Utf8               LEFTMOST_BIT_SHIFT\n+  #147 = Integer            63\n+  #148 = Utf8               LEFTMOST_BIT\n+  #149 = Utf8               B\n+  #150 = Integer            -128\n+  #151 = Utf8               Code\n+  #152 = Utf8               LineNumberTable\n+  #153 = Utf8               StackMapTable\n+  #154 = Class              #155          // \"[B\"\n+  #155 = Utf8               [B\n+  #156 = Utf8               (J)[B\n+  #157 = Utf8               ([B)J\n+  #158 = Utf8               ([B)Ljava/math/BigInteger;\n+  #159 = Utf8               ([B)V\n+  #160 = Utf8               ()[B\n+  #161 = Utf8               <clinit>\n+  #162 = Utf8               SourceFile\n+  #163 = Utf8               ZipEightByteInteger.java\n {\n   private static final long serialVersionUID = 1l;\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long 1l\n \n   private static final int BYTE_1 = 1;\n@@ -296,97 +296,97 @@\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=6, locals=4, args_size=1\n          0: bipush        8\n          2: newarray       byte\n          4: astore_1\n          5: aload_0\n-         6: invokevirtual #2                  // Method java/math/BigInteger.longValue:()J\n+         6: invokevirtual #3                  // Method java/math/BigInteger.longValue:()J\n          9: lstore_2\n         10: aload_1\n         11: iconst_0\n         12: lload_2\n-        13: ldc2_w        #3                  // long 255l\n+        13: ldc2_w        #9                  // long 255l\n         16: land\n         17: l2i\n         18: i2b\n         19: bastore\n         20: aload_1\n         21: iconst_1\n         22: lload_2\n-        23: ldc2_w        #6                  // long 65280l\n+        23: ldc2_w        #13                 // long 65280l\n         26: land\n         27: bipush        8\n         29: lshr\n         30: l2i\n         31: i2b\n         32: bastore\n         33: aload_1\n         34: iconst_2\n         35: lload_2\n-        36: ldc2_w        #8                  // long 16711680l\n+        36: ldc2_w        #15                 // long 16711680l\n         39: land\n         40: bipush        16\n         42: lshr\n         43: l2i\n         44: i2b\n         45: bastore\n         46: aload_1\n         47: iconst_3\n         48: lload_2\n-        49: ldc2_w        #10                 // long 4278190080l\n+        49: ldc2_w        #17                 // long 4278190080l\n         52: land\n         53: bipush        24\n         55: lshr\n         56: l2i\n         57: i2b\n         58: bastore\n         59: aload_1\n         60: iconst_4\n         61: lload_2\n-        62: ldc2_w        #12                 // long 1095216660480l\n+        62: ldc2_w        #19                 // long 1095216660480l\n         65: land\n         66: bipush        32\n         68: lshr\n         69: l2i\n         70: i2b\n         71: bastore\n         72: aload_1\n         73: iconst_5\n         74: lload_2\n-        75: ldc2_w        #14                 // long 280375465082880l\n+        75: ldc2_w        #21                 // long 280375465082880l\n         78: land\n         79: bipush        40\n         81: lshr\n         82: l2i\n         83: i2b\n         84: bastore\n         85: aload_1\n         86: bipush        6\n         88: lload_2\n-        89: ldc2_w        #16                 // long 71776119061217280l\n+        89: ldc2_w        #23                 // long 71776119061217280l\n         92: land\n         93: bipush        48\n         95: lshr\n         96: l2i\n         97: i2b\n         98: bastore\n         99: aload_1\n        100: bipush        7\n        102: lload_2\n-       103: ldc2_w        #18                 // long 9151314442816847872l\n+       103: ldc2_w        #25                 // long 9151314442816847872l\n        106: land\n        107: bipush        56\n        109: lshr\n        110: l2i\n        111: i2b\n        112: bastore\n        113: aload_0\n        114: bipush        63\n-       116: invokevirtual #20                 // Method java/math/BigInteger.testBit:(I)Z\n+       116: invokevirtual #27                 // Method java/math/BigInteger.testBit:(I)Z\n        119: ifeq          132\n        122: aload_1\n        123: bipush        7\n        125: dup2\n        126: baload\n        127: bipush        -128\n        129: ior\n@@ -415,53 +415,53 @@\n \n   public static byte[] getBytes(long);\n     descriptor: (J)[B\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=2, args_size=1\n          0: lload_0\n-         1: invokestatic  #21                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-         4: invokestatic  #22                 // Method getBytes:(Ljava/math/BigInteger;)[B\n+         1: invokestatic  #31                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+         4: invokestatic  #35                 // Method getBytes:(Ljava/math/BigInteger;)[B\n          7: areturn\n       LineNumberTable:\n         line 96: 0\n \n   public static long getLongValue(byte[]);\n     descriptor: ([B)J\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: iconst_0\n-         2: invokestatic  #23                 // Method getLongValue:([BI)J\n+         2: invokestatic  #39                 // Method getLongValue:([BI)J\n          5: lreturn\n       LineNumberTable:\n         line 105: 0\n \n   public static long getLongValue(byte[], int);\n     descriptor: ([BI)J\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: invokestatic  #24                 // Method getValue:([BI)Ljava/math/BigInteger;\n-         5: invokevirtual #2                  // Method java/math/BigInteger.longValue:()J\n+         2: invokestatic  #43                 // Method getValue:([BI)Ljava/math/BigInteger;\n+         5: invokevirtual #3                  // Method java/math/BigInteger.longValue:()J\n          8: lreturn\n       LineNumberTable:\n         line 116: 0\n \n   public static java.math.BigInteger getValue(byte[]);\n     descriptor: ([B)Ljava/math/BigInteger;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: iconst_0\n-         2: invokestatic  #24                 // Method getValue:([BI)Ljava/math/BigInteger;\n+         2: invokestatic  #43                 // Method getValue:([BI)Ljava/math/BigInteger;\n          5: areturn\n       LineNumberTable:\n         line 125: 0\n \n   public static java.math.BigInteger getValue(byte[], int);\n     descriptor: ([BI)Ljava/math/BigInteger;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n@@ -471,119 +471,119 @@\n          1: iload_1\n          2: bipush        7\n          4: iadd\n          5: baload\n          6: i2l\n          7: bipush        56\n          9: lshl\n-        10: ldc2_w        #18                 // long 9151314442816847872l\n+        10: ldc2_w        #25                 // long 9151314442816847872l\n         13: land\n         14: lstore_2\n         15: lload_2\n         16: aload_0\n         17: iload_1\n         18: bipush        6\n         20: iadd\n         21: baload\n         22: i2l\n         23: bipush        48\n         25: lshl\n-        26: ldc2_w        #16                 // long 71776119061217280l\n+        26: ldc2_w        #23                 // long 71776119061217280l\n         29: land\n         30: ladd\n         31: lstore_2\n         32: lload_2\n         33: aload_0\n         34: iload_1\n         35: iconst_5\n         36: iadd\n         37: baload\n         38: i2l\n         39: bipush        40\n         41: lshl\n-        42: ldc2_w        #14                 // long 280375465082880l\n+        42: ldc2_w        #21                 // long 280375465082880l\n         45: land\n         46: ladd\n         47: lstore_2\n         48: lload_2\n         49: aload_0\n         50: iload_1\n         51: iconst_4\n         52: iadd\n         53: baload\n         54: i2l\n         55: bipush        32\n         57: lshl\n-        58: ldc2_w        #12                 // long 1095216660480l\n+        58: ldc2_w        #19                 // long 1095216660480l\n         61: land\n         62: ladd\n         63: lstore_2\n         64: lload_2\n         65: aload_0\n         66: iload_1\n         67: iconst_3\n         68: iadd\n         69: baload\n         70: i2l\n         71: bipush        24\n         73: lshl\n-        74: ldc2_w        #10                 // long 4278190080l\n+        74: ldc2_w        #17                 // long 4278190080l\n         77: land\n         78: ladd\n         79: lstore_2\n         80: lload_2\n         81: aload_0\n         82: iload_1\n         83: iconst_2\n         84: iadd\n         85: baload\n         86: i2l\n         87: bipush        16\n         89: lshl\n-        90: ldc2_w        #8                  // long 16711680l\n+        90: ldc2_w        #15                 // long 16711680l\n         93: land\n         94: ladd\n         95: lstore_2\n         96: lload_2\n         97: aload_0\n         98: iload_1\n         99: iconst_1\n        100: iadd\n        101: baload\n        102: i2l\n        103: bipush        8\n        105: lshl\n-       106: ldc2_w        #6                  // long 65280l\n+       106: ldc2_w        #13                 // long 65280l\n        109: land\n        110: ladd\n        111: lstore_2\n        112: lload_2\n        113: aload_0\n        114: iload_1\n        115: baload\n        116: i2l\n-       117: ldc2_w        #3                  // long 255l\n+       117: ldc2_w        #9                  // long 255l\n        120: land\n        121: ladd\n        122: lstore_2\n        123: lload_2\n-       124: invokestatic  #21                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+       124: invokestatic  #31                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n        127: astore        4\n        129: aload_0\n        130: iload_1\n        131: bipush        7\n        133: iadd\n        134: baload\n        135: bipush        -128\n        137: iand\n        138: bipush        -128\n        140: if_icmpne     153\n        143: aload         4\n        145: bipush        63\n-       147: invokevirtual #25                 // Method java/math/BigInteger.setBit:(I)Ljava/math/BigInteger;\n+       147: invokevirtual #47                 // Method java/math/BigInteger.setBit:(I)Ljava/math/BigInteger;\n        150: goto          155\n        153: aload         4\n        155: areturn\n       LineNumberTable:\n         line 136: 0\n         line 137: 15\n         line 138: 32\n@@ -605,167 +605,167 @@\n \n   public org.apache.commons.compress.archivers.zip.ZipEightByteInteger(java.math.BigInteger);\n     descriptor: (Ljava/math/BigInteger;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n-         1: invokespecial #26                 // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #51                 // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n          5: aload_1\n-         6: putfield      #27                 // Field value:Ljava/math/BigInteger;\n+         6: putfield      #57                 // Field value:Ljava/math/BigInteger;\n          9: return\n       LineNumberTable:\n         line 155: 0\n         line 156: 4\n         line 157: 9\n \n   public org.apache.commons.compress.archivers.zip.ZipEightByteInteger(byte[]);\n     descriptor: ([B)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n-         3: invokespecial #28                 // Method \"<init>\":([BI)V\n+         3: invokespecial #61                 // Method \"<init>\":([BI)V\n          6: return\n       LineNumberTable:\n         line 164: 0\n         line 165: 6\n \n   public org.apache.commons.compress.archivers.zip.ZipEightByteInteger(byte[], int);\n     descriptor: ([BI)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n-         1: invokespecial #26                 // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #51                 // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n          5: aload_1\n          6: iload_2\n-         7: invokestatic  #24                 // Method getValue:([BI)Ljava/math/BigInteger;\n-        10: putfield      #27                 // Field value:Ljava/math/BigInteger;\n+         7: invokestatic  #43                 // Method getValue:([BI)Ljava/math/BigInteger;\n+        10: putfield      #57                 // Field value:Ljava/math/BigInteger;\n         13: return\n       LineNumberTable:\n         line 172: 0\n         line 173: 4\n         line 174: 13\n \n   public org.apache.commons.compress.archivers.zip.ZipEightByteInteger(long);\n     descriptor: (J)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_0\n          1: lload_1\n-         2: invokestatic  #21                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-         5: invokespecial #29                 // Method \"<init>\":(Ljava/math/BigInteger;)V\n+         2: invokestatic  #31                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+         5: invokespecial #64                 // Method \"<init>\":(Ljava/math/BigInteger;)V\n          8: return\n       LineNumberTable:\n         line 181: 0\n         line 182: 8\n \n   public boolean equals(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n-         1: instanceof    #5                  // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+         1: instanceof    #11                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n          4: ifne          9\n          7: iconst_0\n          8: ireturn\n          9: aload_0\n-        10: getfield      #27                 // Field value:Ljava/math/BigInteger;\n+        10: getfield      #57                 // Field value:Ljava/math/BigInteger;\n         13: aload_1\n-        14: checkcast     #5                  // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-        17: invokevirtual #30                 // Method getValue:()Ljava/math/BigInteger;\n-        20: invokevirtual #31                 // Method java/math/BigInteger.equals:(Ljava/lang/Object;)Z\n+        14: checkcast     #11                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+        17: invokevirtual #67                 // Method getValue:()Ljava/math/BigInteger;\n+        20: invokevirtual #70                 // Method java/math/BigInteger.equals:(Ljava/lang/Object;)Z\n         23: ireturn\n       LineNumberTable:\n         line 191: 0\n         line 192: 7\n         line 194: 9\n       StackMapTable: number_of_entries = 1\n         frame_type = 9 /* same */\n \n   public byte[] getBytes();\n     descriptor: ()[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #27                 // Field value:Ljava/math/BigInteger;\n-         4: invokestatic  #22                 // Method getBytes:(Ljava/math/BigInteger;)[B\n+         1: getfield      #57                 // Field value:Ljava/math/BigInteger;\n+         4: invokestatic  #35                 // Method getBytes:(Ljava/math/BigInteger;)[B\n          7: areturn\n       LineNumberTable:\n         line 202: 0\n \n   public long getLongValue();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #27                 // Field value:Ljava/math/BigInteger;\n-         4: invokevirtual #2                  // Method java/math/BigInteger.longValue:()J\n+         1: getfield      #57                 // Field value:Ljava/math/BigInteger;\n+         4: invokevirtual #3                  // Method java/math/BigInteger.longValue:()J\n          7: lreturn\n       LineNumberTable:\n         line 210: 0\n \n   public java.math.BigInteger getValue();\n     descriptor: ()Ljava/math/BigInteger;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #27                 // Field value:Ljava/math/BigInteger;\n+         1: getfield      #57                 // Field value:Ljava/math/BigInteger;\n          4: areturn\n       LineNumberTable:\n         line 218: 0\n \n   public int hashCode();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #27                 // Field value:Ljava/math/BigInteger;\n-         4: invokevirtual #32                 // Method java/math/BigInteger.hashCode:()I\n+         1: getfield      #57                 // Field value:Ljava/math/BigInteger;\n+         4: invokevirtual #74                 // Method java/math/BigInteger.hashCode:()I\n          7: ireturn\n       LineNumberTable:\n         line 227: 0\n \n   public java.lang.String toString();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n-         0: new           #33                 // class java/lang/StringBuilder\n+         0: new           #78                 // class java/lang/StringBuilder\n          3: dup\n-         4: invokespecial #34                 // Method java/lang/StringBuilder.\"<init>\":()V\n-         7: ldc           #35                 // String ZipEightByteInteger value:\n-         9: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+         4: invokespecial #80                 // Method java/lang/StringBuilder.\"<init>\":()V\n+         7: ldc           #81                 // String ZipEightByteInteger value:\n+         9: invokevirtual #83                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         12: aload_0\n-        13: getfield      #27                 // Field value:Ljava/math/BigInteger;\n-        16: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-        19: invokevirtual #38                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        13: getfield      #57                 // Field value:Ljava/math/BigInteger;\n+        16: invokevirtual #87                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+        19: invokevirtual #90                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n         22: areturn\n       LineNumberTable:\n         line 232: 0\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=4, locals=0, args_size=0\n-         0: new           #5                  // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+         0: new           #11                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n          3: dup\n          4: lconst_0\n-         5: invokespecial #39                 // Method \"<init>\":(J)V\n-         8: putstatic     #40                 // Field ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         5: invokespecial #94                 // Method \"<init>\":(J)V\n+         8: putstatic     #97                 // Field ZERO:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         11: return\n       LineNumberTable:\n         line 66: 0\n }\n SourceFile: \"ZipEightByteInteger.java\"\n"}]}
