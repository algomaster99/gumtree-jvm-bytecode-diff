{"diffoscope-json-version": 1, "source1": "first/JavadocVariableCheck.class", "source2": "second/JavadocVariableCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,13 +1,11 @@\n \n package com.puppycrawl.tools.checkstyle.checks.javadoc;\n \n import com.puppycrawl.tools.checkstyle.utils.ScopeUtil;\n-import com.puppycrawl.tools.checkstyle.api.TextBlock;\n-import com.puppycrawl.tools.checkstyle.api.FileContents;\n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n import java.util.regex.Pattern;\n import com.puppycrawl.tools.checkstyle.api.Scope;\n import com.puppycrawl.tools.checkstyle.StatelessCheck;\n import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n \n @StatelessCheck\n@@ -26,48 +24,44 @@\n         this.scope = scope;\n     }\n     \n     public void setExcludeScope(final Scope excludeScope) {\n         this.excludeScope = excludeScope;\n     }\n     \n-    public void setIgnoreNamePattern(final Pattern pattern) {\n-        this.ignoreNamePattern = pattern;\n+    public void setIgnoreNamePattern(final Pattern ignoreNamePattern) {\n+        this.ignoreNamePattern = ignoreNamePattern;\n     }\n     \n     public int[] getDefaultTokens() {\n         return this.getAcceptableTokens();\n     }\n     \n     public int[] getAcceptableTokens() {\n         return new int[] { 10, 155 };\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 10 };\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        if (this.shouldCheck(ast)) {\n-            final FileContents contents = this.getFileContents();\n-            final TextBlock textBlock = contents.getJavadocBefore(ast.getLineNo());\n-            if (textBlock == null) {\n-                this.log(ast, \"javadoc.missing\", new Object[0]);\n-            }\n+    public void visitToken(final DetailAST detailAST) {\n+        if (this.shouldCheck(detailAST) && this.getFileContents().getJavadocBefore(detailAST.getLineNo()) == null) {\n+            this.log(detailAST, \"javadoc.missing\", new Object[0]);\n         }\n     }\n     \n-    private boolean isIgnored(final DetailAST ast) {\n-        final String name = ast.findFirstToken(58).getText();\n-        return (this.ignoreNamePattern != null && this.ignoreNamePattern.matcher(name).matches()) || \"serialVersionUID\".equals(name);\n+    private boolean isIgnored(final DetailAST detailAST) {\n+        final String text = detailAST.findFirstToken(58).getText();\n+        return (this.ignoreNamePattern != null && this.ignoreNamePattern.matcher(text).matches()) || \"serialVersionUID\".equals(text);\n     }\n     \n-    private boolean shouldCheck(final DetailAST ast) {\n-        boolean result = false;\n-        if (!ScopeUtil.isInCodeBlock(ast) && !this.isIgnored(ast)) {\n-            final Scope customScope = ScopeUtil.getScope(ast);\n-            final Scope surroundingScope = ScopeUtil.getSurroundingScope(ast);\n-            result = (customScope.isIn(this.scope) && surroundingScope.isIn(this.scope) && (this.excludeScope == null || !customScope.isIn(this.excludeScope) || !surroundingScope.isIn(this.excludeScope)));\n+    private boolean shouldCheck(final DetailAST detailAST) {\n+        boolean b = false;\n+        if (!ScopeUtil.isInCodeBlock(detailAST) && !this.isIgnored(detailAST)) {\n+            final Scope scope = ScopeUtil.getScope(detailAST);\n+            final Scope surroundingScope = ScopeUtil.getSurroundingScope(detailAST);\n+            b = (scope.isIn(this.scope) && surroundingScope.isIn(this.scope) && (this.excludeScope == null || !scope.isIn(this.excludeScope) || !surroundingScope.isIn(this.excludeScope)));\n         }\n-        return result;\n+        return b;\n     }\n }\n"}]}
