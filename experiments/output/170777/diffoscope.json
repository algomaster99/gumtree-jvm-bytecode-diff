{"diffoscope-json-version": 1, "source1": "first/SimpleElementValue.class", "source2": "second/SimpleElementValue.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,206 +1,206 @@\n-  SHA-256 checksum dce0c32ad74d4bb1b421cb267d9bc6dd8b8061e5d757f4aa370fee99af98375a\n+  SHA-256 checksum 27bc849baa17f28e0b67a68275b55c0cf82d236543b27221bc943a39e92575b4\n   Compiled from \"SimpleElementValue.java\"\n public class org.apache.bcel.classfile.SimpleElementValue extends org.apache.bcel.classfile.ElementValue\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #47                         // org/apache/bcel/classfile/SimpleElementValue\n-  super_class: #4                         // org/apache/bcel/classfile/ElementValue\n+  this_class: #8                          // org/apache/bcel/classfile/SimpleElementValue\n+  super_class: #2                         // org/apache/bcel/classfile/ElementValue\n   interfaces: 0, fields: 1, methods: 15, attributes: 1\n Constant pool:\n-    #1 = Methodref          #4.#108       // org/apache/bcel/classfile/ElementValue.\"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n-    #2 = Fieldref           #47.#109      // org/apache/bcel/classfile/SimpleElementValue.index:I\n-    #3 = Methodref          #4.#110       // org/apache/bcel/classfile/ElementValue.getType:()I\n-    #4 = Class              #111          // org/apache/bcel/classfile/ElementValue\n-    #5 = Class              #112          // java/lang/IllegalStateException\n-    #6 = String             #113          // Dont call getValueString() on a non STRING ElementValue\n-    #7 = Methodref          #5.#114       // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-    #8 = Methodref          #4.#115       // org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n-    #9 = Methodref          #47.#116      // org/apache/bcel/classfile/SimpleElementValue.getIndex:()I\n-   #10 = Class              #117          // org/apache/bcel/Const\n-   #11 = Methodref          #99.#118      // org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n-   #12 = Class              #119          // org/apache/bcel/classfile/ConstantUtf8\n-   #13 = Methodref          #12.#120      // org/apache/bcel/classfile/ConstantUtf8.getBytes:()Ljava/lang/String;\n-   #14 = Class              #121          // org/apache/bcel/classfile/ConstantInteger\n-   #15 = Methodref          #14.#122      // org/apache/bcel/classfile/ConstantInteger.getBytes:()I\n-   #16 = String             #123          // Dont call getValueByte() on a non BYTE ElementValue\n-   #17 = String             #124          // Dont call getValueChar() on a non CHAR ElementValue\n-   #18 = String             #125          // Dont call getValueLong() on a non LONG ElementValue\n-   #19 = Methodref          #99.#126      // org/apache/bcel/classfile/ConstantPool.getConstant:(I)Lorg/apache/bcel/classfile/Constant;\n-   #20 = Class              #127          // org/apache/bcel/classfile/ConstantLong\n-   #21 = Methodref          #20.#128      // org/apache/bcel/classfile/ConstantLong.getBytes:()J\n-   #22 = String             #129          // Dont call getValueFloat() on a non FLOAT ElementValue\n-   #23 = Class              #130          // org/apache/bcel/classfile/ConstantFloat\n-   #24 = Methodref          #23.#131      // org/apache/bcel/classfile/ConstantFloat.getBytes:()F\n-   #25 = String             #132          // Dont call getValueDouble() on a non DOUBLE ElementValue\n-   #26 = Class              #133          // org/apache/bcel/classfile/ConstantDouble\n-   #27 = Methodref          #26.#134      // org/apache/bcel/classfile/ConstantDouble.getBytes:()D\n-   #28 = String             #135          // Dont call getValueBoolean() on a non BOOLEAN ElementValue\n-   #29 = String             #136          // Dont call getValueShort() on a non SHORT ElementValue\n-   #30 = Methodref          #47.#137      // org/apache/bcel/classfile/SimpleElementValue.stringifyValue:()Ljava/lang/String;\n-   #31 = Methodref          #138.#139     // java/lang/Integer.toString:(I)Ljava/lang/String;\n-   #32 = Methodref          #140.#141     // java/lang/Long.toString:(J)Ljava/lang/String;\n-   #33 = Methodref          #142.#143     // java/lang/Double.toString:(D)Ljava/lang/String;\n-   #34 = Methodref          #144.#145     // java/lang/Float.toString:(F)Ljava/lang/String;\n-   #35 = Methodref          #146.#147     // java/lang/String.valueOf:(C)Ljava/lang/String;\n-   #36 = String             #148          // false\n-   #37 = String             #149          // true\n-   #38 = Class              #150          // java/lang/StringBuilder\n-   #39 = Methodref          #38.#151      // java/lang/StringBuilder.\"<init>\":()V\n-   #40 = String             #152          // SimpleElementValue class does not know how to stringify type\n-   #41 = Methodref          #38.#153      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #42 = Methodref          #38.#154      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #43 = Methodref          #38.#155      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #44 = Methodref          #156.#157     // java/io/DataOutputStream.writeByte:(I)V\n-   #45 = Methodref          #156.#158     // java/io/DataOutputStream.writeShort:(I)V\n-   #46 = String             #159          // SimpleElementValue doesnt know how to write out type\n-   #47 = Class              #160          // org/apache/bcel/classfile/SimpleElementValue\n-   #48 = Utf8               index\n-   #49 = Utf8               I\n-   #50 = Utf8               <init>\n-   #51 = Utf8               (IILorg/apache/bcel/classfile/ConstantPool;)V\n-   #52 = Utf8               Code\n-   #53 = Utf8               LineNumberTable\n-   #54 = Utf8               LocalVariableTable\n-   #55 = Utf8               this\n-   #56 = Utf8               Lorg/apache/bcel/classfile/SimpleElementValue;\n-   #57 = Utf8               type\n-   #58 = Utf8               cpool\n-   #59 = Utf8               Lorg/apache/bcel/classfile/ConstantPool;\n-   #60 = Utf8               getIndex\n-   #61 = Utf8               ()I\n-   #62 = Utf8               setIndex\n-   #63 = Utf8               (I)V\n-   #64 = Utf8               getValueString\n-   #65 = Utf8               ()Ljava/lang/String;\n-   #66 = Utf8               c\n-   #67 = Utf8               Lorg/apache/bcel/classfile/ConstantUtf8;\n-   #68 = Utf8               StackMapTable\n-   #69 = Utf8               getValueInt\n-   #70 = Utf8               Lorg/apache/bcel/classfile/ConstantInteger;\n-   #71 = Utf8               getValueByte\n-   #72 = Utf8               ()B\n-   #73 = Utf8               getValueChar\n-   #74 = Utf8               ()C\n-   #75 = Utf8               getValueLong\n-   #76 = Utf8               ()J\n-   #77 = Utf8               j\n-   #78 = Utf8               Lorg/apache/bcel/classfile/ConstantLong;\n-   #79 = Utf8               getValueFloat\n-   #80 = Utf8               ()F\n-   #81 = Utf8               f\n-   #82 = Utf8               Lorg/apache/bcel/classfile/ConstantFloat;\n-   #83 = Utf8               getValueDouble\n-   #84 = Utf8               ()D\n-   #85 = Utf8               d\n-   #86 = Utf8               Lorg/apache/bcel/classfile/ConstantDouble;\n-   #87 = Utf8               getValueBoolean\n-   #88 = Utf8               ()Z\n-   #89 = Utf8               bo\n-   #90 = Utf8               getValueShort\n-   #91 = Utf8               ()S\n-   #92 = Utf8               s\n-   #93 = Utf8               toString\n-   #94 = Utf8               stringifyValue\n-   #95 = Utf8               b\n-   #96 = Utf8               ch\n-   #97 = Utf8               cu8\n-   #98 = Utf8               _type\n-   #99 = Class              #161          // org/apache/bcel/classfile/ConstantPool\n-  #100 = Utf8               dump\n-  #101 = Utf8               (Ljava/io/DataOutputStream;)V\n-  #102 = Utf8               dos\n-  #103 = Utf8               Ljava/io/DataOutputStream;\n-  #104 = Utf8               Exceptions\n-  #105 = Class              #162          // java/io/IOException\n-  #106 = Utf8               SourceFile\n-  #107 = Utf8               SimpleElementValue.java\n-  #108 = NameAndType        #50:#163      // \"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n-  #109 = NameAndType        #48:#49       // index:I\n-  #110 = NameAndType        #164:#61      // getType:()I\n-  #111 = Utf8               org/apache/bcel/classfile/ElementValue\n-  #112 = Utf8               java/lang/IllegalStateException\n-  #113 = Utf8               Dont call getValueString() on a non STRING ElementValue\n-  #114 = NameAndType        #50:#165      // \"<init>\":(Ljava/lang/String;)V\n-  #115 = NameAndType        #166:#167     // getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n-  #116 = NameAndType        #60:#61       // getIndex:()I\n-  #117 = Utf8               org/apache/bcel/Const\n-  #118 = NameAndType        #168:#169     // getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n-  #119 = Utf8               org/apache/bcel/classfile/ConstantUtf8\n-  #120 = NameAndType        #170:#65      // getBytes:()Ljava/lang/String;\n-  #121 = Utf8               org/apache/bcel/classfile/ConstantInteger\n-  #122 = NameAndType        #170:#61      // getBytes:()I\n-  #123 = Utf8               Dont call getValueByte() on a non BYTE ElementValue\n-  #124 = Utf8               Dont call getValueChar() on a non CHAR ElementValue\n-  #125 = Utf8               Dont call getValueLong() on a non LONG ElementValue\n-  #126 = NameAndType        #168:#171     // getConstant:(I)Lorg/apache/bcel/classfile/Constant;\n-  #127 = Utf8               org/apache/bcel/classfile/ConstantLong\n-  #128 = NameAndType        #170:#76      // getBytes:()J\n-  #129 = Utf8               Dont call getValueFloat() on a non FLOAT ElementValue\n-  #130 = Utf8               org/apache/bcel/classfile/ConstantFloat\n-  #131 = NameAndType        #170:#80      // getBytes:()F\n-  #132 = Utf8               Dont call getValueDouble() on a non DOUBLE ElementValue\n-  #133 = Utf8               org/apache/bcel/classfile/ConstantDouble\n-  #134 = NameAndType        #170:#84      // getBytes:()D\n-  #135 = Utf8               Dont call getValueBoolean() on a non BOOLEAN ElementValue\n-  #136 = Utf8               Dont call getValueShort() on a non SHORT ElementValue\n-  #137 = NameAndType        #94:#65       // stringifyValue:()Ljava/lang/String;\n-  #138 = Class              #172          // java/lang/Integer\n-  #139 = NameAndType        #93:#173      // toString:(I)Ljava/lang/String;\n-  #140 = Class              #174          // java/lang/Long\n-  #141 = NameAndType        #93:#175      // toString:(J)Ljava/lang/String;\n-  #142 = Class              #176          // java/lang/Double\n-  #143 = NameAndType        #93:#177      // toString:(D)Ljava/lang/String;\n-  #144 = Class              #178          // java/lang/Float\n-  #145 = NameAndType        #93:#179      // toString:(F)Ljava/lang/String;\n-  #146 = Class              #180          // java/lang/String\n-  #147 = NameAndType        #181:#182     // valueOf:(C)Ljava/lang/String;\n-  #148 = Utf8               false\n-  #149 = Utf8               true\n-  #150 = Utf8               java/lang/StringBuilder\n-  #151 = NameAndType        #50:#183      // \"<init>\":()V\n-  #152 = Utf8               SimpleElementValue class does not know how to stringify type\n-  #153 = NameAndType        #184:#185     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #154 = NameAndType        #184:#186     // append:(I)Ljava/lang/StringBuilder;\n-  #155 = NameAndType        #93:#65       // toString:()Ljava/lang/String;\n-  #156 = Class              #187          // java/io/DataOutputStream\n-  #157 = NameAndType        #188:#63      // writeByte:(I)V\n-  #158 = NameAndType        #189:#63      // writeShort:(I)V\n-  #159 = Utf8               SimpleElementValue doesnt know how to write out type\n-  #160 = Utf8               org/apache/bcel/classfile/SimpleElementValue\n-  #161 = Utf8               org/apache/bcel/classfile/ConstantPool\n-  #162 = Utf8               java/io/IOException\n-  #163 = Utf8               (ILorg/apache/bcel/classfile/ConstantPool;)V\n-  #164 = Utf8               getType\n-  #165 = Utf8               (Ljava/lang/String;)V\n-  #166 = Utf8               getConstantPool\n-  #167 = Utf8               ()Lorg/apache/bcel/classfile/ConstantPool;\n-  #168 = Utf8               getConstant\n-  #169 = Utf8               (IB)Lorg/apache/bcel/classfile/Constant;\n-  #170 = Utf8               getBytes\n-  #171 = Utf8               (I)Lorg/apache/bcel/classfile/Constant;\n-  #172 = Utf8               java/lang/Integer\n-  #173 = Utf8               (I)Ljava/lang/String;\n-  #174 = Utf8               java/lang/Long\n-  #175 = Utf8               (J)Ljava/lang/String;\n-  #176 = Utf8               java/lang/Double\n-  #177 = Utf8               (D)Ljava/lang/String;\n-  #178 = Utf8               java/lang/Float\n-  #179 = Utf8               (F)Ljava/lang/String;\n-  #180 = Utf8               java/lang/String\n-  #181 = Utf8               valueOf\n-  #182 = Utf8               (C)Ljava/lang/String;\n-  #183 = Utf8               ()V\n-  #184 = Utf8               append\n-  #185 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #186 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #187 = Utf8               java/io/DataOutputStream\n-  #188 = Utf8               writeByte\n-  #189 = Utf8               writeShort\n+    #1 = Methodref          #2.#3         // org/apache/bcel/classfile/ElementValue.\"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n+    #2 = Class              #4            // org/apache/bcel/classfile/ElementValue\n+    #3 = NameAndType        #5:#6         // \"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n+    #4 = Utf8               org/apache/bcel/classfile/ElementValue\n+    #5 = Utf8               <init>\n+    #6 = Utf8               (ILorg/apache/bcel/classfile/ConstantPool;)V\n+    #7 = Fieldref           #8.#9         // org/apache/bcel/classfile/SimpleElementValue.index:I\n+    #8 = Class              #10           // org/apache/bcel/classfile/SimpleElementValue\n+    #9 = NameAndType        #11:#12       // index:I\n+   #10 = Utf8               org/apache/bcel/classfile/SimpleElementValue\n+   #11 = Utf8               index\n+   #12 = Utf8               I\n+   #13 = Methodref          #2.#14        // org/apache/bcel/classfile/ElementValue.getType:()I\n+   #14 = NameAndType        #15:#16       // getType:()I\n+   #15 = Utf8               getType\n+   #16 = Utf8               ()I\n+   #17 = Class              #18           // java/lang/IllegalStateException\n+   #18 = Utf8               java/lang/IllegalStateException\n+   #19 = String             #20           // Dont call getValueString() on a non STRING ElementValue\n+   #20 = Utf8               Dont call getValueString() on a non STRING ElementValue\n+   #21 = Methodref          #17.#22       // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+   #22 = NameAndType        #5:#23        // \"<init>\":(Ljava/lang/String;)V\n+   #23 = Utf8               (Ljava/lang/String;)V\n+   #24 = Methodref          #2.#25        // org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n+   #25 = NameAndType        #26:#27       // getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n+   #26 = Utf8               getConstantPool\n+   #27 = Utf8               ()Lorg/apache/bcel/classfile/ConstantPool;\n+   #28 = Methodref          #8.#29        // org/apache/bcel/classfile/SimpleElementValue.getIndex:()I\n+   #29 = NameAndType        #30:#16       // getIndex:()I\n+   #30 = Utf8               getIndex\n+   #31 = Class              #32           // org/apache/bcel/Const\n+   #32 = Utf8               org/apache/bcel/Const\n+   #33 = Methodref          #34.#35       // org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n+   #34 = Class              #36           // org/apache/bcel/classfile/ConstantPool\n+   #35 = NameAndType        #37:#38       // getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n+   #36 = Utf8               org/apache/bcel/classfile/ConstantPool\n+   #37 = Utf8               getConstant\n+   #38 = Utf8               (IB)Lorg/apache/bcel/classfile/Constant;\n+   #39 = Class              #40           // org/apache/bcel/classfile/ConstantUtf8\n+   #40 = Utf8               org/apache/bcel/classfile/ConstantUtf8\n+   #41 = Methodref          #39.#42       // org/apache/bcel/classfile/ConstantUtf8.getBytes:()Ljava/lang/String;\n+   #42 = NameAndType        #43:#44       // getBytes:()Ljava/lang/String;\n+   #43 = Utf8               getBytes\n+   #44 = Utf8               ()Ljava/lang/String;\n+   #45 = Class              #46           // org/apache/bcel/classfile/ConstantInteger\n+   #46 = Utf8               org/apache/bcel/classfile/ConstantInteger\n+   #47 = Methodref          #45.#48       // org/apache/bcel/classfile/ConstantInteger.getBytes:()I\n+   #48 = NameAndType        #43:#16       // getBytes:()I\n+   #49 = String             #50           // Dont call getValueByte() on a non BYTE ElementValue\n+   #50 = Utf8               Dont call getValueByte() on a non BYTE ElementValue\n+   #51 = String             #52           // Dont call getValueChar() on a non CHAR ElementValue\n+   #52 = Utf8               Dont call getValueChar() on a non CHAR ElementValue\n+   #53 = String             #54           // Dont call getValueLong() on a non LONG ElementValue\n+   #54 = Utf8               Dont call getValueLong() on a non LONG ElementValue\n+   #55 = Methodref          #34.#56       // org/apache/bcel/classfile/ConstantPool.getConstant:(I)Lorg/apache/bcel/classfile/Constant;\n+   #56 = NameAndType        #37:#57       // getConstant:(I)Lorg/apache/bcel/classfile/Constant;\n+   #57 = Utf8               (I)Lorg/apache/bcel/classfile/Constant;\n+   #58 = Class              #59           // org/apache/bcel/classfile/ConstantLong\n+   #59 = Utf8               org/apache/bcel/classfile/ConstantLong\n+   #60 = Methodref          #58.#61       // org/apache/bcel/classfile/ConstantLong.getBytes:()J\n+   #61 = NameAndType        #43:#62       // getBytes:()J\n+   #62 = Utf8               ()J\n+   #63 = String             #64           // Dont call getValueFloat() on a non FLOAT ElementValue\n+   #64 = Utf8               Dont call getValueFloat() on a non FLOAT ElementValue\n+   #65 = Class              #66           // org/apache/bcel/classfile/ConstantFloat\n+   #66 = Utf8               org/apache/bcel/classfile/ConstantFloat\n+   #67 = Methodref          #65.#68       // org/apache/bcel/classfile/ConstantFloat.getBytes:()F\n+   #68 = NameAndType        #43:#69       // getBytes:()F\n+   #69 = Utf8               ()F\n+   #70 = String             #71           // Dont call getValueDouble() on a non DOUBLE ElementValue\n+   #71 = Utf8               Dont call getValueDouble() on a non DOUBLE ElementValue\n+   #72 = Class              #73           // org/apache/bcel/classfile/ConstantDouble\n+   #73 = Utf8               org/apache/bcel/classfile/ConstantDouble\n+   #74 = Methodref          #72.#75       // org/apache/bcel/classfile/ConstantDouble.getBytes:()D\n+   #75 = NameAndType        #43:#76       // getBytes:()D\n+   #76 = Utf8               ()D\n+   #77 = String             #78           // Dont call getValueBoolean() on a non BOOLEAN ElementValue\n+   #78 = Utf8               Dont call getValueBoolean() on a non BOOLEAN ElementValue\n+   #79 = String             #80           // Dont call getValueShort() on a non SHORT ElementValue\n+   #80 = Utf8               Dont call getValueShort() on a non SHORT ElementValue\n+   #81 = Methodref          #8.#82        // org/apache/bcel/classfile/SimpleElementValue.stringifyValue:()Ljava/lang/String;\n+   #82 = NameAndType        #83:#44       // stringifyValue:()Ljava/lang/String;\n+   #83 = Utf8               stringifyValue\n+   #84 = Methodref          #85.#86       // java/lang/Integer.toString:(I)Ljava/lang/String;\n+   #85 = Class              #87           // java/lang/Integer\n+   #86 = NameAndType        #88:#89       // toString:(I)Ljava/lang/String;\n+   #87 = Utf8               java/lang/Integer\n+   #88 = Utf8               toString\n+   #89 = Utf8               (I)Ljava/lang/String;\n+   #90 = Methodref          #91.#92       // java/lang/Long.toString:(J)Ljava/lang/String;\n+   #91 = Class              #93           // java/lang/Long\n+   #92 = NameAndType        #88:#94       // toString:(J)Ljava/lang/String;\n+   #93 = Utf8               java/lang/Long\n+   #94 = Utf8               (J)Ljava/lang/String;\n+   #95 = Methodref          #96.#97       // java/lang/Double.toString:(D)Ljava/lang/String;\n+   #96 = Class              #98           // java/lang/Double\n+   #97 = NameAndType        #88:#99       // toString:(D)Ljava/lang/String;\n+   #98 = Utf8               java/lang/Double\n+   #99 = Utf8               (D)Ljava/lang/String;\n+  #100 = Methodref          #101.#102     // java/lang/Float.toString:(F)Ljava/lang/String;\n+  #101 = Class              #103          // java/lang/Float\n+  #102 = NameAndType        #88:#104      // toString:(F)Ljava/lang/String;\n+  #103 = Utf8               java/lang/Float\n+  #104 = Utf8               (F)Ljava/lang/String;\n+  #105 = Methodref          #106.#107     // java/lang/String.valueOf:(C)Ljava/lang/String;\n+  #106 = Class              #108          // java/lang/String\n+  #107 = NameAndType        #109:#110     // valueOf:(C)Ljava/lang/String;\n+  #108 = Utf8               java/lang/String\n+  #109 = Utf8               valueOf\n+  #110 = Utf8               (C)Ljava/lang/String;\n+  #111 = String             #112          // false\n+  #112 = Utf8               false\n+  #113 = String             #114          // true\n+  #114 = Utf8               true\n+  #115 = Class              #116          // java/lang/StringBuilder\n+  #116 = Utf8               java/lang/StringBuilder\n+  #117 = Methodref          #115.#118     // java/lang/StringBuilder.\"<init>\":()V\n+  #118 = NameAndType        #5:#119       // \"<init>\":()V\n+  #119 = Utf8               ()V\n+  #120 = String             #121          // SimpleElementValue class does not know how to stringify type\n+  #121 = Utf8               SimpleElementValue class does not know how to stringify type\n+  #122 = Methodref          #115.#123     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #123 = NameAndType        #124:#125     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #124 = Utf8               append\n+  #125 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #126 = Methodref          #115.#127     // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+  #127 = NameAndType        #124:#128     // append:(I)Ljava/lang/StringBuilder;\n+  #128 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #129 = Methodref          #115.#130     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #130 = NameAndType        #88:#44       // toString:()Ljava/lang/String;\n+  #131 = Methodref          #132.#133     // java/io/DataOutputStream.writeByte:(I)V\n+  #132 = Class              #134          // java/io/DataOutputStream\n+  #133 = NameAndType        #135:#136     // writeByte:(I)V\n+  #134 = Utf8               java/io/DataOutputStream\n+  #135 = Utf8               writeByte\n+  #136 = Utf8               (I)V\n+  #137 = Methodref          #132.#138     // java/io/DataOutputStream.writeShort:(I)V\n+  #138 = NameAndType        #139:#136     // writeShort:(I)V\n+  #139 = Utf8               writeShort\n+  #140 = String             #141          // SimpleElementValue doesnt know how to write out type\n+  #141 = Utf8               SimpleElementValue doesnt know how to write out type\n+  #142 = Utf8               (IILorg/apache/bcel/classfile/ConstantPool;)V\n+  #143 = Utf8               Code\n+  #144 = Utf8               LineNumberTable\n+  #145 = Utf8               LocalVariableTable\n+  #146 = Utf8               this\n+  #147 = Utf8               Lorg/apache/bcel/classfile/SimpleElementValue;\n+  #148 = Utf8               type\n+  #149 = Utf8               cpool\n+  #150 = Utf8               Lorg/apache/bcel/classfile/ConstantPool;\n+  #151 = Utf8               setIndex\n+  #152 = Utf8               getValueString\n+  #153 = Utf8               c\n+  #154 = Utf8               Lorg/apache/bcel/classfile/ConstantUtf8;\n+  #155 = Utf8               StackMapTable\n+  #156 = Utf8               getValueInt\n+  #157 = Utf8               Lorg/apache/bcel/classfile/ConstantInteger;\n+  #158 = Utf8               getValueByte\n+  #159 = Utf8               ()B\n+  #160 = Utf8               getValueChar\n+  #161 = Utf8               ()C\n+  #162 = Utf8               getValueLong\n+  #163 = Utf8               j\n+  #164 = Utf8               Lorg/apache/bcel/classfile/ConstantLong;\n+  #165 = Utf8               getValueFloat\n+  #166 = Utf8               f\n+  #167 = Utf8               Lorg/apache/bcel/classfile/ConstantFloat;\n+  #168 = Utf8               getValueDouble\n+  #169 = Utf8               d\n+  #170 = Utf8               Lorg/apache/bcel/classfile/ConstantDouble;\n+  #171 = Utf8               getValueBoolean\n+  #172 = Utf8               ()Z\n+  #173 = Utf8               bo\n+  #174 = Utf8               getValueShort\n+  #175 = Utf8               ()S\n+  #176 = Utf8               s\n+  #177 = Utf8               b\n+  #178 = Utf8               ch\n+  #179 = Utf8               cu8\n+  #180 = Utf8               _type\n+  #181 = Utf8               dump\n+  #182 = Utf8               (Ljava/io/DataOutputStream;)V\n+  #183 = Utf8               dos\n+  #184 = Utf8               Ljava/io/DataOutputStream;\n+  #185 = Utf8               Exceptions\n+  #186 = Class              #187          // java/io/IOException\n+  #187 = Utf8               java/io/IOException\n+  #188 = Utf8               SourceFile\n+  #189 = Utf8               SimpleElementValue.java\n {\n   private int index;\n     descriptor: I\n     flags: (0x0002) ACC_PRIVATE\n \n   public org.apache.bcel.classfile.SimpleElementValue(int, int, org.apache.bcel.classfile.ConstantPool);\n     descriptor: (IILorg/apache/bcel/classfile/ConstantPool;)V\n@@ -209,15 +209,15 @@\n       stack=3, locals=4, args_size=4\n          0: aload_0\n          1: iload_1\n          2: aload_3\n          3: invokespecial #1                  // Method org/apache/bcel/classfile/ElementValue.\"<init>\":(ILorg/apache/bcel/classfile/ConstantPool;)V\n          6: aload_0\n          7: iload_2\n-         8: putfield      #2                  // Field index:I\n+         8: putfield      #7                  // Field index:I\n         11: return\n       LineNumberTable:\n         line 34: 0\n         line 35: 6\n         line 36: 11\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -228,30 +228,30 @@\n \n   public int getIndex();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #2                  // Field index:I\n+         1: getfield      #7                  // Field index:I\n          4: ireturn\n       LineNumberTable:\n         line 43: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/bcel/classfile/SimpleElementValue;\n \n   public void setIndex(int);\n     descriptor: (I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: putfield      #2                  // Field index:I\n+         2: putfield      #7                  // Field index:I\n          5: return\n       LineNumberTable:\n         line 48: 0\n         line 49: 5\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0  this   Lorg/apache/bcel/classfile/SimpleElementValue;\n@@ -259,32 +259,32 @@\n \n   public java.lang.String getValueString();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: invokespecial #3                  // Method org/apache/bcel/classfile/ElementValue.getType:()I\n+         1: invokespecial #13                 // Method org/apache/bcel/classfile/ElementValue.getType:()I\n          4: bipush        115\n          6: if_icmpeq     19\n-         9: new           #5                  // class java/lang/IllegalStateException\n+         9: new           #17                 // class java/lang/IllegalStateException\n         12: dup\n-        13: ldc           #6                  // String Dont call getValueString() on a non STRING ElementValue\n-        15: invokespecial #7                  // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+        13: ldc           #19                 // String Dont call getValueString() on a non STRING ElementValue\n+        15: invokespecial #21                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n         18: athrow\n         19: aload_0\n-        20: invokespecial #8                  // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n+        20: invokespecial #24                 // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n         23: aload_0\n-        24: invokevirtual #9                  // Method getIndex:()I\n+        24: invokevirtual #28                 // Method getIndex:()I\n         27: iconst_1\n-        28: invokevirtual #11                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n-        31: checkcast     #12                 // class org/apache/bcel/classfile/ConstantUtf8\n+        28: invokevirtual #33                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n+        31: checkcast     #39                 // class org/apache/bcel/classfile/ConstantUtf8\n         34: astore_1\n         35: aload_1\n-        36: invokevirtual #13                 // Method org/apache/bcel/classfile/ConstantUtf8.getBytes:()Ljava/lang/String;\n+        36: invokevirtual #41                 // Method org/apache/bcel/classfile/ConstantUtf8.getBytes:()Ljava/lang/String;\n         39: areturn\n       LineNumberTable:\n         line 53: 0\n         line 54: 9\n         line 57: 19\n         line 59: 35\n       LocalVariableTable:\n@@ -296,32 +296,32 @@\n \n   public int getValueInt();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: invokespecial #3                  // Method org/apache/bcel/classfile/ElementValue.getType:()I\n+         1: invokespecial #13                 // Method org/apache/bcel/classfile/ElementValue.getType:()I\n          4: bipush        73\n          6: if_icmpeq     19\n-         9: new           #5                  // class java/lang/IllegalStateException\n+         9: new           #17                 // class java/lang/IllegalStateException\n         12: dup\n-        13: ldc           #6                  // String Dont call getValueString() on a non STRING ElementValue\n-        15: invokespecial #7                  // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+        13: ldc           #19                 // String Dont call getValueString() on a non STRING ElementValue\n+        15: invokespecial #21                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n         18: athrow\n         19: aload_0\n-        20: invokespecial #8                  // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n+        20: invokespecial #24                 // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n         23: aload_0\n-        24: invokevirtual #9                  // Method getIndex:()I\n+        24: invokevirtual #28                 // Method getIndex:()I\n         27: iconst_3\n-        28: invokevirtual #11                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n-        31: checkcast     #14                 // class org/apache/bcel/classfile/ConstantInteger\n+        28: invokevirtual #33                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n+        31: checkcast     #45                 // class org/apache/bcel/classfile/ConstantInteger\n         34: astore_1\n         35: aload_1\n-        36: invokevirtual #15                 // Method org/apache/bcel/classfile/ConstantInteger.getBytes:()I\n+        36: invokevirtual #47                 // Method org/apache/bcel/classfile/ConstantInteger.getBytes:()I\n         39: ireturn\n       LineNumberTable:\n         line 64: 0\n         line 65: 9\n         line 68: 19\n         line 70: 35\n       LocalVariableTable:\n@@ -333,32 +333,32 @@\n \n   public byte getValueByte();\n     descriptor: ()B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: invokespecial #3                  // Method org/apache/bcel/classfile/ElementValue.getType:()I\n+         1: invokespecial #13                 // Method org/apache/bcel/classfile/ElementValue.getType:()I\n          4: bipush        66\n          6: if_icmpeq     19\n-         9: new           #5                  // class java/lang/IllegalStateException\n+         9: new           #17                 // class java/lang/IllegalStateException\n         12: dup\n-        13: ldc           #16                 // String Dont call getValueByte() on a non BYTE ElementValue\n-        15: invokespecial #7                  // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+        13: ldc           #49                 // String Dont call getValueByte() on a non BYTE ElementValue\n+        15: invokespecial #21                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n         18: athrow\n         19: aload_0\n-        20: invokespecial #8                  // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n+        20: invokespecial #24                 // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n         23: aload_0\n-        24: invokevirtual #9                  // Method getIndex:()I\n+        24: invokevirtual #28                 // Method getIndex:()I\n         27: iconst_3\n-        28: invokevirtual #11                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n-        31: checkcast     #14                 // class org/apache/bcel/classfile/ConstantInteger\n+        28: invokevirtual #33                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n+        31: checkcast     #45                 // class org/apache/bcel/classfile/ConstantInteger\n         34: astore_1\n         35: aload_1\n-        36: invokevirtual #15                 // Method org/apache/bcel/classfile/ConstantInteger.getBytes:()I\n+        36: invokevirtual #47                 // Method org/apache/bcel/classfile/ConstantInteger.getBytes:()I\n         39: i2b\n         40: ireturn\n       LineNumberTable:\n         line 75: 0\n         line 76: 9\n         line 79: 19\n         line 81: 35\n@@ -371,32 +371,32 @@\n \n   public char getValueChar();\n     descriptor: ()C\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: invokespecial #3                  // Method org/apache/bcel/classfile/ElementValue.getType:()I\n+         1: invokespecial #13                 // Method org/apache/bcel/classfile/ElementValue.getType:()I\n          4: bipush        67\n          6: if_icmpeq     19\n-         9: new           #5                  // class java/lang/IllegalStateException\n+         9: new           #17                 // class java/lang/IllegalStateException\n         12: dup\n-        13: ldc           #17                 // String Dont call getValueChar() on a non CHAR ElementValue\n-        15: invokespecial #7                  // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+        13: ldc           #51                 // String Dont call getValueChar() on a non CHAR ElementValue\n+        15: invokespecial #21                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n         18: athrow\n         19: aload_0\n-        20: invokespecial #8                  // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n+        20: invokespecial #24                 // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n         23: aload_0\n-        24: invokevirtual #9                  // Method getIndex:()I\n+        24: invokevirtual #28                 // Method getIndex:()I\n         27: iconst_3\n-        28: invokevirtual #11                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n-        31: checkcast     #14                 // class org/apache/bcel/classfile/ConstantInteger\n+        28: invokevirtual #33                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n+        31: checkcast     #45                 // class org/apache/bcel/classfile/ConstantInteger\n         34: astore_1\n         35: aload_1\n-        36: invokevirtual #15                 // Method org/apache/bcel/classfile/ConstantInteger.getBytes:()I\n+        36: invokevirtual #47                 // Method org/apache/bcel/classfile/ConstantInteger.getBytes:()I\n         39: i2c\n         40: ireturn\n       LineNumberTable:\n         line 86: 0\n         line 87: 9\n         line 90: 19\n         line 92: 35\n@@ -409,31 +409,31 @@\n \n   public long getValueLong();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: invokespecial #3                  // Method org/apache/bcel/classfile/ElementValue.getType:()I\n+         1: invokespecial #13                 // Method org/apache/bcel/classfile/ElementValue.getType:()I\n          4: bipush        74\n          6: if_icmpeq     19\n-         9: new           #5                  // class java/lang/IllegalStateException\n+         9: new           #17                 // class java/lang/IllegalStateException\n         12: dup\n-        13: ldc           #18                 // String Dont call getValueLong() on a non LONG ElementValue\n-        15: invokespecial #7                  // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+        13: ldc           #53                 // String Dont call getValueLong() on a non LONG ElementValue\n+        15: invokespecial #21                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n         18: athrow\n         19: aload_0\n-        20: invokespecial #8                  // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n+        20: invokespecial #24                 // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n         23: aload_0\n-        24: invokevirtual #9                  // Method getIndex:()I\n-        27: invokevirtual #19                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(I)Lorg/apache/bcel/classfile/Constant;\n-        30: checkcast     #20                 // class org/apache/bcel/classfile/ConstantLong\n+        24: invokevirtual #28                 // Method getIndex:()I\n+        27: invokevirtual #55                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(I)Lorg/apache/bcel/classfile/Constant;\n+        30: checkcast     #58                 // class org/apache/bcel/classfile/ConstantLong\n         33: astore_1\n         34: aload_1\n-        35: invokevirtual #21                 // Method org/apache/bcel/classfile/ConstantLong.getBytes:()J\n+        35: invokevirtual #60                 // Method org/apache/bcel/classfile/ConstantLong.getBytes:()J\n         38: lreturn\n       LineNumberTable:\n         line 97: 0\n         line 98: 9\n         line 101: 19\n         line 102: 34\n       LocalVariableTable:\n@@ -445,31 +445,31 @@\n \n   public float getValueFloat();\n     descriptor: ()F\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: invokespecial #3                  // Method org/apache/bcel/classfile/ElementValue.getType:()I\n+         1: invokespecial #13                 // Method org/apache/bcel/classfile/ElementValue.getType:()I\n          4: bipush        70\n          6: if_icmpeq     19\n-         9: new           #5                  // class java/lang/IllegalStateException\n+         9: new           #17                 // class java/lang/IllegalStateException\n         12: dup\n-        13: ldc           #22                 // String Dont call getValueFloat() on a non FLOAT ElementValue\n-        15: invokespecial #7                  // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+        13: ldc           #63                 // String Dont call getValueFloat() on a non FLOAT ElementValue\n+        15: invokespecial #21                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n         18: athrow\n         19: aload_0\n-        20: invokespecial #8                  // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n+        20: invokespecial #24                 // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n         23: aload_0\n-        24: invokevirtual #9                  // Method getIndex:()I\n-        27: invokevirtual #19                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(I)Lorg/apache/bcel/classfile/Constant;\n-        30: checkcast     #23                 // class org/apache/bcel/classfile/ConstantFloat\n+        24: invokevirtual #28                 // Method getIndex:()I\n+        27: invokevirtual #55                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(I)Lorg/apache/bcel/classfile/Constant;\n+        30: checkcast     #65                 // class org/apache/bcel/classfile/ConstantFloat\n         33: astore_1\n         34: aload_1\n-        35: invokevirtual #24                 // Method org/apache/bcel/classfile/ConstantFloat.getBytes:()F\n+        35: invokevirtual #67                 // Method org/apache/bcel/classfile/ConstantFloat.getBytes:()F\n         38: freturn\n       LineNumberTable:\n         line 107: 0\n         line 108: 9\n         line 111: 19\n         line 112: 34\n       LocalVariableTable:\n@@ -481,31 +481,31 @@\n \n   public double getValueDouble();\n     descriptor: ()D\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: invokespecial #3                  // Method org/apache/bcel/classfile/ElementValue.getType:()I\n+         1: invokespecial #13                 // Method org/apache/bcel/classfile/ElementValue.getType:()I\n          4: bipush        68\n          6: if_icmpeq     19\n-         9: new           #5                  // class java/lang/IllegalStateException\n+         9: new           #17                 // class java/lang/IllegalStateException\n         12: dup\n-        13: ldc           #25                 // String Dont call getValueDouble() on a non DOUBLE ElementValue\n-        15: invokespecial #7                  // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+        13: ldc           #70                 // String Dont call getValueDouble() on a non DOUBLE ElementValue\n+        15: invokespecial #21                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n         18: athrow\n         19: aload_0\n-        20: invokespecial #8                  // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n+        20: invokespecial #24                 // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n         23: aload_0\n-        24: invokevirtual #9                  // Method getIndex:()I\n-        27: invokevirtual #19                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(I)Lorg/apache/bcel/classfile/Constant;\n-        30: checkcast     #26                 // class org/apache/bcel/classfile/ConstantDouble\n+        24: invokevirtual #28                 // Method getIndex:()I\n+        27: invokevirtual #55                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(I)Lorg/apache/bcel/classfile/Constant;\n+        30: checkcast     #72                 // class org/apache/bcel/classfile/ConstantDouble\n         33: astore_1\n         34: aload_1\n-        35: invokevirtual #27                 // Method org/apache/bcel/classfile/ConstantDouble.getBytes:()D\n+        35: invokevirtual #74                 // Method org/apache/bcel/classfile/ConstantDouble.getBytes:()D\n         38: dreturn\n       LineNumberTable:\n         line 117: 0\n         line 118: 9\n         line 121: 19\n         line 122: 34\n       LocalVariableTable:\n@@ -517,31 +517,31 @@\n \n   public boolean getValueBoolean();\n     descriptor: ()Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: invokespecial #3                  // Method org/apache/bcel/classfile/ElementValue.getType:()I\n+         1: invokespecial #13                 // Method org/apache/bcel/classfile/ElementValue.getType:()I\n          4: bipush        90\n          6: if_icmpeq     19\n-         9: new           #5                  // class java/lang/IllegalStateException\n+         9: new           #17                 // class java/lang/IllegalStateException\n         12: dup\n-        13: ldc           #28                 // String Dont call getValueBoolean() on a non BOOLEAN ElementValue\n-        15: invokespecial #7                  // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+        13: ldc           #77                 // String Dont call getValueBoolean() on a non BOOLEAN ElementValue\n+        15: invokespecial #21                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n         18: athrow\n         19: aload_0\n-        20: invokespecial #8                  // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n+        20: invokespecial #24                 // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n         23: aload_0\n-        24: invokevirtual #9                  // Method getIndex:()I\n-        27: invokevirtual #19                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(I)Lorg/apache/bcel/classfile/Constant;\n-        30: checkcast     #14                 // class org/apache/bcel/classfile/ConstantInteger\n+        24: invokevirtual #28                 // Method getIndex:()I\n+        27: invokevirtual #55                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(I)Lorg/apache/bcel/classfile/Constant;\n+        30: checkcast     #45                 // class org/apache/bcel/classfile/ConstantInteger\n         33: astore_1\n         34: aload_1\n-        35: invokevirtual #15                 // Method org/apache/bcel/classfile/ConstantInteger.getBytes:()I\n+        35: invokevirtual #47                 // Method org/apache/bcel/classfile/ConstantInteger.getBytes:()I\n         38: ifeq          45\n         41: iconst_1\n         42: goto          46\n         45: iconst_0\n         46: ireturn\n       LineNumberTable:\n         line 127: 0\n@@ -562,31 +562,31 @@\n \n   public short getValueShort();\n     descriptor: ()S\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: invokespecial #3                  // Method org/apache/bcel/classfile/ElementValue.getType:()I\n+         1: invokespecial #13                 // Method org/apache/bcel/classfile/ElementValue.getType:()I\n          4: bipush        83\n          6: if_icmpeq     19\n-         9: new           #5                  // class java/lang/IllegalStateException\n+         9: new           #17                 // class java/lang/IllegalStateException\n         12: dup\n-        13: ldc           #29                 // String Dont call getValueShort() on a non SHORT ElementValue\n-        15: invokespecial #7                  // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+        13: ldc           #79                 // String Dont call getValueShort() on a non SHORT ElementValue\n+        15: invokespecial #21                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n         18: athrow\n         19: aload_0\n-        20: invokespecial #8                  // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n+        20: invokespecial #24                 // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n         23: aload_0\n-        24: invokevirtual #9                  // Method getIndex:()I\n-        27: invokevirtual #19                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(I)Lorg/apache/bcel/classfile/Constant;\n-        30: checkcast     #14                 // class org/apache/bcel/classfile/ConstantInteger\n+        24: invokevirtual #28                 // Method getIndex:()I\n+        27: invokevirtual #55                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(I)Lorg/apache/bcel/classfile/Constant;\n+        30: checkcast     #45                 // class org/apache/bcel/classfile/ConstantInteger\n         33: astore_1\n         34: aload_1\n-        35: invokevirtual #15                 // Method org/apache/bcel/classfile/ConstantInteger.getBytes:()I\n+        35: invokevirtual #47                 // Method org/apache/bcel/classfile/ConstantInteger.getBytes:()I\n         38: i2s\n         39: ireturn\n       LineNumberTable:\n         line 137: 0\n         line 138: 9\n         line 141: 19\n         line 142: 34\n@@ -599,32 +599,32 @@\n \n   public java.lang.String toString();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokevirtual #30                 // Method stringifyValue:()Ljava/lang/String;\n+         1: invokevirtual #81                 // Method stringifyValue:()Ljava/lang/String;\n          4: areturn\n       LineNumberTable:\n         line 148: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/bcel/classfile/SimpleElementValue;\n \n   public java.lang.String stringifyValue();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=12, args_size=1\n          0: aload_0\n-         1: invokespecial #8                  // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n+         1: invokespecial #24                 // Method org/apache/bcel/classfile/ElementValue.getConstantPool:()Lorg/apache/bcel/classfile/ConstantPool;\n          4: astore_1\n          5: aload_0\n-         6: invokespecial #3                  // Method org/apache/bcel/classfile/ElementValue.getType:()I\n+         6: invokespecial #13                 // Method org/apache/bcel/classfile/ElementValue.getType:()I\n          9: istore_2\n         10: iload_2\n         11: lookupswitch  { // 9\n                       66: 206\n                       67: 229\n                       68: 136\n                       70: 160\n@@ -633,125 +633,125 @@\n                       83: 183\n                       90: 253\n                      115: 281\n                  default: 301\n             }\n         92: aload_1\n         93: aload_0\n-        94: invokevirtual #9                  // Method getIndex:()I\n+        94: invokevirtual #28                 // Method getIndex:()I\n         97: iconst_3\n-        98: invokevirtual #11                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n-       101: checkcast     #14                 // class org/apache/bcel/classfile/ConstantInteger\n+        98: invokevirtual #33                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n+       101: checkcast     #45                 // class org/apache/bcel/classfile/ConstantInteger\n        104: astore_3\n        105: aload_3\n-       106: invokevirtual #15                 // Method org/apache/bcel/classfile/ConstantInteger.getBytes:()I\n-       109: invokestatic  #31                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;\n+       106: invokevirtual #47                 // Method org/apache/bcel/classfile/ConstantInteger.getBytes:()I\n+       109: invokestatic  #84                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;\n        112: areturn\n        113: aload_1\n        114: aload_0\n-       115: invokevirtual #9                  // Method getIndex:()I\n+       115: invokevirtual #28                 // Method getIndex:()I\n        118: iconst_5\n-       119: invokevirtual #11                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n-       122: checkcast     #20                 // class org/apache/bcel/classfile/ConstantLong\n+       119: invokevirtual #33                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n+       122: checkcast     #58                 // class org/apache/bcel/classfile/ConstantLong\n        125: astore        4\n        127: aload         4\n-       129: invokevirtual #21                 // Method org/apache/bcel/classfile/ConstantLong.getBytes:()J\n-       132: invokestatic  #32                 // Method java/lang/Long.toString:(J)Ljava/lang/String;\n+       129: invokevirtual #60                 // Method org/apache/bcel/classfile/ConstantLong.getBytes:()J\n+       132: invokestatic  #90                 // Method java/lang/Long.toString:(J)Ljava/lang/String;\n        135: areturn\n        136: aload_1\n        137: aload_0\n-       138: invokevirtual #9                  // Method getIndex:()I\n+       138: invokevirtual #28                 // Method getIndex:()I\n        141: bipush        6\n-       143: invokevirtual #11                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n-       146: checkcast     #26                 // class org/apache/bcel/classfile/ConstantDouble\n+       143: invokevirtual #33                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n+       146: checkcast     #72                 // class org/apache/bcel/classfile/ConstantDouble\n        149: astore        5\n        151: aload         5\n-       153: invokevirtual #27                 // Method org/apache/bcel/classfile/ConstantDouble.getBytes:()D\n-       156: invokestatic  #33                 // Method java/lang/Double.toString:(D)Ljava/lang/String;\n+       153: invokevirtual #74                 // Method org/apache/bcel/classfile/ConstantDouble.getBytes:()D\n+       156: invokestatic  #95                 // Method java/lang/Double.toString:(D)Ljava/lang/String;\n        159: areturn\n        160: aload_1\n        161: aload_0\n-       162: invokevirtual #9                  // Method getIndex:()I\n+       162: invokevirtual #28                 // Method getIndex:()I\n        165: iconst_4\n-       166: invokevirtual #11                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n-       169: checkcast     #23                 // class org/apache/bcel/classfile/ConstantFloat\n+       166: invokevirtual #33                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n+       169: checkcast     #65                 // class org/apache/bcel/classfile/ConstantFloat\n        172: astore        6\n        174: aload         6\n-       176: invokevirtual #24                 // Method org/apache/bcel/classfile/ConstantFloat.getBytes:()F\n-       179: invokestatic  #34                 // Method java/lang/Float.toString:(F)Ljava/lang/String;\n+       176: invokevirtual #67                 // Method org/apache/bcel/classfile/ConstantFloat.getBytes:()F\n+       179: invokestatic  #100                // Method java/lang/Float.toString:(F)Ljava/lang/String;\n        182: areturn\n        183: aload_1\n        184: aload_0\n-       185: invokevirtual #9                  // Method getIndex:()I\n+       185: invokevirtual #28                 // Method getIndex:()I\n        188: iconst_3\n-       189: invokevirtual #11                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n-       192: checkcast     #14                 // class org/apache/bcel/classfile/ConstantInteger\n+       189: invokevirtual #33                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n+       192: checkcast     #45                 // class org/apache/bcel/classfile/ConstantInteger\n        195: astore        7\n        197: aload         7\n-       199: invokevirtual #15                 // Method org/apache/bcel/classfile/ConstantInteger.getBytes:()I\n-       202: invokestatic  #31                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;\n+       199: invokevirtual #47                 // Method org/apache/bcel/classfile/ConstantInteger.getBytes:()I\n+       202: invokestatic  #84                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;\n        205: areturn\n        206: aload_1\n        207: aload_0\n-       208: invokevirtual #9                  // Method getIndex:()I\n+       208: invokevirtual #28                 // Method getIndex:()I\n        211: iconst_3\n-       212: invokevirtual #11                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n-       215: checkcast     #14                 // class org/apache/bcel/classfile/ConstantInteger\n+       212: invokevirtual #33                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n+       215: checkcast     #45                 // class org/apache/bcel/classfile/ConstantInteger\n        218: astore        8\n        220: aload         8\n-       222: invokevirtual #15                 // Method org/apache/bcel/classfile/ConstantInteger.getBytes:()I\n-       225: invokestatic  #31                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;\n+       222: invokevirtual #47                 // Method org/apache/bcel/classfile/ConstantInteger.getBytes:()I\n+       225: invokestatic  #84                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;\n        228: areturn\n        229: aload_1\n        230: aload_0\n-       231: invokevirtual #9                  // Method getIndex:()I\n+       231: invokevirtual #28                 // Method getIndex:()I\n        234: iconst_3\n-       235: invokevirtual #11                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n-       238: checkcast     #14                 // class org/apache/bcel/classfile/ConstantInteger\n+       235: invokevirtual #33                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n+       238: checkcast     #45                 // class org/apache/bcel/classfile/ConstantInteger\n        241: astore        9\n        243: aload         9\n-       245: invokevirtual #15                 // Method org/apache/bcel/classfile/ConstantInteger.getBytes:()I\n+       245: invokevirtual #47                 // Method org/apache/bcel/classfile/ConstantInteger.getBytes:()I\n        248: i2c\n-       249: invokestatic  #35                 // Method java/lang/String.valueOf:(C)Ljava/lang/String;\n+       249: invokestatic  #105                // Method java/lang/String.valueOf:(C)Ljava/lang/String;\n        252: areturn\n        253: aload_1\n        254: aload_0\n-       255: invokevirtual #9                  // Method getIndex:()I\n+       255: invokevirtual #28                 // Method getIndex:()I\n        258: iconst_3\n-       259: invokevirtual #11                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n-       262: checkcast     #14                 // class org/apache/bcel/classfile/ConstantInteger\n+       259: invokevirtual #33                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n+       262: checkcast     #45                 // class org/apache/bcel/classfile/ConstantInteger\n        265: astore        10\n        267: aload         10\n-       269: invokevirtual #15                 // Method org/apache/bcel/classfile/ConstantInteger.getBytes:()I\n+       269: invokevirtual #47                 // Method org/apache/bcel/classfile/ConstantInteger.getBytes:()I\n        272: ifne          278\n-       275: ldc           #36                 // String false\n+       275: ldc           #111                // String false\n        277: areturn\n-       278: ldc           #37                 // String true\n+       278: ldc           #113                // String true\n        280: areturn\n        281: aload_1\n        282: aload_0\n-       283: invokevirtual #9                  // Method getIndex:()I\n+       283: invokevirtual #28                 // Method getIndex:()I\n        286: iconst_1\n-       287: invokevirtual #11                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n-       290: checkcast     #12                 // class org/apache/bcel/classfile/ConstantUtf8\n+       287: invokevirtual #33                 // Method org/apache/bcel/classfile/ConstantPool.getConstant:(IB)Lorg/apache/bcel/classfile/Constant;\n+       290: checkcast     #39                 // class org/apache/bcel/classfile/ConstantUtf8\n        293: astore        11\n        295: aload         11\n-       297: invokevirtual #13                 // Method org/apache/bcel/classfile/ConstantUtf8.getBytes:()Ljava/lang/String;\n+       297: invokevirtual #41                 // Method org/apache/bcel/classfile/ConstantUtf8.getBytes:()Ljava/lang/String;\n        300: areturn\n-       301: new           #5                  // class java/lang/IllegalStateException\n+       301: new           #17                 // class java/lang/IllegalStateException\n        304: dup\n-       305: new           #38                 // class java/lang/StringBuilder\n+       305: new           #115                // class java/lang/StringBuilder\n        308: dup\n-       309: invokespecial #39                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       312: ldc           #40                 // String SimpleElementValue class does not know how to stringify type\n-       314: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       309: invokespecial #117                // Method java/lang/StringBuilder.\"<init>\":()V\n+       312: ldc           #120                // String SimpleElementValue class does not know how to stringify type\n+       314: invokevirtual #122                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        317: iload_2\n-       318: invokevirtual #42                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       321: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       324: invokespecial #7                  // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+       318: invokevirtual #126                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       321: invokevirtual #129                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       324: invokespecial #21                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n        327: athrow\n       LineNumberTable:\n         line 155: 0\n         line 156: 5\n         line 157: 10\n         line 160: 92\n         line 162: 105\n@@ -815,19 +815,19 @@\n \n   public void dump(java.io.DataOutputStream) throws java.io.IOException;\n     descriptor: (Ljava/io/DataOutputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=2\n          0: aload_0\n-         1: invokespecial #3                  // Method org/apache/bcel/classfile/ElementValue.getType:()I\n+         1: invokespecial #13                 // Method org/apache/bcel/classfile/ElementValue.getType:()I\n          4: istore_2\n          5: aload_1\n          6: iload_2\n-         7: invokevirtual #44                 // Method java/io/DataOutputStream.writeByte:(I)V\n+         7: invokevirtual #131                // Method java/io/DataOutputStream.writeByte:(I)V\n         10: iload_2\n         11: lookupswitch  { // 9\n                       66: 92\n                       67: 92\n                       68: 92\n                       70: 92\n                       73: 92\n@@ -835,28 +835,28 @@\n                       83: 92\n                       90: 92\n                      115: 92\n                  default: 103\n             }\n         92: aload_1\n         93: aload_0\n-        94: invokevirtual #9                  // Method getIndex:()I\n-        97: invokevirtual #45                 // Method java/io/DataOutputStream.writeShort:(I)V\n+        94: invokevirtual #28                 // Method getIndex:()I\n+        97: invokevirtual #137                // Method java/io/DataOutputStream.writeShort:(I)V\n        100: goto          130\n-       103: new           #5                  // class java/lang/IllegalStateException\n+       103: new           #17                 // class java/lang/IllegalStateException\n        106: dup\n-       107: new           #38                 // class java/lang/StringBuilder\n+       107: new           #115                // class java/lang/StringBuilder\n        110: dup\n-       111: invokespecial #39                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       114: ldc           #46                 // String SimpleElementValue doesnt know how to write out type\n-       116: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       111: invokespecial #117                // Method java/lang/StringBuilder.\"<init>\":()V\n+       114: ldc           #140                // String SimpleElementValue doesnt know how to write out type\n+       116: invokevirtual #122                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        119: iload_2\n-       120: invokevirtual #42                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       123: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       126: invokespecial #7                  // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+       120: invokevirtual #126                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       123: invokevirtual #129                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       126: invokespecial #21                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n        129: athrow\n        130: return\n       LineNumberTable:\n         line 206: 0\n         line 207: 5\n         line 208: 10\n         line 219: 92\n"}]}
