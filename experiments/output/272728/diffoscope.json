{"diffoscope-json-version": 1, "source1": "first/TryHandler.class", "source2": "second/TryHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,93 +1,90 @@\n \n package com.puppycrawl.tools.checkstyle.checks.indentation;\n \n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n \n public class TryHandler extends BlockParentHandler\n {\n-    public TryHandler(final IndentationCheck indentCheck, final DetailAST ast, final AbstractExpressionHandler parent) {\n-        super(indentCheck, \"try\", ast, parent);\n+    public TryHandler(final IndentationCheck indentationCheck, final DetailAST detailAST, final AbstractExpressionHandler abstractExpressionHandler) {\n+        super(indentationCheck, \"try\", detailAST, abstractExpressionHandler);\n     }\n     \n     private DetailAST getTryResLparen() {\n         return this.getMainAst().getFirstChild().getFirstChild();\n     }\n     \n     private DetailAST getTryResRparen() {\n         return this.getMainAst().getFirstChild().getLastChild();\n     }\n     \n-    public IndentLevel getSuggestedChildIndent(final AbstractExpressionHandler child) {\n-        IndentLevel result;\n-        if (child instanceof CatchHandler || child instanceof FinallyHandler || (child instanceof NewHandler && isTryBlocksResourceSpecification(child))) {\n-            result = this.getIndent();\n+    public IndentLevel getSuggestedChildIndent(final AbstractExpressionHandler abstractExpressionHandler) {\n+        IndentLevel indentLevel;\n+        if (abstractExpressionHandler instanceof CatchHandler || abstractExpressionHandler instanceof FinallyHandler || (abstractExpressionHandler instanceof NewHandler && isTryBlocksResourceSpecification(abstractExpressionHandler))) {\n+            indentLevel = this.getIndent();\n         }\n         else {\n-            result = super.getSuggestedChildIndent(child);\n+            indentLevel = super.getSuggestedChildIndent(abstractExpressionHandler);\n         }\n-        return result;\n+        return indentLevel;\n     }\n     \n     public void checkIndentation() {\n         super.checkIndentation();\n         if (this.getMainAst().getFirstChild().getType() == 176) {\n             this.checkTryResParen(this.getTryResLparen(), \"lparen\");\n             this.checkTryResParen(this.getTryResRparen(), \"rparen\");\n             this.checkTryResources(this.getMainAst().getFirstChild());\n         }\n     }\n     \n-    private void checkTryResParen(final DetailAST parenAst, final String subType) {\n-        if (this.isOnStartOfLine(parenAst)) {\n-            final IndentLevel expectedIdent = new IndentLevel(this.getIndent(), new int[] { 0, this.getIndentCheck().getLineWrappingIndentation() });\n-            this.checkChildIndentation(parenAst, subType, expectedIdent);\n+    private void checkTryResParen(final DetailAST detailAST, final String s) {\n+        if (this.isOnStartOfLine(detailAST)) {\n+            this.checkChildIndentation(detailAST, s, new IndentLevel(this.getIndent(), new int[] { 0, this.getIndentCheck().getLineWrappingIndentation() }));\n         }\n     }\n     \n-    private void checkChildIndentation(final DetailAST ast, final String subType, final IndentLevel expectedIdent) {\n+    private void checkChildIndentation(final DetailAST detailAST, final String s, final IndentLevel indentLevel) {\n         if (this.getIndentCheck().isForceStrictCondition()) {\n-            if (!expectedIdent.isAcceptable(this.expandedTabsColumnNo(ast))) {\n-                this.logError(ast, subType, this.expandedTabsColumnNo(ast), expectedIdent);\n+            if (!indentLevel.isAcceptable(this.expandedTabsColumnNo(detailAST))) {\n+                this.logError(detailAST, s, this.expandedTabsColumnNo(detailAST), indentLevel);\n             }\n         }\n-        else if (this.expandedTabsColumnNo(ast) < expectedIdent.getFirstIndentLevel()) {\n-            this.logError(ast, subType, this.expandedTabsColumnNo(ast), expectedIdent);\n+        else if (this.expandedTabsColumnNo(detailAST) < indentLevel.getFirstIndentLevel()) {\n+            this.logError(detailAST, s, this.expandedTabsColumnNo(detailAST), indentLevel);\n         }\n     }\n     \n-    private void checkTryResources(final DetailAST resourcesSpecAst) {\n-        final DetailAST resourcesAst = resourcesSpecAst.findFirstToken(177);\n-        final int indentation = this.getIndent().getFirstIndentLevel() + this.getIndentCheck().getLineWrappingIndentation();\n-        final IndentLevel expectedResourceIndent = new IndentLevel(indentation);\n-        final String subType = \"resource\";\n-        for (DetailAST resourceAst = resourcesAst.getFirstChild(); resourceAst != null; resourceAst = resourceAst.getNextSibling()) {\n-            if (resourceAst.getType() == 178) {\n-                DetailAST nextSibling;\n-                if (resourceAst.getNextSibling() == null) {\n-                    nextSibling = this.getTryResRparen();\n+    private void checkTryResources(final DetailAST detailAST) {\n+        final DetailAST firstToken = detailAST.findFirstToken(177);\n+        final IndentLevel indentLevel = new IndentLevel(this.getIndent().getFirstIndentLevel() + this.getIndentCheck().getLineWrappingIndentation());\n+        for (DetailAST detailAST2 = firstToken.getFirstChild(); detailAST2 != null; detailAST2 = detailAST2.getNextSibling()) {\n+            if (detailAST2.getType() == 178) {\n+                DetailAST detailAST3;\n+                if (detailAST2.getNextSibling() == null) {\n+                    detailAST3 = this.getTryResRparen();\n                 }\n                 else {\n-                    nextSibling = resourceAst.getNextSibling();\n+                    detailAST3 = detailAST2.getNextSibling();\n                 }\n-                if (this.isOnStartOfLine(resourceAst)) {\n-                    this.checkChildIndentation(resourceAst, \"resource\", expectedResourceIndent);\n-                    this.checkWrappingIndentation(resourceAst, nextSibling, this.getIndentCheck().getLineWrappingIndentation(), expectedResourceIndent.getFirstIndentLevel(), true);\n+                if (this.isOnStartOfLine(detailAST2)) {\n+                    this.checkChildIndentation(detailAST2, \"resource\", indentLevel);\n+                    this.checkWrappingIndentation(detailAST2, detailAST3, this.getIndentCheck().getLineWrappingIndentation(), indentLevel.getFirstIndentLevel(), true);\n                 }\n                 else {\n-                    this.checkWrappingIndentation(resourceAst, nextSibling);\n+                    this.checkWrappingIndentation(detailAST2, detailAST3);\n                 }\n             }\n         }\n     }\n     \n-    private static boolean isTryBlocksResourceSpecification(final AbstractExpressionHandler expression) {\n-        boolean isResourceSpecificationExpression = false;\n-        for (DetailAST ast = expression.getMainAst(); ast.getType() != 95; ast = ast.getParent()) {\n-            if (ast.getType() == 176) {\n-                isResourceSpecificationExpression = true;\n+    private static boolean isTryBlocksResourceSpecification(final AbstractExpressionHandler abstractExpressionHandler) {\n+        boolean b = false;\n+        for (DetailAST detailAST = abstractExpressionHandler.getMainAst(); detailAST.getType() != 95; detailAST = detailAST.getParent()) {\n+            if (detailAST.getType() == 176) {\n+                b = true;\n                 break;\n             }\n         }\n-        return isResourceSpecificationExpression;\n+        return b;\n     }\n }\n"}]}
