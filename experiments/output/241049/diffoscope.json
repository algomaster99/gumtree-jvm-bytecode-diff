{"diffoscope-json-version": 1, "source1": "first/POP3Client.class", "source2": "second/POP3Client.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,95 +7,95 @@\n import java.security.NoSuchAlgorithmException;\n import java.security.MessageDigest;\n import java.io.IOException;\n import java.util.StringTokenizer;\n \n public class POP3Client extends POP3\n {\n-    private static POP3MessageInfo parseStatus(final String line) {\n-        final StringTokenizer tokenizer = new StringTokenizer(line);\n-        if (!tokenizer.hasMoreElements()) {\n+    private static POP3MessageInfo parseStatus(final String str) {\n+        final StringTokenizer stringTokenizer = new StringTokenizer(str);\n+        if (!stringTokenizer.hasMoreElements()) {\n             return null;\n         }\n-        int num;\n-        int size = num = 0;\n+        int int1;\n+        int int2;\n         try {\n-            num = Integer.parseInt(tokenizer.nextToken());\n-            if (!tokenizer.hasMoreElements()) {\n+            int1 = Integer.parseInt(stringTokenizer.nextToken());\n+            if (!stringTokenizer.hasMoreElements()) {\n                 return null;\n             }\n-            size = Integer.parseInt(tokenizer.nextToken());\n+            int2 = Integer.parseInt(stringTokenizer.nextToken());\n         }\n-        catch (final NumberFormatException e) {\n+        catch (final NumberFormatException ex) {\n             return null;\n         }\n-        return new POP3MessageInfo(num, size);\n+        return new POP3MessageInfo(int1, int2);\n     }\n     \n-    private static POP3MessageInfo parseUID(String line) {\n-        final StringTokenizer tokenizer = new StringTokenizer(line);\n-        if (!tokenizer.hasMoreElements()) {\n+    private static POP3MessageInfo parseUID(String nextToken) {\n+        final StringTokenizer stringTokenizer = new StringTokenizer(nextToken);\n+        if (!stringTokenizer.hasMoreElements()) {\n             return null;\n         }\n-        int num = 0;\n+        int int1;\n         try {\n-            num = Integer.parseInt(tokenizer.nextToken());\n-            if (!tokenizer.hasMoreElements()) {\n+            int1 = Integer.parseInt(stringTokenizer.nextToken());\n+            if (!stringTokenizer.hasMoreElements()) {\n                 return null;\n             }\n-            line = tokenizer.nextToken();\n+            nextToken = stringTokenizer.nextToken();\n         }\n-        catch (final NumberFormatException e) {\n+        catch (final NumberFormatException ex) {\n             return null;\n         }\n-        return new POP3MessageInfo(num, line);\n+        return new POP3MessageInfo(int1, nextToken);\n     }\n     \n     public boolean capa() throws IOException {\n         if (this.sendCommand(12) == 0) {\n             this.getAdditionalReply();\n             return true;\n         }\n         return false;\n     }\n     \n-    public boolean login(final String username, final String password) throws IOException {\n+    public boolean login(final String s, final String s2) throws IOException {\n         if (this.getState() != 0) {\n             return false;\n         }\n-        if (this.sendCommand(0, username) != 0) {\n+        if (this.sendCommand(0, s) != 0) {\n             return false;\n         }\n-        if (this.sendCommand(1, password) != 0) {\n+        if (this.sendCommand(1, s2) != 0) {\n             return false;\n         }\n         this.setState(1);\n         return true;\n     }\n     \n-    public boolean login(final String username, String timestamp, final String secret) throws IOException, NoSuchAlgorithmException {\n+    public boolean login(final String str, String string, final String str2) throws IOException, NoSuchAlgorithmException {\n         if (this.getState() != 0) {\n             return false;\n         }\n-        final MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n-        timestamp += secret;\n-        final byte[] digest = md5.digest(timestamp.getBytes(this.getCharset()));\n-        final StringBuilder digestBuffer = new StringBuilder(128);\n+        final MessageDigest instance = MessageDigest.getInstance(\"MD5\");\n+        string += str2;\n+        final byte[] digest = instance.digest(string.getBytes(this.getCharset()));\n+        final StringBuilder sb = new StringBuilder(128);\n         for (int i = 0; i < digest.length; ++i) {\n-            final int digit = digest[i] & 0xFF;\n-            if (digit <= 15) {\n-                digestBuffer.append(\"0\");\n+            final int j = digest[i] & 0xFF;\n+            if (j <= 15) {\n+                sb.append(\"0\");\n             }\n-            digestBuffer.append(Integer.toHexString(digit));\n+            sb.append(Integer.toHexString(j));\n         }\n-        final StringBuilder buffer = new StringBuilder(256);\n-        buffer.append(username);\n-        buffer.append(' ');\n-        buffer.append(digestBuffer.toString());\n-        if (this.sendCommand(9, buffer.toString()) != 0) {\n+        final StringBuilder sb2 = new StringBuilder(256);\n+        sb2.append(str);\n+        sb2.append(' ');\n+        sb2.append(sb.toString());\n+        if (this.sendCommand(9, sb2.toString()) != 0) {\n             return false;\n         }\n         this.setState(1);\n         return true;\n     }\n     \n     public boolean logout() throws IOException {\n@@ -106,16 +106,16 @@\n         return this.replyCode == 0;\n     }\n     \n     public boolean noop() throws IOException {\n         return this.getState() == 1 && this.sendCommand(7) == 0;\n     }\n     \n-    public boolean deleteMessage(final int messageId) throws IOException {\n-        return this.getState() == 1 && this.sendCommand(6, Integer.toString(messageId)) == 0;\n+    public boolean deleteMessage(final int i) throws IOException {\n+        return this.getState() == 1 && this.sendCommand(6, Integer.toString(i)) == 0;\n     }\n     \n     public boolean reset() throws IOException {\n         return this.getState() == 1 && this.sendCommand(8) == 0;\n     }\n     \n     public POP3MessageInfo status() throws IOException {\n@@ -124,79 +124,79 @@\n         }\n         if (this.sendCommand(3) != 0) {\n             return null;\n         }\n         return parseStatus(this.lastReplyLine.substring(3));\n     }\n     \n-    public POP3MessageInfo listMessage(final int messageId) throws IOException {\n+    public POP3MessageInfo listMessage(final int i) throws IOException {\n         if (this.getState() != 1) {\n             return null;\n         }\n-        if (this.sendCommand(4, Integer.toString(messageId)) != 0) {\n+        if (this.sendCommand(4, Integer.toString(i)) != 0) {\n             return null;\n         }\n         return parseStatus(this.lastReplyLine.substring(3));\n     }\n     \n     public POP3MessageInfo[] listMessages() throws IOException {\n         if (this.getState() != 1) {\n             return null;\n         }\n         if (this.sendCommand(4) != 0) {\n             return null;\n         }\n         this.getAdditionalReply();\n-        final POP3MessageInfo[] messages = new POP3MessageInfo[this.replyLines.size() - 2];\n-        final ListIterator<String> en = this.replyLines.listIterator(1);\n-        for (int line = 0; line < messages.length; ++line) {\n-            messages[line] = parseStatus(en.next());\n+        final POP3MessageInfo[] array = new POP3MessageInfo[this.replyLines.size() - 2];\n+        final ListIterator listIterator = this.replyLines.listIterator(1);\n+        for (int i = 0; i < array.length; ++i) {\n+            array[i] = parseStatus((String)listIterator.next());\n         }\n-        return messages;\n+        return array;\n     }\n     \n-    public POP3MessageInfo listUniqueIdentifier(final int messageId) throws IOException {\n+    public POP3MessageInfo listUniqueIdentifier(final int i) throws IOException {\n         if (this.getState() != 1) {\n             return null;\n         }\n-        if (this.sendCommand(11, Integer.toString(messageId)) != 0) {\n+        if (this.sendCommand(11, Integer.toString(i)) != 0) {\n             return null;\n         }\n         return parseUID(this.lastReplyLine.substring(3));\n     }\n     \n     public POP3MessageInfo[] listUniqueIdentifiers() throws IOException {\n         if (this.getState() != 1) {\n             return null;\n         }\n         if (this.sendCommand(11) != 0) {\n             return null;\n         }\n         this.getAdditionalReply();\n-        final POP3MessageInfo[] messages = new POP3MessageInfo[this.replyLines.size() - 2];\n-        final ListIterator<String> en = this.replyLines.listIterator(1);\n-        for (int line = 0; line < messages.length; ++line) {\n-            messages[line] = parseUID(en.next());\n+        final POP3MessageInfo[] array = new POP3MessageInfo[this.replyLines.size() - 2];\n+        final ListIterator listIterator = this.replyLines.listIterator(1);\n+        for (int i = 0; i < array.length; ++i) {\n+            array[i] = parseUID((String)listIterator.next());\n         }\n-        return messages;\n+        return array;\n     }\n     \n-    public Reader retrieveMessage(final int messageId) throws IOException {\n+    public Reader retrieveMessage(final int i) throws IOException {\n         if (this.getState() != 1) {\n             return null;\n         }\n-        if (this.sendCommand(5, Integer.toString(messageId)) != 0) {\n+        if (this.sendCommand(5, Integer.toString(i)) != 0) {\n             return null;\n         }\n         return (Reader)new DotTerminatedMessageReader((Reader)this.reader);\n     }\n     \n-    public Reader retrieveMessageTop(final int messageId, final int numLines) throws IOException {\n-        if (numLines < 0 || this.getState() != 1) {\n+    public Reader retrieveMessageTop(final int i, final int j) throws IOException {\n+        if (j < 0 || this.getState() != 1) {\n             return null;\n         }\n-        if (this.sendCommand(10, Integer.toString(messageId) + \" \" + Integer.toString(numLines)) != 0) {\n+        if (this.sendCommand(10, Integer.toString(i) + \" \" + Integer.toString(j)) != 0) {\n             return null;\n         }\n         return (Reader)new DotTerminatedMessageReader((Reader)this.reader);\n     }\n }\n"}]}
