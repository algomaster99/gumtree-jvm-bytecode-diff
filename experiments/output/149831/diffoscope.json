{"diffoscope-json-version": 1, "source1": "first/SevenZMethod.class", "source2": "second/SevenZMethod.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,41 +1,43 @@\n \n package org.apache.commons.compress.archivers.sevenz;\n \n import java.util.Arrays;\n \n public enum SevenZMethod\n {\n-    COPY(new byte[] { 0 }), \n-    LZMA(new byte[] { 3, 1, 1 }), \n-    LZMA2(new byte[] { 33 }), \n-    DEFLATE(new byte[] { 4, 1, 8 }), \n-    DEFLATE64(new byte[] { 4, 1, 9 }), \n-    BZIP2(new byte[] { 4, 2, 2 }), \n-    AES256SHA256(new byte[] { 6, -15, 7, 1 }), \n-    BCJ_X86_FILTER(new byte[] { 3, 3, 1, 3 }), \n-    BCJ_PPC_FILTER(new byte[] { 3, 3, 2, 5 }), \n-    BCJ_IA64_FILTER(new byte[] { 3, 3, 4, 1 }), \n-    BCJ_ARM_FILTER(new byte[] { 3, 3, 5, 1 }), \n-    BCJ_ARM_THUMB_FILTER(new byte[] { 3, 3, 7, 1 }), \n-    BCJ_SPARC_FILTER(new byte[] { 3, 3, 8, 5 }), \n-    DELTA_FILTER(new byte[] { 3 });\n+    COPY(\"COPY\", 0, new byte[1]), \n+    LZMA(\"LZMA\", 1, new byte[] { 3, 1, 1 }), \n+    LZMA2(\"LZMA2\", 2, new byte[] { 33 }), \n+    DEFLATE(\"DEFLATE\", 3, new byte[] { 4, 1, 8 }), \n+    DEFLATE64(\"DEFLATE64\", 4, new byte[] { 4, 1, 9 }), \n+    BZIP2(\"BZIP2\", 5, new byte[] { 4, 2, 2 }), \n+    AES256SHA256(\"AES256SHA256\", 6, new byte[] { 6, -15, 7, 1 }), \n+    BCJ_X86_FILTER(\"BCJ_X86_FILTER\", 7, new byte[] { 3, 3, 1, 3 }), \n+    BCJ_PPC_FILTER(\"BCJ_PPC_FILTER\", 8, new byte[] { 3, 3, 2, 5 }), \n+    BCJ_IA64_FILTER(\"BCJ_IA64_FILTER\", 9, new byte[] { 3, 3, 4, 1 }), \n+    BCJ_ARM_FILTER(\"BCJ_ARM_FILTER\", 10, new byte[] { 3, 3, 5, 1 }), \n+    BCJ_ARM_THUMB_FILTER(\"BCJ_ARM_THUMB_FILTER\", 11, new byte[] { 3, 3, 7, 1 }), \n+    BCJ_SPARC_FILTER(\"BCJ_SPARC_FILTER\", 12, new byte[] { 3, 3, 8, 5 }), \n+    DELTA_FILTER(\"DELTA_FILTER\", 13, new byte[] { 3 });\n     \n     private final byte[] id;\n     \n     static SevenZMethod byId(final byte[] id) {\n-        for (final SevenZMethod m : (SevenZMethod[])SevenZMethod.class.getEnumConstants()) {\n+        SevenZMethod[] array;\n+        for (int length = (array = SevenZMethod.class.getEnumConstants()).length, i = 0; i < length; ++i) {\n+            final SevenZMethod m = array[i];\n             if (Arrays.equals(m.id, id)) {\n                 return m;\n             }\n         }\n         return null;\n     }\n     \n-    private SevenZMethod(final byte[] id) {\n+    private SevenZMethod(final String name, final int ordinal, final byte[] id) {\n         this.id = id;\n     }\n     \n     byte[] getId() {\n         return Arrays.copyOf(this.id, this.id.length);\n     }\n }\n"}]}
