{"diffoscope-json-version": 1, "source1": "first/TABLESWITCH.class", "source2": "second/TABLESWITCH.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,52 +6,49 @@\n import java.io.DataOutputStream;\n \n public class TABLESWITCH extends Select\n {\n     TABLESWITCH() {\n     }\n     \n-    public TABLESWITCH(final int[] match, final InstructionHandle[] targets, final InstructionHandle defaultTarget) {\n-        super((short)170, match, targets, defaultTarget);\n-        final short length = (short)(13 + this.getMatchLength() * 4);\n-        super.setLength((int)length);\n-        this.setFixedLength((int)length);\n+    public TABLESWITCH(final int[] array, final InstructionHandle[] array2, final InstructionHandle instructionHandle) {\n+        super((short)170, array, array2, instructionHandle);\n+        final short n = (short)(13 + this.getMatchLength() * 4);\n+        super.setLength((int)n);\n+        this.setFixedLength((int)n);\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitVariableLengthInstruction((VariableLengthInstruction)this);\n-        v.visitStackConsumer((StackConsumer)this);\n-        v.visitBranchInstruction((BranchInstruction)this);\n-        v.visitSelect((Select)this);\n-        v.visitTABLESWITCH(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitVariableLengthInstruction((VariableLengthInstruction)this);\n+        visitor.visitStackConsumer((StackConsumer)this);\n+        visitor.visitBranchInstruction((BranchInstruction)this);\n+        visitor.visitSelect((Select)this);\n+        visitor.visitTABLESWITCH(this);\n     }\n     \n-    public void dump(final DataOutputStream out) throws IOException {\n-        super.dump(out);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        super.dump(dataOutputStream);\n         final int matchLength = this.getMatchLength();\n-        final int low = (matchLength > 0) ? super.getMatch(0) : 0;\n-        out.writeInt(low);\n-        final int high = (matchLength > 0) ? super.getMatch(matchLength - 1) : 0;\n-        out.writeInt(high);\n+        dataOutputStream.writeInt((matchLength > 0) ? super.getMatch(0) : 0);\n+        dataOutputStream.writeInt((matchLength > 0) ? super.getMatch(matchLength - 1) : 0);\n         for (int i = 0; i < matchLength; ++i) {\n-            out.writeInt(this.setIndices(i, this.getTargetOffset(super.getTarget(i))));\n+            dataOutputStream.writeInt(this.setIndices(i, this.getTargetOffset(super.getTarget(i))));\n         }\n     }\n     \n-    protected void initFromFile(final ByteSequence bytes, final boolean wide) throws IOException {\n-        super.initFromFile(bytes, wide);\n-        final int low = bytes.readInt();\n-        final int high = bytes.readInt();\n-        final int matchLength = high - low + 1;\n+    protected void initFromFile(final ByteSequence byteSequence, final boolean b) throws IOException {\n+        super.initFromFile(byteSequence, b);\n+        final int int1 = byteSequence.readInt();\n+        final int matchLength = byteSequence.readInt() - int1 + 1;\n         this.setMatchLength(matchLength);\n         final short fixedLength = (short)(13 + matchLength * 4);\n         this.setFixedLength((int)fixedLength);\n         super.setLength((int)(short)(fixedLength + super.getPadding()));\n         super.setMatches(new int[matchLength]);\n         super.setIndices(new int[matchLength]);\n         super.setTargets(new InstructionHandle[matchLength]);\n         for (int i = 0; i < matchLength; ++i) {\n-            super.setMatch(i, low + i);\n-            super.setIndices(i, bytes.readInt());\n+            super.setMatch(i, int1 + i);\n+            super.setIndices(i, byteSequence.readInt());\n         }\n     }\n }\n"}]}
