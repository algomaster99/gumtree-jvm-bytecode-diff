{"diffoscope-json-version": 1, "source1": "first/RequireThisCheck$CatchFrame.class", "source2": "second/RequireThisCheck$CatchFrame.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,29 +1,29 @@\n \n package com.puppycrawl.tools.checkstyle.checks.coding;\n \n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n \n private static class CatchFrame extends RequireThisCheck.AbstractFrame\n {\n-    protected CatchFrame(final RequireThisCheck.AbstractFrame parent, final DetailAST ident) {\n-        super(parent, ident);\n+    protected CatchFrame(final RequireThisCheck.AbstractFrame abstractFrame, final DetailAST detailAST) {\n+        super(abstractFrame, detailAST);\n     }\n     \n     public RequireThisCheck.FrameType getType() {\n         return RequireThisCheck.FrameType.CATCH_FRAME;\n     }\n     \n-    protected RequireThisCheck.AbstractFrame getIfContains(final DetailAST identToFind, final boolean lookForMethod) {\n-        RequireThisCheck.AbstractFrame frame;\n-        if (!lookForMethod && this.containsFieldOrVariable(identToFind)) {\n-            frame = this;\n+    protected RequireThisCheck.AbstractFrame getIfContains(final DetailAST detailAST, final boolean b) {\n+        RequireThisCheck.AbstractFrame abstractFrame;\n+        if (!b && this.containsFieldOrVariable(detailAST)) {\n+            abstractFrame = this;\n         }\n         else if (this.getParent().getType() == RequireThisCheck.FrameType.TRY_WITH_RESOURCES_FRAME) {\n-            frame = this.getParent().getParent().getIfContains(identToFind, lookForMethod);\n+            abstractFrame = this.getParent().getParent().getIfContains(detailAST, b);\n         }\n         else {\n-            frame = this.getParent().getIfContains(identToFind, lookForMethod);\n+            abstractFrame = this.getParent().getIfContains(detailAST, b);\n         }\n-        return frame;\n+        return abstractFrame;\n     }\n }\n"}]}
