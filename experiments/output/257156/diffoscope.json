{"diffoscope-json-version": 1, "source1": "first/HuffmanDecoder$UncompressedState.class", "source2": "second/HuffmanDecoder$UncompressedState.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,35 +19,34 @@\n         return (int)Math.min(this.blockLength - this.read, HuffmanDecoder.access$200(this.this$0).bitsAvailable() / 8L);\n     }\n     \n     boolean hasData() {\n         return this.read < this.blockLength;\n     }\n     \n-    int read(final byte[] b, final int off, final int len) throws IOException {\n-        if (len == 0) {\n+    int read(final byte[] b, final int n, final int n2) throws IOException {\n+        if (n2 == 0) {\n             return 0;\n         }\n-        final int max = (int)Math.min(this.blockLength - this.read, len);\n-        int readNow;\n-        for (int readSoFar = 0; readSoFar < max; readSoFar += readNow) {\n+        final int n3 = (int)Math.min(this.blockLength - this.read, n2);\n+        int read;\n+        for (int i = 0; i < n3; i += read) {\n             if (HuffmanDecoder.access$200(this.this$0).bitsCached() > 0) {\n-                final byte next = (byte)HuffmanDecoder.access$600(this.this$0, 8);\n-                b[off + readSoFar] = HuffmanDecoder.access$400(this.this$0).add(next);\n-                readNow = 1;\n+                b[n + i] = HuffmanDecoder.access$400(this.this$0).add((byte)(int)HuffmanDecoder.access$600(this.this$0, 8));\n+                read = 1;\n             }\n             else {\n-                readNow = HuffmanDecoder.access$800(this.this$0).read(b, off + readSoFar, max - readSoFar);\n-                if (readNow == -1) {\n+                read = HuffmanDecoder.access$800(this.this$0).read(b, n + i, n3 - i);\n+                if (read == -1) {\n                     throw new EOFException(\"Truncated Deflate64 Stream\");\n                 }\n-                HuffmanDecoder.access$400(this.this$0).add(b, off + readSoFar, readNow);\n+                HuffmanDecoder.access$400(this.this$0).add(b, n + i, read);\n             }\n-            this.read += readNow;\n+            this.read += read;\n         }\n-        return max;\n+        return n3;\n     }\n     \n     HuffmanState state() {\n         return (this.read < this.blockLength) ? HuffmanState.STORED : HuffmanState.INITIAL;\n     }\n }\n"}]}
