{"diffoscope-json-version": 1, "source1": "first/FixedLengthBlockOutputStream.class", "source2": "second/FixedLengthBlockOutputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,194 +1,194 @@\n-  SHA-256 checksum 488985bba23c41e4a318530bec1aa8e9873b92e8d17151c4efc459b0f4f038c9\n+  SHA-256 checksum a38010ff43ce8f2bb275d0d3f977897634754c82d8e67d36f012a322c4a57606\n   Compiled from \"FixedLengthBlockOutputStream.java\"\n public class org.apache.commons.compress.utils.FixedLengthBlockOutputStream extends java.io.OutputStream implements java.nio.channels.WritableByteChannel\n   minor version: 0\n   major version: 53\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #47                         // org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n-  super_class: #48                        // java/io/OutputStream\n+  this_class: #13                         // org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n+  super_class: #2                         // java/io/OutputStream\n   interfaces: 1, fields: 4, methods: 11, attributes: 2\n Constant pool:\n-    #1 = Methodref          #48.#83       // java/io/OutputStream.\"<init>\":()V\n-    #2 = Class              #84           // java/util/concurrent/atomic/AtomicBoolean\n-    #3 = Methodref          #2.#85        // java/util/concurrent/atomic/AtomicBoolean.\"<init>\":(Z)V\n-    #4 = Fieldref           #47.#86       // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n-    #5 = Class              #87           // java/io/FileOutputStream\n-    #6 = Methodref          #5.#88        // java/io/FileOutputStream.getChannel:()Ljava/nio/channels/FileChannel;\n-    #7 = Fieldref           #47.#89       // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.out:Ljava/nio/channels/WritableByteChannel;\n-    #8 = Methodref          #90.#91       // java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;\n-    #9 = Fieldref           #47.#92       // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.buffer:Ljava/nio/ByteBuffer;\n-   #10 = Class              #93           // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel\n-   #11 = Methodref          #10.#94       // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.\"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$1;)V\n-   #12 = Methodref          #90.#95       // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-   #13 = Fieldref           #47.#96       // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.blockSize:I\n-   #14 = Methodref          #90.#97       // java/nio/ByteBuffer.hasRemaining:()Z\n-   #15 = Methodref          #47.#98       // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.writeBlock:()V\n-   #16 = Methodref          #90.#99       // java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n-   #17 = InterfaceMethodref #49.#100      // java/nio/channels/WritableByteChannel.write:(Ljava/nio/ByteBuffer;)I\n-   #18 = String             #101          // Failed to write %,d bytes atomically. Only wrote  %,d\n-   #19 = Class              #102          // java/lang/Object\n-   #20 = Methodref          #103.#104     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #21 = Methodref          #105.#106     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-   #22 = Class              #107          // java/io/IOException\n-   #23 = Methodref          #22.#108      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #24 = Methodref          #90.#109      // java/nio/ByteBuffer.clear:()Ljava/nio/ByteBuffer;\n-   #25 = Methodref          #47.#110      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.isOpen:()Z\n-   #26 = Class              #111          // java/nio/channels/ClosedChannelException\n-   #27 = Methodref          #26.#83       // java/nio/channels/ClosedChannelException.\"<init>\":()V\n-   #28 = Methodref          #90.#112      // java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n-   #29 = Methodref          #47.#113      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.maybeFlush:()V\n-   #30 = Methodref          #90.#114      // java/nio/ByteBuffer.remaining:()I\n-   #31 = Methodref          #115.#116     // java/lang/Math.min:(II)I\n-   #32 = Methodref          #90.#117      // java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n-   #33 = Methodref          #90.#118      // java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n-   #34 = Methodref          #90.#119      // java/nio/ByteBuffer.limit:()I\n-   #35 = Methodref          #90.#120      // java/nio/ByteBuffer.position:()I\n-   #36 = Methodref          #90.#121      // java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n-   #37 = InterfaceMethodref #49.#110      // java/nio/channels/WritableByteChannel.isOpen:()Z\n-   #38 = Methodref          #2.#122       // java/util/concurrent/atomic/AtomicBoolean.set:(Z)V\n-   #39 = Methodref          #2.#123       // java/util/concurrent/atomic/AtomicBoolean.get:()Z\n-   #40 = Methodref          #47.#124      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.padBlock:()V\n-   #41 = Methodref          #2.#125       // java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z\n-   #42 = Methodref          #47.#126      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.flushBlock:()V\n-   #43 = InterfaceMethodref #49.#127      // java/nio/channels/WritableByteChannel.close:()V\n-   #44 = Methodref          #128.#129     // java/nio/ByteOrder.nativeOrder:()Ljava/nio/ByteOrder;\n-   #45 = Methodref          #90.#130      // java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n-   #46 = Methodref          #90.#131      // java/nio/ByteBuffer.putLong:(J)Ljava/nio/ByteBuffer;\n-   #47 = Class              #132          // org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n-   #48 = Class              #133          // java/io/OutputStream\n-   #49 = Class              #134          // java/nio/channels/WritableByteChannel\n-   #50 = Class              #135          // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$1\n-   #51 = Utf8               InnerClasses\n-   #52 = Utf8               BufferAtATimeOutputChannel\n-   #53 = Utf8               out\n-   #54 = Utf8               Ljava/nio/channels/WritableByteChannel;\n-   #55 = Utf8               blockSize\n-   #56 = Utf8               I\n-   #57 = Utf8               buffer\n-   #58 = Utf8               Ljava/nio/ByteBuffer;\n-   #59 = Utf8               closed\n-   #60 = Utf8               Ljava/util/concurrent/atomic/AtomicBoolean;\n-   #61 = Utf8               <init>\n-   #62 = Utf8               (Ljava/io/OutputStream;I)V\n-   #63 = Utf8               Code\n-   #64 = Utf8               LineNumberTable\n-   #65 = Utf8               StackMapTable\n-   #66 = Utf8               (Ljava/nio/channels/WritableByteChannel;I)V\n-   #67 = Utf8               maybeFlush\n-   #68 = Utf8               ()V\n-   #69 = Utf8               Exceptions\n-   #70 = Utf8               writeBlock\n-   #71 = Utf8               write\n-   #72 = Utf8               (I)V\n-   #73 = Utf8               ([BII)V\n-   #74 = Utf8               (Ljava/nio/ByteBuffer;)I\n-   #75 = Utf8               isOpen\n-   #76 = Utf8               ()Z\n-   #77 = Utf8               flushBlock\n-   #78 = Utf8               close\n-   #79 = Class              #136          // java/lang/Throwable\n-   #80 = Utf8               padBlock\n-   #81 = Utf8               SourceFile\n-   #82 = Utf8               FixedLengthBlockOutputStream.java\n-   #83 = NameAndType        #61:#68       // \"<init>\":()V\n-   #84 = Utf8               java/util/concurrent/atomic/AtomicBoolean\n-   #85 = NameAndType        #61:#137      // \"<init>\":(Z)V\n-   #86 = NameAndType        #59:#60       // closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n-   #87 = Utf8               java/io/FileOutputStream\n-   #88 = NameAndType        #138:#139     // getChannel:()Ljava/nio/channels/FileChannel;\n-   #89 = NameAndType        #53:#54       // out:Ljava/nio/channels/WritableByteChannel;\n-   #90 = Class              #140          // java/nio/ByteBuffer\n-   #91 = NameAndType        #141:#142     // allocateDirect:(I)Ljava/nio/ByteBuffer;\n-   #92 = NameAndType        #57:#58       // buffer:Ljava/nio/ByteBuffer;\n-   #93 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel\n-   #94 = NameAndType        #61:#143      // \"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$1;)V\n-   #95 = NameAndType        #144:#142     // allocate:(I)Ljava/nio/ByteBuffer;\n-   #96 = NameAndType        #55:#56       // blockSize:I\n-   #97 = NameAndType        #145:#76      // hasRemaining:()Z\n-   #98 = NameAndType        #70:#68       // writeBlock:()V\n-   #99 = NameAndType        #146:#147     // flip:()Ljava/nio/ByteBuffer;\n-  #100 = NameAndType        #71:#74       // write:(Ljava/nio/ByteBuffer;)I\n-  #101 = Utf8               Failed to write %,d bytes atomically. Only wrote  %,d\n-  #102 = Utf8               java/lang/Object\n-  #103 = Class              #148          // java/lang/Integer\n-  #104 = NameAndType        #149:#150     // valueOf:(I)Ljava/lang/Integer;\n-  #105 = Class              #151          // java/lang/String\n-  #106 = NameAndType        #152:#153     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #107 = Utf8               java/io/IOException\n-  #108 = NameAndType        #61:#154      // \"<init>\":(Ljava/lang/String;)V\n-  #109 = NameAndType        #155:#147     // clear:()Ljava/nio/ByteBuffer;\n-  #110 = NameAndType        #75:#76       // isOpen:()Z\n-  #111 = Utf8               java/nio/channels/ClosedChannelException\n-  #112 = NameAndType        #156:#157     // put:(B)Ljava/nio/ByteBuffer;\n-  #113 = NameAndType        #67:#68       // maybeFlush:()V\n-  #114 = NameAndType        #158:#159     // remaining:()I\n-  #115 = Class              #160          // java/lang/Math\n-  #116 = NameAndType        #161:#162     // min:(II)I\n-  #117 = NameAndType        #156:#163     // put:([BII)Ljava/nio/ByteBuffer;\n-  #118 = NameAndType        #156:#164     // put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n-  #119 = NameAndType        #165:#159     // limit:()I\n-  #120 = NameAndType        #166:#159     // position:()I\n-  #121 = NameAndType        #165:#142     // limit:(I)Ljava/nio/ByteBuffer;\n-  #122 = NameAndType        #167:#137     // set:(Z)V\n-  #123 = NameAndType        #168:#76      // get:()Z\n-  #124 = NameAndType        #80:#68       // padBlock:()V\n-  #125 = NameAndType        #169:#170     // compareAndSet:(ZZ)Z\n-  #126 = NameAndType        #77:#68       // flushBlock:()V\n-  #127 = NameAndType        #78:#68       // close:()V\n-  #128 = Class              #171          // java/nio/ByteOrder\n-  #129 = NameAndType        #172:#173     // nativeOrder:()Ljava/nio/ByteOrder;\n-  #130 = NameAndType        #174:#175     // order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n-  #131 = NameAndType        #176:#177     // putLong:(J)Ljava/nio/ByteBuffer;\n-  #132 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n-  #133 = Utf8               java/io/OutputStream\n-  #134 = Utf8               java/nio/channels/WritableByteChannel\n-  #135 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream$1\n-  #136 = Utf8               java/lang/Throwable\n-  #137 = Utf8               (Z)V\n-  #138 = Utf8               getChannel\n-  #139 = Utf8               ()Ljava/nio/channels/FileChannel;\n-  #140 = Utf8               java/nio/ByteBuffer\n-  #141 = Utf8               allocateDirect\n-  #142 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #143 = Utf8               (Ljava/io/OutputStream;Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$1;)V\n-  #144 = Utf8               allocate\n-  #145 = Utf8               hasRemaining\n-  #146 = Utf8               flip\n-  #147 = Utf8               ()Ljava/nio/ByteBuffer;\n-  #148 = Utf8               java/lang/Integer\n-  #149 = Utf8               valueOf\n-  #150 = Utf8               (I)Ljava/lang/Integer;\n-  #151 = Utf8               java/lang/String\n-  #152 = Utf8               format\n-  #153 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #154 = Utf8               (Ljava/lang/String;)V\n-  #155 = Utf8               clear\n-  #156 = Utf8               put\n-  #157 = Utf8               (B)Ljava/nio/ByteBuffer;\n-  #158 = Utf8               remaining\n-  #159 = Utf8               ()I\n-  #160 = Utf8               java/lang/Math\n-  #161 = Utf8               min\n-  #162 = Utf8               (II)I\n-  #163 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n-  #164 = Utf8               (Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n-  #165 = Utf8               limit\n-  #166 = Utf8               position\n-  #167 = Utf8               set\n-  #168 = Utf8               get\n-  #169 = Utf8               compareAndSet\n-  #170 = Utf8               (ZZ)Z\n-  #171 = Utf8               java/nio/ByteOrder\n-  #172 = Utf8               nativeOrder\n-  #173 = Utf8               ()Ljava/nio/ByteOrder;\n-  #174 = Utf8               order\n-  #175 = Utf8               (Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n-  #176 = Utf8               putLong\n-  #177 = Utf8               (J)Ljava/nio/ByteBuffer;\n+    #1 = Methodref          #2.#3         // java/io/OutputStream.\"<init>\":()V\n+    #2 = Class              #4            // java/io/OutputStream\n+    #3 = NameAndType        #5:#6         // \"<init>\":()V\n+    #4 = Utf8               java/io/OutputStream\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ()V\n+    #7 = Class              #8            // java/util/concurrent/atomic/AtomicBoolean\n+    #8 = Utf8               java/util/concurrent/atomic/AtomicBoolean\n+    #9 = Methodref          #7.#10        // java/util/concurrent/atomic/AtomicBoolean.\"<init>\":(Z)V\n+   #10 = NameAndType        #5:#11        // \"<init>\":(Z)V\n+   #11 = Utf8               (Z)V\n+   #12 = Fieldref           #13.#14       // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+   #13 = Class              #15           // org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n+   #14 = NameAndType        #16:#17       // closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+   #15 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n+   #16 = Utf8               closed\n+   #17 = Utf8               Ljava/util/concurrent/atomic/AtomicBoolean;\n+   #18 = Class              #19           // java/io/FileOutputStream\n+   #19 = Utf8               java/io/FileOutputStream\n+   #20 = Methodref          #18.#21       // java/io/FileOutputStream.getChannel:()Ljava/nio/channels/FileChannel;\n+   #21 = NameAndType        #22:#23       // getChannel:()Ljava/nio/channels/FileChannel;\n+   #22 = Utf8               getChannel\n+   #23 = Utf8               ()Ljava/nio/channels/FileChannel;\n+   #24 = Fieldref           #13.#25       // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.out:Ljava/nio/channels/WritableByteChannel;\n+   #25 = NameAndType        #26:#27       // out:Ljava/nio/channels/WritableByteChannel;\n+   #26 = Utf8               out\n+   #27 = Utf8               Ljava/nio/channels/WritableByteChannel;\n+   #28 = Methodref          #29.#30       // java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;\n+   #29 = Class              #31           // java/nio/ByteBuffer\n+   #30 = NameAndType        #32:#33       // allocateDirect:(I)Ljava/nio/ByteBuffer;\n+   #31 = Utf8               java/nio/ByteBuffer\n+   #32 = Utf8               allocateDirect\n+   #33 = Utf8               (I)Ljava/nio/ByteBuffer;\n+   #34 = Fieldref           #13.#35       // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.buffer:Ljava/nio/ByteBuffer;\n+   #35 = NameAndType        #36:#37       // buffer:Ljava/nio/ByteBuffer;\n+   #36 = Utf8               buffer\n+   #37 = Utf8               Ljava/nio/ByteBuffer;\n+   #38 = Class              #39           // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel\n+   #39 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel\n+   #40 = Methodref          #38.#41       // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.\"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$1;)V\n+   #41 = NameAndType        #5:#42        // \"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$1;)V\n+   #42 = Utf8               (Ljava/io/OutputStream;Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$1;)V\n+   #43 = Methodref          #29.#44       // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+   #44 = NameAndType        #45:#33       // allocate:(I)Ljava/nio/ByteBuffer;\n+   #45 = Utf8               allocate\n+   #46 = Fieldref           #13.#47       // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.blockSize:I\n+   #47 = NameAndType        #48:#49       // blockSize:I\n+   #48 = Utf8               blockSize\n+   #49 = Utf8               I\n+   #50 = Methodref          #29.#51       // java/nio/ByteBuffer.hasRemaining:()Z\n+   #51 = NameAndType        #52:#53       // hasRemaining:()Z\n+   #52 = Utf8               hasRemaining\n+   #53 = Utf8               ()Z\n+   #54 = Methodref          #13.#55       // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.writeBlock:()V\n+   #55 = NameAndType        #56:#6        // writeBlock:()V\n+   #56 = Utf8               writeBlock\n+   #57 = Methodref          #29.#58       // java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+   #58 = NameAndType        #59:#60       // flip:()Ljava/nio/ByteBuffer;\n+   #59 = Utf8               flip\n+   #60 = Utf8               ()Ljava/nio/ByteBuffer;\n+   #61 = InterfaceMethodref #62.#63       // java/nio/channels/WritableByteChannel.write:(Ljava/nio/ByteBuffer;)I\n+   #62 = Class              #64           // java/nio/channels/WritableByteChannel\n+   #63 = NameAndType        #65:#66       // write:(Ljava/nio/ByteBuffer;)I\n+   #64 = Utf8               java/nio/channels/WritableByteChannel\n+   #65 = Utf8               write\n+   #66 = Utf8               (Ljava/nio/ByteBuffer;)I\n+   #67 = String             #68           // Failed to write %,d bytes atomically. Only wrote  %,d\n+   #68 = Utf8               Failed to write %,d bytes atomically. Only wrote  %,d\n+   #69 = Class              #70           // java/lang/Object\n+   #70 = Utf8               java/lang/Object\n+   #71 = Methodref          #72.#73       // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+   #72 = Class              #74           // java/lang/Integer\n+   #73 = NameAndType        #75:#76       // valueOf:(I)Ljava/lang/Integer;\n+   #74 = Utf8               java/lang/Integer\n+   #75 = Utf8               valueOf\n+   #76 = Utf8               (I)Ljava/lang/Integer;\n+   #77 = Methodref          #78.#79       // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+   #78 = Class              #80           // java/lang/String\n+   #79 = NameAndType        #81:#82       // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+   #80 = Utf8               java/lang/String\n+   #81 = Utf8               format\n+   #82 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+   #83 = Class              #84           // java/io/IOException\n+   #84 = Utf8               java/io/IOException\n+   #85 = Methodref          #83.#86       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #86 = NameAndType        #5:#87        // \"<init>\":(Ljava/lang/String;)V\n+   #87 = Utf8               (Ljava/lang/String;)V\n+   #88 = Methodref          #29.#89       // java/nio/ByteBuffer.clear:()Ljava/nio/ByteBuffer;\n+   #89 = NameAndType        #90:#60       // clear:()Ljava/nio/ByteBuffer;\n+   #90 = Utf8               clear\n+   #91 = Methodref          #13.#92       // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.isOpen:()Z\n+   #92 = NameAndType        #93:#53       // isOpen:()Z\n+   #93 = Utf8               isOpen\n+   #94 = Class              #95           // java/nio/channels/ClosedChannelException\n+   #95 = Utf8               java/nio/channels/ClosedChannelException\n+   #96 = Methodref          #94.#3        // java/nio/channels/ClosedChannelException.\"<init>\":()V\n+   #97 = Methodref          #29.#98       // java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n+   #98 = NameAndType        #99:#100      // put:(B)Ljava/nio/ByteBuffer;\n+   #99 = Utf8               put\n+  #100 = Utf8               (B)Ljava/nio/ByteBuffer;\n+  #101 = Methodref          #13.#102      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.maybeFlush:()V\n+  #102 = NameAndType        #103:#6       // maybeFlush:()V\n+  #103 = Utf8               maybeFlush\n+  #104 = Methodref          #29.#105      // java/nio/ByteBuffer.remaining:()I\n+  #105 = NameAndType        #106:#107     // remaining:()I\n+  #106 = Utf8               remaining\n+  #107 = Utf8               ()I\n+  #108 = Methodref          #109.#110     // java/lang/Math.min:(II)I\n+  #109 = Class              #111          // java/lang/Math\n+  #110 = NameAndType        #112:#113     // min:(II)I\n+  #111 = Utf8               java/lang/Math\n+  #112 = Utf8               min\n+  #113 = Utf8               (II)I\n+  #114 = Methodref          #29.#115      // java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n+  #115 = NameAndType        #99:#116      // put:([BII)Ljava/nio/ByteBuffer;\n+  #116 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n+  #117 = Methodref          #29.#118      // java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n+  #118 = NameAndType        #99:#119      // put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n+  #119 = Utf8               (Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n+  #120 = Methodref          #29.#121      // java/nio/ByteBuffer.limit:()I\n+  #121 = NameAndType        #122:#107     // limit:()I\n+  #122 = Utf8               limit\n+  #123 = Methodref          #29.#124      // java/nio/ByteBuffer.position:()I\n+  #124 = NameAndType        #125:#107     // position:()I\n+  #125 = Utf8               position\n+  #126 = Methodref          #29.#127      // java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n+  #127 = NameAndType        #122:#33      // limit:(I)Ljava/nio/ByteBuffer;\n+  #128 = InterfaceMethodref #62.#92       // java/nio/channels/WritableByteChannel.isOpen:()Z\n+  #129 = Methodref          #7.#130       // java/util/concurrent/atomic/AtomicBoolean.set:(Z)V\n+  #130 = NameAndType        #131:#11      // set:(Z)V\n+  #131 = Utf8               set\n+  #132 = Methodref          #7.#133       // java/util/concurrent/atomic/AtomicBoolean.get:()Z\n+  #133 = NameAndType        #134:#53      // get:()Z\n+  #134 = Utf8               get\n+  #135 = Methodref          #13.#136      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.padBlock:()V\n+  #136 = NameAndType        #137:#6       // padBlock:()V\n+  #137 = Utf8               padBlock\n+  #138 = Methodref          #7.#139       // java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z\n+  #139 = NameAndType        #140:#141     // compareAndSet:(ZZ)Z\n+  #140 = Utf8               compareAndSet\n+  #141 = Utf8               (ZZ)Z\n+  #142 = Methodref          #13.#143      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.flushBlock:()V\n+  #143 = NameAndType        #144:#6       // flushBlock:()V\n+  #144 = Utf8               flushBlock\n+  #145 = InterfaceMethodref #62.#146      // java/nio/channels/WritableByteChannel.close:()V\n+  #146 = NameAndType        #147:#6       // close:()V\n+  #147 = Utf8               close\n+  #148 = Methodref          #149.#150     // java/nio/ByteOrder.nativeOrder:()Ljava/nio/ByteOrder;\n+  #149 = Class              #151          // java/nio/ByteOrder\n+  #150 = NameAndType        #152:#153     // nativeOrder:()Ljava/nio/ByteOrder;\n+  #151 = Utf8               java/nio/ByteOrder\n+  #152 = Utf8               nativeOrder\n+  #153 = Utf8               ()Ljava/nio/ByteOrder;\n+  #154 = Methodref          #29.#155      // java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+  #155 = NameAndType        #156:#157     // order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+  #156 = Utf8               order\n+  #157 = Utf8               (Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+  #158 = Methodref          #29.#159      // java/nio/ByteBuffer.putLong:(J)Ljava/nio/ByteBuffer;\n+  #159 = NameAndType        #160:#161     // putLong:(J)Ljava/nio/ByteBuffer;\n+  #160 = Utf8               putLong\n+  #161 = Utf8               (J)Ljava/nio/ByteBuffer;\n+  #162 = Utf8               (Ljava/io/OutputStream;I)V\n+  #163 = Utf8               Code\n+  #164 = Utf8               LineNumberTable\n+  #165 = Utf8               StackMapTable\n+  #166 = Utf8               (Ljava/nio/channels/WritableByteChannel;I)V\n+  #167 = Utf8               Exceptions\n+  #168 = Utf8               (I)V\n+  #169 = Utf8               ([BII)V\n+  #170 = Class              #171          // java/lang/Throwable\n+  #171 = Utf8               java/lang/Throwable\n+  #172 = Utf8               SourceFile\n+  #173 = Utf8               FixedLengthBlockOutputStream.java\n+  #174 = Utf8               InnerClasses\n+  #175 = Utf8               BufferAtATimeOutputChannel\n+  #176 = Class              #177          // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$1\n+  #177 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream$1\n {\n   private final java.nio.channels.WritableByteChannel out;\n     descriptor: Ljava/nio/channels/WritableByteChannel;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final int blockSize;\n     descriptor: I\n@@ -206,48 +206,48 @@\n     descriptor: (Ljava/io/OutputStream;I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=4, args_size=3\n          0: aload_0\n          1: invokespecial #1                  // Method java/io/OutputStream.\"<init>\":()V\n          4: aload_0\n-         5: new           #2                  // class java/util/concurrent/atomic/AtomicBoolean\n+         5: new           #7                  // class java/util/concurrent/atomic/AtomicBoolean\n          8: dup\n          9: iconst_0\n-        10: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicBoolean.\"<init>\":(Z)V\n-        13: putfield      #4                  // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+        10: invokespecial #9                  // Method java/util/concurrent/atomic/AtomicBoolean.\"<init>\":(Z)V\n+        13: putfield      #12                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n         16: aload_1\n-        17: instanceof    #5                  // class java/io/FileOutputStream\n+        17: instanceof    #18                 // class java/io/FileOutputStream\n         20: ifeq          47\n         23: aload_1\n-        24: checkcast     #5                  // class java/io/FileOutputStream\n+        24: checkcast     #18                 // class java/io/FileOutputStream\n         27: astore_3\n         28: aload_0\n         29: aload_3\n-        30: invokevirtual #6                  // Method java/io/FileOutputStream.getChannel:()Ljava/nio/channels/FileChannel;\n-        33: putfield      #7                  // Field out:Ljava/nio/channels/WritableByteChannel;\n+        30: invokevirtual #20                 // Method java/io/FileOutputStream.getChannel:()Ljava/nio/channels/FileChannel;\n+        33: putfield      #24                 // Field out:Ljava/nio/channels/WritableByteChannel;\n         36: aload_0\n         37: iload_2\n-        38: invokestatic  #8                  // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;\n-        41: putfield      #9                  // Field buffer:Ljava/nio/ByteBuffer;\n+        38: invokestatic  #28                 // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;\n+        41: putfield      #34                 // Field buffer:Ljava/nio/ByteBuffer;\n         44: goto          68\n         47: aload_0\n-        48: new           #10                 // class org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel\n+        48: new           #38                 // class org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel\n         51: dup\n         52: aload_1\n         53: aconst_null\n-        54: invokespecial #11                 // Method org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.\"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$1;)V\n-        57: putfield      #7                  // Field out:Ljava/nio/channels/WritableByteChannel;\n+        54: invokespecial #40                 // Method org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.\"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$1;)V\n+        57: putfield      #24                 // Field out:Ljava/nio/channels/WritableByteChannel;\n         60: aload_0\n         61: iload_2\n-        62: invokestatic  #12                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-        65: putfield      #9                  // Field buffer:Ljava/nio/ByteBuffer;\n+        62: invokestatic  #43                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+        65: putfield      #34                 // Field buffer:Ljava/nio/ByteBuffer;\n         68: aload_0\n         69: iload_2\n-        70: putfield      #13                 // Field blockSize:I\n+        70: putfield      #46                 // Field blockSize:I\n         73: return\n       LineNumberTable:\n         line 62: 0\n         line 55: 4\n         line 63: 16\n         line 64: 23\n         line 65: 28\n@@ -268,29 +268,29 @@\n     descriptor: (Ljava/nio/channels/WritableByteChannel;I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n          1: invokespecial #1                  // Method java/io/OutputStream.\"<init>\":()V\n          4: aload_0\n-         5: new           #2                  // class java/util/concurrent/atomic/AtomicBoolean\n+         5: new           #7                  // class java/util/concurrent/atomic/AtomicBoolean\n          8: dup\n          9: iconst_0\n-        10: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicBoolean.\"<init>\":(Z)V\n-        13: putfield      #4                  // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+        10: invokespecial #9                  // Method java/util/concurrent/atomic/AtomicBoolean.\"<init>\":(Z)V\n+        13: putfield      #12                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n         16: aload_0\n         17: aload_1\n-        18: putfield      #7                  // Field out:Ljava/nio/channels/WritableByteChannel;\n+        18: putfield      #24                 // Field out:Ljava/nio/channels/WritableByteChannel;\n         21: aload_0\n         22: iload_2\n-        23: putfield      #13                 // Field blockSize:I\n+        23: putfield      #46                 // Field blockSize:I\n         26: aload_0\n         27: iload_2\n-        28: invokestatic  #8                  // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;\n-        31: putfield      #9                  // Field buffer:Ljava/nio/ByteBuffer;\n+        28: invokestatic  #28                 // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;\n+        31: putfield      #34                 // Field buffer:Ljava/nio/ByteBuffer;\n         34: return\n       LineNumberTable:\n         line 78: 0\n         line 55: 4\n         line 79: 16\n         line 80: 21\n         line 81: 26\n@@ -298,19 +298,19 @@\n \n   private void maybeFlush() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #9                  // Field buffer:Ljava/nio/ByteBuffer;\n-         4: invokevirtual #14                 // Method java/nio/ByteBuffer.hasRemaining:()Z\n+         1: getfield      #34                 // Field buffer:Ljava/nio/ByteBuffer;\n+         4: invokevirtual #50                 // Method java/nio/ByteBuffer.hasRemaining:()Z\n          7: ifne          14\n         10: aload_0\n-        11: invokespecial #15                 // Method writeBlock:()V\n+        11: invokespecial #54                 // Method writeBlock:()V\n         14: return\n       LineNumberTable:\n         line 85: 0\n         line 86: 10\n         line 88: 14\n       StackMapTable: number_of_entries = 1\n         frame_type = 14 /* same */\n@@ -319,57 +319,57 @@\n \n   private void writeBlock() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=4, args_size=1\n          0: aload_0\n-         1: getfield      #9                  // Field buffer:Ljava/nio/ByteBuffer;\n-         4: invokevirtual #16                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+         1: getfield      #34                 // Field buffer:Ljava/nio/ByteBuffer;\n+         4: invokevirtual #57                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n          7: pop\n          8: aload_0\n-         9: getfield      #7                  // Field out:Ljava/nio/channels/WritableByteChannel;\n+         9: getfield      #24                 // Field out:Ljava/nio/channels/WritableByteChannel;\n         12: aload_0\n-        13: getfield      #9                  // Field buffer:Ljava/nio/ByteBuffer;\n-        16: invokeinterface #17,  2           // InterfaceMethod java/nio/channels/WritableByteChannel.write:(Ljava/nio/ByteBuffer;)I\n+        13: getfield      #34                 // Field buffer:Ljava/nio/ByteBuffer;\n+        16: invokeinterface #61,  2           // InterfaceMethod java/nio/channels/WritableByteChannel.write:(Ljava/nio/ByteBuffer;)I\n         21: istore_1\n         22: aload_0\n-        23: getfield      #9                  // Field buffer:Ljava/nio/ByteBuffer;\n-        26: invokevirtual #14                 // Method java/nio/ByteBuffer.hasRemaining:()Z\n+        23: getfield      #34                 // Field buffer:Ljava/nio/ByteBuffer;\n+        26: invokevirtual #50                 // Method java/nio/ByteBuffer.hasRemaining:()Z\n         29: istore_2\n         30: iload_1\n         31: aload_0\n-        32: getfield      #13                 // Field blockSize:I\n+        32: getfield      #46                 // Field blockSize:I\n         35: if_icmpne     42\n         38: iload_2\n         39: ifeq          78\n-        42: ldc           #18                 // String Failed to write %,d bytes atomically. Only wrote  %,d\n+        42: ldc           #67                 // String Failed to write %,d bytes atomically. Only wrote  %,d\n         44: iconst_2\n-        45: anewarray     #19                 // class java/lang/Object\n+        45: anewarray     #69                 // class java/lang/Object\n         48: dup\n         49: iconst_0\n         50: aload_0\n-        51: getfield      #13                 // Field blockSize:I\n-        54: invokestatic  #20                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+        51: getfield      #46                 // Field blockSize:I\n+        54: invokestatic  #71                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n         57: aastore\n         58: dup\n         59: iconst_1\n         60: iload_1\n-        61: invokestatic  #20                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+        61: invokestatic  #71                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n         64: aastore\n-        65: invokestatic  #21                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+        65: invokestatic  #77                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n         68: astore_3\n-        69: new           #22                 // class java/io/IOException\n+        69: new           #83                 // class java/io/IOException\n         72: dup\n         73: aload_3\n-        74: invokespecial #23                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        74: invokespecial #85                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         77: athrow\n         78: aload_0\n-        79: getfield      #9                  // Field buffer:Ljava/nio/ByteBuffer;\n-        82: invokevirtual #24                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/ByteBuffer;\n+        79: getfield      #34                 // Field buffer:Ljava/nio/ByteBuffer;\n+        82: invokevirtual #88                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/ByteBuffer;\n         85: pop\n         86: return\n       LineNumberTable:\n         line 91: 0\n         line 92: 8\n         line 93: 22\n         line 94: 30\n@@ -389,28 +389,28 @@\n \n   public void write(int) throws java.io.IOException;\n     descriptor: (I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n-         1: invokevirtual #25                 // Method isOpen:()Z\n+         1: invokevirtual #91                 // Method isOpen:()Z\n          4: ifne          15\n-         7: new           #26                 // class java/nio/channels/ClosedChannelException\n+         7: new           #94                 // class java/nio/channels/ClosedChannelException\n         10: dup\n-        11: invokespecial #27                 // Method java/nio/channels/ClosedChannelException.\"<init>\":()V\n+        11: invokespecial #96                 // Method java/nio/channels/ClosedChannelException.\"<init>\":()V\n         14: athrow\n         15: aload_0\n-        16: getfield      #9                  // Field buffer:Ljava/nio/ByteBuffer;\n+        16: getfield      #34                 // Field buffer:Ljava/nio/ByteBuffer;\n         19: iload_1\n         20: i2b\n-        21: invokevirtual #28                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n+        21: invokevirtual #97                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n         24: pop\n         25: aload_0\n-        26: invokespecial #29                 // Method maybeFlush:()V\n+        26: invokespecial #101                // Method maybeFlush:()V\n         29: return\n       LineNumberTable:\n         line 105: 0\n         line 106: 7\n         line 108: 15\n         line 109: 25\n         line 110: 29\n@@ -421,41 +421,41 @@\n \n   public void write(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=7, args_size=4\n          0: aload_0\n-         1: invokevirtual #25                 // Method isOpen:()Z\n+         1: invokevirtual #91                 // Method isOpen:()Z\n          4: ifne          15\n-         7: new           #26                 // class java/nio/channels/ClosedChannelException\n+         7: new           #94                 // class java/nio/channels/ClosedChannelException\n         10: dup\n-        11: invokespecial #27                 // Method java/nio/channels/ClosedChannelException.\"<init>\":()V\n+        11: invokespecial #96                 // Method java/nio/channels/ClosedChannelException.\"<init>\":()V\n         14: athrow\n         15: iload_2\n         16: istore        4\n         18: iload_3\n         19: istore        5\n         21: iload         5\n         23: ifle          74\n         26: iload         5\n         28: aload_0\n-        29: getfield      #9                  // Field buffer:Ljava/nio/ByteBuffer;\n-        32: invokevirtual #30                 // Method java/nio/ByteBuffer.remaining:()I\n-        35: invokestatic  #31                 // Method java/lang/Math.min:(II)I\n+        29: getfield      #34                 // Field buffer:Ljava/nio/ByteBuffer;\n+        32: invokevirtual #104                // Method java/nio/ByteBuffer.remaining:()I\n+        35: invokestatic  #108                // Method java/lang/Math.min:(II)I\n         38: istore        6\n         40: aload_0\n-        41: getfield      #9                  // Field buffer:Ljava/nio/ByteBuffer;\n+        41: getfield      #34                 // Field buffer:Ljava/nio/ByteBuffer;\n         44: aload_1\n         45: iload         4\n         47: iload         6\n-        49: invokevirtual #32                 // Method java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n+        49: invokevirtual #114                // Method java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n         52: pop\n         53: aload_0\n-        54: invokespecial #29                 // Method maybeFlush:()V\n+        54: invokespecial #101                // Method maybeFlush:()V\n         57: iload         5\n         59: iload         6\n         61: isub\n         62: istore        5\n         64: iload         4\n         66: iload         6\n         68: iadd\n@@ -486,96 +486,96 @@\n \n   public int write(java.nio.ByteBuffer) throws java.io.IOException;\n     descriptor: (Ljava/nio/ByteBuffer;)I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=6, args_size=2\n          0: aload_0\n-         1: invokevirtual #25                 // Method isOpen:()Z\n+         1: invokevirtual #91                 // Method isOpen:()Z\n          4: ifne          15\n-         7: new           #26                 // class java/nio/channels/ClosedChannelException\n+         7: new           #94                 // class java/nio/channels/ClosedChannelException\n         10: dup\n-        11: invokespecial #27                 // Method java/nio/channels/ClosedChannelException.\"<init>\":()V\n+        11: invokespecial #96                 // Method java/nio/channels/ClosedChannelException.\"<init>\":()V\n         14: athrow\n         15: aload_1\n-        16: invokevirtual #30                 // Method java/nio/ByteBuffer.remaining:()I\n+        16: invokevirtual #104                // Method java/nio/ByteBuffer.remaining:()I\n         19: istore_2\n         20: iload_2\n         21: aload_0\n-        22: getfield      #9                  // Field buffer:Ljava/nio/ByteBuffer;\n-        25: invokevirtual #30                 // Method java/nio/ByteBuffer.remaining:()I\n+        22: getfield      #34                 // Field buffer:Ljava/nio/ByteBuffer;\n+        25: invokevirtual #104                // Method java/nio/ByteBuffer.remaining:()I\n         28: if_icmpge     43\n         31: aload_0\n-        32: getfield      #9                  // Field buffer:Ljava/nio/ByteBuffer;\n+        32: getfield      #34                 // Field buffer:Ljava/nio/ByteBuffer;\n         35: aload_1\n-        36: invokevirtual #33                 // Method java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n+        36: invokevirtual #117                // Method java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n         39: pop\n         40: goto          159\n         43: iload_2\n         44: istore_3\n         45: aload_1\n-        46: invokevirtual #34                 // Method java/nio/ByteBuffer.limit:()I\n+        46: invokevirtual #120                // Method java/nio/ByteBuffer.limit:()I\n         49: istore        4\n         51: aload_0\n-        52: getfield      #9                  // Field buffer:Ljava/nio/ByteBuffer;\n-        55: invokevirtual #35                 // Method java/nio/ByteBuffer.position:()I\n+        52: getfield      #34                 // Field buffer:Ljava/nio/ByteBuffer;\n+        55: invokevirtual #123                // Method java/nio/ByteBuffer.position:()I\n         58: ifeq          100\n         61: aload_0\n-        62: getfield      #9                  // Field buffer:Ljava/nio/ByteBuffer;\n-        65: invokevirtual #30                 // Method java/nio/ByteBuffer.remaining:()I\n+        62: getfield      #34                 // Field buffer:Ljava/nio/ByteBuffer;\n+        65: invokevirtual #104                // Method java/nio/ByteBuffer.remaining:()I\n         68: istore        5\n         70: aload_1\n         71: aload_1\n-        72: invokevirtual #35                 // Method java/nio/ByteBuffer.position:()I\n+        72: invokevirtual #123                // Method java/nio/ByteBuffer.position:()I\n         75: iload         5\n         77: iadd\n-        78: invokevirtual #36                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n+        78: invokevirtual #126                // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n         81: pop\n         82: aload_0\n-        83: getfield      #9                  // Field buffer:Ljava/nio/ByteBuffer;\n+        83: getfield      #34                 // Field buffer:Ljava/nio/ByteBuffer;\n         86: aload_1\n-        87: invokevirtual #33                 // Method java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n+        87: invokevirtual #117                // Method java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n         90: pop\n         91: aload_0\n-        92: invokespecial #15                 // Method writeBlock:()V\n+        92: invokespecial #54                 // Method writeBlock:()V\n         95: iload_3\n         96: iload         5\n         98: isub\n         99: istore_3\n        100: iload_3\n        101: aload_0\n-       102: getfield      #13                 // Field blockSize:I\n+       102: getfield      #46                 // Field blockSize:I\n        105: if_icmplt     143\n        108: aload_1\n        109: aload_1\n-       110: invokevirtual #35                 // Method java/nio/ByteBuffer.position:()I\n+       110: invokevirtual #123                // Method java/nio/ByteBuffer.position:()I\n        113: aload_0\n-       114: getfield      #13                 // Field blockSize:I\n+       114: getfield      #46                 // Field blockSize:I\n        117: iadd\n-       118: invokevirtual #36                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n+       118: invokevirtual #126                // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n        121: pop\n        122: aload_0\n-       123: getfield      #7                  // Field out:Ljava/nio/channels/WritableByteChannel;\n+       123: getfield      #24                 // Field out:Ljava/nio/channels/WritableByteChannel;\n        126: aload_1\n-       127: invokeinterface #17,  2           // InterfaceMethod java/nio/channels/WritableByteChannel.write:(Ljava/nio/ByteBuffer;)I\n+       127: invokeinterface #61,  2           // InterfaceMethod java/nio/channels/WritableByteChannel.write:(Ljava/nio/ByteBuffer;)I\n        132: pop\n        133: iload_3\n        134: aload_0\n-       135: getfield      #13                 // Field blockSize:I\n+       135: getfield      #46                 // Field blockSize:I\n        138: isub\n        139: istore_3\n        140: goto          100\n        143: aload_1\n        144: iload         4\n-       146: invokevirtual #36                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n+       146: invokevirtual #126                // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/ByteBuffer;\n        149: pop\n        150: aload_0\n-       151: getfield      #9                  // Field buffer:Ljava/nio/ByteBuffer;\n+       151: getfield      #34                 // Field buffer:Ljava/nio/ByteBuffer;\n        154: aload_1\n-       155: invokevirtual #33                 // Method java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n+       155: invokevirtual #117                // Method java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n        158: pop\n        159: iload_2\n        160: ireturn\n       LineNumberTable:\n         line 130: 0\n         line 131: 7\n         line 133: 15\n@@ -612,24 +612,24 @@\n \n   public boolean isOpen();\n     descriptor: ()Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field out:Ljava/nio/channels/WritableByteChannel;\n-         4: invokeinterface #37,  1           // InterfaceMethod java/nio/channels/WritableByteChannel.isOpen:()Z\n+         1: getfield      #24                 // Field out:Ljava/nio/channels/WritableByteChannel;\n+         4: invokeinterface #128,  1          // InterfaceMethod java/nio/channels/WritableByteChannel.isOpen:()Z\n          9: ifne          20\n         12: aload_0\n-        13: getfield      #4                  // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+        13: getfield      #12                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n         16: iconst_1\n-        17: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V\n+        17: invokevirtual #129                // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V\n         20: aload_0\n-        21: getfield      #4                  // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n-        24: invokevirtual #39                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z\n+        21: getfield      #12                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+        24: invokevirtual #132                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z\n         27: ifne          34\n         30: iconst_1\n         31: goto          35\n         34: iconst_0\n         35: ireturn\n       LineNumberTable:\n         line 166: 0\n@@ -643,21 +643,21 @@\n \n   public void flushBlock() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #9                  // Field buffer:Ljava/nio/ByteBuffer;\n-         4: invokevirtual #35                 // Method java/nio/ByteBuffer.position:()I\n+         1: getfield      #34                 // Field buffer:Ljava/nio/ByteBuffer;\n+         4: invokevirtual #123                // Method java/nio/ByteBuffer.position:()I\n          7: ifeq          18\n         10: aload_0\n-        11: invokespecial #40                 // Method padBlock:()V\n+        11: invokespecial #135                // Method padBlock:()V\n         14: aload_0\n-        15: invokespecial #15                 // Method writeBlock:()V\n+        15: invokespecial #54                 // Method writeBlock:()V\n         18: return\n       LineNumberTable:\n         line 177: 0\n         line 178: 10\n         line 179: 14\n         line 181: 18\n       StackMapTable: number_of_entries = 1\n@@ -667,29 +667,29 @@\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #4                  // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+         1: getfield      #12                 // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n          4: iconst_0\n          5: iconst_1\n-         6: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z\n+         6: invokevirtual #138                // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z\n          9: ifeq          40\n         12: aload_0\n-        13: invokevirtual #42                 // Method flushBlock:()V\n+        13: invokevirtual #142                // Method flushBlock:()V\n         16: aload_0\n-        17: getfield      #7                  // Field out:Ljava/nio/channels/WritableByteChannel;\n-        20: invokeinterface #43,  1           // InterfaceMethod java/nio/channels/WritableByteChannel.close:()V\n+        17: getfield      #24                 // Field out:Ljava/nio/channels/WritableByteChannel;\n+        20: invokeinterface #145,  1          // InterfaceMethod java/nio/channels/WritableByteChannel.close:()V\n         25: goto          40\n         28: astore_1\n         29: aload_0\n-        30: getfield      #7                  // Field out:Ljava/nio/channels/WritableByteChannel;\n-        33: invokeinterface #43,  1           // InterfaceMethod java/nio/channels/WritableByteChannel.close:()V\n+        30: getfield      #24                 // Field out:Ljava/nio/channels/WritableByteChannel;\n+        33: invokeinterface #145,  1          // InterfaceMethod java/nio/channels/WritableByteChannel.close:()V\n         38: aload_1\n         39: athrow\n         40: return\n       Exception table:\n          from    to  target type\n             12    16    28   any\n       LineNumberTable:\n@@ -709,28 +709,28 @@\n \n   private void padBlock();\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=5, args_size=1\n          0: aload_0\n-         1: getfield      #9                  // Field buffer:Ljava/nio/ByteBuffer;\n-         4: invokestatic  #44                 // Method java/nio/ByteOrder.nativeOrder:()Ljava/nio/ByteOrder;\n-         7: invokevirtual #45                 // Method java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+         1: getfield      #34                 // Field buffer:Ljava/nio/ByteBuffer;\n+         4: invokestatic  #148                // Method java/nio/ByteOrder.nativeOrder:()Ljava/nio/ByteOrder;\n+         7: invokevirtual #154                // Method java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n         10: pop\n         11: aload_0\n-        12: getfield      #9                  // Field buffer:Ljava/nio/ByteBuffer;\n-        15: invokevirtual #30                 // Method java/nio/ByteBuffer.remaining:()I\n+        12: getfield      #34                 // Field buffer:Ljava/nio/ByteBuffer;\n+        15: invokevirtual #104                // Method java/nio/ByteBuffer.remaining:()I\n         18: istore_1\n         19: iload_1\n         20: bipush        8\n         22: if_icmple     94\n         25: aload_0\n-        26: getfield      #9                  // Field buffer:Ljava/nio/ByteBuffer;\n-        29: invokevirtual #35                 // Method java/nio/ByteBuffer.position:()I\n+        26: getfield      #34                 // Field buffer:Ljava/nio/ByteBuffer;\n+        29: invokevirtual #123                // Method java/nio/ByteBuffer.position:()I\n         32: bipush        7\n         34: iand\n         35: istore_2\n         36: iload_2\n         37: ifeq          73\n         40: bipush        8\n         42: iload_2\n@@ -738,42 +738,42 @@\n         44: istore_3\n         45: iconst_0\n         46: istore        4\n         48: iload         4\n         50: iload_3\n         51: if_icmpge     69\n         54: aload_0\n-        55: getfield      #9                  // Field buffer:Ljava/nio/ByteBuffer;\n+        55: getfield      #34                 // Field buffer:Ljava/nio/ByteBuffer;\n         58: iconst_0\n-        59: invokevirtual #28                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n+        59: invokevirtual #97                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n         62: pop\n         63: iinc          4, 1\n         66: goto          48\n         69: iload_1\n         70: iload_3\n         71: isub\n         72: istore_1\n         73: iload_1\n         74: bipush        8\n         76: if_icmplt     94\n         79: aload_0\n-        80: getfield      #9                  // Field buffer:Ljava/nio/ByteBuffer;\n+        80: getfield      #34                 // Field buffer:Ljava/nio/ByteBuffer;\n         83: lconst_0\n-        84: invokevirtual #46                 // Method java/nio/ByteBuffer.putLong:(J)Ljava/nio/ByteBuffer;\n+        84: invokevirtual #158                // Method java/nio/ByteBuffer.putLong:(J)Ljava/nio/ByteBuffer;\n         87: pop\n         88: iinc          1, -8\n         91: goto          73\n         94: aload_0\n-        95: getfield      #9                  // Field buffer:Ljava/nio/ByteBuffer;\n-        98: invokevirtual #14                 // Method java/nio/ByteBuffer.hasRemaining:()Z\n+        95: getfield      #34                 // Field buffer:Ljava/nio/ByteBuffer;\n+        98: invokevirtual #50                 // Method java/nio/ByteBuffer.hasRemaining:()Z\n        101: ifeq          116\n        104: aload_0\n-       105: getfield      #9                  // Field buffer:Ljava/nio/ByteBuffer;\n+       105: getfield      #34                 // Field buffer:Ljava/nio/ByteBuffer;\n        108: iconst_0\n-       109: invokevirtual #28                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n+       109: invokevirtual #97                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n        112: pop\n        113: goto          94\n        116: return\n       LineNumberTable:\n         line 195: 0\n         line 196: 11\n         line 197: 19\n@@ -801,9 +801,9 @@\n           offset_delta = 3\n         frame_type = 250 /* chop */\n           offset_delta = 20\n         frame_type = 21 /* same */\n }\n SourceFile: \"FixedLengthBlockOutputStream.java\"\n InnerClasses:\n-  static #50;                             // class org/apache/commons/compress/utils/FixedLengthBlockOutputStream$1\n-  private static #52= #10 of #47;         // BufferAtATimeOutputChannel=class org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel of class org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n+  private static #175= #38 of #13;        // BufferAtATimeOutputChannel=class org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel of class org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n+  static #176;                            // class org/apache/commons/compress/utils/FixedLengthBlockOutputStream$1\n"}]}
