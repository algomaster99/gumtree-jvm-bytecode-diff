{"diffoscope-json-version": 1, "source1": "first/Validate.class", "source2": "second/Validate.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -55,67 +55,67 @@\n     }\n     \n     public static <T> T notNull(final T object) {\n         return notNull(object, \"The validated object is null\", new Object[0]);\n     }\n     \n     public static <T> T notNull(final T object, final String message, final Object... values) {\n-        return Objects.requireNonNull(object, () -> String.format(message, values));\n+        return Objects.requireNonNull(object, () -> String.format(format, args));\n     }\n     \n     public static <T> T[] notEmpty(final T[] array, final String message, final Object... values) {\n-        Objects.requireNonNull(array, () -> String.format(message, values));\n+        Objects.requireNonNull(array, () -> String.format(format, args));\n         if (array.length == 0) {\n             throw new IllegalArgumentException(String.format(message, values));\n         }\n         return array;\n     }\n     \n     public static <T> T[] notEmpty(final T[] array) {\n         return notEmpty(array, \"The validated array is empty\", new Object[0]);\n     }\n     \n     public static <T extends Collection<?>> T notEmpty(final T collection, final String message, final Object... values) {\n-        Objects.requireNonNull(collection, () -> String.format(message, values));\n+        Objects.requireNonNull(collection, () -> String.format(format, args));\n         if (collection.isEmpty()) {\n             throw new IllegalArgumentException(String.format(message, values));\n         }\n         return collection;\n     }\n     \n     public static <T extends Collection<?>> T notEmpty(final T collection) {\n         return notEmpty(collection, \"The validated collection is empty\", new Object[0]);\n     }\n     \n     public static <T extends Map<?, ?>> T notEmpty(final T map, final String message, final Object... values) {\n-        Objects.requireNonNull(map, () -> String.format(message, values));\n+        Objects.requireNonNull(map, () -> String.format(format, args));\n         if (map.isEmpty()) {\n             throw new IllegalArgumentException(String.format(message, values));\n         }\n         return map;\n     }\n     \n     public static <T extends Map<?, ?>> T notEmpty(final T map) {\n         return notEmpty(map, \"The validated map is empty\", new Object[0]);\n     }\n     \n     public static <T extends CharSequence> T notEmpty(final T chars, final String message, final Object... values) {\n-        Objects.requireNonNull(chars, () -> String.format(message, values));\n+        Objects.requireNonNull(chars, () -> String.format(format, args));\n         if (chars.length() == 0) {\n             throw new IllegalArgumentException(String.format(message, values));\n         }\n         return chars;\n     }\n     \n     public static <T extends CharSequence> T notEmpty(final T chars) {\n         return notEmpty(chars, \"The validated character sequence is empty\", new Object[0]);\n     }\n     \n     public static <T extends CharSequence> T notBlank(final T chars, final String message, final Object... values) {\n-        Objects.requireNonNull(chars, () -> String.format(message, values));\n+        Objects.requireNonNull(chars, () -> String.format(format, args));\n         if (StringUtils.isBlank((CharSequence)chars)) {\n             throw new IllegalArgumentException(String.format(message, values));\n         }\n         return chars;\n     }\n     \n     public static <T extends CharSequence> T notBlank(final T chars) {\n"}]}
