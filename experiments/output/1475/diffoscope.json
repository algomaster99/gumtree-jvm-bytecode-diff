{"diffoscope-json-version": 1, "source1": "first/Base64.class", "source2": "second/Base64.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,92 +1,92 @@\n-  SHA-256 checksum 8eebd4a8e76b41858048c42637b00889599f3d29d4dd0225c2b04ba0c7cbc58b\n+  SHA-256 checksum 7a7306588e1c6e3fa120d20bc6fe6c7146c2ef522f74eed3788e08abb02dd750\n   Compiled from \"Base64.java\"\n public class org.apache.commons.codec.binary.Base64 extends org.apache.commons.codec.binary.BaseNCodec\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #1                          // org/apache/commons/codec/binary/Base64\n   super_class: #34                        // org/apache/commons/codec/binary/BaseNCodec\n   interfaces: 0, fields: 14, methods: 30, attributes: 2\n Constant pool:\n-    #1 = Class              #194          // org/apache/commons/codec/binary/Base64\n-    #2 = Methodref          #1.#195       // org/apache/commons/codec/binary/Base64.\"<init>\":()V\n-    #3 = Methodref          #1.#196       // org/apache/commons/codec/binary/Base64.decode:([B)[B\n-    #4 = Methodref          #1.#197       // org/apache/commons/codec/binary/Base64.decode:(Ljava/lang/String;)[B\n-    #5 = Class              #198          // java/math/BigInteger\n-    #6 = Methodref          #1.#199       // org/apache/commons/codec/binary/Base64.decodeBase64:([B)[B\n-    #7 = Methodref          #5.#200       // java/math/BigInteger.\"<init>\":(I[B)V\n-    #8 = Methodref          #1.#201       // org/apache/commons/codec/binary/Base64.encodeBase64:([BZ)[B\n-    #9 = Methodref          #1.#202       // org/apache/commons/codec/binary/Base64.encodeBase64:([BZZ)[B\n-   #10 = Class              #203          // java/lang/Integer\n+    #1 = Class              #193          // org/apache/commons/codec/binary/Base64\n+    #2 = Methodref          #1.#194       // org/apache/commons/codec/binary/Base64.\"<init>\":()V\n+    #3 = Methodref          #1.#195       // org/apache/commons/codec/binary/Base64.decode:([B)[B\n+    #4 = Methodref          #1.#196       // org/apache/commons/codec/binary/Base64.decode:(Ljava/lang/String;)[B\n+    #5 = Class              #197          // java/math/BigInteger\n+    #6 = Methodref          #1.#198       // org/apache/commons/codec/binary/Base64.decodeBase64:([B)[B\n+    #7 = Methodref          #5.#199       // java/math/BigInteger.\"<init>\":(I[B)V\n+    #8 = Methodref          #1.#200       // org/apache/commons/codec/binary/Base64.encodeBase64:([BZ)[B\n+    #9 = Methodref          #1.#201       // org/apache/commons/codec/binary/Base64.encodeBase64:([BZZ)[B\n+   #10 = Class              #202          // java/lang/Integer\n    #11 = Integer            2147483647\n-   #12 = Methodref          #1.#204       // org/apache/commons/codec/binary/Base64.encodeBase64:([BZZI)[B\n-   #13 = Methodref          #205.#206     // org/apache/commons/codec/binary/BinaryCodec.isEmpty:([B)Z\n-   #14 = Methodref          #1.#207       // org/apache/commons/codec/binary/Base64.\"<init>\":(Z)V\n-   #15 = Fieldref           #1.#208       // org/apache/commons/codec/binary/Base64.CHUNK_SEPARATOR:[B\n-   #16 = Methodref          #1.#209       // org/apache/commons/codec/binary/Base64.\"<init>\":(I[BZ)V\n-   #17 = Methodref          #1.#210       // org/apache/commons/codec/binary/Base64.getEncodedLength:([B)J\n-   #18 = Class              #211          // java/lang/IllegalArgumentException\n-   #19 = Class              #212          // java/lang/StringBuilder\n-   #20 = Methodref          #19.#195      // java/lang/StringBuilder.\"<init>\":()V\n-   #21 = String             #213          // Input array too big, the output array would be bigger (\n-   #22 = Methodref          #19.#214      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #23 = Methodref          #19.#215      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #24 = String             #216          // ) than the specified maximum size of\n-   #25 = Methodref          #19.#217      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #26 = Methodref          #19.#218      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #27 = Methodref          #18.#219      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #28 = Methodref          #1.#220       // org/apache/commons/codec/binary/Base64.encode:([B)[B\n-   #29 = Methodref          #221.#222     // org/apache/commons/codec/binary/StringUtils.newStringUsAscii:([B)Ljava/lang/String;\n-   #30 = String             #132          // bigInteger\n-   #31 = Methodref          #223.#224     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-   #32 = Methodref          #1.#225       // org/apache/commons/codec/binary/Base64.toIntegerBytes:(Ljava/math/BigInteger;)[B\n-   #33 = Methodref          #1.#226       // org/apache/commons/codec/binary/Base64.isBase64:([B)Z\n-   #34 = Class              #227          // org/apache/commons/codec/binary/BaseNCodec\n-   #35 = Fieldref           #1.#228       // org/apache/commons/codec/binary/Base64.DECODE_TABLE:[B\n-   #36 = Methodref          #1.#229       // org/apache/commons/codec/binary/Base64.isBase64:(B)Z\n-   #37 = Methodref          #230.#231     // java/lang/Character.isWhitespace:(I)Z\n-   #38 = Methodref          #221.#232     // org/apache/commons/codec/binary/StringUtils.getBytesUtf8:(Ljava/lang/String;)[B\n-   #39 = Methodref          #5.#233       // java/math/BigInteger.bitLength:()I\n-   #40 = Methodref          #5.#234       // java/math/BigInteger.toByteArray:()[B\n-   #41 = Methodref          #235.#236     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #42 = Methodref          #1.#237       // org/apache/commons/codec/binary/Base64.\"<init>\":(I)V\n-   #43 = Methodref          #1.#200       // org/apache/commons/codec/binary/Base64.\"<init>\":(I[B)V\n-   #44 = Fieldref           #1.#238       // org/apache/commons/codec/binary/Base64.DECODING_POLICY_DEFAULT:Lorg/apache/commons/codec/CodecPolicy;\n-   #45 = Methodref          #1.#239       // org/apache/commons/codec/binary/Base64.\"<init>\":(I[BZLorg/apache/commons/codec/CodecPolicy;)V\n-   #46 = Methodref          #34.#240      // org/apache/commons/codec/binary/BaseNCodec.\"<init>\":(IIIIBLorg/apache/commons/codec/CodecPolicy;)V\n-   #47 = Fieldref           #1.#241       // org/apache/commons/codec/binary/Base64.decodeTable:[B\n-   #48 = Methodref          #1.#242       // org/apache/commons/codec/binary/Base64.containsAlphabetOrPad:([B)Z\n-   #49 = Methodref          #221.#243     // org/apache/commons/codec/binary/StringUtils.newStringUtf8:([B)Ljava/lang/String;\n-   #50 = String             #244          // lineSeparator must not contain base64 characters: [\n-   #51 = String             #245          // ]\n-   #52 = Fieldref           #1.#246       // org/apache/commons/codec/binary/Base64.encodeSize:I\n-   #53 = Methodref          #247.#248     // \"[B\".clone:()Ljava/lang/Object;\n+   #12 = Methodref          #1.#203       // org/apache/commons/codec/binary/Base64.encodeBase64:([BZZI)[B\n+   #13 = Methodref          #204.#205     // org/apache/commons/codec/binary/BinaryCodec.isEmpty:([B)Z\n+   #14 = Methodref          #1.#206       // org/apache/commons/codec/binary/Base64.\"<init>\":(Z)V\n+   #15 = Fieldref           #1.#207       // org/apache/commons/codec/binary/Base64.CHUNK_SEPARATOR:[B\n+   #16 = Methodref          #1.#208       // org/apache/commons/codec/binary/Base64.\"<init>\":(I[BZ)V\n+   #17 = Methodref          #1.#209       // org/apache/commons/codec/binary/Base64.getEncodedLength:([B)J\n+   #18 = Class              #210          // java/lang/IllegalArgumentException\n+   #19 = Class              #211          // java/lang/StringBuilder\n+   #20 = Methodref          #19.#194      // java/lang/StringBuilder.\"<init>\":()V\n+   #21 = String             #212          // Input array too big, the output array would be bigger (\n+   #22 = Methodref          #19.#213      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #23 = Methodref          #19.#214      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+   #24 = String             #215          // ) than the specified maximum size of\n+   #25 = Methodref          #19.#216      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #26 = Methodref          #19.#217      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #27 = Methodref          #18.#218      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #28 = Methodref          #1.#219       // org/apache/commons/codec/binary/Base64.encode:([B)[B\n+   #29 = Methodref          #220.#221     // org/apache/commons/codec/binary/StringUtils.newStringUsAscii:([B)Ljava/lang/String;\n+   #30 = String             #131          // bigInteger\n+   #31 = Methodref          #222.#223     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+   #32 = Methodref          #1.#224       // org/apache/commons/codec/binary/Base64.toIntegerBytes:(Ljava/math/BigInteger;)[B\n+   #33 = Methodref          #1.#225       // org/apache/commons/codec/binary/Base64.isBase64:([B)Z\n+   #34 = Class              #226          // org/apache/commons/codec/binary/BaseNCodec\n+   #35 = Fieldref           #1.#227       // org/apache/commons/codec/binary/Base64.DECODE_TABLE:[B\n+   #36 = Methodref          #1.#228       // org/apache/commons/codec/binary/Base64.isBase64:(B)Z\n+   #37 = Methodref          #229.#230     // java/lang/Character.isWhitespace:(I)Z\n+   #38 = Methodref          #220.#231     // org/apache/commons/codec/binary/StringUtils.getBytesUtf8:(Ljava/lang/String;)[B\n+   #39 = Methodref          #5.#232       // java/math/BigInteger.bitLength:()I\n+   #40 = Methodref          #5.#233       // java/math/BigInteger.toByteArray:()[B\n+   #41 = Methodref          #234.#235     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #42 = Methodref          #1.#236       // org/apache/commons/codec/binary/Base64.\"<init>\":(I)V\n+   #43 = Methodref          #1.#199       // org/apache/commons/codec/binary/Base64.\"<init>\":(I[B)V\n+   #44 = Fieldref           #1.#237       // org/apache/commons/codec/binary/Base64.DECODING_POLICY_DEFAULT:Lorg/apache/commons/codec/CodecPolicy;\n+   #45 = Methodref          #1.#238       // org/apache/commons/codec/binary/Base64.\"<init>\":(I[BZLorg/apache/commons/codec/CodecPolicy;)V\n+   #46 = Methodref          #34.#239      // org/apache/commons/codec/binary/BaseNCodec.\"<init>\":(IIIIBLorg/apache/commons/codec/CodecPolicy;)V\n+   #47 = Fieldref           #1.#240       // org/apache/commons/codec/binary/Base64.decodeTable:[B\n+   #48 = Methodref          #1.#241       // org/apache/commons/codec/binary/Base64.containsAlphabetOrPad:([B)Z\n+   #49 = Methodref          #220.#242     // org/apache/commons/codec/binary/StringUtils.newStringUtf8:([B)Ljava/lang/String;\n+   #50 = String             #243          // lineSeparator must not contain base64 characters: [\n+   #51 = String             #244          // ]\n+   #52 = Fieldref           #1.#245       // org/apache/commons/codec/binary/Base64.encodeSize:I\n+   #53 = Methodref          #246.#247     // \"[B\".clone:()Ljava/lang/Object;\n    #54 = Class              #85           // \"[B\"\n-   #55 = Fieldref           #1.#249       // org/apache/commons/codec/binary/Base64.lineSeparator:[B\n-   #56 = Fieldref           #1.#250       // org/apache/commons/codec/binary/Base64.decodeSize:I\n-   #57 = Fieldref           #1.#251       // org/apache/commons/codec/binary/Base64.URL_SAFE_ENCODE_TABLE:[B\n-   #58 = Fieldref           #1.#252       // org/apache/commons/codec/binary/Base64.STANDARD_ENCODE_TABLE:[B\n-   #59 = Fieldref           #1.#253       // org/apache/commons/codec/binary/Base64.encodeTable:[B\n-   #60 = Fieldref           #168.#254     // org/apache/commons/codec/binary/BaseNCodec$Context.eof:Z\n-   #61 = Methodref          #1.#255       // org/apache/commons/codec/binary/Base64.ensureBufferSize:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n-   #62 = Fieldref           #1.#256       // org/apache/commons/codec/binary/Base64.pad:B\n-   #63 = Fieldref           #168.#257     // org/apache/commons/codec/binary/BaseNCodec$Context.modulus:I\n-   #64 = Fieldref           #168.#258     // org/apache/commons/codec/binary/BaseNCodec$Context.ibitWorkArea:I\n-   #65 = Fieldref           #168.#259     // org/apache/commons/codec/binary/BaseNCodec$Context.pos:I\n-   #66 = Methodref          #1.#260       // org/apache/commons/codec/binary/Base64.validateTrailingCharacter:()V\n-   #67 = Methodref          #1.#261       // org/apache/commons/codec/binary/Base64.validateCharacter:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-   #68 = Class              #262          // java/lang/IllegalStateException\n-   #69 = String             #263          // Impossible modulus\n-   #70 = Methodref          #68.#219      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-   #71 = Fieldref           #1.#264       // org/apache/commons/codec/binary/Base64.lineLength:I\n-   #72 = Fieldref           #168.#265     // org/apache/commons/codec/binary/BaseNCodec$Context.currentLinePos:I\n-   #73 = Methodref          #1.#266       // org/apache/commons/codec/binary/Base64.isStrictDecoding:()Z\n-   #74 = String             #267          // Strict decoding: Last encoded character (before the paddings if any) is a valid base 64 alphabet but not a possible encoding. Expected the discarded bits from the character to be zero.\n-   #75 = String             #268          // Strict decoding: Last encoded character (before the paddings if any) is a valid base 64 alphabet but not a possible encoding. Decoding requires at least two trailing 6-bit characters to create bytes.\n+   #55 = Fieldref           #1.#248       // org/apache/commons/codec/binary/Base64.lineSeparator:[B\n+   #56 = Fieldref           #1.#249       // org/apache/commons/codec/binary/Base64.decodeSize:I\n+   #57 = Fieldref           #1.#250       // org/apache/commons/codec/binary/Base64.URL_SAFE_ENCODE_TABLE:[B\n+   #58 = Fieldref           #1.#251       // org/apache/commons/codec/binary/Base64.STANDARD_ENCODE_TABLE:[B\n+   #59 = Fieldref           #1.#252       // org/apache/commons/codec/binary/Base64.encodeTable:[B\n+   #60 = Fieldref           #167.#253     // org/apache/commons/codec/binary/BaseNCodec$Context.eof:Z\n+   #61 = Methodref          #1.#254       // org/apache/commons/codec/binary/Base64.ensureBufferSize:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n+   #62 = Fieldref           #1.#255       // org/apache/commons/codec/binary/Base64.pad:B\n+   #63 = Fieldref           #167.#256     // org/apache/commons/codec/binary/BaseNCodec$Context.modulus:I\n+   #64 = Fieldref           #167.#257     // org/apache/commons/codec/binary/BaseNCodec$Context.ibitWorkArea:I\n+   #65 = Fieldref           #167.#258     // org/apache/commons/codec/binary/BaseNCodec$Context.pos:I\n+   #66 = Methodref          #1.#259       // org/apache/commons/codec/binary/Base64.validateTrailingCharacter:()V\n+   #67 = Methodref          #1.#260       // org/apache/commons/codec/binary/Base64.validateCharacter:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+   #68 = Class              #261          // java/lang/IllegalStateException\n+   #69 = String             #262          // Impossible modulus\n+   #70 = Methodref          #68.#218      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+   #71 = Fieldref           #1.#263       // org/apache/commons/codec/binary/Base64.lineLength:I\n+   #72 = Fieldref           #167.#264     // org/apache/commons/codec/binary/BaseNCodec$Context.currentLinePos:I\n+   #73 = Methodref          #1.#265       // org/apache/commons/codec/binary/Base64.isStrictDecoding:()Z\n+   #74 = String             #266          // Strict decoding: Last encoded character (before the paddings if any) is a valid base 64 alphabet but not a possible encoding. Expected the discarded bits from the character to be zero.\n+   #75 = String             #267          // Strict decoding: Last encoded character (before the paddings if any) is a valid base 64 alphabet but not a possible encoding. Decoding requires at least two trailing 6-bit characters to create bytes.\n    #76 = Utf8               BITS_PER_ENCODED_BYTE\n    #77 = Utf8               I\n    #78 = Utf8               ConstantValue\n    #79 = Integer            6\n    #80 = Utf8               BYTES_PER_UNENCODED_BLOCK\n    #81 = Integer            3\n    #82 = Utf8               BYTES_PER_ENCODED_BLOCK\n@@ -127,204 +127,203 @@\n   #117 = Utf8               ([BZZI)[B\n   #118 = Utf8               maxResultSize\n   #119 = Utf8               b64\n   #120 = Utf8               Lorg/apache/commons/codec/binary/Base64;\n   #121 = Utf8               len\n   #122 = Utf8               J\n   #123 = Utf8               StackMapTable\n-  #124 = Class              #194          // org/apache/commons/codec/binary/Base64\n-  #125 = Utf8               encodeBase64Chunked\n-  #126 = Utf8               encodeBase64String\n-  #127 = Utf8               ([B)Ljava/lang/String;\n-  #128 = Utf8               encodeBase64URLSafe\n-  #129 = Utf8               encodeBase64URLSafeString\n-  #130 = Utf8               encodeInteger\n-  #131 = Utf8               (Ljava/math/BigInteger;)[B\n-  #132 = Utf8               bigInteger\n-  #133 = Utf8               Ljava/math/BigInteger;\n-  #134 = Utf8               isArrayByteBase64\n-  #135 = Utf8               ([B)Z\n-  #136 = Utf8               arrayOctet\n-  #137 = Utf8               Deprecated\n-  #138 = Utf8               RuntimeVisibleAnnotations\n-  #139 = Utf8               Ljava/lang/Deprecated;\n-  #140 = Utf8               isBase64\n-  #141 = Utf8               (B)Z\n-  #142 = Utf8               octet\n-  #143 = Utf8               B\n-  #144 = Utf8               element\n-  #145 = Utf8               (Ljava/lang/String;)Z\n-  #146 = Utf8               base64\n-  #147 = Utf8               toIntegerBytes\n-  #148 = Utf8               bigInt\n-  #149 = Utf8               bitlen\n-  #150 = Utf8               bigBytes\n-  #151 = Utf8               startSrc\n-  #152 = Utf8               startDst\n-  #153 = Utf8               resizedBytes\n-  #154 = Utf8               <init>\n-  #155 = Utf8               ()V\n-  #156 = Utf8               this\n-  #157 = Utf8               (Z)V\n-  #158 = Utf8               (I)V\n-  #159 = Utf8               lineLength\n-  #160 = Utf8               (I[B)V\n-  #161 = Utf8               (I[BZ)V\n-  #162 = Utf8               (I[BZLorg/apache/commons/codec/CodecPolicy;)V\n-  #163 = Utf8               sep\n-  #164 = Utf8               decodingPolicy\n-  #165 = Utf8               Lorg/apache/commons/codec/CodecPolicy;\n-  #166 = Class              #269          // org/apache/commons/codec/CodecPolicy\n-  #167 = Utf8               decode\n-  #168 = Class              #270          // org/apache/commons/codec/binary/BaseNCodec$Context\n-  #169 = Utf8               Context\n-  #170 = Utf8               InnerClasses\n-  #171 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-  #172 = Utf8               result\n-  #173 = Utf8               buffer\n-  #174 = Utf8               b\n-  #175 = Utf8               i\n-  #176 = Utf8               input\n-  #177 = Utf8               inPos\n-  #178 = Utf8               inAvail\n-  #179 = Utf8               context\n-  #180 = Utf8               Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-  #181 = Utf8               encode\n-  #182 = Utf8               savedPos\n-  #183 = Utf8               in\n-  #184 = Utf8               isInAlphabet\n-  #185 = Utf8               isUrlSafe\n-  #186 = Utf8               ()Z\n-  #187 = Utf8               validateCharacter\n-  #188 = Utf8               (ILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-  #189 = Utf8               emptyBitsMask\n-  #190 = Utf8               validateTrailingCharacter\n-  #191 = Utf8               <clinit>\n-  #192 = Utf8               SourceFile\n-  #193 = Utf8               Base64.java\n-  #194 = Utf8               org/apache/commons/codec/binary/Base64\n-  #195 = NameAndType        #154:#155     // \"<init>\":()V\n-  #196 = NameAndType        #167:#99      // decode:([B)[B\n-  #197 = NameAndType        #167:#104     // decode:(Ljava/lang/String;)[B\n-  #198 = Utf8               java/math/BigInteger\n-  #199 = NameAndType        #98:#99       // decodeBase64:([B)[B\n-  #200 = NameAndType        #154:#160     // \"<init>\":(I[B)V\n-  #201 = NameAndType        #110:#112     // encodeBase64:([BZ)[B\n-  #202 = NameAndType        #110:#115     // encodeBase64:([BZZ)[B\n-  #203 = Utf8               java/lang/Integer\n-  #204 = NameAndType        #110:#117     // encodeBase64:([BZZI)[B\n-  #205 = Class              #271          // org/apache/commons/codec/binary/BinaryCodec\n-  #206 = NameAndType        #272:#135     // isEmpty:([B)Z\n-  #207 = NameAndType        #154:#157     // \"<init>\":(Z)V\n-  #208 = NameAndType        #273:#85      // CHUNK_SEPARATOR:[B\n-  #209 = NameAndType        #154:#161     // \"<init>\":(I[BZ)V\n-  #210 = NameAndType        #274:#275     // getEncodedLength:([B)J\n-  #211 = Utf8               java/lang/IllegalArgumentException\n-  #212 = Utf8               java/lang/StringBuilder\n-  #213 = Utf8               Input array too big, the output array would be bigger (\n-  #214 = NameAndType        #276:#277     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #215 = NameAndType        #276:#278     // append:(J)Ljava/lang/StringBuilder;\n-  #216 = Utf8               ) than the specified maximum size of\n-  #217 = NameAndType        #276:#279     // append:(I)Ljava/lang/StringBuilder;\n-  #218 = NameAndType        #280:#281     // toString:()Ljava/lang/String;\n-  #219 = NameAndType        #154:#282     // \"<init>\":(Ljava/lang/String;)V\n-  #220 = NameAndType        #181:#99      // encode:([B)[B\n-  #221 = Class              #283          // org/apache/commons/codec/binary/StringUtils\n-  #222 = NameAndType        #284:#127     // newStringUsAscii:([B)Ljava/lang/String;\n-  #223 = Class              #285          // java/util/Objects\n-  #224 = NameAndType        #286:#287     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #225 = NameAndType        #147:#131     // toIntegerBytes:(Ljava/math/BigInteger;)[B\n-  #226 = NameAndType        #140:#135     // isBase64:([B)Z\n-  #227 = Utf8               org/apache/commons/codec/binary/BaseNCodec\n-  #228 = NameAndType        #87:#85       // DECODE_TABLE:[B\n-  #229 = NameAndType        #140:#141     // isBase64:(B)Z\n-  #230 = Class              #288          // java/lang/Character\n-  #231 = NameAndType        #289:#290     // isWhitespace:(I)Z\n-  #232 = NameAndType        #291:#104     // getBytesUtf8:(Ljava/lang/String;)[B\n-  #233 = NameAndType        #292:#293     // bitLength:()I\n-  #234 = NameAndType        #294:#295     // toByteArray:()[B\n-  #235 = Class              #296          // java/lang/System\n-  #236 = NameAndType        #297:#298     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #237 = NameAndType        #154:#158     // \"<init>\":(I)V\n-  #238 = NameAndType        #299:#165     // DECODING_POLICY_DEFAULT:Lorg/apache/commons/codec/CodecPolicy;\n-  #239 = NameAndType        #154:#162     // \"<init>\":(I[BZLorg/apache/commons/codec/CodecPolicy;)V\n-  #240 = NameAndType        #154:#300     // \"<init>\":(IIIIBLorg/apache/commons/codec/CodecPolicy;)V\n-  #241 = NameAndType        #94:#85       // decodeTable:[B\n-  #242 = NameAndType        #301:#135     // containsAlphabetOrPad:([B)Z\n-  #243 = NameAndType        #302:#127     // newStringUtf8:([B)Ljava/lang/String;\n-  #244 = Utf8               lineSeparator must not contain base64 characters: [\n-  #245 = Utf8               ]\n-  #246 = NameAndType        #97:#77       // encodeSize:I\n-  #247 = Class              #85           // \"[B\"\n-  #248 = NameAndType        #303:#304     // clone:()Ljava/lang/Object;\n-  #249 = NameAndType        #95:#85       // lineSeparator:[B\n-  #250 = NameAndType        #96:#77       // decodeSize:I\n-  #251 = NameAndType        #86:#85       // URL_SAFE_ENCODE_TABLE:[B\n-  #252 = NameAndType        #84:#85       // STANDARD_ENCODE_TABLE:[B\n-  #253 = NameAndType        #93:#85       // encodeTable:[B\n-  #254 = NameAndType        #305:#114     // eof:Z\n-  #255 = NameAndType        #306:#307     // ensureBufferSize:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n-  #256 = NameAndType        #308:#143     // pad:B\n-  #257 = NameAndType        #309:#77      // modulus:I\n-  #258 = NameAndType        #310:#77      // ibitWorkArea:I\n-  #259 = NameAndType        #311:#77      // pos:I\n-  #260 = NameAndType        #190:#155     // validateTrailingCharacter:()V\n-  #261 = NameAndType        #187:#188     // validateCharacter:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-  #262 = Utf8               java/lang/IllegalStateException\n-  #263 = Utf8               Impossible modulus\n-  #264 = NameAndType        #159:#77      // lineLength:I\n-  #265 = NameAndType        #312:#77      // currentLinePos:I\n-  #266 = NameAndType        #313:#186     // isStrictDecoding:()Z\n-  #267 = Utf8               Strict decoding: Last encoded character (before the paddings if any) is a valid base 64 alphabet but not a possible encoding. Expected the discarded bits from the character to be zero.\n-  #268 = Utf8               Strict decoding: Last encoded character (before the paddings if any) is a valid base 64 alphabet but not a possible encoding. Decoding requires at least two trailing 6-bit characters to create bytes.\n-  #269 = Utf8               org/apache/commons/codec/CodecPolicy\n-  #270 = Utf8               org/apache/commons/codec/binary/BaseNCodec$Context\n-  #271 = Utf8               org/apache/commons/codec/binary/BinaryCodec\n-  #272 = Utf8               isEmpty\n-  #273 = Utf8               CHUNK_SEPARATOR\n-  #274 = Utf8               getEncodedLength\n-  #275 = Utf8               ([B)J\n-  #276 = Utf8               append\n-  #277 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #278 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #279 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #280 = Utf8               toString\n-  #281 = Utf8               ()Ljava/lang/String;\n-  #282 = Utf8               (Ljava/lang/String;)V\n-  #283 = Utf8               org/apache/commons/codec/binary/StringUtils\n-  #284 = Utf8               newStringUsAscii\n-  #285 = Utf8               java/util/Objects\n-  #286 = Utf8               requireNonNull\n-  #287 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n-  #288 = Utf8               java/lang/Character\n-  #289 = Utf8               isWhitespace\n-  #290 = Utf8               (I)Z\n-  #291 = Utf8               getBytesUtf8\n-  #292 = Utf8               bitLength\n-  #293 = Utf8               ()I\n-  #294 = Utf8               toByteArray\n-  #295 = Utf8               ()[B\n-  #296 = Utf8               java/lang/System\n-  #297 = Utf8               arraycopy\n-  #298 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #299 = Utf8               DECODING_POLICY_DEFAULT\n-  #300 = Utf8               (IIIIBLorg/apache/commons/codec/CodecPolicy;)V\n-  #301 = Utf8               containsAlphabetOrPad\n-  #302 = Utf8               newStringUtf8\n-  #303 = Utf8               clone\n-  #304 = Utf8               ()Ljava/lang/Object;\n-  #305 = Utf8               eof\n-  #306 = Utf8               ensureBufferSize\n-  #307 = Utf8               (ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n-  #308 = Utf8               pad\n-  #309 = Utf8               modulus\n-  #310 = Utf8               ibitWorkArea\n-  #311 = Utf8               pos\n-  #312 = Utf8               currentLinePos\n-  #313 = Utf8               isStrictDecoding\n+  #124 = Utf8               encodeBase64Chunked\n+  #125 = Utf8               encodeBase64String\n+  #126 = Utf8               ([B)Ljava/lang/String;\n+  #127 = Utf8               encodeBase64URLSafe\n+  #128 = Utf8               encodeBase64URLSafeString\n+  #129 = Utf8               encodeInteger\n+  #130 = Utf8               (Ljava/math/BigInteger;)[B\n+  #131 = Utf8               bigInteger\n+  #132 = Utf8               Ljava/math/BigInteger;\n+  #133 = Utf8               isArrayByteBase64\n+  #134 = Utf8               ([B)Z\n+  #135 = Utf8               arrayOctet\n+  #136 = Utf8               Deprecated\n+  #137 = Utf8               RuntimeVisibleAnnotations\n+  #138 = Utf8               Ljava/lang/Deprecated;\n+  #139 = Utf8               isBase64\n+  #140 = Utf8               (B)Z\n+  #141 = Utf8               octet\n+  #142 = Utf8               B\n+  #143 = Utf8               element\n+  #144 = Utf8               (Ljava/lang/String;)Z\n+  #145 = Utf8               base64\n+  #146 = Utf8               toIntegerBytes\n+  #147 = Utf8               bigInt\n+  #148 = Utf8               bitlen\n+  #149 = Utf8               bigBytes\n+  #150 = Utf8               startSrc\n+  #151 = Utf8               startDst\n+  #152 = Utf8               resizedBytes\n+  #153 = Utf8               <init>\n+  #154 = Utf8               ()V\n+  #155 = Utf8               this\n+  #156 = Utf8               (Z)V\n+  #157 = Utf8               (I)V\n+  #158 = Utf8               lineLength\n+  #159 = Utf8               (I[B)V\n+  #160 = Utf8               (I[BZ)V\n+  #161 = Utf8               (I[BZLorg/apache/commons/codec/CodecPolicy;)V\n+  #162 = Utf8               sep\n+  #163 = Utf8               decodingPolicy\n+  #164 = Utf8               Lorg/apache/commons/codec/CodecPolicy;\n+  #165 = Class              #268          // org/apache/commons/codec/CodecPolicy\n+  #166 = Utf8               decode\n+  #167 = Class              #269          // org/apache/commons/codec/binary/BaseNCodec$Context\n+  #168 = Utf8               Context\n+  #169 = Utf8               InnerClasses\n+  #170 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+  #171 = Utf8               result\n+  #172 = Utf8               buffer\n+  #173 = Utf8               b\n+  #174 = Utf8               i\n+  #175 = Utf8               input\n+  #176 = Utf8               inPos\n+  #177 = Utf8               inAvail\n+  #178 = Utf8               context\n+  #179 = Utf8               Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+  #180 = Utf8               encode\n+  #181 = Utf8               savedPos\n+  #182 = Utf8               in\n+  #183 = Utf8               isInAlphabet\n+  #184 = Utf8               isUrlSafe\n+  #185 = Utf8               ()Z\n+  #186 = Utf8               validateCharacter\n+  #187 = Utf8               (ILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+  #188 = Utf8               emptyBitsMask\n+  #189 = Utf8               validateTrailingCharacter\n+  #190 = Utf8               <clinit>\n+  #191 = Utf8               SourceFile\n+  #192 = Utf8               Base64.java\n+  #193 = Utf8               org/apache/commons/codec/binary/Base64\n+  #194 = NameAndType        #153:#154     // \"<init>\":()V\n+  #195 = NameAndType        #166:#99      // decode:([B)[B\n+  #196 = NameAndType        #166:#104     // decode:(Ljava/lang/String;)[B\n+  #197 = Utf8               java/math/BigInteger\n+  #198 = NameAndType        #98:#99       // decodeBase64:([B)[B\n+  #199 = NameAndType        #153:#159     // \"<init>\":(I[B)V\n+  #200 = NameAndType        #110:#112     // encodeBase64:([BZ)[B\n+  #201 = NameAndType        #110:#115     // encodeBase64:([BZZ)[B\n+  #202 = Utf8               java/lang/Integer\n+  #203 = NameAndType        #110:#117     // encodeBase64:([BZZI)[B\n+  #204 = Class              #270          // org/apache/commons/codec/binary/BinaryCodec\n+  #205 = NameAndType        #271:#134     // isEmpty:([B)Z\n+  #206 = NameAndType        #153:#156     // \"<init>\":(Z)V\n+  #207 = NameAndType        #272:#85      // CHUNK_SEPARATOR:[B\n+  #208 = NameAndType        #153:#160     // \"<init>\":(I[BZ)V\n+  #209 = NameAndType        #273:#274     // getEncodedLength:([B)J\n+  #210 = Utf8               java/lang/IllegalArgumentException\n+  #211 = Utf8               java/lang/StringBuilder\n+  #212 = Utf8               Input array too big, the output array would be bigger (\n+  #213 = NameAndType        #275:#276     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #214 = NameAndType        #275:#277     // append:(J)Ljava/lang/StringBuilder;\n+  #215 = Utf8               ) than the specified maximum size of\n+  #216 = NameAndType        #275:#278     // append:(I)Ljava/lang/StringBuilder;\n+  #217 = NameAndType        #279:#280     // toString:()Ljava/lang/String;\n+  #218 = NameAndType        #153:#281     // \"<init>\":(Ljava/lang/String;)V\n+  #219 = NameAndType        #180:#99      // encode:([B)[B\n+  #220 = Class              #282          // org/apache/commons/codec/binary/StringUtils\n+  #221 = NameAndType        #283:#126     // newStringUsAscii:([B)Ljava/lang/String;\n+  #222 = Class              #284          // java/util/Objects\n+  #223 = NameAndType        #285:#286     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #224 = NameAndType        #146:#130     // toIntegerBytes:(Ljava/math/BigInteger;)[B\n+  #225 = NameAndType        #139:#134     // isBase64:([B)Z\n+  #226 = Utf8               org/apache/commons/codec/binary/BaseNCodec\n+  #227 = NameAndType        #87:#85       // DECODE_TABLE:[B\n+  #228 = NameAndType        #139:#140     // isBase64:(B)Z\n+  #229 = Class              #287          // java/lang/Character\n+  #230 = NameAndType        #288:#289     // isWhitespace:(I)Z\n+  #231 = NameAndType        #290:#104     // getBytesUtf8:(Ljava/lang/String;)[B\n+  #232 = NameAndType        #291:#292     // bitLength:()I\n+  #233 = NameAndType        #293:#294     // toByteArray:()[B\n+  #234 = Class              #295          // java/lang/System\n+  #235 = NameAndType        #296:#297     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #236 = NameAndType        #153:#157     // \"<init>\":(I)V\n+  #237 = NameAndType        #298:#164     // DECODING_POLICY_DEFAULT:Lorg/apache/commons/codec/CodecPolicy;\n+  #238 = NameAndType        #153:#161     // \"<init>\":(I[BZLorg/apache/commons/codec/CodecPolicy;)V\n+  #239 = NameAndType        #153:#299     // \"<init>\":(IIIIBLorg/apache/commons/codec/CodecPolicy;)V\n+  #240 = NameAndType        #94:#85       // decodeTable:[B\n+  #241 = NameAndType        #300:#134     // containsAlphabetOrPad:([B)Z\n+  #242 = NameAndType        #301:#126     // newStringUtf8:([B)Ljava/lang/String;\n+  #243 = Utf8               lineSeparator must not contain base64 characters: [\n+  #244 = Utf8               ]\n+  #245 = NameAndType        #97:#77       // encodeSize:I\n+  #246 = Class              #85           // \"[B\"\n+  #247 = NameAndType        #302:#303     // clone:()Ljava/lang/Object;\n+  #248 = NameAndType        #95:#85       // lineSeparator:[B\n+  #249 = NameAndType        #96:#77       // decodeSize:I\n+  #250 = NameAndType        #86:#85       // URL_SAFE_ENCODE_TABLE:[B\n+  #251 = NameAndType        #84:#85       // STANDARD_ENCODE_TABLE:[B\n+  #252 = NameAndType        #93:#85       // encodeTable:[B\n+  #253 = NameAndType        #304:#114     // eof:Z\n+  #254 = NameAndType        #305:#306     // ensureBufferSize:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n+  #255 = NameAndType        #307:#142     // pad:B\n+  #256 = NameAndType        #308:#77      // modulus:I\n+  #257 = NameAndType        #309:#77      // ibitWorkArea:I\n+  #258 = NameAndType        #310:#77      // pos:I\n+  #259 = NameAndType        #189:#154     // validateTrailingCharacter:()V\n+  #260 = NameAndType        #186:#187     // validateCharacter:(ILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+  #261 = Utf8               java/lang/IllegalStateException\n+  #262 = Utf8               Impossible modulus\n+  #263 = NameAndType        #158:#77      // lineLength:I\n+  #264 = NameAndType        #311:#77      // currentLinePos:I\n+  #265 = NameAndType        #312:#185     // isStrictDecoding:()Z\n+  #266 = Utf8               Strict decoding: Last encoded character (before the paddings if any) is a valid base 64 alphabet but not a possible encoding. Expected the discarded bits from the character to be zero.\n+  #267 = Utf8               Strict decoding: Last encoded character (before the paddings if any) is a valid base 64 alphabet but not a possible encoding. Decoding requires at least two trailing 6-bit characters to create bytes.\n+  #268 = Utf8               org/apache/commons/codec/CodecPolicy\n+  #269 = Utf8               org/apache/commons/codec/binary/BaseNCodec$Context\n+  #270 = Utf8               org/apache/commons/codec/binary/BinaryCodec\n+  #271 = Utf8               isEmpty\n+  #272 = Utf8               CHUNK_SEPARATOR\n+  #273 = Utf8               getEncodedLength\n+  #274 = Utf8               ([B)J\n+  #275 = Utf8               append\n+  #276 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #277 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #278 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #279 = Utf8               toString\n+  #280 = Utf8               ()Ljava/lang/String;\n+  #281 = Utf8               (Ljava/lang/String;)V\n+  #282 = Utf8               org/apache/commons/codec/binary/StringUtils\n+  #283 = Utf8               newStringUsAscii\n+  #284 = Utf8               java/util/Objects\n+  #285 = Utf8               requireNonNull\n+  #286 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;\n+  #287 = Utf8               java/lang/Character\n+  #288 = Utf8               isWhitespace\n+  #289 = Utf8               (I)Z\n+  #290 = Utf8               getBytesUtf8\n+  #291 = Utf8               bitLength\n+  #292 = Utf8               ()I\n+  #293 = Utf8               toByteArray\n+  #294 = Utf8               ()[B\n+  #295 = Utf8               java/lang/System\n+  #296 = Utf8               arraycopy\n+  #297 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #298 = Utf8               DECODING_POLICY_DEFAULT\n+  #299 = Utf8               (IIIIBLorg/apache/commons/codec/CodecPolicy;)V\n+  #300 = Utf8               containsAlphabetOrPad\n+  #301 = Utf8               newStringUtf8\n+  #302 = Utf8               clone\n+  #303 = Utf8               ()Ljava/lang/Object;\n+  #304 = Utf8               eof\n+  #305 = Utf8               ensureBufferSize\n+  #306 = Utf8               (ILorg/apache/commons/codec/binary/BaseNCodec$Context;)[B\n+  #307 = Utf8               pad\n+  #308 = Utf8               modulus\n+  #309 = Utf8               ibitWorkArea\n+  #310 = Utf8               pos\n+  #311 = Utf8               currentLinePos\n+  #312 = Utf8               isStrictDecoding\n {\n   private static final int BITS_PER_ENCODED_BYTE = 6;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 6\n \n   private static final int BYTES_PER_UNENCODED_BLOCK = 3;\n@@ -661,15 +660,15 @@\n       LineNumberTable:\n         line 365: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0 arrayOctet   [B\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #139()\n+      0: #138()\n         java.lang.Deprecated\n \n   public static boolean isBase64(byte);\n     descriptor: (B)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n@@ -1044,14 +1043,16 @@\n        143: getstatic     #57                 // Field URL_SAFE_ENCODE_TABLE:[B\n        146: goto          152\n        149: getstatic     #58                 // Field STANDARD_ENCODE_TABLE:[B\n        152: putfield      #59                 // Field encodeTable:[B\n        155: return\n       LineNumberTable:\n         line 588: 0\n+        line 590: 4\n+        line 588: 18\n         line 143: 21\n         line 595: 28\n         line 596: 32\n         line 597: 40\n         line 598: 46\n         line 600: 79\n         line 601: 83\n@@ -2970,8 +2971,8 @@\n       LineNumberTable:\n         line 75: 0\n         line 88: 385\n         line 109: 770\n }\n SourceFile: \"Base64.java\"\n InnerClasses:\n-  static #169= #168 of #34;               // Context=class org/apache/commons/codec/binary/BaseNCodec$Context of class org/apache/commons/codec/binary/BaseNCodec\n+  static #168= #167 of #34;               // Context=class org/apache/commons/codec/binary/BaseNCodec$Context of class org/apache/commons/codec/binary/BaseNCodec\n"}]}
