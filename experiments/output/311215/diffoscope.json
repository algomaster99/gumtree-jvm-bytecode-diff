{"diffoscope-json-version": 1, "source1": "first/ZipArchiveInputStream.class", "source2": "second/ZipArchiveInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,884 +1,884 @@\n-  SHA-256 checksum eb22eb7d3fd73f1dcb81cc2a542f8996d9865afe56e07b8558d143ce016fb099\n+  SHA-256 checksum 0d9657c1c17eb5bd2a65ccf859372b890be400ada0449a3441aaec6c595b0f32\n   Compiled from \"ZipArchiveInputStream.java\"\n public class org.apache.commons.compress.archivers.zip.ZipArchiveInputStream extends org.apache.commons.compress.archivers.ArchiveInputStream implements org.apache.commons.compress.utils.InputStreamStatistics\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #17                         // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n-  super_class: #277                       // org/apache/commons/compress/archivers/ArchiveInputStream\n+  this_class: #4                          // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n+  super_class: #31                        // org/apache/commons/compress/archivers/ArchiveInputStream\n   interfaces: 1, fields: 28, methods: 45, attributes: 2\n Constant pool:\n-    #1 = Class              #409          // org/apache/commons/compress/archivers/zip/ZipConstants\n-    #2 = Methodref          #17.#410      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.count:(I)V\n-    #3 = Fieldref           #17.#411      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-    #4 = Class              #412          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-    #5 = String             #413          // UTF8\n-    #6 = Methodref          #17.#414      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n-    #7 = Methodref          #17.#415      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;Z)V\n-    #8 = Methodref          #17.#416      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;ZZ)V\n-    #9 = Methodref          #17.#417      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;ZZZ)V\n-   #10 = Methodref          #277.#418     // org/apache/commons/compress/archivers/ArchiveInputStream.\"<init>\":()V\n-   #11 = Class              #419          // java/util/zip/Inflater\n-   #12 = Methodref          #11.#420      // java/util/zip/Inflater.\"<init>\":(Z)V\n-   #13 = Fieldref           #17.#421      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.inf:Ljava/util/zip/Inflater;\n-   #14 = Class              #422          // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-   #15 = Methodref          #423.#424     // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-   #16 = Fieldref           #17.#425      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.buf:Ljava/nio/ByteBuffer;\n-   #17 = Class              #426          // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n-   #18 = Fieldref           #17.#427      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.lfhBuf:[B\n-   #19 = Fieldref           #17.#428      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.skipBuf:[B\n-   #20 = Fieldref           #17.#429      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.shortBuf:[B\n-   #21 = Fieldref           #17.#430      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.wordBuf:[B\n-   #22 = Fieldref           #17.#431      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.twoDwordBuf:[B\n-   #23 = Fieldref           #17.#432      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.encoding:Ljava/lang/String;\n-   #24 = Methodref          #4.#433       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #25 = Fieldref           #17.#434      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #26 = Fieldref           #17.#435      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.useUnicodeExtraFields:Z\n-   #27 = Class              #436          // java/io/PushbackInputStream\n-   #28 = Methodref          #423.#437     // java/nio/ByteBuffer.capacity:()I\n-   #29 = Methodref          #27.#438      // java/io/PushbackInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-   #30 = Fieldref           #17.#439      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.inputStream:Ljava/io/InputStream;\n-   #31 = Fieldref           #17.#440      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.allowStoredEntriesWithDataDescriptor:Z\n-   #32 = Fieldref           #17.#441      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.skipSplitSig:Z\n-   #33 = Methodref          #423.#442     // java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;\n-   #34 = Fieldref           #17.#443      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.uncompressedCount:J\n-   #35 = Fieldref           #17.#444      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.closed:Z\n-   #36 = Fieldref           #17.#445      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.hitCentralDirectory:Z\n-   #37 = Methodref          #17.#446      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.closeEntry:()V\n-   #38 = Methodref          #17.#447      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.getBytesRead:()J\n-   #39 = Methodref          #17.#448      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readFirstLocalFileHeader:()V\n-   #40 = Methodref          #17.#449      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readFully:([B)V\n-   #41 = Class              #450          // java/io/EOFException\n-   #42 = Class              #451          // org/apache/commons/compress/archivers/zip/ZipLong\n-   #43 = Methodref          #42.#452      // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n-   #44 = Fieldref           #42.#453      // org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #45 = Methodref          #42.#454      // org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n-   #46 = Fieldref           #42.#455      // org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #47 = Fieldref           #42.#456      // org/apache/commons/compress/archivers/zip/ZipLong.AED_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #48 = Methodref          #17.#457      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.isApkSigningBlock:([B)Z\n-   #49 = Methodref          #17.#458      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.skipRemainderOfArchive:()V\n-   #50 = Class              #459          // java/util/zip/ZipException\n-   #51 = String             #460          // Unexpected record signature: 0x%x\n-   #52 = Class              #461          // java/lang/Object\n-   #53 = Methodref          #42.#462      // org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n-   #54 = Methodref          #209.#463     // java/lang/Long.valueOf:(J)Ljava/lang/Long;\n-   #55 = Methodref          #464.#465     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-   #56 = Methodref          #50.#466      // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-   #57 = Class              #467          // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry\n-   #58 = Methodref          #57.#468      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1;)V\n-   #59 = Methodref          #469.#470     // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-   #60 = Methodref          #57.#471      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-   #61 = Class              #472          // org/apache/commons/compress/archivers/zip/ZipFile\n-   #62 = Methodref          #147.#473     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setPlatform:(I)V\n-   #63 = Methodref          #337.#474     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #64 = Methodref          #337.#475     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesUTF8ForNames:()Z\n-   #65 = Fieldref           #4.#476       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #66 = Methodref          #337.#477     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesDataDescriptor:()Z\n-   #67 = Methodref          #57.#478      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$202:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n-   #68 = Methodref          #147.#479     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n-   #69 = Methodref          #147.#480     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setMethod:(I)V\n-   #70 = Methodref          #42.#481      // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-   #71 = Methodref          #482.#483     // org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n-   #72 = Methodref          #147.#484     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setTime:(J)V\n-   #73 = Methodref          #57.#485      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n-   #74 = Methodref          #147.#486     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCrc:(J)V\n-   #75 = Methodref          #42.#487      // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n-   #76 = Methodref          #17.#488      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readRange:(I)[B\n-   #77 = InterfaceMethodref #338.#489     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-   #78 = Methodref          #147.#490     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setName:(Ljava/lang/String;[B)V\n-   #79 = Fieldref           #491.#492     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-   #80 = Methodref          #147.#493     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-   #81 = Methodref          #147.#494     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setExtra:([B)V\n-   #82 = Class              #495          // java/lang/RuntimeException\n-   #83 = Class              #496          // java/lang/StringBuilder\n-   #84 = Methodref          #83.#418      // java/lang/StringBuilder.\"<init>\":()V\n-   #85 = String             #497          // Invalid extra data in entry\n-   #86 = Methodref          #83.#498      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #87 = Methodref          #147.#499     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n-   #88 = Methodref          #83.#500      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #89 = Methodref          #50.#501      // java/util/zip/ZipException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n-   #90 = Methodref          #482.#502     // org/apache/commons/compress/archivers/zip/ZipUtil.setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-   #91 = Methodref          #17.#503      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.processZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipLong;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n-   #92 = Methodref          #147.#504     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setLocalHeaderOffset:(J)V\n-   #93 = Methodref          #147.#505     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDataOffset:(J)V\n-   #94 = Methodref          #147.#506     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setStreamContiguous:(Z)V\n-   #95 = Methodref          #147.#507     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-   #96 = Methodref          #340.#508     // org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #97 = Methodref          #147.#509     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n-   #98 = Class              #510          // org/apache/commons/compress/archivers/ArchiveEntry\n-   #99 = Long               -1l\n-  #101 = Methodref          #482.#511     // org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #102 = Fieldref           #340.#512     // org/apache/commons/compress/archivers/zip/ZipMethod.STORED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #103 = Fieldref           #340.#513     // org/apache/commons/compress/archivers/zip/ZipMethod.DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #104 = Class              #514          // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundedInputStream\n-  #105 = Methodref          #104.#515     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundedInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;Ljava/io/InputStream;J)V\n-  #106 = Fieldref           #278.#516     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n-  #107 = Methodref          #340.#517     // org/apache/commons/compress/archivers/zip/ZipMethod.ordinal:()I\n-  #108 = Class              #518          // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-  #109 = Methodref          #108.#519     // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-  #110 = Methodref          #57.#520      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n-  #111 = Class              #521          // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-  #112 = Methodref          #147.#522     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #113 = Methodref          #337.#523     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getSlidingDictionarySize:()I\n-  #114 = Methodref          #337.#524     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getNumberOfShannonFanoTrees:()I\n-  #115 = Methodref          #111.#525     // org/apache/commons/compress/archivers/zip/ExplodingInputStream.\"<init>\":(IILjava/io/InputStream;)V\n-  #116 = Class              #526          // java/lang/IllegalArgumentException\n-  #117 = Class              #527          // java/io/IOException\n-  #118 = String             #528          // bad IMPLODE data\n-  #119 = Methodref          #117.#529     // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #120 = Class              #530          // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n-  #121 = Methodref          #120.#519     // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-  #122 = Class              #531          // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n-  #123 = Methodref          #122.#519     // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-  #124 = Fieldref           #340.#532     // org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #125 = Fieldref           #17.#533      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.entriesRead:I\n-  #126 = Fieldref           #42.#534      // org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #127 = Class              #535          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-  #128 = Fieldref           #536.#537     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.SPLITTING:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #129 = Methodref          #127.#538     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;)V\n-  #130 = Fieldref           #42.#539      // org/apache/commons/compress/archivers/zip/ZipLong.SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #131 = Methodref          #540.#541     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #132 = Fieldref           #134.#542     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #133 = Methodref          #147.#543     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #134 = Class              #544          // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-  #135 = String             #545          // archive contains unparseable zip64 extra field\n-  #136 = Methodref          #57.#546      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$402:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n-  #137 = Fieldref           #42.#547      // org/apache/commons/compress/archivers/zip/ZipLong.ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #138 = Methodref          #134.#548     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #139 = Methodref          #134.#549     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #140 = String             #550          // archive contains corrupted zip64 extra field\n-  #141 = Methodref          #551.#552     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n-  #142 = String             #553          // broken archive, entry with negative compressed size\n-  #143 = Methodref          #147.#554     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n-  #144 = String             #555          // broken archive, entry with negative size\n-  #145 = Methodref          #147.#556     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n-  #146 = Methodref          #17.#557      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #147 = Class              #558          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #148 = Methodref          #17.#559      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.supportsDataDescriptorFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #149 = Methodref          #17.#560      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.supportsCompressedSizeFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #150 = String             #561          // The stream is closed\n-  #151 = Methodref          #117.#466     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-  #152 = Class              #562          // java/lang/ArrayIndexOutOfBoundsException\n-  #153 = Methodref          #152.#418     // java/lang/ArrayIndexOutOfBoundsException.\"<init>\":()V\n-  #154 = Methodref          #482.#563     // org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #155 = Fieldref           #536.#564     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.DATA_DESCRIPTOR:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #156 = Methodref          #127.#565     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #157 = Fieldref           #536.#566     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.UNKNOWN_COMPRESSED_SIZE:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #158 = Methodref          #17.#567      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readStored:([BII)I\n-  #159 = Methodref          #17.#568      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readDeflated:([BII)I\n-  #160 = Fieldref           #340.#569     // org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #161 = Methodref          #340.#570     // org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n-  #162 = Fieldref           #340.#571     // org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #163 = Fieldref           #340.#572     // org/apache/commons/compress/archivers/zip/ZipMethod.BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #164 = Methodref          #57.#573      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n-  #165 = Methodref          #341.#574     // java/io/InputStream.read:([BII)I\n-  #166 = Methodref          #127.#575     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #167 = Methodref          #57.#576      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$500:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/util/zip/CRC32;\n-  #168 = Methodref          #577.#578     // java/util/zip/CRC32.update:([BII)V\n-  #169 = Methodref          #57.#579      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n-  #170 = Methodref          #17.#580      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.getBytesInflated:()J\n-  #171 = Methodref          #57.#581      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$700:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n-  #172 = Class              #582          // org/apache/commons/compress/utils/InputStreamStatistics\n-  #173 = InterfaceMethodref #172.#583     // org/apache/commons/compress/utils/InputStreamStatistics.getCompressedCount:()J\n-  #174 = Fieldref           #17.#584      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.lastStoredEntry:Ljava/io/ByteArrayInputStream;\n-  #175 = Methodref          #17.#585      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readStoredEntry:()V\n-  #176 = Methodref          #245.#574     // java/io/ByteArrayInputStream.read:([BII)I\n-  #177 = Methodref          #147.#586     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n-  #178 = Methodref          #423.#587     // java/nio/ByteBuffer.position:()I\n-  #179 = Methodref          #423.#588     // java/nio/ByteBuffer.limit:()I\n-  #180 = Methodref          #423.#589     // java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;\n-  #181 = Methodref          #423.#590     // java/nio/ByteBuffer.array:()[B\n-  #182 = Methodref          #341.#591     // java/io/InputStream.read:([B)I\n-  #183 = String             #592          // Truncated ZIP file\n-  #184 = Methodref          #57.#593      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$814:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n-  #185 = Methodref          #423.#594     // java/nio/ByteBuffer.remaining:()I\n-  #186 = Methodref          #595.#596     // java/lang/Math.min:(II)I\n-  #187 = Methodref          #423.#597     // java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n-  #188 = Methodref          #57.#598      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$614:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n-  #189 = Methodref          #17.#599      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readFromInflater:([BII)I\n-  #190 = Methodref          #11.#600      // java/util/zip/Inflater.finished:()Z\n-  #191 = Methodref          #11.#601      // java/util/zip/Inflater.needsDictionary:()Z\n-  #192 = String             #602          // This archive needs a preset dictionary which is not supported by Commons Compress.\n-  #193 = Methodref          #11.#603      // java/util/zip/Inflater.needsInput:()Z\n-  #194 = Methodref          #17.#604      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.fill:()I\n-  #195 = Methodref          #11.#605      // java/util/zip/Inflater.inflate:([BII)I\n-  #196 = Class              #606          // java/util/zip/DataFormatException\n-  #197 = Methodref          #196.#607     // java/util/zip/DataFormatException.getMessage:()Ljava/lang/String;\n-  #198 = Methodref          #341.#608     // java/io/InputStream.close:()V\n-  #199 = Methodref          #11.#609      // java/util/zip/Inflater.end:()V\n-  #200 = Methodref          #17.#574      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.read:([BII)I\n-  #201 = Methodref          #116.#418     // java/lang/IllegalArgumentException.\"<init>\":()V\n-  #202 = Fieldref           #14.#610      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n-  #203 = Methodref          #17.#611      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.checksig:([B[B)Z\n-  #204 = Fieldref           #14.#612      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n-  #205 = Fieldref           #14.#613      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n-  #206 = Methodref          #42.#614      // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n-  #207 = Methodref          #17.#615      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.currentEntryHasOutstandingBytes:()Z\n-  #208 = Methodref          #17.#616      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.drainCurrentEntryData:()V\n-  #209 = Class              #617          // java/lang/Long\n-  #210 = Long               9223372036854775807l\n-  #212 = Methodref          #17.#618      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.skip:(J)J\n-  #213 = Methodref          #57.#619      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n-  #214 = Methodref          #17.#620      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.pushback:([BII)V\n-  #215 = Methodref          #57.#621      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$822:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n-  #216 = Methodref          #17.#622      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readDataDescriptor:()V\n-  #217 = Methodref          #11.#623      // java/util/zip/Inflater.reset:()V\n-  #218 = Methodref          #423.#624     // java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;\n-  #219 = Methodref          #625.#626     // java/nio/Buffer.flip:()Ljava/nio/Buffer;\n-  #220 = Methodref          #595.#627     // java/lang/Math.min:(JJ)J\n-  #221 = String             #628          // Truncated ZIP entry:\n-  #222 = Methodref          #629.#630     // org/apache/commons/compress/utils/ArchiveUtils.sanitize:(Ljava/lang/String;)Ljava/lang/String;\n-  #223 = Methodref          #41.#466      // java/io/EOFException.\"<init>\":(Ljava/lang/String;)V\n-  #224 = Methodref          #17.#631      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.count:(J)V\n-  #225 = Methodref          #11.#447      // java/util/zip/Inflater.getBytesRead:()J\n-  #226 = Long               4294967296l\n-  #228 = Methodref          #11.#632      // java/util/zip/Inflater.setInput:([BII)V\n-  #229 = Methodref          #17.#633      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readFully:([BI)V\n-  #230 = Methodref          #634.#635     // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[BII)I\n-  #231 = Methodref          #41.#418      // java/io/EOFException.\"<init>\":()V\n-  #232 = Methodref          #634.#636     // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n-  #233 = Methodref          #42.#637      // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n-  #234 = Methodref          #551.#638     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n-  #235 = Methodref          #551.#639     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([BI)J\n-  #236 = Class              #640          // java/util/zip/ZipEntry\n-  #237 = Class              #641          // java/io/ByteArrayOutputStream\n-  #238 = Methodref          #237.#418     // java/io/ByteArrayOutputStream.\"<init>\":()V\n-  #239 = Methodref          #57.#642      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$400:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n-  #240 = Methodref          #17.#643      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.bufferContainsSignature:(Ljava/io/ByteArrayOutputStream;III)Z\n-  #241 = Methodref          #17.#644      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.cacheBytesRead:(Ljava/io/ByteArrayOutputStream;III)I\n-  #242 = String             #645          // compressed and uncompressed size don\\'t match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n-  #243 = Methodref          #237.#646     // java/io/ByteArrayOutputStream.toByteArray:()[B\n-  #244 = String             #647          // actual and claimed size don\\'t match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n-  #245 = Class              #648          // java/io/ByteArrayInputStream\n-  #246 = Methodref          #245.#452     // java/io/ByteArrayInputStream.\"<init>\":([B)V\n-  #247 = Fieldref           #17.#649      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.LFH:[B\n-  #248 = Fieldref           #17.#650      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.CFH:[B\n-  #249 = Fieldref           #17.#651      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.DD:[B\n-  #250 = Methodref          #237.#652     // java/io/ByteArrayOutputStream.write:([BII)V\n-  #251 = Methodref          #27.#653      // java/io/PushbackInputStream.unread:([BII)V\n-  #252 = Methodref          #17.#654      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.pushedBackBytes:(J)V\n-  #253 = Long               46l\n-  #255 = Long               30l\n-  #257 = Methodref          #17.#655      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.realSkip:(J)V\n-  #258 = Methodref          #17.#656      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.findEocdRecord:()Z\n-  #259 = Long               16l\n-  #261 = Methodref          #469.#657     // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n-  #262 = Methodref          #17.#658      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readOneByte:()I\n-  #263 = Methodref          #17.#659      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.isFirstByteOfEocdSig:(I)Z\n-  #264 = Methodref          #341.#660     // java/io/InputStream.read:()I\n-  #265 = Methodref          #551.#661     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getValue:([B)Ljava/math/BigInteger;\n-  #266 = Fieldref           #17.#662      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.APK_SIGNING_BLOCK_MAGIC:[B\n-  #267 = Methodref          #400.#663     // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-  #268 = Methodref          #400.#664     // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #269 = Methodref          #400.#665     // java/math/BigInteger.signum:()I\n-  #270 = Methodref          #400.#666     // java/math/BigInteger.intValue:()I\n-  #271 = Methodref          #595.#667     // java/lang/Math.abs:(I)I\n-  #272 = Fieldref           #17.#668      // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.LONG_MAX:Ljava/math/BigInteger;\n-  #273 = Methodref          #400.#669     // java/math/BigInteger.compareTo:(Ljava/math/BigInteger;)I\n-  #274 = Methodref          #400.#670     // java/math/BigInteger.negate:()Ljava/math/BigInteger;\n-  #275 = Methodref          #400.#671     // java/math/BigInteger.longValue:()J\n-  #276 = Methodref          #672.#673     // java/util/Arrays.equals:([B[B)Z\n-  #277 = Class              #674          // org/apache/commons/compress/archivers/ArchiveInputStream\n-  #278 = Class              #675          // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1\n-  #279 = Utf8               InnerClasses\n-  #280 = Utf8               BoundedInputStream\n-  #281 = Utf8               CurrentEntry\n-  #282 = Utf8               zipEncoding\n-  #283 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #284 = Utf8               encoding\n-  #285 = Utf8               Ljava/lang/String;\n-  #286 = Utf8               useUnicodeExtraFields\n-  #287 = Utf8               Z\n-  #288 = Utf8               inputStream\n-  #289 = Utf8               Ljava/io/InputStream;\n-  #290 = Utf8               inf\n-  #291 = Utf8               Ljava/util/zip/Inflater;\n-  #292 = Utf8               buf\n-  #293 = Utf8               Ljava/nio/ByteBuffer;\n-  #294 = Utf8               current\n-  #295 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-  #296 = Utf8               closed\n-  #297 = Utf8               hitCentralDirectory\n-  #298 = Utf8               lastStoredEntry\n-  #299 = Utf8               Ljava/io/ByteArrayInputStream;\n-  #300 = Utf8               allowStoredEntriesWithDataDescriptor\n-  #301 = Utf8               uncompressedCount\n-  #302 = Utf8               J\n-  #303 = Utf8               skipSplitSig\n-  #304 = Utf8               LFH_LEN\n-  #305 = Utf8               I\n-  #306 = Utf8               ConstantValue\n-  #307 = Integer            30\n-  #308 = Utf8               CFH_LEN\n-  #309 = Integer            46\n-  #310 = Utf8               TWO_EXP_32\n-  #311 = Utf8               lfhBuf\n-  #312 = Utf8               [B\n-  #313 = Utf8               skipBuf\n-  #314 = Utf8               shortBuf\n-  #315 = Utf8               wordBuf\n-  #316 = Utf8               twoDwordBuf\n-  #317 = Utf8               entriesRead\n-  #318 = Utf8               USE_ZIPFILE_INSTEAD_OF_STREAM_DISCLAIMER\n-  #319 = String             #676          //  while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n-  #320 = Utf8               LFH\n-  #321 = Utf8               CFH\n-  #322 = Utf8               DD\n-  #323 = Utf8               APK_SIGNING_BLOCK_MAGIC\n-  #324 = Utf8               LONG_MAX\n-  #325 = Utf8               Ljava/math/BigInteger;\n-  #326 = Utf8               <init>\n-  #327 = Utf8               (Ljava/io/InputStream;)V\n-  #328 = Utf8               Code\n-  #329 = Utf8               LineNumberTable\n-  #330 = Utf8               (Ljava/io/InputStream;Ljava/lang/String;)V\n-  #331 = Utf8               (Ljava/io/InputStream;Ljava/lang/String;Z)V\n-  #332 = Utf8               (Ljava/io/InputStream;Ljava/lang/String;ZZ)V\n-  #333 = Utf8               (Ljava/io/InputStream;Ljava/lang/String;ZZZ)V\n-  #334 = Utf8               getNextZipEntry\n-  #335 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #336 = Utf8               StackMapTable\n-  #337 = Class              #677          // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-  #338 = Class              #678          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #339 = Class              #312          // \"[B\"\n-  #340 = Class              #679          // org/apache/commons/compress/archivers/zip/ZipMethod\n-  #341 = Class              #680          // java/io/InputStream\n-  #342 = Utf8               Exceptions\n-  #343 = Utf8               readFirstLocalFileHeader\n-  #344 = Utf8               ()V\n-  #345 = Utf8               processZip64Extra\n-  #346 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipLong;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n-  #347 = Class              #681          // org/apache/commons/compress/archivers/zip/ZipExtraField\n-  #348 = Utf8               getNextEntry\n-  #349 = Utf8               ()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n-  #350 = Utf8               canReadEntryData\n-  #351 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z\n-  #352 = Utf8               read\n-  #353 = Utf8               ([BII)I\n-  #354 = Utf8               getCompressedCount\n-  #355 = Utf8               ()J\n-  #356 = Utf8               getUncompressedCount\n-  #357 = Utf8               readStored\n-  #358 = Utf8               readDeflated\n-  #359 = Utf8               readFromInflater\n-  #360 = Utf8               close\n-  #361 = Class              #682          // java/lang/Throwable\n-  #362 = Utf8               skip\n-  #363 = Utf8               (J)J\n-  #364 = Utf8               matches\n-  #365 = Utf8               ([BI)Z\n-  #366 = Utf8               checksig\n-  #367 = Utf8               ([B[B)Z\n-  #368 = Utf8               closeEntry\n-  #369 = Utf8               currentEntryHasOutstandingBytes\n-  #370 = Utf8               ()Z\n-  #371 = Utf8               drainCurrentEntryData\n-  #372 = Utf8               getBytesInflated\n-  #373 = Utf8               fill\n-  #374 = Utf8               ()I\n-  #375 = Utf8               readFully\n-  #376 = Utf8               ([B)V\n-  #377 = Utf8               ([BI)V\n-  #378 = Utf8               readRange\n-  #379 = Utf8               (I)[B\n-  #380 = Utf8               readDataDescriptor\n-  #381 = Utf8               supportsDataDescriptorFor\n-  #382 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #383 = Utf8               supportsCompressedSizeFor\n-  #384 = Utf8               readStoredEntry\n-  #385 = Utf8               bufferContainsSignature\n-  #386 = Utf8               (Ljava/io/ByteArrayOutputStream;III)Z\n-  #387 = Utf8               cacheBytesRead\n-  #388 = Utf8               (Ljava/io/ByteArrayOutputStream;III)I\n-  #389 = Utf8               pushback\n-  #390 = Utf8               ([BII)V\n-  #391 = Utf8               skipRemainderOfArchive\n-  #392 = Utf8               findEocdRecord\n-  #393 = Utf8               realSkip\n-  #394 = Utf8               (J)V\n-  #395 = Utf8               readOneByte\n-  #396 = Utf8               isFirstByteOfEocdSig\n-  #397 = Utf8               (I)Z\n-  #398 = Utf8               isApkSigningBlock\n-  #399 = Utf8               ([B)Z\n-  #400 = Class              #683          // java/math/BigInteger\n-  #401 = Utf8               access$900\n-  #402 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;I)V\n-  #403 = Utf8               access$1000\n-  #404 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-  #405 = Utf8               access$1100\n-  #406 = Utf8               <clinit>\n-  #407 = Utf8               SourceFile\n-  #408 = Utf8               ZipArchiveInputStream.java\n-  #409 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n-  #410 = NameAndType        #684:#685     // count:(I)V\n-  #411 = NameAndType        #294:#295     // current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-  #412 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #413 = Utf8               UTF8\n-  #414 = NameAndType        #326:#330     // \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n-  #415 = NameAndType        #326:#331     // \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;Z)V\n-  #416 = NameAndType        #326:#332     // \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;ZZ)V\n-  #417 = NameAndType        #326:#333     // \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;ZZZ)V\n-  #418 = NameAndType        #326:#344     // \"<init>\":()V\n-  #419 = Utf8               java/util/zip/Inflater\n-  #420 = NameAndType        #326:#686     // \"<init>\":(Z)V\n-  #421 = NameAndType        #290:#291     // inf:Ljava/util/zip/Inflater;\n-  #422 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n-  #423 = Class              #687          // java/nio/ByteBuffer\n-  #424 = NameAndType        #688:#689     // allocate:(I)Ljava/nio/ByteBuffer;\n-  #425 = NameAndType        #292:#293     // buf:Ljava/nio/ByteBuffer;\n-  #426 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n-  #427 = NameAndType        #311:#312     // lfhBuf:[B\n-  #428 = NameAndType        #313:#312     // skipBuf:[B\n-  #429 = NameAndType        #314:#312     // shortBuf:[B\n-  #430 = NameAndType        #315:#312     // wordBuf:[B\n-  #431 = NameAndType        #316:#312     // twoDwordBuf:[B\n-  #432 = NameAndType        #284:#285     // encoding:Ljava/lang/String;\n-  #433 = NameAndType        #690:#691     // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #434 = NameAndType        #282:#283     // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #435 = NameAndType        #286:#287     // useUnicodeExtraFields:Z\n-  #436 = Utf8               java/io/PushbackInputStream\n-  #437 = NameAndType        #692:#374     // capacity:()I\n-  #438 = NameAndType        #326:#693     // \"<init>\":(Ljava/io/InputStream;I)V\n-  #439 = NameAndType        #288:#289     // inputStream:Ljava/io/InputStream;\n-  #440 = NameAndType        #300:#287     // allowStoredEntriesWithDataDescriptor:Z\n-  #441 = NameAndType        #303:#287     // skipSplitSig:Z\n-  #442 = NameAndType        #694:#695     // limit:(I)Ljava/nio/Buffer;\n-  #443 = NameAndType        #301:#302     // uncompressedCount:J\n-  #444 = NameAndType        #296:#287     // closed:Z\n-  #445 = NameAndType        #297:#287     // hitCentralDirectory:Z\n-  #446 = NameAndType        #368:#344     // closeEntry:()V\n-  #447 = NameAndType        #696:#355     // getBytesRead:()J\n-  #448 = NameAndType        #343:#344     // readFirstLocalFileHeader:()V\n-  #449 = NameAndType        #375:#376     // readFully:([B)V\n-  #450 = Utf8               java/io/EOFException\n-  #451 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-  #452 = NameAndType        #326:#376     // \"<init>\":([B)V\n-  #453 = NameAndType        #697:#698     // LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #454 = NameAndType        #699:#700     // equals:(Ljava/lang/Object;)Z\n-  #455 = NameAndType        #701:#698     // CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #456 = NameAndType        #702:#698     // AED_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #457 = NameAndType        #398:#399     // isApkSigningBlock:([B)Z\n-  #458 = NameAndType        #391:#344     // skipRemainderOfArchive:()V\n-  #459 = Utf8               java/util/zip/ZipException\n-  #460 = Utf8               Unexpected record signature: 0x%x\n-  #461 = Utf8               java/lang/Object\n-  #462 = NameAndType        #703:#355     // getValue:()J\n-  #463 = NameAndType        #704:#705     // valueOf:(J)Ljava/lang/Long;\n-  #464 = Class              #706          // java/lang/String\n-  #465 = NameAndType        #707:#708     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #466 = NameAndType        #326:#709     // \"<init>\":(Ljava/lang/String;)V\n-  #467 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry\n-  #468 = NameAndType        #326:#710     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1;)V\n-  #469 = Class              #711          // org/apache/commons/compress/archivers/zip/ZipShort\n-  #470 = NameAndType        #703:#712     // getValue:([BI)I\n-  #471 = NameAndType        #713:#714     // access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #472 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile\n-  #473 = NameAndType        #715:#685     // setPlatform:(I)V\n-  #474 = NameAndType        #716:#717     // parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #475 = NameAndType        #718:#370     // usesUTF8ForNames:()Z\n-  #476 = NameAndType        #719:#283     // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #477 = NameAndType        #720:#370     // usesDataDescriptor:()Z\n-  #478 = NameAndType        #721:#722     // access$202:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n-  #479 = NameAndType        #723:#724     // setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n-  #480 = NameAndType        #725:#685     // setMethod:(I)V\n-  #481 = NameAndType        #703:#726     // getValue:([BI)J\n-  #482 = Class              #727          // org/apache/commons/compress/archivers/zip/ZipUtil\n-  #483 = NameAndType        #728:#363     // dosToJavaTime:(J)J\n-  #484 = NameAndType        #729:#394     // setTime:(J)V\n-  #485 = NameAndType        #730:#731     // access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n-  #486 = NameAndType        #732:#394     // setCrc:(J)V\n-  #487 = NameAndType        #326:#377     // \"<init>\":([BI)V\n-  #488 = NameAndType        #378:#379     // readRange:(I)[B\n-  #489 = NameAndType        #733:#734     // decode:([B)Ljava/lang/String;\n-  #490 = NameAndType        #735:#736     // setName:(Ljava/lang/String;[B)V\n-  #491 = Class              #737          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n-  #492 = NameAndType        #739:#740     // NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-  #493 = NameAndType        #741:#742     // setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-  #494 = NameAndType        #743:#376     // setExtra:([B)V\n-  #495 = Utf8               java/lang/RuntimeException\n-  #496 = Utf8               java/lang/StringBuilder\n-  #497 = Utf8               Invalid extra data in entry\n-  #498 = NameAndType        #744:#745     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #499 = NameAndType        #746:#747     // getName:()Ljava/lang/String;\n-  #500 = NameAndType        #748:#747     // toString:()Ljava/lang/String;\n-  #501 = NameAndType        #749:#750     // initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n-  #502 = NameAndType        #751:#752     // setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-  #503 = NameAndType        #345:#346     // processZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipLong;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n-  #504 = NameAndType        #753:#394     // setLocalHeaderOffset:(J)V\n-  #505 = NameAndType        #754:#394     // setDataOffset:(J)V\n-  #506 = NameAndType        #755:#686     // setStreamContiguous:(Z)V\n-  #507 = NameAndType        #756:#374     // getMethod:()I\n-  #508 = NameAndType        #757:#758     // getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #509 = NameAndType        #759:#355     // getCompressedSize:()J\n-  #510 = Utf8               org/apache/commons/compress/archivers/ArchiveEntry\n-  #511 = NameAndType        #760:#382     // canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #512 = NameAndType        #761:#762     // STORED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #513 = NameAndType        #763:#762     // DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #514 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundedInputStream\n-  #515 = NameAndType        #326:#764     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;Ljava/io/InputStream;J)V\n-  #516 = NameAndType        #765:#766     // $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n-  #517 = NameAndType        #767:#374     // ordinal:()I\n-  #518 = Utf8               org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-  #519 = NameAndType        #326:#327     // \"<init>\":(Ljava/io/InputStream;)V\n-  #520 = NameAndType        #768:#769     // access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n-  #521 = Utf8               org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-  #522 = NameAndType        #770:#771     // getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #523 = NameAndType        #772:#374     // getSlidingDictionarySize:()I\n-  #524 = NameAndType        #773:#374     // getNumberOfShannonFanoTrees:()I\n-  #525 = NameAndType        #326:#774     // \"<init>\":(IILjava/io/InputStream;)V\n-  #526 = Utf8               java/lang/IllegalArgumentException\n-  #527 = Utf8               java/io/IOException\n-  #528 = Utf8               bad IMPLODE data\n-  #529 = NameAndType        #326:#775     // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #530 = Utf8               org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n-  #531 = Utf8               org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n-  #532 = NameAndType        #776:#762     // ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #533 = NameAndType        #317:#305     // entriesRead:I\n-  #534 = NameAndType        #777:#698     // DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #535 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-  #536 = Class              #778          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n-  #537 = NameAndType        #780:#781     // SPLITTING:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #538 = NameAndType        #326:#782     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;)V\n-  #539 = NameAndType        #783:#698     // SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #540 = Class              #784          // java/lang/System\n-  #541 = NameAndType        #785:#786     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #542 = NameAndType        #787:#788     // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #543 = NameAndType        #789:#790     // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #544 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-  #545 = Utf8               archive contains unparseable zip64 extra field\n-  #546 = NameAndType        #791:#722     // access$402:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n-  #547 = NameAndType        #792:#698     // ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #548 = NameAndType        #759:#793     // getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #549 = NameAndType        #794:#793     // getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #550 = Utf8               archive contains corrupted zip64 extra field\n-  #551 = Class              #795          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  #552 = NameAndType        #796:#355     // getLongValue:()J\n-  #553 = Utf8               broken archive, entry with negative compressed size\n-  #554 = NameAndType        #797:#394     // setCompressedSize:(J)V\n-  #555 = Utf8               broken archive, entry with negative size\n-  #556 = NameAndType        #798:#394     // setSize:(J)V\n-  #557 = NameAndType        #334:#335     // getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #558 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #559 = NameAndType        #381:#382     // supportsDataDescriptorFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #560 = NameAndType        #383:#382     // supportsCompressedSizeFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #561 = Utf8               The stream is closed\n-  #562 = Utf8               java/lang/ArrayIndexOutOfBoundsException\n-  #563 = NameAndType        #799:#800     // checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #564 = NameAndType        #801:#781     // DATA_DESCRIPTOR:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #565 = NameAndType        #326:#802     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #566 = NameAndType        #803:#781     // UNKNOWN_COMPRESSED_SIZE:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #567 = NameAndType        #357:#353     // readStored:([BII)I\n-  #568 = NameAndType        #358:#353     // readDeflated:([BII)I\n-  #569 = NameAndType        #804:#762     // UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #570 = NameAndType        #805:#374     // getCode:()I\n-  #571 = NameAndType        #806:#762     // IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #572 = NameAndType        #807:#762     // BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #573 = NameAndType        #808:#809     // access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n-  #574 = NameAndType        #352:#353     // read:([BII)I\n-  #575 = NameAndType        #326:#810     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #576 = NameAndType        #811:#812     // access$500:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/util/zip/CRC32;\n-  #577 = Class              #813          // java/util/zip/CRC32\n-  #578 = NameAndType        #814:#390     // update:([BII)V\n-  #579 = NameAndType        #815:#816     // access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n-  #580 = NameAndType        #372:#355     // getBytesInflated:()J\n-  #581 = NameAndType        #817:#809     // access$700:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n-  #582 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n-  #583 = NameAndType        #354:#355     // getCompressedCount:()J\n-  #584 = NameAndType        #298:#299     // lastStoredEntry:Ljava/io/ByteArrayInputStream;\n-  #585 = NameAndType        #384:#344     // readStoredEntry:()V\n-  #586 = NameAndType        #794:#355     // getSize:()J\n-  #587 = NameAndType        #818:#374     // position:()I\n-  #588 = NameAndType        #694:#374     // limit:()I\n-  #589 = NameAndType        #818:#695     // position:(I)Ljava/nio/Buffer;\n-  #590 = NameAndType        #819:#820     // array:()[B\n-  #591 = NameAndType        #352:#821     // read:([B)I\n-  #592 = Utf8               Truncated ZIP file\n-  #593 = NameAndType        #822:#823     // access$814:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n-  #594 = NameAndType        #824:#374     // remaining:()I\n-  #595 = Class              #825          // java/lang/Math\n-  #596 = NameAndType        #826:#827     // min:(II)I\n-  #597 = NameAndType        #828:#829     // get:([BII)Ljava/nio/ByteBuffer;\n-  #598 = NameAndType        #830:#823     // access$614:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n-  #599 = NameAndType        #359:#353     // readFromInflater:([BII)I\n-  #600 = NameAndType        #831:#370     // finished:()Z\n-  #601 = NameAndType        #832:#370     // needsDictionary:()Z\n-  #602 = Utf8               This archive needs a preset dictionary which is not supported by Commons Compress.\n-  #603 = NameAndType        #833:#370     // needsInput:()Z\n-  #604 = NameAndType        #373:#374     // fill:()I\n-  #605 = NameAndType        #834:#353     // inflate:([BII)I\n-  #606 = Utf8               java/util/zip/DataFormatException\n-  #607 = NameAndType        #835:#747     // getMessage:()Ljava/lang/String;\n-  #608 = NameAndType        #360:#344     // close:()V\n-  #609 = NameAndType        #836:#344     // end:()V\n-  #610 = NameAndType        #697:#312     // LFH_SIG:[B\n-  #611 = NameAndType        #366:#367     // checksig:([B[B)Z\n-  #612 = NameAndType        #837:#312     // EOCD_SIG:[B\n-  #613 = NameAndType        #777:#312     // DD_SIG:[B\n-  #614 = NameAndType        #838:#820     // getBytes:()[B\n-  #615 = NameAndType        #369:#370     // currentEntryHasOutstandingBytes:()Z\n-  #616 = NameAndType        #371:#344     // drainCurrentEntryData:()V\n-  #617 = Utf8               java/lang/Long\n-  #618 = NameAndType        #362:#363     // skip:(J)J\n-  #619 = NameAndType        #839:#816     // access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n-  #620 = NameAndType        #389:#390     // pushback:([BII)V\n-  #621 = NameAndType        #840:#823     // access$822:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n-  #622 = NameAndType        #380:#344     // readDataDescriptor:()V\n-  #623 = NameAndType        #841:#344     // reset:()V\n-  #624 = NameAndType        #842:#843     // clear:()Ljava/nio/Buffer;\n-  #625 = Class              #844          // java/nio/Buffer\n-  #626 = NameAndType        #845:#843     // flip:()Ljava/nio/Buffer;\n-  #627 = NameAndType        #826:#846     // min:(JJ)J\n-  #628 = Utf8               Truncated ZIP entry:\n-  #629 = Class              #847          // org/apache/commons/compress/utils/ArchiveUtils\n-  #630 = NameAndType        #848:#849     // sanitize:(Ljava/lang/String;)Ljava/lang/String;\n-  #631 = NameAndType        #684:#394     // count:(J)V\n-  #632 = NameAndType        #850:#390     // setInput:([BII)V\n-  #633 = NameAndType        #375:#377     // readFully:([BI)V\n-  #634 = Class              #851          // org/apache/commons/compress/utils/IOUtils\n-  #635 = NameAndType        #375:#852     // readFully:(Ljava/io/InputStream;[BII)I\n-  #636 = NameAndType        #378:#853     // readRange:(Ljava/io/InputStream;I)[B\n-  #637 = NameAndType        #703:#854     // getValue:([B)J\n-  #638 = NameAndType        #796:#854     // getLongValue:([B)J\n-  #639 = NameAndType        #796:#726     // getLongValue:([BI)J\n-  #640 = Utf8               java/util/zip/ZipEntry\n-  #641 = Utf8               java/io/ByteArrayOutputStream\n-  #642 = NameAndType        #855:#731     // access$400:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n-  #643 = NameAndType        #385:#386     // bufferContainsSignature:(Ljava/io/ByteArrayOutputStream;III)Z\n-  #644 = NameAndType        #387:#388     // cacheBytesRead:(Ljava/io/ByteArrayOutputStream;III)I\n-  #645 = Utf8               compressed and uncompressed size don\\'t match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n-  #646 = NameAndType        #856:#820     // toByteArray:()[B\n-  #647 = Utf8               actual and claimed size don\\'t match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n-  #648 = Utf8               java/io/ByteArrayInputStream\n-  #649 = NameAndType        #320:#312     // LFH:[B\n-  #650 = NameAndType        #321:#312     // CFH:[B\n-  #651 = NameAndType        #322:#312     // DD:[B\n-  #652 = NameAndType        #857:#390     // write:([BII)V\n-  #653 = NameAndType        #858:#390     // unread:([BII)V\n-  #654 = NameAndType        #859:#394     // pushedBackBytes:(J)V\n-  #655 = NameAndType        #393:#394     // realSkip:(J)V\n-  #656 = NameAndType        #392:#370     // findEocdRecord:()Z\n-  #657 = NameAndType        #703:#821     // getValue:([B)I\n-  #658 = NameAndType        #395:#374     // readOneByte:()I\n-  #659 = NameAndType        #396:#397     // isFirstByteOfEocdSig:(I)Z\n-  #660 = NameAndType        #352:#374     // read:()I\n-  #661 = NameAndType        #703:#860     // getValue:([B)Ljava/math/BigInteger;\n-  #662 = NameAndType        #323:#312     // APK_SIGNING_BLOCK_MAGIC:[B\n-  #663 = NameAndType        #704:#861     // valueOf:(J)Ljava/math/BigInteger;\n-  #664 = NameAndType        #862:#863     // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #665 = NameAndType        #864:#374     // signum:()I\n-  #666 = NameAndType        #865:#374     // intValue:()I\n-  #667 = NameAndType        #866:#867     // abs:(I)I\n-  #668 = NameAndType        #324:#325     // LONG_MAX:Ljava/math/BigInteger;\n-  #669 = NameAndType        #868:#869     // compareTo:(Ljava/math/BigInteger;)I\n-  #670 = NameAndType        #870:#871     // negate:()Ljava/math/BigInteger;\n-  #671 = NameAndType        #872:#355     // longValue:()J\n-  #672 = Class              #873          // java/util/Arrays\n-  #673 = NameAndType        #699:#367     // equals:([B[B)Z\n-  #674 = Utf8               org/apache/commons/compress/archivers/ArchiveInputStream\n-  #675 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1\n-  #676 = Utf8                while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n-  #677 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-  #678 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #679 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n-  #680 = Utf8               java/io/InputStream\n-  #681 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n-  #682 = Utf8               java/lang/Throwable\n-  #683 = Utf8               java/math/BigInteger\n-  #684 = Utf8               count\n-  #685 = Utf8               (I)V\n-  #686 = Utf8               (Z)V\n-  #687 = Utf8               java/nio/ByteBuffer\n-  #688 = Utf8               allocate\n-  #689 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #690 = Utf8               getZipEncoding\n-  #691 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #692 = Utf8               capacity\n-  #693 = Utf8               (Ljava/io/InputStream;I)V\n-  #694 = Utf8               limit\n-  #695 = Utf8               (I)Ljava/nio/Buffer;\n-  #696 = Utf8               getBytesRead\n-  #697 = Utf8               LFH_SIG\n-  #698 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #699 = Utf8               equals\n-  #700 = Utf8               (Ljava/lang/Object;)Z\n-  #701 = Utf8               CFH_SIG\n-  #702 = Utf8               AED_SIG\n-  #703 = Utf8               getValue\n-  #704 = Utf8               valueOf\n-  #705 = Utf8               (J)Ljava/lang/Long;\n-  #706 = Utf8               java/lang/String\n-  #707 = Utf8               format\n-  #708 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #709 = Utf8               (Ljava/lang/String;)V\n-  #710 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1;)V\n-  #711 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-  #712 = Utf8               ([BI)I\n-  #713 = Utf8               access$100\n-  #714 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #715 = Utf8               setPlatform\n-  #716 = Utf8               parse\n-  #717 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #718 = Utf8               usesUTF8ForNames\n-  #719 = Utf8               UTF8_ZIP_ENCODING\n-  #720 = Utf8               usesDataDescriptor\n-  #721 = Utf8               access$202\n-  #722 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n-  #723 = Utf8               setGeneralPurposeBit\n-  #724 = Utf8               (Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n-  #725 = Utf8               setMethod\n-  #726 = Utf8               ([BI)J\n-  #727 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n-  #728 = Utf8               dosToJavaTime\n-  #729 = Utf8               setTime\n-  #730 = Utf8               access$200\n-  #731 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n-  #732 = Utf8               setCrc\n-  #733 = Utf8               decode\n-  #734 = Utf8               ([B)Ljava/lang/String;\n-  #735 = Utf8               setName\n-  #736 = Utf8               (Ljava/lang/String;[B)V\n-  #737 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n-  #738 = Utf8               NameSource\n-  #739 = Utf8               NAME_WITH_EFS_FLAG\n-  #740 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-  #741 = Utf8               setNameSource\n-  #742 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-  #743 = Utf8               setExtra\n-  #744 = Utf8               append\n-  #745 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #746 = Utf8               getName\n-  #747 = Utf8               ()Ljava/lang/String;\n-  #748 = Utf8               toString\n-  #749 = Utf8               initCause\n-  #750 = Utf8               (Ljava/lang/Throwable;)Ljava/lang/Throwable;\n-  #751 = Utf8               setNameAndCommentFromExtraFields\n-  #752 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-  #753 = Utf8               setLocalHeaderOffset\n-  #754 = Utf8               setDataOffset\n-  #755 = Utf8               setStreamContiguous\n-  #756 = Utf8               getMethod\n-  #757 = Utf8               getMethodByCode\n-  #758 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #759 = Utf8               getCompressedSize\n-  #760 = Utf8               canHandleEntryData\n-  #761 = Utf8               STORED\n-  #762 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #763 = Utf8               DEFLATED\n-  #764 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;Ljava/io/InputStream;J)V\n-  #765 = Utf8               $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod\n-  #766 = Utf8               [I\n-  #767 = Utf8               ordinal\n-  #768 = Utf8               access$302\n-  #769 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n-  #770 = Utf8               getGeneralPurposeBit\n-  #771 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #772 = Utf8               getSlidingDictionarySize\n-  #773 = Utf8               getNumberOfShannonFanoTrees\n-  #774 = Utf8               (IILjava/io/InputStream;)V\n-  #775 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #776 = Utf8               ENHANCED_DEFLATED\n-  #777 = Utf8               DD_SIG\n-  #778 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n-  #779 = Utf8               Feature\n-  #780 = Utf8               SPLITTING\n-  #781 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #782 = Utf8               (Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;)V\n-  #783 = Utf8               SINGLE_SEGMENT_SPLIT_MARKER\n-  #784 = Utf8               java/lang/System\n-  #785 = Utf8               arraycopy\n-  #786 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #787 = Utf8               HEADER_ID\n-  #788 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #789 = Utf8               getExtraField\n-  #790 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #791 = Utf8               access$402\n-  #792 = Utf8               ZIP64_MAGIC\n-  #793 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-  #794 = Utf8               getSize\n-  #795 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  #796 = Utf8               getLongValue\n-  #797 = Utf8               setCompressedSize\n-  #798 = Utf8               setSize\n-  #799 = Utf8               checkRequestedFeatures\n-  #800 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #801 = Utf8               DATA_DESCRIPTOR\n-  #802 = Utf8               (Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #803 = Utf8               UNKNOWN_COMPRESSED_SIZE\n-  #804 = Utf8               UNSHRINKING\n-  #805 = Utf8               getCode\n-  #806 = Utf8               IMPLODING\n-  #807 = Utf8               BZIP2\n-  #808 = Utf8               access$300\n-  #809 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n-  #810 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #811 = Utf8               access$500\n-  #812 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/util/zip/CRC32;\n-  #813 = Utf8               java/util/zip/CRC32\n-  #814 = Utf8               update\n-  #815 = Utf8               access$600\n-  #816 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n-  #817 = Utf8               access$700\n-  #818 = Utf8               position\n-  #819 = Utf8               array\n-  #820 = Utf8               ()[B\n-  #821 = Utf8               ([B)I\n-  #822 = Utf8               access$814\n-  #823 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n-  #824 = Utf8               remaining\n-  #825 = Utf8               java/lang/Math\n-  #826 = Utf8               min\n-  #827 = Utf8               (II)I\n-  #828 = Utf8               get\n-  #829 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n-  #830 = Utf8               access$614\n-  #831 = Utf8               finished\n-  #832 = Utf8               needsDictionary\n-  #833 = Utf8               needsInput\n-  #834 = Utf8               inflate\n-  #835 = Utf8               getMessage\n-  #836 = Utf8               end\n-  #837 = Utf8               EOCD_SIG\n-  #838 = Utf8               getBytes\n-  #839 = Utf8               access$800\n-  #840 = Utf8               access$822\n-  #841 = Utf8               reset\n-  #842 = Utf8               clear\n-  #843 = Utf8               ()Ljava/nio/Buffer;\n-  #844 = Utf8               java/nio/Buffer\n-  #845 = Utf8               flip\n-  #846 = Utf8               (JJ)J\n-  #847 = Utf8               org/apache/commons/compress/utils/ArchiveUtils\n-  #848 = Utf8               sanitize\n-  #849 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #850 = Utf8               setInput\n-  #851 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #852 = Utf8               (Ljava/io/InputStream;[BII)I\n-  #853 = Utf8               (Ljava/io/InputStream;I)[B\n-  #854 = Utf8               ([B)J\n-  #855 = Utf8               access$400\n-  #856 = Utf8               toByteArray\n-  #857 = Utf8               write\n-  #858 = Utf8               unread\n-  #859 = Utf8               pushedBackBytes\n-  #860 = Utf8               ([B)Ljava/math/BigInteger;\n-  #861 = Utf8               (J)Ljava/math/BigInteger;\n-  #862 = Utf8               add\n-  #863 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n-  #864 = Utf8               signum\n-  #865 = Utf8               intValue\n-  #866 = Utf8               abs\n-  #867 = Utf8               (I)I\n-  #868 = Utf8               compareTo\n-  #869 = Utf8               (Ljava/math/BigInteger;)I\n-  #870 = Utf8               negate\n-  #871 = Utf8               ()Ljava/math/BigInteger;\n-  #872 = Utf8               longValue\n-  #873 = Utf8               java/util/Arrays\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/zip/ZipConstants\n+    #2 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n+    #3 = Methodref          #4.#5         // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.count:(I)V\n+    #4 = Class              #6            // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n+    #5 = NameAndType        #7:#8         // count:(I)V\n+    #6 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n+    #7 = Utf8               count\n+    #8 = Utf8               (I)V\n+    #9 = Fieldref           #4.#10        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+   #10 = NameAndType        #11:#12       // current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+   #11 = Utf8               current\n+   #12 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+   #13 = Class              #14           // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+   #14 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+   #15 = String             #16           // UTF8\n+   #16 = Utf8               UTF8\n+   #17 = Methodref          #4.#18        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n+   #18 = NameAndType        #19:#20       // \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n+   #19 = Utf8               <init>\n+   #20 = Utf8               (Ljava/io/InputStream;Ljava/lang/String;)V\n+   #21 = Methodref          #4.#22        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;Z)V\n+   #22 = NameAndType        #19:#23       // \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;Z)V\n+   #23 = Utf8               (Ljava/io/InputStream;Ljava/lang/String;Z)V\n+   #24 = Methodref          #4.#25        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;ZZ)V\n+   #25 = NameAndType        #19:#26       // \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;ZZ)V\n+   #26 = Utf8               (Ljava/io/InputStream;Ljava/lang/String;ZZ)V\n+   #27 = Methodref          #4.#28        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/lang/String;ZZZ)V\n+   #28 = NameAndType        #19:#29       // \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;ZZZ)V\n+   #29 = Utf8               (Ljava/io/InputStream;Ljava/lang/String;ZZZ)V\n+   #30 = Methodref          #31.#32       // org/apache/commons/compress/archivers/ArchiveInputStream.\"<init>\":()V\n+   #31 = Class              #33           // org/apache/commons/compress/archivers/ArchiveInputStream\n+   #32 = NameAndType        #19:#34       // \"<init>\":()V\n+   #33 = Utf8               org/apache/commons/compress/archivers/ArchiveInputStream\n+   #34 = Utf8               ()V\n+   #35 = Class              #36           // java/util/zip/Inflater\n+   #36 = Utf8               java/util/zip/Inflater\n+   #37 = Methodref          #35.#38       // java/util/zip/Inflater.\"<init>\":(Z)V\n+   #38 = NameAndType        #19:#39       // \"<init>\":(Z)V\n+   #39 = Utf8               (Z)V\n+   #40 = Fieldref           #4.#41        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.inf:Ljava/util/zip/Inflater;\n+   #41 = NameAndType        #42:#43       // inf:Ljava/util/zip/Inflater;\n+   #42 = Utf8               inf\n+   #43 = Utf8               Ljava/util/zip/Inflater;\n+   #44 = Class              #45           // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+   #45 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream\n+   #46 = Methodref          #47.#48       // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+   #47 = Class              #49           // java/nio/ByteBuffer\n+   #48 = NameAndType        #50:#51       // allocate:(I)Ljava/nio/ByteBuffer;\n+   #49 = Utf8               java/nio/ByteBuffer\n+   #50 = Utf8               allocate\n+   #51 = Utf8               (I)Ljava/nio/ByteBuffer;\n+   #52 = Fieldref           #4.#53        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.buf:Ljava/nio/ByteBuffer;\n+   #53 = NameAndType        #54:#55       // buf:Ljava/nio/ByteBuffer;\n+   #54 = Utf8               buf\n+   #55 = Utf8               Ljava/nio/ByteBuffer;\n+   #56 = Fieldref           #4.#57        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.lfhBuf:[B\n+   #57 = NameAndType        #58:#59       // lfhBuf:[B\n+   #58 = Utf8               lfhBuf\n+   #59 = Utf8               [B\n+   #60 = Fieldref           #4.#61        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.skipBuf:[B\n+   #61 = NameAndType        #62:#59       // skipBuf:[B\n+   #62 = Utf8               skipBuf\n+   #63 = Fieldref           #4.#64        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.shortBuf:[B\n+   #64 = NameAndType        #65:#59       // shortBuf:[B\n+   #65 = Utf8               shortBuf\n+   #66 = Fieldref           #4.#67        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.wordBuf:[B\n+   #67 = NameAndType        #68:#59       // wordBuf:[B\n+   #68 = Utf8               wordBuf\n+   #69 = Fieldref           #4.#70        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.twoDwordBuf:[B\n+   #70 = NameAndType        #71:#59       // twoDwordBuf:[B\n+   #71 = Utf8               twoDwordBuf\n+   #72 = Fieldref           #4.#73        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.encoding:Ljava/lang/String;\n+   #73 = NameAndType        #74:#75       // encoding:Ljava/lang/String;\n+   #74 = Utf8               encoding\n+   #75 = Utf8               Ljava/lang/String;\n+   #76 = Methodref          #13.#77       // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #77 = NameAndType        #78:#79       // getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #78 = Utf8               getZipEncoding\n+   #79 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #80 = Fieldref           #4.#81        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #81 = NameAndType        #82:#83       // zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #82 = Utf8               zipEncoding\n+   #83 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+   #84 = Fieldref           #4.#85        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.useUnicodeExtraFields:Z\n+   #85 = NameAndType        #86:#87       // useUnicodeExtraFields:Z\n+   #86 = Utf8               useUnicodeExtraFields\n+   #87 = Utf8               Z\n+   #88 = Class              #89           // java/io/PushbackInputStream\n+   #89 = Utf8               java/io/PushbackInputStream\n+   #90 = Methodref          #47.#91       // java/nio/ByteBuffer.capacity:()I\n+   #91 = NameAndType        #92:#93       // capacity:()I\n+   #92 = Utf8               capacity\n+   #93 = Utf8               ()I\n+   #94 = Methodref          #88.#95       // java/io/PushbackInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+   #95 = NameAndType        #19:#96       // \"<init>\":(Ljava/io/InputStream;I)V\n+   #96 = Utf8               (Ljava/io/InputStream;I)V\n+   #97 = Fieldref           #4.#98        // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.inputStream:Ljava/io/InputStream;\n+   #98 = NameAndType        #99:#100      // inputStream:Ljava/io/InputStream;\n+   #99 = Utf8               inputStream\n+  #100 = Utf8               Ljava/io/InputStream;\n+  #101 = Fieldref           #4.#102       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.allowStoredEntriesWithDataDescriptor:Z\n+  #102 = NameAndType        #103:#87      // allowStoredEntriesWithDataDescriptor:Z\n+  #103 = Utf8               allowStoredEntriesWithDataDescriptor\n+  #104 = Fieldref           #4.#105       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.skipSplitSig:Z\n+  #105 = NameAndType        #106:#87      // skipSplitSig:Z\n+  #106 = Utf8               skipSplitSig\n+  #107 = Methodref          #47.#108      // java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;\n+  #108 = NameAndType        #109:#110     // limit:(I)Ljava/nio/Buffer;\n+  #109 = Utf8               limit\n+  #110 = Utf8               (I)Ljava/nio/Buffer;\n+  #111 = Fieldref           #4.#112       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.uncompressedCount:J\n+  #112 = NameAndType        #113:#114     // uncompressedCount:J\n+  #113 = Utf8               uncompressedCount\n+  #114 = Utf8               J\n+  #115 = Fieldref           #4.#116       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.closed:Z\n+  #116 = NameAndType        #117:#87      // closed:Z\n+  #117 = Utf8               closed\n+  #118 = Fieldref           #4.#119       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.hitCentralDirectory:Z\n+  #119 = NameAndType        #120:#87      // hitCentralDirectory:Z\n+  #120 = Utf8               hitCentralDirectory\n+  #121 = Methodref          #4.#122       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.closeEntry:()V\n+  #122 = NameAndType        #123:#34      // closeEntry:()V\n+  #123 = Utf8               closeEntry\n+  #124 = Methodref          #4.#125       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.getBytesRead:()J\n+  #125 = NameAndType        #126:#127     // getBytesRead:()J\n+  #126 = Utf8               getBytesRead\n+  #127 = Utf8               ()J\n+  #128 = Methodref          #4.#129       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readFirstLocalFileHeader:()V\n+  #129 = NameAndType        #130:#34      // readFirstLocalFileHeader:()V\n+  #130 = Utf8               readFirstLocalFileHeader\n+  #131 = Methodref          #4.#132       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readFully:([B)V\n+  #132 = NameAndType        #133:#134     // readFully:([B)V\n+  #133 = Utf8               readFully\n+  #134 = Utf8               ([B)V\n+  #135 = Class              #136          // java/io/EOFException\n+  #136 = Utf8               java/io/EOFException\n+  #137 = Class              #138          // org/apache/commons/compress/archivers/zip/ZipLong\n+  #138 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+  #139 = Methodref          #137.#140     // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n+  #140 = NameAndType        #19:#134      // \"<init>\":([B)V\n+  #141 = Fieldref           #137.#142     // org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #142 = NameAndType        #143:#144     // LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #143 = Utf8               LFH_SIG\n+  #144 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #145 = Methodref          #137.#146     // org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+  #146 = NameAndType        #147:#148     // equals:(Ljava/lang/Object;)Z\n+  #147 = Utf8               equals\n+  #148 = Utf8               (Ljava/lang/Object;)Z\n+  #149 = Fieldref           #137.#150     // org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #150 = NameAndType        #151:#144     // CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #151 = Utf8               CFH_SIG\n+  #152 = Fieldref           #137.#153     // org/apache/commons/compress/archivers/zip/ZipLong.AED_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #153 = NameAndType        #154:#144     // AED_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #154 = Utf8               AED_SIG\n+  #155 = Methodref          #4.#156       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.isApkSigningBlock:([B)Z\n+  #156 = NameAndType        #157:#158     // isApkSigningBlock:([B)Z\n+  #157 = Utf8               isApkSigningBlock\n+  #158 = Utf8               ([B)Z\n+  #159 = Methodref          #4.#160       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.skipRemainderOfArchive:()V\n+  #160 = NameAndType        #161:#34      // skipRemainderOfArchive:()V\n+  #161 = Utf8               skipRemainderOfArchive\n+  #162 = Class              #163          // java/util/zip/ZipException\n+  #163 = Utf8               java/util/zip/ZipException\n+  #164 = String             #165          // Unexpected record signature: 0x%x\n+  #165 = Utf8               Unexpected record signature: 0x%x\n+  #166 = Class              #167          // java/lang/Object\n+  #167 = Utf8               java/lang/Object\n+  #168 = Methodref          #137.#169     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+  #169 = NameAndType        #170:#127     // getValue:()J\n+  #170 = Utf8               getValue\n+  #171 = Methodref          #172.#173     // java/lang/Long.valueOf:(J)Ljava/lang/Long;\n+  #172 = Class              #174          // java/lang/Long\n+  #173 = NameAndType        #175:#176     // valueOf:(J)Ljava/lang/Long;\n+  #174 = Utf8               java/lang/Long\n+  #175 = Utf8               valueOf\n+  #176 = Utf8               (J)Ljava/lang/Long;\n+  #177 = Methodref          #178.#179     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #178 = Class              #180          // java/lang/String\n+  #179 = NameAndType        #181:#182     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #180 = Utf8               java/lang/String\n+  #181 = Utf8               format\n+  #182 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #183 = Methodref          #162.#184     // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+  #184 = NameAndType        #19:#185      // \"<init>\":(Ljava/lang/String;)V\n+  #185 = Utf8               (Ljava/lang/String;)V\n+  #186 = Class              #187          // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry\n+  #187 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry\n+  #188 = Methodref          #186.#189     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1;)V\n+  #189 = NameAndType        #19:#190      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1;)V\n+  #190 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1;)V\n+  #191 = Methodref          #192.#193     // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+  #192 = Class              #194          // org/apache/commons/compress/archivers/zip/ZipShort\n+  #193 = NameAndType        #170:#195     // getValue:([BI)I\n+  #194 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+  #195 = Utf8               ([BI)I\n+  #196 = Methodref          #186.#197     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #197 = NameAndType        #198:#199     // access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #198 = Utf8               access$100\n+  #199 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #200 = Class              #201          // org/apache/commons/compress/archivers/zip/ZipFile\n+  #201 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile\n+  #202 = Methodref          #203.#204     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setPlatform:(I)V\n+  #203 = Class              #205          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  #204 = NameAndType        #206:#8       // setPlatform:(I)V\n+  #205 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  #206 = Utf8               setPlatform\n+  #207 = Methodref          #208.#209     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #208 = Class              #210          // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+  #209 = NameAndType        #211:#212     // parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #210 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+  #211 = Utf8               parse\n+  #212 = Utf8               ([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #213 = Methodref          #208.#214     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesUTF8ForNames:()Z\n+  #214 = NameAndType        #215:#216     // usesUTF8ForNames:()Z\n+  #215 = Utf8               usesUTF8ForNames\n+  #216 = Utf8               ()Z\n+  #217 = Fieldref           #13.#218      // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #218 = NameAndType        #219:#83      // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #219 = Utf8               UTF8_ZIP_ENCODING\n+  #220 = Methodref          #208.#221     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesDataDescriptor:()Z\n+  #221 = NameAndType        #222:#216     // usesDataDescriptor:()Z\n+  #222 = Utf8               usesDataDescriptor\n+  #223 = Methodref          #186.#224     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$202:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n+  #224 = NameAndType        #225:#226     // access$202:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n+  #225 = Utf8               access$202\n+  #226 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n+  #227 = Methodref          #203.#228     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+  #228 = NameAndType        #229:#230     // setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+  #229 = Utf8               setGeneralPurposeBit\n+  #230 = Utf8               (Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+  #231 = Methodref          #203.#232     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setMethod:(I)V\n+  #232 = NameAndType        #233:#8       // setMethod:(I)V\n+  #233 = Utf8               setMethod\n+  #234 = Methodref          #137.#235     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+  #235 = NameAndType        #170:#236     // getValue:([BI)J\n+  #236 = Utf8               ([BI)J\n+  #237 = Methodref          #238.#239     // org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n+  #238 = Class              #240          // org/apache/commons/compress/archivers/zip/ZipUtil\n+  #239 = NameAndType        #241:#242     // dosToJavaTime:(J)J\n+  #240 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n+  #241 = Utf8               dosToJavaTime\n+  #242 = Utf8               (J)J\n+  #243 = Methodref          #203.#244     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setTime:(J)V\n+  #244 = NameAndType        #245:#246     // setTime:(J)V\n+  #245 = Utf8               setTime\n+  #246 = Utf8               (J)V\n+  #247 = Methodref          #186.#248     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n+  #248 = NameAndType        #249:#250     // access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n+  #249 = Utf8               access$200\n+  #250 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n+  #251 = Methodref          #203.#252     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCrc:(J)V\n+  #252 = NameAndType        #253:#246     // setCrc:(J)V\n+  #253 = Utf8               setCrc\n+  #254 = Methodref          #137.#255     // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n+  #255 = NameAndType        #19:#256      // \"<init>\":([BI)V\n+  #256 = Utf8               ([BI)V\n+  #257 = Methodref          #4.#258       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readRange:(I)[B\n+  #258 = NameAndType        #259:#260     // readRange:(I)[B\n+  #259 = Utf8               readRange\n+  #260 = Utf8               (I)[B\n+  #261 = InterfaceMethodref #262.#263     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+  #262 = Class              #264          // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #263 = NameAndType        #265:#266     // decode:([B)Ljava/lang/String;\n+  #264 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #265 = Utf8               decode\n+  #266 = Utf8               ([B)Ljava/lang/String;\n+  #267 = Methodref          #203.#268     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setName:(Ljava/lang/String;[B)V\n+  #268 = NameAndType        #269:#270     // setName:(Ljava/lang/String;[B)V\n+  #269 = Utf8               setName\n+  #270 = Utf8               (Ljava/lang/String;[B)V\n+  #271 = Fieldref           #272.#273     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+  #272 = Class              #274          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n+  #273 = NameAndType        #275:#276     // NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+  #274 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n+  #275 = Utf8               NAME_WITH_EFS_FLAG\n+  #276 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+  #277 = Methodref          #203.#278     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+  #278 = NameAndType        #279:#280     // setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+  #279 = Utf8               setNameSource\n+  #280 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+  #281 = Methodref          #203.#282     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setExtra:([B)V\n+  #282 = NameAndType        #283:#134     // setExtra:([B)V\n+  #283 = Utf8               setExtra\n+  #284 = Class              #285          // java/lang/RuntimeException\n+  #285 = Utf8               java/lang/RuntimeException\n+  #286 = Class              #287          // java/lang/StringBuilder\n+  #287 = Utf8               java/lang/StringBuilder\n+  #288 = Methodref          #286.#32      // java/lang/StringBuilder.\"<init>\":()V\n+  #289 = String             #290          // Invalid extra data in entry\n+  #290 = Utf8               Invalid extra data in entry\n+  #291 = Methodref          #286.#292     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #292 = NameAndType        #293:#294     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #293 = Utf8               append\n+  #294 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #295 = Methodref          #203.#296     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n+  #296 = NameAndType        #297:#298     // getName:()Ljava/lang/String;\n+  #297 = Utf8               getName\n+  #298 = Utf8               ()Ljava/lang/String;\n+  #299 = Methodref          #286.#300     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #300 = NameAndType        #301:#298     // toString:()Ljava/lang/String;\n+  #301 = Utf8               toString\n+  #302 = Methodref          #162.#303     // java/util/zip/ZipException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n+  #303 = NameAndType        #304:#305     // initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n+  #304 = Utf8               initCause\n+  #305 = Utf8               (Ljava/lang/Throwable;)Ljava/lang/Throwable;\n+  #306 = Methodref          #238.#307     // org/apache/commons/compress/archivers/zip/ZipUtil.setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+  #307 = NameAndType        #308:#309     // setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+  #308 = Utf8               setNameAndCommentFromExtraFields\n+  #309 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+  #310 = Methodref          #4.#311       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.processZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipLong;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+  #311 = NameAndType        #312:#313     // processZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipLong;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+  #312 = Utf8               processZip64Extra\n+  #313 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipLong;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+  #314 = Methodref          #203.#315     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setLocalHeaderOffset:(J)V\n+  #315 = NameAndType        #316:#246     // setLocalHeaderOffset:(J)V\n+  #316 = Utf8               setLocalHeaderOffset\n+  #317 = Methodref          #203.#318     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDataOffset:(J)V\n+  #318 = NameAndType        #319:#246     // setDataOffset:(J)V\n+  #319 = Utf8               setDataOffset\n+  #320 = Methodref          #203.#321     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setStreamContiguous:(Z)V\n+  #321 = NameAndType        #322:#39      // setStreamContiguous:(Z)V\n+  #322 = Utf8               setStreamContiguous\n+  #323 = Methodref          #203.#324     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+  #324 = NameAndType        #325:#93      // getMethod:()I\n+  #325 = Utf8               getMethod\n+  #326 = Methodref          #327.#328     // org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #327 = Class              #329          // org/apache/commons/compress/archivers/zip/ZipMethod\n+  #328 = NameAndType        #330:#331     // getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #329 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n+  #330 = Utf8               getMethodByCode\n+  #331 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #332 = Methodref          #203.#333     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+  #333 = NameAndType        #334:#127     // getCompressedSize:()J\n+  #334 = Utf8               getCompressedSize\n+  #335 = Class              #336          // org/apache/commons/compress/archivers/ArchiveEntry\n+  #336 = Utf8               org/apache/commons/compress/archivers/ArchiveEntry\n+  #337 = Long               -1l\n+  #339 = Methodref          #238.#340     // org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #340 = NameAndType        #341:#342     // canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #341 = Utf8               canHandleEntryData\n+  #342 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #343 = Fieldref           #327.#344     // org/apache/commons/compress/archivers/zip/ZipMethod.STORED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #344 = NameAndType        #345:#346     // STORED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #345 = Utf8               STORED\n+  #346 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #347 = Fieldref           #327.#348     // org/apache/commons/compress/archivers/zip/ZipMethod.DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #348 = NameAndType        #349:#346     // DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #349 = Utf8               DEFLATED\n+  #350 = Class              #351          // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundedInputStream\n+  #351 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundedInputStream\n+  #352 = Methodref          #350.#353     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundedInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;Ljava/io/InputStream;J)V\n+  #353 = NameAndType        #19:#354      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;Ljava/io/InputStream;J)V\n+  #354 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;Ljava/io/InputStream;J)V\n+  #355 = Fieldref           #356.#357     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n+  #356 = Class              #358          // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1\n+  #357 = NameAndType        #359:#360     // $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n+  #358 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1\n+  #359 = Utf8               $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod\n+  #360 = Utf8               [I\n+  #361 = Methodref          #327.#362     // org/apache/commons/compress/archivers/zip/ZipMethod.ordinal:()I\n+  #362 = NameAndType        #363:#93      // ordinal:()I\n+  #363 = Utf8               ordinal\n+  #364 = Class              #365          // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+  #365 = Utf8               org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+  #366 = Methodref          #364.#367     // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+  #367 = NameAndType        #19:#368      // \"<init>\":(Ljava/io/InputStream;)V\n+  #368 = Utf8               (Ljava/io/InputStream;)V\n+  #369 = Methodref          #186.#370     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n+  #370 = NameAndType        #371:#372     // access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n+  #371 = Utf8               access$302\n+  #372 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n+  #373 = Class              #374          // org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+  #374 = Utf8               org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+  #375 = Methodref          #203.#376     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #376 = NameAndType        #377:#378     // getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #377 = Utf8               getGeneralPurposeBit\n+  #378 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #379 = Methodref          #208.#380     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getSlidingDictionarySize:()I\n+  #380 = NameAndType        #381:#93      // getSlidingDictionarySize:()I\n+  #381 = Utf8               getSlidingDictionarySize\n+  #382 = Methodref          #208.#383     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getNumberOfShannonFanoTrees:()I\n+  #383 = NameAndType        #384:#93      // getNumberOfShannonFanoTrees:()I\n+  #384 = Utf8               getNumberOfShannonFanoTrees\n+  #385 = Methodref          #373.#386     // org/apache/commons/compress/archivers/zip/ExplodingInputStream.\"<init>\":(IILjava/io/InputStream;)V\n+  #386 = NameAndType        #19:#387      // \"<init>\":(IILjava/io/InputStream;)V\n+  #387 = Utf8               (IILjava/io/InputStream;)V\n+  #388 = Class              #389          // java/lang/IllegalArgumentException\n+  #389 = Utf8               java/lang/IllegalArgumentException\n+  #390 = Class              #391          // java/io/IOException\n+  #391 = Utf8               java/io/IOException\n+  #392 = String             #393          // bad IMPLODE data\n+  #393 = Utf8               bad IMPLODE data\n+  #394 = Methodref          #390.#395     // java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #395 = NameAndType        #19:#396      // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #396 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #397 = Class              #398          // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n+  #398 = Utf8               org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n+  #399 = Methodref          #397.#367     // org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+  #400 = Class              #401          // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+  #401 = Utf8               org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+  #402 = Methodref          #400.#367     // org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+  #403 = Fieldref           #327.#404     // org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #404 = NameAndType        #405:#346     // ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #405 = Utf8               ENHANCED_DEFLATED\n+  #406 = Fieldref           #4.#407       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.entriesRead:I\n+  #407 = NameAndType        #408:#409     // entriesRead:I\n+  #408 = Utf8               entriesRead\n+  #409 = Utf8               I\n+  #410 = Fieldref           #137.#411     // org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #411 = NameAndType        #412:#144     // DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #412 = Utf8               DD_SIG\n+  #413 = Class              #414          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+  #414 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+  #415 = Fieldref           #416.#417     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.SPLITTING:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #416 = Class              #418          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n+  #417 = NameAndType        #419:#420     // SPLITTING:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #418 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n+  #419 = Utf8               SPLITTING\n+  #420 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #421 = Methodref          #413.#422     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;)V\n+  #422 = NameAndType        #19:#423      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;)V\n+  #423 = Utf8               (Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;)V\n+  #424 = Fieldref           #137.#425     // org/apache/commons/compress/archivers/zip/ZipLong.SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #425 = NameAndType        #426:#144     // SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #426 = Utf8               SINGLE_SEGMENT_SPLIT_MARKER\n+  #427 = Methodref          #428.#429     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #428 = Class              #430          // java/lang/System\n+  #429 = NameAndType        #431:#432     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #430 = Utf8               java/lang/System\n+  #431 = Utf8               arraycopy\n+  #432 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #433 = Fieldref           #434.#435     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #434 = Class              #436          // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+  #435 = NameAndType        #437:#438     // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #436 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+  #437 = Utf8               HEADER_ID\n+  #438 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #439 = Methodref          #203.#440     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #440 = NameAndType        #441:#442     // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #441 = Utf8               getExtraField\n+  #442 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #443 = String             #444          // archive contains unparseable zip64 extra field\n+  #444 = Utf8               archive contains unparseable zip64 extra field\n+  #445 = Methodref          #186.#446     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$402:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n+  #446 = NameAndType        #447:#226     // access$402:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n+  #447 = Utf8               access$402\n+  #448 = Fieldref           #137.#449     // org/apache/commons/compress/archivers/zip/ZipLong.ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #449 = NameAndType        #450:#144     // ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #450 = Utf8               ZIP64_MAGIC\n+  #451 = Methodref          #434.#452     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #452 = NameAndType        #334:#453     // getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #453 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #454 = Methodref          #434.#455     // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #455 = NameAndType        #456:#453     // getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #456 = Utf8               getSize\n+  #457 = String             #458          // archive contains corrupted zip64 extra field\n+  #458 = Utf8               archive contains corrupted zip64 extra field\n+  #459 = Methodref          #460.#461     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n+  #460 = Class              #462          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+  #461 = NameAndType        #463:#127     // getLongValue:()J\n+  #462 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+  #463 = Utf8               getLongValue\n+  #464 = String             #465          // broken archive, entry with negative compressed size\n+  #465 = Utf8               broken archive, entry with negative compressed size\n+  #466 = Methodref          #203.#467     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n+  #467 = NameAndType        #468:#246     // setCompressedSize:(J)V\n+  #468 = Utf8               setCompressedSize\n+  #469 = String             #470          // broken archive, entry with negative size\n+  #470 = Utf8               broken archive, entry with negative size\n+  #471 = Methodref          #203.#472     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n+  #472 = NameAndType        #473:#246     // setSize:(J)V\n+  #473 = Utf8               setSize\n+  #474 = Methodref          #4.#475       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #475 = NameAndType        #476:#477     // getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #476 = Utf8               getNextZipEntry\n+  #477 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+  #478 = Methodref          #4.#479       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.supportsDataDescriptorFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #479 = NameAndType        #480:#342     // supportsDataDescriptorFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #480 = Utf8               supportsDataDescriptorFor\n+  #481 = Methodref          #4.#482       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.supportsCompressedSizeFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #482 = NameAndType        #483:#342     // supportsCompressedSizeFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+  #483 = Utf8               supportsCompressedSizeFor\n+  #484 = String             #485          // The stream is closed\n+  #485 = Utf8               The stream is closed\n+  #486 = Methodref          #390.#184     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+  #487 = Class              #488          // java/lang/ArrayIndexOutOfBoundsException\n+  #488 = Utf8               java/lang/ArrayIndexOutOfBoundsException\n+  #489 = Methodref          #487.#32      // java/lang/ArrayIndexOutOfBoundsException.\"<init>\":()V\n+  #490 = Methodref          #238.#491     // org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #491 = NameAndType        #492:#493     // checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #492 = Utf8               checkRequestedFeatures\n+  #493 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #494 = Fieldref           #416.#495     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.DATA_DESCRIPTOR:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #495 = NameAndType        #496:#420     // DATA_DESCRIPTOR:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #496 = Utf8               DATA_DESCRIPTOR\n+  #497 = Methodref          #413.#498     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #498 = NameAndType        #19:#499      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #499 = Utf8               (Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #500 = Fieldref           #416.#501     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.UNKNOWN_COMPRESSED_SIZE:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #501 = NameAndType        #502:#420     // UNKNOWN_COMPRESSED_SIZE:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #502 = Utf8               UNKNOWN_COMPRESSED_SIZE\n+  #503 = Methodref          #4.#504       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readStored:([BII)I\n+  #504 = NameAndType        #505:#506     // readStored:([BII)I\n+  #505 = Utf8               readStored\n+  #506 = Utf8               ([BII)I\n+  #507 = Methodref          #4.#508       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readDeflated:([BII)I\n+  #508 = NameAndType        #509:#506     // readDeflated:([BII)I\n+  #509 = Utf8               readDeflated\n+  #510 = Fieldref           #327.#511     // org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #511 = NameAndType        #512:#346     // UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #512 = Utf8               UNSHRINKING\n+  #513 = Methodref          #327.#514     // org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+  #514 = NameAndType        #515:#93      // getCode:()I\n+  #515 = Utf8               getCode\n+  #516 = Fieldref           #327.#517     // org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #517 = NameAndType        #518:#346     // IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #518 = Utf8               IMPLODING\n+  #519 = Fieldref           #327.#520     // org/apache/commons/compress/archivers/zip/ZipMethod.BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #520 = NameAndType        #521:#346     // BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #521 = Utf8               BZIP2\n+  #522 = Methodref          #186.#523     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n+  #523 = NameAndType        #524:#525     // access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n+  #524 = Utf8               access$300\n+  #525 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n+  #526 = Methodref          #527.#528     // java/io/InputStream.read:([BII)I\n+  #527 = Class              #529          // java/io/InputStream\n+  #528 = NameAndType        #530:#506     // read:([BII)I\n+  #529 = Utf8               java/io/InputStream\n+  #530 = Utf8               read\n+  #531 = Methodref          #413.#532     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #532 = NameAndType        #19:#533      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #533 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #534 = Methodref          #186.#535     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$500:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/util/zip/CRC32;\n+  #535 = NameAndType        #536:#537     // access$500:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/util/zip/CRC32;\n+  #536 = Utf8               access$500\n+  #537 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/util/zip/CRC32;\n+  #538 = Methodref          #539.#540     // java/util/zip/CRC32.update:([BII)V\n+  #539 = Class              #541          // java/util/zip/CRC32\n+  #540 = NameAndType        #542:#543     // update:([BII)V\n+  #541 = Utf8               java/util/zip/CRC32\n+  #542 = Utf8               update\n+  #543 = Utf8               ([BII)V\n+  #544 = Methodref          #186.#545     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+  #545 = NameAndType        #546:#547     // access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+  #546 = Utf8               access$600\n+  #547 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+  #548 = Methodref          #4.#549       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.getBytesInflated:()J\n+  #549 = NameAndType        #550:#127     // getBytesInflated:()J\n+  #550 = Utf8               getBytesInflated\n+  #551 = Methodref          #186.#552     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$700:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n+  #552 = NameAndType        #553:#525     // access$700:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n+  #553 = Utf8               access$700\n+  #554 = Class              #555          // org/apache/commons/compress/utils/InputStreamStatistics\n+  #555 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n+  #556 = InterfaceMethodref #554.#557     // org/apache/commons/compress/utils/InputStreamStatistics.getCompressedCount:()J\n+  #557 = NameAndType        #558:#127     // getCompressedCount:()J\n+  #558 = Utf8               getCompressedCount\n+  #559 = Fieldref           #4.#560       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.lastStoredEntry:Ljava/io/ByteArrayInputStream;\n+  #560 = NameAndType        #561:#562     // lastStoredEntry:Ljava/io/ByteArrayInputStream;\n+  #561 = Utf8               lastStoredEntry\n+  #562 = Utf8               Ljava/io/ByteArrayInputStream;\n+  #563 = Methodref          #4.#564       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readStoredEntry:()V\n+  #564 = NameAndType        #565:#34      // readStoredEntry:()V\n+  #565 = Utf8               readStoredEntry\n+  #566 = Methodref          #567.#528     // java/io/ByteArrayInputStream.read:([BII)I\n+  #567 = Class              #568          // java/io/ByteArrayInputStream\n+  #568 = Utf8               java/io/ByteArrayInputStream\n+  #569 = Methodref          #203.#570     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n+  #570 = NameAndType        #456:#127     // getSize:()J\n+  #571 = Methodref          #47.#572      // java/nio/ByteBuffer.position:()I\n+  #572 = NameAndType        #573:#93      // position:()I\n+  #573 = Utf8               position\n+  #574 = Methodref          #47.#575      // java/nio/ByteBuffer.limit:()I\n+  #575 = NameAndType        #109:#93      // limit:()I\n+  #576 = Methodref          #47.#577      // java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;\n+  #577 = NameAndType        #573:#110     // position:(I)Ljava/nio/Buffer;\n+  #578 = Methodref          #47.#579      // java/nio/ByteBuffer.array:()[B\n+  #579 = NameAndType        #580:#581     // array:()[B\n+  #580 = Utf8               array\n+  #581 = Utf8               ()[B\n+  #582 = Methodref          #527.#583     // java/io/InputStream.read:([B)I\n+  #583 = NameAndType        #530:#584     // read:([B)I\n+  #584 = Utf8               ([B)I\n+  #585 = String             #586          // Truncated ZIP file\n+  #586 = Utf8               Truncated ZIP file\n+  #587 = Methodref          #186.#588     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$814:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n+  #588 = NameAndType        #589:#590     // access$814:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n+  #589 = Utf8               access$814\n+  #590 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n+  #591 = Methodref          #47.#592      // java/nio/ByteBuffer.remaining:()I\n+  #592 = NameAndType        #593:#93      // remaining:()I\n+  #593 = Utf8               remaining\n+  #594 = Methodref          #595.#596     // java/lang/Math.min:(II)I\n+  #595 = Class              #597          // java/lang/Math\n+  #596 = NameAndType        #598:#599     // min:(II)I\n+  #597 = Utf8               java/lang/Math\n+  #598 = Utf8               min\n+  #599 = Utf8               (II)I\n+  #600 = Methodref          #47.#601      // java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n+  #601 = NameAndType        #602:#603     // get:([BII)Ljava/nio/ByteBuffer;\n+  #602 = Utf8               get\n+  #603 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n+  #604 = Methodref          #186.#605     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$614:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n+  #605 = NameAndType        #606:#590     // access$614:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n+  #606 = Utf8               access$614\n+  #607 = Methodref          #4.#608       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readFromInflater:([BII)I\n+  #608 = NameAndType        #609:#506     // readFromInflater:([BII)I\n+  #609 = Utf8               readFromInflater\n+  #610 = Methodref          #35.#611      // java/util/zip/Inflater.finished:()Z\n+  #611 = NameAndType        #612:#216     // finished:()Z\n+  #612 = Utf8               finished\n+  #613 = Methodref          #35.#614      // java/util/zip/Inflater.needsDictionary:()Z\n+  #614 = NameAndType        #615:#216     // needsDictionary:()Z\n+  #615 = Utf8               needsDictionary\n+  #616 = String             #617          // This archive needs a preset dictionary which is not supported by Commons Compress.\n+  #617 = Utf8               This archive needs a preset dictionary which is not supported by Commons Compress.\n+  #618 = Methodref          #35.#619      // java/util/zip/Inflater.needsInput:()Z\n+  #619 = NameAndType        #620:#216     // needsInput:()Z\n+  #620 = Utf8               needsInput\n+  #621 = Methodref          #4.#622       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.fill:()I\n+  #622 = NameAndType        #623:#93      // fill:()I\n+  #623 = Utf8               fill\n+  #624 = Methodref          #35.#625      // java/util/zip/Inflater.inflate:([BII)I\n+  #625 = NameAndType        #626:#506     // inflate:([BII)I\n+  #626 = Utf8               inflate\n+  #627 = Class              #628          // java/util/zip/DataFormatException\n+  #628 = Utf8               java/util/zip/DataFormatException\n+  #629 = Methodref          #627.#630     // java/util/zip/DataFormatException.getMessage:()Ljava/lang/String;\n+  #630 = NameAndType        #631:#298     // getMessage:()Ljava/lang/String;\n+  #631 = Utf8               getMessage\n+  #632 = Methodref          #527.#633     // java/io/InputStream.close:()V\n+  #633 = NameAndType        #634:#34      // close:()V\n+  #634 = Utf8               close\n+  #635 = Methodref          #35.#636      // java/util/zip/Inflater.end:()V\n+  #636 = NameAndType        #637:#34      // end:()V\n+  #637 = Utf8               end\n+  #638 = Methodref          #4.#528       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.read:([BII)I\n+  #639 = Methodref          #388.#32      // java/lang/IllegalArgumentException.\"<init>\":()V\n+  #640 = Fieldref           #44.#641      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n+  #641 = NameAndType        #143:#59      // LFH_SIG:[B\n+  #642 = Methodref          #4.#643       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.checksig:([B[B)Z\n+  #643 = NameAndType        #644:#645     // checksig:([B[B)Z\n+  #644 = Utf8               checksig\n+  #645 = Utf8               ([B[B)Z\n+  #646 = Fieldref           #44.#647      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n+  #647 = NameAndType        #648:#59      // EOCD_SIG:[B\n+  #648 = Utf8               EOCD_SIG\n+  #649 = Fieldref           #44.#650      // org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n+  #650 = NameAndType        #412:#59      // DD_SIG:[B\n+  #651 = Methodref          #137.#652     // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n+  #652 = NameAndType        #653:#581     // getBytes:()[B\n+  #653 = Utf8               getBytes\n+  #654 = Methodref          #4.#655       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.currentEntryHasOutstandingBytes:()Z\n+  #655 = NameAndType        #656:#216     // currentEntryHasOutstandingBytes:()Z\n+  #656 = Utf8               currentEntryHasOutstandingBytes\n+  #657 = Methodref          #4.#658       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.drainCurrentEntryData:()V\n+  #658 = NameAndType        #659:#34      // drainCurrentEntryData:()V\n+  #659 = Utf8               drainCurrentEntryData\n+  #660 = Long               9223372036854775807l\n+  #662 = Methodref          #4.#663       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.skip:(J)J\n+  #663 = NameAndType        #664:#242     // skip:(J)J\n+  #664 = Utf8               skip\n+  #665 = Methodref          #186.#666     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+  #666 = NameAndType        #667:#547     // access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+  #667 = Utf8               access$800\n+  #668 = Methodref          #4.#669       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.pushback:([BII)V\n+  #669 = NameAndType        #670:#543     // pushback:([BII)V\n+  #670 = Utf8               pushback\n+  #671 = Methodref          #186.#672     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$822:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n+  #672 = NameAndType        #673:#590     // access$822:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n+  #673 = Utf8               access$822\n+  #674 = Methodref          #4.#675       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readDataDescriptor:()V\n+  #675 = NameAndType        #676:#34      // readDataDescriptor:()V\n+  #676 = Utf8               readDataDescriptor\n+  #677 = Methodref          #35.#678      // java/util/zip/Inflater.reset:()V\n+  #678 = NameAndType        #679:#34      // reset:()V\n+  #679 = Utf8               reset\n+  #680 = Methodref          #47.#681      // java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;\n+  #681 = NameAndType        #682:#683     // clear:()Ljava/nio/Buffer;\n+  #682 = Utf8               clear\n+  #683 = Utf8               ()Ljava/nio/Buffer;\n+  #684 = Methodref          #685.#686     // java/nio/Buffer.flip:()Ljava/nio/Buffer;\n+  #685 = Class              #687          // java/nio/Buffer\n+  #686 = NameAndType        #688:#683     // flip:()Ljava/nio/Buffer;\n+  #687 = Utf8               java/nio/Buffer\n+  #688 = Utf8               flip\n+  #689 = Methodref          #595.#690     // java/lang/Math.min:(JJ)J\n+  #690 = NameAndType        #598:#691     // min:(JJ)J\n+  #691 = Utf8               (JJ)J\n+  #692 = String             #693          // Truncated ZIP entry:\n+  #693 = Utf8               Truncated ZIP entry:\n+  #694 = Methodref          #695.#696     // org/apache/commons/compress/utils/ArchiveUtils.sanitize:(Ljava/lang/String;)Ljava/lang/String;\n+  #695 = Class              #697          // org/apache/commons/compress/utils/ArchiveUtils\n+  #696 = NameAndType        #698:#699     // sanitize:(Ljava/lang/String;)Ljava/lang/String;\n+  #697 = Utf8               org/apache/commons/compress/utils/ArchiveUtils\n+  #698 = Utf8               sanitize\n+  #699 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #700 = Methodref          #135.#184     // java/io/EOFException.\"<init>\":(Ljava/lang/String;)V\n+  #701 = Methodref          #4.#702       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.count:(J)V\n+  #702 = NameAndType        #7:#246       // count:(J)V\n+  #703 = Methodref          #35.#125      // java/util/zip/Inflater.getBytesRead:()J\n+  #704 = Long               4294967296l\n+  #706 = Methodref          #35.#707      // java/util/zip/Inflater.setInput:([BII)V\n+  #707 = NameAndType        #708:#543     // setInput:([BII)V\n+  #708 = Utf8               setInput\n+  #709 = Methodref          #4.#710       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readFully:([BI)V\n+  #710 = NameAndType        #133:#256     // readFully:([BI)V\n+  #711 = Methodref          #712.#713     // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[BII)I\n+  #712 = Class              #714          // org/apache/commons/compress/utils/IOUtils\n+  #713 = NameAndType        #133:#715     // readFully:(Ljava/io/InputStream;[BII)I\n+  #714 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #715 = Utf8               (Ljava/io/InputStream;[BII)I\n+  #716 = Methodref          #135.#32      // java/io/EOFException.\"<init>\":()V\n+  #717 = Methodref          #712.#718     // org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n+  #718 = NameAndType        #259:#719     // readRange:(Ljava/io/InputStream;I)[B\n+  #719 = Utf8               (Ljava/io/InputStream;I)[B\n+  #720 = Methodref          #137.#721     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+  #721 = NameAndType        #170:#722     // getValue:([B)J\n+  #722 = Utf8               ([B)J\n+  #723 = Methodref          #460.#724     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n+  #724 = NameAndType        #463:#722     // getLongValue:([B)J\n+  #725 = Methodref          #460.#726     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([BI)J\n+  #726 = NameAndType        #463:#236     // getLongValue:([BI)J\n+  #727 = Class              #728          // java/util/zip/ZipEntry\n+  #728 = Utf8               java/util/zip/ZipEntry\n+  #729 = Class              #730          // java/io/ByteArrayOutputStream\n+  #730 = Utf8               java/io/ByteArrayOutputStream\n+  #731 = Methodref          #729.#32      // java/io/ByteArrayOutputStream.\"<init>\":()V\n+  #732 = Methodref          #186.#733     // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$400:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n+  #733 = NameAndType        #734:#250     // access$400:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n+  #734 = Utf8               access$400\n+  #735 = Methodref          #4.#736       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.bufferContainsSignature:(Ljava/io/ByteArrayOutputStream;III)Z\n+  #736 = NameAndType        #737:#738     // bufferContainsSignature:(Ljava/io/ByteArrayOutputStream;III)Z\n+  #737 = Utf8               bufferContainsSignature\n+  #738 = Utf8               (Ljava/io/ByteArrayOutputStream;III)Z\n+  #739 = Methodref          #4.#740       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.cacheBytesRead:(Ljava/io/ByteArrayOutputStream;III)I\n+  #740 = NameAndType        #741:#742     // cacheBytesRead:(Ljava/io/ByteArrayOutputStream;III)I\n+  #741 = Utf8               cacheBytesRead\n+  #742 = Utf8               (Ljava/io/ByteArrayOutputStream;III)I\n+  #743 = String             #744          // compressed and uncompressed size don\\'t match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n+  #744 = Utf8               compressed and uncompressed size don\\'t match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n+  #745 = Methodref          #729.#746     // java/io/ByteArrayOutputStream.toByteArray:()[B\n+  #746 = NameAndType        #747:#581     // toByteArray:()[B\n+  #747 = Utf8               toByteArray\n+  #748 = String             #749          // actual and claimed size don\\'t match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n+  #749 = Utf8               actual and claimed size don\\'t match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n+  #750 = Methodref          #567.#140     // java/io/ByteArrayInputStream.\"<init>\":([B)V\n+  #751 = Fieldref           #4.#752       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.LFH:[B\n+  #752 = NameAndType        #753:#59      // LFH:[B\n+  #753 = Utf8               LFH\n+  #754 = Fieldref           #4.#755       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.CFH:[B\n+  #755 = NameAndType        #756:#59      // CFH:[B\n+  #756 = Utf8               CFH\n+  #757 = Fieldref           #4.#758       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.DD:[B\n+  #758 = NameAndType        #759:#59      // DD:[B\n+  #759 = Utf8               DD\n+  #760 = Methodref          #729.#761     // java/io/ByteArrayOutputStream.write:([BII)V\n+  #761 = NameAndType        #762:#543     // write:([BII)V\n+  #762 = Utf8               write\n+  #763 = Methodref          #88.#764      // java/io/PushbackInputStream.unread:([BII)V\n+  #764 = NameAndType        #765:#543     // unread:([BII)V\n+  #765 = Utf8               unread\n+  #766 = Methodref          #4.#767       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.pushedBackBytes:(J)V\n+  #767 = NameAndType        #768:#246     // pushedBackBytes:(J)V\n+  #768 = Utf8               pushedBackBytes\n+  #769 = Long               46l\n+  #771 = Long               30l\n+  #773 = Methodref          #4.#774       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.realSkip:(J)V\n+  #774 = NameAndType        #775:#246     // realSkip:(J)V\n+  #775 = Utf8               realSkip\n+  #776 = Methodref          #4.#777       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.findEocdRecord:()Z\n+  #777 = NameAndType        #778:#216     // findEocdRecord:()Z\n+  #778 = Utf8               findEocdRecord\n+  #779 = Long               16l\n+  #781 = Methodref          #192.#782     // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n+  #782 = NameAndType        #170:#584     // getValue:([B)I\n+  #783 = Methodref          #4.#784       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.readOneByte:()I\n+  #784 = NameAndType        #785:#93      // readOneByte:()I\n+  #785 = Utf8               readOneByte\n+  #786 = Methodref          #4.#787       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.isFirstByteOfEocdSig:(I)Z\n+  #787 = NameAndType        #788:#789     // isFirstByteOfEocdSig:(I)Z\n+  #788 = Utf8               isFirstByteOfEocdSig\n+  #789 = Utf8               (I)Z\n+  #790 = Methodref          #527.#791     // java/io/InputStream.read:()I\n+  #791 = NameAndType        #530:#93      // read:()I\n+  #792 = Methodref          #460.#793     // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getValue:([B)Ljava/math/BigInteger;\n+  #793 = NameAndType        #170:#794     // getValue:([B)Ljava/math/BigInteger;\n+  #794 = Utf8               ([B)Ljava/math/BigInteger;\n+  #795 = Fieldref           #4.#796       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.APK_SIGNING_BLOCK_MAGIC:[B\n+  #796 = NameAndType        #797:#59      // APK_SIGNING_BLOCK_MAGIC:[B\n+  #797 = Utf8               APK_SIGNING_BLOCK_MAGIC\n+  #798 = Methodref          #799.#800     // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+  #799 = Class              #801          // java/math/BigInteger\n+  #800 = NameAndType        #175:#802     // valueOf:(J)Ljava/math/BigInteger;\n+  #801 = Utf8               java/math/BigInteger\n+  #802 = Utf8               (J)Ljava/math/BigInteger;\n+  #803 = Methodref          #799.#804     // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #804 = NameAndType        #805:#806     // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #805 = Utf8               add\n+  #806 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+  #807 = Methodref          #799.#808     // java/math/BigInteger.signum:()I\n+  #808 = NameAndType        #809:#93      // signum:()I\n+  #809 = Utf8               signum\n+  #810 = Methodref          #799.#811     // java/math/BigInteger.intValue:()I\n+  #811 = NameAndType        #812:#93      // intValue:()I\n+  #812 = Utf8               intValue\n+  #813 = Methodref          #595.#814     // java/lang/Math.abs:(I)I\n+  #814 = NameAndType        #815:#816     // abs:(I)I\n+  #815 = Utf8               abs\n+  #816 = Utf8               (I)I\n+  #817 = Fieldref           #4.#818       // org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.LONG_MAX:Ljava/math/BigInteger;\n+  #818 = NameAndType        #819:#820     // LONG_MAX:Ljava/math/BigInteger;\n+  #819 = Utf8               LONG_MAX\n+  #820 = Utf8               Ljava/math/BigInteger;\n+  #821 = Methodref          #799.#822     // java/math/BigInteger.compareTo:(Ljava/math/BigInteger;)I\n+  #822 = NameAndType        #823:#824     // compareTo:(Ljava/math/BigInteger;)I\n+  #823 = Utf8               compareTo\n+  #824 = Utf8               (Ljava/math/BigInteger;)I\n+  #825 = Methodref          #799.#826     // java/math/BigInteger.negate:()Ljava/math/BigInteger;\n+  #826 = NameAndType        #827:#828     // negate:()Ljava/math/BigInteger;\n+  #827 = Utf8               negate\n+  #828 = Utf8               ()Ljava/math/BigInteger;\n+  #829 = Methodref          #799.#830     // java/math/BigInteger.longValue:()J\n+  #830 = NameAndType        #831:#127     // longValue:()J\n+  #831 = Utf8               longValue\n+  #832 = Methodref          #833.#834     // java/util/Arrays.equals:([B[B)Z\n+  #833 = Class              #835          // java/util/Arrays\n+  #834 = NameAndType        #147:#645     // equals:([B[B)Z\n+  #835 = Utf8               java/util/Arrays\n+  #836 = Utf8               LFH_LEN\n+  #837 = Utf8               ConstantValue\n+  #838 = Integer            30\n+  #839 = Utf8               CFH_LEN\n+  #840 = Integer            46\n+  #841 = Utf8               TWO_EXP_32\n+  #842 = Utf8               USE_ZIPFILE_INSTEAD_OF_STREAM_DISCLAIMER\n+  #843 = String             #844          //  while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n+  #844 = Utf8                while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n+  #845 = Utf8               Code\n+  #846 = Utf8               LineNumberTable\n+  #847 = Utf8               StackMapTable\n+  #848 = Class              #59           // \"[B\"\n+  #849 = Utf8               Exceptions\n+  #850 = Class              #851          // org/apache/commons/compress/archivers/zip/ZipExtraField\n+  #851 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n+  #852 = Utf8               getNextEntry\n+  #853 = Utf8               ()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n+  #854 = Utf8               canReadEntryData\n+  #855 = Utf8               (Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z\n+  #856 = Utf8               getUncompressedCount\n+  #857 = Class              #858          // java/lang/Throwable\n+  #858 = Utf8               java/lang/Throwable\n+  #859 = Utf8               matches\n+  #860 = Utf8               ([BI)Z\n+  #861 = Utf8               access$900\n+  #862 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;I)V\n+  #863 = Utf8               access$1000\n+  #864 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+  #865 = Utf8               access$1100\n+  #866 = Utf8               <clinit>\n+  #867 = Utf8               SourceFile\n+  #868 = Utf8               ZipArchiveInputStream.java\n+  #869 = Utf8               InnerClasses\n+  #870 = Utf8               CurrentEntry\n+  #871 = Utf8               NameSource\n+  #872 = Utf8               BoundedInputStream\n+  #873 = Utf8               Feature\n {\n   private final org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   final java.lang.String encoding;\n     descriptor: Ljava/lang/String;\n@@ -995,31 +995,31 @@\n   public org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(java.io.InputStream);\n     descriptor: (Ljava/io/InputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: ldc           #5                  // String UTF8\n-         4: invokespecial #6                  // Method \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n+         2: ldc           #15                 // String UTF8\n+         4: invokespecial #17                 // Method \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;)V\n          7: return\n       LineNumberTable:\n         line 189: 0\n         line 190: 7\n \n   public org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(java.io.InputStream, java.lang.String);\n     descriptor: (Ljava/io/InputStream;Ljava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: aload_2\n          3: iconst_1\n-         4: invokespecial #7                  // Method \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;Z)V\n+         4: invokespecial #21                 // Method \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;Z)V\n          7: return\n       LineNumberTable:\n         line 200: 0\n         line 201: 7\n \n   public org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(java.io.InputStream, java.lang.String, boolean);\n     descriptor: (Ljava/io/InputStream;Ljava/lang/String;Z)V\n@@ -1027,15 +1027,15 @@\n     Code:\n       stack=5, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n          2: aload_2\n          3: iload_3\n          4: iconst_0\n-         5: invokespecial #8                  // Method \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;ZZ)V\n+         5: invokespecial #24                 // Method \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;ZZ)V\n          8: return\n       LineNumberTable:\n         line 212: 0\n         line 213: 8\n \n   public org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(java.io.InputStream, java.lang.String, boolean, boolean);\n     descriptor: (Ljava/io/InputStream;Ljava/lang/String;ZZ)V\n@@ -1044,86 +1044,86 @@\n       stack=6, locals=5, args_size=5\n          0: aload_0\n          1: aload_1\n          2: aload_2\n          3: iload_3\n          4: iload         4\n          6: iconst_0\n-         7: invokespecial #9                  // Method \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;ZZZ)V\n+         7: invokespecial #27                 // Method \"<init>\":(Ljava/io/InputStream;Ljava/lang/String;ZZZ)V\n         10: return\n       LineNumberTable:\n         line 230: 0\n         line 231: 10\n \n   public org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(java.io.InputStream, java.lang.String, boolean, boolean, boolean);\n     descriptor: (Ljava/io/InputStream;Ljava/lang/String;ZZZ)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=6, args_size=6\n          0: aload_0\n-         1: invokespecial #10                 // Method org/apache/commons/compress/archivers/ArchiveInputStream.\"<init>\":()V\n+         1: invokespecial #30                 // Method org/apache/commons/compress/archivers/ArchiveInputStream.\"<init>\":()V\n          4: aload_0\n-         5: new           #11                 // class java/util/zip/Inflater\n+         5: new           #35                 // class java/util/zip/Inflater\n          8: dup\n          9: iconst_1\n-        10: invokespecial #12                 // Method java/util/zip/Inflater.\"<init>\":(Z)V\n-        13: putfield      #13                 // Field inf:Ljava/util/zip/Inflater;\n+        10: invokespecial #37                 // Method java/util/zip/Inflater.\"<init>\":(Z)V\n+        13: putfield      #40                 // Field inf:Ljava/util/zip/Inflater;\n         16: aload_0\n         17: sipush        512\n-        20: invokestatic  #15                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-        23: putfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n+        20: invokestatic  #46                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+        23: putfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n         26: aload_0\n         27: bipush        30\n         29: newarray       byte\n-        31: putfield      #18                 // Field lfhBuf:[B\n+        31: putfield      #56                 // Field lfhBuf:[B\n         34: aload_0\n         35: sipush        1024\n         38: newarray       byte\n-        40: putfield      #19                 // Field skipBuf:[B\n+        40: putfield      #60                 // Field skipBuf:[B\n         43: aload_0\n         44: iconst_2\n         45: newarray       byte\n-        47: putfield      #20                 // Field shortBuf:[B\n+        47: putfield      #63                 // Field shortBuf:[B\n         50: aload_0\n         51: iconst_4\n         52: newarray       byte\n-        54: putfield      #21                 // Field wordBuf:[B\n+        54: putfield      #66                 // Field wordBuf:[B\n         57: aload_0\n         58: bipush        16\n         60: newarray       byte\n-        62: putfield      #22                 // Field twoDwordBuf:[B\n+        62: putfield      #69                 // Field twoDwordBuf:[B\n         65: aload_0\n         66: aload_2\n-        67: putfield      #23                 // Field encoding:Ljava/lang/String;\n+        67: putfield      #72                 // Field encoding:Ljava/lang/String;\n         70: aload_0\n         71: aload_2\n-        72: invokestatic  #24                 // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-        75: putfield      #25                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        72: invokestatic  #76                 // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        75: putfield      #80                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n         78: aload_0\n         79: iload_3\n-        80: putfield      #26                 // Field useUnicodeExtraFields:Z\n+        80: putfield      #84                 // Field useUnicodeExtraFields:Z\n         83: aload_0\n-        84: new           #27                 // class java/io/PushbackInputStream\n+        84: new           #88                 // class java/io/PushbackInputStream\n         87: dup\n         88: aload_1\n         89: aload_0\n-        90: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        93: invokevirtual #28                 // Method java/nio/ByteBuffer.capacity:()I\n-        96: invokespecial #29                 // Method java/io/PushbackInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-        99: putfield      #30                 // Field inputStream:Ljava/io/InputStream;\n+        90: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        93: invokevirtual #90                 // Method java/nio/ByteBuffer.capacity:()I\n+        96: invokespecial #94                 // Method java/io/PushbackInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+        99: putfield      #97                 // Field inputStream:Ljava/io/InputStream;\n        102: aload_0\n        103: iload         4\n-       105: putfield      #31                 // Field allowStoredEntriesWithDataDescriptor:Z\n+       105: putfield      #101                // Field allowStoredEntriesWithDataDescriptor:Z\n        108: aload_0\n        109: iload         5\n-       111: putfield      #32                 // Field skipSplitSig:Z\n+       111: putfield      #104                // Field skipSplitSig:Z\n        114: aload_0\n-       115: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n+       115: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n        118: iconst_0\n-       119: invokevirtual #33                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;\n+       119: invokevirtual #107                // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;\n        122: pop\n        123: return\n       LineNumberTable:\n         line 251: 0\n         line 97: 4\n         line 100: 16\n         line 176: 26\n@@ -1143,419 +1143,419 @@\n   public org.apache.commons.compress.archivers.zip.ZipArchiveEntry getNextZipEntry() throws java.io.IOException;\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=8, locals=21, args_size=1\n          0: aload_0\n          1: lconst_0\n-         2: putfield      #34                 // Field uncompressedCount:J\n+         2: putfield      #111                // Field uncompressedCount:J\n          5: iconst_1\n          6: istore_1\n          7: aload_0\n-         8: getfield      #35                 // Field closed:Z\n+         8: getfield      #115                // Field closed:Z\n         11: ifne          21\n         14: aload_0\n-        15: getfield      #36                 // Field hitCentralDirectory:Z\n+        15: getfield      #118                // Field hitCentralDirectory:Z\n         18: ifeq          23\n         21: aconst_null\n         22: areturn\n         23: aload_0\n-        24: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        24: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n         27: ifnull        36\n         30: aload_0\n-        31: invokespecial #37                 // Method closeEntry:()V\n+        31: invokespecial #121                // Method closeEntry:()V\n         34: iconst_0\n         35: istore_1\n         36: aload_0\n-        37: invokevirtual #38                 // Method getBytesRead:()J\n+        37: invokevirtual #124                // Method getBytesRead:()J\n         40: lstore_2\n         41: iload_1\n         42: ifeq          52\n         45: aload_0\n-        46: invokespecial #39                 // Method readFirstLocalFileHeader:()V\n+        46: invokespecial #128                // Method readFirstLocalFileHeader:()V\n         49: goto          60\n         52: aload_0\n         53: aload_0\n-        54: getfield      #18                 // Field lfhBuf:[B\n-        57: invokespecial #40                 // Method readFully:([B)V\n+        54: getfield      #56                 // Field lfhBuf:[B\n+        57: invokespecial #131                // Method readFully:([B)V\n         60: goto          67\n         63: astore        4\n         65: aconst_null\n         66: areturn\n-        67: new           #42                 // class org/apache/commons/compress/archivers/zip/ZipLong\n+        67: new           #137                // class org/apache/commons/compress/archivers/zip/ZipLong\n         70: dup\n         71: aload_0\n-        72: getfield      #18                 // Field lfhBuf:[B\n-        75: invokespecial #43                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n+        72: getfield      #56                 // Field lfhBuf:[B\n+        75: invokespecial #139                // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n         78: astore        4\n         80: aload         4\n-        82: getstatic     #44                 // Field org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-        85: invokevirtual #45                 // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+        82: getstatic     #141                // Field org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        85: invokevirtual #145                // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n         88: ifne          163\n         91: aload         4\n-        93: getstatic     #46                 // Field org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-        96: invokevirtual #45                 // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+        93: getstatic     #149                // Field org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        96: invokevirtual #145                // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n         99: ifne          124\n        102: aload         4\n-       104: getstatic     #47                 // Field org/apache/commons/compress/archivers/zip/ZipLong.AED_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-       107: invokevirtual #45                 // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+       104: getstatic     #152                // Field org/apache/commons/compress/archivers/zip/ZipLong.AED_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+       107: invokevirtual #145                // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n        110: ifne          124\n        113: aload_0\n        114: aload_0\n-       115: getfield      #18                 // Field lfhBuf:[B\n-       118: invokespecial #48                 // Method isApkSigningBlock:([B)Z\n+       115: getfield      #56                 // Field lfhBuf:[B\n+       118: invokespecial #155                // Method isApkSigningBlock:([B)Z\n        121: ifeq          135\n        124: aload_0\n        125: iconst_1\n-       126: putfield      #36                 // Field hitCentralDirectory:Z\n+       126: putfield      #118                // Field hitCentralDirectory:Z\n        129: aload_0\n-       130: invokespecial #49                 // Method skipRemainderOfArchive:()V\n+       130: invokespecial #159                // Method skipRemainderOfArchive:()V\n        133: aconst_null\n        134: areturn\n-       135: new           #50                 // class java/util/zip/ZipException\n+       135: new           #162                // class java/util/zip/ZipException\n        138: dup\n-       139: ldc           #51                 // String Unexpected record signature: 0x%x\n+       139: ldc           #164                // String Unexpected record signature: 0x%x\n        141: iconst_1\n-       142: anewarray     #52                 // class java/lang/Object\n+       142: anewarray     #166                // class java/lang/Object\n        145: dup\n        146: iconst_0\n        147: aload         4\n-       149: invokevirtual #53                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n-       152: invokestatic  #54                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;\n+       149: invokevirtual #168                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+       152: invokestatic  #171                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;\n        155: aastore\n-       156: invokestatic  #55                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-       159: invokespecial #56                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       156: invokestatic  #177                // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+       159: invokespecial #183                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n        162: athrow\n        163: iconst_4\n        164: istore        5\n        166: aload_0\n-       167: new           #57                 // class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry\n+       167: new           #186                // class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry\n        170: dup\n        171: aconst_null\n-       172: invokespecial #58                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1;)V\n-       175: putfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       172: invokespecial #188                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1;)V\n+       175: putfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n        178: aload_0\n-       179: getfield      #18                 // Field lfhBuf:[B\n+       179: getfield      #56                 // Field lfhBuf:[B\n        182: iload         5\n-       184: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       184: invokestatic  #191                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        187: istore        6\n        189: iinc          5, 2\n        192: aload_0\n-       193: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       196: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       193: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       196: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n        199: iload         6\n        201: bipush        8\n        203: ishr\n        204: bipush        15\n        206: iand\n-       207: invokevirtual #62                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setPlatform:(I)V\n+       207: invokevirtual #202                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setPlatform:(I)V\n        210: aload_0\n-       211: getfield      #18                 // Field lfhBuf:[B\n+       211: getfield      #56                 // Field lfhBuf:[B\n        214: iload         5\n-       216: invokestatic  #63                 // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+       216: invokestatic  #207                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n        219: astore        7\n        221: aload         7\n-       223: invokevirtual #64                 // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesUTF8ForNames:()Z\n+       223: invokevirtual #213                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesUTF8ForNames:()Z\n        226: istore        8\n        228: iload         8\n        230: ifeq          239\n-       233: getstatic     #65                 // Field org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+       233: getstatic     #217                // Field org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n        236: goto          243\n        239: aload_0\n-       240: getfield      #25                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+       240: getfield      #80                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n        243: astore        9\n        245: aload_0\n-       246: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       246: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n        249: aload         7\n-       251: invokevirtual #66                 // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesDataDescriptor:()Z\n-       254: invokestatic  #67                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$202:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n+       251: invokevirtual #220                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesDataDescriptor:()Z\n+       254: invokestatic  #223                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$202:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n        257: pop\n        258: aload_0\n-       259: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       262: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       259: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       262: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n        265: aload         7\n-       267: invokevirtual #68                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n+       267: invokevirtual #227                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V\n        270: iinc          5, 2\n        273: aload_0\n-       274: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       277: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       274: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       277: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n        280: aload_0\n-       281: getfield      #18                 // Field lfhBuf:[B\n+       281: getfield      #56                 // Field lfhBuf:[B\n        284: iload         5\n-       286: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n-       289: invokevirtual #69                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setMethod:(I)V\n+       286: invokestatic  #191                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       289: invokevirtual #231                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setMethod:(I)V\n        292: iinc          5, 2\n        295: aload_0\n-       296: getfield      #18                 // Field lfhBuf:[B\n+       296: getfield      #56                 // Field lfhBuf:[B\n        299: iload         5\n-       301: invokestatic  #70                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       304: invokestatic  #71                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n+       301: invokestatic  #234                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       304: invokestatic  #237                // Method org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J\n        307: lstore        10\n        309: aload_0\n-       310: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       313: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       310: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       313: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n        316: lload         10\n-       318: invokevirtual #72                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setTime:(J)V\n+       318: invokevirtual #243                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setTime:(J)V\n        321: iinc          5, 4\n        324: aconst_null\n        325: astore        12\n        327: aconst_null\n        328: astore        13\n        330: aload_0\n-       331: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       334: invokestatic  #73                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n+       331: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       334: invokestatic  #247                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n        337: ifne          401\n        340: aload_0\n-       341: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       344: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       341: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       344: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n        347: aload_0\n-       348: getfield      #18                 // Field lfhBuf:[B\n+       348: getfield      #56                 // Field lfhBuf:[B\n        351: iload         5\n-       353: invokestatic  #70                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       356: invokevirtual #74                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCrc:(J)V\n+       353: invokestatic  #234                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       356: invokevirtual #251                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCrc:(J)V\n        359: iinc          5, 4\n-       362: new           #42                 // class org/apache/commons/compress/archivers/zip/ZipLong\n+       362: new           #137                // class org/apache/commons/compress/archivers/zip/ZipLong\n        365: dup\n        366: aload_0\n-       367: getfield      #18                 // Field lfhBuf:[B\n+       367: getfield      #56                 // Field lfhBuf:[B\n        370: iload         5\n-       372: invokespecial #75                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n+       372: invokespecial #254                // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n        375: astore        13\n        377: iinc          5, 4\n-       380: new           #42                 // class org/apache/commons/compress/archivers/zip/ZipLong\n+       380: new           #137                // class org/apache/commons/compress/archivers/zip/ZipLong\n        383: dup\n        384: aload_0\n-       385: getfield      #18                 // Field lfhBuf:[B\n+       385: getfield      #56                 // Field lfhBuf:[B\n        388: iload         5\n-       390: invokespecial #75                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n+       390: invokespecial #254                // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n        393: astore        12\n        395: iinc          5, 4\n        398: goto          404\n        401: iinc          5, 12\n        404: aload_0\n-       405: getfield      #18                 // Field lfhBuf:[B\n+       405: getfield      #56                 // Field lfhBuf:[B\n        408: iload         5\n-       410: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       410: invokestatic  #191                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        413: istore        14\n        415: iinc          5, 2\n        418: aload_0\n-       419: getfield      #18                 // Field lfhBuf:[B\n+       419: getfield      #56                 // Field lfhBuf:[B\n        422: iload         5\n-       424: invokestatic  #59                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+       424: invokestatic  #191                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n        427: istore        15\n        429: iinc          5, 2\n        432: aload_0\n        433: iload         14\n-       435: invokespecial #76                 // Method readRange:(I)[B\n+       435: invokespecial #257                // Method readRange:(I)[B\n        438: astore        16\n        440: aload_0\n-       441: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       444: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       441: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       444: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n        447: aload         9\n        449: aload         16\n-       451: invokeinterface #77,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+       451: invokeinterface #261,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n        456: aload         16\n-       458: invokevirtual #78                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setName:(Ljava/lang/String;[B)V\n+       458: invokevirtual #267                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setName:(Ljava/lang/String;[B)V\n        461: iload         8\n        463: ifeq          479\n        466: aload_0\n-       467: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       470: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       473: getstatic     #79                 // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-       476: invokevirtual #80                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+       467: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       470: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       473: getstatic     #271                // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+       476: invokevirtual #277                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n        479: aload_0\n        480: iload         15\n-       482: invokespecial #76                 // Method readRange:(I)[B\n+       482: invokespecial #257                // Method readRange:(I)[B\n        485: astore        17\n        487: aload_0\n-       488: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       491: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       488: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       491: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n        494: aload         17\n-       496: invokevirtual #81                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setExtra:([B)V\n-       499: goto          552\n+       496: invokevirtual #281                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setExtra:([B)V\n+       499: goto          553\n        502: astore        18\n-       504: new           #50                 // class java/util/zip/ZipException\n+       504: new           #162                // class java/util/zip/ZipException\n        507: dup\n-       508: new           #83                 // class java/lang/StringBuilder\n+       508: new           #286                // class java/lang/StringBuilder\n        511: dup\n-       512: invokespecial #84                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       515: ldc           #85                 // String Invalid extra data in entry\n-       517: invokevirtual #86                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       520: aload_0\n-       521: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       524: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       527: invokevirtual #87                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n-       530: invokevirtual #86                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       533: invokevirtual #88                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       536: invokespecial #56                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-       539: astore        19\n-       541: aload         19\n-       543: aload         18\n-       545: invokevirtual #89                 // Method java/util/zip/ZipException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n-       548: pop\n-       549: aload         19\n-       551: athrow\n-       552: iload         8\n-       554: ifne          577\n-       557: aload_0\n-       558: getfield      #26                 // Field useUnicodeExtraFields:Z\n-       561: ifeq          577\n-       564: aload_0\n-       565: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       568: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       571: aload         16\n-       573: aconst_null\n-       574: invokestatic  #90                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-       577: aload_0\n-       578: aload         12\n-       580: aload         13\n-       582: invokespecial #91                 // Method processZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipLong;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n-       585: aload_0\n-       586: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       589: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       592: lload_2\n-       593: invokevirtual #92                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setLocalHeaderOffset:(J)V\n-       596: aload_0\n-       597: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       600: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       603: aload_0\n-       604: invokevirtual #38                 // Method getBytesRead:()J\n-       607: invokevirtual #93                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDataOffset:(J)V\n-       610: aload_0\n-       611: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       614: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       617: iconst_1\n-       618: invokevirtual #94                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setStreamContiguous:(Z)V\n-       621: aload_0\n-       622: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       625: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       628: invokevirtual #95                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-       631: invokestatic  #96                 // Method org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-       634: astore        18\n-       636: aload_0\n-       637: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       640: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       643: invokevirtual #97                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n-       646: ldc2_w        #99                 // long -1l\n-       649: lcmp\n-       650: ifeq          867\n-       653: aload_0\n-       654: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       657: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       660: invokestatic  #101                // Method org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-       663: ifeq          894\n-       666: aload         18\n-       668: getstatic     #102                // Field org/apache/commons/compress/archivers/zip/ZipMethod.STORED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-       671: if_acmpeq     894\n-       674: aload         18\n-       676: getstatic     #103                // Field org/apache/commons/compress/archivers/zip/ZipMethod.DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-       679: if_acmpeq     894\n-       682: new           #104                // class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundedInputStream\n-       685: dup\n-       686: aload_0\n+       512: invokespecial #288                // Method java/lang/StringBuilder.\"<init>\":()V\n+       515: ldc_w         #289                // String Invalid extra data in entry\n+       518: invokevirtual #291                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       521: aload_0\n+       522: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       525: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       528: invokevirtual #295                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n+       531: invokevirtual #291                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       534: invokevirtual #299                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       537: invokespecial #183                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       540: astore        19\n+       542: aload         19\n+       544: aload         18\n+       546: invokevirtual #302                // Method java/util/zip/ZipException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n+       549: pop\n+       550: aload         19\n+       552: athrow\n+       553: iload         8\n+       555: ifne          578\n+       558: aload_0\n+       559: getfield      #84                 // Field useUnicodeExtraFields:Z\n+       562: ifeq          578\n+       565: aload_0\n+       566: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       569: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       572: aload         16\n+       574: aconst_null\n+       575: invokestatic  #306                // Method org/apache/commons/compress/archivers/zip/ZipUtil.setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+       578: aload_0\n+       579: aload         12\n+       581: aload         13\n+       583: invokespecial #310                // Method processZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipLong;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+       586: aload_0\n+       587: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       590: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       593: lload_2\n+       594: invokevirtual #314                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setLocalHeaderOffset:(J)V\n+       597: aload_0\n+       598: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       601: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       604: aload_0\n+       605: invokevirtual #124                // Method getBytesRead:()J\n+       608: invokevirtual #317                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDataOffset:(J)V\n+       611: aload_0\n+       612: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       615: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       618: iconst_1\n+       619: invokevirtual #320                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setStreamContiguous:(Z)V\n+       622: aload_0\n+       623: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       626: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       629: invokevirtual #323                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+       632: invokestatic  #326                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+       635: astore        18\n+       637: aload_0\n+       638: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       641: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       644: invokevirtual #332                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+       647: ldc2_w        #337                // long -1l\n+       650: lcmp\n+       651: ifeq          872\n+       654: aload_0\n+       655: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       658: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       661: invokestatic  #339                // Method org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+       664: ifeq          899\n+       667: aload         18\n+       669: getstatic     #343                // Field org/apache/commons/compress/archivers/zip/ZipMethod.STORED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+       672: if_acmpeq     899\n+       675: aload         18\n+       677: getstatic     #347                // Field org/apache/commons/compress/archivers/zip/ZipMethod.DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+       680: if_acmpeq     899\n+       683: new           #350                // class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundedInputStream\n+       686: dup\n        687: aload_0\n-       688: getfield      #30                 // Field inputStream:Ljava/io/InputStream;\n-       691: aload_0\n-       692: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       695: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       698: invokevirtual #97                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n-       701: invokespecial #105                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundedInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;Ljava/io/InputStream;J)V\n-       704: astore        19\n-       706: getstatic     #106                // Field org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n-       709: aload         18\n-       711: invokevirtual #107                // Method org/apache/commons/compress/archivers/zip/ZipMethod.ordinal:()I\n-       714: iaload\n-       715: tableswitch   { // 1 to 4\n-                       1: 744\n-                       2: 764\n-                       3: 824\n-                       4: 844\n-                 default: 864\n+       688: aload_0\n+       689: getfield      #97                 // Field inputStream:Ljava/io/InputStream;\n+       692: aload_0\n+       693: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       696: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       699: invokevirtual #332                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+       702: invokespecial #352                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundedInputStream.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;Ljava/io/InputStream;J)V\n+       705: astore        19\n+       707: getstatic     #355                // Field org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I\n+       710: aload         18\n+       712: invokevirtual #361                // Method org/apache/commons/compress/archivers/zip/ZipMethod.ordinal:()I\n+       715: iaload\n+       716: tableswitch   { // 1 to 4\n+                       1: 748\n+                       2: 768\n+                       3: 829\n+                       4: 849\n+                 default: 869\n             }\n-       744: aload_0\n-       745: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       748: new           #108                // class org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-       751: dup\n-       752: aload         19\n-       754: invokespecial #109                // Method org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-       757: invokestatic  #110                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n-       760: pop\n-       761: goto          864\n-       764: aload_0\n-       765: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       768: new           #111                // class org/apache/commons/compress/archivers/zip/ExplodingInputStream\n-       771: dup\n-       772: aload_0\n-       773: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       776: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       779: invokevirtual #112                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-       782: invokevirtual #113                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getSlidingDictionarySize:()I\n-       785: aload_0\n-       786: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       789: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       792: invokevirtual #112                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-       795: invokevirtual #114                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getNumberOfShannonFanoTrees:()I\n-       798: aload         19\n-       800: invokespecial #115                // Method org/apache/commons/compress/archivers/zip/ExplodingInputStream.\"<init>\":(IILjava/io/InputStream;)V\n-       803: invokestatic  #110                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n-       806: pop\n-       807: goto          864\n-       810: astore        20\n-       812: new           #117                // class java/io/IOException\n-       815: dup\n-       816: ldc           #118                // String bad IMPLODE data\n-       818: aload         20\n-       820: invokespecial #119                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-       823: athrow\n-       824: aload_0\n-       825: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       828: new           #120                // class org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n-       831: dup\n-       832: aload         19\n-       834: invokespecial #121                // Method org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-       837: invokestatic  #110                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n-       840: pop\n-       841: goto          864\n-       844: aload_0\n-       845: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       848: new           #122                // class org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n-       851: dup\n-       852: aload         19\n-       854: invokespecial #123                // Method org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-       857: invokestatic  #110                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n-       860: pop\n-       861: goto          864\n-       864: goto          894\n-       867: aload         18\n-       869: getstatic     #124                // Field org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-       872: if_acmpne     894\n-       875: aload_0\n-       876: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       879: new           #122                // class org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n-       882: dup\n-       883: aload_0\n-       884: getfield      #30                 // Field inputStream:Ljava/io/InputStream;\n-       887: invokespecial #123                // Method org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-       890: invokestatic  #110                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n-       893: pop\n-       894: aload_0\n-       895: dup\n-       896: getfield      #125                // Field entriesRead:I\n-       899: iconst_1\n-       900: iadd\n-       901: putfield      #125                // Field entriesRead:I\n-       904: aload_0\n-       905: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       908: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       911: areturn\n+       748: aload_0\n+       749: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       752: new           #364                // class org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+       755: dup\n+       756: aload         19\n+       758: invokespecial #366                // Method org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+       761: invokestatic  #369                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n+       764: pop\n+       765: goto          869\n+       768: aload_0\n+       769: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       772: new           #373                // class org/apache/commons/compress/archivers/zip/ExplodingInputStream\n+       775: dup\n+       776: aload_0\n+       777: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       780: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       783: invokevirtual #375                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+       786: invokevirtual #379                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getSlidingDictionarySize:()I\n+       789: aload_0\n+       790: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       793: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       796: invokevirtual #375                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+       799: invokevirtual #382                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getNumberOfShannonFanoTrees:()I\n+       802: aload         19\n+       804: invokespecial #385                // Method org/apache/commons/compress/archivers/zip/ExplodingInputStream.\"<init>\":(IILjava/io/InputStream;)V\n+       807: invokestatic  #369                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n+       810: pop\n+       811: goto          869\n+       814: astore        20\n+       816: new           #390                // class java/io/IOException\n+       819: dup\n+       820: ldc_w         #392                // String bad IMPLODE data\n+       823: aload         20\n+       825: invokespecial #394                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+       828: athrow\n+       829: aload_0\n+       830: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       833: new           #397                // class org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream\n+       836: dup\n+       837: aload         19\n+       839: invokespecial #399                // Method org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+       842: invokestatic  #369                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n+       845: pop\n+       846: goto          869\n+       849: aload_0\n+       850: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       853: new           #400                // class org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+       856: dup\n+       857: aload         19\n+       859: invokespecial #402                // Method org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+       862: invokestatic  #369                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n+       865: pop\n+       866: goto          869\n+       869: goto          899\n+       872: aload         18\n+       874: getstatic     #403                // Field org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+       877: if_acmpne     899\n+       880: aload_0\n+       881: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       884: new           #400                // class org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream\n+       887: dup\n+       888: aload_0\n+       889: getfield      #97                 // Field inputStream:Ljava/io/InputStream;\n+       892: invokespecial #402                // Method org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+       895: invokestatic  #369                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$302:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Ljava/io/InputStream;)Ljava/io/InputStream;\n+       898: pop\n+       899: aload_0\n+       900: dup\n+       901: getfield      #406                // Field entriesRead:I\n+       904: iconst_1\n+       905: iadd\n+       906: putfield      #406                // Field entriesRead:I\n+       909: aload_0\n+       910: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       913: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       916: areturn\n       Exception table:\n          from    to  target type\n             41    60    63   Class java/io/EOFException\n            487   499   502   Class java/lang/RuntimeException\n-           764   807   810   Class java/lang/IllegalArgumentException\n+           768   811   814   Class java/lang/IllegalArgumentException\n       LineNumberTable:\n         line 263: 0\n         line 265: 5\n         line 266: 7\n         line 267: 21\n         line 269: 23\n         line 270: 30\n@@ -1608,45 +1608,45 @@\n         line 344: 461\n         line 345: 466\n         line 348: 479\n         line 350: 487\n         line 355: 499\n         line 351: 502\n         line 352: 504\n-        line 353: 541\n-        line 354: 549\n-        line 357: 552\n-        line 358: 564\n-        line 361: 577\n-        line 363: 585\n-        line 364: 596\n-        line 365: 610\n-        line 367: 621\n-        line 368: 636\n-        line 369: 653\n-        line 370: 682\n-        line 371: 706\n-        line 373: 744\n-        line 374: 761\n-        line 377: 764\n-        line 378: 776\n-        line 379: 789\n-        line 377: 803\n-        line 383: 807\n-        line 381: 810\n-        line 382: 812\n-        line 386: 824\n-        line 387: 841\n-        line 389: 844\n-        line 390: 861\n-        line 397: 864\n-        line 398: 867\n-        line 399: 875\n-        line 402: 894\n-        line 403: 904\n+        line 353: 542\n+        line 354: 550\n+        line 357: 553\n+        line 358: 565\n+        line 361: 578\n+        line 363: 586\n+        line 364: 597\n+        line 365: 611\n+        line 367: 622\n+        line 368: 637\n+        line 369: 654\n+        line 370: 683\n+        line 371: 707\n+        line 373: 748\n+        line 374: 765\n+        line 377: 768\n+        line 378: 780\n+        line 379: 793\n+        line 377: 807\n+        line 383: 811\n+        line 381: 814\n+        line 382: 816\n+        line 386: 829\n+        line 387: 846\n+        line 389: 849\n+        line 390: 866\n+        line 397: 869\n+        line 398: 872\n+        line 399: 880\n+        line 402: 899\n+        line 403: 909\n       StackMapTable: number_of_entries = 26\n         frame_type = 252 /* append */\n           offset_delta = 21\n           locals = [ int ]\n         frame_type = 1 /* same */\n         frame_type = 12 /* same */\n         frame_type = 252 /* append */\n@@ -1675,23 +1675,23 @@\n         frame_type = 254 /* append */\n           offset_delta = 74\n           locals = [ int, int, class \"[B\" ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 22\n           locals = [ class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream, int, long, class org/apache/commons/compress/archivers/zip/ZipLong, int, int, class org/apache/commons/compress/archivers/zip/GeneralPurposeBit, int, class org/apache/commons/compress/archivers/zip/ZipEncoding, long, class org/apache/commons/compress/archivers/zip/ZipLong, class org/apache/commons/compress/archivers/zip/ZipLong, int, int, class \"[B\", class \"[B\" ]\n           stack = [ class java/lang/RuntimeException ]\n-        frame_type = 49 /* same */\n+        frame_type = 50 /* same */\n         frame_type = 24 /* same */\n         frame_type = 253 /* append */\n-          offset_delta = 166\n+          offset_delta = 169\n           locals = [ class org/apache/commons/compress/archivers/zip/ZipMethod, class java/io/InputStream ]\n         frame_type = 19 /* same */\n         frame_type = 109 /* same_locals_1_stack_item */\n           stack = [ class java/lang/IllegalArgumentException ]\n-        frame_type = 13 /* same */\n+        frame_type = 14 /* same */\n         frame_type = 19 /* same */\n         frame_type = 250 /* chop */\n           offset_delta = 19\n         frame_type = 2 /* same */\n         frame_type = 26 /* same */\n     Exceptions:\n       throws java.io.IOException\n@@ -1699,63 +1699,63 @@\n   private void readFirstLocalFileHeader() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=3, args_size=1\n          0: aload_0\n          1: aload_0\n-         2: getfield      #18                 // Field lfhBuf:[B\n-         5: invokespecial #40                 // Method readFully:([B)V\n-         8: new           #42                 // class org/apache/commons/compress/archivers/zip/ZipLong\n+         2: getfield      #56                 // Field lfhBuf:[B\n+         5: invokespecial #131                // Method readFully:([B)V\n+         8: new           #137                // class org/apache/commons/compress/archivers/zip/ZipLong\n         11: dup\n         12: aload_0\n-        13: getfield      #18                 // Field lfhBuf:[B\n-        16: invokespecial #43                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n+        13: getfield      #56                 // Field lfhBuf:[B\n+        16: invokespecial #139                // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n         19: astore_1\n         20: aload_0\n-        21: getfield      #32                 // Field skipSplitSig:Z\n+        21: getfield      #104                // Field skipSplitSig:Z\n         24: ifne          48\n         27: aload_1\n-        28: getstatic     #126                // Field org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-        31: invokevirtual #45                 // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+        28: getstatic     #410                // Field org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        31: invokevirtual #145                // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n         34: ifeq          48\n-        37: new           #127                // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+        37: new           #413                // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n         40: dup\n-        41: getstatic     #128                // Field org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.SPLITTING:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-        44: invokespecial #129                // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;)V\n+        41: getstatic     #415                // Field org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.SPLITTING:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+        44: invokespecial #421                // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;)V\n         47: athrow\n         48: aload_1\n-        49: getstatic     #130                // Field org/apache/commons/compress/archivers/zip/ZipLong.SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-        52: invokevirtual #45                 // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+        49: getstatic     #424                // Field org/apache/commons/compress/archivers/zip/ZipLong.SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        52: invokevirtual #145                // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n         55: ifne          68\n         58: aload_1\n-        59: getstatic     #126                // Field org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-        62: invokevirtual #45                 // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+        59: getstatic     #410                // Field org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        62: invokevirtual #145                // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n         65: ifeq          104\n         68: iconst_4\n         69: newarray       byte\n         71: astore_2\n         72: aload_0\n         73: aload_2\n-        74: invokespecial #40                 // Method readFully:([B)V\n+        74: invokespecial #131                // Method readFully:([B)V\n         77: aload_0\n-        78: getfield      #18                 // Field lfhBuf:[B\n+        78: getfield      #56                 // Field lfhBuf:[B\n         81: iconst_4\n         82: aload_0\n-        83: getfield      #18                 // Field lfhBuf:[B\n+        83: getfield      #56                 // Field lfhBuf:[B\n         86: iconst_0\n         87: bipush        26\n-        89: invokestatic  #131                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        89: invokestatic  #427                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         92: aload_2\n         93: iconst_0\n         94: aload_0\n-        95: getfield      #18                 // Field lfhBuf:[B\n+        95: getfield      #56                 // Field lfhBuf:[B\n         98: bipush        26\n        100: iconst_4\n-       101: invokestatic  #131                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+       101: invokestatic  #427                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n        104: return\n       LineNumberTable:\n         line 412: 0\n         line 413: 8\n         line 415: 20\n         line 416: 37\n         line 420: 48\n@@ -1775,229 +1775,229 @@\n \n   private void processZip64Extra(org.apache.commons.compress.archivers.zip.ZipLong, org.apache.commons.compress.archivers.zip.ZipLong) throws java.util.zip.ZipException;\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipLong;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=7, args_size=3\n          0: aload_0\n-         1: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-         4: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-         7: getstatic     #132                // Field org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-        10: invokevirtual #133                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+         1: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+         4: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+         7: getstatic     #433                // Field org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+        10: invokevirtual #439                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n         13: astore_3\n         14: aload_3\n-        15: ifnull        35\n+        15: ifnull        36\n         18: aload_3\n-        19: instanceof    #134                // class org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-        22: ifne          35\n-        25: new           #50                 // class java/util/zip/ZipException\n+        19: instanceof    #434                // class org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+        22: ifne          36\n+        25: new           #162                // class java/util/zip/ZipException\n         28: dup\n-        29: ldc           #135                // String archive contains unparseable zip64 extra field\n-        31: invokespecial #56                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-        34: athrow\n-        35: aload_3\n-        36: checkcast     #134                // class org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-        39: astore        4\n-        41: aload_0\n-        42: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        45: aload         4\n-        47: ifnull        54\n-        50: iconst_1\n-        51: goto          55\n-        54: iconst_0\n-        55: invokestatic  #136                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$402:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n-        58: pop\n-        59: aload_0\n-        60: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        63: invokestatic  #73                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n-        66: ifne          275\n-        69: aload         4\n-        71: ifnull        201\n-        74: getstatic     #137                // Field org/apache/commons/compress/archivers/zip/ZipLong.ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-        77: aload_2\n-        78: invokevirtual #45                 // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n-        81: ifne          94\n-        84: getstatic     #137                // Field org/apache/commons/compress/archivers/zip/ZipLong.ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-        87: aload_1\n-        88: invokevirtual #45                 // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n-        91: ifeq          201\n-        94: aload         4\n-        96: invokevirtual #138                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-        99: ifnull        110\n-       102: aload         4\n-       104: invokevirtual #139                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-       107: ifnonnull     120\n-       110: new           #50                 // class java/util/zip/ZipException\n-       113: dup\n-       114: ldc           #140                // String archive contains corrupted zip64 extra field\n-       116: invokespecial #56                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-       119: athrow\n-       120: aload         4\n-       122: invokevirtual #138                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-       125: invokevirtual #141                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n-       128: lstore        5\n-       130: lload         5\n-       132: lconst_0\n-       133: lcmp\n-       134: ifge          147\n-       137: new           #50                 // class java/util/zip/ZipException\n-       140: dup\n-       141: ldc           #142                // String broken archive, entry with negative compressed size\n-       143: invokespecial #56                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-       146: athrow\n-       147: aload_0\n-       148: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       151: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       154: lload         5\n-       156: invokevirtual #143                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n-       159: aload         4\n-       161: invokevirtual #139                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-       164: invokevirtual #141                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n-       167: lstore        5\n-       169: lload         5\n-       171: lconst_0\n-       172: lcmp\n-       173: ifge          186\n-       176: new           #50                 // class java/util/zip/ZipException\n-       179: dup\n-       180: ldc           #144                // String broken archive, entry with negative size\n-       182: invokespecial #56                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-       185: athrow\n-       186: aload_0\n-       187: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       190: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       193: lload         5\n-       195: invokevirtual #145                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n-       198: goto          275\n-       201: aload_2\n-       202: ifnull        275\n-       205: aload_1\n-       206: ifnull        275\n-       209: aload_2\n-       210: invokevirtual #53                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n-       213: lconst_0\n-       214: lcmp\n-       215: ifge          228\n-       218: new           #50                 // class java/util/zip/ZipException\n-       221: dup\n-       222: ldc           #142                // String broken archive, entry with negative compressed size\n-       224: invokespecial #56                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-       227: athrow\n-       228: aload_0\n-       229: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       232: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       235: aload_2\n-       236: invokevirtual #53                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n-       239: invokevirtual #143                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n-       242: aload_1\n-       243: invokevirtual #53                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n-       246: lconst_0\n-       247: lcmp\n-       248: ifge          261\n-       251: new           #50                 // class java/util/zip/ZipException\n-       254: dup\n-       255: ldc           #144                // String broken archive, entry with negative size\n-       257: invokespecial #56                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-       260: athrow\n-       261: aload_0\n-       262: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       265: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       268: aload_1\n-       269: invokevirtual #53                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n-       272: invokevirtual #145                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n-       275: return\n+        29: ldc_w         #443                // String archive contains unparseable zip64 extra field\n+        32: invokespecial #183                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        35: athrow\n+        36: aload_3\n+        37: checkcast     #434                // class org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+        40: astore        4\n+        42: aload_0\n+        43: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        46: aload         4\n+        48: ifnull        55\n+        51: iconst_1\n+        52: goto          56\n+        55: iconst_0\n+        56: invokestatic  #445                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$402:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;Z)Z\n+        59: pop\n+        60: aload_0\n+        61: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        64: invokestatic  #247                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n+        67: ifne          281\n+        70: aload         4\n+        72: ifnull        205\n+        75: getstatic     #448                // Field org/apache/commons/compress/archivers/zip/ZipLong.ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        78: aload_2\n+        79: invokevirtual #145                // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+        82: ifne          95\n+        85: getstatic     #448                // Field org/apache/commons/compress/archivers/zip/ZipLong.ZIP64_MAGIC:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        88: aload_1\n+        89: invokevirtual #145                // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+        92: ifeq          205\n+        95: aload         4\n+        97: invokevirtual #451                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+       100: ifnull        111\n+       103: aload         4\n+       105: invokevirtual #454                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+       108: ifnonnull     122\n+       111: new           #162                // class java/util/zip/ZipException\n+       114: dup\n+       115: ldc_w         #457                // String archive contains corrupted zip64 extra field\n+       118: invokespecial #183                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       121: athrow\n+       122: aload         4\n+       124: invokevirtual #451                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+       127: invokevirtual #459                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n+       130: lstore        5\n+       132: lload         5\n+       134: lconst_0\n+       135: lcmp\n+       136: ifge          150\n+       139: new           #162                // class java/util/zip/ZipException\n+       142: dup\n+       143: ldc_w         #464                // String broken archive, entry with negative compressed size\n+       146: invokespecial #183                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       149: athrow\n+       150: aload_0\n+       151: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       154: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       157: lload         5\n+       159: invokevirtual #466                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n+       162: aload         4\n+       164: invokevirtual #454                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+       167: invokevirtual #459                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J\n+       170: lstore        5\n+       172: lload         5\n+       174: lconst_0\n+       175: lcmp\n+       176: ifge          190\n+       179: new           #162                // class java/util/zip/ZipException\n+       182: dup\n+       183: ldc_w         #469                // String broken archive, entry with negative size\n+       186: invokespecial #183                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       189: athrow\n+       190: aload_0\n+       191: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       194: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       197: lload         5\n+       199: invokevirtual #471                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n+       202: goto          281\n+       205: aload_2\n+       206: ifnull        281\n+       209: aload_1\n+       210: ifnull        281\n+       213: aload_2\n+       214: invokevirtual #168                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+       217: lconst_0\n+       218: lcmp\n+       219: ifge          233\n+       222: new           #162                // class java/util/zip/ZipException\n+       225: dup\n+       226: ldc_w         #464                // String broken archive, entry with negative compressed size\n+       229: invokespecial #183                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       232: athrow\n+       233: aload_0\n+       234: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       237: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       240: aload_2\n+       241: invokevirtual #168                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+       244: invokevirtual #466                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n+       247: aload_1\n+       248: invokevirtual #168                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+       251: lconst_0\n+       252: lcmp\n+       253: ifge          267\n+       256: new           #162                // class java/util/zip/ZipException\n+       259: dup\n+       260: ldc_w         #469                // String broken archive, entry with negative size\n+       263: invokespecial #183                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       266: athrow\n+       267: aload_0\n+       268: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       271: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       274: aload_1\n+       275: invokevirtual #168                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+       278: invokevirtual #471                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n+       281: return\n       LineNumberTable:\n         line 435: 0\n         line 436: 4\n         line 437: 14\n         line 438: 25\n-        line 440: 35\n-        line 442: 41\n-        line 443: 59\n-        line 444: 69\n-        line 445: 78\n-        line 446: 94\n-        line 448: 110\n-        line 450: 120\n-        line 451: 130\n-        line 452: 137\n-        line 454: 147\n-        line 455: 159\n-        line 456: 169\n-        line 457: 176\n-        line 459: 186\n-        line 460: 198\n-        line 461: 209\n-        line 462: 218\n-        line 464: 228\n-        line 465: 242\n-        line 466: 251\n-        line 468: 261\n-        line 471: 275\n+        line 440: 36\n+        line 442: 42\n+        line 443: 60\n+        line 444: 70\n+        line 445: 79\n+        line 446: 95\n+        line 448: 111\n+        line 450: 122\n+        line 451: 132\n+        line 452: 139\n+        line 454: 150\n+        line 455: 162\n+        line 456: 172\n+        line 457: 179\n+        line 459: 190\n+        line 460: 202\n+        line 461: 213\n+        line 462: 222\n+        line 464: 233\n+        line 465: 247\n+        line 466: 256\n+        line 468: 267\n+        line 471: 281\n       StackMapTable: number_of_entries = 12\n         frame_type = 252 /* append */\n-          offset_delta = 35\n+          offset_delta = 36\n           locals = [ class org/apache/commons/compress/archivers/zip/ZipExtraField ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 18\n           locals = [ class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream, class org/apache/commons/compress/archivers/zip/ZipLong, class org/apache/commons/compress/archivers/zip/ZipLong, class org/apache/commons/compress/archivers/zip/ZipExtraField, class org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField ]\n           stack = [ class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 0\n           locals = [ class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream, class org/apache/commons/compress/archivers/zip/ZipLong, class org/apache/commons/compress/archivers/zip/ZipLong, class org/apache/commons/compress/archivers/zip/ZipExtraField, class org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField ]\n           stack = [ class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry, int ]\n         frame_type = 38 /* same */\n         frame_type = 15 /* same */\n-        frame_type = 9 /* same */\n+        frame_type = 10 /* same */\n         frame_type = 252 /* append */\n-          offset_delta = 26\n+          offset_delta = 27\n           locals = [ long ]\n-        frame_type = 38 /* same */\n+        frame_type = 39 /* same */\n         frame_type = 250 /* chop */\n           offset_delta = 14\n-        frame_type = 26 /* same */\n-        frame_type = 32 /* same */\n+        frame_type = 27 /* same */\n+        frame_type = 33 /* same */\n         frame_type = 13 /* same */\n     Exceptions:\n       throws java.util.zip.ZipException\n \n   public org.apache.commons.compress.archivers.ArchiveEntry getNextEntry() throws java.io.IOException;\n     descriptor: ()Lorg/apache/commons/compress/archivers/ArchiveEntry;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokevirtual #146                // Method getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+         1: invokevirtual #474                // Method getNextZipEntry:()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n          4: areturn\n       LineNumberTable:\n         line 475: 0\n     Exceptions:\n       throws java.io.IOException\n \n   public boolean canReadEntryData(org.apache.commons.compress.archivers.ArchiveEntry);\n     descriptor: (Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=3, args_size=2\n          0: aload_1\n-         1: instanceof    #147                // class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+         1: instanceof    #203                // class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n          4: ifeq          41\n          7: aload_1\n-         8: checkcast     #147                // class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+         8: checkcast     #203                // class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n         11: astore_2\n         12: aload_2\n-        13: invokestatic  #101                // Method org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+        13: invokestatic  #339                // Method org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n         16: ifeq          39\n         19: aload_0\n         20: aload_2\n-        21: invokespecial #148                // Method supportsDataDescriptorFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+        21: invokespecial #478                // Method supportsDataDescriptorFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n         24: ifeq          39\n         27: aload_0\n         28: aload_2\n-        29: invokespecial #149                // Method supportsCompressedSizeFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+        29: invokespecial #481                // Method supportsCompressedSizeFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n         32: ifeq          39\n         35: iconst_1\n         36: goto          40\n         39: iconst_0\n         40: ireturn\n         41: iconst_0\n         42: ireturn\n@@ -2024,202 +2024,202 @@\n     Code:\n       stack=5, locals=5, args_size=4\n          0: iload_3\n          1: ifne          6\n          4: iconst_0\n          5: ireturn\n          6: aload_0\n-         7: getfield      #35                 // Field closed:Z\n-        10: ifeq          23\n-        13: new           #117                // class java/io/IOException\n+         7: getfield      #115                // Field closed:Z\n+        10: ifeq          24\n+        13: new           #390                // class java/io/IOException\n         16: dup\n-        17: ldc           #150                // String The stream is closed\n-        19: invokespecial #151                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        22: athrow\n-        23: aload_0\n-        24: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        27: ifnonnull     32\n-        30: iconst_m1\n-        31: ireturn\n-        32: iload_2\n-        33: aload_1\n-        34: arraylength\n-        35: if_icmpgt     54\n-        38: iload_3\n-        39: iflt          54\n-        42: iload_2\n-        43: iflt          54\n-        46: aload_1\n-        47: arraylength\n-        48: iload_2\n-        49: isub\n-        50: iload_3\n-        51: if_icmpge     62\n-        54: new           #152                // class java/lang/ArrayIndexOutOfBoundsException\n-        57: dup\n-        58: invokespecial #153                // Method java/lang/ArrayIndexOutOfBoundsException.\"<init>\":()V\n-        61: athrow\n-        62: aload_0\n-        63: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        66: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-        69: invokestatic  #154                // Method org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-        72: aload_0\n+        17: ldc_w         #484                // String The stream is closed\n+        20: invokespecial #486                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        23: athrow\n+        24: aload_0\n+        25: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        28: ifnonnull     33\n+        31: iconst_m1\n+        32: ireturn\n+        33: iload_2\n+        34: aload_1\n+        35: arraylength\n+        36: if_icmpgt     55\n+        39: iload_3\n+        40: iflt          55\n+        43: iload_2\n+        44: iflt          55\n+        47: aload_1\n+        48: arraylength\n+        49: iload_2\n+        50: isub\n+        51: iload_3\n+        52: if_icmpge     63\n+        55: new           #487                // class java/lang/ArrayIndexOutOfBoundsException\n+        58: dup\n+        59: invokespecial #489                // Method java/lang/ArrayIndexOutOfBoundsException.\"<init>\":()V\n+        62: athrow\n+        63: aload_0\n+        64: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        67: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+        70: invokestatic  #490                // Method org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n         73: aload_0\n-        74: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        77: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-        80: invokespecial #148                // Method supportsDataDescriptorFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-        83: ifne          104\n-        86: new           #127                // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-        89: dup\n-        90: getstatic     #155                // Field org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.DATA_DESCRIPTOR:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-        93: aload_0\n-        94: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        97: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       100: invokespecial #156                // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-       103: athrow\n-       104: aload_0\n+        74: aload_0\n+        75: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        78: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+        81: invokespecial #478                // Method supportsDataDescriptorFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+        84: ifne          105\n+        87: new           #413                // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+        90: dup\n+        91: getstatic     #494                // Field org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.DATA_DESCRIPTOR:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+        94: aload_0\n+        95: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        98: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       101: invokespecial #497                // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+       104: athrow\n        105: aload_0\n-       106: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       109: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       112: invokespecial #149                // Method supportsCompressedSizeFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-       115: ifne          136\n-       118: new           #127                // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-       121: dup\n-       122: getstatic     #157                // Field org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.UNKNOWN_COMPRESSED_SIZE:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-       125: aload_0\n-       126: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       129: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       132: invokespecial #156                // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-       135: athrow\n-       136: aload_0\n-       137: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       140: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       143: invokevirtual #95                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-       146: ifne          161\n-       149: aload_0\n-       150: aload_1\n-       151: iload_2\n-       152: iload_3\n-       153: invokespecial #158                // Method readStored:([BII)I\n-       156: istore        4\n-       158: goto          310\n-       161: aload_0\n-       162: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       165: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       168: invokevirtual #95                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-       171: bipush        8\n-       173: if_icmpne     188\n-       176: aload_0\n-       177: aload_1\n-       178: iload_2\n-       179: iload_3\n-       180: invokespecial #159                // Method readDeflated:([BII)I\n-       183: istore        4\n-       185: goto          310\n-       188: aload_0\n-       189: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       192: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       195: invokevirtual #95                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-       198: getstatic     #160                // Field org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-       201: invokevirtual #161                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n-       204: if_icmpeq     264\n-       207: aload_0\n-       208: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       211: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       214: invokevirtual #95                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-       217: getstatic     #162                // Field org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-       220: invokevirtual #161                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n-       223: if_icmpeq     264\n-       226: aload_0\n-       227: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       230: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       233: invokevirtual #95                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-       236: getstatic     #124                // Field org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-       239: invokevirtual #161                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n-       242: if_icmpeq     264\n-       245: aload_0\n-       246: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       249: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       252: invokevirtual #95                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-       255: getstatic     #163                // Field org/apache/commons/compress/archivers/zip/ZipMethod.BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-       258: invokevirtual #161                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n-       261: if_icmpne     282\n-       264: aload_0\n-       265: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       268: invokestatic  #164                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n-       271: aload_1\n-       272: iload_2\n-       273: iload_3\n-       274: invokevirtual #165                // Method java/io/InputStream.read:([BII)I\n-       277: istore        4\n-       279: goto          310\n-       282: new           #127                // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-       285: dup\n-       286: aload_0\n-       287: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       290: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       293: invokevirtual #95                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-       296: invokestatic  #96                 // Method org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-       299: aload_0\n-       300: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       303: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       306: invokespecial #166                // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-       309: athrow\n-       310: iload         4\n-       312: iflt          341\n-       315: aload_0\n-       316: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       319: invokestatic  #167                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$500:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/util/zip/CRC32;\n-       322: aload_1\n-       323: iload_2\n-       324: iload         4\n-       326: invokevirtual #168                // Method java/util/zip/CRC32.update:([BII)V\n-       329: aload_0\n-       330: dup\n-       331: getfield      #34                 // Field uncompressedCount:J\n-       334: iload         4\n-       336: i2l\n-       337: ladd\n-       338: putfield      #34                 // Field uncompressedCount:J\n-       341: iload         4\n-       343: ireturn\n+       106: aload_0\n+       107: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       110: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       113: invokespecial #481                // Method supportsCompressedSizeFor:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+       116: ifne          137\n+       119: new           #413                // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+       122: dup\n+       123: getstatic     #500                // Field org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.UNKNOWN_COMPRESSED_SIZE:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+       126: aload_0\n+       127: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       130: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       133: invokespecial #497                // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+       136: athrow\n+       137: aload_0\n+       138: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       141: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       144: invokevirtual #323                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+       147: ifne          162\n+       150: aload_0\n+       151: aload_1\n+       152: iload_2\n+       153: iload_3\n+       154: invokespecial #503                // Method readStored:([BII)I\n+       157: istore        4\n+       159: goto          311\n+       162: aload_0\n+       163: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       166: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       169: invokevirtual #323                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+       172: bipush        8\n+       174: if_icmpne     189\n+       177: aload_0\n+       178: aload_1\n+       179: iload_2\n+       180: iload_3\n+       181: invokespecial #507                // Method readDeflated:([BII)I\n+       184: istore        4\n+       186: goto          311\n+       189: aload_0\n+       190: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       193: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       196: invokevirtual #323                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+       199: getstatic     #510                // Field org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+       202: invokevirtual #513                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+       205: if_icmpeq     265\n+       208: aload_0\n+       209: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       212: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       215: invokevirtual #323                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+       218: getstatic     #516                // Field org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+       221: invokevirtual #513                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+       224: if_icmpeq     265\n+       227: aload_0\n+       228: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       231: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       234: invokevirtual #323                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+       237: getstatic     #403                // Field org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+       240: invokevirtual #513                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+       243: if_icmpeq     265\n+       246: aload_0\n+       247: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       250: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       253: invokevirtual #323                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+       256: getstatic     #519                // Field org/apache/commons/compress/archivers/zip/ZipMethod.BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+       259: invokevirtual #513                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+       262: if_icmpne     283\n+       265: aload_0\n+       266: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       269: invokestatic  #522                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$300:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n+       272: aload_1\n+       273: iload_2\n+       274: iload_3\n+       275: invokevirtual #526                // Method java/io/InputStream.read:([BII)I\n+       278: istore        4\n+       280: goto          311\n+       283: new           #413                // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+       286: dup\n+       287: aload_0\n+       288: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       291: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       294: invokevirtual #323                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+       297: invokestatic  #326                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+       300: aload_0\n+       301: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       304: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       307: invokespecial #531                // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+       310: athrow\n+       311: iload         4\n+       313: iflt          342\n+       316: aload_0\n+       317: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       320: invokestatic  #534                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$500:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/util/zip/CRC32;\n+       323: aload_1\n+       324: iload_2\n+       325: iload         4\n+       327: invokevirtual #538                // Method java/util/zip/CRC32.update:([BII)V\n+       330: aload_0\n+       331: dup\n+       332: getfield      #111                // Field uncompressedCount:J\n+       335: iload         4\n+       337: i2l\n+       338: ladd\n+       339: putfield      #111                // Field uncompressedCount:J\n+       342: iload         4\n+       344: ireturn\n       LineNumberTable:\n         line 498: 0\n         line 499: 4\n         line 501: 6\n         line 502: 13\n-        line 505: 23\n-        line 506: 30\n-        line 510: 32\n-        line 511: 54\n-        line 514: 62\n-        line 515: 72\n-        line 516: 86\n-        line 517: 97\n-        line 519: 104\n-        line 520: 118\n-        line 521: 129\n-        line 525: 136\n-        line 526: 149\n-        line 527: 161\n-        line 528: 176\n-        line 529: 188\n-        line 530: 211\n-        line 531: 230\n-        line 532: 249\n-        line 533: 264\n-        line 535: 282\n-        line 536: 303\n-        line 539: 310\n-        line 540: 315\n-        line 541: 329\n-        line 544: 341\n+        line 505: 24\n+        line 506: 31\n+        line 510: 33\n+        line 511: 55\n+        line 514: 63\n+        line 515: 73\n+        line 516: 87\n+        line 517: 98\n+        line 519: 105\n+        line 520: 119\n+        line 521: 130\n+        line 525: 137\n+        line 526: 150\n+        line 527: 162\n+        line 528: 177\n+        line 529: 189\n+        line 530: 212\n+        line 531: 231\n+        line 532: 250\n+        line 533: 265\n+        line 535: 283\n+        line 536: 304\n+        line 539: 311\n+        line 540: 316\n+        line 541: 330\n+        line 544: 342\n       StackMapTable: number_of_entries = 13\n         frame_type = 6 /* same */\n-        frame_type = 16 /* same */\n+        frame_type = 17 /* same */\n         frame_type = 8 /* same */\n         frame_type = 21 /* same */\n         frame_type = 7 /* same */\n         frame_type = 41 /* same */\n         frame_type = 31 /* same */\n         frame_type = 24 /* same */\n         frame_type = 26 /* same */\n@@ -2235,53 +2235,53 @@\n \n   public long getCompressedCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-         4: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-         7: invokevirtual #95                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+         1: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+         4: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+         7: invokevirtual #323                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n         10: istore_1\n         11: iload_1\n         12: ifne          23\n         15: aload_0\n-        16: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        19: invokestatic  #169                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+        16: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        19: invokestatic  #544                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n         22: lreturn\n         23: iload_1\n         24: bipush        8\n         26: if_icmpne     34\n         29: aload_0\n-        30: invokespecial #170                // Method getBytesInflated:()J\n+        30: invokespecial #548                // Method getBytesInflated:()J\n         33: lreturn\n         34: iload_1\n-        35: getstatic     #160                // Field org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-        38: invokevirtual #161                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+        35: getstatic     #510                // Field org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+        38: invokevirtual #513                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n         41: if_icmpeq     74\n         44: iload_1\n-        45: getstatic     #162                // Field org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-        48: invokevirtual #161                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+        45: getstatic     #516                // Field org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+        48: invokevirtual #513                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n         51: if_icmpeq     74\n         54: iload_1\n-        55: getstatic     #124                // Field org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-        58: invokevirtual #161                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+        55: getstatic     #403                // Field org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+        58: invokevirtual #513                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n         61: if_icmpeq     74\n         64: iload_1\n-        65: getstatic     #163                // Field org/apache/commons/compress/archivers/zip/ZipMethod.BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-        68: invokevirtual #161                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+        65: getstatic     #519                // Field org/apache/commons/compress/archivers/zip/ZipMethod.BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+        68: invokevirtual #513                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n         71: if_icmpne     90\n         74: aload_0\n-        75: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        78: invokestatic  #171                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$700:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n-        81: checkcast     #172                // class org/apache/commons/compress/utils/InputStreamStatistics\n-        84: invokeinterface #173,  1          // InterfaceMethod org/apache/commons/compress/utils/InputStreamStatistics.getCompressedCount:()J\n+        75: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        78: invokestatic  #551                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$700:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Ljava/io/InputStream;\n+        81: checkcast     #554                // class org/apache/commons/compress/utils/InputStreamStatistics\n+        84: invokeinterface #556,  1          // InterfaceMethod org/apache/commons/compress/utils/InputStreamStatistics.getCompressedCount:()J\n         89: lreturn\n-        90: ldc2_w        #99                 // long -1l\n+        90: ldc2_w        #337                // long -1l\n         93: lreturn\n       LineNumberTable:\n         line 553: 0\n         line 554: 11\n         line 555: 15\n         line 557: 23\n         line 558: 29\n@@ -2301,167 +2301,167 @@\n \n   public long getUncompressedCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #34                 // Field uncompressedCount:J\n+         1: getfield      #111                // Field uncompressedCount:J\n          4: lreturn\n       LineNumberTable:\n         line 574: 0\n \n   private int readStored(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=7, args_size=4\n          0: aload_0\n-         1: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-         4: invokestatic  #73                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n+         1: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+         4: invokestatic  #247                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n          7: ifeq          32\n         10: aload_0\n-        11: getfield      #174                // Field lastStoredEntry:Ljava/io/ByteArrayInputStream;\n+        11: getfield      #559                // Field lastStoredEntry:Ljava/io/ByteArrayInputStream;\n         14: ifnonnull     21\n         17: aload_0\n-        18: invokespecial #175                // Method readStoredEntry:()V\n+        18: invokespecial #563                // Method readStoredEntry:()V\n         21: aload_0\n-        22: getfield      #174                // Field lastStoredEntry:Ljava/io/ByteArrayInputStream;\n+        22: getfield      #559                // Field lastStoredEntry:Ljava/io/ByteArrayInputStream;\n         25: aload_1\n         26: iload_2\n         27: iload_3\n-        28: invokevirtual #176                // Method java/io/ByteArrayInputStream.read:([BII)I\n+        28: invokevirtual #566                // Method java/io/ByteArrayInputStream.read:([BII)I\n         31: ireturn\n         32: aload_0\n-        33: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        36: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-        39: invokevirtual #177                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n+        33: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        36: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+        39: invokevirtual #569                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n         42: lstore        4\n         44: aload_0\n-        45: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        48: invokestatic  #169                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+        45: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        48: invokestatic  #544                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n         51: lload         4\n         53: lcmp\n         54: iflt          59\n         57: iconst_m1\n         58: ireturn\n         59: aload_0\n-        60: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        63: invokevirtual #178                // Method java/nio/ByteBuffer.position:()I\n+        60: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        63: invokevirtual #571                // Method java/nio/ByteBuffer.position:()I\n         66: aload_0\n-        67: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        70: invokevirtual #179                // Method java/nio/ByteBuffer.limit:()I\n-        73: if_icmplt     153\n+        67: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        70: invokevirtual #574                // Method java/nio/ByteBuffer.limit:()I\n+        73: if_icmplt     154\n         76: aload_0\n-        77: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n+        77: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n         80: iconst_0\n-        81: invokevirtual #180                // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;\n+        81: invokevirtual #576                // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;\n         84: pop\n         85: aload_0\n-        86: getfield      #30                 // Field inputStream:Ljava/io/InputStream;\n+        86: getfield      #97                 // Field inputStream:Ljava/io/InputStream;\n         89: aload_0\n-        90: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        93: invokevirtual #181                // Method java/nio/ByteBuffer.array:()[B\n-        96: invokevirtual #182                // Method java/io/InputStream.read:([B)I\n+        90: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        93: invokevirtual #578                // Method java/nio/ByteBuffer.array:()[B\n+        96: invokevirtual #582                // Method java/io/InputStream.read:([B)I\n         99: istore        6\n        101: iload         6\n        103: iconst_m1\n-       104: if_icmpne     126\n+       104: if_icmpne     127\n        107: aload_0\n-       108: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n+       108: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n        111: iconst_0\n-       112: invokevirtual #33                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;\n+       112: invokevirtual #107                // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;\n        115: pop\n-       116: new           #117                // class java/io/IOException\n+       116: new           #390                // class java/io/IOException\n        119: dup\n-       120: ldc           #183                // String Truncated ZIP file\n-       122: invokespecial #151                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       125: athrow\n-       126: aload_0\n-       127: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-       130: iload         6\n-       132: invokevirtual #33                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;\n-       135: pop\n-       136: aload_0\n-       137: iload         6\n-       139: invokevirtual #2                  // Method count:(I)V\n-       142: aload_0\n-       143: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       146: iload         6\n-       148: i2l\n-       149: invokestatic  #184                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$814:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n-       152: pop2\n-       153: aload_0\n-       154: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-       157: invokevirtual #185                // Method java/nio/ByteBuffer.remaining:()I\n-       160: iload_3\n-       161: invokestatic  #186                // Method java/lang/Math.min:(II)I\n-       164: istore        6\n-       166: lload         4\n-       168: aload_0\n-       169: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       172: invokestatic  #169                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n-       175: lsub\n-       176: iload         6\n-       178: i2l\n-       179: lcmp\n-       180: ifge          196\n-       183: lload         4\n-       185: aload_0\n-       186: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       189: invokestatic  #169                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n-       192: lsub\n-       193: l2i\n-       194: istore        6\n-       196: aload_0\n-       197: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-       200: aload_1\n-       201: iload_2\n-       202: iload         6\n-       204: invokevirtual #187                // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n-       207: pop\n-       208: aload_0\n-       209: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       212: iload         6\n-       214: i2l\n-       215: invokestatic  #188                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$614:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n-       218: pop2\n-       219: iload         6\n-       221: ireturn\n+       120: ldc_w         #585                // String Truncated ZIP file\n+       123: invokespecial #486                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       126: athrow\n+       127: aload_0\n+       128: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+       131: iload         6\n+       133: invokevirtual #107                // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;\n+       136: pop\n+       137: aload_0\n+       138: iload         6\n+       140: invokevirtual #3                  // Method count:(I)V\n+       143: aload_0\n+       144: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       147: iload         6\n+       149: i2l\n+       150: invokestatic  #587                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$814:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n+       153: pop2\n+       154: aload_0\n+       155: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+       158: invokevirtual #591                // Method java/nio/ByteBuffer.remaining:()I\n+       161: iload_3\n+       162: invokestatic  #594                // Method java/lang/Math.min:(II)I\n+       165: istore        6\n+       167: lload         4\n+       169: aload_0\n+       170: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       173: invokestatic  #544                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+       176: lsub\n+       177: iload         6\n+       179: i2l\n+       180: lcmp\n+       181: ifge          197\n+       184: lload         4\n+       186: aload_0\n+       187: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       190: invokestatic  #544                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+       193: lsub\n+       194: l2i\n+       195: istore        6\n+       197: aload_0\n+       198: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+       201: aload_1\n+       202: iload_2\n+       203: iload         6\n+       205: invokevirtual #600                // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;\n+       208: pop\n+       209: aload_0\n+       210: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       213: iload         6\n+       215: i2l\n+       216: invokestatic  #604                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$614:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n+       219: pop2\n+       220: iload         6\n+       222: ireturn\n       LineNumberTable:\n         line 582: 0\n         line 583: 10\n         line 584: 17\n         line 586: 21\n         line 589: 32\n         line 590: 44\n         line 591: 57\n         line 594: 59\n         line 595: 76\n         line 596: 85\n         line 597: 101\n         line 598: 107\n         line 599: 116\n-        line 601: 126\n-        line 603: 136\n-        line 604: 142\n-        line 607: 153\n-        line 608: 166\n-        line 610: 183\n-        line 612: 196\n-        line 613: 208\n-        line 614: 219\n+        line 601: 127\n+        line 603: 137\n+        line 604: 143\n+        line 607: 154\n+        line 608: 167\n+        line 610: 184\n+        line 612: 197\n+        line 613: 209\n+        line 614: 220\n       StackMapTable: number_of_entries = 6\n         frame_type = 21 /* same */\n         frame_type = 10 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 26\n           locals = [ long ]\n         frame_type = 252 /* append */\n-          offset_delta = 66\n+          offset_delta = 67\n           locals = [ int ]\n         frame_type = 250 /* chop */\n           offset_delta = 26\n         frame_type = 252 /* append */\n           offset_delta = 42\n           locals = [ int ]\n     Exceptions:\n@@ -2472,115 +2472,115 @@\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=5, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iload_3\n-         4: invokespecial #189                // Method readFromInflater:([BII)I\n+         4: invokespecial #607                // Method readFromInflater:([BII)I\n          7: istore        4\n          9: iload         4\n-        11: ifgt          62\n+        11: ifgt          64\n         14: aload_0\n-        15: getfield      #13                 // Field inf:Ljava/util/zip/Inflater;\n-        18: invokevirtual #190                // Method java/util/zip/Inflater.finished:()Z\n+        15: getfield      #40                 // Field inf:Ljava/util/zip/Inflater;\n+        18: invokevirtual #610                // Method java/util/zip/Inflater.finished:()Z\n         21: ifeq          26\n         24: iconst_m1\n         25: ireturn\n         26: aload_0\n-        27: getfield      #13                 // Field inf:Ljava/util/zip/Inflater;\n-        30: invokevirtual #191                // Method java/util/zip/Inflater.needsDictionary:()Z\n-        33: ifeq          46\n-        36: new           #50                 // class java/util/zip/ZipException\n+        27: getfield      #40                 // Field inf:Ljava/util/zip/Inflater;\n+        30: invokevirtual #613                // Method java/util/zip/Inflater.needsDictionary:()Z\n+        33: ifeq          47\n+        36: new           #162                // class java/util/zip/ZipException\n         39: dup\n-        40: ldc           #192                // String This archive needs a preset dictionary which is not supported by Commons Compress.\n-        42: invokespecial #56                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-        45: athrow\n-        46: iload         4\n-        48: iconst_m1\n-        49: if_icmpne     62\n-        52: new           #117                // class java/io/IOException\n-        55: dup\n-        56: ldc           #183                // String Truncated ZIP file\n-        58: invokespecial #151                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        61: athrow\n-        62: iload         4\n-        64: ireturn\n+        40: ldc_w         #616                // String This archive needs a preset dictionary which is not supported by Commons Compress.\n+        43: invokespecial #183                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        46: athrow\n+        47: iload         4\n+        49: iconst_m1\n+        50: if_icmpne     64\n+        53: new           #390                // class java/io/IOException\n+        56: dup\n+        57: ldc_w         #585                // String Truncated ZIP file\n+        60: invokespecial #486                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        63: athrow\n+        64: iload         4\n+        66: ireturn\n       LineNumberTable:\n         line 621: 0\n         line 622: 9\n         line 623: 14\n         line 624: 24\n         line 626: 26\n         line 627: 36\n-        line 631: 46\n-        line 632: 52\n-        line 635: 62\n+        line 631: 47\n+        line 632: 53\n+        line 635: 64\n       StackMapTable: number_of_entries = 3\n         frame_type = 252 /* append */\n           offset_delta = 26\n           locals = [ int ]\n-        frame_type = 19 /* same */\n-        frame_type = 15 /* same */\n+        frame_type = 20 /* same */\n+        frame_type = 16 /* same */\n     Exceptions:\n       throws java.io.IOException\n \n   private int readFromInflater(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=6, args_size=4\n          0: iconst_0\n          1: istore        4\n          3: aload_0\n-         4: getfield      #13                 // Field inf:Ljava/util/zip/Inflater;\n-         7: invokevirtual #193                // Method java/util/zip/Inflater.needsInput:()Z\n+         4: getfield      #40                 // Field inf:Ljava/util/zip/Inflater;\n+         7: invokevirtual #618                // Method java/util/zip/Inflater.needsInput:()Z\n         10: ifeq          51\n         13: aload_0\n-        14: invokespecial #194                // Method fill:()I\n+        14: invokespecial #621                // Method fill:()I\n         17: istore        5\n         19: iload         5\n         21: ifle          43\n         24: aload_0\n-        25: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        25: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n         28: aload_0\n-        29: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        32: invokevirtual #179                // Method java/nio/ByteBuffer.limit:()I\n+        29: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        32: invokevirtual #574                // Method java/nio/ByteBuffer.limit:()I\n         35: i2l\n-        36: invokestatic  #184                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$814:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n+        36: invokestatic  #587                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$814:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n         39: pop2\n         40: goto          51\n         43: iload         5\n         45: iconst_m1\n         46: if_icmpne     104\n         49: iconst_m1\n         50: ireturn\n         51: aload_0\n-        52: getfield      #13                 // Field inf:Ljava/util/zip/Inflater;\n+        52: getfield      #40                 // Field inf:Ljava/util/zip/Inflater;\n         55: aload_1\n         56: iload_2\n         57: iload_3\n-        58: invokevirtual #195                // Method java/util/zip/Inflater.inflate:([BII)I\n+        58: invokevirtual #624                // Method java/util/zip/Inflater.inflate:([BII)I\n         61: istore        4\n         63: goto          89\n         66: astore        5\n-        68: new           #50                 // class java/util/zip/ZipException\n+        68: new           #162                // class java/util/zip/ZipException\n         71: dup\n         72: aload         5\n-        74: invokevirtual #197                // Method java/util/zip/DataFormatException.getMessage:()Ljava/lang/String;\n-        77: invokespecial #56                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        74: invokevirtual #629                // Method java/util/zip/DataFormatException.getMessage:()Ljava/lang/String;\n+        77: invokespecial #183                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n         80: aload         5\n-        82: invokevirtual #89                 // Method java/util/zip/ZipException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n-        85: checkcast     #117                // class java/io/IOException\n+        82: invokevirtual #302                // Method java/util/zip/ZipException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;\n+        85: checkcast     #390                // class java/io/IOException\n         88: athrow\n         89: iload         4\n         91: ifne          104\n         94: aload_0\n-        95: getfield      #13                 // Field inf:Ljava/util/zip/Inflater;\n-        98: invokevirtual #193                // Method java/util/zip/Inflater.needsInput:()Z\n+        95: getfield      #40                 // Field inf:Ljava/util/zip/Inflater;\n+        98: invokevirtual #618                // Method java/util/zip/Inflater.needsInput:()Z\n        101: ifne          3\n        104: iload         4\n        106: ireturn\n       Exception table:\n          from    to  target type\n             51    63    66   Class java/util/zip/DataFormatException\n       LineNumberTable:\n@@ -2615,30 +2615,30 @@\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #35                 // Field closed:Z\n+         1: getfield      #115                // Field closed:Z\n          4: ifne          39\n          7: aload_0\n          8: iconst_1\n-         9: putfield      #35                 // Field closed:Z\n+         9: putfield      #115                // Field closed:Z\n         12: aload_0\n-        13: getfield      #30                 // Field inputStream:Ljava/io/InputStream;\n-        16: invokevirtual #198                // Method java/io/InputStream.close:()V\n+        13: getfield      #97                 // Field inputStream:Ljava/io/InputStream;\n+        16: invokevirtual #632                // Method java/io/InputStream.close:()V\n         19: aload_0\n-        20: getfield      #13                 // Field inf:Ljava/util/zip/Inflater;\n-        23: invokevirtual #199                // Method java/util/zip/Inflater.end:()V\n+        20: getfield      #40                 // Field inf:Ljava/util/zip/Inflater;\n+        23: invokevirtual #635                // Method java/util/zip/Inflater.end:()V\n         26: goto          39\n         29: astore_1\n         30: aload_0\n-        31: getfield      #13                 // Field inf:Ljava/util/zip/Inflater;\n-        34: invokevirtual #199                // Method java/util/zip/Inflater.end:()V\n+        31: getfield      #40                 // Field inf:Ljava/util/zip/Inflater;\n+        34: invokevirtual #635                // Method java/util/zip/Inflater.end:()V\n         37: aload_1\n         38: athrow\n         39: return\n       Exception table:\n          from    to  target type\n             12    19    29   any\n       LineNumberTable:\n@@ -2674,48 +2674,48 @@\n         11: ifge          71\n         14: lload_1\n         15: lload_3\n         16: lsub\n         17: lstore        5\n         19: aload_0\n         20: aload_0\n-        21: getfield      #19                 // Field skipBuf:[B\n+        21: getfield      #60                 // Field skipBuf:[B\n         24: iconst_0\n         25: aload_0\n-        26: getfield      #19                 // Field skipBuf:[B\n+        26: getfield      #60                 // Field skipBuf:[B\n         29: arraylength\n         30: i2l\n         31: lload         5\n         33: lcmp\n         34: ifle          42\n         37: lload         5\n         39: goto          48\n         42: aload_0\n-        43: getfield      #19                 // Field skipBuf:[B\n+        43: getfield      #60                 // Field skipBuf:[B\n         46: arraylength\n         47: i2l\n         48: l2i\n-        49: invokevirtual #200                // Method read:([BII)I\n+        49: invokevirtual #638                // Method read:([BII)I\n         52: istore        7\n         54: iload         7\n         56: iconst_m1\n         57: if_icmpne     62\n         60: lload_3\n         61: lreturn\n         62: lload_3\n         63: iload         7\n         65: i2l\n         66: ladd\n         67: lstore_3\n         68: goto          8\n         71: lload_3\n         72: lreturn\n-        73: new           #116                // class java/lang/IllegalArgumentException\n+        73: new           #388                // class java/lang/IllegalArgumentException\n         76: dup\n-        77: invokespecial #201                // Method java/lang/IllegalArgumentException.\"<init>\":()V\n+        77: invokespecial #639                // Method java/lang/IllegalArgumentException.\"<init>\":()V\n         80: athrow\n       LineNumberTable:\n         line 693: 0\n         line 694: 6\n         line 695: 8\n         line 696: 14\n         line 697: 19\n@@ -2749,35 +2749,35 @@\n \n   public static boolean matches(byte[], int);\n     descriptor: ([BI)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: iload_1\n-         1: getstatic     #202                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n+         1: getstatic     #640                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n          4: arraylength\n          5: if_icmpge     10\n          8: iconst_0\n          9: ireturn\n         10: aload_0\n-        11: getstatic     #202                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n-        14: invokestatic  #203                // Method checksig:([B[B)Z\n+        11: getstatic     #640                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B\n+        14: invokestatic  #642                // Method checksig:([B[B)Z\n         17: ifne          53\n         20: aload_0\n-        21: getstatic     #204                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n-        24: invokestatic  #203                // Method checksig:([B[B)Z\n+        21: getstatic     #646                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n+        24: invokestatic  #642                // Method checksig:([B[B)Z\n         27: ifne          53\n         30: aload_0\n-        31: getstatic     #205                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n-        34: invokestatic  #203                // Method checksig:([B[B)Z\n+        31: getstatic     #649                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.DD_SIG:[B\n+        34: invokestatic  #642                // Method checksig:([B[B)Z\n         37: ifne          53\n         40: aload_0\n-        41: getstatic     #130                // Field org/apache/commons/compress/archivers/zip/ZipLong.SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-        44: invokevirtual #206                // Method org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n-        47: invokestatic  #203                // Method checksig:([B[B)Z\n+        41: getstatic     #424                // Field org/apache/commons/compress/archivers/zip/ZipLong.SINGLE_SEGMENT_SPLIT_MARKER:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        44: invokevirtual #651                // Method org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n+        47: invokestatic  #642                // Method checksig:([B[B)Z\n         50: ifeq          57\n         53: iconst_1\n         54: goto          58\n         57: iconst_0\n         58: ireturn\n       LineNumberTable:\n         line 718: 0\n@@ -2834,128 +2834,128 @@\n \n   private void closeEntry() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=4, args_size=1\n          0: aload_0\n-         1: getfield      #35                 // Field closed:Z\n-         4: ifeq          17\n-         7: new           #117                // class java/io/IOException\n+         1: getfield      #115                // Field closed:Z\n+         4: ifeq          18\n+         7: new           #390                // class java/io/IOException\n         10: dup\n-        11: ldc           #150                // String The stream is closed\n-        13: invokespecial #151                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        16: athrow\n-        17: aload_0\n-        18: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        21: ifnonnull     25\n-        24: return\n-        25: aload_0\n-        26: invokespecial #207                // Method currentEntryHasOutstandingBytes:()Z\n-        29: ifeq          39\n-        32: aload_0\n-        33: invokespecial #208                // Method drainCurrentEntryData:()V\n-        36: goto          134\n-        39: aload_0\n-        40: ldc2_w        #210                // long 9223372036854775807l\n-        43: invokevirtual #212                // Method skip:(J)J\n-        46: pop2\n-        47: aload_0\n-        48: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        51: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-        54: invokevirtual #95                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-        57: bipush        8\n-        59: if_icmpne     69\n-        62: aload_0\n-        63: invokespecial #170                // Method getBytesInflated:()J\n-        66: goto          76\n-        69: aload_0\n-        70: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        73: invokestatic  #169                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n-        76: lstore_1\n-        77: aload_0\n-        78: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        81: invokestatic  #213                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n-        84: lload_1\n-        85: lsub\n-        86: l2i\n-        87: istore_3\n-        88: iload_3\n-        89: ifle          123\n-        92: aload_0\n+        11: ldc_w         #484                // String The stream is closed\n+        14: invokespecial #486                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        17: athrow\n+        18: aload_0\n+        19: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        22: ifnonnull     26\n+        25: return\n+        26: aload_0\n+        27: invokespecial #654                // Method currentEntryHasOutstandingBytes:()Z\n+        30: ifeq          40\n+        33: aload_0\n+        34: invokespecial #657                // Method drainCurrentEntryData:()V\n+        37: goto          135\n+        40: aload_0\n+        41: ldc2_w        #660                // long 9223372036854775807l\n+        44: invokevirtual #662                // Method skip:(J)J\n+        47: pop2\n+        48: aload_0\n+        49: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        52: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+        55: invokevirtual #323                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        58: bipush        8\n+        60: if_icmpne     70\n+        63: aload_0\n+        64: invokespecial #548                // Method getBytesInflated:()J\n+        67: goto          77\n+        70: aload_0\n+        71: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        74: invokestatic  #544                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$600:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+        77: lstore_1\n+        78: aload_0\n+        79: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        82: invokestatic  #665                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+        85: lload_1\n+        86: lsub\n+        87: l2i\n+        88: istore_3\n+        89: iload_3\n+        90: ifle          124\n         93: aload_0\n-        94: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        97: invokevirtual #181                // Method java/nio/ByteBuffer.array:()[B\n-       100: aload_0\n-       101: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-       104: invokevirtual #179                // Method java/nio/ByteBuffer.limit:()I\n-       107: iload_3\n-       108: isub\n-       109: iload_3\n-       110: invokespecial #214                // Method pushback:([BII)V\n-       113: aload_0\n-       114: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       117: iload_3\n-       118: i2l\n-       119: invokestatic  #215                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$822:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n-       122: pop2\n-       123: aload_0\n-       124: invokespecial #207                // Method currentEntryHasOutstandingBytes:()Z\n-       127: ifeq          134\n-       130: aload_0\n-       131: invokespecial #208                // Method drainCurrentEntryData:()V\n-       134: aload_0\n-       135: getfield      #174                // Field lastStoredEntry:Ljava/io/ByteArrayInputStream;\n-       138: ifnonnull     155\n-       141: aload_0\n-       142: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       145: invokestatic  #73                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n-       148: ifeq          155\n-       151: aload_0\n-       152: invokespecial #216                // Method readDataDescriptor:()V\n-       155: aload_0\n-       156: getfield      #13                 // Field inf:Ljava/util/zip/Inflater;\n-       159: invokevirtual #217                // Method java/util/zip/Inflater.reset:()V\n-       162: aload_0\n-       163: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-       166: invokevirtual #218                // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;\n-       169: invokevirtual #219                // Method java/nio/Buffer.flip:()Ljava/nio/Buffer;\n-       172: pop\n-       173: aload_0\n-       174: aconst_null\n-       175: putfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       178: aload_0\n-       179: aconst_null\n-       180: putfield      #174                // Field lastStoredEntry:Ljava/io/ByteArrayInputStream;\n-       183: return\n+        94: aload_0\n+        95: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        98: invokevirtual #578                // Method java/nio/ByteBuffer.array:()[B\n+       101: aload_0\n+       102: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+       105: invokevirtual #574                // Method java/nio/ByteBuffer.limit:()I\n+       108: iload_3\n+       109: isub\n+       110: iload_3\n+       111: invokespecial #668                // Method pushback:([BII)V\n+       114: aload_0\n+       115: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       118: iload_3\n+       119: i2l\n+       120: invokestatic  #671                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$822:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;J)J\n+       123: pop2\n+       124: aload_0\n+       125: invokespecial #654                // Method currentEntryHasOutstandingBytes:()Z\n+       128: ifeq          135\n+       131: aload_0\n+       132: invokespecial #657                // Method drainCurrentEntryData:()V\n+       135: aload_0\n+       136: getfield      #559                // Field lastStoredEntry:Ljava/io/ByteArrayInputStream;\n+       139: ifnonnull     156\n+       142: aload_0\n+       143: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       146: invokestatic  #247                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n+       149: ifeq          156\n+       152: aload_0\n+       153: invokespecial #674                // Method readDataDescriptor:()V\n+       156: aload_0\n+       157: getfield      #40                 // Field inf:Ljava/util/zip/Inflater;\n+       160: invokevirtual #677                // Method java/util/zip/Inflater.reset:()V\n+       163: aload_0\n+       164: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+       167: invokevirtual #680                // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;\n+       170: invokevirtual #684                // Method java/nio/Buffer.flip:()Ljava/nio/Buffer;\n+       173: pop\n+       174: aload_0\n+       175: aconst_null\n+       176: putfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       179: aload_0\n+       180: aconst_null\n+       181: putfield      #559                // Field lastStoredEntry:Ljava/io/ByteArrayInputStream;\n+       184: return\n       LineNumberTable:\n         line 756: 0\n         line 757: 7\n-        line 759: 17\n-        line 760: 24\n-        line 764: 25\n-        line 765: 32\n-        line 768: 39\n-        line 770: 47\n-        line 771: 62\n-        line 775: 77\n-        line 778: 88\n-        line 779: 92\n-        line 780: 113\n-        line 784: 123\n-        line 785: 130\n-        line 789: 134\n-        line 790: 151\n-        line 793: 155\n-        line 794: 162\n-        line 795: 173\n-        line 796: 178\n-        line 797: 183\n+        line 759: 18\n+        line 760: 25\n+        line 764: 26\n+        line 765: 33\n+        line 768: 40\n+        line 770: 48\n+        line 771: 63\n+        line 775: 78\n+        line 778: 89\n+        line 779: 93\n+        line 780: 114\n+        line 784: 124\n+        line 785: 131\n+        line 789: 135\n+        line 790: 152\n+        line 793: 156\n+        line 794: 163\n+        line 795: 174\n+        line 796: 179\n+        line 797: 184\n       StackMapTable: number_of_entries = 8\n-        frame_type = 17 /* same */\n+        frame_type = 18 /* same */\n         frame_type = 7 /* same */\n         frame_type = 13 /* same */\n         frame_type = 29 /* same */\n         frame_type = 70 /* same_locals_1_stack_item */\n           stack = [ long ]\n         frame_type = 253 /* append */\n           offset_delta = 46\n@@ -2968,25 +2968,25 @@\n \n   private boolean currentEntryHasOutstandingBytes();\n     descriptor: ()Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-         4: invokestatic  #213                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+         1: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+         4: invokestatic  #665                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n          7: aload_0\n-         8: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        11: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-        14: invokevirtual #97                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+         8: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        11: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+        14: invokevirtual #332                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n         17: lcmp\n         18: ifgt          35\n         21: aload_0\n-        22: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        25: invokestatic  #73                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n+        22: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        25: invokestatic  #247                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n         28: ifne          35\n         31: iconst_1\n         32: goto          36\n         35: iconst_0\n         36: ireturn\n       LineNumberTable:\n         line 807: 0\n@@ -2999,119 +2999,119 @@\n \n   private void drainCurrentEntryData() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=7, locals=5, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-         4: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-         7: invokevirtual #97                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+         1: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+         4: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+         7: invokevirtual #332                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n         10: aload_0\n-        11: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        14: invokestatic  #213                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+        11: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        14: invokestatic  #665                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n         17: lsub\n         18: lstore_1\n         19: lload_1\n         20: lconst_0\n         21: lcmp\n-        22: ifle          112\n+        22: ifle          113\n         25: aload_0\n-        26: getfield      #30                 // Field inputStream:Ljava/io/InputStream;\n+        26: getfield      #97                 // Field inputStream:Ljava/io/InputStream;\n         29: aload_0\n-        30: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        33: invokevirtual #181                // Method java/nio/ByteBuffer.array:()[B\n+        30: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        33: invokevirtual #578                // Method java/nio/ByteBuffer.array:()[B\n         36: iconst_0\n         37: aload_0\n-        38: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        41: invokevirtual #28                 // Method java/nio/ByteBuffer.capacity:()I\n+        38: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        41: invokevirtual #90                 // Method java/nio/ByteBuffer.capacity:()I\n         44: i2l\n         45: lload_1\n-        46: invokestatic  #220                // Method java/lang/Math.min:(JJ)J\n+        46: invokestatic  #689                // Method java/lang/Math.min:(JJ)J\n         49: l2i\n-        50: invokevirtual #165                // Method java/io/InputStream.read:([BII)I\n+        50: invokevirtual #526                // Method java/io/InputStream.read:([BII)I\n         53: i2l\n         54: lstore_3\n         55: lload_3\n         56: lconst_0\n         57: lcmp\n-        58: ifge          100\n-        61: new           #41                 // class java/io/EOFException\n+        58: ifge          101\n+        61: new           #135                // class java/io/EOFException\n         64: dup\n-        65: new           #83                 // class java/lang/StringBuilder\n+        65: new           #286                // class java/lang/StringBuilder\n         68: dup\n-        69: invokespecial #84                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        72: ldc           #221                // String Truncated ZIP entry:\n-        74: invokevirtual #86                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        77: aload_0\n-        78: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        81: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-        84: invokevirtual #87                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n-        87: invokestatic  #222                // Method org/apache/commons/compress/utils/ArchiveUtils.sanitize:(Ljava/lang/String;)Ljava/lang/String;\n-        90: invokevirtual #86                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        93: invokevirtual #88                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        96: invokespecial #223                // Method java/io/EOFException.\"<init>\":(Ljava/lang/String;)V\n-        99: athrow\n-       100: aload_0\n-       101: lload_3\n-       102: invokevirtual #224                // Method count:(J)V\n-       105: lload_1\n-       106: lload_3\n-       107: lsub\n-       108: lstore_1\n-       109: goto          19\n-       112: return\n+        69: invokespecial #288                // Method java/lang/StringBuilder.\"<init>\":()V\n+        72: ldc_w         #692                // String Truncated ZIP entry:\n+        75: invokevirtual #291                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        78: aload_0\n+        79: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        82: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+        85: invokevirtual #295                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;\n+        88: invokestatic  #694                // Method org/apache/commons/compress/utils/ArchiveUtils.sanitize:(Ljava/lang/String;)Ljava/lang/String;\n+        91: invokevirtual #291                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        94: invokevirtual #299                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        97: invokespecial #700                // Method java/io/EOFException.\"<init>\":(Ljava/lang/String;)V\n+       100: athrow\n+       101: aload_0\n+       102: lload_3\n+       103: invokevirtual #701                // Method count:(J)V\n+       106: lload_1\n+       107: lload_3\n+       108: lsub\n+       109: lstore_1\n+       110: goto          19\n+       113: return\n       LineNumberTable:\n         line 816: 0\n         line 817: 19\n         line 818: 25\n         line 819: 55\n         line 820: 61\n-        line 821: 81\n-        line 823: 100\n-        line 824: 105\n-        line 825: 109\n-        line 826: 112\n+        line 821: 82\n+        line 823: 101\n+        line 824: 106\n+        line 825: 110\n+        line 826: 113\n       StackMapTable: number_of_entries = 3\n         frame_type = 252 /* append */\n           offset_delta = 19\n           locals = [ long ]\n         frame_type = 252 /* append */\n-          offset_delta = 80\n+          offset_delta = 81\n           locals = [ long ]\n         frame_type = 250 /* chop */\n           offset_delta = 11\n     Exceptions:\n       throws java.io.IOException\n \n   private long getBytesInflated();\n     descriptor: ()J\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=3, args_size=1\n          0: aload_0\n-         1: getfield      #13                 // Field inf:Ljava/util/zip/Inflater;\n-         4: invokevirtual #225                // Method java/util/zip/Inflater.getBytesRead:()J\n+         1: getfield      #40                 // Field inf:Ljava/util/zip/Inflater;\n+         4: invokevirtual #703                // Method java/util/zip/Inflater.getBytesRead:()J\n          7: lstore_1\n          8: aload_0\n-         9: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        12: invokestatic  #213                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n-        15: ldc2_w        #226                // long 4294967296l\n+         9: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        12: invokestatic  #665                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+        15: ldc2_w        #704                // long 4294967296l\n         18: lcmp\n         19: iflt          47\n         22: lload_1\n-        23: ldc2_w        #226                // long 4294967296l\n+        23: ldc2_w        #704                // long 4294967296l\n         26: ladd\n         27: aload_0\n-        28: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        31: invokestatic  #213                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n+        28: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        31: invokestatic  #665                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$800:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)J\n         34: lcmp\n         35: ifgt          47\n         38: lload_1\n-        39: ldc2_w        #226                // long 4294967296l\n+        39: ldc2_w        #704                // long 4294967296l\n         42: ladd\n         43: lstore_1\n         44: goto          22\n         47: lload_1\n         48: lreturn\n       LineNumberTable:\n         line 844: 0\n@@ -3127,78 +3127,78 @@\n \n   private int fill() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #35                 // Field closed:Z\n-         4: ifeq          17\n-         7: new           #117                // class java/io/IOException\n+         1: getfield      #115                // Field closed:Z\n+         4: ifeq          18\n+         7: new           #390                // class java/io/IOException\n         10: dup\n-        11: ldc           #150                // String The stream is closed\n-        13: invokespecial #151                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        16: athrow\n-        17: aload_0\n-        18: getfield      #30                 // Field inputStream:Ljava/io/InputStream;\n-        21: aload_0\n-        22: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        25: invokevirtual #181                // Method java/nio/ByteBuffer.array:()[B\n-        28: invokevirtual #182                // Method java/io/InputStream.read:([B)I\n-        31: istore_1\n-        32: iload_1\n-        33: ifle          78\n-        36: aload_0\n-        37: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        40: iload_1\n-        41: invokevirtual #33                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;\n-        44: pop\n-        45: aload_0\n+        11: ldc_w         #484                // String The stream is closed\n+        14: invokespecial #486                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        17: athrow\n+        18: aload_0\n+        19: getfield      #97                 // Field inputStream:Ljava/io/InputStream;\n+        22: aload_0\n+        23: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        26: invokevirtual #578                // Method java/nio/ByteBuffer.array:()[B\n+        29: invokevirtual #582                // Method java/io/InputStream.read:([B)I\n+        32: istore_1\n+        33: iload_1\n+        34: ifle          79\n+        37: aload_0\n+        38: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        41: iload_1\n+        42: invokevirtual #107                // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;\n+        45: pop\n         46: aload_0\n-        47: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        50: invokevirtual #179                // Method java/nio/ByteBuffer.limit:()I\n-        53: invokevirtual #2                  // Method count:(I)V\n-        56: aload_0\n-        57: getfield      #13                 // Field inf:Ljava/util/zip/Inflater;\n-        60: aload_0\n-        61: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        64: invokevirtual #181                // Method java/nio/ByteBuffer.array:()[B\n-        67: iconst_0\n-        68: aload_0\n-        69: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        72: invokevirtual #179                // Method java/nio/ByteBuffer.limit:()I\n-        75: invokevirtual #228                // Method java/util/zip/Inflater.setInput:([BII)V\n-        78: iload_1\n-        79: ireturn\n+        47: aload_0\n+        48: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        51: invokevirtual #574                // Method java/nio/ByteBuffer.limit:()I\n+        54: invokevirtual #3                  // Method count:(I)V\n+        57: aload_0\n+        58: getfield      #40                 // Field inf:Ljava/util/zip/Inflater;\n+        61: aload_0\n+        62: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        65: invokevirtual #578                // Method java/nio/ByteBuffer.array:()[B\n+        68: iconst_0\n+        69: aload_0\n+        70: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        73: invokevirtual #574                // Method java/nio/ByteBuffer.limit:()I\n+        76: invokevirtual #706                // Method java/util/zip/Inflater.setInput:([BII)V\n+        79: iload_1\n+        80: ireturn\n       LineNumberTable:\n         line 854: 0\n         line 855: 7\n-        line 857: 17\n-        line 858: 32\n-        line 859: 36\n-        line 860: 45\n-        line 861: 56\n-        line 863: 78\n+        line 857: 18\n+        line 858: 33\n+        line 859: 37\n+        line 860: 46\n+        line 861: 57\n+        line 863: 79\n       StackMapTable: number_of_entries = 2\n-        frame_type = 17 /* same */\n+        frame_type = 18 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 60\n           locals = [ int ]\n     Exceptions:\n       throws java.io.IOException\n \n   private void readFully(byte[]) throws java.io.IOException;\n     descriptor: ([B)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n-         3: invokespecial #229                // Method readFully:([BI)V\n+         3: invokespecial #709                // Method readFully:([BI)V\n          6: return\n       LineNumberTable:\n         line 867: 0\n         line 868: 6\n     Exceptions:\n       throws java.io.IOException\n \n@@ -3209,29 +3209,29 @@\n       stack=4, locals=5, args_size=3\n          0: aload_1\n          1: arraylength\n          2: iload_2\n          3: isub\n          4: istore_3\n          5: aload_0\n-         6: getfield      #30                 // Field inputStream:Ljava/io/InputStream;\n+         6: getfield      #97                 // Field inputStream:Ljava/io/InputStream;\n          9: aload_1\n         10: iload_2\n         11: iload_3\n-        12: invokestatic  #230                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[BII)I\n+        12: invokestatic  #711                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[BII)I\n         15: istore        4\n         17: aload_0\n         18: iload         4\n-        20: invokevirtual #2                  // Method count:(I)V\n+        20: invokevirtual #3                  // Method count:(I)V\n         23: iload         4\n         25: iload_3\n         26: if_icmpge     37\n-        29: new           #41                 // class java/io/EOFException\n+        29: new           #135                // class java/io/EOFException\n         32: dup\n-        33: invokespecial #231                // Method java/io/EOFException.\"<init>\":()V\n+        33: invokespecial #716                // Method java/io/EOFException.\"<init>\":()V\n         36: athrow\n         37: return\n       LineNumberTable:\n         line 871: 0\n         line 872: 5\n         line 873: 17\n         line 874: 23\n@@ -3246,29 +3246,29 @@\n \n   private byte[] readRange(int) throws java.io.IOException;\n     descriptor: (I)[B\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=3, args_size=2\n          0: aload_0\n-         1: getfield      #30                 // Field inputStream:Ljava/io/InputStream;\n+         1: getfield      #97                 // Field inputStream:Ljava/io/InputStream;\n          4: iload_1\n-         5: invokestatic  #232                // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n+         5: invokestatic  #717                // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/io/InputStream;I)[B\n          8: astore_2\n          9: aload_0\n         10: aload_2\n         11: arraylength\n-        12: invokevirtual #2                  // Method count:(I)V\n+        12: invokevirtual #3                  // Method count:(I)V\n         15: aload_2\n         16: arraylength\n         17: iload_1\n         18: if_icmpge     29\n-        21: new           #41                 // class java/io/EOFException\n+        21: new           #135                // class java/io/EOFException\n         24: dup\n-        25: invokespecial #231                // Method java/io/EOFException.\"<init>\":()V\n+        25: invokespecial #716                // Method java/io/EOFException.\"<init>\":()V\n         28: athrow\n         29: aload_2\n         30: areturn\n       LineNumberTable:\n         line 880: 0\n         line 881: 9\n         line 882: 15\n@@ -3284,217 +3284,217 @@\n   private void readDataDescriptor() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=5, args_size=1\n          0: aload_0\n          1: aload_0\n-         2: getfield      #21                 // Field wordBuf:[B\n-         5: invokespecial #40                 // Method readFully:([B)V\n-         8: new           #42                 // class org/apache/commons/compress/archivers/zip/ZipLong\n+         2: getfield      #66                 // Field wordBuf:[B\n+         5: invokespecial #131                // Method readFully:([B)V\n+         8: new           #137                // class org/apache/commons/compress/archivers/zip/ZipLong\n         11: dup\n         12: aload_0\n-        13: getfield      #21                 // Field wordBuf:[B\n-        16: invokespecial #43                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n+        13: getfield      #66                 // Field wordBuf:[B\n+        16: invokespecial #139                // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n         19: astore_1\n-        20: getstatic     #126                // Field org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        20: getstatic     #410                // Field org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n         23: aload_1\n-        24: invokevirtual #45                 // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+        24: invokevirtual #145                // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n         27: ifeq          50\n         30: aload_0\n         31: aload_0\n-        32: getfield      #21                 // Field wordBuf:[B\n-        35: invokespecial #40                 // Method readFully:([B)V\n-        38: new           #42                 // class org/apache/commons/compress/archivers/zip/ZipLong\n+        32: getfield      #66                 // Field wordBuf:[B\n+        35: invokespecial #131                // Method readFully:([B)V\n+        38: new           #137                // class org/apache/commons/compress/archivers/zip/ZipLong\n         41: dup\n         42: aload_0\n-        43: getfield      #21                 // Field wordBuf:[B\n-        46: invokespecial #43                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n+        43: getfield      #66                 // Field wordBuf:[B\n+        46: invokespecial #139                // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n         49: astore_1\n         50: aload_0\n-        51: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        54: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+        51: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        54: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n         57: aload_1\n-        58: invokevirtual #53                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n-        61: invokevirtual #74                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCrc:(J)V\n+        58: invokevirtual #168                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+        61: invokevirtual #251                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCrc:(J)V\n         64: aload_0\n         65: aload_0\n-        66: getfield      #22                 // Field twoDwordBuf:[B\n-        69: invokespecial #40                 // Method readFully:([B)V\n-        72: new           #42                 // class org/apache/commons/compress/archivers/zip/ZipLong\n+        66: getfield      #69                 // Field twoDwordBuf:[B\n+        69: invokespecial #131                // Method readFully:([B)V\n+        72: new           #137                // class org/apache/commons/compress/archivers/zip/ZipLong\n         75: dup\n         76: aload_0\n-        77: getfield      #22                 // Field twoDwordBuf:[B\n+        77: getfield      #69                 // Field twoDwordBuf:[B\n         80: bipush        8\n-        82: invokespecial #75                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n+        82: invokespecial #254                // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n         85: astore_2\n         86: aload_2\n-        87: getstatic     #46                 // Field org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-        90: invokevirtual #45                 // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+        87: getstatic     #149                // Field org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        90: invokevirtual #145                // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n         93: ifne          106\n         96: aload_2\n-        97: getstatic     #44                 // Field org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-       100: invokevirtual #45                 // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n-       103: ifeq          192\n+        97: getstatic     #141                // Field org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+       100: invokevirtual #145                // Method org/apache/commons/compress/archivers/zip/ZipLong.equals:(Ljava/lang/Object;)Z\n+       103: ifeq          194\n        106: aload_0\n        107: aload_0\n-       108: getfield      #22                 // Field twoDwordBuf:[B\n+       108: getfield      #69                 // Field twoDwordBuf:[B\n        111: bipush        8\n        113: bipush        8\n-       115: invokespecial #214                // Method pushback:([BII)V\n+       115: invokespecial #668                // Method pushback:([BII)V\n        118: aload_0\n-       119: getfield      #22                 // Field twoDwordBuf:[B\n-       122: invokestatic  #233                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n+       119: getfield      #69                 // Field twoDwordBuf:[B\n+       122: invokestatic  #720                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J\n        125: lstore_3\n        126: lload_3\n        127: lconst_0\n        128: lcmp\n-       129: ifge          142\n-       132: new           #50                 // class java/util/zip/ZipException\n+       129: ifge          143\n+       132: new           #162                // class java/util/zip/ZipException\n        135: dup\n-       136: ldc           #142                // String broken archive, entry with negative compressed size\n-       138: invokespecial #56                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-       141: athrow\n-       142: aload_0\n-       143: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       146: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       149: lload_3\n-       150: invokevirtual #143                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n-       153: aload_0\n-       154: getfield      #22                 // Field twoDwordBuf:[B\n-       157: iconst_4\n-       158: invokestatic  #70                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n-       161: lstore_3\n-       162: lload_3\n-       163: lconst_0\n-       164: lcmp\n-       165: ifge          178\n-       168: new           #50                 // class java/util/zip/ZipException\n-       171: dup\n-       172: ldc           #144                // String broken archive, entry with negative size\n-       174: invokespecial #56                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-       177: athrow\n-       178: aload_0\n-       179: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       182: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       185: lload_3\n-       186: invokevirtual #145                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n-       189: goto          264\n-       192: aload_0\n-       193: getfield      #22                 // Field twoDwordBuf:[B\n-       196: invokestatic  #234                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n-       199: lstore_3\n-       200: lload_3\n-       201: lconst_0\n-       202: lcmp\n-       203: ifge          216\n-       206: new           #50                 // class java/util/zip/ZipException\n-       209: dup\n-       210: ldc           #142                // String broken archive, entry with negative compressed size\n-       212: invokespecial #56                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-       215: athrow\n-       216: aload_0\n-       217: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       220: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       223: lload_3\n-       224: invokevirtual #143                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n-       227: aload_0\n-       228: getfield      #22                 // Field twoDwordBuf:[B\n-       231: bipush        8\n-       233: invokestatic  #235                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([BI)J\n-       236: lstore_3\n-       237: lload_3\n-       238: lconst_0\n-       239: lcmp\n-       240: ifge          253\n-       243: new           #50                 // class java/util/zip/ZipException\n-       246: dup\n-       247: ldc           #144                // String broken archive, entry with negative size\n-       249: invokespecial #56                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-       252: athrow\n-       253: aload_0\n-       254: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       257: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       260: lload_3\n-       261: invokevirtual #145                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n-       264: return\n+       136: ldc_w         #464                // String broken archive, entry with negative compressed size\n+       139: invokespecial #183                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       142: athrow\n+       143: aload_0\n+       144: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       147: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       150: lload_3\n+       151: invokevirtual #466                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n+       154: aload_0\n+       155: getfield      #69                 // Field twoDwordBuf:[B\n+       158: iconst_4\n+       159: invokestatic  #234                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J\n+       162: lstore_3\n+       163: lload_3\n+       164: lconst_0\n+       165: lcmp\n+       166: ifge          180\n+       169: new           #162                // class java/util/zip/ZipException\n+       172: dup\n+       173: ldc_w         #469                // String broken archive, entry with negative size\n+       176: invokespecial #183                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       179: athrow\n+       180: aload_0\n+       181: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       184: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       187: lload_3\n+       188: invokevirtual #471                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n+       191: goto          268\n+       194: aload_0\n+       195: getfield      #69                 // Field twoDwordBuf:[B\n+       198: invokestatic  #723                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J\n+       201: lstore_3\n+       202: lload_3\n+       203: lconst_0\n+       204: lcmp\n+       205: ifge          219\n+       208: new           #162                // class java/util/zip/ZipException\n+       211: dup\n+       212: ldc_w         #464                // String broken archive, entry with negative compressed size\n+       215: invokespecial #183                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       218: athrow\n+       219: aload_0\n+       220: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       223: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       226: lload_3\n+       227: invokevirtual #466                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V\n+       230: aload_0\n+       231: getfield      #69                 // Field twoDwordBuf:[B\n+       234: bipush        8\n+       236: invokestatic  #725                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([BI)J\n+       239: lstore_3\n+       240: lload_3\n+       241: lconst_0\n+       242: lcmp\n+       243: ifge          257\n+       246: new           #162                // class java/util/zip/ZipException\n+       249: dup\n+       250: ldc_w         #469                // String broken archive, entry with negative size\n+       253: invokespecial #183                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       256: athrow\n+       257: aload_0\n+       258: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       261: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       264: lload_3\n+       265: invokevirtual #471                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V\n+       268: return\n       LineNumberTable:\n         line 889: 0\n         line 890: 8\n         line 891: 20\n         line 893: 30\n         line 894: 38\n         line 896: 50\n         line 909: 64\n         line 910: 72\n         line 911: 86\n         line 912: 106\n         line 913: 118\n         line 914: 126\n         line 915: 132\n-        line 917: 142\n-        line 918: 153\n-        line 919: 162\n-        line 920: 168\n-        line 922: 178\n-        line 923: 189\n-        line 924: 192\n-        line 925: 200\n-        line 926: 206\n-        line 928: 216\n-        line 929: 227\n-        line 930: 237\n-        line 931: 243\n-        line 933: 253\n-        line 935: 264\n+        line 917: 143\n+        line 918: 154\n+        line 919: 163\n+        line 920: 169\n+        line 922: 180\n+        line 923: 191\n+        line 924: 194\n+        line 925: 202\n+        line 926: 208\n+        line 928: 219\n+        line 929: 230\n+        line 930: 240\n+        line 931: 246\n+        line 933: 257\n+        line 935: 268\n       StackMapTable: number_of_entries = 8\n         frame_type = 252 /* append */\n           offset_delta = 50\n           locals = [ class org/apache/commons/compress/archivers/zip/ZipLong ]\n         frame_type = 252 /* append */\n           offset_delta = 55\n           locals = [ class org/apache/commons/compress/archivers/zip/ZipLong ]\n         frame_type = 252 /* append */\n-          offset_delta = 35\n+          offset_delta = 36\n           locals = [ long ]\n-        frame_type = 35 /* same */\n+        frame_type = 36 /* same */\n         frame_type = 250 /* chop */\n           offset_delta = 13\n         frame_type = 252 /* append */\n-          offset_delta = 23\n+          offset_delta = 24\n           locals = [ long ]\n-        frame_type = 36 /* same */\n+        frame_type = 37 /* same */\n         frame_type = 250 /* chop */\n           offset_delta = 10\n     Exceptions:\n       throws java.io.IOException\n \n   private boolean supportsDataDescriptorFor(org.apache.commons.compress.archivers.zip.ZipArchiveEntry);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n-         1: invokevirtual #112                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-         4: invokevirtual #66                 // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesDataDescriptor:()Z\n+         1: invokevirtual #375                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+         4: invokevirtual #220                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesDataDescriptor:()Z\n          7: ifeq          46\n         10: aload_0\n-        11: getfield      #31                 // Field allowStoredEntriesWithDataDescriptor:Z\n+        11: getfield      #101                // Field allowStoredEntriesWithDataDescriptor:Z\n         14: ifeq          24\n         17: aload_1\n-        18: invokevirtual #95                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        18: invokevirtual #323                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n         21: ifeq          46\n         24: aload_1\n-        25: invokevirtual #95                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        25: invokevirtual #323                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n         28: bipush        8\n         30: if_icmpeq     46\n         33: aload_1\n-        34: invokevirtual #95                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-        37: getstatic     #124                // Field org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-        40: invokevirtual #161                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+        34: invokevirtual #323                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        37: getstatic     #403                // Field org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+        40: invokevirtual #513                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n         43: if_icmpne     50\n         46: iconst_1\n         47: goto          51\n         50: iconst_0\n         51: ireturn\n       LineNumberTable:\n         line 945: 0\n@@ -3511,36 +3511,36 @@\n \n   private boolean supportsCompressedSizeFor(org.apache.commons.compress.archivers.zip.ZipArchiveEntry);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_1\n-         1: invokevirtual #97                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n-         4: ldc2_w        #99                 // long -1l\n+         1: invokevirtual #332                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+         4: ldc2_w        #337                // long -1l\n          7: lcmp\n          8: ifne          57\n         11: aload_1\n-        12: invokevirtual #95                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        12: invokevirtual #323                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n         15: bipush        8\n         17: if_icmpeq     57\n         20: aload_1\n-        21: invokevirtual #95                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-        24: getstatic     #124                // Field org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-        27: invokevirtual #161                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+        21: invokevirtual #323                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        24: getstatic     #403                // Field org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+        27: invokevirtual #513                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n         30: if_icmpeq     57\n         33: aload_1\n-        34: invokevirtual #112                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-        37: invokevirtual #66                 // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesDataDescriptor:()Z\n+        34: invokevirtual #375                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+        37: invokevirtual #220                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesDataDescriptor:()Z\n         40: ifeq          61\n         43: aload_0\n-        44: getfield      #31                 // Field allowStoredEntriesWithDataDescriptor:Z\n+        44: getfield      #101                // Field allowStoredEntriesWithDataDescriptor:Z\n         47: ifeq          61\n         50: aload_1\n-        51: invokevirtual #95                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        51: invokevirtual #323                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n         54: ifne          61\n         57: iconst_1\n         58: goto          62\n         61: iconst_0\n         62: ireturn\n       LineNumberTable:\n         line 956: 0\n@@ -3556,158 +3556,158 @@\n           stack = [ int ]\n \n   private void readStoredEntry() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=6, args_size=1\n-         0: new           #237                // class java/io/ByteArrayOutputStream\n+         0: new           #729                // class java/io/ByteArrayOutputStream\n          3: dup\n-         4: invokespecial #238                // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n+         4: invokespecial #731                // Method java/io/ByteArrayOutputStream.\"<init>\":()V\n          7: astore_1\n          8: iconst_0\n          9: istore_2\n         10: iconst_0\n         11: istore_3\n         12: aload_0\n-        13: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-        16: invokestatic  #239                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$400:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n+        13: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+        16: invokestatic  #732                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$400:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Z\n         19: ifeq          27\n         22: bipush        20\n         24: goto          29\n         27: bipush        12\n         29: istore        4\n         31: iload_3\n-        32: ifne          117\n+        32: ifne          118\n         35: aload_0\n-        36: getfield      #30                 // Field inputStream:Ljava/io/InputStream;\n+        36: getfield      #97                 // Field inputStream:Ljava/io/InputStream;\n         39: aload_0\n-        40: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        43: invokevirtual #181                // Method java/nio/ByteBuffer.array:()[B\n+        40: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        43: invokevirtual #578                // Method java/nio/ByteBuffer.array:()[B\n         46: iload_2\n         47: sipush        512\n         50: iload_2\n         51: isub\n-        52: invokevirtual #165                // Method java/io/InputStream.read:([BII)I\n+        52: invokevirtual #526                // Method java/io/InputStream.read:([BII)I\n         55: istore        5\n         57: iload         5\n-        59: ifgt          72\n-        62: new           #117                // class java/io/IOException\n+        59: ifgt          73\n+        62: new           #390                // class java/io/IOException\n         65: dup\n-        66: ldc           #183                // String Truncated ZIP file\n-        68: invokespecial #151                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        71: athrow\n-        72: iload         5\n-        74: iload_2\n-        75: iadd\n-        76: iconst_4\n-        77: if_icmpge     88\n-        80: iload_2\n-        81: iload         5\n-        83: iadd\n-        84: istore_2\n-        85: goto          31\n-        88: aload_0\n-        89: aload_1\n-        90: iload_2\n-        91: iload         5\n-        93: iload         4\n-        95: invokespecial #240                // Method bufferContainsSignature:(Ljava/io/ByteArrayOutputStream;III)Z\n-        98: istore_3\n-        99: iload_3\n-       100: ifne          114\n-       103: aload_0\n-       104: aload_1\n-       105: iload_2\n-       106: iload         5\n-       108: iload         4\n-       110: invokespecial #241                // Method cacheBytesRead:(Ljava/io/ByteArrayOutputStream;III)I\n-       113: istore_2\n-       114: goto          31\n-       117: aload_0\n-       118: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       121: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       124: invokevirtual #97                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n-       127: aload_0\n-       128: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       131: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       134: invokevirtual #177                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n-       137: lcmp\n-       138: ifeq          151\n-       141: new           #50                 // class java/util/zip/ZipException\n-       144: dup\n-       145: ldc           #242                // String compressed and uncompressed size don\\'t match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n-       147: invokespecial #56                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-       150: athrow\n-       151: aload_1\n-       152: invokevirtual #243                // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n-       155: astore        5\n-       157: aload         5\n-       159: arraylength\n-       160: i2l\n-       161: aload_0\n-       162: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n-       165: invokestatic  #60                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-       168: invokevirtual #177                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n-       171: lcmp\n-       172: ifeq          185\n-       175: new           #50                 // class java/util/zip/ZipException\n-       178: dup\n-       179: ldc           #244                // String actual and claimed size don\\'t match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n-       181: invokespecial #56                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-       184: athrow\n-       185: aload_0\n-       186: new           #245                // class java/io/ByteArrayInputStream\n-       189: dup\n-       190: aload         5\n-       192: invokespecial #246                // Method java/io/ByteArrayInputStream.\"<init>\":([B)V\n-       195: putfield      #174                // Field lastStoredEntry:Ljava/io/ByteArrayInputStream;\n-       198: return\n+        66: ldc_w         #585                // String Truncated ZIP file\n+        69: invokespecial #486                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        72: athrow\n+        73: iload         5\n+        75: iload_2\n+        76: iadd\n+        77: iconst_4\n+        78: if_icmpge     89\n+        81: iload_2\n+        82: iload         5\n+        84: iadd\n+        85: istore_2\n+        86: goto          31\n+        89: aload_0\n+        90: aload_1\n+        91: iload_2\n+        92: iload         5\n+        94: iload         4\n+        96: invokespecial #735                // Method bufferContainsSignature:(Ljava/io/ByteArrayOutputStream;III)Z\n+        99: istore_3\n+       100: iload_3\n+       101: ifne          115\n+       104: aload_0\n+       105: aload_1\n+       106: iload_2\n+       107: iload         5\n+       109: iload         4\n+       111: invokespecial #739                // Method cacheBytesRead:(Ljava/io/ByteArrayOutputStream;III)I\n+       114: istore_2\n+       115: goto          31\n+       118: aload_0\n+       119: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       122: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       125: invokevirtual #332                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J\n+       128: aload_0\n+       129: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       132: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       135: invokevirtual #569                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n+       138: lcmp\n+       139: ifeq          153\n+       142: new           #162                // class java/util/zip/ZipException\n+       145: dup\n+       146: ldc_w         #743                // String compressed and uncompressed size don\\'t match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n+       149: invokespecial #183                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       152: athrow\n+       153: aload_1\n+       154: invokevirtual #745                // Method java/io/ByteArrayOutputStream.toByteArray:()[B\n+       157: astore        5\n+       159: aload         5\n+       161: arraylength\n+       162: i2l\n+       163: aload_0\n+       164: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+       167: invokestatic  #196                // Method org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+       170: invokevirtual #569                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J\n+       173: lcmp\n+       174: ifeq          188\n+       177: new           #162                // class java/util/zip/ZipException\n+       180: dup\n+       181: ldc_w         #748                // String actual and claimed size don\\'t match while reading a stored entry using data descriptor. Either the archive is broken or it can not be read using ZipArchiveInputStream and you must use ZipFile. A common cause for this is a ZIP archive containing a ZIP archive. See http://commons.apache.org/proper/commons-compress/zip.html#ZipArchiveInputStream_vs_ZipFile\n+       184: invokespecial #183                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       187: athrow\n+       188: aload_0\n+       189: new           #567                // class java/io/ByteArrayInputStream\n+       192: dup\n+       193: aload         5\n+       195: invokespecial #750                // Method java/io/ByteArrayInputStream.\"<init>\":([B)V\n+       198: putfield      #559                // Field lastStoredEntry:Ljava/io/ByteArrayInputStream;\n+       201: return\n       LineNumberTable:\n         line 988: 0\n         line 989: 8\n         line 990: 10\n         line 993: 12\n         line 995: 31\n         line 996: 35\n         line 997: 57\n         line 1000: 62\n-        line 1002: 72\n-        line 1004: 80\n-        line 1005: 85\n-        line 1008: 88\n-        line 1009: 99\n-        line 1010: 103\n-        line 1012: 114\n-        line 1013: 117\n-        line 1014: 141\n-        line 1017: 151\n-        line 1018: 157\n-        line 1019: 175\n-        line 1022: 185\n-        line 1023: 198\n+        line 1002: 73\n+        line 1004: 81\n+        line 1005: 86\n+        line 1008: 89\n+        line 1009: 100\n+        line 1010: 104\n+        line 1012: 115\n+        line 1013: 118\n+        line 1014: 142\n+        line 1017: 153\n+        line 1018: 159\n+        line 1019: 177\n+        line 1022: 188\n+        line 1023: 201\n       StackMapTable: number_of_entries = 9\n         frame_type = 254 /* append */\n           offset_delta = 27\n           locals = [ class java/io/ByteArrayOutputStream, int, int ]\n         frame_type = 65 /* same_locals_1_stack_item */\n           stack = [ int ]\n         frame_type = 252 /* append */\n           offset_delta = 1\n           locals = [ int ]\n         frame_type = 252 /* append */\n-          offset_delta = 40\n+          offset_delta = 41\n           locals = [ int ]\n         frame_type = 15 /* same */\n         frame_type = 250 /* chop */\n           offset_delta = 25\n         frame_type = 2 /* same */\n-        frame_type = 33 /* same */\n+        frame_type = 34 /* same */\n         frame_type = 252 /* append */\n-          offset_delta = 33\n+          offset_delta = 34\n           locals = [ class \"[B\" ]\n     Exceptions:\n       throws java.io.IOException\n \n   private boolean bufferContainsSignature(java.io.ByteArrayOutputStream, int, int, int) throws java.io.IOException;\n     descriptor: (Ljava/io/ByteArrayOutputStream;III)Z\n     flags: (0x0002) ACC_PRIVATE\n@@ -3723,135 +3723,135 @@\n         13: iload_2\n         14: iload_3\n         15: iadd\n         16: iconst_4\n         17: isub\n         18: if_icmpge     254\n         21: aload_0\n-        22: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        25: invokevirtual #181                // Method java/nio/ByteBuffer.array:()[B\n+        22: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        25: invokevirtual #578                // Method java/nio/ByteBuffer.array:()[B\n         28: iload         6\n         30: baload\n-        31: getstatic     #247                // Field LFH:[B\n+        31: getstatic     #751                // Field LFH:[B\n         34: iconst_0\n         35: baload\n         36: if_icmpne     248\n         39: aload_0\n-        40: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        43: invokevirtual #181                // Method java/nio/ByteBuffer.array:()[B\n+        40: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        43: invokevirtual #578                // Method java/nio/ByteBuffer.array:()[B\n         46: iload         6\n         48: iconst_1\n         49: iadd\n         50: baload\n-        51: getstatic     #247                // Field LFH:[B\n+        51: getstatic     #751                // Field LFH:[B\n         54: iconst_1\n         55: baload\n         56: if_icmpne     248\n         59: iload         6\n         61: istore        7\n         63: iload         6\n         65: iload         4\n         67: if_icmplt     110\n         70: aload_0\n-        71: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        74: invokevirtual #181                // Method java/nio/ByteBuffer.array:()[B\n+        71: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        74: invokevirtual #578                // Method java/nio/ByteBuffer.array:()[B\n         77: iload         6\n         79: iconst_2\n         80: iadd\n         81: baload\n-        82: getstatic     #247                // Field LFH:[B\n+        82: getstatic     #751                // Field LFH:[B\n         85: iconst_2\n         86: baload\n         87: if_icmpne     110\n         90: aload_0\n-        91: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        94: invokevirtual #181                // Method java/nio/ByteBuffer.array:()[B\n+        91: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        94: invokevirtual #578                // Method java/nio/ByteBuffer.array:()[B\n         97: iload         6\n         99: iconst_3\n        100: iadd\n        101: baload\n-       102: getstatic     #247                // Field LFH:[B\n+       102: getstatic     #751                // Field LFH:[B\n        105: iconst_3\n        106: baload\n        107: if_icmpeq     150\n        110: aload_0\n-       111: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-       114: invokevirtual #181                // Method java/nio/ByteBuffer.array:()[B\n+       111: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+       114: invokevirtual #578                // Method java/nio/ByteBuffer.array:()[B\n        117: iload         6\n        119: iconst_2\n        120: iadd\n        121: baload\n-       122: getstatic     #248                // Field CFH:[B\n+       122: getstatic     #754                // Field CFH:[B\n        125: iconst_2\n        126: baload\n        127: if_icmpne     163\n        130: aload_0\n-       131: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-       134: invokevirtual #181                // Method java/nio/ByteBuffer.array:()[B\n+       131: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+       134: invokevirtual #578                // Method java/nio/ByteBuffer.array:()[B\n        137: iload         6\n        139: iconst_3\n        140: iadd\n        141: baload\n-       142: getstatic     #248                // Field CFH:[B\n+       142: getstatic     #754                // Field CFH:[B\n        145: iconst_3\n        146: baload\n        147: if_icmpne     163\n        150: iload         6\n        152: iload         4\n        154: isub\n        155: istore        7\n        157: iconst_1\n        158: istore        5\n        160: goto          206\n        163: aload_0\n-       164: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-       167: invokevirtual #181                // Method java/nio/ByteBuffer.array:()[B\n+       164: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+       167: invokevirtual #578                // Method java/nio/ByteBuffer.array:()[B\n        170: iload         6\n        172: iconst_2\n        173: iadd\n        174: baload\n-       175: getstatic     #249                // Field DD:[B\n+       175: getstatic     #757                // Field DD:[B\n        178: iconst_2\n        179: baload\n        180: if_icmpne     206\n        183: aload_0\n-       184: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-       187: invokevirtual #181                // Method java/nio/ByteBuffer.array:()[B\n+       184: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+       187: invokevirtual #578                // Method java/nio/ByteBuffer.array:()[B\n        190: iload         6\n        192: iconst_3\n        193: iadd\n        194: baload\n-       195: getstatic     #249                // Field DD:[B\n+       195: getstatic     #757                // Field DD:[B\n        198: iconst_3\n        199: baload\n        200: if_icmpne     206\n        203: iconst_1\n        204: istore        5\n        206: iload         5\n        208: ifeq          248\n        211: aload_0\n        212: aload_0\n-       213: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-       216: invokevirtual #181                // Method java/nio/ByteBuffer.array:()[B\n+       213: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+       216: invokevirtual #578                // Method java/nio/ByteBuffer.array:()[B\n        219: iload         7\n        221: iload_2\n        222: iload_3\n        223: iadd\n        224: iload         7\n        226: isub\n-       227: invokespecial #214                // Method pushback:([BII)V\n+       227: invokespecial #668                // Method pushback:([BII)V\n        230: aload_1\n        231: aload_0\n-       232: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-       235: invokevirtual #181                // Method java/nio/ByteBuffer.array:()[B\n+       232: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+       235: invokevirtual #578                // Method java/nio/ByteBuffer.array:()[B\n        238: iconst_0\n        239: iload         7\n-       241: invokevirtual #250                // Method java/io/ByteArrayOutputStream.write:([BII)V\n+       241: invokevirtual #760                // Method java/io/ByteArrayOutputStream.write:([BII)V\n        244: aload_0\n-       245: invokespecial #216                // Method readDataDescriptor:()V\n+       245: invokespecial #674                // Method readDataDescriptor:()V\n        248: iinc          6, 1\n        251: goto          6\n        254: iload         5\n        256: ireturn\n       LineNumberTable:\n         line 1040: 0\n         line 1041: 3\n@@ -3900,31 +3900,31 @@\n          6: iconst_3\n          7: isub\n          8: istore        5\n         10: iload         5\n         12: ifle          61\n         15: aload_1\n         16: aload_0\n-        17: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        20: invokevirtual #181                // Method java/nio/ByteBuffer.array:()[B\n+        17: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        20: invokevirtual #578                // Method java/nio/ByteBuffer.array:()[B\n         23: iconst_0\n         24: iload         5\n-        26: invokevirtual #250                // Method java/io/ByteArrayOutputStream.write:([BII)V\n+        26: invokevirtual #760                // Method java/io/ByteArrayOutputStream.write:([BII)V\n         29: aload_0\n-        30: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        33: invokevirtual #181                // Method java/nio/ByteBuffer.array:()[B\n+        30: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        33: invokevirtual #578                // Method java/nio/ByteBuffer.array:()[B\n         36: iload         5\n         38: aload_0\n-        39: getfield      #16                 // Field buf:Ljava/nio/ByteBuffer;\n-        42: invokevirtual #181                // Method java/nio/ByteBuffer.array:()[B\n+        39: getfield      #52                 // Field buf:Ljava/nio/ByteBuffer;\n+        42: invokevirtual #578                // Method java/nio/ByteBuffer.array:()[B\n         45: iconst_0\n         46: iload         4\n         48: iconst_3\n         49: iadd\n-        50: invokestatic  #131                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        50: invokestatic  #427                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         53: iload         4\n         55: iconst_3\n         56: iadd\n         57: istore_2\n         58: goto          65\n         61: iload_2\n         62: iload_3\n@@ -3948,77 +3948,77 @@\n \n   private void pushback(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n-         1: getfield      #30                 // Field inputStream:Ljava/io/InputStream;\n-         4: checkcast     #27                 // class java/io/PushbackInputStream\n+         1: getfield      #97                 // Field inputStream:Ljava/io/InputStream;\n+         4: checkcast     #88                 // class java/io/PushbackInputStream\n          7: aload_1\n          8: iload_2\n          9: iload_3\n-        10: invokevirtual #251                // Method java/io/PushbackInputStream.unread:([BII)V\n+        10: invokevirtual #763                // Method java/io/PushbackInputStream.unread:([BII)V\n         13: aload_0\n         14: iload_3\n         15: i2l\n-        16: invokevirtual #252                // Method pushedBackBytes:(J)V\n+        16: invokevirtual #766                // Method pushedBackBytes:(J)V\n         19: return\n       LineNumberTable:\n         line 1091: 0\n         line 1092: 13\n         line 1093: 19\n     Exceptions:\n       throws java.io.IOException\n \n   private void skipRemainderOfArchive() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=3, args_size=1\n          0: aload_0\n-         1: getfield      #125                // Field entriesRead:I\n+         1: getfield      #406                // Field entriesRead:I\n          4: ifle          67\n          7: aload_0\n          8: aload_0\n-         9: getfield      #125                // Field entriesRead:I\n+         9: getfield      #406                // Field entriesRead:I\n         12: i2l\n-        13: ldc2_w        #253                // long 46l\n+        13: ldc2_w        #769                // long 46l\n         16: lmul\n-        17: ldc2_w        #255                // long 30l\n+        17: ldc2_w        #771                // long 30l\n         20: lsub\n-        21: invokespecial #257                // Method realSkip:(J)V\n+        21: invokespecial #773                // Method realSkip:(J)V\n         24: aload_0\n-        25: invokespecial #258                // Method findEocdRecord:()Z\n+        25: invokespecial #776                // Method findEocdRecord:()Z\n         28: istore_1\n         29: iload_1\n         30: ifeq          67\n         33: aload_0\n-        34: ldc2_w        #259                // long 16l\n-        37: invokespecial #257                // Method realSkip:(J)V\n+        34: ldc2_w        #779                // long 16l\n+        37: invokespecial #773                // Method realSkip:(J)V\n         40: aload_0\n         41: aload_0\n-        42: getfield      #20                 // Field shortBuf:[B\n-        45: invokespecial #40                 // Method readFully:([B)V\n+        42: getfield      #63                 // Field shortBuf:[B\n+        45: invokespecial #131                // Method readFully:([B)V\n         48: aload_0\n-        49: getfield      #20                 // Field shortBuf:[B\n-        52: invokestatic  #261                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n+        49: getfield      #63                 // Field shortBuf:[B\n+        52: invokestatic  #781                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I\n         55: istore_2\n         56: iload_2\n         57: iflt          67\n         60: aload_0\n         61: iload_2\n         62: i2l\n-        63: invokespecial #257                // Method realSkip:(J)V\n+        63: invokespecial #773                // Method realSkip:(J)V\n         66: return\n-        67: new           #117                // class java/io/IOException\n+        67: new           #390                // class java/io/IOException\n         70: dup\n-        71: ldc           #183                // String Truncated ZIP file\n-        73: invokespecial #151                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-        76: athrow\n+        71: ldc_w         #585                // String Truncated ZIP file\n+        74: invokespecial #486                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        77: athrow\n       LineNumberTable:\n         line 1120: 0\n         line 1121: 7\n         line 1122: 24\n         line 1123: 29\n         line 1124: 33\n         line 1125: 40\n@@ -4041,77 +4041,77 @@\n          0: iconst_m1\n          1: istore_1\n          2: iconst_0\n          3: istore_2\n          4: iload_2\n          5: ifne          18\n          8: aload_0\n-         9: invokespecial #262                // Method readOneByte:()I\n+         9: invokespecial #783                // Method readOneByte:()I\n         12: dup\n         13: istore_1\n         14: iconst_m1\n         15: if_icmple     126\n         18: iconst_0\n         19: istore_2\n         20: aload_0\n         21: iload_1\n-        22: invokespecial #263                // Method isFirstByteOfEocdSig:(I)Z\n+        22: invokespecial #786                // Method isFirstByteOfEocdSig:(I)Z\n         25: ifne          31\n         28: goto          4\n         31: aload_0\n-        32: invokespecial #262                // Method readOneByte:()I\n+        32: invokespecial #783                // Method readOneByte:()I\n         35: istore_1\n         36: iload_1\n-        37: getstatic     #204                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n+        37: getstatic     #646                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n         40: iconst_1\n         41: baload\n         42: if_icmpeq     62\n         45: iload_1\n         46: iconst_m1\n         47: if_icmpne     53\n         50: goto          126\n         53: aload_0\n         54: iload_1\n-        55: invokespecial #263                // Method isFirstByteOfEocdSig:(I)Z\n+        55: invokespecial #786                // Method isFirstByteOfEocdSig:(I)Z\n         58: istore_2\n         59: goto          4\n         62: aload_0\n-        63: invokespecial #262                // Method readOneByte:()I\n+        63: invokespecial #783                // Method readOneByte:()I\n         66: istore_1\n         67: iload_1\n-        68: getstatic     #204                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n+        68: getstatic     #646                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n         71: iconst_2\n         72: baload\n         73: if_icmpeq     93\n         76: iload_1\n         77: iconst_m1\n         78: if_icmpne     84\n         81: goto          126\n         84: aload_0\n         85: iload_1\n-        86: invokespecial #263                // Method isFirstByteOfEocdSig:(I)Z\n+        86: invokespecial #786                // Method isFirstByteOfEocdSig:(I)Z\n         89: istore_2\n         90: goto          4\n         93: aload_0\n-        94: invokespecial #262                // Method readOneByte:()I\n+        94: invokespecial #783                // Method readOneByte:()I\n         97: istore_1\n         98: iload_1\n         99: iconst_m1\n        100: if_icmpne     106\n        103: goto          126\n        106: iload_1\n-       107: getstatic     #204                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n+       107: getstatic     #646                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n        110: iconst_3\n        111: baload\n        112: if_icmpne     117\n        115: iconst_1\n        116: ireturn\n        117: aload_0\n        118: iload_1\n-       119: invokespecial #263                // Method isFirstByteOfEocdSig:(I)Z\n+       119: invokespecial #786                // Method isFirstByteOfEocdSig:(I)Z\n        122: istore_2\n        123: goto          4\n        126: iconst_0\n        127: ireturn\n       LineNumberTable:\n         line 1142: 0\n         line 1143: 2\n@@ -4170,51 +4170,51 @@\n         10: lcmp\n         11: ifge          79\n         14: lload_1\n         15: lload_3\n         16: lsub\n         17: lstore        5\n         19: aload_0\n-        20: getfield      #30                 // Field inputStream:Ljava/io/InputStream;\n+        20: getfield      #97                 // Field inputStream:Ljava/io/InputStream;\n         23: aload_0\n-        24: getfield      #19                 // Field skipBuf:[B\n+        24: getfield      #60                 // Field skipBuf:[B\n         27: iconst_0\n         28: aload_0\n-        29: getfield      #19                 // Field skipBuf:[B\n+        29: getfield      #60                 // Field skipBuf:[B\n         32: arraylength\n         33: i2l\n         34: lload         5\n         36: lcmp\n         37: ifle          45\n         40: lload         5\n         42: goto          51\n         45: aload_0\n-        46: getfield      #19                 // Field skipBuf:[B\n+        46: getfield      #60                 // Field skipBuf:[B\n         49: arraylength\n         50: i2l\n         51: l2i\n-        52: invokevirtual #165                // Method java/io/InputStream.read:([BII)I\n+        52: invokevirtual #526                // Method java/io/InputStream.read:([BII)I\n         55: istore        7\n         57: iload         7\n         59: iconst_m1\n         60: if_icmpne     64\n         63: return\n         64: aload_0\n         65: iload         7\n-        67: invokevirtual #2                  // Method count:(I)V\n+        67: invokevirtual #3                  // Method count:(I)V\n         70: lload_3\n         71: iload         7\n         73: i2l\n         74: ladd\n         75: lstore_3\n         76: goto          8\n         79: return\n-        80: new           #116                // class java/lang/IllegalArgumentException\n+        80: new           #388                // class java/lang/IllegalArgumentException\n         83: dup\n-        84: invokespecial #201                // Method java/lang/IllegalArgumentException.\"<init>\":()V\n+        84: invokespecial #639                // Method java/lang/IllegalArgumentException.\"<init>\":()V\n         87: athrow\n       LineNumberTable:\n         line 1185: 0\n         line 1186: 6\n         line 1187: 8\n         line 1188: 14\n         line 1189: 19\n@@ -4249,23 +4249,23 @@\n \n   private int readOneByte() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #30                 // Field inputStream:Ljava/io/InputStream;\n-         4: invokevirtual #264                // Method java/io/InputStream.read:()I\n+         1: getfield      #97                 // Field inputStream:Ljava/io/InputStream;\n+         4: invokevirtual #790                // Method java/io/InputStream.read:()I\n          7: istore_1\n          8: iload_1\n          9: iconst_m1\n         10: if_icmpeq     18\n         13: aload_0\n         14: iconst_1\n-        15: invokevirtual #2                  // Method count:(I)V\n+        15: invokevirtual #3                  // Method count:(I)V\n         18: iload_1\n         19: ireturn\n       LineNumberTable:\n         line 1208: 0\n         line 1209: 8\n         line 1210: 13\n         line 1212: 18\n@@ -4278,15 +4278,15 @@\n \n   private boolean isFirstByteOfEocdSig(int);\n     descriptor: (I)Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=2, args_size=2\n          0: iload_1\n-         1: getstatic     #204                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n+         1: getstatic     #646                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B\n          4: iconst_0\n          5: baload\n          6: if_icmpne     13\n          9: iconst_1\n         10: goto          14\n         13: iconst_0\n         14: ireturn\n@@ -4299,96 +4299,96 @@\n \n   private boolean isApkSigningBlock(byte[]) throws java.io.IOException;\n     descriptor: ([B)Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=6, locals=7, args_size=2\n          0: aload_1\n-         1: invokestatic  #265                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getValue:([B)Ljava/math/BigInteger;\n+         1: invokestatic  #792                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getValue:([B)Ljava/math/BigInteger;\n          4: astore_2\n          5: aload_2\n          6: bipush        8\n          8: aload_1\n          9: arraylength\n         10: isub\n         11: i2l\n-        12: getstatic     #266                // Field APK_SIGNING_BLOCK_MAGIC:[B\n+        12: getstatic     #795                // Field APK_SIGNING_BLOCK_MAGIC:[B\n         15: arraylength\n         16: i2l\n         17: lsub\n-        18: invokestatic  #267                // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-        21: invokevirtual #268                // Method java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+        18: invokestatic  #798                // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+        21: invokevirtual #803                // Method java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n         24: astore_3\n-        25: getstatic     #266                // Field APK_SIGNING_BLOCK_MAGIC:[B\n+        25: getstatic     #795                // Field APK_SIGNING_BLOCK_MAGIC:[B\n         28: arraylength\n         29: newarray       byte\n         31: astore        4\n         33: aload_3\n-        34: invokevirtual #269                // Method java/math/BigInteger.signum:()I\n+        34: invokevirtual #807                // Method java/math/BigInteger.signum:()I\n         37: ifge          103\n         40: aload_1\n         41: arraylength\n         42: aload_3\n-        43: invokevirtual #270                // Method java/math/BigInteger.intValue:()I\n+        43: invokevirtual #810                // Method java/math/BigInteger.intValue:()I\n         46: iadd\n         47: istore        5\n         49: iload         5\n         51: bipush        8\n         53: if_icmpge     58\n         56: iconst_0\n         57: ireturn\n         58: aload_3\n-        59: invokevirtual #270                // Method java/math/BigInteger.intValue:()I\n-        62: invokestatic  #271                // Method java/lang/Math.abs:(I)I\n+        59: invokevirtual #810                // Method java/math/BigInteger.intValue:()I\n+        62: invokestatic  #813                // Method java/lang/Math.abs:(I)I\n         65: istore        6\n         67: aload_1\n         68: iload         5\n         70: aload         4\n         72: iconst_0\n         73: iload         6\n         75: aload         4\n         77: arraylength\n-        78: invokestatic  #186                // Method java/lang/Math.min:(II)I\n-        81: invokestatic  #131                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        78: invokestatic  #594                // Method java/lang/Math.min:(II)I\n+        81: invokestatic  #427                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         84: iload         6\n         86: aload         4\n         88: arraylength\n         89: if_icmpge     100\n         92: aload_0\n         93: aload         4\n         95: iload         6\n-        97: invokespecial #229                // Method readFully:([BI)V\n+        97: invokespecial #709                // Method readFully:([BI)V\n        100: goto          148\n        103: aload_3\n-       104: getstatic     #272                // Field LONG_MAX:Ljava/math/BigInteger;\n-       107: invokevirtual #273                // Method java/math/BigInteger.compareTo:(Ljava/math/BigInteger;)I\n+       104: getstatic     #817                // Field LONG_MAX:Ljava/math/BigInteger;\n+       107: invokevirtual #821                // Method java/math/BigInteger.compareTo:(Ljava/math/BigInteger;)I\n        110: ifle          134\n        113: aload_0\n-       114: ldc2_w        #210                // long 9223372036854775807l\n-       117: invokespecial #257                // Method realSkip:(J)V\n+       114: ldc2_w        #660                // long 9223372036854775807l\n+       117: invokespecial #773                // Method realSkip:(J)V\n        120: aload_3\n-       121: getstatic     #272                // Field LONG_MAX:Ljava/math/BigInteger;\n-       124: invokevirtual #274                // Method java/math/BigInteger.negate:()Ljava/math/BigInteger;\n-       127: invokevirtual #268                // Method java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n+       121: getstatic     #817                // Field LONG_MAX:Ljava/math/BigInteger;\n+       124: invokevirtual #825                // Method java/math/BigInteger.negate:()Ljava/math/BigInteger;\n+       127: invokevirtual #803                // Method java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;\n        130: astore_3\n        131: goto          103\n        134: aload_0\n        135: aload_3\n-       136: invokevirtual #275                // Method java/math/BigInteger.longValue:()J\n-       139: invokespecial #257                // Method realSkip:(J)V\n+       136: invokevirtual #829                // Method java/math/BigInteger.longValue:()J\n+       139: invokespecial #773                // Method realSkip:(J)V\n        142: aload_0\n        143: aload         4\n-       145: invokespecial #40                 // Method readFully:([B)V\n+       145: invokespecial #131                // Method readFully:([B)V\n        148: goto          155\n        151: astore        5\n        153: iconst_0\n        154: ireturn\n        155: aload         4\n-       157: getstatic     #266                // Field APK_SIGNING_BLOCK_MAGIC:[B\n-       160: invokestatic  #276                // Method java/util/Arrays.equals:([B[B)Z\n+       157: getstatic     #795                // Field APK_SIGNING_BLOCK_MAGIC:[B\n+       160: invokestatic  #832                // Method java/util/Arrays.equals:([B[B)Z\n        163: ireturn\n       Exception table:\n          from    to  target type\n             33    57   151   Class java/io/EOFException\n             58   148   151   Class java/io/EOFException\n       LineNumberTable:\n         line 1240: 0\n@@ -4431,56 +4431,56 @@\n   static void access$900(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream, int);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;I)V\n     flags: (0x1008) ACC_STATIC, ACC_SYNTHETIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: invokevirtual #2                  // Method count:(I)V\n+         2: invokevirtual #3                  // Method count:(I)V\n          5: return\n       LineNumberTable:\n         line 82: 0\n \n   static org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry access$1000(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;)Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n     flags: (0x1008) ACC_STATIC, ACC_SYNTHETIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n+         1: getfield      #9                  // Field current:Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry;\n          4: areturn\n       LineNumberTable:\n         line 82: 0\n \n   static void access$1100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream, int);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;I)V\n     flags: (0x1008) ACC_STATIC, ACC_SYNTHETIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n-         2: invokevirtual #2                  // Method count:(I)V\n+         2: invokevirtual #3                  // Method count:(I)V\n          5: return\n       LineNumberTable:\n         line 82: 0\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=4, locals=0, args_size=0\n-         0: getstatic     #44                 // Field org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-         3: invokevirtual #206                // Method org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n-         6: putstatic     #247                // Field LFH:[B\n-         9: getstatic     #46                 // Field org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-        12: invokevirtual #206                // Method org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n-        15: putstatic     #248                // Field CFH:[B\n-        18: getstatic     #126                // Field org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-        21: invokevirtual #206                // Method org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n-        24: putstatic     #249                // Field DD:[B\n+         0: getstatic     #141                // Field org/apache/commons/compress/archivers/zip/ZipLong.LFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+         3: invokevirtual #651                // Method org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n+         6: putstatic     #751                // Field LFH:[B\n+         9: getstatic     #149                // Field org/apache/commons/compress/archivers/zip/ZipLong.CFH_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        12: invokevirtual #651                // Method org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n+        15: putstatic     #754                // Field CFH:[B\n+        18: getstatic     #410                // Field org/apache/commons/compress/archivers/zip/ZipLong.DD_SIG:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        21: invokevirtual #651                // Method org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n+        24: putstatic     #757                // Field DD:[B\n         27: bipush        16\n         29: newarray       byte\n         31: dup\n         32: iconst_0\n         33: bipush        65\n         35: bastore\n         36: dup\n@@ -4539,26 +4539,26 @@\n        110: bipush        14\n        112: bipush        52\n        114: bastore\n        115: dup\n        116: bipush        15\n        118: bipush        50\n        120: bastore\n-       121: putstatic     #266                // Field APK_SIGNING_BLOCK_MAGIC:[B\n-       124: ldc2_w        #210                // long 9223372036854775807l\n-       127: invokestatic  #267                // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-       130: putstatic     #272                // Field LONG_MAX:Ljava/math/BigInteger;\n+       121: putstatic     #795                // Field APK_SIGNING_BLOCK_MAGIC:[B\n+       124: ldc2_w        #660                // long 9223372036854775807l\n+       127: invokestatic  #798                // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+       130: putstatic     #817                // Field LONG_MAX:Ljava/math/BigInteger;\n        133: return\n       LineNumberTable:\n         line 1025: 0\n         line 1026: 9\n         line 1027: 18\n         line 1219: 27\n         line 1222: 124\n }\n SourceFile: \"ZipArchiveInputStream.java\"\n InnerClasses:\n-  static #278;                            // class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1\n-  private #280= #104 of #17;              // BoundedInputStream=class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundedInputStream of class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n-  private static final #281= #57 of #17;  // CurrentEntry=class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry of class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n-  public static final #738= #491 of #147; // NameSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  public static #779= #536 of #127;       // Feature=class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature of class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+  private static final #870= #186 of #4;  // CurrentEntry=class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry of class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n+  static #356;                            // class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$1\n+  public static final #871= #272 of #203; // NameSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  private #872= #350 of #4;               // BoundedInputStream=class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundedInputStream of class org/apache/commons/compress/archivers/zip/ZipArchiveInputStream\n+  public static #873= #416 of #413;       // Feature=class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature of class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n"}]}
