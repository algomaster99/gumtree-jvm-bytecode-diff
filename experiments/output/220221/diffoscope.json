{"diffoscope-json-version": 1, "source1": "first/BooleanExpressionComplexityCheck.class", "source2": "second/BooleanExpressionComplexityCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -35,88 +35,87 @@\n         return new int[] { 8, 9, 28, 111, 114, 110, 112, 113, 203 };\n     }\n     \n     public void setMax(final int max) {\n         this.max = max;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        switch (ast.getType()) {\n+    public void visitToken(final DetailAST detailAST) {\n+        switch (detailAST.getType()) {\n             case 8:\n             case 9:\n             case 203: {\n-                this.visitMethodDef(ast);\n+                this.visitMethodDef(detailAST);\n                 break;\n             }\n             case 28: {\n                 this.visitExpr();\n                 break;\n             }\n             case 112: {\n-                if (!isPipeOperator(ast) && !isPassedInParameter(ast)) {\n+                if (!isPipeOperator(detailAST) && !isPassedInParameter(detailAST)) {\n                     this.context.visitBooleanOperator();\n                     break;\n                 }\n                 break;\n             }\n             case 113:\n             case 114: {\n-                if (!isPassedInParameter(ast)) {\n+                if (!isPassedInParameter(detailAST)) {\n                     this.context.visitBooleanOperator();\n                     break;\n                 }\n                 break;\n             }\n             case 110:\n             case 111: {\n                 this.context.visitBooleanOperator();\n                 break;\n             }\n             default: {\n-                throw new IllegalArgumentException(\"Unknown type: \" + ast);\n+                throw new IllegalArgumentException(\"Unknown type: \" + detailAST);\n             }\n         }\n     }\n     \n-    private static boolean isPassedInParameter(final DetailAST logicalOperator) {\n-        return logicalOperator.getParent().getParent().getType() == 34;\n+    private static boolean isPassedInParameter(final DetailAST detailAST) {\n+        return detailAST.getParent().getParent().getType() == 34;\n     }\n     \n-    private static boolean isPipeOperator(final DetailAST binaryOr) {\n-        return binaryOr.getParent().getType() == 13;\n+    private static boolean isPipeOperator(final DetailAST detailAST) {\n+        return detailAST.getParent().getType() == 13;\n     }\n     \n-    public void leaveToken(final DetailAST ast) {\n-        switch (ast.getType()) {\n+    public void leaveToken(final DetailAST detailAST) {\n+        switch (detailAST.getType()) {\n             case 8:\n             case 9:\n             case 203: {\n                 this.leaveMethodDef();\n                 break;\n             }\n             case 28: {\n-                this.leaveExpr(ast);\n+                this.leaveExpr(detailAST);\n                 break;\n             }\n         }\n     }\n     \n-    private void visitMethodDef(final DetailAST ast) {\n+    private void visitMethodDef(final DetailAST detailAST) {\n         this.contextStack.push(this.context);\n-        final boolean check = !CheckUtil.isEqualsMethod(ast);\n-        this.context = new BooleanExpressionComplexityCheck.Context(this, check);\n+        this.context = new BooleanExpressionComplexityCheck.Context(this, !CheckUtil.isEqualsMethod(detailAST));\n     }\n     \n     private void leaveMethodDef() {\n         this.context = this.contextStack.pop();\n     }\n     \n     private void visitExpr() {\n         this.contextStack.push(this.context);\n         this.context = new BooleanExpressionComplexityCheck.Context(this, this.context.isChecking());\n     }\n     \n-    private void leaveExpr(final DetailAST ast) {\n-        this.context.checkCount(ast);\n+    private void leaveExpr(final DetailAST detailAST) {\n+        this.context.checkCount(detailAST);\n         this.context = this.contextStack.pop();\n     }\n }\n"}]}
