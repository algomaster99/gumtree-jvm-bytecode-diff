{"diffoscope-json-version": 1, "source1": "first/BoundedSeekableByteChannelInputStream.class", "source2": "second/BoundedSeekableByteChannelInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,59 +1,59 @@\n-  SHA-256 checksum cf8269addfbc456aedeb9fdb9f2271ecacbd9059c60659ad4d6ba8629215142a\n+  SHA-256 checksum 02b781925b79e1dd1a4116dc5d29ff768748917f298eafe9024063c541789ae4\n   Compiled from \"BoundedSeekableByteChannelInputStream.java\"\n public class org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream extends org.apache.commons.compress.utils.BoundedArchiveInputStream\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #6                          // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n-  super_class: #7                         // org/apache/commons/compress/utils/BoundedArchiveInputStream\n+  this_class: #8                          // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n+  super_class: #2                         // org/apache/commons/compress/utils/BoundedArchiveInputStream\n   interfaces: 0, fields: 1, methods: 2, attributes: 1\n Constant pool:\n-   #1 = Methodref          #7.#24         // org/apache/commons/compress/utils/BoundedArchiveInputStream.\"<init>\":(JJ)V\n-   #2 = Fieldref           #6.#25         // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream.channel:Ljava/nio/channels/SeekableByteChannel;\n-   #3 = InterfaceMethodref #26.#27        // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n-   #4 = InterfaceMethodref #26.#28        // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n-   #5 = Methodref          #17.#29        // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n-   #6 = Class              #30            // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n-   #7 = Class              #31            // org/apache/commons/compress/utils/BoundedArchiveInputStream\n-   #8 = Utf8               channel\n-   #9 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n-  #10 = Utf8               <init>\n-  #11 = Utf8               (JJLjava/nio/channels/SeekableByteChannel;)V\n-  #12 = Utf8               Code\n-  #13 = Utf8               LineNumberTable\n-  #14 = Utf8               read\n-  #15 = Utf8               (JLjava/nio/ByteBuffer;)I\n-  #16 = Utf8               StackMapTable\n-  #17 = Class              #32            // java/nio/ByteBuffer\n-  #18 = Class              #33            // java/lang/Object\n-  #19 = Class              #34            // java/lang/Throwable\n-  #20 = Utf8               Exceptions\n-  #21 = Class              #35            // java/io/IOException\n-  #22 = Utf8               SourceFile\n-  #23 = Utf8               BoundedSeekableByteChannelInputStream.java\n-  #24 = NameAndType        #10:#36        // \"<init>\":(JJ)V\n-  #25 = NameAndType        #8:#9          // channel:Ljava/nio/channels/SeekableByteChannel;\n-  #26 = Class              #37            // java/nio/channels/SeekableByteChannel\n-  #27 = NameAndType        #38:#39        // position:(J)Ljava/nio/channels/SeekableByteChannel;\n-  #28 = NameAndType        #14:#40        // read:(Ljava/nio/ByteBuffer;)I\n-  #29 = NameAndType        #41:#42        // flip:()Ljava/nio/Buffer;\n-  #30 = Utf8               org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n-  #31 = Utf8               org/apache/commons/compress/utils/BoundedArchiveInputStream\n-  #32 = Utf8               java/nio/ByteBuffer\n-  #33 = Utf8               java/lang/Object\n-  #34 = Utf8               java/lang/Throwable\n-  #35 = Utf8               java/io/IOException\n-  #36 = Utf8               (JJ)V\n-  #37 = Utf8               java/nio/channels/SeekableByteChannel\n-  #38 = Utf8               position\n-  #39 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n-  #40 = Utf8               (Ljava/nio/ByteBuffer;)I\n-  #41 = Utf8               flip\n-  #42 = Utf8               ()Ljava/nio/Buffer;\n+   #1 = Methodref          #2.#3          // org/apache/commons/compress/utils/BoundedArchiveInputStream.\"<init>\":(JJ)V\n+   #2 = Class              #4             // org/apache/commons/compress/utils/BoundedArchiveInputStream\n+   #3 = NameAndType        #5:#6          // \"<init>\":(JJ)V\n+   #4 = Utf8               org/apache/commons/compress/utils/BoundedArchiveInputStream\n+   #5 = Utf8               <init>\n+   #6 = Utf8               (JJ)V\n+   #7 = Fieldref           #8.#9          // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream.channel:Ljava/nio/channels/SeekableByteChannel;\n+   #8 = Class              #10            // org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n+   #9 = NameAndType        #11:#12        // channel:Ljava/nio/channels/SeekableByteChannel;\n+  #10 = Utf8               org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream\n+  #11 = Utf8               channel\n+  #12 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n+  #13 = InterfaceMethodref #14.#15        // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+  #14 = Class              #16            // java/nio/channels/SeekableByteChannel\n+  #15 = NameAndType        #17:#18        // position:(J)Ljava/nio/channels/SeekableByteChannel;\n+  #16 = Utf8               java/nio/channels/SeekableByteChannel\n+  #17 = Utf8               position\n+  #18 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n+  #19 = InterfaceMethodref #14.#20        // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+  #20 = NameAndType        #21:#22        // read:(Ljava/nio/ByteBuffer;)I\n+  #21 = Utf8               read\n+  #22 = Utf8               (Ljava/nio/ByteBuffer;)I\n+  #23 = Methodref          #24.#25        // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+  #24 = Class              #26            // java/nio/ByteBuffer\n+  #25 = NameAndType        #27:#28        // flip:()Ljava/nio/Buffer;\n+  #26 = Utf8               java/nio/ByteBuffer\n+  #27 = Utf8               flip\n+  #28 = Utf8               ()Ljava/nio/Buffer;\n+  #29 = Utf8               (JJLjava/nio/channels/SeekableByteChannel;)V\n+  #30 = Utf8               Code\n+  #31 = Utf8               LineNumberTable\n+  #32 = Utf8               (JLjava/nio/ByteBuffer;)I\n+  #33 = Utf8               StackMapTable\n+  #34 = Class              #35            // java/lang/Object\n+  #35 = Utf8               java/lang/Object\n+  #36 = Class              #37            // java/lang/Throwable\n+  #37 = Utf8               java/lang/Throwable\n+  #38 = Utf8               Exceptions\n+  #39 = Class              #40            // java/io/IOException\n+  #40 = Utf8               java/io/IOException\n+  #41 = Utf8               SourceFile\n+  #42 = Utf8               BoundedSeekableByteChannelInputStream.java\n {\n   private final java.nio.channels.SeekableByteChannel channel;\n     descriptor: Ljava/nio/channels/SeekableByteChannel;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   public org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream(long, long, java.nio.channels.SeekableByteChannel);\n     descriptor: (JJLjava/nio/channels/SeekableByteChannel;)V\n@@ -62,51 +62,51 @@\n       stack=5, locals=6, args_size=4\n          0: aload_0\n          1: lload_1\n          2: lload_3\n          3: invokespecial #1                  // Method org/apache/commons/compress/utils/BoundedArchiveInputStream.\"<init>\":(JJ)V\n          6: aload_0\n          7: aload         5\n-         9: putfield      #2                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n+         9: putfield      #7                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n         12: return\n       LineNumberTable:\n         line 43: 0\n         line 44: 6\n         line 45: 12\n \n   protected int read(long, java.nio.ByteBuffer) throws java.io.IOException;\n     descriptor: (JLjava/nio/ByteBuffer;)I\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=3, locals=7, args_size=3\n          0: aload_0\n-         1: getfield      #2                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n+         1: getfield      #7                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n          4: dup\n          5: astore        5\n          7: monitorenter\n          8: aload_0\n-         9: getfield      #2                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n+         9: getfield      #7                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n         12: lload_1\n-        13: invokeinterface #3,  3            // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+        13: invokeinterface #13,  3           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n         18: pop\n         19: aload_0\n-        20: getfield      #2                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n+        20: getfield      #7                  // Field channel:Ljava/nio/channels/SeekableByteChannel;\n         23: aload_3\n-        24: invokeinterface #4,  2            // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+        24: invokeinterface #19,  2           // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n         29: istore        4\n         31: aload         5\n         33: monitorexit\n         34: goto          45\n         37: astore        6\n         39: aload         5\n         41: monitorexit\n         42: aload         6\n         44: athrow\n         45: aload_3\n-        46: invokevirtual #5                  // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+        46: invokevirtual #23                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n         49: pop\n         50: iload         4\n         52: ireturn\n       Exception table:\n          from    to  target type\n              8    34    37   any\n             37    42    37   any\n"}]}
