{"diffoscope-json-version": 1, "source1": "first/CSVFormat.class", "source2": "second/CSVFormat.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,225 +1,225 @@\n-  SHA-256 checksum 79e145eeba8d1aae1c9af640fcd83bfceca4e6e540db8e8e319a5ad05cc2f248\n+  SHA-256 checksum 70b9a9ad2e635a45916a8cc99da52bad6ef7d3e1fd66f228061e28a07f2a065b\n   Compiled from \"CSVFormat.java\"\n public final class org.apache.commons.csv.CSVFormat implements java.io.Serializable\n   minor version: 0\n   major version: 52\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n   this_class: #4                          // org/apache/commons/csv/CSVFormat\n   super_class: #204                       // java/lang/Object\n   interfaces: 1, fields: 32, methods: 84, attributes: 2\n Constant pool:\n-    #1 = Class              #377          // org/apache/commons/csv/Constants\n-    #2 = Methodref          #378.#379     // java/lang/Character.charValue:()C\n-    #3 = Methodref          #4.#380       // org/apache/commons/csv/CSVFormat.isLineBreak:(C)Z\n-    #4 = Class              #381          // org/apache/commons/csv/CSVFormat\n-    #5 = Methodref          #4.#382       // org/apache/commons/csv/CSVFormat.\"<init>\":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZZZ)V\n-    #6 = Methodref          #208.#383     // org/apache/commons/csv/CSVFormat$Predefined.valueOf:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Predefined;\n-    #7 = Methodref          #208.#384     // org/apache/commons/csv/CSVFormat$Predefined.getFormat:()Lorg/apache/commons/csv/CSVFormat;\n-    #8 = Methodref          #204.#385     // java/lang/Object.\"<init>\":()V\n-    #9 = Fieldref           #4.#386       // org/apache/commons/csv/CSVFormat.delimiter:C\n-   #10 = Fieldref           #4.#387       // org/apache/commons/csv/CSVFormat.quoteCharacter:Ljava/lang/Character;\n-   #11 = Fieldref           #4.#388       // org/apache/commons/csv/CSVFormat.quoteMode:Lorg/apache/commons/csv/QuoteMode;\n-   #12 = Fieldref           #4.#389       // org/apache/commons/csv/CSVFormat.commentMarker:Ljava/lang/Character;\n-   #13 = Fieldref           #4.#390       // org/apache/commons/csv/CSVFormat.escapeCharacter:Ljava/lang/Character;\n-   #14 = Fieldref           #4.#391       // org/apache/commons/csv/CSVFormat.ignoreSurroundingSpaces:Z\n-   #15 = Fieldref           #4.#392       // org/apache/commons/csv/CSVFormat.allowMissingColumnNames:Z\n-   #16 = Fieldref           #4.#393       // org/apache/commons/csv/CSVFormat.ignoreEmptyLines:Z\n-   #17 = Fieldref           #4.#394       // org/apache/commons/csv/CSVFormat.recordSeparator:Ljava/lang/String;\n-   #18 = Fieldref           #4.#395       // org/apache/commons/csv/CSVFormat.nullString:Ljava/lang/String;\n-   #19 = Methodref          #4.#396       // org/apache/commons/csv/CSVFormat.toStringArray:([Ljava/lang/Object;)[Ljava/lang/String;\n-   #20 = Fieldref           #4.#397       // org/apache/commons/csv/CSVFormat.headerComments:[Ljava/lang/String;\n-   #21 = Methodref          #398.#399     // \"[Ljava/lang/String;\".clone:()Ljava/lang/Object;\n+    #1 = Class              #367          // org/apache/commons/csv/Constants\n+    #2 = Methodref          #265.#368     // java/lang/Character.charValue:()C\n+    #3 = Methodref          #4.#369       // org/apache/commons/csv/CSVFormat.isLineBreak:(C)Z\n+    #4 = Class              #370          // org/apache/commons/csv/CSVFormat\n+    #5 = Methodref          #4.#371       // org/apache/commons/csv/CSVFormat.\"<init>\":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZZZ)V\n+    #6 = Methodref          #208.#372     // org/apache/commons/csv/CSVFormat$Predefined.valueOf:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Predefined;\n+    #7 = Methodref          #208.#373     // org/apache/commons/csv/CSVFormat$Predefined.getFormat:()Lorg/apache/commons/csv/CSVFormat;\n+    #8 = Methodref          #204.#374     // java/lang/Object.\"<init>\":()V\n+    #9 = Fieldref           #4.#375       // org/apache/commons/csv/CSVFormat.delimiter:C\n+   #10 = Fieldref           #4.#376       // org/apache/commons/csv/CSVFormat.quoteCharacter:Ljava/lang/Character;\n+   #11 = Fieldref           #4.#377       // org/apache/commons/csv/CSVFormat.quoteMode:Lorg/apache/commons/csv/QuoteMode;\n+   #12 = Fieldref           #4.#378       // org/apache/commons/csv/CSVFormat.commentMarker:Ljava/lang/Character;\n+   #13 = Fieldref           #4.#379       // org/apache/commons/csv/CSVFormat.escapeCharacter:Ljava/lang/Character;\n+   #14 = Fieldref           #4.#380       // org/apache/commons/csv/CSVFormat.ignoreSurroundingSpaces:Z\n+   #15 = Fieldref           #4.#381       // org/apache/commons/csv/CSVFormat.allowMissingColumnNames:Z\n+   #16 = Fieldref           #4.#382       // org/apache/commons/csv/CSVFormat.ignoreEmptyLines:Z\n+   #17 = Fieldref           #4.#383       // org/apache/commons/csv/CSVFormat.recordSeparator:Ljava/lang/String;\n+   #18 = Fieldref           #4.#384       // org/apache/commons/csv/CSVFormat.nullString:Ljava/lang/String;\n+   #19 = Methodref          #4.#385       // org/apache/commons/csv/CSVFormat.toStringArray:([Ljava/lang/Object;)[Ljava/lang/String;\n+   #20 = Fieldref           #4.#386       // org/apache/commons/csv/CSVFormat.headerComments:[Ljava/lang/String;\n+   #21 = Methodref          #387.#388     // \"[Ljava/lang/String;\".clone:()Ljava/lang/Object;\n    #22 = Class              #238          // \"[Ljava/lang/String;\"\n-   #23 = Fieldref           #4.#400       // org/apache/commons/csv/CSVFormat.header:[Ljava/lang/String;\n-   #24 = Fieldref           #4.#401       // org/apache/commons/csv/CSVFormat.skipHeaderRecord:Z\n-   #25 = Fieldref           #4.#402       // org/apache/commons/csv/CSVFormat.ignoreHeaderCase:Z\n-   #26 = Fieldref           #4.#403       // org/apache/commons/csv/CSVFormat.trailingDelimiter:Z\n-   #27 = Fieldref           #4.#404       // org/apache/commons/csv/CSVFormat.trim:Z\n-   #28 = Fieldref           #4.#405       // org/apache/commons/csv/CSVFormat.autoFlush:Z\n-   #29 = Class              #406          // java/lang/StringBuilder\n-   #30 = Methodref          #29.#385      // java/lang/StringBuilder.\"<init>\":()V\n-   #31 = Methodref          #29.#407      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #32 = Methodref          #29.#408      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #33 = Methodref          #29.#409      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #34 = Fieldref           #4.#410       // org/apache/commons/csv/CSVFormat.quotedNullString:Ljava/lang/String;\n-   #35 = Fieldref           #4.#411       // org/apache/commons/csv/CSVFormat.allowDuplicateHeaderNames:Z\n-   #36 = Methodref          #4.#412       // org/apache/commons/csv/CSVFormat.validate:()V\n-   #37 = Methodref          #204.#413     // java/lang/Object.getClass:()Ljava/lang/Class;\n-   #38 = Methodref          #378.#414     // java/lang/Character.equals:(Ljava/lang/Object;)Z\n-   #39 = Methodref          #133.#414     // java/lang/String.equals:(Ljava/lang/Object;)Z\n-   #40 = Methodref          #415.#416     // java/util/Arrays.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z\n-   #41 = Class              #417          // java/io/StringWriter\n-   #42 = Methodref          #41.#385      // java/io/StringWriter.\"<init>\":()V\n-   #43 = Class              #418          // org/apache/commons/csv/CSVPrinter\n-   #44 = Methodref          #43.#419      // org/apache/commons/csv/CSVPrinter.\"<init>\":(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V\n-   #45 = Methodref          #43.#420      // org/apache/commons/csv/CSVPrinter.printRecord:([Ljava/lang/Object;)V\n-   #46 = Methodref          #41.#409      // java/io/StringWriter.toString:()Ljava/lang/String;\n-   #47 = Methodref          #133.#421     // java/lang/String.trim:()Ljava/lang/String;\n-   #48 = Methodref          #43.#422      // org/apache/commons/csv/CSVPrinter.close:()V\n-   #49 = Class              #423          // java/lang/Throwable\n-   #50 = Methodref          #49.#424      // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-   #51 = Class              #425          // java/io/IOException\n-   #52 = Class              #426          // java/lang/IllegalStateException\n-   #53 = Methodref          #52.#427      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n-   #54 = Methodref          #428.#399     // \"[Ljava/lang/String;\".clone:()Ljava/lang/Object;\n-   #55 = Methodref          #429.#399     // \"[Ljava/lang/String;\".clone:()Ljava/lang/Object;\n-   #56 = Methodref          #430.#431     // org/apache/commons/csv/QuoteMode.hashCode:()I\n-   #57 = Methodref          #378.#431     // java/lang/Character.hashCode:()I\n-   #58 = Methodref          #133.#431     // java/lang/String.hashCode:()I\n-   #59 = Methodref          #415.#432     // java/util/Arrays.hashCode:([Ljava/lang/Object;)I\n-   #60 = Class              #433          // org/apache/commons/csv/CSVParser\n-   #61 = Methodref          #60.#434      // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n-   #62 = Class              #435          // java/io/OutputStreamWriter\n-   #63 = Class              #436          // java/io/FileOutputStream\n-   #64 = Methodref          #63.#437      // java/io/FileOutputStream.\"<init>\":(Ljava/io/File;)V\n-   #65 = Methodref          #62.#438      // java/io/OutputStreamWriter.\"<init>\":(Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V\n-   #66 = String             #439          //\n-   #67 = Fieldref           #430.#440     // org/apache/commons/csv/QuoteMode.ALL:Lorg/apache/commons/csv/QuoteMode;\n-   #68 = Class              #441          // java/lang/CharSequence\n-   #69 = Class              #442          // java/io/Reader\n-   #70 = Methodref          #4.#443       // org/apache/commons/csv/CSVFormat.print:(Ljava/io/Reader;Ljava/lang/Appendable;Z)V\n-   #71 = Methodref          #204.#409     // java/lang/Object.toString:()Ljava/lang/String;\n-   #72 = Methodref          #4.#444       // org/apache/commons/csv/CSVFormat.getTrim:()Z\n-   #73 = Methodref          #4.#445       // org/apache/commons/csv/CSVFormat.trim:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;\n-   #74 = Methodref          #4.#446       // org/apache/commons/csv/CSVFormat.print:(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n-   #75 = InterfaceMethodref #68.#447      // java/lang/CharSequence.length:()I\n-   #76 = Methodref          #4.#448       // org/apache/commons/csv/CSVFormat.getDelimiter:()C\n-   #77 = InterfaceMethodref #449.#450     // java/lang/Appendable.append:(C)Ljava/lang/Appendable;\n-   #78 = InterfaceMethodref #449.#451     // java/lang/Appendable.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;\n-   #79 = Methodref          #4.#452       // org/apache/commons/csv/CSVFormat.isQuoteCharacterSet:()Z\n-   #80 = Methodref          #4.#453       // org/apache/commons/csv/CSVFormat.printWithQuotes:(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n-   #81 = Methodref          #4.#454       // org/apache/commons/csv/CSVFormat.isEscapeCharacterSet:()Z\n-   #82 = Methodref          #4.#455       // org/apache/commons/csv/CSVFormat.printWithEscapes:(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V\n-   #83 = InterfaceMethodref #449.#456     // java/lang/Appendable.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;\n-   #84 = Class              #457          // java/nio/file/OpenOption\n-   #85 = Methodref          #458.#459     // java/nio/file/Files.newBufferedWriter:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;\n-   #86 = Methodref          #4.#460       // org/apache/commons/csv/CSVFormat.print:(Ljava/lang/Appendable;)Lorg/apache/commons/csv/CSVPrinter;\n-   #87 = Methodref          #4.#461       // org/apache/commons/csv/CSVFormat.printWithQuotes:(Ljava/io/Reader;Ljava/lang/Appendable;)V\n-   #88 = Methodref          #4.#462       // org/apache/commons/csv/CSVFormat.printWithEscapes:(Ljava/io/Reader;Ljava/lang/Appendable;)V\n-   #89 = Class              #463          // java/io/Writer\n-   #90 = Methodref          #98.#464      // org/apache/commons/csv/IOUtils.copyLarge:(Ljava/io/Reader;Ljava/io/Writer;)J\n-   #91 = Methodref          #98.#465      // org/apache/commons/csv/IOUtils.copy:(Ljava/io/Reader;Ljava/lang/Appendable;)J\n-   #92 = Fieldref           #466.#467     // java/lang/System.out:Ljava/io/PrintStream;\n-   #93 = Methodref          #4.#468       // org/apache/commons/csv/CSVFormat.getTrailingDelimiter:()Z\n-   #94 = Methodref          #4.#469       // org/apache/commons/csv/CSVFormat.print:(Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n-   #95 = Methodref          #4.#470       // org/apache/commons/csv/CSVFormat.println:(Ljava/lang/Appendable;)V\n-   #96 = Methodref          #4.#471       // org/apache/commons/csv/CSVFormat.getEscapeCharacter:()Ljava/lang/Character;\n-   #97 = InterfaceMethodref #68.#472      // java/lang/CharSequence.charAt:(I)C\n-   #98 = Class              #473          // org/apache/commons/csv/IOUtils\n-   #99 = Methodref          #29.#474      // java/lang/StringBuilder.\"<init>\":(I)V\n-  #100 = Methodref          #69.#475      // java/io/Reader.read:()I\n-  #101 = Methodref          #29.#476      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n-  #102 = Methodref          #29.#477      // java/lang/StringBuilder.substring:(II)Ljava/lang/String;\n-  #103 = Methodref          #29.#478      // java/lang/StringBuilder.setLength:(I)V\n-  #104 = Methodref          #4.#479       // org/apache/commons/csv/CSVFormat.getQuoteCharacter:()Ljava/lang/Character;\n-  #105 = Methodref          #4.#480       // org/apache/commons/csv/CSVFormat.getQuoteMode:()Lorg/apache/commons/csv/QuoteMode;\n-  #106 = Fieldref           #430.#481     // org/apache/commons/csv/QuoteMode.MINIMAL:Lorg/apache/commons/csv/QuoteMode;\n-  #107 = Fieldref           #206.#482     // org/apache/commons/csv/CSVFormat$1.$SwitchMap$org$apache$commons$csv$QuoteMode:[I\n-  #108 = Methodref          #430.#483     // org/apache/commons/csv/QuoteMode.ordinal:()I\n-  #109 = Class              #484          // java/lang/Number\n-  #110 = String             #485          // Unexpected Quote value:\n-  #111 = Methodref          #52.#486      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-  #112 = Fieldref           #430.#487     // org/apache/commons/csv/QuoteMode.NONE:Lorg/apache/commons/csv/QuoteMode;\n-  #113 = String             #488          // Delimiter=<\n-  #114 = String             #489          // Escape=<\n-  #115 = String             #490          // QuoteChar=<\n-  #116 = String             #491          // QuoteMode=<\n-  #117 = Methodref          #4.#492       // org/apache/commons/csv/CSVFormat.isCommentMarkerSet:()Z\n-  #118 = String             #493          // CommentStart=<\n-  #119 = Methodref          #4.#494       // org/apache/commons/csv/CSVFormat.isNullStringSet:()Z\n-  #120 = String             #495          // NullString=<\n-  #121 = String             #496          // RecordSeparator=<\n-  #122 = Methodref          #4.#497       // org/apache/commons/csv/CSVFormat.getIgnoreEmptyLines:()Z\n-  #123 = String             #498          //  EmptyLines:ignored\n-  #124 = Methodref          #4.#499       // org/apache/commons/csv/CSVFormat.getIgnoreSurroundingSpaces:()Z\n-  #125 = String             #500          //  SurroundingSpaces:ignored\n-  #126 = Methodref          #4.#501       // org/apache/commons/csv/CSVFormat.getIgnoreHeaderCase:()Z\n-  #127 = String             #502          //  IgnoreHeaderCase:ignored\n-  #128 = String             #503          //  SkipHeaderRecord:\n-  #129 = Methodref          #29.#504      // java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;\n-  #130 = String             #505          // HeaderComments:\n-  #131 = Methodref          #415.#506     // java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;\n-  #132 = String             #507          // Header:\n-  #133 = Class              #508          // java/lang/String\n-  #134 = InterfaceMethodref #68.#509      // java/lang/CharSequence.subSequence:(II)Ljava/lang/CharSequence;\n-  #135 = Class              #510          // java/lang/IllegalArgumentException\n-  #136 = String             #511          // The delimiter cannot be a line break\n-  #137 = Methodref          #135.#486     // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-  #138 = String             #512          // The quoteChar character and the delimiter cannot be the same (\\'\n-  #139 = String             #513          // \\')\n-  #140 = String             #514          // The escape character and the delimiter cannot be the same (\\'\n-  #141 = String             #515          // The comment start character and the delimiter cannot be the same (\\'\n-  #142 = String             #516          // The comment start character and the quoteChar cannot be the same (\\'\n-  #143 = String             #517          // The comment start and the escape character cannot be the same (\\'\n-  #144 = String             #518          // No quotes mode set but no escape character is set\n-  #145 = Class              #519          // java/util/HashSet\n-  #146 = Methodref          #145.#385     // java/util/HashSet.\"<init>\":()V\n-  #147 = InterfaceMethodref #520.#521     // java/util/Set.add:(Ljava/lang/Object;)Z\n-  #148 = String             #522          // The header contains a duplicate entry: \\'\n-  #149 = String             #523          // \\' in\n-  #150 = Methodref          #4.#524       // org/apache/commons/csv/CSVFormat.withAllowDuplicateHeaderNames:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #151 = Methodref          #4.#525       // org/apache/commons/csv/CSVFormat.withAllowMissingColumnNames:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #152 = Methodref          #378.#526     // java/lang/Character.valueOf:(C)Ljava/lang/Character;\n-  #153 = Methodref          #4.#527       // org/apache/commons/csv/CSVFormat.withCommentMarker:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n-  #154 = Methodref          #4.#528       // org/apache/commons/csv/CSVFormat.isLineBreak:(Ljava/lang/Character;)Z\n-  #155 = String             #529          // The comment start marker character cannot be a line break\n-  #156 = Methodref          #4.#530       // org/apache/commons/csv/CSVFormat.withEscape:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n-  #157 = String             #531          // The escape character cannot be a line break\n-  #158 = Methodref          #4.#532       // org/apache/commons/csv/CSVFormat.withHeader:([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n-  #159 = Methodref          #4.#533       // org/apache/commons/csv/CSVFormat.withSkipHeaderRecord:()Lorg/apache/commons/csv/CSVFormat;\n-  #160 = Methodref          #534.#535     // java/lang/Class.getEnumConstants:()[Ljava/lang/Object;\n-  #161 = Class              #536          // \"[Ljava/lang/Enum;\"\n-  #162 = Methodref          #537.#538     // java/lang/Enum.name:()Ljava/lang/String;\n-  #163 = InterfaceMethodref #539.#540     // java/sql/ResultSet.getMetaData:()Ljava/sql/ResultSetMetaData;\n-  #164 = Methodref          #4.#541       // org/apache/commons/csv/CSVFormat.withHeader:(Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat;\n-  #165 = InterfaceMethodref #542.#543     // java/sql/ResultSetMetaData.getColumnCount:()I\n-  #166 = InterfaceMethodref #542.#544     // java/sql/ResultSetMetaData.getColumnLabel:(I)Ljava/lang/String;\n-  #167 = Methodref          #4.#545       // org/apache/commons/csv/CSVFormat.withIgnoreEmptyLines:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #168 = Methodref          #4.#546       // org/apache/commons/csv/CSVFormat.withIgnoreHeaderCase:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #169 = Methodref          #4.#547       // org/apache/commons/csv/CSVFormat.withIgnoreSurroundingSpaces:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #170 = Methodref          #4.#548       // org/apache/commons/csv/CSVFormat.withQuote:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n-  #171 = String             #549          // The quoteChar cannot be a line break\n-  #172 = Methodref          #133.#550     // java/lang/String.valueOf:(C)Ljava/lang/String;\n-  #173 = Methodref          #4.#551       // org/apache/commons/csv/CSVFormat.withRecordSeparator:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n-  #174 = Methodref          #4.#552       // org/apache/commons/csv/CSVFormat.withSkipHeaderRecord:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #175 = String             #553          // line.separator\n-  #176 = Methodref          #466.#554     // java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;\n-  #177 = Methodref          #4.#555       // org/apache/commons/csv/CSVFormat.withTrailingDelimiter:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #178 = Methodref          #4.#556       // org/apache/commons/csv/CSVFormat.withTrim:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #179 = Fieldref           #1.#557       // org/apache/commons/csv/Constants.DOUBLE_QUOTE_CHAR:Ljava/lang/Character;\n-  #180 = String             #558          // \\r\\n\n-  #181 = Fieldref           #4.#559       // org/apache/commons/csv/CSVFormat.DEFAULT:Lorg/apache/commons/csv/CSVFormat;\n-  #182 = Methodref          #4.#560       // org/apache/commons/csv/CSVFormat.withAllowMissingColumnNames:()Lorg/apache/commons/csv/CSVFormat;\n-  #183 = Fieldref           #4.#561       // org/apache/commons/csv/CSVFormat.EXCEL:Lorg/apache/commons/csv/CSVFormat;\n-  #184 = Methodref          #4.#562       // org/apache/commons/csv/CSVFormat.withDelimiter:(C)Lorg/apache/commons/csv/CSVFormat;\n-  #185 = Methodref          #4.#563       // org/apache/commons/csv/CSVFormat.withEscape:(C)Lorg/apache/commons/csv/CSVFormat;\n-  #186 = Methodref          #4.#564       // org/apache/commons/csv/CSVFormat.withRecordSeparator:(C)Lorg/apache/commons/csv/CSVFormat;\n-  #187 = Fieldref           #4.#565       // org/apache/commons/csv/CSVFormat.INFORMIX_UNLOAD:Lorg/apache/commons/csv/CSVFormat;\n-  #188 = Fieldref           #4.#566       // org/apache/commons/csv/CSVFormat.INFORMIX_UNLOAD_CSV:Lorg/apache/commons/csv/CSVFormat;\n-  #189 = Methodref          #4.#567       // org/apache/commons/csv/CSVFormat.withQuoteMode:(Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat;\n-  #190 = Fieldref           #4.#568       // org/apache/commons/csv/CSVFormat.MONGODB_CSV:Lorg/apache/commons/csv/CSVFormat;\n-  #191 = Fieldref           #4.#569       // org/apache/commons/csv/CSVFormat.MONGODB_TSV:Lorg/apache/commons/csv/CSVFormat;\n-  #192 = String             #570          // \\\\N\n-  #193 = Methodref          #4.#571       // org/apache/commons/csv/CSVFormat.withNullString:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n-  #194 = Fieldref           #430.#572     // org/apache/commons/csv/QuoteMode.ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n-  #195 = Fieldref           #4.#573       // org/apache/commons/csv/CSVFormat.MYSQL:Lorg/apache/commons/csv/CSVFormat;\n-  #196 = Methodref          #4.#574       // org/apache/commons/csv/CSVFormat.withTrim:()Lorg/apache/commons/csv/CSVFormat;\n-  #197 = Methodref          #4.#575       // org/apache/commons/csv/CSVFormat.withSystemRecordSeparator:()Lorg/apache/commons/csv/CSVFormat;\n-  #198 = Fieldref           #4.#576       // org/apache/commons/csv/CSVFormat.ORACLE:Lorg/apache/commons/csv/CSVFormat;\n-  #199 = Fieldref           #4.#577       // org/apache/commons/csv/CSVFormat.POSTGRESQL_CSV:Lorg/apache/commons/csv/CSVFormat;\n-  #200 = Fieldref           #4.#578       // org/apache/commons/csv/CSVFormat.POSTGRESQL_TEXT:Lorg/apache/commons/csv/CSVFormat;\n-  #201 = Fieldref           #4.#579       // org/apache/commons/csv/CSVFormat.RFC4180:Lorg/apache/commons/csv/CSVFormat;\n-  #202 = Methodref          #4.#580       // org/apache/commons/csv/CSVFormat.withIgnoreSurroundingSpaces:()Lorg/apache/commons/csv/CSVFormat;\n-  #203 = Fieldref           #4.#581       // org/apache/commons/csv/CSVFormat.TDF:Lorg/apache/commons/csv/CSVFormat;\n-  #204 = Class              #582          // java/lang/Object\n-  #205 = Class              #583          // java/io/Serializable\n-  #206 = Class              #584          // org/apache/commons/csv/CSVFormat$1\n+   #23 = Fieldref           #4.#389       // org/apache/commons/csv/CSVFormat.header:[Ljava/lang/String;\n+   #24 = Fieldref           #4.#390       // org/apache/commons/csv/CSVFormat.skipHeaderRecord:Z\n+   #25 = Fieldref           #4.#391       // org/apache/commons/csv/CSVFormat.ignoreHeaderCase:Z\n+   #26 = Fieldref           #4.#392       // org/apache/commons/csv/CSVFormat.trailingDelimiter:Z\n+   #27 = Fieldref           #4.#393       // org/apache/commons/csv/CSVFormat.trim:Z\n+   #28 = Fieldref           #4.#394       // org/apache/commons/csv/CSVFormat.autoFlush:Z\n+   #29 = Class              #395          // java/lang/StringBuilder\n+   #30 = Methodref          #29.#374      // java/lang/StringBuilder.\"<init>\":()V\n+   #31 = Methodref          #29.#396      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #32 = Methodref          #29.#397      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #33 = Methodref          #29.#398      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #34 = Fieldref           #4.#399       // org/apache/commons/csv/CSVFormat.quotedNullString:Ljava/lang/String;\n+   #35 = Fieldref           #4.#400       // org/apache/commons/csv/CSVFormat.allowDuplicateHeaderNames:Z\n+   #36 = Methodref          #4.#401       // org/apache/commons/csv/CSVFormat.validate:()V\n+   #37 = Methodref          #204.#402     // java/lang/Object.getClass:()Ljava/lang/Class;\n+   #38 = Methodref          #265.#403     // java/lang/Character.equals:(Ljava/lang/Object;)Z\n+   #39 = Methodref          #133.#403     // java/lang/String.equals:(Ljava/lang/Object;)Z\n+   #40 = Methodref          #404.#405     // java/util/Arrays.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z\n+   #41 = Class              #406          // java/io/StringWriter\n+   #42 = Methodref          #41.#374      // java/io/StringWriter.\"<init>\":()V\n+   #43 = Class              #407          // org/apache/commons/csv/CSVPrinter\n+   #44 = Methodref          #43.#408      // org/apache/commons/csv/CSVPrinter.\"<init>\":(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V\n+   #45 = Methodref          #43.#409      // org/apache/commons/csv/CSVPrinter.printRecord:([Ljava/lang/Object;)V\n+   #46 = Methodref          #41.#398      // java/io/StringWriter.toString:()Ljava/lang/String;\n+   #47 = Methodref          #133.#410     // java/lang/String.trim:()Ljava/lang/String;\n+   #48 = Methodref          #43.#411      // org/apache/commons/csv/CSVPrinter.close:()V\n+   #49 = Class              #412          // java/lang/Throwable\n+   #50 = Methodref          #49.#413      // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+   #51 = Class              #414          // java/io/IOException\n+   #52 = Class              #415          // java/lang/IllegalStateException\n+   #53 = Methodref          #52.#416      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n+   #54 = Methodref          #417.#388     // \"[Ljava/lang/String;\".clone:()Ljava/lang/Object;\n+   #55 = Methodref          #418.#388     // \"[Ljava/lang/String;\".clone:()Ljava/lang/Object;\n+   #56 = Methodref          #266.#419     // org/apache/commons/csv/QuoteMode.hashCode:()I\n+   #57 = Methodref          #265.#419     // java/lang/Character.hashCode:()I\n+   #58 = Methodref          #133.#419     // java/lang/String.hashCode:()I\n+   #59 = Methodref          #404.#420     // java/util/Arrays.hashCode:([Ljava/lang/Object;)I\n+   #60 = Class              #421          // org/apache/commons/csv/CSVParser\n+   #61 = Methodref          #60.#422      // org/apache/commons/csv/CSVParser.\"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n+   #62 = Class              #423          // java/io/OutputStreamWriter\n+   #63 = Class              #424          // java/io/FileOutputStream\n+   #64 = Methodref          #63.#425      // java/io/FileOutputStream.\"<init>\":(Ljava/io/File;)V\n+   #65 = Methodref          #62.#426      // java/io/OutputStreamWriter.\"<init>\":(Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V\n+   #66 = String             #427          //\n+   #67 = Fieldref           #266.#428     // org/apache/commons/csv/QuoteMode.ALL:Lorg/apache/commons/csv/QuoteMode;\n+   #68 = Class              #429          // java/lang/CharSequence\n+   #69 = Class              #430          // java/io/Reader\n+   #70 = Methodref          #4.#431       // org/apache/commons/csv/CSVFormat.print:(Ljava/io/Reader;Ljava/lang/Appendable;Z)V\n+   #71 = Methodref          #204.#398     // java/lang/Object.toString:()Ljava/lang/String;\n+   #72 = Methodref          #4.#432       // org/apache/commons/csv/CSVFormat.getTrim:()Z\n+   #73 = Methodref          #4.#433       // org/apache/commons/csv/CSVFormat.trim:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;\n+   #74 = Methodref          #4.#434       // org/apache/commons/csv/CSVFormat.print:(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n+   #75 = InterfaceMethodref #68.#435      // java/lang/CharSequence.length:()I\n+   #76 = Methodref          #4.#436       // org/apache/commons/csv/CSVFormat.getDelimiter:()C\n+   #77 = InterfaceMethodref #318.#437     // java/lang/Appendable.append:(C)Ljava/lang/Appendable;\n+   #78 = InterfaceMethodref #318.#438     // java/lang/Appendable.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;\n+   #79 = Methodref          #4.#439       // org/apache/commons/csv/CSVFormat.isQuoteCharacterSet:()Z\n+   #80 = Methodref          #4.#440       // org/apache/commons/csv/CSVFormat.printWithQuotes:(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n+   #81 = Methodref          #4.#441       // org/apache/commons/csv/CSVFormat.isEscapeCharacterSet:()Z\n+   #82 = Methodref          #4.#442       // org/apache/commons/csv/CSVFormat.printWithEscapes:(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V\n+   #83 = InterfaceMethodref #318.#443     // java/lang/Appendable.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;\n+   #84 = Class              #444          // java/nio/file/OpenOption\n+   #85 = Methodref          #445.#446     // java/nio/file/Files.newBufferedWriter:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;\n+   #86 = Methodref          #4.#447       // org/apache/commons/csv/CSVFormat.print:(Ljava/lang/Appendable;)Lorg/apache/commons/csv/CSVPrinter;\n+   #87 = Methodref          #4.#448       // org/apache/commons/csv/CSVFormat.printWithQuotes:(Ljava/io/Reader;Ljava/lang/Appendable;)V\n+   #88 = Methodref          #4.#449       // org/apache/commons/csv/CSVFormat.printWithEscapes:(Ljava/io/Reader;Ljava/lang/Appendable;)V\n+   #89 = Class              #450          // java/io/Writer\n+   #90 = Methodref          #98.#451      // org/apache/commons/csv/IOUtils.copyLarge:(Ljava/io/Reader;Ljava/io/Writer;)J\n+   #91 = Methodref          #98.#452      // org/apache/commons/csv/IOUtils.copy:(Ljava/io/Reader;Ljava/lang/Appendable;)J\n+   #92 = Fieldref           #453.#454     // java/lang/System.out:Ljava/io/PrintStream;\n+   #93 = Methodref          #4.#455       // org/apache/commons/csv/CSVFormat.getTrailingDelimiter:()Z\n+   #94 = Methodref          #4.#456       // org/apache/commons/csv/CSVFormat.print:(Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n+   #95 = Methodref          #4.#457       // org/apache/commons/csv/CSVFormat.println:(Ljava/lang/Appendable;)V\n+   #96 = Methodref          #4.#458       // org/apache/commons/csv/CSVFormat.getEscapeCharacter:()Ljava/lang/Character;\n+   #97 = InterfaceMethodref #68.#459      // java/lang/CharSequence.charAt:(I)C\n+   #98 = Class              #460          // org/apache/commons/csv/IOUtils\n+   #99 = Methodref          #29.#461      // java/lang/StringBuilder.\"<init>\":(I)V\n+  #100 = Methodref          #69.#462      // java/io/Reader.read:()I\n+  #101 = Methodref          #29.#463      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+  #102 = Methodref          #29.#464      // java/lang/StringBuilder.substring:(II)Ljava/lang/String;\n+  #103 = Methodref          #29.#465      // java/lang/StringBuilder.setLength:(I)V\n+  #104 = Methodref          #4.#466       // org/apache/commons/csv/CSVFormat.getQuoteCharacter:()Ljava/lang/Character;\n+  #105 = Methodref          #4.#467       // org/apache/commons/csv/CSVFormat.getQuoteMode:()Lorg/apache/commons/csv/QuoteMode;\n+  #106 = Fieldref           #266.#468     // org/apache/commons/csv/QuoteMode.MINIMAL:Lorg/apache/commons/csv/QuoteMode;\n+  #107 = Fieldref           #206.#469     // org/apache/commons/csv/CSVFormat$1.$SwitchMap$org$apache$commons$csv$QuoteMode:[I\n+  #108 = Methodref          #266.#470     // org/apache/commons/csv/QuoteMode.ordinal:()I\n+  #109 = Class              #471          // java/lang/Number\n+  #110 = String             #472          // Unexpected Quote value:\n+  #111 = Methodref          #52.#473      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+  #112 = Fieldref           #266.#474     // org/apache/commons/csv/QuoteMode.NONE:Lorg/apache/commons/csv/QuoteMode;\n+  #113 = String             #475          // Delimiter=<\n+  #114 = String             #476          // Escape=<\n+  #115 = String             #477          // QuoteChar=<\n+  #116 = String             #478          // QuoteMode=<\n+  #117 = Methodref          #4.#479       // org/apache/commons/csv/CSVFormat.isCommentMarkerSet:()Z\n+  #118 = String             #480          // CommentStart=<\n+  #119 = Methodref          #4.#481       // org/apache/commons/csv/CSVFormat.isNullStringSet:()Z\n+  #120 = String             #482          // NullString=<\n+  #121 = String             #483          // RecordSeparator=<\n+  #122 = Methodref          #4.#484       // org/apache/commons/csv/CSVFormat.getIgnoreEmptyLines:()Z\n+  #123 = String             #485          //  EmptyLines:ignored\n+  #124 = Methodref          #4.#486       // org/apache/commons/csv/CSVFormat.getIgnoreSurroundingSpaces:()Z\n+  #125 = String             #487          //  SurroundingSpaces:ignored\n+  #126 = Methodref          #4.#488       // org/apache/commons/csv/CSVFormat.getIgnoreHeaderCase:()Z\n+  #127 = String             #489          //  IgnoreHeaderCase:ignored\n+  #128 = String             #490          //  SkipHeaderRecord:\n+  #129 = Methodref          #29.#491      // java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;\n+  #130 = String             #492          // HeaderComments:\n+  #131 = Methodref          #404.#493     // java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;\n+  #132 = String             #494          // Header:\n+  #133 = Class              #495          // java/lang/String\n+  #134 = InterfaceMethodref #68.#496      // java/lang/CharSequence.subSequence:(II)Ljava/lang/CharSequence;\n+  #135 = Class              #497          // java/lang/IllegalArgumentException\n+  #136 = String             #498          // The delimiter cannot be a line break\n+  #137 = Methodref          #135.#473     // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+  #138 = String             #499          // The quoteChar character and the delimiter cannot be the same (\\'\n+  #139 = String             #500          // \\')\n+  #140 = String             #501          // The escape character and the delimiter cannot be the same (\\'\n+  #141 = String             #502          // The comment start character and the delimiter cannot be the same (\\'\n+  #142 = String             #503          // The comment start character and the quoteChar cannot be the same (\\'\n+  #143 = String             #504          // The comment start and the escape character cannot be the same (\\'\n+  #144 = String             #505          // No quotes mode set but no escape character is set\n+  #145 = Class              #506          // java/util/HashSet\n+  #146 = Methodref          #145.#374     // java/util/HashSet.\"<init>\":()V\n+  #147 = InterfaceMethodref #329.#507     // java/util/Set.add:(Ljava/lang/Object;)Z\n+  #148 = String             #508          // The header contains a duplicate entry: \\'\n+  #149 = String             #509          // \\' in\n+  #150 = Methodref          #4.#510       // org/apache/commons/csv/CSVFormat.withAllowDuplicateHeaderNames:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #151 = Methodref          #4.#511       // org/apache/commons/csv/CSVFormat.withAllowMissingColumnNames:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #152 = Methodref          #265.#512     // java/lang/Character.valueOf:(C)Ljava/lang/Character;\n+  #153 = Methodref          #4.#513       // org/apache/commons/csv/CSVFormat.withCommentMarker:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n+  #154 = Methodref          #4.#514       // org/apache/commons/csv/CSVFormat.isLineBreak:(Ljava/lang/Character;)Z\n+  #155 = String             #515          // The comment start marker character cannot be a line break\n+  #156 = Methodref          #4.#516       // org/apache/commons/csv/CSVFormat.withEscape:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n+  #157 = String             #517          // The escape character cannot be a line break\n+  #158 = Methodref          #4.#518       // org/apache/commons/csv/CSVFormat.withHeader:([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n+  #159 = Methodref          #4.#519       // org/apache/commons/csv/CSVFormat.withSkipHeaderRecord:()Lorg/apache/commons/csv/CSVFormat;\n+  #160 = Methodref          #520.#521     // java/lang/Class.getEnumConstants:()[Ljava/lang/Object;\n+  #161 = Class              #522          // \"[Ljava/lang/Enum;\"\n+  #162 = Methodref          #523.#524     // java/lang/Enum.name:()Ljava/lang/String;\n+  #163 = InterfaceMethodref #345.#525     // java/sql/ResultSet.getMetaData:()Ljava/sql/ResultSetMetaData;\n+  #164 = Methodref          #4.#526       // org/apache/commons/csv/CSVFormat.withHeader:(Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat;\n+  #165 = InterfaceMethodref #346.#527     // java/sql/ResultSetMetaData.getColumnCount:()I\n+  #166 = InterfaceMethodref #346.#528     // java/sql/ResultSetMetaData.getColumnLabel:(I)Ljava/lang/String;\n+  #167 = Methodref          #4.#529       // org/apache/commons/csv/CSVFormat.withIgnoreEmptyLines:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #168 = Methodref          #4.#530       // org/apache/commons/csv/CSVFormat.withIgnoreHeaderCase:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #169 = Methodref          #4.#531       // org/apache/commons/csv/CSVFormat.withIgnoreSurroundingSpaces:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #170 = Methodref          #4.#532       // org/apache/commons/csv/CSVFormat.withQuote:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n+  #171 = String             #533          // The quoteChar cannot be a line break\n+  #172 = Methodref          #133.#534     // java/lang/String.valueOf:(C)Ljava/lang/String;\n+  #173 = Methodref          #4.#535       // org/apache/commons/csv/CSVFormat.withRecordSeparator:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n+  #174 = Methodref          #4.#536       // org/apache/commons/csv/CSVFormat.withSkipHeaderRecord:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #175 = String             #537          // line.separator\n+  #176 = Methodref          #453.#538     // java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;\n+  #177 = Methodref          #4.#539       // org/apache/commons/csv/CSVFormat.withTrailingDelimiter:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #178 = Methodref          #4.#540       // org/apache/commons/csv/CSVFormat.withTrim:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #179 = Fieldref           #1.#541       // org/apache/commons/csv/Constants.DOUBLE_QUOTE_CHAR:Ljava/lang/Character;\n+  #180 = String             #542          // \\r\\n\n+  #181 = Fieldref           #4.#543       // org/apache/commons/csv/CSVFormat.DEFAULT:Lorg/apache/commons/csv/CSVFormat;\n+  #182 = Methodref          #4.#544       // org/apache/commons/csv/CSVFormat.withAllowMissingColumnNames:()Lorg/apache/commons/csv/CSVFormat;\n+  #183 = Fieldref           #4.#545       // org/apache/commons/csv/CSVFormat.EXCEL:Lorg/apache/commons/csv/CSVFormat;\n+  #184 = Methodref          #4.#546       // org/apache/commons/csv/CSVFormat.withDelimiter:(C)Lorg/apache/commons/csv/CSVFormat;\n+  #185 = Methodref          #4.#547       // org/apache/commons/csv/CSVFormat.withEscape:(C)Lorg/apache/commons/csv/CSVFormat;\n+  #186 = Methodref          #4.#548       // org/apache/commons/csv/CSVFormat.withRecordSeparator:(C)Lorg/apache/commons/csv/CSVFormat;\n+  #187 = Fieldref           #4.#549       // org/apache/commons/csv/CSVFormat.INFORMIX_UNLOAD:Lorg/apache/commons/csv/CSVFormat;\n+  #188 = Fieldref           #4.#550       // org/apache/commons/csv/CSVFormat.INFORMIX_UNLOAD_CSV:Lorg/apache/commons/csv/CSVFormat;\n+  #189 = Methodref          #4.#551       // org/apache/commons/csv/CSVFormat.withQuoteMode:(Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat;\n+  #190 = Fieldref           #4.#552       // org/apache/commons/csv/CSVFormat.MONGODB_CSV:Lorg/apache/commons/csv/CSVFormat;\n+  #191 = Fieldref           #4.#553       // org/apache/commons/csv/CSVFormat.MONGODB_TSV:Lorg/apache/commons/csv/CSVFormat;\n+  #192 = String             #554          // \\\\N\n+  #193 = Methodref          #4.#555       // org/apache/commons/csv/CSVFormat.withNullString:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n+  #194 = Fieldref           #266.#556     // org/apache/commons/csv/QuoteMode.ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n+  #195 = Fieldref           #4.#557       // org/apache/commons/csv/CSVFormat.MYSQL:Lorg/apache/commons/csv/CSVFormat;\n+  #196 = Methodref          #4.#558       // org/apache/commons/csv/CSVFormat.withTrim:()Lorg/apache/commons/csv/CSVFormat;\n+  #197 = Methodref          #4.#559       // org/apache/commons/csv/CSVFormat.withSystemRecordSeparator:()Lorg/apache/commons/csv/CSVFormat;\n+  #198 = Fieldref           #4.#560       // org/apache/commons/csv/CSVFormat.ORACLE:Lorg/apache/commons/csv/CSVFormat;\n+  #199 = Fieldref           #4.#561       // org/apache/commons/csv/CSVFormat.POSTGRESQL_CSV:Lorg/apache/commons/csv/CSVFormat;\n+  #200 = Fieldref           #4.#562       // org/apache/commons/csv/CSVFormat.POSTGRESQL_TEXT:Lorg/apache/commons/csv/CSVFormat;\n+  #201 = Fieldref           #4.#563       // org/apache/commons/csv/CSVFormat.RFC4180:Lorg/apache/commons/csv/CSVFormat;\n+  #202 = Methodref          #4.#564       // org/apache/commons/csv/CSVFormat.withIgnoreSurroundingSpaces:()Lorg/apache/commons/csv/CSVFormat;\n+  #203 = Fieldref           #4.#565       // org/apache/commons/csv/CSVFormat.TDF:Lorg/apache/commons/csv/CSVFormat;\n+  #204 = Class              #566          // java/lang/Object\n+  #205 = Class              #567          // java/io/Serializable\n+  #206 = Class              #568          // org/apache/commons/csv/CSVFormat$1\n   #207 = Utf8               InnerClasses\n-  #208 = Class              #585          // org/apache/commons/csv/CSVFormat$Predefined\n+  #208 = Class              #569          // org/apache/commons/csv/CSVFormat$Predefined\n   #209 = Utf8               Predefined\n   #210 = Utf8               DEFAULT\n   #211 = Utf8               Lorg/apache/commons/csv/CSVFormat;\n   #212 = Utf8               EXCEL\n   #213 = Utf8               INFORMIX_UNLOAD\n   #214 = Utf8               INFORMIX_UNLOAD_CSV\n   #215 = Utf8               MONGODB_CSV\n@@ -267,413 +267,397 @@\n   #258 = Utf8               (Ljava/lang/Character;)Z\n   #259 = Utf8               newFormat\n   #260 = Utf8               (C)Lorg/apache/commons/csv/CSVFormat;\n   #261 = Utf8               valueOf\n   #262 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n   #263 = Utf8               <init>\n   #264 = Utf8               (CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZZZ)V\n-  #265 = Class              #381          // org/apache/commons/csv/CSVFormat\n-  #266 = Class              #586          // java/lang/Character\n-  #267 = Class              #587          // org/apache/commons/csv/QuoteMode\n-  #268 = Class              #508          // java/lang/String\n-  #269 = Class              #588          // \"[Ljava/lang/Object;\"\n-  #270 = Utf8               equals\n-  #271 = Utf8               (Ljava/lang/Object;)Z\n-  #272 = Utf8               format\n-  #273 = Utf8               ([Ljava/lang/Object;)Ljava/lang/String;\n-  #274 = Class              #417          // java/io/StringWriter\n-  #275 = Class              #418          // org/apache/commons/csv/CSVPrinter\n-  #276 = Class              #423          // java/lang/Throwable\n-  #277 = Class              #425          // java/io/IOException\n-  #278 = Utf8               getAllowDuplicateHeaderNames\n-  #279 = Utf8               ()Z\n-  #280 = Utf8               getAllowMissingColumnNames\n-  #281 = Utf8               getAutoFlush\n-  #282 = Utf8               getCommentMarker\n-  #283 = Utf8               ()Ljava/lang/Character;\n-  #284 = Utf8               getDelimiter\n-  #285 = Utf8               ()C\n-  #286 = Utf8               getEscapeCharacter\n-  #287 = Utf8               getHeader\n-  #288 = Utf8               ()[Ljava/lang/String;\n-  #289 = Utf8               getHeaderComments\n-  #290 = Utf8               getIgnoreEmptyLines\n-  #291 = Utf8               getIgnoreHeaderCase\n-  #292 = Utf8               getIgnoreSurroundingSpaces\n-  #293 = Utf8               getNullString\n-  #294 = Utf8               ()Ljava/lang/String;\n-  #295 = Utf8               getQuoteCharacter\n-  #296 = Utf8               getQuoteMode\n-  #297 = Utf8               ()Lorg/apache/commons/csv/QuoteMode;\n-  #298 = Utf8               getRecordSeparator\n-  #299 = Utf8               getSkipHeaderRecord\n-  #300 = Utf8               getTrailingDelimiter\n-  #301 = Utf8               getTrim\n-  #302 = Utf8               hashCode\n-  #303 = Utf8               ()I\n-  #304 = Utf8               isCommentMarkerSet\n-  #305 = Utf8               isEscapeCharacterSet\n-  #306 = Utf8               isNullStringSet\n-  #307 = Utf8               isQuoteCharacterSet\n-  #308 = Utf8               parse\n-  #309 = Utf8               (Ljava/io/Reader;)Lorg/apache/commons/csv/CSVParser;\n-  #310 = Utf8               Exceptions\n-  #311 = Utf8               print\n-  #312 = Utf8               (Ljava/lang/Appendable;)Lorg/apache/commons/csv/CSVPrinter;\n-  #313 = Utf8               (Ljava/io/File;Ljava/nio/charset/Charset;)Lorg/apache/commons/csv/CSVPrinter;\n-  #314 = Utf8               (Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n-  #315 = Class              #441          // java/lang/CharSequence\n-  #316 = Utf8               (Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n-  #317 = Utf8               (Ljava/nio/file/Path;Ljava/nio/charset/Charset;)Lorg/apache/commons/csv/CSVPrinter;\n-  #318 = Utf8               (Ljava/io/Reader;Ljava/lang/Appendable;Z)V\n-  #319 = Utf8               printer\n-  #320 = Utf8               ()Lorg/apache/commons/csv/CSVPrinter;\n-  #321 = Utf8               println\n-  #322 = Utf8               (Ljava/lang/Appendable;)V\n-  #323 = Utf8               printRecord\n-  #324 = Utf8               (Ljava/lang/Appendable;[Ljava/lang/Object;)V\n-  #325 = Class              #589          // java/lang/Appendable\n-  #326 = Class              #582          // java/lang/Object\n-  #327 = Utf8               printWithEscapes\n-  #328 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/Appendable;)V\n-  #329 = Utf8               (Ljava/io/Reader;Ljava/lang/Appendable;)V\n-  #330 = Class              #442          // java/io/Reader\n-  #331 = Class              #406          // java/lang/StringBuilder\n-  #332 = Utf8               printWithQuotes\n-  #333 = Utf8               toString\n-  #334 = Utf8               toStringArray\n-  #335 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/String;\n-  #336 = Utf8               (Ljava/lang/CharSequence;)Ljava/lang/CharSequence;\n-  #337 = Utf8               validate\n-  #338 = Utf8               ()V\n-  #339 = Class              #590          // java/util/Set\n-  #340 = Utf8               withAllowDuplicateHeaderNames\n-  #341 = Utf8               ()Lorg/apache/commons/csv/CSVFormat;\n-  #342 = Utf8               (Z)Lorg/apache/commons/csv/CSVFormat;\n-  #343 = Utf8               withAllowMissingColumnNames\n-  #344 = Utf8               withAutoFlush\n-  #345 = Utf8               withCommentMarker\n-  #346 = Utf8               (Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n-  #347 = Utf8               withDelimiter\n-  #348 = Utf8               withEscape\n-  #349 = Utf8               withFirstRecordAsHeader\n-  #350 = Utf8               withHeader\n-  #351 = Utf8               (Ljava/lang/Class;)Lorg/apache/commons/csv/CSVFormat;\n-  #352 = Utf8               Signature\n-  #353 = Utf8               (Ljava/lang/Class<+Ljava/lang/Enum<*>;>;)Lorg/apache/commons/csv/CSVFormat;\n-  #354 = Utf8               (Ljava/sql/ResultSet;)Lorg/apache/commons/csv/CSVFormat;\n-  #355 = Class              #591          // java/sql/ResultSet\n-  #356 = Class              #592          // java/sql/ResultSetMetaData\n-  #357 = Class              #593          // java/sql/SQLException\n-  #358 = Utf8               (Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat;\n-  #359 = Utf8               ([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n-  #360 = Utf8               withHeaderComments\n-  #361 = Utf8               ([Ljava/lang/Object;)Lorg/apache/commons/csv/CSVFormat;\n-  #362 = Utf8               withIgnoreEmptyLines\n-  #363 = Utf8               withIgnoreHeaderCase\n-  #364 = Utf8               withIgnoreSurroundingSpaces\n-  #365 = Utf8               withNullString\n-  #366 = Utf8               withQuote\n-  #367 = Utf8               withQuoteMode\n-  #368 = Utf8               (Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat;\n-  #369 = Utf8               withRecordSeparator\n-  #370 = Utf8               withSkipHeaderRecord\n-  #371 = Utf8               withSystemRecordSeparator\n-  #372 = Utf8               withTrailingDelimiter\n-  #373 = Utf8               withTrim\n-  #374 = Utf8               <clinit>\n-  #375 = Utf8               SourceFile\n-  #376 = Utf8               CSVFormat.java\n-  #377 = Utf8               org/apache/commons/csv/Constants\n-  #378 = Class              #586          // java/lang/Character\n-  #379 = NameAndType        #594:#285     // charValue:()C\n-  #380 = NameAndType        #253:#254     // isLineBreak:(C)Z\n-  #381 = Utf8               org/apache/commons/csv/CSVFormat\n-  #382 = NameAndType        #263:#264     // \"<init>\":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZZZ)V\n-  #383 = NameAndType        #261:#595     // valueOf:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Predefined;\n-  #384 = NameAndType        #596:#341     // getFormat:()Lorg/apache/commons/csv/CSVFormat;\n-  #385 = NameAndType        #263:#338     // \"<init>\":()V\n-  #386 = NameAndType        #234:#235     // delimiter:C\n-  #387 = NameAndType        #245:#233     // quoteCharacter:Ljava/lang/Character;\n-  #388 = NameAndType        #247:#248     // quoteMode:Lorg/apache/commons/csv/QuoteMode;\n-  #389 = NameAndType        #232:#233     // commentMarker:Ljava/lang/Character;\n-  #390 = NameAndType        #236:#233     // escapeCharacter:Ljava/lang/Character;\n-  #391 = NameAndType        #242:#229     // ignoreSurroundingSpaces:Z\n-  #392 = NameAndType        #230:#229     // allowMissingColumnNames:Z\n-  #393 = NameAndType        #240:#229     // ignoreEmptyLines:Z\n-  #394 = NameAndType        #249:#244     // recordSeparator:Ljava/lang/String;\n-  #395 = NameAndType        #243:#244     // nullString:Ljava/lang/String;\n-  #396 = NameAndType        #334:#335     // toStringArray:([Ljava/lang/Object;)[Ljava/lang/String;\n-  #397 = NameAndType        #239:#238     // headerComments:[Ljava/lang/String;\n-  #398 = Class              #238          // \"[Ljava/lang/String;\"\n-  #399 = NameAndType        #597:#598     // clone:()Ljava/lang/Object;\n-  #400 = NameAndType        #237:#238     // header:[Ljava/lang/String;\n-  #401 = NameAndType        #250:#229     // skipHeaderRecord:Z\n-  #402 = NameAndType        #241:#229     // ignoreHeaderCase:Z\n-  #403 = NameAndType        #251:#229     // trailingDelimiter:Z\n-  #404 = NameAndType        #252:#229     // trim:Z\n-  #405 = NameAndType        #231:#229     // autoFlush:Z\n-  #406 = Utf8               java/lang/StringBuilder\n-  #407 = NameAndType        #599:#600     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #408 = NameAndType        #599:#601     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #409 = NameAndType        #333:#294     // toString:()Ljava/lang/String;\n-  #410 = NameAndType        #246:#244     // quotedNullString:Ljava/lang/String;\n-  #411 = NameAndType        #228:#229     // allowDuplicateHeaderNames:Z\n-  #412 = NameAndType        #337:#338     // validate:()V\n-  #413 = NameAndType        #602:#603     // getClass:()Ljava/lang/Class;\n-  #414 = NameAndType        #270:#271     // equals:(Ljava/lang/Object;)Z\n-  #415 = Class              #604          // java/util/Arrays\n-  #416 = NameAndType        #270:#605     // equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z\n-  #417 = Utf8               java/io/StringWriter\n-  #418 = Utf8               org/apache/commons/csv/CSVPrinter\n-  #419 = NameAndType        #263:#606     // \"<init>\":(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V\n-  #420 = NameAndType        #323:#607     // printRecord:([Ljava/lang/Object;)V\n-  #421 = NameAndType        #252:#294     // trim:()Ljava/lang/String;\n-  #422 = NameAndType        #608:#338     // close:()V\n-  #423 = Utf8               java/lang/Throwable\n-  #424 = NameAndType        #609:#610     // addSuppressed:(Ljava/lang/Throwable;)V\n-  #425 = Utf8               java/io/IOException\n-  #426 = Utf8               java/lang/IllegalStateException\n-  #427 = NameAndType        #263:#610     // \"<init>\":(Ljava/lang/Throwable;)V\n-  #428 = Class              #238          // \"[Ljava/lang/String;\"\n-  #429 = Class              #238          // \"[Ljava/lang/String;\"\n-  #430 = Class              #587          // org/apache/commons/csv/QuoteMode\n-  #431 = NameAndType        #302:#303     // hashCode:()I\n-  #432 = NameAndType        #302:#611     // hashCode:([Ljava/lang/Object;)I\n-  #433 = Utf8               org/apache/commons/csv/CSVParser\n-  #434 = NameAndType        #263:#612     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n-  #435 = Utf8               java/io/OutputStreamWriter\n-  #436 = Utf8               java/io/FileOutputStream\n-  #437 = NameAndType        #263:#613     // \"<init>\":(Ljava/io/File;)V\n-  #438 = NameAndType        #263:#614     // \"<init>\":(Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V\n-  #439 = Utf8\n-  #440 = NameAndType        #615:#248     // ALL:Lorg/apache/commons/csv/QuoteMode;\n-  #441 = Utf8               java/lang/CharSequence\n-  #442 = Utf8               java/io/Reader\n-  #443 = NameAndType        #311:#318     // print:(Ljava/io/Reader;Ljava/lang/Appendable;Z)V\n-  #444 = NameAndType        #301:#279     // getTrim:()Z\n-  #445 = NameAndType        #252:#336     // trim:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;\n-  #446 = NameAndType        #311:#316     // print:(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n-  #447 = NameAndType        #616:#303     // length:()I\n-  #448 = NameAndType        #284:#285     // getDelimiter:()C\n-  #449 = Class              #589          // java/lang/Appendable\n-  #450 = NameAndType        #599:#617     // append:(C)Ljava/lang/Appendable;\n-  #451 = NameAndType        #599:#618     // append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;\n-  #452 = NameAndType        #307:#279     // isQuoteCharacterSet:()Z\n-  #453 = NameAndType        #332:#316     // printWithQuotes:(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n-  #454 = NameAndType        #305:#279     // isEscapeCharacterSet:()Z\n-  #455 = NameAndType        #327:#328     // printWithEscapes:(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V\n-  #456 = NameAndType        #599:#619     // append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;\n-  #457 = Utf8               java/nio/file/OpenOption\n-  #458 = Class              #620          // java/nio/file/Files\n-  #459 = NameAndType        #621:#622     // newBufferedWriter:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;\n-  #460 = NameAndType        #311:#312     // print:(Ljava/lang/Appendable;)Lorg/apache/commons/csv/CSVPrinter;\n-  #461 = NameAndType        #332:#329     // printWithQuotes:(Ljava/io/Reader;Ljava/lang/Appendable;)V\n-  #462 = NameAndType        #327:#329     // printWithEscapes:(Ljava/io/Reader;Ljava/lang/Appendable;)V\n-  #463 = Utf8               java/io/Writer\n-  #464 = NameAndType        #623:#624     // copyLarge:(Ljava/io/Reader;Ljava/io/Writer;)J\n-  #465 = NameAndType        #625:#626     // copy:(Ljava/io/Reader;Ljava/lang/Appendable;)J\n-  #466 = Class              #627          // java/lang/System\n-  #467 = NameAndType        #628:#629     // out:Ljava/io/PrintStream;\n-  #468 = NameAndType        #300:#279     // getTrailingDelimiter:()Z\n-  #469 = NameAndType        #311:#314     // print:(Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n-  #470 = NameAndType        #321:#322     // println:(Ljava/lang/Appendable;)V\n-  #471 = NameAndType        #286:#283     // getEscapeCharacter:()Ljava/lang/Character;\n-  #472 = NameAndType        #630:#631     // charAt:(I)C\n-  #473 = Utf8               org/apache/commons/csv/IOUtils\n-  #474 = NameAndType        #263:#632     // \"<init>\":(I)V\n-  #475 = NameAndType        #633:#303     // read:()I\n-  #476 = NameAndType        #599:#634     // append:(C)Ljava/lang/StringBuilder;\n-  #477 = NameAndType        #635:#636     // substring:(II)Ljava/lang/String;\n-  #478 = NameAndType        #637:#632     // setLength:(I)V\n-  #479 = NameAndType        #295:#283     // getQuoteCharacter:()Ljava/lang/Character;\n-  #480 = NameAndType        #296:#297     // getQuoteMode:()Lorg/apache/commons/csv/QuoteMode;\n-  #481 = NameAndType        #638:#248     // MINIMAL:Lorg/apache/commons/csv/QuoteMode;\n-  #482 = NameAndType        #639:#640     // $SwitchMap$org$apache$commons$csv$QuoteMode:[I\n-  #483 = NameAndType        #641:#303     // ordinal:()I\n-  #484 = Utf8               java/lang/Number\n-  #485 = Utf8               Unexpected Quote value:\n-  #486 = NameAndType        #263:#642     // \"<init>\":(Ljava/lang/String;)V\n-  #487 = NameAndType        #643:#248     // NONE:Lorg/apache/commons/csv/QuoteMode;\n-  #488 = Utf8               Delimiter=<\n-  #489 = Utf8               Escape=<\n-  #490 = Utf8               QuoteChar=<\n-  #491 = Utf8               QuoteMode=<\n-  #492 = NameAndType        #304:#279     // isCommentMarkerSet:()Z\n-  #493 = Utf8               CommentStart=<\n-  #494 = NameAndType        #306:#279     // isNullStringSet:()Z\n-  #495 = Utf8               NullString=<\n-  #496 = Utf8               RecordSeparator=<\n-  #497 = NameAndType        #290:#279     // getIgnoreEmptyLines:()Z\n-  #498 = Utf8                EmptyLines:ignored\n-  #499 = NameAndType        #292:#279     // getIgnoreSurroundingSpaces:()Z\n-  #500 = Utf8                SurroundingSpaces:ignored\n-  #501 = NameAndType        #291:#279     // getIgnoreHeaderCase:()Z\n-  #502 = Utf8                IgnoreHeaderCase:ignored\n-  #503 = Utf8                SkipHeaderRecord:\n-  #504 = NameAndType        #599:#644     // append:(Z)Ljava/lang/StringBuilder;\n-  #505 = Utf8               HeaderComments:\n-  #506 = NameAndType        #333:#273     // toString:([Ljava/lang/Object;)Ljava/lang/String;\n-  #507 = Utf8               Header:\n-  #508 = Utf8               java/lang/String\n-  #509 = NameAndType        #645:#646     // subSequence:(II)Ljava/lang/CharSequence;\n-  #510 = Utf8               java/lang/IllegalArgumentException\n-  #511 = Utf8               The delimiter cannot be a line break\n-  #512 = Utf8               The quoteChar character and the delimiter cannot be the same (\\'\n-  #513 = Utf8               \\')\n-  #514 = Utf8               The escape character and the delimiter cannot be the same (\\'\n-  #515 = Utf8               The comment start character and the delimiter cannot be the same (\\'\n-  #516 = Utf8               The comment start character and the quoteChar cannot be the same (\\'\n-  #517 = Utf8               The comment start and the escape character cannot be the same (\\'\n-  #518 = Utf8               No quotes mode set but no escape character is set\n-  #519 = Utf8               java/util/HashSet\n-  #520 = Class              #590          // java/util/Set\n-  #521 = NameAndType        #647:#271     // add:(Ljava/lang/Object;)Z\n-  #522 = Utf8               The header contains a duplicate entry: \\'\n-  #523 = Utf8               \\' in\n-  #524 = NameAndType        #340:#342     // withAllowDuplicateHeaderNames:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #525 = NameAndType        #343:#342     // withAllowMissingColumnNames:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #526 = NameAndType        #261:#648     // valueOf:(C)Ljava/lang/Character;\n-  #527 = NameAndType        #345:#346     // withCommentMarker:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n-  #528 = NameAndType        #253:#258     // isLineBreak:(Ljava/lang/Character;)Z\n-  #529 = Utf8               The comment start marker character cannot be a line break\n-  #530 = NameAndType        #348:#346     // withEscape:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n-  #531 = Utf8               The escape character cannot be a line break\n-  #532 = NameAndType        #350:#359     // withHeader:([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n-  #533 = NameAndType        #370:#341     // withSkipHeaderRecord:()Lorg/apache/commons/csv/CSVFormat;\n-  #534 = Class              #649          // java/lang/Class\n-  #535 = NameAndType        #650:#651     // getEnumConstants:()[Ljava/lang/Object;\n-  #536 = Utf8               [Ljava/lang/Enum;\n-  #537 = Class              #652          // java/lang/Enum\n-  #538 = NameAndType        #653:#294     // name:()Ljava/lang/String;\n-  #539 = Class              #591          // java/sql/ResultSet\n-  #540 = NameAndType        #654:#655     // getMetaData:()Ljava/sql/ResultSetMetaData;\n-  #541 = NameAndType        #350:#358     // withHeader:(Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat;\n-  #542 = Class              #592          // java/sql/ResultSetMetaData\n-  #543 = NameAndType        #656:#303     // getColumnCount:()I\n-  #544 = NameAndType        #657:#658     // getColumnLabel:(I)Ljava/lang/String;\n-  #545 = NameAndType        #362:#342     // withIgnoreEmptyLines:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #546 = NameAndType        #363:#342     // withIgnoreHeaderCase:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #547 = NameAndType        #364:#342     // withIgnoreSurroundingSpaces:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #548 = NameAndType        #366:#346     // withQuote:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n-  #549 = Utf8               The quoteChar cannot be a line break\n-  #550 = NameAndType        #261:#659     // valueOf:(C)Ljava/lang/String;\n-  #551 = NameAndType        #369:#262     // withRecordSeparator:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n-  #552 = NameAndType        #370:#342     // withSkipHeaderRecord:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #553 = Utf8               line.separator\n-  #554 = NameAndType        #660:#661     // getProperty:(Ljava/lang/String;)Ljava/lang/String;\n-  #555 = NameAndType        #372:#342     // withTrailingDelimiter:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #556 = NameAndType        #373:#342     // withTrim:(Z)Lorg/apache/commons/csv/CSVFormat;\n-  #557 = NameAndType        #662:#233     // DOUBLE_QUOTE_CHAR:Ljava/lang/Character;\n-  #558 = Utf8               \\r\\n\n-  #559 = NameAndType        #210:#211     // DEFAULT:Lorg/apache/commons/csv/CSVFormat;\n-  #560 = NameAndType        #343:#341     // withAllowMissingColumnNames:()Lorg/apache/commons/csv/CSVFormat;\n-  #561 = NameAndType        #212:#211     // EXCEL:Lorg/apache/commons/csv/CSVFormat;\n-  #562 = NameAndType        #347:#260     // withDelimiter:(C)Lorg/apache/commons/csv/CSVFormat;\n-  #563 = NameAndType        #348:#260     // withEscape:(C)Lorg/apache/commons/csv/CSVFormat;\n-  #564 = NameAndType        #369:#260     // withRecordSeparator:(C)Lorg/apache/commons/csv/CSVFormat;\n-  #565 = NameAndType        #213:#211     // INFORMIX_UNLOAD:Lorg/apache/commons/csv/CSVFormat;\n-  #566 = NameAndType        #214:#211     // INFORMIX_UNLOAD_CSV:Lorg/apache/commons/csv/CSVFormat;\n-  #567 = NameAndType        #367:#368     // withQuoteMode:(Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat;\n-  #568 = NameAndType        #215:#211     // MONGODB_CSV:Lorg/apache/commons/csv/CSVFormat;\n-  #569 = NameAndType        #216:#211     // MONGODB_TSV:Lorg/apache/commons/csv/CSVFormat;\n-  #570 = Utf8               \\\\N\n-  #571 = NameAndType        #365:#262     // withNullString:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n-  #572 = NameAndType        #663:#248     // ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n-  #573 = NameAndType        #217:#211     // MYSQL:Lorg/apache/commons/csv/CSVFormat;\n-  #574 = NameAndType        #373:#341     // withTrim:()Lorg/apache/commons/csv/CSVFormat;\n-  #575 = NameAndType        #371:#341     // withSystemRecordSeparator:()Lorg/apache/commons/csv/CSVFormat;\n-  #576 = NameAndType        #218:#211     // ORACLE:Lorg/apache/commons/csv/CSVFormat;\n-  #577 = NameAndType        #219:#211     // POSTGRESQL_CSV:Lorg/apache/commons/csv/CSVFormat;\n-  #578 = NameAndType        #220:#211     // POSTGRESQL_TEXT:Lorg/apache/commons/csv/CSVFormat;\n-  #579 = NameAndType        #221:#211     // RFC4180:Lorg/apache/commons/csv/CSVFormat;\n-  #580 = NameAndType        #364:#341     // withIgnoreSurroundingSpaces:()Lorg/apache/commons/csv/CSVFormat;\n-  #581 = NameAndType        #227:#211     // TDF:Lorg/apache/commons/csv/CSVFormat;\n-  #582 = Utf8               java/lang/Object\n-  #583 = Utf8               java/io/Serializable\n-  #584 = Utf8               org/apache/commons/csv/CSVFormat$1\n-  #585 = Utf8               org/apache/commons/csv/CSVFormat$Predefined\n-  #586 = Utf8               java/lang/Character\n-  #587 = Utf8               org/apache/commons/csv/QuoteMode\n-  #588 = Utf8               [Ljava/lang/Object;\n-  #589 = Utf8               java/lang/Appendable\n-  #590 = Utf8               java/util/Set\n-  #591 = Utf8               java/sql/ResultSet\n-  #592 = Utf8               java/sql/ResultSetMetaData\n-  #593 = Utf8               java/sql/SQLException\n-  #594 = Utf8               charValue\n-  #595 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Predefined;\n-  #596 = Utf8               getFormat\n-  #597 = Utf8               clone\n-  #598 = Utf8               ()Ljava/lang/Object;\n-  #599 = Utf8               append\n-  #600 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #601 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #602 = Utf8               getClass\n-  #603 = Utf8               ()Ljava/lang/Class;\n-  #604 = Utf8               java/util/Arrays\n-  #605 = Utf8               ([Ljava/lang/Object;[Ljava/lang/Object;)Z\n-  #606 = Utf8               (Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V\n-  #607 = Utf8               ([Ljava/lang/Object;)V\n-  #608 = Utf8               close\n-  #609 = Utf8               addSuppressed\n-  #610 = Utf8               (Ljava/lang/Throwable;)V\n-  #611 = Utf8               ([Ljava/lang/Object;)I\n-  #612 = Utf8               (Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n-  #613 = Utf8               (Ljava/io/File;)V\n-  #614 = Utf8               (Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V\n-  #615 = Utf8               ALL\n-  #616 = Utf8               length\n-  #617 = Utf8               (C)Ljava/lang/Appendable;\n-  #618 = Utf8               (Ljava/lang/CharSequence;)Ljava/lang/Appendable;\n-  #619 = Utf8               (Ljava/lang/CharSequence;II)Ljava/lang/Appendable;\n-  #620 = Utf8               java/nio/file/Files\n-  #621 = Utf8               newBufferedWriter\n-  #622 = Utf8               (Ljava/nio/file/Path;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;\n-  #623 = Utf8               copyLarge\n-  #624 = Utf8               (Ljava/io/Reader;Ljava/io/Writer;)J\n-  #625 = Utf8               copy\n-  #626 = Utf8               (Ljava/io/Reader;Ljava/lang/Appendable;)J\n-  #627 = Utf8               java/lang/System\n-  #628 = Utf8               out\n-  #629 = Utf8               Ljava/io/PrintStream;\n-  #630 = Utf8               charAt\n-  #631 = Utf8               (I)C\n-  #632 = Utf8               (I)V\n-  #633 = Utf8               read\n-  #634 = Utf8               (C)Ljava/lang/StringBuilder;\n-  #635 = Utf8               substring\n-  #636 = Utf8               (II)Ljava/lang/String;\n-  #637 = Utf8               setLength\n-  #638 = Utf8               MINIMAL\n-  #639 = Utf8               $SwitchMap$org$apache$commons$csv$QuoteMode\n-  #640 = Utf8               [I\n-  #641 = Utf8               ordinal\n-  #642 = Utf8               (Ljava/lang/String;)V\n-  #643 = Utf8               NONE\n-  #644 = Utf8               (Z)Ljava/lang/StringBuilder;\n-  #645 = Utf8               subSequence\n-  #646 = Utf8               (II)Ljava/lang/CharSequence;\n-  #647 = Utf8               add\n-  #648 = Utf8               (C)Ljava/lang/Character;\n-  #649 = Utf8               java/lang/Class\n-  #650 = Utf8               getEnumConstants\n-  #651 = Utf8               ()[Ljava/lang/Object;\n-  #652 = Utf8               java/lang/Enum\n-  #653 = Utf8               name\n-  #654 = Utf8               getMetaData\n-  #655 = Utf8               ()Ljava/sql/ResultSetMetaData;\n-  #656 = Utf8               getColumnCount\n-  #657 = Utf8               getColumnLabel\n-  #658 = Utf8               (I)Ljava/lang/String;\n-  #659 = Utf8               (C)Ljava/lang/String;\n-  #660 = Utf8               getProperty\n-  #661 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #662 = Utf8               DOUBLE_QUOTE_CHAR\n-  #663 = Utf8               ALL_NON_NULL\n+  #265 = Class              #570          // java/lang/Character\n+  #266 = Class              #571          // org/apache/commons/csv/QuoteMode\n+  #267 = Class              #572          // \"[Ljava/lang/Object;\"\n+  #268 = Utf8               equals\n+  #269 = Utf8               (Ljava/lang/Object;)Z\n+  #270 = Utf8               format\n+  #271 = Utf8               ([Ljava/lang/Object;)Ljava/lang/String;\n+  #272 = Utf8               getAllowDuplicateHeaderNames\n+  #273 = Utf8               ()Z\n+  #274 = Utf8               getAllowMissingColumnNames\n+  #275 = Utf8               getAutoFlush\n+  #276 = Utf8               getCommentMarker\n+  #277 = Utf8               ()Ljava/lang/Character;\n+  #278 = Utf8               getDelimiter\n+  #279 = Utf8               ()C\n+  #280 = Utf8               getEscapeCharacter\n+  #281 = Utf8               getHeader\n+  #282 = Utf8               ()[Ljava/lang/String;\n+  #283 = Utf8               getHeaderComments\n+  #284 = Utf8               getIgnoreEmptyLines\n+  #285 = Utf8               getIgnoreHeaderCase\n+  #286 = Utf8               getIgnoreSurroundingSpaces\n+  #287 = Utf8               getNullString\n+  #288 = Utf8               ()Ljava/lang/String;\n+  #289 = Utf8               getQuoteCharacter\n+  #290 = Utf8               getQuoteMode\n+  #291 = Utf8               ()Lorg/apache/commons/csv/QuoteMode;\n+  #292 = Utf8               getRecordSeparator\n+  #293 = Utf8               getSkipHeaderRecord\n+  #294 = Utf8               getTrailingDelimiter\n+  #295 = Utf8               getTrim\n+  #296 = Utf8               hashCode\n+  #297 = Utf8               ()I\n+  #298 = Utf8               isCommentMarkerSet\n+  #299 = Utf8               isEscapeCharacterSet\n+  #300 = Utf8               isNullStringSet\n+  #301 = Utf8               isQuoteCharacterSet\n+  #302 = Utf8               parse\n+  #303 = Utf8               (Ljava/io/Reader;)Lorg/apache/commons/csv/CSVParser;\n+  #304 = Utf8               Exceptions\n+  #305 = Utf8               print\n+  #306 = Utf8               (Ljava/lang/Appendable;)Lorg/apache/commons/csv/CSVPrinter;\n+  #307 = Utf8               (Ljava/io/File;Ljava/nio/charset/Charset;)Lorg/apache/commons/csv/CSVPrinter;\n+  #308 = Utf8               (Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n+  #309 = Utf8               (Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n+  #310 = Utf8               (Ljava/nio/file/Path;Ljava/nio/charset/Charset;)Lorg/apache/commons/csv/CSVPrinter;\n+  #311 = Utf8               (Ljava/io/Reader;Ljava/lang/Appendable;Z)V\n+  #312 = Utf8               printer\n+  #313 = Utf8               ()Lorg/apache/commons/csv/CSVPrinter;\n+  #314 = Utf8               println\n+  #315 = Utf8               (Ljava/lang/Appendable;)V\n+  #316 = Utf8               printRecord\n+  #317 = Utf8               (Ljava/lang/Appendable;[Ljava/lang/Object;)V\n+  #318 = Class              #573          // java/lang/Appendable\n+  #319 = Utf8               printWithEscapes\n+  #320 = Utf8               (Ljava/lang/CharSequence;Ljava/lang/Appendable;)V\n+  #321 = Utf8               (Ljava/io/Reader;Ljava/lang/Appendable;)V\n+  #322 = Utf8               printWithQuotes\n+  #323 = Utf8               toString\n+  #324 = Utf8               toStringArray\n+  #325 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/String;\n+  #326 = Utf8               (Ljava/lang/CharSequence;)Ljava/lang/CharSequence;\n+  #327 = Utf8               validate\n+  #328 = Utf8               ()V\n+  #329 = Class              #574          // java/util/Set\n+  #330 = Utf8               withAllowDuplicateHeaderNames\n+  #331 = Utf8               ()Lorg/apache/commons/csv/CSVFormat;\n+  #332 = Utf8               (Z)Lorg/apache/commons/csv/CSVFormat;\n+  #333 = Utf8               withAllowMissingColumnNames\n+  #334 = Utf8               withAutoFlush\n+  #335 = Utf8               withCommentMarker\n+  #336 = Utf8               (Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n+  #337 = Utf8               withDelimiter\n+  #338 = Utf8               withEscape\n+  #339 = Utf8               withFirstRecordAsHeader\n+  #340 = Utf8               withHeader\n+  #341 = Utf8               (Ljava/lang/Class;)Lorg/apache/commons/csv/CSVFormat;\n+  #342 = Utf8               Signature\n+  #343 = Utf8               (Ljava/lang/Class<+Ljava/lang/Enum<*>;>;)Lorg/apache/commons/csv/CSVFormat;\n+  #344 = Utf8               (Ljava/sql/ResultSet;)Lorg/apache/commons/csv/CSVFormat;\n+  #345 = Class              #575          // java/sql/ResultSet\n+  #346 = Class              #576          // java/sql/ResultSetMetaData\n+  #347 = Class              #577          // java/sql/SQLException\n+  #348 = Utf8               (Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat;\n+  #349 = Utf8               ([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n+  #350 = Utf8               withHeaderComments\n+  #351 = Utf8               ([Ljava/lang/Object;)Lorg/apache/commons/csv/CSVFormat;\n+  #352 = Utf8               withIgnoreEmptyLines\n+  #353 = Utf8               withIgnoreHeaderCase\n+  #354 = Utf8               withIgnoreSurroundingSpaces\n+  #355 = Utf8               withNullString\n+  #356 = Utf8               withQuote\n+  #357 = Utf8               withQuoteMode\n+  #358 = Utf8               (Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat;\n+  #359 = Utf8               withRecordSeparator\n+  #360 = Utf8               withSkipHeaderRecord\n+  #361 = Utf8               withSystemRecordSeparator\n+  #362 = Utf8               withTrailingDelimiter\n+  #363 = Utf8               withTrim\n+  #364 = Utf8               <clinit>\n+  #365 = Utf8               SourceFile\n+  #366 = Utf8               CSVFormat.java\n+  #367 = Utf8               org/apache/commons/csv/Constants\n+  #368 = NameAndType        #578:#279     // charValue:()C\n+  #369 = NameAndType        #253:#254     // isLineBreak:(C)Z\n+  #370 = Utf8               org/apache/commons/csv/CSVFormat\n+  #371 = NameAndType        #263:#264     // \"<init>\":(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZZZ)V\n+  #372 = NameAndType        #261:#579     // valueOf:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Predefined;\n+  #373 = NameAndType        #580:#331     // getFormat:()Lorg/apache/commons/csv/CSVFormat;\n+  #374 = NameAndType        #263:#328     // \"<init>\":()V\n+  #375 = NameAndType        #234:#235     // delimiter:C\n+  #376 = NameAndType        #245:#233     // quoteCharacter:Ljava/lang/Character;\n+  #377 = NameAndType        #247:#248     // quoteMode:Lorg/apache/commons/csv/QuoteMode;\n+  #378 = NameAndType        #232:#233     // commentMarker:Ljava/lang/Character;\n+  #379 = NameAndType        #236:#233     // escapeCharacter:Ljava/lang/Character;\n+  #380 = NameAndType        #242:#229     // ignoreSurroundingSpaces:Z\n+  #381 = NameAndType        #230:#229     // allowMissingColumnNames:Z\n+  #382 = NameAndType        #240:#229     // ignoreEmptyLines:Z\n+  #383 = NameAndType        #249:#244     // recordSeparator:Ljava/lang/String;\n+  #384 = NameAndType        #243:#244     // nullString:Ljava/lang/String;\n+  #385 = NameAndType        #324:#325     // toStringArray:([Ljava/lang/Object;)[Ljava/lang/String;\n+  #386 = NameAndType        #239:#238     // headerComments:[Ljava/lang/String;\n+  #387 = Class              #238          // \"[Ljava/lang/String;\"\n+  #388 = NameAndType        #581:#582     // clone:()Ljava/lang/Object;\n+  #389 = NameAndType        #237:#238     // header:[Ljava/lang/String;\n+  #390 = NameAndType        #250:#229     // skipHeaderRecord:Z\n+  #391 = NameAndType        #241:#229     // ignoreHeaderCase:Z\n+  #392 = NameAndType        #251:#229     // trailingDelimiter:Z\n+  #393 = NameAndType        #252:#229     // trim:Z\n+  #394 = NameAndType        #231:#229     // autoFlush:Z\n+  #395 = Utf8               java/lang/StringBuilder\n+  #396 = NameAndType        #583:#584     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #397 = NameAndType        #583:#585     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #398 = NameAndType        #323:#288     // toString:()Ljava/lang/String;\n+  #399 = NameAndType        #246:#244     // quotedNullString:Ljava/lang/String;\n+  #400 = NameAndType        #228:#229     // allowDuplicateHeaderNames:Z\n+  #401 = NameAndType        #327:#328     // validate:()V\n+  #402 = NameAndType        #586:#587     // getClass:()Ljava/lang/Class;\n+  #403 = NameAndType        #268:#269     // equals:(Ljava/lang/Object;)Z\n+  #404 = Class              #588          // java/util/Arrays\n+  #405 = NameAndType        #268:#589     // equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z\n+  #406 = Utf8               java/io/StringWriter\n+  #407 = Utf8               org/apache/commons/csv/CSVPrinter\n+  #408 = NameAndType        #263:#590     // \"<init>\":(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V\n+  #409 = NameAndType        #316:#591     // printRecord:([Ljava/lang/Object;)V\n+  #410 = NameAndType        #252:#288     // trim:()Ljava/lang/String;\n+  #411 = NameAndType        #592:#328     // close:()V\n+  #412 = Utf8               java/lang/Throwable\n+  #413 = NameAndType        #593:#594     // addSuppressed:(Ljava/lang/Throwable;)V\n+  #414 = Utf8               java/io/IOException\n+  #415 = Utf8               java/lang/IllegalStateException\n+  #416 = NameAndType        #263:#594     // \"<init>\":(Ljava/lang/Throwable;)V\n+  #417 = Class              #238          // \"[Ljava/lang/String;\"\n+  #418 = Class              #238          // \"[Ljava/lang/String;\"\n+  #419 = NameAndType        #296:#297     // hashCode:()I\n+  #420 = NameAndType        #296:#595     // hashCode:([Ljava/lang/Object;)I\n+  #421 = Utf8               org/apache/commons/csv/CSVParser\n+  #422 = NameAndType        #263:#596     // \"<init>\":(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n+  #423 = Utf8               java/io/OutputStreamWriter\n+  #424 = Utf8               java/io/FileOutputStream\n+  #425 = NameAndType        #263:#597     // \"<init>\":(Ljava/io/File;)V\n+  #426 = NameAndType        #263:#598     // \"<init>\":(Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V\n+  #427 = Utf8\n+  #428 = NameAndType        #599:#248     // ALL:Lorg/apache/commons/csv/QuoteMode;\n+  #429 = Utf8               java/lang/CharSequence\n+  #430 = Utf8               java/io/Reader\n+  #431 = NameAndType        #305:#311     // print:(Ljava/io/Reader;Ljava/lang/Appendable;Z)V\n+  #432 = NameAndType        #295:#273     // getTrim:()Z\n+  #433 = NameAndType        #252:#326     // trim:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;\n+  #434 = NameAndType        #305:#309     // print:(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n+  #435 = NameAndType        #600:#297     // length:()I\n+  #436 = NameAndType        #278:#279     // getDelimiter:()C\n+  #437 = NameAndType        #583:#601     // append:(C)Ljava/lang/Appendable;\n+  #438 = NameAndType        #583:#602     // append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;\n+  #439 = NameAndType        #301:#273     // isQuoteCharacterSet:()Z\n+  #440 = NameAndType        #322:#309     // printWithQuotes:(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V\n+  #441 = NameAndType        #299:#273     // isEscapeCharacterSet:()Z\n+  #442 = NameAndType        #319:#320     // printWithEscapes:(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V\n+  #443 = NameAndType        #583:#603     // append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;\n+  #444 = Utf8               java/nio/file/OpenOption\n+  #445 = Class              #604          // java/nio/file/Files\n+  #446 = NameAndType        #605:#606     // newBufferedWriter:(Ljava/nio/file/Path;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;\n+  #447 = NameAndType        #305:#306     // print:(Ljava/lang/Appendable;)Lorg/apache/commons/csv/CSVPrinter;\n+  #448 = NameAndType        #322:#321     // printWithQuotes:(Ljava/io/Reader;Ljava/lang/Appendable;)V\n+  #449 = NameAndType        #319:#321     // printWithEscapes:(Ljava/io/Reader;Ljava/lang/Appendable;)V\n+  #450 = Utf8               java/io/Writer\n+  #451 = NameAndType        #607:#608     // copyLarge:(Ljava/io/Reader;Ljava/io/Writer;)J\n+  #452 = NameAndType        #609:#610     // copy:(Ljava/io/Reader;Ljava/lang/Appendable;)J\n+  #453 = Class              #611          // java/lang/System\n+  #454 = NameAndType        #612:#613     // out:Ljava/io/PrintStream;\n+  #455 = NameAndType        #294:#273     // getTrailingDelimiter:()Z\n+  #456 = NameAndType        #305:#308     // print:(Ljava/lang/Object;Ljava/lang/Appendable;Z)V\n+  #457 = NameAndType        #314:#315     // println:(Ljava/lang/Appendable;)V\n+  #458 = NameAndType        #280:#277     // getEscapeCharacter:()Ljava/lang/Character;\n+  #459 = NameAndType        #614:#615     // charAt:(I)C\n+  #460 = Utf8               org/apache/commons/csv/IOUtils\n+  #461 = NameAndType        #263:#616     // \"<init>\":(I)V\n+  #462 = NameAndType        #617:#297     // read:()I\n+  #463 = NameAndType        #583:#618     // append:(C)Ljava/lang/StringBuilder;\n+  #464 = NameAndType        #619:#620     // substring:(II)Ljava/lang/String;\n+  #465 = NameAndType        #621:#616     // setLength:(I)V\n+  #466 = NameAndType        #289:#277     // getQuoteCharacter:()Ljava/lang/Character;\n+  #467 = NameAndType        #290:#291     // getQuoteMode:()Lorg/apache/commons/csv/QuoteMode;\n+  #468 = NameAndType        #622:#248     // MINIMAL:Lorg/apache/commons/csv/QuoteMode;\n+  #469 = NameAndType        #623:#624     // $SwitchMap$org$apache$commons$csv$QuoteMode:[I\n+  #470 = NameAndType        #625:#297     // ordinal:()I\n+  #471 = Utf8               java/lang/Number\n+  #472 = Utf8               Unexpected Quote value:\n+  #473 = NameAndType        #263:#626     // \"<init>\":(Ljava/lang/String;)V\n+  #474 = NameAndType        #627:#248     // NONE:Lorg/apache/commons/csv/QuoteMode;\n+  #475 = Utf8               Delimiter=<\n+  #476 = Utf8               Escape=<\n+  #477 = Utf8               QuoteChar=<\n+  #478 = Utf8               QuoteMode=<\n+  #479 = NameAndType        #298:#273     // isCommentMarkerSet:()Z\n+  #480 = Utf8               CommentStart=<\n+  #481 = NameAndType        #300:#273     // isNullStringSet:()Z\n+  #482 = Utf8               NullString=<\n+  #483 = Utf8               RecordSeparator=<\n+  #484 = NameAndType        #284:#273     // getIgnoreEmptyLines:()Z\n+  #485 = Utf8                EmptyLines:ignored\n+  #486 = NameAndType        #286:#273     // getIgnoreSurroundingSpaces:()Z\n+  #487 = Utf8                SurroundingSpaces:ignored\n+  #488 = NameAndType        #285:#273     // getIgnoreHeaderCase:()Z\n+  #489 = Utf8                IgnoreHeaderCase:ignored\n+  #490 = Utf8                SkipHeaderRecord:\n+  #491 = NameAndType        #583:#628     // append:(Z)Ljava/lang/StringBuilder;\n+  #492 = Utf8               HeaderComments:\n+  #493 = NameAndType        #323:#271     // toString:([Ljava/lang/Object;)Ljava/lang/String;\n+  #494 = Utf8               Header:\n+  #495 = Utf8               java/lang/String\n+  #496 = NameAndType        #629:#630     // subSequence:(II)Ljava/lang/CharSequence;\n+  #497 = Utf8               java/lang/IllegalArgumentException\n+  #498 = Utf8               The delimiter cannot be a line break\n+  #499 = Utf8               The quoteChar character and the delimiter cannot be the same (\\'\n+  #500 = Utf8               \\')\n+  #501 = Utf8               The escape character and the delimiter cannot be the same (\\'\n+  #502 = Utf8               The comment start character and the delimiter cannot be the same (\\'\n+  #503 = Utf8               The comment start character and the quoteChar cannot be the same (\\'\n+  #504 = Utf8               The comment start and the escape character cannot be the same (\\'\n+  #505 = Utf8               No quotes mode set but no escape character is set\n+  #506 = Utf8               java/util/HashSet\n+  #507 = NameAndType        #631:#269     // add:(Ljava/lang/Object;)Z\n+  #508 = Utf8               The header contains a duplicate entry: \\'\n+  #509 = Utf8               \\' in\n+  #510 = NameAndType        #330:#332     // withAllowDuplicateHeaderNames:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #511 = NameAndType        #333:#332     // withAllowMissingColumnNames:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #512 = NameAndType        #261:#632     // valueOf:(C)Ljava/lang/Character;\n+  #513 = NameAndType        #335:#336     // withCommentMarker:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n+  #514 = NameAndType        #253:#258     // isLineBreak:(Ljava/lang/Character;)Z\n+  #515 = Utf8               The comment start marker character cannot be a line break\n+  #516 = NameAndType        #338:#336     // withEscape:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n+  #517 = Utf8               The escape character cannot be a line break\n+  #518 = NameAndType        #340:#349     // withHeader:([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n+  #519 = NameAndType        #360:#331     // withSkipHeaderRecord:()Lorg/apache/commons/csv/CSVFormat;\n+  #520 = Class              #633          // java/lang/Class\n+  #521 = NameAndType        #634:#635     // getEnumConstants:()[Ljava/lang/Object;\n+  #522 = Utf8               [Ljava/lang/Enum;\n+  #523 = Class              #636          // java/lang/Enum\n+  #524 = NameAndType        #637:#288     // name:()Ljava/lang/String;\n+  #525 = NameAndType        #638:#639     // getMetaData:()Ljava/sql/ResultSetMetaData;\n+  #526 = NameAndType        #340:#348     // withHeader:(Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat;\n+  #527 = NameAndType        #640:#297     // getColumnCount:()I\n+  #528 = NameAndType        #641:#642     // getColumnLabel:(I)Ljava/lang/String;\n+  #529 = NameAndType        #352:#332     // withIgnoreEmptyLines:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #530 = NameAndType        #353:#332     // withIgnoreHeaderCase:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #531 = NameAndType        #354:#332     // withIgnoreSurroundingSpaces:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #532 = NameAndType        #356:#336     // withQuote:(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;\n+  #533 = Utf8               The quoteChar cannot be a line break\n+  #534 = NameAndType        #261:#643     // valueOf:(C)Ljava/lang/String;\n+  #535 = NameAndType        #359:#262     // withRecordSeparator:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n+  #536 = NameAndType        #360:#332     // withSkipHeaderRecord:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #537 = Utf8               line.separator\n+  #538 = NameAndType        #644:#645     // getProperty:(Ljava/lang/String;)Ljava/lang/String;\n+  #539 = NameAndType        #362:#332     // withTrailingDelimiter:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #540 = NameAndType        #363:#332     // withTrim:(Z)Lorg/apache/commons/csv/CSVFormat;\n+  #541 = NameAndType        #646:#233     // DOUBLE_QUOTE_CHAR:Ljava/lang/Character;\n+  #542 = Utf8               \\r\\n\n+  #543 = NameAndType        #210:#211     // DEFAULT:Lorg/apache/commons/csv/CSVFormat;\n+  #544 = NameAndType        #333:#331     // withAllowMissingColumnNames:()Lorg/apache/commons/csv/CSVFormat;\n+  #545 = NameAndType        #212:#211     // EXCEL:Lorg/apache/commons/csv/CSVFormat;\n+  #546 = NameAndType        #337:#260     // withDelimiter:(C)Lorg/apache/commons/csv/CSVFormat;\n+  #547 = NameAndType        #338:#260     // withEscape:(C)Lorg/apache/commons/csv/CSVFormat;\n+  #548 = NameAndType        #359:#260     // withRecordSeparator:(C)Lorg/apache/commons/csv/CSVFormat;\n+  #549 = NameAndType        #213:#211     // INFORMIX_UNLOAD:Lorg/apache/commons/csv/CSVFormat;\n+  #550 = NameAndType        #214:#211     // INFORMIX_UNLOAD_CSV:Lorg/apache/commons/csv/CSVFormat;\n+  #551 = NameAndType        #357:#358     // withQuoteMode:(Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat;\n+  #552 = NameAndType        #215:#211     // MONGODB_CSV:Lorg/apache/commons/csv/CSVFormat;\n+  #553 = NameAndType        #216:#211     // MONGODB_TSV:Lorg/apache/commons/csv/CSVFormat;\n+  #554 = Utf8               \\\\N\n+  #555 = NameAndType        #355:#262     // withNullString:(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;\n+  #556 = NameAndType        #647:#248     // ALL_NON_NULL:Lorg/apache/commons/csv/QuoteMode;\n+  #557 = NameAndType        #217:#211     // MYSQL:Lorg/apache/commons/csv/CSVFormat;\n+  #558 = NameAndType        #363:#331     // withTrim:()Lorg/apache/commons/csv/CSVFormat;\n+  #559 = NameAndType        #361:#331     // withSystemRecordSeparator:()Lorg/apache/commons/csv/CSVFormat;\n+  #560 = NameAndType        #218:#211     // ORACLE:Lorg/apache/commons/csv/CSVFormat;\n+  #561 = NameAndType        #219:#211     // POSTGRESQL_CSV:Lorg/apache/commons/csv/CSVFormat;\n+  #562 = NameAndType        #220:#211     // POSTGRESQL_TEXT:Lorg/apache/commons/csv/CSVFormat;\n+  #563 = NameAndType        #221:#211     // RFC4180:Lorg/apache/commons/csv/CSVFormat;\n+  #564 = NameAndType        #354:#331     // withIgnoreSurroundingSpaces:()Lorg/apache/commons/csv/CSVFormat;\n+  #565 = NameAndType        #227:#211     // TDF:Lorg/apache/commons/csv/CSVFormat;\n+  #566 = Utf8               java/lang/Object\n+  #567 = Utf8               java/io/Serializable\n+  #568 = Utf8               org/apache/commons/csv/CSVFormat$1\n+  #569 = Utf8               org/apache/commons/csv/CSVFormat$Predefined\n+  #570 = Utf8               java/lang/Character\n+  #571 = Utf8               org/apache/commons/csv/QuoteMode\n+  #572 = Utf8               [Ljava/lang/Object;\n+  #573 = Utf8               java/lang/Appendable\n+  #574 = Utf8               java/util/Set\n+  #575 = Utf8               java/sql/ResultSet\n+  #576 = Utf8               java/sql/ResultSetMetaData\n+  #577 = Utf8               java/sql/SQLException\n+  #578 = Utf8               charValue\n+  #579 = Utf8               (Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat$Predefined;\n+  #580 = Utf8               getFormat\n+  #581 = Utf8               clone\n+  #582 = Utf8               ()Ljava/lang/Object;\n+  #583 = Utf8               append\n+  #584 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #585 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #586 = Utf8               getClass\n+  #587 = Utf8               ()Ljava/lang/Class;\n+  #588 = Utf8               java/util/Arrays\n+  #589 = Utf8               ([Ljava/lang/Object;[Ljava/lang/Object;)Z\n+  #590 = Utf8               (Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V\n+  #591 = Utf8               ([Ljava/lang/Object;)V\n+  #592 = Utf8               close\n+  #593 = Utf8               addSuppressed\n+  #594 = Utf8               (Ljava/lang/Throwable;)V\n+  #595 = Utf8               ([Ljava/lang/Object;)I\n+  #596 = Utf8               (Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)V\n+  #597 = Utf8               (Ljava/io/File;)V\n+  #598 = Utf8               (Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V\n+  #599 = Utf8               ALL\n+  #600 = Utf8               length\n+  #601 = Utf8               (C)Ljava/lang/Appendable;\n+  #602 = Utf8               (Ljava/lang/CharSequence;)Ljava/lang/Appendable;\n+  #603 = Utf8               (Ljava/lang/CharSequence;II)Ljava/lang/Appendable;\n+  #604 = Utf8               java/nio/file/Files\n+  #605 = Utf8               newBufferedWriter\n+  #606 = Utf8               (Ljava/nio/file/Path;Ljava/nio/charset/Charset;[Ljava/nio/file/OpenOption;)Ljava/io/BufferedWriter;\n+  #607 = Utf8               copyLarge\n+  #608 = Utf8               (Ljava/io/Reader;Ljava/io/Writer;)J\n+  #609 = Utf8               copy\n+  #610 = Utf8               (Ljava/io/Reader;Ljava/lang/Appendable;)J\n+  #611 = Utf8               java/lang/System\n+  #612 = Utf8               out\n+  #613 = Utf8               Ljava/io/PrintStream;\n+  #614 = Utf8               charAt\n+  #615 = Utf8               (I)C\n+  #616 = Utf8               (I)V\n+  #617 = Utf8               read\n+  #618 = Utf8               (C)Ljava/lang/StringBuilder;\n+  #619 = Utf8               substring\n+  #620 = Utf8               (II)Ljava/lang/String;\n+  #621 = Utf8               setLength\n+  #622 = Utf8               MINIMAL\n+  #623 = Utf8               $SwitchMap$org$apache$commons$csv$QuoteMode\n+  #624 = Utf8               [I\n+  #625 = Utf8               ordinal\n+  #626 = Utf8               (Ljava/lang/String;)V\n+  #627 = Utf8               NONE\n+  #628 = Utf8               (Z)Ljava/lang/StringBuilder;\n+  #629 = Utf8               subSequence\n+  #630 = Utf8               (II)Ljava/lang/CharSequence;\n+  #631 = Utf8               add\n+  #632 = Utf8               (C)Ljava/lang/Character;\n+  #633 = Utf8               java/lang/Class\n+  #634 = Utf8               getEnumConstants\n+  #635 = Utf8               ()[Ljava/lang/Object;\n+  #636 = Utf8               java/lang/Enum\n+  #637 = Utf8               name\n+  #638 = Utf8               getMetaData\n+  #639 = Utf8               ()Ljava/sql/ResultSetMetaData;\n+  #640 = Utf8               getColumnCount\n+  #641 = Utf8               getColumnLabel\n+  #642 = Utf8               (I)Ljava/lang/String;\n+  #643 = Utf8               (C)Ljava/lang/String;\n+  #644 = Utf8               getProperty\n+  #645 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #646 = Utf8               DOUBLE_QUOTE_CHAR\n+  #647 = Utf8               ALL_NON_NULL\n {\n   public static final org.apache.commons.csv.CSVFormat DEFAULT;\n     descriptor: Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n \n   public static final org.apache.commons.csv.CSVFormat EXCEL;\n     descriptor: Lorg/apache/commons/csv/CSVFormat;\n@@ -1295,116 +1279,78 @@\n         frame_type = 15 /* same */\n         frame_type = 15 /* same */\n \n   public java.lang.String format(java.lang.Object...);\n     descriptor: ([Ljava/lang/Object;)Ljava/lang/String;\n     flags: (0x0081) ACC_PUBLIC, ACC_VARARGS\n     Code:\n-      stack=4, locals=9, args_size=2\n+      stack=4, locals=6, args_size=2\n          0: new           #41                 // class java/io/StringWriter\n          3: dup\n          4: invokespecial #42                 // Method java/io/StringWriter.\"<init>\":()V\n          7: astore_2\n          8: new           #43                 // class org/apache/commons/csv/CSVPrinter\n         11: dup\n         12: aload_2\n         13: aload_0\n         14: invokespecial #44                 // Method org/apache/commons/csv/CSVPrinter.\"<init>\":(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V\n         17: astore_3\n-        18: aconst_null\n-        19: astore        4\n-        21: aload_3\n-        22: aload_1\n-        23: invokevirtual #45                 // Method org/apache/commons/csv/CSVPrinter.printRecord:([Ljava/lang/Object;)V\n-        26: aload_2\n-        27: invokevirtual #46                 // Method java/io/StringWriter.toString:()Ljava/lang/String;\n-        30: invokevirtual #47                 // Method java/lang/String.trim:()Ljava/lang/String;\n-        33: astore        5\n-        35: aload_3\n-        36: ifnull        67\n-        39: aload         4\n-        41: ifnull        63\n-        44: aload_3\n-        45: invokevirtual #48                 // Method org/apache/commons/csv/CSVPrinter.close:()V\n-        48: goto          67\n-        51: astore        6\n-        53: aload         4\n-        55: aload         6\n-        57: invokevirtual #50                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-        60: goto          67\n-        63: aload_3\n-        64: invokevirtual #48                 // Method org/apache/commons/csv/CSVPrinter.close:()V\n-        67: aload         5\n-        69: areturn\n-        70: astore        5\n-        72: aload         5\n-        74: astore        4\n-        76: aload         5\n-        78: athrow\n-        79: astore        7\n-        81: aload_3\n-        82: ifnull        113\n-        85: aload         4\n-        87: ifnull        109\n-        90: aload_3\n-        91: invokevirtual #48                 // Method org/apache/commons/csv/CSVPrinter.close:()V\n-        94: goto          113\n-        97: astore        8\n-        99: aload         4\n-       101: aload         8\n-       103: invokevirtual #50                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n-       106: goto          113\n-       109: aload_3\n-       110: invokevirtual #48                 // Method org/apache/commons/csv/CSVPrinter.close:()V\n-       113: aload         7\n-       115: athrow\n-       116: astore_3\n-       117: new           #52                 // class java/lang/IllegalStateException\n-       120: dup\n-       121: aload_3\n-       122: invokespecial #53                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n-       125: athrow\n+        18: aload_3\n+        19: aload_1\n+        20: invokevirtual #45                 // Method org/apache/commons/csv/CSVPrinter.printRecord:([Ljava/lang/Object;)V\n+        23: aload_2\n+        24: invokevirtual #46                 // Method java/io/StringWriter.toString:()Ljava/lang/String;\n+        27: invokevirtual #47                 // Method java/lang/String.trim:()Ljava/lang/String;\n+        30: astore        4\n+        32: aload_3\n+        33: invokevirtual #48                 // Method org/apache/commons/csv/CSVPrinter.close:()V\n+        36: aload         4\n+        38: areturn\n+        39: astore        4\n+        41: aload_3\n+        42: invokevirtual #48                 // Method org/apache/commons/csv/CSVPrinter.close:()V\n+        45: goto          57\n+        48: astore        5\n+        50: aload         4\n+        52: aload         5\n+        54: invokevirtual #50                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V\n+        57: aload         4\n+        59: athrow\n+        60: astore_3\n+        61: new           #52                 // class java/lang/IllegalStateException\n+        64: dup\n+        65: aload_3\n+        66: invokespecial #53                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/Throwable;)V\n+        69: athrow\n       Exception table:\n          from    to  target type\n-            44    48    51   Class java/lang/Throwable\n-            21    35    70   Class java/lang/Throwable\n-            21    35    79   any\n-            90    94    97   Class java/lang/Throwable\n-            70    81    79   any\n-             8    67   116   Class java/io/IOException\n-            70   116   116   Class java/io/IOException\n+            18    32    39   Class java/lang/Throwable\n+            41    45    48   Class java/lang/Throwable\n+             8    36    60   Class java/io/IOException\n+            39    60    60   Class java/io/IOException\n       LineNumberTable:\n         line 894: 0\n         line 895: 8\n-        line 896: 21\n-        line 897: 26\n-        line 898: 35\n-        line 897: 67\n-        line 895: 70\n-        line 898: 79\n-        line 900: 117\n-      StackMapTable: number_of_entries = 9\n+        line 896: 18\n+        line 897: 23\n+        line 898: 32\n+        line 897: 36\n+        line 895: 39\n+        line 898: 60\n+        line 900: 61\n+      StackMapTable: number_of_entries = 4\n         frame_type = 255 /* full_frame */\n-          offset_delta = 51\n-          locals = [ class org/apache/commons/csv/CSVFormat, class \"[Ljava/lang/Object;\", class java/io/StringWriter, class org/apache/commons/csv/CSVPrinter, class java/lang/Throwable, class java/lang/String ]\n+          offset_delta = 39\n+          locals = [ class org/apache/commons/csv/CSVFormat, class \"[Ljava/lang/Object;\", class java/io/StringWriter, class org/apache/commons/csv/CSVPrinter ]\n           stack = [ class java/lang/Throwable ]\n-        frame_type = 11 /* same */\n-        frame_type = 3 /* same */\n         frame_type = 255 /* full_frame */\n-          offset_delta = 2\n+          offset_delta = 8\n           locals = [ class org/apache/commons/csv/CSVFormat, class \"[Ljava/lang/Object;\", class java/io/StringWriter, class org/apache/commons/csv/CSVPrinter, class java/lang/Throwable ]\n           stack = [ class java/lang/Throwable ]\n-        frame_type = 72 /* same_locals_1_stack_item */\n-          stack = [ class java/lang/Throwable ]\n-        frame_type = 255 /* full_frame */\n-          offset_delta = 17\n-          locals = [ class org/apache/commons/csv/CSVFormat, class \"[Ljava/lang/Object;\", class java/io/StringWriter, class org/apache/commons/csv/CSVPrinter, class java/lang/Throwable, top, top, class java/lang/Throwable ]\n-          stack = [ class java/lang/Throwable ]\n-        frame_type = 11 /* same */\n-        frame_type = 3 /* same */\n+        frame_type = 8 /* same */\n         frame_type = 255 /* full_frame */\n           offset_delta = 2\n           locals = [ class org/apache/commons/csv/CSVFormat, class \"[Ljava/lang/Object;\", class java/io/StringWriter ]\n           stack = [ class java/io/IOException ]\n \n   public boolean getAllowDuplicateHeaderNames();\n     descriptor: ()Z\n@@ -4126,15 +4072,15 @@\n         line 1925: 47\n       StackMapTable: number_of_entries = 2\n         frame_type = 254 /* append */\n           offset_delta = 23\n           locals = [ class \"[Ljava/lang/String;\", class \"[Ljava/lang/Enum;\", int ]\n         frame_type = 249 /* chop */\n           offset_delta = 23\n-    Signature: #353                         // (Ljava/lang/Class<+Ljava/lang/Enum<*>;>;)Lorg/apache/commons/csv/CSVFormat;\n+    Signature: #343                         // (Ljava/lang/Class<+Ljava/lang/Enum<*>;>;)Lorg/apache/commons/csv/CSVFormat;\n \n   public org.apache.commons.csv.CSVFormat withHeader(java.sql.ResultSet) throws java.sql.SQLException;\n     descriptor: (Ljava/sql/ResultSet;)Lorg/apache/commons/csv/CSVFormat;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n"}]}
