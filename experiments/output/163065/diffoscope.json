{"diffoscope-json-version": 1, "source1": "first/URLCodecTest.class", "source2": "second/URLCodecTest.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,89 +1,89 @@\n-  SHA-256 checksum 6e437c0f11317034d4b3e300b2975f9d7f4fc4f4a6d0e6e58458fb2f5dc29dc8\n+  SHA-256 checksum 3fdf8090ba530d3ff0863c68358f45fb51f2b99516fa2153a3b57e7074ce8dad\n   Compiled from \"URLCodecTest.java\"\n public class org.apache.commons.codec.net.URLCodecTest\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #72                         // org/apache/commons/codec/net/URLCodecTest\n   super_class: #73                        // java/lang/Object\n   interfaces: 0, fields: 2, methods: 20, attributes: 1\n Constant pool:\n-    #1 = Methodref          #73.#147      // java/lang/Object.\"<init>\":()V\n-    #2 = Class              #148          // java/lang/StringBuilder\n-    #3 = Methodref          #2.#147       // java/lang/StringBuilder.\"<init>\":()V\n-    #4 = Methodref          #2.#149       // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n-    #5 = Methodref          #2.#150       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-    #6 = Fieldref           #72.#151      // org/apache/commons/codec/net/URLCodecTest.RUSSIAN_STUFF_UNICODE:[I\n-    #7 = Methodref          #72.#152      // org/apache/commons/codec/net/URLCodecTest.constructString:([I)Ljava/lang/String;\n-    #8 = Fieldref           #72.#153      // org/apache/commons/codec/net/URLCodecTest.SWISS_GERMAN_STUFF_UNICODE:[I\n-    #9 = Class              #154          // org/apache/commons/codec/net/URLCodec\n-   #10 = Methodref          #9.#147       // org/apache/commons/codec/net/URLCodec.\"<init>\":()V\n-   #11 = Methodref          #72.#155      // org/apache/commons/codec/net/URLCodecTest.validateState:(Lorg/apache/commons/codec/net/URLCodec;)V\n-   #12 = String             #156          // %D0%92%D1%81%D0%B5%D0%BC_%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82\n-   #13 = Class              #157          // org/apache/commons/codec/CharEncoding\n-   #14 = String             #158          // UTF-8\n-   #15 = Methodref          #9.#159       // org/apache/commons/codec/net/URLCodec.encode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-   #16 = Methodref          #160.#161     // org/junit/Assert.assertEquals:(Ljava/lang/Object;Ljava/lang/Object;)V\n-   #17 = String             #162          // Gr%C3%BCezi_z%C3%A4m%C3%A4\n-   #18 = Methodref          #9.#163       // org/apache/commons/codec/net/URLCodec.decode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-   #19 = String             #164          // Hello there!\n-   #20 = Methodref          #9.#165       // org/apache/commons/codec/net/URLCodec.encode:(Ljava/lang/String;)Ljava/lang/String;\n-   #21 = String             #166          // Basic URL encoding test\n-   #22 = String             #167          // Hello+there%21\n-   #23 = Methodref          #160.#168     // org/junit/Assert.assertEquals:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V\n-   #24 = String             #169          // Basic URL decoding test\n-   #25 = Methodref          #9.#170       // org/apache/commons/codec/net/URLCodec.decode:(Ljava/lang/String;)Ljava/lang/String;\n-   #26 = String             #171          // abc123_-.*\n-   #27 = String             #172          // Safe chars URL encoding test\n-   #28 = String             #173          // Safe chars URL decoding test\n-   #29 = String             #174          // ~!@#$%^&()+{}\\\"\\\\;:`,/[]\n-   #30 = String             #175          // Unsafe chars URL encoding test\n-   #31 = String             #176          // %7E%21%40%23%24%25%5E%26%28%29%2B%7B%7D%22%5C%3B%3A%60%2C%2F%5B%5D\n-   #32 = String             #177          // Unsafe chars URL decoding test\n-   #33 = String             #178          // Null string URL encoding test\n-   #34 = Class              #179          // java/lang/String\n-   #35 = Methodref          #160.#180     // org/junit/Assert.assertNull:(Ljava/lang/String;Ljava/lang/Object;)V\n-   #36 = String             #181          // Null string URL decoding test\n-   #37 = String             #182          // %\n-   #38 = String             #183          // DecoderException should have been thrown\n-   #39 = Methodref          #160.#184     // org/junit/Assert.fail:(Ljava/lang/String;)V\n-   #40 = Class              #185          // org/apache/commons/codec/DecoderException\n-   #41 = String             #186          // %A\n-   #42 = String             #187          // %WW\n-   #43 = String             #188          // %0W\n-   #44 = String             #189          // ISO-8859-1\n-   #45 = Methodref          #34.#190      // java/lang/String.getBytes:(Ljava/lang/String;)[B\n-   #46 = Methodref          #9.#191       // org/apache/commons/codec/net/URLCodec.decode:([B)[B\n-   #47 = Methodref          #160.#192     // org/junit/Assert.assertEquals:(JJ)V\n-   #48 = Methodref          #9.#193       // org/apache/commons/codec/net/URLCodec.encode:([B)[B\n-   #49 = String             #194          // Encoding a null string should return null\n-   #50 = Fieldref           #195.#196     // org/apache/commons/codec/Charsets.UTF_8:Ljava/nio/charset/Charset;\n-   #51 = Methodref          #34.#197      // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n-   #52 = Methodref          #9.#198       // org/apache/commons/codec/net/URLCodec.encodeUrl:(Ljava/util/BitSet;[B)[B\n-   #53 = Methodref          #34.#199      // java/lang/String.\"<init>\":([B)V\n-   #54 = Methodref          #9.#200       // org/apache/commons/codec/net/URLCodec.decodeUrl:([B)[B\n-   #55 = String             #201          // Result should be null\n-   #56 = String             #202          // charset\n-   #57 = Methodref          #9.#203       // org/apache/commons/codec/net/URLCodec.encode:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #58 = Class              #119          // \"[B\"\n-   #59 = String             #204          // Encoding a null Object should return null\n-   #60 = Class              #205          // java/lang/Double\n+    #1 = Methodref          #73.#140      // java/lang/Object.\"<init>\":()V\n+    #2 = Class              #141          // java/lang/StringBuilder\n+    #3 = Methodref          #2.#140       // java/lang/StringBuilder.\"<init>\":()V\n+    #4 = Methodref          #2.#142       // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+    #5 = Methodref          #2.#143       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+    #6 = Fieldref           #72.#144      // org/apache/commons/codec/net/URLCodecTest.RUSSIAN_STUFF_UNICODE:[I\n+    #7 = Methodref          #72.#145      // org/apache/commons/codec/net/URLCodecTest.constructString:([I)Ljava/lang/String;\n+    #8 = Fieldref           #72.#146      // org/apache/commons/codec/net/URLCodecTest.SWISS_GERMAN_STUFF_UNICODE:[I\n+    #9 = Class              #147          // org/apache/commons/codec/net/URLCodec\n+   #10 = Methodref          #9.#140       // org/apache/commons/codec/net/URLCodec.\"<init>\":()V\n+   #11 = Methodref          #72.#148      // org/apache/commons/codec/net/URLCodecTest.validateState:(Lorg/apache/commons/codec/net/URLCodec;)V\n+   #12 = String             #149          // %D0%92%D1%81%D0%B5%D0%BC_%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82\n+   #13 = Class              #150          // org/apache/commons/codec/CharEncoding\n+   #14 = String             #151          // UTF-8\n+   #15 = Methodref          #9.#152       // org/apache/commons/codec/net/URLCodec.encode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+   #16 = Methodref          #153.#154     // org/junit/Assert.assertEquals:(Ljava/lang/Object;Ljava/lang/Object;)V\n+   #17 = String             #155          // Gr%C3%BCezi_z%C3%A4m%C3%A4\n+   #18 = Methodref          #9.#156       // org/apache/commons/codec/net/URLCodec.decode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+   #19 = String             #157          // Hello there!\n+   #20 = Methodref          #9.#158       // org/apache/commons/codec/net/URLCodec.encode:(Ljava/lang/String;)Ljava/lang/String;\n+   #21 = String             #159          // Basic URL encoding test\n+   #22 = String             #160          // Hello+there%21\n+   #23 = Methodref          #153.#161     // org/junit/Assert.assertEquals:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V\n+   #24 = String             #162          // Basic URL decoding test\n+   #25 = Methodref          #9.#163       // org/apache/commons/codec/net/URLCodec.decode:(Ljava/lang/String;)Ljava/lang/String;\n+   #26 = String             #164          // abc123_-.*\n+   #27 = String             #165          // Safe chars URL encoding test\n+   #28 = String             #166          // Safe chars URL decoding test\n+   #29 = String             #167          // ~!@#$%^&()+{}\\\"\\\\;:`,/[]\n+   #30 = String             #168          // Unsafe chars URL encoding test\n+   #31 = String             #169          // %7E%21%40%23%24%25%5E%26%28%29%2B%7B%7D%22%5C%3B%3A%60%2C%2F%5B%5D\n+   #32 = String             #170          // Unsafe chars URL decoding test\n+   #33 = String             #171          // Null string URL encoding test\n+   #34 = Class              #172          // java/lang/String\n+   #35 = Methodref          #153.#173     // org/junit/Assert.assertNull:(Ljava/lang/String;Ljava/lang/Object;)V\n+   #36 = String             #174          // Null string URL decoding test\n+   #37 = String             #175          // %\n+   #38 = String             #176          // DecoderException should have been thrown\n+   #39 = Methodref          #153.#177     // org/junit/Assert.fail:(Ljava/lang/String;)V\n+   #40 = Class              #178          // org/apache/commons/codec/DecoderException\n+   #41 = String             #179          // %A\n+   #42 = String             #180          // %WW\n+   #43 = String             #181          // %0W\n+   #44 = String             #182          // ISO-8859-1\n+   #45 = Methodref          #34.#183      // java/lang/String.getBytes:(Ljava/lang/String;)[B\n+   #46 = Methodref          #9.#184       // org/apache/commons/codec/net/URLCodec.decode:([B)[B\n+   #47 = Methodref          #153.#185     // org/junit/Assert.assertEquals:(JJ)V\n+   #48 = Methodref          #9.#186       // org/apache/commons/codec/net/URLCodec.encode:([B)[B\n+   #49 = String             #187          // Encoding a null string should return null\n+   #50 = Fieldref           #188.#189     // org/apache/commons/codec/Charsets.UTF_8:Ljava/nio/charset/Charset;\n+   #51 = Methodref          #34.#190      // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n+   #52 = Methodref          #9.#191       // org/apache/commons/codec/net/URLCodec.encodeUrl:(Ljava/util/BitSet;[B)[B\n+   #53 = Methodref          #34.#192      // java/lang/String.\"<init>\":([B)V\n+   #54 = Methodref          #9.#193       // org/apache/commons/codec/net/URLCodec.decodeUrl:([B)[B\n+   #55 = String             #194          // Result should be null\n+   #56 = String             #195          // charset\n+   #57 = Methodref          #9.#196       // org/apache/commons/codec/net/URLCodec.encode:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #58 = Class              #115          // \"[B\"\n+   #59 = String             #197          // Encoding a null Object should return null\n+   #60 = Class              #198          // java/lang/Double\n    #61 = Double             3.0d\n-   #63 = Methodref          #60.#206      // java/lang/Double.\"<init>\":(D)V\n-   #64 = String             #207          // Trying to url encode a Double object should cause an exception.\n-   #65 = Class              #208          // org/apache/commons/codec/EncoderException\n-   #66 = String             #209          // NONSENSE\n-   #67 = Methodref          #9.#210       // org/apache/commons/codec/net/URLCodec.\"<init>\":(Ljava/lang/String;)V\n-   #68 = String             #211          // We set the encoding to a bogus NONSENSE vlaue, this shouldn\\'t have worked.\n-   #69 = Methodref          #9.#212       // org/apache/commons/codec/net/URLCodec.decode:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #70 = String             #213          // Decoding a null Object should return null\n-   #71 = String             #214          // UnicodeBig\n-   #72 = Class              #215          // org/apache/commons/codec/net/URLCodecTest\n-   #73 = Class              #216          // java/lang/Object\n+   #63 = Methodref          #60.#199      // java/lang/Double.\"<init>\":(D)V\n+   #64 = String             #200          // Trying to url encode a Double object should cause an exception.\n+   #65 = Class              #201          // org/apache/commons/codec/EncoderException\n+   #66 = String             #202          // NONSENSE\n+   #67 = Methodref          #9.#203       // org/apache/commons/codec/net/URLCodec.\"<init>\":(Ljava/lang/String;)V\n+   #68 = String             #204          // We set the encoding to a bogus NONSENSE vlaue, this shouldn\\'t have worked.\n+   #69 = Methodref          #9.#205       // org/apache/commons/codec/net/URLCodec.decode:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #70 = String             #206          // Decoding a null Object should return null\n+   #71 = String             #207          // UnicodeBig\n+   #72 = Class              #208          // org/apache/commons/codec/net/URLCodecTest\n+   #73 = Class              #209          // java/lang/Object\n    #74 = Utf8               SWISS_GERMAN_STUFF_UNICODE\n    #75 = Utf8               [I\n    #76 = Utf8               RUSSIAN_STUFF_UNICODE\n    #77 = Utf8               <init>\n    #78 = Utf8               ()V\n    #79 = Utf8               Code\n    #80 = Utf8               LineNumberTable\n@@ -98,167 +98,160 @@\n    #89 = Utf8               ([I)Ljava/lang/String;\n    #90 = Utf8               unicodeChar\n    #91 = Utf8               I\n    #92 = Utf8               unicodeChars\n    #93 = Utf8               buffer\n    #94 = Utf8               Ljava/lang/StringBuilder;\n    #95 = Utf8               StackMapTable\n-   #96 = Class              #215          // org/apache/commons/codec/net/URLCodecTest\n-   #97 = Class              #75           // \"[I\"\n-   #98 = Class              #148          // java/lang/StringBuilder\n-   #99 = Utf8               testUTF8RoundTrip\n-  #100 = Utf8               ru_msg\n-  #101 = Utf8               Ljava/lang/String;\n-  #102 = Utf8               ch_msg\n-  #103 = Utf8               Exceptions\n-  #104 = Class              #217          // java/lang/Exception\n-  #105 = Utf8               RuntimeVisibleAnnotations\n-  #106 = Utf8               Lorg/junit/Test;\n-  #107 = Utf8               testBasicEncodeDecode\n-  #108 = Utf8               plain\n-  #109 = Utf8               encoded\n-  #110 = Utf8               testSafeCharEncodeDecode\n-  #111 = Utf8               testUnsafeEncodeDecode\n-  #112 = Utf8               testEncodeDecodeNull\n-  #113 = Utf8               testDecodeInvalid\n-  #114 = Class              #154          // org/apache/commons/codec/net/URLCodec\n-  #115 = Class              #185          // org/apache/commons/codec/DecoderException\n-  #116 = Utf8               testDecodeInvalidContent\n-  #117 = Utf8               i\n-  #118 = Utf8               input\n-  #119 = Utf8               [B\n-  #120 = Utf8               output\n-  #121 = Class              #179          // java/lang/String\n-  #122 = Class              #218          // java/io/UnsupportedEncodingException\n-  #123 = Utf8               testEncodeNull\n-  #124 = Utf8               testEncodeUrlWithNullBitSet\n-  #125 = Utf8               testDecodeWithNullArray\n-  #126 = Utf8               result\n-  #127 = Utf8               testEncodeStringWithNull\n-  #128 = Utf8               test\n-  #129 = Utf8               testDecodeStringWithNull\n-  #130 = Utf8               testEncodeObjects\n-  #131 = Utf8               dObj\n-  #132 = Utf8               Ljava/lang/Object;\n-  #133 = Utf8               plainBA\n-  #134 = Utf8               encodedBA\n-  #135 = Class              #216          // java/lang/Object\n-  #136 = Class              #208          // org/apache/commons/codec/EncoderException\n-  #137 = Utf8               testInvalidEncoding\n-  #138 = Utf8               testDecodeObjects\n-  #139 = Utf8               decoded\n-  #140 = Utf8               decodedBA\n-  #141 = Utf8               testDefaultEncoding\n-  #142 = Utf8               encoded1\n-  #143 = Utf8               encoded2\n-  #144 = Utf8               <clinit>\n-  #145 = Utf8               SourceFile\n-  #146 = Utf8               URLCodecTest.java\n-  #147 = NameAndType        #77:#78       // \"<init>\":()V\n-  #148 = Utf8               java/lang/StringBuilder\n-  #149 = NameAndType        #219:#220     // append:(C)Ljava/lang/StringBuilder;\n-  #150 = NameAndType        #221:#222     // toString:()Ljava/lang/String;\n-  #151 = NameAndType        #76:#75       // RUSSIAN_STUFF_UNICODE:[I\n-  #152 = NameAndType        #88:#89       // constructString:([I)Ljava/lang/String;\n-  #153 = NameAndType        #74:#75       // SWISS_GERMAN_STUFF_UNICODE:[I\n-  #154 = Utf8               org/apache/commons/codec/net/URLCodec\n-  #155 = NameAndType        #84:#85       // validateState:(Lorg/apache/commons/codec/net/URLCodec;)V\n-  #156 = Utf8               %D0%92%D1%81%D0%B5%D0%BC_%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82\n-  #157 = Utf8               org/apache/commons/codec/CharEncoding\n-  #158 = Utf8               UTF-8\n-  #159 = NameAndType        #223:#224     // encode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-  #160 = Class              #225          // org/junit/Assert\n-  #161 = NameAndType        #226:#227     // assertEquals:(Ljava/lang/Object;Ljava/lang/Object;)V\n-  #162 = Utf8               Gr%C3%BCezi_z%C3%A4m%C3%A4\n-  #163 = NameAndType        #228:#224     // decode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-  #164 = Utf8               Hello there!\n-  #165 = NameAndType        #223:#229     // encode:(Ljava/lang/String;)Ljava/lang/String;\n-  #166 = Utf8               Basic URL encoding test\n-  #167 = Utf8               Hello+there%21\n-  #168 = NameAndType        #226:#230     // assertEquals:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V\n-  #169 = Utf8               Basic URL decoding test\n-  #170 = NameAndType        #228:#229     // decode:(Ljava/lang/String;)Ljava/lang/String;\n-  #171 = Utf8               abc123_-.*\n-  #172 = Utf8               Safe chars URL encoding test\n-  #173 = Utf8               Safe chars URL decoding test\n-  #174 = Utf8               ~!@#$%^&()+{}\\\"\\\\;:`,/[]\n-  #175 = Utf8               Unsafe chars URL encoding test\n-  #176 = Utf8               %7E%21%40%23%24%25%5E%26%28%29%2B%7B%7D%22%5C%3B%3A%60%2C%2F%5B%5D\n-  #177 = Utf8               Unsafe chars URL decoding test\n-  #178 = Utf8               Null string URL encoding test\n-  #179 = Utf8               java/lang/String\n-  #180 = NameAndType        #231:#232     // assertNull:(Ljava/lang/String;Ljava/lang/Object;)V\n-  #181 = Utf8               Null string URL decoding test\n-  #182 = Utf8               %\n-  #183 = Utf8               DecoderException should have been thrown\n-  #184 = NameAndType        #233:#234     // fail:(Ljava/lang/String;)V\n-  #185 = Utf8               org/apache/commons/codec/DecoderException\n-  #186 = Utf8               %A\n-  #187 = Utf8               %WW\n-  #188 = Utf8               %0W\n-  #189 = Utf8               ISO-8859-1\n-  #190 = NameAndType        #235:#236     // getBytes:(Ljava/lang/String;)[B\n-  #191 = NameAndType        #228:#237     // decode:([B)[B\n-  #192 = NameAndType        #226:#238     // assertEquals:(JJ)V\n-  #193 = NameAndType        #223:#237     // encode:([B)[B\n-  #194 = Utf8               Encoding a null string should return null\n-  #195 = Class              #239          // org/apache/commons/codec/Charsets\n-  #196 = NameAndType        #240:#241     // UTF_8:Ljava/nio/charset/Charset;\n-  #197 = NameAndType        #235:#242     // getBytes:(Ljava/nio/charset/Charset;)[B\n-  #198 = NameAndType        #243:#244     // encodeUrl:(Ljava/util/BitSet;[B)[B\n-  #199 = NameAndType        #77:#245      // \"<init>\":([B)V\n-  #200 = NameAndType        #246:#237     // decodeUrl:([B)[B\n-  #201 = Utf8               Result should be null\n-  #202 = Utf8               charset\n-  #203 = NameAndType        #223:#247     // encode:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #204 = Utf8               Encoding a null Object should return null\n-  #205 = Utf8               java/lang/Double\n-  #206 = NameAndType        #77:#248      // \"<init>\":(D)V\n-  #207 = Utf8               Trying to url encode a Double object should cause an exception.\n-  #208 = Utf8               org/apache/commons/codec/EncoderException\n-  #209 = Utf8               NONSENSE\n-  #210 = NameAndType        #77:#234      // \"<init>\":(Ljava/lang/String;)V\n-  #211 = Utf8               We set the encoding to a bogus NONSENSE vlaue, this shouldn\\'t have worked.\n-  #212 = NameAndType        #228:#247     // decode:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #213 = Utf8               Decoding a null Object should return null\n-  #214 = Utf8               UnicodeBig\n-  #215 = Utf8               org/apache/commons/codec/net/URLCodecTest\n-  #216 = Utf8               java/lang/Object\n-  #217 = Utf8               java/lang/Exception\n-  #218 = Utf8               java/io/UnsupportedEncodingException\n-  #219 = Utf8               append\n-  #220 = Utf8               (C)Ljava/lang/StringBuilder;\n-  #221 = Utf8               toString\n-  #222 = Utf8               ()Ljava/lang/String;\n-  #223 = Utf8               encode\n-  #224 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n-  #225 = Utf8               org/junit/Assert\n-  #226 = Utf8               assertEquals\n-  #227 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)V\n-  #228 = Utf8               decode\n-  #229 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #230 = Utf8               (Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V\n-  #231 = Utf8               assertNull\n-  #232 = Utf8               (Ljava/lang/String;Ljava/lang/Object;)V\n-  #233 = Utf8               fail\n-  #234 = Utf8               (Ljava/lang/String;)V\n-  #235 = Utf8               getBytes\n-  #236 = Utf8               (Ljava/lang/String;)[B\n-  #237 = Utf8               ([B)[B\n-  #238 = Utf8               (JJ)V\n-  #239 = Utf8               org/apache/commons/codec/Charsets\n-  #240 = Utf8               UTF_8\n-  #241 = Utf8               Ljava/nio/charset/Charset;\n-  #242 = Utf8               (Ljava/nio/charset/Charset;)[B\n-  #243 = Utf8               encodeUrl\n-  #244 = Utf8               (Ljava/util/BitSet;[B)[B\n-  #245 = Utf8               ([B)V\n-  #246 = Utf8               decodeUrl\n-  #247 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #248 = Utf8               (D)V\n+   #96 = Class              #75           // \"[I\"\n+   #97 = Utf8               testUTF8RoundTrip\n+   #98 = Utf8               ru_msg\n+   #99 = Utf8               Ljava/lang/String;\n+  #100 = Utf8               ch_msg\n+  #101 = Utf8               Exceptions\n+  #102 = Class              #210          // java/lang/Exception\n+  #103 = Utf8               RuntimeVisibleAnnotations\n+  #104 = Utf8               Lorg/junit/Test;\n+  #105 = Utf8               testBasicEncodeDecode\n+  #106 = Utf8               plain\n+  #107 = Utf8               encoded\n+  #108 = Utf8               testSafeCharEncodeDecode\n+  #109 = Utf8               testUnsafeEncodeDecode\n+  #110 = Utf8               testEncodeDecodeNull\n+  #111 = Utf8               testDecodeInvalid\n+  #112 = Utf8               testDecodeInvalidContent\n+  #113 = Utf8               i\n+  #114 = Utf8               input\n+  #115 = Utf8               [B\n+  #116 = Utf8               output\n+  #117 = Class              #211          // java/io/UnsupportedEncodingException\n+  #118 = Utf8               testEncodeNull\n+  #119 = Utf8               testEncodeUrlWithNullBitSet\n+  #120 = Utf8               testDecodeWithNullArray\n+  #121 = Utf8               result\n+  #122 = Utf8               testEncodeStringWithNull\n+  #123 = Utf8               test\n+  #124 = Utf8               testDecodeStringWithNull\n+  #125 = Utf8               testEncodeObjects\n+  #126 = Utf8               dObj\n+  #127 = Utf8               Ljava/lang/Object;\n+  #128 = Utf8               plainBA\n+  #129 = Utf8               encodedBA\n+  #130 = Utf8               testInvalidEncoding\n+  #131 = Utf8               testDecodeObjects\n+  #132 = Utf8               decoded\n+  #133 = Utf8               decodedBA\n+  #134 = Utf8               testDefaultEncoding\n+  #135 = Utf8               encoded1\n+  #136 = Utf8               encoded2\n+  #137 = Utf8               <clinit>\n+  #138 = Utf8               SourceFile\n+  #139 = Utf8               URLCodecTest.java\n+  #140 = NameAndType        #77:#78       // \"<init>\":()V\n+  #141 = Utf8               java/lang/StringBuilder\n+  #142 = NameAndType        #212:#213     // append:(C)Ljava/lang/StringBuilder;\n+  #143 = NameAndType        #214:#215     // toString:()Ljava/lang/String;\n+  #144 = NameAndType        #76:#75       // RUSSIAN_STUFF_UNICODE:[I\n+  #145 = NameAndType        #88:#89       // constructString:([I)Ljava/lang/String;\n+  #146 = NameAndType        #74:#75       // SWISS_GERMAN_STUFF_UNICODE:[I\n+  #147 = Utf8               org/apache/commons/codec/net/URLCodec\n+  #148 = NameAndType        #84:#85       // validateState:(Lorg/apache/commons/codec/net/URLCodec;)V\n+  #149 = Utf8               %D0%92%D1%81%D0%B5%D0%BC_%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82\n+  #150 = Utf8               org/apache/commons/codec/CharEncoding\n+  #151 = Utf8               UTF-8\n+  #152 = NameAndType        #216:#217     // encode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+  #153 = Class              #218          // org/junit/Assert\n+  #154 = NameAndType        #219:#220     // assertEquals:(Ljava/lang/Object;Ljava/lang/Object;)V\n+  #155 = Utf8               Gr%C3%BCezi_z%C3%A4m%C3%A4\n+  #156 = NameAndType        #221:#217     // decode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+  #157 = Utf8               Hello there!\n+  #158 = NameAndType        #216:#222     // encode:(Ljava/lang/String;)Ljava/lang/String;\n+  #159 = Utf8               Basic URL encoding test\n+  #160 = Utf8               Hello+there%21\n+  #161 = NameAndType        #219:#223     // assertEquals:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V\n+  #162 = Utf8               Basic URL decoding test\n+  #163 = NameAndType        #221:#222     // decode:(Ljava/lang/String;)Ljava/lang/String;\n+  #164 = Utf8               abc123_-.*\n+  #165 = Utf8               Safe chars URL encoding test\n+  #166 = Utf8               Safe chars URL decoding test\n+  #167 = Utf8               ~!@#$%^&()+{}\\\"\\\\;:`,/[]\n+  #168 = Utf8               Unsafe chars URL encoding test\n+  #169 = Utf8               %7E%21%40%23%24%25%5E%26%28%29%2B%7B%7D%22%5C%3B%3A%60%2C%2F%5B%5D\n+  #170 = Utf8               Unsafe chars URL decoding test\n+  #171 = Utf8               Null string URL encoding test\n+  #172 = Utf8               java/lang/String\n+  #173 = NameAndType        #224:#225     // assertNull:(Ljava/lang/String;Ljava/lang/Object;)V\n+  #174 = Utf8               Null string URL decoding test\n+  #175 = Utf8               %\n+  #176 = Utf8               DecoderException should have been thrown\n+  #177 = NameAndType        #226:#227     // fail:(Ljava/lang/String;)V\n+  #178 = Utf8               org/apache/commons/codec/DecoderException\n+  #179 = Utf8               %A\n+  #180 = Utf8               %WW\n+  #181 = Utf8               %0W\n+  #182 = Utf8               ISO-8859-1\n+  #183 = NameAndType        #228:#229     // getBytes:(Ljava/lang/String;)[B\n+  #184 = NameAndType        #221:#230     // decode:([B)[B\n+  #185 = NameAndType        #219:#231     // assertEquals:(JJ)V\n+  #186 = NameAndType        #216:#230     // encode:([B)[B\n+  #187 = Utf8               Encoding a null string should return null\n+  #188 = Class              #232          // org/apache/commons/codec/Charsets\n+  #189 = NameAndType        #233:#234     // UTF_8:Ljava/nio/charset/Charset;\n+  #190 = NameAndType        #228:#235     // getBytes:(Ljava/nio/charset/Charset;)[B\n+  #191 = NameAndType        #236:#237     // encodeUrl:(Ljava/util/BitSet;[B)[B\n+  #192 = NameAndType        #77:#238      // \"<init>\":([B)V\n+  #193 = NameAndType        #239:#230     // decodeUrl:([B)[B\n+  #194 = Utf8               Result should be null\n+  #195 = Utf8               charset\n+  #196 = NameAndType        #216:#240     // encode:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #197 = Utf8               Encoding a null Object should return null\n+  #198 = Utf8               java/lang/Double\n+  #199 = NameAndType        #77:#241      // \"<init>\":(D)V\n+  #200 = Utf8               Trying to url encode a Double object should cause an exception.\n+  #201 = Utf8               org/apache/commons/codec/EncoderException\n+  #202 = Utf8               NONSENSE\n+  #203 = NameAndType        #77:#227      // \"<init>\":(Ljava/lang/String;)V\n+  #204 = Utf8               We set the encoding to a bogus NONSENSE vlaue, this shouldn\\'t have worked.\n+  #205 = NameAndType        #221:#240     // decode:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #206 = Utf8               Decoding a null Object should return null\n+  #207 = Utf8               UnicodeBig\n+  #208 = Utf8               org/apache/commons/codec/net/URLCodecTest\n+  #209 = Utf8               java/lang/Object\n+  #210 = Utf8               java/lang/Exception\n+  #211 = Utf8               java/io/UnsupportedEncodingException\n+  #212 = Utf8               append\n+  #213 = Utf8               (C)Ljava/lang/StringBuilder;\n+  #214 = Utf8               toString\n+  #215 = Utf8               ()Ljava/lang/String;\n+  #216 = Utf8               encode\n+  #217 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\n+  #218 = Utf8               org/junit/Assert\n+  #219 = Utf8               assertEquals\n+  #220 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)V\n+  #221 = Utf8               decode\n+  #222 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #223 = Utf8               (Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V\n+  #224 = Utf8               assertNull\n+  #225 = Utf8               (Ljava/lang/String;Ljava/lang/Object;)V\n+  #226 = Utf8               fail\n+  #227 = Utf8               (Ljava/lang/String;)V\n+  #228 = Utf8               getBytes\n+  #229 = Utf8               (Ljava/lang/String;)[B\n+  #230 = Utf8               ([B)[B\n+  #231 = Utf8               (JJ)V\n+  #232 = Utf8               org/apache/commons/codec/Charsets\n+  #233 = Utf8               UTF_8\n+  #234 = Utf8               Ljava/nio/charset/Charset;\n+  #235 = Utf8               (Ljava/nio/charset/Charset;)[B\n+  #236 = Utf8               encodeUrl\n+  #237 = Utf8               (Ljava/util/BitSet;[B)[B\n+  #238 = Utf8               ([B)V\n+  #239 = Utf8               decodeUrl\n+  #240 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #241 = Utf8               (D)V\n {\n   static final int[] SWISS_GERMAN_STUFF_UNICODE;\n     descriptor: [I\n     flags: (0x0018) ACC_STATIC, ACC_FINAL\n \n   static final int[] RUSSIAN_STUFF_UNICODE;\n     descriptor: [I\n@@ -419,15 +412,15 @@\n             0      93     0  this   Lorg/apache/commons/codec/net/URLCodecTest;\n             8      85     1 ru_msg   Ljava/lang/String;\n            16      77     2 ch_msg   Ljava/lang/String;\n            24      69     3 urlCodec   Lorg/apache/commons/codec/net/URLCodec;\n     Exceptions:\n       throws java.lang.Exception\n     RuntimeVisibleAnnotations:\n-      0: #106()\n+      0: #104()\n         org.junit.Test\n \n   public void testBasicEncodeDecode() throws java.lang.Exception;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=1\n@@ -470,15 +463,15 @@\n             0      44     0  this   Lorg/apache/commons/codec/net/URLCodecTest;\n             8      36     1 urlCodec   Lorg/apache/commons/codec/net/URLCodec;\n            11      33     2 plain   Ljava/lang/String;\n            18      26     3 encoded   Ljava/lang/String;\n     Exceptions:\n       throws java.lang.Exception\n     RuntimeVisibleAnnotations:\n-      0: #106()\n+      0: #104()\n         org.junit.Test\n \n   public void testSafeCharEncodeDecode() throws java.lang.Exception;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=1\n@@ -521,15 +514,15 @@\n             0      44     0  this   Lorg/apache/commons/codec/net/URLCodecTest;\n             8      36     1 urlCodec   Lorg/apache/commons/codec/net/URLCodec;\n            11      33     2 plain   Ljava/lang/String;\n            18      26     3 encoded   Ljava/lang/String;\n     Exceptions:\n       throws java.lang.Exception\n     RuntimeVisibleAnnotations:\n-      0: #106()\n+      0: #104()\n         org.junit.Test\n \n   public void testUnsafeEncodeDecode() throws java.lang.Exception;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=1\n@@ -572,15 +565,15 @@\n             0      44     0  this   Lorg/apache/commons/codec/net/URLCodecTest;\n             8      36     1 urlCodec   Lorg/apache/commons/codec/net/URLCodec;\n            11      33     2 plain   Ljava/lang/String;\n            18      26     3 encoded   Ljava/lang/String;\n     Exceptions:\n       throws java.lang.Exception\n     RuntimeVisibleAnnotations:\n-      0: #106()\n+      0: #104()\n         org.junit.Test\n \n   public void testEncodeDecodeNull() throws java.lang.Exception;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n@@ -617,15 +610,15 @@\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      40     0  this   Lorg/apache/commons/codec/net/URLCodecTest;\n             8      32     1 urlCodec   Lorg/apache/commons/codec/net/URLCodec;\n     Exceptions:\n       throws java.lang.Exception\n     RuntimeVisibleAnnotations:\n-      0: #106()\n+      0: #104()\n         org.junit.Test\n \n   public void testDecodeInvalid() throws java.lang.Exception;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=3, args_size=1\n@@ -713,15 +706,15 @@\n         frame_type = 0 /* same */\n         frame_type = 78 /* same_locals_1_stack_item */\n           stack = [ class org/apache/commons/codec/DecoderException ]\n         frame_type = 0 /* same */\n     Exceptions:\n       throws java.lang.Exception\n     RuntimeVisibleAnnotations:\n-      0: #106()\n+      0: #104()\n         org.junit.Test\n \n   public void testDecodeInvalidContent() throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=6, args_size=1\n@@ -794,15 +787,15 @@\n           locals = [ class org/apache/commons/codec/net/URLCodecTest, class java/lang/String, class org/apache/commons/codec/net/URLCodec, class \"[B\", class \"[B\", int ]\n           stack = []\n         frame_type = 250 /* chop */\n           offset_delta = 26\n     Exceptions:\n       throws java.io.UnsupportedEncodingException, org.apache.commons.codec.DecoderException\n     RuntimeVisibleAnnotations:\n-      0: #106()\n+      0: #104()\n         org.junit.Test\n \n   public void testEncodeNull() throws java.lang.Exception;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=4, args_size=1\n@@ -836,15 +829,15 @@\n             0      29     0  this   Lorg/apache/commons/codec/net/URLCodecTest;\n             8      21     1 urlCodec   Lorg/apache/commons/codec/net/URLCodec;\n            10      19     2 plain   [B\n            16      13     3 encoded   [B\n     Exceptions:\n       throws java.lang.Exception\n     RuntimeVisibleAnnotations:\n-      0: #106()\n+      0: #104()\n         org.junit.Test\n \n   public void testEncodeUrlWithNullBitSet() throws java.lang.Exception;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=4, args_size=1\n@@ -892,15 +885,15 @@\n             0      57     0  this   Lorg/apache/commons/codec/net/URLCodecTest;\n             8      49     1 urlCodec   Lorg/apache/commons/codec/net/URLCodec;\n            11      46     2 plain   Ljava/lang/String;\n            31      26     3 encoded   Ljava/lang/String;\n     Exceptions:\n       throws java.lang.Exception\n     RuntimeVisibleAnnotations:\n-      0: #106()\n+      0: #104()\n         org.junit.Test\n \n   public void testDecodeWithNullArray() throws java.lang.Exception;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=1\n@@ -923,15 +916,15 @@\n         Start  Length  Slot  Name   Signature\n             0      15     0  this   Lorg/apache/commons/codec/net/URLCodecTest;\n             2      13     1 plain   [B\n             7       8     2 result   [B\n     Exceptions:\n       throws java.lang.Exception\n     RuntimeVisibleAnnotations:\n-      0: #106()\n+      0: #104()\n         org.junit.Test\n \n   public void testEncodeStringWithNull() throws java.lang.Exception;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=4, args_size=1\n@@ -962,15 +955,15 @@\n             0      26     0  this   Lorg/apache/commons/codec/net/URLCodecTest;\n             8      18     1 urlCodec   Lorg/apache/commons/codec/net/URLCodec;\n            10      16     2  test   Ljava/lang/String;\n            18       8     3 result   Ljava/lang/String;\n     Exceptions:\n       throws java.lang.Exception\n     RuntimeVisibleAnnotations:\n-      0: #106()\n+      0: #104()\n         org.junit.Test\n \n   public void testDecodeStringWithNull() throws java.lang.Exception;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=4, args_size=1\n@@ -1001,15 +994,15 @@\n             0      26     0  this   Lorg/apache/commons/codec/net/URLCodecTest;\n             8      18     1 urlCodec   Lorg/apache/commons/codec/net/URLCodec;\n            10      16     2  test   Ljava/lang/String;\n            18       8     3 result   Ljava/lang/String;\n     Exceptions:\n       throws java.lang.Exception\n     RuntimeVisibleAnnotations:\n-      0: #106()\n+      0: #104()\n         org.junit.Test\n \n   public void testEncodeObjects() throws java.lang.Exception;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=8, args_size=1\n@@ -1032,91 +1025,90 @@\n         31: getstatic     #50                 // Field org/apache/commons/codec/Charsets.UTF_8:Ljava/nio/charset/Charset;\n         34: invokevirtual #51                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n         37: astore        4\n         39: aload_1\n         40: aload         4\n         42: invokevirtual #57                 // Method org/apache/commons/codec/net/URLCodec.encode:(Ljava/lang/Object;)Ljava/lang/Object;\n         45: checkcast     #58                 // class \"[B\"\n-        48: checkcast     #58                 // class \"[B\"\n-        51: astore        5\n-        53: new           #34                 // class java/lang/String\n-        56: dup\n-        57: aload         5\n-        59: invokespecial #53                 // Method java/lang/String.\"<init>\":([B)V\n-        62: astore_3\n-        63: ldc           #21                 // String Basic URL encoding test\n-        65: ldc           #22                 // String Hello+there%21\n-        67: aload_3\n-        68: invokestatic  #23                 // Method org/junit/Assert.assertEquals:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V\n-        71: aload_1\n-        72: aconst_null\n-        73: invokevirtual #57                 // Method org/apache/commons/codec/net/URLCodec.encode:(Ljava/lang/Object;)Ljava/lang/Object;\n-        76: astore        6\n-        78: ldc           #59                 // String Encoding a null Object should return null\n-        80: aconst_null\n-        81: aload         6\n-        83: invokestatic  #23                 // Method org/junit/Assert.assertEquals:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V\n-        86: new           #60                 // class java/lang/Double\n-        89: dup\n-        90: ldc2_w        #61                 // double 3.0d\n-        93: invokespecial #63                 // Method java/lang/Double.\"<init>\":(D)V\n-        96: astore        7\n-        98: aload_1\n-        99: aload         7\n-       101: invokevirtual #57                 // Method org/apache/commons/codec/net/URLCodec.encode:(Ljava/lang/Object;)Ljava/lang/Object;\n-       104: pop\n-       105: ldc           #64                 // String Trying to url encode a Double object should cause an exception.\n-       107: invokestatic  #39                 // Method org/junit/Assert.fail:(Ljava/lang/String;)V\n-       110: goto          115\n-       113: astore        7\n-       115: aload_0\n-       116: aload_1\n-       117: invokespecial #11                 // Method validateState:(Lorg/apache/commons/codec/net/URLCodec;)V\n-       120: return\n+        48: astore        5\n+        50: new           #34                 // class java/lang/String\n+        53: dup\n+        54: aload         5\n+        56: invokespecial #53                 // Method java/lang/String.\"<init>\":([B)V\n+        59: astore_3\n+        60: ldc           #21                 // String Basic URL encoding test\n+        62: ldc           #22                 // String Hello+there%21\n+        64: aload_3\n+        65: invokestatic  #23                 // Method org/junit/Assert.assertEquals:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V\n+        68: aload_1\n+        69: aconst_null\n+        70: invokevirtual #57                 // Method org/apache/commons/codec/net/URLCodec.encode:(Ljava/lang/Object;)Ljava/lang/Object;\n+        73: astore        6\n+        75: ldc           #59                 // String Encoding a null Object should return null\n+        77: aconst_null\n+        78: aload         6\n+        80: invokestatic  #23                 // Method org/junit/Assert.assertEquals:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V\n+        83: new           #60                 // class java/lang/Double\n+        86: dup\n+        87: ldc2_w        #61                 // double 3.0d\n+        90: invokespecial #63                 // Method java/lang/Double.\"<init>\":(D)V\n+        93: astore        7\n+        95: aload_1\n+        96: aload         7\n+        98: invokevirtual #57                 // Method org/apache/commons/codec/net/URLCodec.encode:(Ljava/lang/Object;)Ljava/lang/Object;\n+       101: pop\n+       102: ldc           #64                 // String Trying to url encode a Double object should cause an exception.\n+       104: invokestatic  #39                 // Method org/junit/Assert.fail:(Ljava/lang/String;)V\n+       107: goto          112\n+       110: astore        7\n+       112: aload_0\n+       113: aload_1\n+       114: invokespecial #11                 // Method validateState:(Lorg/apache/commons/codec/net/URLCodec;)V\n+       117: return\n       Exception table:\n          from    to  target type\n-            86   110   113   Class org/apache/commons/codec/EncoderException\n+            83   107   110   Class org/apache/commons/codec/EncoderException\n       LineNumberTable:\n         line 224: 0\n         line 225: 8\n         line 226: 11\n         line 227: 21\n         line 230: 29\n         line 231: 39\n-        line 232: 53\n-        line 233: 63\n-        line 236: 71\n-        line 237: 78\n-        line 240: 86\n-        line 241: 98\n-        line 242: 105\n-        line 245: 110\n-        line 243: 113\n-        line 246: 115\n-        line 247: 120\n+        line 232: 50\n+        line 233: 60\n+        line 236: 68\n+        line 237: 75\n+        line 240: 83\n+        line 241: 95\n+        line 242: 102\n+        line 245: 107\n+        line 243: 110\n+        line 246: 112\n+        line 247: 117\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           98      12     7  dObj   Ljava/lang/Object;\n-            0     121     0  this   Lorg/apache/commons/codec/net/URLCodecTest;\n-            8     113     1 urlCodec   Lorg/apache/commons/codec/net/URLCodec;\n-           11     110     2 plain   Ljava/lang/String;\n-           21     100     3 encoded   Ljava/lang/String;\n-           39      82     4 plainBA   [B\n-           53      68     5 encodedBA   [B\n-           78      43     6 result   Ljava/lang/Object;\n+           95      12     7  dObj   Ljava/lang/Object;\n+            0     118     0  this   Lorg/apache/commons/codec/net/URLCodecTest;\n+            8     110     1 urlCodec   Lorg/apache/commons/codec/net/URLCodec;\n+           11     107     2 plain   Ljava/lang/String;\n+           21      97     3 encoded   Ljava/lang/String;\n+           39      79     4 plainBA   [B\n+           50      68     5 encodedBA   [B\n+           75      43     6 result   Ljava/lang/Object;\n       StackMapTable: number_of_entries = 2\n         frame_type = 255 /* full_frame */\n-          offset_delta = 113\n+          offset_delta = 110\n           locals = [ class org/apache/commons/codec/net/URLCodecTest, class org/apache/commons/codec/net/URLCodec, class java/lang/String, class java/lang/String, class \"[B\", class \"[B\", class java/lang/Object ]\n           stack = [ class org/apache/commons/codec/EncoderException ]\n         frame_type = 1 /* same */\n     Exceptions:\n       throws java.lang.Exception\n     RuntimeVisibleAnnotations:\n-      0: #106()\n+      0: #104()\n         org.junit.Test\n \n   public void testInvalidEncoding();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=4, args_size=1\n@@ -1175,15 +1167,15 @@\n           locals = [ class org/apache/commons/codec/net/URLCodecTest, class org/apache/commons/codec/net/URLCodec, class java/lang/String ]\n           stack = [ class org/apache/commons/codec/EncoderException ]\n         frame_type = 0 /* same */\n         frame_type = 78 /* same_locals_1_stack_item */\n           stack = [ class org/apache/commons/codec/DecoderException ]\n         frame_type = 0 /* same */\n     RuntimeVisibleAnnotations:\n-      0: #106()\n+      0: #104()\n         org.junit.Test\n \n   public void testDecodeObjects() throws java.lang.Exception;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=8, args_size=1\n@@ -1206,91 +1198,90 @@\n         31: getstatic     #50                 // Field org/apache/commons/codec/Charsets.UTF_8:Ljava/nio/charset/Charset;\n         34: invokevirtual #51                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n         37: astore        4\n         39: aload_1\n         40: aload         4\n         42: invokevirtual #69                 // Method org/apache/commons/codec/net/URLCodec.decode:(Ljava/lang/Object;)Ljava/lang/Object;\n         45: checkcast     #58                 // class \"[B\"\n-        48: checkcast     #58                 // class \"[B\"\n-        51: astore        5\n-        53: new           #34                 // class java/lang/String\n-        56: dup\n-        57: aload         5\n-        59: invokespecial #53                 // Method java/lang/String.\"<init>\":([B)V\n-        62: astore_3\n-        63: ldc           #24                 // String Basic URL decoding test\n-        65: ldc           #19                 // String Hello there!\n-        67: aload_3\n-        68: invokestatic  #23                 // Method org/junit/Assert.assertEquals:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V\n-        71: aload_1\n-        72: aconst_null\n-        73: invokevirtual #69                 // Method org/apache/commons/codec/net/URLCodec.decode:(Ljava/lang/Object;)Ljava/lang/Object;\n-        76: astore        6\n-        78: ldc           #70                 // String Decoding a null Object should return null\n-        80: aconst_null\n-        81: aload         6\n-        83: invokestatic  #23                 // Method org/junit/Assert.assertEquals:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V\n-        86: new           #60                 // class java/lang/Double\n-        89: dup\n-        90: ldc2_w        #61                 // double 3.0d\n-        93: invokespecial #63                 // Method java/lang/Double.\"<init>\":(D)V\n-        96: astore        7\n-        98: aload_1\n-        99: aload         7\n-       101: invokevirtual #69                 // Method org/apache/commons/codec/net/URLCodec.decode:(Ljava/lang/Object;)Ljava/lang/Object;\n-       104: pop\n-       105: ldc           #64                 // String Trying to url encode a Double object should cause an exception.\n-       107: invokestatic  #39                 // Method org/junit/Assert.fail:(Ljava/lang/String;)V\n-       110: goto          115\n-       113: astore        7\n-       115: aload_0\n-       116: aload_1\n-       117: invokespecial #11                 // Method validateState:(Lorg/apache/commons/codec/net/URLCodec;)V\n-       120: return\n+        48: astore        5\n+        50: new           #34                 // class java/lang/String\n+        53: dup\n+        54: aload         5\n+        56: invokespecial #53                 // Method java/lang/String.\"<init>\":([B)V\n+        59: astore_3\n+        60: ldc           #24                 // String Basic URL decoding test\n+        62: ldc           #19                 // String Hello there!\n+        64: aload_3\n+        65: invokestatic  #23                 // Method org/junit/Assert.assertEquals:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V\n+        68: aload_1\n+        69: aconst_null\n+        70: invokevirtual #69                 // Method org/apache/commons/codec/net/URLCodec.decode:(Ljava/lang/Object;)Ljava/lang/Object;\n+        73: astore        6\n+        75: ldc           #70                 // String Decoding a null Object should return null\n+        77: aconst_null\n+        78: aload         6\n+        80: invokestatic  #23                 // Method org/junit/Assert.assertEquals:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V\n+        83: new           #60                 // class java/lang/Double\n+        86: dup\n+        87: ldc2_w        #61                 // double 3.0d\n+        90: invokespecial #63                 // Method java/lang/Double.\"<init>\":(D)V\n+        93: astore        7\n+        95: aload_1\n+        96: aload         7\n+        98: invokevirtual #69                 // Method org/apache/commons/codec/net/URLCodec.decode:(Ljava/lang/Object;)Ljava/lang/Object;\n+       101: pop\n+       102: ldc           #64                 // String Trying to url encode a Double object should cause an exception.\n+       104: invokestatic  #39                 // Method org/junit/Assert.fail:(Ljava/lang/String;)V\n+       107: goto          112\n+       110: astore        7\n+       112: aload_0\n+       113: aload_1\n+       114: invokespecial #11                 // Method validateState:(Lorg/apache/commons/codec/net/URLCodec;)V\n+       117: return\n       Exception table:\n          from    to  target type\n-            86   110   113   Class org/apache/commons/codec/DecoderException\n+            83   107   110   Class org/apache/commons/codec/DecoderException\n       LineNumberTable:\n         line 270: 0\n         line 271: 8\n         line 272: 11\n         line 273: 21\n         line 276: 29\n         line 277: 39\n-        line 278: 53\n-        line 279: 63\n-        line 282: 71\n-        line 283: 78\n-        line 286: 86\n-        line 287: 98\n-        line 288: 105\n-        line 291: 110\n-        line 289: 113\n-        line 292: 115\n-        line 293: 120\n+        line 278: 50\n+        line 279: 60\n+        line 282: 68\n+        line 283: 75\n+        line 286: 83\n+        line 287: 95\n+        line 288: 102\n+        line 291: 107\n+        line 289: 110\n+        line 292: 112\n+        line 293: 117\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           98      12     7  dObj   Ljava/lang/Object;\n-            0     121     0  this   Lorg/apache/commons/codec/net/URLCodecTest;\n-            8     113     1 urlCodec   Lorg/apache/commons/codec/net/URLCodec;\n-           11     110     2 plain   Ljava/lang/String;\n-           21     100     3 decoded   Ljava/lang/String;\n-           39      82     4 plainBA   [B\n-           53      68     5 decodedBA   [B\n-           78      43     6 result   Ljava/lang/Object;\n+           95      12     7  dObj   Ljava/lang/Object;\n+            0     118     0  this   Lorg/apache/commons/codec/net/URLCodecTest;\n+            8     110     1 urlCodec   Lorg/apache/commons/codec/net/URLCodec;\n+           11     107     2 plain   Ljava/lang/String;\n+           21      97     3 decoded   Ljava/lang/String;\n+           39      79     4 plainBA   [B\n+           50      68     5 decodedBA   [B\n+           75      43     6 result   Ljava/lang/Object;\n       StackMapTable: number_of_entries = 2\n         frame_type = 255 /* full_frame */\n-          offset_delta = 113\n+          offset_delta = 110\n           locals = [ class org/apache/commons/codec/net/URLCodecTest, class org/apache/commons/codec/net/URLCodec, class java/lang/String, class java/lang/String, class \"[B\", class \"[B\", class java/lang/Object ]\n           stack = [ class org/apache/commons/codec/DecoderException ]\n         frame_type = 1 /* same */\n     Exceptions:\n       throws java.lang.Exception\n     RuntimeVisibleAnnotations:\n-      0: #106()\n+      0: #104()\n         org.junit.Test\n \n   public void testDefaultEncoding() throws java.lang.Exception;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=5, args_size=1\n@@ -1336,15 +1327,15 @@\n             3      46     1 plain   Ljava/lang/String;\n            13      36     2 urlCodec   Lorg/apache/commons/codec/net/URLCodec;\n            29      20     3 encoded1   Ljava/lang/String;\n            37      12     4 encoded2   Ljava/lang/String;\n     Exceptions:\n       throws java.lang.Exception\n     RuntimeVisibleAnnotations:\n-      0: #106()\n+      0: #104()\n         org.junit.Test\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=4, locals=0, args_size=0\n"}]}
