{"diffoscope-json-version": 1, "source1": "first/PkgImportControl.class", "source2": "second/PkgImportControl.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,14 +14,18 @@\n     private static final String DOT_ESCAPED_REGEX = \"\\\\\\\\.\";\n     private final List<AbstractImportControl> children;\n     private final String fullPackageName;\n     private final Pattern patternForPartialMatch;\n     private final Pattern patternForExactMatch;\n     private final boolean regex;\n     \n+    static {\n+        DOT_REGEX_PATTERN = Pattern.compile(\"\\\\.\");\n+    }\n+    \n     PkgImportControl(final String packageName, final boolean regex, final MismatchStrategy strategyOnMismatch) {\n         super((AbstractImportControl)null, strategyOnMismatch);\n         this.children = new ArrayList<AbstractImportControl>();\n         this.regex = regex;\n         if (regex) {\n             this.fullPackageName = encloseInGroup(packageName);\n             this.patternForPartialMatch = createPatternForPartialMatch(this.fullPackageName);\n@@ -36,21 +40,21 @@\n     \n     PkgImportControl(final PkgImportControl parent, final String subPackageName, final boolean regex, final MismatchStrategy strategyOnMismatch) {\n         super((AbstractImportControl)parent, strategyOnMismatch);\n         this.children = new ArrayList<AbstractImportControl>();\n         if (regex || parent.regex) {\n             final String parentRegex = ensureSelfContainedRegex(parent.fullPackageName, parent.regex);\n             final String thisRegex = ensureSelfContainedRegex(subPackageName, regex);\n-            this.fullPackageName = parentRegex + \"\\\\.\" + thisRegex;\n+            this.fullPackageName = String.valueOf(parentRegex) + \"\\\\.\" + thisRegex;\n             this.patternForPartialMatch = createPatternForPartialMatch(this.fullPackageName);\n             this.patternForExactMatch = createPatternForExactMatch(this.fullPackageName);\n             this.regex = true;\n         }\n         else {\n-            this.fullPackageName = parent.fullPackageName + \".\" + subPackageName;\n+            this.fullPackageName = String.valueOf(parent.fullPackageName) + \".\" + subPackageName;\n             this.patternForPartialMatch = null;\n             this.patternForExactMatch = null;\n             this.regex = false;\n         }\n     }\n     \n     private static String ensureSelfContainedRegex(final String input, final boolean alreadyRegex) {\n@@ -61,23 +65,23 @@\n         else {\n             result = toRegex(input);\n         }\n         return result;\n     }\n     \n     private static String encloseInGroup(final String expression) {\n-        return \"(?:\" + expression;\n+        return \"(?:\" + expression + \")\";\n     }\n     \n     private static String toRegex(final String input) {\n         return PkgImportControl.DOT_REGEX_PATTERN.matcher(input).replaceAll(\"\\\\\\\\.\");\n     }\n     \n     private static Pattern createPatternForPartialMatch(final String expression) {\n-        return Pattern.compile(expression + \"(?:\\\\..*)?\");\n+        return Pattern.compile(String.valueOf(expression) + \"(?:\\\\..*)?\");\n     }\n     \n     private static Pattern createPatternForExactMatch(final String expression) {\n         return Pattern.compile(expression);\n     }\n     \n     public AbstractImportControl locateFinest(final String forPkg, final String forFileName) {\n@@ -121,12 +125,8 @@\n             result = this.patternForExactMatch.matcher(pkg).matches();\n         }\n         else {\n             result = this.fullPackageName.equals(pkg);\n         }\n         return result;\n     }\n-    \n-    static {\n-        DOT_REGEX_PATTERN = Pattern.compile(\"\\\\.\");\n-    }\n }\n"}]}
