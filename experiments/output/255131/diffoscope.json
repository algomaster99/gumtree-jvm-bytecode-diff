{"diffoscope-json-version": 1, "source1": "first/DumpArchiveEntry.class", "source2": "second/DumpArchiveEntry.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -77,16 +77,16 @@\n         this.nlink = nlink;\n     }\n     \n     public Date getCreationTime() {\n         return new Date(this.ctime);\n     }\n     \n-    public void setCreationTime(final Date ctime) {\n-        this.ctime = ctime.getTime();\n+    public void setCreationTime(final Date date) {\n+        this.ctime = date.getTime();\n     }\n     \n     public int getGeneration() {\n         return this.generation;\n     }\n     \n     public void setGeneration(final int generation) {\n@@ -125,16 +125,16 @@\n         return this.header.getCount();\n     }\n     \n     public int getHeaderHoles() {\n         return this.header.getHoles();\n     }\n     \n-    public boolean isSparseRecord(final int idx) {\n-        return (this.header.getCdata(idx) & 0x1) == 0x0;\n+    public boolean isSparseRecord(final int n) {\n+        return (this.header.getCdata(n) & 0x1) == 0x0;\n     }\n     \n     @Override\n     public int hashCode() {\n         return this.ino;\n     }\n     \n@@ -142,86 +142,83 @@\n     public boolean equals(final Object o) {\n         if (o == this) {\n             return true;\n         }\n         if (o == null || !o.getClass().equals(this.getClass())) {\n             return false;\n         }\n-        final DumpArchiveEntry rhs = (DumpArchiveEntry)o;\n-        return rhs.header != null && this.ino == rhs.ino && (this.summary != null || rhs.summary == null) && (this.summary == null || this.summary.equals((Object)rhs.summary));\n+        final DumpArchiveEntry dumpArchiveEntry = (DumpArchiveEntry)o;\n+        return dumpArchiveEntry.header != null && this.ino == dumpArchiveEntry.ino && (this.summary != null || dumpArchiveEntry.summary == null) && (this.summary == null || this.summary.equals((Object)dumpArchiveEntry.summary));\n     }\n     \n     @Override\n     public String toString() {\n         return this.getName();\n     }\n     \n-    static DumpArchiveEntry parse(final byte[] buffer) {\n-        final DumpArchiveEntry entry = new DumpArchiveEntry();\n-        final DumpArchiveEntry.TapeSegmentHeader header = entry.header;\n-        DumpArchiveEntry.TapeSegmentHeader.access$002(header, DumpArchiveConstants.SEGMENT_TYPE.find(DumpArchiveUtil.convert32(buffer, 0)));\n-        DumpArchiveEntry.TapeSegmentHeader.access$102(header, DumpArchiveUtil.convert32(buffer, 12));\n-        entry.ino = DumpArchiveEntry.TapeSegmentHeader.access$202(header, DumpArchiveUtil.convert32(buffer, 20));\n-        final int m = DumpArchiveUtil.convert16(buffer, 32);\n-        entry.setType(DumpArchiveEntry.TYPE.find(m >> 12 & 0xF));\n-        entry.setMode(m);\n-        entry.nlink = DumpArchiveUtil.convert16(buffer, 34);\n-        entry.setSize(DumpArchiveUtil.convert64(buffer, 40));\n-        long t = 1000L * DumpArchiveUtil.convert32(buffer, 48) + DumpArchiveUtil.convert32(buffer, 52) / 1000;\n-        entry.setAccessTime(new Date(t));\n-        t = 1000L * DumpArchiveUtil.convert32(buffer, 56) + DumpArchiveUtil.convert32(buffer, 60) / 1000;\n-        entry.setLastModifiedDate(new Date(t));\n-        t = 1000L * DumpArchiveUtil.convert32(buffer, 64) + DumpArchiveUtil.convert32(buffer, 68) / 1000;\n-        entry.ctime = t;\n-        entry.generation = DumpArchiveUtil.convert32(buffer, 140);\n-        entry.setUserId(DumpArchiveUtil.convert32(buffer, 144));\n-        entry.setGroupId(DumpArchiveUtil.convert32(buffer, 148));\n-        DumpArchiveEntry.TapeSegmentHeader.access$302(header, DumpArchiveUtil.convert32(buffer, 160));\n+    static DumpArchiveEntry parse(final byte[] array) {\n+        final DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();\n+        final DumpArchiveEntry.TapeSegmentHeader header = dumpArchiveEntry.header;\n+        DumpArchiveEntry.TapeSegmentHeader.access$002(header, DumpArchiveConstants.SEGMENT_TYPE.find(DumpArchiveUtil.convert32(array, 0)));\n+        DumpArchiveEntry.TapeSegmentHeader.access$102(header, DumpArchiveUtil.convert32(array, 12));\n+        dumpArchiveEntry.ino = DumpArchiveEntry.TapeSegmentHeader.access$202(header, DumpArchiveUtil.convert32(array, 20));\n+        final int convert16 = DumpArchiveUtil.convert16(array, 32);\n+        dumpArchiveEntry.setType(DumpArchiveEntry.TYPE.find(convert16 >> 12 & 0xF));\n+        dumpArchiveEntry.setMode(convert16);\n+        dumpArchiveEntry.nlink = DumpArchiveUtil.convert16(array, 34);\n+        dumpArchiveEntry.setSize(DumpArchiveUtil.convert64(array, 40));\n+        dumpArchiveEntry.setAccessTime(new Date(1000L * DumpArchiveUtil.convert32(array, 48) + DumpArchiveUtil.convert32(array, 52) / 1000));\n+        dumpArchiveEntry.setLastModifiedDate(new Date(1000L * DumpArchiveUtil.convert32(array, 56) + DumpArchiveUtil.convert32(array, 60) / 1000));\n+        dumpArchiveEntry.ctime = 1000L * DumpArchiveUtil.convert32(array, 64) + DumpArchiveUtil.convert32(array, 68) / 1000;\n+        dumpArchiveEntry.generation = DumpArchiveUtil.convert32(array, 140);\n+        dumpArchiveEntry.setUserId(DumpArchiveUtil.convert32(array, 144));\n+        dumpArchiveEntry.setGroupId(DumpArchiveUtil.convert32(array, 148));\n+        DumpArchiveEntry.TapeSegmentHeader.access$302(header, DumpArchiveUtil.convert32(array, 160));\n         DumpArchiveEntry.TapeSegmentHeader.access$402(header, 0);\n-        for (int i = 0; i < 512 && i < DumpArchiveEntry.TapeSegmentHeader.access$300(header); ++i) {\n-            if (buffer[164 + i] == 0) {\n+        for (int n = 0; n < 512 && n < DumpArchiveEntry.TapeSegmentHeader.access$300(header); ++n) {\n+            if (array[164 + n] == 0) {\n                 DumpArchiveEntry.TapeSegmentHeader.access$408(header);\n             }\n         }\n-        System.arraycopy(buffer, 164, DumpArchiveEntry.TapeSegmentHeader.access$500(header), 0, 512);\n-        entry.volume = header.getVolume();\n-        return entry;\n+        System.arraycopy(array, 164, DumpArchiveEntry.TapeSegmentHeader.access$500(header), 0, 512);\n+        dumpArchiveEntry.volume = header.getVolume();\n+        return dumpArchiveEntry;\n     }\n     \n-    void update(final byte[] buffer) {\n-        DumpArchiveEntry.TapeSegmentHeader.access$102(this.header, DumpArchiveUtil.convert32(buffer, 16));\n-        DumpArchiveEntry.TapeSegmentHeader.access$302(this.header, DumpArchiveUtil.convert32(buffer, 160));\n+    void update(final byte[] array) {\n+        DumpArchiveEntry.TapeSegmentHeader.access$102(this.header, DumpArchiveUtil.convert32(array, 16));\n+        DumpArchiveEntry.TapeSegmentHeader.access$302(this.header, DumpArchiveUtil.convert32(array, 160));\n         DumpArchiveEntry.TapeSegmentHeader.access$402(this.header, 0);\n-        for (int i = 0; i < 512 && i < DumpArchiveEntry.TapeSegmentHeader.access$300(this.header); ++i) {\n-            if (buffer[164 + i] == 0) {\n+        for (int n = 0; n < 512 && n < DumpArchiveEntry.TapeSegmentHeader.access$300(this.header); ++n) {\n+            if (array[164 + n] == 0) {\n                 DumpArchiveEntry.TapeSegmentHeader.access$408(this.header);\n             }\n         }\n-        System.arraycopy(buffer, 164, DumpArchiveEntry.TapeSegmentHeader.access$500(this.header), 0, 512);\n+        System.arraycopy(array, 164, DumpArchiveEntry.TapeSegmentHeader.access$500(this.header), 0, 512);\n     }\n     \n     public String getName() {\n         return this.name;\n     }\n     \n     String getOriginalName() {\n         return this.originalName;\n     }\n     \n-    public final void setName(String name) {\n-        this.originalName = name;\n-        if (name != null) {\n-            if (this.isDirectory() && !name.endsWith(\"/\")) {\n-                name = name;\n+    public final void setName(String substring) {\n+        this.originalName = substring;\n+        if (substring != null) {\n+            if (this.isDirectory() && !substring.endsWith(\"/\")) {\n+                substring = substring;\n             }\n-            if (name.startsWith(\"./\")) {\n-                name = name.substring(2);\n+            if (substring.startsWith(\"./\")) {\n+                substring = substring.substring(2);\n             }\n         }\n-        this.name = name;\n+        this.name = substring;\n     }\n     \n     public Date getLastModifiedDate() {\n         return new Date(this.mtime);\n     }\n     \n     public boolean isDirectory() {\n@@ -256,17 +253,17 @@\n         this.type = type;\n     }\n     \n     public int getMode() {\n         return this.mode;\n     }\n     \n-    public void setMode(final int mode) {\n-        this.mode = (mode & 0xFFF);\n-        this.permissions = DumpArchiveEntry.PERMISSION.find(mode);\n+    public void setMode(final int n) {\n+        this.mode = (n & 0xFFF);\n+        this.permissions = DumpArchiveEntry.PERMISSION.find(n);\n     }\n     \n     public Set<DumpArchiveEntry.PERMISSION> getPermissions() {\n         return this.permissions;\n     }\n     \n     public long getSize() {\n@@ -277,24 +274,24 @@\n         return this.size;\n     }\n     \n     public void setSize(final long size) {\n         this.size = size;\n     }\n     \n-    public void setLastModifiedDate(final Date mtime) {\n-        this.mtime = mtime.getTime();\n+    public void setLastModifiedDate(final Date date) {\n+        this.mtime = date.getTime();\n     }\n     \n     public Date getAccessTime() {\n         return new Date(this.atime);\n     }\n     \n-    public void setAccessTime(final Date atime) {\n-        this.atime = atime.getTime();\n+    public void setAccessTime(final Date date) {\n+        this.atime = date.getTime();\n     }\n     \n     public int getUserId() {\n         return this.uid;\n     }\n     \n     public void setUserId(final int uid) {\n"}]}
