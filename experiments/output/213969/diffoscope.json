{"diffoscope-json-version": 1, "source1": "first/TelnetOutputStream.class", "source2": "second/TelnetOutputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,72 +11,72 @@\n     private boolean lastWasCR;\n     \n     TelnetOutputStream(final TelnetClient client) {\n         this.client = client;\n     }\n     \n     @Override\n-    public void write(int ch) throws IOException {\n+    public void write(int n) throws IOException {\n         synchronized (this.client) {\n-            ch &= 0xFF;\n+            n &= 0xFF;\n             if (this.client.requestedWont(0)) {\n                 if (this.lastWasCR) {\n                     this.client.sendByte(10);\n-                    if (ch == 10) {\n+                    if (n == 10) {\n                         this.lastWasCR = false;\n                         return;\n                     }\n                 }\n-                switch (ch) {\n+                switch (n) {\n                     case 13: {\n                         this.client.sendByte(13);\n                         this.lastWasCR = true;\n                         break;\n                     }\n                     case 10: {\n                         if (!this.lastWasCR) {\n                             this.client.sendByte(13);\n                         }\n-                        this.client.sendByte(ch);\n+                        this.client.sendByte(n);\n                         this.lastWasCR = false;\n                         break;\n                     }\n                     case 255: {\n                         this.client.sendByte(255);\n                         this.client.sendByte(255);\n                         this.lastWasCR = false;\n                         break;\n                     }\n                     default: {\n-                        this.client.sendByte(ch);\n+                        this.client.sendByte(n);\n                         this.lastWasCR = false;\n                         break;\n                     }\n                 }\n             }\n-            else if (ch == 255) {\n-                this.client.sendByte(ch);\n+            else if (n == 255) {\n+                this.client.sendByte(n);\n                 this.client.sendByte(255);\n             }\n             else {\n-                this.client.sendByte(ch);\n+                this.client.sendByte(n);\n             }\n         }\n     }\n     \n     @Override\n-    public void write(final byte[] buffer) throws IOException {\n-        this.write(buffer, 0, buffer.length);\n+    public void write(final byte[] array) throws IOException {\n+        this.write(array, 0, array.length);\n     }\n     \n     @Override\n-    public void write(final byte[] buffer, int offset, int length) throws IOException {\n+    public void write(final byte[] array, int n, int n2) throws IOException {\n         synchronized (this.client) {\n-            while (length-- > 0) {\n-                this.write(buffer[offset++]);\n+            while (n2-- > 0) {\n+                this.write(array[n++]);\n             }\n         }\n     }\n     \n     @Override\n     public void flush() throws IOException {\n         this.client.flushOutputStream();\n"}]}
