{"diffoscope-json-version": 1, "source1": "first/BaseNCodecOutputStream.class", "source2": "second/BaseNCodecOutputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,118 +1,118 @@\n-  SHA-256 checksum ca36f07d41bea58599f4f712ed8cb36a15346acfe18b9ea57d0057a19626cd97\n+  SHA-256 checksum 0d17f5f8055adad659dd595b18685671cb2c2f849984efe73aa1fe01c7700d90\n   Compiled from \"BaseNCodecOutputStream.java\"\n public class org.apache.commons.codec.binary.BaseNCodecOutputStream extends java.io.FilterOutputStream\n   minor version: 0\n   major version: 50\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #25                         // org/apache/commons/codec/binary/BaseNCodecOutputStream\n-  super_class: #26                        // java/io/FilterOutputStream\n+  this_class: #1                          // org/apache/commons/codec/binary/BaseNCodecOutputStream\n+  super_class: #3                         // java/io/FilterOutputStream\n   interfaces: 0, fields: 4, methods: 7, attributes: 2\n Constant pool:\n-    #1 = Class              #69           // org/apache/commons/codec/binary/BaseNCodec\n-    #2 = Methodref          #26.#70       // java/io/FilterOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n-    #3 = Fieldref           #25.#71       // org/apache/commons/codec/binary/BaseNCodecOutputStream.singleByte:[B\n-    #4 = Class              #72           // org/apache/commons/codec/binary/BaseNCodec$Context\n-    #5 = Methodref          #4.#73        // org/apache/commons/codec/binary/BaseNCodec$Context.\"<init>\":()V\n-    #6 = Fieldref           #25.#74       // org/apache/commons/codec/binary/BaseNCodecOutputStream.context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-    #7 = Fieldref           #25.#75       // org/apache/commons/codec/binary/BaseNCodecOutputStream.baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n-    #8 = Fieldref           #25.#76       // org/apache/commons/codec/binary/BaseNCodecOutputStream.doEncode:Z\n-    #9 = Methodref          #25.#77       // org/apache/commons/codec/binary/BaseNCodecOutputStream.write:([BII)V\n-   #10 = Class              #78           // java/lang/NullPointerException\n-   #11 = Methodref          #10.#73       // java/lang/NullPointerException.\"<init>\":()V\n-   #12 = Class              #79           // java/lang/IndexOutOfBoundsException\n-   #13 = Methodref          #12.#73       // java/lang/IndexOutOfBoundsException.\"<init>\":()V\n-   #14 = Methodref          #1.#80        // org/apache/commons/codec/binary/BaseNCodec.encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-   #15 = Methodref          #1.#81        // org/apache/commons/codec/binary/BaseNCodec.decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-   #16 = Methodref          #25.#82       // org/apache/commons/codec/binary/BaseNCodecOutputStream.flush:(Z)V\n-   #17 = Methodref          #1.#83        // org/apache/commons/codec/binary/BaseNCodec.available:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n-   #18 = Methodref          #1.#84        // org/apache/commons/codec/binary/BaseNCodec.readResults:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n-   #19 = Fieldref           #25.#85       // org/apache/commons/codec/binary/BaseNCodecOutputStream.out:Ljava/io/OutputStream;\n-   #20 = Methodref          #86.#77       // java/io/OutputStream.write:([BII)V\n-   #21 = Methodref          #86.#87       // java/io/OutputStream.flush:()V\n-   #22 = Methodref          #25.#88       // org/apache/commons/codec/binary/BaseNCodecOutputStream.eof:()V\n-   #23 = Methodref          #25.#87       // org/apache/commons/codec/binary/BaseNCodecOutputStream.flush:()V\n-   #24 = Methodref          #86.#89       // java/io/OutputStream.close:()V\n-   #25 = Class              #90           // org/apache/commons/codec/binary/BaseNCodecOutputStream\n-   #26 = Class              #91           // java/io/FilterOutputStream\n-   #27 = Utf8               doEncode\n-   #28 = Utf8               Z\n-   #29 = Utf8               baseNCodec\n-   #30 = Utf8               Lorg/apache/commons/codec/binary/BaseNCodec;\n-   #31 = Utf8               singleByte\n-   #32 = Utf8               [B\n-   #33 = Utf8               context\n-   #34 = Utf8               Context\n-   #35 = Utf8               InnerClasses\n-   #36 = Utf8               Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-   #37 = Utf8               <init>\n-   #38 = Utf8               (Ljava/io/OutputStream;Lorg/apache/commons/codec/binary/BaseNCodec;Z)V\n-   #39 = Utf8               Code\n-   #40 = Utf8               LineNumberTable\n-   #41 = Utf8               LocalVariableTable\n-   #42 = Utf8               this\n-   #43 = Utf8               Lorg/apache/commons/codec/binary/BaseNCodecOutputStream;\n-   #44 = Utf8               out\n-   #45 = Utf8               Ljava/io/OutputStream;\n-   #46 = Utf8               basedCodec\n-   #47 = Utf8               write\n-   #48 = Utf8               (I)V\n-   #49 = Utf8               i\n-   #50 = Utf8               I\n-   #51 = Utf8               Exceptions\n-   #52 = Class              #92           // java/io/IOException\n-   #53 = Utf8               ([BII)V\n-   #54 = Utf8               b\n-   #55 = Utf8               offset\n-   #56 = Utf8               len\n-   #57 = Utf8               StackMapTable\n-   #58 = Utf8               flush\n-   #59 = Utf8               (Z)V\n-   #60 = Utf8               buf\n-   #61 = Utf8               c\n-   #62 = Utf8               propagate\n-   #63 = Utf8               avail\n-   #64 = Utf8               ()V\n-   #65 = Utf8               close\n-   #66 = Utf8               eof\n-   #67 = Utf8               SourceFile\n-   #68 = Utf8               BaseNCodecOutputStream.java\n-   #69 = Utf8               org/apache/commons/codec/binary/BaseNCodec\n-   #70 = NameAndType        #37:#93       // \"<init>\":(Ljava/io/OutputStream;)V\n-   #71 = NameAndType        #31:#32       // singleByte:[B\n-   #72 = Utf8               org/apache/commons/codec/binary/BaseNCodec$Context\n-   #73 = NameAndType        #37:#64       // \"<init>\":()V\n-   #74 = NameAndType        #33:#36       // context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-   #75 = NameAndType        #29:#30       // baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n-   #76 = NameAndType        #27:#28       // doEncode:Z\n-   #77 = NameAndType        #47:#53       // write:([BII)V\n-   #78 = Utf8               java/lang/NullPointerException\n-   #79 = Utf8               java/lang/IndexOutOfBoundsException\n-   #80 = NameAndType        #94:#95       // encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-   #81 = NameAndType        #96:#95       // decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-   #82 = NameAndType        #58:#59       // flush:(Z)V\n-   #83 = NameAndType        #97:#98       // available:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n-   #84 = NameAndType        #99:#100      // readResults:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n-   #85 = NameAndType        #44:#45       // out:Ljava/io/OutputStream;\n-   #86 = Class              #101          // java/io/OutputStream\n-   #87 = NameAndType        #58:#64       // flush:()V\n-   #88 = NameAndType        #66:#64       // eof:()V\n-   #89 = NameAndType        #65:#64       // close:()V\n-   #90 = Utf8               org/apache/commons/codec/binary/BaseNCodecOutputStream\n-   #91 = Utf8               java/io/FilterOutputStream\n-   #92 = Utf8               java/io/IOException\n-   #93 = Utf8               (Ljava/io/OutputStream;)V\n-   #94 = Utf8               encode\n-   #95 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n-   #96 = Utf8               decode\n-   #97 = Utf8               available\n-   #98 = Utf8               (Lorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n-   #99 = Utf8               readResults\n-  #100 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n-  #101 = Utf8               java/io/OutputStream\n+    #1 = Class              #2            // org/apache/commons/codec/binary/BaseNCodecOutputStream\n+    #2 = Utf8               org/apache/commons/codec/binary/BaseNCodecOutputStream\n+    #3 = Class              #4            // java/io/FilterOutputStream\n+    #4 = Utf8               java/io/FilterOutputStream\n+    #5 = Utf8               doEncode\n+    #6 = Utf8               Z\n+    #7 = Utf8               baseNCodec\n+    #8 = Utf8               Lorg/apache/commons/codec/binary/BaseNCodec;\n+    #9 = Utf8               singleByte\n+   #10 = Utf8               [B\n+   #11 = Utf8               context\n+   #12 = Utf8               Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+   #13 = Utf8               <init>\n+   #14 = Utf8               (Ljava/io/OutputStream;Lorg/apache/commons/codec/binary/BaseNCodec;Z)V\n+   #15 = Utf8               Code\n+   #16 = Methodref          #3.#17        // java/io/FilterOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n+   #17 = NameAndType        #13:#18       // \"<init>\":(Ljava/io/OutputStream;)V\n+   #18 = Utf8               (Ljava/io/OutputStream;)V\n+   #19 = Fieldref           #1.#20        // org/apache/commons/codec/binary/BaseNCodecOutputStream.singleByte:[B\n+   #20 = NameAndType        #9:#10        // singleByte:[B\n+   #21 = Class              #22           // org/apache/commons/codec/binary/BaseNCodec$Context\n+   #22 = Utf8               org/apache/commons/codec/binary/BaseNCodec$Context\n+   #23 = Methodref          #21.#24       // org/apache/commons/codec/binary/BaseNCodec$Context.\"<init>\":()V\n+   #24 = NameAndType        #13:#25       // \"<init>\":()V\n+   #25 = Utf8               ()V\n+   #26 = Fieldref           #1.#27        // org/apache/commons/codec/binary/BaseNCodecOutputStream.context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+   #27 = NameAndType        #11:#12       // context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+   #28 = Fieldref           #1.#29        // org/apache/commons/codec/binary/BaseNCodecOutputStream.baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n+   #29 = NameAndType        #7:#8         // baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n+   #30 = Fieldref           #1.#31        // org/apache/commons/codec/binary/BaseNCodecOutputStream.doEncode:Z\n+   #31 = NameAndType        #5:#6         // doEncode:Z\n+   #32 = Utf8               LineNumberTable\n+   #33 = Utf8               LocalVariableTable\n+   #34 = Utf8               this\n+   #35 = Utf8               Lorg/apache/commons/codec/binary/BaseNCodecOutputStream;\n+   #36 = Utf8               out\n+   #37 = Utf8               Ljava/io/OutputStream;\n+   #38 = Utf8               basedCodec\n+   #39 = Utf8               write\n+   #40 = Utf8               (I)V\n+   #41 = Utf8               Exceptions\n+   #42 = Class              #43           // java/io/IOException\n+   #43 = Utf8               java/io/IOException\n+   #44 = Methodref          #1.#45        // org/apache/commons/codec/binary/BaseNCodecOutputStream.write:([BII)V\n+   #45 = NameAndType        #39:#46       // write:([BII)V\n+   #46 = Utf8               ([BII)V\n+   #47 = Utf8               i\n+   #48 = Utf8               I\n+   #49 = Class              #50           // java/lang/NullPointerException\n+   #50 = Utf8               java/lang/NullPointerException\n+   #51 = Methodref          #49.#24       // java/lang/NullPointerException.\"<init>\":()V\n+   #52 = Class              #53           // java/lang/IndexOutOfBoundsException\n+   #53 = Utf8               java/lang/IndexOutOfBoundsException\n+   #54 = Methodref          #52.#24       // java/lang/IndexOutOfBoundsException.\"<init>\":()V\n+   #55 = Methodref          #56.#58       // org/apache/commons/codec/binary/BaseNCodec.encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+   #56 = Class              #57           // org/apache/commons/codec/binary/BaseNCodec\n+   #57 = Utf8               org/apache/commons/codec/binary/BaseNCodec\n+   #58 = NameAndType        #59:#60       // encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+   #59 = Utf8               encode\n+   #60 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+   #61 = Methodref          #56.#62       // org/apache/commons/codec/binary/BaseNCodec.decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+   #62 = NameAndType        #63:#60       // decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+   #63 = Utf8               decode\n+   #64 = Methodref          #1.#65        // org/apache/commons/codec/binary/BaseNCodecOutputStream.flush:(Z)V\n+   #65 = NameAndType        #66:#67       // flush:(Z)V\n+   #66 = Utf8               flush\n+   #67 = Utf8               (Z)V\n+   #68 = Utf8               b\n+   #69 = Utf8               offset\n+   #70 = Utf8               len\n+   #71 = Utf8               StackMapTable\n+   #72 = Methodref          #56.#73       // org/apache/commons/codec/binary/BaseNCodec.available:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+   #73 = NameAndType        #74:#75       // available:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+   #74 = Utf8               available\n+   #75 = Utf8               (Lorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+   #76 = Methodref          #56.#77       // org/apache/commons/codec/binary/BaseNCodec.readResults:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+   #77 = NameAndType        #78:#79       // readResults:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+   #78 = Utf8               readResults\n+   #79 = Utf8               ([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+   #80 = Fieldref           #1.#81        // org/apache/commons/codec/binary/BaseNCodecOutputStream.out:Ljava/io/OutputStream;\n+   #81 = NameAndType        #36:#37       // out:Ljava/io/OutputStream;\n+   #82 = Methodref          #83.#45       // java/io/OutputStream.write:([BII)V\n+   #83 = Class              #84           // java/io/OutputStream\n+   #84 = Utf8               java/io/OutputStream\n+   #85 = Methodref          #83.#86       // java/io/OutputStream.flush:()V\n+   #86 = NameAndType        #66:#25       // flush:()V\n+   #87 = Utf8               propagate\n+   #88 = Utf8               avail\n+   #89 = Utf8               buf\n+   #90 = Utf8               c\n+   #91 = Utf8               close\n+   #92 = Methodref          #1.#93        // org/apache/commons/codec/binary/BaseNCodecOutputStream.eof:()V\n+   #93 = NameAndType        #94:#25       // eof:()V\n+   #94 = Utf8               eof\n+   #95 = Methodref          #1.#86        // org/apache/commons/codec/binary/BaseNCodecOutputStream.flush:()V\n+   #96 = Methodref          #83.#97       // java/io/OutputStream.close:()V\n+   #97 = NameAndType        #91:#25       // close:()V\n+   #98 = Utf8               SourceFile\n+   #99 = Utf8               BaseNCodecOutputStream.java\n+  #100 = Utf8               InnerClasses\n+  #101 = Utf8               Context\n {\n   private final boolean doEncode;\n     descriptor: Z\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final org.apache.commons.codec.binary.BaseNCodec baseNCodec;\n     descriptor: Lorg/apache/commons/codec/binary/BaseNCodec;\n@@ -129,30 +129,30 @@\n   public org.apache.commons.codec.binary.BaseNCodecOutputStream(java.io.OutputStream, org.apache.commons.codec.binary.BaseNCodec, boolean);\n     descriptor: (Ljava/io/OutputStream;Lorg/apache/commons/codec/binary/BaseNCodec;Z)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #2                  // Method java/io/FilterOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n+         2: invokespecial #16                 // Method java/io/FilterOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n          5: aload_0\n          6: iconst_1\n          7: newarray       byte\n-         9: putfield      #3                  // Field singleByte:[B\n+         9: putfield      #19                 // Field singleByte:[B\n         12: aload_0\n-        13: new           #4                  // class org/apache/commons/codec/binary/BaseNCodec$Context\n+        13: new           #21                 // class org/apache/commons/codec/binary/BaseNCodec$Context\n         16: dup\n-        17: invokespecial #5                  // Method org/apache/commons/codec/binary/BaseNCodec$Context.\"<init>\":()V\n-        20: putfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+        17: invokespecial #23                 // Method org/apache/commons/codec/binary/BaseNCodec$Context.\"<init>\":()V\n+        20: putfield      #26                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n         23: aload_0\n         24: aload_2\n-        25: putfield      #7                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n+        25: putfield      #28                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n         28: aload_0\n         29: iload_3\n-        30: putfield      #8                  // Field doEncode:Z\n+        30: putfield      #30                 // Field doEncode:Z\n         33: return\n       LineNumberTable:\n         line 52: 0\n         line 46: 5\n         line 48: 12\n         line 53: 23\n         line 54: 28\n@@ -163,109 +163,112 @@\n             0      34     1   out   Ljava/io/OutputStream;\n             0      34     2 basedCodec   Lorg/apache/commons/codec/binary/BaseNCodec;\n             0      34     3 doEncode   Z\n \n   public void write(int) throws java.io.IOException;\n     descriptor: (I)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n-         1: getfield      #3                  // Field singleByte:[B\n+         1: getfield      #19                 // Field singleByte:[B\n          4: iconst_0\n          5: iload_1\n          6: i2b\n          7: bastore\n          8: aload_0\n          9: aload_0\n-        10: getfield      #3                  // Field singleByte:[B\n+        10: getfield      #19                 // Field singleByte:[B\n         13: iconst_0\n         14: iconst_1\n-        15: invokevirtual #9                  // Method write:([BII)V\n+        15: invokevirtual #44                 // Method write:([BII)V\n         18: return\n       LineNumberTable:\n         line 67: 0\n         line 68: 8\n         line 69: 18\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      19     0  this   Lorg/apache/commons/codec/binary/BaseNCodecOutputStream;\n             0      19     1     i   I\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void write(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=4, args_size=4\n          0: aload_1\n          1: ifnonnull     12\n-         4: new           #10                 // class java/lang/NullPointerException\n+         4: new           #49                 // class java/lang/NullPointerException\n          7: dup\n-         8: invokespecial #11                 // Method java/lang/NullPointerException.\"<init>\":()V\n+         8: invokespecial #51                 // Method java/lang/NullPointerException.\"<init>\":()V\n         11: athrow\n         12: iload_2\n         13: iflt          20\n         16: iload_3\n         17: ifge          28\n-        20: new           #12                 // class java/lang/IndexOutOfBoundsException\n+        20: new           #52                 // class java/lang/IndexOutOfBoundsException\n         23: dup\n-        24: invokespecial #13                 // Method java/lang/IndexOutOfBoundsException.\"<init>\":()V\n+        24: invokespecial #54                 // Method java/lang/IndexOutOfBoundsException.\"<init>\":()V\n         27: athrow\n         28: iload_2\n         29: aload_1\n         30: arraylength\n         31: if_icmpgt     42\n         34: iload_2\n         35: iload_3\n         36: iadd\n         37: aload_1\n         38: arraylength\n         39: if_icmple     50\n-        42: new           #12                 // class java/lang/IndexOutOfBoundsException\n+        42: new           #52                 // class java/lang/IndexOutOfBoundsException\n         45: dup\n-        46: invokespecial #13                 // Method java/lang/IndexOutOfBoundsException.\"<init>\":()V\n+        46: invokespecial #54                 // Method java/lang/IndexOutOfBoundsException.\"<init>\":()V\n         49: athrow\n         50: iload_3\n         51: ifle          97\n         54: aload_0\n-        55: getfield      #8                  // Field doEncode:Z\n+        55: getfield      #30                 // Field doEncode:Z\n         58: ifeq          78\n         61: aload_0\n-        62: getfield      #7                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n+        62: getfield      #28                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n         65: aload_1\n         66: iload_2\n         67: iload_3\n         68: aload_0\n-        69: getfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-        72: invokevirtual #14                 // Method org/apache/commons/codec/binary/BaseNCodec.encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+        69: getfield      #26                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+        72: invokevirtual #55                 // Method org/apache/commons/codec/binary/BaseNCodec.encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n         75: goto          92\n         78: aload_0\n-        79: getfield      #7                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n+        79: getfield      #28                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n         82: aload_1\n         83: iload_2\n         84: iload_3\n         85: aload_0\n-        86: getfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-        89: invokevirtual #15                 // Method org/apache/commons/codec/binary/BaseNCodec.decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+        86: getfield      #26                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+        89: invokevirtual #61                 // Method org/apache/commons/codec/binary/BaseNCodec.decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n         92: aload_0\n         93: iconst_0\n-        94: invokespecial #16                 // Method flush:(Z)V\n+        94: invokespecial #64                 // Method flush:(Z)V\n         97: return\n       LineNumberTable:\n         line 91: 0\n         line 92: 4\n         line 93: 12\n         line 94: 20\n         line 95: 28\n         line 96: 42\n         line 97: 50\n         line 98: 54\n         line 99: 61\n+        line 100: 75\n         line 101: 78\n         line 103: 92\n         line 105: 97\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      98     0  this   Lorg/apache/commons/codec/binary/BaseNCodecOutputStream;\n             0      98     1     b   [B\n@@ -276,161 +279,160 @@\n         frame_type = 7 /* same */\n         frame_type = 7 /* same */\n         frame_type = 13 /* same */\n         frame_type = 7 /* same */\n         frame_type = 27 /* same */\n         frame_type = 13 /* same */\n         frame_type = 4 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   private void flush(boolean) throws java.io.IOException;\n     descriptor: (Z)V\n     flags: (0x0002) ACC_PRIVATE\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=5, args_size=2\n          0: aload_0\n-         1: getfield      #7                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n+         1: getfield      #28                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n          4: aload_0\n-         5: getfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-         8: invokevirtual #17                 // Method org/apache/commons/codec/binary/BaseNCodec.available:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+         5: getfield      #26                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+         8: invokevirtual #72                 // Method org/apache/commons/codec/binary/BaseNCodec.available:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n         11: istore_2\n         12: iload_2\n         13: ifle          52\n         16: iload_2\n         17: newarray       byte\n         19: astore_3\n         20: aload_0\n-        21: getfield      #7                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n+        21: getfield      #28                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n         24: aload_3\n         25: iconst_0\n         26: iload_2\n         27: aload_0\n-        28: getfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-        31: invokevirtual #18                 // Method org/apache/commons/codec/binary/BaseNCodec.readResults:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n+        28: getfield      #26                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+        31: invokevirtual #76                 // Method org/apache/commons/codec/binary/BaseNCodec.readResults:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I\n         34: istore        4\n         36: iload         4\n         38: ifle          52\n         41: aload_0\n-        42: getfield      #19                 // Field out:Ljava/io/OutputStream;\n+        42: getfield      #80                 // Field out:Ljava/io/OutputStream;\n         45: aload_3\n         46: iconst_0\n         47: iload         4\n-        49: invokevirtual #20                 // Method java/io/OutputStream.write:([BII)V\n+        49: invokevirtual #82                 // Method java/io/OutputStream.write:([BII)V\n         52: iload_1\n         53: ifeq          63\n         56: aload_0\n-        57: getfield      #19                 // Field out:Ljava/io/OutputStream;\n-        60: invokevirtual #21                 // Method java/io/OutputStream.flush:()V\n+        57: getfield      #80                 // Field out:Ljava/io/OutputStream;\n+        60: invokevirtual #85                 // Method java/io/OutputStream.flush:()V\n         63: return\n       LineNumberTable:\n         line 117: 0\n         line 118: 12\n         line 119: 16\n         line 120: 20\n         line 121: 36\n         line 122: 41\n         line 125: 52\n         line 126: 56\n         line 128: 63\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           20      32     3   buf   [B\n-           36      16     4     c   I\n             0      64     0  this   Lorg/apache/commons/codec/binary/BaseNCodecOutputStream;\n             0      64     1 propagate   Z\n            12      52     2 avail   I\n+           20      32     3   buf   [B\n+           36      16     4     c   I\n       StackMapTable: number_of_entries = 2\n         frame_type = 252 /* append */\n           offset_delta = 52\n           locals = [ int ]\n         frame_type = 10 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void flush() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: iconst_1\n-         2: invokespecial #16                 // Method flush:(Z)V\n+         2: invokespecial #64                 // Method flush:(Z)V\n          5: return\n       LineNumberTable:\n         line 138: 0\n         line 139: 5\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0  this   Lorg/apache/commons/codec/binary/BaseNCodecOutputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokevirtual #22                 // Method eof:()V\n+         1: invokevirtual #92                 // Method eof:()V\n          4: aload_0\n-         5: invokevirtual #23                 // Method flush:()V\n+         5: invokevirtual #95                 // Method flush:()V\n          8: aload_0\n-         9: getfield      #19                 // Field out:Ljava/io/OutputStream;\n-        12: invokevirtual #24                 // Method java/io/OutputStream.close:()V\n+         9: getfield      #80                 // Field out:Ljava/io/OutputStream;\n+        12: invokevirtual #96                 // Method java/io/OutputStream.close:()V\n         15: return\n       LineNumberTable:\n         line 155: 0\n         line 156: 4\n         line 157: 8\n         line 158: 15\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      16     0  this   Lorg/apache/commons/codec/binary/BaseNCodecOutputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void eof() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #8                  // Field doEncode:Z\n+         1: getfield      #30                 // Field doEncode:Z\n          4: ifeq          27\n          7: aload_0\n-         8: getfield      #7                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n+         8: getfield      #28                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n         11: aload_0\n-        12: getfield      #3                  // Field singleByte:[B\n+        12: getfield      #19                 // Field singleByte:[B\n         15: iconst_0\n         16: iconst_m1\n         17: aload_0\n-        18: getfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-        21: invokevirtual #14                 // Method org/apache/commons/codec/binary/BaseNCodec.encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+        18: getfield      #26                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+        21: invokevirtual #55                 // Method org/apache/commons/codec/binary/BaseNCodec.encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n         24: goto          44\n         27: aload_0\n-        28: getfield      #7                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n+        28: getfield      #28                 // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;\n         31: aload_0\n-        32: getfield      #3                  // Field singleByte:[B\n+        32: getfield      #19                 // Field singleByte:[B\n         35: iconst_0\n         36: iconst_m1\n         37: aload_0\n-        38: getfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n-        41: invokevirtual #15                 // Method org/apache/commons/codec/binary/BaseNCodec.decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n+        38: getfield      #26                 // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;\n+        41: invokevirtual #61                 // Method org/apache/commons/codec/binary/BaseNCodec.decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V\n         44: return\n       LineNumberTable:\n         line 169: 0\n         line 170: 7\n+        line 171: 24\n         line 172: 27\n         line 174: 44\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      45     0  this   Lorg/apache/commons/codec/binary/BaseNCodecOutputStream;\n       StackMapTable: number_of_entries = 2\n         frame_type = 27 /* same */\n         frame_type = 16 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n }\n SourceFile: \"BaseNCodecOutputStream.java\"\n InnerClasses:\n-  static #34= #4 of #1;                   // Context=class org/apache/commons/codec/binary/BaseNCodec$Context of class org/apache/commons/codec/binary/BaseNCodec\n+  static #101= #21 of #56;                // Context=class org/apache/commons/codec/binary/BaseNCodec$Context of class org/apache/commons/codec/binary/BaseNCodec\n"}]}
