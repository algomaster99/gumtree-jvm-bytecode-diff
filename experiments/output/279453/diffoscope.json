{"diffoscope-json-version": 1, "source1": "first/ClassBands.class", "source2": "second/ClassBands.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,15 +6,14 @@\n import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute;\n import org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute;\n import org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute;\n import org.apache.commons.compress.harmony.pack200.Pack200Exception;\n import java.io.IOException;\n import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;\n import org.apache.commons.compress.harmony.unpack200.bytecode.CPClass;\n-import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;\n import org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute;\n import org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute;\n import org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute;\n import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;\n import org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute;\n import org.apache.commons.compress.harmony.pack200.Codec;\n import java.util.Arrays;\n@@ -71,59 +70,55 @@\n         super(segment);\n         this.attrMap = segment.getAttrDefinitionBands().getAttributeDefinitionMap();\n         this.cpBands = segment.getCpBands();\n         this.classCount = this.header.getClassCount();\n         this.options = this.header.getOptions();\n     }\n     \n-    private int getCallCount(final int[][] methodAttrIndexes, final long[][] flags, final int context) {\n-        int callCount = 0;\n-        for (final int[] array : methodAttrIndexes) {\n-            final int[] element = array;\n-            for (final int index : array) {\n-                final AttributeLayout layout = this.attrMap.getAttributeLayout(index, context);\n-                callCount += layout.numBackwardsCallables();\n+    private int getCallCount(final int[][] array, final long[][] array2, final int n) {\n+        int n2 = 0;\n+        for (final int[] array3 : array) {\n+            for (int length2 = array3.length, j = 0; j < length2; ++j) {\n+                n2 += this.attrMap.getAttributeLayout(array3[j], n).numBackwardsCallables();\n             }\n         }\n-        int layoutsUsed = 0;\n-        for (final long[] array2 : flags) {\n-            final long[] flag = array2;\n-            for (final long element2 : array2) {\n-                layoutsUsed = (int)((long)layoutsUsed | element2);\n+        int n3 = 0;\n+        for (final long[] array4 : array2) {\n+            for (int length4 = array4.length, l = 0; l < length4; ++l) {\n+                n3 = (int)((long)n3 | array4[l]);\n             }\n         }\n-        for (int i = 0; i < 26; ++i) {\n-            if ((layoutsUsed & 1 << i) != 0x0) {\n-                final AttributeLayout layout2 = this.attrMap.getAttributeLayout(i, context);\n-                callCount += layout2.numBackwardsCallables();\n+        for (int n4 = 0; n4 < 26; ++n4) {\n+            if ((n3 & 1 << n4) != 0x0) {\n+                n2 += this.attrMap.getAttributeLayout(n4, n).numBackwardsCallables();\n             }\n         }\n-        return callCount;\n+        return n2;\n     }\n     \n     public ArrayList<Attribute>[] getClassAttributes() {\n         return this.classAttributes;\n     }\n     \n     public int[] getClassFieldCount() {\n         return this.classFieldCount;\n     }\n     \n     public long[] getClassFlags() {\n         if (this.classAccessFlags == null) {\n-            long mask = 32767L;\n+            long n = 32767L;\n             for (int i = 0; i < 16; ++i) {\n-                final AttributeLayout layout = this.attrMap.getAttributeLayout(i, 0);\n-                if (layout != null && !layout.isDefaultLayout()) {\n-                    mask &= ~(1 << i);\n+                final AttributeLayout attributeLayout = this.attrMap.getAttributeLayout(i, 0);\n+                if (attributeLayout != null && !attributeLayout.isDefaultLayout()) {\n+                    n &= ~(1 << i);\n                 }\n             }\n             this.classAccessFlags = new long[this.classFlags.length];\n-            for (int i = 0; i < this.classFlags.length; ++i) {\n-                this.classAccessFlags[i] = (this.classFlags[i] & mask);\n+            for (int j = 0; j < this.classFlags.length; ++j) {\n+                this.classAccessFlags[j] = (this.classFlags[j] & n);\n             }\n         }\n         return this.classAccessFlags;\n     }\n     \n     public int[][] getClassInterfacesInts() {\n         return this.classInterfacesInts;\n@@ -187,26 +182,26 @@\n     \n     public int[][] getFieldDescrInts() {\n         return this.fieldDescrInts;\n     }\n     \n     public long[][] getFieldFlags() {\n         if (this.fieldAccessFlags == null) {\n-            long mask = 32767L;\n+            long n = 32767L;\n             for (int i = 0; i < 16; ++i) {\n-                final AttributeLayout layout = this.attrMap.getAttributeLayout(i, 1);\n-                if (layout != null && !layout.isDefaultLayout()) {\n-                    mask &= ~(1 << i);\n+                final AttributeLayout attributeLayout = this.attrMap.getAttributeLayout(i, 1);\n+                if (attributeLayout != null && !attributeLayout.isDefaultLayout()) {\n+                    n &= ~(1 << i);\n                 }\n             }\n             this.fieldAccessFlags = new long[this.fieldFlags.length][];\n-            for (int i = 0; i < this.fieldFlags.length; ++i) {\n-                this.fieldAccessFlags[i] = new long[this.fieldFlags[i].length];\n-                for (int j = 0; j < this.fieldFlags[i].length; ++j) {\n-                    this.fieldAccessFlags[i][j] = (this.fieldFlags[i][j] & mask);\n+            for (int j = 0; j < this.fieldFlags.length; ++j) {\n+                this.fieldAccessFlags[j] = new long[this.fieldFlags[j].length];\n+                for (int k = 0; k < this.fieldFlags[j].length; ++k) {\n+                    this.fieldAccessFlags[j][k] = (this.fieldFlags[j][k] & n);\n                 }\n             }\n         }\n         return this.fieldAccessFlags;\n     }\n     \n     public IcTuple[][] getIcLocal() {\n@@ -223,801 +218,752 @@\n     \n     public int[][] getMethodDescrInts() {\n         return this.methodDescrInts;\n     }\n     \n     public long[][] getMethodFlags() {\n         if (this.methodAccessFlags == null) {\n-            long mask = 32767L;\n+            long n = 32767L;\n             for (int i = 0; i < 16; ++i) {\n-                final AttributeLayout layout = this.attrMap.getAttributeLayout(i, 2);\n-                if (layout != null && !layout.isDefaultLayout()) {\n-                    mask &= ~(1 << i);\n+                final AttributeLayout attributeLayout = this.attrMap.getAttributeLayout(i, 2);\n+                if (attributeLayout != null && !attributeLayout.isDefaultLayout()) {\n+                    n &= ~(1 << i);\n                 }\n             }\n             this.methodAccessFlags = new long[this.methodFlags.length][];\n-            for (int i = 0; i < this.methodFlags.length; ++i) {\n-                this.methodAccessFlags[i] = new long[this.methodFlags[i].length];\n-                for (int j = 0; j < this.methodFlags[i].length; ++j) {\n-                    this.methodAccessFlags[i][j] = (this.methodFlags[i][j] & mask);\n+            for (int j = 0; j < this.methodFlags.length; ++j) {\n+                this.methodAccessFlags[j] = new long[this.methodFlags[j].length];\n+                for (int k = 0; k < this.methodFlags[j].length; ++k) {\n+                    this.methodAccessFlags[j][k] = (this.methodFlags[j][k] & n);\n                 }\n             }\n         }\n         return this.methodAccessFlags;\n     }\n     \n     public ArrayList<List<Attribute>> getOrderedCodeAttributes() {\n         return Stream.of(this.codeAttributes).map((Function<? super List<Attribute>, ?>)ArrayList::new).collect((Collector<? super Object, ?, ArrayList<List<Attribute>>>)Collectors.toCollection((Supplier<R>)ArrayList::new));\n     }\n     \n     public long[] getRawClassFlags() {\n         return this.classFlags;\n     }\n     \n-    private void parseClassAttrBands(final InputStream in) throws IOException, Pack200Exception {\n+    private void parseClassAttrBands(final InputStream inputStream) throws IOException, Pack200Exception {\n         final String[] cpUTF8 = this.cpBands.getCpUTF8();\n         final String[] cpClass = this.cpBands.getCpClass();\n-        Arrays.setAll(this.classAttributes = new ArrayList[this.classCount], i -> new ArrayList());\n-        this.classFlags = this.parseFlags(\"class_flags\", in, this.classCount, Codec.UNSIGNED5, this.options.hasClassFlagsHi());\n-        final int classAttrCount = SegmentUtils.countBit16(this.classFlags);\n-        final int[] classAttrCounts = this.decodeBandInt(\"class_attr_count\", in, Codec.UNSIGNED5, classAttrCount);\n-        final int[][] classAttrIndexes = this.decodeBandInt(\"class_attr_indexes\", in, Codec.UNSIGNED5, classAttrCounts);\n-        final int callCount = this.getCallCount(classAttrIndexes, new long[][] { this.classFlags }, 0);\n-        final int[] classAttrCalls = this.decodeBandInt(\"class_attr_calls\", in, Codec.UNSIGNED5, callCount);\n-        final AttributeLayout deprecatedLayout = this.attrMap.getAttributeLayout(\"Deprecated\", 0);\n-        final AttributeLayout sourceFileLayout = this.attrMap.getAttributeLayout(\"SourceFile\", 0);\n-        final int sourceFileCount = SegmentUtils.countMatches(this.classFlags, (IMatcher)sourceFileLayout);\n-        final int[] classSourceFile = this.decodeBandInt(\"class_SourceFile_RUN\", in, Codec.UNSIGNED5, sourceFileCount);\n-        final AttributeLayout enclosingMethodLayout = this.attrMap.getAttributeLayout(\"EnclosingMethod\", 0);\n-        final int enclosingMethodCount = SegmentUtils.countMatches(this.classFlags, (IMatcher)enclosingMethodLayout);\n-        final int[] enclosingMethodRC = this.decodeBandInt(\"class_EnclosingMethod_RC\", in, Codec.UNSIGNED5, enclosingMethodCount);\n-        final int[] enclosingMethodRDN = this.decodeBandInt(\"class_EnclosingMethod_RDN\", in, Codec.UNSIGNED5, enclosingMethodCount);\n-        final AttributeLayout signatureLayout = this.attrMap.getAttributeLayout(\"Signature\", 0);\n-        final int signatureCount = SegmentUtils.countMatches(this.classFlags, (IMatcher)signatureLayout);\n-        final int[] classSignature = this.decodeBandInt(\"class_Signature_RS\", in, Codec.UNSIGNED5, signatureCount);\n-        final int backwardsCallsUsed = this.parseClassMetadataBands(in, classAttrCalls);\n-        final AttributeLayout innerClassLayout = this.attrMap.getAttributeLayout(\"InnerClasses\", 0);\n-        final int innerClassCount = SegmentUtils.countMatches(this.classFlags, (IMatcher)innerClassLayout);\n-        final int[] classInnerClassesN = this.decodeBandInt(\"class_InnerClasses_N\", in, Codec.UNSIGNED5, innerClassCount);\n-        final int[][] classInnerClassesRC = this.decodeBandInt(\"class_InnerClasses_RC\", in, Codec.UNSIGNED5, classInnerClassesN);\n-        final int[][] classInnerClassesF = this.decodeBandInt(\"class_InnerClasses_F\", in, Codec.UNSIGNED5, classInnerClassesN);\n-        int flagsCount = 0;\n-        for (final int[] array2 : classInnerClassesF) {\n-            final int[] element = array2;\n-            for (final int element2 : array2) {\n-                if (element2 != 0) {\n-                    ++flagsCount;\n+        Arrays.setAll(this.classAttributes = new ArrayList[this.classCount], p0 -> new ArrayList());\n+        this.classFlags = this.parseFlags(\"class_flags\", inputStream, this.classCount, Codec.UNSIGNED5, this.options.hasClassFlagsHi());\n+        final int[] decodeBandInt = this.decodeBandInt(\"class_attr_calls\", inputStream, Codec.UNSIGNED5, this.getCallCount(this.decodeBandInt(\"class_attr_indexes\", inputStream, Codec.UNSIGNED5, this.decodeBandInt(\"class_attr_count\", inputStream, Codec.UNSIGNED5, SegmentUtils.countBit16(this.classFlags))), new long[][] { this.classFlags }, 0));\n+        final AttributeLayout attributeLayout = this.attrMap.getAttributeLayout(\"Deprecated\", 0);\n+        final AttributeLayout attributeLayout2 = this.attrMap.getAttributeLayout(\"SourceFile\", 0);\n+        final int[] decodeBandInt2 = this.decodeBandInt(\"class_SourceFile_RUN\", inputStream, Codec.UNSIGNED5, SegmentUtils.countMatches(this.classFlags, (IMatcher)attributeLayout2));\n+        final AttributeLayout attributeLayout3 = this.attrMap.getAttributeLayout(\"EnclosingMethod\", 0);\n+        final int countMatches = SegmentUtils.countMatches(this.classFlags, (IMatcher)attributeLayout3);\n+        final int[] decodeBandInt3 = this.decodeBandInt(\"class_EnclosingMethod_RC\", inputStream, Codec.UNSIGNED5, countMatches);\n+        final int[] decodeBandInt4 = this.decodeBandInt(\"class_EnclosingMethod_RDN\", inputStream, Codec.UNSIGNED5, countMatches);\n+        final AttributeLayout attributeLayout4 = this.attrMap.getAttributeLayout(\"Signature\", 0);\n+        final int[] decodeBandInt5 = this.decodeBandInt(\"class_Signature_RS\", inputStream, Codec.UNSIGNED5, SegmentUtils.countMatches(this.classFlags, (IMatcher)attributeLayout4));\n+        final int classMetadataBands = this.parseClassMetadataBands(inputStream, decodeBandInt);\n+        final AttributeLayout attributeLayout5 = this.attrMap.getAttributeLayout(\"InnerClasses\", 0);\n+        final int[] decodeBandInt6 = this.decodeBandInt(\"class_InnerClasses_N\", inputStream, Codec.UNSIGNED5, SegmentUtils.countMatches(this.classFlags, (IMatcher)attributeLayout5));\n+        final int[][] decodeBandInt7 = this.decodeBandInt(\"class_InnerClasses_RC\", inputStream, Codec.UNSIGNED5, decodeBandInt6);\n+        final int[][] decodeBandInt8 = this.decodeBandInt(\"class_InnerClasses_F\", inputStream, Codec.UNSIGNED5, decodeBandInt6);\n+        int n = 0;\n+        for (final int[] array2 : decodeBandInt8) {\n+            for (int length2 = array2.length, j = 0; j < length2; ++j) {\n+                if (array2[j] != 0) {\n+                    ++n;\n                 }\n             }\n         }\n-        final int[] classInnerClassesOuterRCN = this.decodeBandInt(\"class_InnerClasses_outer_RCN\", in, Codec.UNSIGNED5, flagsCount);\n-        final int[] classInnerClassesNameRUN = this.decodeBandInt(\"class_InnerClasses_name_RUN\", in, Codec.UNSIGNED5, flagsCount);\n-        final AttributeLayout versionLayout = this.attrMap.getAttributeLayout(\"class-file version\", 0);\n-        final int versionCount = SegmentUtils.countMatches(this.classFlags, (IMatcher)versionLayout);\n-        final int[] classFileVersionMinorH = this.decodeBandInt(\"class_file_version_minor_H\", in, Codec.UNSIGNED5, versionCount);\n-        final int[] classFileVersionMajorH = this.decodeBandInt(\"class_file_version_major_H\", in, Codec.UNSIGNED5, versionCount);\n-        if (versionCount > 0) {\n+        final int[] decodeBandInt9 = this.decodeBandInt(\"class_InnerClasses_outer_RCN\", inputStream, Codec.UNSIGNED5, n);\n+        final int[] decodeBandInt10 = this.decodeBandInt(\"class_InnerClasses_name_RUN\", inputStream, Codec.UNSIGNED5, n);\n+        final AttributeLayout attributeLayout6 = this.attrMap.getAttributeLayout(\"class-file version\", 0);\n+        final int countMatches2 = SegmentUtils.countMatches(this.classFlags, (IMatcher)attributeLayout6);\n+        final int[] decodeBandInt11 = this.decodeBandInt(\"class_file_version_minor_H\", inputStream, Codec.UNSIGNED5, countMatches2);\n+        final int[] decodeBandInt12 = this.decodeBandInt(\"class_file_version_major_H\", inputStream, Codec.UNSIGNED5, countMatches2);\n+        if (countMatches2 > 0) {\n             this.classVersionMajor = new int[this.classCount];\n             this.classVersionMinor = new int[this.classCount];\n         }\n-        final int defaultVersionMajor = this.header.getDefaultClassMajorVersion();\n-        final int defaultVersionMinor = this.header.getDefaultClassMinorVersion();\n-        int backwardsCallIndex = backwardsCallsUsed;\n-        final int limit = this.options.hasClassFlagsHi() ? 62 : 31;\n-        final AttributeLayout[] otherLayouts = new AttributeLayout[limit + 1];\n-        final int[] counts = new int[limit + 1];\n-        final List<Attribute>[] otherAttributes = new List[limit + 1];\n-        for (int i = 0; i < limit; ++i) {\n-            final AttributeLayout layout = this.attrMap.getAttributeLayout(i, 0);\n-            if (layout != null && !layout.isDefaultLayout()) {\n-                otherLayouts[i] = layout;\n-                counts[i] = SegmentUtils.countMatches(this.classFlags, (IMatcher)layout);\n-            }\n-        }\n-        for (int i = 0; i < counts.length; ++i) {\n-            if (counts[i] > 0) {\n-                final NewAttributeBands bands = this.attrMap.getAttributeBands(otherLayouts[i]);\n-                otherAttributes[i] = bands.parseAttributes(in, counts[i]);\n-                final int numBackwardsCallables = otherLayouts[i].numBackwardsCallables();\n+        final int defaultClassMajorVersion = this.header.getDefaultClassMajorVersion();\n+        final int defaultClassMinorVersion = this.header.getDefaultClassMinorVersion();\n+        int n2 = classMetadataBands;\n+        final int n3 = this.options.hasClassFlagsHi() ? 62 : 31;\n+        final AttributeLayout[] array3 = new AttributeLayout[n3 + 1];\n+        final int[] array4 = new int[n3 + 1];\n+        final List[] array5 = new List[n3 + 1];\n+        for (int k = 0; k < n3; ++k) {\n+            final AttributeLayout attributeLayout7 = this.attrMap.getAttributeLayout(k, 0);\n+            if (attributeLayout7 != null && !attributeLayout7.isDefaultLayout()) {\n+                array3[k] = attributeLayout7;\n+                array4[k] = SegmentUtils.countMatches(this.classFlags, (IMatcher)attributeLayout7);\n+            }\n+        }\n+        for (int l = 0; l < array4.length; ++l) {\n+            if (array4[l] > 0) {\n+                final NewAttributeBands attributeBands = this.attrMap.getAttributeBands(array3[l]);\n+                array5[l] = attributeBands.parseAttributes(inputStream, array4[l]);\n+                final int numBackwardsCallables = array3[l].numBackwardsCallables();\n                 if (numBackwardsCallables > 0) {\n                     final int[] backwardsCalls = new int[numBackwardsCallables];\n-                    System.arraycopy(classAttrCalls, backwardsCallIndex, backwardsCalls, 0, numBackwardsCallables);\n-                    bands.setBackwardsCalls(backwardsCalls);\n-                    backwardsCallIndex += numBackwardsCallables;\n+                    System.arraycopy(decodeBandInt, n2, backwardsCalls, 0, numBackwardsCallables);\n+                    attributeBands.setBackwardsCalls(backwardsCalls);\n+                    n2 += numBackwardsCallables;\n                 }\n             }\n         }\n-        int sourceFileIndex = 0;\n-        int enclosingMethodIndex = 0;\n-        int signatureIndex = 0;\n-        int innerClassIndex = 0;\n-        int innerClassC2NIndex = 0;\n-        int versionIndex = 0;\n+        int n4 = 0;\n+        int n5 = 0;\n+        int n6 = 0;\n+        int n7 = 0;\n+        int n8 = 0;\n+        int n9 = 0;\n         this.icLocal = new IcTuple[this.classCount][];\n-        for (int j = 0; j < this.classCount; ++j) {\n-            final long flag = this.classFlags[j];\n-            if (deprecatedLayout.matches(this.classFlags[j])) {\n-                this.classAttributes[j].add((Attribute)new DeprecatedAttribute());\n-            }\n-            if (sourceFileLayout.matches(flag)) {\n-                final long result = (long)classSourceFile[sourceFileIndex];\n-                ClassFileEntry value = sourceFileLayout.getValue(result, this.cpBands.getConstantPool());\n-                if (value == null) {\n-                    String className = this.classThis[j].substring(this.classThis[j].lastIndexOf(47) + 1);\n-                    className = className.substring(className.lastIndexOf(46) + 1);\n-                    final char[] chars = className.toCharArray();\n-                    int index = -1;\n-                    for (int k = 0; k < chars.length; ++k) {\n-                        if (chars[k] <= '-') {\n-                            index = k;\n+        for (int n10 = 0; n10 < this.classCount; ++n10) {\n+            final long n11 = this.classFlags[n10];\n+            if (attributeLayout.matches(this.classFlags[n10])) {\n+                this.classAttributes[n10].add((Attribute)new DeprecatedAttribute());\n+            }\n+            if (attributeLayout2.matches(n11)) {\n+                Object o = attributeLayout2.getValue((long)decodeBandInt2[n4], this.cpBands.getConstantPool());\n+                if (o == null) {\n+                    final String substring = this.classThis[n10].substring(this.classThis[n10].lastIndexOf(47) + 1);\n+                    String str = substring.substring(substring.lastIndexOf(46) + 1);\n+                    final char[] charArray = str.toCharArray();\n+                    int endIndex = -1;\n+                    for (int n12 = 0; n12 < charArray.length; ++n12) {\n+                        if (charArray[n12] <= '-') {\n+                            endIndex = n12;\n                             break;\n                         }\n                     }\n-                    if (index > -1) {\n-                        className = className.substring(0, index);\n+                    if (endIndex > -1) {\n+                        str = str.substring(0, endIndex);\n                     }\n-                    value = (ClassFileEntry)this.cpBands.cpUTF8Value(className + \".java\", true);\n+                    o = this.cpBands.cpUTF8Value(str + \".java\", true);\n                 }\n-                this.classAttributes[j].add((Attribute)new SourceFileAttribute((CPUTF8)value));\n-                ++sourceFileIndex;\n+                this.classAttributes[n10].add((Attribute)new SourceFileAttribute((CPUTF8)o));\n+                ++n4;\n             }\n-            if (enclosingMethodLayout.matches(flag)) {\n-                final CPClass theClass = this.cpBands.cpClassValue(enclosingMethodRC[enclosingMethodIndex]);\n-                CPNameAndType theMethod = null;\n-                if (enclosingMethodRDN[enclosingMethodIndex] != 0) {\n-                    theMethod = this.cpBands.cpNameAndTypeValue(enclosingMethodRDN[enclosingMethodIndex] - 1);\n-                }\n-                this.classAttributes[j].add((Attribute)new EnclosingMethodAttribute(theClass, theMethod));\n-                ++enclosingMethodIndex;\n-            }\n-            if (signatureLayout.matches(flag)) {\n-                final long result = (long)classSignature[signatureIndex];\n-                final CPUTF8 value2 = (CPUTF8)signatureLayout.getValue(result, this.cpBands.getConstantPool());\n-                this.classAttributes[j].add((Attribute)new SignatureAttribute(value2));\n-                ++signatureIndex;\n-            }\n-            if (innerClassLayout.matches(flag)) {\n-                this.icLocal[j] = new IcTuple[classInnerClassesN[innerClassIndex]];\n-                for (int l = 0; l < this.icLocal[j].length; ++l) {\n-                    final int icTupleCIndex = classInnerClassesRC[innerClassIndex][l];\n-                    int icTupleC2Index = -1;\n-                    int icTupleNIndex = -1;\n-                    final String icTupleC = cpClass[icTupleCIndex];\n-                    int icTupleF = classInnerClassesF[innerClassIndex][l];\n-                    String icTupleC2 = null;\n-                    String icTupleN = null;\n-                    if (icTupleF != 0) {\n-                        icTupleC2Index = classInnerClassesOuterRCN[innerClassC2NIndex];\n-                        icTupleNIndex = classInnerClassesNameRUN[innerClassC2NIndex];\n-                        icTupleC2 = cpClass[icTupleC2Index];\n-                        icTupleN = cpUTF8[icTupleNIndex];\n-                        ++innerClassC2NIndex;\n+            if (attributeLayout3.matches(n11)) {\n+                final CPClass cpClassValue = this.cpBands.cpClassValue(decodeBandInt3[n5]);\n+                CPNameAndType cpNameAndTypeValue = null;\n+                if (decodeBandInt4[n5] != 0) {\n+                    cpNameAndTypeValue = this.cpBands.cpNameAndTypeValue(decodeBandInt4[n5] - 1);\n+                }\n+                this.classAttributes[n10].add((Attribute)new EnclosingMethodAttribute(cpClassValue, cpNameAndTypeValue));\n+                ++n5;\n+            }\n+            if (attributeLayout4.matches(n11)) {\n+                this.classAttributes[n10].add((Attribute)new SignatureAttribute((CPUTF8)attributeLayout4.getValue((long)decodeBandInt5[n6], this.cpBands.getConstantPool())));\n+                ++n6;\n+            }\n+            if (attributeLayout5.matches(n11)) {\n+                this.icLocal[n10] = new IcTuple[decodeBandInt6[n7]];\n+                for (int n13 = 0; n13 < this.icLocal[n10].length; ++n13) {\n+                    final int n14 = decodeBandInt7[n7][n13];\n+                    int n15 = -1;\n+                    int n16 = -1;\n+                    final String anObject = cpClass[n14];\n+                    int f = decodeBandInt8[n7][n13];\n+                    String c2 = null;\n+                    String n17 = null;\n+                    if (f != 0) {\n+                        n15 = decodeBandInt9[n8];\n+                        n16 = decodeBandInt10[n8];\n+                        c2 = cpClass[n15];\n+                        n17 = cpUTF8[n16];\n+                        ++n8;\n                     }\n                     else {\n-                        final IcBands icBands = this.segment.getIcBands();\n-                        final IcTuple[] icTuples;\n-                        final IcTuple[] icAll = icTuples = icBands.getIcTuples();\n-                        for (final IcTuple element3 : icTuples) {\n-                            if (element3.getC().equals(icTupleC)) {\n-                                icTupleF = element3.getF();\n-                                icTupleC2 = element3.getC2();\n-                                icTupleN = element3.getN();\n+                        for (final IcTuple icTuple : this.segment.getIcBands().getIcTuples()) {\n+                            if (icTuple.getC().equals(anObject)) {\n+                                f = icTuple.getF();\n+                                c2 = icTuple.getC2();\n+                                n17 = icTuple.getN();\n                                 break;\n                             }\n                         }\n                     }\n-                    final IcTuple icTuple = new IcTuple(icTupleC, icTupleF, icTupleC2, icTupleN, icTupleCIndex, icTupleC2Index, icTupleNIndex, l);\n-                    this.icLocal[j][l] = icTuple;\n+                    this.icLocal[n10][n13] = new IcTuple(anObject, f, c2, n17, n14, n15, n16, n13);\n                 }\n-                ++innerClassIndex;\n+                ++n7;\n             }\n-            if (versionLayout.matches(flag)) {\n-                this.classVersionMajor[j] = classFileVersionMajorH[versionIndex];\n-                this.classVersionMinor[j] = classFileVersionMinorH[versionIndex];\n-                ++versionIndex;\n+            if (attributeLayout6.matches(n11)) {\n+                this.classVersionMajor[n10] = decodeBandInt12[n9];\n+                this.classVersionMinor[n10] = decodeBandInt11[n9];\n+                ++n9;\n             }\n             else if (this.classVersionMajor != null) {\n-                this.classVersionMajor[j] = defaultVersionMajor;\n-                this.classVersionMinor[j] = defaultVersionMinor;\n+                this.classVersionMajor[n10] = defaultClassMajorVersion;\n+                this.classVersionMinor[n10] = defaultClassMinorVersion;\n             }\n-            for (int l = 0; l < otherLayouts.length; ++l) {\n-                if (otherLayouts[l] != null && otherLayouts[l].matches(flag)) {\n-                    this.classAttributes[j].add(otherAttributes[l].get(0));\n-                    otherAttributes[l].remove(0);\n+            for (int n19 = 0; n19 < array3.length; ++n19) {\n+                if (array3[n19] != null && array3[n19].matches(n11)) {\n+                    this.classAttributes[n10].add((Attribute)array5[n19].get(0));\n+                    array5[n19].remove(0);\n                 }\n             }\n         }\n     }\n     \n-    private int parseClassMetadataBands(final InputStream in, final int[] classAttrCalls) throws Pack200Exception, IOException {\n-        int numBackwardsCalls = 0;\n-        final String[] RxA = { \"RVA\", \"RIA\" };\n-        final AttributeLayout rvaLayout = this.attrMap.getAttributeLayout(\"RuntimeVisibleAnnotations\", 0);\n-        final AttributeLayout riaLayout = this.attrMap.getAttributeLayout(\"RuntimeInvisibleAnnotations\", 0);\n-        final int rvaCount = SegmentUtils.countMatches(this.classFlags, (IMatcher)rvaLayout);\n-        final int riaCount = SegmentUtils.countMatches(this.classFlags, (IMatcher)riaLayout);\n-        final int[] RxACount = { rvaCount, riaCount };\n-        final int[] backwardsCalls = { 0, 0 };\n-        if (rvaCount > 0) {\n-            ++numBackwardsCalls;\n-            backwardsCalls[0] = classAttrCalls[0];\n-            if (riaCount > 0) {\n-                ++numBackwardsCalls;\n-                backwardsCalls[1] = classAttrCalls[1];\n-            }\n-        }\n-        else if (riaCount > 0) {\n-            ++numBackwardsCalls;\n-            backwardsCalls[1] = classAttrCalls[0];\n-        }\n-        final MetadataBandGroup[] mbgs = this.parseMetadata(in, RxA, RxACount, backwardsCalls, \"class\");\n-        final List<Attribute> rvaAttributes = mbgs[0].getAttributes();\n-        final List<Attribute> riaAttributes = mbgs[1].getAttributes();\n-        int rvaAttributesIndex = 0;\n-        int riaAttributesIndex = 0;\n+    private int parseClassMetadataBands(final InputStream inputStream, final int[] array) throws Pack200Exception, IOException {\n+        int n = 0;\n+        final String[] array2 = { \"RVA\", \"RIA\" };\n+        final AttributeLayout attributeLayout = this.attrMap.getAttributeLayout(\"RuntimeVisibleAnnotations\", 0);\n+        final AttributeLayout attributeLayout2 = this.attrMap.getAttributeLayout(\"RuntimeInvisibleAnnotations\", 0);\n+        final int countMatches = SegmentUtils.countMatches(this.classFlags, (IMatcher)attributeLayout);\n+        final int countMatches2 = SegmentUtils.countMatches(this.classFlags, (IMatcher)attributeLayout2);\n+        final int[] array3 = { countMatches, countMatches2 };\n+        final int[] array4 = { 0, 0 };\n+        if (countMatches > 0) {\n+            ++n;\n+            array4[0] = array[0];\n+            if (countMatches2 > 0) {\n+                ++n;\n+                array4[1] = array[1];\n+            }\n+        }\n+        else if (countMatches2 > 0) {\n+            ++n;\n+            array4[1] = array[0];\n+        }\n+        final MetadataBandGroup[] metadata = this.parseMetadata(inputStream, array2, array3, array4, \"class\");\n+        final List attributes = metadata[0].getAttributes();\n+        final List attributes2 = metadata[1].getAttributes();\n+        int n2 = 0;\n+        int n3 = 0;\n         for (int i = 0; i < this.classFlags.length; ++i) {\n-            if (rvaLayout.matches(this.classFlags[i])) {\n-                this.classAttributes[i].add(rvaAttributes.get(rvaAttributesIndex++));\n+            if (attributeLayout.matches(this.classFlags[i])) {\n+                this.classAttributes[i].add(attributes.get(n2++));\n             }\n-            if (riaLayout.matches(this.classFlags[i])) {\n-                this.classAttributes[i].add(riaAttributes.get(riaAttributesIndex++));\n+            if (attributeLayout2.matches(this.classFlags[i])) {\n+                this.classAttributes[i].add(attributes2.get(n3++));\n             }\n         }\n-        return numBackwardsCalls;\n+        return n;\n     }\n     \n-    private void parseCodeAttrBands(final InputStream in, final int codeFlagsCount) throws IOException, Pack200Exception {\n-        final long[] codeFlags = this.parseFlags(\"code_flags\", in, codeFlagsCount, Codec.UNSIGNED5, this.segment.getSegmentHeader().getOptions().hasCodeFlagsHi());\n-        final int codeAttrCount = SegmentUtils.countBit16(codeFlags);\n-        final int[] codeAttrCounts = this.decodeBandInt(\"code_attr_count\", in, Codec.UNSIGNED5, codeAttrCount);\n-        final int[][] codeAttrIndexes = this.decodeBandInt(\"code_attr_indexes\", in, Codec.UNSIGNED5, codeAttrCounts);\n-        int callCount = 0;\n-        for (final int[] array2 : codeAttrIndexes) {\n-            final int[] element = array2;\n-            for (final int index : array2) {\n-                final AttributeLayout layout = this.attrMap.getAttributeLayout(index, 3);\n-                callCount += layout.numBackwardsCallables();\n-            }\n-        }\n-        final int[] codeAttrCalls = this.decodeBandInt(\"code_attr_calls\", in, Codec.UNSIGNED5, callCount);\n-        final AttributeLayout lineNumberTableLayout = this.attrMap.getAttributeLayout(\"LineNumberTable\", 3);\n-        final int lineNumberTableCount = SegmentUtils.countMatches(codeFlags, (IMatcher)lineNumberTableLayout);\n-        final int[] lineNumberTableN = this.decodeBandInt(\"code_LineNumberTable_N\", in, Codec.UNSIGNED5, lineNumberTableCount);\n-        final int[][] lineNumberTableBciP = this.decodeBandInt(\"code_LineNumberTable_bci_P\", in, Codec.BCI5, lineNumberTableN);\n-        final int[][] lineNumberTableLine = this.decodeBandInt(\"code_LineNumberTable_line\", in, Codec.UNSIGNED5, lineNumberTableN);\n-        final AttributeLayout localVariableTableLayout = this.attrMap.getAttributeLayout(\"LocalVariableTable\", 3);\n-        final AttributeLayout localVariableTypeTableLayout = this.attrMap.getAttributeLayout(\"LocalVariableTypeTable\", 3);\n-        final int lengthLocalVariableNBand = SegmentUtils.countMatches(codeFlags, (IMatcher)localVariableTableLayout);\n-        final int[] localVariableTableN = this.decodeBandInt(\"code_LocalVariableTable_N\", in, Codec.UNSIGNED5, lengthLocalVariableNBand);\n-        final int[][] localVariableTableBciP = this.decodeBandInt(\"code_LocalVariableTable_bci_P\", in, Codec.BCI5, localVariableTableN);\n-        final int[][] localVariableTableSpanO = this.decodeBandInt(\"code_LocalVariableTable_span_O\", in, Codec.BRANCH5, localVariableTableN);\n-        final CPUTF8[][] localVariableTableNameRU = this.parseCPUTF8References(\"code_LocalVariableTable_name_RU\", in, Codec.UNSIGNED5, localVariableTableN);\n-        final CPUTF8[][] localVariableTableTypeRS = this.parseCPSignatureReferences(\"code_LocalVariableTable_type_RS\", in, Codec.UNSIGNED5, localVariableTableN);\n-        final int[][] localVariableTableSlot = this.decodeBandInt(\"code_LocalVariableTable_slot\", in, Codec.UNSIGNED5, localVariableTableN);\n-        final int lengthLocalVariableTypeTableNBand = SegmentUtils.countMatches(codeFlags, (IMatcher)localVariableTypeTableLayout);\n-        final int[] localVariableTypeTableN = this.decodeBandInt(\"code_LocalVariableTypeTable_N\", in, Codec.UNSIGNED5, lengthLocalVariableTypeTableNBand);\n-        final int[][] localVariableTypeTableBciP = this.decodeBandInt(\"code_LocalVariableTypeTable_bci_P\", in, Codec.BCI5, localVariableTypeTableN);\n-        final int[][] localVariableTypeTableSpanO = this.decodeBandInt(\"code_LocalVariableTypeTable_span_O\", in, Codec.BRANCH5, localVariableTypeTableN);\n-        final CPUTF8[][] localVariableTypeTableNameRU = this.parseCPUTF8References(\"code_LocalVariableTypeTable_name_RU\", in, Codec.UNSIGNED5, localVariableTypeTableN);\n-        final CPUTF8[][] localVariableTypeTableTypeRS = this.parseCPSignatureReferences(\"code_LocalVariableTypeTable_type_RS\", in, Codec.UNSIGNED5, localVariableTypeTableN);\n-        final int[][] localVariableTypeTableSlot = this.decodeBandInt(\"code_LocalVariableTypeTable_slot\", in, Codec.UNSIGNED5, localVariableTypeTableN);\n-        int backwardsCallIndex = 0;\n-        final int limit = this.options.hasCodeFlagsHi() ? 62 : 31;\n-        final AttributeLayout[] otherLayouts = new AttributeLayout[limit + 1];\n-        final int[] counts = new int[limit + 1];\n-        final List<Attribute>[] otherAttributes = new List[limit + 1];\n-        for (int i = 0; i < limit; ++i) {\n-            final AttributeLayout layout2 = this.attrMap.getAttributeLayout(i, 3);\n-            if (layout2 != null && !layout2.isDefaultLayout()) {\n-                otherLayouts[i] = layout2;\n-                counts[i] = SegmentUtils.countMatches(codeFlags, (IMatcher)layout2);\n-            }\n-        }\n-        for (int i = 0; i < counts.length; ++i) {\n-            if (counts[i] > 0) {\n-                final NewAttributeBands bands = this.attrMap.getAttributeBands(otherLayouts[i]);\n-                otherAttributes[i] = bands.parseAttributes(in, counts[i]);\n-                final int numBackwardsCallables = otherLayouts[i].numBackwardsCallables();\n+    private void parseCodeAttrBands(final InputStream inputStream, final int n) throws IOException, Pack200Exception {\n+        final long[] flags = this.parseFlags(\"code_flags\", inputStream, n, Codec.UNSIGNED5, this.segment.getSegmentHeader().getOptions().hasCodeFlagsHi());\n+        final int[][] decodeBandInt = this.decodeBandInt(\"code_attr_indexes\", inputStream, Codec.UNSIGNED5, this.decodeBandInt(\"code_attr_count\", inputStream, Codec.UNSIGNED5, SegmentUtils.countBit16(flags)));\n+        int n2 = 0;\n+        for (final int[] array2 : decodeBandInt) {\n+            for (int length2 = array2.length, j = 0; j < length2; ++j) {\n+                n2 += this.attrMap.getAttributeLayout(array2[j], 3).numBackwardsCallables();\n+            }\n+        }\n+        final int[] decodeBandInt2 = this.decodeBandInt(\"code_attr_calls\", inputStream, Codec.UNSIGNED5, n2);\n+        final AttributeLayout attributeLayout = this.attrMap.getAttributeLayout(\"LineNumberTable\", 3);\n+        final int[] decodeBandInt3 = this.decodeBandInt(\"code_LineNumberTable_N\", inputStream, Codec.UNSIGNED5, SegmentUtils.countMatches(flags, (IMatcher)attributeLayout));\n+        final int[][] decodeBandInt4 = this.decodeBandInt(\"code_LineNumberTable_bci_P\", inputStream, Codec.BCI5, decodeBandInt3);\n+        final int[][] decodeBandInt5 = this.decodeBandInt(\"code_LineNumberTable_line\", inputStream, Codec.UNSIGNED5, decodeBandInt3);\n+        final AttributeLayout attributeLayout2 = this.attrMap.getAttributeLayout(\"LocalVariableTable\", 3);\n+        final AttributeLayout attributeLayout3 = this.attrMap.getAttributeLayout(\"LocalVariableTypeTable\", 3);\n+        final int[] decodeBandInt6 = this.decodeBandInt(\"code_LocalVariableTable_N\", inputStream, Codec.UNSIGNED5, SegmentUtils.countMatches(flags, (IMatcher)attributeLayout2));\n+        final int[][] decodeBandInt7 = this.decodeBandInt(\"code_LocalVariableTable_bci_P\", inputStream, Codec.BCI5, decodeBandInt6);\n+        final int[][] decodeBandInt8 = this.decodeBandInt(\"code_LocalVariableTable_span_O\", inputStream, Codec.BRANCH5, decodeBandInt6);\n+        final CPUTF8[][] cputf8References = this.parseCPUTF8References(\"code_LocalVariableTable_name_RU\", inputStream, Codec.UNSIGNED5, decodeBandInt6);\n+        final CPUTF8[][] cpSignatureReferences = this.parseCPSignatureReferences(\"code_LocalVariableTable_type_RS\", inputStream, Codec.UNSIGNED5, decodeBandInt6);\n+        final int[][] decodeBandInt9 = this.decodeBandInt(\"code_LocalVariableTable_slot\", inputStream, Codec.UNSIGNED5, decodeBandInt6);\n+        final int[] decodeBandInt10 = this.decodeBandInt(\"code_LocalVariableTypeTable_N\", inputStream, Codec.UNSIGNED5, SegmentUtils.countMatches(flags, (IMatcher)attributeLayout3));\n+        final int[][] decodeBandInt11 = this.decodeBandInt(\"code_LocalVariableTypeTable_bci_P\", inputStream, Codec.BCI5, decodeBandInt10);\n+        final int[][] decodeBandInt12 = this.decodeBandInt(\"code_LocalVariableTypeTable_span_O\", inputStream, Codec.BRANCH5, decodeBandInt10);\n+        final CPUTF8[][] cputf8References2 = this.parseCPUTF8References(\"code_LocalVariableTypeTable_name_RU\", inputStream, Codec.UNSIGNED5, decodeBandInt10);\n+        final CPUTF8[][] cpSignatureReferences2 = this.parseCPSignatureReferences(\"code_LocalVariableTypeTable_type_RS\", inputStream, Codec.UNSIGNED5, decodeBandInt10);\n+        final int[][] decodeBandInt13 = this.decodeBandInt(\"code_LocalVariableTypeTable_slot\", inputStream, Codec.UNSIGNED5, decodeBandInt10);\n+        int n3 = 0;\n+        final int n4 = this.options.hasCodeFlagsHi() ? 62 : 31;\n+        final AttributeLayout[] array3 = new AttributeLayout[n4 + 1];\n+        final int[] array4 = new int[n4 + 1];\n+        final List[] array5 = new List[n4 + 1];\n+        for (int k = 0; k < n4; ++k) {\n+            final AttributeLayout attributeLayout4 = this.attrMap.getAttributeLayout(k, 3);\n+            if (attributeLayout4 != null && !attributeLayout4.isDefaultLayout()) {\n+                array3[k] = attributeLayout4;\n+                array4[k] = SegmentUtils.countMatches(flags, (IMatcher)attributeLayout4);\n+            }\n+        }\n+        for (int l = 0; l < array4.length; ++l) {\n+            if (array4[l] > 0) {\n+                final NewAttributeBands attributeBands = this.attrMap.getAttributeBands(array3[l]);\n+                array5[l] = attributeBands.parseAttributes(inputStream, array4[l]);\n+                final int numBackwardsCallables = array3[l].numBackwardsCallables();\n                 if (numBackwardsCallables > 0) {\n                     final int[] backwardsCalls = new int[numBackwardsCallables];\n-                    System.arraycopy(codeAttrCalls, backwardsCallIndex, backwardsCalls, 0, numBackwardsCallables);\n-                    bands.setBackwardsCalls(backwardsCalls);\n-                    backwardsCallIndex += numBackwardsCallables;\n+                    System.arraycopy(decodeBandInt2, n3, backwardsCalls, 0, numBackwardsCallables);\n+                    attributeBands.setBackwardsCalls(backwardsCalls);\n+                    n3 += numBackwardsCallables;\n                 }\n             }\n         }\n-        int lineNumberIndex = 0;\n-        int lvtIndex = 0;\n-        int lvttIndex = 0;\n-        for (int j = 0; j < codeFlagsCount; ++j) {\n-            if (lineNumberTableLayout.matches(codeFlags[j])) {\n-                final LineNumberTableAttribute lnta = new LineNumberTableAttribute(lineNumberTableN[lineNumberIndex], lineNumberTableBciP[lineNumberIndex], lineNumberTableLine[lineNumberIndex]);\n-                ++lineNumberIndex;\n-                this.codeAttributes[j].add((Attribute)lnta);\n+        int n5 = 0;\n+        int n6 = 0;\n+        int n7 = 0;\n+        for (int n8 = 0; n8 < n; ++n8) {\n+            if (attributeLayout.matches(flags[n8])) {\n+                final LineNumberTableAttribute lineNumberTableAttribute = new LineNumberTableAttribute(decodeBandInt3[n5], decodeBandInt4[n5], decodeBandInt5[n5]);\n+                ++n5;\n+                this.codeAttributes[n8].add((Attribute)lineNumberTableAttribute);\n             }\n-            if (localVariableTableLayout.matches(codeFlags[j])) {\n-                final LocalVariableTableAttribute lvta = new LocalVariableTableAttribute(localVariableTableN[lvtIndex], localVariableTableBciP[lvtIndex], localVariableTableSpanO[lvtIndex], localVariableTableNameRU[lvtIndex], localVariableTableTypeRS[lvtIndex], localVariableTableSlot[lvtIndex]);\n-                ++lvtIndex;\n-                this.codeAttributes[j].add((Attribute)lvta);\n+            if (attributeLayout2.matches(flags[n8])) {\n+                final LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(decodeBandInt6[n6], decodeBandInt7[n6], decodeBandInt8[n6], cputf8References[n6], cpSignatureReferences[n6], decodeBandInt9[n6]);\n+                ++n6;\n+                this.codeAttributes[n8].add((Attribute)localVariableTableAttribute);\n             }\n-            if (localVariableTypeTableLayout.matches(codeFlags[j])) {\n-                final LocalVariableTypeTableAttribute lvtta = new LocalVariableTypeTableAttribute(localVariableTypeTableN[lvttIndex], localVariableTypeTableBciP[lvttIndex], localVariableTypeTableSpanO[lvttIndex], localVariableTypeTableNameRU[lvttIndex], localVariableTypeTableTypeRS[lvttIndex], localVariableTypeTableSlot[lvttIndex]);\n-                ++lvttIndex;\n-                this.codeAttributes[j].add((Attribute)lvtta);\n+            if (attributeLayout3.matches(flags[n8])) {\n+                final LocalVariableTypeTableAttribute localVariableTypeTableAttribute = new LocalVariableTypeTableAttribute(decodeBandInt10[n7], decodeBandInt11[n7], decodeBandInt12[n7], cputf8References2[n7], cpSignatureReferences2[n7], decodeBandInt13[n7]);\n+                ++n7;\n+                this.codeAttributes[n8].add((Attribute)localVariableTypeTableAttribute);\n             }\n-            for (int k = 0; k < otherLayouts.length; ++k) {\n-                if (otherLayouts[k] != null && otherLayouts[k].matches(codeFlags[j])) {\n-                    this.codeAttributes[j].add(otherAttributes[k].get(0));\n-                    otherAttributes[k].remove(0);\n+            for (int n9 = 0; n9 < array3.length; ++n9) {\n+                if (array3[n9] != null && array3[n9].matches(flags[n8])) {\n+                    this.codeAttributes[n8].add((Attribute)array5[n9].get(0));\n+                    array5[n9].remove(0);\n                 }\n             }\n         }\n     }\n     \n-    private void parseCodeBands(final InputStream in) throws Pack200Exception, IOException {\n-        final AttributeLayout layout = this.attrMap.getAttributeLayout(\"Code\", 2);\n-        final int codeCount = SegmentUtils.countMatches(this.methodFlags, (IMatcher)layout);\n-        final int[] codeHeaders = this.decodeBandInt(\"code_headers\", in, Codec.BYTE1, codeCount);\n-        final boolean allCodeHasFlags = this.segment.getSegmentHeader().getOptions().hasAllCodeFlags();\n-        if (!allCodeHasFlags) {\n-            this.codeHasAttributes = new boolean[codeCount];\n+    private void parseCodeBands(final InputStream inputStream) throws Pack200Exception, IOException {\n+        final int countMatches = SegmentUtils.countMatches(this.methodFlags, (IMatcher)this.attrMap.getAttributeLayout(\"Code\", 2));\n+        final int[] decodeBandInt = this.decodeBandInt(\"code_headers\", inputStream, Codec.BYTE1, countMatches);\n+        final boolean hasAllCodeFlags = this.segment.getSegmentHeader().getOptions().hasAllCodeFlags();\n+        if (!hasAllCodeFlags) {\n+            this.codeHasAttributes = new boolean[countMatches];\n         }\n-        int codeSpecialHeader = 0;\n-        for (int i = 0; i < codeCount; ++i) {\n-            if (codeHeaders[i] == 0) {\n-                ++codeSpecialHeader;\n-                if (!allCodeHasFlags) {\n+        int n = 0;\n+        for (int i = 0; i < countMatches; ++i) {\n+            if (decodeBandInt[i] == 0) {\n+                ++n;\n+                if (!hasAllCodeFlags) {\n                     this.codeHasAttributes[i] = true;\n                 }\n             }\n         }\n-        final int[] codeMaxStackSpecials = this.decodeBandInt(\"code_max_stack\", in, Codec.UNSIGNED5, codeSpecialHeader);\n-        final int[] codeMaxNALocalsSpecials = this.decodeBandInt(\"code_max_na_locals\", in, Codec.UNSIGNED5, codeSpecialHeader);\n-        final int[] codeHandlerCountSpecials = this.decodeBandInt(\"code_handler_count\", in, Codec.UNSIGNED5, codeSpecialHeader);\n-        this.codeMaxStack = new int[codeCount];\n-        this.codeMaxNALocals = new int[codeCount];\n-        this.codeHandlerCount = new int[codeCount];\n-        int special = 0;\n-        for (int j = 0; j < codeCount; ++j) {\n-            final int header = 0xFF & codeHeaders[j];\n-            if (header < 0) {\n+        final int[] decodeBandInt2 = this.decodeBandInt(\"code_max_stack\", inputStream, Codec.UNSIGNED5, n);\n+        final int[] decodeBandInt3 = this.decodeBandInt(\"code_max_na_locals\", inputStream, Codec.UNSIGNED5, n);\n+        final int[] decodeBandInt4 = this.decodeBandInt(\"code_handler_count\", inputStream, Codec.UNSIGNED5, n);\n+        this.codeMaxStack = new int[countMatches];\n+        this.codeMaxNALocals = new int[countMatches];\n+        this.codeHandlerCount = new int[countMatches];\n+        int n2 = 0;\n+        for (int j = 0; j < countMatches; ++j) {\n+            final int n3 = 0xFF & decodeBandInt[j];\n+            if (n3 < 0) {\n                 throw new IllegalStateException(\"Shouldn't get here\");\n             }\n-            if (header == 0) {\n-                this.codeMaxStack[j] = codeMaxStackSpecials[special];\n-                this.codeMaxNALocals[j] = codeMaxNALocalsSpecials[special];\n-                this.codeHandlerCount[j] = codeHandlerCountSpecials[special];\n-                ++special;\n-            }\n-            else if (header <= 144) {\n-                this.codeMaxStack[j] = (header - 1) % 12;\n-                this.codeMaxNALocals[j] = (header - 1) / 12;\n+            if (n3 == 0) {\n+                this.codeMaxStack[j] = decodeBandInt2[n2];\n+                this.codeMaxNALocals[j] = decodeBandInt3[n2];\n+                this.codeHandlerCount[j] = decodeBandInt4[n2];\n+                ++n2;\n+            }\n+            else if (n3 <= 144) {\n+                this.codeMaxStack[j] = (n3 - 1) % 12;\n+                this.codeMaxNALocals[j] = (n3 - 1) / 12;\n                 this.codeHandlerCount[j] = 0;\n             }\n-            else if (header <= 208) {\n-                this.codeMaxStack[j] = (header - 145) % 8;\n-                this.codeMaxNALocals[j] = (header - 145) / 8;\n+            else if (n3 <= 208) {\n+                this.codeMaxStack[j] = (n3 - 145) % 8;\n+                this.codeMaxNALocals[j] = (n3 - 145) / 8;\n                 this.codeHandlerCount[j] = 1;\n             }\n             else {\n-                if (header > 255) {\n+                if (n3 > 255) {\n                     throw new IllegalStateException(\"Shouldn't get here either\");\n                 }\n-                this.codeMaxStack[j] = (header - 209) % 7;\n-                this.codeMaxNALocals[j] = (header - 209) / 7;\n+                this.codeMaxStack[j] = (n3 - 209) % 7;\n+                this.codeMaxNALocals[j] = (n3 - 209) / 7;\n                 this.codeHandlerCount[j] = 2;\n             }\n         }\n-        this.codeHandlerStartP = this.decodeBandInt(\"code_handler_start_P\", in, Codec.BCI5, this.codeHandlerCount);\n-        this.codeHandlerEndPO = this.decodeBandInt(\"code_handler_end_PO\", in, Codec.BRANCH5, this.codeHandlerCount);\n-        this.codeHandlerCatchPO = this.decodeBandInt(\"code_handler_catch_PO\", in, Codec.BRANCH5, this.codeHandlerCount);\n-        this.codeHandlerClassRCN = this.decodeBandInt(\"code_handler_class_RCN\", in, Codec.UNSIGNED5, this.codeHandlerCount);\n-        final int codeFlagsCount = allCodeHasFlags ? codeCount : codeSpecialHeader;\n-        Arrays.setAll(this.codeAttributes = new List[codeFlagsCount], i -> new ArrayList());\n-        this.parseCodeAttrBands(in, codeFlagsCount);\n-    }\n-    \n-    private void parseFieldAttrBands(final InputStream in) throws IOException, Pack200Exception {\n-        this.fieldFlags = this.parseFlags(\"field_flags\", in, this.classFieldCount, Codec.UNSIGNED5, this.options.hasFieldFlagsHi());\n-        final int fieldAttrCount = SegmentUtils.countBit16(this.fieldFlags);\n-        final int[] fieldAttrCounts = this.decodeBandInt(\"field_attr_count\", in, Codec.UNSIGNED5, fieldAttrCount);\n-        final int[][] fieldAttrIndexes = this.decodeBandInt(\"field_attr_indexes\", in, Codec.UNSIGNED5, fieldAttrCounts);\n-        final int callCount = this.getCallCount(fieldAttrIndexes, this.fieldFlags, 1);\n-        final int[] fieldAttrCalls = this.decodeBandInt(\"field_attr_calls\", in, Codec.UNSIGNED5, callCount);\n+        this.codeHandlerStartP = this.decodeBandInt(\"code_handler_start_P\", inputStream, Codec.BCI5, this.codeHandlerCount);\n+        this.codeHandlerEndPO = this.decodeBandInt(\"code_handler_end_PO\", inputStream, Codec.BRANCH5, this.codeHandlerCount);\n+        this.codeHandlerCatchPO = this.decodeBandInt(\"code_handler_catch_PO\", inputStream, Codec.BRANCH5, this.codeHandlerCount);\n+        this.codeHandlerClassRCN = this.decodeBandInt(\"code_handler_class_RCN\", inputStream, Codec.UNSIGNED5, this.codeHandlerCount);\n+        final int n4 = hasAllCodeFlags ? countMatches : n;\n+        Arrays.setAll(this.codeAttributes = new List[n4], p0 -> new ArrayList());\n+        this.parseCodeAttrBands(inputStream, n4);\n+    }\n+    \n+    private void parseFieldAttrBands(final InputStream inputStream) throws IOException, Pack200Exception {\n+        this.fieldFlags = this.parseFlags(\"field_flags\", inputStream, this.classFieldCount, Codec.UNSIGNED5, this.options.hasFieldFlagsHi());\n+        final int[] decodeBandInt = this.decodeBandInt(\"field_attr_calls\", inputStream, Codec.UNSIGNED5, this.getCallCount(this.decodeBandInt(\"field_attr_indexes\", inputStream, Codec.UNSIGNED5, this.decodeBandInt(\"field_attr_count\", inputStream, Codec.UNSIGNED5, SegmentUtils.countBit16(this.fieldFlags))), this.fieldFlags, 1));\n         this.fieldAttributes = new ArrayList[this.classCount][];\n         for (int i = 0; i < this.classCount; ++i) {\n             this.fieldAttributes[i] = new ArrayList[this.fieldFlags[i].length];\n             for (int j = 0; j < this.fieldFlags[i].length; ++j) {\n                 this.fieldAttributes[i][j] = new ArrayList<Attribute>();\n             }\n         }\n-        final AttributeLayout constantValueLayout = this.attrMap.getAttributeLayout(\"ConstantValue\", 1);\n-        final int constantCount = SegmentUtils.countMatches(this.fieldFlags, (IMatcher)constantValueLayout);\n-        final int[] field_constantValue_KQ = this.decodeBandInt(\"field_ConstantValue_KQ\", in, Codec.UNSIGNED5, constantCount);\n-        int constantValueIndex = 0;\n-        final AttributeLayout signatureLayout = this.attrMap.getAttributeLayout(\"Signature\", 1);\n-        final int signatureCount = SegmentUtils.countMatches(this.fieldFlags, (IMatcher)signatureLayout);\n-        final int[] fieldSignatureRS = this.decodeBandInt(\"field_Signature_RS\", in, Codec.UNSIGNED5, signatureCount);\n-        int signatureIndex = 0;\n-        final AttributeLayout deprecatedLayout = this.attrMap.getAttributeLayout(\"Deprecated\", 1);\n+        final AttributeLayout attributeLayout = this.attrMap.getAttributeLayout(\"ConstantValue\", 1);\n+        final int[] decodeBandInt2 = this.decodeBandInt(\"field_ConstantValue_KQ\", inputStream, Codec.UNSIGNED5, SegmentUtils.countMatches(this.fieldFlags, (IMatcher)attributeLayout));\n+        int n = 0;\n+        final AttributeLayout attributeLayout2 = this.attrMap.getAttributeLayout(\"Signature\", 1);\n+        final int[] decodeBandInt3 = this.decodeBandInt(\"field_Signature_RS\", inputStream, Codec.UNSIGNED5, SegmentUtils.countMatches(this.fieldFlags, (IMatcher)attributeLayout2));\n+        int n2 = 0;\n+        final AttributeLayout attributeLayout3 = this.attrMap.getAttributeLayout(\"Deprecated\", 1);\n         for (int k = 0; k < this.classCount; ++k) {\n             for (int l = 0; l < this.fieldFlags[k].length; ++l) {\n-                final long flag = this.fieldFlags[k][l];\n-                if (deprecatedLayout.matches(flag)) {\n+                final long n3 = this.fieldFlags[k][l];\n+                if (attributeLayout3.matches(n3)) {\n                     this.fieldAttributes[k][l].add((Attribute)new DeprecatedAttribute());\n                 }\n-                if (constantValueLayout.matches(flag)) {\n-                    final long result = (long)field_constantValue_KQ[constantValueIndex];\n-                    final String desc = this.fieldDescr[k][l];\n-                    final int colon = desc.indexOf(58);\n-                    String type = desc.substring(colon + 1);\n-                    if (type.equals(\"B\") || type.equals(\"S\") || type.equals(\"C\") || type.equals(\"Z\")) {\n-                        type = \"I\";\n-                    }\n-                    final ClassFileEntry value = constantValueLayout.getValue(result, type, this.cpBands.getConstantPool());\n-                    this.fieldAttributes[k][l].add((Attribute)new ConstantValueAttribute(value));\n-                    ++constantValueIndex;\n-                }\n-                if (signatureLayout.matches(flag)) {\n-                    final long result = (long)fieldSignatureRS[signatureIndex];\n-                    final String desc = this.fieldDescr[k][l];\n-                    final int colon = desc.indexOf(58);\n-                    final String type = desc.substring(colon + 1);\n-                    final CPUTF8 value2 = (CPUTF8)signatureLayout.getValue(result, type, this.cpBands.getConstantPool());\n-                    this.fieldAttributes[k][l].add((Attribute)new SignatureAttribute(value2));\n-                    ++signatureIndex;\n+                if (attributeLayout.matches(n3)) {\n+                    final long n4 = (long)decodeBandInt2[n];\n+                    final String s = this.fieldDescr[k][l];\n+                    String substring = s.substring(s.indexOf(58) + 1);\n+                    if (substring.equals(\"B\") || substring.equals(\"S\") || substring.equals(\"C\") || substring.equals(\"Z\")) {\n+                        substring = \"I\";\n+                    }\n+                    this.fieldAttributes[k][l].add((Attribute)new ConstantValueAttribute(attributeLayout.getValue(n4, substring, this.cpBands.getConstantPool())));\n+                    ++n;\n+                }\n+                if (attributeLayout2.matches(n3)) {\n+                    final long n5 = (long)decodeBandInt3[n2];\n+                    final String s2 = this.fieldDescr[k][l];\n+                    this.fieldAttributes[k][l].add((Attribute)new SignatureAttribute((CPUTF8)attributeLayout2.getValue(n5, s2.substring(s2.indexOf(58) + 1), this.cpBands.getConstantPool())));\n+                    ++n2;\n                 }\n             }\n         }\n-        int backwardsCallIndex = this.parseFieldMetadataBands(in, fieldAttrCalls);\n-        final int limit = this.options.hasFieldFlagsHi() ? 62 : 31;\n-        final AttributeLayout[] otherLayouts = new AttributeLayout[limit + 1];\n-        final int[] counts = new int[limit + 1];\n-        final List<Attribute>[] otherAttributes = new List[limit + 1];\n-        for (int m = 0; m < limit; ++m) {\n-            final AttributeLayout layout = this.attrMap.getAttributeLayout(m, 1);\n-            if (layout != null && !layout.isDefaultLayout()) {\n-                otherLayouts[m] = layout;\n-                counts[m] = SegmentUtils.countMatches(this.fieldFlags, (IMatcher)layout);\n-            }\n-        }\n-        for (int m = 0; m < counts.length; ++m) {\n-            if (counts[m] > 0) {\n-                final NewAttributeBands bands = this.attrMap.getAttributeBands(otherLayouts[m]);\n-                otherAttributes[m] = bands.parseAttributes(in, counts[m]);\n-                final int numBackwardsCallables = otherLayouts[m].numBackwardsCallables();\n+        int fieldMetadataBands = this.parseFieldMetadataBands(inputStream, decodeBandInt);\n+        final int n6 = this.options.hasFieldFlagsHi() ? 62 : 31;\n+        final AttributeLayout[] array = new AttributeLayout[n6 + 1];\n+        final int[] array2 = new int[n6 + 1];\n+        final List[] array3 = new List[n6 + 1];\n+        for (int n7 = 0; n7 < n6; ++n7) {\n+            final AttributeLayout attributeLayout4 = this.attrMap.getAttributeLayout(n7, 1);\n+            if (attributeLayout4 != null && !attributeLayout4.isDefaultLayout()) {\n+                array[n7] = attributeLayout4;\n+                array2[n7] = SegmentUtils.countMatches(this.fieldFlags, (IMatcher)attributeLayout4);\n+            }\n+        }\n+        for (int n8 = 0; n8 < array2.length; ++n8) {\n+            if (array2[n8] > 0) {\n+                final NewAttributeBands attributeBands = this.attrMap.getAttributeBands(array[n8]);\n+                array3[n8] = attributeBands.parseAttributes(inputStream, array2[n8]);\n+                final int numBackwardsCallables = array[n8].numBackwardsCallables();\n                 if (numBackwardsCallables > 0) {\n                     final int[] backwardsCalls = new int[numBackwardsCallables];\n-                    System.arraycopy(fieldAttrCalls, backwardsCallIndex, backwardsCalls, 0, numBackwardsCallables);\n-                    bands.setBackwardsCalls(backwardsCalls);\n-                    backwardsCallIndex += numBackwardsCallables;\n+                    System.arraycopy(decodeBandInt, fieldMetadataBands, backwardsCalls, 0, numBackwardsCallables);\n+                    attributeBands.setBackwardsCalls(backwardsCalls);\n+                    fieldMetadataBands += numBackwardsCallables;\n                 }\n             }\n         }\n-        for (int m = 0; m < this.classCount; ++m) {\n-            for (int j2 = 0; j2 < this.fieldFlags[m].length; ++j2) {\n-                final long flag2 = this.fieldFlags[m][j2];\n-                int othersAddedAtStart = 0;\n-                for (int k2 = 0; k2 < otherLayouts.length; ++k2) {\n-                    if (otherLayouts[k2] != null && otherLayouts[k2].matches(flag2)) {\n-                        if (otherLayouts[k2].getIndex() < 15) {\n-                            this.fieldAttributes[m][j2].add(othersAddedAtStart++, otherAttributes[k2].get(0));\n+        for (int n9 = 0; n9 < this.classCount; ++n9) {\n+            for (int n10 = 0; n10 < this.fieldFlags[n9].length; ++n10) {\n+                final long n11 = this.fieldFlags[n9][n10];\n+                int n12 = 0;\n+                for (int n13 = 0; n13 < array.length; ++n13) {\n+                    if (array[n13] != null && array[n13].matches(n11)) {\n+                        if (array[n13].getIndex() < 15) {\n+                            this.fieldAttributes[n9][n10].add(n12++, (Attribute)array3[n13].get(0));\n                         }\n                         else {\n-                            this.fieldAttributes[m][j2].add(otherAttributes[k2].get(0));\n+                            this.fieldAttributes[n9][n10].add((Attribute)array3[n13].get(0));\n                         }\n-                        otherAttributes[k2].remove(0);\n+                        array3[n13].remove(0);\n                     }\n                 }\n             }\n         }\n     }\n     \n-    private void parseFieldBands(final InputStream in) throws IOException, Pack200Exception {\n-        this.fieldDescrInts = this.decodeBandInt(\"field_descr\", in, Codec.DELTA5, this.classFieldCount);\n+    private void parseFieldBands(final InputStream inputStream) throws IOException, Pack200Exception {\n+        this.fieldDescrInts = this.decodeBandInt(\"field_descr\", inputStream, Codec.DELTA5, this.classFieldCount);\n         this.fieldDescr = this.getReferences(this.fieldDescrInts, this.cpBands.getCpDescriptor());\n-        this.parseFieldAttrBands(in);\n+        this.parseFieldAttrBands(inputStream);\n     }\n     \n-    private int parseFieldMetadataBands(final InputStream in, final int[] fieldAttrCalls) throws Pack200Exception, IOException {\n-        int backwardsCallsUsed = 0;\n-        final String[] RxA = { \"RVA\", \"RIA\" };\n-        final AttributeLayout rvaLayout = this.attrMap.getAttributeLayout(\"RuntimeVisibleAnnotations\", 1);\n-        final AttributeLayout riaLayout = this.attrMap.getAttributeLayout(\"RuntimeInvisibleAnnotations\", 1);\n-        final int rvaCount = SegmentUtils.countMatches(this.fieldFlags, (IMatcher)rvaLayout);\n-        final int riaCount = SegmentUtils.countMatches(this.fieldFlags, (IMatcher)riaLayout);\n-        final int[] RxACount = { rvaCount, riaCount };\n-        final int[] backwardsCalls = { 0, 0 };\n-        if (rvaCount > 0) {\n-            backwardsCalls[0] = fieldAttrCalls[0];\n-            ++backwardsCallsUsed;\n-            if (riaCount > 0) {\n-                backwardsCalls[1] = fieldAttrCalls[1];\n-                ++backwardsCallsUsed;\n-            }\n-        }\n-        else if (riaCount > 0) {\n-            backwardsCalls[1] = fieldAttrCalls[0];\n-            ++backwardsCallsUsed;\n-        }\n-        final MetadataBandGroup[] mb = this.parseMetadata(in, RxA, RxACount, backwardsCalls, \"field\");\n-        final List<Attribute> rvaAttributes = mb[0].getAttributes();\n-        final List<Attribute> riaAttributes = mb[1].getAttributes();\n-        int rvaAttributesIndex = 0;\n-        int riaAttributesIndex = 0;\n+    private int parseFieldMetadataBands(final InputStream inputStream, final int[] array) throws Pack200Exception, IOException {\n+        int n = 0;\n+        final String[] array2 = { \"RVA\", \"RIA\" };\n+        final AttributeLayout attributeLayout = this.attrMap.getAttributeLayout(\"RuntimeVisibleAnnotations\", 1);\n+        final AttributeLayout attributeLayout2 = this.attrMap.getAttributeLayout(\"RuntimeInvisibleAnnotations\", 1);\n+        final int countMatches = SegmentUtils.countMatches(this.fieldFlags, (IMatcher)attributeLayout);\n+        final int countMatches2 = SegmentUtils.countMatches(this.fieldFlags, (IMatcher)attributeLayout2);\n+        final int[] array3 = { countMatches, countMatches2 };\n+        final int[] array4 = { 0, 0 };\n+        if (countMatches > 0) {\n+            array4[0] = array[0];\n+            ++n;\n+            if (countMatches2 > 0) {\n+                array4[1] = array[1];\n+                ++n;\n+            }\n+        }\n+        else if (countMatches2 > 0) {\n+            array4[1] = array[0];\n+            ++n;\n+        }\n+        final MetadataBandGroup[] metadata = this.parseMetadata(inputStream, array2, array3, array4, \"field\");\n+        final List attributes = metadata[0].getAttributes();\n+        final List attributes2 = metadata[1].getAttributes();\n+        int n2 = 0;\n+        int n3 = 0;\n         for (int i = 0; i < this.fieldFlags.length; ++i) {\n             for (int j = 0; j < this.fieldFlags[i].length; ++j) {\n-                if (rvaLayout.matches(this.fieldFlags[i][j])) {\n-                    this.fieldAttributes[i][j].add(rvaAttributes.get(rvaAttributesIndex++));\n+                if (attributeLayout.matches(this.fieldFlags[i][j])) {\n+                    this.fieldAttributes[i][j].add(attributes.get(n2++));\n                 }\n-                if (riaLayout.matches(this.fieldFlags[i][j])) {\n-                    this.fieldAttributes[i][j].add(riaAttributes.get(riaAttributesIndex++));\n+                if (attributeLayout2.matches(this.fieldFlags[i][j])) {\n+                    this.fieldAttributes[i][j].add(attributes2.get(n3++));\n                 }\n             }\n         }\n-        return backwardsCallsUsed;\n+        return n;\n     }\n     \n-    private MetadataBandGroup[] parseMetadata(final InputStream in, final String[] RxA, final int[] RxACount, final int[] backwardsCallCounts, final String contextName) throws IOException, Pack200Exception {\n-        final MetadataBandGroup[] mbg = new MetadataBandGroup[RxA.length];\n-        for (int i = 0; i < RxA.length; ++i) {\n-            mbg[i] = new MetadataBandGroup(RxA[i], this.cpBands);\n-            final String rxa = RxA[i];\n-            if (rxa.indexOf(80) >= 0) {\n-                mbg[i].param_NB = this.decodeBandInt(contextName + \"_\" + rxa + \"_param_NB\", in, Codec.BYTE1, RxACount[i]);\n+    private MetadataBandGroup[] parseMetadata(final InputStream inputStream, final String[] array, final int[] array2, final int[] array3, final String s) throws IOException, Pack200Exception {\n+        final MetadataBandGroup[] array4 = new MetadataBandGroup[array.length];\n+        for (int i = 0; i < array.length; ++i) {\n+            array4[i] = new MetadataBandGroup(array[i], this.cpBands);\n+            final String s2 = array[i];\n+            if (s2.indexOf(80) >= 0) {\n+                array4[i].param_NB = this.decodeBandInt(s + \"_\" + s2 + \"_param_NB\", inputStream, Codec.BYTE1, array2[i]);\n             }\n-            int pairCount = 0;\n-            if (!rxa.equals(\"AD\")) {\n-                mbg[i].anno_N = this.decodeBandInt(contextName + \"_\" + rxa + \"_anno_N\", in, Codec.UNSIGNED5, RxACount[i]);\n-                mbg[i].type_RS = this.parseCPSignatureReferences(contextName + \"_\" + rxa + \"_type_RS\", in, Codec.UNSIGNED5, mbg[i].anno_N);\n-                mbg[i].pair_N = this.decodeBandInt(contextName + \"_\" + rxa + \"_pair_N\", in, Codec.UNSIGNED5, mbg[i].anno_N);\n-                for (final int[] array : mbg[i].pair_N) {\n-                    final int[] element = array;\n-                    for (final int element2 : array) {\n-                        pairCount += element2;\n+            int n = 0;\n+            if (!s2.equals(\"AD\")) {\n+                array4[i].anno_N = this.decodeBandInt(s + \"_\" + s2 + \"_anno_N\", inputStream, Codec.UNSIGNED5, array2[i]);\n+                array4[i].type_RS = this.parseCPSignatureReferences(s + \"_\" + s2 + \"_type_RS\", inputStream, Codec.UNSIGNED5, array4[i].anno_N);\n+                array4[i].pair_N = this.decodeBandInt(s + \"_\" + s2 + \"_pair_N\", inputStream, Codec.UNSIGNED5, array4[i].anno_N);\n+                for (final int[] array5 : array4[i].pair_N) {\n+                    for (int length2 = array5.length, k = 0; k < length2; ++k) {\n+                        n += array5[k];\n                     }\n                 }\n-                mbg[i].name_RU = this.parseCPUTF8References(contextName + \"_\" + rxa + \"_name_RU\", in, Codec.UNSIGNED5, pairCount);\n+                array4[i].name_RU = this.parseCPUTF8References(s + \"_\" + s2 + \"_name_RU\", inputStream, Codec.UNSIGNED5, n);\n             }\n             else {\n-                pairCount = RxACount[i];\n+                n = array2[i];\n             }\n-            mbg[i].T = this.decodeBandInt(contextName + \"_\" + rxa + \"_T\", in, Codec.BYTE1, pairCount + backwardsCallCounts[i]);\n-            int ICount = 0;\n-            int DCount = 0;\n-            int FCount = 0;\n-            int JCount = 0;\n-            int cCount = 0;\n-            int eCount = 0;\n-            int sCount = 0;\n-            int arrayCount = 0;\n-            int atCount = 0;\n-            for (final int element3 : mbg[i].T) {\n-                final char c = (char)element3;\n-                switch (c) {\n+            array4[i].T = this.decodeBandInt(s + \"_\" + s2 + \"_T\", inputStream, Codec.BYTE1, n + array3[i]);\n+            int n2 = 0;\n+            int n3 = 0;\n+            int n4 = 0;\n+            int n5 = 0;\n+            int n6 = 0;\n+            int n7 = 0;\n+            int n8 = 0;\n+            int n9 = 0;\n+            int n10 = 0;\n+            final int[] t = array4[i].T;\n+            for (int length3 = t.length, l = 0; l < length3; ++l) {\n+                switch ((char)t[l]) {\n                     case 'B':\n                     case 'C':\n                     case 'I':\n                     case 'S':\n                     case 'Z': {\n-                        ++ICount;\n+                        ++n2;\n                         break;\n                     }\n                     case 'D': {\n-                        ++DCount;\n+                        ++n3;\n                         break;\n                     }\n                     case 'F': {\n-                        ++FCount;\n+                        ++n4;\n                         break;\n                     }\n                     case 'J': {\n-                        ++JCount;\n+                        ++n5;\n                         break;\n                     }\n                     case 'c': {\n-                        ++cCount;\n+                        ++n6;\n                         break;\n                     }\n                     case 'e': {\n-                        ++eCount;\n+                        ++n7;\n                         break;\n                     }\n                     case 's': {\n-                        ++sCount;\n+                        ++n8;\n                         break;\n                     }\n                     case '[': {\n-                        ++arrayCount;\n+                        ++n9;\n                         break;\n                     }\n                     case '@': {\n-                        ++atCount;\n+                        ++n10;\n                         break;\n                     }\n                 }\n             }\n-            mbg[i].caseI_KI = this.parseCPIntReferences(contextName + \"_\" + rxa + \"_caseI_KI\", in, Codec.UNSIGNED5, ICount);\n-            mbg[i].caseD_KD = this.parseCPDoubleReferences(contextName + \"_\" + rxa + \"_caseD_KD\", in, Codec.UNSIGNED5, DCount);\n-            mbg[i].caseF_KF = this.parseCPFloatReferences(contextName + \"_\" + rxa + \"_caseF_KF\", in, Codec.UNSIGNED5, FCount);\n-            mbg[i].caseJ_KJ = this.parseCPLongReferences(contextName + \"_\" + rxa + \"_caseJ_KJ\", in, Codec.UNSIGNED5, JCount);\n-            mbg[i].casec_RS = this.parseCPSignatureReferences(contextName + \"_\" + rxa + \"_casec_RS\", in, Codec.UNSIGNED5, cCount);\n-            mbg[i].caseet_RS = this.parseReferences(contextName + \"_\" + rxa + \"_caseet_RS\", in, Codec.UNSIGNED5, eCount, this.cpBands.getCpSignature());\n-            mbg[i].caseec_RU = this.parseReferences(contextName + \"_\" + rxa + \"_caseec_RU\", in, Codec.UNSIGNED5, eCount, this.cpBands.getCpUTF8());\n-            mbg[i].cases_RU = this.parseCPUTF8References(contextName + \"_\" + rxa + \"_cases_RU\", in, Codec.UNSIGNED5, sCount);\n-            mbg[i].casearray_N = this.decodeBandInt(contextName + \"_\" + rxa + \"_casearray_N\", in, Codec.UNSIGNED5, arrayCount);\n-            mbg[i].nesttype_RS = this.parseCPUTF8References(contextName + \"_\" + rxa + \"_nesttype_RS\", in, Codec.UNSIGNED5, atCount);\n-            mbg[i].nestpair_N = this.decodeBandInt(contextName + \"_\" + rxa + \"_nestpair_N\", in, Codec.UNSIGNED5, atCount);\n-            int nestPairCount = 0;\n-            for (final int element4 : mbg[i].nestpair_N) {\n-                nestPairCount += element4;\n-            }\n-            mbg[i].nestname_RU = this.parseCPUTF8References(contextName + \"_\" + rxa + \"_nestname_RU\", in, Codec.UNSIGNED5, nestPairCount);\n-        }\n-        return mbg;\n-    }\n-    \n-    private void parseMethodAttrBands(final InputStream in) throws IOException, Pack200Exception {\n-        this.methodFlags = this.parseFlags(\"method_flags\", in, this.classMethodCount, Codec.UNSIGNED5, this.options.hasMethodFlagsHi());\n-        final int methodAttrCount = SegmentUtils.countBit16(this.methodFlags);\n-        final int[] methodAttrCounts = this.decodeBandInt(\"method_attr_count\", in, Codec.UNSIGNED5, methodAttrCount);\n-        final int[][] methodAttrIndexes = this.decodeBandInt(\"method_attr_indexes\", in, Codec.UNSIGNED5, methodAttrCounts);\n-        final int callCount = this.getCallCount(methodAttrIndexes, this.methodFlags, 2);\n-        this.methodAttrCalls = this.decodeBandInt(\"method_attr_calls\", in, Codec.UNSIGNED5, callCount);\n+            array4[i].caseI_KI = this.parseCPIntReferences(s + \"_\" + s2 + \"_caseI_KI\", inputStream, Codec.UNSIGNED5, n2);\n+            array4[i].caseD_KD = this.parseCPDoubleReferences(s + \"_\" + s2 + \"_caseD_KD\", inputStream, Codec.UNSIGNED5, n3);\n+            array4[i].caseF_KF = this.parseCPFloatReferences(s + \"_\" + s2 + \"_caseF_KF\", inputStream, Codec.UNSIGNED5, n4);\n+            array4[i].caseJ_KJ = this.parseCPLongReferences(s + \"_\" + s2 + \"_caseJ_KJ\", inputStream, Codec.UNSIGNED5, n5);\n+            array4[i].casec_RS = this.parseCPSignatureReferences(s + \"_\" + s2 + \"_casec_RS\", inputStream, Codec.UNSIGNED5, n6);\n+            array4[i].caseet_RS = this.parseReferences(s + \"_\" + s2 + \"_caseet_RS\", inputStream, Codec.UNSIGNED5, n7, this.cpBands.getCpSignature());\n+            array4[i].caseec_RU = this.parseReferences(s + \"_\" + s2 + \"_caseec_RU\", inputStream, Codec.UNSIGNED5, n7, this.cpBands.getCpUTF8());\n+            array4[i].cases_RU = this.parseCPUTF8References(s + \"_\" + s2 + \"_cases_RU\", inputStream, Codec.UNSIGNED5, n8);\n+            array4[i].casearray_N = this.decodeBandInt(s + \"_\" + s2 + \"_casearray_N\", inputStream, Codec.UNSIGNED5, n9);\n+            array4[i].nesttype_RS = this.parseCPUTF8References(s + \"_\" + s2 + \"_nesttype_RS\", inputStream, Codec.UNSIGNED5, n10);\n+            array4[i].nestpair_N = this.decodeBandInt(s + \"_\" + s2 + \"_nestpair_N\", inputStream, Codec.UNSIGNED5, n10);\n+            int n11 = 0;\n+            final int[] nestpair_N = array4[i].nestpair_N;\n+            for (int length4 = nestpair_N.length, n12 = 0; n12 < length4; ++n12) {\n+                n11 += nestpair_N[n12];\n+            }\n+            array4[i].nestname_RU = this.parseCPUTF8References(s + \"_\" + s2 + \"_nestname_RU\", inputStream, Codec.UNSIGNED5, n11);\n+        }\n+        return array4;\n+    }\n+    \n+    private void parseMethodAttrBands(final InputStream inputStream) throws IOException, Pack200Exception {\n+        this.methodFlags = this.parseFlags(\"method_flags\", inputStream, this.classMethodCount, Codec.UNSIGNED5, this.options.hasMethodFlagsHi());\n+        this.methodAttrCalls = this.decodeBandInt(\"method_attr_calls\", inputStream, Codec.UNSIGNED5, this.getCallCount(this.decodeBandInt(\"method_attr_indexes\", inputStream, Codec.UNSIGNED5, this.decodeBandInt(\"method_attr_count\", inputStream, Codec.UNSIGNED5, SegmentUtils.countBit16(this.methodFlags))), this.methodFlags, 2));\n         this.methodAttributes = new ArrayList[this.classCount][];\n         for (int i = 0; i < this.classCount; ++i) {\n             this.methodAttributes[i] = new ArrayList[this.methodFlags[i].length];\n             for (int j = 0; j < this.methodFlags[i].length; ++j) {\n                 this.methodAttributes[i][j] = new ArrayList<Attribute>();\n             }\n         }\n-        final AttributeLayout methodExceptionsLayout = this.attrMap.getAttributeLayout(\"Exceptions\", 2);\n-        final int count = SegmentUtils.countMatches(this.methodFlags, (IMatcher)methodExceptionsLayout);\n-        final int[] numExceptions = this.decodeBandInt(\"method_Exceptions_n\", in, Codec.UNSIGNED5, count);\n-        final int[][] methodExceptionsRS = this.decodeBandInt(\"method_Exceptions_RC\", in, Codec.UNSIGNED5, numExceptions);\n-        final AttributeLayout methodSignatureLayout = this.attrMap.getAttributeLayout(\"Signature\", 2);\n-        final int count2 = SegmentUtils.countMatches(this.methodFlags, (IMatcher)methodSignatureLayout);\n-        final int[] methodSignatureRS = this.decodeBandInt(\"method_signature_RS\", in, Codec.UNSIGNED5, count2);\n-        final AttributeLayout deprecatedLayout = this.attrMap.getAttributeLayout(\"Deprecated\", 2);\n-        int methodExceptionsIndex = 0;\n-        int methodSignatureIndex = 0;\n+        final AttributeLayout attributeLayout = this.attrMap.getAttributeLayout(\"Exceptions\", 2);\n+        final int[] decodeBandInt = this.decodeBandInt(\"method_Exceptions_n\", inputStream, Codec.UNSIGNED5, SegmentUtils.countMatches(this.methodFlags, (IMatcher)attributeLayout));\n+        final int[][] decodeBandInt2 = this.decodeBandInt(\"method_Exceptions_RC\", inputStream, Codec.UNSIGNED5, decodeBandInt);\n+        final AttributeLayout attributeLayout2 = this.attrMap.getAttributeLayout(\"Signature\", 2);\n+        final int[] decodeBandInt3 = this.decodeBandInt(\"method_signature_RS\", inputStream, Codec.UNSIGNED5, SegmentUtils.countMatches(this.methodFlags, (IMatcher)attributeLayout2));\n+        final AttributeLayout attributeLayout3 = this.attrMap.getAttributeLayout(\"Deprecated\", 2);\n+        int n = 0;\n+        int n2 = 0;\n         for (int k = 0; k < this.methodAttributes.length; ++k) {\n             for (int l = 0; l < this.methodAttributes[k].length; ++l) {\n-                final long flag = this.methodFlags[k][l];\n-                if (methodExceptionsLayout.matches(flag)) {\n-                    final int n = numExceptions[methodExceptionsIndex];\n-                    final int[] exceptions = methodExceptionsRS[methodExceptionsIndex];\n-                    final CPClass[] exceptionClasses = new CPClass[n];\n-                    for (int m = 0; m < n; ++m) {\n-                        exceptionClasses[m] = this.cpBands.cpClassValue(exceptions[m]);\n-                    }\n-                    this.methodAttributes[k][l].add((Attribute)new ExceptionsAttribute(exceptionClasses));\n-                    ++methodExceptionsIndex;\n-                }\n-                if (methodSignatureLayout.matches(flag)) {\n-                    final long result = (long)methodSignatureRS[methodSignatureIndex];\n-                    final String desc = this.methodDescr[k][l];\n-                    final int colon = desc.indexOf(58);\n-                    String type = desc.substring(colon + 1);\n-                    if (type.equals(\"B\") || type.equals(\"H\")) {\n-                        type = \"I\";\n-                    }\n-                    final CPUTF8 value = (CPUTF8)methodSignatureLayout.getValue(result, type, this.cpBands.getConstantPool());\n-                    this.methodAttributes[k][l].add((Attribute)new SignatureAttribute(value));\n-                    ++methodSignatureIndex;\n+                final long n3 = this.methodFlags[k][l];\n+                if (attributeLayout.matches(n3)) {\n+                    final int n4 = decodeBandInt[n];\n+                    final int[] array = decodeBandInt2[n];\n+                    final CPClass[] array2 = new CPClass[n4];\n+                    for (int n5 = 0; n5 < n4; ++n5) {\n+                        array2[n5] = this.cpBands.cpClassValue(array[n5]);\n+                    }\n+                    this.methodAttributes[k][l].add((Attribute)new ExceptionsAttribute(array2));\n+                    ++n;\n+                }\n+                if (attributeLayout2.matches(n3)) {\n+                    final long n6 = (long)decodeBandInt3[n2];\n+                    final String s = this.methodDescr[k][l];\n+                    String substring = s.substring(s.indexOf(58) + 1);\n+                    if (substring.equals(\"B\") || substring.equals(\"H\")) {\n+                        substring = \"I\";\n+                    }\n+                    this.methodAttributes[k][l].add((Attribute)new SignatureAttribute((CPUTF8)attributeLayout2.getValue(n6, substring, this.cpBands.getConstantPool())));\n+                    ++n2;\n                 }\n-                if (deprecatedLayout.matches(flag)) {\n+                if (attributeLayout3.matches(n3)) {\n                     this.methodAttributes[k][l].add((Attribute)new DeprecatedAttribute());\n                 }\n             }\n         }\n-        int backwardsCallIndex = this.parseMethodMetadataBands(in, this.methodAttrCalls);\n-        final int limit = this.options.hasMethodFlagsHi() ? 62 : 31;\n-        final AttributeLayout[] otherLayouts = new AttributeLayout[limit + 1];\n-        final int[] counts = new int[limit + 1];\n-        for (int i2 = 0; i2 < limit; ++i2) {\n-            final AttributeLayout layout = this.attrMap.getAttributeLayout(i2, 2);\n-            if (layout != null && !layout.isDefaultLayout()) {\n-                otherLayouts[i2] = layout;\n-                counts[i2] = SegmentUtils.countMatches(this.methodFlags, (IMatcher)layout);\n-            }\n-        }\n-        final List<Attribute>[] otherAttributes = new List[limit + 1];\n-        for (int i3 = 0; i3 < counts.length; ++i3) {\n-            if (counts[i3] > 0) {\n-                final NewAttributeBands bands = this.attrMap.getAttributeBands(otherLayouts[i3]);\n-                otherAttributes[i3] = bands.parseAttributes(in, counts[i3]);\n-                final int numBackwardsCallables = otherLayouts[i3].numBackwardsCallables();\n+        int methodMetadataBands = this.parseMethodMetadataBands(inputStream, this.methodAttrCalls);\n+        final int n7 = this.options.hasMethodFlagsHi() ? 62 : 31;\n+        final AttributeLayout[] array3 = new AttributeLayout[n7 + 1];\n+        final int[] array4 = new int[n7 + 1];\n+        for (int n8 = 0; n8 < n7; ++n8) {\n+            final AttributeLayout attributeLayout4 = this.attrMap.getAttributeLayout(n8, 2);\n+            if (attributeLayout4 != null && !attributeLayout4.isDefaultLayout()) {\n+                array3[n8] = attributeLayout4;\n+                array4[n8] = SegmentUtils.countMatches(this.methodFlags, (IMatcher)attributeLayout4);\n+            }\n+        }\n+        final List[] array5 = new List[n7 + 1];\n+        for (int n9 = 0; n9 < array4.length; ++n9) {\n+            if (array4[n9] > 0) {\n+                final NewAttributeBands attributeBands = this.attrMap.getAttributeBands(array3[n9]);\n+                array5[n9] = attributeBands.parseAttributes(inputStream, array4[n9]);\n+                final int numBackwardsCallables = array3[n9].numBackwardsCallables();\n                 if (numBackwardsCallables > 0) {\n                     final int[] backwardsCalls = new int[numBackwardsCallables];\n-                    System.arraycopy(this.methodAttrCalls, backwardsCallIndex, backwardsCalls, 0, numBackwardsCallables);\n-                    bands.setBackwardsCalls(backwardsCalls);\n-                    backwardsCallIndex += numBackwardsCallables;\n+                    System.arraycopy(this.methodAttrCalls, methodMetadataBands, backwardsCalls, 0, numBackwardsCallables);\n+                    attributeBands.setBackwardsCalls(backwardsCalls);\n+                    methodMetadataBands += numBackwardsCallables;\n                 }\n             }\n         }\n-        for (int i3 = 0; i3 < this.methodAttributes.length; ++i3) {\n-            for (int j2 = 0; j2 < this.methodAttributes[i3].length; ++j2) {\n-                final long flag2 = this.methodFlags[i3][j2];\n-                int othersAddedAtStart = 0;\n-                for (int k2 = 0; k2 < otherLayouts.length; ++k2) {\n-                    if (otherLayouts[k2] != null && otherLayouts[k2].matches(flag2)) {\n-                        if (otherLayouts[k2].getIndex() < 15) {\n-                            this.methodAttributes[i3][j2].add(othersAddedAtStart++, otherAttributes[k2].get(0));\n+        for (int n10 = 0; n10 < this.methodAttributes.length; ++n10) {\n+            for (int n11 = 0; n11 < this.methodAttributes[n10].length; ++n11) {\n+                final long n12 = this.methodFlags[n10][n11];\n+                int n13 = 0;\n+                for (int n14 = 0; n14 < array3.length; ++n14) {\n+                    if (array3[n14] != null && array3[n14].matches(n12)) {\n+                        if (array3[n14].getIndex() < 15) {\n+                            this.methodAttributes[n10][n11].add(n13++, (Attribute)array5[n14].get(0));\n                         }\n                         else {\n-                            this.methodAttributes[i3][j2].add(otherAttributes[k2].get(0));\n+                            this.methodAttributes[n10][n11].add((Attribute)array5[n14].get(0));\n                         }\n-                        otherAttributes[k2].remove(0);\n+                        array5[n14].remove(0);\n                     }\n                 }\n             }\n         }\n     }\n     \n-    private void parseMethodBands(final InputStream in) throws IOException, Pack200Exception {\n-        this.methodDescrInts = this.decodeBandInt(\"method_descr\", in, Codec.MDELTA5, this.classMethodCount);\n+    private void parseMethodBands(final InputStream inputStream) throws IOException, Pack200Exception {\n+        this.methodDescrInts = this.decodeBandInt(\"method_descr\", inputStream, Codec.MDELTA5, this.classMethodCount);\n         this.methodDescr = this.getReferences(this.methodDescrInts, this.cpBands.getCpDescriptor());\n-        this.parseMethodAttrBands(in);\n+        this.parseMethodAttrBands(inputStream);\n     }\n     \n-    private int parseMethodMetadataBands(final InputStream in, final int[] methodAttrCalls) throws Pack200Exception, IOException {\n-        int backwardsCallsUsed = 0;\n-        final String[] RxA = { \"RVA\", \"RIA\", \"RVPA\", \"RIPA\", \"AD\" };\n-        final int[] rxaCounts = { 0, 0, 0, 0, 0 };\n-        final AttributeLayout rvaLayout = this.attrMap.getAttributeLayout(\"RuntimeVisibleAnnotations\", 2);\n-        final AttributeLayout riaLayout = this.attrMap.getAttributeLayout(\"RuntimeInvisibleAnnotations\", 2);\n-        final AttributeLayout rvpaLayout = this.attrMap.getAttributeLayout(\"RuntimeVisibleParameterAnnotations\", 2);\n-        final AttributeLayout ripaLayout = this.attrMap.getAttributeLayout(\"RuntimeInvisibleParameterAnnotations\", 2);\n-        final AttributeLayout adLayout = this.attrMap.getAttributeLayout(\"AnnotationDefault\", 2);\n-        final AttributeLayout[] rxaLayouts = { rvaLayout, riaLayout, rvpaLayout, ripaLayout, adLayout };\n-        int i = 0;\n-        Arrays.setAll(rxaCounts, i -> SegmentUtils.countMatches(this.methodFlags, (IMatcher)rxaLayouts[i]));\n-        final int[] backwardsCalls = new int[5];\n-        int methodAttrIndex = 0;\n-        for (i = 0; i < backwardsCalls.length; ++i) {\n-            if (rxaCounts[i] > 0) {\n-                ++backwardsCallsUsed;\n-                backwardsCalls[i] = methodAttrCalls[methodAttrIndex];\n-                ++methodAttrIndex;\n+    private int parseMethodMetadataBands(final InputStream inputStream, final int[] array) throws Pack200Exception, IOException {\n+        int n = 0;\n+        final String[] array2 = { \"RVA\", \"RIA\", \"RVPA\", \"RIPA\", \"AD\" };\n+        final int[] array3 = { 0, 0, 0, 0, 0 };\n+        final AttributeLayout[] array4 = { this.attrMap.getAttributeLayout(\"RuntimeVisibleAnnotations\", 2), this.attrMap.getAttributeLayout(\"RuntimeInvisibleAnnotations\", 2), this.attrMap.getAttributeLayout(\"RuntimeVisibleParameterAnnotations\", 2), this.attrMap.getAttributeLayout(\"RuntimeInvisibleParameterAnnotations\", 2), this.attrMap.getAttributeLayout(\"AnnotationDefault\", 2) };\n+        Arrays.setAll(array3, n5 -> SegmentUtils.countMatches(this.methodFlags, (IMatcher)array8[n5]));\n+        final int[] array5 = new int[5];\n+        int n2 = 0;\n+        for (int i = 0; i < array5.length; ++i) {\n+            if (array3[i] > 0) {\n+                ++n;\n+                array5[i] = array[n2];\n+                ++n2;\n             }\n             else {\n-                backwardsCalls[i] = 0;\n+                array5[i] = 0;\n             }\n         }\n-        final MetadataBandGroup[] mbgs = this.parseMetadata(in, RxA, rxaCounts, backwardsCalls, \"method\");\n-        final List<Attribute>[] attributeLists = new List[RxA.length];\n-        final int[] attributeListIndexes = new int[RxA.length];\n-        for (int j = 0; j < mbgs.length; ++j) {\n-            attributeLists[j] = mbgs[j].getAttributes();\n-            attributeListIndexes[j] = 0;\n+        final MetadataBandGroup[] metadata = this.parseMetadata(inputStream, array2, array3, array5, \"method\");\n+        final List[] array6 = new List[array2.length];\n+        final int[] array7 = new int[array2.length];\n+        for (int j = 0; j < metadata.length; ++j) {\n+            array6[j] = metadata[j].getAttributes();\n+            array7[j] = 0;\n         }\n-        for (int j = 0; j < this.methodFlags.length; ++j) {\n-            for (int k = 0; k < this.methodFlags[j].length; ++k) {\n-                for (int l = 0; l < rxaLayouts.length; ++l) {\n-                    if (rxaLayouts[l].matches(this.methodFlags[j][k])) {\n-                        this.methodAttributes[j][k].add(attributeLists[l].get(attributeListIndexes[l]++));\n+        for (int k = 0; k < this.methodFlags.length; ++k) {\n+            for (int l = 0; l < this.methodFlags[k].length; ++l) {\n+                for (int n3 = 0; n3 < array4.length; ++n3) {\n+                    if (array4[n3].matches(this.methodFlags[k][l])) {\n+                        this.methodAttributes[k][l].add((Attribute)array6[n3].get(array7[n3]++));\n                     }\n                 }\n             }\n         }\n-        return backwardsCallsUsed;\n+        return n;\n     }\n     \n-    public void read(final InputStream in) throws IOException, Pack200Exception {\n+    public void read(final InputStream inputStream) throws IOException, Pack200Exception {\n         final int classCount = this.header.getClassCount();\n-        this.classThisInts = this.decodeBandInt(\"class_this\", in, Codec.DELTA5, classCount);\n+        this.classThisInts = this.decodeBandInt(\"class_this\", inputStream, Codec.DELTA5, classCount);\n         this.classThis = this.getReferences(this.classThisInts, this.cpBands.getCpClass());\n-        this.classSuperInts = this.decodeBandInt(\"class_super\", in, Codec.DELTA5, classCount);\n-        final int[] classInterfaceLengths = this.decodeBandInt(\"class_interface_count\", in, Codec.DELTA5, classCount);\n-        this.classInterfacesInts = this.decodeBandInt(\"class_interface\", in, Codec.DELTA5, classInterfaceLengths);\n-        this.classFieldCount = this.decodeBandInt(\"class_field_count\", in, Codec.DELTA5, classCount);\n-        this.classMethodCount = this.decodeBandInt(\"class_method_count\", in, Codec.DELTA5, classCount);\n-        this.parseFieldBands(in);\n-        this.parseMethodBands(in);\n-        this.parseClassAttrBands(in);\n-        this.parseCodeBands(in);\n+        this.classSuperInts = this.decodeBandInt(\"class_super\", inputStream, Codec.DELTA5, classCount);\n+        this.classInterfacesInts = this.decodeBandInt(\"class_interface\", inputStream, Codec.DELTA5, this.decodeBandInt(\"class_interface_count\", inputStream, Codec.DELTA5, classCount));\n+        this.classFieldCount = this.decodeBandInt(\"class_field_count\", inputStream, Codec.DELTA5, classCount);\n+        this.classMethodCount = this.decodeBandInt(\"class_method_count\", inputStream, Codec.DELTA5, classCount);\n+        this.parseFieldBands(inputStream);\n+        this.parseMethodBands(inputStream);\n+        this.parseClassAttrBands(inputStream);\n+        this.parseCodeBands(inputStream);\n     }\n     \n     public void unpack() {\n     }\n }\n"}]}
