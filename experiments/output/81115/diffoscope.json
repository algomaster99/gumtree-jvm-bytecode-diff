{"diffoscope-json-version": 1, "source1": "first/Blake3$EngineState.class", "source2": "second/Blake3$EngineState.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,53 +11,53 @@\n     private int stackLen;\n     private Blake3.ChunkState state;\n     \n     private EngineState(final int[] key, final int flags) {\n         this.cvStack = new int[54][];\n         this.key = key;\n         this.flags = flags;\n-        this.state = new Blake3.ChunkState(key, 0L, flags, (Blake3.Blake3$1)null);\n+        this.state = new Blake3.ChunkState(key, 0L, flags, (Blake3.ChunkState)null);\n     }\n     \n     private void inputData(final byte[] in, int offset, int length) {\n         while (length > 0) {\n-            if (Blake3.ChunkState.access$1000(this.state) == 1024) {\n-                final int[] chunkCV = Blake3.Output.access$500(Blake3.ChunkState.access$1100(this.state));\n-                final long totalChunks = Blake3.ChunkState.access$1200(this.state) + 1L;\n+            if (Blake3.ChunkState.access$1(this.state) == 1024) {\n+                final int[] chunkCV = Blake3.Output.access$1(Blake3.ChunkState.access$2(this.state));\n+                final long totalChunks = Blake3.ChunkState.access$3(this.state) + 1L;\n                 this.addChunkCV(chunkCV, totalChunks);\n-                this.state = new Blake3.ChunkState(this.key, totalChunks, this.flags, (Blake3.Blake3$1)null);\n+                this.state = new Blake3.ChunkState(this.key, totalChunks, this.flags, (Blake3.ChunkState)null);\n             }\n-            final int want = 1024 - Blake3.ChunkState.access$1000(this.state);\n+            final int want = 1024 - Blake3.ChunkState.access$1(this.state);\n             final int take = Math.min(want, length);\n-            Blake3.ChunkState.access$1300(this.state, in, offset, take);\n+            Blake3.ChunkState.access$4(this.state, in, offset, take);\n             offset += take;\n             length -= take;\n         }\n     }\n     \n     private void outputHash(final byte[] out, final int offset, final int length) {\n-        Blake3.Output output = Blake3.ChunkState.access$1100(this.state);\n+        Blake3.Output output = Blake3.ChunkState.access$2(this.state);\n         int parentNodesRemaining = this.stackLen;\n         while (parentNodesRemaining-- > 0) {\n             final int[] parentCV = this.cvStack[parentNodesRemaining];\n-            output = Blake3.access$1400(parentCV, Blake3.Output.access$500(output), this.key, this.flags);\n+            output = Blake3.access$3(parentCV, Blake3.Output.access$1(output), this.key, this.flags);\n         }\n-        Blake3.Output.access$1500(output, out, offset, length);\n+        Blake3.Output.access$2(output, out, offset, length);\n     }\n     \n     private void reset() {\n         this.stackLen = 0;\n         Arrays.fill(this.cvStack, null);\n-        this.state = new Blake3.ChunkState(this.key, 0L, this.flags, (Blake3.Blake3$1)null);\n+        this.state = new Blake3.ChunkState(this.key, 0L, this.flags, (Blake3.ChunkState)null);\n     }\n     \n     private void addChunkCV(final int[] firstCV, final long totalChunks) {\n         int[] newCV = firstCV;\n         for (long chunkCounter = totalChunks; (chunkCounter & 0x1L) == 0x0L; chunkCounter >>= 1) {\n-            newCV = Blake3.access$1600(this.popCV(), newCV, this.key, this.flags);\n+            newCV = Blake3.access$4(this.popCV(), newCV, this.key, this.flags);\n         }\n         this.pushCV(newCV);\n     }\n     \n     private void pushCV(final int[] cv) {\n         this.cvStack[this.stackLen++] = cv;\n     }\n"}]}
