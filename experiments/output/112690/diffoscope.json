{"diffoscope-json-version": 1, "source1": "first/BCELFactory.class", "source2": "second/BCELFactory.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,15 +6,14 @@\n import org.apache.bcel.generic.LocalVariableInstruction;\n import org.apache.bcel.generic.LDC2_W;\n import org.apache.bcel.generic.LDC;\n import org.apache.bcel.generic.InvokeInstruction;\n import org.apache.bcel.generic.ReturnInstruction;\n import org.apache.bcel.generic.InstructionConst;\n import org.apache.bcel.generic.INSTANCEOF;\n-import org.apache.bcel.Const;\n import org.apache.bcel.generic.FieldInstruction;\n import org.apache.bcel.generic.ConstantPushInstruction;\n import org.apache.bcel.generic.CHECKCAST;\n import java.util.Locale;\n import org.apache.bcel.generic.ArrayInstruction;\n import org.apache.bcel.generic.ArrayType;\n import org.apache.bcel.generic.MULTIANEWARRAY;\n@@ -26,14 +25,15 @@\n import org.apache.bcel.generic.Select;\n import org.apache.bcel.generic.BranchHandle;\n import org.apache.bcel.generic.Visitor;\n import org.apache.bcel.generic.ObjectType;\n import org.apache.bcel.classfile.Utility;\n import java.util.ArrayList;\n import java.util.HashMap;\n+import org.apache.bcel.Const;\n import org.apache.bcel.generic.BranchInstruction;\n import java.util.List;\n import org.apache.bcel.generic.InstructionHandle;\n import org.apache.bcel.generic.Instruction;\n import java.util.Map;\n import org.apache.bcel.generic.ConstantPoolGen;\n import java.io.PrintWriter;\n@@ -45,35 +45,39 @@\n     private static final String CONSTANT_PREFIX;\n     private final MethodGen methodGen;\n     private final PrintWriter printWriter;\n     private final ConstantPoolGen constantPoolGen;\n     private final Map<Instruction, InstructionHandle> branchMap;\n     private final List<BranchInstruction> branches;\n     \n+    static {\n+        CONSTANT_PREFIX = String.valueOf(Const.class.getSimpleName()) + \".\";\n+    }\n+    \n     BCELFactory(final MethodGen mg, final PrintWriter out) {\n         this.branchMap = new HashMap<Instruction, InstructionHandle>();\n         this.branches = new ArrayList<BranchInstruction>();\n         this.methodGen = mg;\n         this.constantPoolGen = mg.getConstantPool();\n         this.printWriter = out;\n     }\n     \n     private void createConstant(final Object value) {\n         String embed = value.toString();\n         if (value instanceof String) {\n-            embed = '\\\"' + Utility.convertString(embed) + '\\\"';\n+            embed = String.valueOf('\\\"') + Utility.convertString(embed) + '\\\"';\n         }\n         else if (value instanceof Character) {\n             embed = \"(char)0x\" + Integer.toHexString((int)value);\n         }\n         else if (value instanceof Float) {\n-            embed += \"f\";\n+            embed = String.valueOf(embed) + \"f\";\n         }\n         else if (value instanceof Long) {\n-            embed += \"L\";\n+            embed = String.valueOf(embed) + \"L\";\n         }\n         else if (value instanceof ObjectType) {\n             final ObjectType ot = (ObjectType)value;\n             embed = \"new ObjectType(\\\"\" + ot.getClassName() + \"\\\")\";\n         }\n         this.printWriter.println(\"il.append(new PUSH(_cp, \" + embed + \"));\");\n     }\n@@ -105,33 +109,34 @@\n         }\n     }\n     \n     private void updateBranchTargets() {\n         this.branches.forEach(bi -> {\n             final BranchHandle bh = (BranchHandle)this.branchMap.get(bi);\n             final int pos = bh.getPosition();\n-            final String name = bi.getName() + \"_\" + pos;\n+            final String name = String.valueOf(bi.getName()) + \"_\" + pos;\n             final int targetPos = bh.getTarget().getPosition();\n             this.printWriter.println(\"    \" + name + \".setTarget(ih_\" + targetPos + \");\");\n             if (bi instanceof Select) {\n                 final InstructionHandle[] ihs = ((Select)bi).getTargets();\n                 for (int j = 0; j < ihs.length; ++j) {\n                     final int targetPos2 = ihs[j].getPosition();\n                     this.printWriter.println(\"    \" + name + \".setTarget(\" + j + \", ih_\" + targetPos2 + \");\");\n                 }\n             }\n         });\n     }\n     \n     private void updateExceptionHandlers() {\n-        final CodeExceptionGen[] exceptionHandlers;\n-        final CodeExceptionGen[] handlers = exceptionHandlers = this.methodGen.getExceptionHandlers();\n-        for (final CodeExceptionGen h : exceptionHandlers) {\n+        final CodeExceptionGen[] handlers = this.methodGen.getExceptionHandlers();\n+        CodeExceptionGen[] array;\n+        for (int length = (array = handlers).length, i = 0; i < length; ++i) {\n+            final CodeExceptionGen h = array[i];\n             final String type = (h.getCatchType() == null) ? \"null\" : BCELifier.printType((Type)h.getCatchType());\n-            this.printWriter.println(\"    method.addExceptionHandler(ih_\" + h.getStartPC().getPosition() + \", ih_\" + h.getEndPC().getPosition() + \", ih_\" + h.getHandlerPC().getPosition() + \", \" + type + \");\");\n+            this.printWriter.println(\"    method.addExceptionHandler(ih_\" + h.getStartPC().getPosition() + \", \" + \"ih_\" + h.getEndPC().getPosition() + \", \" + \"ih_\" + h.getHandlerPC().getPosition() + \", \" + type + \");\");\n         }\n     }\n     \n     public void visitAllocationInstruction(final AllocationInstruction i) {\n         Type type;\n         if (i instanceof CPInstruction) {\n             type = ((CPInstruction)i).getType(this.constantPoolGen);\n@@ -169,15 +174,15 @@\n         final String kind = (opcode < 79) ? \"Load\" : \"Store\";\n         this.printWriter.println(\"il.append(_factory.createArray\" + kind + \"(\" + BCELifier.printType(type) + \"));\");\n     }\n     \n     public void visitBranchInstruction(final BranchInstruction bi) {\n         final BranchHandle bh = (BranchHandle)this.branchMap.get(bi);\n         final int pos = bh.getPosition();\n-        final String name = bi.getName() + \"_\" + pos;\n+        final String name = String.valueOf(bi.getName()) + \"_\" + pos;\n         if (bi instanceof Select) {\n             final Select s = (Select)bi;\n             this.branches.add(bi);\n             final StringBuilder args = new StringBuilder(\"new int[] { \");\n             final int[] matchs = s.getMatchs();\n             for (int i = 0; i < matchs.length; ++i) {\n                 args.append(matchs[i]);\n@@ -279,12 +284,8 @@\n         this.printWriter.println(\"il.append(new RET(\" + i.getIndex() + \")));\");\n     }\n     \n     public void visitReturnInstruction(final ReturnInstruction i) {\n         final Type type = i.getType(this.constantPoolGen);\n         this.printWriter.println(\"il.append(_factory.createReturn(\" + BCELifier.printType(type) + \"));\");\n     }\n-    \n-    static {\n-        CONSTANT_PREFIX = Const.class.getSimpleName() + \".\";\n-    }\n }\n"}]}
