{"diffoscope-json-version": 1, "source1": "first/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator.class", "source2": "second/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,142 +1,142 @@\n-  SHA-256 checksum 05093cb07031a701d3f96f59d5be2bc3ec9ef11ea28ff6178cd9dbbbc525b2fd\n+  SHA-256 checksum 5b5b18670ad44a6a4984762c716972ba7b6f8aa703ac6d46aabfcfa287c56866\n   Compiled from \"ZipSplitReadOnlySeekableByteChannel.java\"\n class org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator extends java.lang.Object implements java.util.Comparator<java.nio.file.Path>, java.io.Serializable\n   minor version: 0\n   major version: 52\n   flags: (0x0020) ACC_SUPER\n-  this_class: #12                         // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator\n-  super_class: #13                        // java/lang/Object\n+  this_class: #2                          // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator\n+  super_class: #8                         // java/lang/Object\n   interfaces: 2, fields: 1, methods: 4, attributes: 3\n Constant pool:\n-   #1 = Methodref          #12.#37        // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator.\"<init>\":()V\n-   #2 = Methodref          #13.#37        // java/lang/Object.\"<init>\":()V\n-   #3 = Methodref          #38.#39        // org/apache/commons/compress/utils/FileNameUtils.getExtension:(Ljava/nio/file/Path;)Ljava/lang/String;\n-   #4 = String             #40            // z\n-   #5 = Methodref          #28.#41        // java/lang/String.startsWith:(Ljava/lang/String;)Z\n-   #6 = Methodref          #28.#42        // java/lang/String.substring:(I)Ljava/lang/String;\n-   #7 = Methodref          #43.#44        // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n-   #8 = Methodref          #43.#45        // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #9 = Methodref          #43.#46        // java/lang/Integer.compareTo:(Ljava/lang/Integer;)I\n-  #10 = Class              #47            // java/nio/file/Path\n-  #11 = Methodref          #12.#48        // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator.compare:(Ljava/nio/file/Path;Ljava/nio/file/Path;)I\n-  #12 = Class              #50            // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator\n-  #13 = Class              #52            // java/lang/Object\n-  #14 = Class              #53            // java/util/Comparator\n-  #15 = Class              #54            // java/io/Serializable\n-  #16 = Utf8               serialVersionUID\n-  #17 = Utf8               J\n-  #18 = Utf8               ConstantValue\n-  #19 = Long               20200123l\n-  #21 = Utf8               <init>\n-  #22 = Utf8               ()V\n-  #23 = Utf8               Code\n-  #24 = Utf8               LineNumberTable\n-  #25 = Utf8               compare\n-  #26 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/Path;)I\n-  #27 = Utf8               StackMapTable\n-  #28 = Class              #55            // java/lang/String\n-  #29 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)I\n-  #30 = Class              #56            // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$1\n-  #31 = Utf8               InnerClasses\n-  #32 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$1;)V\n-  #33 = Utf8               Signature\n-  #34 = Utf8               Ljava/lang/Object;Ljava/util/Comparator<Ljava/nio/file/Path;>;Ljava/io/Serializable;\n-  #35 = Utf8               SourceFile\n-  #36 = Utf8               ZipSplitReadOnlySeekableByteChannel.java\n-  #37 = NameAndType        #21:#22        // \"<init>\":()V\n-  #38 = Class              #57            // org/apache/commons/compress/utils/FileNameUtils\n-  #39 = NameAndType        #58:#59        // getExtension:(Ljava/nio/file/Path;)Ljava/lang/String;\n-  #40 = Utf8               z\n-  #41 = NameAndType        #60:#61        // startsWith:(Ljava/lang/String;)Z\n-  #42 = NameAndType        #62:#63        // substring:(I)Ljava/lang/String;\n-  #43 = Class              #64            // java/lang/Integer\n-  #44 = NameAndType        #65:#66        // parseInt:(Ljava/lang/String;)I\n-  #45 = NameAndType        #67:#68        // valueOf:(I)Ljava/lang/Integer;\n-  #46 = NameAndType        #69:#70        // compareTo:(Ljava/lang/Integer;)I\n-  #47 = Utf8               java/nio/file/Path\n-  #48 = NameAndType        #25:#26        // compare:(Ljava/nio/file/Path;Ljava/nio/file/Path;)I\n-  #49 = Class              #71            // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n-  #50 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator\n-  #51 = Utf8               ZipSplitSegmentComparator\n-  #52 = Utf8               java/lang/Object\n-  #53 = Utf8               java/util/Comparator\n-  #54 = Utf8               java/io/Serializable\n-  #55 = Utf8               java/lang/String\n-  #56 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$1\n-  #57 = Utf8               org/apache/commons/compress/utils/FileNameUtils\n-  #58 = Utf8               getExtension\n-  #59 = Utf8               (Ljava/nio/file/Path;)Ljava/lang/String;\n-  #60 = Utf8               startsWith\n-  #61 = Utf8               (Ljava/lang/String;)Z\n-  #62 = Utf8               substring\n-  #63 = Utf8               (I)Ljava/lang/String;\n-  #64 = Utf8               java/lang/Integer\n-  #65 = Utf8               parseInt\n-  #66 = Utf8               (Ljava/lang/String;)I\n-  #67 = Utf8               valueOf\n-  #68 = Utf8               (I)Ljava/lang/Integer;\n-  #69 = Utf8               compareTo\n-  #70 = Utf8               (Ljava/lang/Integer;)I\n-  #71 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+   #1 = Methodref          #2.#3          // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator.\"<init>\":()V\n+   #2 = Class              #4             // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator\n+   #3 = NameAndType        #5:#6          // \"<init>\":()V\n+   #4 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator\n+   #5 = Utf8               <init>\n+   #6 = Utf8               ()V\n+   #7 = Methodref          #8.#3          // java/lang/Object.\"<init>\":()V\n+   #8 = Class              #9             // java/lang/Object\n+   #9 = Utf8               java/lang/Object\n+  #10 = Methodref          #11.#12        // org/apache/commons/compress/utils/FileNameUtils.getExtension:(Ljava/nio/file/Path;)Ljava/lang/String;\n+  #11 = Class              #13            // org/apache/commons/compress/utils/FileNameUtils\n+  #12 = NameAndType        #14:#15        // getExtension:(Ljava/nio/file/Path;)Ljava/lang/String;\n+  #13 = Utf8               org/apache/commons/compress/utils/FileNameUtils\n+  #14 = Utf8               getExtension\n+  #15 = Utf8               (Ljava/nio/file/Path;)Ljava/lang/String;\n+  #16 = String             #17            // z\n+  #17 = Utf8               z\n+  #18 = Methodref          #19.#20        // java/lang/String.startsWith:(Ljava/lang/String;)Z\n+  #19 = Class              #21            // java/lang/String\n+  #20 = NameAndType        #22:#23        // startsWith:(Ljava/lang/String;)Z\n+  #21 = Utf8               java/lang/String\n+  #22 = Utf8               startsWith\n+  #23 = Utf8               (Ljava/lang/String;)Z\n+  #24 = Methodref          #19.#25        // java/lang/String.substring:(I)Ljava/lang/String;\n+  #25 = NameAndType        #26:#27        // substring:(I)Ljava/lang/String;\n+  #26 = Utf8               substring\n+  #27 = Utf8               (I)Ljava/lang/String;\n+  #28 = Methodref          #29.#30        // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n+  #29 = Class              #31            // java/lang/Integer\n+  #30 = NameAndType        #32:#33        // parseInt:(Ljava/lang/String;)I\n+  #31 = Utf8               java/lang/Integer\n+  #32 = Utf8               parseInt\n+  #33 = Utf8               (Ljava/lang/String;)I\n+  #34 = Methodref          #29.#35        // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+  #35 = NameAndType        #36:#37        // valueOf:(I)Ljava/lang/Integer;\n+  #36 = Utf8               valueOf\n+  #37 = Utf8               (I)Ljava/lang/Integer;\n+  #38 = Methodref          #29.#39        // java/lang/Integer.compareTo:(Ljava/lang/Integer;)I\n+  #39 = NameAndType        #40:#41        // compareTo:(Ljava/lang/Integer;)I\n+  #40 = Utf8               compareTo\n+  #41 = Utf8               (Ljava/lang/Integer;)I\n+  #42 = Class              #43            // java/nio/file/Path\n+  #43 = Utf8               java/nio/file/Path\n+  #44 = Methodref          #2.#45         // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator.compare:(Ljava/nio/file/Path;Ljava/nio/file/Path;)I\n+  #45 = NameAndType        #46:#47        // compare:(Ljava/nio/file/Path;Ljava/nio/file/Path;)I\n+  #46 = Utf8               compare\n+  #47 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/Path;)I\n+  #48 = Class              #49            // java/util/Comparator\n+  #49 = Utf8               java/util/Comparator\n+  #50 = Class              #51            // java/io/Serializable\n+  #51 = Utf8               java/io/Serializable\n+  #52 = Utf8               serialVersionUID\n+  #53 = Utf8               J\n+  #54 = Utf8               ConstantValue\n+  #55 = Long               20200123l\n+  #57 = Utf8               Code\n+  #58 = Utf8               LineNumberTable\n+  #59 = Utf8               StackMapTable\n+  #60 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)I\n+  #61 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$1;)V\n+  #62 = Utf8               Signature\n+  #63 = Utf8               Ljava/lang/Object;Ljava/util/Comparator<Ljava/nio/file/Path;>;Ljava/io/Serializable;\n+  #64 = Utf8               SourceFile\n+  #65 = Utf8               ZipSplitReadOnlySeekableByteChannel.java\n+  #66 = Utf8               InnerClasses\n+  #67 = Class              #68            // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+  #68 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+  #69 = Utf8               ZipSplitSegmentComparator\n+  #70 = Class              #71            // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$1\n+  #71 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$1\n {\n   private static final long serialVersionUID = 20200123l;\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long 20200123l\n \n   private org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator();\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokespecial #2                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #7                  // Method java/lang/Object.\"<init>\":()V\n          4: return\n       LineNumberTable:\n         line 282: 0\n \n   public int compare(java.nio.file.Path, java.nio.file.Path);\n     descriptor: (Ljava/nio/file/Path;Ljava/nio/file/Path;)I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=7, args_size=3\n          0: aload_1\n-         1: invokestatic  #3                  // Method org/apache/commons/compress/utils/FileNameUtils.getExtension:(Ljava/nio/file/Path;)Ljava/lang/String;\n+         1: invokestatic  #10                 // Method org/apache/commons/compress/utils/FileNameUtils.getExtension:(Ljava/nio/file/Path;)Ljava/lang/String;\n          4: astore_3\n          5: aload_2\n-         6: invokestatic  #3                  // Method org/apache/commons/compress/utils/FileNameUtils.getExtension:(Ljava/nio/file/Path;)Ljava/lang/String;\n+         6: invokestatic  #10                 // Method org/apache/commons/compress/utils/FileNameUtils.getExtension:(Ljava/nio/file/Path;)Ljava/lang/String;\n          9: astore        4\n         11: aload_3\n-        12: ldc           #4                  // String z\n-        14: invokevirtual #5                  // Method java/lang/String.startsWith:(Ljava/lang/String;)Z\n+        12: ldc           #16                 // String z\n+        14: invokevirtual #18                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z\n         17: ifne          22\n         20: iconst_m1\n         21: ireturn\n         22: aload         4\n-        24: ldc           #4                  // String z\n-        26: invokevirtual #5                  // Method java/lang/String.startsWith:(Ljava/lang/String;)Z\n+        24: ldc           #16                 // String z\n+        26: invokevirtual #18                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z\n         29: ifne          34\n         32: iconst_1\n         33: ireturn\n         34: aload_3\n         35: iconst_1\n-        36: invokevirtual #6                  // Method java/lang/String.substring:(I)Ljava/lang/String;\n-        39: invokestatic  #7                  // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I\n-        42: invokestatic  #8                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+        36: invokevirtual #24                 // Method java/lang/String.substring:(I)Ljava/lang/String;\n+        39: invokestatic  #28                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I\n+        42: invokestatic  #34                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n         45: astore        5\n         47: aload         4\n         49: iconst_1\n-        50: invokevirtual #6                  // Method java/lang/String.substring:(I)Ljava/lang/String;\n-        53: invokestatic  #7                  // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I\n-        56: invokestatic  #8                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+        50: invokevirtual #24                 // Method java/lang/String.substring:(I)Ljava/lang/String;\n+        53: invokestatic  #28                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I\n+        56: invokestatic  #34                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n         59: astore        6\n         61: aload         5\n         63: aload         6\n-        65: invokevirtual #9                  // Method java/lang/Integer.compareTo:(Ljava/lang/Integer;)I\n+        65: invokevirtual #38                 // Method java/lang/Integer.compareTo:(Ljava/lang/Integer;)I\n         68: ireturn\n       LineNumberTable:\n         line 287: 0\n         line 288: 5\n         line 290: 11\n         line 291: 20\n         line 294: 22\n@@ -153,18 +153,18 @@\n   public int compare(java.lang.Object, java.lang.Object);\n     descriptor: (Ljava/lang/Object;Ljava/lang/Object;)I\n     flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n-         2: checkcast     #10                 // class java/nio/file/Path\n+         2: checkcast     #42                 // class java/nio/file/Path\n          5: aload_2\n-         6: checkcast     #10                 // class java/nio/file/Path\n-         9: invokevirtual #11                 // Method compare:(Ljava/nio/file/Path;Ljava/nio/file/Path;)I\n+         6: checkcast     #42                 // class java/nio/file/Path\n+         9: invokevirtual #44                 // Method compare:(Ljava/nio/file/Path;Ljava/nio/file/Path;)I\n         12: ireturn\n       LineNumberTable:\n         line 282: 0\n \n   org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator(org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel$1);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$1;)V\n     flags: (0x1000) ACC_SYNTHETIC\n@@ -172,12 +172,12 @@\n       stack=1, locals=2, args_size=2\n          0: aload_0\n          1: invokespecial #1                  // Method \"<init>\":()V\n          4: return\n       LineNumberTable:\n         line 282: 0\n }\n-Signature: #34                          // Ljava/lang/Object;Ljava/util/Comparator<Ljava/nio/file/Path;>;Ljava/io/Serializable;\n+Signature: #63                          // Ljava/lang/Object;Ljava/util/Comparator<Ljava/nio/file/Path;>;Ljava/io/Serializable;\n SourceFile: \"ZipSplitReadOnlySeekableByteChannel.java\"\n InnerClasses:\n-  static #30;                             // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$1\n-  private static #51= #12 of #49;         // ZipSplitSegmentComparator=class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator of class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+  private static #69= #2 of #67;          // ZipSplitSegmentComparator=class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator of class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+  static #70;                             // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$1\n"}]}
