{"diffoscope-json-version": 1, "source1": "first/BinaryTree.class", "source2": "second/BinaryTree.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,47 +1,47 @@\n-  SHA-256 checksum 2bcd8f53b703f9fe374bb349d83e3b7193912ce3b646d10823349fbc1f7b634a\n+  SHA-256 checksum 07127f0ee14924e245ac20b31fe6c83fda7c7598389406caa57e76ae7c9b67a8\n   Compiled from \"BinaryTree.java\"\n class org.apache.commons.compress.archivers.zip.BinaryTree\n   minor version: 0\n   major version: 51\n   flags: (0x0020) ACC_SUPER\n   this_class: #3                          // org/apache/commons/compress/archivers/zip/BinaryTree\n   super_class: #30                        // java/lang/Object\n   interfaces: 0, fields: 3, methods: 4, attributes: 1\n Constant pool:\n-    #1 = Methodref          #30.#57       // java/lang/Object.\"<init>\":()V\n-    #2 = Fieldref           #3.#58        // org/apache/commons/compress/archivers/zip/BinaryTree.tree:[I\n-    #3 = Class              #59           // org/apache/commons/compress/archivers/zip/BinaryTree\n-    #4 = Methodref          #60.#61       // java/util/Arrays.fill:([II)V\n-    #5 = Class              #62           // java/lang/IllegalArgumentException\n-    #6 = Class              #63           // java/lang/StringBuilder\n-    #7 = Methodref          #6.#57        // java/lang/StringBuilder.\"<init>\":()V\n-    #8 = String             #64           // Tree value at index\n-    #9 = Methodref          #6.#65        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #10 = Methodref          #6.#66        // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #11 = String             #67           //  has already been assigned (\n-   #12 = String             #68           // )\n-   #13 = Methodref          #6.#69        // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #14 = Methodref          #5.#70        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #15 = Methodref          #3.#71        // org/apache/commons/compress/archivers/zip/BinaryTree.addLeaf:(IIII)V\n-   #16 = Methodref          #72.#73       // org/apache/commons/compress/archivers/zip/BitStream.nextBit:()I\n-   #17 = Class              #74           // java/io/IOException\n-   #18 = String             #75           // The child\n-   #19 = String             #76           //  of node at index\n-   #20 = String             #77           //  is not defined\n-   #21 = Methodref          #17.#70       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #22 = Methodref          #78.#79       // java/io/InputStream.read:()I\n-   #23 = String             #80           // Cannot read the size of the encoded tree, unexpected end of stream\n-   #24 = Class              #81           // java/io/DataInputStream\n-   #25 = Methodref          #24.#82       // java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #26 = Methodref          #24.#83       // java/io/DataInputStream.readFully:([B)V\n-   #27 = Methodref          #84.#85       // java/lang/Math.max:(II)I\n-   #28 = Methodref          #3.#86        // org/apache/commons/compress/archivers/zip/BinaryTree.\"<init>\":(I)V\n-   #29 = Methodref          #87.#88       // java/lang/Integer.reverse:(I)I\n-   #30 = Class              #89           // java/lang/Object\n+    #1 = Methodref          #30.#56       // java/lang/Object.\"<init>\":()V\n+    #2 = Fieldref           #3.#57        // org/apache/commons/compress/archivers/zip/BinaryTree.tree:[I\n+    #3 = Class              #58           // org/apache/commons/compress/archivers/zip/BinaryTree\n+    #4 = Methodref          #59.#60       // java/util/Arrays.fill:([II)V\n+    #5 = Class              #61           // java/lang/IllegalArgumentException\n+    #6 = Class              #62           // java/lang/StringBuilder\n+    #7 = Methodref          #6.#56        // java/lang/StringBuilder.\"<init>\":()V\n+    #8 = String             #63           // Tree value at index\n+    #9 = Methodref          #6.#64        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #10 = Methodref          #6.#65        // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #11 = String             #66           //  has already been assigned (\n+   #12 = String             #67           // )\n+   #13 = Methodref          #6.#68        // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #14 = Methodref          #5.#69        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #15 = Methodref          #3.#70        // org/apache/commons/compress/archivers/zip/BinaryTree.addLeaf:(IIII)V\n+   #16 = Methodref          #71.#72       // org/apache/commons/compress/archivers/zip/BitStream.nextBit:()I\n+   #17 = Class              #73           // java/io/IOException\n+   #18 = String             #74           // The child\n+   #19 = String             #75           //  of node at index\n+   #20 = String             #76           //  is not defined\n+   #21 = Methodref          #17.#69       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #22 = Methodref          #51.#77       // java/io/InputStream.read:()I\n+   #23 = String             #78           // Cannot read the size of the encoded tree, unexpected end of stream\n+   #24 = Class              #79           // java/io/DataInputStream\n+   #25 = Methodref          #24.#80       // java/io/DataInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #26 = Methodref          #24.#81       // java/io/DataInputStream.readFully:([B)V\n+   #27 = Methodref          #82.#83       // java/lang/Math.max:(II)I\n+   #28 = Methodref          #3.#84        // org/apache/commons/compress/archivers/zip/BinaryTree.\"<init>\":(I)V\n+   #29 = Methodref          #85.#86       // java/lang/Integer.reverse:(I)I\n+   #30 = Class              #87           // java/lang/Object\n    #31 = Utf8               UNDEFINED\n    #32 = Utf8               I\n    #33 = Utf8               ConstantValue\n    #34 = Integer            -1\n    #35 = Utf8               NODE\n    #36 = Integer            -2\n    #37 = Utf8               tree\n@@ -54,77 +54,75 @@\n    #44 = Utf8               (IIII)V\n    #45 = Utf8               StackMapTable\n    #46 = Utf8               read\n    #47 = Utf8               (Lorg/apache/commons/compress/archivers/zip/BitStream;)I\n    #48 = Utf8               Exceptions\n    #49 = Utf8               decode\n    #50 = Utf8               (Ljava/io/InputStream;I)Lorg/apache/commons/compress/archivers/zip/BinaryTree;\n-   #51 = Class              #90           // java/io/InputStream\n-   #52 = Class              #91           // \"[B\"\n+   #51 = Class              #88           // java/io/InputStream\n+   #52 = Class              #89           // \"[B\"\n    #53 = Class              #38           // \"[I\"\n-   #54 = Class              #59           // org/apache/commons/compress/archivers/zip/BinaryTree\n-   #55 = Utf8               SourceFile\n-   #56 = Utf8               BinaryTree.java\n-   #57 = NameAndType        #39:#92       // \"<init>\":()V\n-   #58 = NameAndType        #37:#38       // tree:[I\n-   #59 = Utf8               org/apache/commons/compress/archivers/zip/BinaryTree\n-   #60 = Class              #93           // java/util/Arrays\n-   #61 = NameAndType        #94:#95       // fill:([II)V\n-   #62 = Utf8               java/lang/IllegalArgumentException\n-   #63 = Utf8               java/lang/StringBuilder\n-   #64 = Utf8               Tree value at index\n-   #65 = NameAndType        #96:#97       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #66 = NameAndType        #96:#98       // append:(I)Ljava/lang/StringBuilder;\n-   #67 = Utf8                has already been assigned (\n-   #68 = Utf8               )\n-   #69 = NameAndType        #99:#100      // toString:()Ljava/lang/String;\n-   #70 = NameAndType        #39:#101      // \"<init>\":(Ljava/lang/String;)V\n-   #71 = NameAndType        #43:#44       // addLeaf:(IIII)V\n-   #72 = Class              #102          // org/apache/commons/compress/archivers/zip/BitStream\n-   #73 = NameAndType        #103:#104     // nextBit:()I\n-   #74 = Utf8               java/io/IOException\n-   #75 = Utf8               The child\n-   #76 = Utf8                of node at index\n-   #77 = Utf8                is not defined\n-   #78 = Class              #90           // java/io/InputStream\n-   #79 = NameAndType        #46:#104      // read:()I\n-   #80 = Utf8               Cannot read the size of the encoded tree, unexpected end of stream\n-   #81 = Utf8               java/io/DataInputStream\n-   #82 = NameAndType        #39:#105      // \"<init>\":(Ljava/io/InputStream;)V\n-   #83 = NameAndType        #106:#107     // readFully:([B)V\n-   #84 = Class              #108          // java/lang/Math\n-   #85 = NameAndType        #109:#110     // max:(II)I\n-   #86 = NameAndType        #39:#40       // \"<init>\":(I)V\n-   #87 = Class              #111          // java/lang/Integer\n-   #88 = NameAndType        #112:#113     // reverse:(I)I\n-   #89 = Utf8               java/lang/Object\n-   #90 = Utf8               java/io/InputStream\n-   #91 = Utf8               [B\n-   #92 = Utf8               ()V\n-   #93 = Utf8               java/util/Arrays\n-   #94 = Utf8               fill\n-   #95 = Utf8               ([II)V\n-   #96 = Utf8               append\n-   #97 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #98 = Utf8               (I)Ljava/lang/StringBuilder;\n-   #99 = Utf8               toString\n-  #100 = Utf8               ()Ljava/lang/String;\n-  #101 = Utf8               (Ljava/lang/String;)V\n-  #102 = Utf8               org/apache/commons/compress/archivers/zip/BitStream\n-  #103 = Utf8               nextBit\n-  #104 = Utf8               ()I\n-  #105 = Utf8               (Ljava/io/InputStream;)V\n-  #106 = Utf8               readFully\n-  #107 = Utf8               ([B)V\n-  #108 = Utf8               java/lang/Math\n-  #109 = Utf8               max\n-  #110 = Utf8               (II)I\n-  #111 = Utf8               java/lang/Integer\n-  #112 = Utf8               reverse\n-  #113 = Utf8               (I)I\n+   #54 = Utf8               SourceFile\n+   #55 = Utf8               BinaryTree.java\n+   #56 = NameAndType        #39:#90       // \"<init>\":()V\n+   #57 = NameAndType        #37:#38       // tree:[I\n+   #58 = Utf8               org/apache/commons/compress/archivers/zip/BinaryTree\n+   #59 = Class              #91           // java/util/Arrays\n+   #60 = NameAndType        #92:#93       // fill:([II)V\n+   #61 = Utf8               java/lang/IllegalArgumentException\n+   #62 = Utf8               java/lang/StringBuilder\n+   #63 = Utf8               Tree value at index\n+   #64 = NameAndType        #94:#95       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #65 = NameAndType        #94:#96       // append:(I)Ljava/lang/StringBuilder;\n+   #66 = Utf8                has already been assigned (\n+   #67 = Utf8               )\n+   #68 = NameAndType        #97:#98       // toString:()Ljava/lang/String;\n+   #69 = NameAndType        #39:#99       // \"<init>\":(Ljava/lang/String;)V\n+   #70 = NameAndType        #43:#44       // addLeaf:(IIII)V\n+   #71 = Class              #100          // org/apache/commons/compress/archivers/zip/BitStream\n+   #72 = NameAndType        #101:#102     // nextBit:()I\n+   #73 = Utf8               java/io/IOException\n+   #74 = Utf8               The child\n+   #75 = Utf8                of node at index\n+   #76 = Utf8                is not defined\n+   #77 = NameAndType        #46:#102      // read:()I\n+   #78 = Utf8               Cannot read the size of the encoded tree, unexpected end of stream\n+   #79 = Utf8               java/io/DataInputStream\n+   #80 = NameAndType        #39:#103      // \"<init>\":(Ljava/io/InputStream;)V\n+   #81 = NameAndType        #104:#105     // readFully:([B)V\n+   #82 = Class              #106          // java/lang/Math\n+   #83 = NameAndType        #107:#108     // max:(II)I\n+   #84 = NameAndType        #39:#40       // \"<init>\":(I)V\n+   #85 = Class              #109          // java/lang/Integer\n+   #86 = NameAndType        #110:#111     // reverse:(I)I\n+   #87 = Utf8               java/lang/Object\n+   #88 = Utf8               java/io/InputStream\n+   #89 = Utf8               [B\n+   #90 = Utf8               ()V\n+   #91 = Utf8               java/util/Arrays\n+   #92 = Utf8               fill\n+   #93 = Utf8               ([II)V\n+   #94 = Utf8               append\n+   #95 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #96 = Utf8               (I)Ljava/lang/StringBuilder;\n+   #97 = Utf8               toString\n+   #98 = Utf8               ()Ljava/lang/String;\n+   #99 = Utf8               (Ljava/lang/String;)V\n+  #100 = Utf8               org/apache/commons/compress/archivers/zip/BitStream\n+  #101 = Utf8               nextBit\n+  #102 = Utf8               ()I\n+  #103 = Utf8               (Ljava/io/InputStream;)V\n+  #104 = Utf8               readFully\n+  #105 = Utf8               ([B)V\n+  #106 = Utf8               java/lang/Math\n+  #107 = Utf8               max\n+  #108 = Utf8               (II)I\n+  #109 = Utf8               java/lang/Integer\n+  #110 = Utf8               reverse\n+  #111 = Utf8               (I)I\n {\n   private static final int UNDEFINED = -1;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int -1\n \n   private static final int NODE = -2;\n"}]}
