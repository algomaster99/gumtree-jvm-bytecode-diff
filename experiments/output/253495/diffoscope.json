{"diffoscope-json-version": 1, "source1": "first/CovariantEqualsCheck.class", "source2": "second/CovariantEqualsCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -28,42 +28,38 @@\n         return new int[] { 14, 136, 154, 199 };\n     }\n     \n     public int[] getAcceptableTokens() {\n         return this.getRequiredTokens();\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n+    public void visitToken(final DetailAST detailAST) {\n         this.equalsMethods.clear();\n-        final DetailAST objBlock = ast.findFirstToken(6);\n-        if (objBlock != null) {\n-            DetailAST child = objBlock.getFirstChild();\n-            boolean hasEqualsObject = false;\n-            while (child != null) {\n-                if (CheckUtil.isEqualsMethod(child)) {\n-                    if (isFirstParameterObject(child)) {\n-                        hasEqualsObject = true;\n+        final DetailAST firstToken = detailAST.findFirstToken(6);\n+        if (firstToken != null) {\n+            DetailAST detailAST2 = firstToken.getFirstChild();\n+            boolean b = false;\n+            while (detailAST2 != null) {\n+                if (CheckUtil.isEqualsMethod(detailAST2)) {\n+                    if (isFirstParameterObject(detailAST2)) {\n+                        b = true;\n                     }\n                     else {\n-                        this.equalsMethods.add(child);\n+                        this.equalsMethods.add(detailAST2);\n                     }\n                 }\n-                child = child.getNextSibling();\n+                detailAST2 = detailAST2.getNextSibling();\n             }\n-            if (!hasEqualsObject) {\n-                for (final DetailAST equalsAST : this.equalsMethods) {\n-                    final DetailAST nameNode = equalsAST.findFirstToken(58);\n-                    this.log(nameNode, \"covariant.equals\", new Object[0]);\n+            if (!b) {\n+                final Iterator<DetailAST> iterator = this.equalsMethods.iterator();\n+                while (iterator.hasNext()) {\n+                    this.log(((DetailAST)iterator.next()).findFirstToken(58), \"covariant.equals\", new Object[0]);\n                 }\n             }\n         }\n     }\n     \n-    private static boolean isFirstParameterObject(final DetailAST methodDefAst) {\n-        final DetailAST paramsNode = methodDefAst.findFirstToken(20);\n-        final DetailAST paramNode = paramsNode.findFirstToken(21);\n-        final DetailAST typeNode = paramNode.findFirstToken(13);\n-        final FullIdent fullIdent = FullIdent.createFullIdentBelow(typeNode);\n-        final String name = fullIdent.getText();\n-        return \"Object\".equals(name) || \"java.lang.Object\".equals(name);\n+    private static boolean isFirstParameterObject(final DetailAST detailAST) {\n+        final String text = FullIdent.createFullIdentBelow(detailAST.findFirstToken(20).findFirstToken(21).findFirstToken(13)).getText();\n+        return \"Object\".equals(text) || \"java.lang.Object\".equals(text);\n     }\n }\n"}]}
