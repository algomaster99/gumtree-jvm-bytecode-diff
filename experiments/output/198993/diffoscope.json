{"diffoscope-json-version": 1, "source1": "first/Annotations.class", "source2": "second/Annotations.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,31 +6,31 @@\n import java.io.DataInput;\n \n public abstract class Annotations extends Attribute\n {\n     private AnnotationEntry[] annotationTable;\n     private final boolean isRuntimeVisible;\n     \n-    Annotations(final byte annotation_type, final int name_index, final int length, final DataInput input, final ConstantPool constant_pool, final boolean isRuntimeVisible) throws IOException {\n-        this(annotation_type, name_index, length, (AnnotationEntry[])null, constant_pool, isRuntimeVisible);\n-        final int annotation_table_length = input.readUnsignedShort();\n-        this.annotationTable = new AnnotationEntry[annotation_table_length];\n-        for (int i = 0; i < annotation_table_length; ++i) {\n-            this.annotationTable[i] = AnnotationEntry.read(input, constant_pool, isRuntimeVisible);\n+    Annotations(final byte b, final int n, final int n2, final DataInput dataInput, final ConstantPool constantPool, final boolean b2) throws IOException {\n+        this(b, n, n2, (AnnotationEntry[])null, constantPool, b2);\n+        final int unsignedShort = dataInput.readUnsignedShort();\n+        this.annotationTable = new AnnotationEntry[unsignedShort];\n+        for (int i = 0; i < unsignedShort; ++i) {\n+            this.annotationTable[i] = AnnotationEntry.read(dataInput, constantPool, b2);\n         }\n     }\n     \n-    public Annotations(final byte annotationType, final int nameIndex, final int length, final AnnotationEntry[] annotationTable, final ConstantPool constantPool, final boolean isRuntimeVisible) {\n-        super(annotationType, nameIndex, length, constantPool);\n+    public Annotations(final byte b, final int n, final int n2, final AnnotationEntry[] annotationTable, final ConstantPool constantPool, final boolean isRuntimeVisible) {\n+        super(b, n, n2, constantPool);\n         this.annotationTable = annotationTable;\n         this.isRuntimeVisible = isRuntimeVisible;\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitAnnotation(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitAnnotation(this);\n     }\n     \n     public final void setAnnotationTable(final AnnotationEntry[] annotationTable) {\n         this.annotationTable = annotationTable;\n     }\n     \n     public AnnotationEntry[] getAnnotationEntries() {\n@@ -44,17 +44,18 @@\n         return this.annotationTable.length;\n     }\n     \n     public boolean isRuntimeVisible() {\n         return this.isRuntimeVisible;\n     }\n     \n-    protected void writeAnnotations(final DataOutputStream dos) throws IOException {\n+    protected void writeAnnotations(final DataOutputStream dataOutputStream) throws IOException {\n         if (this.annotationTable == null) {\n             return;\n         }\n-        dos.writeShort(this.annotationTable.length);\n-        for (final AnnotationEntry element : this.annotationTable) {\n-            element.dump(dos);\n+        dataOutputStream.writeShort(this.annotationTable.length);\n+        final AnnotationEntry[] annotationTable = this.annotationTable;\n+        for (int length = annotationTable.length, i = 0; i < length; ++i) {\n+            annotationTable[i].dump(dataOutputStream);\n         }\n     }\n }\n"}]}
