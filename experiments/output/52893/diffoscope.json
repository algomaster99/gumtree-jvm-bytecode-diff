{"diffoscope-json-version": 1, "source1": "first/CpBands.class", "source2": "second/CpBands.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -304,18 +304,18 @@\n         final int[] cp_methodOrField_desc = new int[cp.size()];\n         int i = 0;\n         for (final CPMethodOrField mOrF : cp) {\n             cp_methodOrField_class[i] = mOrF.getClassIndex();\n             cp_methodOrField_desc[i] = mOrF.getDescIndex();\n             ++i;\n         }\n-        byte[] encodedBand = this.encodeBandInt(name + \"_class\", cp_methodOrField_class, Codec.DELTA5);\n+        byte[] encodedBand = this.encodeBandInt(String.valueOf(name) + \"_class\", cp_methodOrField_class, Codec.DELTA5);\n         out.write(encodedBand);\n         PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + name + \"_class[\" + cp_methodOrField_class.length + \"]\");\n-        encodedBand = this.encodeBandInt(name + \"_desc\", cp_methodOrField_desc, Codec.UDELTA5);\n+        encodedBand = this.encodeBandInt(String.valueOf(name) + \"_desc\", cp_methodOrField_desc, Codec.UDELTA5);\n         out.write(encodedBand);\n         PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + name + \"_desc[\" + cp_methodOrField_desc.length + \"]\");\n     }\n     \n     public void finaliseBands() {\n         this.addCPUtf8(\"\");\n         this.removeSignaturesFromCpUTF8();\n@@ -495,26 +495,26 @@\n     }\n     \n     public void addCPClass(final String className) {\n         this.getCPClass(className);\n     }\n     \n     public CPNameAndType getCPNameAndType(final String name, final String signature) {\n-        final String descr = name + \":\" + signature;\n+        final String descr = String.valueOf(name) + \":\" + signature;\n         CPNameAndType nameAndType = (CPNameAndType)this.stringsToCpNameAndType.get(descr);\n         if (nameAndType == null) {\n             nameAndType = new CPNameAndType(this.getCPUtf8(name), this.getCPSignature(signature));\n             this.stringsToCpNameAndType.put(descr, nameAndType);\n             this.cp_Descr.add(nameAndType);\n         }\n         return nameAndType;\n     }\n     \n     public CPMethodOrField getCPField(final CPClass cpClass, final String name, final String desc) {\n-        final String key = cpClass.toString() + \":\" + name + \":\" + desc;\n+        final String key = String.valueOf(cpClass.toString()) + \":\" + name + \":\" + desc;\n         CPMethodOrField cpF = (CPMethodOrField)this.stringsToCpField.get(key);\n         if (cpF == null) {\n             final CPNameAndType nAndT = this.getCPNameAndType(name, desc);\n             cpF = new CPMethodOrField(cpClass, nAndT);\n             this.cp_Field.add(cpF);\n             this.stringsToCpField.put(key, cpF);\n         }\n@@ -544,37 +544,37 @@\n                 constant = (CPConstant)new CPString(this.getCPUtf8((String)value));\n                 this.cp_String.add(constant);\n             }\n             else if (value instanceof Type) {\n                 String className = ((Type)value).getClassName();\n                 if (className.endsWith(\"[]\")) {\n                     for (className = \"[L\" + className.substring(0, className.length() - 2); className.endsWith(\"[]\"); className = \"[\" + className.substring(0, className.length() - 2)) {}\n-                    className += \";\";\n+                    className = String.valueOf(className) + \";\";\n                 }\n                 constant = (CPConstant)this.getCPClass(className);\n             }\n             this.objectsToCPConstant.put(value, constant);\n         }\n         return constant;\n     }\n     \n     public CPMethodOrField getCPMethod(final CPClass cpClass, final String name, final String desc) {\n-        final String key = cpClass.toString() + \":\" + name + \":\" + desc;\n+        final String key = String.valueOf(cpClass.toString()) + \":\" + name + \":\" + desc;\n         CPMethodOrField cpM = (CPMethodOrField)this.stringsToCpMethod.get(key);\n         if (cpM == null) {\n             final CPNameAndType nAndT = this.getCPNameAndType(name, desc);\n             cpM = new CPMethodOrField(cpClass, nAndT);\n             this.cp_Method.add(cpM);\n             this.stringsToCpMethod.put(key, cpM);\n         }\n         return cpM;\n     }\n     \n     public CPMethodOrField getCPIMethod(final CPClass cpClass, final String name, final String desc) {\n-        final String key = cpClass.toString() + \":\" + name + \":\" + desc;\n+        final String key = String.valueOf(cpClass.toString()) + \":\" + name + \":\" + desc;\n         CPMethodOrField cpIM = (CPMethodOrField)this.stringsToCpIMethod.get(key);\n         if (cpIM == null) {\n             final CPNameAndType nAndT = this.getCPNameAndType(name, desc);\n             cpIM = new CPMethodOrField(cpClass, nAndT);\n             this.cp_Imethod.add(cpIM);\n             this.stringsToCpIMethod.put(key, cpIM);\n         }\n"}]}
