{"diffoscope-json-version": 1, "source1": "first/AttributeHTML.class", "source2": "second/AttributeHTML.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -29,15 +29,15 @@\n     private final ConstantHTML constantHtml;\n     private final ConstantPool constantPool;\n     \n     AttributeHTML(final String dir, final String className, final ConstantPool constantPool, final ConstantHTML constantHtml, final Charset charset) throws IOException {\n         this.className = className;\n         this.constantPool = constantPool;\n         this.constantHtml = constantHtml;\n-        (this.printWriter = new PrintWriter(dir + className + \"_attributes.html\", charset.name())).print(\"<HTML><head><meta charset=\\\"\");\n+        (this.printWriter = new PrintWriter(String.valueOf(dir) + className + \"_attributes.html\", charset.name())).print(\"<HTML><head><meta charset=\\\"\");\n         this.printWriter.print(charset.name());\n         this.printWriter.println(\"\\\"></head>\");\n         this.printWriter.println(\"<BODY BGCOLOR=\\\"#C0C0C0\\\"><TABLE BORDER=0>\");\n     }\n     \n     @Override\n     public void close() {\n@@ -70,15 +70,17 @@\n             case 2: {\n                 final Code c = (Code)attribute;\n                 this.printWriter.print(\"<UL><LI>Maximum stack size = \" + c.getMaxStack() + \"</LI>\\n<LI>Number of local variables = \" + c.getMaxLocals() + \"</LI>\\n<LI><A HREF=\\\"\" + this.className + \"_code.html#method\" + method_number + \"\\\" TARGET=Code>Byte code</A></LI></UL>\\n\");\n                 final CodeException[] ce = c.getExceptionTable();\n                 final int len = ce.length;\n                 if (len > 0) {\n                     this.printWriter.print(\"<P><B>Exceptions handled</B><UL>\");\n-                    for (final CodeException cex : ce) {\n+                    CodeException[] array;\n+                    for (int length = (array = ce).length, j = 0; j < length; ++j) {\n+                        final CodeException cex = array[j];\n                         final int catchType = cex.getCatchType();\n                         this.printWriter.print(\"<LI>\");\n                         if (catchType != 0) {\n                             this.printWriter.print(this.constantHtml.referenceConstant(catchType));\n                         }\n                         else {\n                             this.printWriter.print(\"Any Exception\");\n@@ -99,15 +101,17 @@\n                 final int index = ((SourceFile)attribute).getSourceFileIndex();\n                 this.printWriter.print(\"<UL><LI><A HREF=\\\"\" + this.className + \"_cp.html#cp\" + index + \"\\\" TARGET=\\\"ConstantPool\\\">Source file index(\" + index + \")</A></UL>\\n\");\n                 break;\n             }\n             case 3: {\n                 final int[] indices = ((ExceptionTable)attribute).getExceptionIndexTable();\n                 this.printWriter.print(\"<UL>\");\n-                for (final int indice : indices) {\n+                int[] array2;\n+                for (int length2 = (array2 = indices).length, k = 0; k < length2; ++k) {\n+                    final int indice = array2[k];\n                     this.printWriter.print(\"<LI><A HREF=\\\"\" + this.className + \"_cp.html#cp\" + indice + \"\\\" TARGET=\\\"ConstantPool\\\">Exception class index(\" + indice + \")</A>\\n\");\n                 }\n                 this.printWriter.print(\"</UL>\\n\");\n                 break;\n             }\n             case 4: {\n                 final LineNumber[] line_numbers = ((LineNumberTable)attribute).getLineNumberTable();\n@@ -124,23 +128,25 @@\n                 this.printWriter.print(\"<UL>\");\n                 ((LocalVariableTable)attribute).forEach(var -> {\n                     final int sigIdx = var.getSignatureIndex();\n                     final String signature = this.constantPool.getConstantUtf8(sigIdx).getBytes();\n                     final String signature2 = Utility.signatureToString(signature, false);\n                     final int start = var.getStartPC();\n                     final int end = start + var.getLength();\n-                    this.printWriter.println(\"<LI>\" + Class2HTML.referenceType(signature2) + \"&nbsp;<B>\" + var.getName() + \"</B> in slot %\" + var.getIndex() + \"<BR>Valid from lines <A HREF=\\\"\" + this.className + \"_code.html#code\" + method_number + \"@\" + start + \"\\\" TARGET=Code>\" + start + \"</A> to <A HREF=\\\"\" + this.className + \"_code.html#code\" + method_number + \"@\" + end + \"\\\" TARGET=Code>\" + end + \"</A></LI>\");\n+                    this.printWriter.println(\"<LI>\" + Class2HTML.referenceType(signature2) + \"&nbsp;<B>\" + var.getName() + \"</B> in slot %\" + var.getIndex() + \"<BR>Valid from lines \" + \"<A HREF=\\\"\" + this.className + \"_code.html#code\" + n + \"@\" + start + \"\\\" TARGET=Code>\" + start + \"</A> to \" + \"<A HREF=\\\"\" + this.className + \"_code.html#code\" + n + \"@\" + end + \"\\\" TARGET=Code>\" + end + \"</A></LI>\");\n                     return;\n                 });\n                 this.printWriter.print(\"</UL>\\n\");\n                 break;\n             }\n             case 6: {\n                 this.printWriter.print(\"<UL>\");\n-                for (final InnerClass clazz : ((InnerClasses)attribute).getInnerClasses()) {\n+                InnerClass[] innerClasses;\n+                for (int length3 = (innerClasses = ((InnerClasses)attribute).getInnerClasses()).length, l = 0; l < length3; ++l) {\n+                    final InnerClass clazz = innerClasses[l];\n                     final int index = clazz.getInnerNameIndex();\n                     String name;\n                     if (index > 0) {\n                         name = this.constantPool.getConstantUtf8(index).getBytes();\n                     }\n                     else {\n                         name = \"&lt;anonymous&gt;\";\n"}]}
