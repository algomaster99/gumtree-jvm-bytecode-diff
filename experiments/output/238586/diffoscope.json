{"diffoscope-json-version": 1, "source1": "first/MultiBackgroundInitializer.class", "source2": "second/MultiBackgroundInitializer.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,56 +11,57 @@\n {\n     private final Map<String, BackgroundInitializer<?>> childInitializers;\n     \n     public MultiBackgroundInitializer() {\n         this.childInitializers = new HashMap<String, BackgroundInitializer<?>>();\n     }\n     \n-    public MultiBackgroundInitializer(final ExecutorService exec) {\n-        super(exec);\n+    public MultiBackgroundInitializer(final ExecutorService executorService) {\n+        super(executorService);\n         this.childInitializers = new HashMap<String, BackgroundInitializer<?>>();\n     }\n     \n-    public void addInitializer(final String name, final BackgroundInitializer<?> backgroundInitializer) {\n-        Validate.notNull((Object)name, \"name\", new Object[0]);\n+    public void addInitializer(final String s, final BackgroundInitializer<?> backgroundInitializer) {\n+        Validate.notNull((Object)s, \"name\", new Object[0]);\n         Validate.notNull((Object)backgroundInitializer, \"backgroundInitializer\", new Object[0]);\n         synchronized (this) {\n             if (this.isStarted()) {\n                 throw new IllegalStateException(\"addInitializer() must not be called after start()!\");\n             }\n-            this.childInitializers.put(name, backgroundInitializer);\n+            this.childInitializers.put(s, backgroundInitializer);\n         }\n     }\n     \n     protected int getTaskCount() {\n-        int result = 1;\n-        for (final BackgroundInitializer<?> bi : this.childInitializers.values()) {\n-            result += bi.getTaskCount();\n+        int n = 1;\n+        final Iterator<BackgroundInitializer<?>> iterator = this.childInitializers.values().iterator();\n+        while (iterator.hasNext()) {\n+            n += ((BackgroundInitializer)iterator.next()).getTaskCount();\n         }\n-        return result;\n+        return n;\n     }\n     \n     protected MultiBackgroundInitializer.MultiBackgroundInitializerResults initialize() throws Exception {\n-        final Map<String, BackgroundInitializer<?>> inits;\n+        final HashMap hashMap;\n         synchronized (this) {\n-            inits = new HashMap<String, BackgroundInitializer<?>>(this.childInitializers);\n+            hashMap = new HashMap((Map<? extends K, ? extends V>)this.childInitializers);\n         }\n-        final ExecutorService exec = this.getActiveExecutor();\n-        for (final BackgroundInitializer<?> bi : inits.values()) {\n-            if (bi.getExternalExecutor() == null) {\n-                bi.setExternalExecutor(exec);\n+        final ExecutorService activeExecutor = this.getActiveExecutor();\n+        for (final BackgroundInitializer backgroundInitializer : hashMap.values()) {\n+            if (backgroundInitializer.getExternalExecutor() == null) {\n+                backgroundInitializer.setExternalExecutor(activeExecutor);\n             }\n-            bi.start();\n+            backgroundInitializer.start();\n         }\n-        final Map<String, Object> results = new HashMap<String, Object>();\n-        final Map<String, ConcurrentException> excepts = new HashMap<String, ConcurrentException>();\n-        for (final Map.Entry<String, BackgroundInitializer<?>> e : inits.entrySet()) {\n+        final HashMap hashMap2 = new HashMap();\n+        final HashMap hashMap3 = new HashMap();\n+        for (final Map.Entry entry : hashMap.entrySet()) {\n             try {\n-                results.put(e.getKey(), ((BackgroundInitializer)e.getValue()).get());\n+                hashMap2.put(entry.getKey(), ((BackgroundInitializer)entry.getValue()).get());\n             }\n-            catch (final ConcurrentException cex) {\n-                excepts.put(e.getKey(), cex);\n+            catch (final ConcurrentException ex) {\n+                hashMap3.put(entry.getKey(), ex);\n             }\n         }\n-        return new MultiBackgroundInitializer.MultiBackgroundInitializerResults((Map)inits, (Map)results, (Map)excepts, (MultiBackgroundInitializer.MultiBackgroundInitializer$1)null);\n+        return new MultiBackgroundInitializer.MultiBackgroundInitializerResults((Map)hashMap, (Map)hashMap2, (Map)hashMap3, (MultiBackgroundInitializer.MultiBackgroundInitializer$1)null);\n     }\n }\n"}]}
