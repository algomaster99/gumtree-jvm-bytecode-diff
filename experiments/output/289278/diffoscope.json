{"diffoscope-json-version": 1, "source1": "first/XMLConfiguration$XMLBuilderVisitor.class", "source2": "second/XMLConfiguration$XMLBuilderVisitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -3,16 +3,18 @@\n \n import org.w3c.dom.NodeList;\n import org.w3c.dom.CDATASection;\n import java.util.ArrayList;\n import org.w3c.dom.NamedNodeMap;\n import java.util.function.BiConsumer;\n import org.w3c.dom.Text;\n+import java.util.stream.Stream;\n import java.util.function.Consumer;\n import java.util.function.Predicate;\n+import java.util.Objects;\n import org.apache.commons.configuration2.tree.NodeHandler;\n import org.apache.commons.configuration2.tree.ConfigurationNodeVisitor;\n import org.apache.commons.configuration2.tree.NodeTreeWalker;\n import org.apache.commons.configuration2.tree.ReferenceNodeHandler;\n import java.util.HashMap;\n import org.apache.commons.configuration2.convert.ListDelimiterHandler;\n import org.w3c.dom.Element;\n@@ -33,19 +35,22 @@\n         this.elementMapping = xmlDocumentHelper.getElementMapping();\n         this.listDelimiterHandler = listDelimiterHandler;\n         this.newElements = new HashMap();\n     }\n     \n     public void processDocument(final ReferenceNodeHandler referenceNodeHandler) {\n         updateAttributes((ImmutableNode)referenceNodeHandler.getRootNode(), this.document.getDocumentElement());\n-        NodeTreeWalker.INSTANCE.walkDFS(referenceNodeHandler.getRootNode(), (ConfigurationNodeVisitor)this, (NodeHandler)referenceNodeHandler);\n+        NodeTreeWalker.INSTANCE.walkDFS((Object)referenceNodeHandler.getRootNode(), (ConfigurationNodeVisitor)this, (NodeHandler)referenceNodeHandler);\n     }\n     \n     public void handleRemovedNodes(final ReferenceNodeHandler referenceNodeHandler) {\n-        referenceNodeHandler.removedReferences().stream().filter(Node.class::isInstance).forEach(this::lambda$handleRemovedNodes$0);\n+        final Stream stream = referenceNodeHandler.removedReferences().stream();\n+        final Class<Node> obj = Node.class;\n+        Objects.requireNonNull(obj);\n+        stream.filter(obj::isInstance).forEach(this::lambda$handleRemovedNodes$0);\n     }\n     \n     protected void insert(final ImmutableNode immutableNode, final ImmutableNode immutableNode2, final ImmutableNode immutableNode3, final ImmutableNode immutableNode4, final ReferenceNodeHandler referenceNodeHandler) {\n         if (XMLListReference.isListNode(immutableNode, referenceNodeHandler)) {\n             return;\n         }\n         final Element element = this.document.createElement(immutableNode.getNodeName());\n@@ -142,30 +147,32 @@\n     private static void clearAttributes(final Element element) {\n         final NamedNodeMap attributes = element.getAttributes();\n         for (int i = 0; i < attributes.getLength(); ++i) {\n             element.removeAttribute(attributes.item(i).getNodeName());\n         }\n     }\n     \n-    private static Text findTextNodeForUpdate(final Element element) {\n-        Object o = null;\n-        final NodeList childNodes = element.getChildNodes();\n+    private static Text findTextNodeForUpdate(final Element obj) {\n+        Text text = null;\n+        final NodeList childNodes = obj.getChildNodes();\n         final ArrayList list = new ArrayList();\n         for (int i = 0; i < childNodes.getLength(); ++i) {\n             final Node item = childNodes.item(i);\n             if (item instanceof Text) {\n-                if (o == null) {\n-                    o = item;\n+                if (text == null) {\n+                    text = (Text)item;\n                 }\n                 else {\n                     list.add(item);\n                 }\n             }\n         }\n-        if (o instanceof CDATASection) {\n-            list.add(o);\n-            o = null;\n-        }\n-        list.forEach(element::removeChild);\n-        return (Text)o;\n+        if (text instanceof CDATASection) {\n+            list.add(text);\n+            text = null;\n+        }\n+        final ArrayList list2 = list;\n+        Objects.requireNonNull(obj);\n+        list2.forEach(obj::removeChild);\n+        return text;\n     }\n }\n"}]}
