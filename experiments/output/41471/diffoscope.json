{"diffoscope-json-version": 1, "source1": "first/ZipUtil.class", "source2": "second/ZipUtil.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,422 +1,411 @@\n-  SHA-256 checksum 1e904fc8dfa097edd592757aed880e97e1825b2c4a698cc404bd89ca49e831d8\n+  SHA-256 checksum 9024baa764f449b50f88c03965814f17f35c31189b9168e7ba8ff0bcb0dbc91f\n   Compiled from \"ZipUtil.java\"\n public abstract class org.apache.commons.compress.archivers.zip.ZipUtil\n   minor version: 0\n   major version: 52\n   flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT\n-  this_class: #47                         // org/apache/commons/compress/archivers/zip/ZipUtil\n-  super_class: #100                       // java/lang/Object\n+  this_class: #1                          // org/apache/commons/compress/archivers/zip/ZipUtil\n+  super_class: #3                         // java/lang/Object\n   interfaces: 0, fields: 2, methods: 24, attributes: 2\n Constant pool:\n-    #1 = Methodref          #100.#216     // java/lang/Object.\"<init>\":()V\n-    #2 = Class              #217          // java/lang/Integer\n-    #3 = Long               4294967296l\n-    #5 = Methodref          #218.#219     // java/math/BigInteger.bitLength:()I\n-    #6 = Methodref          #218.#220     // java/math/BigInteger.longValue:()J\n-    #7 = Class              #221          // java/lang/NumberFormatException\n-    #8 = Class              #222          // java/lang/StringBuilder\n-    #9 = Methodref          #8.#216       // java/lang/StringBuilder.\"<init>\":()V\n-   #10 = String             #223          // The BigInteger cannot fit inside a 64 bit java long: [\n-   #11 = Methodref          #8.#224       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #12 = Methodref          #8.#225       // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #13 = String             #226          // ]\n-   #14 = Methodref          #8.#227       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #15 = Methodref          #7.#228       // java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n-   #16 = Methodref          #47.#229      // org/apache/commons/compress/archivers/zip/ZipUtil.supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #17 = Methodref          #47.#230      // org/apache/commons/compress/archivers/zip/ZipUtil.supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-   #18 = Class              #231          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-   #19 = Fieldref           #232.#233     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.ENCRYPTION:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-   #20 = Methodref          #18.#234      // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #21 = Methodref          #235.#236     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-   #22 = Methodref          #237.#238     // org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #23 = Fieldref           #232.#239     // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-   #24 = Methodref          #18.#240      // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-   #25 = Methodref          #241.#242     // java/util/Arrays.copyOf:([BI)[B\n-   #26 = Methodref          #243.#244     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #27 = Methodref          #28.#245      // java/util/Calendar.getInstance:()Ljava/util/Calendar;\n-   #28 = Class              #246          // java/util/Calendar\n-   #29 = Long               127l\n-   #31 = Methodref          #28.#247      // java/util/Calendar.set:(II)V\n-   #32 = Long               15l\n-   #34 = Methodref          #28.#248      // java/util/Calendar.getTime:()Ljava/util/Date;\n-   #35 = Methodref          #47.#249      // org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaDate:(J)Ljava/util/Date;\n-   #36 = Methodref          #250.#251     // java/util/Date.getTime:()J\n-   #37 = Methodref          #93.#252      // org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n-   #38 = Class              #253          // java/util/zip/CRC32\n-   #39 = Methodref          #38.#216      // java/util/zip/CRC32.\"<init>\":()V\n-   #40 = Methodref          #38.#254      // java/util/zip/CRC32.update:([B)V\n-   #41 = Methodref          #38.#252      // java/util/zip/CRC32.getValue:()J\n-   #42 = Methodref          #255.#256     // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getNameCRC32:()J\n-   #43 = Fieldref           #257.#258     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-   #44 = Methodref          #255.#259     // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getUnicodeName:()[B\n-   #45 = InterfaceMethodref #260.#261     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-   #46 = Class              #262          // java/io/IOException\n-   #47 = Class              #263          // org/apache/commons/compress/archivers/zip/ZipUtil\n-   #48 = Long               4036608000000l\n-   #50 = Methodref          #47.#264      // org/apache/commons/compress/archivers/zip/ZipUtil.javaToDosTime:(J)J\n-   #51 = Long               2162688l\n-   #53 = Methodref          #265.#266     // java/time/Instant.ofEpochMilli:(J)Ljava/time/Instant;\n-   #54 = Methodref          #267.#268     // java/time/ZoneId.systemDefault:()Ljava/time/ZoneId;\n-   #55 = Methodref          #269.#270     // java/time/LocalDateTime.ofInstant:(Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/LocalDateTime;\n-   #56 = Methodref          #47.#271      // org/apache/commons/compress/archivers/zip/ZipUtil.javaEpochToLocalDateTime:(J)Ljava/time/LocalDateTime;\n-   #57 = Methodref          #269.#272     // java/time/LocalDateTime.getYear:()I\n-   #58 = Methodref          #269.#273     // java/time/LocalDateTime.getMonthValue:()I\n-   #59 = Methodref          #269.#274     // java/time/LocalDateTime.getDayOfMonth:()I\n-   #60 = Methodref          #269.#275     // java/time/LocalDateTime.getHour:()I\n-   #61 = Methodref          #269.#276     // java/time/LocalDateTime.getMinute:()I\n-   #62 = Methodref          #269.#277     // java/time/LocalDateTime.getSecond:()I\n-   #63 = Long               4294967295l\n-   #65 = Long               -2147483648l\n-   #67 = Class              #278          // java/lang/IllegalArgumentException\n-   #68 = String             #279          // Negative longs < -2^31 not permitted: [\n-   #69 = Methodref          #8.#280       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #70 = Methodref          #67.#228      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #71 = Methodref          #47.#281      // org/apache/commons/compress/archivers/zip/ZipUtil.adjustToLong:(I)J\n-   #72 = Methodref          #218.#282     // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-   #73 = Fieldref           #75.#283      // org/apache/commons/compress/archivers/zip/UnicodePathExtraField.UPATH_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #74 = Methodref          #235.#284     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-   #75 = Class              #285          // org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n-   #76 = Methodref          #47.#286      // org/apache/commons/compress/archivers/zip/ZipUtil.getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n-   #77 = Methodref          #235.#287     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setName:(Ljava/lang/String;)V\n-   #78 = Fieldref           #288.#289     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-   #79 = Methodref          #235.#290     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-   #80 = Fieldref           #81.#291      // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.UCOM_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #81 = Class              #292          // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n-   #82 = Methodref          #235.#293     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setComment:(Ljava/lang/String;)V\n-   #83 = Fieldref           #294.#295     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n-   #84 = Methodref          #235.#296     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCommentSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n-   #85 = Methodref          #235.#297     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-   #86 = Methodref          #298.#299     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesEncryption:()Z\n-   #87 = Fieldref           #237.#300     // org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #88 = Methodref          #237.#301     // org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n-   #89 = Fieldref           #237.#302     // org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #90 = Class              #303          // java/util/zip/ZipEntry\n-   #91 = Fieldref           #237.#304     // org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #92 = Fieldref           #237.#305     // org/apache/commons/compress/archivers/zip/ZipMethod.BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-   #93 = Class              #306          // org/apache/commons/compress/archivers/zip/ZipLong\n-   #94 = Methodref          #47.#307      // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(J)[B\n-   #95 = Methodref          #93.#308      // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n-   #96 = Methodref          #47.#309      // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(J[BI)V\n-   #97 = Methodref          #93.#310      // org/apache/commons/compress/archivers/zip/ZipLong.putLong:(J[BI)V\n-   #98 = String             #311          // Can only convert non-negative integers between [0,255] to byte: [\n-   #99 = Methodref          #8.#312       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-  #100 = Class              #313          // java/lang/Object\n-  #101 = Utf8               DOSTIME_BEFORE_1980\n-  #102 = Utf8               J\n-  #103 = Utf8               ConstantValue\n-  #104 = Utf8               UPPER_DOSTIME_BOUND\n-  #105 = Utf8               <init>\n-  #106 = Utf8               ()V\n-  #107 = Utf8               Code\n-  #108 = Utf8               LineNumberTable\n-  #109 = Utf8               LocalVariableTable\n-  #110 = Utf8               this\n-  #111 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipUtil;\n-  #112 = Utf8               adjustToLong\n-  #113 = Utf8               (I)J\n-  #114 = Utf8               i\n-  #115 = Utf8               I\n-  #116 = Utf8               StackMapTable\n-  #117 = Utf8               bigToLong\n-  #118 = Utf8               (Ljava/math/BigInteger;)J\n-  #119 = Utf8               big\n-  #120 = Utf8               Ljava/math/BigInteger;\n-  #121 = Utf8               canHandleEntryData\n-  #122 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #123 = Utf8               entry\n-  #124 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-  #125 = Utf8               checkRequestedFeatures\n-  #126 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #127 = Utf8               m\n-  #128 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #129 = Utf8               ze\n-  #130 = Class              #314          // org/apache/commons/compress/archivers/zip/ZipMethod\n-  #131 = Utf8               Exceptions\n-  #132 = Utf8               copy\n-  #133 = Utf8               ([B)[B\n-  #134 = Utf8               from\n-  #135 = Utf8               [B\n-  #136 = Utf8               ([B[BI)V\n-  #137 = Utf8               to\n-  #138 = Utf8               offset\n-  #139 = Utf8               dosToJavaDate\n-  #140 = Utf8               (J)Ljava/util/Date;\n-  #141 = Utf8               dosTime\n-  #142 = Utf8               cal\n-  #143 = Utf8               Ljava/util/Calendar;\n-  #144 = Utf8               dosToJavaTime\n-  #145 = Utf8               (J)J\n-  #146 = Utf8               fromDosTime\n-  #147 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipLong;)Ljava/util/Date;\n-  #148 = Utf8               zipDosTime\n-  #149 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #150 = Utf8               getUnicodeStringIfOriginalMatches\n-  #151 = Utf8               (Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n-  #152 = Utf8               crc32\n-  #153 = Utf8               Ljava/util/zip/CRC32;\n-  #154 = Utf8               origCRC32\n-  #155 = Utf8               f\n-  #156 = Utf8               Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;\n-  #157 = Utf8               orig\n-  #158 = Class              #315          // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField\n-  #159 = Class              #135          // \"[B\"\n-  #160 = Class              #253          // java/util/zip/CRC32\n-  #161 = Class              #262          // java/io/IOException\n-  #162 = Utf8               isDosTime\n-  #163 = Utf8               (J)Z\n-  #164 = Utf8               time\n-  #165 = Utf8               javaEpochToLocalDateTime\n-  #166 = Utf8               (J)Ljava/time/LocalDateTime;\n-  #167 = Utf8               instant\n-  #168 = Utf8               Ljava/time/Instant;\n-  #169 = Utf8               javaToDosTime\n-  #170 = Utf8               t\n-  #171 = Utf8               ldt\n-  #172 = Utf8               Ljava/time/LocalDateTime;\n-  #173 = Class              #316          // java/time/LocalDateTime\n-  #174 = Utf8               longToBig\n-  #175 = Utf8               (J)Ljava/math/BigInteger;\n-  #176 = Utf8               l\n-  #177 = Utf8               reverse\n-  #178 = Utf8               x\n-  #179 = Utf8               B\n-  #180 = Utf8               array\n-  #181 = Utf8               z\n-  #182 = Utf8               setNameAndCommentFromExtraFields\n-  #183 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n-  #184 = Utf8               cmtCandidate\n-  #185 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #186 = Utf8               cmt\n-  #187 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnicodeCommentExtraField;\n-  #188 = Utf8               newComment\n-  #189 = Utf8               Ljava/lang/String;\n-  #190 = Utf8               originalNameBytes\n-  #191 = Utf8               commentBytes\n-  #192 = Utf8               nameCandidate\n-  #193 = Utf8               name\n-  #194 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnicodePathExtraField;\n-  #195 = Utf8               newName\n-  #196 = Class              #317          // org/apache/commons/compress/archivers/zip/ZipExtraField\n-  #197 = Class              #285          // org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n-  #198 = Class              #318          // java/lang/String\n-  #199 = Class              #292          // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n-  #200 = Utf8               signedByteToUnsignedInt\n-  #201 = Utf8               (B)I\n-  #202 = Utf8               b\n-  #203 = Utf8               supportsEncryptionOf\n-  #204 = Utf8               supportsMethodOf\n-  #205 = Utf8               toDosTime\n-  #206 = Utf8               (Ljava/util/Date;)Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-  #207 = Utf8               Ljava/util/Date;\n-  #208 = Utf8               (J)[B\n-  #209 = Utf8               result\n-  #210 = Utf8               (J[BI)V\n-  #211 = Utf8               buf\n-  #212 = Utf8               unsignedIntToSignedByte\n-  #213 = Utf8               (I)B\n-  #214 = Utf8               SourceFile\n-  #215 = Utf8               ZipUtil.java\n-  #216 = NameAndType        #105:#106     // \"<init>\":()V\n-  #217 = Utf8               java/lang/Integer\n-  #218 = Class              #319          // java/math/BigInteger\n-  #219 = NameAndType        #320:#321     // bitLength:()I\n-  #220 = NameAndType        #322:#323     // longValue:()J\n-  #221 = Utf8               java/lang/NumberFormatException\n-  #222 = Utf8               java/lang/StringBuilder\n-  #223 = Utf8               The BigInteger cannot fit inside a 64 bit java long: [\n-  #224 = NameAndType        #324:#325     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #225 = NameAndType        #324:#326     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #226 = Utf8               ]\n-  #227 = NameAndType        #327:#328     // toString:()Ljava/lang/String;\n-  #228 = NameAndType        #105:#329     // \"<init>\":(Ljava/lang/String;)V\n-  #229 = NameAndType        #203:#122     // supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #230 = NameAndType        #204:#122     // supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-  #231 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-  #232 = Class              #330          // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n-  #233 = NameAndType        #333:#334     // ENCRYPTION:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #234 = NameAndType        #105:#335     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #235 = Class              #336          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #236 = NameAndType        #337:#321     // getMethod:()I\n-  #237 = Class              #314          // org/apache/commons/compress/archivers/zip/ZipMethod\n-  #238 = NameAndType        #338:#339     // getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #239 = NameAndType        #340:#334     // METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #240 = NameAndType        #105:#341     // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #241 = Class              #342          // java/util/Arrays\n-  #242 = NameAndType        #343:#344     // copyOf:([BI)[B\n-  #243 = Class              #345          // java/lang/System\n-  #244 = NameAndType        #346:#347     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #245 = NameAndType        #348:#349     // getInstance:()Ljava/util/Calendar;\n-  #246 = Utf8               java/util/Calendar\n-  #247 = NameAndType        #350:#351     // set:(II)V\n-  #248 = NameAndType        #352:#353     // getTime:()Ljava/util/Date;\n-  #249 = NameAndType        #139:#140     // dosToJavaDate:(J)Ljava/util/Date;\n-  #250 = Class              #354          // java/util/Date\n-  #251 = NameAndType        #352:#323     // getTime:()J\n-  #252 = NameAndType        #355:#323     // getValue:()J\n-  #253 = Utf8               java/util/zip/CRC32\n-  #254 = NameAndType        #356:#357     // update:([B)V\n-  #255 = Class              #315          // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField\n-  #256 = NameAndType        #358:#323     // getNameCRC32:()J\n-  #257 = Class              #359          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #258 = NameAndType        #360:#361     // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #259 = NameAndType        #362:#363     // getUnicodeName:()[B\n-  #260 = Class              #364          // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #261 = NameAndType        #365:#366     // decode:([B)Ljava/lang/String;\n-  #262 = Utf8               java/io/IOException\n-  #263 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n-  #264 = NameAndType        #169:#145     // javaToDosTime:(J)J\n-  #265 = Class              #367          // java/time/Instant\n-  #266 = NameAndType        #368:#369     // ofEpochMilli:(J)Ljava/time/Instant;\n-  #267 = Class              #370          // java/time/ZoneId\n-  #268 = NameAndType        #371:#372     // systemDefault:()Ljava/time/ZoneId;\n-  #269 = Class              #316          // java/time/LocalDateTime\n-  #270 = NameAndType        #373:#374     // ofInstant:(Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/LocalDateTime;\n-  #271 = NameAndType        #165:#166     // javaEpochToLocalDateTime:(J)Ljava/time/LocalDateTime;\n-  #272 = NameAndType        #375:#321     // getYear:()I\n-  #273 = NameAndType        #376:#321     // getMonthValue:()I\n-  #274 = NameAndType        #377:#321     // getDayOfMonth:()I\n-  #275 = NameAndType        #378:#321     // getHour:()I\n-  #276 = NameAndType        #379:#321     // getMinute:()I\n-  #277 = NameAndType        #380:#321     // getSecond:()I\n-  #278 = Utf8               java/lang/IllegalArgumentException\n-  #279 = Utf8               Negative longs < -2^31 not permitted: [\n-  #280 = NameAndType        #324:#381     // append:(J)Ljava/lang/StringBuilder;\n-  #281 = NameAndType        #112:#113     // adjustToLong:(I)J\n-  #282 = NameAndType        #382:#175     // valueOf:(J)Ljava/math/BigInteger;\n-  #283 = NameAndType        #383:#384     // UPATH_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #284 = NameAndType        #385:#386     // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #285 = Utf8               org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n-  #286 = NameAndType        #150:#151     // getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n-  #287 = NameAndType        #387:#329     // setName:(Ljava/lang/String;)V\n-  #288 = Class              #388          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n-  #289 = NameAndType        #390:#391     // UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-  #290 = NameAndType        #392:#393     // setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-  #291 = NameAndType        #394:#384     // UCOM_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #292 = Utf8               org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n-  #293 = NameAndType        #395:#329     // setComment:(Ljava/lang/String;)V\n-  #294 = Class              #396          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource\n-  #295 = NameAndType        #390:#398     // UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n-  #296 = NameAndType        #399:#400     // setCommentSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n-  #297 = NameAndType        #401:#402     // getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #298 = Class              #403          // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-  #299 = NameAndType        #404:#405     // usesEncryption:()Z\n-  #300 = NameAndType        #406:#128     // UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #301 = NameAndType        #407:#321     // getCode:()I\n-  #302 = NameAndType        #408:#128     // IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #303 = Utf8               java/util/zip/ZipEntry\n-  #304 = NameAndType        #409:#128     // ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #305 = NameAndType        #410:#128     // BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #306 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-  #307 = NameAndType        #205:#208     // toDosTime:(J)[B\n-  #308 = NameAndType        #105:#357     // \"<init>\":([B)V\n-  #309 = NameAndType        #205:#210     // toDosTime:(J[BI)V\n-  #310 = NameAndType        #411:#210     // putLong:(J[BI)V\n-  #311 = Utf8               Can only convert non-negative integers between [0,255] to byte: [\n-  #312 = NameAndType        #324:#412     // append:(I)Ljava/lang/StringBuilder;\n-  #313 = Utf8               java/lang/Object\n-  #314 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n-  #315 = Utf8               org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField\n-  #316 = Utf8               java/time/LocalDateTime\n-  #317 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n-  #318 = Utf8               java/lang/String\n-  #319 = Utf8               java/math/BigInteger\n-  #320 = Utf8               bitLength\n-  #321 = Utf8               ()I\n-  #322 = Utf8               longValue\n-  #323 = Utf8               ()J\n-  #324 = Utf8               append\n-  #325 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #326 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #327 = Utf8               toString\n-  #328 = Utf8               ()Ljava/lang/String;\n-  #329 = Utf8               (Ljava/lang/String;)V\n-  #330 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n-  #331 = Utf8               Feature\n-  #332 = Utf8               InnerClasses\n-  #333 = Utf8               ENCRYPTION\n-  #334 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n-  #335 = Utf8               (Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #336 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  #337 = Utf8               getMethod\n-  #338 = Utf8               getMethodByCode\n-  #339 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-  #340 = Utf8               METHOD\n-  #341 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n-  #342 = Utf8               java/util/Arrays\n-  #343 = Utf8               copyOf\n-  #344 = Utf8               ([BI)[B\n-  #345 = Utf8               java/lang/System\n-  #346 = Utf8               arraycopy\n-  #347 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #348 = Utf8               getInstance\n-  #349 = Utf8               ()Ljava/util/Calendar;\n-  #350 = Utf8               set\n-  #351 = Utf8               (II)V\n-  #352 = Utf8               getTime\n-  #353 = Utf8               ()Ljava/util/Date;\n-  #354 = Utf8               java/util/Date\n-  #355 = Utf8               getValue\n-  #356 = Utf8               update\n-  #357 = Utf8               ([B)V\n-  #358 = Utf8               getNameCRC32\n-  #359 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n-  #360 = Utf8               UTF8_ZIP_ENCODING\n-  #361 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #362 = Utf8               getUnicodeName\n-  #363 = Utf8               ()[B\n-  #364 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #365 = Utf8               decode\n-  #366 = Utf8               ([B)Ljava/lang/String;\n-  #367 = Utf8               java/time/Instant\n-  #368 = Utf8               ofEpochMilli\n-  #369 = Utf8               (J)Ljava/time/Instant;\n-  #370 = Utf8               java/time/ZoneId\n-  #371 = Utf8               systemDefault\n-  #372 = Utf8               ()Ljava/time/ZoneId;\n-  #373 = Utf8               ofInstant\n-  #374 = Utf8               (Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/LocalDateTime;\n-  #375 = Utf8               getYear\n-  #376 = Utf8               getMonthValue\n-  #377 = Utf8               getDayOfMonth\n-  #378 = Utf8               getHour\n-  #379 = Utf8               getMinute\n-  #380 = Utf8               getSecond\n-  #381 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #382 = Utf8               valueOf\n-  #383 = Utf8               UPATH_ID\n-  #384 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #385 = Utf8               getExtraField\n-  #386 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-  #387 = Utf8               setName\n-  #388 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n-  #389 = Utf8               NameSource\n-  #390 = Utf8               UNICODE_EXTRA_FIELD\n-  #391 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-  #392 = Utf8               setNameSource\n-  #393 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n-  #394 = Utf8               UCOM_ID\n-  #395 = Utf8               setComment\n-  #396 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource\n-  #397 = Utf8               CommentSource\n-  #398 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n-  #399 = Utf8               setCommentSource\n-  #400 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n-  #401 = Utf8               getGeneralPurposeBit\n-  #402 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-  #403 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n-  #404 = Utf8               usesEncryption\n-  #405 = Utf8               ()Z\n-  #406 = Utf8               UNSHRINKING\n-  #407 = Utf8               getCode\n-  #408 = Utf8               IMPLODING\n-  #409 = Utf8               ENHANCED_DEFLATED\n-  #410 = Utf8               BZIP2\n-  #411 = Utf8               putLong\n-  #412 = Utf8               (I)Ljava/lang/StringBuilder;\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/zip/ZipUtil\n+    #2 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n+    #3 = Class              #4            // java/lang/Object\n+    #4 = Utf8               java/lang/Object\n+    #5 = Utf8               DOSTIME_BEFORE_1980\n+    #6 = Utf8               J\n+    #7 = Utf8               ConstantValue\n+    #8 = Long               2162688l\n+   #10 = Utf8               UPPER_DOSTIME_BOUND\n+   #11 = Long               4036608000000l\n+   #13 = Utf8               <init>\n+   #14 = Utf8               ()V\n+   #15 = Utf8               Code\n+   #16 = Methodref          #3.#17        // java/lang/Object.\"<init>\":()V\n+   #17 = NameAndType        #13:#14       // \"<init>\":()V\n+   #18 = Utf8               LineNumberTable\n+   #19 = Utf8               LocalVariableTable\n+   #20 = Utf8               this\n+   #21 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipUtil;\n+   #22 = Utf8               adjustToLong\n+   #23 = Utf8               (I)J\n+   #24 = Long               4294967296l\n+   #26 = Utf8               i\n+   #27 = Utf8               I\n+   #28 = Utf8               StackMapTable\n+   #29 = Utf8               bigToLong\n+   #30 = Utf8               (Ljava/math/BigInteger;)J\n+   #31 = Methodref          #32.#34       // java/math/BigInteger.bitLength:()I\n+   #32 = Class              #33           // java/math/BigInteger\n+   #33 = Utf8               java/math/BigInteger\n+   #34 = NameAndType        #35:#36       // bitLength:()I\n+   #35 = Utf8               bitLength\n+   #36 = Utf8               ()I\n+   #37 = Methodref          #32.#38       // java/math/BigInteger.longValue:()J\n+   #38 = NameAndType        #39:#40       // longValue:()J\n+   #39 = Utf8               longValue\n+   #40 = Utf8               ()J\n+   #41 = Class              #42           // java/lang/NumberFormatException\n+   #42 = Utf8               java/lang/NumberFormatException\n+   #43 = Class              #44           // java/lang/StringBuilder\n+   #44 = Utf8               java/lang/StringBuilder\n+   #45 = String             #46           // The BigInteger cannot fit inside a 64 bit java long: [\n+   #46 = Utf8               The BigInteger cannot fit inside a 64 bit java long: [\n+   #47 = Methodref          #43.#48       // java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+   #48 = NameAndType        #13:#49       // \"<init>\":(Ljava/lang/String;)V\n+   #49 = Utf8               (Ljava/lang/String;)V\n+   #50 = Methodref          #43.#51       // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #51 = NameAndType        #52:#53       // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #52 = Utf8               append\n+   #53 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #54 = String             #55           // ]\n+   #55 = Utf8               ]\n+   #56 = Methodref          #43.#57       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #57 = NameAndType        #52:#58       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #58 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #59 = Methodref          #43.#60       // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #60 = NameAndType        #61:#62       // toString:()Ljava/lang/String;\n+   #61 = Utf8               toString\n+   #62 = Utf8               ()Ljava/lang/String;\n+   #63 = Methodref          #41.#48       // java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n+   #64 = Utf8               big\n+   #65 = Utf8               Ljava/math/BigInteger;\n+   #66 = Utf8               canHandleEntryData\n+   #67 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #68 = Methodref          #1.#69        // org/apache/commons/compress/archivers/zip/ZipUtil.supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #69 = NameAndType        #70:#67       // supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #70 = Utf8               supportsEncryptionOf\n+   #71 = Methodref          #1.#72        // org/apache/commons/compress/archivers/zip/ZipUtil.supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #72 = NameAndType        #73:#67       // supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+   #73 = Utf8               supportsMethodOf\n+   #74 = Utf8               entry\n+   #75 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+   #76 = Utf8               checkRequestedFeatures\n+   #77 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #78 = Utf8               Exceptions\n+   #79 = Class              #80           // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+   #80 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+   #81 = Fieldref           #82.#84       // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.ENCRYPTION:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+   #82 = Class              #83           // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n+   #83 = Utf8               org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature\n+   #84 = NameAndType        #85:#86       // ENCRYPTION:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+   #85 = Utf8               ENCRYPTION\n+   #86 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+   #87 = Methodref          #79.#88       // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #88 = NameAndType        #13:#89       // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #89 = Utf8               (Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+   #90 = Methodref          #91.#93       // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+   #91 = Class              #92           // org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+   #92 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+   #93 = NameAndType        #94:#36       // getMethod:()I\n+   #94 = Utf8               getMethod\n+   #95 = Methodref          #96.#98       // org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #96 = Class              #97           // org/apache/commons/compress/archivers/zip/ZipMethod\n+   #97 = Utf8               org/apache/commons/compress/archivers/zip/ZipMethod\n+   #98 = NameAndType        #99:#100      // getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+   #99 = Utf8               getMethodByCode\n+  #100 = Utf8               (I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #101 = Fieldref           #82.#102      // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #102 = NameAndType        #103:#86      // METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+  #103 = Utf8               METHOD\n+  #104 = Methodref          #79.#105      // org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #105 = NameAndType        #13:#106      // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #106 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+  #107 = Utf8               ze\n+  #108 = Utf8               m\n+  #109 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #110 = Utf8               copy\n+  #111 = Utf8               ([B)[B\n+  #112 = Methodref          #113.#115     // java/util/Arrays.copyOf:([BI)[B\n+  #113 = Class              #114          // java/util/Arrays\n+  #114 = Utf8               java/util/Arrays\n+  #115 = NameAndType        #116:#117     // copyOf:([BI)[B\n+  #116 = Utf8               copyOf\n+  #117 = Utf8               ([BI)[B\n+  #118 = Utf8               from\n+  #119 = Utf8               [B\n+  #120 = Utf8               ([B[BI)V\n+  #121 = Methodref          #122.#124     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #122 = Class              #123          // java/lang/System\n+  #123 = Utf8               java/lang/System\n+  #124 = NameAndType        #125:#126     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #125 = Utf8               arraycopy\n+  #126 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #127 = Utf8               to\n+  #128 = Utf8               offset\n+  #129 = Utf8               dosToJavaDate\n+  #130 = Utf8               (J)Ljava/util/Date;\n+  #131 = Methodref          #132.#134     // java/util/Calendar.getInstance:()Ljava/util/Calendar;\n+  #132 = Class              #133          // java/util/Calendar\n+  #133 = Utf8               java/util/Calendar\n+  #134 = NameAndType        #135:#136     // getInstance:()Ljava/util/Calendar;\n+  #135 = Utf8               getInstance\n+  #136 = Utf8               ()Ljava/util/Calendar;\n+  #137 = Long               127l\n+  #139 = Methodref          #132.#140     // java/util/Calendar.set:(II)V\n+  #140 = NameAndType        #141:#142     // set:(II)V\n+  #141 = Utf8               set\n+  #142 = Utf8               (II)V\n+  #143 = Long               15l\n+  #145 = Methodref          #132.#146     // java/util/Calendar.getTime:()Ljava/util/Date;\n+  #146 = NameAndType        #147:#148     // getTime:()Ljava/util/Date;\n+  #147 = Utf8               getTime\n+  #148 = Utf8               ()Ljava/util/Date;\n+  #149 = Utf8               dosTime\n+  #150 = Utf8               cal\n+  #151 = Utf8               Ljava/util/Calendar;\n+  #152 = Utf8               dosToJavaTime\n+  #153 = Utf8               (J)J\n+  #154 = Methodref          #1.#155       // org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaDate:(J)Ljava/util/Date;\n+  #155 = NameAndType        #129:#130     // dosToJavaDate:(J)Ljava/util/Date;\n+  #156 = Methodref          #157.#159     // java/util/Date.getTime:()J\n+  #157 = Class              #158          // java/util/Date\n+  #158 = Utf8               java/util/Date\n+  #159 = NameAndType        #147:#40      // getTime:()J\n+  #160 = Utf8               fromDosTime\n+  #161 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipLong;)Ljava/util/Date;\n+  #162 = Methodref          #163.#165     // org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+  #163 = Class              #164          // org/apache/commons/compress/archivers/zip/ZipLong\n+  #164 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+  #165 = NameAndType        #166:#40      // getValue:()J\n+  #166 = Utf8               getValue\n+  #167 = Utf8               zipDosTime\n+  #168 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #169 = Utf8               getUnicodeStringIfOriginalMatches\n+  #170 = Utf8               (Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n+  #171 = Class              #172          // java/util/zip/CRC32\n+  #172 = Utf8               java/util/zip/CRC32\n+  #173 = Methodref          #171.#17      // java/util/zip/CRC32.\"<init>\":()V\n+  #174 = Methodref          #171.#175     // java/util/zip/CRC32.update:([B)V\n+  #175 = NameAndType        #176:#177     // update:([B)V\n+  #176 = Utf8               update\n+  #177 = Utf8               ([B)V\n+  #178 = Methodref          #171.#165     // java/util/zip/CRC32.getValue:()J\n+  #179 = Methodref          #180.#182     // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getNameCRC32:()J\n+  #180 = Class              #181          // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField\n+  #181 = Utf8               org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField\n+  #182 = NameAndType        #183:#40      // getNameCRC32:()J\n+  #183 = Utf8               getNameCRC32\n+  #184 = Fieldref           #185.#187     // org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #185 = Class              #186          // org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #186 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncodingHelper\n+  #187 = NameAndType        #188:#189     // UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #188 = Utf8               UTF8_ZIP_ENCODING\n+  #189 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #190 = Methodref          #180.#191     // org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getUnicodeName:()[B\n+  #191 = NameAndType        #192:#193     // getUnicodeName:()[B\n+  #192 = Utf8               getUnicodeName\n+  #193 = Utf8               ()[B\n+  #194 = InterfaceMethodref #195.#197     // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+  #195 = Class              #196          // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #196 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #197 = NameAndType        #198:#199     // decode:([B)Ljava/lang/String;\n+  #198 = Utf8               decode\n+  #199 = Utf8               ([B)Ljava/lang/String;\n+  #200 = Class              #201          // java/io/IOException\n+  #201 = Utf8               java/io/IOException\n+  #202 = Utf8               f\n+  #203 = Utf8               Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;\n+  #204 = Utf8               orig\n+  #205 = Utf8               crc32\n+  #206 = Utf8               Ljava/util/zip/CRC32;\n+  #207 = Utf8               origCRC32\n+  #208 = Class              #119          // \"[B\"\n+  #209 = Utf8               isDosTime\n+  #210 = Utf8               (J)Z\n+  #211 = Methodref          #1.#212       // org/apache/commons/compress/archivers/zip/ZipUtil.javaToDosTime:(J)J\n+  #212 = NameAndType        #213:#153     // javaToDosTime:(J)J\n+  #213 = Utf8               javaToDosTime\n+  #214 = Utf8               time\n+  #215 = Utf8               javaEpochToLocalDateTime\n+  #216 = Utf8               (J)Ljava/time/LocalDateTime;\n+  #217 = Methodref          #218.#220     // java/time/Instant.ofEpochMilli:(J)Ljava/time/Instant;\n+  #218 = Class              #219          // java/time/Instant\n+  #219 = Utf8               java/time/Instant\n+  #220 = NameAndType        #221:#222     // ofEpochMilli:(J)Ljava/time/Instant;\n+  #221 = Utf8               ofEpochMilli\n+  #222 = Utf8               (J)Ljava/time/Instant;\n+  #223 = Methodref          #224.#226     // java/time/ZoneId.systemDefault:()Ljava/time/ZoneId;\n+  #224 = Class              #225          // java/time/ZoneId\n+  #225 = Utf8               java/time/ZoneId\n+  #226 = NameAndType        #227:#228     // systemDefault:()Ljava/time/ZoneId;\n+  #227 = Utf8               systemDefault\n+  #228 = Utf8               ()Ljava/time/ZoneId;\n+  #229 = Methodref          #230.#232     // java/time/LocalDateTime.ofInstant:(Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/LocalDateTime;\n+  #230 = Class              #231          // java/time/LocalDateTime\n+  #231 = Utf8               java/time/LocalDateTime\n+  #232 = NameAndType        #233:#234     // ofInstant:(Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/LocalDateTime;\n+  #233 = Utf8               ofInstant\n+  #234 = Utf8               (Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/LocalDateTime;\n+  #235 = Utf8               instant\n+  #236 = Utf8               Ljava/time/Instant;\n+  #237 = Methodref          #1.#238       // org/apache/commons/compress/archivers/zip/ZipUtil.javaEpochToLocalDateTime:(J)Ljava/time/LocalDateTime;\n+  #238 = NameAndType        #215:#216     // javaEpochToLocalDateTime:(J)Ljava/time/LocalDateTime;\n+  #239 = Methodref          #230.#240     // java/time/LocalDateTime.getYear:()I\n+  #240 = NameAndType        #241:#36      // getYear:()I\n+  #241 = Utf8               getYear\n+  #242 = Methodref          #230.#243     // java/time/LocalDateTime.getMonthValue:()I\n+  #243 = NameAndType        #244:#36      // getMonthValue:()I\n+  #244 = Utf8               getMonthValue\n+  #245 = Methodref          #230.#246     // java/time/LocalDateTime.getDayOfMonth:()I\n+  #246 = NameAndType        #247:#36      // getDayOfMonth:()I\n+  #247 = Utf8               getDayOfMonth\n+  #248 = Methodref          #230.#249     // java/time/LocalDateTime.getHour:()I\n+  #249 = NameAndType        #250:#36      // getHour:()I\n+  #250 = Utf8               getHour\n+  #251 = Methodref          #230.#252     // java/time/LocalDateTime.getMinute:()I\n+  #252 = NameAndType        #253:#36      // getMinute:()I\n+  #253 = Utf8               getMinute\n+  #254 = Methodref          #230.#255     // java/time/LocalDateTime.getSecond:()I\n+  #255 = NameAndType        #256:#36      // getSecond:()I\n+  #256 = Utf8               getSecond\n+  #257 = Long               4294967295l\n+  #259 = Utf8               t\n+  #260 = Utf8               ldt\n+  #261 = Utf8               Ljava/time/LocalDateTime;\n+  #262 = Utf8               longToBig\n+  #263 = Utf8               (J)Ljava/math/BigInteger;\n+  #264 = Long               -2147483648l\n+  #266 = Class              #267          // java/lang/IllegalArgumentException\n+  #267 = Utf8               java/lang/IllegalArgumentException\n+  #268 = String             #269          // Negative longs < -2^31 not permitted: [\n+  #269 = Utf8               Negative longs < -2^31 not permitted: [\n+  #270 = Methodref          #43.#271      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+  #271 = NameAndType        #52:#272      // append:(J)Ljava/lang/StringBuilder;\n+  #272 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #273 = Methodref          #266.#48      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+  #274 = Methodref          #1.#275       // org/apache/commons/compress/archivers/zip/ZipUtil.adjustToLong:(I)J\n+  #275 = NameAndType        #22:#23       // adjustToLong:(I)J\n+  #276 = Methodref          #32.#277      // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+  #277 = NameAndType        #278:#263     // valueOf:(J)Ljava/math/BigInteger;\n+  #278 = Utf8               valueOf\n+  #279 = Utf8               l\n+  #280 = Utf8               reverse\n+  #281 = Utf8               array\n+  #282 = Utf8               z\n+  #283 = Utf8               x\n+  #284 = Utf8               B\n+  #285 = Utf8               setNameAndCommentFromExtraFields\n+  #286 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n+  #287 = Fieldref           #288.#290     // org/apache/commons/compress/archivers/zip/UnicodePathExtraField.UPATH_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #288 = Class              #289          // org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n+  #289 = Utf8               org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n+  #290 = NameAndType        #291:#292     // UPATH_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #291 = Utf8               UPATH_ID\n+  #292 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #293 = Methodref          #91.#294      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #294 = NameAndType        #295:#296     // getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #295 = Utf8               getExtraField\n+  #296 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #297 = Methodref          #1.#298       // org/apache/commons/compress/archivers/zip/ZipUtil.getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n+  #298 = NameAndType        #169:#170     // getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n+  #299 = Methodref          #91.#300      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setName:(Ljava/lang/String;)V\n+  #300 = NameAndType        #301:#49      // setName:(Ljava/lang/String;)V\n+  #301 = Utf8               setName\n+  #302 = Fieldref           #303.#305     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+  #303 = Class              #304          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n+  #304 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource\n+  #305 = NameAndType        #306:#307     // UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+  #306 = Utf8               UNICODE_EXTRA_FIELD\n+  #307 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+  #308 = Methodref          #91.#309      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+  #309 = NameAndType        #310:#311     // setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+  #310 = Utf8               setNameSource\n+  #311 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+  #312 = Fieldref           #313.#315     // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.UCOM_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #313 = Class              #314          // org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n+  #314 = Utf8               org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n+  #315 = NameAndType        #316:#292     // UCOM_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #316 = Utf8               UCOM_ID\n+  #317 = Methodref          #91.#318      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setComment:(Ljava/lang/String;)V\n+  #318 = NameAndType        #319:#49      // setComment:(Ljava/lang/String;)V\n+  #319 = Utf8               setComment\n+  #320 = Fieldref           #321.#323     // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n+  #321 = Class              #322          // org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource\n+  #322 = Utf8               org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource\n+  #323 = NameAndType        #306:#324     // UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n+  #324 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n+  #325 = Methodref          #91.#326      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCommentSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n+  #326 = NameAndType        #327:#328     // setCommentSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n+  #327 = Utf8               setCommentSource\n+  #328 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n+  #329 = Utf8               originalNameBytes\n+  #330 = Utf8               commentBytes\n+  #331 = Utf8               nameCandidate\n+  #332 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+  #333 = Utf8               name\n+  #334 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnicodePathExtraField;\n+  #335 = Utf8               newName\n+  #336 = Utf8               Ljava/lang/String;\n+  #337 = Utf8               cmtCandidate\n+  #338 = Utf8               cmt\n+  #339 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnicodeCommentExtraField;\n+  #340 = Utf8               newComment\n+  #341 = Class              #342          // org/apache/commons/compress/archivers/zip/ZipExtraField\n+  #342 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n+  #343 = Class              #344          // java/lang/String\n+  #344 = Utf8               java/lang/String\n+  #345 = Utf8               signedByteToUnsignedInt\n+  #346 = Utf8               (B)I\n+  #347 = Utf8               b\n+  #348 = Methodref          #91.#349      // org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #349 = NameAndType        #350:#351     // getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #350 = Utf8               getGeneralPurposeBit\n+  #351 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+  #352 = Methodref          #353.#355     // org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesEncryption:()Z\n+  #353 = Class              #354          // org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+  #354 = Utf8               org/apache/commons/compress/archivers/zip/GeneralPurposeBit\n+  #355 = NameAndType        #356:#357     // usesEncryption:()Z\n+  #356 = Utf8               usesEncryption\n+  #357 = Utf8               ()Z\n+  #358 = Fieldref           #96.#359      // org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #359 = NameAndType        #360:#109     // UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #360 = Utf8               UNSHRINKING\n+  #361 = Methodref          #96.#362      // org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+  #362 = NameAndType        #363:#36      // getCode:()I\n+  #363 = Utf8               getCode\n+  #364 = Fieldref           #96.#365      // org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #365 = NameAndType        #366:#109     // IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #366 = Utf8               IMPLODING\n+  #367 = Fieldref           #96.#368      // org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #368 = NameAndType        #369:#109     // ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #369 = Utf8               ENHANCED_DEFLATED\n+  #370 = Fieldref           #96.#371      // org/apache/commons/compress/archivers/zip/ZipMethod.BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #371 = NameAndType        #372:#109     // BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+  #372 = Utf8               BZIP2\n+  #373 = Utf8               toDosTime\n+  #374 = Utf8               (Ljava/util/Date;)Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #375 = Methodref          #1.#376       // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(J)[B\n+  #376 = NameAndType        #373:#377     // toDosTime:(J)[B\n+  #377 = Utf8               (J)[B\n+  #378 = Methodref          #163.#379     // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n+  #379 = NameAndType        #13:#177      // \"<init>\":([B)V\n+  #380 = Utf8               Ljava/util/Date;\n+  #381 = Methodref          #1.#382       // org/apache/commons/compress/archivers/zip/ZipUtil.toDosTime:(J[BI)V\n+  #382 = NameAndType        #373:#383     // toDosTime:(J[BI)V\n+  #383 = Utf8               (J[BI)V\n+  #384 = Utf8               result\n+  #385 = Methodref          #163.#386     // org/apache/commons/compress/archivers/zip/ZipLong.putLong:(J[BI)V\n+  #386 = NameAndType        #387:#383     // putLong:(J[BI)V\n+  #387 = Utf8               putLong\n+  #388 = Utf8               buf\n+  #389 = Utf8               unsignedIntToSignedByte\n+  #390 = Utf8               (I)B\n+  #391 = String             #392          // Can only convert non-negative integers between [0,255] to byte: [\n+  #392 = Utf8               Can only convert non-negative integers between [0,255] to byte: [\n+  #393 = Methodref          #43.#394      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+  #394 = NameAndType        #52:#395      // append:(I)Ljava/lang/StringBuilder;\n+  #395 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #396 = Utf8               SourceFile\n+  #397 = Utf8               ZipUtil.java\n+  #398 = Utf8               InnerClasses\n+  #399 = Utf8               Feature\n+  #400 = Utf8               CommentSource\n+  #401 = Utf8               NameSource\n {\n   private static final long DOSTIME_BEFORE_1980 = 2162688l;\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long 2162688l\n \n   private static final long UPPER_DOSTIME_BOUND = 4036608000000l;\n@@ -426,30 +415,30 @@\n \n   public org.apache.commons.compress.archivers.zip.ZipUtil();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #16                 // Method java/lang/Object.\"<init>\":()V\n          4: return\n       LineNumberTable:\n         line 35: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/ZipUtil;\n \n   public static long adjustToLong(int);\n     descriptor: (I)J\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=1, args_size=1\n          0: iload_0\n          1: ifge          11\n-         4: ldc2_w        #3                  // long 4294967296l\n+         4: ldc2_w        #24                 // long 4294967296l\n          7: iload_0\n          8: i2l\n          9: ladd\n         10: lreturn\n         11: iload_0\n         12: i2l\n         13: lreturn\n@@ -463,141 +452,144 @@\n       StackMapTable: number_of_entries = 1\n         frame_type = 11 /* same */\n \n   static long bigToLong(java.math.BigInteger);\n     descriptor: (Ljava/math/BigInteger;)J\n     flags: (0x0008) ACC_STATIC\n     Code:\n-      stack=4, locals=1, args_size=1\n+      stack=5, locals=1, args_size=1\n          0: aload_0\n-         1: invokevirtual #5                  // Method java/math/BigInteger.bitLength:()I\n+         1: invokevirtual #31                 // Method java/math/BigInteger.bitLength:()I\n          4: bipush        63\n          6: if_icmpgt     14\n          9: aload_0\n-        10: invokevirtual #6                  // Method java/math/BigInteger.longValue:()J\n+        10: invokevirtual #37                 // Method java/math/BigInteger.longValue:()J\n         13: lreturn\n-        14: new           #7                  // class java/lang/NumberFormatException\n+        14: new           #41                 // class java/lang/NumberFormatException\n         17: dup\n-        18: new           #8                  // class java/lang/StringBuilder\n+        18: new           #43                 // class java/lang/StringBuilder\n         21: dup\n-        22: invokespecial #9                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        25: ldc           #10                 // String The BigInteger cannot fit inside a 64 bit java long: [\n-        27: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        30: aload_0\n-        31: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-        34: ldc           #13                 // String ]\n-        36: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        39: invokevirtual #14                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        42: invokespecial #15                 // Method java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n-        45: athrow\n+        22: ldc           #45                 // String The BigInteger cannot fit inside a 64 bit java long: [\n+        24: invokespecial #47                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+        27: aload_0\n+        28: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+        31: ldc           #54                 // String ]\n+        33: invokevirtual #56                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        36: invokevirtual #59                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        39: invokespecial #63                 // Method java/lang/NumberFormatException.\"<init>\":(Ljava/lang/String;)V\n+        42: athrow\n       LineNumberTable:\n         line 127: 0\n         line 128: 9\n         line 130: 14\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      46     0   big   Ljava/math/BigInteger;\n+            0      43     0   big   Ljava/math/BigInteger;\n       StackMapTable: number_of_entries = 1\n         frame_type = 14 /* same */\n \n   static boolean canHandleEntryData(org.apache.commons.compress.archivers.zip.ZipArchiveEntry);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokestatic  #16                 // Method supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-         4: ifeq          18\n+         1: invokestatic  #68                 // Method supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+         4: ifeq          16\n          7: aload_0\n-         8: invokestatic  #17                 // Method supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n-        11: ifeq          18\n+         8: invokestatic  #71                 // Method supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+        11: ifeq          16\n         14: iconst_1\n-        15: goto          19\n-        18: iconst_0\n-        19: ireturn\n+        15: ireturn\n+        16: iconst_0\n+        17: ireturn\n       LineNumberTable:\n         line 137: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      20     0 entry   Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-      StackMapTable: number_of_entries = 2\n-        frame_type = 18 /* same */\n-        frame_type = 64 /* same_locals_1_stack_item */\n-          stack = [ int ]\n+            0      18     0 entry   Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+      StackMapTable: number_of_entries = 1\n+        frame_type = 16 /* same */\n \n   static void checkRequestedFeatures(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) throws org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException;\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n     flags: (0x0008) ACC_STATIC\n+    Exceptions:\n+      throws org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException\n     Code:\n       stack=4, locals=2, args_size=1\n          0: aload_0\n-         1: invokestatic  #16                 // Method supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+         1: invokestatic  #68                 // Method supportsEncryptionOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n          4: ifne          19\n-         7: new           #18                 // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+         7: new           #79                 // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n         10: dup\n-        11: getstatic     #19                 // Field org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.ENCRYPTION:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+        11: getstatic     #81                 // Field org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.ENCRYPTION:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n         14: aload_0\n-        15: invokespecial #20                 // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+        15: invokespecial #87                 // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n         18: athrow\n         19: aload_0\n-        20: invokestatic  #17                 // Method supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n+        20: invokestatic  #71                 // Method supportsMethodOf:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n         23: ifne          60\n         26: aload_0\n-        27: invokevirtual #21                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-        30: invokestatic  #22                 // Method org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+        27: invokevirtual #90                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        30: invokestatic  #95                 // Method org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n         33: astore_1\n         34: aload_1\n         35: ifnonnull     50\n-        38: new           #18                 // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+        38: new           #79                 // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n         41: dup\n-        42: getstatic     #23                 // Field org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n+        42: getstatic     #101                // Field org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature.METHOD:Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;\n         45: aload_0\n-        46: invokespecial #20                 // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+        46: invokespecial #87                 // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n         49: athrow\n-        50: new           #18                 // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+        50: new           #79                 // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n         53: dup\n         54: aload_1\n         55: aload_0\n-        56: invokespecial #24                 // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n+        56: invokespecial #104                // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V\n         59: athrow\n         60: return\n       LineNumberTable:\n         line 146: 0\n-        line 147: 7\n+        line 148: 7\n+        line 149: 11\n+        line 148: 15\n+        line 147: 18\n         line 151: 19\n         line 152: 26\n         line 153: 34\n-        line 154: 38\n+        line 155: 38\n+        line 156: 42\n+        line 155: 46\n+        line 154: 49\n         line 158: 50\n         line 160: 60\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           34      26     1     m   Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n             0      61     0    ze   Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+           34      26     1     m   Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n       StackMapTable: number_of_entries = 3\n         frame_type = 19 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 30\n           locals = [ class org/apache/commons/compress/archivers/zip/ZipMethod ]\n         frame_type = 250 /* chop */\n           offset_delta = 9\n-    Exceptions:\n-      throws org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException\n \n   static byte[] copy(byte[]);\n     descriptor: ([B)[B\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: ifnull        11\n          4: aload_0\n          5: aload_0\n          6: arraylength\n-         7: invokestatic  #25                 // Method java/util/Arrays.copyOf:([BI)[B\n+         7: invokestatic  #112                // Method java/util/Arrays.copyOf:([BI)[B\n         10: areturn\n         11: aconst_null\n         12: areturn\n       LineNumberTable:\n         line 167: 0\n         line 168: 4\n         line 170: 11\n@@ -616,15 +608,15 @@\n          1: ifnull        13\n          4: aload_0\n          5: iconst_0\n          6: aload_1\n          7: iload_2\n          8: aload_0\n          9: arraylength\n-        10: invokestatic  #26                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        10: invokestatic  #121                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         13: return\n       LineNumberTable:\n         line 175: 0\n         line 176: 4\n         line 178: 13\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -635,80 +627,80 @@\n         frame_type = 13 /* same */\n \n   private static java.util.Date dosToJavaDate(long);\n     descriptor: (J)Ljava/util/Date;\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=6, locals=3, args_size=1\n-         0: invokestatic  #27                 // Method java/util/Calendar.getInstance:()Ljava/util/Calendar;\n+         0: invokestatic  #131                // Method java/util/Calendar.getInstance:()Ljava/util/Calendar;\n          3: astore_2\n          4: aload_2\n          5: iconst_1\n          6: lload_0\n          7: bipush        25\n          9: lshr\n-        10: ldc2_w        #29                 // long 127l\n+        10: ldc2_w        #137                // long 127l\n         13: land\n         14: l2i\n         15: sipush        1980\n         18: iadd\n-        19: invokevirtual #31                 // Method java/util/Calendar.set:(II)V\n+        19: invokevirtual #139                // Method java/util/Calendar.set:(II)V\n         22: aload_2\n         23: iconst_2\n         24: lload_0\n         25: bipush        21\n         27: lshr\n-        28: ldc2_w        #32                 // long 15l\n+        28: ldc2_w        #143                // long 15l\n         31: land\n         32: l2i\n         33: iconst_1\n         34: isub\n-        35: invokevirtual #31                 // Method java/util/Calendar.set:(II)V\n+        35: invokevirtual #139                // Method java/util/Calendar.set:(II)V\n         38: aload_2\n         39: iconst_5\n         40: lload_0\n         41: bipush        16\n         43: lshr\n         44: l2i\n         45: bipush        31\n         47: iand\n-        48: invokevirtual #31                 // Method java/util/Calendar.set:(II)V\n+        48: invokevirtual #139                // Method java/util/Calendar.set:(II)V\n         51: aload_2\n         52: bipush        11\n         54: lload_0\n         55: bipush        11\n         57: lshr\n         58: l2i\n         59: bipush        31\n         61: iand\n-        62: invokevirtual #31                 // Method java/util/Calendar.set:(II)V\n+        62: invokevirtual #139                // Method java/util/Calendar.set:(II)V\n         65: aload_2\n         66: bipush        12\n         68: lload_0\n         69: iconst_5\n         70: lshr\n         71: l2i\n         72: bipush        63\n         74: iand\n-        75: invokevirtual #31                 // Method java/util/Calendar.set:(II)V\n+        75: invokevirtual #139                // Method java/util/Calendar.set:(II)V\n         78: aload_2\n         79: bipush        13\n         81: lload_0\n         82: iconst_1\n         83: lshl\n         84: l2i\n         85: bipush        62\n         87: iand\n-        88: invokevirtual #31                 // Method java/util/Calendar.set:(II)V\n+        88: invokevirtual #139                // Method java/util/Calendar.set:(II)V\n         91: aload_2\n         92: bipush        14\n         94: iconst_0\n-        95: invokevirtual #31                 // Method java/util/Calendar.set:(II)V\n+        95: invokevirtual #139                // Method java/util/Calendar.set:(II)V\n         98: aload_2\n-        99: invokevirtual #34                 // Method java/util/Calendar.getTime:()Ljava/util/Date;\n+        99: invokevirtual #145                // Method java/util/Calendar.getTime:()Ljava/util/Date;\n        102: areturn\n       LineNumberTable:\n         line 181: 0\n         line 183: 4\n         line 184: 22\n         line 185: 38\n         line 186: 51\n@@ -723,139 +715,136 @@\n \n   public static long dosToJavaTime(long);\n     descriptor: (J)J\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=2, args_size=1\n          0: lload_0\n-         1: invokestatic  #35                 // Method dosToJavaDate:(J)Ljava/util/Date;\n-         4: invokevirtual #36                 // Method java/util/Date.getTime:()J\n+         1: invokestatic  #154                // Method dosToJavaDate:(J)Ljava/util/Date;\n+         4: invokevirtual #156                // Method java/util/Date.getTime:()J\n          7: lreturn\n       LineNumberTable:\n         line 201: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0 dosTime   J\n \n   public static java.util.Date fromDosTime(org.apache.commons.compress.archivers.zip.ZipLong);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipLong;)Ljava/util/Date;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=2, locals=3, args_size=1\n          0: aload_0\n-         1: invokevirtual #37                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n+         1: invokevirtual #162                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J\n          4: lstore_1\n          5: lload_1\n-         6: invokestatic  #35                 // Method dosToJavaDate:(J)Ljava/util/Date;\n+         6: invokestatic  #154                // Method dosToJavaDate:(J)Ljava/util/Date;\n          9: areturn\n       LineNumberTable:\n         line 211: 0\n         line 212: 5\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0 zipDosTime   Lorg/apache/commons/compress/archivers/zip/ZipLong;\n             5       5     1 dosTime   J\n \n   private static java.lang.String getUnicodeStringIfOriginalMatches(org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField, byte[]);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n-      stack=4, locals=6, args_size=2\n+      stack=4, locals=5, args_size=2\n          0: aload_0\n-         1: ifnull        46\n-         4: new           #38                 // class java/util/zip/CRC32\n+         1: ifnull        45\n+         4: new           #171                // class java/util/zip/CRC32\n          7: dup\n-         8: invokespecial #39                 // Method java/util/zip/CRC32.\"<init>\":()V\n+         8: invokespecial #173                // Method java/util/zip/CRC32.\"<init>\":()V\n         11: astore_2\n         12: aload_2\n         13: aload_1\n-        14: invokevirtual #40                 // Method java/util/zip/CRC32.update:([B)V\n+        14: invokevirtual #174                // Method java/util/zip/CRC32.update:([B)V\n         17: aload_2\n-        18: invokevirtual #41                 // Method java/util/zip/CRC32.getValue:()J\n+        18: invokevirtual #178                // Method java/util/zip/CRC32.getValue:()J\n         21: lstore_3\n         22: lload_3\n         23: aload_0\n-        24: invokevirtual #42                 // Method org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getNameCRC32:()J\n+        24: invokevirtual #179                // Method org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getNameCRC32:()J\n         27: lcmp\n-        28: ifne          46\n-        31: getstatic     #43                 // Field org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+        28: ifne          45\n+        31: getstatic     #184                // Field org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n         34: aload_0\n-        35: invokevirtual #44                 // Method org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getUnicodeName:()[B\n-        38: invokeinterface #45,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+        35: invokevirtual #190                // Method org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.getUnicodeName:()[B\n+        38: invokeinterface #194,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n         43: areturn\n-        44: astore        5\n-        46: aconst_null\n-        47: areturn\n+        44: pop\n+        45: aconst_null\n+        46: areturn\n       Exception table:\n          from    to  target type\n             31    43    44   Class java/io/IOException\n       LineNumberTable:\n         line 225: 0\n         line 226: 4\n         line 227: 12\n         line 228: 17\n         line 230: 22\n-        line 232: 31\n-        line 233: 35\n+        line 233: 31\n         line 232: 43\n         line 234: 44\n-        line 241: 46\n+        line 241: 45\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           12      34     2 crc32   Ljava/util/zip/CRC32;\n-           22      24     3 origCRC32   J\n-            0      48     0     f   Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;\n-            0      48     1  orig   [B\n+            0      47     0     f   Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;\n+            0      47     1  orig   [B\n+           12      33     2 crc32   Ljava/util/zip/CRC32;\n+           22      23     3 origCRC32   J\n       StackMapTable: number_of_entries = 2\n         frame_type = 255 /* full_frame */\n           offset_delta = 44\n           locals = [ class org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField, class \"[B\", class java/util/zip/CRC32, long ]\n           stack = [ class java/io/IOException ]\n         frame_type = 249 /* chop */\n-          offset_delta = 1\n+          offset_delta = 0\n \n   public static boolean isDosTime(long);\n     descriptor: (J)Z\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=2, args_size=1\n          0: lload_0\n-         1: ldc2_w        #48                 // long 4036608000000l\n+         1: ldc2_w        #11                 // long 4036608000000l\n          4: lcmp\n-         5: ifgt          23\n+         5: ifgt          21\n          8: lload_0\n-         9: invokestatic  #50                 // Method javaToDosTime:(J)J\n-        12: ldc2_w        #51                 // long 2162688l\n+         9: invokestatic  #211                // Method javaToDosTime:(J)J\n+        12: ldc2_w        #8                  // long 2162688l\n         15: lcmp\n-        16: ifeq          23\n+        16: ifeq          21\n         19: iconst_1\n-        20: goto          24\n-        23: iconst_0\n-        24: ireturn\n+        20: ireturn\n+        21: iconst_0\n+        22: ireturn\n       LineNumberTable:\n         line 252: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      25     0  time   J\n-      StackMapTable: number_of_entries = 2\n-        frame_type = 23 /* same */\n-        frame_type = 64 /* same_locals_1_stack_item */\n-          stack = [ int ]\n+            0      23     0  time   J\n+      StackMapTable: number_of_entries = 1\n+        frame_type = 21 /* same */\n \n   private static java.time.LocalDateTime javaEpochToLocalDateTime(long);\n     descriptor: (J)Ljava/time/LocalDateTime;\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=2, locals=3, args_size=1\n          0: lload_0\n-         1: invokestatic  #53                 // Method java/time/Instant.ofEpochMilli:(J)Ljava/time/Instant;\n+         1: invokestatic  #217                // Method java/time/Instant.ofEpochMilli:(J)Ljava/time/Instant;\n          4: astore_2\n          5: aload_2\n-         6: invokestatic  #54                 // Method java/time/ZoneId.systemDefault:()Ljava/time/ZoneId;\n-         9: invokestatic  #55                 // Method java/time/LocalDateTime.ofInstant:(Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/LocalDateTime;\n+         6: invokestatic  #223                // Method java/time/ZoneId.systemDefault:()Ljava/time/ZoneId;\n+         9: invokestatic  #229                // Method java/time/LocalDateTime.ofInstant:(Ljava/time/Instant;Ljava/time/ZoneId;)Ljava/time/LocalDateTime;\n         12: areturn\n       LineNumberTable:\n         line 256: 0\n         line 257: 5\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      13     0  time   J\n@@ -863,68 +852,74 @@\n \n   private static long javaToDosTime(long);\n     descriptor: (J)J\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=4, locals=3, args_size=1\n          0: lload_0\n-         1: invokestatic  #56                 // Method javaEpochToLocalDateTime:(J)Ljava/time/LocalDateTime;\n+         1: invokestatic  #237                // Method javaEpochToLocalDateTime:(J)Ljava/time/LocalDateTime;\n          4: astore_2\n          5: aload_2\n-         6: invokevirtual #57                 // Method java/time/LocalDateTime.getYear:()I\n+         6: invokevirtual #239                // Method java/time/LocalDateTime.getYear:()I\n          9: sipush        1980\n         12: if_icmpge     19\n-        15: ldc2_w        #51                 // long 2162688l\n+        15: ldc2_w        #8                  // long 2162688l\n         18: lreturn\n         19: aload_2\n-        20: invokevirtual #57                 // Method java/time/LocalDateTime.getYear:()I\n+        20: invokevirtual #239                // Method java/time/LocalDateTime.getYear:()I\n         23: sipush        1980\n         26: isub\n         27: bipush        25\n         29: ishl\n         30: aload_2\n-        31: invokevirtual #58                 // Method java/time/LocalDateTime.getMonthValue:()I\n+        31: invokevirtual #242                // Method java/time/LocalDateTime.getMonthValue:()I\n         34: bipush        21\n         36: ishl\n         37: ior\n         38: aload_2\n-        39: invokevirtual #59                 // Method java/time/LocalDateTime.getDayOfMonth:()I\n+        39: invokevirtual #245                // Method java/time/LocalDateTime.getDayOfMonth:()I\n         42: bipush        16\n         44: ishl\n         45: ior\n         46: aload_2\n-        47: invokevirtual #60                 // Method java/time/LocalDateTime.getHour:()I\n+        47: invokevirtual #248                // Method java/time/LocalDateTime.getHour:()I\n         50: bipush        11\n         52: ishl\n         53: ior\n         54: aload_2\n-        55: invokevirtual #61                 // Method java/time/LocalDateTime.getMinute:()I\n+        55: invokevirtual #251                // Method java/time/LocalDateTime.getMinute:()I\n         58: iconst_5\n         59: ishl\n         60: ior\n         61: aload_2\n-        62: invokevirtual #62                 // Method java/time/LocalDateTime.getSecond:()I\n+        62: invokevirtual #254                // Method java/time/LocalDateTime.getSecond:()I\n         65: iconst_1\n         66: ishr\n         67: ior\n         68: i2l\n-        69: ldc2_w        #63                 // long 4294967295l\n+        69: ldc2_w        #257                // long 4294967295l\n         72: land\n         73: lreturn\n       LineNumberTable:\n         line 262: 0\n         line 263: 5\n         line 264: 15\n         line 266: 19\n-        line 267: 31\n-        line 268: 39\n-        line 269: 47\n-        line 270: 55\n-        line 271: 62\n-        line 266: 73\n+        line 267: 30\n+        line 266: 37\n+        line 268: 38\n+        line 266: 45\n+        line 269: 46\n+        line 266: 53\n+        line 270: 54\n+        line 266: 60\n+        line 271: 61\n+        line 266: 67\n+        line 271: 69\n+        line 266: 72\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      74     0     t   J\n             5      69     2   ldt   Ljava/time/LocalDateTime;\n       StackMapTable: number_of_entries = 1\n         frame_type = 252 /* append */\n           offset_delta = 19\n@@ -932,206 +927,210 @@\n \n   static java.math.BigInteger longToBig(long);\n     descriptor: (J)Ljava/math/BigInteger;\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=5, locals=2, args_size=1\n          0: lload_0\n-         1: ldc2_w        #65                 // long -2147483648l\n+         1: ldc2_w        #264                // long -2147483648l\n          4: lcmp\n-         5: ifge          40\n-         8: new           #67                 // class java/lang/IllegalArgumentException\n+         5: ifge          38\n+         8: new           #266                // class java/lang/IllegalArgumentException\n         11: dup\n-        12: new           #8                  // class java/lang/StringBuilder\n+        12: new           #43                 // class java/lang/StringBuilder\n         15: dup\n-        16: invokespecial #9                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        19: ldc           #68                 // String Negative longs < -2^31 not permitted: [\n-        21: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        24: lload_0\n-        25: invokevirtual #69                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-        28: ldc           #13                 // String ]\n-        30: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        33: invokevirtual #14                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        36: invokespecial #70                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-        39: athrow\n-        40: lload_0\n-        41: lconst_0\n-        42: lcmp\n-        43: ifge          60\n-        46: lload_0\n-        47: ldc2_w        #65                 // long -2147483648l\n-        50: lcmp\n-        51: iflt          60\n-        54: lload_0\n-        55: l2i\n-        56: invokestatic  #71                 // Method adjustToLong:(I)J\n-        59: lstore_0\n-        60: lload_0\n-        61: invokestatic  #72                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-        64: areturn\n+        16: ldc_w         #268                // String Negative longs < -2^31 not permitted: [\n+        19: invokespecial #47                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+        22: lload_0\n+        23: invokevirtual #270                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+        26: ldc           #54                 // String ]\n+        28: invokevirtual #56                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        31: invokevirtual #59                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        34: invokespecial #273                // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        37: athrow\n+        38: lload_0\n+        39: lconst_0\n+        40: lcmp\n+        41: ifge          58\n+        44: lload_0\n+        45: ldc2_w        #264                // long -2147483648l\n+        48: lcmp\n+        49: iflt          58\n+        52: lload_0\n+        53: l2i\n+        54: invokestatic  #274                // Method adjustToLong:(I)J\n+        57: lstore_0\n+        58: lload_0\n+        59: invokestatic  #276                // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+        62: areturn\n       LineNumberTable:\n         line 286: 0\n         line 287: 8\n-        line 289: 40\n-        line 292: 54\n-        line 294: 60\n+        line 289: 38\n+        line 292: 52\n+        line 294: 58\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      65     0     l   J\n+            0      63     0     l   J\n       StackMapTable: number_of_entries = 2\n-        frame_type = 40 /* same */\n+        frame_type = 38 /* same */\n         frame_type = 19 /* same */\n \n   public static byte[] reverse(byte[]);\n     descriptor: ([B)[B\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=5, locals=4, args_size=1\n          0: aload_0\n          1: arraylength\n          2: iconst_1\n          3: isub\n          4: istore_1\n          5: iconst_0\n          6: istore_2\n-         7: iload_2\n-         8: aload_0\n-         9: arraylength\n-        10: iconst_2\n-        11: idiv\n-        12: if_icmpge     39\n-        15: aload_0\n-        16: iload_2\n-        17: baload\n-        18: istore_3\n-        19: aload_0\n-        20: iload_2\n-        21: aload_0\n-        22: iload_1\n-        23: iload_2\n-        24: isub\n-        25: baload\n-        26: bastore\n-        27: aload_0\n-        28: iload_1\n-        29: iload_2\n-        30: isub\n-        31: iload_3\n-        32: bastore\n-        33: iinc          2, 1\n-        36: goto          7\n+         7: goto          31\n+        10: aload_0\n+        11: iload_2\n+        12: baload\n+        13: istore_3\n+        14: aload_0\n+        15: iload_2\n+        16: aload_0\n+        17: iload_1\n+        18: iload_2\n+        19: isub\n+        20: baload\n+        21: bastore\n+        22: aload_0\n+        23: iload_1\n+        24: iload_2\n+        25: isub\n+        26: iload_3\n+        27: bastore\n+        28: iinc          2, 1\n+        31: iload_2\n+        32: aload_0\n+        33: arraylength\n+        34: iconst_2\n+        35: idiv\n+        36: if_icmplt     10\n         39: aload_0\n         40: areturn\n       LineNumberTable:\n         line 309: 0\n         line 310: 5\n-        line 311: 15\n-        line 312: 19\n-        line 313: 27\n-        line 310: 33\n+        line 311: 10\n+        line 312: 14\n+        line 313: 22\n+        line 310: 28\n         line 315: 39\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           19      14     3     x   B\n-            7      32     2     i   I\n             0      41     0 array   [B\n             5      36     1     z   I\n+            7      32     2     i   I\n+           14      14     3     x   B\n       StackMapTable: number_of_entries = 2\n         frame_type = 253 /* append */\n-          offset_delta = 7\n+          offset_delta = 10\n           locals = [ int, int ]\n-        frame_type = 250 /* chop */\n-          offset_delta = 31\n+        frame_type = 20 /* same */\n \n   static void setNameAndCommentFromExtraFields(org.apache.commons.compress.archivers.zip.ZipArchiveEntry, byte[], byte[]);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=2, locals=9, args_size=3\n          0: aload_0\n-         1: getstatic     #73                 // Field org/apache/commons/compress/archivers/zip/UnicodePathExtraField.UPATH_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-         4: invokevirtual #74                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+         1: getstatic     #287                // Field org/apache/commons/compress/archivers/zip/UnicodePathExtraField.UPATH_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+         4: invokevirtual #293                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n          7: astore_3\n          8: aload_3\n-         9: instanceof    #75                 // class org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n+         9: instanceof    #288                // class org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n         12: ifeq          22\n         15: aload_3\n-        16: checkcast     #75                 // class org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n+        16: checkcast     #288                // class org/apache/commons/compress/archivers/zip/UnicodePathExtraField\n         19: goto          23\n         22: aconst_null\n         23: astore        4\n         25: aload         4\n         27: aload_1\n-        28: invokestatic  #76                 // Method getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n+        28: invokestatic  #297                // Method getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n         31: astore        5\n         33: aload         5\n         35: ifnull        51\n         38: aload_0\n         39: aload         5\n-        41: invokevirtual #77                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setName:(Ljava/lang/String;)V\n+        41: invokevirtual #299                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setName:(Ljava/lang/String;)V\n         44: aload_0\n-        45: getstatic     #78                 // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n-        48: invokevirtual #79                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n+        45: getstatic     #302                // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;\n+        48: invokevirtual #308                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V\n         51: aload_2\n         52: ifnull        114\n         55: aload_2\n         56: arraylength\n         57: ifle          114\n         60: aload_0\n-        61: getstatic     #80                 // Field org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.UCOM_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-        64: invokevirtual #74                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+        61: getstatic     #312                // Field org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.UCOM_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+        64: invokevirtual #293                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n         67: astore        6\n         69: aload         6\n-        71: instanceof    #81                 // class org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n+        71: instanceof    #313                // class org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n         74: ifeq          85\n         77: aload         6\n-        79: checkcast     #81                 // class org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n+        79: checkcast     #313                // class org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField\n         82: goto          86\n         85: aconst_null\n         86: astore        7\n         88: aload         7\n         90: aload_2\n-        91: invokestatic  #76                 // Method getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n+        91: invokestatic  #297                // Method getUnicodeStringIfOriginalMatches:(Lorg/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField;[B)Ljava/lang/String;\n         94: astore        8\n         96: aload         8\n         98: ifnull        114\n        101: aload_0\n        102: aload         8\n-       104: invokevirtual #82                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setComment:(Ljava/lang/String;)V\n+       104: invokevirtual #317                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setComment:(Ljava/lang/String;)V\n        107: aload_0\n-       108: getstatic     #83                 // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n-       111: invokevirtual #84                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCommentSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n+       108: getstatic     #320                // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource.UNICODE_EXTRA_FIELD:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;\n+       111: invokevirtual #325                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCommentSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource;)V\n        114: return\n       LineNumberTable:\n         line 326: 0\n         line 327: 8\n+        line 328: 15\n+        line 327: 23\n         line 329: 25\n+        line 330: 27\n+        line 329: 28\n         line 331: 33\n         line 332: 38\n         line 333: 44\n         line 336: 51\n         line 337: 60\n         line 338: 69\n-        line 340: 88\n-        line 341: 91\n+        line 339: 77\n+        line 338: 86\n+        line 341: 88\n+        line 340: 94\n         line 342: 96\n         line 343: 101\n         line 344: 107\n         line 347: 114\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           69      45     6 cmtCandidate   Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n-           88      26     7   cmt   Lorg/apache/commons/compress/archivers/zip/UnicodeCommentExtraField;\n-           96      18     8 newComment   Ljava/lang/String;\n             0     115     0    ze   Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n             0     115     1 originalNameBytes   [B\n             0     115     2 commentBytes   [B\n             8     107     3 nameCandidate   Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n            25      90     4  name   Lorg/apache/commons/compress/archivers/zip/UnicodePathExtraField;\n            33      82     5 newName   Ljava/lang/String;\n+           69      45     6 cmtCandidate   Lorg/apache/commons/compress/archivers/zip/ZipExtraField;\n+           88      26     7   cmt   Lorg/apache/commons/compress/archivers/zip/UnicodeCommentExtraField;\n+           96      18     8 newComment   Ljava/lang/String;\n       StackMapTable: number_of_entries = 6\n         frame_type = 252 /* append */\n           offset_delta = 22\n           locals = [ class org/apache/commons/compress/archivers/zip/ZipExtraField ]\n         frame_type = 64 /* same_locals_1_stack_item */\n           stack = [ class org/apache/commons/compress/archivers/zip/UnicodePathExtraField ]\n         frame_type = 253 /* append */\n@@ -1170,20 +1169,20 @@\n \n   private static boolean supportsEncryptionOf(org.apache.commons.compress.archivers.zip.ZipArchiveEntry);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokevirtual #85                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n-         4: invokevirtual #86                 // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesEncryption:()Z\n-         7: ifne          14\n-        10: iconst_1\n+         1: invokevirtual #348                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;\n+         4: invokevirtual #352                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesEncryption:()Z\n+         7: ifeq          14\n+        10: iconst_0\n         11: goto          15\n-        14: iconst_0\n+        14: iconst_1\n         15: ireturn\n       LineNumberTable:\n         line 371: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      16     0 entry   Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n       StackMapTable: number_of_entries = 2\n@@ -1193,73 +1192,70 @@\n \n   private static boolean supportsMethodOf(org.apache.commons.compress.archivers.zip.ZipArchiveEntry);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z\n     flags: (0x000a) ACC_PRIVATE, ACC_STATIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: invokevirtual #21                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-         4: ifeq          68\n+         1: invokevirtual #90                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+         4: ifeq          70\n          7: aload_0\n-         8: invokevirtual #21                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-        11: getstatic     #87                 // Field org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-        14: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n-        17: if_icmpeq     68\n+         8: invokevirtual #90                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        11: getstatic     #358                // Field org/apache/commons/compress/archivers/zip/ZipMethod.UNSHRINKING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+        14: invokevirtual #361                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+        17: if_icmpeq     70\n         20: aload_0\n-        21: invokevirtual #21                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-        24: getstatic     #89                 // Field org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-        27: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n-        30: if_icmpeq     68\n+        21: invokevirtual #90                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        24: getstatic     #364                // Field org/apache/commons/compress/archivers/zip/ZipMethod.IMPLODING:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+        27: invokevirtual #361                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+        30: if_icmpeq     70\n         33: aload_0\n-        34: invokevirtual #21                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        34: invokevirtual #90                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n         37: bipush        8\n-        39: if_icmpeq     68\n+        39: if_icmpeq     70\n         42: aload_0\n-        43: invokevirtual #21                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-        46: getstatic     #91                 // Field org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-        49: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n-        52: if_icmpeq     68\n+        43: invokevirtual #90                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        46: getstatic     #367                // Field org/apache/commons/compress/archivers/zip/ZipMethod.ENHANCED_DEFLATED:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+        49: invokevirtual #361                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+        52: if_icmpeq     70\n         55: aload_0\n-        56: invokevirtual #21                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n-        59: getstatic     #92                 // Field org/apache/commons/compress/archivers/zip/ZipMethod.BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n-        62: invokevirtual #88                 // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n-        65: if_icmpne     72\n-        68: iconst_1\n-        69: goto          73\n-        72: iconst_0\n-        73: ireturn\n+        56: invokevirtual #90                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I\n+        59: getstatic     #370                // Field org/apache/commons/compress/archivers/zip/ZipMethod.BZIP2:Lorg/apache/commons/compress/archivers/zip/ZipMethod;\n+        62: invokevirtual #361                // Method org/apache/commons/compress/archivers/zip/ZipMethod.getCode:()I\n+        65: if_icmpeq     70\n+        68: iconst_0\n+        69: ireturn\n+        70: iconst_1\n+        71: ireturn\n       LineNumberTable:\n         line 381: 0\n-        line 382: 8\n-        line 383: 21\n-        line 384: 34\n-        line 385: 43\n-        line 386: 56\n-        line 381: 73\n+        line 382: 7\n+        line 383: 20\n+        line 384: 33\n+        line 385: 42\n+        line 386: 55\n+        line 381: 68\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      74     0 entry   Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n-      StackMapTable: number_of_entries = 3\n+            0      72     0 entry   Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;\n+      StackMapTable: number_of_entries = 1\n         frame_type = 251 /* same_frame_extended */\n-          offset_delta = 68\n-        frame_type = 3 /* same */\n-        frame_type = 64 /* same_locals_1_stack_item */\n-          stack = [ int ]\n+          offset_delta = 70\n \n   public static org.apache.commons.compress.archivers.zip.ZipLong toDosTime(java.util.Date);\n     descriptor: (Ljava/util/Date;)Lorg/apache/commons/compress/archivers/zip/ZipLong;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=1, args_size=1\n-         0: new           #93                 // class org/apache/commons/compress/archivers/zip/ZipLong\n+         0: new           #163                // class org/apache/commons/compress/archivers/zip/ZipLong\n          3: dup\n          4: aload_0\n-         5: invokevirtual #36                 // Method java/util/Date.getTime:()J\n-         8: invokestatic  #94                 // Method toDosTime:(J)[B\n-        11: invokespecial #95                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n+         5: invokevirtual #156                // Method java/util/Date.getTime:()J\n+         8: invokestatic  #375                // Method toDosTime:(J)[B\n+        11: invokespecial #378                // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([B)V\n         14: areturn\n       LineNumberTable:\n         line 397: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      15     0  time   Ljava/util/Date;\n \n@@ -1270,15 +1266,15 @@\n       stack=4, locals=3, args_size=1\n          0: iconst_4\n          1: newarray       byte\n          3: astore_2\n          4: lload_0\n          5: aload_2\n          6: iconst_0\n-         7: invokestatic  #96                 // Method toDosTime:(J[BI)V\n+         7: invokestatic  #381                // Method toDosTime:(J[BI)V\n         10: aload_2\n         11: areturn\n       LineNumberTable:\n         line 408: 0\n         line 409: 4\n         line 410: 10\n       LocalVariableTable:\n@@ -1288,75 +1284,74 @@\n \n   public static void toDosTime(long, byte[], int);\n     descriptor: (J[BI)V\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=4, args_size=3\n          0: lload_0\n-         1: invokestatic  #50                 // Method javaToDosTime:(J)J\n+         1: invokestatic  #211                // Method javaToDosTime:(J)J\n          4: aload_2\n          5: iload_3\n-         6: invokestatic  #97                 // Method org/apache/commons/compress/archivers/zip/ZipLong.putLong:(J[BI)V\n+         6: invokestatic  #385                // Method org/apache/commons/compress/archivers/zip/ZipLong.putLong:(J[BI)V\n          9: return\n       LineNumberTable:\n         line 424: 0\n         line 425: 9\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0     t   J\n             0      10     2   buf   [B\n             0      10     3 offset   I\n \n   public static byte unsignedIntToSignedByte(int);\n     descriptor: (I)B\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n-      stack=4, locals=1, args_size=1\n+      stack=5, locals=1, args_size=1\n          0: iload_0\n          1: sipush        255\n          4: if_icmpgt     11\n          7: iload_0\n-         8: ifge          43\n-        11: new           #67                 // class java/lang/IllegalArgumentException\n+         8: ifge          41\n+        11: new           #266                // class java/lang/IllegalArgumentException\n         14: dup\n-        15: new           #8                  // class java/lang/StringBuilder\n+        15: new           #43                 // class java/lang/StringBuilder\n         18: dup\n-        19: invokespecial #9                  // Method java/lang/StringBuilder.\"<init>\":()V\n-        22: ldc           #98                 // String Can only convert non-negative integers between [0,255] to byte: [\n-        24: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        27: iload_0\n-        28: invokevirtual #99                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        31: ldc           #13                 // String ]\n-        33: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        36: invokevirtual #14                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        39: invokespecial #70                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-        42: athrow\n-        43: iload_0\n-        44: sipush        128\n-        47: if_icmpge     53\n-        50: iload_0\n-        51: i2b\n-        52: ireturn\n-        53: iload_0\n-        54: sipush        256\n-        57: isub\n-        58: i2b\n-        59: ireturn\n+        19: ldc_w         #391                // String Can only convert non-negative integers between [0,255] to byte: [\n+        22: invokespecial #47                 // Method java/lang/StringBuilder.\"<init>\":(Ljava/lang/String;)V\n+        25: iload_0\n+        26: invokevirtual #393                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        29: ldc           #54                 // String ]\n+        31: invokevirtual #56                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        34: invokevirtual #59                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        37: invokespecial #273                // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        40: athrow\n+        41: iload_0\n+        42: sipush        128\n+        45: if_icmpge     51\n+        48: iload_0\n+        49: i2b\n+        50: ireturn\n+        51: iload_0\n+        52: sipush        256\n+        55: isub\n+        56: i2b\n+        57: ireturn\n       LineNumberTable:\n         line 436: 0\n         line 437: 11\n-        line 439: 43\n-        line 440: 50\n-        line 442: 53\n+        line 439: 41\n+        line 440: 48\n+        line 442: 51\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      60     0     i   I\n+            0      58     0     i   I\n       StackMapTable: number_of_entries = 3\n         frame_type = 11 /* same */\n-        frame_type = 31 /* same */\n+        frame_type = 29 /* same */\n         frame_type = 9 /* same */\n }\n SourceFile: \"ZipUtil.java\"\n InnerClasses:\n-  public static #331= #232 of #18;        // Feature=class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature of class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n-  public static final #389= #288 of #235; // NameSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n-  public static final #397= #294 of #235; // CommentSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  public static #399= #82 of #79;         // Feature=class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature of class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException\n+  public static final #400= #321 of #91;  // CommentSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n+  public static final #401= #303 of #91;  // NameSource=class org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource of class org/apache/commons/compress/archivers/zip/ZipArchiveEntry\n"}]}
