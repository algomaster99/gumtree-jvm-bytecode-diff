{"diffoscope-json-version": 1, "source1": "first/AgeFileFilter.class", "source2": "second/AgeFileFilter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,53 +15,52 @@\n \n public class AgeFileFilter extends AbstractFileFilter implements Serializable\n {\n     private static final long serialVersionUID = -2132740084016138541L;\n     private final boolean acceptOlder;\n     private final Instant cutoffInstant;\n     \n-    public AgeFileFilter(final Date cutoffDate) {\n-        this(cutoffDate, true);\n+    public AgeFileFilter(final Date date) {\n+        this(date, true);\n     }\n     \n-    public AgeFileFilter(final Date cutoffDate, final boolean acceptOlder) {\n-        this(cutoffDate.toInstant(), acceptOlder);\n+    public AgeFileFilter(final Date date, final boolean b) {\n+        this(date.toInstant(), b);\n     }\n     \n-    public AgeFileFilter(final File cutoffReference) {\n-        this(cutoffReference, true);\n+    public AgeFileFilter(final File file) {\n+        this(file, true);\n     }\n     \n-    public AgeFileFilter(final File cutoffReference, final boolean acceptOlder) {\n-        this(FileUtils.lastModifiedUnchecked(cutoffReference), acceptOlder);\n+    public AgeFileFilter(final File file, final boolean b) {\n+        this(FileUtils.lastModifiedUnchecked(file), b);\n     }\n     \n-    public AgeFileFilter(final Instant cutoffInstant) {\n-        this(cutoffInstant, true);\n+    public AgeFileFilter(final Instant instant) {\n+        this(instant, true);\n     }\n     \n     public AgeFileFilter(final Instant cutoffInstant, final boolean acceptOlder) {\n         this.acceptOlder = acceptOlder;\n         this.cutoffInstant = cutoffInstant;\n     }\n     \n-    public AgeFileFilter(final long cutoffMillis) {\n-        this(Instant.ofEpochMilli(cutoffMillis), true);\n+    public AgeFileFilter(final long epochMilli) {\n+        this(Instant.ofEpochMilli(epochMilli), true);\n     }\n     \n-    public AgeFileFilter(final long cutoffMillis, final boolean acceptOlder) {\n-        this(Instant.ofEpochMilli(cutoffMillis), acceptOlder);\n+    public AgeFileFilter(final long epochMilli, final boolean b) {\n+        this(Instant.ofEpochMilli(epochMilli), b);\n     }\n     \n     public boolean accept(final File file) {\n         return this.acceptOlder != FileUtils.isFileNewer(file, this.cutoffInstant);\n     }\n     \n-    public FileVisitResult accept(final Path file, final BasicFileAttributes attributes) {\n-        return this.get(() -> this.toFileVisitResult(this.acceptOlder != PathUtils.isNewer(file, this.cutoffInstant, new LinkOption[0])));\n+    public FileVisitResult accept(final Path path, final BasicFileAttributes basicFileAttributes) {\n+        return this.get(() -> this.toFileVisitResult(this.acceptOlder != PathUtils.isNewer(path, this.cutoffInstant, new LinkOption[0])));\n     }\n     \n     public String toString() {\n-        final String condition = this.acceptOlder ? \"<=\" : \">\";\n-        return super.toString() + \"(\" + condition + this.cutoffInstant + \")\";\n+        return super.toString() + \"(\" + (this.acceptOlder ? \"<=\" : \">\") + this.cutoffInstant + \")\";\n     }\n }\n"}]}
