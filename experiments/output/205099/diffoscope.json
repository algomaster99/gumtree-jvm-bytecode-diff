{"diffoscope-json-version": 1, "source1": "first/AbstractListDelimiterHandler.class", "source2": "second/AbstractListDelimiterHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,61 +5,60 @@\n import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.ArrayList;\n import java.util.Collection;\n \n public abstract class AbstractListDelimiterHandler implements ListDelimiterHandler\n {\n-    public Iterable<?> parse(final Object value) {\n-        return this.flatten(value);\n+    public Iterable<?> parse(final Object o) {\n+        return this.flatten(o);\n     }\n     \n-    public Collection<String> split(final String s, final boolean trim) {\n+    public Collection<String> split(final String s, final boolean b) {\n         if (s == null) {\n             return new ArrayList<String>(0);\n         }\n-        return this.splitString(s, trim);\n+        return this.splitString(s, b);\n     }\n     \n-    public Object escape(final Object value, final ValueTransformer transformer) {\n-        final Object escValue = (value instanceof String) ? this.escapeString((String)value) : value;\n-        return transformer.transformValue(escValue);\n+    public Object escape(final Object o, final ValueTransformer valueTransformer) {\n+        return valueTransformer.transformValue((Object)((o instanceof String) ? this.escapeString((String)o) : o));\n     }\n     \n     protected abstract Collection<String> splitString(final String p0, final boolean p1);\n     \n     protected abstract String escapeString(final String p0);\n     \n-    Collection<?> flatten(final Object value, final int limit) {\n-        if (value instanceof String) {\n-            return this.split((String)value, true);\n-        }\n-        final Collection<Object> result = new LinkedList<Object>();\n-        if (value instanceof Iterable) {\n-            this.flattenIterator(result, ((Iterable)value).iterator(), limit);\n-        }\n-        else if (value instanceof Iterator) {\n-            this.flattenIterator(result, (Iterator<?>)value, limit);\n-        }\n-        else if (value != null) {\n-            if (value.getClass().isArray()) {\n-                for (int len = Array.getLength(value), idx = 0, size = 0; idx < len && size < limit; ++idx, size = result.size()) {\n-                    result.addAll(this.flatten(Array.get(value, idx), limit - size));\n+    Collection<?> flatten(final Object o, final int n) {\n+        if (o instanceof String) {\n+            return this.split((String)o, true);\n+        }\n+        final LinkedList list = new LinkedList();\n+        if (o instanceof Iterable) {\n+            this.flattenIterator(list, ((Iterable)o).iterator(), n);\n+        }\n+        else if (o instanceof Iterator) {\n+            this.flattenIterator(list, (Iterator<?>)o, n);\n+        }\n+        else if (o != null) {\n+            if (o.getClass().isArray()) {\n+                for (int length = Array.getLength(o), n2 = 0, size = 0; n2 < length && size < n; ++n2, size = list.size()) {\n+                    list.addAll(this.flatten(Array.get(o, n2), n - size));\n                 }\n             }\n             else {\n-                result.add(value);\n+                list.add(o);\n             }\n         }\n-        return result;\n+        return list;\n     }\n     \n-    private Collection<?> flatten(final Object value) {\n-        return this.flatten(value, Integer.MAX_VALUE);\n+    private Collection<?> flatten(final Object o) {\n+        return this.flatten(o, Integer.MAX_VALUE);\n     }\n     \n-    private void flattenIterator(final Collection<Object> target, final Iterator<?> it, final int limit) {\n-        for (int size = target.size(); size < limit && it.hasNext(); size = target.size()) {\n-            target.addAll(this.flatten((Object)it.next(), limit - size));\n+    private void flattenIterator(final Collection<Object> collection, final Iterator<?> iterator, final int n) {\n+        for (int n2 = collection.size(); n2 < n && iterator.hasNext(); n2 = collection.size()) {\n+            collection.addAll(this.flatten(iterator.next(), n - n2));\n         }\n     }\n }\n"}]}
