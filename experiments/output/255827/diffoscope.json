{"diffoscope-json-version": 1, "source1": "first/SnappyCompressorOutputStream.class", "source2": "second/SnappyCompressorOutputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -29,48 +29,48 @@\n     private static final int MAX_OFFSET_WITH_TWO_OFFSET_BYTES = 32768;\n     private static final int ONE_BYTE_COPY_TAG = 1;\n     private static final int TWO_BYTE_COPY_TAG = 2;\n     private static final int FOUR_BYTE_COPY_TAG = 3;\n     private static final int MIN_MATCH_LENGTH = 4;\n     private static final int MAX_MATCH_LENGTH = 64;\n     \n-    public SnappyCompressorOutputStream(final OutputStream os, final long uncompressedSize) throws IOException {\n-        this(os, uncompressedSize, 32768);\n+    public SnappyCompressorOutputStream(final OutputStream outputStream, final long n) throws IOException {\n+        this(outputStream, n, 32768);\n     }\n     \n-    public SnappyCompressorOutputStream(final OutputStream os, final long uncompressedSize, final int blockSize) throws IOException {\n-        this(os, uncompressedSize, createParameterBuilder(blockSize).build());\n+    public SnappyCompressorOutputStream(final OutputStream outputStream, final long n, final int n2) throws IOException {\n+        this(outputStream, n, createParameterBuilder(n2).build());\n     }\n     \n-    public SnappyCompressorOutputStream(final OutputStream os, final long uncompressedSize, final Parameters params) throws IOException {\n+    public SnappyCompressorOutputStream(final OutputStream os, final long n, final Parameters parameters) throws IOException {\n         this.oneByte = new byte[1];\n         this.os = os;\n         this.consumer = (ByteUtils.ByteConsumer)new ByteUtils.OutputStreamByteConsumer(os);\n-        this.compressor = new LZ77Compressor(params, block -> {\n+        this.compressor = new LZ77Compressor(parameters, block -> {\n             switch (SnappyCompressorOutputStream.SnappyCompressorOutputStream$1.$SwitchMap$org$apache$commons$compress$compressors$lz77support$LZ77Compressor$Block$BlockType[block.getType().ordinal()]) {\n                 case 1: {\n                     this.writeLiteralBlock((LZ77Compressor.LiteralBlock)block);\n                     break;\n                 }\n                 case 2: {\n                     this.writeBackReference((LZ77Compressor.BackReference)block);\n                     break;\n                 }\n             }\n         });\n-        this.writeUncompressedSize(uncompressedSize);\n+        this.writeUncompressedSize(n);\n     }\n     \n-    public void write(final int b) throws IOException {\n-        this.oneByte[0] = (byte)(b & 0xFF);\n+    public void write(final int n) throws IOException {\n+        this.oneByte[0] = (byte)(n & 0xFF);\n         this.write(this.oneByte);\n     }\n     \n-    public void write(final byte[] data, final int off, final int len) throws IOException {\n-        this.compressor.compress(data, off, len);\n+    public void write(final byte[] array, final int n, final int n2) throws IOException {\n+        this.compressor.compress(array, n, n2);\n     }\n     \n     public void close() throws IOException {\n         try {\n             this.finish();\n         }\n         finally {\n@@ -81,105 +81,105 @@\n     public void finish() throws IOException {\n         if (!this.finished) {\n             this.compressor.finish();\n             this.finished = true;\n         }\n     }\n     \n-    private void writeUncompressedSize(long uncompressedSize) throws IOException {\n-        boolean more = false;\n+    private void writeUncompressedSize(long n) throws IOException {\n+        boolean b;\n         do {\n-            int currentByte = (int)(uncompressedSize & 0x7FL);\n-            more = (uncompressedSize > currentByte);\n-            if (more) {\n-                currentByte |= 0x80;\n+            int n2 = (int)(n & 0x7FL);\n+            b = (n > n2);\n+            if (b) {\n+                n2 |= 0x80;\n             }\n-            this.os.write(currentByte);\n-            uncompressedSize >>= 7;\n-        } while (more);\n+            this.os.write(n2);\n+            n >>= 7;\n+        } while (b);\n     }\n     \n-    private void writeLiteralBlock(final LZ77Compressor.LiteralBlock block) throws IOException {\n-        final int len = block.getLength();\n-        if (len <= 60) {\n-            this.writeLiteralBlockNoSizeBytes(block, len);\n+    private void writeLiteralBlock(final LZ77Compressor.LiteralBlock literalBlock) throws IOException {\n+        final int length = literalBlock.getLength();\n+        if (length <= 60) {\n+            this.writeLiteralBlockNoSizeBytes(literalBlock, length);\n         }\n-        else if (len <= 256) {\n-            this.writeLiteralBlockOneSizeByte(block, len);\n+        else if (length <= 256) {\n+            this.writeLiteralBlockOneSizeByte(literalBlock, length);\n         }\n-        else if (len <= 65536) {\n-            this.writeLiteralBlockTwoSizeBytes(block, len);\n+        else if (length <= 65536) {\n+            this.writeLiteralBlockTwoSizeBytes(literalBlock, length);\n         }\n-        else if (len <= 16777216) {\n-            this.writeLiteralBlockThreeSizeBytes(block, len);\n+        else if (length <= 16777216) {\n+            this.writeLiteralBlockThreeSizeBytes(literalBlock, length);\n         }\n         else {\n-            this.writeLiteralBlockFourSizeBytes(block, len);\n+            this.writeLiteralBlockFourSizeBytes(literalBlock, length);\n         }\n     }\n     \n-    private void writeLiteralBlockNoSizeBytes(final LZ77Compressor.LiteralBlock block, final int len) throws IOException {\n-        this.writeLiteralBlockWithSize(len - 1 << 2, 0, len, block);\n+    private void writeLiteralBlockNoSizeBytes(final LZ77Compressor.LiteralBlock literalBlock, final int n) throws IOException {\n+        this.writeLiteralBlockWithSize(n - 1 << 2, 0, n, literalBlock);\n     }\n     \n-    private void writeLiteralBlockOneSizeByte(final LZ77Compressor.LiteralBlock block, final int len) throws IOException {\n-        this.writeLiteralBlockWithSize(240, 1, len, block);\n+    private void writeLiteralBlockOneSizeByte(final LZ77Compressor.LiteralBlock literalBlock, final int n) throws IOException {\n+        this.writeLiteralBlockWithSize(240, 1, n, literalBlock);\n     }\n     \n-    private void writeLiteralBlockTwoSizeBytes(final LZ77Compressor.LiteralBlock block, final int len) throws IOException {\n-        this.writeLiteralBlockWithSize(244, 2, len, block);\n+    private void writeLiteralBlockTwoSizeBytes(final LZ77Compressor.LiteralBlock literalBlock, final int n) throws IOException {\n+        this.writeLiteralBlockWithSize(244, 2, n, literalBlock);\n     }\n     \n-    private void writeLiteralBlockThreeSizeBytes(final LZ77Compressor.LiteralBlock block, final int len) throws IOException {\n-        this.writeLiteralBlockWithSize(248, 3, len, block);\n+    private void writeLiteralBlockThreeSizeBytes(final LZ77Compressor.LiteralBlock literalBlock, final int n) throws IOException {\n+        this.writeLiteralBlockWithSize(248, 3, n, literalBlock);\n     }\n     \n-    private void writeLiteralBlockFourSizeBytes(final LZ77Compressor.LiteralBlock block, final int len) throws IOException {\n-        this.writeLiteralBlockWithSize(252, 4, len, block);\n+    private void writeLiteralBlockFourSizeBytes(final LZ77Compressor.LiteralBlock literalBlock, final int n) throws IOException {\n+        this.writeLiteralBlockWithSize(252, 4, n, literalBlock);\n     }\n     \n-    private void writeLiteralBlockWithSize(final int tagByte, final int sizeBytes, final int len, final LZ77Compressor.LiteralBlock block) throws IOException {\n-        this.os.write(tagByte);\n-        this.writeLittleEndian(sizeBytes, len - 1);\n-        this.os.write(block.getData(), block.getOffset(), len);\n+    private void writeLiteralBlockWithSize(final int n, final int n2, final int len, final LZ77Compressor.LiteralBlock literalBlock) throws IOException {\n+        this.os.write(n);\n+        this.writeLittleEndian(n2, len - 1);\n+        this.os.write(literalBlock.getData(), literalBlock.getOffset(), len);\n     }\n     \n-    private void writeLittleEndian(final int numBytes, final int num) throws IOException {\n-        ByteUtils.toLittleEndian(this.consumer, (long)num, numBytes);\n+    private void writeLittleEndian(final int n, final int n2) throws IOException {\n+        ByteUtils.toLittleEndian(this.consumer, (long)n2, n);\n     }\n     \n-    private void writeBackReference(final LZ77Compressor.BackReference block) throws IOException {\n-        final int len = block.getLength();\n-        final int offset = block.getOffset();\n-        if (len >= 4 && len <= 11 && offset <= 1024) {\n-            this.writeBackReferenceWithOneOffsetByte(len, offset);\n+    private void writeBackReference(final LZ77Compressor.BackReference backReference) throws IOException {\n+        final int length = backReference.getLength();\n+        final int offset = backReference.getOffset();\n+        if (length >= 4 && length <= 11 && offset <= 1024) {\n+            this.writeBackReferenceWithOneOffsetByte(length, offset);\n         }\n         else if (offset < 32768) {\n-            this.writeBackReferenceWithTwoOffsetBytes(len, offset);\n+            this.writeBackReferenceWithTwoOffsetBytes(length, offset);\n         }\n         else {\n-            this.writeBackReferenceWithFourOffsetBytes(len, offset);\n+            this.writeBackReferenceWithFourOffsetBytes(length, offset);\n         }\n     }\n     \n-    private void writeBackReferenceWithOneOffsetByte(final int len, final int offset) throws IOException {\n-        this.os.write(0x1 | len - 4 << 2 | (offset & 0x700) >> 3);\n-        this.os.write(offset & 0xFF);\n+    private void writeBackReferenceWithOneOffsetByte(final int n, final int n2) throws IOException {\n+        this.os.write(0x1 | n - 4 << 2 | (n2 & 0x700) >> 3);\n+        this.os.write(n2 & 0xFF);\n     }\n     \n-    private void writeBackReferenceWithTwoOffsetBytes(final int len, final int offset) throws IOException {\n-        this.writeBackReferenceWithLittleEndianOffset(2, 2, len, offset);\n+    private void writeBackReferenceWithTwoOffsetBytes(final int n, final int n2) throws IOException {\n+        this.writeBackReferenceWithLittleEndianOffset(2, 2, n, n2);\n     }\n     \n-    private void writeBackReferenceWithFourOffsetBytes(final int len, final int offset) throws IOException {\n-        this.writeBackReferenceWithLittleEndianOffset(3, 4, len, offset);\n+    private void writeBackReferenceWithFourOffsetBytes(final int n, final int n2) throws IOException {\n+        this.writeBackReferenceWithLittleEndianOffset(3, 4, n, n2);\n     }\n     \n-    private void writeBackReferenceWithLittleEndianOffset(final int tag, final int offsetBytes, final int len, final int offset) throws IOException {\n-        this.os.write(tag | len - 1 << 2);\n-        this.writeLittleEndian(offsetBytes, offset);\n+    private void writeBackReferenceWithLittleEndianOffset(final int n, final int n2, final int n3, final int n4) throws IOException {\n+        this.os.write(n | n3 - 1 << 2);\n+        this.writeLittleEndian(n2, n4);\n     }\n     \n-    public static Parameters.Builder createParameterBuilder(final int blockSize) {\n-        return Parameters.builder(blockSize).withMinBackReferenceLength(4).withMaxBackReferenceLength(64).withMaxOffset(blockSize).withMaxLiteralLength(blockSize);\n+    public static Parameters.Builder createParameterBuilder(final int n) {\n+        return Parameters.builder(n).withMinBackReferenceLength(4).withMaxBackReferenceLength(64).withMaxOffset(n).withMaxLiteralLength(n);\n     }\n }\n"}]}
