{"diffoscope-json-version": 1, "source1": "first/CSVRecord.class", "source2": "second/CSVRecord.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,246 +1,246 @@\n-  SHA-256 checksum 9c8ef1e1dac2fa8d7173eb9637f4bbcc5e48e0138311eb35860381c71d9ddaef\n+  SHA-256 checksum 0128979c604fe54f10aaa3bec438e9808dd5ce69afae25574f4baf5cbab5358e\n   Compiled from \"CSVRecord.java\"\n public final class org.apache.commons.csv.CSVRecord extends java.lang.Object implements java.io.Serializable, java.lang.Iterable<java.lang.String>\n   minor version: 0\n   major version: 51\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n-  this_class: #55                         // org/apache/commons/csv/CSVRecord\n-  super_class: #17                        // java/lang/Object\n+  this_class: #8                          // org/apache/commons/csv/CSVRecord\n+  super_class: #2                         // java/lang/Object\n   interfaces: 2, fields: 7, methods: 19, attributes: 3\n Constant pool:\n-    #1 = Methodref          #17.#141      // java/lang/Object.\"<init>\":()V\n-    #2 = Fieldref           #55.#142      // org/apache/commons/csv/CSVRecord.recordNumber:J\n-    #3 = Fieldref           #55.#143      // org/apache/commons/csv/CSVRecord.EMPTY_STRING_ARRAY:[Ljava/lang/String;\n-    #4 = Fieldref           #55.#144      // org/apache/commons/csv/CSVRecord.values:[Ljava/lang/String;\n-    #5 = Fieldref           #55.#145      // org/apache/commons/csv/CSVRecord.mapping:Ljava/util/Map;\n-    #6 = Fieldref           #55.#146      // org/apache/commons/csv/CSVRecord.comment:Ljava/lang/String;\n-    #7 = Fieldref           #55.#147      // org/apache/commons/csv/CSVRecord.characterPosition:J\n-    #8 = Methodref          #148.#149     // java/lang/Enum.toString:()Ljava/lang/String;\n-    #9 = Methodref          #55.#150      // org/apache/commons/csv/CSVRecord.get:(Ljava/lang/String;)Ljava/lang/String;\n-   #10 = Class              #151          // java/lang/IllegalStateException\n-   #11 = String             #152          // No header mapping was specified, the record values can\\'t be accessed by name\n-   #12 = Methodref          #10.#153      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-   #13 = InterfaceMethodref #84.#154      // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #14 = Class              #155          // java/lang/Integer\n-   #15 = Class              #156          // java/lang/IllegalArgumentException\n-   #16 = String             #157          // Mapping for %s not found, expected one of %s\n-   #17 = Class              #158          // java/lang/Object\n-   #18 = InterfaceMethodref #84.#159      // java/util/Map.keySet:()Ljava/util/Set;\n-   #19 = Methodref          #54.#160      // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-   #20 = Methodref          #15.#153      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #21 = Methodref          #14.#161      // java/lang/Integer.intValue:()I\n-   #22 = Class              #162          // java/lang/ArrayIndexOutOfBoundsException\n-   #23 = String             #163          // Index for header \\'%s\\' is %d but CSVRecord only has %d values!\n-   #24 = Methodref          #14.#164      // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #25 = InterfaceMethodref #84.#165      // java/util/Map.size:()I\n-   #26 = InterfaceMethodref #84.#166      // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n-   #27 = Methodref          #55.#167      // org/apache/commons/csv/CSVRecord.isMapped:(Ljava/lang/String;)Z\n-   #28 = Methodref          #55.#168      // org/apache/commons/csv/CSVRecord.toList:()Ljava/util/List;\n-   #29 = InterfaceMethodref #169.#170     // java/util/List.iterator:()Ljava/util/Iterator;\n-   #30 = InterfaceMethodref #84.#171      // java/util/Map.entrySet:()Ljava/util/Set;\n-   #31 = InterfaceMethodref #172.#170     // java/util/Set.iterator:()Ljava/util/Iterator;\n-   #32 = InterfaceMethodref #124.#173     // java/util/Iterator.hasNext:()Z\n-   #33 = InterfaceMethodref #124.#174     // java/util/Iterator.next:()Ljava/lang/Object;\n-   #34 = Class              #175          // java/util/Map$Entry\n-   #35 = InterfaceMethodref #34.#176      // java/util/Map$Entry.getValue:()Ljava/lang/Object;\n-   #36 = InterfaceMethodref #34.#177      // java/util/Map$Entry.getKey:()Ljava/lang/Object;\n-   #37 = InterfaceMethodref #84.#178      // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #38 = Methodref          #179.#180     // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n-   #39 = Class              #181          // java/util/HashMap\n-   #40 = Methodref          #39.#182      // java/util/HashMap.\"<init>\":(I)V\n-   #41 = Methodref          #55.#183      // org/apache/commons/csv/CSVRecord.putIn:(Ljava/util/Map;)Ljava/util/Map;\n-   #42 = Class              #184          // java/lang/StringBuilder\n-   #43 = Methodref          #42.#141      // java/lang/StringBuilder.\"<init>\":()V\n-   #44 = String             #185          // CSVRecord [comment=\n-   #45 = Methodref          #42.#186      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #46 = String             #187          // , mapping=\n-   #47 = Methodref          #42.#188      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #48 = String             #189          // , recordNumber=\n-   #49 = Methodref          #42.#190      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #50 = String             #191          // , values=\n-   #51 = Methodref          #179.#192     // java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;\n-   #52 = String             #193          // ]\n-   #53 = Methodref          #42.#149      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #54 = Class              #194          // java/lang/String\n-   #55 = Class              #195          // org/apache/commons/csv/CSVRecord\n-   #56 = Class              #196          // java/io/Serializable\n-   #57 = Class              #197          // java/lang/Iterable\n-   #58 = Utf8               EMPTY_STRING_ARRAY\n-   #59 = Utf8               [Ljava/lang/String;\n-   #60 = Utf8               serialVersionUID\n-   #61 = Utf8               J\n-   #62 = Utf8               ConstantValue\n-   #63 = Long               1l\n-   #65 = Utf8               characterPosition\n-   #66 = Utf8               comment\n-   #67 = Utf8               Ljava/lang/String;\n-   #68 = Utf8               mapping\n-   #69 = Utf8               Ljava/util/Map;\n-   #70 = Utf8               Signature\n-   #71 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n-   #72 = Utf8               recordNumber\n-   #73 = Utf8               values\n-   #74 = Utf8               <init>\n-   #75 = Utf8               ([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;JJ)V\n-   #76 = Utf8               Code\n-   #77 = Utf8               LineNumberTable\n-   #78 = Utf8               LocalVariableTable\n-   #79 = Utf8               this\n-   #80 = Utf8               Lorg/apache/commons/csv/CSVRecord;\n-   #81 = Utf8               LocalVariableTypeTable\n-   #82 = Utf8               StackMapTable\n-   #83 = Class              #59           // \"[Ljava/lang/String;\"\n-   #84 = Class              #198          // java/util/Map\n-   #85 = Utf8               ([Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;Ljava/lang/String;JJ)V\n-   #86 = Utf8               get\n-   #87 = Utf8               (Ljava/lang/Enum;)Ljava/lang/String;\n-   #88 = Utf8               e\n-   #89 = Utf8               Ljava/lang/Enum;\n-   #90 = Utf8               Ljava/lang/Enum<*>;\n-   #91 = Utf8               (Ljava/lang/Enum<*>;)Ljava/lang/String;\n-   #92 = Utf8               (I)Ljava/lang/String;\n-   #93 = Utf8               i\n-   #94 = Utf8               I\n-   #95 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-   #96 = Utf8               Ljava/lang/ArrayIndexOutOfBoundsException;\n-   #97 = Utf8               name\n-   #98 = Utf8               index\n-   #99 = Utf8               Ljava/lang/Integer;\n-  #100 = Utf8               getCharacterPosition\n-  #101 = Utf8               ()J\n-  #102 = Utf8               getComment\n-  #103 = Utf8               ()Ljava/lang/String;\n-  #104 = Utf8               getRecordNumber\n-  #105 = Utf8               isConsistent\n-  #106 = Utf8               ()Z\n-  #107 = Utf8               hasComment\n-  #108 = Utf8               isMapped\n-  #109 = Utf8               (Ljava/lang/String;)Z\n-  #110 = Utf8               isSet\n-  #111 = Utf8               iterator\n-  #112 = Utf8               ()Ljava/util/Iterator;\n-  #113 = Utf8               ()Ljava/util/Iterator<Ljava/lang/String;>;\n-  #114 = Utf8               putIn\n-  #115 = Utf8               (Ljava/util/Map;)Ljava/util/Map;\n-  #116 = Utf8               col\n-  #117 = Utf8               entry\n-  #118 = Utf8               Entry\n-  #119 = Utf8               InnerClasses\n-  #120 = Utf8               Ljava/util/Map$Entry;\n-  #121 = Utf8               map\n-  #122 = Utf8               Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Integer;>;\n-  #123 = Utf8               TM;\n-  #124 = Class              #199          // java/util/Iterator\n-  #125 = Utf8               <M::Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;>(TM;)TM;\n-  #126 = Utf8               size\n-  #127 = Utf8               ()I\n-  #128 = Utf8               toList\n-  #129 = Utf8               ()Ljava/util/List;\n-  #130 = Utf8               ()Ljava/util/List<Ljava/lang/String;>;\n-  #131 = Utf8               toMap\n-  #132 = Utf8               ()Ljava/util/Map;\n-  #133 = Utf8               ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n-  #134 = Utf8               toString\n-  #135 = Utf8               ()[Ljava/lang/String;\n-  #136 = Utf8               <clinit>\n-  #137 = Utf8               ()V\n-  #138 = Utf8               Ljava/lang/Object;Ljava/io/Serializable;Ljava/lang/Iterable<Ljava/lang/String;>;\n-  #139 = Utf8               SourceFile\n-  #140 = Utf8               CSVRecord.java\n-  #141 = NameAndType        #74:#137      // \"<init>\":()V\n-  #142 = NameAndType        #72:#61       // recordNumber:J\n-  #143 = NameAndType        #58:#59       // EMPTY_STRING_ARRAY:[Ljava/lang/String;\n-  #144 = NameAndType        #73:#59       // values:[Ljava/lang/String;\n-  #145 = NameAndType        #68:#69       // mapping:Ljava/util/Map;\n-  #146 = NameAndType        #66:#67       // comment:Ljava/lang/String;\n-  #147 = NameAndType        #65:#61       // characterPosition:J\n-  #148 = Class              #200          // java/lang/Enum\n-  #149 = NameAndType        #134:#103     // toString:()Ljava/lang/String;\n-  #150 = NameAndType        #86:#95       // get:(Ljava/lang/String;)Ljava/lang/String;\n-  #151 = Utf8               java/lang/IllegalStateException\n-  #152 = Utf8               No header mapping was specified, the record values can\\'t be accessed by name\n-  #153 = NameAndType        #74:#201      // \"<init>\":(Ljava/lang/String;)V\n-  #154 = NameAndType        #86:#202      // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #155 = Utf8               java/lang/Integer\n-  #156 = Utf8               java/lang/IllegalArgumentException\n-  #157 = Utf8               Mapping for %s not found, expected one of %s\n-  #158 = Utf8               java/lang/Object\n-  #159 = NameAndType        #203:#204     // keySet:()Ljava/util/Set;\n-  #160 = NameAndType        #205:#206     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #161 = NameAndType        #207:#127     // intValue:()I\n-  #162 = Utf8               java/lang/ArrayIndexOutOfBoundsException\n-  #163 = Utf8               Index for header \\'%s\\' is %d but CSVRecord only has %d values!\n-  #164 = NameAndType        #208:#209     // valueOf:(I)Ljava/lang/Integer;\n-  #165 = NameAndType        #126:#127     // size:()I\n-  #166 = NameAndType        #210:#211     // containsKey:(Ljava/lang/Object;)Z\n-  #167 = NameAndType        #108:#109     // isMapped:(Ljava/lang/String;)Z\n-  #168 = NameAndType        #128:#129     // toList:()Ljava/util/List;\n-  #169 = Class              #212          // java/util/List\n-  #170 = NameAndType        #111:#112     // iterator:()Ljava/util/Iterator;\n-  #171 = NameAndType        #213:#204     // entrySet:()Ljava/util/Set;\n-  #172 = Class              #214          // java/util/Set\n-  #173 = NameAndType        #215:#106     // hasNext:()Z\n-  #174 = NameAndType        #216:#217     // next:()Ljava/lang/Object;\n-  #175 = Utf8               java/util/Map$Entry\n-  #176 = NameAndType        #218:#217     // getValue:()Ljava/lang/Object;\n-  #177 = NameAndType        #219:#217     // getKey:()Ljava/lang/Object;\n-  #178 = NameAndType        #220:#221     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #179 = Class              #222          // java/util/Arrays\n-  #180 = NameAndType        #223:#224     // asList:([Ljava/lang/Object;)Ljava/util/List;\n-  #181 = Utf8               java/util/HashMap\n-  #182 = NameAndType        #74:#225      // \"<init>\":(I)V\n-  #183 = NameAndType        #114:#115     // putIn:(Ljava/util/Map;)Ljava/util/Map;\n-  #184 = Utf8               java/lang/StringBuilder\n-  #185 = Utf8               CSVRecord [comment=\n-  #186 = NameAndType        #226:#227     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #187 = Utf8               , mapping=\n-  #188 = NameAndType        #226:#228     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #189 = Utf8               , recordNumber=\n-  #190 = NameAndType        #226:#229     // append:(J)Ljava/lang/StringBuilder;\n-  #191 = Utf8               , values=\n-  #192 = NameAndType        #134:#230     // toString:([Ljava/lang/Object;)Ljava/lang/String;\n-  #193 = Utf8               ]\n-  #194 = Utf8               java/lang/String\n-  #195 = Utf8               org/apache/commons/csv/CSVRecord\n-  #196 = Utf8               java/io/Serializable\n-  #197 = Utf8               java/lang/Iterable\n-  #198 = Utf8               java/util/Map\n-  #199 = Utf8               java/util/Iterator\n-  #200 = Utf8               java/lang/Enum\n-  #201 = Utf8               (Ljava/lang/String;)V\n-  #202 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #203 = Utf8               keySet\n-  #204 = Utf8               ()Ljava/util/Set;\n-  #205 = Utf8               format\n-  #206 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #207 = Utf8               intValue\n-  #208 = Utf8               valueOf\n-  #209 = Utf8               (I)Ljava/lang/Integer;\n-  #210 = Utf8               containsKey\n-  #211 = Utf8               (Ljava/lang/Object;)Z\n-  #212 = Utf8               java/util/List\n-  #213 = Utf8               entrySet\n-  #214 = Utf8               java/util/Set\n-  #215 = Utf8               hasNext\n-  #216 = Utf8               next\n-  #217 = Utf8               ()Ljava/lang/Object;\n-  #218 = Utf8               getValue\n-  #219 = Utf8               getKey\n-  #220 = Utf8               put\n-  #221 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #222 = Utf8               java/util/Arrays\n-  #223 = Utf8               asList\n-  #224 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;\n-  #225 = Utf8               (I)V\n-  #226 = Utf8               append\n-  #227 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #228 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #229 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #230 = Utf8               ([Ljava/lang/Object;)Ljava/lang/String;\n+    #1 = Methodref          #2.#3         // java/lang/Object.\"<init>\":()V\n+    #2 = Class              #4            // java/lang/Object\n+    #3 = NameAndType        #5:#6         // \"<init>\":()V\n+    #4 = Utf8               java/lang/Object\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ()V\n+    #7 = Fieldref           #8.#9         // org/apache/commons/csv/CSVRecord.recordNumber:J\n+    #8 = Class              #10           // org/apache/commons/csv/CSVRecord\n+    #9 = NameAndType        #11:#12       // recordNumber:J\n+   #10 = Utf8               org/apache/commons/csv/CSVRecord\n+   #11 = Utf8               recordNumber\n+   #12 = Utf8               J\n+   #13 = Fieldref           #8.#14        // org/apache/commons/csv/CSVRecord.EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+   #14 = NameAndType        #15:#16       // EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+   #15 = Utf8               EMPTY_STRING_ARRAY\n+   #16 = Utf8               [Ljava/lang/String;\n+   #17 = Fieldref           #8.#18        // org/apache/commons/csv/CSVRecord.values:[Ljava/lang/String;\n+   #18 = NameAndType        #19:#16       // values:[Ljava/lang/String;\n+   #19 = Utf8               values\n+   #20 = Fieldref           #8.#21        // org/apache/commons/csv/CSVRecord.mapping:Ljava/util/Map;\n+   #21 = NameAndType        #22:#23       // mapping:Ljava/util/Map;\n+   #22 = Utf8               mapping\n+   #23 = Utf8               Ljava/util/Map;\n+   #24 = Fieldref           #8.#25        // org/apache/commons/csv/CSVRecord.comment:Ljava/lang/String;\n+   #25 = NameAndType        #26:#27       // comment:Ljava/lang/String;\n+   #26 = Utf8               comment\n+   #27 = Utf8               Ljava/lang/String;\n+   #28 = Fieldref           #8.#29        // org/apache/commons/csv/CSVRecord.characterPosition:J\n+   #29 = NameAndType        #30:#12       // characterPosition:J\n+   #30 = Utf8               characterPosition\n+   #31 = Methodref          #32.#33       // java/lang/Enum.toString:()Ljava/lang/String;\n+   #32 = Class              #34           // java/lang/Enum\n+   #33 = NameAndType        #35:#36       // toString:()Ljava/lang/String;\n+   #34 = Utf8               java/lang/Enum\n+   #35 = Utf8               toString\n+   #36 = Utf8               ()Ljava/lang/String;\n+   #37 = Methodref          #8.#38        // org/apache/commons/csv/CSVRecord.get:(Ljava/lang/String;)Ljava/lang/String;\n+   #38 = NameAndType        #39:#40       // get:(Ljava/lang/String;)Ljava/lang/String;\n+   #39 = Utf8               get\n+   #40 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+   #41 = Class              #42           // java/lang/IllegalStateException\n+   #42 = Utf8               java/lang/IllegalStateException\n+   #43 = String             #44           // No header mapping was specified, the record values can\\'t be accessed by name\n+   #44 = Utf8               No header mapping was specified, the record values can\\'t be accessed by name\n+   #45 = Methodref          #41.#46       // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+   #46 = NameAndType        #5:#47        // \"<init>\":(Ljava/lang/String;)V\n+   #47 = Utf8               (Ljava/lang/String;)V\n+   #48 = InterfaceMethodref #49.#50       // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #49 = Class              #51           // java/util/Map\n+   #50 = NameAndType        #39:#52       // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #51 = Utf8               java/util/Map\n+   #52 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+   #53 = Class              #54           // java/lang/Integer\n+   #54 = Utf8               java/lang/Integer\n+   #55 = Class              #56           // java/lang/IllegalArgumentException\n+   #56 = Utf8               java/lang/IllegalArgumentException\n+   #57 = String             #58           // Mapping for %s not found, expected one of %s\n+   #58 = Utf8               Mapping for %s not found, expected one of %s\n+   #59 = InterfaceMethodref #49.#60       // java/util/Map.keySet:()Ljava/util/Set;\n+   #60 = NameAndType        #61:#62       // keySet:()Ljava/util/Set;\n+   #61 = Utf8               keySet\n+   #62 = Utf8               ()Ljava/util/Set;\n+   #63 = Methodref          #64.#65       // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+   #64 = Class              #66           // java/lang/String\n+   #65 = NameAndType        #67:#68       // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+   #66 = Utf8               java/lang/String\n+   #67 = Utf8               format\n+   #68 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+   #69 = Methodref          #55.#46       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #70 = Methodref          #53.#71       // java/lang/Integer.intValue:()I\n+   #71 = NameAndType        #72:#73       // intValue:()I\n+   #72 = Utf8               intValue\n+   #73 = Utf8               ()I\n+   #74 = Class              #75           // java/lang/ArrayIndexOutOfBoundsException\n+   #75 = Utf8               java/lang/ArrayIndexOutOfBoundsException\n+   #76 = String             #77           // Index for header \\'%s\\' is %d but CSVRecord only has %d values!\n+   #77 = Utf8               Index for header \\'%s\\' is %d but CSVRecord only has %d values!\n+   #78 = Methodref          #53.#79       // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+   #79 = NameAndType        #80:#81       // valueOf:(I)Ljava/lang/Integer;\n+   #80 = Utf8               valueOf\n+   #81 = Utf8               (I)Ljava/lang/Integer;\n+   #82 = InterfaceMethodref #49.#83       // java/util/Map.size:()I\n+   #83 = NameAndType        #84:#73       // size:()I\n+   #84 = Utf8               size\n+   #85 = InterfaceMethodref #49.#86       // java/util/Map.containsKey:(Ljava/lang/Object;)Z\n+   #86 = NameAndType        #87:#88       // containsKey:(Ljava/lang/Object;)Z\n+   #87 = Utf8               containsKey\n+   #88 = Utf8               (Ljava/lang/Object;)Z\n+   #89 = Methodref          #8.#90        // org/apache/commons/csv/CSVRecord.isMapped:(Ljava/lang/String;)Z\n+   #90 = NameAndType        #91:#92       // isMapped:(Ljava/lang/String;)Z\n+   #91 = Utf8               isMapped\n+   #92 = Utf8               (Ljava/lang/String;)Z\n+   #93 = Methodref          #8.#94        // org/apache/commons/csv/CSVRecord.toList:()Ljava/util/List;\n+   #94 = NameAndType        #95:#96       // toList:()Ljava/util/List;\n+   #95 = Utf8               toList\n+   #96 = Utf8               ()Ljava/util/List;\n+   #97 = InterfaceMethodref #98.#99       // java/util/List.iterator:()Ljava/util/Iterator;\n+   #98 = Class              #100          // java/util/List\n+   #99 = NameAndType        #101:#102     // iterator:()Ljava/util/Iterator;\n+  #100 = Utf8               java/util/List\n+  #101 = Utf8               iterator\n+  #102 = Utf8               ()Ljava/util/Iterator;\n+  #103 = InterfaceMethodref #49.#104      // java/util/Map.entrySet:()Ljava/util/Set;\n+  #104 = NameAndType        #105:#62      // entrySet:()Ljava/util/Set;\n+  #105 = Utf8               entrySet\n+  #106 = InterfaceMethodref #107.#99      // java/util/Set.iterator:()Ljava/util/Iterator;\n+  #107 = Class              #108          // java/util/Set\n+  #108 = Utf8               java/util/Set\n+  #109 = InterfaceMethodref #110.#111     // java/util/Iterator.hasNext:()Z\n+  #110 = Class              #112          // java/util/Iterator\n+  #111 = NameAndType        #113:#114     // hasNext:()Z\n+  #112 = Utf8               java/util/Iterator\n+  #113 = Utf8               hasNext\n+  #114 = Utf8               ()Z\n+  #115 = InterfaceMethodref #110.#116     // java/util/Iterator.next:()Ljava/lang/Object;\n+  #116 = NameAndType        #117:#118     // next:()Ljava/lang/Object;\n+  #117 = Utf8               next\n+  #118 = Utf8               ()Ljava/lang/Object;\n+  #119 = Class              #120          // java/util/Map$Entry\n+  #120 = Utf8               java/util/Map$Entry\n+  #121 = InterfaceMethodref #119.#122     // java/util/Map$Entry.getValue:()Ljava/lang/Object;\n+  #122 = NameAndType        #123:#118     // getValue:()Ljava/lang/Object;\n+  #123 = Utf8               getValue\n+  #124 = InterfaceMethodref #119.#125     // java/util/Map$Entry.getKey:()Ljava/lang/Object;\n+  #125 = NameAndType        #126:#118     // getKey:()Ljava/lang/Object;\n+  #126 = Utf8               getKey\n+  #127 = InterfaceMethodref #49.#128      // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #128 = NameAndType        #129:#130     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #129 = Utf8               put\n+  #130 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #131 = Methodref          #132.#133     // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n+  #132 = Class              #134          // java/util/Arrays\n+  #133 = NameAndType        #135:#136     // asList:([Ljava/lang/Object;)Ljava/util/List;\n+  #134 = Utf8               java/util/Arrays\n+  #135 = Utf8               asList\n+  #136 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;\n+  #137 = Class              #138          // java/util/HashMap\n+  #138 = Utf8               java/util/HashMap\n+  #139 = Methodref          #137.#140     // java/util/HashMap.\"<init>\":(I)V\n+  #140 = NameAndType        #5:#141       // \"<init>\":(I)V\n+  #141 = Utf8               (I)V\n+  #142 = Methodref          #8.#143       // org/apache/commons/csv/CSVRecord.putIn:(Ljava/util/Map;)Ljava/util/Map;\n+  #143 = NameAndType        #144:#145     // putIn:(Ljava/util/Map;)Ljava/util/Map;\n+  #144 = Utf8               putIn\n+  #145 = Utf8               (Ljava/util/Map;)Ljava/util/Map;\n+  #146 = Class              #147          // java/lang/StringBuilder\n+  #147 = Utf8               java/lang/StringBuilder\n+  #148 = Methodref          #146.#3       // java/lang/StringBuilder.\"<init>\":()V\n+  #149 = String             #150          // CSVRecord [comment=\n+  #150 = Utf8               CSVRecord [comment=\n+  #151 = Methodref          #146.#152     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #152 = NameAndType        #153:#154     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #153 = Utf8               append\n+  #154 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #155 = String             #156          // , mapping=\n+  #156 = Utf8               , mapping=\n+  #157 = Methodref          #146.#158     // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #158 = NameAndType        #153:#159     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #159 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #160 = String             #161          // , recordNumber=\n+  #161 = Utf8               , recordNumber=\n+  #162 = Methodref          #146.#163     // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+  #163 = NameAndType        #153:#164     // append:(J)Ljava/lang/StringBuilder;\n+  #164 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #165 = String             #166          // , values=\n+  #166 = Utf8               , values=\n+  #167 = Methodref          #132.#168     // java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;\n+  #168 = NameAndType        #35:#169      // toString:([Ljava/lang/Object;)Ljava/lang/String;\n+  #169 = Utf8               ([Ljava/lang/Object;)Ljava/lang/String;\n+  #170 = String             #171          // ]\n+  #171 = Utf8               ]\n+  #172 = Methodref          #146.#33      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #173 = Class              #174          // java/io/Serializable\n+  #174 = Utf8               java/io/Serializable\n+  #175 = Class              #176          // java/lang/Iterable\n+  #176 = Utf8               java/lang/Iterable\n+  #177 = Utf8               serialVersionUID\n+  #178 = Utf8               ConstantValue\n+  #179 = Long               1l\n+  #181 = Utf8               Signature\n+  #182 = Utf8               Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n+  #183 = Utf8               ([Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;JJ)V\n+  #184 = Utf8               Code\n+  #185 = Utf8               LineNumberTable\n+  #186 = Utf8               LocalVariableTable\n+  #187 = Utf8               this\n+  #188 = Utf8               Lorg/apache/commons/csv/CSVRecord;\n+  #189 = Utf8               LocalVariableTypeTable\n+  #190 = Utf8               StackMapTable\n+  #191 = Class              #16           // \"[Ljava/lang/String;\"\n+  #192 = Utf8               ([Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;Ljava/lang/String;JJ)V\n+  #193 = Utf8               (Ljava/lang/Enum;)Ljava/lang/String;\n+  #194 = Utf8               e\n+  #195 = Utf8               Ljava/lang/Enum;\n+  #196 = Utf8               Ljava/lang/Enum<*>;\n+  #197 = Utf8               (Ljava/lang/Enum<*>;)Ljava/lang/String;\n+  #198 = Utf8               (I)Ljava/lang/String;\n+  #199 = Utf8               i\n+  #200 = Utf8               I\n+  #201 = Utf8               Ljava/lang/ArrayIndexOutOfBoundsException;\n+  #202 = Utf8               name\n+  #203 = Utf8               index\n+  #204 = Utf8               Ljava/lang/Integer;\n+  #205 = Utf8               getCharacterPosition\n+  #206 = Utf8               ()J\n+  #207 = Utf8               getComment\n+  #208 = Utf8               getRecordNumber\n+  #209 = Utf8               isConsistent\n+  #210 = Utf8               hasComment\n+  #211 = Utf8               isSet\n+  #212 = Utf8               ()Ljava/util/Iterator<Ljava/lang/String;>;\n+  #213 = Utf8               col\n+  #214 = Utf8               entry\n+  #215 = Utf8               Ljava/util/Map$Entry;\n+  #216 = Utf8               map\n+  #217 = Utf8               Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/Integer;>;\n+  #218 = Utf8               TM;\n+  #219 = Utf8               <M::Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;>(TM;)TM;\n+  #220 = Utf8               ()Ljava/util/List<Ljava/lang/String;>;\n+  #221 = Utf8               toMap\n+  #222 = Utf8               ()Ljava/util/Map;\n+  #223 = Utf8               ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+  #224 = Utf8               ()[Ljava/lang/String;\n+  #225 = Utf8               <clinit>\n+  #226 = Utf8               Ljava/lang/Object;Ljava/io/Serializable;Ljava/lang/Iterable<Ljava/lang/String;>;\n+  #227 = Utf8               SourceFile\n+  #228 = Utf8               CSVRecord.java\n+  #229 = Utf8               InnerClasses\n+  #230 = Utf8               Entry\n {\n   private static final java.lang.String[] EMPTY_STRING_ARRAY;\n     descriptor: [Ljava/lang/String;\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n \n   private static final long serialVersionUID = 1l;\n     descriptor: J\n@@ -254,15 +254,15 @@\n   private final java.lang.String comment;\n     descriptor: Ljava/lang/String;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final java.util.Map<java.lang.String, java.lang.Integer> mapping;\n     descriptor: Ljava/util/Map;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n-    Signature: #71                          // Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n+    Signature: #182                         // Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;\n \n   private final long recordNumber;\n     descriptor: J\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final java.lang.String[] values;\n     descriptor: [Ljava/lang/String;\n@@ -273,31 +273,31 @@\n     flags: (0x0000)\n     Code:\n       stack=3, locals=8, args_size=6\n          0: aload_0\n          1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n          5: lload         4\n-         7: putfield      #2                  // Field recordNumber:J\n+         7: putfield      #7                  // Field recordNumber:J\n         10: aload_0\n         11: aload_1\n         12: ifnull        19\n         15: aload_1\n         16: goto          22\n-        19: getstatic     #3                  // Field EMPTY_STRING_ARRAY:[Ljava/lang/String;\n-        22: putfield      #4                  // Field values:[Ljava/lang/String;\n+        19: getstatic     #13                 // Field EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+        22: putfield      #17                 // Field values:[Ljava/lang/String;\n         25: aload_0\n         26: aload_2\n-        27: putfield      #5                  // Field mapping:Ljava/util/Map;\n+        27: putfield      #20                 // Field mapping:Ljava/util/Map;\n         30: aload_0\n         31: aload_3\n-        32: putfield      #6                  // Field comment:Ljava/lang/String;\n+        32: putfield      #24                 // Field comment:Ljava/lang/String;\n         35: aload_0\n         36: lload         6\n-        38: putfield      #7                  // Field characterPosition:J\n+        38: putfield      #28                 // Field characterPosition:J\n         41: return\n       LineNumberTable:\n         line 52: 0\n         line 53: 4\n         line 54: 10\n         line 55: 25\n         line 56: 30\n@@ -319,44 +319,44 @@\n           offset_delta = 19\n           locals = [ class org/apache/commons/csv/CSVRecord, class \"[Ljava/lang/String;\", class java/util/Map, class java/lang/String, long, long ]\n           stack = [ class org/apache/commons/csv/CSVRecord ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 2\n           locals = [ class org/apache/commons/csv/CSVRecord, class \"[Ljava/lang/String;\", class java/util/Map, class java/lang/String, long, long ]\n           stack = [ class org/apache/commons/csv/CSVRecord, class \"[Ljava/lang/String;\" ]\n-    Signature: #85                          // ([Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;Ljava/lang/String;JJ)V\n+    Signature: #192                         // ([Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;Ljava/lang/String;JJ)V\n \n   public java.lang.String get(java.lang.Enum<?>);\n     descriptor: (Ljava/lang/Enum;)Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokevirtual #8                  // Method java/lang/Enum.toString:()Ljava/lang/String;\n-         5: invokevirtual #9                  // Method get:(Ljava/lang/String;)Ljava/lang/String;\n+         2: invokevirtual #31                 // Method java/lang/Enum.toString:()Ljava/lang/String;\n+         5: invokevirtual #37                 // Method get:(Ljava/lang/String;)Ljava/lang/String;\n          8: areturn\n       LineNumberTable:\n         line 68: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/csv/CSVRecord;\n             0       9     1     e   Ljava/lang/Enum;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0       9     1     e   Ljava/lang/Enum<*>;\n-    Signature: #91                          // (Ljava/lang/Enum<*>;)Ljava/lang/String;\n+    Signature: #197                         // (Ljava/lang/Enum<*>;)Ljava/lang/String;\n \n   public java.lang.String get(int);\n     descriptor: (I)Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n-         1: getfield      #4                  // Field values:[Ljava/lang/String;\n+         1: getfield      #17                 // Field values:[Ljava/lang/String;\n          4: iload_1\n          5: aaload\n          6: areturn\n       LineNumberTable:\n         line 79: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -365,76 +365,76 @@\n \n   public java.lang.String get(java.lang.String);\n     descriptor: (Ljava/lang/String;)Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=7, locals=4, args_size=2\n          0: aload_0\n-         1: getfield      #5                  // Field mapping:Ljava/util/Map;\n+         1: getfield      #20                 // Field mapping:Ljava/util/Map;\n          4: ifnonnull     17\n-         7: new           #10                 // class java/lang/IllegalStateException\n+         7: new           #41                 // class java/lang/IllegalStateException\n         10: dup\n-        11: ldc           #11                 // String No header mapping was specified, the record values can\\'t be accessed by name\n-        13: invokespecial #12                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+        11: ldc           #43                 // String No header mapping was specified, the record values can\\'t be accessed by name\n+        13: invokespecial #45                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n         16: athrow\n         17: aload_0\n-        18: getfield      #5                  // Field mapping:Ljava/util/Map;\n+        18: getfield      #20                 // Field mapping:Ljava/util/Map;\n         21: aload_1\n-        22: invokeinterface #13,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-        27: checkcast     #14                 // class java/lang/Integer\n+        22: invokeinterface #48,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+        27: checkcast     #53                 // class java/lang/Integer\n         30: astore_2\n         31: aload_2\n         32: ifnonnull     68\n-        35: new           #15                 // class java/lang/IllegalArgumentException\n+        35: new           #55                 // class java/lang/IllegalArgumentException\n         38: dup\n-        39: ldc           #16                 // String Mapping for %s not found, expected one of %s\n+        39: ldc           #57                 // String Mapping for %s not found, expected one of %s\n         41: iconst_2\n-        42: anewarray     #17                 // class java/lang/Object\n+        42: anewarray     #2                  // class java/lang/Object\n         45: dup\n         46: iconst_0\n         47: aload_1\n         48: aastore\n         49: dup\n         50: iconst_1\n         51: aload_0\n-        52: getfield      #5                  // Field mapping:Ljava/util/Map;\n-        55: invokeinterface #18,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;\n+        52: getfield      #20                 // Field mapping:Ljava/util/Map;\n+        55: invokeinterface #59,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;\n         60: aastore\n-        61: invokestatic  #19                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-        64: invokespecial #20                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        61: invokestatic  #63                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+        64: invokespecial #69                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         67: athrow\n         68: aload_0\n-        69: getfield      #4                  // Field values:[Ljava/lang/String;\n+        69: getfield      #17                 // Field values:[Ljava/lang/String;\n         72: aload_2\n-        73: invokevirtual #21                 // Method java/lang/Integer.intValue:()I\n+        73: invokevirtual #70                 // Method java/lang/Integer.intValue:()I\n         76: aaload\n         77: areturn\n         78: astore_3\n-        79: new           #15                 // class java/lang/IllegalArgumentException\n+        79: new           #55                 // class java/lang/IllegalArgumentException\n         82: dup\n-        83: ldc           #23                 // String Index for header \\'%s\\' is %d but CSVRecord only has %d values!\n+        83: ldc           #76                 // String Index for header \\'%s\\' is %d but CSVRecord only has %d values!\n         85: iconst_3\n-        86: anewarray     #17                 // class java/lang/Object\n+        86: anewarray     #2                  // class java/lang/Object\n         89: dup\n         90: iconst_0\n         91: aload_1\n         92: aastore\n         93: dup\n         94: iconst_1\n         95: aload_2\n         96: aastore\n         97: dup\n         98: iconst_2\n         99: aload_0\n-       100: getfield      #4                  // Field values:[Ljava/lang/String;\n+       100: getfield      #17                 // Field values:[Ljava/lang/String;\n        103: arraylength\n-       104: invokestatic  #24                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+       104: invokestatic  #78                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n        107: aastore\n-       108: invokestatic  #19                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-       111: invokespecial #20                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+       108: invokestatic  #63                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+       111: invokespecial #69                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n        114: athrow\n       Exception table:\n          from    to  target type\n             68    77    78   Class java/lang/ArrayIndexOutOfBoundsException\n       LineNumberTable:\n         line 96: 0\n         line 97: 7\n@@ -464,63 +464,63 @@\n \n   public long getCharacterPosition();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field characterPosition:J\n+         1: getfield      #28                 // Field characterPosition:J\n          4: lreturn\n       LineNumberTable:\n         line 121: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/csv/CSVRecord;\n \n   public java.lang.String getComment();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #6                  // Field comment:Ljava/lang/String;\n+         1: getfield      #24                 // Field comment:Ljava/lang/String;\n          4: areturn\n       LineNumberTable:\n         line 133: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/csv/CSVRecord;\n \n   public long getRecordNumber();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #2                  // Field recordNumber:J\n+         1: getfield      #7                  // Field recordNumber:J\n          4: lreturn\n       LineNumberTable:\n         line 148: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/csv/CSVRecord;\n \n   public boolean isConsistent();\n     descriptor: ()Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #5                  // Field mapping:Ljava/util/Map;\n+         1: getfield      #20                 // Field mapping:Ljava/util/Map;\n          4: ifnull        24\n          7: aload_0\n-         8: getfield      #5                  // Field mapping:Ljava/util/Map;\n-        11: invokeinterface #25,  1           // InterfaceMethod java/util/Map.size:()I\n+         8: getfield      #20                 // Field mapping:Ljava/util/Map;\n+        11: invokeinterface #82,  1           // InterfaceMethod java/util/Map.size:()I\n         16: aload_0\n-        17: getfield      #4                  // Field values:[Ljava/lang/String;\n+        17: getfield      #17                 // Field values:[Ljava/lang/String;\n         20: arraylength\n         21: if_icmpne     28\n         24: iconst_1\n         25: goto          29\n         28: iconst_0\n         29: ireturn\n       LineNumberTable:\n@@ -536,15 +536,15 @@\n \n   public boolean hasComment();\n     descriptor: ()Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #6                  // Field comment:Ljava/lang/String;\n+         1: getfield      #24                 // Field comment:Ljava/lang/String;\n          4: ifnull        11\n          7: iconst_1\n          8: goto          12\n         11: iconst_0\n         12: ireturn\n       LineNumberTable:\n         line 175: 0\n@@ -558,20 +558,20 @@\n \n   public boolean isMapped(java.lang.String);\n     descriptor: (Ljava/lang/String;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n-         1: getfield      #5                  // Field mapping:Ljava/util/Map;\n+         1: getfield      #20                 // Field mapping:Ljava/util/Map;\n          4: ifnull        24\n          7: aload_0\n-         8: getfield      #5                  // Field mapping:Ljava/util/Map;\n+         8: getfield      #20                 // Field mapping:Ljava/util/Map;\n         11: aload_1\n-        12: invokeinterface #26,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z\n+        12: invokeinterface #85,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z\n         17: ifeq          24\n         20: iconst_1\n         21: goto          25\n         24: iconst_0\n         25: ireturn\n       LineNumberTable:\n         line 186: 0\n@@ -587,24 +587,24 @@\n   public boolean isSet(java.lang.String);\n     descriptor: (Ljava/lang/String;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokevirtual #27                 // Method isMapped:(Ljava/lang/String;)Z\n+         2: invokevirtual #89                 // Method isMapped:(Ljava/lang/String;)Z\n          5: ifeq          36\n          8: aload_0\n-         9: getfield      #5                  // Field mapping:Ljava/util/Map;\n+         9: getfield      #20                 // Field mapping:Ljava/util/Map;\n         12: aload_1\n-        13: invokeinterface #13,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-        18: checkcast     #14                 // class java/lang/Integer\n-        21: invokevirtual #21                 // Method java/lang/Integer.intValue:()I\n+        13: invokeinterface #48,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+        18: checkcast     #53                 // class java/lang/Integer\n+        21: invokevirtual #70                 // Method java/lang/Integer.intValue:()I\n         24: aload_0\n-        25: getfield      #4                  // Field values:[Ljava/lang/String;\n+        25: getfield      #17                 // Field values:[Ljava/lang/String;\n         28: arraylength\n         29: if_icmpge     36\n         32: iconst_1\n         33: goto          37\n         36: iconst_0\n         37: ireturn\n       LineNumberTable:\n@@ -620,64 +620,64 @@\n \n   public java.util.Iterator<java.lang.String> iterator();\n     descriptor: ()Ljava/util/Iterator;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokespecial #28                 // Method toList:()Ljava/util/List;\n-         4: invokeinterface #29,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n+         1: invokespecial #93                 // Method toList:()Ljava/util/List;\n+         4: invokeinterface #97,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n          9: areturn\n       LineNumberTable:\n         line 207: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      10     0  this   Lorg/apache/commons/csv/CSVRecord;\n-    Signature: #113                         // ()Ljava/util/Iterator<Ljava/lang/String;>;\n+    Signature: #212                         // ()Ljava/util/Iterator<Ljava/lang/String;>;\n \n   <M extends java.util.Map<java.lang.String, java.lang.String>> M putIn(M);\n     descriptor: (Ljava/util/Map;)Ljava/util/Map;\n     flags: (0x0000)\n     Code:\n       stack=4, locals=5, args_size=2\n          0: aload_0\n-         1: getfield      #5                  // Field mapping:Ljava/util/Map;\n+         1: getfield      #20                 // Field mapping:Ljava/util/Map;\n          4: ifnonnull     9\n          7: aload_1\n          8: areturn\n          9: aload_0\n-        10: getfield      #5                  // Field mapping:Ljava/util/Map;\n-        13: invokeinterface #30,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;\n-        18: invokeinterface #31,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;\n+        10: getfield      #20                 // Field mapping:Ljava/util/Map;\n+        13: invokeinterface #103,  1          // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;\n+        18: invokeinterface #106,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;\n         23: astore_2\n         24: aload_2\n-        25: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z\n+        25: invokeinterface #109,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z\n         30: ifeq          90\n         33: aload_2\n-        34: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n-        39: checkcast     #34                 // class java/util/Map$Entry\n+        34: invokeinterface #115,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n+        39: checkcast     #119                // class java/util/Map$Entry\n         42: astore_3\n         43: aload_3\n-        44: invokeinterface #35,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;\n-        49: checkcast     #14                 // class java/lang/Integer\n-        52: invokevirtual #21                 // Method java/lang/Integer.intValue:()I\n+        44: invokeinterface #121,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;\n+        49: checkcast     #53                 // class java/lang/Integer\n+        52: invokevirtual #70                 // Method java/lang/Integer.intValue:()I\n         55: istore        4\n         57: iload         4\n         59: aload_0\n-        60: getfield      #4                  // Field values:[Ljava/lang/String;\n+        60: getfield      #17                 // Field values:[Ljava/lang/String;\n         63: arraylength\n         64: if_icmpge     87\n         67: aload_1\n         68: aload_3\n-        69: invokeinterface #36,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;\n+        69: invokeinterface #124,  1          // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;\n         74: aload_0\n-        75: getfield      #4                  // Field values:[Ljava/lang/String;\n+        75: getfield      #17                 // Field values:[Ljava/lang/String;\n         78: iload         4\n         80: aaload\n-        81: invokeinterface #37,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+        81: invokeinterface #127,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n         86: pop\n         87: goto          24\n         90: aload_1\n         91: areturn\n       LineNumberTable:\n         line 218: 0\n         line 219: 7\n@@ -701,100 +701,100 @@\n         frame_type = 9 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 14\n           locals = [ class java/util/Iterator ]\n         frame_type = 62 /* same */\n         frame_type = 250 /* chop */\n           offset_delta = 2\n-    Signature: #125                         // <M::Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;>(TM;)TM;\n+    Signature: #219                         // <M::Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;>(TM;)TM;\n \n   public int size();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #4                  // Field values:[Ljava/lang/String;\n+         1: getfield      #17                 // Field values:[Ljava/lang/String;\n          4: arraylength\n          5: ireturn\n       LineNumberTable:\n         line 236: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0  this   Lorg/apache/commons/csv/CSVRecord;\n \n   private java.util.List<java.lang.String> toList();\n     descriptor: ()Ljava/util/List;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #4                  // Field values:[Ljava/lang/String;\n-         4: invokestatic  #38                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n+         1: getfield      #17                 // Field values:[Ljava/lang/String;\n+         4: invokestatic  #131                // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n          7: areturn\n       LineNumberTable:\n         line 247: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/csv/CSVRecord;\n-    Signature: #130                         // ()Ljava/util/List<Ljava/lang/String;>;\n+    Signature: #220                         // ()Ljava/util/List<Ljava/lang/String;>;\n \n   public java.util.Map<java.lang.String, java.lang.String> toMap();\n     descriptor: ()Ljava/util/Map;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n-         1: new           #39                 // class java/util/HashMap\n+         1: new           #137                // class java/util/HashMap\n          4: dup\n          5: aload_0\n-         6: getfield      #4                  // Field values:[Ljava/lang/String;\n+         6: getfield      #17                 // Field values:[Ljava/lang/String;\n          9: arraylength\n-        10: invokespecial #40                 // Method java/util/HashMap.\"<init>\":(I)V\n-        13: invokevirtual #41                 // Method putIn:(Ljava/util/Map;)Ljava/util/Map;\n+        10: invokespecial #139                // Method java/util/HashMap.\"<init>\":(I)V\n+        13: invokevirtual #142                // Method putIn:(Ljava/util/Map;)Ljava/util/Map;\n         16: areturn\n       LineNumberTable:\n         line 256: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      17     0  this   Lorg/apache/commons/csv/CSVRecord;\n-    Signature: #133                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n+    Signature: #223                         // ()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;\n \n   public java.lang.String toString();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=1, args_size=1\n-         0: new           #42                 // class java/lang/StringBuilder\n+         0: new           #146                // class java/lang/StringBuilder\n          3: dup\n-         4: invokespecial #43                 // Method java/lang/StringBuilder.\"<init>\":()V\n-         7: ldc           #44                 // String CSVRecord [comment=\n-         9: invokevirtual #45                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+         4: invokespecial #148                // Method java/lang/StringBuilder.\"<init>\":()V\n+         7: ldc           #149                // String CSVRecord [comment=\n+         9: invokevirtual #151                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         12: aload_0\n-        13: getfield      #6                  // Field comment:Ljava/lang/String;\n-        16: invokevirtual #45                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        19: ldc           #46                 // String , mapping=\n-        21: invokevirtual #45                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        13: getfield      #24                 // Field comment:Ljava/lang/String;\n+        16: invokevirtual #151                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        19: ldc           #155                // String , mapping=\n+        21: invokevirtual #151                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         24: aload_0\n-        25: getfield      #5                  // Field mapping:Ljava/util/Map;\n-        28: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-        31: ldc           #48                 // String , recordNumber=\n-        33: invokevirtual #45                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        25: getfield      #20                 // Field mapping:Ljava/util/Map;\n+        28: invokevirtual #157                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+        31: ldc           #160                // String , recordNumber=\n+        33: invokevirtual #151                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         36: aload_0\n-        37: getfield      #2                  // Field recordNumber:J\n-        40: invokevirtual #49                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-        43: ldc           #50                 // String , values=\n-        45: invokevirtual #45                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        37: getfield      #7                  // Field recordNumber:J\n+        40: invokevirtual #162                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+        43: ldc           #165                // String , values=\n+        45: invokevirtual #151                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         48: aload_0\n-        49: getfield      #4                  // Field values:[Ljava/lang/String;\n-        52: invokestatic  #51                 // Method java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;\n-        55: invokevirtual #45                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        58: ldc           #52                 // String ]\n-        60: invokevirtual #45                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        63: invokevirtual #53                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        49: getfield      #17                 // Field values:[Ljava/lang/String;\n+        52: invokestatic  #167                // Method java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;\n+        55: invokevirtual #151                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        58: ldc           #170                // String ]\n+        60: invokevirtual #151                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        63: invokevirtual #172                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n         66: areturn\n       LineNumberTable:\n         line 267: 0\n         line 269: 52\n         line 267: 66\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -802,31 +802,31 @@\n \n   java.lang.String[] values();\n     descriptor: ()[Ljava/lang/String;\n     flags: (0x0000)\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #4                  // Field values:[Ljava/lang/String;\n+         1: getfield      #17                 // Field values:[Ljava/lang/String;\n          4: areturn\n       LineNumberTable:\n         line 273: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/csv/CSVRecord;\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=1, locals=0, args_size=0\n          0: iconst_0\n-         1: anewarray     #54                 // class java/lang/String\n-         4: putstatic     #3                  // Field EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+         1: anewarray     #64                 // class java/lang/String\n+         4: putstatic     #13                 // Field EMPTY_STRING_ARRAY:[Ljava/lang/String;\n          7: return\n       LineNumberTable:\n         line 33: 0\n }\n-Signature: #138                         // Ljava/lang/Object;Ljava/io/Serializable;Ljava/lang/Iterable<Ljava/lang/String;>;\n+Signature: #226                         // Ljava/lang/Object;Ljava/io/Serializable;Ljava/lang/Iterable<Ljava/lang/String;>;\n SourceFile: \"CSVRecord.java\"\n InnerClasses:\n-  public static #118= #34 of #84;         // Entry=class java/util/Map$Entry of class java/util/Map\n+  public static #230= #119 of #49;        // Entry=class java/util/Map$Entry of class java/util/Map\n"}]}
