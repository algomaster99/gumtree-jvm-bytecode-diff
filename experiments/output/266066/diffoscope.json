{"diffoscope-json-version": 1, "source1": "first/LOOKUPSWITCH.class", "source2": "second/LOOKUPSWITCH.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,17 +8,17 @@\n public class LOOKUPSWITCH extends Select\n {\n     LOOKUPSWITCH() {\n     }\n     \n     public LOOKUPSWITCH(final int[] match, final InstructionHandle[] targets, final InstructionHandle defaultTarget) {\n         super((short)171, match, targets, defaultTarget);\n-        final short length = (short)(9 + this.getMatchLength() * 8);\n-        super.setLength((int)length);\n-        this.setFixedLength((int)length);\n+        final short n = (short)(9 + this.getMatchLength() * 8);\n+        super.setLength((int)n);\n+        this.setFixedLength((int)n);\n     }\n     \n     public void accept(final Visitor v) {\n         v.visitVariableLengthInstruction((VariableLengthInstruction)this);\n         v.visitStackConsumer((StackConsumer)this);\n         v.visitBranchInstruction((BranchInstruction)this);\n         v.visitSelect((Select)this);\n@@ -33,22 +33,20 @@\n             out.writeInt(super.getMatch(i));\n             out.writeInt(this.setIndices(i, this.getTargetOffset(super.getTarget(i))));\n         }\n     }\n     \n     protected void initFromFile(final ByteSequence bytes, final boolean wide) throws IOException {\n         super.initFromFile(bytes, wide);\n-        final int matchLength = bytes.readInt();\n-        this.setMatchLength(matchLength);\n-        final short fixedLength = (short)(9 + matchLength * 8);\n-        this.setFixedLength((int)fixedLength);\n-        final short length = (short)(matchLength + super.getPadding());\n-        super.setLength((int)length);\n-        super.setMatches(new int[matchLength]);\n-        super.setIndices(new int[matchLength]);\n-        super.setTargets(new InstructionHandle[matchLength]);\n-        for (int i = 0; i < matchLength; ++i) {\n+        final int int1 = bytes.readInt();\n+        this.setMatchLength(int1);\n+        this.setFixedLength((int)(short)(9 + int1 * 8));\n+        super.setLength((int)(short)(int1 + super.getPadding()));\n+        super.setMatches(new int[int1]);\n+        super.setIndices(new int[int1]);\n+        super.setTargets(new InstructionHandle[int1]);\n+        for (int i = 0; i < int1; ++i) {\n             super.setMatch(i, bytes.readInt());\n             super.setIndices(i, bytes.readInt());\n         }\n     }\n }\n"}]}
