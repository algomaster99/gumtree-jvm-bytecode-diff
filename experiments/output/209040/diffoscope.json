{"diffoscope-json-version": 1, "source1": "first/CountingPathVisitor.class", "source2": "second/CountingPathVisitor.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,54 +18,47 @@\n         return new CountingPathVisitor(Counters.bigIntegerPathCounters());\n     }\n     \n     public static CountingPathVisitor withLongCounters() {\n         return new CountingPathVisitor(Counters.longPathCounters());\n     }\n     \n-    public CountingPathVisitor(final Counters.PathCounters pathCounter) {\n-        this.pathCounters = Objects.requireNonNull(pathCounter, \"pathCounter\");\n+    public CountingPathVisitor(final Counters.PathCounters obj) {\n+        this.pathCounters = Objects.requireNonNull(obj, \"pathCounter\");\n     }\n     \n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n-            return true;\n-        }\n-        if (!(obj instanceof CountingPathVisitor)) {\n-            return false;\n-        }\n-        final CountingPathVisitor other = (CountingPathVisitor)obj;\n-        return Objects.equals(this.pathCounters, other.pathCounters);\n+    public boolean equals(final Object o) {\n+        return this == o || (o instanceof CountingPathVisitor && Objects.equals(this.pathCounters, ((CountingPathVisitor)o).pathCounters));\n     }\n     \n     public Counters.PathCounters getPathCounters() {\n         return this.pathCounters;\n     }\n     \n     public int hashCode() {\n         return Objects.hash(this.pathCounters);\n     }\n     \n-    public FileVisitResult postVisitDirectory(final Path dir, final IOException exc) throws IOException {\n+    public FileVisitResult postVisitDirectory(final Path path, final IOException ex) throws IOException {\n         this.pathCounters.getDirectoryCounter().increment();\n         return FileVisitResult.CONTINUE;\n     }\n     \n     public String toString() {\n         return this.pathCounters.toString();\n     }\n     \n-    protected void updateFileCounters(final Path file, final BasicFileAttributes attributes) {\n+    protected void updateFileCounters(final Path path, final BasicFileAttributes basicFileAttributes) {\n         this.pathCounters.getFileCounter().increment();\n-        this.pathCounters.getByteCounter().add(attributes.size());\n+        this.pathCounters.getByteCounter().add(basicFileAttributes.size());\n     }\n     \n-    public FileVisitResult visitFile(final Path file, final BasicFileAttributes attributes) throws IOException {\n-        if (Files.exists(file, new LinkOption[0])) {\n-            this.updateFileCounters(file, attributes);\n+    public FileVisitResult visitFile(final Path path, final BasicFileAttributes basicFileAttributes) throws IOException {\n+        if (Files.exists(path, new LinkOption[0])) {\n+            this.updateFileCounters(path, basicFileAttributes);\n         }\n         return FileVisitResult.CONTINUE;\n     }\n     \n     static {\n         EMPTY_STRING_ARRAY = new String[0];\n     }\n"}]}
