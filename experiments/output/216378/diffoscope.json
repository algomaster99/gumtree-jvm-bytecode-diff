{"diffoscope-json-version": 1, "source1": "first/NestHost.class", "source2": "second/NestHost.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,52 +5,51 @@\n import java.io.IOException;\n import java.io.DataInput;\n \n public final class NestHost extends Attribute\n {\n     private int hostClassIndex;\n     \n-    NestHost(final int nameIndex, final int length, final DataInput input, final ConstantPool constantPool) throws IOException {\n-        this(nameIndex, length, 0, constantPool);\n-        this.hostClassIndex = input.readUnsignedShort();\n+    NestHost(final int n, final int n2, final DataInput dataInput, final ConstantPool constantPool) throws IOException {\n+        this(n, n2, 0, constantPool);\n+        this.hostClassIndex = dataInput.readUnsignedShort();\n     }\n     \n-    public NestHost(final int nameIndex, final int length, final int hostClassIndex, final ConstantPool constantPool) {\n-        super((byte)26, nameIndex, length, constantPool);\n+    public NestHost(final int n, final int n2, final int hostClassIndex, final ConstantPool constantPool) {\n+        super((byte)26, n, n2, constantPool);\n         this.hostClassIndex = hostClassIndex;\n     }\n     \n-    public NestHost(final NestHost c) {\n-        this(c.getNameIndex(), c.getLength(), c.getHostClassIndex(), c.getConstantPool());\n+    public NestHost(final NestHost nestHost) {\n+        this(nestHost.getNameIndex(), nestHost.getLength(), nestHost.getHostClassIndex(), nestHost.getConstantPool());\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitNestHost(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitNestHost(this);\n     }\n     \n     public Attribute copy(final ConstantPool constantPool) {\n-        final NestHost c = (NestHost)this.clone();\n-        c.setConstantPool(constantPool);\n-        return c;\n+        final NestHost nestHost = (NestHost)this.clone();\n+        nestHost.setConstantPool(constantPool);\n+        return nestHost;\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        super.dump(file);\n-        file.writeShort(this.hostClassIndex);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        super.dump(dataOutputStream);\n+        dataOutputStream.writeShort(this.hostClassIndex);\n     }\n     \n     public int getHostClassIndex() {\n         return this.hostClassIndex;\n     }\n     \n     public void setHostClassIndex(final int hostClassIndex) {\n         this.hostClassIndex = hostClassIndex;\n     }\n     \n     public String toString() {\n-        final StringBuilder buf = new StringBuilder();\n-        buf.append(\"NestHost: \");\n-        final String className = super.getConstantPool().getConstantString(this.hostClassIndex, (byte)7);\n-        buf.append(Utility.compactClassName(className, false));\n-        return buf.toString();\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"NestHost: \");\n+        sb.append(Utility.compactClassName(super.getConstantPool().getConstantString(this.hostClassIndex, (byte)7), false));\n+        return sb.toString();\n     }\n }\n"}]}
