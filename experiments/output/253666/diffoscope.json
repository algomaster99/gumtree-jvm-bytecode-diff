{"diffoscope-json-version": 1, "source1": "first/RequireEmptyLineBeforeBlockTagGroupCheck.class", "source2": "second/RequireEmptyLineBeforeBlockTagGroupCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,47 +19,47 @@\n         return new int[] { 10071 };\n     }\n     \n     public int[] getRequiredJavadocTokens() {\n         return this.getAcceptableJavadocTokens();\n     }\n     \n-    public void visitJavadocToken(final DetailNode tagNode) {\n-        if (!isAnotherTagBefore(tagNode) && !isOnlyTagInWholeJavadoc(tagNode) && hasInsufficientConsecutiveNewlines(tagNode)) {\n-            this.log(tagNode.getLineNumber(), \"javadoc.tag.line.before\", new Object[] { tagNode.getChildren()[0].getText() });\n+    public void visitJavadocToken(final DetailNode detailNode) {\n+        if (!isAnotherTagBefore(detailNode) && !isOnlyTagInWholeJavadoc(detailNode) && hasInsufficientConsecutiveNewlines(detailNode)) {\n+            this.log(detailNode.getLineNumber(), \"javadoc.tag.line.before\", new Object[] { detailNode.getChildren()[0].getText() });\n         }\n     }\n     \n-    private static boolean isAnotherTagBefore(final DetailNode tagNode) {\n-        boolean found = false;\n-        for (DetailNode currentNode = JavadocUtil.getPreviousSibling(tagNode); currentNode != null; currentNode = JavadocUtil.getPreviousSibling(currentNode)) {\n-            if (currentNode.getType() == 10071) {\n-                found = true;\n+    private static boolean isAnotherTagBefore(final DetailNode detailNode) {\n+        boolean b = false;\n+        for (DetailNode detailNode2 = JavadocUtil.getPreviousSibling(detailNode); detailNode2 != null; detailNode2 = JavadocUtil.getPreviousSibling(detailNode2)) {\n+            if (detailNode2.getType() == 10071) {\n+                b = true;\n                 break;\n             }\n         }\n-        return found;\n+        return b;\n     }\n     \n-    private static boolean isOnlyTagInWholeJavadoc(final DetailNode tagNode) {\n-        final List<Integer> previousNodeTypes = new ArrayList<Integer>();\n-        for (DetailNode currentNode = JavadocUtil.getPreviousSibling(tagNode); currentNode != null; currentNode = JavadocUtil.getPreviousSibling(currentNode)) {\n-            previousNodeTypes.add(Integer.valueOf(currentNode.getType()));\n+    private static boolean isOnlyTagInWholeJavadoc(final DetailNode detailNode) {\n+        final ArrayList list = new ArrayList();\n+        for (DetailNode detailNode2 = JavadocUtil.getPreviousSibling(detailNode); detailNode2 != null; detailNode2 = JavadocUtil.getPreviousSibling(detailNode2)) {\n+            list.add(Integer.valueOf(detailNode2.getType()));\n         }\n-        return RequireEmptyLineBeforeBlockTagGroupCheck.ONLY_TAG_VARIATION_1.equals(previousNodeTypes) || RequireEmptyLineBeforeBlockTagGroupCheck.ONLY_TAG_VARIATION_2.equals(previousNodeTypes);\n+        return RequireEmptyLineBeforeBlockTagGroupCheck.ONLY_TAG_VARIATION_1.equals(list) || RequireEmptyLineBeforeBlockTagGroupCheck.ONLY_TAG_VARIATION_2.equals(list);\n     }\n     \n-    private static boolean hasInsufficientConsecutiveNewlines(final DetailNode tagNode) {\n-        int count = 0;\n-        for (DetailNode currentNode = JavadocUtil.getPreviousSibling(tagNode); currentNode != null && (currentNode.getType() == 6 || currentNode.getType() == 4 || currentNode.getType() == 1); currentNode = JavadocUtil.getPreviousSibling(currentNode)) {\n-            if (currentNode.getType() == 6) {\n-                ++count;\n+    private static boolean hasInsufficientConsecutiveNewlines(final DetailNode detailNode) {\n+        int n = 0;\n+        for (DetailNode detailNode2 = JavadocUtil.getPreviousSibling(detailNode); detailNode2 != null && (detailNode2.getType() == 6 || detailNode2.getType() == 4 || detailNode2.getType() == 1); detailNode2 = JavadocUtil.getPreviousSibling(detailNode2)) {\n+            if (detailNode2.getType() == 6) {\n+                ++n;\n             }\n         }\n-        return count <= 1;\n+        return n <= 1;\n     }\n     \n     static {\n         ONLY_TAG_VARIATION_1 = Arrays.asList(Integer.valueOf(4), Integer.valueOf(1), Integer.valueOf(6));\n         ONLY_TAG_VARIATION_2 = Arrays.asList(Integer.valueOf(1), Integer.valueOf(6));\n     }\n }\n"}]}
