{"diffoscope-json-version": 1, "source1": "first/DateUtils.class", "source2": "second/DateUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -22,587 +22,583 @@\n     public static final int RANGE_WEEK_SUNDAY = 1;\n     public static final int RANGE_WEEK_MONDAY = 2;\n     public static final int RANGE_WEEK_RELATIVE = 3;\n     public static final int RANGE_WEEK_CENTER = 4;\n     public static final int RANGE_MONTH_SUNDAY = 5;\n     public static final int RANGE_MONTH_MONDAY = 6;\n     \n-    public static boolean isSameDay(final Date date1, final Date date2) {\n-        if (date1 == null || date2 == null) {\n+    public static boolean isSameDay(final Date time, final Date time2) {\n+        if (time == null || time2 == null) {\n             throw nullDateIllegalArgumentException();\n         }\n-        final Calendar cal1 = Calendar.getInstance();\n-        cal1.setTime(date1);\n-        final Calendar cal2 = Calendar.getInstance();\n-        cal2.setTime(date2);\n-        return isSameDay(cal1, cal2);\n+        final Calendar instance = Calendar.getInstance();\n+        instance.setTime(time);\n+        final Calendar instance2 = Calendar.getInstance();\n+        instance2.setTime(time2);\n+        return isSameDay(instance, instance2);\n     }\n     \n-    public static boolean isSameDay(final Calendar cal1, final Calendar cal2) {\n-        if (cal1 == null || cal2 == null) {\n+    public static boolean isSameDay(final Calendar calendar, final Calendar calendar2) {\n+        if (calendar == null || calendar2 == null) {\n             throw nullDateIllegalArgumentException();\n         }\n-        return cal1.get(0) == cal2.get(0) && cal1.get(1) == cal2.get(1) && cal1.get(6) == cal2.get(6);\n+        return calendar.get(0) == calendar2.get(0) && calendar.get(1) == calendar2.get(1) && calendar.get(6) == calendar2.get(6);\n     }\n     \n-    public static boolean isSameInstant(final Date date1, final Date date2) {\n-        if (date1 == null || date2 == null) {\n+    public static boolean isSameInstant(final Date date, final Date date2) {\n+        if (date == null || date2 == null) {\n             throw nullDateIllegalArgumentException();\n         }\n-        return date1.getTime() == date2.getTime();\n+        return date.getTime() == date2.getTime();\n     }\n     \n-    public static boolean isSameInstant(final Calendar cal1, final Calendar cal2) {\n-        if (cal1 == null || cal2 == null) {\n+    public static boolean isSameInstant(final Calendar calendar, final Calendar calendar2) {\n+        if (calendar == null || calendar2 == null) {\n             throw nullDateIllegalArgumentException();\n         }\n-        return cal1.getTime().getTime() == cal2.getTime().getTime();\n+        return calendar.getTime().getTime() == calendar2.getTime().getTime();\n     }\n     \n-    public static boolean isSameLocalTime(final Calendar cal1, final Calendar cal2) {\n-        if (cal1 == null || cal2 == null) {\n+    public static boolean isSameLocalTime(final Calendar calendar, final Calendar calendar2) {\n+        if (calendar == null || calendar2 == null) {\n             throw nullDateIllegalArgumentException();\n         }\n-        return cal1.get(14) == cal2.get(14) && cal1.get(13) == cal2.get(13) && cal1.get(12) == cal2.get(12) && cal1.get(11) == cal2.get(11) && cal1.get(6) == cal2.get(6) && cal1.get(1) == cal2.get(1) && cal1.get(0) == cal2.get(0) && cal1.getClass() == cal2.getClass();\n+        return calendar.get(14) == calendar2.get(14) && calendar.get(13) == calendar2.get(13) && calendar.get(12) == calendar2.get(12) && calendar.get(11) == calendar2.get(11) && calendar.get(6) == calendar2.get(6) && calendar.get(1) == calendar2.get(1) && calendar.get(0) == calendar2.get(0) && calendar.getClass() == calendar2.getClass();\n     }\n     \n-    public static Date parseDate(final String str, final String... parsePatterns) throws ParseException {\n-        return parseDate(str, (Locale)null, parsePatterns);\n+    public static Date parseDate(final String s, final String... array) throws ParseException {\n+        return parseDate(s, (Locale)null, array);\n     }\n     \n-    public static Date parseDate(final String str, final Locale locale, final String... parsePatterns) throws ParseException {\n-        return parseDateWithLeniency(str, locale, parsePatterns, true);\n+    public static Date parseDate(final String s, final Locale locale, final String... array) throws ParseException {\n+        return parseDateWithLeniency(s, locale, array, true);\n     }\n     \n-    public static Date parseDateStrictly(final String str, final String... parsePatterns) throws ParseException {\n-        return parseDateStrictly(str, (Locale)null, parsePatterns);\n+    public static Date parseDateStrictly(final String s, final String... array) throws ParseException {\n+        return parseDateStrictly(s, (Locale)null, array);\n     }\n     \n-    public static Date parseDateStrictly(final String str, final Locale locale, final String... parsePatterns) throws ParseException {\n-        return parseDateWithLeniency(str, locale, parsePatterns, false);\n+    public static Date parseDateStrictly(final String s, final Locale locale, final String... array) throws ParseException {\n+        return parseDateWithLeniency(s, locale, array, false);\n     }\n     \n-    private static Date parseDateWithLeniency(final String str, final Locale locale, final String[] parsePatterns, final boolean lenient) throws ParseException {\n-        if (str == null || parsePatterns == null) {\n+    private static Date parseDateWithLeniency(final String str, final Locale locale, final String[] array, final boolean lenient) throws ParseException {\n+        if (str == null || array == null) {\n             throw new IllegalArgumentException(\"Date and Patterns must not be null\");\n         }\n-        final TimeZone tz = TimeZone.getDefault();\n-        final Locale lcl = (locale == null) ? Locale.getDefault() : locale;\n-        final ParsePosition pos = new ParsePosition(0);\n-        final Calendar calendar = Calendar.getInstance(tz, lcl);\n-        calendar.setLenient(lenient);\n-        for (final String parsePattern : parsePatterns) {\n-            final FastDateParser fdp = new FastDateParser(parsePattern, tz, lcl);\n-            calendar.clear();\n+        final TimeZone default1 = TimeZone.getDefault();\n+        final Locale aLocale = (locale == null) ? Locale.getDefault() : locale;\n+        final ParsePosition parsePosition = new ParsePosition(0);\n+        final Calendar instance = Calendar.getInstance(default1, aLocale);\n+        instance.setLenient(lenient);\n+        for (int length = array.length, i = 0; i < length; ++i) {\n+            final FastDateParser fastDateParser = new FastDateParser(array[i], default1, aLocale);\n+            instance.clear();\n             try {\n-                if (fdp.parse(str, pos, calendar) && pos.getIndex() == str.length()) {\n-                    return calendar.getTime();\n+                if (fastDateParser.parse(str, parsePosition, instance) && parsePosition.getIndex() == str.length()) {\n+                    return instance.getTime();\n                 }\n             }\n             catch (final IllegalArgumentException ex) {}\n-            pos.setIndex(0);\n+            parsePosition.setIndex(0);\n         }\n         throw new ParseException(\"Unable to parse the date: \" + str, -1);\n     }\n     \n-    public static Date addYears(final Date date, final int amount) {\n-        return add(date, 1, amount);\n+    public static Date addYears(final Date date, final int n) {\n+        return add(date, 1, n);\n     }\n     \n-    public static Date addMonths(final Date date, final int amount) {\n-        return add(date, 2, amount);\n+    public static Date addMonths(final Date date, final int n) {\n+        return add(date, 2, n);\n     }\n     \n-    public static Date addWeeks(final Date date, final int amount) {\n-        return add(date, 3, amount);\n+    public static Date addWeeks(final Date date, final int n) {\n+        return add(date, 3, n);\n     }\n     \n-    public static Date addDays(final Date date, final int amount) {\n-        return add(date, 5, amount);\n+    public static Date addDays(final Date date, final int n) {\n+        return add(date, 5, n);\n     }\n     \n-    public static Date addHours(final Date date, final int amount) {\n-        return add(date, 11, amount);\n+    public static Date addHours(final Date date, final int n) {\n+        return add(date, 11, n);\n     }\n     \n-    public static Date addMinutes(final Date date, final int amount) {\n-        return add(date, 12, amount);\n+    public static Date addMinutes(final Date date, final int n) {\n+        return add(date, 12, n);\n     }\n     \n-    public static Date addSeconds(final Date date, final int amount) {\n-        return add(date, 13, amount);\n+    public static Date addSeconds(final Date date, final int n) {\n+        return add(date, 13, n);\n     }\n     \n-    public static Date addMilliseconds(final Date date, final int amount) {\n-        return add(date, 14, amount);\n+    public static Date addMilliseconds(final Date date, final int n) {\n+        return add(date, 14, n);\n     }\n     \n-    private static Date add(final Date date, final int calendarField, final int amount) {\n-        validateDateNotNull(date);\n-        final Calendar c = Calendar.getInstance();\n-        c.setTime(date);\n-        c.add(calendarField, amount);\n-        return c.getTime();\n+    private static Date add(final Date time, final int n, final int n2) {\n+        validateDateNotNull(time);\n+        final Calendar instance = Calendar.getInstance();\n+        instance.setTime(time);\n+        instance.add(n, n2);\n+        return instance.getTime();\n     }\n     \n-    public static Date setYears(final Date date, final int amount) {\n-        return set(date, 1, amount);\n+    public static Date setYears(final Date date, final int n) {\n+        return set(date, 1, n);\n     }\n     \n-    public static Date setMonths(final Date date, final int amount) {\n-        return set(date, 2, amount);\n+    public static Date setMonths(final Date date, final int n) {\n+        return set(date, 2, n);\n     }\n     \n-    public static Date setDays(final Date date, final int amount) {\n-        return set(date, 5, amount);\n+    public static Date setDays(final Date date, final int n) {\n+        return set(date, 5, n);\n     }\n     \n-    public static Date setHours(final Date date, final int amount) {\n-        return set(date, 11, amount);\n+    public static Date setHours(final Date date, final int n) {\n+        return set(date, 11, n);\n     }\n     \n-    public static Date setMinutes(final Date date, final int amount) {\n-        return set(date, 12, amount);\n+    public static Date setMinutes(final Date date, final int n) {\n+        return set(date, 12, n);\n     }\n     \n-    public static Date setSeconds(final Date date, final int amount) {\n-        return set(date, 13, amount);\n+    public static Date setSeconds(final Date date, final int n) {\n+        return set(date, 13, n);\n     }\n     \n-    public static Date setMilliseconds(final Date date, final int amount) {\n-        return set(date, 14, amount);\n+    public static Date setMilliseconds(final Date date, final int n) {\n+        return set(date, 14, n);\n     }\n     \n-    private static Date set(final Date date, final int calendarField, final int amount) {\n-        validateDateNotNull(date);\n-        final Calendar c = Calendar.getInstance();\n-        c.setLenient(false);\n-        c.setTime(date);\n-        c.set(calendarField, amount);\n-        return c.getTime();\n+    private static Date set(final Date time, final int field, final int value) {\n+        validateDateNotNull(time);\n+        final Calendar instance = Calendar.getInstance();\n+        instance.setLenient(false);\n+        instance.setTime(time);\n+        instance.set(field, value);\n+        return instance.getTime();\n     }\n     \n-    public static Calendar toCalendar(final Date date) {\n-        final Calendar c = Calendar.getInstance();\n-        c.setTime(date);\n-        return c;\n+    public static Calendar toCalendar(final Date time) {\n+        final Calendar instance = Calendar.getInstance();\n+        instance.setTime(time);\n+        return instance;\n     }\n     \n-    public static Calendar toCalendar(final Date date, final TimeZone tz) {\n-        final Calendar c = Calendar.getInstance(tz);\n-        c.setTime(date);\n-        return c;\n+    public static Calendar toCalendar(final Date time, final TimeZone zone) {\n+        final Calendar instance = Calendar.getInstance(zone);\n+        instance.setTime(time);\n+        return instance;\n     }\n     \n-    public static Date round(final Date date, final int field) {\n-        validateDateNotNull(date);\n-        final Calendar gval = Calendar.getInstance();\n-        gval.setTime(date);\n-        modify(gval, field, DateUtils.ModifyType.ROUND);\n-        return gval.getTime();\n+    public static Date round(final Date time, final int n) {\n+        validateDateNotNull(time);\n+        final Calendar instance = Calendar.getInstance();\n+        instance.setTime(time);\n+        modify(instance, n, DateUtils.ModifyType.ROUND);\n+        return instance.getTime();\n     }\n     \n-    public static Calendar round(final Calendar date, final int field) {\n-        if (date == null) {\n+    public static Calendar round(final Calendar calendar, final int n) {\n+        if (calendar == null) {\n             throw nullDateIllegalArgumentException();\n         }\n-        final Calendar rounded = (Calendar)date.clone();\n-        modify(rounded, field, DateUtils.ModifyType.ROUND);\n-        return rounded;\n+        final Calendar calendar2 = (Calendar)calendar.clone();\n+        modify(calendar2, n, DateUtils.ModifyType.ROUND);\n+        return calendar2;\n     }\n     \n     private static IllegalArgumentException nullDateIllegalArgumentException() {\n         return new IllegalArgumentException(\"The date must not be null\");\n     }\n     \n-    public static Date round(final Object date, final int field) {\n-        if (date == null) {\n+    public static Date round(final Object obj, final int n) {\n+        if (obj == null) {\n             throw nullDateIllegalArgumentException();\n         }\n-        if (date instanceof Date) {\n-            return round((Date)date, field);\n+        if (obj instanceof Date) {\n+            return round((Date)obj, n);\n         }\n-        if (date instanceof Calendar) {\n-            return round((Calendar)date, field).getTime();\n+        if (obj instanceof Calendar) {\n+            return round((Calendar)obj, n).getTime();\n         }\n-        throw new ClassCastException(\"Could not round \" + date);\n+        throw new ClassCastException(\"Could not round \" + obj);\n     }\n     \n-    public static Date truncate(final Date date, final int field) {\n-        validateDateNotNull(date);\n-        final Calendar gval = Calendar.getInstance();\n-        gval.setTime(date);\n-        modify(gval, field, DateUtils.ModifyType.TRUNCATE);\n-        return gval.getTime();\n+    public static Date truncate(final Date time, final int n) {\n+        validateDateNotNull(time);\n+        final Calendar instance = Calendar.getInstance();\n+        instance.setTime(time);\n+        modify(instance, n, DateUtils.ModifyType.TRUNCATE);\n+        return instance.getTime();\n     }\n     \n-    public static Calendar truncate(final Calendar date, final int field) {\n-        if (date == null) {\n+    public static Calendar truncate(final Calendar calendar, final int n) {\n+        if (calendar == null) {\n             throw nullDateIllegalArgumentException();\n         }\n-        final Calendar truncated = (Calendar)date.clone();\n-        modify(truncated, field, DateUtils.ModifyType.TRUNCATE);\n-        return truncated;\n+        final Calendar calendar2 = (Calendar)calendar.clone();\n+        modify(calendar2, n, DateUtils.ModifyType.TRUNCATE);\n+        return calendar2;\n     }\n     \n-    public static Date truncate(final Object date, final int field) {\n-        if (date == null) {\n+    public static Date truncate(final Object obj, final int n) {\n+        if (obj == null) {\n             throw nullDateIllegalArgumentException();\n         }\n-        if (date instanceof Date) {\n-            return truncate((Date)date, field);\n+        if (obj instanceof Date) {\n+            return truncate((Date)obj, n);\n         }\n-        if (date instanceof Calendar) {\n-            return truncate((Calendar)date, field).getTime();\n+        if (obj instanceof Calendar) {\n+            return truncate((Calendar)obj, n).getTime();\n         }\n-        throw new ClassCastException(\"Could not truncate \" + date);\n+        throw new ClassCastException(\"Could not truncate \" + obj);\n     }\n     \n-    public static Date ceiling(final Date date, final int field) {\n-        validateDateNotNull(date);\n-        final Calendar gval = Calendar.getInstance();\n-        gval.setTime(date);\n-        modify(gval, field, DateUtils.ModifyType.CEILING);\n-        return gval.getTime();\n+    public static Date ceiling(final Date time, final int n) {\n+        validateDateNotNull(time);\n+        final Calendar instance = Calendar.getInstance();\n+        instance.setTime(time);\n+        modify(instance, n, DateUtils.ModifyType.CEILING);\n+        return instance.getTime();\n     }\n     \n-    public static Calendar ceiling(final Calendar date, final int field) {\n-        if (date == null) {\n+    public static Calendar ceiling(final Calendar calendar, final int n) {\n+        if (calendar == null) {\n             throw nullDateIllegalArgumentException();\n         }\n-        final Calendar ceiled = (Calendar)date.clone();\n-        modify(ceiled, field, DateUtils.ModifyType.CEILING);\n-        return ceiled;\n+        final Calendar calendar2 = (Calendar)calendar.clone();\n+        modify(calendar2, n, DateUtils.ModifyType.CEILING);\n+        return calendar2;\n     }\n     \n-    public static Date ceiling(final Object date, final int field) {\n-        if (date == null) {\n+    public static Date ceiling(final Object o, final int n) {\n+        if (o == null) {\n             throw nullDateIllegalArgumentException();\n         }\n-        if (date instanceof Date) {\n-            return ceiling((Date)date, field);\n+        if (o instanceof Date) {\n+            return ceiling((Date)o, n);\n         }\n-        if (date instanceof Calendar) {\n-            return ceiling((Calendar)date, field).getTime();\n+        if (o instanceof Calendar) {\n+            return ceiling((Calendar)o, n).getTime();\n         }\n-        throw new ClassCastException(\"Could not find ceiling of for type: \" + date.getClass());\n+        throw new ClassCastException(\"Could not find ceiling of for type: \" + o.getClass());\n     }\n     \n-    private static void modify(final Calendar val, final int field, final DateUtils.ModifyType modType) {\n-        if (val.get(1) > 280000000) {\n+    private static void modify(final Calendar calendar, final int i, final DateUtils.ModifyType modifyType) {\n+        if (calendar.get(1) > 280000000) {\n             throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n         }\n-        if (field == 14) {\n+        if (i == 14) {\n             return;\n         }\n-        final Date date = val.getTime();\n-        long time = date.getTime();\n-        boolean done = false;\n-        final int millisecs = val.get(14);\n-        if (DateUtils.ModifyType.TRUNCATE == modType || millisecs < 500) {\n-            time -= millisecs;\n-        }\n-        if (field == 13) {\n-            done = true;\n-        }\n-        final int seconds = val.get(13);\n-        if (!done && (DateUtils.ModifyType.TRUNCATE == modType || seconds < 30)) {\n-            time -= seconds * 1000L;\n-        }\n-        if (field == 12) {\n-            done = true;\n-        }\n-        final int minutes = val.get(12);\n-        if (!done && (DateUtils.ModifyType.TRUNCATE == modType || minutes < 30)) {\n-            time -= minutes * 60000L;\n-        }\n-        if (date.getTime() != time) {\n-            date.setTime(time);\n-            val.setTime(date);\n-        }\n-        boolean roundUp = false;\n-        for (final int[] array : DateUtils.fields) {\n-            final int[] aField = array;\n-            for (final int element : array) {\n-                if (element == field) {\n-                    if (modType == DateUtils.ModifyType.CEILING || (modType == DateUtils.ModifyType.ROUND && roundUp)) {\n-                        if (field == 1001) {\n-                            if (val.get(5) == 1) {\n-                                val.add(5, 15);\n+        final Date time = calendar.getTime();\n+        long time2 = time.getTime();\n+        int n = 0;\n+        final int value = calendar.get(14);\n+        if (DateUtils.ModifyType.TRUNCATE == modifyType || value < 500) {\n+            time2 -= value;\n+        }\n+        if (i == 13) {\n+            n = 1;\n+        }\n+        final int value2 = calendar.get(13);\n+        if (n == 0 && (DateUtils.ModifyType.TRUNCATE == modifyType || value2 < 30)) {\n+            time2 -= value2 * 1000L;\n+        }\n+        if (i == 12) {\n+            n = 1;\n+        }\n+        final int value3 = calendar.get(12);\n+        if (n == 0 && (DateUtils.ModifyType.TRUNCATE == modifyType || value3 < 30)) {\n+            time2 -= value3 * 60000L;\n+        }\n+        if (time.getTime() != time2) {\n+            time.setTime(time2);\n+            calendar.setTime(time);\n+        }\n+        boolean b = false;\n+        for (final int[] array2 : DateUtils.fields) {\n+            final int[] array = array2;\n+            for (int length2 = array2.length, k = 0; k < length2; ++k) {\n+                if (array2[k] == i) {\n+                    if (modifyType == DateUtils.ModifyType.CEILING || (modifyType == DateUtils.ModifyType.ROUND && b)) {\n+                        if (i == 1001) {\n+                            if (calendar.get(5) == 1) {\n+                                calendar.add(5, 15);\n                             }\n                             else {\n-                                val.add(5, -15);\n-                                val.add(2, 1);\n+                                calendar.add(5, -15);\n+                                calendar.add(2, 1);\n                             }\n                         }\n-                        else if (field == 9) {\n-                            if (val.get(11) == 0) {\n-                                val.add(11, 12);\n+                        else if (i == 9) {\n+                            if (calendar.get(11) == 0) {\n+                                calendar.add(11, 12);\n                             }\n                             else {\n-                                val.add(11, -12);\n-                                val.add(5, 1);\n+                                calendar.add(11, -12);\n+                                calendar.add(5, 1);\n                             }\n                         }\n                         else {\n-                            val.add(aField[0], 1);\n+                            calendar.add(array[0], 1);\n                         }\n                     }\n                     return;\n                 }\n             }\n-            int offset = 0;\n-            boolean offsetSet = false;\n-            switch (field) {\n+            int value4 = 0;\n+            boolean b2 = false;\n+            switch (i) {\n                 case 1001: {\n-                    if (aField[0] == 5) {\n-                        offset = val.get(5) - 1;\n-                        if (offset >= 15) {\n-                            offset -= 15;\n+                    if (array[0] == 5) {\n+                        value4 = calendar.get(5) - 1;\n+                        if (value4 >= 15) {\n+                            value4 -= 15;\n                         }\n-                        roundUp = (offset > 7);\n-                        offsetSet = true;\n+                        b = (value4 > 7);\n+                        b2 = true;\n                         break;\n                     }\n                     break;\n                 }\n                 case 9: {\n-                    if (aField[0] == 11) {\n-                        offset = val.get(11);\n-                        if (offset >= 12) {\n-                            offset -= 12;\n+                    if (array[0] == 11) {\n+                        value4 = calendar.get(11);\n+                        if (value4 >= 12) {\n+                            value4 -= 12;\n                         }\n-                        roundUp = (offset >= 6);\n-                        offsetSet = true;\n+                        b = (value4 >= 6);\n+                        b2 = true;\n                         break;\n                     }\n                     break;\n                 }\n             }\n-            if (!offsetSet) {\n-                final int min = val.getActualMinimum(aField[0]);\n-                final int max = val.getActualMaximum(aField[0]);\n-                offset = val.get(aField[0]) - min;\n-                roundUp = (offset > (max - min) / 2);\n+            if (!b2) {\n+                final int actualMinimum = calendar.getActualMinimum(array[0]);\n+                final int actualMaximum = calendar.getActualMaximum(array[0]);\n+                value4 = calendar.get(array[0]) - actualMinimum;\n+                b = (value4 > (actualMaximum - actualMinimum) / 2);\n             }\n-            if (offset != 0) {\n-                val.set(aField[0], val.get(aField[0]) - offset);\n+            if (value4 != 0) {\n+                calendar.set(array[0], calendar.get(array[0]) - value4);\n             }\n         }\n-        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n+        throw new IllegalArgumentException(\"The field \" + i + \" is not supported\");\n     }\n     \n-    public static Iterator<Calendar> iterator(final Date focus, final int rangeStyle) {\n-        validateDateNotNull(focus);\n-        final Calendar gval = Calendar.getInstance();\n-        gval.setTime(focus);\n-        return iterator(gval, rangeStyle);\n+    public static Iterator<Calendar> iterator(final Date time, final int n) {\n+        validateDateNotNull(time);\n+        final Calendar instance = Calendar.getInstance();\n+        instance.setTime(time);\n+        return iterator(instance, n);\n     }\n     \n-    public static Iterator<Calendar> iterator(final Calendar focus, final int rangeStyle) {\n-        if (focus == null) {\n+    public static Iterator<Calendar> iterator(final Calendar calendar, final int i) {\n+        if (calendar == null) {\n             throw nullDateIllegalArgumentException();\n         }\n-        Calendar start = null;\n-        Calendar end = null;\n-        int startCutoff = 1;\n-        int endCutoff = 7;\n+        int value = 1;\n+        int n = 7;\n+        Calendar calendar2 = null;\n+        Calendar truncate = null;\n         Label_0231: {\n-            switch (rangeStyle) {\n+            switch (i) {\n                 case 5:\n                 case 6: {\n-                    start = truncate(focus, 2);\n-                    end = (Calendar)start.clone();\n-                    end.add(2, 1);\n-                    end.add(5, -1);\n-                    if (rangeStyle == 6) {\n-                        startCutoff = 2;\n-                        endCutoff = 1;\n+                    calendar2 = truncate(calendar, 2);\n+                    truncate = (Calendar)calendar2.clone();\n+                    truncate.add(2, 1);\n+                    truncate.add(5, -1);\n+                    if (i == 6) {\n+                        value = 2;\n+                        n = 1;\n                         break;\n                     }\n                     break;\n                 }\n                 case 1:\n                 case 2:\n                 case 3:\n                 case 4: {\n-                    start = truncate(focus, 5);\n-                    end = truncate(focus, 5);\n-                    switch (rangeStyle) {\n+                    calendar2 = truncate(calendar, 5);\n+                    truncate = truncate(calendar, 5);\n+                    switch (i) {\n                         case 1: {\n                             break Label_0231;\n                         }\n                         case 2: {\n-                            startCutoff = 2;\n-                            endCutoff = 1;\n+                            value = 2;\n+                            n = 1;\n                             break Label_0231;\n                         }\n                         case 3: {\n-                            startCutoff = focus.get(7);\n-                            endCutoff = startCutoff - 1;\n+                            value = calendar.get(7);\n+                            n = value - 1;\n                             break Label_0231;\n                         }\n                         case 4: {\n-                            startCutoff = focus.get(7) - 3;\n-                            endCutoff = focus.get(7) + 3;\n+                            value = calendar.get(7) - 3;\n+                            n = calendar.get(7) + 3;\n                             break Label_0231;\n                         }\n                         default: {\n                             break Label_0231;\n                         }\n                     }\n                     break;\n                 }\n                 default: {\n-                    throw new IllegalArgumentException(\"The range style \" + rangeStyle + \" is not valid.\");\n+                    throw new IllegalArgumentException(\"The range style \" + i + \" is not valid.\");\n                 }\n             }\n         }\n-        if (startCutoff < 1) {\n-            startCutoff += 7;\n+        if (value < 1) {\n+            value += 7;\n         }\n-        if (startCutoff > 7) {\n-            startCutoff -= 7;\n+        if (value > 7) {\n+            value -= 7;\n         }\n-        if (endCutoff < 1) {\n-            endCutoff += 7;\n+        if (n < 1) {\n+            n += 7;\n         }\n-        if (endCutoff > 7) {\n-            endCutoff -= 7;\n+        if (n > 7) {\n+            n -= 7;\n         }\n-        while (start.get(7) != startCutoff) {\n-            start.add(5, -1);\n+        while (calendar2.get(7) != value) {\n+            calendar2.add(5, -1);\n         }\n-        while (end.get(7) != endCutoff) {\n-            end.add(5, 1);\n+        while (truncate.get(7) != n) {\n+            truncate.add(5, 1);\n         }\n-        return (Iterator<Calendar>)new DateUtils.DateIterator(start, end);\n+        return (Iterator<Calendar>)new DateUtils.DateIterator(calendar2, truncate);\n     }\n     \n-    public static Iterator<?> iterator(final Object focus, final int rangeStyle) {\n-        if (focus == null) {\n+    public static Iterator<?> iterator(final Object obj, final int n) {\n+        if (obj == null) {\n             throw nullDateIllegalArgumentException();\n         }\n-        if (focus instanceof Date) {\n-            return iterator((Date)focus, rangeStyle);\n+        if (obj instanceof Date) {\n+            return iterator((Date)obj, n);\n         }\n-        if (focus instanceof Calendar) {\n-            return iterator((Calendar)focus, rangeStyle);\n+        if (obj instanceof Calendar) {\n+            return iterator((Calendar)obj, n);\n         }\n-        throw new ClassCastException(\"Could not iterate based on \" + focus);\n+        throw new ClassCastException(\"Could not iterate based on \" + obj);\n     }\n     \n-    public static long getFragmentInMilliseconds(final Date date, final int fragment) {\n-        return getFragment(date, fragment, TimeUnit.MILLISECONDS);\n+    public static long getFragmentInMilliseconds(final Date date, final int n) {\n+        return getFragment(date, n, TimeUnit.MILLISECONDS);\n     }\n     \n-    public static long getFragmentInSeconds(final Date date, final int fragment) {\n-        return getFragment(date, fragment, TimeUnit.SECONDS);\n+    public static long getFragmentInSeconds(final Date date, final int n) {\n+        return getFragment(date, n, TimeUnit.SECONDS);\n     }\n     \n-    public static long getFragmentInMinutes(final Date date, final int fragment) {\n-        return getFragment(date, fragment, TimeUnit.MINUTES);\n+    public static long getFragmentInMinutes(final Date date, final int n) {\n+        return getFragment(date, n, TimeUnit.MINUTES);\n     }\n     \n-    public static long getFragmentInHours(final Date date, final int fragment) {\n-        return getFragment(date, fragment, TimeUnit.HOURS);\n+    public static long getFragmentInHours(final Date date, final int n) {\n+        return getFragment(date, n, TimeUnit.HOURS);\n     }\n     \n-    public static long getFragmentInDays(final Date date, final int fragment) {\n-        return getFragment(date, fragment, TimeUnit.DAYS);\n+    public static long getFragmentInDays(final Date date, final int n) {\n+        return getFragment(date, n, TimeUnit.DAYS);\n     }\n     \n-    public static long getFragmentInMilliseconds(final Calendar calendar, final int fragment) {\n-        return getFragment(calendar, fragment, TimeUnit.MILLISECONDS);\n+    public static long getFragmentInMilliseconds(final Calendar calendar, final int n) {\n+        return getFragment(calendar, n, TimeUnit.MILLISECONDS);\n     }\n     \n-    public static long getFragmentInSeconds(final Calendar calendar, final int fragment) {\n-        return getFragment(calendar, fragment, TimeUnit.SECONDS);\n+    public static long getFragmentInSeconds(final Calendar calendar, final int n) {\n+        return getFragment(calendar, n, TimeUnit.SECONDS);\n     }\n     \n-    public static long getFragmentInMinutes(final Calendar calendar, final int fragment) {\n-        return getFragment(calendar, fragment, TimeUnit.MINUTES);\n+    public static long getFragmentInMinutes(final Calendar calendar, final int n) {\n+        return getFragment(calendar, n, TimeUnit.MINUTES);\n     }\n     \n-    public static long getFragmentInHours(final Calendar calendar, final int fragment) {\n-        return getFragment(calendar, fragment, TimeUnit.HOURS);\n+    public static long getFragmentInHours(final Calendar calendar, final int n) {\n+        return getFragment(calendar, n, TimeUnit.HOURS);\n     }\n     \n-    public static long getFragmentInDays(final Calendar calendar, final int fragment) {\n-        return getFragment(calendar, fragment, TimeUnit.DAYS);\n+    public static long getFragmentInDays(final Calendar calendar, final int n) {\n+        return getFragment(calendar, n, TimeUnit.DAYS);\n     }\n     \n-    private static long getFragment(final Date date, final int fragment, final TimeUnit unit) {\n-        validateDateNotNull(date);\n-        final Calendar calendar = Calendar.getInstance();\n-        calendar.setTime(date);\n-        return getFragment(calendar, fragment, unit);\n+    private static long getFragment(final Date time, final int n, final TimeUnit timeUnit) {\n+        validateDateNotNull(time);\n+        final Calendar instance = Calendar.getInstance();\n+        instance.setTime(time);\n+        return getFragment(instance, n, timeUnit);\n     }\n     \n-    private static long getFragment(final Calendar calendar, final int fragment, final TimeUnit unit) {\n+    private static long getFragment(final Calendar calendar, final int i, final TimeUnit timeUnit) {\n         if (calendar == null) {\n             throw nullDateIllegalArgumentException();\n         }\n-        long result = 0L;\n-        final int offset = (unit != TimeUnit.DAYS) ? 1 : 0;\n-        switch (fragment) {\n+        long n = 0L;\n+        final int n2 = (timeUnit != TimeUnit.DAYS) ? 1 : 0;\n+        switch (i) {\n             case 1: {\n-                result += unit.convert(calendar.get(6) - offset, TimeUnit.DAYS);\n+                n += timeUnit.convert(calendar.get(6) - n2, TimeUnit.DAYS);\n                 break;\n             }\n             case 2: {\n-                result += unit.convert(calendar.get(5) - offset, TimeUnit.DAYS);\n+                n += timeUnit.convert(calendar.get(5) - n2, TimeUnit.DAYS);\n                 break;\n             }\n         }\n-        switch (fragment) {\n+        switch (i) {\n             case 1:\n             case 2:\n             case 5:\n             case 6: {\n-                result += unit.convert(calendar.get(11), TimeUnit.HOURS);\n+                n += timeUnit.convert(calendar.get(11), TimeUnit.HOURS);\n             }\n             case 11: {\n-                result += unit.convert(calendar.get(12), TimeUnit.MINUTES);\n+                n += timeUnit.convert(calendar.get(12), TimeUnit.MINUTES);\n             }\n             case 12: {\n-                result += unit.convert(calendar.get(13), TimeUnit.SECONDS);\n+                n += timeUnit.convert(calendar.get(13), TimeUnit.SECONDS);\n             }\n             case 13: {\n-                result += unit.convert(calendar.get(14), TimeUnit.MILLISECONDS);\n+                n += timeUnit.convert(calendar.get(14), TimeUnit.MILLISECONDS);\n                 break;\n             }\n             case 14: {\n                 break;\n             }\n             default: {\n-                throw new IllegalArgumentException(\"The fragment \" + fragment + \" is not supported\");\n+                throw new IllegalArgumentException(\"The fragment \" + i + \" is not supported\");\n             }\n         }\n-        return result;\n+        return n;\n     }\n     \n-    public static boolean truncatedEquals(final Calendar cal1, final Calendar cal2, final int field) {\n-        return truncatedCompareTo(cal1, cal2, field) == 0;\n+    public static boolean truncatedEquals(final Calendar calendar, final Calendar calendar2, final int n) {\n+        return truncatedCompareTo(calendar, calendar2, n) == 0;\n     }\n     \n-    public static boolean truncatedEquals(final Date date1, final Date date2, final int field) {\n-        return truncatedCompareTo(date1, date2, field) == 0;\n+    public static boolean truncatedEquals(final Date date, final Date date2, final int n) {\n+        return truncatedCompareTo(date, date2, n) == 0;\n     }\n     \n-    public static int truncatedCompareTo(final Calendar cal1, final Calendar cal2, final int field) {\n-        final Calendar truncatedCal1 = truncate(cal1, field);\n-        final Calendar truncatedCal2 = truncate(cal2, field);\n-        return truncatedCal1.compareTo(truncatedCal2);\n+    public static int truncatedCompareTo(final Calendar calendar, final Calendar calendar2, final int n) {\n+        return truncate(calendar, n).compareTo(truncate(calendar2, n));\n     }\n     \n-    public static int truncatedCompareTo(final Date date1, final Date date2, final int field) {\n-        final Date truncatedDate1 = truncate(date1, field);\n-        final Date truncatedDate2 = truncate(date2, field);\n-        return truncatedDate1.compareTo(truncatedDate2);\n+    public static int truncatedCompareTo(final Date date, final Date date2, final int n) {\n+        return truncate(date, n).compareTo(truncate(date2, n));\n     }\n     \n     private static void validateDateNotNull(final Date date) {\n         Validate.notNull((Object)date, \"The date must not be null\", new Object[0]);\n     }\n     \n     static {\n"}]}
