{"diffoscope-json-version": 1, "source1": "first/Rule.class", "source2": "second/Rule.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -157,14 +157,17 @@\n                 if (trim.startsWith(\"#include\")) {\n                     final String trim2 = trim.substring(\"#include\".length()).trim();\n                     if (trim2.contains(\" \")) {\n                         throw new IllegalArgumentException(\"Malformed import statement '\" + s2 + \"' in \" + s);\n                     }\n                     try (final Scanner scanner2 = createScanner(trim2)) {\n                         hashMap.putAll(parseRules(scanner2, s + \"->\" + trim2));\n+                        if (scanner2 == null) {\n+                            continue;\n+                        }\n                     }\n                 }\n                 else {\n                     final String[] split = trim.split(\"\\\\s+\");\n                     if (split.length != 4) {\n                         throw new IllegalArgumentException(\"Malformed rule statement split into \" + split.length + \" parts: \" + s2 + \" in \" + s);\n                     }\n@@ -299,14 +302,17 @@\n         for (final NameType nameType : NameType.values()) {\n             final EnumMap m = new EnumMap(RuleType.class);\n             for (final RuleType ruleType : RuleType.values()) {\n                 final HashMap k = new HashMap();\n                 for (final String s : Languages.getInstance(nameType).getLanguages()) {\n                     try (final Scanner scanner = createScanner(nameType, ruleType, s)) {\n                         k.put(s, parseRules(scanner, createResourceName(nameType, ruleType, s)));\n+                        if (scanner == null) {\n+                            continue;\n+                        }\n                     }\n                     catch (final IllegalStateException cause) {\n                         throw new IllegalStateException(\"Problem processing \" + createResourceName(nameType, ruleType, s), cause);\n                     }\n                 }\n                 if (!ruleType.equals((Object)RuleType.RULES)) {\n                     try (final Scanner scanner2 = createScanner(nameType, ruleType, \"common\")) {\n"}]}
