{"diffoscope-json-version": 1, "source1": "first/FastDateParser.class", "source2": "second/FastDateParser.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -47,14 +47,36 @@\n     private static final FastDateParser.Strategy HOUR24_OF_DAY_STRATEGY;\n     private static final FastDateParser.Strategy HOUR12_STRATEGY;\n     private static final FastDateParser.Strategy HOUR_STRATEGY;\n     private static final FastDateParser.Strategy MINUTE_STRATEGY;\n     private static final FastDateParser.Strategy SECOND_STRATEGY;\n     private static final FastDateParser.Strategy MILLISECOND_STRATEGY;\n     \n+    static {\n+        JAPANESE_IMPERIAL = new Locale(\"ja\", \"JP\", \"JP\");\n+        LONGER_FIRST_LOWERCASE = Comparator.reverseOrder();\n+        caches = new ConcurrentMap[17];\n+        ABBREVIATED_YEAR_STRATEGY = (FastDateParser.Strategy)new FastDateParser.FastDateParser$1(1);\n+        NUMBER_MONTH_STRATEGY = (FastDateParser.Strategy)new FastDateParser.FastDateParser$2(2);\n+        LITERAL_YEAR_STRATEGY = (FastDateParser.Strategy)new FastDateParser.NumberStrategy(1);\n+        WEEK_OF_YEAR_STRATEGY = (FastDateParser.Strategy)new FastDateParser.NumberStrategy(3);\n+        WEEK_OF_MONTH_STRATEGY = (FastDateParser.Strategy)new FastDateParser.NumberStrategy(4);\n+        DAY_OF_YEAR_STRATEGY = (FastDateParser.Strategy)new FastDateParser.NumberStrategy(6);\n+        DAY_OF_MONTH_STRATEGY = (FastDateParser.Strategy)new FastDateParser.NumberStrategy(5);\n+        DAY_OF_WEEK_STRATEGY = (FastDateParser.Strategy)new FastDateParser.FastDateParser$3(7);\n+        DAY_OF_WEEK_IN_MONTH_STRATEGY = (FastDateParser.Strategy)new FastDateParser.NumberStrategy(8);\n+        HOUR_OF_DAY_STRATEGY = (FastDateParser.Strategy)new FastDateParser.NumberStrategy(11);\n+        HOUR24_OF_DAY_STRATEGY = (FastDateParser.Strategy)new FastDateParser.FastDateParser$4(11);\n+        HOUR12_STRATEGY = (FastDateParser.Strategy)new FastDateParser.FastDateParser$5(10);\n+        HOUR_STRATEGY = (FastDateParser.Strategy)new FastDateParser.NumberStrategy(10);\n+        MINUTE_STRATEGY = (FastDateParser.Strategy)new FastDateParser.NumberStrategy(12);\n+        SECOND_STRATEGY = (FastDateParser.Strategy)new FastDateParser.NumberStrategy(13);\n+        MILLISECOND_STRATEGY = (FastDateParser.Strategy)new FastDateParser.NumberStrategy(14);\n+    }\n+    \n     protected FastDateParser(final String pattern, final TimeZone timeZone, final Locale locale) {\n         this(pattern, timeZone, locale, null);\n     }\n     \n     protected FastDateParser(final String pattern, final TimeZone timeZone, final Locale locale, final Date centuryStart) {\n         this.pattern = pattern;\n         this.timeZone = timeZone;\n@@ -141,15 +163,15 @@\n     public Date parse(final String source) throws ParseException {\n         final ParsePosition pp = new ParsePosition(0);\n         final Date date = this.parse(source, pp);\n         if (date != null) {\n             return date;\n         }\n         if (this.locale.equals(FastDateParser.JAPANESE_IMPERIAL)) {\n-            throw new ParseException(\"(The \" + this.locale + \" locale does not support dates before 1868 AD)\\nUnparseable date: \\\"\" + source, pp.getErrorIndex());\n+            throw new ParseException(\"(The \" + this.locale + \" locale does not support dates before 1868 AD)\\n\" + \"Unparseable date: \\\"\" + source, pp.getErrorIndex());\n         }\n         throw new ParseException(\"Unparseable date: \" + source, pp.getErrorIndex());\n     }\n     \n     public Object parseObject(final String source, final ParsePosition pos) {\n         return this.parse(source, pos);\n     }\n@@ -283,30 +305,32 @@\n                 return (width > 2) ? FastDateParser.LITERAL_YEAR_STRATEGY : FastDateParser.ABBREVIATED_YEAR_STRATEGY;\n             }\n             case 'X': {\n                 return FastDateParser.ISO8601TimeZoneStrategy.getStrategy(width);\n             }\n             case 'Z': {\n                 if (width == 2) {\n-                    return FastDateParser.ISO8601TimeZoneStrategy.access$400();\n+                    return FastDateParser.ISO8601TimeZoneStrategy.access$0();\n                 }\n                 return this.getLocaleSpecificStrategy(15, definingCalendar);\n             }\n             case 'z': {\n                 return this.getLocaleSpecificStrategy(15, definingCalendar);\n             }\n         }\n     }\n     \n     private static ConcurrentMap<Locale, FastDateParser.Strategy> getCache(final int field) {\n         synchronized (FastDateParser.caches) {\n             if (FastDateParser.caches[field] == null) {\n                 FastDateParser.caches[field] = new ConcurrentHashMap<Locale, FastDateParser.Strategy>(3);\n             }\n-            return FastDateParser.caches[field];\n+            final ConcurrentMap<Locale, FastDateParser.Strategy> concurrentMap = FastDateParser.caches[field];\n+            monitorexit(FastDateParser.caches);\n+            return concurrentMap;\n         }\n     }\n     \n     private FastDateParser.Strategy getLocaleSpecificStrategy(final int field, final Calendar definingCalendar) {\n         final ConcurrentMap<Locale, FastDateParser.Strategy> cache = getCache(field);\n         FastDateParser.Strategy strategy = (FastDateParser.Strategy)cache.get(this.locale);\n         if (strategy == null) {\n@@ -314,30 +338,8 @@\n             final FastDateParser.Strategy inCache = (FastDateParser.Strategy)cache.putIfAbsent(this.locale, strategy);\n             if (inCache != null) {\n                 return inCache;\n             }\n         }\n         return strategy;\n     }\n-    \n-    static {\n-        JAPANESE_IMPERIAL = new Locale(\"ja\", \"JP\", \"JP\");\n-        LONGER_FIRST_LOWERCASE = Comparator.reverseOrder();\n-        caches = new ConcurrentMap[17];\n-        ABBREVIATED_YEAR_STRATEGY = (FastDateParser.Strategy)new FastDateParser.FastDateParser$1(1);\n-        NUMBER_MONTH_STRATEGY = (FastDateParser.Strategy)new FastDateParser.FastDateParser$2(2);\n-        LITERAL_YEAR_STRATEGY = (FastDateParser.Strategy)new FastDateParser.NumberStrategy(1);\n-        WEEK_OF_YEAR_STRATEGY = (FastDateParser.Strategy)new FastDateParser.NumberStrategy(3);\n-        WEEK_OF_MONTH_STRATEGY = (FastDateParser.Strategy)new FastDateParser.NumberStrategy(4);\n-        DAY_OF_YEAR_STRATEGY = (FastDateParser.Strategy)new FastDateParser.NumberStrategy(6);\n-        DAY_OF_MONTH_STRATEGY = (FastDateParser.Strategy)new FastDateParser.NumberStrategy(5);\n-        DAY_OF_WEEK_STRATEGY = (FastDateParser.Strategy)new FastDateParser.FastDateParser$3(7);\n-        DAY_OF_WEEK_IN_MONTH_STRATEGY = (FastDateParser.Strategy)new FastDateParser.NumberStrategy(8);\n-        HOUR_OF_DAY_STRATEGY = (FastDateParser.Strategy)new FastDateParser.NumberStrategy(11);\n-        HOUR24_OF_DAY_STRATEGY = (FastDateParser.Strategy)new FastDateParser.FastDateParser$4(11);\n-        HOUR12_STRATEGY = (FastDateParser.Strategy)new FastDateParser.FastDateParser$5(10);\n-        HOUR_STRATEGY = (FastDateParser.Strategy)new FastDateParser.NumberStrategy(10);\n-        MINUTE_STRATEGY = (FastDateParser.Strategy)new FastDateParser.NumberStrategy(12);\n-        SECOND_STRATEGY = (FastDateParser.Strategy)new FastDateParser.NumberStrategy(13);\n-        MILLISECOND_STRATEGY = (FastDateParser.Strategy)new FastDateParser.NumberStrategy(14);\n-    }\n }\n"}]}
