{"diffoscope-json-version": 1, "source1": "first/SummaryJavadocCheck.class", "source2": "second/SummaryJavadocCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -30,282 +30,272 @@\n     private String period;\n     \n     public SummaryJavadocCheck() {\n         this.forbiddenSummaryFragments = CommonUtil.createPattern(\"^$\");\n         this.period = \".\";\n     }\n     \n-    public void setForbiddenSummaryFragments(final Pattern pattern) {\n-        this.forbiddenSummaryFragments = pattern;\n+    public void setForbiddenSummaryFragments(final Pattern forbiddenSummaryFragments) {\n+        this.forbiddenSummaryFragments = forbiddenSummaryFragments;\n     }\n     \n     public void setPeriod(final String period) {\n         this.period = period;\n     }\n     \n     public int[] getDefaultJavadocTokens() {\n         return new int[] { 10000 };\n     }\n     \n     public int[] getRequiredJavadocTokens() {\n         return this.getAcceptableJavadocTokens();\n     }\n     \n-    public void visitJavadocToken(final DetailNode ast) {\n-        final Optional<DetailNode> inlineTag = getInlineTagNode(ast);\n-        final DetailNode inlineTagNode = (DetailNode)inlineTag.orElse(null);\n-        if (inlineTag.isPresent() && isSummaryTag(inlineTagNode) && isDefinedFirst(inlineTagNode)) {\n-            this.validateSummaryTag(inlineTagNode);\n+    public void visitJavadocToken(final DetailNode detailNode) {\n+        final Optional<DetailNode> inlineTagNode = getInlineTagNode(detailNode);\n+        final DetailNode detailNode2 = (DetailNode)inlineTagNode.orElse(null);\n+        if (inlineTagNode.isPresent() && isSummaryTag(detailNode2) && isDefinedFirst(detailNode2)) {\n+            this.validateSummaryTag(detailNode2);\n         }\n-        else if (inlineTag.isPresent() && isInlineReturnTag(inlineTagNode)) {\n-            this.validateInlineReturnTag(inlineTagNode);\n+        else if (inlineTagNode.isPresent() && isInlineReturnTag(detailNode2)) {\n+            this.validateInlineReturnTag(detailNode2);\n         }\n-        else if (!startsWithInheritDoc(ast)) {\n-            this.validateUntaggedSummary(ast);\n+        else if (!startsWithInheritDoc(detailNode)) {\n+            this.validateUntaggedSummary(detailNode);\n         }\n     }\n     \n-    private void validateUntaggedSummary(final DetailNode ast) {\n-        final String summaryDoc = getSummarySentence(ast);\n-        if (summaryDoc.isEmpty()) {\n-            this.log(ast.getLineNumber(), \"summary.javaDoc.missing\", new Object[0]);\n+    private void validateUntaggedSummary(final DetailNode detailNode) {\n+        final String summarySentence = getSummarySentence(detailNode);\n+        if (summarySentence.isEmpty()) {\n+            this.log(detailNode.getLineNumber(), \"summary.javaDoc.missing\", new Object[0]);\n         }\n         else if (!this.period.isEmpty()) {\n-            final String firstSentence = getFirstSentence(ast);\n-            final int endOfSentence = firstSentence.lastIndexOf(this.period);\n-            if (!summaryDoc.contains(this.period)) {\n-                this.log(ast.getLineNumber(), \"summary.first.sentence\", new Object[0]);\n+            final String firstSentence = getFirstSentence(detailNode);\n+            final int lastIndex = firstSentence.lastIndexOf(this.period);\n+            if (!summarySentence.contains(this.period)) {\n+                this.log(detailNode.getLineNumber(), \"summary.first.sentence\", new Object[0]);\n             }\n-            if (endOfSentence != -1 && this.containsForbiddenFragment(firstSentence.substring(0, endOfSentence))) {\n-                this.log(ast.getLineNumber(), \"summary.javaDoc\", new Object[0]);\n+            if (lastIndex != -1 && this.containsForbiddenFragment(firstSentence.substring(0, lastIndex))) {\n+                this.log(detailNode.getLineNumber(), \"summary.javaDoc\", new Object[0]);\n             }\n         }\n     }\n     \n-    private static Optional<DetailNode> getInlineTagNode(final DetailNode javadoc) {\n-        return Arrays.stream(javadoc.getChildren()).filter(SummaryJavadocCheck::isInlineTagPresent).findFirst().map((Function<? super DetailNode, ? extends DetailNode>)SummaryJavadocCheck::getInlineTagNodeForAst);\n+    private static Optional<DetailNode> getInlineTagNode(final DetailNode detailNode) {\n+        return Arrays.stream(detailNode.getChildren()).filter(SummaryJavadocCheck::isInlineTagPresent).findFirst().map((Function<? super DetailNode, ? extends DetailNode>)SummaryJavadocCheck::getInlineTagNodeForAst);\n     }\n     \n-    private static boolean isDefinedFirst(final DetailNode inlineSummaryTag) {\n-        boolean isDefinedFirst = true;\n-        for (DetailNode currentAst = inlineSummaryTag; currentAst != null && isDefinedFirst; currentAst = JavadocUtil.getPreviousSibling(currentAst)) {\n-            switch (currentAst.getType()) {\n+    private static boolean isDefinedFirst(final DetailNode detailNode) {\n+        boolean blank = true;\n+        for (DetailNode previousSibling = detailNode; previousSibling != null && blank; previousSibling = JavadocUtil.getPreviousSibling(previousSibling)) {\n+            switch (previousSibling.getType()) {\n                 case 10074: {\n-                    isDefinedFirst = currentAst.getText().isBlank();\n+                    blank = previousSibling.getText().isBlank();\n                     break;\n                 }\n                 case 10001: {\n-                    isDefinedFirst = !isTextPresentInsideHtmlTag(currentAst);\n+                    blank = !isTextPresentInsideHtmlTag(previousSibling);\n                     break;\n                 }\n             }\n         }\n-        return isDefinedFirst;\n+        return blank;\n     }\n     \n-    public static boolean isTextPresentInsideHtmlTag(final DetailNode node) {\n-        DetailNode nestedChild = JavadocUtil.getFirstChild(node);\n-        if (node.getType() == 10001) {\n-            nestedChild = JavadocUtil.getFirstChild(nestedChild);\n+    public static boolean isTextPresentInsideHtmlTag(final DetailNode detailNode) {\n+        DetailNode detailNode2 = JavadocUtil.getFirstChild(detailNode);\n+        if (detailNode.getType() == 10001) {\n+            detailNode2 = JavadocUtil.getFirstChild(detailNode2);\n         }\n-        boolean isTextPresentInsideHtmlTag;\n-        for (isTextPresentInsideHtmlTag = false; nestedChild != null && !isTextPresentInsideHtmlTag; nestedChild = JavadocUtil.getNextSibling(nestedChild)) {\n-            switch (nestedChild.getType()) {\n+        boolean textPresentInsideHtmlTag;\n+        for (textPresentInsideHtmlTag = false; detailNode2 != null && !textPresentInsideHtmlTag; detailNode2 = JavadocUtil.getNextSibling(detailNode2)) {\n+            switch (detailNode2.getType()) {\n                 case 10074: {\n-                    isTextPresentInsideHtmlTag = !nestedChild.getText().isBlank();\n+                    textPresentInsideHtmlTag = !detailNode2.getText().isBlank();\n                     break;\n                 }\n                 case 10001:\n                 case 10005: {\n-                    isTextPresentInsideHtmlTag = isTextPresentInsideHtmlTag(nestedChild);\n+                    textPresentInsideHtmlTag = isTextPresentInsideHtmlTag(detailNode2);\n                     break;\n                 }\n             }\n         }\n-        return isTextPresentInsideHtmlTag;\n+        return textPresentInsideHtmlTag;\n     }\n     \n-    private static boolean isInlineTagPresent(final DetailNode ast) {\n-        return getInlineTagNodeForAst(ast) != null;\n+    private static boolean isInlineTagPresent(final DetailNode detailNode) {\n+        return getInlineTagNodeForAst(detailNode) != null;\n     }\n     \n-    private static DetailNode getInlineTagNodeForAst(final DetailNode ast) {\n-        DetailNode node = ast;\n-        DetailNode result = null;\n-        if (node.getType() == 10072) {\n-            result = node;\n+    private static DetailNode getInlineTagNodeForAst(final DetailNode detailNode) {\n+        DetailNode detailNode2 = null;\n+        if (detailNode.getType() == 10072) {\n+            detailNode2 = detailNode;\n         }\n-        else if (node.getType() == 10005) {\n-            node = node.getChildren()[1];\n-            result = getInlineTagNodeForAst(node);\n+        else if (detailNode.getType() == 10005) {\n+            detailNode2 = getInlineTagNodeForAst(detailNode.getChildren()[1]);\n         }\n-        else if (node.getType() == 10001 && node.getChildren()[0].getChildren().length > 1) {\n-            node = node.getChildren()[0].getChildren()[1];\n-            result = getInlineTagNodeForAst(node);\n+        else if (detailNode.getType() == 10001 && detailNode.getChildren()[0].getChildren().length > 1) {\n+            detailNode2 = getInlineTagNodeForAst(detailNode.getChildren()[0].getChildren()[1]);\n         }\n-        return result;\n+        return detailNode2;\n     }\n     \n-    private static boolean isSummaryTag(final DetailNode javadocInlineTag) {\n-        return isInlineTagWithName(javadocInlineTag, \"@summary\");\n+    private static boolean isSummaryTag(final DetailNode detailNode) {\n+        return isInlineTagWithName(detailNode, \"@summary\");\n     }\n     \n-    private static boolean isInlineReturnTag(final DetailNode javadocInlineTag) {\n-        return isInlineTagWithName(javadocInlineTag, \"@return\");\n+    private static boolean isInlineReturnTag(final DetailNode detailNode) {\n+        return isInlineTagWithName(detailNode, \"@return\");\n     }\n     \n-    private static boolean isInlineTagWithName(final DetailNode javadocInlineTag, final String name) {\n-        final DetailNode[] child = javadocInlineTag.getChildren();\n-        return name.equals(child[1].getText());\n+    private static boolean isInlineTagWithName(final DetailNode detailNode, final String s) {\n+        return s.equals(detailNode.getChildren()[1].getText());\n     }\n     \n-    private void validateSummaryTag(final DetailNode inlineSummaryTag) {\n-        final String inlineSummary = getContentOfInlineCustomTag(inlineSummaryTag);\n-        final String summaryVisible = getVisibleContent(inlineSummary);\n-        if (summaryVisible.isEmpty()) {\n-            this.log(inlineSummaryTag.getLineNumber(), \"summary.javaDoc.missing\", new Object[0]);\n+    private void validateSummaryTag(final DetailNode detailNode) {\n+        final String contentOfInlineCustomTag = getContentOfInlineCustomTag(detailNode);\n+        final String visibleContent = getVisibleContent(contentOfInlineCustomTag);\n+        if (visibleContent.isEmpty()) {\n+            this.log(detailNode.getLineNumber(), \"summary.javaDoc.missing\", new Object[0]);\n         }\n         else if (!this.period.isEmpty()) {\n-            final boolean isPeriodNotAtEnd = summaryVisible.lastIndexOf(this.period) != summaryVisible.length() - 1;\n-            if (isPeriodNotAtEnd) {\n-                this.log(inlineSummaryTag.getLineNumber(), \"summary.javaDoc.missing.period\", new Object[0]);\n+            if (visibleContent.lastIndexOf(this.period) != visibleContent.length() - 1) {\n+                this.log(detailNode.getLineNumber(), \"summary.javaDoc.missing.period\", new Object[0]);\n             }\n-            else if (this.containsForbiddenFragment(inlineSummary)) {\n-                this.log(inlineSummaryTag.getLineNumber(), \"summary.javaDoc\", new Object[0]);\n+            else if (this.containsForbiddenFragment(contentOfInlineCustomTag)) {\n+                this.log(detailNode.getLineNumber(), \"summary.javaDoc\", new Object[0]);\n             }\n         }\n     }\n     \n-    private void validateInlineReturnTag(final DetailNode inlineReturnTag) {\n-        final String inlineReturn = getContentOfInlineCustomTag(inlineReturnTag);\n-        final String returnVisible = getVisibleContent(inlineReturn);\n-        if (returnVisible.isEmpty()) {\n-            this.log(inlineReturnTag.getLineNumber(), \"summary.javaDoc.missing\", new Object[0]);\n+    private void validateInlineReturnTag(final DetailNode detailNode) {\n+        final String contentOfInlineCustomTag = getContentOfInlineCustomTag(detailNode);\n+        if (getVisibleContent(contentOfInlineCustomTag).isEmpty()) {\n+            this.log(detailNode.getLineNumber(), \"summary.javaDoc.missing\", new Object[0]);\n         }\n-        else if (this.containsForbiddenFragment(inlineReturn)) {\n-            this.log(inlineReturnTag.getLineNumber(), \"summary.javaDoc\", new Object[0]);\n+        else if (this.containsForbiddenFragment(contentOfInlineCustomTag)) {\n+            this.log(detailNode.getLineNumber(), \"summary.javaDoc\", new Object[0]);\n         }\n     }\n     \n-    public static String getContentOfInlineCustomTag(final DetailNode inlineTag) {\n-        final DetailNode[] childrenOfInlineTag = inlineTag.getChildren();\n-        final StringBuilder customTagContent = new StringBuilder(256);\n-        final int indexOfContentOfSummaryTag = 3;\n-        if (childrenOfInlineTag.length != 3) {\n-            for (DetailNode currentNode = childrenOfInlineTag[3]; currentNode.getType() != 20; currentNode = JavadocUtil.getNextSibling(currentNode)) {\n-                extractInlineTagContent(currentNode, customTagContent);\n+    public static String getContentOfInlineCustomTag(final DetailNode detailNode) {\n+        final DetailNode[] children = detailNode.getChildren();\n+        final StringBuilder sb = new StringBuilder(256);\n+        if (children.length != 3) {\n+            for (DetailNode nextSibling = children[3]; nextSibling.getType() != 20; nextSibling = JavadocUtil.getNextSibling(nextSibling)) {\n+                extractInlineTagContent(nextSibling, sb);\n             }\n         }\n-        return customTagContent.toString();\n+        return sb.toString();\n     }\n     \n-    private static void extractInlineTagContent(final DetailNode node, final StringBuilder customTagContent) {\n-        final DetailNode[] children = node.getChildren();\n+    private static void extractInlineTagContent(final DetailNode detailNode, final StringBuilder sb) {\n+        final DetailNode[] children = detailNode.getChildren();\n         if (children.length == 0) {\n-            customTagContent.append(node.getText());\n+            sb.append(detailNode.getText());\n         }\n         else {\n-            for (final DetailNode child : children) {\n-                if (child.getType() != 1) {\n-                    extractInlineTagContent(child, customTagContent);\n+            for (final DetailNode detailNode2 : children) {\n+                if (detailNode2.getType() != 1) {\n+                    extractInlineTagContent(detailNode2, sb);\n                 }\n             }\n         }\n     }\n     \n-    private static String getVisibleContent(final String summary) {\n-        final String visibleSummary = SummaryJavadocCheck.HTML_ELEMENTS.matcher(summary).replaceAll(\"\");\n-        return visibleSummary.trim();\n+    private static String getVisibleContent(final String input) {\n+        return SummaryJavadocCheck.HTML_ELEMENTS.matcher(input).replaceAll(\"\").trim();\n     }\n     \n-    private boolean containsForbiddenFragment(final String firstSentence) {\n-        final String javadocText = SummaryJavadocCheck.JAVADOC_MULTILINE_TO_SINGLELINE_PATTERN.matcher(firstSentence).replaceAll(\" \").trim();\n-        return this.forbiddenSummaryFragments.matcher(trimExcessWhitespaces(javadocText)).find();\n+    private boolean containsForbiddenFragment(final String input) {\n+        return this.forbiddenSummaryFragments.matcher(trimExcessWhitespaces(SummaryJavadocCheck.JAVADOC_MULTILINE_TO_SINGLELINE_PATTERN.matcher(input).replaceAll(\" \").trim())).find();\n     }\n     \n-    private static String trimExcessWhitespaces(final String text) {\n-        final StringBuilder result = new StringBuilder(256);\n-        boolean previousWhitespace = true;\n-        for (final char letter : text.toCharArray()) {\n+    private static String trimExcessWhitespaces(final String s) {\n+        final StringBuilder sb = new StringBuilder(256);\n+        int n = 1;\n+        for (final char ch : s.toCharArray()) {\n             Label_0075: {\n-                char print;\n-                if (Character.isWhitespace(letter)) {\n-                    if (previousWhitespace) {\n+                char c;\n+                if (Character.isWhitespace(ch)) {\n+                    if (n != 0) {\n                         break Label_0075;\n                     }\n-                    previousWhitespace = true;\n-                    print = ' ';\n+                    n = 1;\n+                    c = ' ';\n                 }\n                 else {\n-                    previousWhitespace = false;\n-                    print = letter;\n+                    n = 0;\n+                    c = ch;\n                 }\n-                result.append(print);\n+                sb.append(c);\n             }\n         }\n-        return result.toString();\n+        return sb.toString();\n     }\n     \n-    private static boolean startsWithInheritDoc(final DetailNode root) {\n-        boolean found = false;\n-        for (final DetailNode child : root.getChildren()) {\n-            if (child.getType() == 10072 && child.getChildren()[1].getType() == 47) {\n-                found = true;\n+    private static boolean startsWithInheritDoc(final DetailNode detailNode) {\n+        boolean b = false;\n+        for (final DetailNode detailNode2 : detailNode.getChildren()) {\n+            if (detailNode2.getType() == 10072 && detailNode2.getChildren()[1].getType() == 47) {\n+                b = true;\n             }\n-            if ((child.getType() == 10074 || child.getType() == 10001) && !CommonUtil.isBlank(child.getText())) {\n+            if ((detailNode2.getType() == 10074 || detailNode2.getType() == 10001) && !CommonUtil.isBlank(detailNode2.getText())) {\n                 break;\n             }\n         }\n-        return found;\n+        return b;\n     }\n     \n-    private static String getSummarySentence(final DetailNode ast) {\n-        final StringBuilder result = new StringBuilder(256);\n-        for (final DetailNode child : ast.getChildren()) {\n-            if (child.getType() != -1 && SummaryJavadocCheck.ALLOWED_TYPES.get(child.getType())) {\n-                result.append(child.getText());\n+    private static String getSummarySentence(final DetailNode detailNode) {\n+        final StringBuilder sb = new StringBuilder(256);\n+        for (final DetailNode detailNode2 : detailNode.getChildren()) {\n+            if (detailNode2.getType() != -1 && SummaryJavadocCheck.ALLOWED_TYPES.get(detailNode2.getType())) {\n+                sb.append(detailNode2.getText());\n             }\n             else {\n-                final String summary = result.toString();\n-                if (child.getType() == 10001 && CommonUtil.isBlank(summary)) {\n-                    result.append(getStringInsideTag(summary, child.getChildren()[0].getChildren()[0]));\n+                final String string = sb.toString();\n+                if (detailNode2.getType() == 10001 && CommonUtil.isBlank(string)) {\n+                    sb.append(getStringInsideTag(string, detailNode2.getChildren()[0].getChildren()[0]));\n                 }\n             }\n         }\n-        return result.toString().trim();\n+        return sb.toString().trim();\n     }\n     \n-    private static String getStringInsideTag(final String result, final DetailNode detailNode) {\n-        final StringBuilder contents = new StringBuilder(result);\n-        for (DetailNode tempNode = detailNode; tempNode != null; tempNode = JavadocUtil.getNextSibling(tempNode)) {\n-            if (tempNode.getType() == 10074) {\n-                contents.append(tempNode.getText());\n+    private static String getStringInsideTag(final String str, final DetailNode detailNode) {\n+        final StringBuilder sb = new StringBuilder(str);\n+        for (DetailNode nextSibling = detailNode; nextSibling != null; nextSibling = JavadocUtil.getNextSibling(nextSibling)) {\n+            if (nextSibling.getType() == 10074) {\n+                sb.append(nextSibling.getText());\n             }\n         }\n-        return contents.toString();\n+        return sb.toString();\n     }\n     \n-    private static String getFirstSentence(final DetailNode ast) {\n-        final StringBuilder result = new StringBuilder(256);\n-        final String periodSuffix = \". \";\n-        for (final DetailNode child : ast.getChildren()) {\n-            String text;\n-            if (child.getChildren().length == 0) {\n-                text = child.getText();\n+    private static String getFirstSentence(final DetailNode detailNode) {\n+        final StringBuilder sb = new StringBuilder(256);\n+        for (final DetailNode detailNode2 : detailNode.getChildren()) {\n+            String s;\n+            if (detailNode2.getChildren().length == 0) {\n+                s = detailNode2.getText();\n             }\n             else {\n-                text = getFirstSentence(child);\n+                s = getFirstSentence(detailNode2);\n             }\n-            if (text.contains(\". \")) {\n-                result.append(text, 0, text.indexOf(\". \") + 1);\n+            if (s.contains(\". \")) {\n+                sb.append(s, 0, s.indexOf(\". \") + 1);\n                 break;\n             }\n-            result.append(text);\n+            sb.append(s);\n         }\n-        return result.toString();\n+        return sb.toString();\n     }\n     \n     static {\n         JAVADOC_MULTILINE_TO_SINGLELINE_PATTERN = Pattern.compile(\"\\n +(\\\\*)|^ +(\\\\*)\");\n         HTML_ELEMENTS = Pattern.compile(\"<[^>]*>\");\n         ALLOWED_TYPES = TokenUtil.asBitSet(new int[] { 4, 10068, 10074 });\n     }\n"}]}
