{"diffoscope-json-version": 1, "source1": "first/Tailer.class", "source2": "second/Tailer.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -115,15 +115,15 @@\n             while (this.getRun()) {\n                 if (reader != null) {\n                     break;\n                 }\n                 try {\n                     reader = new RandomAccessFile(this.file, \"r\");\n                 }\n-                catch (final FileNotFoundException ex) {\n+                catch (final FileNotFoundException e) {\n                     this.listener.fileNotFound();\n                 }\n                 if (reader == null) {\n                     Thread.sleep(this.delayMillis);\n                 }\n                 else {\n                     position = (this.end ? this.file.length() : 0L);\n@@ -165,15 +165,15 @@\n                                 final Throwable exception;\n                                 if (t != exception) {\n                                     t.addSuppressed(exception);\n                                 }\n                             }\n                         }\n                     }\n-                    catch (final FileNotFoundException ex2) {\n+                    catch (final FileNotFoundException e2) {\n                         this.listener.fileNotFound();\n                         Thread.sleep(this.delayMillis);\n                         continue;\n                     }\n                 }\n                 if (length > position) {\n                     position = this.readLines(reader);\n@@ -191,39 +191,39 @@\n                 Thread.sleep(this.delayMillis);\n                 if (this.getRun() && this.reOpen) {\n                     reader = new RandomAccessFile(this.file, \"r\");\n                     reader.seek(position);\n                 }\n             }\n         }\n-        catch (final InterruptedException e) {\n+        catch (final InterruptedException e3) {\n             Thread.currentThread().interrupt();\n-            this.listener.handle((Exception)e);\n+            this.listener.handle((Exception)e3);\n         }\n-        catch (final Exception e2) {\n-            this.listener.handle(e2);\n+        catch (final Exception e4) {\n+            this.listener.handle(e4);\n         }\n         finally {\n             try {\n                 if (reader != null) {\n                     reader.close();\n                 }\n             }\n-            catch (final IOException e3) {\n-                this.listener.handle((Exception)e3);\n+            catch (final IOException e5) {\n+                this.listener.handle((Exception)e5);\n             }\n             this.stop();\n         }\n         try {\n             if (reader != null) {\n                 reader.close();\n             }\n         }\n-        catch (final IOException e3) {\n-            this.listener.handle((Exception)e3);\n+        catch (final IOException e5) {\n+            this.listener.handle((Exception)e5);\n         }\n         this.stop();\n     }\n     \n     public void stop() {\n         this.run = false;\n     }\n"}]}
