{"diffoscope-json-version": 1, "source1": "first/Base32.class", "source2": "second/Base32.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,14 +19,21 @@\n     private static final long MASK_1BITS = 1L;\n     private final int decodeSize;\n     private final byte[] decodeTable;\n     private final int encodeSize;\n     private final byte[] encodeTable;\n     private final byte[] lineSeparator;\n     \n+    static {\n+        DECODE_TABLE = new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 };\n+        ENCODE_TABLE = new byte[] { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 50, 51, 52, 53, 54, 55 };\n+        HEX_DECODE_TABLE = new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };\n+        HEX_ENCODE_TABLE = new byte[] { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86 };\n+    }\n+    \n     public Base32() {\n         this(false);\n     }\n     \n     public Base32(final boolean useHex) {\n         this(0, null, useHex, (byte)61);\n     }\n@@ -172,15 +179,15 @@\n     \n     void encode(final byte[] input, int inPos, final int inAvail, final BaseNCodec.Context context) {\n         if (context.eof) {\n             return;\n         }\n         if (inAvail < 0) {\n             context.eof = true;\n-            if (0 == context.modulus && this.lineLength == 0) {\n+            if (context.modulus == 0 && this.lineLength == 0) {\n                 return;\n             }\n             final byte[] buffer = this.ensureBufferSize(this.encodeSize, context);\n             final int savedPos = context.pos;\n             switch (context.modulus) {\n                 case 0: {\n                     break;\n@@ -244,15 +251,15 @@\n                 final byte[] buffer2 = this.ensureBufferSize(this.encodeSize, context);\n                 context.modulus = (context.modulus + 1) % 5;\n                 int b = input[inPos++];\n                 if (b < 0) {\n                     b += 256;\n                 }\n                 context.lbitWorkArea = (context.lbitWorkArea << 8) + b;\n-                if (0 == context.modulus) {\n+                if (context.modulus == 0) {\n                     buffer2[context.pos++] = this.encodeTable[(int)(context.lbitWorkArea >> 35) & 0x1F];\n                     buffer2[context.pos++] = this.encodeTable[(int)(context.lbitWorkArea >> 30) & 0x1F];\n                     buffer2[context.pos++] = this.encodeTable[(int)(context.lbitWorkArea >> 25) & 0x1F];\n                     buffer2[context.pos++] = this.encodeTable[(int)(context.lbitWorkArea >> 20) & 0x1F];\n                     buffer2[context.pos++] = this.encodeTable[(int)(context.lbitWorkArea >> 15) & 0x1F];\n                     buffer2[context.pos++] = this.encodeTable[(int)(context.lbitWorkArea >> 10) & 0x1F];\n                     buffer2[context.pos++] = this.encodeTable[(int)(context.lbitWorkArea >> 5) & 0x1F];\n@@ -279,15 +286,8 @@\n     }\n     \n     private void validateTrailingCharacters() {\n         if (this.isStrictDecoding()) {\n             throw new IllegalArgumentException(\"Strict decoding: Last encoded character(s) (before the paddings if any) are valid base 32 alphabet but not a possible encoding. Decoding requires either 2, 4, 5, or 7 trailing 5-bit characters to create bytes.\");\n         }\n     }\n-    \n-    static {\n-        DECODE_TABLE = new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 };\n-        ENCODE_TABLE = new byte[] { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 50, 51, 52, 53, 54, 55 };\n-        HEX_DECODE_TABLE = new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };\n-        HEX_ENCODE_TABLE = new byte[] { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86 };\n-    }\n }\n"}]}
