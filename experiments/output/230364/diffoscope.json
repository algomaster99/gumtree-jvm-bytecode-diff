{"diffoscope-json-version": 1, "source1": "first/CodeAttribute.class", "source2": "second/CodeAttribute.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,113 +15,104 @@\n     public List byteCodes;\n     public int codeLength;\n     public List exceptionTable;\n     public int maxLocals;\n     public int maxStack;\n     private static CPUTF8 attributeName;\n     \n-    public CodeAttribute(final int maxStack, final int maxLocals, final byte[] codePacked, final Segment segment, final OperandManager operandManager, final List exceptionTable) {\n+    public CodeAttribute(final int maxStack, final int maxLocals, final byte[] array, final Segment segment, final OperandManager operandManager, final List exceptionTable) {\n         super(CodeAttribute.attributeName);\n         this.attributes = new ArrayList();\n         this.byteCodeOffsets = new ArrayList();\n         this.byteCodes = new ArrayList();\n         this.maxLocals = maxLocals;\n         this.maxStack = maxStack;\n         this.codeLength = 0;\n         this.exceptionTable = exceptionTable;\n         this.byteCodeOffsets.add(Integer.valueOf(0));\n         int byteCodeIndex = 0;\n-        for (int i = 0; i < codePacked.length; ++i) {\n-            final ByteCode byteCode = ByteCode.getByteCode(codePacked[i] & 0xFF);\n+        for (int i = 0; i < array.length; ++i) {\n+            final ByteCode byteCode = ByteCode.getByteCode(array[i] & 0xFF);\n             byteCode.setByteCodeIndex(byteCodeIndex);\n             ++byteCodeIndex;\n             byteCode.extractOperands(operandManager, segment, this.codeLength);\n             this.byteCodes.add(byteCode);\n             this.codeLength += byteCode.getLength();\n-            final int lastBytecodePosition = (int)Integer.valueOf(this.byteCodeOffsets.get(this.byteCodeOffsets.size() - 1));\n+            final int intValue = (int)Integer.valueOf(this.byteCodeOffsets.get(this.byteCodeOffsets.size() - 1));\n             if (byteCode.hasMultipleByteCodes()) {\n-                this.byteCodeOffsets.add(Integer.valueOf(lastBytecodePosition + 1));\n+                this.byteCodeOffsets.add(Integer.valueOf(intValue + 1));\n                 ++byteCodeIndex;\n             }\n-            if (i < codePacked.length - 1) {\n-                this.byteCodeOffsets.add(Integer.valueOf(lastBytecodePosition + byteCode.getLength()));\n+            if (i < array.length - 1) {\n+                this.byteCodeOffsets.add(Integer.valueOf(intValue + byteCode.getLength()));\n             }\n             if (byteCode.getOpcode() == 196) {\n                 ++i;\n             }\n         }\n-        for (int i = 0; i < this.byteCodes.size(); ++i) {\n-            final ByteCode byteCode = (ByteCode)this.byteCodes.get(i);\n-            byteCode.applyByteCodeTargetFixup(this);\n+        for (int j = 0; j < this.byteCodes.size(); ++j) {\n+            ((ByteCode)this.byteCodes.get(j)).applyByteCodeTargetFixup(this);\n         }\n     }\n     \n     protected int getLength() {\n-        int attributesSize = 0;\n-        for (int it = 0; it < this.attributes.size(); ++it) {\n-            final Attribute attribute = (Attribute)this.attributes.get(it);\n-            attributesSize += attribute.getLengthIncludingHeader();\n+        int n = 0;\n+        for (int i = 0; i < this.attributes.size(); ++i) {\n+            n += ((Attribute)this.attributes.get(i)).getLengthIncludingHeader();\n         }\n-        return 8 + this.codeLength + 2 + this.exceptionTable.size() * 8 + 2 + attributesSize;\n+        return 8 + this.codeLength + 2 + this.exceptionTable.size() * 8 + 2 + n;\n     }\n     \n     protected ClassFileEntry[] getNestedClassFileEntries() {\n-        final ArrayList nestedEntries = new ArrayList(this.attributes.size() + this.byteCodes.size() + 10);\n-        nestedEntries.add(this.getAttributeName());\n-        nestedEntries.addAll(this.byteCodes);\n-        nestedEntries.addAll(this.attributes);\n-        for (int iter = 0; iter < this.exceptionTable.size(); ++iter) {\n-            final ExceptionTableEntry entry = (ExceptionTableEntry)this.exceptionTable.get(iter);\n-            final CPClass catchType = entry.getCatchType();\n+        final ArrayList list = new ArrayList(this.attributes.size() + this.byteCodes.size() + 10);\n+        list.add(this.getAttributeName());\n+        list.addAll(this.byteCodes);\n+        list.addAll(this.attributes);\n+        for (int i = 0; i < this.exceptionTable.size(); ++i) {\n+            final CPClass catchType = ((ExceptionTableEntry)this.exceptionTable.get(i)).getCatchType();\n             if (catchType != null) {\n-                nestedEntries.add(catchType);\n+                list.add(catchType);\n             }\n         }\n-        final ClassFileEntry[] nestedEntryArray = new ClassFileEntry[nestedEntries.size()];\n-        nestedEntries.toArray(nestedEntryArray);\n-        return nestedEntryArray;\n-    }\n-    \n-    protected void resolve(final ClassConstantPool pool) {\n-        super.resolve(pool);\n-        for (int it = 0; it < this.attributes.size(); ++it) {\n-            final Attribute attribute = (Attribute)this.attributes.get(it);\n-            attribute.resolve(pool);\n-        }\n-        for (int it = 0; it < this.byteCodes.size(); ++it) {\n-            final ByteCode byteCode = (ByteCode)this.byteCodes.get(it);\n-            byteCode.resolve(pool);\n-        }\n-        for (int it = 0; it < this.exceptionTable.size(); ++it) {\n-            final ExceptionTableEntry entry = (ExceptionTableEntry)this.exceptionTable.get(it);\n-            entry.resolve(pool);\n+        final ClassFileEntry[] a = new ClassFileEntry[list.size()];\n+        list.toArray(a);\n+        return a;\n+    }\n+    \n+    protected void resolve(final ClassConstantPool classConstantPool) {\n+        super.resolve(classConstantPool);\n+        for (int i = 0; i < this.attributes.size(); ++i) {\n+            ((Attribute)this.attributes.get(i)).resolve(classConstantPool);\n+        }\n+        for (int j = 0; j < this.byteCodes.size(); ++j) {\n+            ((ByteCode)this.byteCodes.get(j)).resolve(classConstantPool);\n+        }\n+        for (int k = 0; k < this.exceptionTable.size(); ++k) {\n+            ((ExceptionTableEntry)this.exceptionTable.get(k)).resolve(classConstantPool);\n         }\n     }\n     \n     public String toString() {\n         return \"Code: \" + this.getLength() + \" bytes\";\n     }\n     \n-    protected void writeBody(final DataOutputStream dos) throws IOException {\n-        dos.writeShort(this.maxStack);\n-        dos.writeShort(this.maxLocals);\n-        dos.writeInt(this.codeLength);\n-        for (int it = 0; it < this.byteCodes.size(); ++it) {\n-            final ByteCode byteCode = (ByteCode)this.byteCodes.get(it);\n-            byteCode.write(dos);\n-        }\n-        dos.writeShort(this.exceptionTable.size());\n-        for (int it = 0; it < this.exceptionTable.size(); ++it) {\n-            final ExceptionTableEntry entry = (ExceptionTableEntry)this.exceptionTable.get(it);\n-            entry.write(dos);\n-        }\n-        dos.writeShort(this.attributes.size());\n-        for (int it = 0; it < this.attributes.size(); ++it) {\n-            final Attribute attribute = (Attribute)this.attributes.get(it);\n-            attribute.write(dos);\n+    protected void writeBody(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.maxStack);\n+        dataOutputStream.writeShort(this.maxLocals);\n+        dataOutputStream.writeInt(this.codeLength);\n+        for (int i = 0; i < this.byteCodes.size(); ++i) {\n+            ((ByteCode)this.byteCodes.get(i)).write(dataOutputStream);\n+        }\n+        dataOutputStream.writeShort(this.exceptionTable.size());\n+        for (int j = 0; j < this.exceptionTable.size(); ++j) {\n+            ((ExceptionTableEntry)this.exceptionTable.get(j)).write(dataOutputStream);\n+        }\n+        dataOutputStream.writeShort(this.attributes.size());\n+        for (int k = 0; k < this.attributes.size(); ++k) {\n+            ((Attribute)this.attributes.get(k)).write(dataOutputStream);\n         }\n     }\n     \n     public void addAttribute(final Attribute attribute) {\n         this.attributes.add(attribute);\n         if (attribute instanceof LocalVariableTableAttribute) {\n             ((LocalVariableTableAttribute)attribute).setCodeLength(this.codeLength);\n@@ -131,18 +122,17 @@\n         }\n     }\n     \n     protected int[] getStartPCs() {\n         return null;\n     }\n     \n-    public void renumber(final List byteCodeOffsets) {\n-        for (int iter = 0; iter < this.exceptionTable.size(); ++iter) {\n-            final ExceptionTableEntry entry = (ExceptionTableEntry)this.exceptionTable.get(iter);\n-            entry.renumber(byteCodeOffsets);\n+    public void renumber(final List list) {\n+        for (int i = 0; i < this.exceptionTable.size(); ++i) {\n+            ((ExceptionTableEntry)this.exceptionTable.get(i)).renumber(list);\n         }\n     }\n     \n     public static void setAttributeName(final CPUTF8 attributeName) {\n         CodeAttribute.attributeName = attributeName;\n     }\n }\n"}]}
