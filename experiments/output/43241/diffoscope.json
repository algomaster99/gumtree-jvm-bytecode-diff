{"diffoscope-json-version": 1, "source1": "first/CombinedConfiguration.class", "source2": "second/CombinedConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,11 +1,10 @@\n \n package org.apache.commons.configuration2;\n \n-import org.apache.commons.configuration2.tree.UnionCombiner;\n import org.apache.commons.configuration2.event.Event;\n import org.apache.commons.configuration2.event.EventSource;\n import org.apache.commons.configuration2.tree.ConfigurationNodeVisitor;\n import org.apache.commons.configuration2.tree.NodeTreeWalker;\n import org.apache.commons.configuration2.tree.TreeUtils;\n import java.io.OutputStream;\n import java.io.PrintStream;\n@@ -15,14 +14,15 @@\n import java.util.Collection;\n import org.apache.commons.configuration2.tree.QueryResult;\n import java.util.HashSet;\n import java.util.Set;\n import java.util.Iterator;\n import java.util.ArrayList;\n import org.apache.commons.configuration2.ex.ConfigurationRuntimeException;\n+import org.apache.commons.configuration2.tree.UnionCombiner;\n import org.apache.commons.configuration2.tree.ExpressionEngine;\n import java.util.Map;\n import java.util.List;\n import org.apache.commons.configuration2.tree.ImmutableNode;\n import org.apache.commons.configuration2.tree.NodeCombiner;\n import org.apache.commons.configuration2.tree.DefaultExpressionEngine;\n import org.apache.commons.configuration2.event.EventType;\n@@ -37,14 +37,21 @@\n     private static final ImmutableNode EMPTY_ROOT;\n     private NodeCombiner nodeCombiner;\n     private List<CombinedConfiguration.ConfigData> configurations;\n     private Map<String, Configuration> namedConfigurations;\n     private ExpressionEngine conversionExpressionEngine;\n     private boolean upToDate;\n     \n+    static {\n+        COMBINED_INVALIDATE = new EventType(ConfigurationEvent.ANY, \"COMBINED_INVALIDATE\");\n+        AT_ENGINE = DefaultExpressionEngine.INSTANCE;\n+        DEFAULT_COMBINER = (NodeCombiner)new UnionCombiner();\n+        EMPTY_ROOT = new ImmutableNode.Builder().create();\n+    }\n+    \n     public CombinedConfiguration(final NodeCombiner comb) {\n         this.nodeCombiner = ((comb != null) ? comb : CombinedConfiguration.DEFAULT_COMBINER);\n         this.initChildCollections();\n     }\n     \n     public CombinedConfiguration() {\n         this(null);\n@@ -68,14 +75,15 @@\n         try {\n             this.nodeCombiner = nodeCombiner;\n             this.invalidateInternal();\n         }\n         finally {\n             this.endWrite();\n         }\n+        this.endWrite();\n     }\n     \n     public ExpressionEngine getConversionExpressionEngine() {\n         this.beginRead(true);\n         try {\n             return this.conversionExpressionEngine;\n         }\n@@ -88,14 +96,15 @@\n         this.beginWrite(true);\n         try {\n             this.conversionExpressionEngine = conversionExpressionEngine;\n         }\n         finally {\n             this.endWrite();\n         }\n+        this.endWrite();\n     }\n     \n     public void addConfiguration(final Configuration config, final String name, final String at) {\n         if (config == null) {\n             throw new IllegalArgumentException(\"Added configuration must not be null!\");\n         }\n         this.beginWrite(true);\n@@ -112,14 +121,15 @@\n                 this.namedConfigurations.put(name, config);\n             }\n             this.invalidateInternal();\n         }\n         finally {\n             this.endWrite();\n         }\n+        this.endWrite();\n         this.registerListenerAt(config);\n     }\n     \n     public void addConfiguration(final Configuration config, final String name) {\n         this.addConfiguration(config, name, null);\n     }\n     \n@@ -228,14 +238,15 @@\n         this.beginWrite(true);\n         try {\n             this.invalidateInternal();\n         }\n         finally {\n             this.endWrite();\n         }\n+        this.endWrite();\n     }\n     \n     public void onEvent(final ConfigurationEvent event) {\n         if (event.isBeforeUpdate()) {\n             this.invalidate();\n         }\n     }\n@@ -331,14 +342,17 @@\n             success = true;\n         }\n         finally {\n             if (!success) {\n                 this.endWrite();\n             }\n         }\n+        if (!success) {\n+            this.endWrite();\n+        }\n     }\n     \n     private boolean isUpToDate() {\n         return this.upToDate;\n     }\n     \n     private void invalidateInternal() {\n@@ -404,15 +418,8 @@\n             }\n         }\n     }\n     \n     private int getNumberOfConfigurationsInternal() {\n         return this.configurations.size();\n     }\n-    \n-    static {\n-        COMBINED_INVALIDATE = new EventType(ConfigurationEvent.ANY, \"COMBINED_INVALIDATE\");\n-        AT_ENGINE = DefaultExpressionEngine.INSTANCE;\n-        DEFAULT_COMBINER = (NodeCombiner)new UnionCombiner();\n-        EMPTY_ROOT = new ImmutableNode.Builder().create();\n-    }\n }\n"}]}
