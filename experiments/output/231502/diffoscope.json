{"diffoscope-json-version": 1, "source1": "first/Zip64ExtendedInformationExtraField.class", "source2": "second/Zip64ExtendedInformationExtraField.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,50 +13,50 @@\n     private ZipEightByteInteger relativeHeaderOffset;\n     private ZipLong diskStart;\n     private byte[] rawCentralDirectoryData;\n     \n     public Zip64ExtendedInformationExtraField() {\n     }\n     \n-    public Zip64ExtendedInformationExtraField(final ZipEightByteInteger size, final ZipEightByteInteger compressedSize) {\n-        this(size, compressedSize, null, null);\n+    public Zip64ExtendedInformationExtraField(final ZipEightByteInteger zipEightByteInteger, final ZipEightByteInteger zipEightByteInteger2) {\n+        this(zipEightByteInteger, zipEightByteInteger2, null, null);\n     }\n     \n     public Zip64ExtendedInformationExtraField(final ZipEightByteInteger size, final ZipEightByteInteger compressedSize, final ZipEightByteInteger relativeHeaderOffset, final ZipLong diskStart) {\n         this.size = size;\n         this.compressedSize = compressedSize;\n         this.relativeHeaderOffset = relativeHeaderOffset;\n         this.diskStart = diskStart;\n     }\n     \n-    private int addSizes(final byte[] data) {\n-        int off = 0;\n+    private int addSizes(final byte[] array) {\n+        int n = 0;\n         if (this.size != null) {\n-            System.arraycopy(this.size.getBytes(), 0, data, 0, 8);\n-            off += 8;\n+            System.arraycopy(this.size.getBytes(), 0, array, 0, 8);\n+            n += 8;\n         }\n         if (this.compressedSize != null) {\n-            System.arraycopy(this.compressedSize.getBytes(), 0, data, off, 8);\n-            off += 8;\n+            System.arraycopy(this.compressedSize.getBytes(), 0, array, n, 8);\n+            n += 8;\n         }\n-        return off;\n+        return n;\n     }\n     \n     public byte[] getCentralDirectoryData() {\n-        final byte[] data = new byte[this.getCentralDirectoryLength().getValue()];\n-        int off = this.addSizes(data);\n+        final byte[] array = new byte[this.getCentralDirectoryLength().getValue()];\n+        int addSizes = this.addSizes(array);\n         if (this.relativeHeaderOffset != null) {\n-            System.arraycopy(this.relativeHeaderOffset.getBytes(), 0, data, off, 8);\n-            off += 8;\n+            System.arraycopy(this.relativeHeaderOffset.getBytes(), 0, array, addSizes, 8);\n+            addSizes += 8;\n         }\n         if (this.diskStart != null) {\n-            System.arraycopy(this.diskStart.getBytes(), 0, data, off, 4);\n-            off += 4;\n+            System.arraycopy(this.diskStart.getBytes(), 0, array, addSizes, 4);\n+            addSizes += 4;\n         }\n-        return data;\n+        return array;\n     }\n     \n     public ZipShort getCentralDirectoryLength() {\n         return new ZipShort(((this.size != null) ? 8 : 0) + ((this.compressedSize != null) ? 8 : 0) + ((this.relativeHeaderOffset != null) ? 8 : 0) + ((this.diskStart != null) ? 4 : 0));\n     }\n     \n     public ZipEightByteInteger getCompressedSize() {\n@@ -74,108 +74,108 @@\n     public byte[] getLocalFileDataData() {\n         if (this.size == null && this.compressedSize == null) {\n             return ByteUtils.EMPTY_BYTE_ARRAY;\n         }\n         if (this.size == null || this.compressedSize == null) {\n             throw new IllegalArgumentException(\"Zip64 extended information must contain both size values in the local file header.\");\n         }\n-        final byte[] data = new byte[16];\n-        this.addSizes(data);\n-        return data;\n+        final byte[] array = new byte[16];\n+        this.addSizes(array);\n+        return array;\n     }\n     \n     public ZipShort getLocalFileDataLength() {\n         return new ZipShort((this.size != null) ? 16 : 0);\n     }\n     \n     public ZipEightByteInteger getRelativeHeaderOffset() {\n         return this.relativeHeaderOffset;\n     }\n     \n     public ZipEightByteInteger getSize() {\n         return this.size;\n     }\n     \n-    public void parseFromCentralDirectoryData(final byte[] buffer, int offset, final int length) throws ZipException {\n-        System.arraycopy(buffer, offset, this.rawCentralDirectoryData = new byte[length], 0, length);\n-        if (length >= 28) {\n-            this.parseFromLocalFileData(buffer, offset, length);\n+    public void parseFromCentralDirectoryData(final byte[] array, int n, final int n2) throws ZipException {\n+        System.arraycopy(array, n, this.rawCentralDirectoryData = new byte[n2], 0, n2);\n+        if (n2 >= 28) {\n+            this.parseFromLocalFileData(array, n, n2);\n         }\n-        else if (length == 24) {\n-            this.size = new ZipEightByteInteger(buffer, offset);\n-            offset += 8;\n-            this.compressedSize = new ZipEightByteInteger(buffer, offset);\n-            offset += 8;\n-            this.relativeHeaderOffset = new ZipEightByteInteger(buffer, offset);\n+        else if (n2 == 24) {\n+            this.size = new ZipEightByteInteger(array, n);\n+            n += 8;\n+            this.compressedSize = new ZipEightByteInteger(array, n);\n+            n += 8;\n+            this.relativeHeaderOffset = new ZipEightByteInteger(array, n);\n         }\n-        else if (length % 8 == 4) {\n-            this.diskStart = new ZipLong(buffer, offset + length - 4);\n+        else if (n2 % 8 == 4) {\n+            this.diskStart = new ZipLong(array, n + n2 - 4);\n         }\n     }\n     \n-    public void parseFromLocalFileData(final byte[] buffer, int offset, final int length) throws ZipException {\n-        if (length == 0) {\n+    public void parseFromLocalFileData(final byte[] array, int n, final int n2) throws ZipException {\n+        if (n2 == 0) {\n             return;\n         }\n-        if (length < 16) {\n+        if (n2 < 16) {\n             throw new ZipException(\"Zip64 extended information must contain both size values in the local file header.\");\n         }\n-        this.size = new ZipEightByteInteger(buffer, offset);\n-        offset += 8;\n-        this.compressedSize = new ZipEightByteInteger(buffer, offset);\n-        offset += 8;\n-        int remaining = length - 16;\n-        if (remaining >= 8) {\n-            this.relativeHeaderOffset = new ZipEightByteInteger(buffer, offset);\n-            offset += 8;\n-            remaining -= 8;\n-        }\n-        if (remaining >= 4) {\n-            this.diskStart = new ZipLong(buffer, offset);\n-            offset += 4;\n-            remaining -= 4;\n+        this.size = new ZipEightByteInteger(array, n);\n+        n += 8;\n+        this.compressedSize = new ZipEightByteInteger(array, n);\n+        n += 8;\n+        int n3 = n2 - 16;\n+        if (n3 >= 8) {\n+            this.relativeHeaderOffset = new ZipEightByteInteger(array, n);\n+            n += 8;\n+            n3 -= 8;\n+        }\n+        if (n3 >= 4) {\n+            this.diskStart = new ZipLong(array, n);\n+            n += 4;\n+            n3 -= 4;\n         }\n     }\n     \n-    public void reparseCentralDirectoryData(final boolean hasUncompressedSize, final boolean hasCompressedSize, final boolean hasRelativeHeaderOffset, final boolean hasDiskStart) throws ZipException {\n+    public void reparseCentralDirectoryData(final boolean b, final boolean b2, final boolean b3, final boolean b4) throws ZipException {\n         if (this.rawCentralDirectoryData != null) {\n-            final int expectedLength = (hasUncompressedSize ? 8 : 0) + (hasCompressedSize ? 8 : 0) + (hasRelativeHeaderOffset ? 8 : 0) + (hasDiskStart ? 4 : 0);\n-            if (this.rawCentralDirectoryData.length < expectedLength) {\n-                throw new ZipException(\"Central directory zip64 extended information extra field's length doesn't match central directory data.  Expected length \" + expectedLength + \" but is \" + this.rawCentralDirectoryData.length);\n+            final int i = (b ? 8 : 0) + (b2 ? 8 : 0) + (b3 ? 8 : 0) + (b4 ? 4 : 0);\n+            if (this.rawCentralDirectoryData.length < i) {\n+                throw new ZipException(\"Central directory zip64 extended information extra field's length doesn't match central directory data.  Expected length \" + i + \" but is \" + this.rawCentralDirectoryData.length);\n             }\n-            int offset = 0;\n-            if (hasUncompressedSize) {\n-                this.size = new ZipEightByteInteger(this.rawCentralDirectoryData, offset);\n-                offset += 8;\n+            int n = 0;\n+            if (b) {\n+                this.size = new ZipEightByteInteger(this.rawCentralDirectoryData, n);\n+                n += 8;\n             }\n-            if (hasCompressedSize) {\n-                this.compressedSize = new ZipEightByteInteger(this.rawCentralDirectoryData, offset);\n-                offset += 8;\n+            if (b2) {\n+                this.compressedSize = new ZipEightByteInteger(this.rawCentralDirectoryData, n);\n+                n += 8;\n             }\n-            if (hasRelativeHeaderOffset) {\n-                this.relativeHeaderOffset = new ZipEightByteInteger(this.rawCentralDirectoryData, offset);\n-                offset += 8;\n+            if (b3) {\n+                this.relativeHeaderOffset = new ZipEightByteInteger(this.rawCentralDirectoryData, n);\n+                n += 8;\n             }\n-            if (hasDiskStart) {\n-                this.diskStart = new ZipLong(this.rawCentralDirectoryData, offset);\n-                offset += 4;\n+            if (b4) {\n+                this.diskStart = new ZipLong(this.rawCentralDirectoryData, n);\n+                n += 4;\n             }\n         }\n     }\n     \n     public void setCompressedSize(final ZipEightByteInteger compressedSize) {\n         this.compressedSize = compressedSize;\n     }\n     \n-    public void setDiskStartNumber(final ZipLong ds) {\n-        this.diskStart = ds;\n+    public void setDiskStartNumber(final ZipLong diskStart) {\n+        this.diskStart = diskStart;\n     }\n     \n-    public void setRelativeHeaderOffset(final ZipEightByteInteger rho) {\n-        this.relativeHeaderOffset = rho;\n+    public void setRelativeHeaderOffset(final ZipEightByteInteger relativeHeaderOffset) {\n+        this.relativeHeaderOffset = relativeHeaderOffset;\n     }\n     \n     public void setSize(final ZipEightByteInteger size) {\n         this.size = size;\n     }\n     \n     static {\n"}]}
