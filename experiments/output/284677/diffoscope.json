{"diffoscope-json-version": 1, "source1": "first/StackMapEntry.class", "source2": "second/StackMapEntry.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,224 +1,219 @@\n-  SHA-256 checksum 44cd17cb2a9f1d711c500b42ab6793c64a8022f7813b7c86750181528776c425\n+  SHA-256 checksum 0462f6caaa3368433dc7f70e7e7d833747259819a200a3486221b93546487f63\n   Compiled from \"StackMapEntry.java\"\n public final class org.apache.bcel.classfile.StackMapEntry implements org.apache.bcel.classfile.Node,java.lang.Cloneable\n   minor version: 0\n   major version: 52\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n   this_class: #51                         // org/apache/bcel/classfile/StackMapEntry\n   super_class: #58                        // java/lang/Object\n   interfaces: 2, fields: 5, methods: 23, attributes: 1\n Constant pool:\n-    #1 = InterfaceMethodref #120.#121     // java/io/DataInput.readByte:()B\n-    #2 = Methodref          #51.#122      // org/apache/bcel/classfile/StackMapEntry.\"<init>\":(II[Lorg/apache/bcel/classfile/StackMapType;[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n-    #3 = Fieldref           #51.#123      // org/apache/bcel/classfile/StackMapEntry.frame_type:I\n-    #4 = Class              #124          // org/apache/bcel/Const\n-    #5 = Fieldref           #51.#125      // org/apache/bcel/classfile/StackMapEntry.byte_code_offset:I\n-    #6 = Class              #126          // org/apache/bcel/classfile/StackMapType\n-    #7 = Fieldref           #51.#127      // org/apache/bcel/classfile/StackMapEntry.types_of_stack_items:[Lorg/apache/bcel/classfile/StackMapType;\n-    #8 = Methodref          #6.#128       // org/apache/bcel/classfile/StackMapType.\"<init>\":(Ljava/io/DataInput;Lorg/apache/bcel/classfile/ConstantPool;)V\n-    #9 = InterfaceMethodref #120.#129     // java/io/DataInput.readShort:()S\n-   #10 = Fieldref           #51.#130      // org/apache/bcel/classfile/StackMapEntry.types_of_locals:[Lorg/apache/bcel/classfile/StackMapType;\n-   #11 = Class              #131          // org/apache/bcel/classfile/ClassFormatException\n-   #12 = Class              #132          // java/lang/StringBuilder\n-   #13 = Methodref          #12.#133      // java/lang/StringBuilder.\"<init>\":()V\n-   #14 = String             #134          // Invalid frame type found while parsing stack map table:\n-   #15 = Methodref          #12.#135      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #16 = Methodref          #12.#136      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #17 = Methodref          #12.#137      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #18 = Methodref          #11.#138      // org/apache/bcel/classfile/ClassFormatException.\"<init>\":(Ljava/lang/String;)V\n-   #19 = Methodref          #58.#133      // java/lang/Object.\"<init>\":()V\n-   #20 = Fieldref           #51.#139      // org/apache/bcel/classfile/StackMapEntry.constant_pool:Lorg/apache/bcel/classfile/ConstantPool;\n-   #21 = Methodref          #140.#141     // java/io/DataOutputStream.write:(I)V\n-   #22 = Methodref          #6.#142       // org/apache/bcel/classfile/StackMapType.dump:(Ljava/io/DataOutputStream;)V\n-   #23 = Methodref          #140.#143     // java/io/DataOutputStream.writeShort:(I)V\n-   #24 = String             #144          // Invalid Stack map table tag:\n-   #25 = Methodref          #12.#145      // java/lang/StringBuilder.\"<init>\":(I)V\n-   #26 = String             #146          // (\n-   #27 = String             #147          // SAME\n-   #28 = String             #148          // SAME_LOCALS_1_STACK\n-   #29 = String             #149          // SAME_LOCALS_1_STACK_EXTENDED\n-   #30 = String             #150          // CHOP\n-   #31 = Methodref          #151.#152     // java/lang/String.valueOf:(I)Ljava/lang/String;\n-   #32 = String             #153          // SAME_EXTENDED\n-   #33 = String             #154          // APPEND\n-   #34 = String             #155          // FULL\n-   #35 = String             #156          // UNKNOWN (\n-   #36 = String             #157          // )\n-   #37 = String             #158          // , offset delta=\n-   #38 = String             #159          // , locals={\n-   #39 = Methodref          #12.#160      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #40 = String             #161          // ,\n-   #41 = String             #162          // }\n-   #42 = String             #163          // , stack items={\n-   #43 = Methodref          #6.#164       // org/apache/bcel/classfile/StackMapType.hasIndex:()Z\n-   #44 = Class              #165          // java/lang/RuntimeException\n-   #45 = String             #166          // Invalid StackMap frame_type:\n-   #46 = Methodref          #44.#138      // java/lang/RuntimeException.\"<init>\":(Ljava/lang/String;)V\n-   #47 = String             #167          // Invalid StackMap frame_type\n-   #48 = String             #168          // Invalid StackMap offset:\n-   #49 = Methodref          #51.#169      // org/apache/bcel/classfile/StackMapEntry.setByteCodeOffset:(I)V\n-   #50 = Methodref          #58.#170      // java/lang/Object.clone:()Ljava/lang/Object;\n-   #51 = Class              #171          // org/apache/bcel/classfile/StackMapEntry\n-   #52 = Class              #172          // java/lang/CloneNotSupportedException\n-   #53 = Class              #173          // java/lang/Error\n-   #54 = String             #174          // Clone Not Supported\n-   #55 = Methodref          #53.#138      // java/lang/Error.\"<init>\":(Ljava/lang/String;)V\n-   #56 = Methodref          #6.#175       // org/apache/bcel/classfile/StackMapType.copy:()Lorg/apache/bcel/classfile/StackMapType;\n-   #57 = InterfaceMethodref #176.#177     // org/apache/bcel/classfile/Visitor.visitStackMapEntry:(Lorg/apache/bcel/classfile/StackMapEntry;)V\n-   #58 = Class              #178          // java/lang/Object\n-   #59 = Class              #179          // org/apache/bcel/classfile/Node\n-   #60 = Class              #180          // java/lang/Cloneable\n+    #1 = InterfaceMethodref #74.#116      // java/io/DataInput.readByte:()B\n+    #2 = Methodref          #51.#117      // org/apache/bcel/classfile/StackMapEntry.\"<init>\":(II[Lorg/apache/bcel/classfile/StackMapType;[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n+    #3 = Fieldref           #51.#118      // org/apache/bcel/classfile/StackMapEntry.frame_type:I\n+    #4 = Class              #119          // org/apache/bcel/Const\n+    #5 = Fieldref           #51.#120      // org/apache/bcel/classfile/StackMapEntry.byte_code_offset:I\n+    #6 = Class              #121          // org/apache/bcel/classfile/StackMapType\n+    #7 = Fieldref           #51.#122      // org/apache/bcel/classfile/StackMapEntry.types_of_stack_items:[Lorg/apache/bcel/classfile/StackMapType;\n+    #8 = Methodref          #6.#123       // org/apache/bcel/classfile/StackMapType.\"<init>\":(Ljava/io/DataInput;Lorg/apache/bcel/classfile/ConstantPool;)V\n+    #9 = InterfaceMethodref #74.#124      // java/io/DataInput.readShort:()S\n+   #10 = Fieldref           #51.#125      // org/apache/bcel/classfile/StackMapEntry.types_of_locals:[Lorg/apache/bcel/classfile/StackMapType;\n+   #11 = Class              #126          // org/apache/bcel/classfile/ClassFormatException\n+   #12 = Class              #127          // java/lang/StringBuilder\n+   #13 = Methodref          #12.#128      // java/lang/StringBuilder.\"<init>\":()V\n+   #14 = String             #129          // Invalid frame type found while parsing stack map table:\n+   #15 = Methodref          #12.#130      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #16 = Methodref          #12.#131      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #17 = Methodref          #12.#132      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #18 = Methodref          #11.#133      // org/apache/bcel/classfile/ClassFormatException.\"<init>\":(Ljava/lang/String;)V\n+   #19 = Methodref          #58.#128      // java/lang/Object.\"<init>\":()V\n+   #20 = Fieldref           #51.#134      // org/apache/bcel/classfile/StackMapEntry.constant_pool:Lorg/apache/bcel/classfile/ConstantPool;\n+   #21 = Methodref          #135.#136     // java/io/DataOutputStream.write:(I)V\n+   #22 = Methodref          #6.#137       // org/apache/bcel/classfile/StackMapType.dump:(Ljava/io/DataOutputStream;)V\n+   #23 = Methodref          #135.#138     // java/io/DataOutputStream.writeShort:(I)V\n+   #24 = String             #139          // Invalid Stack map table tag:\n+   #25 = Methodref          #12.#140      // java/lang/StringBuilder.\"<init>\":(I)V\n+   #26 = String             #141          // (\n+   #27 = String             #142          // SAME\n+   #28 = String             #143          // SAME_LOCALS_1_STACK\n+   #29 = String             #144          // SAME_LOCALS_1_STACK_EXTENDED\n+   #30 = String             #145          // CHOP\n+   #31 = Methodref          #146.#147     // java/lang/String.valueOf:(I)Ljava/lang/String;\n+   #32 = String             #148          // SAME_EXTENDED\n+   #33 = String             #149          // APPEND\n+   #34 = String             #150          // FULL\n+   #35 = String             #151          // UNKNOWN (\n+   #36 = String             #152          // )\n+   #37 = String             #153          // , offset delta=\n+   #38 = String             #154          // , locals={\n+   #39 = Methodref          #12.#155      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+   #40 = String             #156          // ,\n+   #41 = String             #157          // }\n+   #42 = String             #158          // , stack items={\n+   #43 = Methodref          #6.#159       // org/apache/bcel/classfile/StackMapType.hasIndex:()Z\n+   #44 = Class              #160          // java/lang/RuntimeException\n+   #45 = String             #161          // Invalid StackMap frame_type:\n+   #46 = Methodref          #44.#133      // java/lang/RuntimeException.\"<init>\":(Ljava/lang/String;)V\n+   #47 = String             #162          // Invalid StackMap frame_type\n+   #48 = String             #163          // Invalid StackMap offset:\n+   #49 = Methodref          #51.#164      // org/apache/bcel/classfile/StackMapEntry.setByteCodeOffset:(I)V\n+   #50 = Methodref          #58.#165      // java/lang/Object.clone:()Ljava/lang/Object;\n+   #51 = Class              #166          // org/apache/bcel/classfile/StackMapEntry\n+   #52 = Class              #167          // java/lang/CloneNotSupportedException\n+   #53 = Class              #168          // java/lang/Error\n+   #54 = String             #169          // Clone Not Supported\n+   #55 = Methodref          #53.#133      // java/lang/Error.\"<init>\":(Ljava/lang/String;)V\n+   #56 = Methodref          #6.#170       // org/apache/bcel/classfile/StackMapType.copy:()Lorg/apache/bcel/classfile/StackMapType;\n+   #57 = InterfaceMethodref #171.#172     // org/apache/bcel/classfile/Visitor.visitStackMapEntry:(Lorg/apache/bcel/classfile/StackMapEntry;)V\n+   #58 = Class              #173          // java/lang/Object\n+   #59 = Class              #174          // org/apache/bcel/classfile/Node\n+   #60 = Class              #175          // java/lang/Cloneable\n    #61 = Utf8               frame_type\n    #62 = Utf8               I\n    #63 = Utf8               byte_code_offset\n    #64 = Utf8               types_of_locals\n    #65 = Utf8               [Lorg/apache/bcel/classfile/StackMapType;\n    #66 = Utf8               types_of_stack_items\n    #67 = Utf8               constant_pool\n    #68 = Utf8               Lorg/apache/bcel/classfile/ConstantPool;\n    #69 = Utf8               <init>\n    #70 = Utf8               (Ljava/io/DataInput;Lorg/apache/bcel/classfile/ConstantPool;)V\n    #71 = Utf8               Code\n    #72 = Utf8               LineNumberTable\n    #73 = Utf8               StackMapTable\n-   #74 = Class              #171          // org/apache/bcel/classfile/StackMapEntry\n-   #75 = Class              #181          // java/io/DataInput\n-   #76 = Class              #182          // org/apache/bcel/classfile/ConstantPool\n-   #77 = Utf8               Exceptions\n-   #78 = Class              #183          // java/io/IOException\n-   #79 = Utf8               (II[Lorg/apache/bcel/classfile/StackMapType;I[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n-   #80 = Class              #65           // \"[Lorg/apache/bcel/classfile/StackMapType;\"\n-   #81 = Utf8               Deprecated\n-   #82 = Utf8               RuntimeVisibleAnnotations\n-   #83 = Utf8               Ljava/lang/Deprecated;\n-   #84 = Utf8               (II[Lorg/apache/bcel/classfile/StackMapType;[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n-   #85 = Utf8               dump\n-   #86 = Utf8               (Ljava/io/DataOutputStream;)V\n-   #87 = Utf8               toString\n-   #88 = Utf8               ()Ljava/lang/String;\n-   #89 = Class              #132          // java/lang/StringBuilder\n-   #90 = Utf8               getMapEntrySize\n-   #91 = Utf8               ()I\n-   #92 = Class              #126          // org/apache/bcel/classfile/StackMapType\n-   #93 = Utf8               setFrameType\n-   #94 = Utf8               (I)V\n-   #95 = Utf8               getFrameType\n-   #96 = Utf8               setByteCodeOffset\n-   #97 = Utf8               updateByteCodeOffset\n-   #98 = Utf8               getByteCodeOffset\n-   #99 = Utf8               setNumberOfLocals\n-  #100 = Utf8               getNumberOfLocals\n-  #101 = Utf8               setTypesOfLocals\n-  #102 = Utf8               ([Lorg/apache/bcel/classfile/StackMapType;)V\n-  #103 = Utf8               getTypesOfLocals\n-  #104 = Utf8               ()[Lorg/apache/bcel/classfile/StackMapType;\n-  #105 = Utf8               setNumberOfStackItems\n-  #106 = Utf8               getNumberOfStackItems\n-  #107 = Utf8               setTypesOfStackItems\n-  #108 = Utf8               getTypesOfStackItems\n-  #109 = Utf8               copy\n-  #110 = Utf8               ()Lorg/apache/bcel/classfile/StackMapEntry;\n-  #111 = Class              #172          // java/lang/CloneNotSupportedException\n-  #112 = Utf8               accept\n-  #113 = Utf8               (Lorg/apache/bcel/classfile/Visitor;)V\n-  #114 = Utf8               getConstantPool\n-  #115 = Utf8               ()Lorg/apache/bcel/classfile/ConstantPool;\n-  #116 = Utf8               setConstantPool\n-  #117 = Utf8               (Lorg/apache/bcel/classfile/ConstantPool;)V\n-  #118 = Utf8               SourceFile\n-  #119 = Utf8               StackMapEntry.java\n-  #120 = Class              #181          // java/io/DataInput\n-  #121 = NameAndType        #184:#185     // readByte:()B\n-  #122 = NameAndType        #69:#84       // \"<init>\":(II[Lorg/apache/bcel/classfile/StackMapType;[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n-  #123 = NameAndType        #61:#62       // frame_type:I\n-  #124 = Utf8               org/apache/bcel/Const\n-  #125 = NameAndType        #63:#62       // byte_code_offset:I\n-  #126 = Utf8               org/apache/bcel/classfile/StackMapType\n-  #127 = NameAndType        #66:#65       // types_of_stack_items:[Lorg/apache/bcel/classfile/StackMapType;\n-  #128 = NameAndType        #69:#70       // \"<init>\":(Ljava/io/DataInput;Lorg/apache/bcel/classfile/ConstantPool;)V\n-  #129 = NameAndType        #186:#187     // readShort:()S\n-  #130 = NameAndType        #64:#65       // types_of_locals:[Lorg/apache/bcel/classfile/StackMapType;\n-  #131 = Utf8               org/apache/bcel/classfile/ClassFormatException\n-  #132 = Utf8               java/lang/StringBuilder\n-  #133 = NameAndType        #69:#188      // \"<init>\":()V\n-  #134 = Utf8               Invalid frame type found while parsing stack map table:\n-  #135 = NameAndType        #189:#190     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #136 = NameAndType        #189:#191     // append:(I)Ljava/lang/StringBuilder;\n-  #137 = NameAndType        #87:#88       // toString:()Ljava/lang/String;\n-  #138 = NameAndType        #69:#192      // \"<init>\":(Ljava/lang/String;)V\n-  #139 = NameAndType        #67:#68       // constant_pool:Lorg/apache/bcel/classfile/ConstantPool;\n-  #140 = Class              #193          // java/io/DataOutputStream\n-  #141 = NameAndType        #194:#94      // write:(I)V\n-  #142 = NameAndType        #85:#86       // dump:(Ljava/io/DataOutputStream;)V\n-  #143 = NameAndType        #195:#94      // writeShort:(I)V\n-  #144 = Utf8               Invalid Stack map table tag:\n-  #145 = NameAndType        #69:#94       // \"<init>\":(I)V\n-  #146 = Utf8               (\n-  #147 = Utf8               SAME\n-  #148 = Utf8               SAME_LOCALS_1_STACK\n-  #149 = Utf8               SAME_LOCALS_1_STACK_EXTENDED\n-  #150 = Utf8               CHOP\n-  #151 = Class              #196          // java/lang/String\n-  #152 = NameAndType        #197:#198     // valueOf:(I)Ljava/lang/String;\n-  #153 = Utf8               SAME_EXTENDED\n-  #154 = Utf8               APPEND\n-  #155 = Utf8               FULL\n-  #156 = Utf8               UNKNOWN (\n-  #157 = Utf8               )\n-  #158 = Utf8               , offset delta=\n-  #159 = Utf8               , locals={\n-  #160 = NameAndType        #189:#199     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #161 = Utf8               ,\n-  #162 = Utf8               }\n-  #163 = Utf8               , stack items={\n-  #164 = NameAndType        #200:#201     // hasIndex:()Z\n-  #165 = Utf8               java/lang/RuntimeException\n-  #166 = Utf8               Invalid StackMap frame_type:\n-  #167 = Utf8               Invalid StackMap frame_type\n-  #168 = Utf8               Invalid StackMap offset:\n-  #169 = NameAndType        #96:#94       // setByteCodeOffset:(I)V\n-  #170 = NameAndType        #202:#203     // clone:()Ljava/lang/Object;\n-  #171 = Utf8               org/apache/bcel/classfile/StackMapEntry\n-  #172 = Utf8               java/lang/CloneNotSupportedException\n-  #173 = Utf8               java/lang/Error\n-  #174 = Utf8               Clone Not Supported\n-  #175 = NameAndType        #109:#204     // copy:()Lorg/apache/bcel/classfile/StackMapType;\n-  #176 = Class              #205          // org/apache/bcel/classfile/Visitor\n-  #177 = NameAndType        #206:#207     // visitStackMapEntry:(Lorg/apache/bcel/classfile/StackMapEntry;)V\n-  #178 = Utf8               java/lang/Object\n-  #179 = Utf8               org/apache/bcel/classfile/Node\n-  #180 = Utf8               java/lang/Cloneable\n-  #181 = Utf8               java/io/DataInput\n-  #182 = Utf8               org/apache/bcel/classfile/ConstantPool\n-  #183 = Utf8               java/io/IOException\n-  #184 = Utf8               readByte\n-  #185 = Utf8               ()B\n-  #186 = Utf8               readShort\n-  #187 = Utf8               ()S\n-  #188 = Utf8               ()V\n-  #189 = Utf8               append\n-  #190 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #191 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #192 = Utf8               (Ljava/lang/String;)V\n-  #193 = Utf8               java/io/DataOutputStream\n-  #194 = Utf8               write\n-  #195 = Utf8               writeShort\n-  #196 = Utf8               java/lang/String\n-  #197 = Utf8               valueOf\n-  #198 = Utf8               (I)Ljava/lang/String;\n-  #199 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #200 = Utf8               hasIndex\n-  #201 = Utf8               ()Z\n-  #202 = Utf8               clone\n-  #203 = Utf8               ()Ljava/lang/Object;\n-  #204 = Utf8               ()Lorg/apache/bcel/classfile/StackMapType;\n-  #205 = Utf8               org/apache/bcel/classfile/Visitor\n-  #206 = Utf8               visitStackMapEntry\n-  #207 = Utf8               (Lorg/apache/bcel/classfile/StackMapEntry;)V\n+   #74 = Class              #176          // java/io/DataInput\n+   #75 = Class              #177          // org/apache/bcel/classfile/ConstantPool\n+   #76 = Utf8               Exceptions\n+   #77 = Class              #178          // java/io/IOException\n+   #78 = Utf8               (II[Lorg/apache/bcel/classfile/StackMapType;I[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n+   #79 = Class              #65           // \"[Lorg/apache/bcel/classfile/StackMapType;\"\n+   #80 = Utf8               Deprecated\n+   #81 = Utf8               RuntimeVisibleAnnotations\n+   #82 = Utf8               Ljava/lang/Deprecated;\n+   #83 = Utf8               (II[Lorg/apache/bcel/classfile/StackMapType;[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n+   #84 = Utf8               dump\n+   #85 = Utf8               (Ljava/io/DataOutputStream;)V\n+   #86 = Utf8               toString\n+   #87 = Utf8               ()Ljava/lang/String;\n+   #88 = Utf8               getMapEntrySize\n+   #89 = Utf8               ()I\n+   #90 = Utf8               setFrameType\n+   #91 = Utf8               (I)V\n+   #92 = Utf8               getFrameType\n+   #93 = Utf8               setByteCodeOffset\n+   #94 = Utf8               updateByteCodeOffset\n+   #95 = Utf8               getByteCodeOffset\n+   #96 = Utf8               setNumberOfLocals\n+   #97 = Utf8               getNumberOfLocals\n+   #98 = Utf8               setTypesOfLocals\n+   #99 = Utf8               ([Lorg/apache/bcel/classfile/StackMapType;)V\n+  #100 = Utf8               getTypesOfLocals\n+  #101 = Utf8               ()[Lorg/apache/bcel/classfile/StackMapType;\n+  #102 = Utf8               setNumberOfStackItems\n+  #103 = Utf8               getNumberOfStackItems\n+  #104 = Utf8               setTypesOfStackItems\n+  #105 = Utf8               getTypesOfStackItems\n+  #106 = Utf8               copy\n+  #107 = Utf8               ()Lorg/apache/bcel/classfile/StackMapEntry;\n+  #108 = Utf8               accept\n+  #109 = Utf8               (Lorg/apache/bcel/classfile/Visitor;)V\n+  #110 = Utf8               getConstantPool\n+  #111 = Utf8               ()Lorg/apache/bcel/classfile/ConstantPool;\n+  #112 = Utf8               setConstantPool\n+  #113 = Utf8               (Lorg/apache/bcel/classfile/ConstantPool;)V\n+  #114 = Utf8               SourceFile\n+  #115 = Utf8               StackMapEntry.java\n+  #116 = NameAndType        #179:#180     // readByte:()B\n+  #117 = NameAndType        #69:#83       // \"<init>\":(II[Lorg/apache/bcel/classfile/StackMapType;[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n+  #118 = NameAndType        #61:#62       // frame_type:I\n+  #119 = Utf8               org/apache/bcel/Const\n+  #120 = NameAndType        #63:#62       // byte_code_offset:I\n+  #121 = Utf8               org/apache/bcel/classfile/StackMapType\n+  #122 = NameAndType        #66:#65       // types_of_stack_items:[Lorg/apache/bcel/classfile/StackMapType;\n+  #123 = NameAndType        #69:#70       // \"<init>\":(Ljava/io/DataInput;Lorg/apache/bcel/classfile/ConstantPool;)V\n+  #124 = NameAndType        #181:#182     // readShort:()S\n+  #125 = NameAndType        #64:#65       // types_of_locals:[Lorg/apache/bcel/classfile/StackMapType;\n+  #126 = Utf8               org/apache/bcel/classfile/ClassFormatException\n+  #127 = Utf8               java/lang/StringBuilder\n+  #128 = NameAndType        #69:#183      // \"<init>\":()V\n+  #129 = Utf8               Invalid frame type found while parsing stack map table:\n+  #130 = NameAndType        #184:#185     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #131 = NameAndType        #184:#186     // append:(I)Ljava/lang/StringBuilder;\n+  #132 = NameAndType        #86:#87       // toString:()Ljava/lang/String;\n+  #133 = NameAndType        #69:#187      // \"<init>\":(Ljava/lang/String;)V\n+  #134 = NameAndType        #67:#68       // constant_pool:Lorg/apache/bcel/classfile/ConstantPool;\n+  #135 = Class              #188          // java/io/DataOutputStream\n+  #136 = NameAndType        #189:#91      // write:(I)V\n+  #137 = NameAndType        #84:#85       // dump:(Ljava/io/DataOutputStream;)V\n+  #138 = NameAndType        #190:#91      // writeShort:(I)V\n+  #139 = Utf8               Invalid Stack map table tag:\n+  #140 = NameAndType        #69:#91       // \"<init>\":(I)V\n+  #141 = Utf8               (\n+  #142 = Utf8               SAME\n+  #143 = Utf8               SAME_LOCALS_1_STACK\n+  #144 = Utf8               SAME_LOCALS_1_STACK_EXTENDED\n+  #145 = Utf8               CHOP\n+  #146 = Class              #191          // java/lang/String\n+  #147 = NameAndType        #192:#193     // valueOf:(I)Ljava/lang/String;\n+  #148 = Utf8               SAME_EXTENDED\n+  #149 = Utf8               APPEND\n+  #150 = Utf8               FULL\n+  #151 = Utf8               UNKNOWN (\n+  #152 = Utf8               )\n+  #153 = Utf8               , offset delta=\n+  #154 = Utf8               , locals={\n+  #155 = NameAndType        #184:#194     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #156 = Utf8               ,\n+  #157 = Utf8               }\n+  #158 = Utf8               , stack items={\n+  #159 = NameAndType        #195:#196     // hasIndex:()Z\n+  #160 = Utf8               java/lang/RuntimeException\n+  #161 = Utf8               Invalid StackMap frame_type:\n+  #162 = Utf8               Invalid StackMap frame_type\n+  #163 = Utf8               Invalid StackMap offset:\n+  #164 = NameAndType        #93:#91       // setByteCodeOffset:(I)V\n+  #165 = NameAndType        #197:#198     // clone:()Ljava/lang/Object;\n+  #166 = Utf8               org/apache/bcel/classfile/StackMapEntry\n+  #167 = Utf8               java/lang/CloneNotSupportedException\n+  #168 = Utf8               java/lang/Error\n+  #169 = Utf8               Clone Not Supported\n+  #170 = NameAndType        #106:#199     // copy:()Lorg/apache/bcel/classfile/StackMapType;\n+  #171 = Class              #200          // org/apache/bcel/classfile/Visitor\n+  #172 = NameAndType        #201:#202     // visitStackMapEntry:(Lorg/apache/bcel/classfile/StackMapEntry;)V\n+  #173 = Utf8               java/lang/Object\n+  #174 = Utf8               org/apache/bcel/classfile/Node\n+  #175 = Utf8               java/lang/Cloneable\n+  #176 = Utf8               java/io/DataInput\n+  #177 = Utf8               org/apache/bcel/classfile/ConstantPool\n+  #178 = Utf8               java/io/IOException\n+  #179 = Utf8               readByte\n+  #180 = Utf8               ()B\n+  #181 = Utf8               readShort\n+  #182 = Utf8               ()S\n+  #183 = Utf8               ()V\n+  #184 = Utf8               append\n+  #185 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #186 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #187 = Utf8               (Ljava/lang/String;)V\n+  #188 = Utf8               java/io/DataOutputStream\n+  #189 = Utf8               write\n+  #190 = Utf8               writeShort\n+  #191 = Utf8               java/lang/String\n+  #192 = Utf8               valueOf\n+  #193 = Utf8               (I)Ljava/lang/String;\n+  #194 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #195 = Utf8               hasIndex\n+  #196 = Utf8               ()Z\n+  #197 = Utf8               clone\n+  #198 = Utf8               ()Ljava/lang/Object;\n+  #199 = Utf8               ()Lorg/apache/bcel/classfile/StackMapType;\n+  #200 = Utf8               org/apache/bcel/classfile/Visitor\n+  #201 = Utf8               visitStackMapEntry\n+  #202 = Utf8               (Lorg/apache/bcel/classfile/StackMapEntry;)V\n {\n   private int frame_type;\n     descriptor: I\n     flags: (0x0002) ACC_PRIVATE\n \n   private int byte_code_offset;\n     descriptor: I\n@@ -562,15 +557,15 @@\n           stack = [ class org/apache/bcel/classfile/StackMapEntry ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 3\n           locals = [ class org/apache/bcel/classfile/StackMapEntry, int, int, class \"[Lorg/apache/bcel/classfile/StackMapType;\", int, class \"[Lorg/apache/bcel/classfile/StackMapType;\", class org/apache/bcel/classfile/ConstantPool ]\n           stack = [ class org/apache/bcel/classfile/StackMapEntry, class \"[Lorg/apache/bcel/classfile/StackMapType;\" ]\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #83()\n+      0: #82()\n         java.lang.Deprecated\n \n   public org.apache.bcel.classfile.StackMapEntry(int, int, org.apache.bcel.classfile.StackMapType[], org.apache.bcel.classfile.StackMapType[], org.apache.bcel.classfile.ConstantPool);\n     descriptor: (II[Lorg/apache/bcel/classfile/StackMapType;[Lorg/apache/bcel/classfile/StackMapType;Lorg/apache/bcel/classfile/ConstantPool;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=6, args_size=6\n@@ -1673,15 +1668,15 @@\n     Code:\n       stack=0, locals=2, args_size=2\n          0: return\n       LineNumberTable:\n         line 343: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #83()\n+      0: #82()\n         java.lang.Deprecated\n \n   public int getNumberOfLocals();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n@@ -1734,15 +1729,15 @@\n     Code:\n       stack=0, locals=2, args_size=2\n          0: return\n       LineNumberTable:\n         line 367: 0\n     Deprecated: true\n     RuntimeVisibleAnnotations:\n-      0: #83()\n+      0: #82()\n         java.lang.Deprecated\n \n   public int getNumberOfStackItems();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n"}]}
