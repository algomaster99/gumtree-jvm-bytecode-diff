{"diffoscope-json-version": 1, "source1": "first/AbstractImportControl.class", "source2": "second/AbstractImportControl.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -17,52 +17,52 @@\n         this.strategyOnMismatch = strategyOnMismatch;\n     }\n     \n     public abstract AbstractImportControl locateFinest(final String p0, final String p1);\n     \n     protected abstract boolean matchesExactly(final String p0, final String p1);\n     \n-    protected void addImportRule(final AbstractImportRule rule) {\n-        this.rules.addLast(rule);\n+    protected void addImportRule(final AbstractImportRule abstractImportRule) {\n+        this.rules.addLast(abstractImportRule);\n     }\n     \n-    public AccessResult checkAccess(final String inPkg, final String inFileName, final String forImport) {\n-        final AccessResult returnValue = this.localCheckAccess(inPkg, inFileName, forImport);\n-        AccessResult result;\n-        if (returnValue != AccessResult.UNKNOWN) {\n-            result = returnValue;\n+    public AccessResult checkAccess(final String s, final String s2, final String s3) {\n+        final AccessResult localCheckAccess = this.localCheckAccess(s, s2, s3);\n+        AccessResult accessResult;\n+        if (localCheckAccess != AccessResult.UNKNOWN) {\n+            accessResult = localCheckAccess;\n         }\n         else if (this.parent == null) {\n             if (this.strategyOnMismatch == MismatchStrategy.ALLOWED) {\n-                result = AccessResult.ALLOWED;\n+                accessResult = AccessResult.ALLOWED;\n             }\n             else {\n-                result = AccessResult.DISALLOWED;\n+                accessResult = AccessResult.DISALLOWED;\n             }\n         }\n         else if (this.strategyOnMismatch == MismatchStrategy.ALLOWED) {\n-            result = AccessResult.ALLOWED;\n+            accessResult = AccessResult.ALLOWED;\n         }\n         else if (this.strategyOnMismatch == MismatchStrategy.DISALLOWED) {\n-            result = AccessResult.DISALLOWED;\n+            accessResult = AccessResult.DISALLOWED;\n         }\n         else {\n-            result = this.parent.checkAccess(inPkg, inFileName, forImport);\n+            accessResult = this.parent.checkAccess(s, s2, s3);\n         }\n-        return result;\n+        return accessResult;\n     }\n     \n-    private AccessResult localCheckAccess(final String inPkg, final String inFileName, final String forImport) {\n-        AccessResult localCheckAccessResult = AccessResult.UNKNOWN;\n-        for (final AbstractImportRule importRule : this.rules) {\n-            if (!importRule.isLocalOnly() || this.matchesExactly(inPkg, inFileName)) {\n-                final AccessResult result = importRule.verifyImport(forImport);\n-                if (result != AccessResult.UNKNOWN) {\n-                    localCheckAccessResult = result;\n+    private AccessResult localCheckAccess(final String s, final String s2, final String s3) {\n+        AccessResult unknown = AccessResult.UNKNOWN;\n+        for (final AbstractImportRule abstractImportRule : this.rules) {\n+            if (!abstractImportRule.isLocalOnly() || this.matchesExactly(s, s2)) {\n+                final AccessResult verifyImport = abstractImportRule.verifyImport(s3);\n+                if (verifyImport != AccessResult.UNKNOWN) {\n+                    unknown = verifyImport;\n                     break;\n                 }\n                 continue;\n             }\n         }\n-        return localCheckAccessResult;\n+        return unknown;\n     }\n }\n"}]}
