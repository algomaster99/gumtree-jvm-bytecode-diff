{"diffoscope-json-version": 1, "source1": "first/FailableDoubleConsumer.class", "source2": "second/FailableDoubleConsumer.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,150 +1,150 @@\n-  SHA-256 checksum a99b26a6b8e825f1ec71101e6c07025198c484161a36024b792baba2b990579f\n+  SHA-256 checksum 4bb124435a392d9ed1632ddb15fa74f767da481d491d6de5bdf4b3d233e87a35\n   Compiled from \"FailableDoubleConsumer.java\"\n public interface org.apache.commons.lang3.function.FailableDoubleConsumer<E extends java.lang.Throwable>\n   minor version: 0\n   major version: 52\n   flags: (0x0601) ACC_PUBLIC, ACC_INTERFACE, ACC_ABSTRACT\n-  this_class: #6                          // org/apache/commons/lang3/function/FailableDoubleConsumer\n-  super_class: #7                         // java/lang/Object\n+  this_class: #2                          // org/apache/commons/lang3/function/FailableDoubleConsumer\n+  super_class: #23                        // java/lang/Object\n   interfaces: 0, fields: 1, methods: 6, attributes: 5\n Constant pool:\n-   #1 = Fieldref           #6.#41         // org/apache/commons/lang3/function/FailableDoubleConsumer.NOP:Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n-   #2 = Methodref          #42.#43        // java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #3 = InvokeDynamic      #0:#48         // #0:accept:(Lorg/apache/commons/lang3/function/FailableDoubleConsumer;Lorg/apache/commons/lang3/function/FailableDoubleConsumer;)Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n-   #4 = InterfaceMethodref #6.#49         // org/apache/commons/lang3/function/FailableDoubleConsumer.accept:(D)V\n-   #5 = InvokeDynamic      #1:#51         // #1:accept:()Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n-   #6 = Class              #52            // org/apache/commons/lang3/function/FailableDoubleConsumer\n-   #7 = Class              #53            // java/lang/Object\n-   #8 = Utf8               NOP\n-   #9 = Utf8               Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n-  #10 = Utf8               nop\n-  #11 = Utf8               ()Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n-  #12 = Utf8               Code\n-  #13 = Utf8               LineNumberTable\n-  #14 = Utf8               Signature\n-  #15 = Utf8               <E:Ljava/lang/Throwable;>()Lorg/apache/commons/lang3/function/FailableDoubleConsumer<TE;>;\n-  #16 = Utf8               accept\n-  #17 = Utf8               (D)V\n-  #18 = Utf8               Exceptions\n-  #19 = Class              #54            // java/lang/Throwable\n-  #20 = Utf8               (D)V^TE;\n-  #21 = Utf8               andThen\n-  #22 = Utf8               (Lorg/apache/commons/lang3/function/FailableDoubleConsumer;)Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n-  #23 = Utf8               LocalVariableTable\n-  #24 = Utf8               this\n-  #25 = Utf8               after\n-  #26 = Utf8               LocalVariableTypeTable\n-  #27 = Utf8               Lorg/apache/commons/lang3/function/FailableDoubleConsumer<TE;>;\n-  #28 = Utf8               (Lorg/apache/commons/lang3/function/FailableDoubleConsumer<TE;>;)Lorg/apache/commons/lang3/function/FailableDoubleConsumer<TE;>;\n-  #29 = Utf8               lambda$andThen$1\n-  #30 = Utf8               (Lorg/apache/commons/lang3/function/FailableDoubleConsumer;D)V\n-  #31 = Utf8               t\n-  #32 = Utf8               D\n-  #33 = Utf8               lambda$static$0\n-  #34 = Utf8               <clinit>\n-  #35 = Utf8               ()V\n-  #36 = Utf8               <E:Ljava/lang/Throwable;>Ljava/lang/Object;\n-  #37 = Utf8               SourceFile\n-  #38 = Utf8               FailableDoubleConsumer.java\n-  #39 = Utf8               RuntimeVisibleAnnotations\n-  #40 = Utf8               Ljava/lang/FunctionalInterface;\n-  #41 = NameAndType        #8:#9          // NOP:Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n-  #42 = Class              #55            // java/util/Objects\n-  #43 = NameAndType        #56:#57        // requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #44 = Utf8               BootstrapMethods\n-  #45 = MethodHandle       6:#58          // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #46 = MethodType         #17            //  (D)V\n-  #47 = MethodHandle       7:#59          // REF_invokeSpecial org/apache/commons/lang3/function/FailableDoubleConsumer.lambda$andThen$1:(Lorg/apache/commons/lang3/function/FailableDoubleConsumer;D)V\n-  #48 = NameAndType        #16:#60        // accept:(Lorg/apache/commons/lang3/function/FailableDoubleConsumer;Lorg/apache/commons/lang3/function/FailableDoubleConsumer;)Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n-  #49 = NameAndType        #16:#17        // accept:(D)V\n-  #50 = MethodHandle       6:#61          // REF_invokeStatic org/apache/commons/lang3/function/FailableDoubleConsumer.lambda$static$0:(D)V\n-  #51 = NameAndType        #16:#11        // accept:()Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n-  #52 = Utf8               org/apache/commons/lang3/function/FailableDoubleConsumer\n-  #53 = Utf8               java/lang/Object\n-  #54 = Utf8               java/lang/Throwable\n-  #55 = Utf8               java/util/Objects\n-  #56 = Utf8               requireNonNull\n-  #57 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #58 = Methodref          #62.#63        // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #59 = InterfaceMethodref #6.#64         // org/apache/commons/lang3/function/FailableDoubleConsumer.lambda$andThen$1:(Lorg/apache/commons/lang3/function/FailableDoubleConsumer;D)V\n-  #60 = Utf8               (Lorg/apache/commons/lang3/function/FailableDoubleConsumer;Lorg/apache/commons/lang3/function/FailableDoubleConsumer;)Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n-  #61 = InterfaceMethodref #6.#65         // org/apache/commons/lang3/function/FailableDoubleConsumer.lambda$static$0:(D)V\n-  #62 = Class              #66            // java/lang/invoke/LambdaMetafactory\n-  #63 = NameAndType        #67:#71        // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #64 = NameAndType        #29:#30        // lambda$andThen$1:(Lorg/apache/commons/lang3/function/FailableDoubleConsumer;D)V\n-  #65 = NameAndType        #33:#17        // lambda$static$0:(D)V\n-  #66 = Utf8               java/lang/invoke/LambdaMetafactory\n-  #67 = Utf8               metafactory\n-  #68 = Class              #73            // java/lang/invoke/MethodHandles$Lookup\n-  #69 = Utf8               Lookup\n-  #70 = Utf8               InnerClasses\n-  #71 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #72 = Class              #74            // java/lang/invoke/MethodHandles\n-  #73 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #74 = Utf8               java/lang/invoke/MethodHandles\n+   #1 = Fieldref           #2.#3          // org/apache/commons/lang3/function/FailableDoubleConsumer.NOP:Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n+   #2 = Class              #4             // org/apache/commons/lang3/function/FailableDoubleConsumer\n+   #3 = NameAndType        #5:#6          // NOP:Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n+   #4 = Utf8               org/apache/commons/lang3/function/FailableDoubleConsumer\n+   #5 = Utf8               NOP\n+   #6 = Utf8               Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n+   #7 = Methodref          #8.#9          // java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #8 = Class              #10            // java/util/Objects\n+   #9 = NameAndType        #11:#12        // requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #10 = Utf8               java/util/Objects\n+  #11 = Utf8               requireNonNull\n+  #12 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #13 = InvokeDynamic      #0:#14         // #0:accept:(Lorg/apache/commons/lang3/function/FailableDoubleConsumer;Lorg/apache/commons/lang3/function/FailableDoubleConsumer;)Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n+  #14 = NameAndType        #15:#16        // accept:(Lorg/apache/commons/lang3/function/FailableDoubleConsumer;Lorg/apache/commons/lang3/function/FailableDoubleConsumer;)Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n+  #15 = Utf8               accept\n+  #16 = Utf8               (Lorg/apache/commons/lang3/function/FailableDoubleConsumer;Lorg/apache/commons/lang3/function/FailableDoubleConsumer;)Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n+  #17 = InterfaceMethodref #2.#18         // org/apache/commons/lang3/function/FailableDoubleConsumer.accept:(D)V\n+  #18 = NameAndType        #15:#19        // accept:(D)V\n+  #19 = Utf8               (D)V\n+  #20 = InvokeDynamic      #1:#21         // #1:accept:()Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n+  #21 = NameAndType        #15:#22        // accept:()Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n+  #22 = Utf8               ()Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n+  #23 = Class              #24            // java/lang/Object\n+  #24 = Utf8               java/lang/Object\n+  #25 = Utf8               nop\n+  #26 = Utf8               Code\n+  #27 = Utf8               LineNumberTable\n+  #28 = Utf8               Signature\n+  #29 = Utf8               <E:Ljava/lang/Throwable;>()Lorg/apache/commons/lang3/function/FailableDoubleConsumer<TE;>;\n+  #30 = Utf8               Exceptions\n+  #31 = Class              #32            // java/lang/Throwable\n+  #32 = Utf8               java/lang/Throwable\n+  #33 = Utf8               (D)V^TE;\n+  #34 = Utf8               andThen\n+  #35 = Utf8               (Lorg/apache/commons/lang3/function/FailableDoubleConsumer;)Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n+  #36 = Utf8               LocalVariableTable\n+  #37 = Utf8               this\n+  #38 = Utf8               after\n+  #39 = Utf8               LocalVariableTypeTable\n+  #40 = Utf8               Lorg/apache/commons/lang3/function/FailableDoubleConsumer<TE;>;\n+  #41 = Utf8               (Lorg/apache/commons/lang3/function/FailableDoubleConsumer<TE;>;)Lorg/apache/commons/lang3/function/FailableDoubleConsumer<TE;>;\n+  #42 = Utf8               lambda$andThen$1\n+  #43 = Utf8               (Lorg/apache/commons/lang3/function/FailableDoubleConsumer;D)V\n+  #44 = Utf8               t\n+  #45 = Utf8               D\n+  #46 = Utf8               lambda$static$0\n+  #47 = Utf8               <clinit>\n+  #48 = Utf8               ()V\n+  #49 = Utf8               <E:Ljava/lang/Throwable;>Ljava/lang/Object;\n+  #50 = Utf8               SourceFile\n+  #51 = Utf8               FailableDoubleConsumer.java\n+  #52 = Utf8               RuntimeVisibleAnnotations\n+  #53 = Utf8               Ljava/lang/FunctionalInterface;\n+  #54 = Utf8               BootstrapMethods\n+  #55 = MethodHandle       6:#56          // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #56 = Methodref          #57.#58        // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #57 = Class              #59            // java/lang/invoke/LambdaMetafactory\n+  #58 = NameAndType        #60:#61        // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #59 = Utf8               java/lang/invoke/LambdaMetafactory\n+  #60 = Utf8               metafactory\n+  #61 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #62 = MethodType         #19            //  (D)V\n+  #63 = MethodHandle       7:#64          // REF_invokeSpecial org/apache/commons/lang3/function/FailableDoubleConsumer.lambda$andThen$1:(Lorg/apache/commons/lang3/function/FailableDoubleConsumer;D)V\n+  #64 = InterfaceMethodref #2.#65         // org/apache/commons/lang3/function/FailableDoubleConsumer.lambda$andThen$1:(Lorg/apache/commons/lang3/function/FailableDoubleConsumer;D)V\n+  #65 = NameAndType        #42:#43        // lambda$andThen$1:(Lorg/apache/commons/lang3/function/FailableDoubleConsumer;D)V\n+  #66 = MethodHandle       6:#67          // REF_invokeStatic org/apache/commons/lang3/function/FailableDoubleConsumer.lambda$static$0:(D)V\n+  #67 = InterfaceMethodref #2.#68         // org/apache/commons/lang3/function/FailableDoubleConsumer.lambda$static$0:(D)V\n+  #68 = NameAndType        #46:#19        // lambda$static$0:(D)V\n+  #69 = Utf8               InnerClasses\n+  #70 = Class              #71            // java/lang/invoke/MethodHandles$Lookup\n+  #71 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #72 = Class              #73            // java/lang/invoke/MethodHandles\n+  #73 = Utf8               java/lang/invoke/MethodHandles\n+  #74 = Utf8               Lookup\n {\n   public static final org.apache.commons.lang3.function.FailableDoubleConsumer NOP;\n     descriptor: Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n \n   public static <E extends java.lang.Throwable> org.apache.commons.lang3.function.FailableDoubleConsumer<E> nop();\n     descriptor: ()Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=1, locals=0, args_size=0\n          0: getstatic     #1                  // Field NOP:Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n          3: areturn\n       LineNumberTable:\n         line 43: 0\n-    Signature: #15                          // <E:Ljava/lang/Throwable;>()Lorg/apache/commons/lang3/function/FailableDoubleConsumer<TE;>;\n+    Signature: #29                          // <E:Ljava/lang/Throwable;>()Lorg/apache/commons/lang3/function/FailableDoubleConsumer<TE;>;\n \n   public abstract void accept(double) throws E;\n     descriptor: (D)V\n     flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT\n     Exceptions:\n       throws java.lang.Throwable\n-    Signature: #20                          // (D)V^TE;\n+    Signature: #33                          // (D)V^TE;\n \n   public default org.apache.commons.lang3.function.FailableDoubleConsumer<E> andThen(org.apache.commons.lang3.function.FailableDoubleConsumer<E>);\n     descriptor: (Lorg/apache/commons/lang3/function/FailableDoubleConsumer;)Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_1\n-         1: invokestatic  #2                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;\n+         1: invokestatic  #7                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;\n          4: pop\n          5: aload_0\n          6: aload_1\n-         7: invokedynamic #3,  0              // InvokeDynamic #0:accept:(Lorg/apache/commons/lang3/function/FailableDoubleConsumer;Lorg/apache/commons/lang3/function/FailableDoubleConsumer;)Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n+         7: invokedynamic #13,  0             // InvokeDynamic #0:accept:(Lorg/apache/commons/lang3/function/FailableDoubleConsumer;Lorg/apache/commons/lang3/function/FailableDoubleConsumer;)Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n         12: areturn\n       LineNumberTable:\n         line 62: 0\n         line 63: 5\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      13     0  this   Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n             0      13     1 after   Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             0      13     0  this   Lorg/apache/commons/lang3/function/FailableDoubleConsumer<TE;>;\n             0      13     1 after   Lorg/apache/commons/lang3/function/FailableDoubleConsumer<TE;>;\n-    Signature: #28                          // (Lorg/apache/commons/lang3/function/FailableDoubleConsumer<TE;>;)Lorg/apache/commons/lang3/function/FailableDoubleConsumer<TE;>;\n+    Signature: #41                          // (Lorg/apache/commons/lang3/function/FailableDoubleConsumer<TE;>;)Lorg/apache/commons/lang3/function/FailableDoubleConsumer<TE;>;\n \n   private void lambda$andThen$1(org.apache.commons.lang3.function.FailableDoubleConsumer, double) throws java.lang.Throwable;\n     descriptor: (Lorg/apache/commons/lang3/function/FailableDoubleConsumer;D)V\n     flags: (0x1002) ACC_PRIVATE, ACC_SYNTHETIC\n     Code:\n       stack=3, locals=4, args_size=3\n          0: aload_0\n          1: dload_2\n-         2: invokeinterface #4,  3            // InterfaceMethod accept:(D)V\n+         2: invokeinterface #17,  3           // InterfaceMethod accept:(D)V\n          7: aload_1\n          8: dload_2\n-         9: invokeinterface #4,  3            // InterfaceMethod accept:(D)V\n+         9: invokeinterface #17,  3           // InterfaceMethod accept:(D)V\n         14: return\n       LineNumberTable:\n         line 64: 0\n         line 65: 7\n         line 66: 14\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -172,31 +172,31 @@\n       throws java.lang.Throwable\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=1, locals=0, args_size=0\n-         0: invokedynamic #5,  0              // InvokeDynamic #1:accept:()Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n+         0: invokedynamic #20,  0             // InvokeDynamic #1:accept:()Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n          5: putstatic     #1                  // Field NOP:Lorg/apache/commons/lang3/function/FailableDoubleConsumer;\n          8: return\n       LineNumberTable:\n         line 34: 0\n }\n-Signature: #36                          // <E:Ljava/lang/Throwable;>Ljava/lang/Object;\n+Signature: #49                          // <E:Ljava/lang/Throwable;>Ljava/lang/Object;\n SourceFile: \"FailableDoubleConsumer.java\"\n RuntimeVisibleAnnotations:\n-  0: #40()\n+  0: #53()\n     java.lang.FunctionalInterface\n-InnerClasses:\n-  public static final #69= #68 of #72;    // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #45 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  0: #55 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #46 (D)V\n-      #47 REF_invokeSpecial org/apache/commons/lang3/function/FailableDoubleConsumer.lambda$andThen$1:(Lorg/apache/commons/lang3/function/FailableDoubleConsumer;D)V\n-      #46 (D)V\n-  1: #45 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+      #62 (D)V\n+      #63 REF_invokeSpecial org/apache/commons/lang3/function/FailableDoubleConsumer.lambda$andThen$1:(Lorg/apache/commons/lang3/function/FailableDoubleConsumer;D)V\n+      #62 (D)V\n+  1: #55 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #46 (D)V\n-      #50 REF_invokeStatic org/apache/commons/lang3/function/FailableDoubleConsumer.lambda$static$0:(D)V\n-      #46 (D)V\n+      #62 (D)V\n+      #66 REF_invokeStatic org/apache/commons/lang3/function/FailableDoubleConsumer.lambda$static$0:(D)V\n+      #62 (D)V\n+InnerClasses:\n+  public static final #74= #70 of #72;    // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n"}]}
