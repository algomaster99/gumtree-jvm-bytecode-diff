{"diffoscope-json-version": 1, "source1": "first/RuntimeVisibleorInvisibleAnnotationsAttribute.class", "source2": "second/RuntimeVisibleorInvisibleAnnotationsAttribute.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,63 +1,62 @@\n \n package org.apache.commons.compress.harmony.unpack200.bytecode;\n \n-import java.util.List;\n import java.util.Collection;\n import java.util.ArrayList;\n import java.io.IOException;\n import java.io.DataOutputStream;\n \n public class RuntimeVisibleorInvisibleAnnotationsAttribute extends AnnotationsAttribute\n {\n     private final int num_annotations;\n     private final AnnotationsAttribute.Annotation[] annotations;\n     \n-    public RuntimeVisibleorInvisibleAnnotationsAttribute(final CPUTF8 name, final AnnotationsAttribute.Annotation[] annotations) {\n-        super(name);\n+    public RuntimeVisibleorInvisibleAnnotationsAttribute(final CPUTF8 cputf8, final AnnotationsAttribute.Annotation[] annotations) {\n+        super(cputf8);\n         this.num_annotations = annotations.length;\n         this.annotations = annotations;\n     }\n     \n     protected int getLength() {\n-        int length = 2;\n+        int n = 2;\n         for (int i = 0; i < this.num_annotations; ++i) {\n-            length += this.annotations[i].getLength();\n+            n += this.annotations[i].getLength();\n         }\n-        return length;\n+        return n;\n     }\n     \n-    protected void resolve(final ClassConstantPool pool) {\n-        super.resolve(pool);\n+    protected void resolve(final ClassConstantPool classConstantPool) {\n+        super.resolve(classConstantPool);\n         for (int i = 0; i < this.annotations.length; ++i) {\n-            this.annotations[i].resolve(pool);\n+            this.annotations[i].resolve(classConstantPool);\n         }\n     }\n     \n-    protected void writeBody(final DataOutputStream dos) throws IOException {\n-        final int size = dos.size();\n-        dos.writeShort(this.num_annotations);\n+    protected void writeBody(final DataOutputStream dataOutputStream) throws IOException {\n+        final int size = dataOutputStream.size();\n+        dataOutputStream.writeShort(this.num_annotations);\n         for (int i = 0; i < this.num_annotations; ++i) {\n-            this.annotations[i].writeBody(dos);\n+            this.annotations[i].writeBody(dataOutputStream);\n         }\n-        if (dos.size() - size != this.getLength()) {\n+        if (dataOutputStream.size() - size != this.getLength()) {\n             throw new Error();\n         }\n     }\n     \n     public String toString() {\n         return this.attributeName.underlyingString() + \": \" + this.num_annotations + \" annotations\";\n     }\n     \n     protected ClassFileEntry[] getNestedClassFileEntries() {\n-        final List nested = new ArrayList();\n-        nested.add(this.attributeName);\n+        final ArrayList list = new ArrayList();\n+        list.add(this.attributeName);\n         for (int i = 0; i < this.annotations.length; ++i) {\n-            nested.addAll(this.annotations[i].getClassFileEntries());\n+            list.addAll(this.annotations[i].getClassFileEntries());\n         }\n-        final ClassFileEntry[] nestedEntries = new ClassFileEntry[nested.size()];\n-        for (int j = 0; j < nestedEntries.length; ++j) {\n-            nestedEntries[j] = nested.get(j);\n+        final ClassFileEntry[] array = new ClassFileEntry[list.size()];\n+        for (int j = 0; j < array.length; ++j) {\n+            array[j] = (ClassFileEntry)list.get(j);\n         }\n-        return nestedEntries;\n+        return array;\n     }\n }\n"}]}
