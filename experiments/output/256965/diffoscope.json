{"diffoscope-json-version": 1, "source1": "first/Lister.class", "source2": "second/Lister.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -2,100 +2,100 @@\n package org.apache.commons.compress.archivers;\n \n import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n import java.util.Enumeration;\n import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n import org.apache.commons.compress.archivers.zip.ZipFile;\n import org.apache.commons.compress.archivers.tar.TarFile;\n+import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;\n import org.apache.commons.compress.archivers.sevenz.SevenZFile;\n import java.io.IOException;\n import java.io.BufferedInputStream;\n import java.nio.file.Files;\n import java.nio.file.OpenOption;\n import java.io.File;\n import java.io.InputStream;\n \n public final class Lister\n {\n     private static final ArchiveStreamFactory FACTORY;\n     \n-    private static ArchiveInputStream createArchiveInputStream(final String[] args, final InputStream fis) throws ArchiveException {\n-        if (args.length > 1) {\n-            return Lister.FACTORY.createArchiveInputStream(args[1], fis);\n+    private static ArchiveInputStream createArchiveInputStream(final String[] array, final InputStream inputStream) throws ArchiveException {\n+        if (array.length > 1) {\n+            return Lister.FACTORY.createArchiveInputStream(array[1], inputStream);\n         }\n-        return Lister.FACTORY.createArchiveInputStream(fis);\n+        return Lister.FACTORY.createArchiveInputStream(inputStream);\n     }\n     \n-    private static String detectFormat(final File f) throws ArchiveException, IOException {\n-        try (final InputStream fis = new BufferedInputStream(Files.newInputStream(f.toPath(), new OpenOption[0]))) {\n-            return ArchiveStreamFactory.detect(fis);\n+    private static String detectFormat(final File file) throws ArchiveException, IOException {\n+        try (final BufferedInputStream bufferedInputStream = new BufferedInputStream(Files.newInputStream(file.toPath(), new OpenOption[0]))) {\n+            return ArchiveStreamFactory.detect((InputStream)bufferedInputStream);\n         }\n     }\n     \n-    private static void list7z(final File f) throws IOException {\n-        try (final SevenZFile z = new SevenZFile(f)) {\n-            System.out.println(\"Created \" + z);\n-            ArchiveEntry ae;\n-            while ((ae = (ArchiveEntry)z.getNextEntry()) != null) {\n-                final String name = (ae.getName() == null) ? (z.getDefaultName() + \" (entry name was null)\") : ae.getName();\n-                System.out.println(name);\n+    private static void list7z(final File file) throws IOException {\n+        try (final SevenZFile obj = new SevenZFile(file)) {\n+            System.out.println(\"Created \" + obj);\n+            SevenZArchiveEntry nextEntry;\n+            while ((nextEntry = obj.getNextEntry()) != null) {\n+                System.out.println((((ArchiveEntry)nextEntry).getName() == null) ? (obj.getDefaultName() + \" (entry name was null)\") : ((ArchiveEntry)nextEntry).getName());\n             }\n         }\n     }\n     \n-    private static void listStream(final File f, final String[] args) throws ArchiveException, IOException {\n-        try (final InputStream fis = new BufferedInputStream(Files.newInputStream(f.toPath(), new OpenOption[0]));\n-             final ArchiveInputStream ais = createArchiveInputStream(args, fis)) {\n-            System.out.println(\"Created \" + ais.toString());\n-            ArchiveEntry ae;\n-            while ((ae = ais.getNextEntry()) != null) {\n-                System.out.println(ae.getName());\n+    private static void listStream(final File file, final String[] array) throws ArchiveException, IOException {\n+        try (final BufferedInputStream bufferedInputStream = new BufferedInputStream(Files.newInputStream(file.toPath(), new OpenOption[0]));\n+             final ArchiveInputStream archiveInputStream = createArchiveInputStream(array, bufferedInputStream)) {\n+            System.out.println(\"Created \" + archiveInputStream.toString());\n+            ArchiveEntry nextEntry;\n+            while ((nextEntry = archiveInputStream.getNextEntry()) != null) {\n+                System.out.println(nextEntry.getName());\n             }\n         }\n     }\n     \n-    private static void listZipUsingTarFile(final File f) throws IOException {\n-        try (final TarFile t = new TarFile(f)) {\n-            System.out.println(\"Created \" + t);\n-            t.getEntries().forEach(en -> System.out.println(en.getName()));\n+    private static void listZipUsingTarFile(final File file) throws IOException {\n+        try (final TarFile obj = new TarFile(file)) {\n+            System.out.println(\"Created \" + obj);\n+            obj.getEntries().forEach(tarArchiveEntry -> System.out.println(tarArchiveEntry.getName()));\n         }\n     }\n     \n-    private static void listZipUsingZipFile(final File f) throws IOException {\n-        try (final ZipFile z = new ZipFile(f)) {\n-            System.out.println(\"Created \" + z);\n-            final Enumeration<ZipArchiveEntry> en = z.getEntries();\n-            while (en.hasMoreElements()) {\n-                System.out.println(((ZipArchiveEntry)en.nextElement()).getName());\n+    private static void listZipUsingZipFile(final File file) throws IOException {\n+        try (final ZipFile obj = new ZipFile(file)) {\n+            System.out.println(\"Created \" + obj);\n+            final Enumeration entries = obj.getEntries();\n+            while (entries.hasMoreElements()) {\n+                System.out.println(((ZipArchiveEntry)entries.nextElement()).getName());\n             }\n         }\n     }\n     \n-    public static void main(final String[] args) throws ArchiveException, IOException {\n-        if (args.length == 0) {\n+    public static void main(final String[] array) throws ArchiveException, IOException {\n+        if (array.length == 0) {\n             usage();\n             return;\n         }\n-        System.out.println(\"Analysing \" + args[0]);\n-        final File f = new File(args[0]);\n-        if (!f.isFile()) {\n-            System.err.println(f + \" doesn't exist or is a directory\");\n-        }\n-        final String format = (args.length > 1) ? args[1] : detectFormat(f);\n-        if (\"7z\".equalsIgnoreCase(format)) {\n-            list7z(f);\n+        System.out.println(\"Analysing \" + array[0]);\n+        final File obj = new File(array[0]);\n+        if (!obj.isFile()) {\n+            System.err.println(obj + \" doesn't exist or is a directory\");\n+        }\n+        final String anObject = (array.length > 1) ? array[1] : detectFormat(obj);\n+        if (\"7z\".equalsIgnoreCase(anObject)) {\n+            list7z(obj);\n         }\n-        else if (\"zipfile\".equals(format)) {\n-            listZipUsingZipFile(f);\n+        else if (\"zipfile\".equals(anObject)) {\n+            listZipUsingZipFile(obj);\n         }\n-        else if (\"tarfile\".equals(format)) {\n-            listZipUsingTarFile(f);\n+        else if (\"tarfile\".equals(anObject)) {\n+            listZipUsingTarFile(obj);\n         }\n         else {\n-            listStream(f, args);\n+            listStream(obj, array);\n         }\n     }\n     \n     private static void usage() {\n         System.out.println(\"Parameters: archive-name [archive-type]\\n\");\n         System.out.println(\"The magic archive-type 'zipfile' prefers ZipFile over ZipArchiveInputStream\");\n         System.out.println(\"The magic archive-type 'tarfile' prefers TarFile over TarArchiveInputStream\");\n"}]}
