{"diffoscope-json-version": 1, "source1": "first/Streams$ArrayCollector.class", "source2": "second/Streams$ArrayCollector.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,27 +1,31 @@\n \n package org.apache.commons.lang3.stream;\n \n-import java.util.Collections;\n-import java.util.Collection;\n import java.lang.reflect.Array;\n+import java.util.Collection;\n import java.util.ArrayList;\n import java.util.function.Supplier;\n import java.util.function.Function;\n import java.util.function.BinaryOperator;\n import java.util.function.BiConsumer;\n+import java.util.Collections;\n import java.util.Set;\n import java.util.List;\n import java.util.stream.Collector;\n \n public static class ArrayCollector<O> implements Collector<O, List<O>, O[]>\n {\n     private static final Set<Characteristics> characteristics;\n     private final Class<O> elementType;\n     \n+    static {\n+        Streams.ArrayCollector.characteristics = Collections.emptySet();\n+    }\n+    \n     public ArrayCollector(final Class<O> elementType) {\n         this.elementType = elementType;\n     }\n     \n     @Override\n     public BiConsumer<List<O>, O> accumulator() {\n         return List::add;\n@@ -30,24 +34,20 @@\n     @Override\n     public Set<Characteristics> characteristics() {\n         return Streams.ArrayCollector.characteristics;\n     }\n     \n     @Override\n     public BinaryOperator<List<O>> combiner() {\n-        return Streams.ArrayCollector::lambda$combiner$0;\n+        return Streams.ArrayCollector::lambda$0;\n     }\n     \n     @Override\n     public Function<List<O>, O[]> finisher() {\n-        return this::lambda$finisher$1;\n+        return this::lambda$1;\n     }\n     \n     @Override\n     public Supplier<List<O>> supplier() {\n         return (Supplier<List<O>>)ArrayList::new;\n     }\n-    \n-    static {\n-        Streams.ArrayCollector.characteristics = Collections.emptySet();\n-    }\n }\n"}]}
