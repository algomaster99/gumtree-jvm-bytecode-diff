{"diffoscope-json-version": 1, "source1": "first/ClassMemberImpliedModifierCheck.class", "source2": "second/ClassMemberImpliedModifierCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,67 +18,67 @@\n     \n     public ClassMemberImpliedModifierCheck() {\n         this.violateImpliedStaticOnNestedEnum = true;\n         this.violateImpliedStaticOnNestedInterface = true;\n         this.violateImpliedStaticOnNestedRecord = true;\n     }\n     \n-    public void setViolateImpliedStaticOnNestedEnum(final boolean violateImplied) {\n-        this.violateImpliedStaticOnNestedEnum = violateImplied;\n+    public void setViolateImpliedStaticOnNestedEnum(final boolean violateImpliedStaticOnNestedEnum) {\n+        this.violateImpliedStaticOnNestedEnum = violateImpliedStaticOnNestedEnum;\n     }\n     \n-    public void setViolateImpliedStaticOnNestedInterface(final boolean violateImplied) {\n-        this.violateImpliedStaticOnNestedInterface = violateImplied;\n+    public void setViolateImpliedStaticOnNestedInterface(final boolean violateImpliedStaticOnNestedInterface) {\n+        this.violateImpliedStaticOnNestedInterface = violateImpliedStaticOnNestedInterface;\n     }\n     \n-    public void setViolateImpliedStaticOnNestedRecord(final boolean violateImplied) {\n-        this.violateImpliedStaticOnNestedRecord = violateImplied;\n+    public void setViolateImpliedStaticOnNestedRecord(final boolean violateImpliedStaticOnNestedRecord) {\n+        this.violateImpliedStaticOnNestedRecord = violateImpliedStaticOnNestedRecord;\n     }\n     \n     public int[] getDefaultTokens() {\n         return this.getAcceptableTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return this.getAcceptableTokens();\n     }\n     \n     public int[] getAcceptableTokens() {\n         return new int[] { 15, 154, 199 };\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        if (isInTypeBlock(ast)) {\n-            final DetailAST modifiers = ast.findFirstToken(5);\n-            switch (ast.getType()) {\n+    public void visitToken(final DetailAST detailAST) {\n+        if (isInTypeBlock(detailAST)) {\n+            final DetailAST firstToken = detailAST.findFirstToken(5);\n+            switch (detailAST.getType()) {\n                 case 154: {\n-                    if (this.violateImpliedStaticOnNestedEnum && modifiers.findFirstToken(64) == null) {\n-                        this.log(ast, \"class.implied.modifier\", new Object[] { \"static\" });\n+                    if (this.violateImpliedStaticOnNestedEnum && firstToken.findFirstToken(64) == null) {\n+                        this.log(detailAST, \"class.implied.modifier\", new Object[] { \"static\" });\n                         break;\n                     }\n                     break;\n                 }\n                 case 15: {\n-                    if (this.violateImpliedStaticOnNestedInterface && modifiers.findFirstToken(64) == null) {\n-                        this.log(ast, \"class.implied.modifier\", new Object[] { \"static\" });\n+                    if (this.violateImpliedStaticOnNestedInterface && firstToken.findFirstToken(64) == null) {\n+                        this.log(detailAST, \"class.implied.modifier\", new Object[] { \"static\" });\n                         break;\n                     }\n                     break;\n                 }\n                 case 199: {\n-                    if (this.violateImpliedStaticOnNestedRecord && modifiers.findFirstToken(64) == null) {\n-                        this.log(ast, \"class.implied.modifier\", new Object[] { \"static\" });\n+                    if (this.violateImpliedStaticOnNestedRecord && firstToken.findFirstToken(64) == null) {\n+                        this.log(detailAST, \"class.implied.modifier\", new Object[] { \"static\" });\n                         break;\n                     }\n                     break;\n                 }\n                 default: {\n-                    throw new IllegalStateException(ast.toString());\n+                    throw new IllegalStateException(detailAST.toString());\n                 }\n             }\n         }\n     }\n     \n-    private static boolean isInTypeBlock(final DetailAST ast) {\n-        return ScopeUtil.isInScope(ast, Scope.ANONINNER) || ScopeUtil.isInClassBlock(ast) || ScopeUtil.isInEnumBlock(ast) || ScopeUtil.isInRecordBlock(ast);\n+    private static boolean isInTypeBlock(final DetailAST detailAST) {\n+        return ScopeUtil.isInScope(detailAST, Scope.ANONINNER) || ScopeUtil.isInClassBlock(detailAST) || ScopeUtil.isInEnumBlock(detailAST) || ScopeUtil.isInRecordBlock(detailAST);\n     }\n }\n"}]}
