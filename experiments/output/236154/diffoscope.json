{"diffoscope-json-version": 1, "source1": "first/CanExecuteFileFilter.class", "source2": "second/CanExecuteFileFilter.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,62 +1,57 @@\n-  SHA-256 checksum 4693f2df2cf0f107310152be2736d84530c82690299aadb84039d08277a24efb\n+  SHA-256 checksum 48aadaadf7d4cda0ef79d099421fe75ddcb0c4b8f4f825e40bcbac7247248096\n   Compiled from \"CanExecuteFileFilter.java\"\n public class org.apache.commons.io.filefilter.CanExecuteFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #3                          // org/apache/commons/io/filefilter/CanExecuteFileFilter\n   super_class: #9                         // org/apache/commons/io/filefilter/AbstractFileFilter\n   interfaces: 1, fields: 3, methods: 3, attributes: 1\n Constant pool:\n-   #1 = Methodref          #9.#33         // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n-   #2 = Methodref          #34.#35        // java/io/File.canExecute:()Z\n-   #3 = Class              #36            // org/apache/commons/io/filefilter/CanExecuteFileFilter\n-   #4 = Methodref          #3.#33         // org/apache/commons/io/filefilter/CanExecuteFileFilter.\"<init>\":()V\n-   #5 = Fieldref           #3.#37         // org/apache/commons/io/filefilter/CanExecuteFileFilter.CAN_EXECUTE:Lorg/apache/commons/io/filefilter/IOFileFilter;\n-   #6 = Class              #38            // org/apache/commons/io/filefilter/NotFileFilter\n-   #7 = Methodref          #6.#39         // org/apache/commons/io/filefilter/NotFileFilter.\"<init>\":(Lorg/apache/commons/io/filefilter/IOFileFilter;)V\n-   #8 = Fieldref           #3.#40         // org/apache/commons/io/filefilter/CanExecuteFileFilter.CANNOT_EXECUTE:Lorg/apache/commons/io/filefilter/IOFileFilter;\n-   #9 = Class              #41            // org/apache/commons/io/filefilter/AbstractFileFilter\n-  #10 = Class              #42            // java/io/Serializable\n+   #1 = Methodref          #9.#28         // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n+   #2 = Methodref          #29.#30        // java/io/File.canExecute:()Z\n+   #3 = Class              #31            // org/apache/commons/io/filefilter/CanExecuteFileFilter\n+   #4 = Methodref          #3.#28         // org/apache/commons/io/filefilter/CanExecuteFileFilter.\"<init>\":()V\n+   #5 = Fieldref           #3.#32         // org/apache/commons/io/filefilter/CanExecuteFileFilter.CAN_EXECUTE:Lorg/apache/commons/io/filefilter/IOFileFilter;\n+   #6 = Class              #33            // org/apache/commons/io/filefilter/NotFileFilter\n+   #7 = Methodref          #6.#34         // org/apache/commons/io/filefilter/NotFileFilter.\"<init>\":(Lorg/apache/commons/io/filefilter/IOFileFilter;)V\n+   #8 = Fieldref           #3.#35         // org/apache/commons/io/filefilter/CanExecuteFileFilter.CANNOT_EXECUTE:Lorg/apache/commons/io/filefilter/IOFileFilter;\n+   #9 = Class              #36            // org/apache/commons/io/filefilter/AbstractFileFilter\n+  #10 = Class              #37            // java/io/Serializable\n   #11 = Utf8               serialVersionUID\n   #12 = Utf8               J\n   #13 = Utf8               ConstantValue\n   #14 = Long               3179904805251622989l\n   #16 = Utf8               CAN_EXECUTE\n   #17 = Utf8               Lorg/apache/commons/io/filefilter/IOFileFilter;\n   #18 = Utf8               CANNOT_EXECUTE\n   #19 = Utf8               <init>\n   #20 = Utf8               ()V\n   #21 = Utf8               Code\n   #22 = Utf8               LineNumberTable\n-  #23 = Utf8               LocalVariableTable\n-  #24 = Utf8               this\n-  #25 = Utf8               Lorg/apache/commons/io/filefilter/CanExecuteFileFilter;\n-  #26 = Utf8               accept\n-  #27 = Utf8               (Ljava/io/File;)Z\n-  #28 = Utf8               file\n-  #29 = Utf8               Ljava/io/File;\n-  #30 = Utf8               <clinit>\n-  #31 = Utf8               SourceFile\n-  #32 = Utf8               CanExecuteFileFilter.java\n-  #33 = NameAndType        #19:#20        // \"<init>\":()V\n-  #34 = Class              #43            // java/io/File\n-  #35 = NameAndType        #44:#45        // canExecute:()Z\n-  #36 = Utf8               org/apache/commons/io/filefilter/CanExecuteFileFilter\n-  #37 = NameAndType        #16:#17        // CAN_EXECUTE:Lorg/apache/commons/io/filefilter/IOFileFilter;\n-  #38 = Utf8               org/apache/commons/io/filefilter/NotFileFilter\n-  #39 = NameAndType        #19:#46        // \"<init>\":(Lorg/apache/commons/io/filefilter/IOFileFilter;)V\n-  #40 = NameAndType        #18:#17        // CANNOT_EXECUTE:Lorg/apache/commons/io/filefilter/IOFileFilter;\n-  #41 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n-  #42 = Utf8               java/io/Serializable\n-  #43 = Utf8               java/io/File\n-  #44 = Utf8               canExecute\n-  #45 = Utf8               ()Z\n-  #46 = Utf8               (Lorg/apache/commons/io/filefilter/IOFileFilter;)V\n+  #23 = Utf8               accept\n+  #24 = Utf8               (Ljava/io/File;)Z\n+  #25 = Utf8               <clinit>\n+  #26 = Utf8               SourceFile\n+  #27 = Utf8               CanExecuteFileFilter.java\n+  #28 = NameAndType        #19:#20        // \"<init>\":()V\n+  #29 = Class              #38            // java/io/File\n+  #30 = NameAndType        #39:#40        // canExecute:()Z\n+  #31 = Utf8               org/apache/commons/io/filefilter/CanExecuteFileFilter\n+  #32 = NameAndType        #16:#17        // CAN_EXECUTE:Lorg/apache/commons/io/filefilter/IOFileFilter;\n+  #33 = Utf8               org/apache/commons/io/filefilter/NotFileFilter\n+  #34 = NameAndType        #19:#41        // \"<init>\":(Lorg/apache/commons/io/filefilter/IOFileFilter;)V\n+  #35 = NameAndType        #18:#17        // CANNOT_EXECUTE:Lorg/apache/commons/io/filefilter/IOFileFilter;\n+  #36 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n+  #37 = Utf8               java/io/Serializable\n+  #38 = Utf8               java/io/File\n+  #39 = Utf8               canExecute\n+  #40 = Utf8               ()Z\n+  #41 = Utf8               (Lorg/apache/commons/io/filefilter/IOFileFilter;)V\n {\n   private static final long serialVersionUID = 3179904805251622989l;\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long 3179904805251622989l\n \n   public static final org.apache.commons.io.filefilter.IOFileFilter CAN_EXECUTE;\n@@ -74,32 +69,25 @@\n       stack=1, locals=1, args_size=1\n          0: aload_0\n          1: invokespecial #1                  // Method org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n          4: return\n       LineNumberTable:\n         line 64: 0\n         line 65: 4\n-      LocalVariableTable:\n-        Start  Length  Slot  Name   Signature\n-            0       5     0  this   Lorg/apache/commons/io/filefilter/CanExecuteFileFilter;\n \n   public boolean accept(java.io.File);\n     descriptor: (Ljava/io/File;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=2, args_size=2\n          0: aload_1\n          1: invokevirtual #2                  // Method java/io/File.canExecute:()Z\n          4: ireturn\n       LineNumberTable:\n         line 75: 0\n-      LocalVariableTable:\n-        Start  Length  Slot  Name   Signature\n-            0       5     0  this   Lorg/apache/commons/io/filefilter/CanExecuteFileFilter;\n-            0       5     1  file   Ljava/io/File;\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=3, locals=0, args_size=0\n          0: new           #3                  // class org/apache/commons/io/filefilter/CanExecuteFileFilter\n"}]}
