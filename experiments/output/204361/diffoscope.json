{"diffoscope-json-version": 1, "source1": "first/ExplodingInputStream.class", "source2": "second/ExplodingInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,105 +18,104 @@\n     private BinaryTree literalTree;\n     private BinaryTree lengthTree;\n     private BinaryTree distanceTree;\n     private final CircularBuffer buffer;\n     private long uncompressedCount;\n     private long treeSizes;\n     \n-    public ExplodingInputStream(final int dictionarySize, final int numberOfTrees, final InputStream in) {\n+    public ExplodingInputStream(final int dictionarySize, final int n, final InputStream in) {\n         this.buffer = new CircularBuffer(32768);\n         if (dictionarySize != 4096 && dictionarySize != 8192) {\n             throw new IllegalArgumentException(\"The dictionary size must be 4096 or 8192\");\n         }\n-        if (numberOfTrees != 2 && numberOfTrees != 3) {\n+        if (n != 2 && n != 3) {\n             throw new IllegalArgumentException(\"The number of trees must be 2 or 3\");\n         }\n         this.dictionarySize = dictionarySize;\n-        this.numberOfTrees = numberOfTrees;\n-        this.minimumMatchLength = numberOfTrees;\n+        this.numberOfTrees = n;\n+        this.minimumMatchLength = n;\n         this.in = in;\n     }\n     \n     @Override\n     public void close() throws IOException {\n         this.in.close();\n     }\n     \n     private void fillBuffer() throws IOException {\n         this.init();\n-        final int bit = this.bits.nextBit();\n-        if (bit == -1) {\n+        final int nextBit = this.bits.nextBit();\n+        if (nextBit == -1) {\n             return;\n         }\n-        if (bit == 1) {\n-            int literal;\n+        if (nextBit == 1) {\n+            int n;\n             if (this.literalTree != null) {\n-                literal = this.literalTree.read(this.bits);\n+                n = this.literalTree.read(this.bits);\n             }\n             else {\n-                literal = this.bits.nextByte();\n+                n = this.bits.nextByte();\n             }\n-            if (literal == -1) {\n+            if (n == -1) {\n                 return;\n             }\n-            this.buffer.put(literal);\n+            this.buffer.put(n);\n         }\n         else {\n-            final int distanceLowSize = (this.dictionarySize == 4096) ? 6 : 7;\n-            final int distanceLow = (int)this.bits.nextBits(distanceLowSize);\n-            final int distanceHigh = this.distanceTree.read(this.bits);\n-            if (distanceHigh == -1 && distanceLow <= 0) {\n+            final int n2 = (this.dictionarySize == 4096) ? 6 : 7;\n+            final int n3 = (int)this.bits.nextBits(n2);\n+            final int read = this.distanceTree.read(this.bits);\n+            if (read == -1 && n3 <= 0) {\n                 return;\n             }\n-            final int distance = distanceHigh << distanceLowSize | distanceLow;\n-            int length = this.lengthTree.read(this.bits);\n-            if (length == 63) {\n-                final long nextByte = this.bits.nextBits(8);\n-                if (nextByte == -1L) {\n+            final int n4 = read << n2 | n3;\n+            int n5 = this.lengthTree.read(this.bits);\n+            if (n5 == 63) {\n+                final long nextBits = this.bits.nextBits(8);\n+                if (nextBits == -1L) {\n                     return;\n                 }\n-                length = ExactMath.add(length, nextByte);\n+                n5 = ExactMath.add(n5, nextBits);\n             }\n-            length += this.minimumMatchLength;\n-            this.buffer.copy(distance + 1, length);\n+            this.buffer.copy(n4 + 1, n5 + this.minimumMatchLength);\n         }\n     }\n     \n     public long getCompressedCount() {\n         return this.bits.getBytesRead() + this.treeSizes;\n     }\n     \n     public long getUncompressedCount() {\n         return this.uncompressedCount;\n     }\n     \n     private void init() throws IOException {\n         if (this.bits == null) {\n-            try (final CountingInputStream i = new CountingInputStream((InputStream)new CloseShieldFilterInputStream(this.in))) {\n+            try (final CountingInputStream countingInputStream = new CountingInputStream((InputStream)new CloseShieldFilterInputStream(this.in))) {\n                 if (this.numberOfTrees == 3) {\n-                    this.literalTree = BinaryTree.decode((InputStream)i, 256);\n+                    this.literalTree = BinaryTree.decode((InputStream)countingInputStream, 256);\n                 }\n-                this.lengthTree = BinaryTree.decode((InputStream)i, 64);\n-                this.distanceTree = BinaryTree.decode((InputStream)i, 64);\n-                this.treeSizes += i.getBytesRead();\n+                this.lengthTree = BinaryTree.decode((InputStream)countingInputStream, 64);\n+                this.distanceTree = BinaryTree.decode((InputStream)countingInputStream, 64);\n+                this.treeSizes += countingInputStream.getBytesRead();\n             }\n             this.bits = new BitStream(this.in);\n         }\n     }\n     \n     @Override\n     public int read() throws IOException {\n         if (!this.buffer.available()) {\n             try {\n                 this.fillBuffer();\n             }\n-            catch (final IllegalArgumentException ex) {\n-                throw new IOException(\"bad IMPLODE stream\", ex);\n+            catch (final IllegalArgumentException cause) {\n+                throw new IOException(\"bad IMPLODE stream\", cause);\n             }\n         }\n-        final int ret = this.buffer.get();\n-        if (ret > -1) {\n+        final int value = this.buffer.get();\n+        if (value > -1) {\n             ++this.uncompressedCount;\n         }\n-        return ret;\n+        return value;\n     }\n }\n"}]}
