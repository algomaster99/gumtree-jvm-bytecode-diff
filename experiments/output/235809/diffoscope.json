{"diffoscope-json-version": 1, "source1": "first/RegexFileFilter.class", "source2": "second/RegexFileFilter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,43 +7,43 @@\n import java.io.Serializable;\n \n public class RegexFileFilter extends AbstractFileFilter implements Serializable\n {\n     private static final long serialVersionUID = 4269646126155225062L;\n     private final Pattern pattern;\n     \n-    public RegexFileFilter(final String pattern) {\n-        if (pattern == null) {\n+    public RegexFileFilter(final String regex) {\n+        if (regex == null) {\n             throw new IllegalArgumentException(\"Pattern is missing\");\n         }\n-        this.pattern = Pattern.compile(pattern);\n+        this.pattern = Pattern.compile(regex);\n     }\n     \n-    public RegexFileFilter(final String pattern, final IOCase caseSensitivity) {\n-        if (pattern == null) {\n+    public RegexFileFilter(final String regex, final IOCase ioCase) {\n+        if (regex == null) {\n             throw new IllegalArgumentException(\"Pattern is missing\");\n         }\n         int flags = 0;\n-        if (caseSensitivity != null && !caseSensitivity.isCaseSensitive()) {\n+        if (ioCase != null && !ioCase.isCaseSensitive()) {\n             flags = 2;\n         }\n-        this.pattern = Pattern.compile(pattern, flags);\n+        this.pattern = Pattern.compile(regex, flags);\n     }\n     \n-    public RegexFileFilter(final String pattern, final int flags) {\n-        if (pattern == null) {\n+    public RegexFileFilter(final String regex, final int flags) {\n+        if (regex == null) {\n             throw new IllegalArgumentException(\"Pattern is missing\");\n         }\n-        this.pattern = Pattern.compile(pattern, flags);\n+        this.pattern = Pattern.compile(regex, flags);\n     }\n     \n     public RegexFileFilter(final Pattern pattern) {\n         if (pattern == null) {\n             throw new IllegalArgumentException(\"Pattern is missing\");\n         }\n         this.pattern = pattern;\n     }\n     \n-    public boolean accept(final File dir, final String name) {\n-        return this.pattern.matcher(name).matches();\n+    public boolean accept(final File file, final String input) {\n+        return this.pattern.matcher(input).matches();\n     }\n }\n"}]}
