{"diffoscope-json-version": 1, "source1": "first/CharacterSetFilterReader.class", "source2": "second/CharacterSetFilterReader.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,23 +7,25 @@\n import java.io.Reader;\n import java.util.Collections;\n import java.util.function.IntPredicate;\n import java.util.Set;\n \n public class CharacterSetFilterReader extends AbstractCharacterFilterReader\n {\n-    private static IntPredicate toIntPredicate(final Set<Integer> skip) {\n-        if (skip == null) {\n+    private static IntPredicate toIntPredicate(final Set<Integer> s2) {\n+        if (s2 == null) {\n             return CharacterSetFilterReader.SKIP_NONE;\n         }\n-        final Set<Integer> unmodifiableSet = Collections.unmodifiableSet((Set<? extends Integer>)skip);\n-        return c -> unmodifiableSet.contains(Integer.valueOf(c));\n+        return i -> {\n+            Collections.unmodifiableSet((Set<?>)s2);\n+            return set.contains(Integer.valueOf(i));\n+        };\n     }\n     \n-    public CharacterSetFilterReader(final Reader reader, final Integer... skip) {\n-        this(reader, new HashSet<Integer>(Arrays.asList(skip)));\n+    public CharacterSetFilterReader(final Reader reader, final Integer... a) {\n+        this(reader, new HashSet<Integer>(Arrays.asList(a)));\n     }\n     \n-    public CharacterSetFilterReader(final Reader reader, final Set<Integer> skip) {\n-        super(reader, toIntPredicate(skip));\n+    public CharacterSetFilterReader(final Reader reader, final Set<Integer> set) {\n+        super(reader, toIntPredicate(set));\n     }\n }\n"}]}
