{"diffoscope-json-version": 1, "source1": "first/ModuleProvides.class", "source2": "second/ModuleProvides.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,50 +7,50 @@\n \n public final class ModuleProvides implements Cloneable, Node\n {\n     private final int providesIndex;\n     private final int providesWithCount;\n     private final int[] providesWithIndex;\n     \n-    ModuleProvides(final DataInput file) throws IOException {\n-        this.providesIndex = file.readUnsignedShort();\n-        this.providesWithCount = file.readUnsignedShort();\n+    ModuleProvides(final DataInput dataInput) throws IOException {\n+        this.providesIndex = dataInput.readUnsignedShort();\n+        this.providesWithCount = dataInput.readUnsignedShort();\n         this.providesWithIndex = new int[this.providesWithCount];\n         for (int i = 0; i < this.providesWithCount; ++i) {\n-            this.providesWithIndex[i] = file.readUnsignedShort();\n+            this.providesWithIndex[i] = dataInput.readUnsignedShort();\n         }\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitModuleProvides(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitModuleProvides(this);\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        file.writeShort(this.providesIndex);\n-        file.writeShort(this.providesWithCount);\n-        for (final int entry : this.providesWithIndex) {\n-            file.writeShort(entry);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.providesIndex);\n+        dataOutputStream.writeShort(this.providesWithCount);\n+        final int[] providesWithIndex = this.providesWithIndex;\n+        for (int length = providesWithIndex.length, i = 0; i < length; ++i) {\n+            dataOutputStream.writeShort(providesWithIndex[i]);\n         }\n     }\n     \n     @Override\n     public String toString() {\n         return \"provides(\" + this.providesIndex + \", \" + this.providesWithCount + \", ...)\";\n     }\n     \n-    public String toString(final ConstantPool constant_pool) {\n-        final StringBuilder buf = new StringBuilder();\n-        final String interface_name = constant_pool.constantToString(this.providesIndex, (byte)7);\n-        buf.append(Utility.compactClassName(interface_name, false));\n-        buf.append(\", with(\").append(this.providesWithCount).append(\"):\\n\");\n-        for (final int index : this.providesWithIndex) {\n-            final String class_name = constant_pool.getConstantString(index, (byte)7);\n-            buf.append(\"      \").append(Utility.compactClassName(class_name, false)).append(\"\\n\");\n+    public String toString(final ConstantPool constantPool) {\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(Utility.compactClassName(constantPool.constantToString(this.providesIndex, (byte)7), false));\n+        sb.append(\", with(\").append(this.providesWithCount).append(\"):\\n\");\n+        final int[] providesWithIndex = this.providesWithIndex;\n+        for (int length = providesWithIndex.length, i = 0; i < length; ++i) {\n+            sb.append(\"      \").append(Utility.compactClassName(constantPool.getConstantString(providesWithIndex[i], (byte)7), false)).append(\"\\n\");\n         }\n-        return buf.substring();\n+        return sb.substring();\n     }\n     \n     public ModuleProvides copy() {\n         try {\n             return (ModuleProvides)this.clone();\n         }\n         catch (final CloneNotSupportedException ex) {\n"}]}
