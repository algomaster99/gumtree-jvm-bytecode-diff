{"diffoscope-json-version": 1, "source1": "first/ModelTransaction.class", "source2": "second/ModelTransaction.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -49,35 +49,35 @@\n     }\n     \n     public ImmutableNode getQueryRoot() {\n         return this.queryRoot;\n     }\n     \n     public void addAddNodesOperation(final ImmutableNode parent, final Collection<? extends ImmutableNode> newNodes) {\n-        final ModelTransaction.ChildrenUpdateOperation op = new ModelTransaction.ChildrenUpdateOperation(this, (ModelTransaction.ModelTransaction$1)null);\n+        final ModelTransaction.ChildrenUpdateOperation op = new ModelTransaction.ChildrenUpdateOperation(this, (ModelTransaction.ChildrenUpdateOperation)null);\n         op.addNewNodes((Collection)newNodes);\n         this.fetchOperations(parent, -1).addChildrenOperation(op);\n     }\n     \n     public void addAddNodeOperation(final ImmutableNode parent, final ImmutableNode newChild) {\n-        final ModelTransaction.ChildrenUpdateOperation op = new ModelTransaction.ChildrenUpdateOperation(this, (ModelTransaction.ModelTransaction$1)null);\n+        final ModelTransaction.ChildrenUpdateOperation op = new ModelTransaction.ChildrenUpdateOperation(this, (ModelTransaction.ChildrenUpdateOperation)null);\n         op.addNewNode(newChild);\n         this.fetchOperations(parent, -1).addChildrenOperation(op);\n     }\n     \n     public void addAttributeOperation(final ImmutableNode target, final String name, final Object value) {\n         this.fetchOperations(target, -1).addOperation((ModelTransaction.Operation)new ModelTransaction.AddAttributeOperation(name, value));\n     }\n     \n     public void addAttributesOperation(final ImmutableNode target, final Map<String, Object> attributes) {\n         this.fetchOperations(target, -1).addOperation((ModelTransaction.Operation)new ModelTransaction.AddAttributesOperation((Map)attributes));\n     }\n     \n     public void addRemoveNodeOperation(final ImmutableNode parent, final ImmutableNode node) {\n-        final ModelTransaction.ChildrenUpdateOperation op = new ModelTransaction.ChildrenUpdateOperation(this, (ModelTransaction.ModelTransaction$1)null);\n+        final ModelTransaction.ChildrenUpdateOperation op = new ModelTransaction.ChildrenUpdateOperation(this, (ModelTransaction.ChildrenUpdateOperation)null);\n         op.addNodeToRemove(node);\n         this.fetchOperations(parent, -1).addChildrenOperation(op);\n     }\n     \n     public void addRemoveAttributeOperation(final ImmutableNode target, final String name) {\n         this.fetchOperations(target, -1).addOperation((ModelTransaction.Operation)new ModelTransaction.RemoveAttributeOperation(name));\n     }\n@@ -117,15 +117,15 @@\n     }\n     \n     ModelTransaction.Operations fetchOperations(final ImmutableNode target, final int level) {\n         final Integer nodeLevel = Integer.valueOf((level == -1) ? this.level(target) : level);\n         final Map<ImmutableNode, ModelTransaction.Operations> levelOperations = (Map<ImmutableNode, ModelTransaction.Operations>)this.operations.computeIfAbsent(nodeLevel, k -> new HashMap());\n         ModelTransaction.Operations ops = (ModelTransaction.Operations)levelOperations.get(target);\n         if (ops == null) {\n-            ops = new ModelTransaction.Operations(this, (ModelTransaction.ModelTransaction$1)null);\n+            ops = new ModelTransaction.Operations(this, (ModelTransaction.Operations)null);\n             levelOperations.put(target, ops);\n         }\n         return ops;\n     }\n     \n     private ImmutableNode initQueryRoot(final TreeData treeData, final NodeSelector selector) {\n         return (selector == null) ? treeData.getRootNode() : treeData.getNodeTracker().getTrackedNode(selector);\n"}]}
