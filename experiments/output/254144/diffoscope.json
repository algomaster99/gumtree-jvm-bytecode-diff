{"diffoscope-json-version": 1, "source1": "first/ChainedPropertyUtil.class", "source2": "second/ChainedPropertyUtil.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,13 +1,12 @@\n \n package com.puppycrawl.tools.checkstyle.utils;\n \n import java.util.regex.Matcher;\n import java.util.Iterator;\n-import java.util.Set;\n import java.util.Map;\n import com.puppycrawl.tools.checkstyle.api.CheckstyleException;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.Properties;\n import java.util.regex.Pattern;\n \n@@ -16,51 +15,48 @@\n     public static final String UNDEFINED_PROPERTY_MESSAGE = \"Undefined property: \";\n     private static final Pattern PROPERTY_VARIABLE_PATTERN;\n     \n     private ChainedPropertyUtil() {\n     }\n     \n     public static Properties getResolvedProperties(final Properties properties) throws CheckstyleException {\n-        final Set<String> unresolvedPropertyNames = new HashSet<String>(properties.stringPropertyNames());\n-        Iterator<String> unresolvedPropertyIterator = unresolvedPropertyNames.iterator();\n-        final Map<Object, Object> comparisonProperties = new Properties();\n-        while (unresolvedPropertyIterator.hasNext()) {\n-            final String propertyName = (String)unresolvedPropertyIterator.next();\n-            String propertyValue = properties.getProperty(propertyName);\n-            final Matcher matcher = ChainedPropertyUtil.PROPERTY_VARIABLE_PATTERN.matcher(propertyValue);\n+        final HashSet set = new HashSet((Collection<? extends E>)properties.stringPropertyNames());\n+        Iterator iterator = set.iterator();\n+        final Properties properties2 = new Properties();\n+        while (iterator.hasNext()) {\n+            final String s = (String)iterator.next();\n+            String s2 = properties.getProperty(s);\n+            final Matcher matcher = ChainedPropertyUtil.PROPERTY_VARIABLE_PATTERN.matcher(s2);\n             while (matcher.find()) {\n-                final String propertyVariableExpression = matcher.group();\n-                final String unresolvedPropertyName = getPropertyNameFromExpression(propertyVariableExpression);\n-                final String resolvedPropertyValue = properties.getProperty(unresolvedPropertyName);\n-                if (resolvedPropertyValue != null) {\n-                    propertyValue = propertyValue.replace(propertyVariableExpression, resolvedPropertyValue);\n-                    properties.setProperty(propertyName, propertyValue);\n+                final String group = matcher.group();\n+                final String property = properties.getProperty(getPropertyNameFromExpression(group));\n+                if (property != null) {\n+                    s2 = s2.replace(group, property);\n+                    properties.setProperty(s, s2);\n                 }\n             }\n-            if (allChainedPropertiesAreResolved(propertyValue)) {\n-                unresolvedPropertyIterator.remove();\n+            if (allChainedPropertiesAreResolved(s2)) {\n+                iterator.remove();\n             }\n-            if (!unresolvedPropertyIterator.hasNext()) {\n-                if (comparisonProperties.equals(properties)) {\n-                    throw new CheckstyleException(\"Undefined property: \" + unresolvedPropertyNames);\n+            if (!iterator.hasNext()) {\n+                if (properties2.equals(properties)) {\n+                    throw new CheckstyleException(\"Undefined property: \" + set);\n                 }\n-                comparisonProperties.putAll(properties);\n-                unresolvedPropertyIterator = unresolvedPropertyNames.iterator();\n+                properties2.putAll(properties);\n+                iterator = set.iterator();\n             }\n         }\n         return properties;\n     }\n     \n-    private static String getPropertyNameFromExpression(final String variableExpression) {\n-        final int propertyStartIndex = variableExpression.lastIndexOf(123) + 1;\n-        final int propertyEndIndex = variableExpression.lastIndexOf(125);\n-        return variableExpression.substring(propertyStartIndex, propertyEndIndex);\n+    private static String getPropertyNameFromExpression(final String s) {\n+        return s.substring(s.lastIndexOf(123) + 1, s.lastIndexOf(125));\n     }\n     \n-    private static boolean allChainedPropertiesAreResolved(final String propertyValue) {\n-        return !ChainedPropertyUtil.PROPERTY_VARIABLE_PATTERN.matcher(propertyValue).find();\n+    private static boolean allChainedPropertiesAreResolved(final String input) {\n+        return !ChainedPropertyUtil.PROPERTY_VARIABLE_PATTERN.matcher(input).find();\n     }\n     \n     static {\n         PROPERTY_VARIABLE_PATTERN = Pattern.compile(\"\\\\$\\\\{([^\\\\s}]+)}\");\n     }\n }\n"}]}
