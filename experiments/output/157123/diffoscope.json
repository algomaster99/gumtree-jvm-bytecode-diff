{"diffoscope-json-version": 1, "source1": "first/FTPClient.class", "source2": "second/FTPClient.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -90,14 +90,18 @@\n     private Duration controlKeepAliveReplyTimeout;\n     private int[] cslDebug;\n     private FTPClient.HostnameResolver passiveNatWorkaroundStrategy;\n     private boolean autodetectEncoding;\n     private HashMap<String, Set<String>> featuresMap;\n     private boolean ipAddressFromPasvResponse;\n     \n+    static {\n+        PARMS_PAT = Pattern.compile(\"(\\\\d{1,3},\\\\d{1,3},\\\\d{1,3},\\\\d{1,3}),(\\\\d{1,3}),(\\\\d{1,3})\");\n+    }\n+    \n     private static Properties getOverrideProperties() {\n         return FTPClient.PropertiesSingleton.PROPERTIES;\n     }\n     \n     static String parsePathname(final String reply) {\n         final String param = reply.substring(4);\n         if (param.startsWith(\"\\\"\")) {\n@@ -177,63 +181,69 @@\n     \n     protected Socket _openDataConnection_(final String command, final String arg) throws IOException {\n         if (this.dataConnectionMode != 0 && this.dataConnectionMode != 2) {\n             return null;\n         }\n         final boolean isInet6Address = this.getRemoteAddress() instanceof Inet6Address;\n         final int soTimeoutMillis = DurationUtils.toMillisInt(this.dataTimeout);\n-        Socket socket;\n-        if (this.dataConnectionMode == 0) {\n-            try (final ServerSocket server = this._serverSocketFactory_.createServerSocket(this.getActivePort(), 1, this.getHostAddress())) {\n-                if (isInet6Address) {\n-                    if (!FTPReply.isPositiveCompletion(this.eprt(this.getReportHostAddress(), server.getLocalPort()))) {\n-                        final Socket socket2 = null;\n+        Socket socket = null;\n+        Label_0540: {\n+            if (this.dataConnectionMode == 0) {\n+                Throwable t = null;\n+                try {\n+                    final ServerSocket server = this._serverSocketFactory_.createServerSocket(this.getActivePort(), 1, this.getHostAddress());\n+                    try {\n+                        if (isInet6Address) {\n+                            if (!FTPReply.isPositiveCompletion(this.eprt(this.getReportHostAddress(), server.getLocalPort()))) {\n+                                return null;\n+                            }\n+                        }\n+                        else if (!FTPReply.isPositiveCompletion(this.port(this.getReportHostAddress(), server.getLocalPort()))) {\n+                            return null;\n+                        }\n+                        if (this.restartOffset > 0L && !this.restart(this.restartOffset)) {\n+                            return null;\n+                        }\n+                        if (!FTPReply.isPositivePreliminary(this.sendCommand(command, arg))) {\n+                            return null;\n+                        }\n+                        if (soTimeoutMillis >= 0) {\n+                            server.setSoTimeout(soTimeoutMillis);\n+                        }\n+                        socket = server.accept();\n+                        if (soTimeoutMillis >= 0) {\n+                            socket.setSoTimeout(soTimeoutMillis);\n+                        }\n+                        if (this.receiveDataSocketBufferSize > 0) {\n+                            socket.setReceiveBufferSize(this.receiveDataSocketBufferSize);\n+                        }\n+                        if (this.sendDataSocketBufferSize > 0) {\n+                            socket.setSendBufferSize(this.sendDataSocketBufferSize);\n+                        }\n+                        break Label_0540;\n+                    }\n+                    finally {\n                         if (server != null) {\n                             server.close();\n                         }\n-                        return socket2;\n                     }\n                 }\n-                else if (!FTPReply.isPositiveCompletion(this.port(this.getReportHostAddress(), server.getLocalPort()))) {\n-                    final Socket socket3 = null;\n-                    if (server != null) {\n-                        server.close();\n+                finally {\n+                    if (t == null) {\n+                        final Throwable exception;\n+                        t = exception;\n                     }\n-                    return socket3;\n-                }\n-                if (this.restartOffset > 0L && !this.restart(this.restartOffset)) {\n-                    final Socket socket4 = null;\n-                    if (server != null) {\n-                        server.close();\n-                    }\n-                    return socket4;\n-                }\n-                if (!FTPReply.isPositivePreliminary(this.sendCommand(command, arg))) {\n-                    final Socket socket5 = null;\n-                    if (server != null) {\n-                        server.close();\n+                    else {\n+                        final Throwable exception;\n+                        if (t != exception) {\n+                            t.addSuppressed(exception);\n+                        }\n                     }\n-                    return socket5;\n-                }\n-                if (soTimeoutMillis >= 0) {\n-                    server.setSoTimeout(soTimeoutMillis);\n-                }\n-                socket = server.accept();\n-                if (soTimeoutMillis >= 0) {\n-                    socket.setSoTimeout(soTimeoutMillis);\n-                }\n-                if (this.receiveDataSocketBufferSize > 0) {\n-                    socket.setReceiveBufferSize(this.receiveDataSocketBufferSize);\n-                }\n-                if (this.sendDataSocketBufferSize > 0) {\n-                    socket.setSendBufferSize(this.sendDataSocketBufferSize);\n                 }\n             }\n-        }\n-        else {\n             final boolean attemptEPSV = this.isUseEPSVwithIPv4() || isInet6Address;\n             if (attemptEPSV && this.epsv() == 229) {\n                 this._parseExtendedPassiveModeReply(this._replyLines.get(0));\n             }\n             else {\n                 if (isInet6Address) {\n                     return null;\n@@ -305,26 +315,26 @@\n             final int oct1 = Integer.parseInt(m.group(2));\n             final int oct2 = Integer.parseInt(m.group(3));\n             pasvPort = (oct1 << 8 | oct2);\n         }\n         catch (final NumberFormatException e) {\n             throw new MalformedServerReplyException(\"Could not parse passive port information.\\nServer Reply: \" + reply);\n         }\n-        Label_0290: {\n+        Label_0278: {\n             if (this.isIpAddressFromPasvResponse()) {\n                 if (this.passiveNatWorkaroundStrategy == null) {\n-                    break Label_0290;\n+                    break Label_0278;\n                 }\n                 try {\n                     final String newPassiveHost = this.passiveNatWorkaroundStrategy.resolve(pasvHost);\n                     if (!pasvHost.equals(newPassiveHost)) {\n                         this.fireReplyReceived(0, \"[Replacing PASV mode reply address \" + this.passiveHost + \" with \" + newPassiveHost + \"]\\n\");\n                         pasvHost = newPassiveHost;\n                     }\n-                    break Label_0290;\n+                    break Label_0278;\n                 }\n                 catch (final UnknownHostException e2) {\n                     throw new MalformedServerReplyException(\"Could not parse passive host information.\\nServer Reply: \" + reply);\n                 }\n             }\n             if (this._socket_ == null) {\n                 pasvHost = null;\n@@ -356,14 +366,15 @@\n                     csl = new FTPClient.CSL(this, this.controlKeepAliveTimeout, this.controlKeepAliveReplyTimeout);\n                 }\n                 Util.copyStream(input, local, this.getBufferSize(), -1L, this.mergeListeners((CopyStreamListener)csl), false);\n             }\n             finally {\n                 Util.closeQuietly((Closeable)input);\n             }\n+            Util.closeQuietly((Closeable)input);\n             return this.completePendingCommand();\n         }\n         finally {\n             Util.closeQuietly(socket);\n             if (csl != null) {\n                 this.cslDebug = csl.cleanUp();\n             }\n@@ -476,19 +487,19 @@\n     \n     public void configure(final FTPClientConfig config) {\n         this.configuration = config;\n     }\n     \n     void createParser(final String parserKey) throws IOException {\n         if (this.entryParser == null || (parserKey != null && !this.entryParserKey.equals(parserKey))) {\n-            if (null != parserKey) {\n+            if (parserKey != null) {\n                 this.entryParser = this.parserFactory.createFileEntryParser(parserKey);\n                 this.entryParserKey = parserKey;\n             }\n-            else if (null != this.configuration && this.configuration.getServerSystemKey().length() > 0) {\n+            else if (this.configuration != null && this.configuration.getServerSystemKey().length() > 0) {\n                 this.entryParser = this.parserFactory.createFileEntryParser(this.configuration);\n                 this.entryParserKey = this.configuration.getServerSystemKey();\n             }\n             else {\n                 String systemType = System.getProperty(\"org.apache.commons.net.ftp.systemType\");\n                 if (systemType == null) {\n                     systemType = this.getSystemType();\n@@ -496,15 +507,15 @@\n                     if (override != null) {\n                         final String newType = override.getProperty(systemType);\n                         if (newType != null) {\n                             systemType = newType;\n                         }\n                     }\n                 }\n-                if (null != this.configuration) {\n+                if (this.configuration != null) {\n                     this.entryParser = this.parserFactory.createFileEntryParser(new FTPClientConfig(systemType, this.configuration));\n                 }\n                 else {\n                     this.entryParser = this.parserFactory.createFileEntryParser(systemType);\n                 }\n                 this.entryParserKey = systemType;\n             }\n@@ -843,14 +854,15 @@\n         }\n         try {\n             engine.readServerList(socket.getInputStream(), this.getControlEncoding());\n         }\n         finally {\n             Util.closeQuietly(socket);\n         }\n+        Util.closeQuietly(socket);\n         this.completePendingCommand();\n         return engine;\n     }\n     \n     public FTPListParseEngine initiateListParsing(final String pathname) throws IOException {\n         return this.initiateListParsing((String)null, pathname);\n     }\n@@ -873,14 +885,16 @@\n         try {\n             engine.readServerList(socket.getInputStream(), this.getControlEncoding());\n         }\n         finally {\n             Util.closeQuietly(socket);\n             this.completePendingCommand();\n         }\n+        Util.closeQuietly(socket);\n+        this.completePendingCommand();\n         return engine;\n     }\n     \n     public boolean isIpAddressFromPasvResponse() {\n         return this.ipAddressFromPasvResponse;\n     }\n     \n@@ -922,26 +936,54 @@\n     \n     public String[] listNames() throws IOException {\n         return this.listNames(null);\n     }\n     \n     public String[] listNames(final String pathname) throws IOException {\n         final ArrayList<String> results = new ArrayList<String>();\n-        try (final Socket socket = this._openDataConnection_(FTPCmd.NLST, this.getListArguments(pathname))) {\n-            if (socket == null) {\n-                final String[] array = null;\n+        Throwable t = null;\n+        try {\n+            final Socket socket = this._openDataConnection_(FTPCmd.NLST, this.getListArguments(pathname));\n+            try {\n+                if (socket == null) {\n+                    return null;\n+                }\n+                try {\n+                    final BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), this.getControlEncoding()));\n+                    try {\n+                        String line;\n+                        while ((line = reader.readLine()) != null) {\n+                            results.add(line);\n+                        }\n+                    }\n+                    finally {\n+                        if (reader != null) {\n+                            reader.close();\n+                        }\n+                    }\n+                }\n+                finally {\n+                    return;\n+                }\n+            }\n+            finally {\n                 if (socket != null) {\n                     socket.close();\n                 }\n-                return array;\n             }\n-            try (final BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), this.getControlEncoding()))) {\n-                String line;\n-                while ((line = reader.readLine()) != null) {\n-                    results.add(line);\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n                 }\n             }\n         }\n         if (this.completePendingCommand()) {\n             return results.toArray(NetConstants.EMPTY_STRING_ARRAY);\n         }\n         return null;\n@@ -1278,12 +1320,8 @@\n     public OutputStream storeUniqueFileStream(final String remote) throws IOException {\n         return this.storeFileStream(FTPCmd.STOU, remote);\n     }\n     \n     public boolean structureMount(final String pathname) throws IOException {\n         return FTPReply.isPositiveCompletion(this.smnt(pathname));\n     }\n-    \n-    static {\n-        PARMS_PAT = Pattern.compile(\"(\\\\d{1,3},\\\\d{1,3},\\\\d{1,3},\\\\d{1,3}),(\\\\d{1,3}),(\\\\d{1,3})\");\n-    }\n }\n"}]}
