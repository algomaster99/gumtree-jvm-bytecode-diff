{"diffoscope-json-version": 1, "source1": "first/Pack200Utils.class", "source2": "second/Pack200Utils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -32,25 +32,86 @@\n     public static void normalize(final File from, final File to, Map<String, String> props) throws IOException {\n         if (props == null) {\n             props = new HashMap<String, String>();\n         }\n         props.put(\"pack.segment.limit\", \"-1\");\n         final File tempFile = File.createTempFile(\"commons-compress\", \"pack200normalize\");\n         try {\n-            try (final OutputStream fos = Files.newOutputStream(tempFile.toPath(), new OpenOption[0]);\n-                 final JarFile jarFile = new JarFile(from)) {\n-                final Pack200.Packer packer = Pack200.newPacker();\n-                packer.properties().putAll(props);\n-                packer.pack(jarFile, fos);\n+            Throwable t = null;\n+            try {\n+                final OutputStream fos = Files.newOutputStream(tempFile.toPath(), new OpenOption[0]);\n+                try {\n+                    final JarFile jarFile = new JarFile(from);\n+                    try {\n+                        final Pack200.Packer packer = Pack200.newPacker();\n+                        packer.properties().putAll(props);\n+                        packer.pack(jarFile, fos);\n+                    }\n+                    finally {\n+                        if (jarFile != null) {\n+                            jarFile.close();\n+                        }\n+                    }\n+                    if (fos != null) {\n+                        fos.close();\n+                    }\n+                }\n+                finally {\n+                    if (t == null) {\n+                        final Throwable exception;\n+                        t = exception;\n+                    }\n+                    else {\n+                        final Throwable exception;\n+                        if (t != exception) {\n+                            t.addSuppressed(exception);\n+                        }\n+                    }\n+                    if (fos != null) {\n+                        fos.close();\n+                    }\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception2;\n+                    t = exception2;\n+                }\n+                else {\n+                    final Throwable exception2;\n+                    if (t != exception2) {\n+                        t.addSuppressed(exception2);\n+                    }\n+                }\n             }\n             final Pack200.Unpacker unpacker = Pack200.newUnpacker();\n-            try (final JarOutputStream jos = new JarOutputStream(Files.newOutputStream(to.toPath(), new OpenOption[0]))) {\n-                unpacker.unpack(tempFile, jos);\n+            final Throwable t2 = null;\n+            try {\n+                final JarOutputStream jos = new JarOutputStream(Files.newOutputStream(to.toPath(), new OpenOption[0]));\n+                try {\n+                    unpacker.unpack(tempFile, jos);\n+                }\n+                finally {\n+                    if (jos != null) {\n+                        jos.close();\n+                    }\n+                }\n+            }\n+            finally {\n+                if (t2 != null) {\n+                    final Throwable exception3;\n+                    if (t2 != exception3) {\n+                        t2.addSuppressed(exception3);\n+                    }\n+                }\n             }\n         }\n         finally {\n             if (!tempFile.delete()) {\n                 tempFile.deleteOnExit();\n             }\n         }\n+        if (!tempFile.delete()) {\n+            tempFile.deleteOnExit();\n+        }\n     }\n }\n"}]}
