{"diffoscope-json-version": 1, "source1": "first/ConstantHTML.class", "source2": "second/ConstantHTML.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -29,40 +29,61 @@\n     \n     ConstantHTML(final String dir, final String className, final String classPackage, final Method[] methods, final ConstantPool constantPool, final Charset charset) throws FileNotFoundException, UnsupportedEncodingException {\n         this.className = className;\n         this.classPackage = classPackage;\n         this.constantPool = constantPool;\n         this.methods = methods;\n         this.constants = constantPool.getConstantPool();\n-        try (final PrintWriter newPrintWriter = new PrintWriter(dir + className + \"_cp.html\", charset.name())) {\n-            this.printWriter = newPrintWriter;\n-            (this.constantRef = new String[this.constants.length])[0] = \"&lt;unknown&gt;\";\n-            this.printWriter.print(\"<HTML><head><meta charset=\\\"\");\n-            this.printWriter.print(charset.name());\n-            this.printWriter.println(\"\\\"></head>\");\n-            this.printWriter.println(\"<BODY BGCOLOR=\\\"#C0C0C0\\\"><TABLE BORDER=0>\");\n-            for (int i = 1; i < this.constants.length; ++i) {\n-                if (i % 2 == 0) {\n-                    this.printWriter.print(\"<TR BGCOLOR=\\\"#C0C0C0\\\"><TD>\");\n+        Throwable t = null;\n+        try {\n+            final PrintWriter newPrintWriter = new PrintWriter(String.valueOf(dir) + className + \"_cp.html\", charset.name());\n+            try {\n+                this.printWriter = newPrintWriter;\n+                (this.constantRef = new String[this.constants.length])[0] = \"&lt;unknown&gt;\";\n+                this.printWriter.print(\"<HTML><head><meta charset=\\\"\");\n+                this.printWriter.print(charset.name());\n+                this.printWriter.println(\"\\\"></head>\");\n+                this.printWriter.println(\"<BODY BGCOLOR=\\\"#C0C0C0\\\"><TABLE BORDER=0>\");\n+                for (int i = 1; i < this.constants.length; ++i) {\n+                    if (i % 2 == 0) {\n+                        this.printWriter.print(\"<TR BGCOLOR=\\\"#C0C0C0\\\"><TD>\");\n+                    }\n+                    else {\n+                        this.printWriter.print(\"<TR BGCOLOR=\\\"#A0A0A0\\\"><TD>\");\n+                    }\n+                    if (this.constants[i] != null) {\n+                        this.writeConstant(i);\n+                    }\n+                    this.printWriter.print(\"</TD></TR>\\n\");\n                 }\n-                else {\n-                    this.printWriter.print(\"<TR BGCOLOR=\\\"#A0A0A0\\\"><TD>\");\n+                this.printWriter.println(\"</TABLE></BODY></HTML>\");\n+            }\n+            finally {\n+                if (newPrintWriter != null) {\n+                    newPrintWriter.close();\n                 }\n-                if (this.constants[i] != null) {\n-                    this.writeConstant(i);\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n                 }\n-                this.printWriter.print(\"</TD></TR>\\n\");\n             }\n-            this.printWriter.println(\"</TABLE></BODY></HTML>\");\n         }\n     }\n     \n     private int getMethodNumber(final String str) {\n         for (int i = 0; i < this.methods.length; ++i) {\n-            final String cmp = this.methods[i].getName() + this.methods[i].getSignature();\n+            final String cmp = String.valueOf(this.methods[i].getName()) + this.methods[i].getSignature();\n             if (cmp.equals(str)) {\n                 return i;\n             }\n         }\n         return -1;\n     }\n     \n@@ -88,15 +109,15 @@\n                     classIndex = c2.getClassIndex();\n                     nameIndex = c2.getNameAndTypeIndex();\n                 }\n                 final String methodName = this.constantPool.constantToString(nameIndex, (byte)12);\n                 final String htmlMethodName = Class2HTML.toHTML(methodName);\n                 final String methodClass = this.constantPool.constantToString(classIndex, (byte)7);\n                 String shortMethodClass = Utility.compactClassName(methodClass);\n-                shortMethodClass = Utility.compactClassName(shortMethodClass, this.classPackage + \".\", true);\n+                shortMethodClass = Utility.compactClassName(shortMethodClass, String.valueOf(this.classPackage) + \".\", true);\n                 final ConstantNameAndType c3 = (ConstantNameAndType)this.constantPool.getConstant(nameIndex, (byte)12, (Class)ConstantNameAndType.class);\n                 final String signature = this.constantPool.constantToString(c3.getSignatureIndex(), (byte)1);\n                 final String[] args = Utility.methodSignatureArgumentTypes(signature, false);\n                 final String type = Utility.methodSignatureReturnType(signature, false);\n                 final String retType = Class2HTML.referenceType(type);\n                 final StringBuilder buf = new StringBuilder(\"(\");\n                 for (int i = 0; i < args.length; ++i) {\n@@ -105,65 +126,65 @@\n                         buf.append(\",&nbsp;\");\n                     }\n                 }\n                 buf.append(\")\");\n                 final String argTypes = buf.toString();\n                 String ref;\n                 if (methodClass.equals(this.className)) {\n-                    ref = \"<A HREF=\\\"\" + this.className + \"_code.html#method\" + this.getMethodNumber(methodName + signature) + \"\\\" TARGET=Code>\" + htmlMethodName + \"</A>\";\n+                    ref = \"<A HREF=\\\"\" + this.className + \"_code.html#method\" + this.getMethodNumber(String.valueOf(methodName) + signature) + \"\\\" TARGET=Code>\" + htmlMethodName + \"</A>\";\n                 }\n                 else {\n-                    ref = \"<A HREF=\\\"\" + methodClass + \".html\\\" TARGET=_top>\" + shortMethodClass + \"</A>.\" + htmlMethodName;\n+                    ref = \"<A HREF=\\\"\" + methodClass + \".html\" + \"\\\" TARGET=_top>\" + shortMethodClass + \"</A>.\" + htmlMethodName;\n                 }\n-                this.constantRef[index] = retType + \"&nbsp;<A HREF=\\\"\" + this.className + \"_cp.html#cp\" + classIndex + \"\\\" TARGET=Constants>\" + shortMethodClass + \"</A>.<A HREF=\\\"\" + this.className + \"_cp.html#cp\" + index + \"\\\" TARGET=ConstantPool>\" + htmlMethodName + \"</A>&nbsp;\" + argTypes;\n-                this.printWriter.println(\"<P><TT>\" + retType + \"&nbsp;\" + ref + argTypes + \"&nbsp;</TT>\\n<UL><LI><A HREF=\\\"#cp\" + classIndex + \"\\\">Class index(\" + classIndex + \")</A>\\n<LI><A HREF=\\\"#cp\" + nameIndex + \"\\\">NameAndType index(\" + nameIndex + \")</A></UL>\");\n+                this.constantRef[index] = String.valueOf(retType) + \"&nbsp;<A HREF=\\\"\" + this.className + \"_cp.html#cp\" + classIndex + \"\\\" TARGET=Constants>\" + shortMethodClass + \"</A>.<A HREF=\\\"\" + this.className + \"_cp.html#cp\" + index + \"\\\" TARGET=ConstantPool>\" + htmlMethodName + \"</A>&nbsp;\" + argTypes;\n+                this.printWriter.println(\"<P><TT>\" + retType + \"&nbsp;\" + ref + argTypes + \"&nbsp;</TT>\\n<UL>\" + \"<LI><A HREF=\\\"#cp\" + classIndex + \"\\\">Class index(\" + classIndex + \")</A>\\n\" + \"<LI><A HREF=\\\"#cp\" + nameIndex + \"\\\">NameAndType index(\" + nameIndex + \")</A></UL>\");\n                 break;\n             }\n             case 9: {\n                 final ConstantFieldref c4 = (ConstantFieldref)this.constantPool.getConstant(index, (byte)9, (Class)ConstantFieldref.class);\n                 final int classIndex = c4.getClassIndex();\n                 final int nameIndex = c4.getNameAndTypeIndex();\n                 final String fieldClass = this.constantPool.constantToString(classIndex, (byte)7);\n                 String shortFieldClass = Utility.compactClassName(fieldClass);\n-                shortFieldClass = Utility.compactClassName(shortFieldClass, this.classPackage + \".\", true);\n+                shortFieldClass = Utility.compactClassName(shortFieldClass, String.valueOf(this.classPackage) + \".\", true);\n                 final String fieldName = this.constantPool.constantToString(nameIndex, (byte)12);\n                 String ref;\n                 if (fieldClass.equals(this.className)) {\n                     ref = \"<A HREF=\\\"\" + fieldClass + \"_methods.html#field\" + fieldName + \"\\\" TARGET=Methods>\" + fieldName + \"</A>\";\n                 }\n                 else {\n                     ref = \"<A HREF=\\\"\" + fieldClass + \".html\\\" TARGET=_top>\" + shortFieldClass + \"</A>.\" + fieldName + \"\\n\";\n                 }\n                 this.constantRef[index] = \"<A HREF=\\\"\" + this.className + \"_cp.html#cp\" + classIndex + \"\\\" TARGET=Constants>\" + shortFieldClass + \"</A>.<A HREF=\\\"\" + this.className + \"_cp.html#cp\" + index + \"\\\" TARGET=ConstantPool>\" + fieldName + \"</A>\";\n-                this.printWriter.println(\"<P><TT>\" + ref + \"</TT><BR>\\n<UL><LI><A HREF=\\\"#cp\" + classIndex + \"\\\">Class(\" + classIndex + \")</A><BR>\\n<LI><A HREF=\\\"#cp\" + nameIndex + \"\\\">NameAndType(\" + nameIndex + \")</A></UL>\");\n+                this.printWriter.println(\"<P><TT>\" + ref + \"</TT><BR>\\n\" + \"<UL>\" + \"<LI><A HREF=\\\"#cp\" + classIndex + \"\\\">Class(\" + classIndex + \")</A><BR>\\n\" + \"<LI><A HREF=\\\"#cp\" + nameIndex + \"\\\">NameAndType(\" + nameIndex + \")</A></UL>\");\n                 break;\n             }\n             case 7: {\n                 final ConstantClass c5 = (ConstantClass)this.constantPool.getConstant(index, (byte)7, (Class)ConstantClass.class);\n                 final int nameIndex = c5.getNameIndex();\n                 final String className2 = this.constantPool.constantToString(index, tag);\n                 String shortClassName = Utility.compactClassName(className2);\n-                shortClassName = Utility.compactClassName(shortClassName, this.classPackage + \".\", true);\n+                shortClassName = Utility.compactClassName(shortClassName, String.valueOf(this.classPackage) + \".\", true);\n                 final String ref = \"<A HREF=\\\"\" + className2 + \".html\\\" TARGET=_top>\" + shortClassName + \"</A>\";\n                 this.constantRef[index] = \"<A HREF=\\\"\" + this.className + \"_cp.html#cp\" + index + \"\\\" TARGET=ConstantPool>\" + shortClassName + \"</A>\";\n-                this.printWriter.println(\"<P><TT>\" + ref + \"</TT><UL><LI><A HREF=\\\"#cp\" + nameIndex + \"\\\">Name index(\" + nameIndex + \")</A></UL>\\n\");\n+                this.printWriter.println(\"<P><TT>\" + ref + \"</TT><UL>\" + \"<LI><A HREF=\\\"#cp\" + nameIndex + \"\\\">Name index(\" + nameIndex + \")</A></UL>\\n\");\n                 break;\n             }\n             case 8: {\n                 final ConstantString c6 = (ConstantString)this.constantPool.getConstant(index, (byte)8, (Class)ConstantString.class);\n                 final int nameIndex = c6.getStringIndex();\n                 final String str = Class2HTML.toHTML(this.constantPool.constantToString(index, tag));\n-                this.printWriter.println(\"<P><TT>\" + str + \"</TT><UL><LI><A HREF=\\\"#cp\" + nameIndex + \"\\\">Name index(\" + nameIndex + \")</A></UL>\\n\");\n+                this.printWriter.println(\"<P><TT>\" + str + \"</TT><UL>\" + \"<LI><A HREF=\\\"#cp\" + nameIndex + \"\\\">Name index(\" + nameIndex + \")</A></UL>\\n\");\n                 break;\n             }\n             case 12: {\n                 final ConstantNameAndType c7 = (ConstantNameAndType)this.constantPool.getConstant(index, (byte)12, (Class)ConstantNameAndType.class);\n                 final int nameIndex = c7.getNameIndex();\n                 final int signatureIndex = c7.getSignatureIndex();\n-                this.printWriter.println(\"<P><TT>\" + Class2HTML.toHTML(this.constantPool.constantToString(index, tag)) + \"</TT><UL><LI><A HREF=\\\"#cp\" + nameIndex + \"\\\">Name index(\" + nameIndex + \")</A>\\n<LI><A HREF=\\\"#cp\" + signatureIndex + \"\\\">Signature index(\" + signatureIndex + \")</A></UL>\\n\");\n+                this.printWriter.println(\"<P><TT>\" + Class2HTML.toHTML(this.constantPool.constantToString(index, tag)) + \"</TT><UL>\" + \"<LI><A HREF=\\\"#cp\" + nameIndex + \"\\\">Name index(\" + nameIndex + \")</A>\\n\" + \"<LI><A HREF=\\\"#cp\" + signatureIndex + \"\\\">Signature index(\" + signatureIndex + \")</A></UL>\\n\");\n                 break;\n             }\n             default: {\n                 this.printWriter.println(\"<P><TT>\" + Class2HTML.toHTML(this.constantPool.constantToString(index, tag)) + \"</TT>\\n\");\n                 break;\n             }\n         }\n"}]}
