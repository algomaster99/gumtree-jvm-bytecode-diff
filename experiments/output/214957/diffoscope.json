{"diffoscope-json-version": 1, "source1": "first/Signature.class", "source2": "second/Signature.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,142 +5,141 @@\n import java.io.IOException;\n import java.io.DataInput;\n \n public final class Signature extends Attribute\n {\n     private int signature_index;\n     \n-    public Signature(final Signature c) {\n-        this(c.getNameIndex(), c.getLength(), c.getSignatureIndex(), c.getConstantPool());\n+    public Signature(final Signature signature) {\n+        this(signature.getNameIndex(), signature.getLength(), signature.getSignatureIndex(), signature.getConstantPool());\n     }\n     \n-    Signature(final int name_index, final int length, final DataInput input, final ConstantPool constant_pool) throws IOException {\n-        this(name_index, length, input.readUnsignedShort(), constant_pool);\n+    Signature(final int n, final int n2, final DataInput dataInput, final ConstantPool constantPool) throws IOException {\n+        this(n, n2, dataInput.readUnsignedShort(), constantPool);\n     }\n     \n-    public Signature(final int name_index, final int length, final int signature_index, final ConstantPool constant_pool) {\n-        super((byte)10, name_index, length, constant_pool);\n+    public Signature(final int n, final int n2, final int signature_index, final ConstantPool constantPool) {\n+        super((byte)10, n, n2, constantPool);\n         this.signature_index = signature_index;\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitSignature(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitSignature(this);\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        super.dump(file);\n-        file.writeShort(this.signature_index);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        super.dump(dataOutputStream);\n+        dataOutputStream.writeShort(this.signature_index);\n     }\n     \n     public int getSignatureIndex() {\n         return this.signature_index;\n     }\n     \n     public void setSignatureIndex(final int signature_index) {\n         this.signature_index = signature_index;\n     }\n     \n     public String getSignature() {\n-        final ConstantUtf8 c = (ConstantUtf8)super.getConstantPool().getConstant(this.signature_index, (byte)1);\n-        return c.getBytes();\n+        return ((ConstantUtf8)super.getConstantPool().getConstant(this.signature_index, (byte)1)).getBytes();\n     }\n     \n-    private static boolean identStart(final int ch) {\n-        return ch == 84 || ch == 76;\n+    private static boolean identStart(final int n) {\n+        return n == 84 || n == 76;\n     }\n     \n-    private static void matchIdent(final Signature.MyByteArrayInputStream in, final StringBuilder buf) {\n-        int ch;\n-        if ((ch = in.read()) == -1) {\n-            throw new RuntimeException(\"Illegal signature: \" + in.getData() + \" no ident, reaching EOF\");\n-        }\n-        if (!identStart(ch)) {\n-            final StringBuilder buf2 = new StringBuilder();\n-            int count = 1;\n-            while (Character.isJavaIdentifierPart((char)ch)) {\n-                buf2.append((char)ch);\n-                ++count;\n-                ch = in.read();\n-            }\n-            if (ch == 58) {\n-                in.skip((long)\"Ljava/lang/Object\".length());\n-                buf.append((CharSequence)buf2);\n-                ch = in.read();\n-                in.unread();\n+    private static void matchIdent(final Signature.MyByteArrayInputStream myByteArrayInputStream, final StringBuilder sb) {\n+        int n;\n+        if ((n = myByteArrayInputStream.read()) == -1) {\n+            throw new RuntimeException(\"Illegal signature: \" + myByteArrayInputStream.getData() + \" no ident, reaching EOF\");\n+        }\n+        if (!identStart(n)) {\n+            final StringBuilder s = new StringBuilder();\n+            int n2 = 1;\n+            while (Character.isJavaIdentifierPart((char)n)) {\n+                s.append((char)n);\n+                ++n2;\n+                n = myByteArrayInputStream.read();\n+            }\n+            if (n == 58) {\n+                myByteArrayInputStream.skip((long)\"Ljava/lang/Object\".length());\n+                sb.append((CharSequence)s);\n+                myByteArrayInputStream.read();\n+                myByteArrayInputStream.unread();\n             }\n             else {\n-                for (int i = 0; i < count; ++i) {\n-                    in.unread();\n+                for (int i = 0; i < n2; ++i) {\n+                    myByteArrayInputStream.unread();\n                 }\n             }\n             return;\n         }\n-        final StringBuilder buf2 = new StringBuilder();\n-        ch = in.read();\n+        final StringBuilder sb2 = new StringBuilder();\n+        int n3 = myByteArrayInputStream.read();\n         do {\n-            buf2.append((char)ch);\n-            ch = in.read();\n-        } while (ch != -1 && (Character.isJavaIdentifierPart((char)ch) || ch == 47));\n-        buf.append(buf2.toString().replace('/', '.'));\n-        if (ch != -1) {\n-            in.unread();\n+            sb2.append((char)n3);\n+            n3 = myByteArrayInputStream.read();\n+        } while (n3 != -1 && (Character.isJavaIdentifierPart((char)n3) || n3 == 47));\n+        sb.append(sb2.toString().replace('/', '.'));\n+        if (n3 != -1) {\n+            myByteArrayInputStream.unread();\n         }\n     }\n     \n-    private static void matchGJIdent(final Signature.MyByteArrayInputStream in, final StringBuilder buf) {\n-        matchIdent(in, buf);\n-        int ch = in.read();\n-        if (ch == 60 || ch == 40) {\n-            buf.append((char)ch);\n-            matchGJIdent(in, buf);\n-            while ((ch = in.read()) != 62 && ch != 41) {\n-                if (ch == -1) {\n-                    throw new RuntimeException(\"Illegal signature: \" + in.getData() + \" reaching EOF\");\n+    private static void matchGJIdent(final Signature.MyByteArrayInputStream myByteArrayInputStream, final StringBuilder sb) {\n+        matchIdent(myByteArrayInputStream, sb);\n+        final int read = myByteArrayInputStream.read();\n+        if (read == 60 || read == 40) {\n+            sb.append((char)read);\n+            matchGJIdent(myByteArrayInputStream, sb);\n+            int read2;\n+            while ((read2 = myByteArrayInputStream.read()) != 62 && read2 != 41) {\n+                if (read2 == -1) {\n+                    throw new RuntimeException(\"Illegal signature: \" + myByteArrayInputStream.getData() + \" reaching EOF\");\n                 }\n-                buf.append(\", \");\n-                in.unread();\n-                matchGJIdent(in, buf);\n+                sb.append(\", \");\n+                myByteArrayInputStream.unread();\n+                matchGJIdent(myByteArrayInputStream, sb);\n             }\n-            buf.append((char)ch);\n+            sb.append((char)read2);\n         }\n         else {\n-            in.unread();\n+            myByteArrayInputStream.unread();\n         }\n-        ch = in.read();\n-        if (identStart(ch)) {\n-            in.unread();\n-            matchGJIdent(in, buf);\n+        final int read3 = myByteArrayInputStream.read();\n+        if (identStart(read3)) {\n+            myByteArrayInputStream.unread();\n+            matchGJIdent(myByteArrayInputStream, sb);\n         }\n         else {\n-            if (ch == 41) {\n-                in.unread();\n+            if (read3 == 41) {\n+                myByteArrayInputStream.unread();\n                 return;\n             }\n-            if (ch != 59) {\n-                throw new RuntimeException(\"Illegal signature: \" + in.getData() + \" read \" + (char)ch);\n+            if (read3 != 59) {\n+                throw new RuntimeException(\"Illegal signature: \" + myByteArrayInputStream.getData() + \" read \" + (char)read3);\n             }\n         }\n     }\n     \n     public static String translate(final String s) {\n-        final StringBuilder buf = new StringBuilder();\n-        matchGJIdent(new Signature.MyByteArrayInputStream(s), buf);\n-        return buf.toString();\n+        final StringBuilder sb = new StringBuilder();\n+        matchGJIdent(new Signature.MyByteArrayInputStream(s), sb);\n+        return sb.toString();\n     }\n     \n     public static boolean isFormalParameterList(final String s) {\n         return s.startsWith(\"<\") && s.indexOf(58) > 0;\n     }\n     \n     public static boolean isActualParameterList(final String s) {\n         return s.startsWith(\"L\") && s.endsWith(\">;\");\n     }\n     \n     public String toString() {\n-        final String s = this.getSignature();\n-        return \"Signature: \" + s;\n+        return \"Signature: \" + this.getSignature();\n     }\n     \n-    public Attribute copy(final ConstantPool _constant_pool) {\n+    public Attribute copy(final ConstantPool constantPool) {\n         return (Attribute)this.clone();\n     }\n }\n"}]}
