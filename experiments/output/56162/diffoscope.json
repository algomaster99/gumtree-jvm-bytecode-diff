{"diffoscope-json-version": 1, "source1": "first/EventListenerList.class", "source2": "second/EventListenerList.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -39,24 +39,24 @@\n     \n     public void fire(final Event event) {\n         if (event == null) {\n             throw new IllegalArgumentException(\"Event to be fired must not be null!\");\n         }\n         final EventListenerList.EventListenerIterator<? extends Event> iterator = this.getEventListenerIterator((org.apache.commons.configuration2.event.EventType<? extends Event>)event.getEventType());\n         while (iterator.hasNext()) {\n-            EventListenerList.EventListenerIterator.access$000((EventListenerList.EventListenerIterator)iterator, event);\n+            EventListenerList.EventListenerIterator.access$1((EventListenerList.EventListenerIterator)iterator, event);\n         }\n     }\n     \n     public <T extends Event> Iterable<EventListener<? super T>> getEventListeners(final EventType<T> eventType) {\n-        return () -> this.getEventListenerIterator((org.apache.commons.configuration2.event.EventType<Event>)eventType);\n+        return () -> this.getEventListenerIterator((org.apache.commons.configuration2.event.EventType<Event>)eventType2);\n     }\n     \n     public <T extends Event> EventListenerList.EventListenerIterator<T> getEventListenerIterator(final EventType<T> eventType) {\n-        return (EventListenerList.EventListenerIterator<T>)new EventListenerList.EventListenerIterator((Iterator)this.listeners.iterator(), (EventType)eventType, (EventListenerList.EventListenerList$1)null);\n+        return (EventListenerList.EventListenerIterator<T>)new EventListenerList.EventListenerIterator((Iterator)this.listeners.iterator(), (EventType)eventType, (EventListenerList.EventListenerIterator)null);\n     }\n     \n     public List<EventListenerRegistrationData<?>> getRegistrations() {\n         return Collections.unmodifiableList((List<? extends EventListenerRegistrationData<?>>)this.listeners);\n     }\n     \n     public <T extends Event> List<EventListenerRegistrationData<? extends T>> getRegistrationsForSuperType(final EventType<T> eventType) {\n"}]}
