{"diffoscope-json-version": 1, "source1": "first/IMAPReply.class", "source2": "second/IMAPReply.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,49 +1,49 @@\n-  SHA-256 checksum 3fd247743cb3b2e7c00c8c1470cb6e3e5794c715a1fcc61f0d4db967ff6cd2ad\n+  SHA-256 checksum e73935dc2348dc4629484e6b69634112464f58ca24cd743c6c220f454bf49abb\n   Compiled from \"IMAPReply.java\"\n public final class org.apache.commons.net.imap.IMAPReply\n   minor version: 0\n   major version: 51\n   flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER\n   this_class: #2                          // org/apache/commons/net/imap/IMAPReply\n   super_class: #32                        // java/lang/Object\n   interfaces: 0, fields: 15, methods: 10, attributes: 1\n Constant pool:\n     #1 = Methodref          #32.#87       // java/lang/Object.\"<init>\":()V\n     #2 = Class              #88           // org/apache/commons/net/imap/IMAPReply\n     #3 = String             #89           // *\n-    #4 = Methodref          #90.#91       // java/lang/String.startsWith:(Ljava/lang/String;)Z\n-    #5 = String             #92           // +\n-    #6 = Fieldref           #2.#93        // org/apache/commons/net/imap/IMAPReply.TAGGED_PATTERN:Ljava/util/regex/Pattern;\n-    #7 = Methodref          #2.#94        // org/apache/commons/net/imap/IMAPReply.getReplyCode:(Ljava/lang/String;Ljava/util/regex/Pattern;)I\n-    #8 = Fieldref           #2.#95        // org/apache/commons/net/imap/IMAPReply.LITERAL_PATTERN:Ljava/util/regex/Pattern;\n-    #9 = Methodref          #96.#97       // java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-   #10 = Methodref          #98.#99       // java/util/regex/Matcher.find:()Z\n-   #11 = Methodref          #98.#100      // java/util/regex/Matcher.group:(I)Ljava/lang/String;\n-   #12 = Methodref          #101.#102     // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n-   #13 = Fieldref           #2.#103       // org/apache/commons/net/imap/IMAPReply.UNTAGGED_PATTERN:Ljava/util/regex/Pattern;\n-   #14 = Methodref          #2.#104       // org/apache/commons/net/imap/IMAPReply.isContinuation:(Ljava/lang/String;)Z\n-   #15 = Methodref          #98.#105      // java/util/regex/Matcher.matches:()Z\n+    #4 = Methodref          #80.#90       // java/lang/String.startsWith:(Ljava/lang/String;)Z\n+    #5 = String             #91           // +\n+    #6 = Fieldref           #2.#92        // org/apache/commons/net/imap/IMAPReply.TAGGED_PATTERN:Ljava/util/regex/Pattern;\n+    #7 = Methodref          #2.#93        // org/apache/commons/net/imap/IMAPReply.getReplyCode:(Ljava/lang/String;Ljava/util/regex/Pattern;)I\n+    #8 = Fieldref           #2.#94        // org/apache/commons/net/imap/IMAPReply.LITERAL_PATTERN:Ljava/util/regex/Pattern;\n+    #9 = Methodref          #95.#96       // java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+   #10 = Methodref          #75.#97       // java/util/regex/Matcher.find:()Z\n+   #11 = Methodref          #75.#98       // java/util/regex/Matcher.group:(I)Ljava/lang/String;\n+   #12 = Methodref          #99.#100      // java/lang/Integer.parseInt:(Ljava/lang/String;)I\n+   #13 = Fieldref           #2.#101       // org/apache/commons/net/imap/IMAPReply.UNTAGGED_PATTERN:Ljava/util/regex/Pattern;\n+   #14 = Methodref          #2.#102       // org/apache/commons/net/imap/IMAPReply.isContinuation:(Ljava/lang/String;)Z\n+   #15 = Methodref          #75.#103      // java/util/regex/Matcher.matches:()Z\n    #16 = String             #33           // OK\n-   #17 = Methodref          #90.#106      // java/lang/String.equals:(Ljava/lang/Object;)Z\n+   #17 = Methodref          #80.#104      // java/lang/String.equals:(Ljava/lang/Object;)Z\n    #18 = String             #39           // BAD\n    #19 = String             #37           // NO\n-   #20 = Class              #107          // org/apache/commons/net/MalformedServerReplyException\n-   #21 = Class              #108          // java/lang/StringBuilder\n+   #20 = Class              #105          // org/apache/commons/net/MalformedServerReplyException\n+   #21 = Class              #106          // java/lang/StringBuilder\n    #22 = Methodref          #21.#87       // java/lang/StringBuilder.\"<init>\":()V\n-   #23 = String             #109          // Received unexpected IMAP protocol response from server: \\'\n-   #24 = Methodref          #21.#110      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #25 = String             #111          // \\'.\n-   #26 = Methodref          #21.#112      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #27 = Methodref          #20.#113      // org/apache/commons/net/MalformedServerReplyException.\"<init>\":(Ljava/lang/String;)V\n-   #28 = String             #114          // ^\\\\w+ (\\\\S+).*\n-   #29 = Methodref          #96.#115      // java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n-   #30 = String             #116          // ^\\\\* (\\\\S+).*\n-   #31 = String             #117          // \\\\{(\\\\d+)\\\\}$\n-   #32 = Class              #118          // java/lang/Object\n+   #23 = String             #107          // Received unexpected IMAP protocol response from server: \\'\n+   #24 = Methodref          #21.#108      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #25 = String             #109          // \\'.\n+   #26 = Methodref          #21.#110      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #27 = Methodref          #20.#111      // org/apache/commons/net/MalformedServerReplyException.\"<init>\":(Ljava/lang/String;)V\n+   #28 = String             #112          // ^\\\\w+ (\\\\S+).*\n+   #29 = Methodref          #95.#113      // java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n+   #30 = String             #114          // ^\\\\* (\\\\S+).*\n+   #31 = String             #115          // \\\\{(\\\\d+)\\\\}$\n+   #32 = Class              #116          // java/lang/Object\n    #33 = Utf8               OK\n    #34 = Utf8               I\n    #35 = Utf8               ConstantValue\n    #36 = Integer            0\n    #37 = Utf8               NO\n    #38 = Integer            1\n    #39 = Utf8               BAD\n@@ -73,86 +73,84 @@\n    #63 = Utf8               isUntagged\n    #64 = Utf8               (Ljava/lang/String;)Z\n    #65 = Utf8               line\n    #66 = Utf8               isContinuation\n    #67 = Utf8               getReplyCode\n    #68 = Utf8               (Ljava/lang/String;)I\n    #69 = Utf8               Exceptions\n-   #70 = Class              #119          // java/io/IOException\n+   #70 = Class              #117          // java/io/IOException\n    #71 = Utf8               literalCount\n    #72 = Utf8               m\n    #73 = Utf8               Ljava/util/regex/Matcher;\n    #74 = Utf8               StackMapTable\n-   #75 = Class              #120          // java/util/regex/Matcher\n+   #75 = Class              #118          // java/util/regex/Matcher\n    #76 = Utf8               getUntaggedReplyCode\n    #77 = Utf8               (Ljava/lang/String;Ljava/util/regex/Pattern;)I\n    #78 = Utf8               code\n    #79 = Utf8               pattern\n-   #80 = Class              #121          // java/lang/String\n+   #80 = Class              #119          // java/lang/String\n    #81 = Utf8               isSuccess\n    #82 = Utf8               (I)Z\n    #83 = Utf8               replyCode\n    #84 = Utf8               <clinit>\n    #85 = Utf8               SourceFile\n    #86 = Utf8               IMAPReply.java\n    #87 = NameAndType        #56:#57       // \"<init>\":()V\n    #88 = Utf8               org/apache/commons/net/imap/IMAPReply\n    #89 = Utf8               *\n-   #90 = Class              #121          // java/lang/String\n-   #91 = NameAndType        #122:#64      // startsWith:(Ljava/lang/String;)Z\n-   #92 = Utf8               +\n-   #93 = NameAndType        #51:#52       // TAGGED_PATTERN:Ljava/util/regex/Pattern;\n-   #94 = NameAndType        #67:#77       // getReplyCode:(Ljava/lang/String;Ljava/util/regex/Pattern;)I\n-   #95 = NameAndType        #55:#52       // LITERAL_PATTERN:Ljava/util/regex/Pattern;\n-   #96 = Class              #123          // java/util/regex/Pattern\n-   #97 = NameAndType        #124:#125     // matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-   #98 = Class              #120          // java/util/regex/Matcher\n-   #99 = NameAndType        #126:#127     // find:()Z\n-  #100 = NameAndType        #128:#129     // group:(I)Ljava/lang/String;\n-  #101 = Class              #130          // java/lang/Integer\n-  #102 = NameAndType        #131:#68      // parseInt:(Ljava/lang/String;)I\n-  #103 = NameAndType        #54:#52       // UNTAGGED_PATTERN:Ljava/util/regex/Pattern;\n-  #104 = NameAndType        #66:#64       // isContinuation:(Ljava/lang/String;)Z\n-  #105 = NameAndType        #132:#127     // matches:()Z\n-  #106 = NameAndType        #133:#134     // equals:(Ljava/lang/Object;)Z\n-  #107 = Utf8               org/apache/commons/net/MalformedServerReplyException\n-  #108 = Utf8               java/lang/StringBuilder\n-  #109 = Utf8               Received unexpected IMAP protocol response from server: \\'\n-  #110 = NameAndType        #135:#136     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #111 = Utf8               \\'.\n-  #112 = NameAndType        #137:#138     // toString:()Ljava/lang/String;\n-  #113 = NameAndType        #56:#139      // \"<init>\":(Ljava/lang/String;)V\n-  #114 = Utf8               ^\\\\w+ (\\\\S+).*\n-  #115 = NameAndType        #140:#141     // compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n-  #116 = Utf8               ^\\\\* (\\\\S+).*\n-  #117 = Utf8               \\\\{(\\\\d+)\\\\}$\n-  #118 = Utf8               java/lang/Object\n-  #119 = Utf8               java/io/IOException\n-  #120 = Utf8               java/util/regex/Matcher\n-  #121 = Utf8               java/lang/String\n-  #122 = Utf8               startsWith\n-  #123 = Utf8               java/util/regex/Pattern\n-  #124 = Utf8               matcher\n-  #125 = Utf8               (Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n-  #126 = Utf8               find\n-  #127 = Utf8               ()Z\n-  #128 = Utf8               group\n-  #129 = Utf8               (I)Ljava/lang/String;\n-  #130 = Utf8               java/lang/Integer\n-  #131 = Utf8               parseInt\n-  #132 = Utf8               matches\n-  #133 = Utf8               equals\n-  #134 = Utf8               (Ljava/lang/Object;)Z\n-  #135 = Utf8               append\n-  #136 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #137 = Utf8               toString\n-  #138 = Utf8               ()Ljava/lang/String;\n-  #139 = Utf8               (Ljava/lang/String;)V\n-  #140 = Utf8               compile\n-  #141 = Utf8               (Ljava/lang/String;)Ljava/util/regex/Pattern;\n+   #90 = NameAndType        #120:#64      // startsWith:(Ljava/lang/String;)Z\n+   #91 = Utf8               +\n+   #92 = NameAndType        #51:#52       // TAGGED_PATTERN:Ljava/util/regex/Pattern;\n+   #93 = NameAndType        #67:#77       // getReplyCode:(Ljava/lang/String;Ljava/util/regex/Pattern;)I\n+   #94 = NameAndType        #55:#52       // LITERAL_PATTERN:Ljava/util/regex/Pattern;\n+   #95 = Class              #121          // java/util/regex/Pattern\n+   #96 = NameAndType        #122:#123     // matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+   #97 = NameAndType        #124:#125     // find:()Z\n+   #98 = NameAndType        #126:#127     // group:(I)Ljava/lang/String;\n+   #99 = Class              #128          // java/lang/Integer\n+  #100 = NameAndType        #129:#68      // parseInt:(Ljava/lang/String;)I\n+  #101 = NameAndType        #54:#52       // UNTAGGED_PATTERN:Ljava/util/regex/Pattern;\n+  #102 = NameAndType        #66:#64       // isContinuation:(Ljava/lang/String;)Z\n+  #103 = NameAndType        #130:#125     // matches:()Z\n+  #104 = NameAndType        #131:#132     // equals:(Ljava/lang/Object;)Z\n+  #105 = Utf8               org/apache/commons/net/MalformedServerReplyException\n+  #106 = Utf8               java/lang/StringBuilder\n+  #107 = Utf8               Received unexpected IMAP protocol response from server: \\'\n+  #108 = NameAndType        #133:#134     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #109 = Utf8               \\'.\n+  #110 = NameAndType        #135:#136     // toString:()Ljava/lang/String;\n+  #111 = NameAndType        #56:#137      // \"<init>\":(Ljava/lang/String;)V\n+  #112 = Utf8               ^\\\\w+ (\\\\S+).*\n+  #113 = NameAndType        #138:#139     // compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;\n+  #114 = Utf8               ^\\\\* (\\\\S+).*\n+  #115 = Utf8               \\\\{(\\\\d+)\\\\}$\n+  #116 = Utf8               java/lang/Object\n+  #117 = Utf8               java/io/IOException\n+  #118 = Utf8               java/util/regex/Matcher\n+  #119 = Utf8               java/lang/String\n+  #120 = Utf8               startsWith\n+  #121 = Utf8               java/util/regex/Pattern\n+  #122 = Utf8               matcher\n+  #123 = Utf8               (Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;\n+  #124 = Utf8               find\n+  #125 = Utf8               ()Z\n+  #126 = Utf8               group\n+  #127 = Utf8               (I)Ljava/lang/String;\n+  #128 = Utf8               java/lang/Integer\n+  #129 = Utf8               parseInt\n+  #130 = Utf8               matches\n+  #131 = Utf8               equals\n+  #132 = Utf8               (Ljava/lang/Object;)Z\n+  #133 = Utf8               append\n+  #134 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #135 = Utf8               toString\n+  #136 = Utf8               ()Ljava/lang/String;\n+  #137 = Utf8               (Ljava/lang/String;)V\n+  #138 = Utf8               compile\n+  #139 = Utf8               (Ljava/lang/String;)Ljava/util/regex/Pattern;\n {\n   public static final int OK = 0;\n     descriptor: I\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 0\n \n   public static final int NO = 1;\n"}]}
