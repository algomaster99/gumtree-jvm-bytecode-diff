{"diffoscope-json-version": 1, "source1": "first/Lexer.class", "source2": "second/Lexer.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,293 +1,293 @@\n-  SHA-256 checksum 0e1b8577593e77db81269be0bee19c47f607f1f69b386be33a3673a0b23956f1\n+  SHA-256 checksum 9dc3e4b1c185fb45466cdc3827d91e8748bc8f2a2a5b7b6554272822b5fc4978\n   Compiled from \"Lexer.java\"\n final class org.apache.commons.csv.Lexer implements java.io.Closeable\n   minor version: 0\n   major version: 52\n   flags: (0x0030) ACC_FINAL, ACC_SUPER\n-  this_class: #27                         // org/apache/commons/csv/Lexer\n-  super_class: #80                        // java/lang/Object\n+  this_class: #10                         // org/apache/commons/csv/Lexer\n+  super_class: #4                         // java/lang/Object\n   interfaces: 1, fields: 13, methods: 22, attributes: 2\n Constant pool:\n-    #1 = Class              #141          // org/apache/commons/csv/Constants\n-    #2 = Methodref          #80.#142      // java/lang/Object.\"<init>\":()V\n-    #3 = Fieldref           #27.#143      // org/apache/commons/csv/Lexer.reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-    #4 = Methodref          #144.#145     // org/apache/commons/csv/CSVFormat.getDelimiterString:()Ljava/lang/String;\n-    #5 = Methodref          #129.#146     // java/lang/String.toCharArray:()[C\n-    #6 = Fieldref           #27.#147      // org/apache/commons/csv/Lexer.delimiter:[C\n-    #7 = Methodref          #144.#148     // org/apache/commons/csv/CSVFormat.getEscapeCharacter:()Ljava/lang/Character;\n-    #8 = Methodref          #27.#149      // org/apache/commons/csv/Lexer.mapNullToDisabled:(Ljava/lang/Character;)C\n-    #9 = Fieldref           #27.#150      // org/apache/commons/csv/Lexer.escape:C\n-   #10 = Methodref          #144.#151     // org/apache/commons/csv/CSVFormat.getQuoteCharacter:()Ljava/lang/Character;\n-   #11 = Fieldref           #27.#152      // org/apache/commons/csv/Lexer.quoteChar:C\n-   #12 = Methodref          #144.#153     // org/apache/commons/csv/CSVFormat.getCommentMarker:()Ljava/lang/Character;\n-   #13 = Fieldref           #27.#154      // org/apache/commons/csv/Lexer.commentStart:C\n-   #14 = Methodref          #144.#155     // org/apache/commons/csv/CSVFormat.getIgnoreSurroundingSpaces:()Z\n-   #15 = Fieldref           #27.#156      // org/apache/commons/csv/Lexer.ignoreSurroundingSpaces:Z\n-   #16 = Methodref          #144.#157     // org/apache/commons/csv/CSVFormat.getIgnoreEmptyLines:()Z\n-   #17 = Fieldref           #27.#158      // org/apache/commons/csv/Lexer.ignoreEmptyLines:Z\n-   #18 = Fieldref           #27.#159      // org/apache/commons/csv/Lexer.delimiterBuf:[C\n-   #19 = Fieldref           #27.#160      // org/apache/commons/csv/Lexer.escapeDelimiterBuf:[C\n-   #20 = Methodref          #161.#162     // org/apache/commons/csv/ExtendedBufferedReader.close:()V\n-   #21 = Methodref          #161.#163     // org/apache/commons/csv/ExtendedBufferedReader.getPosition:()J\n-   #22 = Methodref          #161.#164     // org/apache/commons/csv/ExtendedBufferedReader.getCurrentLineNumber:()J\n-   #23 = Fieldref           #27.#165      // org/apache/commons/csv/Lexer.firstEol:Ljava/lang/String;\n-   #24 = Methodref          #161.#166     // org/apache/commons/csv/ExtendedBufferedReader.isClosed:()Z\n-   #25 = Methodref          #161.#167     // org/apache/commons/csv/ExtendedBufferedReader.lookAhead:([C)[C\n-   #26 = Methodref          #161.#168     // org/apache/commons/csv/ExtendedBufferedReader.read:([CII)I\n-   #27 = Class              #169          // org/apache/commons/csv/Lexer\n-   #28 = Integer            65534\n-   #29 = Methodref          #170.#171     // java/lang/Character.charValue:()C\n-   #30 = Methodref          #161.#172     // org/apache/commons/csv/ExtendedBufferedReader.getLastChar:()I\n-   #31 = Methodref          #161.#173     // org/apache/commons/csv/ExtendedBufferedReader.read:()I\n-   #32 = Methodref          #27.#174      // org/apache/commons/csv/Lexer.readEndOfLine:(I)Z\n-   #33 = Methodref          #27.#175      // org/apache/commons/csv/Lexer.isStartOfLine:(I)Z\n-   #34 = Methodref          #27.#176      // org/apache/commons/csv/Lexer.isEndOfFile:(I)Z\n-   #35 = Fieldref           #177.#178     // org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n-   #36 = Fieldref           #179.#180     // org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n-   #37 = Methodref          #27.#181      // org/apache/commons/csv/Lexer.isDelimiter:(I)Z\n-   #38 = Methodref          #27.#182      // org/apache/commons/csv/Lexer.isCommentStart:(I)Z\n-   #39 = Methodref          #161.#183     // org/apache/commons/csv/ExtendedBufferedReader.readLine:()Ljava/lang/String;\n-   #40 = Methodref          #129.#184     // java/lang/String.trim:()Ljava/lang/String;\n-   #41 = Fieldref           #179.#185     // org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n-   #42 = Methodref          #61.#186      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #43 = Fieldref           #177.#187     // org/apache/commons/csv/Token$Type.COMMENT:Lorg/apache/commons/csv/Token$Type;\n-   #44 = Fieldref           #177.#188     // org/apache/commons/csv/Token$Type.INVALID:Lorg/apache/commons/csv/Token$Type;\n-   #45 = Methodref          #170.#189     // java/lang/Character.isWhitespace:(C)Z\n-   #46 = Fieldref           #177.#190     // org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n-   #47 = Fieldref           #177.#191     // org/apache/commons/csv/Token$Type.EORECORD:Lorg/apache/commons/csv/Token$Type;\n-   #48 = Methodref          #27.#192      // org/apache/commons/csv/Lexer.isQuoteChar:(I)Z\n-   #49 = Methodref          #27.#193      // org/apache/commons/csv/Lexer.parseEncapsulatedToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n-   #50 = Fieldref           #179.#194     // org/apache/commons/csv/Token.isReady:Z\n-   #51 = Methodref          #27.#195      // org/apache/commons/csv/Lexer.parseSimpleToken:(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;\n-   #52 = Fieldref           #179.#196     // org/apache/commons/csv/Token.isQuoted:Z\n-   #53 = Methodref          #27.#164      // org/apache/commons/csv/Lexer.getCurrentLineNumber:()J\n-   #54 = Methodref          #27.#197      // org/apache/commons/csv/Lexer.isEscape:(I)Z\n-   #55 = Methodref          #27.#198      // org/apache/commons/csv/Lexer.isEscapeDelimiter:()Z\n-   #56 = Methodref          #61.#199      // java/lang/StringBuilder.append:([C)Ljava/lang/StringBuilder;\n-   #57 = Methodref          #27.#200      // org/apache/commons/csv/Lexer.readEscape:()I\n-   #58 = Methodref          #61.#201      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n-   #59 = Methodref          #161.#202     // org/apache/commons/csv/ExtendedBufferedReader.lookAhead:()I\n-   #60 = Class              #203          // java/io/IOException\n-   #61 = Class              #204          // java/lang/StringBuilder\n-   #62 = Methodref          #61.#142      // java/lang/StringBuilder.\"<init>\":()V\n-   #63 = String             #205          // (line\n-   #64 = Methodref          #61.#206      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #65 = String             #207          // ) invalid char between encapsulated token and delimiter\n-   #66 = Methodref          #61.#208      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #67 = Methodref          #60.#209      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #68 = String             #210          // (startline\n-   #69 = String             #211          // ) EOF reached before encapsulated token finished\n-   #70 = Methodref          #27.#212      // org/apache/commons/csv/Lexer.trimTrailingSpaces:(Ljava/lang/StringBuilder;)V\n-   #71 = String             #213          // \\r\\n\n-   #72 = Fieldref           #27.#214      // org/apache/commons/csv/Lexer.LF_STRING:Ljava/lang/String;\n-   #73 = Fieldref           #27.#215      // org/apache/commons/csv/Lexer.CR_STRING:Ljava/lang/String;\n-   #74 = String             #216          // EOF whilst processing escape sequence\n-   #75 = Methodref          #27.#217      // org/apache/commons/csv/Lexer.isMetaChar:(I)Z\n-   #76 = Methodref          #61.#218      // java/lang/StringBuilder.length:()I\n-   #77 = Methodref          #61.#219      // java/lang/StringBuilder.charAt:(I)C\n-   #78 = Methodref          #61.#220      // java/lang/StringBuilder.setLength:(I)V\n-   #79 = Methodref          #170.#221     // java/lang/Character.toString:(C)Ljava/lang/String;\n-   #80 = Class              #222          // java/lang/Object\n-   #81 = Class              #223          // java/io/Closeable\n-   #82 = Utf8               CR_STRING\n-   #83 = Utf8               Ljava/lang/String;\n-   #84 = Utf8               LF_STRING\n-   #85 = Utf8               DISABLED\n-   #86 = Utf8               C\n-   #87 = Utf8               ConstantValue\n-   #88 = Utf8               delimiter\n-   #89 = Utf8               [C\n-   #90 = Utf8               delimiterBuf\n-   #91 = Utf8               escapeDelimiterBuf\n-   #92 = Utf8               escape\n-   #93 = Utf8               quoteChar\n-   #94 = Utf8               commentStart\n-   #95 = Utf8               ignoreSurroundingSpaces\n-   #96 = Utf8               Z\n-   #97 = Utf8               ignoreEmptyLines\n-   #98 = Utf8               reader\n-   #99 = Utf8               Lorg/apache/commons/csv/ExtendedBufferedReader;\n-  #100 = Utf8               firstEol\n-  #101 = Utf8               <init>\n-  #102 = Utf8               (Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n-  #103 = Utf8               Code\n-  #104 = Utf8               LineNumberTable\n-  #105 = Utf8               close\n-  #106 = Utf8               ()V\n-  #107 = Utf8               Exceptions\n-  #108 = Utf8               getCharacterPosition\n-  #109 = Utf8               ()J\n-  #110 = Utf8               getCurrentLineNumber\n-  #111 = Utf8               getFirstEol\n-  #112 = Utf8               ()Ljava/lang/String;\n-  #113 = Utf8               isClosed\n-  #114 = Utf8               ()Z\n-  #115 = Utf8               isCommentStart\n-  #116 = Utf8               (I)Z\n-  #117 = Utf8               StackMapTable\n-  #118 = Utf8               isDelimiter\n-  #119 = Utf8               isEndOfFile\n-  #120 = Utf8               isEscape\n-  #121 = Utf8               isEscapeDelimiter\n-  #122 = Utf8               isMetaChar\n-  #123 = Utf8               isQuoteChar\n-  #124 = Utf8               isStartOfLine\n-  #125 = Utf8               mapNullToDisabled\n-  #126 = Utf8               (Ljava/lang/Character;)C\n-  #127 = Utf8               nextToken\n-  #128 = Utf8               (Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n-  #129 = Class              #224          // java/lang/String\n-  #130 = Utf8               parseEncapsulatedToken\n-  #131 = Utf8               parseSimpleToken\n-  #132 = Utf8               (Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;\n-  #133 = Utf8               readEndOfLine\n-  #134 = Utf8               readEscape\n-  #135 = Utf8               ()I\n-  #136 = Utf8               trimTrailingSpaces\n-  #137 = Utf8               (Ljava/lang/StringBuilder;)V\n-  #138 = Utf8               <clinit>\n-  #139 = Utf8               SourceFile\n-  #140 = Utf8               Lexer.java\n-  #141 = Utf8               org/apache/commons/csv/Constants\n-  #142 = NameAndType        #101:#106     // \"<init>\":()V\n-  #143 = NameAndType        #98:#99       // reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-  #144 = Class              #225          // org/apache/commons/csv/CSVFormat\n-  #145 = NameAndType        #226:#112     // getDelimiterString:()Ljava/lang/String;\n-  #146 = NameAndType        #227:#228     // toCharArray:()[C\n-  #147 = NameAndType        #88:#89       // delimiter:[C\n-  #148 = NameAndType        #229:#230     // getEscapeCharacter:()Ljava/lang/Character;\n-  #149 = NameAndType        #125:#126     // mapNullToDisabled:(Ljava/lang/Character;)C\n-  #150 = NameAndType        #92:#86       // escape:C\n-  #151 = NameAndType        #231:#230     // getQuoteCharacter:()Ljava/lang/Character;\n-  #152 = NameAndType        #93:#86       // quoteChar:C\n-  #153 = NameAndType        #232:#230     // getCommentMarker:()Ljava/lang/Character;\n-  #154 = NameAndType        #94:#86       // commentStart:C\n-  #155 = NameAndType        #233:#114     // getIgnoreSurroundingSpaces:()Z\n-  #156 = NameAndType        #95:#96       // ignoreSurroundingSpaces:Z\n-  #157 = NameAndType        #234:#114     // getIgnoreEmptyLines:()Z\n-  #158 = NameAndType        #97:#96       // ignoreEmptyLines:Z\n-  #159 = NameAndType        #90:#89       // delimiterBuf:[C\n-  #160 = NameAndType        #91:#89       // escapeDelimiterBuf:[C\n-  #161 = Class              #235          // org/apache/commons/csv/ExtendedBufferedReader\n-  #162 = NameAndType        #105:#106     // close:()V\n-  #163 = NameAndType        #236:#109     // getPosition:()J\n-  #164 = NameAndType        #110:#109     // getCurrentLineNumber:()J\n-  #165 = NameAndType        #100:#83      // firstEol:Ljava/lang/String;\n-  #166 = NameAndType        #113:#114     // isClosed:()Z\n-  #167 = NameAndType        #237:#238     // lookAhead:([C)[C\n-  #168 = NameAndType        #239:#240     // read:([CII)I\n-  #169 = Utf8               org/apache/commons/csv/Lexer\n-  #170 = Class              #241          // java/lang/Character\n-  #171 = NameAndType        #242:#243     // charValue:()C\n-  #172 = NameAndType        #244:#135     // getLastChar:()I\n-  #173 = NameAndType        #239:#135     // read:()I\n-  #174 = NameAndType        #133:#116     // readEndOfLine:(I)Z\n-  #175 = NameAndType        #124:#116     // isStartOfLine:(I)Z\n-  #176 = NameAndType        #119:#116     // isEndOfFile:(I)Z\n-  #177 = Class              #245          // org/apache/commons/csv/Token$Type\n-  #178 = NameAndType        #248:#249     // EOF:Lorg/apache/commons/csv/Token$Type;\n-  #179 = Class              #250          // org/apache/commons/csv/Token\n-  #180 = NameAndType        #251:#249     // type:Lorg/apache/commons/csv/Token$Type;\n-  #181 = NameAndType        #118:#116     // isDelimiter:(I)Z\n-  #182 = NameAndType        #115:#116     // isCommentStart:(I)Z\n-  #183 = NameAndType        #252:#112     // readLine:()Ljava/lang/String;\n-  #184 = NameAndType        #253:#112     // trim:()Ljava/lang/String;\n-  #185 = NameAndType        #254:#255     // content:Ljava/lang/StringBuilder;\n-  #186 = NameAndType        #256:#257     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #187 = NameAndType        #258:#249     // COMMENT:Lorg/apache/commons/csv/Token$Type;\n-  #188 = NameAndType        #259:#249     // INVALID:Lorg/apache/commons/csv/Token$Type;\n-  #189 = NameAndType        #260:#261     // isWhitespace:(C)Z\n-  #190 = NameAndType        #262:#249     // TOKEN:Lorg/apache/commons/csv/Token$Type;\n-  #191 = NameAndType        #263:#249     // EORECORD:Lorg/apache/commons/csv/Token$Type;\n-  #192 = NameAndType        #123:#116     // isQuoteChar:(I)Z\n-  #193 = NameAndType        #130:#128     // parseEncapsulatedToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n-  #194 = NameAndType        #264:#96      // isReady:Z\n-  #195 = NameAndType        #131:#132     // parseSimpleToken:(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;\n-  #196 = NameAndType        #265:#96      // isQuoted:Z\n-  #197 = NameAndType        #120:#116     // isEscape:(I)Z\n-  #198 = NameAndType        #121:#114     // isEscapeDelimiter:()Z\n-  #199 = NameAndType        #256:#266     // append:([C)Ljava/lang/StringBuilder;\n-  #200 = NameAndType        #134:#135     // readEscape:()I\n-  #201 = NameAndType        #256:#267     // append:(C)Ljava/lang/StringBuilder;\n-  #202 = NameAndType        #237:#135     // lookAhead:()I\n-  #203 = Utf8               java/io/IOException\n-  #204 = Utf8               java/lang/StringBuilder\n-  #205 = Utf8               (line\n-  #206 = NameAndType        #256:#268     // append:(J)Ljava/lang/StringBuilder;\n-  #207 = Utf8               ) invalid char between encapsulated token and delimiter\n-  #208 = NameAndType        #269:#112     // toString:()Ljava/lang/String;\n-  #209 = NameAndType        #101:#270     // \"<init>\":(Ljava/lang/String;)V\n-  #210 = Utf8               (startline\n-  #211 = Utf8               ) EOF reached before encapsulated token finished\n-  #212 = NameAndType        #136:#137     // trimTrailingSpaces:(Ljava/lang/StringBuilder;)V\n-  #213 = Utf8               \\r\\n\n-  #214 = NameAndType        #84:#83       // LF_STRING:Ljava/lang/String;\n-  #215 = NameAndType        #82:#83       // CR_STRING:Ljava/lang/String;\n-  #216 = Utf8               EOF whilst processing escape sequence\n-  #217 = NameAndType        #122:#116     // isMetaChar:(I)Z\n-  #218 = NameAndType        #271:#135     // length:()I\n-  #219 = NameAndType        #272:#273     // charAt:(I)C\n-  #220 = NameAndType        #274:#275     // setLength:(I)V\n-  #221 = NameAndType        #269:#276     // toString:(C)Ljava/lang/String;\n-  #222 = Utf8               java/lang/Object\n-  #223 = Utf8               java/io/Closeable\n-  #224 = Utf8               java/lang/String\n-  #225 = Utf8               org/apache/commons/csv/CSVFormat\n-  #226 = Utf8               getDelimiterString\n-  #227 = Utf8               toCharArray\n-  #228 = Utf8               ()[C\n-  #229 = Utf8               getEscapeCharacter\n-  #230 = Utf8               ()Ljava/lang/Character;\n-  #231 = Utf8               getQuoteCharacter\n-  #232 = Utf8               getCommentMarker\n-  #233 = Utf8               getIgnoreSurroundingSpaces\n-  #234 = Utf8               getIgnoreEmptyLines\n-  #235 = Utf8               org/apache/commons/csv/ExtendedBufferedReader\n-  #236 = Utf8               getPosition\n-  #237 = Utf8               lookAhead\n-  #238 = Utf8               ([C)[C\n-  #239 = Utf8               read\n-  #240 = Utf8               ([CII)I\n-  #241 = Utf8               java/lang/Character\n-  #242 = Utf8               charValue\n-  #243 = Utf8               ()C\n-  #244 = Utf8               getLastChar\n-  #245 = Utf8               org/apache/commons/csv/Token$Type\n-  #246 = Utf8               Type\n-  #247 = Utf8               InnerClasses\n-  #248 = Utf8               EOF\n-  #249 = Utf8               Lorg/apache/commons/csv/Token$Type;\n-  #250 = Utf8               org/apache/commons/csv/Token\n-  #251 = Utf8               type\n-  #252 = Utf8               readLine\n-  #253 = Utf8               trim\n-  #254 = Utf8               content\n-  #255 = Utf8               Ljava/lang/StringBuilder;\n-  #256 = Utf8               append\n-  #257 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #258 = Utf8               COMMENT\n-  #259 = Utf8               INVALID\n-  #260 = Utf8               isWhitespace\n-  #261 = Utf8               (C)Z\n-  #262 = Utf8               TOKEN\n-  #263 = Utf8               EORECORD\n-  #264 = Utf8               isReady\n-  #265 = Utf8               isQuoted\n-  #266 = Utf8               ([C)Ljava/lang/StringBuilder;\n-  #267 = Utf8               (C)Ljava/lang/StringBuilder;\n-  #268 = Utf8               (J)Ljava/lang/StringBuilder;\n-  #269 = Utf8               toString\n-  #270 = Utf8               (Ljava/lang/String;)V\n-  #271 = Utf8               length\n-  #272 = Utf8               charAt\n-  #273 = Utf8               (I)C\n-  #274 = Utf8               setLength\n-  #275 = Utf8               (I)V\n-  #276 = Utf8               (C)Ljava/lang/String;\n+    #1 = Class              #2            // org/apache/commons/csv/Constants\n+    #2 = Utf8               org/apache/commons/csv/Constants\n+    #3 = Methodref          #4.#5         // java/lang/Object.\"<init>\":()V\n+    #4 = Class              #6            // java/lang/Object\n+    #5 = NameAndType        #7:#8         // \"<init>\":()V\n+    #6 = Utf8               java/lang/Object\n+    #7 = Utf8               <init>\n+    #8 = Utf8               ()V\n+    #9 = Fieldref           #10.#11       // org/apache/commons/csv/Lexer.reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+   #10 = Class              #12           // org/apache/commons/csv/Lexer\n+   #11 = NameAndType        #13:#14       // reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+   #12 = Utf8               org/apache/commons/csv/Lexer\n+   #13 = Utf8               reader\n+   #14 = Utf8               Lorg/apache/commons/csv/ExtendedBufferedReader;\n+   #15 = Methodref          #16.#17       // org/apache/commons/csv/CSVFormat.getDelimiterString:()Ljava/lang/String;\n+   #16 = Class              #18           // org/apache/commons/csv/CSVFormat\n+   #17 = NameAndType        #19:#20       // getDelimiterString:()Ljava/lang/String;\n+   #18 = Utf8               org/apache/commons/csv/CSVFormat\n+   #19 = Utf8               getDelimiterString\n+   #20 = Utf8               ()Ljava/lang/String;\n+   #21 = Methodref          #22.#23       // java/lang/String.toCharArray:()[C\n+   #22 = Class              #24           // java/lang/String\n+   #23 = NameAndType        #25:#26       // toCharArray:()[C\n+   #24 = Utf8               java/lang/String\n+   #25 = Utf8               toCharArray\n+   #26 = Utf8               ()[C\n+   #27 = Fieldref           #10.#28       // org/apache/commons/csv/Lexer.delimiter:[C\n+   #28 = NameAndType        #29:#30       // delimiter:[C\n+   #29 = Utf8               delimiter\n+   #30 = Utf8               [C\n+   #31 = Methodref          #16.#32       // org/apache/commons/csv/CSVFormat.getEscapeCharacter:()Ljava/lang/Character;\n+   #32 = NameAndType        #33:#34       // getEscapeCharacter:()Ljava/lang/Character;\n+   #33 = Utf8               getEscapeCharacter\n+   #34 = Utf8               ()Ljava/lang/Character;\n+   #35 = Methodref          #10.#36       // org/apache/commons/csv/Lexer.mapNullToDisabled:(Ljava/lang/Character;)C\n+   #36 = NameAndType        #37:#38       // mapNullToDisabled:(Ljava/lang/Character;)C\n+   #37 = Utf8               mapNullToDisabled\n+   #38 = Utf8               (Ljava/lang/Character;)C\n+   #39 = Fieldref           #10.#40       // org/apache/commons/csv/Lexer.escape:C\n+   #40 = NameAndType        #41:#42       // escape:C\n+   #41 = Utf8               escape\n+   #42 = Utf8               C\n+   #43 = Methodref          #16.#44       // org/apache/commons/csv/CSVFormat.getQuoteCharacter:()Ljava/lang/Character;\n+   #44 = NameAndType        #45:#34       // getQuoteCharacter:()Ljava/lang/Character;\n+   #45 = Utf8               getQuoteCharacter\n+   #46 = Fieldref           #10.#47       // org/apache/commons/csv/Lexer.quoteChar:C\n+   #47 = NameAndType        #48:#42       // quoteChar:C\n+   #48 = Utf8               quoteChar\n+   #49 = Methodref          #16.#50       // org/apache/commons/csv/CSVFormat.getCommentMarker:()Ljava/lang/Character;\n+   #50 = NameAndType        #51:#34       // getCommentMarker:()Ljava/lang/Character;\n+   #51 = Utf8               getCommentMarker\n+   #52 = Fieldref           #10.#53       // org/apache/commons/csv/Lexer.commentStart:C\n+   #53 = NameAndType        #54:#42       // commentStart:C\n+   #54 = Utf8               commentStart\n+   #55 = Methodref          #16.#56       // org/apache/commons/csv/CSVFormat.getIgnoreSurroundingSpaces:()Z\n+   #56 = NameAndType        #57:#58       // getIgnoreSurroundingSpaces:()Z\n+   #57 = Utf8               getIgnoreSurroundingSpaces\n+   #58 = Utf8               ()Z\n+   #59 = Fieldref           #10.#60       // org/apache/commons/csv/Lexer.ignoreSurroundingSpaces:Z\n+   #60 = NameAndType        #61:#62       // ignoreSurroundingSpaces:Z\n+   #61 = Utf8               ignoreSurroundingSpaces\n+   #62 = Utf8               Z\n+   #63 = Methodref          #16.#64       // org/apache/commons/csv/CSVFormat.getIgnoreEmptyLines:()Z\n+   #64 = NameAndType        #65:#58       // getIgnoreEmptyLines:()Z\n+   #65 = Utf8               getIgnoreEmptyLines\n+   #66 = Fieldref           #10.#67       // org/apache/commons/csv/Lexer.ignoreEmptyLines:Z\n+   #67 = NameAndType        #68:#62       // ignoreEmptyLines:Z\n+   #68 = Utf8               ignoreEmptyLines\n+   #69 = Fieldref           #10.#70       // org/apache/commons/csv/Lexer.delimiterBuf:[C\n+   #70 = NameAndType        #71:#30       // delimiterBuf:[C\n+   #71 = Utf8               delimiterBuf\n+   #72 = Fieldref           #10.#73       // org/apache/commons/csv/Lexer.escapeDelimiterBuf:[C\n+   #73 = NameAndType        #74:#30       // escapeDelimiterBuf:[C\n+   #74 = Utf8               escapeDelimiterBuf\n+   #75 = Methodref          #76.#77       // org/apache/commons/csv/ExtendedBufferedReader.close:()V\n+   #76 = Class              #78           // org/apache/commons/csv/ExtendedBufferedReader\n+   #77 = NameAndType        #79:#8        // close:()V\n+   #78 = Utf8               org/apache/commons/csv/ExtendedBufferedReader\n+   #79 = Utf8               close\n+   #80 = Methodref          #76.#81       // org/apache/commons/csv/ExtendedBufferedReader.getPosition:()J\n+   #81 = NameAndType        #82:#83       // getPosition:()J\n+   #82 = Utf8               getPosition\n+   #83 = Utf8               ()J\n+   #84 = Methodref          #76.#85       // org/apache/commons/csv/ExtendedBufferedReader.getCurrentLineNumber:()J\n+   #85 = NameAndType        #86:#83       // getCurrentLineNumber:()J\n+   #86 = Utf8               getCurrentLineNumber\n+   #87 = Fieldref           #10.#88       // org/apache/commons/csv/Lexer.firstEol:Ljava/lang/String;\n+   #88 = NameAndType        #89:#90       // firstEol:Ljava/lang/String;\n+   #89 = Utf8               firstEol\n+   #90 = Utf8               Ljava/lang/String;\n+   #91 = Methodref          #76.#92       // org/apache/commons/csv/ExtendedBufferedReader.isClosed:()Z\n+   #92 = NameAndType        #93:#58       // isClosed:()Z\n+   #93 = Utf8               isClosed\n+   #94 = Methodref          #76.#95       // org/apache/commons/csv/ExtendedBufferedReader.lookAhead:([C)[C\n+   #95 = NameAndType        #96:#97       // lookAhead:([C)[C\n+   #96 = Utf8               lookAhead\n+   #97 = Utf8               ([C)[C\n+   #98 = Methodref          #76.#99       // org/apache/commons/csv/ExtendedBufferedReader.read:([CII)I\n+   #99 = NameAndType        #100:#101     // read:([CII)I\n+  #100 = Utf8               read\n+  #101 = Utf8               ([CII)I\n+  #102 = Integer            65534\n+  #103 = Methodref          #104.#105     // java/lang/Character.charValue:()C\n+  #104 = Class              #106          // java/lang/Character\n+  #105 = NameAndType        #107:#108     // charValue:()C\n+  #106 = Utf8               java/lang/Character\n+  #107 = Utf8               charValue\n+  #108 = Utf8               ()C\n+  #109 = Methodref          #76.#110      // org/apache/commons/csv/ExtendedBufferedReader.getLastChar:()I\n+  #110 = NameAndType        #111:#112     // getLastChar:()I\n+  #111 = Utf8               getLastChar\n+  #112 = Utf8               ()I\n+  #113 = Methodref          #76.#114      // org/apache/commons/csv/ExtendedBufferedReader.read:()I\n+  #114 = NameAndType        #100:#112     // read:()I\n+  #115 = Methodref          #10.#116      // org/apache/commons/csv/Lexer.readEndOfLine:(I)Z\n+  #116 = NameAndType        #117:#118     // readEndOfLine:(I)Z\n+  #117 = Utf8               readEndOfLine\n+  #118 = Utf8               (I)Z\n+  #119 = Methodref          #10.#120      // org/apache/commons/csv/Lexer.isStartOfLine:(I)Z\n+  #120 = NameAndType        #121:#118     // isStartOfLine:(I)Z\n+  #121 = Utf8               isStartOfLine\n+  #122 = Methodref          #10.#123      // org/apache/commons/csv/Lexer.isEndOfFile:(I)Z\n+  #123 = NameAndType        #124:#118     // isEndOfFile:(I)Z\n+  #124 = Utf8               isEndOfFile\n+  #125 = Fieldref           #126.#127     // org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n+  #126 = Class              #128          // org/apache/commons/csv/Token$Type\n+  #127 = NameAndType        #129:#130     // EOF:Lorg/apache/commons/csv/Token$Type;\n+  #128 = Utf8               org/apache/commons/csv/Token$Type\n+  #129 = Utf8               EOF\n+  #130 = Utf8               Lorg/apache/commons/csv/Token$Type;\n+  #131 = Fieldref           #132.#133     // org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+  #132 = Class              #134          // org/apache/commons/csv/Token\n+  #133 = NameAndType        #135:#130     // type:Lorg/apache/commons/csv/Token$Type;\n+  #134 = Utf8               org/apache/commons/csv/Token\n+  #135 = Utf8               type\n+  #136 = Methodref          #10.#137      // org/apache/commons/csv/Lexer.isDelimiter:(I)Z\n+  #137 = NameAndType        #138:#118     // isDelimiter:(I)Z\n+  #138 = Utf8               isDelimiter\n+  #139 = Methodref          #10.#140      // org/apache/commons/csv/Lexer.isCommentStart:(I)Z\n+  #140 = NameAndType        #141:#118     // isCommentStart:(I)Z\n+  #141 = Utf8               isCommentStart\n+  #142 = Methodref          #76.#143      // org/apache/commons/csv/ExtendedBufferedReader.readLine:()Ljava/lang/String;\n+  #143 = NameAndType        #144:#20      // readLine:()Ljava/lang/String;\n+  #144 = Utf8               readLine\n+  #145 = Methodref          #22.#146      // java/lang/String.trim:()Ljava/lang/String;\n+  #146 = NameAndType        #147:#20      // trim:()Ljava/lang/String;\n+  #147 = Utf8               trim\n+  #148 = Fieldref           #132.#149     // org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+  #149 = NameAndType        #150:#151     // content:Ljava/lang/StringBuilder;\n+  #150 = Utf8               content\n+  #151 = Utf8               Ljava/lang/StringBuilder;\n+  #152 = Methodref          #153.#154     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #153 = Class              #155          // java/lang/StringBuilder\n+  #154 = NameAndType        #156:#157     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #155 = Utf8               java/lang/StringBuilder\n+  #156 = Utf8               append\n+  #157 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #158 = Fieldref           #126.#159     // org/apache/commons/csv/Token$Type.COMMENT:Lorg/apache/commons/csv/Token$Type;\n+  #159 = NameAndType        #160:#130     // COMMENT:Lorg/apache/commons/csv/Token$Type;\n+  #160 = Utf8               COMMENT\n+  #161 = Fieldref           #126.#162     // org/apache/commons/csv/Token$Type.INVALID:Lorg/apache/commons/csv/Token$Type;\n+  #162 = NameAndType        #163:#130     // INVALID:Lorg/apache/commons/csv/Token$Type;\n+  #163 = Utf8               INVALID\n+  #164 = Methodref          #104.#165     // java/lang/Character.isWhitespace:(C)Z\n+  #165 = NameAndType        #166:#167     // isWhitespace:(C)Z\n+  #166 = Utf8               isWhitespace\n+  #167 = Utf8               (C)Z\n+  #168 = Fieldref           #126.#169     // org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n+  #169 = NameAndType        #170:#130     // TOKEN:Lorg/apache/commons/csv/Token$Type;\n+  #170 = Utf8               TOKEN\n+  #171 = Fieldref           #126.#172     // org/apache/commons/csv/Token$Type.EORECORD:Lorg/apache/commons/csv/Token$Type;\n+  #172 = NameAndType        #173:#130     // EORECORD:Lorg/apache/commons/csv/Token$Type;\n+  #173 = Utf8               EORECORD\n+  #174 = Methodref          #10.#175      // org/apache/commons/csv/Lexer.isQuoteChar:(I)Z\n+  #175 = NameAndType        #176:#118     // isQuoteChar:(I)Z\n+  #176 = Utf8               isQuoteChar\n+  #177 = Methodref          #10.#178      // org/apache/commons/csv/Lexer.parseEncapsulatedToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n+  #178 = NameAndType        #179:#180     // parseEncapsulatedToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n+  #179 = Utf8               parseEncapsulatedToken\n+  #180 = Utf8               (Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n+  #181 = Fieldref           #132.#182     // org/apache/commons/csv/Token.isReady:Z\n+  #182 = NameAndType        #183:#62      // isReady:Z\n+  #183 = Utf8               isReady\n+  #184 = Methodref          #10.#185      // org/apache/commons/csv/Lexer.parseSimpleToken:(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;\n+  #185 = NameAndType        #186:#187     // parseSimpleToken:(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;\n+  #186 = Utf8               parseSimpleToken\n+  #187 = Utf8               (Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;\n+  #188 = Fieldref           #132.#189     // org/apache/commons/csv/Token.isQuoted:Z\n+  #189 = NameAndType        #190:#62      // isQuoted:Z\n+  #190 = Utf8               isQuoted\n+  #191 = Methodref          #10.#85       // org/apache/commons/csv/Lexer.getCurrentLineNumber:()J\n+  #192 = Methodref          #10.#193      // org/apache/commons/csv/Lexer.isEscape:(I)Z\n+  #193 = NameAndType        #194:#118     // isEscape:(I)Z\n+  #194 = Utf8               isEscape\n+  #195 = Methodref          #10.#196      // org/apache/commons/csv/Lexer.isEscapeDelimiter:()Z\n+  #196 = NameAndType        #197:#58      // isEscapeDelimiter:()Z\n+  #197 = Utf8               isEscapeDelimiter\n+  #198 = Methodref          #153.#199     // java/lang/StringBuilder.append:([C)Ljava/lang/StringBuilder;\n+  #199 = NameAndType        #156:#200     // append:([C)Ljava/lang/StringBuilder;\n+  #200 = Utf8               ([C)Ljava/lang/StringBuilder;\n+  #201 = Methodref          #10.#202      // org/apache/commons/csv/Lexer.readEscape:()I\n+  #202 = NameAndType        #203:#112     // readEscape:()I\n+  #203 = Utf8               readEscape\n+  #204 = Methodref          #153.#205     // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+  #205 = NameAndType        #156:#206     // append:(C)Ljava/lang/StringBuilder;\n+  #206 = Utf8               (C)Ljava/lang/StringBuilder;\n+  #207 = Methodref          #76.#208      // org/apache/commons/csv/ExtendedBufferedReader.lookAhead:()I\n+  #208 = NameAndType        #96:#112      // lookAhead:()I\n+  #209 = Class              #210          // java/io/IOException\n+  #210 = Utf8               java/io/IOException\n+  #211 = Methodref          #153.#5       // java/lang/StringBuilder.\"<init>\":()V\n+  #212 = String             #213          // (line\n+  #213 = Utf8               (line\n+  #214 = Methodref          #153.#215     // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+  #215 = NameAndType        #156:#216     // append:(J)Ljava/lang/StringBuilder;\n+  #216 = Utf8               (J)Ljava/lang/StringBuilder;\n+  #217 = String             #218          // ) invalid char between encapsulated token and delimiter\n+  #218 = Utf8               ) invalid char between encapsulated token and delimiter\n+  #219 = Methodref          #153.#220     // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #220 = NameAndType        #221:#20      // toString:()Ljava/lang/String;\n+  #221 = Utf8               toString\n+  #222 = Methodref          #209.#223     // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+  #223 = NameAndType        #7:#224       // \"<init>\":(Ljava/lang/String;)V\n+  #224 = Utf8               (Ljava/lang/String;)V\n+  #225 = String             #226          // (startline\n+  #226 = Utf8               (startline\n+  #227 = String             #228          // ) EOF reached before encapsulated token finished\n+  #228 = Utf8               ) EOF reached before encapsulated token finished\n+  #229 = Methodref          #10.#230      // org/apache/commons/csv/Lexer.trimTrailingSpaces:(Ljava/lang/StringBuilder;)V\n+  #230 = NameAndType        #231:#232     // trimTrailingSpaces:(Ljava/lang/StringBuilder;)V\n+  #231 = Utf8               trimTrailingSpaces\n+  #232 = Utf8               (Ljava/lang/StringBuilder;)V\n+  #233 = String             #234          // \\r\\n\n+  #234 = Utf8               \\r\\n\n+  #235 = Fieldref           #10.#236      // org/apache/commons/csv/Lexer.LF_STRING:Ljava/lang/String;\n+  #236 = NameAndType        #237:#90      // LF_STRING:Ljava/lang/String;\n+  #237 = Utf8               LF_STRING\n+  #238 = Fieldref           #10.#239      // org/apache/commons/csv/Lexer.CR_STRING:Ljava/lang/String;\n+  #239 = NameAndType        #240:#90      // CR_STRING:Ljava/lang/String;\n+  #240 = Utf8               CR_STRING\n+  #241 = String             #242          // EOF whilst processing escape sequence\n+  #242 = Utf8               EOF whilst processing escape sequence\n+  #243 = Methodref          #10.#244      // org/apache/commons/csv/Lexer.isMetaChar:(I)Z\n+  #244 = NameAndType        #245:#118     // isMetaChar:(I)Z\n+  #245 = Utf8               isMetaChar\n+  #246 = Methodref          #153.#247     // java/lang/StringBuilder.length:()I\n+  #247 = NameAndType        #248:#112     // length:()I\n+  #248 = Utf8               length\n+  #249 = Methodref          #153.#250     // java/lang/StringBuilder.charAt:(I)C\n+  #250 = NameAndType        #251:#252     // charAt:(I)C\n+  #251 = Utf8               charAt\n+  #252 = Utf8               (I)C\n+  #253 = Methodref          #153.#254     // java/lang/StringBuilder.setLength:(I)V\n+  #254 = NameAndType        #255:#256     // setLength:(I)V\n+  #255 = Utf8               setLength\n+  #256 = Utf8               (I)V\n+  #257 = Methodref          #104.#258     // java/lang/Character.toString:(C)Ljava/lang/String;\n+  #258 = NameAndType        #221:#259     // toString:(C)Ljava/lang/String;\n+  #259 = Utf8               (C)Ljava/lang/String;\n+  #260 = Class              #261          // java/io/Closeable\n+  #261 = Utf8               java/io/Closeable\n+  #262 = Utf8               DISABLED\n+  #263 = Utf8               ConstantValue\n+  #264 = Utf8               (Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n+  #265 = Utf8               Code\n+  #266 = Utf8               LineNumberTable\n+  #267 = Utf8               Exceptions\n+  #268 = Utf8               getCharacterPosition\n+  #269 = Utf8               getFirstEol\n+  #270 = Utf8               StackMapTable\n+  #271 = Utf8               nextToken\n+  #272 = Utf8               <clinit>\n+  #273 = Utf8               SourceFile\n+  #274 = Utf8               Lexer.java\n+  #275 = Utf8               InnerClasses\n+  #276 = Utf8               Type\n {\n   private static final java.lang.String CR_STRING;\n     descriptor: Ljava/lang/String;\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n \n   private static final java.lang.String LF_STRING;\n     descriptor: Ljava/lang/String;\n@@ -340,67 +340,67 @@\n \n   org.apache.commons.csv.Lexer(org.apache.commons.csv.CSVFormat, org.apache.commons.csv.ExtendedBufferedReader);\n     descriptor: (Lorg/apache/commons/csv/CSVFormat;Lorg/apache/commons/csv/ExtendedBufferedReader;)V\n     flags: (0x0000)\n     Code:\n       stack=3, locals=3, args_size=3\n          0: aload_0\n-         1: invokespecial #2                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #3                  // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n          5: aload_2\n-         6: putfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+         6: putfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n          9: aload_0\n         10: aload_1\n-        11: invokevirtual #4                  // Method org/apache/commons/csv/CSVFormat.getDelimiterString:()Ljava/lang/String;\n-        14: invokevirtual #5                  // Method java/lang/String.toCharArray:()[C\n-        17: putfield      #6                  // Field delimiter:[C\n+        11: invokevirtual #15                 // Method org/apache/commons/csv/CSVFormat.getDelimiterString:()Ljava/lang/String;\n+        14: invokevirtual #21                 // Method java/lang/String.toCharArray:()[C\n+        17: putfield      #27                 // Field delimiter:[C\n         20: aload_0\n         21: aload_0\n         22: aload_1\n-        23: invokevirtual #7                  // Method org/apache/commons/csv/CSVFormat.getEscapeCharacter:()Ljava/lang/Character;\n-        26: invokespecial #8                  // Method mapNullToDisabled:(Ljava/lang/Character;)C\n-        29: putfield      #9                  // Field escape:C\n+        23: invokevirtual #31                 // Method org/apache/commons/csv/CSVFormat.getEscapeCharacter:()Ljava/lang/Character;\n+        26: invokespecial #35                 // Method mapNullToDisabled:(Ljava/lang/Character;)C\n+        29: putfield      #39                 // Field escape:C\n         32: aload_0\n         33: aload_0\n         34: aload_1\n-        35: invokevirtual #10                 // Method org/apache/commons/csv/CSVFormat.getQuoteCharacter:()Ljava/lang/Character;\n-        38: invokespecial #8                  // Method mapNullToDisabled:(Ljava/lang/Character;)C\n-        41: putfield      #11                 // Field quoteChar:C\n+        35: invokevirtual #43                 // Method org/apache/commons/csv/CSVFormat.getQuoteCharacter:()Ljava/lang/Character;\n+        38: invokespecial #35                 // Method mapNullToDisabled:(Ljava/lang/Character;)C\n+        41: putfield      #46                 // Field quoteChar:C\n         44: aload_0\n         45: aload_0\n         46: aload_1\n-        47: invokevirtual #12                 // Method org/apache/commons/csv/CSVFormat.getCommentMarker:()Ljava/lang/Character;\n-        50: invokespecial #8                  // Method mapNullToDisabled:(Ljava/lang/Character;)C\n-        53: putfield      #13                 // Field commentStart:C\n+        47: invokevirtual #49                 // Method org/apache/commons/csv/CSVFormat.getCommentMarker:()Ljava/lang/Character;\n+        50: invokespecial #35                 // Method mapNullToDisabled:(Ljava/lang/Character;)C\n+        53: putfield      #52                 // Field commentStart:C\n         56: aload_0\n         57: aload_1\n-        58: invokevirtual #14                 // Method org/apache/commons/csv/CSVFormat.getIgnoreSurroundingSpaces:()Z\n-        61: putfield      #15                 // Field ignoreSurroundingSpaces:Z\n+        58: invokevirtual #55                 // Method org/apache/commons/csv/CSVFormat.getIgnoreSurroundingSpaces:()Z\n+        61: putfield      #59                 // Field ignoreSurroundingSpaces:Z\n         64: aload_0\n         65: aload_1\n-        66: invokevirtual #16                 // Method org/apache/commons/csv/CSVFormat.getIgnoreEmptyLines:()Z\n-        69: putfield      #17                 // Field ignoreEmptyLines:Z\n+        66: invokevirtual #63                 // Method org/apache/commons/csv/CSVFormat.getIgnoreEmptyLines:()Z\n+        69: putfield      #66                 // Field ignoreEmptyLines:Z\n         72: aload_0\n         73: aload_0\n-        74: getfield      #6                  // Field delimiter:[C\n+        74: getfield      #27                 // Field delimiter:[C\n         77: arraylength\n         78: iconst_1\n         79: isub\n         80: newarray       char\n-        82: putfield      #18                 // Field delimiterBuf:[C\n+        82: putfield      #69                 // Field delimiterBuf:[C\n         85: aload_0\n         86: iconst_2\n         87: aload_0\n-        88: getfield      #6                  // Field delimiter:[C\n+        88: getfield      #27                 // Field delimiter:[C\n         91: arraylength\n         92: imul\n         93: iconst_1\n         94: isub\n         95: newarray       char\n-        97: putfield      #19                 // Field escapeDelimiterBuf:[C\n+        97: putfield      #72                 // Field escapeDelimiterBuf:[C\n        100: return\n       LineNumberTable:\n         line 65: 0\n         line 66: 4\n         line 67: 9\n         line 68: 20\n         line 69: 32\n@@ -413,78 +413,78 @@\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-         4: invokevirtual #20                 // Method org/apache/commons/csv/ExtendedBufferedReader.close:()V\n+         1: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+         4: invokevirtual #75                 // Method org/apache/commons/csv/ExtendedBufferedReader.close:()V\n          7: return\n       LineNumberTable:\n         line 85: 0\n         line 86: 7\n     Exceptions:\n       throws java.io.IOException\n \n   long getCharacterPosition();\n     descriptor: ()J\n     flags: (0x0000)\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-         4: invokevirtual #21                 // Method org/apache/commons/csv/ExtendedBufferedReader.getPosition:()J\n+         1: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+         4: invokevirtual #80                 // Method org/apache/commons/csv/ExtendedBufferedReader.getPosition:()J\n          7: lreturn\n       LineNumberTable:\n         line 94: 0\n \n   long getCurrentLineNumber();\n     descriptor: ()J\n     flags: (0x0000)\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-         4: invokevirtual #22                 // Method org/apache/commons/csv/ExtendedBufferedReader.getCurrentLineNumber:()J\n+         1: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+         4: invokevirtual #84                 // Method org/apache/commons/csv/ExtendedBufferedReader.getCurrentLineNumber:()J\n          7: lreturn\n       LineNumberTable:\n         line 103: 0\n \n   java.lang.String getFirstEol();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0000)\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #23                 // Field firstEol:Ljava/lang/String;\n+         1: getfield      #87                 // Field firstEol:Ljava/lang/String;\n          4: areturn\n       LineNumberTable:\n         line 107: 0\n \n   boolean isClosed();\n     descriptor: ()Z\n     flags: (0x0000)\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-         4: invokevirtual #24                 // Method org/apache/commons/csv/ExtendedBufferedReader.isClosed:()Z\n+         1: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+         4: invokevirtual #91                 // Method org/apache/commons/csv/ExtendedBufferedReader.isClosed:()Z\n          7: ireturn\n       LineNumberTable:\n         line 111: 0\n \n   boolean isCommentStart(int);\n     descriptor: (I)Z\n     flags: (0x0000)\n     Code:\n       stack=2, locals=2, args_size=2\n          0: iload_1\n          1: aload_0\n-         2: getfield      #13                 // Field commentStart:C\n+         2: getfield      #52                 // Field commentStart:C\n          5: if_icmpne     12\n          8: iconst_1\n          9: goto          13\n         12: iconst_0\n         13: ireturn\n       LineNumberTable:\n         line 115: 0\n@@ -496,64 +496,64 @@\n   boolean isDelimiter(int) throws java.io.IOException;\n     descriptor: (I)Z\n     flags: (0x0000)\n     Code:\n       stack=4, locals=3, args_size=2\n          0: iload_1\n          1: aload_0\n-         2: getfield      #6                  // Field delimiter:[C\n+         2: getfield      #27                 // Field delimiter:[C\n          5: iconst_0\n          6: caload\n          7: if_icmpeq     12\n         10: iconst_0\n         11: ireturn\n         12: aload_0\n-        13: getfield      #6                  // Field delimiter:[C\n+        13: getfield      #27                 // Field delimiter:[C\n         16: arraylength\n         17: iconst_1\n         18: if_icmpne     23\n         21: iconst_1\n         22: ireturn\n         23: aload_0\n-        24: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+        24: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n         27: aload_0\n-        28: getfield      #18                 // Field delimiterBuf:[C\n-        31: invokevirtual #25                 // Method org/apache/commons/csv/ExtendedBufferedReader.lookAhead:([C)[C\n+        28: getfield      #69                 // Field delimiterBuf:[C\n+        31: invokevirtual #94                 // Method org/apache/commons/csv/ExtendedBufferedReader.lookAhead:([C)[C\n         34: pop\n         35: iconst_0\n         36: istore_2\n         37: iload_2\n         38: aload_0\n-        39: getfield      #18                 // Field delimiterBuf:[C\n+        39: getfield      #69                 // Field delimiterBuf:[C\n         42: arraylength\n         43: if_icmpge     71\n         46: aload_0\n-        47: getfield      #18                 // Field delimiterBuf:[C\n+        47: getfield      #69                 // Field delimiterBuf:[C\n         50: iload_2\n         51: caload\n         52: aload_0\n-        53: getfield      #6                  // Field delimiter:[C\n+        53: getfield      #27                 // Field delimiter:[C\n         56: iload_2\n         57: iconst_1\n         58: iadd\n         59: caload\n         60: if_icmpeq     65\n         63: iconst_0\n         64: ireturn\n         65: iinc          2, 1\n         68: goto          37\n         71: aload_0\n-        72: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+        72: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n         75: aload_0\n-        76: getfield      #18                 // Field delimiterBuf:[C\n+        76: getfield      #69                 // Field delimiterBuf:[C\n         79: iconst_0\n         80: aload_0\n-        81: getfield      #18                 // Field delimiterBuf:[C\n+        81: getfield      #69                 // Field delimiterBuf:[C\n         84: arraylength\n-        85: invokevirtual #26                 // Method org/apache/commons/csv/ExtendedBufferedReader.read:([CII)I\n+        85: invokevirtual #98                 // Method org/apache/commons/csv/ExtendedBufferedReader.read:([CII)I\n         88: istore_2\n         89: iload_2\n         90: iconst_m1\n         91: if_icmpeq     98\n         94: iconst_1\n         95: goto          99\n         98: iconst_0\n@@ -609,15 +609,15 @@\n   boolean isEscape(int);\n     descriptor: (I)Z\n     flags: (0x0000)\n     Code:\n       stack=2, locals=2, args_size=2\n          0: iload_1\n          1: aload_0\n-         2: getfield      #9                  // Field escape:C\n+         2: getfield      #39                 // Field escape:C\n          5: if_icmpne     12\n          8: iconst_1\n          9: goto          13\n         12: iconst_0\n         13: ireturn\n       LineNumberTable:\n         line 158: 0\n@@ -628,72 +628,72 @@\n \n   boolean isEscapeDelimiter() throws java.io.IOException;\n     descriptor: ()Z\n     flags: (0x0000)\n     Code:\n       stack=4, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+         1: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n          4: aload_0\n-         5: getfield      #19                 // Field escapeDelimiterBuf:[C\n-         8: invokevirtual #25                 // Method org/apache/commons/csv/ExtendedBufferedReader.lookAhead:([C)[C\n+         5: getfield      #72                 // Field escapeDelimiterBuf:[C\n+         8: invokevirtual #94                 // Method org/apache/commons/csv/ExtendedBufferedReader.lookAhead:([C)[C\n         11: pop\n         12: aload_0\n-        13: getfield      #19                 // Field escapeDelimiterBuf:[C\n+        13: getfield      #72                 // Field escapeDelimiterBuf:[C\n         16: iconst_0\n         17: caload\n         18: aload_0\n-        19: getfield      #6                  // Field delimiter:[C\n+        19: getfield      #27                 // Field delimiter:[C\n         22: iconst_0\n         23: caload\n         24: if_icmpeq     29\n         27: iconst_0\n         28: ireturn\n         29: iconst_1\n         30: istore_1\n         31: iload_1\n         32: aload_0\n-        33: getfield      #6                  // Field delimiter:[C\n+        33: getfield      #27                 // Field delimiter:[C\n         36: arraylength\n         37: if_icmpge     82\n         40: aload_0\n-        41: getfield      #19                 // Field escapeDelimiterBuf:[C\n+        41: getfield      #72                 // Field escapeDelimiterBuf:[C\n         44: iconst_2\n         45: iload_1\n         46: imul\n         47: caload\n         48: aload_0\n-        49: getfield      #6                  // Field delimiter:[C\n+        49: getfield      #27                 // Field delimiter:[C\n         52: iload_1\n         53: caload\n         54: if_icmpne     74\n         57: aload_0\n-        58: getfield      #19                 // Field escapeDelimiterBuf:[C\n+        58: getfield      #72                 // Field escapeDelimiterBuf:[C\n         61: iconst_2\n         62: iload_1\n         63: imul\n         64: iconst_1\n         65: isub\n         66: caload\n         67: aload_0\n-        68: getfield      #9                  // Field escape:C\n+        68: getfield      #39                 // Field escape:C\n         71: if_icmpeq     76\n         74: iconst_0\n         75: ireturn\n         76: iinc          1, 1\n         79: goto          31\n         82: aload_0\n-        83: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+        83: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n         86: aload_0\n-        87: getfield      #19                 // Field escapeDelimiterBuf:[C\n+        87: getfield      #72                 // Field escapeDelimiterBuf:[C\n         90: iconst_0\n         91: aload_0\n-        92: getfield      #19                 // Field escapeDelimiterBuf:[C\n+        92: getfield      #72                 // Field escapeDelimiterBuf:[C\n         95: arraylength\n-        96: invokevirtual #26                 // Method org/apache/commons/csv/ExtendedBufferedReader.read:([CII)I\n+        96: invokevirtual #98                 // Method org/apache/commons/csv/ExtendedBufferedReader.read:([CII)I\n         99: istore_1\n        100: iload_1\n        101: iconst_m1\n        102: if_icmpeq     109\n        105: iconst_1\n        106: goto          110\n        109: iconst_0\n@@ -728,23 +728,23 @@\n   private boolean isMetaChar(int);\n     descriptor: (I)Z\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=2, args_size=2\n          0: iload_1\n          1: aload_0\n-         2: getfield      #9                  // Field escape:C\n+         2: getfield      #39                 // Field escape:C\n          5: if_icmpeq     24\n          8: iload_1\n          9: aload_0\n-        10: getfield      #11                 // Field quoteChar:C\n+        10: getfield      #46                 // Field quoteChar:C\n         13: if_icmpeq     24\n         16: iload_1\n         17: aload_0\n-        18: getfield      #13                 // Field commentStart:C\n+        18: getfield      #52                 // Field commentStart:C\n         21: if_icmpne     28\n         24: iconst_1\n         25: goto          29\n         28: iconst_0\n         29: ireturn\n       LineNumberTable:\n         line 184: 0\n@@ -757,15 +757,15 @@\n   boolean isQuoteChar(int);\n     descriptor: (I)Z\n     flags: (0x0000)\n     Code:\n       stack=2, locals=2, args_size=2\n          0: iload_1\n          1: aload_0\n-         2: getfield      #11                 // Field quoteChar:C\n+         2: getfield      #46                 // Field quoteChar:C\n          5: if_icmpne     12\n          8: iconst_1\n          9: goto          13\n         12: iconst_0\n         13: ireturn\n       LineNumberTable:\n         line 188: 0\n@@ -803,184 +803,184 @@\n   private char mapNullToDisabled(java.lang.Character);\n     descriptor: (Ljava/lang/Character;)C\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=1, locals=2, args_size=2\n          0: aload_1\n          1: ifnonnull     9\n-         4: ldc           #28                 // int 65534\n+         4: ldc           #102                // int 65534\n          6: goto          13\n          9: aload_1\n-        10: invokevirtual #29                 // Method java/lang/Character.charValue:()C\n+        10: invokevirtual #103                // Method java/lang/Character.charValue:()C\n         13: ireturn\n       LineNumberTable:\n         line 202: 0\n       StackMapTable: number_of_entries = 2\n         frame_type = 9 /* same */\n         frame_type = 67 /* same_locals_1_stack_item */\n           stack = [ int ]\n \n   org.apache.commons.csv.Token nextToken(org.apache.commons.csv.Token) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n     flags: (0x0000)\n     Code:\n       stack=3, locals=7, args_size=2\n          0: aload_0\n-         1: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-         4: invokevirtual #30                 // Method org/apache/commons/csv/ExtendedBufferedReader.getLastChar:()I\n+         1: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+         4: invokevirtual #109                // Method org/apache/commons/csv/ExtendedBufferedReader.getLastChar:()I\n          7: istore_2\n          8: aload_0\n-         9: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-        12: invokevirtual #31                 // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n+         9: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+        12: invokevirtual #113                // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n         15: istore_3\n         16: aload_0\n         17: iload_3\n-        18: invokevirtual #32                 // Method readEndOfLine:(I)Z\n+        18: invokevirtual #115                // Method readEndOfLine:(I)Z\n         21: istore        4\n         23: aload_0\n-        24: getfield      #17                 // Field ignoreEmptyLines:Z\n+        24: getfield      #66                 // Field ignoreEmptyLines:Z\n         27: ifeq          77\n         30: iload         4\n         32: ifeq          77\n         35: aload_0\n         36: iload_2\n-        37: invokevirtual #33                 // Method isStartOfLine:(I)Z\n+        37: invokevirtual #119                // Method isStartOfLine:(I)Z\n         40: ifeq          77\n         43: iload_3\n         44: istore_2\n         45: aload_0\n-        46: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-        49: invokevirtual #31                 // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n+        46: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+        49: invokevirtual #113                // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n         52: istore_3\n         53: aload_0\n         54: iload_3\n-        55: invokevirtual #32                 // Method readEndOfLine:(I)Z\n+        55: invokevirtual #115                // Method readEndOfLine:(I)Z\n         58: istore        4\n         60: aload_0\n         61: iload_3\n-        62: invokevirtual #34                 // Method isEndOfFile:(I)Z\n+        62: invokevirtual #122                // Method isEndOfFile:(I)Z\n         65: ifeq          30\n         68: aload_1\n-        69: getstatic     #35                 // Field org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n-        72: putfield      #36                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+        69: getstatic     #125                // Field org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n+        72: putfield      #131                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n         75: aload_1\n         76: areturn\n         77: aload_0\n         78: iload_2\n-        79: invokevirtual #34                 // Method isEndOfFile:(I)Z\n+        79: invokevirtual #122                // Method isEndOfFile:(I)Z\n         82: ifne          101\n         85: aload_0\n         86: iload_2\n-        87: invokevirtual #37                 // Method isDelimiter:(I)Z\n+        87: invokevirtual #136                // Method isDelimiter:(I)Z\n         90: ifne          110\n         93: aload_0\n         94: iload_3\n-        95: invokevirtual #34                 // Method isEndOfFile:(I)Z\n+        95: invokevirtual #122                // Method isEndOfFile:(I)Z\n         98: ifeq          110\n        101: aload_1\n-       102: getstatic     #35                 // Field org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n-       105: putfield      #36                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+       102: getstatic     #125                // Field org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n+       105: putfield      #131                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n        108: aload_1\n        109: areturn\n        110: aload_0\n        111: iload_2\n-       112: invokevirtual #33                 // Method isStartOfLine:(I)Z\n+       112: invokevirtual #119                // Method isStartOfLine:(I)Z\n        115: ifeq          175\n        118: aload_0\n        119: iload_3\n-       120: invokevirtual #38                 // Method isCommentStart:(I)Z\n+       120: invokevirtual #139                // Method isCommentStart:(I)Z\n        123: ifeq          175\n        126: aload_0\n-       127: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-       130: invokevirtual #39                 // Method org/apache/commons/csv/ExtendedBufferedReader.readLine:()Ljava/lang/String;\n+       127: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+       130: invokevirtual #142                // Method org/apache/commons/csv/ExtendedBufferedReader.readLine:()Ljava/lang/String;\n        133: astore        5\n        135: aload         5\n        137: ifnonnull     149\n        140: aload_1\n-       141: getstatic     #35                 // Field org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n-       144: putfield      #36                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+       141: getstatic     #125                // Field org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n+       144: putfield      #131                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n        147: aload_1\n        148: areturn\n        149: aload         5\n-       151: invokevirtual #40                 // Method java/lang/String.trim:()Ljava/lang/String;\n+       151: invokevirtual #145                // Method java/lang/String.trim:()Ljava/lang/String;\n        154: astore        6\n        156: aload_1\n-       157: getfield      #41                 // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+       157: getfield      #148                // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n        160: aload         6\n-       162: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       162: invokevirtual #152                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        165: pop\n        166: aload_1\n-       167: getstatic     #43                 // Field org/apache/commons/csv/Token$Type.COMMENT:Lorg/apache/commons/csv/Token$Type;\n-       170: putfield      #36                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+       167: getstatic     #158                // Field org/apache/commons/csv/Token$Type.COMMENT:Lorg/apache/commons/csv/Token$Type;\n+       170: putfield      #131                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n        173: aload_1\n        174: areturn\n        175: aload_1\n-       176: getfield      #36                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n-       179: getstatic     #44                 // Field org/apache/commons/csv/Token$Type.INVALID:Lorg/apache/commons/csv/Token$Type;\n+       176: getfield      #131                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+       179: getstatic     #161                // Field org/apache/commons/csv/Token$Type.INVALID:Lorg/apache/commons/csv/Token$Type;\n        182: if_acmpne     314\n        185: aload_0\n-       186: getfield      #15                 // Field ignoreSurroundingSpaces:Z\n+       186: getfield      #59                 // Field ignoreSurroundingSpaces:Z\n        189: ifeq          231\n        192: iload_3\n        193: i2c\n-       194: invokestatic  #45                 // Method java/lang/Character.isWhitespace:(C)Z\n+       194: invokestatic  #164                // Method java/lang/Character.isWhitespace:(C)Z\n        197: ifeq          231\n        200: aload_0\n        201: iload_3\n-       202: invokevirtual #37                 // Method isDelimiter:(I)Z\n+       202: invokevirtual #136                // Method isDelimiter:(I)Z\n        205: ifne          231\n        208: iload         4\n        210: ifne          231\n        213: aload_0\n-       214: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-       217: invokevirtual #31                 // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n+       214: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+       217: invokevirtual #113                // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n        220: istore_3\n        221: aload_0\n        222: iload_3\n-       223: invokevirtual #32                 // Method readEndOfLine:(I)Z\n+       223: invokevirtual #115                // Method readEndOfLine:(I)Z\n        226: istore        4\n        228: goto          192\n        231: aload_0\n        232: iload_3\n-       233: invokevirtual #37                 // Method isDelimiter:(I)Z\n+       233: invokevirtual #136                // Method isDelimiter:(I)Z\n        236: ifeq          249\n        239: aload_1\n-       240: getstatic     #46                 // Field org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n-       243: putfield      #36                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+       240: getstatic     #168                // Field org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n+       243: putfield      #131                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n        246: goto          175\n        249: iload         4\n        251: ifeq          264\n        254: aload_1\n-       255: getstatic     #47                 // Field org/apache/commons/csv/Token$Type.EORECORD:Lorg/apache/commons/csv/Token$Type;\n-       258: putfield      #36                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+       255: getstatic     #171                // Field org/apache/commons/csv/Token$Type.EORECORD:Lorg/apache/commons/csv/Token$Type;\n+       258: putfield      #131                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n        261: goto          175\n        264: aload_0\n        265: iload_3\n-       266: invokevirtual #48                 // Method isQuoteChar:(I)Z\n+       266: invokevirtual #174                // Method isQuoteChar:(I)Z\n        269: ifeq          281\n        272: aload_0\n        273: aload_1\n-       274: invokespecial #49                 // Method parseEncapsulatedToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n+       274: invokespecial #177                // Method parseEncapsulatedToken:(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n        277: pop\n        278: goto          175\n        281: aload_0\n        282: iload_3\n-       283: invokevirtual #34                 // Method isEndOfFile:(I)Z\n+       283: invokevirtual #122                // Method isEndOfFile:(I)Z\n        286: ifeq          304\n        289: aload_1\n-       290: getstatic     #35                 // Field org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n-       293: putfield      #36                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+       290: getstatic     #125                // Field org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n+       293: putfield      #131                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n        296: aload_1\n        297: iconst_1\n-       298: putfield      #50                 // Field org/apache/commons/csv/Token.isReady:Z\n+       298: putfield      #181                // Field org/apache/commons/csv/Token.isReady:Z\n        301: goto          175\n        304: aload_0\n        305: aload_1\n        306: iload_3\n-       307: invokespecial #51                 // Method parseSimpleToken:(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;\n+       307: invokespecial #184                // Method parseSimpleToken:(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;\n        310: pop\n        311: goto          175\n        314: aload_1\n        315: areturn\n       LineNumberTable:\n         line 219: 0\n         line 222: 8\n@@ -1046,158 +1046,158 @@\n   private org.apache.commons.csv.Token parseEncapsulatedToken(org.apache.commons.csv.Token) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=6, args_size=2\n          0: aload_1\n          1: iconst_1\n-         2: putfield      #52                 // Field org/apache/commons/csv/Token.isQuoted:Z\n+         2: putfield      #188                // Field org/apache/commons/csv/Token.isQuoted:Z\n          5: aload_0\n-         6: invokevirtual #53                 // Method getCurrentLineNumber:()J\n+         6: invokevirtual #191                // Method getCurrentLineNumber:()J\n          9: lstore_2\n         10: aload_0\n-        11: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-        14: invokevirtual #31                 // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n+        11: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+        14: invokevirtual #113                // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n         17: istore        4\n         19: aload_0\n         20: iload         4\n-        22: invokevirtual #54                 // Method isEscape:(I)Z\n+        22: invokevirtual #192                // Method isEscape:(I)Z\n         25: ifeq          101\n         28: aload_0\n-        29: invokevirtual #55                 // Method isEscapeDelimiter:()Z\n+        29: invokevirtual #195                // Method isEscapeDelimiter:()Z\n         32: ifeq          50\n         35: aload_1\n-        36: getfield      #41                 // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+        36: getfield      #148                // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n         39: aload_0\n-        40: getfield      #6                  // Field delimiter:[C\n-        43: invokevirtual #56                 // Method java/lang/StringBuilder.append:([C)Ljava/lang/StringBuilder;\n+        40: getfield      #27                 // Field delimiter:[C\n+        43: invokevirtual #198                // Method java/lang/StringBuilder.append:([C)Ljava/lang/StringBuilder;\n         46: pop\n         47: goto          10\n         50: aload_0\n-        51: invokevirtual #57                 // Method readEscape:()I\n+        51: invokevirtual #201                // Method readEscape:()I\n         54: istore        5\n         56: iload         5\n         58: iconst_m1\n         59: if_icmpne     87\n         62: aload_1\n-        63: getfield      #41                 // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+        63: getfield      #148                // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n         66: iload         4\n         68: i2c\n-        69: invokevirtual #58                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+        69: invokevirtual #204                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n         72: aload_0\n-        73: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-        76: invokevirtual #30                 // Method org/apache/commons/csv/ExtendedBufferedReader.getLastChar:()I\n+        73: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+        76: invokevirtual #109                // Method org/apache/commons/csv/ExtendedBufferedReader.getLastChar:()I\n         79: i2c\n-        80: invokevirtual #58                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+        80: invokevirtual #204                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n         83: pop\n         84: goto          98\n         87: aload_1\n-        88: getfield      #41                 // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+        88: getfield      #148                // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n         91: iload         5\n         93: i2c\n-        94: invokevirtual #58                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+        94: invokevirtual #204                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n         97: pop\n         98: goto          10\n        101: aload_0\n        102: iload         4\n-       104: invokevirtual #48                 // Method isQuoteChar:(I)Z\n+       104: invokevirtual #174                // Method isQuoteChar:(I)Z\n        107: ifeq          259\n        110: aload_0\n        111: aload_0\n-       112: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-       115: invokevirtual #59                 // Method org/apache/commons/csv/ExtendedBufferedReader.lookAhead:()I\n-       118: invokevirtual #48                 // Method isQuoteChar:(I)Z\n+       112: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+       115: invokevirtual #207                // Method org/apache/commons/csv/ExtendedBufferedReader.lookAhead:()I\n+       118: invokevirtual #174                // Method isQuoteChar:(I)Z\n        121: ifeq          147\n        124: aload_0\n-       125: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-       128: invokevirtual #31                 // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n+       125: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+       128: invokevirtual #113                // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n        131: istore        4\n        133: aload_1\n-       134: getfield      #41                 // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+       134: getfield      #148                // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n        137: iload         4\n        139: i2c\n-       140: invokevirtual #58                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+       140: invokevirtual #204                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n        143: pop\n        144: goto          10\n        147: aload_0\n-       148: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-       151: invokevirtual #31                 // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n+       148: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+       151: invokevirtual #113                // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n        154: istore        4\n        156: aload_0\n        157: iload         4\n-       159: invokevirtual #37                 // Method isDelimiter:(I)Z\n+       159: invokevirtual #136                // Method isDelimiter:(I)Z\n        162: ifeq          174\n        165: aload_1\n-       166: getstatic     #46                 // Field org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n-       169: putfield      #36                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+       166: getstatic     #168                // Field org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n+       169: putfield      #131                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n        172: aload_1\n        173: areturn\n        174: aload_0\n        175: iload         4\n-       177: invokevirtual #34                 // Method isEndOfFile:(I)Z\n+       177: invokevirtual #122                // Method isEndOfFile:(I)Z\n        180: ifeq          197\n        183: aload_1\n-       184: getstatic     #35                 // Field org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n-       187: putfield      #36                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+       184: getstatic     #125                // Field org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n+       187: putfield      #131                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n        190: aload_1\n        191: iconst_1\n-       192: putfield      #50                 // Field org/apache/commons/csv/Token.isReady:Z\n+       192: putfield      #181                // Field org/apache/commons/csv/Token.isReady:Z\n        195: aload_1\n        196: areturn\n        197: aload_0\n        198: iload         4\n-       200: invokevirtual #32                 // Method readEndOfLine:(I)Z\n+       200: invokevirtual #115                // Method readEndOfLine:(I)Z\n        203: ifeq          215\n        206: aload_1\n-       207: getstatic     #47                 // Field org/apache/commons/csv/Token$Type.EORECORD:Lorg/apache/commons/csv/Token$Type;\n-       210: putfield      #36                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+       207: getstatic     #171                // Field org/apache/commons/csv/Token$Type.EORECORD:Lorg/apache/commons/csv/Token$Type;\n+       210: putfield      #131                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n        213: aload_1\n        214: areturn\n        215: iload         4\n        217: i2c\n-       218: invokestatic  #45                 // Method java/lang/Character.isWhitespace:(C)Z\n+       218: invokestatic  #164                // Method java/lang/Character.isWhitespace:(C)Z\n        221: ifne          147\n-       224: new           #60                 // class java/io/IOException\n+       224: new           #209                // class java/io/IOException\n        227: dup\n-       228: new           #61                 // class java/lang/StringBuilder\n+       228: new           #153                // class java/lang/StringBuilder\n        231: dup\n-       232: invokespecial #62                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       235: ldc           #63                 // String (line\n-       237: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       232: invokespecial #211                // Method java/lang/StringBuilder.\"<init>\":()V\n+       235: ldc           #212                // String (line\n+       237: invokevirtual #152                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        240: aload_0\n-       241: invokevirtual #53                 // Method getCurrentLineNumber:()J\n-       244: invokevirtual #64                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-       247: ldc           #65                 // String ) invalid char between encapsulated token and delimiter\n-       249: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       252: invokevirtual #66                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       255: invokespecial #67                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       241: invokevirtual #191                // Method getCurrentLineNumber:()J\n+       244: invokevirtual #214                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+       247: ldc           #217                // String ) invalid char between encapsulated token and delimiter\n+       249: invokevirtual #152                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       252: invokevirtual #219                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       255: invokespecial #222                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        258: athrow\n        259: aload_0\n        260: iload         4\n-       262: invokevirtual #34                 // Method isEndOfFile:(I)Z\n+       262: invokevirtual #122                // Method isEndOfFile:(I)Z\n        265: ifeq          300\n-       268: new           #60                 // class java/io/IOException\n+       268: new           #209                // class java/io/IOException\n        271: dup\n-       272: new           #61                 // class java/lang/StringBuilder\n+       272: new           #153                // class java/lang/StringBuilder\n        275: dup\n-       276: invokespecial #62                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       279: ldc           #68                 // String (startline\n-       281: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       276: invokespecial #211                // Method java/lang/StringBuilder.\"<init>\":()V\n+       279: ldc           #225                // String (startline\n+       281: invokevirtual #152                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        284: lload_2\n-       285: invokevirtual #64                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-       288: ldc           #69                 // String ) EOF reached before encapsulated token finished\n-       290: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       293: invokevirtual #66                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       296: invokespecial #67                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       285: invokevirtual #214                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+       288: ldc           #227                // String ) EOF reached before encapsulated token finished\n+       290: invokevirtual #152                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       293: invokevirtual #219                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       296: invokespecial #222                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        299: athrow\n        300: aload_1\n-       301: getfield      #41                 // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+       301: getfield      #148                // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n        304: iload         4\n        306: i2c\n-       307: invokevirtual #58                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+       307: invokevirtual #204                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n        310: pop\n        311: goto          10\n       LineNumberTable:\n         line 322: 0\n         line 324: 5\n         line 327: 10\n         line 329: 19\n@@ -1253,100 +1253,100 @@\n   private org.apache.commons.csv.Token parseSimpleToken(org.apache.commons.csv.Token, int) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=4, args_size=3\n          0: aload_0\n          1: iload_2\n-         2: invokevirtual #32                 // Method readEndOfLine:(I)Z\n+         2: invokevirtual #115                // Method readEndOfLine:(I)Z\n          5: ifeq          18\n          8: aload_1\n-         9: getstatic     #47                 // Field org/apache/commons/csv/Token$Type.EORECORD:Lorg/apache/commons/csv/Token$Type;\n-        12: putfield      #36                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+         9: getstatic     #171                // Field org/apache/commons/csv/Token$Type.EORECORD:Lorg/apache/commons/csv/Token$Type;\n+        12: putfield      #131                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n         15: goto          165\n         18: aload_0\n         19: iload_2\n-        20: invokevirtual #34                 // Method isEndOfFile:(I)Z\n+        20: invokevirtual #122                // Method isEndOfFile:(I)Z\n         23: ifeq          41\n         26: aload_1\n-        27: getstatic     #35                 // Field org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n-        30: putfield      #36                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+        27: getstatic     #125                // Field org/apache/commons/csv/Token$Type.EOF:Lorg/apache/commons/csv/Token$Type;\n+        30: putfield      #131                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n         33: aload_1\n         34: iconst_1\n-        35: putfield      #50                 // Field org/apache/commons/csv/Token.isReady:Z\n+        35: putfield      #181                // Field org/apache/commons/csv/Token.isReady:Z\n         38: goto          165\n         41: aload_0\n         42: iload_2\n-        43: invokevirtual #37                 // Method isDelimiter:(I)Z\n+        43: invokevirtual #136                // Method isDelimiter:(I)Z\n         46: ifeq          59\n         49: aload_1\n-        50: getstatic     #46                 // Field org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n-        53: putfield      #36                 // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n+        50: getstatic     #168                // Field org/apache/commons/csv/Token$Type.TOKEN:Lorg/apache/commons/csv/Token$Type;\n+        53: putfield      #131                // Field org/apache/commons/csv/Token.type:Lorg/apache/commons/csv/Token$Type;\n         56: goto          165\n         59: aload_0\n         60: iload_2\n-        61: invokevirtual #54                 // Method isEscape:(I)Z\n+        61: invokevirtual #192                // Method isEscape:(I)Z\n         64: ifeq          144\n         67: aload_0\n-        68: invokevirtual #55                 // Method isEscapeDelimiter:()Z\n+        68: invokevirtual #195                // Method isEscapeDelimiter:()Z\n         71: ifeq          89\n         74: aload_1\n-        75: getfield      #41                 // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+        75: getfield      #148                // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n         78: aload_0\n-        79: getfield      #6                  // Field delimiter:[C\n-        82: invokevirtual #56                 // Method java/lang/StringBuilder.append:([C)Ljava/lang/StringBuilder;\n+        79: getfield      #27                 // Field delimiter:[C\n+        82: invokevirtual #198                // Method java/lang/StringBuilder.append:([C)Ljava/lang/StringBuilder;\n         85: pop\n         86: goto          133\n         89: aload_0\n-        90: invokevirtual #57                 // Method readEscape:()I\n+        90: invokevirtual #201                // Method readEscape:()I\n         93: istore_3\n         94: iload_3\n         95: iconst_m1\n         96: if_icmpne     123\n         99: aload_1\n-       100: getfield      #41                 // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+       100: getfield      #148                // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n        103: iload_2\n        104: i2c\n-       105: invokevirtual #58                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+       105: invokevirtual #204                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n        108: aload_0\n-       109: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-       112: invokevirtual #30                 // Method org/apache/commons/csv/ExtendedBufferedReader.getLastChar:()I\n+       109: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+       112: invokevirtual #109                // Method org/apache/commons/csv/ExtendedBufferedReader.getLastChar:()I\n        115: i2c\n-       116: invokevirtual #58                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+       116: invokevirtual #204                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n        119: pop\n        120: goto          133\n        123: aload_1\n-       124: getfield      #41                 // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+       124: getfield      #148                // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n        127: iload_3\n        128: i2c\n-       129: invokevirtual #58                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+       129: invokevirtual #204                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n        132: pop\n        133: aload_0\n-       134: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-       137: invokevirtual #31                 // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n+       134: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+       137: invokevirtual #113                // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n        140: istore_2\n        141: goto          0\n        144: aload_1\n-       145: getfield      #41                 // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+       145: getfield      #148                // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n        148: iload_2\n        149: i2c\n-       150: invokevirtual #58                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+       150: invokevirtual #204                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n        153: pop\n        154: aload_0\n-       155: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-       158: invokevirtual #31                 // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n+       155: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+       158: invokevirtual #113                // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n        161: istore_2\n        162: goto          0\n        165: aload_0\n-       166: getfield      #15                 // Field ignoreSurroundingSpaces:Z\n+       166: getfield      #59                 // Field ignoreSurroundingSpaces:Z\n        169: ifeq          180\n        172: aload_0\n        173: aload_1\n-       174: getfield      #41                 // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n-       177: invokevirtual #70                 // Method trimTrailingSpaces:(Ljava/lang/StringBuilder;)V\n+       174: getfield      #148                // Field org/apache/commons/csv/Token.content:Ljava/lang/StringBuilder;\n+       177: invokevirtual #229                // Method trimTrailingSpaces:(Ljava/lang/StringBuilder;)V\n        180: aload_1\n        181: areturn\n       LineNumberTable:\n         line 403: 0\n         line 404: 8\n         line 405: 15\n         line 407: 18\n@@ -1391,44 +1391,44 @@\n     flags: (0x0000)\n     Code:\n       stack=2, locals=2, args_size=2\n          0: iload_1\n          1: bipush        13\n          3: if_icmpne     39\n          6: aload_0\n-         7: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-        10: invokevirtual #59                 // Method org/apache/commons/csv/ExtendedBufferedReader.lookAhead:()I\n+         7: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+        10: invokevirtual #207                // Method org/apache/commons/csv/ExtendedBufferedReader.lookAhead:()I\n         13: bipush        10\n         15: if_icmpne     39\n         18: aload_0\n-        19: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-        22: invokevirtual #31                 // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n+        19: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+        22: invokevirtual #113                // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n         25: istore_1\n         26: aload_0\n-        27: getfield      #23                 // Field firstEol:Ljava/lang/String;\n+        27: getfield      #87                 // Field firstEol:Ljava/lang/String;\n         30: ifnonnull     39\n         33: aload_0\n-        34: ldc           #71                 // String \\r\\n\n-        36: putfield      #23                 // Field firstEol:Ljava/lang/String;\n+        34: ldc           #233                // String \\r\\n\n+        36: putfield      #87                 // Field firstEol:Ljava/lang/String;\n         39: aload_0\n-        40: getfield      #23                 // Field firstEol:Ljava/lang/String;\n+        40: getfield      #87                 // Field firstEol:Ljava/lang/String;\n         43: ifnonnull     75\n         46: iload_1\n         47: bipush        10\n         49: if_icmpne     62\n         52: aload_0\n-        53: getstatic     #72                 // Field LF_STRING:Ljava/lang/String;\n-        56: putfield      #23                 // Field firstEol:Ljava/lang/String;\n+        53: getstatic     #235                // Field LF_STRING:Ljava/lang/String;\n+        56: putfield      #87                 // Field firstEol:Ljava/lang/String;\n         59: goto          75\n         62: iload_1\n         63: bipush        13\n         65: if_icmpne     75\n         68: aload_0\n-        69: getstatic     #73                 // Field CR_STRING:Ljava/lang/String;\n-        72: putfield      #23                 // Field firstEol:Ljava/lang/String;\n+        69: getstatic     #238                // Field CR_STRING:Ljava/lang/String;\n+        72: putfield      #87                 // Field firstEol:Ljava/lang/String;\n         75: iload_1\n         76: bipush        10\n         78: if_icmpeq     87\n         81: iload_1\n         82: bipush        13\n         84: if_icmpne     91\n         87: iconst_1\n@@ -1459,16 +1459,16 @@\n \n   int readEscape() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0000)\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n-         4: invokevirtual #31                 // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n+         1: getfield      #9                  // Field reader:Lorg/apache/commons/csv/ExtendedBufferedReader;\n+         4: invokevirtual #113                // Method org/apache/commons/csv/ExtendedBufferedReader.read:()I\n          7: istore_1\n          8: iload_1\n          9: lookupswitch  { // 11\n                       -1: 125\n                        8: 123\n                        9: 123\n                       10: 123\n@@ -1489,22 +1489,22 @@\n        116: ireturn\n        117: bipush        8\n        119: ireturn\n        120: bipush        12\n        122: ireturn\n        123: iload_1\n        124: ireturn\n-       125: new           #60                 // class java/io/IOException\n+       125: new           #209                // class java/io/IOException\n        128: dup\n-       129: ldc           #74                 // String EOF whilst processing escape sequence\n-       131: invokespecial #67                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       129: ldc           #241                // String EOF whilst processing escape sequence\n+       131: invokespecial #222                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        134: athrow\n        135: aload_0\n        136: iload_1\n-       137: invokespecial #75                 // Method isMetaChar:(I)Z\n+       137: invokespecial #243                // Method isMetaChar:(I)Z\n        140: ifeq          145\n        143: iload_1\n        144: ireturn\n        145: iconst_m1\n        146: ireturn\n       LineNumberTable:\n         line 482: 0\n@@ -1536,37 +1536,37 @@\n \n   void trimTrailingSpaces(java.lang.StringBuilder);\n     descriptor: (Ljava/lang/StringBuilder;)V\n     flags: (0x0000)\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_1\n-         1: invokevirtual #76                 // Method java/lang/StringBuilder.length:()I\n+         1: invokevirtual #246                // Method java/lang/StringBuilder.length:()I\n          4: istore_2\n          5: iload_2\n          6: ifle          29\n          9: aload_1\n         10: iload_2\n         11: iconst_1\n         12: isub\n-        13: invokevirtual #77                 // Method java/lang/StringBuilder.charAt:(I)C\n-        16: invokestatic  #45                 // Method java/lang/Character.isWhitespace:(C)Z\n+        13: invokevirtual #249                // Method java/lang/StringBuilder.charAt:(I)C\n+        16: invokestatic  #164                // Method java/lang/Character.isWhitespace:(C)Z\n         19: ifeq          29\n         22: iload_2\n         23: iconst_1\n         24: isub\n         25: istore_2\n         26: goto          5\n         29: iload_2\n         30: aload_1\n-        31: invokevirtual #76                 // Method java/lang/StringBuilder.length:()I\n+        31: invokevirtual #246                // Method java/lang/StringBuilder.length:()I\n         34: if_icmpeq     42\n         37: aload_1\n         38: iload_2\n-        39: invokevirtual #78                 // Method java/lang/StringBuilder.setLength:(I)V\n+        39: invokevirtual #253                // Method java/lang/StringBuilder.setLength:(I)V\n         42: return\n       LineNumberTable:\n         line 513: 0\n         line 514: 5\n         line 515: 22\n         line 517: 29\n         line 518: 37\n@@ -1580,20 +1580,20 @@\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=1, locals=0, args_size=0\n          0: bipush        13\n-         2: invokestatic  #79                 // Method java/lang/Character.toString:(C)Ljava/lang/String;\n-         5: putstatic     #73                 // Field CR_STRING:Ljava/lang/String;\n+         2: invokestatic  #257                // Method java/lang/Character.toString:(C)Ljava/lang/String;\n+         5: putstatic     #238                // Field CR_STRING:Ljava/lang/String;\n          8: bipush        10\n-        10: invokestatic  #79                 // Method java/lang/Character.toString:(C)Ljava/lang/String;\n-        13: putstatic     #72                 // Field LF_STRING:Ljava/lang/String;\n+        10: invokestatic  #257                // Method java/lang/Character.toString:(C)Ljava/lang/String;\n+        13: putstatic     #235                // Field LF_STRING:Ljava/lang/String;\n         16: return\n       LineNumberTable:\n         line 41: 0\n         line 42: 8\n }\n SourceFile: \"Lexer.java\"\n InnerClasses:\n-  static final #246= #177 of #179;        // Type=class org/apache/commons/csv/Token$Type of class org/apache/commons/csv/Token\n+  static final #276= #126 of #132;        // Type=class org/apache/commons/csv/Token$Type of class org/apache/commons/csv/Token\n"}]}
