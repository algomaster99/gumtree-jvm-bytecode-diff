{"diffoscope-json-version": 1, "source1": "first/JsrInstruction.class", "source2": "second/JsrInstruction.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,32 +1,32 @@\n \n package org.apache.bcel.generic;\n \n public abstract class JsrInstruction extends BranchInstruction implements UnconditionalBranch, TypedInstruction, StackProducer\n {\n-    JsrInstruction(final short opcode, final InstructionHandle target) {\n-        super(opcode, target);\n+    JsrInstruction(final short n, final InstructionHandle instructionHandle) {\n+        super(n, instructionHandle);\n     }\n     \n     JsrInstruction() {\n     }\n     \n-    public Type getType(final ConstantPoolGen cp) {\n+    public Type getType(final ConstantPoolGen constantPoolGen) {\n         return (Type)new ReturnaddressType(this.physicalSuccessor());\n     }\n     \n     public InstructionHandle physicalSuccessor() {\n-        InstructionHandle ih;\n-        for (ih = super.getTarget(); ih.getPrev() != null; ih = ih.getPrev()) {}\n-        while (ih.getInstruction() != this) {\n-            ih = ih.getNext();\n+        InstructionHandle instructionHandle;\n+        for (instructionHandle = super.getTarget(); instructionHandle.getPrev() != null; instructionHandle = instructionHandle.getPrev()) {}\n+        while (instructionHandle.getInstruction() != this) {\n+            instructionHandle = instructionHandle.getNext();\n         }\n-        final InstructionHandle toThis = ih;\n-        while (ih != null) {\n-            ih = ih.getNext();\n-            if (ih != null && ih.getInstruction() == this) {\n+        final InstructionHandle instructionHandle2 = instructionHandle;\n+        while (instructionHandle != null) {\n+            instructionHandle = instructionHandle.getNext();\n+            if (instructionHandle != null && instructionHandle.getInstruction() == this) {\n                 throw new IllegalStateException(\"physicalSuccessor() called on a shared JsrInstruction.\");\n             }\n         }\n-        return toThis.getNext();\n+        return instructionHandle2.getNext();\n     }\n }\n"}]}
