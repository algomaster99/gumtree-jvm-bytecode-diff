{"diffoscope-json-version": 1, "source1": "first/PerformanceTest.class", "source2": "second/PerformanceTest.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,11 +1,12 @@\n \n package org.apache.commons.csv.perf;\n \n import org.junit.Test;\n+import java.util.Objects;\n import java.util.Iterator;\n import org.apache.commons.csv.CSVRecord;\n import org.apache.commons.csv.CSVFormat;\n import java.io.Reader;\n import java.io.FileReader;\n import java.io.BufferedReader;\n import org.junit.BeforeClass;\n@@ -76,56 +77,55 @@\n     \n     @Test\n     public void testParseBigFileRepeat() throws Exception {\n         long min = Long.MAX_VALUE;\n         int n = 0;\n         while (true) {\n             final int n2 = n;\n-            this.getClass();\n+            Objects.requireNonNull(this);\n             if (n2 >= 10) {\n                 break;\n             }\n             min = Math.min(this.testParseBigFile(false), min);\n             ++n;\n         }\n         final String format = \"Best time out of %,d is %,d milliseconds.\";\n         final Object[] args = new Object[2];\n         final int n3 = 0;\n-        this.getClass();\n+        Objects.requireNonNull(this);\n         args[n3] = Integer.valueOf(10);\n         args[1] = Long.valueOf(min);\n         this.println(String.format(format, args));\n     }\n     \n     @Test\n     public void testReadBigFile() throws Exception {\n         long min = Long.MAX_VALUE;\n         int n = 0;\n         while (true) {\n             final int n2 = n;\n-            this.getClass();\n+            Objects.requireNonNull(this);\n             if (n2 >= 10) {\n                 break;\n             }\n             long currentTimeMillis;\n             long all;\n             try (final BufferedReader bufferedReader = this.createBufferedReader()) {\n                 currentTimeMillis = System.currentTimeMillis();\n-                all = 0L;\n                 all = this.readAll(bufferedReader);\n             }\n             final long n3 = System.currentTimeMillis() - currentTimeMillis;\n             min = Math.min(n3, min);\n             this.println(String.format(\"File read in %,d milliseconds: %,d lines.\", Long.valueOf(n3), Long.valueOf(all)));\n             ++n;\n         }\n         final String format = \"Best time out of %,d is %,d milliseconds.\";\n         final Object[] args = new Object[2];\n         final int n4 = 0;\n-        this.getClass();\n+        Objects.requireNonNull(this);\n         args[n4] = Integer.valueOf(10);\n         args[1] = Long.valueOf(min);\n         this.println(String.format(format, args));\n     }\n     \n     static {\n         BIG_FILE = new File(System.getProperty(\"java.io.tmpdir\"), \"worldcitiespop.txt\");\n"}]}
