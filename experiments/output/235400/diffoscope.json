{"diffoscope-json-version": 1, "source1": "first/IOSpliterator.class", "source2": "second/IOSpliterator.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -3,48 +3,48 @@\n \n import java.util.function.Consumer;\n import java.util.Objects;\n import java.util.Spliterator;\n \n public interface IOSpliterator<T>\n {\n-    default <E> IOSpliterator<E> adapt(final Spliterator<E> iterator) {\n-        return (IOSpliterator<E>)IOSpliteratorAdapter.adapt((Spliterator)iterator);\n+    default <E> IOSpliterator<E> adapt(final Spliterator<E> spliterator) {\n+        return (IOSpliterator<E>)IOSpliteratorAdapter.adapt((Spliterator)spliterator);\n     }\n     \n     default Spliterator<T> asSpliterator() {\n         return (Spliterator<T>)new UncheckedIOSpliterator(this);\n     }\n     \n     default int characteristics() {\n         return this.unwrap().characteristics();\n     }\n     \n     default long estimateSize() {\n         return this.unwrap().estimateSize();\n     }\n     \n-    default void forEachRemaining(final IOConsumer<? super T> action) {\n-        while (this.tryAdvance(action)) {}\n+    default void forEachRemaining(final IOConsumer<? super T> ioConsumer) {\n+        while (this.tryAdvance(ioConsumer)) {}\n     }\n     \n     default IOComparator<? super T> getComparator() {\n         return (IOComparator<? super T>)this.unwrap().getComparator();\n     }\n     \n     default long getExactSizeIfKnown() {\n         return this.unwrap().getExactSizeIfKnown();\n     }\n     \n     default boolean hasCharacteristics(final int characteristics) {\n         return this.unwrap().hasCharacteristics(characteristics);\n     }\n     \n-    default boolean tryAdvance(final IOConsumer<? super T> action) {\n-        return this.unwrap().tryAdvance(((IOConsumer)Objects.requireNonNull(action, \"action\")).asConsumer());\n+    default boolean tryAdvance(final IOConsumer<? super T> obj) {\n+        return this.unwrap().tryAdvance(((IOConsumer)Objects.requireNonNull(obj, \"action\")).asConsumer());\n     }\n     \n     default IOSpliterator<T> trySplit() {\n         return adapt(this.unwrap().trySplit());\n     }\n     \n     Spliterator<T> unwrap();\n"}]}
