{"diffoscope-json-version": 1, "source1": "first/AtomicSafeInitializer.class", "source2": "second/AtomicSafeInitializer.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,29 +1,29 @@\n-  SHA-256 checksum c28af7ebaaac55dbc15bf8ce77e5a376b992f3c8275a03e65f5cfb728c07a648\n+  SHA-256 checksum c98bf32f7bc6b821f6227479514fe2c5b694dbbb61d9d94b1542e1a4b6b41f84\n   Compiled from \"AtomicSafeInitializer.java\"\n public abstract class org.apache.commons.lang3.concurrent.AtomicSafeInitializer<T extends java.lang.Object> extends java.lang.Object implements org.apache.commons.lang3.concurrent.ConcurrentInitializer<T>\n   minor version: 0\n   major version: 51\n   flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT\n   this_class: #10                         // org/apache/commons/lang3/concurrent/AtomicSafeInitializer\n   super_class: #11                        // java/lang/Object\n   interfaces: 1, fields: 2, methods: 3, attributes: 2\n Constant pool:\n-   #1 = Methodref          #11.#42        // java/lang/Object.\"<init>\":()V\n-   #2 = Class              #43            // java/util/concurrent/atomic/AtomicReference\n-   #3 = Methodref          #2.#42         // java/util/concurrent/atomic/AtomicReference.\"<init>\":()V\n-   #4 = Fieldref           #10.#44        // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.factory:Ljava/util/concurrent/atomic/AtomicReference;\n-   #5 = Fieldref           #10.#45        // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.reference:Ljava/util/concurrent/atomic/AtomicReference;\n-   #6 = Methodref          #2.#46         // java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n-   #7 = Methodref          #2.#47         // java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n-   #8 = Methodref          #10.#48        // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.initialize:()Ljava/lang/Object;\n-   #9 = Methodref          #2.#49         // java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V\n-  #10 = Class              #50            // org/apache/commons/lang3/concurrent/AtomicSafeInitializer\n-  #11 = Class              #51            // java/lang/Object\n-  #12 = Class              #52            // org/apache/commons/lang3/concurrent/ConcurrentInitializer\n+   #1 = Methodref          #11.#41        // java/lang/Object.\"<init>\":()V\n+   #2 = Class              #42            // java/util/concurrent/atomic/AtomicReference\n+   #3 = Methodref          #2.#41         // java/util/concurrent/atomic/AtomicReference.\"<init>\":()V\n+   #4 = Fieldref           #10.#43        // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.factory:Ljava/util/concurrent/atomic/AtomicReference;\n+   #5 = Fieldref           #10.#44        // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.reference:Ljava/util/concurrent/atomic/AtomicReference;\n+   #6 = Methodref          #2.#45         // java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n+   #7 = Methodref          #2.#46         // java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+   #8 = Methodref          #10.#47        // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.initialize:()Ljava/lang/Object;\n+   #9 = Methodref          #2.#48         // java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V\n+  #10 = Class              #49            // org/apache/commons/lang3/concurrent/AtomicSafeInitializer\n+  #11 = Class              #50            // java/lang/Object\n+  #12 = Class              #51            // org/apache/commons/lang3/concurrent/ConcurrentInitializer\n   #13 = Utf8               factory\n   #14 = Utf8               Ljava/util/concurrent/atomic/AtomicReference;\n   #15 = Utf8               Signature\n   #16 = Utf8               Ljava/util/concurrent/atomic/AtomicReference<Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer<TT;>;>;\n   #17 = Utf8               reference\n   #18 = Utf8               Ljava/util/concurrent/atomic/AtomicReference<TT;>;\n   #19 = Utf8               <init>\n@@ -37,38 +37,37 @@\n   #27 = Utf8               Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer<TT;>;\n   #28 = Utf8               get\n   #29 = Utf8               ()Ljava/lang/Object;\n   #30 = Utf8               result\n   #31 = Utf8               Ljava/lang/Object;\n   #32 = Utf8               TT;\n   #33 = Utf8               StackMapTable\n-  #34 = Class              #51            // java/lang/Object\n-  #35 = Utf8               Exceptions\n-  #36 = Class              #53            // org/apache/commons/lang3/concurrent/ConcurrentException\n-  #37 = Utf8               ()TT;\n-  #38 = Utf8               initialize\n-  #39 = Utf8               <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;\n-  #40 = Utf8               SourceFile\n-  #41 = Utf8               AtomicSafeInitializer.java\n-  #42 = NameAndType        #19:#20        // \"<init>\":()V\n-  #43 = Utf8               java/util/concurrent/atomic/AtomicReference\n-  #44 = NameAndType        #13:#14        // factory:Ljava/util/concurrent/atomic/AtomicReference;\n-  #45 = NameAndType        #17:#14        // reference:Ljava/util/concurrent/atomic/AtomicReference;\n-  #46 = NameAndType        #28:#29        // get:()Ljava/lang/Object;\n-  #47 = NameAndType        #54:#55        // compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n-  #48 = NameAndType        #38:#29        // initialize:()Ljava/lang/Object;\n-  #49 = NameAndType        #56:#57        // set:(Ljava/lang/Object;)V\n-  #50 = Utf8               org/apache/commons/lang3/concurrent/AtomicSafeInitializer\n-  #51 = Utf8               java/lang/Object\n-  #52 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentInitializer\n-  #53 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentException\n-  #54 = Utf8               compareAndSet\n-  #55 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z\n-  #56 = Utf8               set\n-  #57 = Utf8               (Ljava/lang/Object;)V\n+  #34 = Utf8               Exceptions\n+  #35 = Class              #52            // org/apache/commons/lang3/concurrent/ConcurrentException\n+  #36 = Utf8               ()TT;\n+  #37 = Utf8               initialize\n+  #38 = Utf8               <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;\n+  #39 = Utf8               SourceFile\n+  #40 = Utf8               AtomicSafeInitializer.java\n+  #41 = NameAndType        #19:#20        // \"<init>\":()V\n+  #42 = Utf8               java/util/concurrent/atomic/AtomicReference\n+  #43 = NameAndType        #13:#14        // factory:Ljava/util/concurrent/atomic/AtomicReference;\n+  #44 = NameAndType        #17:#14        // reference:Ljava/util/concurrent/atomic/AtomicReference;\n+  #45 = NameAndType        #28:#29        // get:()Ljava/lang/Object;\n+  #46 = NameAndType        #53:#54        // compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+  #47 = NameAndType        #37:#29        // initialize:()Ljava/lang/Object;\n+  #48 = NameAndType        #55:#56        // set:(Ljava/lang/Object;)V\n+  #49 = Utf8               org/apache/commons/lang3/concurrent/AtomicSafeInitializer\n+  #50 = Utf8               java/lang/Object\n+  #51 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentInitializer\n+  #52 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentException\n+  #53 = Utf8               compareAndSet\n+  #54 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z\n+  #55 = Utf8               set\n+  #56 = Utf8               (Ljava/lang/Object;)V\n {\n   private final java.util.concurrent.atomic.AtomicReference<org.apache.commons.lang3.concurrent.AtomicSafeInitializer<T>> factory;\n     descriptor: Ljava/util/concurrent/atomic/AtomicReference;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n     Signature: #16                          // Ljava/util/concurrent/atomic/AtomicReference<Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer<TT;>;>;\n \n   private final java.util.concurrent.atomic.AtomicReference<T> reference;\n@@ -146,18 +145,18 @@\n       StackMapTable: number_of_entries = 2\n         frame_type = 0 /* same */\n         frame_type = 252 /* append */\n           offset_delta = 37\n           locals = [ class java/lang/Object ]\n     Exceptions:\n       throws org.apache.commons.lang3.concurrent.ConcurrentException\n-    Signature: #37                          // ()TT;\n+    Signature: #36                          // ()TT;\n \n   protected abstract T initialize() throws org.apache.commons.lang3.concurrent.ConcurrentException;\n     descriptor: ()Ljava/lang/Object;\n     flags: (0x0404) ACC_PROTECTED, ACC_ABSTRACT\n     Exceptions:\n       throws org.apache.commons.lang3.concurrent.ConcurrentException\n-    Signature: #37                          // ()TT;\n+    Signature: #36                          // ()TT;\n }\n-Signature: #39                          // <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;\n+Signature: #38                          // <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;\n SourceFile: \"AtomicSafeInitializer.java\"\n"}]}
