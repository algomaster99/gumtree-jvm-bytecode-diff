{"diffoscope-json-version": 1, "source1": "first/StackMapEntry.class", "source2": "second/StackMapEntry.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,14 +11,18 @@\n     private static final StackMapType[] EMPTY_STACK_MAP_TYPE_ARRAY;\n     private int frameType;\n     private int byteCodeOffset;\n     private StackMapType[] typesOfLocals;\n     private StackMapType[] typesOfStackItems;\n     private ConstantPool constantPool;\n     \n+    static {\n+        EMPTY_STACK_MAP_TYPE_ARRAY = new StackMapType[0];\n+    }\n+    \n     StackMapEntry(final DataInput input, final ConstantPool constantPool) throws IOException {\n         this(input.readByte() & 0xFF, -1, null, null, constantPool);\n         if (this.frameType >= 0 && this.frameType <= 63) {\n             this.byteCodeOffset = this.frameType - 0;\n         }\n         else if (this.frameType >= 64 && this.frameType <= 127) {\n             this.byteCodeOffset = this.frameType - 64;\n@@ -107,29 +111,35 @@\n                 file.writeShort(this.byteCodeOffset);\n             }\n             else if (this.frameType == 251) {\n                 file.writeShort(this.byteCodeOffset);\n             }\n             else if (this.frameType >= 252 && this.frameType <= 254) {\n                 file.writeShort(this.byteCodeOffset);\n-                for (final StackMapType type : this.typesOfLocals) {\n+                StackMapType[] typesOfLocals;\n+                for (int length = (typesOfLocals = this.typesOfLocals).length, i = 0; i < length; ++i) {\n+                    final StackMapType type = typesOfLocals[i];\n                     type.dump(file);\n                 }\n             }\n             else {\n                 if (this.frameType != 255) {\n                     throw new ClassFormatException(\"Invalid Stack map table tag: \" + this.frameType);\n                 }\n                 file.writeShort(this.byteCodeOffset);\n                 file.writeShort(this.typesOfLocals.length);\n-                for (final StackMapType type : this.typesOfLocals) {\n+                StackMapType[] typesOfLocals2;\n+                for (int length2 = (typesOfLocals2 = this.typesOfLocals).length, j = 0; j < length2; ++j) {\n+                    final StackMapType type = typesOfLocals2[j];\n                     type.dump(file);\n                 }\n                 file.writeShort(this.typesOfStackItems.length);\n-                for (final StackMapType type : this.typesOfStackItems) {\n+                StackMapType[] typesOfStackItems;\n+                for (int length3 = (typesOfStackItems = this.typesOfStackItems).length, k = 0; k < length3; ++k) {\n+                    final StackMapType type = typesOfStackItems[k];\n                     type.dump(file);\n                 }\n             }\n         }\n     }\n     \n     public int getByteCodeOffset() {\n@@ -155,27 +165,33 @@\n             return 3 + (this.typesOfStackItems[0].hasIndex() ? 3 : 1);\n         }\n         if ((this.frameType >= 248 && this.frameType <= 250) || this.frameType == 251) {\n             return 3;\n         }\n         if (this.frameType >= 252 && this.frameType <= 254) {\n             int len = 3;\n-            for (final StackMapType types_of_local : this.typesOfLocals) {\n+            StackMapType[] typesOfLocals;\n+            for (int length = (typesOfLocals = this.typesOfLocals).length, i = 0; i < length; ++i) {\n+                final StackMapType types_of_local = typesOfLocals[i];\n                 len += (types_of_local.hasIndex() ? 3 : 1);\n             }\n             return len;\n         }\n         if (this.frameType != 255) {\n             throw new IllegalStateException(\"Invalid StackMap frameType: \" + this.frameType);\n         }\n         int len = 7;\n-        for (final StackMapType types_of_local : this.typesOfLocals) {\n+        StackMapType[] typesOfLocals2;\n+        for (int length2 = (typesOfLocals2 = this.typesOfLocals).length, j = 0; j < length2; ++j) {\n+            final StackMapType types_of_local = typesOfLocals2[j];\n             len += (types_of_local.hasIndex() ? 3 : 1);\n         }\n-        for (final StackMapType types_of_stack_item : this.typesOfStackItems) {\n+        StackMapType[] typesOfStackItems;\n+        for (int length3 = (typesOfStackItems = this.typesOfStackItems).length, k = 0; k < length3; ++k) {\n+            final StackMapType types_of_stack_item = typesOfStackItems[k];\n             len += (types_of_stack_item.hasIndex() ? 3 : 1);\n         }\n         return len;\n     }\n     \n     public int getNumberOfLocals() {\n         return this.typesOfLocals.length;\n@@ -209,24 +225,16 @@\n             if (new_offset > 63) {\n                 this.frameType = 247;\n             }\n             else {\n                 this.frameType = 64 + new_offset;\n             }\n         }\n-        else if (this.frameType != 247) {\n-            if (this.frameType < 248 || this.frameType > 250) {\n-                if (this.frameType != 251) {\n-                    if (this.frameType < 252 || this.frameType > 254) {\n-                        if (this.frameType != 255) {\n-                            throw new IllegalStateException(\"Invalid StackMap frameType: \" + this.frameType);\n-                        }\n-                    }\n-                }\n-            }\n+        else if (this.frameType != 247 && (this.frameType < 248 || this.frameType > 250) && this.frameType != 251 && (this.frameType < 252 || this.frameType > 254) && this.frameType != 255) {\n+            throw new IllegalStateException(\"Invalid StackMap frameType: \" + this.frameType);\n         }\n         this.byteCodeOffset = new_offset;\n     }\n     \n     public void setConstantPool(final ConstantPool constantPool) {\n         this.constantPool = constantPool;\n     }\n@@ -234,24 +242,16 @@\n     public void setFrameType(final int f) {\n         if (f >= 0 && f <= 63) {\n             this.byteCodeOffset = f - 0;\n         }\n         else if (f >= 64 && f <= 127) {\n             this.byteCodeOffset = f - 64;\n         }\n-        else if (f != 247) {\n-            if (f < 248 || f > 250) {\n-                if (f != 251) {\n-                    if (f < 252 || f > 254) {\n-                        if (f != 255) {\n-                            throw new IllegalArgumentException(\"Invalid StackMap frameType\");\n-                        }\n-                    }\n-                }\n-            }\n+        else if (f != 247 && (f < 248 || f > 250) && f != 251 && (f < 252 || f > 254) && f != 255) {\n+            throw new IllegalArgumentException(\"Invalid StackMap frameType\");\n         }\n         this.frameType = f;\n     }\n     \n     @Deprecated\n     public void setNumberOfLocals(final int n) {\n     }\n@@ -320,12 +320,8 @@\n         buf.append(\")\");\n         return buf.toString();\n     }\n     \n     public void updateByteCodeOffset(final int delta) {\n         this.setByteCodeOffset(this.byteCodeOffset + delta);\n     }\n-    \n-    static {\n-        EMPTY_STACK_MAP_TYPE_ARRAY = new StackMapType[0];\n-    }\n }\n"}]}
