{"diffoscope-json-version": 1, "source1": "first/BcBands.class", "source2": "second/BcBands.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -168,29 +168,30 @@\n         int bcSuperMethodCount = 0;\n         int bcInitRefCount = 0;\n         int bcEscCount = 0;\n         int bcEscRefCount = 0;\n         final AttributeLayout abstractModifier = attributeDefinitionMap.getAttributeLayout(\"ACC_ABSTRACT\", 2);\n         final AttributeLayout nativeModifier = attributeDefinitionMap.getAttributeLayout(\"ACC_NATIVE\", 2);\n         this.methodByteCodePacked = new byte[classCount][][];\n+        int bcParsed = 0;\n         final List<Boolean> switchIsTableSwitch = new ArrayList<Boolean>();\n         this.wideByteCodes = new ArrayList<Integer>();\n         for (int c = 0; c < classCount; ++c) {\n             final int numberOfMethods = methodFlags[c].length;\n             this.methodByteCodePacked[c] = new byte[numberOfMethods][];\n             for (int m = 0; m < numberOfMethods; ++m) {\n                 final long methodFlag = methodFlags[c][m];\n                 if (!abstractModifier.matches(methodFlag) && !nativeModifier.matches(methodFlag)) {\n                     final ByteArrayOutputStream codeBytes = new ByteArrayOutputStream();\n                     byte code;\n                     while ((code = (byte)(0xFF & in.read())) != -1) {\n                         codeBytes.write(code);\n                     }\n                     this.methodByteCodePacked[c][m] = codeBytes.toByteArray();\n-                    final int length = this.methodByteCodePacked[c][m].length;\n+                    bcParsed += this.methodByteCodePacked[c][m].length;\n                     final int[] codes = new int[this.methodByteCodePacked[c][m].length];\n                     for (int i = 0; i < codes.length; ++i) {\n                         codes[i] = (this.methodByteCodePacked[c][m][i] & 0xFF);\n                     }\n                     for (int i = 0; i < this.methodByteCodePacked[c][m].length; ++i) {\n                         final int codePacked = 0xFF & this.methodByteCodePacked[c][m][i];\n                         switch (codePacked) {\n"}]}
