{"diffoscope-json-version": 1, "source1": "first/HuffmanDecoder$DecodingMemory.class", "source2": "second/HuffmanDecoder$DecodingMemory.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,45 +8,45 @@\n     private int wHead;\n     private boolean wrappedAround;\n     \n     private DecodingMemory() {\n         this(16);\n     }\n     \n-    private DecodingMemory(final int bits) {\n-        this.memory = new byte[1 << bits];\n+    private DecodingMemory(final int n) {\n+        this.memory = new byte[1 << n];\n         this.mask = this.memory.length - 1;\n     }\n     \n     byte add(final byte b) {\n         this.memory[this.wHead] = b;\n         this.wHead = this.incCounter(this.wHead);\n         return b;\n     }\n     \n-    void add(final byte[] b, final int off, final int len) {\n-        for (int i = off; i < off + len; ++i) {\n-            this.add(b[i]);\n+    void add(final byte[] array, final int n, final int n2) {\n+        for (int i = n; i < n + n2; ++i) {\n+            this.add(array[i]);\n         }\n     }\n     \n-    private int incCounter(final int counter) {\n-        final int newCounter = counter + 1 & this.mask;\n-        if (!this.wrappedAround && newCounter < counter) {\n+    private int incCounter(final int n) {\n+        final int n2 = n + 1 & this.mask;\n+        if (!this.wrappedAround && n2 < n) {\n             this.wrappedAround = true;\n         }\n-        return newCounter;\n+        return n2;\n     }\n     \n-    void recordToBuffer(final int distance, final int length, final byte[] buff) {\n-        if (distance > this.memory.length) {\n-            throw new IllegalStateException(\"Illegal distance parameter: \" + distance);\n+    void recordToBuffer(final int n, final int n2, final byte[] array) {\n+        if (n > this.memory.length) {\n+            throw new IllegalStateException(\"Illegal distance parameter: \" + n);\n         }\n-        final int start = this.wHead - distance & this.mask;\n-        if (!this.wrappedAround && start >= this.wHead) {\n-            throw new IllegalStateException(\"Attempt to read beyond memory: dist=\" + distance);\n+        final int n3 = this.wHead - n & this.mask;\n+        if (!this.wrappedAround && n3 >= this.wHead) {\n+            throw new IllegalStateException(\"Attempt to read beyond memory: dist=\" + n);\n         }\n-        for (int i = 0, pos = start; i < length; ++i, pos = this.incCounter(pos)) {\n-            buff[i] = this.add(this.memory[pos]);\n+        for (int i = 0, incCounter = n3; i < n2; ++i, incCounter = this.incCounter(incCounter)) {\n+            array[i] = this.add(this.memory[incCounter]);\n         }\n     }\n }\n"}]}
