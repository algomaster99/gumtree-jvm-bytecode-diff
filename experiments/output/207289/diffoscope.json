{"diffoscope-json-version": 1, "source1": "first/CompositeFileComparator.class", "source2": "second/CompositeFileComparator.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,69 +1,71 @@\n \n package org.apache.commons.io.comparator;\n \n-import java.util.Iterator;\n import java.util.List;\n+import java.util.Iterator;\n import java.util.ArrayList;\n import java.io.File;\n import java.util.Comparator;\n import java.io.Serializable;\n \n public class CompositeFileComparator extends AbstractFileComparator implements Serializable\n {\n     private static final Comparator<?>[] EMPTY_COMPARATOR_ARRAY;\n     private static final long serialVersionUID = -2224170307287243428L;\n     private static final Comparator<?>[] NO_COMPARATORS;\n     private final Comparator<File>[] delegates;\n     \n-    public CompositeFileComparator(final Comparator<File>... delegates) {\n-        if (delegates == null) {\n+    public CompositeFileComparator(final Comparator<File>... array) {\n+        if (array == null) {\n             this.delegates = (Comparator[])CompositeFileComparator.NO_COMPARATORS;\n         }\n         else {\n-            System.arraycopy(delegates, 0, this.delegates = new Comparator[delegates.length], 0, delegates.length);\n+            System.arraycopy(array, 0, this.delegates = new Comparator[array.length], 0, array.length);\n         }\n     }\n     \n-    public CompositeFileComparator(final Iterable<Comparator<File>> delegates) {\n-        if (delegates == null) {\n+    public CompositeFileComparator(final Iterable<Comparator<File>> iterable) {\n+        if (iterable == null) {\n             this.delegates = (Comparator[])CompositeFileComparator.NO_COMPARATORS;\n         }\n         else {\n-            final List<Comparator<File>> list = new ArrayList<Comparator<File>>();\n-            for (final Comparator<File> comparator : delegates) {\n-                list.add(comparator);\n+            final ArrayList list = new ArrayList();\n+            final Iterator<Comparator<File>> iterator = iterable.iterator();\n+            while (iterator.hasNext()) {\n+                list.add(iterator.next());\n             }\n-            this.delegates = list.toArray(CompositeFileComparator.EMPTY_COMPARATOR_ARRAY);\n+            this.delegates = (Comparator[])list.toArray(CompositeFileComparator.EMPTY_COMPARATOR_ARRAY);\n         }\n     }\n     \n-    public int compare(final File file1, final File file2) {\n-        int result = 0;\n-        for (final Comparator<File> delegate : this.delegates) {\n-            result = delegate.compare(file1, file2);\n-            if (result != 0) {\n+    public int compare(final File file, final File file2) {\n+        int compare = 0;\n+        final Comparator<File>[] delegates = this.delegates;\n+        for (int length = delegates.length, i = 0; i < length; ++i) {\n+            compare = delegates[i].compare(file, file2);\n+            if (compare != 0) {\n                 break;\n             }\n         }\n-        return result;\n+        return compare;\n     }\n     \n     public String toString() {\n-        final StringBuilder builder = new StringBuilder();\n-        builder.append(super.toString());\n-        builder.append('{');\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(super.toString());\n+        sb.append('{');\n         for (int i = 0; i < this.delegates.length; ++i) {\n             if (i > 0) {\n-                builder.append(',');\n+                sb.append(',');\n             }\n-            builder.append(this.delegates[i]);\n+            sb.append(this.delegates[i]);\n         }\n-        builder.append('}');\n-        return builder.toString();\n+        sb.append('}');\n+        return sb.toString();\n     }\n     \n     static {\n         EMPTY_COMPARATOR_ARRAY = new Comparator[0];\n         NO_COMPARATORS = new Comparator[0];\n     }\n }\n"}]}
