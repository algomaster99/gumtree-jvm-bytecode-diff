{"diffoscope-json-version": 1, "source1": "first/Languages.class", "source2": "second/Languages.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,70 +1,93 @@\n \n package org.apache.commons.codec.language.bm;\n \n-import java.util.EnumMap;\n import java.util.Collections;\n import java.util.Scanner;\n import org.apache.commons.codec.Resources;\n import java.util.HashSet;\n+import java.util.EnumMap;\n import java.util.Set;\n import java.util.Map;\n \n public class Languages\n {\n     public static final String ANY = \"any\";\n     private static final Map<NameType, Languages> LANGUAGES;\n     private final Set<String> languages;\n     public static final Languages.LanguageSet NO_LANGUAGES;\n     public static final Languages.LanguageSet ANY_LANGUAGE;\n     \n+    static {\n+        LANGUAGES = new EnumMap<NameType, Languages>(NameType.class);\n+        NameType[] values;\n+        for (int length = (values = NameType.values()).length, i = 0; i < length; ++i) {\n+            final NameType s = values[i];\n+            Languages.LANGUAGES.put(s, getInstance(langResourceName(s)));\n+        }\n+        NO_LANGUAGES = (Languages.LanguageSet)new Languages.Languages$1();\n+        ANY_LANGUAGE = (Languages.LanguageSet)new Languages.Languages$2();\n+    }\n+    \n     public static Languages getInstance(final NameType nameType) {\n         return Languages.LANGUAGES.get(nameType);\n     }\n     \n     public static Languages getInstance(final String languagesResourceName) {\n         final Set<String> ls = new HashSet<String>();\n-        try (final Scanner lsScanner = new Scanner(Resources.getInputStream(languagesResourceName), \"UTF-8\")) {\n-            boolean inExtendedComment = false;\n-            while (lsScanner.hasNextLine()) {\n-                final String line = lsScanner.nextLine().trim();\n-                if (inExtendedComment) {\n-                    if (!line.endsWith(\"*/\")) {\n-                        continue;\n+        Throwable t = null;\n+        try {\n+            final Scanner lsScanner = new Scanner(Resources.getInputStream(languagesResourceName), \"UTF-8\");\n+            try {\n+                boolean inExtendedComment = false;\n+                while (lsScanner.hasNextLine()) {\n+                    final String line = lsScanner.nextLine().trim();\n+                    if (inExtendedComment) {\n+                        if (!line.endsWith(\"*/\")) {\n+                            continue;\n+                        }\n+                        inExtendedComment = false;\n+                    }\n+                    else if (line.startsWith(\"/*\")) {\n+                        inExtendedComment = true;\n+                    }\n+                    else {\n+                        if (line.length() <= 0) {\n+                            continue;\n+                        }\n+                        ls.add(line);\n                     }\n-                    inExtendedComment = false;\n                 }\n-                else if (line.startsWith(\"/*\")) {\n-                    inExtendedComment = true;\n+                return new Languages(Collections.unmodifiableSet((Set<? extends String>)ls));\n+            }\n+            finally {\n+                if (lsScanner != null) {\n+                    lsScanner.close();\n                 }\n-                else {\n-                    if (line.length() <= 0) {\n-                        continue;\n-                    }\n-                    ls.add(line);\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n                 }\n             }\n-            return new Languages(Collections.unmodifiableSet((Set<? extends String>)ls));\n         }\n     }\n     \n     private static String langResourceName(final NameType nameType) {\n         return String.format(\"org/apache/commons/codec/language/bm/%s_languages.txt\", nameType.getName());\n     }\n     \n     private Languages(final Set<String> languages) {\n         this.languages = languages;\n     }\n     \n     public Set<String> getLanguages() {\n         return this.languages;\n     }\n-    \n-    static {\n-        LANGUAGES = new EnumMap<NameType, Languages>(NameType.class);\n-        for (final NameType s : NameType.values()) {\n-            Languages.LANGUAGES.put(s, getInstance(langResourceName(s)));\n-        }\n-        NO_LANGUAGES = (Languages.LanguageSet)new Languages.Languages$1();\n-        ANY_LANGUAGE = (Languages.LanguageSet)new Languages.Languages$2();\n-    }\n }\n"}]}
