{"diffoscope-json-version": 1, "source1": "first/WriteTagCheck.class", "source2": "second/WriteTagCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -27,70 +27,69 @@\n     }\n     \n     public void setTag(final String tag) {\n         this.tag = tag;\n         this.tagRegExp = CommonUtil.createPattern(tag + \"\\\\s*(.*$)\");\n     }\n     \n-    public void setTagFormat(final Pattern pattern) {\n-        this.tagFormat = pattern;\n+    public void setTagFormat(final Pattern tagFormat) {\n+        this.tagFormat = tagFormat;\n     }\n     \n-    public final void setTagSeverity(final SeverityLevel severity) {\n-        this.tagSeverity = severity;\n+    public final void setTagSeverity(final SeverityLevel tagSeverity) {\n+        this.tagSeverity = tagSeverity;\n     }\n     \n     public int[] getDefaultTokens() {\n         return new int[] { 15, 14, 154, 157, 199 };\n     }\n     \n     public int[] getAcceptableTokens() {\n         return new int[] { 15, 14, 154, 157, 9, 8, 155, 161, 199, 203 };\n     }\n     \n     public int[] getRequiredTokens() {\n         return CommonUtil.EMPTY_INT_ARRAY;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        final FileContents contents = this.getFileContents();\n-        final int lineNo = ast.getLineNo();\n-        final TextBlock cmt = contents.getJavadocBefore(lineNo);\n-        if (cmt == null) {\n+    public void visitToken(final DetailAST detailAST) {\n+        final FileContents fileContents = this.getFileContents();\n+        final int lineNo = detailAST.getLineNo();\n+        final TextBlock javadocBefore = fileContents.getJavadocBefore(lineNo);\n+        if (javadocBefore == null) {\n             this.log(lineNo, \"type.missingTag\", new Object[] { this.tag });\n         }\n         else {\n-            this.checkTag(lineNo, cmt.getText());\n+            this.checkTag(lineNo, javadocBefore.getText());\n         }\n     }\n     \n-    private void checkTag(final int lineNo, final String... comment) {\n+    private void checkTag(final int n, final String... array) {\n         if (this.tagRegExp != null) {\n-            boolean hasTag = false;\n-            for (int i = 0; i < comment.length; ++i) {\n-                final String commentValue = comment[i];\n-                final Matcher matcher = this.tagRegExp.matcher(commentValue);\n+            boolean b = false;\n+            for (int i = 0; i < array.length; ++i) {\n+                final String input = array[i];\n+                final Matcher matcher = this.tagRegExp.matcher(input);\n                 if (matcher.find()) {\n-                    hasTag = true;\n-                    final int contentStart = matcher.start(1);\n-                    final String content = commentValue.substring(contentStart);\n-                    if (this.tagFormat == null || this.tagFormat.matcher(content).find()) {\n-                        this.logTag(lineNo + i - comment.length, this.tag, content);\n+                    b = true;\n+                    final String substring = input.substring(matcher.start(1));\n+                    if (this.tagFormat == null || this.tagFormat.matcher(substring).find()) {\n+                        this.logTag(n + i - array.length, this.tag, substring);\n                     }\n                     else {\n-                        this.log(lineNo + i - comment.length, \"type.tagFormat\", new Object[] { this.tag, this.tagFormat.pattern() });\n+                        this.log(n + i - array.length, \"type.tagFormat\", new Object[] { this.tag, this.tagFormat.pattern() });\n                     }\n                 }\n             }\n-            if (!hasTag) {\n-                this.log(lineNo, \"type.missingTag\", new Object[] { this.tag });\n+            if (!b) {\n+                this.log(n, \"type.missingTag\", new Object[] { this.tag });\n             }\n         }\n     }\n     \n-    private void logTag(final int line, final String tagName, final String tagValue) {\n-        final String originalSeverity = this.getSeverity();\n+    private void logTag(final int n, final String s, final String s2) {\n+        final String severity = this.getSeverity();\n         this.setSeverity(this.tagSeverity.getName());\n-        this.log(line, \"javadoc.writeTag\", new Object[] { tagName, tagValue });\n-        this.setSeverity(originalSeverity);\n+        this.log(n, \"javadoc.writeTag\", new Object[] { s, s2 });\n+        this.setSeverity(severity);\n     }\n }\n"}]}
