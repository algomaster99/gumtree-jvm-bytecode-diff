{"diffoscope-json-version": 1, "source1": "first/OS400FTPEntryParser.class", "source2": "second/OS400FTPEntryParser.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,92 +12,92 @@\n     private static final String DEFAULT_DATE_FORMAT = \"yy/MM/dd HH:mm:ss\";\n     private static final String REGEX = \"(\\\\S+)\\\\s+(?:(\\\\d+)\\\\s+)?(?:(\\\\S+)\\\\s+(\\\\S+)\\\\s+)?(\\\\*STMF|\\\\*DIR|\\\\*FILE|\\\\*MEM)\\\\s+(?:(\\\\S+)\\\\s*)?\";\n     \n     public OS400FTPEntryParser() {\n         this(null);\n     }\n     \n-    public OS400FTPEntryParser(final FTPClientConfig config) {\n+    public OS400FTPEntryParser(final FTPClientConfig ftpClientConfig) {\n         super(\"(\\\\S+)\\\\s+(?:(\\\\d+)\\\\s+)?(?:(\\\\S+)\\\\s+(\\\\S+)\\\\s+)?(\\\\*STMF|\\\\*DIR|\\\\*FILE|\\\\*MEM)\\\\s+(?:(\\\\S+)\\\\s*)?\");\n-        this.configure(config);\n+        this.configure(ftpClientConfig);\n     }\n     \n-    public FTPFile parseFTPEntry(final String entry) {\n-        final FTPFile file = new FTPFile();\n-        file.setRawListing(entry);\n-        if (this.matches(entry)) {\n-            final String usr = this.group(1);\n-            final String filesize = this.group(2);\n-            String datestr = \"\";\n+    public FTPFile parseFTPEntry(final String rawListing) {\n+        final FTPFile ftpFile = new FTPFile();\n+        ftpFile.setRawListing(rawListing);\n+        if (this.matches(rawListing)) {\n+            final String group = this.group(1);\n+            final String group2 = this.group(2);\n+            String string = \"\";\n             if (!this.isNullOrEmpty(this.group(3)) || !this.isNullOrEmpty(this.group(4))) {\n-                datestr = this.group(3) + \" \" + this.group(4);\n+                string = this.group(3) + \" \" + this.group(4);\n             }\n-            final String typeStr = this.group(5);\n+            final String group3 = this.group(5);\n             String name = this.group(6);\n-            boolean mustScanForPathSeparator = true;\n+            boolean b = true;\n             try {\n-                file.setTimestamp(super.parseTimestamp(datestr));\n+                ftpFile.setTimestamp(super.parseTimestamp(string));\n             }\n             catch (final ParseException ex) {}\n             int type;\n-            if (typeStr.equalsIgnoreCase(\"*STMF\")) {\n+            if (group3.equalsIgnoreCase(\"*STMF\")) {\n                 type = 0;\n-                if (this.isNullOrEmpty(filesize) || this.isNullOrEmpty(name)) {\n+                if (this.isNullOrEmpty(group2) || this.isNullOrEmpty(name)) {\n                     return null;\n                 }\n             }\n-            else if (typeStr.equalsIgnoreCase(\"*DIR\")) {\n+            else if (group3.equalsIgnoreCase(\"*DIR\")) {\n                 type = 1;\n-                if (this.isNullOrEmpty(filesize) || this.isNullOrEmpty(name)) {\n+                if (this.isNullOrEmpty(group2) || this.isNullOrEmpty(name)) {\n                     return null;\n                 }\n             }\n-            else if (typeStr.equalsIgnoreCase(\"*FILE\")) {\n+            else if (group3.equalsIgnoreCase(\"*FILE\")) {\n                 if (name == null || !name.toUpperCase(Locale.ROOT).endsWith(\".SAVF\")) {\n                     return null;\n                 }\n-                mustScanForPathSeparator = false;\n+                b = false;\n                 type = 0;\n             }\n-            else if (typeStr.equalsIgnoreCase(\"*MEM\")) {\n-                mustScanForPathSeparator = false;\n+            else if (group3.equalsIgnoreCase(\"*MEM\")) {\n+                b = false;\n                 type = 0;\n                 if (this.isNullOrEmpty(name)) {\n                     return null;\n                 }\n-                if (!this.isNullOrEmpty(filesize) || !this.isNullOrEmpty(datestr)) {\n+                if (!this.isNullOrEmpty(group2) || !this.isNullOrEmpty(string)) {\n                     return null;\n                 }\n                 name = name.replace('/', File.separatorChar);\n             }\n             else {\n                 type = 3;\n             }\n-            file.setType(type);\n-            file.setUser(usr);\n+            ftpFile.setType(type);\n+            ftpFile.setUser(group);\n             try {\n-                file.setSize(Long.parseLong(filesize));\n+                ftpFile.setSize(Long.parseLong(group2));\n             }\n             catch (final NumberFormatException ex2) {}\n             if (name.endsWith(\"/\")) {\n                 name = name.substring(0, name.length() - 1);\n             }\n-            if (mustScanForPathSeparator) {\n-                final int pos = name.lastIndexOf(47);\n-                if (pos > -1) {\n-                    name = name.substring(pos + 1);\n+            if (b) {\n+                final int lastIndex = name.lastIndexOf(47);\n+                if (lastIndex > -1) {\n+                    name = name.substring(lastIndex + 1);\n                 }\n             }\n-            file.setName(name);\n-            return file;\n+            ftpFile.setName(name);\n+            return ftpFile;\n         }\n         return null;\n     }\n     \n-    private boolean isNullOrEmpty(final String string) {\n-        return string == null || string.length() == 0;\n+    private boolean isNullOrEmpty(final String s) {\n+        return s == null || s.length() == 0;\n     }\n     \n     protected FTPClientConfig getDefaultConfiguration() {\n         return new FTPClientConfig(\"OS/400\", \"yy/MM/dd HH:mm:ss\", (String)null);\n     }\n }\n"}]}
