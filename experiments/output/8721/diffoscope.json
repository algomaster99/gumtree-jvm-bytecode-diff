{"diffoscope-json-version": 1, "source1": "first/AnnotationEntryGen.class", "source2": "second/AnnotationEntryGen.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -161,45 +161,26 @@\n                 }\n                 else {\n                     ++countInvisible;\n                 }\n             }\n             final ByteArrayOutputStream rvaBytes = new ByteArrayOutputStream();\n             final ByteArrayOutputStream riaBytes = new ByteArrayOutputStream();\n-            final DataOutputStream rvaDos = new DataOutputStream(rvaBytes);\n-            Throwable x0 = null;\n-            try {\n-                final DataOutputStream riaDos = new DataOutputStream(riaBytes);\n-                Throwable x2 = null;\n-                try {\n-                    rvaDos.writeShort(countVisible);\n-                    riaDos.writeShort(countInvisible);\n-                    for (final AnnotationEntryGen a2 : annotationEntryGens) {\n-                        if (a2.isRuntimeVisible()) {\n-                            a2.dump(rvaDos);\n-                        }\n-                        else {\n-                            a2.dump(riaDos);\n-                        }\n+            try (final DataOutputStream rvaDos = new DataOutputStream(rvaBytes);\n+                 final DataOutputStream riaDos = new DataOutputStream(riaBytes)) {\n+                rvaDos.writeShort(countVisible);\n+                riaDos.writeShort(countInvisible);\n+                for (final AnnotationEntryGen a2 : annotationEntryGens) {\n+                    if (a2.isRuntimeVisible()) {\n+                        a2.dump(rvaDos);\n+                    }\n+                    else {\n+                        a2.dump(riaDos);\n                     }\n                 }\n-                catch (final Throwable t) {\n-                    x2 = t;\n-                    throw t;\n-                }\n-                finally {\n-                    $closeResource(x2, riaDos);\n-                }\n-            }\n-            catch (final Throwable t2) {\n-                x0 = t2;\n-                throw t2;\n-            }\n-            finally {\n-                $closeResource(x0, rvaDos);\n             }\n             final byte[] rvaData = rvaBytes.toByteArray();\n             final byte[] riaData = riaBytes.toByteArray();\n             int rvaIndex = -1;\n             int riaIndex = -1;\n             if (rvaData.length > 2) {\n                 rvaIndex = cp.addUtf8(\"RuntimeVisibleAnnotations\");\n@@ -244,59 +225,41 @@\n                             ++array2[n2];\n                             ++totalInvisCount;\n                         }\n                     }\n                 }\n             }\n             final ByteArrayOutputStream rvaBytes = new ByteArrayOutputStream();\n-            final DataOutputStream rvaDos = new DataOutputStream(rvaBytes);\n-            Throwable x0 = null;\n-            try {\n+            try (final DataOutputStream rvaDos = new DataOutputStream(rvaBytes)) {\n                 rvaDos.writeByte(vec.length);\n                 for (int j = 0; j < vec.length; ++j) {\n                     rvaDos.writeShort(visCount[j]);\n                     if (visCount[j] > 0) {\n                         for (final AnnotationEntryGen element2 : vec[j]) {\n                             if (element2.isRuntimeVisible()) {\n                                 element2.dump(rvaDos);\n                             }\n                         }\n                     }\n                 }\n             }\n-            catch (final Throwable t) {\n-                x0 = t;\n-                throw t;\n-            }\n-            finally {\n-                $closeResource(x0, rvaDos);\n-            }\n             final ByteArrayOutputStream riaBytes = new ByteArrayOutputStream();\n-            final DataOutputStream riaDos = new DataOutputStream(riaBytes);\n-            Throwable x2 = null;\n-            try {\n+            try (final DataOutputStream riaDos = new DataOutputStream(riaBytes)) {\n                 riaDos.writeByte(vec.length);\n                 for (int k = 0; k < vec.length; ++k) {\n                     riaDos.writeShort(invisCount[k]);\n                     if (invisCount[k] > 0) {\n                         for (final AnnotationEntryGen element3 : vec[k]) {\n                             if (!element3.isRuntimeVisible()) {\n                                 element3.dump(riaDos);\n                             }\n                         }\n                     }\n                 }\n             }\n-            catch (final Throwable t2) {\n-                x2 = t2;\n-                throw t2;\n-            }\n-            finally {\n-                $closeResource(x2, riaDos);\n-            }\n             final byte[] rvaData = rvaBytes.toByteArray();\n             final byte[] riaData = riaBytes.toByteArray();\n             int rvaIndex = -1;\n             int riaIndex = -1;\n             if (totalVisCount > 0) {\n                 rvaIndex = cp.addUtf8(\"RuntimeVisibleParameterAnnotations\");\n             }\n@@ -314,22 +277,8 @@\n         }\n         catch (final IOException e) {\n             System.err.println(\"IOException whilst processing parameter annotations\");\n             e.printStackTrace();\n             return null;\n         }\n     }\n-    \n-    private static /* synthetic */ void $closeResource(final Throwable x0, final AutoCloseable x1) {\n-        if (x0 != null) {\n-            try {\n-                x1.close();\n-            }\n-            catch (final Throwable exception) {\n-                x0.addSuppressed(exception);\n-            }\n-        }\n-        else {\n-            x1.close();\n-        }\n-    }\n }\n"}]}
