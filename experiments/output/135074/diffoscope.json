{"diffoscope-json-version": 1, "source1": "first/MethodHTML.class", "source2": "second/MethodHTML.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -20,15 +20,15 @@\n     private final ConstantHTML constantHtml;\n     private final AttributeHTML attribute_html;\n     \n     MethodHTML(final String dir, final String class_name, final Method[] methods, final Field[] fields, final ConstantHTML constant_html, final AttributeHTML attribute_html) throws IOException {\n         this.className = class_name;\n         this.attribute_html = attribute_html;\n         this.constantHtml = constant_html;\n-        (this.file = new PrintWriter(new FileOutputStream(dir + class_name + \"_methods.html\"))).println(\"<HTML><BODY BGCOLOR=\\\"#C0C0C0\\\"><TABLE BORDER=0>\");\n+        (this.file = new PrintWriter(new FileOutputStream(String.valueOf(dir) + class_name + \"_methods.html\"))).println(\"<HTML><BODY BGCOLOR=\\\"#C0C0C0\\\"><TABLE BORDER=0>\");\n         this.file.println(\"<TR><TH ALIGN=LEFT>Access&nbsp;flags</TH><TH ALIGN=LEFT>Type</TH><TH ALIGN=LEFT>Field&nbsp;name</TH></TR>\");\n         for (final Field field : fields) {\n             this.writeField(field);\n         }\n         this.file.println(\"</TABLE>\");\n         this.file.println(\"<TABLE BORDER=0><TR><TH ALIGN=LEFT>Access&nbsp;flags</TH><TH ALIGN=LEFT>Return&nbsp;type</TH><TH ALIGN=LEFT>Method&nbsp;name</TH><TH ALIGN=LEFT>Arguments</TH></TR>\");\n         for (int i = 0; i < methods.length; ++i) {\n@@ -42,15 +42,15 @@\n         final String type = Utility.signatureToString(field.getSignature());\n         final String name = field.getName();\n         String access = Utility.accessToString(field.getAccessFlags());\n         access = Utility.replace(access, \" \", \"&nbsp;\");\n         this.file.print(\"<TR><TD><FONT COLOR=\\\"#FF0000\\\">\" + access + \"</FONT></TD>\\n<TD>\" + Class2HTML.referenceType(type) + \"</TD><TD><A NAME=\\\"field\" + name + \"\\\">\" + name + \"</A></TD>\");\n         final Attribute[] attributes = field.getAttributes();\n         for (int i = 0; i < attributes.length; ++i) {\n-            this.attribute_html.writeAttribute(attributes[i], name + \"@\" + i);\n+            this.attribute_html.writeAttribute(attributes[i], String.valueOf(name) + \"@\" + i);\n         }\n         for (int i = 0; i < attributes.length; ++i) {\n             if (attributes[i].getTag() == 1) {\n                 final String str = ((ConstantValue)attributes[i]).toString();\n                 this.file.print(\"<TD>= <A HREF=\\\"\" + this.className + \"_attributes.html#\" + name + \"@\" + i + \"\\\" TARGET=\\\"Attributes\\\">\" + str + \"</TD>\\n\");\n                 break;\n             }\n@@ -64,15 +64,15 @@\n         final String type = Utility.methodSignatureReturnType(signature, false);\n         final String name = method.getName();\n         String access = Utility.accessToString(method.getAccessFlags());\n         final Attribute[] attributes = method.getAttributes();\n         access = Utility.replace(access, \" \", \"&nbsp;\");\n         final String html_name = Class2HTML.toHTML(name);\n         this.file.print(\"<TR VALIGN=TOP><TD><FONT COLOR=\\\"#FF0000\\\"><A NAME=method\" + method_number + \">\" + access + \"</A></FONT></TD>\");\n-        this.file.print(\"<TD>\" + Class2HTML.referenceType(type) + \"</TD><TD><A HREF=\" + this.className + \"_code.html#method\" + method_number + \" TARGET=Code>\" + html_name + \"</A></TD>\\n<TD>(\");\n+        this.file.print(\"<TD>\" + Class2HTML.referenceType(type) + \"</TD><TD>\" + \"<A HREF=\" + this.className + \"_code.html#method\" + method_number + \" TARGET=Code>\" + html_name + \"</A></TD>\\n<TD>(\");\n         for (int i = 0; i < args.length; ++i) {\n             this.file.print(Class2HTML.referenceType(args[i]));\n             if (i < args.length - 1) {\n                 this.file.print(\", \");\n             }\n         }\n         this.file.print(\")</TD></TR>\");\n"}]}
