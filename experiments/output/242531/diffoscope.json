{"diffoscope-json-version": 1, "source1": "first/InnerClass.class", "source2": "second/InnerClass.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,47 +8,47 @@\n public final class InnerClass implements Cloneable, Node\n {\n     private int innerClassIndex;\n     private int outerClassIndex;\n     private int innerNameIndex;\n     private int innerAccessFlags;\n     \n-    InnerClass(final DataInput file) throws IOException {\n-        this(file.readUnsignedShort(), file.readUnsignedShort(), file.readUnsignedShort(), file.readUnsignedShort());\n+    InnerClass(final DataInput dataInput) throws IOException {\n+        this(dataInput.readUnsignedShort(), dataInput.readUnsignedShort(), dataInput.readUnsignedShort(), dataInput.readUnsignedShort());\n     }\n     \n-    public InnerClass(final InnerClass c) {\n-        this(c.getInnerClassIndex(), c.getOuterClassIndex(), c.getInnerNameIndex(), c.getInnerAccessFlags());\n+    public InnerClass(final InnerClass innerClass) {\n+        this(innerClass.getInnerClassIndex(), innerClass.getOuterClassIndex(), innerClass.getInnerNameIndex(), innerClass.getInnerAccessFlags());\n     }\n     \n     public InnerClass(final int innerClassIndex, final int outerClassIndex, final int innerNameIndex, final int innerAccessFlags) {\n         this.innerClassIndex = innerClassIndex;\n         this.outerClassIndex = outerClassIndex;\n         this.innerNameIndex = innerNameIndex;\n         this.innerAccessFlags = innerAccessFlags;\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitInnerClass(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitInnerClass(this);\n     }\n     \n     public InnerClass copy() {\n         try {\n             return (InnerClass)this.clone();\n         }\n         catch (final CloneNotSupportedException ex) {\n             return null;\n         }\n     }\n     \n-    public void dump(final DataOutputStream file) throws IOException {\n-        file.writeShort(this.innerClassIndex);\n-        file.writeShort(this.outerClassIndex);\n-        file.writeShort(this.innerNameIndex);\n-        file.writeShort(this.innerAccessFlags);\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.innerClassIndex);\n+        dataOutputStream.writeShort(this.outerClassIndex);\n+        dataOutputStream.writeShort(this.innerNameIndex);\n+        dataOutputStream.writeShort(this.innerAccessFlags);\n     }\n     \n     public int getInnerAccessFlags() {\n         return this.innerAccessFlags;\n     }\n     \n     public int getInnerClassIndex() {\n@@ -81,29 +81,26 @@\n     \n     @Override\n     public String toString() {\n         return \"InnerClass(\" + this.innerClassIndex + \", \" + this.outerClassIndex + \", \" + this.innerNameIndex + \", \" + this.innerAccessFlags + \")\";\n     }\n     \n     public String toString(final ConstantPool constantPool) {\n-        String innerClassName = constantPool.getConstantString(this.innerClassIndex, (byte)7);\n-        innerClassName = Utility.compactClassName(innerClassName, false);\n-        String outerClassName;\n+        final String compactClassName = Utility.compactClassName(constantPool.getConstantString(this.innerClassIndex, (byte)7), false);\n+        String string;\n         if (this.outerClassIndex != 0) {\n-            outerClassName = constantPool.getConstantString(this.outerClassIndex, (byte)7);\n-            outerClassName = \" of class \" + Utility.compactClassName(outerClassName, false);\n+            string = \" of class \" + Utility.compactClassName(constantPool.getConstantString(this.outerClassIndex, (byte)7), false);\n         }\n         else {\n-            outerClassName = \"\";\n+            string = \"\";\n         }\n-        String innerName;\n+        String bytes;\n         if (this.innerNameIndex != 0) {\n-            innerName = constantPool.getConstantUtf8(this.innerNameIndex).getBytes();\n+            bytes = constantPool.getConstantUtf8(this.innerNameIndex).getBytes();\n         }\n         else {\n-            innerName = \"(anonymous)\";\n+            bytes = \"(anonymous)\";\n         }\n-        String access = Utility.accessToString(this.innerAccessFlags, true);\n-        access = (access.isEmpty() ? \"\" : (access + \" \"));\n-        return \"  \" + access + innerName + \"=class \" + innerClassName + outerClassName;\n+        final String accessToString = Utility.accessToString(this.innerAccessFlags, true);\n+        return \"  \" + (accessToString.isEmpty() ? \"\" : (accessToString + \" \")) + bytes + \"=class \" + compactClassName + string;\n     }\n }\n"}]}
