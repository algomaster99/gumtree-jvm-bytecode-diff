{"diffoscope-json-version": 1, "source1": "first/JavaWrapper.class", "source2": "second/JavaWrapper.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,61 +6,61 @@\n import org.apache.commons.lang3.StringUtils;\n \n public class JavaWrapper\n {\n     private final ClassLoader loader;\n     \n     private static ClassLoader getClassLoader() {\n-        final String s = System.getProperty(\"bcel.classloader\");\n-        if (StringUtils.isEmpty((CharSequence)s)) {\n+        final String property = System.getProperty(\"bcel.classloader\");\n+        if (StringUtils.isEmpty((CharSequence)property)) {\n             throw new IllegalStateException(\"The property 'bcel.classloader' must be defined\");\n         }\n         try {\n-            return (ClassLoader)Class.forName(s).newInstance();\n+            return (ClassLoader)Class.forName(property).newInstance();\n         }\n-        catch (final Exception e) {\n-            throw new IllegalStateException(e.toString(), e);\n+        catch (final Exception cause) {\n+            throw new IllegalStateException(cause.toString(), cause);\n         }\n     }\n     \n     public static void main(final String[] argv) throws Exception {\n         if (argv.length == 0) {\n             System.out.println(\"Missing class name.\");\n             return;\n         }\n         final String className = argv[0];\n-        final String[] newArgv = new String[argv.length - 1];\n-        System.arraycopy(argv, 1, newArgv, 0, newArgv.length);\n-        new JavaWrapper().runMain(className, newArgv);\n+        final String[] argv2 = new String[argv.length - 1];\n+        System.arraycopy(argv, 1, argv2, 0, argv2.length);\n+        new JavaWrapper().runMain(className, argv2);\n     }\n     \n     public JavaWrapper() {\n         this(getClassLoader());\n     }\n     \n     public JavaWrapper(final ClassLoader loader) {\n         this.loader = loader;\n     }\n     \n     public void runMain(final String className, final String[] argv) throws ClassNotFoundException {\n-        final Class<?> cl = this.loader.loadClass(className);\n-        Method method = null;\n+        final Class<?> loadClass = this.loader.loadClass(className);\n+        Method method;\n         try {\n-            method = cl.getMethod(\"main\", argv.getClass());\n-            final int m = method.getModifiers();\n-            final Class<?> r = method.getReturnType();\n-            if (!Modifier.isPublic(m) || !Modifier.isStatic(m) || Modifier.isAbstract(m) || r != Void.TYPE) {\n+            method = loadClass.getMethod(\"main\", argv.getClass());\n+            final int modifiers = method.getModifiers();\n+            final Class<?> returnType = method.getReturnType();\n+            if (!Modifier.isPublic(modifiers) || !Modifier.isStatic(modifiers) || Modifier.isAbstract(modifiers) || returnType != Void.TYPE) {\n                 throw new NoSuchMethodException();\n             }\n         }\n-        catch (final NoSuchMethodException no) {\n+        catch (final NoSuchMethodException ex) {\n             System.out.println(\"In class \" + className + \": public static void main(String[] argv) is not defined\");\n             return;\n         }\n         try {\n             method.invoke(null, (Object[])argv);\n         }\n-        catch (final Exception ex) {\n-            ex.printStackTrace();\n+        catch (final Exception ex2) {\n+            ex2.printStackTrace();\n         }\n     }\n }\n"}]}
