{"diffoscope-json-version": 1, "source1": "first/NNTPClient.class", "source2": "second/NNTPClient.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,14 +14,18 @@\n import java.util.Vector;\n import org.apache.commons.net.MalformedServerReplyException;\n \n public class NNTPClient extends NNTP\n {\n     private static final NewsgroupInfo[] EMPTY_NEWSGROUP_INFO_ARRAY;\n     \n+    static {\n+        EMPTY_NEWSGROUP_INFO_ARRAY = new NewsgroupInfo[0];\n+    }\n+    \n     private void parseArticlePointer(final String reply, final ArticleInfo pointer) throws MalformedServerReplyException {\n         final String[] tokens = reply.split(\" \");\n         if (tokens.length >= 3) {\n             int i = 1;\n             try {\n                 pointer.articleNumber = Long.parseLong(tokens[i++]);\n                 pointer.articleId = tokens[i++];\n@@ -113,32 +117,44 @@\n             catch (final NumberFormatException ex) {}\n         }\n         return article;\n     }\n     \n     private NewsgroupInfo[] readNewsgroupListing() throws IOException {\n         final Vector<NewsgroupInfo> list = new Vector<NewsgroupInfo>(2048);\n-        final BufferedReader reader = (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_);\n-        Throwable x0 = null;\n+        Throwable t = null;\n         try {\n-            String line;\n-            while ((line = reader.readLine()) != null) {\n-                final NewsgroupInfo tmp = parseNewsgroupListEntry(line);\n-                if (tmp == null) {\n-                    throw new MalformedServerReplyException(line);\n-                }\n-                list.addElement(tmp);\n+            final BufferedReader reader = (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_);\n+            try {\n+                String line;\n+                while ((line = reader.readLine()) != null) {\n+                    final NewsgroupInfo tmp = parseNewsgroupListEntry(line);\n+                    if (tmp == null) {\n+                        throw new MalformedServerReplyException(line);\n+                    }\n+                    list.addElement(tmp);\n+                }\n+            }\n+            finally {\n+                if (reader != null) {\n+                    reader.close();\n+                }\n             }\n-        }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n         }\n         finally {\n-            $closeResource(x0, reader);\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n         final int size;\n         if ((size = list.size()) < 1) {\n             return NNTPClient.EMPTY_NEWSGROUP_INFO_ARRAY;\n         }\n         final NewsgroupInfo[] info = new NewsgroupInfo[size];\n         list.copyInto(info);\n@@ -244,60 +260,98 @@\n         return this.selectNewsgroup(newsgroup, null);\n     }\n     \n     public String listHelp() throws IOException {\n         if (!NNTPReply.isInformational(this.help())) {\n             return null;\n         }\n-        final StringWriter help = new StringWriter();\n-        Throwable x0 = null;\n+        Throwable t = null;\n         try {\n-            final BufferedReader reader = (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_);\n-            Throwable x2 = null;\n+            final StringWriter help = new StringWriter();\n             try {\n-                Util.copyReader((Reader)reader, (Writer)help);\n-                return help.toString();\n-            }\n-            catch (final Throwable t) {\n-                x2 = t;\n-                throw t;\n+                final BufferedReader reader = (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_);\n+                try {\n+                    Util.copyReader((Reader)reader, (Writer)help);\n+                    final String string = help.toString();\n+                    if (reader != null) {\n+                        reader.close();\n+                    }\n+                    if (help != null) {\n+                        help.close();\n+                    }\n+                    return string;\n+                }\n+                finally {\n+                    if (reader != null) {\n+                        reader.close();\n+                    }\n+                }\n             }\n             finally {\n-                $closeResource(x2, reader);\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n+                }\n+                if (help != null) {\n+                    help.close();\n+                }\n             }\n         }\n-        catch (final Throwable t2) {\n-            x0 = t2;\n-            throw t2;\n-        }\n         finally {\n-            $closeResource(x0, help);\n+            if (t == null) {\n+                final Throwable exception2;\n+                t = exception2;\n+            }\n+            else {\n+                final Throwable exception2;\n+                if (t != exception2) {\n+                    t.addSuppressed(exception2);\n+                }\n+            }\n         }\n     }\n     \n     public String[] listOverviewFmt() throws IOException {\n         if (!NNTPReply.isPositiveCompletion(this.sendCommand(\"LIST\", \"OVERVIEW.FMT\"))) {\n             return null;\n         }\n-        final BufferedReader reader = (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_);\n-        Throwable x0 = null;\n+        Throwable t = null;\n         try {\n-            final ArrayList<String> list = new ArrayList<String>();\n-            String line;\n-            while ((line = reader.readLine()) != null) {\n-                list.add(line);\n-            }\n-            return list.toArray(NetConstants.EMPTY_STRING_ARRAY);\n-        }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n+            final BufferedReader reader = (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_);\n+            try {\n+                final ArrayList<String> list = new ArrayList<String>();\n+                String line;\n+                while ((line = reader.readLine()) != null) {\n+                    list.add(line);\n+                }\n+                return list.toArray(NetConstants.EMPTY_STRING_ARRAY);\n+            }\n+            finally {\n+                if (reader != null) {\n+                    reader.close();\n+                }\n+            }\n         }\n         finally {\n-            $closeResource(x0, reader);\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public boolean selectArticle(final String articleId, final ArticleInfo pointer) throws IOException {\n         if (articleId != null) {\n             if (!NNTPReply.isPositiveCompletion(this.stat(articleId))) {\n                 return false;\n@@ -417,28 +471,40 @@\n     }\n     \n     public String[] listNewNews(final NewGroupsOrNewsQuery query) throws IOException {\n         if (!NNTPReply.isPositiveCompletion(this.newnews(query.getNewsgroups(), query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {\n             return null;\n         }\n         final Vector<String> list = new Vector<String>();\n-        final BufferedReader reader = (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_);\n-        Throwable x0 = null;\n+        Throwable t = null;\n         try {\n-            String line;\n-            while ((line = reader.readLine()) != null) {\n-                list.addElement(line);\n+            final BufferedReader reader = (BufferedReader)new DotTerminatedMessageReader((Reader)this._reader_);\n+            try {\n+                String line;\n+                while ((line = reader.readLine()) != null) {\n+                    list.addElement(line);\n+                }\n+            }\n+            finally {\n+                if (reader != null) {\n+                    reader.close();\n+                }\n             }\n-        }\n-        catch (final Throwable t) {\n-            x0 = t;\n-            throw t;\n         }\n         finally {\n-            $closeResource(x0, reader);\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n         final int size = list.size();\n         if (size < 1) {\n             return NetConstants.EMPTY_STRING_ARRAY;\n         }\n         final String[] result = new String[size];\n         list.copyInto(result);\n@@ -493,15 +559,15 @@\n     }\n     \n     public BufferedReader retrieveArticleInfo(final long articleNumber) throws IOException {\n         return this.retrieveArticleInfo(Long.toString(articleNumber));\n     }\n     \n     public BufferedReader retrieveArticleInfo(final long lowArticleNumber, final long highArticleNumber) throws IOException {\n-        return this.retrieveArticleInfo(lowArticleNumber + \"-\" + highArticleNumber);\n+        return this.retrieveArticleInfo(String.valueOf(lowArticleNumber) + \"-\" + highArticleNumber);\n     }\n     \n     public Iterable<Article> iterateArticleInfo(final long lowArticleNumber, final long highArticleNumber) throws IOException {\n         final BufferedReader info = this.retrieveArticleInfo(lowArticleNumber, highArticleNumber);\n         if (info == null) {\n             throw new IOException(\"XOVER command failed: \" + this.getReplyString());\n         }\n@@ -516,15 +582,15 @@\n     }\n     \n     public BufferedReader retrieveHeader(final String header, final long articleNumber) throws IOException {\n         return this.retrieveHeader(header, Long.toString(articleNumber));\n     }\n     \n     public BufferedReader retrieveHeader(final String header, final long lowArticleNumber, final long highArticleNumber) throws IOException {\n-        return this.retrieveHeader(header, lowArticleNumber + \"-\" + highArticleNumber);\n+        return this.retrieveHeader(header, String.valueOf(lowArticleNumber) + \"-\" + highArticleNumber);\n     }\n     \n     @Deprecated\n     public Reader retrieveHeader(final String header, final int lowArticleNumber, final int highArticleNumber) throws IOException {\n         return this.retrieveHeader(header, lowArticleNumber, (long)highArticleNumber);\n     }\n     \n@@ -661,26 +727,8 @@\n     \n     private void ai2ap(final ArticleInfo ai, final ArticlePointer ap) {\n         if (ap != null) {\n             ap.articleId = ai.articleId;\n             ap.articleNumber = (int)ai.articleNumber;\n         }\n     }\n-    \n-    private static /* synthetic */ void $closeResource(final Throwable x0, final AutoCloseable x1) {\n-        if (x0 != null) {\n-            try {\n-                x1.close();\n-            }\n-            catch (final Throwable exception) {\n-                x0.addSuppressed(exception);\n-            }\n-        }\n-        else {\n-            x1.close();\n-        }\n-    }\n-    \n-    static {\n-        EMPTY_NEWSGROUP_INFO_ARRAY = new NewsgroupInfo[0];\n-    }\n }\n"}]}
