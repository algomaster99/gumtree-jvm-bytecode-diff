{"diffoscope-json-version": 1, "source1": "first/CopyUtils.class", "source2": "second/CopyUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,87 +11,83 @@\n import java.io.Writer;\n import java.io.IOException;\n import java.io.OutputStream;\n \n @Deprecated\n public class CopyUtils\n {\n-    public static void copy(final byte[] input, final OutputStream output) throws IOException {\n-        output.write(input);\n+    public static void copy(final byte[] b, final OutputStream outputStream) throws IOException {\n+        outputStream.write(b);\n     }\n     \n     @Deprecated\n-    public static void copy(final byte[] input, final Writer output) throws IOException {\n-        final ByteArrayInputStream inputStream = new ByteArrayInputStream(input);\n-        copy(inputStream, output);\n-    }\n-    \n-    public static void copy(final byte[] input, final Writer output, final String encoding) throws IOException {\n-        final ByteArrayInputStream inputStream = new ByteArrayInputStream(input);\n-        copy(inputStream, output, encoding);\n-    }\n-    \n-    public static int copy(final InputStream input, final OutputStream output) throws IOException {\n-        final byte[] buffer = IOUtils.byteArray();\n-        int count = 0;\n-        int n;\n-        while (-1 != (n = input.read(buffer))) {\n-            output.write(buffer, 0, n);\n-            count += n;\n+    public static void copy(final byte[] buf, final Writer writer) throws IOException {\n+        copy(new ByteArrayInputStream(buf), writer);\n+    }\n+    \n+    public static void copy(final byte[] buf, final Writer writer, final String s) throws IOException {\n+        copy(new ByteArrayInputStream(buf), writer, s);\n+    }\n+    \n+    public static int copy(final InputStream inputStream, final OutputStream outputStream) throws IOException {\n+        final byte[] byteArray = IOUtils.byteArray();\n+        int n = 0;\n+        int read;\n+        while (-1 != (read = inputStream.read(byteArray))) {\n+            outputStream.write(byteArray, 0, read);\n+            n += read;\n         }\n-        return count;\n+        return n;\n     }\n     \n     @Deprecated\n-    public static void copy(final InputStream input, final Writer output) throws IOException {\n-        final InputStreamReader in = new InputStreamReader(input, Charset.defaultCharset());\n-        copy(in, output);\n+    public static void copy(final InputStream in, final Writer writer) throws IOException {\n+        copy(new InputStreamReader(in, Charset.defaultCharset()), writer);\n     }\n     \n-    public static void copy(final InputStream input, final Writer output, final String encoding) throws IOException {\n-        final InputStreamReader in = new InputStreamReader(input, encoding);\n-        copy(in, output);\n+    public static void copy(final InputStream in, final Writer writer, final String charsetName) throws IOException {\n+        copy(new InputStreamReader(in, charsetName), writer);\n     }\n     \n     @Deprecated\n-    public static void copy(final Reader input, final OutputStream output) throws IOException {\n-        final OutputStreamWriter out = new OutputStreamWriter(output, Charset.defaultCharset());\n-        copy(input, out);\n-        out.flush();\n-    }\n-    \n-    public static void copy(final Reader input, final OutputStream output, final String encoding) throws IOException {\n-        final OutputStreamWriter out = new OutputStreamWriter(output, encoding);\n-        copy(input, out);\n-        out.flush();\n-    }\n-    \n-    public static int copy(final Reader input, final Writer output) throws IOException {\n-        final char[] buffer = IOUtils.getScratchCharArray();\n-        int count = 0;\n-        int n;\n-        while (-1 != (n = input.read(buffer))) {\n-            output.write(buffer, 0, n);\n-            count += n;\n+    public static void copy(final Reader reader, final OutputStream out) throws IOException {\n+        final OutputStreamWriter outputStreamWriter = new OutputStreamWriter(out, Charset.defaultCharset());\n+        copy(reader, outputStreamWriter);\n+        outputStreamWriter.flush();\n+    }\n+    \n+    public static void copy(final Reader reader, final OutputStream out, final String charsetName) throws IOException {\n+        final OutputStreamWriter outputStreamWriter = new OutputStreamWriter(out, charsetName);\n+        copy(reader, outputStreamWriter);\n+        outputStreamWriter.flush();\n+    }\n+    \n+    public static int copy(final Reader reader, final Writer writer) throws IOException {\n+        final char[] scratchCharArray = IOUtils.getScratchCharArray();\n+        int n = 0;\n+        int read;\n+        while (-1 != (read = reader.read(scratchCharArray))) {\n+            writer.write(scratchCharArray, 0, read);\n+            n += read;\n         }\n-        return count;\n+        return n;\n     }\n     \n     @Deprecated\n-    public static void copy(final String input, final OutputStream output) throws IOException {\n-        final StringReader in = new StringReader(input);\n-        final OutputStreamWriter out = new OutputStreamWriter(output, Charset.defaultCharset());\n-        copy(in, out);\n-        out.flush();\n-    }\n-    \n-    public static void copy(final String input, final OutputStream output, final String encoding) throws IOException {\n-        final StringReader in = new StringReader(input);\n-        final OutputStreamWriter out = new OutputStreamWriter(output, encoding);\n-        copy(in, out);\n-        out.flush();\n+    public static void copy(final String s, final OutputStream out) throws IOException {\n+        final StringReader stringReader = new StringReader(s);\n+        final OutputStreamWriter outputStreamWriter = new OutputStreamWriter(out, Charset.defaultCharset());\n+        copy(stringReader, outputStreamWriter);\n+        outputStreamWriter.flush();\n+    }\n+    \n+    public static void copy(final String s, final OutputStream out, final String charsetName) throws IOException {\n+        final StringReader stringReader = new StringReader(s);\n+        final OutputStreamWriter outputStreamWriter = new OutputStreamWriter(out, charsetName);\n+        copy(stringReader, outputStreamWriter);\n+        outputStreamWriter.flush();\n     }\n     \n-    public static void copy(final String input, final Writer output) throws IOException {\n-        output.write(input);\n+    public static void copy(final String str, final Writer writer) throws IOException {\n+        writer.write(str);\n     }\n }\n"}]}
