{"diffoscope-json-version": 1, "source1": "first/Lang.class", "source2": "second/Lang.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -25,15 +25,17 @@\n     \n     public static Lang instance(final NameType nameType) {\n         return Lang.Langs.get(nameType);\n     }\n     \n     public static Lang loadFromResource(final String languageRulesResourceName, final Languages languages) {\n         final List<Lang.LangRule> rules = new ArrayList<Lang.LangRule>();\n-        try (final Scanner scanner = new Scanner(Resources.getInputStream(languageRulesResourceName), \"UTF-8\")) {\n+        final Scanner scanner = new Scanner(Resources.getInputStream(languageRulesResourceName), \"UTF-8\");\n+        Throwable t = null;\n+        try {\n             boolean inExtendedComment = false;\n             while (scanner.hasNextLine()) {\n                 String line;\n                 final String rawLine = line = scanner.nextLine();\n                 if (inExtendedComment) {\n                     if (!line.endsWith(\"*/\")) {\n                         continue;\n@@ -59,14 +61,31 @@\n                     final Pattern pattern = Pattern.compile(parts[0]);\n                     final String[] langs = parts[1].split(\"\\\\+\");\n                     final boolean accept = parts[2].equals(\"true\");\n                     rules.add(new Lang.LangRule(pattern, (Set)new HashSet(Arrays.asList(langs)), accept, (Lang.Lang$1)null));\n                 }\n             }\n         }\n+        catch (final Throwable t2) {\n+            t = t2;\n+            throw t2;\n+        }\n+        finally {\n+            if (t != null) {\n+                try {\n+                    scanner.close();\n+                }\n+                catch (final Throwable exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n+            else {\n+                scanner.close();\n+            }\n+        }\n         return new Lang(rules, languages);\n     }\n     \n     private Lang(final List<Lang.LangRule> rules, final Languages languages) {\n         this.rules = Collections.unmodifiableList((List<? extends Lang.LangRule>)rules);\n         this.languages = languages;\n     }\n"}]}
