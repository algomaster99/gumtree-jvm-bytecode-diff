{"diffoscope-json-version": 1, "source1": "first/JSONTokener.class", "source2": "second/JSONTokener.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,93 +1,93 @@\n-  SHA-256 checksum c743f0dcd2fbbd1c0e5835d3eeb770b3a4e9ebc8d844494a8ccee94b116bfbd1\n+  SHA-256 checksum a47690d63fe3e7cf42d8f82f1d8ef4b4476b9b27a9a5a4f07d07e5f5eebd1c86\n   Compiled from \"JSONTokener.java\"\n public class org.json.JSONTokener\n   minor version: 0\n   major version: 50\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #75                         // org/json/JSONTokener\n   super_class: #76                        // java/lang/Object\n   interfaces: 0, fields: 8, methods: 22, attributes: 1\n Constant pool:\n-    #1 = Methodref          #76.#166      // java/lang/Object.\"<init>\":()V\n-    #2 = Methodref          #167.#168     // java/io/Reader.markSupported:()Z\n-    #3 = Class              #169          // java/io/BufferedReader\n-    #4 = Methodref          #3.#170       // java/io/BufferedReader.\"<init>\":(Ljava/io/Reader;)V\n-    #5 = Fieldref           #75.#171      // org/json/JSONTokener.reader:Ljava/io/Reader;\n-    #6 = Fieldref           #75.#172      // org/json/JSONTokener.eof:Z\n-    #7 = Fieldref           #75.#173      // org/json/JSONTokener.usePrevious:Z\n-    #8 = Fieldref           #75.#174      // org/json/JSONTokener.previous:C\n-    #9 = Fieldref           #75.#175      // org/json/JSONTokener.index:J\n-   #10 = Fieldref           #75.#176      // org/json/JSONTokener.character:J\n-   #11 = Fieldref           #75.#177      // org/json/JSONTokener.characterPreviousLine:J\n-   #12 = Fieldref           #75.#178      // org/json/JSONTokener.line:J\n-   #13 = Class              #179          // java/io/InputStreamReader\n-   #14 = Methodref          #13.#180      // java/io/InputStreamReader.\"<init>\":(Ljava/io/InputStream;)V\n-   #15 = Methodref          #75.#170      // org/json/JSONTokener.\"<init>\":(Ljava/io/Reader;)V\n-   #16 = Class              #181          // java/io/StringReader\n-   #17 = Methodref          #16.#182      // java/io/StringReader.\"<init>\":(Ljava/lang/String;)V\n-   #18 = Class              #183          // org/json/JSONException\n-   #19 = String             #184          // Stepping back two steps is not supported\n-   #20 = Methodref          #18.#182      // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n-   #21 = Methodref          #75.#185      // org/json/JSONTokener.decrementIndexes:()V\n-   #22 = Methodref          #167.#186     // java/io/Reader.mark:(I)V\n-   #23 = Class              #187          // java/io/IOException\n-   #24 = String             #188          // Unable to preserve stream position\n-   #25 = Methodref          #18.#189      // org/json/JSONException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-   #26 = Methodref          #167.#190     // java/io/Reader.read:()I\n-   #27 = Methodref          #167.#191     // java/io/Reader.reset:()V\n-   #28 = String             #192          // Unable to read the next character from the stream\n-   #29 = Methodref          #18.#193      // org/json/JSONException.\"<init>\":(Ljava/lang/Throwable;)V\n-   #30 = Methodref          #75.#194      // org/json/JSONTokener.incrementIndexes:(I)V\n-   #31 = Methodref          #75.#195      // org/json/JSONTokener.next:()C\n-   #32 = Class              #196          // java/lang/StringBuilder\n-   #33 = Methodref          #32.#166      // java/lang/StringBuilder.\"<init>\":()V\n-   #34 = String             #197          // Expected \\'\n-   #35 = Methodref          #32.#198      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #36 = Methodref          #32.#199      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n-   #37 = String             #200          // \\' and instead saw \\'\n-   #38 = String             #201          // \\'\n-   #39 = Methodref          #32.#202      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #40 = Methodref          #75.#203      // org/json/JSONTokener.syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n-   #41 = String             #204          // \\' and instead saw \\'\\'\n-   #42 = String             #205          //\n-   #43 = Methodref          #75.#206      // org/json/JSONTokener.end:()Z\n-   #44 = String             #207          // Substring bounds error\n-   #45 = Class              #208          // java/lang/String\n-   #46 = Methodref          #45.#209      // java/lang/String.\"<init>\":([C)V\n-   #47 = String             #210          // Unterminated string\n-   #48 = Methodref          #75.#211      // org/json/JSONTokener.next:(I)Ljava/lang/String;\n-   #49 = Methodref          #212.#213     // java/lang/Integer.parseInt:(Ljava/lang/String;I)I\n-   #50 = Class              #214          // java/lang/NumberFormatException\n-   #51 = String             #215          // Illegal escape.\n-   #52 = Methodref          #75.#216      // org/json/JSONTokener.syntaxError:(Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-   #53 = Methodref          #75.#217      // org/json/JSONTokener.back:()V\n-   #54 = Methodref          #45.#218      // java/lang/String.trim:()Ljava/lang/String;\n-   #55 = Methodref          #45.#219      // java/lang/String.indexOf:(I)I\n-   #56 = Methodref          #75.#220      // org/json/JSONTokener.nextClean:()C\n-   #57 = Methodref          #75.#221      // org/json/JSONTokener.nextString:(C)Ljava/lang/String;\n-   #58 = Class              #222          // org/json/JSONObject\n-   #59 = Methodref          #58.#223      // org/json/JSONObject.\"<init>\":(Lorg/json/JSONTokener;)V\n-   #60 = Class              #224          // java/lang/StackOverflowError\n-   #61 = String             #225          // JSON Array or Object depth too large to process.\n-   #62 = Class              #226          // org/json/JSONArray\n-   #63 = Methodref          #62.#223      // org/json/JSONArray.\"<init>\":(Lorg/json/JSONTokener;)V\n-   #64 = String             #227          // ,:]}/\\\\\\\"[{;=#\n-   #65 = Methodref          #45.#228      // java/lang/String.equals:(Ljava/lang/Object;)Z\n-   #66 = String             #229          // Missing value\n-   #67 = Methodref          #58.#230      // org/json/JSONObject.stringToValue:(Ljava/lang/String;)Ljava/lang/Object;\n+    #1 = Methodref          #76.#160      // java/lang/Object.\"<init>\":()V\n+    #2 = Methodref          #97.#161      // java/io/Reader.markSupported:()Z\n+    #3 = Class              #162          // java/io/BufferedReader\n+    #4 = Methodref          #3.#163       // java/io/BufferedReader.\"<init>\":(Ljava/io/Reader;)V\n+    #5 = Fieldref           #75.#164      // org/json/JSONTokener.reader:Ljava/io/Reader;\n+    #6 = Fieldref           #75.#165      // org/json/JSONTokener.eof:Z\n+    #7 = Fieldref           #75.#166      // org/json/JSONTokener.usePrevious:Z\n+    #8 = Fieldref           #75.#167      // org/json/JSONTokener.previous:C\n+    #9 = Fieldref           #75.#168      // org/json/JSONTokener.index:J\n+   #10 = Fieldref           #75.#169      // org/json/JSONTokener.character:J\n+   #11 = Fieldref           #75.#170      // org/json/JSONTokener.characterPreviousLine:J\n+   #12 = Fieldref           #75.#171      // org/json/JSONTokener.line:J\n+   #13 = Class              #172          // java/io/InputStreamReader\n+   #14 = Methodref          #13.#173      // java/io/InputStreamReader.\"<init>\":(Ljava/io/InputStream;)V\n+   #15 = Methodref          #75.#163      // org/json/JSONTokener.\"<init>\":(Ljava/io/Reader;)V\n+   #16 = Class              #174          // java/io/StringReader\n+   #17 = Methodref          #16.#175      // java/io/StringReader.\"<init>\":(Ljava/lang/String;)V\n+   #18 = Class              #176          // org/json/JSONException\n+   #19 = String             #177          // Stepping back two steps is not supported\n+   #20 = Methodref          #18.#175      // org/json/JSONException.\"<init>\":(Ljava/lang/String;)V\n+   #21 = Methodref          #75.#178      // org/json/JSONTokener.decrementIndexes:()V\n+   #22 = Methodref          #97.#179      // java/io/Reader.mark:(I)V\n+   #23 = Class              #180          // java/io/IOException\n+   #24 = String             #181          // Unable to preserve stream position\n+   #25 = Methodref          #18.#182      // org/json/JSONException.\"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+   #26 = Methodref          #97.#183      // java/io/Reader.read:()I\n+   #27 = Methodref          #97.#184      // java/io/Reader.reset:()V\n+   #28 = String             #185          // Unable to read the next character from the stream\n+   #29 = Methodref          #18.#186      // org/json/JSONException.\"<init>\":(Ljava/lang/Throwable;)V\n+   #30 = Methodref          #75.#187      // org/json/JSONTokener.incrementIndexes:(I)V\n+   #31 = Methodref          #75.#188      // org/json/JSONTokener.next:()C\n+   #32 = Class              #189          // java/lang/StringBuilder\n+   #33 = Methodref          #32.#160      // java/lang/StringBuilder.\"<init>\":()V\n+   #34 = String             #190          // Expected \\'\n+   #35 = Methodref          #32.#191      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #36 = Methodref          #32.#192      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;\n+   #37 = String             #193          // \\' and instead saw \\'\n+   #38 = String             #194          // \\'\n+   #39 = Methodref          #32.#195      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #40 = Methodref          #75.#196      // org/json/JSONTokener.syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n+   #41 = String             #197          // \\' and instead saw \\'\\'\n+   #42 = String             #198          //\n+   #43 = Methodref          #75.#199      // org/json/JSONTokener.end:()Z\n+   #44 = String             #200          // Substring bounds error\n+   #45 = Class              #201          // java/lang/String\n+   #46 = Methodref          #45.#202      // java/lang/String.\"<init>\":([C)V\n+   #47 = String             #203          // Unterminated string\n+   #48 = Methodref          #75.#204      // org/json/JSONTokener.next:(I)Ljava/lang/String;\n+   #49 = Methodref          #205.#206     // java/lang/Integer.parseInt:(Ljava/lang/String;I)I\n+   #50 = Class              #207          // java/lang/NumberFormatException\n+   #51 = String             #208          // Illegal escape.\n+   #52 = Methodref          #75.#209      // org/json/JSONTokener.syntaxError:(Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+   #53 = Methodref          #75.#210      // org/json/JSONTokener.back:()V\n+   #54 = Methodref          #45.#211      // java/lang/String.trim:()Ljava/lang/String;\n+   #55 = Methodref          #45.#212      // java/lang/String.indexOf:(I)I\n+   #56 = Methodref          #75.#213      // org/json/JSONTokener.nextClean:()C\n+   #57 = Methodref          #75.#214      // org/json/JSONTokener.nextString:(C)Ljava/lang/String;\n+   #58 = Class              #215          // org/json/JSONObject\n+   #59 = Methodref          #58.#216      // org/json/JSONObject.\"<init>\":(Lorg/json/JSONTokener;)V\n+   #60 = Class              #217          // java/lang/StackOverflowError\n+   #61 = String             #218          // JSON Array or Object depth too large to process.\n+   #62 = Class              #219          // org/json/JSONArray\n+   #63 = Methodref          #62.#216      // org/json/JSONArray.\"<init>\":(Lorg/json/JSONTokener;)V\n+   #64 = String             #220          // ,:]}/\\\\\\\"[{;=#\n+   #65 = Methodref          #45.#221      // java/lang/String.equals:(Ljava/lang/Object;)Z\n+   #66 = String             #222          // Missing value\n+   #67 = Methodref          #58.#223      // org/json/JSONObject.stringToValue:(Ljava/lang/String;)Ljava/lang/Object;\n    #68 = Integer            1000000\n-   #69 = Methodref          #75.#202      // org/json/JSONTokener.toString:()Ljava/lang/String;\n-   #70 = String             #231          //  at\n-   #71 = Methodref          #32.#232      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n-   #72 = String             #233          //  [character\n-   #73 = String             #234          //  line\n-   #74 = String             #235          // ]\n-   #75 = Class              #236          // org/json/JSONTokener\n-   #76 = Class              #237          // java/lang/Object\n+   #69 = Methodref          #75.#195      // org/json/JSONTokener.toString:()Ljava/lang/String;\n+   #70 = String             #224          //  at\n+   #71 = Methodref          #32.#225      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;\n+   #72 = String             #226          //  [character\n+   #73 = String             #227          //  line\n+   #74 = String             #228          // ]\n+   #75 = Class              #229          // org/json/JSONTokener\n+   #76 = Class              #230          // java/lang/Object\n    #77 = Utf8               character\n    #78 = Utf8               J\n    #79 = Utf8               eof\n    #80 = Utf8               Z\n    #81 = Utf8               index\n    #82 = Utf8               line\n    #83 = Utf8               previous\n@@ -100,179 +100,172 @@\n    #90 = Utf8               (Ljava/io/Reader;)V\n    #91 = Utf8               Code\n    #92 = Utf8               LineNumberTable\n    #93 = Utf8               LocalVariableTable\n    #94 = Utf8               this\n    #95 = Utf8               Lorg/json/JSONTokener;\n    #96 = Utf8               StackMapTable\n-   #97 = Class              #236          // org/json/JSONTokener\n-   #98 = Class              #238          // java/io/Reader\n-   #99 = Utf8               (Ljava/io/InputStream;)V\n-  #100 = Utf8               inputStream\n-  #101 = Utf8               Ljava/io/InputStream;\n-  #102 = Utf8               (Ljava/lang/String;)V\n-  #103 = Utf8               s\n-  #104 = Utf8               Ljava/lang/String;\n-  #105 = Utf8               back\n-  #106 = Utf8               ()V\n-  #107 = Utf8               Exceptions\n-  #108 = Utf8               decrementIndexes\n-  #109 = Utf8               dehexchar\n-  #110 = Utf8               (C)I\n-  #111 = Utf8               c\n-  #112 = Utf8               end\n-  #113 = Utf8               ()Z\n-  #114 = Utf8               more\n-  #115 = Utf8               e\n-  #116 = Utf8               Ljava/io/IOException;\n-  #117 = Class              #187          // java/io/IOException\n-  #118 = Utf8               next\n-  #119 = Utf8               ()C\n-  #120 = Utf8               I\n-  #121 = Utf8               exception\n-  #122 = Utf8               getPrevious\n-  #123 = Utf8               incrementIndexes\n-  #124 = Utf8               (I)V\n-  #125 = Utf8               (C)C\n-  #126 = Utf8               n\n-  #127 = Utf8               (I)Ljava/lang/String;\n-  #128 = Utf8               chars\n-  #129 = Utf8               [C\n-  #130 = Utf8               pos\n-  #131 = Class              #129          // \"[C\"\n-  #132 = Utf8               nextClean\n-  #133 = Utf8               nextString\n-  #134 = Utf8               (C)Ljava/lang/String;\n-  #135 = Utf8               Ljava/lang/NumberFormatException;\n-  #136 = Utf8               quote\n-  #137 = Utf8               sb\n-  #138 = Utf8               Ljava/lang/StringBuilder;\n-  #139 = Class              #196          // java/lang/StringBuilder\n-  #140 = Class              #214          // java/lang/NumberFormatException\n-  #141 = Utf8               nextTo\n-  #142 = Utf8               delimiter\n-  #143 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n-  #144 = Utf8               delimiters\n-  #145 = Class              #208          // java/lang/String\n-  #146 = Utf8               nextValue\n-  #147 = Utf8               ()Ljava/lang/Object;\n-  #148 = Utf8               Ljava/lang/StackOverflowError;\n-  #149 = Utf8               string\n-  #150 = Class              #224          // java/lang/StackOverflowError\n-  #151 = Utf8               skipTo\n-  #152 = Utf8               startIndex\n-  #153 = Utf8               startCharacter\n-  #154 = Utf8               startLine\n-  #155 = Utf8               to\n-  #156 = Utf8               syntaxError\n-  #157 = Utf8               (Ljava/lang/String;)Lorg/json/JSONException;\n-  #158 = Utf8               message\n-  #159 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-  #160 = Utf8               causedBy\n-  #161 = Utf8               Ljava/lang/Throwable;\n-  #162 = Utf8               toString\n-  #163 = Utf8               ()Ljava/lang/String;\n-  #164 = Utf8               SourceFile\n-  #165 = Utf8               JSONTokener.java\n-  #166 = NameAndType        #89:#106      // \"<init>\":()V\n-  #167 = Class              #238          // java/io/Reader\n-  #168 = NameAndType        #239:#113     // markSupported:()Z\n-  #169 = Utf8               java/io/BufferedReader\n-  #170 = NameAndType        #89:#90       // \"<init>\":(Ljava/io/Reader;)V\n-  #171 = NameAndType        #85:#86       // reader:Ljava/io/Reader;\n-  #172 = NameAndType        #79:#80       // eof:Z\n-  #173 = NameAndType        #87:#80       // usePrevious:Z\n-  #174 = NameAndType        #83:#84       // previous:C\n-  #175 = NameAndType        #81:#78       // index:J\n-  #176 = NameAndType        #77:#78       // character:J\n-  #177 = NameAndType        #88:#78       // characterPreviousLine:J\n-  #178 = NameAndType        #82:#78       // line:J\n-  #179 = Utf8               java/io/InputStreamReader\n-  #180 = NameAndType        #89:#99       // \"<init>\":(Ljava/io/InputStream;)V\n-  #181 = Utf8               java/io/StringReader\n-  #182 = NameAndType        #89:#102      // \"<init>\":(Ljava/lang/String;)V\n-  #183 = Utf8               org/json/JSONException\n-  #184 = Utf8               Stepping back two steps is not supported\n-  #185 = NameAndType        #108:#106     // decrementIndexes:()V\n-  #186 = NameAndType        #240:#124     // mark:(I)V\n-  #187 = Utf8               java/io/IOException\n-  #188 = Utf8               Unable to preserve stream position\n-  #189 = NameAndType        #89:#241      // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #190 = NameAndType        #242:#243     // read:()I\n-  #191 = NameAndType        #244:#106     // reset:()V\n-  #192 = Utf8               Unable to read the next character from the stream\n-  #193 = NameAndType        #89:#245      // \"<init>\":(Ljava/lang/Throwable;)V\n-  #194 = NameAndType        #123:#124     // incrementIndexes:(I)V\n-  #195 = NameAndType        #118:#119     // next:()C\n-  #196 = Utf8               java/lang/StringBuilder\n-  #197 = Utf8               Expected \\'\n-  #198 = NameAndType        #246:#247     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #199 = NameAndType        #246:#248     // append:(C)Ljava/lang/StringBuilder;\n-  #200 = Utf8               \\' and instead saw \\'\n-  #201 = Utf8               \\'\n-  #202 = NameAndType        #162:#163     // toString:()Ljava/lang/String;\n-  #203 = NameAndType        #156:#157     // syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n-  #204 = Utf8               \\' and instead saw \\'\\'\n-  #205 = Utf8\n-  #206 = NameAndType        #112:#113     // end:()Z\n-  #207 = Utf8               Substring bounds error\n-  #208 = Utf8               java/lang/String\n-  #209 = NameAndType        #89:#249      // \"<init>\":([C)V\n-  #210 = Utf8               Unterminated string\n-  #211 = NameAndType        #118:#127     // next:(I)Ljava/lang/String;\n-  #212 = Class              #250          // java/lang/Integer\n-  #213 = NameAndType        #251:#252     // parseInt:(Ljava/lang/String;I)I\n-  #214 = Utf8               java/lang/NumberFormatException\n-  #215 = Utf8               Illegal escape.\n-  #216 = NameAndType        #156:#159     // syntaxError:(Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n-  #217 = NameAndType        #105:#106     // back:()V\n-  #218 = NameAndType        #253:#163     // trim:()Ljava/lang/String;\n-  #219 = NameAndType        #254:#255     // indexOf:(I)I\n-  #220 = NameAndType        #132:#119     // nextClean:()C\n-  #221 = NameAndType        #133:#134     // nextString:(C)Ljava/lang/String;\n-  #222 = Utf8               org/json/JSONObject\n-  #223 = NameAndType        #89:#256      // \"<init>\":(Lorg/json/JSONTokener;)V\n-  #224 = Utf8               java/lang/StackOverflowError\n-  #225 = Utf8               JSON Array or Object depth too large to process.\n-  #226 = Utf8               org/json/JSONArray\n-  #227 = Utf8               ,:]}/\\\\\\\"[{;=#\n-  #228 = NameAndType        #257:#258     // equals:(Ljava/lang/Object;)Z\n-  #229 = Utf8               Missing value\n-  #230 = NameAndType        #259:#260     // stringToValue:(Ljava/lang/String;)Ljava/lang/Object;\n-  #231 = Utf8                at\n-  #232 = NameAndType        #246:#261     // append:(J)Ljava/lang/StringBuilder;\n-  #233 = Utf8                [character\n-  #234 = Utf8                line\n-  #235 = Utf8               ]\n-  #236 = Utf8               org/json/JSONTokener\n-  #237 = Utf8               java/lang/Object\n-  #238 = Utf8               java/io/Reader\n-  #239 = Utf8               markSupported\n-  #240 = Utf8               mark\n-  #241 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n-  #242 = Utf8               read\n-  #243 = Utf8               ()I\n-  #244 = Utf8               reset\n-  #245 = Utf8               (Ljava/lang/Throwable;)V\n-  #246 = Utf8               append\n-  #247 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #248 = Utf8               (C)Ljava/lang/StringBuilder;\n-  #249 = Utf8               ([C)V\n-  #250 = Utf8               java/lang/Integer\n-  #251 = Utf8               parseInt\n-  #252 = Utf8               (Ljava/lang/String;I)I\n-  #253 = Utf8               trim\n-  #254 = Utf8               indexOf\n-  #255 = Utf8               (I)I\n-  #256 = Utf8               (Lorg/json/JSONTokener;)V\n-  #257 = Utf8               equals\n-  #258 = Utf8               (Ljava/lang/Object;)Z\n-  #259 = Utf8               stringToValue\n-  #260 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n-  #261 = Utf8               (J)Ljava/lang/StringBuilder;\n+   #97 = Class              #231          // java/io/Reader\n+   #98 = Utf8               (Ljava/io/InputStream;)V\n+   #99 = Utf8               inputStream\n+  #100 = Utf8               Ljava/io/InputStream;\n+  #101 = Utf8               (Ljava/lang/String;)V\n+  #102 = Utf8               s\n+  #103 = Utf8               Ljava/lang/String;\n+  #104 = Utf8               back\n+  #105 = Utf8               ()V\n+  #106 = Utf8               Exceptions\n+  #107 = Utf8               decrementIndexes\n+  #108 = Utf8               dehexchar\n+  #109 = Utf8               (C)I\n+  #110 = Utf8               c\n+  #111 = Utf8               end\n+  #112 = Utf8               ()Z\n+  #113 = Utf8               more\n+  #114 = Utf8               e\n+  #115 = Utf8               Ljava/io/IOException;\n+  #116 = Utf8               next\n+  #117 = Utf8               ()C\n+  #118 = Utf8               I\n+  #119 = Utf8               exception\n+  #120 = Utf8               getPrevious\n+  #121 = Utf8               incrementIndexes\n+  #122 = Utf8               (I)V\n+  #123 = Utf8               (C)C\n+  #124 = Utf8               n\n+  #125 = Utf8               (I)Ljava/lang/String;\n+  #126 = Utf8               chars\n+  #127 = Utf8               [C\n+  #128 = Utf8               pos\n+  #129 = Class              #127          // \"[C\"\n+  #130 = Utf8               nextClean\n+  #131 = Utf8               nextString\n+  #132 = Utf8               (C)Ljava/lang/String;\n+  #133 = Utf8               Ljava/lang/NumberFormatException;\n+  #134 = Utf8               quote\n+  #135 = Utf8               sb\n+  #136 = Utf8               Ljava/lang/StringBuilder;\n+  #137 = Utf8               nextTo\n+  #138 = Utf8               delimiter\n+  #139 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n+  #140 = Utf8               delimiters\n+  #141 = Utf8               nextValue\n+  #142 = Utf8               ()Ljava/lang/Object;\n+  #143 = Utf8               Ljava/lang/StackOverflowError;\n+  #144 = Utf8               string\n+  #145 = Utf8               skipTo\n+  #146 = Utf8               startIndex\n+  #147 = Utf8               startCharacter\n+  #148 = Utf8               startLine\n+  #149 = Utf8               to\n+  #150 = Utf8               syntaxError\n+  #151 = Utf8               (Ljava/lang/String;)Lorg/json/JSONException;\n+  #152 = Utf8               message\n+  #153 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+  #154 = Utf8               causedBy\n+  #155 = Utf8               Ljava/lang/Throwable;\n+  #156 = Utf8               toString\n+  #157 = Utf8               ()Ljava/lang/String;\n+  #158 = Utf8               SourceFile\n+  #159 = Utf8               JSONTokener.java\n+  #160 = NameAndType        #89:#105      // \"<init>\":()V\n+  #161 = NameAndType        #232:#112     // markSupported:()Z\n+  #162 = Utf8               java/io/BufferedReader\n+  #163 = NameAndType        #89:#90       // \"<init>\":(Ljava/io/Reader;)V\n+  #164 = NameAndType        #85:#86       // reader:Ljava/io/Reader;\n+  #165 = NameAndType        #79:#80       // eof:Z\n+  #166 = NameAndType        #87:#80       // usePrevious:Z\n+  #167 = NameAndType        #83:#84       // previous:C\n+  #168 = NameAndType        #81:#78       // index:J\n+  #169 = NameAndType        #77:#78       // character:J\n+  #170 = NameAndType        #88:#78       // characterPreviousLine:J\n+  #171 = NameAndType        #82:#78       // line:J\n+  #172 = Utf8               java/io/InputStreamReader\n+  #173 = NameAndType        #89:#98       // \"<init>\":(Ljava/io/InputStream;)V\n+  #174 = Utf8               java/io/StringReader\n+  #175 = NameAndType        #89:#101      // \"<init>\":(Ljava/lang/String;)V\n+  #176 = Utf8               org/json/JSONException\n+  #177 = Utf8               Stepping back two steps is not supported\n+  #178 = NameAndType        #107:#105     // decrementIndexes:()V\n+  #179 = NameAndType        #233:#122     // mark:(I)V\n+  #180 = Utf8               java/io/IOException\n+  #181 = Utf8               Unable to preserve stream position\n+  #182 = NameAndType        #89:#234      // \"<init>\":(Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #183 = NameAndType        #235:#236     // read:()I\n+  #184 = NameAndType        #237:#105     // reset:()V\n+  #185 = Utf8               Unable to read the next character from the stream\n+  #186 = NameAndType        #89:#238      // \"<init>\":(Ljava/lang/Throwable;)V\n+  #187 = NameAndType        #121:#122     // incrementIndexes:(I)V\n+  #188 = NameAndType        #116:#117     // next:()C\n+  #189 = Utf8               java/lang/StringBuilder\n+  #190 = Utf8               Expected \\'\n+  #191 = NameAndType        #239:#240     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #192 = NameAndType        #239:#241     // append:(C)Ljava/lang/StringBuilder;\n+  #193 = Utf8               \\' and instead saw \\'\n+  #194 = Utf8               \\'\n+  #195 = NameAndType        #156:#157     // toString:()Ljava/lang/String;\n+  #196 = NameAndType        #150:#151     // syntaxError:(Ljava/lang/String;)Lorg/json/JSONException;\n+  #197 = Utf8               \\' and instead saw \\'\\'\n+  #198 = Utf8\n+  #199 = NameAndType        #111:#112     // end:()Z\n+  #200 = Utf8               Substring bounds error\n+  #201 = Utf8               java/lang/String\n+  #202 = NameAndType        #89:#242      // \"<init>\":([C)V\n+  #203 = Utf8               Unterminated string\n+  #204 = NameAndType        #116:#125     // next:(I)Ljava/lang/String;\n+  #205 = Class              #243          // java/lang/Integer\n+  #206 = NameAndType        #244:#245     // parseInt:(Ljava/lang/String;I)I\n+  #207 = Utf8               java/lang/NumberFormatException\n+  #208 = Utf8               Illegal escape.\n+  #209 = NameAndType        #150:#153     // syntaxError:(Ljava/lang/String;Ljava/lang/Throwable;)Lorg/json/JSONException;\n+  #210 = NameAndType        #104:#105     // back:()V\n+  #211 = NameAndType        #246:#157     // trim:()Ljava/lang/String;\n+  #212 = NameAndType        #247:#248     // indexOf:(I)I\n+  #213 = NameAndType        #130:#117     // nextClean:()C\n+  #214 = NameAndType        #131:#132     // nextString:(C)Ljava/lang/String;\n+  #215 = Utf8               org/json/JSONObject\n+  #216 = NameAndType        #89:#249      // \"<init>\":(Lorg/json/JSONTokener;)V\n+  #217 = Utf8               java/lang/StackOverflowError\n+  #218 = Utf8               JSON Array or Object depth too large to process.\n+  #219 = Utf8               org/json/JSONArray\n+  #220 = Utf8               ,:]}/\\\\\\\"[{;=#\n+  #221 = NameAndType        #250:#251     // equals:(Ljava/lang/Object;)Z\n+  #222 = Utf8               Missing value\n+  #223 = NameAndType        #252:#253     // stringToValue:(Ljava/lang/String;)Ljava/lang/Object;\n+  #224 = Utf8                at\n+  #225 = NameAndType        #239:#254     // append:(J)Ljava/lang/StringBuilder;\n+  #226 = Utf8                [character\n+  #227 = Utf8                line\n+  #228 = Utf8               ]\n+  #229 = Utf8               org/json/JSONTokener\n+  #230 = Utf8               java/lang/Object\n+  #231 = Utf8               java/io/Reader\n+  #232 = Utf8               markSupported\n+  #233 = Utf8               mark\n+  #234 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V\n+  #235 = Utf8               read\n+  #236 = Utf8               ()I\n+  #237 = Utf8               reset\n+  #238 = Utf8               (Ljava/lang/Throwable;)V\n+  #239 = Utf8               append\n+  #240 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #241 = Utf8               (C)Ljava/lang/StringBuilder;\n+  #242 = Utf8               ([C)V\n+  #243 = Utf8               java/lang/Integer\n+  #244 = Utf8               parseInt\n+  #245 = Utf8               (Ljava/lang/String;I)I\n+  #246 = Utf8               trim\n+  #247 = Utf8               indexOf\n+  #248 = Utf8               (I)I\n+  #249 = Utf8               (Lorg/json/JSONTokener;)V\n+  #250 = Utf8               equals\n+  #251 = Utf8               (Ljava/lang/Object;)Z\n+  #252 = Utf8               stringToValue\n+  #253 = Utf8               (Ljava/lang/String;)Ljava/lang/Object;\n+  #254 = Utf8               (J)Ljava/lang/StringBuilder;\n {\n   private long character;\n     descriptor: J\n     flags: (0x0002) ACC_PRIVATE\n \n   private boolean eof;\n     descriptor: Z\n@@ -341,14 +334,16 @@\n         57: aload_0\n         58: lconst_1\n         59: putfield      #12                 // Field line:J\n         62: return\n       LineNumberTable:\n         line 45: 0\n         line 46: 4\n+        line 47: 12\n+        line 48: 16\n         line 49: 27\n         line 50: 32\n         line 51: 37\n         line 52: 42\n         line 53: 47\n         line 54: 52\n         line 55: 57\n"}]}
