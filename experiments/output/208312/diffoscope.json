{"diffoscope-json-version": 1, "source1": "first/BoundedInputStream.class", "source2": "second/BoundedInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,23 +8,23 @@\n public class BoundedInputStream extends FilterInputStream\n {\n     private final long maxCount;\n     private long count;\n     private long mark;\n     private boolean propagateClose;\n     \n-    public BoundedInputStream(final InputStream in) {\n-        this(in, -1L);\n+    public BoundedInputStream(final InputStream inputStream) {\n+        this(inputStream, -1L);\n     }\n     \n-    public BoundedInputStream(final InputStream inputStream, final long maxLength) {\n-        super(inputStream);\n+    public BoundedInputStream(final InputStream in, final long maxCount) {\n+        super(in);\n         this.mark = -1L;\n         this.propagateClose = true;\n-        this.maxCount = maxLength;\n+        this.maxCount = maxCount;\n     }\n     \n     @Override\n     public int available() throws IOException {\n         if (this.isMaxLength()) {\n             this.onMaxLength(this.maxCount, this.count);\n             return 0;\n@@ -62,64 +62,62 @@\n     }\n     \n     @Override\n     public boolean markSupported() {\n         return this.in.markSupported();\n     }\n     \n-    protected void onMaxLength(final long maxLength, final long count) throws IOException {\n+    protected void onMaxLength(final long n, final long n2) throws IOException {\n     }\n     \n     @Override\n     public int read() throws IOException {\n         if (this.isMaxLength()) {\n             this.onMaxLength(this.maxCount, this.count);\n             return -1;\n         }\n-        final int result = this.in.read();\n+        final int read = this.in.read();\n         ++this.count;\n-        return result;\n+        return read;\n     }\n     \n     @Override\n-    public int read(final byte[] b) throws IOException {\n-        return this.read(b, 0, b.length);\n+    public int read(final byte[] array) throws IOException {\n+        return this.read(array, 0, array.length);\n     }\n     \n     @Override\n-    public int read(final byte[] b, final int off, final int len) throws IOException {\n+    public int read(final byte[] b, final int off, final int n) throws IOException {\n         if (this.isMaxLength()) {\n             this.onMaxLength(this.maxCount, this.count);\n             return -1;\n         }\n-        final long maxRead = (this.maxCount >= 0L) ? Math.min(len, this.maxCount - this.count) : ((long)len);\n-        final int bytesRead = this.in.read(b, off, (int)maxRead);\n-        if (bytesRead == -1) {\n+        final int read = this.in.read(b, off, (int)((this.maxCount >= 0L) ? Math.min(n, this.maxCount - this.count) : ((long)n)));\n+        if (read == -1) {\n             return -1;\n         }\n-        this.count += bytesRead;\n-        return bytesRead;\n+        this.count += read;\n+        return read;\n     }\n     \n     @Override\n     public synchronized void reset() throws IOException {\n         this.in.reset();\n         this.count = this.mark;\n     }\n     \n     public void setPropagateClose(final boolean propagateClose) {\n         this.propagateClose = propagateClose;\n     }\n     \n     @Override\n-    public long skip(final long n) throws IOException {\n-        final long toSkip = (this.maxCount >= 0L) ? Math.min(n, this.maxCount - this.count) : n;\n-        final long skippedBytes = this.in.skip(toSkip);\n-        this.count += skippedBytes;\n-        return skippedBytes;\n+    public long skip(final long a) throws IOException {\n+        final long skip = this.in.skip((this.maxCount >= 0L) ? Math.min(a, this.maxCount - this.count) : a);\n+        this.count += skip;\n+        return skip;\n     }\n     \n     @Override\n     public String toString() {\n         return this.in.toString();\n     }\n }\n"}]}
