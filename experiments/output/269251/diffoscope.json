{"diffoscope-json-version": 1, "source1": "first/SuppressWithPlainTextCommentFilter$Suppression.class", "source2": "second/SuppressWithPlainTextCommentFilter$Suppression.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,11 +1,10 @@\n \n package com.puppycrawl.tools.checkstyle.filters;\n \n-import java.util.regex.Matcher;\n import com.puppycrawl.tools.checkstyle.api.AuditEvent;\n import java.util.Objects;\n import java.util.regex.PatternSyntaxException;\n import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n import java.util.regex.Pattern;\n \n private static final class Suppression\n@@ -14,96 +13,88 @@\n     private final Pattern eventMessageRegexp;\n     private final Pattern eventIdRegexp;\n     private final String text;\n     private final int lineNo;\n     private final int columnNo;\n     private final SuppressWithPlainTextCommentFilter.SuppressionType suppressionType;\n     \n-    private Suppression(final String text, final int lineNo, final int columnNo, final SuppressWithPlainTextCommentFilter.SuppressionType suppressionType, final SuppressWithPlainTextCommentFilter filter) {\n+    private Suppression(final String text, final int lineNo, final int columnNo, final SuppressWithPlainTextCommentFilter.SuppressionType suppressionType, final SuppressWithPlainTextCommentFilter suppressWithPlainTextCommentFilter) {\n         this.text = text;\n         this.lineNo = lineNo;\n         this.columnNo = columnNo;\n         this.suppressionType = suppressionType;\n-        Pattern commentFormat;\n+        Pattern pattern;\n         if (this.suppressionType == SuppressWithPlainTextCommentFilter.SuppressionType.ON) {\n-            commentFormat = filter.onCommentFormat;\n+            pattern = suppressWithPlainTextCommentFilter.onCommentFormat;\n         }\n         else {\n-            commentFormat = filter.offCommentFormat;\n+            pattern = suppressWithPlainTextCommentFilter.offCommentFormat;\n         }\n-        String format = \"\";\n+        String regex = \"\";\n         try {\n-            format = CommonUtil.fillTemplateWithStringsByRegexp(filter.checkFormat, text, commentFormat);\n-            this.eventSourceRegexp = Pattern.compile(format);\n-            if (filter.messageFormat == null) {\n+            regex = CommonUtil.fillTemplateWithStringsByRegexp(suppressWithPlainTextCommentFilter.checkFormat, text, pattern);\n+            this.eventSourceRegexp = Pattern.compile(regex);\n+            if (suppressWithPlainTextCommentFilter.messageFormat == null) {\n                 this.eventMessageRegexp = null;\n             }\n             else {\n-                format = CommonUtil.fillTemplateWithStringsByRegexp(filter.messageFormat, text, commentFormat);\n-                this.eventMessageRegexp = Pattern.compile(format);\n+                regex = CommonUtil.fillTemplateWithStringsByRegexp(suppressWithPlainTextCommentFilter.messageFormat, text, pattern);\n+                this.eventMessageRegexp = Pattern.compile(regex);\n             }\n-            if (filter.idFormat == null) {\n+            if (suppressWithPlainTextCommentFilter.idFormat == null) {\n                 this.eventIdRegexp = null;\n             }\n             else {\n-                format = CommonUtil.fillTemplateWithStringsByRegexp(filter.idFormat, text, commentFormat);\n-                this.eventIdRegexp = Pattern.compile(format);\n+                regex = CommonUtil.fillTemplateWithStringsByRegexp(suppressWithPlainTextCommentFilter.idFormat, text, pattern);\n+                this.eventIdRegexp = Pattern.compile(regex);\n             }\n         }\n-        catch (final PatternSyntaxException ex) {\n-            throw new IllegalArgumentException(\"unable to parse expanded comment \" + format, (Throwable)ex);\n+        catch (final PatternSyntaxException cause) {\n+            throw new IllegalArgumentException(\"unable to parse expanded comment \" + regex, (Throwable)cause);\n         }\n     }\n     \n     @Override\n-    public boolean equals(final Object other) {\n-        if (this == other) {\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n             return true;\n         }\n-        if (other == null || this.getClass() != other.getClass()) {\n+        if (o == null || this.getClass() != o.getClass()) {\n             return false;\n         }\n-        final Suppression suppression = (Suppression)other;\n+        final Suppression suppression = (Suppression)o;\n         return Objects.equals(Integer.valueOf(this.lineNo), Integer.valueOf(suppression.lineNo)) && Objects.equals(Integer.valueOf(this.columnNo), Integer.valueOf(suppression.columnNo)) && Objects.equals(this.suppressionType, suppression.suppressionType) && Objects.equals(this.text, suppression.text) && Objects.equals(this.eventSourceRegexp, suppression.eventSourceRegexp) && Objects.equals(this.eventMessageRegexp, suppression.eventMessageRegexp) && Objects.equals(this.eventIdRegexp, suppression.eventIdRegexp);\n     }\n     \n     @Override\n     public int hashCode() {\n         return Objects.hash(this.text, Integer.valueOf(this.lineNo), Integer.valueOf(this.columnNo), this.suppressionType, this.eventSourceRegexp, this.eventMessageRegexp, this.eventIdRegexp);\n     }\n     \n-    private boolean isMatch(final AuditEvent event) {\n-        return this.isInScopeOfSuppression(event) && this.isCheckMatch(event) && this.isIdMatch(event) && this.isMessageMatch(event);\n+    private boolean isMatch(final AuditEvent auditEvent) {\n+        return this.isInScopeOfSuppression(auditEvent) && this.isCheckMatch(auditEvent) && this.isIdMatch(auditEvent) && this.isMessageMatch(auditEvent);\n     }\n     \n-    private boolean isInScopeOfSuppression(final AuditEvent event) {\n-        return this.lineNo <= event.getLine();\n+    private boolean isInScopeOfSuppression(final AuditEvent auditEvent) {\n+        return this.lineNo <= auditEvent.getLine();\n     }\n     \n-    private boolean isCheckMatch(final AuditEvent event) {\n-        final Matcher checkMatcher = this.eventSourceRegexp.matcher(event.getSourceName());\n-        return checkMatcher.find();\n+    private boolean isCheckMatch(final AuditEvent auditEvent) {\n+        return this.eventSourceRegexp.matcher(auditEvent.getSourceName()).find();\n     }\n     \n-    private boolean isIdMatch(final AuditEvent event) {\n-        boolean match = true;\n+    private boolean isIdMatch(final AuditEvent auditEvent) {\n+        boolean b = true;\n         if (this.eventIdRegexp != null) {\n-            if (event.getModuleId() == null) {\n-                match = false;\n-            }\n-            else {\n-                final Matcher idMatcher = this.eventIdRegexp.matcher(event.getModuleId());\n-                match = idMatcher.find();\n-            }\n+            b = (auditEvent.getModuleId() != null && this.eventIdRegexp.matcher(auditEvent.getModuleId()).find());\n         }\n-        return match;\n+        return b;\n     }\n     \n-    private boolean isMessageMatch(final AuditEvent event) {\n-        boolean match = true;\n+    private boolean isMessageMatch(final AuditEvent auditEvent) {\n+        boolean find = true;\n         if (this.eventMessageRegexp != null) {\n-            final Matcher messageMatcher = this.eventMessageRegexp.matcher(event.getMessage());\n-            match = messageMatcher.find();\n+            find = this.eventMessageRegexp.matcher(auditEvent.getMessage()).find();\n         }\n-        return match;\n+        return find;\n     }\n }\n"}]}
