{"diffoscope-json-version": 1, "source1": "first/CallableBackgroundInitializer.class", "source2": "second/CallableBackgroundInitializer.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,26 +5,26 @@\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Callable;\n \n public class CallableBackgroundInitializer<T> extends BackgroundInitializer<T>\n {\n     private final Callable<T> callable;\n     \n-    public CallableBackgroundInitializer(final Callable<T> call) {\n-        this.checkCallable(call);\n-        this.callable = call;\n+    public CallableBackgroundInitializer(final Callable<T> callable) {\n+        this.checkCallable(callable);\n+        this.callable = callable;\n     }\n     \n-    public CallableBackgroundInitializer(final Callable<T> call, final ExecutorService exec) {\n-        super(exec);\n-        this.checkCallable(call);\n-        this.callable = call;\n+    public CallableBackgroundInitializer(final Callable<T> callable, final ExecutorService executorService) {\n+        super(executorService);\n+        this.checkCallable(callable);\n+        this.callable = callable;\n     }\n     \n     protected T initialize() throws Exception {\n         return this.callable.call();\n     }\n     \n-    private void checkCallable(final Callable<T> call) {\n-        Validate.notNull((Object)call, \"Callable must not be null!\", new Object[0]);\n+    private void checkCallable(final Callable<T> callable) {\n+        Validate.notNull((Object)callable, \"Callable must not be null!\", new Object[0]);\n     }\n }\n"}]}
