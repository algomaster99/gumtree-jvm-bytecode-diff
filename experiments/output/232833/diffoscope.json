{"diffoscope-json-version": 1, "source1": "first/NodeUpdateData.class", "source2": "second/NodeUpdateData.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,18 +10,18 @@\n public class NodeUpdateData<T>\n {\n     private final Map<QueryResult<T>, Object> changedValues;\n     private final Collection<Object> newValues;\n     private final Collection<QueryResult<T>> removedNodes;\n     private final String key;\n     \n-    public NodeUpdateData(final Map<QueryResult<T>, Object> changedValues, final Collection<Object> newValues, final Collection<QueryResult<T>> removedNodes, final String key) {\n-        this.changedValues = copyMap((Map<? extends QueryResult<T>, ?>)changedValues);\n-        this.newValues = copyCollection((Collection<?>)newValues);\n-        this.removedNodes = copyCollection((Collection<? extends QueryResult<T>>)removedNodes);\n+    public NodeUpdateData(final Map<QueryResult<T>, Object> map, final Collection<Object> collection, final Collection<QueryResult<T>> collection2, final String key) {\n+        this.changedValues = copyMap((Map<? extends QueryResult<T>, ?>)map);\n+        this.newValues = copyCollection((Collection<?>)collection);\n+        this.removedNodes = copyCollection((Collection<? extends QueryResult<T>>)collection2);\n         this.key = key;\n     }\n     \n     public Map<QueryResult<T>, Object> getChangedValues() {\n         return this.changedValues;\n     }\n     \n@@ -33,21 +33,21 @@\n         return this.removedNodes;\n     }\n     \n     public String getKey() {\n         return this.key;\n     }\n     \n-    private static <K, V> Map<K, V> copyMap(final Map<? extends K, ? extends V> map) {\n-        if (map == null) {\n+    private static <K, V> Map<K, V> copyMap(final Map<? extends K, ? extends V> m) {\n+        if (m == null) {\n             return Collections.emptyMap();\n         }\n-        return Collections.unmodifiableMap((Map<? extends K, ? extends V>)new HashMap<K, V>(map));\n+        return Collections.unmodifiableMap((Map<? extends K, ? extends V>)new HashMap<K, V>(m));\n     }\n     \n-    private static <T> Collection<T> copyCollection(final Collection<? extends T> col) {\n-        if (col == null) {\n+    private static <T> Collection<T> copyCollection(final Collection<? extends T> c) {\n+        if (c == null) {\n             return (Collection<T>)Collections.emptySet();\n         }\n-        return Collections.unmodifiableCollection((Collection<? extends T>)new ArrayList<T>(col));\n+        return Collections.unmodifiableCollection((Collection<? extends T>)new ArrayList<T>(c));\n     }\n }\n"}]}
