{"diffoscope-json-version": 1, "source1": "first/INVOKESTATIC.class", "source2": "second/INVOKESTATIC.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,32 +6,32 @@\n import java.io.DataOutputStream;\n \n public class INVOKESTATIC extends InvokeInstruction\n {\n     INVOKESTATIC() {\n     }\n     \n-    public INVOKESTATIC(final int index) {\n-        super((short)184, index);\n+    public INVOKESTATIC(final int n) {\n+        super((short)184, n);\n     }\n     \n-    public void dump(final DataOutputStream out) throws IOException {\n-        out.writeByte(super.getOpcode());\n-        out.writeShort(super.getIndex());\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeByte(super.getOpcode());\n+        dataOutputStream.writeShort(super.getIndex());\n     }\n     \n     public Class<?>[] getExceptions() {\n         return ExceptionConst.createExceptions(ExceptionConst.EXCS.EXCS_FIELD_AND_METHOD_RESOLUTION, new Class[] { ExceptionConst.UNSATISFIED_LINK_ERROR, ExceptionConst.INCOMPATIBLE_CLASS_CHANGE_ERROR });\n     }\n     \n-    public void accept(final Visitor v) {\n-        v.visitExceptionThrower((ExceptionThrower)this);\n-        v.visitTypedInstruction((TypedInstruction)this);\n-        v.visitStackConsumer((StackConsumer)this);\n-        v.visitStackProducer((StackProducer)this);\n-        v.visitLoadClass((LoadClass)this);\n-        v.visitCPInstruction((CPInstruction)this);\n-        v.visitFieldOrMethod((FieldOrMethod)this);\n-        v.visitInvokeInstruction((InvokeInstruction)this);\n-        v.visitINVOKESTATIC(this);\n+    public void accept(final Visitor visitor) {\n+        visitor.visitExceptionThrower((ExceptionThrower)this);\n+        visitor.visitTypedInstruction((TypedInstruction)this);\n+        visitor.visitStackConsumer((StackConsumer)this);\n+        visitor.visitStackProducer((StackProducer)this);\n+        visitor.visitLoadClass((LoadClass)this);\n+        visitor.visitCPInstruction((CPInstruction)this);\n+        visitor.visitFieldOrMethod((FieldOrMethod)this);\n+        visitor.visitInvokeInstruction((InvokeInstruction)this);\n+        visitor.visitINVOKESTATIC(this);\n     }\n }\n"}]}
