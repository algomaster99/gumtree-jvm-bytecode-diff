{"diffoscope-json-version": 1, "source1": "first/ReaderBasedJsonParser.class", "source2": "second/ReaderBasedJsonParser.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,25 +1,25 @@\n \n package com.fasterxml.jackson.core.json;\n \n import com.fasterxml.jackson.core.JsonParseException;\n import com.fasterxml.jackson.core.JsonLocation;\n-import com.fasterxml.jackson.core.io.CharTypes;\n import com.fasterxml.jackson.core.util.TextBuffer;\n import com.fasterxml.jackson.core.SerializableString;\n import java.io.OutputStream;\n import com.fasterxml.jackson.core.util.ByteArrayBuilder;\n import com.fasterxml.jackson.core.Base64Variant;\n-import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.JsonToken;\n import java.io.IOException;\n import java.io.Writer;\n import com.fasterxml.jackson.core.StreamReadCapability;\n import com.fasterxml.jackson.core.util.JacksonFeatureSet;\n import com.fasterxml.jackson.core.io.IOContext;\n+import com.fasterxml.jackson.core.io.CharTypes;\n+import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;\n import com.fasterxml.jackson.core.ObjectCodec;\n import java.io.Reader;\n import com.fasterxml.jackson.core.base.ParserBase;\n \n public class ReaderBasedJsonParser extends ParserBase\n {\n@@ -39,14 +39,26 @@\n     protected final CharsToNameCanonicalizer _symbols;\n     protected final int _hashSeed;\n     protected boolean _tokenIncomplete;\n     protected long _nameStartOffset;\n     protected int _nameStartRow;\n     protected int _nameStartCol;\n     \n+    static {\n+        FEAT_MASK_TRAILING_COMMA = JsonParser.Feature.ALLOW_TRAILING_COMMA.getMask();\n+        FEAT_MASK_LEADING_ZEROS = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS.getMask();\n+        FEAT_MASK_NON_NUM_NUMBERS = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS.getMask();\n+        FEAT_MASK_ALLOW_MISSING = JsonParser.Feature.ALLOW_MISSING_VALUES.getMask();\n+        FEAT_MASK_ALLOW_SINGLE_QUOTES = JsonParser.Feature.ALLOW_SINGLE_QUOTES.getMask();\n+        FEAT_MASK_ALLOW_UNQUOTED_NAMES = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES.getMask();\n+        FEAT_MASK_ALLOW_JAVA_COMMENTS = JsonParser.Feature.ALLOW_COMMENTS.getMask();\n+        FEAT_MASK_ALLOW_YAML_COMMENTS = JsonParser.Feature.ALLOW_YAML_COMMENTS.getMask();\n+        _icLatin1 = CharTypes.getInputCodeLatin1();\n+    }\n+    \n     public ReaderBasedJsonParser(final IOContext ctxt, final int features, final Reader r, final ObjectCodec codec, final CharsToNameCanonicalizer st, final char[] inputBuffer, final int start, final int end, final boolean bufferRecyclable) {\n         super(ctxt, features);\n         this._reader = r;\n         this._objectCodec = codec;\n         this._inputBuffer = inputBuffer;\n         this._inputPtr = start;\n         this._inputEnd = end;\n@@ -1110,26 +1122,26 @@\n         this._inputPtr = startPtr;\n         return this._parseNumber2(false, startPtr);\n     }\n     \n     private final JsonToken _parseFloat(int ch, final int startPtr, int ptr, final boolean neg, final int intLen) throws IOException {\n         final int inputLen = this._inputEnd;\n         int fractLen = 0;\n-        Label_0086: {\n+        Label_0087: {\n             if (ch == 46) {\n                 while (ptr < inputLen) {\n                     ch = this._inputBuffer[ptr++];\n                     if (ch >= 48 && ch <= 57) {\n                         ++fractLen;\n                     }\n                     else {\n                         if (fractLen == 0 && !this.isEnabled(JsonReadFeature.ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS.mappedFeature())) {\n                             this._reportUnexpectedNumberChar(ch, \"Decimal point not followed by a digit\");\n                         }\n-                        break Label_0086;\n+                        break Label_0087;\n                     }\n                 }\n                 return this._parseNumber2(neg, startPtr);\n             }\n         }\n         int expLen = 0;\n         if (ch == 101 || ch == 69) {\n@@ -1238,15 +1250,15 @@\n             }\n             c = this._inputBuffer[this._inputPtr++];\n         }\n         if (intLen == 0 && !this.isEnabled(JsonReadFeature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS.mappedFeature())) {\n             return this._handleInvalidNumberStart(c, neg);\n         }\n         int fractLen = -1;\n-        Label_0376: {\n+        Label_0378: {\n             if (c == '.') {\n                 fractLen = 0;\n                 if (outPtr >= outBuf.length) {\n                     outBuf = this._textBuffer.finishCurrentSegment();\n                     outPtr = 0;\n                 }\n                 outBuf[outPtr++] = c;\n@@ -1263,15 +1275,15 @@\n                                 outBuf[outPtr++] = c;\n                                 continue;\n                             }\n                         }\n                         if (fractLen == 0 && !this.isEnabled(JsonReadFeature.ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS.mappedFeature())) {\n                             this._reportUnexpectedNumberChar((int)c, \"Decimal point not followed by a digit\");\n                         }\n-                        break Label_0376;\n+                        break Label_0378;\n                     }\n                     eof = true;\n                     continue;\n                 }\n             }\n         }\n         int expLen = -1;\n@@ -1587,15 +1599,15 @@\n                 if (this._inputPtr >= this._inputEnd && !this._loadMore()) {\n                     this._reportInvalidEOFInValue(JsonToken.VALUE_NUMBER_INT);\n                 }\n                 return this._handleInvalidNumberStart(this._inputBuffer[this._inputPtr++], false, true);\n             }\n         }\n         if (Character.isJavaIdentifierStart(i)) {\n-            this._reportInvalidToken(\"\" + (char)i, this._validJsonTokenList());\n+            this._reportInvalidToken(new StringBuilder().append((char)i).toString(), this._validJsonTokenList());\n         }\n         this._reportUnexpectedChar(i, \"expected a valid value \" + this._validJsonValueList());\n         return null;\n     }\n     \n     protected JsonToken _handleApos() throws IOException {\n         char[] outBuf = this._textBuffer.emptyAndGetCurrentSegment();\n@@ -1645,19 +1657,19 @@\n                 }\n                 else if (!Character.isJavaIdentifierPart(c)) {\n                     break;\n                 }\n                 ++this._inputPtr;\n                 hash = hash * 33 + i;\n                 outBuf[outPtr++] = c;\n-                if (outPtr < outBuf.length) {\n+                if (outPtr >= outBuf.length) {\n+                    outBuf = this._textBuffer.finishCurrentSegment();\n+                    outPtr = 0;\n                     continue;\n                 }\n-                outBuf = this._textBuffer.finishCurrentSegment();\n-                outPtr = 0;\n                 continue;\n                 this._textBuffer.setCurrentLength(outPtr);\n                 final TextBuffer tb = this._textBuffer;\n                 final char[] buf = tb.getTextBuffer();\n                 final int start = tb.getTextOffset();\n                 final int len = tb.size();\n                 return this._symbols.findSymbol(buf, start, len, hash);\n@@ -2444,20 +2456,8 @@\n             if (!this._parsingContext.inObject()) {\n                 this._reportMismatchedEndMarker(i, ']');\n             }\n             this._parsingContext = this._parsingContext.clearAndGetParent();\n             this._currToken = JsonToken.END_OBJECT;\n         }\n     }\n-    \n-    static {\n-        FEAT_MASK_TRAILING_COMMA = JsonParser.Feature.ALLOW_TRAILING_COMMA.getMask();\n-        FEAT_MASK_LEADING_ZEROS = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS.getMask();\n-        FEAT_MASK_NON_NUM_NUMBERS = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS.getMask();\n-        FEAT_MASK_ALLOW_MISSING = JsonParser.Feature.ALLOW_MISSING_VALUES.getMask();\n-        FEAT_MASK_ALLOW_SINGLE_QUOTES = JsonParser.Feature.ALLOW_SINGLE_QUOTES.getMask();\n-        FEAT_MASK_ALLOW_UNQUOTED_NAMES = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES.getMask();\n-        FEAT_MASK_ALLOW_JAVA_COMMENTS = JsonParser.Feature.ALLOW_COMMENTS.getMask();\n-        FEAT_MASK_ALLOW_YAML_COMMENTS = JsonParser.Feature.ALLOW_YAML_COMMENTS.getMask();\n-        _icLatin1 = CharTypes.getInputCodeLatin1();\n-    }\n }\n"}]}
