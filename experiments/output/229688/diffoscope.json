{"diffoscope-json-version": 1, "source1": "first/DeflateCompressorInputStream.class", "source2": "second/DeflateCompressorInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -21,32 +21,32 @@\n     private final InputStream in;\n     private final Inflater inflater;\n     \n     public DeflateCompressorInputStream(final InputStream inputStream) {\n         this(inputStream, new DeflateParameters());\n     }\n     \n-    public DeflateCompressorInputStream(final InputStream inputStream, final DeflateParameters parameters) {\n-        this.inflater = new Inflater(!parameters.withZlibHeader());\n+    public DeflateCompressorInputStream(final InputStream inputStream, final DeflateParameters deflateParameters) {\n+        this.inflater = new Inflater(!deflateParameters.withZlibHeader());\n         this.in = new InflaterInputStream((InputStream)(this.countingStream = new CountingInputStream(inputStream)), this.inflater);\n     }\n     \n     public int read() throws IOException {\n-        final int ret = this.in.read();\n-        this.count((int)((ret != -1) ? 1 : 0));\n-        return ret;\n+        final int read = this.in.read();\n+        this.count((int)((read != -1) ? 1 : 0));\n+        return read;\n     }\n     \n-    public int read(final byte[] buf, final int off, final int len) throws IOException {\n+    public int read(final byte[] b, final int off, final int len) throws IOException {\n         if (len == 0) {\n             return 0;\n         }\n-        final int ret = this.in.read(buf, off, len);\n-        this.count(ret);\n-        return ret;\n+        final int read = this.in.read(b, off, len);\n+        this.count(read);\n+        return read;\n     }\n     \n     public long skip(final long n) throws IOException {\n         return IOUtils.skip(this.in, n);\n     }\n     \n     public int available() throws IOException {\n@@ -62,11 +62,11 @@\n         }\n     }\n     \n     public long getCompressedCount() {\n         return this.countingStream.getBytesRead();\n     }\n     \n-    public static boolean matches(final byte[] signature, final int length) {\n-        return length > 3 && signature[0] == 120 && (signature[1] == 1 || signature[1] == 94 || signature[1] == -100 || signature[1] == -38);\n+    public static boolean matches(final byte[] array, final int n) {\n+        return n > 3 && array[0] == 120 && (array[1] == 1 || array[1] == 94 || array[1] == -100 || array[1] == -38);\n     }\n }\n"}]}
