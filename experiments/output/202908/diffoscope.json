{"diffoscope-json-version": 1, "source1": "first/LocalFileHeader.class", "source2": "second/LocalFileHeader.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -27,73 +27,73 @@\n     int originalSizeEvenForVolumes;\n     String name;\n     String comment;\n     byte[][] extendedHeaders;\n     \n     @Override\n     public String toString() {\n-        final StringBuilder builder = new StringBuilder();\n-        builder.append(\"LocalFileHeader [archiverVersionNumber=\");\n-        builder.append(this.archiverVersionNumber);\n-        builder.append(\", minVersionToExtract=\");\n-        builder.append(this.minVersionToExtract);\n-        builder.append(\", hostOS=\");\n-        builder.append(this.hostOS);\n-        builder.append(\", arjFlags=\");\n-        builder.append(this.arjFlags);\n-        builder.append(\", method=\");\n-        builder.append(this.method);\n-        builder.append(\", fileType=\");\n-        builder.append(this.fileType);\n-        builder.append(\", reserved=\");\n-        builder.append(this.reserved);\n-        builder.append(\", dateTimeModified=\");\n-        builder.append(this.dateTimeModified);\n-        builder.append(\", compressedSize=\");\n-        builder.append(this.compressedSize);\n-        builder.append(\", originalSize=\");\n-        builder.append(this.originalSize);\n-        builder.append(\", originalCrc32=\");\n-        builder.append(this.originalCrc32);\n-        builder.append(\", fileSpecPosition=\");\n-        builder.append(this.fileSpecPosition);\n-        builder.append(\", fileAccessMode=\");\n-        builder.append(this.fileAccessMode);\n-        builder.append(\", firstChapter=\");\n-        builder.append(this.firstChapter);\n-        builder.append(\", lastChapter=\");\n-        builder.append(this.lastChapter);\n-        builder.append(\", extendedFilePosition=\");\n-        builder.append(this.extendedFilePosition);\n-        builder.append(\", dateTimeAccessed=\");\n-        builder.append(this.dateTimeAccessed);\n-        builder.append(\", dateTimeCreated=\");\n-        builder.append(this.dateTimeCreated);\n-        builder.append(\", originalSizeEvenForVolumes=\");\n-        builder.append(this.originalSizeEvenForVolumes);\n-        builder.append(\", name=\");\n-        builder.append(this.name);\n-        builder.append(\", comment=\");\n-        builder.append(this.comment);\n-        builder.append(\", extendedHeaders=\");\n-        builder.append(Arrays.toString((Object[])this.extendedHeaders));\n-        builder.append(\"]\");\n-        return builder.toString();\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"LocalFileHeader [archiverVersionNumber=\");\n+        sb.append(this.archiverVersionNumber);\n+        sb.append(\", minVersionToExtract=\");\n+        sb.append(this.minVersionToExtract);\n+        sb.append(\", hostOS=\");\n+        sb.append(this.hostOS);\n+        sb.append(\", arjFlags=\");\n+        sb.append(this.arjFlags);\n+        sb.append(\", method=\");\n+        sb.append(this.method);\n+        sb.append(\", fileType=\");\n+        sb.append(this.fileType);\n+        sb.append(\", reserved=\");\n+        sb.append(this.reserved);\n+        sb.append(\", dateTimeModified=\");\n+        sb.append(this.dateTimeModified);\n+        sb.append(\", compressedSize=\");\n+        sb.append(this.compressedSize);\n+        sb.append(\", originalSize=\");\n+        sb.append(this.originalSize);\n+        sb.append(\", originalCrc32=\");\n+        sb.append(this.originalCrc32);\n+        sb.append(\", fileSpecPosition=\");\n+        sb.append(this.fileSpecPosition);\n+        sb.append(\", fileAccessMode=\");\n+        sb.append(this.fileAccessMode);\n+        sb.append(\", firstChapter=\");\n+        sb.append(this.firstChapter);\n+        sb.append(\", lastChapter=\");\n+        sb.append(this.lastChapter);\n+        sb.append(\", extendedFilePosition=\");\n+        sb.append(this.extendedFilePosition);\n+        sb.append(\", dateTimeAccessed=\");\n+        sb.append(this.dateTimeAccessed);\n+        sb.append(\", dateTimeCreated=\");\n+        sb.append(this.dateTimeCreated);\n+        sb.append(\", originalSizeEvenForVolumes=\");\n+        sb.append(this.originalSizeEvenForVolumes);\n+        sb.append(\", name=\");\n+        sb.append(this.name);\n+        sb.append(\", comment=\");\n+        sb.append(this.comment);\n+        sb.append(\", extendedHeaders=\");\n+        sb.append(Arrays.toString((Object[])this.extendedHeaders));\n+        sb.append(\"]\");\n+        return sb.toString();\n     }\n     \n     @Override\n     public int hashCode() {\n         return (this.name == null) ? 0 : this.name.hashCode();\n     }\n     \n     @Override\n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n             return true;\n         }\n-        if (obj == null || this.getClass() != obj.getClass()) {\n+        if (o == null || this.getClass() != o.getClass()) {\n             return false;\n         }\n-        final LocalFileHeader other = (LocalFileHeader)obj;\n-        return this.archiverVersionNumber == other.archiverVersionNumber && this.minVersionToExtract == other.minVersionToExtract && this.hostOS == other.hostOS && this.arjFlags == other.arjFlags && this.method == other.method && this.fileType == other.fileType && this.reserved == other.reserved && this.dateTimeModified == other.dateTimeModified && this.compressedSize == other.compressedSize && this.originalSize == other.originalSize && this.originalCrc32 == other.originalCrc32 && this.fileSpecPosition == other.fileSpecPosition && this.fileAccessMode == other.fileAccessMode && this.firstChapter == other.firstChapter && this.lastChapter == other.lastChapter && this.extendedFilePosition == other.extendedFilePosition && this.dateTimeAccessed == other.dateTimeAccessed && this.dateTimeCreated == other.dateTimeCreated && this.originalSizeEvenForVolumes == other.originalSizeEvenForVolumes && Objects.equals(this.name, other.name) && Objects.equals(this.comment, other.comment) && Arrays.deepEquals(this.extendedHeaders, other.extendedHeaders);\n+        final LocalFileHeader localFileHeader = (LocalFileHeader)o;\n+        return this.archiverVersionNumber == localFileHeader.archiverVersionNumber && this.minVersionToExtract == localFileHeader.minVersionToExtract && this.hostOS == localFileHeader.hostOS && this.arjFlags == localFileHeader.arjFlags && this.method == localFileHeader.method && this.fileType == localFileHeader.fileType && this.reserved == localFileHeader.reserved && this.dateTimeModified == localFileHeader.dateTimeModified && this.compressedSize == localFileHeader.compressedSize && this.originalSize == localFileHeader.originalSize && this.originalCrc32 == localFileHeader.originalCrc32 && this.fileSpecPosition == localFileHeader.fileSpecPosition && this.fileAccessMode == localFileHeader.fileAccessMode && this.firstChapter == localFileHeader.firstChapter && this.lastChapter == localFileHeader.lastChapter && this.extendedFilePosition == localFileHeader.extendedFilePosition && this.dateTimeAccessed == localFileHeader.dateTimeAccessed && this.dateTimeCreated == localFileHeader.dateTimeCreated && this.originalSizeEvenForVolumes == localFileHeader.originalSizeEvenForVolumes && Objects.equals(this.name, localFileHeader.name) && Objects.equals(this.comment, localFileHeader.comment) && Arrays.deepEquals(this.extendedHeaders, localFileHeader.extendedHeaders);\n     }\n }\n"}]}
