{"diffoscope-json-version": 1, "source1": "first/MagicNumberFileFilter.class", "source2": "second/MagicNumberFileFilter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -57,43 +57,80 @@\n         }\n         this.magicNumbers = magicNumber.getBytes(Charset.defaultCharset());\n         this.byteOffset = offset;\n     }\n     \n     public boolean accept(final File file) {\n         if (file != null && file.isFile() && file.canRead()) {\n-            try (final RandomAccessFile randomAccessFile = new RandomAccessFile(file, \"r\")) {\n-                final byte[] fileBytes = IOUtils.byteArray(this.magicNumbers.length);\n-                randomAccessFile.seek(this.byteOffset);\n-                final int read = randomAccessFile.read(fileBytes);\n-                if (read != this.magicNumbers.length) {\n-                    final boolean b = false;\n-                    randomAccessFile.close();\n-                    return b;\n+            try {\n+                Throwable t = null;\n+                try {\n+                    final RandomAccessFile randomAccessFile = new RandomAccessFile(file, \"r\");\n+                    try {\n+                        final byte[] fileBytes = IOUtils.byteArray(this.magicNumbers.length);\n+                        randomAccessFile.seek(this.byteOffset);\n+                        final int read = randomAccessFile.read(fileBytes);\n+                        return read == this.magicNumbers.length && Arrays.equals(this.magicNumbers, fileBytes);\n+                    }\n+                    finally {\n+                        if (randomAccessFile != null) {\n+                            randomAccessFile.close();\n+                        }\n+                    }\n+                }\n+                finally {\n+                    if (t == null) {\n+                        final Throwable exception;\n+                        t = exception;\n+                    }\n+                    else {\n+                        final Throwable exception;\n+                        if (t != exception) {\n+                            t.addSuppressed(exception);\n+                        }\n+                    }\n                 }\n-                return Arrays.equals(this.magicNumbers, fileBytes);\n             }\n             catch (final IOException ex) {}\n         }\n         return false;\n     }\n     \n     public FileVisitResult accept(final Path file, final BasicFileAttributes attributes) {\n         if (file != null && Files.isRegularFile(file, new LinkOption[0]) && Files.isReadable(file)) {\n-            try (final FileChannel fileChannel = FileChannel.open(file, new OpenOption[0])) {\n-                final ByteBuffer byteBuffer = ByteBuffer.allocate(this.magicNumbers.length);\n-                final int read = fileChannel.read(byteBuffer);\n-                if (read != this.magicNumbers.length) {\n-                    final FileVisitResult terminate = FileVisitResult.TERMINATE;\n-                    if (fileChannel != null) {\n-                        fileChannel.close();\n+            try {\n+                Throwable t = null;\n+                try {\n+                    final FileChannel fileChannel = FileChannel.open(file, new OpenOption[0]);\n+                    try {\n+                        final ByteBuffer byteBuffer = ByteBuffer.allocate(this.magicNumbers.length);\n+                        final int read = fileChannel.read(byteBuffer);\n+                        if (read != this.magicNumbers.length) {\n+                            return FileVisitResult.TERMINATE;\n+                        }\n+                        return toFileVisitResult(Arrays.equals(this.magicNumbers, byteBuffer.array()), file);\n+                    }\n+                    finally {\n+                        if (fileChannel != null) {\n+                            fileChannel.close();\n+                        }\n+                    }\n+                }\n+                finally {\n+                    if (t == null) {\n+                        final Throwable exception;\n+                        t = exception;\n+                    }\n+                    else {\n+                        final Throwable exception;\n+                        if (t != exception) {\n+                            t.addSuppressed(exception);\n+                        }\n                     }\n-                    return terminate;\n                 }\n-                return toFileVisitResult(Arrays.equals(this.magicNumbers, byteBuffer.array()), file);\n             }\n             catch (final IOException ex) {}\n         }\n         return FileVisitResult.TERMINATE;\n     }\n     \n     public String toString() {\n"}]}
