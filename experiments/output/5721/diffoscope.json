{"diffoscope-json-version": 1, "source1": "first/EventCountCircuitBreaker.class", "source2": "second/EventCountCircuitBreaker.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,70 +1,70 @@\n-  SHA-256 checksum 40034152151d45465c83de4bded5ad2d65cf09fb6f97c6589a82a81d109840a7\n+  SHA-256 checksum 2392ff395b92546dbf682007de6ab5cf636188ec626bf9d6a93770d7690f9356\n   Compiled from \"EventCountCircuitBreaker.java\"\n public class org.apache.commons.lang3.concurrent.EventCountCircuitBreaker extends org.apache.commons.lang3.concurrent.AbstractCircuitBreaker<java.lang.Integer>\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #51                         // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n   super_class: #52                        // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker\n   interfaces: 0, fields: 6, methods: 21, attributes: 3\n Constant pool:\n-    #1 = Methodref          #52.#135      // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.\"<init>\":()V\n-    #2 = Class              #136          // java/util/concurrent/atomic/AtomicReference\n-    #3 = Class              #137          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n-    #4 = Methodref          #3.#138       // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.\"<init>\":(IJ)V\n-    #5 = Methodref          #2.#139       // java/util/concurrent/atomic/AtomicReference.\"<init>\":(Ljava/lang/Object;)V\n-    #6 = Fieldref           #51.#140      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;\n-    #7 = Fieldref           #51.#141      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.openingThreshold:I\n-    #8 = Methodref          #142.#143     // java/util/concurrent/TimeUnit.toNanos:(J)J\n-    #9 = Fieldref           #51.#144      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.openingInterval:J\n-   #10 = Fieldref           #51.#145      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.closingThreshold:I\n-   #11 = Fieldref           #51.#146      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.closingInterval:J\n-   #12 = Methodref          #51.#147      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.\"<init>\":(IJLjava/util/concurrent/TimeUnit;IJLjava/util/concurrent/TimeUnit;)V\n-   #13 = Methodref          #51.#148      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.\"<init>\":(IJLjava/util/concurrent/TimeUnit;I)V\n-   #14 = Methodref          #51.#149      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.performStateCheck:(I)Z\n-   #15 = Methodref          #49.#150      // java/lang/Integer.intValue:()I\n-   #16 = Methodref          #49.#151      // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #17 = Methodref          #51.#152      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.incrementAndCheckState:(Ljava/lang/Integer;)Z\n-   #18 = Methodref          #52.#153      // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.open:()V\n-   #19 = Methodref          #51.#154      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.now:()J\n-   #20 = Methodref          #2.#155       // java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V\n-   #21 = Methodref          #52.#156      // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.close:()V\n-   #22 = Fieldref           #51.#157      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.state:Ljava/util/concurrent/atomic/AtomicReference;\n-   #23 = Methodref          #2.#158       // java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n-   #24 = Class              #159          // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State\n-   #25 = Methodref          #51.#160      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.nextCheckIntervalData:(ILorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;J)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n-   #26 = Methodref          #51.#161      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.updateCheckIntervalData:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n-   #27 = Methodref          #51.#162      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.stateStrategy:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;\n-   #28 = Methodref          #39.#163      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy.isStateTransition:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n-   #29 = Methodref          #24.#164      // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.oppositeState:()Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n-   #30 = Methodref          #51.#165      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.changeStateAndStartNewCheckInterval:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V\n-   #31 = Methodref          #51.#166      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.isOpen:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Z\n-   #32 = Methodref          #2.#167       // java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n-   #33 = Methodref          #51.#168      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.changeState:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V\n-   #34 = Methodref          #39.#169      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy.isCheckIntervalFinished:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;J)Z\n-   #35 = Methodref          #3.#170       // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.increment:(I)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n-   #36 = Methodref          #171.#172     // java/lang/System.nanoTime:()J\n-   #37 = Fieldref           #51.#173      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.STRATEGY_MAP:Ljava/util/Map;\n-   #38 = InterfaceMethodref #174.#175     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #39 = Class              #176          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy\n-   #40 = Class              #177          // java/util/EnumMap\n-   #41 = Methodref          #40.#178      // java/util/EnumMap.\"<init>\":(Ljava/lang/Class;)V\n-   #42 = Fieldref           #24.#179      // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.CLOSED:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n-   #43 = Class              #180          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed\n-   #44 = Methodref          #43.#181      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed.\"<init>\":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n-   #45 = InterfaceMethodref #174.#182     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-   #46 = Fieldref           #24.#183      // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.OPEN:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n-   #47 = Class              #184          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen\n-   #48 = Methodref          #47.#181      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen.\"<init>\":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n-   #49 = Class              #185          // java/lang/Integer\n-   #50 = Methodref          #51.#186      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.createStrategyMap:()Ljava/util/Map;\n-   #51 = Class              #187          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n-   #52 = Class              #188          // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker\n-   #53 = Class              #189          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1\n+    #1 = Methodref          #52.#133      // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.\"<init>\":()V\n+    #2 = Class              #134          // java/util/concurrent/atomic/AtomicReference\n+    #3 = Class              #135          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n+    #4 = Methodref          #3.#136       // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.\"<init>\":(IJ)V\n+    #5 = Methodref          #2.#137       // java/util/concurrent/atomic/AtomicReference.\"<init>\":(Ljava/lang/Object;)V\n+    #6 = Fieldref           #51.#138      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;\n+    #7 = Fieldref           #51.#139      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.openingThreshold:I\n+    #8 = Methodref          #140.#141     // java/util/concurrent/TimeUnit.toNanos:(J)J\n+    #9 = Fieldref           #51.#142      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.openingInterval:J\n+   #10 = Fieldref           #51.#143      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.closingThreshold:I\n+   #11 = Fieldref           #51.#144      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.closingInterval:J\n+   #12 = Methodref          #51.#145      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.\"<init>\":(IJLjava/util/concurrent/TimeUnit;IJLjava/util/concurrent/TimeUnit;)V\n+   #13 = Methodref          #51.#146      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.\"<init>\":(IJLjava/util/concurrent/TimeUnit;I)V\n+   #14 = Methodref          #51.#147      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.performStateCheck:(I)Z\n+   #15 = Methodref          #49.#148      // java/lang/Integer.intValue:()I\n+   #16 = Methodref          #49.#149      // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+   #17 = Methodref          #51.#150      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.incrementAndCheckState:(Ljava/lang/Integer;)Z\n+   #18 = Methodref          #52.#151      // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.open:()V\n+   #19 = Methodref          #51.#152      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.now:()J\n+   #20 = Methodref          #2.#153       // java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V\n+   #21 = Methodref          #52.#154      // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.close:()V\n+   #22 = Fieldref           #51.#155      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.state:Ljava/util/concurrent/atomic/AtomicReference;\n+   #23 = Methodref          #2.#156       // java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;\n+   #24 = Class              #157          // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State\n+   #25 = Methodref          #51.#158      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.nextCheckIntervalData:(ILorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;J)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n+   #26 = Methodref          #51.#159      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.updateCheckIntervalData:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n+   #27 = Methodref          #51.#160      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.stateStrategy:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;\n+   #28 = Methodref          #39.#161      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy.isStateTransition:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n+   #29 = Methodref          #24.#162      // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.oppositeState:()Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n+   #30 = Methodref          #51.#163      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.changeStateAndStartNewCheckInterval:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V\n+   #31 = Methodref          #51.#164      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.isOpen:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Z\n+   #32 = Methodref          #2.#165       // java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+   #33 = Methodref          #51.#166      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.changeState:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V\n+   #34 = Methodref          #39.#167      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy.isCheckIntervalFinished:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;J)Z\n+   #35 = Methodref          #3.#168       // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.increment:(I)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n+   #36 = Methodref          #169.#170     // java/lang/System.nanoTime:()J\n+   #37 = Fieldref           #51.#171      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.STRATEGY_MAP:Ljava/util/Map;\n+   #38 = InterfaceMethodref #172.#173     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #39 = Class              #174          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy\n+   #40 = Class              #175          // java/util/EnumMap\n+   #41 = Methodref          #40.#176      // java/util/EnumMap.\"<init>\":(Ljava/lang/Class;)V\n+   #42 = Fieldref           #24.#177      // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.CLOSED:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n+   #43 = Class              #178          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed\n+   #44 = Methodref          #43.#179      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed.\"<init>\":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n+   #45 = InterfaceMethodref #172.#180     // java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+   #46 = Fieldref           #24.#181      // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State.OPEN:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n+   #47 = Class              #182          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen\n+   #48 = Methodref          #47.#179      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen.\"<init>\":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n+   #49 = Class              #183          // java/lang/Integer\n+   #50 = Methodref          #51.#184      // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.createStrategyMap:()Ljava/util/Map;\n+   #51 = Class              #185          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n+   #52 = Class              #186          // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker\n+   #53 = Class              #187          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1\n    #54 = Utf8               InnerClasses\n    #55 = Utf8               StateStrategyOpen\n    #56 = Utf8               StateStrategyClosed\n    #57 = Utf8               StateStrategy\n    #58 = Utf8               CheckIntervalData\n    #59 = Utf8               STRATEGY_MAP\n    #60 = Utf8               Ljava/util/Map;\n@@ -115,125 +115,123 @@\n   #105 = Utf8               time\n   #106 = Utf8               currentData\n   #107 = Utf8               Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n   #108 = Utf8               nextData\n   #109 = Utf8               currentState\n   #110 = Utf8               Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n   #111 = Utf8               StackMapTable\n-  #112 = Class              #137          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n-  #113 = Class              #159          // org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State\n-  #114 = Utf8               updateCheckIntervalData\n-  #115 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n-  #116 = Utf8               changeStateAndStartNewCheckInterval\n-  #117 = Utf8               (Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V\n-  #118 = Utf8               newState\n-  #119 = Utf8               nextCheckIntervalData\n-  #120 = Utf8               (ILorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;J)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n-  #121 = Utf8               now\n-  #122 = Utf8               stateStrategy\n-  #123 = Utf8               (Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;\n-  #124 = Utf8               state\n-  #125 = Utf8               createStrategyMap\n-  #126 = Utf8               ()Ljava/util/Map;\n-  #127 = Utf8               map\n-  #128 = Utf8               LocalVariableTypeTable\n-  #129 = Utf8               ()Ljava/util/Map<Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;>;\n-  #130 = Utf8               (Ljava/lang/Object;)Z\n-  #131 = Utf8               <clinit>\n-  #132 = Utf8               Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker<Ljava/lang/Integer;>;\n-  #133 = Utf8               SourceFile\n-  #134 = Utf8               EventCountCircuitBreaker.java\n-  #135 = NameAndType        #73:#101      // \"<init>\":()V\n-  #136 = Utf8               java/util/concurrent/atomic/AtomicReference\n-  #137 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n-  #138 = NameAndType        #73:#190      // \"<init>\":(IJ)V\n-  #139 = NameAndType        #73:#191      // \"<init>\":(Ljava/lang/Object;)V\n-  #140 = NameAndType        #64:#65       // checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;\n-  #141 = NameAndType        #67:#68       // openingThreshold:I\n-  #142 = Class              #192          // java/util/concurrent/TimeUnit\n-  #143 = NameAndType        #193:#194     // toNanos:(J)J\n-  #144 = NameAndType        #69:#70       // openingInterval:J\n-  #145 = NameAndType        #71:#68       // closingThreshold:I\n-  #146 = NameAndType        #72:#70       // closingInterval:J\n-  #147 = NameAndType        #73:#74       // \"<init>\":(IJLjava/util/concurrent/TimeUnit;IJLjava/util/concurrent/TimeUnit;)V\n-  #148 = NameAndType        #73:#83       // \"<init>\":(IJLjava/util/concurrent/TimeUnit;I)V\n-  #149 = NameAndType        #103:#104     // performStateCheck:(I)Z\n-  #150 = NameAndType        #195:#89      // intValue:()I\n-  #151 = NameAndType        #196:#197     // valueOf:(I)Ljava/lang/Integer;\n-  #152 = NameAndType        #96:#97       // incrementAndCheckState:(Ljava/lang/Integer;)Z\n-  #153 = NameAndType        #100:#101     // open:()V\n-  #154 = NameAndType        #121:#91      // now:()J\n-  #155 = NameAndType        #198:#191     // set:(Ljava/lang/Object;)V\n-  #156 = NameAndType        #102:#101     // close:()V\n-  #157 = NameAndType        #124:#65      // state:Ljava/util/concurrent/atomic/AtomicReference;\n-  #158 = NameAndType        #199:#200     // get:()Ljava/lang/Object;\n-  #159 = Utf8               org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State\n-  #160 = NameAndType        #119:#120     // nextCheckIntervalData:(ILorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;J)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n-  #161 = NameAndType        #114:#115     // updateCheckIntervalData:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n-  #162 = NameAndType        #122:#123     // stateStrategy:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;\n-  #163 = NameAndType        #201:#202     // isStateTransition:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n-  #164 = NameAndType        #203:#204     // oppositeState:()Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n-  #165 = NameAndType        #116:#117     // changeStateAndStartNewCheckInterval:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V\n-  #166 = NameAndType        #205:#206     // isOpen:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Z\n-  #167 = NameAndType        #207:#208     // compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n-  #168 = NameAndType        #209:#117     // changeState:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V\n-  #169 = NameAndType        #210:#211     // isCheckIntervalFinished:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;J)Z\n-  #170 = NameAndType        #98:#212      // increment:(I)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n-  #171 = Class              #213          // java/lang/System\n-  #172 = NameAndType        #214:#91      // nanoTime:()J\n-  #173 = NameAndType        #59:#60       // STRATEGY_MAP:Ljava/util/Map;\n-  #174 = Class              #215          // java/util/Map\n-  #175 = NameAndType        #199:#216     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #176 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy\n-  #177 = Utf8               java/util/EnumMap\n-  #178 = NameAndType        #73:#217      // \"<init>\":(Ljava/lang/Class;)V\n-  #179 = NameAndType        #218:#110     // CLOSED:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n-  #180 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed\n-  #181 = NameAndType        #73:#219      // \"<init>\":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n-  #182 = NameAndType        #220:#221     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #183 = NameAndType        #222:#110     // OPEN:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n-  #184 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen\n-  #185 = Utf8               java/lang/Integer\n-  #186 = NameAndType        #125:#126     // createStrategyMap:()Ljava/util/Map;\n-  #187 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n-  #188 = Utf8               org/apache/commons/lang3/concurrent/AbstractCircuitBreaker\n-  #189 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1\n-  #190 = Utf8               (IJ)V\n-  #191 = Utf8               (Ljava/lang/Object;)V\n-  #192 = Utf8               java/util/concurrent/TimeUnit\n-  #193 = Utf8               toNanos\n-  #194 = Utf8               (J)J\n-  #195 = Utf8               intValue\n-  #196 = Utf8               valueOf\n-  #197 = Utf8               (I)Ljava/lang/Integer;\n-  #198 = Utf8               set\n-  #199 = Utf8               get\n-  #200 = Utf8               ()Ljava/lang/Object;\n-  #201 = Utf8               isStateTransition\n-  #202 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n-  #203 = Utf8               oppositeState\n-  #204 = Utf8               ()Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n-  #205 = Utf8               isOpen\n-  #206 = Utf8               (Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Z\n-  #207 = Utf8               compareAndSet\n-  #208 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z\n-  #209 = Utf8               changeState\n-  #210 = Utf8               isCheckIntervalFinished\n-  #211 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;J)Z\n-  #212 = Utf8               (I)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n-  #213 = Utf8               java/lang/System\n-  #214 = Utf8               nanoTime\n-  #215 = Utf8               java/util/Map\n-  #216 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #217 = Utf8               (Ljava/lang/Class;)V\n-  #218 = Utf8               CLOSED\n-  #219 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n-  #220 = Utf8               put\n-  #221 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n-  #222 = Utf8               OPEN\n+  #112 = Utf8               updateCheckIntervalData\n+  #113 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n+  #114 = Utf8               changeStateAndStartNewCheckInterval\n+  #115 = Utf8               (Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V\n+  #116 = Utf8               newState\n+  #117 = Utf8               nextCheckIntervalData\n+  #118 = Utf8               (ILorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;J)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n+  #119 = Utf8               now\n+  #120 = Utf8               stateStrategy\n+  #121 = Utf8               (Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;\n+  #122 = Utf8               state\n+  #123 = Utf8               createStrategyMap\n+  #124 = Utf8               ()Ljava/util/Map;\n+  #125 = Utf8               map\n+  #126 = Utf8               LocalVariableTypeTable\n+  #127 = Utf8               ()Ljava/util/Map<Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;>;\n+  #128 = Utf8               (Ljava/lang/Object;)Z\n+  #129 = Utf8               <clinit>\n+  #130 = Utf8               Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker<Ljava/lang/Integer;>;\n+  #131 = Utf8               SourceFile\n+  #132 = Utf8               EventCountCircuitBreaker.java\n+  #133 = NameAndType        #73:#101      // \"<init>\":()V\n+  #134 = Utf8               java/util/concurrent/atomic/AtomicReference\n+  #135 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData\n+  #136 = NameAndType        #73:#188      // \"<init>\":(IJ)V\n+  #137 = NameAndType        #73:#189      // \"<init>\":(Ljava/lang/Object;)V\n+  #138 = NameAndType        #64:#65       // checkIntervalData:Ljava/util/concurrent/atomic/AtomicReference;\n+  #139 = NameAndType        #67:#68       // openingThreshold:I\n+  #140 = Class              #190          // java/util/concurrent/TimeUnit\n+  #141 = NameAndType        #191:#192     // toNanos:(J)J\n+  #142 = NameAndType        #69:#70       // openingInterval:J\n+  #143 = NameAndType        #71:#68       // closingThreshold:I\n+  #144 = NameAndType        #72:#70       // closingInterval:J\n+  #145 = NameAndType        #73:#74       // \"<init>\":(IJLjava/util/concurrent/TimeUnit;IJLjava/util/concurrent/TimeUnit;)V\n+  #146 = NameAndType        #73:#83       // \"<init>\":(IJLjava/util/concurrent/TimeUnit;I)V\n+  #147 = NameAndType        #103:#104     // performStateCheck:(I)Z\n+  #148 = NameAndType        #193:#89      // intValue:()I\n+  #149 = NameAndType        #194:#195     // valueOf:(I)Ljava/lang/Integer;\n+  #150 = NameAndType        #96:#97       // incrementAndCheckState:(Ljava/lang/Integer;)Z\n+  #151 = NameAndType        #100:#101     // open:()V\n+  #152 = NameAndType        #119:#91      // now:()J\n+  #153 = NameAndType        #196:#189     // set:(Ljava/lang/Object;)V\n+  #154 = NameAndType        #102:#101     // close:()V\n+  #155 = NameAndType        #122:#65      // state:Ljava/util/concurrent/atomic/AtomicReference;\n+  #156 = NameAndType        #197:#198     // get:()Ljava/lang/Object;\n+  #157 = Utf8               org/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State\n+  #158 = NameAndType        #117:#118     // nextCheckIntervalData:(ILorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;J)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n+  #159 = NameAndType        #112:#113     // updateCheckIntervalData:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n+  #160 = NameAndType        #120:#121     // stateStrategy:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;\n+  #161 = NameAndType        #199:#200     // isStateTransition:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n+  #162 = NameAndType        #201:#202     // oppositeState:()Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n+  #163 = NameAndType        #114:#115     // changeStateAndStartNewCheckInterval:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V\n+  #164 = NameAndType        #203:#204     // isOpen:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Z\n+  #165 = NameAndType        #205:#206     // compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z\n+  #166 = NameAndType        #207:#115     // changeState:(Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)V\n+  #167 = NameAndType        #208:#209     // isCheckIntervalFinished:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;J)Z\n+  #168 = NameAndType        #98:#210      // increment:(I)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n+  #169 = Class              #211          // java/lang/System\n+  #170 = NameAndType        #212:#91      // nanoTime:()J\n+  #171 = NameAndType        #59:#60       // STRATEGY_MAP:Ljava/util/Map;\n+  #172 = Class              #213          // java/util/Map\n+  #173 = NameAndType        #197:#214     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #174 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy\n+  #175 = Utf8               java/util/EnumMap\n+  #176 = NameAndType        #73:#215      // \"<init>\":(Ljava/lang/Class;)V\n+  #177 = NameAndType        #216:#110     // CLOSED:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n+  #178 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed\n+  #179 = NameAndType        #73:#217      // \"<init>\":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n+  #180 = NameAndType        #218:#219     // put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #181 = NameAndType        #220:#110     // OPEN:Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n+  #182 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen\n+  #183 = Utf8               java/lang/Integer\n+  #184 = NameAndType        #123:#124     // createStrategyMap:()Ljava/util/Map;\n+  #185 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n+  #186 = Utf8               org/apache/commons/lang3/concurrent/AbstractCircuitBreaker\n+  #187 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1\n+  #188 = Utf8               (IJ)V\n+  #189 = Utf8               (Ljava/lang/Object;)V\n+  #190 = Utf8               java/util/concurrent/TimeUnit\n+  #191 = Utf8               toNanos\n+  #192 = Utf8               (J)J\n+  #193 = Utf8               intValue\n+  #194 = Utf8               valueOf\n+  #195 = Utf8               (I)Ljava/lang/Integer;\n+  #196 = Utf8               set\n+  #197 = Utf8               get\n+  #198 = Utf8               ()Ljava/lang/Object;\n+  #199 = Utf8               isStateTransition\n+  #200 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z\n+  #201 = Utf8               oppositeState\n+  #202 = Utf8               ()Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;\n+  #203 = Utf8               isOpen\n+  #204 = Utf8               (Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;)Z\n+  #205 = Utf8               compareAndSet\n+  #206 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z\n+  #207 = Utf8               changeState\n+  #208 = Utf8               isCheckIntervalFinished\n+  #209 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;J)Z\n+  #210 = Utf8               (I)Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;\n+  #211 = Utf8               java/lang/System\n+  #212 = Utf8               nanoTime\n+  #213 = Utf8               java/util/Map\n+  #214 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #215 = Utf8               (Ljava/lang/Class;)V\n+  #216 = Utf8               CLOSED\n+  #217 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V\n+  #218 = Utf8               put\n+  #219 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\n+  #220 = Utf8               OPEN\n {\n   private static final java.util.Map<org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State, org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy> STRATEGY_MAP;\n     descriptor: Ljava/util/Map;\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     Signature: #63                          // Ljava/util/Map<Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;>;\n \n   private final java.util.concurrent.atomic.AtomicReference<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData> checkIntervalData;\n@@ -756,15 +754,15 @@\n         line 420: 46\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n            10      38     0   map   Ljava/util/Map;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n            10      38     0   map   Ljava/util/Map<Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;>;\n-    Signature: #129                         // ()Ljava/util/Map<Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;>;\n+    Signature: #127                         // ()Ljava/util/Map<Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;>;\n \n   public boolean incrementAndCheckState(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)Z\n     flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n@@ -785,15 +783,15 @@\n       stack=1, locals=0, args_size=0\n          0: invokestatic  #50                 // Method createStrategyMap:()Ljava/util/Map;\n          3: putstatic     #37                 // Field STRATEGY_MAP:Ljava/util/Map;\n          6: return\n       LineNumberTable:\n         line 141: 0\n }\n-Signature: #132                         // Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker<Ljava/lang/Integer;>;\n+Signature: #130                         // Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker<Ljava/lang/Integer;>;\n SourceFile: \"EventCountCircuitBreaker.java\"\n InnerClasses:\n   static #53;                             // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1\n   private static #55= #47 of #51;         // StateStrategyOpen=class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyOpen of class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n   private static #56= #43 of #51;         // StateStrategyClosed=class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed of class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n   private static abstract #57= #39 of #51; // StateStrategy=class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy of class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n   private static #58= #3 of #51;          // CheckIntervalData=class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData of class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker\n"}]}
