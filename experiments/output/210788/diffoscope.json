{"diffoscope-json-version": 1, "source1": "first/Failable.class", "source2": "second/Failable.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,214 +15,214 @@\n import java.util.concurrent.Callable;\n import java.util.function.BiPredicate;\n import java.util.function.BiFunction;\n import java.util.function.BiConsumer;\n \n public class Failable\n {\n-    public static <T, U, E extends Throwable> void accept(final FailableBiConsumer<T, U, E> consumer, final T object1, final U object2) {\n-        run((org.apache.commons.lang3.function.FailableRunnable<Throwable>)(() -> consumer.accept(object1, object2)));\n+    public static <T, U, E extends Throwable> void accept(final FailableBiConsumer<T, U, E> failableBiConsumer, final T t, final U u) {\n+        run((org.apache.commons.lang3.function.FailableRunnable<Throwable>)(() -> failableBiConsumer.accept(t, u)));\n     }\n     \n-    public static <T, E extends Throwable> void accept(final FailableConsumer<T, E> consumer, final T object) {\n-        run((org.apache.commons.lang3.function.FailableRunnable<Throwable>)(() -> consumer.accept(object)));\n+    public static <T, E extends Throwable> void accept(final FailableConsumer<T, E> failableConsumer, final T t) {\n+        run((org.apache.commons.lang3.function.FailableRunnable<Throwable>)(() -> failableConsumer.accept(t)));\n     }\n     \n-    public static <E extends Throwable> void accept(final FailableDoubleConsumer<E> consumer, final double value) {\n-        run((org.apache.commons.lang3.function.FailableRunnable<Throwable>)(() -> consumer.accept(value)));\n+    public static <E extends Throwable> void accept(final FailableDoubleConsumer<E> failableDoubleConsumer, final double n) {\n+        run((org.apache.commons.lang3.function.FailableRunnable<Throwable>)(() -> failableDoubleConsumer.accept(n)));\n     }\n     \n-    public static <E extends Throwable> void accept(final FailableIntConsumer<E> consumer, final int value) {\n-        run((org.apache.commons.lang3.function.FailableRunnable<Throwable>)(() -> consumer.accept(value)));\n+    public static <E extends Throwable> void accept(final FailableIntConsumer<E> failableIntConsumer, final int n) {\n+        run((org.apache.commons.lang3.function.FailableRunnable<Throwable>)(() -> failableIntConsumer.accept(n)));\n     }\n     \n-    public static <E extends Throwable> void accept(final FailableLongConsumer<E> consumer, final long value) {\n-        run((org.apache.commons.lang3.function.FailableRunnable<Throwable>)(() -> consumer.accept(value)));\n+    public static <E extends Throwable> void accept(final FailableLongConsumer<E> failableLongConsumer, final long n) {\n+        run((org.apache.commons.lang3.function.FailableRunnable<Throwable>)(() -> failableLongConsumer.accept(n)));\n     }\n     \n-    public static <T, U, R, E extends Throwable> R apply(final FailableBiFunction<T, U, R, E> function, final T input1, final U input2) {\n-        return get((org.apache.commons.lang3.function.FailableSupplier<R, Throwable>)(() -> function.apply(input1, input2)));\n+    public static <T, U, R, E extends Throwable> R apply(final FailableBiFunction<T, U, R, E> failableBiFunction, final T t, final U u) {\n+        return get((org.apache.commons.lang3.function.FailableSupplier<R, Throwable>)(() -> failableBiFunction.apply(t, u)));\n     }\n     \n-    public static <T, R, E extends Throwable> R apply(final FailableFunction<T, R, E> function, final T input) {\n-        return get((org.apache.commons.lang3.function.FailableSupplier<R, Throwable>)(() -> function.apply(input)));\n+    public static <T, R, E extends Throwable> R apply(final FailableFunction<T, R, E> failableFunction, final T t) {\n+        return get((org.apache.commons.lang3.function.FailableSupplier<R, Throwable>)(() -> failableFunction.apply(t)));\n     }\n     \n-    public static <E extends Throwable> double applyAsDouble(final FailableDoubleBinaryOperator<E> function, final double left, final double right) {\n-        return getAsDouble((org.apache.commons.lang3.function.FailableDoubleSupplier<Throwable>)(() -> function.applyAsDouble(left, right)));\n+    public static <E extends Throwable> double applyAsDouble(final FailableDoubleBinaryOperator<E> failableDoubleBinaryOperator, final double n, final double n2) {\n+        return getAsDouble((org.apache.commons.lang3.function.FailableDoubleSupplier<Throwable>)(() -> failableDoubleBinaryOperator.applyAsDouble(n, n2)));\n     }\n     \n-    public static <T, U> BiConsumer<T, U> asBiConsumer(final FailableBiConsumer<T, U, ?> consumer) {\n-        return (input1, input2) -> accept((org.apache.commons.lang3.function.FailableBiConsumer<Object, Object, Throwable>)consumer, input1, input2);\n+    public static <T, U> BiConsumer<T, U> asBiConsumer(final FailableBiConsumer<T, U, ?> failableBiConsumer) {\n+        return (o, o2) -> accept((org.apache.commons.lang3.function.FailableBiConsumer<Object, Object, Throwable>)failableBiConsumer2, o, o2);\n     }\n     \n-    public static <T, U, R> BiFunction<T, U, R> asBiFunction(final FailableBiFunction<T, U, R, ?> function) {\n-        return (BiFunction<T, U, R>)((input1, input2) -> apply((org.apache.commons.lang3.function.FailableBiFunction<Object, Object, Object, Throwable>)function, input1, input2));\n+    public static <T, U, R> BiFunction<T, U, R> asBiFunction(final FailableBiFunction<T, U, R, ?> failableBiFunction) {\n+        return (BiFunction<T, U, R>)((o2, o4) -> apply((org.apache.commons.lang3.function.FailableBiFunction<Object, Object, Object, Throwable>)failableBiFunction2, o2, o4));\n     }\n     \n-    public static <T, U> BiPredicate<T, U> asBiPredicate(final FailableBiPredicate<T, U, ?> predicate) {\n-        return (input1, input2) -> test((org.apache.commons.lang3.function.FailableBiPredicate<Object, Object, Throwable>)predicate, input1, input2);\n+    public static <T, U> BiPredicate<T, U> asBiPredicate(final FailableBiPredicate<T, U, ?> failableBiPredicate) {\n+        return (o, o2) -> test((org.apache.commons.lang3.function.FailableBiPredicate<Object, Object, Throwable>)failableBiPredicate2, o, o2);\n     }\n     \n-    public static <V> Callable<V> asCallable(final FailableCallable<V, ?> callable) {\n-        return (Callable<V>)(() -> call((org.apache.commons.lang3.function.FailableCallable<Object, Throwable>)callable));\n+    public static <V> Callable<V> asCallable(final FailableCallable<V, ?> failableCallable) {\n+        return (Callable<V>)(() -> call((org.apache.commons.lang3.function.FailableCallable<Object, Throwable>)failableCallable2));\n     }\n     \n-    public static <T> Consumer<T> asConsumer(final FailableConsumer<T, ?> consumer) {\n-        return input -> accept((org.apache.commons.lang3.function.FailableConsumer<Object, Throwable>)consumer, input);\n+    public static <T> Consumer<T> asConsumer(final FailableConsumer<T, ?> failableConsumer) {\n+        return o -> accept((org.apache.commons.lang3.function.FailableConsumer<Object, Throwable>)failableConsumer2, o);\n     }\n     \n-    public static <T, R> Function<T, R> asFunction(final FailableFunction<T, R, ?> function) {\n-        return (Function<T, R>)(input -> apply((org.apache.commons.lang3.function.FailableFunction<Object, Object, Throwable>)function, input));\n+    public static <T, R> Function<T, R> asFunction(final FailableFunction<T, R, ?> failableFunction) {\n+        return (Function<T, R>)(o2 -> apply((org.apache.commons.lang3.function.FailableFunction<Object, Object, Throwable>)failableFunction2, o2));\n     }\n     \n-    public static <T> Predicate<T> asPredicate(final FailablePredicate<T, ?> predicate) {\n-        return input -> test((org.apache.commons.lang3.function.FailablePredicate<Object, Throwable>)predicate, input);\n+    public static <T> Predicate<T> asPredicate(final FailablePredicate<T, ?> failablePredicate) {\n+        return o -> test((org.apache.commons.lang3.function.FailablePredicate<Object, Throwable>)failablePredicate2, o);\n     }\n     \n-    public static Runnable asRunnable(final FailableRunnable<?> runnable) {\n-        return () -> run((org.apache.commons.lang3.function.FailableRunnable<Throwable>)runnable);\n+    public static Runnable asRunnable(final FailableRunnable<?> failableRunnable) {\n+        return () -> run((org.apache.commons.lang3.function.FailableRunnable<Throwable>)failableRunnable2);\n     }\n     \n-    public static <T> Supplier<T> asSupplier(final FailableSupplier<T, ?> supplier) {\n-        return (Supplier<T>)(() -> get((org.apache.commons.lang3.function.FailableSupplier<Object, Throwable>)supplier));\n+    public static <T> Supplier<T> asSupplier(final FailableSupplier<T, ?> failableSupplier) {\n+        return (Supplier<T>)(() -> get((org.apache.commons.lang3.function.FailableSupplier<Object, Throwable>)failableSupplier2));\n     }\n     \n-    public static <V, E extends Throwable> V call(final FailableCallable<V, E> callable) {\n-        return get((org.apache.commons.lang3.function.FailableSupplier<V, Throwable>)callable::call);\n+    public static <V, E extends Throwable> V call(final FailableCallable<V, E> failableCallable) {\n+        return get((org.apache.commons.lang3.function.FailableSupplier<V, Throwable>)failableCallable::call);\n     }\n     \n-    public static <T, E extends Throwable> T get(final FailableSupplier<T, E> supplier) {\n+    public static <T, E extends Throwable> T get(final FailableSupplier<T, E> failableSupplier) {\n         try {\n-            return (T)supplier.get();\n+            return (T)failableSupplier.get();\n         }\n         catch (final Throwable t) {\n             throw rethrow(t);\n         }\n     }\n     \n-    public static <E extends Throwable> boolean getAsBoolean(final FailableBooleanSupplier<E> supplier) {\n+    public static <E extends Throwable> boolean getAsBoolean(final FailableBooleanSupplier<E> failableBooleanSupplier) {\n         try {\n-            return supplier.getAsBoolean();\n+            return failableBooleanSupplier.getAsBoolean();\n         }\n         catch (final Throwable t) {\n             throw rethrow(t);\n         }\n     }\n     \n-    public static <E extends Throwable> double getAsDouble(final FailableDoubleSupplier<E> supplier) {\n+    public static <E extends Throwable> double getAsDouble(final FailableDoubleSupplier<E> failableDoubleSupplier) {\n         try {\n-            return supplier.getAsDouble();\n+            return failableDoubleSupplier.getAsDouble();\n         }\n         catch (final Throwable t) {\n             throw rethrow(t);\n         }\n     }\n     \n-    public static <E extends Throwable> int getAsInt(final FailableIntSupplier<E> supplier) {\n+    public static <E extends Throwable> int getAsInt(final FailableIntSupplier<E> failableIntSupplier) {\n         try {\n-            return supplier.getAsInt();\n+            return failableIntSupplier.getAsInt();\n         }\n         catch (final Throwable t) {\n             throw rethrow(t);\n         }\n     }\n     \n-    public static <E extends Throwable> long getAsLong(final FailableLongSupplier<E> supplier) {\n+    public static <E extends Throwable> long getAsLong(final FailableLongSupplier<E> failableLongSupplier) {\n         try {\n-            return supplier.getAsLong();\n+            return failableLongSupplier.getAsLong();\n         }\n         catch (final Throwable t) {\n             throw rethrow(t);\n         }\n     }\n     \n-    public static RuntimeException rethrow(final Throwable throwable) {\n-        Objects.requireNonNull(throwable, \"throwable\");\n-        if (throwable instanceof RuntimeException) {\n-            throw (RuntimeException)throwable;\n+    public static RuntimeException rethrow(final Throwable t) {\n+        Objects.requireNonNull(t, \"throwable\");\n+        if (t instanceof RuntimeException) {\n+            throw (RuntimeException)t;\n         }\n-        if (throwable instanceof Error) {\n-            throw (Error)throwable;\n+        if (t instanceof Error) {\n+            throw (Error)t;\n         }\n-        if (throwable instanceof IOException) {\n-            throw new UncheckedIOException((IOException)throwable);\n+        if (t instanceof IOException) {\n+            throw new UncheckedIOException((IOException)t);\n         }\n-        throw new UndeclaredThrowableException(throwable);\n+        throw new UndeclaredThrowableException(t);\n     }\n     \n-    public static <E extends Throwable> void run(final FailableRunnable<E> runnable) {\n+    public static <E extends Throwable> void run(final FailableRunnable<E> failableRunnable) {\n         try {\n-            runnable.run();\n+            failableRunnable.run();\n         }\n         catch (final Throwable t) {\n             throw rethrow(t);\n         }\n     }\n     \n     public static <E> Streams.FailableStream<E> stream(final Collection<E> collection) {\n         return (Streams.FailableStream<E>)new Streams.FailableStream((Stream)collection.stream());\n     }\n     \n     public static <T> Streams.FailableStream<T> stream(final Stream<T> stream) {\n         return (Streams.FailableStream<T>)new Streams.FailableStream((Stream)stream);\n     }\n     \n-    public static <T, U, E extends Throwable> boolean test(final FailableBiPredicate<T, U, E> predicate, final T object1, final U object2) {\n-        return getAsBoolean((org.apache.commons.lang3.function.FailableBooleanSupplier<Throwable>)(() -> predicate.test(object1, object2)));\n+    public static <T, U, E extends Throwable> boolean test(final FailableBiPredicate<T, U, E> failableBiPredicate, final T t, final U u) {\n+        return getAsBoolean((org.apache.commons.lang3.function.FailableBooleanSupplier<Throwable>)(() -> failableBiPredicate.test(t, u)));\n     }\n     \n-    public static <T, E extends Throwable> boolean test(final FailablePredicate<T, E> predicate, final T object) {\n-        return getAsBoolean((org.apache.commons.lang3.function.FailableBooleanSupplier<Throwable>)(() -> predicate.test(object)));\n+    public static <T, E extends Throwable> boolean test(final FailablePredicate<T, E> failablePredicate, final T t) {\n+        return getAsBoolean((org.apache.commons.lang3.function.FailableBooleanSupplier<Throwable>)(() -> failablePredicate.test(t)));\n     }\n     \n     @SafeVarargs\n-    public static void tryWithResources(final FailableRunnable<? extends Throwable> action, final FailableConsumer<Throwable, ? extends Throwable> errorHandler, final FailableRunnable<? extends Throwable>... resources) {\n-        FailableConsumer<Throwable, ? extends Throwable> actualErrorHandler;\n-        if (errorHandler == null) {\n-            actualErrorHandler = (FailableConsumer<Throwable, ? extends Throwable>)Failable::rethrow;\n+    public static void tryWithResources(final FailableRunnable<? extends Throwable> failableRunnable, final FailableConsumer<Throwable, ? extends Throwable> failableConsumer, final FailableRunnable<? extends Throwable>... array) {\n+        FailableConsumer failableConsumer2;\n+        if (failableConsumer == null) {\n+            failableConsumer2 = Failable::rethrow;\n         }\n         else {\n-            actualErrorHandler = errorHandler;\n+            failableConsumer2 = failableConsumer;\n         }\n-        if (resources != null) {\n-            for (final FailableRunnable<? extends Throwable> failableRunnable : resources) {\n-                Objects.requireNonNull(failableRunnable, \"runnable\");\n+        if (array != null) {\n+            for (int length = array.length, i = 0; i < length; ++i) {\n+                Objects.requireNonNull(array[i], \"runnable\");\n             }\n         }\n-        Throwable th = null;\n+        Object o = null;\n         try {\n-            action.run();\n+            failableRunnable.run();\n         }\n         catch (final Throwable t) {\n-            th = t;\n+            o = t;\n         }\n-        if (resources != null) {\n-            for (final FailableRunnable<?> runnable : resources) {\n+        if (array != null) {\n+            for (final FailableRunnable<? extends Throwable> failableRunnable2 : array) {\n                 try {\n-                    runnable.run();\n+                    failableRunnable2.run();\n                 }\n                 catch (final Throwable t2) {\n-                    if (th == null) {\n-                        th = t2;\n+                    if (o == null) {\n+                        o = t2;\n                     }\n                 }\n             }\n         }\n-        if (th != null) {\n+        if (o != null) {\n             try {\n-                actualErrorHandler.accept((Object)th);\n+                failableConsumer2.accept(o);\n             }\n-            catch (final Throwable t) {\n-                throw rethrow(t);\n+            catch (final Throwable t3) {\n+                throw rethrow(t3);\n             }\n         }\n     }\n     \n     @SafeVarargs\n-    public static void tryWithResources(final FailableRunnable<? extends Throwable> action, final FailableRunnable<? extends Throwable>... resources) {\n-        tryWithResources(action, (FailableConsumer<Throwable, ? extends Throwable>)null, resources);\n+    public static void tryWithResources(final FailableRunnable<? extends Throwable> failableRunnable, final FailableRunnable<? extends Throwable>... array) {\n+        tryWithResources(failableRunnable, (FailableConsumer<Throwable, ? extends Throwable>)null, array);\n     }\n     \n     private Failable() {\n     }\n }\n"}]}
