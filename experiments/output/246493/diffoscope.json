{"diffoscope-json-version": 1, "source1": "first/XpathFilterElement.class", "source2": "second/XpathFilterElement.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,11 +1,10 @@\n \n package com.puppycrawl.tools.checkstyle.filters;\n \n-import net.sf.saxon.sxpath.XPathDynamicContext;\n import com.puppycrawl.tools.checkstyle.xpath.RootNode;\n import net.sf.saxon.om.Item;\n import java.util.Iterator;\n import java.util.stream.Stream;\n import java.util.stream.Collector;\n import java.util.stream.Collectors;\n import java.util.List;\n@@ -31,122 +30,120 @@\n     private final Pattern messageRegexp;\n     private final String messagePattern;\n     private final String moduleId;\n     private final XPathExpression xpathExpression;\n     private final String xpathQuery;\n     private final boolean isEmptyConfig;\n     \n-    public XpathFilterElement(final String files, final String checks, final String message, final String moduleId, final String query) {\n-        this(Optional.ofNullable(files).map((Function<? super String, ? extends Pattern>)Pattern::compile).orElse(null), Optional.ofNullable(checks).map((Function<? super String, ? extends Pattern>)CommonUtil::createPattern).orElse(null), Optional.ofNullable(message).map((Function<? super String, ? extends Pattern>)Pattern::compile).orElse(null), moduleId, query);\n+    public XpathFilterElement(final String value, final String value2, final String value3, final String s, final String s2) {\n+        this(Optional.ofNullable(value).map((Function<? super String, ? extends Pattern>)Pattern::compile).orElse(null), Optional.ofNullable(value2).map((Function<? super String, ? extends Pattern>)CommonUtil::createPattern).orElse(null), Optional.ofNullable(value3).map((Function<? super String, ? extends Pattern>)Pattern::compile).orElse(null), s, s2);\n     }\n     \n-    public XpathFilterElement(final Pattern files, final Pattern checks, final Pattern message, final String moduleId, final String query) {\n-        if (files == null) {\n+    public XpathFilterElement(final Pattern fileRegexp, final Pattern checkRegexp, final Pattern messageRegexp, final String moduleId, final String xpathQuery) {\n+        if (fileRegexp == null) {\n             this.filePattern = null;\n             this.fileRegexp = null;\n         }\n         else {\n-            this.filePattern = files.pattern();\n-            this.fileRegexp = files;\n+            this.filePattern = fileRegexp.pattern();\n+            this.fileRegexp = fileRegexp;\n         }\n-        if (checks == null) {\n+        if (checkRegexp == null) {\n             this.checkPattern = null;\n             this.checkRegexp = null;\n         }\n         else {\n-            this.checkPattern = checks.pattern();\n-            this.checkRegexp = checks;\n+            this.checkPattern = checkRegexp.pattern();\n+            this.checkRegexp = checkRegexp;\n         }\n-        if (message == null) {\n+        if (messageRegexp == null) {\n             this.messagePattern = null;\n             this.messageRegexp = null;\n         }\n         else {\n-            this.messagePattern = message.pattern();\n-            this.messageRegexp = message;\n+            this.messagePattern = messageRegexp.pattern();\n+            this.messageRegexp = messageRegexp;\n         }\n         this.moduleId = moduleId;\n-        this.xpathQuery = query;\n+        this.xpathQuery = xpathQuery;\n         if (this.xpathQuery == null) {\n             this.xpathExpression = null;\n         }\n         else {\n-            final XPathEvaluator xpathEvaluator = new XPathEvaluator(Configuration.newConfiguration());\n+            final XPathEvaluator xPathEvaluator = new XPathEvaluator(Configuration.newConfiguration());\n             try {\n-                this.xpathExpression = xpathEvaluator.createExpression(this.xpathQuery);\n+                this.xpathExpression = xPathEvaluator.createExpression(this.xpathQuery);\n             }\n-            catch (final XPathException ex) {\n-                throw new IllegalArgumentException(\"Incorrect xpath query: \" + this.xpathQuery, (Throwable)ex);\n+            catch (final XPathException cause) {\n+                throw new IllegalArgumentException(\"Incorrect xpath query: \" + this.xpathQuery, (Throwable)cause);\n             }\n         }\n         this.isEmptyConfig = (this.fileRegexp == null && this.checkRegexp == null && this.messageRegexp == null && moduleId == null && this.xpathExpression == null);\n     }\n     \n-    public boolean accept(final TreeWalkerAuditEvent event) {\n-        return this.isEmptyConfig || !this.isFileNameAndModuleAndModuleNameMatching(event) || !this.isMessageNameMatching(event) || !this.isXpathQueryMatching(event);\n+    public boolean accept(final TreeWalkerAuditEvent treeWalkerAuditEvent) {\n+        return this.isEmptyConfig || !this.isFileNameAndModuleAndModuleNameMatching(treeWalkerAuditEvent) || !this.isMessageNameMatching(treeWalkerAuditEvent) || !this.isXpathQueryMatching(treeWalkerAuditEvent);\n     }\n     \n-    private boolean isFileNameAndModuleAndModuleNameMatching(final TreeWalkerAuditEvent event) {\n-        return event.getFileName() != null && (this.fileRegexp == null || this.fileRegexp.matcher(event.getFileName()).find()) && event.getViolation() != null && (this.moduleId == null || this.moduleId.equals(event.getModuleId())) && (this.checkRegexp == null || this.checkRegexp.matcher(event.getSourceName()).find());\n+    private boolean isFileNameAndModuleAndModuleNameMatching(final TreeWalkerAuditEvent treeWalkerAuditEvent) {\n+        return treeWalkerAuditEvent.getFileName() != null && (this.fileRegexp == null || this.fileRegexp.matcher(treeWalkerAuditEvent.getFileName()).find()) && treeWalkerAuditEvent.getViolation() != null && (this.moduleId == null || this.moduleId.equals(treeWalkerAuditEvent.getModuleId())) && (this.checkRegexp == null || this.checkRegexp.matcher(treeWalkerAuditEvent.getSourceName()).find());\n     }\n     \n-    private boolean isMessageNameMatching(final TreeWalkerAuditEvent event) {\n-        return this.messageRegexp == null || this.messageRegexp.matcher(event.getMessage()).find();\n+    private boolean isMessageNameMatching(final TreeWalkerAuditEvent treeWalkerAuditEvent) {\n+        return this.messageRegexp == null || this.messageRegexp.matcher(treeWalkerAuditEvent.getMessage()).find();\n     }\n     \n-    private boolean isXpathQueryMatching(final TreeWalkerAuditEvent event) {\n-        boolean isMatching;\n+    private boolean isXpathQueryMatching(final TreeWalkerAuditEvent treeWalkerAuditEvent) {\n+        boolean b;\n         if (this.xpathExpression == null) {\n-            isMatching = true;\n+            b = true;\n         }\n         else {\n-            isMatching = false;\n-            final Stream<Object> stream = this.getItems(event).stream();\n+            b = false;\n+            final Stream<Object> stream = this.getItems(treeWalkerAuditEvent).stream();\n             final Class<AbstractNode> obj = AbstractNode.class;\n             Objects.requireNonNull(obj);\n-            final List<AbstractNode> nodes = (List<AbstractNode>)stream.map((Function<? super Object, ?>)obj::cast).collect((Collector<? super Object, ?, List<AbstractNode>>)Collectors.toList());\n-            for (final AbstractNode abstractNode : nodes) {\n-                isMatching = (abstractNode.getTokenType() == event.getTokenType() && abstractNode.getLineNumber() == event.getLine() && abstractNode.getColumnNumber() == event.getColumnCharIndex());\n-                if (isMatching) {\n+            for (final AbstractNode abstractNode : (List<Object>)stream.map((Function<? super Object, ?>)obj::cast).collect((Collector<? super Object, ?, List<Object>>)Collectors.toList())) {\n+                b = (abstractNode.getTokenType() == treeWalkerAuditEvent.getTokenType() && abstractNode.getLineNumber() == treeWalkerAuditEvent.getLine() && abstractNode.getColumnNumber() == treeWalkerAuditEvent.getColumnCharIndex());\n+                if (b) {\n                     break;\n                 }\n             }\n         }\n-        return isMatching;\n+        return b;\n     }\n     \n-    private List<Item> getItems(final TreeWalkerAuditEvent event) {\n-        RootNode rootNode;\n-        if (event.getRootAst() == null) {\n-            rootNode = null;\n+    private List<Item> getItems(final TreeWalkerAuditEvent treeWalkerAuditEvent) {\n+        Object o;\n+        if (treeWalkerAuditEvent.getRootAst() == null) {\n+            o = null;\n         }\n         else {\n-            rootNode = new RootNode(event.getRootAst());\n+            o = new RootNode(treeWalkerAuditEvent.getRootAst());\n         }\n-        List<Item> items;\n+        List evaluate;\n         try {\n-            final XPathDynamicContext xpathDynamicContext = this.xpathExpression.createDynamicContext((Item)rootNode);\n-            items = this.xpathExpression.evaluate(xpathDynamicContext);\n+            evaluate = this.xpathExpression.evaluate(this.xpathExpression.createDynamicContext((Item)o));\n         }\n-        catch (final XPathException ex) {\n-            throw new IllegalStateException(\"Cannot initialize context and evaluate query: \" + this.xpathQuery, (Throwable)ex);\n+        catch (final XPathException cause) {\n+            throw new IllegalStateException(\"Cannot initialize context and evaluate query: \" + this.xpathQuery, (Throwable)cause);\n         }\n-        return items;\n+        return evaluate;\n     }\n     \n     @Override\n     public int hashCode() {\n         return Objects.hash(this.filePattern, this.checkPattern, this.messagePattern, this.moduleId, this.xpathQuery);\n     }\n     \n     @Override\n-    public boolean equals(final Object other) {\n-        if (this == other) {\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n             return true;\n         }\n-        if (other == null || this.getClass() != other.getClass()) {\n+        if (o == null || this.getClass() != o.getClass()) {\n             return false;\n         }\n-        final XpathFilterElement xpathFilter = (XpathFilterElement)other;\n-        return Objects.equals(this.filePattern, xpathFilter.filePattern) && Objects.equals(this.checkPattern, xpathFilter.checkPattern) && Objects.equals(this.messagePattern, xpathFilter.messagePattern) && Objects.equals(this.moduleId, xpathFilter.moduleId) && Objects.equals(this.xpathQuery, xpathFilter.xpathQuery);\n+        final XpathFilterElement xpathFilterElement = (XpathFilterElement)o;\n+        return Objects.equals(this.filePattern, xpathFilterElement.filePattern) && Objects.equals(this.checkPattern, xpathFilterElement.checkPattern) && Objects.equals(this.messagePattern, xpathFilterElement.messagePattern) && Objects.equals(this.moduleId, xpathFilterElement.moduleId) && Objects.equals(this.xpathQuery, xpathFilterElement.xpathQuery);\n     }\n }\n"}]}
