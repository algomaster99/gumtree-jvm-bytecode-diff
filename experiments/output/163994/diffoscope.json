{"diffoscope-json-version": 1, "source1": "first/UnshrinkingInputStream.class", "source2": "second/UnshrinkingInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,149 +1,150 @@\n-  SHA-256 checksum d0747d19214b4ae8615d6747a98818ad4f5fa26c3153fd5264c9b42c0eace320\n+  SHA-256 checksum 8a96aabb6530dc71f51e30244c10434c70f36b36f6b4df2d3bbe3d3cb4f35755\n   Compiled from \"UnshrinkingInputStream.java\"\n class org.apache.commons.compress.archivers.zip.UnshrinkingInputStream extends org.apache.commons.compress.compressors.lzw.LZWInputStream\n   minor version: 0\n-  major version: 51\n+  major version: 53\n   flags: (0x0020) ACC_SUPER\n   this_class: #1                          // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n   super_class: #4                         // org/apache/commons/compress/compressors/lzw/LZWInputStream\n-  interfaces: 0, fields: 3, methods: 4, attributes: 1\n+  interfaces: 0, fields: 3, methods: 4, attributes: 3\n Constant pool:\n-    #1 = Class              #73           // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-    #2 = Fieldref           #74.#75       // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-    #3 = Methodref          #4.#76        // org/apache/commons/compress/compressors/lzw/LZWInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-    #4 = Class              #77           // org/apache/commons/compress/compressors/lzw/LZWInputStream\n-    #5 = Methodref          #1.#78        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setClearCode:(I)V\n-    #6 = Methodref          #1.#79        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.initializeTables:(I)V\n-    #7 = Methodref          #1.#80        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getPrefixesLength:()I\n-    #8 = Fieldref           #1.#81        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.isUsed:[Z\n-    #9 = Methodref          #1.#82        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getClearCode:()I\n-   #10 = Methodref          #1.#83        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setTableSize:(I)V\n-   #11 = Methodref          #1.#84        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getTableSize:()I\n-   #12 = Methodref          #1.#85        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.addEntry:(IBI)I\n-   #13 = Methodref          #1.#86        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getPrefix:(I)I\n-   #14 = Methodref          #1.#87        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setPrefix:(II)V\n-   #15 = Methodref          #1.#88        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.readNextCode:()I\n-   #16 = Class              #89           // java/io/IOException\n-   #17 = String             #90           // Unexpected EOF;\n-   #18 = Methodref          #16.#91       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #19 = Methodref          #1.#92        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getCodeSize:()I\n-   #20 = Methodref          #1.#93        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.incrementCodeSize:()V\n-   #21 = String             #94           // Attempt to increase code size beyond maximum\n-   #22 = Methodref          #1.#95        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.partialClear:()V\n-   #23 = Class              #96           // java/lang/StringBuilder\n-   #24 = Methodref          #23.#97       // java/lang/StringBuilder.\"<init>\":()V\n-   #25 = String             #98           // Invalid clear code subcode\n-   #26 = Methodref          #23.#99       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #27 = Methodref          #23.#100      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #28 = Methodref          #23.#101      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #29 = Methodref          #1.#102       // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.addRepeatOfPreviousCode:()I\n-   #30 = Methodref          #1.#103       // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.expandCodeToOutputStack:(IZ)I\n-   #31 = Utf8               MAX_CODE_SIZE\n-   #32 = Utf8               I\n-   #33 = Utf8               ConstantValue\n-   #34 = Integer            13\n-   #35 = Utf8               MAX_TABLE_SIZE\n-   #36 = Integer            8192\n-   #37 = Utf8               isUsed\n-   #38 = Utf8               [Z\n-   #39 = Utf8               <init>\n-   #40 = Utf8               (Ljava/io/InputStream;)V\n-   #41 = Utf8               Code\n-   #42 = Utf8               LineNumberTable\n-   #43 = Utf8               LocalVariableTable\n-   #44 = Utf8               i\n-   #45 = Utf8               this\n-   #46 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnshrinkingInputStream;\n-   #47 = Utf8               inputStream\n-   #48 = Utf8               Ljava/io/InputStream;\n-   #49 = Utf8               StackMapTable\n-   #50 = Class              #73           // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-   #51 = Class              #104          // java/io/InputStream\n-   #52 = Utf8               Exceptions\n-   #53 = Utf8               addEntry\n-   #54 = Utf8               (IB)I\n-   #55 = Utf8               previousCode\n-   #56 = Utf8               character\n-   #57 = Utf8               B\n-   #58 = Utf8               tableSize\n-   #59 = Utf8               idx\n-   #60 = Utf8               partialClear\n-   #61 = Utf8               ()V\n-   #62 = Utf8               isParent\n-   #63 = Class              #38           // \"[Z\"\n-   #64 = Utf8               decompressNextSymbol\n-   #65 = Utf8               ()I\n-   #66 = Utf8               subCode\n-   #67 = Utf8               addedUnfinishedEntry\n-   #68 = Utf8               Z\n-   #69 = Utf8               effectiveCode\n-   #70 = Utf8               code\n-   #71 = Utf8               SourceFile\n-   #72 = Utf8               UnshrinkingInputStream.java\n-   #73 = Utf8               org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n-   #74 = Class              #105          // java/nio/ByteOrder\n-   #75 = NameAndType        #106:#107     // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-   #76 = NameAndType        #39:#108      // \"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-   #77 = Utf8               org/apache/commons/compress/compressors/lzw/LZWInputStream\n-   #78 = NameAndType        #109:#110     // setClearCode:(I)V\n-   #79 = NameAndType        #111:#110     // initializeTables:(I)V\n-   #80 = NameAndType        #112:#65      // getPrefixesLength:()I\n-   #81 = NameAndType        #37:#38       // isUsed:[Z\n-   #82 = NameAndType        #113:#65      // getClearCode:()I\n-   #83 = NameAndType        #114:#110     // setTableSize:(I)V\n-   #84 = NameAndType        #115:#65      // getTableSize:()I\n-   #85 = NameAndType        #53:#116      // addEntry:(IBI)I\n-   #86 = NameAndType        #117:#118     // getPrefix:(I)I\n-   #87 = NameAndType        #119:#120     // setPrefix:(II)V\n-   #88 = NameAndType        #121:#65      // readNextCode:()I\n-   #89 = Utf8               java/io/IOException\n-   #90 = Utf8               Unexpected EOF;\n-   #91 = NameAndType        #39:#122      // \"<init>\":(Ljava/lang/String;)V\n-   #92 = NameAndType        #123:#65      // getCodeSize:()I\n-   #93 = NameAndType        #124:#61      // incrementCodeSize:()V\n-   #94 = Utf8               Attempt to increase code size beyond maximum\n-   #95 = NameAndType        #60:#61       // partialClear:()V\n-   #96 = Utf8               java/lang/StringBuilder\n-   #97 = NameAndType        #39:#61       // \"<init>\":()V\n-   #98 = Utf8               Invalid clear code subcode\n-   #99 = NameAndType        #125:#126     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #100 = NameAndType        #125:#127     // append:(I)Ljava/lang/StringBuilder;\n-  #101 = NameAndType        #128:#129     // toString:()Ljava/lang/String;\n-  #102 = NameAndType        #130:#65      // addRepeatOfPreviousCode:()I\n-  #103 = NameAndType        #131:#132     // expandCodeToOutputStack:(IZ)I\n-  #104 = Utf8               java/io/InputStream\n-  #105 = Utf8               java/nio/ByteOrder\n-  #106 = Utf8               LITTLE_ENDIAN\n-  #107 = Utf8               Ljava/nio/ByteOrder;\n-  #108 = Utf8               (Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-  #109 = Utf8               setClearCode\n-  #110 = Utf8               (I)V\n-  #111 = Utf8               initializeTables\n-  #112 = Utf8               getPrefixesLength\n-  #113 = Utf8               getClearCode\n-  #114 = Utf8               setTableSize\n-  #115 = Utf8               getTableSize\n-  #116 = Utf8               (IBI)I\n-  #117 = Utf8               getPrefix\n-  #118 = Utf8               (I)I\n-  #119 = Utf8               setPrefix\n-  #120 = Utf8               (II)V\n-  #121 = Utf8               readNextCode\n-  #122 = Utf8               (Ljava/lang/String;)V\n-  #123 = Utf8               getCodeSize\n-  #124 = Utf8               incrementCodeSize\n-  #125 = Utf8               append\n-  #126 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #127 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #128 = Utf8               toString\n-  #129 = Utf8               ()Ljava/lang/String;\n-  #130 = Utf8               addRepeatOfPreviousCode\n-  #131 = Utf8               expandCodeToOutputStack\n-  #132 = Utf8               (IZ)I\n+    #1 = Class              #67           // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+    #2 = Fieldref           #68.#69       // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+    #3 = Methodref          #4.#70        // org/apache/commons/compress/compressors/lzw/LZWInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+    #4 = Class              #71           // org/apache/commons/compress/compressors/lzw/LZWInputStream\n+    #5 = Methodref          #1.#72        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setClearCode:(I)V\n+    #6 = Methodref          #1.#73        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.initializeTables:(I)V\n+    #7 = Methodref          #1.#74        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getPrefixesLength:()I\n+    #8 = Fieldref           #1.#75        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.isUsed:[Z\n+    #9 = Methodref          #1.#76        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getClearCode:()I\n+   #10 = Methodref          #1.#77        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setTableSize:(I)V\n+   #11 = Methodref          #1.#78        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getTableSize:()I\n+   #12 = Methodref          #1.#79        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.addEntry:(IBI)I\n+   #13 = Methodref          #1.#80        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getPrefix:(I)I\n+   #14 = Methodref          #1.#81        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.setPrefix:(II)V\n+   #15 = Methodref          #1.#82        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.readNextCode:()I\n+   #16 = Class              #83           // java/io/IOException\n+   #17 = String             #84           // Unexpected EOF;\n+   #18 = Methodref          #16.#85       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #19 = Methodref          #1.#86        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.getCodeSize:()I\n+   #20 = Methodref          #1.#87        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.incrementCodeSize:()V\n+   #21 = String             #88           // Attempt to increase code size beyond maximum\n+   #22 = Methodref          #1.#89        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.partialClear:()V\n+   #23 = InvokeDynamic      #0:#93        // #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+   #24 = Methodref          #1.#94        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.addRepeatOfPreviousCode:()I\n+   #25 = Methodref          #1.#95        // org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.expandCodeToOutputStack:(IZ)I\n+   #26 = Utf8               MAX_CODE_SIZE\n+   #27 = Utf8               I\n+   #28 = Utf8               ConstantValue\n+   #29 = Integer            13\n+   #30 = Utf8               MAX_TABLE_SIZE\n+   #31 = Integer            8192\n+   #32 = Utf8               isUsed\n+   #33 = Utf8               [Z\n+   #34 = Utf8               <init>\n+   #35 = Utf8               (Ljava/io/InputStream;)V\n+   #36 = Utf8               Code\n+   #37 = Utf8               LineNumberTable\n+   #38 = Utf8               LocalVariableTable\n+   #39 = Utf8               i\n+   #40 = Utf8               this\n+   #41 = Utf8               Lorg/apache/commons/compress/archivers/zip/UnshrinkingInputStream;\n+   #42 = Utf8               inputStream\n+   #43 = Utf8               Ljava/io/InputStream;\n+   #44 = Utf8               StackMapTable\n+   #45 = Class              #96           // java/io/InputStream\n+   #46 = Utf8               Exceptions\n+   #47 = Utf8               addEntry\n+   #48 = Utf8               (IB)I\n+   #49 = Utf8               previousCode\n+   #50 = Utf8               character\n+   #51 = Utf8               B\n+   #52 = Utf8               tableSize\n+   #53 = Utf8               idx\n+   #54 = Utf8               partialClear\n+   #55 = Utf8               ()V\n+   #56 = Utf8               isParent\n+   #57 = Class              #33           // \"[Z\"\n+   #58 = Utf8               decompressNextSymbol\n+   #59 = Utf8               ()I\n+   #60 = Utf8               subCode\n+   #61 = Utf8               addedUnfinishedEntry\n+   #62 = Utf8               Z\n+   #63 = Utf8               effectiveCode\n+   #64 = Utf8               code\n+   #65 = Utf8               SourceFile\n+   #66 = Utf8               UnshrinkingInputStream.java\n+   #67 = Utf8               org/apache/commons/compress/archivers/zip/UnshrinkingInputStream\n+   #68 = Class              #97           // java/nio/ByteOrder\n+   #69 = NameAndType        #98:#99       // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+   #70 = NameAndType        #34:#100      // \"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+   #71 = Utf8               org/apache/commons/compress/compressors/lzw/LZWInputStream\n+   #72 = NameAndType        #101:#102     // setClearCode:(I)V\n+   #73 = NameAndType        #103:#102     // initializeTables:(I)V\n+   #74 = NameAndType        #104:#59      // getPrefixesLength:()I\n+   #75 = NameAndType        #32:#33       // isUsed:[Z\n+   #76 = NameAndType        #105:#59      // getClearCode:()I\n+   #77 = NameAndType        #106:#102     // setTableSize:(I)V\n+   #78 = NameAndType        #107:#59      // getTableSize:()I\n+   #79 = NameAndType        #47:#108      // addEntry:(IBI)I\n+   #80 = NameAndType        #109:#110     // getPrefix:(I)I\n+   #81 = NameAndType        #111:#112     // setPrefix:(II)V\n+   #82 = NameAndType        #113:#59      // readNextCode:()I\n+   #83 = Utf8               java/io/IOException\n+   #84 = Utf8               Unexpected EOF;\n+   #85 = NameAndType        #34:#114      // \"<init>\":(Ljava/lang/String;)V\n+   #86 = NameAndType        #115:#59      // getCodeSize:()I\n+   #87 = NameAndType        #116:#55      // incrementCodeSize:()V\n+   #88 = Utf8               Attempt to increase code size beyond maximum\n+   #89 = NameAndType        #54:#55       // partialClear:()V\n+   #90 = Utf8               BootstrapMethods\n+   #91 = MethodHandle       6:#117        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+   #92 = String             #118          // Invalid clear code subcode \\u0001\n+   #93 = NameAndType        #119:#120     // makeConcatWithConstants:(I)Ljava/lang/String;\n+   #94 = NameAndType        #121:#59      // addRepeatOfPreviousCode:()I\n+   #95 = NameAndType        #122:#123     // expandCodeToOutputStack:(IZ)I\n+   #96 = Utf8               java/io/InputStream\n+   #97 = Utf8               java/nio/ByteOrder\n+   #98 = Utf8               LITTLE_ENDIAN\n+   #99 = Utf8               Ljava/nio/ByteOrder;\n+  #100 = Utf8               (Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+  #101 = Utf8               setClearCode\n+  #102 = Utf8               (I)V\n+  #103 = Utf8               initializeTables\n+  #104 = Utf8               getPrefixesLength\n+  #105 = Utf8               getClearCode\n+  #106 = Utf8               setTableSize\n+  #107 = Utf8               getTableSize\n+  #108 = Utf8               (IBI)I\n+  #109 = Utf8               getPrefix\n+  #110 = Utf8               (I)I\n+  #111 = Utf8               setPrefix\n+  #112 = Utf8               (II)V\n+  #113 = Utf8               readNextCode\n+  #114 = Utf8               (Ljava/lang/String;)V\n+  #115 = Utf8               getCodeSize\n+  #116 = Utf8               incrementCodeSize\n+  #117 = Methodref          #124.#125     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #118 = Utf8               Invalid clear code subcode \\u0001\n+  #119 = Utf8               makeConcatWithConstants\n+  #120 = Utf8               (I)Ljava/lang/String;\n+  #121 = Utf8               addRepeatOfPreviousCode\n+  #122 = Utf8               expandCodeToOutputStack\n+  #123 = Utf8               (IZ)I\n+  #124 = Class              #126          // java/lang/invoke/StringConcatFactory\n+  #125 = NameAndType        #119:#130     // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #126 = Utf8               java/lang/invoke/StringConcatFactory\n+  #127 = Class              #132          // java/lang/invoke/MethodHandles$Lookup\n+  #128 = Utf8               Lookup\n+  #129 = Utf8               InnerClasses\n+  #130 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+  #131 = Class              #133          // java/lang/invoke/MethodHandles\n+  #132 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #133 = Utf8               java/lang/invoke/MethodHandles\n {\n   private static final int MAX_CODE_SIZE = 13;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 13\n \n   private static final int MAX_TABLE_SIZE = 8192;\n@@ -372,26 +373,26 @@\n         frame_type = 250 /* chop */\n           offset_delta = 5\n \n   protected int decompressNextSymbol() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n-      stack=4, locals=4, args_size=1\n+      stack=3, locals=4, args_size=1\n          0: aload_0\n          1: invokevirtual #15                 // Method readNextCode:()I\n          4: istore_1\n          5: iload_1\n          6: ifge          11\n          9: iconst_m1\n         10: ireturn\n         11: iload_1\n         12: aload_0\n         13: invokevirtual #9                  // Method getClearCode:()I\n-        16: if_icmpne     120\n+        16: if_icmpne     107\n         19: aload_0\n         20: invokevirtual #15                 // Method readNextCode:()I\n         23: istore_2\n         24: iload_2\n         25: ifge          38\n         28: new           #16                 // class java/io/IOException\n         31: dup\n@@ -403,15 +404,15 @@\n         40: if_icmpne     69\n         43: aload_0\n         44: invokevirtual #19                 // Method getCodeSize:()I\n         47: bipush        13\n         49: if_icmpge     59\n         52: aload_0\n         53: invokevirtual #20                 // Method incrementCodeSize:()V\n-        56: goto          118\n+        56: goto          105\n         59: new           #16                 // class java/io/IOException\n         62: dup\n         63: ldc           #21                 // String Attempt to increase code size beyond maximum\n         65: invokespecial #18                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         68: athrow\n         69: iload_2\n         70: iconst_2\n@@ -420,48 +421,42 @@\n         75: invokespecial #22                 // Method partialClear:()V\n         78: aload_0\n         79: aload_0\n         80: invokevirtual #9                  // Method getClearCode:()I\n         83: iconst_1\n         84: iadd\n         85: invokevirtual #10                 // Method setTableSize:(I)V\n-        88: goto          118\n+        88: goto          105\n         91: new           #16                 // class java/io/IOException\n         94: dup\n-        95: new           #23                 // class java/lang/StringBuilder\n-        98: dup\n-        99: invokespecial #24                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       102: ldc           #25                 // String Invalid clear code subcode\n-       104: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       107: iload_2\n-       108: invokevirtual #27                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       111: invokevirtual #28                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       114: invokespecial #18                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-       117: athrow\n-       118: iconst_0\n-       119: ireturn\n-       120: iconst_0\n-       121: istore_2\n-       122: iload_1\n-       123: istore_3\n-       124: aload_0\n-       125: getfield      #8                  // Field isUsed:[Z\n-       128: iload_1\n-       129: baload\n-       130: ifne          140\n-       133: aload_0\n-       134: invokevirtual #29                 // Method addRepeatOfPreviousCode:()I\n-       137: istore_3\n-       138: iconst_1\n-       139: istore_2\n-       140: aload_0\n-       141: iload_3\n-       142: iload_2\n-       143: invokevirtual #30                 // Method expandCodeToOutputStack:(IZ)I\n-       146: ireturn\n+        95: iload_2\n+        96: invokedynamic #23,  0             // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;\n+       101: invokespecial #18                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+       104: athrow\n+       105: iconst_0\n+       106: ireturn\n+       107: iconst_0\n+       108: istore_2\n+       109: iload_1\n+       110: istore_3\n+       111: aload_0\n+       112: getfield      #8                  // Field isUsed:[Z\n+       115: iload_1\n+       116: baload\n+       117: ifne          127\n+       120: aload_0\n+       121: invokevirtual #24                 // Method addRepeatOfPreviousCode:()I\n+       124: istore_3\n+       125: iconst_1\n+       126: istore_2\n+       127: aload_0\n+       128: iload_3\n+       129: iload_2\n+       130: invokevirtual #25                 // Method expandCodeToOutputStack:(IZ)I\n+       133: ireturn\n       LineNumberTable:\n         line 97: 0\n         line 98: 5\n         line 99: 9\n         line 100: 11\n         line 101: 19\n         line 102: 24\n@@ -470,41 +465,47 @@\n         line 105: 43\n         line 106: 52\n         line 108: 59\n         line 110: 69\n         line 111: 74\n         line 112: 78\n         line 114: 91\n-        line 116: 118\n-        line 118: 120\n-        line 119: 122\n-        line 120: 124\n-        line 121: 133\n-        line 122: 138\n-        line 124: 140\n+        line 116: 105\n+        line 118: 107\n+        line 119: 109\n+        line 120: 111\n+        line 121: 120\n+        line 122: 125\n+        line 124: 127\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-           24      96     2 subCode   I\n-          122      25     2 addedUnfinishedEntry   Z\n-          124      23     3 effectiveCode   I\n-            0     147     0  this   Lorg/apache/commons/compress/archivers/zip/UnshrinkingInputStream;\n-            5     142     1  code   I\n+           24      83     2 subCode   I\n+          109      25     2 addedUnfinishedEntry   Z\n+          111      23     3 effectiveCode   I\n+            0     134     0  this   Lorg/apache/commons/compress/archivers/zip/UnshrinkingInputStream;\n+            5     129     1  code   I\n       StackMapTable: number_of_entries = 8\n         frame_type = 252 /* append */\n           offset_delta = 11\n           locals = [ int ]\n         frame_type = 252 /* append */\n           offset_delta = 26\n           locals = [ int ]\n         frame_type = 20 /* same */\n         frame_type = 9 /* same */\n         frame_type = 21 /* same */\n-        frame_type = 26 /* same */\n+        frame_type = 13 /* same */\n         frame_type = 250 /* chop */\n           offset_delta = 1\n         frame_type = 253 /* append */\n           offset_delta = 19\n           locals = [ int, int ]\n     Exceptions:\n       throws java.io.IOException\n }\n SourceFile: \"UnshrinkingInputStream.java\"\n+InnerClasses:\n+  public static final #128= #127 of #131; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n+BootstrapMethods:\n+  0: #91 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n+    Method arguments:\n+      #92 Invalid clear code subcode \\u0001\n"}]}
