{"diffoscope-json-version": 1, "source1": "first/ClassBands.class", "source2": "second/ClassBands.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -146,15 +146,15 @@\n                 }\n             }\n         }\n         int backwardsCallIndex = this.parseFieldMetadataBands(in, fieldAttrCalls);\n         final int limit = this.options.hasFieldFlagsHi() ? 62 : 31;\n         final AttributeLayout[] otherLayouts = new AttributeLayout[limit + 1];\n         final int[] counts = new int[limit + 1];\n-        final List<Attribute>[] otherAttributes = new List[limit + 1];\n+        final List[] otherAttributes = new List[limit + 1];\n         for (int m = 0; m < limit; ++m) {\n             final AttributeLayout layout = this.attrMap.getAttributeLayout(m, 1);\n             if (layout != null && !layout.isDefaultLayout()) {\n                 otherLayouts[m] = layout;\n                 counts[m] = SegmentUtils.countMatches(this.fieldFlags, (IMatcher)layout);\n             }\n         }\n@@ -257,15 +257,15 @@\n         for (int i2 = 0; i2 < limit; ++i2) {\n             final AttributeLayout layout = this.attrMap.getAttributeLayout(i2, 2);\n             if (layout != null && !layout.isDefaultLayout()) {\n                 otherLayouts[i2] = layout;\n                 counts[i2] = SegmentUtils.countMatches(this.methodFlags, (IMatcher)layout);\n             }\n         }\n-        final List<Attribute>[] otherAttributes = new List[limit + 1];\n+        final List[] otherAttributes = new List[limit + 1];\n         for (int i3 = 0; i3 < counts.length; ++i3) {\n             if (counts[i3] > 0) {\n                 final NewAttributeBands bands = this.attrMap.getAttributeBands(otherLayouts[i3]);\n                 otherAttributes[i3] = bands.parseAttributes(in, counts[i3]);\n                 final int numBackwardsCallables = otherLayouts[i3].numBackwardsCallables();\n                 if (numBackwardsCallables > 0) {\n                     final int[] backwardsCalls = new int[numBackwardsCallables];\n@@ -365,15 +365,15 @@\n         }\n         final int defaultVersionMajor = this.header.getDefaultClassMajorVersion();\n         final int defaultVersionMinor = this.header.getDefaultClassMinorVersion();\n         int backwardsCallIndex = backwardsCallsUsed;\n         final int limit = this.options.hasClassFlagsHi() ? 62 : 31;\n         final AttributeLayout[] otherLayouts = new AttributeLayout[limit + 1];\n         final int[] counts = new int[limit + 1];\n-        final List<Attribute>[] otherAttributes = new List[limit + 1];\n+        final List[] otherAttributes = new List[limit + 1];\n         for (int k = 0; k < limit; ++k) {\n             final AttributeLayout layout = this.attrMap.getAttributeLayout(k, 0);\n             if (layout != null && !layout.isDefaultLayout()) {\n                 otherLayouts[k] = layout;\n                 counts[k] = SegmentUtils.countMatches(this.classFlags, (IMatcher)layout);\n             }\n         }\n@@ -415,15 +415,15 @@\n                             index = m;\n                             break;\n                         }\n                     }\n                     if (index > -1) {\n                         className = className.substring(0, index);\n                     }\n-                    value = (ClassFileEntry)this.cpBands.cpUTF8Value(className + \".java\", true);\n+                    value = (ClassFileEntry)this.cpBands.cpUTF8Value(String.valueOf(className) + \".java\", true);\n                 }\n                 this.classAttributes[l].add((Attribute)new SourceFileAttribute((CPUTF8)value));\n                 ++sourceFileIndex;\n             }\n             if (enclosingMethodLayout.matches(flag)) {\n                 final CPClass theClass = this.cpBands.cpClassValue(enclosingMethodRC[enclosingMethodIndex]);\n                 CPNameAndType theMethod = null;\n@@ -589,15 +589,15 @@\n         final CPUTF8[][] localVariableTypeTableNameRU = this.parseCPUTF8References(\"code_LocalVariableTypeTable_name_RU\", in, Codec.UNSIGNED5, localVariableTypeTableN);\n         final CPUTF8[][] localVariableTypeTableTypeRS = this.parseCPSignatureReferences(\"code_LocalVariableTypeTable_type_RS\", in, Codec.UNSIGNED5, localVariableTypeTableN);\n         final int[][] localVariableTypeTableSlot = this.decodeBandInt(\"code_LocalVariableTypeTable_slot\", in, Codec.UNSIGNED5, localVariableTypeTableN);\n         int backwardsCallIndex = 0;\n         final int limit = this.options.hasCodeFlagsHi() ? 62 : 31;\n         final AttributeLayout[] otherLayouts = new AttributeLayout[limit + 1];\n         final int[] counts = new int[limit + 1];\n-        final List<Attribute>[] otherAttributes = new List[limit + 1];\n+        final List[] otherAttributes = new List[limit + 1];\n         for (int k = 0; k < limit; ++k) {\n             final AttributeLayout layout2 = this.attrMap.getAttributeLayout(k, 3);\n             if (layout2 != null && !layout2.isDefaultLayout()) {\n                 otherLayouts[k] = layout2;\n                 counts[k] = SegmentUtils.countMatches(codeFlags, (IMatcher)layout2);\n             }\n         }\n@@ -646,15 +646,15 @@\n         int backwardsCallsUsed = 0;\n         final String[] RxA = { \"RVA\", \"RIA\" };\n         final AttributeLayout rvaLayout = this.attrMap.getAttributeLayout(\"RuntimeVisibleAnnotations\", 1);\n         final AttributeLayout riaLayout = this.attrMap.getAttributeLayout(\"RuntimeInvisibleAnnotations\", 1);\n         final int rvaCount = SegmentUtils.countMatches(this.fieldFlags, (IMatcher)rvaLayout);\n         final int riaCount = SegmentUtils.countMatches(this.fieldFlags, (IMatcher)riaLayout);\n         final int[] RxACount = { rvaCount, riaCount };\n-        final int[] backwardsCalls = { 0, 0 };\n+        final int[] backwardsCalls = new int[2];\n         if (rvaCount > 0) {\n             backwardsCalls[0] = fieldAttrCalls[0];\n             ++backwardsCallsUsed;\n             if (riaCount > 0) {\n                 backwardsCalls[1] = fieldAttrCalls[1];\n                 ++backwardsCallsUsed;\n             }\n@@ -683,32 +683,32 @@\n     \n     private MetadataBandGroup[] parseMetadata(final InputStream in, final String[] RxA, final int[] RxACount, final int[] backwardsCallCounts, final String contextName) throws IOException, Pack200Exception {\n         final MetadataBandGroup[] mbg = new MetadataBandGroup[RxA.length];\n         for (int i = 0; i < RxA.length; ++i) {\n             mbg[i] = new MetadataBandGroup(RxA[i], this.cpBands);\n             final String rxa = RxA[i];\n             if (rxa.indexOf(80) >= 0) {\n-                mbg[i].param_NB = this.decodeBandInt(contextName + \"_\" + rxa + \"_param_NB\", in, Codec.BYTE1, RxACount[i]);\n+                mbg[i].param_NB = this.decodeBandInt(String.valueOf(contextName) + \"_\" + rxa + \"_param_NB\", in, Codec.BYTE1, RxACount[i]);\n             }\n             int pairCount = 0;\n             if (!rxa.equals(\"AD\")) {\n-                mbg[i].anno_N = this.decodeBandInt(contextName + \"_\" + rxa + \"_anno_N\", in, Codec.UNSIGNED5, RxACount[i]);\n-                mbg[i].type_RS = this.parseCPSignatureReferences(contextName + \"_\" + rxa + \"_type_RS\", in, Codec.UNSIGNED5, mbg[i].anno_N);\n-                mbg[i].pair_N = this.decodeBandInt(contextName + \"_\" + rxa + \"_pair_N\", in, Codec.UNSIGNED5, mbg[i].anno_N);\n+                mbg[i].anno_N = this.decodeBandInt(String.valueOf(contextName) + \"_\" + rxa + \"_anno_N\", in, Codec.UNSIGNED5, RxACount[i]);\n+                mbg[i].type_RS = this.parseCPSignatureReferences(String.valueOf(contextName) + \"_\" + rxa + \"_type_RS\", in, Codec.UNSIGNED5, mbg[i].anno_N);\n+                mbg[i].pair_N = this.decodeBandInt(String.valueOf(contextName) + \"_\" + rxa + \"_pair_N\", in, Codec.UNSIGNED5, mbg[i].anno_N);\n                 for (int j = 0; j < mbg[i].pair_N.length; ++j) {\n                     for (int k = 0; k < mbg[i].pair_N[j].length; ++k) {\n                         pairCount += mbg[i].pair_N[j][k];\n                     }\n                 }\n-                mbg[i].name_RU = this.parseCPUTF8References(contextName + \"_\" + rxa + \"_name_RU\", in, Codec.UNSIGNED5, pairCount);\n+                mbg[i].name_RU = this.parseCPUTF8References(String.valueOf(contextName) + \"_\" + rxa + \"_name_RU\", in, Codec.UNSIGNED5, pairCount);\n             }\n             else {\n                 pairCount = RxACount[i];\n             }\n-            mbg[i].T = this.decodeBandInt(contextName + \"_\" + rxa + \"_T\", in, Codec.BYTE1, pairCount + backwardsCallCounts[i]);\n+            mbg[i].T = this.decodeBandInt(String.valueOf(contextName) + \"_\" + rxa + \"_T\", in, Codec.BYTE1, pairCount + backwardsCallCounts[i]);\n             int ICount = 0;\n             int DCount = 0;\n             int FCount = 0;\n             int JCount = 0;\n             int cCount = 0;\n             int eCount = 0;\n             int sCount = 0;\n@@ -755,60 +755,60 @@\n                     }\n                     case '@': {\n                         ++atCount;\n                         break;\n                     }\n                 }\n             }\n-            mbg[i].caseI_KI = this.parseCPIntReferences(contextName + \"_\" + rxa + \"_caseI_KI\", in, Codec.UNSIGNED5, ICount);\n-            mbg[i].caseD_KD = this.parseCPDoubleReferences(contextName + \"_\" + rxa + \"_caseD_KD\", in, Codec.UNSIGNED5, DCount);\n-            mbg[i].caseF_KF = this.parseCPFloatReferences(contextName + \"_\" + rxa + \"_caseF_KF\", in, Codec.UNSIGNED5, FCount);\n-            mbg[i].caseJ_KJ = this.parseCPLongReferences(contextName + \"_\" + rxa + \"_caseJ_KJ\", in, Codec.UNSIGNED5, JCount);\n-            mbg[i].casec_RS = this.parseCPSignatureReferences(contextName + \"_\" + rxa + \"_casec_RS\", in, Codec.UNSIGNED5, cCount);\n-            mbg[i].caseet_RS = this.parseReferences(contextName + \"_\" + rxa + \"_caseet_RS\", in, Codec.UNSIGNED5, eCount, this.cpBands.getCpSignature());\n-            mbg[i].caseec_RU = this.parseReferences(contextName + \"_\" + rxa + \"_caseec_RU\", in, Codec.UNSIGNED5, eCount, this.cpBands.getCpUTF8());\n-            mbg[i].cases_RU = this.parseCPUTF8References(contextName + \"_\" + rxa + \"_cases_RU\", in, Codec.UNSIGNED5, sCount);\n-            mbg[i].casearray_N = this.decodeBandInt(contextName + \"_\" + rxa + \"_casearray_N\", in, Codec.UNSIGNED5, arrayCount);\n-            mbg[i].nesttype_RS = this.parseCPUTF8References(contextName + \"_\" + rxa + \"_nesttype_RS\", in, Codec.UNSIGNED5, atCount);\n-            mbg[i].nestpair_N = this.decodeBandInt(contextName + \"_\" + rxa + \"_nestpair_N\", in, Codec.UNSIGNED5, atCount);\n+            mbg[i].caseI_KI = this.parseCPIntReferences(String.valueOf(contextName) + \"_\" + rxa + \"_caseI_KI\", in, Codec.UNSIGNED5, ICount);\n+            mbg[i].caseD_KD = this.parseCPDoubleReferences(String.valueOf(contextName) + \"_\" + rxa + \"_caseD_KD\", in, Codec.UNSIGNED5, DCount);\n+            mbg[i].caseF_KF = this.parseCPFloatReferences(String.valueOf(contextName) + \"_\" + rxa + \"_caseF_KF\", in, Codec.UNSIGNED5, FCount);\n+            mbg[i].caseJ_KJ = this.parseCPLongReferences(String.valueOf(contextName) + \"_\" + rxa + \"_caseJ_KJ\", in, Codec.UNSIGNED5, JCount);\n+            mbg[i].casec_RS = this.parseCPSignatureReferences(String.valueOf(contextName) + \"_\" + rxa + \"_casec_RS\", in, Codec.UNSIGNED5, cCount);\n+            mbg[i].caseet_RS = this.parseReferences(String.valueOf(contextName) + \"_\" + rxa + \"_caseet_RS\", in, Codec.UNSIGNED5, eCount, this.cpBands.getCpSignature());\n+            mbg[i].caseec_RU = this.parseReferences(String.valueOf(contextName) + \"_\" + rxa + \"_caseec_RU\", in, Codec.UNSIGNED5, eCount, this.cpBands.getCpUTF8());\n+            mbg[i].cases_RU = this.parseCPUTF8References(String.valueOf(contextName) + \"_\" + rxa + \"_cases_RU\", in, Codec.UNSIGNED5, sCount);\n+            mbg[i].casearray_N = this.decodeBandInt(String.valueOf(contextName) + \"_\" + rxa + \"_casearray_N\", in, Codec.UNSIGNED5, arrayCount);\n+            mbg[i].nesttype_RS = this.parseCPUTF8References(String.valueOf(contextName) + \"_\" + rxa + \"_nesttype_RS\", in, Codec.UNSIGNED5, atCount);\n+            mbg[i].nestpair_N = this.decodeBandInt(String.valueOf(contextName) + \"_\" + rxa + \"_nestpair_N\", in, Codec.UNSIGNED5, atCount);\n             int nestPairCount = 0;\n             for (int m = 0; m < mbg[i].nestpair_N.length; ++m) {\n                 nestPairCount += mbg[i].nestpair_N[m];\n             }\n-            mbg[i].nestname_RU = this.parseCPUTF8References(contextName + \"_\" + rxa + \"_nestname_RU\", in, Codec.UNSIGNED5, nestPairCount);\n+            mbg[i].nestname_RU = this.parseCPUTF8References(String.valueOf(contextName) + \"_\" + rxa + \"_nestname_RU\", in, Codec.UNSIGNED5, nestPairCount);\n         }\n         return mbg;\n     }\n     \n     private int parseMethodMetadataBands(final InputStream in, final int[] methodAttrCalls) throws Pack200Exception, IOException {\n         int backwardsCallsUsed = 0;\n         final String[] RxA = { \"RVA\", \"RIA\", \"RVPA\", \"RIPA\", \"AD\" };\n-        final int[] rxaCounts = { 0, 0, 0, 0, 0 };\n+        final int[] rxaCounts = new int[5];\n         final AttributeLayout rvaLayout = this.attrMap.getAttributeLayout(\"RuntimeVisibleAnnotations\", 2);\n         final AttributeLayout riaLayout = this.attrMap.getAttributeLayout(\"RuntimeInvisibleAnnotations\", 2);\n         final AttributeLayout rvpaLayout = this.attrMap.getAttributeLayout(\"RuntimeVisibleParameterAnnotations\", 2);\n         final AttributeLayout ripaLayout = this.attrMap.getAttributeLayout(\"RuntimeInvisibleParameterAnnotations\", 2);\n         final AttributeLayout adLayout = this.attrMap.getAttributeLayout(\"AnnotationDefault\", 2);\n         final AttributeLayout[] rxaLayouts = { rvaLayout, riaLayout, rvpaLayout, ripaLayout, adLayout };\n         int i = 0;\n-        Arrays.setAll(rxaCounts, i -> SegmentUtils.countMatches(this.methodFlags, (IMatcher)rxaLayouts[i]));\n+        Arrays.setAll(rxaCounts, i -> SegmentUtils.countMatches(this.methodFlags, (IMatcher)array[i]));\n         final int[] backwardsCalls = new int[5];\n         int methodAttrIndex = 0;\n         for (i = 0; i < backwardsCalls.length; ++i) {\n             if (rxaCounts[i] > 0) {\n                 ++backwardsCallsUsed;\n                 backwardsCalls[i] = methodAttrCalls[methodAttrIndex];\n                 ++methodAttrIndex;\n             }\n             else {\n                 backwardsCalls[i] = 0;\n             }\n         }\n         final MetadataBandGroup[] mbgs = this.parseMetadata(in, RxA, rxaCounts, backwardsCalls, \"method\");\n-        final List<Attribute>[] attributeLists = new List[RxA.length];\n+        final List[] attributeLists = new List[RxA.length];\n         final int[] attributeListIndexes = new int[RxA.length];\n         for (int j = 0; j < mbgs.length; ++j) {\n             attributeLists[j] = mbgs[j].getAttributes();\n             attributeListIndexes[j] = 0;\n         }\n         for (int j = 0; j < this.methodFlags.length; ++j) {\n             for (int k = 0; k < this.methodFlags[j].length; ++k) {\n@@ -826,15 +826,15 @@\n         int numBackwardsCalls = 0;\n         final String[] RxA = { \"RVA\", \"RIA\" };\n         final AttributeLayout rvaLayout = this.attrMap.getAttributeLayout(\"RuntimeVisibleAnnotations\", 0);\n         final AttributeLayout riaLayout = this.attrMap.getAttributeLayout(\"RuntimeInvisibleAnnotations\", 0);\n         final int rvaCount = SegmentUtils.countMatches(this.classFlags, (IMatcher)rvaLayout);\n         final int riaCount = SegmentUtils.countMatches(this.classFlags, (IMatcher)riaLayout);\n         final int[] RxACount = { rvaCount, riaCount };\n-        final int[] backwardsCalls = { 0, 0 };\n+        final int[] backwardsCalls = new int[2];\n         if (rvaCount > 0) {\n             ++numBackwardsCalls;\n             backwardsCalls[0] = classAttrCalls[0];\n             if (riaCount > 0) {\n                 ++numBackwardsCalls;\n                 backwardsCalls[1] = classAttrCalls[1];\n             }\n"}]}
