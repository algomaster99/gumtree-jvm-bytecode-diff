{"diffoscope-json-version": 1, "source1": "first/LZMAUtils.class", "source2": "second/LZMAUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -7,14 +7,29 @@\n \n public class LZMAUtils\n {\n     private static final FileNameUtil fileNameUtil;\n     private static final byte[] HEADER_MAGIC;\n     private static volatile LZMAUtils.CachedAvailability cachedLZMAAvailability;\n     \n+    static {\n+        HEADER_MAGIC = new byte[] { 93, 0, 0 };\n+        final Map<String, String> uncompressSuffix = new HashMap<String, String>();\n+        uncompressSuffix.put(\".lzma\", \"\");\n+        uncompressSuffix.put(\"-lzma\", \"\");\n+        fileNameUtil = new FileNameUtil((Map)uncompressSuffix, \".lzma\");\n+        LZMAUtils.cachedLZMAAvailability = LZMAUtils.CachedAvailability.DONT_CACHE;\n+        try {\n+            Class.forName(\"org.osgi.framework.BundleEvent\");\n+        }\n+        catch (final Exception ex) {\n+            setCacheLZMAAvailablity(true);\n+        }\n+    }\n+    \n     private LZMAUtils() {\n     }\n     \n     public static boolean matches(final byte[] signature, final int length) {\n         if (length < LZMAUtils.HEADER_MAGIC.length) {\n             return false;\n         }\n@@ -35,15 +50,15 @@\n     }\n     \n     private static boolean internalIsLZMACompressionAvailable() {\n         try {\n             LZMACompressorInputStream.matches((byte[])null, 0);\n             return true;\n         }\n-        catch (final NoClassDefFoundError error) {\n+        catch (final NoClassDefFoundError noClassDefFoundError) {\n             return false;\n         }\n     }\n     \n     public static boolean isCompressedFilename(final String fileName) {\n         return LZMAUtils.fileNameUtil.isCompressedFilename(fileName);\n     }\n@@ -65,23 +80,8 @@\n             LZMAUtils.cachedLZMAAvailability = (hasLzma ? LZMAUtils.CachedAvailability.CACHED_AVAILABLE : LZMAUtils.CachedAvailability.CACHED_UNAVAILABLE);\n         }\n     }\n     \n     static LZMAUtils.CachedAvailability getCachedLZMAAvailability() {\n         return LZMAUtils.cachedLZMAAvailability;\n     }\n-    \n-    static {\n-        HEADER_MAGIC = new byte[] { 93, 0, 0 };\n-        final Map<String, String> uncompressSuffix = new HashMap<String, String>();\n-        uncompressSuffix.put(\".lzma\", \"\");\n-        uncompressSuffix.put(\"-lzma\", \"\");\n-        fileNameUtil = new FileNameUtil((Map)uncompressSuffix, \".lzma\");\n-        LZMAUtils.cachedLZMAAvailability = LZMAUtils.CachedAvailability.DONT_CACHE;\n-        try {\n-            Class.forName(\"org.osgi.framework.BundleEvent\");\n-        }\n-        catch (final Exception ex) {\n-            setCacheLZMAAvailablity(true);\n-        }\n-    }\n }\n"}]}
