{"diffoscope-json-version": 1, "source1": "first/ZipSplitReadOnlySeekableByteChannelTest.class", "source2": "second/ZipSplitReadOnlySeekableByteChannelTest.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,244 +1,244 @@\n-  SHA-256 checksum f7ddcaba145236ae5138cbc876c3131075393e1723ac73b01a510fb0dcd7bad0\n+  SHA-256 checksum 20e33540f5a9b0cc557f00ae74122fdca79cd8ed9520c5d699e5c59dfa90df02\n   Compiled from \"ZipSplitReadOnlySeekableByteChannelTest.java\"\n public class org.apache.commons.compress.utils.ZipSplitReadOnlySeekableByteChannelTest\n   minor version: 0\n   major version: 53\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #46                         // org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest\n-  super_class: #47                        // java/lang/Object\n+  this_class: #14                         // org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest\n+  super_class: #2                         // java/lang/Object\n   interfaces: 0, fields: 1, methods: 14, attributes: 1\n Constant pool:\n-    #1 = Methodref          #47.#113      // java/lang/Object.\"<init>\":()V\n-    #2 = Methodref          #114.#115     // org/junit/rules/ExpectedException.none:()Lorg/junit/rules/ExpectedException;\n-    #3 = Fieldref           #46.#116      // org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest.thrown:Lorg/junit/rules/ExpectedException;\n-    #4 = Class              #117          // java/lang/NullPointerException\n-    #5 = Methodref          #114.#118     // org/junit/rules/ExpectedException.expect:(Ljava/lang/Class;)V\n-    #6 = Class              #119          // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n-    #7 = Methodref          #6.#120       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.\"<init>\":(Ljava/util/List;)V\n-    #8 = Class              #121          // java/io/IOException\n-    #9 = Class              #122          // java/util/ArrayList\n-   #10 = Methodref          #9.#113       // java/util/ArrayList.\"<init>\":()V\n-   #11 = String             #123          // COMPRESS-189.zip\n-   #12 = Methodref          #124.#125     // org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n-   #13 = Methodref          #37.#126      // java/io/File.toPath:()Ljava/nio/file/Path;\n-   #14 = Class              #127          // java/nio/file/OpenOption\n-   #15 = Fieldref           #128.#129     // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n-   #16 = Methodref          #130.#131     // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-   #17 = InterfaceMethodref #73.#132      // java/util/List.add:(Ljava/lang/Object;)Z\n-   #18 = Methodref          #46.#133      // org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest.getSplitZipChannels:()Ljava/util/List;\n-   #19 = InterfaceMethodref #73.#134      // java/util/List.iterator:()Ljava/util/Iterator;\n-   #20 = InterfaceMethodref #74.#135      // java/util/Iterator.hasNext:()Z\n-   #21 = InterfaceMethodref #74.#136      // java/util/Iterator.next:()Ljava/lang/Object;\n-   #22 = Class              #137          // java/nio/channels/SeekableByteChannel\n-   #23 = InterfaceMethodref #22.#138      // java/nio/channels/SeekableByteChannel.position:()J\n-   #24 = Methodref          #139.#140     // org/junit/Assert.assertEquals:(JJ)V\n-   #25 = Methodref          #6.#141       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels:([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n-   #26 = Methodref          #6.#142       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels:(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n-   #27 = String             #143          // COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z01\n-   #28 = String             #144          // COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z02\n-   #29 = String             #145          // COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.zip\n-   #30 = Methodref          #139.#146     // org/junit/Assert.assertTrue:(Z)V\n-   #31 = Class              #147          // org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n-   #32 = Methodref          #31.#148      // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n-   #33 = Methodref          #139.#149     // org/junit/Assert.assertSame:(Ljava/lang/Object;Ljava/lang/Object;)V\n-   #34 = Methodref          #6.#150       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forFiles:([Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n-   #35 = Methodref          #6.#151       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forFiles:(Ljava/io/File;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n-   #36 = Methodref          #9.#132       // java/util/ArrayList.add:(Ljava/lang/Object;)Z\n-   #37 = Class              #152          // java/io/File\n-   #38 = Class              #153          // java/lang/IllegalArgumentException\n-   #39 = Methodref          #6.#154       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment:(Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n-   #40 = Methodref          #37.#155      // java/io/File.length:()J\n-   #41 = Class              #156          // java/util/Random\n-   #42 = Methodref          #41.#113      // java/util/Random.\"<init>\":()V\n-   #43 = Methodref          #41.#157      // java/util/Random.nextInt:(I)I\n-   #44 = Methodref          #6.#158       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n-   #45 = Methodref          #6.#138       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:()J\n-   #46 = Class              #159          // org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest\n-   #47 = Class              #160          // java/lang/Object\n-   #48 = Utf8               thrown\n-   #49 = Utf8               Lorg/junit/rules/ExpectedException;\n-   #50 = Utf8               RuntimeVisibleAnnotations\n-   #51 = Utf8               Lorg/junit/Rule;\n-   #52 = Utf8               <init>\n-   #53 = Utf8               ()V\n-   #54 = Utf8               Code\n-   #55 = Utf8               LineNumberTable\n-   #56 = Utf8               LocalVariableTable\n-   #57 = Utf8               this\n-   #58 = Utf8               Lorg/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest;\n-   #59 = Utf8               constructorThrowsOnNullArg\n-   #60 = Utf8               Exceptions\n-   #61 = Utf8               Lorg/junit/Test;\n-   #62 = Utf8               constructorThrowsOnNonSplitZipFiles\n-   #63 = Utf8               channels\n-   #64 = Utf8               Ljava/util/List;\n-   #65 = Utf8               file\n-   #66 = Utf8               Ljava/io/File;\n-   #67 = Utf8               LocalVariableTypeTable\n-   #68 = Utf8               Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n-   #69 = Utf8               channelsPositionIsZeroAfterConstructor\n-   #70 = Utf8               channel\n-   #71 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n-   #72 = Utf8               StackMapTable\n-   #73 = Class              #161          // java/util/List\n-   #74 = Class              #162          // java/util/Iterator\n-   #75 = Utf8               forOrderedSeekableByteChannelsThrowsOnNullArg\n-   #76 = Utf8               forOrderedSeekableByteChannelsOfTwoParametersThrowsOnNullArg\n-   #77 = Utf8               forOrderedSeekableByteChannelsReturnCorrectClass\n-   #78 = Utf8               file1\n-   #79 = Utf8               firstChannel\n-   #80 = Utf8               file2\n-   #81 = Utf8               secondChannel\n-   #82 = Utf8               lastFile\n-   #83 = Utf8               lastChannel\n-   #84 = Utf8               forOrderedSeekableByteChannelsReturnsIdentityForSingleElement\n-   #85 = Utf8               emptyChannel\n-   #86 = Utf8               forFilesThrowsOnNullArg\n-   #87 = Utf8               forFilesOfTwoParametersThrowsOnNullArg\n-   #88 = Utf8               forFilesReturnCorrectClass\n-   #89 = Utf8               firstFile\n-   #90 = Utf8               secondFile\n-   #91 = Utf8               list\n-   #92 = Utf8               Ljava/util/ArrayList;\n-   #93 = Utf8               Ljava/util/ArrayList<Ljava/io/File;>;\n-   #94 = Utf8               buildFromLastSplitSegmentThrowsOnNotZipFile\n-   #95 = Utf8               positionToSomeZipSplitSegment\n-   #96 = Utf8               firstFileSize\n-   #97 = Utf8               I\n-   #98 = Utf8               secondFileSize\n-   #99 = Utf8               lastFileSize\n-  #100 = Utf8               random\n-  #101 = Utf8               Ljava/util/Random;\n-  #102 = Utf8               randomDiskNumber\n-  #103 = Utf8               randomOffset\n-  #104 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel;\n-  #105 = Utf8               expectedPosition\n-  #106 = Utf8               J\n-  #107 = Utf8               getSplitZipChannels\n-  #108 = Utf8               ()Ljava/util/List;\n-  #109 = Utf8               Signature\n-  #110 = Utf8               ()Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n-  #111 = Utf8               SourceFile\n-  #112 = Utf8               ZipSplitReadOnlySeekableByteChannelTest.java\n-  #113 = NameAndType        #52:#53       // \"<init>\":()V\n-  #114 = Class              #163          // org/junit/rules/ExpectedException\n-  #115 = NameAndType        #164:#165     // none:()Lorg/junit/rules/ExpectedException;\n-  #116 = NameAndType        #48:#49       // thrown:Lorg/junit/rules/ExpectedException;\n-  #117 = Utf8               java/lang/NullPointerException\n-  #118 = NameAndType        #166:#167     // expect:(Ljava/lang/Class;)V\n-  #119 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n-  #120 = NameAndType        #52:#168      // \"<init>\":(Ljava/util/List;)V\n-  #121 = Utf8               java/io/IOException\n-  #122 = Utf8               java/util/ArrayList\n-  #123 = Utf8               COMPRESS-189.zip\n-  #124 = Class              #169          // org/apache/commons/compress/AbstractTestCase\n-  #125 = NameAndType        #170:#171     // getFile:(Ljava/lang/String;)Ljava/io/File;\n-  #126 = NameAndType        #172:#173     // toPath:()Ljava/nio/file/Path;\n-  #127 = Utf8               java/nio/file/OpenOption\n-  #128 = Class              #174          // java/nio/file/StandardOpenOption\n-  #129 = NameAndType        #175:#176     // READ:Ljava/nio/file/StandardOpenOption;\n-  #130 = Class              #177          // java/nio/file/Files\n-  #131 = NameAndType        #178:#179     // newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-  #132 = NameAndType        #180:#181     // add:(Ljava/lang/Object;)Z\n-  #133 = NameAndType        #107:#108     // getSplitZipChannels:()Ljava/util/List;\n-  #134 = NameAndType        #182:#183     // iterator:()Ljava/util/Iterator;\n-  #135 = NameAndType        #184:#185     // hasNext:()Z\n-  #136 = NameAndType        #186:#187     // next:()Ljava/lang/Object;\n-  #137 = Utf8               java/nio/channels/SeekableByteChannel\n-  #138 = NameAndType        #188:#189     // position:()J\n-  #139 = Class              #190          // org/junit/Assert\n-  #140 = NameAndType        #191:#192     // assertEquals:(JJ)V\n-  #141 = NameAndType        #193:#194     // forOrderedSeekableByteChannels:([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n-  #142 = NameAndType        #193:#195     // forOrderedSeekableByteChannels:(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n-  #143 = Utf8               COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z01\n-  #144 = Utf8               COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z02\n-  #145 = Utf8               COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.zip\n-  #146 = NameAndType        #196:#197     // assertTrue:(Z)V\n-  #147 = Utf8               org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n-  #148 = NameAndType        #52:#198      // \"<init>\":([B)V\n-  #149 = NameAndType        #199:#200     // assertSame:(Ljava/lang/Object;Ljava/lang/Object;)V\n-  #150 = NameAndType        #201:#202     // forFiles:([Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n-  #151 = NameAndType        #201:#203     // forFiles:(Ljava/io/File;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n-  #152 = Utf8               java/io/File\n-  #153 = Utf8               java/lang/IllegalArgumentException\n-  #154 = NameAndType        #204:#205     // buildFromLastSplitSegment:(Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n-  #155 = NameAndType        #206:#189     // length:()J\n-  #156 = Utf8               java/util/Random\n-  #157 = NameAndType        #207:#208     // nextInt:(I)I\n-  #158 = NameAndType        #188:#209     // position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n-  #159 = Utf8               org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest\n-  #160 = Utf8               java/lang/Object\n-  #161 = Utf8               java/util/List\n-  #162 = Utf8               java/util/Iterator\n-  #163 = Utf8               org/junit/rules/ExpectedException\n-  #164 = Utf8               none\n-  #165 = Utf8               ()Lorg/junit/rules/ExpectedException;\n-  #166 = Utf8               expect\n-  #167 = Utf8               (Ljava/lang/Class;)V\n-  #168 = Utf8               (Ljava/util/List;)V\n-  #169 = Utf8               org/apache/commons/compress/AbstractTestCase\n-  #170 = Utf8               getFile\n-  #171 = Utf8               (Ljava/lang/String;)Ljava/io/File;\n-  #172 = Utf8               toPath\n-  #173 = Utf8               ()Ljava/nio/file/Path;\n-  #174 = Utf8               java/nio/file/StandardOpenOption\n-  #175 = Utf8               READ\n-  #176 = Utf8               Ljava/nio/file/StandardOpenOption;\n-  #177 = Utf8               java/nio/file/Files\n-  #178 = Utf8               newByteChannel\n-  #179 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-  #180 = Utf8               add\n-  #181 = Utf8               (Ljava/lang/Object;)Z\n-  #182 = Utf8               iterator\n-  #183 = Utf8               ()Ljava/util/Iterator;\n-  #184 = Utf8               hasNext\n-  #185 = Utf8               ()Z\n-  #186 = Utf8               next\n-  #187 = Utf8               ()Ljava/lang/Object;\n-  #188 = Utf8               position\n-  #189 = Utf8               ()J\n-  #190 = Utf8               org/junit/Assert\n-  #191 = Utf8               assertEquals\n-  #192 = Utf8               (JJ)V\n-  #193 = Utf8               forOrderedSeekableByteChannels\n-  #194 = Utf8               ([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n-  #195 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n-  #196 = Utf8               assertTrue\n-  #197 = Utf8               (Z)V\n-  #198 = Utf8               ([B)V\n-  #199 = Utf8               assertSame\n-  #200 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)V\n-  #201 = Utf8               forFiles\n-  #202 = Utf8               ([Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n-  #203 = Utf8               (Ljava/io/File;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n-  #204 = Utf8               buildFromLastSplitSegment\n-  #205 = Utf8               (Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n-  #206 = Utf8               length\n-  #207 = Utf8               nextInt\n-  #208 = Utf8               (I)I\n-  #209 = Utf8               (JJ)Ljava/nio/channels/SeekableByteChannel;\n+    #1 = Methodref          #2.#3         // java/lang/Object.\"<init>\":()V\n+    #2 = Class              #4            // java/lang/Object\n+    #3 = NameAndType        #5:#6         // \"<init>\":()V\n+    #4 = Utf8               java/lang/Object\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ()V\n+    #7 = Methodref          #8.#9         // org/junit/rules/ExpectedException.none:()Lorg/junit/rules/ExpectedException;\n+    #8 = Class              #10           // org/junit/rules/ExpectedException\n+    #9 = NameAndType        #11:#12       // none:()Lorg/junit/rules/ExpectedException;\n+   #10 = Utf8               org/junit/rules/ExpectedException\n+   #11 = Utf8               none\n+   #12 = Utf8               ()Lorg/junit/rules/ExpectedException;\n+   #13 = Fieldref           #14.#15       // org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest.thrown:Lorg/junit/rules/ExpectedException;\n+   #14 = Class              #16           // org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest\n+   #15 = NameAndType        #17:#18       // thrown:Lorg/junit/rules/ExpectedException;\n+   #16 = Utf8               org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest\n+   #17 = Utf8               thrown\n+   #18 = Utf8               Lorg/junit/rules/ExpectedException;\n+   #19 = Class              #20           // java/lang/NullPointerException\n+   #20 = Utf8               java/lang/NullPointerException\n+   #21 = Methodref          #8.#22        // org/junit/rules/ExpectedException.expect:(Ljava/lang/Class;)V\n+   #22 = NameAndType        #23:#24       // expect:(Ljava/lang/Class;)V\n+   #23 = Utf8               expect\n+   #24 = Utf8               (Ljava/lang/Class;)V\n+   #25 = Class              #26           // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+   #26 = Utf8               org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+   #27 = Methodref          #25.#28       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.\"<init>\":(Ljava/util/List;)V\n+   #28 = NameAndType        #5:#29        // \"<init>\":(Ljava/util/List;)V\n+   #29 = Utf8               (Ljava/util/List;)V\n+   #30 = Class              #31           // java/io/IOException\n+   #31 = Utf8               java/io/IOException\n+   #32 = Class              #33           // java/util/ArrayList\n+   #33 = Utf8               java/util/ArrayList\n+   #34 = Methodref          #32.#3        // java/util/ArrayList.\"<init>\":()V\n+   #35 = String             #36           // COMPRESS-189.zip\n+   #36 = Utf8               COMPRESS-189.zip\n+   #37 = Methodref          #38.#39       // org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n+   #38 = Class              #40           // org/apache/commons/compress/AbstractTestCase\n+   #39 = NameAndType        #41:#42       // getFile:(Ljava/lang/String;)Ljava/io/File;\n+   #40 = Utf8               org/apache/commons/compress/AbstractTestCase\n+   #41 = Utf8               getFile\n+   #42 = Utf8               (Ljava/lang/String;)Ljava/io/File;\n+   #43 = Methodref          #44.#45       // java/io/File.toPath:()Ljava/nio/file/Path;\n+   #44 = Class              #46           // java/io/File\n+   #45 = NameAndType        #47:#48       // toPath:()Ljava/nio/file/Path;\n+   #46 = Utf8               java/io/File\n+   #47 = Utf8               toPath\n+   #48 = Utf8               ()Ljava/nio/file/Path;\n+   #49 = Class              #50           // java/nio/file/OpenOption\n+   #50 = Utf8               java/nio/file/OpenOption\n+   #51 = Fieldref           #52.#53       // java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+   #52 = Class              #54           // java/nio/file/StandardOpenOption\n+   #53 = NameAndType        #55:#56       // READ:Ljava/nio/file/StandardOpenOption;\n+   #54 = Utf8               java/nio/file/StandardOpenOption\n+   #55 = Utf8               READ\n+   #56 = Utf8               Ljava/nio/file/StandardOpenOption;\n+   #57 = Methodref          #58.#59       // java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+   #58 = Class              #60           // java/nio/file/Files\n+   #59 = NameAndType        #61:#62       // newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+   #60 = Utf8               java/nio/file/Files\n+   #61 = Utf8               newByteChannel\n+   #62 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+   #63 = InterfaceMethodref #64.#65       // java/util/List.add:(Ljava/lang/Object;)Z\n+   #64 = Class              #66           // java/util/List\n+   #65 = NameAndType        #67:#68       // add:(Ljava/lang/Object;)Z\n+   #66 = Utf8               java/util/List\n+   #67 = Utf8               add\n+   #68 = Utf8               (Ljava/lang/Object;)Z\n+   #69 = Methodref          #14.#70       // org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest.getSplitZipChannels:()Ljava/util/List;\n+   #70 = NameAndType        #71:#72       // getSplitZipChannels:()Ljava/util/List;\n+   #71 = Utf8               getSplitZipChannels\n+   #72 = Utf8               ()Ljava/util/List;\n+   #73 = InterfaceMethodref #64.#74       // java/util/List.iterator:()Ljava/util/Iterator;\n+   #74 = NameAndType        #75:#76       // iterator:()Ljava/util/Iterator;\n+   #75 = Utf8               iterator\n+   #76 = Utf8               ()Ljava/util/Iterator;\n+   #77 = InterfaceMethodref #78.#79       // java/util/Iterator.hasNext:()Z\n+   #78 = Class              #80           // java/util/Iterator\n+   #79 = NameAndType        #81:#82       // hasNext:()Z\n+   #80 = Utf8               java/util/Iterator\n+   #81 = Utf8               hasNext\n+   #82 = Utf8               ()Z\n+   #83 = InterfaceMethodref #78.#84       // java/util/Iterator.next:()Ljava/lang/Object;\n+   #84 = NameAndType        #85:#86       // next:()Ljava/lang/Object;\n+   #85 = Utf8               next\n+   #86 = Utf8               ()Ljava/lang/Object;\n+   #87 = Class              #88           // java/nio/channels/SeekableByteChannel\n+   #88 = Utf8               java/nio/channels/SeekableByteChannel\n+   #89 = InterfaceMethodref #87.#90       // java/nio/channels/SeekableByteChannel.position:()J\n+   #90 = NameAndType        #91:#92       // position:()J\n+   #91 = Utf8               position\n+   #92 = Utf8               ()J\n+   #93 = Methodref          #94.#95       // org/junit/Assert.assertEquals:(JJ)V\n+   #94 = Class              #96           // org/junit/Assert\n+   #95 = NameAndType        #97:#98       // assertEquals:(JJ)V\n+   #96 = Utf8               org/junit/Assert\n+   #97 = Utf8               assertEquals\n+   #98 = Utf8               (JJ)V\n+   #99 = Methodref          #25.#100      // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels:([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n+  #100 = NameAndType        #101:#102     // forOrderedSeekableByteChannels:([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n+  #101 = Utf8               forOrderedSeekableByteChannels\n+  #102 = Utf8               ([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n+  #103 = Methodref          #25.#104      // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels:(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n+  #104 = NameAndType        #101:#105     // forOrderedSeekableByteChannels:(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n+  #105 = Utf8               (Ljava/nio/channels/SeekableByteChannel;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n+  #106 = String             #107          // COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z01\n+  #107 = Utf8               COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z01\n+  #108 = String             #109          // COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z02\n+  #109 = Utf8               COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z02\n+  #110 = String             #111          // COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.zip\n+  #111 = Utf8               COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.zip\n+  #112 = Methodref          #94.#113      // org/junit/Assert.assertTrue:(Z)V\n+  #113 = NameAndType        #114:#115     // assertTrue:(Z)V\n+  #114 = Utf8               assertTrue\n+  #115 = Utf8               (Z)V\n+  #116 = Class              #117          // org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n+  #117 = Utf8               org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n+  #118 = Methodref          #116.#119     // org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n+  #119 = NameAndType        #5:#120       // \"<init>\":([B)V\n+  #120 = Utf8               ([B)V\n+  #121 = Methodref          #94.#122      // org/junit/Assert.assertSame:(Ljava/lang/Object;Ljava/lang/Object;)V\n+  #122 = NameAndType        #123:#124     // assertSame:(Ljava/lang/Object;Ljava/lang/Object;)V\n+  #123 = Utf8               assertSame\n+  #124 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)V\n+  #125 = Methodref          #25.#126      // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forFiles:([Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n+  #126 = NameAndType        #127:#128     // forFiles:([Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n+  #127 = Utf8               forFiles\n+  #128 = Utf8               ([Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n+  #129 = Methodref          #25.#130      // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forFiles:(Ljava/io/File;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n+  #130 = NameAndType        #127:#131     // forFiles:(Ljava/io/File;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n+  #131 = Utf8               (Ljava/io/File;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n+  #132 = Methodref          #32.#65       // java/util/ArrayList.add:(Ljava/lang/Object;)Z\n+  #133 = Class              #134          // java/lang/IllegalArgumentException\n+  #134 = Utf8               java/lang/IllegalArgumentException\n+  #135 = Methodref          #25.#136      // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment:(Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n+  #136 = NameAndType        #137:#138     // buildFromLastSplitSegment:(Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n+  #137 = Utf8               buildFromLastSplitSegment\n+  #138 = Utf8               (Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n+  #139 = Methodref          #44.#140      // java/io/File.length:()J\n+  #140 = NameAndType        #141:#92      // length:()J\n+  #141 = Utf8               length\n+  #142 = Class              #143          // java/util/Random\n+  #143 = Utf8               java/util/Random\n+  #144 = Methodref          #142.#3       // java/util/Random.\"<init>\":()V\n+  #145 = Methodref          #142.#146     // java/util/Random.nextInt:(I)I\n+  #146 = NameAndType        #147:#148     // nextInt:(I)I\n+  #147 = Utf8               nextInt\n+  #148 = Utf8               (I)I\n+  #149 = Methodref          #25.#150      // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n+  #150 = NameAndType        #91:#151      // position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n+  #151 = Utf8               (JJ)Ljava/nio/channels/SeekableByteChannel;\n+  #152 = Methodref          #25.#90       // org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:()J\n+  #153 = Utf8               RuntimeVisibleAnnotations\n+  #154 = Utf8               Lorg/junit/Rule;\n+  #155 = Utf8               Code\n+  #156 = Utf8               LineNumberTable\n+  #157 = Utf8               LocalVariableTable\n+  #158 = Utf8               this\n+  #159 = Utf8               Lorg/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest;\n+  #160 = Utf8               constructorThrowsOnNullArg\n+  #161 = Utf8               Exceptions\n+  #162 = Utf8               Lorg/junit/Test;\n+  #163 = Utf8               constructorThrowsOnNonSplitZipFiles\n+  #164 = Utf8               channels\n+  #165 = Utf8               Ljava/util/List;\n+  #166 = Utf8               file\n+  #167 = Utf8               Ljava/io/File;\n+  #168 = Utf8               LocalVariableTypeTable\n+  #169 = Utf8               Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n+  #170 = Utf8               channelsPositionIsZeroAfterConstructor\n+  #171 = Utf8               channel\n+  #172 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n+  #173 = Utf8               StackMapTable\n+  #174 = Utf8               forOrderedSeekableByteChannelsThrowsOnNullArg\n+  #175 = Utf8               forOrderedSeekableByteChannelsOfTwoParametersThrowsOnNullArg\n+  #176 = Utf8               forOrderedSeekableByteChannelsReturnCorrectClass\n+  #177 = Utf8               file1\n+  #178 = Utf8               firstChannel\n+  #179 = Utf8               file2\n+  #180 = Utf8               secondChannel\n+  #181 = Utf8               lastFile\n+  #182 = Utf8               lastChannel\n+  #183 = Utf8               forOrderedSeekableByteChannelsReturnsIdentityForSingleElement\n+  #184 = Utf8               emptyChannel\n+  #185 = Utf8               forFilesThrowsOnNullArg\n+  #186 = Utf8               forFilesOfTwoParametersThrowsOnNullArg\n+  #187 = Utf8               forFilesReturnCorrectClass\n+  #188 = Utf8               firstFile\n+  #189 = Utf8               secondFile\n+  #190 = Utf8               list\n+  #191 = Utf8               Ljava/util/ArrayList;\n+  #192 = Utf8               Ljava/util/ArrayList<Ljava/io/File;>;\n+  #193 = Utf8               buildFromLastSplitSegmentThrowsOnNotZipFile\n+  #194 = Utf8               positionToSomeZipSplitSegment\n+  #195 = Utf8               firstFileSize\n+  #196 = Utf8               I\n+  #197 = Utf8               secondFileSize\n+  #198 = Utf8               lastFileSize\n+  #199 = Utf8               random\n+  #200 = Utf8               Ljava/util/Random;\n+  #201 = Utf8               randomDiskNumber\n+  #202 = Utf8               randomOffset\n+  #203 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel;\n+  #204 = Utf8               expectedPosition\n+  #205 = Utf8               J\n+  #206 = Utf8               Signature\n+  #207 = Utf8               ()Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n+  #208 = Utf8               SourceFile\n+  #209 = Utf8               ZipSplitReadOnlySeekableByteChannelTest.java\n {\n   public org.junit.rules.ExpectedException thrown;\n     descriptor: Lorg/junit/rules/ExpectedException;\n     flags: (0x0001) ACC_PUBLIC\n     RuntimeVisibleAnnotations:\n-      0: #51()\n+      0: #154()\n         org.junit.Rule\n \n   public org.apache.commons.compress.utils.ZipSplitReadOnlySeekableByteChannelTest();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n-         5: invokestatic  #2                  // Method org/junit/rules/ExpectedException.none:()Lorg/junit/rules/ExpectedException;\n-         8: putfield      #3                  // Field thrown:Lorg/junit/rules/ExpectedException;\n+         5: invokestatic  #7                  // Method org/junit/rules/ExpectedException.none:()Lorg/junit/rules/ExpectedException;\n+         8: putfield      #13                 // Field thrown:Lorg/junit/rules/ExpectedException;\n         11: return\n       LineNumberTable:\n         line 38: 0\n         line 39: 4\n         line 40: 5\n         line 39: 11\n       LocalVariableTable:\n@@ -247,68 +247,68 @@\n \n   public void constructorThrowsOnNullArg() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field thrown:Lorg/junit/rules/ExpectedException;\n-         4: ldc           #4                  // class java/lang/NullPointerException\n-         6: invokevirtual #5                  // Method org/junit/rules/ExpectedException.expect:(Ljava/lang/Class;)V\n-         9: new           #6                  // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+         1: getfield      #13                 // Field thrown:Lorg/junit/rules/ExpectedException;\n+         4: ldc           #19                 // class java/lang/NullPointerException\n+         6: invokevirtual #21                 // Method org/junit/rules/ExpectedException.expect:(Ljava/lang/Class;)V\n+         9: new           #25                 // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n         12: dup\n         13: aconst_null\n-        14: invokespecial #7                  // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.\"<init>\":(Ljava/util/List;)V\n+        14: invokespecial #27                 // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.\"<init>\":(Ljava/util/List;)V\n         17: pop\n         18: return\n       LineNumberTable:\n         line 44: 0\n         line 45: 9\n         line 46: 18\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      19     0  this   Lorg/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest;\n     Exceptions:\n       throws java.io.IOException\n     RuntimeVisibleAnnotations:\n-      0: #61()\n+      0: #162()\n         org.junit.Test\n \n   public void constructorThrowsOnNonSplitZipFiles() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=3, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field thrown:Lorg/junit/rules/ExpectedException;\n-         4: ldc           #8                  // class java/io/IOException\n-         6: invokevirtual #5                  // Method org/junit/rules/ExpectedException.expect:(Ljava/lang/Class;)V\n-         9: new           #9                  // class java/util/ArrayList\n+         1: getfield      #13                 // Field thrown:Lorg/junit/rules/ExpectedException;\n+         4: ldc           #30                 // class java/io/IOException\n+         6: invokevirtual #21                 // Method org/junit/rules/ExpectedException.expect:(Ljava/lang/Class;)V\n+         9: new           #32                 // class java/util/ArrayList\n         12: dup\n-        13: invokespecial #10                 // Method java/util/ArrayList.\"<init>\":()V\n+        13: invokespecial #34                 // Method java/util/ArrayList.\"<init>\":()V\n         16: astore_1\n-        17: ldc           #11                 // String COMPRESS-189.zip\n-        19: invokestatic  #12                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n+        17: ldc           #35                 // String COMPRESS-189.zip\n+        19: invokestatic  #37                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n         22: astore_2\n         23: aload_1\n         24: aload_2\n-        25: invokevirtual #13                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+        25: invokevirtual #43                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n         28: iconst_1\n-        29: anewarray     #14                 // class java/nio/file/OpenOption\n+        29: anewarray     #49                 // class java/nio/file/OpenOption\n         32: dup\n         33: iconst_0\n-        34: getstatic     #15                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+        34: getstatic     #51                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n         37: aastore\n-        38: invokestatic  #16                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-        41: invokeinterface #17,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+        38: invokestatic  #57                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+        41: invokeinterface #63,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n         46: pop\n-        47: new           #6                  // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+        47: new           #25                 // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n         50: dup\n         51: aload_1\n-        52: invokespecial #7                  // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.\"<init>\":(Ljava/util/List;)V\n+        52: invokespecial #27                 // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.\"<init>\":(Ljava/util/List;)V\n         55: pop\n         56: return\n       LineNumberTable:\n         line 50: 0\n         line 51: 9\n         line 52: 17\n         line 53: 23\n@@ -321,44 +321,44 @@\n            23      34     2  file   Ljava/io/File;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n            17      40     1 channels   Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n     Exceptions:\n       throws java.io.IOException\n     RuntimeVisibleAnnotations:\n-      0: #61()\n+      0: #162()\n         org.junit.Test\n \n   public void channelsPositionIsZeroAfterConstructor() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=1\n          0: aload_0\n-         1: invokespecial #18                 // Method getSplitZipChannels:()Ljava/util/List;\n+         1: invokespecial #69                 // Method getSplitZipChannels:()Ljava/util/List;\n          4: astore_1\n-         5: new           #6                  // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+         5: new           #25                 // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n          8: dup\n          9: aload_1\n-        10: invokespecial #7                  // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.\"<init>\":(Ljava/util/List;)V\n+        10: invokespecial #27                 // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.\"<init>\":(Ljava/util/List;)V\n         13: pop\n         14: aload_1\n-        15: invokeinterface #19,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n+        15: invokeinterface #73,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;\n         20: astore_2\n         21: aload_2\n-        22: invokeinterface #20,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z\n+        22: invokeinterface #77,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z\n         27: ifeq          53\n         30: aload_2\n-        31: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n-        36: checkcast     #22                 // class java/nio/channels/SeekableByteChannel\n+        31: invokeinterface #83,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;\n+        36: checkcast     #87                 // class java/nio/channels/SeekableByteChannel\n         39: astore_3\n         40: lconst_0\n         41: aload_3\n-        42: invokeinterface #23,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n-        47: invokestatic  #24                 // Method org/junit/Assert.assertEquals:(JJ)V\n+        42: invokeinterface #89,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J\n+        47: invokestatic  #93                 // Method org/junit/Assert.assertEquals:(JJ)V\n         50: goto          21\n         53: return\n       LineNumberTable:\n         line 59: 0\n         line 60: 5\n         line 61: 14\n         line 62: 40\n@@ -377,152 +377,152 @@\n           offset_delta = 21\n           locals = [ class java/util/List, class java/util/Iterator ]\n         frame_type = 250 /* chop */\n           offset_delta = 31\n     Exceptions:\n       throws java.io.IOException\n     RuntimeVisibleAnnotations:\n-      0: #61()\n+      0: #162()\n         org.junit.Test\n \n   public void forOrderedSeekableByteChannelsThrowsOnNullArg() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field thrown:Lorg/junit/rules/ExpectedException;\n-         4: ldc           #4                  // class java/lang/NullPointerException\n-         6: invokevirtual #5                  // Method org/junit/rules/ExpectedException.expect:(Ljava/lang/Class;)V\n+         1: getfield      #13                 // Field thrown:Lorg/junit/rules/ExpectedException;\n+         4: ldc           #19                 // class java/lang/NullPointerException\n+         6: invokevirtual #21                 // Method org/junit/rules/ExpectedException.expect:(Ljava/lang/Class;)V\n          9: aconst_null\n-        10: invokestatic  #25                 // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels:([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n+        10: invokestatic  #99                 // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels:([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n         13: pop\n         14: return\n       LineNumberTable:\n         line 68: 0\n         line 69: 9\n         line 70: 14\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      15     0  this   Lorg/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest;\n     Exceptions:\n       throws java.io.IOException\n     RuntimeVisibleAnnotations:\n-      0: #61()\n+      0: #162()\n         org.junit.Test\n \n   public void forOrderedSeekableByteChannelsOfTwoParametersThrowsOnNullArg() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field thrown:Lorg/junit/rules/ExpectedException;\n-         4: ldc           #4                  // class java/lang/NullPointerException\n-         6: invokevirtual #5                  // Method org/junit/rules/ExpectedException.expect:(Ljava/lang/Class;)V\n+         1: getfield      #13                 // Field thrown:Lorg/junit/rules/ExpectedException;\n+         4: ldc           #19                 // class java/lang/NullPointerException\n+         6: invokevirtual #21                 // Method org/junit/rules/ExpectedException.expect:(Ljava/lang/Class;)V\n          9: aconst_null\n         10: aconst_null\n-        11: invokestatic  #26                 // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels:(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n+        11: invokestatic  #103                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels:(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n         14: pop\n         15: return\n       LineNumberTable:\n         line 74: 0\n         line 75: 9\n         line 76: 15\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      16     0  this   Lorg/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest;\n     Exceptions:\n       throws java.io.IOException\n     RuntimeVisibleAnnotations:\n-      0: #61()\n+      0: #162()\n         org.junit.Test\n \n   public void forOrderedSeekableByteChannelsReturnCorrectClass() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=9, args_size=1\n-         0: ldc           #27                 // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z01\n-         2: invokestatic  #12                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n+         0: ldc           #106                // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z01\n+         2: invokestatic  #37                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n          5: astore_1\n          6: aload_1\n-         7: invokevirtual #13                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+         7: invokevirtual #43                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n         10: iconst_1\n-        11: anewarray     #14                 // class java/nio/file/OpenOption\n+        11: anewarray     #49                 // class java/nio/file/OpenOption\n         14: dup\n         15: iconst_0\n-        16: getstatic     #15                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+        16: getstatic     #51                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n         19: aastore\n-        20: invokestatic  #16                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+        20: invokestatic  #57                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n         23: astore_2\n-        24: ldc           #28                 // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z02\n-        26: invokestatic  #12                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n+        24: ldc           #108                // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z02\n+        26: invokestatic  #37                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n         29: astore_3\n         30: aload_3\n-        31: invokevirtual #13                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+        31: invokevirtual #43                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n         34: iconst_1\n-        35: anewarray     #14                 // class java/nio/file/OpenOption\n+        35: anewarray     #49                 // class java/nio/file/OpenOption\n         38: dup\n         39: iconst_0\n-        40: getstatic     #15                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+        40: getstatic     #51                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n         43: aastore\n-        44: invokestatic  #16                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+        44: invokestatic  #57                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n         47: astore        4\n-        49: ldc           #29                 // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.zip\n-        51: invokestatic  #12                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n+        49: ldc           #110                // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.zip\n+        51: invokestatic  #37                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n         54: astore        5\n         56: aload         5\n-        58: invokevirtual #13                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+        58: invokevirtual #43                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n         61: iconst_1\n-        62: anewarray     #14                 // class java/nio/file/OpenOption\n+        62: anewarray     #49                 // class java/nio/file/OpenOption\n         65: dup\n         66: iconst_0\n-        67: getstatic     #15                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+        67: getstatic     #51                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n         70: aastore\n-        71: invokestatic  #16                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+        71: invokestatic  #57                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n         74: astore        6\n-        76: new           #9                  // class java/util/ArrayList\n+        76: new           #32                 // class java/util/ArrayList\n         79: dup\n-        80: invokespecial #10                 // Method java/util/ArrayList.\"<init>\":()V\n+        80: invokespecial #34                 // Method java/util/ArrayList.\"<init>\":()V\n         83: astore        7\n         85: aload         7\n         87: aload_2\n-        88: invokeinterface #17,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+        88: invokeinterface #63,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n         93: pop\n         94: aload         7\n         96: aload         4\n-        98: invokeinterface #17,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+        98: invokeinterface #63,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n        103: pop\n        104: aload         6\n        106: aload         7\n-       108: invokestatic  #26                 // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels:(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n+       108: invokestatic  #103                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels:(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n        111: astore        8\n        113: aload         8\n-       115: instanceof    #6                  // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n-       118: invokestatic  #30                 // Method org/junit/Assert.assertTrue:(Z)V\n+       115: instanceof    #25                 // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+       118: invokestatic  #112                // Method org/junit/Assert.assertTrue:(Z)V\n        121: iconst_3\n-       122: anewarray     #22                 // class java/nio/channels/SeekableByteChannel\n+       122: anewarray     #87                 // class java/nio/channels/SeekableByteChannel\n        125: dup\n        126: iconst_0\n        127: aload_2\n        128: aastore\n        129: dup\n        130: iconst_1\n        131: aload         4\n        133: aastore\n        134: dup\n        135: iconst_2\n        136: aload         6\n        138: aastore\n-       139: invokestatic  #25                 // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels:([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n+       139: invokestatic  #99                 // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels:([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n        142: astore        8\n        144: aload         8\n-       146: instanceof    #6                  // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n-       149: invokestatic  #30                 // Method org/junit/Assert.assertTrue:(Z)V\n+       146: instanceof    #25                 // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+       149: invokestatic  #112                // Method org/junit/Assert.assertTrue:(Z)V\n        152: return\n       LineNumberTable:\n         line 80: 0\n         line 81: 6\n         line 83: 24\n         line 84: 30\n         line 86: 49\n@@ -548,161 +548,161 @@\n           113      40     8 channel   Ljava/nio/channels/SeekableByteChannel;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n            85      68     7 channels   Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n     Exceptions:\n       throws java.io.IOException\n     RuntimeVisibleAnnotations:\n-      0: #61()\n+      0: #162()\n         org.junit.Test\n \n   public void forOrderedSeekableByteChannelsReturnsIdentityForSingleElement() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=3, args_size=1\n-         0: new           #31                 // class org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n+         0: new           #116                // class org/apache/commons/compress/utils/SeekableInMemoryByteChannel\n          3: dup\n          4: iconst_0\n          5: newarray       byte\n-         7: invokespecial #32                 // Method org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n+         7: invokespecial #118                // Method org/apache/commons/compress/utils/SeekableInMemoryByteChannel.\"<init>\":([B)V\n         10: astore_1\n         11: iconst_1\n-        12: anewarray     #22                 // class java/nio/channels/SeekableByteChannel\n+        12: anewarray     #87                 // class java/nio/channels/SeekableByteChannel\n         15: dup\n         16: iconst_0\n         17: aload_1\n         18: aastore\n-        19: invokestatic  #25                 // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels:([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n+        19: invokestatic  #99                 // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels:([Ljava/nio/channels/SeekableByteChannel;)Ljava/nio/channels/SeekableByteChannel;\n         22: astore_2\n         23: aload_1\n         24: aload_2\n-        25: invokestatic  #33                 // Method org/junit/Assert.assertSame:(Ljava/lang/Object;Ljava/lang/Object;)V\n+        25: invokestatic  #121                // Method org/junit/Assert.assertSame:(Ljava/lang/Object;Ljava/lang/Object;)V\n         28: return\n       LineNumberTable:\n         line 102: 0\n         line 103: 11\n         line 104: 23\n         line 105: 28\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      29     0  this   Lorg/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest;\n            11      18     1 emptyChannel   Ljava/nio/channels/SeekableByteChannel;\n            23       6     2 channel   Ljava/nio/channels/SeekableByteChannel;\n     Exceptions:\n       throws java.io.IOException\n     RuntimeVisibleAnnotations:\n-      0: #61()\n+      0: #162()\n         org.junit.Test\n \n   public void forFilesThrowsOnNullArg() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field thrown:Lorg/junit/rules/ExpectedException;\n-         4: ldc           #4                  // class java/lang/NullPointerException\n-         6: invokevirtual #5                  // Method org/junit/rules/ExpectedException.expect:(Ljava/lang/Class;)V\n+         1: getfield      #13                 // Field thrown:Lorg/junit/rules/ExpectedException;\n+         4: ldc           #19                 // class java/lang/NullPointerException\n+         6: invokevirtual #21                 // Method org/junit/rules/ExpectedException.expect:(Ljava/lang/Class;)V\n          9: aconst_null\n-        10: invokestatic  #34                 // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forFiles:([Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n+        10: invokestatic  #125                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forFiles:([Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n         13: pop\n         14: return\n       LineNumberTable:\n         line 109: 0\n         line 110: 9\n         line 111: 14\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      15     0  this   Lorg/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest;\n     Exceptions:\n       throws java.io.IOException\n     RuntimeVisibleAnnotations:\n-      0: #61()\n+      0: #162()\n         org.junit.Test\n \n   public void forFilesOfTwoParametersThrowsOnNullArg() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field thrown:Lorg/junit/rules/ExpectedException;\n-         4: ldc           #4                  // class java/lang/NullPointerException\n-         6: invokevirtual #5                  // Method org/junit/rules/ExpectedException.expect:(Ljava/lang/Class;)V\n+         1: getfield      #13                 // Field thrown:Lorg/junit/rules/ExpectedException;\n+         4: ldc           #19                 // class java/lang/NullPointerException\n+         6: invokevirtual #21                 // Method org/junit/rules/ExpectedException.expect:(Ljava/lang/Class;)V\n          9: aconst_null\n         10: aconst_null\n-        11: invokestatic  #35                 // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forFiles:(Ljava/io/File;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n+        11: invokestatic  #129                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forFiles:(Ljava/io/File;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n         14: pop\n         15: return\n       LineNumberTable:\n         line 115: 0\n         line 116: 9\n         line 117: 15\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      16     0  this   Lorg/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest;\n     Exceptions:\n       throws java.io.IOException\n     RuntimeVisibleAnnotations:\n-      0: #61()\n+      0: #162()\n         org.junit.Test\n \n   public void forFilesReturnCorrectClass() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=6, args_size=1\n-         0: ldc           #27                 // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z01\n-         2: invokestatic  #12                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n+         0: ldc           #106                // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z01\n+         2: invokestatic  #37                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n          5: astore_1\n-         6: ldc           #28                 // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z02\n-         8: invokestatic  #12                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n+         6: ldc           #108                // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z02\n+         8: invokestatic  #37                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n         11: astore_2\n-        12: ldc           #27                 // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z01\n-        14: invokestatic  #12                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n+        12: ldc           #106                // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z01\n+        14: invokestatic  #37                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n         17: astore_3\n-        18: new           #9                  // class java/util/ArrayList\n+        18: new           #32                 // class java/util/ArrayList\n         21: dup\n-        22: invokespecial #10                 // Method java/util/ArrayList.\"<init>\":()V\n+        22: invokespecial #34                 // Method java/util/ArrayList.\"<init>\":()V\n         25: astore        4\n         27: aload         4\n         29: aload_1\n-        30: invokevirtual #36                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z\n+        30: invokevirtual #132                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z\n         33: pop\n         34: aload         4\n         36: aload_2\n-        37: invokevirtual #36                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z\n+        37: invokevirtual #132                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z\n         40: pop\n         41: aload_3\n         42: aload         4\n-        44: invokestatic  #35                 // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forFiles:(Ljava/io/File;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n+        44: invokestatic  #129                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forFiles:(Ljava/io/File;Ljava/lang/Iterable;)Ljava/nio/channels/SeekableByteChannel;\n         47: astore        5\n         49: aload         5\n-        51: instanceof    #6                  // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n-        54: invokestatic  #30                 // Method org/junit/Assert.assertTrue:(Z)V\n+        51: instanceof    #25                 // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+        54: invokestatic  #112                // Method org/junit/Assert.assertTrue:(Z)V\n         57: iconst_3\n-        58: anewarray     #37                 // class java/io/File\n+        58: anewarray     #44                 // class java/io/File\n         61: dup\n         62: iconst_0\n         63: aload_1\n         64: aastore\n         65: dup\n         66: iconst_1\n         67: aload_2\n         68: aastore\n         69: dup\n         70: iconst_2\n         71: aload_3\n         72: aastore\n-        73: invokestatic  #34                 // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forFiles:([Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n+        73: invokestatic  #125                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.forFiles:([Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n         76: astore        5\n         78: aload         5\n-        80: instanceof    #6                  // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n-        83: invokestatic  #30                 // Method org/junit/Assert.assertTrue:(Z)V\n+        80: instanceof    #25                 // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+        83: invokestatic  #112                // Method org/junit/Assert.assertTrue:(Z)V\n         86: return\n       LineNumberTable:\n         line 121: 0\n         line 122: 6\n         line 123: 12\n         line 125: 18\n         line 126: 27\n@@ -722,103 +722,103 @@\n            49      38     5 channel   Ljava/nio/channels/SeekableByteChannel;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n            27      60     4  list   Ljava/util/ArrayList<Ljava/io/File;>;\n     Exceptions:\n       throws java.io.IOException\n     RuntimeVisibleAnnotations:\n-      0: #61()\n+      0: #162()\n         org.junit.Test\n \n   public void buildFromLastSplitSegmentThrowsOnNotZipFile() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #3                  // Field thrown:Lorg/junit/rules/ExpectedException;\n-         4: ldc           #38                 // class java/lang/IllegalArgumentException\n-         6: invokevirtual #5                  // Method org/junit/rules/ExpectedException.expect:(Ljava/lang/Class;)V\n-         9: ldc           #27                 // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z01\n-        11: invokestatic  #12                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n+         1: getfield      #13                 // Field thrown:Lorg/junit/rules/ExpectedException;\n+         4: ldc           #133                // class java/lang/IllegalArgumentException\n+         6: invokevirtual #21                 // Method org/junit/rules/ExpectedException.expect:(Ljava/lang/Class;)V\n+         9: ldc           #106                // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z01\n+        11: invokestatic  #37                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n         14: astore_1\n         15: aload_1\n-        16: invokestatic  #39                 // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment:(Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n+        16: invokestatic  #135                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment:(Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n         19: pop\n         20: return\n       LineNumberTable:\n         line 138: 0\n         line 139: 9\n         line 140: 15\n         line 141: 20\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      21     0  this   Lorg/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest;\n            15       6     1 lastFile   Ljava/io/File;\n     Exceptions:\n       throws java.io.IOException\n     RuntimeVisibleAnnotations:\n-      0: #61()\n+      0: #162()\n         org.junit.Test\n \n   public void positionToSomeZipSplitSegment() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=13, args_size=1\n-         0: ldc           #27                 // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z01\n-         2: invokestatic  #12                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n+         0: ldc           #106                // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z01\n+         2: invokestatic  #37                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n          5: astore_1\n          6: aload_1\n-         7: invokevirtual #40                 // Method java/io/File.length:()J\n+         7: invokevirtual #139                // Method java/io/File.length:()J\n         10: l2i\n         11: istore_2\n-        12: ldc           #28                 // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z02\n-        14: invokestatic  #12                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n+        12: ldc           #108                // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z02\n+        14: invokestatic  #37                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n         17: astore_3\n         18: aload_3\n-        19: invokevirtual #40                 // Method java/io/File.length:()J\n+        19: invokevirtual #139                // Method java/io/File.length:()J\n         22: l2i\n         23: istore        4\n-        25: ldc           #29                 // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.zip\n-        27: invokestatic  #12                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n+        25: ldc           #110                // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.zip\n+        27: invokestatic  #37                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n         30: astore        5\n         32: aload         5\n-        34: invokevirtual #40                 // Method java/io/File.length:()J\n+        34: invokevirtual #139                // Method java/io/File.length:()J\n         37: l2i\n         38: istore        6\n-        40: new           #41                 // class java/util/Random\n+        40: new           #142                // class java/util/Random\n         43: dup\n-        44: invokespecial #42                 // Method java/util/Random.\"<init>\":()V\n+        44: invokespecial #144                // Method java/util/Random.\"<init>\":()V\n         47: astore        7\n         49: aload         7\n         51: iconst_3\n-        52: invokevirtual #43                 // Method java/util/Random.nextInt:(I)I\n+        52: invokevirtual #145                // Method java/util/Random.nextInt:(I)I\n         55: istore        8\n         57: iload         8\n         59: iconst_2\n         60: if_icmpge     72\n         63: aload         7\n         65: iload_2\n-        66: invokevirtual #43                 // Method java/util/Random.nextInt:(I)I\n+        66: invokevirtual #145                // Method java/util/Random.nextInt:(I)I\n         69: goto          79\n         72: aload         7\n         74: iload         6\n-        76: invokevirtual #43                 // Method java/util/Random.nextInt:(I)I\n+        76: invokevirtual #145                // Method java/util/Random.nextInt:(I)I\n         79: istore        9\n         81: aload         5\n-        83: invokestatic  #39                 // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment:(Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n-        86: checkcast     #6                  // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n+        83: invokestatic  #135                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment:(Ljava/io/File;)Ljava/nio/channels/SeekableByteChannel;\n+        86: checkcast     #25                 // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel\n         89: astore        10\n         91: aload         10\n         93: iload         8\n         95: i2l\n         96: iload         9\n         98: i2l\n-        99: invokevirtual #44                 // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n+        99: invokevirtual #149                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;\n        102: pop\n        103: iload         9\n        105: i2l\n        106: lstore        11\n        108: lload         11\n        110: iload         8\n        112: ifle          120\n@@ -836,16 +836,16 @@\n        134: i2l\n        135: goto          139\n        138: lconst_0\n        139: ladd\n        140: lstore        11\n        142: lload         11\n        144: aload         10\n-       146: invokevirtual #45                 // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:()J\n-       149: invokestatic  #24                 // Method org/junit/Assert.assertEquals:(JJ)V\n+       146: invokevirtual #152                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:()J\n+       149: invokestatic  #93                 // Method org/junit/Assert.assertEquals:(JJ)V\n        152: return\n       LineNumberTable:\n         line 145: 0\n         line 146: 6\n         line 148: 12\n         line 149: 18\n         line 151: 25\n@@ -894,70 +894,70 @@\n         frame_type = 255 /* full_frame */\n           offset_delta = 0\n           locals = [ class org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest, class java/io/File, int, class java/io/File, int, class java/io/File, int, class java/util/Random, int, int, class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel, long ]\n           stack = [ long, long ]\n     Exceptions:\n       throws java.io.IOException\n     RuntimeVisibleAnnotations:\n-      0: #61()\n+      0: #162()\n         org.junit.Test\n \n   private java.util.List<java.nio.channels.SeekableByteChannel> getSplitZipChannels() throws java.io.IOException;\n     descriptor: ()Ljava/util/List;\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=6, locals=5, args_size=1\n-         0: new           #9                  // class java/util/ArrayList\n+         0: new           #32                 // class java/util/ArrayList\n          3: dup\n-         4: invokespecial #10                 // Method java/util/ArrayList.\"<init>\":()V\n+         4: invokespecial #34                 // Method java/util/ArrayList.\"<init>\":()V\n          7: astore_1\n-         8: ldc           #27                 // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z01\n-        10: invokestatic  #12                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n+         8: ldc           #106                // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z01\n+        10: invokestatic  #37                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n         13: astore_2\n         14: aload_1\n         15: aload_2\n-        16: invokevirtual #13                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+        16: invokevirtual #43                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n         19: iconst_1\n-        20: anewarray     #14                 // class java/nio/file/OpenOption\n+        20: anewarray     #49                 // class java/nio/file/OpenOption\n         23: dup\n         24: iconst_0\n-        25: getstatic     #15                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+        25: getstatic     #51                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n         28: aastore\n-        29: invokestatic  #16                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-        32: invokeinterface #17,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+        29: invokestatic  #57                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+        32: invokeinterface #63,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n         37: pop\n-        38: ldc           #28                 // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z02\n-        40: invokestatic  #12                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n+        38: ldc           #108                // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.z02\n+        40: invokestatic  #37                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n         43: astore_3\n         44: aload_1\n         45: aload_3\n-        46: invokevirtual #13                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+        46: invokevirtual #43                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n         49: iconst_1\n-        50: anewarray     #14                 // class java/nio/file/OpenOption\n+        50: anewarray     #49                 // class java/nio/file/OpenOption\n         53: dup\n         54: iconst_0\n-        55: getstatic     #15                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+        55: getstatic     #51                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n         58: aastore\n-        59: invokestatic  #16                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-        62: invokeinterface #17,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+        59: invokestatic  #57                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+        62: invokeinterface #63,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n         67: pop\n-        68: ldc           #29                 // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.zip\n-        70: invokestatic  #12                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n+        68: ldc           #110                // String COMPRESS-477/split_zip_created_by_zip/split_zip_created_by_zip.zip\n+        70: invokestatic  #37                 // Method org/apache/commons/compress/AbstractTestCase.getFile:(Ljava/lang/String;)Ljava/io/File;\n         73: astore        4\n         75: aload_1\n         76: aload         4\n-        78: invokevirtual #13                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n+        78: invokevirtual #43                 // Method java/io/File.toPath:()Ljava/nio/file/Path;\n         81: iconst_1\n-        82: anewarray     #14                 // class java/nio/file/OpenOption\n+        82: anewarray     #49                 // class java/nio/file/OpenOption\n         85: dup\n         86: iconst_0\n-        87: getstatic     #15                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n+        87: getstatic     #51                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;\n         90: aastore\n-        91: invokestatic  #16                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n-        94: invokeinterface #17,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n+        91: invokestatic  #57                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;\n+        94: invokeinterface #63,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z\n         99: pop\n        100: aload_1\n        101: areturn\n       LineNumberTable:\n         line 169: 0\n         line 170: 8\n         line 171: 14\n@@ -974,10 +974,10 @@\n            44      58     3 file2   Ljava/io/File;\n            75      27     4 lastFile   Ljava/io/File;\n       LocalVariableTypeTable:\n         Start  Length  Slot  Name   Signature\n             8      94     1 channels   Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n     Exceptions:\n       throws java.io.IOException\n-    Signature: #110                         // ()Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n+    Signature: #207                         // ()Ljava/util/List<Ljava/nio/channels/SeekableByteChannel;>;\n }\n SourceFile: \"ZipSplitReadOnlySeekableByteChannelTest.java\"\n"}]}
