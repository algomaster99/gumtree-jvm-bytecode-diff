{"diffoscope-json-version": 1, "source1": "first/ZCompressorInputStream.class", "source2": "second/ZCompressorInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,177 +1,177 @@\n-  SHA-256 checksum d8de0eb908a8dd76a77dbd81687427d5dff9f40a12bae00a752cdb32f614bfd4\n+  SHA-256 checksum 901bb295caf1d033d7f4dc1c62982f717887bb7364ab85dbded2322b462b2e63\n   Compiled from \"ZCompressorInputStream.java\"\n public class org.apache.commons.compress.compressors.z.ZCompressorInputStream extends org.apache.commons.compress.compressors.lzw.LZWInputStream\n   minor version: 0\n   major version: 53\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #5                          // org/apache/commons/compress/compressors/z/ZCompressorInputStream\n-  super_class: #11                        // org/apache/commons/compress/compressors/lzw/LZWInputStream\n+  this_class: #14                         // org/apache/commons/compress/compressors/z/ZCompressorInputStream\n+  super_class: #8                         // org/apache/commons/compress/compressors/lzw/LZWInputStream\n   interfaces: 0, fields: 7, methods: 8, attributes: 1\n Constant pool:\n-    #1 = Fieldref           #92.#93       // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-    #2 = Methodref          #11.#94       // org/apache/commons/compress/compressors/lzw/LZWInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-    #3 = Fieldref           #5.#95        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.in:Lorg/apache/commons/compress/utils/BitInputStream;\n-    #4 = Methodref          #96.#97       // org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n-    #5 = Class              #98           // org/apache/commons/compress/compressors/z/ZCompressorInputStream\n-    #6 = Class              #99           // java/io/IOException\n-    #7 = String             #100          // Input is not in .Z format\n-    #8 = Methodref          #6.#101       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-    #9 = Fieldref           #5.#102       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.blockMode:Z\n-   #10 = Fieldref           #5.#103       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.maxCodeSize:I\n-   #11 = Class              #104          // org/apache/commons/compress/compressors/lzw/LZWInputStream\n-   #12 = Methodref          #5.#105       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.setClearCode:(I)V\n-   #13 = Methodref          #5.#106       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.initializeTables:(II)V\n-   #14 = Methodref          #5.#107       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.clearEntries:()V\n-   #15 = Methodref          #5.#108       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-   #16 = Methodref          #5.#109       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.setTableSize:(I)V\n-   #17 = Methodref          #11.#110      // org/apache/commons/compress/compressors/lzw/LZWInputStream.readNextCode:()I\n-   #18 = Fieldref           #5.#111       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.totalCodesRead:J\n-   #19 = Long               8l\n-   #21 = Methodref          #5.#110       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.readNextCode:()I\n-   #22 = Methodref          #96.#112      // org/apache/commons/compress/utils/BitInputStream.clearBitCache:()V\n-   #23 = Methodref          #5.#113       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.getCodeSize:()I\n-   #24 = Methodref          #5.#114       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.addEntry:(IBI)I\n-   #25 = Methodref          #5.#115       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.getTableSize:()I\n-   #26 = Methodref          #5.#116       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.reAlignReading:()V\n-   #27 = Methodref          #5.#117       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.incrementCodeSize:()V\n-   #28 = Methodref          #5.#118       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.getClearCode:()I\n-   #29 = Methodref          #5.#119       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.resetCodeSize:()V\n-   #30 = Methodref          #5.#120       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.resetPreviousCode:()V\n-   #31 = Methodref          #5.#121       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.addRepeatOfPreviousCode:()I\n-   #32 = String             #122          // Invalid %d bit code 0x%x\n-   #33 = Class              #123          // java/lang/Object\n-   #34 = Methodref          #124.#125     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #35 = Methodref          #126.#127     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-   #36 = Methodref          #5.#128       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.expandCodeToOutputStack:(IZ)I\n-   #37 = Utf8               MAGIC_1\n-   #38 = Utf8               I\n-   #39 = Utf8               ConstantValue\n-   #40 = Integer            31\n-   #41 = Utf8               MAGIC_2\n-   #42 = Integer            157\n-   #43 = Utf8               BLOCK_MODE_MASK\n-   #44 = Integer            128\n-   #45 = Utf8               MAX_CODE_SIZE_MASK\n-   #46 = Utf8               blockMode\n-   #47 = Utf8               Z\n-   #48 = Utf8               maxCodeSize\n-   #49 = Utf8               totalCodesRead\n-   #50 = Utf8               J\n-   #51 = Utf8               <init>\n-   #52 = Utf8               (Ljava/io/InputStream;I)V\n-   #53 = Utf8               Code\n-   #54 = Utf8               LineNumberTable\n-   #55 = Utf8               LocalVariableTable\n-   #56 = Utf8               this\n-   #57 = Utf8               Lorg/apache/commons/compress/compressors/z/ZCompressorInputStream;\n-   #58 = Utf8               inputStream\n-   #59 = Utf8               Ljava/io/InputStream;\n-   #60 = Utf8               memoryLimitInKb\n-   #61 = Utf8               firstByte\n-   #62 = Utf8               secondByte\n-   #63 = Utf8               thirdByte\n-   #64 = Utf8               StackMapTable\n-   #65 = Class              #129          // java/io/InputStream\n-   #66 = Utf8               Exceptions\n-   #67 = Utf8               (Ljava/io/InputStream;)V\n-   #68 = Utf8               clearEntries\n-   #69 = Utf8               ()V\n-   #70 = Utf8               readNextCode\n-   #71 = Utf8               ()I\n-   #72 = Utf8               code\n-   #73 = Utf8               reAlignReading\n-   #74 = Utf8               i\n-   #75 = Utf8               codeReadsToThrowAway\n-   #76 = Utf8               addEntry\n-   #77 = Utf8               (IB)I\n-   #78 = Utf8               previousCode\n-   #79 = Utf8               character\n-   #80 = Utf8               B\n-   #81 = Utf8               maxTableSize\n-   #82 = Utf8               r\n-   #83 = Utf8               decompressNextSymbol\n-   #84 = Utf8               addedUnfinishedEntry\n-   #85 = Utf8               matches\n-   #86 = Utf8               ([BI)Z\n-   #87 = Utf8               signature\n-   #88 = Utf8               [B\n-   #89 = Utf8               length\n-   #90 = Utf8               SourceFile\n-   #91 = Utf8               ZCompressorInputStream.java\n-   #92 = Class              #130          // java/nio/ByteOrder\n-   #93 = NameAndType        #131:#132     // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-   #94 = NameAndType        #51:#133      // \"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-   #95 = NameAndType        #134:#135     // in:Lorg/apache/commons/compress/utils/BitInputStream;\n-   #96 = Class              #136          // org/apache/commons/compress/utils/BitInputStream\n-   #97 = NameAndType        #137:#138     // readBits:(I)J\n-   #98 = Utf8               org/apache/commons/compress/compressors/z/ZCompressorInputStream\n-   #99 = Utf8               java/io/IOException\n-  #100 = Utf8               Input is not in .Z format\n-  #101 = NameAndType        #51:#139      // \"<init>\":(Ljava/lang/String;)V\n-  #102 = NameAndType        #46:#47       // blockMode:Z\n-  #103 = NameAndType        #48:#38       // maxCodeSize:I\n-  #104 = Utf8               org/apache/commons/compress/compressors/lzw/LZWInputStream\n-  #105 = NameAndType        #140:#141     // setClearCode:(I)V\n-  #106 = NameAndType        #142:#143     // initializeTables:(II)V\n-  #107 = NameAndType        #68:#69       // clearEntries:()V\n-  #108 = NameAndType        #51:#52       // \"<init>\":(Ljava/io/InputStream;I)V\n-  #109 = NameAndType        #144:#141     // setTableSize:(I)V\n-  #110 = NameAndType        #70:#71       // readNextCode:()I\n-  #111 = NameAndType        #49:#50       // totalCodesRead:J\n-  #112 = NameAndType        #145:#69      // clearBitCache:()V\n-  #113 = NameAndType        #146:#71      // getCodeSize:()I\n-  #114 = NameAndType        #76:#147      // addEntry:(IBI)I\n-  #115 = NameAndType        #148:#71      // getTableSize:()I\n-  #116 = NameAndType        #73:#69       // reAlignReading:()V\n-  #117 = NameAndType        #149:#69      // incrementCodeSize:()V\n-  #118 = NameAndType        #150:#71      // getClearCode:()I\n-  #119 = NameAndType        #151:#69      // resetCodeSize:()V\n-  #120 = NameAndType        #152:#69      // resetPreviousCode:()V\n-  #121 = NameAndType        #153:#71      // addRepeatOfPreviousCode:()I\n-  #122 = Utf8               Invalid %d bit code 0x%x\n-  #123 = Utf8               java/lang/Object\n-  #124 = Class              #154          // java/lang/Integer\n-  #125 = NameAndType        #155:#156     // valueOf:(I)Ljava/lang/Integer;\n-  #126 = Class              #157          // java/lang/String\n-  #127 = NameAndType        #158:#159     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #128 = NameAndType        #160:#161     // expandCodeToOutputStack:(IZ)I\n-  #129 = Utf8               java/io/InputStream\n-  #130 = Utf8               java/nio/ByteOrder\n-  #131 = Utf8               LITTLE_ENDIAN\n-  #132 = Utf8               Ljava/nio/ByteOrder;\n-  #133 = Utf8               (Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-  #134 = Utf8               in\n-  #135 = Utf8               Lorg/apache/commons/compress/utils/BitInputStream;\n-  #136 = Utf8               org/apache/commons/compress/utils/BitInputStream\n-  #137 = Utf8               readBits\n-  #138 = Utf8               (I)J\n-  #139 = Utf8               (Ljava/lang/String;)V\n-  #140 = Utf8               setClearCode\n-  #141 = Utf8               (I)V\n-  #142 = Utf8               initializeTables\n-  #143 = Utf8               (II)V\n-  #144 = Utf8               setTableSize\n-  #145 = Utf8               clearBitCache\n-  #146 = Utf8               getCodeSize\n-  #147 = Utf8               (IBI)I\n-  #148 = Utf8               getTableSize\n-  #149 = Utf8               incrementCodeSize\n-  #150 = Utf8               getClearCode\n-  #151 = Utf8               resetCodeSize\n-  #152 = Utf8               resetPreviousCode\n-  #153 = Utf8               addRepeatOfPreviousCode\n-  #154 = Utf8               java/lang/Integer\n-  #155 = Utf8               valueOf\n-  #156 = Utf8               (I)Ljava/lang/Integer;\n-  #157 = Utf8               java/lang/String\n-  #158 = Utf8               format\n-  #159 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #160 = Utf8               expandCodeToOutputStack\n-  #161 = Utf8               (IZ)I\n+    #1 = Fieldref           #2.#3         // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+    #2 = Class              #4            // java/nio/ByteOrder\n+    #3 = NameAndType        #5:#6         // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+    #4 = Utf8               java/nio/ByteOrder\n+    #5 = Utf8               LITTLE_ENDIAN\n+    #6 = Utf8               Ljava/nio/ByteOrder;\n+    #7 = Methodref          #8.#9         // org/apache/commons/compress/compressors/lzw/LZWInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+    #8 = Class              #10           // org/apache/commons/compress/compressors/lzw/LZWInputStream\n+    #9 = NameAndType        #11:#12       // \"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+   #10 = Utf8               org/apache/commons/compress/compressors/lzw/LZWInputStream\n+   #11 = Utf8               <init>\n+   #12 = Utf8               (Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+   #13 = Fieldref           #14.#15       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.in:Lorg/apache/commons/compress/utils/BitInputStream;\n+   #14 = Class              #16           // org/apache/commons/compress/compressors/z/ZCompressorInputStream\n+   #15 = NameAndType        #17:#18       // in:Lorg/apache/commons/compress/utils/BitInputStream;\n+   #16 = Utf8               org/apache/commons/compress/compressors/z/ZCompressorInputStream\n+   #17 = Utf8               in\n+   #18 = Utf8               Lorg/apache/commons/compress/utils/BitInputStream;\n+   #19 = Methodref          #20.#21       // org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n+   #20 = Class              #22           // org/apache/commons/compress/utils/BitInputStream\n+   #21 = NameAndType        #23:#24       // readBits:(I)J\n+   #22 = Utf8               org/apache/commons/compress/utils/BitInputStream\n+   #23 = Utf8               readBits\n+   #24 = Utf8               (I)J\n+   #25 = Class              #26           // java/io/IOException\n+   #26 = Utf8               java/io/IOException\n+   #27 = String             #28           // Input is not in .Z format\n+   #28 = Utf8               Input is not in .Z format\n+   #29 = Methodref          #25.#30       // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #30 = NameAndType        #11:#31       // \"<init>\":(Ljava/lang/String;)V\n+   #31 = Utf8               (Ljava/lang/String;)V\n+   #32 = Fieldref           #14.#33       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.blockMode:Z\n+   #33 = NameAndType        #34:#35       // blockMode:Z\n+   #34 = Utf8               blockMode\n+   #35 = Utf8               Z\n+   #36 = Fieldref           #14.#37       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.maxCodeSize:I\n+   #37 = NameAndType        #38:#39       // maxCodeSize:I\n+   #38 = Utf8               maxCodeSize\n+   #39 = Utf8               I\n+   #40 = Methodref          #14.#41       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.setClearCode:(I)V\n+   #41 = NameAndType        #42:#43       // setClearCode:(I)V\n+   #42 = Utf8               setClearCode\n+   #43 = Utf8               (I)V\n+   #44 = Methodref          #14.#45       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.initializeTables:(II)V\n+   #45 = NameAndType        #46:#47       // initializeTables:(II)V\n+   #46 = Utf8               initializeTables\n+   #47 = Utf8               (II)V\n+   #48 = Methodref          #14.#49       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.clearEntries:()V\n+   #49 = NameAndType        #50:#51       // clearEntries:()V\n+   #50 = Utf8               clearEntries\n+   #51 = Utf8               ()V\n+   #52 = Methodref          #14.#53       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+   #53 = NameAndType        #11:#54       // \"<init>\":(Ljava/io/InputStream;I)V\n+   #54 = Utf8               (Ljava/io/InputStream;I)V\n+   #55 = Methodref          #14.#56       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.setTableSize:(I)V\n+   #56 = NameAndType        #57:#43       // setTableSize:(I)V\n+   #57 = Utf8               setTableSize\n+   #58 = Methodref          #8.#59        // org/apache/commons/compress/compressors/lzw/LZWInputStream.readNextCode:()I\n+   #59 = NameAndType        #60:#61       // readNextCode:()I\n+   #60 = Utf8               readNextCode\n+   #61 = Utf8               ()I\n+   #62 = Fieldref           #14.#63       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.totalCodesRead:J\n+   #63 = NameAndType        #64:#65       // totalCodesRead:J\n+   #64 = Utf8               totalCodesRead\n+   #65 = Utf8               J\n+   #66 = Long               8l\n+   #68 = Methodref          #14.#59       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.readNextCode:()I\n+   #69 = Methodref          #20.#70       // org/apache/commons/compress/utils/BitInputStream.clearBitCache:()V\n+   #70 = NameAndType        #71:#51       // clearBitCache:()V\n+   #71 = Utf8               clearBitCache\n+   #72 = Methodref          #14.#73       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.getCodeSize:()I\n+   #73 = NameAndType        #74:#61       // getCodeSize:()I\n+   #74 = Utf8               getCodeSize\n+   #75 = Methodref          #14.#76       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.addEntry:(IBI)I\n+   #76 = NameAndType        #77:#78       // addEntry:(IBI)I\n+   #77 = Utf8               addEntry\n+   #78 = Utf8               (IBI)I\n+   #79 = Methodref          #14.#80       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.getTableSize:()I\n+   #80 = NameAndType        #81:#61       // getTableSize:()I\n+   #81 = Utf8               getTableSize\n+   #82 = Methodref          #14.#83       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.reAlignReading:()V\n+   #83 = NameAndType        #84:#51       // reAlignReading:()V\n+   #84 = Utf8               reAlignReading\n+   #85 = Methodref          #14.#86       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.incrementCodeSize:()V\n+   #86 = NameAndType        #87:#51       // incrementCodeSize:()V\n+   #87 = Utf8               incrementCodeSize\n+   #88 = Methodref          #14.#89       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.getClearCode:()I\n+   #89 = NameAndType        #90:#61       // getClearCode:()I\n+   #90 = Utf8               getClearCode\n+   #91 = Methodref          #14.#92       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.resetCodeSize:()V\n+   #92 = NameAndType        #93:#51       // resetCodeSize:()V\n+   #93 = Utf8               resetCodeSize\n+   #94 = Methodref          #14.#95       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.resetPreviousCode:()V\n+   #95 = NameAndType        #96:#51       // resetPreviousCode:()V\n+   #96 = Utf8               resetPreviousCode\n+   #97 = Methodref          #14.#98       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.addRepeatOfPreviousCode:()I\n+   #98 = NameAndType        #99:#61       // addRepeatOfPreviousCode:()I\n+   #99 = Utf8               addRepeatOfPreviousCode\n+  #100 = String             #101          // Invalid %d bit code 0x%x\n+  #101 = Utf8               Invalid %d bit code 0x%x\n+  #102 = Class              #103          // java/lang/Object\n+  #103 = Utf8               java/lang/Object\n+  #104 = Methodref          #105.#106     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+  #105 = Class              #107          // java/lang/Integer\n+  #106 = NameAndType        #108:#109     // valueOf:(I)Ljava/lang/Integer;\n+  #107 = Utf8               java/lang/Integer\n+  #108 = Utf8               valueOf\n+  #109 = Utf8               (I)Ljava/lang/Integer;\n+  #110 = Methodref          #111.#112     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #111 = Class              #113          // java/lang/String\n+  #112 = NameAndType        #114:#115     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #113 = Utf8               java/lang/String\n+  #114 = Utf8               format\n+  #115 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #116 = Methodref          #14.#117      // org/apache/commons/compress/compressors/z/ZCompressorInputStream.expandCodeToOutputStack:(IZ)I\n+  #117 = NameAndType        #118:#119     // expandCodeToOutputStack:(IZ)I\n+  #118 = Utf8               expandCodeToOutputStack\n+  #119 = Utf8               (IZ)I\n+  #120 = Utf8               MAGIC_1\n+  #121 = Utf8               ConstantValue\n+  #122 = Integer            31\n+  #123 = Utf8               MAGIC_2\n+  #124 = Integer            157\n+  #125 = Utf8               BLOCK_MODE_MASK\n+  #126 = Integer            128\n+  #127 = Utf8               MAX_CODE_SIZE_MASK\n+  #128 = Utf8               Code\n+  #129 = Utf8               LineNumberTable\n+  #130 = Utf8               LocalVariableTable\n+  #131 = Utf8               this\n+  #132 = Utf8               Lorg/apache/commons/compress/compressors/z/ZCompressorInputStream;\n+  #133 = Utf8               inputStream\n+  #134 = Utf8               Ljava/io/InputStream;\n+  #135 = Utf8               memoryLimitInKb\n+  #136 = Utf8               firstByte\n+  #137 = Utf8               secondByte\n+  #138 = Utf8               thirdByte\n+  #139 = Utf8               StackMapTable\n+  #140 = Class              #141          // java/io/InputStream\n+  #141 = Utf8               java/io/InputStream\n+  #142 = Utf8               Exceptions\n+  #143 = Utf8               (Ljava/io/InputStream;)V\n+  #144 = Utf8               code\n+  #145 = Utf8               i\n+  #146 = Utf8               codeReadsToThrowAway\n+  #147 = Utf8               (IB)I\n+  #148 = Utf8               previousCode\n+  #149 = Utf8               character\n+  #150 = Utf8               B\n+  #151 = Utf8               maxTableSize\n+  #152 = Utf8               r\n+  #153 = Utf8               decompressNextSymbol\n+  #154 = Utf8               addedUnfinishedEntry\n+  #155 = Utf8               matches\n+  #156 = Utf8               ([BI)Z\n+  #157 = Utf8               signature\n+  #158 = Utf8               [B\n+  #159 = Utf8               length\n+  #160 = Utf8               SourceFile\n+  #161 = Utf8               ZCompressorInputStream.java\n {\n   private static final int MAGIC_1 = 31;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 31\n \n   private static final int MAGIC_2 = 157;\n@@ -205,73 +205,73 @@\n     descriptor: (Ljava/io/InputStream;I)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=6, args_size=3\n          0: aload_0\n          1: aload_1\n          2: getstatic     #1                  // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-         5: invokespecial #2                  // Method org/apache/commons/compress/compressors/lzw/LZWInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+         5: invokespecial #7                  // Method org/apache/commons/compress/compressors/lzw/LZWInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n          8: aload_0\n-         9: getfield      #3                  // Field in:Lorg/apache/commons/compress/utils/BitInputStream;\n+         9: getfield      #13                 // Field in:Lorg/apache/commons/compress/utils/BitInputStream;\n         12: bipush        8\n-        14: invokevirtual #4                  // Method org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n+        14: invokevirtual #19                 // Method org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n         17: l2i\n         18: istore_3\n         19: aload_0\n-        20: getfield      #3                  // Field in:Lorg/apache/commons/compress/utils/BitInputStream;\n+        20: getfield      #13                 // Field in:Lorg/apache/commons/compress/utils/BitInputStream;\n         23: bipush        8\n-        25: invokevirtual #4                  // Method org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n+        25: invokevirtual #19                 // Method org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n         28: l2i\n         29: istore        4\n         31: aload_0\n-        32: getfield      #3                  // Field in:Lorg/apache/commons/compress/utils/BitInputStream;\n+        32: getfield      #13                 // Field in:Lorg/apache/commons/compress/utils/BitInputStream;\n         35: bipush        8\n-        37: invokevirtual #4                  // Method org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n+        37: invokevirtual #19                 // Method org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n         40: l2i\n         41: istore        5\n         43: iload_3\n         44: bipush        31\n         46: if_icmpne     62\n         49: iload         4\n         51: sipush        157\n         54: if_icmpne     62\n         57: iload         5\n         59: ifge          72\n-        62: new           #6                  // class java/io/IOException\n+        62: new           #25                 // class java/io/IOException\n         65: dup\n-        66: ldc           #7                  // String Input is not in .Z format\n-        68: invokespecial #8                  // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        66: ldc           #27                 // String Input is not in .Z format\n+        68: invokespecial #29                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         71: athrow\n         72: aload_0\n         73: iload         5\n         75: sipush        128\n         78: iand\n         79: ifeq          86\n         82: iconst_1\n         83: goto          87\n         86: iconst_0\n-        87: putfield      #9                  // Field blockMode:Z\n+        87: putfield      #32                 // Field blockMode:Z\n         90: aload_0\n         91: iload         5\n         93: bipush        31\n         95: iand\n-        96: putfield      #10                 // Field maxCodeSize:I\n+        96: putfield      #36                 // Field maxCodeSize:I\n         99: aload_0\n-       100: getfield      #9                  // Field blockMode:Z\n+       100: getfield      #32                 // Field blockMode:Z\n        103: ifeq          112\n        106: aload_0\n        107: bipush        9\n-       109: invokevirtual #12                 // Method setClearCode:(I)V\n+       109: invokevirtual #40                 // Method setClearCode:(I)V\n        112: aload_0\n        113: aload_0\n-       114: getfield      #10                 // Field maxCodeSize:I\n+       114: getfield      #36                 // Field maxCodeSize:I\n        117: iload_2\n-       118: invokevirtual #13                 // Method initializeTables:(II)V\n+       118: invokevirtual #44                 // Method initializeTables:(II)V\n        121: aload_0\n-       122: invokespecial #14                 // Method clearEntries:()V\n+       122: invokespecial #48                 // Method clearEntries:()V\n        125: return\n       LineNumberTable:\n         line 43: 0\n         line 44: 8\n         line 45: 19\n         line 46: 31\n         line 47: 43\n@@ -311,15 +311,15 @@\n     descriptor: (Ljava/io/InputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_m1\n-         3: invokespecial #15                 // Method \"<init>\":(Ljava/io/InputStream;I)V\n+         3: invokespecial #52                 // Method \"<init>\":(Ljava/io/InputStream;I)V\n          6: return\n       LineNumberTable:\n         line 60: 0\n         line 61: 6\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0  this   Lorg/apache/commons/compress/compressors/z/ZCompressorInputStream;\n@@ -331,21 +331,21 @@\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=3, locals=1, args_size=1\n          0: aload_0\n          1: sipush        256\n          4: aload_0\n-         5: getfield      #9                  // Field blockMode:Z\n+         5: getfield      #32                 // Field blockMode:Z\n          8: ifeq          15\n         11: iconst_1\n         12: goto          16\n         15: iconst_0\n         16: iadd\n-        17: invokevirtual #16                 // Method setTableSize:(I)V\n+        17: invokevirtual #55                 // Method setTableSize:(I)V\n         20: return\n       LineNumberTable:\n         line 64: 0\n         line 65: 20\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      21     0  this   Lorg/apache/commons/compress/compressors/z/ZCompressorInputStream;\n@@ -361,24 +361,24 @@\n \n   protected int readNextCode() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=5, locals=2, args_size=1\n          0: aload_0\n-         1: invokespecial #17                 // Method org/apache/commons/compress/compressors/lzw/LZWInputStream.readNextCode:()I\n+         1: invokespecial #58                 // Method org/apache/commons/compress/compressors/lzw/LZWInputStream.readNextCode:()I\n          4: istore_1\n          5: iload_1\n          6: iflt          19\n          9: aload_0\n         10: dup\n-        11: getfield      #18                 // Field totalCodesRead:J\n+        11: getfield      #62                 // Field totalCodesRead:J\n         14: lconst_1\n         15: ladd\n-        16: putfield      #18                 // Field totalCodesRead:J\n+        16: putfield      #62                 // Field totalCodesRead:J\n         19: iload_1\n         20: ireturn\n       LineNumberTable:\n         line 75: 0\n         line 76: 5\n         line 77: 9\n         line 79: 19\n@@ -394,44 +394,44 @@\n       throws java.io.IOException\n \n   private void reAlignReading() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=6, locals=5, args_size=1\n-         0: ldc2_w        #19                 // long 8l\n+         0: ldc2_w        #66                 // long 8l\n          3: aload_0\n-         4: getfield      #18                 // Field totalCodesRead:J\n-         7: ldc2_w        #19                 // long 8l\n+         4: getfield      #62                 // Field totalCodesRead:J\n+         7: ldc2_w        #66                 // long 8l\n         10: lrem\n         11: lsub\n         12: lstore_1\n         13: lload_1\n-        14: ldc2_w        #19                 // long 8l\n+        14: ldc2_w        #66                 // long 8l\n         17: lcmp\n         18: ifne          23\n         21: lconst_0\n         22: lstore_1\n         23: lconst_0\n         24: lstore_3\n         25: lload_3\n         26: lload_1\n         27: lcmp\n         28: ifge          43\n         31: aload_0\n-        32: invokevirtual #21                 // Method readNextCode:()I\n+        32: invokevirtual #68                 // Method readNextCode:()I\n         35: pop\n         36: lload_3\n         37: lconst_1\n         38: ladd\n         39: lstore_3\n         40: goto          25\n         43: aload_0\n-        44: getfield      #3                  // Field in:Lorg/apache/commons/compress/utils/BitInputStream;\n-        47: invokevirtual #22                 // Method org/apache/commons/compress/utils/BitInputStream.clearBitCache:()V\n+        44: getfield      #13                 // Field in:Lorg/apache/commons/compress/utils/BitInputStream;\n+        47: invokevirtual #69                 // Method org/apache/commons/compress/utils/BitInputStream.clearBitCache:()V\n         50: return\n       LineNumberTable:\n         line 87: 0\n         line 88: 13\n         line 89: 21\n         line 91: 23\n         line 92: 31\n@@ -458,36 +458,36 @@\n   protected int addEntry(int, byte) throws java.io.IOException;\n     descriptor: (IB)I\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=4, locals=5, args_size=3\n          0: iconst_1\n          1: aload_0\n-         2: invokevirtual #23                 // Method getCodeSize:()I\n+         2: invokevirtual #72                 // Method getCodeSize:()I\n          5: ishl\n          6: istore_3\n          7: aload_0\n          8: iload_1\n          9: iload_2\n         10: iload_3\n-        11: invokevirtual #24                 // Method addEntry:(IBI)I\n+        11: invokevirtual #75                 // Method addEntry:(IBI)I\n         14: istore        4\n         16: aload_0\n-        17: invokevirtual #25                 // Method getTableSize:()I\n+        17: invokevirtual #79                 // Method getTableSize:()I\n         20: iload_3\n         21: if_icmpne     43\n         24: aload_0\n-        25: invokevirtual #23                 // Method getCodeSize:()I\n+        25: invokevirtual #72                 // Method getCodeSize:()I\n         28: aload_0\n-        29: getfield      #10                 // Field maxCodeSize:I\n+        29: getfield      #36                 // Field maxCodeSize:I\n         32: if_icmpge     43\n         35: aload_0\n-        36: invokespecial #26                 // Method reAlignReading:()V\n+        36: invokespecial #82                 // Method reAlignReading:()V\n         39: aload_0\n-        40: invokevirtual #27                 // Method incrementCodeSize:()V\n+        40: invokevirtual #85                 // Method incrementCodeSize:()V\n         43: iload         4\n         45: ireturn\n       LineNumberTable:\n         line 105: 0\n         line 106: 7\n         line 107: 16\n         line 108: 35\n@@ -509,76 +509,76 @@\n \n   protected int decompressNextSymbol() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0004) ACC_PROTECTED\n     Code:\n       stack=7, locals=3, args_size=1\n          0: aload_0\n-         1: invokevirtual #21                 // Method readNextCode:()I\n+         1: invokevirtual #68                 // Method readNextCode:()I\n          4: istore_1\n          5: iload_1\n          6: ifge          11\n          9: iconst_m1\n         10: ireturn\n         11: aload_0\n-        12: getfield      #9                  // Field blockMode:Z\n+        12: getfield      #32                 // Field blockMode:Z\n         15: ifeq          44\n         18: iload_1\n         19: aload_0\n-        20: invokevirtual #28                 // Method getClearCode:()I\n+        20: invokevirtual #88                 // Method getClearCode:()I\n         23: if_icmpne     44\n         26: aload_0\n-        27: invokespecial #14                 // Method clearEntries:()V\n+        27: invokespecial #48                 // Method clearEntries:()V\n         30: aload_0\n-        31: invokespecial #26                 // Method reAlignReading:()V\n+        31: invokespecial #82                 // Method reAlignReading:()V\n         34: aload_0\n-        35: invokevirtual #29                 // Method resetCodeSize:()V\n+        35: invokevirtual #91                 // Method resetCodeSize:()V\n         38: aload_0\n-        39: invokevirtual #30                 // Method resetPreviousCode:()V\n+        39: invokevirtual #94                 // Method resetPreviousCode:()V\n         42: iconst_0\n         43: ireturn\n         44: iconst_0\n         45: istore_2\n         46: iload_1\n         47: aload_0\n-        48: invokevirtual #25                 // Method getTableSize:()I\n+        48: invokevirtual #79                 // Method getTableSize:()I\n         51: if_icmpne     64\n         54: aload_0\n-        55: invokevirtual #31                 // Method addRepeatOfPreviousCode:()I\n+        55: invokevirtual #97                 // Method addRepeatOfPreviousCode:()I\n         58: pop\n         59: iconst_1\n         60: istore_2\n         61: goto          106\n         64: iload_1\n         65: aload_0\n-        66: invokevirtual #25                 // Method getTableSize:()I\n+        66: invokevirtual #79                 // Method getTableSize:()I\n         69: if_icmple     106\n-        72: new           #6                  // class java/io/IOException\n+        72: new           #25                 // class java/io/IOException\n         75: dup\n-        76: ldc           #32                 // String Invalid %d bit code 0x%x\n+        76: ldc           #100                // String Invalid %d bit code 0x%x\n         78: iconst_2\n-        79: anewarray     #33                 // class java/lang/Object\n+        79: anewarray     #102                // class java/lang/Object\n         82: dup\n         83: iconst_0\n         84: aload_0\n-        85: invokevirtual #23                 // Method getCodeSize:()I\n-        88: invokestatic  #34                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+        85: invokevirtual #72                 // Method getCodeSize:()I\n+        88: invokestatic  #104                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n         91: aastore\n         92: dup\n         93: iconst_1\n         94: iload_1\n-        95: invokestatic  #34                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+        95: invokestatic  #104                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n         98: aastore\n-        99: invokestatic  #35                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-       102: invokespecial #8                  // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        99: invokestatic  #110                // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+       102: invokespecial #29                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n        105: athrow\n        106: aload_0\n        107: iload_1\n        108: iload_2\n-       109: invokevirtual #36                 // Method expandCodeToOutputStack:(IZ)I\n+       109: invokevirtual #116                // Method expandCodeToOutputStack:(IZ)I\n        112: ireturn\n       LineNumberTable:\n         line 134: 0\n         line 135: 5\n         line 136: 9\n         line 138: 11\n         line 139: 26\n"}]}
