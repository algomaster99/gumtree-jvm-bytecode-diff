{"diffoscope-json-version": 1, "source1": "first/JavadocMissingWhitespaceAfterAsteriskCheck.class", "source2": "second/JavadocMissingWhitespaceAfterAsteriskCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,35 +15,35 @@\n     }\n     \n     public int[] getRequiredJavadocTokens() {\n         return this.getAcceptableJavadocTokens();\n     }\n     \n     public void visitJavadocToken(final DetailNode detailNode) {\n-        DetailNode textNode;\n+        DetailNode detailNode2;\n         if (detailNode.getType() == 10000) {\n-            textNode = JavadocUtil.getFirstChild(detailNode);\n+            detailNode2 = JavadocUtil.getFirstChild(detailNode);\n         }\n         else {\n-            textNode = JavadocUtil.getNextSibling(detailNode);\n+            detailNode2 = JavadocUtil.getNextSibling(detailNode);\n         }\n-        if (textNode != null && textNode.getType() != -1) {\n-            final String text = textNode.getText();\n-            final int lastAsteriskPosition = getLastLeadingAsteriskPosition(text);\n-            if (!isLast(lastAsteriskPosition, text) && !Character.isWhitespace(text.charAt(lastAsteriskPosition + 1))) {\n-                this.log(textNode.getLineNumber(), textNode.getColumnNumber(), \"javadoc.missing.whitespace\", new Object[0]);\n+        if (detailNode2 != null && detailNode2.getType() != -1) {\n+            final String text = detailNode2.getText();\n+            final int lastLeadingAsteriskPosition = getLastLeadingAsteriskPosition(text);\n+            if (!isLast(lastLeadingAsteriskPosition, text) && !Character.isWhitespace(text.charAt(lastLeadingAsteriskPosition + 1))) {\n+                this.log(detailNode2.getLineNumber(), detailNode2.getColumnNumber(), \"javadoc.missing.whitespace\", new Object[0]);\n             }\n         }\n     }\n     \n-    private static boolean isLast(final int position, final String text) {\n-        return position == text.length() - 1;\n+    private static boolean isLast(final int n, final String s) {\n+        return n == s.length() - 1;\n     }\n     \n-    private static int getLastLeadingAsteriskPosition(final String text) {\n-        int index = -1;\n-        for (int i = 0; i < text.length() && text.charAt(i) == '*'; ++i) {\n-            ++index;\n+    private static int getLastLeadingAsteriskPosition(final String s) {\n+        int n = -1;\n+        for (int index = 0; index < s.length() && s.charAt(index) == '*'; ++index) {\n+            ++n;\n         }\n-        return index;\n+        return n;\n     }\n }\n"}]}
