{"diffoscope-json-version": 1, "source1": "first/PropertiesConfiguration$PropertiesReader.class", "source2": "second/PropertiesConfiguration$PropertiesReader.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -17,37 +17,37 @@\n     private static final int IDX_VALUE = 5;\n     private static final int IDX_SEPARATOR = 3;\n     private final List<String> commentLines;\n     private String propertyName;\n     private String propertyValue;\n     private String propertySeparator;\n     \n-    public PropertiesReader(final Reader reader) {\n-        super(reader);\n+    public PropertiesReader(final Reader in) {\n+        super(in);\n         this.propertySeparator = \" = \";\n         this.commentLines = new ArrayList();\n     }\n     \n-    static boolean checkCombineLines(final String line) {\n-        return PropertiesConfiguration.access$100(line) % 2 != 0;\n+    static boolean checkCombineLines(final String s) {\n+        return PropertiesConfiguration.access$100(s) % 2 != 0;\n     }\n     \n-    static String[] doParseProperty(final String line, final boolean trimValue) {\n-        final Matcher matcher = PropertiesReader.PROPERTY_PATTERN.matcher(line);\n-        final String[] result = { \"\", \"\", \"\" };\n+    static String[] doParseProperty(final String input, final boolean b) {\n+        final Matcher matcher = PropertiesReader.PROPERTY_PATTERN.matcher(input);\n+        final String[] array = { \"\", \"\", \"\" };\n         if (matcher.matches()) {\n-            result[0] = matcher.group(1).trim();\n-            String value = matcher.group(5);\n-            if (trimValue) {\n-                value = value.trim();\n+            array[0] = matcher.group(1).trim();\n+            String s = matcher.group(5);\n+            if (b) {\n+                s = s.trim();\n             }\n-            result[1] = value;\n-            result[2] = matcher.group(3);\n+            array[1] = s;\n+            array[2] = matcher.group(3);\n         }\n-        return result;\n+        return array;\n     }\n     \n     public List<String> getCommentLines() {\n         return this.commentLines;\n     }\n     \n     public String getPropertyName() {\n@@ -58,70 +58,69 @@\n         return this.propertySeparator;\n     }\n     \n     public String getPropertyValue() {\n         return this.propertyValue;\n     }\n     \n-    protected void initPropertyName(final String name) {\n-        this.propertyName = this.unescapePropertyName(name);\n+    protected void initPropertyName(final String s) {\n+        this.propertyName = this.unescapePropertyName(s);\n     }\n     \n-    protected void initPropertySeparator(final String value) {\n-        this.propertySeparator = value;\n+    protected void initPropertySeparator(final String propertySeparator) {\n+        this.propertySeparator = propertySeparator;\n     }\n     \n-    protected void initPropertyValue(final String value) {\n-        this.propertyValue = this.unescapePropertyValue(value);\n+    protected void initPropertyValue(final String s) {\n+        this.propertyValue = this.unescapePropertyValue(s);\n     }\n     \n     public boolean nextProperty() throws IOException {\n-        final String line = this.readProperty();\n-        if (line == null) {\n+        final String property = this.readProperty();\n+        if (property == null) {\n             return false;\n         }\n-        this.parseProperty(line);\n+        this.parseProperty(property);\n         return true;\n     }\n     \n-    protected void parseProperty(final String line) {\n-        final String[] property = doParseProperty(line, true);\n-        this.initPropertyName(property[0]);\n-        this.initPropertyValue(property[1]);\n-        this.initPropertySeparator(property[2]);\n+    protected void parseProperty(final String s) {\n+        final String[] doParseProperty = doParseProperty(s, true);\n+        this.initPropertyName(doParseProperty[0]);\n+        this.initPropertyValue(doParseProperty[1]);\n+        this.initPropertySeparator(doParseProperty[2]);\n     }\n     \n     public String readProperty() throws IOException {\n         this.commentLines.clear();\n-        final StringBuilder buffer = new StringBuilder();\n+        final StringBuilder sb = new StringBuilder();\n         while (true) {\n-            String line = this.readLine();\n+            final String line = this.readLine();\n             if (line == null) {\n                 return null;\n             }\n             if (PropertiesConfiguration.isCommentLine(line)) {\n                 this.commentLines.add(line);\n             }\n             else {\n-                line = line.trim();\n-                if (!checkCombineLines(line)) {\n-                    buffer.append(line);\n-                    return buffer.toString();\n+                final String trim = line.trim();\n+                if (!checkCombineLines(trim)) {\n+                    sb.append(trim);\n+                    return sb.toString();\n                 }\n-                line = line.substring(0, line.length() - 1);\n-                buffer.append(line);\n+                sb.append(trim.substring(0, trim.length() - 1));\n             }\n         }\n     }\n     \n-    protected String unescapePropertyName(final String name) {\n-        return StringEscapeUtils.unescapeJava(name);\n+    protected String unescapePropertyName(final String s) {\n+        return StringEscapeUtils.unescapeJava(s);\n     }\n     \n-    protected String unescapePropertyValue(final String value) {\n-        return PropertiesConfiguration.unescapeJava(value);\n+    protected String unescapePropertyValue(final String s) {\n+        return PropertiesConfiguration.unescapeJava(s);\n     }\n     \n     static {\n         PropertiesReader.PROPERTY_PATTERN = Pattern.compile(\"(([\\\\S&&[^\\\\\\\\\" + new String(PropertiesConfiguration.access$000()) + \"]]|\\\\\\\\.)*)(\\\\s*(\\\\s+|[\" + new String(PropertiesConfiguration.access$000()) + \"])\\\\s*)?(.*)\");\n     }\n }\n"}]}
