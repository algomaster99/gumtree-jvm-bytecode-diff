{"diffoscope-json-version": 1, "source1": "first/FixedLengthBlockOutputStream.class", "source2": "second/FixedLengthBlockOutputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,67 +1,67 @@\n-  SHA-256 checksum 530932ab4f8ac2cfb08438de85eeb1c96f6876d4672cafcf577db15a474ea7d5\n+  SHA-256 checksum b3ee5a65d300990c556c4d64ae4e801828a8cd4fc89edd256364125d659caa63\n   Compiled from \"FixedLengthBlockOutputStream.java\"\n public class org.apache.commons.compress.utils.FixedLengthBlockOutputStream extends java.io.OutputStream implements java.nio.channels.WritableByteChannel\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #47                         // org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n   super_class: #48                        // java/io/OutputStream\n   interfaces: 1, fields: 4, methods: 11, attributes: 2\n Constant pool:\n-    #1 = Methodref          #48.#85       // java/io/OutputStream.\"<init>\":()V\n-    #2 = Class              #86           // java/util/concurrent/atomic/AtomicBoolean\n-    #3 = Methodref          #2.#87        // java/util/concurrent/atomic/AtomicBoolean.\"<init>\":(Z)V\n-    #4 = Fieldref           #47.#88       // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n-    #5 = Class              #89           // java/io/FileOutputStream\n-    #6 = Methodref          #5.#90        // java/io/FileOutputStream.getChannel:()Ljava/nio/channels/FileChannel;\n-    #7 = Fieldref           #47.#91       // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.out:Ljava/nio/channels/WritableByteChannel;\n-    #8 = Methodref          #92.#93       // java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;\n-    #9 = Fieldref           #47.#94       // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.buffer:Ljava/nio/ByteBuffer;\n-   #10 = Class              #95           // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel\n-   #11 = Methodref          #10.#96       // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.\"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$1;)V\n-   #12 = Methodref          #92.#97       // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-   #13 = Fieldref           #47.#98       // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.blockSize:I\n-   #14 = Methodref          #2.#99        // java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z\n-   #15 = Methodref          #47.#100      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.flushBlock:()V\n-   #16 = InterfaceMethodref #49.#101      // java/nio/channels/WritableByteChannel.close:()V\n-   #17 = Methodref          #92.#102      // java/nio/ByteBuffer.position:()I\n-   #18 = Methodref          #47.#103      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.padBlock:()V\n-   #19 = Methodref          #47.#104      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.writeBlock:()V\n-   #20 = InterfaceMethodref #49.#105      // java/nio/channels/WritableByteChannel.isOpen:()Z\n-   #21 = Methodref          #2.#106       // java/util/concurrent/atomic/AtomicBoolean.set:(Z)V\n-   #22 = Methodref          #2.#107       // java/util/concurrent/atomic/AtomicBoolean.get:()Z\n-   #23 = Methodref          #92.#108      // java/nio/ByteBuffer.hasRemaining:()Z\n-   #24 = Methodref          #109.#110     // java/nio/ByteOrder.nativeOrder:()Ljava/nio/ByteOrder;\n-   #25 = Methodref          #92.#111      // java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n-   #26 = Methodref          #92.#112      // java/nio/ByteBuffer.remaining:()I\n-   #27 = Methodref          #92.#113      // java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n-   #28 = Methodref          #92.#114      // java/nio/ByteBuffer.putLong:(J)Ljava/nio/ByteBuffer;\n-   #29 = Methodref          #47.#105      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.isOpen:()Z\n-   #30 = Class              #115          // java/nio/channels/ClosedChannelException\n-   #31 = Methodref          #30.#85       // java/nio/channels/ClosedChannelException.\"<init>\":()V\n-   #32 = Methodref          #116.#117     // java/lang/Math.min:(II)I\n-   #33 = Methodref          #92.#118      // java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n-   #34 = Methodref          #47.#119      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.maybeFlush:()V\n-   #35 = Methodref          #92.#120      // java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n-   #36 = Methodref          #92.#121      // java/nio/ByteBuffer.limit:()I\n-   #37 = Methodref          #92.#122      // java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;\n-   #38 = InterfaceMethodref #49.#123      // java/nio/channels/WritableByteChannel.write:(Ljava/nio/ByteBuffer;)I\n-   #39 = Methodref          #92.#124      // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n-   #40 = String             #125          // Failed to write %,d bytes atomically. Only wrote  %,d\n-   #41 = Class              #126          // java/lang/Object\n-   #42 = Methodref          #127.#128     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #43 = Methodref          #129.#130     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-   #44 = Class              #131          // java/io/IOException\n-   #45 = Methodref          #44.#132      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #46 = Methodref          #92.#133      // java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;\n-   #47 = Class              #134          // org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n-   #48 = Class              #135          // java/io/OutputStream\n-   #49 = Class              #136          // java/nio/channels/WritableByteChannel\n-   #50 = Class              #137          // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$1\n+    #1 = Methodref          #48.#83       // java/io/OutputStream.\"<init>\":()V\n+    #2 = Class              #84           // java/util/concurrent/atomic/AtomicBoolean\n+    #3 = Methodref          #2.#85        // java/util/concurrent/atomic/AtomicBoolean.\"<init>\":(Z)V\n+    #4 = Fieldref           #47.#86       // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+    #5 = Class              #87           // java/io/FileOutputStream\n+    #6 = Methodref          #5.#88        // java/io/FileOutputStream.getChannel:()Ljava/nio/channels/FileChannel;\n+    #7 = Fieldref           #47.#89       // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.out:Ljava/nio/channels/WritableByteChannel;\n+    #8 = Methodref          #90.#91       // java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;\n+    #9 = Fieldref           #47.#92       // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.buffer:Ljava/nio/ByteBuffer;\n+   #10 = Class              #93           // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel\n+   #11 = Methodref          #10.#94       // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.\"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$1;)V\n+   #12 = Methodref          #90.#95       // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+   #13 = Fieldref           #47.#96       // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.blockSize:I\n+   #14 = Methodref          #2.#97        // java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z\n+   #15 = Methodref          #47.#98       // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.flushBlock:()V\n+   #16 = InterfaceMethodref #49.#99       // java/nio/channels/WritableByteChannel.close:()V\n+   #17 = Methodref          #90.#100      // java/nio/ByteBuffer.position:()I\n+   #18 = Methodref          #47.#101      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.padBlock:()V\n+   #19 = Methodref          #47.#102      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.writeBlock:()V\n+   #20 = InterfaceMethodref #49.#103      // java/nio/channels/WritableByteChannel.isOpen:()Z\n+   #21 = Methodref          #2.#104       // java/util/concurrent/atomic/AtomicBoolean.set:(Z)V\n+   #22 = Methodref          #2.#105       // java/util/concurrent/atomic/AtomicBoolean.get:()Z\n+   #23 = Methodref          #90.#106      // java/nio/ByteBuffer.hasRemaining:()Z\n+   #24 = Methodref          #107.#108     // java/nio/ByteOrder.nativeOrder:()Ljava/nio/ByteOrder;\n+   #25 = Methodref          #90.#109      // java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+   #26 = Methodref          #90.#110      // java/nio/ByteBuffer.remaining:()I\n+   #27 = Methodref          #90.#111      // java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n+   #28 = Methodref          #90.#112      // java/nio/ByteBuffer.putLong:(J)Ljava/nio/ByteBuffer;\n+   #29 = Methodref          #47.#103      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.isOpen:()Z\n+   #30 = Class              #113          // java/nio/channels/ClosedChannelException\n+   #31 = Methodref          #30.#83       // java/nio/channels/ClosedChannelException.\"<init>\":()V\n+   #32 = Methodref          #114.#115     // java/lang/Math.min:(II)I\n+   #33 = Methodref          #90.#116      // java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n+   #34 = Methodref          #47.#117      // org/apache/commons/compress/utils/FixedLengthBlockOutputStream.maybeFlush:()V\n+   #35 = Methodref          #90.#118      // java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n+   #36 = Methodref          #90.#119      // java/nio/ByteBuffer.limit:()I\n+   #37 = Methodref          #90.#120      // java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;\n+   #38 = InterfaceMethodref #49.#121      // java/nio/channels/WritableByteChannel.write:(Ljava/nio/ByteBuffer;)I\n+   #39 = Methodref          #90.#122      // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+   #40 = String             #123          // Failed to write %,d bytes atomically. Only wrote  %,d\n+   #41 = Class              #124          // java/lang/Object\n+   #42 = Methodref          #125.#126     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+   #43 = Methodref          #127.#128     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+   #44 = Class              #129          // java/io/IOException\n+   #45 = Methodref          #44.#130      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #46 = Methodref          #90.#131      // java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;\n+   #47 = Class              #132          // org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n+   #48 = Class              #133          // java/io/OutputStream\n+   #49 = Class              #134          // java/nio/channels/WritableByteChannel\n+   #50 = Class              #135          // org/apache/commons/compress/utils/FixedLengthBlockOutputStream$1\n    #51 = Utf8               InnerClasses\n    #52 = Utf8               BufferAtATimeOutputChannel\n    #53 = Utf8               out\n    #54 = Utf8               Ljava/nio/channels/WritableByteChannel;\n    #55 = Utf8               blockSize\n    #56 = Utf8               I\n    #57 = Utf8               buffer\n@@ -69,129 +69,127 @@\n    #59 = Utf8               closed\n    #60 = Utf8               Ljava/util/concurrent/atomic/AtomicBoolean;\n    #61 = Utf8               <init>\n    #62 = Utf8               (Ljava/io/OutputStream;I)V\n    #63 = Utf8               Code\n    #64 = Utf8               LineNumberTable\n    #65 = Utf8               StackMapTable\n-   #66 = Class              #134          // org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n-   #67 = Class              #135          // java/io/OutputStream\n-   #68 = Utf8               (Ljava/nio/channels/WritableByteChannel;I)V\n-   #69 = Utf8               close\n-   #70 = Utf8               ()V\n-   #71 = Class              #138          // java/lang/Throwable\n-   #72 = Utf8               Exceptions\n-   #73 = Utf8               flushBlock\n-   #74 = Utf8               isOpen\n-   #75 = Utf8               ()Z\n-   #76 = Utf8               maybeFlush\n-   #77 = Utf8               padBlock\n-   #78 = Utf8               write\n-   #79 = Utf8               ([BII)V\n-   #80 = Utf8               (Ljava/nio/ByteBuffer;)I\n-   #81 = Utf8               (I)V\n-   #82 = Utf8               writeBlock\n-   #83 = Utf8               SourceFile\n-   #84 = Utf8               FixedLengthBlockOutputStream.java\n-   #85 = NameAndType        #61:#70       // \"<init>\":()V\n-   #86 = Utf8               java/util/concurrent/atomic/AtomicBoolean\n-   #87 = NameAndType        #61:#139      // \"<init>\":(Z)V\n-   #88 = NameAndType        #59:#60       // closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n-   #89 = Utf8               java/io/FileOutputStream\n-   #90 = NameAndType        #140:#141     // getChannel:()Ljava/nio/channels/FileChannel;\n-   #91 = NameAndType        #53:#54       // out:Ljava/nio/channels/WritableByteChannel;\n-   #92 = Class              #142          // java/nio/ByteBuffer\n-   #93 = NameAndType        #143:#144     // allocateDirect:(I)Ljava/nio/ByteBuffer;\n-   #94 = NameAndType        #57:#58       // buffer:Ljava/nio/ByteBuffer;\n-   #95 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel\n-   #96 = NameAndType        #61:#145      // \"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$1;)V\n-   #97 = NameAndType        #146:#144     // allocate:(I)Ljava/nio/ByteBuffer;\n-   #98 = NameAndType        #55:#56       // blockSize:I\n-   #99 = NameAndType        #147:#148     // compareAndSet:(ZZ)Z\n-  #100 = NameAndType        #73:#70       // flushBlock:()V\n-  #101 = NameAndType        #69:#70       // close:()V\n-  #102 = NameAndType        #149:#150     // position:()I\n-  #103 = NameAndType        #77:#70       // padBlock:()V\n-  #104 = NameAndType        #82:#70       // writeBlock:()V\n-  #105 = NameAndType        #74:#75       // isOpen:()Z\n-  #106 = NameAndType        #151:#139     // set:(Z)V\n-  #107 = NameAndType        #152:#75      // get:()Z\n-  #108 = NameAndType        #153:#75      // hasRemaining:()Z\n-  #109 = Class              #154          // java/nio/ByteOrder\n-  #110 = NameAndType        #155:#156     // nativeOrder:()Ljava/nio/ByteOrder;\n-  #111 = NameAndType        #157:#158     // order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n-  #112 = NameAndType        #159:#150     // remaining:()I\n-  #113 = NameAndType        #160:#161     // put:(B)Ljava/nio/ByteBuffer;\n-  #114 = NameAndType        #162:#163     // putLong:(J)Ljava/nio/ByteBuffer;\n-  #115 = Utf8               java/nio/channels/ClosedChannelException\n-  #116 = Class              #164          // java/lang/Math\n-  #117 = NameAndType        #165:#166     // min:(II)I\n-  #118 = NameAndType        #160:#167     // put:([BII)Ljava/nio/ByteBuffer;\n-  #119 = NameAndType        #76:#70       // maybeFlush:()V\n-  #120 = NameAndType        #160:#168     // put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n-  #121 = NameAndType        #169:#150     // limit:()I\n-  #122 = NameAndType        #169:#170     // limit:(I)Ljava/nio/Buffer;\n-  #123 = NameAndType        #78:#80       // write:(Ljava/nio/ByteBuffer;)I\n-  #124 = NameAndType        #171:#172     // flip:()Ljava/nio/Buffer;\n-  #125 = Utf8               Failed to write %,d bytes atomically. Only wrote  %,d\n-  #126 = Utf8               java/lang/Object\n-  #127 = Class              #173          // java/lang/Integer\n-  #128 = NameAndType        #174:#175     // valueOf:(I)Ljava/lang/Integer;\n-  #129 = Class              #176          // java/lang/String\n-  #130 = NameAndType        #177:#178     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #131 = Utf8               java/io/IOException\n-  #132 = NameAndType        #61:#179      // \"<init>\":(Ljava/lang/String;)V\n-  #133 = NameAndType        #180:#172     // clear:()Ljava/nio/Buffer;\n-  #134 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n-  #135 = Utf8               java/io/OutputStream\n-  #136 = Utf8               java/nio/channels/WritableByteChannel\n-  #137 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream$1\n-  #138 = Utf8               java/lang/Throwable\n-  #139 = Utf8               (Z)V\n-  #140 = Utf8               getChannel\n-  #141 = Utf8               ()Ljava/nio/channels/FileChannel;\n-  #142 = Utf8               java/nio/ByteBuffer\n-  #143 = Utf8               allocateDirect\n-  #144 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #145 = Utf8               (Ljava/io/OutputStream;Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$1;)V\n-  #146 = Utf8               allocate\n-  #147 = Utf8               compareAndSet\n-  #148 = Utf8               (ZZ)Z\n-  #149 = Utf8               position\n-  #150 = Utf8               ()I\n-  #151 = Utf8               set\n-  #152 = Utf8               get\n-  #153 = Utf8               hasRemaining\n-  #154 = Utf8               java/nio/ByteOrder\n-  #155 = Utf8               nativeOrder\n-  #156 = Utf8               ()Ljava/nio/ByteOrder;\n-  #157 = Utf8               order\n-  #158 = Utf8               (Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n-  #159 = Utf8               remaining\n-  #160 = Utf8               put\n-  #161 = Utf8               (B)Ljava/nio/ByteBuffer;\n-  #162 = Utf8               putLong\n-  #163 = Utf8               (J)Ljava/nio/ByteBuffer;\n-  #164 = Utf8               java/lang/Math\n-  #165 = Utf8               min\n-  #166 = Utf8               (II)I\n-  #167 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n-  #168 = Utf8               (Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n-  #169 = Utf8               limit\n-  #170 = Utf8               (I)Ljava/nio/Buffer;\n-  #171 = Utf8               flip\n-  #172 = Utf8               ()Ljava/nio/Buffer;\n-  #173 = Utf8               java/lang/Integer\n-  #174 = Utf8               valueOf\n-  #175 = Utf8               (I)Ljava/lang/Integer;\n-  #176 = Utf8               java/lang/String\n-  #177 = Utf8               format\n-  #178 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #179 = Utf8               (Ljava/lang/String;)V\n-  #180 = Utf8               clear\n+   #66 = Utf8               (Ljava/nio/channels/WritableByteChannel;I)V\n+   #67 = Utf8               close\n+   #68 = Utf8               ()V\n+   #69 = Class              #136          // java/lang/Throwable\n+   #70 = Utf8               Exceptions\n+   #71 = Utf8               flushBlock\n+   #72 = Utf8               isOpen\n+   #73 = Utf8               ()Z\n+   #74 = Utf8               maybeFlush\n+   #75 = Utf8               padBlock\n+   #76 = Utf8               write\n+   #77 = Utf8               ([BII)V\n+   #78 = Utf8               (Ljava/nio/ByteBuffer;)I\n+   #79 = Utf8               (I)V\n+   #80 = Utf8               writeBlock\n+   #81 = Utf8               SourceFile\n+   #82 = Utf8               FixedLengthBlockOutputStream.java\n+   #83 = NameAndType        #61:#68       // \"<init>\":()V\n+   #84 = Utf8               java/util/concurrent/atomic/AtomicBoolean\n+   #85 = NameAndType        #61:#137      // \"<init>\":(Z)V\n+   #86 = NameAndType        #59:#60       // closed:Ljava/util/concurrent/atomic/AtomicBoolean;\n+   #87 = Utf8               java/io/FileOutputStream\n+   #88 = NameAndType        #138:#139     // getChannel:()Ljava/nio/channels/FileChannel;\n+   #89 = NameAndType        #53:#54       // out:Ljava/nio/channels/WritableByteChannel;\n+   #90 = Class              #140          // java/nio/ByteBuffer\n+   #91 = NameAndType        #141:#142     // allocateDirect:(I)Ljava/nio/ByteBuffer;\n+   #92 = NameAndType        #57:#58       // buffer:Ljava/nio/ByteBuffer;\n+   #93 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel\n+   #94 = NameAndType        #61:#143      // \"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$1;)V\n+   #95 = NameAndType        #144:#142     // allocate:(I)Ljava/nio/ByteBuffer;\n+   #96 = NameAndType        #55:#56       // blockSize:I\n+   #97 = NameAndType        #145:#146     // compareAndSet:(ZZ)Z\n+   #98 = NameAndType        #71:#68       // flushBlock:()V\n+   #99 = NameAndType        #67:#68       // close:()V\n+  #100 = NameAndType        #147:#148     // position:()I\n+  #101 = NameAndType        #75:#68       // padBlock:()V\n+  #102 = NameAndType        #80:#68       // writeBlock:()V\n+  #103 = NameAndType        #72:#73       // isOpen:()Z\n+  #104 = NameAndType        #149:#137     // set:(Z)V\n+  #105 = NameAndType        #150:#73      // get:()Z\n+  #106 = NameAndType        #151:#73      // hasRemaining:()Z\n+  #107 = Class              #152          // java/nio/ByteOrder\n+  #108 = NameAndType        #153:#154     // nativeOrder:()Ljava/nio/ByteOrder;\n+  #109 = NameAndType        #155:#156     // order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+  #110 = NameAndType        #157:#148     // remaining:()I\n+  #111 = NameAndType        #158:#159     // put:(B)Ljava/nio/ByteBuffer;\n+  #112 = NameAndType        #160:#161     // putLong:(J)Ljava/nio/ByteBuffer;\n+  #113 = Utf8               java/nio/channels/ClosedChannelException\n+  #114 = Class              #162          // java/lang/Math\n+  #115 = NameAndType        #163:#164     // min:(II)I\n+  #116 = NameAndType        #158:#165     // put:([BII)Ljava/nio/ByteBuffer;\n+  #117 = NameAndType        #74:#68       // maybeFlush:()V\n+  #118 = NameAndType        #158:#166     // put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n+  #119 = NameAndType        #167:#148     // limit:()I\n+  #120 = NameAndType        #167:#168     // limit:(I)Ljava/nio/Buffer;\n+  #121 = NameAndType        #76:#78       // write:(Ljava/nio/ByteBuffer;)I\n+  #122 = NameAndType        #169:#170     // flip:()Ljava/nio/Buffer;\n+  #123 = Utf8               Failed to write %,d bytes atomically. Only wrote  %,d\n+  #124 = Utf8               java/lang/Object\n+  #125 = Class              #171          // java/lang/Integer\n+  #126 = NameAndType        #172:#173     // valueOf:(I)Ljava/lang/Integer;\n+  #127 = Class              #174          // java/lang/String\n+  #128 = NameAndType        #175:#176     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #129 = Utf8               java/io/IOException\n+  #130 = NameAndType        #61:#177      // \"<init>\":(Ljava/lang/String;)V\n+  #131 = NameAndType        #178:#170     // clear:()Ljava/nio/Buffer;\n+  #132 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream\n+  #133 = Utf8               java/io/OutputStream\n+  #134 = Utf8               java/nio/channels/WritableByteChannel\n+  #135 = Utf8               org/apache/commons/compress/utils/FixedLengthBlockOutputStream$1\n+  #136 = Utf8               java/lang/Throwable\n+  #137 = Utf8               (Z)V\n+  #138 = Utf8               getChannel\n+  #139 = Utf8               ()Ljava/nio/channels/FileChannel;\n+  #140 = Utf8               java/nio/ByteBuffer\n+  #141 = Utf8               allocateDirect\n+  #142 = Utf8               (I)Ljava/nio/ByteBuffer;\n+  #143 = Utf8               (Ljava/io/OutputStream;Lorg/apache/commons/compress/utils/FixedLengthBlockOutputStream$1;)V\n+  #144 = Utf8               allocate\n+  #145 = Utf8               compareAndSet\n+  #146 = Utf8               (ZZ)Z\n+  #147 = Utf8               position\n+  #148 = Utf8               ()I\n+  #149 = Utf8               set\n+  #150 = Utf8               get\n+  #151 = Utf8               hasRemaining\n+  #152 = Utf8               java/nio/ByteOrder\n+  #153 = Utf8               nativeOrder\n+  #154 = Utf8               ()Ljava/nio/ByteOrder;\n+  #155 = Utf8               order\n+  #156 = Utf8               (Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+  #157 = Utf8               remaining\n+  #158 = Utf8               put\n+  #159 = Utf8               (B)Ljava/nio/ByteBuffer;\n+  #160 = Utf8               putLong\n+  #161 = Utf8               (J)Ljava/nio/ByteBuffer;\n+  #162 = Utf8               java/lang/Math\n+  #163 = Utf8               min\n+  #164 = Utf8               (II)I\n+  #165 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n+  #166 = Utf8               (Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\n+  #167 = Utf8               limit\n+  #168 = Utf8               (I)Ljava/nio/Buffer;\n+  #169 = Utf8               flip\n+  #170 = Utf8               ()Ljava/nio/Buffer;\n+  #171 = Utf8               java/lang/Integer\n+  #172 = Utf8               valueOf\n+  #173 = Utf8               (I)Ljava/lang/Integer;\n+  #174 = Utf8               java/lang/String\n+  #175 = Utf8               format\n+  #176 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #177 = Utf8               (Ljava/lang/String;)V\n+  #178 = Utf8               clear\n {\n   private final java.nio.channels.WritableByteChannel out;\n     descriptor: Ljava/nio/channels/WritableByteChannel;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final int blockSize;\n     descriptor: I\n"}]}
