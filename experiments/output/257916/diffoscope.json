{"diffoscope-json-version": 1, "source1": "first/NodeTracker$TrackedNodeData.class", "source2": "second/NodeTracker$TrackedNodeData.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -3,22 +3,22 @@\n \n private static class TrackedNodeData\n {\n     private final ImmutableNode node;\n     private final int observerCount;\n     private final InMemoryNodeModel detachedModel;\n     \n-    public TrackedNodeData(final ImmutableNode nd) {\n-        this(nd, 1, null);\n+    public TrackedNodeData(final ImmutableNode immutableNode) {\n+        this(immutableNode, 1, null);\n     }\n     \n-    private TrackedNodeData(final ImmutableNode nd, final int obsCount, final InMemoryNodeModel detachedNodeModel) {\n-        this.node = nd;\n-        this.observerCount = obsCount;\n-        this.detachedModel = detachedNodeModel;\n+    private TrackedNodeData(final ImmutableNode node, final int observerCount, final InMemoryNodeModel detachedModel) {\n+        this.node = node;\n+        this.observerCount = observerCount;\n+        this.detachedModel = detachedModel;\n     }\n     \n     public ImmutableNode getNode() {\n         return (this.getDetachedModel() != null) ? this.getDetachedModel().getRootNode() : this.node;\n     }\n     \n     public InMemoryNodeModel getDetachedModel() {\n@@ -33,16 +33,16 @@\n         return new TrackedNodeData(this.node, this.observerCount + 1, this.getDetachedModel());\n     }\n     \n     public TrackedNodeData observerRemoved() {\n         return (this.observerCount <= 1) ? null : new TrackedNodeData(this.node, this.observerCount - 1, this.getDetachedModel());\n     }\n     \n-    public TrackedNodeData updateNode(final ImmutableNode newNode) {\n-        return new TrackedNodeData(newNode, this.observerCount, this.getDetachedModel());\n+    public TrackedNodeData updateNode(final ImmutableNode immutableNode) {\n+        return new TrackedNodeData(immutableNode, this.observerCount, this.getDetachedModel());\n     }\n     \n-    public TrackedNodeData detach(final ImmutableNode newNode) {\n-        final ImmutableNode newTrackedNode = (newNode != null) ? newNode : this.getNode();\n-        return new TrackedNodeData(newTrackedNode, this.observerCount, new InMemoryNodeModel(newTrackedNode));\n+    public TrackedNodeData detach(final ImmutableNode immutableNode) {\n+        final ImmutableNode immutableNode2 = (immutableNode != null) ? immutableNode : this.getNode();\n+        return new TrackedNodeData(immutableNode2, this.observerCount, new InMemoryNodeModel(immutableNode2));\n     }\n }\n"}]}
