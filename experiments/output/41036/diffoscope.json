{"diffoscope-json-version": 1, "source1": "first/IOUtils.class", "source2": "second/IOUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -17,14 +17,19 @@\n public final class IOUtils\n {\n     private static final int COPY_BUF_SIZE = 8024;\n     private static final int SKIP_BUF_SIZE = 4096;\n     public static final LinkOption[] EMPTY_LINK_OPTIONS;\n     private static final byte[] SKIP_BUF;\n     \n+    static {\n+        EMPTY_LINK_OPTIONS = new LinkOption[0];\n+        SKIP_BUF = new byte[4096];\n+    }\n+    \n     private IOUtils() {\n     }\n     \n     public static long copy(final InputStream input, final OutputStream output) throws IOException {\n         return copy(input, output, 8024);\n     }\n     \n@@ -42,34 +47,57 @@\n             count += n;\n         }\n         return count;\n     }\n     \n     public static long skip(final InputStream input, long numToSkip) throws IOException {\n         final long available = numToSkip;\n-        while (numToSkip > 0L) {\n-            final long skipped = input.skip(numToSkip);\n-            if (skipped == 0L) {\n-                break;\n-            }\n-            numToSkip -= skipped;\n-        }\n-        while (numToSkip > 0L) {\n-            final int read = readFully(input, IOUtils.SKIP_BUF, 0, (int)Math.min(numToSkip, 4096L));\n-            if (read < 1) {\n-                break;\n+        while (true) {\n+            while (numToSkip > 0L) {\n+                final long skipped = input.skip(numToSkip);\n+                if (skipped == 0L) {\n+                    while (numToSkip > 0L) {\n+                        final int read = readFully(input, IOUtils.SKIP_BUF, 0, (int)Math.min(numToSkip, 4096L));\n+                        if (read < 1) {\n+                            break;\n+                        }\n+                        numToSkip -= read;\n+                    }\n+                    return available - numToSkip;\n+                }\n+                numToSkip -= skipped;\n             }\n-            numToSkip -= read;\n+            continue;\n         }\n-        return available - numToSkip;\n     }\n     \n     public static int read(final File file, final byte[] array) throws IOException {\n-        try (final InputStream inputStream = Files.newInputStream(file.toPath(), new OpenOption[0])) {\n-            return readFully(inputStream, array, 0, array.length);\n+        Throwable t = null;\n+        try {\n+            final InputStream inputStream = Files.newInputStream(file.toPath(), new OpenOption[0]);\n+            try {\n+                return readFully(inputStream, array, 0, array.length);\n+            }\n+            finally {\n+                if (inputStream != null) {\n+                    inputStream.close();\n+                }\n+            }\n+        }\n+        finally {\n+            if (t == null) {\n+                final Throwable exception;\n+                t = exception;\n+            }\n+            else {\n+                final Throwable exception;\n+                if (t != exception) {\n+                    t.addSuppressed(exception);\n+                }\n+            }\n         }\n     }\n     \n     public static int readFully(final InputStream input, final byte[] array) throws IOException {\n         return readFully(input, array, 0, array.length);\n     }\n     \n@@ -147,23 +175,18 @@\n     }\n     \n     public static byte[] readRange(final ReadableByteChannel input, final int len) throws IOException {\n         final ByteArrayOutputStream output = new ByteArrayOutputStream();\n         final ByteBuffer b = ByteBuffer.allocate(Math.min(len, 8024));\n         int readNow;\n         for (int read = 0; read < len; read += readNow) {\n-            b.limit();\n+            b.limit(Math.min(len - read, b.capacity()));\n             readNow = input.read(b);\n             if (readNow <= 0) {\n                 break;\n             }\n             output.write(b.array(), 0, readNow);\n             b.rewind();\n         }\n         return output.toByteArray();\n     }\n-    \n-    static {\n-        EMPTY_LINK_OPTIONS = new LinkOption[0];\n-        SKIP_BUF = new byte[4096];\n-    }\n }\n"}]}
