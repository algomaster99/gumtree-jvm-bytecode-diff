{"diffoscope-json-version": 1, "source1": "first/ConstructorArg.class", "source2": "second/ConstructorArg.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,35 +5,35 @@\n \n public final class ConstructorArg\n {\n     private final BeanDeclaration beanDeclaration;\n     private final Object value;\n     private final String typeName;\n     \n-    private ConstructorArg(final BeanDeclaration decl, final Object val, final String type) {\n-        this.beanDeclaration = decl;\n-        this.value = val;\n-        this.typeName = type;\n+    private ConstructorArg(final BeanDeclaration beanDeclaration, final Object value, final String typeName) {\n+        this.beanDeclaration = beanDeclaration;\n+        this.value = value;\n+        this.typeName = typeName;\n     }\n     \n-    public static ConstructorArg forBeanDeclaration(final BeanDeclaration decl) {\n-        return forBeanDeclaration(decl, null);\n+    public static ConstructorArg forBeanDeclaration(final BeanDeclaration beanDeclaration) {\n+        return forBeanDeclaration(beanDeclaration, null);\n     }\n     \n-    public static ConstructorArg forBeanDeclaration(final BeanDeclaration beanDeclaration, final String typeName) {\n-        Objects.requireNonNull(beanDeclaration, \"beanDeclaration\");\n-        return new ConstructorArg(beanDeclaration, null, typeName);\n+    public static ConstructorArg forBeanDeclaration(final BeanDeclaration obj, final String s) {\n+        Objects.requireNonNull(obj, \"beanDeclaration\");\n+        return new ConstructorArg(obj, null, s);\n     }\n     \n-    public static ConstructorArg forValue(final Object value) {\n-        return forValue(value, null);\n+    public static ConstructorArg forValue(final Object o) {\n+        return forValue(o, null);\n     }\n     \n-    public static ConstructorArg forValue(final Object value, final String typeName) {\n-        return new ConstructorArg(null, value, typeName);\n+    public static ConstructorArg forValue(final Object o, final String s) {\n+        return new ConstructorArg(null, o, s);\n     }\n     \n     public BeanDeclaration getBeanDeclaration() {\n         return this.beanDeclaration;\n     }\n     \n     public boolean isNestedBeanDeclaration() {\n@@ -44,24 +44,24 @@\n         return this.value;\n     }\n     \n     public String getTypeName() {\n         return this.typeName;\n     }\n     \n-    public boolean matches(final Class<?> argCls) {\n-        return argCls != null && (this.getTypeName() == null || this.getTypeName().equals(argCls.getName()));\n+    public boolean matches(final Class<?> clazz) {\n+        return clazz != null && (this.getTypeName() == null || this.getTypeName().equals(clazz.getName()));\n     }\n     \n     @Override\n     public String toString() {\n-        final StringBuilder buf = new StringBuilder();\n-        buf.append(this.getClass().getSimpleName());\n-        buf.append(\" [ value = \");\n-        buf.append(this.isNestedBeanDeclaration() ? this.getBeanDeclaration() : this.getValue());\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(this.getClass().getSimpleName());\n+        sb.append(\" [ value = \");\n+        sb.append(this.isNestedBeanDeclaration() ? this.getBeanDeclaration() : this.getValue());\n         if (this.getTypeName() != null) {\n-            buf.append(\" (\").append(this.getTypeName()).append(')');\n+            sb.append(\" (\").append(this.getTypeName()).append(')');\n         }\n-        buf.append(\" ]\");\n-        return buf.toString();\n+        sb.append(\" ]\");\n+        return sb.toString();\n     }\n }\n"}]}
