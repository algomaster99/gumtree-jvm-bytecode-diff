{"diffoscope-json-version": 1, "source1": "first/ArrayUtils.class", "source2": "second/ArrayUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -40,14 +40,40 @@\n     public static final short[] EMPTY_SHORT_ARRAY;\n     public static final Short[] EMPTY_SHORT_OBJECT_ARRAY;\n     public static final String[] EMPTY_STRING_ARRAY;\n     public static final Throwable[] EMPTY_THROWABLE_ARRAY;\n     public static final Type[] EMPTY_TYPE_ARRAY;\n     public static final int INDEX_NOT_FOUND = -1;\n     \n+    static {\n+        EMPTY_BOOLEAN_ARRAY = new boolean[0];\n+        EMPTY_BOOLEAN_OBJECT_ARRAY = new Boolean[0];\n+        EMPTY_BYTE_ARRAY = new byte[0];\n+        EMPTY_BYTE_OBJECT_ARRAY = new Byte[0];\n+        EMPTY_CHAR_ARRAY = new char[0];\n+        EMPTY_CHARACTER_OBJECT_ARRAY = new Character[0];\n+        EMPTY_CLASS_ARRAY = new Class[0];\n+        EMPTY_DOUBLE_ARRAY = new double[0];\n+        EMPTY_DOUBLE_OBJECT_ARRAY = new Double[0];\n+        EMPTY_FIELD_ARRAY = new Field[0];\n+        EMPTY_FLOAT_ARRAY = new float[0];\n+        EMPTY_FLOAT_OBJECT_ARRAY = new Float[0];\n+        EMPTY_INT_ARRAY = new int[0];\n+        EMPTY_INTEGER_OBJECT_ARRAY = new Integer[0];\n+        EMPTY_LONG_ARRAY = new long[0];\n+        EMPTY_LONG_OBJECT_ARRAY = new Long[0];\n+        EMPTY_METHOD_ARRAY = new Method[0];\n+        EMPTY_OBJECT_ARRAY = new Object[0];\n+        EMPTY_SHORT_ARRAY = new short[0];\n+        EMPTY_SHORT_OBJECT_ARRAY = new Short[0];\n+        EMPTY_STRING_ARRAY = new String[0];\n+        EMPTY_THROWABLE_ARRAY = new Throwable[0];\n+        EMPTY_TYPE_ARRAY = new Type[0];\n+    }\n+    \n     public static boolean[] add(final boolean[] array, final boolean element) {\n         final boolean[] newArray = (boolean[])copyArrayGrow1(array, Boolean.TYPE);\n         newArray[newArray.length - 1] = element;\n         return newArray;\n     }\n     \n     @Deprecated\n@@ -164,32 +190,32 @@\n         }\n         else {\n             if (element == null) {\n                 throw new IllegalArgumentException(\"Array and element cannot both be null\");\n             }\n             clss = element.getClass();\n         }\n-        final T[] newArray = (T[])add(array, index, element, clss);\n-        return newArray;\n+        final Object[] newArray = (Object[])add(array, index, element, clss);\n+        return (T[])newArray;\n     }\n     \n     public static <T> T[] add(final T[] array, final T element) {\n         Class<?> type;\n         if (array != null) {\n             type = array.getClass().getComponentType();\n         }\n         else {\n             if (element == null) {\n                 throw new IllegalArgumentException(\"Arguments cannot both be null\");\n             }\n             type = element.getClass();\n         }\n-        final T[] newArray = (T[])copyArrayGrow1(array, type);\n+        final Object[] newArray = (Object[])copyArrayGrow1(array, type);\n         newArray[newArray.length - 1] = element;\n-        return newArray;\n+        return (T[])newArray;\n     }\n     \n     public static boolean[] addAll(final boolean[] array1, final boolean... array2) {\n         if (array1 == null) {\n             return clone(array2);\n         }\n         if (array2 == null) {\n@@ -296,27 +322,27 @@\n         if (array1 == null) {\n             return clone(array2);\n         }\n         if (array2 == null) {\n             return clone(array1);\n         }\n         final Class<?> type1 = array1.getClass().getComponentType();\n-        final T[] joinedArray = (T[])Array.newInstance(type1, array1.length + array2.length);\n+        final Object[] joinedArray = (Object[])Array.newInstance(type1, array1.length + array2.length);\n         System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n         try {\n             System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n         }\n         catch (final ArrayStoreException ase) {\n             final Class<?> type2 = array2.getClass().getComponentType();\n             if (!type1.isAssignableFrom(type2)) {\n                 throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in an array of \" + type1.getName(), ase);\n             }\n             throw ase;\n         }\n-        return joinedArray;\n+        return (T[])joinedArray;\n     }\n     \n     public static boolean[] addFirst(final boolean[] array, final boolean element) {\n         return (array == null) ? add(array, element) : insert(0, array, element);\n     }\n     \n     public static byte[] addFirst(final byte[] array, final byte element) {\n@@ -1064,23 +1090,23 @@\n         if (isEmpty(values)) {\n             return clone(array);\n         }\n         if (index < 0 || index > array.length) {\n             throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + array.length);\n         }\n         final Class<?> type = array.getClass().getComponentType();\n-        final T[] result = (T[])Array.newInstance(type, array.length + values.length);\n+        final Object[] result = (Object[])Array.newInstance(type, array.length + values.length);\n         System.arraycopy(values, 0, result, index, values.length);\n         if (index > 0) {\n             System.arraycopy(array, 0, result, 0, index);\n         }\n         if (index < array.length) {\n             System.arraycopy(array, index, result, index + values.length, array.length - index);\n         }\n-        return result;\n+        return (T[])result;\n     }\n     \n     public static <T> boolean isArrayIndexValid(final T[] array, final int index) {\n         return index >= 0 && getLength(array) > index;\n     }\n     \n     public static boolean isEmpty(final boolean[] array) {\n@@ -2279,16 +2305,16 @@\n             if (count2 != null) {\n                 if (count2.decrementAndGet() == 0) {\n                     occurrences.remove(key);\n                 }\n                 toRemove.set(i);\n             }\n         }\n-        final T[] result = (T[])removeAll((Object)array, toRemove);\n-        return result;\n+        final Object[] result = (Object[])removeAll((Object)array, toRemove);\n+        return (T[])result;\n     }\n     \n     public static void reverse(final boolean[] array) {\n         if (array == null) {\n             return;\n         }\n         reverse(array, 0, array.length);\n@@ -3123,20 +3149,20 @@\n         }\n         if (endIndexExclusive > array.length) {\n             endIndexExclusive = array.length;\n         }\n         final int newSize = endIndexExclusive - startIndexInclusive;\n         final Class<?> type = array.getClass().getComponentType();\n         if (newSize <= 0) {\n-            final T[] emptyArray = (T[])Array.newInstance(type, 0);\n-            return emptyArray;\n+            final Object[] emptyArray = (Object[])Array.newInstance(type, 0);\n+            return (T[])emptyArray;\n         }\n-        final T[] subarray = (T[])Array.newInstance(type, newSize);\n+        final Object[] subarray = (Object[])Array.newInstance(type, newSize);\n         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n-        return subarray;\n+        return (T[])subarray;\n     }\n     \n     public static void swap(final boolean[] array, final int offset1, final int offset2) {\n         if (isEmpty(array)) {\n             return;\n         }\n         swap(array, offset1, offset2, 1);\n@@ -3791,47 +3817,21 @@\n         for (int i = 0; i < array.length; ++i) {\n             result[i] = array[i].toString();\n         }\n         return result;\n     }\n     \n     public static String[] toStringArray(final Object[] array, final String valueForNullElements) {\n-        if (null == array) {\n+        if (array == null) {\n             return null;\n         }\n         if (array.length == 0) {\n             return ArrayUtils.EMPTY_STRING_ARRAY;\n         }\n         final String[] result = new String[array.length];\n         for (int i = 0; i < array.length; ++i) {\n             final Object object = array[i];\n             result[i] = ((object == null) ? valueForNullElements : object.toString());\n         }\n         return result;\n     }\n-    \n-    static {\n-        EMPTY_BOOLEAN_ARRAY = new boolean[0];\n-        EMPTY_BOOLEAN_OBJECT_ARRAY = new Boolean[0];\n-        EMPTY_BYTE_ARRAY = new byte[0];\n-        EMPTY_BYTE_OBJECT_ARRAY = new Byte[0];\n-        EMPTY_CHAR_ARRAY = new char[0];\n-        EMPTY_CHARACTER_OBJECT_ARRAY = new Character[0];\n-        EMPTY_CLASS_ARRAY = new Class[0];\n-        EMPTY_DOUBLE_ARRAY = new double[0];\n-        EMPTY_DOUBLE_OBJECT_ARRAY = new Double[0];\n-        EMPTY_FIELD_ARRAY = new Field[0];\n-        EMPTY_FLOAT_ARRAY = new float[0];\n-        EMPTY_FLOAT_OBJECT_ARRAY = new Float[0];\n-        EMPTY_INT_ARRAY = new int[0];\n-        EMPTY_INTEGER_OBJECT_ARRAY = new Integer[0];\n-        EMPTY_LONG_ARRAY = new long[0];\n-        EMPTY_LONG_OBJECT_ARRAY = new Long[0];\n-        EMPTY_METHOD_ARRAY = new Method[0];\n-        EMPTY_OBJECT_ARRAY = new Object[0];\n-        EMPTY_SHORT_ARRAY = new short[0];\n-        EMPTY_SHORT_OBJECT_ARRAY = new Short[0];\n-        EMPTY_STRING_ARRAY = new String[0];\n-        EMPTY_THROWABLE_ARRAY = new Throwable[0];\n-        EMPTY_TYPE_ARRAY = new Type[0];\n-    }\n }\n"}]}
