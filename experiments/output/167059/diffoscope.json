{"diffoscope-json-version": 1, "source1": "first/PrefixFileFilter.class", "source2": "second/PrefixFileFilter.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,52 +1,52 @@\n-  SHA-256 checksum 64d311c4dd919d2a47eb57d9572c1d6c2d55288c5d5fee80149379e5cea8be74\n+  SHA-256 checksum 661770570407b39a60c7b4899410c5c2493bf7eca4b079e0f62b0cde447a7215\n   Compiled from \"PrefixFileFilter.java\"\n public class org.apache.commons.io.filefilter.PrefixFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #33                         // org/apache/commons/io/filefilter/PrefixFileFilter\n   super_class: #34                        // org/apache/commons/io/filefilter/AbstractFileFilter\n   interfaces: 1, fields: 3, methods: 11, attributes: 1\n Constant pool:\n-    #1 = Fieldref           #94.#95       // org/apache/commons/io/IOCase.SENSITIVE:Lorg/apache/commons/io/IOCase;\n-    #2 = Methodref          #33.#96       // org/apache/commons/io/filefilter/PrefixFileFilter.\"<init>\":(Ljava/util/List;Lorg/apache/commons/io/IOCase;)V\n-    #3 = Methodref          #34.#97       // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n-    #4 = Class              #98           // java/lang/IllegalArgumentException\n-    #5 = String             #99           // The list of prefixes must not be null\n-    #6 = Methodref          #4.#100       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-    #7 = Fieldref           #33.#101      // org/apache/commons/io/filefilter/PrefixFileFilter.EMPTY_STRING_ARRAY:[Ljava/lang/String;\n-    #8 = InterfaceMethodref #102.#103     // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+    #1 = Fieldref           #60.#91       // org/apache/commons/io/IOCase.SENSITIVE:Lorg/apache/commons/io/IOCase;\n+    #2 = Methodref          #33.#92       // org/apache/commons/io/filefilter/PrefixFileFilter.\"<init>\":(Ljava/util/List;Lorg/apache/commons/io/IOCase;)V\n+    #3 = Methodref          #34.#93       // org/apache/commons/io/filefilter/AbstractFileFilter.\"<init>\":()V\n+    #4 = Class              #94           // java/lang/IllegalArgumentException\n+    #5 = String             #95           // The list of prefixes must not be null\n+    #6 = Methodref          #4.#96        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+    #7 = Fieldref           #33.#97       // org/apache/commons/io/filefilter/PrefixFileFilter.EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+    #8 = InterfaceMethodref #59.#98       // java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n     #9 = Class              #42           // \"[Ljava/lang/String;\"\n-   #10 = Fieldref           #33.#104      // org/apache/commons/io/filefilter/PrefixFileFilter.prefixes:[Ljava/lang/String;\n-   #11 = Fieldref           #33.#105      // org/apache/commons/io/filefilter/PrefixFileFilter.caseSensitivity:Lorg/apache/commons/io/IOCase;\n-   #12 = Methodref          #33.#106      // org/apache/commons/io/filefilter/PrefixFileFilter.\"<init>\":(Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n-   #13 = Methodref          #33.#107      // org/apache/commons/io/filefilter/PrefixFileFilter.\"<init>\":([Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n-   #14 = String             #108          // The prefix must not be null\n-   #15 = Class              #109          // java/lang/String\n-   #16 = String             #110          // The array of prefixes must not be null\n-   #17 = Methodref          #111.#112     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #18 = Methodref          #113.#114     // java/io/File.getName:()Ljava/lang/String;\n-   #19 = Methodref          #33.#115      // org/apache/commons/io/filefilter/PrefixFileFilter.accept:(Ljava/lang/String;)Z\n-   #20 = InterfaceMethodref #116.#117     // java/nio/file/Path.getFileName:()Ljava/nio/file/Path;\n-   #21 = InterfaceMethodref #116.#118     // java/nio/file/Path.toFile:()Ljava/io/File;\n-   #22 = Methodref          #33.#119      // org/apache/commons/io/filefilter/PrefixFileFilter.accept:(Ljava/io/File;)Z\n-   #23 = Methodref          #33.#120      // org/apache/commons/io/filefilter/PrefixFileFilter.toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n-   #24 = Methodref          #94.#121      // org/apache/commons/io/IOCase.checkStartsWith:(Ljava/lang/String;Ljava/lang/String;)Z\n-   #25 = Class              #122          // java/lang/StringBuilder\n-   #26 = Methodref          #25.#97       // java/lang/StringBuilder.\"<init>\":()V\n-   #27 = Methodref          #34.#123      // org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n-   #28 = Methodref          #25.#124      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #29 = String             #125          // (\n-   #30 = String             #126          // ,\n-   #31 = String             #127          // )\n-   #32 = Methodref          #25.#123      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #33 = Class              #128          // org/apache/commons/io/filefilter/PrefixFileFilter\n-   #34 = Class              #129          // org/apache/commons/io/filefilter/AbstractFileFilter\n-   #35 = Class              #130          // java/io/Serializable\n+   #10 = Fieldref           #33.#99       // org/apache/commons/io/filefilter/PrefixFileFilter.prefixes:[Ljava/lang/String;\n+   #11 = Fieldref           #33.#100      // org/apache/commons/io/filefilter/PrefixFileFilter.caseSensitivity:Lorg/apache/commons/io/IOCase;\n+   #12 = Methodref          #33.#101      // org/apache/commons/io/filefilter/PrefixFileFilter.\"<init>\":(Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n+   #13 = Methodref          #33.#102      // org/apache/commons/io/filefilter/PrefixFileFilter.\"<init>\":([Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n+   #14 = String             #103          // The prefix must not be null\n+   #15 = Class              #104          // java/lang/String\n+   #16 = String             #105          // The array of prefixes must not be null\n+   #17 = Methodref          #106.#107     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #18 = Methodref          #72.#108      // java/io/File.getName:()Ljava/lang/String;\n+   #19 = Methodref          #33.#109      // org/apache/commons/io/filefilter/PrefixFileFilter.accept:(Ljava/lang/String;)Z\n+   #20 = InterfaceMethodref #80.#110      // java/nio/file/Path.getFileName:()Ljava/nio/file/Path;\n+   #21 = InterfaceMethodref #80.#111      // java/nio/file/Path.toFile:()Ljava/io/File;\n+   #22 = Methodref          #33.#112      // org/apache/commons/io/filefilter/PrefixFileFilter.accept:(Ljava/io/File;)Z\n+   #23 = Methodref          #33.#113      // org/apache/commons/io/filefilter/PrefixFileFilter.toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+   #24 = Methodref          #60.#114      // org/apache/commons/io/IOCase.checkStartsWith:(Ljava/lang/String;Ljava/lang/String;)Z\n+   #25 = Class              #115          // java/lang/StringBuilder\n+   #26 = Methodref          #25.#93       // java/lang/StringBuilder.\"<init>\":()V\n+   #27 = Methodref          #34.#116      // org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;\n+   #28 = Methodref          #25.#117      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #29 = String             #118          // (\n+   #30 = String             #119          // ,\n+   #31 = String             #120          // )\n+   #32 = Methodref          #25.#116      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #33 = Class              #121          // org/apache/commons/io/filefilter/PrefixFileFilter\n+   #34 = Class              #122          // org/apache/commons/io/filefilter/AbstractFileFilter\n+   #35 = Class              #123          // java/io/Serializable\n    #36 = Utf8               serialVersionUID\n    #37 = Utf8               J\n    #38 = Utf8               ConstantValue\n    #39 = Long               8533897440809599867l\n    #41 = Utf8               prefixes\n    #42 = Utf8               [Ljava/lang/String;\n    #43 = Utf8               caseSensitivity\n@@ -61,110 +61,103 @@\n    #52 = Utf8               Ljava/util/List;\n    #53 = Utf8               LocalVariableTypeTable\n    #54 = Utf8               Ljava/util/List<Ljava/lang/String;>;\n    #55 = Utf8               Signature\n    #56 = Utf8               (Ljava/util/List<Ljava/lang/String;>;)V\n    #57 = Utf8               (Ljava/util/List;Lorg/apache/commons/io/IOCase;)V\n    #58 = Utf8               StackMapTable\n-   #59 = Class              #128          // org/apache/commons/io/filefilter/PrefixFileFilter\n-   #60 = Class              #131          // java/util/List\n-   #61 = Class              #132          // org/apache/commons/io/IOCase\n-   #62 = Utf8               (Ljava/util/List<Ljava/lang/String;>;Lorg/apache/commons/io/IOCase;)V\n-   #63 = Utf8               (Ljava/lang/String;)V\n-   #64 = Utf8               prefix\n-   #65 = Utf8               Ljava/lang/String;\n-   #66 = Utf8               ([Ljava/lang/String;)V\n-   #67 = Utf8               (Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n-   #68 = Class              #109          // java/lang/String\n-   #69 = Utf8               ([Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n-   #70 = Utf8               accept\n-   #71 = Utf8               (Ljava/io/File;)Z\n-   #72 = Utf8               file\n-   #73 = Utf8               Ljava/io/File;\n-   #74 = Class              #133          // java/io/File\n-   #75 = Utf8               (Ljava/io/File;Ljava/lang/String;)Z\n-   #76 = Utf8               name\n-   #77 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n-   #78 = Utf8               Ljava/nio/file/Path;\n-   #79 = Utf8               attributes\n-   #80 = Utf8               Ljava/nio/file/attribute/BasicFileAttributes;\n-   #81 = Utf8               fileName\n-   #82 = Class              #134          // java/nio/file/Path\n-   #83 = Class              #135          // java/nio/file/attribute/BasicFileAttributes\n-   #84 = Utf8               (Ljava/lang/String;)Z\n-   #85 = Utf8               toString\n-   #86 = Utf8               ()Ljava/lang/String;\n-   #87 = Utf8               i\n-   #88 = Utf8               I\n-   #89 = Utf8               buffer\n-   #90 = Utf8               Ljava/lang/StringBuilder;\n-   #91 = Class              #122          // java/lang/StringBuilder\n-   #92 = Utf8               SourceFile\n-   #93 = Utf8               PrefixFileFilter.java\n-   #94 = Class              #132          // org/apache/commons/io/IOCase\n-   #95 = NameAndType        #136:#44      // SENSITIVE:Lorg/apache/commons/io/IOCase;\n-   #96 = NameAndType        #45:#57       // \"<init>\":(Ljava/util/List;Lorg/apache/commons/io/IOCase;)V\n-   #97 = NameAndType        #45:#137      // \"<init>\":()V\n-   #98 = Utf8               java/lang/IllegalArgumentException\n-   #99 = Utf8               The list of prefixes must not be null\n-  #100 = NameAndType        #45:#63       // \"<init>\":(Ljava/lang/String;)V\n-  #101 = NameAndType        #138:#42      // EMPTY_STRING_ARRAY:[Ljava/lang/String;\n-  #102 = Class              #131          // java/util/List\n-  #103 = NameAndType        #139:#140     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #104 = NameAndType        #41:#42       // prefixes:[Ljava/lang/String;\n-  #105 = NameAndType        #43:#44       // caseSensitivity:Lorg/apache/commons/io/IOCase;\n-  #106 = NameAndType        #45:#67       // \"<init>\":(Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n-  #107 = NameAndType        #45:#69       // \"<init>\":([Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n-  #108 = Utf8               The prefix must not be null\n-  #109 = Utf8               java/lang/String\n-  #110 = Utf8               The array of prefixes must not be null\n-  #111 = Class              #141          // java/lang/System\n-  #112 = NameAndType        #142:#143     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #113 = Class              #133          // java/io/File\n-  #114 = NameAndType        #144:#86      // getName:()Ljava/lang/String;\n-  #115 = NameAndType        #70:#84       // accept:(Ljava/lang/String;)Z\n-  #116 = Class              #134          // java/nio/file/Path\n-  #117 = NameAndType        #145:#146     // getFileName:()Ljava/nio/file/Path;\n-  #118 = NameAndType        #147:#148     // toFile:()Ljava/io/File;\n-  #119 = NameAndType        #70:#71       // accept:(Ljava/io/File;)Z\n-  #120 = NameAndType        #149:#150     // toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n-  #121 = NameAndType        #151:#152     // checkStartsWith:(Ljava/lang/String;Ljava/lang/String;)Z\n-  #122 = Utf8               java/lang/StringBuilder\n-  #123 = NameAndType        #85:#86       // toString:()Ljava/lang/String;\n-  #124 = NameAndType        #153:#154     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #125 = Utf8               (\n-  #126 = Utf8               ,\n-  #127 = Utf8               )\n-  #128 = Utf8               org/apache/commons/io/filefilter/PrefixFileFilter\n-  #129 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n-  #130 = Utf8               java/io/Serializable\n-  #131 = Utf8               java/util/List\n-  #132 = Utf8               org/apache/commons/io/IOCase\n-  #133 = Utf8               java/io/File\n-  #134 = Utf8               java/nio/file/Path\n-  #135 = Utf8               java/nio/file/attribute/BasicFileAttributes\n-  #136 = Utf8               SENSITIVE\n-  #137 = Utf8               ()V\n-  #138 = Utf8               EMPTY_STRING_ARRAY\n-  #139 = Utf8               toArray\n-  #140 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n-  #141 = Utf8               java/lang/System\n-  #142 = Utf8               arraycopy\n-  #143 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #144 = Utf8               getName\n-  #145 = Utf8               getFileName\n-  #146 = Utf8               ()Ljava/nio/file/Path;\n-  #147 = Utf8               toFile\n-  #148 = Utf8               ()Ljava/io/File;\n-  #149 = Utf8               toFileVisitResult\n-  #150 = Utf8               (ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n-  #151 = Utf8               checkStartsWith\n-  #152 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Z\n-  #153 = Utf8               append\n-  #154 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #59 = Class              #124          // java/util/List\n+   #60 = Class              #125          // org/apache/commons/io/IOCase\n+   #61 = Utf8               (Ljava/util/List<Ljava/lang/String;>;Lorg/apache/commons/io/IOCase;)V\n+   #62 = Utf8               (Ljava/lang/String;)V\n+   #63 = Utf8               prefix\n+   #64 = Utf8               Ljava/lang/String;\n+   #65 = Utf8               ([Ljava/lang/String;)V\n+   #66 = Utf8               (Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n+   #67 = Utf8               ([Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n+   #68 = Utf8               accept\n+   #69 = Utf8               (Ljava/io/File;)Z\n+   #70 = Utf8               file\n+   #71 = Utf8               Ljava/io/File;\n+   #72 = Class              #126          // java/io/File\n+   #73 = Utf8               (Ljava/io/File;Ljava/lang/String;)Z\n+   #74 = Utf8               name\n+   #75 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;\n+   #76 = Utf8               Ljava/nio/file/Path;\n+   #77 = Utf8               attributes\n+   #78 = Utf8               Ljava/nio/file/attribute/BasicFileAttributes;\n+   #79 = Utf8               fileName\n+   #80 = Class              #127          // java/nio/file/Path\n+   #81 = Class              #128          // java/nio/file/attribute/BasicFileAttributes\n+   #82 = Utf8               (Ljava/lang/String;)Z\n+   #83 = Utf8               toString\n+   #84 = Utf8               ()Ljava/lang/String;\n+   #85 = Utf8               i\n+   #86 = Utf8               I\n+   #87 = Utf8               buffer\n+   #88 = Utf8               Ljava/lang/StringBuilder;\n+   #89 = Utf8               SourceFile\n+   #90 = Utf8               PrefixFileFilter.java\n+   #91 = NameAndType        #129:#44      // SENSITIVE:Lorg/apache/commons/io/IOCase;\n+   #92 = NameAndType        #45:#57       // \"<init>\":(Ljava/util/List;Lorg/apache/commons/io/IOCase;)V\n+   #93 = NameAndType        #45:#130      // \"<init>\":()V\n+   #94 = Utf8               java/lang/IllegalArgumentException\n+   #95 = Utf8               The list of prefixes must not be null\n+   #96 = NameAndType        #45:#62       // \"<init>\":(Ljava/lang/String;)V\n+   #97 = NameAndType        #131:#42      // EMPTY_STRING_ARRAY:[Ljava/lang/String;\n+   #98 = NameAndType        #132:#133     // toArray:([Ljava/lang/Object;)[Ljava/lang/Object;\n+   #99 = NameAndType        #41:#42       // prefixes:[Ljava/lang/String;\n+  #100 = NameAndType        #43:#44       // caseSensitivity:Lorg/apache/commons/io/IOCase;\n+  #101 = NameAndType        #45:#66       // \"<init>\":(Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n+  #102 = NameAndType        #45:#67       // \"<init>\":([Ljava/lang/String;Lorg/apache/commons/io/IOCase;)V\n+  #103 = Utf8               The prefix must not be null\n+  #104 = Utf8               java/lang/String\n+  #105 = Utf8               The array of prefixes must not be null\n+  #106 = Class              #134          // java/lang/System\n+  #107 = NameAndType        #135:#136     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #108 = NameAndType        #137:#84      // getName:()Ljava/lang/String;\n+  #109 = NameAndType        #68:#82       // accept:(Ljava/lang/String;)Z\n+  #110 = NameAndType        #138:#139     // getFileName:()Ljava/nio/file/Path;\n+  #111 = NameAndType        #140:#141     // toFile:()Ljava/io/File;\n+  #112 = NameAndType        #68:#69       // accept:(Ljava/io/File;)Z\n+  #113 = NameAndType        #142:#143     // toFileVisitResult:(ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+  #114 = NameAndType        #144:#145     // checkStartsWith:(Ljava/lang/String;Ljava/lang/String;)Z\n+  #115 = Utf8               java/lang/StringBuilder\n+  #116 = NameAndType        #83:#84       // toString:()Ljava/lang/String;\n+  #117 = NameAndType        #146:#147     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #118 = Utf8               (\n+  #119 = Utf8               ,\n+  #120 = Utf8               )\n+  #121 = Utf8               org/apache/commons/io/filefilter/PrefixFileFilter\n+  #122 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter\n+  #123 = Utf8               java/io/Serializable\n+  #124 = Utf8               java/util/List\n+  #125 = Utf8               org/apache/commons/io/IOCase\n+  #126 = Utf8               java/io/File\n+  #127 = Utf8               java/nio/file/Path\n+  #128 = Utf8               java/nio/file/attribute/BasicFileAttributes\n+  #129 = Utf8               SENSITIVE\n+  #130 = Utf8               ()V\n+  #131 = Utf8               EMPTY_STRING_ARRAY\n+  #132 = Utf8               toArray\n+  #133 = Utf8               ([Ljava/lang/Object;)[Ljava/lang/Object;\n+  #134 = Utf8               java/lang/System\n+  #135 = Utf8               arraycopy\n+  #136 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+  #137 = Utf8               getName\n+  #138 = Utf8               getFileName\n+  #139 = Utf8               ()Ljava/nio/file/Path;\n+  #140 = Utf8               toFile\n+  #141 = Utf8               ()Ljava/io/File;\n+  #142 = Utf8               toFileVisitResult\n+  #143 = Utf8               (ZLjava/nio/file/Path;)Ljava/nio/file/FileVisitResult;\n+  #144 = Utf8               checkStartsWith\n+  #145 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Z\n+  #146 = Utf8               append\n+  #147 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n {\n   private static final long serialVersionUID = 8533897440809599867l;\n     descriptor: J\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: long 8533897440809599867l\n \n   private final java.lang.String[] prefixes;\n@@ -247,15 +240,15 @@\n           stack = []\n         frame_type = 90 /* same_locals_1_stack_item */\n           stack = [ class org/apache/commons/io/filefilter/PrefixFileFilter ]\n         frame_type = 255 /* full_frame */\n           offset_delta = 0\n           locals = [ class org/apache/commons/io/filefilter/PrefixFileFilter, class java/util/List, class org/apache/commons/io/IOCase ]\n           stack = [ class org/apache/commons/io/filefilter/PrefixFileFilter, class org/apache/commons/io/IOCase ]\n-    Signature: #62                          // (Ljava/util/List<Ljava/lang/String;>;Lorg/apache/commons/io/IOCase;)V\n+    Signature: #61                          // (Ljava/util/List<Ljava/lang/String;>;Lorg/apache/commons/io/IOCase;)V\n \n   public org.apache.commons.io.filefilter.PrefixFileFilter(java.lang.String);\n     descriptor: (Ljava/lang/String;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n"}]}
