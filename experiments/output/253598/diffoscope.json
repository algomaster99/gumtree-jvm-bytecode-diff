{"diffoscope-json-version": 1, "source1": "first/AbstractExpressionHandler.class", "source2": "second/AbstractExpressionHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,18 +9,18 @@\n {\n     private final IndentationCheck indentCheck;\n     private final DetailAST mainAst;\n     private final String typeName;\n     private final AbstractExpressionHandler parent;\n     private IndentLevel indent;\n     \n-    protected AbstractExpressionHandler(final IndentationCheck indentCheck, final String typeName, final DetailAST expr, final AbstractExpressionHandler parent) {\n+    protected AbstractExpressionHandler(final IndentationCheck indentCheck, final String typeName, final DetailAST mainAst, final AbstractExpressionHandler parent) {\n         this.indentCheck = indentCheck;\n         this.typeName = typeName;\n-        this.mainAst = expr;\n+        this.mainAst = mainAst;\n         this.parent = parent;\n     }\n     \n     public abstract void checkIndentation();\n     \n     public final IndentLevel getIndent() {\n         if (this.indent == null) {\n@@ -29,182 +29,176 @@\n         return this.indent;\n     }\n     \n     protected IndentLevel getIndentImpl() {\n         return this.parent.getSuggestedChildIndent(this);\n     }\n     \n-    public IndentLevel getSuggestedChildIndent(final AbstractExpressionHandler child) {\n+    public IndentLevel getSuggestedChildIndent(final AbstractExpressionHandler abstractExpressionHandler) {\n         return new IndentLevel(this.getIndent(), new int[] { this.getBasicOffset() });\n     }\n     \n-    protected final void logError(final DetailAST ast, final String subtypeName, final int actualIndent) {\n-        this.logError(ast, subtypeName, actualIndent, this.getIndent());\n+    protected final void logError(final DetailAST detailAST, final String s, final int n) {\n+        this.logError(detailAST, s, n, this.getIndent());\n     }\n     \n-    protected final void logError(final DetailAST ast, final String subtypeName, final int actualIndent, final IndentLevel expectedIndent) {\n-        String typeStr;\n-        if (subtypeName.isEmpty()) {\n-            typeStr = \"\";\n+    protected final void logError(final DetailAST detailAST, final String s, final int i, final IndentLevel indentLevel) {\n+        String s2;\n+        if (s.isEmpty()) {\n+            s2 = \"\";\n         }\n         else {\n-            typeStr = \" \" + subtypeName;\n+            s2 = \" \" + s;\n         }\n-        String messageKey = \"indentation.error\";\n-        if (expectedIndent.isMultiLevel()) {\n-            messageKey = \"indentation.error.multi\";\n+        String s3 = \"indentation.error\";\n+        if (indentLevel.isMultiLevel()) {\n+            s3 = \"indentation.error.multi\";\n         }\n-        this.indentCheck.indentationLog(ast, messageKey, new Object[] { this.typeName + typeStr, Integer.valueOf(actualIndent), expectedIndent });\n+        this.indentCheck.indentationLog(detailAST, s3, new Object[] { this.typeName + s2, Integer.valueOf(i), indentLevel });\n     }\n     \n-    private void logChildError(final DetailAST ast, final int actualIndent, final IndentLevel expectedIndent) {\n-        String messageKey = \"indentation.child.error\";\n-        if (expectedIndent.isMultiLevel()) {\n-            messageKey = \"indentation.child.error.multi\";\n+    private void logChildError(final DetailAST detailAST, final int i, final IndentLevel indentLevel) {\n+        String s = \"indentation.child.error\";\n+        if (indentLevel.isMultiLevel()) {\n+            s = \"indentation.child.error.multi\";\n         }\n-        this.indentCheck.indentationLog(ast, messageKey, new Object[] { this.typeName, Integer.valueOf(actualIndent), expectedIndent });\n+        this.indentCheck.indentationLog(detailAST, s, new Object[] { this.typeName, Integer.valueOf(i), indentLevel });\n     }\n     \n-    protected final boolean isOnStartOfLine(final DetailAST ast) {\n-        return this.getLineStart(ast) == this.expandedTabsColumnNo(ast);\n+    protected final boolean isOnStartOfLine(final DetailAST detailAST) {\n+        return this.getLineStart(detailAST) == this.expandedTabsColumnNo(detailAST);\n     }\n     \n-    public static DetailAST getFirstToken(final DetailAST ast) {\n-        DetailAST first = ast;\n-        for (DetailAST child = ast.getFirstChild(); child != null; child = child.getNextSibling()) {\n-            final DetailAST toTest = getFirstToken(child);\n-            if (toTest.getColumnNo() < first.getColumnNo()) {\n-                first = toTest;\n+    public static DetailAST getFirstToken(final DetailAST detailAST) {\n+        DetailAST detailAST2 = detailAST;\n+        for (DetailAST detailAST3 = detailAST.getFirstChild(); detailAST3 != null; detailAST3 = detailAST3.getNextSibling()) {\n+            final DetailAST firstToken = getFirstToken(detailAST3);\n+            if (firstToken.getColumnNo() < detailAST2.getColumnNo()) {\n+                detailAST2 = firstToken;\n             }\n         }\n-        return first;\n+        return detailAST2;\n     }\n     \n-    protected final int getLineStart(final DetailAST ast) {\n-        return this.getLineStart(ast.getLineNo());\n+    protected final int getLineStart(final DetailAST detailAST) {\n+        return this.getLineStart(detailAST.getLineNo());\n     }\n     \n-    protected final int getLineStart(final int lineNo) {\n-        return this.getLineStart(this.indentCheck.getLine(lineNo - 1));\n+    protected final int getLineStart(final int n) {\n+        return this.getLineStart(this.indentCheck.getLine(n - 1));\n     }\n     \n-    private int getLineStart(final String line) {\n+    private int getLineStart(final String s) {\n         int index;\n-        for (index = 0; Character.isWhitespace(line.charAt(index)); ++index) {}\n-        return CommonUtil.lengthExpandedTabs(line, index, this.indentCheck.getIndentationTabWidth());\n+        for (index = 0; Character.isWhitespace(s.charAt(index)); ++index) {}\n+        return CommonUtil.lengthExpandedTabs(s, index, this.indentCheck.getIndentationTabWidth());\n     }\n     \n     protected boolean shouldIncreaseIndent() {\n         return true;\n     }\n     \n-    private void checkLinesIndent(final DetailAstSet astSet, final IndentLevel indentLevel, final boolean firstLineMatches, final int firstLine, final boolean allowNesting) {\n-        if (!astSet.isEmpty()) {\n-            final DetailAST startLineAst = astSet.firstLine();\n-            final int endLine = (int)astSet.lastLine();\n-            int startCol = this.expandedTabsColumnNo(astSet.firstLine());\n-            final int realStartCol = this.getLineStart(this.indentCheck.getLine(startLineAst.getLineNo() - 1));\n-            if (firstLineMatches && !allowNesting) {\n-                startCol = realStartCol;\n-            }\n-            if (realStartCol == startCol) {\n-                this.checkLineIndent(startLineAst, indentLevel, firstLineMatches);\n-            }\n-            IndentLevel theLevel = indentLevel;\n-            if (firstLineMatches || (firstLine > this.mainAst.getLineNo() && this.shouldIncreaseIndent())) {\n-                theLevel = new IndentLevel(indentLevel, new int[] { this.getBasicOffset() });\n-            }\n-            for (int i = startLineAst.getLineNo() + 1; i <= endLine; ++i) {\n-                final Integer col = astSet.getStartColumn(i);\n-                if (col != null) {\n-                    this.checkLineIndent(astSet.getAst(i), theLevel, false);\n+    private void checkLinesIndent(final DetailAstSet set, final IndentLevel indentLevel, final boolean b, final int n, final boolean b2) {\n+        if (!set.isEmpty()) {\n+            final DetailAST firstLine = set.firstLine();\n+            final int intValue = (int)set.lastLine();\n+            int expandedTabsColumnNo = this.expandedTabsColumnNo(set.firstLine());\n+            final int lineStart = this.getLineStart(this.indentCheck.getLine(firstLine.getLineNo() - 1));\n+            if (b && !b2) {\n+                expandedTabsColumnNo = lineStart;\n+            }\n+            if (lineStart == expandedTabsColumnNo) {\n+                this.checkLineIndent(firstLine, indentLevel, b);\n+            }\n+            IndentLevel indentLevel2 = indentLevel;\n+            if (b || (n > this.mainAst.getLineNo() && this.shouldIncreaseIndent())) {\n+                indentLevel2 = new IndentLevel(indentLevel, new int[] { this.getBasicOffset() });\n+            }\n+            for (int i = firstLine.getLineNo() + 1; i <= intValue; ++i) {\n+                if (set.getStartColumn(i) != null) {\n+                    this.checkLineIndent(set.getAst(i), indentLevel2, false);\n                 }\n             }\n         }\n     }\n     \n-    private void checkLineIndent(final DetailAST ast, final IndentLevel indentLevel, final boolean mustMatch) {\n-        final String line = this.indentCheck.getLine(ast.getLineNo() - 1);\n-        final int start = this.getLineStart(line);\n-        final int columnNumber = this.expandedTabsColumnNo(ast);\n-        if ((mustMatch && !indentLevel.isAcceptable(start)) || (!mustMatch && columnNumber == start && indentLevel.isGreaterThan(start))) {\n-            this.logChildError(ast, start, indentLevel);\n+    private void checkLineIndent(final DetailAST detailAST, final IndentLevel indentLevel, final boolean b) {\n+        final int lineStart = this.getLineStart(this.indentCheck.getLine(detailAST.getLineNo() - 1));\n+        final int expandedTabsColumnNo = this.expandedTabsColumnNo(detailAST);\n+        if ((b && !indentLevel.isAcceptable(lineStart)) || (!b && expandedTabsColumnNo == lineStart && indentLevel.isGreaterThan(lineStart))) {\n+            this.logChildError(detailAST, lineStart, indentLevel);\n         }\n     }\n     \n-    protected void checkWrappingIndentation(final DetailAST firstNode, final DetailAST lastNode) {\n-        this.indentCheck.getLineWrappingHandler().checkIndentation(firstNode, lastNode);\n+    protected void checkWrappingIndentation(final DetailAST detailAST, final DetailAST detailAST2) {\n+        this.indentCheck.getLineWrappingHandler().checkIndentation(detailAST, detailAST2);\n     }\n     \n-    protected void checkWrappingIndentation(final DetailAST firstNode, final DetailAST lastNode, final int wrappedIndentLevel, final int startIndent, final boolean ignoreFirstLine) {\n-        this.indentCheck.getLineWrappingHandler().checkIndentation(firstNode, lastNode, wrappedIndentLevel, startIndent, LineWrappingHandler.LineWrappingOptions.ofBoolean(ignoreFirstLine));\n+    protected void checkWrappingIndentation(final DetailAST detailAST, final DetailAST detailAST2, final int n, final int n2, final boolean b) {\n+        this.indentCheck.getLineWrappingHandler().checkIndentation(detailAST, detailAST2, n, n2, LineWrappingHandler.LineWrappingOptions.ofBoolean(b));\n     }\n     \n-    protected final void checkChildren(final DetailAST parentNode, final int[] tokenTypes, final IndentLevel startIndent, final boolean firstLineMatches, final boolean allowNesting) {\n-        Arrays.sort(tokenTypes);\n-        for (DetailAST child = parentNode.getFirstChild(); child != null; child = child.getNextSibling()) {\n-            if (Arrays.binarySearch(tokenTypes, child.getType()) >= 0) {\n-                this.checkExpressionSubtree(child, startIndent, firstLineMatches, allowNesting);\n+    protected final void checkChildren(final DetailAST detailAST, final int[] array, final IndentLevel indentLevel, final boolean b, final boolean b2) {\n+        Arrays.sort(array);\n+        for (DetailAST detailAST2 = detailAST.getFirstChild(); detailAST2 != null; detailAST2 = detailAST2.getNextSibling()) {\n+            if (Arrays.binarySearch(array, detailAST2.getType()) >= 0) {\n+                this.checkExpressionSubtree(detailAST2, indentLevel, b, b2);\n             }\n         }\n     }\n     \n-    protected final void checkExpressionSubtree(final DetailAST tree, final IndentLevel indentLevel, final boolean firstLineMatches, final boolean allowNesting) {\n-        final DetailAstSet subtreeAst = new DetailAstSet(this.indentCheck);\n-        final int firstLine = getFirstLine(tree);\n-        if (firstLineMatches && !allowNesting) {\n-            final DetailAST firstAst = getFirstAstNode(tree);\n-            subtreeAst.addAst(firstAst);\n+    protected final void checkExpressionSubtree(final DetailAST detailAST, final IndentLevel indentLevel, final boolean b, final boolean b2) {\n+        final DetailAstSet set = new DetailAstSet(this.indentCheck);\n+        final int firstLine = getFirstLine(detailAST);\n+        if (b && !b2) {\n+            set.addAst(getFirstAstNode(detailAST));\n         }\n-        this.findSubtreeAst(subtreeAst, tree, allowNesting);\n-        this.checkLinesIndent(subtreeAst, indentLevel, firstLineMatches, firstLine, allowNesting);\n+        this.findSubtreeAst(set, detailAST, b2);\n+        this.checkLinesIndent(set, indentLevel, b, firstLine, b2);\n     }\n     \n-    protected static int getFirstLine(final DetailAST tree) {\n-        return getFirstAstNode(tree).getLineNo();\n+    protected static int getFirstLine(final DetailAST detailAST) {\n+        return getFirstAstNode(detailAST).getLineNo();\n     }\n     \n-    protected static DetailAST getFirstAstNode(final DetailAST ast) {\n-        DetailAST curNode = ast;\n-        DetailAST realStart = ast;\n-        while (curNode != null) {\n-            if (curNode.getLineNo() < realStart.getLineNo() || (curNode.getLineNo() == realStart.getLineNo() && curNode.getColumnNo() < realStart.getColumnNo())) {\n-                realStart = curNode;\n+    protected static DetailAST getFirstAstNode(final DetailAST detailAST) {\n+        DetailAST parent = detailAST;\n+        DetailAST detailAST2 = detailAST;\n+        while (parent != null) {\n+            if (parent.getLineNo() < detailAST2.getLineNo() || (parent.getLineNo() == detailAST2.getLineNo() && parent.getColumnNo() < detailAST2.getColumnNo())) {\n+                detailAST2 = parent;\n             }\n-            DetailAST toVisit;\n-            for (toVisit = curNode.getFirstChild(); curNode != ast && toVisit == null; toVisit = curNode.getNextSibling(), curNode = curNode.getParent()) {}\n-            curNode = toVisit;\n+            DetailAST detailAST3;\n+            for (detailAST3 = parent.getFirstChild(); parent != detailAST && detailAST3 == null; detailAST3 = parent.getNextSibling(), parent = parent.getParent()) {}\n+            parent = detailAST3;\n         }\n-        return realStart;\n+        return detailAST2;\n     }\n     \n-    protected final int expandedTabsColumnNo(final DetailAST ast) {\n-        final String line = this.indentCheck.getLine(ast.getLineNo() - 1);\n-        return CommonUtil.lengthExpandedTabs(line, ast.getColumnNo(), this.indentCheck.getIndentationTabWidth());\n+    protected final int expandedTabsColumnNo(final DetailAST detailAST) {\n+        return CommonUtil.lengthExpandedTabs(this.indentCheck.getLine(detailAST.getLineNo() - 1), detailAST.getColumnNo(), this.indentCheck.getIndentationTabWidth());\n     }\n     \n-    protected final void findSubtreeAst(final DetailAstSet astSet, final DetailAST tree, final boolean allowNesting) {\n-        if (!this.indentCheck.getHandlerFactory().isHandledType(tree.getType())) {\n-            final int lineNum = tree.getLineNo();\n-            final Integer colNum = astSet.getStartColumn(lineNum);\n-            final int thisLineColumn = this.expandedTabsColumnNo(tree);\n-            if (colNum == null || thisLineColumn < colNum) {\n-                astSet.addAst(tree);\n+    protected final void findSubtreeAst(final DetailAstSet set, final DetailAST detailAST, final boolean b) {\n+        if (!this.indentCheck.getHandlerFactory().isHandledType(detailAST.getType())) {\n+            final Integer startColumn = set.getStartColumn(detailAST.getLineNo());\n+            final int expandedTabsColumnNo = this.expandedTabsColumnNo(detailAST);\n+            if (startColumn == null || expandedTabsColumnNo < startColumn) {\n+                set.addAst(detailAST);\n             }\n-            for (DetailAST node = tree.getFirstChild(); node != null; node = node.getNextSibling()) {\n-                this.findSubtreeAst(astSet, node, allowNesting);\n+            for (DetailAST detailAST2 = detailAST.getFirstChild(); detailAST2 != null; detailAST2 = detailAST2.getNextSibling()) {\n+                this.findSubtreeAst(set, detailAST2, b);\n             }\n         }\n     }\n     \n     protected void checkModifiers() {\n-        final DetailAST modifiers = this.mainAst.findFirstToken(5);\n-        for (DetailAST modifier = modifiers.getFirstChild(); modifier != null; modifier = modifier.getNextSibling()) {\n-            if (this.isOnStartOfLine(modifier) && !this.getIndent().isAcceptable(this.expandedTabsColumnNo(modifier))) {\n-                this.logError(modifier, \"modifier\", this.expandedTabsColumnNo(modifier));\n+        for (DetailAST detailAST = this.mainAst.findFirstToken(5).getFirstChild(); detailAST != null; detailAST = detailAST.getNextSibling()) {\n+            if (this.isOnStartOfLine(detailAST) && !this.getIndent().isAcceptable(this.expandedTabsColumnNo(detailAST))) {\n+                this.logError(detailAST, \"modifier\", this.expandedTabsColumnNo(detailAST));\n             }\n         }\n     }\n     \n     protected final IndentationCheck getIndentCheck() {\n         return this.indentCheck;\n     }\n@@ -221,23 +215,22 @@\n         return this.indentCheck.getBasicOffset();\n     }\n     \n     protected final int getBraceAdjustment() {\n         return this.indentCheck.getBraceAdjustment();\n     }\n     \n-    protected final void checkRightParen(final DetailAST lparen, final DetailAST rparen) {\n-        if (rparen != null) {\n-            final int rparenLevel = this.expandedTabsColumnNo(rparen);\n-            final int lparenLevel = this.expandedTabsColumnNo(lparen);\n-            if (rparenLevel != lparenLevel + 1 && !this.getIndent().isAcceptable(rparenLevel) && this.isOnStartOfLine(rparen)) {\n-                this.logError(rparen, \"rparen\", rparenLevel);\n+    protected final void checkRightParen(final DetailAST detailAST, final DetailAST detailAST2) {\n+        if (detailAST2 != null) {\n+            final int expandedTabsColumnNo = this.expandedTabsColumnNo(detailAST2);\n+            if (expandedTabsColumnNo != this.expandedTabsColumnNo(detailAST) + 1 && !this.getIndent().isAcceptable(expandedTabsColumnNo) && this.isOnStartOfLine(detailAST2)) {\n+                this.logError(detailAST2, \"rparen\", expandedTabsColumnNo);\n             }\n         }\n     }\n     \n-    protected final void checkLeftParen(final DetailAST lparen) {\n-        if (lparen != null && !this.getIndent().isAcceptable(this.expandedTabsColumnNo(lparen)) && this.isOnStartOfLine(lparen)) {\n-            this.logError(lparen, \"lparen\", this.expandedTabsColumnNo(lparen));\n+    protected final void checkLeftParen(final DetailAST detailAST) {\n+        if (detailAST != null && !this.getIndent().isAcceptable(this.expandedTabsColumnNo(detailAST)) && this.isOnStartOfLine(detailAST)) {\n+            this.logError(detailAST, \"lparen\", this.expandedTabsColumnNo(detailAST));\n         }\n     }\n }\n"}]}
