{"diffoscope-json-version": 1, "source1": "first/SeparatorWrapCheck.class", "source2": "second/SeparatorWrapCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -16,38 +16,37 @@\n     public static final String MSG_LINE_NEW = \"line.new\";\n     private WrapOption option;\n     \n     public SeparatorWrapCheck() {\n         this.option = WrapOption.EOL;\n     }\n     \n-    public void setOption(final String optionStr) {\n-        this.option = WrapOption.valueOf(optionStr.trim().toUpperCase(Locale.ENGLISH));\n+    public void setOption(final String s) {\n+        this.option = WrapOption.valueOf(s.trim().toUpperCase(Locale.ENGLISH));\n     }\n     \n     public int[] getDefaultTokens() {\n         return new int[] { 59, 74 };\n     }\n     \n     public int[] getAcceptableTokens() {\n         return new int[] { 59, 74, 45, 171, 170, 76, 77, 17, 48, 180 };\n     }\n     \n     public int[] getRequiredTokens() {\n         return CommonUtil.EMPTY_INT_ARRAY;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        final String text = ast.getText();\n-        final int colNo = ast.getColumnNo();\n-        final int lineNo = ast.getLineNo();\n-        final int[] currentLine = this.getLineCodePoints(lineNo - 1);\n-        final boolean isLineEmptyAfterToken = CodePointUtil.isBlank(Arrays.copyOfRange(currentLine, colNo + text.length(), currentLine.length));\n-        final boolean isLineEmptyBeforeToken = CodePointUtil.isBlank(Arrays.copyOfRange(currentLine, 0, colNo));\n-        if (this.option == WrapOption.NL && isLineEmptyAfterToken) {\n-            this.log(ast, \"line.new\", new Object[] { text });\n+    public void visitToken(final DetailAST detailAST) {\n+        final String text = detailAST.getText();\n+        final int columnNo = detailAST.getColumnNo();\n+        final int[] lineCodePoints = this.getLineCodePoints(detailAST.getLineNo() - 1);\n+        final boolean blank = CodePointUtil.isBlank(Arrays.copyOfRange(lineCodePoints, columnNo + text.length(), lineCodePoints.length));\n+        final boolean blank2 = CodePointUtil.isBlank(Arrays.copyOfRange(lineCodePoints, 0, columnNo));\n+        if (this.option == WrapOption.NL && blank) {\n+            this.log(detailAST, \"line.new\", new Object[] { text });\n         }\n-        else if (this.option == WrapOption.EOL && isLineEmptyBeforeToken) {\n-            this.log(ast, \"line.previous\", new Object[] { text });\n+        else if (this.option == WrapOption.EOL && blank2) {\n+            this.log(detailAST, \"line.previous\", new Object[] { text });\n         }\n     }\n }\n"}]}
