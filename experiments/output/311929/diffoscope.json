{"diffoscope-json-version": 1, "source1": "first/Zip64ExtendedInformationExtraField.class", "source2": "second/Zip64ExtendedInformationExtraField.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,158 +1,158 @@\n-  SHA-256 checksum ca03d6c14769bbe89084b9eea9326efa5a22081ee984ab9f2245f75045bdae1d\n+  SHA-256 checksum a4d2bbfcf59f706fd97750b00582385423a98fbb7225590522650bab5e4f8d82\n   Compiled from \"Zip64ExtendedInformationExtraField.java\"\n public class org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField implements org.apache.commons.compress.archivers.zip.ZipExtraField\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #18                         // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-  super_class: #37                        // java/lang/Object\n+  this_class: #10                         // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+  super_class: #4                         // java/lang/Object\n   interfaces: 1, fields: 7, methods: 21, attributes: 1\n Constant pool:\n-    #1 = Class              #90           // org/apache/commons/compress/archivers/zip/ZipConstants\n-    #2 = Methodref          #37.#91       // java/lang/Object.\"<init>\":()V\n-    #3 = Methodref          #18.#92       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n-    #4 = Fieldref           #18.#93       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-    #5 = Fieldref           #18.#94       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-    #6 = Fieldref           #18.#95       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-    #7 = Fieldref           #18.#96       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-    #8 = Methodref          #24.#97       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:()[B\n-    #9 = Methodref          #98.#99       // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #10 = Methodref          #18.#100      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCentralDirectoryLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #11 = Methodref          #14.#101      // org/apache/commons/compress/archivers/zip/ZipShort.getValue:()I\n-   #12 = Methodref          #18.#102      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.addSizes:([B)I\n-   #13 = Methodref          #26.#97       // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n-   #14 = Class              #103          // org/apache/commons/compress/archivers/zip/ZipShort\n-   #15 = Methodref          #14.#104      // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-   #16 = Fieldref           #18.#105      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #17 = Class              #106          // java/lang/IllegalArgumentException\n-   #18 = Class              #107          // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-   #19 = String             #108          // Zip64 extended information must contain both size values in the local file header.\n-   #20 = Methodref          #17.#109      // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #21 = Fieldref           #110.#111     // org/apache/commons/compress/utils/ByteUtils.EMPTY_BYTE_ARRAY:[B\n-   #22 = Fieldref           #18.#112      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.rawCentralDirectoryData:[B\n-   #23 = Methodref          #18.#113      // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.parseFromLocalFileData:([BII)V\n-   #24 = Class              #114          // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-   #25 = Methodref          #24.#115      // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-   #26 = Class              #116          // org/apache/commons/compress/archivers/zip/ZipLong\n-   #27 = Methodref          #26.#115      // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n-   #28 = Class              #117          // java/util/zip/ZipException\n-   #29 = Methodref          #28.#109      // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-   #30 = Class              #118          // java/lang/StringBuilder\n-   #31 = Methodref          #30.#91       // java/lang/StringBuilder.\"<init>\":()V\n-   #32 = String             #119          // Central directory zip64 extended information extra field\\'s length doesn\\'t match central directory data.  Expected length\n-   #33 = Methodref          #30.#120      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #34 = Methodref          #30.#121      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #35 = String             #122          //  but is\n-   #36 = Methodref          #30.#123      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #37 = Class              #124          // java/lang/Object\n-   #38 = Class              #125          // org/apache/commons/compress/archivers/zip/ZipExtraField\n-   #39 = Utf8               HEADER_ID\n-   #40 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #41 = Utf8               LFH_MUST_HAVE_BOTH_SIZES_MSG\n-   #42 = Utf8               Ljava/lang/String;\n-   #43 = Utf8               ConstantValue\n-   #44 = Utf8               size\n-   #45 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #46 = Utf8               compressedSize\n-   #47 = Utf8               relativeHeaderOffset\n-   #48 = Utf8               diskStart\n-   #49 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #50 = Utf8               rawCentralDirectoryData\n-   #51 = Utf8               [B\n-   #52 = Utf8               <init>\n-   #53 = Utf8               ()V\n-   #54 = Utf8               Code\n-   #55 = Utf8               LineNumberTable\n-   #56 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #57 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n-   #58 = Utf8               addSizes\n-   #59 = Utf8               ([B)I\n-   #60 = Utf8               StackMapTable\n-   #61 = Utf8               getCentralDirectoryData\n-   #62 = Utf8               ()[B\n-   #63 = Class              #51           // \"[B\"\n-   #64 = Utf8               getCentralDirectoryLength\n-   #65 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #66 = Utf8               getCompressedSize\n-   #67 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #68 = Utf8               getDiskStartNumber\n-   #69 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #70 = Utf8               getHeaderId\n-   #71 = Utf8               getLocalFileDataData\n-   #72 = Utf8               getLocalFileDataLength\n-   #73 = Utf8               getRelativeHeaderOffset\n-   #74 = Utf8               getSize\n-   #75 = Utf8               parseFromCentralDirectoryData\n-   #76 = Utf8               ([BII)V\n-   #77 = Utf8               Exceptions\n-   #78 = Utf8               parseFromLocalFileData\n-   #79 = Utf8               reparseCentralDirectoryData\n-   #80 = Utf8               (ZZZZ)V\n-   #81 = Utf8               setCompressedSize\n-   #82 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n-   #83 = Utf8               setDiskStartNumber\n-   #84 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n-   #85 = Utf8               setRelativeHeaderOffset\n-   #86 = Utf8               setSize\n-   #87 = Utf8               <clinit>\n-   #88 = Utf8               SourceFile\n-   #89 = Utf8               Zip64ExtendedInformationExtraField.java\n-   #90 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n-   #91 = NameAndType        #52:#53       // \"<init>\":()V\n-   #92 = NameAndType        #52:#57       // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n-   #93 = NameAndType        #44:#45       // size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #94 = NameAndType        #46:#45       // compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #95 = NameAndType        #47:#45       // relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-   #96 = NameAndType        #48:#49       // diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-   #97 = NameAndType        #126:#62      // getBytes:()[B\n-   #98 = Class              #127          // java/lang/System\n-   #99 = NameAndType        #128:#129     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #100 = NameAndType        #64:#65       // getCentralDirectoryLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #101 = NameAndType        #130:#131     // getValue:()I\n-  #102 = NameAndType        #58:#59       // addSizes:([B)I\n-  #103 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-  #104 = NameAndType        #52:#132      // \"<init>\":(I)V\n-  #105 = NameAndType        #39:#40       // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #106 = Utf8               java/lang/IllegalArgumentException\n-  #107 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n-  #108 = Utf8               Zip64 extended information must contain both size values in the local file header.\n-  #109 = NameAndType        #52:#133      // \"<init>\":(Ljava/lang/String;)V\n-  #110 = Class              #134          // org/apache/commons/compress/utils/ByteUtils\n-  #111 = NameAndType        #135:#51      // EMPTY_BYTE_ARRAY:[B\n-  #112 = NameAndType        #50:#51       // rawCentralDirectoryData:[B\n-  #113 = NameAndType        #78:#76       // parseFromLocalFileData:([BII)V\n-  #114 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n-  #115 = NameAndType        #52:#136      // \"<init>\":([BI)V\n-  #116 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n-  #117 = Utf8               java/util/zip/ZipException\n-  #118 = Utf8               java/lang/StringBuilder\n-  #119 = Utf8               Central directory zip64 extended information extra field\\'s length doesn\\'t match central directory data.  Expected length\n-  #120 = NameAndType        #137:#138     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #121 = NameAndType        #137:#139     // append:(I)Ljava/lang/StringBuilder;\n-  #122 = Utf8                but is\n-  #123 = NameAndType        #140:#141     // toString:()Ljava/lang/String;\n-  #124 = Utf8               java/lang/Object\n-  #125 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n-  #126 = Utf8               getBytes\n-  #127 = Utf8               java/lang/System\n-  #128 = Utf8               arraycopy\n-  #129 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #130 = Utf8               getValue\n-  #131 = Utf8               ()I\n-  #132 = Utf8               (I)V\n-  #133 = Utf8               (Ljava/lang/String;)V\n-  #134 = Utf8               org/apache/commons/compress/utils/ByteUtils\n-  #135 = Utf8               EMPTY_BYTE_ARRAY\n-  #136 = Utf8               ([BI)V\n-  #137 = Utf8               append\n-  #138 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #139 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #140 = Utf8               toString\n-  #141 = Utf8               ()Ljava/lang/String;\n+    #1 = Class              #2            // org/apache/commons/compress/archivers/zip/ZipConstants\n+    #2 = Utf8               org/apache/commons/compress/archivers/zip/ZipConstants\n+    #3 = Methodref          #4.#5         // java/lang/Object.\"<init>\":()V\n+    #4 = Class              #6            // java/lang/Object\n+    #5 = NameAndType        #7:#8         // \"<init>\":()V\n+    #6 = Utf8               java/lang/Object\n+    #7 = Utf8               <init>\n+    #8 = Utf8               ()V\n+    #9 = Methodref          #10.#11       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.\"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+   #10 = Class              #12           // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+   #11 = NameAndType        #7:#13        // \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+   #12 = Utf8               org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField\n+   #13 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+   #14 = Fieldref           #10.#15       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #15 = NameAndType        #16:#17       // size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #16 = Utf8               size\n+   #17 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #18 = Fieldref           #10.#19       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #19 = NameAndType        #20:#17       // compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #20 = Utf8               compressedSize\n+   #21 = Fieldref           #10.#22       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #22 = NameAndType        #23:#17       // relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+   #23 = Utf8               relativeHeaderOffset\n+   #24 = Fieldref           #10.#25       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #25 = NameAndType        #26:#27       // diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #26 = Utf8               diskStart\n+   #27 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+   #28 = Methodref          #29.#30       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:()[B\n+   #29 = Class              #31           // org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+   #30 = NameAndType        #32:#33       // getBytes:()[B\n+   #31 = Utf8               org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+   #32 = Utf8               getBytes\n+   #33 = Utf8               ()[B\n+   #34 = Methodref          #35.#36       // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #35 = Class              #37           // java/lang/System\n+   #36 = NameAndType        #38:#39       // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #37 = Utf8               java/lang/System\n+   #38 = Utf8               arraycopy\n+   #39 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #40 = Methodref          #10.#41       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCentralDirectoryLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #41 = NameAndType        #42:#43       // getCentralDirectoryLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #42 = Utf8               getCentralDirectoryLength\n+   #43 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #44 = Methodref          #45.#46       // org/apache/commons/compress/archivers/zip/ZipShort.getValue:()I\n+   #45 = Class              #47           // org/apache/commons/compress/archivers/zip/ZipShort\n+   #46 = NameAndType        #48:#49       // getValue:()I\n+   #47 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+   #48 = Utf8               getValue\n+   #49 = Utf8               ()I\n+   #50 = Methodref          #10.#51       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.addSizes:([B)I\n+   #51 = NameAndType        #52:#53       // addSizes:([B)I\n+   #52 = Utf8               addSizes\n+   #53 = Utf8               ([B)I\n+   #54 = Methodref          #55.#30       // org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n+   #55 = Class              #56           // org/apache/commons/compress/archivers/zip/ZipLong\n+   #56 = Utf8               org/apache/commons/compress/archivers/zip/ZipLong\n+   #57 = Methodref          #45.#58       // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+   #58 = NameAndType        #7:#59        // \"<init>\":(I)V\n+   #59 = Utf8               (I)V\n+   #60 = Fieldref           #10.#61       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #61 = NameAndType        #62:#63       // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #62 = Utf8               HEADER_ID\n+   #63 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #64 = Class              #65           // java/lang/IllegalArgumentException\n+   #65 = Utf8               java/lang/IllegalArgumentException\n+   #66 = String             #67           // Zip64 extended information must contain both size values in the local file header.\n+   #67 = Utf8               Zip64 extended information must contain both size values in the local file header.\n+   #68 = Methodref          #64.#69       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #69 = NameAndType        #7:#70        // \"<init>\":(Ljava/lang/String;)V\n+   #70 = Utf8               (Ljava/lang/String;)V\n+   #71 = Fieldref           #72.#73       // org/apache/commons/compress/utils/ByteUtils.EMPTY_BYTE_ARRAY:[B\n+   #72 = Class              #74           // org/apache/commons/compress/utils/ByteUtils\n+   #73 = NameAndType        #75:#76       // EMPTY_BYTE_ARRAY:[B\n+   #74 = Utf8               org/apache/commons/compress/utils/ByteUtils\n+   #75 = Utf8               EMPTY_BYTE_ARRAY\n+   #76 = Utf8               [B\n+   #77 = Fieldref           #10.#78       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.rawCentralDirectoryData:[B\n+   #78 = NameAndType        #79:#76       // rawCentralDirectoryData:[B\n+   #79 = Utf8               rawCentralDirectoryData\n+   #80 = Methodref          #10.#81       // org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.parseFromLocalFileData:([BII)V\n+   #81 = NameAndType        #82:#83       // parseFromLocalFileData:([BII)V\n+   #82 = Utf8               parseFromLocalFileData\n+   #83 = Utf8               ([BII)V\n+   #84 = Methodref          #29.#85       // org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+   #85 = NameAndType        #7:#86        // \"<init>\":([BI)V\n+   #86 = Utf8               ([BI)V\n+   #87 = Methodref          #55.#85       // org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n+   #88 = Class              #89           // java/util/zip/ZipException\n+   #89 = Utf8               java/util/zip/ZipException\n+   #90 = Methodref          #88.#69       // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+   #91 = Class              #92           // java/lang/StringBuilder\n+   #92 = Utf8               java/lang/StringBuilder\n+   #93 = Methodref          #91.#5        // java/lang/StringBuilder.\"<init>\":()V\n+   #94 = String             #95           // Central directory zip64 extended information extra field\\'s length doesn\\'t match central directory data.  Expected length\n+   #95 = Utf8               Central directory zip64 extended information extra field\\'s length doesn\\'t match central directory data.  Expected length\n+   #96 = Methodref          #91.#97       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #97 = NameAndType        #98:#99       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #98 = Utf8               append\n+   #99 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #100 = Methodref          #91.#101      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+  #101 = NameAndType        #98:#102      // append:(I)Ljava/lang/StringBuilder;\n+  #102 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #103 = String             #104          //  but is\n+  #104 = Utf8                but is\n+  #105 = Methodref          #91.#106      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #106 = NameAndType        #107:#108     // toString:()Ljava/lang/String;\n+  #107 = Utf8               toString\n+  #108 = Utf8               ()Ljava/lang/String;\n+  #109 = Class              #110          // org/apache/commons/compress/archivers/zip/ZipExtraField\n+  #110 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n+  #111 = Utf8               LFH_MUST_HAVE_BOTH_SIZES_MSG\n+  #112 = Utf8               Ljava/lang/String;\n+  #113 = Utf8               ConstantValue\n+  #114 = Utf8               Code\n+  #115 = Utf8               LineNumberTable\n+  #116 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #117 = Utf8               StackMapTable\n+  #118 = Utf8               getCentralDirectoryData\n+  #119 = Class              #76           // \"[B\"\n+  #120 = Utf8               getCompressedSize\n+  #121 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+  #122 = Utf8               getDiskStartNumber\n+  #123 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+  #124 = Utf8               getHeaderId\n+  #125 = Utf8               getLocalFileDataData\n+  #126 = Utf8               getLocalFileDataLength\n+  #127 = Utf8               getRelativeHeaderOffset\n+  #128 = Utf8               getSize\n+  #129 = Utf8               parseFromCentralDirectoryData\n+  #130 = Utf8               Exceptions\n+  #131 = Utf8               reparseCentralDirectoryData\n+  #132 = Utf8               (ZZZZ)V\n+  #133 = Utf8               setCompressedSize\n+  #134 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n+  #135 = Utf8               setDiskStartNumber\n+  #136 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+  #137 = Utf8               setRelativeHeaderOffset\n+  #138 = Utf8               setSize\n+  #139 = Utf8               <clinit>\n+  #140 = Utf8               SourceFile\n+  #141 = Utf8               Zip64ExtendedInformationExtraField.java\n {\n   static final org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x0018) ACC_STATIC, ACC_FINAL\n \n   private static final java.lang.String LFH_MUST_HAVE_BOTH_SIZES_MSG = \"Zip64 extended information must contain both size values in the local file header.\";\n     descriptor: Ljava/lang/String;\n@@ -181,54 +181,54 @@\n \n   public org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokespecial #2                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #3                  // Method java/lang/Object.\"<init>\":()V\n          4: return\n       LineNumberTable:\n         line 71: 0\n \n   public org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField(org.apache.commons.compress.archivers.zip.ZipEightByteInteger, org.apache.commons.compress.archivers.zip.ZipEightByteInteger);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=3, args_size=3\n          0: aload_0\n          1: aload_1\n          2: aload_2\n          3: aconst_null\n          4: aconst_null\n-         5: invokespecial #3                  // Method \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n+         5: invokespecial #9                  // Method \"<init>\":(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n          8: return\n       LineNumberTable:\n         line 83: 0\n         line 84: 8\n \n   public org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField(org.apache.commons.compress.archivers.zip.ZipEightByteInteger, org.apache.commons.compress.archivers.zip.ZipEightByteInteger, org.apache.commons.compress.archivers.zip.ZipEightByteInteger, org.apache.commons.compress.archivers.zip.ZipLong);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=5, args_size=5\n          0: aload_0\n-         1: invokespecial #2                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #3                  // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n          5: aload_1\n-         6: putfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         6: putfield      #14                 // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n          9: aload_0\n         10: aload_2\n-        11: putfield      #5                  // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        11: putfield      #18                 // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         14: aload_0\n         15: aload_3\n-        16: putfield      #6                  // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        16: putfield      #21                 // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         19: aload_0\n         20: aload         4\n-        22: putfield      #7                  // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        22: putfield      #24                 // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n         25: return\n       LineNumberTable:\n         line 99: 0\n         line 100: 4\n         line 101: 9\n         line 102: 14\n         line 103: 19\n@@ -238,36 +238,36 @@\n     descriptor: ([B)I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=3, args_size=2\n          0: iconst_0\n          1: istore_2\n          2: aload_0\n-         3: getfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         3: getfield      #14                 // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n          6: ifnull        27\n          9: aload_0\n-        10: getfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-        13: invokevirtual #8                  // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:()[B\n+        10: getfield      #14                 // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        13: invokevirtual #28                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:()[B\n         16: iconst_0\n         17: aload_1\n         18: iconst_0\n         19: bipush        8\n-        21: invokestatic  #9                  // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        21: invokestatic  #34                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         24: iinc          2, 8\n         27: aload_0\n-        28: getfield      #5                  // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        28: getfield      #18                 // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         31: ifnull        52\n         34: aload_0\n-        35: getfield      #5                  // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-        38: invokevirtual #8                  // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:()[B\n+        35: getfield      #18                 // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        38: invokevirtual #28                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:()[B\n         41: iconst_0\n         42: aload_1\n         43: iload_2\n         44: bipush        8\n-        46: invokestatic  #9                  // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        46: invokestatic  #34                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         49: iinc          2, 8\n         52: iload_2\n         53: ireturn\n       LineNumberTable:\n         line 107: 0\n         line 108: 2\n         line 109: 9\n@@ -284,45 +284,45 @@\n \n   public byte[] getCentralDirectoryData();\n     descriptor: ()[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=3, args_size=1\n          0: aload_0\n-         1: invokevirtual #10                 // Method getCentralDirectoryLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-         4: invokevirtual #11                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:()I\n+         1: invokevirtual #40                 // Method getCentralDirectoryLength:()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+         4: invokevirtual #44                 // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:()I\n          7: newarray       byte\n          9: astore_1\n         10: aload_0\n         11: aload_1\n-        12: invokespecial #12                 // Method addSizes:([B)I\n+        12: invokespecial #50                 // Method addSizes:([B)I\n         15: istore_2\n         16: aload_0\n-        17: getfield      #6                  // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        17: getfield      #21                 // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         20: ifnull        41\n         23: aload_0\n-        24: getfield      #6                  // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n-        27: invokevirtual #8                  // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:()[B\n+        24: getfield      #21                 // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        27: invokevirtual #28                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getBytes:()[B\n         30: iconst_0\n         31: aload_1\n         32: iload_2\n         33: bipush        8\n-        35: invokestatic  #9                  // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        35: invokestatic  #34                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         38: iinc          2, 8\n         41: aload_0\n-        42: getfield      #7                  // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        42: getfield      #24                 // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n         45: ifnull        65\n         48: aload_0\n-        49: getfield      #7                  // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n-        52: invokevirtual #13                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n+        49: getfield      #24                 // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        52: invokevirtual #54                 // Method org/apache/commons/compress/archivers/zip/ZipLong.getBytes:()[B\n         55: iconst_0\n         56: aload_1\n         57: iload_2\n         58: iconst_4\n-        59: invokestatic  #9                  // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        59: invokestatic  #34                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         62: iinc          2, 4\n         65: aload_1\n         66: areturn\n       LineNumberTable:\n         line 121: 0\n         line 122: 10\n         line 123: 16\n@@ -339,44 +339,44 @@\n         frame_type = 23 /* same */\n \n   public org.apache.commons.compress.archivers.zip.ZipShort getCentralDirectoryLength();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=1, args_size=1\n-         0: new           #14                 // class org/apache/commons/compress/archivers/zip/ZipShort\n+         0: new           #45                 // class org/apache/commons/compress/archivers/zip/ZipShort\n          3: dup\n          4: aload_0\n-         5: getfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         5: getfield      #14                 // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n          8: ifnull        16\n         11: bipush        8\n         13: goto          17\n         16: iconst_0\n         17: aload_0\n-        18: getfield      #5                  // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        18: getfield      #18                 // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         21: ifnull        29\n         24: bipush        8\n         26: goto          30\n         29: iconst_0\n         30: iadd\n         31: aload_0\n-        32: getfield      #6                  // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        32: getfield      #21                 // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         35: ifnull        43\n         38: bipush        8\n         40: goto          44\n         43: iconst_0\n         44: iadd\n         45: aload_0\n-        46: getfield      #7                  // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        46: getfield      #24                 // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n         49: ifnull        56\n         52: iconst_4\n         53: goto          57\n         56: iconst_0\n         57: iadd\n-        58: invokespecial #15                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+        58: invokespecial #57                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n         61: areturn\n       LineNumberTable:\n         line 136: 0\n         line 137: 17\n         line 138: 31\n         line 139: 45\n         line 136: 61\n@@ -416,72 +416,72 @@\n \n   public org.apache.commons.compress.archivers.zip.ZipEightByteInteger getCompressedSize();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #5                  // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         1: getfield      #18                 // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n          4: areturn\n       LineNumberTable:\n         line 147: 0\n \n   public org.apache.commons.compress.archivers.zip.ZipLong getDiskStartNumber();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipLong;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+         1: getfield      #24                 // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n          4: areturn\n       LineNumberTable:\n         line 155: 0\n \n   public org.apache.commons.compress.archivers.zip.ZipShort getHeaderId();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n-         0: getstatic     #16                 // Field HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+         0: getstatic     #60                 // Field HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n          3: areturn\n       LineNumberTable:\n         line 160: 0\n \n   public byte[] getLocalFileDataData();\n     descriptor: ()[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         1: getfield      #14                 // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n          4: ifnonnull     14\n          7: aload_0\n-         8: getfield      #5                  // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         8: getfield      #18                 // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         11: ifnull        51\n         14: aload_0\n-        15: getfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        15: getfield      #14                 // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         18: ifnull        28\n         21: aload_0\n-        22: getfield      #5                  // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        22: getfield      #18                 // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         25: ifnonnull     38\n-        28: new           #17                 // class java/lang/IllegalArgumentException\n+        28: new           #64                 // class java/lang/IllegalArgumentException\n         31: dup\n-        32: ldc           #19                 // String Zip64 extended information must contain both size values in the local file header.\n-        34: invokespecial #20                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        32: ldc           #66                 // String Zip64 extended information must contain both size values in the local file header.\n+        34: invokespecial #68                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         37: athrow\n         38: bipush        16\n         40: newarray       byte\n         42: astore_1\n         43: aload_0\n         44: aload_1\n-        45: invokespecial #12                 // Method addSizes:([B)I\n+        45: invokespecial #50                 // Method addSizes:([B)I\n         48: pop\n         49: aload_1\n         50: areturn\n-        51: getstatic     #21                 // Field org/apache/commons/compress/utils/ByteUtils.EMPTY_BYTE_ARRAY:[B\n+        51: getstatic     #71                 // Field org/apache/commons/compress/utils/ByteUtils.EMPTY_BYTE_ARRAY:[B\n         54: areturn\n       LineNumberTable:\n         line 165: 0\n         line 166: 14\n         line 167: 28\n         line 169: 38\n         line 170: 43\n@@ -494,23 +494,23 @@\n         frame_type = 12 /* same */\n \n   public org.apache.commons.compress.archivers.zip.ZipShort getLocalFileDataLength();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=1, args_size=1\n-         0: new           #14                 // class org/apache/commons/compress/archivers/zip/ZipShort\n+         0: new           #45                 // class org/apache/commons/compress/archivers/zip/ZipShort\n          3: dup\n          4: aload_0\n-         5: getfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         5: getfield      #14                 // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n          8: ifnull        16\n         11: bipush        16\n         13: goto          17\n         16: iconst_0\n-        17: invokespecial #15                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+        17: invokespecial #57                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n         20: areturn\n       LineNumberTable:\n         line 178: 0\n       StackMapTable: number_of_entries = 2\n         frame_type = 255 /* full_frame */\n           offset_delta = 16\n           locals = [ class org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField ]\n@@ -522,98 +522,98 @@\n \n   public org.apache.commons.compress.archivers.zip.ZipEightByteInteger getRelativeHeaderOffset();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #6                  // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         1: getfield      #21                 // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n          4: areturn\n       LineNumberTable:\n         line 186: 0\n \n   public org.apache.commons.compress.archivers.zip.ZipEightByteInteger getSize();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         1: getfield      #14                 // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n          4: areturn\n       LineNumberTable:\n         line 194: 0\n \n   public void parseFromCentralDirectoryData(byte[], int, int) throws java.util.zip.ZipException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=6, locals=4, args_size=4\n          0: aload_0\n          1: iload_3\n          2: newarray       byte\n-         4: putfield      #22                 // Field rawCentralDirectoryData:[B\n+         4: putfield      #77                 // Field rawCentralDirectoryData:[B\n          7: aload_1\n          8: iload_2\n          9: aload_0\n-        10: getfield      #22                 // Field rawCentralDirectoryData:[B\n+        10: getfield      #77                 // Field rawCentralDirectoryData:[B\n         13: iconst_0\n         14: iload_3\n-        15: invokestatic  #9                  // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        15: invokestatic  #34                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         18: iload_3\n         19: bipush        28\n         21: if_icmplt     34\n         24: aload_0\n         25: aload_1\n         26: iload_2\n         27: iload_3\n-        28: invokevirtual #23                 // Method parseFromLocalFileData:([BII)V\n+        28: invokevirtual #80                 // Method parseFromLocalFileData:([BII)V\n         31: goto          113\n         34: iload_3\n         35: bipush        24\n         37: if_icmpne     88\n         40: aload_0\n-        41: new           #24                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+        41: new           #29                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n         44: dup\n         45: aload_1\n         46: iload_2\n-        47: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-        50: putfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        47: invokespecial #84                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+        50: putfield      #14                 // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         53: iinc          2, 8\n         56: aload_0\n-        57: new           #24                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+        57: new           #29                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n         60: dup\n         61: aload_1\n         62: iload_2\n-        63: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-        66: putfield      #5                  // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        63: invokespecial #84                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+        66: putfield      #18                 // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         69: iinc          2, 8\n         72: aload_0\n-        73: new           #24                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+        73: new           #29                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n         76: dup\n         77: aload_1\n         78: iload_2\n-        79: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-        82: putfield      #6                  // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        79: invokespecial #84                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+        82: putfield      #21                 // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         85: goto          113\n         88: iload_3\n         89: bipush        8\n         91: irem\n         92: iconst_4\n         93: if_icmpne     113\n         96: aload_0\n-        97: new           #26                 // class org/apache/commons/compress/archivers/zip/ZipLong\n+        97: new           #55                 // class org/apache/commons/compress/archivers/zip/ZipLong\n        100: dup\n        101: aload_1\n        102: iload_2\n        103: iload_3\n        104: iadd\n        105: iconst_4\n        106: isub\n-       107: invokespecial #27                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n-       110: putfield      #7                  // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+       107: invokespecial #87                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n+       110: putfield      #24                 // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n        113: return\n       LineNumberTable:\n         line 202: 0\n         line 203: 7\n         line 211: 18\n         line 212: 24\n         line 213: 34\n@@ -639,61 +639,61 @@\n       stack=5, locals=5, args_size=4\n          0: iload_3\n          1: ifne          5\n          4: return\n          5: iload_3\n          6: bipush        16\n          8: if_icmpge     21\n-        11: new           #28                 // class java/util/zip/ZipException\n+        11: new           #88                 // class java/util/zip/ZipException\n         14: dup\n-        15: ldc           #19                 // String Zip64 extended information must contain both size values in the local file header.\n-        17: invokespecial #29                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        15: ldc           #66                 // String Zip64 extended information must contain both size values in the local file header.\n+        17: invokespecial #90                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n         20: athrow\n         21: aload_0\n-        22: new           #24                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+        22: new           #29                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n         25: dup\n         26: aload_1\n         27: iload_2\n-        28: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-        31: putfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        28: invokespecial #84                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+        31: putfield      #14                 // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         34: iinc          2, 8\n         37: aload_0\n-        38: new           #24                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+        38: new           #29                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n         41: dup\n         42: aload_1\n         43: iload_2\n-        44: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-        47: putfield      #5                  // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        44: invokespecial #84                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+        47: putfield      #18                 // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         50: iinc          2, 8\n         53: iload_3\n         54: bipush        16\n         56: isub\n         57: istore        4\n         59: iload         4\n         61: bipush        8\n         63: if_icmplt     85\n         66: aload_0\n-        67: new           #24                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+        67: new           #29                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n         70: dup\n         71: aload_1\n         72: iload_2\n-        73: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-        76: putfield      #6                  // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+        73: invokespecial #84                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+        76: putfield      #21                 // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n         79: iinc          2, 8\n         82: iinc          4, -8\n         85: iload         4\n         87: iconst_4\n         88: if_icmplt     110\n         91: aload_0\n-        92: new           #26                 // class org/apache/commons/compress/archivers/zip/ZipLong\n+        92: new           #55                 // class org/apache/commons/compress/archivers/zip/ZipLong\n         95: dup\n         96: aload_1\n         97: iload_2\n-        98: invokespecial #27                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n-       101: putfield      #7                  // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+        98: invokespecial #87                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n+       101: putfield      #24                 // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n        104: iinc          2, 4\n        107: iinc          4, -4\n        110: return\n       LineNumberTable:\n         line 227: 0\n         line 232: 4\n         line 234: 5\n@@ -724,15 +724,15 @@\n \n   public void reparseCentralDirectoryData(boolean, boolean, boolean, boolean) throws java.util.zip.ZipException;\n     descriptor: (ZZZZ)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=7, args_size=5\n          0: aload_0\n-         1: getfield      #22                 // Field rawCentralDirectoryData:[B\n+         1: getfield      #77                 // Field rawCentralDirectoryData:[B\n          4: ifnull        203\n          7: iload_1\n          8: ifeq          16\n         11: bipush        8\n         13: goto          17\n         16: iconst_0\n         17: iload_2\n@@ -751,81 +751,81 @@\n         41: ifeq          48\n         44: iconst_4\n         45: goto          49\n         48: iconst_0\n         49: iadd\n         50: istore        5\n         52: aload_0\n-        53: getfield      #22                 // Field rawCentralDirectoryData:[B\n+        53: getfield      #77                 // Field rawCentralDirectoryData:[B\n         56: arraylength\n         57: iload         5\n         59: if_icmpge     103\n-        62: new           #28                 // class java/util/zip/ZipException\n+        62: new           #88                 // class java/util/zip/ZipException\n         65: dup\n-        66: new           #30                 // class java/lang/StringBuilder\n+        66: new           #91                 // class java/lang/StringBuilder\n         69: dup\n-        70: invokespecial #31                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        73: ldc           #32                 // String Central directory zip64 extended information extra field\\'s length doesn\\'t match central directory data.  Expected length\n-        75: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        70: invokespecial #93                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        73: ldc           #94                 // String Central directory zip64 extended information extra field\\'s length doesn\\'t match central directory data.  Expected length\n+        75: invokevirtual #96                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         78: iload         5\n-        80: invokevirtual #34                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        83: ldc           #35                 // String  but is\n-        85: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        80: invokevirtual #100                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        83: ldc           #103                // String  but is\n+        85: invokevirtual #96                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         88: aload_0\n-        89: getfield      #22                 // Field rawCentralDirectoryData:[B\n+        89: getfield      #77                 // Field rawCentralDirectoryData:[B\n         92: arraylength\n-        93: invokevirtual #34                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        96: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        99: invokespecial #29                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        93: invokevirtual #100                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        96: invokevirtual #105                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        99: invokespecial #90                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n        102: athrow\n        103: iconst_0\n        104: istore        6\n        106: iload_1\n        107: ifeq          130\n        110: aload_0\n-       111: new           #24                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+       111: new           #29                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n        114: dup\n        115: aload_0\n-       116: getfield      #22                 // Field rawCentralDirectoryData:[B\n+       116: getfield      #77                 // Field rawCentralDirectoryData:[B\n        119: iload         6\n-       121: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-       124: putfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+       121: invokespecial #84                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+       124: putfield      #14                 // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n        127: iinc          6, 8\n        130: iload_2\n        131: ifeq          154\n        134: aload_0\n-       135: new           #24                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+       135: new           #29                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n        138: dup\n        139: aload_0\n-       140: getfield      #22                 // Field rawCentralDirectoryData:[B\n+       140: getfield      #77                 // Field rawCentralDirectoryData:[B\n        143: iload         6\n-       145: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-       148: putfield      #5                  // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+       145: invokespecial #84                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+       148: putfield      #18                 // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n        151: iinc          6, 8\n        154: iload_3\n        155: ifeq          178\n        158: aload_0\n-       159: new           #24                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n+       159: new           #29                 // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger\n        162: dup\n        163: aload_0\n-       164: getfield      #22                 // Field rawCentralDirectoryData:[B\n+       164: getfield      #77                 // Field rawCentralDirectoryData:[B\n        167: iload         6\n-       169: invokespecial #25                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n-       172: putfield      #6                  // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+       169: invokespecial #84                 // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.\"<init>\":([BI)V\n+       172: putfield      #21                 // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n        175: iinc          6, 8\n        178: iload         4\n        180: ifeq          203\n        183: aload_0\n-       184: new           #26                 // class org/apache/commons/compress/archivers/zip/ZipLong\n+       184: new           #55                 // class org/apache/commons/compress/archivers/zip/ZipLong\n        187: dup\n        188: aload_0\n-       189: getfield      #22                 // Field rawCentralDirectoryData:[B\n+       189: getfield      #77                 // Field rawCentralDirectoryData:[B\n        192: iload         6\n-       194: invokespecial #27                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n-       197: putfield      #7                  // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+       194: invokespecial #87                 // Method org/apache/commons/compress/archivers/zip/ZipLong.\"<init>\":([BI)V\n+       197: putfield      #24                 // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n        200: iinc          6, 4\n        203: return\n       LineNumberTable:\n         line 274: 0\n         line 275: 7\n         line 276: 17\n         line 277: 28\n@@ -884,67 +884,67 @@\n   public void setCompressedSize(org.apache.commons.compress.archivers.zip.ZipEightByteInteger);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: putfield      #5                  // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         2: putfield      #18                 // Field compressedSize:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n          5: return\n       LineNumberTable:\n         line 314: 0\n         line 315: 5\n \n   public void setDiskStartNumber(org.apache.commons.compress.archivers.zip.ZipLong);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipLong;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: putfield      #7                  // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n+         2: putfield      #24                 // Field diskStart:Lorg/apache/commons/compress/archivers/zip/ZipLong;\n          5: return\n       LineNumberTable:\n         line 322: 0\n         line 323: 5\n \n   public void setRelativeHeaderOffset(org.apache.commons.compress.archivers.zip.ZipEightByteInteger);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: putfield      #6                  // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         2: putfield      #21                 // Field relativeHeaderOffset:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n          5: return\n       LineNumberTable:\n         line 330: 0\n         line 331: 5\n \n   public void setSize(org.apache.commons.compress.archivers.zip.ZipEightByteInteger);\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: putfield      #4                  // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n+         2: putfield      #14                 // Field size:Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;\n          5: return\n       LineNumberTable:\n         line 338: 0\n         line 339: 5\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=3, locals=0, args_size=0\n-         0: new           #14                 // class org/apache/commons/compress/archivers/zip/ZipShort\n+         0: new           #45                 // class org/apache/commons/compress/archivers/zip/ZipShort\n          3: dup\n          4: iconst_1\n-         5: invokespecial #15                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-         8: putstatic     #16                 // Field HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+         5: invokespecial #57                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+         8: putstatic     #60                 // Field HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n         11: return\n       LineNumberTable:\n         line 47: 0\n }\n SourceFile: \"Zip64ExtendedInformationExtraField.java\"\n"}]}
