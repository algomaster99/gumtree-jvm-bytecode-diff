{"diffoscope-json-version": 1, "source1": "first/LocaleUtils.class", "source2": "second/LocaleUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,153 +19,148 @@\n         return LocaleUtils.SyncAvoid.access$000();\n     }\n     \n     public static Set<Locale> availableLocaleSet() {\n         return LocaleUtils.SyncAvoid.access$100();\n     }\n     \n-    public static List<Locale> countriesByLanguage(final String languageCode) {\n-        if (languageCode == null) {\n+    public static List<Locale> countriesByLanguage(final String s) {\n+        if (s == null) {\n             return Collections.emptyList();\n         }\n-        List<Locale> countries = (List<Locale>)LocaleUtils.cCountriesByLanguage.get(languageCode);\n-        if (countries == null) {\n-            countries = new ArrayList<Locale>();\n-            final List<Locale> locales = availableLocaleList();\n-            for (final Locale locale : locales) {\n-                if (languageCode.equals(locale.getLanguage()) && !locale.getCountry().isEmpty() && locale.getVariant().isEmpty()) {\n-                    countries.add(locale);\n+        List list = (List)LocaleUtils.cCountriesByLanguage.get(s);\n+        if (list == null) {\n+            final ArrayList list2 = new ArrayList();\n+            for (final Locale locale : availableLocaleList()) {\n+                if (s.equals(locale.getLanguage()) && !locale.getCountry().isEmpty() && locale.getVariant().isEmpty()) {\n+                    list2.add(locale);\n                 }\n             }\n-            countries = Collections.unmodifiableList((List<? extends Locale>)countries);\n-            LocaleUtils.cCountriesByLanguage.putIfAbsent(languageCode, countries);\n-            countries = LocaleUtils.cCountriesByLanguage.get(languageCode);\n+            LocaleUtils.cCountriesByLanguage.putIfAbsent(s, (List<Locale>)Collections.unmodifiableList((List<?>)list2));\n+            list = LocaleUtils.cCountriesByLanguage.get(s);\n         }\n-        return countries;\n+        return list;\n     }\n     \n     public static boolean isAvailableLocale(final Locale locale) {\n         return availableLocaleList().contains(locale);\n     }\n     \n-    private static boolean isISO3166CountryCode(final String str) {\n-        return StringUtils.isAllUpperCase((CharSequence)str) && str.length() == 2;\n+    private static boolean isISO3166CountryCode(final String s) {\n+        return StringUtils.isAllUpperCase((CharSequence)s) && s.length() == 2;\n     }\n     \n-    private static boolean isISO639LanguageCode(final String str) {\n-        return StringUtils.isAllLowerCase((CharSequence)str) && (str.length() == 2 || str.length() == 3);\n+    private static boolean isISO639LanguageCode(final String s) {\n+        return StringUtils.isAllLowerCase((CharSequence)s) && (s.length() == 2 || s.length() == 3);\n     }\n     \n-    private static boolean isNumericAreaCode(final String str) {\n-        return StringUtils.isNumeric((CharSequence)str) && str.length() == 3;\n+    private static boolean isNumericAreaCode(final String s) {\n+        return StringUtils.isNumeric((CharSequence)s) && s.length() == 3;\n     }\n     \n-    public static List<Locale> languagesByCountry(final String countryCode) {\n-        if (countryCode == null) {\n+    public static List<Locale> languagesByCountry(final String s) {\n+        if (s == null) {\n             return Collections.emptyList();\n         }\n-        List<Locale> langs = (List<Locale>)LocaleUtils.cLanguagesByCountry.get(countryCode);\n-        if (langs == null) {\n-            langs = new ArrayList<Locale>();\n-            final List<Locale> locales = availableLocaleList();\n-            for (final Locale locale : locales) {\n-                if (countryCode.equals(locale.getCountry()) && locale.getVariant().isEmpty()) {\n-                    langs.add(locale);\n+        List list = (List)LocaleUtils.cLanguagesByCountry.get(s);\n+        if (list == null) {\n+            final ArrayList list2 = new ArrayList();\n+            for (final Locale locale : availableLocaleList()) {\n+                if (s.equals(locale.getCountry()) && locale.getVariant().isEmpty()) {\n+                    list2.add(locale);\n                 }\n             }\n-            langs = Collections.unmodifiableList((List<? extends Locale>)langs);\n-            LocaleUtils.cLanguagesByCountry.putIfAbsent(countryCode, langs);\n-            langs = LocaleUtils.cLanguagesByCountry.get(countryCode);\n+            LocaleUtils.cLanguagesByCountry.putIfAbsent(s, (List<Locale>)Collections.unmodifiableList((List<?>)list2));\n+            list = LocaleUtils.cLanguagesByCountry.get(s);\n         }\n-        return langs;\n+        return list;\n     }\n     \n     public static List<Locale> localeLookupList(final Locale locale) {\n         return localeLookupList(locale, locale);\n     }\n     \n-    public static List<Locale> localeLookupList(final Locale locale, final Locale defaultLocale) {\n-        final List<Locale> list = new ArrayList<Locale>(4);\n+    public static List<Locale> localeLookupList(final Locale locale, final Locale locale2) {\n+        final ArrayList list = new ArrayList(4);\n         if (locale != null) {\n             list.add(locale);\n             if (!locale.getVariant().isEmpty()) {\n                 list.add(new Locale(locale.getLanguage(), locale.getCountry()));\n             }\n             if (!locale.getCountry().isEmpty()) {\n                 list.add(new Locale(locale.getLanguage(), \"\"));\n             }\n-            if (!list.contains(defaultLocale)) {\n-                list.add(defaultLocale);\n+            if (!list.contains(locale2)) {\n+                list.add(locale2);\n             }\n         }\n-        return Collections.unmodifiableList((List<? extends Locale>)list);\n+        return (List<Locale>)Collections.unmodifiableList((List<?>)list);\n     }\n     \n-    private static Locale parseLocale(final String str) {\n-        if (isISO639LanguageCode(str)) {\n-            return new Locale(str);\n+    private static Locale parseLocale(final String s) {\n+        if (isISO639LanguageCode(s)) {\n+            return new Locale(s);\n         }\n-        final String[] segments = str.split(\"_\", -1);\n-        final String language = segments[0];\n-        if (segments.length == 2) {\n-            final String country = segments[1];\n-            if ((isISO639LanguageCode(language) && isISO3166CountryCode(country)) || isNumericAreaCode(country)) {\n-                return new Locale(language, country);\n+        final String[] split = s.split(\"_\", -1);\n+        final String s2 = split[0];\n+        if (split.length == 2) {\n+            final String country = split[1];\n+            if ((isISO639LanguageCode(s2) && isISO3166CountryCode(country)) || isNumericAreaCode(country)) {\n+                return new Locale(s2, country);\n             }\n         }\n-        else if (segments.length == 3) {\n-            final String country = segments[1];\n-            final String variant = segments[2];\n-            if (isISO639LanguageCode(language) && (country.isEmpty() || isISO3166CountryCode(country) || isNumericAreaCode(country)) && !variant.isEmpty()) {\n-                return new Locale(language, country, variant);\n+        else if (split.length == 3) {\n+            final String country2 = split[1];\n+            final String variant = split[2];\n+            if (isISO639LanguageCode(s2) && (country2.isEmpty() || isISO3166CountryCode(country2) || isNumericAreaCode(country2)) && !variant.isEmpty()) {\n+                return new Locale(s2, country2, variant);\n             }\n         }\n-        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + s);\n     }\n     \n     public static Locale toLocale(final Locale locale) {\n         return (locale != null) ? locale : Locale.getDefault();\n     }\n     \n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n+    public static Locale toLocale(final String s) {\n+        if (s == null) {\n             return null;\n         }\n-        if (str.isEmpty()) {\n+        if (s.isEmpty()) {\n             return new Locale(\"\", \"\");\n         }\n-        if (str.contains(\"#\")) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        if (s.contains(\"#\")) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + s);\n         }\n-        final int len = str.length();\n-        if (len < 2) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        final int length = s.length();\n+        if (length < 2) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + s);\n         }\n-        final char ch0 = str.charAt(0);\n-        if (ch0 != '_') {\n-            return parseLocale(str);\n+        if (s.charAt(0) != '_') {\n+            return parseLocale(s);\n         }\n-        if (len < 3) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        if (length < 3) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + s);\n         }\n-        final char ch2 = str.charAt(1);\n-        final char ch3 = str.charAt(2);\n-        if (!Character.isUpperCase(ch2) || !Character.isUpperCase(ch3)) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        final char char1 = s.charAt(1);\n+        final char char2 = s.charAt(2);\n+        if (!Character.isUpperCase(char1) || !Character.isUpperCase(char2)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + s);\n         }\n-        if (len == 3) {\n-            return new Locale(\"\", str.substring(1, 3));\n+        if (length == 3) {\n+            return new Locale(\"\", s.substring(1, 3));\n         }\n-        if (len < 5) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        if (length < 5) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + s);\n         }\n-        if (str.charAt(3) != '_') {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        if (s.charAt(3) != '_') {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + s);\n         }\n-        return new Locale(\"\", str.substring(1, 3), str.substring(4));\n+        return new Locale(\"\", s.substring(1, 3), s.substring(4));\n     }\n     \n     static {\n         cLanguagesByCountry = new ConcurrentHashMap<String, List<Locale>>();\n         cCountriesByLanguage = new ConcurrentHashMap<String, List<Locale>>();\n     }\n }\n"}]}
