{"diffoscope-json-version": 1, "source1": "first/FastDoubleMath.class", "source2": "second/FastDoubleMath.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,51 +1,51 @@\n-  SHA-256 checksum da66e8c559db06aaca4e98fa8dfaebc3965dedf0d35574d12837265634fd9cef\n+  SHA-256 checksum b59ca229975a8cd7fe0cd82aa18abc7f36563b26cdb5f1193fb94ccdcf1a589a\n   Compiled from \"FastDoubleMath.java\"\n class com.fasterxml.jackson.core.io.doubleparser.FastDoubleMath\n   minor version: 0\n   major version: 52\n   flags: (0x0020) ACC_SUPER\n   this_class: #7                          // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath\n   super_class: #2571                      // java/lang/Object\n   interfaces: 0, fields: 9, methods: 8, attributes: 2\n Constant pool:\n-     #1 = Class              #2660        // java/lang/Double\n-     #2 = Methodref          #2571.#2661  // java/lang/Object.\"<init>\":()V\n+     #1 = Class              #2659        // java/lang/Double\n+     #2 = Methodref          #2571.#2660  // java/lang/Object.\"<init>\":()V\n      #3 = Long               4294967295l\n-     #5 = Class              #2662        // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128\n-     #6 = Methodref          #5.#2663     // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128.\"<init>\":(JJLcom/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$1;)V\n-     #7 = Class              #2664        // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath\n+     #5 = Class              #2661        // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128\n+     #6 = Methodref          #5.#2662     // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128.\"<init>\":(JJLcom/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$1;)V\n+     #7 = Class              #2663        // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath\n      #8 = Long               9007199254740991l\n-    #10 = Methodref          #2665.#2666  // java/lang/Long.compareUnsigned:(JJ)I\n-    #11 = Fieldref           #7.#2667     // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.DOUBLE_POWERS_OF_TEN:[D\n-    #12 = Fieldref           #7.#2668     // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.MANTISSA_64:[J\n+    #10 = Methodref          #2664.#2665  // java/lang/Long.compareUnsigned:(JJ)I\n+    #11 = Fieldref           #7.#2666     // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.DOUBLE_POWERS_OF_TEN:[D\n+    #12 = Fieldref           #7.#2667     // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.MANTISSA_64:[J\n     #13 = Long               217706l\n     #15 = Long               1023l\n     #17 = Long               64l\n-    #19 = Methodref          #2665.#2669  // java/lang/Long.numberOfLeadingZeros:(J)I\n-    #20 = Methodref          #7.#2670     // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.fullMultiplication:(JJ)Lcom/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128;\n-    #21 = Fieldref           #5.#2671     // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128.low:J\n-    #22 = Fieldref           #5.#2672     // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128.high:J\n+    #19 = Methodref          #2664.#2668  // java/lang/Long.numberOfLeadingZeros:(J)I\n+    #20 = Methodref          #7.#2669     // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.fullMultiplication:(JJ)Lcom/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128;\n+    #21 = Fieldref           #5.#2670     // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128.low:J\n+    #22 = Fieldref           #5.#2671     // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128.high:J\n     #23 = Long               511l\n-    #25 = Fieldref           #7.#2673     // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.MANTISSA_128:[J\n+    #25 = Fieldref           #7.#2672     // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.MANTISSA_128:[J\n     #26 = Double             NaNd\n     #28 = Long               9l\n     #30 = Long               3l\n     #32 = Long               9007199254740992l\n     #34 = Long               4503599627370496l\n     #36 = Long               -4503599627370497l\n     #38 = Long               2046l\n     #40 = Long               -9223372036854775808l\n-    #42 = Methodref          #1.#2674     // java/lang/Double.longBitsToDouble:(J)D\n+    #42 = Methodref          #1.#2673     // java/lang/Double.longBitsToDouble:(J)D\n     #43 = Double             -0.0d\n-    #45 = Methodref          #7.#2675     // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.tryDecFloatToDouble:(ZJI)D\n-    #46 = Methodref          #1.#2676     // java/lang/Double.isNaN:(D)Z\n-    #47 = Methodref          #2677.#2678  // java/lang/Math.scalb:(DI)D\n+    #45 = Methodref          #7.#2674     // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.tryDecFloatToDouble:(ZJI)D\n+    #46 = Methodref          #1.#2675     // java/lang/Double.isNaN:(D)Z\n+    #47 = Methodref          #2676.#2677  // java/lang/Math.scalb:(DI)D\n     #48 = Long               -1022l\n-    #50 = Methodref          #7.#2679     // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.tryHexFloatToDouble:(ZJI)D\n+    #50 = Methodref          #7.#2678     // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath.tryHexFloatToDouble:(ZJI)D\n     #51 = Long               -6499023860262858360l\n     #53 = Long               -3512093806901185046l\n     #55 = Long               -9112587656954322510l\n     #57 = Long               -6779048552765515233l\n     #59 = Long               -3862124672529506138l\n     #61 = Long               -215969822234494768l\n     #63 = Long               -7052510166537641086l\n@@ -1298,16 +1298,16 @@\n   #2557 = Double             1.0E16d\n   #2559 = Double             1.0E17d\n   #2561 = Double             1.0E18d\n   #2563 = Double             1.0E19d\n   #2565 = Double             1.0E20d\n   #2567 = Double             1.0E21d\n   #2569 = Double             1.0E22d\n-  #2571 = Class              #2680        // java/lang/Object\n-  #2572 = Class              #2681        // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$1\n+  #2571 = Class              #2679        // java/lang/Object\n+  #2572 = Class              #2680        // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$1\n   #2573 = Utf8               InnerClasses\n   #2574 = Utf8               UInt128\n   #2575 = Utf8               DOUBLE_EXPONENT_BIAS\n   #2576 = Utf8               I\n   #2577 = Utf8               ConstantValue\n   #2578 = Integer            1023\n   #2579 = Utf8               DOUBLE_SIGNIFICAND_WIDTH\n@@ -1367,71 +1367,70 @@\n   #2633 = Utf8               lower\n   #2634 = Utf8               upper\n   #2635 = Utf8               upperbit\n   #2636 = Utf8               mantissa\n   #2637 = Utf8               realExponent\n   #2638 = Utf8               bits\n   #2639 = Utf8               StackMapTable\n-  #2640 = Class              #2662        // com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128\n-  #2641 = Utf8               tryDecFloatToDoubleTruncated\n-  #2642 = Utf8               (ZJIZI)D\n-  #2643 = Utf8               withoutRounding\n-  #2644 = Utf8               roundedUp\n-  #2645 = Utf8               result\n-  #2646 = Utf8               isSignificandTruncated\n-  #2647 = Utf8               exponentOfTruncatedSignificand\n-  #2648 = Utf8               tryHexFloatToDouble\n-  #2649 = Utf8               tryHexFloatToDoubleTruncated\n-  #2650 = Utf8               (ZJJZJ)D\n-  #2651 = Utf8               outDouble\n-  #2652 = Utf8               clamp\n-  #2653 = Utf8               (JJJ)J\n-  #2654 = Utf8               value\n-  #2655 = Utf8               min\n-  #2656 = Utf8               max\n-  #2657 = Utf8               <clinit>\n-  #2658 = Utf8               SourceFile\n-  #2659 = Utf8               FastDoubleMath.java\n-  #2660 = Utf8               java/lang/Double\n-  #2661 = NameAndType        #2593:#2594  // \"<init>\":()V\n-  #2662 = Utf8               com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128\n-  #2663 = NameAndType        #2593:#2682  // \"<init>\":(JJLcom/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$1;)V\n-  #2664 = Utf8               com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath\n-  #2665 = Class              #2683        // java/lang/Long\n-  #2666 = NameAndType        #2684:#2685  // compareUnsigned:(JJ)I\n-  #2667 = NameAndType        #2591:#2592  // DOUBLE_POWERS_OF_TEN:[D\n-  #2668 = NameAndType        #2585:#2586  // MANTISSA_64:[J\n-  #2669 = NameAndType        #2686:#2687  // numberOfLeadingZeros:(J)I\n-  #2670 = NameAndType        #2600:#2601  // fullMultiplication:(JJ)Lcom/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128;\n-  #2671 = NameAndType        #2688:#2603  // low:J\n-  #2672 = NameAndType        #2689:#2603  // high:J\n-  #2673 = NameAndType        #2587:#2586  // MANTISSA_128:[J\n-  #2674 = NameAndType        #2690:#2691  // longBitsToDouble:(J)D\n-  #2675 = NameAndType        #2614:#2615  // tryDecFloatToDouble:(ZJI)D\n-  #2676 = NameAndType        #2692:#2693  // isNaN:(D)Z\n-  #2677 = Class              #2694        // java/lang/Math\n-  #2678 = NameAndType        #2695:#2696  // scalb:(DI)D\n-  #2679 = NameAndType        #2648:#2615  // tryHexFloatToDouble:(ZJI)D\n-  #2680 = Utf8               java/lang/Object\n-  #2681 = Utf8               com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$1\n-  #2682 = Utf8               (JJLcom/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$1;)V\n-  #2683 = Utf8               java/lang/Long\n-  #2684 = Utf8               compareUnsigned\n-  #2685 = Utf8               (JJ)I\n-  #2686 = Utf8               numberOfLeadingZeros\n-  #2687 = Utf8               (J)I\n-  #2688 = Utf8               low\n-  #2689 = Utf8               high\n-  #2690 = Utf8               longBitsToDouble\n-  #2691 = Utf8               (J)D\n-  #2692 = Utf8               isNaN\n-  #2693 = Utf8               (D)Z\n-  #2694 = Utf8               java/lang/Math\n-  #2695 = Utf8               scalb\n-  #2696 = Utf8               (DI)D\n+  #2640 = Utf8               tryDecFloatToDoubleTruncated\n+  #2641 = Utf8               (ZJIZI)D\n+  #2642 = Utf8               withoutRounding\n+  #2643 = Utf8               roundedUp\n+  #2644 = Utf8               result\n+  #2645 = Utf8               isSignificandTruncated\n+  #2646 = Utf8               exponentOfTruncatedSignificand\n+  #2647 = Utf8               tryHexFloatToDouble\n+  #2648 = Utf8               tryHexFloatToDoubleTruncated\n+  #2649 = Utf8               (ZJJZJ)D\n+  #2650 = Utf8               outDouble\n+  #2651 = Utf8               clamp\n+  #2652 = Utf8               (JJJ)J\n+  #2653 = Utf8               value\n+  #2654 = Utf8               min\n+  #2655 = Utf8               max\n+  #2656 = Utf8               <clinit>\n+  #2657 = Utf8               SourceFile\n+  #2658 = Utf8               FastDoubleMath.java\n+  #2659 = Utf8               java/lang/Double\n+  #2660 = NameAndType        #2593:#2594  // \"<init>\":()V\n+  #2661 = Utf8               com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128\n+  #2662 = NameAndType        #2593:#2681  // \"<init>\":(JJLcom/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$1;)V\n+  #2663 = Utf8               com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath\n+  #2664 = Class              #2682        // java/lang/Long\n+  #2665 = NameAndType        #2683:#2684  // compareUnsigned:(JJ)I\n+  #2666 = NameAndType        #2591:#2592  // DOUBLE_POWERS_OF_TEN:[D\n+  #2667 = NameAndType        #2585:#2586  // MANTISSA_64:[J\n+  #2668 = NameAndType        #2685:#2686  // numberOfLeadingZeros:(J)I\n+  #2669 = NameAndType        #2600:#2601  // fullMultiplication:(JJ)Lcom/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$UInt128;\n+  #2670 = NameAndType        #2687:#2603  // low:J\n+  #2671 = NameAndType        #2688:#2603  // high:J\n+  #2672 = NameAndType        #2587:#2586  // MANTISSA_128:[J\n+  #2673 = NameAndType        #2689:#2690  // longBitsToDouble:(J)D\n+  #2674 = NameAndType        #2614:#2615  // tryDecFloatToDouble:(ZJI)D\n+  #2675 = NameAndType        #2691:#2692  // isNaN:(D)Z\n+  #2676 = Class              #2693        // java/lang/Math\n+  #2677 = NameAndType        #2694:#2695  // scalb:(DI)D\n+  #2678 = NameAndType        #2647:#2615  // tryHexFloatToDouble:(ZJI)D\n+  #2679 = Utf8               java/lang/Object\n+  #2680 = Utf8               com/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$1\n+  #2681 = Utf8               (JJLcom/fasterxml/jackson/core/io/doubleparser/FastDoubleMath$1;)V\n+  #2682 = Utf8               java/lang/Long\n+  #2683 = Utf8               compareUnsigned\n+  #2684 = Utf8               (JJ)I\n+  #2685 = Utf8               numberOfLeadingZeros\n+  #2686 = Utf8               (J)I\n+  #2687 = Utf8               low\n+  #2688 = Utf8               high\n+  #2689 = Utf8               longBitsToDouble\n+  #2690 = Utf8               (J)D\n+  #2691 = Utf8               isNaN\n+  #2692 = Utf8               (D)Z\n+  #2693 = Utf8               java/lang/Math\n+  #2694 = Utf8               scalb\n+  #2695 = Utf8               (DI)D\n {\n   public static final int DOUBLE_EXPONENT_BIAS = 1023;\n     descriptor: I\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 1023\n \n   public static final int DOUBLE_SIGNIFICAND_WIDTH = 53;\n@@ -1845,14 +1844,15 @@\n         line 958: 353\n         line 959: 358\n         line 962: 361\n         line 964: 369\n         line 966: 377\n         line 967: 393\n         line 970: 397\n+        line 971: 405\n         line 972: 419\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n            26      41     4     d   D\n           166      98    14 factorMantissaLow   J\n           181      83    16 productLow   J\n           188      76    18 productMiddle2   J\n"}]}
