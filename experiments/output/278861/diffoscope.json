{"diffoscope-json-version": 1, "source1": "first/StringRefForm.class", "source2": "second/StringRefForm.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,41 +1,37 @@\n \n package org.apache.commons.compress.harmony.unpack200.bytecode.forms;\n \n import org.apache.commons.compress.harmony.pack200.Pack200Exception;\n-import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;\n import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;\n import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;\n import org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode;\n import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;\n \n public class StringRefForm extends SingleByteReferenceForm\n {\n-    public StringRefForm(final int opcode, final String name, final int[] rewrite) {\n-        super(opcode, name, rewrite);\n+    public StringRefForm(final int n, final String s, final int[] array) {\n+        super(n, s, array);\n     }\n     \n-    public StringRefForm(final int opcode, final String name, final int[] rewrite, final boolean widened) {\n-        this(opcode, name, rewrite);\n+    public StringRefForm(final int n, final String s, final int[] array, final boolean widened) {\n+        this(n, s, array);\n         this.widened = widened;\n     }\n     \n     protected int getOffset(final OperandManager operandManager) {\n         return operandManager.nextStringRef();\n     }\n     \n     protected int getPoolID() {\n         return 6;\n     }\n     \n-    protected void setNestedEntries(final ByteCode byteCode, final OperandManager operandManager, final int offset) throws Pack200Exception {\n-        final SegmentConstantPool globalPool = operandManager.globalConstantPool();\n-        ClassFileEntry[] nested = null;\n-        nested = new ClassFileEntry[] { globalPool.getValue(this.getPoolID(), (long)offset) };\n-        byteCode.setNested(nested);\n+    protected void setNestedEntries(final ByteCode byteCode, final OperandManager operandManager, final int n) throws Pack200Exception {\n+        byteCode.setNested(new ClassFileEntry[] { operandManager.globalConstantPool().getValue(this.getPoolID(), (long)n) });\n         if (this.widened) {\n             byteCode.setNestedPositions(new int[][] { { 0, 2 } });\n         }\n         else {\n             byteCode.setNestedPositions(new int[][] { { 0, 1 } });\n         }\n     }\n"}]}
