{"diffoscope-json-version": 1, "source1": "first/IcBands.class", "source2": "second/IcBands.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,113 +15,113 @@\n public class IcBands extends BandSet\n {\n     private final Set<IcBands.IcTuple> innerClasses;\n     private final CpBands cpBands;\n     private int bit16Count;\n     private final Map<String, List<IcBands.IcTuple>> outerToInner;\n     \n-    public IcBands(final SegmentHeader segmentHeader, final CpBands cpBands, final int effort) {\n-        super(effort, segmentHeader);\n+    public IcBands(final SegmentHeader segmentHeader, final CpBands cpBands, final int n) {\n+        super(n, segmentHeader);\n         this.innerClasses = new TreeSet<IcBands.IcTuple>();\n         this.bit16Count = 0;\n         this.outerToInner = new HashMap<String, List<IcBands.IcTuple>>();\n         this.cpBands = cpBands;\n     }\n     \n-    public void addInnerClass(final String name, final String outerName, final String innerName, int flags) {\n-        if (outerName != null || innerName != null) {\n-            if (this.namesArePredictable(name, outerName, innerName)) {\n-                final IcBands.IcTuple innerClass = new IcBands.IcTuple(this, this.cpBands.getCPClass(name), flags, (CPClass)null, (CPUTF8)null);\n-                this.addToMap(outerName, innerClass);\n-                this.innerClasses.add(innerClass);\n+    public void addInnerClass(final String s, final String s2, final String s3, int n) {\n+        if (s2 != null || s3 != null) {\n+            if (this.namesArePredictable(s, s2, s3)) {\n+                final IcBands.IcTuple icTuple = new IcBands.IcTuple(this, this.cpBands.getCPClass(s), n, (CPClass)null, (CPUTF8)null);\n+                this.addToMap(s2, icTuple);\n+                this.innerClasses.add(icTuple);\n             }\n             else {\n-                flags |= 0x10000;\n-                final IcBands.IcTuple icTuple = new IcBands.IcTuple(this, this.cpBands.getCPClass(name), flags, this.cpBands.getCPClass(outerName), this.cpBands.getCPUtf8(innerName));\n-                final boolean added = this.innerClasses.add(icTuple);\n-                if (added) {\n+                n |= 0x10000;\n+                final IcBands.IcTuple icTuple2 = new IcBands.IcTuple(this, this.cpBands.getCPClass(s), n, this.cpBands.getCPClass(s2), this.cpBands.getCPUtf8(s3));\n+                if (this.innerClasses.add(icTuple2)) {\n                     ++this.bit16Count;\n-                    this.addToMap(outerName, icTuple);\n+                    this.addToMap(s2, icTuple2);\n                 }\n             }\n         }\n         else {\n-            final IcBands.IcTuple innerClass = new IcBands.IcTuple(this, this.cpBands.getCPClass(name), flags, (CPClass)null, (CPUTF8)null);\n-            this.addToMap(this.getOuter(name), innerClass);\n-            this.innerClasses.add(innerClass);\n+            final IcBands.IcTuple icTuple3 = new IcBands.IcTuple(this, this.cpBands.getCPClass(s), n, (CPClass)null, (CPUTF8)null);\n+            this.addToMap(this.getOuter(s), icTuple3);\n+            this.innerClasses.add(icTuple3);\n         }\n     }\n     \n-    private void addToMap(final String outerName, final IcBands.IcTuple icTuple) {\n-        List<IcBands.IcTuple> tuples = (List<IcBands.IcTuple>)this.outerToInner.get(outerName);\n-        if (tuples == null) {\n-            tuples = new ArrayList<IcBands.IcTuple>();\n-            this.outerToInner.put(outerName, tuples);\n-            tuples.add(icTuple);\n+    private void addToMap(final String s, final IcBands.IcTuple icTuple) {\n+        final List list = (List)this.outerToInner.get(s);\n+        if (list == null) {\n+            final ArrayList list2 = new ArrayList();\n+            this.outerToInner.put(s, list2);\n+            list2.add(icTuple);\n         }\n         else {\n-            for (final IcBands.IcTuple tuple : tuples) {\n-                if (icTuple.equals((Object)tuple)) {\n+            final Iterator iterator = list.iterator();\n+            while (iterator.hasNext()) {\n+                if (icTuple.equals((Object)iterator.next())) {\n                     return;\n                 }\n             }\n-            tuples.add(icTuple);\n+            list.add(icTuple);\n         }\n     }\n     \n     public void finaliseBands() {\n         this.segmentHeader.setIc_count(this.innerClasses.size());\n     }\n     \n-    public IcBands.IcTuple getIcTuple(final CPClass inner) {\n+    public IcBands.IcTuple getIcTuple(final CPClass obj) {\n         for (final IcBands.IcTuple icTuple : this.innerClasses) {\n-            if (icTuple.C.equals(inner)) {\n+            if (icTuple.C.equals(obj)) {\n                 return icTuple;\n             }\n         }\n         return null;\n     }\n     \n-    public List<IcBands.IcTuple> getInnerClassesForOuter(final String outerClassName) {\n-        return this.outerToInner.get(outerClassName);\n+    public List<IcBands.IcTuple> getInnerClassesForOuter(final String s) {\n+        return this.outerToInner.get(s);\n     }\n     \n-    private String getOuter(final String name) {\n-        return name.substring(0, name.lastIndexOf(36));\n+    private String getOuter(final String s) {\n+        return s.substring(0, s.lastIndexOf(36));\n     }\n     \n-    private boolean namesArePredictable(final String name, final String outerName, final String innerName) {\n-        return name.equals(outerName + '$' + innerName) && innerName.indexOf(36) == -1;\n+    private boolean namesArePredictable(final String s, final String str, final String str2) {\n+        return s.equals(str + '$' + str2) && str2.indexOf(36) == -1;\n     }\n     \n     public void pack(final OutputStream outputStream) throws IOException, Pack200Exception {\n         PackingUtils.log(\"Writing internal class bands...\");\n-        final int[] ic_this_class = new int[this.innerClasses.size()];\n-        final int[] ic_flags = new int[this.innerClasses.size()];\n-        final int[] ic_outer_class = new int[this.bit16Count];\n-        final int[] ic_name = new int[this.bit16Count];\n-        int index2 = 0;\n-        final List<IcBands.IcTuple> innerClassesList = new ArrayList<IcBands.IcTuple>(this.innerClasses);\n-        for (int i = 0; i < ic_this_class.length; ++i) {\n-            final IcBands.IcTuple icTuple = (IcBands.IcTuple)innerClassesList.get(i);\n-            ic_this_class[i] = icTuple.C.getIndex();\n-            ic_flags[i] = icTuple.F;\n+        final int[] array = new int[this.innerClasses.size()];\n+        final int[] array2 = new int[this.innerClasses.size()];\n+        final int[] array3 = new int[this.bit16Count];\n+        final int[] array4 = new int[this.bit16Count];\n+        int n = 0;\n+        final ArrayList list = new ArrayList((Collection<? extends E>)this.innerClasses);\n+        for (int i = 0; i < array.length; ++i) {\n+            final IcBands.IcTuple icTuple = (IcBands.IcTuple)list.get(i);\n+            array[i] = icTuple.C.getIndex();\n+            array2[i] = icTuple.F;\n             if ((icTuple.F & 0x10000) != 0x0) {\n-                ic_outer_class[index2] = ((icTuple.C2 == null) ? 0 : (icTuple.C2.getIndex() + 1));\n-                ic_name[index2] = ((icTuple.N == null) ? 0 : (icTuple.N.getIndex() + 1));\n-                ++index2;\n+                array3[n] = ((icTuple.C2 == null) ? 0 : (icTuple.C2.getIndex() + 1));\n+                array4[n] = ((icTuple.N == null) ? 0 : (icTuple.N.getIndex() + 1));\n+                ++n;\n             }\n         }\n-        byte[] encodedBand = this.encodeBandInt(\"ic_this_class\", ic_this_class, Codec.UDELTA5);\n-        outputStream.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from ic_this_class[\" + ic_this_class.length + \"]\");\n-        encodedBand = this.encodeBandInt(\"ic_flags\", ic_flags, Codec.UNSIGNED5);\n-        outputStream.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from ic_flags[\" + ic_flags.length + \"]\");\n-        encodedBand = this.encodeBandInt(\"ic_outer_class\", ic_outer_class, Codec.DELTA5);\n-        outputStream.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from ic_outer_class[\" + ic_outer_class.length + \"]\");\n-        encodedBand = this.encodeBandInt(\"ic_name\", ic_name, Codec.DELTA5);\n-        outputStream.write(encodedBand);\n-        PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from ic_name[\" + ic_name.length + \"]\");\n+        final byte[] encodeBandInt = this.encodeBandInt(\"ic_this_class\", array, Codec.UDELTA5);\n+        outputStream.write(encodeBandInt);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt.length + \" bytes from ic_this_class[\" + array.length + \"]\");\n+        final byte[] encodeBandInt2 = this.encodeBandInt(\"ic_flags\", array2, Codec.UNSIGNED5);\n+        outputStream.write(encodeBandInt2);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt2.length + \" bytes from ic_flags[\" + array2.length + \"]\");\n+        final byte[] encodeBandInt3 = this.encodeBandInt(\"ic_outer_class\", array3, Codec.DELTA5);\n+        outputStream.write(encodeBandInt3);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt3.length + \" bytes from ic_outer_class[\" + array3.length + \"]\");\n+        final byte[] encodeBandInt4 = this.encodeBandInt(\"ic_name\", array4, Codec.DELTA5);\n+        outputStream.write(encodeBandInt4);\n+        PackingUtils.log(\"Wrote \" + encodeBandInt4.length + \" bytes from ic_name[\" + array4.length + \"]\");\n     }\n }\n"}]}
