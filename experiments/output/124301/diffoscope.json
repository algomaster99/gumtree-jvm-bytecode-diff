{"diffoscope-json-version": 1, "source1": "first/EmptyLineSeparatorCheck.class", "source2": "second/EmptyLineSeparatorCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -278,17 +278,17 @@\n                     }\n                 }\n             }\n             else if (this.isCommentInBeginningOfLine(childNode)) {\n                 childNodes.add(childNode);\n             }\n         }\n-        for (final DetailAST node2 : childNodes) {\n-            if (this.hasEmptyLineBefore(node2) && this.isPrePreviousLineEmpty(node2)) {\n-                this.log(node2, \"empty.line.separator.multiple.lines\", new Object[] { node2.getText() });\n+        for (final DetailAST node : childNodes) {\n+            if (this.hasEmptyLineBefore(node) && this.isPrePreviousLineEmpty(node)) {\n+                this.log(node, \"empty.line.separator.multiple.lines\", new Object[] { node.getText() });\n             }\n         }\n     }\n     \n     private boolean isPrePreviousLineEmpty(final DetailAST token) {\n         boolean result = false;\n         final int lineNo = token.getLineNo();\n@@ -311,15 +311,15 @@\n         }\n         final int nextBegin = nextToken.getLineNo();\n         final int currentEnd = lastToken.getLineNo();\n         return this.hasEmptyLine(currentEnd + 1, nextBegin - 1);\n     }\n     \n     private static Optional<DetailAST> findCommentUnder(final DetailAST packageDef) {\n-        return Optional.ofNullable(packageDef.getNextSibling()).map(sibling -> sibling.findFirstToken(5)).map((Function<? super Object, ? extends DetailAST>)DetailAST::getFirstChild).filter(token -> TokenUtil.isCommentType(token.getType())).filter(comment -> comment.getLineNo() == packageDef.getLineNo() + 1);\n+        return Optional.ofNullable(packageDef.getNextSibling()).map(sibling -> sibling.findFirstToken(5)).map((Function<? super Object, ? extends DetailAST>)DetailAST::getFirstChild).filter(token -> TokenUtil.isCommentType(token.getType())).filter(comment -> comment.getLineNo() == detailAST.getLineNo() + 1);\n     }\n     \n     private boolean hasEmptyLine(final int startLine, final int endLine) {\n         boolean result = false;\n         final FileContents fileContents = this.getFileContents();\n         for (int line = startLine; line <= endLine; ++line) {\n             if (fileContents.lineIsBlank(line - 1)) {\n"}]}
