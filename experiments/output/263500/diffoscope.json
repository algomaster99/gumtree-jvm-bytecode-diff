{"diffoscope-json-version": 1, "source1": "first/TFTPPacket.class", "source2": "second/TFTPPacket.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -13,46 +13,45 @@\n     public static final int ACKNOWLEDGEMENT = 4;\n     public static final int ERROR = 5;\n     public static final int SEGMENT_SIZE = 512;\n     int type;\n     int port;\n     InetAddress address;\n     \n-    public static final TFTPPacket newTFTPPacket(final DatagramPacket datagram) throws TFTPPacketException {\n-        TFTPPacket packet = null;\n-        if (datagram.getLength() < 4) {\n+    public static final TFTPPacket newTFTPPacket(final DatagramPacket datagramPacket) throws TFTPPacketException {\n+        if (datagramPacket.getLength() < 4) {\n             throw new TFTPPacketException(\"Bad packet. Datagram data length is too short.\");\n         }\n-        final byte[] data = datagram.getData();\n-        switch (data[1]) {\n+        Object o = null;\n+        switch (datagramPacket.getData()[1]) {\n             case 1: {\n-                packet = (TFTPPacket)new TFTPReadRequestPacket(datagram);\n+                o = new TFTPReadRequestPacket(datagramPacket);\n                 break;\n             }\n             case 2: {\n-                packet = (TFTPPacket)new TFTPWriteRequestPacket(datagram);\n+                o = new TFTPWriteRequestPacket(datagramPacket);\n                 break;\n             }\n             case 3: {\n-                packet = (TFTPPacket)new TFTPDataPacket(datagram);\n+                o = new TFTPDataPacket(datagramPacket);\n                 break;\n             }\n             case 4: {\n-                packet = (TFTPPacket)new TFTPAckPacket(datagram);\n+                o = new TFTPAckPacket(datagramPacket);\n                 break;\n             }\n             case 5: {\n-                packet = (TFTPPacket)new TFTPErrorPacket(datagram);\n+                o = new TFTPErrorPacket(datagramPacket);\n                 break;\n             }\n             default: {\n                 throw new TFTPPacketException(\"Bad packet.  Invalid TFTP operator code.\");\n             }\n         }\n-        return packet;\n+        return (TFTPPacket)o;\n     }\n     \n     TFTPPacket(final int type, final InetAddress address, final int port) {\n         this.type = type;\n         this.address = address;\n         this.port = port;\n     }\n"}]}
