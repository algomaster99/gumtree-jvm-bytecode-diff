{"diffoscope-json-version": 1, "source1": "first/DetailNodeTreeStringPrinter.class", "source2": "second/DetailNodeTreeStringPrinter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -17,73 +17,69 @@\n     private DetailNodeTreeStringPrinter() {\n     }\n     \n     public static String printFileAst(final File file) throws IOException {\n         return printTree(parseFile(file), \"\", \"\");\n     }\n     \n-    public static DetailNode parseJavadocAsDetailNode(final DetailAST blockComment) {\n-        final JavadocDetailNodeParser parser = new JavadocDetailNodeParser();\n-        final JavadocDetailNodeParser.ParseStatus status = parser.parseJavadocAsDetailNode(blockComment);\n-        if (status.getParseErrorMessage() != null) {\n-            throw new IllegalArgumentException(getParseErrorMessage(status.getParseErrorMessage()));\n+    public static DetailNode parseJavadocAsDetailNode(final DetailAST detailAST) {\n+        final JavadocDetailNodeParser.ParseStatus javadocAsDetailNode = new JavadocDetailNodeParser().parseJavadocAsDetailNode(detailAST);\n+        if (javadocAsDetailNode.getParseErrorMessage() != null) {\n+            throw new IllegalArgumentException(getParseErrorMessage(javadocAsDetailNode.getParseErrorMessage()));\n         }\n-        return status.getTree();\n+        return javadocAsDetailNode.getTree();\n     }\n     \n-    private static DetailNode parseJavadocAsDetailNode(final String javadocComment) {\n-        final DetailAST blockComment = ParserUtil.createBlockCommentNode(javadocComment);\n-        return parseJavadocAsDetailNode(blockComment);\n+    private static DetailNode parseJavadocAsDetailNode(final String s) {\n+        return parseJavadocAsDetailNode(ParserUtil.createBlockCommentNode(s));\n     }\n     \n     private static String getParseErrorMessage(final JavadocDetailNodeParser.ParseErrorMessage parseErrorMessage) {\n-        final LocalizedMessage message = new LocalizedMessage(\"com.puppycrawl.tools.checkstyle.checks.javadoc.messages\", (Class)DetailNodeTreeStringPrinter.class, parseErrorMessage.getMessageKey(), parseErrorMessage.getMessageArguments());\n-        return \"[ERROR:\" + parseErrorMessage.getLineNumber() + \"] \" + message.getMessage();\n+        return \"[ERROR:\" + parseErrorMessage.getLineNumber() + \"] \" + new LocalizedMessage(\"com.puppycrawl.tools.checkstyle.checks.javadoc.messages\", (Class)DetailNodeTreeStringPrinter.class, parseErrorMessage.getMessageKey(), parseErrorMessage.getMessageArguments()).getMessage();\n     }\n     \n-    public static String printTree(final DetailNode ast, final String rootPrefix, final String prefix) {\n-        final StringBuilder messageBuilder = new StringBuilder(1024);\n-        for (DetailNode node = ast; node != null; node = JavadocUtil.getNextSibling(node)) {\n-            if (node.getType() == 10000) {\n-                messageBuilder.append(rootPrefix);\n+    public static String printTree(final DetailNode detailNode, final String str, final String str2) {\n+        final StringBuilder sb = new StringBuilder(1024);\n+        for (DetailNode nextSibling = detailNode; nextSibling != null; nextSibling = JavadocUtil.getNextSibling(nextSibling)) {\n+            if (nextSibling.getType() == 10000) {\n+                sb.append(str);\n             }\n             else {\n-                messageBuilder.append(prefix);\n+                sb.append(str2);\n             }\n-            messageBuilder.append(getIndentation(node)).append(JavadocUtil.getTokenName(node.getType())).append(\" -> \").append(JavadocUtil.escapeAllControlChars(node.getText())).append(\" [\").append(node.getLineNumber()).append(':').append(node.getColumnNumber()).append(']').append(DetailNodeTreeStringPrinter.LINE_SEPARATOR).append(printTree(JavadocUtil.getFirstChild(node), rootPrefix, prefix));\n+            sb.append(getIndentation(nextSibling)).append(JavadocUtil.getTokenName(nextSibling.getType())).append(\" -> \").append(JavadocUtil.escapeAllControlChars(nextSibling.getText())).append(\" [\").append(nextSibling.getLineNumber()).append(':').append(nextSibling.getColumnNumber()).append(']').append(DetailNodeTreeStringPrinter.LINE_SEPARATOR).append(printTree(JavadocUtil.getFirstChild(nextSibling), str, str2));\n         }\n-        return messageBuilder.toString();\n+        return sb.toString();\n     }\n     \n-    private static String getIndentation(final DetailNode node) {\n-        final boolean isLastChild = JavadocUtil.getNextSibling(node) == null;\n-        DetailNode currentNode = node;\n-        final StringBuilder indentation = new StringBuilder(1024);\n-        while (currentNode.getParent() != null) {\n-            currentNode = currentNode.getParent();\n-            if (currentNode.getParent() == null) {\n-                if (isLastChild) {\n-                    indentation.append(\"`--\");\n+    private static String getIndentation(final DetailNode detailNode) {\n+        final boolean b = JavadocUtil.getNextSibling(detailNode) == null;\n+        DetailNode parent = detailNode;\n+        final StringBuilder sb = new StringBuilder(1024);\n+        while (parent.getParent() != null) {\n+            parent = parent.getParent();\n+            if (parent.getParent() == null) {\n+                if (b) {\n+                    sb.append(\"`--\");\n                 }\n                 else {\n-                    indentation.append(\"|--\");\n+                    sb.append(\"|--\");\n                 }\n             }\n-            else if (JavadocUtil.getNextSibling(currentNode) == null) {\n-                indentation.insert(0, \"    \");\n+            else if (JavadocUtil.getNextSibling(parent) == null) {\n+                sb.insert(0, \"    \");\n             }\n             else {\n-                indentation.insert(0, \"|   \");\n+                sb.insert(0, \"|   \");\n             }\n         }\n-        return indentation.toString();\n+        return sb.toString();\n     }\n     \n     private static DetailNode parseFile(final File file) throws IOException {\n-        final FileText text = new FileText(file.getAbsoluteFile(), System.getProperty(\"file.encoding\", StandardCharsets.UTF_8.name()));\n-        return parseJavadocAsDetailNode(text.getFullText().toString());\n+        return parseJavadocAsDetailNode(new FileText(file.getAbsoluteFile(), System.getProperty(\"file.encoding\", StandardCharsets.UTF_8.name())).getFullText().toString());\n     }\n     \n     static {\n         LINE_SEPARATOR = System.getProperty(\"line.separator\");\n     }\n }\n"}]}
