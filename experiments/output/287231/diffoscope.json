{"diffoscope-json-version": 1, "source1": "first/ZipUtil.class", "source2": "second/ZipUtil.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -49,46 +49,46 @@\n             final byte b = array[i];\n             array[i] = array[n - i];\n             array[n - i] = b;\n         }\n         return array;\n     }\n     \n-    static long bigToLong(final BigInteger obj) {\n-        if (obj.bitLength() <= 63) {\n-            return obj.longValue();\n+    static long bigToLong(final BigInteger bigInteger) {\n+        if (bigInteger.bitLength() <= 63) {\n+            return bigInteger.longValue();\n         }\n-        throw new NumberFormatException(\"The BigInteger cannot fit inside a 64 bit java long: [\" + obj + \"]\");\n+        throw new NumberFormatException(\"The BigInteger cannot fit inside a 64 bit java long: [\" + bigInteger);\n     }\n     \n     static BigInteger longToBig(long adjustToLong) {\n         if (adjustToLong < -2147483648L) {\n-            throw new IllegalArgumentException(\"Negative longs < -2^31 not permitted: [\" + adjustToLong + \"]\");\n+            throw new IllegalArgumentException(\"Negative longs < -2^31 not permitted: [\" + adjustToLong);\n         }\n         if (adjustToLong < 0L && adjustToLong >= -2147483648L) {\n             adjustToLong = adjustToLong((int)adjustToLong);\n         }\n         return BigInteger.valueOf(adjustToLong);\n     }\n     \n     public static int signedByteToUnsignedInt(final byte b) {\n         if (b >= 0) {\n             return b;\n         }\n         return 256 + b;\n     }\n     \n-    public static byte unsignedIntToSignedByte(final int i) {\n-        if (i > 255 || i < 0) {\n-            throw new IllegalArgumentException(\"Can only convert non-negative integers between [0,255] to byte: [\" + i + \"]\");\n+    public static byte unsignedIntToSignedByte(final int n) {\n+        if (n > 255 || n < 0) {\n+            throw new IllegalArgumentException(\"Can only convert non-negative integers between [0,255] to byte: [\" + n);\n         }\n-        if (i < 128) {\n-            return (byte)i;\n+        if (n < 128) {\n+            return (byte)n;\n         }\n-        return (byte)(i - 256);\n+        return (byte)(n - 256);\n     }\n     \n     public static Date fromDosTime(final ZipLong zipLong) {\n         return new Date(dosToJavaTime(zipLong.getValue()));\n     }\n     \n     public static long dosToJavaTime(final long n) {\n"}]}
