{"diffoscope-json-version": 1, "source1": "first/FastDatePrinter$TimeZoneNumberRule.class", "source2": "second/FastDatePrinter$TimeZoneNumberRule.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -6,38 +6,37 @@\n \n private static class TimeZoneNumberRule implements FastDatePrinter.Rule\n {\n     static final TimeZoneNumberRule INSTANCE_COLON;\n     static final TimeZoneNumberRule INSTANCE_NO_COLON;\n     final boolean mColon;\n     \n-    TimeZoneNumberRule(final boolean colon) {\n-        this.mColon = colon;\n+    TimeZoneNumberRule(final boolean mColon) {\n+        this.mColon = mColon;\n     }\n     \n     public int estimateLength() {\n         return 5;\n     }\n     \n-    public void appendTo(final Appendable buffer, final Calendar calendar) throws IOException {\n-        int offset = calendar.get(15) + calendar.get(16);\n-        if (offset < 0) {\n-            buffer.append('-');\n-            offset = -offset;\n+    public void appendTo(final Appendable appendable, final Calendar calendar) throws IOException {\n+        int n = calendar.get(15) + calendar.get(16);\n+        if (n < 0) {\n+            appendable.append('-');\n+            n = -n;\n         }\n         else {\n-            buffer.append('+');\n+            appendable.append('+');\n         }\n-        final int hours = offset / 3600000;\n-        FastDatePrinter.access$000(buffer, hours);\n+        final int n2 = n / 3600000;\n+        FastDatePrinter.access$000(appendable, n2);\n         if (this.mColon) {\n-            buffer.append(':');\n+            appendable.append(':');\n         }\n-        final int minutes = offset / 60000 - 60 * hours;\n-        FastDatePrinter.access$000(buffer, minutes);\n+        FastDatePrinter.access$000(appendable, n / 60000 - 60 * n2);\n     }\n     \n     static {\n         TimeZoneNumberRule.INSTANCE_COLON = new TimeZoneNumberRule(true);\n         TimeZoneNumberRule.INSTANCE_NO_COLON = new TimeZoneNumberRule(false);\n     }\n }\n"}]}
