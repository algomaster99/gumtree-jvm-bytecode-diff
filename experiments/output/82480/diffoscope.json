{"diffoscope-json-version": 1, "source1": "first/ByteCode.class", "source2": "second/ByteCode.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,18 +12,22 @@\n     private final ByteCodeForm byteCodeForm;\n     private ClassFileEntry[] nested;\n     private int[][] nestedPositions;\n     private int[] rewrite;\n     private int byteCodeOffset;\n     private int[] byteCodeTargets;\n     \n+    static {\n+        ByteCode.noArgByteCodes = new ByteCode[255];\n+    }\n+    \n     public static ByteCode getByteCode(final int opcode) {\n         final int byteOpcode = 0xFF & opcode;\n         if (ByteCodeForm.get(byteOpcode).hasNoOperand()) {\n-            if (null == ByteCode.noArgByteCodes[byteOpcode]) {\n+            if (ByteCode.noArgByteCodes[byteOpcode] == null) {\n                 ByteCode.noArgByteCodes[byteOpcode] = new ByteCode(byteOpcode);\n             }\n             return ByteCode.noArgByteCodes[byteOpcode];\n         }\n         return new ByteCode(byteOpcode);\n     }\n     \n@@ -39,15 +43,17 @@\n     }\n     \n     public void applyByteCodeTargetFixup(final CodeAttribute codeAttribute) {\n         this.getByteCodeForm().fixUpByteCodeTargets(this, codeAttribute);\n     }\n     \n     protected void doWrite(final DataOutputStream dos) throws IOException {\n-        for (final int element : this.rewrite) {\n+        int[] rewrite;\n+        for (int length = (rewrite = this.rewrite).length, i = 0; i < length; ++i) {\n+            final int element = rewrite[i];\n             dos.writeByte(element);\n         }\n     }\n     \n     public boolean equals(final Object obj) {\n         return this == obj;\n     }\n@@ -199,12 +205,8 @@\n     public void setRewrite(final int[] rewrite) {\n         this.rewrite = rewrite;\n     }\n     \n     public String toString() {\n         return this.getByteCodeForm().getName();\n     }\n-    \n-    static {\n-        ByteCode.noArgByteCodes = new ByteCode[255];\n-    }\n }\n"}]}
