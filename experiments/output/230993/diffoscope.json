{"diffoscope-json-version": 1, "source1": "first/AttributeLayout.class", "source2": "second/AttributeLayout.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -48,65 +48,64 @@\n     private final int index;\n     private final String layout;\n     private long mask;\n     private final String name;\n     private final boolean isDefault;\n     private int backwardsCallCount;\n     \n-    private static ClassFileEntry getValue(final String layout, long value, final SegmentConstantPool pool) throws Pack200Exception {\n-        if (layout.startsWith(\"R\")) {\n-            if (layout.indexOf(78) != -1) {\n-                --value;\n+    private static ClassFileEntry getValue(final String str, long n, final SegmentConstantPool segmentConstantPool) throws Pack200Exception {\n+        if (str.startsWith(\"R\")) {\n+            if (str.indexOf(78) != -1) {\n+                --n;\n             }\n-            if (layout.startsWith(\"RU\")) {\n-                return pool.getValue(1, value);\n+            if (str.startsWith(\"RU\")) {\n+                return segmentConstantPool.getValue(1, n);\n             }\n-            if (layout.startsWith(\"RS\")) {\n-                return pool.getValue(8, value);\n+            if (str.startsWith(\"RS\")) {\n+                return segmentConstantPool.getValue(8, n);\n             }\n         }\n-        else if (layout.startsWith(\"K\")) {\n-            final char type = layout.charAt(1);\n-            switch (type) {\n+        else if (str.startsWith(\"K\")) {\n+            switch (str.charAt(1)) {\n                 case 'S': {\n-                    return pool.getValue(6, value);\n+                    return segmentConstantPool.getValue(6, n);\n                 }\n                 case 'C':\n                 case 'I': {\n-                    return pool.getValue(2, value);\n+                    return segmentConstantPool.getValue(2, n);\n                 }\n                 case 'F': {\n-                    return pool.getValue(3, value);\n+                    return segmentConstantPool.getValue(3, n);\n                 }\n                 case 'J': {\n-                    return pool.getValue(4, value);\n+                    return segmentConstantPool.getValue(4, n);\n                 }\n                 case 'D': {\n-                    return pool.getValue(5, value);\n+                    return segmentConstantPool.getValue(5, n);\n                 }\n             }\n         }\n-        throw new Pack200Exception(\"Unknown layout encoding: \" + layout);\n+        throw new Pack200Exception(\"Unknown layout encoding: \" + str);\n     }\n     \n-    public AttributeLayout(final String name, final int context, final String layout, final int index) throws Pack200Exception {\n-        this(name, context, layout, index, true);\n+    public AttributeLayout(final String s, final int n, final String s2, final int n2) throws Pack200Exception {\n+        this(s, n, s2, n2, true);\n     }\n     \n-    public AttributeLayout(final String name, final int context, final String layout, final int index, final boolean isDefault) throws Pack200Exception {\n+    public AttributeLayout(final String name, final int n, final String layout, final int index, final boolean isDefault) throws Pack200Exception {\n         this.index = index;\n-        this.context = context;\n+        this.context = n;\n         if (index >= 0) {\n             this.mask = 1L << index;\n         }\n         else {\n             this.mask = 0L;\n         }\n-        if (context != 0 && context != 3 && context != 1 && context != 2) {\n-            throw new Pack200Exception(\"Attribute context out of range: \" + context);\n+        if (n != 0 && n != 3 && n != 1 && n != 2) {\n+            throw new Pack200Exception(\"Attribute context out of range: \" + n);\n         }\n         if (layout == null) {\n             throw new Pack200Exception(\"Cannot have a null layout\");\n         }\n         if (name == null || name.length() == 0) {\n             throw new Pack200Exception(\"Cannot have an unnamed layout\");\n         }\n@@ -131,45 +130,42 @@\n         return (Codec)Codec.UNSIGNED5;\n     }\n     \n     public String getLayout() {\n         return this.layout;\n     }\n     \n-    public ClassFileEntry getValue(final long value, final SegmentConstantPool pool) throws Pack200Exception {\n-        return getValue(this.layout, value, pool);\n+    public ClassFileEntry getValue(final long n, final SegmentConstantPool segmentConstantPool) throws Pack200Exception {\n+        return getValue(this.layout, n, segmentConstantPool);\n     }\n     \n-    public ClassFileEntry getValue(final long value, final String type, final SegmentConstantPool pool) throws Pack200Exception {\n+    public ClassFileEntry getValue(final long n, final String str, final SegmentConstantPool segmentConstantPool) throws Pack200Exception {\n         if (!this.layout.startsWith(\"KQ\")) {\n-            return getValue(this.layout, value, pool);\n+            return getValue(this.layout, n, segmentConstantPool);\n         }\n-        if (type.equals(\"Ljava/lang/String;\")) {\n-            return getValue(\"KS\", value, pool);\n+        if (str.equals(\"Ljava/lang/String;\")) {\n+            return getValue(\"KS\", n, segmentConstantPool);\n         }\n-        return getValue(\"K\" + type + this.layout.substring(2), value, pool);\n+        return getValue(\"K\" + str + this.layout.substring(2), n, segmentConstantPool);\n     }\n     \n     @Override\n     public int hashCode() {\n-        final int PRIME = 31;\n-        int r = 1;\n+        int n = 1;\n         if (this.name != null) {\n-            r = r * 31 + this.name.hashCode();\n+            n = n * 31 + this.name.hashCode();\n         }\n         if (this.layout != null) {\n-            r = r * 31 + this.layout.hashCode();\n+            n = n * 31 + this.layout.hashCode();\n         }\n-        r = r * 31 + this.index;\n-        r = r * 31 + this.context;\n-        return r;\n+        return (n * 31 + this.index) * 31 + this.context;\n     }\n     \n-    public boolean matches(final long value) {\n-        return (value & this.mask) != 0x0L;\n+    public boolean matches(final long n) {\n+        return (n & this.mask) != 0x0L;\n     }\n     \n     @Override\n     public String toString() {\n         return AttributeLayout.contextNames[this.context] + \": \" + this.name;\n     }\n     \n"}]}
