{"diffoscope-json-version": 1, "source1": "first/PackingOptions.class", "source2": "second/PackingOptions.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -87,205 +87,205 @@\n         return this.deflateHint;\n     }\n     \n     public boolean isKeepDeflateHint() {\n         return \"keep\".equals(this.deflateHint);\n     }\n     \n-    public void setDeflateHint(final String deflateHint) {\n-        if (!\"keep\".equals(deflateHint) && !\"true\".equals(deflateHint) && !\"false\".equals(deflateHint)) {\n-            throw new IllegalArgumentException(\"Bad argument: -H \" + deflateHint + \" ? deflate hint should be either true, false or keep (default)\");\n+    public void setDeflateHint(final String s) {\n+        if (!\"keep\".equals(s) && !\"true\".equals(s) && !\"false\".equals(s)) {\n+            throw new IllegalArgumentException(\"Bad argument: -H \" + s + \" ? deflate hint should be either true, false or keep (default)\");\n         }\n-        this.deflateHint = deflateHint;\n+        this.deflateHint = s;\n     }\n     \n     public String getModificationTime() {\n         return this.modificationTime;\n     }\n     \n     public void setModificationTime(final String modificationTime) {\n         if (!\"keep\".equals(modificationTime) && !\"latest\".equals(modificationTime)) {\n             throw new IllegalArgumentException(\"Bad argument: -m \" + modificationTime + \" ? transmit modtimes should be either latest or keep (default)\");\n         }\n         this.modificationTime = modificationTime;\n     }\n     \n-    public boolean isPassFile(final String passFileName) {\n+    public boolean isPassFile(final String s) {\n         if (this.passFiles != null) {\n-            for (String pass : this.passFiles) {\n-                if (passFileName.equals(pass)) {\n+            for (String s2 : this.passFiles) {\n+                if (s.equals(s2)) {\n                     return true;\n                 }\n-                if (!pass.endsWith(\".class\")) {\n-                    if (!pass.endsWith(\"/\")) {\n-                        pass = pass;\n+                if (!s2.endsWith(\".class\")) {\n+                    if (!s2.endsWith(\"/\")) {\n+                        s2 = s2;\n                     }\n-                    return passFileName.startsWith(pass);\n+                    return s.startsWith(s2);\n                 }\n             }\n         }\n         return false;\n     }\n     \n-    public void addPassFile(String passFileName) {\n+    public void addPassFile(String replaceAll) {\n         if (this.passFiles == null) {\n             this.passFiles = new ArrayList();\n         }\n-        String fileSeparator = System.getProperty(\"file.separator\");\n-        if (fileSeparator.equals(\"\\\\\")) {\n-            fileSeparator = fileSeparator;\n+        String property = System.getProperty(\"file.separator\");\n+        if (property.equals(\"\\\\\")) {\n+            property = property;\n         }\n-        passFileName = passFileName.replaceAll(fileSeparator, \"/\");\n-        this.passFiles.add(passFileName);\n+        replaceAll = replaceAll.replaceAll(property, \"/\");\n+        this.passFiles.add(replaceAll);\n     }\n     \n-    public void removePassFile(final String passFileName) {\n-        this.passFiles.remove(passFileName);\n+    public void removePassFile(final String s) {\n+        this.passFiles.remove(s);\n     }\n     \n     public String getUnknownAttributeAction() {\n         return this.unknownAttributeAction;\n     }\n     \n-    public void setUnknownAttributeAction(final String unknownAttributeAction) {\n-        this.unknownAttributeAction = unknownAttributeAction;\n-        if (!\"pass\".equals(unknownAttributeAction) && !\"error\".equals(unknownAttributeAction) && !\"strip\".equals(unknownAttributeAction)) {\n-            throw new RuntimeException(\"Incorrect option for -U, \" + unknownAttributeAction);\n+    public void setUnknownAttributeAction(final String s) {\n+        this.unknownAttributeAction = s;\n+        if (!\"pass\".equals(s) && !\"error\".equals(s) && !\"strip\".equals(s)) {\n+            throw new RuntimeException(\"Incorrect option for -U, \" + s);\n         }\n     }\n     \n-    public void addClassAttributeAction(final String attributeName, final String action) {\n+    public void addClassAttributeAction(final String s, final String s2) {\n         if (this.classAttributeActions == null) {\n             this.classAttributeActions = new HashMap();\n         }\n-        this.classAttributeActions.put(attributeName, action);\n+        this.classAttributeActions.put(s, s2);\n     }\n     \n-    public void addFieldAttributeAction(final String attributeName, final String action) {\n+    public void addFieldAttributeAction(final String s, final String s2) {\n         if (this.fieldAttributeActions == null) {\n             this.fieldAttributeActions = new HashMap();\n         }\n-        this.fieldAttributeActions.put(attributeName, action);\n+        this.fieldAttributeActions.put(s, s2);\n     }\n     \n-    public void addMethodAttributeAction(final String attributeName, final String action) {\n+    public void addMethodAttributeAction(final String s, final String s2) {\n         if (this.methodAttributeActions == null) {\n             this.methodAttributeActions = new HashMap();\n         }\n-        this.methodAttributeActions.put(attributeName, action);\n+        this.methodAttributeActions.put(s, s2);\n     }\n     \n-    public void addCodeAttributeAction(final String attributeName, final String action) {\n+    public void addCodeAttributeAction(final String s, final String s2) {\n         if (this.codeAttributeActions == null) {\n             this.codeAttributeActions = new HashMap();\n         }\n-        this.codeAttributeActions.put(attributeName, action);\n+        this.codeAttributeActions.put(s, s2);\n     }\n     \n     public boolean isVerbose() {\n         return this.verbose;\n     }\n     \n     public void setVerbose(final boolean verbose) {\n         this.verbose = verbose;\n     }\n     \n-    public void setQuiet(final boolean quiet) {\n-        this.verbose = !quiet;\n+    public void setQuiet(final boolean b) {\n+        this.verbose = !b;\n     }\n     \n     public String getLogFile() {\n         return this.logFile;\n     }\n     \n     public void setLogFile(final String logFile) {\n         this.logFile = logFile;\n     }\n     \n-    private void addOrUpdateAttributeActions(final List prototypes, final Map attributeActions, final int tag) {\n-        if (attributeActions != null && attributeActions.size() > 0) {\n-            for (final String name : attributeActions.keySet()) {\n-                final String action = (String)attributeActions.get(name);\n-                boolean prototypeExists = false;\n-                for (final NewAttribute newAttribute : prototypes) {\n-                    if (newAttribute.type.equals(name)) {\n-                        newAttribute.addContext(tag);\n-                        prototypeExists = true;\n+    private void addOrUpdateAttributeActions(final List list, final Map map, final int n) {\n+        if (map != null && map.size() > 0) {\n+            for (final String anObject : map.keySet()) {\n+                final String anObject2 = (String)map.get(anObject);\n+                boolean b = false;\n+                for (final NewAttribute newAttribute : list) {\n+                    if (newAttribute.type.equals(anObject)) {\n+                        newAttribute.addContext(n);\n+                        b = true;\n                         break;\n                     }\n                 }\n-                if (!prototypeExists) {\n-                    NewAttribute newAttribute;\n-                    if (\"error\".equals(action)) {\n-                        newAttribute = (NewAttribute)new NewAttribute.ErrorAttribute(name, tag);\n+                if (!b) {\n+                    Object o;\n+                    if (\"error\".equals(anObject2)) {\n+                        o = new NewAttribute.ErrorAttribute(anObject, n);\n                     }\n-                    else if (\"strip\".equals(action)) {\n-                        newAttribute = (NewAttribute)new NewAttribute.StripAttribute(name, tag);\n+                    else if (\"strip\".equals(anObject2)) {\n+                        o = new NewAttribute.StripAttribute(anObject, n);\n                     }\n-                    else if (\"pass\".equals(action)) {\n-                        newAttribute = (NewAttribute)new NewAttribute.PassAttribute(name, tag);\n+                    else if (\"pass\".equals(anObject2)) {\n+                        o = new NewAttribute.PassAttribute(anObject, n);\n                     }\n                     else {\n-                        newAttribute = new NewAttribute(name, action, tag);\n+                        o = new NewAttribute(anObject, anObject2, n);\n                     }\n-                    prototypes.add(newAttribute);\n+                    list.add(o);\n                 }\n             }\n         }\n     }\n     \n     public Attribute[] getUnknownAttributePrototypes() {\n         if (this.unknownAttributeTypes == null) {\n-            final List prototypes = new ArrayList();\n-            this.addOrUpdateAttributeActions(prototypes, this.classAttributeActions, 0);\n-            this.addOrUpdateAttributeActions(prototypes, this.methodAttributeActions, 2);\n-            this.addOrUpdateAttributeActions(prototypes, this.fieldAttributeActions, 1);\n-            this.addOrUpdateAttributeActions(prototypes, this.codeAttributeActions, 3);\n-            this.unknownAttributeTypes = prototypes.toArray(new Attribute[0]);\n+            final ArrayList list = new ArrayList();\n+            this.addOrUpdateAttributeActions(list, this.classAttributeActions, 0);\n+            this.addOrUpdateAttributeActions(list, this.methodAttributeActions, 2);\n+            this.addOrUpdateAttributeActions(list, this.fieldAttributeActions, 1);\n+            this.addOrUpdateAttributeActions(list, this.codeAttributeActions, 3);\n+            this.unknownAttributeTypes = (Attribute[])list.toArray(new Attribute[0]);\n         }\n         return this.unknownAttributeTypes;\n     }\n     \n-    public String getUnknownClassAttributeAction(final String type) {\n+    public String getUnknownClassAttributeAction(final String s) {\n         if (this.classAttributeActions == null) {\n             return this.unknownAttributeAction;\n         }\n-        String action = (String)this.classAttributeActions.get(type);\n-        if (action == null) {\n-            action = this.unknownAttributeAction;\n+        String unknownAttributeAction = (String)this.classAttributeActions.get(s);\n+        if (unknownAttributeAction == null) {\n+            unknownAttributeAction = this.unknownAttributeAction;\n         }\n-        return action;\n+        return unknownAttributeAction;\n     }\n     \n-    public String getUnknownMethodAttributeAction(final String type) {\n+    public String getUnknownMethodAttributeAction(final String s) {\n         if (this.methodAttributeActions == null) {\n             return this.unknownAttributeAction;\n         }\n-        String action = (String)this.methodAttributeActions.get(type);\n-        if (action == null) {\n-            action = this.unknownAttributeAction;\n+        String unknownAttributeAction = (String)this.methodAttributeActions.get(s);\n+        if (unknownAttributeAction == null) {\n+            unknownAttributeAction = this.unknownAttributeAction;\n         }\n-        return action;\n+        return unknownAttributeAction;\n     }\n     \n-    public String getUnknownFieldAttributeAction(final String type) {\n+    public String getUnknownFieldAttributeAction(final String s) {\n         if (this.fieldAttributeActions == null) {\n             return this.unknownAttributeAction;\n         }\n-        String action = (String)this.fieldAttributeActions.get(type);\n-        if (action == null) {\n-            action = this.unknownAttributeAction;\n+        String unknownAttributeAction = (String)this.fieldAttributeActions.get(s);\n+        if (unknownAttributeAction == null) {\n+            unknownAttributeAction = this.unknownAttributeAction;\n         }\n-        return action;\n+        return unknownAttributeAction;\n     }\n     \n-    public String getUnknownCodeAttributeAction(final String type) {\n+    public String getUnknownCodeAttributeAction(final String s) {\n         if (this.codeAttributeActions == null) {\n             return this.unknownAttributeAction;\n         }\n-        String action = (String)this.codeAttributeActions.get(type);\n-        if (action == null) {\n-            action = this.unknownAttributeAction;\n+        String unknownAttributeAction = (String)this.codeAttributeActions.get(s);\n+        if (unknownAttributeAction == null) {\n+            unknownAttributeAction = this.unknownAttributeAction;\n         }\n-        return action;\n+        return unknownAttributeAction;\n     }\n }\n"}]}
