{"diffoscope-json-version": 1, "source1": "first/ResourceAlignmentExtraField.class", "source2": "second/ResourceAlignmentExtraField.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,46 +1,46 @@\n-  SHA-256 checksum 227b58119c5bf7c5e72ebb31af4f9c74d6a1c1cec3ef34ccfdbbf51689e20bf8\n+  SHA-256 checksum 304d41c7aa3e46b721ee1aaef768be9edbdc6d4e4a816c35e7b498b1ba3ea20a\n   Compiled from \"ResourceAlignmentExtraField.java\"\n public class org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField implements org.apache.commons.compress.archivers.zip.ZipExtraField\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #17                         // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n   super_class: #28                        // java/lang/Object\n   interfaces: 1, fields: 6, methods: 14, attributes: 1\n Constant pool:\n-    #1 = Methodref          #28.#78       // java/lang/Object.\"<init>\":()V\n-    #2 = Fieldref           #17.#79       // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.padding:I\n-    #3 = Methodref          #17.#80       // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.\"<init>\":(IZ)V\n-    #4 = Methodref          #17.#81       // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.\"<init>\":(IZI)V\n-    #5 = Class              #82           // java/lang/IllegalArgumentException\n-    #6 = Class              #83           // java/lang/StringBuilder\n-    #7 = Methodref          #6.#78        // java/lang/StringBuilder.\"<init>\":()V\n-    #8 = String             #84           // Alignment must be between 0 and 0x7fff, was:\n-    #9 = Methodref          #6.#85        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #10 = Methodref          #6.#86        // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #11 = Methodref          #6.#87        // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #12 = Methodref          #5.#88        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #13 = Fieldref           #17.#89       // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.alignment:S\n-   #14 = Fieldref           #17.#90       // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.allowMethodChange:Z\n-   #15 = Fieldref           #17.#91       // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #16 = Class              #92           // org/apache/commons/compress/archivers/zip/ZipShort\n-   #17 = Class              #93           // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n-   #18 = Methodref          #16.#94       // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+    #1 = Methodref          #28.#77       // java/lang/Object.\"<init>\":()V\n+    #2 = Fieldref           #17.#78       // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.padding:I\n+    #3 = Methodref          #17.#79       // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.\"<init>\":(IZ)V\n+    #4 = Methodref          #17.#80       // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.\"<init>\":(IZI)V\n+    #5 = Class              #81           // java/lang/IllegalArgumentException\n+    #6 = Class              #82           // java/lang/StringBuilder\n+    #7 = Methodref          #6.#77        // java/lang/StringBuilder.\"<init>\":()V\n+    #8 = String             #83           // Alignment must be between 0 and 0x7fff, was:\n+    #9 = Methodref          #6.#84        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #10 = Methodref          #6.#85        // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+   #11 = Methodref          #6.#86        // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+   #12 = Methodref          #5.#87        // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #13 = Fieldref           #17.#88       // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.alignment:S\n+   #14 = Fieldref           #17.#89       // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.allowMethodChange:Z\n+   #15 = Fieldref           #17.#90       // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #16 = Class              #91           // org/apache/commons/compress/archivers/zip/ZipShort\n+   #17 = Class              #92           // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n+   #18 = Methodref          #16.#93       // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n    #19 = Integer            32768\n-   #20 = Methodref          #16.#95       // org/apache/commons/compress/archivers/zip/ZipShort.putShort:(I[BI)V\n-   #21 = Methodref          #16.#96       // org/apache/commons/compress/archivers/zip/ZipShort.getBytes:(I)[B\n-   #22 = Methodref          #17.#97       // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.parseFromCentralDirectoryData:([BII)V\n-   #23 = Class              #98           // java/util/zip/ZipException\n-   #24 = String             #99           // Too short content for ResourceAlignmentExtraField (0xa11e):\n-   #25 = Methodref          #23.#88       // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-   #26 = Methodref          #16.#100      // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n+   #20 = Methodref          #16.#94       // org/apache/commons/compress/archivers/zip/ZipShort.putShort:(I[BI)V\n+   #21 = Methodref          #16.#95       // org/apache/commons/compress/archivers/zip/ZipShort.getBytes:(I)[B\n+   #22 = Methodref          #17.#96       // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.parseFromCentralDirectoryData:([BII)V\n+   #23 = Class              #97           // java/util/zip/ZipException\n+   #24 = String             #98           // Too short content for ResourceAlignmentExtraField (0xa11e):\n+   #25 = Methodref          #23.#87       // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+   #26 = Methodref          #16.#99       // org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I\n    #27 = Integer            41246\n-   #28 = Class              #101          // java/lang/Object\n-   #29 = Class              #102          // org/apache/commons/compress/archivers/zip/ZipExtraField\n+   #28 = Class              #100          // java/lang/Object\n+   #29 = Class              #101          // org/apache/commons/compress/archivers/zip/ZipExtraField\n    #30 = Utf8               ID\n    #31 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n    #32 = Utf8               BASE_SIZE\n    #33 = Utf8               I\n    #34 = Utf8               ConstantValue\n    #35 = Integer            2\n    #36 = Utf8               ALLOW_METHOD_MESSAGE_CHANGE_FLAG\n@@ -56,76 +56,75 @@\n    #46 = Utf8               LocalVariableTable\n    #47 = Utf8               this\n    #48 = Utf8               Lorg/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField;\n    #49 = Utf8               (I)V\n    #50 = Utf8               (IZ)V\n    #51 = Utf8               (IZI)V\n    #52 = Utf8               StackMapTable\n-   #53 = Class              #93           // org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n-   #54 = Utf8               getAlignment\n-   #55 = Utf8               ()S\n-   #56 = Utf8               ()Z\n-   #57 = Utf8               getHeaderId\n-   #58 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #59 = Utf8               getLocalFileDataLength\n-   #60 = Utf8               getCentralDirectoryLength\n-   #61 = Utf8               getLocalFileDataData\n-   #62 = Utf8               ()[B\n-   #63 = Utf8               content\n-   #64 = Utf8               [B\n-   #65 = Class              #64           // \"[B\"\n-   #66 = Utf8               getCentralDirectoryData\n-   #67 = Utf8               parseFromLocalFileData\n-   #68 = Utf8               ([BII)V\n-   #69 = Utf8               buffer\n-   #70 = Utf8               offset\n-   #71 = Utf8               length\n-   #72 = Utf8               Exceptions\n-   #73 = Utf8               parseFromCentralDirectoryData\n-   #74 = Utf8               alignmentValue\n-   #75 = Utf8               <clinit>\n-   #76 = Utf8               SourceFile\n-   #77 = Utf8               ResourceAlignmentExtraField.java\n-   #78 = NameAndType        #42:#43       // \"<init>\":()V\n-   #79 = NameAndType        #41:#33       // padding:I\n-   #80 = NameAndType        #42:#50       // \"<init>\":(IZ)V\n-   #81 = NameAndType        #42:#51       // \"<init>\":(IZI)V\n-   #82 = Utf8               java/lang/IllegalArgumentException\n-   #83 = Utf8               java/lang/StringBuilder\n-   #84 = Utf8               Alignment must be between 0 and 0x7fff, was:\n-   #85 = NameAndType        #103:#104     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #86 = NameAndType        #103:#105     // append:(I)Ljava/lang/StringBuilder;\n-   #87 = NameAndType        #106:#107     // toString:()Ljava/lang/String;\n-   #88 = NameAndType        #42:#108      // \"<init>\":(Ljava/lang/String;)V\n-   #89 = NameAndType        #37:#38       // alignment:S\n-   #90 = NameAndType        #39:#40       // allowMethodChange:Z\n-   #91 = NameAndType        #30:#31       // ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #92 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-   #93 = Utf8               org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n-   #94 = NameAndType        #42:#49       // \"<init>\":(I)V\n-   #95 = NameAndType        #109:#110     // putShort:(I[BI)V\n-   #96 = NameAndType        #111:#112     // getBytes:(I)[B\n-   #97 = NameAndType        #73:#68       // parseFromCentralDirectoryData:([BII)V\n-   #98 = Utf8               java/util/zip/ZipException\n-   #99 = Utf8               Too short content for ResourceAlignmentExtraField (0xa11e):\n-  #100 = NameAndType        #113:#114     // getValue:([BI)I\n-  #101 = Utf8               java/lang/Object\n-  #102 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n-  #103 = Utf8               append\n-  #104 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #105 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #106 = Utf8               toString\n-  #107 = Utf8               ()Ljava/lang/String;\n-  #108 = Utf8               (Ljava/lang/String;)V\n-  #109 = Utf8               putShort\n-  #110 = Utf8               (I[BI)V\n-  #111 = Utf8               getBytes\n-  #112 = Utf8               (I)[B\n-  #113 = Utf8               getValue\n-  #114 = Utf8               ([BI)I\n+   #53 = Utf8               getAlignment\n+   #54 = Utf8               ()S\n+   #55 = Utf8               ()Z\n+   #56 = Utf8               getHeaderId\n+   #57 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #58 = Utf8               getLocalFileDataLength\n+   #59 = Utf8               getCentralDirectoryLength\n+   #60 = Utf8               getLocalFileDataData\n+   #61 = Utf8               ()[B\n+   #62 = Utf8               content\n+   #63 = Utf8               [B\n+   #64 = Class              #63           // \"[B\"\n+   #65 = Utf8               getCentralDirectoryData\n+   #66 = Utf8               parseFromLocalFileData\n+   #67 = Utf8               ([BII)V\n+   #68 = Utf8               buffer\n+   #69 = Utf8               offset\n+   #70 = Utf8               length\n+   #71 = Utf8               Exceptions\n+   #72 = Utf8               parseFromCentralDirectoryData\n+   #73 = Utf8               alignmentValue\n+   #74 = Utf8               <clinit>\n+   #75 = Utf8               SourceFile\n+   #76 = Utf8               ResourceAlignmentExtraField.java\n+   #77 = NameAndType        #42:#43       // \"<init>\":()V\n+   #78 = NameAndType        #41:#33       // padding:I\n+   #79 = NameAndType        #42:#50       // \"<init>\":(IZ)V\n+   #80 = NameAndType        #42:#51       // \"<init>\":(IZI)V\n+   #81 = Utf8               java/lang/IllegalArgumentException\n+   #82 = Utf8               java/lang/StringBuilder\n+   #83 = Utf8               Alignment must be between 0 and 0x7fff, was:\n+   #84 = NameAndType        #102:#103     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+   #85 = NameAndType        #102:#104     // append:(I)Ljava/lang/StringBuilder;\n+   #86 = NameAndType        #105:#106     // toString:()Ljava/lang/String;\n+   #87 = NameAndType        #42:#107      // \"<init>\":(Ljava/lang/String;)V\n+   #88 = NameAndType        #37:#38       // alignment:S\n+   #89 = NameAndType        #39:#40       // allowMethodChange:Z\n+   #90 = NameAndType        #30:#31       // ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #91 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+   #92 = Utf8               org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField\n+   #93 = NameAndType        #42:#49       // \"<init>\":(I)V\n+   #94 = NameAndType        #108:#109     // putShort:(I[BI)V\n+   #95 = NameAndType        #110:#111     // getBytes:(I)[B\n+   #96 = NameAndType        #72:#67       // parseFromCentralDirectoryData:([BII)V\n+   #97 = Utf8               java/util/zip/ZipException\n+   #98 = Utf8               Too short content for ResourceAlignmentExtraField (0xa11e):\n+   #99 = NameAndType        #112:#113     // getValue:([BI)I\n+  #100 = Utf8               java/lang/Object\n+  #101 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n+  #102 = Utf8               append\n+  #103 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #104 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #105 = Utf8               toString\n+  #106 = Utf8               ()Ljava/lang/String;\n+  #107 = Utf8               (Ljava/lang/String;)V\n+  #108 = Utf8               putShort\n+  #109 = Utf8               (I[BI)V\n+  #110 = Utf8               getBytes\n+  #111 = Utf8               (I)[B\n+  #112 = Utf8               getValue\n+  #113 = Utf8               ([BI)I\n {\n   public static final org.apache.commons.compress.archivers.zip.ZipShort ID;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n \n   public static final int BASE_SIZE = 2;\n     descriptor: I\n"}]}
