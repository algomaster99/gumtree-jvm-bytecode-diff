{"diffoscope-json-version": 1, "source1": "first/Telnet.class", "source2": "second/Telnet.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,107 +1,107 @@\n-  SHA-256 checksum 637dde3747785195e40c67ac5ee2063ba3bd433e82dfa3d8f9ab44634ad0f160\n+  SHA-256 checksum 22e8d015c341dfe6bc4d8885fe45514d381807462462bf9db0638e9fdbe873cd\n   Compiled from \"Telnet.java\"\n class org.apache.commons.net.telnet.Telnet extends org.apache.commons.net.SocketClient\n   minor version: 0\n   major version: 52\n   flags: (0x0020) ACC_SUPER\n   this_class: #1                          // org/apache/commons/net/telnet/Telnet\n   super_class: #90                        // org/apache/commons/net/SocketClient\n   interfaces: 0, fields: 27, methods: 48, attributes: 1\n Constant pool:\n-    #1 = Class              #236          // org/apache/commons/net/telnet/Telnet\n-    #2 = Methodref          #90.#237      // org/apache/commons/net/SocketClient.\"<init>\":()V\n-    #3 = Class              #238          // java/lang/Object\n-    #4 = Methodref          #3.#237       // java/lang/Object.\"<init>\":()V\n-    #5 = Fieldref           #1.#239       // org/apache/commons/net/telnet/Telnet.aytMonitor:Ljava/lang/Object;\n-    #6 = Fieldref           #1.#240       // org/apache/commons/net/telnet/Telnet.aytFlag:Z\n-    #7 = Methodref          #1.#241       // org/apache/commons/net/telnet/Telnet.setDefaultPort:(I)V\n-    #8 = Class              #242          // org/apache/commons/net/telnet/TelnetOption\n-    #9 = Fieldref           #1.#243       // org/apache/commons/net/telnet/Telnet.doResponse:[I\n-   #10 = Fieldref           #1.#244       // org/apache/commons/net/telnet/Telnet.willResponse:[I\n-   #11 = Fieldref           #1.#245       // org/apache/commons/net/telnet/Telnet.options:[I\n-   #12 = Class              #246          // org/apache/commons/net/telnet/TelnetOptionHandler\n-   #13 = Fieldref           #1.#247       // org/apache/commons/net/telnet/Telnet.optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;\n-   #14 = Fieldref           #1.#248       // org/apache/commons/net/telnet/Telnet.terminalType:Ljava/lang/String;\n-   #15 = Methodref          #12.#249      // org/apache/commons/net/telnet/TelnetOptionHandler.setDo:(Z)V\n-   #16 = Methodref          #12.#250      // org/apache/commons/net/telnet/TelnetOptionHandler.setWill:(Z)V\n-   #17 = Methodref          #90.#251      // org/apache/commons/net/SocketClient._connectAction_:()V\n-   #18 = Class              #252          // java/io/BufferedInputStream\n-   #19 = Fieldref           #1.#253       // org/apache/commons/net/telnet/Telnet._input_:Ljava/io/InputStream;\n-   #20 = Methodref          #18.#254      // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #21 = Class              #255          // java/io/BufferedOutputStream\n-   #22 = Fieldref           #1.#256       // org/apache/commons/net/telnet/Telnet._output_:Ljava/io/OutputStream;\n-   #23 = Methodref          #21.#257      // java/io/BufferedOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n-   #24 = Methodref          #12.#258      // org/apache/commons/net/telnet/TelnetOptionHandler.getInitLocal:()Z\n-   #25 = Methodref          #12.#259      // org/apache/commons/net/telnet/TelnetOptionHandler.getOptionCode:()I\n-   #26 = Methodref          #1.#260       // org/apache/commons/net/telnet/Telnet.requestWill:(I)V\n-   #27 = Methodref          #12.#261      // org/apache/commons/net/telnet/TelnetOptionHandler.getInitRemote:()Z\n-   #28 = Methodref          #1.#262       // org/apache/commons/net/telnet/Telnet.requestDo:(I)V\n-   #29 = Fieldref           #1.#263       // org/apache/commons/net/telnet/Telnet.spyStream:Ljava/io/OutputStream;\n-   #30 = Fieldref           #1.#264       // org/apache/commons/net/telnet/Telnet.COMMAND_AYT:[B\n-   #31 = Methodref          #265.#266     // java/io/OutputStream.write:([B)V\n-   #32 = Methodref          #265.#267     // java/io/OutputStream.flush:()V\n-   #33 = Methodref          #3.#268       // java/lang/Object.wait:(J)V\n-   #34 = Class              #269          // org/apache/commons/net/telnet/TelnetCommand\n-   #35 = Methodref          #265.#270     // java/io/OutputStream.write:(I)V\n-   #36 = Fieldref           #1.#271       // org/apache/commons/net/telnet/Telnet.COMMAND_SB:[B\n-   #37 = Fieldref           #1.#272       // org/apache/commons/net/telnet/Telnet.COMMAND_SE:[B\n-   #38 = Methodref          #8.#273       // org/apache/commons/net/telnet/TelnetOption.isValidOption:(I)Z\n-   #39 = Class              #274          // org/apache/commons/net/telnet/InvalidTelnetOptionException\n-   #40 = String             #275          // Invalid Option Code\n-   #41 = Methodref          #39.#276      // org/apache/commons/net/telnet/InvalidTelnetOptionException.\"<init>\":(Ljava/lang/String;I)V\n-   #42 = String             #277          // Already registered option\n-   #43 = Methodref          #1.#278       // org/apache/commons/net/telnet/Telnet.isConnected:()Z\n-   #44 = String             #279          // Unregistered option\n-   #45 = Methodref          #12.#280      // org/apache/commons/net/telnet/TelnetOptionHandler.getWill:()Z\n-   #46 = Methodref          #1.#281       // org/apache/commons/net/telnet/Telnet.requestWont:(I)V\n-   #47 = Methodref          #12.#282      // org/apache/commons/net/telnet/TelnetOptionHandler.getDo:()Z\n-   #48 = Methodref          #1.#283       // org/apache/commons/net/telnet/Telnet.requestDont:(I)V\n-   #49 = Methodref          #3.#284       // java/lang/Object.notifyAll:()V\n-   #50 = Fieldref           #1.#285       // org/apache/commons/net/telnet/Telnet.notifhand:Lorg/apache/commons/net/telnet/TelnetNotificationHandler;\n-   #51 = Class              #286          // org/apache/commons/net/telnet/TelnetNotificationHandler\n-   #52 = InterfaceMethodref #51.#287      // org/apache/commons/net/telnet/TelnetNotificationHandler.receivedNegotiation:(II)V\n-   #53 = Methodref          #12.#288      // org/apache/commons/net/telnet/TelnetOptionHandler.getAcceptLocal:()Z\n-   #54 = Methodref          #289.#290     // java/lang/String.isEmpty:()Z\n-   #55 = Methodref          #1.#291       // org/apache/commons/net/telnet/Telnet.stateIsWill:(I)Z\n-   #56 = Methodref          #1.#292       // org/apache/commons/net/telnet/Telnet.requestedWont:(I)Z\n-   #57 = Methodref          #1.#293       // org/apache/commons/net/telnet/Telnet.setWantWill:(I)V\n-   #58 = Methodref          #1.#294       // org/apache/commons/net/telnet/Telnet.sendWill:(I)V\n-   #59 = Methodref          #1.#295       // org/apache/commons/net/telnet/Telnet.sendWont:(I)V\n-   #60 = Methodref          #1.#296       // org/apache/commons/net/telnet/Telnet.setWill:(I)V\n-   #61 = Methodref          #1.#297       // org/apache/commons/net/telnet/Telnet.stateIsWont:(I)Z\n-   #62 = Methodref          #1.#298       // org/apache/commons/net/telnet/Telnet.requestedWill:(I)Z\n-   #63 = Methodref          #1.#299       // org/apache/commons/net/telnet/Telnet.setWantWont:(I)V\n-   #64 = Methodref          #1.#300       // org/apache/commons/net/telnet/Telnet.setWont:(I)V\n-   #65 = Methodref          #12.#301      // org/apache/commons/net/telnet/TelnetOptionHandler.answerSubnegotiation:([II)[I\n-   #66 = Methodref          #1.#302       // org/apache/commons/net/telnet/Telnet._sendSubnegotiation:([I)V\n-   #67 = Methodref          #1.#303       // org/apache/commons/net/telnet/Telnet.sendTerminalType:()V\n-   #68 = Methodref          #12.#304      // org/apache/commons/net/telnet/TelnetOptionHandler.getAcceptRemote:()Z\n-   #69 = Methodref          #1.#305       // org/apache/commons/net/telnet/Telnet.stateIsDo:(I)Z\n-   #70 = Methodref          #1.#306       // org/apache/commons/net/telnet/Telnet.requestedDont:(I)Z\n-   #71 = Methodref          #1.#307       // org/apache/commons/net/telnet/Telnet.setWantDo:(I)V\n-   #72 = Methodref          #1.#308       // org/apache/commons/net/telnet/Telnet.sendDo:(I)V\n-   #73 = Methodref          #1.#309       // org/apache/commons/net/telnet/Telnet.sendDont:(I)V\n-   #74 = Methodref          #1.#310       // org/apache/commons/net/telnet/Telnet.setDo:(I)V\n-   #75 = Methodref          #1.#311       // org/apache/commons/net/telnet/Telnet.stateIsDont:(I)Z\n-   #76 = Methodref          #1.#312       // org/apache/commons/net/telnet/Telnet.requestedDo:(I)Z\n-   #77 = Methodref          #1.#313       // org/apache/commons/net/telnet/Telnet.setWantDont:(I)V\n-   #78 = Methodref          #1.#314       // org/apache/commons/net/telnet/Telnet.setDont:(I)V\n-   #79 = Methodref          #1.#315       // org/apache/commons/net/telnet/Telnet.spyWrite:(I)V\n-   #80 = Fieldref           #1.#316       // org/apache/commons/net/telnet/Telnet.COMMAND_DO:[B\n-   #81 = Fieldref           #1.#317       // org/apache/commons/net/telnet/Telnet.COMMAND_DONT:[B\n-   #82 = Fieldref           #1.#318       // org/apache/commons/net/telnet/Telnet.COMMAND_IS:[B\n-   #83 = Methodref          #1.#319       // org/apache/commons/net/telnet/Telnet.getCharset:()Ljava/nio/charset/Charset;\n-   #84 = Methodref          #289.#320     // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n-   #85 = Fieldref           #1.#321       // org/apache/commons/net/telnet/Telnet.COMMAND_WILL:[B\n-   #86 = Fieldref           #1.#322       // org/apache/commons/net/telnet/Telnet.COMMAND_WONT:[B\n-   #87 = Methodref          #12.#323      // org/apache/commons/net/telnet/TelnetOptionHandler.startSubnegotiationRemote:()[I\n-   #88 = Methodref          #12.#324      // org/apache/commons/net/telnet/TelnetOptionHandler.startSubnegotiationLocal:()[I\n-   #89 = Class              #325          // java/io/IOException\n-   #90 = Class              #326          // org/apache/commons/net/SocketClient\n+    #1 = Class              #232          // org/apache/commons/net/telnet/Telnet\n+    #2 = Methodref          #90.#233      // org/apache/commons/net/SocketClient.\"<init>\":()V\n+    #3 = Class              #234          // java/lang/Object\n+    #4 = Methodref          #3.#233       // java/lang/Object.\"<init>\":()V\n+    #5 = Fieldref           #1.#235       // org/apache/commons/net/telnet/Telnet.aytMonitor:Ljava/lang/Object;\n+    #6 = Fieldref           #1.#236       // org/apache/commons/net/telnet/Telnet.aytFlag:Z\n+    #7 = Methodref          #1.#237       // org/apache/commons/net/telnet/Telnet.setDefaultPort:(I)V\n+    #8 = Class              #238          // org/apache/commons/net/telnet/TelnetOption\n+    #9 = Fieldref           #1.#239       // org/apache/commons/net/telnet/Telnet.doResponse:[I\n+   #10 = Fieldref           #1.#240       // org/apache/commons/net/telnet/Telnet.willResponse:[I\n+   #11 = Fieldref           #1.#241       // org/apache/commons/net/telnet/Telnet.options:[I\n+   #12 = Class              #242          // org/apache/commons/net/telnet/TelnetOptionHandler\n+   #13 = Fieldref           #1.#243       // org/apache/commons/net/telnet/Telnet.optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;\n+   #14 = Fieldref           #1.#244       // org/apache/commons/net/telnet/Telnet.terminalType:Ljava/lang/String;\n+   #15 = Methodref          #12.#245      // org/apache/commons/net/telnet/TelnetOptionHandler.setDo:(Z)V\n+   #16 = Methodref          #12.#246      // org/apache/commons/net/telnet/TelnetOptionHandler.setWill:(Z)V\n+   #17 = Methodref          #90.#247      // org/apache/commons/net/SocketClient._connectAction_:()V\n+   #18 = Class              #248          // java/io/BufferedInputStream\n+   #19 = Fieldref           #1.#249       // org/apache/commons/net/telnet/Telnet._input_:Ljava/io/InputStream;\n+   #20 = Methodref          #18.#250      // java/io/BufferedInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #21 = Class              #251          // java/io/BufferedOutputStream\n+   #22 = Fieldref           #1.#252       // org/apache/commons/net/telnet/Telnet._output_:Ljava/io/OutputStream;\n+   #23 = Methodref          #21.#253      // java/io/BufferedOutputStream.\"<init>\":(Ljava/io/OutputStream;)V\n+   #24 = Methodref          #12.#254      // org/apache/commons/net/telnet/TelnetOptionHandler.getInitLocal:()Z\n+   #25 = Methodref          #12.#255      // org/apache/commons/net/telnet/TelnetOptionHandler.getOptionCode:()I\n+   #26 = Methodref          #1.#256       // org/apache/commons/net/telnet/Telnet.requestWill:(I)V\n+   #27 = Methodref          #12.#257      // org/apache/commons/net/telnet/TelnetOptionHandler.getInitRemote:()Z\n+   #28 = Methodref          #1.#258       // org/apache/commons/net/telnet/Telnet.requestDo:(I)V\n+   #29 = Fieldref           #1.#259       // org/apache/commons/net/telnet/Telnet.spyStream:Ljava/io/OutputStream;\n+   #30 = Fieldref           #1.#260       // org/apache/commons/net/telnet/Telnet.COMMAND_AYT:[B\n+   #31 = Methodref          #222.#261     // java/io/OutputStream.write:([B)V\n+   #32 = Methodref          #222.#262     // java/io/OutputStream.flush:()V\n+   #33 = Methodref          #3.#263       // java/lang/Object.wait:(J)V\n+   #34 = Class              #264          // org/apache/commons/net/telnet/TelnetCommand\n+   #35 = Methodref          #222.#265     // java/io/OutputStream.write:(I)V\n+   #36 = Fieldref           #1.#266       // org/apache/commons/net/telnet/Telnet.COMMAND_SB:[B\n+   #37 = Fieldref           #1.#267       // org/apache/commons/net/telnet/Telnet.COMMAND_SE:[B\n+   #38 = Methodref          #8.#268       // org/apache/commons/net/telnet/TelnetOption.isValidOption:(I)Z\n+   #39 = Class              #269          // org/apache/commons/net/telnet/InvalidTelnetOptionException\n+   #40 = String             #270          // Invalid Option Code\n+   #41 = Methodref          #39.#271      // org/apache/commons/net/telnet/InvalidTelnetOptionException.\"<init>\":(Ljava/lang/String;I)V\n+   #42 = String             #272          // Already registered option\n+   #43 = Methodref          #1.#273       // org/apache/commons/net/telnet/Telnet.isConnected:()Z\n+   #44 = String             #274          // Unregistered option\n+   #45 = Methodref          #12.#275      // org/apache/commons/net/telnet/TelnetOptionHandler.getWill:()Z\n+   #46 = Methodref          #1.#276       // org/apache/commons/net/telnet/Telnet.requestWont:(I)V\n+   #47 = Methodref          #12.#277      // org/apache/commons/net/telnet/TelnetOptionHandler.getDo:()Z\n+   #48 = Methodref          #1.#278       // org/apache/commons/net/telnet/Telnet.requestDont:(I)V\n+   #49 = Methodref          #3.#279       // java/lang/Object.notifyAll:()V\n+   #50 = Fieldref           #1.#280       // org/apache/commons/net/telnet/Telnet.notifhand:Lorg/apache/commons/net/telnet/TelnetNotificationHandler;\n+   #51 = Class              #281          // org/apache/commons/net/telnet/TelnetNotificationHandler\n+   #52 = InterfaceMethodref #51.#282      // org/apache/commons/net/telnet/TelnetNotificationHandler.receivedNegotiation:(II)V\n+   #53 = Methodref          #12.#283      // org/apache/commons/net/telnet/TelnetOptionHandler.getAcceptLocal:()Z\n+   #54 = Methodref          #284.#285     // java/lang/String.isEmpty:()Z\n+   #55 = Methodref          #1.#286       // org/apache/commons/net/telnet/Telnet.stateIsWill:(I)Z\n+   #56 = Methodref          #1.#287       // org/apache/commons/net/telnet/Telnet.requestedWont:(I)Z\n+   #57 = Methodref          #1.#288       // org/apache/commons/net/telnet/Telnet.setWantWill:(I)V\n+   #58 = Methodref          #1.#289       // org/apache/commons/net/telnet/Telnet.sendWill:(I)V\n+   #59 = Methodref          #1.#290       // org/apache/commons/net/telnet/Telnet.sendWont:(I)V\n+   #60 = Methodref          #1.#291       // org/apache/commons/net/telnet/Telnet.setWill:(I)V\n+   #61 = Methodref          #1.#292       // org/apache/commons/net/telnet/Telnet.stateIsWont:(I)Z\n+   #62 = Methodref          #1.#293       // org/apache/commons/net/telnet/Telnet.requestedWill:(I)Z\n+   #63 = Methodref          #1.#294       // org/apache/commons/net/telnet/Telnet.setWantWont:(I)V\n+   #64 = Methodref          #1.#295       // org/apache/commons/net/telnet/Telnet.setWont:(I)V\n+   #65 = Methodref          #12.#296      // org/apache/commons/net/telnet/TelnetOptionHandler.answerSubnegotiation:([II)[I\n+   #66 = Methodref          #1.#297       // org/apache/commons/net/telnet/Telnet._sendSubnegotiation:([I)V\n+   #67 = Methodref          #1.#298       // org/apache/commons/net/telnet/Telnet.sendTerminalType:()V\n+   #68 = Methodref          #12.#299      // org/apache/commons/net/telnet/TelnetOptionHandler.getAcceptRemote:()Z\n+   #69 = Methodref          #1.#300       // org/apache/commons/net/telnet/Telnet.stateIsDo:(I)Z\n+   #70 = Methodref          #1.#301       // org/apache/commons/net/telnet/Telnet.requestedDont:(I)Z\n+   #71 = Methodref          #1.#302       // org/apache/commons/net/telnet/Telnet.setWantDo:(I)V\n+   #72 = Methodref          #1.#303       // org/apache/commons/net/telnet/Telnet.sendDo:(I)V\n+   #73 = Methodref          #1.#304       // org/apache/commons/net/telnet/Telnet.sendDont:(I)V\n+   #74 = Methodref          #1.#305       // org/apache/commons/net/telnet/Telnet.setDo:(I)V\n+   #75 = Methodref          #1.#306       // org/apache/commons/net/telnet/Telnet.stateIsDont:(I)Z\n+   #76 = Methodref          #1.#307       // org/apache/commons/net/telnet/Telnet.requestedDo:(I)Z\n+   #77 = Methodref          #1.#308       // org/apache/commons/net/telnet/Telnet.setWantDont:(I)V\n+   #78 = Methodref          #1.#309       // org/apache/commons/net/telnet/Telnet.setDont:(I)V\n+   #79 = Methodref          #1.#310       // org/apache/commons/net/telnet/Telnet.spyWrite:(I)V\n+   #80 = Fieldref           #1.#311       // org/apache/commons/net/telnet/Telnet.COMMAND_DO:[B\n+   #81 = Fieldref           #1.#312       // org/apache/commons/net/telnet/Telnet.COMMAND_DONT:[B\n+   #82 = Fieldref           #1.#313       // org/apache/commons/net/telnet/Telnet.COMMAND_IS:[B\n+   #83 = Methodref          #1.#314       // org/apache/commons/net/telnet/Telnet.getCharset:()Ljava/nio/charset/Charset;\n+   #84 = Methodref          #284.#315     // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B\n+   #85 = Fieldref           #1.#316       // org/apache/commons/net/telnet/Telnet.COMMAND_WILL:[B\n+   #86 = Fieldref           #1.#317       // org/apache/commons/net/telnet/Telnet.COMMAND_WONT:[B\n+   #87 = Methodref          #12.#318      // org/apache/commons/net/telnet/TelnetOptionHandler.startSubnegotiationRemote:()[I\n+   #88 = Methodref          #12.#319      // org/apache/commons/net/telnet/TelnetOptionHandler.startSubnegotiationLocal:()[I\n+   #89 = Class              #320          // java/io/IOException\n+   #90 = Class              #321          // org/apache/commons/net/SocketClient\n    #91 = Utf8               debug\n    #92 = Utf8               Z\n    #93 = Utf8               ConstantValue\n    #94 = Integer            0\n    #95 = Utf8               debugoptions\n    #96 = Utf8               COMMAND_DO\n    #97 = Utf8               [B\n@@ -159,226 +159,221 @@\n   #149 = Utf8               (Ljava/io/OutputStream;)V\n   #150 = Utf8               spystream\n   #151 = Utf8               _sendAYT\n   #152 = Utf8               (J)Z\n   #153 = Utf8               timeout\n   #154 = Utf8               J\n   #155 = Utf8               retValue\n-  #156 = Class              #236          // org/apache/commons/net/telnet/Telnet\n-  #157 = Class              #238          // java/lang/Object\n-  #158 = Class              #327          // java/lang/Throwable\n-  #159 = Class              #328          // java/lang/IllegalArgumentException\n-  #160 = Class              #329          // java/lang/InterruptedException\n-  #161 = Utf8               _sendCommand\n-  #162 = Utf8               (B)V\n-  #163 = Utf8               cmd\n-  #164 = Utf8               B\n-  #165 = Utf8               _sendSubnegotiation\n-  #166 = Utf8               ([I)V\n-  #167 = Utf8               b\n-  #168 = Utf8               element\n-  #169 = Utf8               subn\n-  #170 = Class              #121          // \"[I\"\n-  #171 = Utf8               _stopSpyStream\n-  #172 = Utf8               addOptionHandler\n-  #173 = Utf8               (Lorg/apache/commons/net/telnet/TelnetOptionHandler;)V\n-  #174 = Utf8               opthand\n-  #175 = Utf8               Lorg/apache/commons/net/telnet/TelnetOptionHandler;\n-  #176 = Utf8               optcode\n-  #177 = Utf8               deleteOptionHandler\n-  #178 = Utf8               (I)V\n-  #179 = Class              #246          // org/apache/commons/net/telnet/TelnetOptionHandler\n-  #180 = Utf8               processAYTResponse\n-  #181 = Utf8               processCommand\n-  #182 = Utf8               command\n-  #183 = Utf8               processDo\n-  #184 = Utf8               option\n-  #185 = Utf8               acceptNewState\n-  #186 = Utf8               processDont\n-  #187 = Utf8               processSuboption\n-  #188 = Utf8               ([II)V\n-  #189 = Utf8               responseSuboption\n-  #190 = Utf8               suboption\n-  #191 = Utf8               suboptionLength\n-  #192 = Utf8               processWill\n-  #193 = Utf8               processWont\n-  #194 = Utf8               registerNotifHandler\n-  #195 = Utf8               (Lorg/apache/commons/net/telnet/TelnetNotificationHandler;)V\n-  #196 = Utf8               requestDo\n-  #197 = Utf8               requestDont\n-  #198 = Utf8               requestedDo\n-  #199 = Utf8               (I)Z\n-  #200 = Utf8               requestedDont\n-  #201 = Utf8               requestedWill\n-  #202 = Utf8               requestedWont\n-  #203 = Utf8               requestWill\n-  #204 = Utf8               requestWont\n-  #205 = Utf8               sendByte\n-  #206 = Utf8               sendDo\n-  #207 = Utf8               sendDont\n-  #208 = Utf8               sendTerminalType\n-  #209 = Utf8               sendWill\n-  #210 = Utf8               sendWont\n-  #211 = Utf8               setDo\n-  #212 = Utf8               subneg\n-  #213 = Utf8               setDont\n-  #214 = Utf8               setWantDo\n-  #215 = Utf8               setWantDont\n-  #216 = Utf8               setWantWill\n-  #217 = Utf8               setWantWont\n-  #218 = Utf8               setWill\n-  #219 = Utf8               setWont\n-  #220 = Utf8               spyRead\n-  #221 = Utf8               e\n-  #222 = Utf8               Ljava/io/IOException;\n-  #223 = Utf8               ch\n-  #224 = Utf8               spy\n-  #225 = Class              #330          // java/io/OutputStream\n-  #226 = Class              #325          // java/io/IOException\n-  #227 = Utf8               spyWrite\n-  #228 = Utf8               stateIsDo\n-  #229 = Utf8               stateIsDont\n-  #230 = Utf8               stateIsWill\n-  #231 = Utf8               stateIsWont\n-  #232 = Utf8               unregisterNotifHandler\n-  #233 = Utf8               <clinit>\n-  #234 = Utf8               SourceFile\n-  #235 = Utf8               Telnet.java\n-  #236 = Utf8               org/apache/commons/net/telnet/Telnet\n-  #237 = NameAndType        #135:#136     // \"<init>\":()V\n-  #238 = Utf8               java/lang/Object\n-  #239 = NameAndType        #128:#129     // aytMonitor:Ljava/lang/Object;\n-  #240 = NameAndType        #130:#92      // aytFlag:Z\n-  #241 = NameAndType        #331:#178     // setDefaultPort:(I)V\n-  #242 = Utf8               org/apache/commons/net/telnet/TelnetOption\n-  #243 = NameAndType        #120:#121     // doResponse:[I\n-  #244 = NameAndType        #122:#121     // willResponse:[I\n-  #245 = NameAndType        #123:#121     // options:[I\n-  #246 = Utf8               org/apache/commons/net/telnet/TelnetOptionHandler\n-  #247 = NameAndType        #126:#127     // optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;\n-  #248 = NameAndType        #124:#125     // terminalType:Ljava/lang/String;\n-  #249 = NameAndType        #211:#332     // setDo:(Z)V\n-  #250 = NameAndType        #218:#332     // setWill:(Z)V\n-  #251 = NameAndType        #144:#136     // _connectAction_:()V\n-  #252 = Utf8               java/io/BufferedInputStream\n-  #253 = NameAndType        #333:#334     // _input_:Ljava/io/InputStream;\n-  #254 = NameAndType        #135:#335     // \"<init>\":(Ljava/io/InputStream;)V\n-  #255 = Utf8               java/io/BufferedOutputStream\n-  #256 = NameAndType        #336:#132     // _output_:Ljava/io/OutputStream;\n-  #257 = NameAndType        #135:#149     // \"<init>\":(Ljava/io/OutputStream;)V\n-  #258 = NameAndType        #337:#338     // getInitLocal:()Z\n-  #259 = NameAndType        #339:#340     // getOptionCode:()I\n-  #260 = NameAndType        #203:#178     // requestWill:(I)V\n-  #261 = NameAndType        #341:#338     // getInitRemote:()Z\n-  #262 = NameAndType        #196:#178     // requestDo:(I)V\n-  #263 = NameAndType        #131:#132     // spyStream:Ljava/io/OutputStream;\n-  #264 = NameAndType        #119:#97      // COMMAND_AYT:[B\n-  #265 = Class              #330          // java/io/OutputStream\n-  #266 = NameAndType        #342:#343     // write:([B)V\n-  #267 = NameAndType        #344:#136     // flush:()V\n-  #268 = NameAndType        #345:#346     // wait:(J)V\n-  #269 = Utf8               org/apache/commons/net/telnet/TelnetCommand\n-  #270 = NameAndType        #342:#178     // write:(I)V\n-  #271 = NameAndType        #101:#97      // COMMAND_SB:[B\n-  #272 = NameAndType        #102:#97      // COMMAND_SE:[B\n-  #273 = NameAndType        #347:#199     // isValidOption:(I)Z\n-  #274 = Utf8               org/apache/commons/net/telnet/InvalidTelnetOptionException\n-  #275 = Utf8               Invalid Option Code\n-  #276 = NameAndType        #135:#348     // \"<init>\":(Ljava/lang/String;I)V\n-  #277 = Utf8               Already registered option\n-  #278 = NameAndType        #349:#338     // isConnected:()Z\n-  #279 = Utf8               Unregistered option\n-  #280 = NameAndType        #350:#338     // getWill:()Z\n-  #281 = NameAndType        #204:#178     // requestWont:(I)V\n-  #282 = NameAndType        #351:#338     // getDo:()Z\n-  #283 = NameAndType        #197:#178     // requestDont:(I)V\n-  #284 = NameAndType        #352:#136     // notifyAll:()V\n-  #285 = NameAndType        #133:#134     // notifhand:Lorg/apache/commons/net/telnet/TelnetNotificationHandler;\n-  #286 = Utf8               org/apache/commons/net/telnet/TelnetNotificationHandler\n-  #287 = NameAndType        #353:#354     // receivedNegotiation:(II)V\n-  #288 = NameAndType        #355:#338     // getAcceptLocal:()Z\n-  #289 = Class              #356          // java/lang/String\n-  #290 = NameAndType        #357:#338     // isEmpty:()Z\n-  #291 = NameAndType        #230:#199     // stateIsWill:(I)Z\n-  #292 = NameAndType        #202:#199     // requestedWont:(I)Z\n-  #293 = NameAndType        #216:#178     // setWantWill:(I)V\n-  #294 = NameAndType        #209:#178     // sendWill:(I)V\n-  #295 = NameAndType        #210:#178     // sendWont:(I)V\n-  #296 = NameAndType        #218:#178     // setWill:(I)V\n-  #297 = NameAndType        #231:#199     // stateIsWont:(I)Z\n-  #298 = NameAndType        #201:#199     // requestedWill:(I)Z\n-  #299 = NameAndType        #217:#178     // setWantWont:(I)V\n-  #300 = NameAndType        #219:#178     // setWont:(I)V\n-  #301 = NameAndType        #358:#359     // answerSubnegotiation:([II)[I\n-  #302 = NameAndType        #165:#166     // _sendSubnegotiation:([I)V\n-  #303 = NameAndType        #208:#136     // sendTerminalType:()V\n-  #304 = NameAndType        #360:#338     // getAcceptRemote:()Z\n-  #305 = NameAndType        #228:#199     // stateIsDo:(I)Z\n-  #306 = NameAndType        #200:#199     // requestedDont:(I)Z\n-  #307 = NameAndType        #214:#178     // setWantDo:(I)V\n-  #308 = NameAndType        #206:#178     // sendDo:(I)V\n-  #309 = NameAndType        #207:#178     // sendDont:(I)V\n-  #310 = NameAndType        #211:#178     // setDo:(I)V\n-  #311 = NameAndType        #229:#199     // stateIsDont:(I)Z\n-  #312 = NameAndType        #198:#199     // requestedDo:(I)Z\n-  #313 = NameAndType        #215:#178     // setWantDont:(I)V\n-  #314 = NameAndType        #213:#178     // setDont:(I)V\n-  #315 = NameAndType        #227:#178     // spyWrite:(I)V\n-  #316 = NameAndType        #96:#97       // COMMAND_DO:[B\n-  #317 = NameAndType        #98:#97       // COMMAND_DONT:[B\n-  #318 = NameAndType        #118:#97      // COMMAND_IS:[B\n-  #319 = NameAndType        #361:#362     // getCharset:()Ljava/nio/charset/Charset;\n-  #320 = NameAndType        #363:#364     // getBytes:(Ljava/nio/charset/Charset;)[B\n-  #321 = NameAndType        #99:#97       // COMMAND_WILL:[B\n-  #322 = NameAndType        #100:#97      // COMMAND_WONT:[B\n-  #323 = NameAndType        #365:#366     // startSubnegotiationRemote:()[I\n-  #324 = NameAndType        #367:#366     // startSubnegotiationLocal:()[I\n-  #325 = Utf8               java/io/IOException\n-  #326 = Utf8               org/apache/commons/net/SocketClient\n-  #327 = Utf8               java/lang/Throwable\n-  #328 = Utf8               java/lang/IllegalArgumentException\n-  #329 = Utf8               java/lang/InterruptedException\n-  #330 = Utf8               java/io/OutputStream\n-  #331 = Utf8               setDefaultPort\n-  #332 = Utf8               (Z)V\n-  #333 = Utf8               _input_\n-  #334 = Utf8               Ljava/io/InputStream;\n-  #335 = Utf8               (Ljava/io/InputStream;)V\n-  #336 = Utf8               _output_\n-  #337 = Utf8               getInitLocal\n-  #338 = Utf8               ()Z\n-  #339 = Utf8               getOptionCode\n-  #340 = Utf8               ()I\n-  #341 = Utf8               getInitRemote\n-  #342 = Utf8               write\n-  #343 = Utf8               ([B)V\n-  #344 = Utf8               flush\n-  #345 = Utf8               wait\n-  #346 = Utf8               (J)V\n-  #347 = Utf8               isValidOption\n-  #348 = Utf8               (Ljava/lang/String;I)V\n-  #349 = Utf8               isConnected\n-  #350 = Utf8               getWill\n-  #351 = Utf8               getDo\n-  #352 = Utf8               notifyAll\n-  #353 = Utf8               receivedNegotiation\n-  #354 = Utf8               (II)V\n-  #355 = Utf8               getAcceptLocal\n-  #356 = Utf8               java/lang/String\n-  #357 = Utf8               isEmpty\n-  #358 = Utf8               answerSubnegotiation\n-  #359 = Utf8               ([II)[I\n-  #360 = Utf8               getAcceptRemote\n-  #361 = Utf8               getCharset\n-  #362 = Utf8               ()Ljava/nio/charset/Charset;\n-  #363 = Utf8               getBytes\n-  #364 = Utf8               (Ljava/nio/charset/Charset;)[B\n-  #365 = Utf8               startSubnegotiationRemote\n-  #366 = Utf8               ()[I\n-  #367 = Utf8               startSubnegotiationLocal\n+  #156 = Class              #322          // java/lang/Throwable\n+  #157 = Class              #323          // java/lang/IllegalArgumentException\n+  #158 = Class              #324          // java/lang/InterruptedException\n+  #159 = Utf8               _sendCommand\n+  #160 = Utf8               (B)V\n+  #161 = Utf8               cmd\n+  #162 = Utf8               B\n+  #163 = Utf8               _sendSubnegotiation\n+  #164 = Utf8               ([I)V\n+  #165 = Utf8               b\n+  #166 = Utf8               element\n+  #167 = Utf8               subn\n+  #168 = Class              #121          // \"[I\"\n+  #169 = Utf8               _stopSpyStream\n+  #170 = Utf8               addOptionHandler\n+  #171 = Utf8               (Lorg/apache/commons/net/telnet/TelnetOptionHandler;)V\n+  #172 = Utf8               opthand\n+  #173 = Utf8               Lorg/apache/commons/net/telnet/TelnetOptionHandler;\n+  #174 = Utf8               optcode\n+  #175 = Utf8               deleteOptionHandler\n+  #176 = Utf8               (I)V\n+  #177 = Utf8               processAYTResponse\n+  #178 = Utf8               processCommand\n+  #179 = Utf8               command\n+  #180 = Utf8               processDo\n+  #181 = Utf8               option\n+  #182 = Utf8               acceptNewState\n+  #183 = Utf8               processDont\n+  #184 = Utf8               processSuboption\n+  #185 = Utf8               ([II)V\n+  #186 = Utf8               responseSuboption\n+  #187 = Utf8               suboption\n+  #188 = Utf8               suboptionLength\n+  #189 = Utf8               processWill\n+  #190 = Utf8               processWont\n+  #191 = Utf8               registerNotifHandler\n+  #192 = Utf8               (Lorg/apache/commons/net/telnet/TelnetNotificationHandler;)V\n+  #193 = Utf8               requestDo\n+  #194 = Utf8               requestDont\n+  #195 = Utf8               requestedDo\n+  #196 = Utf8               (I)Z\n+  #197 = Utf8               requestedDont\n+  #198 = Utf8               requestedWill\n+  #199 = Utf8               requestedWont\n+  #200 = Utf8               requestWill\n+  #201 = Utf8               requestWont\n+  #202 = Utf8               sendByte\n+  #203 = Utf8               sendDo\n+  #204 = Utf8               sendDont\n+  #205 = Utf8               sendTerminalType\n+  #206 = Utf8               sendWill\n+  #207 = Utf8               sendWont\n+  #208 = Utf8               setDo\n+  #209 = Utf8               subneg\n+  #210 = Utf8               setDont\n+  #211 = Utf8               setWantDo\n+  #212 = Utf8               setWantDont\n+  #213 = Utf8               setWantWill\n+  #214 = Utf8               setWantWont\n+  #215 = Utf8               setWill\n+  #216 = Utf8               setWont\n+  #217 = Utf8               spyRead\n+  #218 = Utf8               e\n+  #219 = Utf8               Ljava/io/IOException;\n+  #220 = Utf8               ch\n+  #221 = Utf8               spy\n+  #222 = Class              #325          // java/io/OutputStream\n+  #223 = Utf8               spyWrite\n+  #224 = Utf8               stateIsDo\n+  #225 = Utf8               stateIsDont\n+  #226 = Utf8               stateIsWill\n+  #227 = Utf8               stateIsWont\n+  #228 = Utf8               unregisterNotifHandler\n+  #229 = Utf8               <clinit>\n+  #230 = Utf8               SourceFile\n+  #231 = Utf8               Telnet.java\n+  #232 = Utf8               org/apache/commons/net/telnet/Telnet\n+  #233 = NameAndType        #135:#136     // \"<init>\":()V\n+  #234 = Utf8               java/lang/Object\n+  #235 = NameAndType        #128:#129     // aytMonitor:Ljava/lang/Object;\n+  #236 = NameAndType        #130:#92      // aytFlag:Z\n+  #237 = NameAndType        #326:#176     // setDefaultPort:(I)V\n+  #238 = Utf8               org/apache/commons/net/telnet/TelnetOption\n+  #239 = NameAndType        #120:#121     // doResponse:[I\n+  #240 = NameAndType        #122:#121     // willResponse:[I\n+  #241 = NameAndType        #123:#121     // options:[I\n+  #242 = Utf8               org/apache/commons/net/telnet/TelnetOptionHandler\n+  #243 = NameAndType        #126:#127     // optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;\n+  #244 = NameAndType        #124:#125     // terminalType:Ljava/lang/String;\n+  #245 = NameAndType        #208:#327     // setDo:(Z)V\n+  #246 = NameAndType        #215:#327     // setWill:(Z)V\n+  #247 = NameAndType        #144:#136     // _connectAction_:()V\n+  #248 = Utf8               java/io/BufferedInputStream\n+  #249 = NameAndType        #328:#329     // _input_:Ljava/io/InputStream;\n+  #250 = NameAndType        #135:#330     // \"<init>\":(Ljava/io/InputStream;)V\n+  #251 = Utf8               java/io/BufferedOutputStream\n+  #252 = NameAndType        #331:#132     // _output_:Ljava/io/OutputStream;\n+  #253 = NameAndType        #135:#149     // \"<init>\":(Ljava/io/OutputStream;)V\n+  #254 = NameAndType        #332:#333     // getInitLocal:()Z\n+  #255 = NameAndType        #334:#335     // getOptionCode:()I\n+  #256 = NameAndType        #200:#176     // requestWill:(I)V\n+  #257 = NameAndType        #336:#333     // getInitRemote:()Z\n+  #258 = NameAndType        #193:#176     // requestDo:(I)V\n+  #259 = NameAndType        #131:#132     // spyStream:Ljava/io/OutputStream;\n+  #260 = NameAndType        #119:#97      // COMMAND_AYT:[B\n+  #261 = NameAndType        #337:#338     // write:([B)V\n+  #262 = NameAndType        #339:#136     // flush:()V\n+  #263 = NameAndType        #340:#341     // wait:(J)V\n+  #264 = Utf8               org/apache/commons/net/telnet/TelnetCommand\n+  #265 = NameAndType        #337:#176     // write:(I)V\n+  #266 = NameAndType        #101:#97      // COMMAND_SB:[B\n+  #267 = NameAndType        #102:#97      // COMMAND_SE:[B\n+  #268 = NameAndType        #342:#196     // isValidOption:(I)Z\n+  #269 = Utf8               org/apache/commons/net/telnet/InvalidTelnetOptionException\n+  #270 = Utf8               Invalid Option Code\n+  #271 = NameAndType        #135:#343     // \"<init>\":(Ljava/lang/String;I)V\n+  #272 = Utf8               Already registered option\n+  #273 = NameAndType        #344:#333     // isConnected:()Z\n+  #274 = Utf8               Unregistered option\n+  #275 = NameAndType        #345:#333     // getWill:()Z\n+  #276 = NameAndType        #201:#176     // requestWont:(I)V\n+  #277 = NameAndType        #346:#333     // getDo:()Z\n+  #278 = NameAndType        #194:#176     // requestDont:(I)V\n+  #279 = NameAndType        #347:#136     // notifyAll:()V\n+  #280 = NameAndType        #133:#134     // notifhand:Lorg/apache/commons/net/telnet/TelnetNotificationHandler;\n+  #281 = Utf8               org/apache/commons/net/telnet/TelnetNotificationHandler\n+  #282 = NameAndType        #348:#349     // receivedNegotiation:(II)V\n+  #283 = NameAndType        #350:#333     // getAcceptLocal:()Z\n+  #284 = Class              #351          // java/lang/String\n+  #285 = NameAndType        #352:#333     // isEmpty:()Z\n+  #286 = NameAndType        #226:#196     // stateIsWill:(I)Z\n+  #287 = NameAndType        #199:#196     // requestedWont:(I)Z\n+  #288 = NameAndType        #213:#176     // setWantWill:(I)V\n+  #289 = NameAndType        #206:#176     // sendWill:(I)V\n+  #290 = NameAndType        #207:#176     // sendWont:(I)V\n+  #291 = NameAndType        #215:#176     // setWill:(I)V\n+  #292 = NameAndType        #227:#196     // stateIsWont:(I)Z\n+  #293 = NameAndType        #198:#196     // requestedWill:(I)Z\n+  #294 = NameAndType        #214:#176     // setWantWont:(I)V\n+  #295 = NameAndType        #216:#176     // setWont:(I)V\n+  #296 = NameAndType        #353:#354     // answerSubnegotiation:([II)[I\n+  #297 = NameAndType        #163:#164     // _sendSubnegotiation:([I)V\n+  #298 = NameAndType        #205:#136     // sendTerminalType:()V\n+  #299 = NameAndType        #355:#333     // getAcceptRemote:()Z\n+  #300 = NameAndType        #224:#196     // stateIsDo:(I)Z\n+  #301 = NameAndType        #197:#196     // requestedDont:(I)Z\n+  #302 = NameAndType        #211:#176     // setWantDo:(I)V\n+  #303 = NameAndType        #203:#176     // sendDo:(I)V\n+  #304 = NameAndType        #204:#176     // sendDont:(I)V\n+  #305 = NameAndType        #208:#176     // setDo:(I)V\n+  #306 = NameAndType        #225:#196     // stateIsDont:(I)Z\n+  #307 = NameAndType        #195:#196     // requestedDo:(I)Z\n+  #308 = NameAndType        #212:#176     // setWantDont:(I)V\n+  #309 = NameAndType        #210:#176     // setDont:(I)V\n+  #310 = NameAndType        #223:#176     // spyWrite:(I)V\n+  #311 = NameAndType        #96:#97       // COMMAND_DO:[B\n+  #312 = NameAndType        #98:#97       // COMMAND_DONT:[B\n+  #313 = NameAndType        #118:#97      // COMMAND_IS:[B\n+  #314 = NameAndType        #356:#357     // getCharset:()Ljava/nio/charset/Charset;\n+  #315 = NameAndType        #358:#359     // getBytes:(Ljava/nio/charset/Charset;)[B\n+  #316 = NameAndType        #99:#97       // COMMAND_WILL:[B\n+  #317 = NameAndType        #100:#97      // COMMAND_WONT:[B\n+  #318 = NameAndType        #360:#361     // startSubnegotiationRemote:()[I\n+  #319 = NameAndType        #362:#361     // startSubnegotiationLocal:()[I\n+  #320 = Utf8               java/io/IOException\n+  #321 = Utf8               org/apache/commons/net/SocketClient\n+  #322 = Utf8               java/lang/Throwable\n+  #323 = Utf8               java/lang/IllegalArgumentException\n+  #324 = Utf8               java/lang/InterruptedException\n+  #325 = Utf8               java/io/OutputStream\n+  #326 = Utf8               setDefaultPort\n+  #327 = Utf8               (Z)V\n+  #328 = Utf8               _input_\n+  #329 = Utf8               Ljava/io/InputStream;\n+  #330 = Utf8               (Ljava/io/InputStream;)V\n+  #331 = Utf8               _output_\n+  #332 = Utf8               getInitLocal\n+  #333 = Utf8               ()Z\n+  #334 = Utf8               getOptionCode\n+  #335 = Utf8               ()I\n+  #336 = Utf8               getInitRemote\n+  #337 = Utf8               write\n+  #338 = Utf8               ([B)V\n+  #339 = Utf8               flush\n+  #340 = Utf8               wait\n+  #341 = Utf8               (J)V\n+  #342 = Utf8               isValidOption\n+  #343 = Utf8               (Ljava/lang/String;I)V\n+  #344 = Utf8               isConnected\n+  #345 = Utf8               getWill\n+  #346 = Utf8               getDo\n+  #347 = Utf8               notifyAll\n+  #348 = Utf8               receivedNegotiation\n+  #349 = Utf8               (II)V\n+  #350 = Utf8               getAcceptLocal\n+  #351 = Utf8               java/lang/String\n+  #352 = Utf8               isEmpty\n+  #353 = Utf8               answerSubnegotiation\n+  #354 = Utf8               ([II)[I\n+  #355 = Utf8               getAcceptRemote\n+  #356 = Utf8               getCharset\n+  #357 = Utf8               ()Ljava/nio/charset/Charset;\n+  #358 = Utf8               getBytes\n+  #359 = Utf8               (Ljava/nio/charset/Charset;)[B\n+  #360 = Utf8               startSubnegotiationRemote\n+  #361 = Utf8               ()[I\n+  #362 = Utf8               startSubnegotiationLocal\n {\n   static final boolean debug = false;\n     descriptor: Z\n     flags: (0x0018) ACC_STATIC, ACC_FINAL\n     ConstantValue: int 0\n \n   static final boolean debugoptions = false;\n"}]}
