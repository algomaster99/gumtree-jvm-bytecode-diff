{"diffoscope-json-version": 1, "source1": "first/Folder.class", "source2": "second/Folder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,50 +14,50 @@\n     BindPair[] bindPairs;\n     long[] packedStreams;\n     long[] unpackSizes;\n     boolean hasCrc;\n     long crc;\n     int numUnpackSubStreams;\n     \n-    int findBindPairForInStream(final int index) {\n+    int findBindPairForInStream(final int n) {\n         if (this.bindPairs != null) {\n             for (int i = 0; i < this.bindPairs.length; ++i) {\n-                if (this.bindPairs[i].inIndex == index) {\n+                if (this.bindPairs[i].inIndex == n) {\n                     return i;\n                 }\n             }\n         }\n         return -1;\n     }\n     \n-    int findBindPairForOutStream(final int index) {\n+    int findBindPairForOutStream(final int n) {\n         if (this.bindPairs != null) {\n             for (int i = 0; i < this.bindPairs.length; ++i) {\n-                if (this.bindPairs[i].outIndex == index) {\n+                if (this.bindPairs[i].outIndex == n) {\n                     return i;\n                 }\n             }\n         }\n         return -1;\n     }\n     \n     Iterable<Coder> getOrderedCoders() throws IOException {\n         if (this.packedStreams == null || this.coders == null || this.packedStreams.length == 0 || this.coders.length == 0) {\n             return (Iterable<Coder>)Collections.emptyList();\n         }\n-        final LinkedList<Coder> l = new LinkedList<Coder>();\n-        int pair;\n-        for (int current = (int)this.packedStreams[0]; current >= 0 && current < this.coders.length; current = ((pair != -1) ? ((int)this.bindPairs[pair].inIndex) : -1)) {\n-            if (l.contains(this.coders[current])) {\n+        final LinkedList list = new LinkedList();\n+        int bindPairForOutStream;\n+        for (int n = (int)this.packedStreams[0]; n >= 0 && n < this.coders.length; n = ((bindPairForOutStream != -1) ? ((int)this.bindPairs[bindPairForOutStream].inIndex) : -1)) {\n+            if (list.contains(this.coders[n])) {\n                 throw new IOException(\"folder uses the same coder more than once in coder chain\");\n             }\n-            l.addLast(this.coders[current]);\n-            pair = this.findBindPairForOutStream(current);\n+            list.addLast(this.coders[n]);\n+            bindPairForOutStream = this.findBindPairForOutStream(n);\n         }\n-        return l;\n+        return list;\n     }\n     \n     long getUnpackSize() {\n         if (this.totalOutputStreams == 0L) {\n             return 0L;\n         }\n         for (int i = (int)this.totalOutputStreams - 1; i >= 0; --i) {\n"}]}
