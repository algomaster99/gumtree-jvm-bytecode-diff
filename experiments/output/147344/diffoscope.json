{"diffoscope-json-version": 1, "source1": "first/TranslationCheck.class", "source2": "second/TranslationCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -19,17 +19,17 @@\n import java.util.Locale;\n import java.util.Iterator;\n import com.puppycrawl.tools.checkstyle.LocalizedMessage;\n import java.util.stream.Collector;\n import java.util.stream.Collectors;\n import java.util.Arrays;\n import org.apache.commons.logging.LogFactory;\n-import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n import java.util.HashSet;\n import java.util.concurrent.ConcurrentHashMap;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n import java.io.File;\n import java.util.Set;\n import org.apache.commons.logging.Log;\n import java.util.regex.Pattern;\n import com.puppycrawl.tools.checkstyle.GlobalStatefulCheck;\n import com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck;\n \n@@ -49,14 +49,20 @@\n     private static final String REGEXP_FORMAT_TO_CHECK_REQUIRED_TRANSLATIONS = \"^%1$s\\\\_%2$s(\\\\_[A-Z]{2})?\\\\.%3$s$|^%1$s\\\\_%2$s\\\\_[A-Z]{2}\\\\_[A-Za-z]+\\\\.%3$s$\";\n     private static final String REGEXP_FORMAT_TO_CHECK_DEFAULT_TRANSLATIONS = \"^%s\\\\.%s$\";\n     private final Log log;\n     private final Set<File> filesToProcess;\n     private Pattern baseName;\n     private Set<String> requiredTranslations;\n     \n+    static {\n+        LANGUAGE_COUNTRY_VARIANT_PATTERN = CommonUtil.createPattern(\"^.+\\\\_[a-z]{2}\\\\_[A-Z]{2}\\\\_[A-Za-z]+\\\\..+$\");\n+        LANGUAGE_COUNTRY_PATTERN = CommonUtil.createPattern(\"^.+\\\\_[a-z]{2}\\\\_[A-Z]{2}\\\\..+$\");\n+        LANGUAGE_PATTERN = CommonUtil.createPattern(\"^.+\\\\_[a-z]{2}\\\\..+$\");\n+    }\n+    \n     public TranslationCheck() {\n         this.filesToProcess = (Set<File>)ConcurrentHashMap.newKeySet();\n         this.requiredTranslations = new HashSet<String>();\n         this.setFileExtensions(new String[] { \"properties\" });\n         this.baseName = CommonUtil.createPattern(\"^messages.*$\");\n         this.log = LogFactory.getLog((Class)TranslationCheck.class);\n     }\n@@ -76,17 +82,18 @@\n                 throw new IllegalArgumentException(msg.getMessage());\n             }\n         }\n     }\n     \n     private static boolean isValidLanguageCode(final String userSpecifiedLanguageCode) {\n         boolean valid = false;\n-        final Locale[] availableLocales;\n-        final Locale[] locales = availableLocales = Locale.getAvailableLocales();\n-        for (final Locale locale : availableLocales) {\n+        final Locale[] locales = Locale.getAvailableLocales();\n+        Locale[] array;\n+        for (int length = (array = locales).length, i = 0; i < length; ++i) {\n+            final Locale locale = array[i];\n             if (userSpecifiedLanguageCode.equals(locale.toString())) {\n                 valid = true;\n                 break;\n             }\n         }\n         return valid;\n     }\n@@ -105,20 +112,20 @@\n             this.checkExistenceOfDefaultTranslation(currentBundle);\n             this.checkExistenceOfRequiredTranslations(currentBundle);\n             this.checkTranslationKeys(currentBundle);\n         }\n     }\n     \n     private void checkExistenceOfDefaultTranslation(final TranslationCheck.ResourceBundle bundle) {\n-        getMissingFileName(bundle, null).ifPresent(fileName -> this.logMissingTranslation(bundle.getPath(), fileName));\n+        getMissingFileName(bundle, null).ifPresent(fileName -> this.logMissingTranslation(resourceBundle.getPath(), fileName));\n     }\n     \n     private void checkExistenceOfRequiredTranslations(final TranslationCheck.ResourceBundle bundle) {\n         for (final String languageCode : this.requiredTranslations) {\n-            getMissingFileName(bundle, languageCode).ifPresent(fileName -> this.logMissingTranslation(bundle.getPath(), fileName));\n+            getMissingFileName(bundle, languageCode).ifPresent(fileName -> this.logMissingTranslation(resourceBundle.getPath(), fileName));\n         }\n     }\n     \n     private static Optional<String> getMissingFileName(final TranslationCheck.ResourceBundle bundle, final String languageCode) {\n         final String extension = bundle.getExtension();\n         final String baseName = bundle.getBaseName();\n         boolean searchForDefaultTranslation;\n@@ -222,15 +229,15 @@\n         this.checkFilesForConsistencyRegardingTheirKeys(filesAssociatedWithKeys, allTranslationKeys);\n     }\n     \n     private void checkFilesForConsistencyRegardingTheirKeys(final Map<File, Set<String>> fileKeys, final Set<String> keysThatMustExist) {\n         for (final Map.Entry<File, Set<String>> fileKey : fileKeys.entrySet()) {\n             final Set<String> currentFileKeys = (Set<String>)fileKey.getValue();\n             Object key = null;\n-            final Set<String> missingKeys = (Set<String>)keysThatMustExist.stream().filter(key -> !currentFileKeys.contains(key)).collect((Collector<? super Object, ?, Set<String>>)Collectors.toSet());\n+            final Set<String> missingKeys = (Set<String>)keysThatMustExist.stream().filter(key -> !set.contains(key)).collect((Collector<? super Object, ?, Set<String>>)Collectors.toSet());\n             if (!missingKeys.isEmpty()) {\n                 final MessageDispatcher dispatcher = this.getMessageDispatcher();\n                 final String path = ((File)fileKey.getKey()).getAbsolutePath();\n                 dispatcher.fireFileStarted(path);\n                 final Iterator<String> iterator2 = missingKeys.iterator();\n                 while (iterator2.hasNext()) {\n                     key = iterator2.next();\n@@ -240,18 +247,41 @@\n                 dispatcher.fireFileFinished(path);\n             }\n         }\n     }\n     \n     private Set<String> getTranslationKeys(final File file) {\n         Set<String> keys = new HashSet<String>();\n-        try (final InputStream inStream = Files.newInputStream(file.toPath(), new OpenOption[0])) {\n-            final Properties translations = new Properties();\n-            translations.load(inStream);\n-            keys = translations.stringPropertyNames();\n+        try {\n+            Throwable t = null;\n+            try {\n+                final InputStream inStream = Files.newInputStream(file.toPath(), new OpenOption[0]);\n+                try {\n+                    final Properties translations = new Properties();\n+                    translations.load(inStream);\n+                    keys = translations.stringPropertyNames();\n+                }\n+                finally {\n+                    if (inStream != null) {\n+                        inStream.close();\n+                    }\n+                }\n+            }\n+            finally {\n+                if (t == null) {\n+                    final Throwable exception;\n+                    t = exception;\n+                }\n+                else {\n+                    final Throwable exception;\n+                    if (t != exception) {\n+                        t.addSuppressed(exception);\n+                    }\n+                }\n+            }\n         }\n         catch (final Exception ex) {\n             this.logException(ex, file);\n         }\n         return keys;\n     }\n     \n@@ -268,14 +298,8 @@\n         }\n         final Violation message = new Violation(0, \"com.puppycrawl.tools.checkstyle.messages\", key, (Object[])args, this.getId(), (Class)this.getClass(), (String)null);\n         final SortedSet<Violation> messages = new TreeSet<Violation>();\n         messages.add(message);\n         this.getMessageDispatcher().fireErrors(file.getPath(), (SortedSet)messages);\n         this.log.debug((Object)\"Exception occurred.\", (Throwable)exception);\n     }\n-    \n-    static {\n-        LANGUAGE_COUNTRY_VARIANT_PATTERN = CommonUtil.createPattern(\"^.+\\\\_[a-z]{2}\\\\_[A-Z]{2}\\\\_[A-Za-z]+\\\\..+$\");\n-        LANGUAGE_COUNTRY_PATTERN = CommonUtil.createPattern(\"^.+\\\\_[a-z]{2}\\\\_[A-Z]{2}\\\\..+$\");\n-        LANGUAGE_PATTERN = CommonUtil.createPattern(\"^.+\\\\_[a-z]{2}\\\\..+$\");\n-    }\n }\n"}]}
