{"diffoscope-json-version": 1, "source1": "first/ClassDefHandler.class", "source2": "second/ClassDefHandler.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,16 +1,16 @@\n \n package com.puppycrawl.tools.checkstyle.checks.indentation;\n \n import com.puppycrawl.tools.checkstyle.api.DetailAST;\n \n public class ClassDefHandler extends BlockParentHandler\n {\n-    public ClassDefHandler(final IndentationCheck indentCheck, final DetailAST ast, final AbstractExpressionHandler parent) {\n-        super(indentCheck, getHandlerName(ast), ast, parent);\n+    public ClassDefHandler(final IndentationCheck indentationCheck, final DetailAST detailAST, final AbstractExpressionHandler abstractExpressionHandler) {\n+        super(indentationCheck, getHandlerName(detailAST), detailAST, abstractExpressionHandler);\n     }\n     \n     protected DetailAST getLeftCurly() {\n         return this.getMainAst().findFirstToken(6).findFirstToken(72);\n     }\n     \n     protected DetailAST getRightCurly() {\n@@ -22,62 +22,59 @@\n     }\n     \n     protected DetailAST getListChild() {\n         return this.getMainAst().findFirstToken(6);\n     }\n     \n     public void checkIndentation() {\n-        final DetailAST modifiers = this.getMainAst().findFirstToken(5);\n-        if (modifiers.hasChildren()) {\n+        if (this.getMainAst().findFirstToken(5).hasChildren()) {\n             this.checkModifiers();\n         }\n         else if (this.getMainAst().getType() != 157) {\n-            final DetailAST ident = this.getMainAst().findFirstToken(58);\n-            final int lineStart = this.getLineStart(ident);\n+            final DetailAST firstToken = this.getMainAst().findFirstToken(58);\n+            final int lineStart = this.getLineStart(firstToken);\n             if (!this.getIndent().isAcceptable(lineStart)) {\n-                this.logError(ident, \"ident\", lineStart);\n+                this.logError(firstToken, \"ident\", lineStart);\n             }\n         }\n         if (this.getMainAst().getType() == 157) {\n-            final DetailAST atAst = this.getMainAst().findFirstToken(170);\n-            if (this.isOnStartOfLine(atAst)) {\n+            if (this.isOnStartOfLine(this.getMainAst().findFirstToken(170))) {\n                 this.checkWrappingIndentation(this.getMainAst(), this.getListChild(), 0, this.getIndent().getFirstIndentLevel(), false);\n             }\n         }\n         else {\n             this.checkWrappingIndentation(this.getMainAst(), this.getListChild());\n         }\n         super.checkIndentation();\n     }\n     \n     protected int[] getCheckedChildren() {\n         return new int[] { 28, 6, 86, 88, 90, 87 };\n     }\n     \n-    private static String getHandlerName(final DetailAST ast) {\n-        final int tokenType = ast.getType();\n-        String name = null;\n-        switch (tokenType) {\n+    private static String getHandlerName(final DetailAST detailAST) {\n+        String s = null;\n+        switch (detailAST.getType()) {\n             case 14: {\n-                name = \"class def\";\n+                s = \"class def\";\n                 break;\n             }\n             case 154: {\n-                name = \"enum def\";\n+                s = \"enum def\";\n                 break;\n             }\n             case 157: {\n-                name = \"annotation def\";\n+                s = \"annotation def\";\n                 break;\n             }\n             case 199: {\n-                name = \"record def\";\n+                s = \"record def\";\n                 break;\n             }\n             default: {\n-                name = \"interface def\";\n+                s = \"interface def\";\n                 break;\n             }\n         }\n-        return name;\n+        return s;\n     }\n }\n"}]}
