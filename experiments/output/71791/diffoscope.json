{"diffoscope-json-version": 1, "source1": "first/BandSet.class", "source2": "second/BandSet.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -14,14 +14,18 @@\n {\n     protected final SegmentHeader segmentHeader;\n     final int effort;\n     private static final int[] effortThresholds;\n     private long[] canonicalLargest;\n     private long[] canonicalSmallest;\n     \n+    static {\n+        effortThresholds = new int[] { 0, 0, 1000, 500, 100, 100, 100, 100, 100, 0 };\n+    }\n+    \n     public BandSet(final int effort, final SegmentHeader header) {\n         this.effort = effort;\n         this.segmentHeader = header;\n     }\n     \n     public abstract void pack(final OutputStream p0) throws IOException, Pack200Exception;\n     \n@@ -33,16 +37,16 @@\n         return codec.encode(value);\n     }\n     \n     public byte[] encodeBandInt(final String name, final int[] ints, final BHSDCodec defaultCodec) throws Pack200Exception {\n         byte[] encodedBand = null;\n         if (this.effort > 1 && ints.length >= BandSet.effortThresholds[this.effort]) {\n             final BandSet.BandAnalysisResults results = this.analyseBand(name, ints, defaultCodec);\n-            final Codec betterCodec = BandSet.BandAnalysisResults.access$000(results);\n-            encodedBand = BandSet.BandAnalysisResults.access$100(results);\n+            final Codec betterCodec = BandSet.BandAnalysisResults.access$0(results);\n+            encodedBand = BandSet.BandAnalysisResults.access$1(results);\n             if (betterCodec != null) {\n                 if (betterCodec instanceof BHSDCodec) {\n                     final int[] specifierBand = CodecEncoding.getSpecifier(betterCodec, (Codec)defaultCodec);\n                     int specifier = specifierBand[0];\n                     if (specifierBand.length > 1) {\n                         for (int i = 1; i < specifierBand.length; ++i) {\n                             this.segmentHeader.appendBandCodingSpecifier(specifierBand[i]);\n@@ -57,21 +61,21 @@\n                     final byte[] specifierEncoded = defaultCodec.encode(new int[] { specifier });\n                     final byte[] band = new byte[specifierEncoded.length + encodedBand.length];\n                     System.arraycopy(specifierEncoded, 0, band, 0, specifierEncoded.length);\n                     System.arraycopy(encodedBand, 0, band, specifierEncoded.length, encodedBand.length);\n                     return band;\n                 }\n                 if (betterCodec instanceof PopulationCodec) {\n-                    final int[] extraSpecifierInfo = BandSet.BandAnalysisResults.access$200(results);\n+                    final int[] extraSpecifierInfo = BandSet.BandAnalysisResults.access$2(results);\n                     for (int j = 0; j < extraSpecifierInfo.length; ++j) {\n                         this.segmentHeader.appendBandCodingSpecifier(extraSpecifierInfo[j]);\n                     }\n                     return encodedBand;\n                 }\n-                if (betterCodec instanceof RunCodec) {}\n+                final boolean b = betterCodec instanceof RunCodec;\n             }\n         }\n         if (ints.length > 0) {\n             if (encodedBand == null) {\n                 encodedBand = defaultCodec.encode(ints);\n             }\n             final int first = ints[0];\n@@ -106,21 +110,21 @@\n             for (int i = 1; i < this.canonicalLargest.length; ++i) {\n                 this.canonicalLargest[i] = CodecEncoding.getCanonicalCodec(i).largest();\n                 this.canonicalSmallest[i] = CodecEncoding.getCanonicalCodec(i).smallest();\n             }\n         }\n         final BandSet.BandData bandData = new BandSet.BandData(this, band);\n         final byte[] encoded = defaultCodec.encode(band);\n-        BandSet.BandAnalysisResults.access$102(results, encoded);\n+        BandSet.BandAnalysisResults.access$3(results, encoded);\n         if (encoded.length <= band.length + 23 - 2 * this.effort) {\n             return results;\n         }\n-        if (!bandData.anyNegatives() && BandSet.BandData.access$300(bandData) <= Codec.BYTE1.largest()) {\n-            BandSet.BandAnalysisResults.access$102(results, Codec.BYTE1.encode(band));\n-            BandSet.BandAnalysisResults.access$002(results, (Codec)Codec.BYTE1);\n+        if (!bandData.anyNegatives() && BandSet.BandData.access$0(bandData) <= Codec.BYTE1.largest()) {\n+            BandSet.BandAnalysisResults.access$3(results, Codec.BYTE1.encode(band));\n+            BandSet.BandAnalysisResults.access$4(results, (Codec)Codec.BYTE1);\n             return results;\n         }\n         if (this.effort > 3 && !name.equals(\"POPULATION\")) {\n             final int numDistinctValues = bandData.numDistinctValues();\n             final float distinctValuesAsProportion = numDistinctValues / (float)band.length;\n             if (numDistinctValues < 100 || distinctValuesAsProportion < 0.02 || (this.effort > 6 && distinctValuesAsProportion < 0.04)) {\n                 this.encodeWithPopulationCodec(name, band, defaultCodec, bandData, results);\n@@ -185,67 +189,67 @@\n             }\n         }\n         return results;\n     }\n     \n     private boolean timeToStop(final BandSet.BandAnalysisResults results) {\n         if (this.effort > 6) {\n-            return BandSet.BandAnalysisResults.access$400(results) >= this.effort * 2;\n+            return BandSet.BandAnalysisResults.access$5(results) >= this.effort * 2;\n         }\n-        return BandSet.BandAnalysisResults.access$400(results) >= this.effort;\n+        return BandSet.BandAnalysisResults.access$5(results) >= this.effort;\n     }\n     \n     private void tryCodecs(final String name, final int[] band, final BHSDCodec defaultCodec, final BandSet.BandData bandData, final BandSet.BandAnalysisResults results, final byte[] encoded, final BHSDCodec[] potentialCodecs) throws Pack200Exception {\n         for (int i = 0; i < potentialCodecs.length; ++i) {\n             final BHSDCodec potential = potentialCodecs[i];\n             if (potential.equals((Object)defaultCodec)) {\n                 return;\n             }\n             if (potential.isDelta()) {\n-                if (potential.largest() >= BandSet.BandData.access$500(bandData) && potential.smallest() <= BandSet.BandData.access$600(bandData) && potential.largest() >= BandSet.BandData.access$300(bandData) && potential.smallest() <= BandSet.BandData.access$700(bandData)) {\n+                if (potential.largest() >= BandSet.BandData.access$1(bandData) && potential.smallest() <= BandSet.BandData.access$2(bandData) && potential.largest() >= BandSet.BandData.access$0(bandData) && potential.smallest() <= BandSet.BandData.access$3(bandData)) {\n                     final byte[] encoded2 = potential.encode(band);\n-                    BandSet.BandAnalysisResults.access$408(results);\n+                    BandSet.BandAnalysisResults.access$6(results, BandSet.BandAnalysisResults.access$5(results) + 1);\n                     final byte[] specifierEncoded = defaultCodec.encode(CodecEncoding.getSpecifier((Codec)potential, (Codec)null));\n                     final int saved = encoded.length - encoded2.length - specifierEncoded.length;\n-                    if (saved > BandSet.BandAnalysisResults.access$800(results)) {\n-                        BandSet.BandAnalysisResults.access$002(results, (Codec)potential);\n-                        BandSet.BandAnalysisResults.access$102(results, encoded2);\n-                        BandSet.BandAnalysisResults.access$802(results, saved);\n+                    if (saved > BandSet.BandAnalysisResults.access$7(results)) {\n+                        BandSet.BandAnalysisResults.access$4(results, (Codec)potential);\n+                        BandSet.BandAnalysisResults.access$3(results, encoded2);\n+                        BandSet.BandAnalysisResults.access$8(results, saved);\n                     }\n                 }\n             }\n-            else if (potential.largest() >= BandSet.BandData.access$300(bandData) && potential.smallest() <= BandSet.BandData.access$700(bandData)) {\n+            else if (potential.largest() >= BandSet.BandData.access$0(bandData) && potential.smallest() <= BandSet.BandData.access$3(bandData)) {\n                 final byte[] encoded2 = potential.encode(band);\n-                BandSet.BandAnalysisResults.access$408(results);\n+                BandSet.BandAnalysisResults.access$6(results, BandSet.BandAnalysisResults.access$5(results) + 1);\n                 final byte[] specifierEncoded = defaultCodec.encode(CodecEncoding.getSpecifier((Codec)potential, (Codec)null));\n                 final int saved = encoded.length - encoded2.length - specifierEncoded.length;\n-                if (saved > BandSet.BandAnalysisResults.access$800(results)) {\n-                    BandSet.BandAnalysisResults.access$002(results, (Codec)potential);\n-                    BandSet.BandAnalysisResults.access$102(results, encoded2);\n-                    BandSet.BandAnalysisResults.access$802(results, saved);\n+                if (saved > BandSet.BandAnalysisResults.access$7(results)) {\n+                    BandSet.BandAnalysisResults.access$4(results, (Codec)potential);\n+                    BandSet.BandAnalysisResults.access$3(results, encoded2);\n+                    BandSet.BandAnalysisResults.access$8(results, saved);\n                 }\n             }\n             if (this.timeToStop(results)) {\n                 return;\n             }\n         }\n     }\n     \n     private void encodeWithPopulationCodec(final String name, final int[] band, final BHSDCodec defaultCodec, final BandSet.BandData bandData, final BandSet.BandAnalysisResults results) throws Pack200Exception {\n-        BandSet.BandAnalysisResults.access$412(results, 3);\n-        final Map distinctValues = BandSet.BandData.access$900(bandData);\n+        BandSet.BandAnalysisResults.access$6(results, BandSet.BandAnalysisResults.access$5(results) + 3);\n+        final Map distinctValues = BandSet.BandData.access$4(bandData);\n         final List favoured = new ArrayList();\n         for (final Integer value : distinctValues.keySet()) {\n             final Integer count = Integer.valueOf(distinctValues.get((Object)value));\n             if (count > 2 || distinctValues.size() < 256) {\n                 favoured.add(value);\n             }\n         }\n         if (distinctValues.size() > 255) {\n-            Collections.sort((List<Object>)favoured, (arg0, arg1) -> Integer.valueOf(distinctValues.get(arg1)).compareTo(Integer.valueOf(distinctValues.get(arg0))));\n+            Collections.sort((List<Object>)favoured, (arg0, arg1) -> Integer.valueOf(map.get(arg1)).compareTo(Integer.valueOf(map.get(arg0))));\n         }\n         final IntList unfavoured = new IntList();\n         final Map favouredToIndex = new HashMap();\n         for (int i = 0; i < favoured.size(); ++i) {\n             final Integer value2 = Integer.valueOf(favoured.get(i));\n             favouredToIndex.put(value2, Integer.valueOf(i));\n         }\n@@ -272,16 +276,16 @@\n         byte[] tokensEncoded;\n         if (k < 256) {\n             tdefL = 1;\n             tokensEncoded = Codec.BYTE1.encode(tokens);\n         }\n         else {\n             final BandSet.BandAnalysisResults tokenResults = this.analyseBand(\"POPULATION\", tokens, defaultCodec);\n-            tokenCodec = BandSet.BandAnalysisResults.access$000(tokenResults);\n-            tokensEncoded = BandSet.BandAnalysisResults.access$100(tokenResults);\n+            tokenCodec = BandSet.BandAnalysisResults.access$0(tokenResults);\n+            tokensEncoded = BandSet.BandAnalysisResults.access$1(tokenResults);\n             if (tokenCodec == null) {\n                 tokenCodec = (Codec)defaultCodec;\n             }\n             l = ((BHSDCodec)tokenCodec).getL();\n             final int h = ((BHSDCodec)tokenCodec).getH();\n             final int s = ((BHSDCodec)tokenCodec).getS();\n             final int b = ((BHSDCodec)tokenCodec).getB();\n@@ -340,18 +344,18 @@\n                             tdefL = 11;\n                             break;\n                         }\n                     }\n                 }\n             }\n         }\n-        final byte[] favouredEncoded = BandSet.BandAnalysisResults.access$100(favouredResults);\n-        final byte[] unfavouredEncoded = BandSet.BandAnalysisResults.access$100(unfavouredResults);\n-        final Codec favouredCodec = BandSet.BandAnalysisResults.access$000(favouredResults);\n-        final Codec unfavouredCodec = BandSet.BandAnalysisResults.access$000(unfavouredResults);\n+        final byte[] favouredEncoded = BandSet.BandAnalysisResults.access$1(favouredResults);\n+        final byte[] unfavouredEncoded = BandSet.BandAnalysisResults.access$1(unfavouredResults);\n+        final Codec favouredCodec = BandSet.BandAnalysisResults.access$0(favouredResults);\n+        final Codec unfavouredCodec = BandSet.BandAnalysisResults.access$0(unfavouredResults);\n         int specifier = 141 + ((favouredCodec == null) ? 1 : 0) + 4 * tdefL + ((unfavouredCodec == null) ? 2 : 0);\n         final IntList extraBandMetadata = new IntList(3);\n         if (favouredCodec != null) {\n             final int[] specifiers = CodecEncoding.getSpecifier(favouredCodec, (Codec)null);\n             for (int m = 0; m < specifiers.length; ++m) {\n                 extraBandMetadata.add(specifiers[m]);\n             }\n@@ -374,28 +378,28 @@\n             specifier = -1 - specifier;\n         }\n         else {\n             specifier += defaultCodec.getL();\n         }\n         final byte[] firstValueEncoded = defaultCodec.encode(new int[] { specifier });\n         final int totalBandLength = firstValueEncoded.length + favouredEncoded.length + tokensEncoded.length + unfavouredEncoded.length;\n-        if (totalBandLength + extraMetadataEncoded.length < BandSet.BandAnalysisResults.access$100(results).length) {\n-            BandSet.BandAnalysisResults.access$812(results, BandSet.BandAnalysisResults.access$100(results).length - (totalBandLength + extraMetadataEncoded.length));\n+        if (totalBandLength + extraMetadataEncoded.length < BandSet.BandAnalysisResults.access$1(results).length) {\n+            BandSet.BandAnalysisResults.access$8(results, BandSet.BandAnalysisResults.access$7(results) + (BandSet.BandAnalysisResults.access$1(results).length - (totalBandLength + extraMetadataEncoded.length)));\n             final byte[] encodedBand = new byte[totalBandLength];\n             System.arraycopy(firstValueEncoded, 0, encodedBand, 0, firstValueEncoded.length);\n             System.arraycopy(favouredEncoded, 0, encodedBand, firstValueEncoded.length, favouredEncoded.length);\n             System.arraycopy(tokensEncoded, 0, encodedBand, firstValueEncoded.length + favouredEncoded.length, tokensEncoded.length);\n             System.arraycopy(unfavouredEncoded, 0, encodedBand, firstValueEncoded.length + favouredEncoded.length + tokensEncoded.length, unfavouredEncoded.length);\n-            BandSet.BandAnalysisResults.access$102(results, encodedBand);\n-            BandSet.BandAnalysisResults.access$202(results, extraMetadata);\n+            BandSet.BandAnalysisResults.access$3(results, encodedBand);\n+            BandSet.BandAnalysisResults.access$9(results, extraMetadata);\n             if (l != 0) {\n-                BandSet.BandAnalysisResults.access$002(results, (Codec)new PopulationCodec(favouredCodec, l, unfavouredCodec));\n+                BandSet.BandAnalysisResults.access$4(results, (Codec)new PopulationCodec(favouredCodec, l, unfavouredCodec));\n             }\n             else {\n-                BandSet.BandAnalysisResults.access$002(results, (Codec)new PopulationCodec(favouredCodec, tokenCodec, unfavouredCodec));\n+                BandSet.BandAnalysisResults.access$4(results, (Codec)new PopulationCodec(favouredCodec, tokenCodec, unfavouredCodec));\n             }\n         }\n     }\n     \n     protected byte[] encodeFlags(final String name, final long[] flags, final BHSDCodec loCodec, final BHSDCodec hiCodec, final boolean haveHiFlags) throws Pack200Exception {\n         if (!haveHiFlags) {\n             final int[] loBits = new int[flags.length];\n@@ -473,12 +477,8 @@\n             for (int k = 0; k < flags[j].length; ++k) {\n                 flatArray[index] = flags[j][k];\n                 ++index;\n             }\n         }\n         return flatArray;\n     }\n-    \n-    static {\n-        effortThresholds = new int[] { 0, 0, 1000, 500, 100, 100, 100, 100, 100, 0 };\n-    }\n }\n"}]}
