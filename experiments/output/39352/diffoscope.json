{"diffoscope-json-version": 1, "source1": "first/DumpArchiveUtil.class", "source2": "second/DumpArchiveUtil.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,93 +1,91 @@\n-  SHA-256 checksum a0d8c9a8d1265cb664da45cb39473d2e0e9fbe25519c33b424778d0bc257dd45\n+  SHA-256 checksum 5ba814a1e0ba7289ec0901e55f6570a84cf7662cc37ac1663912ba19cb41ace6\n   Compiled from \"DumpArchiveUtil.java\"\n class org.apache.commons.compress.archivers.dump.DumpArchiveUtil\n   minor version: 0\n   major version: 51\n   flags: (0x0020) ACC_SUPER\n-  this_class: #10                         // org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n-  super_class: #11                        // java/lang/Object\n+  this_class: #1                          // org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n+  super_class: #3                         // java/lang/Object\n   interfaces: 0, fields: 0, methods: 8, attributes: 1\n Constant pool:\n-   #1 = Methodref          #11.#48        // java/lang/Object.\"<init>\":()V\n-   #2 = Methodref          #10.#49        // org/apache/commons/compress/archivers/dump/DumpArchiveUtil.convert32:([BI)I\n-   #3 = Class              #50            // org/apache/commons/compress/archivers/dump/DumpArchiveConstants\n-   #4 = Integer            84446\n-   #5 = Integer            60012\n-   #6 = Methodref          #10.#51        // org/apache/commons/compress/archivers/dump/DumpArchiveUtil.calculateChecksum:([B)I\n-   #7 = Methodref          #52.#53        // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n-   #8 = Methodref          #54.#55        // java/util/Arrays.copyOfRange:([BII)[B\n-   #9 = InterfaceMethodref #56.#57        // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-  #10 = Class              #58            // org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n-  #11 = Class              #59            // java/lang/Object\n-  #12 = Utf8               <init>\n-  #13 = Utf8               ()V\n-  #14 = Utf8               Code\n-  #15 = Utf8               LineNumberTable\n-  #16 = Utf8               LocalVariableTable\n-  #17 = Utf8               this\n-  #18 = Utf8               Lorg/apache/commons/compress/archivers/dump/DumpArchiveUtil;\n-  #19 = Utf8               calculateChecksum\n-  #20 = Utf8               ([B)I\n-  #21 = Utf8               i\n-  #22 = Utf8               I\n-  #23 = Utf8               buffer\n-  #24 = Utf8               [B\n-  #25 = Utf8               calc\n+   #1 = Class              #2             // org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n+   #2 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n+   #3 = Class              #4             // java/lang/Object\n+   #4 = Utf8               java/lang/Object\n+   #5 = Utf8               <init>\n+   #6 = Utf8               ()V\n+   #7 = Utf8               Code\n+   #8 = Methodref          #3.#9          // java/lang/Object.\"<init>\":()V\n+   #9 = NameAndType        #5:#6          // \"<init>\":()V\n+  #10 = Utf8               LineNumberTable\n+  #11 = Utf8               LocalVariableTable\n+  #12 = Utf8               this\n+  #13 = Utf8               Lorg/apache/commons/compress/archivers/dump/DumpArchiveUtil;\n+  #14 = Utf8               calculateChecksum\n+  #15 = Utf8               ([B)I\n+  #16 = Methodref          #1.#17         // org/apache/commons/compress/archivers/dump/DumpArchiveUtil.convert32:([BI)I\n+  #17 = NameAndType        #18:#19        // convert32:([BI)I\n+  #18 = Utf8               convert32\n+  #19 = Utf8               ([BI)I\n+  #20 = Integer            84446\n+  #21 = Utf8               buffer\n+  #22 = Utf8               [B\n+  #23 = Utf8               calc\n+  #24 = Utf8               I\n+  #25 = Utf8               i\n   #26 = Utf8               StackMapTable\n   #27 = Utf8               verify\n   #28 = Utf8               ([B)Z\n-  #29 = Utf8               magic\n-  #30 = Utf8               checksum\n-  #31 = Utf8               getIno\n-  #32 = Utf8               convert64\n-  #33 = Utf8               ([BI)J\n-  #34 = Utf8               offset\n-  #35 = Utf8               convert32\n-  #36 = Utf8               ([BI)I\n-  #37 = Utf8               convert16\n-  #38 = Utf8               decode\n-  #39 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEncoding;[BII)Ljava/lang/String;\n-  #40 = Utf8               encoding\n-  #41 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #42 = Utf8               b\n-  #43 = Utf8               len\n-  #44 = Utf8               Exceptions\n-  #45 = Class              #60            // java/io/IOException\n-  #46 = Utf8               SourceFile\n-  #47 = Utf8               DumpArchiveUtil.java\n-  #48 = NameAndType        #12:#13        // \"<init>\":()V\n-  #49 = NameAndType        #35:#36        // convert32:([BI)I\n-  #50 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveConstants\n-  #51 = NameAndType        #19:#20        // calculateChecksum:([B)I\n-  #52 = Class              #61            // org/apache/commons/compress/utils/ByteUtils\n-  #53 = NameAndType        #62:#63        // fromLittleEndian:([BII)J\n-  #54 = Class              #64            // java/util/Arrays\n-  #55 = NameAndType        #65:#66        // copyOfRange:([BII)[B\n-  #56 = Class              #67            // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #57 = NameAndType        #38:#68        // decode:([B)Ljava/lang/String;\n-  #58 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n-  #59 = Utf8               java/lang/Object\n-  #60 = Utf8               java/io/IOException\n-  #61 = Utf8               org/apache/commons/compress/utils/ByteUtils\n-  #62 = Utf8               fromLittleEndian\n-  #63 = Utf8               ([BII)J\n-  #64 = Utf8               java/util/Arrays\n-  #65 = Utf8               copyOfRange\n-  #66 = Utf8               ([BII)[B\n-  #67 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #68 = Utf8               ([B)Ljava/lang/String;\n+  #29 = Integer            60012\n+  #30 = Methodref          #1.#31         // org/apache/commons/compress/archivers/dump/DumpArchiveUtil.calculateChecksum:([B)I\n+  #31 = NameAndType        #14:#15        // calculateChecksum:([B)I\n+  #32 = Utf8               magic\n+  #33 = Utf8               checksum\n+  #34 = Utf8               getIno\n+  #35 = Utf8               convert64\n+  #36 = Utf8               ([BI)J\n+  #37 = Methodref          #38.#40        // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n+  #38 = Class              #39            // org/apache/commons/compress/utils/ByteUtils\n+  #39 = Utf8               org/apache/commons/compress/utils/ByteUtils\n+  #40 = NameAndType        #41:#42        // fromLittleEndian:([BII)J\n+  #41 = Utf8               fromLittleEndian\n+  #42 = Utf8               ([BII)J\n+  #43 = Utf8               offset\n+  #44 = Utf8               convert16\n+  #45 = Utf8               decode\n+  #46 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEncoding;[BII)Ljava/lang/String;\n+  #47 = Utf8               Exceptions\n+  #48 = Class              #49            // java/io/IOException\n+  #49 = Utf8               java/io/IOException\n+  #50 = Methodref          #51.#53        // java/util/Arrays.copyOfRange:([BII)[B\n+  #51 = Class              #52            // java/util/Arrays\n+  #52 = Utf8               java/util/Arrays\n+  #53 = NameAndType        #54:#55        // copyOfRange:([BII)[B\n+  #54 = Utf8               copyOfRange\n+  #55 = Utf8               ([BII)[B\n+  #56 = InterfaceMethodref #57.#59        // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+  #57 = Class              #58            // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #58 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #59 = NameAndType        #45:#60        // decode:([B)Ljava/lang/String;\n+  #60 = Utf8               ([B)Ljava/lang/String;\n+  #61 = Utf8               encoding\n+  #62 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #63 = Utf8               b\n+  #64 = Utf8               len\n+  #65 = Utf8               SourceFile\n+  #66 = Utf8               DumpArchiveUtil.java\n {\n   private org.apache.commons.compress.archivers.dump.DumpArchiveUtil();\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #8                  // Method java/lang/Object.\"<init>\":()V\n          4: return\n       LineNumberTable:\n         line 33: 0\n         line 34: 4\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/dump/DumpArchiveUtil;\n@@ -97,110 +95,107 @@\n     flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n     Code:\n       stack=4, locals=3, args_size=1\n          0: iconst_0\n          1: istore_1\n          2: iconst_0\n          3: istore_2\n-         4: iload_2\n-         5: sipush        256\n-         8: if_icmpge     27\n-        11: iload_1\n-        12: aload_0\n-        13: iconst_4\n-        14: iload_2\n-        15: imul\n-        16: invokestatic  #2                  // Method convert32:([BI)I\n-        19: iadd\n-        20: istore_1\n-        21: iinc          2, 1\n-        24: goto          4\n-        27: ldc           #4                  // int 84446\n+         4: goto          20\n+         7: iload_1\n+         8: aload_0\n+         9: iconst_4\n+        10: iload_2\n+        11: imul\n+        12: invokestatic  #16                 // Method convert32:([BI)I\n+        15: iadd\n+        16: istore_1\n+        17: iinc          2, 1\n+        20: iload_2\n+        21: sipush        256\n+        24: if_icmplt     7\n+        27: ldc           #20                 // int 84446\n         29: iload_1\n         30: aload_0\n         31: bipush        28\n-        33: invokestatic  #2                  // Method convert32:([BI)I\n+        33: invokestatic  #16                 // Method convert32:([BI)I\n         36: isub\n         37: isub\n         38: ireturn\n       LineNumberTable:\n         line 43: 0\n         line 45: 2\n-        line 46: 11\n-        line 45: 21\n+        line 46: 7\n+        line 45: 17\n         line 49: 27\n-        line 50: 33\n-        line 49: 38\n+        line 50: 29\n+        line 49: 37\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            4      23     2     i   I\n             0      39     0 buffer   [B\n             2      37     1  calc   I\n+            4      23     2     i   I\n       StackMapTable: number_of_entries = 2\n         frame_type = 253 /* append */\n-          offset_delta = 4\n+          offset_delta = 7\n           locals = [ int, int ]\n-        frame_type = 250 /* chop */\n-          offset_delta = 22\n+        frame_type = 12 /* same */\n \n   public static final boolean verify(byte[]);\n     descriptor: ([B)Z\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n     Code:\n       stack=2, locals=3, args_size=1\n          0: aload_0\n          1: bipush        24\n-         3: invokestatic  #2                  // Method convert32:([BI)I\n+         3: invokestatic  #16                 // Method convert32:([BI)I\n          6: istore_1\n          7: iload_1\n-         8: ldc           #5                  // int 60012\n+         8: ldc           #29                 // int 60012\n         10: if_icmpeq     15\n         13: iconst_0\n         14: ireturn\n         15: aload_0\n         16: bipush        28\n-        18: invokestatic  #2                  // Method convert32:([BI)I\n+        18: invokestatic  #16                 // Method convert32:([BI)I\n         21: istore_2\n         22: iload_2\n         23: aload_0\n-        24: invokestatic  #6                  // Method calculateChecksum:([B)I\n-        27: if_icmpne     34\n+        24: invokestatic  #30                 // Method calculateChecksum:([B)I\n+        27: if_icmpne     32\n         30: iconst_1\n-        31: goto          35\n-        34: iconst_0\n-        35: ireturn\n+        31: ireturn\n+        32: iconst_0\n+        33: ireturn\n       LineNumberTable:\n         line 60: 0\n         line 62: 7\n         line 63: 13\n         line 67: 15\n         line 69: 22\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n-            0      36     0 buffer   [B\n-            7      29     1 magic   I\n-           22      14     2 checksum   I\n-      StackMapTable: number_of_entries = 3\n+            0      34     0 buffer   [B\n+            7      27     1 magic   I\n+           22      12     2 checksum   I\n+      StackMapTable: number_of_entries = 2\n         frame_type = 252 /* append */\n           offset_delta = 15\n           locals = [ int ]\n         frame_type = 252 /* append */\n-          offset_delta = 18\n+          offset_delta = 16\n           locals = [ int ]\n-        frame_type = 64 /* same_locals_1_stack_item */\n-          stack = [ int ]\n \n   public static final int getIno(byte[]);\n     descriptor: ([B)I\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: bipush        20\n-         3: invokestatic  #2                  // Method convert32:([BI)I\n+         3: invokestatic  #16                 // Method convert32:([BI)I\n          6: ireturn\n       LineNumberTable:\n         line 78: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0 buffer   [B\n \n@@ -208,15 +203,15 @@\n     descriptor: ([BI)J\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n          2: bipush        8\n-         4: invokestatic  #7                  // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n+         4: invokestatic  #37                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n          7: lreturn\n       LineNumberTable:\n         line 89: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0 buffer   [B\n             0       8     1 offset   I\n@@ -225,15 +220,15 @@\n     descriptor: ([BI)I\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n          2: iconst_4\n-         3: invokestatic  #7                  // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n+         3: invokestatic  #37                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n          6: l2i\n          7: ireturn\n       LineNumberTable:\n         line 100: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0 buffer   [B\n@@ -243,43 +238,43 @@\n     descriptor: ([BI)I\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n          2: iconst_2\n-         3: invokestatic  #7                  // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n+         3: invokestatic  #37                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n          6: l2i\n          7: ireturn\n       LineNumberTable:\n         line 111: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0 buffer   [B\n             0       8     1 offset   I\n \n   static java.lang.String decode(org.apache.commons.compress.archivers.zip.ZipEncoding, byte[], int, int) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/archivers/zip/ZipEncoding;[BII)Ljava/lang/String;\n     flags: (0x0008) ACC_STATIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iload_2\n          4: iload_3\n          5: iadd\n-         6: invokestatic  #8                  // Method java/util/Arrays.copyOfRange:([BII)[B\n-         9: invokeinterface #9,  2            // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+         6: invokestatic  #50                 // Method java/util/Arrays.copyOfRange:([BII)[B\n+         9: invokeinterface #56,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n         14: areturn\n       LineNumberTable:\n         line 119: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      15     0 encoding   Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n             0      15     1     b   [B\n             0      15     2 offset   I\n             0      15     3   len   I\n-    Exceptions:\n-      throws java.io.IOException\n }\n SourceFile: \"DumpArchiveUtil.java\"\n"}]}
