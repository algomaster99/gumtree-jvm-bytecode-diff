{"diffoscope-json-version": 1, "source1": "first/AbstractLZ77CompressorInputStream.class", "source2": "second/AbstractLZ77CompressorInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,197 +1,197 @@\n-  SHA-256 checksum 435ab20e5f65ee054291545cad7c867b71843ac1a9cd49d08068549cd3c8bd91\n+  SHA-256 checksum db52bbc16c45ffac48db83cfb7c44d62adf8ada363b77e98d1e0b3587521c530\n   Compiled from \"AbstractLZ77CompressorInputStream.java\"\n public abstract class org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream implements org.apache.commons.compress.utils.InputStreamStatistics\n   minor version: 0\n   major version: 52\n   flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT\n-  this_class: #41                         // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream\n-  super_class: #42                        // org/apache/commons/compress/compressors/CompressorInputStream\n+  this_class: #8                          // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream\n+  super_class: #2                         // org/apache/commons/compress/compressors/CompressorInputStream\n   interfaces: 1, fields: 10, methods: 17, attributes: 3\n Constant pool:\n-    #1 = Methodref          #42.#96       // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n-    #2 = Fieldref           #41.#97       // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.oneByte:[B\n-    #3 = InvokeDynamic      #0:#102       // #0:getAsByte:(Lorg/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream;)Lorg/apache/commons/compress/utils/ByteUtils$ByteSupplier;\n-    #4 = Fieldref           #41.#103      // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.supplier:Lorg/apache/commons/compress/utils/ByteUtils$ByteSupplier;\n-    #5 = Class              #104          // org/apache/commons/compress/utils/CountingInputStream\n-    #6 = Methodref          #5.#105       // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-    #7 = Fieldref           #41.#106      // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.in:Lorg/apache/commons/compress/utils/CountingInputStream;\n-    #8 = Class              #107          // java/lang/IllegalArgumentException\n-    #9 = String             #108          // windowSize must be bigger than 0\n-   #10 = Methodref          #8.#109       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n-   #11 = Fieldref           #41.#110      // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.windowSize:I\n-   #12 = Fieldref           #41.#111      // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.buf:[B\n-   #13 = Fieldref           #41.#112      // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.readIndex:I\n-   #14 = Fieldref           #41.#113      // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.writeIndex:I\n-   #15 = Fieldref           #41.#114      // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.bytesRemaining:J\n-   #16 = Methodref          #5.#115       // org/apache/commons/compress/utils/CountingInputStream.close:()V\n-   #17 = Methodref          #5.#116       // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n-   #18 = Fieldref           #41.#117      // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.size:I\n-   #19 = Class              #118          // java/lang/IllegalStateException\n-   #20 = String             #119          // The stream has already been read from, can\\'t prefill anymore\n-   #21 = Methodref          #19.#109      // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n-   #22 = Methodref          #120.#121     // java/lang/Math.min:(II)I\n-   #23 = Methodref          #122.#123     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-   #24 = Methodref          #41.#124      // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.read:([BII)I\n-   #25 = Methodref          #41.#125      // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.available:()I\n-   #26 = Methodref          #41.#126      // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.tryToCopy:(I)V\n-   #27 = Methodref          #41.#127      // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.readFromBuffer:([BII)I\n-   #28 = Methodref          #41.#128      // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.slideBuffer:()V\n-   #29 = Methodref          #41.#129      // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.tryToReadLiteral:(I)V\n-   #30 = Methodref          #5.#130       // org/apache/commons/compress/utils/CountingInputStream.read:()I\n-   #31 = Methodref          #41.#131      // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.count:(I)V\n-   #32 = String             #132          // offset must be bigger than 0 but not bigger than the number of bytes available for back-references\n-   #33 = String             #133          // length must not be negative\n-   #34 = Fieldref           #41.#134      // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.backReferenceOffset:I\n-   #35 = Methodref          #120.#135     // java/lang/Math.min:(JJ)J\n-   #36 = Methodref          #136.#137     // java/util/Arrays.fill:([BIIB)V\n-   #37 = Methodref          #138.#139     // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[BII)I\n-   #38 = Class              #140          // java/io/IOException\n-   #39 = String             #141          // Premature end of stream reading literal\n-   #40 = Methodref          #38.#109      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #41 = Class              #142          // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream\n-   #42 = Class              #143          // org/apache/commons/compress/compressors/CompressorInputStream\n-   #43 = Class              #144          // org/apache/commons/compress/utils/InputStreamStatistics\n-   #44 = Utf8               windowSize\n-   #45 = Utf8               I\n-   #46 = Utf8               buf\n-   #47 = Utf8               [B\n-   #48 = Utf8               writeIndex\n-   #49 = Utf8               readIndex\n-   #50 = Utf8               in\n-   #51 = Utf8               Lorg/apache/commons/compress/utils/CountingInputStream;\n+    #1 = Methodref          #2.#3         // org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n+    #2 = Class              #4            // org/apache/commons/compress/compressors/CompressorInputStream\n+    #3 = NameAndType        #5:#6         // \"<init>\":()V\n+    #4 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n+    #5 = Utf8               <init>\n+    #6 = Utf8               ()V\n+    #7 = Fieldref           #8.#9         // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.oneByte:[B\n+    #8 = Class              #10           // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream\n+    #9 = NameAndType        #11:#12       // oneByte:[B\n+   #10 = Utf8               org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream\n+   #11 = Utf8               oneByte\n+   #12 = Utf8               [B\n+   #13 = InvokeDynamic      #0:#14        // #0:getAsByte:(Lorg/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream;)Lorg/apache/commons/compress/utils/ByteUtils$ByteSupplier;\n+   #14 = NameAndType        #15:#16       // getAsByte:(Lorg/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream;)Lorg/apache/commons/compress/utils/ByteUtils$ByteSupplier;\n+   #15 = Utf8               getAsByte\n+   #16 = Utf8               (Lorg/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream;)Lorg/apache/commons/compress/utils/ByteUtils$ByteSupplier;\n+   #17 = Fieldref           #8.#18        // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.supplier:Lorg/apache/commons/compress/utils/ByteUtils$ByteSupplier;\n+   #18 = NameAndType        #19:#20       // supplier:Lorg/apache/commons/compress/utils/ByteUtils$ByteSupplier;\n+   #19 = Utf8               supplier\n+   #20 = Utf8               Lorg/apache/commons/compress/utils/ByteUtils$ByteSupplier;\n+   #21 = Class              #22           // org/apache/commons/compress/utils/CountingInputStream\n+   #22 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n+   #23 = Methodref          #21.#24       // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+   #24 = NameAndType        #5:#25        // \"<init>\":(Ljava/io/InputStream;)V\n+   #25 = Utf8               (Ljava/io/InputStream;)V\n+   #26 = Fieldref           #8.#27        // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.in:Lorg/apache/commons/compress/utils/CountingInputStream;\n+   #27 = NameAndType        #28:#29       // in:Lorg/apache/commons/compress/utils/CountingInputStream;\n+   #28 = Utf8               in\n+   #29 = Utf8               Lorg/apache/commons/compress/utils/CountingInputStream;\n+   #30 = Class              #31           // java/lang/IllegalArgumentException\n+   #31 = Utf8               java/lang/IllegalArgumentException\n+   #32 = String             #33           // windowSize must be bigger than 0\n+   #33 = Utf8               windowSize must be bigger than 0\n+   #34 = Methodref          #30.#35       // java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+   #35 = NameAndType        #5:#36        // \"<init>\":(Ljava/lang/String;)V\n+   #36 = Utf8               (Ljava/lang/String;)V\n+   #37 = Fieldref           #8.#38        // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.windowSize:I\n+   #38 = NameAndType        #39:#40       // windowSize:I\n+   #39 = Utf8               windowSize\n+   #40 = Utf8               I\n+   #41 = Fieldref           #8.#42        // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.buf:[B\n+   #42 = NameAndType        #43:#12       // buf:[B\n+   #43 = Utf8               buf\n+   #44 = Fieldref           #8.#45        // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.readIndex:I\n+   #45 = NameAndType        #46:#40       // readIndex:I\n+   #46 = Utf8               readIndex\n+   #47 = Fieldref           #8.#48        // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.writeIndex:I\n+   #48 = NameAndType        #49:#40       // writeIndex:I\n+   #49 = Utf8               writeIndex\n+   #50 = Fieldref           #8.#51        // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.bytesRemaining:J\n+   #51 = NameAndType        #52:#53       // bytesRemaining:J\n    #52 = Utf8               bytesRemaining\n    #53 = Utf8               J\n-   #54 = Utf8               backReferenceOffset\n-   #55 = Utf8               size\n-   #56 = Utf8               oneByte\n-   #57 = Utf8               supplier\n-   #58 = Class              #146          // org/apache/commons/compress/utils/ByteUtils$ByteSupplier\n-   #59 = Utf8               ByteSupplier\n-   #60 = Utf8               InnerClasses\n-   #61 = Utf8               Lorg/apache/commons/compress/utils/ByteUtils$ByteSupplier;\n-   #62 = Utf8               <init>\n-   #63 = Utf8               (Ljava/io/InputStream;I)V\n-   #64 = Utf8               Code\n-   #65 = Utf8               LineNumberTable\n-   #66 = Utf8               StackMapTable\n-   #67 = Class              #147          // java/io/InputStream\n-   #68 = Utf8               available\n-   #69 = Utf8               ()I\n-   #70 = Utf8               close\n-   #71 = Utf8               ()V\n-   #72 = Utf8               Exceptions\n-   #73 = Utf8               getCompressedCount\n-   #74 = Utf8               ()J\n-   #75 = Utf8               getSize\n-   #76 = Utf8               hasMoreDataInBlock\n-   #77 = Utf8               ()Z\n-   #78 = Utf8               prefill\n-   #79 = Utf8               ([B)V\n-   #80 = Utf8               read\n-   #81 = Utf8               readBackReference\n-   #82 = Utf8               ([BII)I\n-   #83 = Utf8               readFromBuffer\n-   #84 = Utf8               readLiteral\n-   #85 = Utf8               readOneByte\n-   #86 = Utf8               slideBuffer\n-   #87 = Utf8               startBackReference\n-   #88 = Utf8               (IJ)V\n-   #89 = Utf8               startLiteral\n-   #90 = Utf8               (J)V\n+   #54 = Methodref          #21.#55       // org/apache/commons/compress/utils/CountingInputStream.close:()V\n+   #55 = NameAndType        #56:#6        // close:()V\n+   #56 = Utf8               close\n+   #57 = Methodref          #21.#58       // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+   #58 = NameAndType        #59:#60       // getBytesRead:()J\n+   #59 = Utf8               getBytesRead\n+   #60 = Utf8               ()J\n+   #61 = Fieldref           #8.#62        // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.size:I\n+   #62 = NameAndType        #63:#40       // size:I\n+   #63 = Utf8               size\n+   #64 = Class              #65           // java/lang/IllegalStateException\n+   #65 = Utf8               java/lang/IllegalStateException\n+   #66 = String             #67           // The stream has already been read from, can\\'t prefill anymore\n+   #67 = Utf8               The stream has already been read from, can\\'t prefill anymore\n+   #68 = Methodref          #64.#35       // java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+   #69 = Methodref          #70.#71       // java/lang/Math.min:(II)I\n+   #70 = Class              #72           // java/lang/Math\n+   #71 = NameAndType        #73:#74       // min:(II)I\n+   #72 = Utf8               java/lang/Math\n+   #73 = Utf8               min\n+   #74 = Utf8               (II)I\n+   #75 = Methodref          #76.#77       // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #76 = Class              #78           // java/lang/System\n+   #77 = NameAndType        #79:#80       // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #78 = Utf8               java/lang/System\n+   #79 = Utf8               arraycopy\n+   #80 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #81 = Methodref          #8.#82        // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.read:([BII)I\n+   #82 = NameAndType        #83:#84       // read:([BII)I\n+   #83 = Utf8               read\n+   #84 = Utf8               ([BII)I\n+   #85 = Methodref          #8.#86        // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.available:()I\n+   #86 = NameAndType        #87:#88       // available:()I\n+   #87 = Utf8               available\n+   #88 = Utf8               ()I\n+   #89 = Methodref          #8.#90        // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.tryToCopy:(I)V\n+   #90 = NameAndType        #91:#92       // tryToCopy:(I)V\n    #91 = Utf8               tryToCopy\n    #92 = Utf8               (I)V\n-   #93 = Utf8               tryToReadLiteral\n-   #94 = Utf8               SourceFile\n-   #95 = Utf8               AbstractLZ77CompressorInputStream.java\n-   #96 = NameAndType        #62:#71       // \"<init>\":()V\n-   #97 = NameAndType        #56:#47       // oneByte:[B\n-   #98 = Utf8               BootstrapMethods\n-   #99 = MethodHandle       6:#148        // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #100 = MethodType         #69           //  ()I\n-  #101 = MethodHandle       5:#149        // REF_invokeVirtual org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.readOneByte:()I\n-  #102 = NameAndType        #150:#151     // getAsByte:(Lorg/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream;)Lorg/apache/commons/compress/utils/ByteUtils$ByteSupplier;\n-  #103 = NameAndType        #57:#61       // supplier:Lorg/apache/commons/compress/utils/ByteUtils$ByteSupplier;\n-  #104 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n-  #105 = NameAndType        #62:#152      // \"<init>\":(Ljava/io/InputStream;)V\n-  #106 = NameAndType        #50:#51       // in:Lorg/apache/commons/compress/utils/CountingInputStream;\n-  #107 = Utf8               java/lang/IllegalArgumentException\n-  #108 = Utf8               windowSize must be bigger than 0\n-  #109 = NameAndType        #62:#153      // \"<init>\":(Ljava/lang/String;)V\n-  #110 = NameAndType        #44:#45       // windowSize:I\n-  #111 = NameAndType        #46:#47       // buf:[B\n-  #112 = NameAndType        #49:#45       // readIndex:I\n-  #113 = NameAndType        #48:#45       // writeIndex:I\n-  #114 = NameAndType        #52:#53       // bytesRemaining:J\n-  #115 = NameAndType        #70:#71       // close:()V\n-  #116 = NameAndType        #154:#74      // getBytesRead:()J\n-  #117 = NameAndType        #55:#45       // size:I\n-  #118 = Utf8               java/lang/IllegalStateException\n-  #119 = Utf8               The stream has already been read from, can\\'t prefill anymore\n-  #120 = Class              #155          // java/lang/Math\n-  #121 = NameAndType        #156:#157     // min:(II)I\n-  #122 = Class              #158          // java/lang/System\n-  #123 = NameAndType        #159:#160     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #124 = NameAndType        #80:#82       // read:([BII)I\n-  #125 = NameAndType        #68:#69       // available:()I\n-  #126 = NameAndType        #91:#92       // tryToCopy:(I)V\n-  #127 = NameAndType        #83:#82       // readFromBuffer:([BII)I\n-  #128 = NameAndType        #86:#71       // slideBuffer:()V\n-  #129 = NameAndType        #93:#92       // tryToReadLiteral:(I)V\n-  #130 = NameAndType        #80:#69       // read:()I\n-  #131 = NameAndType        #161:#92      // count:(I)V\n-  #132 = Utf8               offset must be bigger than 0 but not bigger than the number of bytes available for back-references\n-  #133 = Utf8               length must not be negative\n-  #134 = NameAndType        #54:#45       // backReferenceOffset:I\n-  #135 = NameAndType        #156:#162     // min:(JJ)J\n-  #136 = Class              #163          // java/util/Arrays\n-  #137 = NameAndType        #164:#165     // fill:([BIIB)V\n-  #138 = Class              #166          // org/apache/commons/compress/utils/IOUtils\n-  #139 = NameAndType        #167:#168     // readFully:(Ljava/io/InputStream;[BII)I\n-  #140 = Utf8               java/io/IOException\n-  #141 = Utf8               Premature end of stream reading literal\n-  #142 = Utf8               org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream\n-  #143 = Utf8               org/apache/commons/compress/compressors/CompressorInputStream\n-  #144 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n-  #145 = Class              #169          // org/apache/commons/compress/utils/ByteUtils\n-  #146 = Utf8               org/apache/commons/compress/utils/ByteUtils$ByteSupplier\n-  #147 = Utf8               java/io/InputStream\n-  #148 = Methodref          #170.#171     // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #149 = Methodref          #41.#172      // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.readOneByte:()I\n-  #150 = Utf8               getAsByte\n-  #151 = Utf8               (Lorg/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream;)Lorg/apache/commons/compress/utils/ByteUtils$ByteSupplier;\n-  #152 = Utf8               (Ljava/io/InputStream;)V\n-  #153 = Utf8               (Ljava/lang/String;)V\n-  #154 = Utf8               getBytesRead\n-  #155 = Utf8               java/lang/Math\n-  #156 = Utf8               min\n-  #157 = Utf8               (II)I\n-  #158 = Utf8               java/lang/System\n-  #159 = Utf8               arraycopy\n-  #160 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #161 = Utf8               count\n-  #162 = Utf8               (JJ)J\n-  #163 = Utf8               java/util/Arrays\n-  #164 = Utf8               fill\n-  #165 = Utf8               ([BIIB)V\n-  #166 = Utf8               org/apache/commons/compress/utils/IOUtils\n-  #167 = Utf8               readFully\n-  #168 = Utf8               (Ljava/io/InputStream;[BII)I\n-  #169 = Utf8               org/apache/commons/compress/utils/ByteUtils\n-  #170 = Class              #173          // java/lang/invoke/LambdaMetafactory\n-  #171 = NameAndType        #174:#177     // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #172 = NameAndType        #85:#69       // readOneByte:()I\n-  #173 = Utf8               java/lang/invoke/LambdaMetafactory\n-  #174 = Utf8               metafactory\n-  #175 = Class              #179          // java/lang/invoke/MethodHandles$Lookup\n-  #176 = Utf8               Lookup\n-  #177 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n-  #178 = Class              #180          // java/lang/invoke/MethodHandles\n-  #179 = Utf8               java/lang/invoke/MethodHandles$Lookup\n-  #180 = Utf8               java/lang/invoke/MethodHandles\n+   #93 = Methodref          #8.#94        // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.readFromBuffer:([BII)I\n+   #94 = NameAndType        #95:#84       // readFromBuffer:([BII)I\n+   #95 = Utf8               readFromBuffer\n+   #96 = Methodref          #8.#97        // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.slideBuffer:()V\n+   #97 = NameAndType        #98:#6        // slideBuffer:()V\n+   #98 = Utf8               slideBuffer\n+   #99 = Methodref          #8.#100       // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.tryToReadLiteral:(I)V\n+  #100 = NameAndType        #101:#92      // tryToReadLiteral:(I)V\n+  #101 = Utf8               tryToReadLiteral\n+  #102 = Methodref          #21.#103      // org/apache/commons/compress/utils/CountingInputStream.read:()I\n+  #103 = NameAndType        #83:#88       // read:()I\n+  #104 = Methodref          #8.#105       // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.count:(I)V\n+  #105 = NameAndType        #106:#92      // count:(I)V\n+  #106 = Utf8               count\n+  #107 = String             #108          // offset must be bigger than 0 but not bigger than the number of bytes available for back-references\n+  #108 = Utf8               offset must be bigger than 0 but not bigger than the number of bytes available for back-references\n+  #109 = String             #110          // length must not be negative\n+  #110 = Utf8               length must not be negative\n+  #111 = Fieldref           #8.#112       // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.backReferenceOffset:I\n+  #112 = NameAndType        #113:#40      // backReferenceOffset:I\n+  #113 = Utf8               backReferenceOffset\n+  #114 = Methodref          #70.#115      // java/lang/Math.min:(JJ)J\n+  #115 = NameAndType        #73:#116      // min:(JJ)J\n+  #116 = Utf8               (JJ)J\n+  #117 = Methodref          #118.#119     // java/util/Arrays.fill:([BIIB)V\n+  #118 = Class              #120          // java/util/Arrays\n+  #119 = NameAndType        #121:#122     // fill:([BIIB)V\n+  #120 = Utf8               java/util/Arrays\n+  #121 = Utf8               fill\n+  #122 = Utf8               ([BIIB)V\n+  #123 = Methodref          #124.#125     // org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[BII)I\n+  #124 = Class              #126          // org/apache/commons/compress/utils/IOUtils\n+  #125 = NameAndType        #127:#128     // readFully:(Ljava/io/InputStream;[BII)I\n+  #126 = Utf8               org/apache/commons/compress/utils/IOUtils\n+  #127 = Utf8               readFully\n+  #128 = Utf8               (Ljava/io/InputStream;[BII)I\n+  #129 = Class              #130          // java/io/IOException\n+  #130 = Utf8               java/io/IOException\n+  #131 = String             #132          // Premature end of stream reading literal\n+  #132 = Utf8               Premature end of stream reading literal\n+  #133 = Methodref          #129.#35      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+  #134 = Class              #135          // org/apache/commons/compress/utils/InputStreamStatistics\n+  #135 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n+  #136 = Utf8               (Ljava/io/InputStream;I)V\n+  #137 = Utf8               Code\n+  #138 = Utf8               LineNumberTable\n+  #139 = Utf8               StackMapTable\n+  #140 = Class              #141          // java/io/InputStream\n+  #141 = Utf8               java/io/InputStream\n+  #142 = Utf8               Exceptions\n+  #143 = Utf8               getCompressedCount\n+  #144 = Utf8               getSize\n+  #145 = Utf8               hasMoreDataInBlock\n+  #146 = Utf8               ()Z\n+  #147 = Utf8               prefill\n+  #148 = Utf8               ([B)V\n+  #149 = Utf8               readBackReference\n+  #150 = Utf8               readLiteral\n+  #151 = Utf8               readOneByte\n+  #152 = Utf8               startBackReference\n+  #153 = Utf8               (IJ)V\n+  #154 = Utf8               startLiteral\n+  #155 = Utf8               (J)V\n+  #156 = Utf8               SourceFile\n+  #157 = Utf8               AbstractLZ77CompressorInputStream.java\n+  #158 = Utf8               BootstrapMethods\n+  #159 = MethodHandle       6:#160        // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #160 = Methodref          #161.#162     // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #161 = Class              #163          // java/lang/invoke/LambdaMetafactory\n+  #162 = NameAndType        #164:#165     // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #163 = Utf8               java/lang/invoke/LambdaMetafactory\n+  #164 = Utf8               metafactory\n+  #165 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  #166 = MethodType         #88           //  ()I\n+  #167 = MethodHandle       5:#168        // REF_invokeVirtual org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.readOneByte:()I\n+  #168 = Methodref          #8.#169       // org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.readOneByte:()I\n+  #169 = NameAndType        #151:#88      // readOneByte:()I\n+  #170 = Utf8               InnerClasses\n+  #171 = Class              #172          // org/apache/commons/compress/utils/ByteUtils$ByteSupplier\n+  #172 = Utf8               org/apache/commons/compress/utils/ByteUtils$ByteSupplier\n+  #173 = Class              #174          // org/apache/commons/compress/utils/ByteUtils\n+  #174 = Utf8               org/apache/commons/compress/utils/ByteUtils\n+  #175 = Utf8               ByteSupplier\n+  #176 = Class              #177          // java/lang/invoke/MethodHandles$Lookup\n+  #177 = Utf8               java/lang/invoke/MethodHandles$Lookup\n+  #178 = Class              #179          // java/lang/invoke/MethodHandles\n+  #179 = Utf8               java/lang/invoke/MethodHandles\n+  #180 = Utf8               Lookup\n {\n   private final int windowSize;\n     descriptor: I\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final byte[] buf;\n     descriptor: [B\n@@ -235,50 +235,50 @@\n     Code:\n       stack=4, locals=3, args_size=3\n          0: aload_0\n          1: invokespecial #1                  // Method org/apache/commons/compress/compressors/CompressorInputStream.\"<init>\":()V\n          4: aload_0\n          5: iconst_1\n          6: newarray       byte\n-         8: putfield      #2                  // Field oneByte:[B\n+         8: putfield      #7                  // Field oneByte:[B\n         11: aload_0\n         12: aload_0\n-        13: invokedynamic #3,  0              // InvokeDynamic #0:getAsByte:(Lorg/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream;)Lorg/apache/commons/compress/utils/ByteUtils$ByteSupplier;\n-        18: putfield      #4                  // Field supplier:Lorg/apache/commons/compress/utils/ByteUtils$ByteSupplier;\n+        13: invokedynamic #13,  0             // InvokeDynamic #0:getAsByte:(Lorg/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream;)Lorg/apache/commons/compress/utils/ByteUtils$ByteSupplier;\n+        18: putfield      #17                 // Field supplier:Lorg/apache/commons/compress/utils/ByteUtils$ByteSupplier;\n         21: aload_0\n-        22: new           #5                  // class org/apache/commons/compress/utils/CountingInputStream\n+        22: new           #21                 // class org/apache/commons/compress/utils/CountingInputStream\n         25: dup\n         26: aload_1\n-        27: invokespecial #6                  // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-        30: putfield      #7                  // Field in:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        27: invokespecial #23                 // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+        30: putfield      #26                 // Field in:Lorg/apache/commons/compress/utils/CountingInputStream;\n         33: iload_2\n         34: ifgt          47\n-        37: new           #8                  // class java/lang/IllegalArgumentException\n+        37: new           #30                 // class java/lang/IllegalArgumentException\n         40: dup\n-        41: ldc           #9                  // String windowSize must be bigger than 0\n-        43: invokespecial #10                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        41: ldc           #32                 // String windowSize must be bigger than 0\n+        43: invokespecial #34                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         46: athrow\n         47: aload_0\n         48: iload_2\n-        49: putfield      #11                 // Field windowSize:I\n+        49: putfield      #37                 // Field windowSize:I\n         52: aload_0\n         53: iconst_3\n         54: iload_2\n         55: imul\n         56: newarray       byte\n-        58: putfield      #12                 // Field buf:[B\n+        58: putfield      #41                 // Field buf:[B\n         61: aload_0\n         62: aload_0\n         63: iconst_0\n         64: dup_x1\n-        65: putfield      #13                 // Field readIndex:I\n-        68: putfield      #14                 // Field writeIndex:I\n+        65: putfield      #44                 // Field readIndex:I\n+        68: putfield      #47                 // Field writeIndex:I\n         71: aload_0\n         72: lconst_0\n-        73: putfield      #15                 // Field bytesRemaining:J\n+        73: putfield      #50                 // Field bytesRemaining:J\n         76: return\n       LineNumberTable:\n         line 129: 0\n         line 112: 4\n         line 117: 11\n         line 130: 21\n         line 131: 33\n@@ -296,67 +296,67 @@\n \n   public int available();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #14                 // Field writeIndex:I\n+         1: getfield      #47                 // Field writeIndex:I\n          4: aload_0\n-         5: getfield      #13                 // Field readIndex:I\n+         5: getfield      #44                 // Field readIndex:I\n          8: isub\n          9: ireturn\n       LineNumberTable:\n         line 143: 0\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field in:Lorg/apache/commons/compress/utils/CountingInputStream;\n-         4: invokevirtual #16                 // Method org/apache/commons/compress/utils/CountingInputStream.close:()V\n+         1: getfield      #26                 // Field in:Lorg/apache/commons/compress/utils/CountingInputStream;\n+         4: invokevirtual #54                 // Method org/apache/commons/compress/utils/CountingInputStream.close:()V\n          7: return\n       LineNumberTable:\n         line 149: 0\n         line 150: 7\n     Exceptions:\n       throws java.io.IOException\n \n   public long getCompressedCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field in:Lorg/apache/commons/compress/utils/CountingInputStream;\n-         4: invokevirtual #17                 // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+         1: getfield      #26                 // Field in:Lorg/apache/commons/compress/utils/CountingInputStream;\n+         4: invokevirtual #57                 // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n          7: lreturn\n       LineNumberTable:\n         line 157: 0\n \n   public int getSize();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #18                 // Field size:I\n+         1: getfield      #61                 // Field size:I\n          4: ireturn\n       LineNumberTable:\n         line 166: 0\n \n   protected final boolean hasMoreDataInBlock();\n     descriptor: ()Z\n     flags: (0x0014) ACC_PROTECTED, ACC_FINAL\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #15                 // Field bytesRemaining:J\n+         1: getfield      #50                 // Field bytesRemaining:J\n          4: lconst_0\n          5: lcmp\n          6: ifle          13\n          9: iconst_1\n         10: goto          14\n         13: iconst_0\n         14: ireturn\n@@ -369,49 +369,49 @@\n \n   public void prefill(byte[]);\n     descriptor: ([B)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=3, args_size=2\n          0: aload_0\n-         1: getfield      #14                 // Field writeIndex:I\n+         1: getfield      #47                 // Field writeIndex:I\n          4: ifeq          17\n-         7: new           #19                 // class java/lang/IllegalStateException\n+         7: new           #64                 // class java/lang/IllegalStateException\n         10: dup\n-        11: ldc           #20                 // String The stream has already been read from, can\\'t prefill anymore\n-        13: invokespecial #21                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n+        11: ldc           #66                 // String The stream has already been read from, can\\'t prefill anymore\n+        13: invokespecial #68                 // Method java/lang/IllegalStateException.\"<init>\":(Ljava/lang/String;)V\n         16: athrow\n         17: aload_0\n-        18: getfield      #11                 // Field windowSize:I\n+        18: getfield      #37                 // Field windowSize:I\n         21: aload_1\n         22: arraylength\n-        23: invokestatic  #22                 // Method java/lang/Math.min:(II)I\n+        23: invokestatic  #69                 // Method java/lang/Math.min:(II)I\n         26: istore_2\n         27: aload_1\n         28: aload_1\n         29: arraylength\n         30: iload_2\n         31: isub\n         32: aload_0\n-        33: getfield      #12                 // Field buf:[B\n+        33: getfield      #41                 // Field buf:[B\n         36: iconst_0\n         37: iload_2\n-        38: invokestatic  #23                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        38: invokestatic  #75                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         41: aload_0\n         42: dup\n-        43: getfield      #14                 // Field writeIndex:I\n+        43: getfield      #47                 // Field writeIndex:I\n         46: iload_2\n         47: iadd\n-        48: putfield      #14                 // Field writeIndex:I\n+        48: putfield      #47                 // Field writeIndex:I\n         51: aload_0\n         52: dup\n-        53: getfield      #13                 // Field readIndex:I\n+        53: getfield      #44                 // Field readIndex:I\n         56: iload_2\n         57: iadd\n-        58: putfield      #13                 // Field readIndex:I\n+        58: putfield      #44                 // Field readIndex:I\n         61: return\n       LineNumberTable:\n         line 189: 0\n         line 190: 7\n         line 193: 17\n         line 195: 27\n         line 196: 41\n@@ -423,24 +423,24 @@\n   public int read() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=1, args_size=1\n          0: aload_0\n          1: aload_0\n-         2: getfield      #2                  // Field oneByte:[B\n+         2: getfield      #7                  // Field oneByte:[B\n          5: iconst_0\n          6: iconst_1\n-         7: invokevirtual #24                 // Method read:([BII)I\n+         7: invokevirtual #81                 // Method read:([BII)I\n         10: iconst_m1\n         11: if_icmpne     18\n         14: iconst_m1\n         15: goto          28\n         18: aload_0\n-        19: getfield      #2                  // Field oneByte:[B\n+        19: getfield      #7                  // Field oneByte:[B\n         22: iconst_0\n         23: baload\n         24: sipush        255\n         27: iand\n         28: ireturn\n       LineNumberTable:\n         line 203: 0\n@@ -453,29 +453,29 @@\n \n   protected final int readBackReference(byte[], int, int);\n     descriptor: ([BII)I\n     flags: (0x0014) ACC_PROTECTED, ACC_FINAL\n     Code:\n       stack=4, locals=5, args_size=4\n          0: aload_0\n-         1: invokevirtual #25                 // Method available:()I\n+         1: invokevirtual #85                 // Method available:()I\n          4: istore        4\n          6: iload_3\n          7: iload         4\n          9: if_icmple     20\n         12: aload_0\n         13: iload_3\n         14: iload         4\n         16: isub\n-        17: invokespecial #26                 // Method tryToCopy:(I)V\n+        17: invokespecial #89                 // Method tryToCopy:(I)V\n         20: aload_0\n         21: aload_1\n         22: iload_2\n         23: iload_3\n-        24: invokespecial #27                 // Method readFromBuffer:([BII)I\n+        24: invokespecial #93                 // Method readFromBuffer:([BII)I\n         27: ireturn\n       LineNumberTable:\n         line 219: 0\n         line 220: 6\n         line 221: 12\n         line 223: 20\n       StackMapTable: number_of_entries = 1\n@@ -486,48 +486,48 @@\n   private int readFromBuffer(byte[], int, int);\n     descriptor: ([BII)I\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=5, args_size=4\n          0: iload_3\n          1: aload_0\n-         2: invokevirtual #25                 // Method available:()I\n-         5: invokestatic  #22                 // Method java/lang/Math.min:(II)I\n+         2: invokevirtual #85                 // Method available:()I\n+         5: invokestatic  #69                 // Method java/lang/Math.min:(II)I\n          8: istore        4\n         10: iload         4\n         12: ifle          58\n         15: aload_0\n-        16: getfield      #12                 // Field buf:[B\n+        16: getfield      #41                 // Field buf:[B\n         19: aload_0\n-        20: getfield      #13                 // Field readIndex:I\n+        20: getfield      #44                 // Field readIndex:I\n         23: aload_1\n         24: iload_2\n         25: iload         4\n-        27: invokestatic  #23                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        27: invokestatic  #75                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         30: aload_0\n         31: dup\n-        32: getfield      #13                 // Field readIndex:I\n+        32: getfield      #44                 // Field readIndex:I\n         35: iload         4\n         37: iadd\n-        38: putfield      #13                 // Field readIndex:I\n+        38: putfield      #44                 // Field readIndex:I\n         41: aload_0\n-        42: getfield      #13                 // Field readIndex:I\n+        42: getfield      #44                 // Field readIndex:I\n         45: iconst_2\n         46: aload_0\n-        47: getfield      #11                 // Field windowSize:I\n+        47: getfield      #37                 // Field windowSize:I\n         50: imul\n         51: if_icmple     58\n         54: aload_0\n-        55: invokespecial #28                 // Method slideBuffer:()V\n+        55: invokespecial #96                 // Method slideBuffer:()V\n         58: aload_0\n         59: dup\n-        60: getfield      #18                 // Field size:I\n+        60: getfield      #61                 // Field size:I\n         63: iload         4\n         65: iadd\n-        66: putfield      #18                 // Field size:I\n+        66: putfield      #61                 // Field size:I\n         69: iload         4\n         71: ireturn\n       LineNumberTable:\n         line 227: 0\n         line 228: 10\n         line 229: 15\n         line 230: 30\n@@ -542,29 +542,29 @@\n \n   protected final int readLiteral(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)I\n     flags: (0x0014) ACC_PROTECTED, ACC_FINAL\n     Code:\n       stack=4, locals=5, args_size=4\n          0: aload_0\n-         1: invokevirtual #25                 // Method available:()I\n+         1: invokevirtual #85                 // Method available:()I\n          4: istore        4\n          6: iload_3\n          7: iload         4\n          9: if_icmple     20\n         12: aload_0\n         13: iload_3\n         14: iload         4\n         16: isub\n-        17: invokespecial #29                 // Method tryToReadLiteral:(I)V\n+        17: invokespecial #99                 // Method tryToReadLiteral:(I)V\n         20: aload_0\n         21: aload_1\n         22: iload_2\n         23: iload_3\n-        24: invokespecial #27                 // Method readFromBuffer:([BII)I\n+        24: invokespecial #93                 // Method readFromBuffer:([BII)I\n         27: ireturn\n       LineNumberTable:\n         line 255: 0\n         line 256: 6\n         line 257: 12\n         line 259: 20\n       StackMapTable: number_of_entries = 1\n@@ -576,23 +576,23 @@\n \n   protected final int readOneByte() throws java.io.IOException;\n     descriptor: ()I\n     flags: (0x0014) ACC_PROTECTED, ACC_FINAL\n     Code:\n       stack=2, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #7                  // Field in:Lorg/apache/commons/compress/utils/CountingInputStream;\n-         4: invokevirtual #30                 // Method org/apache/commons/compress/utils/CountingInputStream.read:()I\n+         1: getfield      #26                 // Field in:Lorg/apache/commons/compress/utils/CountingInputStream;\n+         4: invokevirtual #102                // Method org/apache/commons/compress/utils/CountingInputStream.read:()I\n          7: istore_1\n          8: iload_1\n          9: iconst_m1\n         10: if_icmpeq     24\n         13: aload_0\n         14: iconst_1\n-        15: invokevirtual #31                 // Method count:(I)V\n+        15: invokevirtual #104                // Method count:(I)V\n         18: iload_1\n         19: sipush        255\n         22: iand\n         23: ireturn\n         24: iconst_m1\n         25: ireturn\n       LineNumberTable:\n@@ -610,39 +610,39 @@\n \n   private void slideBuffer();\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=6, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #12                 // Field buf:[B\n+         1: getfield      #41                 // Field buf:[B\n          4: aload_0\n-         5: getfield      #11                 // Field windowSize:I\n+         5: getfield      #37                 // Field windowSize:I\n          8: aload_0\n-         9: getfield      #12                 // Field buf:[B\n+         9: getfield      #41                 // Field buf:[B\n         12: iconst_0\n         13: aload_0\n-        14: getfield      #11                 // Field windowSize:I\n+        14: getfield      #37                 // Field windowSize:I\n         17: iconst_2\n         18: imul\n-        19: invokestatic  #23                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        19: invokestatic  #75                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         22: aload_0\n         23: dup\n-        24: getfield      #14                 // Field writeIndex:I\n+        24: getfield      #47                 // Field writeIndex:I\n         27: aload_0\n-        28: getfield      #11                 // Field windowSize:I\n+        28: getfield      #37                 // Field windowSize:I\n         31: isub\n-        32: putfield      #14                 // Field writeIndex:I\n+        32: putfield      #47                 // Field writeIndex:I\n         35: aload_0\n         36: dup\n-        37: getfield      #13                 // Field readIndex:I\n+        37: getfield      #44                 // Field readIndex:I\n         40: aload_0\n-        41: getfield      #11                 // Field windowSize:I\n+        41: getfield      #37                 // Field windowSize:I\n         44: isub\n-        45: putfield      #13                 // Field readIndex:I\n+        45: putfield      #44                 // Field readIndex:I\n         48: return\n       LineNumberTable:\n         line 278: 0\n         line 279: 22\n         line 280: 35\n         line 281: 48\n \n@@ -651,36 +651,36 @@\n     flags: (0x0014) ACC_PROTECTED, ACC_FINAL\n     Code:\n       stack=4, locals=4, args_size=3\n          0: iload_1\n          1: ifle          12\n          4: iload_1\n          5: aload_0\n-         6: getfield      #14                 // Field writeIndex:I\n+         6: getfield      #47                 // Field writeIndex:I\n          9: if_icmple     22\n-        12: new           #8                  // class java/lang/IllegalArgumentException\n+        12: new           #30                 // class java/lang/IllegalArgumentException\n         15: dup\n-        16: ldc           #32                 // String offset must be bigger than 0 but not bigger than the number of bytes available for back-references\n-        18: invokespecial #10                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        16: ldc           #107                // String offset must be bigger than 0 but not bigger than the number of bytes available for back-references\n+        18: invokespecial #34                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         21: athrow\n         22: lload_2\n         23: lconst_0\n         24: lcmp\n         25: ifge          38\n-        28: new           #8                  // class java/lang/IllegalArgumentException\n+        28: new           #30                 // class java/lang/IllegalArgumentException\n         31: dup\n-        32: ldc           #33                 // String length must not be negative\n-        34: invokespecial #10                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        32: ldc           #109                // String length must not be negative\n+        34: invokespecial #34                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         37: athrow\n         38: aload_0\n         39: iload_1\n-        40: putfield      #34                 // Field backReferenceOffset:I\n+        40: putfield      #111                // Field backReferenceOffset:I\n         43: aload_0\n         44: lload_2\n-        45: putfield      #15                 // Field bytesRemaining:J\n+        45: putfield      #50                 // Field bytesRemaining:J\n         48: return\n       LineNumberTable:\n         line 292: 0\n         line 293: 12\n         line 296: 22\n         line 297: 28\n         line 299: 38\n@@ -696,22 +696,22 @@\n     flags: (0x0014) ACC_PROTECTED, ACC_FINAL\n     Code:\n       stack=4, locals=3, args_size=2\n          0: lload_1\n          1: lconst_0\n          2: lcmp\n          3: ifge          16\n-         6: new           #8                  // class java/lang/IllegalArgumentException\n+         6: new           #30                 // class java/lang/IllegalArgumentException\n          9: dup\n-        10: ldc           #33                 // String length must not be negative\n-        12: invokespecial #10                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n+        10: ldc           #109                // String length must not be negative\n+        12: invokespecial #34                 // Method java/lang/IllegalArgumentException.\"<init>\":(Ljava/lang/String;)V\n         15: athrow\n         16: aload_0\n         17: lload_1\n-        18: putfield      #15                 // Field bytesRemaining:J\n+        18: putfield      #50                 // Field bytesRemaining:J\n         21: return\n       LineNumberTable:\n         line 310: 0\n         line 311: 6\n         line 313: 16\n         line 314: 21\n       StackMapTable: number_of_entries = 1\n@@ -721,149 +721,149 @@\n     descriptor: (I)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=5, args_size=2\n          0: iload_1\n          1: i2l\n          2: aload_0\n-         3: getfield      #15                 // Field bytesRemaining:J\n-         6: invokestatic  #35                 // Method java/lang/Math.min:(JJ)J\n+         3: getfield      #50                 // Field bytesRemaining:J\n+         6: invokestatic  #114                // Method java/lang/Math.min:(JJ)J\n          9: l2i\n         10: aload_0\n-        11: getfield      #12                 // Field buf:[B\n+        11: getfield      #41                 // Field buf:[B\n         14: arraylength\n         15: aload_0\n-        16: getfield      #14                 // Field writeIndex:I\n+        16: getfield      #47                 // Field writeIndex:I\n         19: isub\n-        20: invokestatic  #22                 // Method java/lang/Math.min:(II)I\n+        20: invokestatic  #69                 // Method java/lang/Math.min:(II)I\n         23: istore_2\n         24: iload_2\n         25: ifne          31\n         28: goto          243\n         31: aload_0\n-        32: getfield      #34                 // Field backReferenceOffset:I\n+        32: getfield      #111                // Field backReferenceOffset:I\n         35: iconst_1\n         36: if_icmpne     82\n         39: aload_0\n-        40: getfield      #12                 // Field buf:[B\n+        40: getfield      #41                 // Field buf:[B\n         43: aload_0\n-        44: getfield      #14                 // Field writeIndex:I\n+        44: getfield      #47                 // Field writeIndex:I\n         47: iconst_1\n         48: isub\n         49: baload\n         50: istore_3\n         51: aload_0\n-        52: getfield      #12                 // Field buf:[B\n+        52: getfield      #41                 // Field buf:[B\n         55: aload_0\n-        56: getfield      #14                 // Field writeIndex:I\n+        56: getfield      #47                 // Field writeIndex:I\n         59: aload_0\n-        60: getfield      #14                 // Field writeIndex:I\n+        60: getfield      #47                 // Field writeIndex:I\n         63: iload_2\n         64: iadd\n         65: iload_3\n-        66: invokestatic  #36                 // Method java/util/Arrays.fill:([BIIB)V\n+        66: invokestatic  #117                // Method java/util/Arrays.fill:([BIIB)V\n         69: aload_0\n         70: dup\n-        71: getfield      #14                 // Field writeIndex:I\n+        71: getfield      #47                 // Field writeIndex:I\n         74: iload_2\n         75: iadd\n-        76: putfield      #14                 // Field writeIndex:I\n+        76: putfield      #47                 // Field writeIndex:I\n         79: goto          243\n         82: iload_2\n         83: aload_0\n-        84: getfield      #34                 // Field backReferenceOffset:I\n+        84: getfield      #111                // Field backReferenceOffset:I\n         87: if_icmpge     128\n         90: aload_0\n-        91: getfield      #12                 // Field buf:[B\n+        91: getfield      #41                 // Field buf:[B\n         94: aload_0\n-        95: getfield      #14                 // Field writeIndex:I\n+        95: getfield      #47                 // Field writeIndex:I\n         98: aload_0\n-        99: getfield      #34                 // Field backReferenceOffset:I\n+        99: getfield      #111                // Field backReferenceOffset:I\n        102: isub\n        103: aload_0\n-       104: getfield      #12                 // Field buf:[B\n+       104: getfield      #41                 // Field buf:[B\n        107: aload_0\n-       108: getfield      #14                 // Field writeIndex:I\n+       108: getfield      #47                 // Field writeIndex:I\n        111: iload_2\n-       112: invokestatic  #23                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+       112: invokestatic  #75                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n        115: aload_0\n        116: dup\n-       117: getfield      #14                 // Field writeIndex:I\n+       117: getfield      #47                 // Field writeIndex:I\n        120: iload_2\n        121: iadd\n-       122: putfield      #14                 // Field writeIndex:I\n+       122: putfield      #47                 // Field writeIndex:I\n        125: goto          243\n        128: iload_2\n        129: aload_0\n-       130: getfield      #34                 // Field backReferenceOffset:I\n+       130: getfield      #111                // Field backReferenceOffset:I\n        133: idiv\n        134: istore_3\n        135: iconst_0\n        136: istore        4\n        138: iload         4\n        140: iload_3\n        141: if_icmpge     191\n        144: aload_0\n-       145: getfield      #12                 // Field buf:[B\n+       145: getfield      #41                 // Field buf:[B\n        148: aload_0\n-       149: getfield      #14                 // Field writeIndex:I\n+       149: getfield      #47                 // Field writeIndex:I\n        152: aload_0\n-       153: getfield      #34                 // Field backReferenceOffset:I\n+       153: getfield      #111                // Field backReferenceOffset:I\n        156: isub\n        157: aload_0\n-       158: getfield      #12                 // Field buf:[B\n+       158: getfield      #41                 // Field buf:[B\n        161: aload_0\n-       162: getfield      #14                 // Field writeIndex:I\n+       162: getfield      #47                 // Field writeIndex:I\n        165: aload_0\n-       166: getfield      #34                 // Field backReferenceOffset:I\n-       169: invokestatic  #23                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+       166: getfield      #111                // Field backReferenceOffset:I\n+       169: invokestatic  #75                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n        172: aload_0\n        173: dup\n-       174: getfield      #14                 // Field writeIndex:I\n+       174: getfield      #47                 // Field writeIndex:I\n        177: aload_0\n-       178: getfield      #34                 // Field backReferenceOffset:I\n+       178: getfield      #111                // Field backReferenceOffset:I\n        181: iadd\n-       182: putfield      #14                 // Field writeIndex:I\n+       182: putfield      #47                 // Field writeIndex:I\n        185: iinc          4, 1\n        188: goto          138\n        191: iload_2\n        192: aload_0\n-       193: getfield      #34                 // Field backReferenceOffset:I\n+       193: getfield      #111                // Field backReferenceOffset:I\n        196: iload_3\n        197: imul\n        198: isub\n        199: istore        4\n        201: iload         4\n        203: ifle          243\n        206: aload_0\n-       207: getfield      #12                 // Field buf:[B\n+       207: getfield      #41                 // Field buf:[B\n        210: aload_0\n-       211: getfield      #14                 // Field writeIndex:I\n+       211: getfield      #47                 // Field writeIndex:I\n        214: aload_0\n-       215: getfield      #34                 // Field backReferenceOffset:I\n+       215: getfield      #111                // Field backReferenceOffset:I\n        218: isub\n        219: aload_0\n-       220: getfield      #12                 // Field buf:[B\n+       220: getfield      #41                 // Field buf:[B\n        223: aload_0\n-       224: getfield      #14                 // Field writeIndex:I\n+       224: getfield      #47                 // Field writeIndex:I\n        227: iload         4\n-       229: invokestatic  #23                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+       229: invokestatic  #75                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n        232: aload_0\n        233: dup\n-       234: getfield      #14                 // Field writeIndex:I\n+       234: getfield      #47                 // Field writeIndex:I\n        237: iload         4\n        239: iadd\n-       240: putfield      #14                 // Field writeIndex:I\n+       240: putfield      #47                 // Field writeIndex:I\n        243: aload_0\n        244: dup\n-       245: getfield      #15                 // Field bytesRemaining:J\n+       245: getfield      #50                 // Field bytesRemaining:J\n        248: iload_2\n        249: i2l\n        250: lsub\n-       251: putfield      #15                 // Field bytesRemaining:J\n+       251: putfield      #50                 // Field bytesRemaining:J\n        254: return\n       LineNumberTable:\n         line 319: 0\n         line 321: 24\n         line 323: 31\n         line 324: 39\n         line 325: 51\n@@ -900,62 +900,62 @@\n     descriptor: (I)V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=5, locals=4, args_size=2\n          0: iload_1\n          1: i2l\n          2: aload_0\n-         3: getfield      #15                 // Field bytesRemaining:J\n-         6: invokestatic  #35                 // Method java/lang/Math.min:(JJ)J\n+         3: getfield      #50                 // Field bytesRemaining:J\n+         6: invokestatic  #114                // Method java/lang/Math.min:(JJ)J\n          9: l2i\n         10: aload_0\n-        11: getfield      #12                 // Field buf:[B\n+        11: getfield      #41                 // Field buf:[B\n         14: arraylength\n         15: aload_0\n-        16: getfield      #14                 // Field writeIndex:I\n+        16: getfield      #47                 // Field writeIndex:I\n         19: isub\n-        20: invokestatic  #22                 // Method java/lang/Math.min:(II)I\n+        20: invokestatic  #69                 // Method java/lang/Math.min:(II)I\n         23: istore_2\n         24: iload_2\n         25: ifle          47\n         28: aload_0\n-        29: getfield      #7                  // Field in:Lorg/apache/commons/compress/utils/CountingInputStream;\n+        29: getfield      #26                 // Field in:Lorg/apache/commons/compress/utils/CountingInputStream;\n         32: aload_0\n-        33: getfield      #12                 // Field buf:[B\n+        33: getfield      #41                 // Field buf:[B\n         36: aload_0\n-        37: getfield      #14                 // Field writeIndex:I\n+        37: getfield      #47                 // Field writeIndex:I\n         40: iload_2\n-        41: invokestatic  #37                 // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[BII)I\n+        41: invokestatic  #123                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/io/InputStream;[BII)I\n         44: goto          48\n         47: iconst_0\n         48: istore_3\n         49: aload_0\n         50: iload_3\n-        51: invokevirtual #31                 // Method count:(I)V\n+        51: invokevirtual #104                // Method count:(I)V\n         54: iload_2\n         55: iload_3\n         56: if_icmpeq     69\n-        59: new           #38                 // class java/io/IOException\n+        59: new           #129                // class java/io/IOException\n         62: dup\n-        63: ldc           #39                 // String Premature end of stream reading literal\n-        65: invokespecial #40                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        63: ldc           #131                // String Premature end of stream reading literal\n+        65: invokespecial #133                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         68: athrow\n         69: aload_0\n         70: dup\n-        71: getfield      #14                 // Field writeIndex:I\n+        71: getfield      #47                 // Field writeIndex:I\n         74: iload_2\n         75: iadd\n-        76: putfield      #14                 // Field writeIndex:I\n+        76: putfield      #47                 // Field writeIndex:I\n         79: aload_0\n         80: dup\n-        81: getfield      #15                 // Field bytesRemaining:J\n+        81: getfield      #50                 // Field bytesRemaining:J\n         84: iload_2\n         85: i2l\n         86: lsub\n-        87: putfield      #15                 // Field bytesRemaining:J\n+        87: putfield      #50                 // Field bytesRemaining:J\n         90: return\n       LineNumberTable:\n         line 351: 0\n         line 353: 24\n         line 354: 28\n         line 355: 47\n         line 356: 49\n@@ -973,16 +973,16 @@\n         frame_type = 252 /* append */\n           offset_delta = 20\n           locals = [ int ]\n     Exceptions:\n       throws java.io.IOException\n }\n SourceFile: \"AbstractLZ77CompressorInputStream.java\"\n-InnerClasses:\n-  public static #59= #58 of #145;         // ByteSupplier=class org/apache/commons/compress/utils/ByteUtils$ByteSupplier of class org/apache/commons/compress/utils/ByteUtils\n-  public static final #176= #175 of #178; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n BootstrapMethods:\n-  0: #99 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n+  0: #159 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n     Method arguments:\n-      #100 ()I\n-      #101 REF_invokeVirtual org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.readOneByte:()I\n-      #100 ()I\n+      #166 ()I\n+      #167 REF_invokeVirtual org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.readOneByte:()I\n+      #166 ()I\n+InnerClasses:\n+  public static #175= #171 of #173;       // ByteSupplier=class org/apache/commons/compress/utils/ByteUtils$ByteSupplier of class org/apache/commons/compress/utils/ByteUtils\n+  public static final #180= #176 of #178; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n"}]}
