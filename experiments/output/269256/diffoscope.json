{"diffoscope-json-version": 1, "source1": "first/SuppressionCommentFilter.class", "source2": "second/SuppressionCommentFilter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,15 +1,15 @@\n \n package com.puppycrawl.tools.checkstyle.filters;\n \n import java.util.regex.Matcher;\n-import com.puppycrawl.tools.checkstyle.api.TextBlock;\n-import java.util.Collection;\n import java.util.Collections;\n import java.util.function.Consumer;\n+import com.puppycrawl.tools.checkstyle.api.TextBlock;\n+import java.util.Collection;\n import java.util.Iterator;\n import com.puppycrawl.tools.checkstyle.TreeWalkerAuditEvent;\n import java.util.ArrayList;\n import com.puppycrawl.tools.checkstyle.api.FileContents;\n import java.lang.ref.WeakReference;\n import com.puppycrawl.tools.checkstyle.PropertyType;\n import com.puppycrawl.tools.checkstyle.XdocsPropertyType;\n@@ -42,120 +42,118 @@\n         this.checkCPP = true;\n         this.offCommentFormat = Pattern.compile(\"CHECKSTYLE:OFF\");\n         this.onCommentFormat = Pattern.compile(\"CHECKSTYLE:ON\");\n         this.checkFormat = \".*\";\n         this.fileContentsReference = new WeakReference<FileContents>(null);\n     }\n     \n-    public final void setOffCommentFormat(final Pattern pattern) {\n-        this.offCommentFormat = pattern;\n+    public final void setOffCommentFormat(final Pattern offCommentFormat) {\n+        this.offCommentFormat = offCommentFormat;\n     }\n     \n-    public final void setOnCommentFormat(final Pattern pattern) {\n-        this.onCommentFormat = pattern;\n+    public final void setOnCommentFormat(final Pattern onCommentFormat) {\n+        this.onCommentFormat = onCommentFormat;\n     }\n     \n     private FileContents getFileContents() {\n         return this.fileContentsReference.get();\n     }\n     \n-    public void setFileContents(final FileContents fileContents) {\n-        this.fileContentsReference = new WeakReference<FileContents>(fileContents);\n+    public void setFileContents(final FileContents referent) {\n+        this.fileContentsReference = new WeakReference<FileContents>(referent);\n     }\n     \n-    public final void setCheckFormat(final String format) {\n-        this.checkFormat = format;\n+    public final void setCheckFormat(final String checkFormat) {\n+        this.checkFormat = checkFormat;\n     }\n     \n-    public void setMessageFormat(final String format) {\n-        this.messageFormat = format;\n+    public void setMessageFormat(final String messageFormat) {\n+        this.messageFormat = messageFormat;\n     }\n     \n-    public void setIdFormat(final String format) {\n-        this.idFormat = format;\n+    public void setIdFormat(final String idFormat) {\n+        this.idFormat = idFormat;\n     }\n     \n-    public void setCheckCPP(final boolean checkCpp) {\n-        this.checkCPP = checkCpp;\n+    public void setCheckCPP(final boolean checkCPP) {\n+        this.checkCPP = checkCPP;\n     }\n     \n     public void setCheckC(final boolean checkC) {\n         this.checkC = checkC;\n     }\n     \n     protected void finishLocalSetup() {\n     }\n     \n-    public boolean accept(final TreeWalkerAuditEvent event) {\n-        boolean accepted = true;\n-        if (event.getViolation() != null) {\n-            final FileContents currentContents = event.getFileContents();\n-            if (this.getFileContents() != currentContents) {\n-                this.setFileContents(currentContents);\n+    public boolean accept(final TreeWalkerAuditEvent treeWalkerAuditEvent) {\n+        boolean b = true;\n+        if (treeWalkerAuditEvent.getViolation() != null) {\n+            final FileContents fileContents = treeWalkerAuditEvent.getFileContents();\n+            if (this.getFileContents() != fileContents) {\n+                this.setFileContents(fileContents);\n                 this.tagSuppressions();\n             }\n-            final SuppressionCommentFilter.Tag matchTag = this.findNearestMatch(event);\n-            accepted = (matchTag == null || matchTag.getTagType() == SuppressionCommentFilter.TagType.ON);\n+            final SuppressionCommentFilter.Tag nearestMatch = this.findNearestMatch(treeWalkerAuditEvent);\n+            b = (nearestMatch == null || nearestMatch.getTagType() == SuppressionCommentFilter.TagType.ON);\n         }\n-        return accepted;\n+        return b;\n     }\n     \n-    private SuppressionCommentFilter.Tag findNearestMatch(final TreeWalkerAuditEvent event) {\n-        SuppressionCommentFilter.Tag result = null;\n-        for (final SuppressionCommentFilter.Tag tag : this.tags) {\n-            final int eventLine = event.getLine();\n-            if (tag.getLine() > eventLine) {\n+    private SuppressionCommentFilter.Tag findNearestMatch(final TreeWalkerAuditEvent treeWalkerAuditEvent) {\n+        SuppressionCommentFilter.Tag tag = null;\n+        for (final SuppressionCommentFilter.Tag tag2 : this.tags) {\n+            final int line = treeWalkerAuditEvent.getLine();\n+            if (tag2.getLine() > line) {\n                 break;\n             }\n-            if (tag.getLine() == eventLine && tag.getColumn() > event.getColumn()) {\n+            if (tag2.getLine() == line && tag2.getColumn() > treeWalkerAuditEvent.getColumn()) {\n                 break;\n             }\n-            if (!tag.isMatch(event)) {\n+            if (!tag2.isMatch(treeWalkerAuditEvent)) {\n                 continue;\n             }\n-            result = tag;\n+            tag = tag2;\n         }\n-        return result;\n+        return tag;\n     }\n     \n     private void tagSuppressions() {\n         this.tags.clear();\n-        final FileContents contents = this.getFileContents();\n+        final FileContents fileContents = this.getFileContents();\n         if (this.checkCPP) {\n-            this.tagSuppressions(contents.getSingleLineComments().values());\n+            this.tagSuppressions(fileContents.getSingleLineComments().values());\n         }\n         if (this.checkC) {\n-            final Collection<List<TextBlock>> cComments = contents.getBlockComments().values();\n-            cComments.forEach(this::tagSuppressions);\n+            fileContents.getBlockComments().values().forEach(this::tagSuppressions);\n         }\n         Collections.sort(this.tags);\n     }\n     \n-    private void tagSuppressions(final Collection<TextBlock> comments) {\n-        for (final TextBlock comment : comments) {\n-            final int startLineNo = comment.getStartLineNo();\n-            final String[] text = comment.getText();\n-            this.tagCommentLine(text[0], startLineNo, comment.getStartColNo());\n+    private void tagSuppressions(final Collection<TextBlock> collection) {\n+        for (final TextBlock textBlock : collection) {\n+            final int startLineNo = textBlock.getStartLineNo();\n+            final String[] text = textBlock.getText();\n+            this.tagCommentLine(text[0], startLineNo, textBlock.getStartColNo());\n             for (int i = 1; i < text.length; ++i) {\n                 this.tagCommentLine(text[i], startLineNo + i, 0);\n             }\n         }\n     }\n     \n-    private void tagCommentLine(final String text, final int line, final int column) {\n-        final Matcher offMatcher = this.offCommentFormat.matcher(text);\n-        if (offMatcher.find()) {\n-            this.addTag(offMatcher.group(0), line, column, SuppressionCommentFilter.TagType.OFF);\n+    private void tagCommentLine(final String s, final int n, final int n2) {\n+        final Matcher matcher = this.offCommentFormat.matcher(s);\n+        if (matcher.find()) {\n+            this.addTag(matcher.group(0), n, n2, SuppressionCommentFilter.TagType.OFF);\n         }\n         else {\n-            final Matcher onMatcher = this.onCommentFormat.matcher(text);\n-            if (onMatcher.find()) {\n-                this.addTag(onMatcher.group(0), line, column, SuppressionCommentFilter.TagType.ON);\n+            final Matcher matcher2 = this.onCommentFormat.matcher(s);\n+            if (matcher2.find()) {\n+                this.addTag(matcher2.group(0), n, n2, SuppressionCommentFilter.TagType.ON);\n             }\n         }\n     }\n     \n-    private void addTag(final String text, final int line, final int column, final SuppressionCommentFilter.TagType reportingOn) {\n-        final SuppressionCommentFilter.Tag tag = new SuppressionCommentFilter.Tag(line, column, text, reportingOn, this);\n-        this.tags.add(tag);\n+    private void addTag(final String s, final int n, final int n2, final SuppressionCommentFilter.TagType tagType) {\n+        this.tags.add(new SuppressionCommentFilter.Tag(n, n2, s, tagType, this));\n     }\n }\n"}]}
