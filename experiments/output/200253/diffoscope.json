{"diffoscope-json-version": 1, "source1": "first/ClassLoaderRepository.class", "source2": "second/ClassLoaderRepository.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,48 +18,47 @@\n         this.loader = loader;\n     }\n     \n     public void clear() {\n         this.loadedClasses.clear();\n     }\n     \n-    public JavaClass findClass(final String className) {\n-        return this.loadedClasses.get(className);\n+    public JavaClass findClass(final String s) {\n+        return this.loadedClasses.get(s);\n     }\n     \n     public ClassPath getClassPath() {\n         return null;\n     }\n     \n     public JavaClass loadClass(final Class<?> clazz) throws ClassNotFoundException {\n         return this.loadClass(clazz.getName());\n     }\n     \n-    public JavaClass loadClass(final String className) throws ClassNotFoundException {\n-        final String classFile = className.replace('.', '/');\n-        JavaClass RC = this.findClass(className);\n-        if (RC != null) {\n-            return RC;\n+    public JavaClass loadClass(final String s) throws ClassNotFoundException {\n+        final String replace = s.replace('.', '/');\n+        final JavaClass class1 = this.findClass(s);\n+        if (class1 != null) {\n+            return class1;\n         }\n-        try (final InputStream is = this.loader.getResourceAsStream(classFile + \".class\")) {\n-            if (is == null) {\n-                throw new ClassNotFoundException(className + \" not found.\");\n+        try (final InputStream resourceAsStream = this.loader.getResourceAsStream(replace + \".class\")) {\n+            if (resourceAsStream == null) {\n+                throw new ClassNotFoundException(s + \" not found.\");\n             }\n-            final ClassParser parser = new ClassParser(is, className);\n-            RC = parser.parse();\n-            this.storeClass(RC);\n-            return RC;\n+            final JavaClass parse = new ClassParser(resourceAsStream, s).parse();\n+            this.storeClass(parse);\n+            return parse;\n         }\n-        catch (final IOException e) {\n-            throw new ClassNotFoundException(className + \" not found: \" + e, e);\n+        catch (final IOException ex) {\n+            throw new ClassNotFoundException(s + \" not found: \" + ex, ex);\n         }\n     }\n     \n-    public void removeClass(final JavaClass clazz) {\n-        this.loadedClasses.remove(clazz.getClassName());\n+    public void removeClass(final JavaClass javaClass) {\n+        this.loadedClasses.remove(javaClass.getClassName());\n     }\n     \n-    public void storeClass(final JavaClass clazz) {\n-        this.loadedClasses.put(clazz.getClassName(), clazz);\n-        clazz.setRepository((Repository)this);\n+    public void storeClass(final JavaClass javaClass) {\n+        this.loadedClasses.put(javaClass.getClassName(), javaClass);\n+        javaClass.setRepository((Repository)this);\n     }\n }\n"}]}
