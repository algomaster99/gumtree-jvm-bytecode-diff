{"diffoscope-json-version": 1, "source1": "first/IOFunction.class", "source2": "second/IOFunction.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,51 +8,51 @@\n import java.io.IOException;\n \n @FunctionalInterface\n public interface IOFunction<T, R>\n {\n     R apply(final T p0) throws IOException;\n     \n-    default <V> IOFunction<V, R> compose(final IOFunction<? super V, ? extends T> before) {\n-        Objects.requireNonNull(before, \"before\");\n-        return v -> this.apply(before.apply(v));\n+    default <V> IOFunction<V, R> compose(final IOFunction<? super V, ? extends T> obj) {\n+        Objects.requireNonNull(obj, \"before\");\n+        return (IOFunction<V, R>)(o -> this.apply(ioFunction.apply(o)));\n     }\n     \n-    default <V> IOFunction<V, R> compose(final Function<? super V, ? extends T> before) {\n-        Objects.requireNonNull(before, \"before\");\n-        return v -> this.apply(before.apply(v));\n+    default <V> IOFunction<V, R> compose(final Function<? super V, ? extends T> obj) {\n+        Objects.requireNonNull(obj, \"before\");\n+        return (IOFunction<V, R>)(o -> this.apply(function.apply(o)));\n     }\n     \n-    default IOSupplier<R> compose(final IOSupplier<? extends T> before) {\n-        Objects.requireNonNull(before, \"before\");\n-        return (IOSupplier<R>)(() -> this.apply(before.get()));\n+    default IOSupplier<R> compose(final IOSupplier<? extends T> obj) {\n+        Objects.requireNonNull(obj, \"before\");\n+        return (IOSupplier<R>)(() -> this.apply(obj.get()));\n     }\n     \n-    default IOSupplier<R> compose(final Supplier<? extends T> before) {\n-        Objects.requireNonNull(before, \"before\");\n-        return (IOSupplier<R>)(() -> this.apply(before.get()));\n+    default IOSupplier<R> compose(final Supplier<? extends T> obj) {\n+        Objects.requireNonNull(obj, \"before\");\n+        return (IOSupplier<R>)(() -> this.apply(obj.get()));\n     }\n     \n-    default <V> IOFunction<T, V> andThen(final IOFunction<? super R, ? extends V> after) {\n-        Objects.requireNonNull(after, \"after\");\n-        return t -> after.apply(this.apply(t));\n+    default <V> IOFunction<T, V> andThen(final IOFunction<? super R, ? extends V> obj) {\n+        Objects.requireNonNull(obj, \"after\");\n+        return o -> ioFunction.apply(this.apply(o));\n     }\n     \n-    default <V> IOFunction<T, V> andThen(final Function<? super R, ? extends V> after) {\n-        Objects.requireNonNull(after, \"after\");\n-        return t -> after.apply(this.apply(t));\n+    default <V> IOFunction<T, V> andThen(final Function<? super R, ? extends V> obj) {\n+        Objects.requireNonNull(obj, \"after\");\n+        return o -> function.apply(this.apply(o));\n     }\n     \n-    default IOConsumer<T> andThen(final IOConsumer<? super R> after) {\n-        Objects.requireNonNull(after, \"after\");\n-        return (IOConsumer<T>)(t -> after.accept(this.apply(t)));\n+    default IOConsumer<T> andThen(final IOConsumer<? super R> obj) {\n+        Objects.requireNonNull(obj, \"after\");\n+        return (IOConsumer<T>)(o -> obj.accept(this.apply(o)));\n     }\n     \n-    default IOConsumer<T> andThen(final Consumer<? super R> after) {\n-        Objects.requireNonNull(after, \"after\");\n-        return (IOConsumer<T>)(t -> after.accept(this.apply(t)));\n+    default IOConsumer<T> andThen(final Consumer<? super R> obj) {\n+        Objects.requireNonNull(obj, \"after\");\n+        return (IOConsumer<T>)(o -> obj.accept(this.apply(o)));\n     }\n     \n     default <T> IOFunction<T, T> identity() {\n-        return (IOFunction<T, T>)(t -> t);\n+        return (IOFunction<T, T>)(o -> o);\n     }\n }\n"}]}
