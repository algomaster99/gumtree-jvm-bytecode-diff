{"diffoscope-json-version": 1, "source1": "first/InnerClassesAttribute$InnerClassesEntry.class", "source2": "second/InnerClassesAttribute$InnerClassesEntry.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,49 +10,49 @@\n     CPClass outer_class_info;\n     CPUTF8 inner_class_name;\n     int inner_class_info_index;\n     int outer_class_info_index;\n     int inner_name_index;\n     int inner_class_access_flags;\n     \n-    public InnerClassesEntry(final CPClass innerClass, final CPClass outerClass, final CPUTF8 innerName, final int flags) {\n+    public InnerClassesEntry(final CPClass inner_class_info, final CPClass outer_class_info, final CPUTF8 inner_class_name, final int inner_class_access_flags) {\n         this.inner_class_info_index = -1;\n         this.outer_class_info_index = -1;\n         this.inner_name_index = -1;\n         this.inner_class_access_flags = -1;\n-        this.inner_class_info = innerClass;\n-        this.outer_class_info = outerClass;\n-        this.inner_class_name = innerName;\n-        this.inner_class_access_flags = flags;\n+        this.inner_class_info = inner_class_info;\n+        this.outer_class_info = outer_class_info;\n+        this.inner_class_name = inner_class_name;\n+        this.inner_class_access_flags = inner_class_access_flags;\n     }\n     \n-    public void resolve(final ClassConstantPool pool) {\n+    public void resolve(final ClassConstantPool classConstantPool) {\n         if (this.inner_class_info != null) {\n-            this.inner_class_info.resolve(pool);\n-            this.inner_class_info_index = pool.indexOf((ClassFileEntry)this.inner_class_info);\n+            this.inner_class_info.resolve(classConstantPool);\n+            this.inner_class_info_index = classConstantPool.indexOf((ClassFileEntry)this.inner_class_info);\n         }\n         else {\n             this.inner_class_info_index = 0;\n         }\n         if (this.inner_class_name != null) {\n-            this.inner_class_name.resolve(pool);\n-            this.inner_name_index = pool.indexOf((ClassFileEntry)this.inner_class_name);\n+            this.inner_class_name.resolve(classConstantPool);\n+            this.inner_name_index = classConstantPool.indexOf((ClassFileEntry)this.inner_class_name);\n         }\n         else {\n             this.inner_name_index = 0;\n         }\n         if (this.outer_class_info != null) {\n-            this.outer_class_info.resolve(pool);\n-            this.outer_class_info_index = pool.indexOf((ClassFileEntry)this.outer_class_info);\n+            this.outer_class_info.resolve(classConstantPool);\n+            this.outer_class_info_index = classConstantPool.indexOf((ClassFileEntry)this.outer_class_info);\n         }\n         else {\n             this.outer_class_info_index = 0;\n         }\n     }\n     \n-    public void write(final DataOutputStream dos) throws IOException {\n-        dos.writeShort(this.inner_class_info_index);\n-        dos.writeShort(this.outer_class_info_index);\n-        dos.writeShort(this.inner_name_index);\n-        dos.writeShort(this.inner_class_access_flags);\n+    public void write(final DataOutputStream dataOutputStream) throws IOException {\n+        dataOutputStream.writeShort(this.inner_class_info_index);\n+        dataOutputStream.writeShort(this.outer_class_info_index);\n+        dataOutputStream.writeShort(this.inner_name_index);\n+        dataOutputStream.writeShort(this.inner_class_access_flags);\n     }\n }\n"}]}
