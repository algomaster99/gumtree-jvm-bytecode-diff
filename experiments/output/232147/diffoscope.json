{"diffoscope-json-version": 1, "source1": "first/XMLListReference.class", "source2": "second/XMLListReference.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -12,74 +12,74 @@\n import java.util.Map;\n import org.w3c.dom.Element;\n \n final class XMLListReference\n {\n     private final Element element;\n     \n-    private XMLListReference(final Element e) {\n-        this.element = e;\n+    private XMLListReference(final Element element) {\n+        this.element = element;\n     }\n     \n     public Element getElement() {\n         return this.element;\n     }\n     \n-    public static void assignListReference(final Map<ImmutableNode, Object> refs, final ImmutableNode node, final Element elem) {\n-        if (refs != null) {\n-            refs.put(node, new XMLListReference(elem));\n+    public static void assignListReference(final Map<ImmutableNode, Object> map, final ImmutableNode immutableNode, final Element element) {\n+        if (map != null) {\n+            map.put(immutableNode, new XMLListReference(element));\n         }\n     }\n     \n-    public static boolean isListNode(final ImmutableNode node, final ReferenceNodeHandler handler) {\n-        if (hasListReference(node, handler)) {\n+    public static boolean isListNode(final ImmutableNode immutableNode, final ReferenceNodeHandler referenceNodeHandler) {\n+        if (hasListReference(immutableNode, referenceNodeHandler)) {\n             return true;\n         }\n-        final ImmutableNode parent = (ImmutableNode)handler.getParent((Object)node);\n-        if (parent != null) {\n-            for (int i = 0; i < handler.getChildrenCount((Object)parent, (String)null); ++i) {\n-                final ImmutableNode child = (ImmutableNode)handler.getChild((Object)parent, i);\n-                if (hasListReference(child, handler) && nameEquals(node, child)) {\n+        final ImmutableNode immutableNode2 = (ImmutableNode)referenceNodeHandler.getParent((Object)immutableNode);\n+        if (immutableNode2 != null) {\n+            for (int i = 0; i < referenceNodeHandler.getChildrenCount((Object)immutableNode2, (String)null); ++i) {\n+                final ImmutableNode immutableNode3 = (ImmutableNode)referenceNodeHandler.getChild((Object)immutableNode2, i);\n+                if (hasListReference(immutableNode3, referenceNodeHandler) && nameEquals(immutableNode, immutableNode3)) {\n                     return true;\n                 }\n             }\n         }\n         return false;\n     }\n     \n-    public static boolean isFirstListItem(final ImmutableNode node, final ReferenceNodeHandler handler) {\n-        final ImmutableNode parent = (ImmutableNode)handler.getParent((Object)node);\n-        ImmutableNode firstItem = null;\n-        int idx = 0;\n-        while (firstItem == null) {\n-            final ImmutableNode child = (ImmutableNode)handler.getChild((Object)parent, idx);\n-            if (nameEquals(node, child)) {\n-                firstItem = child;\n+    public static boolean isFirstListItem(final ImmutableNode immutableNode, final ReferenceNodeHandler referenceNodeHandler) {\n+        final ImmutableNode immutableNode2 = (ImmutableNode)referenceNodeHandler.getParent((Object)immutableNode);\n+        ImmutableNode immutableNode3 = null;\n+        int n = 0;\n+        while (immutableNode3 == null) {\n+            final ImmutableNode immutableNode4 = (ImmutableNode)referenceNodeHandler.getChild((Object)immutableNode2, n);\n+            if (nameEquals(immutableNode, immutableNode4)) {\n+                immutableNode3 = immutableNode4;\n             }\n-            ++idx;\n+            ++n;\n         }\n-        return firstItem == node;\n+        return immutableNode3 == immutableNode;\n     }\n     \n-    public static String listValue(final ImmutableNode node, final ReferenceNodeHandler nodeHandler, final ListDelimiterHandler delimiterHandler) {\n-        final ImmutableNode parent = (ImmutableNode)nodeHandler.getParent((Object)node);\n-        final List<ImmutableNode> items = nodeHandler.getChildren((Object)parent, node.getNodeName());\n-        final List<Object> values = new ArrayList<Object>(items.size());\n-        for (final ImmutableNode n : items) {\n-            values.add(n.getValue());\n+    public static String listValue(final ImmutableNode immutableNode, final ReferenceNodeHandler referenceNodeHandler, final ListDelimiterHandler listDelimiterHandler) {\n+        final List children = referenceNodeHandler.getChildren((Object)referenceNodeHandler.getParent((Object)immutableNode), immutableNode.getNodeName());\n+        final ArrayList list = new ArrayList(children.size());\n+        final Iterator iterator = children.iterator();\n+        while (iterator.hasNext()) {\n+            list.add(((ImmutableNode)iterator.next()).getValue());\n         }\n         try {\n-            return String.valueOf(delimiterHandler.escapeList((List)values, ListDelimiterHandler.NOOP_TRANSFORMER));\n+            return String.valueOf(listDelimiterHandler.escapeList((List)list, ListDelimiterHandler.NOOP_TRANSFORMER));\n         }\n-        catch (final UnsupportedOperationException e) {\n-            throw new ConfigurationRuntimeException(\"List handling not supported by the current ListDelimiterHandler! Make sure that the same delimiter handler is used for loading and saving the configuration.\", (Throwable)e);\n+        catch (final UnsupportedOperationException ex) {\n+            throw new ConfigurationRuntimeException(\"List handling not supported by the current ListDelimiterHandler! Make sure that the same delimiter handler is used for loading and saving the configuration.\", (Throwable)ex);\n         }\n     }\n     \n-    private static boolean hasListReference(final ImmutableNode node, final ReferenceNodeHandler handler) {\n-        return handler.getReference(node) instanceof XMLListReference;\n+    private static boolean hasListReference(final ImmutableNode immutableNode, final ReferenceNodeHandler referenceNodeHandler) {\n+        return referenceNodeHandler.getReference(immutableNode) instanceof XMLListReference;\n     }\n     \n-    private static boolean nameEquals(final ImmutableNode n1, final ImmutableNode n2) {\n-        return StringUtils.equals((CharSequence)n2.getNodeName(), (CharSequence)n1.getNodeName());\n+    private static boolean nameEquals(final ImmutableNode immutableNode, final ImmutableNode immutableNode2) {\n+        return StringUtils.equals((CharSequence)immutableNode2.getNodeName(), (CharSequence)immutableNode.getNodeName());\n     }\n }\n"}]}
