{"diffoscope-json-version": 1, "source1": "first/StringEscapeUtils$CsvUnescaper.class", "source2": "second/StringEscapeUtils$CsvUnescaper.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,30 +8,30 @@\n static class CsvUnescaper extends CharSequenceTranslator\n {\n     private static final char CSV_DELIMITER = ',';\n     private static final char CSV_QUOTE = '\\\"';\n     private static final String CSV_QUOTE_STR;\n     private static final char[] CSV_SEARCH_CHARS;\n     \n+    static {\n+        CsvUnescaper.CSV_QUOTE_STR = String.valueOf('\\\"');\n+        CsvUnescaper.CSV_SEARCH_CHARS = new char[] { ',', '\\\"', '\\r', '\\n' };\n+    }\n+    \n     public int translate(final CharSequence input, final int index, final Writer out) throws IOException {\n         if (index != 0) {\n             throw new IllegalStateException(\"CsvUnescaper should never reach the [1] index\");\n         }\n         if (input.charAt(0) != '\\\"' || input.charAt(input.length() - 1) != '\\\"') {\n             out.write(input.toString());\n             return Character.codePointCount(input, 0, input.length());\n         }\n         final String quoteless = input.subSequence(1, input.length() - 1).toString();\n         if (StringUtils.containsAny((CharSequence)quoteless, CsvUnescaper.CSV_SEARCH_CHARS)) {\n-            out.write(StringUtils.replace(quoteless, CsvUnescaper.CSV_QUOTE_STR + CsvUnescaper.CSV_QUOTE_STR, CsvUnescaper.CSV_QUOTE_STR));\n+            out.write(StringUtils.replace(quoteless, String.valueOf(CsvUnescaper.CSV_QUOTE_STR) + CsvUnescaper.CSV_QUOTE_STR, CsvUnescaper.CSV_QUOTE_STR));\n         }\n         else {\n             out.write(input.toString());\n         }\n         return Character.codePointCount(input, 0, input.length());\n     }\n-    \n-    static {\n-        CsvUnescaper.CSV_QUOTE_STR = String.valueOf('\\\"');\n-        CsvUnescaper.CSV_SEARCH_CHARS = new char[] { ',', '\\\"', '\\r', '\\n' };\n-    }\n }\n"}]}
