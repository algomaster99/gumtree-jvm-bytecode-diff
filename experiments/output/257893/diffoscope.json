{"diffoscope-json-version": 1, "source1": "first/DefaultConfigurationKey.class", "source2": "second/DefaultConfigurationKey.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,203 +5,196 @@\n \n public class DefaultConfigurationKey\n {\n     private static final int INITIAL_SIZE = 32;\n     private final DefaultExpressionEngine expressionEngine;\n     private final StringBuilder keyBuffer;\n     \n-    public DefaultConfigurationKey(final DefaultExpressionEngine engine) {\n-        this(engine, null);\n+    public DefaultConfigurationKey(final DefaultExpressionEngine defaultExpressionEngine) {\n+        this(defaultExpressionEngine, null);\n     }\n     \n-    public DefaultConfigurationKey(final DefaultExpressionEngine engine, final String key) {\n-        if (engine == null) {\n+    public DefaultConfigurationKey(final DefaultExpressionEngine expressionEngine, final String s) {\n+        if (expressionEngine == null) {\n             throw new IllegalArgumentException(\"Expression engine must not be null!\");\n         }\n-        this.expressionEngine = engine;\n-        if (key != null) {\n-            this.keyBuffer = new StringBuilder(this.trim(key));\n+        this.expressionEngine = expressionEngine;\n+        if (s != null) {\n+            this.keyBuffer = new StringBuilder(this.trim(s));\n         }\n         else {\n             this.keyBuffer = new StringBuilder(32);\n         }\n     }\n     \n     public DefaultExpressionEngine getExpressionEngine() {\n         return this.expressionEngine;\n     }\n     \n-    public DefaultConfigurationKey append(final String property, final boolean escape) {\n-        String key;\n-        if (escape && property != null) {\n-            key = this.escapeDelimiters(property);\n+    public DefaultConfigurationKey append(final String s, final boolean b) {\n+        String escapeDelimiters;\n+        if (b && s != null) {\n+            escapeDelimiters = this.escapeDelimiters(s);\n         }\n         else {\n-            key = property;\n+            escapeDelimiters = s;\n         }\n-        key = this.trim(key);\n-        if (this.keyBuffer.length() > 0 && !this.isAttributeKey(property) && !key.isEmpty()) {\n+        final String trim = this.trim(escapeDelimiters);\n+        if (this.keyBuffer.length() > 0 && !this.isAttributeKey(s) && !trim.isEmpty()) {\n             this.keyBuffer.append(this.getSymbols().getPropertyDelimiter());\n         }\n-        this.keyBuffer.append(key);\n+        this.keyBuffer.append(trim);\n         return this;\n     }\n     \n-    public DefaultConfigurationKey append(final String property) {\n-        return this.append(property, false);\n+    public DefaultConfigurationKey append(final String s) {\n+        return this.append(s, false);\n     }\n     \n-    public DefaultConfigurationKey appendIndex(final int index) {\n+    public DefaultConfigurationKey appendIndex(final int i) {\n         this.keyBuffer.append(this.getSymbols().getIndexStart());\n-        this.keyBuffer.append(index);\n+        this.keyBuffer.append(i);\n         this.keyBuffer.append(this.getSymbols().getIndexEnd());\n         return this;\n     }\n     \n-    public DefaultConfigurationKey appendAttribute(final String attr) {\n-        this.keyBuffer.append(this.constructAttributeKey(attr));\n+    public DefaultConfigurationKey appendAttribute(final String s) {\n+        this.keyBuffer.append(this.constructAttributeKey(s));\n         return this;\n     }\n     \n     public int length() {\n         return this.keyBuffer.length();\n     }\n     \n-    public void setLength(final int len) {\n+    public void setLength(final int length) {\n         this.keyBuffer.setLength();\n     }\n     \n-    public DefaultConfigurationKey commonKey(final DefaultConfigurationKey other) {\n-        if (other == null) {\n+    public DefaultConfigurationKey commonKey(final DefaultConfigurationKey defaultConfigurationKey) {\n+        if (defaultConfigurationKey == null) {\n             throw new IllegalArgumentException(\"Other key must no be null!\");\n         }\n-        final DefaultConfigurationKey result = new DefaultConfigurationKey(this.getExpressionEngine());\n-        final DefaultConfigurationKey.KeyIterator it1 = this.iterator();\n-        final DefaultConfigurationKey.KeyIterator it2 = other.iterator();\n-        while (it1.hasNext() && it2.hasNext() && partsEqual(it1, it2)) {\n-            if (it1.isAttribute()) {\n-                result.appendAttribute(it1.currentKey());\n+        final DefaultConfigurationKey defaultConfigurationKey2 = new DefaultConfigurationKey(this.getExpressionEngine());\n+        final DefaultConfigurationKey.KeyIterator iterator = this.iterator();\n+        final DefaultConfigurationKey.KeyIterator iterator2 = defaultConfigurationKey.iterator();\n+        while (iterator.hasNext() && iterator2.hasNext() && partsEqual(iterator, iterator2)) {\n+            if (iterator.isAttribute()) {\n+                defaultConfigurationKey2.appendAttribute(iterator.currentKey());\n             }\n             else {\n-                result.append(it1.currentKey());\n-                if (!DefaultConfigurationKey.KeyIterator.access$000(it1)) {\n+                defaultConfigurationKey2.append(iterator.currentKey());\n+                if (!DefaultConfigurationKey.KeyIterator.access$000(iterator)) {\n                     continue;\n                 }\n-                result.appendIndex(it1.getIndex());\n+                defaultConfigurationKey2.appendIndex(iterator.getIndex());\n             }\n         }\n-        return result;\n+        return defaultConfigurationKey2;\n     }\n     \n-    public DefaultConfigurationKey differenceKey(final DefaultConfigurationKey other) {\n-        final DefaultConfigurationKey common = this.commonKey(other);\n-        final DefaultConfigurationKey result = new DefaultConfigurationKey(this.getExpressionEngine());\n-        if (common.length() < other.length()) {\n-            String k;\n-            int i;\n-            for (k = other.toString().substring(common.length()), i = 0; i < k.length() && String.valueOf(k.charAt(i)).equals(this.getSymbols().getPropertyDelimiter()); ++i) {}\n-            if (i < k.length()) {\n-                result.append(k.substring(i));\n+    public DefaultConfigurationKey differenceKey(final DefaultConfigurationKey defaultConfigurationKey) {\n+        final DefaultConfigurationKey commonKey = this.commonKey(defaultConfigurationKey);\n+        final DefaultConfigurationKey defaultConfigurationKey2 = new DefaultConfigurationKey(this.getExpressionEngine());\n+        if (commonKey.length() < defaultConfigurationKey.length()) {\n+            String substring;\n+            int n;\n+            for (substring = defaultConfigurationKey.toString().substring(commonKey.length()), n = 0; n < substring.length() && String.valueOf(substring.charAt(n)).equals(this.getSymbols().getPropertyDelimiter()); ++n) {}\n+            if (n < substring.length()) {\n+                defaultConfigurationKey2.append(substring.substring(n));\n             }\n         }\n-        return result;\n+        return defaultConfigurationKey2;\n     }\n     \n     @Override\n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n-            return true;\n-        }\n-        if (!(obj instanceof DefaultConfigurationKey)) {\n-            return false;\n-        }\n-        final DefaultConfigurationKey c = (DefaultConfigurationKey)obj;\n-        return this.keyBuffer.toString().equals(c.toString());\n+    public boolean equals(final Object o) {\n+        return this == o || (o instanceof DefaultConfigurationKey && this.keyBuffer.toString().equals(((DefaultConfigurationKey)o).toString()));\n     }\n     \n     @Override\n     public int hashCode() {\n         return String.valueOf(this.keyBuffer).hashCode();\n     }\n     \n     @Override\n     public String toString() {\n         return this.keyBuffer.toString();\n     }\n     \n-    public boolean isAttributeKey(final String key) {\n-        return key != null && key.startsWith(this.getSymbols().getAttributeStart()) && (this.getSymbols().getAttributeEnd() == null || key.endsWith(this.getSymbols().getAttributeEnd()));\n+    public boolean isAttributeKey(final String s) {\n+        return s != null && s.startsWith(this.getSymbols().getAttributeStart()) && (this.getSymbols().getAttributeEnd() == null || s.endsWith(this.getSymbols().getAttributeEnd()));\n     }\n     \n-    public String constructAttributeKey(final String key) {\n-        if (key == null) {\n+    public String constructAttributeKey(final String str) {\n+        if (str == null) {\n             return \"\";\n         }\n-        if (this.isAttributeKey(key)) {\n-            return key;\n+        if (this.isAttributeKey(str)) {\n+            return str;\n         }\n-        final StringBuilder buf = new StringBuilder();\n-        buf.append(this.getSymbols().getAttributeStart()).append(key);\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(this.getSymbols().getAttributeStart()).append(str);\n         if (this.getSymbols().getAttributeEnd() != null) {\n-            buf.append(this.getSymbols().getAttributeEnd());\n+            sb.append(this.getSymbols().getAttributeEnd());\n         }\n-        return buf.toString();\n+        return sb.toString();\n     }\n     \n-    public String attributeName(final String key) {\n-        return this.isAttributeKey(key) ? this.removeAttributeMarkers(key) : key;\n+    public String attributeName(final String s) {\n+        return this.isAttributeKey(s) ? this.removeAttributeMarkers(s) : s;\n     }\n     \n-    public String trimLeft(final String key) {\n-        if (key == null) {\n+    public String trimLeft(final String s) {\n+        if (s == null) {\n             return \"\";\n         }\n-        String result;\n-        for (result = key; this.hasLeadingDelimiter(result); result = result.substring(this.getSymbols().getPropertyDelimiter().length())) {}\n-        return result;\n+        String substring;\n+        for (substring = s; this.hasLeadingDelimiter(substring); substring = substring.substring(this.getSymbols().getPropertyDelimiter().length())) {}\n+        return substring;\n     }\n     \n-    public String trimRight(final String key) {\n-        if (key == null) {\n+    public String trimRight(final String s) {\n+        if (s == null) {\n             return \"\";\n         }\n-        String result;\n-        for (result = key; this.hasTrailingDelimiter(result); result = result.substring(0, result.length() - this.getSymbols().getPropertyDelimiter().length())) {}\n-        return result;\n+        String substring;\n+        for (substring = s; this.hasTrailingDelimiter(substring); substring = substring.substring(0, substring.length() - this.getSymbols().getPropertyDelimiter().length())) {}\n+        return substring;\n     }\n     \n-    public String trim(final String key) {\n-        return this.trimRight(this.trimLeft(key));\n+    public String trim(final String s) {\n+        return this.trimRight(this.trimLeft(s));\n     }\n     \n     public DefaultConfigurationKey.KeyIterator iterator() {\n         return new DefaultConfigurationKey.KeyIterator(this);\n     }\n     \n-    private boolean hasTrailingDelimiter(final String key) {\n-        return key.endsWith(this.getSymbols().getPropertyDelimiter()) && (this.getSymbols().getEscapedDelimiter() == null || !key.endsWith(this.getSymbols().getEscapedDelimiter()));\n+    private boolean hasTrailingDelimiter(final String s) {\n+        return s.endsWith(this.getSymbols().getPropertyDelimiter()) && (this.getSymbols().getEscapedDelimiter() == null || !s.endsWith(this.getSymbols().getEscapedDelimiter()));\n     }\n     \n-    private boolean hasLeadingDelimiter(final String key) {\n-        return key.startsWith(this.getSymbols().getPropertyDelimiter()) && (this.getSymbols().getEscapedDelimiter() == null || !key.startsWith(this.getSymbols().getEscapedDelimiter()));\n+    private boolean hasLeadingDelimiter(final String s) {\n+        return s.startsWith(this.getSymbols().getPropertyDelimiter()) && (this.getSymbols().getEscapedDelimiter() == null || !s.startsWith(this.getSymbols().getEscapedDelimiter()));\n     }\n     \n-    private String removeAttributeMarkers(final String key) {\n-        return key.substring(this.getSymbols().getAttributeStart().length(), key.length() - ((this.getSymbols().getAttributeEnd() != null) ? this.getSymbols().getAttributeEnd().length() : 0));\n+    private String removeAttributeMarkers(final String s) {\n+        return s.substring(this.getSymbols().getAttributeStart().length(), s.length() - ((this.getSymbols().getAttributeEnd() != null) ? this.getSymbols().getAttributeEnd().length() : 0));\n     }\n     \n-    private String unescapeDelimiters(final String key) {\n-        return (this.getSymbols().getEscapedDelimiter() == null) ? key : StringUtils.replace(key, this.getSymbols().getEscapedDelimiter(), this.getSymbols().getPropertyDelimiter());\n+    private String unescapeDelimiters(final String s) {\n+        return (this.getSymbols().getEscapedDelimiter() == null) ? s : StringUtils.replace(s, this.getSymbols().getEscapedDelimiter(), this.getSymbols().getPropertyDelimiter());\n     }\n     \n     private DefaultExpressionEngineSymbols getSymbols() {\n         return this.getExpressionEngine().getSymbols();\n     }\n     \n-    private String escapeDelimiters(final String key) {\n-        return (this.getSymbols().getEscapedDelimiter() == null || key.indexOf(this.getSymbols().getPropertyDelimiter()) < 0) ? key : StringUtils.replace(key, this.getSymbols().getPropertyDelimiter(), this.getSymbols().getEscapedDelimiter());\n+    private String escapeDelimiters(final String s) {\n+        return (this.getSymbols().getEscapedDelimiter() == null || s.indexOf(this.getSymbols().getPropertyDelimiter()) < 0) ? s : StringUtils.replace(s, this.getSymbols().getPropertyDelimiter(), this.getSymbols().getEscapedDelimiter());\n     }\n     \n-    private static boolean partsEqual(final DefaultConfigurationKey.KeyIterator it1, final DefaultConfigurationKey.KeyIterator it2) {\n-        return it1.nextKey().equals(it2.nextKey()) && it1.getIndex() == it2.getIndex() && it1.isAttribute() == it2.isAttribute();\n+    private static boolean partsEqual(final DefaultConfigurationKey.KeyIterator keyIterator, final DefaultConfigurationKey.KeyIterator keyIterator2) {\n+        return keyIterator.nextKey().equals(keyIterator2.nextKey()) && keyIterator.getIndex() == keyIterator2.getIndex() && keyIterator.isAttribute() == keyIterator2.isAttribute();\n     }\n }\n"}]}
