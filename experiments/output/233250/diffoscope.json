{"diffoscope-json-version": 1, "source1": "first/EventListenerList$EventListenerIterator.class", "source2": "second/EventListenerList$EventListenerIterator.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -8,34 +8,34 @@\n public static final class EventListenerIterator<T extends Event> implements Iterator<EventListener<? super T>>\n {\n     private final Iterator<EventListenerRegistrationData<?>> underlyingIterator;\n     private final EventType<T> baseEventType;\n     private final Set<EventType<?>> acceptedTypes;\n     private EventListener<? super T> nextElement;\n     \n-    private EventListenerIterator(final Iterator<EventListenerRegistrationData<?>> it, final EventType<T> base) {\n-        this.underlyingIterator = it;\n-        this.baseEventType = base;\n-        this.acceptedTypes = EventType.fetchSuperEventTypes((EventType)base);\n+    private EventListenerIterator(final Iterator<EventListenerRegistrationData<?>> underlyingIterator, final EventType<T> baseEventType) {\n+        this.underlyingIterator = underlyingIterator;\n+        this.baseEventType = baseEventType;\n+        this.acceptedTypes = EventType.fetchSuperEventTypes((EventType)baseEventType);\n         this.initNextElement();\n     }\n     \n     @Override\n     public boolean hasNext() {\n         return this.nextElement != null;\n     }\n     \n     @Override\n     public EventListener<? super T> next() {\n         if (this.nextElement == null) {\n             throw new NoSuchElementException(\"No more event listeners!\");\n         }\n-        final EventListener<? super T> result = (EventListener<? super T>)this.nextElement;\n+        final EventListener nextElement = this.nextElement;\n         this.initNextElement();\n-        return result;\n+        return (EventListener<? super T>)nextElement;\n     }\n     \n     public void invokeNext(final Event event) {\n         this.validateEvent(event);\n         this.invokeNextListenerUnchecked(event);\n     }\n     \n@@ -43,30 +43,28 @@\n     public void remove() {\n         throw new UnsupportedOperationException(\"Removing elements is not supported!\");\n     }\n     \n     private void initNextElement() {\n         this.nextElement = null;\n         while (this.underlyingIterator.hasNext() && this.nextElement == null) {\n-            final EventListenerRegistrationData<?> regData = (EventListenerRegistrationData<?>)this.underlyingIterator.next();\n-            if (this.acceptedTypes.contains(regData.getEventType())) {\n-                this.nextElement = this.castListener((EventListenerRegistrationData)regData);\n+            final EventListenerRegistrationData eventListenerRegistrationData = (EventListenerRegistrationData)this.underlyingIterator.next();\n+            if (this.acceptedTypes.contains(eventListenerRegistrationData.getEventType())) {\n+                this.nextElement = this.castListener(eventListenerRegistrationData);\n             }\n         }\n     }\n     \n-    private void validateEvent(final Event event) {\n-        if (event == null || !EventType.fetchSuperEventTypes(event.getEventType()).contains(this.baseEventType)) {\n-            throw new IllegalArgumentException(\"Event incompatible with listener iteration: \" + event);\n+    private void validateEvent(final Event obj) {\n+        if (obj == null || !EventType.fetchSuperEventTypes(obj.getEventType()).contains(this.baseEventType)) {\n+            throw new IllegalArgumentException(\"Event incompatible with listener iteration: \" + obj);\n         }\n     }\n     \n     private void invokeNextListenerUnchecked(final Event event) {\n-        final EventListener<? super T> listener = (EventListener<? super T>)this.next();\n-        EventListenerList.access$200((EventListener)listener, event);\n+        EventListenerList.access$200(this.next(), event);\n     }\n     \n-    private EventListener<? super T> castListener(final EventListenerRegistrationData<?> regData) {\n-        final EventListener listener = regData.getListener();\n-        return (EventListener<? super T>)listener;\n+    private EventListener<? super T> castListener(final EventListenerRegistrationData<?> eventListenerRegistrationData) {\n+        return (EventListener<? super T>)eventListenerRegistrationData.getListener();\n     }\n }\n"}]}
