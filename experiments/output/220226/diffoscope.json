{"diffoscope-json-version": 1, "source1": "first/JavaNCSSCheck.class", "source2": "second/JavaNCSSCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -39,58 +39,54 @@\n         return new int[] { 14, 15, 9, 8, 11, 12, 16, 30, 10, 43, 42, 83, 92, 84, 85, 91, 89, 86, 87, 88, 90, 67, 96, 97, 28, 22, 93, 94, 199, 203 };\n     }\n     \n     public int[] getAcceptableTokens() {\n         return this.getRequiredTokens();\n     }\n     \n-    public void beginTree(final DetailAST rootAST) {\n+    public void beginTree(final DetailAST detailAST) {\n         (this.counters = new ArrayDeque<JavaNCSSCheck.Counter>()).push(new JavaNCSSCheck.Counter());\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        final int tokenType = ast.getType();\n-        if (tokenType == 14 || tokenType == 199 || isMethodOrCtorOrInitDefinition(tokenType)) {\n+    public void visitToken(final DetailAST detailAST) {\n+        final int type = detailAST.getType();\n+        if (type == 14 || type == 199 || isMethodOrCtorOrInitDefinition(type)) {\n             this.counters.push(new JavaNCSSCheck.Counter());\n         }\n-        if (isCountable(ast)) {\n+        if (isCountable(detailAST)) {\n             this.counters.forEach(JavaNCSSCheck.Counter::increment);\n         }\n     }\n     \n-    public void leaveToken(final DetailAST ast) {\n-        final int tokenType = ast.getType();\n-        if (isMethodOrCtorOrInitDefinition(tokenType)) {\n-            final JavaNCSSCheck.Counter counter = (JavaNCSSCheck.Counter)this.counters.pop();\n-            final int count = counter.getCount();\n+    public void leaveToken(final DetailAST detailAST) {\n+        final int type = detailAST.getType();\n+        if (isMethodOrCtorOrInitDefinition(type)) {\n+            final int count = ((JavaNCSSCheck.Counter)this.counters.pop()).getCount();\n             if (count > this.methodMaximum) {\n-                this.log(ast, \"ncss.method\", new Object[] { Integer.valueOf(count), Integer.valueOf(this.methodMaximum) });\n+                this.log(detailAST, \"ncss.method\", new Object[] { Integer.valueOf(count), Integer.valueOf(this.methodMaximum) });\n             }\n         }\n-        else if (tokenType == 14) {\n-            final JavaNCSSCheck.Counter counter = (JavaNCSSCheck.Counter)this.counters.pop();\n-            final int count = counter.getCount();\n-            if (count > this.classMaximum) {\n-                this.log(ast, \"ncss.class\", new Object[] { Integer.valueOf(count), Integer.valueOf(this.classMaximum) });\n+        else if (type == 14) {\n+            final int count2 = ((JavaNCSSCheck.Counter)this.counters.pop()).getCount();\n+            if (count2 > this.classMaximum) {\n+                this.log(detailAST, \"ncss.class\", new Object[] { Integer.valueOf(count2), Integer.valueOf(this.classMaximum) });\n             }\n         }\n-        else if (tokenType == 199) {\n-            final JavaNCSSCheck.Counter counter = (JavaNCSSCheck.Counter)this.counters.pop();\n-            final int count = counter.getCount();\n-            if (count > this.recordMaximum) {\n-                this.log(ast, \"ncss.record\", new Object[] { Integer.valueOf(count), Integer.valueOf(this.recordMaximum) });\n+        else if (type == 199) {\n+            final int count3 = ((JavaNCSSCheck.Counter)this.counters.pop()).getCount();\n+            if (count3 > this.recordMaximum) {\n+                this.log(detailAST, \"ncss.record\", new Object[] { Integer.valueOf(count3), Integer.valueOf(this.recordMaximum) });\n             }\n         }\n     }\n     \n-    public void finishTree(final DetailAST rootAST) {\n-        final JavaNCSSCheck.Counter counter = (JavaNCSSCheck.Counter)this.counters.pop();\n-        final int count = counter.getCount();\n+    public void finishTree(final DetailAST detailAST) {\n+        final int count = ((JavaNCSSCheck.Counter)this.counters.pop()).getCount();\n         if (count > this.fileMaximum) {\n-            this.log(rootAST, \"ncss.file\", new Object[] { Integer.valueOf(count), Integer.valueOf(this.fileMaximum) });\n+            this.log(detailAST, \"ncss.file\", new Object[] { Integer.valueOf(count), Integer.valueOf(this.fileMaximum) });\n         }\n     }\n     \n     public void setFileMaximum(final int fileMaximum) {\n         this.fileMaximum = fileMaximum;\n     }\n     \n@@ -102,56 +98,55 @@\n         this.recordMaximum = recordMaximum;\n     }\n     \n     public void setMethodMaximum(final int methodMaximum) {\n         this.methodMaximum = methodMaximum;\n     }\n     \n-    private static boolean isCountable(final DetailAST ast) {\n-        boolean countable = true;\n-        final int tokenType = ast.getType();\n-        if (tokenType == 28) {\n-            countable = isExpressionCountable(ast);\n+    private static boolean isCountable(final DetailAST detailAST) {\n+        boolean b = true;\n+        final int type = detailAST.getType();\n+        if (type == 28) {\n+            b = isExpressionCountable(detailAST);\n         }\n-        else if (tokenType == 10) {\n-            countable = isVariableDefCountable(ast);\n+        else if (type == 10) {\n+            b = isVariableDefCountable(detailAST);\n         }\n-        return countable;\n+        return b;\n     }\n     \n-    private static boolean isVariableDefCountable(final DetailAST ast) {\n-        boolean countable = false;\n-        final int parentType = ast.getParent().getType();\n-        if (parentType == 7 || parentType == 6) {\n-            final DetailAST prevSibling = ast.getPreviousSibling();\n-            countable = (prevSibling == null || prevSibling.getType() != 74);\n+    private static boolean isVariableDefCountable(final DetailAST detailAST) {\n+        boolean b = false;\n+        final int type = detailAST.getParent().getType();\n+        if (type == 7 || type == 6) {\n+            final DetailAST previousSibling = detailAST.getPreviousSibling();\n+            b = (previousSibling == null || previousSibling.getType() != 74);\n         }\n-        return countable;\n+        return b;\n     }\n     \n-    private static boolean isExpressionCountable(final DetailAST ast) {\n-        final int parentType = ast.getParent().getType();\n-        boolean countable = false;\n-        switch (parentType) {\n+    private static boolean isExpressionCountable(final DetailAST detailAST) {\n+        boolean b = false;\n+        switch (detailAST.getParent().getType()) {\n             case 7:\n             case 22:\n             case 83:\n             case 84:\n             case 85:\n             case 91:\n             case 92: {\n-                final DetailAST prevSibling = ast.getPreviousSibling();\n-                countable = (prevSibling == null || prevSibling.getType() != 76);\n+                final DetailAST previousSibling = detailAST.getPreviousSibling();\n+                b = (previousSibling == null || previousSibling.getType() != 76);\n                 break;\n             }\n             default: {\n-                countable = false;\n+                b = false;\n                 break;\n             }\n         }\n-        return countable;\n+        return b;\n     }\n     \n-    private static boolean isMethodOrCtorOrInitDefinition(final int tokenType) {\n-        return tokenType == 9 || tokenType == 203 || tokenType == 8 || tokenType == 12 || tokenType == 11;\n+    private static boolean isMethodOrCtorOrInitDefinition(final int n) {\n+        return n == 9 || n == 203 || n == 8 || n == 12 || n == 11;\n     }\n }\n"}]}
