{"diffoscope-json-version": 1, "source1": "first/TypeUtils.class", "source2": "second/TypeUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -306,15 +306,15 @@\n         else {\n             typeArguments = (Map<TypeVariable<?>, Type>)((m == null) ? new HashMap<TypeVariable<Class<?>>, Type>() : new HashMap<TypeVariable<Class<?>>, Type>((Map<? extends TypeVariable<Class<?>>, ? extends Type>)m));\n         }\n         final Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n         final TypeVariable<Class<?>>[] typeParameters = rawType.getTypeParameters();\n         for (int i = 0; i < typeParameters.length; ++i) {\n             final Type type = actualTypeArguments[i];\n-            typeArguments.put(typeParameters[i], typeArguments.getOrDefault((Object)type, type));\n+            typeArguments.put(typeParameters[i], typeArguments.getOrDefault(type, type));\n         }\n         if (clazz.equals(rawType)) {\n             return typeArguments;\n         }\n         return getTypeArguments(getClosestParentType(rawType, clazz), clazz, typeArguments);\n     }\n     \n@@ -363,15 +363,15 @@\n         final Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n         final TypeVariable<Class<?>>[] typeParameters = getRawType(parameterizedType).getTypeParameters();\n         final List<TypeVariable<Class<Object>>> list = Arrays.asList((TypeVariable<Class<Object>>[])clazz.getTypeParameters());\n         for (int i = 0; i < actualTypeArguments.length; ++i) {\n             final TypeVariable<Class<?>> typeVariable = typeParameters[i];\n             final Type type = actualTypeArguments[i];\n             if (list.contains(type) && map.containsKey(typeVariable)) {\n-                map.put((TypeVariable<?>)type, map.get((Object)typeVariable));\n+                map.put(type, (Type)map.get(typeVariable));\n             }\n         }\n     }\n     \n     private static Type getClosestParentType(final Class<?> clazz, final Class<?> clazz2) {\n         if (clazz2.isInterface()) {\n             final Type[] genericInterfaces = clazz.getGenericInterfaces();\n"}]}
