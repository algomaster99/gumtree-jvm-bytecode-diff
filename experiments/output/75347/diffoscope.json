{"diffoscope-json-version": 1, "source1": "first/ReversedLinesFileReader.class", "source2": "second/ReversedLinesFileReader.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -72,15 +72,15 @@\n         else if (this.charset == StandardCharsets.UTF_16BE || this.charset == StandardCharsets.UTF_16LE) {\n             this.byteDecrement = 2;\n         }\n         else {\n             if (this.charset == StandardCharsets.UTF_16) {\n                 throw new UnsupportedEncodingException(\"For UTF-16, you need to specify the byte order (use UTF-16BE or UTF-16LE)\");\n             }\n-            throw new UnsupportedEncodingException(\"Encoding \" + charset + \" is not supported yet (feel free to submit a patch)\");\n+            throw new UnsupportedEncodingException(\"Encoding \" + charset + \" is not supported yet (feel free to \" + \"submit a patch)\");\n         }\n         this.newLineSequences = new byte[][] { StandardLineSeparator.CRLF.getBytes(this.charset), StandardLineSeparator.LF.getBytes(this.charset), StandardLineSeparator.CR.getBytes(this.charset) };\n         this.avoidNewlineSplitBufferSize = this.newLineSequences[0].length;\n         this.channel = Files.newByteChannel(file, StandardOpenOption.READ);\n         this.totalByteLength = this.channel.size();\n         int lastBlockLength = (int)(this.totalByteLength % blockSize);\n         if (lastBlockLength > 0) {\n@@ -88,30 +88,30 @@\n         }\n         else {\n             this.totalBlockCount = this.totalByteLength / blockSize;\n             if (this.totalByteLength > 0L) {\n                 lastBlockLength = blockSize;\n             }\n         }\n-        this.currentFilePart = new ReversedLinesFileReader.FilePart(this, this.totalBlockCount, lastBlockLength, (byte[])null, (ReversedLinesFileReader.ReversedLinesFileReader$1)null);\n+        this.currentFilePart = new ReversedLinesFileReader.FilePart(this, this.totalBlockCount, lastBlockLength, (byte[])null, (ReversedLinesFileReader.FilePart)null);\n     }\n     \n     public ReversedLinesFileReader(final Path file, final int blockSize, final String charsetName) throws IOException {\n         this(file, blockSize, Charsets.toCharset(charsetName));\n     }\n     \n     @Override\n     public void close() throws IOException {\n         this.channel.close();\n     }\n     \n     public String readLine() throws IOException {\n         String line;\n-        for (line = ReversedLinesFileReader.FilePart.access$700(this.currentFilePart); line == null; line = ReversedLinesFileReader.FilePart.access$700(this.currentFilePart)) {\n-            this.currentFilePart = ReversedLinesFileReader.FilePart.access$800(this.currentFilePart);\n+        for (line = ReversedLinesFileReader.FilePart.access$1(this.currentFilePart); line == null; line = ReversedLinesFileReader.FilePart.access$1(this.currentFilePart)) {\n+            this.currentFilePart = ReversedLinesFileReader.FilePart.access$2(this.currentFilePart);\n             if (this.currentFilePart == null) {\n                 break;\n             }\n         }\n         if (\"\".equals(line) && !this.trailingNewlineOfFileSkipped) {\n             this.trailingNewlineOfFileSkipped = true;\n             line = this.readLine();\n@@ -133,10 +133,10 @@\n         }\n         return arrayList;\n     }\n     \n     public String toString(final int lineCount) throws IOException {\n         final List<String> lines = this.readLines(lineCount);\n         Collections.reverse(lines);\n-        return lines.isEmpty() ? \"\" : (String.join((CharSequence)System.lineSeparator(), (Iterable<? extends CharSequence>)lines) + System.lineSeparator());\n+        return lines.isEmpty() ? \"\" : (String.valueOf(String.join(System.lineSeparator(), lines)) + System.lineSeparator());\n     }\n }\n"}]}
