{"diffoscope-json-version": 1, "source1": "first/InstructionList.class", "source2": "second/InstructionList.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -87,31 +87,42 @@\n     public InstructionList(final byte[] code) {\n         this.start = null;\n         this.end = null;\n         this.length = 0;\n         int count = 0;\n         InstructionHandle[] ihs;\n         int[] pos;\n-        try (final ByteSequence bytes = new ByteSequence(code)) {\n-            ihs = new InstructionHandle[code.length];\n-            pos = new int[code.length];\n-            while (bytes.available() > 0) {\n-                final int off = bytes.getIndex();\n-                pos[count] = off;\n-                final Instruction i = Instruction.readInstruction(bytes);\n-                InstructionHandle ih;\n-                if (i instanceof BranchInstruction) {\n-                    ih = (InstructionHandle)this.append((BranchInstruction)i);\n-                }\n-                else {\n-                    ih = this.append(i);\n+        try {\n+            final ByteSequence bytes = new ByteSequence(code);\n+            Throwable x0 = null;\n+            try {\n+                ihs = new InstructionHandle[code.length];\n+                pos = new int[code.length];\n+                while (bytes.available() > 0) {\n+                    final int off = bytes.getIndex();\n+                    pos[count] = off;\n+                    final Instruction i = Instruction.readInstruction(bytes);\n+                    InstructionHandle ih;\n+                    if (i instanceof BranchInstruction) {\n+                        ih = (InstructionHandle)this.append((BranchInstruction)i);\n+                    }\n+                    else {\n+                        ih = this.append(i);\n+                    }\n+                    ih.setPosition(off);\n+                    ihs[count] = ih;\n+                    ++count;\n                 }\n-                ih.setPosition(off);\n-                ihs[count] = ih;\n-                ++count;\n+            }\n+            catch (final Throwable t) {\n+                x0 = t;\n+                throw t;\n+            }\n+            finally {\n+                $closeResource(x0, (AutoCloseable)bytes);\n             }\n         }\n         catch (final IOException e) {\n             throw new ClassGenException(e.toString(), (Throwable)e);\n         }\n         System.arraycopy(pos, 0, this.byte_positions = new int[count], 0, count);\n         for (int j = 0; j < count; ++j) {\n@@ -587,17 +598,28 @@\n             return new byte[0];\n         }\n         return b.toByteArray();\n     }\n     \n     public Instruction[] getInstructions() {\n         final List<Instruction> instructions = new ArrayList<Instruction>();\n-        try (final ByteSequence bytes = new ByteSequence(this.getByteCode())) {\n-            while (bytes.available() > 0) {\n-                instructions.add(Instruction.readInstruction(bytes));\n+        try {\n+            final ByteSequence bytes = new ByteSequence(this.getByteCode());\n+            Throwable x0 = null;\n+            try {\n+                while (bytes.available() > 0) {\n+                    instructions.add(Instruction.readInstruction(bytes));\n+                }\n+            }\n+            catch (final Throwable t) {\n+                x0 = t;\n+                throw t;\n+            }\n+            finally {\n+                $closeResource(x0, (AutoCloseable)bytes);\n             }\n         }\n         catch (final IOException e) {\n             throw new ClassGenException(e.toString(), (Throwable)e);\n         }\n         return instructions.toArray(new Instruction[instructions.size()]);\n     }\n@@ -772,8 +794,22 @@\n     public void update() {\n         if (this.observers != null) {\n             for (final InstructionListObserver observer : this.observers) {\n                 observer.notify(this);\n             }\n         }\n     }\n+    \n+    private static /* synthetic */ void $closeResource(final Throwable x0, final AutoCloseable x1) {\n+        if (x0 != null) {\n+            try {\n+                x1.close();\n+            }\n+            catch (final Throwable exception) {\n+                x0.addSuppressed(exception);\n+            }\n+        }\n+        else {\n+            x1.close();\n+        }\n+    }\n }\n"}]}
