{"diffoscope-json-version": 1, "source1": "first/BitInputStream.class", "source2": "second/BitInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -11,114 +11,111 @@\n     private static final int MAXIMUM_CACHE_SIZE = 63;\n     private static final long[] MASKS;\n     private final CountingInputStream in;\n     private final ByteOrder byteOrder;\n     private long bitsCached;\n     private int bitsCachedSize;\n     \n-    public BitInputStream(final InputStream in, final ByteOrder byteOrder) {\n+    public BitInputStream(final InputStream inputStream, final ByteOrder byteOrder) {\n         this.bitsCached = 0L;\n         this.bitsCachedSize = 0;\n-        this.in = new CountingInputStream(in);\n+        this.in = new CountingInputStream(inputStream);\n         this.byteOrder = byteOrder;\n     }\n     \n     @Override\n     public void close() throws IOException {\n         this.in.close();\n     }\n     \n     public void clearBitCache() {\n         this.bitsCached = 0L;\n         this.bitsCachedSize = 0;\n     }\n     \n-    public long readBits(final int count) throws IOException {\n-        if (count < 0 || count > 63) {\n+    public long readBits(final int n) throws IOException {\n+        if (n < 0 || n > 63) {\n             throw new IllegalArgumentException(\"count must not be negative or greater than 63\");\n         }\n-        if (this.ensureCache(count)) {\n+        if (this.ensureCache(n)) {\n             return -1L;\n         }\n-        if (this.bitsCachedSize < count) {\n-            return this.processBitsGreater57(count);\n+        if (this.bitsCachedSize < n) {\n+            return this.processBitsGreater57(n);\n         }\n-        return this.readCachedBits(count);\n+        return this.readCachedBits(n);\n     }\n     \n     public int bitsCached() {\n         return this.bitsCachedSize;\n     }\n     \n     public long bitsAvailable() throws IOException {\n         return this.bitsCachedSize + 8L * this.in.available();\n     }\n     \n     public void alignWithByteBoundary() {\n-        final int toSkip = this.bitsCachedSize % 8;\n-        if (toSkip > 0) {\n-            this.readCachedBits(toSkip);\n+        final int n = this.bitsCachedSize % 8;\n+        if (n > 0) {\n+            this.readCachedBits(n);\n         }\n     }\n     \n     public long getBytesRead() {\n         return this.in.getBytesRead();\n     }\n     \n-    private long processBitsGreater57(final int count) throws IOException {\n-        int overflowBits = 0;\n-        long overflow = 0L;\n-        final int bitsToAddCount = count - this.bitsCachedSize;\n-        overflowBits = 8 - bitsToAddCount;\n-        final long nextByte = (long)this.in.read();\n-        if (nextByte < 0L) {\n-            return nextByte;\n+    private long processBitsGreater57(final int n) throws IOException {\n+        final int n2 = n - this.bitsCachedSize;\n+        final int bitsCachedSize = 8 - n2;\n+        final long n3 = (long)this.in.read();\n+        if (n3 < 0L) {\n+            return n3;\n         }\n+        long bitsCached;\n         if (this.byteOrder == ByteOrder.LITTLE_ENDIAN) {\n-            final long bitsToAdd = nextByte & BitInputStream.MASKS[bitsToAddCount];\n-            this.bitsCached |= bitsToAdd << this.bitsCachedSize;\n-            overflow = (nextByte >>> bitsToAddCount & BitInputStream.MASKS[overflowBits]);\n+            this.bitsCached |= (n3 & BitInputStream.MASKS[n2]) << this.bitsCachedSize;\n+            bitsCached = (n3 >>> n2 & BitInputStream.MASKS[bitsCachedSize]);\n         }\n         else {\n-            this.bitsCached <<= bitsToAddCount;\n-            final long bitsToAdd = nextByte >>> overflowBits & BitInputStream.MASKS[bitsToAddCount];\n-            this.bitsCached |= bitsToAdd;\n-            overflow = (nextByte & BitInputStream.MASKS[overflowBits]);\n-        }\n-        final long bitsOut = this.bitsCached & BitInputStream.MASKS[count];\n-        this.bitsCached = overflow;\n-        this.bitsCachedSize = overflowBits;\n-        return bitsOut;\n+            this.bitsCached <<= n2;\n+            this.bitsCached |= (n3 >>> bitsCachedSize & BitInputStream.MASKS[n2]);\n+            bitsCached = (n3 & BitInputStream.MASKS[bitsCachedSize]);\n+        }\n+        final long n4 = this.bitsCached & BitInputStream.MASKS[n];\n+        this.bitsCached = bitsCached;\n+        this.bitsCachedSize = bitsCachedSize;\n+        return n4;\n     }\n     \n-    private long readCachedBits(final int count) {\n-        long bitsOut;\n+    private long readCachedBits(final int n) {\n+        long n2;\n         if (this.byteOrder == ByteOrder.LITTLE_ENDIAN) {\n-            bitsOut = (this.bitsCached & BitInputStream.MASKS[count]);\n-            this.bitsCached >>>= count;\n+            n2 = (this.bitsCached & BitInputStream.MASKS[n]);\n+            this.bitsCached >>>= n;\n         }\n         else {\n-            bitsOut = (this.bitsCached >> this.bitsCachedSize - count & BitInputStream.MASKS[count]);\n+            n2 = (this.bitsCached >> this.bitsCachedSize - n & BitInputStream.MASKS[n]);\n         }\n-        this.bitsCachedSize -= count;\n-        return bitsOut;\n+        this.bitsCachedSize -= n;\n+        return n2;\n     }\n     \n-    private boolean ensureCache(final int count) throws IOException {\n-        while (this.bitsCachedSize < count && this.bitsCachedSize < 57) {\n-            final long nextByte = (long)this.in.read();\n-            if (nextByte < 0L) {\n+    private boolean ensureCache(final int n) throws IOException {\n+        while (this.bitsCachedSize < n && this.bitsCachedSize < 57) {\n+            final long n2 = (long)this.in.read();\n+            if (n2 < 0L) {\n                 return true;\n             }\n             if (this.byteOrder == ByteOrder.LITTLE_ENDIAN) {\n-                this.bitsCached |= nextByte << this.bitsCachedSize;\n+                this.bitsCached |= n2 << this.bitsCachedSize;\n             }\n             else {\n                 this.bitsCached <<= 8;\n-                this.bitsCached |= nextByte;\n+                this.bitsCached |= n2;\n             }\n             this.bitsCachedSize += 8;\n         }\n         return false;\n     }\n     \n     static {\n"}]}
