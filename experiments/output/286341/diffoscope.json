{"diffoscope-json-version": 1, "source1": "first/ZCompressorInputStream.class", "source2": "second/ZCompressorInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,52 +1,52 @@\n-  SHA-256 checksum 88a486a778606ed5702238740084f82e58a04c22818da332ecb45adbc36d4fee\n+  SHA-256 checksum c663441c3aec216c0b304f8d621fd2c8b600025dff9b29feb8c1a571401e385a\n   Compiled from \"ZCompressorInputStream.java\"\n public class org.apache.commons.compress.compressors.z.ZCompressorInputStream extends org.apache.commons.compress.compressors.lzw.LZWInputStream\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n   this_class: #6                          // org/apache/commons/compress/compressors/z/ZCompressorInputStream\n   super_class: #12                        // org/apache/commons/compress/compressors/lzw/LZWInputStream\n   interfaces: 0, fields: 7, methods: 8, attributes: 1\n Constant pool:\n-    #1 = Fieldref           #72.#73       // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-    #2 = Methodref          #12.#74       // org/apache/commons/compress/compressors/lzw/LZWInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-    #3 = Fieldref           #6.#75        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.totalCodesRead:J\n-    #4 = Fieldref           #6.#76        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.in:Lorg/apache/commons/compress/utils/BitInputStream;\n-    #5 = Methodref          #77.#78       // org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n-    #6 = Class              #79           // org/apache/commons/compress/compressors/z/ZCompressorInputStream\n-    #7 = Class              #80           // java/io/IOException\n-    #8 = String             #81           // Input is not in .Z format\n-    #9 = Methodref          #7.#82        // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #10 = Fieldref           #6.#83        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.blockMode:Z\n-   #11 = Fieldref           #6.#84        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.maxCodeSize:I\n-   #12 = Class              #85           // org/apache/commons/compress/compressors/lzw/LZWInputStream\n-   #13 = Methodref          #6.#86        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.setClearCode:(I)V\n-   #14 = Methodref          #6.#87        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.initializeTables:(II)V\n-   #15 = Methodref          #6.#88        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.clearEntries:()V\n-   #16 = Methodref          #6.#89        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n-   #17 = Methodref          #6.#90        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.setTableSize:(I)V\n-   #18 = Methodref          #12.#91       // org/apache/commons/compress/compressors/lzw/LZWInputStream.readNextCode:()I\n+    #1 = Fieldref           #71.#72       // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+    #2 = Methodref          #12.#73       // org/apache/commons/compress/compressors/lzw/LZWInputStream.\"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+    #3 = Fieldref           #6.#74        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.totalCodesRead:J\n+    #4 = Fieldref           #6.#75        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.in:Lorg/apache/commons/compress/utils/BitInputStream;\n+    #5 = Methodref          #76.#77       // org/apache/commons/compress/utils/BitInputStream.readBits:(I)J\n+    #6 = Class              #78           // org/apache/commons/compress/compressors/z/ZCompressorInputStream\n+    #7 = Class              #79           // java/io/IOException\n+    #8 = String             #80           // Input is not in .Z format\n+    #9 = Methodref          #7.#81        // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #10 = Fieldref           #6.#82        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.blockMode:Z\n+   #11 = Fieldref           #6.#83        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.maxCodeSize:I\n+   #12 = Class              #84           // org/apache/commons/compress/compressors/lzw/LZWInputStream\n+   #13 = Methodref          #6.#85        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.setClearCode:(I)V\n+   #14 = Methodref          #6.#86        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.initializeTables:(II)V\n+   #15 = Methodref          #6.#87        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.clearEntries:()V\n+   #16 = Methodref          #6.#88        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.\"<init>\":(Ljava/io/InputStream;I)V\n+   #17 = Methodref          #6.#89        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.setTableSize:(I)V\n+   #18 = Methodref          #12.#90       // org/apache/commons/compress/compressors/lzw/LZWInputStream.readNextCode:()I\n    #19 = Long               8l\n-   #21 = Methodref          #6.#91        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.readNextCode:()I\n-   #22 = Methodref          #77.#92       // org/apache/commons/compress/utils/BitInputStream.clearBitCache:()V\n-   #23 = Methodref          #6.#93        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.getCodeSize:()I\n-   #24 = Methodref          #6.#94        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.addEntry:(IBI)I\n-   #25 = Methodref          #6.#95        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.getTableSize:()I\n-   #26 = Methodref          #6.#96        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.reAlignReading:()V\n-   #27 = Methodref          #6.#97        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.incrementCodeSize:()V\n-   #28 = Methodref          #6.#98        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.getClearCode:()I\n-   #29 = Methodref          #6.#99        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.resetCodeSize:()V\n-   #30 = Methodref          #6.#100       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.resetPreviousCode:()V\n-   #31 = Methodref          #6.#101       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.addRepeatOfPreviousCode:()I\n-   #32 = String             #102          // Invalid %d bit code 0x%x\n-   #33 = Class              #103          // java/lang/Object\n-   #34 = Methodref          #104.#105     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n-   #35 = Methodref          #106.#107     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-   #36 = Methodref          #6.#108       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.expandCodeToOutputStack:(IZ)I\n+   #21 = Methodref          #6.#90        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.readNextCode:()I\n+   #22 = Methodref          #76.#91       // org/apache/commons/compress/utils/BitInputStream.clearBitCache:()V\n+   #23 = Methodref          #6.#92        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.getCodeSize:()I\n+   #24 = Methodref          #6.#93        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.addEntry:(IBI)I\n+   #25 = Methodref          #6.#94        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.getTableSize:()I\n+   #26 = Methodref          #6.#95        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.reAlignReading:()V\n+   #27 = Methodref          #6.#96        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.incrementCodeSize:()V\n+   #28 = Methodref          #6.#97        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.getClearCode:()I\n+   #29 = Methodref          #6.#98        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.resetCodeSize:()V\n+   #30 = Methodref          #6.#99        // org/apache/commons/compress/compressors/z/ZCompressorInputStream.resetPreviousCode:()V\n+   #31 = Methodref          #6.#100       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.addRepeatOfPreviousCode:()I\n+   #32 = String             #101          // Invalid %d bit code 0x%x\n+   #33 = Class              #102          // java/lang/Object\n+   #34 = Methodref          #103.#104     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n+   #35 = Methodref          #105.#106     // java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+   #36 = Methodref          #6.#107       // org/apache/commons/compress/compressors/z/ZCompressorInputStream.expandCodeToOutputStack:(IZ)I\n    #37 = Utf8               MAGIC_1\n    #38 = Utf8               I\n    #39 = Utf8               ConstantValue\n    #40 = Integer            31\n    #41 = Utf8               MAGIC_2\n    #42 = Integer            157\n    #43 = Utf8               BLOCK_MODE_MASK\n@@ -58,100 +58,99 @@\n    #49 = Utf8               totalCodesRead\n    #50 = Utf8               J\n    #51 = Utf8               <init>\n    #52 = Utf8               (Ljava/io/InputStream;I)V\n    #53 = Utf8               Code\n    #54 = Utf8               LineNumberTable\n    #55 = Utf8               StackMapTable\n-   #56 = Class              #79           // org/apache/commons/compress/compressors/z/ZCompressorInputStream\n-   #57 = Class              #109          // java/io/InputStream\n-   #58 = Utf8               Exceptions\n-   #59 = Utf8               (Ljava/io/InputStream;)V\n-   #60 = Utf8               clearEntries\n-   #61 = Utf8               ()V\n-   #62 = Utf8               readNextCode\n-   #63 = Utf8               ()I\n-   #64 = Utf8               reAlignReading\n-   #65 = Utf8               addEntry\n-   #66 = Utf8               (IB)I\n-   #67 = Utf8               decompressNextSymbol\n-   #68 = Utf8               matches\n-   #69 = Utf8               ([BI)Z\n-   #70 = Utf8               SourceFile\n-   #71 = Utf8               ZCompressorInputStream.java\n-   #72 = Class              #110          // java/nio/ByteOrder\n-   #73 = NameAndType        #111:#112     // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-   #74 = NameAndType        #51:#113      // \"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-   #75 = NameAndType        #49:#50       // totalCodesRead:J\n-   #76 = NameAndType        #114:#115     // in:Lorg/apache/commons/compress/utils/BitInputStream;\n-   #77 = Class              #116          // org/apache/commons/compress/utils/BitInputStream\n-   #78 = NameAndType        #117:#118     // readBits:(I)J\n-   #79 = Utf8               org/apache/commons/compress/compressors/z/ZCompressorInputStream\n-   #80 = Utf8               java/io/IOException\n-   #81 = Utf8               Input is not in .Z format\n-   #82 = NameAndType        #51:#119      // \"<init>\":(Ljava/lang/String;)V\n-   #83 = NameAndType        #46:#47       // blockMode:Z\n-   #84 = NameAndType        #48:#38       // maxCodeSize:I\n-   #85 = Utf8               org/apache/commons/compress/compressors/lzw/LZWInputStream\n-   #86 = NameAndType        #120:#121     // setClearCode:(I)V\n-   #87 = NameAndType        #122:#123     // initializeTables:(II)V\n-   #88 = NameAndType        #60:#61       // clearEntries:()V\n-   #89 = NameAndType        #51:#52       // \"<init>\":(Ljava/io/InputStream;I)V\n-   #90 = NameAndType        #124:#121     // setTableSize:(I)V\n-   #91 = NameAndType        #62:#63       // readNextCode:()I\n-   #92 = NameAndType        #125:#61      // clearBitCache:()V\n-   #93 = NameAndType        #126:#63      // getCodeSize:()I\n-   #94 = NameAndType        #65:#127      // addEntry:(IBI)I\n-   #95 = NameAndType        #128:#63      // getTableSize:()I\n-   #96 = NameAndType        #64:#61       // reAlignReading:()V\n-   #97 = NameAndType        #129:#61      // incrementCodeSize:()V\n-   #98 = NameAndType        #130:#63      // getClearCode:()I\n-   #99 = NameAndType        #131:#61      // resetCodeSize:()V\n-  #100 = NameAndType        #132:#61      // resetPreviousCode:()V\n-  #101 = NameAndType        #133:#63      // addRepeatOfPreviousCode:()I\n-  #102 = Utf8               Invalid %d bit code 0x%x\n-  #103 = Utf8               java/lang/Object\n-  #104 = Class              #134          // java/lang/Integer\n-  #105 = NameAndType        #135:#136     // valueOf:(I)Ljava/lang/Integer;\n-  #106 = Class              #137          // java/lang/String\n-  #107 = NameAndType        #138:#139     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #108 = NameAndType        #140:#141     // expandCodeToOutputStack:(IZ)I\n-  #109 = Utf8               java/io/InputStream\n-  #110 = Utf8               java/nio/ByteOrder\n-  #111 = Utf8               LITTLE_ENDIAN\n-  #112 = Utf8               Ljava/nio/ByteOrder;\n-  #113 = Utf8               (Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n-  #114 = Utf8               in\n-  #115 = Utf8               Lorg/apache/commons/compress/utils/BitInputStream;\n-  #116 = Utf8               org/apache/commons/compress/utils/BitInputStream\n-  #117 = Utf8               readBits\n-  #118 = Utf8               (I)J\n-  #119 = Utf8               (Ljava/lang/String;)V\n-  #120 = Utf8               setClearCode\n-  #121 = Utf8               (I)V\n-  #122 = Utf8               initializeTables\n-  #123 = Utf8               (II)V\n-  #124 = Utf8               setTableSize\n-  #125 = Utf8               clearBitCache\n-  #126 = Utf8               getCodeSize\n-  #127 = Utf8               (IBI)I\n-  #128 = Utf8               getTableSize\n-  #129 = Utf8               incrementCodeSize\n-  #130 = Utf8               getClearCode\n-  #131 = Utf8               resetCodeSize\n-  #132 = Utf8               resetPreviousCode\n-  #133 = Utf8               addRepeatOfPreviousCode\n-  #134 = Utf8               java/lang/Integer\n-  #135 = Utf8               valueOf\n-  #136 = Utf8               (I)Ljava/lang/Integer;\n-  #137 = Utf8               java/lang/String\n-  #138 = Utf8               format\n-  #139 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n-  #140 = Utf8               expandCodeToOutputStack\n-  #141 = Utf8               (IZ)I\n+   #56 = Class              #108          // java/io/InputStream\n+   #57 = Utf8               Exceptions\n+   #58 = Utf8               (Ljava/io/InputStream;)V\n+   #59 = Utf8               clearEntries\n+   #60 = Utf8               ()V\n+   #61 = Utf8               readNextCode\n+   #62 = Utf8               ()I\n+   #63 = Utf8               reAlignReading\n+   #64 = Utf8               addEntry\n+   #65 = Utf8               (IB)I\n+   #66 = Utf8               decompressNextSymbol\n+   #67 = Utf8               matches\n+   #68 = Utf8               ([BI)Z\n+   #69 = Utf8               SourceFile\n+   #70 = Utf8               ZCompressorInputStream.java\n+   #71 = Class              #109          // java/nio/ByteOrder\n+   #72 = NameAndType        #110:#111     // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+   #73 = NameAndType        #51:#112      // \"<init>\":(Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+   #74 = NameAndType        #49:#50       // totalCodesRead:J\n+   #75 = NameAndType        #113:#114     // in:Lorg/apache/commons/compress/utils/BitInputStream;\n+   #76 = Class              #115          // org/apache/commons/compress/utils/BitInputStream\n+   #77 = NameAndType        #116:#117     // readBits:(I)J\n+   #78 = Utf8               org/apache/commons/compress/compressors/z/ZCompressorInputStream\n+   #79 = Utf8               java/io/IOException\n+   #80 = Utf8               Input is not in .Z format\n+   #81 = NameAndType        #51:#118      // \"<init>\":(Ljava/lang/String;)V\n+   #82 = NameAndType        #46:#47       // blockMode:Z\n+   #83 = NameAndType        #48:#38       // maxCodeSize:I\n+   #84 = Utf8               org/apache/commons/compress/compressors/lzw/LZWInputStream\n+   #85 = NameAndType        #119:#120     // setClearCode:(I)V\n+   #86 = NameAndType        #121:#122     // initializeTables:(II)V\n+   #87 = NameAndType        #59:#60       // clearEntries:()V\n+   #88 = NameAndType        #51:#52       // \"<init>\":(Ljava/io/InputStream;I)V\n+   #89 = NameAndType        #123:#120     // setTableSize:(I)V\n+   #90 = NameAndType        #61:#62       // readNextCode:()I\n+   #91 = NameAndType        #124:#60      // clearBitCache:()V\n+   #92 = NameAndType        #125:#62      // getCodeSize:()I\n+   #93 = NameAndType        #64:#126      // addEntry:(IBI)I\n+   #94 = NameAndType        #127:#62      // getTableSize:()I\n+   #95 = NameAndType        #63:#60       // reAlignReading:()V\n+   #96 = NameAndType        #128:#60      // incrementCodeSize:()V\n+   #97 = NameAndType        #129:#62      // getClearCode:()I\n+   #98 = NameAndType        #130:#60      // resetCodeSize:()V\n+   #99 = NameAndType        #131:#60      // resetPreviousCode:()V\n+  #100 = NameAndType        #132:#62      // addRepeatOfPreviousCode:()I\n+  #101 = Utf8               Invalid %d bit code 0x%x\n+  #102 = Utf8               java/lang/Object\n+  #103 = Class              #133          // java/lang/Integer\n+  #104 = NameAndType        #134:#135     // valueOf:(I)Ljava/lang/Integer;\n+  #105 = Class              #136          // java/lang/String\n+  #106 = NameAndType        #137:#138     // format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #107 = NameAndType        #139:#140     // expandCodeToOutputStack:(IZ)I\n+  #108 = Utf8               java/io/InputStream\n+  #109 = Utf8               java/nio/ByteOrder\n+  #110 = Utf8               LITTLE_ENDIAN\n+  #111 = Utf8               Ljava/nio/ByteOrder;\n+  #112 = Utf8               (Ljava/io/InputStream;Ljava/nio/ByteOrder;)V\n+  #113 = Utf8               in\n+  #114 = Utf8               Lorg/apache/commons/compress/utils/BitInputStream;\n+  #115 = Utf8               org/apache/commons/compress/utils/BitInputStream\n+  #116 = Utf8               readBits\n+  #117 = Utf8               (I)J\n+  #118 = Utf8               (Ljava/lang/String;)V\n+  #119 = Utf8               setClearCode\n+  #120 = Utf8               (I)V\n+  #121 = Utf8               initializeTables\n+  #122 = Utf8               (II)V\n+  #123 = Utf8               setTableSize\n+  #124 = Utf8               clearBitCache\n+  #125 = Utf8               getCodeSize\n+  #126 = Utf8               (IBI)I\n+  #127 = Utf8               getTableSize\n+  #128 = Utf8               incrementCodeSize\n+  #129 = Utf8               getClearCode\n+  #130 = Utf8               resetCodeSize\n+  #131 = Utf8               resetPreviousCode\n+  #132 = Utf8               addRepeatOfPreviousCode\n+  #133 = Utf8               java/lang/Integer\n+  #134 = Utf8               valueOf\n+  #135 = Utf8               (I)Ljava/lang/Integer;\n+  #136 = Utf8               java/lang/String\n+  #137 = Utf8               format\n+  #138 = Utf8               (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;\n+  #139 = Utf8               expandCodeToOutputStack\n+  #140 = Utf8               (IZ)I\n {\n   private static final int MAGIC_1 = 31;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 31\n \n   private static final int MAGIC_2 = 157;\n"}]}
