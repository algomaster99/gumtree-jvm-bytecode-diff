{"diffoscope-json-version": 1, "source1": "first/Functions.class", "source2": "second/Functions.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -16,169 +16,169 @@\n import java.util.function.BiPredicate;\n import java.util.function.BiFunction;\n import java.util.function.BiConsumer;\n \n @Deprecated\n public class Functions\n {\n-    public static <O1, O2, T extends Throwable> void accept(final Functions.FailableBiConsumer<O1, O2, T> consumer, final O1 object1, final O2 object2) {\n-        run((Functions.FailableRunnable<Throwable>)(() -> consumer.accept(object1, object2)));\n+    public static <O1, O2, T extends Throwable> void accept(final Functions.FailableBiConsumer<O1, O2, T> failableBiConsumer, final O1 o1, final O2 o2) {\n+        run((Functions.FailableRunnable<Throwable>)(() -> failableBiConsumer.accept(o1, o2)));\n     }\n     \n-    public static <O, T extends Throwable> void accept(final Functions.FailableConsumer<O, T> consumer, final O object) {\n-        run((Functions.FailableRunnable<Throwable>)(() -> consumer.accept(object)));\n+    public static <O, T extends Throwable> void accept(final Functions.FailableConsumer<O, T> failableConsumer, final O o) {\n+        run((Functions.FailableRunnable<Throwable>)(() -> failableConsumer.accept(o)));\n     }\n     \n-    public static <O1, O2, O, T extends Throwable> O apply(final Functions.FailableBiFunction<O1, O2, O, T> function, final O1 input1, final O2 input2) {\n-        return get((Functions.FailableSupplier<O, Throwable>)(() -> function.apply(input1, input2)));\n+    public static <O1, O2, O, T extends Throwable> O apply(final Functions.FailableBiFunction<O1, O2, O, T> failableBiFunction, final O1 o1, final O2 o2) {\n+        return get((Functions.FailableSupplier<O, Throwable>)(() -> failableBiFunction.apply(o1, o2)));\n     }\n     \n-    public static <I, O, T extends Throwable> O apply(final Functions.FailableFunction<I, O, T> function, final I input) {\n-        return get((Functions.FailableSupplier<O, Throwable>)(() -> function.apply(input)));\n+    public static <I, O, T extends Throwable> O apply(final Functions.FailableFunction<I, O, T> failableFunction, final I n) {\n+        return get((Functions.FailableSupplier<O, Throwable>)(() -> failableFunction.apply(n)));\n     }\n     \n-    public static <O1, O2> BiConsumer<O1, O2> asBiConsumer(final Functions.FailableBiConsumer<O1, O2, ?> consumer) {\n-        return (input1, input2) -> accept((Functions.FailableBiConsumer<Object, Object, Throwable>)consumer, input1, input2);\n+    public static <O1, O2> BiConsumer<O1, O2> asBiConsumer(final Functions.FailableBiConsumer<O1, O2, ?> failableBiConsumer) {\n+        return (o, o2) -> accept((Functions.FailableBiConsumer<Object, Object, Throwable>)failableBiConsumer2, o, o2);\n     }\n     \n-    public static <O1, O2, O> BiFunction<O1, O2, O> asBiFunction(final Functions.FailableBiFunction<O1, O2, O, ?> function) {\n-        return (BiFunction<O1, O2, O>)((input1, input2) -> apply((Functions.FailableBiFunction<Object, Object, Object, Throwable>)function, input1, input2));\n+    public static <O1, O2, O> BiFunction<O1, O2, O> asBiFunction(final Functions.FailableBiFunction<O1, O2, O, ?> failableBiFunction) {\n+        return (BiFunction<O1, O2, O>)((o2, o4) -> apply((Functions.FailableBiFunction<Object, Object, Object, Throwable>)failableBiFunction2, o2, o4));\n     }\n     \n-    public static <O1, O2> BiPredicate<O1, O2> asBiPredicate(final Functions.FailableBiPredicate<O1, O2, ?> predicate) {\n-        return (input1, input2) -> test((Functions.FailableBiPredicate<Object, Object, Throwable>)predicate, input1, input2);\n+    public static <O1, O2> BiPredicate<O1, O2> asBiPredicate(final Functions.FailableBiPredicate<O1, O2, ?> failableBiPredicate) {\n+        return (o, o2) -> test((Functions.FailableBiPredicate<Object, Object, Throwable>)failableBiPredicate2, o, o2);\n     }\n     \n-    public static <O> Callable<O> asCallable(final Functions.FailableCallable<O, ?> callable) {\n-        return (Callable<O>)(() -> call((Functions.FailableCallable<Object, Throwable>)callable));\n+    public static <O> Callable<O> asCallable(final Functions.FailableCallable<O, ?> failableCallable) {\n+        return (Callable<O>)(() -> call((Functions.FailableCallable<Object, Throwable>)failableCallable2));\n     }\n     \n-    public static <I> Consumer<I> asConsumer(final Functions.FailableConsumer<I, ?> consumer) {\n-        return input -> accept((Functions.FailableConsumer<Object, Throwable>)consumer, input);\n+    public static <I> Consumer<I> asConsumer(final Functions.FailableConsumer<I, ?> failableConsumer) {\n+        return o -> accept((Functions.FailableConsumer<Object, Throwable>)failableConsumer2, o);\n     }\n     \n-    public static <I, O> Function<I, O> asFunction(final Functions.FailableFunction<I, O, ?> function) {\n-        return (Function<I, O>)(input -> apply((Functions.FailableFunction<Object, Object, Throwable>)function, input));\n+    public static <I, O> Function<I, O> asFunction(final Functions.FailableFunction<I, O, ?> failableFunction) {\n+        return (Function<I, O>)(o2 -> apply((Functions.FailableFunction<Object, Object, Throwable>)failableFunction2, o2));\n     }\n     \n-    public static <I> Predicate<I> asPredicate(final Functions.FailablePredicate<I, ?> predicate) {\n-        return input -> test((Functions.FailablePredicate<Object, Throwable>)predicate, input);\n+    public static <I> Predicate<I> asPredicate(final Functions.FailablePredicate<I, ?> failablePredicate) {\n+        return o -> test((Functions.FailablePredicate<Object, Throwable>)failablePredicate2, o);\n     }\n     \n-    public static Runnable asRunnable(final Functions.FailableRunnable<?> runnable) {\n-        return () -> run((Functions.FailableRunnable<Throwable>)runnable);\n+    public static Runnable asRunnable(final Functions.FailableRunnable<?> failableRunnable) {\n+        return () -> run((Functions.FailableRunnable<Throwable>)failableRunnable2);\n     }\n     \n-    public static <O> Supplier<O> asSupplier(final Functions.FailableSupplier<O, ?> supplier) {\n-        return (Supplier<O>)(() -> get((Functions.FailableSupplier<Object, Throwable>)supplier));\n+    public static <O> Supplier<O> asSupplier(final Functions.FailableSupplier<O, ?> failableSupplier) {\n+        return (Supplier<O>)(() -> get((Functions.FailableSupplier<Object, Throwable>)failableSupplier2));\n     }\n     \n-    public static <O, T extends Throwable> O call(final Functions.FailableCallable<O, T> callable) {\n-        Objects.requireNonNull(callable);\n-        return get((Functions.FailableSupplier<O, Throwable>)callable::call);\n+    public static <O, T extends Throwable> O call(final Functions.FailableCallable<O, T> obj) {\n+        Objects.requireNonNull(obj);\n+        return get((Functions.FailableSupplier<O, Throwable>)obj::call);\n     }\n     \n-    public static <O, T extends Throwable> O get(final Functions.FailableSupplier<O, T> supplier) {\n+    public static <O, T extends Throwable> O get(final Functions.FailableSupplier<O, T> failableSupplier) {\n         try {\n-            return (O)supplier.get();\n+            return (O)failableSupplier.get();\n         }\n         catch (final Throwable t) {\n             throw rethrow(t);\n         }\n     }\n     \n-    private static <T extends Throwable> boolean getAsBoolean(final FailableBooleanSupplier<T> supplier) {\n+    private static <T extends Throwable> boolean getAsBoolean(final FailableBooleanSupplier<T> failableBooleanSupplier) {\n         try {\n-            return supplier.getAsBoolean();\n+            return failableBooleanSupplier.getAsBoolean();\n         }\n         catch (final Throwable t) {\n             throw rethrow(t);\n         }\n     }\n     \n-    public static RuntimeException rethrow(final Throwable throwable) {\n-        Objects.requireNonNull(throwable, \"throwable\");\n-        if (throwable instanceof RuntimeException) {\n-            throw (RuntimeException)throwable;\n+    public static RuntimeException rethrow(final Throwable t) {\n+        Objects.requireNonNull(t, \"throwable\");\n+        if (t instanceof RuntimeException) {\n+            throw (RuntimeException)t;\n         }\n-        if (throwable instanceof Error) {\n-            throw (Error)throwable;\n+        if (t instanceof Error) {\n+            throw (Error)t;\n         }\n-        if (throwable instanceof IOException) {\n-            throw new UncheckedIOException((IOException)throwable);\n+        if (t instanceof IOException) {\n+            throw new UncheckedIOException((IOException)t);\n         }\n-        throw new UndeclaredThrowableException(throwable);\n+        throw new UndeclaredThrowableException(t);\n     }\n     \n-    public static <T extends Throwable> void run(final Functions.FailableRunnable<T> runnable) {\n+    public static <T extends Throwable> void run(final Functions.FailableRunnable<T> failableRunnable) {\n         try {\n-            runnable.run();\n+            failableRunnable.run();\n         }\n         catch (final Throwable t) {\n             throw rethrow(t);\n         }\n     }\n     \n     public static <O> Streams.FailableStream<O> stream(final Collection<O> collection) {\n         return (Streams.FailableStream<O>)new Streams.FailableStream((Stream)collection.stream());\n     }\n     \n     public static <O> Streams.FailableStream<O> stream(final Stream<O> stream) {\n         return (Streams.FailableStream<O>)new Streams.FailableStream((Stream)stream);\n     }\n     \n-    public static <O1, O2, T extends Throwable> boolean test(final Functions.FailableBiPredicate<O1, O2, T> predicate, final O1 object1, final O2 object2) {\n-        return getAsBoolean((org.apache.commons.lang3.function.FailableBooleanSupplier<Throwable>)(() -> predicate.test(object1, object2)));\n+    public static <O1, O2, T extends Throwable> boolean test(final Functions.FailableBiPredicate<O1, O2, T> failableBiPredicate, final O1 o1, final O2 o2) {\n+        return getAsBoolean((org.apache.commons.lang3.function.FailableBooleanSupplier<Throwable>)(() -> failableBiPredicate.test(o1, o2)));\n     }\n     \n-    public static <O, T extends Throwable> boolean test(final Functions.FailablePredicate<O, T> predicate, final O object) {\n-        return getAsBoolean((org.apache.commons.lang3.function.FailableBooleanSupplier<Throwable>)(() -> predicate.test(object)));\n+    public static <O, T extends Throwable> boolean test(final Functions.FailablePredicate<O, T> failablePredicate, final O o) {\n+        return getAsBoolean((org.apache.commons.lang3.function.FailableBooleanSupplier<Throwable>)(() -> failablePredicate.test(o)));\n     }\n     \n     @SafeVarargs\n-    public static void tryWithResources(final Functions.FailableRunnable<? extends Throwable> action, final Functions.FailableConsumer<Throwable, ? extends Throwable> errorHandler, final Functions.FailableRunnable<? extends Throwable>... resources) {\n-        Functions.FailableConsumer<Throwable, ? extends Throwable> actualErrorHandler;\n-        if (errorHandler == null) {\n-            actualErrorHandler = (Functions.FailableConsumer<Throwable, ? extends Throwable>)Functions::rethrow;\n+    public static void tryWithResources(final Functions.FailableRunnable<? extends Throwable> failableRunnable, final Functions.FailableConsumer<Throwable, ? extends Throwable> failableConsumer, final Functions.FailableRunnable<? extends Throwable>... array) {\n+        Functions.FailableConsumer failableConsumer2;\n+        if (failableConsumer == null) {\n+            failableConsumer2 = Functions::rethrow;\n         }\n         else {\n-            actualErrorHandler = errorHandler;\n+            failableConsumer2 = failableConsumer;\n         }\n-        if (resources != null) {\n-            for (final Functions.FailableRunnable<? extends Throwable> failableRunnable : resources) {\n-                Objects.requireNonNull(failableRunnable, \"runnable\");\n+        if (array != null) {\n+            for (int length = array.length, i = 0; i < length; ++i) {\n+                Objects.requireNonNull(array[i], \"runnable\");\n             }\n         }\n-        Throwable th = null;\n+        Object o = null;\n         try {\n-            action.run();\n+            failableRunnable.run();\n         }\n         catch (final Throwable t) {\n-            th = t;\n+            o = t;\n         }\n-        if (resources != null) {\n-            for (final Functions.FailableRunnable<?> runnable : resources) {\n+        if (array != null) {\n+            for (final Functions.FailableRunnable<? extends Throwable> failableRunnable2 : array) {\n                 try {\n-                    runnable.run();\n+                    failableRunnable2.run();\n                 }\n                 catch (final Throwable t2) {\n-                    if (th == null) {\n-                        th = t2;\n+                    if (o == null) {\n+                        o = t2;\n                     }\n                 }\n             }\n         }\n-        if (th != null) {\n+        if (o != null) {\n             try {\n-                actualErrorHandler.accept((Object)th);\n+                failableConsumer2.accept(o);\n             }\n-            catch (final Throwable t) {\n-                throw rethrow(t);\n+            catch (final Throwable t3) {\n+                throw rethrow(t3);\n             }\n         }\n     }\n     \n     @SafeVarargs\n-    public static void tryWithResources(final Functions.FailableRunnable<? extends Throwable> action, final Functions.FailableRunnable<? extends Throwable>... resources) {\n-        tryWithResources(action, (Functions.FailableConsumer<Throwable, ? extends Throwable>)null, resources);\n+    public static void tryWithResources(final Functions.FailableRunnable<? extends Throwable> failableRunnable, final Functions.FailableRunnable<? extends Throwable>... array) {\n+        tryWithResources(failableRunnable, (Functions.FailableConsumer<Throwable, ? extends Throwable>)null, array);\n     }\n }\n"}]}
