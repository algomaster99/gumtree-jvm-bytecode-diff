{"diffoscope-json-version": 1, "source1": "first/AnnotationOnSameLineCheck.class", "source2": "second/AnnotationOnSameLineCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -20,41 +20,41 @@\n         return new int[] { 14, 15, 154, 9, 8, 10, 21, 157, 23, 81, 19, 164, 136, 59, 161, 199, 203 };\n     }\n     \n     public int[] getRequiredTokens() {\n         return CommonUtil.EMPTY_INT_ARRAY;\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        DetailAST nodeWithAnnotations = ast;\n-        if (ast.getType() == 23) {\n-            nodeWithAnnotations = ast.findFirstToken(13);\n+    public void visitToken(final DetailAST detailAST) {\n+        DetailAST firstToken = detailAST;\n+        if (detailAST.getType() == 23) {\n+            firstToken = detailAST.findFirstToken(13);\n         }\n-        DetailAST modifiersNode = nodeWithAnnotations.findFirstToken(5);\n-        if (modifiersNode == null) {\n-            modifiersNode = nodeWithAnnotations.findFirstToken(158);\n+        DetailAST detailAST2 = firstToken.findFirstToken(5);\n+        if (detailAST2 == null) {\n+            detailAST2 = firstToken.findFirstToken(158);\n         }\n-        if (modifiersNode != null) {\n-            for (DetailAST annotationNode = modifiersNode.getFirstChild(); annotationNode != null; annotationNode = annotationNode.getNextSibling()) {\n-                if (annotationNode.getType() == 159 && !TokenUtil.areOnSameLine(annotationNode, getNextNode(annotationNode))) {\n-                    this.log(annotationNode, \"annotation.same.line\", new Object[] { getAnnotationName(annotationNode) });\n+        if (detailAST2 != null) {\n+            for (DetailAST detailAST3 = detailAST2.getFirstChild(); detailAST3 != null; detailAST3 = detailAST3.getNextSibling()) {\n+                if (detailAST3.getType() == 159 && !TokenUtil.areOnSameLine(detailAST3, getNextNode(detailAST3))) {\n+                    this.log(detailAST3, \"annotation.same.line\", new Object[] { getAnnotationName(detailAST3) });\n                 }\n             }\n         }\n     }\n     \n-    private static DetailAST getNextNode(final DetailAST node) {\n-        DetailAST nextNode = node.getNextSibling();\n-        if (nextNode == null) {\n-            nextNode = node.getParent().getNextSibling();\n+    private static DetailAST getNextNode(final DetailAST detailAST) {\n+        DetailAST detailAST2 = detailAST.getNextSibling();\n+        if (detailAST2 == null) {\n+            detailAST2 = detailAST.getParent().getNextSibling();\n         }\n-        return nextNode;\n+        return detailAST2;\n     }\n     \n-    private static String getAnnotationName(final DetailAST annotation) {\n-        DetailAST identNode = annotation.findFirstToken(58);\n-        if (identNode == null) {\n-            identNode = annotation.findFirstToken(59).getLastChild();\n+    private static String getAnnotationName(final DetailAST detailAST) {\n+        DetailAST detailAST2 = detailAST.findFirstToken(58);\n+        if (detailAST2 == null) {\n+            detailAST2 = detailAST.findFirstToken(59).getLastChild();\n         }\n-        return identNode.getText();\n+        return detailAST2.getText();\n     }\n }\n"}]}
