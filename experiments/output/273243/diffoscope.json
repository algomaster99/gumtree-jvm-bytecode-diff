{"diffoscope-json-version": 1, "source1": "first/ModuleReflectionUtil.class", "source2": "second/ModuleReflectionUtil.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -22,32 +22,35 @@\n import java.util.Collection;\n \n public final class ModuleReflectionUtil\n {\n     private ModuleReflectionUtil() {\n     }\n     \n-    public static Set<Class<?>> getCheckstyleModules(final Collection<String> packages, final ClassLoader loader) throws IOException {\n-        final ClassPath classPath = ClassPath.from(loader);\n-        return packages.stream().flatMap(pkg -> classPath.getTopLevelClasses(pkg).stream()).map((Function<? super Object, ?>)ClassPath.ClassInfo::load).filter((Predicate<? super Object>)ModuleReflectionUtil::isCheckstyleModule).collect((Collector<? super Object, ?, Set<Class<?>>>)Collectors.toSet());\n+    public static Set<Class<?>> getCheckstyleModules(final Collection<String> collection, final ClassLoader classLoader) throws IOException {\n+        return collection.stream().flatMap(s -> {\n+            ClassPath.from(classLoader2);\n+            return classPath.getTopLevelClasses(s).stream();\n+        }).map((Function<? super Object, ?>)ClassPath.ClassInfo::load).filter((Predicate<? super Object>)ModuleReflectionUtil::isCheckstyleModule).collect((Collector<? super Object, ?, Set<Class<?>>>)Collectors.toSet());\n     }\n     \n     public static boolean isCheckstyleModule(final Class<?> clazz) {\n         return AbstractAutomaticBean.class.isAssignableFrom(clazz) && !Modifier.isAbstract(clazz.getModifiers()) && hasDefaultConstructor(clazz) && isNotXpathFileGenerator(clazz);\n     }\n     \n     private static boolean hasDefaultConstructor(final Class<?> clazz) {\n-        boolean result = false;\n-        for (final Constructor<?> constructor : clazz.getDeclaredConstructors()) {\n-            if (constructor.getParameterCount() == 0) {\n-                result = true;\n+        boolean b = false;\n+        final Constructor[] declaredConstructors = clazz.getDeclaredConstructors();\n+        for (int length = declaredConstructors.length, i = 0; i < length; ++i) {\n+            if (declaredConstructors[i].getParameterCount() == 0) {\n+                b = true;\n                 break;\n             }\n         }\n-        return result;\n+        return b;\n     }\n     \n     public static boolean isCheckstyleTreeWalkerCheck(final Class<?> clazz) {\n         return AbstractCheck.class.isAssignableFrom(clazz);\n     }\n     \n     public static boolean isFileSetModule(final Class<?> clazz) {\n"}]}
