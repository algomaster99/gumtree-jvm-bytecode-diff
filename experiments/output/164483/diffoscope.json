{"diffoscope-json-version": 1, "source1": "first/TarFile$BoundedTarEntryInputStream.class", "source2": "second/TarFile$BoundedTarEntryInputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,52 +1,52 @@\n-  SHA-256 checksum 56654f063af853f40684cc3b2381722f6851ee0d125167d5c4d52948566c8679\n+  SHA-256 checksum 11e14c1a60d64849cbd42d57893abe0e6cced7d4da6311bd549320fd3420e380\n   Compiled from \"TarFile.java\"\n final class org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream extends org.apache.commons.compress.utils.BoundedArchiveInputStream\n   minor version: 0\n-  major version: 52\n+  major version: 53\n   flags: (0x0030) ACC_FINAL, ACC_SUPER\n   this_class: #34                         // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n   super_class: #35                        // org/apache/commons/compress/utils/BoundedArchiveInputStream\n   interfaces: 0, fields: 5, methods: 4, attributes: 2\n Constant pool:\n-    #1 = Fieldref           #34.#86       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.this$0:Lorg/apache/commons/compress/archivers/tar/TarFile;\n-    #2 = Methodref          #87.#88       // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n-    #3 = Methodref          #87.#89       // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getRealSize:()J\n-    #4 = Methodref          #35.#90       // org/apache/commons/compress/utils/BoundedArchiveInputStream.\"<init>\":(JJ)V\n-    #5 = InterfaceMethodref #91.#92       // java/nio/channels/SeekableByteChannel.size:()J\n-    #6 = Methodref          #87.#93       // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n-    #7 = Class              #94           // java/io/IOException\n-    #8 = String             #95           // entry size exceeds archive size\n-    #9 = Methodref          #7.#96        // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #10 = Fieldref           #34.#97       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-   #11 = Fieldref           #34.#98       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.channel:Ljava/nio/channels/SeekableByteChannel;\n-   #12 = Fieldref           #34.#99       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.entryOffset:J\n-   #13 = Methodref          #87.#100      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSparse:()Z\n-   #14 = Methodref          #101.#102     // java/nio/ByteBuffer.limit:()I\n-   #15 = Methodref          #34.#103      // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.readSparse:(JLjava/nio/ByteBuffer;I)I\n-   #16 = Methodref          #34.#104      // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.readArchive:(JLjava/nio/ByteBuffer;)I\n-   #17 = Methodref          #101.#105     // java/nio/ByteBuffer.array:()[B\n-   #18 = String             #106          // Truncated TAR archive\n-   #19 = Methodref          #107.#108     // org/apache/commons/compress/archivers/tar/TarFile.setAtEOF:(Z)V\n-   #20 = Methodref          #101.#109     // java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n-   #21 = Methodref          #107.#110     // org/apache/commons/compress/archivers/tar/TarFile.access$000:(Lorg/apache/commons/compress/archivers/tar/TarFile;)Ljava/util/Map;\n-   #22 = Methodref          #87.#111      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getName:()Ljava/lang/String;\n-   #23 = InterfaceMethodref #112.#113     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n-   #24 = Class              #114          // java/util/List\n-   #25 = InterfaceMethodref #24.#115      // java/util/List.isEmpty:()Z\n-   #26 = Fieldref           #34.#116      // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.currentSparseInputStreamIndex:I\n-   #27 = InterfaceMethodref #24.#117      // java/util/List.size:()I\n-   #28 = InterfaceMethodref #24.#118      // java/util/List.get:(I)Ljava/lang/Object;\n-   #29 = Class              #119          // java/io/InputStream\n-   #30 = Methodref          #29.#120      // java/io/InputStream.read:([B)I\n-   #31 = Methodref          #101.#121     // java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n-   #32 = InterfaceMethodref #91.#122      // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n-   #33 = InterfaceMethodref #91.#123      // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n-   #34 = Class              #124          // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n-   #35 = Class              #125          // org/apache/commons/compress/utils/BoundedArchiveInputStream\n+    #1 = Fieldref           #34.#83       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.this$0:Lorg/apache/commons/compress/archivers/tar/TarFile;\n+    #2 = Methodref          #57.#84       // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J\n+    #3 = Methodref          #57.#85       // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getRealSize:()J\n+    #4 = Methodref          #35.#86       // org/apache/commons/compress/utils/BoundedArchiveInputStream.\"<init>\":(JJ)V\n+    #5 = InterfaceMethodref #58.#87       // java/nio/channels/SeekableByteChannel.size:()J\n+    #6 = Methodref          #57.#88       // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J\n+    #7 = Class              #89           // java/io/IOException\n+    #8 = String             #90           // entry size exceeds archive size\n+    #9 = Methodref          #7.#91        // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+   #10 = Fieldref           #34.#92       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+   #11 = Fieldref           #34.#93       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.channel:Ljava/nio/channels/SeekableByteChannel;\n+   #12 = Fieldref           #34.#94       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.entryOffset:J\n+   #13 = Methodref          #57.#95       // org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSparse:()Z\n+   #14 = Methodref          #96.#97       // java/nio/ByteBuffer.limit:()I\n+   #15 = Methodref          #34.#98       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.readSparse:(JLjava/nio/ByteBuffer;I)I\n+   #16 = Methodref          #34.#99       // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.readArchive:(JLjava/nio/ByteBuffer;)I\n+   #17 = Methodref          #96.#100      // java/nio/ByteBuffer.array:()[B\n+   #18 = String             #101          // Truncated TAR archive\n+   #19 = Methodref          #56.#102      // org/apache/commons/compress/archivers/tar/TarFile.setAtEOF:(Z)V\n+   #20 = Methodref          #96.#103      // java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n+   #21 = Methodref          #56.#104      // org/apache/commons/compress/archivers/tar/TarFile.access$000:(Lorg/apache/commons/compress/archivers/tar/TarFile;)Ljava/util/Map;\n+   #22 = Methodref          #57.#105      // org/apache/commons/compress/archivers/tar/TarArchiveEntry.getName:()Ljava/lang/String;\n+   #23 = InterfaceMethodref #106.#107     // java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;\n+   #24 = Class              #108          // java/util/List\n+   #25 = InterfaceMethodref #24.#109      // java/util/List.isEmpty:()Z\n+   #26 = Fieldref           #34.#110      // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream.currentSparseInputStreamIndex:I\n+   #27 = InterfaceMethodref #24.#111      // java/util/List.size:()I\n+   #28 = InterfaceMethodref #24.#112      // java/util/List.get:(I)Ljava/lang/Object;\n+   #29 = Class              #113          // java/io/InputStream\n+   #30 = Methodref          #29.#114      // java/io/InputStream.read:([B)I\n+   #31 = Methodref          #96.#115      // java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;\n+   #32 = InterfaceMethodref #58.#116      // java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;\n+   #33 = InterfaceMethodref #58.#117      // java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I\n+   #34 = Class              #118          // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n+   #35 = Class              #119          // org/apache/commons/compress/utils/BoundedArchiveInputStream\n    #36 = Utf8               channel\n    #37 = Utf8               Ljava/nio/channels/SeekableByteChannel;\n    #38 = Utf8               entry\n    #39 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n    #40 = Utf8               entryOffset\n    #41 = Utf8               J\n    #42 = Utf8               currentSparseInputStreamIndex\n@@ -59,120 +59,114 @@\n    #49 = Utf8               LineNumberTable\n    #50 = Utf8               LocalVariableTable\n    #51 = Utf8               this\n    #52 = Utf8               BoundedTarEntryInputStream\n    #53 = Utf8               InnerClasses\n    #54 = Utf8               Lorg/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream;\n    #55 = Utf8               StackMapTable\n-   #56 = Class              #124          // org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n-   #57 = Class              #126          // org/apache/commons/compress/archivers/tar/TarFile\n-   #58 = Class              #127          // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-   #59 = Class              #128          // java/nio/channels/SeekableByteChannel\n-   #60 = Utf8               Exceptions\n-   #61 = Utf8               read\n-   #62 = Utf8               (JLjava/nio/ByteBuffer;)I\n-   #63 = Utf8               totalRead\n-   #64 = Utf8               pos\n-   #65 = Utf8               buf\n-   #66 = Utf8               Ljava/nio/ByteBuffer;\n-   #67 = Utf8               readSparse\n-   #68 = Utf8               (JLjava/nio/ByteBuffer;I)I\n-   #69 = Utf8               readLenOfNext\n-   #70 = Utf8               numToRead\n-   #71 = Utf8               entrySparseInputStreams\n-   #72 = Utf8               Ljava/util/List;\n-   #73 = Utf8               currentInputStream\n-   #74 = Utf8               Ljava/io/InputStream;\n-   #75 = Utf8               bufArray\n-   #76 = Utf8               [B\n-   #77 = Utf8               readLen\n-   #78 = Utf8               LocalVariableTypeTable\n-   #79 = Utf8               Ljava/util/List<Ljava/io/InputStream;>;\n-   #80 = Class              #114          // java/util/List\n-   #81 = Class              #119          // java/io/InputStream\n-   #82 = Class              #76           // \"[B\"\n-   #83 = Utf8               readArchive\n-   #84 = Utf8               SourceFile\n-   #85 = Utf8               TarFile.java\n-   #86 = NameAndType        #44:#45       // this$0:Lorg/apache/commons/compress/archivers/tar/TarFile;\n-   #87 = Class              #127          // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-   #88 = NameAndType        #129:#130     // getDataOffset:()J\n-   #89 = NameAndType        #131:#130     // getRealSize:()J\n-   #90 = NameAndType        #46:#132      // \"<init>\":(JJ)V\n-   #91 = Class              #128          // java/nio/channels/SeekableByteChannel\n-   #92 = NameAndType        #133:#130     // size:()J\n-   #93 = NameAndType        #134:#130     // getSize:()J\n-   #94 = Utf8               java/io/IOException\n-   #95 = Utf8               entry size exceeds archive size\n-   #96 = NameAndType        #46:#135      // \"<init>\":(Ljava/lang/String;)V\n-   #97 = NameAndType        #38:#39       // entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n-   #98 = NameAndType        #36:#37       // channel:Ljava/nio/channels/SeekableByteChannel;\n-   #99 = NameAndType        #40:#41       // entryOffset:J\n-  #100 = NameAndType        #136:#137     // isSparse:()Z\n-  #101 = Class              #138          // java/nio/ByteBuffer\n-  #102 = NameAndType        #139:#140     // limit:()I\n-  #103 = NameAndType        #67:#68       // readSparse:(JLjava/nio/ByteBuffer;I)I\n-  #104 = NameAndType        #83:#62       // readArchive:(JLjava/nio/ByteBuffer;)I\n-  #105 = NameAndType        #141:#142     // array:()[B\n-  #106 = Utf8               Truncated TAR archive\n-  #107 = Class              #126          // org/apache/commons/compress/archivers/tar/TarFile\n-  #108 = NameAndType        #143:#144     // setAtEOF:(Z)V\n-  #109 = NameAndType        #145:#146     // flip:()Ljava/nio/Buffer;\n-  #110 = NameAndType        #147:#148     // access$000:(Lorg/apache/commons/compress/archivers/tar/TarFile;)Ljava/util/Map;\n-  #111 = NameAndType        #149:#150     // getName:()Ljava/lang/String;\n-  #112 = Class              #151          // java/util/Map\n-  #113 = NameAndType        #152:#153     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n-  #114 = Utf8               java/util/List\n-  #115 = NameAndType        #154:#137     // isEmpty:()Z\n-  #116 = NameAndType        #42:#43       // currentSparseInputStreamIndex:I\n-  #117 = NameAndType        #133:#140     // size:()I\n-  #118 = NameAndType        #152:#155     // get:(I)Ljava/lang/Object;\n-  #119 = Utf8               java/io/InputStream\n-  #120 = NameAndType        #61:#156      // read:([B)I\n-  #121 = NameAndType        #157:#158     // put:([BII)Ljava/nio/ByteBuffer;\n-  #122 = NameAndType        #159:#160     // position:(J)Ljava/nio/channels/SeekableByteChannel;\n-  #123 = NameAndType        #61:#161      // read:(Ljava/nio/ByteBuffer;)I\n-  #124 = Utf8               org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n-  #125 = Utf8               org/apache/commons/compress/utils/BoundedArchiveInputStream\n-  #126 = Utf8               org/apache/commons/compress/archivers/tar/TarFile\n-  #127 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveEntry\n-  #128 = Utf8               java/nio/channels/SeekableByteChannel\n-  #129 = Utf8               getDataOffset\n-  #130 = Utf8               ()J\n-  #131 = Utf8               getRealSize\n-  #132 = Utf8               (JJ)V\n-  #133 = Utf8               size\n-  #134 = Utf8               getSize\n-  #135 = Utf8               (Ljava/lang/String;)V\n-  #136 = Utf8               isSparse\n-  #137 = Utf8               ()Z\n-  #138 = Utf8               java/nio/ByteBuffer\n-  #139 = Utf8               limit\n-  #140 = Utf8               ()I\n-  #141 = Utf8               array\n-  #142 = Utf8               ()[B\n-  #143 = Utf8               setAtEOF\n-  #144 = Utf8               (Z)V\n-  #145 = Utf8               flip\n-  #146 = Utf8               ()Ljava/nio/Buffer;\n-  #147 = Utf8               access$000\n-  #148 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarFile;)Ljava/util/Map;\n-  #149 = Utf8               getName\n-  #150 = Utf8               ()Ljava/lang/String;\n-  #151 = Utf8               java/util/Map\n-  #152 = Utf8               get\n-  #153 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n-  #154 = Utf8               isEmpty\n-  #155 = Utf8               (I)Ljava/lang/Object;\n-  #156 = Utf8               ([B)I\n-  #157 = Utf8               put\n-  #158 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n-  #159 = Utf8               position\n-  #160 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n-  #161 = Utf8               (Ljava/nio/ByteBuffer;)I\n+   #56 = Class              #120          // org/apache/commons/compress/archivers/tar/TarFile\n+   #57 = Class              #121          // org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+   #58 = Class              #122          // java/nio/channels/SeekableByteChannel\n+   #59 = Utf8               Exceptions\n+   #60 = Utf8               read\n+   #61 = Utf8               (JLjava/nio/ByteBuffer;)I\n+   #62 = Utf8               totalRead\n+   #63 = Utf8               pos\n+   #64 = Utf8               buf\n+   #65 = Utf8               Ljava/nio/ByteBuffer;\n+   #66 = Utf8               readSparse\n+   #67 = Utf8               (JLjava/nio/ByteBuffer;I)I\n+   #68 = Utf8               readLenOfNext\n+   #69 = Utf8               numToRead\n+   #70 = Utf8               entrySparseInputStreams\n+   #71 = Utf8               Ljava/util/List;\n+   #72 = Utf8               currentInputStream\n+   #73 = Utf8               Ljava/io/InputStream;\n+   #74 = Utf8               bufArray\n+   #75 = Utf8               [B\n+   #76 = Utf8               readLen\n+   #77 = Utf8               LocalVariableTypeTable\n+   #78 = Utf8               Ljava/util/List<Ljava/io/InputStream;>;\n+   #79 = Class              #75           // \"[B\"\n+   #80 = Utf8               readArchive\n+   #81 = Utf8               SourceFile\n+   #82 = Utf8               TarFile.java\n+   #83 = NameAndType        #44:#45       // this$0:Lorg/apache/commons/compress/archivers/tar/TarFile;\n+   #84 = NameAndType        #123:#124     // getDataOffset:()J\n+   #85 = NameAndType        #125:#124     // getRealSize:()J\n+   #86 = NameAndType        #46:#126      // \"<init>\":(JJ)V\n+   #87 = NameAndType        #127:#124     // size:()J\n+   #88 = NameAndType        #128:#124     // getSize:()J\n+   #89 = Utf8               java/io/IOException\n+   #90 = Utf8               entry size exceeds archive size\n+   #91 = NameAndType        #46:#129      // \"<init>\":(Ljava/lang/String;)V\n+   #92 = NameAndType        #38:#39       // entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n+   #93 = NameAndType        #36:#37       // channel:Ljava/nio/channels/SeekableByteChannel;\n+   #94 = NameAndType        #40:#41       // entryOffset:J\n+   #95 = NameAndType        #130:#131     // isSparse:()Z\n+   #96 = Class              #132          // java/nio/ByteBuffer\n+   #97 = NameAndType        #133:#134     // limit:()I\n+   #98 = NameAndType        #66:#67       // readSparse:(JLjava/nio/ByteBuffer;I)I\n+   #99 = NameAndType        #80:#61       // readArchive:(JLjava/nio/ByteBuffer;)I\n+  #100 = NameAndType        #135:#136     // array:()[B\n+  #101 = Utf8               Truncated TAR archive\n+  #102 = NameAndType        #137:#138     // setAtEOF:(Z)V\n+  #103 = NameAndType        #139:#140     // flip:()Ljava/nio/ByteBuffer;\n+  #104 = NameAndType        #141:#142     // access$000:(Lorg/apache/commons/compress/archivers/tar/TarFile;)Ljava/util/Map;\n+  #105 = NameAndType        #143:#144     // getName:()Ljava/lang/String;\n+  #106 = Class              #145          // java/util/Map\n+  #107 = NameAndType        #146:#147     // get:(Ljava/lang/Object;)Ljava/lang/Object;\n+  #108 = Utf8               java/util/List\n+  #109 = NameAndType        #148:#131     // isEmpty:()Z\n+  #110 = NameAndType        #42:#43       // currentSparseInputStreamIndex:I\n+  #111 = NameAndType        #127:#134     // size:()I\n+  #112 = NameAndType        #146:#149     // get:(I)Ljava/lang/Object;\n+  #113 = Utf8               java/io/InputStream\n+  #114 = NameAndType        #60:#150      // read:([B)I\n+  #115 = NameAndType        #151:#152     // put:([BII)Ljava/nio/ByteBuffer;\n+  #116 = NameAndType        #153:#154     // position:(J)Ljava/nio/channels/SeekableByteChannel;\n+  #117 = NameAndType        #60:#155      // read:(Ljava/nio/ByteBuffer;)I\n+  #118 = Utf8               org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream\n+  #119 = Utf8               org/apache/commons/compress/utils/BoundedArchiveInputStream\n+  #120 = Utf8               org/apache/commons/compress/archivers/tar/TarFile\n+  #121 = Utf8               org/apache/commons/compress/archivers/tar/TarArchiveEntry\n+  #122 = Utf8               java/nio/channels/SeekableByteChannel\n+  #123 = Utf8               getDataOffset\n+  #124 = Utf8               ()J\n+  #125 = Utf8               getRealSize\n+  #126 = Utf8               (JJ)V\n+  #127 = Utf8               size\n+  #128 = Utf8               getSize\n+  #129 = Utf8               (Ljava/lang/String;)V\n+  #130 = Utf8               isSparse\n+  #131 = Utf8               ()Z\n+  #132 = Utf8               java/nio/ByteBuffer\n+  #133 = Utf8               limit\n+  #134 = Utf8               ()I\n+  #135 = Utf8               array\n+  #136 = Utf8               ()[B\n+  #137 = Utf8               setAtEOF\n+  #138 = Utf8               (Z)V\n+  #139 = Utf8               flip\n+  #140 = Utf8               ()Ljava/nio/ByteBuffer;\n+  #141 = Utf8               access$000\n+  #142 = Utf8               (Lorg/apache/commons/compress/archivers/tar/TarFile;)Ljava/util/Map;\n+  #143 = Utf8               getName\n+  #144 = Utf8               ()Ljava/lang/String;\n+  #145 = Utf8               java/util/Map\n+  #146 = Utf8               get\n+  #147 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;\n+  #148 = Utf8               isEmpty\n+  #149 = Utf8               (I)Ljava/lang/Object;\n+  #150 = Utf8               ([B)I\n+  #151 = Utf8               put\n+  #152 = Utf8               ([BII)Ljava/nio/ByteBuffer;\n+  #153 = Utf8               position\n+  #154 = Utf8               (J)Ljava/nio/channels/SeekableByteChannel;\n+  #155 = Utf8               (Ljava/nio/ByteBuffer;)I\n {\n   private final java.nio.channels.SeekableByteChannel channel;\n     descriptor: Ljava/nio/channels/SeekableByteChannel;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   private final org.apache.commons.compress.archivers.tar.TarArchiveEntry entry;\n     descriptor: Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;\n@@ -299,15 +293,15 @@\n         89: dup\n         90: getfield      #12                 // Field entryOffset:J\n         93: iload         4\n         95: i2l\n         96: ladd\n         97: putfield      #12                 // Field entryOffset:J\n        100: aload_3\n-       101: invokevirtual #20                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;\n+       101: invokevirtual #20                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/ByteBuffer;\n        104: pop\n        105: iload         4\n        107: ireturn\n       LineNumberTable:\n         line 681: 0\n         line 682: 15\n         line 686: 17\n@@ -531,8 +525,8 @@\n             0      22     1   pos   J\n             0      22     3   buf   Ljava/nio/ByteBuffer;\n     Exceptions:\n       throws java.io.IOException\n }\n SourceFile: \"TarFile.java\"\n InnerClasses:\n-  private final #52= #34 of #107;         // BoundedTarEntryInputStream=class org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream of class org/apache/commons/compress/archivers/tar/TarFile\n+  private final #52= #34 of #56;          // BoundedTarEntryInputStream=class org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream of class org/apache/commons/compress/archivers/tar/TarFile\n"}]}
