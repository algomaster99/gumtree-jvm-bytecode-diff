{"diffoscope-json-version": 1, "source1": "first/LocalVariableInstruction.class", "source2": "second/LocalVariableInstruction.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -26,64 +26,64 @@\n     \n     LocalVariableInstruction() {\n         this.n = -1;\n         this.c_tag = -1;\n         this.canon_tag = -1;\n     }\n     \n-    protected LocalVariableInstruction(final short opcode, final short c_tag, final int n) {\n-        super(opcode, (short)2);\n+    protected LocalVariableInstruction(final short canon_tag, final short c_tag, final int index) {\n+        super(canon_tag, (short)2);\n         this.n = -1;\n         this.c_tag = -1;\n         this.canon_tag = -1;\n         this.c_tag = c_tag;\n-        this.canon_tag = opcode;\n-        this.setIndex(n);\n+        this.canon_tag = canon_tag;\n+        this.setIndex(index);\n     }\n     \n-    public void dump(final DataOutputStream out) throws IOException {\n+    public void dump(final DataOutputStream dataOutputStream) throws IOException {\n         if (this.wide()) {\n-            out.writeByte(196);\n+            dataOutputStream.writeByte(196);\n         }\n-        out.writeByte(super.getOpcode());\n+        dataOutputStream.writeByte(super.getOpcode());\n         if (super.getLength() > 1) {\n             if (this.wide()) {\n-                out.writeShort(this.n);\n+                dataOutputStream.writeShort(this.n);\n             }\n             else {\n-                out.writeByte(this.n);\n+                dataOutputStream.writeByte(this.n);\n             }\n         }\n     }\n     \n-    public String toString(final boolean verbose) {\n-        final short _opcode = super.getOpcode();\n-        if ((_opcode >= 26 && _opcode <= 45) || (_opcode >= 59 && _opcode <= 78)) {\n-            return super.toString(verbose);\n+    public String toString(final boolean b) {\n+        final short opcode = super.getOpcode();\n+        if ((opcode >= 26 && opcode <= 45) || (opcode >= 59 && opcode <= 78)) {\n+            return super.toString(b);\n         }\n-        return super.toString(verbose) + \" \" + this.n;\n+        return super.toString(b) + \" \" + this.n;\n     }\n     \n-    protected void initFromFile(final ByteSequence bytes, final boolean wide) throws IOException {\n-        if (wide) {\n-            this.n = bytes.readUnsignedShort();\n+    protected void initFromFile(final ByteSequence byteSequence, final boolean b) throws IOException {\n+        if (b) {\n+            this.n = byteSequence.readUnsignedShort();\n             super.setLength(4);\n         }\n         else {\n-            final short _opcode = super.getOpcode();\n-            if ((_opcode >= 21 && _opcode <= 25) || (_opcode >= 54 && _opcode <= 58)) {\n-                this.n = bytes.readUnsignedByte();\n+            final short opcode = super.getOpcode();\n+            if ((opcode >= 21 && opcode <= 25) || (opcode >= 54 && opcode <= 58)) {\n+                this.n = byteSequence.readUnsignedByte();\n                 super.setLength(2);\n             }\n-            else if (_opcode <= 45) {\n-                this.n = (_opcode - 26) % 4;\n+            else if (opcode <= 45) {\n+                this.n = (opcode - 26) % 4;\n                 super.setLength(1);\n             }\n             else {\n-                this.n = (_opcode - 59) % 4;\n+                this.n = (opcode - 59) % 4;\n                 super.setLength(1);\n             }\n         }\n     }\n     \n     public final int getIndex() {\n         return this.n;\n@@ -108,15 +108,15 @@\n         }\n     }\n     \n     public short getCanonicalTag() {\n         return this.canon_tag;\n     }\n     \n-    public Type getType(final ConstantPoolGen cp) {\n+    public Type getType(final ConstantPoolGen constantPoolGen) {\n         switch (this.canon_tag) {\n             case 21:\n             case 54: {\n                 return (Type)Type.INT;\n             }\n             case 22:\n             case 55: {\n"}]}
