{"diffoscope-json-version": 1, "source1": "first/PropertyListConfiguration$DateFieldParser.class", "source2": "second/PropertyListConfiguration$DateFieldParser.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -5,33 +5,33 @@\n \n private static class DateFieldParser extends PropertyListConfiguration.DateComponentParser\n {\n     private final int calendarField;\n     private final int length;\n     private final int offset;\n     \n-    public DateFieldParser(final int calFld, final int len) {\n-        this(calFld, len, 0);\n+    public DateFieldParser(final int n, final int n2) {\n+        this(n, n2, 0);\n     }\n     \n-    public DateFieldParser(final int calFld, final int len, final int ofs) {\n+    public DateFieldParser(final int calendarField, final int length, final int offset) {\n         super((PropertyListConfiguration.PropertyListConfiguration$1)null);\n-        this.calendarField = calFld;\n-        this.length = len;\n-        this.offset = ofs;\n+        this.calendarField = calendarField;\n+        this.length = length;\n+        this.offset = offset;\n     }\n     \n-    public void formatComponent(final StringBuilder buf, final Calendar cal) {\n-        this.padNum(buf, cal.get(this.calendarField) + this.offset, this.length);\n+    public void formatComponent(final StringBuilder sb, final Calendar calendar) {\n+        this.padNum(sb, calendar.get(this.calendarField) + this.offset, this.length);\n     }\n     \n-    public int parseComponent(final String s, final int index, final Calendar cal) throws ParseException {\n-        this.checkLength(s, index, this.length);\n+    public int parseComponent(final String str, final int n, final Calendar calendar) throws ParseException {\n+        this.checkLength(str, n, this.length);\n         try {\n-            cal.set(this.calendarField, Integer.parseInt(s.substring(index, index + this.length)) - this.offset);\n+            calendar.set(this.calendarField, Integer.parseInt(str.substring(n, n + this.length)) - this.offset);\n             return this.length;\n         }\n-        catch (final NumberFormatException nfex) {\n-            throw new ParseException(\"Invalid number: \" + s + \", index \" + index);\n+        catch (final NumberFormatException ex) {\n+            throw new ParseException(\"Invalid number: \" + str + \", index \" + n);\n         }\n     }\n }\n"}]}
