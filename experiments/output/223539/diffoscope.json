{"diffoscope-json-version": 1, "source1": "first/DetailAstImpl.class", "source2": "second/DetailAstImpl.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -26,103 +26,103 @@\n     \n     public DetailAstImpl() {\n         this.lineNo = Integer.MIN_VALUE;\n         this.columnNo = Integer.MIN_VALUE;\n         this.childCount = Integer.MIN_VALUE;\n     }\n     \n-    public void initialize(final int tokenType, final String tokenText) {\n-        this.type = tokenType;\n-        this.text = tokenText;\n+    public void initialize(final int type, final String text) {\n+        this.type = type;\n+        this.text = text;\n     }\n     \n     public void initialize(final Token token) {\n         this.text = token.getText();\n         this.type = token.getType();\n         this.lineNo = token.getLine();\n         this.columnNo = token.getCharPositionInLine();\n     }\n     \n-    public void addPreviousSibling(final DetailAST ast) {\n+    public void addPreviousSibling(final DetailAST detailAST) {\n         this.clearBranchTokenTypes();\n         clearChildCountCache(this.parent);\n-        if (ast != null) {\n-            final DetailAstImpl previousSiblingNode = this.previousSibling;\n-            final DetailAstImpl astImpl = (DetailAstImpl)ast;\n-            if (previousSiblingNode != null) {\n-                previousSiblingNode.setNextSibling((DetailAST)astImpl);\n+        if (detailAST != null) {\n+            final DetailAstImpl previousSibling = this.previousSibling;\n+            final DetailAstImpl detailAstImpl = (DetailAstImpl)detailAST;\n+            if (previousSibling != null) {\n+                previousSibling.setNextSibling((DetailAST)detailAstImpl);\n             }\n             else if (this.parent != null) {\n-                this.parent.setFirstChild((DetailAST)astImpl);\n+                this.parent.setFirstChild((DetailAST)detailAstImpl);\n             }\n-            astImpl.setNextSibling((DetailAST)this);\n+            detailAstImpl.setNextSibling((DetailAST)this);\n         }\n     }\n     \n-    public void addNextSibling(final DetailAST ast) {\n+    public void addNextSibling(final DetailAST detailAST) {\n         this.clearBranchTokenTypes();\n         clearChildCountCache(this.parent);\n-        if (ast != null) {\n-            final DetailAstImpl sibling = this.nextSibling;\n-            final DetailAstImpl astImpl = (DetailAstImpl)ast;\n-            if (sibling != null) {\n-                astImpl.setNextSibling((DetailAST)sibling);\n-                sibling.previousSibling = astImpl;\n+        if (detailAST != null) {\n+            final DetailAstImpl nextSibling = this.nextSibling;\n+            final DetailAstImpl detailAstImpl = (DetailAstImpl)detailAST;\n+            if (nextSibling != null) {\n+                detailAstImpl.setNextSibling((DetailAST)nextSibling);\n+                nextSibling.previousSibling = detailAstImpl;\n             }\n-            (astImpl.previousSibling = this).setNextSibling((DetailAST)astImpl);\n+            (detailAstImpl.previousSibling = this).setNextSibling((DetailAST)detailAstImpl);\n         }\n     }\n     \n-    public void addChild(final DetailAST child) {\n+    public void addChild(final DetailAST nextSibling) {\n         this.clearBranchTokenTypes();\n         clearChildCountCache(this);\n-        if (child != null) {\n-            final DetailAstImpl astImpl = (DetailAstImpl)child;\n-            astImpl.setParent(this);\n-            astImpl.previousSibling = (DetailAstImpl)this.getLastChild();\n-        }\n-        DetailAST temp = (DetailAST)this.firstChild;\n-        if (temp == null) {\n-            this.firstChild = (DetailAstImpl)child;\n+        if (nextSibling != null) {\n+            final DetailAstImpl detailAstImpl = (DetailAstImpl)nextSibling;\n+            detailAstImpl.setParent(this);\n+            detailAstImpl.previousSibling = (DetailAstImpl)this.getLastChild();\n+        }\n+        Object o = this.firstChild;\n+        if (o == null) {\n+            this.firstChild = (DetailAstImpl)nextSibling;\n         }\n         else {\n-            while (temp.getNextSibling() != null) {\n-                temp = temp.getNextSibling();\n+            while (((DetailAST)o).getNextSibling() != null) {\n+                o = ((DetailAST)o).getNextSibling();\n             }\n-            ((DetailAstImpl)temp).setNextSibling(child);\n+            ((DetailAstImpl)o).setNextSibling(nextSibling);\n         }\n     }\n     \n     public int getChildCount() {\n         if (this.childCount == Integer.MIN_VALUE) {\n             this.childCount = 0;\n-            for (DetailAST child = (DetailAST)this.firstChild; child != null; child = child.getNextSibling()) {\n+            for (Object o = this.firstChild; o != null; o = ((DetailAST)o).getNextSibling()) {\n                 ++this.childCount;\n             }\n         }\n         return this.childCount;\n     }\n     \n-    public int getChildCount(final int tokenType) {\n-        int count = 0;\n-        for (DetailAST ast = (DetailAST)this.firstChild; ast != null; ast = ast.getNextSibling()) {\n-            if (ast.getType() == tokenType) {\n-                ++count;\n+    public int getChildCount(final int n) {\n+        int n2 = 0;\n+        for (Object o = this.firstChild; o != null; o = ((DetailAST)o).getNextSibling()) {\n+            if (((DetailAST)o).getType() == n) {\n+                ++n2;\n             }\n         }\n-        return count;\n+        return n2;\n     }\n     \n     private void setParent(final DetailAstImpl parent) {\n-        DetailAstImpl instance = this;\n+        DetailAstImpl nextSibling = this;\n         do {\n-            instance.clearBranchTokenTypes();\n-            instance.parent = parent;\n-            instance = instance.nextSibling;\n-        } while (instance != null);\n+            nextSibling.clearBranchTokenTypes();\n+            nextSibling.parent = parent;\n+            nextSibling = nextSibling.nextSibling;\n+        } while (nextSibling != null);\n     }\n     \n     public DetailAST getParent() {\n         return (DetailAST)this.parent;\n     }\n     \n     public String getText() {\n@@ -138,105 +138,104 @@\n     }\n     \n     public void setType(final int type) {\n         this.type = type;\n     }\n     \n     public int getLineNo() {\n-        int resultNo = -1;\n+        int n = -1;\n         if (this.lineNo == Integer.MIN_VALUE) {\n-            resultNo = findLineNo((DetailAST)this.firstChild);\n-            if (resultNo == -1) {\n-                resultNo = findLineNo((DetailAST)this.nextSibling);\n+            n = findLineNo((DetailAST)this.firstChild);\n+            if (n == -1) {\n+                n = findLineNo((DetailAST)this.nextSibling);\n             }\n         }\n-        if (resultNo == -1) {\n-            resultNo = this.lineNo;\n+        if (n == -1) {\n+            n = this.lineNo;\n         }\n-        return resultNo;\n+        return n;\n     }\n     \n     public void setLineNo(final int lineNo) {\n         this.lineNo = lineNo;\n     }\n     \n     public int getColumnNo() {\n-        int resultNo = -1;\n+        int n = -1;\n         if (this.columnNo == Integer.MIN_VALUE) {\n-            resultNo = findColumnNo((DetailAST)this.firstChild);\n-            if (resultNo == -1) {\n-                resultNo = findColumnNo((DetailAST)this.nextSibling);\n+            n = findColumnNo((DetailAST)this.firstChild);\n+            if (n == -1) {\n+                n = findColumnNo((DetailAST)this.nextSibling);\n             }\n         }\n-        if (resultNo == -1) {\n-            resultNo = this.columnNo;\n+        if (n == -1) {\n+            n = this.columnNo;\n         }\n-        return resultNo;\n+        return n;\n     }\n     \n     public void setColumnNo(final int columnNo) {\n         this.columnNo = columnNo;\n     }\n     \n     public DetailAST getLastChild() {\n-        DetailAstImpl ast;\n-        for (ast = this.firstChild; ast != null && ast.nextSibling != null; ast = ast.nextSibling) {}\n-        return (DetailAST)ast;\n+        DetailAstImpl detailAstImpl;\n+        for (detailAstImpl = this.firstChild; detailAstImpl != null && detailAstImpl.nextSibling != null; detailAstImpl = detailAstImpl.nextSibling) {}\n+        return (DetailAST)detailAstImpl;\n     }\n     \n-    private static int findColumnNo(final DetailAST ast) {\n-        int resultNo = -1;\n-        for (DetailAST node = ast; node != null; node = node.getNextSibling()) {\n-            if (!TokenUtil.isCommentType(node.getType())) {\n-                resultNo = node.getColumnNo();\n+    private static int findColumnNo(final DetailAST detailAST) {\n+        int columnNo = -1;\n+        for (DetailAST nextSibling = detailAST; nextSibling != null; nextSibling = nextSibling.getNextSibling()) {\n+            if (!TokenUtil.isCommentType(nextSibling.getType())) {\n+                columnNo = nextSibling.getColumnNo();\n                 break;\n             }\n         }\n-        return resultNo;\n+        return columnNo;\n     }\n     \n-    private static int findLineNo(final DetailAST ast) {\n-        int resultNo = -1;\n-        for (DetailAST node = ast; node != null; node = node.getNextSibling()) {\n-            if (!TokenUtil.isCommentType(node.getType())) {\n-                resultNo = node.getLineNo();\n+    private static int findLineNo(final DetailAST detailAST) {\n+        int lineNo = -1;\n+        for (DetailAST nextSibling = detailAST; nextSibling != null; nextSibling = nextSibling.getNextSibling()) {\n+            if (!TokenUtil.isCommentType(nextSibling.getType())) {\n+                lineNo = nextSibling.getLineNo();\n                 break;\n             }\n         }\n-        return resultNo;\n+        return lineNo;\n     }\n     \n     private BitSet getBranchTokenTypes() {\n         if (this.branchTokenTypes == null) {\n             (this.branchTokenTypes = new BitSet()).set(this.type);\n-            for (DetailAstImpl child = this.firstChild; child != null; child = child.nextSibling) {\n-                final BitSet childTypes = child.getBranchTokenTypes();\n-                this.branchTokenTypes.or(childTypes);\n+            for (DetailAstImpl detailAstImpl = this.firstChild; detailAstImpl != null; detailAstImpl = detailAstImpl.nextSibling) {\n+                this.branchTokenTypes.or(detailAstImpl.getBranchTokenTypes());\n             }\n         }\n         return this.branchTokenTypes;\n     }\n     \n-    public boolean branchContains(final int tokenType) {\n-        return this.getBranchTokenTypes().get(tokenType);\n+    public boolean branchContains(final int bitIndex) {\n+        return this.getBranchTokenTypes().get(bitIndex);\n     }\n     \n     public DetailAST getPreviousSibling() {\n         return (DetailAST)this.previousSibling;\n     }\n     \n-    public DetailAST findFirstToken(final int tokenType) {\n-        DetailAST returnValue = null;\n-        for (DetailAST ast = (DetailAST)this.firstChild; ast != null; ast = ast.getNextSibling()) {\n-            if (ast.getType() == tokenType) {\n-                returnValue = ast;\n+    public DetailAST findFirstToken(final int n) {\n+        DetailAST detailAST = null;\n+        for (Object o = this.firstChild; o != null; o = ((DetailAST)o).getNextSibling()) {\n+            if (((DetailAST)o).getType() == n) {\n+                detailAST = (DetailAST)o;\n                 break;\n             }\n         }\n-        return returnValue;\n+        return detailAST;\n     }\n     \n     @Override\n     public String toString() {\n         return this.text + \"[\" + this.getLineNo() + \"x\" + this.getColumnNo();\n     }\n     \n@@ -252,68 +251,68 @@\n         return this.getChildCount();\n     }\n     \n     public boolean hasChildren() {\n         return this.firstChild != null;\n     }\n     \n-    private static void clearChildCountCache(final DetailAstImpl ast) {\n-        if (ast != null) {\n-            ast.childCount = Integer.MIN_VALUE;\n+    private static void clearChildCountCache(final DetailAstImpl detailAstImpl) {\n+        if (detailAstImpl != null) {\n+            detailAstImpl.childCount = Integer.MIN_VALUE;\n         }\n     }\n     \n     private void clearBranchTokenTypes() {\n-        for (DetailAstImpl prevParent = this.parent; prevParent != null; prevParent = prevParent.parent) {\n-            prevParent.branchTokenTypes = null;\n+        for (DetailAstImpl detailAstImpl = this.parent; detailAstImpl != null; detailAstImpl = detailAstImpl.parent) {\n+            detailAstImpl.branchTokenTypes = null;\n         }\n     }\n     \n-    public void setNextSibling(final DetailAST nextSibling) {\n+    public void setNextSibling(final DetailAST detailAST) {\n         this.clearBranchTokenTypes();\n         clearChildCountCache(this.parent);\n-        this.nextSibling = (DetailAstImpl)nextSibling;\n-        if (nextSibling != null && this.parent != null) {\n-            ((DetailAstImpl)nextSibling).setParent(this.parent);\n+        this.nextSibling = (DetailAstImpl)detailAST;\n+        if (detailAST != null && this.parent != null) {\n+            ((DetailAstImpl)detailAST).setParent(this.parent);\n         }\n-        if (nextSibling != null) {\n-            ((DetailAstImpl)nextSibling).previousSibling = this;\n+        if (detailAST != null) {\n+            ((DetailAstImpl)detailAST).previousSibling = this;\n         }\n     }\n     \n-    public void setFirstChild(final DetailAST firstChild) {\n+    public void setFirstChild(final DetailAST detailAST) {\n         this.clearBranchTokenTypes();\n         clearChildCountCache(this);\n-        this.firstChild = (DetailAstImpl)firstChild;\n-        if (firstChild != null) {\n-            ((DetailAstImpl)firstChild).setParent(this);\n+        this.firstChild = (DetailAstImpl)detailAST;\n+        if (detailAST != null) {\n+            ((DetailAstImpl)detailAST).setParent(this);\n         }\n     }\n     \n     public void removeChildren() {\n         this.firstChild = null;\n     }\n     \n     public List<Token> getHiddenBefore() {\n-        List<Token> returnList = null;\n+        List<Token> unmodifiableList = null;\n         if (this.hiddenBefore != null) {\n-            returnList = UnmodifiableCollectionUtil.unmodifiableList((List)this.hiddenBefore);\n+            unmodifiableList = UnmodifiableCollectionUtil.unmodifiableList((List)this.hiddenBefore);\n         }\n-        return returnList;\n+        return unmodifiableList;\n     }\n     \n     public List<Token> getHiddenAfter() {\n-        List<Token> returnList = null;\n+        List<Token> unmodifiableList = null;\n         if (this.hiddenAfter != null) {\n-            returnList = UnmodifiableCollectionUtil.unmodifiableList((List)this.hiddenAfter);\n+            unmodifiableList = UnmodifiableCollectionUtil.unmodifiableList((List)this.hiddenAfter);\n         }\n-        return returnList;\n+        return unmodifiableList;\n     }\n     \n-    public void setHiddenBefore(final List<Token> hiddenBefore) {\n-        this.hiddenBefore = UnmodifiableCollectionUtil.unmodifiableList((List)hiddenBefore);\n+    public void setHiddenBefore(final List<Token> list) {\n+        this.hiddenBefore = UnmodifiableCollectionUtil.unmodifiableList((List)list);\n     }\n     \n-    public void setHiddenAfter(final List<Token> hiddenAfter) {\n-        this.hiddenAfter = UnmodifiableCollectionUtil.unmodifiableList((List)hiddenAfter);\n+    public void setHiddenAfter(final List<Token> list) {\n+        this.hiddenAfter = UnmodifiableCollectionUtil.unmodifiableList((List)list);\n     }\n }\n"}]}
