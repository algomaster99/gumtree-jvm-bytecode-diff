{"diffoscope-json-version": 1, "source1": "first/RegexpMultilineCheck.class", "source2": "second/RegexpMultilineCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -21,32 +21,31 @@\n     private boolean matchAcrossLines;\n     private MultilineDetector detector;\n     \n     public RegexpMultilineCheck() {\n         this.format = \"$.\";\n     }\n     \n-    public void beginProcessing(final String charset) {\n-        final DetectorOptions options = DetectorOptions.newBuilder().reporter((AbstractViolationReporter)this).compileFlags(this.getRegexCompileFlags()).format(this.format).message(this.message).minimum(this.minimum).maximum(this.maximum).ignoreCase(this.ignoreCase).build();\n-        this.detector = new MultilineDetector(options);\n+    public void beginProcessing(final String s) {\n+        this.detector = new MultilineDetector(DetectorOptions.newBuilder().reporter((AbstractViolationReporter)this).compileFlags(this.getRegexCompileFlags()).format(this.format).message(this.message).minimum(this.minimum).maximum(this.maximum).ignoreCase(this.ignoreCase).build());\n     }\n     \n     protected void processFiltered(final File file, final FileText fileText) {\n         this.detector.processLines(fileText);\n     }\n     \n     private int getRegexCompileFlags() {\n-        int result;\n+        int n;\n         if (this.matchAcrossLines) {\n-            result = 32;\n+            n = 32;\n         }\n         else {\n-            result = 8;\n+            n = 8;\n         }\n-        return result;\n+        return n;\n     }\n     \n     public void setFormat(final String format) {\n         this.format = format;\n     }\n     \n     public void setMessage(final String message) {\n"}]}
