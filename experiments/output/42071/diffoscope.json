{"diffoscope-json-version": 1, "source1": "first/AbstractHierarchicalConfiguration.class", "source2": "second/AbstractHierarchicalConfiguration.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -106,14 +106,15 @@\n             this.fireEvent(ConfigurationEvent.ADD_NODES, key, (Object)nodes, true);\n             this.addNodesInternal(key, nodes);\n             this.fireEvent(ConfigurationEvent.ADD_NODES, key, (Object)nodes, false);\n         }\n         finally {\n             this.endWrite();\n         }\n+        this.endWrite();\n     }\n     \n     protected void addNodesInternal(final String key, final Collection<? extends T> nodes) {\n         this.getModel().addNodes(key, (Collection)nodes, (NodeKeyResolver)this);\n     }\n     \n     protected boolean isEmptyInternal() {\n@@ -161,15 +162,15 @@\n             while (itValues.hasNext()) {\n                 additionalValues.add(itValues.next());\n             }\n         }\n         if (itNodes.hasNext()) {\n             removedItems = new LinkedList<QueryResult<T>>();\n             while (itNodes.hasNext()) {\n-                removedItems.add(itNodes.next());\n+                removedItems.add((QueryResult<T>)(QueryResult)itNodes.next());\n             }\n         }\n         return (NodeUpdateData<T>)new NodeUpdateData((Map)changedValues, (Collection)additionalValues, (Collection)removedItems, key);\n     }\n     \n     public String nodeKey(final T node, final Map<T, String> cache, final NodeHandler<T> handler) {\n         final List<T> path = new LinkedList<T>();\n@@ -196,14 +197,15 @@\n             this.fireEvent(ConfigurationEvent.CLEAR_TREE, key, (Object)null, true);\n             final Object nodes = this.clearTreeInternal(key);\n             this.fireEvent(ConfigurationEvent.CLEAR_TREE, key, nodes, false);\n         }\n         finally {\n             this.endWrite();\n         }\n+        this.endWrite();\n     }\n     \n     protected Object clearTreeInternal(final String key) {\n         return this.getModel().clearTree(key, (NodeKeyResolver)this);\n     }\n     \n     protected void clearPropertyDirect(final String key) {\n@@ -279,24 +281,24 @@\n     \n     protected List<QueryResult<T>> fetchNodeList(final String key) {\n         final NodeHandler<T> nodeHandler = (NodeHandler<T>)this.getModel().getNodeHandler();\n         return (List<QueryResult<T>>)this.resolveKey(nodeHandler.getRootNode(), key, (org.apache.commons.configuration2.tree.NodeHandler<Object>)nodeHandler);\n     }\n     \n     protected boolean nodeDefined(final T node) {\n-        final AbstractHierarchicalConfiguration.DefinedVisitor<T> visitor = (AbstractHierarchicalConfiguration.DefinedVisitor<T>)new AbstractHierarchicalConfiguration.DefinedVisitor((AbstractHierarchicalConfiguration.AbstractHierarchicalConfiguration$1)null);\n+        final AbstractHierarchicalConfiguration.DefinedVisitor<T> visitor = (AbstractHierarchicalConfiguration.DefinedVisitor<T>)new AbstractHierarchicalConfiguration.DefinedVisitor((AbstractHierarchicalConfiguration.DefinedVisitor)null);\n         NodeTreeWalker.INSTANCE.walkBFS((Object)node, (ConfigurationNodeVisitor)visitor, this.getModel().getNodeHandler());\n         return visitor.isDefined();\n     }\n     \n     protected NodeModel<T> getModel() {\n         return this.model;\n     }\n     \n     private Object valueFromResult(final QueryResult<T> result, final NodeHandler<T> handler) {\n         return result.isAttributeResult() ? result.getAttributeValue((NodeHandler)handler) : handler.getValue(result.getNode());\n     }\n     \n     public String toString() {\n-        return super.toString() + \"(\" + this.getRootElementNameInternal() + \")\";\n+        return String.valueOf(super.toString()) + \"(\" + this.getRootElementNameInternal() + \")\";\n     }\n }\n"}]}
