{"diffoscope-json-version": 1, "source1": "first/SuppressWithNearbyTextFilter$Suppression.class", "source2": "second/SuppressWithNearbyTextFilter$Suppression.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,88 +1,79 @@\n \n package com.puppycrawl.tools.checkstyle.filters;\n \n-import java.util.regex.Matcher;\n import com.puppycrawl.tools.checkstyle.api.AuditEvent;\n import java.util.regex.PatternSyntaxException;\n import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n import java.util.regex.Pattern;\n \n private static final class Suppression\n {\n     private final int firstLine;\n     private final int lastLine;\n     private final Pattern eventSourceRegexp;\n     private Pattern eventMessageRegexp;\n     private Pattern eventIdRegexp;\n     \n-    private Suppression(final String text, final int lineNo, final SuppressWithNearbyTextFilter filter) {\n-        final Pattern nearbyTextPattern = filter.nearbyTextPattern;\n-        final String lineRange = filter.lineRange;\n-        String format = \"\";\n+    private Suppression(final String s, final int n, final SuppressWithNearbyTextFilter suppressWithNearbyTextFilter) {\n+        final Pattern nearbyTextPattern = suppressWithNearbyTextFilter.nearbyTextPattern;\n+        final String lineRange = suppressWithNearbyTextFilter.lineRange;\n+        String regex = \"\";\n         try {\n-            format = CommonUtil.fillTemplateWithStringsByRegexp(filter.checkPattern, text, nearbyTextPattern);\n-            this.eventSourceRegexp = Pattern.compile(format);\n-            if (filter.messagePattern != null) {\n-                format = CommonUtil.fillTemplateWithStringsByRegexp(filter.messagePattern, text, nearbyTextPattern);\n-                this.eventMessageRegexp = Pattern.compile(format);\n+            regex = CommonUtil.fillTemplateWithStringsByRegexp(suppressWithNearbyTextFilter.checkPattern, s, nearbyTextPattern);\n+            this.eventSourceRegexp = Pattern.compile(regex);\n+            if (suppressWithNearbyTextFilter.messagePattern != null) {\n+                regex = CommonUtil.fillTemplateWithStringsByRegexp(suppressWithNearbyTextFilter.messagePattern, s, nearbyTextPattern);\n+                this.eventMessageRegexp = Pattern.compile(regex);\n             }\n-            if (filter.idPattern != null) {\n-                format = CommonUtil.fillTemplateWithStringsByRegexp(filter.idPattern, text, nearbyTextPattern);\n-                this.eventIdRegexp = Pattern.compile(format);\n+            if (suppressWithNearbyTextFilter.idPattern != null) {\n+                regex = CommonUtil.fillTemplateWithStringsByRegexp(suppressWithNearbyTextFilter.idPattern, s, nearbyTextPattern);\n+                this.eventIdRegexp = Pattern.compile(regex);\n             }\n-            format = CommonUtil.fillTemplateWithStringsByRegexp(lineRange, text, nearbyTextPattern);\n-            final int range = parseRange(format, lineRange, text);\n-            this.firstLine = Math.min(lineNo, lineNo + range);\n-            this.lastLine = Math.max(lineNo, lineNo + range);\n+            regex = CommonUtil.fillTemplateWithStringsByRegexp(lineRange, s, nearbyTextPattern);\n+            final int range = parseRange(regex, lineRange, s);\n+            this.firstLine = Math.min(n, n + range);\n+            this.lastLine = Math.max(n, n + range);\n         }\n-        catch (final PatternSyntaxException ex) {\n-            throw new IllegalArgumentException(\"unable to parse expanded comment \" + format, (Throwable)ex);\n+        catch (final PatternSyntaxException cause) {\n+            throw new IllegalArgumentException(\"unable to parse expanded comment \" + regex, (Throwable)cause);\n         }\n     }\n     \n-    private static int parseRange(final String format, final String lineRange, final String text) {\n+    private static int parseRange(final String s, final String s2, final String s3) {\n         try {\n-            return Integer.parseInt(format);\n+            return Integer.parseInt(s);\n         }\n-        catch (final NumberFormatException ex) {\n-            throw new IllegalArgumentException(\"unable to parse line range from '\" + text + \"' using \" + lineRange, (Throwable)ex);\n+        catch (final NumberFormatException cause) {\n+            throw new IllegalArgumentException(\"unable to parse line range from '\" + s3 + \"' using \" + s2, (Throwable)cause);\n         }\n     }\n     \n-    private boolean isMatch(final AuditEvent event) {\n-        return this.isInScopeOfSuppression(event) && this.isCheckMatch(event) && this.isIdMatch(event) && this.isMessageMatch(event);\n+    private boolean isMatch(final AuditEvent auditEvent) {\n+        return this.isInScopeOfSuppression(auditEvent) && this.isCheckMatch(auditEvent) && this.isIdMatch(auditEvent) && this.isMessageMatch(auditEvent);\n     }\n     \n-    private boolean isInScopeOfSuppression(final AuditEvent event) {\n-        final int eventLine = event.getLine();\n-        return eventLine >= this.firstLine && eventLine <= this.lastLine;\n+    private boolean isInScopeOfSuppression(final AuditEvent auditEvent) {\n+        final int line = auditEvent.getLine();\n+        return line >= this.firstLine && line <= this.lastLine;\n     }\n     \n-    private boolean isCheckMatch(final AuditEvent event) {\n-        final Matcher checkMatcher = this.eventSourceRegexp.matcher(event.getSourceName());\n-        return checkMatcher.find();\n+    private boolean isCheckMatch(final AuditEvent auditEvent) {\n+        return this.eventSourceRegexp.matcher(auditEvent.getSourceName()).find();\n     }\n     \n-    private boolean isIdMatch(final AuditEvent event) {\n-        boolean match = true;\n+    private boolean isIdMatch(final AuditEvent auditEvent) {\n+        boolean b = true;\n         if (this.eventIdRegexp != null) {\n-            if (event.getModuleId() == null) {\n-                match = false;\n-            }\n-            else {\n-                final Matcher idMatcher = this.eventIdRegexp.matcher(event.getModuleId());\n-                match = idMatcher.find();\n-            }\n+            b = (auditEvent.getModuleId() != null && this.eventIdRegexp.matcher(auditEvent.getModuleId()).find());\n         }\n-        return match;\n+        return b;\n     }\n     \n-    private boolean isMessageMatch(final AuditEvent event) {\n-        boolean match = true;\n+    private boolean isMessageMatch(final AuditEvent auditEvent) {\n+        boolean find = true;\n         if (this.eventMessageRegexp != null) {\n-            final Matcher messageMatcher = this.eventMessageRegexp.matcher(event.getMessage());\n-            match = messageMatcher.find();\n+            find = this.eventMessageRegexp.matcher(auditEvent.getMessage()).find();\n         }\n-        return match;\n+        return find;\n     }\n }\n"}]}
