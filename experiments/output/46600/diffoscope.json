{"diffoscope-json-version": 1, "source1": "first/ArchUtils.class", "source2": "second/ArchUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -1,19 +1,24 @@\n \n package org.apache.commons.lang3;\n \n-import java.util.HashMap;\n import java.util.stream.Stream;\n+import java.util.HashMap;\n import org.apache.commons.lang3.arch.Processor;\n import java.util.Map;\n \n public class ArchUtils\n {\n     private static final Map<String, Processor> ARCH_TO_PROCESSOR;\n     \n+    static {\n+        ARCH_TO_PROCESSOR = new HashMap<String, Processor>();\n+        init();\n+    }\n+    \n     private static void init() {\n         init_X86_32Bit();\n         init_X86_64Bit();\n         init_IA64_32Bit();\n         init_IA64_64Bit();\n         init_PPC_32Bit();\n         init_PPC_64Bit();\n@@ -53,23 +58,18 @@\n         if (ArchUtils.ARCH_TO_PROCESSOR.containsKey(key)) {\n             throw new IllegalStateException(\"Key \" + key + \" already exists in processor map\");\n         }\n         ArchUtils.ARCH_TO_PROCESSOR.put(key, processor);\n     }\n     \n     private static void addProcessors(final Processor processor, final String... keys) {\n-        Stream.of(keys).forEach(e -> addProcessor(e, processor));\n+        Stream.of(keys).forEach(e -> addProcessor(e, processor2));\n     }\n     \n     public static Processor getProcessor() {\n         return getProcessor(SystemUtils.OS_ARCH);\n     }\n     \n     public static Processor getProcessor(final String value) {\n         return ArchUtils.ARCH_TO_PROCESSOR.get(value);\n     }\n-    \n-    static {\n-        ARCH_TO_PROCESSOR = new HashMap<String, Processor>();\n-        init();\n-    }\n }\n"}]}
