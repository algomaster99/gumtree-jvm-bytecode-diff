{"diffoscope-json-version": 1, "source1": "first/EqualsHashCodeCheck.class", "source2": "second/EqualsHashCodeCheck.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -30,50 +30,44 @@\n         return this.getRequiredTokens();\n     }\n     \n     public int[] getRequiredTokens() {\n         return new int[] { 9 };\n     }\n     \n-    public void beginTree(final DetailAST rootAST) {\n+    public void beginTree(final DetailAST detailAST) {\n         this.objBlockWithEquals.clear();\n         this.objBlockWithHashCode.clear();\n     }\n     \n-    public void visitToken(final DetailAST ast) {\n-        if (isEqualsMethod(ast)) {\n-            this.objBlockWithEquals.put(ast.getParent(), ast);\n+    public void visitToken(final DetailAST detailAST) {\n+        if (isEqualsMethod(detailAST)) {\n+            this.objBlockWithEquals.put(detailAST.getParent(), detailAST);\n         }\n-        else if (isHashCodeMethod(ast)) {\n-            this.objBlockWithHashCode.put(ast.getParent(), ast);\n+        else if (isHashCodeMethod(detailAST)) {\n+            this.objBlockWithHashCode.put(detailAST.getParent(), detailAST);\n         }\n     }\n     \n-    private static boolean isEqualsMethod(final DetailAST ast) {\n-        final DetailAST modifiers = ast.getFirstChild();\n-        final DetailAST parameters = ast.findFirstToken(20);\n-        return CheckUtil.isEqualsMethod(ast) && isObjectParam(parameters.getFirstChild()) && (ast.findFirstToken(7) != null || modifiers.findFirstToken(66) != null);\n-    }\n-    \n-    private static boolean isHashCodeMethod(final DetailAST ast) {\n-        final DetailAST modifiers = ast.getFirstChild();\n-        final DetailAST methodName = ast.findFirstToken(58);\n-        final DetailAST parameters = ast.findFirstToken(20);\n-        return \"hashCode\".equals(methodName.getText()) && parameters.getFirstChild() == null && (ast.findFirstToken(7) != null || modifiers.findFirstToken(66) != null);\n-    }\n-    \n-    private static boolean isObjectParam(final DetailAST paramNode) {\n-        final DetailAST typeNode = paramNode.findFirstToken(13);\n-        final FullIdent fullIdent = FullIdent.createFullIdentBelow(typeNode);\n-        final String name = fullIdent.getText();\n-        return \"Object\".equals(name) || \"java.lang.Object\".equals(name);\n-    }\n-    \n-    public void finishTree(final DetailAST rootAST) {\n-        this.objBlockWithEquals.entrySet().stream().filter(detailASTDetailASTEntry -> this.objBlockWithHashCode.remove(detailASTDetailASTEntry.getKey()) == null).forEach(detailASTDetailASTEntry -> {\n-            final DetailAST equalsAST = (DetailAST)detailASTDetailASTEntry.getValue();\n-            this.log(equalsAST, \"equals.noHashCode\", new Object[0]);\n-            return;\n-        });\n-        this.objBlockWithHashCode.forEach((key, equalsAST) -> this.log(equalsAST, \"equals.noEquals\", new Object[0]));\n+    private static boolean isEqualsMethod(final DetailAST detailAST) {\n+        final DetailAST firstChild = detailAST.getFirstChild();\n+        final DetailAST firstToken = detailAST.findFirstToken(20);\n+        return CheckUtil.isEqualsMethod(detailAST) && isObjectParam(firstToken.getFirstChild()) && (detailAST.findFirstToken(7) != null || firstChild.findFirstToken(66) != null);\n+    }\n+    \n+    private static boolean isHashCodeMethod(final DetailAST detailAST) {\n+        final DetailAST firstChild = detailAST.getFirstChild();\n+        final DetailAST firstToken = detailAST.findFirstToken(58);\n+        final DetailAST firstToken2 = detailAST.findFirstToken(20);\n+        return \"hashCode\".equals(firstToken.getText()) && firstToken2.getFirstChild() == null && (detailAST.findFirstToken(7) != null || firstChild.findFirstToken(66) != null);\n+    }\n+    \n+    private static boolean isObjectParam(final DetailAST detailAST) {\n+        final String text = FullIdent.createFullIdentBelow(detailAST.findFirstToken(13)).getText();\n+        return \"Object\".equals(text) || \"java.lang.Object\".equals(text);\n+    }\n+    \n+    public void finishTree(final DetailAST detailAST) {\n+        this.objBlockWithEquals.entrySet().stream().filter(entry -> this.objBlockWithHashCode.remove(entry.getKey()) == null).forEach(entry2 -> this.log((DetailAST)entry2.getValue(), \"equals.noHashCode\", new Object[0]));\n+        this.objBlockWithHashCode.forEach((p0, detailAST2) -> this.log(detailAST2, \"equals.noEquals\", new Object[0]));\n     }\n }\n"}]}
