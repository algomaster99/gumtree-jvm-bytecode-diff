{"diffoscope-json-version": 1, "source1": "first/DumpArchiveUtil.class", "source2": "second/DumpArchiveUtil.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,85 +1,85 @@\n-  SHA-256 checksum dddf64485905dca1ff04224ed275befc336cacc1e52714cd4f80a16597e9afc9\n+  SHA-256 checksum 91026e50a79dc123e2374f934799104e5cf29bf30fc9336f7255ef7df87f42f9\n   Compiled from \"DumpArchiveUtil.java\"\n class org.apache.commons.compress.archivers.dump.DumpArchiveUtil\n   minor version: 0\n   major version: 52\n   flags: (0x0020) ACC_SUPER\n-  this_class: #10                         // org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n-  super_class: #11                        // java/lang/Object\n+  this_class: #8                          // org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n+  super_class: #2                         // java/lang/Object\n   interfaces: 0, fields: 0, methods: 8, attributes: 1\n Constant pool:\n-   #1 = Methodref          #11.#48        // java/lang/Object.\"<init>\":()V\n-   #2 = Methodref          #10.#49        // org/apache/commons/compress/archivers/dump/DumpArchiveUtil.convert32:([BI)I\n-   #3 = Class              #50            // org/apache/commons/compress/archivers/dump/DumpArchiveConstants\n-   #4 = Integer            84446\n-   #5 = Integer            60012\n-   #6 = Methodref          #10.#51        // org/apache/commons/compress/archivers/dump/DumpArchiveUtil.calculateChecksum:([B)I\n-   #7 = Methodref          #52.#53        // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n-   #8 = Methodref          #54.#55        // java/util/Arrays.copyOfRange:([BII)[B\n-   #9 = InterfaceMethodref #56.#57        // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n-  #10 = Class              #58            // org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n-  #11 = Class              #59            // java/lang/Object\n-  #12 = Utf8               <init>\n-  #13 = Utf8               ()V\n-  #14 = Utf8               Code\n-  #15 = Utf8               LineNumberTable\n-  #16 = Utf8               LocalVariableTable\n-  #17 = Utf8               this\n-  #18 = Utf8               Lorg/apache/commons/compress/archivers/dump/DumpArchiveUtil;\n+   #1 = Methodref          #2.#3          // java/lang/Object.\"<init>\":()V\n+   #2 = Class              #4             // java/lang/Object\n+   #3 = NameAndType        #5:#6          // \"<init>\":()V\n+   #4 = Utf8               java/lang/Object\n+   #5 = Utf8               <init>\n+   #6 = Utf8               ()V\n+   #7 = Methodref          #8.#9          // org/apache/commons/compress/archivers/dump/DumpArchiveUtil.convert32:([BI)I\n+   #8 = Class              #10            // org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n+   #9 = NameAndType        #11:#12        // convert32:([BI)I\n+  #10 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n+  #11 = Utf8               convert32\n+  #12 = Utf8               ([BI)I\n+  #13 = Class              #14            // org/apache/commons/compress/archivers/dump/DumpArchiveConstants\n+  #14 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveConstants\n+  #15 = Integer            84446\n+  #16 = Integer            60012\n+  #17 = Methodref          #8.#18         // org/apache/commons/compress/archivers/dump/DumpArchiveUtil.calculateChecksum:([B)I\n+  #18 = NameAndType        #19:#20        // calculateChecksum:([B)I\n   #19 = Utf8               calculateChecksum\n   #20 = Utf8               ([B)I\n-  #21 = Utf8               i\n-  #22 = Utf8               I\n-  #23 = Utf8               buffer\n-  #24 = Utf8               [B\n-  #25 = Utf8               calc\n-  #26 = Utf8               StackMapTable\n-  #27 = Utf8               verify\n-  #28 = Utf8               ([B)Z\n-  #29 = Utf8               magic\n-  #30 = Utf8               checksum\n-  #31 = Utf8               getIno\n-  #32 = Utf8               convert64\n-  #33 = Utf8               ([BI)J\n-  #34 = Utf8               offset\n-  #35 = Utf8               convert32\n-  #36 = Utf8               ([BI)I\n-  #37 = Utf8               convert16\n-  #38 = Utf8               decode\n-  #39 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEncoding;[BII)Ljava/lang/String;\n-  #40 = Utf8               encoding\n-  #41 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n-  #42 = Utf8               b\n-  #43 = Utf8               len\n-  #44 = Utf8               Exceptions\n-  #45 = Class              #60            // java/io/IOException\n-  #46 = Utf8               SourceFile\n-  #47 = Utf8               DumpArchiveUtil.java\n-  #48 = NameAndType        #12:#13        // \"<init>\":()V\n-  #49 = NameAndType        #35:#36        // convert32:([BI)I\n-  #50 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveConstants\n-  #51 = NameAndType        #19:#20        // calculateChecksum:([B)I\n-  #52 = Class              #61            // org/apache/commons/compress/utils/ByteUtils\n-  #53 = NameAndType        #62:#63        // fromLittleEndian:([BII)J\n-  #54 = Class              #64            // java/util/Arrays\n-  #55 = NameAndType        #65:#66        // copyOfRange:([BII)[B\n-  #56 = Class              #67            // org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #57 = NameAndType        #38:#68        // decode:([B)Ljava/lang/String;\n-  #58 = Utf8               org/apache/commons/compress/archivers/dump/DumpArchiveUtil\n-  #59 = Utf8               java/lang/Object\n-  #60 = Utf8               java/io/IOException\n-  #61 = Utf8               org/apache/commons/compress/utils/ByteUtils\n-  #62 = Utf8               fromLittleEndian\n-  #63 = Utf8               ([BII)J\n-  #64 = Utf8               java/util/Arrays\n-  #65 = Utf8               copyOfRange\n-  #66 = Utf8               ([BII)[B\n-  #67 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n-  #68 = Utf8               ([B)Ljava/lang/String;\n+  #21 = Methodref          #22.#23        // org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n+  #22 = Class              #24            // org/apache/commons/compress/utils/ByteUtils\n+  #23 = NameAndType        #25:#26        // fromLittleEndian:([BII)J\n+  #24 = Utf8               org/apache/commons/compress/utils/ByteUtils\n+  #25 = Utf8               fromLittleEndian\n+  #26 = Utf8               ([BII)J\n+  #27 = Methodref          #28.#29        // java/util/Arrays.copyOfRange:([BII)[B\n+  #28 = Class              #30            // java/util/Arrays\n+  #29 = NameAndType        #31:#32        // copyOfRange:([BII)[B\n+  #30 = Utf8               java/util/Arrays\n+  #31 = Utf8               copyOfRange\n+  #32 = Utf8               ([BII)[B\n+  #33 = InterfaceMethodref #34.#35        // org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+  #34 = Class              #36            // org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #35 = NameAndType        #37:#38        // decode:([B)Ljava/lang/String;\n+  #36 = Utf8               org/apache/commons/compress/archivers/zip/ZipEncoding\n+  #37 = Utf8               decode\n+  #38 = Utf8               ([B)Ljava/lang/String;\n+  #39 = Utf8               Code\n+  #40 = Utf8               LineNumberTable\n+  #41 = Utf8               LocalVariableTable\n+  #42 = Utf8               this\n+  #43 = Utf8               Lorg/apache/commons/compress/archivers/dump/DumpArchiveUtil;\n+  #44 = Utf8               i\n+  #45 = Utf8               I\n+  #46 = Utf8               buffer\n+  #47 = Utf8               [B\n+  #48 = Utf8               calc\n+  #49 = Utf8               StackMapTable\n+  #50 = Utf8               verify\n+  #51 = Utf8               ([B)Z\n+  #52 = Utf8               magic\n+  #53 = Utf8               checksum\n+  #54 = Utf8               getIno\n+  #55 = Utf8               convert64\n+  #56 = Utf8               ([BI)J\n+  #57 = Utf8               offset\n+  #58 = Utf8               convert16\n+  #59 = Utf8               (Lorg/apache/commons/compress/archivers/zip/ZipEncoding;[BII)Ljava/lang/String;\n+  #60 = Utf8               encoding\n+  #61 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n+  #62 = Utf8               b\n+  #63 = Utf8               len\n+  #64 = Utf8               Exceptions\n+  #65 = Class              #66            // java/io/IOException\n+  #66 = Utf8               java/io/IOException\n+  #67 = Utf8               SourceFile\n+  #68 = Utf8               DumpArchiveUtil.java\n {\n   private org.apache.commons.compress.archivers.dump.DumpArchiveUtil();\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n@@ -105,24 +105,24 @@\n          5: sipush        256\n          8: if_icmpge     27\n         11: iload_1\n         12: aload_0\n         13: iconst_4\n         14: iload_2\n         15: imul\n-        16: invokestatic  #2                  // Method convert32:([BI)I\n+        16: invokestatic  #7                  // Method convert32:([BI)I\n         19: iadd\n         20: istore_1\n         21: iinc          2, 1\n         24: goto          4\n-        27: ldc           #4                  // int 84446\n+        27: ldc           #15                 // int 84446\n         29: iload_1\n         30: aload_0\n         31: bipush        28\n-        33: invokestatic  #2                  // Method convert32:([BI)I\n+        33: invokestatic  #7                  // Method convert32:([BI)I\n         36: isub\n         37: isub\n         38: ireturn\n       LineNumberTable:\n         line 44: 0\n         line 46: 2\n         line 47: 11\n@@ -145,28 +145,28 @@\n   public static final boolean verify(byte[]);\n     descriptor: ([B)Z\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n     Code:\n       stack=2, locals=3, args_size=1\n          0: aload_0\n          1: bipush        24\n-         3: invokestatic  #2                  // Method convert32:([BI)I\n+         3: invokestatic  #7                  // Method convert32:([BI)I\n          6: istore_1\n          7: iload_1\n-         8: ldc           #5                  // int 60012\n+         8: ldc           #16                 // int 60012\n         10: if_icmpeq     15\n         13: iconst_0\n         14: ireturn\n         15: aload_0\n         16: bipush        28\n-        18: invokestatic  #2                  // Method convert32:([BI)I\n+        18: invokestatic  #7                  // Method convert32:([BI)I\n         21: istore_2\n         22: iload_2\n         23: aload_0\n-        24: invokestatic  #6                  // Method calculateChecksum:([B)I\n+        24: invokestatic  #17                 // Method calculateChecksum:([B)I\n         27: if_icmpne     34\n         30: iconst_1\n         31: goto          35\n         34: iconst_0\n         35: ireturn\n       LineNumberTable:\n         line 61: 0\n@@ -192,15 +192,15 @@\n   public static final int getIno(byte[]);\n     descriptor: ([B)I\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n          1: bipush        20\n-         3: invokestatic  #2                  // Method convert32:([BI)I\n+         3: invokestatic  #7                  // Method convert32:([BI)I\n          6: ireturn\n       LineNumberTable:\n         line 79: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       7     0 buffer   [B\n \n@@ -208,15 +208,15 @@\n     descriptor: ([BI)J\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n          2: bipush        8\n-         4: invokestatic  #7                  // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n+         4: invokestatic  #21                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n          7: lreturn\n       LineNumberTable:\n         line 90: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0 buffer   [B\n             0       8     1 offset   I\n@@ -225,15 +225,15 @@\n     descriptor: ([BI)I\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n          2: iconst_4\n-         3: invokestatic  #7                  // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n+         3: invokestatic  #21                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n          6: l2i\n          7: ireturn\n       LineNumberTable:\n         line 101: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0 buffer   [B\n@@ -243,15 +243,15 @@\n     descriptor: ([BI)I\n     flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL\n     Code:\n       stack=3, locals=2, args_size=2\n          0: aload_0\n          1: iload_1\n          2: iconst_2\n-         3: invokestatic  #7                  // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n+         3: invokestatic  #21                 // Method org/apache/commons/compress/utils/ByteUtils.fromLittleEndian:([BII)J\n          6: l2i\n          7: ireturn\n       LineNumberTable:\n         line 112: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0 buffer   [B\n@@ -264,16 +264,16 @@\n       stack=5, locals=4, args_size=4\n          0: aload_0\n          1: aload_1\n          2: iload_2\n          3: iload_2\n          4: iload_3\n          5: iadd\n-         6: invokestatic  #8                  // Method java/util/Arrays.copyOfRange:([BII)[B\n-         9: invokeinterface #9,  2            // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n+         6: invokestatic  #27                 // Method java/util/Arrays.copyOfRange:([BII)[B\n+         9: invokeinterface #33,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;\n         14: areturn\n       LineNumberTable:\n         line 120: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      15     0 encoding   Lorg/apache/commons/compress/archivers/zip/ZipEncoding;\n             0      15     1     b   [B\n"}]}
