{"diffoscope-json-version": 1, "source1": "first/PeekableInputStream.class", "source2": "second/PeekableInputStream.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -3,31 +3,31 @@\n \n import java.io.IOException;\n import java.util.Objects;\n import java.io.InputStream;\n \n public class PeekableInputStream extends CircularBufferInputStream\n {\n-    public PeekableInputStream(final InputStream inputStream, final int bufferSize) {\n-        super(inputStream, bufferSize);\n+    public PeekableInputStream(final InputStream inputStream, final int n) {\n+        super(inputStream, n);\n     }\n     \n     public PeekableInputStream(final InputStream inputStream) {\n         super(inputStream);\n     }\n     \n-    public boolean peek(final byte[] sourceBuffer) throws IOException {\n-        Objects.requireNonNull(sourceBuffer, \"sourceBuffer\");\n-        return this.peek(sourceBuffer, 0, sourceBuffer.length);\n+    public boolean peek(final byte[] obj) throws IOException {\n+        Objects.requireNonNull(obj, \"sourceBuffer\");\n+        return this.peek(obj, 0, obj.length);\n     }\n     \n-    public boolean peek(final byte[] sourceBuffer, final int offset, final int length) throws IOException {\n-        Objects.requireNonNull(sourceBuffer, \"sourceBuffer\");\n-        if (sourceBuffer.length > this.bufferSize) {\n-            throw new IllegalArgumentException(\"Peek request size of \" + sourceBuffer.length + \" bytes exceeds buffer size of \" + this.bufferSize + \" bytes\");\n+    public boolean peek(final byte[] obj, final int n, final int n2) throws IOException {\n+        Objects.requireNonNull(obj, \"sourceBuffer\");\n+        if (obj.length > this.bufferSize) {\n+            throw new IllegalArgumentException(\"Peek request size of \" + obj.length + \" bytes exceeds buffer size of \" + this.bufferSize + \" bytes\");\n         }\n-        if (this.buffer.getCurrentNumberOfBytes() < sourceBuffer.length) {\n+        if (this.buffer.getCurrentNumberOfBytes() < obj.length) {\n             this.fillBuffer();\n         }\n-        return this.buffer.peek(sourceBuffer, offset, length);\n+        return this.buffer.peek(obj, n, n2);\n     }\n }\n"}]}
