{"diffoscope-json-version": 1, "source1": "first/XMLLogger.class", "source2": "second/XMLLogger.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -26,208 +26,207 @@\n     private final Map<String, XMLLogger.FileMessages> fileMessages;\n     private final PrintWriter writer;\n     \n     public XMLLogger(final OutputStream outputStream, final AutomaticBean.OutputStreamOptions outputStreamOptions) {\n         this(outputStream, AbstractAutomaticBean.OutputStreamOptions.valueOf(outputStreamOptions.name()));\n     }\n     \n-    public XMLLogger(final OutputStream outputStream, final AbstractAutomaticBean.OutputStreamOptions outputStreamOptions) {\n+    public XMLLogger(final OutputStream out, final AbstractAutomaticBean.OutputStreamOptions outputStreamOptions) {\n         this.writerLock = new Object();\n         this.fileMessages = new ConcurrentHashMap<String, XMLLogger.FileMessages>();\n-        this.writer = new PrintWriter(new OutputStreamWriter(outputStream, StandardCharsets.UTF_8));\n+        this.writer = new PrintWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8));\n         if (outputStreamOptions == null) {\n             throw new IllegalArgumentException(\"Parameter outputStreamOptions can not be null\");\n         }\n         this.closeStream = (outputStreamOptions == AbstractAutomaticBean.OutputStreamOptions.CLOSE);\n     }\n     \n     protected void finishLocalSetup() {\n     }\n     \n-    public void auditStarted(final AuditEvent event) {\n+    public void auditStarted(final AuditEvent auditEvent) {\n         this.writer.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n-        final String version = XMLLogger.class.getPackage().getImplementationVersion();\n-        this.writer.println(\"<checkstyle version=\\\"\" + version + \"\\\">\");\n+        this.writer.println(\"<checkstyle version=\\\"\" + XMLLogger.class.getPackage().getImplementationVersion() + \"\\\">\");\n     }\n     \n-    public void auditFinished(final AuditEvent event) {\n+    public void auditFinished(final AuditEvent auditEvent) {\n         this.writer.println(\"</checkstyle>\");\n         if (this.closeStream) {\n             this.writer.close();\n         }\n         else {\n             this.writer.flush();\n         }\n     }\n     \n-    public void fileStarted(final AuditEvent event) {\n-        this.fileMessages.put(event.getFileName(), new XMLLogger.FileMessages());\n+    public void fileStarted(final AuditEvent auditEvent) {\n+        this.fileMessages.put(auditEvent.getFileName(), new XMLLogger.FileMessages());\n     }\n     \n-    public void fileFinished(final AuditEvent event) {\n-        final String fileName = event.getFileName();\n-        final XMLLogger.FileMessages messages = (XMLLogger.FileMessages)this.fileMessages.get(fileName);\n+    public void fileFinished(final AuditEvent auditEvent) {\n+        final String fileName = auditEvent.getFileName();\n+        final XMLLogger.FileMessages fileMessages = (XMLLogger.FileMessages)this.fileMessages.get(fileName);\n         synchronized (this.writerLock) {\n-            this.writeFileMessages(fileName, messages);\n+            this.writeFileMessages(fileName, fileMessages);\n         }\n         this.fileMessages.remove(fileName);\n     }\n     \n-    private void writeFileMessages(final String fileName, final XMLLogger.FileMessages messages) {\n-        this.writeFileOpeningTag(fileName);\n-        if (messages != null) {\n-            for (final AuditEvent errorEvent : messages.getErrors()) {\n-                this.writeFileError(errorEvent);\n-            }\n-            for (final Throwable exception : messages.getExceptions()) {\n-                this.writeException(exception);\n+    private void writeFileMessages(final String s, final XMLLogger.FileMessages fileMessages) {\n+        this.writeFileOpeningTag(s);\n+        if (fileMessages != null) {\n+            final Iterator iterator = fileMessages.getErrors().iterator();\n+            while (iterator.hasNext()) {\n+                this.writeFileError((AuditEvent)iterator.next());\n+            }\n+            final Iterator iterator2 = fileMessages.getExceptions().iterator();\n+            while (iterator2.hasNext()) {\n+                this.writeException((Throwable)iterator2.next());\n             }\n         }\n         this.writeFileClosingTag();\n     }\n     \n-    private void writeFileOpeningTag(final String fileName) {\n-        this.writer.println(\"<file name=\\\"\" + encode(fileName) + \"\\\">\");\n+    private void writeFileOpeningTag(final String s) {\n+        this.writer.println(\"<file name=\\\"\" + encode(s) + \"\\\">\");\n     }\n     \n     private void writeFileClosingTag() {\n         this.writer.println(\"</file>\");\n     }\n     \n-    public void addError(final AuditEvent event) {\n-        if (event.getSeverityLevel() != SeverityLevel.IGNORE) {\n-            final String fileName = event.getFileName();\n+    public void addError(final AuditEvent auditEvent) {\n+        if (auditEvent.getSeverityLevel() != SeverityLevel.IGNORE) {\n+            final String fileName = auditEvent.getFileName();\n             if (fileName == null || !this.fileMessages.containsKey(fileName)) {\n                 synchronized (this.writerLock) {\n-                    this.writeFileError(event);\n+                    this.writeFileError(auditEvent);\n                 }\n             }\n             else {\n-                final XMLLogger.FileMessages messages = (XMLLogger.FileMessages)this.fileMessages.get(fileName);\n-                messages.addError(event);\n+                ((XMLLogger.FileMessages)this.fileMessages.get(fileName)).addError(auditEvent);\n             }\n         }\n     }\n     \n-    private void writeFileError(final AuditEvent event) {\n-        this.writer.print(\"<error line=\\\"\" + event.getLine());\n-        if (event.getColumn() > 0) {\n-            this.writer.print(\" column=\\\"\" + event.getColumn());\n+    private void writeFileError(final AuditEvent auditEvent) {\n+        this.writer.print(\"<error line=\\\"\" + auditEvent.getLine());\n+        if (auditEvent.getColumn() > 0) {\n+            this.writer.print(\" column=\\\"\" + auditEvent.getColumn());\n         }\n-        this.writer.print(\" severity=\\\"\" + event.getSeverityLevel().getName());\n-        this.writer.print(\" message=\\\"\" + encode(event.getMessage()));\n+        this.writer.print(\" severity=\\\"\" + auditEvent.getSeverityLevel().getName());\n+        this.writer.print(\" message=\\\"\" + encode(auditEvent.getMessage()));\n         this.writer.print(\" source=\\\"\");\n-        if (event.getModuleId() == null) {\n-            this.writer.print(encode(event.getSourceName()));\n+        if (auditEvent.getModuleId() == null) {\n+            this.writer.print(encode(auditEvent.getSourceName()));\n         }\n         else {\n-            this.writer.print(encode(event.getModuleId()));\n+            this.writer.print(encode(auditEvent.getModuleId()));\n         }\n         this.writer.println(\"\\\"/>\");\n     }\n     \n-    public void addException(final AuditEvent event, final Throwable throwable) {\n-        final String fileName = event.getFileName();\n+    public void addException(final AuditEvent auditEvent, final Throwable t) {\n+        final String fileName = auditEvent.getFileName();\n         if (fileName == null || !this.fileMessages.containsKey(fileName)) {\n             synchronized (this.writerLock) {\n-                this.writeException(throwable);\n+                this.writeException(t);\n             }\n         }\n         else {\n-            final XMLLogger.FileMessages messages = (XMLLogger.FileMessages)this.fileMessages.get(fileName);\n-            messages.addException(throwable);\n+            ((XMLLogger.FileMessages)this.fileMessages.get(fileName)).addException(t);\n         }\n     }\n     \n-    private void writeException(final Throwable throwable) {\n+    private void writeException(final Throwable t) {\n         this.writer.println(\"<exception>\");\n         this.writer.println(\"<![CDATA[\");\n-        final StringWriter stringWriter = new StringWriter();\n-        final PrintWriter printer = new PrintWriter(stringWriter);\n-        throwable.printStackTrace(printer);\n-        this.writer.println(encode(stringWriter.toString()));\n+        final StringWriter out = new StringWriter();\n+        t.printStackTrace(new PrintWriter((Writer)out));\n+        this.writer.println(encode(out.toString()));\n         this.writer.println(\"]]>\");\n         this.writer.println(\"</exception>\");\n     }\n     \n-    public static String encode(final String value) {\n+    public static String encode(final String s) {\n         final StringBuilder sb = new StringBuilder(256);\n-        for (int i = 0; i < value.length(); ++i) {\n-            final char chr = value.charAt(i);\n-            switch (chr) {\n-                case '<': {\n+        for (int i = 0; i < s.length(); ++i) {\n+            final char char1 = s.charAt(i);\n+            switch (char1) {\n+                case 60: {\n                     sb.append(\"&lt;\");\n                     break;\n                 }\n-                case '>': {\n+                case 62: {\n                     sb.append(\"&gt;\");\n                     break;\n                 }\n-                case '\\'': {\n+                case 39: {\n                     sb.append(\"&apos;\");\n                     break;\n                 }\n-                case '\\\"': {\n+                case 34: {\n                     sb.append(\"&quot;\");\n                     break;\n                 }\n-                case '&': {\n+                case 38: {\n                     sb.append(\"&amp;\");\n                     break;\n                 }\n-                case '\\r': {\n+                case 13: {\n                     break;\n                 }\n-                case '\\n': {\n+                case 10: {\n                     sb.append(\"&#10;\");\n                     break;\n                 }\n                 default: {\n-                    if (Character.isISOControl(chr)) {\n+                    if (Character.isISOControl(char1)) {\n                         sb.append(\"#x\");\n-                        sb.append(Integer.toHexString((int)chr));\n+                        sb.append(Integer.toHexString((int)char1));\n                         sb.append(';');\n                         break;\n                     }\n-                    sb.append(chr);\n+                    sb.append(char1);\n                     break;\n                 }\n             }\n         }\n         return sb.toString();\n     }\n     \n-    public static boolean isReference(final String ent) {\n-        boolean reference = false;\n-        if (ent.charAt(0) == '&' && CommonUtil.endsWithChar(ent, ';')) {\n-            if (ent.charAt(1) == '#') {\n-                int prefixLength = 2;\n+    public static boolean isReference(final String s) {\n+        boolean b = false;\n+        if (s.charAt(0) == '&' && CommonUtil.endsWithChar(s, ';')) {\n+            if (s.charAt(1) == '#') {\n+                int beginIndex = 2;\n                 int radix = 10;\n-                if (ent.charAt(2) == 'x') {\n-                    ++prefixLength;\n+                if (s.charAt(2) == 'x') {\n+                    ++beginIndex;\n                     radix = 16;\n                 }\n                 try {\n-                    Integer.parseInt(ent.substring(prefixLength, ent.length() - 1), radix);\n-                    reference = true;\n+                    Integer.parseInt(s.substring(beginIndex, s.length() - 1), radix);\n+                    b = true;\n                 }\n-                catch (final NumberFormatException ignored) {\n-                    reference = false;\n+                catch (final NumberFormatException ex) {\n+                    b = false;\n                 }\n             }\n             else {\n-                final String name = ent.substring(1, ent.length() - 1);\n-                for (final String element : XMLLogger.ENTITIES) {\n-                    if (name.equals(element)) {\n-                        reference = true;\n+                final String substring = s.substring(1, s.length() - 1);\n+                final String[] entities = XMLLogger.ENTITIES;\n+                for (int length = entities.length, i = 0; i < length; ++i) {\n+                    if (substring.equals(entities[i])) {\n+                        b = true;\n                         break;\n                     }\n                 }\n             }\n         }\n-        return reference;\n+        return b;\n     }\n     \n     static {\n         ENTITIES = new String[] { \"gt\", \"amp\", \"lt\", \"apos\", \"quot\" };\n     }\n }\n"}]}
