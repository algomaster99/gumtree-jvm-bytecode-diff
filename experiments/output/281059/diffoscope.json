{"diffoscope-json-version": 1, "source1": "first/FileFilterUtils.class", "source2": "second/FileFilterUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -22,214 +22,212 @@\n import java.util.Date;\n \n public class FileFilterUtils\n {\n     private static final IOFileFilter cvsFilter;\n     private static final IOFileFilter svnFilter;\n     \n-    public static IOFileFilter ageFileFilter(final Date cutoffDate) {\n-        return (IOFileFilter)new AgeFileFilter(cutoffDate);\n+    public static IOFileFilter ageFileFilter(final Date date) {\n+        return (IOFileFilter)new AgeFileFilter(date);\n     }\n     \n-    public static IOFileFilter ageFileFilter(final Date cutoffDate, final boolean acceptOlder) {\n-        return (IOFileFilter)new AgeFileFilter(cutoffDate, acceptOlder);\n+    public static IOFileFilter ageFileFilter(final Date date, final boolean b) {\n+        return (IOFileFilter)new AgeFileFilter(date, b);\n     }\n     \n-    public static IOFileFilter ageFileFilter(final File cutoffReference) {\n-        return (IOFileFilter)new AgeFileFilter(cutoffReference);\n+    public static IOFileFilter ageFileFilter(final File file) {\n+        return (IOFileFilter)new AgeFileFilter(file);\n     }\n     \n-    public static IOFileFilter ageFileFilter(final File cutoffReference, final boolean acceptOlder) {\n-        return (IOFileFilter)new AgeFileFilter(cutoffReference, acceptOlder);\n+    public static IOFileFilter ageFileFilter(final File file, final boolean b) {\n+        return (IOFileFilter)new AgeFileFilter(file, b);\n     }\n     \n-    public static IOFileFilter ageFileFilter(final long cutoff) {\n-        return (IOFileFilter)new AgeFileFilter(cutoff);\n+    public static IOFileFilter ageFileFilter(final long n) {\n+        return (IOFileFilter)new AgeFileFilter(n);\n     }\n     \n-    public static IOFileFilter ageFileFilter(final long cutoff, final boolean acceptOlder) {\n-        return (IOFileFilter)new AgeFileFilter(cutoff, acceptOlder);\n+    public static IOFileFilter ageFileFilter(final long n, final boolean b) {\n+        return (IOFileFilter)new AgeFileFilter(n, b);\n     }\n     \n-    public static IOFileFilter and(final IOFileFilter... filters) {\n-        return (IOFileFilter)new AndFileFilter((List)toList(filters));\n+    public static IOFileFilter and(final IOFileFilter... array) {\n+        return (IOFileFilter)new AndFileFilter((List)toList(array));\n     }\n     \n     @Deprecated\n-    public static IOFileFilter andFileFilter(final IOFileFilter filter1, final IOFileFilter filter2) {\n-        return (IOFileFilter)new AndFileFilter(filter1, filter2);\n+    public static IOFileFilter andFileFilter(final IOFileFilter ioFileFilter, final IOFileFilter ioFileFilter2) {\n+        return (IOFileFilter)new AndFileFilter(ioFileFilter, ioFileFilter2);\n     }\n     \n-    public static IOFileFilter asFileFilter(final FileFilter filter) {\n-        return (IOFileFilter)new DelegateFileFilter(filter);\n+    public static IOFileFilter asFileFilter(final FileFilter fileFilter) {\n+        return (IOFileFilter)new DelegateFileFilter(fileFilter);\n     }\n     \n-    public static IOFileFilter asFileFilter(final FilenameFilter filter) {\n-        return (IOFileFilter)new DelegateFileFilter(filter);\n+    public static IOFileFilter asFileFilter(final FilenameFilter filenameFilter) {\n+        return (IOFileFilter)new DelegateFileFilter(filenameFilter);\n     }\n     \n     public static IOFileFilter directoryFileFilter() {\n         return DirectoryFileFilter.DIRECTORY;\n     }\n     \n     public static IOFileFilter falseFileFilter() {\n         return FalseFileFilter.FALSE;\n     }\n     \n     public static IOFileFilter fileFileFilter() {\n         return FileFileFilter.INSTANCE;\n     }\n     \n-    public static File[] filter(final IOFileFilter filter, final File... files) {\n-        if (filter == null) {\n+    public static File[] filter(final IOFileFilter ioFileFilter, final File... array) {\n+        if (ioFileFilter == null) {\n             throw new IllegalArgumentException(\"file filter is null\");\n         }\n-        if (files == null) {\n+        if (array == null) {\n             return FileUtils.EMPTY_FILE_ARRAY;\n         }\n-        return ((List<? super File>)filterFiles(filter, Arrays.stream(files), Collectors.toList())).toArray(FileUtils.EMPTY_FILE_ARRAY);\n+        return ((List<? super File>)filterFiles(ioFileFilter, Arrays.stream(array), Collectors.toList())).toArray(FileUtils.EMPTY_FILE_ARRAY);\n     }\n     \n-    private static <R, A> R filterFiles(final IOFileFilter filter, final Stream<File> stream, final Collector<? super File, A, R> collector) {\n-        Objects.requireNonNull(collector, \"collector\");\n-        if (filter == null) {\n+    private static <R, A> R filterFiles(final IOFileFilter obj, final Stream<File> stream, final Collector<? super File, A, R> obj2) {\n+        Objects.requireNonNull(obj2, \"collector\");\n+        if (obj == null) {\n             throw new IllegalArgumentException(\"file filter is null\");\n         }\n         if (stream == null) {\n-            return Stream.empty().collect((Collector<? super Object, A, R>)collector);\n+            return Stream.empty().collect((Collector<? super Object, Object, R>)obj2);\n         }\n-        Objects.requireNonNull(filter);\n-        return stream.filter(filter::accept).collect(collector);\n+        Objects.requireNonNull(obj);\n+        return stream.filter(obj::accept).collect(obj2);\n     }\n     \n-    public static File[] filter(final IOFileFilter filter, final Iterable<File> files) {\n-        return filterList(filter, files).toArray(FileUtils.EMPTY_FILE_ARRAY);\n+    public static File[] filter(final IOFileFilter ioFileFilter, final Iterable<File> iterable) {\n+        return filterList(ioFileFilter, iterable).toArray(FileUtils.EMPTY_FILE_ARRAY);\n     }\n     \n-    public static List<File> filterList(final IOFileFilter filter, final File... files) {\n-        return Arrays.asList(filter(filter, files));\n+    public static List<File> filterList(final IOFileFilter ioFileFilter, final File... array) {\n+        return Arrays.asList(filter(ioFileFilter, array));\n     }\n     \n-    public static List<File> filterList(final IOFileFilter filter, final Iterable<File> files) {\n-        if (files == null) {\n+    public static List<File> filterList(final IOFileFilter ioFileFilter, final Iterable<File> iterable) {\n+        if (iterable == null) {\n             return Collections.emptyList();\n         }\n-        return filterFiles(filter, StreamSupport.stream(files.spliterator(), false), (Collector<? super File, ?, List<File>>)Collectors.toList());\n+        return filterFiles(ioFileFilter, StreamSupport.stream(iterable.spliterator(), false), (Collector<? super File, ?, List<File>>)Collectors.toList());\n     }\n     \n-    public static Set<File> filterSet(final IOFileFilter filter, final File... files) {\n-        return new HashSet<File>(Arrays.asList(filter(filter, files)));\n+    public static Set<File> filterSet(final IOFileFilter ioFileFilter, final File... array) {\n+        return new HashSet<File>(Arrays.asList(filter(ioFileFilter, array)));\n     }\n     \n-    public static Set<File> filterSet(final IOFileFilter filter, final Iterable<File> files) {\n-        if (files == null) {\n+    public static Set<File> filterSet(final IOFileFilter ioFileFilter, final Iterable<File> iterable) {\n+        if (iterable == null) {\n             return Collections.emptySet();\n         }\n-        return filterFiles(filter, StreamSupport.stream(files.spliterator(), false), (Collector<? super File, ?, Set<File>>)Collectors.toSet());\n+        return filterFiles(ioFileFilter, StreamSupport.stream(iterable.spliterator(), false), (Collector<? super File, ?, Set<File>>)Collectors.toSet());\n     }\n     \n-    public static IOFileFilter magicNumberFileFilter(final byte[] magicNumber) {\n-        return (IOFileFilter)new MagicNumberFileFilter(magicNumber);\n+    public static IOFileFilter magicNumberFileFilter(final byte[] array) {\n+        return (IOFileFilter)new MagicNumberFileFilter(array);\n     }\n     \n-    public static IOFileFilter magicNumberFileFilter(final byte[] magicNumber, final long offset) {\n-        return (IOFileFilter)new MagicNumberFileFilter(magicNumber, offset);\n+    public static IOFileFilter magicNumberFileFilter(final byte[] array, final long n) {\n+        return (IOFileFilter)new MagicNumberFileFilter(array, n);\n     }\n     \n-    public static IOFileFilter magicNumberFileFilter(final String magicNumber) {\n-        return (IOFileFilter)new MagicNumberFileFilter(magicNumber);\n+    public static IOFileFilter magicNumberFileFilter(final String s) {\n+        return (IOFileFilter)new MagicNumberFileFilter(s);\n     }\n     \n-    public static IOFileFilter magicNumberFileFilter(final String magicNumber, final long offset) {\n-        return (IOFileFilter)new MagicNumberFileFilter(magicNumber, offset);\n+    public static IOFileFilter magicNumberFileFilter(final String s, final long n) {\n+        return (IOFileFilter)new MagicNumberFileFilter(s, n);\n     }\n     \n-    public static IOFileFilter makeCVSAware(final IOFileFilter filter) {\n-        return (filter == null) ? FileFilterUtils.cvsFilter : and(filter, FileFilterUtils.cvsFilter);\n+    public static IOFileFilter makeCVSAware(final IOFileFilter ioFileFilter) {\n+        return (ioFileFilter == null) ? FileFilterUtils.cvsFilter : and(ioFileFilter, FileFilterUtils.cvsFilter);\n     }\n     \n-    public static IOFileFilter makeDirectoryOnly(final IOFileFilter filter) {\n-        if (filter == null) {\n+    public static IOFileFilter makeDirectoryOnly(final IOFileFilter ioFileFilter) {\n+        if (ioFileFilter == null) {\n             return DirectoryFileFilter.DIRECTORY;\n         }\n-        return DirectoryFileFilter.DIRECTORY.and(filter);\n+        return DirectoryFileFilter.DIRECTORY.and(ioFileFilter);\n     }\n     \n-    public static IOFileFilter makeFileOnly(final IOFileFilter filter) {\n-        if (filter == null) {\n+    public static IOFileFilter makeFileOnly(final IOFileFilter ioFileFilter) {\n+        if (ioFileFilter == null) {\n             return FileFileFilter.INSTANCE;\n         }\n-        return FileFileFilter.INSTANCE.and(filter);\n+        return FileFileFilter.INSTANCE.and(ioFileFilter);\n     }\n     \n-    public static IOFileFilter makeSVNAware(final IOFileFilter filter) {\n-        return (filter == null) ? FileFilterUtils.svnFilter : and(filter, FileFilterUtils.svnFilter);\n+    public static IOFileFilter makeSVNAware(final IOFileFilter ioFileFilter) {\n+        return (ioFileFilter == null) ? FileFilterUtils.svnFilter : and(ioFileFilter, FileFilterUtils.svnFilter);\n     }\n     \n-    public static IOFileFilter nameFileFilter(final String name) {\n-        return (IOFileFilter)new NameFileFilter(name);\n+    public static IOFileFilter nameFileFilter(final String s) {\n+        return (IOFileFilter)new NameFileFilter(s);\n     }\n     \n-    public static IOFileFilter nameFileFilter(final String name, final IOCase caseSensitivity) {\n-        return (IOFileFilter)new NameFileFilter(name, caseSensitivity);\n+    public static IOFileFilter nameFileFilter(final String s, final IOCase ioCase) {\n+        return (IOFileFilter)new NameFileFilter(s, ioCase);\n     }\n     \n-    public static IOFileFilter notFileFilter(final IOFileFilter filter) {\n-        return filter.negate();\n+    public static IOFileFilter notFileFilter(final IOFileFilter ioFileFilter) {\n+        return ioFileFilter.negate();\n     }\n     \n-    public static IOFileFilter or(final IOFileFilter... filters) {\n-        return (IOFileFilter)new OrFileFilter((List)toList(filters));\n+    public static IOFileFilter or(final IOFileFilter... array) {\n+        return (IOFileFilter)new OrFileFilter((List)toList(array));\n     }\n     \n     @Deprecated\n-    public static IOFileFilter orFileFilter(final IOFileFilter filter1, final IOFileFilter filter2) {\n-        return (IOFileFilter)new OrFileFilter(filter1, filter2);\n+    public static IOFileFilter orFileFilter(final IOFileFilter ioFileFilter, final IOFileFilter ioFileFilter2) {\n+        return (IOFileFilter)new OrFileFilter(ioFileFilter, ioFileFilter2);\n     }\n     \n-    public static IOFileFilter prefixFileFilter(final String prefix) {\n-        return (IOFileFilter)new PrefixFileFilter(prefix);\n+    public static IOFileFilter prefixFileFilter(final String s) {\n+        return (IOFileFilter)new PrefixFileFilter(s);\n     }\n     \n-    public static IOFileFilter prefixFileFilter(final String prefix, final IOCase caseSensitivity) {\n-        return (IOFileFilter)new PrefixFileFilter(prefix, caseSensitivity);\n+    public static IOFileFilter prefixFileFilter(final String s, final IOCase ioCase) {\n+        return (IOFileFilter)new PrefixFileFilter(s, ioCase);\n     }\n     \n-    public static IOFileFilter sizeFileFilter(final long threshold) {\n-        return (IOFileFilter)new SizeFileFilter(threshold);\n+    public static IOFileFilter sizeFileFilter(final long n) {\n+        return (IOFileFilter)new SizeFileFilter(n);\n     }\n     \n-    public static IOFileFilter sizeFileFilter(final long threshold, final boolean acceptLarger) {\n-        return (IOFileFilter)new SizeFileFilter(threshold, acceptLarger);\n+    public static IOFileFilter sizeFileFilter(final long n, final boolean b) {\n+        return (IOFileFilter)new SizeFileFilter(n, b);\n     }\n     \n-    public static IOFileFilter sizeRangeFileFilter(final long minSizeInclusive, final long maxSizeInclusive) {\n-        final IOFileFilter minimumFilter = (IOFileFilter)new SizeFileFilter(minSizeInclusive, true);\n-        final IOFileFilter maximumFilter = (IOFileFilter)new SizeFileFilter(maxSizeInclusive + 1L, false);\n-        return minimumFilter.and(maximumFilter);\n+    public static IOFileFilter sizeRangeFileFilter(final long n, final long n2) {\n+        return ((IOFileFilter)new SizeFileFilter(n, true)).and((IOFileFilter)new SizeFileFilter(n2 + 1L, false));\n     }\n     \n-    public static IOFileFilter suffixFileFilter(final String suffix) {\n-        return (IOFileFilter)new SuffixFileFilter(suffix);\n+    public static IOFileFilter suffixFileFilter(final String s) {\n+        return (IOFileFilter)new SuffixFileFilter(s);\n     }\n     \n-    public static IOFileFilter suffixFileFilter(final String suffix, final IOCase caseSensitivity) {\n-        return (IOFileFilter)new SuffixFileFilter(suffix, caseSensitivity);\n+    public static IOFileFilter suffixFileFilter(final String s, final IOCase ioCase) {\n+        return (IOFileFilter)new SuffixFileFilter(s, ioCase);\n     }\n     \n-    public static List<IOFileFilter> toList(final IOFileFilter... filters) {\n-        if (filters == null) {\n+    public static List<IOFileFilter> toList(final IOFileFilter... array) {\n+        if (array == null) {\n             throw new IllegalArgumentException(\"The filters must not be null\");\n         }\n-        final List<IOFileFilter> list = new ArrayList<IOFileFilter>(filters.length);\n-        for (int i = 0; i < filters.length; ++i) {\n-            if (filters[i] == null) {\n+        final ArrayList list = new ArrayList(array.length);\n+        for (int i = 0; i < array.length; ++i) {\n+            if (array[i] == null) {\n                 throw new IllegalArgumentException(\"The filter[\" + i + \"] is null\");\n             }\n-            list.add(filters[i]);\n+            list.add(array[i]);\n         }\n         return list;\n     }\n     \n     public static IOFileFilter trueFileFilter() {\n         return TrueFileFilter.TRUE;\n     }\n"}]}
