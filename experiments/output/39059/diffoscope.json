{"diffoscope-json-version": 1, "source1": "first/GzipCompressorOutputStream.class", "source2": "second/GzipCompressorOutputStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,217 +1,209 @@\n-  SHA-256 checksum 7f50401ea163ea85d49f55883c06d2b82e58b5342f3cdada43aef1b090eefcca\n+  SHA-256 checksum f920693ca3b44a6908680d28622453c6648a34e46713594e7d8739a6342f3888\n   Compiled from \"GzipCompressorOutputStream.java\"\n public class org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream extends org.apache.commons.compress.compressors.CompressorOutputStream\n   minor version: 0\n   major version: 51\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #23                         // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream\n-  super_class: #55                        // org/apache/commons/compress/compressors/CompressorOutputStream\n+  this_class: #1                          // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream\n+  super_class: #3                         // org/apache/commons/compress/compressors/CompressorOutputStream\n   interfaces: 0, fields: 7, methods: 11, attributes: 1\n Constant pool:\n-    #1 = Class              #111          // org/apache/commons/compress/compressors/gzip/GzipParameters\n-    #2 = Methodref          #1.#112       // org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n-    #3 = Methodref          #23.#113      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n-    #4 = Methodref          #55.#112      // org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n-    #5 = Fieldref           #23.#114      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.deflateBuffer:[B\n-    #6 = Class              #115          // java/util/zip/CRC32\n-    #7 = Methodref          #6.#112       // java/util/zip/CRC32.\"<init>\":()V\n-    #8 = Fieldref           #23.#116      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.crc:Ljava/util/zip/CRC32;\n-    #9 = Fieldref           #23.#117      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.out:Ljava/io/OutputStream;\n-   #10 = Class              #118          // java/util/zip/Deflater\n-   #11 = Methodref          #1.#119       // org/apache/commons/compress/compressors/gzip/GzipParameters.getCompressionLevel:()I\n-   #12 = Methodref          #10.#120      // java/util/zip/Deflater.\"<init>\":(IZ)V\n-   #13 = Fieldref           #23.#121      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.deflater:Ljava/util/zip/Deflater;\n-   #14 = Methodref          #23.#122      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.writeHeader:(Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n-   #15 = Methodref          #1.#123       // org/apache/commons/compress/compressors/gzip/GzipParameters.getFilename:()Ljava/lang/String;\n-   #16 = Methodref          #1.#124       // org/apache/commons/compress/compressors/gzip/GzipParameters.getComment:()Ljava/lang/String;\n-   #17 = Methodref          #125.#126     // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n-   #18 = Fieldref           #127.#128     // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-   #19 = Methodref          #125.#129     // java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n-   #20 = Class              #130          // java/util/zip/GZIPInputStream\n-   #21 = Methodref          #125.#131     // java/nio/ByteBuffer.putShort:(S)Ljava/nio/ByteBuffer;\n-   #22 = Methodref          #125.#132     // java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n-   #23 = Class              #133          // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream\n-   #24 = Methodref          #1.#134       // org/apache/commons/compress/compressors/gzip/GzipParameters.getModificationTime:()J\n-   #25 = Long               1000l\n-   #27 = Methodref          #125.#135     // java/nio/ByteBuffer.putInt:(I)Ljava/nio/ByteBuffer;\n-   #28 = Methodref          #1.#136       // org/apache/commons/compress/compressors/gzip/GzipParameters.getOperatingSystem:()I\n-   #29 = Methodref          #125.#137     // java/nio/ByteBuffer.array:()[B\n-   #30 = Methodref          #138.#139     // java/io/OutputStream.write:([B)V\n-   #31 = Class              #140          // org/apache/commons/compress/utils/CharsetNames\n-   #32 = String             #141          // ISO-8859-1\n-   #33 = Methodref          #142.#143     // java/lang/String.getBytes:(Ljava/lang/String;)[B\n-   #34 = Methodref          #138.#144     // java/io/OutputStream.write:(I)V\n-   #35 = Methodref          #6.#145       // java/util/zip/CRC32.getValue:()J\n-   #36 = Methodref          #10.#146      // java/util/zip/Deflater.getTotalIn:()I\n-   #37 = Methodref          #23.#147      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.write:([BII)V\n-   #38 = Methodref          #10.#148      // java/util/zip/Deflater.finished:()Z\n-   #39 = Class              #149          // java/io/IOException\n-   #40 = String             #150          // Cannot write more data, the end of the compressed data stream has been reached\n-   #41 = Methodref          #39.#151      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n-   #42 = Methodref          #10.#152      // java/util/zip/Deflater.setInput:([BII)V\n-   #43 = Methodref          #10.#153      // java/util/zip/Deflater.needsInput:()Z\n-   #44 = Methodref          #23.#154      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.deflate:()V\n-   #45 = Methodref          #6.#155       // java/util/zip/CRC32.update:([BII)V\n-   #46 = Methodref          #10.#156      // java/util/zip/Deflater.deflate:([BII)I\n-   #47 = Methodref          #138.#147     // java/io/OutputStream.write:([BII)V\n-   #48 = Methodref          #10.#157      // java/util/zip/Deflater.finish:()V\n-   #49 = Methodref          #23.#158      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.writeTrailer:()V\n-   #50 = Methodref          #138.#159     // java/io/OutputStream.flush:()V\n-   #51 = Fieldref           #23.#160      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.closed:Z\n-   #52 = Methodref          #23.#157      // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.finish:()V\n-   #53 = Methodref          #10.#161      // java/util/zip/Deflater.end:()V\n-   #54 = Methodref          #138.#162     // java/io/OutputStream.close:()V\n-   #55 = Class              #163          // org/apache/commons/compress/compressors/CompressorOutputStream\n-   #56 = Utf8               FNAME\n-   #57 = Utf8               I\n-   #58 = Utf8               ConstantValue\n-   #59 = Integer            8\n-   #60 = Utf8               FCOMMENT\n-   #61 = Integer            16\n-   #62 = Utf8               out\n-   #63 = Utf8               Ljava/io/OutputStream;\n-   #64 = Utf8               deflater\n-   #65 = Utf8               Ljava/util/zip/Deflater;\n-   #66 = Utf8               deflateBuffer\n-   #67 = Utf8               [B\n-   #68 = Utf8               closed\n-   #69 = Utf8               Z\n-   #70 = Utf8               crc\n-   #71 = Utf8               Ljava/util/zip/CRC32;\n-   #72 = Utf8               <init>\n-   #73 = Utf8               (Ljava/io/OutputStream;)V\n-   #74 = Utf8               Code\n-   #75 = Utf8               LineNumberTable\n-   #76 = Utf8               LocalVariableTable\n-   #77 = Utf8               this\n-   #78 = Utf8               Lorg/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream;\n-   #79 = Utf8               Exceptions\n-   #80 = Utf8               (Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n-   #81 = Utf8               parameters\n-   #82 = Utf8               Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-   #83 = Utf8               writeHeader\n-   #84 = Utf8               (Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n-   #85 = Utf8               filename\n-   #86 = Utf8               Ljava/lang/String;\n-   #87 = Utf8               comment\n-   #88 = Utf8               buffer\n-   #89 = Utf8               Ljava/nio/ByteBuffer;\n-   #90 = Utf8               compressionLevel\n-   #91 = Utf8               StackMapTable\n-   #92 = Class              #133          // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream\n-   #93 = Class              #111          // org/apache/commons/compress/compressors/gzip/GzipParameters\n-   #94 = Class              #164          // java/lang/String\n-   #95 = Class              #165          // java/nio/ByteBuffer\n-   #96 = Utf8               writeTrailer\n-   #97 = Utf8               ()V\n-   #98 = Utf8               write\n-   #99 = Utf8               (I)V\n-  #100 = Utf8               b\n-  #101 = Utf8               ([B)V\n-  #102 = Utf8               ([BII)V\n-  #103 = Utf8               offset\n-  #104 = Utf8               length\n-  #105 = Utf8               deflate\n-  #106 = Utf8               finish\n-  #107 = Utf8               flush\n-  #108 = Utf8               close\n-  #109 = Utf8               SourceFile\n-  #110 = Utf8               GzipCompressorOutputStream.java\n-  #111 = Utf8               org/apache/commons/compress/compressors/gzip/GzipParameters\n-  #112 = NameAndType        #72:#97       // \"<init>\":()V\n-  #113 = NameAndType        #72:#80       // \"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n-  #114 = NameAndType        #66:#67       // deflateBuffer:[B\n-  #115 = Utf8               java/util/zip/CRC32\n-  #116 = NameAndType        #70:#71       // crc:Ljava/util/zip/CRC32;\n-  #117 = NameAndType        #62:#63       // out:Ljava/io/OutputStream;\n-  #118 = Utf8               java/util/zip/Deflater\n-  #119 = NameAndType        #166:#167     // getCompressionLevel:()I\n-  #120 = NameAndType        #72:#168      // \"<init>\":(IZ)V\n-  #121 = NameAndType        #64:#65       // deflater:Ljava/util/zip/Deflater;\n-  #122 = NameAndType        #83:#84       // writeHeader:(Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n-  #123 = NameAndType        #169:#170     // getFilename:()Ljava/lang/String;\n-  #124 = NameAndType        #171:#170     // getComment:()Ljava/lang/String;\n-  #125 = Class              #165          // java/nio/ByteBuffer\n-  #126 = NameAndType        #172:#173     // allocate:(I)Ljava/nio/ByteBuffer;\n-  #127 = Class              #174          // java/nio/ByteOrder\n-  #128 = NameAndType        #175:#176     // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-  #129 = NameAndType        #177:#178     // order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n-  #130 = Utf8               java/util/zip/GZIPInputStream\n-  #131 = NameAndType        #179:#180     // putShort:(S)Ljava/nio/ByteBuffer;\n-  #132 = NameAndType        #181:#182     // put:(B)Ljava/nio/ByteBuffer;\n-  #133 = Utf8               org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream\n-  #134 = NameAndType        #183:#184     // getModificationTime:()J\n-  #135 = NameAndType        #185:#173     // putInt:(I)Ljava/nio/ByteBuffer;\n-  #136 = NameAndType        #186:#167     // getOperatingSystem:()I\n-  #137 = NameAndType        #187:#188     // array:()[B\n-  #138 = Class              #189          // java/io/OutputStream\n-  #139 = NameAndType        #98:#101      // write:([B)V\n-  #140 = Utf8               org/apache/commons/compress/utils/CharsetNames\n-  #141 = Utf8               ISO-8859-1\n-  #142 = Class              #164          // java/lang/String\n-  #143 = NameAndType        #190:#191     // getBytes:(Ljava/lang/String;)[B\n-  #144 = NameAndType        #98:#99       // write:(I)V\n-  #145 = NameAndType        #192:#184     // getValue:()J\n-  #146 = NameAndType        #193:#167     // getTotalIn:()I\n-  #147 = NameAndType        #98:#102      // write:([BII)V\n-  #148 = NameAndType        #194:#195     // finished:()Z\n-  #149 = Utf8               java/io/IOException\n-  #150 = Utf8               Cannot write more data, the end of the compressed data stream has been reached\n-  #151 = NameAndType        #72:#196      // \"<init>\":(Ljava/lang/String;)V\n-  #152 = NameAndType        #197:#102     // setInput:([BII)V\n-  #153 = NameAndType        #198:#195     // needsInput:()Z\n-  #154 = NameAndType        #105:#97      // deflate:()V\n-  #155 = NameAndType        #199:#102     // update:([BII)V\n-  #156 = NameAndType        #105:#200     // deflate:([BII)I\n-  #157 = NameAndType        #106:#97      // finish:()V\n-  #158 = NameAndType        #96:#97       // writeTrailer:()V\n-  #159 = NameAndType        #107:#97      // flush:()V\n-  #160 = NameAndType        #68:#69       // closed:Z\n-  #161 = NameAndType        #201:#97      // end:()V\n-  #162 = NameAndType        #108:#97      // close:()V\n-  #163 = Utf8               org/apache/commons/compress/compressors/CompressorOutputStream\n-  #164 = Utf8               java/lang/String\n-  #165 = Utf8               java/nio/ByteBuffer\n-  #166 = Utf8               getCompressionLevel\n-  #167 = Utf8               ()I\n-  #168 = Utf8               (IZ)V\n-  #169 = Utf8               getFilename\n-  #170 = Utf8               ()Ljava/lang/String;\n-  #171 = Utf8               getComment\n-  #172 = Utf8               allocate\n-  #173 = Utf8               (I)Ljava/nio/ByteBuffer;\n-  #174 = Utf8               java/nio/ByteOrder\n-  #175 = Utf8               LITTLE_ENDIAN\n-  #176 = Utf8               Ljava/nio/ByteOrder;\n-  #177 = Utf8               order\n-  #178 = Utf8               (Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n-  #179 = Utf8               putShort\n-  #180 = Utf8               (S)Ljava/nio/ByteBuffer;\n-  #181 = Utf8               put\n-  #182 = Utf8               (B)Ljava/nio/ByteBuffer;\n-  #183 = Utf8               getModificationTime\n-  #184 = Utf8               ()J\n-  #185 = Utf8               putInt\n-  #186 = Utf8               getOperatingSystem\n-  #187 = Utf8               array\n-  #188 = Utf8               ()[B\n-  #189 = Utf8               java/io/OutputStream\n-  #190 = Utf8               getBytes\n-  #191 = Utf8               (Ljava/lang/String;)[B\n-  #192 = Utf8               getValue\n-  #193 = Utf8               getTotalIn\n-  #194 = Utf8               finished\n-  #195 = Utf8               ()Z\n-  #196 = Utf8               (Ljava/lang/String;)V\n-  #197 = Utf8               setInput\n-  #198 = Utf8               needsInput\n-  #199 = Utf8               update\n-  #200 = Utf8               ([BII)I\n-  #201 = Utf8               end\n+    #1 = Class              #2            // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream\n+    #2 = Utf8               org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream\n+    #3 = Class              #4            // org/apache/commons/compress/compressors/CompressorOutputStream\n+    #4 = Utf8               org/apache/commons/compress/compressors/CompressorOutputStream\n+    #5 = Utf8               FNAME\n+    #6 = Utf8               I\n+    #7 = Utf8               ConstantValue\n+    #8 = Integer            8\n+    #9 = Utf8               FCOMMENT\n+   #10 = Integer            16\n+   #11 = Utf8               out\n+   #12 = Utf8               Ljava/io/OutputStream;\n+   #13 = Utf8               deflater\n+   #14 = Utf8               Ljava/util/zip/Deflater;\n+   #15 = Utf8               deflateBuffer\n+   #16 = Utf8               [B\n+   #17 = Utf8               closed\n+   #18 = Utf8               Z\n+   #19 = Utf8               crc\n+   #20 = Utf8               Ljava/util/zip/CRC32;\n+   #21 = Utf8               <init>\n+   #22 = Utf8               (Ljava/io/OutputStream;)V\n+   #23 = Utf8               Exceptions\n+   #24 = Class              #25           // java/io/IOException\n+   #25 = Utf8               java/io/IOException\n+   #26 = Utf8               Code\n+   #27 = Class              #28           // org/apache/commons/compress/compressors/gzip/GzipParameters\n+   #28 = Utf8               org/apache/commons/compress/compressors/gzip/GzipParameters\n+   #29 = Methodref          #27.#30       // org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n+   #30 = NameAndType        #21:#31       // \"<init>\":()V\n+   #31 = Utf8               ()V\n+   #32 = Methodref          #1.#33        // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.\"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n+   #33 = NameAndType        #21:#34       // \"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n+   #34 = Utf8               (Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n+   #35 = Utf8               LineNumberTable\n+   #36 = Utf8               LocalVariableTable\n+   #37 = Utf8               this\n+   #38 = Utf8               Lorg/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream;\n+   #39 = Methodref          #3.#30        // org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n+   #40 = Fieldref           #1.#41        // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.deflateBuffer:[B\n+   #41 = NameAndType        #15:#16       // deflateBuffer:[B\n+   #42 = Class              #43           // java/util/zip/CRC32\n+   #43 = Utf8               java/util/zip/CRC32\n+   #44 = Methodref          #42.#30       // java/util/zip/CRC32.\"<init>\":()V\n+   #45 = Fieldref           #1.#46        // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.crc:Ljava/util/zip/CRC32;\n+   #46 = NameAndType        #19:#20       // crc:Ljava/util/zip/CRC32;\n+   #47 = Fieldref           #1.#48        // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.out:Ljava/io/OutputStream;\n+   #48 = NameAndType        #11:#12       // out:Ljava/io/OutputStream;\n+   #49 = Class              #50           // java/util/zip/Deflater\n+   #50 = Utf8               java/util/zip/Deflater\n+   #51 = Methodref          #27.#52       // org/apache/commons/compress/compressors/gzip/GzipParameters.getCompressionLevel:()I\n+   #52 = NameAndType        #53:#54       // getCompressionLevel:()I\n+   #53 = Utf8               getCompressionLevel\n+   #54 = Utf8               ()I\n+   #55 = Methodref          #49.#56       // java/util/zip/Deflater.\"<init>\":(IZ)V\n+   #56 = NameAndType        #21:#57       // \"<init>\":(IZ)V\n+   #57 = Utf8               (IZ)V\n+   #58 = Fieldref           #1.#59        // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.deflater:Ljava/util/zip/Deflater;\n+   #59 = NameAndType        #13:#14       // deflater:Ljava/util/zip/Deflater;\n+   #60 = Methodref          #1.#61        // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.writeHeader:(Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n+   #61 = NameAndType        #62:#63       // writeHeader:(Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n+   #62 = Utf8               writeHeader\n+   #63 = Utf8               (Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n+   #64 = Utf8               parameters\n+   #65 = Utf8               Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n+   #66 = Methodref          #27.#67       // org/apache/commons/compress/compressors/gzip/GzipParameters.getFilename:()Ljava/lang/String;\n+   #67 = NameAndType        #68:#69       // getFilename:()Ljava/lang/String;\n+   #68 = Utf8               getFilename\n+   #69 = Utf8               ()Ljava/lang/String;\n+   #70 = Methodref          #27.#71       // org/apache/commons/compress/compressors/gzip/GzipParameters.getComment:()Ljava/lang/String;\n+   #71 = NameAndType        #72:#69       // getComment:()Ljava/lang/String;\n+   #72 = Utf8               getComment\n+   #73 = Methodref          #74.#76       // java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+   #74 = Class              #75           // java/nio/ByteBuffer\n+   #75 = Utf8               java/nio/ByteBuffer\n+   #76 = NameAndType        #77:#78       // allocate:(I)Ljava/nio/ByteBuffer;\n+   #77 = Utf8               allocate\n+   #78 = Utf8               (I)Ljava/nio/ByteBuffer;\n+   #79 = Fieldref           #80.#82       // java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+   #80 = Class              #81           // java/nio/ByteOrder\n+   #81 = Utf8               java/nio/ByteOrder\n+   #82 = NameAndType        #83:#84       // LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+   #83 = Utf8               LITTLE_ENDIAN\n+   #84 = Utf8               Ljava/nio/ByteOrder;\n+   #85 = Methodref          #74.#86       // java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+   #86 = NameAndType        #87:#88       // order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+   #87 = Utf8               order\n+   #88 = Utf8               (Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+   #89 = Methodref          #74.#90       // java/nio/ByteBuffer.putShort:(S)Ljava/nio/ByteBuffer;\n+   #90 = NameAndType        #91:#92       // putShort:(S)Ljava/nio/ByteBuffer;\n+   #91 = Utf8               putShort\n+   #92 = Utf8               (S)Ljava/nio/ByteBuffer;\n+   #93 = Methodref          #74.#94       // java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n+   #94 = NameAndType        #95:#96       // put:(B)Ljava/nio/ByteBuffer;\n+   #95 = Utf8               put\n+   #96 = Utf8               (B)Ljava/nio/ByteBuffer;\n+   #97 = Methodref          #27.#98       // org/apache/commons/compress/compressors/gzip/GzipParameters.getModificationTime:()J\n+   #98 = NameAndType        #99:#100      // getModificationTime:()J\n+   #99 = Utf8               getModificationTime\n+  #100 = Utf8               ()J\n+  #101 = Long               1000l\n+  #103 = Methodref          #74.#104      // java/nio/ByteBuffer.putInt:(I)Ljava/nio/ByteBuffer;\n+  #104 = NameAndType        #105:#78      // putInt:(I)Ljava/nio/ByteBuffer;\n+  #105 = Utf8               putInt\n+  #106 = Methodref          #27.#107      // org/apache/commons/compress/compressors/gzip/GzipParameters.getOperatingSystem:()I\n+  #107 = NameAndType        #108:#54      // getOperatingSystem:()I\n+  #108 = Utf8               getOperatingSystem\n+  #109 = Methodref          #74.#110      // java/nio/ByteBuffer.array:()[B\n+  #110 = NameAndType        #111:#112     // array:()[B\n+  #111 = Utf8               array\n+  #112 = Utf8               ()[B\n+  #113 = Methodref          #114.#116     // java/io/OutputStream.write:([B)V\n+  #114 = Class              #115          // java/io/OutputStream\n+  #115 = Utf8               java/io/OutputStream\n+  #116 = NameAndType        #117:#118     // write:([B)V\n+  #117 = Utf8               write\n+  #118 = Utf8               ([B)V\n+  #119 = String             #120          // ISO-8859-1\n+  #120 = Utf8               ISO-8859-1\n+  #121 = Methodref          #122.#124     // java/lang/String.getBytes:(Ljava/lang/String;)[B\n+  #122 = Class              #123          // java/lang/String\n+  #123 = Utf8               java/lang/String\n+  #124 = NameAndType        #125:#126     // getBytes:(Ljava/lang/String;)[B\n+  #125 = Utf8               getBytes\n+  #126 = Utf8               (Ljava/lang/String;)[B\n+  #127 = Methodref          #114.#128     // java/io/OutputStream.write:(I)V\n+  #128 = NameAndType        #117:#129     // write:(I)V\n+  #129 = Utf8               (I)V\n+  #130 = Utf8               filename\n+  #131 = Utf8               Ljava/lang/String;\n+  #132 = Utf8               comment\n+  #133 = Utf8               buffer\n+  #134 = Utf8               Ljava/nio/ByteBuffer;\n+  #135 = Utf8               compressionLevel\n+  #136 = Utf8               StackMapTable\n+  #137 = Utf8               writeTrailer\n+  #138 = Methodref          #42.#139      // java/util/zip/CRC32.getValue:()J\n+  #139 = NameAndType        #140:#100     // getValue:()J\n+  #140 = Utf8               getValue\n+  #141 = Methodref          #49.#142      // java/util/zip/Deflater.getTotalIn:()I\n+  #142 = NameAndType        #143:#54      // getTotalIn:()I\n+  #143 = Utf8               getTotalIn\n+  #144 = Methodref          #1.#145       // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.write:([BII)V\n+  #145 = NameAndType        #117:#146     // write:([BII)V\n+  #146 = Utf8               ([BII)V\n+  #147 = Utf8               b\n+  #148 = Methodref          #49.#149      // java/util/zip/Deflater.finished:()Z\n+  #149 = NameAndType        #150:#151     // finished:()Z\n+  #150 = Utf8               finished\n+  #151 = Utf8               ()Z\n+  #152 = String             #153          // Cannot write more data, the end of the compressed data stream has been reached\n+  #153 = Utf8               Cannot write more data, the end of the compressed data stream has been reached\n+  #154 = Methodref          #24.#155      // java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+  #155 = NameAndType        #21:#156      // \"<init>\":(Ljava/lang/String;)V\n+  #156 = Utf8               (Ljava/lang/String;)V\n+  #157 = Methodref          #49.#158      // java/util/zip/Deflater.setInput:([BII)V\n+  #158 = NameAndType        #159:#146     // setInput:([BII)V\n+  #159 = Utf8               setInput\n+  #160 = Methodref          #1.#161       // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.deflate:()V\n+  #161 = NameAndType        #162:#31      // deflate:()V\n+  #162 = Utf8               deflate\n+  #163 = Methodref          #49.#164      // java/util/zip/Deflater.needsInput:()Z\n+  #164 = NameAndType        #165:#151     // needsInput:()Z\n+  #165 = Utf8               needsInput\n+  #166 = Methodref          #42.#167      // java/util/zip/CRC32.update:([BII)V\n+  #167 = NameAndType        #168:#146     // update:([BII)V\n+  #168 = Utf8               update\n+  #169 = Utf8               offset\n+  #170 = Utf8               length\n+  #171 = Methodref          #49.#172      // java/util/zip/Deflater.deflate:([BII)I\n+  #172 = NameAndType        #162:#173     // deflate:([BII)I\n+  #173 = Utf8               ([BII)I\n+  #174 = Methodref          #114.#145     // java/io/OutputStream.write:([BII)V\n+  #175 = Utf8               finish\n+  #176 = Methodref          #49.#177      // java/util/zip/Deflater.finish:()V\n+  #177 = NameAndType        #175:#31      // finish:()V\n+  #178 = Methodref          #1.#179       // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.writeTrailer:()V\n+  #179 = NameAndType        #137:#31      // writeTrailer:()V\n+  #180 = Utf8               flush\n+  #181 = Methodref          #114.#182     // java/io/OutputStream.flush:()V\n+  #182 = NameAndType        #180:#31      // flush:()V\n+  #183 = Utf8               close\n+  #184 = Fieldref           #1.#185       // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.closed:Z\n+  #185 = NameAndType        #17:#18       // closed:Z\n+  #186 = Methodref          #1.#177       // org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.finish:()V\n+  #187 = Methodref          #49.#188      // java/util/zip/Deflater.end:()V\n+  #188 = NameAndType        #189:#31      // end:()V\n+  #189 = Utf8               end\n+  #190 = Methodref          #114.#191     // java/io/OutputStream.close:()V\n+  #191 = NameAndType        #183:#31      // close:()V\n+  #192 = Utf8               SourceFile\n+  #193 = Utf8               GzipCompressorOutputStream.java\n {\n   private static final int FNAME = 8;\n     descriptor: I\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n     ConstantValue: int 8\n \n   private static final int FCOMMENT = 16;\n@@ -238,202 +230,205 @@\n   private final java.util.zip.CRC32 crc;\n     descriptor: Ljava/util/zip/CRC32;\n     flags: (0x0012) ACC_PRIVATE, ACC_FINAL\n \n   public org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream(java.io.OutputStream) throws java.io.IOException;\n     descriptor: (Ljava/io/OutputStream;)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: new           #1                  // class org/apache/commons/compress/compressors/gzip/GzipParameters\n+         2: new           #27                 // class org/apache/commons/compress/compressors/gzip/GzipParameters\n          5: dup\n-         6: invokespecial #2                  // Method org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n-         9: invokespecial #3                  // Method \"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n+         6: invokespecial #29                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.\"<init>\":()V\n+         9: invokespecial #32                 // Method \"<init>\":(Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n         12: return\n       LineNumberTable:\n         line 70: 0\n         line 71: 12\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      13     0  this   Lorg/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream;\n             0      13     1   out   Ljava/io/OutputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream(java.io.OutputStream, org.apache.commons.compress.compressors.gzip.GzipParameters) throws java.io.IOException;\n     descriptor: (Ljava/io/OutputStream;Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=3, args_size=3\n          0: aload_0\n-         1: invokespecial #4                  // Method org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n+         1: invokespecial #39                 // Method org/apache/commons/compress/compressors/CompressorOutputStream.\"<init>\":()V\n          4: aload_0\n          5: sipush        512\n          8: newarray       byte\n-        10: putfield      #5                  // Field deflateBuffer:[B\n+        10: putfield      #40                 // Field deflateBuffer:[B\n         13: aload_0\n-        14: new           #6                  // class java/util/zip/CRC32\n+        14: new           #42                 // class java/util/zip/CRC32\n         17: dup\n-        18: invokespecial #7                  // Method java/util/zip/CRC32.\"<init>\":()V\n-        21: putfield      #8                  // Field crc:Ljava/util/zip/CRC32;\n+        18: invokespecial #44                 // Method java/util/zip/CRC32.\"<init>\":()V\n+        21: putfield      #45                 // Field crc:Ljava/util/zip/CRC32;\n         24: aload_0\n         25: aload_1\n-        26: putfield      #9                  // Field out:Ljava/io/OutputStream;\n+        26: putfield      #47                 // Field out:Ljava/io/OutputStream;\n         29: aload_0\n-        30: new           #10                 // class java/util/zip/Deflater\n+        30: new           #49                 // class java/util/zip/Deflater\n         33: dup\n         34: aload_2\n-        35: invokevirtual #11                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getCompressionLevel:()I\n+        35: invokevirtual #51                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getCompressionLevel:()I\n         38: iconst_1\n-        39: invokespecial #12                 // Method java/util/zip/Deflater.\"<init>\":(IZ)V\n-        42: putfield      #13                 // Field deflater:Ljava/util/zip/Deflater;\n+        39: invokespecial #55                 // Method java/util/zip/Deflater.\"<init>\":(IZ)V\n+        42: putfield      #58                 // Field deflater:Ljava/util/zip/Deflater;\n         45: aload_0\n         46: aload_2\n-        47: invokespecial #14                 // Method writeHeader:(Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n+        47: invokespecial #60                 // Method writeHeader:(Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n         50: return\n       LineNumberTable:\n         line 81: 0\n         line 56: 4\n         line 62: 13\n         line 82: 24\n         line 83: 29\n         line 85: 45\n         line 86: 50\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      51     0  this   Lorg/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream;\n             0      51     1   out   Ljava/io/OutputStream;\n             0      51     2 parameters   Lorg/apache/commons/compress/compressors/gzip/GzipParameters;\n-    Exceptions:\n-      throws java.io.IOException\n \n   private void writeHeader(org.apache.commons.compress.compressors.gzip.GzipParameters) throws java.io.IOException;\n     descriptor: (Lorg/apache/commons/compress/compressors/gzip/GzipParameters;)V\n     flags: (0x0002) ACC_PRIVATE\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=5, locals=6, args_size=2\n          0: aload_1\n-         1: invokevirtual #15                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getFilename:()Ljava/lang/String;\n+         1: invokevirtual #66                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getFilename:()Ljava/lang/String;\n          4: astore_2\n          5: aload_1\n-         6: invokevirtual #16                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getComment:()Ljava/lang/String;\n+         6: invokevirtual #70                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getComment:()Ljava/lang/String;\n          9: astore_3\n         10: bipush        10\n-        12: invokestatic  #17                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+        12: invokestatic  #73                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n         15: astore        4\n         17: aload         4\n-        19: getstatic     #18                 // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-        22: invokevirtual #19                 // Method java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+        19: getstatic     #79                 // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+        22: invokevirtual #85                 // Method java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n         25: pop\n         26: aload         4\n         28: sipush        -29921\n-        31: invokevirtual #21                 // Method java/nio/ByteBuffer.putShort:(S)Ljava/nio/ByteBuffer;\n+        31: invokevirtual #89                 // Method java/nio/ByteBuffer.putShort:(S)Ljava/nio/ByteBuffer;\n         34: pop\n         35: aload         4\n         37: bipush        8\n-        39: invokevirtual #22                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n+        39: invokevirtual #93                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n         42: pop\n         43: aload         4\n         45: aload_2\n         46: ifnull        54\n         49: bipush        8\n         51: goto          55\n         54: iconst_0\n         55: aload_3\n         56: ifnull        64\n         59: bipush        16\n         61: goto          65\n         64: iconst_0\n         65: ior\n         66: i2b\n-        67: invokevirtual #22                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n+        67: invokevirtual #93                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n         70: pop\n         71: aload         4\n         73: aload_1\n-        74: invokevirtual #24                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getModificationTime:()J\n-        77: ldc2_w        #25                 // long 1000l\n+        74: invokevirtual #97                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getModificationTime:()J\n+        77: ldc2_w        #101                // long 1000l\n         80: ldiv\n         81: l2i\n-        82: invokevirtual #27                 // Method java/nio/ByteBuffer.putInt:(I)Ljava/nio/ByteBuffer;\n+        82: invokevirtual #103                // Method java/nio/ByteBuffer.putInt:(I)Ljava/nio/ByteBuffer;\n         85: pop\n         86: aload_1\n-        87: invokevirtual #11                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getCompressionLevel:()I\n+        87: invokevirtual #51                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getCompressionLevel:()I\n         90: istore        5\n         92: iload         5\n         94: bipush        9\n         96: if_icmpne     109\n         99: aload         4\n        101: iconst_2\n-       102: invokevirtual #22                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n+       102: invokevirtual #93                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n        105: pop\n        106: goto          132\n        109: iload         5\n        111: iconst_1\n        112: if_icmpne     125\n        115: aload         4\n        117: iconst_4\n-       118: invokevirtual #22                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n+       118: invokevirtual #93                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n        121: pop\n        122: goto          132\n        125: aload         4\n        127: iconst_0\n-       128: invokevirtual #22                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n+       128: invokevirtual #93                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n        131: pop\n        132: aload         4\n        134: aload_1\n-       135: invokevirtual #28                 // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getOperatingSystem:()I\n+       135: invokevirtual #106                // Method org/apache/commons/compress/compressors/gzip/GzipParameters.getOperatingSystem:()I\n        138: i2b\n-       139: invokevirtual #22                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n+       139: invokevirtual #93                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;\n        142: pop\n        143: aload_0\n-       144: getfield      #9                  // Field out:Ljava/io/OutputStream;\n+       144: getfield      #47                 // Field out:Ljava/io/OutputStream;\n        147: aload         4\n-       149: invokevirtual #29                 // Method java/nio/ByteBuffer.array:()[B\n-       152: invokevirtual #30                 // Method java/io/OutputStream.write:([B)V\n+       149: invokevirtual #109                // Method java/nio/ByteBuffer.array:()[B\n+       152: invokevirtual #113                // Method java/io/OutputStream.write:([B)V\n        155: aload_2\n        156: ifnull        180\n        159: aload_0\n-       160: getfield      #9                  // Field out:Ljava/io/OutputStream;\n+       160: getfield      #47                 // Field out:Ljava/io/OutputStream;\n        163: aload_2\n-       164: ldc           #32                 // String ISO-8859-1\n-       166: invokevirtual #33                 // Method java/lang/String.getBytes:(Ljava/lang/String;)[B\n-       169: invokevirtual #30                 // Method java/io/OutputStream.write:([B)V\n+       164: ldc           #119                // String ISO-8859-1\n+       166: invokevirtual #121                // Method java/lang/String.getBytes:(Ljava/lang/String;)[B\n+       169: invokevirtual #113                // Method java/io/OutputStream.write:([B)V\n        172: aload_0\n-       173: getfield      #9                  // Field out:Ljava/io/OutputStream;\n+       173: getfield      #47                 // Field out:Ljava/io/OutputStream;\n        176: iconst_0\n-       177: invokevirtual #34                 // Method java/io/OutputStream.write:(I)V\n+       177: invokevirtual #127                // Method java/io/OutputStream.write:(I)V\n        180: aload_3\n        181: ifnull        205\n        184: aload_0\n-       185: getfield      #9                  // Field out:Ljava/io/OutputStream;\n+       185: getfield      #47                 // Field out:Ljava/io/OutputStream;\n        188: aload_3\n-       189: ldc           #32                 // String ISO-8859-1\n-       191: invokevirtual #33                 // Method java/lang/String.getBytes:(Ljava/lang/String;)[B\n-       194: invokevirtual #30                 // Method java/io/OutputStream.write:([B)V\n+       189: ldc           #119                // String ISO-8859-1\n+       191: invokevirtual #121                // Method java/lang/String.getBytes:(Ljava/lang/String;)[B\n+       194: invokevirtual #113                // Method java/io/OutputStream.write:([B)V\n        197: aload_0\n-       198: getfield      #9                  // Field out:Ljava/io/OutputStream;\n+       198: getfield      #47                 // Field out:Ljava/io/OutputStream;\n        201: iconst_0\n-       202: invokevirtual #34                 // Method java/io/OutputStream.write:(I)V\n+       202: invokevirtual #127                // Method java/io/OutputStream.write:(I)V\n        205: return\n       LineNumberTable:\n         line 89: 0\n         line 90: 5\n         line 92: 10\n         line 93: 17\n         line 94: 26\n         line 95: 35\n         line 96: 43\n         line 97: 71\n         line 100: 86\n         line 101: 92\n         line 102: 99\n-        line 103: 109\n+        line 103: 106\n         line 104: 115\n+        line 105: 122\n         line 106: 125\n         line 109: 132\n         line 111: 143\n         line 113: 155\n         line 114: 159\n         line 115: 172\n         line 118: 180\n@@ -468,299 +463,299 @@\n         frame_type = 252 /* append */\n           offset_delta = 43\n           locals = [ int ]\n         frame_type = 15 /* same */\n         frame_type = 6 /* same */\n         frame_type = 47 /* same */\n         frame_type = 24 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n \n   private void writeTrailer() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=3, locals=2, args_size=1\n          0: bipush        8\n-         2: invokestatic  #17                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n+         2: invokestatic  #73                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;\n          5: astore_1\n          6: aload_1\n-         7: getstatic     #18                 // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n-        10: invokevirtual #19                 // Method java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n+         7: getstatic     #79                 // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;\n+        10: invokevirtual #85                 // Method java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;\n         13: pop\n         14: aload_1\n         15: aload_0\n-        16: getfield      #8                  // Field crc:Ljava/util/zip/CRC32;\n-        19: invokevirtual #35                 // Method java/util/zip/CRC32.getValue:()J\n+        16: getfield      #45                 // Field crc:Ljava/util/zip/CRC32;\n+        19: invokevirtual #138                // Method java/util/zip/CRC32.getValue:()J\n         22: l2i\n-        23: invokevirtual #27                 // Method java/nio/ByteBuffer.putInt:(I)Ljava/nio/ByteBuffer;\n+        23: invokevirtual #103                // Method java/nio/ByteBuffer.putInt:(I)Ljava/nio/ByteBuffer;\n         26: pop\n         27: aload_1\n         28: aload_0\n-        29: getfield      #13                 // Field deflater:Ljava/util/zip/Deflater;\n-        32: invokevirtual #36                 // Method java/util/zip/Deflater.getTotalIn:()I\n-        35: invokevirtual #27                 // Method java/nio/ByteBuffer.putInt:(I)Ljava/nio/ByteBuffer;\n+        29: getfield      #58                 // Field deflater:Ljava/util/zip/Deflater;\n+        32: invokevirtual #141                // Method java/util/zip/Deflater.getTotalIn:()I\n+        35: invokevirtual #103                // Method java/nio/ByteBuffer.putInt:(I)Ljava/nio/ByteBuffer;\n         38: pop\n         39: aload_0\n-        40: getfield      #9                  // Field out:Ljava/io/OutputStream;\n+        40: getfield      #47                 // Field out:Ljava/io/OutputStream;\n         43: aload_1\n-        44: invokevirtual #29                 // Method java/nio/ByteBuffer.array:()[B\n-        47: invokevirtual #30                 // Method java/io/OutputStream.write:([B)V\n+        44: invokevirtual #109                // Method java/nio/ByteBuffer.array:()[B\n+        47: invokevirtual #113                // Method java/io/OutputStream.write:([B)V\n         50: return\n       LineNumberTable:\n         line 125: 0\n         line 126: 6\n         line 127: 14\n         line 128: 27\n         line 130: 39\n         line 131: 50\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      51     0  this   Lorg/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream;\n             6      45     1 buffer   Ljava/nio/ByteBuffer;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void write(int) throws java.io.IOException;\n     descriptor: (I)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=6, locals=2, args_size=2\n          0: aload_0\n          1: iconst_1\n          2: newarray       byte\n          4: dup\n          5: iconst_0\n          6: iload_1\n          7: sipush        255\n         10: iand\n         11: i2b\n         12: bastore\n         13: iconst_0\n         14: iconst_1\n-        15: invokevirtual #37                 // Method write:([BII)V\n+        15: invokevirtual #144                // Method write:([BII)V\n         18: return\n       LineNumberTable:\n         line 135: 0\n         line 136: 18\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      19     0  this   Lorg/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream;\n             0      19     1     b   I\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void write(byte[]) throws java.io.IOException;\n     descriptor: ([B)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n          2: iconst_0\n          3: aload_1\n          4: arraylength\n-         5: invokevirtual #37                 // Method write:([BII)V\n+         5: invokevirtual #144                // Method write:([BII)V\n          8: return\n       LineNumberTable:\n         line 145: 0\n         line 146: 8\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream;\n             0       9     1 buffer   [B\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void write(byte[], int, int) throws java.io.IOException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=4, args_size=4\n          0: aload_0\n-         1: getfield      #13                 // Field deflater:Ljava/util/zip/Deflater;\n-         4: invokevirtual #38                 // Method java/util/zip/Deflater.finished:()Z\n+         1: getfield      #58                 // Field deflater:Ljava/util/zip/Deflater;\n+         4: invokevirtual #148                // Method java/util/zip/Deflater.finished:()Z\n          7: ifeq          20\n-        10: new           #39                 // class java/io/IOException\n+        10: new           #24                 // class java/io/IOException\n         13: dup\n-        14: ldc           #40                 // String Cannot write more data, the end of the compressed data stream has been reached\n-        16: invokespecial #41                 // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n+        14: ldc           #152                // String Cannot write more data, the end of the compressed data stream has been reached\n+        16: invokespecial #154                // Method java/io/IOException.\"<init>\":(Ljava/lang/String;)V\n         19: athrow\n         20: iload_3\n         21: ifle          61\n         24: aload_0\n-        25: getfield      #13                 // Field deflater:Ljava/util/zip/Deflater;\n+        25: getfield      #58                 // Field deflater:Ljava/util/zip/Deflater;\n         28: aload_1\n         29: iload_2\n         30: iload_3\n-        31: invokevirtual #42                 // Method java/util/zip/Deflater.setInput:([BII)V\n-        34: aload_0\n-        35: getfield      #13                 // Field deflater:Ljava/util/zip/Deflater;\n-        38: invokevirtual #43                 // Method java/util/zip/Deflater.needsInput:()Z\n-        41: ifne          51\n-        44: aload_0\n-        45: invokespecial #44                 // Method deflate:()V\n-        48: goto          34\n+        31: invokevirtual #157                // Method java/util/zip/Deflater.setInput:([BII)V\n+        34: goto          41\n+        37: aload_0\n+        38: invokespecial #160                // Method deflate:()V\n+        41: aload_0\n+        42: getfield      #58                 // Field deflater:Ljava/util/zip/Deflater;\n+        45: invokevirtual #163                // Method java/util/zip/Deflater.needsInput:()Z\n+        48: ifeq          37\n         51: aload_0\n-        52: getfield      #8                  // Field crc:Ljava/util/zip/CRC32;\n+        52: getfield      #45                 // Field crc:Ljava/util/zip/CRC32;\n         55: aload_1\n         56: iload_2\n         57: iload_3\n-        58: invokevirtual #45                 // Method java/util/zip/CRC32.update:([BII)V\n+        58: invokevirtual #166                // Method java/util/zip/CRC32.update:([BII)V\n         61: return\n       LineNumberTable:\n         line 155: 0\n         line 156: 10\n         line 158: 20\n         line 159: 24\n         line 161: 34\n-        line 162: 44\n+        line 162: 37\n+        line 161: 41\n         line 165: 51\n         line 167: 61\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      62     0  this   Lorg/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream;\n             0      62     1 buffer   [B\n             0      62     2 offset   I\n             0      62     3 length   I\n       StackMapTable: number_of_entries = 4\n         frame_type = 20 /* same */\n-        frame_type = 13 /* same */\n         frame_type = 16 /* same */\n-        frame_type = 9 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n+        frame_type = 3 /* same */\n+        frame_type = 19 /* same */\n \n   private void deflate() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=4, locals=2, args_size=1\n          0: aload_0\n-         1: getfield      #13                 // Field deflater:Ljava/util/zip/Deflater;\n+         1: getfield      #58                 // Field deflater:Ljava/util/zip/Deflater;\n          4: aload_0\n-         5: getfield      #5                  // Field deflateBuffer:[B\n+         5: getfield      #40                 // Field deflateBuffer:[B\n          8: iconst_0\n          9: aload_0\n-        10: getfield      #5                  // Field deflateBuffer:[B\n+        10: getfield      #40                 // Field deflateBuffer:[B\n         13: arraylength\n-        14: invokevirtual #46                 // Method java/util/zip/Deflater.deflate:([BII)I\n+        14: invokevirtual #171                // Method java/util/zip/Deflater.deflate:([BII)I\n         17: istore_1\n         18: iload_1\n         19: ifle          35\n         22: aload_0\n-        23: getfield      #9                  // Field out:Ljava/io/OutputStream;\n+        23: getfield      #47                 // Field out:Ljava/io/OutputStream;\n         26: aload_0\n-        27: getfield      #5                  // Field deflateBuffer:[B\n+        27: getfield      #40                 // Field deflateBuffer:[B\n         30: iconst_0\n         31: iload_1\n-        32: invokevirtual #47                 // Method java/io/OutputStream.write:([BII)V\n+        32: invokevirtual #174                // Method java/io/OutputStream.write:([BII)V\n         35: return\n       LineNumberTable:\n         line 170: 0\n         line 171: 18\n         line 172: 22\n         line 174: 35\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      36     0  this   Lorg/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream;\n            18      18     1 length   I\n       StackMapTable: number_of_entries = 1\n         frame_type = 252 /* append */\n           offset_delta = 35\n           locals = [ int ]\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void finish() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #13                 // Field deflater:Ljava/util/zip/Deflater;\n-         4: invokevirtual #38                 // Method java/util/zip/Deflater.finished:()Z\n+         1: getfield      #58                 // Field deflater:Ljava/util/zip/Deflater;\n+         4: invokevirtual #148                // Method java/util/zip/Deflater.finished:()Z\n          7: ifne          38\n         10: aload_0\n-        11: getfield      #13                 // Field deflater:Ljava/util/zip/Deflater;\n-        14: invokevirtual #48                 // Method java/util/zip/Deflater.finish:()V\n-        17: aload_0\n-        18: getfield      #13                 // Field deflater:Ljava/util/zip/Deflater;\n-        21: invokevirtual #38                 // Method java/util/zip/Deflater.finished:()Z\n-        24: ifne          34\n-        27: aload_0\n-        28: invokespecial #44                 // Method deflate:()V\n-        31: goto          17\n+        11: getfield      #58                 // Field deflater:Ljava/util/zip/Deflater;\n+        14: invokevirtual #176                // Method java/util/zip/Deflater.finish:()V\n+        17: goto          24\n+        20: aload_0\n+        21: invokespecial #160                // Method deflate:()V\n+        24: aload_0\n+        25: getfield      #58                 // Field deflater:Ljava/util/zip/Deflater;\n+        28: invokevirtual #148                // Method java/util/zip/Deflater.finished:()Z\n+        31: ifeq          20\n         34: aload_0\n-        35: invokespecial #49                 // Method writeTrailer:()V\n+        35: invokespecial #178                // Method writeTrailer:()V\n         38: return\n       LineNumberTable:\n         line 183: 0\n         line 184: 10\n         line 186: 17\n-        line 187: 27\n+        line 187: 20\n+        line 186: 24\n         line 190: 34\n         line 192: 38\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      39     0  this   Lorg/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream;\n       StackMapTable: number_of_entries = 3\n-        frame_type = 17 /* same */\n-        frame_type = 16 /* same */\n+        frame_type = 20 /* same */\n         frame_type = 3 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n+        frame_type = 13 /* same */\n \n   public void flush() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #9                  // Field out:Ljava/io/OutputStream;\n-         4: invokevirtual #50                 // Method java/io/OutputStream.flush:()V\n+         1: getfield      #47                 // Field out:Ljava/io/OutputStream;\n+         4: invokevirtual #181                // Method java/io/OutputStream.flush:()V\n          7: return\n       LineNumberTable:\n         line 201: 0\n         line 202: 7\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream;\n-    Exceptions:\n-      throws java.io.IOException\n \n   public void close() throws java.io.IOException;\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n+    Exceptions:\n+      throws java.io.IOException\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #51                 // Field closed:Z\n+         1: getfield      #184                // Field closed:Z\n          4: ifne          30\n          7: aload_0\n-         8: invokevirtual #52                 // Method finish:()V\n+         8: invokevirtual #186                // Method finish:()V\n         11: aload_0\n-        12: getfield      #13                 // Field deflater:Ljava/util/zip/Deflater;\n-        15: invokevirtual #53                 // Method java/util/zip/Deflater.end:()V\n+        12: getfield      #58                 // Field deflater:Ljava/util/zip/Deflater;\n+        15: invokevirtual #187                // Method java/util/zip/Deflater.end:()V\n         18: aload_0\n-        19: getfield      #9                  // Field out:Ljava/io/OutputStream;\n-        22: invokevirtual #54                 // Method java/io/OutputStream.close:()V\n+        19: getfield      #47                 // Field out:Ljava/io/OutputStream;\n+        22: invokevirtual #190                // Method java/io/OutputStream.close:()V\n         25: aload_0\n         26: iconst_1\n-        27: putfield      #51                 // Field closed:Z\n+        27: putfield      #184                // Field closed:Z\n         30: return\n       LineNumberTable:\n         line 206: 0\n         line 207: 7\n         line 208: 11\n         line 209: 18\n         line 210: 25\n         line 212: 30\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      31     0  this   Lorg/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream;\n       StackMapTable: number_of_entries = 1\n         frame_type = 30 /* same */\n-    Exceptions:\n-      throws java.io.IOException\n }\n SourceFile: \"GzipCompressorOutputStream.java\"\n"}]}
