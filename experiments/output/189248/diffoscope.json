{"diffoscope-json-version": 1, "source1": "first/X7875_NewUnix.class", "source2": "second/X7875_NewUnix.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,230 +1,230 @@\n-  SHA-256 checksum e2e0e82e624ad4c355bc1b9c1e445601ffc96810a6dd2d6f0de2663df12e25c4\n+  SHA-256 checksum d503445cd029c89306ba84f463d1f976f613c9a8b18864ac2e0e7c26b2ee2d36\n   Compiled from \"X7875_NewUnix.java\"\n public class org.apache.commons.compress.archivers.zip.X7875_NewUnix implements org.apache.commons.compress.archivers.zip.ZipExtraField,java.lang.Cloneable,java.io.Serializable\n   minor version: 0\n   major version: 52\n   flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n-  this_class: #7                          // org/apache/commons/compress/archivers/zip/X7875_NewUnix\n-  super_class: #48                        // java/lang/Object\n+  this_class: #20                         // org/apache/commons/compress/archivers/zip/X7875_NewUnix\n+  super_class: #14                        // java/lang/Object\n   interfaces: 3, fields: 7, methods: 19, attributes: 1\n Constant pool:\n-    #1 = Methodref          #130.#131     // java/lang/Math.max:(II)I\n-    #2 = Methodref          #132.#133     // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-    #3 = Methodref          #48.#134      // java/lang/Object.\"<init>\":()V\n-    #4 = Fieldref           #7.#135       // org/apache/commons/compress/archivers/zip/X7875_NewUnix.version:I\n-    #5 = Methodref          #7.#136       // org/apache/commons/compress/archivers/zip/X7875_NewUnix.reset:()V\n-    #6 = Methodref          #48.#137      // java/lang/Object.clone:()Ljava/lang/Object;\n-    #7 = Class              #138          // org/apache/commons/compress/archivers/zip/X7875_NewUnix\n-    #8 = Fieldref           #7.#139       // org/apache/commons/compress/archivers/zip/X7875_NewUnix.uid:Ljava/math/BigInteger;\n-    #9 = Methodref          #37.#140      // java/math/BigInteger.equals:(Ljava/lang/Object;)Z\n-   #10 = Fieldref           #7.#141       // org/apache/commons/compress/archivers/zip/X7875_NewUnix.gid:Ljava/math/BigInteger;\n-   #11 = Fieldref           #142.#143     // org/apache/commons/compress/utils/ByteUtils.EMPTY_BYTE_ARRAY:[B\n-   #12 = Fieldref           #7.#144       // org/apache/commons/compress/archivers/zip/X7875_NewUnix.ZERO:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #13 = Methodref          #145.#146     // org/apache/commons/compress/archivers/zip/ZipUtil.bigToLong:(Ljava/math/BigInteger;)J\n-   #14 = Fieldref           #7.#147       // org/apache/commons/compress/archivers/zip/X7875_NewUnix.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #15 = Methodref          #37.#148      // java/math/BigInteger.toByteArray:()[B\n-   #16 = Methodref          #7.#149       // org/apache/commons/compress/archivers/zip/X7875_NewUnix.trimLeadingZeroesForceMinLength:([B)[B\n-   #17 = Methodref          #145.#150     // org/apache/commons/compress/archivers/zip/ZipUtil.reverse:([B)[B\n-   #18 = Methodref          #145.#151     // org/apache/commons/compress/archivers/zip/ZipUtil.unsignedIntToSignedByte:(I)B\n-   #19 = Class              #152          // org/apache/commons/compress/archivers/zip/ZipShort\n-   #20 = Methodref          #19.#153      // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-   #21 = Integer            -1234567\n-   #22 = Methodref          #37.#154      // java/math/BigInteger.hashCode:()I\n-   #23 = Methodref          #155.#156     // java/lang/Integer.rotateLeft:(II)I\n-   #24 = Class              #157          // java/util/zip/ZipException\n-   #25 = Class              #158          // java/lang/StringBuilder\n-   #26 = Methodref          #25.#134      // java/lang/StringBuilder.\"<init>\":()V\n-   #27 = String             #159          // X7875_NewUnix length is too short, only\n-   #28 = Methodref          #25.#160      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-   #29 = Methodref          #25.#161      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-   #30 = String             #162          //  bytes\n-   #31 = Methodref          #25.#163      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n-   #32 = Methodref          #24.#164      // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n-   #33 = Methodref          #145.#165     // org/apache/commons/compress/archivers/zip/ZipUtil.signedByteToUnsignedInt:(B)I\n-   #34 = String             #166          // X7875_NewUnix invalid: uidSize\n-   #35 = String             #167          //  doesn\\'t fit into\n-   #36 = Methodref          #168.#169     // java/util/Arrays.copyOfRange:([BII)[B\n-   #37 = Class              #170          // java/math/BigInteger\n-   #38 = Methodref          #37.#171      // java/math/BigInteger.\"<init>\":(I[B)V\n-   #39 = String             #172          // X7875_NewUnix invalid: gidSize\n-   #40 = Fieldref           #7.#173       // org/apache/commons/compress/archivers/zip/X7875_NewUnix.ONE_THOUSAND:Ljava/math/BigInteger;\n-   #41 = Methodref          #145.#174     // org/apache/commons/compress/archivers/zip/ZipUtil.longToBig:(J)Ljava/math/BigInteger;\n-   #42 = String             #175          // 0x7875 Zip Extra Field: UID=\n-   #43 = Methodref          #25.#176      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-   #44 = String             #177          //  GID=\n-   #45 = Long               1000l\n-   #47 = Methodref          #37.#178      // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-   #48 = Class              #179          // java/lang/Object\n-   #49 = Class              #180          // org/apache/commons/compress/archivers/zip/ZipExtraField\n-   #50 = Class              #181          // java/lang/Cloneable\n-   #51 = Class              #182          // java/io/Serializable\n-   #52 = Utf8               HEADER_ID\n-   #53 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #54 = Utf8               ZERO\n-   #55 = Utf8               ONE_THOUSAND\n-   #56 = Utf8               Ljava/math/BigInteger;\n-   #57 = Utf8               serialVersionUID\n-   #58 = Utf8               J\n-   #59 = Utf8               ConstantValue\n-   #60 = Long               1l\n-   #62 = Utf8               version\n-   #63 = Utf8               I\n-   #64 = Utf8               uid\n-   #65 = Utf8               gid\n-   #66 = Utf8               trimLeadingZeroesForceMinLength\n-   #67 = Utf8               ([B)[B\n-   #68 = Utf8               Code\n-   #69 = Utf8               LineNumberTable\n-   #70 = Utf8               LocalVariableTable\n-   #71 = Utf8               b\n-   #72 = Utf8               B\n-   #73 = Utf8               array\n-   #74 = Utf8               [B\n-   #75 = Utf8               pos\n-   #76 = Utf8               MIN_LENGTH\n-   #77 = Utf8               trimmedArray\n-   #78 = Utf8               startPos\n-   #79 = Utf8               StackMapTable\n-   #80 = Class              #74           // \"[B\"\n-   #81 = Utf8               <init>\n-   #82 = Utf8               ()V\n-   #83 = Utf8               this\n-   #84 = Utf8               Lorg/apache/commons/compress/archivers/zip/X7875_NewUnix;\n-   #85 = Utf8               clone\n-   #86 = Utf8               ()Ljava/lang/Object;\n-   #87 = Utf8               Exceptions\n-   #88 = Class              #183          // java/lang/CloneNotSupportedException\n-   #89 = Utf8               equals\n-   #90 = Utf8               (Ljava/lang/Object;)Z\n-   #91 = Utf8               xf\n-   #92 = Utf8               o\n-   #93 = Utf8               Ljava/lang/Object;\n-   #94 = Utf8               getCentralDirectoryData\n-   #95 = Utf8               ()[B\n-   #96 = Utf8               getCentralDirectoryLength\n-   #97 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-   #98 = Utf8               getGID\n-   #99 = Utf8               ()J\n-  #100 = Utf8               getHeaderId\n-  #101 = Utf8               getLocalFileDataData\n-  #102 = Utf8               uidBytes\n-  #103 = Utf8               gidBytes\n-  #104 = Utf8               uidBytesLen\n-  #105 = Utf8               gidBytesLen\n-  #106 = Utf8               data\n-  #107 = Utf8               getLocalFileDataLength\n-  #108 = Utf8               uidSize\n-  #109 = Utf8               gidSize\n-  #110 = Utf8               getUID\n-  #111 = Utf8               hashCode\n-  #112 = Utf8               ()I\n-  #113 = Utf8               hc\n-  #114 = Utf8               parseFromCentralDirectoryData\n-  #115 = Utf8               ([BII)V\n-  #116 = Utf8               buffer\n-  #117 = Utf8               offset\n-  #118 = Utf8               length\n-  #119 = Utf8               parseFromLocalFileData\n-  #120 = Utf8               reset\n-  #121 = Utf8               setGID\n-  #122 = Utf8               (J)V\n-  #123 = Utf8               l\n-  #124 = Utf8               setUID\n-  #125 = Utf8               toString\n-  #126 = Utf8               ()Ljava/lang/String;\n-  #127 = Utf8               <clinit>\n-  #128 = Utf8               SourceFile\n-  #129 = Utf8               X7875_NewUnix.java\n-  #130 = Class              #184          // java/lang/Math\n-  #131 = NameAndType        #185:#186     // max:(II)I\n-  #132 = Class              #187          // java/lang/System\n-  #133 = NameAndType        #188:#189     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #134 = NameAndType        #81:#82       // \"<init>\":()V\n-  #135 = NameAndType        #62:#63       // version:I\n-  #136 = NameAndType        #120:#82      // reset:()V\n-  #137 = NameAndType        #85:#86       // clone:()Ljava/lang/Object;\n-  #138 = Utf8               org/apache/commons/compress/archivers/zip/X7875_NewUnix\n-  #139 = NameAndType        #64:#56       // uid:Ljava/math/BigInteger;\n-  #140 = NameAndType        #89:#90       // equals:(Ljava/lang/Object;)Z\n-  #141 = NameAndType        #65:#56       // gid:Ljava/math/BigInteger;\n-  #142 = Class              #190          // org/apache/commons/compress/utils/ByteUtils\n-  #143 = NameAndType        #191:#74      // EMPTY_BYTE_ARRAY:[B\n-  #144 = NameAndType        #54:#53       // ZERO:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #145 = Class              #192          // org/apache/commons/compress/archivers/zip/ZipUtil\n-  #146 = NameAndType        #193:#194     // bigToLong:(Ljava/math/BigInteger;)J\n-  #147 = NameAndType        #52:#53       // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-  #148 = NameAndType        #195:#95      // toByteArray:()[B\n-  #149 = NameAndType        #66:#67       // trimLeadingZeroesForceMinLength:([B)[B\n-  #150 = NameAndType        #196:#67      // reverse:([B)[B\n-  #151 = NameAndType        #197:#198     // unsignedIntToSignedByte:(I)B\n-  #152 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n-  #153 = NameAndType        #81:#199      // \"<init>\":(I)V\n-  #154 = NameAndType        #111:#112     // hashCode:()I\n-  #155 = Class              #200          // java/lang/Integer\n-  #156 = NameAndType        #201:#186     // rotateLeft:(II)I\n-  #157 = Utf8               java/util/zip/ZipException\n-  #158 = Utf8               java/lang/StringBuilder\n-  #159 = Utf8               X7875_NewUnix length is too short, only\n-  #160 = NameAndType        #202:#203     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #161 = NameAndType        #202:#204     // append:(I)Ljava/lang/StringBuilder;\n-  #162 = Utf8                bytes\n-  #163 = NameAndType        #125:#126     // toString:()Ljava/lang/String;\n-  #164 = NameAndType        #81:#205      // \"<init>\":(Ljava/lang/String;)V\n-  #165 = NameAndType        #206:#207     // signedByteToUnsignedInt:(B)I\n-  #166 = Utf8               X7875_NewUnix invalid: uidSize\n-  #167 = Utf8                doesn\\'t fit into\n-  #168 = Class              #208          // java/util/Arrays\n-  #169 = NameAndType        #209:#210     // copyOfRange:([BII)[B\n-  #170 = Utf8               java/math/BigInteger\n-  #171 = NameAndType        #81:#211      // \"<init>\":(I[B)V\n-  #172 = Utf8               X7875_NewUnix invalid: gidSize\n-  #173 = NameAndType        #55:#56       // ONE_THOUSAND:Ljava/math/BigInteger;\n-  #174 = NameAndType        #212:#213     // longToBig:(J)Ljava/math/BigInteger;\n-  #175 = Utf8               0x7875 Zip Extra Field: UID=\n-  #176 = NameAndType        #202:#214     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #177 = Utf8                GID=\n-  #178 = NameAndType        #215:#213     // valueOf:(J)Ljava/math/BigInteger;\n-  #179 = Utf8               java/lang/Object\n-  #180 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n-  #181 = Utf8               java/lang/Cloneable\n-  #182 = Utf8               java/io/Serializable\n-  #183 = Utf8               java/lang/CloneNotSupportedException\n-  #184 = Utf8               java/lang/Math\n-  #185 = Utf8               max\n-  #186 = Utf8               (II)I\n-  #187 = Utf8               java/lang/System\n-  #188 = Utf8               arraycopy\n-  #189 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n-  #190 = Utf8               org/apache/commons/compress/utils/ByteUtils\n-  #191 = Utf8               EMPTY_BYTE_ARRAY\n-  #192 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n-  #193 = Utf8               bigToLong\n-  #194 = Utf8               (Ljava/math/BigInteger;)J\n-  #195 = Utf8               toByteArray\n-  #196 = Utf8               reverse\n-  #197 = Utf8               unsignedIntToSignedByte\n-  #198 = Utf8               (I)B\n-  #199 = Utf8               (I)V\n-  #200 = Utf8               java/lang/Integer\n-  #201 = Utf8               rotateLeft\n-  #202 = Utf8               append\n-  #203 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n-  #204 = Utf8               (I)Ljava/lang/StringBuilder;\n-  #205 = Utf8               (Ljava/lang/String;)V\n-  #206 = Utf8               signedByteToUnsignedInt\n-  #207 = Utf8               (B)I\n-  #208 = Utf8               java/util/Arrays\n-  #209 = Utf8               copyOfRange\n-  #210 = Utf8               ([BII)[B\n-  #211 = Utf8               (I[B)V\n-  #212 = Utf8               longToBig\n-  #213 = Utf8               (J)Ljava/math/BigInteger;\n-  #214 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-  #215 = Utf8               valueOf\n+    #1 = Methodref          #2.#3         // java/lang/Math.max:(II)I\n+    #2 = Class              #4            // java/lang/Math\n+    #3 = NameAndType        #5:#6         // max:(II)I\n+    #4 = Utf8               java/lang/Math\n+    #5 = Utf8               max\n+    #6 = Utf8               (II)I\n+    #7 = Methodref          #8.#9         // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+    #8 = Class              #10           // java/lang/System\n+    #9 = NameAndType        #11:#12       // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #10 = Utf8               java/lang/System\n+   #11 = Utf8               arraycopy\n+   #12 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V\n+   #13 = Methodref          #14.#15       // java/lang/Object.\"<init>\":()V\n+   #14 = Class              #16           // java/lang/Object\n+   #15 = NameAndType        #17:#18       // \"<init>\":()V\n+   #16 = Utf8               java/lang/Object\n+   #17 = Utf8               <init>\n+   #18 = Utf8               ()V\n+   #19 = Fieldref           #20.#21       // org/apache/commons/compress/archivers/zip/X7875_NewUnix.version:I\n+   #20 = Class              #22           // org/apache/commons/compress/archivers/zip/X7875_NewUnix\n+   #21 = NameAndType        #23:#24       // version:I\n+   #22 = Utf8               org/apache/commons/compress/archivers/zip/X7875_NewUnix\n+   #23 = Utf8               version\n+   #24 = Utf8               I\n+   #25 = Methodref          #20.#26       // org/apache/commons/compress/archivers/zip/X7875_NewUnix.reset:()V\n+   #26 = NameAndType        #27:#18       // reset:()V\n+   #27 = Utf8               reset\n+   #28 = Methodref          #14.#29       // java/lang/Object.clone:()Ljava/lang/Object;\n+   #29 = NameAndType        #30:#31       // clone:()Ljava/lang/Object;\n+   #30 = Utf8               clone\n+   #31 = Utf8               ()Ljava/lang/Object;\n+   #32 = Fieldref           #20.#33       // org/apache/commons/compress/archivers/zip/X7875_NewUnix.uid:Ljava/math/BigInteger;\n+   #33 = NameAndType        #34:#35       // uid:Ljava/math/BigInteger;\n+   #34 = Utf8               uid\n+   #35 = Utf8               Ljava/math/BigInteger;\n+   #36 = Methodref          #37.#38       // java/math/BigInteger.equals:(Ljava/lang/Object;)Z\n+   #37 = Class              #39           // java/math/BigInteger\n+   #38 = NameAndType        #40:#41       // equals:(Ljava/lang/Object;)Z\n+   #39 = Utf8               java/math/BigInteger\n+   #40 = Utf8               equals\n+   #41 = Utf8               (Ljava/lang/Object;)Z\n+   #42 = Fieldref           #20.#43       // org/apache/commons/compress/archivers/zip/X7875_NewUnix.gid:Ljava/math/BigInteger;\n+   #43 = NameAndType        #44:#35       // gid:Ljava/math/BigInteger;\n+   #44 = Utf8               gid\n+   #45 = Fieldref           #46.#47       // org/apache/commons/compress/utils/ByteUtils.EMPTY_BYTE_ARRAY:[B\n+   #46 = Class              #48           // org/apache/commons/compress/utils/ByteUtils\n+   #47 = NameAndType        #49:#50       // EMPTY_BYTE_ARRAY:[B\n+   #48 = Utf8               org/apache/commons/compress/utils/ByteUtils\n+   #49 = Utf8               EMPTY_BYTE_ARRAY\n+   #50 = Utf8               [B\n+   #51 = Fieldref           #20.#52       // org/apache/commons/compress/archivers/zip/X7875_NewUnix.ZERO:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #52 = NameAndType        #53:#54       // ZERO:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #53 = Utf8               ZERO\n+   #54 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #55 = Methodref          #56.#57       // org/apache/commons/compress/archivers/zip/ZipUtil.bigToLong:(Ljava/math/BigInteger;)J\n+   #56 = Class              #58           // org/apache/commons/compress/archivers/zip/ZipUtil\n+   #57 = NameAndType        #59:#60       // bigToLong:(Ljava/math/BigInteger;)J\n+   #58 = Utf8               org/apache/commons/compress/archivers/zip/ZipUtil\n+   #59 = Utf8               bigToLong\n+   #60 = Utf8               (Ljava/math/BigInteger;)J\n+   #61 = Fieldref           #20.#62       // org/apache/commons/compress/archivers/zip/X7875_NewUnix.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #62 = NameAndType        #63:#54       // HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+   #63 = Utf8               HEADER_ID\n+   #64 = Methodref          #37.#65       // java/math/BigInteger.toByteArray:()[B\n+   #65 = NameAndType        #66:#67       // toByteArray:()[B\n+   #66 = Utf8               toByteArray\n+   #67 = Utf8               ()[B\n+   #68 = Methodref          #20.#69       // org/apache/commons/compress/archivers/zip/X7875_NewUnix.trimLeadingZeroesForceMinLength:([B)[B\n+   #69 = NameAndType        #70:#71       // trimLeadingZeroesForceMinLength:([B)[B\n+   #70 = Utf8               trimLeadingZeroesForceMinLength\n+   #71 = Utf8               ([B)[B\n+   #72 = Methodref          #56.#73       // org/apache/commons/compress/archivers/zip/ZipUtil.reverse:([B)[B\n+   #73 = NameAndType        #74:#71       // reverse:([B)[B\n+   #74 = Utf8               reverse\n+   #75 = Methodref          #56.#76       // org/apache/commons/compress/archivers/zip/ZipUtil.unsignedIntToSignedByte:(I)B\n+   #76 = NameAndType        #77:#78       // unsignedIntToSignedByte:(I)B\n+   #77 = Utf8               unsignedIntToSignedByte\n+   #78 = Utf8               (I)B\n+   #79 = Class              #80           // org/apache/commons/compress/archivers/zip/ZipShort\n+   #80 = Utf8               org/apache/commons/compress/archivers/zip/ZipShort\n+   #81 = Methodref          #79.#82       // org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+   #82 = NameAndType        #17:#83       // \"<init>\":(I)V\n+   #83 = Utf8               (I)V\n+   #84 = Integer            -1234567\n+   #85 = Methodref          #37.#86       // java/math/BigInteger.hashCode:()I\n+   #86 = NameAndType        #87:#88       // hashCode:()I\n+   #87 = Utf8               hashCode\n+   #88 = Utf8               ()I\n+   #89 = Methodref          #90.#91       // java/lang/Integer.rotateLeft:(II)I\n+   #90 = Class              #92           // java/lang/Integer\n+   #91 = NameAndType        #93:#6        // rotateLeft:(II)I\n+   #92 = Utf8               java/lang/Integer\n+   #93 = Utf8               rotateLeft\n+   #94 = Class              #95           // java/util/zip/ZipException\n+   #95 = Utf8               java/util/zip/ZipException\n+   #96 = Class              #97           // java/lang/StringBuilder\n+   #97 = Utf8               java/lang/StringBuilder\n+   #98 = Methodref          #96.#15       // java/lang/StringBuilder.\"<init>\":()V\n+   #99 = String             #100          // X7875_NewUnix length is too short, only\n+  #100 = Utf8               X7875_NewUnix length is too short, only\n+  #101 = Methodref          #96.#102      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #102 = NameAndType        #103:#104     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #103 = Utf8               append\n+  #104 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;\n+  #105 = Methodref          #96.#106      // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+  #106 = NameAndType        #103:#107     // append:(I)Ljava/lang/StringBuilder;\n+  #107 = Utf8               (I)Ljava/lang/StringBuilder;\n+  #108 = String             #109          //  bytes\n+  #109 = Utf8                bytes\n+  #110 = Methodref          #96.#111      // java/lang/StringBuilder.toString:()Ljava/lang/String;\n+  #111 = NameAndType        #112:#113     // toString:()Ljava/lang/String;\n+  #112 = Utf8               toString\n+  #113 = Utf8               ()Ljava/lang/String;\n+  #114 = Methodref          #94.#115      // java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+  #115 = NameAndType        #17:#116      // \"<init>\":(Ljava/lang/String;)V\n+  #116 = Utf8               (Ljava/lang/String;)V\n+  #117 = Methodref          #56.#118      // org/apache/commons/compress/archivers/zip/ZipUtil.signedByteToUnsignedInt:(B)I\n+  #118 = NameAndType        #119:#120     // signedByteToUnsignedInt:(B)I\n+  #119 = Utf8               signedByteToUnsignedInt\n+  #120 = Utf8               (B)I\n+  #121 = String             #122          // X7875_NewUnix invalid: uidSize\n+  #122 = Utf8               X7875_NewUnix invalid: uidSize\n+  #123 = String             #124          //  doesn\\'t fit into\n+  #124 = Utf8                doesn\\'t fit into\n+  #125 = Methodref          #126.#127     // java/util/Arrays.copyOfRange:([BII)[B\n+  #126 = Class              #128          // java/util/Arrays\n+  #127 = NameAndType        #129:#130     // copyOfRange:([BII)[B\n+  #128 = Utf8               java/util/Arrays\n+  #129 = Utf8               copyOfRange\n+  #130 = Utf8               ([BII)[B\n+  #131 = Methodref          #37.#132      // java/math/BigInteger.\"<init>\":(I[B)V\n+  #132 = NameAndType        #17:#133      // \"<init>\":(I[B)V\n+  #133 = Utf8               (I[B)V\n+  #134 = String             #135          // X7875_NewUnix invalid: gidSize\n+  #135 = Utf8               X7875_NewUnix invalid: gidSize\n+  #136 = Fieldref           #20.#137      // org/apache/commons/compress/archivers/zip/X7875_NewUnix.ONE_THOUSAND:Ljava/math/BigInteger;\n+  #137 = NameAndType        #138:#35      // ONE_THOUSAND:Ljava/math/BigInteger;\n+  #138 = Utf8               ONE_THOUSAND\n+  #139 = Methodref          #56.#140      // org/apache/commons/compress/archivers/zip/ZipUtil.longToBig:(J)Ljava/math/BigInteger;\n+  #140 = NameAndType        #141:#142     // longToBig:(J)Ljava/math/BigInteger;\n+  #141 = Utf8               longToBig\n+  #142 = Utf8               (J)Ljava/math/BigInteger;\n+  #143 = String             #144          // 0x7875 Zip Extra Field: UID=\n+  #144 = Utf8               0x7875 Zip Extra Field: UID=\n+  #145 = Methodref          #96.#146      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #146 = NameAndType        #103:#147     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #147 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+  #148 = String             #149          //  GID=\n+  #149 = Utf8                GID=\n+  #150 = Long               1000l\n+  #152 = Methodref          #37.#153      // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+  #153 = NameAndType        #154:#142     // valueOf:(J)Ljava/math/BigInteger;\n+  #154 = Utf8               valueOf\n+  #155 = Class              #156          // org/apache/commons/compress/archivers/zip/ZipExtraField\n+  #156 = Utf8               org/apache/commons/compress/archivers/zip/ZipExtraField\n+  #157 = Class              #158          // java/lang/Cloneable\n+  #158 = Utf8               java/lang/Cloneable\n+  #159 = Class              #160          // java/io/Serializable\n+  #160 = Utf8               java/io/Serializable\n+  #161 = Utf8               serialVersionUID\n+  #162 = Utf8               J\n+  #163 = Utf8               ConstantValue\n+  #164 = Long               1l\n+  #166 = Utf8               Code\n+  #167 = Utf8               LineNumberTable\n+  #168 = Utf8               LocalVariableTable\n+  #169 = Utf8               b\n+  #170 = Utf8               B\n+  #171 = Utf8               array\n+  #172 = Utf8               pos\n+  #173 = Utf8               MIN_LENGTH\n+  #174 = Utf8               trimmedArray\n+  #175 = Utf8               startPos\n+  #176 = Utf8               StackMapTable\n+  #177 = Class              #50           // \"[B\"\n+  #178 = Utf8               this\n+  #179 = Utf8               Lorg/apache/commons/compress/archivers/zip/X7875_NewUnix;\n+  #180 = Utf8               Exceptions\n+  #181 = Class              #182          // java/lang/CloneNotSupportedException\n+  #182 = Utf8               java/lang/CloneNotSupportedException\n+  #183 = Utf8               xf\n+  #184 = Utf8               o\n+  #185 = Utf8               Ljava/lang/Object;\n+  #186 = Utf8               getCentralDirectoryData\n+  #187 = Utf8               getCentralDirectoryLength\n+  #188 = Utf8               ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+  #189 = Utf8               getGID\n+  #190 = Utf8               ()J\n+  #191 = Utf8               getHeaderId\n+  #192 = Utf8               getLocalFileDataData\n+  #193 = Utf8               uidBytes\n+  #194 = Utf8               gidBytes\n+  #195 = Utf8               uidBytesLen\n+  #196 = Utf8               gidBytesLen\n+  #197 = Utf8               data\n+  #198 = Utf8               getLocalFileDataLength\n+  #199 = Utf8               uidSize\n+  #200 = Utf8               gidSize\n+  #201 = Utf8               getUID\n+  #202 = Utf8               hc\n+  #203 = Utf8               parseFromCentralDirectoryData\n+  #204 = Utf8               ([BII)V\n+  #205 = Utf8               buffer\n+  #206 = Utf8               offset\n+  #207 = Utf8               length\n+  #208 = Utf8               parseFromLocalFileData\n+  #209 = Utf8               setGID\n+  #210 = Utf8               (J)V\n+  #211 = Utf8               l\n+  #212 = Utf8               setUID\n+  #213 = Utf8               <clinit>\n+  #214 = Utf8               SourceFile\n+  #215 = Utf8               X7875_NewUnix.java\n {\n   private static final org.apache.commons.compress.archivers.zip.ZipShort HEADER_ID;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL\n \n   private static final org.apache.commons.compress.archivers.zip.ZipShort ZERO;\n     descriptor: Lorg/apache/commons/compress/archivers/zip/ZipShort;\n@@ -304,15 +304,15 @@\n         68: iload_1\n         69: aload_3\n         70: iload         4\n         72: aload_3\n         73: arraylength\n         74: iload         4\n         76: isub\n-        77: invokestatic  #2                  // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+        77: invokestatic  #7                  // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n         80: aload_3\n         81: areturn\n       LineNumberTable:\n         line 75: 0\n         line 76: 4\n         line 79: 6\n         line 80: 8\n@@ -349,20 +349,20 @@\n \n   public org.apache.commons.compress.archivers.zip.X7875_NewUnix();\n     descriptor: ()V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: invokespecial #3                  // Method java/lang/Object.\"<init>\":()V\n+         1: invokespecial #13                 // Method java/lang/Object.\"<init>\":()V\n          4: aload_0\n          5: iconst_1\n-         6: putfield      #4                  // Field version:I\n+         6: putfield      #19                 // Field version:I\n          9: aload_0\n-        10: invokespecial #5                  // Method reset:()V\n+        10: invokespecial #25                 // Method reset:()V\n         13: return\n       LineNumberTable:\n         line 145: 0\n         line 132: 4\n         line 146: 9\n         line 147: 13\n       LocalVariableTable:\n@@ -371,15 +371,15 @@\n \n   public java.lang.Object clone() throws java.lang.CloneNotSupportedException;\n     descriptor: ()Ljava/lang/Object;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n          0: aload_0\n-         1: invokespecial #6                  // Method java/lang/Object.clone:()Ljava/lang/Object;\n+         1: invokespecial #28                 // Method java/lang/Object.clone:()Ljava/lang/Object;\n          4: areturn\n       LineNumberTable:\n         line 151: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/X7875_NewUnix;\n     Exceptions:\n@@ -387,35 +387,35 @@\n \n   public boolean equals(java.lang.Object);\n     descriptor: (Ljava/lang/Object;)Z\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=3, args_size=2\n          0: aload_1\n-         1: instanceof    #7                  // class org/apache/commons/compress/archivers/zip/X7875_NewUnix\n+         1: instanceof    #20                 // class org/apache/commons/compress/archivers/zip/X7875_NewUnix\n          4: ifeq          57\n          7: aload_1\n-         8: checkcast     #7                  // class org/apache/commons/compress/archivers/zip/X7875_NewUnix\n+         8: checkcast     #20                 // class org/apache/commons/compress/archivers/zip/X7875_NewUnix\n         11: astore_2\n         12: aload_0\n-        13: getfield      #4                  // Field version:I\n+        13: getfield      #19                 // Field version:I\n         16: aload_2\n-        17: getfield      #4                  // Field version:I\n+        17: getfield      #19                 // Field version:I\n         20: if_icmpne     55\n         23: aload_0\n-        24: getfield      #8                  // Field uid:Ljava/math/BigInteger;\n+        24: getfield      #32                 // Field uid:Ljava/math/BigInteger;\n         27: aload_2\n-        28: getfield      #8                  // Field uid:Ljava/math/BigInteger;\n-        31: invokevirtual #9                  // Method java/math/BigInteger.equals:(Ljava/lang/Object;)Z\n+        28: getfield      #32                 // Field uid:Ljava/math/BigInteger;\n+        31: invokevirtual #36                 // Method java/math/BigInteger.equals:(Ljava/lang/Object;)Z\n         34: ifeq          55\n         37: aload_0\n-        38: getfield      #10                 // Field gid:Ljava/math/BigInteger;\n+        38: getfield      #42                 // Field gid:Ljava/math/BigInteger;\n         41: aload_2\n-        42: getfield      #10                 // Field gid:Ljava/math/BigInteger;\n-        45: invokevirtual #9                  // Method java/math/BigInteger.equals:(Ljava/lang/Object;)Z\n+        42: getfield      #42                 // Field gid:Ljava/math/BigInteger;\n+        45: invokevirtual #36                 // Method java/math/BigInteger.equals:(Ljava/lang/Object;)Z\n         48: ifeq          55\n         51: iconst_1\n         52: goto          56\n         55: iconst_0\n         56: ireturn\n         57: iconst_0\n         58: ireturn\n@@ -439,88 +439,88 @@\n           offset_delta = 0\n \n   public byte[] getCentralDirectoryData();\n     descriptor: ()[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n-         0: getstatic     #11                 // Field org/apache/commons/compress/utils/ByteUtils.EMPTY_BYTE_ARRAY:[B\n+         0: getstatic     #45                 // Field org/apache/commons/compress/utils/ByteUtils.EMPTY_BYTE_ARRAY:[B\n          3: areturn\n       LineNumberTable:\n         line 172: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       4     0  this   Lorg/apache/commons/compress/archivers/zip/X7875_NewUnix;\n \n   public org.apache.commons.compress.archivers.zip.ZipShort getCentralDirectoryLength();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n-         0: getstatic     #12                 // Field ZERO:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+         0: getstatic     #51                 // Field ZERO:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n          3: areturn\n       LineNumberTable:\n         line 183: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       4     0  this   Lorg/apache/commons/compress/archivers/zip/X7875_NewUnix;\n \n   public long getGID();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #10                 // Field gid:Ljava/math/BigInteger;\n-         4: invokestatic  #13                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.bigToLong:(Ljava/math/BigInteger;)J\n+         1: getfield      #42                 // Field gid:Ljava/math/BigInteger;\n+         4: invokestatic  #55                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.bigToLong:(Ljava/math/BigInteger;)J\n          7: lreturn\n       LineNumberTable:\n         line 194: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/archivers/zip/X7875_NewUnix;\n \n   public org.apache.commons.compress.archivers.zip.ZipShort getHeaderId();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=1, locals=1, args_size=1\n-         0: getstatic     #14                 // Field HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+         0: getstatic     #61                 // Field HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n          3: areturn\n       LineNumberTable:\n         line 203: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       4     0  this   Lorg/apache/commons/compress/archivers/zip/X7875_NewUnix;\n \n   public byte[] getLocalFileDataData();\n     descriptor: ()[B\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=7, args_size=1\n          0: aload_0\n-         1: getfield      #8                  // Field uid:Ljava/math/BigInteger;\n-         4: invokevirtual #15                 // Method java/math/BigInteger.toByteArray:()[B\n+         1: getfield      #32                 // Field uid:Ljava/math/BigInteger;\n+         4: invokevirtual #64                 // Method java/math/BigInteger.toByteArray:()[B\n          7: astore_1\n          8: aload_0\n-         9: getfield      #10                 // Field gid:Ljava/math/BigInteger;\n-        12: invokevirtual #15                 // Method java/math/BigInteger.toByteArray:()[B\n+         9: getfield      #42                 // Field gid:Ljava/math/BigInteger;\n+        12: invokevirtual #64                 // Method java/math/BigInteger.toByteArray:()[B\n         15: astore_2\n         16: aload_1\n-        17: invokestatic  #16                 // Method trimLeadingZeroesForceMinLength:([B)[B\n+        17: invokestatic  #68                 // Method trimLeadingZeroesForceMinLength:([B)[B\n         20: astore_1\n         21: aload_1\n         22: ifnull        30\n         25: aload_1\n         26: arraylength\n         27: goto          31\n         30: iconst_0\n         31: istore_3\n         32: aload_2\n-        33: invokestatic  #16                 // Method trimLeadingZeroesForceMinLength:([B)[B\n+        33: invokestatic  #68                 // Method trimLeadingZeroesForceMinLength:([B)[B\n         36: astore_2\n         37: aload_2\n         38: ifnull        46\n         41: aload_2\n         42: arraylength\n         43: goto          47\n         46: iconst_0\n@@ -531,62 +531,62 @@\n         52: iload         4\n         54: iadd\n         55: newarray       byte\n         57: astore        5\n         59: aload_1\n         60: ifnull        68\n         63: aload_1\n-        64: invokestatic  #17                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.reverse:([B)[B\n+        64: invokestatic  #72                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.reverse:([B)[B\n         67: pop\n         68: aload_2\n         69: ifnull        77\n         72: aload_2\n-        73: invokestatic  #17                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.reverse:([B)[B\n+        73: invokestatic  #72                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.reverse:([B)[B\n         76: pop\n         77: iconst_0\n         78: istore        6\n         80: aload         5\n         82: iload         6\n         84: iinc          6, 1\n         87: aload_0\n-        88: getfield      #4                  // Field version:I\n-        91: invokestatic  #18                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.unsignedIntToSignedByte:(I)B\n+        88: getfield      #19                 // Field version:I\n+        91: invokestatic  #75                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.unsignedIntToSignedByte:(I)B\n         94: bastore\n         95: aload         5\n         97: iload         6\n         99: iinc          6, 1\n        102: iload_3\n-       103: invokestatic  #18                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.unsignedIntToSignedByte:(I)B\n+       103: invokestatic  #75                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.unsignedIntToSignedByte:(I)B\n        106: bastore\n        107: aload_1\n        108: ifnull        121\n        111: aload_1\n        112: iconst_0\n        113: aload         5\n        115: iload         6\n        117: iload_3\n-       118: invokestatic  #2                  // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+       118: invokestatic  #7                  // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n        121: iload         6\n        123: iload_3\n        124: iadd\n        125: istore        6\n        127: aload         5\n        129: iload         6\n        131: iinc          6, 1\n        134: iload         4\n-       136: invokestatic  #18                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.unsignedIntToSignedByte:(I)B\n+       136: invokestatic  #75                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.unsignedIntToSignedByte:(I)B\n        139: bastore\n        140: aload_2\n        141: ifnull        155\n        144: aload_2\n        145: iconst_0\n        146: aload         5\n        148: iload         6\n        150: iload         4\n-       152: invokestatic  #2                  // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n+       152: invokestatic  #7                  // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V\n        155: aload         5\n        157: areturn\n       LineNumberTable:\n         line 214: 0\n         line 215: 8\n         line 220: 16\n         line 221: 21\n@@ -638,45 +638,45 @@\n \n   public org.apache.commons.compress.archivers.zip.ZipShort getLocalFileDataLength();\n     descriptor: ()Lorg/apache/commons/compress/archivers/zip/ZipShort;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=4, locals=4, args_size=1\n          0: aload_0\n-         1: getfield      #8                  // Field uid:Ljava/math/BigInteger;\n-         4: invokevirtual #15                 // Method java/math/BigInteger.toByteArray:()[B\n-         7: invokestatic  #16                 // Method trimLeadingZeroesForceMinLength:([B)[B\n+         1: getfield      #32                 // Field uid:Ljava/math/BigInteger;\n+         4: invokevirtual #64                 // Method java/math/BigInteger.toByteArray:()[B\n+         7: invokestatic  #68                 // Method trimLeadingZeroesForceMinLength:([B)[B\n         10: astore_1\n         11: aload_1\n         12: ifnonnull     19\n         15: iconst_0\n         16: goto          21\n         19: aload_1\n         20: arraylength\n         21: istore_2\n         22: aload_0\n-        23: getfield      #10                 // Field gid:Ljava/math/BigInteger;\n-        26: invokevirtual #15                 // Method java/math/BigInteger.toByteArray:()[B\n-        29: invokestatic  #16                 // Method trimLeadingZeroesForceMinLength:([B)[B\n+        23: getfield      #42                 // Field gid:Ljava/math/BigInteger;\n+        26: invokevirtual #64                 // Method java/math/BigInteger.toByteArray:()[B\n+        29: invokestatic  #68                 // Method trimLeadingZeroesForceMinLength:([B)[B\n         32: astore_1\n         33: aload_1\n         34: ifnonnull     41\n         37: iconst_0\n         38: goto          43\n         41: aload_1\n         42: arraylength\n         43: istore_3\n-        44: new           #19                 // class org/apache/commons/compress/archivers/zip/ZipShort\n+        44: new           #79                 // class org/apache/commons/compress/archivers/zip/ZipShort\n         47: dup\n         48: iconst_3\n         49: iload_2\n         50: iadd\n         51: iload_3\n         52: iadd\n-        53: invokespecial #20                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+        53: invokespecial #81                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n         56: areturn\n       LineNumberTable:\n         line 262: 0\n         line 263: 11\n         line 264: 22\n         line 265: 33\n         line 268: 44\n@@ -700,45 +700,45 @@\n \n   public long getUID();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getfield      #8                  // Field uid:Ljava/math/BigInteger;\n-         4: invokestatic  #13                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.bigToLong:(Ljava/math/BigInteger;)J\n+         1: getfield      #32                 // Field uid:Ljava/math/BigInteger;\n+         4: invokestatic  #55                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.bigToLong:(Ljava/math/BigInteger;)J\n          7: lreturn\n       LineNumberTable:\n         line 279: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       8     0  this   Lorg/apache/commons/compress/archivers/zip/X7875_NewUnix;\n \n   public int hashCode();\n     descriptor: ()I\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=2, args_size=1\n-         0: ldc           #21                 // int -1234567\n+         0: ldc           #84                 // int -1234567\n          2: aload_0\n-         3: getfield      #4                  // Field version:I\n+         3: getfield      #19                 // Field version:I\n          6: imul\n          7: istore_1\n          8: iload_1\n          9: aload_0\n-        10: getfield      #8                  // Field uid:Ljava/math/BigInteger;\n-        13: invokevirtual #22                 // Method java/math/BigInteger.hashCode:()I\n+        10: getfield      #32                 // Field uid:Ljava/math/BigInteger;\n+        13: invokevirtual #85                 // Method java/math/BigInteger.hashCode:()I\n         16: bipush        16\n-        18: invokestatic  #23                 // Method java/lang/Integer.rotateLeft:(II)I\n+        18: invokestatic  #89                 // Method java/lang/Integer.rotateLeft:(II)I\n         21: ixor\n         22: istore_1\n         23: iload_1\n         24: aload_0\n-        25: getfield      #10                 // Field gid:Ljava/math/BigInteger;\n-        28: invokevirtual #22                 // Method java/math/BigInteger.hashCode:()I\n+        25: getfield      #42                 // Field gid:Ljava/math/BigInteger;\n+        28: invokevirtual #85                 // Method java/math/BigInteger.hashCode:()I\n         31: ixor\n         32: istore_1\n         33: iload_1\n         34: ireturn\n       LineNumberTable:\n         line 283: 0\n         line 287: 8\n@@ -768,133 +768,133 @@\n \n   public void parseFromLocalFileData(byte[], int, int) throws java.util.zip.ZipException;\n     descriptor: ([BII)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=5, locals=8, args_size=4\n          0: aload_0\n-         1: invokespecial #5                  // Method reset:()V\n+         1: invokespecial #25                 // Method reset:()V\n          4: iload_3\n          5: iconst_3\n          6: if_icmpge     41\n-         9: new           #24                 // class java/util/zip/ZipException\n+         9: new           #94                 // class java/util/zip/ZipException\n         12: dup\n-        13: new           #25                 // class java/lang/StringBuilder\n+        13: new           #96                 // class java/lang/StringBuilder\n         16: dup\n-        17: invokespecial #26                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        20: ldc           #27                 // String X7875_NewUnix length is too short, only\n-        22: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        17: invokespecial #98                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        20: ldc           #99                 // String X7875_NewUnix length is too short, only\n+        22: invokevirtual #101                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         25: iload_3\n-        26: invokevirtual #29                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        29: ldc           #30                 // String  bytes\n-        31: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-        34: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-        37: invokespecial #32                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+        26: invokevirtual #105                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        29: ldc           #108                // String  bytes\n+        31: invokevirtual #101                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        34: invokevirtual #110                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        37: invokespecial #114                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n         40: athrow\n         41: aload_0\n         42: aload_1\n         43: iload_2\n         44: iinc          2, 1\n         47: baload\n-        48: invokestatic  #33                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.signedByteToUnsignedInt:(B)I\n-        51: putfield      #4                  // Field version:I\n+        48: invokestatic  #117                // Method org/apache/commons/compress/archivers/zip/ZipUtil.signedByteToUnsignedInt:(B)I\n+        51: putfield      #19                 // Field version:I\n         54: aload_1\n         55: iload_2\n         56: iinc          2, 1\n         59: baload\n-        60: invokestatic  #33                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.signedByteToUnsignedInt:(B)I\n+        60: invokestatic  #117                // Method org/apache/commons/compress/archivers/zip/ZipUtil.signedByteToUnsignedInt:(B)I\n         63: istore        4\n         65: iload         4\n         67: iconst_3\n         68: iadd\n         69: iload_3\n         70: if_icmple     115\n-        73: new           #24                 // class java/util/zip/ZipException\n+        73: new           #94                 // class java/util/zip/ZipException\n         76: dup\n-        77: new           #25                 // class java/lang/StringBuilder\n+        77: new           #96                 // class java/lang/StringBuilder\n         80: dup\n-        81: invokespecial #26                 // Method java/lang/StringBuilder.\"<init>\":()V\n-        84: ldc           #34                 // String X7875_NewUnix invalid: uidSize\n-        86: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        81: invokespecial #98                 // Method java/lang/StringBuilder.\"<init>\":()V\n+        84: ldc           #121                // String X7875_NewUnix invalid: uidSize\n+        86: invokevirtual #101                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         89: iload         4\n-        91: invokevirtual #29                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-        94: ldc           #35                 // String  doesn\\'t fit into\n-        96: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        91: invokevirtual #105                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+        94: ldc           #123                // String  doesn\\'t fit into\n+        96: invokevirtual #101                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         99: iload_3\n-       100: invokevirtual #29                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       103: ldc           #30                 // String  bytes\n-       105: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       108: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       111: invokespecial #32                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       100: invokevirtual #105                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       103: ldc           #108                // String  bytes\n+       105: invokevirtual #101                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       108: invokevirtual #110                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       111: invokespecial #114                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n        114: athrow\n        115: aload_1\n        116: iload_2\n        117: iload_2\n        118: iload         4\n        120: iadd\n-       121: invokestatic  #36                 // Method java/util/Arrays.copyOfRange:([BII)[B\n+       121: invokestatic  #125                // Method java/util/Arrays.copyOfRange:([BII)[B\n        124: astore        5\n        126: iload_2\n        127: iload         4\n        129: iadd\n        130: istore_2\n        131: aload_0\n        132: new           #37                 // class java/math/BigInteger\n        135: dup\n        136: iconst_1\n        137: aload         5\n-       139: invokestatic  #17                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.reverse:([B)[B\n-       142: invokespecial #38                 // Method java/math/BigInteger.\"<init>\":(I[B)V\n-       145: putfield      #8                  // Field uid:Ljava/math/BigInteger;\n+       139: invokestatic  #72                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.reverse:([B)[B\n+       142: invokespecial #131                // Method java/math/BigInteger.\"<init>\":(I[B)V\n+       145: putfield      #32                 // Field uid:Ljava/math/BigInteger;\n        148: aload_1\n        149: iload_2\n        150: iinc          2, 1\n        153: baload\n-       154: invokestatic  #33                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.signedByteToUnsignedInt:(B)I\n+       154: invokestatic  #117                // Method org/apache/commons/compress/archivers/zip/ZipUtil.signedByteToUnsignedInt:(B)I\n        157: istore        6\n        159: iload         4\n        161: iconst_3\n        162: iadd\n        163: iload         6\n        165: iadd\n        166: iload_3\n        167: if_icmple     212\n-       170: new           #24                 // class java/util/zip/ZipException\n+       170: new           #94                 // class java/util/zip/ZipException\n        173: dup\n-       174: new           #25                 // class java/lang/StringBuilder\n+       174: new           #96                 // class java/lang/StringBuilder\n        177: dup\n-       178: invokespecial #26                 // Method java/lang/StringBuilder.\"<init>\":()V\n-       181: ldc           #39                 // String X7875_NewUnix invalid: gidSize\n-       183: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       178: invokespecial #98                 // Method java/lang/StringBuilder.\"<init>\":()V\n+       181: ldc           #134                // String X7875_NewUnix invalid: gidSize\n+       183: invokevirtual #101                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        186: iload         6\n-       188: invokevirtual #29                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       191: ldc           #35                 // String  doesn\\'t fit into\n-       193: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       188: invokevirtual #105                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       191: ldc           #123                // String  doesn\\'t fit into\n+       193: invokevirtual #101                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n        196: iload_3\n-       197: invokevirtual #29                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n-       200: ldc           #30                 // String  bytes\n-       202: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n-       205: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n-       208: invokespecial #32                 // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n+       197: invokevirtual #105                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;\n+       200: ldc           #108                // String  bytes\n+       202: invokevirtual #101                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+       205: invokevirtual #110                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+       208: invokespecial #114                // Method java/util/zip/ZipException.\"<init>\":(Ljava/lang/String;)V\n        211: athrow\n        212: aload_1\n        213: iload_2\n        214: iload_2\n        215: iload         6\n        217: iadd\n-       218: invokestatic  #36                 // Method java/util/Arrays.copyOfRange:([BII)[B\n+       218: invokestatic  #125                // Method java/util/Arrays.copyOfRange:([BII)[B\n        221: astore        7\n        223: aload_0\n        224: new           #37                 // class java/math/BigInteger\n        227: dup\n        228: iconst_1\n        229: aload         7\n-       231: invokestatic  #17                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.reverse:([B)[B\n-       234: invokespecial #38                 // Method java/math/BigInteger.\"<init>\":(I[B)V\n-       237: putfield      #10                 // Field gid:Ljava/math/BigInteger;\n+       231: invokestatic  #72                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.reverse:([B)[B\n+       234: invokespecial #131                // Method java/math/BigInteger.\"<init>\":(I[B)V\n+       237: putfield      #42                 // Field gid:Ljava/math/BigInteger;\n        240: return\n       LineNumberTable:\n         line 314: 0\n         line 315: 4\n         line 316: 9\n         line 319: 41\n         line 320: 54\n@@ -932,19 +932,19 @@\n \n   private void reset();\n     descriptor: ()V\n     flags: (0x0002) ACC_PRIVATE\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: getstatic     #40                 // Field ONE_THOUSAND:Ljava/math/BigInteger;\n-         4: putfield      #8                  // Field uid:Ljava/math/BigInteger;\n+         1: getstatic     #136                // Field ONE_THOUSAND:Ljava/math/BigInteger;\n+         4: putfield      #32                 // Field uid:Ljava/math/BigInteger;\n          7: aload_0\n-         8: getstatic     #40                 // Field ONE_THOUSAND:Ljava/math/BigInteger;\n-        11: putfield      #10                 // Field gid:Ljava/math/BigInteger;\n+         8: getstatic     #136                // Field ONE_THOUSAND:Ljava/math/BigInteger;\n+        11: putfield      #42                 // Field gid:Ljava/math/BigInteger;\n         14: return\n       LineNumberTable:\n         line 344: 0\n         line 345: 7\n         line 346: 14\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n@@ -953,16 +953,16 @@\n   public void setGID(long);\n     descriptor: (J)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_0\n          1: lload_1\n-         2: invokestatic  #41                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.longToBig:(J)Ljava/math/BigInteger;\n-         5: putfield      #10                 // Field gid:Ljava/math/BigInteger;\n+         2: invokestatic  #139                // Method org/apache/commons/compress/archivers/zip/ZipUtil.longToBig:(J)Ljava/math/BigInteger;\n+         5: putfield      #42                 // Field gid:Ljava/math/BigInteger;\n          8: return\n       LineNumberTable:\n         line 354: 0\n         line 355: 8\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/archivers/zip/X7875_NewUnix;\n@@ -971,69 +971,69 @@\n   public void setUID(long);\n     descriptor: (J)V\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=3, locals=3, args_size=2\n          0: aload_0\n          1: lload_1\n-         2: invokestatic  #41                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.longToBig:(J)Ljava/math/BigInteger;\n-         5: putfield      #8                  // Field uid:Ljava/math/BigInteger;\n+         2: invokestatic  #139                // Method org/apache/commons/compress/archivers/zip/ZipUtil.longToBig:(J)Ljava/math/BigInteger;\n+         5: putfield      #32                 // Field uid:Ljava/math/BigInteger;\n          8: return\n       LineNumberTable:\n         line 363: 0\n         line 364: 8\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       9     0  this   Lorg/apache/commons/compress/archivers/zip/X7875_NewUnix;\n             0       9     1     l   J\n \n   public java.lang.String toString();\n     descriptor: ()Ljava/lang/String;\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n-         0: new           #25                 // class java/lang/StringBuilder\n+         0: new           #96                 // class java/lang/StringBuilder\n          3: dup\n-         4: invokespecial #26                 // Method java/lang/StringBuilder.\"<init>\":()V\n-         7: ldc           #42                 // String 0x7875 Zip Extra Field: UID=\n-         9: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+         4: invokespecial #98                 // Method java/lang/StringBuilder.\"<init>\":()V\n+         7: ldc           #143                // String 0x7875 Zip Extra Field: UID=\n+         9: invokevirtual #101                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         12: aload_0\n-        13: getfield      #8                  // Field uid:Ljava/math/BigInteger;\n-        16: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-        19: ldc           #44                 // String  GID=\n-        21: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n+        13: getfield      #32                 // Field uid:Ljava/math/BigInteger;\n+        16: invokevirtual #145                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+        19: ldc           #148                // String  GID=\n+        21: invokevirtual #101                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n         24: aload_0\n-        25: getfield      #10                 // Field gid:Ljava/math/BigInteger;\n-        28: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n-        31: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n+        25: getfield      #42                 // Field gid:Ljava/math/BigInteger;\n+        28: invokevirtual #145                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;\n+        31: invokevirtual #110                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n         34: areturn\n       LineNumberTable:\n         line 375: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0      35     0  this   Lorg/apache/commons/compress/archivers/zip/X7875_NewUnix;\n \n   static {};\n     descriptor: ()V\n     flags: (0x0008) ACC_STATIC\n     Code:\n       stack=3, locals=0, args_size=0\n-         0: new           #19                 // class org/apache/commons/compress/archivers/zip/ZipShort\n+         0: new           #79                 // class org/apache/commons/compress/archivers/zip/ZipShort\n          3: dup\n          4: sipush        30837\n-         7: invokespecial #20                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-        10: putstatic     #14                 // Field HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-        13: new           #19                 // class org/apache/commons/compress/archivers/zip/ZipShort\n+         7: invokespecial #81                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+        10: putstatic     #61                 // Field HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+        13: new           #79                 // class org/apache/commons/compress/archivers/zip/ZipShort\n         16: dup\n         17: iconst_0\n-        18: invokespecial #20                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n-        21: putstatic     #12                 // Field ZERO:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n-        24: ldc2_w        #45                 // long 1000l\n-        27: invokestatic  #47                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n-        30: putstatic     #40                 // Field ONE_THOUSAND:Ljava/math/BigInteger;\n+        18: invokespecial #81                 // Method org/apache/commons/compress/archivers/zip/ZipShort.\"<init>\":(I)V\n+        21: putstatic     #51                 // Field ZERO:Lorg/apache/commons/compress/archivers/zip/ZipShort;\n+        24: ldc2_w        #150                // long 1000l\n+        27: invokestatic  #152                // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;\n+        30: putstatic     #136                // Field ONE_THOUSAND:Ljava/math/BigInteger;\n         33: return\n       LineNumberTable:\n         line 60: 0\n         line 61: 13\n         line 62: 24\n }\n SourceFile: \"X7875_NewUnix.java\"\n"}]}
