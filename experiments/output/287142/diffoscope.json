{"diffoscope-json-version": 1, "source1": "first/TarArchiveEntry.class", "source2": "second/TarArchiveEntry.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -184,30 +184,30 @@\n         }\n         else {\n             this.setModTime(Files.readAttributes(path, BasicFileAttributes.class, options).lastModifiedTime());\n             this.userName = Files.getOwner(path, options).getName();\n         }\n     }\n     \n-    private void readFileMode(final Path path, final String name, final LinkOption... options) throws IOException {\n+    private void readFileMode(final Path path, final String s, final LinkOption... options) throws IOException {\n         if (Files.isDirectory(path, options)) {\n             this.mode = 16877;\n             this.linkFlag = 53;\n-            final int length = name.length();\n-            if (length == 0 || name.charAt(length - 1) != '/') {\n-                this.name = name + \"/\";\n+            final int length = s.length();\n+            if (length == 0 || s.charAt(length - 1) != '/') {\n+                this.name = s;\n             }\n             else {\n-                this.name = name;\n+                this.name = s;\n             }\n         }\n         else {\n             this.mode = 33188;\n             this.linkFlag = 48;\n-            this.name = name;\n+            this.name = s;\n             this.size = Files.size(path);\n         }\n     }\n     \n     public TarArchiveEntry(final byte[] array) {\n         this(false);\n         this.parseTarHeader(array);\n@@ -400,41 +400,41 @@\n         return (List<TarArchiveStructSparse>)list;\n     }\n     \n     public boolean isPaxGNU1XSparse() {\n         return this.paxGNU1XSparse;\n     }\n     \n-    public void setSize(final long n) {\n-        if (n < 0L) {\n-            throw new IllegalArgumentException(\"Size is out of range: \" + n);\n+    public void setSize(final long size) {\n+        if (size < 0L) {\n+            throw new IllegalArgumentException(\"Size is out of range: \" + size);\n         }\n-        this.size = n;\n+        this.size = size;\n     }\n     \n     public int getDevMajor() {\n         return this.devMajor;\n     }\n     \n-    public void setDevMajor(final int n) {\n-        if (n < 0) {\n-            throw new IllegalArgumentException(\"Major device number is out of range: \" + n);\n+    public void setDevMajor(final int devMajor) {\n+        if (devMajor < 0) {\n+            throw new IllegalArgumentException(\"Major device number is out of range: \" + devMajor);\n         }\n-        this.devMajor = n;\n+        this.devMajor = devMajor;\n     }\n     \n     public int getDevMinor() {\n         return this.devMinor;\n     }\n     \n-    public void setDevMinor(final int n) {\n-        if (n < 0) {\n-            throw new IllegalArgumentException(\"Minor device number is out of range: \" + n);\n+    public void setDevMinor(final int devMinor) {\n+        if (devMinor < 0) {\n+            throw new IllegalArgumentException(\"Minor device number is out of range: \" + devMinor);\n         }\n-        this.devMinor = n;\n+        this.devMinor = devMinor;\n     }\n     \n     public boolean isExtended() {\n         return this.isExtended;\n     }\n     \n     public long getRealSize() {\n@@ -857,28 +857,28 @@\n                 this.isExtended = TarUtils.parseBoolean(array, n);\n                 ++n;\n                 this.realSize = TarUtils.parseOctal(array, n, 12);\n                 n += 12;\n                 break;\n             }\n             case 4: {\n-                final String str = b ? TarUtils.parseName(array, n, 131) : TarUtils.parseName(array, n, 131, zipEncoding);\n-                if (!str.isEmpty()) {\n-                    this.name = str + \"/\" + this.name;\n+                final String s = b ? TarUtils.parseName(array, n, 131) : TarUtils.parseName(array, n, 131, zipEncoding);\n+                if (!s.isEmpty()) {\n+                    this.name = s + \"/\" + this.name;\n                     break;\n                 }\n                 break;\n             }\n             default: {\n-                final String str2 = b ? TarUtils.parseName(array, n, 155) : TarUtils.parseName(array, n, 155, zipEncoding);\n+                final String s2 = b ? TarUtils.parseName(array, n, 155) : TarUtils.parseName(array, n, 155, zipEncoding);\n                 if (this.isDirectory() && !this.name.endsWith(\"/\")) {\n-                    this.name += \"/\";\n+                    this.name = this.name;\n                 }\n-                if (!str2.isEmpty()) {\n-                    this.name = str2 + \"/\" + this.name;\n+                if (!s2.isEmpty()) {\n+                    this.name = s2 + \"/\" + this.name;\n                     break;\n                 }\n                 break;\n             }\n         }\n     }\n     \n"}]}
