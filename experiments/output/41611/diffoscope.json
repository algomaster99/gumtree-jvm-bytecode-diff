{"diffoscope-json-version": 1, "source1": "first/MetadataBandGroup.class", "source2": "second/MetadataBandGroup.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -64,130 +64,94 @@\n     public void addAnnotation(final String desc, final List<String> nameRU, final List<String> tags, final List<Object> values, final List<Integer> caseArrayN, final List<String> nestTypeRS, final List<String> nestNameRU, final List<Integer> nestPairN) {\n         this.type_RS.add(this.cpBands.getCPSignature(desc));\n         this.pair_N.add(nameRU.size());\n         nameRU.forEach(name -> this.name_RU.add(this.cpBands.getCPUtf8(name)));\n         final Iterator<Object> valuesIterator = values.iterator();\n         for (final String tag : tags) {\n             this.T.add(tag);\n-            final String s = tag;\n-            int n = -1;\n-            switch (s.hashCode()) {\n+            final String s;\n+            switch ((s = tag).hashCode()) {\n                 case 66: {\n-                    if (s.equals(\"B\")) {\n-                        n = 0;\n-                        break;\n+                    if (!s.equals(\"B\")) {\n+                        continue;\n                     }\n                     break;\n                 }\n                 case 67: {\n-                    if (s.equals(\"C\")) {\n-                        n = 1;\n-                        break;\n-                    }\n-                    break;\n-                }\n-                case 73: {\n-                    if (s.equals(\"I\")) {\n-                        n = 2;\n-                        break;\n-                    }\n-                    break;\n-                }\n-                case 83: {\n-                    if (s.equals(\"S\")) {\n-                        n = 3;\n-                        break;\n-                    }\n-                    break;\n-                }\n-                case 90: {\n-                    if (s.equals(\"Z\")) {\n-                        n = 4;\n-                        break;\n+                    if (!s.equals(\"C\")) {\n+                        continue;\n                     }\n                     break;\n                 }\n                 case 68: {\n-                    if (s.equals(\"D\")) {\n-                        n = 5;\n-                        break;\n+                    if (!s.equals(\"D\")) {\n+                        continue;\n                     }\n-                    break;\n+                    this.caseD_KD.add((CPConstant<?>)this.cpBands.getConstant(valuesIterator.next()));\n+                    continue;\n                 }\n                 case 70: {\n-                    if (s.equals(\"F\")) {\n-                        n = 6;\n-                        break;\n+                    if (!s.equals(\"F\")) {\n+                        continue;\n                     }\n-                    break;\n+                    this.caseF_KF.add((CPConstant<?>)this.cpBands.getConstant(valuesIterator.next()));\n+                    continue;\n                 }\n-                case 74: {\n-                    if (s.equals(\"J\")) {\n-                        n = 7;\n-                        break;\n+                case 73: {\n+                    if (!s.equals(\"I\")) {\n+                        continue;\n                     }\n                     break;\n                 }\n-                case 99: {\n-                    if (s.equals(\"c\")) {\n-                        n = 8;\n-                        break;\n+                case 74: {\n+                    if (!s.equals(\"J\")) {\n+                        continue;\n                     }\n-                    break;\n+                    this.caseJ_KJ.add((CPConstant<?>)this.cpBands.getConstant(valuesIterator.next()));\n+                    continue;\n                 }\n-                case 101: {\n-                    if (s.equals(\"e\")) {\n-                        n = 9;\n-                        break;\n+                case 83: {\n+                    if (!s.equals(\"S\")) {\n+                        continue;\n                     }\n                     break;\n                 }\n-                case 115: {\n-                    if (s.equals(\"s\")) {\n-                        n = 10;\n-                        break;\n+                case 90: {\n+                    if (!s.equals(\"Z\")) {\n+                        continue;\n                     }\n                     break;\n                 }\n-            }\n-            switch (n) {\n-                case 0:\n-                case 1:\n-                case 2:\n-                case 3:\n-                case 4: {\n-                    this.caseI_KI.add((CPConstant<?>)this.cpBands.getConstant(valuesIterator.next()));\n-                    continue;\n-                }\n-                case 5: {\n-                    this.caseD_KD.add((CPConstant<?>)this.cpBands.getConstant(valuesIterator.next()));\n-                    continue;\n-                }\n-                case 6: {\n-                    this.caseF_KF.add((CPConstant<?>)this.cpBands.getConstant(valuesIterator.next()));\n-                    continue;\n-                }\n-                case 7: {\n-                    this.caseJ_KJ.add((CPConstant<?>)this.cpBands.getConstant(valuesIterator.next()));\n-                    continue;\n-                }\n-                case 8: {\n+                case 99: {\n+                    if (!s.equals(\"c\")) {\n+                        continue;\n+                    }\n                     this.casec_RS.add(this.cpBands.getCPSignature(this.nextString(valuesIterator)));\n                     continue;\n                 }\n-                case 9: {\n+                case 101: {\n+                    if (!s.equals(\"e\")) {\n+                        continue;\n+                    }\n                     this.caseet_RS.add(this.cpBands.getCPSignature(this.nextString(valuesIterator)));\n                     this.caseec_RU.add(this.cpBands.getCPUtf8(this.nextString(valuesIterator)));\n                     continue;\n                 }\n-                case 10: {\n+                case 115: {\n+                    if (!s.equals(\"s\")) {\n+                        continue;\n+                    }\n                     this.cases_RU.add(this.cpBands.getCPUtf8(this.nextString(valuesIterator)));\n                     continue;\n                 }\n+                default: {\n+                    continue;\n+                }\n             }\n+            this.caseI_KI.add((CPConstant<?>)this.cpBands.getConstant(valuesIterator.next()));\n         }\n         final Iterator<Integer> iterator2 = caseArrayN.iterator();\n         Integer element = null;\n         while (iterator2.hasNext()) {\n             element = Integer.valueOf(iterator2.next());\n             final int arraySize = (int)element;\n             this.casearray_N.add(arraySize);\n@@ -208,130 +172,94 @@\n         }\n         this.pair_N.addAll(pairN);\n         typeRS.forEach(desc -> this.type_RS.add(this.cpBands.getCPSignature(desc)));\n         nameRU.forEach(name -> this.name_RU.add(this.cpBands.getCPUtf8(name)));\n         final Iterator<Object> valuesIterator = values.iterator();\n         for (final String tag : tags) {\n             this.T.add(tag);\n-            final String s = tag;\n-            int n = -1;\n-            switch (s.hashCode()) {\n+            final String s;\n+            switch ((s = tag).hashCode()) {\n                 case 66: {\n-                    if (s.equals(\"B\")) {\n-                        n = 0;\n-                        break;\n+                    if (!s.equals(\"B\")) {\n+                        continue;\n                     }\n                     break;\n                 }\n                 case 67: {\n-                    if (s.equals(\"C\")) {\n-                        n = 1;\n-                        break;\n-                    }\n-                    break;\n-                }\n-                case 73: {\n-                    if (s.equals(\"I\")) {\n-                        n = 2;\n-                        break;\n-                    }\n-                    break;\n-                }\n-                case 83: {\n-                    if (s.equals(\"S\")) {\n-                        n = 3;\n-                        break;\n-                    }\n-                    break;\n-                }\n-                case 90: {\n-                    if (s.equals(\"Z\")) {\n-                        n = 4;\n-                        break;\n+                    if (!s.equals(\"C\")) {\n+                        continue;\n                     }\n                     break;\n                 }\n                 case 68: {\n-                    if (s.equals(\"D\")) {\n-                        n = 5;\n-                        break;\n+                    if (!s.equals(\"D\")) {\n+                        continue;\n                     }\n-                    break;\n+                    this.caseD_KD.add((CPConstant<?>)this.cpBands.getConstant(valuesIterator.next()));\n+                    continue;\n                 }\n                 case 70: {\n-                    if (s.equals(\"F\")) {\n-                        n = 6;\n-                        break;\n+                    if (!s.equals(\"F\")) {\n+                        continue;\n                     }\n-                    break;\n+                    this.caseF_KF.add((CPConstant<?>)this.cpBands.getConstant(valuesIterator.next()));\n+                    continue;\n                 }\n-                case 74: {\n-                    if (s.equals(\"J\")) {\n-                        n = 7;\n-                        break;\n+                case 73: {\n+                    if (!s.equals(\"I\")) {\n+                        continue;\n                     }\n                     break;\n                 }\n-                case 99: {\n-                    if (s.equals(\"c\")) {\n-                        n = 8;\n-                        break;\n+                case 74: {\n+                    if (!s.equals(\"J\")) {\n+                        continue;\n                     }\n-                    break;\n+                    this.caseJ_KJ.add((CPConstant<?>)this.cpBands.getConstant(valuesIterator.next()));\n+                    continue;\n                 }\n-                case 101: {\n-                    if (s.equals(\"e\")) {\n-                        n = 9;\n-                        break;\n+                case 83: {\n+                    if (!s.equals(\"S\")) {\n+                        continue;\n                     }\n                     break;\n                 }\n-                case 115: {\n-                    if (s.equals(\"s\")) {\n-                        n = 10;\n-                        break;\n+                case 90: {\n+                    if (!s.equals(\"Z\")) {\n+                        continue;\n                     }\n                     break;\n                 }\n-            }\n-            switch (n) {\n-                case 0:\n-                case 1:\n-                case 2:\n-                case 3:\n-                case 4: {\n-                    this.caseI_KI.add((CPConstant<?>)this.cpBands.getConstant(valuesIterator.next()));\n-                    continue;\n-                }\n-                case 5: {\n-                    this.caseD_KD.add((CPConstant<?>)this.cpBands.getConstant(valuesIterator.next()));\n-                    continue;\n-                }\n-                case 6: {\n-                    this.caseF_KF.add((CPConstant<?>)this.cpBands.getConstant(valuesIterator.next()));\n-                    continue;\n-                }\n-                case 7: {\n-                    this.caseJ_KJ.add((CPConstant<?>)this.cpBands.getConstant(valuesIterator.next()));\n-                    continue;\n-                }\n-                case 8: {\n+                case 99: {\n+                    if (!s.equals(\"c\")) {\n+                        continue;\n+                    }\n                     this.casec_RS.add(this.cpBands.getCPSignature(this.nextString(valuesIterator)));\n                     continue;\n                 }\n-                case 9: {\n+                case 101: {\n+                    if (!s.equals(\"e\")) {\n+                        continue;\n+                    }\n                     this.caseet_RS.add(this.cpBands.getCPSignature(this.nextString(valuesIterator)));\n                     this.caseec_RU.add(this.cpBands.getCPUtf8(this.nextString(valuesIterator)));\n                     continue;\n                 }\n-                case 10: {\n+                case 115: {\n+                    if (!s.equals(\"s\")) {\n+                        continue;\n+                    }\n                     this.cases_RU.add(this.cpBands.getCPUtf8(this.nextString(valuesIterator)));\n                     continue;\n                 }\n+                default: {\n+                    continue;\n+                }\n             }\n+            this.caseI_KI.add((CPConstant<?>)this.cpBands.getConstant(valuesIterator.next()));\n         }\n         for (final Integer element2 : caseArrayN) {\n             final int arraySize = (int)element2;\n             this.casearray_N.add(arraySize);\n             this.numBackwardsCalls += arraySize;\n         }\n         nestTypeRS.forEach(type -> this.nesttype_RS.add(this.cpBands.getCPSignature(type)));\n@@ -374,68 +302,68 @@\n             }\n             else {\n                 contextStr = \"Method\";\n             }\n             byte[] encodedBand = null;\n             if (!this.type.equals(\"AD\")) {\n                 if (this.type.indexOf(80) != -1) {\n-                    encodedBand = this.encodeBandInt(contextStr + \"_\" + this.type + \" param_NB\", this.param_NB.toArray(), Codec.BYTE1);\n+                    encodedBand = this.encodeBandInt(String.valueOf(contextStr) + \"_\" + this.type + \" param_NB\", this.param_NB.toArray(), Codec.BYTE1);\n                     out.write(encodedBand);\n                     PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + contextStr + \"_\" + this.type + \" anno_N[\" + this.param_NB.size() + \"]\");\n                 }\n-                encodedBand = this.encodeBandInt(contextStr + \"_\" + this.type + \" anno_N\", this.anno_N.toArray(), Codec.UNSIGNED5);\n+                encodedBand = this.encodeBandInt(String.valueOf(contextStr) + \"_\" + this.type + \" anno_N\", this.anno_N.toArray(), Codec.UNSIGNED5);\n                 out.write(encodedBand);\n                 PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + contextStr + \"_\" + this.type + \" anno_N[\" + this.anno_N.size() + \"]\");\n-                encodedBand = this.encodeBandInt(contextStr + \"_\" + this.type + \" type_RS\", this.cpEntryListToArray((List)this.type_RS), Codec.UNSIGNED5);\n+                encodedBand = this.encodeBandInt(String.valueOf(contextStr) + \"_\" + this.type + \" type_RS\", this.cpEntryListToArray((List)this.type_RS), Codec.UNSIGNED5);\n                 out.write(encodedBand);\n                 PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + contextStr + \"_\" + this.type + \" type_RS[\" + this.type_RS.size() + \"]\");\n-                encodedBand = this.encodeBandInt(contextStr + \"_\" + this.type + \" pair_N\", this.pair_N.toArray(), Codec.UNSIGNED5);\n+                encodedBand = this.encodeBandInt(String.valueOf(contextStr) + \"_\" + this.type + \" pair_N\", this.pair_N.toArray(), Codec.UNSIGNED5);\n                 out.write(encodedBand);\n                 PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + contextStr + \"_\" + this.type + \" pair_N[\" + this.pair_N.size() + \"]\");\n-                encodedBand = this.encodeBandInt(contextStr + \"_\" + this.type + \" name_RU\", this.cpEntryListToArray((List)this.name_RU), Codec.UNSIGNED5);\n+                encodedBand = this.encodeBandInt(String.valueOf(contextStr) + \"_\" + this.type + \" name_RU\", this.cpEntryListToArray((List)this.name_RU), Codec.UNSIGNED5);\n                 out.write(encodedBand);\n                 PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + contextStr + \"_\" + this.type + \" name_RU[\" + this.name_RU.size() + \"]\");\n             }\n-            encodedBand = this.encodeBandInt(contextStr + \"_\" + this.type + \" T\", this.tagListToArray(this.T), Codec.BYTE1);\n+            encodedBand = this.encodeBandInt(String.valueOf(contextStr) + \"_\" + this.type + \" T\", this.tagListToArray(this.T), Codec.BYTE1);\n             out.write(encodedBand);\n             PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + contextStr + \"_\" + this.type + \" T[\" + this.T.size() + \"]\");\n-            encodedBand = this.encodeBandInt(contextStr + \"_\" + this.type + \" caseI_KI\", this.cpEntryListToArray((List)this.caseI_KI), Codec.UNSIGNED5);\n+            encodedBand = this.encodeBandInt(String.valueOf(contextStr) + \"_\" + this.type + \" caseI_KI\", this.cpEntryListToArray((List)this.caseI_KI), Codec.UNSIGNED5);\n             out.write(encodedBand);\n             PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + contextStr + \"_\" + this.type + \" caseI_KI[\" + this.caseI_KI.size() + \"]\");\n-            encodedBand = this.encodeBandInt(contextStr + \"_\" + this.type + \" caseD_KD\", this.cpEntryListToArray((List)this.caseD_KD), Codec.UNSIGNED5);\n+            encodedBand = this.encodeBandInt(String.valueOf(contextStr) + \"_\" + this.type + \" caseD_KD\", this.cpEntryListToArray((List)this.caseD_KD), Codec.UNSIGNED5);\n             out.write(encodedBand);\n             PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + contextStr + \"_\" + this.type + \" caseD_KD[\" + this.caseD_KD.size() + \"]\");\n-            encodedBand = this.encodeBandInt(contextStr + \"_\" + this.type + \" caseF_KF\", this.cpEntryListToArray((List)this.caseF_KF), Codec.UNSIGNED5);\n+            encodedBand = this.encodeBandInt(String.valueOf(contextStr) + \"_\" + this.type + \" caseF_KF\", this.cpEntryListToArray((List)this.caseF_KF), Codec.UNSIGNED5);\n             out.write(encodedBand);\n             PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + contextStr + \"_\" + this.type + \" caseF_KF[\" + this.caseF_KF.size() + \"]\");\n-            encodedBand = this.encodeBandInt(contextStr + \"_\" + this.type + \" caseJ_KJ\", this.cpEntryListToArray((List)this.caseJ_KJ), Codec.UNSIGNED5);\n+            encodedBand = this.encodeBandInt(String.valueOf(contextStr) + \"_\" + this.type + \" caseJ_KJ\", this.cpEntryListToArray((List)this.caseJ_KJ), Codec.UNSIGNED5);\n             out.write(encodedBand);\n             PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + contextStr + \"_\" + this.type + \" caseJ_KJ[\" + this.caseJ_KJ.size() + \"]\");\n-            encodedBand = this.encodeBandInt(contextStr + \"_\" + this.type + \" casec_RS\", this.cpEntryListToArray((List)this.casec_RS), Codec.UNSIGNED5);\n+            encodedBand = this.encodeBandInt(String.valueOf(contextStr) + \"_\" + this.type + \" casec_RS\", this.cpEntryListToArray((List)this.casec_RS), Codec.UNSIGNED5);\n             out.write(encodedBand);\n             PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + contextStr + \"_\" + this.type + \" casec_RS[\" + this.casec_RS.size() + \"]\");\n-            encodedBand = this.encodeBandInt(contextStr + \"_\" + this.type + \" caseet_RS\", this.cpEntryListToArray((List)this.caseet_RS), Codec.UNSIGNED5);\n+            encodedBand = this.encodeBandInt(String.valueOf(contextStr) + \"_\" + this.type + \" caseet_RS\", this.cpEntryListToArray((List)this.caseet_RS), Codec.UNSIGNED5);\n             out.write(encodedBand);\n             PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + contextStr + \"_\" + this.type + \" caseet_RS[\" + this.caseet_RS.size() + \"]\");\n-            encodedBand = this.encodeBandInt(contextStr + \"_\" + this.type + \" caseec_RU\", this.cpEntryListToArray((List)this.caseec_RU), Codec.UNSIGNED5);\n+            encodedBand = this.encodeBandInt(String.valueOf(contextStr) + \"_\" + this.type + \" caseec_RU\", this.cpEntryListToArray((List)this.caseec_RU), Codec.UNSIGNED5);\n             out.write(encodedBand);\n             PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + contextStr + \"_\" + this.type + \" caseec_RU[\" + this.caseec_RU.size() + \"]\");\n-            encodedBand = this.encodeBandInt(contextStr + \"_\" + this.type + \" cases_RU\", this.cpEntryListToArray((List)this.cases_RU), Codec.UNSIGNED5);\n+            encodedBand = this.encodeBandInt(String.valueOf(contextStr) + \"_\" + this.type + \" cases_RU\", this.cpEntryListToArray((List)this.cases_RU), Codec.UNSIGNED5);\n             out.write(encodedBand);\n             PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + contextStr + \"_\" + this.type + \" cases_RU[\" + this.cases_RU.size() + \"]\");\n-            encodedBand = this.encodeBandInt(contextStr + \"_\" + this.type + \" casearray_N\", this.casearray_N.toArray(), Codec.UNSIGNED5);\n+            encodedBand = this.encodeBandInt(String.valueOf(contextStr) + \"_\" + this.type + \" casearray_N\", this.casearray_N.toArray(), Codec.UNSIGNED5);\n             out.write(encodedBand);\n             PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + contextStr + \"_\" + this.type + \" casearray_N[\" + this.casearray_N.size() + \"]\");\n-            encodedBand = this.encodeBandInt(contextStr + \"_\" + this.type + \" nesttype_RS\", this.cpEntryListToArray((List)this.nesttype_RS), Codec.UNSIGNED5);\n+            encodedBand = this.encodeBandInt(String.valueOf(contextStr) + \"_\" + this.type + \" nesttype_RS\", this.cpEntryListToArray((List)this.nesttype_RS), Codec.UNSIGNED5);\n             out.write(encodedBand);\n             PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + contextStr + \"_\" + this.type + \" nesttype_RS[\" + this.nesttype_RS.size() + \"]\");\n-            encodedBand = this.encodeBandInt(contextStr + \"_\" + this.type + \" nestpair_N\", this.nestpair_N.toArray(), Codec.UNSIGNED5);\n+            encodedBand = this.encodeBandInt(String.valueOf(contextStr) + \"_\" + this.type + \" nestpair_N\", this.nestpair_N.toArray(), Codec.UNSIGNED5);\n             out.write(encodedBand);\n             PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + contextStr + \"_\" + this.type + \" nestpair_N[\" + this.nestpair_N.size() + \"]\");\n-            encodedBand = this.encodeBandInt(contextStr + \"_\" + this.type + \" nestname_RU\", this.cpEntryListToArray((List)this.nestname_RU), Codec.UNSIGNED5);\n+            encodedBand = this.encodeBandInt(String.valueOf(contextStr) + \"_\" + this.type + \" nestname_RU\", this.cpEntryListToArray((List)this.nestname_RU), Codec.UNSIGNED5);\n             out.write(encodedBand);\n             PackingUtils.log(\"Wrote \" + encodedBand.length + \" bytes from \" + contextStr + \"_\" + this.type + \" nestname_RU[\" + this.nestname_RU.size() + \"]\");\n         }\n     }\n     \n     public void removeLatest() {\n         for (int latest = this.anno_N.remove(this.anno_N.size() - 1), i = 0; i < latest; ++i) {\n@@ -443,150 +371,107 @@\n             for (int pairs = this.pair_N.remove(this.pair_N.size() - 1), j = 0; j < pairs; ++j) {\n                 this.removeOnePair();\n             }\n         }\n     }\n     \n     private void removeOnePair() {\n+        final String tag = (String)this.T.remove(this.T.size() - 1);\n         final String s;\n-        final String tag = s = this.T.remove(this.T.size() - 1);\n-        int n = -1;\n-        switch (s.hashCode()) {\n-            case 66: {\n-                if (s.equals(\"B\")) {\n-                    n = 0;\n-                    break;\n-                }\n-                break;\n-            }\n-            case 67: {\n-                if (s.equals(\"C\")) {\n-                    n = 1;\n-                    break;\n+        switch ((s = tag).hashCode()) {\n+            case 64: {\n+                if (!s.equals(\"@\")) {\n+                    return;\n                 }\n-                break;\n-            }\n-            case 73: {\n-                if (s.equals(\"I\")) {\n-                    n = 2;\n-                    break;\n+                this.nesttype_RS.remove(this.nesttype_RS.size() - 1);\n+                final int numPairs = this.nestpair_N.remove(this.nestpair_N.size() - 1);\n+                this.numBackwardsCalls -= numPairs;\n+                for (int i = 0; i < numPairs; ++i) {\n+                    this.removeOnePair();\n                 }\n-                break;\n+                return;\n             }\n-            case 83: {\n-                if (s.equals(\"S\")) {\n-                    n = 3;\n-                    break;\n+            case 66: {\n+                if (!s.equals(\"B\")) {\n+                    return;\n                 }\n                 break;\n             }\n-            case 90: {\n-                if (s.equals(\"Z\")) {\n-                    n = 4;\n-                    break;\n+            case 67: {\n+                if (!s.equals(\"C\")) {\n+                    return;\n                 }\n                 break;\n             }\n             case 68: {\n-                if (s.equals(\"D\")) {\n-                    n = 5;\n-                    break;\n+                if (!s.equals(\"D\")) {\n+                    return;\n                 }\n-                break;\n+                this.caseD_KD.remove(this.caseD_KD.size() - 1);\n+                return;\n             }\n             case 70: {\n-                if (s.equals(\"F\")) {\n-                    n = 6;\n-                    break;\n+                if (!s.equals(\"F\")) {\n+                    return;\n                 }\n-                break;\n+                this.caseF_KF.remove(this.caseF_KF.size() - 1);\n+                return;\n             }\n-            case 74: {\n-                if (s.equals(\"J\")) {\n-                    n = 7;\n-                    break;\n+            case 73: {\n+                if (!s.equals(\"I\")) {\n+                    return;\n                 }\n                 break;\n             }\n-            case 101: {\n-                if (s.equals(\"e\")) {\n-                    n = 8;\n-                    break;\n+            case 74: {\n+                if (!s.equals(\"J\")) {\n+                    return;\n                 }\n-                break;\n+                this.caseJ_KJ.remove(this.caseJ_KJ.size() - 1);\n+                return;\n             }\n-            case 115: {\n-                if (s.equals(\"s\")) {\n-                    n = 9;\n-                    break;\n+            case 83: {\n+                if (!s.equals(\"S\")) {\n+                    return;\n                 }\n                 break;\n             }\n-            case 91: {\n-                if (s.equals(\"[\")) {\n-                    n = 10;\n-                    break;\n+            case 90: {\n+                if (!s.equals(\"Z\")) {\n+                    return;\n                 }\n                 break;\n             }\n-            case 64: {\n-                if (s.equals(\"@\")) {\n-                    n = 11;\n-                    break;\n+            case 91: {\n+                if (!s.equals(\"[\")) {\n+                    return;\n                 }\n-                break;\n-            }\n-        }\n-        switch (n) {\n-            case 0:\n-            case 1:\n-            case 2:\n-            case 3:\n-            case 4: {\n-                this.caseI_KI.remove(this.caseI_KI.size() - 1);\n-                break;\n-            }\n-            case 5: {\n-                this.caseD_KD.remove(this.caseD_KD.size() - 1);\n-                break;\n-            }\n-            case 6: {\n-                this.caseF_KF.remove(this.caseF_KF.size() - 1);\n-                break;\n-            }\n-            case 7: {\n-                this.caseJ_KJ.remove(this.caseJ_KJ.size() - 1);\n-                break;\n-            }\n-            case 8: {\n-                this.caseet_RS.remove(this.caseet_RS.size() - 1);\n-                this.caseec_RU.remove(this.caseet_RS.size() - 1);\n-                break;\n-            }\n-            case 9: {\n-                this.cases_RU.remove(this.cases_RU.size() - 1);\n-                break;\n-            }\n-            case 10: {\n                 final int arraySize = this.casearray_N.remove(this.casearray_N.size() - 1);\n                 this.numBackwardsCalls -= arraySize;\n                 for (int k = 0; k < arraySize; ++k) {\n                     this.removeOnePair();\n                 }\n-                break;\n+                return;\n             }\n-            case 11: {\n-                this.nesttype_RS.remove(this.nesttype_RS.size() - 1);\n-                final int numPairs = this.nestpair_N.remove(this.nestpair_N.size() - 1);\n-                this.numBackwardsCalls -= numPairs;\n-                for (int i = 0; i < numPairs; ++i) {\n-                    this.removeOnePair();\n+            case 101: {\n+                if (!s.equals(\"e\")) {\n+                    return;\n                 }\n-                break;\n+                this.caseet_RS.remove(this.caseet_RS.size() - 1);\n+                this.caseec_RU.remove(this.caseet_RS.size() - 1);\n+                return;\n+            }\n+            case 115: {\n+                if (!s.equals(\"s\")) {\n+                    return;\n+                }\n+                this.cases_RU.remove(this.cases_RU.size() - 1);\n+                return;\n             }\n         }\n+        this.caseI_KI.remove(this.caseI_KI.size() - 1);\n     }\n     \n     private int[] tagListToArray(final List<String> list) {\n         return list.stream().mapToInt(s -> s.charAt(0)).toArray();\n     }\n }\n"}]}
