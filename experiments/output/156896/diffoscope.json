{"diffoscope-json-version": 1, "source1": "first/FTPSClient.class", "source2": "second/FTPSClient.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -59,14 +59,18 @@\n     @Deprecated\n     public static String TRUSTSTORE_ALGORITHM;\n     @Deprecated\n     public static String PROVIDER;\n     @Deprecated\n     public static String STORE_TYPE;\n     \n+    static {\n+        PROT_COMMAND_VALUE = new String[] { \"C\", \"E\", \"S\", \"P\" };\n+    }\n+    \n     public FTPSClient() {\n         this(\"TLS\", false);\n     }\n     \n     public FTPSClient(final boolean isImplicit) {\n         this(\"TLS\", isImplicit);\n     }\n@@ -114,18 +118,16 @@\n             this.execAUTH();\n             this.sslNegotiation();\n         }\n     }\n     \n     protected void execAUTH() throws SSLException, IOException {\n         final int replyCode = this.sendCommand(\"AUTH\", this.auth);\n-        if (334 != replyCode) {\n-            if (234 != replyCode) {\n-                throw new SSLException(this.getReplyString());\n-            }\n+        if (334 != replyCode && 234 != replyCode) {\n+            throw new SSLException(this.getReplyString());\n         }\n     }\n     \n     private void initSslContext() throws IOException {\n         if (this.context == null) {\n             this.context = SSLContextUtils.createSSLContext(this.protocol, this.getKeyManager(), this.getTrustManager());\n         }\n@@ -264,15 +266,17 @@\n             this.setSocketFactory((SocketFactory)new FTPSSocketFactory(this.context));\n             this.setServerSocketFactory((ServerSocketFactory)new FTPSServerSocketFactory(this.context));\n             this.initSslContext();\n         }\n     }\n     \n     private boolean checkPROTValue(final String prot) {\n-        for (final String element : FTPSClient.PROT_COMMAND_VALUE) {\n+        String[] prot_COMMAND_VALUE;\n+        for (int length = (prot_COMMAND_VALUE = FTPSClient.PROT_COMMAND_VALUE).length, i = 0; i < length; ++i) {\n+            final String element = prot_COMMAND_VALUE[i];\n             if (element.equals(prot)) {\n                 return true;\n             }\n         }\n         return false;\n     }\n     \n@@ -408,12 +412,8 @@\n     private SSLSocket createSSLSocket(final Socket socket) throws IOException {\n         if (socket != null) {\n             final SSLSocketFactory f = this.context.getSocketFactory();\n             return (SSLSocket)f.createSocket(socket, this._hostname_, socket.getPort(), false);\n         }\n         return null;\n     }\n-    \n-    static {\n-        PROT_COMMAND_VALUE = new String[] { \"C\", \"E\", \"S\", \"P\" };\n-    }\n }\n"}]}
