{"diffoscope-json-version": 1, "source1": "first/ZipShort.class", "source2": "second/ZipShort.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,48 +10,48 @@\n     private static final long serialVersionUID = 1L;\n     private final int value;\n     \n     public ZipShort(final int value) {\n         this.value = value;\n     }\n     \n-    public ZipShort(final byte[] bytes) {\n-        this(bytes, 0);\n+    public ZipShort(final byte[] array) {\n+        this(array, 0);\n     }\n     \n-    public ZipShort(final byte[] bytes, final int offset) {\n-        this.value = getValue(bytes, offset);\n+    public ZipShort(final byte[] array, final int n) {\n+        this.value = getValue(array, n);\n     }\n     \n     public byte[] getBytes() {\n-        final byte[] result = new byte[2];\n-        ByteUtils.toLittleEndian(result, (long)this.value, 0, 2);\n-        return result;\n+        final byte[] array = new byte[2];\n+        ByteUtils.toLittleEndian(array, (long)this.value, 0, 2);\n+        return array;\n     }\n     \n     public int getValue() {\n         return this.value;\n     }\n     \n-    public static byte[] getBytes(final int value) {\n-        final byte[] result = new byte[2];\n-        putShort(value, result, 0);\n-        return result;\n+    public static byte[] getBytes(final int n) {\n+        final byte[] array = new byte[2];\n+        putShort(n, array, 0);\n+        return array;\n     }\n     \n-    public static void putShort(final int value, final byte[] buf, final int offset) {\n-        ByteUtils.toLittleEndian(buf, (long)value, offset, 2);\n+    public static void putShort(final int n, final byte[] array, final int n2) {\n+        ByteUtils.toLittleEndian(array, (long)n, n2, 2);\n     }\n     \n-    public static int getValue(final byte[] bytes, final int offset) {\n-        return (int)ByteUtils.fromLittleEndian(bytes, offset, 2);\n+    public static int getValue(final byte[] array, final int n) {\n+        return (int)ByteUtils.fromLittleEndian(array, n, 2);\n     }\n     \n-    public static int getValue(final byte[] bytes) {\n-        return getValue(bytes, 0);\n+    public static int getValue(final byte[] array) {\n+        return getValue(array, 0);\n     }\n     \n     @Override\n     public boolean equals(final Object o) {\n         return o instanceof ZipShort && this.value == ((ZipShort)o).getValue();\n     }\n     \n@@ -60,16 +60,16 @@\n         return this.value;\n     }\n     \n     public Object clone() {\n         try {\n             return super.clone();\n         }\n-        catch (final CloneNotSupportedException cnfe) {\n-            throw new IllegalStateException(cnfe);\n+        catch (final CloneNotSupportedException cause) {\n+            throw new IllegalStateException(cause);\n         }\n     }\n     \n     @Override\n     public String toString() {\n         return \"ZipShort value: \" + this.value;\n     }\n"}]}
