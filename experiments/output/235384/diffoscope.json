{"diffoscope-json-version": 1, "source1": "first/WildcardFilter.class", "source2": "second/WildcardFilter.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -15,37 +15,37 @@\n \n @Deprecated\n public class WildcardFilter extends AbstractFileFilter implements Serializable\n {\n     private static final long serialVersionUID = -5037645902506953517L;\n     private final String[] wildcards;\n     \n-    public WildcardFilter(final List<String> wildcards) {\n-        Objects.requireNonNull(wildcards, \"wildcards\");\n-        this.wildcards = wildcards.toArray(WildcardFilter.EMPTY_STRING_ARRAY);\n+    public WildcardFilter(final List<String> obj) {\n+        Objects.requireNonNull(obj, \"wildcards\");\n+        this.wildcards = obj.toArray(WildcardFilter.EMPTY_STRING_ARRAY);\n     }\n     \n-    public WildcardFilter(final String wildcard) {\n-        Objects.requireNonNull(wildcard, \"wildcard\");\n-        this.wildcards = new String[] { wildcard };\n+    public WildcardFilter(final String obj) {\n+        Objects.requireNonNull(obj, \"wildcard\");\n+        this.wildcards = new String[] { obj };\n     }\n     \n-    public WildcardFilter(final String... wildcards) {\n-        Objects.requireNonNull(wildcards, \"wildcards\");\n-        this.wildcards = wildcards.clone();\n+    public WildcardFilter(final String... obj) {\n+        Objects.requireNonNull(obj, \"wildcards\");\n+        this.wildcards = obj.clone();\n     }\n     \n     public boolean accept(final File file) {\n-        return !file.isDirectory() && Stream.of(this.wildcards).anyMatch(wildcard -> FilenameUtils.wildcardMatch(file.getName(), wildcard));\n+        return !file.isDirectory() && Stream.of(this.wildcards).anyMatch(s -> FilenameUtils.wildcardMatch(file2.getName(), s));\n     }\n     \n-    public boolean accept(final File dir, final String name) {\n-        return (dir == null || !new File(dir, name).isDirectory()) && Stream.of(this.wildcards).anyMatch(wildcard -> FilenameUtils.wildcardMatch(name, wildcard));\n+    public boolean accept(final File parent, final String child) {\n+        return (parent == null || !new File(parent, child).isDirectory()) && Stream.of(this.wildcards).anyMatch(s2 -> FilenameUtils.wildcardMatch(s, s2));\n     }\n     \n-    public FileVisitResult accept(final Path file, final BasicFileAttributes attributes) {\n-        if (Files.isDirectory(file, new LinkOption[0])) {\n+    public FileVisitResult accept(final Path path, final BasicFileAttributes basicFileAttributes) {\n+        if (Files.isDirectory(path, new LinkOption[0])) {\n             return FileVisitResult.TERMINATE;\n         }\n-        return toDefaultFileVisitResult(Stream.of(this.wildcards).anyMatch(wildcard -> FilenameUtils.wildcardMatch(Objects.toString((Object)file.getFileName(), (String)null), wildcard)));\n+        return toDefaultFileVisitResult(Stream.of(this.wildcards).anyMatch(s -> FilenameUtils.wildcardMatch(Objects.toString((Object)path2.getFileName(), (String)null), s)));\n     }\n }\n"}]}
