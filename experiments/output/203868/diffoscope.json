{"diffoscope-json-version": 1, "source1": "first/NewAttributeBands.class", "source2": "second/NewAttributeBands.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -18,32 +18,34 @@\n     protected List<NewAttributeBands.AttributeLayoutElement> attributeLayoutElements;\n     private int[] backwardsCallCounts;\n     private final CpBands cpBands;\n     private final AttributeDefinitionBands.AttributeDefinition def;\n     private boolean usedAtLeastOnce;\n     private NewAttributeBands.Integral lastPIntegral;\n     \n-    public NewAttributeBands(final int effort, final CpBands cpBands, final SegmentHeader header, final AttributeDefinitionBands.AttributeDefinition def) throws IOException {\n-        super(effort, header);\n+    public NewAttributeBands(final int n, final CpBands cpBands, final SegmentHeader segmentHeader, final AttributeDefinitionBands.AttributeDefinition def) throws IOException {\n+        super(n, segmentHeader);\n         this.def = def;\n         this.cpBands = cpBands;\n         this.parseLayout();\n     }\n     \n-    public void addAttribute(final NewAttribute attribute) {\n+    public void addAttribute(final NewAttribute newAttribute) {\n         this.usedAtLeastOnce = true;\n-        final InputStream stream = new ByteArrayInputStream(attribute.getBytes());\n-        for (final NewAttributeBands.AttributeLayoutElement attributeLayoutElement : this.attributeLayoutElements) {\n-            attributeLayoutElement.addAttributeToBand(attribute, stream);\n+        final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(newAttribute.getBytes());\n+        final Iterator<NewAttributeBands.AttributeLayoutElement> iterator = this.attributeLayoutElements.iterator();\n+        while (iterator.hasNext()) {\n+            ((NewAttributeBands.AttributeLayoutElement)iterator.next()).addAttributeToBand(newAttribute, (InputStream)byteArrayInputStream);\n         }\n     }\n     \n     public void pack(final OutputStream outputStream) throws IOException, Pack200Exception {\n-        for (final NewAttributeBands.AttributeLayoutElement attributeLayoutElement : this.attributeLayoutElements) {\n-            attributeLayoutElement.pack(outputStream);\n+        final Iterator<NewAttributeBands.AttributeLayoutElement> iterator = this.attributeLayoutElements.iterator();\n+        while (iterator.hasNext()) {\n+            ((NewAttributeBands.AttributeLayoutElement)iterator.next()).pack(outputStream);\n         }\n     }\n     \n     public String getAttributeName() {\n         return this.def.name.getUnderlyingString();\n     }\n     \n@@ -56,323 +58,317 @@\n     }\n     \n     public boolean isUsedAtLeastOnce() {\n         return this.usedAtLeastOnce;\n     }\n     \n     private void parseLayout() throws IOException {\n-        final String layout = this.def.layout.getUnderlyingString();\n+        final String underlyingString = this.def.layout.getUnderlyingString();\n         if (this.attributeLayoutElements == null) {\n             this.attributeLayoutElements = new ArrayList<NewAttributeBands.AttributeLayoutElement>();\n-            final StringReader reader = new StringReader(layout);\n-            NewAttributeBands.AttributeLayoutElement e;\n-            while ((e = this.readNextAttributeElement(reader)) != null) {\n-                this.attributeLayoutElements.add(e);\n+            NewAttributeBands.AttributeLayoutElement nextAttributeElement;\n+            while ((nextAttributeElement = this.readNextAttributeElement(new StringReader(underlyingString))) != null) {\n+                this.attributeLayoutElements.add(nextAttributeElement);\n             }\n             this.resolveCalls();\n         }\n     }\n     \n     private void resolveCalls() {\n         for (int i = 0; i < this.attributeLayoutElements.size(); ++i) {\n-            final NewAttributeBands.AttributeLayoutElement element = (NewAttributeBands.AttributeLayoutElement)this.attributeLayoutElements.get(i);\n-            if (element instanceof NewAttributeBands.Callable) {\n-                final NewAttributeBands.Callable callable = (NewAttributeBands.Callable)element;\n-                final List<NewAttributeBands.LayoutElement> body = NewAttributeBands.Callable.access$000(callable);\n-                for (final NewAttributeBands.LayoutElement layoutElement : body) {\n-                    this.resolveCallsForElement(i, callable, layoutElement);\n+            final NewAttributeBands.AttributeLayoutElement attributeLayoutElement = (NewAttributeBands.AttributeLayoutElement)this.attributeLayoutElements.get(i);\n+            if (attributeLayoutElement instanceof NewAttributeBands.Callable) {\n+                final NewAttributeBands.Callable callable = (NewAttributeBands.Callable)attributeLayoutElement;\n+                final Iterator iterator = NewAttributeBands.Callable.access$000(callable).iterator();\n+                while (iterator.hasNext()) {\n+                    this.resolveCallsForElement(i, callable, (NewAttributeBands.LayoutElement)iterator.next());\n                 }\n             }\n         }\n         int backwardsCallableIndex = 0;\n-        for (final NewAttributeBands.AttributeLayoutElement attributeLayoutElement : this.attributeLayoutElements) {\n-            if (attributeLayoutElement instanceof NewAttributeBands.Callable) {\n-                final NewAttributeBands.Callable callable2 = (NewAttributeBands.Callable)attributeLayoutElement;\n+        for (final NewAttributeBands.AttributeLayoutElement attributeLayoutElement2 : this.attributeLayoutElements) {\n+            if (attributeLayoutElement2 instanceof NewAttributeBands.Callable) {\n+                final NewAttributeBands.Callable callable2 = (NewAttributeBands.Callable)attributeLayoutElement2;\n                 if (!NewAttributeBands.Callable.access$100(callable2)) {\n                     continue;\n                 }\n                 callable2.setBackwardsCallableIndex(backwardsCallableIndex);\n                 ++backwardsCallableIndex;\n             }\n         }\n         this.backwardsCallCounts = new int[backwardsCallableIndex];\n     }\n     \n-    private void resolveCallsForElement(final int i, final NewAttributeBands.Callable currentCallable, final NewAttributeBands.LayoutElement layoutElement) {\n+    private void resolveCallsForElement(final int n, final NewAttributeBands.Callable callable, final NewAttributeBands.LayoutElement layoutElement) {\n         if (layoutElement instanceof NewAttributeBands.Call) {\n             final NewAttributeBands.Call call = (NewAttributeBands.Call)layoutElement;\n-            int index = NewAttributeBands.Call.access$200(call);\n-            if (index == 0) {\n-                call.setCallable(currentCallable);\n-            }\n-            else if (index > 0) {\n-                for (int k = i + 1; k < this.attributeLayoutElements.size(); ++k) {\n-                    final NewAttributeBands.AttributeLayoutElement el = (NewAttributeBands.AttributeLayoutElement)this.attributeLayoutElements.get(k);\n-                    if (el instanceof NewAttributeBands.Callable && --index == 0) {\n-                        call.setCallable((NewAttributeBands.Callable)el);\n+            int access$200 = NewAttributeBands.Call.access$200(call);\n+            if (access$200 == 0) {\n+                call.setCallable(callable);\n+            }\n+            else if (access$200 > 0) {\n+                for (int i = n + 1; i < this.attributeLayoutElements.size(); ++i) {\n+                    final NewAttributeBands.AttributeLayoutElement attributeLayoutElement = (NewAttributeBands.AttributeLayoutElement)this.attributeLayoutElements.get(i);\n+                    if (attributeLayoutElement instanceof NewAttributeBands.Callable && --access$200 == 0) {\n+                        call.setCallable((NewAttributeBands.Callable)attributeLayoutElement);\n                         break;\n                     }\n                 }\n             }\n             else {\n-                for (int k = i - 1; k >= 0; --k) {\n-                    final NewAttributeBands.AttributeLayoutElement el = (NewAttributeBands.AttributeLayoutElement)this.attributeLayoutElements.get(k);\n-                    if (el instanceof NewAttributeBands.Callable && ++index == 0) {\n-                        call.setCallable((NewAttributeBands.Callable)el);\n+                for (int j = n - 1; j >= 0; --j) {\n+                    final NewAttributeBands.AttributeLayoutElement attributeLayoutElement2 = (NewAttributeBands.AttributeLayoutElement)this.attributeLayoutElements.get(j);\n+                    if (attributeLayoutElement2 instanceof NewAttributeBands.Callable && ++access$200 == 0) {\n+                        call.setCallable((NewAttributeBands.Callable)attributeLayoutElement2);\n                         break;\n                     }\n                 }\n             }\n         }\n         else if (layoutElement instanceof NewAttributeBands.Replication) {\n-            final List<NewAttributeBands.LayoutElement> children = NewAttributeBands.Replication.access$300((NewAttributeBands.Replication)layoutElement);\n-            for (final NewAttributeBands.LayoutElement child : children) {\n-                this.resolveCallsForElement(i, currentCallable, child);\n+            final Iterator iterator = NewAttributeBands.Replication.access$300((NewAttributeBands.Replication)layoutElement).iterator();\n+            while (iterator.hasNext()) {\n+                this.resolveCallsForElement(n, callable, (NewAttributeBands.LayoutElement)iterator.next());\n             }\n         }\n     }\n     \n-    private NewAttributeBands.AttributeLayoutElement readNextAttributeElement(final StringReader reader) throws IOException {\n-        reader.mark(1);\n-        final int next = reader.read();\n-        if (next == -1) {\n+    private NewAttributeBands.AttributeLayoutElement readNextAttributeElement(final StringReader stringReader) throws IOException {\n+        stringReader.mark(1);\n+        final int read = stringReader.read();\n+        if (read == -1) {\n             return null;\n         }\n-        if (next == 91) {\n-            return (NewAttributeBands.AttributeLayoutElement)new NewAttributeBands.Callable(this, (List)this.readBody(this.getStreamUpToMatchingBracket(reader)));\n+        if (read == 91) {\n+            return (NewAttributeBands.AttributeLayoutElement)new NewAttributeBands.Callable(this, (List)this.readBody(this.getStreamUpToMatchingBracket(stringReader)));\n         }\n-        reader.reset();\n-        return (NewAttributeBands.AttributeLayoutElement)this.readNextLayoutElement(reader);\n+        stringReader.reset();\n+        return (NewAttributeBands.AttributeLayoutElement)this.readNextLayoutElement(stringReader);\n     }\n     \n-    private NewAttributeBands.LayoutElement readNextLayoutElement(final StringReader reader) throws IOException {\n-        final int nextChar = reader.read();\n-        if (nextChar == -1) {\n+    private NewAttributeBands.LayoutElement readNextLayoutElement(final StringReader stringReader) throws IOException {\n+        final int read = stringReader.read();\n+        if (read == -1) {\n             return null;\n         }\n-        switch (nextChar) {\n+        switch (read) {\n             case 66:\n             case 72:\n             case 73:\n             case 86: {\n-                return (NewAttributeBands.LayoutElement)new NewAttributeBands.Integral(this, new String(new char[] { (char)nextChar }));\n+                return (NewAttributeBands.LayoutElement)new NewAttributeBands.Integral(this, new String(new char[] { (char)read }));\n             }\n             case 70:\n             case 83: {\n-                return (NewAttributeBands.LayoutElement)new NewAttributeBands.Integral(this, new String(new char[] { (char)nextChar, (char)reader.read() }));\n+                return (NewAttributeBands.LayoutElement)new NewAttributeBands.Integral(this, new String(new char[] { (char)read, (char)stringReader.read() }));\n             }\n             case 80: {\n-                reader.mark(1);\n-                if (reader.read() != 79) {\n-                    reader.reset();\n-                    return (NewAttributeBands.LayoutElement)(this.lastPIntegral = new NewAttributeBands.Integral(this, \"P\" + (char)reader.read()));\n+                stringReader.mark(1);\n+                if (stringReader.read() != 79) {\n+                    stringReader.reset();\n+                    return (NewAttributeBands.LayoutElement)(this.lastPIntegral = new NewAttributeBands.Integral(this, \"P\" + (char)stringReader.read()));\n                 }\n-                return (NewAttributeBands.LayoutElement)(this.lastPIntegral = new NewAttributeBands.Integral(this, \"PO\" + (char)reader.read(), this.lastPIntegral));\n+                return (NewAttributeBands.LayoutElement)(this.lastPIntegral = new NewAttributeBands.Integral(this, \"PO\" + (char)stringReader.read(), this.lastPIntegral));\n             }\n             case 79: {\n-                reader.mark(1);\n-                if (reader.read() != 83) {\n-                    reader.reset();\n-                    return (NewAttributeBands.LayoutElement)new NewAttributeBands.Integral(this, \"O\" + (char)reader.read(), this.lastPIntegral);\n+                stringReader.mark(1);\n+                if (stringReader.read() != 83) {\n+                    stringReader.reset();\n+                    return (NewAttributeBands.LayoutElement)new NewAttributeBands.Integral(this, \"O\" + (char)stringReader.read(), this.lastPIntegral);\n                 }\n-                return (NewAttributeBands.LayoutElement)new NewAttributeBands.Integral(this, \"OS\" + (char)reader.read(), this.lastPIntegral);\n+                return (NewAttributeBands.LayoutElement)new NewAttributeBands.Integral(this, \"OS\" + (char)stringReader.read(), this.lastPIntegral);\n             }\n             case 78: {\n-                final char uint_type = (char)reader.read();\n-                reader.read();\n-                final String str = this.readUpToMatchingBracket(reader);\n-                return (NewAttributeBands.LayoutElement)new NewAttributeBands.Replication(this, \"\" + uint_type, str);\n+                final char c = (char)stringReader.read();\n+                stringReader.read();\n+                return (NewAttributeBands.LayoutElement)new NewAttributeBands.Replication(this, \"\" + c, this.readUpToMatchingBracket(stringReader));\n             }\n             case 84: {\n-                String int_type = String.valueOf((char)reader.read());\n-                if (int_type.equals(\"S\")) {\n-                    int_type += (char)reader.read();\n+                String str = String.valueOf((char)stringReader.read());\n+                if (str.equals(\"S\")) {\n+                    str += (char)stringReader.read();\n                 }\n-                final List<NewAttributeBands.UnionCase> unionCases = new ArrayList<NewAttributeBands.UnionCase>();\n-                NewAttributeBands.UnionCase c;\n-                while ((c = this.readNextUnionCase(reader)) != null) {\n-                    unionCases.add(c);\n+                final ArrayList list = new ArrayList();\n+                NewAttributeBands.UnionCase nextUnionCase;\n+                while ((nextUnionCase = this.readNextUnionCase(stringReader)) != null) {\n+                    list.add(nextUnionCase);\n                 }\n-                reader.read();\n-                reader.read();\n-                reader.read();\n+                stringReader.read();\n+                stringReader.read();\n+                stringReader.read();\n                 List<NewAttributeBands.LayoutElement> body = null;\n-                reader.mark(1);\n-                final char next = (char)reader.read();\n-                if (next != ']') {\n-                    reader.reset();\n-                    body = this.readBody(this.getStreamUpToMatchingBracket(reader));\n+                stringReader.mark(1);\n+                if ((char)stringReader.read() != ']') {\n+                    stringReader.reset();\n+                    body = this.readBody(this.getStreamUpToMatchingBracket(stringReader));\n                 }\n-                return (NewAttributeBands.LayoutElement)new NewAttributeBands.Union(this, int_type, (List)unionCases, (List)body);\n+                return (NewAttributeBands.LayoutElement)new NewAttributeBands.Union(this, str, (List)list, (List)body);\n             }\n             case 40: {\n-                final int number = (int)this.readNumber(reader);\n-                reader.read();\n-                return (NewAttributeBands.LayoutElement)new NewAttributeBands.Call(this, number);\n+                final int intValue = (int)this.readNumber(stringReader);\n+                stringReader.read();\n+                return (NewAttributeBands.LayoutElement)new NewAttributeBands.Call(this, intValue);\n             }\n             case 75:\n             case 82: {\n-                final StringBuilder string = new StringBuilder(\"\").append((char)nextChar).append((char)reader.read());\n-                final char nxt = (char)reader.read();\n-                string.append(nxt);\n-                if (nxt == 'N') {\n-                    string.append((char)reader.read());\n+                final StringBuilder append = new StringBuilder(\"\").append((char)read).append((char)stringReader.read());\n+                final char c2 = (char)stringReader.read();\n+                append.append(c2);\n+                if (c2 == 'N') {\n+                    append.append((char)stringReader.read());\n                 }\n-                return (NewAttributeBands.LayoutElement)new NewAttributeBands.Reference(this, string.toString());\n+                return (NewAttributeBands.LayoutElement)new NewAttributeBands.Reference(this, append.toString());\n             }\n             default: {\n                 return null;\n             }\n         }\n     }\n     \n-    private NewAttributeBands.UnionCase readNextUnionCase(final StringReader reader) throws IOException {\n-        reader.mark(2);\n-        reader.read();\n-        final int next = reader.read();\n-        char ch = (char)next;\n-        if (ch == ')' || next == -1) {\n-            reader.reset();\n+    private NewAttributeBands.UnionCase readNextUnionCase(final StringReader stringReader) throws IOException {\n+        stringReader.mark(2);\n+        stringReader.read();\n+        final int read = stringReader.read();\n+        if ((char)read == ')' || read == -1) {\n+            stringReader.reset();\n             return null;\n         }\n-        reader.reset();\n-        reader.read();\n-        final List<Integer> tags = new ArrayList<Integer>();\n-        Integer nextTag;\n+        stringReader.reset();\n+        stringReader.read();\n+        final ArrayList list = new ArrayList();\n+        Integer number;\n         do {\n-            nextTag = this.readNumber(reader);\n-            if (nextTag != null) {\n-                tags.add(nextTag);\n-                reader.read();\n-            }\n-        } while (nextTag != null);\n-        reader.read();\n-        reader.mark(1);\n-        ch = (char)reader.read();\n-        if (ch == ']') {\n-            return new NewAttributeBands.UnionCase(this, (List)tags);\n+            number = this.readNumber(stringReader);\n+            if (number != null) {\n+                list.add(number);\n+                stringReader.read();\n+            }\n+        } while (number != null);\n+        stringReader.read();\n+        stringReader.mark(1);\n+        if ((char)stringReader.read() == ']') {\n+            return new NewAttributeBands.UnionCase(this, (List)list);\n         }\n-        reader.reset();\n-        return new NewAttributeBands.UnionCase(this, (List)tags, (List)this.readBody(this.getStreamUpToMatchingBracket(reader)));\n+        stringReader.reset();\n+        return new NewAttributeBands.UnionCase(this, (List)list, (List)this.readBody(this.getStreamUpToMatchingBracket(stringReader)));\n     }\n     \n-    private StringReader getStreamUpToMatchingBracket(final StringReader reader) throws IOException {\n+    private StringReader getStreamUpToMatchingBracket(final StringReader stringReader) throws IOException {\n         final StringBuilder sb = new StringBuilder();\n-        int foundBracket = -1;\n-        while (foundBracket != 0) {\n-            final int read = reader.read();\n+        int i = -1;\n+        while (i != 0) {\n+            final int read = stringReader.read();\n             if (read == -1) {\n                 break;\n             }\n             final char c = (char)read;\n             if (c == ']') {\n-                ++foundBracket;\n+                ++i;\n             }\n             if (c == '[') {\n-                --foundBracket;\n+                --i;\n             }\n-            if (foundBracket == 0) {\n+            if (i == 0) {\n                 continue;\n             }\n             sb.append(c);\n         }\n         return new StringReader(sb.toString());\n     }\n     \n-    private int readInteger(final int i, final InputStream inputStream) {\n-        int result = 0;\n-        for (int j = 0; j < i; ++j) {\n+    private int readInteger(final int n, final InputStream inputStream) {\n+        int n2 = 0;\n+        for (int i = 0; i < n; ++i) {\n             try {\n-                result = (result << 8 | inputStream.read());\n+                n2 = (n2 << 8 | inputStream.read());\n             }\n-            catch (final IOException e) {\n-                throw new UncheckedIOException(\"Error reading unknown attribute\", e);\n+            catch (final IOException cause) {\n+                throw new UncheckedIOException(\"Error reading unknown attribute\", cause);\n             }\n         }\n-        if (i == 1) {\n-            result = (byte)result;\n+        if (n == 1) {\n+            n2 = (byte)n2;\n         }\n-        if (i == 2) {\n-            result = (short)result;\n+        if (n == 2) {\n+            n2 = (short)n2;\n         }\n-        return result;\n+        return n2;\n     }\n     \n-    private BHSDCodec getCodec(final String layoutElement) {\n-        if (layoutElement.indexOf(79) >= 0) {\n+    private BHSDCodec getCodec(final String s) {\n+        if (s.indexOf(79) >= 0) {\n             return Codec.BRANCH5;\n         }\n-        if (layoutElement.indexOf(80) >= 0) {\n+        if (s.indexOf(80) >= 0) {\n             return Codec.BCI5;\n         }\n-        if (layoutElement.indexOf(83) >= 0 && layoutElement.indexOf(\"KS\") < 0 && layoutElement.indexOf(\"RS\") < 0) {\n+        if (s.indexOf(83) >= 0 && s.indexOf(\"KS\") < 0 && s.indexOf(\"RS\") < 0) {\n             return Codec.SIGNED5;\n         }\n-        if (layoutElement.indexOf(66) >= 0) {\n+        if (s.indexOf(66) >= 0) {\n             return Codec.BYTE1;\n         }\n         return Codec.UNSIGNED5;\n     }\n     \n-    private String readUpToMatchingBracket(final StringReader reader) throws IOException {\n+    private String readUpToMatchingBracket(final StringReader stringReader) throws IOException {\n         final StringBuilder sb = new StringBuilder();\n-        int foundBracket = -1;\n-        while (foundBracket != 0) {\n-            final int read = reader.read();\n+        int i = -1;\n+        while (i != 0) {\n+            final int read = stringReader.read();\n             if (read == -1) {\n                 break;\n             }\n             final char c = (char)read;\n             if (c == ']') {\n-                ++foundBracket;\n+                ++i;\n             }\n             if (c == '[') {\n-                --foundBracket;\n+                --i;\n             }\n-            if (foundBracket == 0) {\n+            if (i == 0) {\n                 continue;\n             }\n             sb.append(c);\n         }\n         return sb.toString();\n     }\n     \n-    private Integer readNumber(final StringReader stream) throws IOException {\n-        stream.mark(1);\n-        final char first = (char)stream.read();\n-        final boolean negative = first == '-';\n-        if (!negative) {\n-            stream.reset();\n-        }\n-        stream.mark(100);\n-        int length = 0;\n-        int i;\n-        while ((i = stream.read()) != -1 && Character.isDigit((char)i)) {\n-            ++length;\n+    private Integer readNumber(final StringReader stringReader) throws IOException {\n+        stringReader.mark(1);\n+        final boolean b = (char)stringReader.read() == '-';\n+        if (!b) {\n+            stringReader.reset();\n+        }\n+        stringReader.mark(100);\n+        int n = 0;\n+        int read;\n+        while ((read = stringReader.read()) != -1 && Character.isDigit((char)read)) {\n+            ++n;\n         }\n-        stream.reset();\n-        if (length == 0) {\n+        stringReader.reset();\n+        if (n == 0) {\n             return null;\n         }\n-        final char[] digits = new char[length];\n-        final int read = stream.read(digits);\n-        if (read != digits.length) {\n+        final char[] array = new char[n];\n+        if (stringReader.read(array) != array.length) {\n             throw new IOException(\"Error reading from the input stream\");\n         }\n-        return Integer.valueOf(Integer.parseInt((negative ? \"-\" : \"\") + new String(digits)));\n+        return Integer.valueOf(Integer.parseInt((b ? \"-\" : \"\") + new String(array)));\n     }\n     \n-    private List<NewAttributeBands.LayoutElement> readBody(final StringReader reader) throws IOException {\n-        final List<NewAttributeBands.LayoutElement> layoutElements = new ArrayList<NewAttributeBands.LayoutElement>();\n-        NewAttributeBands.LayoutElement e;\n-        while ((e = this.readNextLayoutElement(reader)) != null) {\n-            layoutElements.add(e);\n+    private List<NewAttributeBands.LayoutElement> readBody(final StringReader stringReader) throws IOException {\n+        final ArrayList list = new ArrayList();\n+        NewAttributeBands.LayoutElement nextLayoutElement;\n+        while ((nextLayoutElement = this.readNextLayoutElement(stringReader)) != null) {\n+            list.add(nextLayoutElement);\n         }\n-        return layoutElements;\n+        return list;\n     }\n     \n-    public void renumberBci(final IntList bciRenumbering, final Map<Label, Integer> labelsToOffsets) {\n-        for (final NewAttributeBands.AttributeLayoutElement attributeLayoutElement : this.attributeLayoutElements) {\n-            attributeLayoutElement.renumberBci(bciRenumbering, (Map)labelsToOffsets);\n+    public void renumberBci(final IntList list, final Map<Label, Integer> map) {\n+        final Iterator<NewAttributeBands.AttributeLayoutElement> iterator = this.attributeLayoutElements.iterator();\n+        while (iterator.hasNext()) {\n+            ((NewAttributeBands.AttributeLayoutElement)iterator.next()).renumberBci(list, (Map)map);\n         }\n     }\n }\n"}]}
