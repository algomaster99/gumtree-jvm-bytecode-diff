{"diffoscope-json-version": 1, "source1": "first/ZipFile$StoredStatisticsStream.class", "source2": "second/ZipFile$StoredStatisticsStream.class", "unified_diff": null, "details": [{"source1": "javap -verbose -constants -s -l -private {}", "source2": "javap -verbose -constants -s -l -private {}", "unified_diff": "@@ -1,57 +1,57 @@\n-  SHA-256 checksum c224ced34ca9ed5fabf8724992ad876f134a26e20309f4c3cf140e3827b27225\n+  SHA-256 checksum 250c8991181ad04acf3c1ff2621bec4dc755ef126e44f61c61d229947b742cf3\n   Compiled from \"ZipFile.java\"\n class org.apache.commons.compress.archivers.zip.ZipFile$StoredStatisticsStream extends org.apache.commons.compress.utils.CountingInputStream implements org.apache.commons.compress.utils.InputStreamStatistics\n   minor version: 0\n   major version: 53\n   flags: (0x0020) ACC_SUPER\n-  this_class: #12                         // org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream\n-  super_class: #2                         // org/apache/commons/compress/utils/CountingInputStream\n+  this_class: #1                          // org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream\n+  super_class: #3                         // org/apache/commons/compress/utils/CountingInputStream\n   interfaces: 1, fields: 0, methods: 3, attributes: 2\n Constant pool:\n-   #1 = Methodref          #2.#3          // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n-   #2 = Class              #4             // org/apache/commons/compress/utils/CountingInputStream\n-   #3 = NameAndType        #5:#6          // \"<init>\":(Ljava/io/InputStream;)V\n+   #1 = Class              #2             // org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream\n+   #2 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream\n+   #3 = Class              #4             // org/apache/commons/compress/utils/CountingInputStream\n    #4 = Utf8               org/apache/commons/compress/utils/CountingInputStream\n-   #5 = Utf8               <init>\n-   #6 = Utf8               (Ljava/io/InputStream;)V\n-   #7 = Methodref          #2.#8          // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n-   #8 = NameAndType        #9:#10         // getBytesRead:()J\n-   #9 = Utf8               getBytesRead\n-  #10 = Utf8               ()J\n-  #11 = Methodref          #12.#13        // org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream.getCompressedCount:()J\n-  #12 = Class              #14            // org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream\n-  #13 = NameAndType        #15:#10        // getCompressedCount:()J\n-  #14 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream\n-  #15 = Utf8               getCompressedCount\n-  #16 = Class              #17            // org/apache/commons/compress/utils/InputStreamStatistics\n-  #17 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n-  #18 = Utf8               Code\n-  #19 = Utf8               LineNumberTable\n-  #20 = Utf8               LocalVariableTable\n-  #21 = Utf8               this\n-  #22 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream;\n-  #23 = Utf8               in\n-  #24 = Utf8               Ljava/io/InputStream;\n-  #25 = Utf8               getUncompressedCount\n+   #5 = Class              #6             // org/apache/commons/compress/utils/InputStreamStatistics\n+   #6 = Utf8               org/apache/commons/compress/utils/InputStreamStatistics\n+   #7 = Utf8               <init>\n+   #8 = Utf8               (Ljava/io/InputStream;)V\n+   #9 = Utf8               Code\n+  #10 = Methodref          #3.#11         // org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+  #11 = NameAndType        #7:#8          // \"<init>\":(Ljava/io/InputStream;)V\n+  #12 = Utf8               LineNumberTable\n+  #13 = Utf8               LocalVariableTable\n+  #14 = Utf8               this\n+  #15 = Utf8               Lorg/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream;\n+  #16 = Utf8               in\n+  #17 = Utf8               Ljava/io/InputStream;\n+  #18 = Utf8               getCompressedCount\n+  #19 = Utf8               ()J\n+  #20 = Methodref          #3.#21         // org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+  #21 = NameAndType        #22:#19        // getBytesRead:()J\n+  #22 = Utf8               getBytesRead\n+  #23 = Utf8               getUncompressedCount\n+  #24 = Methodref          #1.#25         // org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream.getCompressedCount:()J\n+  #25 = NameAndType        #18:#19        // getCompressedCount:()J\n   #26 = Utf8               SourceFile\n   #27 = Utf8               ZipFile.java\n   #28 = Utf8               InnerClasses\n   #29 = Class              #30            // org/apache/commons/compress/archivers/zip/ZipFile\n   #30 = Utf8               org/apache/commons/compress/archivers/zip/ZipFile\n   #31 = Utf8               StoredStatisticsStream\n {\n   org.apache.commons.compress.archivers.zip.ZipFile$StoredStatisticsStream(java.io.InputStream);\n     descriptor: (Ljava/io/InputStream;)V\n     flags: (0x0000)\n     Code:\n       stack=2, locals=2, args_size=2\n          0: aload_0\n          1: aload_1\n-         2: invokespecial #1                  // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n+         2: invokespecial #10                 // Method org/apache/commons/compress/utils/CountingInputStream.\"<init>\":(Ljava/io/InputStream;)V\n          5: return\n       LineNumberTable:\n         line 1479: 0\n         line 1480: 5\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       6     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream;\n@@ -59,32 +59,32 @@\n \n   public long getCompressedCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: invokespecial #7                  // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n+         1: invokespecial #20                 // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J\n          4: lreturn\n       LineNumberTable:\n         line 1484: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream;\n \n   public long getUncompressedCount();\n     descriptor: ()J\n     flags: (0x0001) ACC_PUBLIC\n     Code:\n       stack=2, locals=1, args_size=1\n          0: aload_0\n-         1: invokevirtual #11                 // Method getCompressedCount:()J\n+         1: invokevirtual #24                 // Method getCompressedCount:()J\n          4: lreturn\n       LineNumberTable:\n         line 1489: 0\n       LocalVariableTable:\n         Start  Length  Slot  Name   Signature\n             0       5     0  this   Lorg/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream;\n }\n SourceFile: \"ZipFile.java\"\n InnerClasses:\n-  private static #31= #12 of #29;         // StoredStatisticsStream=class org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream of class org/apache/commons/compress/archivers/zip/ZipFile\n+  private static #31= #1 of #29;          // StoredStatisticsStream=class org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream of class org/apache/commons/compress/archivers/zip/ZipFile\n"}]}
