{"diffoscope-json-version": 1, "source1": "first/EndianUtils.class", "source2": "second/EndianUtils.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -4,173 +4,157 @@\n import java.io.OutputStream;\n import java.io.IOException;\n import java.io.EOFException;\n import java.io.InputStream;\n \n public class EndianUtils\n {\n-    private static int read(final InputStream input) throws IOException {\n-        final int value = input.read();\n-        if (-1 == value) {\n+    private static int read(final InputStream inputStream) throws IOException {\n+        final int read = inputStream.read();\n+        if (-1 == read) {\n             throw new EOFException(\"Unexpected EOF reached\");\n         }\n-        return value;\n+        return read;\n     }\n     \n-    public static double readSwappedDouble(final byte[] data, final int offset) {\n-        return Double.longBitsToDouble(readSwappedLong(data, offset));\n+    public static double readSwappedDouble(final byte[] array, final int n) {\n+        return Double.longBitsToDouble(readSwappedLong(array, n));\n     }\n     \n-    public static double readSwappedDouble(final InputStream input) throws IOException {\n-        return Double.longBitsToDouble(readSwappedLong(input));\n+    public static double readSwappedDouble(final InputStream inputStream) throws IOException {\n+        return Double.longBitsToDouble(readSwappedLong(inputStream));\n     }\n     \n-    public static float readSwappedFloat(final byte[] data, final int offset) {\n-        return Float.intBitsToFloat(readSwappedInteger(data, offset));\n+    public static float readSwappedFloat(final byte[] array, final int n) {\n+        return Float.intBitsToFloat(readSwappedInteger(array, n));\n     }\n     \n-    public static float readSwappedFloat(final InputStream input) throws IOException {\n-        return Float.intBitsToFloat(readSwappedInteger(input));\n+    public static float readSwappedFloat(final InputStream inputStream) throws IOException {\n+        return Float.intBitsToFloat(readSwappedInteger(inputStream));\n     }\n     \n-    public static int readSwappedInteger(final byte[] data, final int offset) {\n-        return ((data[offset + 0] & 0xFF) << 0) + ((data[offset + 1] & 0xFF) << 8) + ((data[offset + 2] & 0xFF) << 16) + ((data[offset + 3] & 0xFF) << 24);\n+    public static int readSwappedInteger(final byte[] array, final int n) {\n+        return ((array[n + 0] & 0xFF) << 0) + ((array[n + 1] & 0xFF) << 8) + ((array[n + 2] & 0xFF) << 16) + ((array[n + 3] & 0xFF) << 24);\n     }\n     \n-    public static int readSwappedInteger(final InputStream input) throws IOException {\n-        final int value1 = read(input);\n-        final int value2 = read(input);\n-        final int value3 = read(input);\n-        final int value4 = read(input);\n-        return ((value1 & 0xFF) << 0) + ((value2 & 0xFF) << 8) + ((value3 & 0xFF) << 16) + ((value4 & 0xFF) << 24);\n+    public static int readSwappedInteger(final InputStream inputStream) throws IOException {\n+        return ((read(inputStream) & 0xFF) << 0) + ((read(inputStream) & 0xFF) << 8) + ((read(inputStream) & 0xFF) << 16) + ((read(inputStream) & 0xFF) << 24);\n     }\n     \n-    public static long readSwappedLong(final byte[] data, final int offset) {\n-        final long low = (long)readSwappedInteger(data, offset);\n-        final long high = (long)readSwappedInteger(data, offset + 4);\n-        return (high << 32) + (0xFFFFFFFFL & low);\n+    public static long readSwappedLong(final byte[] array, final int n) {\n+        return ((long)readSwappedInteger(array, n + 4) << 32) + (0xFFFFFFFFL & (long)readSwappedInteger(array, n));\n     }\n     \n-    public static long readSwappedLong(final InputStream input) throws IOException {\n-        final byte[] bytes = new byte[8];\n+    public static long readSwappedLong(final InputStream inputStream) throws IOException {\n+        final byte[] array = new byte[8];\n         for (int i = 0; i < 8; ++i) {\n-            bytes[i] = (byte)read(input);\n+            array[i] = (byte)read(inputStream);\n         }\n-        return readSwappedLong(bytes, 0);\n+        return readSwappedLong(array, 0);\n     }\n     \n-    public static short readSwappedShort(final byte[] data, final int offset) {\n-        return (short)(((data[offset + 0] & 0xFF) << 0) + ((data[offset + 1] & 0xFF) << 8));\n+    public static short readSwappedShort(final byte[] array, final int n) {\n+        return (short)(((array[n + 0] & 0xFF) << 0) + ((array[n + 1] & 0xFF) << 8));\n     }\n     \n-    public static short readSwappedShort(final InputStream input) throws IOException {\n-        return (short)(((read(input) & 0xFF) << 0) + ((read(input) & 0xFF) << 8));\n+    public static short readSwappedShort(final InputStream inputStream) throws IOException {\n+        return (short)(((read(inputStream) & 0xFF) << 0) + ((read(inputStream) & 0xFF) << 8));\n     }\n     \n-    public static long readSwappedUnsignedInteger(final byte[] data, final int offset) {\n-        final long low = (long)(((data[offset + 0] & 0xFF) << 0) + ((data[offset + 1] & 0xFF) << 8) + ((data[offset + 2] & 0xFF) << 16));\n-        final long high = (long)(data[offset + 3] & 0xFF);\n-        return (high << 24) + (0xFFFFFFFFL & low);\n+    public static long readSwappedUnsignedInteger(final byte[] array, final int n) {\n+        return ((long)(array[n + 3] & 0xFF) << 24) + (0xFFFFFFFFL & (long)(((array[n + 0] & 0xFF) << 0) + ((array[n + 1] & 0xFF) << 8) + ((array[n + 2] & 0xFF) << 16)));\n     }\n     \n-    public static long readSwappedUnsignedInteger(final InputStream input) throws IOException {\n-        final int value1 = read(input);\n-        final int value2 = read(input);\n-        final int value3 = read(input);\n-        final int value4 = read(input);\n-        final long low = (long)(((value1 & 0xFF) << 0) + ((value2 & 0xFF) << 8) + ((value3 & 0xFF) << 16));\n-        final long high = (long)(value4 & 0xFF);\n-        return (high << 24) + (0xFFFFFFFFL & low);\n+    public static long readSwappedUnsignedInteger(final InputStream inputStream) throws IOException {\n+        return ((long)(read(inputStream) & 0xFF) << 24) + (0xFFFFFFFFL & (long)(((read(inputStream) & 0xFF) << 0) + ((read(inputStream) & 0xFF) << 8) + ((read(inputStream) & 0xFF) << 16)));\n     }\n     \n-    public static int readSwappedUnsignedShort(final byte[] data, final int offset) {\n-        return ((data[offset + 0] & 0xFF) << 0) + ((data[offset + 1] & 0xFF) << 8);\n+    public static int readSwappedUnsignedShort(final byte[] array, final int n) {\n+        return ((array[n + 0] & 0xFF) << 0) + ((array[n + 1] & 0xFF) << 8);\n     }\n     \n-    public static int readSwappedUnsignedShort(final InputStream input) throws IOException {\n-        final int value1 = read(input);\n-        final int value2 = read(input);\n-        return ((value1 & 0xFF) << 0) + ((value2 & 0xFF) << 8);\n+    public static int readSwappedUnsignedShort(final InputStream inputStream) throws IOException {\n+        return ((read(inputStream) & 0xFF) << 0) + ((read(inputStream) & 0xFF) << 8);\n     }\n     \n     public static double swapDouble(final double value) {\n         return Double.longBitsToDouble(swapLong(Double.doubleToLongBits(value)));\n     }\n     \n     public static float swapFloat(final float value) {\n         return Float.intBitsToFloat(swapInteger(Float.floatToIntBits(value)));\n     }\n     \n-    public static int swapInteger(final int value) {\n-        return ((value >> 0 & 0xFF) << 24) + ((value >> 8 & 0xFF) << 16) + ((value >> 16 & 0xFF) << 8) + ((value >> 24 & 0xFF) << 0);\n+    public static int swapInteger(final int n) {\n+        return ((n >> 0 & 0xFF) << 24) + ((n >> 8 & 0xFF) << 16) + ((n >> 16 & 0xFF) << 8) + ((n >> 24 & 0xFF) << 0);\n     }\n     \n-    public static long swapLong(final long value) {\n-        return ((value >> 0 & 0xFFL) << 56) + ((value >> 8 & 0xFFL) << 48) + ((value >> 16 & 0xFFL) << 40) + ((value >> 24 & 0xFFL) << 32) + ((value >> 32 & 0xFFL) << 24) + ((value >> 40 & 0xFFL) << 16) + ((value >> 48 & 0xFFL) << 8) + ((value >> 56 & 0xFFL) << 0);\n+    public static long swapLong(final long n) {\n+        return ((n >> 0 & 0xFFL) << 56) + ((n >> 8 & 0xFFL) << 48) + ((n >> 16 & 0xFFL) << 40) + ((n >> 24 & 0xFFL) << 32) + ((n >> 32 & 0xFFL) << 24) + ((n >> 40 & 0xFFL) << 16) + ((n >> 48 & 0xFFL) << 8) + ((n >> 56 & 0xFFL) << 0);\n     }\n     \n-    public static short swapShort(final short value) {\n-        return (short)(((value >> 0 & 0xFF) << 8) + ((value >> 8 & 0xFF) << 0));\n+    public static short swapShort(final short n) {\n+        return (short)(((n >> 0 & 0xFF) << 8) + ((n >> 8 & 0xFF) << 0));\n     }\n     \n-    public static void writeSwappedDouble(final byte[] data, final int offset, final double value) {\n-        writeSwappedLong(data, offset, Double.doubleToLongBits(value));\n+    public static void writeSwappedDouble(final byte[] array, final int n, final double value) {\n+        writeSwappedLong(array, n, Double.doubleToLongBits(value));\n     }\n     \n-    public static void writeSwappedDouble(final OutputStream output, final double value) throws IOException {\n-        writeSwappedLong(output, Double.doubleToLongBits(value));\n+    public static void writeSwappedDouble(final OutputStream outputStream, final double value) throws IOException {\n+        writeSwappedLong(outputStream, Double.doubleToLongBits(value));\n     }\n     \n-    public static void writeSwappedFloat(final byte[] data, final int offset, final float value) {\n-        writeSwappedInteger(data, offset, Float.floatToIntBits(value));\n+    public static void writeSwappedFloat(final byte[] array, final int n, final float value) {\n+        writeSwappedInteger(array, n, Float.floatToIntBits(value));\n     }\n     \n-    public static void writeSwappedFloat(final OutputStream output, final float value) throws IOException {\n-        writeSwappedInteger(output, Float.floatToIntBits(value));\n+    public static void writeSwappedFloat(final OutputStream outputStream, final float value) throws IOException {\n+        writeSwappedInteger(outputStream, Float.floatToIntBits(value));\n     }\n     \n-    public static void writeSwappedInteger(final byte[] data, final int offset, final int value) {\n-        data[offset + 0] = (byte)(value >> 0 & 0xFF);\n-        data[offset + 1] = (byte)(value >> 8 & 0xFF);\n-        data[offset + 2] = (byte)(value >> 16 & 0xFF);\n-        data[offset + 3] = (byte)(value >> 24 & 0xFF);\n+    public static void writeSwappedInteger(final byte[] array, final int n, final int n2) {\n+        array[n + 0] = (byte)(n2 >> 0 & 0xFF);\n+        array[n + 1] = (byte)(n2 >> 8 & 0xFF);\n+        array[n + 2] = (byte)(n2 >> 16 & 0xFF);\n+        array[n + 3] = (byte)(n2 >> 24 & 0xFF);\n     }\n     \n-    public static void writeSwappedInteger(final OutputStream output, final int value) throws IOException {\n-        output.write(value >> 0 & 0xFF);\n-        output.write(value >> 8 & 0xFF);\n-        output.write(value >> 16 & 0xFF);\n-        output.write(value >> 24 & 0xFF);\n+    public static void writeSwappedInteger(final OutputStream outputStream, final int n) throws IOException {\n+        outputStream.write(n >> 0 & 0xFF);\n+        outputStream.write(n >> 8 & 0xFF);\n+        outputStream.write(n >> 16 & 0xFF);\n+        outputStream.write(n >> 24 & 0xFF);\n     }\n     \n-    public static void writeSwappedLong(final byte[] data, final int offset, final long value) {\n-        data[offset + 0] = (byte)(value >> 0 & 0xFFL);\n-        data[offset + 1] = (byte)(value >> 8 & 0xFFL);\n-        data[offset + 2] = (byte)(value >> 16 & 0xFFL);\n-        data[offset + 3] = (byte)(value >> 24 & 0xFFL);\n-        data[offset + 4] = (byte)(value >> 32 & 0xFFL);\n-        data[offset + 5] = (byte)(value >> 40 & 0xFFL);\n-        data[offset + 6] = (byte)(value >> 48 & 0xFFL);\n-        data[offset + 7] = (byte)(value >> 56 & 0xFFL);\n+    public static void writeSwappedLong(final byte[] array, final int n, final long n2) {\n+        array[n + 0] = (byte)(n2 >> 0 & 0xFFL);\n+        array[n + 1] = (byte)(n2 >> 8 & 0xFFL);\n+        array[n + 2] = (byte)(n2 >> 16 & 0xFFL);\n+        array[n + 3] = (byte)(n2 >> 24 & 0xFFL);\n+        array[n + 4] = (byte)(n2 >> 32 & 0xFFL);\n+        array[n + 5] = (byte)(n2 >> 40 & 0xFFL);\n+        array[n + 6] = (byte)(n2 >> 48 & 0xFFL);\n+        array[n + 7] = (byte)(n2 >> 56 & 0xFFL);\n     }\n     \n-    public static void writeSwappedLong(final OutputStream output, final long value) throws IOException {\n-        output.write((int)(value >> 0 & 0xFFL));\n-        output.write((int)(value >> 8 & 0xFFL));\n-        output.write((int)(value >> 16 & 0xFFL));\n-        output.write((int)(value >> 24 & 0xFFL));\n-        output.write((int)(value >> 32 & 0xFFL));\n-        output.write((int)(value >> 40 & 0xFFL));\n-        output.write((int)(value >> 48 & 0xFFL));\n-        output.write((int)(value >> 56 & 0xFFL));\n+    public static void writeSwappedLong(final OutputStream outputStream, final long n) throws IOException {\n+        outputStream.write((int)(n >> 0 & 0xFFL));\n+        outputStream.write((int)(n >> 8 & 0xFFL));\n+        outputStream.write((int)(n >> 16 & 0xFFL));\n+        outputStream.write((int)(n >> 24 & 0xFFL));\n+        outputStream.write((int)(n >> 32 & 0xFFL));\n+        outputStream.write((int)(n >> 40 & 0xFFL));\n+        outputStream.write((int)(n >> 48 & 0xFFL));\n+        outputStream.write((int)(n >> 56 & 0xFFL));\n     }\n     \n-    public static void writeSwappedShort(final byte[] data, final int offset, final short value) {\n-        data[offset + 0] = (byte)(value >> 0 & 0xFF);\n-        data[offset + 1] = (byte)(value >> 8 & 0xFF);\n+    public static void writeSwappedShort(final byte[] array, final int n, final short n2) {\n+        array[n + 0] = (byte)(n2 >> 0 & 0xFF);\n+        array[n + 1] = (byte)(n2 >> 8 & 0xFF);\n     }\n     \n-    public static void writeSwappedShort(final OutputStream output, final short value) throws IOException {\n-        output.write(value >> 0 & 0xFF);\n-        output.write(value >> 8 & 0xFF);\n+    public static void writeSwappedShort(final OutputStream outputStream, final short n) throws IOException {\n+        outputStream.write(n >> 0 & 0xFF);\n+        outputStream.write(n >> 8 & 0xFF);\n     }\n }\n"}]}
