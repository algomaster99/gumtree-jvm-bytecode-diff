{"diffoscope-json-version": 1, "source1": "first/Parameters$Builder.class", "source2": "second/Parameters$Builder.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -9,31 +9,30 @@\n     private int maxOffset;\n     private int maxLiteralLength;\n     private Integer niceBackReferenceLength;\n     private Integer maxCandidates;\n     private Integer lazyThreshold;\n     private Boolean lazyMatches;\n     \n-    private Builder(final int windowSize) {\n-        if (windowSize < 2 || !Parameters.access$000(windowSize)) {\n+    private Builder(final int n) {\n+        if (n < 2 || !Parameters.access$000(n)) {\n             throw new IllegalArgumentException(\"windowSize must be a power of two\");\n         }\n-        this.windowSize = windowSize;\n+        this.windowSize = n;\n         this.minBackReferenceLength = 3;\n-        this.maxBackReferenceLength = windowSize - 1;\n-        this.maxOffset = windowSize - 1;\n-        this.maxLiteralLength = windowSize;\n+        this.maxBackReferenceLength = n - 1;\n+        this.maxOffset = n - 1;\n+        this.maxLiteralLength = n;\n     }\n     \n     public Parameters build() {\n-        final int niceLen = (this.niceBackReferenceLength != null) ? ((int)this.niceBackReferenceLength) : Math.max(this.minBackReferenceLength, this.maxBackReferenceLength / 2);\n-        final int candidates = (this.maxCandidates != null) ? ((int)this.maxCandidates) : Math.max(256, this.windowSize / 128);\n-        final boolean lazy = this.lazyMatches == null || this.lazyMatches;\n-        final int threshold = lazy ? ((this.lazyThreshold != null) ? ((int)this.lazyThreshold) : niceLen) : this.minBackReferenceLength;\n-        return new Parameters(this.windowSize, this.minBackReferenceLength, this.maxBackReferenceLength, this.maxOffset, this.maxLiteralLength, niceLen, candidates, lazy, threshold, (Parameters.Parameters$1)null);\n+        final int n = (this.niceBackReferenceLength != null) ? ((int)this.niceBackReferenceLength) : Math.max(this.minBackReferenceLength, this.maxBackReferenceLength / 2);\n+        final int n2 = (this.maxCandidates != null) ? ((int)this.maxCandidates) : Math.max(256, this.windowSize / 128);\n+        final boolean b = this.lazyMatches == null || this.lazyMatches;\n+        return new Parameters(this.windowSize, this.minBackReferenceLength, this.maxBackReferenceLength, this.maxOffset, this.maxLiteralLength, n, n2, b, b ? ((this.lazyThreshold != null) ? ((int)this.lazyThreshold) : n) : this.minBackReferenceLength, (Parameters.Parameters$1)null);\n     }\n     \n     public Builder tunedForCompressionRatio() {\n         final Integer value = Integer.valueOf(this.maxBackReferenceLength);\n         this.lazyThreshold = value;\n         this.niceBackReferenceLength = value;\n         this.maxCandidates = Integer.valueOf(Math.max(32, this.windowSize / 16));\n@@ -45,53 +44,53 @@\n         this.niceBackReferenceLength = Integer.valueOf(Math.max(this.minBackReferenceLength, this.maxBackReferenceLength / 8));\n         this.maxCandidates = Integer.valueOf(Math.max(32, this.windowSize / 1024));\n         this.lazyMatches = Boolean.valueOf(false);\n         this.lazyThreshold = Integer.valueOf(this.minBackReferenceLength);\n         return this;\n     }\n     \n-    public Builder withLazyMatching(final boolean lazy) {\n-        this.lazyMatches = Boolean.valueOf(lazy);\n+    public Builder withLazyMatching(final boolean b) {\n+        this.lazyMatches = Boolean.valueOf(b);\n         return this;\n     }\n     \n-    public Builder withLazyThreshold(final int threshold) {\n-        this.lazyThreshold = Integer.valueOf(threshold);\n+    public Builder withLazyThreshold(final int i) {\n+        this.lazyThreshold = Integer.valueOf(i);\n         return this;\n     }\n     \n-    public Builder withMaxBackReferenceLength(final int maxBackReferenceLength) {\n-        this.maxBackReferenceLength = ((maxBackReferenceLength < this.minBackReferenceLength) ? this.minBackReferenceLength : Math.min(maxBackReferenceLength, this.windowSize - 1));\n+    public Builder withMaxBackReferenceLength(final int a) {\n+        this.maxBackReferenceLength = ((a < this.minBackReferenceLength) ? this.minBackReferenceLength : Math.min(a, this.windowSize - 1));\n         return this;\n     }\n     \n-    public Builder withMaxLiteralLength(final int maxLiteralLength) {\n-        this.maxLiteralLength = ((maxLiteralLength < 1) ? this.windowSize : Math.min(maxLiteralLength, this.windowSize));\n+    public Builder withMaxLiteralLength(final int a) {\n+        this.maxLiteralLength = ((a < 1) ? this.windowSize : Math.min(a, this.windowSize));\n         return this;\n     }\n     \n-    public Builder withMaxNumberOfCandidates(final int maxCandidates) {\n-        this.maxCandidates = Integer.valueOf(maxCandidates);\n+    public Builder withMaxNumberOfCandidates(final int i) {\n+        this.maxCandidates = Integer.valueOf(i);\n         return this;\n     }\n     \n-    public Builder withMaxOffset(final int maxOffset) {\n-        this.maxOffset = ((maxOffset < 1) ? (this.windowSize - 1) : Math.min(maxOffset, this.windowSize - 1));\n+    public Builder withMaxOffset(final int a) {\n+        this.maxOffset = ((a < 1) ? (this.windowSize - 1) : Math.min(a, this.windowSize - 1));\n         return this;\n     }\n     \n-    public Builder withMinBackReferenceLength(final int minBackReferenceLength) {\n-        this.minBackReferenceLength = Math.max(3, minBackReferenceLength);\n+    public Builder withMinBackReferenceLength(final int b) {\n+        this.minBackReferenceLength = Math.max(3, b);\n         if (this.windowSize < this.minBackReferenceLength) {\n             throw new IllegalArgumentException(\"minBackReferenceLength can't be bigger than windowSize\");\n         }\n         if (this.maxBackReferenceLength < this.minBackReferenceLength) {\n             this.maxBackReferenceLength = this.minBackReferenceLength;\n         }\n         return this;\n     }\n     \n-    public Builder withNiceBackReferenceLength(final int niceLen) {\n-        this.niceBackReferenceLength = Integer.valueOf(niceLen);\n+    public Builder withNiceBackReferenceLength(final int i) {\n+        this.niceBackReferenceLength = Integer.valueOf(i);\n         return this;\n     }\n }\n"}]}
