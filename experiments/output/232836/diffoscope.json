{"diffoscope-json-version": 1, "source1": "first/ReferenceTracker.class", "source2": "second/ReferenceTracker.class", "unified_diff": null, "details": [{"source1": "procyon -ec {}", "source2": "procyon -ec {}", "unified_diff": "@@ -10,64 +10,64 @@\n import java.util.Map;\n \n class ReferenceTracker\n {\n     private final Map<ImmutableNode, Object> references;\n     private final List<Object> removedReferences;\n     \n-    private ReferenceTracker(final Map<ImmutableNode, Object> refs, final List<Object> removedRefs) {\n-        this.references = refs;\n-        this.removedReferences = removedRefs;\n+    private ReferenceTracker(final Map<ImmutableNode, Object> references, final List<Object> removedReferences) {\n+        this.references = references;\n+        this.removedReferences = removedReferences;\n     }\n     \n     public ReferenceTracker() {\n         this(Collections.emptyMap(), Collections.emptyList());\n     }\n     \n-    public ReferenceTracker addReferences(final Map<ImmutableNode, ?> refs) {\n-        final Map<ImmutableNode, Object> newRefs = new HashMap<ImmutableNode, Object>(this.references);\n-        newRefs.putAll(refs);\n-        return new ReferenceTracker(newRefs, this.removedReferences);\n+    public ReferenceTracker addReferences(final Map<ImmutableNode, ?> map) {\n+        final HashMap hashMap = new HashMap((Map<? extends K, ? extends V>)this.references);\n+        hashMap.putAll(map);\n+        return new ReferenceTracker(hashMap, this.removedReferences);\n     }\n     \n-    public ReferenceTracker updateReferences(final Map<ImmutableNode, ImmutableNode> replacedNodes, final Collection<ImmutableNode> removedNodes) {\n+    public ReferenceTracker updateReferences(final Map<ImmutableNode, ImmutableNode> map, final Collection<ImmutableNode> collection) {\n         if (!this.references.isEmpty()) {\n-            Map<ImmutableNode, Object> newRefs = null;\n-            for (final Map.Entry<ImmutableNode, ImmutableNode> e : replacedNodes.entrySet()) {\n-                final Object ref = this.references.get(e.getKey());\n-                if (ref != null) {\n-                    if (newRefs == null) {\n-                        newRefs = new HashMap<ImmutableNode, Object>(this.references);\n+            Map<ImmutableNode, Object> map2 = null;\n+            for (final Map.Entry entry : map.entrySet()) {\n+                final Object value = this.references.get(entry.getKey());\n+                if (value != null) {\n+                    if (map2 == null) {\n+                        map2 = new HashMap<ImmutableNode, Object>(this.references);\n                     }\n-                    newRefs.put(e.getValue(), ref);\n-                    newRefs.remove(e.getKey());\n+                    map2.put((ImmutableNode)(Object)entry.getValue(), value);\n+                    map2.remove(entry.getKey());\n                 }\n             }\n-            List<Object> newRemovedRefs = (newRefs != null) ? new LinkedList<Object>(this.removedReferences) : null;\n-            for (final ImmutableNode node : removedNodes) {\n-                final Object ref2 = this.references.get(node);\n-                if (ref2 != null) {\n-                    if (newRefs == null) {\n-                        newRefs = new HashMap<ImmutableNode, Object>(this.references);\n+            LinkedList<Object> list = (map2 != null) ? new LinkedList<Object>(this.removedReferences) : null;\n+            for (final ImmutableNode immutableNode : collection) {\n+                final Object value2 = this.references.get(immutableNode);\n+                if (value2 != null) {\n+                    if (map2 == null) {\n+                        map2 = new HashMap<ImmutableNode, Object>(this.references);\n                     }\n-                    newRefs.remove(node);\n-                    if (newRemovedRefs == null) {\n-                        newRemovedRefs = new LinkedList<Object>(this.removedReferences);\n+                    map2.remove(immutableNode);\n+                    if (list == null) {\n+                        list = new LinkedList<Object>(this.removedReferences);\n                     }\n-                    newRemovedRefs.add(ref2);\n+                    list.add(value2);\n                 }\n             }\n-            if (newRefs != null) {\n-                return new ReferenceTracker(newRefs, newRemovedRefs);\n+            if (map2 != null) {\n+                return new ReferenceTracker(map2, list);\n             }\n         }\n         return this;\n     }\n     \n-    public Object getReference(final ImmutableNode node) {\n-        return this.references.get(node);\n+    public Object getReference(final ImmutableNode immutableNode) {\n+        return this.references.get(immutableNode);\n     }\n     \n     public List<Object> getRemovedReferences() {\n         return Collections.unmodifiableList((List<?>)this.removedReferences);\n     }\n }\n"}]}
